<?php
error_reporting(E_ALL);

require_once 'config.php';
require_once 'Client.php';

// Allow the script to hang around waiting for connections.
set_time_limit(0);

// Turn on implicit output flushing so we see what we're getting as it comes in.
ob_implicit_flush();

// Connect to the database.
try {
	$db = new PDO("mysql:host=localhost;dbname=arcap", "admin", "admin");
	$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
	die("Error: {$e->getMessage()}");
}

// Create the socket.
$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
if (!$socket) {
	die("Cannot create socket: " . socket_strerror(socket_last_error()));
}

// Bind the socket.
if (!socket_bind($socket, ARCAP_SERVER_ADDRESS, ARCAP_SERVER_PORT)) {
	die("Cannot bind socket: " . socket_strerror(socket_last_error($socket)));
}

// Listen on the socket.
if (!socket_listen($socket, ARCAP_SERVER_BACKLOG)) {
	die("Cannot listen on socket: " . socket_strerror(socket_last_error($socket)));
}

// Monitor the socket.
while (true) {

	// Select the socket objects which have something to read.
	$read = array_merge(array($socket), Client::getConnections());
	$write = null;
	$except = null;
	$numChanged = socket_select($read, $write, $except, $tv_sec = 0);
	if ($numChanged === false) {
		echo "Cannot select socket objects: " . 
		socket_strerror(socket_last_error($socket)) . "\n";
		continue;
	}

	// Handle new connections.
	if (in_array($socket, $read)) {
		$connection = socket_accept($socket);
		if (!$connection) {
			echo "Cannot accept connection: " . 
			socket_strerror(socket_last_error($socket)) ."\n";
		} else {
			// Add the new client.
			Client::add($connection);
		}
	}

	// Handle new input.
	foreach (Client::$CLIENTS as $client) {
		if (!$client->connectionIn($read)) continue;
		// Read the message.
		$message = $client->read();
		if (!$message) {
			echo "Cannot read message: " . $client->error() . "\n";
			$client->close();
			continue;
		}
		// Ignore empty or whitespace-only messages.
		$message = trim($message);
		if (strlen($message) == 0) continue;
		// Log the message.
		$client->log($message);
		// Check for client details.
		if (!$client->hasDetails()) {
			if ($message[0] == ARCAP_CONNECT_PREFIX) {
				// Set client details.
				$client->setDetails($message);
				$client->write(ARCAP_OK);
			} else if (strpos($message, "GET") !== false) {
				// Handshake with websocket.
				$client->useWebsocket();
			} else {
				// Client cannot handshake; error.
				$client->write(ARCAP_ERR);
			}
		} else if ($message[0] == ARCAP_COMMAND_PREFIX) {
			// Check command.
			switch ($message) {
				case ARCAP_COMMAND_PREFIX."p":
				case ARCAP_COMMAND_PREFIX."ping":
					// Confirm client ping.
					$client->write(ARCAP_OK);
					break;
				case ARCAP_COMMAND_PREFIX."d":
				case ARCAP_COMMAND_PREFIX."detail":
					// Send back the connection details.
					$client->write($client->getDetails());
					break;
				case ARCAP_COMMAND_PREFIX."q":
				case ARCAP_COMMAND_PREFIX."quit":
					// Close the connection
					$client->close();
					break;
				case ARCAP_COMMAND_PREFIX."s":
				case ARCAP_COMMAND_PREFIX."shutdown":
					// Shutdown the server.
					break 3;
				default:
					// Command not recognized; error.
					$client->write(ARCAP_ERR);
			}
		} else {
			// Handle the message as a client event.
			$client->handle($message);
		}
	}
}

// Close the socket.
socket_close($socket);