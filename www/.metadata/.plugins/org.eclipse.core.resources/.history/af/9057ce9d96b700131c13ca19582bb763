<?php
error_reporting(E_ALL);

// Allow the script to hang around waiting for connections.
set_time_limit(0);

// Turn on implicit output flushing so we see what we're getting as it comes in.
ob_implicit_flush();

// Connect to the database.
try {
	$db = new PDO("mysql:host=localhost;dbname=arcap", "admin", "admin");
	$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
	die("Error: {$e->getMessage()}");
}

// Command codes.
define("ARCAP_COMMAND_PREFIX", ":");
define("ARCAP_CONNECT_PREFIX", "+");
define("ARCAP_OK", 	ARCAP_COMMAND_PREFIX . "ok");
define("ARCAP_ERR", ARCAP_COMMAND_PREFIX . "err");

// Socket details.
// define("ARCAP_SERVER_ADDRESS", '127.0.0.1');
define("ARCAP_SERVER_ADDRESS", '192.168.0.100');
define("ARCAP_SERVER_PORT", 10000);
define("ARCAP_SERVER_BACKLOG", 5);
define("ARCAP_SERVER_MAX_READ_LENGTH", 32);

// Create the socket.
$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
if (!$socket) {
	die("Cannot create socket: " . socket_strerror(socket_last_error()));
}

// Bind the socket.
if (!socket_bind($socket, ARCAP_SERVER_ADDRESS, ARCAP_SERVER_PORT)) {
	die("Cannot bind socket: " . socket_strerror(socket_last_error($socket)));
}

// Listen on the socket.
if (!socket_listen($socket, ARCAP_SERVER_BACKLOG)) {
	die("Cannot listen on socket: " . socket_strerror(socket_last_error($socket)));
}

// Monitor the socket.
while (true) {

	// Select the socket objects which have something to read.
	$read = array_merge(array($socket), Client::getConnections());
	$write = null;
	$except = null;
	$numChanged = socket_select($read, $write, $except, $tv_sec = 0);
	if ($numChanged === false) {
		echo "Cannot select socket objects: " . socket_strerror(socket_last_error($socket));
		continue;
	}

	// Handle new connections.
	if (in_array($socket, $read)) {
		$connection = socket_accept($socket);
		if (!$connection) {
			echo "Cannot accept connection: " . socket_strerror(socket_last_error($socket));
		} else {
			// Add the new client.
			Client::add($connection);
		}
	}

	// Handle new input.
	foreach (Client::$CLIENTS as $client) {
		if (!$client->connectionIn($read)) continue;
		// Read the message.
		$message = $client->read();
		if (!$message) {
			echo "Cannot read message: " . $client->error();
			$client->close();
			continue;
		}
		// Ignore empty or whitespace-only messages.
		$message = trim($message);
		if (strlen($message) == 0) continue;
		// Log the message.
		$client->log($message);
		// Ensure client declares details.
		if (!$client->hasDetails()) {
			if ($message[0] == ARCAP_CONNECT_PREFIX) {
				// Set the client details.
				$client->setDetails($message);
				$client->write(ARCAP_OK);
			} else {
				// Client details unknown; error.
				$client->write(ARCAP_ERR);
			}
		} else if ($message[0] == ARCAP_COMMAND_PREFIX) {
			// Check command.
			switch ($message) {
				case ARCAP_COMMAND_PREFIX."p":
				case ARCAP_COMMAND_PREFIX."ping":
					// Confirm client ping.
					$client->write(ARCAP_OK);
					break;
				case ARCAP_COMMAND_PREFIX."d":
				case ARCAP_COMMAND_PREFIX."detail":
					// Send back the connection details.
					$client->write($client->getDetails());
					break;
				case ARCAP_COMMAND_PREFIX."q":
				case ARCAP_COMMAND_PREFIX."quit":
					// Close the connection
					$client->close();
					break;
				case ARCAP_COMMAND_PREFIX."s":
				case ARCAP_COMMAND_PREFIX."shutdown":
					// Shutdown the server.
					break 3;
				default:
					// Command not recognized; error.
					$client->write(ARCAP_ERR);
			}
		} else {
			// Handle the message as a client event.
			$client->handle($message);
		}
	}
}

// Close the socket.
socket_close($socket);

/**
 * Represents a client connected to this server.
 * @author Kenan Kigunda
*/
class Client {
	/**
	 * The client connection.
	 * @var resource
	 */
	private $connection;

	/**
	 * The type of client, either 'r' for rover or 'p' for player
	 * @var string
	 */
	private $type;

	/**
	 * The ID of the client.
	 * @var integer
	 */
	private $id;

	/**
	 * The ID specifying where communications to and from the client will be logged
	 * @var unknown
	 */
	private $logId;

	/**
	 * The clients being currently connected to this server.
	 * @var Client[]
	 */
	public static $CLIENTS = array();

	/**
	 * The index of this client in the clients array.
	 * @var integer
	*/
	private $index;

	/**
	 * Creates a new client.
	 * @param resource $connection the client connection
	 * @param integer $logId the ID specifying where communications
	 * to and from the client will be logged
	 */
	public function __construct($connection, $logId) {
		$this->connection = $connection;
		$this->type = null;
		$this->id = null;
		$this->logId = $logId;
		$this->index = Client::getNextIndex();
	}

	/**
	 * Gets the index of the next client in the client list
	 * @return number the index of the next client
	 */
	private static function getNextIndex() {
		if (count(Client::$CLIENTS) > 0) {
			return max(array_keys(Client::$CLIENTS)) + 1;
		} else {
			return 0;
		}
	}
	
	/**
	 * Adds a new client on the given connection.
	 * @param resource $connection the client's socket connection
	 */
	public static function add($connection) {
		global $db;
		// Create the connection log.
		$stmt = $db->query("INSERT INTO connection VALUES ();");
		$logId = $db->lastInsertId();
		// Create the new client.
		Client::$CLIENTS[] = new Client($connection, $logId);
	}

	/**
	 * Indicates whether this client's details are set.
	 * The details are set from a "+" declaration that should be sent
	 * when the client first connects.
	 * To set the details, pass the declaration to setDetails().
	 * @return boolean true if the client details are set
	 */
	public function hasDetails() {
		return $this->type != null;
	}

	/**
	 * Sets the details of this client, such as its type and ID.
	 * @param string $declaration the declaration giving the client details
	 */
	public function setDetails($declaration) {
		$this->type = $declaration[1];
		$this->id = (int)$declaration[2];
	}

	/**
	 * Returns the details of this client, such as its type and ID.
	 * @return string the client details
	 */
	public function getDetails() {
		return ARCAP_COMMAND_PREFIX . "client:{$this->type}{$this->id}:{$this->index}";
	}

	/**
	 * Reads from this connection.
	 * @return string the message read
	 */
	public function read() {
		global $MAX_READ_LENGTH;
		return socket_read($this->connection, ARCAP_SERVER_MAX_READ_LENGTH, PHP_NORMAL_READ);
	}

	/**
	 * Writes the given message to this client.
	 * @param string $message the message to send
	 */
	public function write($message) {
		$this->log($message);
		$message .= "\n";
		socket_write($this->connection, $message, strlen($message));
	}

	/**
	 * Logs the given message to this client's log.
	 * @param string $message the message to log
	 */
	public function log($message) {
		global $db;
		echo "<div>$message</div>";
		$stmt = $db->prepare("UPDATE connection ".
				"SET log = concat_ws(' ', log, :message) ".
				"WHERE id = :id;");
		$stmt->execute(array(":id" => $this->logId, ":message" => $message));
	}

	/**
	 * Handles the given event.
	 * @param string $event the name of the event
	 */
	public function handle($event) {
		if ($this->type == "r") {
			// Rovers:
			if ($event == "ih") {
				// Send the infrared hit.
				$response = file_get_contents("http://localhost/arcap/infrared/hit.php");
				$this->write(($response === false)? ARCAP_ERR : ARCAP_OK);
			} else {
				// Event not recognized; error.
				$this->write(ARCAP_ERR);
			}
		} else if ($this->type == "p") {
			// Players:
			// Forward the event to the matching rover client.
			$status = ARCAP_ERR;
			foreach (Client::$CLIENTS as $client) {
				if (($client->type == "r") && ($client->id == $this->id)) {
					$client->write($event);
					$status = ARCAP_OK;
				}
			} $this->write($status);
		} else {
			$this->write(ARCAP_ERR);
		}
	}

	/**
	 * Returns the last socket error associated with this client.
	 * @return string the last error
	 */
	public function error() {
		return socket_strerror(socket_last_error($this->connection));
	}

	/**
	 * Closes the connection to this client.
	 */
	public function close() {
		socket_close($this->connection);
		unset(Client::$CLIENTS[$this->index]);
	}

	/**
	 * Indicates whether this client's connection is in the given array of connections.
	 * @param array $connections the haystack connections
	 * @return boolean true if this client's connection is in the haystack
	 */
	public function connectionIn(array $connections) {
		return in_array($this->connection, $connections);
	}

	/**
	 * Gets the socket connection resources of the current clients.
	 * @return array the client socket connections
	 */
	public static function getConnections() {
		return array_map(function($client) {
			return $client->connection;
		}, Client::$CLIENTS);
	}

}

?>