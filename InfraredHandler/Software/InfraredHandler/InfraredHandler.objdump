
InfraredHandler.elf:     file format elf32-littlenios2
InfraredHandler.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0001f7d4 memsz 0x0001f7d4 flags r-x
    LOAD off    0x000207f4 vaddr 0x0101f7f4 paddr 0x0102133c align 2**12
         filesz 0x00001b48 memsz 0x00001b48 flags rw-
    LOAD off    0x00022e84 vaddr 0x01022e84 paddr 0x01022e84 align 2**12
         filesz 0x00000000 memsz 0x00007da4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001ebe4  010001bc  010001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a54  0101eda0  0101eda0  0001fda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b48  0101f7f4  0102133c  000207f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007da4  01022e84  01022e84  00022e84  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0002233c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001990  00000000  00000000  00022368  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000082a2  00000000  00000000  00023cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00064107  00000000  00000000  0002bf9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000fbd5  00000000  00000000  000900a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00029ea9  00000000  00000000  0009fc76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00004e30  00000000  00000000  000c9b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00008eeb  00000000  00000000  000ce950  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000162d1  00000000  00000000  000d783b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000edb0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003290  00000000  00000000  000edb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000fadc4  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000fadca  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000fadcd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000fadce  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000fadcf  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000fadd3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000fadd7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000faddb  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000fade6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000fadf1  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  000fadfc  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003c  00000000  00000000  000fae02  2**0
                  CONTENTS, READONLY
 29 .jdi          000046ad  00000000  00000000  000fae3e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00048ed1  00000000  00000000  000ff4eb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001bc l    d  .text	00000000 .text
0101eda0 l    d  .rodata	00000000 .rodata
0101f7f4 l    d  .rwdata	00000000 .rwdata
01022e84 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 CommandHandler.cpp
00000000 l    df *ABS*	00000000 CommandTasks.cpp
00000000 l    df *ABS*	00000000 DataSource.cpp
00000000 l    df *ABS*	00000000 InfraredHandler.cpp
00000000 l    df *ABS*	00000000 InfraredTasks.cpp
00000000 l    df *ABS*	00000000 main.cpp
010015ac l     F .text	00000030 _GLOBAL__I_command_check_infrared_task_stk
0100141c l     F .text	00000190 _Z41__static_initialization_and_destruction_0ii
00000000 l    df *ABS*	00000000 functexcept.cc
00000000 l    df *ABS*	00000000 ios_failure.cc
00000000 l    df *ABS*	00000000 list.cc
00000000 l    df *ABS*	00000000 stdexcept.cc
00000000 l    df *ABS*	00000000 string-inst.cc
00000000 l    df *ABS*	00000000 atomicity.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
01007bac l     F .text	00000030 _Z12read_uleb128PKhPj
01007bdc l     F .text	00000054 _Z12read_sleb128PKhPi
01007c30 l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
01007ccc l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
01007ea0 l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
01007f30 l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
01008030 l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
010080b4 l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
01008b7c l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 bad_typeid.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
01026f4c l     O .bss	00000800 emergency_buffer
01022e94 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 bad_cast.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
01022e98 l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 unwind-sjlj.c
01022ea0 l     O .bss	00000004 fc_static
0100922c l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
01009344 l     F .text	000000cc _Unwind_RaiseException_Phase2
01009410 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100a650 l     F .text	00000058 __sprint_r
0101f3f2 l     O .rodata	00000010 blanks.3452
0101f3e2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0100c6b4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0100e0b0 l     F .text	00000058 std
0100e1bc l     F .text	00000008 __fp_lock
0100e1c4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0101fbfc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
01021294 l     O .rwdata	00000004 charset
0101f428 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mprec.c
0101f570 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
010118a4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
010129d0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
01013244 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
010132a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
010132d0 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
01013410 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
01013550 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
010136f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
010137d0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0101392c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
01013b74 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
010212b0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
01013e10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
010212b4 l     O .rwdata	00000004 lockid
01022ed0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
010212b8 l     O .rwdata	00000004 lockid
01022ed8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
01015848 l     F .text	00000044 OS_InitMisc
0101588c l     F .text	0000006c OS_InitRdyList
010159f0 l     F .text	000000e0 OS_InitTCBList
0101576c l     F .text	000000dc OS_InitEventList
010158f8 l     F .text	0000007c OS_InitTaskIdle
01015974 l     F .text	0000007c OS_InitTaskStat
01015c64 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
01017b84 l     F .text	00000110 OS_FlagTaskRdy
010178dc l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
010201b0 l     O .rwdata	0000106c jtag_uart_0
0102121c l     O .rwdata	0000002c adc
0101c4b8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0101c770 l     F .text	000002c4 altera_avalon_jtag_uart_irq
0101ca34 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0101d24c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0101d598 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0101d9bc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0101daf8 l     F .text	000000dc alt_file_locked
0101dd5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0101e924 l     F .text	00000004 register_fini
01000f6c  w    F .text	00000064 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8allocateEmPKv
01006dfc  w    F .text	0000005c _ZNSs2atEm
01008e50 g     F .text	00000040 __cxa_free_exception
01005798  w    F .text	00000034 _ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
01024f3c g     O .bss	00002000 infrared_read_task_stk
01008e00 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
0100f430 g     F .text	00000094 _mprec_log10
0100888c g     F .text	00000018 _ZSt10unexpectedv
01021306 g     O .rwdata	00000002 OSTaskNameSize
010016ec g     F .text	00000034 _ZSt18__throw_bad_typeidv
0100f51c g     F .text	00000088 __any_on
01010bb8 g     F .text	00000070 _isatty_r
0101f548 g     O .rodata	00000028 __mprec_tinytens
010030a4 g     F .text	00000030 _ZNSt14overflow_errorC1ERKSs
0101398c g     F .text	000000c8 alt_main
010052bc  w    F .text	00000040 _ZNKSs6substrEmm
0102a998 g     O .bss	00000100 alt_irq
01021258  w    O .rwdata	00000004 _ZNSs4nposE
01010c28 g     F .text	00000078 _lseek_r
01018478 g     F .text	000000d0 OS_MemInit
010091dc g     F .text	00000014 _Unwind_GetIPInfo
0102133c g       *ABS*	00000000 __flash_rwdata_start
0101c3b8 g     F .text	00000064 OSTimeSet
010123c4 g     F .text	00000088 __eqdf2
010013b8 g     F .text	00000064 _Z18infrared_read_taskPv
01008a94 g     F .text	00000074 __cxa_rethrow
0100917c g     F .text	0000000c _Unwind_SjLj_Unregister
01004940  w    F .text	00000018 _ZNKSs6rbeginEv
010087ac g     F .text	00000014 _ZSt14set_unexpectedPFvvE
010143c4 g     F .text	000006b4 OSEventPendMulti
010056b0  w    F .text	000000b4 _ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag
0100541c  w    F .text	00000020 _ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_
0100782c  w    F .text	00000024 _ZNSs7replaceEmmRKSs
010091cc g     F .text	00000010 _Unwind_GetIP
0102ac28 g       *ABS*	00000000 __alt_heap_start
0101e364 g     F .text	00000020 OSTaskCreateHook
01003324 g     F .text	00000030 _ZNSt12length_errorC1ERKSs
0100a568 g     F .text	00000074 _kill_r
01006ed8  w    F .text	00000038 _ZNSs5beginEv
010079e0 g     F .text	00000010 _ZNSt9bad_allocD2Ev
0100a1a4 g     F .text	00000044 printf
010212de g     O .rwdata	00000002 OSMboxEn
01014acc g     F .text	0000007c OSIntEnter
01008cfc g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
0100a4a8 g     F .text	000000a0 _signal_r
0101ee88  w    O .rodata	00000013 _ZTSSt14overflow_error
01010684 g     F .text	00000068 __sseek
0100e118 g     F .text	000000a4 __sinit
010212ee g     O .rwdata	00000002 OSQEn
01000b2c  w    F .text	0000005c _ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_
010065d8  w    F .text	000000f8 _ZNSs6assignEPKcm
01000904  w    F .text	00000030 _ZNSaISt10_List_nodeIP8os_eventEED2Ev
01008cec g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
0100edf0 g     F .text	00000084 _setlocale_r
0101f2f4  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0100e218 g     F .text	00000068 __sfmoreglue
0100114c g     F .text	000000a4 _ZN15InfraredHandler17onInfraredReceiveEj
01014080 g     F .text	000000d0 __malloc_unlock
0101e3c0 g     F .text	0000001c OSTaskStatHook
01003e10  w    F .text	00000018 _ZNSs7_M_moveEPcPKcm
01000b88  w    F .text	00000024 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEEC2ERKS5_
01022ee0 g     O .bss	00000001 OSLockNesting
01007880  w    F .text	00000064 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc
010088ac g     F .text	00000020 _ZSt18uncaught_exceptionv
0101ee48  w    O .rodata	0000000c _ZTISt15underflow_error
01000a5c  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEEC2Ev
0102132c g     O .rwdata	00000002 OSDataSize
01022ee1 g     O .bss	00000001 OSRunning
01006248  w    F .text	000000bc _ZNSsD2Ev
01006100  w    F .text	0000008c _ZNSspLEc
01005cec  w    F .text	000000e0 _ZNSs6appendEmc
0100a02c g     F .text	000000e0 memmove
0101e3f8 g     F .text	0000001c OSInitHookBegin
01021324 g     O .rwdata	00000002 OSTmrSize
0100792c g     F .text	00000010 _ZNSt9exceptionD2Ev
0100e208 g     F .text	00000010 _cleanup
0100f5a4 g     F .text	000000bc _Balloc
01005690  w    F .text	00000020 _ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_
0101eeec  w    O .rodata	00000011 _ZTSSt12out_of_range
0101f378  w    O .rodata	0000000c _ZTISt8bad_cast
01003e28  w    F .text	00000018 _ZNSs7_M_copyEPcPKcm
01022e88 g     O .bss	00000004 infrared
01022ee4 g     O .bss	00000004 OSIdleCtr
01006760  w    F .text	00000040 _ZNSsaSEPKc
010078e4 g     F .text	00000014 _ZN9__gnu_cxx18__exchange_and_addEPVii
010017bc g     F .text	00000108 _ZSt19__throw_ios_failurePKc
010124d4 g     F .text	00000088 __gtdf2
0101f1b4  w    O .rodata	00000014 _ZTVSt13bad_exception
0101e030 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
01015f98 g     F .text	000002e0 OS_TCBInit
01002718  w    F .text	00000034 _ZNSt14overflow_errorD0Ev
0101ee18  w    O .rodata	00000010 _ZTV15InfraredHandler
01000000 g     F .entry	0000001c __reset
01021260  w    O .rwdata	00000001 _ZNSs4_Rep11_S_terminalE
010045d8  w    F .text	000000e0 _ZNKSs16find_last_not_ofEPKcmm
01001378 g     F .text	00000040 _ZN15InfraredHandlerC2Ev
0100920c g     F .text	00000008 _Unwind_GetRegionStart
0102132a g     O .rwdata	00000002 OSTmrWheelTblSize
01000020 g       *ABS*	00000000 __flash_exceptions_start
010212ca g     O .rwdata	00000002 OSEventSize
01022ee8 g     O .bss	00000001 OSPrioHighRdy
01010b44 g     F .text	00000074 _fstat_r
0101e384 g     F .text	00000020 OSTaskDelHook
01009018 g     F .text	00000100 _Znwm
01004378  w    F .text	00000064 _ZNSs4_Rep10_M_disposeERKSaIcE
01022eb0 g     O .bss	00000004 errno
01004a54  w    F .text	0000003c _ZNSsC2EmcRKSaIcE
0101e010 g       .text	00000000 OSStartHighRdy
01004774  w    F .text	0000007c _ZNKSs7compareEPKc
010057cc  w    F .text	000000fc _ZNSsC1ERKSs
0101ab8c g     F .text	00000200 OSTaskCreateExt
010173f8 g     F .text	00000068 OSFlagPendGetFlagsRdy
0102130a g     O .rwdata	00000002 OSTaskStatStkSize
010095dc g     F .text	00000080 _Unwind_Backtrace
01004f50  w    F .text	00000088 _ZNKSs4copyEPcmm
01016404 g     F .text	00000334 OSFlagAccept
01018bb0 g     F .text	000000c8 OSQFlush
01018548 g     F .text	00000154 OSQAccept
01022ec8 g     O .bss	00000004 alt_argv
01000268 g     F .text	00000028 _ZN14CommandHandler17onInfraredReceiveEv
01029248 g       *ABS*	00000000 _gp
01000ae4  w    F .text	00000048 _ZNKSt10_List_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv
01008bdc g     F .text	00000034 _ZNSt10bad_typeidD0Ev
0100274c  w    F .text	00000010 _ZNSt14overflow_errorD1Ev
01000e7c  w    F .text	00000088 _ZNSt10_List_baseIP8os_eventSaIS1_EE8_M_clearEv
0101a9b8 g     F .text	000001d4 OSTaskCreate
0101a444 g     F .text	00000574 OSTaskChangePrio
01008fc4 g     F .text	00000034 _ZNSt8bad_castD0Ev
01022edc g     O .bss	00000004 alt_heapsem
01013470 g     F .text	00000020 getpid
01006994  w    F .text	00000038 _ZNSs6assignEmc
01003b18  w    F .text	0000000c _ZNKSs4_Rep12_M_is_leakedEv
01016278 g     F .text	0000018c OSDebugInit
01008138 g     F .text	00000180 __cxa_call_unexpected
0101ad8c g     F .text	0000040c OSTaskDel
01000238 g     F .text	00000030 _ZN14CommandHandlerC1Ev
010088a4 g     F .text	00000008 __cxa_get_exception_ptr
0101ee08  w    O .rodata	0000000d _ZTS10DataSource
01003e48  w    F .text	0000000c _ZNKSsixEm
01020030 g     O .rwdata	00000180 alt_fd_list
01027774 g     O .bss	00000370 OSFlagTbl
01000d68  w    F .text	0000006c _ZNSt4listIP8os_eventSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E
0101ef00  w    O .rodata	00000014 _ZTVSt12out_of_range
0100958c g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
01015548 g     F .text	000000b8 OS_EventTaskRemove
010091a0 g     F .text	00000014 _Unwind_GetCFA
01008798 g     F .text	00000014 _ZSt13set_terminatePFvvE
0101e46c g     F .text	00000094 alt_find_dev
01009f8c g     F .text	000000a0 memcpy
010040f4  w    F .text	00000010 _ZNSsC2Ev
010004cc g     F .text	00000028 _Z27command_check_infrared_taskPv
01003fe4  w    F .text	0000000c _ZNKSs17find_first_not_ofERKSsm
010212f4 g     O .rwdata	00000002 OSRdyTblSize
01003e54  w    F .text	000000a4 _ZNKSs17find_first_not_ofEPKcmm
0100559c  w    F .text	00000034 _ZNSsC1IPKcEET_S2_RKSaIcE
0100e1fc g     F .text	0000000c _cleanup_r
0101266c g     F .text	000000f8 __floatsidf
0101da80 g     F .text	00000078 alt_io_redirect
010125e4 g     F .text	00000088 __ltdf2
0101eecc  w    O .rodata	00000014 _ZTVSt11range_error
01002d6c g     F .text	00000038 _ZNSt15_List_node_base8transferEPS_S0_
01003600 g     F .text	00000104 _ZNSt13runtime_errorD2Ev
01002224 g     F .text	00000190 _ZSt21__throw_runtime_errorPKc
01000c30  w    F .text	00000060 _ZNSt10_List_baseIP8os_eventSaIS1_EEC2ERKS2_
0101eda0 g       *ABS*	00000000 __DTOR_END__
01004098  w    F .text	00000050 _ZNKSs5rfindEPKcm
01007ab0 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
01003214 g     F .text	000000b0 _ZNSt11logic_errorC2ERKSs
0101ef6c  w    O .rodata	00000014 _ZTVSt16invalid_argument
01004104  w    F .text	00000010 _ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_
010009b8  w    F .text	00000030 _ZNSt14_List_iteratorIP8os_eventEC1EPSt15_List_node_base
01007028  w    F .text	00000150 _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_
01014150 g     F .text	00000130 OSEventNameGet
010212d8 g     O .rwdata	00000002 OSFlagMax
01003134 g     F .text	00000030 _ZNSt11range_errorC2ERKSs
0100f380 g     F .text	000000b0 __ratio
01014b48 g     F .text	00000100 OSIntExit
01005b38  w    F .text	00000004 _ZNSsaSERKSs
0101eee0  w    O .rodata	0000000c _ZTISt12out_of_range
01003d80  w    F .text	00000038 _ZNKSs15_M_check_lengthEmmPKc
01021312 g     O .rwdata	00000002 OSTCBSize
01004958  w    F .text	000000c0 _ZNSs12_S_constructEmcRKSaIcE
01022ee9 g     O .bss	00000001 OSPrioCur
0101ccb0 g     F .text	000002c0 altera_avalon_jtag_uart_read
010096e0 g     F .text	00000014 malloc
0100a1e8 g     F .text	00000034 _printf_r
01012b0c g     F .text	00000008 __udivsi3
01013490 g     F .text	000000c0 isatty
01000cc8  w    F .text	00000028 _ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8max_sizeEv
0100a28c g     F .text	000000cc _raise_r
010212f8 g     O .rwdata	00000002 OSStkWidth
0101f458 g     O .rodata	000000c8 __mprec_tens
0100653c  w    F .text	0000009c _ZNSs15_M_replace_safeEmmPKcm
010212ec g     O .rwdata	00000002 OSPtrSize
01001be4 g     F .text	00000190 _ZSt22__throw_overflow_errorPKc
01000558 g     F .text	00000064 _ZN10DataSourceC2Ev
010032f4 g     F .text	00000030 _ZNSt12out_of_rangeC2ERKSs
0100edcc g     F .text	00000008 __locale_charset
010212cc g     O .rwdata	00000002 OSEventTblSize
01005b3c  w    F .text	00000128 _ZNSs7reserveEm
01004b88  w    F .text	000000c8 _ZNKSs7compareEmmPKc
0101df84 g       .text	00000000 OSCtxSw
0101e714 g     F .text	00000090 alt_icache_flush
01003ad0  w    F .text	0000000c _ZNKSs4sizeEv
01022ea4 g     O .bss	00000004 __malloc_top_pad
01006304  w    F .text	00000238 _ZNSs9_M_mutateEmmm
0100740c  w    F .text	000002e0 _ZNSs7replaceEmmPKcm
01004188  w    F .text	00000058 _ZNKSs16find_last_not_ofEcm
01022eec g     O .bss	00000004 OSTCBList
0100a564 g     F .text	00000004 _getpid_r
01022ec0 g     O .bss	00000004 alt_fd_list_lock
0100775c  w    F .text	00000010 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcm
0101edd4  w    O .rodata	00000010 _ZTV14CommandHandler
01021290 g     O .rwdata	00000004 __mb_cur_max
01005ed8  w    F .text	00000040 _ZNSs6appendEPKc
0101edf8  w    O .rodata	00000010 _ZTV10DataSource
0100edd4 g     F .text	0000000c _localeconv_r
010041e0  w    F .text	00000064 _ZNKSs17find_first_not_ofEcm
0100fc9c g     F .text	0000003c __i2b
0100e7b0 g     F .text	0000049c __sfvwrite_r
01007ad0 g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0100a3e0 g     F .text	000000b4 __sigtramp_r
01003a50  w    F .text	00000008 _ZNKSs9_M_ibeginEv
01002f94 g     F .text	000000b0 _ZNSt13runtime_errorC2ERKSs
01027ae4 g     O .bss	00000c30 OSMemTbl
01022ef0 g     O .bss	00000001 OSTickStepState
01000810  w    F .text	00000038 _ZNKSt14_List_iteratorIP8os_eventEneERKS2_
0100a21c g     F .text	00000070 _sbrk_r
0100047c g     F .text	00000050 _ZN14CommandHandlerD2Ev
0101f328  w    O .rodata	00000020 _ZTVSt9type_info
0101ef54  w    O .rodata	00000015 _ZTSSt16invalid_argument
01001754 g     F .text	00000034 _ZSt17__throw_bad_allocv
010212f0 g     O .rwdata	00000002 OSQMax
01028714 g     O .bss	00000800 OSTaskStatStk
01018060 g     F .text	0000010c OSMemNameGet
01000a7c  w    F .text	00000034 _ZNSaISt10_List_nodeIP8os_eventEEC1IS1_EERKSaIT_E
01003a20  w    F .text	00000010 _ZNSt11char_traitsIcE2eqERKcS2_
010212d0 g     O .rwdata	00000002 OSFlagEn
01010ca0 g     F .text	00000078 _read_r
010078fc g     F .text	00000010 _ZNKSt9exception4whatEv
01004560  w    F .text	00000068 _ZNKSs4findEcm
01021316 g     O .rwdata	00000002 OSTimeTickHookEn
01022e84 g     O .bss	00000004 command
010008ac  w    F .text	00000038 _ZNSt10_List_baseIP8os_eventSaIS1_EE7_M_initEv
01017c94 g     F .text	000000ac OS_FlagUnlink
01019114 g     F .text	00000180 OSQPost
0101fffc g     O .rwdata	0000000c __lc_ctype
010212a8 g     O .rwdata	00000004 alt_max_fd
010047f0  w    F .text	00000050 _ZNKSs16find_last_not_ofEPKcm
01015b24 g     F .text	0000006c OS_MemCopy
01015b90 g     F .text	000000d4 OS_Sched
01012f48 g     F .text	00000138 __unpack_d
01004724  w    F .text	00000050 _ZNKSs4findEPKcm
01010a20 g     F .text	00000110 _fclose_r
01004890  w    F .text	00000050 _ZNKSs12find_last_ofEPKcm
01017f5c g     F .text	00000104 OSMemGet
01003ff0  w    F .text	000000a8 _ZNKSs5rfindEPKcmm
0101b4c0 g     F .text	000001c4 OSTaskNameSet
0101f230  w    O .rodata	0000000c _ZTISt9bad_alloc
01003a44  w    F .text	0000000c _ZNKSs6_M_repEv
0100e07c g     F .text	00000034 fflush
01022ea8 g     O .bss	00000004 __malloc_max_sbrked_mem
01022ef4 g     O .bss	00000004 OSCtxSwCtr
0101e3dc g     F .text	0000001c OSTimeTickHook
01006a9c  w    F .text	00000050 _ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE
010212da g     O .rwdata	00000002 OSFlagNameSize
0100042c g     F .text	00000050 _ZN14CommandHandlerD1Ev
01006e58  w    F .text	00000044 _ZNSsixEm
010059c4  w    F .text	00000174 _ZNSs6assignERKSs
01015600 g     F .text	00000104 OS_EventTaskRemoveMulti
01001124 g     F .text	00000028 _ZN15InfraredHandler4readEi
01011d34 g     F .text	00000074 __adddf3
0101f2c8  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
010153f4 g     F .text	00000154 OS_EventTaskWaitMulti
0100100c  w    F .text	00000064 _ZNSt4listIP8os_eventSaIS1_EE14_M_create_nodeERKS1_
0100618c  w    F .text	000000bc _ZNSsD1Ev
0100f260 g     F .text	00000120 __b2d
01000cf0  w    F .text	00000038 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE10deallocateEPS4_m
010212f2 g     O .rwdata	00000002 OSQSize
01008ff8 g     F .text	00000010 _ZNSt8bad_castD1Ev
010112f4 g     F .text	000005b0 __umoddi3
0101383c g     F .text	000000f0 lseek
01006e9c  w    F .text	0000003c _ZNSs3endEv
01019cf0 g     F .text	0000027c OSSemPend
01007b30 g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0101f000  w    O .rodata	00000014 _ZTVSt11logic_error
01008a88 g     F .text	0000000c _ZdlPv
010027e4  w    F .text	00000034 _ZNSt12length_errorD0Ev
0102128c g     O .rwdata	00000004 _global_impure_ptr
01010018 g     F .text	000005f4 _realloc_r
010212dc g     O .rwdata	00000002 OSLowestPrio
0102ac28 g       *ABS*	00000000 __bss_end
0101d8c4 g     F .text	000000f8 alt_iic_isr_register
0101e44c g     F .text	00000020 OSTCBInitHook
01021322 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0101de54 g     F .text	00000110 alt_tick
0100916c g     F .text	00000010 _Unwind_SjLj_Register
01010d18 g     F .text	000005dc __udivdi3
0101ee9c  w    O .rodata	00000014 _ZTVSt14overflow_error
01002544 g     F .text	00000190 _ZSt20__throw_length_errorPKc
010212c4 g     O .rwdata	00000002 OSEventEn
0101f520 g     O .rodata	00000028 __mprec_bigtens
0100fef8 g     F .text	00000120 __s2b
0102131e g     O .rwdata	00000002 OSTmrCfgNameSize
010096b4 g     F .text	00000018 abort
0101283c g     F .text	00000194 __floatunsidf
01003cc4  w    F .text	000000bc _ZNSs4_Rep10_M_refcopyEv
0100f180 g     F .text	00000060 __mcmp
010088cc g     F .text	000000a4 __cxa_end_catch
0100e1e4 g     F .text	00000018 __fp_lock_all
0101d87c g     F .text	00000048 alt_ic_irq_enabled
01007980 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
01017aa0 g     F .text	000000e4 OS_FlagInit
0101ddbc g     F .text	00000098 alt_alarm_stop
01003b24  w    F .text	0000000c _ZNKSs4_Rep12_M_is_sharedEv
01021300 g     O .rwdata	00000002 OSTaskIdleStkSize
01003a30  w    F .text	00000008 _ZNKSs7_M_dataEv
01005170  w    F .text	00000060 _ZNSsC2ERKSsmmRKSaIcE
01022f30 g     O .bss	00000004 alt_irq_active
0101987c g     F .text	000000c0 OSSemAccept
01002e68 g     F .text	00000020 _ZNSt15_List_node_base7reverseEv
01008864 g     F .text	00000018 _ZSt9terminatev
0101828c g     F .text	000000f0 OSMemPut
01007020  w    F .text	00000008 _ZNSs6resizeEm
01017d40 g     F .text	0000021c OSMemCreate
01002708  w    F .text	00000010 _ZNSt15underflow_errorD1Ev
01022ef8 g     O .bss	00000004 OSIdleCtrMax
01001d74 g     F .text	00000190 _ZSt24__throw_invalid_argumentPKc
010000ec g     F .exceptions	000000d0 alt_irq_handler
010066d0  w    F .text	00000040 _ZNSs6assignEPKc
01020008 g     O .rwdata	00000028 alt_dev_null
01001230 g     F .text	00000058 _ZN15InfraredHandlerD0Ev
01000be4  w    F .text	0000004c _ZNSt10_List_baseIP8os_eventSaIS1_EE10_List_implC1ERKSaISt10_List_nodeIS1_EE
01004e4c  w    F .text	00000104 _ZNSs4_Rep7_M_grabERKSaIcES2_
01006d1c  w    F .text	00000050 _ZNSs6insertEmRKSsmm
01021314 g     O .rwdata	00000002 OSTicksPerSec
010028b0 g     F .text	00000008 _ZNKSt8ios_base7failure4whatEv
01003914 g     F .text	0000010c _ZNSt11logic_errorD0Ev
010048e0  w    F .text	00000050 _ZNKSs13find_first_ofEPKcm
0101df84 g       .text	00000000 OSIntCtxSw
0101f268  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
010003ac g     F .text	00000030 _ZN14CommandHandler4initEv
01005f58  w    F .text	000000e8 _ZNSs6appendERKSsmm
0101d4a0 g     F .text	00000044 alt_dcache_flush_all
0100f04c g     F .text	00000070 __hi0bits
01021264  w    O .rwdata	00000008 _ZTISt9exception
01012764 g     F .text	000000d8 __fixdfsi
01004930  w    F .text	00000010 _ZNKSs4rendEv
01003fd8  w    F .text	0000000c _ZNKSs4findERKSsm
01002c60 g     F .text	0000010c _ZNSt8ios_base7failureD0Ev
01003b60  w    F .text	0000014c _ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_
01006d6c  w    F .text	0000000c _ZNSs6insertEmRKSs
01022efc g     O .bss	00000004 OSTCBFreeList
0102133c g       *ABS*	00000000 __ram_rwdata_end
01019f6c g     F .text	0000017c OSSemPendAbort
01002dc0 g     F .text	00000014 _ZNSt15_List_node_base6unhookEv
01008e30 g     F .text	00000010 _ZNSt9type_infoD1Ev
010212a0 g     O .rwdata	00000008 alt_dev_list
01022e90 g     O .bss	00000004 __new_handler
0101ef8c  w    O .rodata	00000011 _ZTSSt12domain_error
01013cf0 g     F .text	00000120 write
01006a14  w    F .text	00000038 _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEmc
01005534  w    F .text	00000034 _ZNSsC1EPKcmRKSaIcE
01002da4 g     F .text	0000001c _ZNSt15_List_node_base4hookEPS_
01021318 g     O .rwdata	00000002 OSVersionNbr
01006f10  w    F .text	0000004c _ZNSs4rendEv
01008e20 g     F .text	00000010 _ZNSt9type_infoD0Ev
01000880  w    F .text	0000002c _ZNKSt14_List_iteratorIP8os_eventEdeEv
010034fc g     F .text	00000104 _ZNSt13runtime_errorD1Ev
0101f7f4 g       *ABS*	00000000 __ram_rodata_end
0101333c g     F .text	000000d4 fstat
01003cbc  w    F .text	00000008 _ZNSs12_Alloc_hiderC2EPcRKSaIcE
010135b0 g     F .text	00000140 kill
01005110  w    F .text	00000060 _ZNSsC1ERKSsmmRKSaIcE
01003414 g     F .text	00000030 _ZNSt12domain_errorC2ERKSs
010033e4 g     F .text	00000030 _ZNSt12domain_errorC1ERKSs
010028a0  w    F .text	00000010 _ZNSt12domain_errorD1Ev
010050dc  w    F .text	00000034 _ZNSsC2IPcEET_S1_RKSaIcE
010212c0 g     O .rwdata	00000004 OSEndiannessTest
0100fdd8 g     F .text	00000120 __pow5mult
010072c0  w    F .text	0000014c _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_
01022eb4 g     O .bss	00000004 __nlocale_changed
010026d4  w    F .text	00000034 _ZNSt15underflow_errorD0Ev
01012b14 g     F .text	00000008 __umodsi3
01008e18 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
01001338 g     F .text	00000040 _ZN15InfraredHandlerC1Ev
0100776c  w    F .text	00000064 _ZNSs7replaceEmmPKc
010212d2 g     O .rwdata	00000002 OSFlagGrpSize
01000964  w    F .text	00000030 _ZNSaISt10_List_nodeIP8os_eventEED1Ev
010009e8  w    F .text	0000003c _ZNSt4listIP8os_eventSaIS1_EE5beginEv
0102ac28 g       *ABS*	00000000 end
010078f8 g     F .text	00000004 _ZN9__gnu_cxx12__atomic_addEPVii
010002d0 g     F .text	00000070 _ZN14CommandHandler20checkInfraredReceiveEv
01003074 g     F .text	00000030 _ZNSt15underflow_errorC2ERKSs
010077d0  w    F .text	0000005c _ZNSs7replaceEmmRKSsmm
0100070c g     F .text	0000003c _ZN10DataSource11addListenerEP8os_event
01003f8c  w    F .text	00000030 _ZNKSs2atEm
01006710  w    F .text	00000050 _ZNSs6assignERKSsmm
01000790  w    F .text	00000030 _ZNSaIP8os_eventEC1Ev
010053e8  w    F .text	00000034 _ZNSsC1IPcEET_S1_RKSaIcE
01003a58  w    F .text	00000010 _ZNKSs7_M_iendEv
0100932c g     F .text	00000018 _Unwind_DeleteException
0101c638 g     F .text	00000138 altera_avalon_jtag_uart_init
01015e08 g     F .text	000000c8 OS_TaskStat
01003ab8  w    F .text	00000008 _ZNKSs5beginEv
0101ed98 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0100686c  w    F .text	00000018 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_mc
01001288 g     F .text	00000058 _ZN15InfraredHandlerD1Ev
01026f3c  w    O .bss	00000010 _ZNSs4_Rep20_S_empty_rep_storageE
0101d2bc g     F .text	00000090 alt_avalon_timer_sc_init
01002e88 g     F .text	00000008 _ZNKSt13runtime_error4whatEv
01012bb4 g     F .text	00000080 __clzsi2
0101f028  w    O .rodata	0000000c _ZTISt13runtime_error
010079f0 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0101cf70 g     F .text	000002dc altera_avalon_jtag_uart_write
0100e108 g     F .text	00000004 __sfp_lock_acquire
0101f1dc  w    O .rodata	00000012 _ZTSSt13bad_exception
01009e34 g     F .text	000000e4 memchr
01015ad0 g     F .text	00000054 OS_MemClr
0100a6a8 g     F .text	00001eac ___vfprintf_internal_r
0101ef34  w    O .rodata	00000014 _ZTVSt12length_error
0101e054 g     F .text	00000310 OSTaskStkInit
01000dd4  w    F .text	000000a8 _ZNSt4listIP8os_eventSaIS1_EE6removeERKS1_
0100e49c g     F .text	00000314 _free_r
01007708  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_
01004a90  w    F .text	00000034 _ZNSsC1ERKSaIcE
01015150 g     F .text	00000194 OS_EventTaskRdy
010010bc  w    F .text	00000044 _ZNSt4listIP8os_eventSaIS1_EE9push_backERKS1_
0101e928 g     F .text	000001b0 __call_exitprocs
01003b3c  w    F .text	00000008 _ZNSs4_Rep15_M_set_sharableEv
01000290 g     F .text	00000040 _ZN14CommandHandler22processInfraredReceiveEj
01022f00 g     O .bss	00000001 OSCPUUsage
010006b0 g     F .text	0000005c _ZN10DataSourceD2Ev
0102125c  w    O .rwdata	00000004 _ZNSs4_Rep11_S_max_sizeE
01022eb8 g     O .bss	00000004 __mlocale_changed
01002818  w    F .text	00000010 _ZNSt12length_errorD1Ev
01021284 g     O .rwdata	00000004 __malloc_sbrk_base
010001bc g     F .text	0000004c _start
0101f044  w    O .rodata	0000000c _ZTISt11logic_error
01003af4  w    F .text	00000008 _ZNKSs4dataEv
01022f34 g     O .bss	00000004 _alt_tick_rate
01018c78 g     F .text	00000320 OSQPend
0101f348  w    O .rodata	0000000d _ZTSSt9type_info
01003ae8  w    F .text	0000000c _ZNKSs8capacityEv
01003a38  w    F .text	0000000c _ZNSs7_M_dataEPc
0101be84 g     F .text	0000014c OSTimeDly
01003044 g     F .text	00000030 _ZNSt15underflow_errorC1ERKSs
0100f968 g     F .text	0000014c __lshift
01003a68  w    F .text	00000018 _ZNKSs8_M_limitEmm
01021248  w    O .rwdata	00000008 _ZTI14CommandHandler
0101f20c  w    O .rodata	00000014 _ZTVSt9bad_alloc
01022f38 g     O .bss	00000004 _alt_nticks
0100a548 g     F .text	0000001c signal
01013a54 g     F .text	00000120 read
010067a0  w    F .text	000000cc _ZNSs14_M_replace_auxEmmmc
0101c450 g     F .text	00000068 alt_sys_init
010058c8  w    F .text	000000fc _ZNSsC2ERKSs
01003afc  w    F .text	00000008 _ZNKSs13get_allocatorEv
0101f2bc  w    O .rodata	0000000c _ZTISt10bad_typeid
010005f8 g     F .text	0000005c _ZN10DataSourceD0Ev
0101e7f0 g     F .text	00000134 __register_exitproc
0101f220  w    O .rodata	0000000d _ZTSSt9bad_alloc
01022f01 g     O .bss	00000001 OSTaskCtr
01003ef8  w    F .text	00000094 _ZNKSs4findEPKcmm
01006a4c  w    F .text	00000050 _ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_
0101bfd0 g     F .text	00000174 OSTimeDlyHMSM
0100fab4 g     F .text	000001e8 __multiply
0101cb48 g     F .text	00000074 altera_avalon_jtag_uart_close
0101f7f4 g       *ABS*	00000000 __ram_rwdata_start
01009494 g     F .text	000000f8 _Unwind_SjLj_RaiseException
0101eda0 g       *ABS*	00000000 __ram_rodata_start
010046c4  w    F .text	00000060 _ZNKSs7compareERKSs
0102774c g     O .bss	00000028 __malloc_current_mallinfo
01009438 g     F .text	0000005c _Unwind_SjLj_Resume
010212c6 g     O .rwdata	00000002 OSEventMax
01006de8  w    F .text	00000014 _ZNSs7_M_leakEv
0100f660 g     F .text	0000017c __d2b
0101a0e8 g     F .text	00000128 OSSemPost
01008e40 g     F .text	00000010 _ZNSt9type_infoD2Ev
01014cd4 g     F .text	000000e4 OSSchedUnlock
01008c30 g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
0100285c  w    F .text	00000010 _ZNSt16invalid_argumentD1Ev
01003ac0  w    F .text	00000010 _ZNKSs3endEv
01003de4  w    F .text	0000002c _ZNSs9_M_assignEPcmc
01000f04  w    F .text	00000038 _ZNSt10_List_baseIP8os_eventSaIS1_EED2Ev
0101c4f0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0101e620 g     F .text	000000f4 alt_get_fd
01022f04 g     O .bss	00000004 OSMemFreeList
01014e28 g     F .text	000000ac OSStatInit
01004114  w    F .text	00000064 _ZNKSs5rfindEcm
01017808 g     F .text	000000d4 OSFlagQuery
01013080 g     F .text	000000c8 __fpcmp_parts_d
0101ee54  w    O .rodata	00000014 _ZTSSt15underflow_error
010212fc g     O .rwdata	00000002 OSTaskCreateExtEn
01000340 g     F .text	0000006c _ZN14CommandHandler21createInfraredReceiveEv
010045c8  w    F .text	00000010 _ZNKSs13find_first_ofEcm
010109b0 g     F .text	00000070 _close_r
01009f18 g     F .text	00000074 memcmp
01015134 g     F .text	0000001c OS_Dummy
0101c5a0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0102ac28 g       *ABS*	00000000 __alt_stack_base
0101c5e8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01000d28  w    F .text	00000040 _ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E
0100799c g     F .text	00000034 _ZNSt9bad_allocD0Ev
01008cdc g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
01002790  w    F .text	00000010 _ZNSt11range_errorD1Ev
0100c578 g     F .text	0000013c __swsetup_r
0101eebc  w    O .rodata	00000010 _ZTSSt11range_error
01028f14 g     O .bss	000001e0 OSQTbl
0100965c g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
0101216c g     F .text	00000258 __divdf3
0100e280 g     F .text	000000f0 __sfp
0100f4c4 g     F .text	00000058 __copybits
0101ef80  w    O .rodata	0000000c _ZTISt12domain_error
0101f36c  w    O .rodata	0000000c _ZTSSt8bad_cast
01008df8 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
010076ec  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_
0101ee7c  w    O .rodata	0000000c _ZTISt14overflow_error
0101f7f4 g     O .rwdata	00000408 __malloc_av_
0100e114 g     F .text	00000004 __sinit_lock_release
01022f08 g     O .bss	00000004 OSTCBHighRdy
01011da8 g     F .text	000003c4 __muldf3
01010768 g     F .text	00000060 __sread
0101f1c8  w    O .rodata	00000014 _ZTVSt9exception
01022f0c g     O .bss	00000004 OSQFreeList
0101e500 g     F .text	00000120 alt_find_file
01007850  w    F .text	00000030 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs
01007a5c g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
01006d78  w    F .text	00000014 _ZNSs5clearEv
0101d4e4 g     F .text	000000b4 alt_dev_llist_insert
01013f78 g     F .text	00000108 __malloc_lock
01013c34 g     F .text	000000bc sbrk
01001f04 g     F .text	00000190 _ZSt20__throw_domain_errorPKc
010018c4 g     F .text	00000190 _ZSt19__throw_logic_errorPKc
0101f23c  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
01008b08 g     F .text	00000074 __cxa_throw
01014280 g     F .text	00000144 OSEventNameSet
0100de80 g     F .text	000001fc _fflush_r
010091f0 g     F .text	00000010 _Unwind_SetIP
010044cc  w    F .text	00000088 _ZNKSs13find_first_ofEPKcmm
010108fc g     F .text	000000b4 _calloc_r
01022f10 g     O .bss	00000001 OSRdyGrp
01004178  w    F .text	00000010 _ZNKSs12find_last_ofEcm
0101ef14  w    O .rodata	0000000c _ZTISt12length_error
01003b30  w    F .text	0000000c _ZNSs4_Rep13_M_set_leakedEv
01005568  w    F .text	00000034 _ZNSsC2EPKcmRKSaIcE
01002094 g     F .text	00000190 _ZSt19__throw_range_errorPKc
01003384 g     F .text	00000030 _ZNSt16invalid_argumentC1ERKSs
01022e84 g       *ABS*	00000000 __bss_start
01004554  w    F .text	0000000c _ZNKSs13find_first_ofERKSsm
01004d10  w    F .text	000000a0 _ZNKSs7compareEmmRKSs
0100a10c g     F .text	00000098 memset
01003b44  w    F .text	00000014 _ZNSs4_Rep26_M_set_length_and_sharableEm
01003a9c  w    F .text	0000000c _ZNSs12_S_empty_repEv
010015dc g     F .text	00000110 main
0101f014  w    O .rodata	00000012 _ZTSSt13runtime_error
01022ecc g     O .bss	00000004 alt_envp
01022eac g     O .bss	00000004 __malloc_max_total_mem
0101f298  w    O .rodata	00000014 _ZTVSt10bad_typeid
0101c548 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01001788 g     F .text	00000034 _ZSt21__throw_bad_exceptionv
0100915c g     F .text	00000008 __cxa_get_globals_fast
0101f6b0 g     O .rodata	00000100 OSUnMapTbl
010212f6 g     O .rwdata	00000002 OSSemEn
0101efc8  w    O .rodata	00000016 _ZTSNSt8ios_base7failureE
010005bc g     F .text	0000003c _ZN10DataSource14removeListenerEP8os_event
01017460 g     F .text	000003a8 OSFlagPost
0101f358  w    O .rodata	00000014 _ZTVSt8bad_cast
0101067c g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01000748  w    F .text	00000028 _ZnwmPv
010007c0  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorIP8os_eventED2Ev
01010b30 g     F .text	00000014 fclose
010152e4 g     F .text	00000110 OS_EventTaskWait
01015ed0 g     F .text	000000c8 OS_TaskStatStkChk
0102aa98 g     O .bss	00000190 _atexit0
0101b198 g     F .text	00000170 OSTaskDelReq
010027d4  w    F .text	00000010 _ZNSt12out_of_rangeD1Ev
01021250  w    O .rwdata	00000008 _ZTI10DataSource
01000770  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev
0100c8cc g     F .text	000015b4 _dtoa_r
010096f4 g     F .text	00000740 _malloc_r
01005500  w    F .text	00000034 _ZNSsC2IPKcEET_S2_RKSaIcE
01004ac4  w    F .text	00000034 _ZNSsC2ERKSaIcE
010212ac g     O .rwdata	00000004 alt_errno
01000a24  w    F .text	00000038 _ZNSt4listIP8os_eventSaIS1_EE3endEv
01007740  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_
01014db8 g     F .text	00000070 OSStart
010030d4 g     F .text	00000030 _ZNSt14overflow_errorC2ERKSs
0100275c  w    F .text	00000034 _ZNSt11range_errorD0Ev
0100a3d0 g     F .text	00000010 _init_signal
01013f1c g     F .text	0000005c __env_unlock
0101f28c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
01000994  w    F .text	00000024 _ZN9__gnu_cxx13new_allocatorIP8os_eventE7destroyEPS2_
0100ed14 g     F .text	000000b8 _fwalk
0101b684 g     F .text	00000218 OSTaskResume
0101837c g     F .text	000000fc OSMemQuery
01001100 g     F .text	00000024 _ZN15InfraredHandler4initEv
01021308 g     O .rwdata	00000002 OSTaskStatEn
010212e2 g     O .rwdata	00000002 OSMemMax
010043dc  w    F .text	000000e4 _ZNKSs12find_last_ofEPKcmm
01019294 g     F .text	00000188 OSQPostFront
01007970 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
01012a4c g     F .text	00000060 __divsi3
01022f11 g     O .bss	00000003 OSRdyTbl
010212bc g     O .rwdata	00000002 OSDebugEn
0101f57c g     O .rodata	00000014 __thenan_df
0100e370 g     F .text	0000012c _malloc_trim_r
0101eda0 g       *ABS*	00000000 __CTOR_END__
010212d4 g     O .rwdata	00000002 OSFlagNodeSize
01006040  w    F .text	000000bc _ZNSs6appendERKSs
0102131c g     O .rwdata	00000002 OSTmrCfgMax
01005c64  w    F .text	00000088 _ZNSs9push_backEc
01000fd0  w    F .text	0000003c _ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_get_nodeEv
010107c8 g     F .text	000000bc strcmp
01004fd8  w    F .text	00000020 _ZNSs13_S_copy_charsEPcPKcS1_
0101869c g     F .text	00000214 OSQCreate
0101b308 g     F .text	000001b8 OSTaskNameGet
0101eda0 g       *ABS*	00000000 __flash_rodata_start
0101941c g     F .text	00000234 OSQPostOpt
01014ed4 g     F .text	00000240 OSTimeTick
01021304 g     O .rwdata	00000002 OSTaskMax
01002b5c g     F .text	00000104 _ZNSt8ios_base7failureD2Ev
0101eda0 g       *ABS*	00000000 __DTOR_LIST__
0101993c g     F .text	00000114 OSSemCreate
010029bc g     F .text	000000d0 _ZNSt8ios_base7failureC1ERKSs
01021328 g     O .rwdata	00000002 OSTmrWheelSize
010055d0  w    F .text	00000060 _ZNSsC1EPKcRKSaIcE
0101244c g     F .text	00000088 __nedf2
01009008 g     F .text	00000010 _ZNSt8bad_castD2Ev
0101ede4  w    O .rodata	00000011 _ZTS14CommandHandler
010212fe g     O .rwdata	00000002 OSTaskDelEn
010032c4 g     F .text	00000030 _ZNSt12out_of_rangeC1ERKSs
01000208 g     F .text	00000030 _ZN14CommandHandlerC2Ev
0101a210 g     F .text	00000130 OSSemQuery
010188b0 g     F .text	00000300 OSQDel
01018f98 g     F .text	0000017c OSQPendAbort
0101c41c g     F .text	00000034 alt_irq_init
01005018  w    F .text	000000c4 _ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag
01013bd4 g     F .text	00000060 alt_release_fd
01008ca8 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
01006ccc  w    F .text	00000050 _ZNSs6insertEmPKc
0101f590 g     O .rodata	00000100 __clz_tab
01003810 g     F .text	00000104 _ZNSt11logic_errorD2Ev
01006d8c  w    F .text	0000005c _ZNSs12_M_leak_hardEv
010011f0 g     F .text	00000040 _ZN15InfraredHandler6updateEv
01022ebc g     O .bss	00000004 _PathLocale
0101f034  w    O .rodata	00000010 _ZTSSt11logic_error
01022f3c g     O .bss	00002000 command_check_infrared_task_stk
01002e90 g     F .text	00000104 _ZNSt11logic_errorD1Ev
0101e7a4 g     F .text	00000014 atexit
0101eeb0  w    O .rodata	0000000c _ZTISt11range_error
01003104 g     F .text	00000030 _ZNSt11range_errorC1ERKSs
01010884 g     F .text	00000078 _write_r
010007e0  w    F .text	00000030 _ZNSaIP8os_eventED1Ev
0101ee3c  w    O .rodata	0000000c _ZTI15InfraredHandler
01014c48 g     F .text	0000008c OSSchedLock
0100ee74 g     F .text	0000001c setlocale
010027a0  w    F .text	00000034 _ZNSt12out_of_rangeD0Ev
01009224 g     F .text	00000008 _Unwind_GetTextRelBase
01009118 g     F .text	00000044 __cxa_call_terminate
01016738 g     F .text	0000013c OSFlagCreate
01000654 g     F .text	0000005c _ZN10DataSourceD1Ev
01021288 g     O .rwdata	00000004 _impure_ptr
01022ec4 g     O .bss	00000004 alt_argc
0101d65c g     F .text	00000064 _do_dtors
010212ce g     O .rwdata	00000002 OSEventMultiEn
01007178  w    F .text	00000114 _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_
01016874 g     F .text	000002a8 OSFlagDel
01022f14 g     O .bss	00000004 OSEventFreeList
01000020 g       .exceptions	00000000 alt_irq_entry
01003db8  w    F .text	0000002c _ZNKSs8_M_checkEmPKc
01004840  w    F .text	00000050 _ZNKSs17find_first_not_ofEPKcm
01003fbc  w    F .text	00000010 _ZNKSs5emptyEv
0100f1e0 g     F .text	00000080 __ulp
0101060c g     F .text	00000040 __isinfd
01009214 g     F .text	00000008 _Unwind_FindEnclosingFunction
01016db4 g     F .text	00000644 OSFlagPend
0102131a g     O .rwdata	00000002 OSTmrEn
01003cac  w    F .text	00000010 _ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_
0100e1cc g     F .text	00000018 __fp_unlock_all
01006aec  w    F .text	0000006c _ZNSs5eraseEmm
01021298 g     O .rwdata	00000008 alt_fs_list
010040e8  w    F .text	0000000c _ZNKSs5rfindERKSsm
01000c90  w    F .text	00000038 _ZNSt4listIP8os_eventSaIS1_EEC1ERKS2_
010052fc  w    F .text	000000ec _ZNSsC2ERKSsmm
010046b8  w    F .text	0000000c _ZNKSs16find_last_not_ofERKSsm
01015cd4 g     F .text	00000080 OS_StrCopy
01009200 g     F .text	0000000c _Unwind_GetLanguageSpecificData
01002828  w    F .text	00000034 _ZNSt16invalid_argumentD0Ev
01008970 g     F .text	00000118 __cxa_begin_catch
010212e4 g     O .rwdata	00000002 OSMemNameSize
01007ac0 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0100887c g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
0101e414 g     F .text	0000001c OSInitHookEnd
0101ef20  w    O .rodata	00000011 _ZTSSt12length_error
01000020 g       *ABS*	00000000 __ram_exceptions_start
01021310 g     O .rwdata	00000002 OSTCBPrioTblMax
0100ede0 g     F .text	00000010 localeconv
01001720 g     F .text	00000034 _ZSt16__throw_bad_castv
0102130c g     O .rwdata	00000002 OSTaskStatStkChkEn
0100793c g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
01000ab0  w    F .text	00000034 _ZNSaIP8os_eventEC1ISt10_List_nodeIS0_EEERKSaIT_E
01021270 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
0101ee68  w    O .rodata	00000014 _ZTVSt15underflow_error
0101d6f0 g     F .text	00000050 alt_ic_isr_register
010212e0 g     O .rwdata	00000002 OSMemEn
01008e90 g     F .text	00000134 __cxa_allocate_exception
010212ea g     O .rwdata	00000002 OSMutexEn
0101f31c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
01007990 g     F .text	0000000c _ZSt15set_new_handlerPFvvE
010069cc  w    F .text	00000048 _ZNSsaSEc
0102133c g       *ABS*	00000000 _edata
0102ac28 g       *ABS*	00000000 _end
0102126c g     O .rwdata	00000001 _ZSt7nothrow
01003704 g     F .text	0000010c _ZNSt13runtime_errorD0Ev
01022f18 g     O .bss	00000001 OSIntNesting
010082b8 g     F .text	000004e0 __gxx_personality_sj0
01004db0  w    F .text	0000009c _ZNSs4_Rep8_M_cloneERKSaIcEm
010001bc g       *ABS*	00000000 __ram_exceptions_end
0101cbbc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0101c144 g     F .text	00000210 OSTimeDlyResume
010008e4  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEED2Ev
01016c60 g     F .text	00000154 OSFlagNameSet
01007b60 g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0100791c g     F .text	00000010 _ZNSt9exceptionD1Ev
0101b89c g     F .text	000001fc OSTaskStkChk
0101d7dc g     F .text	000000a0 alt_ic_irq_disable
01022e8c g     O .bss	00000004 _ZN14__gnu_internal12atomic_mutexE
010212e6 g     O .rwdata	00000002 OSMemSize
0101efe0  w    O .rodata	0000000c _ZTINSt8ios_base7failureE
010106ec g     F .text	0000007c __swrite
01021280 g     O .rwdata	00000004 __malloc_trim_threshold
0101df64 g     F .text	00000020 altera_nios2_qsys_irq_init
01004244  w    F .text	00000130 _ZNSs4_Rep9_S_createEmmRKSaIcE
01022f1c g     O .bss	00000004 OSTCBCur
0101e7b8 g     F .text	00000038 exit
010091b4 g     F .text	00000018 _Unwind_SetGR
010060fc  w    F .text	00000004 _ZNSspLERKSs
010212e8 g     O .rwdata	00000002 OSMemTblSize
0100ec4c g     F .text	000000c8 _fwalk_reent
0101efa0  w    O .rodata	00000014 _ZTVSt12domain_error
0100f7dc g     F .text	0000018c __mdiff
010087c0 g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
01006884  w    F .text	00000068 _ZNSs7replaceEmmmc
01012aac g     F .text	00000060 __modsi3
010004f4 g     F .text	00000064 _ZN10DataSourceC1Ev
010079d0 g     F .text	00000010 _ZNSt9bad_allocD1Ev
02000000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
0100e10c g     F .text	00000004 __sfp_lock_release
01008d30 g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
01014a78 g     F .text	00000054 OSInit
0101f1f0  w    O .rodata	0000000c _ZTISt13bad_exception
01000000 g       *ABS*	00000000 __alt_mem_sdram
0101bcc4 g     F .text	00000144 OSTaskQuery
010197d0 g     F .text	000000ac OS_QInit
01015d54 g     F .text	00000058 OS_StrLen
01000bac  w    F .text	00000038 _ZNSaISt10_List_nodeIP8os_eventEEC2ERKS3_
0101816c g     F .text	00000120 OSMemNameSet
01000f3c  w    F .text	00000030 _ZNSt4listIP8os_eventSaIS1_EED1Ev
01000934  w    F .text	00000030 _ZNSt10_List_baseIP8os_eventSaIS1_EE10_List_implD1Ev
0100286c  w    F .text	00000034 _ZNSt12domain_errorD0Ev
01021302 g     O .rwdata	00000002 OSTaskProfileEn
010012e0 g     F .text	00000058 _ZN15InfraredHandlerD2Ev
01022f20 g     O .bss	00000004 OSTime
01003e40  w    F .text	00000008 _ZNKSs5c_strEv
010290f4 g     O .bss	00000800 OSTaskIdleStk
0101064c g     F .text	00000030 __isnand
01013310 g     F .text	0000002c _exit
01002a8c g     F .text	000000d0 _ZNSt8ios_base7failureC2ERKSs
0101d34c g     F .text	00000154 alt_alarm_start
01016b1c g     F .text	00000144 OSFlagNameGet
010023b4 g     F .text	00000190 _ZSt20__throw_out_of_rangePKc
01004af8  w    F .text	00000090 _ZNKSs7compareEmmPKcm
010068ec  w    F .text	00000060 _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc
0101c354 g     F .text	00000064 OSTimeGet
01012b1c g     F .text	00000098 __muldi3
01009188 g     F .text	00000018 _Unwind_GetGR
01009164 g     F .text	00000008 __cxa_get_globals
0100ee90 g     F .text	00000194 __smakebuf_r
0102127c g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
01005f18  w    F .text	00000040 _ZNSspLEPKc
0100a5dc g     F .text	00000074 strlen
01001a54 g     F .text	00000190 _ZSt23__throw_underflow_errorPKc
0100a36c g     F .text	00000064 _init_signal_r
01021274  w    O .rwdata	00000008 _ZTISt9type_info
0101e3a4 g     F .text	0000001c OSTaskSwHook
0101dbd4 g     F .text	00000188 open
01003b0c  w    F .text	0000000c _ZNSs4_Rep12_S_empty_repEv
01003b04  w    F .text	00000008 _ZNSs12_Alloc_hiderC1EPcRKSaIcE
010298f4 g     O .bss	00000b40 OSEventTbl
0101255c g     F .text	00000088 __gedf2
0101f1fc  w    O .rodata	0000000d _ZTSSt9exception
0102a434 g     O .bss	00000510 OSTCBTbl
0101efec  w    O .rodata	00000014 _ZTVSt13runtime_error
0101a340 g     F .text	00000104 OSSemSet
0101f2ac  w    O .rodata	0000000f _ZTSSt10bad_typeid
01003fcc  w    F .text	0000000c _ZNKSs6lengthEv
01004ff8  w    F .text	00000020 _ZNSs13_S_copy_charsEPcS_S_
01003444 g     F .text	00000008 _ZNKSt11logic_error4whatEv
0100543c  w    F .text	000000c4 _ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag
0100790c g     F .text	00000010 _ZNSt9exceptionD0Ev
01006fb0  w    F .text	00000070 _ZNSs6resizeEmc
0101d6c0 g     F .text	00000030 alt_icache_flush_all
0101efb4  w    O .rodata	00000014 _ZTVNSt8ios_base7failureE
01008c10 g     F .text	00000010 _ZNSt10bad_typeidD1Ev
0100921c g     F .text	00000008 _Unwind_GetDataRelBase
01007724  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_
01021330 g     O .rwdata	00000004 alt_priority_mask
01006b58  w    F .text	00000174 _ZNSs6insertEmPKcm
01019a50 g     F .text	000002a0 OSSemDel
01002dd4 g     F .text	00000094 _ZNSt15_List_node_base4swapERS_S0_
01022f24 g     O .bss	00000004 OSFlagFreeList
0101d740 g     F .text	0000009c alt_ic_irq_enable
010212c8 g     O .rwdata	00000002 OSEventNameSize
0100c554 g     F .text	00000024 __vfprintf_internal
01003adc  w    F .text	0000000c _ZNKSs8max_sizeEv
01022f28 g     O .bss	00000001 OSStatRdy
0102a944 g     O .bss	00000054 OSTCBPrioTbl
01013e70 g     F .text	000000ac __env_lock
0102130e g     O .rwdata	00000002 OSTaskSwHookEn
010028b8 g     F .text	00000104 _ZNSt8ios_base7failureD1Ev
01008c20 g     F .text	00000010 _ZNSt10bad_typeidD2Ev
01011cb4 g     F .text	00000080 __subdf3
01004374  w    F .text	00000004 _ZNSs4_Rep10_M_destroyERKSaIcE
01004c50  w    F .text	000000c0 _ZNKSs7compareEmmRKSsmm
010044c0  w    F .text	0000000c _ZNKSs12find_last_ofERKSsm
01005630  w    F .text	00000060 _ZNSsC2EPKcRKSaIcE
01003b58  w    F .text	00000008 _ZNSs4_Rep10_M_refdataEv
0100f0bc g     F .text	000000c4 __lo0bits
01001070  w    F .text	0000004c _ZNSt4listIP8os_eventSaIS1_EE9_M_insertESt14_List_iteratorIS1_ERKS1_
01006f5c  w    F .text	00000054 _ZNSs6rbeginEv
0100694c  w    F .text	00000048 _ZNSs6insertEmmc
01021334 g     O .rwdata	00000008 alt_alarm_list
010212d6 g     O .rwdata	00000002 OSFlagWidth
0101d5f8 g     F .text	00000064 _do_ctors
0100a494 g     F .text	00000014 __sigtramp
0101ef48  w    O .rodata	0000000c _ZTISt16invalid_argument
01005764  w    F .text	00000034 _ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
01003a80  w    F .text	0000001c _ZNKSs11_M_disjunctEPKc
01013148 g     F .text	000000fc close
0100728c  w    F .text	00000034 _ZNSs4swapERSs
01004a18  w    F .text	0000003c _ZNSsC1EmcRKSaIcE
01022ed4 g     O .bss	00000004 alt_envsem
01022f2c g     O .bss	00000004 OSIdleCtrRun
01015114 g     F .text	00000020 OSVersion
01021320 g     O .rwdata	00000002 OSTmrCfgWheelSize
01003164 g     F .text	000000b0 _ZNSt11logic_errorC1ERKSs
01013750 g     F .text	00000080 alt_load
0101be08 g     F .text	0000007c OS_TaskStkClr
01000848  w    F .text	00000038 _ZNSt14_List_iteratorIP8os_eventEppEv
01012c34 g     F .text	00000314 __pack_d
010212fa g     O .rwdata	00000002 OSTaskCreateEn
01003aa8  w    F .text	00000010 _ZNSsC1Ev
01008e08 g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
010003dc g     F .text	00000050 _ZN14CommandHandlerD0Ev
01015704 g     F .text	00000068 OS_EventWaitListInit
0100a358 g     F .text	00000014 raise
0101e430 g     F .text	0000001c OSTaskIdleHook
010033b4 g     F .text	00000030 _ZNSt16invalid_argumentC2ERKSs
010096cc g     F .text	00000014 free
0100e110 g     F .text	00000004 __sinit_lock_acquire
01003354 g     F .text	00000030 _ZNSt12length_errorC2ERKSs
0100fcd8 g     F .text	00000100 __multadd
01007a7c g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
0101ee28  w    O .rodata	00000012 _ZTS15InfraredHandler
0101ba98 g     F .text	0000022c OSTaskSuspend
0100f024 g     F .text	00000028 _Bfree
01005dcc  w    F .text	0000010c _ZNSs6appendEPKcm
01015dac g     F .text	0000005c OS_TaskIdle
0100344c g     F .text	000000b0 _ZNSt13runtime_errorC1ERKSs
010051d0  w    F .text	000000ec _ZNSsC1ERKSsmm
01021326 g     O .rwdata	00000002 OSTmrTblSize
01019650 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406f14 	ori	at,at,444
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10000fc:	1014acc0 	call	1014acc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000100:	0005313a 	rdctl	r2,ipending
 1000104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000114:	00800044 	movi	r2,1
 1000118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100011c:	e0ffff17 	ldw	r3,-4(fp)
 1000120:	e0bffe17 	ldw	r2,-8(fp)
 1000124:	1884703a 	and	r2,r3,r2
 1000128:	1005003a 	cmpeq	r2,r2,zero
 100012c:	1000161e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1000130:	e0bffd17 	ldw	r2,-12(fp)
 1000134:	00c040f4 	movhi	r3,259
 1000138:	18ea6604 	addi	r3,r3,-22120
 100013c:	100490fa 	slli	r2,r2,3
 1000140:	10c5883a 	add	r2,r2,r3
 1000144:	11400017 	ldw	r5,0(r2)
 1000148:	e0bffd17 	ldw	r2,-12(fp)
 100014c:	00c040f4 	movhi	r3,259
 1000150:	18ea6604 	addi	r3,r3,-22120
 1000154:	100490fa 	slli	r2,r2,3
 1000158:	10c5883a 	add	r2,r2,r3
 100015c:	10800104 	addi	r2,r2,4
 1000160:	11000017 	ldw	r4,0(r2)
 1000164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe31e 	bne	r2,zero,1000110 <alt_irq_handler+0x24>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fde06 	br	100011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001a4:	1014b480 	call	1014b48 <OSIntExit>
}
 10001a8:	e037883a 	mov	sp,fp
 10001ac:	dfc00117 	ldw	ra,4(sp)
 10001b0:	df000017 	ldw	fp,0(sp)
 10001b4:	dec00204 	addi	sp,sp,8
 10001b8:	f800283a 	ret

Disassembly of section .text:

010001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001bc:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
 10001c0:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c4:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c8:	00bffd16 	blt	zero,r2,10001c0 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001cc:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 10001d0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d4:	068040b4 	movhi	gp,258
    ori gp, gp, %lo(_gp)
 10001d8:	d6a49214 	ori	gp,gp,37448
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001dc:	008040b4 	movhi	r2,258
    ori r2, r2, %lo(__bss_start)
 10001e0:	108ba114 	ori	r2,r2,11908

    movhi r3, %hi(__bss_end)
 10001e4:	00c040b4 	movhi	r3,258
    ori r3, r3, %lo(__bss_end)
 10001e8:	18eb0a14 	ori	r3,r3,44072

    beq r2, r3, 1f
 10001ec:	10c00326 	beq	r2,r3,10001fc <_start+0x40>

0:
    stw zero, (r2)
 10001f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f8:	10fffd36 	bltu	r2,r3,10001f0 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001fc:	10137500 	call	1013750 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000200:	101398c0 	call	101398c <alt_main>

01000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000204:	003fff06 	br	1000204 <alt_after_alt_main>

01000208 <_ZN14CommandHandlerC2Ev>:

#include <stdio.h>
#include "CommandHandler.h"

// ALLOCATION
CommandHandler::CommandHandler() {}
 1000208:	defffe04 	addi	sp,sp,-8
 100020c:	df000115 	stw	fp,4(sp)
 1000210:	df000104 	addi	fp,sp,4
 1000214:	e13fff15 	stw	r4,-4(fp)
 1000218:	00c040b4 	movhi	r3,258
 100021c:	18fb7704 	addi	r3,r3,-4644
 1000220:	e0bfff17 	ldw	r2,-4(fp)
 1000224:	10c00015 	stw	r3,0(r2)
 1000228:	e037883a 	mov	sp,fp
 100022c:	df000017 	ldw	fp,0(sp)
 1000230:	dec00104 	addi	sp,sp,4
 1000234:	f800283a 	ret

01000238 <_ZN14CommandHandlerC1Ev>:
 1000238:	defffe04 	addi	sp,sp,-8
 100023c:	df000115 	stw	fp,4(sp)
 1000240:	df000104 	addi	fp,sp,4
 1000244:	e13fff15 	stw	r4,-4(fp)
 1000248:	00c040b4 	movhi	r3,258
 100024c:	18fb7704 	addi	r3,r3,-4644
 1000250:	e0bfff17 	ldw	r2,-4(fp)
 1000254:	10c00015 	stw	r3,0(r2)
 1000258:	e037883a 	mov	sp,fp
 100025c:	df000017 	ldw	fp,0(sp)
 1000260:	dec00104 	addi	sp,sp,4
 1000264:	f800283a 	ret

01000268 <_ZN14CommandHandler17onInfraredReceiveEv>:

/*
 * Gets the queue used to accept infrared receive events.
 * @return the infrared receive queue
 */
OS_EVENT *CommandHandler::onInfraredReceive() {
 1000268:	defffe04 	addi	sp,sp,-8
 100026c:	df000115 	stw	fp,4(sp)
 1000270:	df000104 	addi	fp,sp,4
 1000274:	e13fff15 	stw	r4,-4(fp)
	return infraredReceiveQueue;
 1000278:	e0bfff17 	ldw	r2,-4(fp)
 100027c:	10800517 	ldw	r2,20(r2)
}
 1000280:	e037883a 	mov	sp,fp
 1000284:	df000017 	ldw	fp,0(sp)
 1000288:	dec00104 	addi	sp,sp,4
 100028c:	f800283a 	ret

01000290 <_ZN14CommandHandler22processInfraredReceiveEj>:

/*
 * Processes an infrared receive event.
 * @param level - the level recorded by the infrared receiver
 */
Status CommandHandler::processInfraredReceive(unsigned int level) {
 1000290:	defffc04 	addi	sp,sp,-16
 1000294:	dfc00315 	stw	ra,12(sp)
 1000298:	df000215 	stw	fp,8(sp)
 100029c:	df000204 	addi	fp,sp,8
 10002a0:	e13ffe15 	stw	r4,-8(fp)
 10002a4:	e17fff15 	stw	r5,-4(fp)
	printf("CommandHandler [event: infrared receive, level: %u]", level);
 10002a8:	010040b4 	movhi	r4,258
 10002ac:	213b6804 	addi	r4,r4,-4704
 10002b0:	e17fff17 	ldw	r5,-4(fp)
 10002b4:	100a1a40 	call	100a1a4 <printf>
	return OK;
 10002b8:	0005883a 	mov	r2,zero
}
 10002bc:	e037883a 	mov	sp,fp
 10002c0:	dfc00117 	ldw	ra,4(sp)
 10002c4:	df000017 	ldw	fp,0(sp)
 10002c8:	dec00204 	addi	sp,sp,8
 10002cc:	f800283a 	ret

010002d0 <_ZN14CommandHandler20checkInfraredReceiveEv>:

/*
 * Checks the infrared receive queue for new readings.
 * @return OK when a new reading is received and processed without error
 */
Status CommandHandler::checkInfraredReceive() {
 10002d0:	defffa04 	addi	sp,sp,-24
 10002d4:	dfc00515 	stw	ra,20(sp)
 10002d8:	df000415 	stw	fp,16(sp)
 10002dc:	df000404 	addi	fp,sp,16
 10002e0:	e13ffe15 	stw	r4,-8(fp)
	INT8U status;
	int level = (int)OSQPend(infraredReceiveQueue, 0, &status);
 10002e4:	e0bffe17 	ldw	r2,-8(fp)
 10002e8:	11000517 	ldw	r4,20(r2)
 10002ec:	e1bffd04 	addi	r6,fp,-12
 10002f0:	000b883a 	mov	r5,zero
 10002f4:	1018c780 	call	1018c78 <OSQPend>
 10002f8:	e0bffc15 	stw	r2,-16(fp)
	if (status != OS_NO_ERR) {
 10002fc:	e0bffd03 	ldbu	r2,-12(fp)
 1000300:	10803fcc 	andi	r2,r2,255
 1000304:	1005003a 	cmpeq	r2,r2,zero
 1000308:	1000031e 	bne	r2,zero,1000318 <_ZN14CommandHandler20checkInfraredReceiveEv+0x48>
		return ERR_INFRARED;
 100030c:	00800044 	movi	r2,1
 1000310:	e0bfff15 	stw	r2,-4(fp)
 1000314:	00000406 	br	1000328 <_ZN14CommandHandler20checkInfraredReceiveEv+0x58>
	} else {
		return processInfraredReceive(level);
 1000318:	e17ffc17 	ldw	r5,-16(fp)
 100031c:	e13ffe17 	ldw	r4,-8(fp)
 1000320:	10002900 	call	1000290 <_ZN14CommandHandler22processInfraredReceiveEj>
 1000324:	e0bfff15 	stw	r2,-4(fp)
 1000328:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 100032c:	e037883a 	mov	sp,fp
 1000330:	dfc00117 	ldw	ra,4(sp)
 1000334:	df000017 	ldw	fp,0(sp)
 1000338:	dec00204 	addi	sp,sp,8
 100033c:	f800283a 	ret

01000340 <_ZN14CommandHandler21createInfraredReceiveEv>:
	return createInfraredReceive();
}

// INFRARED

Status CommandHandler::createInfraredReceive() {
 1000340:	defffc04 	addi	sp,sp,-16
 1000344:	dfc00315 	stw	ra,12(sp)
 1000348:	df000215 	stw	fp,8(sp)
 100034c:	df000204 	addi	fp,sp,8
 1000350:	e13ffe15 	stw	r4,-8(fp)
	/* Create the infrared receive queue. */
	infraredReceiveQueue = OSQCreate((void**)&infraredReceiveArray, COMMAND_INFRARED_RECEIVE_SIZE);
 1000354:	e0bffe17 	ldw	r2,-8(fp)
 1000358:	10800104 	addi	r2,r2,4
 100035c:	1009883a 	mov	r4,r2
 1000360:	01400104 	movi	r5,4
 1000364:	101869c0 	call	101869c <OSQCreate>
 1000368:	1007883a 	mov	r3,r2
 100036c:	e0bffe17 	ldw	r2,-8(fp)
 1000370:	10c00515 	stw	r3,20(r2)
	if (infraredReceiveQueue == NULL) {
 1000374:	e0bffe17 	ldw	r2,-8(fp)
 1000378:	10800517 	ldw	r2,20(r2)
 100037c:	1004c03a 	cmpne	r2,r2,zero
 1000380:	1000031e 	bne	r2,zero,1000390 <_ZN14CommandHandler21createInfraredReceiveEv+0x50>
		return ERR_INFRARED;
 1000384:	00800044 	movi	r2,1
 1000388:	e0bfff15 	stw	r2,-4(fp)
 100038c:	00000106 	br	1000394 <_ZN14CommandHandler21createInfraredReceiveEv+0x54>
	} else {
		return OK;
 1000390:	e03fff15 	stw	zero,-4(fp)
 1000394:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 1000398:	e037883a 	mov	sp,fp
 100039c:	dfc00117 	ldw	ra,4(sp)
 10003a0:	df000017 	ldw	fp,0(sp)
 10003a4:	dec00204 	addi	sp,sp,8
 10003a8:	f800283a 	ret

010003ac <_ZN14CommandHandler4initEv>:

/*
 * Initializes this handler.
 * @return OK if there are no initialization errors
 */
Status CommandHandler::init() {
 10003ac:	defffd04 	addi	sp,sp,-12
 10003b0:	dfc00215 	stw	ra,8(sp)
 10003b4:	df000115 	stw	fp,4(sp)
 10003b8:	df000104 	addi	fp,sp,4
 10003bc:	e13fff15 	stw	r4,-4(fp)
	return createInfraredReceive();
 10003c0:	e13fff17 	ldw	r4,-4(fp)
 10003c4:	10003400 	call	1000340 <_ZN14CommandHandler21createInfraredReceiveEv>
}
 10003c8:	e037883a 	mov	sp,fp
 10003cc:	dfc00117 	ldw	ra,4(sp)
 10003d0:	df000017 	ldw	fp,0(sp)
 10003d4:	dec00204 	addi	sp,sp,8
 10003d8:	f800283a 	ret

010003dc <_ZN14CommandHandlerD0Ev>:
#include <stdio.h>
#include "CommandHandler.h"

// ALLOCATION
CommandHandler::CommandHandler() {}
CommandHandler::~CommandHandler() {}
 10003dc:	defffd04 	addi	sp,sp,-12
 10003e0:	dfc00215 	stw	ra,8(sp)
 10003e4:	df000115 	stw	fp,4(sp)
 10003e8:	df000104 	addi	fp,sp,4
 10003ec:	e13fff15 	stw	r4,-4(fp)
 10003f0:	00c040b4 	movhi	r3,258
 10003f4:	18fb7704 	addi	r3,r3,-4644
 10003f8:	e0bfff17 	ldw	r2,-4(fp)
 10003fc:	10c00015 	stw	r3,0(r2)
 1000400:	00800044 	movi	r2,1
 1000404:	10803fcc 	andi	r2,r2,255
 1000408:	1005003a 	cmpeq	r2,r2,zero
 100040c:	1000021e 	bne	r2,zero,1000418 <_ZN14CommandHandlerD0Ev+0x3c>
 1000410:	e13fff17 	ldw	r4,-4(fp)
 1000414:	1008a880 	call	1008a88 <_ZdlPv>
 1000418:	e037883a 	mov	sp,fp
 100041c:	dfc00117 	ldw	ra,4(sp)
 1000420:	df000017 	ldw	fp,0(sp)
 1000424:	dec00204 	addi	sp,sp,8
 1000428:	f800283a 	ret

0100042c <_ZN14CommandHandlerD1Ev>:
 100042c:	defffd04 	addi	sp,sp,-12
 1000430:	dfc00215 	stw	ra,8(sp)
 1000434:	df000115 	stw	fp,4(sp)
 1000438:	df000104 	addi	fp,sp,4
 100043c:	e13fff15 	stw	r4,-4(fp)
 1000440:	00c040b4 	movhi	r3,258
 1000444:	18fb7704 	addi	r3,r3,-4644
 1000448:	e0bfff17 	ldw	r2,-4(fp)
 100044c:	10c00015 	stw	r3,0(r2)
 1000450:	0005883a 	mov	r2,zero
 1000454:	10803fcc 	andi	r2,r2,255
 1000458:	1005003a 	cmpeq	r2,r2,zero
 100045c:	1000021e 	bne	r2,zero,1000468 <_ZN14CommandHandlerD1Ev+0x3c>
 1000460:	e13fff17 	ldw	r4,-4(fp)
 1000464:	1008a880 	call	1008a88 <_ZdlPv>
 1000468:	e037883a 	mov	sp,fp
 100046c:	dfc00117 	ldw	ra,4(sp)
 1000470:	df000017 	ldw	fp,0(sp)
 1000474:	dec00204 	addi	sp,sp,8
 1000478:	f800283a 	ret

0100047c <_ZN14CommandHandlerD2Ev>:
 100047c:	defffd04 	addi	sp,sp,-12
 1000480:	dfc00215 	stw	ra,8(sp)
 1000484:	df000115 	stw	fp,4(sp)
 1000488:	df000104 	addi	fp,sp,4
 100048c:	e13fff15 	stw	r4,-4(fp)
 1000490:	00c040b4 	movhi	r3,258
 1000494:	18fb7704 	addi	r3,r3,-4644
 1000498:	e0bfff17 	ldw	r2,-4(fp)
 100049c:	10c00015 	stw	r3,0(r2)
 10004a0:	0005883a 	mov	r2,zero
 10004a4:	10803fcc 	andi	r2,r2,255
 10004a8:	1005003a 	cmpeq	r2,r2,zero
 10004ac:	1000021e 	bne	r2,zero,10004b8 <_ZN14CommandHandlerD2Ev+0x3c>
 10004b0:	e13fff17 	ldw	r4,-4(fp)
 10004b4:	1008a880 	call	1008a88 <_ZdlPv>
 10004b8:	e037883a 	mov	sp,fp
 10004bc:	dfc00117 	ldw	ra,4(sp)
 10004c0:	df000017 	ldw	fp,0(sp)
 10004c4:	dec00204 	addi	sp,sp,8
 10004c8:	f800283a 	ret

010004cc <_Z27command_check_infrared_taskPv>:
#include "CommandTasks.h"

extern CommandHandler *command;

/* Monitors the infrared receive queue and responds to infrared receive events. */
void command_check_infrared_task(void* pdata) {
 10004cc:	defffd04 	addi	sp,sp,-12
 10004d0:	dfc00215 	stw	ra,8(sp)
 10004d4:	df000115 	stw	fp,4(sp)
 10004d8:	df000104 	addi	fp,sp,4
 10004dc:	e13fff15 	stw	r4,-4(fp)
	while (true) {
		command->checkInfraredReceive();
 10004e0:	008040b4 	movhi	r2,258
 10004e4:	108ba104 	addi	r2,r2,11908
 10004e8:	11000017 	ldw	r4,0(r2)
 10004ec:	10002d00 	call	10002d0 <_ZN14CommandHandler20checkInfraredReceiveEv>

extern CommandHandler *command;

/* Monitors the infrared receive queue and responds to infrared receive events. */
void command_check_infrared_task(void* pdata) {
	while (true) {
 10004f0:	003ffb06 	br	10004e0 <_Z27command_check_infrared_taskPv+0x14>

010004f4 <_ZN10DataSourceC1Ev>:
 */

#include "DataSource.h"

// ALLOCATION
DataSource::DataSource() {}
 10004f4:	defffb04 	addi	sp,sp,-20
 10004f8:	dfc00415 	stw	ra,16(sp)
 10004fc:	df000315 	stw	fp,12(sp)
 1000500:	dc000215 	stw	r16,8(sp)
 1000504:	df000204 	addi	fp,sp,8
 1000508:	e13fff15 	stw	r4,-4(fp)
 100050c:	00c040b4 	movhi	r3,258
 1000510:	18fb8004 	addi	r3,r3,-4608
 1000514:	e0bfff17 	ldw	r2,-4(fp)
 1000518:	10c00015 	stw	r3,0(r2)
 100051c:	e0bfff17 	ldw	r2,-4(fp)
 1000520:	14000104 	addi	r16,r2,4
 1000524:	e13ffe04 	addi	r4,fp,-8
 1000528:	10007900 	call	1000790 <_ZNSaIP8os_eventEC1Ev>
 100052c:	8009883a 	mov	r4,r16
 1000530:	e17ffe04 	addi	r5,fp,-8
 1000534:	1000c900 	call	1000c90 <_ZNSt4listIP8os_eventSaIS1_EEC1ERKS2_>
 1000538:	e13ffe04 	addi	r4,fp,-8
 100053c:	10007e00 	call	10007e0 <_ZNSaIP8os_eventED1Ev>
 1000540:	e037883a 	mov	sp,fp
 1000544:	dfc00217 	ldw	ra,8(sp)
 1000548:	df000117 	ldw	fp,4(sp)
 100054c:	dc000017 	ldw	r16,0(sp)
 1000550:	dec00304 	addi	sp,sp,12
 1000554:	f800283a 	ret

01000558 <_ZN10DataSourceC2Ev>:
 1000558:	defffb04 	addi	sp,sp,-20
 100055c:	dfc00415 	stw	ra,16(sp)
 1000560:	df000315 	stw	fp,12(sp)
 1000564:	dc000215 	stw	r16,8(sp)
 1000568:	df000204 	addi	fp,sp,8
 100056c:	e13fff15 	stw	r4,-4(fp)
 1000570:	00c040b4 	movhi	r3,258
 1000574:	18fb8004 	addi	r3,r3,-4608
 1000578:	e0bfff17 	ldw	r2,-4(fp)
 100057c:	10c00015 	stw	r3,0(r2)
 1000580:	e0bfff17 	ldw	r2,-4(fp)
 1000584:	14000104 	addi	r16,r2,4
 1000588:	e13ffe04 	addi	r4,fp,-8
 100058c:	10007900 	call	1000790 <_ZNSaIP8os_eventEC1Ev>
 1000590:	8009883a 	mov	r4,r16
 1000594:	e17ffe04 	addi	r5,fp,-8
 1000598:	1000c900 	call	1000c90 <_ZNSt4listIP8os_eventSaIS1_EEC1ERKS2_>
 100059c:	e13ffe04 	addi	r4,fp,-8
 10005a0:	10007e00 	call	10007e0 <_ZNSaIP8os_eventED1Ev>
 10005a4:	e037883a 	mov	sp,fp
 10005a8:	dfc00217 	ldw	ra,8(sp)
 10005ac:	df000117 	ldw	fp,4(sp)
 10005b0:	dc000017 	ldw	r16,0(sp)
 10005b4:	dec00304 	addi	sp,sp,12
 10005b8:	f800283a 	ret

010005bc <_ZN10DataSource14removeListenerEP8os_event>:

/*
 * Removes a listener queue from this data source.
 * @param queue - the queue to remove
 */
void DataSource::removeListener(OS_EVENT *queue) {
 10005bc:	defffc04 	addi	sp,sp,-16
 10005c0:	dfc00315 	stw	ra,12(sp)
 10005c4:	df000215 	stw	fp,8(sp)
 10005c8:	df000204 	addi	fp,sp,8
 10005cc:	e13ffe15 	stw	r4,-8(fp)
 10005d0:	e17fff15 	stw	r5,-4(fp)
	listeners.remove(queue);
 10005d4:	e0bffe17 	ldw	r2,-8(fp)
 10005d8:	11000104 	addi	r4,r2,4
 10005dc:	e17fff04 	addi	r5,fp,-4
 10005e0:	1000dd40 	call	1000dd4 <_ZNSt4listIP8os_eventSaIS1_EE6removeERKS1_>
}
 10005e4:	e037883a 	mov	sp,fp
 10005e8:	dfc00117 	ldw	ra,4(sp)
 10005ec:	df000017 	ldw	fp,0(sp)
 10005f0:	dec00204 	addi	sp,sp,8
 10005f4:	f800283a 	ret

010005f8 <_ZN10DataSourceD0Ev>:

#include "DataSource.h"

// ALLOCATION
DataSource::DataSource() {}
DataSource::~DataSource() {}
 10005f8:	defffd04 	addi	sp,sp,-12
 10005fc:	dfc00215 	stw	ra,8(sp)
 1000600:	df000115 	stw	fp,4(sp)
 1000604:	df000104 	addi	fp,sp,4
 1000608:	e13fff15 	stw	r4,-4(fp)
 100060c:	00c040b4 	movhi	r3,258
 1000610:	18fb8004 	addi	r3,r3,-4608
 1000614:	e0bfff17 	ldw	r2,-4(fp)
 1000618:	10c00015 	stw	r3,0(r2)
 100061c:	e0bfff17 	ldw	r2,-4(fp)
 1000620:	11000104 	addi	r4,r2,4
 1000624:	1000f3c0 	call	1000f3c <_ZNSt4listIP8os_eventSaIS1_EED1Ev>
 1000628:	00800044 	movi	r2,1
 100062c:	10803fcc 	andi	r2,r2,255
 1000630:	1005003a 	cmpeq	r2,r2,zero
 1000634:	1000021e 	bne	r2,zero,1000640 <_ZN10DataSourceD0Ev+0x48>
 1000638:	e13fff17 	ldw	r4,-4(fp)
 100063c:	1008a880 	call	1008a88 <_ZdlPv>
 1000640:	e037883a 	mov	sp,fp
 1000644:	dfc00117 	ldw	ra,4(sp)
 1000648:	df000017 	ldw	fp,0(sp)
 100064c:	dec00204 	addi	sp,sp,8
 1000650:	f800283a 	ret

01000654 <_ZN10DataSourceD1Ev>:
 1000654:	defffd04 	addi	sp,sp,-12
 1000658:	dfc00215 	stw	ra,8(sp)
 100065c:	df000115 	stw	fp,4(sp)
 1000660:	df000104 	addi	fp,sp,4
 1000664:	e13fff15 	stw	r4,-4(fp)
 1000668:	00c040b4 	movhi	r3,258
 100066c:	18fb8004 	addi	r3,r3,-4608
 1000670:	e0bfff17 	ldw	r2,-4(fp)
 1000674:	10c00015 	stw	r3,0(r2)
 1000678:	e0bfff17 	ldw	r2,-4(fp)
 100067c:	11000104 	addi	r4,r2,4
 1000680:	1000f3c0 	call	1000f3c <_ZNSt4listIP8os_eventSaIS1_EED1Ev>
 1000684:	0005883a 	mov	r2,zero
 1000688:	10803fcc 	andi	r2,r2,255
 100068c:	1005003a 	cmpeq	r2,r2,zero
 1000690:	1000021e 	bne	r2,zero,100069c <_ZN10DataSourceD1Ev+0x48>
 1000694:	e13fff17 	ldw	r4,-4(fp)
 1000698:	1008a880 	call	1008a88 <_ZdlPv>
 100069c:	e037883a 	mov	sp,fp
 10006a0:	dfc00117 	ldw	ra,4(sp)
 10006a4:	df000017 	ldw	fp,0(sp)
 10006a8:	dec00204 	addi	sp,sp,8
 10006ac:	f800283a 	ret

010006b0 <_ZN10DataSourceD2Ev>:
 10006b0:	defffd04 	addi	sp,sp,-12
 10006b4:	dfc00215 	stw	ra,8(sp)
 10006b8:	df000115 	stw	fp,4(sp)
 10006bc:	df000104 	addi	fp,sp,4
 10006c0:	e13fff15 	stw	r4,-4(fp)
 10006c4:	00c040b4 	movhi	r3,258
 10006c8:	18fb8004 	addi	r3,r3,-4608
 10006cc:	e0bfff17 	ldw	r2,-4(fp)
 10006d0:	10c00015 	stw	r3,0(r2)
 10006d4:	e0bfff17 	ldw	r2,-4(fp)
 10006d8:	11000104 	addi	r4,r2,4
 10006dc:	1000f3c0 	call	1000f3c <_ZNSt4listIP8os_eventSaIS1_EED1Ev>
 10006e0:	0005883a 	mov	r2,zero
 10006e4:	10803fcc 	andi	r2,r2,255
 10006e8:	1005003a 	cmpeq	r2,r2,zero
 10006ec:	1000021e 	bne	r2,zero,10006f8 <_ZN10DataSourceD2Ev+0x48>
 10006f0:	e13fff17 	ldw	r4,-4(fp)
 10006f4:	1008a880 	call	1008a88 <_ZdlPv>
 10006f8:	e037883a 	mov	sp,fp
 10006fc:	dfc00117 	ldw	ra,4(sp)
 1000700:	df000017 	ldw	fp,0(sp)
 1000704:	dec00204 	addi	sp,sp,8
 1000708:	f800283a 	ret

0100070c <_ZN10DataSource11addListenerEP8os_event>:

/*
 * Adds a listener queue to this data source.
 * @param queue - the queue to add
 */
void DataSource::addListener(OS_EVENT *queue) {
 100070c:	defffc04 	addi	sp,sp,-16
 1000710:	dfc00315 	stw	ra,12(sp)
 1000714:	df000215 	stw	fp,8(sp)
 1000718:	df000204 	addi	fp,sp,8
 100071c:	e13ffe15 	stw	r4,-8(fp)
 1000720:	e17fff15 	stw	r5,-4(fp)
	listeners.push_back(queue);
 1000724:	e0bffe17 	ldw	r2,-8(fp)
 1000728:	11000104 	addi	r4,r2,4
 100072c:	e17fff04 	addi	r5,fp,-4
 1000730:	10010bc0 	call	10010bc <_ZNSt4listIP8os_eventSaIS1_EE9push_backERKS1_>
}
 1000734:	e037883a 	mov	sp,fp
 1000738:	dfc00117 	ldw	ra,4(sp)
 100073c:	df000017 	ldw	fp,0(sp)
 1000740:	dec00204 	addi	sp,sp,8
 1000744:	f800283a 	ret

01000748 <_ZnwmPv>:
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) throw() { return __p; }
 1000748:	defffd04 	addi	sp,sp,-12
 100074c:	df000215 	stw	fp,8(sp)
 1000750:	df000204 	addi	fp,sp,8
 1000754:	e13ffe15 	stw	r4,-8(fp)
 1000758:	e17fff15 	stw	r5,-4(fp)
 100075c:	e0bfff17 	ldw	r2,-4(fp)
 1000760:	e037883a 	mov	sp,fp
 1000764:	df000017 	ldw	fp,0(sp)
 1000768:	dec00104 	addi	sp,sp,4
 100076c:	f800283a 	ret

01000770 <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }
 1000770:	defffe04 	addi	sp,sp,-8
 1000774:	df000115 	stw	fp,4(sp)
 1000778:	df000104 	addi	fp,sp,4
 100077c:	e13fff15 	stw	r4,-4(fp)
 1000780:	e037883a 	mov	sp,fp
 1000784:	df000017 	ldw	fp,0(sp)
 1000788:	dec00104 	addi	sp,sp,4
 100078c:	f800283a 	ret

01000790 <_ZNSaIP8os_eventEC1Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }
 1000790:	defffd04 	addi	sp,sp,-12
 1000794:	dfc00215 	stw	ra,8(sp)
 1000798:	df000115 	stw	fp,4(sp)
 100079c:	df000104 	addi	fp,sp,4
 10007a0:	e13fff15 	stw	r4,-4(fp)
 10007a4:	e13fff17 	ldw	r4,-4(fp)
 10007a8:	10007700 	call	1000770 <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev>
 10007ac:	e037883a 	mov	sp,fp
 10007b0:	dfc00117 	ldw	ra,4(sp)
 10007b4:	df000017 	ldw	fp,0(sp)
 10007b8:	dec00204 	addi	sp,sp,8
 10007bc:	f800283a 	ret

010007c0 <_ZN9__gnu_cxx13new_allocatorIP8os_eventED2Ev>:
      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }
 10007c0:	defffe04 	addi	sp,sp,-8
 10007c4:	df000115 	stw	fp,4(sp)
 10007c8:	df000104 	addi	fp,sp,4
 10007cc:	e13fff15 	stw	r4,-4(fp)
 10007d0:	e037883a 	mov	sp,fp
 10007d4:	df000017 	ldw	fp,0(sp)
 10007d8:	dec00104 	addi	sp,sp,4
 10007dc:	f800283a 	ret

010007e0 <_ZNSaIP8os_eventED1Ev>:
      : __glibcxx_base_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 10007e0:	defffd04 	addi	sp,sp,-12
 10007e4:	dfc00215 	stw	ra,8(sp)
 10007e8:	df000115 	stw	fp,4(sp)
 10007ec:	df000104 	addi	fp,sp,4
 10007f0:	e13fff15 	stw	r4,-4(fp)
 10007f4:	e13fff17 	ldw	r4,-4(fp)
 10007f8:	10007c00 	call	10007c0 <_ZN9__gnu_cxx13new_allocatorIP8os_eventED2Ev>
 10007fc:	e037883a 	mov	sp,fp
 1000800:	dfc00117 	ldw	ra,4(sp)
 1000804:	df000017 	ldw	fp,0(sp)
 1000808:	dec00204 	addi	sp,sp,8
 100080c:	f800283a 	ret

01000810 <_ZNKSt14_List_iteratorIP8os_eventEneERKS2_>:
      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
 1000810:	defffd04 	addi	sp,sp,-12
 1000814:	df000215 	stw	fp,8(sp)
 1000818:	df000204 	addi	fp,sp,8
 100081c:	e13ffe15 	stw	r4,-8(fp)
 1000820:	e17fff15 	stw	r5,-4(fp)
      { return _M_node != __x._M_node; }
 1000824:	e0bffe17 	ldw	r2,-8(fp)
 1000828:	10c00017 	ldw	r3,0(r2)
 100082c:	e0bfff17 	ldw	r2,-4(fp)
 1000830:	10800017 	ldw	r2,0(r2)
 1000834:	1884c03a 	cmpne	r2,r3,r2
 1000838:	e037883a 	mov	sp,fp
 100083c:	df000017 	ldw	fp,0(sp)
 1000840:	dec00104 	addi	sp,sp,4
 1000844:	f800283a 	ret

01000848 <_ZNSt14_List_iteratorIP8os_eventEppEv>:
      pointer
      operator->() const
      { return &static_cast<_Node*>(_M_node)->_M_data; }

      _Self&
      operator++()
 1000848:	defffe04 	addi	sp,sp,-8
 100084c:	df000115 	stw	fp,4(sp)
 1000850:	df000104 	addi	fp,sp,4
 1000854:	e13fff15 	stw	r4,-4(fp)
      {
	_M_node = _M_node->_M_next;
 1000858:	e0bfff17 	ldw	r2,-4(fp)
 100085c:	10800017 	ldw	r2,0(r2)
 1000860:	10c00017 	ldw	r3,0(r2)
 1000864:	e0bfff17 	ldw	r2,-4(fp)
 1000868:	10c00015 	stw	r3,0(r2)
	return *this;
 100086c:	e0bfff17 	ldw	r2,-4(fp)
 1000870:	e037883a 	mov	sp,fp
 1000874:	df000017 	ldw	fp,0(sp)
 1000878:	dec00104 	addi	sp,sp,4
 100087c:	f800283a 	ret

01000880 <_ZNKSt14_List_iteratorIP8os_eventEdeEv>:
      _List_iterator(_List_node_base* __x)
      : _M_node(__x) { }

      // Must downcast from List_node_base to _List_node to get to _M_data.
      reference
      operator*() const
 1000880:	defffe04 	addi	sp,sp,-8
 1000884:	df000115 	stw	fp,4(sp)
 1000888:	df000104 	addi	fp,sp,4
 100088c:	e13fff15 	stw	r4,-4(fp)
      { return static_cast<_Node*>(_M_node)->_M_data; }
 1000890:	e0bfff17 	ldw	r2,-4(fp)
 1000894:	10800017 	ldw	r2,0(r2)
 1000898:	10800204 	addi	r2,r2,8
 100089c:	e037883a 	mov	sp,fp
 10008a0:	df000017 	ldw	fp,0(sp)
 10008a4:	dec00104 	addi	sp,sp,4
 10008a8:	f800283a 	ret

010008ac <_ZNSt10_List_baseIP8os_eventSaIS1_EE7_M_initEv>:

      void
      _M_clear();

      void
      _M_init()
 10008ac:	defffe04 	addi	sp,sp,-8
 10008b0:	df000115 	stw	fp,4(sp)
 10008b4:	df000104 	addi	fp,sp,4
 10008b8:	e13fff15 	stw	r4,-4(fp)
      {
        this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 10008bc:	e0ffff17 	ldw	r3,-4(fp)
 10008c0:	e0bfff17 	ldw	r2,-4(fp)
 10008c4:	10c00015 	stw	r3,0(r2)
        this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 10008c8:	e0ffff17 	ldw	r3,-4(fp)
 10008cc:	e0bfff17 	ldw	r2,-4(fp)
 10008d0:	10c00115 	stw	r3,4(r2)
 10008d4:	e037883a 	mov	sp,fp
 10008d8:	df000017 	ldw	fp,0(sp)
 10008dc:	dec00104 	addi	sp,sp,4
 10008e0:	f800283a 	ret

010008e4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEED2Ev>:
 10008e4:	defffe04 	addi	sp,sp,-8
 10008e8:	df000115 	stw	fp,4(sp)
 10008ec:	df000104 	addi	fp,sp,4
 10008f0:	e13fff15 	stw	r4,-4(fp)
 10008f4:	e037883a 	mov	sp,fp
 10008f8:	df000017 	ldw	fp,0(sp)
 10008fc:	dec00104 	addi	sp,sp,4
 1000900:	f800283a 	ret

01000904 <_ZNSaISt10_List_nodeIP8os_eventEED2Ev>:
 1000904:	defffd04 	addi	sp,sp,-12
 1000908:	dfc00215 	stw	ra,8(sp)
 100090c:	df000115 	stw	fp,4(sp)
 1000910:	df000104 	addi	fp,sp,4
 1000914:	e13fff15 	stw	r4,-4(fp)
 1000918:	e13fff17 	ldw	r4,-4(fp)
 100091c:	10008e40 	call	10008e4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEED2Ev>
 1000920:	e037883a 	mov	sp,fp
 1000924:	dfc00117 	ldw	ra,4(sp)
 1000928:	df000017 	ldw	fp,0(sp)
 100092c:	dec00204 	addi	sp,sp,8
 1000930:	f800283a 	ret

01000934 <_ZNSt10_List_baseIP8os_eventSaIS1_EE10_List_implD1Ev>:

      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _List_impl 
      : public _Node_alloc_type
      {
 1000934:	defffd04 	addi	sp,sp,-12
 1000938:	dfc00215 	stw	ra,8(sp)
 100093c:	df000115 	stw	fp,4(sp)
 1000940:	df000104 	addi	fp,sp,4
 1000944:	e13fff15 	stw	r4,-4(fp)
 1000948:	e13fff17 	ldw	r4,-4(fp)
 100094c:	10009040 	call	1000904 <_ZNSaISt10_List_nodeIP8os_eventEED2Ev>
 1000950:	e037883a 	mov	sp,fp
 1000954:	dfc00117 	ldw	ra,4(sp)
 1000958:	df000017 	ldw	fp,0(sp)
 100095c:	dec00204 	addi	sp,sp,8
 1000960:	f800283a 	ret

01000964 <_ZNSaISt10_List_nodeIP8os_eventEED1Ev>:
 1000964:	defffd04 	addi	sp,sp,-12
 1000968:	dfc00215 	stw	ra,8(sp)
 100096c:	df000115 	stw	fp,4(sp)
 1000970:	df000104 	addi	fp,sp,4
 1000974:	e13fff15 	stw	r4,-4(fp)
 1000978:	e13fff17 	ldw	r4,-4(fp)
 100097c:	10008e40 	call	10008e4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEED2Ev>
 1000980:	e037883a 	mov	sp,fp
 1000984:	dfc00117 	ldw	ra,4(sp)
 1000988:	df000017 	ldw	fp,0(sp)
 100098c:	dec00204 	addi	sp,sp,8
 1000990:	f800283a 	ret

01000994 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE7destroyEPS2_>:
      void 
      construct(pointer __p, const _Tp& __val) 
      { ::new(__p) _Tp(__val); }

      void 
      destroy(pointer __p) { __p->~_Tp(); }
 1000994:	defffd04 	addi	sp,sp,-12
 1000998:	df000215 	stw	fp,8(sp)
 100099c:	df000204 	addi	fp,sp,8
 10009a0:	e13ffe15 	stw	r4,-8(fp)
 10009a4:	e17fff15 	stw	r5,-4(fp)
 10009a8:	e037883a 	mov	sp,fp
 10009ac:	df000017 	ldw	fp,0(sp)
 10009b0:	dec00104 	addi	sp,sp,4
 10009b4:	f800283a 	ret

010009b8 <_ZNSt14_List_iteratorIP8os_eventEC1EPSt15_List_node_base>:

      _List_iterator()
      : _M_node() { }

      explicit
      _List_iterator(_List_node_base* __x)
 10009b8:	defffd04 	addi	sp,sp,-12
 10009bc:	df000215 	stw	fp,8(sp)
 10009c0:	df000204 	addi	fp,sp,8
 10009c4:	e13ffe15 	stw	r4,-8(fp)
 10009c8:	e17fff15 	stw	r5,-4(fp)
      : _M_node(__x) { }
 10009cc:	e0fffe17 	ldw	r3,-8(fp)
 10009d0:	e0bfff17 	ldw	r2,-4(fp)
 10009d4:	18800015 	stw	r2,0(r3)
 10009d8:	e037883a 	mov	sp,fp
 10009dc:	df000017 	ldw	fp,0(sp)
 10009e0:	dec00104 	addi	sp,sp,4
 10009e4:	f800283a 	ret

010009e8 <_ZNSt4listIP8os_eventSaIS1_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin()
 10009e8:	defffc04 	addi	sp,sp,-16
 10009ec:	dfc00315 	stw	ra,12(sp)
 10009f0:	df000215 	stw	fp,8(sp)
 10009f4:	df000204 	addi	fp,sp,8
 10009f8:	e13fff15 	stw	r4,-4(fp)
      { return iterator(this->_M_impl._M_node._M_next); }
 10009fc:	e0bfff17 	ldw	r2,-4(fp)
 1000a00:	11400017 	ldw	r5,0(r2)
 1000a04:	e13ffe04 	addi	r4,fp,-8
 1000a08:	10009b80 	call	10009b8 <_ZNSt14_List_iteratorIP8os_eventEC1EPSt15_List_node_base>
 1000a0c:	e0bffe17 	ldw	r2,-8(fp)
 1000a10:	e037883a 	mov	sp,fp
 1000a14:	dfc00117 	ldw	ra,4(sp)
 1000a18:	df000017 	ldw	fp,0(sp)
 1000a1c:	dec00204 	addi	sp,sp,8
 1000a20:	f800283a 	ret

01000a24 <_ZNSt4listIP8os_eventSaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %list.  Iteration is done in ordinary element
       *  order.
       */
      iterator
      end()
 1000a24:	defffc04 	addi	sp,sp,-16
 1000a28:	dfc00315 	stw	ra,12(sp)
 1000a2c:	df000215 	stw	fp,8(sp)
 1000a30:	df000204 	addi	fp,sp,8
 1000a34:	e13fff15 	stw	r4,-4(fp)
      { return iterator(&this->_M_impl._M_node); }
 1000a38:	e17fff17 	ldw	r5,-4(fp)
 1000a3c:	e13ffe04 	addi	r4,fp,-8
 1000a40:	10009b80 	call	10009b8 <_ZNSt14_List_iteratorIP8os_eventEC1EPSt15_List_node_base>
 1000a44:	e0bffe17 	ldw	r2,-8(fp)
 1000a48:	e037883a 	mov	sp,fp
 1000a4c:	dfc00117 	ldw	ra,4(sp)
 1000a50:	df000017 	ldw	fp,0(sp)
 1000a54:	dec00204 	addi	sp,sp,8
 1000a58:	f800283a 	ret

01000a5c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEEC2Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }
 1000a5c:	defffe04 	addi	sp,sp,-8
 1000a60:	df000115 	stw	fp,4(sp)
 1000a64:	df000104 	addi	fp,sp,4
 1000a68:	e13fff15 	stw	r4,-4(fp)
 1000a6c:	e037883a 	mov	sp,fp
 1000a70:	df000017 	ldw	fp,0(sp)
 1000a74:	dec00104 	addi	sp,sp,4
 1000a78:	f800283a 	ret

01000a7c <_ZNSaISt10_List_nodeIP8os_eventEEC1IS1_EERKSaIT_E>:

      allocator(const allocator& __a) throw()
      : __glibcxx_base_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }
 1000a7c:	defffc04 	addi	sp,sp,-16
 1000a80:	dfc00315 	stw	ra,12(sp)
 1000a84:	df000215 	stw	fp,8(sp)
 1000a88:	df000204 	addi	fp,sp,8
 1000a8c:	e13ffe15 	stw	r4,-8(fp)
 1000a90:	e17fff15 	stw	r5,-4(fp)
 1000a94:	e13ffe17 	ldw	r4,-8(fp)
 1000a98:	1000a5c0 	call	1000a5c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEEC2Ev>
 1000a9c:	e037883a 	mov	sp,fp
 1000aa0:	dfc00117 	ldw	ra,4(sp)
 1000aa4:	df000017 	ldw	fp,0(sp)
 1000aa8:	dec00204 	addi	sp,sp,8
 1000aac:	f800283a 	ret

01000ab0 <_ZNSaIP8os_eventEC1ISt10_List_nodeIS0_EEERKSaIT_E>:
 1000ab0:	defffc04 	addi	sp,sp,-16
 1000ab4:	dfc00315 	stw	ra,12(sp)
 1000ab8:	df000215 	stw	fp,8(sp)
 1000abc:	df000204 	addi	fp,sp,8
 1000ac0:	e13ffe15 	stw	r4,-8(fp)
 1000ac4:	e17fff15 	stw	r5,-4(fp)
 1000ac8:	e13ffe17 	ldw	r4,-8(fp)
 1000acc:	10007700 	call	1000770 <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev>
 1000ad0:	e037883a 	mov	sp,fp
 1000ad4:	dfc00117 	ldw	ra,4(sp)
 1000ad8:	df000017 	ldw	fp,0(sp)
 1000adc:	dec00204 	addi	sp,sp,8
 1000ae0:	f800283a 	ret

01000ae4 <_ZNKSt10_List_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>:
      
  public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type
      _M_get_Tp_allocator() const
 1000ae4:	defffc04 	addi	sp,sp,-16
 1000ae8:	dfc00315 	stw	ra,12(sp)
 1000aec:	df000215 	stw	fp,8(sp)
 1000af0:	dc000115 	stw	r16,4(sp)
 1000af4:	df000104 	addi	fp,sp,4
 1000af8:	2021883a 	mov	r16,r4
 1000afc:	e17fff15 	stw	r5,-4(fp)
      { return *static_cast<const _Node_alloc_type*>(&this->_M_impl); }
 1000b00:	8009883a 	mov	r4,r16
 1000b04:	e0bfff17 	ldw	r2,-4(fp)
 1000b08:	100b883a 	mov	r5,r2
 1000b0c:	1000ab00 	call	1000ab0 <_ZNSaIP8os_eventEC1ISt10_List_nodeIS0_EEERKSaIT_E>
 1000b10:	8005883a 	mov	r2,r16
 1000b14:	e037883a 	mov	sp,fp
 1000b18:	dfc00217 	ldw	ra,8(sp)
 1000b1c:	df000117 	ldw	fp,4(sp)
 1000b20:	dc000017 	ldw	r16,0(sp)
 1000b24:	dec00304 	addi	sp,sp,12
 1000b28:	f800283a 	ret

01000b2c <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_>:
      { return size_t(-1) / sizeof(_Tp); }

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
 1000b2c:	defffa04 	addi	sp,sp,-24
 1000b30:	dfc00515 	stw	ra,20(sp)
 1000b34:	df000415 	stw	fp,16(sp)
 1000b38:	df000404 	addi	fp,sp,16
 1000b3c:	e13ffc15 	stw	r4,-16(fp)
 1000b40:	e17ffd15 	stw	r5,-12(fp)
 1000b44:	e1bffe15 	stw	r6,-8(fp)
      { ::new(__p) _Tp(__val); }
 1000b48:	01000104 	movi	r4,4
 1000b4c:	e17ffd17 	ldw	r5,-12(fp)
 1000b50:	10007480 	call	1000748 <_ZnwmPv>
 1000b54:	e0bfff15 	stw	r2,-4(fp)
 1000b58:	e0ffff17 	ldw	r3,-4(fp)
 1000b5c:	1805003a 	cmpeq	r2,r3,zero
 1000b60:	1000041e 	bne	r2,zero,1000b74 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_+0x48>
 1000b64:	e0bffe17 	ldw	r2,-8(fp)
 1000b68:	10800017 	ldw	r2,0(r2)
 1000b6c:	e0ffff17 	ldw	r3,-4(fp)
 1000b70:	18800015 	stw	r2,0(r3)
 1000b74:	e037883a 	mov	sp,fp
 1000b78:	dfc00117 	ldw	ra,4(sp)
 1000b7c:	df000017 	ldw	fp,0(sp)
 1000b80:	dec00204 	addi	sp,sp,8
 1000b84:	f800283a 	ret

01000b88 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEEC2ERKS5_>:
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }
 1000b88:	defffd04 	addi	sp,sp,-12
 1000b8c:	df000215 	stw	fp,8(sp)
 1000b90:	df000204 	addi	fp,sp,8
 1000b94:	e13ffe15 	stw	r4,-8(fp)
 1000b98:	e17fff15 	stw	r5,-4(fp)
 1000b9c:	e037883a 	mov	sp,fp
 1000ba0:	df000017 	ldw	fp,0(sp)
 1000ba4:	dec00104 	addi	sp,sp,4
 1000ba8:	f800283a 	ret

01000bac <_ZNSaISt10_List_nodeIP8os_eventEEC2ERKS3_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
 1000bac:	defffc04 	addi	sp,sp,-16
 1000bb0:	dfc00315 	stw	ra,12(sp)
 1000bb4:	df000215 	stw	fp,8(sp)
 1000bb8:	df000204 	addi	fp,sp,8
 1000bbc:	e13ffe15 	stw	r4,-8(fp)
 1000bc0:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
 1000bc4:	e13ffe17 	ldw	r4,-8(fp)
 1000bc8:	e17fff17 	ldw	r5,-4(fp)
 1000bcc:	1000b880 	call	1000b88 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEEC2ERKS5_>
 1000bd0:	e037883a 	mov	sp,fp
 1000bd4:	dfc00117 	ldw	ra,4(sp)
 1000bd8:	df000017 	ldw	fp,0(sp)
 1000bdc:	dec00204 	addi	sp,sp,8
 1000be0:	f800283a 	ret

01000be4 <_ZNSt10_List_baseIP8os_eventSaIS1_EE10_List_implC1ERKSaISt10_List_nodeIS1_EE>:
      struct _List_impl 
      : public _Node_alloc_type
      {
	_List_node_base _M_node;

	_List_impl(const _Node_alloc_type& __a)
 1000be4:	defffc04 	addi	sp,sp,-16
 1000be8:	dfc00315 	stw	ra,12(sp)
 1000bec:	df000215 	stw	fp,8(sp)
 1000bf0:	df000204 	addi	fp,sp,8
 1000bf4:	e13ffe15 	stw	r4,-8(fp)
 1000bf8:	e17fff15 	stw	r5,-4(fp)
	: _Node_alloc_type(__a), _M_node()
 1000bfc:	e13ffe17 	ldw	r4,-8(fp)
 1000c00:	e17fff17 	ldw	r5,-4(fp)
 1000c04:	1000bac0 	call	1000bac <_ZNSaISt10_List_nodeIP8os_eventEEC2ERKS3_>
 1000c08:	e13ffe17 	ldw	r4,-8(fp)
 1000c0c:	0005883a 	mov	r2,zero
 1000c10:	0007883a 	mov	r3,zero
 1000c14:	20800015 	stw	r2,0(r4)
 1000c18:	20c00115 	stw	r3,4(r4)
	{ }
 1000c1c:	e037883a 	mov	sp,fp
 1000c20:	dfc00117 	ldw	ra,4(sp)
 1000c24:	df000017 	ldw	fp,0(sp)
 1000c28:	dec00204 	addi	sp,sp,8
 1000c2c:	f800283a 	ret

01000c30 <_ZNSt10_List_baseIP8os_eventSaIS1_EEC2ERKS2_>:

      allocator_type
      get_allocator() const
      { return _M_get_Tp_allocator(); }

      _List_base(const allocator_type& __a)
 1000c30:	defffa04 	addi	sp,sp,-24
 1000c34:	dfc00515 	stw	ra,20(sp)
 1000c38:	df000415 	stw	fp,16(sp)
 1000c3c:	dc000315 	stw	r16,12(sp)
 1000c40:	df000304 	addi	fp,sp,12
 1000c44:	e13ffe15 	stw	r4,-8(fp)
 1000c48:	e17fff15 	stw	r5,-4(fp)
      : _M_impl(__a)
 1000c4c:	e43ffe17 	ldw	r16,-8(fp)
 1000c50:	e13ffd04 	addi	r4,fp,-12
 1000c54:	e17fff17 	ldw	r5,-4(fp)
 1000c58:	1000a7c0 	call	1000a7c <_ZNSaISt10_List_nodeIP8os_eventEEC1IS1_EERKSaIT_E>
 1000c5c:	8009883a 	mov	r4,r16
 1000c60:	e17ffd04 	addi	r5,fp,-12
 1000c64:	1000be40 	call	1000be4 <_ZNSt10_List_baseIP8os_eventSaIS1_EE10_List_implC1ERKSaISt10_List_nodeIS1_EE>
 1000c68:	e13ffd04 	addi	r4,fp,-12
 1000c6c:	10009640 	call	1000964 <_ZNSaISt10_List_nodeIP8os_eventEED1Ev>
      { _M_init(); }
 1000c70:	e13ffe17 	ldw	r4,-8(fp)
 1000c74:	10008ac0 	call	10008ac <_ZNSt10_List_baseIP8os_eventSaIS1_EE7_M_initEv>
 1000c78:	e037883a 	mov	sp,fp
 1000c7c:	dfc00217 	ldw	ra,8(sp)
 1000c80:	df000117 	ldw	fp,4(sp)
 1000c84:	dc000017 	ldw	r16,0(sp)
 1000c88:	dec00304 	addi	sp,sp,12
 1000c8c:	f800283a 	ret

01000c90 <_ZNSt4listIP8os_eventSaIS1_EEC1ERKS2_>:
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      explicit
      list(const allocator_type& __a = allocator_type())
 1000c90:	defffc04 	addi	sp,sp,-16
 1000c94:	dfc00315 	stw	ra,12(sp)
 1000c98:	df000215 	stw	fp,8(sp)
 1000c9c:	df000204 	addi	fp,sp,8
 1000ca0:	e13ffe15 	stw	r4,-8(fp)
 1000ca4:	e17fff15 	stw	r5,-4(fp)
      : _Base(__a) { }
 1000ca8:	e13ffe17 	ldw	r4,-8(fp)
 1000cac:	e17fff17 	ldw	r5,-4(fp)
 1000cb0:	1000c300 	call	1000c30 <_ZNSt10_List_baseIP8os_eventSaIS1_EEC2ERKS2_>
 1000cb4:	e037883a 	mov	sp,fp
 1000cb8:	dfc00117 	ldw	ra,4(sp)
 1000cbc:	df000017 	ldw	fp,0(sp)
 1000cc0:	dec00204 	addi	sp,sp,8
 1000cc4:	f800283a 	ret

01000cc8 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw() 
 1000cc8:	defffe04 	addi	sp,sp,-8
 1000ccc:	df000115 	stw	fp,4(sp)
 1000cd0:	df000104 	addi	fp,sp,4
 1000cd4:	e13fff15 	stw	r4,-4(fp)
      { return size_t(-1) / sizeof(_Tp); }
 1000cd8:	00855574 	movhi	r2,5461
 1000cdc:	10955544 	addi	r2,r2,21845
 1000ce0:	e037883a 	mov	sp,fp
 1000ce4:	df000017 	ldw	fp,0(sp)
 1000ce8:	dec00104 	addi	sp,sp,4
 1000cec:	f800283a 	ret

01000cf0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE10deallocateEPS4_m>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 1000cf0:	defffb04 	addi	sp,sp,-20
 1000cf4:	dfc00415 	stw	ra,16(sp)
 1000cf8:	df000315 	stw	fp,12(sp)
 1000cfc:	df000304 	addi	fp,sp,12
 1000d00:	e13ffd15 	stw	r4,-12(fp)
 1000d04:	e17ffe15 	stw	r5,-8(fp)
 1000d08:	e1bfff15 	stw	r6,-4(fp)
      { ::operator delete(__p); }
 1000d0c:	e13ffe17 	ldw	r4,-8(fp)
 1000d10:	1008a880 	call	1008a88 <_ZdlPv>
 1000d14:	e037883a 	mov	sp,fp
 1000d18:	dfc00117 	ldw	ra,4(sp)
 1000d1c:	df000017 	ldw	fp,0(sp)
 1000d20:	dec00204 	addi	sp,sp,8
 1000d24:	f800283a 	ret

01000d28 <_ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>:
      _List_node<_Tp>*
      _M_get_node()
      { return _M_impl._Node_alloc_type::allocate(1); }
      
      void
      _M_put_node(_List_node<_Tp>* __p)
 1000d28:	defffc04 	addi	sp,sp,-16
 1000d2c:	dfc00315 	stw	ra,12(sp)
 1000d30:	df000215 	stw	fp,8(sp)
 1000d34:	df000204 	addi	fp,sp,8
 1000d38:	e13ffe15 	stw	r4,-8(fp)
 1000d3c:	e17fff15 	stw	r5,-4(fp)
      { _M_impl._Node_alloc_type::deallocate(__p, 1); }
 1000d40:	e0bffe17 	ldw	r2,-8(fp)
 1000d44:	1009883a 	mov	r4,r2
 1000d48:	e17fff17 	ldw	r5,-4(fp)
 1000d4c:	01800044 	movi	r6,1
 1000d50:	1000cf00 	call	1000cf0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE10deallocateEPS4_m>
 1000d54:	e037883a 	mov	sp,fp
 1000d58:	dfc00117 	ldw	ra,4(sp)
 1000d5c:	df000017 	ldw	fp,0(sp)
 1000d60:	dec00204 	addi	sp,sp,8
 1000d64:	f800283a 	ret

01000d68 <_ZNSt4listIP8os_eventSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E>:
        __tmp->hook(__position._M_node);
      }

      // Erases element at position given.
      void
      _M_erase(iterator __position)
 1000d68:	defffa04 	addi	sp,sp,-24
 1000d6c:	dfc00515 	stw	ra,20(sp)
 1000d70:	df000415 	stw	fp,16(sp)
 1000d74:	df000404 	addi	fp,sp,16
 1000d78:	e13ffe15 	stw	r4,-8(fp)
 1000d7c:	e17fff15 	stw	r5,-4(fp)
      {
        __position._M_node->unhook();
 1000d80:	e13fff17 	ldw	r4,-4(fp)
 1000d84:	1002dc00 	call	1002dc0 <_ZNSt15_List_node_base6unhookEv>
        _Node* __n = static_cast<_Node*>(__position._M_node);
 1000d88:	e0bfff17 	ldw	r2,-4(fp)
 1000d8c:	e0bffc15 	stw	r2,-16(fp)
        _M_get_Tp_allocator().destroy(&__n->_M_data);
 1000d90:	e17ffe17 	ldw	r5,-8(fp)
 1000d94:	e13ffd04 	addi	r4,fp,-12
 1000d98:	1000ae40 	call	1000ae4 <_ZNKSt10_List_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>
 1000d9c:	e13ffd04 	addi	r4,fp,-12
 1000da0:	e0bffc17 	ldw	r2,-16(fp)
 1000da4:	11400204 	addi	r5,r2,8
 1000da8:	10009940 	call	1000994 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE7destroyEPS2_>
 1000dac:	e13ffd04 	addi	r4,fp,-12
 1000db0:	10007e00 	call	10007e0 <_ZNSaIP8os_eventED1Ev>
        _M_put_node(__n);
 1000db4:	e13ffe17 	ldw	r4,-8(fp)
 1000db8:	e17ffc17 	ldw	r5,-16(fp)
 1000dbc:	1000d280 	call	1000d28 <_ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>
 1000dc0:	e037883a 	mov	sp,fp
 1000dc4:	dfc00117 	ldw	ra,4(sp)
 1000dc8:	df000017 	ldw	fp,0(sp)
 1000dcc:	dec00204 	addi	sp,sp,8
 1000dd0:	f800283a 	ret

01000dd4 <_ZNSt4listIP8os_eventSaIS1_EE6removeERKS1_>:
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    remove(const value_type& __value)
 1000dd4:	defff904 	addi	sp,sp,-28
 1000dd8:	dfc00615 	stw	ra,24(sp)
 1000ddc:	df000515 	stw	fp,20(sp)
 1000de0:	df000504 	addi	fp,sp,20
 1000de4:	e13ffe15 	stw	r4,-8(fp)
 1000de8:	e17fff15 	stw	r5,-4(fp)
    {
      iterator __first = begin();
 1000dec:	e13ffe17 	ldw	r4,-8(fp)
 1000df0:	10009e80 	call	10009e8 <_ZNSt4listIP8os_eventSaIS1_EE5beginEv>
 1000df4:	e0bffb15 	stw	r2,-20(fp)
      iterator __last = end();
 1000df8:	e13ffe17 	ldw	r4,-8(fp)
 1000dfc:	1000a240 	call	1000a24 <_ZNSt4listIP8os_eventSaIS1_EE3endEv>
 1000e00:	e0bffc15 	stw	r2,-16(fp)
      while (__first != __last)
 1000e04:	00001206 	br	1000e50 <_ZNSt4listIP8os_eventSaIS1_EE6removeERKS1_+0x7c>
	{
	  iterator __next = __first;
 1000e08:	e0bffb17 	ldw	r2,-20(fp)
 1000e0c:	e0bffd15 	stw	r2,-12(fp)
	  ++__next;
 1000e10:	e13ffd04 	addi	r4,fp,-12
 1000e14:	10008480 	call	1000848 <_ZNSt14_List_iteratorIP8os_eventEppEv>
	  if (*__first == __value)
 1000e18:	e13ffb04 	addi	r4,fp,-20
 1000e1c:	10008800 	call	1000880 <_ZNKSt14_List_iteratorIP8os_eventEdeEv>
 1000e20:	10c00017 	ldw	r3,0(r2)
 1000e24:	e0bfff17 	ldw	r2,-4(fp)
 1000e28:	10800017 	ldw	r2,0(r2)
 1000e2c:	1885003a 	cmpeq	r2,r3,r2
 1000e30:	10803fcc 	andi	r2,r2,255
 1000e34:	1005003a 	cmpeq	r2,r2,zero
 1000e38:	1000031e 	bne	r2,zero,1000e48 <_ZNSt4listIP8os_eventSaIS1_EE6removeERKS1_+0x74>
	    _M_erase(__first);
 1000e3c:	e13ffe17 	ldw	r4,-8(fp)
 1000e40:	e17ffb17 	ldw	r5,-20(fp)
 1000e44:	1000d680 	call	1000d68 <_ZNSt4listIP8os_eventSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E>
	  __first = __next;
 1000e48:	e0bffd17 	ldw	r2,-12(fp)
 1000e4c:	e0bffb15 	stw	r2,-20(fp)
    list<_Tp, _Alloc>::
    remove(const value_type& __value)
    {
      iterator __first = begin();
      iterator __last = end();
      while (__first != __last)
 1000e50:	e17ffc04 	addi	r5,fp,-16
 1000e54:	e13ffb04 	addi	r4,fp,-20
 1000e58:	10008100 	call	1000810 <_ZNKSt14_List_iteratorIP8os_eventEneERKS2_>
 1000e5c:	10803fcc 	andi	r2,r2,255
 1000e60:	1004c03a 	cmpne	r2,r2,zero
 1000e64:	103fe81e 	bne	r2,zero,1000e08 <_ZNSt4listIP8os_eventSaIS1_EE6removeERKS1_+0x34>
	{
	  iterator __next = __first;
	  ++__next;
	  if (*__first == __value)
	    _M_erase(__first);
	  __first = __next;
 1000e68:	e037883a 	mov	sp,fp
 1000e6c:	dfc00117 	ldw	ra,4(sp)
 1000e70:	df000017 	ldw	fp,0(sp)
 1000e74:	dec00204 	addi	sp,sp,8
 1000e78:	f800283a 	ret

01000e7c <_ZNSt10_List_baseIP8os_eventSaIS1_EE8_M_clearEv>:
namespace _GLIBCXX_STD
{
  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
    _M_clear()
 1000e7c:	defffa04 	addi	sp,sp,-24
 1000e80:	dfc00515 	stw	ra,20(sp)
 1000e84:	df000415 	stw	fp,16(sp)
 1000e88:	df000404 	addi	fp,sp,16
 1000e8c:	e13fff15 	stw	r4,-4(fp)
    {
      typedef _List_node<_Tp>  _Node;
      _Node* __cur = static_cast<_Node*>(this->_M_impl._M_node._M_next);
 1000e90:	e0bfff17 	ldw	r2,-4(fp)
 1000e94:	10800017 	ldw	r2,0(r2)
 1000e98:	e0bffd15 	stw	r2,-12(fp)
      while (__cur != &this->_M_impl._M_node)
 1000e9c:	00001106 	br	1000ee4 <_ZNSt10_List_baseIP8os_eventSaIS1_EE8_M_clearEv+0x68>
	{
	  _Node* __tmp = __cur;
 1000ea0:	e0bffd17 	ldw	r2,-12(fp)
 1000ea4:	e0bffc15 	stw	r2,-16(fp)
	  __cur = static_cast<_Node*>(__cur->_M_next);
 1000ea8:	e0bffd17 	ldw	r2,-12(fp)
 1000eac:	10800017 	ldw	r2,0(r2)
 1000eb0:	e0bffd15 	stw	r2,-12(fp)
	  _M_get_Tp_allocator().destroy(&__tmp->_M_data);
 1000eb4:	e13ffe04 	addi	r4,fp,-8
 1000eb8:	e17fff17 	ldw	r5,-4(fp)
 1000ebc:	1000ae40 	call	1000ae4 <_ZNKSt10_List_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>
 1000ec0:	e13ffe04 	addi	r4,fp,-8
 1000ec4:	e0bffc17 	ldw	r2,-16(fp)
 1000ec8:	11400204 	addi	r5,r2,8
 1000ecc:	10009940 	call	1000994 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE7destroyEPS2_>
 1000ed0:	e13ffe04 	addi	r4,fp,-8
 1000ed4:	10007e00 	call	10007e0 <_ZNSaIP8os_eventED1Ev>
	  _M_put_node(__tmp);
 1000ed8:	e13fff17 	ldw	r4,-4(fp)
 1000edc:	e17ffc17 	ldw	r5,-16(fp)
 1000ee0:	1000d280 	call	1000d28 <_ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>
    _List_base<_Tp, _Alloc>::
    _M_clear()
    {
      typedef _List_node<_Tp>  _Node;
      _Node* __cur = static_cast<_Node*>(this->_M_impl._M_node._M_next);
      while (__cur != &this->_M_impl._M_node)
 1000ee4:	e0ffff17 	ldw	r3,-4(fp)
 1000ee8:	e0bffd17 	ldw	r2,-12(fp)
 1000eec:	18bfec1e 	bne	r3,r2,1000ea0 <_ZNSt10_List_baseIP8os_eventSaIS1_EE8_M_clearEv+0x24>
	{
	  _Node* __tmp = __cur;
	  __cur = static_cast<_Node*>(__cur->_M_next);
	  _M_get_Tp_allocator().destroy(&__tmp->_M_data);
	  _M_put_node(__tmp);
 1000ef0:	e037883a 	mov	sp,fp
 1000ef4:	dfc00117 	ldw	ra,4(sp)
 1000ef8:	df000017 	ldw	fp,0(sp)
 1000efc:	dec00204 	addi	sp,sp,8
 1000f00:	f800283a 	ret

01000f04 <_ZNSt10_List_baseIP8os_eventSaIS1_EED2Ev>:
      _List_base(const allocator_type& __a)
      : _M_impl(__a)
      { _M_init(); }

      // This is what actually destroys the list.
      ~_List_base()
 1000f04:	defffd04 	addi	sp,sp,-12
 1000f08:	dfc00215 	stw	ra,8(sp)
 1000f0c:	df000115 	stw	fp,4(sp)
 1000f10:	df000104 	addi	fp,sp,4
 1000f14:	e13fff15 	stw	r4,-4(fp)
      { _M_clear(); }
 1000f18:	e13fff17 	ldw	r4,-4(fp)
 1000f1c:	1000e7c0 	call	1000e7c <_ZNSt10_List_baseIP8os_eventSaIS1_EE8_M_clearEv>
 1000f20:	e13fff17 	ldw	r4,-4(fp)
 1000f24:	10009340 	call	1000934 <_ZNSt10_List_baseIP8os_eventSaIS1_EE10_List_implD1Ev>
 1000f28:	e037883a 	mov	sp,fp
 1000f2c:	dfc00117 	ldw	ra,4(sp)
 1000f30:	df000017 	ldw	fp,0(sp)
 1000f34:	dec00204 	addi	sp,sp,8
 1000f38:	f800283a 	ret

01000f3c <_ZNSt4listIP8os_eventSaIS1_EED1Ev>:
   *  iterator's next/previous pointers refer to itself, the %list is
   *  %empty.  @endif
  */
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class list : protected _List_base<_Tp, _Alloc>
    {
 1000f3c:	defffd04 	addi	sp,sp,-12
 1000f40:	dfc00215 	stw	ra,8(sp)
 1000f44:	df000115 	stw	fp,4(sp)
 1000f48:	df000104 	addi	fp,sp,4
 1000f4c:	e13fff15 	stw	r4,-4(fp)
 1000f50:	e13fff17 	ldw	r4,-4(fp)
 1000f54:	1000f040 	call	1000f04 <_ZNSt10_List_baseIP8os_eventSaIS1_EED2Ev>
 1000f58:	e037883a 	mov	sp,fp
 1000f5c:	dfc00117 	ldw	ra,4(sp)
 1000f60:	df000017 	ldw	fp,0(sp)
 1000f64:	dec00204 	addi	sp,sp,8
 1000f68:	f800283a 	ret

01000f6c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8allocateEmPKv>:
      address(const_reference __x) const { return &__x; }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
 1000f6c:	defffb04 	addi	sp,sp,-20
 1000f70:	dfc00415 	stw	ra,16(sp)
 1000f74:	df000315 	stw	fp,12(sp)
 1000f78:	df000304 	addi	fp,sp,12
 1000f7c:	e13ffd15 	stw	r4,-12(fp)
 1000f80:	e17ffe15 	stw	r5,-8(fp)
 1000f84:	e1bfff15 	stw	r6,-4(fp)
      { 
	if (__builtin_expect(__n > this->max_size(), false))
 1000f88:	e13ffd17 	ldw	r4,-12(fp)
 1000f8c:	1000cc80 	call	1000cc8 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8max_sizeEv>
 1000f90:	1007883a 	mov	r3,r2
 1000f94:	e0bffe17 	ldw	r2,-8(fp)
 1000f98:	1885803a 	cmpltu	r2,r3,r2
 1000f9c:	1004c03a 	cmpne	r2,r2,zero
 1000fa0:	10803fcc 	andi	r2,r2,255
 1000fa4:	1005003a 	cmpeq	r2,r2,zero
 1000fa8:	1000011e 	bne	r2,zero,1000fb0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8allocateEmPKv+0x44>
	  std::__throw_bad_alloc();
 1000fac:	10017540 	call	1001754 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 1000fb0:	e0bffe17 	ldw	r2,-8(fp)
 1000fb4:	11000324 	muli	r4,r2,12
 1000fb8:	10090180 	call	1009018 <_Znwm>
 1000fbc:	e037883a 	mov	sp,fp
 1000fc0:	dfc00117 	ldw	ra,4(sp)
 1000fc4:	df000017 	ldw	fp,0(sp)
 1000fc8:	dec00204 	addi	sp,sp,8
 1000fcc:	f800283a 	ret

01000fd0 <_ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_get_nodeEv>:
      };

      _List_impl _M_impl;

      _List_node<_Tp>*
      _M_get_node()
 1000fd0:	defffd04 	addi	sp,sp,-12
 1000fd4:	dfc00215 	stw	ra,8(sp)
 1000fd8:	df000115 	stw	fp,4(sp)
 1000fdc:	df000104 	addi	fp,sp,4
 1000fe0:	e13fff15 	stw	r4,-4(fp)
      { return _M_impl._Node_alloc_type::allocate(1); }
 1000fe4:	e0bfff17 	ldw	r2,-4(fp)
 1000fe8:	1009883a 	mov	r4,r2
 1000fec:	01400044 	movi	r5,1
 1000ff0:	000d883a 	mov	r6,zero
 1000ff4:	1000f6c0 	call	1000f6c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8allocateEmPKv>
 1000ff8:	e037883a 	mov	sp,fp
 1000ffc:	dfc00117 	ldw	ra,4(sp)
 1001000:	df000017 	ldw	fp,0(sp)
 1001004:	dec00204 	addi	sp,sp,8
 1001008:	f800283a 	ret

0100100c <_ZNSt4listIP8os_eventSaIS1_EE14_M_create_nodeERKS1_>:
       *
       *  Allocates space for a new node and constructs a copy of @a x in it.
       *  @endif
       */
      _Node*
      _M_create_node(const value_type& __x)
 100100c:	defffa04 	addi	sp,sp,-24
 1001010:	dfc00515 	stw	ra,20(sp)
 1001014:	df000415 	stw	fp,16(sp)
 1001018:	df000404 	addi	fp,sp,16
 100101c:	e13ffe15 	stw	r4,-8(fp)
 1001020:	e17fff15 	stw	r5,-4(fp)
      {
	_Node* __p = this->_M_get_node();
 1001024:	e13ffe17 	ldw	r4,-8(fp)
 1001028:	1000fd00 	call	1000fd0 <_ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_get_nodeEv>
 100102c:	e0bffc15 	stw	r2,-16(fp)
	try
	  {
	    _M_get_Tp_allocator().construct(&__p->_M_data, __x);
 1001030:	e17ffe17 	ldw	r5,-8(fp)
 1001034:	e13ffd04 	addi	r4,fp,-12
 1001038:	1000ae40 	call	1000ae4 <_ZNKSt10_List_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>
 100103c:	e13ffd04 	addi	r4,fp,-12
 1001040:	e0bffc17 	ldw	r2,-16(fp)
 1001044:	11400204 	addi	r5,r2,8
 1001048:	e1bfff17 	ldw	r6,-4(fp)
 100104c:	1000b2c0 	call	1000b2c <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_>
 1001050:	e13ffd04 	addi	r4,fp,-12
 1001054:	10007e00 	call	10007e0 <_ZNSaIP8os_eventED1Ev>
	catch(...)
	  {
	    _M_put_node(__p);
	    __throw_exception_again;
	  }
	return __p;
 1001058:	e0bffc17 	ldw	r2,-16(fp)
 100105c:	e037883a 	mov	sp,fp
 1001060:	dfc00117 	ldw	ra,4(sp)
 1001064:	df000017 	ldw	fp,0(sp)
 1001068:	dec00204 	addi	sp,sp,8
 100106c:	f800283a 	ret

01001070 <_ZNSt4listIP8os_eventSaIS1_EE9_M_insertESt14_List_iteratorIS1_ERKS1_>:
      _M_transfer(iterator __position, iterator __first, iterator __last)
      { __position._M_node->transfer(__first._M_node, __last._M_node); }

      // Inserts new element at position given and with value given.
      void
      _M_insert(iterator __position, const value_type& __x)
 1001070:	defffa04 	addi	sp,sp,-24
 1001074:	dfc00515 	stw	ra,20(sp)
 1001078:	df000415 	stw	fp,16(sp)
 100107c:	df000404 	addi	fp,sp,16
 1001080:	e13ffd15 	stw	r4,-12(fp)
 1001084:	e17ffe15 	stw	r5,-8(fp)
 1001088:	e1bfff15 	stw	r6,-4(fp)
      {
        _Node* __tmp = _M_create_node(__x);
 100108c:	e13ffd17 	ldw	r4,-12(fp)
 1001090:	e17fff17 	ldw	r5,-4(fp)
 1001094:	100100c0 	call	100100c <_ZNSt4listIP8os_eventSaIS1_EE14_M_create_nodeERKS1_>
 1001098:	e0bffc15 	stw	r2,-16(fp)
        __tmp->hook(__position._M_node);
 100109c:	e13ffc17 	ldw	r4,-16(fp)
 10010a0:	e17ffe17 	ldw	r5,-8(fp)
 10010a4:	1002da40 	call	1002da4 <_ZNSt15_List_node_base4hookEPS_>
 10010a8:	e037883a 	mov	sp,fp
 10010ac:	dfc00117 	ldw	ra,4(sp)
 10010b0:	df000017 	ldw	fp,0(sp)
 10010b4:	dec00204 	addi	sp,sp,8
 10010b8:	f800283a 	ret

010010bc <_ZNSt4listIP8os_eventSaIS1_EE9push_backERKS1_>:
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
 10010bc:	defffc04 	addi	sp,sp,-16
 10010c0:	dfc00315 	stw	ra,12(sp)
 10010c4:	df000215 	stw	fp,8(sp)
 10010c8:	df000204 	addi	fp,sp,8
 10010cc:	e13ffe15 	stw	r4,-8(fp)
 10010d0:	e17fff15 	stw	r5,-4(fp)
      { this->_M_insert(end(), __x); }
 10010d4:	e13ffe17 	ldw	r4,-8(fp)
 10010d8:	1000a240 	call	1000a24 <_ZNSt4listIP8os_eventSaIS1_EE3endEv>
 10010dc:	100b883a 	mov	r5,r2
 10010e0:	e13ffe17 	ldw	r4,-8(fp)
 10010e4:	e1bfff17 	ldw	r6,-4(fp)
 10010e8:	10010700 	call	1001070 <_ZNSt4listIP8os_eventSaIS1_EE9_M_insertESt14_List_iteratorIS1_ERKS1_>
 10010ec:	e037883a 	mov	sp,fp
 10010f0:	dfc00117 	ldw	ra,4(sp)
 10010f4:	df000017 	ldw	fp,0(sp)
 10010f8:	dec00204 	addi	sp,sp,8
 10010fc:	f800283a 	ret

01001100 <_ZN15InfraredHandler4initEv>:
InfraredHandler::~InfraredHandler() {}

// INITIALIZATION

/* A mock implemementation of InfraredHandler::init, for testing. */
Status InfraredHandler::init() {
 1001100:	defffe04 	addi	sp,sp,-8
 1001104:	df000115 	stw	fp,4(sp)
 1001108:	df000104 	addi	fp,sp,4
 100110c:	e13fff15 	stw	r4,-4(fp)
	return OK;
 1001110:	0005883a 	mov	r2,zero
}
 1001114:	e037883a 	mov	sp,fp
 1001118:	df000017 	ldw	fp,0(sp)
 100111c:	dec00104 	addi	sp,sp,4
 1001120:	f800283a 	ret

01001124 <_ZN15InfraredHandler4readEi>:
}

// RECEIVERS

/* A mock implementation of InfraredHandler::read, for testing. */
unsigned int InfraredHandler::read(int channel) {
 1001124:	defffd04 	addi	sp,sp,-12
 1001128:	df000215 	stw	fp,8(sp)
 100112c:	df000204 	addi	fp,sp,8
 1001130:	e13ffe15 	stw	r4,-8(fp)
 1001134:	e17fff15 	stw	r5,-4(fp)
	return 10;
 1001138:	00800284 	movi	r2,10
}
 100113c:	e037883a 	mov	sp,fp
 1001140:	df000017 	ldw	fp,0(sp)
 1001144:	dec00104 	addi	sp,sp,4
 1001148:	f800283a 	ret

0100114c <_ZN15InfraredHandler17onInfraredReceiveEj>:
/*
 * Posts the given infrared level readings to all listener queues.
 * @param level - the level read by the infrared receivers
 * @return OK if the readings are posted to all listener queues without error
 */
Status InfraredHandler::onInfraredReceive(unsigned int level) {
 100114c:	defff804 	addi	sp,sp,-32
 1001150:	dfc00715 	stw	ra,28(sp)
 1001154:	df000615 	stw	fp,24(sp)
 1001158:	df000604 	addi	fp,sp,24
 100115c:	e13ffe15 	stw	r4,-8(fp)
 1001160:	e17fff15 	stw	r5,-4(fp)
	Status overall = OK;
 1001164:	e03ffb15 	stw	zero,-20(fp)
	INT8U status;
	for (list<OS_EVENT *>::iterator it = listeners.begin(); it != listeners.end(); ++it) {
 1001168:	e0bffe17 	ldw	r2,-8(fp)
 100116c:	11000104 	addi	r4,r2,4
 1001170:	10009e80 	call	10009e8 <_ZNSt4listIP8os_eventSaIS1_EE5beginEv>
 1001174:	e0bffd15 	stw	r2,-12(fp)
 1001178:	00000d06 	br	10011b0 <_ZN15InfraredHandler17onInfraredReceiveEj+0x64>
		status = OSQPost(*it, (void*)level);
 100117c:	e13ffd04 	addi	r4,fp,-12
 1001180:	10008800 	call	1000880 <_ZNKSt14_List_iteratorIP8os_eventEdeEv>
 1001184:	11000017 	ldw	r4,0(r2)
 1001188:	e17fff17 	ldw	r5,-4(fp)
 100118c:	10191140 	call	1019114 <OSQPost>
 1001190:	e0bffa05 	stb	r2,-24(fp)
		if (status != OS_NO_ERR) overall = ERR_INFRARED;
 1001194:	e0bffa03 	ldbu	r2,-24(fp)
 1001198:	1005003a 	cmpeq	r2,r2,zero
 100119c:	1000021e 	bne	r2,zero,10011a8 <_ZN15InfraredHandler17onInfraredReceiveEj+0x5c>
 10011a0:	00800044 	movi	r2,1
 10011a4:	e0bffb15 	stw	r2,-20(fp)
 * @return OK if the readings are posted to all listener queues without error
 */
Status InfraredHandler::onInfraredReceive(unsigned int level) {
	Status overall = OK;
	INT8U status;
	for (list<OS_EVENT *>::iterator it = listeners.begin(); it != listeners.end(); ++it) {
 10011a8:	e13ffd04 	addi	r4,fp,-12
 10011ac:	10008480 	call	1000848 <_ZNSt14_List_iteratorIP8os_eventEppEv>
 10011b0:	e0bffe17 	ldw	r2,-8(fp)
 10011b4:	11000104 	addi	r4,r2,4
 10011b8:	1000a240 	call	1000a24 <_ZNSt4listIP8os_eventSaIS1_EE3endEv>
 10011bc:	e0bffc15 	stw	r2,-16(fp)
 10011c0:	e13ffd04 	addi	r4,fp,-12
 10011c4:	e17ffc04 	addi	r5,fp,-16
 10011c8:	10008100 	call	1000810 <_ZNKSt14_List_iteratorIP8os_eventEneERKS2_>
 10011cc:	10803fcc 	andi	r2,r2,255
 10011d0:	1004c03a 	cmpne	r2,r2,zero
 10011d4:	103fe91e 	bne	r2,zero,100117c <_ZN15InfraredHandler17onInfraredReceiveEj+0x30>
		status = OSQPost(*it, (void*)level);
		if (status != OS_NO_ERR) overall = ERR_INFRARED;
	} return overall;
 10011d8:	e0bffb17 	ldw	r2,-20(fp)
}
 10011dc:	e037883a 	mov	sp,fp
 10011e0:	dfc00117 	ldw	ra,4(sp)
 10011e4:	df000017 	ldw	fp,0(sp)
 10011e8:	dec00204 	addi	sp,sp,8
 10011ec:	f800283a 	ret

010011f0 <_ZN15InfraredHandler6updateEv>:

/*
 * Updates the infrared readings by checking all receivers.
 * @return OK if the infrared readings are accepted by all listeners
 */
Status InfraredHandler::update() {
 10011f0:	defffd04 	addi	sp,sp,-12
 10011f4:	dfc00215 	stw	ra,8(sp)
 10011f8:	df000115 	stw	fp,4(sp)
 10011fc:	df000104 	addi	fp,sp,4
 1001200:	e13fff15 	stw	r4,-4(fp)
	return onInfraredReceive(read(1));
 1001204:	e13fff17 	ldw	r4,-4(fp)
 1001208:	01400044 	movi	r5,1
 100120c:	10011240 	call	1001124 <_ZN15InfraredHandler4readEi>
 1001210:	100b883a 	mov	r5,r2
 1001214:	e13fff17 	ldw	r4,-4(fp)
 1001218:	100114c0 	call	100114c <_ZN15InfraredHandler17onInfraredReceiveEj>
}
 100121c:	e037883a 	mov	sp,fp
 1001220:	dfc00117 	ldw	ra,4(sp)
 1001224:	df000017 	ldw	fp,0(sp)
 1001228:	dec00204 	addi	sp,sp,8
 100122c:	f800283a 	ret

01001230 <_ZN15InfraredHandlerD0Ev>:
#include <stdio.h>
#include "InfraredHandler.h"

// ALLOCATION
InfraredHandler::InfraredHandler() {}
InfraredHandler::~InfraredHandler() {}
 1001230:	defffd04 	addi	sp,sp,-12
 1001234:	dfc00215 	stw	ra,8(sp)
 1001238:	df000115 	stw	fp,4(sp)
 100123c:	df000104 	addi	fp,sp,4
 1001240:	e13fff15 	stw	r4,-4(fp)
 1001244:	00c040b4 	movhi	r3,258
 1001248:	18fb8804 	addi	r3,r3,-4576
 100124c:	e0bfff17 	ldw	r2,-4(fp)
 1001250:	10c00015 	stw	r3,0(r2)
 1001254:	e13fff17 	ldw	r4,-4(fp)
 1001258:	10006b00 	call	10006b0 <_ZN10DataSourceD2Ev>
 100125c:	00800044 	movi	r2,1
 1001260:	10803fcc 	andi	r2,r2,255
 1001264:	1005003a 	cmpeq	r2,r2,zero
 1001268:	1000021e 	bne	r2,zero,1001274 <_ZN15InfraredHandlerD0Ev+0x44>
 100126c:	e13fff17 	ldw	r4,-4(fp)
 1001270:	1008a880 	call	1008a88 <_ZdlPv>
 1001274:	e037883a 	mov	sp,fp
 1001278:	dfc00117 	ldw	ra,4(sp)
 100127c:	df000017 	ldw	fp,0(sp)
 1001280:	dec00204 	addi	sp,sp,8
 1001284:	f800283a 	ret

01001288 <_ZN15InfraredHandlerD1Ev>:
 1001288:	defffd04 	addi	sp,sp,-12
 100128c:	dfc00215 	stw	ra,8(sp)
 1001290:	df000115 	stw	fp,4(sp)
 1001294:	df000104 	addi	fp,sp,4
 1001298:	e13fff15 	stw	r4,-4(fp)
 100129c:	00c040b4 	movhi	r3,258
 10012a0:	18fb8804 	addi	r3,r3,-4576
 10012a4:	e0bfff17 	ldw	r2,-4(fp)
 10012a8:	10c00015 	stw	r3,0(r2)
 10012ac:	e13fff17 	ldw	r4,-4(fp)
 10012b0:	10006b00 	call	10006b0 <_ZN10DataSourceD2Ev>
 10012b4:	0005883a 	mov	r2,zero
 10012b8:	10803fcc 	andi	r2,r2,255
 10012bc:	1005003a 	cmpeq	r2,r2,zero
 10012c0:	1000021e 	bne	r2,zero,10012cc <_ZN15InfraredHandlerD1Ev+0x44>
 10012c4:	e13fff17 	ldw	r4,-4(fp)
 10012c8:	1008a880 	call	1008a88 <_ZdlPv>
 10012cc:	e037883a 	mov	sp,fp
 10012d0:	dfc00117 	ldw	ra,4(sp)
 10012d4:	df000017 	ldw	fp,0(sp)
 10012d8:	dec00204 	addi	sp,sp,8
 10012dc:	f800283a 	ret

010012e0 <_ZN15InfraredHandlerD2Ev>:
 10012e0:	defffd04 	addi	sp,sp,-12
 10012e4:	dfc00215 	stw	ra,8(sp)
 10012e8:	df000115 	stw	fp,4(sp)
 10012ec:	df000104 	addi	fp,sp,4
 10012f0:	e13fff15 	stw	r4,-4(fp)
 10012f4:	00c040b4 	movhi	r3,258
 10012f8:	18fb8804 	addi	r3,r3,-4576
 10012fc:	e0bfff17 	ldw	r2,-4(fp)
 1001300:	10c00015 	stw	r3,0(r2)
 1001304:	e13fff17 	ldw	r4,-4(fp)
 1001308:	10006b00 	call	10006b0 <_ZN10DataSourceD2Ev>
 100130c:	0005883a 	mov	r2,zero
 1001310:	10803fcc 	andi	r2,r2,255
 1001314:	1005003a 	cmpeq	r2,r2,zero
 1001318:	1000021e 	bne	r2,zero,1001324 <_ZN15InfraredHandlerD2Ev+0x44>
 100131c:	e13fff17 	ldw	r4,-4(fp)
 1001320:	1008a880 	call	1008a88 <_ZdlPv>
 1001324:	e037883a 	mov	sp,fp
 1001328:	dfc00117 	ldw	ra,4(sp)
 100132c:	df000017 	ldw	fp,0(sp)
 1001330:	dec00204 	addi	sp,sp,8
 1001334:	f800283a 	ret

01001338 <_ZN15InfraredHandlerC1Ev>:

#include <stdio.h>
#include "InfraredHandler.h"

// ALLOCATION
InfraredHandler::InfraredHandler() {}
 1001338:	defffd04 	addi	sp,sp,-12
 100133c:	dfc00215 	stw	ra,8(sp)
 1001340:	df000115 	stw	fp,4(sp)
 1001344:	df000104 	addi	fp,sp,4
 1001348:	e13fff15 	stw	r4,-4(fp)
 100134c:	e13fff17 	ldw	r4,-4(fp)
 1001350:	10005580 	call	1000558 <_ZN10DataSourceC2Ev>
 1001354:	00c040b4 	movhi	r3,258
 1001358:	18fb8804 	addi	r3,r3,-4576
 100135c:	e0bfff17 	ldw	r2,-4(fp)
 1001360:	10c00015 	stw	r3,0(r2)
 1001364:	e037883a 	mov	sp,fp
 1001368:	dfc00117 	ldw	ra,4(sp)
 100136c:	df000017 	ldw	fp,0(sp)
 1001370:	dec00204 	addi	sp,sp,8
 1001374:	f800283a 	ret

01001378 <_ZN15InfraredHandlerC2Ev>:
 1001378:	defffd04 	addi	sp,sp,-12
 100137c:	dfc00215 	stw	ra,8(sp)
 1001380:	df000115 	stw	fp,4(sp)
 1001384:	df000104 	addi	fp,sp,4
 1001388:	e13fff15 	stw	r4,-4(fp)
 100138c:	e13fff17 	ldw	r4,-4(fp)
 1001390:	10005580 	call	1000558 <_ZN10DataSourceC2Ev>
 1001394:	00c040b4 	movhi	r3,258
 1001398:	18fb8804 	addi	r3,r3,-4576
 100139c:	e0bfff17 	ldw	r2,-4(fp)
 10013a0:	10c00015 	stw	r3,0(r2)
 10013a4:	e037883a 	mov	sp,fp
 10013a8:	dfc00117 	ldw	ra,4(sp)
 10013ac:	df000017 	ldw	fp,0(sp)
 10013b0:	dec00204 	addi	sp,sp,8
 10013b4:	f800283a 	ret

010013b8 <_Z18infrared_read_taskPv>:
#include "InfraredTasks.h"

extern InfraredHandler *infrared;

/* Polls the infrared handler for infrared updates. */
void infrared_read_task(void* pdata) {
 10013b8:	defffc04 	addi	sp,sp,-16
 10013bc:	dfc00315 	stw	ra,12(sp)
 10013c0:	df000215 	stw	fp,8(sp)
 10013c4:	df000204 	addi	fp,sp,8
 10013c8:	e13fff15 	stw	r4,-4(fp)
	int status = OK;
 10013cc:	e03ffe15 	stw	zero,-8(fp)
	while (status == OK) {
 10013d0:	00000a06 	br	10013fc <_Z18infrared_read_taskPv+0x44>
		// Update the infrared handler.
		status = infrared->update();
 10013d4:	008040b4 	movhi	r2,258
 10013d8:	108ba204 	addi	r2,r2,11912
 10013dc:	11000017 	ldw	r4,0(r2)
 10013e0:	10011f00 	call	10011f0 <_ZN15InfraredHandler6updateEv>
 10013e4:	e0bffe15 	stw	r2,-8(fp)
		// Wait for 500 ms.
		OSTimeDlyHMSM(0, 0, 0, 500);
 10013e8:	0009883a 	mov	r4,zero
 10013ec:	000b883a 	mov	r5,zero
 10013f0:	000d883a 	mov	r6,zero
 10013f4:	01c07d04 	movi	r7,500
 10013f8:	101bfd00 	call	101bfd0 <OSTimeDlyHMSM>
extern InfraredHandler *infrared;

/* Polls the infrared handler for infrared updates. */
void infrared_read_task(void* pdata) {
	int status = OK;
	while (status == OK) {
 10013fc:	e0bffe17 	ldw	r2,-8(fp)
 1001400:	1005003a 	cmpeq	r2,r2,zero
 1001404:	103ff31e 	bne	r2,zero,10013d4 <_Z18infrared_read_taskPv+0x1c>
		// Update the infrared handler.
		status = infrared->update();
		// Wait for 500 ms.
		OSTimeDlyHMSM(0, 0, 0, 500);
	}
}
 1001408:	e037883a 	mov	sp,fp
 100140c:	dfc00117 	ldw	ra,4(sp)
 1001410:	df000017 	ldw	fp,0(sp)
 1001414:	dec00204 	addi	sp,sp,8
 1001418:	f800283a 	ret

0100141c <_Z41__static_initialization_and_destruction_0ii>:
		// Start.
		OSStart();
	}

	return 0;
}
 100141c:	deffe204 	addi	sp,sp,-120
 1001420:	dfc01d15 	stw	ra,116(sp)
 1001424:	df001c15 	stw	fp,112(sp)
 1001428:	ddc01b15 	stw	r23,108(sp)
 100142c:	dd801a15 	stw	r22,104(sp)
 1001430:	dd401915 	stw	r21,100(sp)
 1001434:	dd001815 	stw	r20,96(sp)
 1001438:	dcc01715 	stw	r19,92(sp)
 100143c:	dc801615 	stw	r18,88(sp)
 1001440:	dc401515 	stw	r17,84(sp)
 1001444:	dc001415 	stw	r16,80(sp)
 1001448:	df001404 	addi	fp,sp,80
 100144c:	e13fec15 	stw	r4,-80(fp)
 1001450:	e17fed15 	stw	r5,-76(fp)
 1001454:	00804074 	movhi	r2,257
 1001458:	10a0ae04 	addi	r2,r2,-32072
 100145c:	e0bff415 	stw	r2,-48(fp)
 1001460:	008040b4 	movhi	r2,258
 1001464:	10bab604 	addi	r2,r2,-5416
 1001468:	e0bff515 	stw	r2,-44(fp)
 100146c:	e0bff604 	addi	r2,fp,-40
 1001470:	e0ffec04 	addi	r3,fp,-80
 1001474:	10c00015 	stw	r3,0(r2)
 1001478:	00c04034 	movhi	r3,256
 100147c:	18c54c04 	addi	r3,r3,5424
 1001480:	10c00115 	stw	r3,4(r2)
 1001484:	16c00215 	stw	sp,8(r2)
 1001488:	e13fee04 	addi	r4,fp,-72
 100148c:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1001490:	e0bfec17 	ldw	r2,-80(fp)
 1001494:	10800058 	cmpnei	r2,r2,1
 1001498:	1000351e 	bne	r2,zero,1001570 <_Z41__static_initialization_and_destruction_0ii+0x154>
 100149c:	e0ffed17 	ldw	r3,-76(fp)
 10014a0:	00bfffd4 	movui	r2,65535
 10014a4:	1880321e 	bne	r3,r2,1001570 <_Z41__static_initialization_and_destruction_0ii+0x154>
#include "includes.h"

#include "Tasks.h"

/* Command handler. */
CommandHandler *command = new CommandHandler();
 10014a8:	00bfffc4 	movi	r2,-1
 10014ac:	e0bfef15 	stw	r2,-68(fp)
 10014b0:	01000604 	movi	r4,24
 10014b4:	10090180 	call	1009018 <_Znwm>
 10014b8:	e0bffe15 	stw	r2,-8(fp)
 10014bc:	00800084 	movi	r2,2
 10014c0:	e0bfef15 	stw	r2,-68(fp)
 10014c4:	e13ffe17 	ldw	r4,-8(fp)
 10014c8:	10002380 	call	1000238 <_ZN14CommandHandlerC1Ev>
 10014cc:	e0bffe17 	ldw	r2,-8(fp)
 10014d0:	d0a70f15 	stw	r2,-25540(gp)
InfraredHandler *infrared = new InfraredHandler();
 10014d4:	00bfffc4 	movi	r2,-1
 10014d8:	e0bfef15 	stw	r2,-68(fp)
 10014dc:	01000404 	movi	r4,16
 10014e0:	10090180 	call	1009018 <_Znwm>
 10014e4:	e0bffd15 	stw	r2,-12(fp)
 10014e8:	00800044 	movi	r2,1
 10014ec:	e0bfef15 	stw	r2,-68(fp)
 10014f0:	e13ffd17 	ldw	r4,-12(fp)
 10014f4:	10013380 	call	1001338 <_ZN15InfraredHandlerC1Ev>
 10014f8:	00000a06 	br	1001524 <_Z41__static_initialization_and_destruction_0ii+0x108>
 10014fc:	e0ffff17 	ldw	r3,-4(fp)
 1001500:	e0fffc15 	stw	r3,-16(fp)
#include "includes.h"

#include "Tasks.h"

/* Command handler. */
CommandHandler *command = new CommandHandler();
 1001504:	e13ffe17 	ldw	r4,-8(fp)
 1001508:	1008a880 	call	1008a88 <_ZdlPv>
 100150c:	e0bffc17 	ldw	r2,-16(fp)
 1001510:	e0bfff15 	stw	r2,-4(fp)
 1001514:	00bfffc4 	movi	r2,-1
 1001518:	e0bfef15 	stw	r2,-68(fp)
 100151c:	e13fff17 	ldw	r4,-4(fp)
 1001520:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
InfraredHandler *infrared = new InfraredHandler();
 1001524:	e0fffd17 	ldw	r3,-12(fp)
 1001528:	d0e71015 	stw	r3,-25536(gp)
 100152c:	00001006 	br	1001570 <_Z41__static_initialization_and_destruction_0ii+0x154>
 1001530:	e7001404 	addi	fp,fp,80
 1001534:	e0bfef17 	ldw	r2,-68(fp)
 1001538:	e0fff017 	ldw	r3,-64(fp)
 100153c:	e0ffff15 	stw	r3,-4(fp)
 1001540:	10800060 	cmpeqi	r2,r2,1
 1001544:	103fed1e 	bne	r2,zero,10014fc <_Z41__static_initialization_and_destruction_0ii+0xe0>
 1001548:	e0bfff17 	ldw	r2,-4(fp)
 100154c:	e0bffb15 	stw	r2,-20(fp)
 1001550:	e13ffd17 	ldw	r4,-12(fp)
 1001554:	1008a880 	call	1008a88 <_ZdlPv>
 1001558:	e0fffb17 	ldw	r3,-20(fp)
 100155c:	e0ffff15 	stw	r3,-4(fp)
 1001560:	00bfffc4 	movi	r2,-1
 1001564:	e0bfef15 	stw	r2,-68(fp)
 1001568:	e13fff17 	ldw	r4,-4(fp)
 100156c:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1001570:	e13fee04 	addi	r4,fp,-72
 1001574:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
		// Start.
		OSStart();
	}

	return 0;
}
 1001578:	e037883a 	mov	sp,fp
 100157c:	dfc00917 	ldw	ra,36(sp)
 1001580:	df000817 	ldw	fp,32(sp)
 1001584:	ddc00717 	ldw	r23,28(sp)
 1001588:	dd800617 	ldw	r22,24(sp)
 100158c:	dd400517 	ldw	r21,20(sp)
 1001590:	dd000417 	ldw	r20,16(sp)
 1001594:	dcc00317 	ldw	r19,12(sp)
 1001598:	dc800217 	ldw	r18,8(sp)
 100159c:	dc400117 	ldw	r17,4(sp)
 10015a0:	dc000017 	ldw	r16,0(sp)
 10015a4:	dec00a04 	addi	sp,sp,40
 10015a8:	f800283a 	ret

010015ac <_GLOBAL__I_command_check_infrared_task_stk>:

 10015ac:	defffe04 	addi	sp,sp,-8
 10015b0:	dfc00115 	stw	ra,4(sp)
 10015b4:	df000015 	stw	fp,0(sp)
 10015b8:	d839883a 	mov	fp,sp
 10015bc:	01000044 	movi	r4,1
 10015c0:	017fffd4 	movui	r5,65535
 10015c4:	100141c0 	call	100141c <_Z41__static_initialization_and_destruction_0ii>
 10015c8:	e037883a 	mov	sp,fp
 10015cc:	dfc00117 	ldw	ra,4(sp)
 10015d0:	df000017 	ldw	fp,0(sp)
 10015d4:	dec00204 	addi	sp,sp,8
 10015d8:	f800283a 	ret

010015dc <main>:
/* Command handler. */
CommandHandler *command = new CommandHandler();
InfraredHandler *infrared = new InfraredHandler();

/* The main function creates the command and infrared tasks and starts multi-tasking */
int main(void) {
 10015dc:	defff704 	addi	sp,sp,-36
 10015e0:	dfc00815 	stw	ra,32(sp)
 10015e4:	df000715 	stw	fp,28(sp)
 10015e8:	dc000615 	stw	r16,24(sp)
 10015ec:	df000604 	addi	fp,sp,24
			INFRARED_READ_TASK_PRIORITY,
			INFRARED_READ_TASK_PRIORITY,
			infrared_read_task_stk,
			TASK_STACKSIZE,
			NULL,
			0);
 10015f0:	00800084 	movi	r2,2
 10015f4:	d8800015 	stw	r2,0(sp)
 10015f8:	008040b4 	movhi	r2,258
 10015fc:	1093cf04 	addi	r2,r2,20284
 1001600:	d8800115 	stw	r2,4(sp)
 1001604:	00820004 	movi	r2,2048
 1001608:	d8800215 	stw	r2,8(sp)
 100160c:	d8000315 	stw	zero,12(sp)
 1001610:	d8000415 	stw	zero,16(sp)
 1001614:	01004034 	movhi	r4,256
 1001618:	2104ee04 	addi	r4,r4,5048
 100161c:	000b883a 	mov	r5,zero
 1001620:	018040b4 	movhi	r6,258
 1001624:	319bce04 	addi	r6,r6,28472
 1001628:	01c00084 	movi	r7,2
 100162c:	101ab8c0 	call	101ab8c <OSTaskCreateExt>
			COMMAND_CHECK_INFRARED_TASK_PRIORITY,
			COMMAND_CHECK_INFRARED_TASK_PRIORITY,
			command_check_infrared_task_stk,
			TASK_STACKSIZE,
			0,
			0);
 1001630:	00800044 	movi	r2,1
 1001634:	d8800015 	stw	r2,0(sp)
 1001638:	008040b4 	movhi	r2,258
 100163c:	108bcf04 	addi	r2,r2,12092
 1001640:	d8800115 	stw	r2,4(sp)
 1001644:	00820004 	movi	r2,2048
 1001648:	d8800215 	stw	r2,8(sp)
 100164c:	d8000315 	stw	zero,12(sp)
 1001650:	d8000415 	stw	zero,16(sp)
 1001654:	01004034 	movhi	r4,256
 1001658:	21013304 	addi	r4,r4,1228
 100165c:	000b883a 	mov	r5,zero
 1001660:	018040b4 	movhi	r6,258
 1001664:	3193ce04 	addi	r6,r6,20280
 1001668:	01c00044 	movi	r7,1
 100166c:	101ab8c0 	call	101ab8c <OSTaskCreateExt>


	// Initialize the handlers.
	if ((command->init() == OK) && (infrared->init() == OK)) {
 1001670:	d1270f17 	ldw	r4,-25540(gp)
 1001674:	10003ac0 	call	10003ac <_ZN14CommandHandler4initEv>
 1001678:	1004c03a 	cmpne	r2,r2,zero
 100167c:	1000071e 	bne	r2,zero,100169c <main+0xc0>
 1001680:	d1271017 	ldw	r4,-25536(gp)
 1001684:	10011000 	call	1001100 <_ZN15InfraredHandler4initEv>
 1001688:	1004c03a 	cmpne	r2,r2,zero
 100168c:	1000031e 	bne	r2,zero,100169c <main+0xc0>
 1001690:	00800044 	movi	r2,1
 1001694:	e0bfff05 	stb	r2,-4(fp)
 1001698:	00000106 	br	10016a0 <main+0xc4>
 100169c:	e03fff05 	stb	zero,-4(fp)
 10016a0:	e0bfff03 	ldbu	r2,-4(fp)
 10016a4:	10803fcc 	andi	r2,r2,255
 10016a8:	1005003a 	cmpeq	r2,r2,zero
 10016ac:	1000081e 	bne	r2,zero,10016d0 <main+0xf4>

		// Create the communications chain.
		infrared->addListener(command->onInfraredReceive());
 10016b0:	d0a71017 	ldw	r2,-25536(gp)
 10016b4:	1021883a 	mov	r16,r2
 10016b8:	d1270f17 	ldw	r4,-25540(gp)
 10016bc:	10002680 	call	1000268 <_ZN14CommandHandler17onInfraredReceiveEv>
 10016c0:	100b883a 	mov	r5,r2
 10016c4:	8009883a 	mov	r4,r16
 10016c8:	100070c0 	call	100070c <_ZN10DataSource11addListenerEP8os_event>

		// Start.
		OSStart();
 10016cc:	1014db80 	call	1014db8 <OSStart>
	}

	return 0;
 10016d0:	0005883a 	mov	r2,zero
}
 10016d4:	e037883a 	mov	sp,fp
 10016d8:	dfc00217 	ldw	ra,8(sp)
 10016dc:	df000117 	ldw	fp,4(sp)
 10016e0:	dc000017 	ldw	r16,0(sp)
 10016e4:	dec00304 	addi	sp,sp,12
 10016e8:	f800283a 	ret

010016ec <_ZSt18__throw_bad_typeidv>:
 10016ec:	deffff04 	addi	sp,sp,-4
 10016f0:	01000104 	movi	r4,4
 10016f4:	dfc00015 	stw	ra,0(sp)
 10016f8:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 10016fc:	1009883a 	mov	r4,r2
 1001700:	008040b4 	movhi	r2,258
 1001704:	10bca804 	addi	r2,r2,-3424
 1001708:	20800015 	stw	r2,0(r4)
 100170c:	014040b4 	movhi	r5,258
 1001710:	297caf04 	addi	r5,r5,-3396
 1001714:	01804074 	movhi	r6,257
 1001718:	31a30404 	addi	r6,r6,-29680
 100171c:	1008b080 	call	1008b08 <__cxa_throw>

01001720 <_ZSt16__throw_bad_castv>:
 1001720:	deffff04 	addi	sp,sp,-4
 1001724:	01000104 	movi	r4,4
 1001728:	dfc00015 	stw	ra,0(sp)
 100172c:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 1001730:	1009883a 	mov	r4,r2
 1001734:	008040b4 	movhi	r2,258
 1001738:	10bcd804 	addi	r2,r2,-3232
 100173c:	20800015 	stw	r2,0(r4)
 1001740:	014040b4 	movhi	r5,258
 1001744:	297cde04 	addi	r5,r5,-3208
 1001748:	01804074 	movhi	r6,257
 100174c:	31a3fe04 	addi	r6,r6,-28680
 1001750:	1008b080 	call	1008b08 <__cxa_throw>

01001754 <_ZSt17__throw_bad_allocv>:
 1001754:	deffff04 	addi	sp,sp,-4
 1001758:	01000104 	movi	r4,4
 100175c:	dfc00015 	stw	ra,0(sp)
 1001760:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 1001764:	1009883a 	mov	r4,r2
 1001768:	008040b4 	movhi	r2,258
 100176c:	10bc8504 	addi	r2,r2,-3564
 1001770:	20800015 	stw	r2,0(r4)
 1001774:	014040b4 	movhi	r5,258
 1001778:	297c8c04 	addi	r5,r5,-3536
 100177c:	01804034 	movhi	r6,256
 1001780:	319e7404 	addi	r6,r6,31184
 1001784:	1008b080 	call	1008b08 <__cxa_throw>

01001788 <_ZSt21__throw_bad_exceptionv>:
 1001788:	deffff04 	addi	sp,sp,-4
 100178c:	01000104 	movi	r4,4
 1001790:	dfc00015 	stw	ra,0(sp)
 1001794:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 1001798:	1009883a 	mov	r4,r2
 100179c:	008040b4 	movhi	r2,258
 10017a0:	10bc6f04 	addi	r2,r2,-3652
 10017a4:	20800015 	stw	r2,0(r4)
 10017a8:	014040b4 	movhi	r5,258
 10017ac:	297c7c04 	addi	r5,r5,-3600
 10017b0:	01804034 	movhi	r6,256
 10017b4:	319e5c04 	addi	r6,r6,31088
 10017b8:	1008b080 	call	1008b08 <__cxa_throw>

010017bc <_ZSt19__throw_ios_failurePKc>:
 10017bc:	deffeb04 	addi	sp,sp,-84
 10017c0:	00804074 	movhi	r2,257
 10017c4:	10a0ae04 	addi	r2,r2,-32072
 10017c8:	d8800815 	stw	r2,32(sp)
 10017cc:	00c040b4 	movhi	r3,258
 10017d0:	18fab804 	addi	r3,r3,-5408
 10017d4:	00804034 	movhi	r2,256
 10017d8:	10862604 	addi	r2,r2,6296
 10017dc:	d9001115 	stw	r4,68(sp)
 10017e0:	d9000204 	addi	r4,sp,8
 10017e4:	d8800b15 	stw	r2,44(sp)
 10017e8:	dfc01415 	stw	ra,80(sp)
 10017ec:	df001315 	stw	fp,76(sp)
 10017f0:	ddc01215 	stw	r23,72(sp)
 10017f4:	d8c00915 	stw	r3,36(sp)
 10017f8:	dec00a15 	stw	sp,40(sp)
 10017fc:	dec00c15 	stw	sp,48(sp)
 1001800:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1001804:	00800084 	movi	r2,2
 1001808:	d8800315 	stw	r2,12(sp)
 100180c:	d9401117 	ldw	r5,68(sp)
 1001810:	d9000104 	addi	r4,sp,4
 1001814:	d9800044 	addi	r6,sp,1
 1001818:	10055d00 	call	10055d0 <_ZNSsC1EPKcRKSaIcE>
 100181c:	01000204 	movi	r4,8
 1001820:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 1001824:	1009883a 	mov	r4,r2
 1001828:	d9400104 	addi	r5,sp,4
 100182c:	d8801015 	stw	r2,64(sp)
 1001830:	10029bc0 	call	10029bc <_ZNSt8ios_base7failureC1ERKSs>
 1001834:	d8800117 	ldw	r2,4(sp)
 1001838:	00c040b4 	movhi	r3,258
 100183c:	18dbcf04 	addi	r3,r3,28476
 1001840:	10bffd04 	addi	r2,r2,-12
 1001844:	d8800f15 	stw	r2,60(sp)
 1001848:	10c0081e 	bne	r2,r3,100186c <_ZSt19__throw_ios_failurePKc+0xb0>
 100184c:	d9001017 	ldw	r4,64(sp)
 1001850:	00bfffc4 	movi	r2,-1
 1001854:	014040b4 	movhi	r5,258
 1001858:	297bf804 	addi	r5,r5,-4128
 100185c:	01804034 	movhi	r6,256
 1001860:	318a2e04 	addi	r6,r6,10424
 1001864:	d8800315 	stw	r2,12(sp)
 1001868:	1008b080 	call	1008b08 <__cxa_throw>
 100186c:	00800044 	movi	r2,1
 1001870:	d8800315 	stw	r2,12(sp)
 1001874:	d8800f17 	ldw	r2,60(sp)
 1001878:	017fffc4 	movi	r5,-1
 100187c:	11000204 	addi	r4,r2,8
 1001880:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001884:	00bff116 	blt	zero,r2,100184c <_ZSt19__throw_ios_failurePKc+0x90>
 1001888:	d9000f17 	ldw	r4,60(sp)
 100188c:	d80b883a 	mov	r5,sp
 1001890:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001894:	003fed06 	br	100184c <_ZSt19__throw_ios_failurePKc+0x90>
 1001898:	d8c00317 	ldw	r3,12(sp)
 100189c:	00800044 	movi	r2,1
 10018a0:	d9000417 	ldw	r4,16(sp)
 10018a4:	d9400517 	ldw	r5,20(sp)
 10018a8:	18800226 	beq	r3,r2,10018b4 <_ZSt19__throw_ios_failurePKc+0xf8>
 10018ac:	00bfffc4 	movi	r2,-1
 10018b0:	28800326 	beq	r5,r2,10018c0 <_ZSt19__throw_ios_failurePKc+0x104>
 10018b4:	00bfffc4 	movi	r2,-1
 10018b8:	d8800315 	stw	r2,12(sp)
 10018bc:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 10018c0:	10088640 	call	1008864 <_ZSt9terminatev>

010018c4 <_ZSt19__throw_logic_errorPKc>:
 10018c4:	deffe704 	addi	sp,sp,-100
 10018c8:	00804074 	movhi	r2,257
 10018cc:	10a0ae04 	addi	r2,r2,-32072
 10018d0:	d8800815 	stw	r2,32(sp)
 10018d4:	00c040b4 	movhi	r3,258
 10018d8:	18fabd04 	addi	r3,r3,-5388
 10018dc:	00804034 	movhi	r2,256
 10018e0:	10866c04 	addi	r2,r2,6576
 10018e4:	d9001315 	stw	r4,76(sp)
 10018e8:	d9000204 	addi	r4,sp,8
 10018ec:	d8800b15 	stw	r2,44(sp)
 10018f0:	dfc01815 	stw	ra,96(sp)
 10018f4:	df001715 	stw	fp,92(sp)
 10018f8:	ddc01615 	stw	r23,88(sp)
 10018fc:	d8c00915 	stw	r3,36(sp)
 1001900:	dec00a15 	stw	sp,40(sp)
 1001904:	dec00c15 	stw	sp,48(sp)
 1001908:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 100190c:	00800104 	movi	r2,4
 1001910:	d8800315 	stw	r2,12(sp)
 1001914:	d885883a 	add	r2,sp,r2
 1001918:	d8801415 	stw	r2,80(sp)
 100191c:	d9401317 	ldw	r5,76(sp)
 1001920:	1009883a 	mov	r4,r2
 1001924:	d9800084 	addi	r6,sp,2
 1001928:	10055d00 	call	10055d0 <_ZNSsC1EPKcRKSaIcE>
 100192c:	01000204 	movi	r4,8
 1001930:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 1001934:	d8801215 	stw	r2,72(sp)
 1001938:	008000c4 	movi	r2,3
 100193c:	d8800315 	stw	r2,12(sp)
 1001940:	d9401417 	ldw	r5,80(sp)
 1001944:	d9001217 	ldw	r4,72(sp)
 1001948:	10031640 	call	1003164 <_ZNSt11logic_errorC1ERKSs>
 100194c:	d8800117 	ldw	r2,4(sp)
 1001950:	00c040b4 	movhi	r3,258
 1001954:	18dbcf04 	addi	r3,r3,28476
 1001958:	10bffd04 	addi	r2,r2,-12
 100195c:	d8800f15 	stw	r2,60(sp)
 1001960:	10c0081e 	bne	r2,r3,1001984 <_ZSt19__throw_logic_errorPKc+0xc0>
 1001964:	d9001217 	ldw	r4,72(sp)
 1001968:	00bfffc4 	movi	r2,-1
 100196c:	014040b4 	movhi	r5,258
 1001970:	297c1104 	addi	r5,r5,-4028
 1001974:	01804034 	movhi	r6,256
 1001978:	318ba404 	addi	r6,r6,11920
 100197c:	d8800315 	stw	r2,12(sp)
 1001980:	1008b080 	call	1008b08 <__cxa_throw>
 1001984:	00800044 	movi	r2,1
 1001988:	d8800315 	stw	r2,12(sp)
 100198c:	d8800f17 	ldw	r2,60(sp)
 1001990:	017fffc4 	movi	r5,-1
 1001994:	11000204 	addi	r4,r2,8
 1001998:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100199c:	00bff116 	blt	zero,r2,1001964 <_ZSt19__throw_logic_errorPKc+0xa0>
 10019a0:	d9000f17 	ldw	r4,60(sp)
 10019a4:	d80b883a 	mov	r5,sp
 10019a8:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10019ac:	003fed06 	br	1001964 <_ZSt19__throw_logic_errorPKc+0xa0>
 10019b0:	d8800417 	ldw	r2,16(sp)
 10019b4:	d8c00317 	ldw	r3,12(sp)
 10019b8:	d9000517 	ldw	r4,20(sp)
 10019bc:	d8801515 	stw	r2,84(sp)
 10019c0:	00800044 	movi	r2,1
 10019c4:	18800426 	beq	r3,r2,10019d8 <_ZSt19__throw_logic_errorPKc+0x114>
 10019c8:	00800084 	movi	r2,2
 10019cc:	18800826 	beq	r3,r2,10019f0 <_ZSt19__throw_logic_errorPKc+0x12c>
 10019d0:	008000c4 	movi	r2,3
 10019d4:	18800226 	beq	r3,r2,10019e0 <_ZSt19__throw_logic_errorPKc+0x11c>
 10019d8:	00bfffc4 	movi	r2,-1
 10019dc:	20801126 	beq	r4,r2,1001a24 <_ZSt19__throw_logic_errorPKc+0x160>
 10019e0:	d9001517 	ldw	r4,84(sp)
 10019e4:	00bfffc4 	movi	r2,-1
 10019e8:	d8800315 	stw	r2,12(sp)
 10019ec:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 10019f0:	d9001217 	ldw	r4,72(sp)
 10019f4:	1008e500 	call	1008e50 <__cxa_free_exception>
 10019f8:	d8801517 	ldw	r2,84(sp)
 10019fc:	00c040b4 	movhi	r3,258
 1001a00:	18dbcf04 	addi	r3,r3,28476
 1001a04:	d8801115 	stw	r2,68(sp)
 1001a08:	d8800117 	ldw	r2,4(sp)
 1001a0c:	10bffd04 	addi	r2,r2,-12
 1001a10:	d8801015 	stw	r2,64(sp)
 1001a14:	10c0041e 	bne	r2,r3,1001a28 <_ZSt19__throw_logic_errorPKc+0x164>
 1001a18:	d8801117 	ldw	r2,68(sp)
 1001a1c:	d8801515 	stw	r2,84(sp)
 1001a20:	003fef06 	br	10019e0 <_ZSt19__throw_logic_errorPKc+0x11c>
 1001a24:	10088640 	call	1008864 <_ZSt9terminatev>
 1001a28:	00800084 	movi	r2,2
 1001a2c:	d8800315 	stw	r2,12(sp)
 1001a30:	d8801017 	ldw	r2,64(sp)
 1001a34:	017fffc4 	movi	r5,-1
 1001a38:	11000204 	addi	r4,r2,8
 1001a3c:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001a40:	00bff516 	blt	zero,r2,1001a18 <_ZSt19__throw_logic_errorPKc+0x154>
 1001a44:	d9001017 	ldw	r4,64(sp)
 1001a48:	d9400044 	addi	r5,sp,1
 1001a4c:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001a50:	003ff106 	br	1001a18 <_ZSt19__throw_logic_errorPKc+0x154>

01001a54 <_ZSt23__throw_underflow_errorPKc>:
 1001a54:	deffe704 	addi	sp,sp,-100
 1001a58:	00804074 	movhi	r2,257
 1001a5c:	10a0ae04 	addi	r2,r2,-32072
 1001a60:	d8800815 	stw	r2,32(sp)
 1001a64:	00c040b4 	movhi	r3,258
 1001a68:	18fac304 	addi	r3,r3,-5364
 1001a6c:	00804034 	movhi	r2,256
 1001a70:	1086d004 	addi	r2,r2,6976
 1001a74:	d9001315 	stw	r4,76(sp)
 1001a78:	d9000204 	addi	r4,sp,8
 1001a7c:	d8800b15 	stw	r2,44(sp)
 1001a80:	dfc01815 	stw	ra,96(sp)
 1001a84:	df001715 	stw	fp,92(sp)
 1001a88:	ddc01615 	stw	r23,88(sp)
 1001a8c:	d8c00915 	stw	r3,36(sp)
 1001a90:	dec00a15 	stw	sp,40(sp)
 1001a94:	dec00c15 	stw	sp,48(sp)
 1001a98:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1001a9c:	00800104 	movi	r2,4
 1001aa0:	d8800315 	stw	r2,12(sp)
 1001aa4:	d885883a 	add	r2,sp,r2
 1001aa8:	d8801415 	stw	r2,80(sp)
 1001aac:	d9401317 	ldw	r5,76(sp)
 1001ab0:	1009883a 	mov	r4,r2
 1001ab4:	d9800084 	addi	r6,sp,2
 1001ab8:	10055d00 	call	10055d0 <_ZNSsC1EPKcRKSaIcE>
 1001abc:	01000204 	movi	r4,8
 1001ac0:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 1001ac4:	d8801215 	stw	r2,72(sp)
 1001ac8:	008000c4 	movi	r2,3
 1001acc:	d8800315 	stw	r2,12(sp)
 1001ad0:	d9401417 	ldw	r5,80(sp)
 1001ad4:	d9001217 	ldw	r4,72(sp)
 1001ad8:	10030440 	call	1003044 <_ZNSt15underflow_errorC1ERKSs>
 1001adc:	d8800117 	ldw	r2,4(sp)
 1001ae0:	00c040b4 	movhi	r3,258
 1001ae4:	18dbcf04 	addi	r3,r3,28476
 1001ae8:	10bffd04 	addi	r2,r2,-12
 1001aec:	d8800f15 	stw	r2,60(sp)
 1001af0:	10c0081e 	bne	r2,r3,1001b14 <_ZSt23__throw_underflow_errorPKc+0xc0>
 1001af4:	d9001217 	ldw	r4,72(sp)
 1001af8:	00bfffc4 	movi	r2,-1
 1001afc:	014040b4 	movhi	r5,258
 1001b00:	297b9204 	addi	r5,r5,-4536
 1001b04:	01804034 	movhi	r6,256
 1001b08:	3189c204 	addi	r6,r6,9992
 1001b0c:	d8800315 	stw	r2,12(sp)
 1001b10:	1008b080 	call	1008b08 <__cxa_throw>
 1001b14:	00800044 	movi	r2,1
 1001b18:	d8800315 	stw	r2,12(sp)
 1001b1c:	d8800f17 	ldw	r2,60(sp)
 1001b20:	017fffc4 	movi	r5,-1
 1001b24:	11000204 	addi	r4,r2,8
 1001b28:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001b2c:	00bff116 	blt	zero,r2,1001af4 <_ZSt23__throw_underflow_errorPKc+0xa0>
 1001b30:	d9000f17 	ldw	r4,60(sp)
 1001b34:	d80b883a 	mov	r5,sp
 1001b38:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001b3c:	003fed06 	br	1001af4 <_ZSt23__throw_underflow_errorPKc+0xa0>
 1001b40:	d8800417 	ldw	r2,16(sp)
 1001b44:	d8c00317 	ldw	r3,12(sp)
 1001b48:	d9000517 	ldw	r4,20(sp)
 1001b4c:	d8801515 	stw	r2,84(sp)
 1001b50:	00800044 	movi	r2,1
 1001b54:	18800426 	beq	r3,r2,1001b68 <_ZSt23__throw_underflow_errorPKc+0x114>
 1001b58:	00800084 	movi	r2,2
 1001b5c:	18800826 	beq	r3,r2,1001b80 <_ZSt23__throw_underflow_errorPKc+0x12c>
 1001b60:	008000c4 	movi	r2,3
 1001b64:	18800226 	beq	r3,r2,1001b70 <_ZSt23__throw_underflow_errorPKc+0x11c>
 1001b68:	00bfffc4 	movi	r2,-1
 1001b6c:	20801126 	beq	r4,r2,1001bb4 <_ZSt23__throw_underflow_errorPKc+0x160>
 1001b70:	d9001517 	ldw	r4,84(sp)
 1001b74:	00bfffc4 	movi	r2,-1
 1001b78:	d8800315 	stw	r2,12(sp)
 1001b7c:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1001b80:	d9001217 	ldw	r4,72(sp)
 1001b84:	1008e500 	call	1008e50 <__cxa_free_exception>
 1001b88:	d8801517 	ldw	r2,84(sp)
 1001b8c:	00c040b4 	movhi	r3,258
 1001b90:	18dbcf04 	addi	r3,r3,28476
 1001b94:	d8801115 	stw	r2,68(sp)
 1001b98:	d8800117 	ldw	r2,4(sp)
 1001b9c:	10bffd04 	addi	r2,r2,-12
 1001ba0:	d8801015 	stw	r2,64(sp)
 1001ba4:	10c0041e 	bne	r2,r3,1001bb8 <_ZSt23__throw_underflow_errorPKc+0x164>
 1001ba8:	d8801117 	ldw	r2,68(sp)
 1001bac:	d8801515 	stw	r2,84(sp)
 1001bb0:	003fef06 	br	1001b70 <_ZSt23__throw_underflow_errorPKc+0x11c>
 1001bb4:	10088640 	call	1008864 <_ZSt9terminatev>
 1001bb8:	00800084 	movi	r2,2
 1001bbc:	d8800315 	stw	r2,12(sp)
 1001bc0:	d8801017 	ldw	r2,64(sp)
 1001bc4:	017fffc4 	movi	r5,-1
 1001bc8:	11000204 	addi	r4,r2,8
 1001bcc:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001bd0:	00bff516 	blt	zero,r2,1001ba8 <_ZSt23__throw_underflow_errorPKc+0x154>
 1001bd4:	d9001017 	ldw	r4,64(sp)
 1001bd8:	d9400044 	addi	r5,sp,1
 1001bdc:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001be0:	003ff106 	br	1001ba8 <_ZSt23__throw_underflow_errorPKc+0x154>

01001be4 <_ZSt22__throw_overflow_errorPKc>:
 1001be4:	deffe704 	addi	sp,sp,-100
 1001be8:	00804074 	movhi	r2,257
 1001bec:	10a0ae04 	addi	r2,r2,-32072
 1001bf0:	d8800815 	stw	r2,32(sp)
 1001bf4:	00c040b4 	movhi	r3,258
 1001bf8:	18fac904 	addi	r3,r3,-5340
 1001bfc:	00804034 	movhi	r2,256
 1001c00:	10873404 	addi	r2,r2,7376
 1001c04:	d9001315 	stw	r4,76(sp)
 1001c08:	d9000204 	addi	r4,sp,8
 1001c0c:	d8800b15 	stw	r2,44(sp)
 1001c10:	dfc01815 	stw	ra,96(sp)
 1001c14:	df001715 	stw	fp,92(sp)
 1001c18:	ddc01615 	stw	r23,88(sp)
 1001c1c:	d8c00915 	stw	r3,36(sp)
 1001c20:	dec00a15 	stw	sp,40(sp)
 1001c24:	dec00c15 	stw	sp,48(sp)
 1001c28:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1001c2c:	00800104 	movi	r2,4
 1001c30:	d8800315 	stw	r2,12(sp)
 1001c34:	d885883a 	add	r2,sp,r2
 1001c38:	d8801415 	stw	r2,80(sp)
 1001c3c:	d9401317 	ldw	r5,76(sp)
 1001c40:	1009883a 	mov	r4,r2
 1001c44:	d9800084 	addi	r6,sp,2
 1001c48:	10055d00 	call	10055d0 <_ZNSsC1EPKcRKSaIcE>
 1001c4c:	01000204 	movi	r4,8
 1001c50:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 1001c54:	d8801215 	stw	r2,72(sp)
 1001c58:	008000c4 	movi	r2,3
 1001c5c:	d8800315 	stw	r2,12(sp)
 1001c60:	d9401417 	ldw	r5,80(sp)
 1001c64:	d9001217 	ldw	r4,72(sp)
 1001c68:	10030a40 	call	10030a4 <_ZNSt14overflow_errorC1ERKSs>
 1001c6c:	d8800117 	ldw	r2,4(sp)
 1001c70:	00c040b4 	movhi	r3,258
 1001c74:	18dbcf04 	addi	r3,r3,28476
 1001c78:	10bffd04 	addi	r2,r2,-12
 1001c7c:	d8800f15 	stw	r2,60(sp)
 1001c80:	10c0081e 	bne	r2,r3,1001ca4 <_ZSt22__throw_overflow_errorPKc+0xc0>
 1001c84:	d9001217 	ldw	r4,72(sp)
 1001c88:	00bfffc4 	movi	r2,-1
 1001c8c:	014040b4 	movhi	r5,258
 1001c90:	297b9f04 	addi	r5,r5,-4484
 1001c94:	01804034 	movhi	r6,256
 1001c98:	3189d304 	addi	r6,r6,10060
 1001c9c:	d8800315 	stw	r2,12(sp)
 1001ca0:	1008b080 	call	1008b08 <__cxa_throw>
 1001ca4:	00800044 	movi	r2,1
 1001ca8:	d8800315 	stw	r2,12(sp)
 1001cac:	d8800f17 	ldw	r2,60(sp)
 1001cb0:	017fffc4 	movi	r5,-1
 1001cb4:	11000204 	addi	r4,r2,8
 1001cb8:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001cbc:	00bff116 	blt	zero,r2,1001c84 <_ZSt22__throw_overflow_errorPKc+0xa0>
 1001cc0:	d9000f17 	ldw	r4,60(sp)
 1001cc4:	d80b883a 	mov	r5,sp
 1001cc8:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001ccc:	003fed06 	br	1001c84 <_ZSt22__throw_overflow_errorPKc+0xa0>
 1001cd0:	d8800417 	ldw	r2,16(sp)
 1001cd4:	d8c00317 	ldw	r3,12(sp)
 1001cd8:	d9000517 	ldw	r4,20(sp)
 1001cdc:	d8801515 	stw	r2,84(sp)
 1001ce0:	00800044 	movi	r2,1
 1001ce4:	18800426 	beq	r3,r2,1001cf8 <_ZSt22__throw_overflow_errorPKc+0x114>
 1001ce8:	00800084 	movi	r2,2
 1001cec:	18800826 	beq	r3,r2,1001d10 <_ZSt22__throw_overflow_errorPKc+0x12c>
 1001cf0:	008000c4 	movi	r2,3
 1001cf4:	18800226 	beq	r3,r2,1001d00 <_ZSt22__throw_overflow_errorPKc+0x11c>
 1001cf8:	00bfffc4 	movi	r2,-1
 1001cfc:	20801126 	beq	r4,r2,1001d44 <_ZSt22__throw_overflow_errorPKc+0x160>
 1001d00:	d9001517 	ldw	r4,84(sp)
 1001d04:	00bfffc4 	movi	r2,-1
 1001d08:	d8800315 	stw	r2,12(sp)
 1001d0c:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1001d10:	d9001217 	ldw	r4,72(sp)
 1001d14:	1008e500 	call	1008e50 <__cxa_free_exception>
 1001d18:	d8801517 	ldw	r2,84(sp)
 1001d1c:	00c040b4 	movhi	r3,258
 1001d20:	18dbcf04 	addi	r3,r3,28476
 1001d24:	d8801115 	stw	r2,68(sp)
 1001d28:	d8800117 	ldw	r2,4(sp)
 1001d2c:	10bffd04 	addi	r2,r2,-12
 1001d30:	d8801015 	stw	r2,64(sp)
 1001d34:	10c0041e 	bne	r2,r3,1001d48 <_ZSt22__throw_overflow_errorPKc+0x164>
 1001d38:	d8801117 	ldw	r2,68(sp)
 1001d3c:	d8801515 	stw	r2,84(sp)
 1001d40:	003fef06 	br	1001d00 <_ZSt22__throw_overflow_errorPKc+0x11c>
 1001d44:	10088640 	call	1008864 <_ZSt9terminatev>
 1001d48:	00800084 	movi	r2,2
 1001d4c:	d8800315 	stw	r2,12(sp)
 1001d50:	d8801017 	ldw	r2,64(sp)
 1001d54:	017fffc4 	movi	r5,-1
 1001d58:	11000204 	addi	r4,r2,8
 1001d5c:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001d60:	00bff516 	blt	zero,r2,1001d38 <_ZSt22__throw_overflow_errorPKc+0x154>
 1001d64:	d9001017 	ldw	r4,64(sp)
 1001d68:	d9400044 	addi	r5,sp,1
 1001d6c:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001d70:	003ff106 	br	1001d38 <_ZSt22__throw_overflow_errorPKc+0x154>

01001d74 <_ZSt24__throw_invalid_argumentPKc>:
 1001d74:	deffe704 	addi	sp,sp,-100
 1001d78:	00804074 	movhi	r2,257
 1001d7c:	10a0ae04 	addi	r2,r2,-32072
 1001d80:	d8800815 	stw	r2,32(sp)
 1001d84:	00c040b4 	movhi	r3,258
 1001d88:	18facf04 	addi	r3,r3,-5316
 1001d8c:	00804034 	movhi	r2,256
 1001d90:	10879804 	addi	r2,r2,7776
 1001d94:	d9001315 	stw	r4,76(sp)
 1001d98:	d9000204 	addi	r4,sp,8
 1001d9c:	d8800b15 	stw	r2,44(sp)
 1001da0:	dfc01815 	stw	ra,96(sp)
 1001da4:	df001715 	stw	fp,92(sp)
 1001da8:	ddc01615 	stw	r23,88(sp)
 1001dac:	d8c00915 	stw	r3,36(sp)
 1001db0:	dec00a15 	stw	sp,40(sp)
 1001db4:	dec00c15 	stw	sp,48(sp)
 1001db8:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1001dbc:	00800104 	movi	r2,4
 1001dc0:	d8800315 	stw	r2,12(sp)
 1001dc4:	d885883a 	add	r2,sp,r2
 1001dc8:	d8801415 	stw	r2,80(sp)
 1001dcc:	d9401317 	ldw	r5,76(sp)
 1001dd0:	1009883a 	mov	r4,r2
 1001dd4:	d9800084 	addi	r6,sp,2
 1001dd8:	10055d00 	call	10055d0 <_ZNSsC1EPKcRKSaIcE>
 1001ddc:	01000204 	movi	r4,8
 1001de0:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 1001de4:	d8801215 	stw	r2,72(sp)
 1001de8:	008000c4 	movi	r2,3
 1001dec:	d8800315 	stw	r2,12(sp)
 1001df0:	d9401417 	ldw	r5,80(sp)
 1001df4:	d9001217 	ldw	r4,72(sp)
 1001df8:	10033840 	call	1003384 <_ZNSt16invalid_argumentC1ERKSs>
 1001dfc:	d8800117 	ldw	r2,4(sp)
 1001e00:	00c040b4 	movhi	r3,258
 1001e04:	18dbcf04 	addi	r3,r3,28476
 1001e08:	10bffd04 	addi	r2,r2,-12
 1001e0c:	d8800f15 	stw	r2,60(sp)
 1001e10:	10c0081e 	bne	r2,r3,1001e34 <_ZSt24__throw_invalid_argumentPKc+0xc0>
 1001e14:	d9001217 	ldw	r4,72(sp)
 1001e18:	00bfffc4 	movi	r2,-1
 1001e1c:	014040b4 	movhi	r5,258
 1001e20:	297bd204 	addi	r5,r5,-4280
 1001e24:	01804034 	movhi	r6,256
 1001e28:	318a1704 	addi	r6,r6,10332
 1001e2c:	d8800315 	stw	r2,12(sp)
 1001e30:	1008b080 	call	1008b08 <__cxa_throw>
 1001e34:	00800044 	movi	r2,1
 1001e38:	d8800315 	stw	r2,12(sp)
 1001e3c:	d8800f17 	ldw	r2,60(sp)
 1001e40:	017fffc4 	movi	r5,-1
 1001e44:	11000204 	addi	r4,r2,8
 1001e48:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001e4c:	00bff116 	blt	zero,r2,1001e14 <_ZSt24__throw_invalid_argumentPKc+0xa0>
 1001e50:	d9000f17 	ldw	r4,60(sp)
 1001e54:	d80b883a 	mov	r5,sp
 1001e58:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001e5c:	003fed06 	br	1001e14 <_ZSt24__throw_invalid_argumentPKc+0xa0>
 1001e60:	d8800417 	ldw	r2,16(sp)
 1001e64:	d8c00317 	ldw	r3,12(sp)
 1001e68:	d9000517 	ldw	r4,20(sp)
 1001e6c:	d8801515 	stw	r2,84(sp)
 1001e70:	00800044 	movi	r2,1
 1001e74:	18800426 	beq	r3,r2,1001e88 <_ZSt24__throw_invalid_argumentPKc+0x114>
 1001e78:	00800084 	movi	r2,2
 1001e7c:	18800826 	beq	r3,r2,1001ea0 <_ZSt24__throw_invalid_argumentPKc+0x12c>
 1001e80:	008000c4 	movi	r2,3
 1001e84:	18800226 	beq	r3,r2,1001e90 <_ZSt24__throw_invalid_argumentPKc+0x11c>
 1001e88:	00bfffc4 	movi	r2,-1
 1001e8c:	20801126 	beq	r4,r2,1001ed4 <_ZSt24__throw_invalid_argumentPKc+0x160>
 1001e90:	d9001517 	ldw	r4,84(sp)
 1001e94:	00bfffc4 	movi	r2,-1
 1001e98:	d8800315 	stw	r2,12(sp)
 1001e9c:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1001ea0:	d9001217 	ldw	r4,72(sp)
 1001ea4:	1008e500 	call	1008e50 <__cxa_free_exception>
 1001ea8:	d8801517 	ldw	r2,84(sp)
 1001eac:	00c040b4 	movhi	r3,258
 1001eb0:	18dbcf04 	addi	r3,r3,28476
 1001eb4:	d8801115 	stw	r2,68(sp)
 1001eb8:	d8800117 	ldw	r2,4(sp)
 1001ebc:	10bffd04 	addi	r2,r2,-12
 1001ec0:	d8801015 	stw	r2,64(sp)
 1001ec4:	10c0041e 	bne	r2,r3,1001ed8 <_ZSt24__throw_invalid_argumentPKc+0x164>
 1001ec8:	d8801117 	ldw	r2,68(sp)
 1001ecc:	d8801515 	stw	r2,84(sp)
 1001ed0:	003fef06 	br	1001e90 <_ZSt24__throw_invalid_argumentPKc+0x11c>
 1001ed4:	10088640 	call	1008864 <_ZSt9terminatev>
 1001ed8:	00800084 	movi	r2,2
 1001edc:	d8800315 	stw	r2,12(sp)
 1001ee0:	d8801017 	ldw	r2,64(sp)
 1001ee4:	017fffc4 	movi	r5,-1
 1001ee8:	11000204 	addi	r4,r2,8
 1001eec:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001ef0:	00bff516 	blt	zero,r2,1001ec8 <_ZSt24__throw_invalid_argumentPKc+0x154>
 1001ef4:	d9001017 	ldw	r4,64(sp)
 1001ef8:	d9400044 	addi	r5,sp,1
 1001efc:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001f00:	003ff106 	br	1001ec8 <_ZSt24__throw_invalid_argumentPKc+0x154>

01001f04 <_ZSt20__throw_domain_errorPKc>:
 1001f04:	deffe704 	addi	sp,sp,-100
 1001f08:	00804074 	movhi	r2,257
 1001f0c:	10a0ae04 	addi	r2,r2,-32072
 1001f10:	d8800815 	stw	r2,32(sp)
 1001f14:	00c040b4 	movhi	r3,258
 1001f18:	18fad504 	addi	r3,r3,-5292
 1001f1c:	00804034 	movhi	r2,256
 1001f20:	1087fc04 	addi	r2,r2,8176
 1001f24:	d9001315 	stw	r4,76(sp)
 1001f28:	d9000204 	addi	r4,sp,8
 1001f2c:	d8800b15 	stw	r2,44(sp)
 1001f30:	dfc01815 	stw	ra,96(sp)
 1001f34:	df001715 	stw	fp,92(sp)
 1001f38:	ddc01615 	stw	r23,88(sp)
 1001f3c:	d8c00915 	stw	r3,36(sp)
 1001f40:	dec00a15 	stw	sp,40(sp)
 1001f44:	dec00c15 	stw	sp,48(sp)
 1001f48:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1001f4c:	00800104 	movi	r2,4
 1001f50:	d8800315 	stw	r2,12(sp)
 1001f54:	d885883a 	add	r2,sp,r2
 1001f58:	d8801415 	stw	r2,80(sp)
 1001f5c:	d9401317 	ldw	r5,76(sp)
 1001f60:	1009883a 	mov	r4,r2
 1001f64:	d9800084 	addi	r6,sp,2
 1001f68:	10055d00 	call	10055d0 <_ZNSsC1EPKcRKSaIcE>
 1001f6c:	01000204 	movi	r4,8
 1001f70:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 1001f74:	d8801215 	stw	r2,72(sp)
 1001f78:	008000c4 	movi	r2,3
 1001f7c:	d8800315 	stw	r2,12(sp)
 1001f80:	d9401417 	ldw	r5,80(sp)
 1001f84:	d9001217 	ldw	r4,72(sp)
 1001f88:	10033e40 	call	10033e4 <_ZNSt12domain_errorC1ERKSs>
 1001f8c:	d8800117 	ldw	r2,4(sp)
 1001f90:	00c040b4 	movhi	r3,258
 1001f94:	18dbcf04 	addi	r3,r3,28476
 1001f98:	10bffd04 	addi	r2,r2,-12
 1001f9c:	d8800f15 	stw	r2,60(sp)
 1001fa0:	10c0081e 	bne	r2,r3,1001fc4 <_ZSt20__throw_domain_errorPKc+0xc0>
 1001fa4:	d9001217 	ldw	r4,72(sp)
 1001fa8:	00bfffc4 	movi	r2,-1
 1001fac:	014040b4 	movhi	r5,258
 1001fb0:	297be004 	addi	r5,r5,-4224
 1001fb4:	01804034 	movhi	r6,256
 1001fb8:	318a2804 	addi	r6,r6,10400
 1001fbc:	d8800315 	stw	r2,12(sp)
 1001fc0:	1008b080 	call	1008b08 <__cxa_throw>
 1001fc4:	00800044 	movi	r2,1
 1001fc8:	d8800315 	stw	r2,12(sp)
 1001fcc:	d8800f17 	ldw	r2,60(sp)
 1001fd0:	017fffc4 	movi	r5,-1
 1001fd4:	11000204 	addi	r4,r2,8
 1001fd8:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001fdc:	00bff116 	blt	zero,r2,1001fa4 <_ZSt20__throw_domain_errorPKc+0xa0>
 1001fe0:	d9000f17 	ldw	r4,60(sp)
 1001fe4:	d80b883a 	mov	r5,sp
 1001fe8:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001fec:	003fed06 	br	1001fa4 <_ZSt20__throw_domain_errorPKc+0xa0>
 1001ff0:	d8800417 	ldw	r2,16(sp)
 1001ff4:	d8c00317 	ldw	r3,12(sp)
 1001ff8:	d9000517 	ldw	r4,20(sp)
 1001ffc:	d8801515 	stw	r2,84(sp)
 1002000:	00800044 	movi	r2,1
 1002004:	18800426 	beq	r3,r2,1002018 <_ZSt20__throw_domain_errorPKc+0x114>
 1002008:	00800084 	movi	r2,2
 100200c:	18800826 	beq	r3,r2,1002030 <_ZSt20__throw_domain_errorPKc+0x12c>
 1002010:	008000c4 	movi	r2,3
 1002014:	18800226 	beq	r3,r2,1002020 <_ZSt20__throw_domain_errorPKc+0x11c>
 1002018:	00bfffc4 	movi	r2,-1
 100201c:	20801126 	beq	r4,r2,1002064 <_ZSt20__throw_domain_errorPKc+0x160>
 1002020:	d9001517 	ldw	r4,84(sp)
 1002024:	00bfffc4 	movi	r2,-1
 1002028:	d8800315 	stw	r2,12(sp)
 100202c:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1002030:	d9001217 	ldw	r4,72(sp)
 1002034:	1008e500 	call	1008e50 <__cxa_free_exception>
 1002038:	d8801517 	ldw	r2,84(sp)
 100203c:	00c040b4 	movhi	r3,258
 1002040:	18dbcf04 	addi	r3,r3,28476
 1002044:	d8801115 	stw	r2,68(sp)
 1002048:	d8800117 	ldw	r2,4(sp)
 100204c:	10bffd04 	addi	r2,r2,-12
 1002050:	d8801015 	stw	r2,64(sp)
 1002054:	10c0041e 	bne	r2,r3,1002068 <_ZSt20__throw_domain_errorPKc+0x164>
 1002058:	d8801117 	ldw	r2,68(sp)
 100205c:	d8801515 	stw	r2,84(sp)
 1002060:	003fef06 	br	1002020 <_ZSt20__throw_domain_errorPKc+0x11c>
 1002064:	10088640 	call	1008864 <_ZSt9terminatev>
 1002068:	00800084 	movi	r2,2
 100206c:	d8800315 	stw	r2,12(sp)
 1002070:	d8801017 	ldw	r2,64(sp)
 1002074:	017fffc4 	movi	r5,-1
 1002078:	11000204 	addi	r4,r2,8
 100207c:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002080:	00bff516 	blt	zero,r2,1002058 <_ZSt20__throw_domain_errorPKc+0x154>
 1002084:	d9001017 	ldw	r4,64(sp)
 1002088:	d9400044 	addi	r5,sp,1
 100208c:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002090:	003ff106 	br	1002058 <_ZSt20__throw_domain_errorPKc+0x154>

01002094 <_ZSt19__throw_range_errorPKc>:
 1002094:	deffe704 	addi	sp,sp,-100
 1002098:	00804074 	movhi	r2,257
 100209c:	10a0ae04 	addi	r2,r2,-32072
 10020a0:	d8800815 	stw	r2,32(sp)
 10020a4:	00c040b4 	movhi	r3,258
 10020a8:	18fadb04 	addi	r3,r3,-5268
 10020ac:	00804034 	movhi	r2,256
 10020b0:	10886004 	addi	r2,r2,8576
 10020b4:	d9001315 	stw	r4,76(sp)
 10020b8:	d9000204 	addi	r4,sp,8
 10020bc:	d8800b15 	stw	r2,44(sp)
 10020c0:	dfc01815 	stw	ra,96(sp)
 10020c4:	df001715 	stw	fp,92(sp)
 10020c8:	ddc01615 	stw	r23,88(sp)
 10020cc:	d8c00915 	stw	r3,36(sp)
 10020d0:	dec00a15 	stw	sp,40(sp)
 10020d4:	dec00c15 	stw	sp,48(sp)
 10020d8:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 10020dc:	00800104 	movi	r2,4
 10020e0:	d8800315 	stw	r2,12(sp)
 10020e4:	d885883a 	add	r2,sp,r2
 10020e8:	d8801415 	stw	r2,80(sp)
 10020ec:	d9401317 	ldw	r5,76(sp)
 10020f0:	1009883a 	mov	r4,r2
 10020f4:	d9800084 	addi	r6,sp,2
 10020f8:	10055d00 	call	10055d0 <_ZNSsC1EPKcRKSaIcE>
 10020fc:	01000204 	movi	r4,8
 1002100:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 1002104:	d8801215 	stw	r2,72(sp)
 1002108:	008000c4 	movi	r2,3
 100210c:	d8800315 	stw	r2,12(sp)
 1002110:	d9401417 	ldw	r5,80(sp)
 1002114:	d9001217 	ldw	r4,72(sp)
 1002118:	10031040 	call	1003104 <_ZNSt11range_errorC1ERKSs>
 100211c:	d8800117 	ldw	r2,4(sp)
 1002120:	00c040b4 	movhi	r3,258
 1002124:	18dbcf04 	addi	r3,r3,28476
 1002128:	10bffd04 	addi	r2,r2,-12
 100212c:	d8800f15 	stw	r2,60(sp)
 1002130:	10c0081e 	bne	r2,r3,1002154 <_ZSt19__throw_range_errorPKc+0xc0>
 1002134:	d9001217 	ldw	r4,72(sp)
 1002138:	00bfffc4 	movi	r2,-1
 100213c:	014040b4 	movhi	r5,258
 1002140:	297bac04 	addi	r5,r5,-4432
 1002144:	01804034 	movhi	r6,256
 1002148:	3189e404 	addi	r6,r6,10128
 100214c:	d8800315 	stw	r2,12(sp)
 1002150:	1008b080 	call	1008b08 <__cxa_throw>
 1002154:	00800044 	movi	r2,1
 1002158:	d8800315 	stw	r2,12(sp)
 100215c:	d8800f17 	ldw	r2,60(sp)
 1002160:	017fffc4 	movi	r5,-1
 1002164:	11000204 	addi	r4,r2,8
 1002168:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100216c:	00bff116 	blt	zero,r2,1002134 <_ZSt19__throw_range_errorPKc+0xa0>
 1002170:	d9000f17 	ldw	r4,60(sp)
 1002174:	d80b883a 	mov	r5,sp
 1002178:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100217c:	003fed06 	br	1002134 <_ZSt19__throw_range_errorPKc+0xa0>
 1002180:	d8800417 	ldw	r2,16(sp)
 1002184:	d8c00317 	ldw	r3,12(sp)
 1002188:	d9000517 	ldw	r4,20(sp)
 100218c:	d8801515 	stw	r2,84(sp)
 1002190:	00800044 	movi	r2,1
 1002194:	18800426 	beq	r3,r2,10021a8 <_ZSt19__throw_range_errorPKc+0x114>
 1002198:	00800084 	movi	r2,2
 100219c:	18800826 	beq	r3,r2,10021c0 <_ZSt19__throw_range_errorPKc+0x12c>
 10021a0:	008000c4 	movi	r2,3
 10021a4:	18800226 	beq	r3,r2,10021b0 <_ZSt19__throw_range_errorPKc+0x11c>
 10021a8:	00bfffc4 	movi	r2,-1
 10021ac:	20801126 	beq	r4,r2,10021f4 <_ZSt19__throw_range_errorPKc+0x160>
 10021b0:	d9001517 	ldw	r4,84(sp)
 10021b4:	00bfffc4 	movi	r2,-1
 10021b8:	d8800315 	stw	r2,12(sp)
 10021bc:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 10021c0:	d9001217 	ldw	r4,72(sp)
 10021c4:	1008e500 	call	1008e50 <__cxa_free_exception>
 10021c8:	d8801517 	ldw	r2,84(sp)
 10021cc:	00c040b4 	movhi	r3,258
 10021d0:	18dbcf04 	addi	r3,r3,28476
 10021d4:	d8801115 	stw	r2,68(sp)
 10021d8:	d8800117 	ldw	r2,4(sp)
 10021dc:	10bffd04 	addi	r2,r2,-12
 10021e0:	d8801015 	stw	r2,64(sp)
 10021e4:	10c0041e 	bne	r2,r3,10021f8 <_ZSt19__throw_range_errorPKc+0x164>
 10021e8:	d8801117 	ldw	r2,68(sp)
 10021ec:	d8801515 	stw	r2,84(sp)
 10021f0:	003fef06 	br	10021b0 <_ZSt19__throw_range_errorPKc+0x11c>
 10021f4:	10088640 	call	1008864 <_ZSt9terminatev>
 10021f8:	00800084 	movi	r2,2
 10021fc:	d8800315 	stw	r2,12(sp)
 1002200:	d8801017 	ldw	r2,64(sp)
 1002204:	017fffc4 	movi	r5,-1
 1002208:	11000204 	addi	r4,r2,8
 100220c:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002210:	00bff516 	blt	zero,r2,10021e8 <_ZSt19__throw_range_errorPKc+0x154>
 1002214:	d9001017 	ldw	r4,64(sp)
 1002218:	d9400044 	addi	r5,sp,1
 100221c:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002220:	003ff106 	br	10021e8 <_ZSt19__throw_range_errorPKc+0x154>

01002224 <_ZSt21__throw_runtime_errorPKc>:
 1002224:	deffe704 	addi	sp,sp,-100
 1002228:	00804074 	movhi	r2,257
 100222c:	10a0ae04 	addi	r2,r2,-32072
 1002230:	d8800815 	stw	r2,32(sp)
 1002234:	00c040b4 	movhi	r3,258
 1002238:	18fae104 	addi	r3,r3,-5244
 100223c:	00804034 	movhi	r2,256
 1002240:	1088c404 	addi	r2,r2,8976
 1002244:	d9001315 	stw	r4,76(sp)
 1002248:	d9000204 	addi	r4,sp,8
 100224c:	d8800b15 	stw	r2,44(sp)
 1002250:	dfc01815 	stw	ra,96(sp)
 1002254:	df001715 	stw	fp,92(sp)
 1002258:	ddc01615 	stw	r23,88(sp)
 100225c:	d8c00915 	stw	r3,36(sp)
 1002260:	dec00a15 	stw	sp,40(sp)
 1002264:	dec00c15 	stw	sp,48(sp)
 1002268:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 100226c:	00800104 	movi	r2,4
 1002270:	d8800315 	stw	r2,12(sp)
 1002274:	d885883a 	add	r2,sp,r2
 1002278:	d8801415 	stw	r2,80(sp)
 100227c:	d9401317 	ldw	r5,76(sp)
 1002280:	1009883a 	mov	r4,r2
 1002284:	d9800084 	addi	r6,sp,2
 1002288:	10055d00 	call	10055d0 <_ZNSsC1EPKcRKSaIcE>
 100228c:	01000204 	movi	r4,8
 1002290:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 1002294:	d8801215 	stw	r2,72(sp)
 1002298:	008000c4 	movi	r2,3
 100229c:	d8800315 	stw	r2,12(sp)
 10022a0:	d9401417 	ldw	r5,80(sp)
 10022a4:	d9001217 	ldw	r4,72(sp)
 10022a8:	100344c0 	call	100344c <_ZNSt13runtime_errorC1ERKSs>
 10022ac:	d8800117 	ldw	r2,4(sp)
 10022b0:	00c040b4 	movhi	r3,258
 10022b4:	18dbcf04 	addi	r3,r3,28476
 10022b8:	10bffd04 	addi	r2,r2,-12
 10022bc:	d8800f15 	stw	r2,60(sp)
 10022c0:	10c0081e 	bne	r2,r3,10022e4 <_ZSt21__throw_runtime_errorPKc+0xc0>
 10022c4:	d9001217 	ldw	r4,72(sp)
 10022c8:	00bfffc4 	movi	r2,-1
 10022cc:	014040b4 	movhi	r5,258
 10022d0:	297c0a04 	addi	r5,r5,-4056
 10022d4:	01804034 	movhi	r6,256
 10022d8:	318d3f04 	addi	r6,r6,13564
 10022dc:	d8800315 	stw	r2,12(sp)
 10022e0:	1008b080 	call	1008b08 <__cxa_throw>
 10022e4:	00800044 	movi	r2,1
 10022e8:	d8800315 	stw	r2,12(sp)
 10022ec:	d8800f17 	ldw	r2,60(sp)
 10022f0:	017fffc4 	movi	r5,-1
 10022f4:	11000204 	addi	r4,r2,8
 10022f8:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10022fc:	00bff116 	blt	zero,r2,10022c4 <_ZSt21__throw_runtime_errorPKc+0xa0>
 1002300:	d9000f17 	ldw	r4,60(sp)
 1002304:	d80b883a 	mov	r5,sp
 1002308:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100230c:	003fed06 	br	10022c4 <_ZSt21__throw_runtime_errorPKc+0xa0>
 1002310:	d8800417 	ldw	r2,16(sp)
 1002314:	d8c00317 	ldw	r3,12(sp)
 1002318:	d9000517 	ldw	r4,20(sp)
 100231c:	d8801515 	stw	r2,84(sp)
 1002320:	00800044 	movi	r2,1
 1002324:	18800426 	beq	r3,r2,1002338 <_ZSt21__throw_runtime_errorPKc+0x114>
 1002328:	00800084 	movi	r2,2
 100232c:	18800826 	beq	r3,r2,1002350 <_ZSt21__throw_runtime_errorPKc+0x12c>
 1002330:	008000c4 	movi	r2,3
 1002334:	18800226 	beq	r3,r2,1002340 <_ZSt21__throw_runtime_errorPKc+0x11c>
 1002338:	00bfffc4 	movi	r2,-1
 100233c:	20801126 	beq	r4,r2,1002384 <_ZSt21__throw_runtime_errorPKc+0x160>
 1002340:	d9001517 	ldw	r4,84(sp)
 1002344:	00bfffc4 	movi	r2,-1
 1002348:	d8800315 	stw	r2,12(sp)
 100234c:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1002350:	d9001217 	ldw	r4,72(sp)
 1002354:	1008e500 	call	1008e50 <__cxa_free_exception>
 1002358:	d8801517 	ldw	r2,84(sp)
 100235c:	00c040b4 	movhi	r3,258
 1002360:	18dbcf04 	addi	r3,r3,28476
 1002364:	d8801115 	stw	r2,68(sp)
 1002368:	d8800117 	ldw	r2,4(sp)
 100236c:	10bffd04 	addi	r2,r2,-12
 1002370:	d8801015 	stw	r2,64(sp)
 1002374:	10c0041e 	bne	r2,r3,1002388 <_ZSt21__throw_runtime_errorPKc+0x164>
 1002378:	d8801117 	ldw	r2,68(sp)
 100237c:	d8801515 	stw	r2,84(sp)
 1002380:	003fef06 	br	1002340 <_ZSt21__throw_runtime_errorPKc+0x11c>
 1002384:	10088640 	call	1008864 <_ZSt9terminatev>
 1002388:	00800084 	movi	r2,2
 100238c:	d8800315 	stw	r2,12(sp)
 1002390:	d8801017 	ldw	r2,64(sp)
 1002394:	017fffc4 	movi	r5,-1
 1002398:	11000204 	addi	r4,r2,8
 100239c:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10023a0:	00bff516 	blt	zero,r2,1002378 <_ZSt21__throw_runtime_errorPKc+0x154>
 10023a4:	d9001017 	ldw	r4,64(sp)
 10023a8:	d9400044 	addi	r5,sp,1
 10023ac:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10023b0:	003ff106 	br	1002378 <_ZSt21__throw_runtime_errorPKc+0x154>

010023b4 <_ZSt20__throw_out_of_rangePKc>:
 10023b4:	deffe704 	addi	sp,sp,-100
 10023b8:	00804074 	movhi	r2,257
 10023bc:	10a0ae04 	addi	r2,r2,-32072
 10023c0:	d8800815 	stw	r2,32(sp)
 10023c4:	00c040b4 	movhi	r3,258
 10023c8:	18fae704 	addi	r3,r3,-5220
 10023cc:	00804034 	movhi	r2,256
 10023d0:	10892804 	addi	r2,r2,9376
 10023d4:	d9001315 	stw	r4,76(sp)
 10023d8:	d9000204 	addi	r4,sp,8
 10023dc:	d8800b15 	stw	r2,44(sp)
 10023e0:	dfc01815 	stw	ra,96(sp)
 10023e4:	df001715 	stw	fp,92(sp)
 10023e8:	ddc01615 	stw	r23,88(sp)
 10023ec:	d8c00915 	stw	r3,36(sp)
 10023f0:	dec00a15 	stw	sp,40(sp)
 10023f4:	dec00c15 	stw	sp,48(sp)
 10023f8:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 10023fc:	00800104 	movi	r2,4
 1002400:	d8800315 	stw	r2,12(sp)
 1002404:	d885883a 	add	r2,sp,r2
 1002408:	d8801415 	stw	r2,80(sp)
 100240c:	d9401317 	ldw	r5,76(sp)
 1002410:	1009883a 	mov	r4,r2
 1002414:	d9800084 	addi	r6,sp,2
 1002418:	10055d00 	call	10055d0 <_ZNSsC1EPKcRKSaIcE>
 100241c:	01000204 	movi	r4,8
 1002420:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 1002424:	d8801215 	stw	r2,72(sp)
 1002428:	008000c4 	movi	r2,3
 100242c:	d8800315 	stw	r2,12(sp)
 1002430:	d9401417 	ldw	r5,80(sp)
 1002434:	d9001217 	ldw	r4,72(sp)
 1002438:	10032c40 	call	10032c4 <_ZNSt12out_of_rangeC1ERKSs>
 100243c:	d8800117 	ldw	r2,4(sp)
 1002440:	00c040b4 	movhi	r3,258
 1002444:	18dbcf04 	addi	r3,r3,28476
 1002448:	10bffd04 	addi	r2,r2,-12
 100244c:	d8800f15 	stw	r2,60(sp)
 1002450:	10c0081e 	bne	r2,r3,1002474 <_ZSt20__throw_out_of_rangePKc+0xc0>
 1002454:	d9001217 	ldw	r4,72(sp)
 1002458:	00bfffc4 	movi	r2,-1
 100245c:	014040b4 	movhi	r5,258
 1002460:	297bb804 	addi	r5,r5,-4384
 1002464:	01804034 	movhi	r6,256
 1002468:	3189f504 	addi	r6,r6,10196
 100246c:	d8800315 	stw	r2,12(sp)
 1002470:	1008b080 	call	1008b08 <__cxa_throw>
 1002474:	00800044 	movi	r2,1
 1002478:	d8800315 	stw	r2,12(sp)
 100247c:	d8800f17 	ldw	r2,60(sp)
 1002480:	017fffc4 	movi	r5,-1
 1002484:	11000204 	addi	r4,r2,8
 1002488:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100248c:	00bff116 	blt	zero,r2,1002454 <_ZSt20__throw_out_of_rangePKc+0xa0>
 1002490:	d9000f17 	ldw	r4,60(sp)
 1002494:	d80b883a 	mov	r5,sp
 1002498:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100249c:	003fed06 	br	1002454 <_ZSt20__throw_out_of_rangePKc+0xa0>
 10024a0:	d8800417 	ldw	r2,16(sp)
 10024a4:	d8c00317 	ldw	r3,12(sp)
 10024a8:	d9000517 	ldw	r4,20(sp)
 10024ac:	d8801515 	stw	r2,84(sp)
 10024b0:	00800044 	movi	r2,1
 10024b4:	18800426 	beq	r3,r2,10024c8 <_ZSt20__throw_out_of_rangePKc+0x114>
 10024b8:	00800084 	movi	r2,2
 10024bc:	18800826 	beq	r3,r2,10024e0 <_ZSt20__throw_out_of_rangePKc+0x12c>
 10024c0:	008000c4 	movi	r2,3
 10024c4:	18800226 	beq	r3,r2,10024d0 <_ZSt20__throw_out_of_rangePKc+0x11c>
 10024c8:	00bfffc4 	movi	r2,-1
 10024cc:	20801126 	beq	r4,r2,1002514 <_ZSt20__throw_out_of_rangePKc+0x160>
 10024d0:	d9001517 	ldw	r4,84(sp)
 10024d4:	00bfffc4 	movi	r2,-1
 10024d8:	d8800315 	stw	r2,12(sp)
 10024dc:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 10024e0:	d9001217 	ldw	r4,72(sp)
 10024e4:	1008e500 	call	1008e50 <__cxa_free_exception>
 10024e8:	d8801517 	ldw	r2,84(sp)
 10024ec:	00c040b4 	movhi	r3,258
 10024f0:	18dbcf04 	addi	r3,r3,28476
 10024f4:	d8801115 	stw	r2,68(sp)
 10024f8:	d8800117 	ldw	r2,4(sp)
 10024fc:	10bffd04 	addi	r2,r2,-12
 1002500:	d8801015 	stw	r2,64(sp)
 1002504:	10c0041e 	bne	r2,r3,1002518 <_ZSt20__throw_out_of_rangePKc+0x164>
 1002508:	d8801117 	ldw	r2,68(sp)
 100250c:	d8801515 	stw	r2,84(sp)
 1002510:	003fef06 	br	10024d0 <_ZSt20__throw_out_of_rangePKc+0x11c>
 1002514:	10088640 	call	1008864 <_ZSt9terminatev>
 1002518:	00800084 	movi	r2,2
 100251c:	d8800315 	stw	r2,12(sp)
 1002520:	d8801017 	ldw	r2,64(sp)
 1002524:	017fffc4 	movi	r5,-1
 1002528:	11000204 	addi	r4,r2,8
 100252c:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002530:	00bff516 	blt	zero,r2,1002508 <_ZSt20__throw_out_of_rangePKc+0x154>
 1002534:	d9001017 	ldw	r4,64(sp)
 1002538:	d9400044 	addi	r5,sp,1
 100253c:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002540:	003ff106 	br	1002508 <_ZSt20__throw_out_of_rangePKc+0x154>

01002544 <_ZSt20__throw_length_errorPKc>:
 1002544:	deffe704 	addi	sp,sp,-100
 1002548:	00804074 	movhi	r2,257
 100254c:	10a0ae04 	addi	r2,r2,-32072
 1002550:	d8800815 	stw	r2,32(sp)
 1002554:	00c040b4 	movhi	r3,258
 1002558:	18faed04 	addi	r3,r3,-5196
 100255c:	00804034 	movhi	r2,256
 1002560:	10898c04 	addi	r2,r2,9776
 1002564:	d9001315 	stw	r4,76(sp)
 1002568:	d9000204 	addi	r4,sp,8
 100256c:	d8800b15 	stw	r2,44(sp)
 1002570:	dfc01815 	stw	ra,96(sp)
 1002574:	df001715 	stw	fp,92(sp)
 1002578:	ddc01615 	stw	r23,88(sp)
 100257c:	d8c00915 	stw	r3,36(sp)
 1002580:	dec00a15 	stw	sp,40(sp)
 1002584:	dec00c15 	stw	sp,48(sp)
 1002588:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 100258c:	00800104 	movi	r2,4
 1002590:	d8800315 	stw	r2,12(sp)
 1002594:	d885883a 	add	r2,sp,r2
 1002598:	d8801415 	stw	r2,80(sp)
 100259c:	d9401317 	ldw	r5,76(sp)
 10025a0:	1009883a 	mov	r4,r2
 10025a4:	d9800084 	addi	r6,sp,2
 10025a8:	10055d00 	call	10055d0 <_ZNSsC1EPKcRKSaIcE>
 10025ac:	01000204 	movi	r4,8
 10025b0:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 10025b4:	d8801215 	stw	r2,72(sp)
 10025b8:	008000c4 	movi	r2,3
 10025bc:	d8800315 	stw	r2,12(sp)
 10025c0:	d9401417 	ldw	r5,80(sp)
 10025c4:	d9001217 	ldw	r4,72(sp)
 10025c8:	10033240 	call	1003324 <_ZNSt12length_errorC1ERKSs>
 10025cc:	d8800117 	ldw	r2,4(sp)
 10025d0:	00c040b4 	movhi	r3,258
 10025d4:	18dbcf04 	addi	r3,r3,28476
 10025d8:	10bffd04 	addi	r2,r2,-12
 10025dc:	d8800f15 	stw	r2,60(sp)
 10025e0:	10c0081e 	bne	r2,r3,1002604 <_ZSt20__throw_length_errorPKc+0xc0>
 10025e4:	d9001217 	ldw	r4,72(sp)
 10025e8:	00bfffc4 	movi	r2,-1
 10025ec:	014040b4 	movhi	r5,258
 10025f0:	297bc504 	addi	r5,r5,-4332
 10025f4:	01804034 	movhi	r6,256
 10025f8:	318a0604 	addi	r6,r6,10264
 10025fc:	d8800315 	stw	r2,12(sp)
 1002600:	1008b080 	call	1008b08 <__cxa_throw>
 1002604:	00800044 	movi	r2,1
 1002608:	d8800315 	stw	r2,12(sp)
 100260c:	d8800f17 	ldw	r2,60(sp)
 1002610:	017fffc4 	movi	r5,-1
 1002614:	11000204 	addi	r4,r2,8
 1002618:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100261c:	00bff116 	blt	zero,r2,10025e4 <_ZSt20__throw_length_errorPKc+0xa0>
 1002620:	d9000f17 	ldw	r4,60(sp)
 1002624:	d80b883a 	mov	r5,sp
 1002628:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100262c:	003fed06 	br	10025e4 <_ZSt20__throw_length_errorPKc+0xa0>
 1002630:	d8800417 	ldw	r2,16(sp)
 1002634:	d8c00317 	ldw	r3,12(sp)
 1002638:	d9000517 	ldw	r4,20(sp)
 100263c:	d8801515 	stw	r2,84(sp)
 1002640:	00800044 	movi	r2,1
 1002644:	18800426 	beq	r3,r2,1002658 <_ZSt20__throw_length_errorPKc+0x114>
 1002648:	00800084 	movi	r2,2
 100264c:	18800826 	beq	r3,r2,1002670 <_ZSt20__throw_length_errorPKc+0x12c>
 1002650:	008000c4 	movi	r2,3
 1002654:	18800226 	beq	r3,r2,1002660 <_ZSt20__throw_length_errorPKc+0x11c>
 1002658:	00bfffc4 	movi	r2,-1
 100265c:	20801126 	beq	r4,r2,10026a4 <_ZSt20__throw_length_errorPKc+0x160>
 1002660:	d9001517 	ldw	r4,84(sp)
 1002664:	00bfffc4 	movi	r2,-1
 1002668:	d8800315 	stw	r2,12(sp)
 100266c:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1002670:	d9001217 	ldw	r4,72(sp)
 1002674:	1008e500 	call	1008e50 <__cxa_free_exception>
 1002678:	d8801517 	ldw	r2,84(sp)
 100267c:	00c040b4 	movhi	r3,258
 1002680:	18dbcf04 	addi	r3,r3,28476
 1002684:	d8801115 	stw	r2,68(sp)
 1002688:	d8800117 	ldw	r2,4(sp)
 100268c:	10bffd04 	addi	r2,r2,-12
 1002690:	d8801015 	stw	r2,64(sp)
 1002694:	10c0041e 	bne	r2,r3,10026a8 <_ZSt20__throw_length_errorPKc+0x164>
 1002698:	d8801117 	ldw	r2,68(sp)
 100269c:	d8801515 	stw	r2,84(sp)
 10026a0:	003fef06 	br	1002660 <_ZSt20__throw_length_errorPKc+0x11c>
 10026a4:	10088640 	call	1008864 <_ZSt9terminatev>
 10026a8:	00800084 	movi	r2,2
 10026ac:	d8800315 	stw	r2,12(sp)
 10026b0:	d8801017 	ldw	r2,64(sp)
 10026b4:	017fffc4 	movi	r5,-1
 10026b8:	11000204 	addi	r4,r2,8
 10026bc:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10026c0:	00bff516 	blt	zero,r2,1002698 <_ZSt20__throw_length_errorPKc+0x154>
 10026c4:	d9001017 	ldw	r4,64(sp)
 10026c8:	d9400044 	addi	r5,sp,1
 10026cc:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10026d0:	003ff106 	br	1002698 <_ZSt20__throw_length_errorPKc+0x154>

010026d4 <_ZNSt15underflow_errorD0Ev>:
 10026d4:	defffe04 	addi	sp,sp,-8
 10026d8:	008040b4 	movhi	r2,258
 10026dc:	10bb9c04 	addi	r2,r2,-4496
 10026e0:	dc400015 	stw	r17,0(sp)
 10026e4:	20800015 	stw	r2,0(r4)
 10026e8:	2023883a 	mov	r17,r4
 10026ec:	dfc00115 	stw	ra,4(sp)
 10026f0:	10036000 	call	1003600 <_ZNSt13runtime_errorD2Ev>
 10026f4:	8809883a 	mov	r4,r17
 10026f8:	dfc00117 	ldw	ra,4(sp)
 10026fc:	dc400017 	ldw	r17,0(sp)
 1002700:	dec00204 	addi	sp,sp,8
 1002704:	1008a881 	jmpi	1008a88 <_ZdlPv>

01002708 <_ZNSt15underflow_errorD1Ev>:
 1002708:	008040b4 	movhi	r2,258
 100270c:	10bb9c04 	addi	r2,r2,-4496
 1002710:	20800015 	stw	r2,0(r4)
 1002714:	10036001 	jmpi	1003600 <_ZNSt13runtime_errorD2Ev>

01002718 <_ZNSt14overflow_errorD0Ev>:
 1002718:	defffe04 	addi	sp,sp,-8
 100271c:	008040b4 	movhi	r2,258
 1002720:	10bba904 	addi	r2,r2,-4444
 1002724:	dc400015 	stw	r17,0(sp)
 1002728:	20800015 	stw	r2,0(r4)
 100272c:	2023883a 	mov	r17,r4
 1002730:	dfc00115 	stw	ra,4(sp)
 1002734:	10036000 	call	1003600 <_ZNSt13runtime_errorD2Ev>
 1002738:	8809883a 	mov	r4,r17
 100273c:	dfc00117 	ldw	ra,4(sp)
 1002740:	dc400017 	ldw	r17,0(sp)
 1002744:	dec00204 	addi	sp,sp,8
 1002748:	1008a881 	jmpi	1008a88 <_ZdlPv>

0100274c <_ZNSt14overflow_errorD1Ev>:
 100274c:	008040b4 	movhi	r2,258
 1002750:	10bba904 	addi	r2,r2,-4444
 1002754:	20800015 	stw	r2,0(r4)
 1002758:	10036001 	jmpi	1003600 <_ZNSt13runtime_errorD2Ev>

0100275c <_ZNSt11range_errorD0Ev>:
 100275c:	defffe04 	addi	sp,sp,-8
 1002760:	008040b4 	movhi	r2,258
 1002764:	10bbb504 	addi	r2,r2,-4396
 1002768:	dc400015 	stw	r17,0(sp)
 100276c:	20800015 	stw	r2,0(r4)
 1002770:	2023883a 	mov	r17,r4
 1002774:	dfc00115 	stw	ra,4(sp)
 1002778:	10036000 	call	1003600 <_ZNSt13runtime_errorD2Ev>
 100277c:	8809883a 	mov	r4,r17
 1002780:	dfc00117 	ldw	ra,4(sp)
 1002784:	dc400017 	ldw	r17,0(sp)
 1002788:	dec00204 	addi	sp,sp,8
 100278c:	1008a881 	jmpi	1008a88 <_ZdlPv>

01002790 <_ZNSt11range_errorD1Ev>:
 1002790:	008040b4 	movhi	r2,258
 1002794:	10bbb504 	addi	r2,r2,-4396
 1002798:	20800015 	stw	r2,0(r4)
 100279c:	10036001 	jmpi	1003600 <_ZNSt13runtime_errorD2Ev>

010027a0 <_ZNSt12out_of_rangeD0Ev>:
 10027a0:	defffe04 	addi	sp,sp,-8
 10027a4:	008040b4 	movhi	r2,258
 10027a8:	10bbc204 	addi	r2,r2,-4344
 10027ac:	dc400015 	stw	r17,0(sp)
 10027b0:	20800015 	stw	r2,0(r4)
 10027b4:	2023883a 	mov	r17,r4
 10027b8:	dfc00115 	stw	ra,4(sp)
 10027bc:	10038100 	call	1003810 <_ZNSt11logic_errorD2Ev>
 10027c0:	8809883a 	mov	r4,r17
 10027c4:	dfc00117 	ldw	ra,4(sp)
 10027c8:	dc400017 	ldw	r17,0(sp)
 10027cc:	dec00204 	addi	sp,sp,8
 10027d0:	1008a881 	jmpi	1008a88 <_ZdlPv>

010027d4 <_ZNSt12out_of_rangeD1Ev>:
 10027d4:	008040b4 	movhi	r2,258
 10027d8:	10bbc204 	addi	r2,r2,-4344
 10027dc:	20800015 	stw	r2,0(r4)
 10027e0:	10038101 	jmpi	1003810 <_ZNSt11logic_errorD2Ev>

010027e4 <_ZNSt12length_errorD0Ev>:
 10027e4:	defffe04 	addi	sp,sp,-8
 10027e8:	008040b4 	movhi	r2,258
 10027ec:	10bbcf04 	addi	r2,r2,-4292
 10027f0:	dc400015 	stw	r17,0(sp)
 10027f4:	20800015 	stw	r2,0(r4)
 10027f8:	2023883a 	mov	r17,r4
 10027fc:	dfc00115 	stw	ra,4(sp)
 1002800:	10038100 	call	1003810 <_ZNSt11logic_errorD2Ev>
 1002804:	8809883a 	mov	r4,r17
 1002808:	dfc00117 	ldw	ra,4(sp)
 100280c:	dc400017 	ldw	r17,0(sp)
 1002810:	dec00204 	addi	sp,sp,8
 1002814:	1008a881 	jmpi	1008a88 <_ZdlPv>

01002818 <_ZNSt12length_errorD1Ev>:
 1002818:	008040b4 	movhi	r2,258
 100281c:	10bbcf04 	addi	r2,r2,-4292
 1002820:	20800015 	stw	r2,0(r4)
 1002824:	10038101 	jmpi	1003810 <_ZNSt11logic_errorD2Ev>

01002828 <_ZNSt16invalid_argumentD0Ev>:
 1002828:	defffe04 	addi	sp,sp,-8
 100282c:	008040b4 	movhi	r2,258
 1002830:	10bbdd04 	addi	r2,r2,-4236
 1002834:	dc400015 	stw	r17,0(sp)
 1002838:	20800015 	stw	r2,0(r4)
 100283c:	2023883a 	mov	r17,r4
 1002840:	dfc00115 	stw	ra,4(sp)
 1002844:	10038100 	call	1003810 <_ZNSt11logic_errorD2Ev>
 1002848:	8809883a 	mov	r4,r17
 100284c:	dfc00117 	ldw	ra,4(sp)
 1002850:	dc400017 	ldw	r17,0(sp)
 1002854:	dec00204 	addi	sp,sp,8
 1002858:	1008a881 	jmpi	1008a88 <_ZdlPv>

0100285c <_ZNSt16invalid_argumentD1Ev>:
 100285c:	008040b4 	movhi	r2,258
 1002860:	10bbdd04 	addi	r2,r2,-4236
 1002864:	20800015 	stw	r2,0(r4)
 1002868:	10038101 	jmpi	1003810 <_ZNSt11logic_errorD2Ev>

0100286c <_ZNSt12domain_errorD0Ev>:
 100286c:	defffe04 	addi	sp,sp,-8
 1002870:	008040b4 	movhi	r2,258
 1002874:	10bbea04 	addi	r2,r2,-4184
 1002878:	dc400015 	stw	r17,0(sp)
 100287c:	20800015 	stw	r2,0(r4)
 1002880:	2023883a 	mov	r17,r4
 1002884:	dfc00115 	stw	ra,4(sp)
 1002888:	10038100 	call	1003810 <_ZNSt11logic_errorD2Ev>
 100288c:	8809883a 	mov	r4,r17
 1002890:	dfc00117 	ldw	ra,4(sp)
 1002894:	dc400017 	ldw	r17,0(sp)
 1002898:	dec00204 	addi	sp,sp,8
 100289c:	1008a881 	jmpi	1008a88 <_ZdlPv>

010028a0 <_ZNSt12domain_errorD1Ev>:
 10028a0:	008040b4 	movhi	r2,258
 10028a4:	10bbea04 	addi	r2,r2,-4184
 10028a8:	20800015 	stw	r2,0(r4)
 10028ac:	10038101 	jmpi	1003810 <_ZNSt11logic_errorD2Ev>

010028b0 <_ZNKSt8ios_base7failure4whatEv>:
 10028b0:	20800117 	ldw	r2,4(r4)
 10028b4:	f800283a 	ret

010028b8 <_ZNSt8ios_base7failureD1Ev>:
 10028b8:	deffeb04 	addi	sp,sp,-84
 10028bc:	00804074 	movhi	r2,257
 10028c0:	10a0ae04 	addi	r2,r2,-32072
 10028c4:	00c040b4 	movhi	r3,258
 10028c8:	18faf304 	addi	r3,r3,-5172
 10028cc:	d8800715 	stw	r2,28(sp)
 10028d0:	d9001015 	stw	r4,64(sp)
 10028d4:	00804034 	movhi	r2,256
 10028d8:	108a5f04 	addi	r2,r2,10620
 10028dc:	d9000104 	addi	r4,sp,4
 10028e0:	d8c00815 	stw	r3,32(sp)
 10028e4:	d8800a15 	stw	r2,40(sp)
 10028e8:	dfc01415 	stw	ra,80(sp)
 10028ec:	df001315 	stw	fp,76(sp)
 10028f0:	ddc01215 	stw	r23,72(sp)
 10028f4:	dec00915 	stw	sp,36(sp)
 10028f8:	dec00b15 	stw	sp,44(sp)
 10028fc:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1002900:	d8c01017 	ldw	r3,64(sp)
 1002904:	18800117 	ldw	r2,4(r3)
 1002908:	00c040b4 	movhi	r3,258
 100290c:	18fbef04 	addi	r3,r3,-4164
 1002910:	10bffd04 	addi	r2,r2,-12
 1002914:	d8800e15 	stw	r2,56(sp)
 1002918:	d8801017 	ldw	r2,64(sp)
 100291c:	10c00015 	stw	r3,0(r2)
 1002920:	d8c00e17 	ldw	r3,56(sp)
 1002924:	008040b4 	movhi	r2,258
 1002928:	109bcf04 	addi	r2,r2,28476
 100292c:	1880091e 	bne	r3,r2,1002954 <_ZNSt8ios_base7failureD1Ev+0x9c>
 1002930:	d9001017 	ldw	r4,64(sp)
 1002934:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1002938:	d9000104 	addi	r4,sp,4
 100293c:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1002940:	dfc01417 	ldw	ra,80(sp)
 1002944:	df001317 	ldw	fp,76(sp)
 1002948:	ddc01217 	ldw	r23,72(sp)
 100294c:	dec01504 	addi	sp,sp,84
 1002950:	f800283a 	ret
 1002954:	00800044 	movi	r2,1
 1002958:	d8800215 	stw	r2,8(sp)
 100295c:	19000204 	addi	r4,r3,8
 1002960:	017fffc4 	movi	r5,-1
 1002964:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002968:	00bff116 	blt	zero,r2,1002930 <_ZNSt8ios_base7failureD1Ev+0x78>
 100296c:	d9000e17 	ldw	r4,56(sp)
 1002970:	d80b883a 	mov	r5,sp
 1002974:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002978:	003fed06 	br	1002930 <_ZNSt8ios_base7failureD1Ev+0x78>
 100297c:	d8800417 	ldw	r2,16(sp)
 1002980:	d8c00317 	ldw	r3,12(sp)
 1002984:	d9001017 	ldw	r4,64(sp)
 1002988:	d8800f15 	stw	r2,60(sp)
 100298c:	d8c01115 	stw	r3,68(sp)
 1002990:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1002994:	d8c00f17 	ldw	r3,60(sp)
 1002998:	00bfffc4 	movi	r2,-1
 100299c:	18800326 	beq	r3,r2,10029ac <_ZNSt8ios_base7failureD1Ev+0xf4>
 10029a0:	d9001117 	ldw	r4,68(sp)
 10029a4:	d8800215 	stw	r2,8(sp)
 10029a8:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 10029ac:	d9001117 	ldw	r4,68(sp)
 10029b0:	00bfffc4 	movi	r2,-1
 10029b4:	d8800215 	stw	r2,8(sp)
 10029b8:	10081380 	call	1008138 <__cxa_call_unexpected>

010029bc <_ZNSt8ios_base7failureC1ERKSs>:
 10029bc:	deffec04 	addi	sp,sp,-80
 10029c0:	00804074 	movhi	r2,257
 10029c4:	10a0ae04 	addi	r2,r2,-32072
 10029c8:	00c040b4 	movhi	r3,258
 10029cc:	18faf704 	addi	r3,r3,-5156
 10029d0:	d8800615 	stw	r2,24(sp)
 10029d4:	d9000d15 	stw	r4,52(sp)
 10029d8:	00804034 	movhi	r2,256
 10029dc:	108a9304 	addi	r2,r2,10828
 10029e0:	d809883a 	mov	r4,sp
 10029e4:	d8c00715 	stw	r3,28(sp)
 10029e8:	d8800915 	stw	r2,36(sp)
 10029ec:	d9400e15 	stw	r5,56(sp)
 10029f0:	dfc01315 	stw	ra,76(sp)
 10029f4:	df001215 	stw	fp,72(sp)
 10029f8:	ddc01115 	stw	r23,68(sp)
 10029fc:	dec00815 	stw	sp,32(sp)
 1002a00:	dec00a15 	stw	sp,40(sp)
 1002a04:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1002a08:	d8c00d17 	ldw	r3,52(sp)
 1002a0c:	008040b4 	movhi	r2,258
 1002a10:	10bbef04 	addi	r2,r2,-4164
 1002a14:	d9400e17 	ldw	r5,56(sp)
 1002a18:	18800015 	stw	r2,0(r3)
 1002a1c:	d8800d17 	ldw	r2,52(sp)
 1002a20:	00c00044 	movi	r3,1
 1002a24:	d8c00115 	stw	r3,4(sp)
 1002a28:	11000104 	addi	r4,r2,4
 1002a2c:	10057cc0 	call	10057cc <_ZNSsC1ERKSs>
 1002a30:	d809883a 	mov	r4,sp
 1002a34:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1002a38:	dfc01317 	ldw	ra,76(sp)
 1002a3c:	df001217 	ldw	fp,72(sp)
 1002a40:	ddc01117 	ldw	r23,68(sp)
 1002a44:	dec01404 	addi	sp,sp,80
 1002a48:	f800283a 	ret
 1002a4c:	d8c00317 	ldw	r3,12(sp)
 1002a50:	d8800217 	ldw	r2,8(sp)
 1002a54:	d9000d17 	ldw	r4,52(sp)
 1002a58:	d8c00f15 	stw	r3,60(sp)
 1002a5c:	d8801015 	stw	r2,64(sp)
 1002a60:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1002a64:	d8c00f17 	ldw	r3,60(sp)
 1002a68:	00bfffc4 	movi	r2,-1
 1002a6c:	18800326 	beq	r3,r2,1002a7c <_ZNSt8ios_base7failureC1ERKSs+0xc0>
 1002a70:	d9001017 	ldw	r4,64(sp)
 1002a74:	d8800115 	stw	r2,4(sp)
 1002a78:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1002a7c:	d9001017 	ldw	r4,64(sp)
 1002a80:	00bfffc4 	movi	r2,-1
 1002a84:	d8800115 	stw	r2,4(sp)
 1002a88:	10081380 	call	1008138 <__cxa_call_unexpected>

01002a8c <_ZNSt8ios_base7failureC2ERKSs>:
 1002a8c:	deffec04 	addi	sp,sp,-80
 1002a90:	00804074 	movhi	r2,257
 1002a94:	10a0ae04 	addi	r2,r2,-32072
 1002a98:	00c040b4 	movhi	r3,258
 1002a9c:	18fafb04 	addi	r3,r3,-5140
 1002aa0:	d8800615 	stw	r2,24(sp)
 1002aa4:	d9000d15 	stw	r4,52(sp)
 1002aa8:	00804034 	movhi	r2,256
 1002aac:	108ac704 	addi	r2,r2,11036
 1002ab0:	d809883a 	mov	r4,sp
 1002ab4:	d8c00715 	stw	r3,28(sp)
 1002ab8:	d8800915 	stw	r2,36(sp)
 1002abc:	d9400e15 	stw	r5,56(sp)
 1002ac0:	dfc01315 	stw	ra,76(sp)
 1002ac4:	df001215 	stw	fp,72(sp)
 1002ac8:	ddc01115 	stw	r23,68(sp)
 1002acc:	dec00815 	stw	sp,32(sp)
 1002ad0:	dec00a15 	stw	sp,40(sp)
 1002ad4:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1002ad8:	d8c00d17 	ldw	r3,52(sp)
 1002adc:	008040b4 	movhi	r2,258
 1002ae0:	10bbef04 	addi	r2,r2,-4164
 1002ae4:	d9400e17 	ldw	r5,56(sp)
 1002ae8:	18800015 	stw	r2,0(r3)
 1002aec:	d8800d17 	ldw	r2,52(sp)
 1002af0:	00c00044 	movi	r3,1
 1002af4:	d8c00115 	stw	r3,4(sp)
 1002af8:	11000104 	addi	r4,r2,4
 1002afc:	10057cc0 	call	10057cc <_ZNSsC1ERKSs>
 1002b00:	d809883a 	mov	r4,sp
 1002b04:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1002b08:	dfc01317 	ldw	ra,76(sp)
 1002b0c:	df001217 	ldw	fp,72(sp)
 1002b10:	ddc01117 	ldw	r23,68(sp)
 1002b14:	dec01404 	addi	sp,sp,80
 1002b18:	f800283a 	ret
 1002b1c:	d8c00317 	ldw	r3,12(sp)
 1002b20:	d8800217 	ldw	r2,8(sp)
 1002b24:	d9000d17 	ldw	r4,52(sp)
 1002b28:	d8c00f15 	stw	r3,60(sp)
 1002b2c:	d8801015 	stw	r2,64(sp)
 1002b30:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1002b34:	d8c00f17 	ldw	r3,60(sp)
 1002b38:	00bfffc4 	movi	r2,-1
 1002b3c:	18800326 	beq	r3,r2,1002b4c <_ZNSt8ios_base7failureC2ERKSs+0xc0>
 1002b40:	d9001017 	ldw	r4,64(sp)
 1002b44:	d8800115 	stw	r2,4(sp)
 1002b48:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1002b4c:	d9001017 	ldw	r4,64(sp)
 1002b50:	00bfffc4 	movi	r2,-1
 1002b54:	d8800115 	stw	r2,4(sp)
 1002b58:	10081380 	call	1008138 <__cxa_call_unexpected>

01002b5c <_ZNSt8ios_base7failureD2Ev>:
 1002b5c:	deffeb04 	addi	sp,sp,-84
 1002b60:	00804074 	movhi	r2,257
 1002b64:	10a0ae04 	addi	r2,r2,-32072
 1002b68:	00c040b4 	movhi	r3,258
 1002b6c:	18faff04 	addi	r3,r3,-5124
 1002b70:	d8800715 	stw	r2,28(sp)
 1002b74:	d9001015 	stw	r4,64(sp)
 1002b78:	00804034 	movhi	r2,256
 1002b7c:	108b0804 	addi	r2,r2,11296
 1002b80:	d9000104 	addi	r4,sp,4
 1002b84:	d8c00815 	stw	r3,32(sp)
 1002b88:	d8800a15 	stw	r2,40(sp)
 1002b8c:	dfc01415 	stw	ra,80(sp)
 1002b90:	df001315 	stw	fp,76(sp)
 1002b94:	ddc01215 	stw	r23,72(sp)
 1002b98:	dec00915 	stw	sp,36(sp)
 1002b9c:	dec00b15 	stw	sp,44(sp)
 1002ba0:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1002ba4:	d8c01017 	ldw	r3,64(sp)
 1002ba8:	18800117 	ldw	r2,4(r3)
 1002bac:	00c040b4 	movhi	r3,258
 1002bb0:	18fbef04 	addi	r3,r3,-4164
 1002bb4:	10bffd04 	addi	r2,r2,-12
 1002bb8:	d8800e15 	stw	r2,56(sp)
 1002bbc:	d8801017 	ldw	r2,64(sp)
 1002bc0:	10c00015 	stw	r3,0(r2)
 1002bc4:	d8c00e17 	ldw	r3,56(sp)
 1002bc8:	008040b4 	movhi	r2,258
 1002bcc:	109bcf04 	addi	r2,r2,28476
 1002bd0:	1880091e 	bne	r3,r2,1002bf8 <_ZNSt8ios_base7failureD2Ev+0x9c>
 1002bd4:	d9001017 	ldw	r4,64(sp)
 1002bd8:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1002bdc:	d9000104 	addi	r4,sp,4
 1002be0:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1002be4:	dfc01417 	ldw	ra,80(sp)
 1002be8:	df001317 	ldw	fp,76(sp)
 1002bec:	ddc01217 	ldw	r23,72(sp)
 1002bf0:	dec01504 	addi	sp,sp,84
 1002bf4:	f800283a 	ret
 1002bf8:	00800044 	movi	r2,1
 1002bfc:	d8800215 	stw	r2,8(sp)
 1002c00:	19000204 	addi	r4,r3,8
 1002c04:	017fffc4 	movi	r5,-1
 1002c08:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002c0c:	00bff116 	blt	zero,r2,1002bd4 <_ZNSt8ios_base7failureD2Ev+0x78>
 1002c10:	d9000e17 	ldw	r4,56(sp)
 1002c14:	d80b883a 	mov	r5,sp
 1002c18:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002c1c:	003fed06 	br	1002bd4 <_ZNSt8ios_base7failureD2Ev+0x78>
 1002c20:	d8800417 	ldw	r2,16(sp)
 1002c24:	d8c00317 	ldw	r3,12(sp)
 1002c28:	d9001017 	ldw	r4,64(sp)
 1002c2c:	d8800f15 	stw	r2,60(sp)
 1002c30:	d8c01115 	stw	r3,68(sp)
 1002c34:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1002c38:	d8c00f17 	ldw	r3,60(sp)
 1002c3c:	00bfffc4 	movi	r2,-1
 1002c40:	18800326 	beq	r3,r2,1002c50 <_ZNSt8ios_base7failureD2Ev+0xf4>
 1002c44:	d9001117 	ldw	r4,68(sp)
 1002c48:	d8800215 	stw	r2,8(sp)
 1002c4c:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1002c50:	d9001117 	ldw	r4,68(sp)
 1002c54:	00bfffc4 	movi	r2,-1
 1002c58:	d8800215 	stw	r2,8(sp)
 1002c5c:	10081380 	call	1008138 <__cxa_call_unexpected>

01002c60 <_ZNSt8ios_base7failureD0Ev>:
 1002c60:	deffeb04 	addi	sp,sp,-84
 1002c64:	00804074 	movhi	r2,257
 1002c68:	10a0ae04 	addi	r2,r2,-32072
 1002c6c:	00c040b4 	movhi	r3,258
 1002c70:	18fb0304 	addi	r3,r3,-5108
 1002c74:	d8800715 	stw	r2,28(sp)
 1002c78:	d9001015 	stw	r4,64(sp)
 1002c7c:	00804034 	movhi	r2,256
 1002c80:	108b4b04 	addi	r2,r2,11564
 1002c84:	d9000104 	addi	r4,sp,4
 1002c88:	d8c00815 	stw	r3,32(sp)
 1002c8c:	d8800a15 	stw	r2,40(sp)
 1002c90:	dfc01415 	stw	ra,80(sp)
 1002c94:	df001315 	stw	fp,76(sp)
 1002c98:	ddc01215 	stw	r23,72(sp)
 1002c9c:	dec00915 	stw	sp,36(sp)
 1002ca0:	dec00b15 	stw	sp,44(sp)
 1002ca4:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1002ca8:	d8c01017 	ldw	r3,64(sp)
 1002cac:	18800117 	ldw	r2,4(r3)
 1002cb0:	00c040b4 	movhi	r3,258
 1002cb4:	18fbef04 	addi	r3,r3,-4164
 1002cb8:	10bffd04 	addi	r2,r2,-12
 1002cbc:	d8800e15 	stw	r2,56(sp)
 1002cc0:	d8801017 	ldw	r2,64(sp)
 1002cc4:	10c00015 	stw	r3,0(r2)
 1002cc8:	d8c00e17 	ldw	r3,56(sp)
 1002ccc:	008040b4 	movhi	r2,258
 1002cd0:	109bcf04 	addi	r2,r2,28476
 1002cd4:	18800b1e 	bne	r3,r2,1002d04 <_ZNSt8ios_base7failureD0Ev+0xa4>
 1002cd8:	d9001017 	ldw	r4,64(sp)
 1002cdc:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1002ce0:	d9001017 	ldw	r4,64(sp)
 1002ce4:	1008a880 	call	1008a88 <_ZdlPv>
 1002ce8:	d9000104 	addi	r4,sp,4
 1002cec:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1002cf0:	dfc01417 	ldw	ra,80(sp)
 1002cf4:	df001317 	ldw	fp,76(sp)
 1002cf8:	ddc01217 	ldw	r23,72(sp)
 1002cfc:	dec01504 	addi	sp,sp,84
 1002d00:	f800283a 	ret
 1002d04:	00800044 	movi	r2,1
 1002d08:	d8800215 	stw	r2,8(sp)
 1002d0c:	19000204 	addi	r4,r3,8
 1002d10:	017fffc4 	movi	r5,-1
 1002d14:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002d18:	00bfef16 	blt	zero,r2,1002cd8 <_ZNSt8ios_base7failureD0Ev+0x78>
 1002d1c:	d9000e17 	ldw	r4,56(sp)
 1002d20:	d80b883a 	mov	r5,sp
 1002d24:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002d28:	003feb06 	br	1002cd8 <_ZNSt8ios_base7failureD0Ev+0x78>
 1002d2c:	d8800417 	ldw	r2,16(sp)
 1002d30:	d8c00317 	ldw	r3,12(sp)
 1002d34:	d9001017 	ldw	r4,64(sp)
 1002d38:	d8800f15 	stw	r2,60(sp)
 1002d3c:	d8c01115 	stw	r3,68(sp)
 1002d40:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1002d44:	d8c00f17 	ldw	r3,60(sp)
 1002d48:	00bfffc4 	movi	r2,-1
 1002d4c:	18800326 	beq	r3,r2,1002d5c <_ZNSt8ios_base7failureD0Ev+0xfc>
 1002d50:	d9001117 	ldw	r4,68(sp)
 1002d54:	d8800215 	stw	r2,8(sp)
 1002d58:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1002d5c:	d9001117 	ldw	r4,68(sp)
 1002d60:	00bfffc4 	movi	r2,-1
 1002d64:	d8800215 	stw	r2,8(sp)
 1002d68:	10081380 	call	1008138 <__cxa_call_unexpected>

01002d6c <_ZNSt15_List_node_base8transferEPS_S0_>:
 1002d6c:	200f883a 	mov	r7,r4
 1002d70:	2811883a 	mov	r8,r5
 1002d74:	21800a26 	beq	r4,r6,1002da0 <_ZNSt15_List_node_base8transferEPS_S0_+0x34>
 1002d78:	30c00117 	ldw	r3,4(r6)
 1002d7c:	29400117 	ldw	r5,4(r5)
 1002d80:	21000117 	ldw	r4,4(r4)
 1002d84:	38c00115 	stw	r3,4(r7)
 1002d88:	40800117 	ldw	r2,4(r8)
 1002d8c:	19c00015 	stw	r7,0(r3)
 1002d90:	29800015 	stw	r6,0(r5)
 1002d94:	30800115 	stw	r2,4(r6)
 1002d98:	41000115 	stw	r4,4(r8)
 1002d9c:	22000015 	stw	r8,0(r4)
 1002da0:	f800283a 	ret

01002da4 <_ZNSt15_List_node_base4hookEPS_>:
 1002da4:	28c00117 	ldw	r3,4(r5)
 1002da8:	21400015 	stw	r5,0(r4)
 1002dac:	20c00115 	stw	r3,4(r4)
 1002db0:	28800117 	ldw	r2,4(r5)
 1002db4:	29000115 	stw	r4,4(r5)
 1002db8:	11000015 	stw	r4,0(r2)
 1002dbc:	f800283a 	ret

01002dc0 <_ZNSt15_List_node_base6unhookEv>:
 1002dc0:	20c00117 	ldw	r3,4(r4)
 1002dc4:	20800017 	ldw	r2,0(r4)
 1002dc8:	10c00115 	stw	r3,4(r2)
 1002dcc:	18800015 	stw	r2,0(r3)
 1002dd0:	f800283a 	ret

01002dd4 <_ZNSt15_List_node_base4swapERS_S0_>:
 1002dd4:	20c00017 	ldw	r3,0(r4)
 1002dd8:	20c01126 	beq	r4,r3,1002e20 <_ZNSt15_List_node_base4swapERS_S0_+0x4c>
 1002ddc:	28800017 	ldw	r2,0(r5)
 1002de0:	28801926 	beq	r5,r2,1002e48 <_ZNSt15_List_node_base4swapERS_S0_+0x74>
 1002de4:	20800015 	stw	r2,0(r4)
 1002de8:	28c00015 	stw	r3,0(r5)
 1002dec:	28800117 	ldw	r2,4(r5)
 1002df0:	20c00117 	ldw	r3,4(r4)
 1002df4:	20800115 	stw	r2,4(r4)
 1002df8:	28c00115 	stw	r3,4(r5)
 1002dfc:	20800017 	ldw	r2,0(r4)
 1002e00:	20c00117 	ldw	r3,4(r4)
 1002e04:	11000115 	stw	r4,4(r2)
 1002e08:	19000015 	stw	r4,0(r3)
 1002e0c:	28800017 	ldw	r2,0(r5)
 1002e10:	28c00117 	ldw	r3,4(r5)
 1002e14:	11400115 	stw	r5,4(r2)
 1002e18:	19400015 	stw	r5,0(r3)
 1002e1c:	f800283a 	ret
 1002e20:	28c00017 	ldw	r3,0(r5)
 1002e24:	28c00726 	beq	r5,r3,1002e44 <_ZNSt15_List_node_base4swapERS_S0_+0x70>
 1002e28:	28800117 	ldw	r2,4(r5)
 1002e2c:	20c00015 	stw	r3,0(r4)
 1002e30:	20800115 	stw	r2,4(r4)
 1002e34:	19000115 	stw	r4,4(r3)
 1002e38:	11000015 	stw	r4,0(r2)
 1002e3c:	29400115 	stw	r5,4(r5)
 1002e40:	29400015 	stw	r5,0(r5)
 1002e44:	f800283a 	ret
 1002e48:	20800117 	ldw	r2,4(r4)
 1002e4c:	28c00015 	stw	r3,0(r5)
 1002e50:	28800115 	stw	r2,4(r5)
 1002e54:	19400115 	stw	r5,4(r3)
 1002e58:	11400015 	stw	r5,0(r2)
 1002e5c:	21000115 	stw	r4,4(r4)
 1002e60:	21000015 	stw	r4,0(r4)
 1002e64:	f800283a 	ret

01002e68 <_ZNSt15_List_node_base7reverseEv>:
 1002e68:	200b883a 	mov	r5,r4
 1002e6c:	28800017 	ldw	r2,0(r5)
 1002e70:	28c00117 	ldw	r3,4(r5)
 1002e74:	28800115 	stw	r2,4(r5)
 1002e78:	28c00015 	stw	r3,0(r5)
 1002e7c:	100b883a 	mov	r5,r2
 1002e80:	20bffa1e 	bne	r4,r2,1002e6c <_ZNSt15_List_node_base7reverseEv+0x4>
 1002e84:	f800283a 	ret

01002e88 <_ZNKSt13runtime_error4whatEv>:
 1002e88:	20800117 	ldw	r2,4(r4)
 1002e8c:	f800283a 	ret

01002e90 <_ZNSt11logic_errorD1Ev>:
 1002e90:	deffeb04 	addi	sp,sp,-84
 1002e94:	00804074 	movhi	r2,257
 1002e98:	10a0ae04 	addi	r2,r2,-32072
 1002e9c:	00c040b4 	movhi	r3,258
 1002ea0:	18fb0704 	addi	r3,r3,-5092
 1002ea4:	d8800715 	stw	r2,28(sp)
 1002ea8:	d9001015 	stw	r4,64(sp)
 1002eac:	00804034 	movhi	r2,256
 1002eb0:	108bd504 	addi	r2,r2,12116
 1002eb4:	d9000104 	addi	r4,sp,4
 1002eb8:	d8c00815 	stw	r3,32(sp)
 1002ebc:	d8800a15 	stw	r2,40(sp)
 1002ec0:	dfc01415 	stw	ra,80(sp)
 1002ec4:	df001315 	stw	fp,76(sp)
 1002ec8:	ddc01215 	stw	r23,72(sp)
 1002ecc:	dec00915 	stw	sp,36(sp)
 1002ed0:	dec00b15 	stw	sp,44(sp)
 1002ed4:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1002ed8:	d8c01017 	ldw	r3,64(sp)
 1002edc:	18800117 	ldw	r2,4(r3)
 1002ee0:	00c040b4 	movhi	r3,258
 1002ee4:	18fc0204 	addi	r3,r3,-4088
 1002ee8:	10bffd04 	addi	r2,r2,-12
 1002eec:	d8800e15 	stw	r2,56(sp)
 1002ef0:	d8801017 	ldw	r2,64(sp)
 1002ef4:	10c00015 	stw	r3,0(r2)
 1002ef8:	d8c00e17 	ldw	r3,56(sp)
 1002efc:	008040b4 	movhi	r2,258
 1002f00:	109bcf04 	addi	r2,r2,28476
 1002f04:	1880091e 	bne	r3,r2,1002f2c <_ZNSt11logic_errorD1Ev+0x9c>
 1002f08:	d9001017 	ldw	r4,64(sp)
 1002f0c:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1002f10:	d9000104 	addi	r4,sp,4
 1002f14:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1002f18:	dfc01417 	ldw	ra,80(sp)
 1002f1c:	df001317 	ldw	fp,76(sp)
 1002f20:	ddc01217 	ldw	r23,72(sp)
 1002f24:	dec01504 	addi	sp,sp,84
 1002f28:	f800283a 	ret
 1002f2c:	00800044 	movi	r2,1
 1002f30:	d8800215 	stw	r2,8(sp)
 1002f34:	19000204 	addi	r4,r3,8
 1002f38:	017fffc4 	movi	r5,-1
 1002f3c:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002f40:	00bff116 	blt	zero,r2,1002f08 <_ZNSt11logic_errorD1Ev+0x78>
 1002f44:	d9000e17 	ldw	r4,56(sp)
 1002f48:	d80b883a 	mov	r5,sp
 1002f4c:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002f50:	003fed06 	br	1002f08 <_ZNSt11logic_errorD1Ev+0x78>
 1002f54:	d8800417 	ldw	r2,16(sp)
 1002f58:	d8c00317 	ldw	r3,12(sp)
 1002f5c:	d9001017 	ldw	r4,64(sp)
 1002f60:	d8800f15 	stw	r2,60(sp)
 1002f64:	d8c01115 	stw	r3,68(sp)
 1002f68:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1002f6c:	d8c00f17 	ldw	r3,60(sp)
 1002f70:	00bfffc4 	movi	r2,-1
 1002f74:	18800326 	beq	r3,r2,1002f84 <_ZNSt11logic_errorD1Ev+0xf4>
 1002f78:	d9001117 	ldw	r4,68(sp)
 1002f7c:	d8800215 	stw	r2,8(sp)
 1002f80:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1002f84:	d9001117 	ldw	r4,68(sp)
 1002f88:	00bfffc4 	movi	r2,-1
 1002f8c:	d8800215 	stw	r2,8(sp)
 1002f90:	10081380 	call	1008138 <__cxa_call_unexpected>

01002f94 <_ZNSt13runtime_errorC2ERKSs>:
 1002f94:	deffed04 	addi	sp,sp,-76
 1002f98:	00804074 	movhi	r2,257
 1002f9c:	10a0ae04 	addi	r2,r2,-32072
 1002fa0:	00c040b4 	movhi	r3,258
 1002fa4:	18fb0a44 	addi	r3,r3,-5079
 1002fa8:	d8800615 	stw	r2,24(sp)
 1002fac:	d9000d15 	stw	r4,52(sp)
 1002fb0:	00804034 	movhi	r2,256
 1002fb4:	108c0904 	addi	r2,r2,12324
 1002fb8:	d809883a 	mov	r4,sp
 1002fbc:	d8c00715 	stw	r3,28(sp)
 1002fc0:	d8800915 	stw	r2,36(sp)
 1002fc4:	d9400e15 	stw	r5,56(sp)
 1002fc8:	dfc01215 	stw	ra,72(sp)
 1002fcc:	df001115 	stw	fp,68(sp)
 1002fd0:	ddc01015 	stw	r23,64(sp)
 1002fd4:	dec00815 	stw	sp,32(sp)
 1002fd8:	dec00a15 	stw	sp,40(sp)
 1002fdc:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1002fe0:	d8c00d17 	ldw	r3,52(sp)
 1002fe4:	008040b4 	movhi	r2,258
 1002fe8:	10bbfd04 	addi	r2,r2,-4108
 1002fec:	d9400e17 	ldw	r5,56(sp)
 1002ff0:	18800015 	stw	r2,0(r3)
 1002ff4:	d8800d17 	ldw	r2,52(sp)
 1002ff8:	00c00044 	movi	r3,1
 1002ffc:	d8c00115 	stw	r3,4(sp)
 1003000:	11000104 	addi	r4,r2,4
 1003004:	10057cc0 	call	10057cc <_ZNSsC1ERKSs>
 1003008:	d809883a 	mov	r4,sp
 100300c:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1003010:	dfc01217 	ldw	ra,72(sp)
 1003014:	df001117 	ldw	fp,68(sp)
 1003018:	ddc01017 	ldw	r23,64(sp)
 100301c:	dec01304 	addi	sp,sp,76
 1003020:	f800283a 	ret
 1003024:	d8c00217 	ldw	r3,8(sp)
 1003028:	d9000d17 	ldw	r4,52(sp)
 100302c:	d8c00f15 	stw	r3,60(sp)
 1003030:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1003034:	d9000f17 	ldw	r4,60(sp)
 1003038:	00bfffc4 	movi	r2,-1
 100303c:	d8800115 	stw	r2,4(sp)
 1003040:	10094380 	call	1009438 <_Unwind_SjLj_Resume>

01003044 <_ZNSt15underflow_errorC1ERKSs>:
 1003044:	defffe04 	addi	sp,sp,-8
 1003048:	dc000015 	stw	r16,0(sp)
 100304c:	dfc00115 	stw	ra,4(sp)
 1003050:	2021883a 	mov	r16,r4
 1003054:	1002f940 	call	1002f94 <_ZNSt13runtime_errorC2ERKSs>
 1003058:	008040b4 	movhi	r2,258
 100305c:	10bb9c04 	addi	r2,r2,-4496
 1003060:	80800015 	stw	r2,0(r16)
 1003064:	dfc00117 	ldw	ra,4(sp)
 1003068:	dc000017 	ldw	r16,0(sp)
 100306c:	dec00204 	addi	sp,sp,8
 1003070:	f800283a 	ret

01003074 <_ZNSt15underflow_errorC2ERKSs>:
 1003074:	defffe04 	addi	sp,sp,-8
 1003078:	dc000015 	stw	r16,0(sp)
 100307c:	dfc00115 	stw	ra,4(sp)
 1003080:	2021883a 	mov	r16,r4
 1003084:	1002f940 	call	1002f94 <_ZNSt13runtime_errorC2ERKSs>
 1003088:	008040b4 	movhi	r2,258
 100308c:	10bb9c04 	addi	r2,r2,-4496
 1003090:	80800015 	stw	r2,0(r16)
 1003094:	dfc00117 	ldw	ra,4(sp)
 1003098:	dc000017 	ldw	r16,0(sp)
 100309c:	dec00204 	addi	sp,sp,8
 10030a0:	f800283a 	ret

010030a4 <_ZNSt14overflow_errorC1ERKSs>:
 10030a4:	defffe04 	addi	sp,sp,-8
 10030a8:	dc000015 	stw	r16,0(sp)
 10030ac:	dfc00115 	stw	ra,4(sp)
 10030b0:	2021883a 	mov	r16,r4
 10030b4:	1002f940 	call	1002f94 <_ZNSt13runtime_errorC2ERKSs>
 10030b8:	008040b4 	movhi	r2,258
 10030bc:	10bba904 	addi	r2,r2,-4444
 10030c0:	80800015 	stw	r2,0(r16)
 10030c4:	dfc00117 	ldw	ra,4(sp)
 10030c8:	dc000017 	ldw	r16,0(sp)
 10030cc:	dec00204 	addi	sp,sp,8
 10030d0:	f800283a 	ret

010030d4 <_ZNSt14overflow_errorC2ERKSs>:
 10030d4:	defffe04 	addi	sp,sp,-8
 10030d8:	dc000015 	stw	r16,0(sp)
 10030dc:	dfc00115 	stw	ra,4(sp)
 10030e0:	2021883a 	mov	r16,r4
 10030e4:	1002f940 	call	1002f94 <_ZNSt13runtime_errorC2ERKSs>
 10030e8:	008040b4 	movhi	r2,258
 10030ec:	10bba904 	addi	r2,r2,-4444
 10030f0:	80800015 	stw	r2,0(r16)
 10030f4:	dfc00117 	ldw	ra,4(sp)
 10030f8:	dc000017 	ldw	r16,0(sp)
 10030fc:	dec00204 	addi	sp,sp,8
 1003100:	f800283a 	ret

01003104 <_ZNSt11range_errorC1ERKSs>:
 1003104:	defffe04 	addi	sp,sp,-8
 1003108:	dc000015 	stw	r16,0(sp)
 100310c:	dfc00115 	stw	ra,4(sp)
 1003110:	2021883a 	mov	r16,r4
 1003114:	1002f940 	call	1002f94 <_ZNSt13runtime_errorC2ERKSs>
 1003118:	008040b4 	movhi	r2,258
 100311c:	10bbb504 	addi	r2,r2,-4396
 1003120:	80800015 	stw	r2,0(r16)
 1003124:	dfc00117 	ldw	ra,4(sp)
 1003128:	dc000017 	ldw	r16,0(sp)
 100312c:	dec00204 	addi	sp,sp,8
 1003130:	f800283a 	ret

01003134 <_ZNSt11range_errorC2ERKSs>:
 1003134:	defffe04 	addi	sp,sp,-8
 1003138:	dc000015 	stw	r16,0(sp)
 100313c:	dfc00115 	stw	ra,4(sp)
 1003140:	2021883a 	mov	r16,r4
 1003144:	1002f940 	call	1002f94 <_ZNSt13runtime_errorC2ERKSs>
 1003148:	008040b4 	movhi	r2,258
 100314c:	10bbb504 	addi	r2,r2,-4396
 1003150:	80800015 	stw	r2,0(r16)
 1003154:	dfc00117 	ldw	ra,4(sp)
 1003158:	dc000017 	ldw	r16,0(sp)
 100315c:	dec00204 	addi	sp,sp,8
 1003160:	f800283a 	ret

01003164 <_ZNSt11logic_errorC1ERKSs>:
 1003164:	deffed04 	addi	sp,sp,-76
 1003168:	00804074 	movhi	r2,257
 100316c:	10a0ae04 	addi	r2,r2,-32072
 1003170:	00c040b4 	movhi	r3,258
 1003174:	18fb0bc4 	addi	r3,r3,-5073
 1003178:	d8800615 	stw	r2,24(sp)
 100317c:	d9000d15 	stw	r4,52(sp)
 1003180:	00804034 	movhi	r2,256
 1003184:	108c7d04 	addi	r2,r2,12788
 1003188:	d809883a 	mov	r4,sp
 100318c:	d8c00715 	stw	r3,28(sp)
 1003190:	d8800915 	stw	r2,36(sp)
 1003194:	d9400e15 	stw	r5,56(sp)
 1003198:	dfc01215 	stw	ra,72(sp)
 100319c:	df001115 	stw	fp,68(sp)
 10031a0:	ddc01015 	stw	r23,64(sp)
 10031a4:	dec00815 	stw	sp,32(sp)
 10031a8:	dec00a15 	stw	sp,40(sp)
 10031ac:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 10031b0:	d8c00d17 	ldw	r3,52(sp)
 10031b4:	008040b4 	movhi	r2,258
 10031b8:	10bc0204 	addi	r2,r2,-4088
 10031bc:	d9400e17 	ldw	r5,56(sp)
 10031c0:	18800015 	stw	r2,0(r3)
 10031c4:	d8800d17 	ldw	r2,52(sp)
 10031c8:	00c00044 	movi	r3,1
 10031cc:	d8c00115 	stw	r3,4(sp)
 10031d0:	11000104 	addi	r4,r2,4
 10031d4:	10057cc0 	call	10057cc <_ZNSsC1ERKSs>
 10031d8:	d809883a 	mov	r4,sp
 10031dc:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 10031e0:	dfc01217 	ldw	ra,72(sp)
 10031e4:	df001117 	ldw	fp,68(sp)
 10031e8:	ddc01017 	ldw	r23,64(sp)
 10031ec:	dec01304 	addi	sp,sp,76
 10031f0:	f800283a 	ret
 10031f4:	d8c00217 	ldw	r3,8(sp)
 10031f8:	d9000d17 	ldw	r4,52(sp)
 10031fc:	d8c00f15 	stw	r3,60(sp)
 1003200:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1003204:	d9000f17 	ldw	r4,60(sp)
 1003208:	00bfffc4 	movi	r2,-1
 100320c:	d8800115 	stw	r2,4(sp)
 1003210:	10094380 	call	1009438 <_Unwind_SjLj_Resume>

01003214 <_ZNSt11logic_errorC2ERKSs>:
 1003214:	deffed04 	addi	sp,sp,-76
 1003218:	00804074 	movhi	r2,257
 100321c:	10a0ae04 	addi	r2,r2,-32072
 1003220:	00c040b4 	movhi	r3,258
 1003224:	18fb0d44 	addi	r3,r3,-5067
 1003228:	d8800615 	stw	r2,24(sp)
 100322c:	d9000d15 	stw	r4,52(sp)
 1003230:	00804034 	movhi	r2,256
 1003234:	108ca904 	addi	r2,r2,12964
 1003238:	d809883a 	mov	r4,sp
 100323c:	d8c00715 	stw	r3,28(sp)
 1003240:	d8800915 	stw	r2,36(sp)
 1003244:	d9400e15 	stw	r5,56(sp)
 1003248:	dfc01215 	stw	ra,72(sp)
 100324c:	df001115 	stw	fp,68(sp)
 1003250:	ddc01015 	stw	r23,64(sp)
 1003254:	dec00815 	stw	sp,32(sp)
 1003258:	dec00a15 	stw	sp,40(sp)
 100325c:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1003260:	d8c00d17 	ldw	r3,52(sp)
 1003264:	008040b4 	movhi	r2,258
 1003268:	10bc0204 	addi	r2,r2,-4088
 100326c:	d9400e17 	ldw	r5,56(sp)
 1003270:	18800015 	stw	r2,0(r3)
 1003274:	d8800d17 	ldw	r2,52(sp)
 1003278:	00c00044 	movi	r3,1
 100327c:	d8c00115 	stw	r3,4(sp)
 1003280:	11000104 	addi	r4,r2,4
 1003284:	10057cc0 	call	10057cc <_ZNSsC1ERKSs>
 1003288:	d809883a 	mov	r4,sp
 100328c:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1003290:	dfc01217 	ldw	ra,72(sp)
 1003294:	df001117 	ldw	fp,68(sp)
 1003298:	ddc01017 	ldw	r23,64(sp)
 100329c:	dec01304 	addi	sp,sp,76
 10032a0:	f800283a 	ret
 10032a4:	d8c00217 	ldw	r3,8(sp)
 10032a8:	d9000d17 	ldw	r4,52(sp)
 10032ac:	d8c00f15 	stw	r3,60(sp)
 10032b0:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 10032b4:	d9000f17 	ldw	r4,60(sp)
 10032b8:	00bfffc4 	movi	r2,-1
 10032bc:	d8800115 	stw	r2,4(sp)
 10032c0:	10094380 	call	1009438 <_Unwind_SjLj_Resume>

010032c4 <_ZNSt12out_of_rangeC1ERKSs>:
 10032c4:	defffe04 	addi	sp,sp,-8
 10032c8:	dc000015 	stw	r16,0(sp)
 10032cc:	dfc00115 	stw	ra,4(sp)
 10032d0:	2021883a 	mov	r16,r4
 10032d4:	10032140 	call	1003214 <_ZNSt11logic_errorC2ERKSs>
 10032d8:	008040b4 	movhi	r2,258
 10032dc:	10bbc204 	addi	r2,r2,-4344
 10032e0:	80800015 	stw	r2,0(r16)
 10032e4:	dfc00117 	ldw	ra,4(sp)
 10032e8:	dc000017 	ldw	r16,0(sp)
 10032ec:	dec00204 	addi	sp,sp,8
 10032f0:	f800283a 	ret

010032f4 <_ZNSt12out_of_rangeC2ERKSs>:
 10032f4:	defffe04 	addi	sp,sp,-8
 10032f8:	dc000015 	stw	r16,0(sp)
 10032fc:	dfc00115 	stw	ra,4(sp)
 1003300:	2021883a 	mov	r16,r4
 1003304:	10032140 	call	1003214 <_ZNSt11logic_errorC2ERKSs>
 1003308:	008040b4 	movhi	r2,258
 100330c:	10bbc204 	addi	r2,r2,-4344
 1003310:	80800015 	stw	r2,0(r16)
 1003314:	dfc00117 	ldw	ra,4(sp)
 1003318:	dc000017 	ldw	r16,0(sp)
 100331c:	dec00204 	addi	sp,sp,8
 1003320:	f800283a 	ret

01003324 <_ZNSt12length_errorC1ERKSs>:
 1003324:	defffe04 	addi	sp,sp,-8
 1003328:	dc000015 	stw	r16,0(sp)
 100332c:	dfc00115 	stw	ra,4(sp)
 1003330:	2021883a 	mov	r16,r4
 1003334:	10032140 	call	1003214 <_ZNSt11logic_errorC2ERKSs>
 1003338:	008040b4 	movhi	r2,258
 100333c:	10bbcf04 	addi	r2,r2,-4292
 1003340:	80800015 	stw	r2,0(r16)
 1003344:	dfc00117 	ldw	ra,4(sp)
 1003348:	dc000017 	ldw	r16,0(sp)
 100334c:	dec00204 	addi	sp,sp,8
 1003350:	f800283a 	ret

01003354 <_ZNSt12length_errorC2ERKSs>:
 1003354:	defffe04 	addi	sp,sp,-8
 1003358:	dc000015 	stw	r16,0(sp)
 100335c:	dfc00115 	stw	ra,4(sp)
 1003360:	2021883a 	mov	r16,r4
 1003364:	10032140 	call	1003214 <_ZNSt11logic_errorC2ERKSs>
 1003368:	008040b4 	movhi	r2,258
 100336c:	10bbcf04 	addi	r2,r2,-4292
 1003370:	80800015 	stw	r2,0(r16)
 1003374:	dfc00117 	ldw	ra,4(sp)
 1003378:	dc000017 	ldw	r16,0(sp)
 100337c:	dec00204 	addi	sp,sp,8
 1003380:	f800283a 	ret

01003384 <_ZNSt16invalid_argumentC1ERKSs>:
 1003384:	defffe04 	addi	sp,sp,-8
 1003388:	dc000015 	stw	r16,0(sp)
 100338c:	dfc00115 	stw	ra,4(sp)
 1003390:	2021883a 	mov	r16,r4
 1003394:	10032140 	call	1003214 <_ZNSt11logic_errorC2ERKSs>
 1003398:	008040b4 	movhi	r2,258
 100339c:	10bbdd04 	addi	r2,r2,-4236
 10033a0:	80800015 	stw	r2,0(r16)
 10033a4:	dfc00117 	ldw	ra,4(sp)
 10033a8:	dc000017 	ldw	r16,0(sp)
 10033ac:	dec00204 	addi	sp,sp,8
 10033b0:	f800283a 	ret

010033b4 <_ZNSt16invalid_argumentC2ERKSs>:
 10033b4:	defffe04 	addi	sp,sp,-8
 10033b8:	dc000015 	stw	r16,0(sp)
 10033bc:	dfc00115 	stw	ra,4(sp)
 10033c0:	2021883a 	mov	r16,r4
 10033c4:	10032140 	call	1003214 <_ZNSt11logic_errorC2ERKSs>
 10033c8:	008040b4 	movhi	r2,258
 10033cc:	10bbdd04 	addi	r2,r2,-4236
 10033d0:	80800015 	stw	r2,0(r16)
 10033d4:	dfc00117 	ldw	ra,4(sp)
 10033d8:	dc000017 	ldw	r16,0(sp)
 10033dc:	dec00204 	addi	sp,sp,8
 10033e0:	f800283a 	ret

010033e4 <_ZNSt12domain_errorC1ERKSs>:
 10033e4:	defffe04 	addi	sp,sp,-8
 10033e8:	dc000015 	stw	r16,0(sp)
 10033ec:	dfc00115 	stw	ra,4(sp)
 10033f0:	2021883a 	mov	r16,r4
 10033f4:	10032140 	call	1003214 <_ZNSt11logic_errorC2ERKSs>
 10033f8:	008040b4 	movhi	r2,258
 10033fc:	10bbea04 	addi	r2,r2,-4184
 1003400:	80800015 	stw	r2,0(r16)
 1003404:	dfc00117 	ldw	ra,4(sp)
 1003408:	dc000017 	ldw	r16,0(sp)
 100340c:	dec00204 	addi	sp,sp,8
 1003410:	f800283a 	ret

01003414 <_ZNSt12domain_errorC2ERKSs>:
 1003414:	defffe04 	addi	sp,sp,-8
 1003418:	dc000015 	stw	r16,0(sp)
 100341c:	dfc00115 	stw	ra,4(sp)
 1003420:	2021883a 	mov	r16,r4
 1003424:	10032140 	call	1003214 <_ZNSt11logic_errorC2ERKSs>
 1003428:	008040b4 	movhi	r2,258
 100342c:	10bbea04 	addi	r2,r2,-4184
 1003430:	80800015 	stw	r2,0(r16)
 1003434:	dfc00117 	ldw	ra,4(sp)
 1003438:	dc000017 	ldw	r16,0(sp)
 100343c:	dec00204 	addi	sp,sp,8
 1003440:	f800283a 	ret

01003444 <_ZNKSt11logic_error4whatEv>:
 1003444:	20800117 	ldw	r2,4(r4)
 1003448:	f800283a 	ret

0100344c <_ZNSt13runtime_errorC1ERKSs>:
 100344c:	deffed04 	addi	sp,sp,-76
 1003450:	00804074 	movhi	r2,257
 1003454:	10a0ae04 	addi	r2,r2,-32072
 1003458:	00c040b4 	movhi	r3,258
 100345c:	18fb0ec4 	addi	r3,r3,-5061
 1003460:	d8800615 	stw	r2,24(sp)
 1003464:	d9000d15 	stw	r4,52(sp)
 1003468:	00804034 	movhi	r2,256
 100346c:	108d3704 	addi	r2,r2,13532
 1003470:	d809883a 	mov	r4,sp
 1003474:	d8c00715 	stw	r3,28(sp)
 1003478:	d8800915 	stw	r2,36(sp)
 100347c:	d9400e15 	stw	r5,56(sp)
 1003480:	dfc01215 	stw	ra,72(sp)
 1003484:	df001115 	stw	fp,68(sp)
 1003488:	ddc01015 	stw	r23,64(sp)
 100348c:	dec00815 	stw	sp,32(sp)
 1003490:	dec00a15 	stw	sp,40(sp)
 1003494:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1003498:	d8c00d17 	ldw	r3,52(sp)
 100349c:	008040b4 	movhi	r2,258
 10034a0:	10bbfd04 	addi	r2,r2,-4108
 10034a4:	d9400e17 	ldw	r5,56(sp)
 10034a8:	18800015 	stw	r2,0(r3)
 10034ac:	d8800d17 	ldw	r2,52(sp)
 10034b0:	00c00044 	movi	r3,1
 10034b4:	d8c00115 	stw	r3,4(sp)
 10034b8:	11000104 	addi	r4,r2,4
 10034bc:	10057cc0 	call	10057cc <_ZNSsC1ERKSs>
 10034c0:	d809883a 	mov	r4,sp
 10034c4:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 10034c8:	dfc01217 	ldw	ra,72(sp)
 10034cc:	df001117 	ldw	fp,68(sp)
 10034d0:	ddc01017 	ldw	r23,64(sp)
 10034d4:	dec01304 	addi	sp,sp,76
 10034d8:	f800283a 	ret
 10034dc:	d8c00217 	ldw	r3,8(sp)
 10034e0:	d9000d17 	ldw	r4,52(sp)
 10034e4:	d8c00f15 	stw	r3,60(sp)
 10034e8:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 10034ec:	d9000f17 	ldw	r4,60(sp)
 10034f0:	00bfffc4 	movi	r2,-1
 10034f4:	d8800115 	stw	r2,4(sp)
 10034f8:	10094380 	call	1009438 <_Unwind_SjLj_Resume>

010034fc <_ZNSt13runtime_errorD1Ev>:
 10034fc:	deffeb04 	addi	sp,sp,-84
 1003500:	00804074 	movhi	r2,257
 1003504:	10a0ae04 	addi	r2,r2,-32072
 1003508:	00c040b4 	movhi	r3,258
 100350c:	18fb1104 	addi	r3,r3,-5052
 1003510:	d8800715 	stw	r2,28(sp)
 1003514:	d9001015 	stw	r4,64(sp)
 1003518:	00804034 	movhi	r2,256
 100351c:	108d7004 	addi	r2,r2,13760
 1003520:	d9000104 	addi	r4,sp,4
 1003524:	d8c00815 	stw	r3,32(sp)
 1003528:	d8800a15 	stw	r2,40(sp)
 100352c:	dfc01415 	stw	ra,80(sp)
 1003530:	df001315 	stw	fp,76(sp)
 1003534:	ddc01215 	stw	r23,72(sp)
 1003538:	dec00915 	stw	sp,36(sp)
 100353c:	dec00b15 	stw	sp,44(sp)
 1003540:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1003544:	d8c01017 	ldw	r3,64(sp)
 1003548:	18800117 	ldw	r2,4(r3)
 100354c:	00c040b4 	movhi	r3,258
 1003550:	18fbfd04 	addi	r3,r3,-4108
 1003554:	10bffd04 	addi	r2,r2,-12
 1003558:	d8800e15 	stw	r2,56(sp)
 100355c:	d8801017 	ldw	r2,64(sp)
 1003560:	10c00015 	stw	r3,0(r2)
 1003564:	d8c00e17 	ldw	r3,56(sp)
 1003568:	008040b4 	movhi	r2,258
 100356c:	109bcf04 	addi	r2,r2,28476
 1003570:	1880091e 	bne	r3,r2,1003598 <_ZNSt13runtime_errorD1Ev+0x9c>
 1003574:	d9001017 	ldw	r4,64(sp)
 1003578:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 100357c:	d9000104 	addi	r4,sp,4
 1003580:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1003584:	dfc01417 	ldw	ra,80(sp)
 1003588:	df001317 	ldw	fp,76(sp)
 100358c:	ddc01217 	ldw	r23,72(sp)
 1003590:	dec01504 	addi	sp,sp,84
 1003594:	f800283a 	ret
 1003598:	00800044 	movi	r2,1
 100359c:	d8800215 	stw	r2,8(sp)
 10035a0:	19000204 	addi	r4,r3,8
 10035a4:	017fffc4 	movi	r5,-1
 10035a8:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10035ac:	00bff116 	blt	zero,r2,1003574 <_ZNSt13runtime_errorD1Ev+0x78>
 10035b0:	d9000e17 	ldw	r4,56(sp)
 10035b4:	d80b883a 	mov	r5,sp
 10035b8:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10035bc:	003fed06 	br	1003574 <_ZNSt13runtime_errorD1Ev+0x78>
 10035c0:	d8800417 	ldw	r2,16(sp)
 10035c4:	d8c00317 	ldw	r3,12(sp)
 10035c8:	d9001017 	ldw	r4,64(sp)
 10035cc:	d8800f15 	stw	r2,60(sp)
 10035d0:	d8c01115 	stw	r3,68(sp)
 10035d4:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 10035d8:	d8c00f17 	ldw	r3,60(sp)
 10035dc:	00bfffc4 	movi	r2,-1
 10035e0:	18800326 	beq	r3,r2,10035f0 <_ZNSt13runtime_errorD1Ev+0xf4>
 10035e4:	d9001117 	ldw	r4,68(sp)
 10035e8:	d8800215 	stw	r2,8(sp)
 10035ec:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 10035f0:	d9001117 	ldw	r4,68(sp)
 10035f4:	00bfffc4 	movi	r2,-1
 10035f8:	d8800215 	stw	r2,8(sp)
 10035fc:	10081380 	call	1008138 <__cxa_call_unexpected>

01003600 <_ZNSt13runtime_errorD2Ev>:
 1003600:	deffeb04 	addi	sp,sp,-84
 1003604:	00804074 	movhi	r2,257
 1003608:	10a0ae04 	addi	r2,r2,-32072
 100360c:	00c040b4 	movhi	r3,258
 1003610:	18fb1504 	addi	r3,r3,-5036
 1003614:	d8800715 	stw	r2,28(sp)
 1003618:	d9001015 	stw	r4,64(sp)
 100361c:	00804034 	movhi	r2,256
 1003620:	108db104 	addi	r2,r2,14020
 1003624:	d9000104 	addi	r4,sp,4
 1003628:	d8c00815 	stw	r3,32(sp)
 100362c:	d8800a15 	stw	r2,40(sp)
 1003630:	dfc01415 	stw	ra,80(sp)
 1003634:	df001315 	stw	fp,76(sp)
 1003638:	ddc01215 	stw	r23,72(sp)
 100363c:	dec00915 	stw	sp,36(sp)
 1003640:	dec00b15 	stw	sp,44(sp)
 1003644:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1003648:	d8c01017 	ldw	r3,64(sp)
 100364c:	18800117 	ldw	r2,4(r3)
 1003650:	00c040b4 	movhi	r3,258
 1003654:	18fbfd04 	addi	r3,r3,-4108
 1003658:	10bffd04 	addi	r2,r2,-12
 100365c:	d8800e15 	stw	r2,56(sp)
 1003660:	d8801017 	ldw	r2,64(sp)
 1003664:	10c00015 	stw	r3,0(r2)
 1003668:	d8c00e17 	ldw	r3,56(sp)
 100366c:	008040b4 	movhi	r2,258
 1003670:	109bcf04 	addi	r2,r2,28476
 1003674:	1880091e 	bne	r3,r2,100369c <_ZNSt13runtime_errorD2Ev+0x9c>
 1003678:	d9001017 	ldw	r4,64(sp)
 100367c:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1003680:	d9000104 	addi	r4,sp,4
 1003684:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1003688:	dfc01417 	ldw	ra,80(sp)
 100368c:	df001317 	ldw	fp,76(sp)
 1003690:	ddc01217 	ldw	r23,72(sp)
 1003694:	dec01504 	addi	sp,sp,84
 1003698:	f800283a 	ret
 100369c:	00800044 	movi	r2,1
 10036a0:	d8800215 	stw	r2,8(sp)
 10036a4:	19000204 	addi	r4,r3,8
 10036a8:	017fffc4 	movi	r5,-1
 10036ac:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10036b0:	00bff116 	blt	zero,r2,1003678 <_ZNSt13runtime_errorD2Ev+0x78>
 10036b4:	d9000e17 	ldw	r4,56(sp)
 10036b8:	d80b883a 	mov	r5,sp
 10036bc:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10036c0:	003fed06 	br	1003678 <_ZNSt13runtime_errorD2Ev+0x78>
 10036c4:	d8800417 	ldw	r2,16(sp)
 10036c8:	d8c00317 	ldw	r3,12(sp)
 10036cc:	d9001017 	ldw	r4,64(sp)
 10036d0:	d8800f15 	stw	r2,60(sp)
 10036d4:	d8c01115 	stw	r3,68(sp)
 10036d8:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 10036dc:	d8c00f17 	ldw	r3,60(sp)
 10036e0:	00bfffc4 	movi	r2,-1
 10036e4:	18800326 	beq	r3,r2,10036f4 <_ZNSt13runtime_errorD2Ev+0xf4>
 10036e8:	d9001117 	ldw	r4,68(sp)
 10036ec:	d8800215 	stw	r2,8(sp)
 10036f0:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 10036f4:	d9001117 	ldw	r4,68(sp)
 10036f8:	00bfffc4 	movi	r2,-1
 10036fc:	d8800215 	stw	r2,8(sp)
 1003700:	10081380 	call	1008138 <__cxa_call_unexpected>

01003704 <_ZNSt13runtime_errorD0Ev>:
 1003704:	deffeb04 	addi	sp,sp,-84
 1003708:	00804074 	movhi	r2,257
 100370c:	10a0ae04 	addi	r2,r2,-32072
 1003710:	00c040b4 	movhi	r3,258
 1003714:	18fb1904 	addi	r3,r3,-5020
 1003718:	d8800715 	stw	r2,28(sp)
 100371c:	d9001015 	stw	r4,64(sp)
 1003720:	00804034 	movhi	r2,256
 1003724:	108df404 	addi	r2,r2,14288
 1003728:	d9000104 	addi	r4,sp,4
 100372c:	d8c00815 	stw	r3,32(sp)
 1003730:	d8800a15 	stw	r2,40(sp)
 1003734:	dfc01415 	stw	ra,80(sp)
 1003738:	df001315 	stw	fp,76(sp)
 100373c:	ddc01215 	stw	r23,72(sp)
 1003740:	dec00915 	stw	sp,36(sp)
 1003744:	dec00b15 	stw	sp,44(sp)
 1003748:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 100374c:	d8c01017 	ldw	r3,64(sp)
 1003750:	18800117 	ldw	r2,4(r3)
 1003754:	00c040b4 	movhi	r3,258
 1003758:	18fbfd04 	addi	r3,r3,-4108
 100375c:	10bffd04 	addi	r2,r2,-12
 1003760:	d8800e15 	stw	r2,56(sp)
 1003764:	d8801017 	ldw	r2,64(sp)
 1003768:	10c00015 	stw	r3,0(r2)
 100376c:	d8c00e17 	ldw	r3,56(sp)
 1003770:	008040b4 	movhi	r2,258
 1003774:	109bcf04 	addi	r2,r2,28476
 1003778:	18800b1e 	bne	r3,r2,10037a8 <_ZNSt13runtime_errorD0Ev+0xa4>
 100377c:	d9001017 	ldw	r4,64(sp)
 1003780:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1003784:	d9001017 	ldw	r4,64(sp)
 1003788:	1008a880 	call	1008a88 <_ZdlPv>
 100378c:	d9000104 	addi	r4,sp,4
 1003790:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1003794:	dfc01417 	ldw	ra,80(sp)
 1003798:	df001317 	ldw	fp,76(sp)
 100379c:	ddc01217 	ldw	r23,72(sp)
 10037a0:	dec01504 	addi	sp,sp,84
 10037a4:	f800283a 	ret
 10037a8:	00800044 	movi	r2,1
 10037ac:	d8800215 	stw	r2,8(sp)
 10037b0:	19000204 	addi	r4,r3,8
 10037b4:	017fffc4 	movi	r5,-1
 10037b8:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10037bc:	00bfef16 	blt	zero,r2,100377c <_ZNSt13runtime_errorD0Ev+0x78>
 10037c0:	d9000e17 	ldw	r4,56(sp)
 10037c4:	d80b883a 	mov	r5,sp
 10037c8:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10037cc:	003feb06 	br	100377c <_ZNSt13runtime_errorD0Ev+0x78>
 10037d0:	d8800417 	ldw	r2,16(sp)
 10037d4:	d8c00317 	ldw	r3,12(sp)
 10037d8:	d9001017 	ldw	r4,64(sp)
 10037dc:	d8800f15 	stw	r2,60(sp)
 10037e0:	d8c01115 	stw	r3,68(sp)
 10037e4:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 10037e8:	d8c00f17 	ldw	r3,60(sp)
 10037ec:	00bfffc4 	movi	r2,-1
 10037f0:	18800326 	beq	r3,r2,1003800 <_ZNSt13runtime_errorD0Ev+0xfc>
 10037f4:	d9001117 	ldw	r4,68(sp)
 10037f8:	d8800215 	stw	r2,8(sp)
 10037fc:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1003800:	d9001117 	ldw	r4,68(sp)
 1003804:	00bfffc4 	movi	r2,-1
 1003808:	d8800215 	stw	r2,8(sp)
 100380c:	10081380 	call	1008138 <__cxa_call_unexpected>

01003810 <_ZNSt11logic_errorD2Ev>:
 1003810:	deffeb04 	addi	sp,sp,-84
 1003814:	00804074 	movhi	r2,257
 1003818:	10a0ae04 	addi	r2,r2,-32072
 100381c:	00c040b4 	movhi	r3,258
 1003820:	18fb1d04 	addi	r3,r3,-5004
 1003824:	d8800715 	stw	r2,28(sp)
 1003828:	d9001015 	stw	r4,64(sp)
 100382c:	00804034 	movhi	r2,256
 1003830:	108e3504 	addi	r2,r2,14548
 1003834:	d9000104 	addi	r4,sp,4
 1003838:	d8c00815 	stw	r3,32(sp)
 100383c:	d8800a15 	stw	r2,40(sp)
 1003840:	dfc01415 	stw	ra,80(sp)
 1003844:	df001315 	stw	fp,76(sp)
 1003848:	ddc01215 	stw	r23,72(sp)
 100384c:	dec00915 	stw	sp,36(sp)
 1003850:	dec00b15 	stw	sp,44(sp)
 1003854:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1003858:	d8c01017 	ldw	r3,64(sp)
 100385c:	18800117 	ldw	r2,4(r3)
 1003860:	00c040b4 	movhi	r3,258
 1003864:	18fc0204 	addi	r3,r3,-4088
 1003868:	10bffd04 	addi	r2,r2,-12
 100386c:	d8800e15 	stw	r2,56(sp)
 1003870:	d8801017 	ldw	r2,64(sp)
 1003874:	10c00015 	stw	r3,0(r2)
 1003878:	d8c00e17 	ldw	r3,56(sp)
 100387c:	008040b4 	movhi	r2,258
 1003880:	109bcf04 	addi	r2,r2,28476
 1003884:	1880091e 	bne	r3,r2,10038ac <_ZNSt11logic_errorD2Ev+0x9c>
 1003888:	d9001017 	ldw	r4,64(sp)
 100388c:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1003890:	d9000104 	addi	r4,sp,4
 1003894:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1003898:	dfc01417 	ldw	ra,80(sp)
 100389c:	df001317 	ldw	fp,76(sp)
 10038a0:	ddc01217 	ldw	r23,72(sp)
 10038a4:	dec01504 	addi	sp,sp,84
 10038a8:	f800283a 	ret
 10038ac:	00800044 	movi	r2,1
 10038b0:	d8800215 	stw	r2,8(sp)
 10038b4:	19000204 	addi	r4,r3,8
 10038b8:	017fffc4 	movi	r5,-1
 10038bc:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10038c0:	00bff116 	blt	zero,r2,1003888 <_ZNSt11logic_errorD2Ev+0x78>
 10038c4:	d9000e17 	ldw	r4,56(sp)
 10038c8:	d80b883a 	mov	r5,sp
 10038cc:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10038d0:	003fed06 	br	1003888 <_ZNSt11logic_errorD2Ev+0x78>
 10038d4:	d8800417 	ldw	r2,16(sp)
 10038d8:	d8c00317 	ldw	r3,12(sp)
 10038dc:	d9001017 	ldw	r4,64(sp)
 10038e0:	d8800f15 	stw	r2,60(sp)
 10038e4:	d8c01115 	stw	r3,68(sp)
 10038e8:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 10038ec:	d8c00f17 	ldw	r3,60(sp)
 10038f0:	00bfffc4 	movi	r2,-1
 10038f4:	18800326 	beq	r3,r2,1003904 <_ZNSt11logic_errorD2Ev+0xf4>
 10038f8:	d9001117 	ldw	r4,68(sp)
 10038fc:	d8800215 	stw	r2,8(sp)
 1003900:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1003904:	d9001117 	ldw	r4,68(sp)
 1003908:	00bfffc4 	movi	r2,-1
 100390c:	d8800215 	stw	r2,8(sp)
 1003910:	10081380 	call	1008138 <__cxa_call_unexpected>

01003914 <_ZNSt11logic_errorD0Ev>:
 1003914:	deffeb04 	addi	sp,sp,-84
 1003918:	00804074 	movhi	r2,257
 100391c:	10a0ae04 	addi	r2,r2,-32072
 1003920:	00c040b4 	movhi	r3,258
 1003924:	18fb2104 	addi	r3,r3,-4988
 1003928:	d8800715 	stw	r2,28(sp)
 100392c:	d9001015 	stw	r4,64(sp)
 1003930:	00804034 	movhi	r2,256
 1003934:	108e7804 	addi	r2,r2,14816
 1003938:	d9000104 	addi	r4,sp,4
 100393c:	d8c00815 	stw	r3,32(sp)
 1003940:	d8800a15 	stw	r2,40(sp)
 1003944:	dfc01415 	stw	ra,80(sp)
 1003948:	df001315 	stw	fp,76(sp)
 100394c:	ddc01215 	stw	r23,72(sp)
 1003950:	dec00915 	stw	sp,36(sp)
 1003954:	dec00b15 	stw	sp,44(sp)
 1003958:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 100395c:	d8c01017 	ldw	r3,64(sp)
 1003960:	18800117 	ldw	r2,4(r3)
 1003964:	00c040b4 	movhi	r3,258
 1003968:	18fc0204 	addi	r3,r3,-4088
 100396c:	10bffd04 	addi	r2,r2,-12
 1003970:	d8800e15 	stw	r2,56(sp)
 1003974:	d8801017 	ldw	r2,64(sp)
 1003978:	10c00015 	stw	r3,0(r2)
 100397c:	d8c00e17 	ldw	r3,56(sp)
 1003980:	008040b4 	movhi	r2,258
 1003984:	109bcf04 	addi	r2,r2,28476
 1003988:	18800b1e 	bne	r3,r2,10039b8 <_ZNSt11logic_errorD0Ev+0xa4>
 100398c:	d9001017 	ldw	r4,64(sp)
 1003990:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1003994:	d9001017 	ldw	r4,64(sp)
 1003998:	1008a880 	call	1008a88 <_ZdlPv>
 100399c:	d9000104 	addi	r4,sp,4
 10039a0:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 10039a4:	dfc01417 	ldw	ra,80(sp)
 10039a8:	df001317 	ldw	fp,76(sp)
 10039ac:	ddc01217 	ldw	r23,72(sp)
 10039b0:	dec01504 	addi	sp,sp,84
 10039b4:	f800283a 	ret
 10039b8:	00800044 	movi	r2,1
 10039bc:	d8800215 	stw	r2,8(sp)
 10039c0:	19000204 	addi	r4,r3,8
 10039c4:	017fffc4 	movi	r5,-1
 10039c8:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10039cc:	00bfef16 	blt	zero,r2,100398c <_ZNSt11logic_errorD0Ev+0x78>
 10039d0:	d9000e17 	ldw	r4,56(sp)
 10039d4:	d80b883a 	mov	r5,sp
 10039d8:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10039dc:	003feb06 	br	100398c <_ZNSt11logic_errorD0Ev+0x78>
 10039e0:	d8800417 	ldw	r2,16(sp)
 10039e4:	d8c00317 	ldw	r3,12(sp)
 10039e8:	d9001017 	ldw	r4,64(sp)
 10039ec:	d8800f15 	stw	r2,60(sp)
 10039f0:	d8c01115 	stw	r3,68(sp)
 10039f4:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 10039f8:	d8c00f17 	ldw	r3,60(sp)
 10039fc:	00bfffc4 	movi	r2,-1
 1003a00:	18800326 	beq	r3,r2,1003a10 <_ZNSt11logic_errorD0Ev+0xfc>
 1003a04:	d9001117 	ldw	r4,68(sp)
 1003a08:	d8800215 	stw	r2,8(sp)
 1003a0c:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1003a10:	d9001117 	ldw	r4,68(sp)
 1003a14:	00bfffc4 	movi	r2,-1
 1003a18:	d8800215 	stw	r2,8(sp)
 1003a1c:	10081380 	call	1008138 <__cxa_call_unexpected>

01003a20 <_ZNSt11char_traitsIcE2eqERKcS2_>:
 1003a20:	20c00007 	ldb	r3,0(r4)
 1003a24:	28800007 	ldb	r2,0(r5)
 1003a28:	1885003a 	cmpeq	r2,r3,r2
 1003a2c:	f800283a 	ret

01003a30 <_ZNKSs7_M_dataEv>:
 1003a30:	20800017 	ldw	r2,0(r4)
 1003a34:	f800283a 	ret

01003a38 <_ZNSs7_M_dataEPc>:
 1003a38:	2805883a 	mov	r2,r5
 1003a3c:	21400015 	stw	r5,0(r4)
 1003a40:	f800283a 	ret

01003a44 <_ZNKSs6_M_repEv>:
 1003a44:	20800017 	ldw	r2,0(r4)
 1003a48:	10bffd04 	addi	r2,r2,-12
 1003a4c:	f800283a 	ret

01003a50 <_ZNKSs9_M_ibeginEv>:
 1003a50:	20800017 	ldw	r2,0(r4)
 1003a54:	f800283a 	ret

01003a58 <_ZNKSs7_M_iendEv>:
 1003a58:	20c00017 	ldw	r3,0(r4)
 1003a5c:	18bffd17 	ldw	r2,-12(r3)
 1003a60:	1885883a 	add	r2,r3,r2
 1003a64:	f800283a 	ret

01003a68 <_ZNKSs8_M_limitEmm>:
 1003a68:	20c00017 	ldw	r3,0(r4)
 1003a6c:	18bffd17 	ldw	r2,-12(r3)
 1003a70:	1145c83a 	sub	r2,r2,r5
 1003a74:	3080012e 	bgeu	r6,r2,1003a7c <_ZNKSs8_M_limitEmm+0x14>
 1003a78:	3005883a 	mov	r2,r6
 1003a7c:	f800283a 	ret

01003a80 <_ZNKSs11_M_disjunctEPKc>:
 1003a80:	21000017 	ldw	r4,0(r4)
 1003a84:	00800044 	movi	r2,1
 1003a88:	29000336 	bltu	r5,r4,1003a98 <_ZNKSs11_M_disjunctEPKc+0x18>
 1003a8c:	20bffd17 	ldw	r2,-12(r4)
 1003a90:	2085883a 	add	r2,r4,r2
 1003a94:	1145803a 	cmpltu	r2,r2,r5
 1003a98:	f800283a 	ret

01003a9c <_ZNSs12_S_empty_repEv>:
 1003a9c:	008040b4 	movhi	r2,258
 1003aa0:	109bcf04 	addi	r2,r2,28476
 1003aa4:	f800283a 	ret

01003aa8 <_ZNSsC1Ev>:
 1003aa8:	008040b4 	movhi	r2,258
 1003aac:	109bd204 	addi	r2,r2,28488
 1003ab0:	20800015 	stw	r2,0(r4)
 1003ab4:	f800283a 	ret

01003ab8 <_ZNKSs5beginEv>:
 1003ab8:	20800017 	ldw	r2,0(r4)
 1003abc:	f800283a 	ret

01003ac0 <_ZNKSs3endEv>:
 1003ac0:	20c00017 	ldw	r3,0(r4)
 1003ac4:	18bffd17 	ldw	r2,-12(r3)
 1003ac8:	1885883a 	add	r2,r3,r2
 1003acc:	f800283a 	ret

01003ad0 <_ZNKSs4sizeEv>:
 1003ad0:	20c00017 	ldw	r3,0(r4)
 1003ad4:	18bffd17 	ldw	r2,-12(r3)
 1003ad8:	f800283a 	ret

01003adc <_ZNKSs8max_sizeEv>:
 1003adc:	00900034 	movhi	r2,16384
 1003ae0:	10bfff04 	addi	r2,r2,-4
 1003ae4:	f800283a 	ret

01003ae8 <_ZNKSs8capacityEv>:
 1003ae8:	20c00017 	ldw	r3,0(r4)
 1003aec:	18bffe17 	ldw	r2,-8(r3)
 1003af0:	f800283a 	ret

01003af4 <_ZNKSs4dataEv>:
 1003af4:	20800017 	ldw	r2,0(r4)
 1003af8:	f800283a 	ret

01003afc <_ZNKSs13get_allocatorEv>:
 1003afc:	2005883a 	mov	r2,r4
 1003b00:	f800283a 	ret

01003b04 <_ZNSs12_Alloc_hiderC1EPcRKSaIcE>:
 1003b04:	21400015 	stw	r5,0(r4)
 1003b08:	f800283a 	ret

01003b0c <_ZNSs4_Rep12_S_empty_repEv>:
 1003b0c:	008040b4 	movhi	r2,258
 1003b10:	109bcf04 	addi	r2,r2,28476
 1003b14:	f800283a 	ret

01003b18 <_ZNKSs4_Rep12_M_is_leakedEv>:
 1003b18:	20800217 	ldw	r2,8(r4)
 1003b1c:	1004d7fa 	srli	r2,r2,31
 1003b20:	f800283a 	ret

01003b24 <_ZNKSs4_Rep12_M_is_sharedEv>:
 1003b24:	20800217 	ldw	r2,8(r4)
 1003b28:	0084803a 	cmplt	r2,zero,r2
 1003b2c:	f800283a 	ret

01003b30 <_ZNSs4_Rep13_M_set_leakedEv>:
 1003b30:	00bfffc4 	movi	r2,-1
 1003b34:	20800215 	stw	r2,8(r4)
 1003b38:	f800283a 	ret

01003b3c <_ZNSs4_Rep15_M_set_sharableEv>:
 1003b3c:	20000215 	stw	zero,8(r4)
 1003b40:	f800283a 	ret

01003b44 <_ZNSs4_Rep26_M_set_length_and_sharableEm>:
 1003b44:	2145883a 	add	r2,r4,r5
 1003b48:	20000215 	stw	zero,8(r4)
 1003b4c:	21400015 	stw	r5,0(r4)
 1003b50:	10000305 	stb	zero,12(r2)
 1003b54:	f800283a 	ret

01003b58 <_ZNSs4_Rep10_M_refdataEv>:
 1003b58:	20800304 	addi	r2,r4,12
 1003b5c:	f800283a 	ret

01003b60 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_>:
 1003b60:	defff504 	addi	sp,sp,-44
 1003b64:	dd400615 	stw	r21,24(sp)
 1003b68:	dd000515 	stw	r20,20(sp)
 1003b6c:	dcc00415 	stw	r19,16(sp)
 1003b70:	dc800315 	stw	r18,12(sp)
 1003b74:	dc400215 	stw	r17,8(sp)
 1003b78:	dfc00a15 	stw	ra,40(sp)
 1003b7c:	df000915 	stw	fp,36(sp)
 1003b80:	ddc00815 	stw	r23,32(sp)
 1003b84:	dd800715 	stw	r22,28(sp)
 1003b88:	dc000115 	stw	r16,4(sp)
 1003b8c:	2025883a 	mov	r18,r4
 1003b90:	2823883a 	mov	r17,r5
 1003b94:	3027883a 	mov	r19,r6
 1003b98:	382b883a 	mov	r21,r7
 1003b9c:	dd000b17 	ldw	r20,44(sp)
 1003ba0:	21400d26 	beq	r4,r5,1003bd8 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1003ba4:	31c00c26 	beq	r6,r7,1003bd8 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1003ba8:	30800044 	addi	r2,r6,1
 1003bac:	d8800015 	stw	r2,0(sp)
 1003bb0:	38803226 	beq	r7,r2,1003c7c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x11c>
 1003bb4:	9021883a 	mov	r16,r18
 1003bb8:	8009883a 	mov	r4,r16
 1003bbc:	980b883a 	mov	r5,r19
 1003bc0:	a03ee83a 	callr	r20
 1003bc4:	10803fcc 	andi	r2,r2,255
 1003bc8:	1000101e 	bne	r2,zero,1003c0c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xac>
 1003bcc:	84000044 	addi	r16,r16,1
 1003bd0:	847ff91e 	bne	r16,r17,1003bb8 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x58>
 1003bd4:	8825883a 	mov	r18,r17
 1003bd8:	9005883a 	mov	r2,r18
 1003bdc:	dfc00a17 	ldw	ra,40(sp)
 1003be0:	df000917 	ldw	fp,36(sp)
 1003be4:	ddc00817 	ldw	r23,32(sp)
 1003be8:	dd800717 	ldw	r22,28(sp)
 1003bec:	dd400617 	ldw	r21,24(sp)
 1003bf0:	dd000517 	ldw	r20,20(sp)
 1003bf4:	dcc00417 	ldw	r19,16(sp)
 1003bf8:	dc800317 	ldw	r18,12(sp)
 1003bfc:	dc400217 	ldw	r17,8(sp)
 1003c00:	dc000117 	ldw	r16,4(sp)
 1003c04:	dec00b04 	addi	sp,sp,44
 1003c08:	f800283a 	ret
 1003c0c:	8c3ff126 	beq	r17,r16,1003bd4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x74>
 1003c10:	8825883a 	mov	r18,r17
 1003c14:	00000206 	br	1003c20 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xc0>
 1003c18:	84000044 	addi	r16,r16,1
 1003c1c:	84bfed26 	beq	r16,r18,1003bd4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x74>
 1003c20:	8009883a 	mov	r4,r16
 1003c24:	980b883a 	mov	r5,r19
 1003c28:	a03ee83a 	callr	r20
 1003c2c:	10803fcc 	andi	r2,r2,255
 1003c30:	103ff926 	beq	r2,zero,1003c18 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xb8>
 1003c34:	87000044 	addi	fp,r16,1
 1003c38:	8f001a26 	beq	r17,fp,1003ca4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x144>
 1003c3c:	dd800017 	ldw	r22,0(sp)
 1003c40:	e02f883a 	mov	r23,fp
 1003c44:	b809883a 	mov	r4,r23
 1003c48:	b00b883a 	mov	r5,r22
 1003c4c:	a03ee83a 	callr	r20
 1003c50:	8c07c83a 	sub	r3,r17,r16
 1003c54:	10803fcc 	andi	r2,r2,255
 1003c58:	98c7883a 	add	r3,r19,r3
 1003c5c:	b5800044 	addi	r22,r22,1
 1003c60:	bdc00044 	addi	r23,r23,1
 1003c64:	e025883a 	mov	r18,fp
 1003c68:	103fd226 	beq	r2,zero,1003bb4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x54>
 1003c6c:	ad800b26 	beq	r21,r22,1003c9c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x13c>
 1003c70:	b0fff41e 	bne	r22,r3,1003c44 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xe4>
 1003c74:	b825883a 	mov	r18,r23
 1003c78:	003fd706 	br	1003bd8 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1003c7c:	2021883a 	mov	r16,r4
 1003c80:	8009883a 	mov	r4,r16
 1003c84:	980b883a 	mov	r5,r19
 1003c88:	a03ee83a 	callr	r20
 1003c8c:	10803fcc 	andi	r2,r2,255
 1003c90:	1000021e 	bne	r2,zero,1003c9c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x13c>
 1003c94:	84000044 	addi	r16,r16,1
 1003c98:	8c3ff91e 	bne	r17,r16,1003c80 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x120>
 1003c9c:	8025883a 	mov	r18,r16
 1003ca0:	003fcd06 	br	1003bd8 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1003ca4:	e025883a 	mov	r18,fp
 1003ca8:	003fcb06 	br	1003bd8 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>

01003cac <_ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_>:
 1003cac:	20c00017 	ldw	r3,0(r4)
 1003cb0:	28800017 	ldw	r2,0(r5)
 1003cb4:	1885003a 	cmpeq	r2,r3,r2
 1003cb8:	f800283a 	ret

01003cbc <_ZNSs12_Alloc_hiderC2EPcRKSaIcE>:
 1003cbc:	21400015 	stw	r5,0(r4)
 1003cc0:	f800283a 	ret

01003cc4 <_ZNSs4_Rep10_M_refcopyEv>:
 1003cc4:	deffee04 	addi	sp,sp,-72
 1003cc8:	00804074 	movhi	r2,257
 1003ccc:	10a0ae04 	addi	r2,r2,-32072
 1003cd0:	00c040b4 	movhi	r3,258
 1003cd4:	18fb2504 	addi	r3,r3,-4972
 1003cd8:	d8800615 	stw	r2,24(sp)
 1003cdc:	d9000d15 	stw	r4,52(sp)
 1003ce0:	00804034 	movhi	r2,256
 1003ce4:	108f5704 	addi	r2,r2,15708
 1003ce8:	d809883a 	mov	r4,sp
 1003cec:	d8c00715 	stw	r3,28(sp)
 1003cf0:	d8800915 	stw	r2,36(sp)
 1003cf4:	dfc01115 	stw	ra,68(sp)
 1003cf8:	df001015 	stw	fp,64(sp)
 1003cfc:	ddc00f15 	stw	r23,60(sp)
 1003d00:	dec00815 	stw	sp,32(sp)
 1003d04:	dec00a15 	stw	sp,40(sp)
 1003d08:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1003d0c:	d8c00d17 	ldw	r3,52(sp)
 1003d10:	008040b4 	movhi	r2,258
 1003d14:	109bcf04 	addi	r2,r2,28476
 1003d18:	18800b1e 	bne	r3,r2,1003d48 <_ZNSs4_Rep10_M_refcopyEv+0x84>
 1003d1c:	d8800d17 	ldw	r2,52(sp)
 1003d20:	d809883a 	mov	r4,sp
 1003d24:	10800304 	addi	r2,r2,12
 1003d28:	d8800e15 	stw	r2,56(sp)
 1003d2c:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1003d30:	d8800e17 	ldw	r2,56(sp)
 1003d34:	dfc01117 	ldw	ra,68(sp)
 1003d38:	df001017 	ldw	fp,64(sp)
 1003d3c:	ddc00f17 	ldw	r23,60(sp)
 1003d40:	dec01204 	addi	sp,sp,72
 1003d44:	f800283a 	ret
 1003d48:	01400044 	movi	r5,1
 1003d4c:	d9400115 	stw	r5,4(sp)
 1003d50:	19000204 	addi	r4,r3,8
 1003d54:	10078f80 	call	10078f8 <_ZN9__gnu_cxx12__atomic_addEPVii>
 1003d58:	003ff006 	br	1003d1c <_ZNSs4_Rep10_M_refcopyEv+0x58>
 1003d5c:	d8800317 	ldw	r2,12(sp)
 1003d60:	00ffffc4 	movi	r3,-1
 1003d64:	d9000217 	ldw	r4,8(sp)
 1003d68:	10c00226 	beq	r2,r3,1003d74 <_ZNSs4_Rep10_M_refcopyEv+0xb0>
 1003d6c:	d8c00115 	stw	r3,4(sp)
 1003d70:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1003d74:	00bfffc4 	movi	r2,-1
 1003d78:	d8800115 	stw	r2,4(sp)
 1003d7c:	10081380 	call	1008138 <__cxa_call_unexpected>

01003d80 <_ZNKSs15_M_check_lengthEmmPKc>:
 1003d80:	20800017 	ldw	r2,0(r4)
 1003d84:	deffff04 	addi	sp,sp,-4
 1003d88:	dfc00015 	stw	ra,0(sp)
 1003d8c:	10fffd17 	ldw	r3,-12(r2)
 1003d90:	00900034 	movhi	r2,16384
 1003d94:	10bfff04 	addi	r2,r2,-4
 1003d98:	1947c83a 	sub	r3,r3,r5
 1003d9c:	10c5c83a 	sub	r2,r2,r3
 1003da0:	11800336 	bltu	r2,r6,1003db0 <_ZNKSs15_M_check_lengthEmmPKc+0x30>
 1003da4:	dfc00017 	ldw	ra,0(sp)
 1003da8:	dec00104 	addi	sp,sp,4
 1003dac:	f800283a 	ret
 1003db0:	3809883a 	mov	r4,r7
 1003db4:	10025440 	call	1002544 <_ZSt20__throw_length_errorPKc>

01003db8 <_ZNKSs8_M_checkEmPKc>:
 1003db8:	20c00017 	ldw	r3,0(r4)
 1003dbc:	deffff04 	addi	sp,sp,-4
 1003dc0:	dfc00015 	stw	ra,0(sp)
 1003dc4:	18bffd17 	ldw	r2,-12(r3)
 1003dc8:	11400436 	bltu	r2,r5,1003ddc <_ZNKSs8_M_checkEmPKc+0x24>
 1003dcc:	2805883a 	mov	r2,r5
 1003dd0:	dfc00017 	ldw	ra,0(sp)
 1003dd4:	dec00104 	addi	sp,sp,4
 1003dd8:	f800283a 	ret
 1003ddc:	3009883a 	mov	r4,r6
 1003de0:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01003de4 <_ZNSs9_M_assignEPcmc>:
 1003de4:	3011883a 	mov	r8,r6
 1003de8:	2807883a 	mov	r3,r5
 1003dec:	280d883a 	mov	r6,r5
 1003df0:	41403fcc 	andi	r5,r8,255
 1003df4:	2940201c 	xori	r5,r5,128
 1003df8:	01c00044 	movi	r7,1
 1003dfc:	297fe004 	addi	r5,r5,-128
 1003e00:	19c00126 	beq	r3,r7,1003e08 <_ZNSs9_M_assignEPcmc+0x24>
 1003e04:	100a10c1 	jmpi	100a10c <memset>
 1003e08:	22000005 	stb	r8,0(r4)
 1003e0c:	f800283a 	ret

01003e10 <_ZNSs7_M_moveEPcPKcm>:
 1003e10:	00800044 	movi	r2,1
 1003e14:	30800126 	beq	r6,r2,1003e1c <_ZNSs7_M_moveEPcPKcm+0xc>
 1003e18:	100a02c1 	jmpi	100a02c <memmove>
 1003e1c:	28800003 	ldbu	r2,0(r5)
 1003e20:	20800005 	stb	r2,0(r4)
 1003e24:	f800283a 	ret

01003e28 <_ZNSs7_M_copyEPcPKcm>:
 1003e28:	00800044 	movi	r2,1
 1003e2c:	30800126 	beq	r6,r2,1003e34 <_ZNSs7_M_copyEPcPKcm+0xc>
 1003e30:	1009f8c1 	jmpi	1009f8c <memcpy>
 1003e34:	28800003 	ldbu	r2,0(r5)
 1003e38:	20800005 	stb	r2,0(r4)
 1003e3c:	f800283a 	ret

01003e40 <_ZNKSs5c_strEv>:
 1003e40:	20800017 	ldw	r2,0(r4)
 1003e44:	f800283a 	ret

01003e48 <_ZNKSsixEm>:
 1003e48:	20800017 	ldw	r2,0(r4)
 1003e4c:	2885883a 	add	r2,r5,r2
 1003e50:	f800283a 	ret

01003e54 <_ZNKSs17find_first_not_ofEPKcmm>:
 1003e54:	20c00017 	ldw	r3,0(r4)
 1003e58:	defffb04 	addi	sp,sp,-20
 1003e5c:	dcc00315 	stw	r19,12(sp)
 1003e60:	18bffd17 	ldw	r2,-12(r3)
 1003e64:	dc800215 	stw	r18,8(sp)
 1003e68:	dc400115 	stw	r17,4(sp)
 1003e6c:	dc000015 	stw	r16,0(sp)
 1003e70:	dfc00415 	stw	ra,16(sp)
 1003e74:	2027883a 	mov	r19,r4
 1003e78:	3021883a 	mov	r16,r6
 1003e7c:	2825883a 	mov	r18,r5
 1003e80:	3823883a 	mov	r17,r7
 1003e84:	30800536 	bltu	r6,r2,1003e9c <_ZNKSs17find_first_not_ofEPKcmm+0x48>
 1003e88:	00001206 	br	1003ed4 <_ZNKSs17find_first_not_ofEPKcmm+0x80>
 1003e8c:	98c00017 	ldw	r3,0(r19)
 1003e90:	84000044 	addi	r16,r16,1
 1003e94:	18bffd17 	ldw	r2,-12(r3)
 1003e98:	80800e2e 	bgeu	r16,r2,1003ed4 <_ZNKSs17find_first_not_ofEPKcmm+0x80>
 1003e9c:	1c05883a 	add	r2,r3,r16
 1003ea0:	11400007 	ldb	r5,0(r2)
 1003ea4:	9009883a 	mov	r4,r18
 1003ea8:	880d883a 	mov	r6,r17
 1003eac:	1009e340 	call	1009e34 <memchr>
 1003eb0:	103ff61e 	bne	r2,zero,1003e8c <_ZNKSs17find_first_not_ofEPKcmm+0x38>
 1003eb4:	8005883a 	mov	r2,r16
 1003eb8:	dfc00417 	ldw	ra,16(sp)
 1003ebc:	dcc00317 	ldw	r19,12(sp)
 1003ec0:	dc800217 	ldw	r18,8(sp)
 1003ec4:	dc400117 	ldw	r17,4(sp)
 1003ec8:	dc000017 	ldw	r16,0(sp)
 1003ecc:	dec00504 	addi	sp,sp,20
 1003ed0:	f800283a 	ret
 1003ed4:	043fffc4 	movi	r16,-1
 1003ed8:	8005883a 	mov	r2,r16
 1003edc:	dfc00417 	ldw	ra,16(sp)
 1003ee0:	dcc00317 	ldw	r19,12(sp)
 1003ee4:	dc800217 	ldw	r18,8(sp)
 1003ee8:	dc400117 	ldw	r17,4(sp)
 1003eec:	dc000017 	ldw	r16,0(sp)
 1003ef0:	dec00504 	addi	sp,sp,20
 1003ef4:	f800283a 	ret

01003ef8 <_ZNKSs4findEPKcmm>:
 1003ef8:	defffb04 	addi	sp,sp,-20
 1003efc:	dc000115 	stw	r16,4(sp)
 1003f00:	24000017 	ldw	r16,0(r4)
 1003f04:	31c7883a 	add	r3,r6,r7
 1003f08:	dc800315 	stw	r18,12(sp)
 1003f0c:	823ffd17 	ldw	r8,-12(r16)
 1003f10:	8189883a 	add	r4,r16,r6
 1003f14:	280d883a 	mov	r6,r5
 1003f18:	8225883a 	add	r18,r16,r8
 1003f1c:	dc400215 	stw	r17,8(sp)
 1003f20:	dfc00415 	stw	ra,16(sp)
 1003f24:	3823883a 	mov	r17,r7
 1003f28:	900b883a 	mov	r5,r18
 1003f2c:	398f883a 	add	r7,r7,r6
 1003f30:	40c0082e 	bgeu	r8,r3,1003f54 <_ZNKSs4findEPKcmm+0x5c>
 1003f34:	00ffffc4 	movi	r3,-1
 1003f38:	1805883a 	mov	r2,r3
 1003f3c:	dfc00417 	ldw	ra,16(sp)
 1003f40:	dc800317 	ldw	r18,12(sp)
 1003f44:	dc400217 	ldw	r17,8(sp)
 1003f48:	dc000117 	ldw	r16,4(sp)
 1003f4c:	dec00504 	addi	sp,sp,20
 1003f50:	f800283a 	ret
 1003f54:	00804034 	movhi	r2,256
 1003f58:	108e8804 	addi	r2,r2,14880
 1003f5c:	d8800015 	stw	r2,0(sp)
 1003f60:	1003b600 	call	1003b60 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_>
 1003f64:	1407c83a 	sub	r3,r2,r16
 1003f68:	90bff31e 	bne	r18,r2,1003f38 <_ZNKSs4findEPKcmm+0x40>
 1003f6c:	883ff11e 	bne	r17,zero,1003f34 <_ZNKSs4findEPKcmm+0x3c>
 1003f70:	1805883a 	mov	r2,r3
 1003f74:	dfc00417 	ldw	ra,16(sp)
 1003f78:	dc800317 	ldw	r18,12(sp)
 1003f7c:	dc400217 	ldw	r17,8(sp)
 1003f80:	dc000117 	ldw	r16,4(sp)
 1003f84:	dec00504 	addi	sp,sp,20
 1003f88:	f800283a 	ret

01003f8c <_ZNKSs2atEm>:
 1003f8c:	21000017 	ldw	r4,0(r4)
 1003f90:	deffff04 	addi	sp,sp,-4
 1003f94:	dfc00015 	stw	ra,0(sp)
 1003f98:	20bffd17 	ldw	r2,-12(r4)
 1003f9c:	2880042e 	bgeu	r5,r2,1003fb0 <_ZNKSs2atEm+0x24>
 1003fa0:	2145883a 	add	r2,r4,r5
 1003fa4:	dfc00017 	ldw	ra,0(sp)
 1003fa8:	dec00104 	addi	sp,sp,4
 1003fac:	f800283a 	ret
 1003fb0:	010040b4 	movhi	r4,258
 1003fb4:	213c1404 	addi	r4,r4,-4016
 1003fb8:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01003fbc <_ZNKSs5emptyEv>:
 1003fbc:	20c00017 	ldw	r3,0(r4)
 1003fc0:	18bffd17 	ldw	r2,-12(r3)
 1003fc4:	1005003a 	cmpeq	r2,r2,zero
 1003fc8:	f800283a 	ret

01003fcc <_ZNKSs6lengthEv>:
 1003fcc:	20c00017 	ldw	r3,0(r4)
 1003fd0:	18bffd17 	ldw	r2,-12(r3)
 1003fd4:	f800283a 	ret

01003fd8 <_ZNKSs4findERKSsm>:
 1003fd8:	29400017 	ldw	r5,0(r5)
 1003fdc:	29fffd17 	ldw	r7,-12(r5)
 1003fe0:	1003ef81 	jmpi	1003ef8 <_ZNKSs4findEPKcmm>

01003fe4 <_ZNKSs17find_first_not_ofERKSsm>:
 1003fe4:	29400017 	ldw	r5,0(r5)
 1003fe8:	29fffd17 	ldw	r7,-12(r5)
 1003fec:	1003e541 	jmpi	1003e54 <_ZNKSs17find_first_not_ofEPKcmm>

01003ff0 <_ZNKSs5rfindEPKcmm>:
 1003ff0:	defff804 	addi	sp,sp,-32
 1003ff4:	dc800415 	stw	r18,16(sp)
 1003ff8:	24800017 	ldw	r18,0(r4)
 1003ffc:	dcc00515 	stw	r19,20(sp)
 1004000:	dc400315 	stw	r17,12(sp)
 1004004:	90bffd17 	ldw	r2,-12(r18)
 1004008:	dfc00715 	stw	ra,28(sp)
 100400c:	dd000615 	stw	r20,24(sp)
 1004010:	dc000215 	stw	r16,8(sp)
 1004014:	3823883a 	mov	r17,r7
 1004018:	2827883a 	mov	r19,r5
 100401c:	d9800115 	stw	r6,4(sp)
 1004020:	11c01136 	bltu	r2,r7,1004068 <_ZNKSs5rfindEPKcmm+0x78>
 1004024:	11c5c83a 	sub	r2,r2,r7
 1004028:	d8800015 	stw	r2,0(sp)
 100402c:	3080182e 	bgeu	r6,r2,1004090 <_ZNKSs5rfindEPKcmm+0xa0>
 1004030:	d8800104 	addi	r2,sp,4
 1004034:	10800017 	ldw	r2,0(r2)
 1004038:	053fffc4 	movi	r20,-1
 100403c:	d8800115 	stw	r2,4(sp)
 1004040:	00000106 	br	1004048 <_ZNKSs5rfindEPKcmm+0x58>
 1004044:	d8c00115 	stw	r3,4(sp)
 1004048:	dc000117 	ldw	r16,4(sp)
 100404c:	980b883a 	mov	r5,r19
 1004050:	880d883a 	mov	r6,r17
 1004054:	9409883a 	add	r4,r18,r16
 1004058:	1009f180 	call	1009f18 <memcmp>
 100405c:	80ffffc4 	addi	r3,r16,-1
 1004060:	10000226 	beq	r2,zero,100406c <_ZNKSs5rfindEPKcmm+0x7c>
 1004064:	1d3ff71e 	bne	r3,r20,1004044 <_ZNKSs5rfindEPKcmm+0x54>
 1004068:	043fffc4 	movi	r16,-1
 100406c:	8005883a 	mov	r2,r16
 1004070:	dfc00717 	ldw	ra,28(sp)
 1004074:	dd000617 	ldw	r20,24(sp)
 1004078:	dcc00517 	ldw	r19,20(sp)
 100407c:	dc800417 	ldw	r18,16(sp)
 1004080:	dc400317 	ldw	r17,12(sp)
 1004084:	dc000217 	ldw	r16,8(sp)
 1004088:	dec00804 	addi	sp,sp,32
 100408c:	f800283a 	ret
 1004090:	d805883a 	mov	r2,sp
 1004094:	003fe706 	br	1004034 <_ZNKSs5rfindEPKcmm+0x44>

01004098 <_ZNKSs5rfindEPKcm>:
 1004098:	defffc04 	addi	sp,sp,-16
 100409c:	dd400215 	stw	r21,8(sp)
 10040a0:	dcc00115 	stw	r19,4(sp)
 10040a4:	dc400015 	stw	r17,0(sp)
 10040a8:	2027883a 	mov	r19,r4
 10040ac:	dfc00315 	stw	ra,12(sp)
 10040b0:	2809883a 	mov	r4,r5
 10040b4:	2823883a 	mov	r17,r5
 10040b8:	302b883a 	mov	r21,r6
 10040bc:	100a5dc0 	call	100a5dc <strlen>
 10040c0:	880b883a 	mov	r5,r17
 10040c4:	9809883a 	mov	r4,r19
 10040c8:	a80d883a 	mov	r6,r21
 10040cc:	100f883a 	mov	r7,r2
 10040d0:	dfc00317 	ldw	ra,12(sp)
 10040d4:	dd400217 	ldw	r21,8(sp)
 10040d8:	dcc00117 	ldw	r19,4(sp)
 10040dc:	dc400017 	ldw	r17,0(sp)
 10040e0:	dec00404 	addi	sp,sp,16
 10040e4:	1003ff01 	jmpi	1003ff0 <_ZNKSs5rfindEPKcmm>

010040e8 <_ZNKSs5rfindERKSsm>:
 10040e8:	29400017 	ldw	r5,0(r5)
 10040ec:	29fffd17 	ldw	r7,-12(r5)
 10040f0:	1003ff01 	jmpi	1003ff0 <_ZNKSs5rfindEPKcmm>

010040f4 <_ZNSsC2Ev>:
 10040f4:	008040b4 	movhi	r2,258
 10040f8:	109bd204 	addi	r2,r2,28488
 10040fc:	20800015 	stw	r2,0(r4)
 1004100:	f800283a 	ret

01004104 <_ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_>:
 1004104:	20c00017 	ldw	r3,0(r4)
 1004108:	28800017 	ldw	r2,0(r5)
 100410c:	1885003a 	cmpeq	r2,r3,r2
 1004110:	f800283a 	ret

01004114 <_ZNKSs5rfindEcm>:
 1004114:	21000017 	ldw	r4,0(r4)
 1004118:	3007883a 	mov	r3,r6
 100411c:	20bffd17 	ldw	r2,-12(r4)
 1004120:	10001226 	beq	r2,zero,100416c <_ZNKSs5rfindEcm+0x58>
 1004124:	11bfffc4 	addi	r6,r2,-1
 1004128:	19800e36 	bltu	r3,r6,1004164 <_ZNKSs5rfindEcm+0x50>
 100412c:	29403fcc 	andi	r5,r5,255
 1004130:	2940201c 	xori	r5,r5,128
 1004134:	2189883a 	add	r4,r4,r6
 1004138:	297fe004 	addi	r5,r5,-128
 100413c:	0007883a 	mov	r3,zero
 1004140:	32000044 	addi	r8,r6,1
 1004144:	30cfc83a 	sub	r7,r6,r3
 1004148:	40c00826 	beq	r8,r3,100416c <_ZNKSs5rfindEcm+0x58>
 100414c:	20800007 	ldb	r2,0(r4)
 1004150:	18c00044 	addi	r3,r3,1
 1004154:	213fffc4 	addi	r4,r4,-1
 1004158:	117ffa1e 	bne	r2,r5,1004144 <_ZNKSs5rfindEcm+0x30>
 100415c:	3805883a 	mov	r2,r7
 1004160:	f800283a 	ret
 1004164:	180d883a 	mov	r6,r3
 1004168:	003ff006 	br	100412c <_ZNKSs5rfindEcm+0x18>
 100416c:	01ffffc4 	movi	r7,-1
 1004170:	3805883a 	mov	r2,r7
 1004174:	f800283a 	ret

01004178 <_ZNKSs12find_last_ofEcm>:
 1004178:	29403fcc 	andi	r5,r5,255
 100417c:	2940201c 	xori	r5,r5,128
 1004180:	297fe004 	addi	r5,r5,-128
 1004184:	10041141 	jmpi	1004114 <_ZNKSs5rfindEcm>

01004188 <_ZNKSs16find_last_not_ofEcm>:
 1004188:	21000017 	ldw	r4,0(r4)
 100418c:	20bffd17 	ldw	r2,-12(r4)
 1004190:	10001026 	beq	r2,zero,10041d4 <_ZNKSs16find_last_not_ofEcm+0x4c>
 1004194:	10ffffc4 	addi	r3,r2,-1
 1004198:	30c00c36 	bltu	r6,r3,10041cc <_ZNKSs16find_last_not_ofEcm+0x44>
 100419c:	29403fcc 	andi	r5,r5,255
 10041a0:	2940201c 	xori	r5,r5,128
 10041a4:	20c9883a 	add	r4,r4,r3
 10041a8:	297fe004 	addi	r5,r5,-128
 10041ac:	01bfffc4 	movi	r6,-1
 10041b0:	20800007 	ldb	r2,0(r4)
 10041b4:	213fffc4 	addi	r4,r4,-1
 10041b8:	1140021e 	bne	r2,r5,10041c4 <_ZNKSs16find_last_not_ofEcm+0x3c>
 10041bc:	18ffffc4 	addi	r3,r3,-1
 10041c0:	19bffb1e 	bne	r3,r6,10041b0 <_ZNKSs16find_last_not_ofEcm+0x28>
 10041c4:	1805883a 	mov	r2,r3
 10041c8:	f800283a 	ret
 10041cc:	3007883a 	mov	r3,r6
 10041d0:	003ff206 	br	100419c <_ZNKSs16find_last_not_ofEcm+0x14>
 10041d4:	00ffffc4 	movi	r3,-1
 10041d8:	1805883a 	mov	r2,r3
 10041dc:	f800283a 	ret

010041e0 <_ZNKSs17find_first_not_ofEcm>:
 10041e0:	21000017 	ldw	r4,0(r4)
 10041e4:	3007883a 	mov	r3,r6
 10041e8:	21bffd17 	ldw	r6,-12(r4)
 10041ec:	19800f2e 	bgeu	r3,r6,100422c <_ZNKSs17find_first_not_ofEcm+0x4c>
 10041f0:	20c9883a 	add	r4,r4,r3
 10041f4:	29403fcc 	andi	r5,r5,255
 10041f8:	20800007 	ldb	r2,0(r4)
 10041fc:	2940201c 	xori	r5,r5,128
 1004200:	297fe004 	addi	r5,r5,-128
 1004204:	28800a1e 	bne	r5,r2,1004230 <_ZNKSs17find_first_not_ofEcm+0x50>
 1004208:	30cfc83a 	sub	r7,r6,r3
 100420c:	180d883a 	mov	r6,r3
 1004210:	00000306 	br	1004220 <_ZNKSs17find_first_not_ofEcm+0x40>
 1004214:	20800047 	ldb	r2,1(r4)
 1004218:	21000044 	addi	r4,r4,1
 100421c:	1140061e 	bne	r2,r5,1004238 <_ZNKSs17find_first_not_ofEcm+0x58>
 1004220:	31800044 	addi	r6,r6,1
 1004224:	19c5883a 	add	r2,r3,r7
 1004228:	11bffa1e 	bne	r2,r6,1004214 <_ZNKSs17find_first_not_ofEcm+0x34>
 100422c:	00ffffc4 	movi	r3,-1
 1004230:	1805883a 	mov	r2,r3
 1004234:	f800283a 	ret
 1004238:	3007883a 	mov	r3,r6
 100423c:	1805883a 	mov	r2,r3
 1004240:	f800283a 	ret

01004244 <_ZNSs4_Rep9_S_createEmmRKSaIcE>:
 1004244:	deffed04 	addi	sp,sp,-76
 1004248:	00804074 	movhi	r2,257
 100424c:	10a0ae04 	addi	r2,r2,-32072
 1004250:	00c040b4 	movhi	r3,258
 1004254:	18fb2844 	addi	r3,r3,-4959
 1004258:	d8800615 	stw	r2,24(sp)
 100425c:	d9000e15 	stw	r4,56(sp)
 1004260:	00804034 	movhi	r2,256
 1004264:	1090d904 	addi	r2,r2,17252
 1004268:	d809883a 	mov	r4,sp
 100426c:	d8c00715 	stw	r3,28(sp)
 1004270:	d8800915 	stw	r2,36(sp)
 1004274:	dfc01215 	stw	ra,72(sp)
 1004278:	df001115 	stw	fp,68(sp)
 100427c:	ddc01015 	stw	r23,64(sp)
 1004280:	dec00815 	stw	sp,32(sp)
 1004284:	dec00a15 	stw	sp,40(sp)
 1004288:	d9400f15 	stw	r5,60(sp)
 100428c:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1004290:	d8c00e17 	ldw	r3,56(sp)
 1004294:	00900034 	movhi	r2,16384
 1004298:	10bfff04 	addi	r2,r2,-4
 100429c:	10c02c36 	bltu	r2,r3,1004350 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x10c>
 10042a0:	d9800f17 	ldw	r6,60(sp)
 10042a4:	d9c00e17 	ldw	r7,56(sp)
 10042a8:	31c0032e 	bgeu	r6,r7,10042b8 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x74>
 10042ac:	3189883a 	add	r4,r6,r6
 10042b0:	3900012e 	bgeu	r7,r4,10042b8 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x74>
 10042b4:	d9000e15 	stw	r4,56(sp)
 10042b8:	d8800e17 	ldw	r2,56(sp)
 10042bc:	01400344 	movi	r5,13
 10042c0:	00c40004 	movi	r3,4096
 10042c4:	1149883a 	add	r4,r2,r5
 10042c8:	20800404 	addi	r2,r4,16
 10042cc:	18800f36 	bltu	r3,r2,100430c <_ZNSs4_Rep9_S_createEmmRKSaIcE+0xc8>
 10042d0:	00800044 	movi	r2,1
 10042d4:	d8800115 	stw	r2,4(sp)
 10042d8:	10090180 	call	1009018 <_Znwm>
 10042dc:	d8c00e17 	ldw	r3,56(sp)
 10042e0:	10000215 	stw	zero,8(r2)
 10042e4:	d809883a 	mov	r4,sp
 10042e8:	10c00115 	stw	r3,4(r2)
 10042ec:	d8800d15 	stw	r2,52(sp)
 10042f0:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 10042f4:	d8800d17 	ldw	r2,52(sp)
 10042f8:	dfc01217 	ldw	ra,72(sp)
 10042fc:	df001117 	ldw	fp,68(sp)
 1004300:	ddc01017 	ldw	r23,64(sp)
 1004304:	dec01304 	addi	sp,sp,76
 1004308:	f800283a 	ret
 100430c:	d9800f17 	ldw	r6,60(sp)
 1004310:	d9c00e17 	ldw	r7,56(sp)
 1004314:	31ffee2e 	bgeu	r6,r7,10042d0 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
 1004318:	1083ffcc 	andi	r2,r2,4095
 100431c:	1885c83a 	sub	r2,r3,r2
 1004320:	388f883a 	add	r7,r7,r2
 1004324:	01100034 	movhi	r4,16384
 1004328:	213fff04 	addi	r4,r4,-4
 100432c:	d9c00e15 	stw	r7,56(sp)
 1004330:	21c00336 	bltu	r4,r7,1004340 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0xfc>
 1004334:	d8800e17 	ldw	r2,56(sp)
 1004338:	1149883a 	add	r4,r2,r5
 100433c:	003fe406 	br	10042d0 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
 1004340:	d9000e15 	stw	r4,56(sp)
 1004344:	d8800e17 	ldw	r2,56(sp)
 1004348:	1149883a 	add	r4,r2,r5
 100434c:	003fe006 	br	10042d0 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
 1004350:	00bfffc4 	movi	r2,-1
 1004354:	010040b4 	movhi	r4,258
 1004358:	213c1904 	addi	r4,r4,-3996
 100435c:	d8800115 	stw	r2,4(sp)
 1004360:	10025440 	call	1002544 <_ZSt20__throw_length_errorPKc>
 1004364:	d9000217 	ldw	r4,8(sp)
 1004368:	00bfffc4 	movi	r2,-1
 100436c:	d8800115 	stw	r2,4(sp)
 1004370:	10094380 	call	1009438 <_Unwind_SjLj_Resume>

01004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 1004374:	1008a881 	jmpi	1008a88 <_ZdlPv>

01004378 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 1004378:	defffd04 	addi	sp,sp,-12
 100437c:	dc000015 	stw	r16,0(sp)
 1004380:	008040b4 	movhi	r2,258
 1004384:	109bcf04 	addi	r2,r2,28476
 1004388:	2021883a 	mov	r16,r4
 100438c:	dc400115 	stw	r17,4(sp)
 1004390:	dfc00215 	stw	ra,8(sp)
 1004394:	2823883a 	mov	r17,r5
 1004398:	21000204 	addi	r4,r4,8
 100439c:	017fffc4 	movi	r5,-1
 10043a0:	8080051e 	bne	r16,r2,10043b8 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x40>
 10043a4:	dfc00217 	ldw	ra,8(sp)
 10043a8:	dc400117 	ldw	r17,4(sp)
 10043ac:	dc000017 	ldw	r16,0(sp)
 10043b0:	dec00304 	addi	sp,sp,12
 10043b4:	f800283a 	ret
 10043b8:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10043bc:	8009883a 	mov	r4,r16
 10043c0:	880b883a 	mov	r5,r17
 10043c4:	00bff716 	blt	zero,r2,10043a4 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x2c>
 10043c8:	dfc00217 	ldw	ra,8(sp)
 10043cc:	dc400117 	ldw	r17,4(sp)
 10043d0:	dc000017 	ldw	r16,0(sp)
 10043d4:	dec00304 	addi	sp,sp,12
 10043d8:	10043741 	jmpi	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>

010043dc <_ZNKSs12find_last_ofEPKcmm>:
 10043dc:	20800017 	ldw	r2,0(r4)
 10043e0:	defffb04 	addi	sp,sp,-20
 10043e4:	dcc00315 	stw	r19,12(sp)
 10043e8:	10fffd17 	ldw	r3,-12(r2)
 10043ec:	dc800215 	stw	r18,8(sp)
 10043f0:	dc400115 	stw	r17,4(sp)
 10043f4:	dfc00415 	stw	ra,16(sp)
 10043f8:	dc000015 	stw	r16,0(sp)
 10043fc:	2027883a 	mov	r19,r4
 1004400:	2825883a 	mov	r18,r5
 1004404:	3823883a 	mov	r17,r7
 1004408:	18002426 	beq	r3,zero,100449c <_ZNKSs12find_last_ofEPKcmm+0xc0>
 100440c:	38002326 	beq	r7,zero,100449c <_ZNKSs12find_last_ofEPKcmm+0xc0>
 1004410:	1c3fffc4 	addi	r16,r3,-1
 1004414:	3400102e 	bgeu	r6,r16,1004458 <_ZNKSs12find_last_ofEPKcmm+0x7c>
 1004418:	3021883a 	mov	r16,r6
 100441c:	1405883a 	add	r2,r2,r16
 1004420:	11400007 	ldb	r5,0(r2)
 1004424:	9009883a 	mov	r4,r18
 1004428:	880d883a 	mov	r6,r17
 100442c:	1009e340 	call	1009e34 <memchr>
 1004430:	10000f26 	beq	r2,zero,1004470 <_ZNKSs12find_last_ofEPKcmm+0x94>
 1004434:	8005883a 	mov	r2,r16
 1004438:	dfc00417 	ldw	ra,16(sp)
 100443c:	dcc00317 	ldw	r19,12(sp)
 1004440:	dc800217 	ldw	r18,8(sp)
 1004444:	dc400117 	ldw	r17,4(sp)
 1004448:	dc000017 	ldw	r16,0(sp)
 100444c:	dec00504 	addi	sp,sp,20
 1004450:	f800283a 	ret
 1004454:	98800017 	ldw	r2,0(r19)
 1004458:	1405883a 	add	r2,r2,r16
 100445c:	11400007 	ldb	r5,0(r2)
 1004460:	9009883a 	mov	r4,r18
 1004464:	880d883a 	mov	r6,r17
 1004468:	1009e340 	call	1009e34 <memchr>
 100446c:	103ff11e 	bne	r2,zero,1004434 <_ZNKSs12find_last_ofEPKcmm+0x58>
 1004470:	843fffc4 	addi	r16,r16,-1
 1004474:	00bfffc4 	movi	r2,-1
 1004478:	80bff61e 	bne	r16,r2,1004454 <_ZNKSs12find_last_ofEPKcmm+0x78>
 100447c:	8005883a 	mov	r2,r16
 1004480:	dfc00417 	ldw	ra,16(sp)
 1004484:	dcc00317 	ldw	r19,12(sp)
 1004488:	dc800217 	ldw	r18,8(sp)
 100448c:	dc400117 	ldw	r17,4(sp)
 1004490:	dc000017 	ldw	r16,0(sp)
 1004494:	dec00504 	addi	sp,sp,20
 1004498:	f800283a 	ret
 100449c:	043fffc4 	movi	r16,-1
 10044a0:	8005883a 	mov	r2,r16
 10044a4:	dfc00417 	ldw	ra,16(sp)
 10044a8:	dcc00317 	ldw	r19,12(sp)
 10044ac:	dc800217 	ldw	r18,8(sp)
 10044b0:	dc400117 	ldw	r17,4(sp)
 10044b4:	dc000017 	ldw	r16,0(sp)
 10044b8:	dec00504 	addi	sp,sp,20
 10044bc:	f800283a 	ret

010044c0 <_ZNKSs12find_last_ofERKSsm>:
 10044c0:	29400017 	ldw	r5,0(r5)
 10044c4:	29fffd17 	ldw	r7,-12(r5)
 10044c8:	10043dc1 	jmpi	10043dc <_ZNKSs12find_last_ofEPKcmm>

010044cc <_ZNKSs13find_first_ofEPKcmm>:
 10044cc:	defffb04 	addi	sp,sp,-20
 10044d0:	dcc00315 	stw	r19,12(sp)
 10044d4:	dc800215 	stw	r18,8(sp)
 10044d8:	dc400115 	stw	r17,4(sp)
 10044dc:	dc000015 	stw	r16,0(sp)
 10044e0:	dfc00415 	stw	ra,16(sp)
 10044e4:	3823883a 	mov	r17,r7
 10044e8:	2027883a 	mov	r19,r4
 10044ec:	2825883a 	mov	r18,r5
 10044f0:	3021883a 	mov	r16,r6
 10044f4:	3800091e 	bne	r7,zero,100451c <_ZNKSs13find_first_ofEPKcmm+0x50>
 10044f8:	043fffc4 	movi	r16,-1
 10044fc:	8005883a 	mov	r2,r16
 1004500:	dfc00417 	ldw	ra,16(sp)
 1004504:	dcc00317 	ldw	r19,12(sp)
 1004508:	dc800217 	ldw	r18,8(sp)
 100450c:	dc400117 	ldw	r17,4(sp)
 1004510:	dc000017 	ldw	r16,0(sp)
 1004514:	dec00504 	addi	sp,sp,20
 1004518:	f800283a 	ret
 100451c:	20c00017 	ldw	r3,0(r4)
 1004520:	18bffd17 	ldw	r2,-12(r3)
 1004524:	30bff42e 	bgeu	r6,r2,10044f8 <_ZNKSs13find_first_ofEPKcmm+0x2c>
 1004528:	80c5883a 	add	r2,r16,r3
 100452c:	11400007 	ldb	r5,0(r2)
 1004530:	9009883a 	mov	r4,r18
 1004534:	880d883a 	mov	r6,r17
 1004538:	1009e340 	call	1009e34 <memchr>
 100453c:	103fef1e 	bne	r2,zero,10044fc <_ZNKSs13find_first_ofEPKcmm+0x30>
 1004540:	98c00017 	ldw	r3,0(r19)
 1004544:	84000044 	addi	r16,r16,1
 1004548:	18bffd17 	ldw	r2,-12(r3)
 100454c:	80bff636 	bltu	r16,r2,1004528 <_ZNKSs13find_first_ofEPKcmm+0x5c>
 1004550:	003fe906 	br	10044f8 <_ZNKSs13find_first_ofEPKcmm+0x2c>

01004554 <_ZNKSs13find_first_ofERKSsm>:
 1004554:	29400017 	ldw	r5,0(r5)
 1004558:	29fffd17 	ldw	r7,-12(r5)
 100455c:	10044cc1 	jmpi	10044cc <_ZNKSs13find_first_ofEPKcmm>

01004560 <_ZNKSs4findEcm>:
 1004560:	defffe04 	addi	sp,sp,-8
 1004564:	dc000015 	stw	r16,0(sp)
 1004568:	24000017 	ldw	r16,0(r4)
 100456c:	29403fcc 	andi	r5,r5,255
 1004570:	3007883a 	mov	r3,r6
 1004574:	81fffd17 	ldw	r7,-12(r16)
 1004578:	2940201c 	xori	r5,r5,128
 100457c:	8189883a 	add	r4,r16,r6
 1004580:	dfc00115 	stw	ra,4(sp)
 1004584:	297fe004 	addi	r5,r5,-128
 1004588:	398dc83a 	sub	r6,r7,r6
 100458c:	19c0082e 	bgeu	r3,r7,10045b0 <_ZNKSs4findEcm+0x50>
 1004590:	1009e340 	call	1009e34 <memchr>
 1004594:	1407c83a 	sub	r3,r2,r16
 1004598:	10000526 	beq	r2,zero,10045b0 <_ZNKSs4findEcm+0x50>
 100459c:	1805883a 	mov	r2,r3
 10045a0:	dfc00117 	ldw	ra,4(sp)
 10045a4:	dc000017 	ldw	r16,0(sp)
 10045a8:	dec00204 	addi	sp,sp,8
 10045ac:	f800283a 	ret
 10045b0:	00ffffc4 	movi	r3,-1
 10045b4:	1805883a 	mov	r2,r3
 10045b8:	dfc00117 	ldw	ra,4(sp)
 10045bc:	dc000017 	ldw	r16,0(sp)
 10045c0:	dec00204 	addi	sp,sp,8
 10045c4:	f800283a 	ret

010045c8 <_ZNKSs13find_first_ofEcm>:
 10045c8:	29403fcc 	andi	r5,r5,255
 10045cc:	2940201c 	xori	r5,r5,128
 10045d0:	297fe004 	addi	r5,r5,-128
 10045d4:	10045601 	jmpi	1004560 <_ZNKSs4findEcm>

010045d8 <_ZNKSs16find_last_not_ofEPKcmm>:
 10045d8:	20800017 	ldw	r2,0(r4)
 10045dc:	defffb04 	addi	sp,sp,-20
 10045e0:	dcc00315 	stw	r19,12(sp)
 10045e4:	10fffd17 	ldw	r3,-12(r2)
 10045e8:	dc800215 	stw	r18,8(sp)
 10045ec:	dc400115 	stw	r17,4(sp)
 10045f0:	dfc00415 	stw	ra,16(sp)
 10045f4:	dc000015 	stw	r16,0(sp)
 10045f8:	2027883a 	mov	r19,r4
 10045fc:	2825883a 	mov	r18,r5
 1004600:	3823883a 	mov	r17,r7
 1004604:	18002326 	beq	r3,zero,1004694 <_ZNKSs16find_last_not_ofEPKcmm+0xbc>
 1004608:	1c3fffc4 	addi	r16,r3,-1
 100460c:	3400102e 	bgeu	r6,r16,1004650 <_ZNKSs16find_last_not_ofEPKcmm+0x78>
 1004610:	3021883a 	mov	r16,r6
 1004614:	1405883a 	add	r2,r2,r16
 1004618:	11400007 	ldb	r5,0(r2)
 100461c:	9009883a 	mov	r4,r18
 1004620:	880d883a 	mov	r6,r17
 1004624:	1009e340 	call	1009e34 <memchr>
 1004628:	10000f1e 	bne	r2,zero,1004668 <_ZNKSs16find_last_not_ofEPKcmm+0x90>
 100462c:	8005883a 	mov	r2,r16
 1004630:	dfc00417 	ldw	ra,16(sp)
 1004634:	dcc00317 	ldw	r19,12(sp)
 1004638:	dc800217 	ldw	r18,8(sp)
 100463c:	dc400117 	ldw	r17,4(sp)
 1004640:	dc000017 	ldw	r16,0(sp)
 1004644:	dec00504 	addi	sp,sp,20
 1004648:	f800283a 	ret
 100464c:	98800017 	ldw	r2,0(r19)
 1004650:	1405883a 	add	r2,r2,r16
 1004654:	11400007 	ldb	r5,0(r2)
 1004658:	9009883a 	mov	r4,r18
 100465c:	880d883a 	mov	r6,r17
 1004660:	1009e340 	call	1009e34 <memchr>
 1004664:	103ff126 	beq	r2,zero,100462c <_ZNKSs16find_last_not_ofEPKcmm+0x54>
 1004668:	843fffc4 	addi	r16,r16,-1
 100466c:	00bfffc4 	movi	r2,-1
 1004670:	80bff61e 	bne	r16,r2,100464c <_ZNKSs16find_last_not_ofEPKcmm+0x74>
 1004674:	8005883a 	mov	r2,r16
 1004678:	dfc00417 	ldw	ra,16(sp)
 100467c:	dcc00317 	ldw	r19,12(sp)
 1004680:	dc800217 	ldw	r18,8(sp)
 1004684:	dc400117 	ldw	r17,4(sp)
 1004688:	dc000017 	ldw	r16,0(sp)
 100468c:	dec00504 	addi	sp,sp,20
 1004690:	f800283a 	ret
 1004694:	043fffc4 	movi	r16,-1
 1004698:	8005883a 	mov	r2,r16
 100469c:	dfc00417 	ldw	ra,16(sp)
 10046a0:	dcc00317 	ldw	r19,12(sp)
 10046a4:	dc800217 	ldw	r18,8(sp)
 10046a8:	dc400117 	ldw	r17,4(sp)
 10046ac:	dc000017 	ldw	r16,0(sp)
 10046b0:	dec00504 	addi	sp,sp,20
 10046b4:	f800283a 	ret

010046b8 <_ZNKSs16find_last_not_ofERKSsm>:
 10046b8:	29400017 	ldw	r5,0(r5)
 10046bc:	29fffd17 	ldw	r7,-12(r5)
 10046c0:	10045d81 	jmpi	10045d8 <_ZNKSs16find_last_not_ofEPKcmm>

010046c4 <_ZNKSs7compareERKSs>:
 10046c4:	20800017 	ldw	r2,0(r4)
 10046c8:	28c00017 	ldw	r3,0(r5)
 10046cc:	defffb04 	addi	sp,sp,-20
 10046d0:	dc400315 	stw	r17,12(sp)
 10046d4:	dc000215 	stw	r16,8(sp)
 10046d8:	147ffd17 	ldw	r17,-12(r2)
 10046dc:	1c3ffd17 	ldw	r16,-12(r3)
 10046e0:	dfc00415 	stw	ra,16(sp)
 10046e4:	d80d883a 	mov	r6,sp
 10046e8:	dc400015 	stw	r17,0(sp)
 10046ec:	dc000115 	stw	r16,4(sp)
 10046f0:	8440012e 	bgeu	r16,r17,10046f8 <_ZNKSs7compareERKSs+0x34>
 10046f4:	d9800104 	addi	r6,sp,4
 10046f8:	21000017 	ldw	r4,0(r4)
 10046fc:	29400017 	ldw	r5,0(r5)
 1004700:	31800017 	ldw	r6,0(r6)
 1004704:	1009f180 	call	1009f18 <memcmp>
 1004708:	1000011e 	bne	r2,zero,1004710 <_ZNKSs7compareERKSs+0x4c>
 100470c:	8c05c83a 	sub	r2,r17,r16
 1004710:	dfc00417 	ldw	ra,16(sp)
 1004714:	dc400317 	ldw	r17,12(sp)
 1004718:	dc000217 	ldw	r16,8(sp)
 100471c:	dec00504 	addi	sp,sp,20
 1004720:	f800283a 	ret

01004724 <_ZNKSs4findEPKcm>:
 1004724:	defffc04 	addi	sp,sp,-16
 1004728:	dd400215 	stw	r21,8(sp)
 100472c:	dcc00115 	stw	r19,4(sp)
 1004730:	dc400015 	stw	r17,0(sp)
 1004734:	2027883a 	mov	r19,r4
 1004738:	dfc00315 	stw	ra,12(sp)
 100473c:	2809883a 	mov	r4,r5
 1004740:	2823883a 	mov	r17,r5
 1004744:	302b883a 	mov	r21,r6
 1004748:	100a5dc0 	call	100a5dc <strlen>
 100474c:	880b883a 	mov	r5,r17
 1004750:	9809883a 	mov	r4,r19
 1004754:	a80d883a 	mov	r6,r21
 1004758:	100f883a 	mov	r7,r2
 100475c:	dfc00317 	ldw	ra,12(sp)
 1004760:	dd400217 	ldw	r21,8(sp)
 1004764:	dcc00117 	ldw	r19,4(sp)
 1004768:	dc400017 	ldw	r17,0(sp)
 100476c:	dec00404 	addi	sp,sp,16
 1004770:	1003ef81 	jmpi	1003ef8 <_ZNKSs4findEPKcmm>

01004774 <_ZNKSs7compareEPKc>:
 1004774:	20800017 	ldw	r2,0(r4)
 1004778:	defff904 	addi	sp,sp,-28
 100477c:	dc400315 	stw	r17,12(sp)
 1004780:	147ffd17 	ldw	r17,-12(r2)
 1004784:	dcc00515 	stw	r19,20(sp)
 1004788:	dc800415 	stw	r18,16(sp)
 100478c:	dc000215 	stw	r16,8(sp)
 1004790:	dfc00615 	stw	ra,24(sp)
 1004794:	2025883a 	mov	r18,r4
 1004798:	dc400015 	stw	r17,0(sp)
 100479c:	2809883a 	mov	r4,r5
 10047a0:	2827883a 	mov	r19,r5
 10047a4:	100a5dc0 	call	100a5dc <strlen>
 10047a8:	1021883a 	mov	r16,r2
 10047ac:	d80d883a 	mov	r6,sp
 10047b0:	d8800115 	stw	r2,4(sp)
 10047b4:	1440012e 	bgeu	r2,r17,10047bc <_ZNKSs7compareEPKc+0x48>
 10047b8:	d9800104 	addi	r6,sp,4
 10047bc:	91000017 	ldw	r4,0(r18)
 10047c0:	31800017 	ldw	r6,0(r6)
 10047c4:	980b883a 	mov	r5,r19
 10047c8:	1009f180 	call	1009f18 <memcmp>
 10047cc:	1000011e 	bne	r2,zero,10047d4 <_ZNKSs7compareEPKc+0x60>
 10047d0:	8c05c83a 	sub	r2,r17,r16
 10047d4:	dfc00617 	ldw	ra,24(sp)
 10047d8:	dcc00517 	ldw	r19,20(sp)
 10047dc:	dc800417 	ldw	r18,16(sp)
 10047e0:	dc400317 	ldw	r17,12(sp)
 10047e4:	dc000217 	ldw	r16,8(sp)
 10047e8:	dec00704 	addi	sp,sp,28
 10047ec:	f800283a 	ret

010047f0 <_ZNKSs16find_last_not_ofEPKcm>:
 10047f0:	defffc04 	addi	sp,sp,-16
 10047f4:	dd400215 	stw	r21,8(sp)
 10047f8:	dcc00115 	stw	r19,4(sp)
 10047fc:	dc400015 	stw	r17,0(sp)
 1004800:	2027883a 	mov	r19,r4
 1004804:	dfc00315 	stw	ra,12(sp)
 1004808:	2809883a 	mov	r4,r5
 100480c:	2823883a 	mov	r17,r5
 1004810:	302b883a 	mov	r21,r6
 1004814:	100a5dc0 	call	100a5dc <strlen>
 1004818:	880b883a 	mov	r5,r17
 100481c:	9809883a 	mov	r4,r19
 1004820:	a80d883a 	mov	r6,r21
 1004824:	100f883a 	mov	r7,r2
 1004828:	dfc00317 	ldw	ra,12(sp)
 100482c:	dd400217 	ldw	r21,8(sp)
 1004830:	dcc00117 	ldw	r19,4(sp)
 1004834:	dc400017 	ldw	r17,0(sp)
 1004838:	dec00404 	addi	sp,sp,16
 100483c:	10045d81 	jmpi	10045d8 <_ZNKSs16find_last_not_ofEPKcmm>

01004840 <_ZNKSs17find_first_not_ofEPKcm>:
 1004840:	defffc04 	addi	sp,sp,-16
 1004844:	dd400215 	stw	r21,8(sp)
 1004848:	dcc00115 	stw	r19,4(sp)
 100484c:	dc400015 	stw	r17,0(sp)
 1004850:	2027883a 	mov	r19,r4
 1004854:	dfc00315 	stw	ra,12(sp)
 1004858:	2809883a 	mov	r4,r5
 100485c:	2823883a 	mov	r17,r5
 1004860:	302b883a 	mov	r21,r6
 1004864:	100a5dc0 	call	100a5dc <strlen>
 1004868:	880b883a 	mov	r5,r17
 100486c:	9809883a 	mov	r4,r19
 1004870:	a80d883a 	mov	r6,r21
 1004874:	100f883a 	mov	r7,r2
 1004878:	dfc00317 	ldw	ra,12(sp)
 100487c:	dd400217 	ldw	r21,8(sp)
 1004880:	dcc00117 	ldw	r19,4(sp)
 1004884:	dc400017 	ldw	r17,0(sp)
 1004888:	dec00404 	addi	sp,sp,16
 100488c:	1003e541 	jmpi	1003e54 <_ZNKSs17find_first_not_ofEPKcmm>

01004890 <_ZNKSs12find_last_ofEPKcm>:
 1004890:	defffc04 	addi	sp,sp,-16
 1004894:	dd400215 	stw	r21,8(sp)
 1004898:	dcc00115 	stw	r19,4(sp)
 100489c:	dc400015 	stw	r17,0(sp)
 10048a0:	2027883a 	mov	r19,r4
 10048a4:	dfc00315 	stw	ra,12(sp)
 10048a8:	2809883a 	mov	r4,r5
 10048ac:	2823883a 	mov	r17,r5
 10048b0:	302b883a 	mov	r21,r6
 10048b4:	100a5dc0 	call	100a5dc <strlen>
 10048b8:	880b883a 	mov	r5,r17
 10048bc:	9809883a 	mov	r4,r19
 10048c0:	a80d883a 	mov	r6,r21
 10048c4:	100f883a 	mov	r7,r2
 10048c8:	dfc00317 	ldw	ra,12(sp)
 10048cc:	dd400217 	ldw	r21,8(sp)
 10048d0:	dcc00117 	ldw	r19,4(sp)
 10048d4:	dc400017 	ldw	r17,0(sp)
 10048d8:	dec00404 	addi	sp,sp,16
 10048dc:	10043dc1 	jmpi	10043dc <_ZNKSs12find_last_ofEPKcmm>

010048e0 <_ZNKSs13find_first_ofEPKcm>:
 10048e0:	defffc04 	addi	sp,sp,-16
 10048e4:	dd400215 	stw	r21,8(sp)
 10048e8:	dcc00115 	stw	r19,4(sp)
 10048ec:	dc400015 	stw	r17,0(sp)
 10048f0:	2027883a 	mov	r19,r4
 10048f4:	dfc00315 	stw	ra,12(sp)
 10048f8:	2809883a 	mov	r4,r5
 10048fc:	2823883a 	mov	r17,r5
 1004900:	302b883a 	mov	r21,r6
 1004904:	100a5dc0 	call	100a5dc <strlen>
 1004908:	880b883a 	mov	r5,r17
 100490c:	9809883a 	mov	r4,r19
 1004910:	a80d883a 	mov	r6,r21
 1004914:	100f883a 	mov	r7,r2
 1004918:	dfc00317 	ldw	ra,12(sp)
 100491c:	dd400217 	ldw	r21,8(sp)
 1004920:	dcc00117 	ldw	r19,4(sp)
 1004924:	dc400017 	ldw	r17,0(sp)
 1004928:	dec00404 	addi	sp,sp,16
 100492c:	10044cc1 	jmpi	10044cc <_ZNKSs13find_first_ofEPKcmm>

01004930 <_ZNKSs4rendEv>:
 1004930:	28c00017 	ldw	r3,0(r5)
 1004934:	2005883a 	mov	r2,r4
 1004938:	20c00015 	stw	r3,0(r4)
 100493c:	f800283a 	ret

01004940 <_ZNKSs6rbeginEv>:
 1004940:	28c00017 	ldw	r3,0(r5)
 1004944:	2005883a 	mov	r2,r4
 1004948:	197ffd17 	ldw	r5,-12(r3)
 100494c:	1947883a 	add	r3,r3,r5
 1004950:	20c00015 	stw	r3,0(r4)
 1004954:	f800283a 	ret

01004958 <_ZNSs12_S_constructEmcRKSaIcE>:
 1004958:	defffb04 	addi	sp,sp,-20
 100495c:	dcc00315 	stw	r19,12(sp)
 1004960:	dc400115 	stw	r17,4(sp)
 1004964:	dc000015 	stw	r16,0(sp)
 1004968:	2823883a 	mov	r17,r5
 100496c:	dfc00415 	stw	ra,16(sp)
 1004970:	dc800215 	stw	r18,8(sp)
 1004974:	2021883a 	mov	r16,r4
 1004978:	04c040b4 	movhi	r19,258
 100497c:	9cdbd204 	addi	r19,r19,28488
 1004980:	000b883a 	mov	r5,zero
 1004984:	2000081e 	bne	r4,zero,10049a8 <_ZNSs12_S_constructEmcRKSaIcE+0x50>
 1004988:	9805883a 	mov	r2,r19
 100498c:	dfc00417 	ldw	ra,16(sp)
 1004990:	dcc00317 	ldw	r19,12(sp)
 1004994:	dc800217 	ldw	r18,8(sp)
 1004998:	dc400117 	ldw	r17,4(sp)
 100499c:	dc000017 	ldw	r16,0(sp)
 10049a0:	dec00504 	addi	sp,sp,20
 10049a4:	f800283a 	ret
 10049a8:	10042440 	call	1004244 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 10049ac:	88c03fcc 	andi	r3,r17,255
 10049b0:	18c0201c 	xori	r3,r3,128
 10049b4:	18ffe004 	addi	r3,r3,-128
 10049b8:	19403fcc 	andi	r5,r3,255
 10049bc:	14c00304 	addi	r19,r2,12
 10049c0:	1025883a 	mov	r18,r2
 10049c4:	2940201c 	xori	r5,r5,128
 10049c8:	00800044 	movi	r2,1
 10049cc:	800d883a 	mov	r6,r16
 10049d0:	9809883a 	mov	r4,r19
 10049d4:	297fe004 	addi	r5,r5,-128
 10049d8:	80800d26 	beq	r16,r2,1004a10 <_ZNSs12_S_constructEmcRKSaIcE+0xb8>
 10049dc:	100a10c0 	call	100a10c <memset>
 10049e0:	84c5883a 	add	r2,r16,r19
 10049e4:	94000015 	stw	r16,0(r18)
 10049e8:	90000215 	stw	zero,8(r18)
 10049ec:	10000005 	stb	zero,0(r2)
 10049f0:	9805883a 	mov	r2,r19
 10049f4:	dfc00417 	ldw	ra,16(sp)
 10049f8:	dcc00317 	ldw	r19,12(sp)
 10049fc:	dc800217 	ldw	r18,8(sp)
 1004a00:	dc400117 	ldw	r17,4(sp)
 1004a04:	dc000017 	ldw	r16,0(sp)
 1004a08:	dec00504 	addi	sp,sp,20
 1004a0c:	f800283a 	ret
 1004a10:	98c00005 	stb	r3,0(r19)
 1004a14:	003ff206 	br	10049e0 <_ZNSs12_S_constructEmcRKSaIcE+0x88>

01004a18 <_ZNSsC1EmcRKSaIcE>:
 1004a18:	defffe04 	addi	sp,sp,-8
 1004a1c:	dc400015 	stw	r17,0(sp)
 1004a20:	2023883a 	mov	r17,r4
 1004a24:	2809883a 	mov	r4,r5
 1004a28:	31403fcc 	andi	r5,r6,255
 1004a2c:	2940201c 	xori	r5,r5,128
 1004a30:	297fe004 	addi	r5,r5,-128
 1004a34:	380d883a 	mov	r6,r7
 1004a38:	dfc00115 	stw	ra,4(sp)
 1004a3c:	10049580 	call	1004958 <_ZNSs12_S_constructEmcRKSaIcE>
 1004a40:	88800015 	stw	r2,0(r17)
 1004a44:	dfc00117 	ldw	ra,4(sp)
 1004a48:	dc400017 	ldw	r17,0(sp)
 1004a4c:	dec00204 	addi	sp,sp,8
 1004a50:	f800283a 	ret

01004a54 <_ZNSsC2EmcRKSaIcE>:
 1004a54:	defffe04 	addi	sp,sp,-8
 1004a58:	dc400015 	stw	r17,0(sp)
 1004a5c:	2023883a 	mov	r17,r4
 1004a60:	2809883a 	mov	r4,r5
 1004a64:	31403fcc 	andi	r5,r6,255
 1004a68:	2940201c 	xori	r5,r5,128
 1004a6c:	297fe004 	addi	r5,r5,-128
 1004a70:	380d883a 	mov	r6,r7
 1004a74:	dfc00115 	stw	ra,4(sp)
 1004a78:	10049580 	call	1004958 <_ZNSs12_S_constructEmcRKSaIcE>
 1004a7c:	88800015 	stw	r2,0(r17)
 1004a80:	dfc00117 	ldw	ra,4(sp)
 1004a84:	dc400017 	ldw	r17,0(sp)
 1004a88:	dec00204 	addi	sp,sp,8
 1004a8c:	f800283a 	ret

01004a90 <_ZNSsC1ERKSaIcE>:
 1004a90:	defffe04 	addi	sp,sp,-8
 1004a94:	dc400015 	stw	r17,0(sp)
 1004a98:	280d883a 	mov	r6,r5
 1004a9c:	2023883a 	mov	r17,r4
 1004aa0:	000b883a 	mov	r5,zero
 1004aa4:	0009883a 	mov	r4,zero
 1004aa8:	dfc00115 	stw	ra,4(sp)
 1004aac:	10049580 	call	1004958 <_ZNSs12_S_constructEmcRKSaIcE>
 1004ab0:	88800015 	stw	r2,0(r17)
 1004ab4:	dfc00117 	ldw	ra,4(sp)
 1004ab8:	dc400017 	ldw	r17,0(sp)
 1004abc:	dec00204 	addi	sp,sp,8
 1004ac0:	f800283a 	ret

01004ac4 <_ZNSsC2ERKSaIcE>:
 1004ac4:	defffe04 	addi	sp,sp,-8
 1004ac8:	dc400015 	stw	r17,0(sp)
 1004acc:	280d883a 	mov	r6,r5
 1004ad0:	2023883a 	mov	r17,r4
 1004ad4:	000b883a 	mov	r5,zero
 1004ad8:	0009883a 	mov	r4,zero
 1004adc:	dfc00115 	stw	ra,4(sp)
 1004ae0:	10049580 	call	1004958 <_ZNSs12_S_constructEmcRKSaIcE>
 1004ae4:	88800015 	stw	r2,0(r17)
 1004ae8:	dfc00117 	ldw	ra,4(sp)
 1004aec:	dc400017 	ldw	r17,0(sp)
 1004af0:	dec00204 	addi	sp,sp,8
 1004af4:	f800283a 	ret

01004af8 <_ZNKSs7compareEmmPKcm>:
 1004af8:	21000017 	ldw	r4,0(r4)
 1004afc:	defffc04 	addi	sp,sp,-16
 1004b00:	d9800015 	stw	r6,0(sp)
 1004b04:	20bffd17 	ldw	r2,-12(r4)
 1004b08:	dfc00315 	stw	ra,12(sp)
 1004b0c:	dc400215 	stw	r17,8(sp)
 1004b10:	dc000115 	stw	r16,4(sp)
 1004b14:	11401936 	bltu	r2,r5,1004b7c <_ZNKSs7compareEmmPKcm+0x84>
 1004b18:	dc000017 	ldw	r16,0(sp)
 1004b1c:	1145c83a 	sub	r2,r2,r5
 1004b20:	14001136 	bltu	r2,r16,1004b68 <_ZNKSs7compareEmmPKcm+0x70>
 1004b24:	dc400417 	ldw	r17,16(sp)
 1004b28:	dc000015 	stw	r16,0(sp)
 1004b2c:	8c000c36 	bltu	r17,r16,1004b60 <_ZNKSs7compareEmmPKcm+0x68>
 1004b30:	d80d883a 	mov	r6,sp
 1004b34:	31800017 	ldw	r6,0(r6)
 1004b38:	2149883a 	add	r4,r4,r5
 1004b3c:	380b883a 	mov	r5,r7
 1004b40:	1009f180 	call	1009f18 <memcmp>
 1004b44:	1000011e 	bne	r2,zero,1004b4c <_ZNKSs7compareEmmPKcm+0x54>
 1004b48:	8445c83a 	sub	r2,r16,r17
 1004b4c:	dfc00317 	ldw	ra,12(sp)
 1004b50:	dc400217 	ldw	r17,8(sp)
 1004b54:	dc000117 	ldw	r16,4(sp)
 1004b58:	dec00404 	addi	sp,sp,16
 1004b5c:	f800283a 	ret
 1004b60:	d9800404 	addi	r6,sp,16
 1004b64:	003ff306 	br	1004b34 <_ZNKSs7compareEmmPKcm+0x3c>
 1004b68:	dc400417 	ldw	r17,16(sp)
 1004b6c:	1021883a 	mov	r16,r2
 1004b70:	dc000015 	stw	r16,0(sp)
 1004b74:	8c3ffa36 	bltu	r17,r16,1004b60 <_ZNKSs7compareEmmPKcm+0x68>
 1004b78:	003fed06 	br	1004b30 <_ZNKSs7compareEmmPKcm+0x38>
 1004b7c:	010040b4 	movhi	r4,258
 1004b80:	213c1f04 	addi	r4,r4,-3972
 1004b84:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01004b88 <_ZNKSs7compareEmmPKc>:
 1004b88:	defff804 	addi	sp,sp,-32
 1004b8c:	dd000615 	stw	r20,24(sp)
 1004b90:	25000017 	ldw	r20,0(r4)
 1004b94:	d9800115 	stw	r6,4(sp)
 1004b98:	dcc00515 	stw	r19,20(sp)
 1004b9c:	a0bffd17 	ldw	r2,-12(r20)
 1004ba0:	dc800415 	stw	r18,16(sp)
 1004ba4:	dfc00715 	stw	ra,28(sp)
 1004ba8:	dc400315 	stw	r17,12(sp)
 1004bac:	dc000215 	stw	r16,8(sp)
 1004bb0:	2825883a 	mov	r18,r5
 1004bb4:	3827883a 	mov	r19,r7
 1004bb8:	11402236 	bltu	r2,r5,1004c44 <_ZNKSs7compareEmmPKc+0xbc>
 1004bbc:	1145c83a 	sub	r2,r2,r5
 1004bc0:	3023883a 	mov	r17,r6
 1004bc4:	11801736 	bltu	r2,r6,1004c24 <_ZNKSs7compareEmmPKc+0x9c>
 1004bc8:	dc400115 	stw	r17,4(sp)
 1004bcc:	9809883a 	mov	r4,r19
 1004bd0:	100a5dc0 	call	100a5dc <strlen>
 1004bd4:	1021883a 	mov	r16,r2
 1004bd8:	d8800015 	stw	r2,0(sp)
 1004bdc:	14400f36 	bltu	r2,r17,1004c1c <_ZNKSs7compareEmmPKc+0x94>
 1004be0:	d9800104 	addi	r6,sp,4
 1004be4:	31800017 	ldw	r6,0(r6)
 1004be8:	a489883a 	add	r4,r20,r18
 1004bec:	980b883a 	mov	r5,r19
 1004bf0:	1009f180 	call	1009f18 <memcmp>
 1004bf4:	1000011e 	bne	r2,zero,1004bfc <_ZNKSs7compareEmmPKc+0x74>
 1004bf8:	8c05c83a 	sub	r2,r17,r16
 1004bfc:	dfc00717 	ldw	ra,28(sp)
 1004c00:	dd000617 	ldw	r20,24(sp)
 1004c04:	dcc00517 	ldw	r19,20(sp)
 1004c08:	dc800417 	ldw	r18,16(sp)
 1004c0c:	dc400317 	ldw	r17,12(sp)
 1004c10:	dc000217 	ldw	r16,8(sp)
 1004c14:	dec00804 	addi	sp,sp,32
 1004c18:	f800283a 	ret
 1004c1c:	d80d883a 	mov	r6,sp
 1004c20:	003ff006 	br	1004be4 <_ZNKSs7compareEmmPKc+0x5c>
 1004c24:	1023883a 	mov	r17,r2
 1004c28:	dc400115 	stw	r17,4(sp)
 1004c2c:	9809883a 	mov	r4,r19
 1004c30:	100a5dc0 	call	100a5dc <strlen>
 1004c34:	1021883a 	mov	r16,r2
 1004c38:	d8800015 	stw	r2,0(sp)
 1004c3c:	147ff736 	bltu	r2,r17,1004c1c <_ZNKSs7compareEmmPKc+0x94>
 1004c40:	003fe706 	br	1004be0 <_ZNKSs7compareEmmPKc+0x58>
 1004c44:	010040b4 	movhi	r4,258
 1004c48:	213c1f04 	addi	r4,r4,-3972
 1004c4c:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01004c50 <_ZNKSs7compareEmmRKSsmm>:
 1004c50:	21000017 	ldw	r4,0(r4)
 1004c54:	defffc04 	addi	sp,sp,-16
 1004c58:	d9800015 	stw	r6,0(sp)
 1004c5c:	20bffd17 	ldw	r2,-12(r4)
 1004c60:	dfc00315 	stw	ra,12(sp)
 1004c64:	dc400215 	stw	r17,8(sp)
 1004c68:	dc000115 	stw	r16,4(sp)
 1004c6c:	da000417 	ldw	r8,16(sp)
 1004c70:	11402436 	bltu	r2,r5,1004d04 <_ZNKSs7compareEmmRKSsmm+0xb4>
 1004c74:	39c00017 	ldw	r7,0(r7)
 1004c78:	38fffd17 	ldw	r3,-12(r7)
 1004c7c:	1a002136 	bltu	r3,r8,1004d04 <_ZNKSs7compareEmmRKSsmm+0xb4>
 1004c80:	dc400017 	ldw	r17,0(sp)
 1004c84:	1145c83a 	sub	r2,r2,r5
 1004c88:	14401836 	bltu	r2,r17,1004cec <_ZNKSs7compareEmmRKSsmm+0x9c>
 1004c8c:	dc000517 	ldw	r16,20(sp)
 1004c90:	1a05c83a 	sub	r2,r3,r8
 1004c94:	dc400015 	stw	r17,0(sp)
 1004c98:	14001036 	bltu	r2,r16,1004cdc <_ZNKSs7compareEmmRKSsmm+0x8c>
 1004c9c:	dc000515 	stw	r16,20(sp)
 1004ca0:	84400c36 	bltu	r16,r17,1004cd4 <_ZNKSs7compareEmmRKSsmm+0x84>
 1004ca4:	d80d883a 	mov	r6,sp
 1004ca8:	31800017 	ldw	r6,0(r6)
 1004cac:	2149883a 	add	r4,r4,r5
 1004cb0:	3a0b883a 	add	r5,r7,r8
 1004cb4:	1009f180 	call	1009f18 <memcmp>
 1004cb8:	1000011e 	bne	r2,zero,1004cc0 <_ZNKSs7compareEmmRKSsmm+0x70>
 1004cbc:	8c05c83a 	sub	r2,r17,r16
 1004cc0:	dfc00317 	ldw	ra,12(sp)
 1004cc4:	dc400217 	ldw	r17,8(sp)
 1004cc8:	dc000117 	ldw	r16,4(sp)
 1004ccc:	dec00404 	addi	sp,sp,16
 1004cd0:	f800283a 	ret
 1004cd4:	d9800504 	addi	r6,sp,20
 1004cd8:	003ff306 	br	1004ca8 <_ZNKSs7compareEmmRKSsmm+0x58>
 1004cdc:	1021883a 	mov	r16,r2
 1004ce0:	dc000515 	stw	r16,20(sp)
 1004ce4:	847ffb36 	bltu	r16,r17,1004cd4 <_ZNKSs7compareEmmRKSsmm+0x84>
 1004ce8:	003fee06 	br	1004ca4 <_ZNKSs7compareEmmRKSsmm+0x54>
 1004cec:	dc000517 	ldw	r16,20(sp)
 1004cf0:	1023883a 	mov	r17,r2
 1004cf4:	1a05c83a 	sub	r2,r3,r8
 1004cf8:	dc400015 	stw	r17,0(sp)
 1004cfc:	143fe72e 	bgeu	r2,r16,1004c9c <_ZNKSs7compareEmmRKSsmm+0x4c>
 1004d00:	003ff606 	br	1004cdc <_ZNKSs7compareEmmRKSsmm+0x8c>
 1004d04:	010040b4 	movhi	r4,258
 1004d08:	213c1f04 	addi	r4,r4,-3972
 1004d0c:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01004d10 <_ZNKSs7compareEmmRKSs>:
 1004d10:	21000017 	ldw	r4,0(r4)
 1004d14:	defffb04 	addi	sp,sp,-20
 1004d18:	d9800115 	stw	r6,4(sp)
 1004d1c:	20bffd17 	ldw	r2,-12(r4)
 1004d20:	dfc00415 	stw	ra,16(sp)
 1004d24:	dc400315 	stw	r17,12(sp)
 1004d28:	dc000215 	stw	r16,8(sp)
 1004d2c:	11401d36 	bltu	r2,r5,1004da4 <_ZNKSs7compareEmmRKSs+0x94>
 1004d30:	1145c83a 	sub	r2,r2,r5
 1004d34:	3021883a 	mov	r16,r6
 1004d38:	11801336 	bltu	r2,r6,1004d88 <_ZNKSs7compareEmmRKSs+0x78>
 1004d3c:	38800017 	ldw	r2,0(r7)
 1004d40:	dc000115 	stw	r16,4(sp)
 1004d44:	147ffd17 	ldw	r17,-12(r2)
 1004d48:	dc400015 	stw	r17,0(sp)
 1004d4c:	8c000c36 	bltu	r17,r16,1004d80 <_ZNKSs7compareEmmRKSs+0x70>
 1004d50:	d9800104 	addi	r6,sp,4
 1004d54:	31800017 	ldw	r6,0(r6)
 1004d58:	2149883a 	add	r4,r4,r5
 1004d5c:	100b883a 	mov	r5,r2
 1004d60:	1009f180 	call	1009f18 <memcmp>
 1004d64:	1000011e 	bne	r2,zero,1004d6c <_ZNKSs7compareEmmRKSs+0x5c>
 1004d68:	8445c83a 	sub	r2,r16,r17
 1004d6c:	dfc00417 	ldw	ra,16(sp)
 1004d70:	dc400317 	ldw	r17,12(sp)
 1004d74:	dc000217 	ldw	r16,8(sp)
 1004d78:	dec00504 	addi	sp,sp,20
 1004d7c:	f800283a 	ret
 1004d80:	d80d883a 	mov	r6,sp
 1004d84:	003ff306 	br	1004d54 <_ZNKSs7compareEmmRKSs+0x44>
 1004d88:	1021883a 	mov	r16,r2
 1004d8c:	38800017 	ldw	r2,0(r7)
 1004d90:	dc000115 	stw	r16,4(sp)
 1004d94:	147ffd17 	ldw	r17,-12(r2)
 1004d98:	dc400015 	stw	r17,0(sp)
 1004d9c:	8c3ff836 	bltu	r17,r16,1004d80 <_ZNKSs7compareEmmRKSs+0x70>
 1004da0:	003feb06 	br	1004d50 <_ZNKSs7compareEmmRKSs+0x40>
 1004da4:	010040b4 	movhi	r4,258
 1004da8:	213c1f04 	addi	r4,r4,-3972
 1004dac:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01004db0 <_ZNSs4_Rep8_M_cloneERKSaIcEm>:
 1004db0:	defffc04 	addi	sp,sp,-16
 1004db4:	dc000015 	stw	r16,0(sp)
 1004db8:	2021883a 	mov	r16,r4
 1004dbc:	21000017 	ldw	r4,0(r4)
 1004dc0:	2807883a 	mov	r3,r5
 1004dc4:	81400117 	ldw	r5,4(r16)
 1004dc8:	3109883a 	add	r4,r6,r4
 1004dcc:	180d883a 	mov	r6,r3
 1004dd0:	dc800215 	stw	r18,8(sp)
 1004dd4:	dc400115 	stw	r17,4(sp)
 1004dd8:	dfc00315 	stw	ra,12(sp)
 1004ddc:	10042440 	call	1004244 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1004de0:	80c00017 	ldw	r3,0(r16)
 1004de4:	1023883a 	mov	r17,r2
 1004de8:	14800304 	addi	r18,r2,12
 1004dec:	18000826 	beq	r3,zero,1004e10 <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x60>
 1004df0:	14800304 	addi	r18,r2,12
 1004df4:	00800044 	movi	r2,1
 1004df8:	180d883a 	mov	r6,r3
 1004dfc:	9009883a 	mov	r4,r18
 1004e00:	81400304 	addi	r5,r16,12
 1004e04:	18800d26 	beq	r3,r2,1004e3c <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x8c>
 1004e08:	1009f8c0 	call	1009f8c <memcpy>
 1004e0c:	80c00017 	ldw	r3,0(r16)
 1004e10:	88c00015 	stw	r3,0(r17)
 1004e14:	88000215 	stw	zero,8(r17)
 1004e18:	1c87883a 	add	r3,r3,r18
 1004e1c:	9005883a 	mov	r2,r18
 1004e20:	18000005 	stb	zero,0(r3)
 1004e24:	dfc00317 	ldw	ra,12(sp)
 1004e28:	dc800217 	ldw	r18,8(sp)
 1004e2c:	dc400117 	ldw	r17,4(sp)
 1004e30:	dc000017 	ldw	r16,0(sp)
 1004e34:	dec00404 	addi	sp,sp,16
 1004e38:	f800283a 	ret
 1004e3c:	80800303 	ldbu	r2,12(r16)
 1004e40:	88800305 	stb	r2,12(r17)
 1004e44:	80c00017 	ldw	r3,0(r16)
 1004e48:	003ff106 	br	1004e10 <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x60>

01004e4c <_ZNSs4_Rep7_M_grabERKSaIcES2_>:
 1004e4c:	deffed04 	addi	sp,sp,-76
 1004e50:	00804074 	movhi	r2,257
 1004e54:	10a0ae04 	addi	r2,r2,-32072
 1004e58:	00c040b4 	movhi	r3,258
 1004e5c:	18fb2a04 	addi	r3,r3,-4952
 1004e60:	d8800615 	stw	r2,24(sp)
 1004e64:	d9000e15 	stw	r4,56(sp)
 1004e68:	00804034 	movhi	r2,256
 1004e6c:	1093cb04 	addi	r2,r2,20268
 1004e70:	d809883a 	mov	r4,sp
 1004e74:	d8c00715 	stw	r3,28(sp)
 1004e78:	d8800915 	stw	r2,36(sp)
 1004e7c:	dfc01215 	stw	ra,72(sp)
 1004e80:	df001115 	stw	fp,68(sp)
 1004e84:	ddc01015 	stw	r23,64(sp)
 1004e88:	dec00815 	stw	sp,32(sp)
 1004e8c:	dec00a15 	stw	sp,40(sp)
 1004e90:	d9400f15 	stw	r5,60(sp)
 1004e94:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1004e98:	d8c00e17 	ldw	r3,56(sp)
 1004e9c:	18800217 	ldw	r2,8(r3)
 1004ea0:	10000e16 	blt	r2,zero,1004edc <_ZNSs4_Rep7_M_grabERKSaIcES2_+0x90>
 1004ea4:	008040b4 	movhi	r2,258
 1004ea8:	109bcf04 	addi	r2,r2,28476
 1004eac:	18801a1e 	bne	r3,r2,1004f18 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xcc>
 1004eb0:	d8800e17 	ldw	r2,56(sp)
 1004eb4:	d809883a 	mov	r4,sp
 1004eb8:	10800304 	addi	r2,r2,12
 1004ebc:	d8800d15 	stw	r2,52(sp)
 1004ec0:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1004ec4:	d8800d17 	ldw	r2,52(sp)
 1004ec8:	dfc01217 	ldw	ra,72(sp)
 1004ecc:	df001117 	ldw	fp,68(sp)
 1004ed0:	ddc01017 	ldw	r23,64(sp)
 1004ed4:	dec01304 	addi	sp,sp,76
 1004ed8:	f800283a 	ret
 1004edc:	d9000e17 	ldw	r4,56(sp)
 1004ee0:	d9400f17 	ldw	r5,60(sp)
 1004ee4:	000d883a 	mov	r6,zero
 1004ee8:	00bfffc4 	movi	r2,-1
 1004eec:	d8800115 	stw	r2,4(sp)
 1004ef0:	1004db00 	call	1004db0 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1004ef4:	d809883a 	mov	r4,sp
 1004ef8:	d8800d15 	stw	r2,52(sp)
 1004efc:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1004f00:	d8800d17 	ldw	r2,52(sp)
 1004f04:	dfc01217 	ldw	ra,72(sp)
 1004f08:	df001117 	ldw	fp,68(sp)
 1004f0c:	ddc01017 	ldw	r23,64(sp)
 1004f10:	dec01304 	addi	sp,sp,76
 1004f14:	f800283a 	ret
 1004f18:	01400044 	movi	r5,1
 1004f1c:	d9400115 	stw	r5,4(sp)
 1004f20:	19000204 	addi	r4,r3,8
 1004f24:	10078f80 	call	10078f8 <_ZN9__gnu_cxx12__atomic_addEPVii>
 1004f28:	003fe106 	br	1004eb0 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0x64>
 1004f2c:	d8800317 	ldw	r2,12(sp)
 1004f30:	00ffffc4 	movi	r3,-1
 1004f34:	d9000217 	ldw	r4,8(sp)
 1004f38:	10c00226 	beq	r2,r3,1004f44 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xf8>
 1004f3c:	d8c00115 	stw	r3,4(sp)
 1004f40:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1004f44:	00bfffc4 	movi	r2,-1
 1004f48:	d8800115 	stw	r2,4(sp)
 1004f4c:	10081380 	call	1008138 <__cxa_call_unexpected>

01004f50 <_ZNKSs4copyEPcmm>:
 1004f50:	21000017 	ldw	r4,0(r4)
 1004f54:	defffe04 	addi	sp,sp,-8
 1004f58:	dfc00115 	stw	ra,4(sp)
 1004f5c:	20fffd17 	ldw	r3,-12(r4)
 1004f60:	dc000015 	stw	r16,0(sp)
 1004f64:	2811883a 	mov	r8,r5
 1004f68:	19c01836 	bltu	r3,r7,1004fcc <_ZNKSs4copyEPcmm+0x7c>
 1004f6c:	19c5c83a 	sub	r2,r3,r7
 1004f70:	3021883a 	mov	r16,r6
 1004f74:	11800c36 	bltu	r2,r6,1004fa8 <_ZNKSs4copyEPcmm+0x58>
 1004f78:	80000626 	beq	r16,zero,1004f94 <_ZNKSs4copyEPcmm+0x44>
 1004f7c:	00800044 	movi	r2,1
 1004f80:	21cb883a 	add	r5,r4,r7
 1004f84:	80800a26 	beq	r16,r2,1004fb0 <_ZNKSs4copyEPcmm+0x60>
 1004f88:	4009883a 	mov	r4,r8
 1004f8c:	800d883a 	mov	r6,r16
 1004f90:	1009f8c0 	call	1009f8c <memcpy>
 1004f94:	8005883a 	mov	r2,r16
 1004f98:	dfc00117 	ldw	ra,4(sp)
 1004f9c:	dc000017 	ldw	r16,0(sp)
 1004fa0:	dec00204 	addi	sp,sp,8
 1004fa4:	f800283a 	ret
 1004fa8:	1021883a 	mov	r16,r2
 1004fac:	003ff206 	br	1004f78 <_ZNKSs4copyEPcmm+0x28>
 1004fb0:	28800003 	ldbu	r2,0(r5)
 1004fb4:	40800005 	stb	r2,0(r8)
 1004fb8:	8005883a 	mov	r2,r16
 1004fbc:	dfc00117 	ldw	ra,4(sp)
 1004fc0:	dc000017 	ldw	r16,0(sp)
 1004fc4:	dec00204 	addi	sp,sp,8
 1004fc8:	f800283a 	ret
 1004fcc:	010040b4 	movhi	r4,258
 1004fd0:	213c2504 	addi	r4,r4,-3948
 1004fd4:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01004fd8 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 1004fd8:	3147c83a 	sub	r3,r6,r5
 1004fdc:	00800044 	movi	r2,1
 1004fe0:	180d883a 	mov	r6,r3
 1004fe4:	18800126 	beq	r3,r2,1004fec <_ZNSs13_S_copy_charsEPcPKcS1_+0x14>
 1004fe8:	1009f8c1 	jmpi	1009f8c <memcpy>
 1004fec:	28800003 	ldbu	r2,0(r5)
 1004ff0:	20800005 	stb	r2,0(r4)
 1004ff4:	f800283a 	ret

01004ff8 <_ZNSs13_S_copy_charsEPcS_S_>:
 1004ff8:	3147c83a 	sub	r3,r6,r5
 1004ffc:	00800044 	movi	r2,1
 1005000:	180d883a 	mov	r6,r3
 1005004:	18800126 	beq	r3,r2,100500c <_ZNSs13_S_copy_charsEPcS_S_+0x14>
 1005008:	1009f8c1 	jmpi	1009f8c <memcpy>
 100500c:	28800003 	ldbu	r2,0(r5)
 1005010:	20800005 	stb	r2,0(r4)
 1005014:	f800283a 	ret

01005018 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>:
 1005018:	defffb04 	addi	sp,sp,-20
 100501c:	dc000015 	stw	r16,0(sp)
 1005020:	dfc00415 	stw	ra,16(sp)
 1005024:	dcc00315 	stw	r19,12(sp)
 1005028:	dc800215 	stw	r18,8(sp)
 100502c:	dc400115 	stw	r17,4(sp)
 1005030:	2021883a 	mov	r16,r4
 1005034:	21401c26 	beq	r4,r5,10050a8 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x90>
 1005038:	20002526 	beq	r4,zero,10050d0 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0xb8>
 100503c:	2c25c83a 	sub	r18,r5,r16
 1005040:	9009883a 	mov	r4,r18
 1005044:	000b883a 	mov	r5,zero
 1005048:	10042440 	call	1004244 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 100504c:	1023883a 	mov	r17,r2
 1005050:	14c00304 	addi	r19,r2,12
 1005054:	00800044 	movi	r2,1
 1005058:	90801026 	beq	r18,r2,100509c <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x84>
 100505c:	800b883a 	mov	r5,r16
 1005060:	9809883a 	mov	r4,r19
 1005064:	900d883a 	mov	r6,r18
 1005068:	1009f8c0 	call	1009f8c <memcpy>
 100506c:	9c85883a 	add	r2,r19,r18
 1005070:	8c800015 	stw	r18,0(r17)
 1005074:	88000215 	stw	zero,8(r17)
 1005078:	10000005 	stb	zero,0(r2)
 100507c:	9805883a 	mov	r2,r19
 1005080:	dfc00417 	ldw	ra,16(sp)
 1005084:	dcc00317 	ldw	r19,12(sp)
 1005088:	dc800217 	ldw	r18,8(sp)
 100508c:	dc400117 	ldw	r17,4(sp)
 1005090:	dc000017 	ldw	r16,0(sp)
 1005094:	dec00504 	addi	sp,sp,20
 1005098:	f800283a 	ret
 100509c:	80800003 	ldbu	r2,0(r16)
 10050a0:	88800305 	stb	r2,12(r17)
 10050a4:	003ff106 	br	100506c <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x54>
 10050a8:	04c040b4 	movhi	r19,258
 10050ac:	9cdbd204 	addi	r19,r19,28488
 10050b0:	9805883a 	mov	r2,r19
 10050b4:	dfc00417 	ldw	ra,16(sp)
 10050b8:	dcc00317 	ldw	r19,12(sp)
 10050bc:	dc800217 	ldw	r18,8(sp)
 10050c0:	dc400117 	ldw	r17,4(sp)
 10050c4:	dc000017 	ldw	r16,0(sp)
 10050c8:	dec00504 	addi	sp,sp,20
 10050cc:	f800283a 	ret
 10050d0:	010040b4 	movhi	r4,258
 10050d4:	213c2a04 	addi	r4,r4,-3928
 10050d8:	10018c40 	call	10018c4 <_ZSt19__throw_logic_errorPKc>

010050dc <_ZNSsC2IPcEET_S1_RKSaIcE>:
 10050dc:	defffe04 	addi	sp,sp,-8
 10050e0:	dc400015 	stw	r17,0(sp)
 10050e4:	2023883a 	mov	r17,r4
 10050e8:	2809883a 	mov	r4,r5
 10050ec:	300b883a 	mov	r5,r6
 10050f0:	380d883a 	mov	r6,r7
 10050f4:	dfc00115 	stw	ra,4(sp)
 10050f8:	10050180 	call	1005018 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 10050fc:	88800015 	stw	r2,0(r17)
 1005100:	dfc00117 	ldw	ra,4(sp)
 1005104:	dc400017 	ldw	r17,0(sp)
 1005108:	dec00204 	addi	sp,sp,8
 100510c:	f800283a 	ret

01005110 <_ZNSsC1ERKSsmmRKSaIcE>:
 1005110:	29400017 	ldw	r5,0(r5)
 1005114:	defffe04 	addi	sp,sp,-8
 1005118:	dc000015 	stw	r16,0(sp)
 100511c:	28bffd17 	ldw	r2,-12(r5)
 1005120:	dfc00115 	stw	ra,4(sp)
 1005124:	2021883a 	mov	r16,r4
 1005128:	11800e36 	bltu	r2,r6,1005164 <_ZNSsC1ERKSsmmRKSaIcE+0x54>
 100512c:	1185c83a 	sub	r2,r2,r6
 1005130:	2989883a 	add	r4,r5,r6
 1005134:	11c00936 	bltu	r2,r7,100515c <_ZNSsC1ERKSsmmRKSaIcE+0x4c>
 1005138:	29cb883a 	add	r5,r5,r7
 100513c:	314b883a 	add	r5,r6,r5
 1005140:	d9800217 	ldw	r6,8(sp)
 1005144:	10050180 	call	1005018 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 1005148:	80800015 	stw	r2,0(r16)
 100514c:	dfc00117 	ldw	ra,4(sp)
 1005150:	dc000017 	ldw	r16,0(sp)
 1005154:	dec00204 	addi	sp,sp,8
 1005158:	f800283a 	ret
 100515c:	100f883a 	mov	r7,r2
 1005160:	003ff506 	br	1005138 <_ZNSsC1ERKSsmmRKSaIcE+0x28>
 1005164:	010040b4 	movhi	r4,258
 1005168:	213c3504 	addi	r4,r4,-3884
 100516c:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01005170 <_ZNSsC2ERKSsmmRKSaIcE>:
 1005170:	29400017 	ldw	r5,0(r5)
 1005174:	defffe04 	addi	sp,sp,-8
 1005178:	dc000015 	stw	r16,0(sp)
 100517c:	28bffd17 	ldw	r2,-12(r5)
 1005180:	dfc00115 	stw	ra,4(sp)
 1005184:	2021883a 	mov	r16,r4
 1005188:	11800e36 	bltu	r2,r6,10051c4 <_ZNSsC2ERKSsmmRKSaIcE+0x54>
 100518c:	1185c83a 	sub	r2,r2,r6
 1005190:	2989883a 	add	r4,r5,r6
 1005194:	11c00936 	bltu	r2,r7,10051bc <_ZNSsC2ERKSsmmRKSaIcE+0x4c>
 1005198:	29cb883a 	add	r5,r5,r7
 100519c:	314b883a 	add	r5,r6,r5
 10051a0:	d9800217 	ldw	r6,8(sp)
 10051a4:	10050180 	call	1005018 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 10051a8:	80800015 	stw	r2,0(r16)
 10051ac:	dfc00117 	ldw	ra,4(sp)
 10051b0:	dc000017 	ldw	r16,0(sp)
 10051b4:	dec00204 	addi	sp,sp,8
 10051b8:	f800283a 	ret
 10051bc:	100f883a 	mov	r7,r2
 10051c0:	003ff506 	br	1005198 <_ZNSsC2ERKSsmmRKSaIcE+0x28>
 10051c4:	010040b4 	movhi	r4,258
 10051c8:	213c3504 	addi	r4,r4,-3884
 10051cc:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

010051d0 <_ZNSsC1ERKSsmm>:
 10051d0:	deffea04 	addi	sp,sp,-88
 10051d4:	00804074 	movhi	r2,257
 10051d8:	10a0ae04 	addi	r2,r2,-32072
 10051dc:	00c040b4 	movhi	r3,258
 10051e0:	18fb2d44 	addi	r3,r3,-4939
 10051e4:	d8800715 	stw	r2,28(sp)
 10051e8:	d9000f15 	stw	r4,60(sp)
 10051ec:	00804034 	movhi	r2,256
 10051f0:	1094ab04 	addi	r2,r2,21164
 10051f4:	d9000104 	addi	r4,sp,4
 10051f8:	d8c00815 	stw	r3,32(sp)
 10051fc:	d8800a15 	stw	r2,40(sp)
 1005200:	d9401015 	stw	r5,64(sp)
 1005204:	dfc01515 	stw	ra,84(sp)
 1005208:	df001415 	stw	fp,80(sp)
 100520c:	ddc01315 	stw	r23,76(sp)
 1005210:	dec00915 	stw	sp,36(sp)
 1005214:	dec00b15 	stw	sp,44(sp)
 1005218:	d9801115 	stw	r6,68(sp)
 100521c:	d9c01215 	stw	r7,72(sp)
 1005220:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1005224:	d8801017 	ldw	r2,64(sp)
 1005228:	d8c01117 	ldw	r3,68(sp)
 100522c:	11400017 	ldw	r5,0(r2)
 1005230:	28bffd17 	ldw	r2,-12(r5)
 1005234:	10c01836 	bltu	r2,r3,1005298 <_ZNSsC1ERKSsmm+0xc8>
 1005238:	d8c01117 	ldw	r3,68(sp)
 100523c:	d9c01217 	ldw	r7,72(sp)
 1005240:	10c5c83a 	sub	r2,r2,r3
 1005244:	28c9883a 	add	r4,r5,r3
 1005248:	11c01136 	bltu	r2,r7,1005290 <_ZNSsC1ERKSsmm+0xc0>
 100524c:	00800044 	movi	r2,1
 1005250:	d8800215 	stw	r2,8(sp)
 1005254:	d8801117 	ldw	r2,68(sp)
 1005258:	29cb883a 	add	r5,r5,r7
 100525c:	d80d883a 	mov	r6,sp
 1005260:	114b883a 	add	r5,r2,r5
 1005264:	d9c00e03 	ldbu	r7,56(sp)
 1005268:	10050180 	call	1005018 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 100526c:	d8c00f17 	ldw	r3,60(sp)
 1005270:	d9000104 	addi	r4,sp,4
 1005274:	18800015 	stw	r2,0(r3)
 1005278:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 100527c:	dfc01517 	ldw	ra,84(sp)
 1005280:	df001417 	ldw	fp,80(sp)
 1005284:	ddc01317 	ldw	r23,76(sp)
 1005288:	dec01604 	addi	sp,sp,88
 100528c:	f800283a 	ret
 1005290:	100f883a 	mov	r7,r2
 1005294:	003fed06 	br	100524c <_ZNSsC1ERKSsmm+0x7c>
 1005298:	00bfffc4 	movi	r2,-1
 100529c:	010040b4 	movhi	r4,258
 10052a0:	213c3504 	addi	r4,r4,-3884
 10052a4:	d8800215 	stw	r2,8(sp)
 10052a8:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>
 10052ac:	d9000317 	ldw	r4,12(sp)
 10052b0:	00bfffc4 	movi	r2,-1
 10052b4:	d8800215 	stw	r2,8(sp)
 10052b8:	10094380 	call	1009438 <_Unwind_SjLj_Resume>

010052bc <_ZNKSs6substrEmm>:
 10052bc:	28c00017 	ldw	r3,0(r5)
 10052c0:	defffe04 	addi	sp,sp,-8
 10052c4:	dc000015 	stw	r16,0(sp)
 10052c8:	18bffd17 	ldw	r2,-12(r3)
 10052cc:	dfc00115 	stw	ra,4(sp)
 10052d0:	2021883a 	mov	r16,r4
 10052d4:	11800636 	bltu	r2,r6,10052f0 <_ZNKSs6substrEmm+0x34>
 10052d8:	10051d00 	call	10051d0 <_ZNSsC1ERKSsmm>
 10052dc:	8005883a 	mov	r2,r16
 10052e0:	dfc00117 	ldw	ra,4(sp)
 10052e4:	dc000017 	ldw	r16,0(sp)
 10052e8:	dec00204 	addi	sp,sp,8
 10052ec:	f800283a 	ret
 10052f0:	010040b4 	movhi	r4,258
 10052f4:	213c3c04 	addi	r4,r4,-3856
 10052f8:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

010052fc <_ZNSsC2ERKSsmm>:
 10052fc:	deffea04 	addi	sp,sp,-88
 1005300:	00804074 	movhi	r2,257
 1005304:	10a0ae04 	addi	r2,r2,-32072
 1005308:	00c040b4 	movhi	r3,258
 100530c:	18fb2ec4 	addi	r3,r3,-4933
 1005310:	d8800715 	stw	r2,28(sp)
 1005314:	d9000f15 	stw	r4,60(sp)
 1005318:	00804034 	movhi	r2,256
 100531c:	1094f604 	addi	r2,r2,21464
 1005320:	d9000104 	addi	r4,sp,4
 1005324:	d8c00815 	stw	r3,32(sp)
 1005328:	d8800a15 	stw	r2,40(sp)
 100532c:	d9401015 	stw	r5,64(sp)
 1005330:	dfc01515 	stw	ra,84(sp)
 1005334:	df001415 	stw	fp,80(sp)
 1005338:	ddc01315 	stw	r23,76(sp)
 100533c:	dec00915 	stw	sp,36(sp)
 1005340:	dec00b15 	stw	sp,44(sp)
 1005344:	d9801115 	stw	r6,68(sp)
 1005348:	d9c01215 	stw	r7,72(sp)
 100534c:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1005350:	d8801017 	ldw	r2,64(sp)
 1005354:	d8c01117 	ldw	r3,68(sp)
 1005358:	11400017 	ldw	r5,0(r2)
 100535c:	28bffd17 	ldw	r2,-12(r5)
 1005360:	10c01836 	bltu	r2,r3,10053c4 <_ZNSsC2ERKSsmm+0xc8>
 1005364:	d8c01117 	ldw	r3,68(sp)
 1005368:	d9c01217 	ldw	r7,72(sp)
 100536c:	10c5c83a 	sub	r2,r2,r3
 1005370:	28c9883a 	add	r4,r5,r3
 1005374:	11c01136 	bltu	r2,r7,10053bc <_ZNSsC2ERKSsmm+0xc0>
 1005378:	00800044 	movi	r2,1
 100537c:	d8800215 	stw	r2,8(sp)
 1005380:	d8801117 	ldw	r2,68(sp)
 1005384:	29cb883a 	add	r5,r5,r7
 1005388:	d80d883a 	mov	r6,sp
 100538c:	114b883a 	add	r5,r2,r5
 1005390:	d9c00e03 	ldbu	r7,56(sp)
 1005394:	10050180 	call	1005018 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 1005398:	d8c00f17 	ldw	r3,60(sp)
 100539c:	d9000104 	addi	r4,sp,4
 10053a0:	18800015 	stw	r2,0(r3)
 10053a4:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 10053a8:	dfc01517 	ldw	ra,84(sp)
 10053ac:	df001417 	ldw	fp,80(sp)
 10053b0:	ddc01317 	ldw	r23,76(sp)
 10053b4:	dec01604 	addi	sp,sp,88
 10053b8:	f800283a 	ret
 10053bc:	100f883a 	mov	r7,r2
 10053c0:	003fed06 	br	1005378 <_ZNSsC2ERKSsmm+0x7c>
 10053c4:	00bfffc4 	movi	r2,-1
 10053c8:	010040b4 	movhi	r4,258
 10053cc:	213c3504 	addi	r4,r4,-3884
 10053d0:	d8800215 	stw	r2,8(sp)
 10053d4:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>
 10053d8:	d9000317 	ldw	r4,12(sp)
 10053dc:	00bfffc4 	movi	r2,-1
 10053e0:	d8800215 	stw	r2,8(sp)
 10053e4:	10094380 	call	1009438 <_Unwind_SjLj_Resume>

010053e8 <_ZNSsC1IPcEET_S1_RKSaIcE>:
 10053e8:	defffe04 	addi	sp,sp,-8
 10053ec:	dc400015 	stw	r17,0(sp)
 10053f0:	2023883a 	mov	r17,r4
 10053f4:	2809883a 	mov	r4,r5
 10053f8:	300b883a 	mov	r5,r6
 10053fc:	380d883a 	mov	r6,r7
 1005400:	dfc00115 	stw	ra,4(sp)
 1005404:	10050180 	call	1005018 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 1005408:	88800015 	stw	r2,0(r17)
 100540c:	dfc00117 	ldw	ra,4(sp)
 1005410:	dc400017 	ldw	r17,0(sp)
 1005414:	dec00204 	addi	sp,sp,8
 1005418:	f800283a 	ret

0100541c <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_>:
 100541c:	3147c83a 	sub	r3,r6,r5
 1005420:	00800044 	movi	r2,1
 1005424:	180d883a 	mov	r6,r3
 1005428:	18800126 	beq	r3,r2,1005430 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_+0x14>
 100542c:	1009f8c1 	jmpi	1009f8c <memcpy>
 1005430:	28800003 	ldbu	r2,0(r5)
 1005434:	20800005 	stb	r2,0(r4)
 1005438:	f800283a 	ret

0100543c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 100543c:	defffb04 	addi	sp,sp,-20
 1005440:	dc000015 	stw	r16,0(sp)
 1005444:	dfc00415 	stw	ra,16(sp)
 1005448:	dcc00315 	stw	r19,12(sp)
 100544c:	dc800215 	stw	r18,8(sp)
 1005450:	dc400115 	stw	r17,4(sp)
 1005454:	2021883a 	mov	r16,r4
 1005458:	21401c26 	beq	r4,r5,10054cc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x90>
 100545c:	20002526 	beq	r4,zero,10054f4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xb8>
 1005460:	2c25c83a 	sub	r18,r5,r16
 1005464:	9009883a 	mov	r4,r18
 1005468:	000b883a 	mov	r5,zero
 100546c:	10042440 	call	1004244 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1005470:	1023883a 	mov	r17,r2
 1005474:	14c00304 	addi	r19,r2,12
 1005478:	00800044 	movi	r2,1
 100547c:	90801026 	beq	r18,r2,10054c0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x84>
 1005480:	800b883a 	mov	r5,r16
 1005484:	9809883a 	mov	r4,r19
 1005488:	900d883a 	mov	r6,r18
 100548c:	1009f8c0 	call	1009f8c <memcpy>
 1005490:	9c85883a 	add	r2,r19,r18
 1005494:	8c800015 	stw	r18,0(r17)
 1005498:	88000215 	stw	zero,8(r17)
 100549c:	10000005 	stb	zero,0(r2)
 10054a0:	9805883a 	mov	r2,r19
 10054a4:	dfc00417 	ldw	ra,16(sp)
 10054a8:	dcc00317 	ldw	r19,12(sp)
 10054ac:	dc800217 	ldw	r18,8(sp)
 10054b0:	dc400117 	ldw	r17,4(sp)
 10054b4:	dc000017 	ldw	r16,0(sp)
 10054b8:	dec00504 	addi	sp,sp,20
 10054bc:	f800283a 	ret
 10054c0:	80800003 	ldbu	r2,0(r16)
 10054c4:	88800305 	stb	r2,12(r17)
 10054c8:	003ff106 	br	1005490 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x54>
 10054cc:	04c040b4 	movhi	r19,258
 10054d0:	9cdbd204 	addi	r19,r19,28488
 10054d4:	9805883a 	mov	r2,r19
 10054d8:	dfc00417 	ldw	ra,16(sp)
 10054dc:	dcc00317 	ldw	r19,12(sp)
 10054e0:	dc800217 	ldw	r18,8(sp)
 10054e4:	dc400117 	ldw	r17,4(sp)
 10054e8:	dc000017 	ldw	r16,0(sp)
 10054ec:	dec00504 	addi	sp,sp,20
 10054f0:	f800283a 	ret
 10054f4:	010040b4 	movhi	r4,258
 10054f8:	213c2a04 	addi	r4,r4,-3928
 10054fc:	10018c40 	call	10018c4 <_ZSt19__throw_logic_errorPKc>

01005500 <_ZNSsC2IPKcEET_S2_RKSaIcE>:
 1005500:	defffe04 	addi	sp,sp,-8
 1005504:	dc400015 	stw	r17,0(sp)
 1005508:	2023883a 	mov	r17,r4
 100550c:	2809883a 	mov	r4,r5
 1005510:	300b883a 	mov	r5,r6
 1005514:	380d883a 	mov	r6,r7
 1005518:	dfc00115 	stw	ra,4(sp)
 100551c:	100543c0 	call	100543c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1005520:	88800015 	stw	r2,0(r17)
 1005524:	dfc00117 	ldw	ra,4(sp)
 1005528:	dc400017 	ldw	r17,0(sp)
 100552c:	dec00204 	addi	sp,sp,8
 1005530:	f800283a 	ret

01005534 <_ZNSsC1EPKcmRKSaIcE>:
 1005534:	defffe04 	addi	sp,sp,-8
 1005538:	dc400015 	stw	r17,0(sp)
 100553c:	2023883a 	mov	r17,r4
 1005540:	2809883a 	mov	r4,r5
 1005544:	314b883a 	add	r5,r6,r5
 1005548:	380d883a 	mov	r6,r7
 100554c:	dfc00115 	stw	ra,4(sp)
 1005550:	100543c0 	call	100543c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1005554:	88800015 	stw	r2,0(r17)
 1005558:	dfc00117 	ldw	ra,4(sp)
 100555c:	dc400017 	ldw	r17,0(sp)
 1005560:	dec00204 	addi	sp,sp,8
 1005564:	f800283a 	ret

01005568 <_ZNSsC2EPKcmRKSaIcE>:
 1005568:	defffe04 	addi	sp,sp,-8
 100556c:	dc400015 	stw	r17,0(sp)
 1005570:	2023883a 	mov	r17,r4
 1005574:	2809883a 	mov	r4,r5
 1005578:	314b883a 	add	r5,r6,r5
 100557c:	380d883a 	mov	r6,r7
 1005580:	dfc00115 	stw	ra,4(sp)
 1005584:	100543c0 	call	100543c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1005588:	88800015 	stw	r2,0(r17)
 100558c:	dfc00117 	ldw	ra,4(sp)
 1005590:	dc400017 	ldw	r17,0(sp)
 1005594:	dec00204 	addi	sp,sp,8
 1005598:	f800283a 	ret

0100559c <_ZNSsC1IPKcEET_S2_RKSaIcE>:
 100559c:	defffe04 	addi	sp,sp,-8
 10055a0:	dc400015 	stw	r17,0(sp)
 10055a4:	2023883a 	mov	r17,r4
 10055a8:	2809883a 	mov	r4,r5
 10055ac:	300b883a 	mov	r5,r6
 10055b0:	380d883a 	mov	r6,r7
 10055b4:	dfc00115 	stw	ra,4(sp)
 10055b8:	100543c0 	call	100543c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 10055bc:	88800015 	stw	r2,0(r17)
 10055c0:	dfc00117 	ldw	ra,4(sp)
 10055c4:	dc400017 	ldw	r17,0(sp)
 10055c8:	dec00204 	addi	sp,sp,8
 10055cc:	f800283a 	ret

010055d0 <_ZNSsC1EPKcRKSaIcE>:
 10055d0:	defffc04 	addi	sp,sp,-16
 10055d4:	dc400215 	stw	r17,8(sp)
 10055d8:	dc000115 	stw	r16,4(sp)
 10055dc:	2023883a 	mov	r17,r4
 10055e0:	dfc00315 	stw	ra,12(sp)
 10055e4:	00bfffc4 	movi	r2,-1
 10055e8:	2809883a 	mov	r4,r5
 10055ec:	3021883a 	mov	r16,r6
 10055f0:	28000426 	beq	r5,zero,1005604 <_ZNSsC1EPKcRKSaIcE+0x34>
 10055f4:	d9400015 	stw	r5,0(sp)
 10055f8:	100a5dc0 	call	100a5dc <strlen>
 10055fc:	d9400017 	ldw	r5,0(sp)
 1005600:	2885883a 	add	r2,r5,r2
 1005604:	2809883a 	mov	r4,r5
 1005608:	800d883a 	mov	r6,r16
 100560c:	100b883a 	mov	r5,r2
 1005610:	800f883a 	mov	r7,r16
 1005614:	100543c0 	call	100543c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1005618:	88800015 	stw	r2,0(r17)
 100561c:	dfc00317 	ldw	ra,12(sp)
 1005620:	dc400217 	ldw	r17,8(sp)
 1005624:	dc000117 	ldw	r16,4(sp)
 1005628:	dec00404 	addi	sp,sp,16
 100562c:	f800283a 	ret

01005630 <_ZNSsC2EPKcRKSaIcE>:
 1005630:	defffc04 	addi	sp,sp,-16
 1005634:	dc400215 	stw	r17,8(sp)
 1005638:	dc000115 	stw	r16,4(sp)
 100563c:	2023883a 	mov	r17,r4
 1005640:	dfc00315 	stw	ra,12(sp)
 1005644:	00bfffc4 	movi	r2,-1
 1005648:	2809883a 	mov	r4,r5
 100564c:	3021883a 	mov	r16,r6
 1005650:	28000426 	beq	r5,zero,1005664 <_ZNSsC2EPKcRKSaIcE+0x34>
 1005654:	d9400015 	stw	r5,0(sp)
 1005658:	100a5dc0 	call	100a5dc <strlen>
 100565c:	d9400017 	ldw	r5,0(sp)
 1005660:	2885883a 	add	r2,r5,r2
 1005664:	2809883a 	mov	r4,r5
 1005668:	800d883a 	mov	r6,r16
 100566c:	100b883a 	mov	r5,r2
 1005670:	800f883a 	mov	r7,r16
 1005674:	100543c0 	call	100543c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1005678:	88800015 	stw	r2,0(r17)
 100567c:	dfc00317 	ldw	ra,12(sp)
 1005680:	dc400217 	ldw	r17,8(sp)
 1005684:	dc000117 	ldw	r16,4(sp)
 1005688:	dec00404 	addi	sp,sp,16
 100568c:	f800283a 	ret

01005690 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_>:
 1005690:	3147c83a 	sub	r3,r6,r5
 1005694:	00800044 	movi	r2,1
 1005698:	180d883a 	mov	r6,r3
 100569c:	18800126 	beq	r3,r2,10056a4 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_+0x14>
 10056a0:	1009f8c1 	jmpi	1009f8c <memcpy>
 10056a4:	28800003 	ldbu	r2,0(r5)
 10056a8:	20800005 	stb	r2,0(r4)
 10056ac:	f800283a 	ret

010056b0 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>:
 10056b0:	defffb04 	addi	sp,sp,-20
 10056b4:	dc000015 	stw	r16,0(sp)
 10056b8:	dfc00415 	stw	ra,16(sp)
 10056bc:	dcc00315 	stw	r19,12(sp)
 10056c0:	dc800215 	stw	r18,8(sp)
 10056c4:	dc400115 	stw	r17,4(sp)
 10056c8:	2021883a 	mov	r16,r4
 10056cc:	29000a1e 	bne	r5,r4,10056f8 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0x48>
 10056d0:	04c040b4 	movhi	r19,258
 10056d4:	9cdbd204 	addi	r19,r19,28488
 10056d8:	9805883a 	mov	r2,r19
 10056dc:	dfc00417 	ldw	ra,16(sp)
 10056e0:	dcc00317 	ldw	r19,12(sp)
 10056e4:	dc800217 	ldw	r18,8(sp)
 10056e8:	dc400117 	ldw	r17,4(sp)
 10056ec:	dc000017 	ldw	r16,0(sp)
 10056f0:	dec00504 	addi	sp,sp,20
 10056f4:	f800283a 	ret
 10056f8:	2923c83a 	sub	r17,r5,r4
 10056fc:	8809883a 	mov	r4,r17
 1005700:	000b883a 	mov	r5,zero
 1005704:	10042440 	call	1004244 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1005708:	1025883a 	mov	r18,r2
 100570c:	14c00304 	addi	r19,r2,12
 1005710:	00800044 	movi	r2,1
 1005714:	88801026 	beq	r17,r2,1005758 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0xa8>
 1005718:	800b883a 	mov	r5,r16
 100571c:	9809883a 	mov	r4,r19
 1005720:	880d883a 	mov	r6,r17
 1005724:	1009f8c0 	call	1009f8c <memcpy>
 1005728:	9c45883a 	add	r2,r19,r17
 100572c:	94400015 	stw	r17,0(r18)
 1005730:	90000215 	stw	zero,8(r18)
 1005734:	10000005 	stb	zero,0(r2)
 1005738:	9805883a 	mov	r2,r19
 100573c:	dfc00417 	ldw	ra,16(sp)
 1005740:	dcc00317 	ldw	r19,12(sp)
 1005744:	dc800217 	ldw	r18,8(sp)
 1005748:	dc400117 	ldw	r17,4(sp)
 100574c:	dc000017 	ldw	r16,0(sp)
 1005750:	dec00504 	addi	sp,sp,20
 1005754:	f800283a 	ret
 1005758:	80800003 	ldbu	r2,0(r16)
 100575c:	98800005 	stb	r2,0(r19)
 1005760:	003ff106 	br	1005728 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0x78>

01005764 <_ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE>:
 1005764:	defffe04 	addi	sp,sp,-8
 1005768:	dc400015 	stw	r17,0(sp)
 100576c:	2023883a 	mov	r17,r4
 1005770:	2809883a 	mov	r4,r5
 1005774:	300b883a 	mov	r5,r6
 1005778:	380d883a 	mov	r6,r7
 100577c:	dfc00115 	stw	ra,4(sp)
 1005780:	10056b00 	call	10056b0 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>
 1005784:	88800015 	stw	r2,0(r17)
 1005788:	dfc00117 	ldw	ra,4(sp)
 100578c:	dc400017 	ldw	r17,0(sp)
 1005790:	dec00204 	addi	sp,sp,8
 1005794:	f800283a 	ret

01005798 <_ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE>:
 1005798:	defffe04 	addi	sp,sp,-8
 100579c:	dc400015 	stw	r17,0(sp)
 10057a0:	2023883a 	mov	r17,r4
 10057a4:	2809883a 	mov	r4,r5
 10057a8:	300b883a 	mov	r5,r6
 10057ac:	380d883a 	mov	r6,r7
 10057b0:	dfc00115 	stw	ra,4(sp)
 10057b4:	10056b00 	call	10056b0 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>
 10057b8:	88800015 	stw	r2,0(r17)
 10057bc:	dfc00117 	ldw	ra,4(sp)
 10057c0:	dc400017 	ldw	r17,0(sp)
 10057c4:	dec00204 	addi	sp,sp,8
 10057c8:	f800283a 	ret

010057cc <_ZNSsC1ERKSs>:
 10057cc:	deffec04 	addi	sp,sp,-80
 10057d0:	00804074 	movhi	r2,257
 10057d4:	10a0ae04 	addi	r2,r2,-32072
 10057d8:	d8800715 	stw	r2,28(sp)
 10057dc:	00c040b4 	movhi	r3,258
 10057e0:	18fb3104 	addi	r3,r3,-4924
 10057e4:	00804034 	movhi	r2,256
 10057e8:	10962404 	addi	r2,r2,22672
 10057ec:	d9000e15 	stw	r4,56(sp)
 10057f0:	d9000104 	addi	r4,sp,4
 10057f4:	d8800a15 	stw	r2,40(sp)
 10057f8:	dfc01315 	stw	ra,76(sp)
 10057fc:	df001215 	stw	fp,72(sp)
 1005800:	ddc01115 	stw	r23,68(sp)
 1005804:	d8c00815 	stw	r3,32(sp)
 1005808:	d9400f15 	stw	r5,60(sp)
 100580c:	dec00915 	stw	sp,36(sp)
 1005810:	dec00b15 	stw	sp,44(sp)
 1005814:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1005818:	d8800f17 	ldw	r2,60(sp)
 100581c:	10800017 	ldw	r2,0(r2)
 1005820:	113ffd04 	addi	r4,r2,-12
 1005824:	d8801015 	stw	r2,64(sp)
 1005828:	20800217 	ldw	r2,8(r4)
 100582c:	10000d16 	blt	r2,zero,1005864 <_ZNSsC1ERKSs+0x98>
 1005830:	008040b4 	movhi	r2,258
 1005834:	109bcf04 	addi	r2,r2,28476
 1005838:	2080101e 	bne	r4,r2,100587c <_ZNSsC1ERKSs+0xb0>
 100583c:	d8801017 	ldw	r2,64(sp)
 1005840:	d8c00e17 	ldw	r3,56(sp)
 1005844:	d9000104 	addi	r4,sp,4
 1005848:	18800015 	stw	r2,0(r3)
 100584c:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1005850:	dfc01317 	ldw	ra,76(sp)
 1005854:	df001217 	ldw	fp,72(sp)
 1005858:	ddc01117 	ldw	r23,68(sp)
 100585c:	dec01404 	addi	sp,sp,80
 1005860:	f800283a 	ret
 1005864:	00800084 	movi	r2,2
 1005868:	d8800215 	stw	r2,8(sp)
 100586c:	d80b883a 	mov	r5,sp
 1005870:	000d883a 	mov	r6,zero
 1005874:	1004db00 	call	1004db0 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1005878:	003ff106 	br	1005840 <_ZNSsC1ERKSs+0x74>
 100587c:	01400044 	movi	r5,1
 1005880:	d9400215 	stw	r5,8(sp)
 1005884:	21000204 	addi	r4,r4,8
 1005888:	10078f80 	call	10078f8 <_ZN9__gnu_cxx12__atomic_addEPVii>
 100588c:	003feb06 	br	100583c <_ZNSsC1ERKSs+0x70>
 1005890:	d8c00217 	ldw	r3,8(sp)
 1005894:	00800044 	movi	r2,1
 1005898:	d9000317 	ldw	r4,12(sp)
 100589c:	d9400417 	ldw	r5,16(sp)
 10058a0:	18800426 	beq	r3,r2,10058b4 <_ZNSsC1ERKSs+0xe8>
 10058a4:	00bfffc4 	movi	r2,-1
 10058a8:	28800426 	beq	r5,r2,10058bc <_ZNSsC1ERKSs+0xf0>
 10058ac:	d8800215 	stw	r2,8(sp)
 10058b0:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 10058b4:	00bfffc4 	movi	r2,-1
 10058b8:	003ffc06 	br	10058ac <_ZNSsC1ERKSs+0xe0>
 10058bc:	00bfffc4 	movi	r2,-1
 10058c0:	d8800215 	stw	r2,8(sp)
 10058c4:	10081380 	call	1008138 <__cxa_call_unexpected>

010058c8 <_ZNSsC2ERKSs>:
 10058c8:	deffec04 	addi	sp,sp,-80
 10058cc:	00804074 	movhi	r2,257
 10058d0:	10a0ae04 	addi	r2,r2,-32072
 10058d4:	d8800715 	stw	r2,28(sp)
 10058d8:	00c040b4 	movhi	r3,258
 10058dc:	18fb3504 	addi	r3,r3,-4908
 10058e0:	00804034 	movhi	r2,256
 10058e4:	10966304 	addi	r2,r2,22924
 10058e8:	d9000e15 	stw	r4,56(sp)
 10058ec:	d9000104 	addi	r4,sp,4
 10058f0:	d8800a15 	stw	r2,40(sp)
 10058f4:	dfc01315 	stw	ra,76(sp)
 10058f8:	df001215 	stw	fp,72(sp)
 10058fc:	ddc01115 	stw	r23,68(sp)
 1005900:	d8c00815 	stw	r3,32(sp)
 1005904:	d9400f15 	stw	r5,60(sp)
 1005908:	dec00915 	stw	sp,36(sp)
 100590c:	dec00b15 	stw	sp,44(sp)
 1005910:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1005914:	d8800f17 	ldw	r2,60(sp)
 1005918:	10800017 	ldw	r2,0(r2)
 100591c:	113ffd04 	addi	r4,r2,-12
 1005920:	d8801015 	stw	r2,64(sp)
 1005924:	20800217 	ldw	r2,8(r4)
 1005928:	10000d16 	blt	r2,zero,1005960 <_ZNSsC2ERKSs+0x98>
 100592c:	008040b4 	movhi	r2,258
 1005930:	109bcf04 	addi	r2,r2,28476
 1005934:	2080101e 	bne	r4,r2,1005978 <_ZNSsC2ERKSs+0xb0>
 1005938:	d8801017 	ldw	r2,64(sp)
 100593c:	d8c00e17 	ldw	r3,56(sp)
 1005940:	d9000104 	addi	r4,sp,4
 1005944:	18800015 	stw	r2,0(r3)
 1005948:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 100594c:	dfc01317 	ldw	ra,76(sp)
 1005950:	df001217 	ldw	fp,72(sp)
 1005954:	ddc01117 	ldw	r23,68(sp)
 1005958:	dec01404 	addi	sp,sp,80
 100595c:	f800283a 	ret
 1005960:	00800084 	movi	r2,2
 1005964:	d8800215 	stw	r2,8(sp)
 1005968:	d80b883a 	mov	r5,sp
 100596c:	000d883a 	mov	r6,zero
 1005970:	1004db00 	call	1004db0 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1005974:	003ff106 	br	100593c <_ZNSsC2ERKSs+0x74>
 1005978:	01400044 	movi	r5,1
 100597c:	d9400215 	stw	r5,8(sp)
 1005980:	21000204 	addi	r4,r4,8
 1005984:	10078f80 	call	10078f8 <_ZN9__gnu_cxx12__atomic_addEPVii>
 1005988:	003feb06 	br	1005938 <_ZNSsC2ERKSs+0x70>
 100598c:	d8c00217 	ldw	r3,8(sp)
 1005990:	00800044 	movi	r2,1
 1005994:	d9000317 	ldw	r4,12(sp)
 1005998:	d9400417 	ldw	r5,16(sp)
 100599c:	18800426 	beq	r3,r2,10059b0 <_ZNSsC2ERKSs+0xe8>
 10059a0:	00bfffc4 	movi	r2,-1
 10059a4:	28800426 	beq	r5,r2,10059b8 <_ZNSsC2ERKSs+0xf0>
 10059a8:	d8800215 	stw	r2,8(sp)
 10059ac:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 10059b0:	00bfffc4 	movi	r2,-1
 10059b4:	003ffc06 	br	10059a8 <_ZNSsC2ERKSs+0xe0>
 10059b8:	00bfffc4 	movi	r2,-1
 10059bc:	d8800215 	stw	r2,8(sp)
 10059c0:	10081380 	call	1008138 <__cxa_call_unexpected>

010059c4 <_ZNSs6assignERKSs>:
 10059c4:	deffea04 	addi	sp,sp,-88
 10059c8:	00804074 	movhi	r2,257
 10059cc:	10a0ae04 	addi	r2,r2,-32072
 10059d0:	00c040b4 	movhi	r3,258
 10059d4:	18fb3904 	addi	r3,r3,-4892
 10059d8:	d8800715 	stw	r2,28(sp)
 10059dc:	d9001015 	stw	r4,64(sp)
 10059e0:	00804034 	movhi	r2,256
 10059e4:	1096be04 	addi	r2,r2,23288
 10059e8:	d9000104 	addi	r4,sp,4
 10059ec:	d8c00815 	stw	r3,32(sp)
 10059f0:	d8800a15 	stw	r2,40(sp)
 10059f4:	d9401115 	stw	r5,68(sp)
 10059f8:	dfc01515 	stw	ra,84(sp)
 10059fc:	df001415 	stw	fp,80(sp)
 1005a00:	ddc01315 	stw	r23,76(sp)
 1005a04:	dec00915 	stw	sp,36(sp)
 1005a08:	dec00b15 	stw	sp,44(sp)
 1005a0c:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1005a10:	d8801117 	ldw	r2,68(sp)
 1005a14:	d8c01017 	ldw	r3,64(sp)
 1005a18:	10800017 	ldw	r2,0(r2)
 1005a1c:	d8801215 	stw	r2,72(sp)
 1005a20:	d9401217 	ldw	r5,72(sp)
 1005a24:	18800017 	ldw	r2,0(r3)
 1005a28:	00fffd04 	movi	r3,-12
 1005a2c:	28c9883a 	add	r4,r5,r3
 1005a30:	10c5883a 	add	r2,r2,r3
 1005a34:	11001126 	beq	r2,r4,1005a7c <_ZNSs6assignERKSs+0xb8>
 1005a38:	20800217 	ldw	r2,8(r4)
 1005a3c:	10001716 	blt	r2,zero,1005a9c <_ZNSs6assignERKSs+0xd8>
 1005a40:	008040b4 	movhi	r2,258
 1005a44:	109bcf04 	addi	r2,r2,28476
 1005a48:	2080261e 	bne	r4,r2,1005ae4 <_ZNSs6assignERKSs+0x120>
 1005a4c:	d8c01217 	ldw	r3,72(sp)
 1005a50:	d8c00f15 	stw	r3,60(sp)
 1005a54:	d9401017 	ldw	r5,64(sp)
 1005a58:	00c040b4 	movhi	r3,258
 1005a5c:	18dbcf04 	addi	r3,r3,28476
 1005a60:	28800017 	ldw	r2,0(r5)
 1005a64:	10bffd04 	addi	r2,r2,-12
 1005a68:	d8800e15 	stw	r2,56(sp)
 1005a6c:	10c0121e 	bne	r2,r3,1005ab8 <_ZNSs6assignERKSs+0xf4>
 1005a70:	d8c00f17 	ldw	r3,60(sp)
 1005a74:	d8801017 	ldw	r2,64(sp)
 1005a78:	10c00015 	stw	r3,0(r2)
 1005a7c:	d9000104 	addi	r4,sp,4
 1005a80:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1005a84:	d8801017 	ldw	r2,64(sp)
 1005a88:	dfc01517 	ldw	ra,84(sp)
 1005a8c:	df001417 	ldw	fp,80(sp)
 1005a90:	ddc01317 	ldw	r23,76(sp)
 1005a94:	dec01604 	addi	sp,sp,88
 1005a98:	f800283a 	ret
 1005a9c:	00800084 	movi	r2,2
 1005aa0:	d8800215 	stw	r2,8(sp)
 1005aa4:	d80b883a 	mov	r5,sp
 1005aa8:	000d883a 	mov	r6,zero
 1005aac:	1004db00 	call	1004db0 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1005ab0:	d8800f15 	stw	r2,60(sp)
 1005ab4:	003fe706 	br	1005a54 <_ZNSs6assignERKSs+0x90>
 1005ab8:	d9400e17 	ldw	r5,56(sp)
 1005abc:	008000c4 	movi	r2,3
 1005ac0:	d8800215 	stw	r2,8(sp)
 1005ac4:	29000204 	addi	r4,r5,8
 1005ac8:	017fffc4 	movi	r5,-1
 1005acc:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005ad0:	00bfe716 	blt	zero,r2,1005a70 <_ZNSs6assignERKSs+0xac>
 1005ad4:	d9000e17 	ldw	r4,56(sp)
 1005ad8:	d80b883a 	mov	r5,sp
 1005adc:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005ae0:	003fe306 	br	1005a70 <_ZNSs6assignERKSs+0xac>
 1005ae4:	01400044 	movi	r5,1
 1005ae8:	d9400215 	stw	r5,8(sp)
 1005aec:	21000204 	addi	r4,r4,8
 1005af0:	10078f80 	call	10078f8 <_ZN9__gnu_cxx12__atomic_addEPVii>
 1005af4:	003fd506 	br	1005a4c <_ZNSs6assignERKSs+0x88>
 1005af8:	d8c00217 	ldw	r3,8(sp)
 1005afc:	00800044 	movi	r2,1
 1005b00:	d9000317 	ldw	r4,12(sp)
 1005b04:	d9400417 	ldw	r5,16(sp)
 1005b08:	18800626 	beq	r3,r2,1005b24 <_ZNSs6assignERKSs+0x160>
 1005b0c:	00800084 	movi	r2,2
 1005b10:	18800426 	beq	r3,r2,1005b24 <_ZNSs6assignERKSs+0x160>
 1005b14:	00bfffc4 	movi	r2,-1
 1005b18:	28800426 	beq	r5,r2,1005b2c <_ZNSs6assignERKSs+0x168>
 1005b1c:	d8800215 	stw	r2,8(sp)
 1005b20:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1005b24:	00bfffc4 	movi	r2,-1
 1005b28:	003ffc06 	br	1005b1c <_ZNSs6assignERKSs+0x158>
 1005b2c:	00bfffc4 	movi	r2,-1
 1005b30:	d8800215 	stw	r2,8(sp)
 1005b34:	10081380 	call	1008138 <__cxa_call_unexpected>

01005b38 <_ZNSsaSERKSs>:
 1005b38:	10059c41 	jmpi	10059c4 <_ZNSs6assignERKSs>

01005b3c <_ZNSs7reserveEm>:
 1005b3c:	deffeb04 	addi	sp,sp,-84
 1005b40:	00804074 	movhi	r2,257
 1005b44:	10a0ae04 	addi	r2,r2,-32072
 1005b48:	00c040b4 	movhi	r3,258
 1005b4c:	18fb3d44 	addi	r3,r3,-4875
 1005b50:	d8800715 	stw	r2,28(sp)
 1005b54:	d9001015 	stw	r4,64(sp)
 1005b58:	00804034 	movhi	r2,256
 1005b5c:	10971504 	addi	r2,r2,23636
 1005b60:	d9000104 	addi	r4,sp,4
 1005b64:	d8c00815 	stw	r3,32(sp)
 1005b68:	d8800a15 	stw	r2,40(sp)
 1005b6c:	dfc01415 	stw	ra,80(sp)
 1005b70:	df001315 	stw	fp,76(sp)
 1005b74:	ddc01215 	stw	r23,72(sp)
 1005b78:	dec00915 	stw	sp,36(sp)
 1005b7c:	dec00b15 	stw	sp,44(sp)
 1005b80:	d9401115 	stw	r5,68(sp)
 1005b84:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1005b88:	d8801017 	ldw	r2,64(sp)
 1005b8c:	10c00017 	ldw	r3,0(r2)
 1005b90:	193ffd04 	addi	r4,r3,-12
 1005b94:	20800117 	ldw	r2,4(r4)
 1005b98:	d8c01117 	ldw	r3,68(sp)
 1005b9c:	10c01c26 	beq	r2,r3,1005c10 <_ZNSs7reserveEm+0xd4>
 1005ba0:	20c00017 	ldw	r3,0(r4)
 1005ba4:	d9401117 	ldw	r5,68(sp)
 1005ba8:	28c01736 	bltu	r5,r3,1005c08 <_ZNSs7reserveEm+0xcc>
 1005bac:	00800044 	movi	r2,1
 1005bb0:	28cdc83a 	sub	r6,r5,r3
 1005bb4:	d8800215 	stw	r2,8(sp)
 1005bb8:	d80b883a 	mov	r5,sp
 1005bbc:	1004db00 	call	1004db0 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1005bc0:	d8c01017 	ldw	r3,64(sp)
 1005bc4:	d8800f15 	stw	r2,60(sp)
 1005bc8:	18800017 	ldw	r2,0(r3)
 1005bcc:	00c040b4 	movhi	r3,258
 1005bd0:	18dbcf04 	addi	r3,r3,28476
 1005bd4:	10bffd04 	addi	r2,r2,-12
 1005bd8:	d8800e15 	stw	r2,56(sp)
 1005bdc:	10c0151e 	bne	r2,r3,1005c34 <_ZNSs7reserveEm+0xf8>
 1005be0:	d8c00f17 	ldw	r3,60(sp)
 1005be4:	d8801017 	ldw	r2,64(sp)
 1005be8:	d9000104 	addi	r4,sp,4
 1005bec:	10c00015 	stw	r3,0(r2)
 1005bf0:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1005bf4:	dfc01417 	ldw	ra,80(sp)
 1005bf8:	df001317 	ldw	fp,76(sp)
 1005bfc:	ddc01217 	ldw	r23,72(sp)
 1005c00:	dec01504 	addi	sp,sp,84
 1005c04:	f800283a 	ret
 1005c08:	180b883a 	mov	r5,r3
 1005c0c:	003fe706 	br	1005bac <_ZNSs7reserveEm+0x70>
 1005c10:	20800217 	ldw	r2,8(r4)
 1005c14:	00bfe216 	blt	zero,r2,1005ba0 <_ZNSs7reserveEm+0x64>
 1005c18:	d9000104 	addi	r4,sp,4
 1005c1c:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1005c20:	dfc01417 	ldw	ra,80(sp)
 1005c24:	df001317 	ldw	fp,76(sp)
 1005c28:	ddc01217 	ldw	r23,72(sp)
 1005c2c:	dec01504 	addi	sp,sp,84
 1005c30:	f800283a 	ret
 1005c34:	11000204 	addi	r4,r2,8
 1005c38:	017fffc4 	movi	r5,-1
 1005c3c:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005c40:	00bfe716 	blt	zero,r2,1005be0 <_ZNSs7reserveEm+0xa4>
 1005c44:	d9000e17 	ldw	r4,56(sp)
 1005c48:	d80b883a 	mov	r5,sp
 1005c4c:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005c50:	003fe306 	br	1005be0 <_ZNSs7reserveEm+0xa4>
 1005c54:	d9000317 	ldw	r4,12(sp)
 1005c58:	00bfffc4 	movi	r2,-1
 1005c5c:	d8800215 	stw	r2,8(sp)
 1005c60:	10094380 	call	1009438 <_Unwind_SjLj_Resume>

01005c64 <_ZNSs9push_backEc>:
 1005c64:	21800017 	ldw	r6,0(r4)
 1005c68:	defffc04 	addi	sp,sp,-16
 1005c6c:	dc000015 	stw	r16,0(sp)
 1005c70:	30bffd17 	ldw	r2,-12(r6)
 1005c74:	31fffd04 	addi	r7,r6,-12
 1005c78:	38c00117 	ldw	r3,4(r7)
 1005c7c:	14000044 	addi	r16,r2,1
 1005c80:	dc800215 	stw	r18,8(sp)
 1005c84:	dc400115 	stw	r17,4(sp)
 1005c88:	2825883a 	mov	r18,r5
 1005c8c:	dfc00315 	stw	ra,12(sp)
 1005c90:	2023883a 	mov	r17,r4
 1005c94:	800b883a 	mov	r5,r16
 1005c98:	1c001136 	bltu	r3,r16,1005ce0 <_ZNSs9push_backEc+0x7c>
 1005c9c:	38800217 	ldw	r2,8(r7)
 1005ca0:	00800f16 	blt	zero,r2,1005ce0 <_ZNSs9push_backEc+0x7c>
 1005ca4:	30bffd17 	ldw	r2,-12(r6)
 1005ca8:	3085883a 	add	r2,r6,r2
 1005cac:	14800005 	stb	r18,0(r2)
 1005cb0:	88c00017 	ldw	r3,0(r17)
 1005cb4:	18bffd04 	addi	r2,r3,-12
 1005cb8:	1c3ffd15 	stw	r16,-12(r3)
 1005cbc:	1409883a 	add	r4,r2,r16
 1005cc0:	10000215 	stw	zero,8(r2)
 1005cc4:	20000305 	stb	zero,12(r4)
 1005cc8:	dfc00317 	ldw	ra,12(sp)
 1005ccc:	dc800217 	ldw	r18,8(sp)
 1005cd0:	dc400117 	ldw	r17,4(sp)
 1005cd4:	dc000017 	ldw	r16,0(sp)
 1005cd8:	dec00404 	addi	sp,sp,16
 1005cdc:	f800283a 	ret
 1005ce0:	1005b3c0 	call	1005b3c <_ZNSs7reserveEm>
 1005ce4:	89800017 	ldw	r6,0(r17)
 1005ce8:	003fee06 	br	1005ca4 <_ZNSs9push_backEc+0x40>

01005cec <_ZNSs6appendEmc>:
 1005cec:	defffb04 	addi	sp,sp,-20
 1005cf0:	dcc00315 	stw	r19,12(sp)
 1005cf4:	dc800215 	stw	r18,8(sp)
 1005cf8:	dc000015 	stw	r16,0(sp)
 1005cfc:	dfc00415 	stw	ra,16(sp)
 1005d00:	dc400115 	stw	r17,4(sp)
 1005d04:	2821883a 	mov	r16,r5
 1005d08:	3027883a 	mov	r19,r6
 1005d0c:	2025883a 	mov	r18,r4
 1005d10:	28001d26 	beq	r5,zero,1005d88 <_ZNSs6appendEmc+0x9c>
 1005d14:	20c00017 	ldw	r3,0(r4)
 1005d18:	00900034 	movhi	r2,16384
 1005d1c:	10bfff04 	addi	r2,r2,-4
 1005d20:	197ffd17 	ldw	r5,-12(r3)
 1005d24:	19bffd04 	addi	r6,r3,-12
 1005d28:	1145c83a 	sub	r2,r2,r5
 1005d2c:	14002436 	bltu	r2,r16,1005dc0 <_ZNSs6appendEmc+0xd4>
 1005d30:	30800117 	ldw	r2,4(r6)
 1005d34:	8163883a 	add	r17,r16,r5
 1005d38:	14400236 	bltu	r2,r17,1005d44 <_ZNSs6appendEmc+0x58>
 1005d3c:	30800217 	ldw	r2,8(r6)
 1005d40:	0080030e 	bge	zero,r2,1005d50 <_ZNSs6appendEmc+0x64>
 1005d44:	880b883a 	mov	r5,r17
 1005d48:	1005b3c0 	call	1005b3c <_ZNSs7reserveEm>
 1005d4c:	90c00017 	ldw	r3,0(r18)
 1005d50:	18bffd17 	ldw	r2,-12(r3)
 1005d54:	99803fcc 	andi	r6,r19,255
 1005d58:	3180201c 	xori	r6,r6,128
 1005d5c:	1889883a 	add	r4,r3,r2
 1005d60:	00800044 	movi	r2,1
 1005d64:	31bfe004 	addi	r6,r6,-128
 1005d68:	80800f1e 	bne	r16,r2,1005da8 <_ZNSs6appendEmc+0xbc>
 1005d6c:	21800005 	stb	r6,0(r4)
 1005d70:	90800017 	ldw	r2,0(r18)
 1005d74:	10fffd04 	addi	r3,r2,-12
 1005d78:	147ffd15 	stw	r17,-12(r2)
 1005d7c:	1c49883a 	add	r4,r3,r17
 1005d80:	18000215 	stw	zero,8(r3)
 1005d84:	20000305 	stb	zero,12(r4)
 1005d88:	9005883a 	mov	r2,r18
 1005d8c:	dfc00417 	ldw	ra,16(sp)
 1005d90:	dcc00317 	ldw	r19,12(sp)
 1005d94:	dc800217 	ldw	r18,8(sp)
 1005d98:	dc400117 	ldw	r17,4(sp)
 1005d9c:	dc000017 	ldw	r16,0(sp)
 1005da0:	dec00504 	addi	sp,sp,20
 1005da4:	f800283a 	ret
 1005da8:	31403fcc 	andi	r5,r6,255
 1005dac:	2940201c 	xori	r5,r5,128
 1005db0:	297fe004 	addi	r5,r5,-128
 1005db4:	800d883a 	mov	r6,r16
 1005db8:	100a10c0 	call	100a10c <memset>
 1005dbc:	003fec06 	br	1005d70 <_ZNSs6appendEmc+0x84>
 1005dc0:	010040b4 	movhi	r4,258
 1005dc4:	213c4204 	addi	r4,r4,-3832
 1005dc8:	10025440 	call	1002544 <_ZSt20__throw_length_errorPKc>

01005dcc <_ZNSs6appendEPKcm>:
 1005dcc:	defffa04 	addi	sp,sp,-24
 1005dd0:	dd000415 	stw	r20,16(sp)
 1005dd4:	dcc00315 	stw	r19,12(sp)
 1005dd8:	dc400115 	stw	r17,4(sp)
 1005ddc:	dfc00515 	stw	ra,20(sp)
 1005de0:	dc800215 	stw	r18,8(sp)
 1005de4:	dc000015 	stw	r16,0(sp)
 1005de8:	3023883a 	mov	r17,r6
 1005dec:	2829883a 	mov	r20,r5
 1005df0:	2027883a 	mov	r19,r4
 1005df4:	30001c26 	beq	r6,zero,1005e68 <_ZNSs6appendEPKcm+0x9c>
 1005df8:	24000017 	ldw	r16,0(r4)
 1005dfc:	00900034 	movhi	r2,16384
 1005e00:	10bfff04 	addi	r2,r2,-4
 1005e04:	80fffd17 	ldw	r3,-12(r16)
 1005e08:	817ffd04 	addi	r5,r16,-12
 1005e0c:	10c5c83a 	sub	r2,r2,r3
 1005e10:	11802e36 	bltu	r2,r6,1005ecc <_ZNSs6appendEPKcm+0x100>
 1005e14:	28800117 	ldw	r2,4(r5)
 1005e18:	30e5883a 	add	r18,r6,r3
 1005e1c:	14801b2e 	bgeu	r2,r18,1005e8c <_ZNSs6appendEPKcm+0xc0>
 1005e20:	a4000236 	bltu	r20,r16,1005e2c <_ZNSs6appendEPKcm+0x60>
 1005e24:	80c5883a 	add	r2,r16,r3
 1005e28:	1500222e 	bgeu	r2,r20,1005eb4 <_ZNSs6appendEPKcm+0xe8>
 1005e2c:	900b883a 	mov	r5,r18
 1005e30:	1005b3c0 	call	1005b3c <_ZNSs7reserveEm>
 1005e34:	9c000017 	ldw	r16,0(r19)
 1005e38:	80bffd17 	ldw	r2,-12(r16)
 1005e3c:	00c00044 	movi	r3,1
 1005e40:	8089883a 	add	r4,r16,r2
 1005e44:	88c0171e 	bne	r17,r3,1005ea4 <_ZNSs6appendEPKcm+0xd8>
 1005e48:	a0800003 	ldbu	r2,0(r20)
 1005e4c:	20800005 	stb	r2,0(r4)
 1005e50:	98800017 	ldw	r2,0(r19)
 1005e54:	10fffd04 	addi	r3,r2,-12
 1005e58:	14bffd15 	stw	r18,-12(r2)
 1005e5c:	1c89883a 	add	r4,r3,r18
 1005e60:	18000215 	stw	zero,8(r3)
 1005e64:	20000305 	stb	zero,12(r4)
 1005e68:	9805883a 	mov	r2,r19
 1005e6c:	dfc00517 	ldw	ra,20(sp)
 1005e70:	dd000417 	ldw	r20,16(sp)
 1005e74:	dcc00317 	ldw	r19,12(sp)
 1005e78:	dc800217 	ldw	r18,8(sp)
 1005e7c:	dc400117 	ldw	r17,4(sp)
 1005e80:	dc000017 	ldw	r16,0(sp)
 1005e84:	dec00604 	addi	sp,sp,24
 1005e88:	f800283a 	ret
 1005e8c:	28800217 	ldw	r2,8(r5)
 1005e90:	00bfe316 	blt	zero,r2,1005e20 <_ZNSs6appendEPKcm+0x54>
 1005e94:	80bffd17 	ldw	r2,-12(r16)
 1005e98:	00c00044 	movi	r3,1
 1005e9c:	8089883a 	add	r4,r16,r2
 1005ea0:	88ffe926 	beq	r17,r3,1005e48 <_ZNSs6appendEPKcm+0x7c>
 1005ea4:	a00b883a 	mov	r5,r20
 1005ea8:	880d883a 	mov	r6,r17
 1005eac:	1009f8c0 	call	1009f8c <memcpy>
 1005eb0:	003fe706 	br	1005e50 <_ZNSs6appendEPKcm+0x84>
 1005eb4:	900b883a 	mov	r5,r18
 1005eb8:	1005b3c0 	call	1005b3c <_ZNSs7reserveEm>
 1005ebc:	a405c83a 	sub	r2,r20,r16
 1005ec0:	9c000017 	ldw	r16,0(r19)
 1005ec4:	1429883a 	add	r20,r2,r16
 1005ec8:	003fdb06 	br	1005e38 <_ZNSs6appendEPKcm+0x6c>
 1005ecc:	010040b4 	movhi	r4,258
 1005ed0:	213c4204 	addi	r4,r4,-3832
 1005ed4:	10025440 	call	1002544 <_ZSt20__throw_length_errorPKc>

01005ed8 <_ZNSs6appendEPKc>:
 1005ed8:	defffd04 	addi	sp,sp,-12
 1005edc:	dcc00115 	stw	r19,4(sp)
 1005ee0:	dc400015 	stw	r17,0(sp)
 1005ee4:	dfc00215 	stw	ra,8(sp)
 1005ee8:	2023883a 	mov	r17,r4
 1005eec:	2809883a 	mov	r4,r5
 1005ef0:	2827883a 	mov	r19,r5
 1005ef4:	100a5dc0 	call	100a5dc <strlen>
 1005ef8:	980b883a 	mov	r5,r19
 1005efc:	8809883a 	mov	r4,r17
 1005f00:	100d883a 	mov	r6,r2
 1005f04:	dfc00217 	ldw	ra,8(sp)
 1005f08:	dcc00117 	ldw	r19,4(sp)
 1005f0c:	dc400017 	ldw	r17,0(sp)
 1005f10:	dec00304 	addi	sp,sp,12
 1005f14:	1005dcc1 	jmpi	1005dcc <_ZNSs6appendEPKcm>

01005f18 <_ZNSspLEPKc>:
 1005f18:	defffd04 	addi	sp,sp,-12
 1005f1c:	dcc00115 	stw	r19,4(sp)
 1005f20:	dc400015 	stw	r17,0(sp)
 1005f24:	dfc00215 	stw	ra,8(sp)
 1005f28:	2023883a 	mov	r17,r4
 1005f2c:	2809883a 	mov	r4,r5
 1005f30:	2827883a 	mov	r19,r5
 1005f34:	100a5dc0 	call	100a5dc <strlen>
 1005f38:	980b883a 	mov	r5,r19
 1005f3c:	8809883a 	mov	r4,r17
 1005f40:	100d883a 	mov	r6,r2
 1005f44:	dfc00217 	ldw	ra,8(sp)
 1005f48:	dcc00117 	ldw	r19,4(sp)
 1005f4c:	dc400017 	ldw	r17,0(sp)
 1005f50:	dec00304 	addi	sp,sp,12
 1005f54:	1005dcc1 	jmpi	1005dcc <_ZNSs6appendEPKcm>

01005f58 <_ZNSs6appendERKSsmm>:
 1005f58:	defffa04 	addi	sp,sp,-24
 1005f5c:	dcc00415 	stw	r19,16(sp)
 1005f60:	2827883a 	mov	r19,r5
 1005f64:	29400017 	ldw	r5,0(r5)
 1005f68:	dc800315 	stw	r18,12(sp)
 1005f6c:	dc000115 	stw	r16,4(sp)
 1005f70:	28bffd17 	ldw	r2,-12(r5)
 1005f74:	dfc00515 	stw	ra,20(sp)
 1005f78:	dc400215 	stw	r17,8(sp)
 1005f7c:	3021883a 	mov	r16,r6
 1005f80:	2025883a 	mov	r18,r4
 1005f84:	11802b36 	bltu	r2,r6,1006034 <_ZNSs6appendERKSsmm+0xdc>
 1005f88:	118dc83a 	sub	r6,r2,r6
 1005f8c:	31c02436 	bltu	r6,r7,1006020 <_ZNSs6appendERKSsmm+0xc8>
 1005f90:	38001b26 	beq	r7,zero,1006000 <_ZNSs6appendERKSsmm+0xa8>
 1005f94:	91800017 	ldw	r6,0(r18)
 1005f98:	323ffd04 	addi	r8,r6,-12
 1005f9c:	30bffd17 	ldw	r2,-12(r6)
 1005fa0:	40c00117 	ldw	r3,4(r8)
 1005fa4:	38a3883a 	add	r17,r7,r2
 1005fa8:	1c400236 	bltu	r3,r17,1005fb4 <_ZNSs6appendERKSsmm+0x5c>
 1005fac:	40800217 	ldw	r2,8(r8)
 1005fb0:	0080060e 	bge	zero,r2,1005fcc <_ZNSs6appendERKSsmm+0x74>
 1005fb4:	880b883a 	mov	r5,r17
 1005fb8:	d9c00015 	stw	r7,0(sp)
 1005fbc:	1005b3c0 	call	1005b3c <_ZNSs7reserveEm>
 1005fc0:	99400017 	ldw	r5,0(r19)
 1005fc4:	91800017 	ldw	r6,0(r18)
 1005fc8:	d9c00017 	ldw	r7,0(sp)
 1005fcc:	30fffd17 	ldw	r3,-12(r6)
 1005fd0:	00800044 	movi	r2,1
 1005fd4:	814b883a 	add	r5,r16,r5
 1005fd8:	30c9883a 	add	r4,r6,r3
 1005fdc:	3880121e 	bne	r7,r2,1006028 <_ZNSs6appendERKSsmm+0xd0>
 1005fe0:	28800003 	ldbu	r2,0(r5)
 1005fe4:	20800005 	stb	r2,0(r4)
 1005fe8:	90800017 	ldw	r2,0(r18)
 1005fec:	10fffd04 	addi	r3,r2,-12
 1005ff0:	147ffd15 	stw	r17,-12(r2)
 1005ff4:	1c49883a 	add	r4,r3,r17
 1005ff8:	18000215 	stw	zero,8(r3)
 1005ffc:	20000305 	stb	zero,12(r4)
 1006000:	9005883a 	mov	r2,r18
 1006004:	dfc00517 	ldw	ra,20(sp)
 1006008:	dcc00417 	ldw	r19,16(sp)
 100600c:	dc800317 	ldw	r18,12(sp)
 1006010:	dc400217 	ldw	r17,8(sp)
 1006014:	dc000117 	ldw	r16,4(sp)
 1006018:	dec00604 	addi	sp,sp,24
 100601c:	f800283a 	ret
 1006020:	300f883a 	mov	r7,r6
 1006024:	003fda06 	br	1005f90 <_ZNSs6appendERKSsmm+0x38>
 1006028:	380d883a 	mov	r6,r7
 100602c:	1009f8c0 	call	1009f8c <memcpy>
 1006030:	003fed06 	br	1005fe8 <_ZNSs6appendERKSsmm+0x90>
 1006034:	010040b4 	movhi	r4,258
 1006038:	213c4204 	addi	r4,r4,-3832
 100603c:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01006040 <_ZNSs6appendERKSs>:
 1006040:	2a000017 	ldw	r8,0(r5)
 1006044:	defffb04 	addi	sp,sp,-20
 1006048:	dc000015 	stw	r16,0(sp)
 100604c:	443ffd17 	ldw	r16,-12(r8)
 1006050:	dcc00315 	stw	r19,12(sp)
 1006054:	dc800215 	stw	r18,8(sp)
 1006058:	dfc00415 	stw	ra,16(sp)
 100605c:	dc400115 	stw	r17,4(sp)
 1006060:	2827883a 	mov	r19,r5
 1006064:	2025883a 	mov	r18,r4
 1006068:	80001a26 	beq	r16,zero,10060d4 <_ZNSs6appendERKSs+0x94>
 100606c:	21c00017 	ldw	r7,0(r4)
 1006070:	39bffd04 	addi	r6,r7,-12
 1006074:	38bffd17 	ldw	r2,-12(r7)
 1006078:	30c00117 	ldw	r3,4(r6)
 100607c:	80a3883a 	add	r17,r16,r2
 1006080:	880b883a 	mov	r5,r17
 1006084:	1c400236 	bltu	r3,r17,1006090 <_ZNSs6appendERKSs+0x50>
 1006088:	30800217 	ldw	r2,8(r6)
 100608c:	0080030e 	bge	zero,r2,100609c <_ZNSs6appendERKSs+0x5c>
 1006090:	1005b3c0 	call	1005b3c <_ZNSs7reserveEm>
 1006094:	9a000017 	ldw	r8,0(r19)
 1006098:	91c00017 	ldw	r7,0(r18)
 100609c:	38fffd17 	ldw	r3,-12(r7)
 10060a0:	00800044 	movi	r2,1
 10060a4:	400b883a 	mov	r5,r8
 10060a8:	800d883a 	mov	r6,r16
 10060ac:	38c9883a 	add	r4,r7,r3
 10060b0:	8080101e 	bne	r16,r2,10060f4 <_ZNSs6appendERKSs+0xb4>
 10060b4:	40800003 	ldbu	r2,0(r8)
 10060b8:	20800005 	stb	r2,0(r4)
 10060bc:	90800017 	ldw	r2,0(r18)
 10060c0:	10fffd04 	addi	r3,r2,-12
 10060c4:	147ffd15 	stw	r17,-12(r2)
 10060c8:	1c49883a 	add	r4,r3,r17
 10060cc:	18000215 	stw	zero,8(r3)
 10060d0:	20000305 	stb	zero,12(r4)
 10060d4:	9005883a 	mov	r2,r18
 10060d8:	dfc00417 	ldw	ra,16(sp)
 10060dc:	dcc00317 	ldw	r19,12(sp)
 10060e0:	dc800217 	ldw	r18,8(sp)
 10060e4:	dc400117 	ldw	r17,4(sp)
 10060e8:	dc000017 	ldw	r16,0(sp)
 10060ec:	dec00504 	addi	sp,sp,20
 10060f0:	f800283a 	ret
 10060f4:	1009f8c0 	call	1009f8c <memcpy>
 10060f8:	003ff006 	br	10060bc <_ZNSs6appendERKSs+0x7c>

010060fc <_ZNSspLERKSs>:
 10060fc:	10060401 	jmpi	1006040 <_ZNSs6appendERKSs>

01006100 <_ZNSspLEc>:
 1006100:	21800017 	ldw	r6,0(r4)
 1006104:	defffc04 	addi	sp,sp,-16
 1006108:	dc000015 	stw	r16,0(sp)
 100610c:	30bffd17 	ldw	r2,-12(r6)
 1006110:	31fffd04 	addi	r7,r6,-12
 1006114:	38c00117 	ldw	r3,4(r7)
 1006118:	14000044 	addi	r16,r2,1
 100611c:	dc800215 	stw	r18,8(sp)
 1006120:	dc400115 	stw	r17,4(sp)
 1006124:	2825883a 	mov	r18,r5
 1006128:	dfc00315 	stw	ra,12(sp)
 100612c:	2023883a 	mov	r17,r4
 1006130:	800b883a 	mov	r5,r16
 1006134:	1c001236 	bltu	r3,r16,1006180 <_ZNSspLEc+0x80>
 1006138:	38800217 	ldw	r2,8(r7)
 100613c:	00801016 	blt	zero,r2,1006180 <_ZNSspLEc+0x80>
 1006140:	30fffd17 	ldw	r3,-12(r6)
 1006144:	8805883a 	mov	r2,r17
 1006148:	30c7883a 	add	r3,r6,r3
 100614c:	1c800005 	stb	r18,0(r3)
 1006150:	89000017 	ldw	r4,0(r17)
 1006154:	20fffd04 	addi	r3,r4,-12
 1006158:	243ffd15 	stw	r16,-12(r4)
 100615c:	1c0b883a 	add	r5,r3,r16
 1006160:	18000215 	stw	zero,8(r3)
 1006164:	28000305 	stb	zero,12(r5)
 1006168:	dfc00317 	ldw	ra,12(sp)
 100616c:	dc800217 	ldw	r18,8(sp)
 1006170:	dc400117 	ldw	r17,4(sp)
 1006174:	dc000017 	ldw	r16,0(sp)
 1006178:	dec00404 	addi	sp,sp,16
 100617c:	f800283a 	ret
 1006180:	1005b3c0 	call	1005b3c <_ZNSs7reserveEm>
 1006184:	89800017 	ldw	r6,0(r17)
 1006188:	003fed06 	br	1006140 <_ZNSspLEc+0x40>

0100618c <_ZNSsD1Ev>:
 100618c:	deffed04 	addi	sp,sp,-76
 1006190:	00804074 	movhi	r2,257
 1006194:	10a0ae04 	addi	r2,r2,-32072
 1006198:	00c040b4 	movhi	r3,258
 100619c:	18fb3ec4 	addi	r3,r3,-4869
 10061a0:	d8800715 	stw	r2,28(sp)
 10061a4:	d9000f15 	stw	r4,60(sp)
 10061a8:	00804034 	movhi	r2,256
 10061ac:	10988e04 	addi	r2,r2,25144
 10061b0:	d9000104 	addi	r4,sp,4
 10061b4:	d8c00815 	stw	r3,32(sp)
 10061b8:	d8800a15 	stw	r2,40(sp)
 10061bc:	dfc01215 	stw	ra,72(sp)
 10061c0:	df001115 	stw	fp,68(sp)
 10061c4:	ddc01015 	stw	r23,64(sp)
 10061c8:	dec00915 	stw	sp,36(sp)
 10061cc:	dec00b15 	stw	sp,44(sp)
 10061d0:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 10061d4:	d8c00f17 	ldw	r3,60(sp)
 10061d8:	18800017 	ldw	r2,0(r3)
 10061dc:	00c040b4 	movhi	r3,258
 10061e0:	18dbcf04 	addi	r3,r3,28476
 10061e4:	10bffd04 	addi	r2,r2,-12
 10061e8:	d8800e15 	stw	r2,56(sp)
 10061ec:	10c0071e 	bne	r2,r3,100620c <_ZNSsD1Ev+0x80>
 10061f0:	d9000104 	addi	r4,sp,4
 10061f4:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 10061f8:	dfc01217 	ldw	ra,72(sp)
 10061fc:	df001117 	ldw	fp,68(sp)
 1006200:	ddc01017 	ldw	r23,64(sp)
 1006204:	dec01304 	addi	sp,sp,76
 1006208:	f800283a 	ret
 100620c:	00800044 	movi	r2,1
 1006210:	d8800215 	stw	r2,8(sp)
 1006214:	d8800e17 	ldw	r2,56(sp)
 1006218:	017fffc4 	movi	r5,-1
 100621c:	11000204 	addi	r4,r2,8
 1006220:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006224:	00bff216 	blt	zero,r2,10061f0 <_ZNSsD1Ev+0x64>
 1006228:	d9000e17 	ldw	r4,56(sp)
 100622c:	d80b883a 	mov	r5,sp
 1006230:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006234:	003fee06 	br	10061f0 <_ZNSsD1Ev+0x64>
 1006238:	d9000317 	ldw	r4,12(sp)
 100623c:	00bfffc4 	movi	r2,-1
 1006240:	d8800215 	stw	r2,8(sp)
 1006244:	10094380 	call	1009438 <_Unwind_SjLj_Resume>

01006248 <_ZNSsD2Ev>:
 1006248:	deffed04 	addi	sp,sp,-76
 100624c:	00804074 	movhi	r2,257
 1006250:	10a0ae04 	addi	r2,r2,-32072
 1006254:	00c040b4 	movhi	r3,258
 1006258:	18fb4044 	addi	r3,r3,-4863
 100625c:	d8800715 	stw	r2,28(sp)
 1006260:	d9000f15 	stw	r4,60(sp)
 1006264:	00804034 	movhi	r2,256
 1006268:	1098bd04 	addi	r2,r2,25332
 100626c:	d9000104 	addi	r4,sp,4
 1006270:	d8c00815 	stw	r3,32(sp)
 1006274:	d8800a15 	stw	r2,40(sp)
 1006278:	dfc01215 	stw	ra,72(sp)
 100627c:	df001115 	stw	fp,68(sp)
 1006280:	ddc01015 	stw	r23,64(sp)
 1006284:	dec00915 	stw	sp,36(sp)
 1006288:	dec00b15 	stw	sp,44(sp)
 100628c:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1006290:	d8c00f17 	ldw	r3,60(sp)
 1006294:	18800017 	ldw	r2,0(r3)
 1006298:	00c040b4 	movhi	r3,258
 100629c:	18dbcf04 	addi	r3,r3,28476
 10062a0:	10bffd04 	addi	r2,r2,-12
 10062a4:	d8800e15 	stw	r2,56(sp)
 10062a8:	10c0071e 	bne	r2,r3,10062c8 <_ZNSsD2Ev+0x80>
 10062ac:	d9000104 	addi	r4,sp,4
 10062b0:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 10062b4:	dfc01217 	ldw	ra,72(sp)
 10062b8:	df001117 	ldw	fp,68(sp)
 10062bc:	ddc01017 	ldw	r23,64(sp)
 10062c0:	dec01304 	addi	sp,sp,76
 10062c4:	f800283a 	ret
 10062c8:	00800044 	movi	r2,1
 10062cc:	d8800215 	stw	r2,8(sp)
 10062d0:	d8800e17 	ldw	r2,56(sp)
 10062d4:	017fffc4 	movi	r5,-1
 10062d8:	11000204 	addi	r4,r2,8
 10062dc:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10062e0:	00bff216 	blt	zero,r2,10062ac <_ZNSsD2Ev+0x64>
 10062e4:	d9000e17 	ldw	r4,56(sp)
 10062e8:	d80b883a 	mov	r5,sp
 10062ec:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10062f0:	003fee06 	br	10062ac <_ZNSsD2Ev+0x64>
 10062f4:	d9000317 	ldw	r4,12(sp)
 10062f8:	00bfffc4 	movi	r2,-1
 10062fc:	d8800215 	stw	r2,8(sp)
 1006300:	10094380 	call	1009438 <_Unwind_SjLj_Resume>

01006304 <_ZNSs9_M_mutateEmmm>:
 1006304:	deffe704 	addi	sp,sp,-100
 1006308:	00804074 	movhi	r2,257
 100630c:	10a0ae04 	addi	r2,r2,-32072
 1006310:	00c040b4 	movhi	r3,258
 1006314:	18fb41c4 	addi	r3,r3,-4857
 1006318:	d8800715 	stw	r2,28(sp)
 100631c:	d9001215 	stw	r4,72(sp)
 1006320:	00804034 	movhi	r2,256
 1006324:	10994b04 	addi	r2,r2,25900
 1006328:	d9000104 	addi	r4,sp,4
 100632c:	d8c00815 	stw	r3,32(sp)
 1006330:	d8800a15 	stw	r2,40(sp)
 1006334:	d9801415 	stw	r6,80(sp)
 1006338:	d9401315 	stw	r5,76(sp)
 100633c:	d9c01515 	stw	r7,84(sp)
 1006340:	dfc01815 	stw	ra,96(sp)
 1006344:	df001715 	stw	fp,92(sp)
 1006348:	ddc01615 	stw	r23,88(sp)
 100634c:	dec00915 	stw	sp,36(sp)
 1006350:	dec00b15 	stw	sp,44(sp)
 1006354:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1006358:	d8801217 	ldw	r2,72(sp)
 100635c:	d9c01517 	ldw	r7,84(sp)
 1006360:	11800017 	ldw	r6,0(r2)
 1006364:	313ffd04 	addi	r4,r6,-12
 1006368:	20800017 	ldw	r2,0(r4)
 100636c:	21400117 	ldw	r5,4(r4)
 1006370:	11c7883a 	add	r3,r2,r7
 1006374:	d9c01317 	ldw	r7,76(sp)
 1006378:	11c5c83a 	sub	r2,r2,r7
 100637c:	d9c01417 	ldw	r7,80(sp)
 1006380:	19c7c83a 	sub	r3,r3,r7
 1006384:	11c5c83a 	sub	r2,r2,r7
 1006388:	d8c01115 	stw	r3,68(sp)
 100638c:	d8801015 	stw	r2,64(sp)
 1006390:	28c00236 	bltu	r5,r3,100639c <_ZNSs9_M_mutateEmmm+0x98>
 1006394:	20800217 	ldw	r2,8(r4)
 1006398:	0080240e 	bge	zero,r2,100642c <_ZNSs9_M_mutateEmmm+0x128>
 100639c:	00800044 	movi	r2,1
 10063a0:	d8800215 	stw	r2,8(sp)
 10063a4:	d9001117 	ldw	r4,68(sp)
 10063a8:	d80d883a 	mov	r6,sp
 10063ac:	10042440 	call	1004244 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 10063b0:	d8c01317 	ldw	r3,76(sp)
 10063b4:	d8800f15 	stw	r2,60(sp)
 10063b8:	18003c1e 	bne	r3,zero,10064ac <_ZNSs9_M_mutateEmmm+0x1a8>
 10063bc:	d8c01017 	ldw	r3,64(sp)
 10063c0:	1800291e 	bne	r3,zero,1006468 <_ZNSs9_M_mutateEmmm+0x164>
 10063c4:	d8c01217 	ldw	r3,72(sp)
 10063c8:	18800017 	ldw	r2,0(r3)
 10063cc:	00c040b4 	movhi	r3,258
 10063d0:	18dbcf04 	addi	r3,r3,28476
 10063d4:	10bffd04 	addi	r2,r2,-12
 10063d8:	d8800e15 	stw	r2,56(sp)
 10063dc:	10c0481e 	bne	r2,r3,1006500 <_ZNSs9_M_mutateEmmm+0x1fc>
 10063e0:	d9c00f17 	ldw	r7,60(sp)
 10063e4:	d8c01217 	ldw	r3,72(sp)
 10063e8:	38800304 	addi	r2,r7,12
 10063ec:	18800015 	stw	r2,0(r3)
 10063f0:	d9401217 	ldw	r5,72(sp)
 10063f4:	d9c01117 	ldw	r7,68(sp)
 10063f8:	d9000104 	addi	r4,sp,4
 10063fc:	28800017 	ldw	r2,0(r5)
 1006400:	10bffd04 	addi	r2,r2,-12
 1006404:	11c7883a 	add	r3,r2,r7
 1006408:	10000215 	stw	zero,8(r2)
 100640c:	11c00015 	stw	r7,0(r2)
 1006410:	18000305 	stb	zero,12(r3)
 1006414:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1006418:	dfc01817 	ldw	ra,96(sp)
 100641c:	df001717 	ldw	fp,92(sp)
 1006420:	ddc01617 	ldw	r23,88(sp)
 1006424:	dec01904 	addi	sp,sp,100
 1006428:	f800283a 	ret
 100642c:	d9001017 	ldw	r4,64(sp)
 1006430:	203fef26 	beq	r4,zero,10063f0 <_ZNSs9_M_mutateEmmm+0xec>
 1006434:	d9001517 	ldw	r4,84(sp)
 1006438:	d9401417 	ldw	r5,80(sp)
 100643c:	217fec26 	beq	r4,r5,10063f0 <_ZNSs9_M_mutateEmmm+0xec>
 1006440:	d9c01317 	ldw	r7,76(sp)
 1006444:	00800044 	movi	r2,1
 1006448:	31c7883a 	add	r3,r6,r7
 100644c:	194b883a 	add	r5,r3,r5
 1006450:	1909883a 	add	r4,r3,r4
 1006454:	d8c01017 	ldw	r3,64(sp)
 1006458:	1880261e 	bne	r3,r2,10064f4 <_ZNSs9_M_mutateEmmm+0x1f0>
 100645c:	28800003 	ldbu	r2,0(r5)
 1006460:	20800005 	stb	r2,0(r4)
 1006464:	003fe206 	br	10063f0 <_ZNSs9_M_mutateEmmm+0xec>
 1006468:	d9001217 	ldw	r4,72(sp)
 100646c:	d9400f17 	ldw	r5,60(sp)
 1006470:	d9c01317 	ldw	r7,76(sp)
 1006474:	20800017 	ldw	r2,0(r4)
 1006478:	28c00304 	addi	r3,r5,12
 100647c:	19c7883a 	add	r3,r3,r7
 1006480:	3885883a 	add	r2,r7,r2
 1006484:	d9401517 	ldw	r5,84(sp)
 1006488:	d9c01417 	ldw	r7,80(sp)
 100648c:	1949883a 	add	r4,r3,r5
 1006490:	11cb883a 	add	r5,r2,r7
 1006494:	d8801017 	ldw	r2,64(sp)
 1006498:	00c00044 	movi	r3,1
 100649c:	10c00d26 	beq	r2,r3,10064d4 <_ZNSs9_M_mutateEmmm+0x1d0>
 10064a0:	d9801017 	ldw	r6,64(sp)
 10064a4:	1009f8c0 	call	1009f8c <memcpy>
 10064a8:	003fc606 	br	10063c4 <_ZNSs9_M_mutateEmmm+0xc0>
 10064ac:	d9c01217 	ldw	r7,72(sp)
 10064b0:	11000304 	addi	r4,r2,12
 10064b4:	00800044 	movi	r2,1
 10064b8:	39400017 	ldw	r5,0(r7)
 10064bc:	18800826 	beq	r3,r2,10064e0 <_ZNSs9_M_mutateEmmm+0x1dc>
 10064c0:	d9801317 	ldw	r6,76(sp)
 10064c4:	1009f8c0 	call	1009f8c <memcpy>
 10064c8:	d8c01017 	ldw	r3,64(sp)
 10064cc:	183fbd26 	beq	r3,zero,10063c4 <_ZNSs9_M_mutateEmmm+0xc0>
 10064d0:	003fe506 	br	1006468 <_ZNSs9_M_mutateEmmm+0x164>
 10064d4:	28800003 	ldbu	r2,0(r5)
 10064d8:	20800005 	stb	r2,0(r4)
 10064dc:	003fb906 	br	10063c4 <_ZNSs9_M_mutateEmmm+0xc0>
 10064e0:	28800003 	ldbu	r2,0(r5)
 10064e4:	20800005 	stb	r2,0(r4)
 10064e8:	d8c01017 	ldw	r3,64(sp)
 10064ec:	183fb526 	beq	r3,zero,10063c4 <_ZNSs9_M_mutateEmmm+0xc0>
 10064f0:	003fdd06 	br	1006468 <_ZNSs9_M_mutateEmmm+0x164>
 10064f4:	d9801017 	ldw	r6,64(sp)
 10064f8:	100a02c0 	call	100a02c <memmove>
 10064fc:	003fbc06 	br	10063f0 <_ZNSs9_M_mutateEmmm+0xec>
 1006500:	d9400e17 	ldw	r5,56(sp)
 1006504:	00800044 	movi	r2,1
 1006508:	d8800215 	stw	r2,8(sp)
 100650c:	29000204 	addi	r4,r5,8
 1006510:	017fffc4 	movi	r5,-1
 1006514:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006518:	00bfb116 	blt	zero,r2,10063e0 <_ZNSs9_M_mutateEmmm+0xdc>
 100651c:	d9000e17 	ldw	r4,56(sp)
 1006520:	d80b883a 	mov	r5,sp
 1006524:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006528:	003fad06 	br	10063e0 <_ZNSs9_M_mutateEmmm+0xdc>
 100652c:	d9000317 	ldw	r4,12(sp)
 1006530:	00bfffc4 	movi	r2,-1
 1006534:	d8800215 	stw	r2,8(sp)
 1006538:	10094380 	call	1009438 <_Unwind_SjLj_Resume>

0100653c <_ZNSs15_M_replace_safeEmmPKcm>:
 100653c:	defffb04 	addi	sp,sp,-20
 1006540:	dc000015 	stw	r16,0(sp)
 1006544:	dc000517 	ldw	r16,20(sp)
 1006548:	dcc00315 	stw	r19,12(sp)
 100654c:	3827883a 	mov	r19,r7
 1006550:	800f883a 	mov	r7,r16
 1006554:	dc800215 	stw	r18,8(sp)
 1006558:	dc400115 	stw	r17,4(sp)
 100655c:	dfc00415 	stw	ra,16(sp)
 1006560:	2025883a 	mov	r18,r4
 1006564:	2823883a 	mov	r17,r5
 1006568:	10063040 	call	1006304 <_ZNSs9_M_mutateEmmm>
 100656c:	80000826 	beq	r16,zero,1006590 <_ZNSs15_M_replace_safeEmmPKcm+0x54>
 1006570:	90800017 	ldw	r2,0(r18)
 1006574:	980b883a 	mov	r5,r19
 1006578:	800d883a 	mov	r6,r16
 100657c:	8887883a 	add	r3,r17,r2
 1006580:	00800044 	movi	r2,1
 1006584:	1809883a 	mov	r4,r3
 1006588:	80800926 	beq	r16,r2,10065b0 <_ZNSs15_M_replace_safeEmmPKcm+0x74>
 100658c:	1009f8c0 	call	1009f8c <memcpy>
 1006590:	9005883a 	mov	r2,r18
 1006594:	dfc00417 	ldw	ra,16(sp)
 1006598:	dcc00317 	ldw	r19,12(sp)
 100659c:	dc800217 	ldw	r18,8(sp)
 10065a0:	dc400117 	ldw	r17,4(sp)
 10065a4:	dc000017 	ldw	r16,0(sp)
 10065a8:	dec00504 	addi	sp,sp,20
 10065ac:	f800283a 	ret
 10065b0:	98800003 	ldbu	r2,0(r19)
 10065b4:	18800005 	stb	r2,0(r3)
 10065b8:	9005883a 	mov	r2,r18
 10065bc:	dfc00417 	ldw	ra,16(sp)
 10065c0:	dcc00317 	ldw	r19,12(sp)
 10065c4:	dc800217 	ldw	r18,8(sp)
 10065c8:	dc400117 	ldw	r17,4(sp)
 10065cc:	dc000017 	ldw	r16,0(sp)
 10065d0:	dec00504 	addi	sp,sp,20
 10065d4:	f800283a 	ret

010065d8 <_ZNSs6assignEPKcm>:
 10065d8:	defffc04 	addi	sp,sp,-16
 10065dc:	00900034 	movhi	r2,16384
 10065e0:	10bfff04 	addi	r2,r2,-4
 10065e4:	dc400215 	stw	r17,8(sp)
 10065e8:	dc000115 	stw	r16,4(sp)
 10065ec:	dfc00315 	stw	ra,12(sp)
 10065f0:	3023883a 	mov	r17,r6
 10065f4:	2021883a 	mov	r16,r4
 10065f8:	280f883a 	mov	r7,r5
 10065fc:	11803136 	bltu	r2,r6,10066c4 <_ZNSs6assignEPKcm+0xec>
 1006600:	21000017 	ldw	r4,0(r4)
 1006604:	29000c2e 	bgeu	r5,r4,1006638 <_ZNSs6assignEPKcm+0x60>
 1006608:	21bffd17 	ldw	r6,-12(r4)
 100660c:	000b883a 	mov	r5,zero
 1006610:	8009883a 	mov	r4,r16
 1006614:	dc400015 	stw	r17,0(sp)
 1006618:	100653c0 	call	100653c <_ZNSs15_M_replace_safeEmmPKcm>
 100661c:	1021883a 	mov	r16,r2
 1006620:	8005883a 	mov	r2,r16
 1006624:	dfc00317 	ldw	ra,12(sp)
 1006628:	dc400217 	ldw	r17,8(sp)
 100662c:	dc000117 	ldw	r16,4(sp)
 1006630:	dec00404 	addi	sp,sp,16
 1006634:	f800283a 	ret
 1006638:	20bffd17 	ldw	r2,-12(r4)
 100663c:	20fffd04 	addi	r3,r4,-12
 1006640:	2085883a 	add	r2,r4,r2
 1006644:	117ff036 	bltu	r2,r5,1006608 <_ZNSs6assignEPKcm+0x30>
 1006648:	18800217 	ldw	r2,8(r3)
 100664c:	00bfee16 	blt	zero,r2,1006608 <_ZNSs6assignEPKcm+0x30>
 1006650:	2905c83a 	sub	r2,r5,r4
 1006654:	11800f36 	bltu	r2,r6,1006694 <_ZNSs6assignEPKcm+0xbc>
 1006658:	00800044 	movi	r2,1
 100665c:	88801526 	beq	r17,r2,10066b4 <_ZNSs6assignEPKcm+0xdc>
 1006660:	1009f8c0 	call	1009f8c <memcpy>
 1006664:	81000017 	ldw	r4,0(r16)
 1006668:	20bffd04 	addi	r2,r4,-12
 100666c:	1447883a 	add	r3,r2,r17
 1006670:	10000215 	stw	zero,8(r2)
 1006674:	247ffd15 	stw	r17,-12(r4)
 1006678:	8005883a 	mov	r2,r16
 100667c:	18000305 	stb	zero,12(r3)
 1006680:	dfc00317 	ldw	ra,12(sp)
 1006684:	dc400217 	ldw	r17,8(sp)
 1006688:	dc000117 	ldw	r16,4(sp)
 100668c:	dec00404 	addi	sp,sp,16
 1006690:	f800283a 	ret
 1006694:	103ff426 	beq	r2,zero,1006668 <_ZNSs6assignEPKcm+0x90>
 1006698:	00800044 	movi	r2,1
 100669c:	88800526 	beq	r17,r2,10066b4 <_ZNSs6assignEPKcm+0xdc>
 10066a0:	380b883a 	mov	r5,r7
 10066a4:	880d883a 	mov	r6,r17
 10066a8:	100a02c0 	call	100a02c <memmove>
 10066ac:	81000017 	ldw	r4,0(r16)
 10066b0:	003fed06 	br	1006668 <_ZNSs6assignEPKcm+0x90>
 10066b4:	38800003 	ldbu	r2,0(r7)
 10066b8:	20800005 	stb	r2,0(r4)
 10066bc:	81000017 	ldw	r4,0(r16)
 10066c0:	003fe906 	br	1006668 <_ZNSs6assignEPKcm+0x90>
 10066c4:	010040b4 	movhi	r4,258
 10066c8:	213c4804 	addi	r4,r4,-3808
 10066cc:	10025440 	call	1002544 <_ZSt20__throw_length_errorPKc>

010066d0 <_ZNSs6assignEPKc>:
 10066d0:	defffd04 	addi	sp,sp,-12
 10066d4:	dcc00115 	stw	r19,4(sp)
 10066d8:	dc400015 	stw	r17,0(sp)
 10066dc:	dfc00215 	stw	ra,8(sp)
 10066e0:	2023883a 	mov	r17,r4
 10066e4:	2809883a 	mov	r4,r5
 10066e8:	2827883a 	mov	r19,r5
 10066ec:	100a5dc0 	call	100a5dc <strlen>
 10066f0:	980b883a 	mov	r5,r19
 10066f4:	8809883a 	mov	r4,r17
 10066f8:	100d883a 	mov	r6,r2
 10066fc:	dfc00217 	ldw	ra,8(sp)
 1006700:	dcc00117 	ldw	r19,4(sp)
 1006704:	dc400017 	ldw	r17,0(sp)
 1006708:	dec00304 	addi	sp,sp,12
 100670c:	10065d81 	jmpi	10065d8 <_ZNSs6assignEPKcm>

01006710 <_ZNSs6assignERKSsmm>:
 1006710:	29400017 	ldw	r5,0(r5)
 1006714:	deffff04 	addi	sp,sp,-4
 1006718:	dfc00015 	stw	ra,0(sp)
 100671c:	28bffd17 	ldw	r2,-12(r5)
 1006720:	11800c36 	bltu	r2,r6,1006754 <_ZNSs6assignERKSsmm+0x44>
 1006724:	1185c83a 	sub	r2,r2,r6
 1006728:	298b883a 	add	r5,r5,r6
 100672c:	11c00436 	bltu	r2,r7,1006740 <_ZNSs6assignERKSsmm+0x30>
 1006730:	380d883a 	mov	r6,r7
 1006734:	dfc00017 	ldw	ra,0(sp)
 1006738:	dec00104 	addi	sp,sp,4
 100673c:	10065d81 	jmpi	10065d8 <_ZNSs6assignEPKcm>
 1006740:	100f883a 	mov	r7,r2
 1006744:	380d883a 	mov	r6,r7
 1006748:	dfc00017 	ldw	ra,0(sp)
 100674c:	dec00104 	addi	sp,sp,4
 1006750:	10065d81 	jmpi	10065d8 <_ZNSs6assignEPKcm>
 1006754:	010040b4 	movhi	r4,258
 1006758:	213c4804 	addi	r4,r4,-3808
 100675c:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01006760 <_ZNSsaSEPKc>:
 1006760:	defffd04 	addi	sp,sp,-12
 1006764:	dcc00115 	stw	r19,4(sp)
 1006768:	dc400015 	stw	r17,0(sp)
 100676c:	dfc00215 	stw	ra,8(sp)
 1006770:	2023883a 	mov	r17,r4
 1006774:	2809883a 	mov	r4,r5
 1006778:	2827883a 	mov	r19,r5
 100677c:	100a5dc0 	call	100a5dc <strlen>
 1006780:	980b883a 	mov	r5,r19
 1006784:	8809883a 	mov	r4,r17
 1006788:	100d883a 	mov	r6,r2
 100678c:	dfc00217 	ldw	ra,8(sp)
 1006790:	dcc00117 	ldw	r19,4(sp)
 1006794:	dc400017 	ldw	r17,0(sp)
 1006798:	dec00304 	addi	sp,sp,12
 100679c:	10065d81 	jmpi	10065d8 <_ZNSs6assignEPKcm>

010067a0 <_ZNSs14_M_replace_auxEmmmc>:
 10067a0:	20800017 	ldw	r2,0(r4)
 10067a4:	defffb04 	addi	sp,sp,-20
 10067a8:	dcc00315 	stw	r19,12(sp)
 10067ac:	10fffd17 	ldw	r3,-12(r2)
 10067b0:	00900034 	movhi	r2,16384
 10067b4:	10bfff04 	addi	r2,r2,-4
 10067b8:	dc800215 	stw	r18,8(sp)
 10067bc:	1987c83a 	sub	r3,r3,r6
 10067c0:	10c5c83a 	sub	r2,r2,r3
 10067c4:	dc400115 	stw	r17,4(sp)
 10067c8:	dc000015 	stw	r16,0(sp)
 10067cc:	dfc00415 	stw	ra,16(sp)
 10067d0:	2023883a 	mov	r17,r4
 10067d4:	3821883a 	mov	r16,r7
 10067d8:	2827883a 	mov	r19,r5
 10067dc:	dc800503 	ldbu	r18,20(sp)
 10067e0:	11c01f36 	bltu	r2,r7,1006860 <_ZNSs14_M_replace_auxEmmmc+0xc0>
 10067e4:	10063040 	call	1006304 <_ZNSs9_M_mutateEmmm>
 10067e8:	80000c26 	beq	r16,zero,100681c <_ZNSs14_M_replace_auxEmmmc+0x7c>
 10067ec:	88800017 	ldw	r2,0(r17)
 10067f0:	90c03fcc 	andi	r3,r18,255
 10067f4:	18c0201c 	xori	r3,r3,128
 10067f8:	9889883a 	add	r4,r19,r2
 10067fc:	00800044 	movi	r2,1
 1006800:	18ffe004 	addi	r3,r3,-128
 1006804:	80800d26 	beq	r16,r2,100683c <_ZNSs14_M_replace_auxEmmmc+0x9c>
 1006808:	19403fcc 	andi	r5,r3,255
 100680c:	2940201c 	xori	r5,r5,128
 1006810:	297fe004 	addi	r5,r5,-128
 1006814:	800d883a 	mov	r6,r16
 1006818:	100a10c0 	call	100a10c <memset>
 100681c:	8805883a 	mov	r2,r17
 1006820:	dfc00417 	ldw	ra,16(sp)
 1006824:	dcc00317 	ldw	r19,12(sp)
 1006828:	dc800217 	ldw	r18,8(sp)
 100682c:	dc400117 	ldw	r17,4(sp)
 1006830:	dc000017 	ldw	r16,0(sp)
 1006834:	dec00504 	addi	sp,sp,20
 1006838:	f800283a 	ret
 100683c:	8805883a 	mov	r2,r17
 1006840:	20c00005 	stb	r3,0(r4)
 1006844:	dfc00417 	ldw	ra,16(sp)
 1006848:	dcc00317 	ldw	r19,12(sp)
 100684c:	dc800217 	ldw	r18,8(sp)
 1006850:	dc400117 	ldw	r17,4(sp)
 1006854:	dc000017 	ldw	r16,0(sp)
 1006858:	dec00504 	addi	sp,sp,20
 100685c:	f800283a 	ret
 1006860:	010040b4 	movhi	r4,258
 1006864:	213c4e04 	addi	r4,r4,-3784
 1006868:	10025440 	call	1002544 <_ZSt20__throw_length_errorPKc>

0100686c <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_mc>:
 100686c:	20800017 	ldw	r2,0(r4)
 1006870:	d8c00007 	ldb	r3,0(sp)
 1006874:	314dc83a 	sub	r6,r6,r5
 1006878:	288bc83a 	sub	r5,r5,r2
 100687c:	d8c00015 	stw	r3,0(sp)
 1006880:	10067a01 	jmpi	10067a0 <_ZNSs14_M_replace_auxEmmmc>

01006884 <_ZNSs7replaceEmmmc>:
 1006884:	20800017 	ldw	r2,0(r4)
 1006888:	deffff04 	addi	sp,sp,-4
 100688c:	dfc00015 	stw	ra,0(sp)
 1006890:	10fffd17 	ldw	r3,-12(r2)
 1006894:	d8800103 	ldbu	r2,4(sp)
 1006898:	19401136 	bltu	r3,r5,10068e0 <_ZNSs7replaceEmmmc+0x5c>
 100689c:	1947c83a 	sub	r3,r3,r5
 10068a0:	19800736 	bltu	r3,r6,10068c0 <_ZNSs7replaceEmmmc+0x3c>
 10068a4:	10803fcc 	andi	r2,r2,255
 10068a8:	1080201c 	xori	r2,r2,128
 10068ac:	10bfe004 	addi	r2,r2,-128
 10068b0:	d8800115 	stw	r2,4(sp)
 10068b4:	dfc00017 	ldw	ra,0(sp)
 10068b8:	dec00104 	addi	sp,sp,4
 10068bc:	10067a01 	jmpi	10067a0 <_ZNSs14_M_replace_auxEmmmc>
 10068c0:	10803fcc 	andi	r2,r2,255
 10068c4:	1080201c 	xori	r2,r2,128
 10068c8:	10bfe004 	addi	r2,r2,-128
 10068cc:	180d883a 	mov	r6,r3
 10068d0:	d8800115 	stw	r2,4(sp)
 10068d4:	dfc00017 	ldw	ra,0(sp)
 10068d8:	dec00104 	addi	sp,sp,4
 10068dc:	10067a01 	jmpi	10067a0 <_ZNSs14_M_replace_auxEmmmc>
 10068e0:	010040b4 	movhi	r4,258
 10068e4:	213c5604 	addi	r4,r4,-3752
 10068e8:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

010068ec <_ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc>:
 10068ec:	20800017 	ldw	r2,0(r4)
 10068f0:	defffc04 	addi	sp,sp,-16
 10068f4:	30c03fcc 	andi	r3,r6,255
 10068f8:	dc000115 	stw	r16,4(sp)
 10068fc:	18c0201c 	xori	r3,r3,128
 1006900:	28a1c83a 	sub	r16,r5,r2
 1006904:	dc400215 	stw	r17,8(sp)
 1006908:	18ffe004 	addi	r3,r3,-128
 100690c:	2023883a 	mov	r17,r4
 1006910:	01c00044 	movi	r7,1
 1006914:	800b883a 	mov	r5,r16
 1006918:	000d883a 	mov	r6,zero
 100691c:	d8c00015 	stw	r3,0(sp)
 1006920:	dfc00315 	stw	ra,12(sp)
 1006924:	10067a00 	call	10067a0 <_ZNSs14_M_replace_auxEmmmc>
 1006928:	88800017 	ldw	r2,0(r17)
 100692c:	00ffffc4 	movi	r3,-1
 1006930:	10ffff15 	stw	r3,-4(r2)
 1006934:	1405883a 	add	r2,r2,r16
 1006938:	dfc00317 	ldw	ra,12(sp)
 100693c:	dc400217 	ldw	r17,8(sp)
 1006940:	dc000117 	ldw	r16,4(sp)
 1006944:	dec00404 	addi	sp,sp,16
 1006948:	f800283a 	ret

0100694c <_ZNSs6insertEmmc>:
 100694c:	20c00017 	ldw	r3,0(r4)
 1006950:	defffe04 	addi	sp,sp,-8
 1006954:	dfc00115 	stw	ra,4(sp)
 1006958:	18bffd17 	ldw	r2,-12(r3)
 100695c:	11400a36 	bltu	r2,r5,1006988 <_ZNSs6insertEmmc+0x3c>
 1006960:	38803fcc 	andi	r2,r7,255
 1006964:	1080201c 	xori	r2,r2,128
 1006968:	300f883a 	mov	r7,r6
 100696c:	10bfe004 	addi	r2,r2,-128
 1006970:	000d883a 	mov	r6,zero
 1006974:	d8800015 	stw	r2,0(sp)
 1006978:	10067a00 	call	10067a0 <_ZNSs14_M_replace_auxEmmmc>
 100697c:	dfc00117 	ldw	ra,4(sp)
 1006980:	dec00204 	addi	sp,sp,8
 1006984:	f800283a 	ret
 1006988:	010040b4 	movhi	r4,258
 100698c:	213c5c04 	addi	r4,r4,-3728
 1006990:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01006994 <_ZNSs6assignEmc>:
 1006994:	20800017 	ldw	r2,0(r4)
 1006998:	30c03fcc 	andi	r3,r6,255
 100699c:	18c0201c 	xori	r3,r3,128
 10069a0:	11bffd17 	ldw	r6,-12(r2)
 10069a4:	defffe04 	addi	sp,sp,-8
 10069a8:	280f883a 	mov	r7,r5
 10069ac:	18ffe004 	addi	r3,r3,-128
 10069b0:	000b883a 	mov	r5,zero
 10069b4:	dfc00115 	stw	ra,4(sp)
 10069b8:	d8c00015 	stw	r3,0(sp)
 10069bc:	10067a00 	call	10067a0 <_ZNSs14_M_replace_auxEmmmc>
 10069c0:	dfc00117 	ldw	ra,4(sp)
 10069c4:	dec00204 	addi	sp,sp,8
 10069c8:	f800283a 	ret

010069cc <_ZNSsaSEc>:
 10069cc:	20800017 	ldw	r2,0(r4)
 10069d0:	28c03fcc 	andi	r3,r5,255
 10069d4:	18c0201c 	xori	r3,r3,128
 10069d8:	11bffd17 	ldw	r6,-12(r2)
 10069dc:	defffd04 	addi	sp,sp,-12
 10069e0:	18ffe004 	addi	r3,r3,-128
 10069e4:	01c00044 	movi	r7,1
 10069e8:	000b883a 	mov	r5,zero
 10069ec:	dc400115 	stw	r17,4(sp)
 10069f0:	dfc00215 	stw	ra,8(sp)
 10069f4:	2023883a 	mov	r17,r4
 10069f8:	d8c00015 	stw	r3,0(sp)
 10069fc:	10067a00 	call	10067a0 <_ZNSs14_M_replace_auxEmmmc>
 1006a00:	8805883a 	mov	r2,r17
 1006a04:	dfc00217 	ldw	ra,8(sp)
 1006a08:	dc400117 	ldw	r17,4(sp)
 1006a0c:	dec00304 	addi	sp,sp,12
 1006a10:	f800283a 	ret

01006a14 <_ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEmc>:
 1006a14:	20800017 	ldw	r2,0(r4)
 1006a18:	3a003fcc 	andi	r8,r7,255
 1006a1c:	4200201c 	xori	r8,r8,128
 1006a20:	defffe04 	addi	sp,sp,-8
 1006a24:	423fe004 	addi	r8,r8,-128
 1006a28:	300f883a 	mov	r7,r6
 1006a2c:	288bc83a 	sub	r5,r5,r2
 1006a30:	000d883a 	mov	r6,zero
 1006a34:	dfc00115 	stw	ra,4(sp)
 1006a38:	da000015 	stw	r8,0(sp)
 1006a3c:	10067a00 	call	10067a0 <_ZNSs14_M_replace_auxEmmmc>
 1006a40:	dfc00117 	ldw	ra,4(sp)
 1006a44:	dec00204 	addi	sp,sp,8
 1006a48:	f800283a 	ret

01006a4c <_ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_>:
 1006a4c:	20800017 	ldw	r2,0(r4)
 1006a50:	defffd04 	addi	sp,sp,-12
 1006a54:	dc400015 	stw	r17,0(sp)
 1006a58:	28a3c83a 	sub	r17,r5,r2
 1006a5c:	dc800115 	stw	r18,4(sp)
 1006a60:	314dc83a 	sub	r6,r6,r5
 1006a64:	2025883a 	mov	r18,r4
 1006a68:	880b883a 	mov	r5,r17
 1006a6c:	000f883a 	mov	r7,zero
 1006a70:	dfc00215 	stw	ra,8(sp)
 1006a74:	10063040 	call	1006304 <_ZNSs9_M_mutateEmmm>
 1006a78:	90800017 	ldw	r2,0(r18)
 1006a7c:	00ffffc4 	movi	r3,-1
 1006a80:	10ffff15 	stw	r3,-4(r2)
 1006a84:	1445883a 	add	r2,r2,r17
 1006a88:	dfc00217 	ldw	ra,8(sp)
 1006a8c:	dc800117 	ldw	r18,4(sp)
 1006a90:	dc400017 	ldw	r17,0(sp)
 1006a94:	dec00304 	addi	sp,sp,12
 1006a98:	f800283a 	ret

01006a9c <_ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE>:
 1006a9c:	20800017 	ldw	r2,0(r4)
 1006aa0:	defffd04 	addi	sp,sp,-12
 1006aa4:	dc000015 	stw	r16,0(sp)
 1006aa8:	28a1c83a 	sub	r16,r5,r2
 1006aac:	dc400115 	stw	r17,4(sp)
 1006ab0:	01800044 	movi	r6,1
 1006ab4:	2023883a 	mov	r17,r4
 1006ab8:	000f883a 	mov	r7,zero
 1006abc:	800b883a 	mov	r5,r16
 1006ac0:	dfc00215 	stw	ra,8(sp)
 1006ac4:	10063040 	call	1006304 <_ZNSs9_M_mutateEmmm>
 1006ac8:	88800017 	ldw	r2,0(r17)
 1006acc:	00ffffc4 	movi	r3,-1
 1006ad0:	10ffff15 	stw	r3,-4(r2)
 1006ad4:	1405883a 	add	r2,r2,r16
 1006ad8:	dfc00217 	ldw	ra,8(sp)
 1006adc:	dc400117 	ldw	r17,4(sp)
 1006ae0:	dc000017 	ldw	r16,0(sp)
 1006ae4:	dec00304 	addi	sp,sp,12
 1006ae8:	f800283a 	ret

01006aec <_ZNSs5eraseEmm>:
 1006aec:	20800017 	ldw	r2,0(r4)
 1006af0:	defffe04 	addi	sp,sp,-8
 1006af4:	dc000015 	stw	r16,0(sp)
 1006af8:	10bffd17 	ldw	r2,-12(r2)
 1006afc:	dfc00115 	stw	ra,4(sp)
 1006b00:	2021883a 	mov	r16,r4
 1006b04:	11401136 	bltu	r2,r5,1006b4c <_ZNSs5eraseEmm+0x60>
 1006b08:	1145c83a 	sub	r2,r2,r5
 1006b0c:	11800736 	bltu	r2,r6,1006b2c <_ZNSs5eraseEmm+0x40>
 1006b10:	000f883a 	mov	r7,zero
 1006b14:	10063040 	call	1006304 <_ZNSs9_M_mutateEmmm>
 1006b18:	8005883a 	mov	r2,r16
 1006b1c:	dfc00117 	ldw	ra,4(sp)
 1006b20:	dc000017 	ldw	r16,0(sp)
 1006b24:	dec00204 	addi	sp,sp,8
 1006b28:	f800283a 	ret
 1006b2c:	100d883a 	mov	r6,r2
 1006b30:	000f883a 	mov	r7,zero
 1006b34:	10063040 	call	1006304 <_ZNSs9_M_mutateEmmm>
 1006b38:	8005883a 	mov	r2,r16
 1006b3c:	dfc00117 	ldw	ra,4(sp)
 1006b40:	dc000017 	ldw	r16,0(sp)
 1006b44:	dec00204 	addi	sp,sp,8
 1006b48:	f800283a 	ret
 1006b4c:	010040b4 	movhi	r4,258
 1006b50:	213c6204 	addi	r4,r4,-3704
 1006b54:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01006b58 <_ZNSs6insertEmPKcm>:
 1006b58:	defff904 	addi	sp,sp,-28
 1006b5c:	dc000115 	stw	r16,4(sp)
 1006b60:	24000017 	ldw	r16,0(r4)
 1006b64:	dd000515 	stw	r20,20(sp)
 1006b68:	dcc00415 	stw	r19,16(sp)
 1006b6c:	80fffd17 	ldw	r3,-12(r16)
 1006b70:	dc800315 	stw	r18,12(sp)
 1006b74:	dc400215 	stw	r17,8(sp)
 1006b78:	dfc00615 	stw	ra,24(sp)
 1006b7c:	3023883a 	mov	r17,r6
 1006b80:	2029883a 	mov	r20,r4
 1006b84:	2825883a 	mov	r18,r5
 1006b88:	3827883a 	mov	r19,r7
 1006b8c:	81bffd04 	addi	r6,r16,-12
 1006b90:	19403d36 	bltu	r3,r5,1006c88 <_ZNSs6insertEmPKcm+0x130>
 1006b94:	00900034 	movhi	r2,16384
 1006b98:	10bfff04 	addi	r2,r2,-4
 1006b9c:	10c5c83a 	sub	r2,r2,r3
 1006ba0:	11c03c36 	bltu	r2,r7,1006c94 <_ZNSs6insertEmPKcm+0x13c>
 1006ba4:	8c00102e 	bgeu	r17,r16,1006be8 <_ZNSs6insertEmPKcm+0x90>
 1006ba8:	a009883a 	mov	r4,r20
 1006bac:	900b883a 	mov	r5,r18
 1006bb0:	880f883a 	mov	r7,r17
 1006bb4:	000d883a 	mov	r6,zero
 1006bb8:	dcc00015 	stw	r19,0(sp)
 1006bbc:	100653c0 	call	100653c <_ZNSs15_M_replace_safeEmmPKcm>
 1006bc0:	1029883a 	mov	r20,r2
 1006bc4:	a005883a 	mov	r2,r20
 1006bc8:	dfc00617 	ldw	ra,24(sp)
 1006bcc:	dd000517 	ldw	r20,20(sp)
 1006bd0:	dcc00417 	ldw	r19,16(sp)
 1006bd4:	dc800317 	ldw	r18,12(sp)
 1006bd8:	dc400217 	ldw	r17,8(sp)
 1006bdc:	dc000117 	ldw	r16,4(sp)
 1006be0:	dec00704 	addi	sp,sp,28
 1006be4:	f800283a 	ret
 1006be8:	80c5883a 	add	r2,r16,r3
 1006bec:	147fee36 	bltu	r2,r17,1006ba8 <_ZNSs6insertEmPKcm+0x50>
 1006bf0:	30800217 	ldw	r2,8(r6)
 1006bf4:	00bfec16 	blt	zero,r2,1006ba8 <_ZNSs6insertEmPKcm+0x50>
 1006bf8:	000d883a 	mov	r6,zero
 1006bfc:	10063040 	call	1006304 <_ZNSs9_M_mutateEmmm>
 1006c00:	a0c00017 	ldw	r3,0(r20)
 1006c04:	8c05c83a 	sub	r2,r17,r16
 1006c08:	188b883a 	add	r5,r3,r2
 1006c0c:	1ca1883a 	add	r16,r3,r18
 1006c10:	2cc7883a 	add	r3,r5,r19
 1006c14:	80c0062e 	bgeu	r16,r3,1006c30 <_ZNSs6insertEmPKcm+0xd8>
 1006c18:	2c000e36 	bltu	r5,r16,1006c54 <_ZNSs6insertEmPKcm+0xfc>
 1006c1c:	00800044 	movi	r2,1
 1006c20:	98801f1e 	bne	r19,r2,1006ca0 <_ZNSs6insertEmPKcm+0x148>
 1006c24:	18800003 	ldbu	r2,0(r3)
 1006c28:	80800005 	stb	r2,0(r16)
 1006c2c:	003fe506 	br	1006bc4 <_ZNSs6insertEmPKcm+0x6c>
 1006c30:	00800044 	movi	r2,1
 1006c34:	9880031e 	bne	r19,r2,1006c44 <_ZNSs6insertEmPKcm+0xec>
 1006c38:	28800003 	ldbu	r2,0(r5)
 1006c3c:	80800005 	stb	r2,0(r16)
 1006c40:	003fe006 	br	1006bc4 <_ZNSs6insertEmPKcm+0x6c>
 1006c44:	8009883a 	mov	r4,r16
 1006c48:	980d883a 	mov	r6,r19
 1006c4c:	1009f8c0 	call	1009f8c <memcpy>
 1006c50:	003fdc06 	br	1006bc4 <_ZNSs6insertEmPKcm+0x6c>
 1006c54:	8163c83a 	sub	r17,r16,r5
 1006c58:	00800044 	movi	r2,1
 1006c5c:	8880171e 	bne	r17,r2,1006cbc <_ZNSs6insertEmPKcm+0x164>
 1006c60:	28800003 	ldbu	r2,0(r5)
 1006c64:	80800005 	stb	r2,0(r16)
 1006c68:	9c4dc83a 	sub	r6,r19,r17
 1006c6c:	00800044 	movi	r2,1
 1006c70:	84cb883a 	add	r5,r16,r19
 1006c74:	8449883a 	add	r4,r16,r17
 1006c78:	30800e1e 	bne	r6,r2,1006cb4 <_ZNSs6insertEmPKcm+0x15c>
 1006c7c:	28800003 	ldbu	r2,0(r5)
 1006c80:	20800005 	stb	r2,0(r4)
 1006c84:	003fcf06 	br	1006bc4 <_ZNSs6insertEmPKcm+0x6c>
 1006c88:	010040b4 	movhi	r4,258
 1006c8c:	213c5c04 	addi	r4,r4,-3728
 1006c90:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>
 1006c94:	010040b4 	movhi	r4,258
 1006c98:	213c5c04 	addi	r4,r4,-3728
 1006c9c:	10025440 	call	1002544 <_ZSt20__throw_length_errorPKc>
 1006ca0:	8009883a 	mov	r4,r16
 1006ca4:	180b883a 	mov	r5,r3
 1006ca8:	980d883a 	mov	r6,r19
 1006cac:	1009f8c0 	call	1009f8c <memcpy>
 1006cb0:	003fc406 	br	1006bc4 <_ZNSs6insertEmPKcm+0x6c>
 1006cb4:	1009f8c0 	call	1009f8c <memcpy>
 1006cb8:	003fc206 	br	1006bc4 <_ZNSs6insertEmPKcm+0x6c>
 1006cbc:	8009883a 	mov	r4,r16
 1006cc0:	880d883a 	mov	r6,r17
 1006cc4:	1009f8c0 	call	1009f8c <memcpy>
 1006cc8:	003fe706 	br	1006c68 <_ZNSs6insertEmPKcm+0x110>

01006ccc <_ZNSs6insertEmPKc>:
 1006ccc:	defffc04 	addi	sp,sp,-16
 1006cd0:	dd400215 	stw	r21,8(sp)
 1006cd4:	dcc00115 	stw	r19,4(sp)
 1006cd8:	dc400015 	stw	r17,0(sp)
 1006cdc:	2027883a 	mov	r19,r4
 1006ce0:	dfc00315 	stw	ra,12(sp)
 1006ce4:	3009883a 	mov	r4,r6
 1006ce8:	3023883a 	mov	r17,r6
 1006cec:	282b883a 	mov	r21,r5
 1006cf0:	100a5dc0 	call	100a5dc <strlen>
 1006cf4:	a80b883a 	mov	r5,r21
 1006cf8:	9809883a 	mov	r4,r19
 1006cfc:	880d883a 	mov	r6,r17
 1006d00:	100f883a 	mov	r7,r2
 1006d04:	dfc00317 	ldw	ra,12(sp)
 1006d08:	dd400217 	ldw	r21,8(sp)
 1006d0c:	dcc00117 	ldw	r19,4(sp)
 1006d10:	dc400017 	ldw	r17,0(sp)
 1006d14:	dec00404 	addi	sp,sp,16
 1006d18:	1006b581 	jmpi	1006b58 <_ZNSs6insertEmPKcm>

01006d1c <_ZNSs6insertEmRKSsmm>:
 1006d1c:	31800017 	ldw	r6,0(r6)
 1006d20:	deffff04 	addi	sp,sp,-4
 1006d24:	3805883a 	mov	r2,r7
 1006d28:	30fffd17 	ldw	r3,-12(r6)
 1006d2c:	dfc00015 	stw	ra,0(sp)
 1006d30:	d9c00117 	ldw	r7,4(sp)
 1006d34:	18800a36 	bltu	r3,r2,1006d60 <_ZNSs6insertEmRKSsmm+0x44>
 1006d38:	1887c83a 	sub	r3,r3,r2
 1006d3c:	308d883a 	add	r6,r6,r2
 1006d40:	19c00336 	bltu	r3,r7,1006d50 <_ZNSs6insertEmRKSsmm+0x34>
 1006d44:	dfc00017 	ldw	ra,0(sp)
 1006d48:	dec00104 	addi	sp,sp,4
 1006d4c:	1006b581 	jmpi	1006b58 <_ZNSs6insertEmPKcm>
 1006d50:	180f883a 	mov	r7,r3
 1006d54:	dfc00017 	ldw	ra,0(sp)
 1006d58:	dec00104 	addi	sp,sp,4
 1006d5c:	1006b581 	jmpi	1006b58 <_ZNSs6insertEmPKcm>
 1006d60:	010040b4 	movhi	r4,258
 1006d64:	213c5c04 	addi	r4,r4,-3728
 1006d68:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01006d6c <_ZNSs6insertEmRKSs>:
 1006d6c:	31800017 	ldw	r6,0(r6)
 1006d70:	31fffd17 	ldw	r7,-12(r6)
 1006d74:	1006b581 	jmpi	1006b58 <_ZNSs6insertEmPKcm>

01006d78 <_ZNSs5clearEv>:
 1006d78:	20800017 	ldw	r2,0(r4)
 1006d7c:	000b883a 	mov	r5,zero
 1006d80:	000f883a 	mov	r7,zero
 1006d84:	11bffd17 	ldw	r6,-12(r2)
 1006d88:	10063041 	jmpi	1006304 <_ZNSs9_M_mutateEmmm>

01006d8c <_ZNSs12_M_leak_hardEv>:
 1006d8c:	22000017 	ldw	r8,0(r4)
 1006d90:	defffe04 	addi	sp,sp,-8
 1006d94:	008040b4 	movhi	r2,258
 1006d98:	109bcf04 	addi	r2,r2,28476
 1006d9c:	40fffd04 	addi	r3,r8,-12
 1006da0:	dc000015 	stw	r16,0(sp)
 1006da4:	dfc00115 	stw	ra,4(sp)
 1006da8:	2021883a 	mov	r16,r4
 1006dac:	18800726 	beq	r3,r2,1006dcc <_ZNSs12_M_leak_hardEv+0x40>
 1006db0:	18800217 	ldw	r2,8(r3)
 1006db4:	000b883a 	mov	r5,zero
 1006db8:	000d883a 	mov	r6,zero
 1006dbc:	000f883a 	mov	r7,zero
 1006dc0:	00800616 	blt	zero,r2,1006ddc <_ZNSs12_M_leak_hardEv+0x50>
 1006dc4:	00bfffc4 	movi	r2,-1
 1006dc8:	40bfff15 	stw	r2,-4(r8)
 1006dcc:	dfc00117 	ldw	ra,4(sp)
 1006dd0:	dc000017 	ldw	r16,0(sp)
 1006dd4:	dec00204 	addi	sp,sp,8
 1006dd8:	f800283a 	ret
 1006ddc:	10063040 	call	1006304 <_ZNSs9_M_mutateEmmm>
 1006de0:	82000017 	ldw	r8,0(r16)
 1006de4:	003ff706 	br	1006dc4 <_ZNSs12_M_leak_hardEv+0x38>

01006de8 <_ZNSs7_M_leakEv>:
 1006de8:	20800017 	ldw	r2,0(r4)
 1006dec:	10ffff17 	ldw	r3,-4(r2)
 1006df0:	1800010e 	bge	r3,zero,1006df8 <_ZNSs7_M_leakEv+0x10>
 1006df4:	f800283a 	ret
 1006df8:	1006d8c1 	jmpi	1006d8c <_ZNSs12_M_leak_hardEv>

01006dfc <_ZNSs2atEm>:
 1006dfc:	20c00017 	ldw	r3,0(r4)
 1006e00:	defffd04 	addi	sp,sp,-12
 1006e04:	dc000015 	stw	r16,0(sp)
 1006e08:	18bffd17 	ldw	r2,-12(r3)
 1006e0c:	2821883a 	mov	r16,r5
 1006e10:	dc400115 	stw	r17,4(sp)
 1006e14:	dfc00215 	stw	ra,8(sp)
 1006e18:	2023883a 	mov	r17,r4
 1006e1c:	197ffd04 	addi	r5,r3,-12
 1006e20:	80800a2e 	bgeu	r16,r2,1006e4c <_ZNSs2atEm+0x50>
 1006e24:	28800217 	ldw	r2,8(r5)
 1006e28:	10000216 	blt	r2,zero,1006e34 <_ZNSs2atEm+0x38>
 1006e2c:	1006d8c0 	call	1006d8c <_ZNSs12_M_leak_hardEv>
 1006e30:	88c00017 	ldw	r3,0(r17)
 1006e34:	80c5883a 	add	r2,r16,r3
 1006e38:	dfc00217 	ldw	ra,8(sp)
 1006e3c:	dc400117 	ldw	r17,4(sp)
 1006e40:	dc000017 	ldw	r16,0(sp)
 1006e44:	dec00304 	addi	sp,sp,12
 1006e48:	f800283a 	ret
 1006e4c:	010040b4 	movhi	r4,258
 1006e50:	213c1404 	addi	r4,r4,-4016
 1006e54:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

01006e58 <_ZNSsixEm>:
 1006e58:	20c00017 	ldw	r3,0(r4)
 1006e5c:	defffd04 	addi	sp,sp,-12
 1006e60:	dc400115 	stw	r17,4(sp)
 1006e64:	18bfff17 	ldw	r2,-4(r3)
 1006e68:	dc000015 	stw	r16,0(sp)
 1006e6c:	dfc00215 	stw	ra,8(sp)
 1006e70:	2021883a 	mov	r16,r4
 1006e74:	2823883a 	mov	r17,r5
 1006e78:	10000216 	blt	r2,zero,1006e84 <_ZNSsixEm+0x2c>
 1006e7c:	1006d8c0 	call	1006d8c <_ZNSs12_M_leak_hardEv>
 1006e80:	80c00017 	ldw	r3,0(r16)
 1006e84:	88c5883a 	add	r2,r17,r3
 1006e88:	dfc00217 	ldw	ra,8(sp)
 1006e8c:	dc400117 	ldw	r17,4(sp)
 1006e90:	dc000017 	ldw	r16,0(sp)
 1006e94:	dec00304 	addi	sp,sp,12
 1006e98:	f800283a 	ret

01006e9c <_ZNSs3endEv>:
 1006e9c:	20c00017 	ldw	r3,0(r4)
 1006ea0:	defffe04 	addi	sp,sp,-8
 1006ea4:	dc000015 	stw	r16,0(sp)
 1006ea8:	18bfff17 	ldw	r2,-4(r3)
 1006eac:	dfc00115 	stw	ra,4(sp)
 1006eb0:	2021883a 	mov	r16,r4
 1006eb4:	10000216 	blt	r2,zero,1006ec0 <_ZNSs3endEv+0x24>
 1006eb8:	1006d8c0 	call	1006d8c <_ZNSs12_M_leak_hardEv>
 1006ebc:	80c00017 	ldw	r3,0(r16)
 1006ec0:	18bffd17 	ldw	r2,-12(r3)
 1006ec4:	1885883a 	add	r2,r3,r2
 1006ec8:	dfc00117 	ldw	ra,4(sp)
 1006ecc:	dc000017 	ldw	r16,0(sp)
 1006ed0:	dec00204 	addi	sp,sp,8
 1006ed4:	f800283a 	ret

01006ed8 <_ZNSs5beginEv>:
 1006ed8:	20c00017 	ldw	r3,0(r4)
 1006edc:	defffe04 	addi	sp,sp,-8
 1006ee0:	dc000015 	stw	r16,0(sp)
 1006ee4:	18bfff17 	ldw	r2,-4(r3)
 1006ee8:	dfc00115 	stw	ra,4(sp)
 1006eec:	2021883a 	mov	r16,r4
 1006ef0:	10000216 	blt	r2,zero,1006efc <_ZNSs5beginEv+0x24>
 1006ef4:	1006d8c0 	call	1006d8c <_ZNSs12_M_leak_hardEv>
 1006ef8:	80c00017 	ldw	r3,0(r16)
 1006efc:	1805883a 	mov	r2,r3
 1006f00:	dfc00117 	ldw	ra,4(sp)
 1006f04:	dc000017 	ldw	r16,0(sp)
 1006f08:	dec00204 	addi	sp,sp,8
 1006f0c:	f800283a 	ret

01006f10 <_ZNSs4rendEv>:
 1006f10:	28c00017 	ldw	r3,0(r5)
 1006f14:	defffd04 	addi	sp,sp,-12
 1006f18:	dc400115 	stw	r17,4(sp)
 1006f1c:	18bfff17 	ldw	r2,-4(r3)
 1006f20:	dc000015 	stw	r16,0(sp)
 1006f24:	2023883a 	mov	r17,r4
 1006f28:	dfc00215 	stw	ra,8(sp)
 1006f2c:	2821883a 	mov	r16,r5
 1006f30:	2809883a 	mov	r4,r5
 1006f34:	10000216 	blt	r2,zero,1006f40 <_ZNSs4rendEv+0x30>
 1006f38:	1006d8c0 	call	1006d8c <_ZNSs12_M_leak_hardEv>
 1006f3c:	80c00017 	ldw	r3,0(r16)
 1006f40:	8805883a 	mov	r2,r17
 1006f44:	88c00015 	stw	r3,0(r17)
 1006f48:	dfc00217 	ldw	ra,8(sp)
 1006f4c:	dc400117 	ldw	r17,4(sp)
 1006f50:	dc000017 	ldw	r16,0(sp)
 1006f54:	dec00304 	addi	sp,sp,12
 1006f58:	f800283a 	ret

01006f5c <_ZNSs6rbeginEv>:
 1006f5c:	defffd04 	addi	sp,sp,-12
 1006f60:	dc000015 	stw	r16,0(sp)
 1006f64:	2821883a 	mov	r16,r5
 1006f68:	29400017 	ldw	r5,0(r5)
 1006f6c:	dc400115 	stw	r17,4(sp)
 1006f70:	dfc00215 	stw	ra,8(sp)
 1006f74:	28bfff17 	ldw	r2,-4(r5)
 1006f78:	2023883a 	mov	r17,r4
 1006f7c:	8009883a 	mov	r4,r16
 1006f80:	10000216 	blt	r2,zero,1006f8c <_ZNSs6rbeginEv+0x30>
 1006f84:	1006d8c0 	call	1006d8c <_ZNSs12_M_leak_hardEv>
 1006f88:	81400017 	ldw	r5,0(r16)
 1006f8c:	28fffd17 	ldw	r3,-12(r5)
 1006f90:	8805883a 	mov	r2,r17
 1006f94:	28c7883a 	add	r3,r5,r3
 1006f98:	88c00015 	stw	r3,0(r17)
 1006f9c:	dfc00217 	ldw	ra,8(sp)
 1006fa0:	dc400117 	ldw	r17,4(sp)
 1006fa4:	dc000017 	ldw	r16,0(sp)
 1006fa8:	dec00304 	addi	sp,sp,12
 1006fac:	f800283a 	ret

01006fb0 <_ZNSs6resizeEmc>:
 1006fb0:	20c00017 	ldw	r3,0(r4)
 1006fb4:	deffff04 	addi	sp,sp,-4
 1006fb8:	00900034 	movhi	r2,16384
 1006fbc:	10bfff04 	addi	r2,r2,-4
 1006fc0:	3011883a 	mov	r8,r6
 1006fc4:	dfc00015 	stw	ra,0(sp)
 1006fc8:	19bffd17 	ldw	r6,-12(r3)
 1006fcc:	11401136 	bltu	r2,r5,1007014 <_ZNSs6resizeEmc+0x64>
 1006fd0:	31400936 	bltu	r6,r5,1006ff8 <_ZNSs6resizeEmc+0x48>
 1006fd4:	29800336 	bltu	r5,r6,1006fe4 <_ZNSs6resizeEmc+0x34>
 1006fd8:	dfc00017 	ldw	ra,0(sp)
 1006fdc:	dec00104 	addi	sp,sp,4
 1006fe0:	f800283a 	ret
 1006fe4:	314dc83a 	sub	r6,r6,r5
 1006fe8:	000f883a 	mov	r7,zero
 1006fec:	dfc00017 	ldw	ra,0(sp)
 1006ff0:	dec00104 	addi	sp,sp,4
 1006ff4:	10063041 	jmpi	1006304 <_ZNSs9_M_mutateEmmm>
 1006ff8:	298bc83a 	sub	r5,r5,r6
 1006ffc:	41803fcc 	andi	r6,r8,255
 1007000:	3180201c 	xori	r6,r6,128
 1007004:	31bfe004 	addi	r6,r6,-128
 1007008:	dfc00017 	ldw	ra,0(sp)
 100700c:	dec00104 	addi	sp,sp,4
 1007010:	1005cec1 	jmpi	1005cec <_ZNSs6appendEmc>
 1007014:	010040b4 	movhi	r4,258
 1007018:	213c6704 	addi	r4,r4,-3684
 100701c:	10025440 	call	1002544 <_ZSt20__throw_length_errorPKc>

01007020 <_ZNSs6resizeEm>:
 1007020:	000d883a 	mov	r6,zero
 1007024:	1006fb01 	jmpi	1006fb0 <_ZNSs6resizeEmc>

01007028 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_>:
 1007028:	deffe804 	addi	sp,sp,-96
 100702c:	00804074 	movhi	r2,257
 1007030:	10a0ae04 	addi	r2,r2,-32072
 1007034:	00c040b4 	movhi	r3,258
 1007038:	18fb4344 	addi	r3,r3,-4851
 100703c:	d8800715 	stw	r2,28(sp)
 1007040:	d9001115 	stw	r4,68(sp)
 1007044:	00804034 	movhi	r2,256
 1007048:	109c4004 	addi	r2,r2,28928
 100704c:	d9000104 	addi	r4,sp,4
 1007050:	d8c00815 	stw	r3,32(sp)
 1007054:	d9401215 	stw	r5,72(sp)
 1007058:	dfc01715 	stw	ra,92(sp)
 100705c:	d8800a15 	stw	r2,40(sp)
 1007060:	d9801315 	stw	r6,76(sp)
 1007064:	df001615 	stw	fp,88(sp)
 1007068:	ddc01515 	stw	r23,84(sp)
 100706c:	dec00915 	stw	sp,36(sp)
 1007070:	dec00b15 	stw	sp,44(sp)
 1007074:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1007078:	d9001217 	ldw	r4,72(sp)
 100707c:	100a5dc0 	call	100a5dc <strlen>
 1007080:	00c040b4 	movhi	r3,258
 1007084:	18dbcf04 	addi	r3,r3,28476
 1007088:	d8801415 	stw	r2,80(sp)
 100708c:	18800304 	addi	r2,r3,12
 1007090:	d8c01117 	ldw	r3,68(sp)
 1007094:	d9001117 	ldw	r4,68(sp)
 1007098:	18800015 	stw	r2,0(r3)
 100709c:	d8801317 	ldw	r2,76(sp)
 10070a0:	10c00017 	ldw	r3,0(r2)
 10070a4:	d8801117 	ldw	r2,68(sp)
 10070a8:	197ffd17 	ldw	r5,-12(r3)
 10070ac:	d8c01417 	ldw	r3,80(sp)
 10070b0:	d8800f15 	stw	r2,60(sp)
 10070b4:	00800084 	movi	r2,2
 10070b8:	d8800215 	stw	r2,8(sp)
 10070bc:	194b883a 	add	r5,r3,r5
 10070c0:	1005b3c0 	call	1005b3c <_ZNSs7reserveEm>
 10070c4:	d9001117 	ldw	r4,68(sp)
 10070c8:	d9401217 	ldw	r5,72(sp)
 10070cc:	d9801417 	ldw	r6,80(sp)
 10070d0:	1005dcc0 	call	1005dcc <_ZNSs6appendEPKcm>
 10070d4:	d9001117 	ldw	r4,68(sp)
 10070d8:	d9401317 	ldw	r5,76(sp)
 10070dc:	10060400 	call	1006040 <_ZNSs6appendERKSs>
 10070e0:	d9000104 	addi	r4,sp,4
 10070e4:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 10070e8:	d8801117 	ldw	r2,68(sp)
 10070ec:	dfc01717 	ldw	ra,92(sp)
 10070f0:	df001617 	ldw	fp,88(sp)
 10070f4:	ddc01517 	ldw	r23,84(sp)
 10070f8:	dec01804 	addi	sp,sp,96
 10070fc:	f800283a 	ret
 1007100:	d8c00217 	ldw	r3,8(sp)
 1007104:	00800044 	movi	r2,1
 1007108:	d9000317 	ldw	r4,12(sp)
 100710c:	18800326 	beq	r3,r2,100711c <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0xf4>
 1007110:	00bfffc4 	movi	r2,-1
 1007114:	d8800215 	stw	r2,8(sp)
 1007118:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 100711c:	d8c00f17 	ldw	r3,60(sp)
 1007120:	d9001015 	stw	r4,64(sp)
 1007124:	18800017 	ldw	r2,0(r3)
 1007128:	00c040b4 	movhi	r3,258
 100712c:	18dbcf04 	addi	r3,r3,28476
 1007130:	10bffd04 	addi	r2,r2,-12
 1007134:	d8800e15 	stw	r2,56(sp)
 1007138:	1880041e 	bne	r3,r2,100714c <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x124>
 100713c:	d9001017 	ldw	r4,64(sp)
 1007140:	00bfffc4 	movi	r2,-1
 1007144:	d8800215 	stw	r2,8(sp)
 1007148:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 100714c:	00800044 	movi	r2,1
 1007150:	d8800215 	stw	r2,8(sp)
 1007154:	d8800e17 	ldw	r2,56(sp)
 1007158:	017fffc4 	movi	r5,-1
 100715c:	11000204 	addi	r4,r2,8
 1007160:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007164:	00bff516 	blt	zero,r2,100713c <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x114>
 1007168:	d9000e17 	ldw	r4,56(sp)
 100716c:	d80b883a 	mov	r5,sp
 1007170:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007174:	003ff106 	br	100713c <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x114>

01007178 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>:
 1007178:	deffe904 	addi	sp,sp,-92
 100717c:	00804074 	movhi	r2,257
 1007180:	10a0ae04 	addi	r2,r2,-32072
 1007184:	00c040b4 	movhi	r3,258
 1007188:	18fb4544 	addi	r3,r3,-4843
 100718c:	d8800715 	stw	r2,28(sp)
 1007190:	d9001115 	stw	r4,68(sp)
 1007194:	00804034 	movhi	r2,256
 1007198:	109c8604 	addi	r2,r2,29208
 100719c:	d9000104 	addi	r4,sp,4
 10071a0:	dfc01615 	stw	ra,88(sp)
 10071a4:	d8c00815 	stw	r3,32(sp)
 10071a8:	d8800a15 	stw	r2,40(sp)
 10071ac:	d9801315 	stw	r6,76(sp)
 10071b0:	d9401215 	stw	r5,72(sp)
 10071b4:	df001515 	stw	fp,84(sp)
 10071b8:	ddc01415 	stw	r23,80(sp)
 10071bc:	dec00915 	stw	sp,36(sp)
 10071c0:	dec00b15 	stw	sp,44(sp)
 10071c4:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 10071c8:	d9401217 	ldw	r5,72(sp)
 10071cc:	d9001117 	ldw	r4,68(sp)
 10071d0:	00bfffc4 	movi	r2,-1
 10071d4:	d8800215 	stw	r2,8(sp)
 10071d8:	10057cc0 	call	10057cc <_ZNSsC1ERKSs>
 10071dc:	00800084 	movi	r2,2
 10071e0:	d8800215 	stw	r2,8(sp)
 10071e4:	d8801117 	ldw	r2,68(sp)
 10071e8:	d9401317 	ldw	r5,76(sp)
 10071ec:	d8801015 	stw	r2,64(sp)
 10071f0:	1009883a 	mov	r4,r2
 10071f4:	10060400 	call	1006040 <_ZNSs6appendERKSs>
 10071f8:	d9000104 	addi	r4,sp,4
 10071fc:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1007200:	d8801117 	ldw	r2,68(sp)
 1007204:	dfc01617 	ldw	ra,88(sp)
 1007208:	df001517 	ldw	fp,84(sp)
 100720c:	ddc01417 	ldw	r23,80(sp)
 1007210:	dec01704 	addi	sp,sp,92
 1007214:	f800283a 	ret
 1007218:	d8c00217 	ldw	r3,8(sp)
 100721c:	00800044 	movi	r2,1
 1007220:	d9000317 	ldw	r4,12(sp)
 1007224:	18800326 	beq	r3,r2,1007234 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xbc>
 1007228:	00bfffc4 	movi	r2,-1
 100722c:	d8800215 	stw	r2,8(sp)
 1007230:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1007234:	d8801017 	ldw	r2,64(sp)
 1007238:	d9000f15 	stw	r4,60(sp)
 100723c:	10c00017 	ldw	r3,0(r2)
 1007240:	008040b4 	movhi	r2,258
 1007244:	109bcf04 	addi	r2,r2,28476
 1007248:	18fffd04 	addi	r3,r3,-12
 100724c:	d8c00e15 	stw	r3,56(sp)
 1007250:	1880041e 	bne	r3,r2,1007264 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xec>
 1007254:	d9000f17 	ldw	r4,60(sp)
 1007258:	00bfffc4 	movi	r2,-1
 100725c:	d8800215 	stw	r2,8(sp)
 1007260:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1007264:	00800044 	movi	r2,1
 1007268:	d8800215 	stw	r2,8(sp)
 100726c:	19000204 	addi	r4,r3,8
 1007270:	017fffc4 	movi	r5,-1
 1007274:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007278:	00bff616 	blt	zero,r2,1007254 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xdc>
 100727c:	d9000e17 	ldw	r4,56(sp)
 1007280:	d80b883a 	mov	r5,sp
 1007284:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007288:	003ff206 	br	1007254 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xdc>

0100728c <_ZNSs4swapERSs>:
 100728c:	21c00017 	ldw	r7,0(r4)
 1007290:	38fffd04 	addi	r3,r7,-12
 1007294:	18800217 	ldw	r2,8(r3)
 1007298:	1000010e 	bge	r2,zero,10072a0 <_ZNSs4swapERSs+0x14>
 100729c:	18000215 	stw	zero,8(r3)
 10072a0:	29800017 	ldw	r6,0(r5)
 10072a4:	30fffd04 	addi	r3,r6,-12
 10072a8:	18800217 	ldw	r2,8(r3)
 10072ac:	1000010e 	bge	r2,zero,10072b4 <_ZNSs4swapERSs+0x28>
 10072b0:	18000215 	stw	zero,8(r3)
 10072b4:	21800015 	stw	r6,0(r4)
 10072b8:	29c00015 	stw	r7,0(r5)
 10072bc:	f800283a 	ret

010072c0 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_>:
 10072c0:	deffe904 	addi	sp,sp,-92
 10072c4:	00804074 	movhi	r2,257
 10072c8:	10a0ae04 	addi	r2,r2,-32072
 10072cc:	00c040b4 	movhi	r3,258
 10072d0:	18fb4744 	addi	r3,r3,-4835
 10072d4:	d8800715 	stw	r2,28(sp)
 10072d8:	d9001115 	stw	r4,68(sp)
 10072dc:	00804034 	movhi	r2,256
 10072e0:	109ce504 	addi	r2,r2,29588
 10072e4:	d9000104 	addi	r4,sp,4
 10072e8:	d8c00815 	stw	r3,32(sp)
 10072ec:	d8800a15 	stw	r2,40(sp)
 10072f0:	d9401205 	stb	r5,72(sp)
 10072f4:	dfc01615 	stw	ra,88(sp)
 10072f8:	df001515 	stw	fp,84(sp)
 10072fc:	ddc01415 	stw	r23,80(sp)
 1007300:	dec00915 	stw	sp,36(sp)
 1007304:	dec00b15 	stw	sp,44(sp)
 1007308:	d9801315 	stw	r6,76(sp)
 100730c:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1007310:	00c040b4 	movhi	r3,258
 1007314:	18dbcf04 	addi	r3,r3,28476
 1007318:	18800304 	addi	r2,r3,12
 100731c:	d8c01117 	ldw	r3,68(sp)
 1007320:	18800015 	stw	r2,0(r3)
 1007324:	d8801317 	ldw	r2,76(sp)
 1007328:	10c00017 	ldw	r3,0(r2)
 100732c:	00800084 	movi	r2,2
 1007330:	197ffd17 	ldw	r5,-12(r3)
 1007334:	d8c01117 	ldw	r3,68(sp)
 1007338:	d8800215 	stw	r2,8(sp)
 100733c:	29400044 	addi	r5,r5,1
 1007340:	d8c00f15 	stw	r3,60(sp)
 1007344:	1809883a 	mov	r4,r3
 1007348:	1005b3c0 	call	1005b3c <_ZNSs7reserveEm>
 100734c:	d8801203 	ldbu	r2,72(sp)
 1007350:	d9001117 	ldw	r4,68(sp)
 1007354:	01400044 	movi	r5,1
 1007358:	11803fcc 	andi	r6,r2,255
 100735c:	3180201c 	xori	r6,r6,128
 1007360:	31bfe004 	addi	r6,r6,-128
 1007364:	1005cec0 	call	1005cec <_ZNSs6appendEmc>
 1007368:	d9001117 	ldw	r4,68(sp)
 100736c:	d9401317 	ldw	r5,76(sp)
 1007370:	10060400 	call	1006040 <_ZNSs6appendERKSs>
 1007374:	d9000104 	addi	r4,sp,4
 1007378:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 100737c:	d8801117 	ldw	r2,68(sp)
 1007380:	dfc01617 	ldw	ra,88(sp)
 1007384:	df001517 	ldw	fp,84(sp)
 1007388:	ddc01417 	ldw	r23,80(sp)
 100738c:	dec01704 	addi	sp,sp,92
 1007390:	f800283a 	ret
 1007394:	d8c00217 	ldw	r3,8(sp)
 1007398:	00800044 	movi	r2,1
 100739c:	d9000317 	ldw	r4,12(sp)
 10073a0:	18800326 	beq	r3,r2,10073b0 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0xf0>
 10073a4:	00bfffc4 	movi	r2,-1
 10073a8:	d8800215 	stw	r2,8(sp)
 10073ac:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 10073b0:	d8c00f17 	ldw	r3,60(sp)
 10073b4:	d9001015 	stw	r4,64(sp)
 10073b8:	18800017 	ldw	r2,0(r3)
 10073bc:	00c040b4 	movhi	r3,258
 10073c0:	18dbcf04 	addi	r3,r3,28476
 10073c4:	10bffd04 	addi	r2,r2,-12
 10073c8:	d8800e15 	stw	r2,56(sp)
 10073cc:	1880041e 	bne	r3,r2,10073e0 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x120>
 10073d0:	d9001017 	ldw	r4,64(sp)
 10073d4:	00bfffc4 	movi	r2,-1
 10073d8:	d8800215 	stw	r2,8(sp)
 10073dc:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 10073e0:	00800044 	movi	r2,1
 10073e4:	d8800215 	stw	r2,8(sp)
 10073e8:	d8800e17 	ldw	r2,56(sp)
 10073ec:	017fffc4 	movi	r5,-1
 10073f0:	11000204 	addi	r4,r2,8
 10073f4:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10073f8:	00bff516 	blt	zero,r2,10073d0 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x110>
 10073fc:	d9000e17 	ldw	r4,56(sp)
 1007400:	d80b883a 	mov	r5,sp
 1007404:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007408:	003ff106 	br	10073d0 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x110>

0100740c <_ZNSs7replaceEmmPKcm>:
 100740c:	deffe304 	addi	sp,sp,-116
 1007410:	00804034 	movhi	r2,256
 1007414:	109d9c04 	addi	r2,r2,30320
 1007418:	d8800c15 	stw	r2,48(sp)
 100741c:	d8800104 	addi	r2,sp,4
 1007420:	00c040b4 	movhi	r3,258
 1007424:	18fb4944 	addi	r3,r3,-4827
 1007428:	d9001615 	stw	r4,88(sp)
 100742c:	d8800b15 	stw	r2,44(sp)
 1007430:	d9000304 	addi	r4,sp,12
 1007434:	00804074 	movhi	r2,257
 1007438:	10a0ae04 	addi	r2,r2,-32072
 100743c:	d8c00a15 	stw	r3,40(sp)
 1007440:	d9401715 	stw	r5,92(sp)
 1007444:	d9801815 	stw	r6,96(sp)
 1007448:	d9c01915 	stw	r7,100(sp)
 100744c:	dfc01c15 	stw	ra,112(sp)
 1007450:	df001b15 	stw	fp,108(sp)
 1007454:	ddc01a15 	stw	r23,104(sp)
 1007458:	dec00d15 	stw	sp,52(sp)
 100745c:	d8800915 	stw	r2,36(sp)
 1007460:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1007464:	d8c01617 	ldw	r3,88(sp)
 1007468:	d9801717 	ldw	r6,92(sp)
 100746c:	19400017 	ldw	r5,0(r3)
 1007470:	29fffd04 	addi	r7,r5,-12
 1007474:	39000017 	ldw	r4,0(r7)
 1007478:	21807336 	bltu	r4,r6,1007648 <_ZNSs7replaceEmmPKcm+0x23c>
 100747c:	d8c01717 	ldw	r3,92(sp)
 1007480:	d8801817 	ldw	r2,96(sp)
 1007484:	20cdc83a 	sub	r6,r4,r3
 1007488:	d8801015 	stw	r2,64(sp)
 100748c:	30801b36 	bltu	r6,r2,10074fc <_ZNSs7replaceEmmPKcm+0xf0>
 1007490:	d9801017 	ldw	r6,64(sp)
 1007494:	00900034 	movhi	r2,16384
 1007498:	10bfff04 	addi	r2,r2,-4
 100749c:	2187c83a 	sub	r3,r4,r6
 10074a0:	10c5c83a 	sub	r2,r2,r3
 10074a4:	d8c01d17 	ldw	r3,116(sp)
 10074a8:	10c06c36 	bltu	r2,r3,100765c <_ZNSs7replaceEmmPKcm+0x250>
 10074ac:	d9801917 	ldw	r6,100(sp)
 10074b0:	3140142e 	bgeu	r6,r5,1007504 <_ZNSs7replaceEmmPKcm+0xf8>
 10074b4:	d8801d17 	ldw	r2,116(sp)
 10074b8:	d9001617 	ldw	r4,88(sp)
 10074bc:	d9401717 	ldw	r5,92(sp)
 10074c0:	d9801017 	ldw	r6,64(sp)
 10074c4:	d9c01917 	ldw	r7,100(sp)
 10074c8:	d8800015 	stw	r2,0(sp)
 10074cc:	00bfffc4 	movi	r2,-1
 10074d0:	d8800415 	stw	r2,16(sp)
 10074d4:	100653c0 	call	100653c <_ZNSs15_M_replace_safeEmmPKcm>
 10074d8:	d8801615 	stw	r2,88(sp)
 10074dc:	d9000304 	addi	r4,sp,12
 10074e0:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 10074e4:	d8801617 	ldw	r2,88(sp)
 10074e8:	dfc01c17 	ldw	ra,112(sp)
 10074ec:	df001b17 	ldw	fp,108(sp)
 10074f0:	ddc01a17 	ldw	r23,104(sp)
 10074f4:	dec01d04 	addi	sp,sp,116
 10074f8:	f800283a 	ret
 10074fc:	d9801015 	stw	r6,64(sp)
 1007500:	003fe306 	br	1007490 <_ZNSs7replaceEmmPKcm+0x84>
 1007504:	2905883a 	add	r2,r5,r4
 1007508:	11bfea36 	bltu	r2,r6,10074b4 <_ZNSs7replaceEmmPKcm+0xa8>
 100750c:	38800217 	ldw	r2,8(r7)
 1007510:	00bfe816 	blt	zero,r2,10074b4 <_ZNSs7replaceEmmPKcm+0xa8>
 1007514:	d8801717 	ldw	r2,92(sp)
 1007518:	d9001917 	ldw	r4,100(sp)
 100751c:	d9801d17 	ldw	r6,116(sp)
 1007520:	d8801515 	stw	r2,84(sp)
 1007524:	2887883a 	add	r3,r5,r2
 1007528:	2185883a 	add	r2,r4,r6
 100752c:	18801636 	bltu	r3,r2,1007588 <_ZNSs7replaceEmmPKcm+0x17c>
 1007530:	d8c01917 	ldw	r3,100(sp)
 1007534:	194bc83a 	sub	r5,r3,r5
 1007538:	d9401415 	stw	r5,80(sp)
 100753c:	d9401717 	ldw	r5,92(sp)
 1007540:	d9801017 	ldw	r6,64(sp)
 1007544:	d9001617 	ldw	r4,88(sp)
 1007548:	d9c01d17 	ldw	r7,116(sp)
 100754c:	00bfffc4 	movi	r2,-1
 1007550:	d8800415 	stw	r2,16(sp)
 1007554:	10063040 	call	1006304 <_ZNSs9_M_mutateEmmm>
 1007558:	d9801617 	ldw	r6,88(sp)
 100755c:	d8801417 	ldw	r2,80(sp)
 1007560:	30c00017 	ldw	r3,0(r6)
 1007564:	d9801517 	ldw	r6,84(sp)
 1007568:	188b883a 	add	r5,r3,r2
 100756c:	30c9883a 	add	r4,r6,r3
 1007570:	d8c01d17 	ldw	r3,116(sp)
 1007574:	00800044 	movi	r2,1
 1007578:	18800d1e 	bne	r3,r2,10075b0 <_ZNSs7replaceEmmPKcm+0x1a4>
 100757c:	28800003 	ldbu	r2,0(r5)
 1007580:	20800005 	stb	r2,0(r4)
 1007584:	003fd506 	br	10074dc <_ZNSs7replaceEmmPKcm+0xd0>
 1007588:	d9001017 	ldw	r4,64(sp)
 100758c:	d9801917 	ldw	r6,100(sp)
 1007590:	1905883a 	add	r2,r3,r4
 1007594:	30800936 	bltu	r6,r2,10075bc <_ZNSs7replaceEmmPKcm+0x1b0>
 1007598:	3147c83a 	sub	r3,r6,r5
 100759c:	d9401d17 	ldw	r5,116(sp)
 10075a0:	2905c83a 	sub	r2,r5,r4
 10075a4:	1887883a 	add	r3,r3,r2
 10075a8:	d8c01415 	stw	r3,80(sp)
 10075ac:	003fe306 	br	100753c <_ZNSs7replaceEmmPKcm+0x130>
 10075b0:	d9801d17 	ldw	r6,116(sp)
 10075b4:	1009f8c0 	call	1009f8c <memcpy>
 10075b8:	003fc806 	br	10074dc <_ZNSs7replaceEmmPKcm+0xd0>
 10075bc:	01000104 	movi	r4,4
 10075c0:	d905883a 	add	r2,sp,r4
 10075c4:	d9000415 	stw	r4,16(sp)
 10075c8:	d9401917 	ldw	r5,100(sp)
 10075cc:	1109883a 	add	r4,r2,r4
 10075d0:	d9801d17 	ldw	r6,116(sp)
 10075d4:	d9c00184 	addi	r7,sp,6
 10075d8:	10055340 	call	1005534 <_ZNSsC1EPKcmRKSaIcE>
 10075dc:	d9001d17 	ldw	r4,116(sp)
 10075e0:	008000c4 	movi	r2,3
 10075e4:	d9c00217 	ldw	r7,8(sp)
 10075e8:	d9000015 	stw	r4,0(sp)
 10075ec:	d8800415 	stw	r2,16(sp)
 10075f0:	d9001617 	ldw	r4,88(sp)
 10075f4:	d9401717 	ldw	r5,92(sp)
 10075f8:	d9801017 	ldw	r6,64(sp)
 10075fc:	100653c0 	call	100653c <_ZNSs15_M_replace_safeEmmPKcm>
 1007600:	d8801615 	stw	r2,88(sp)
 1007604:	d8800217 	ldw	r2,8(sp)
 1007608:	00c040b4 	movhi	r3,258
 100760c:	18dbcf04 	addi	r3,r3,28476
 1007610:	10bffd04 	addi	r2,r2,-12
 1007614:	d8801215 	stw	r2,72(sp)
 1007618:	10ffb026 	beq	r2,r3,10074dc <_ZNSs7replaceEmmPKcm+0xd0>
 100761c:	d9401217 	ldw	r5,72(sp)
 1007620:	00800084 	movi	r2,2
 1007624:	d8800415 	stw	r2,16(sp)
 1007628:	29000204 	addi	r4,r5,8
 100762c:	017fffc4 	movi	r5,-1
 1007630:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007634:	00bfa916 	blt	zero,r2,10074dc <_ZNSs7replaceEmmPKcm+0xd0>
 1007638:	d9001217 	ldw	r4,72(sp)
 100763c:	d9400144 	addi	r5,sp,5
 1007640:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007644:	003fa506 	br	10074dc <_ZNSs7replaceEmmPKcm+0xd0>
 1007648:	00bfffc4 	movi	r2,-1
 100764c:	010040b4 	movhi	r4,258
 1007650:	213c5604 	addi	r4,r4,-3752
 1007654:	d8800415 	stw	r2,16(sp)
 1007658:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>
 100765c:	00bfffc4 	movi	r2,-1
 1007660:	010040b4 	movhi	r4,258
 1007664:	213c5604 	addi	r4,r4,-3752
 1007668:	d8800415 	stw	r2,16(sp)
 100766c:	10025440 	call	1002544 <_ZSt20__throw_length_errorPKc>
 1007670:	d8c00417 	ldw	r3,16(sp)
 1007674:	00800044 	movi	r2,1
 1007678:	d9000517 	ldw	r4,20(sp)
 100767c:	18800226 	beq	r3,r2,1007688 <_ZNSs7replaceEmmPKcm+0x27c>
 1007680:	00800084 	movi	r2,2
 1007684:	18800326 	beq	r3,r2,1007694 <_ZNSs7replaceEmmPKcm+0x288>
 1007688:	00bfffc4 	movi	r2,-1
 100768c:	d8800415 	stw	r2,16(sp)
 1007690:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1007694:	d8800217 	ldw	r2,8(sp)
 1007698:	00c040b4 	movhi	r3,258
 100769c:	18dbcf04 	addi	r3,r3,28476
 10076a0:	d9001315 	stw	r4,76(sp)
 10076a4:	10bffd04 	addi	r2,r2,-12
 10076a8:	d8801115 	stw	r2,68(sp)
 10076ac:	10c0041e 	bne	r2,r3,10076c0 <_ZNSs7replaceEmmPKcm+0x2b4>
 10076b0:	d9001317 	ldw	r4,76(sp)
 10076b4:	00bfffc4 	movi	r2,-1
 10076b8:	d8800415 	stw	r2,16(sp)
 10076bc:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 10076c0:	d9801117 	ldw	r6,68(sp)
 10076c4:	00800044 	movi	r2,1
 10076c8:	d8800415 	stw	r2,16(sp)
 10076cc:	31000204 	addi	r4,r6,8
 10076d0:	017fffc4 	movi	r5,-1
 10076d4:	10078e40 	call	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10076d8:	00bff516 	blt	zero,r2,10076b0 <_ZNSs7replaceEmmPKcm+0x2a4>
 10076dc:	d9001117 	ldw	r4,68(sp)
 10076e0:	d9400104 	addi	r5,sp,4
 10076e4:	10043740 	call	1004374 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10076e8:	003ff106 	br	10076b0 <_ZNSs7replaceEmmPKcm+0x2a4>

010076ec <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_>:
 10076ec:	d8800017 	ldw	r2,0(sp)
 10076f0:	20c00017 	ldw	r3,0(r4)
 10076f4:	314dc83a 	sub	r6,r6,r5
 10076f8:	11c5c83a 	sub	r2,r2,r7
 10076fc:	28cbc83a 	sub	r5,r5,r3
 1007700:	d8800015 	stw	r2,0(sp)
 1007704:	100740c1 	jmpi	100740c <_ZNSs7replaceEmmPKcm>

01007708 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_>:
 1007708:	d8800017 	ldw	r2,0(sp)
 100770c:	20c00017 	ldw	r3,0(r4)
 1007710:	314dc83a 	sub	r6,r6,r5
 1007714:	11c5c83a 	sub	r2,r2,r7
 1007718:	28cbc83a 	sub	r5,r5,r3
 100771c:	d8800015 	stw	r2,0(sp)
 1007720:	100740c1 	jmpi	100740c <_ZNSs7replaceEmmPKcm>

01007724 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_>:
 1007724:	d8800017 	ldw	r2,0(sp)
 1007728:	20c00017 	ldw	r3,0(r4)
 100772c:	314dc83a 	sub	r6,r6,r5
 1007730:	11c5c83a 	sub	r2,r2,r7
 1007734:	28cbc83a 	sub	r5,r5,r3
 1007738:	d8800015 	stw	r2,0(sp)
 100773c:	100740c1 	jmpi	100740c <_ZNSs7replaceEmmPKcm>

01007740 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_>:
 1007740:	d8800017 	ldw	r2,0(sp)
 1007744:	20c00017 	ldw	r3,0(r4)
 1007748:	314dc83a 	sub	r6,r6,r5
 100774c:	11c5c83a 	sub	r2,r2,r7
 1007750:	28cbc83a 	sub	r5,r5,r3
 1007754:	d8800015 	stw	r2,0(sp)
 1007758:	100740c1 	jmpi	100740c <_ZNSs7replaceEmmPKcm>

0100775c <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcm>:
 100775c:	20800017 	ldw	r2,0(r4)
 1007760:	314dc83a 	sub	r6,r6,r5
 1007764:	288bc83a 	sub	r5,r5,r2
 1007768:	100740c1 	jmpi	100740c <_ZNSs7replaceEmmPKcm>

0100776c <_ZNSs7replaceEmmPKc>:
 100776c:	defffa04 	addi	sp,sp,-24
 1007770:	dfc00515 	stw	ra,20(sp)
 1007774:	ddc00415 	stw	r23,16(sp)
 1007778:	dd400315 	stw	r21,12(sp)
 100777c:	dcc00215 	stw	r19,8(sp)
 1007780:	dc400115 	stw	r17,4(sp)
 1007784:	202f883a 	mov	r23,r4
 1007788:	3809883a 	mov	r4,r7
 100778c:	382b883a 	mov	r21,r7
 1007790:	2823883a 	mov	r17,r5
 1007794:	3027883a 	mov	r19,r6
 1007798:	100a5dc0 	call	100a5dc <strlen>
 100779c:	880b883a 	mov	r5,r17
 10077a0:	b809883a 	mov	r4,r23
 10077a4:	980d883a 	mov	r6,r19
 10077a8:	a80f883a 	mov	r7,r21
 10077ac:	d8800015 	stw	r2,0(sp)
 10077b0:	100740c0 	call	100740c <_ZNSs7replaceEmmPKcm>
 10077b4:	dfc00517 	ldw	ra,20(sp)
 10077b8:	ddc00417 	ldw	r23,16(sp)
 10077bc:	dd400317 	ldw	r21,12(sp)
 10077c0:	dcc00217 	ldw	r19,8(sp)
 10077c4:	dc400117 	ldw	r17,4(sp)
 10077c8:	dec00604 	addi	sp,sp,24
 10077cc:	f800283a 	ret

010077d0 <_ZNSs7replaceEmmRKSsmm>:
 10077d0:	3a400017 	ldw	r9,0(r7)
 10077d4:	deffff04 	addi	sp,sp,-4
 10077d8:	d9c00117 	ldw	r7,4(sp)
 10077dc:	48bffd17 	ldw	r2,-12(r9)
 10077e0:	dfc00015 	stw	ra,0(sp)
 10077e4:	da000217 	ldw	r8,8(sp)
 10077e8:	11c00d36 	bltu	r2,r7,1007820 <_ZNSs7replaceEmmRKSsmm+0x50>
 10077ec:	11c7c83a 	sub	r3,r2,r7
 10077f0:	4005883a 	mov	r2,r8
 10077f4:	49cf883a 	add	r7,r9,r7
 10077f8:	1a000436 	bltu	r3,r8,100780c <_ZNSs7replaceEmmRKSsmm+0x3c>
 10077fc:	d8800115 	stw	r2,4(sp)
 1007800:	dfc00017 	ldw	ra,0(sp)
 1007804:	dec00104 	addi	sp,sp,4
 1007808:	100740c1 	jmpi	100740c <_ZNSs7replaceEmmPKcm>
 100780c:	1805883a 	mov	r2,r3
 1007810:	d8800115 	stw	r2,4(sp)
 1007814:	dfc00017 	ldw	ra,0(sp)
 1007818:	dec00104 	addi	sp,sp,4
 100781c:	100740c1 	jmpi	100740c <_ZNSs7replaceEmmPKcm>
 1007820:	010040b4 	movhi	r4,258
 1007824:	213c5604 	addi	r4,r4,-3752
 1007828:	10023b40 	call	10023b4 <_ZSt20__throw_out_of_rangePKc>

0100782c <_ZNSs7replaceEmmRKSs>:
 100782c:	39c00017 	ldw	r7,0(r7)
 1007830:	defffe04 	addi	sp,sp,-8
 1007834:	dfc00115 	stw	ra,4(sp)
 1007838:	38bffd17 	ldw	r2,-12(r7)
 100783c:	d8800015 	stw	r2,0(sp)
 1007840:	100740c0 	call	100740c <_ZNSs7replaceEmmPKcm>
 1007844:	dfc00117 	ldw	ra,4(sp)
 1007848:	dec00204 	addi	sp,sp,8
 100784c:	f800283a 	ret

01007850 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs>:
 1007850:	39c00017 	ldw	r7,0(r7)
 1007854:	20800017 	ldw	r2,0(r4)
 1007858:	defffe04 	addi	sp,sp,-8
 100785c:	38fffd17 	ldw	r3,-12(r7)
 1007860:	314dc83a 	sub	r6,r6,r5
 1007864:	288bc83a 	sub	r5,r5,r2
 1007868:	dfc00115 	stw	ra,4(sp)
 100786c:	d8c00015 	stw	r3,0(sp)
 1007870:	100740c0 	call	100740c <_ZNSs7replaceEmmPKcm>
 1007874:	dfc00117 	ldw	ra,4(sp)
 1007878:	dec00204 	addi	sp,sp,8
 100787c:	f800283a 	ret

01007880 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc>:
 1007880:	20800017 	ldw	r2,0(r4)
 1007884:	defffa04 	addi	sp,sp,-24
 1007888:	dc400215 	stw	r17,8(sp)
 100788c:	3163c83a 	sub	r17,r6,r5
 1007890:	288bc83a 	sub	r5,r5,r2
 1007894:	dfc00515 	stw	ra,20(sp)
 1007898:	dd400415 	stw	r21,16(sp)
 100789c:	dcc00315 	stw	r19,12(sp)
 10078a0:	d9400115 	stw	r5,4(sp)
 10078a4:	2027883a 	mov	r19,r4
 10078a8:	3809883a 	mov	r4,r7
 10078ac:	382b883a 	mov	r21,r7
 10078b0:	100a5dc0 	call	100a5dc <strlen>
 10078b4:	d9400117 	ldw	r5,4(sp)
 10078b8:	9809883a 	mov	r4,r19
 10078bc:	880d883a 	mov	r6,r17
 10078c0:	a80f883a 	mov	r7,r21
 10078c4:	d8800015 	stw	r2,0(sp)
 10078c8:	100740c0 	call	100740c <_ZNSs7replaceEmmPKcm>
 10078cc:	dfc00517 	ldw	ra,20(sp)
 10078d0:	dd400417 	ldw	r21,16(sp)
 10078d4:	dcc00317 	ldw	r19,12(sp)
 10078d8:	dc400217 	ldw	r17,8(sp)
 10078dc:	dec00604 	addi	sp,sp,24
 10078e0:	f800283a 	ret

010078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>:
 10078e4:	20800017 	ldw	r2,0(r4)
 10078e8:	20c00017 	ldw	r3,0(r4)
 10078ec:	1947883a 	add	r3,r3,r5
 10078f0:	20c00015 	stw	r3,0(r4)
 10078f4:	f800283a 	ret

010078f8 <_ZN9__gnu_cxx12__atomic_addEPVii>:
 10078f8:	10078e41 	jmpi	10078e4 <_ZN9__gnu_cxx18__exchange_and_addEPVii>

010078fc <_ZNKSt9exception4whatEv>:
 10078fc:	20800017 	ldw	r2,0(r4)
 1007900:	10ffff17 	ldw	r3,-4(r2)
 1007904:	18800117 	ldw	r2,4(r3)
 1007908:	f800283a 	ret

0100790c <_ZNSt9exceptionD0Ev>:
 100790c:	008040b4 	movhi	r2,258
 1007910:	10bc7404 	addi	r2,r2,-3632
 1007914:	20800015 	stw	r2,0(r4)
 1007918:	1008a881 	jmpi	1008a88 <_ZdlPv>

0100791c <_ZNSt9exceptionD1Ev>:
 100791c:	008040b4 	movhi	r2,258
 1007920:	10bc7404 	addi	r2,r2,-3632
 1007924:	20800015 	stw	r2,0(r4)
 1007928:	f800283a 	ret

0100792c <_ZNSt9exceptionD2Ev>:
 100792c:	008040b4 	movhi	r2,258
 1007930:	10bc7404 	addi	r2,r2,-3632
 1007934:	20800015 	stw	r2,0(r4)
 1007938:	f800283a 	ret

0100793c <_ZNSt13bad_exceptionD0Ev>:
 100793c:	defffe04 	addi	sp,sp,-8
 1007940:	008040b4 	movhi	r2,258
 1007944:	10bc6f04 	addi	r2,r2,-3652
 1007948:	dc400015 	stw	r17,0(sp)
 100794c:	20800015 	stw	r2,0(r4)
 1007950:	2023883a 	mov	r17,r4
 1007954:	dfc00115 	stw	ra,4(sp)
 1007958:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 100795c:	8809883a 	mov	r4,r17
 1007960:	dfc00117 	ldw	ra,4(sp)
 1007964:	dc400017 	ldw	r17,0(sp)
 1007968:	dec00204 	addi	sp,sp,8
 100796c:	1008a881 	jmpi	1008a88 <_ZdlPv>

01007970 <_ZNSt13bad_exceptionD1Ev>:
 1007970:	008040b4 	movhi	r2,258
 1007974:	10bc6f04 	addi	r2,r2,-3652
 1007978:	20800015 	stw	r2,0(r4)
 100797c:	100792c1 	jmpi	100792c <_ZNSt9exceptionD2Ev>

01007980 <_ZNSt13bad_exceptionD2Ev>:
 1007980:	008040b4 	movhi	r2,258
 1007984:	10bc6f04 	addi	r2,r2,-3652
 1007988:	20800015 	stw	r2,0(r4)
 100798c:	100792c1 	jmpi	100792c <_ZNSt9exceptionD2Ev>

01007990 <_ZSt15set_new_handlerPFvvE>:
 1007990:	d0a71217 	ldw	r2,-25528(gp)
 1007994:	d1271215 	stw	r4,-25528(gp)
 1007998:	f800283a 	ret

0100799c <_ZNSt9bad_allocD0Ev>:
 100799c:	defffe04 	addi	sp,sp,-8
 10079a0:	008040b4 	movhi	r2,258
 10079a4:	10bc8504 	addi	r2,r2,-3564
 10079a8:	dc400015 	stw	r17,0(sp)
 10079ac:	20800015 	stw	r2,0(r4)
 10079b0:	2023883a 	mov	r17,r4
 10079b4:	dfc00115 	stw	ra,4(sp)
 10079b8:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 10079bc:	8809883a 	mov	r4,r17
 10079c0:	dfc00117 	ldw	ra,4(sp)
 10079c4:	dc400017 	ldw	r17,0(sp)
 10079c8:	dec00204 	addi	sp,sp,8
 10079cc:	1008a881 	jmpi	1008a88 <_ZdlPv>

010079d0 <_ZNSt9bad_allocD1Ev>:
 10079d0:	008040b4 	movhi	r2,258
 10079d4:	10bc8504 	addi	r2,r2,-3564
 10079d8:	20800015 	stw	r2,0(r4)
 10079dc:	100792c1 	jmpi	100792c <_ZNSt9exceptionD2Ev>

010079e0 <_ZNSt9bad_allocD2Ev>:
 10079e0:	008040b4 	movhi	r2,258
 10079e4:	10bc8504 	addi	r2,r2,-3564
 10079e8:	20800015 	stw	r2,0(r4)
 10079ec:	100792c1 	jmpi	100792c <_ZNSt9exceptionD2Ev>

010079f0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 10079f0:	20c00017 	ldw	r3,0(r4)
 10079f4:	defffa04 	addi	sp,sp,-24
 10079f8:	dc000415 	stw	r16,16(sp)
 10079fc:	1a000617 	ldw	r8,24(r3)
 1007a00:	3021883a 	mov	r16,r6
 1007a04:	31800017 	ldw	r6,0(r6)
 1007a08:	00800404 	movi	r2,16
 1007a0c:	dfc00515 	stw	ra,20(sp)
 1007a10:	d8800215 	stw	r2,8(sp)
 1007a14:	d8000015 	stw	zero,0(sp)
 1007a18:	d8000115 	stw	zero,4(sp)
 1007a1c:	d8000315 	stw	zero,12(sp)
 1007a20:	d80f883a 	mov	r7,sp
 1007a24:	403ee83a 	callr	r8
 1007a28:	d8800117 	ldw	r2,4(sp)
 1007a2c:	00c00184 	movi	r3,6
 1007a30:	0009883a 	mov	r4,zero
 1007a34:	1080018c 	andi	r2,r2,6
 1007a38:	10c0031e 	bne	r2,r3,1007a48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
 1007a3c:	d8800017 	ldw	r2,0(sp)
 1007a40:	01000044 	movi	r4,1
 1007a44:	80800015 	stw	r2,0(r16)
 1007a48:	2005883a 	mov	r2,r4
 1007a4c:	dfc00517 	ldw	ra,20(sp)
 1007a50:	dc000417 	ldw	r16,16(sp)
 1007a54:	dec00604 	addi	sp,sp,24
 1007a58:	f800283a 	ret

01007a5c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
 1007a5c:	d8800017 	ldw	r2,0(sp)
 1007a60:	00c00184 	movi	r3,6
 1007a64:	1180021e 	bne	r2,r6,1007a70 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
 1007a68:	1805883a 	mov	r2,r3
 1007a6c:	f800283a 	ret
 1007a70:	00c00044 	movi	r3,1
 1007a74:	1805883a 	mov	r2,r3
 1007a78:	f800283a 	ret

01007a7c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 1007a7c:	defffe04 	addi	sp,sp,-8
 1007a80:	008040b4 	movhi	r2,258
 1007a84:	10bc9104 	addi	r2,r2,-3516
 1007a88:	dc400015 	stw	r17,0(sp)
 1007a8c:	20800015 	stw	r2,0(r4)
 1007a90:	2023883a 	mov	r17,r4
 1007a94:	dfc00115 	stw	ra,4(sp)
 1007a98:	1008e400 	call	1008e40 <_ZNSt9type_infoD2Ev>
 1007a9c:	8809883a 	mov	r4,r17
 1007aa0:	dfc00117 	ldw	ra,4(sp)
 1007aa4:	dc400017 	ldw	r17,0(sp)
 1007aa8:	dec00204 	addi	sp,sp,8
 1007aac:	1008a881 	jmpi	1008a88 <_ZdlPv>

01007ab0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 1007ab0:	008040b4 	movhi	r2,258
 1007ab4:	10bc9104 	addi	r2,r2,-3516
 1007ab8:	20800015 	stw	r2,0(r4)
 1007abc:	1008e401 	jmpi	1008e40 <_ZNSt9type_infoD2Ev>

01007ac0 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
 1007ac0:	008040b4 	movhi	r2,258
 1007ac4:	10bc9104 	addi	r2,r2,-3516
 1007ac8:	20800015 	stw	r2,0(r4)
 1007acc:	1008e401 	jmpi	1008e40 <_ZNSt9type_infoD2Ev>

01007ad0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 1007ad0:	2811883a 	mov	r8,r5
 1007ad4:	20c00117 	ldw	r3,4(r4)
 1007ad8:	40800117 	ldw	r2,4(r8)
 1007adc:	deffff04 	addi	sp,sp,-4
 1007ae0:	dfc00015 	stw	ra,0(sp)
 1007ae4:	200b883a 	mov	r5,r4
 1007ae8:	02400044 	movi	r9,1
 1007aec:	18800426 	beq	r3,r2,1007b00 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
 1007af0:	008000c4 	movi	r2,3
 1007af4:	4009883a 	mov	r4,r8
 1007af8:	0013883a 	mov	r9,zero
 1007afc:	11c0042e 	bgeu	r2,r7,1007b10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
 1007b00:	4805883a 	mov	r2,r9
 1007b04:	dfc00017 	ldw	ra,0(sp)
 1007b08:	dec00104 	addi	sp,sp,4
 1007b0c:	f800283a 	ret
 1007b10:	40800017 	ldw	r2,0(r8)
 1007b14:	10c00517 	ldw	r3,20(r2)
 1007b18:	183ee83a 	callr	r3
 1007b1c:	12403fcc 	andi	r9,r2,255
 1007b20:	4805883a 	mov	r2,r9
 1007b24:	dfc00017 	ldw	ra,0(sp)
 1007b28:	dec00104 	addi	sp,sp,4
 1007b2c:	f800283a 	ret

01007b30 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 1007b30:	20c00117 	ldw	r3,4(r4)
 1007b34:	28800117 	ldw	r2,4(r5)
 1007b38:	0009883a 	mov	r4,zero
 1007b3c:	1880061e 	bne	r3,r2,1007b58 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
 1007b40:	00800184 	movi	r2,6
 1007b44:	38800115 	stw	r2,4(r7)
 1007b48:	00800204 	movi	r2,8
 1007b4c:	39800015 	stw	r6,0(r7)
 1007b50:	38800315 	stw	r2,12(r7)
 1007b54:	01000044 	movi	r4,1
 1007b58:	2005883a 	mov	r2,r4
 1007b5c:	f800283a 	ret

01007b60 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 1007b60:	da000017 	ldw	r8,0(sp)
 1007b64:	d8800217 	ldw	r2,8(sp)
 1007b68:	d9400317 	ldw	r5,12(sp)
 1007b6c:	40800926 	beq	r8,r2,1007b94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 1007b70:	21000117 	ldw	r4,4(r4)
 1007b74:	38800117 	ldw	r2,4(r7)
 1007b78:	2080041e 	bne	r4,r2,1007b8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
 1007b7c:	00800044 	movi	r2,1
 1007b80:	28800315 	stw	r2,12(r5)
 1007b84:	2a000015 	stw	r8,0(r5)
 1007b88:	29800115 	stw	r6,4(r5)
 1007b8c:	0005883a 	mov	r2,zero
 1007b90:	f800283a 	ret
 1007b94:	d8800117 	ldw	r2,4(sp)
 1007b98:	21000117 	ldw	r4,4(r4)
 1007b9c:	10c00117 	ldw	r3,4(r2)
 1007ba0:	20fff41e 	bne	r4,r3,1007b74 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 1007ba4:	29800215 	stw	r6,8(r5)
 1007ba8:	003ff806 	br	1007b8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

01007bac <_Z12read_uleb128PKhPj>:
 1007bac:	000d883a 	mov	r6,zero
 1007bb0:	000f883a 	mov	r7,zero
 1007bb4:	20c00007 	ldb	r3,0(r4)
 1007bb8:	21000044 	addi	r4,r4,1
 1007bbc:	18801fcc 	andi	r2,r3,127
 1007bc0:	1184983a 	sll	r2,r2,r6
 1007bc4:	318001c4 	addi	r6,r6,7
 1007bc8:	388eb03a 	or	r7,r7,r2
 1007bcc:	183ff916 	blt	r3,zero,1007bb4 <_Z12read_uleb128PKhPj+0x8>
 1007bd0:	2005883a 	mov	r2,r4
 1007bd4:	29c00015 	stw	r7,0(r5)
 1007bd8:	f800283a 	ret

01007bdc <_Z12read_sleb128PKhPi>:
 1007bdc:	000f883a 	mov	r7,zero
 1007be0:	0011883a 	mov	r8,zero
 1007be4:	20c00007 	ldb	r3,0(r4)
 1007be8:	21000044 	addi	r4,r4,1
 1007bec:	19803fcc 	andi	r6,r3,255
 1007bf0:	30801fcc 	andi	r2,r6,127
 1007bf4:	11c4983a 	sll	r2,r2,r7
 1007bf8:	39c001c4 	addi	r7,r7,7
 1007bfc:	4090b03a 	or	r8,r8,r2
 1007c00:	183ff816 	blt	r3,zero,1007be4 <_Z12read_sleb128PKhPi+0x8>
 1007c04:	008007c4 	movi	r2,31
 1007c08:	11c00636 	bltu	r2,r7,1007c24 <_Z12read_sleb128PKhPi+0x48>
 1007c0c:	3080100c 	andi	r2,r6,64
 1007c10:	10000426 	beq	r2,zero,1007c24 <_Z12read_sleb128PKhPi+0x48>
 1007c14:	00800044 	movi	r2,1
 1007c18:	11c4983a 	sll	r2,r2,r7
 1007c1c:	0085c83a 	sub	r2,zero,r2
 1007c20:	4090b03a 	or	r8,r8,r2
 1007c24:	2005883a 	mov	r2,r4
 1007c28:	2a000015 	stw	r8,0(r5)
 1007c2c:	f800283a 	ret

01007c30 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
 1007c30:	28800017 	ldw	r2,0(r5)
 1007c34:	defffb04 	addi	sp,sp,-20
 1007c38:	30c00017 	ldw	r3,0(r6)
 1007c3c:	dc400215 	stw	r17,8(sp)
 1007c40:	2823883a 	mov	r17,r5
 1007c44:	11400217 	ldw	r5,8(r2)
 1007c48:	dc800315 	stw	r18,12(sp)
 1007c4c:	dc000115 	stw	r16,4(sp)
 1007c50:	dfc00415 	stw	ra,16(sp)
 1007c54:	2021883a 	mov	r16,r4
 1007c58:	d8c00015 	stw	r3,0(sp)
 1007c5c:	8809883a 	mov	r4,r17
 1007c60:	3025883a 	mov	r18,r6
 1007c64:	283ee83a 	callr	r5
 1007c68:	10803fcc 	andi	r2,r2,255
 1007c6c:	880b883a 	mov	r5,r17
 1007c70:	8009883a 	mov	r4,r16
 1007c74:	d80d883a 	mov	r6,sp
 1007c78:	01c00044 	movi	r7,1
 1007c7c:	10000326 	beq	r2,zero,1007c8c <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
 1007c80:	d8800017 	ldw	r2,0(sp)
 1007c84:	10c00017 	ldw	r3,0(r2)
 1007c88:	d8c00015 	stw	r3,0(sp)
 1007c8c:	80800017 	ldw	r2,0(r16)
 1007c90:	10c00417 	ldw	r3,16(r2)
 1007c94:	183ee83a 	callr	r3
 1007c98:	10803fcc 	andi	r2,r2,255
 1007c9c:	0007883a 	mov	r3,zero
 1007ca0:	10000326 	beq	r2,zero,1007cb0 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
 1007ca4:	d8800017 	ldw	r2,0(sp)
 1007ca8:	00c00044 	movi	r3,1
 1007cac:	90800015 	stw	r2,0(r18)
 1007cb0:	1805883a 	mov	r2,r3
 1007cb4:	dfc00417 	ldw	ra,16(sp)
 1007cb8:	dc800317 	ldw	r18,12(sp)
 1007cbc:	dc400217 	ldw	r17,8(sp)
 1007cc0:	dc000117 	ldw	r16,4(sp)
 1007cc4:	dec00504 	addi	sp,sp,20
 1007cc8:	f800283a 	ret

01007ccc <_Z28read_encoded_value_with_basehjPKhPj>:
 1007ccc:	defff904 	addi	sp,sp,-28
 1007cd0:	dc400215 	stw	r17,8(sp)
 1007cd4:	00801404 	movi	r2,80
 1007cd8:	24403fcc 	andi	r17,r4,255
 1007cdc:	dd000515 	stw	r20,20(sp)
 1007ce0:	dcc00415 	stw	r19,16(sp)
 1007ce4:	dc800315 	stw	r18,12(sp)
 1007ce8:	dc000115 	stw	r16,4(sp)
 1007cec:	dfc00615 	stw	ra,24(sp)
 1007cf0:	2025883a 	mov	r18,r4
 1007cf4:	2829883a 	mov	r20,r5
 1007cf8:	3021883a 	mov	r16,r6
 1007cfc:	3827883a 	mov	r19,r7
 1007d00:	88801826 	beq	r17,r2,1007d64 <_Z28read_encoded_value_with_basehjPKhPj+0x98>
 1007d04:	88c003cc 	andi	r3,r17,15
 1007d08:	00800304 	movi	r2,12
 1007d0c:	10c0012e 	bgeu	r2,r3,1007d14 <_Z28read_encoded_value_with_basehjPKhPj+0x48>
 1007d10:	10096b40 	call	10096b4 <abort>
 1007d14:	18c5883a 	add	r2,r3,r3
 1007d18:	1085883a 	add	r2,r2,r2
 1007d1c:	00c04034 	movhi	r3,256
 1007d20:	18df4c04 	addi	r3,r3,32048
 1007d24:	10c5883a 	add	r2,r2,r3
 1007d28:	11000017 	ldw	r4,0(r2)
 1007d2c:	2000683a 	jmp	r4
 1007d30:	01007da0 	cmpeqi	r4,zero,502
 1007d34:	01007e88 	cmpgei	r4,zero,506
 1007d38:	01007e34 	movhi	r4,504
 1007d3c:	01007da0 	cmpeqi	r4,zero,502
 1007d40:	01007df8 	rdprs	r4,zero,503
 1007d44:	01007d10 	cmplti	r4,zero,500
 1007d48:	01007d10 	cmplti	r4,zero,500
 1007d4c:	01007d10 	cmplti	r4,zero,500
 1007d50:	01007d10 	cmplti	r4,zero,500
 1007d54:	01007e70 	cmpltui	r4,zero,505
 1007d58:	01007e4c 	andi	r4,zero,505
 1007d5c:	01007da0 	cmpeqi	r4,zero,502
 1007d60:	01007df8 	rdprs	r4,zero,503
 1007d64:	308000c4 	addi	r2,r6,3
 1007d68:	00ffff04 	movi	r3,-4
 1007d6c:	10c4703a 	and	r2,r2,r3
 1007d70:	11000017 	ldw	r4,0(r2)
 1007d74:	11400104 	addi	r5,r2,4
 1007d78:	2805883a 	mov	r2,r5
 1007d7c:	99000015 	stw	r4,0(r19)
 1007d80:	dfc00617 	ldw	ra,24(sp)
 1007d84:	dd000517 	ldw	r20,20(sp)
 1007d88:	dcc00417 	ldw	r19,16(sp)
 1007d8c:	dc800317 	ldw	r18,12(sp)
 1007d90:	dc400217 	ldw	r17,8(sp)
 1007d94:	dc000117 	ldw	r16,4(sp)
 1007d98:	dec00704 	addi	sp,sp,28
 1007d9c:	f800283a 	ret
 1007da0:	30800043 	ldbu	r2,1(r6)
 1007da4:	30c00083 	ldbu	r3,2(r6)
 1007da8:	310000c3 	ldbu	r4,3(r6)
 1007dac:	31400003 	ldbu	r5,0(r6)
 1007db0:	1004923a 	slli	r2,r2,8
 1007db4:	1806943a 	slli	r3,r3,16
 1007db8:	2008963a 	slli	r4,r4,24
 1007dbc:	1144b03a 	or	r2,r2,r5
 1007dc0:	1886b03a 	or	r3,r3,r2
 1007dc4:	20c8b03a 	or	r4,r4,r3
 1007dc8:	31400104 	addi	r5,r6,4
 1007dcc:	203fea26 	beq	r4,zero,1007d78 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 1007dd0:	88c01c0c 	andi	r3,r17,112
 1007dd4:	00800404 	movi	r2,16
 1007dd8:	18801426 	beq	r3,r2,1007e2c <_Z28read_encoded_value_with_basehjPKhPj+0x160>
 1007ddc:	90803fcc 	andi	r2,r18,255
 1007de0:	1080201c 	xori	r2,r2,128
 1007de4:	10bfe004 	addi	r2,r2,-128
 1007de8:	2509883a 	add	r4,r4,r20
 1007dec:	103fe20e 	bge	r2,zero,1007d78 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 1007df0:	21000017 	ldw	r4,0(r4)
 1007df4:	003fe006 	br	1007d78 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 1007df8:	30800043 	ldbu	r2,1(r6)
 1007dfc:	31800083 	ldbu	r6,2(r6)
 1007e00:	820000c3 	ldbu	r8,3(r16)
 1007e04:	1004923a 	slli	r2,r2,8
 1007e08:	82400003 	ldbu	r9,0(r16)
 1007e0c:	300c943a 	slli	r6,r6,16
 1007e10:	4010963a 	slli	r8,r8,24
 1007e14:	1244b03a 	or	r2,r2,r9
 1007e18:	308cb03a 	or	r6,r6,r2
 1007e1c:	4184b03a 	or	r2,r8,r6
 1007e20:	1009883a 	mov	r4,r2
 1007e24:	81400204 	addi	r5,r16,8
 1007e28:	003fe806 	br	1007dcc <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 1007e2c:	8029883a 	mov	r20,r16
 1007e30:	003fea06 	br	1007ddc <_Z28read_encoded_value_with_basehjPKhPj+0x110>
 1007e34:	30800043 	ldbu	r2,1(r6)
 1007e38:	30c00003 	ldbu	r3,0(r6)
 1007e3c:	31400084 	addi	r5,r6,2
 1007e40:	1004923a 	slli	r2,r2,8
 1007e44:	10c8b03a 	or	r4,r2,r3
 1007e48:	003fe006 	br	1007dcc <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 1007e4c:	30800043 	ldbu	r2,1(r6)
 1007e50:	30c00003 	ldbu	r3,0(r6)
 1007e54:	31400084 	addi	r5,r6,2
 1007e58:	1004923a 	slli	r2,r2,8
 1007e5c:	10c4b03a 	or	r2,r2,r3
 1007e60:	113fffcc 	andi	r4,r2,65535
 1007e64:	2120001c 	xori	r4,r4,32768
 1007e68:	21200004 	addi	r4,r4,-32768
 1007e6c:	003fd706 	br	1007dcc <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 1007e70:	3009883a 	mov	r4,r6
 1007e74:	d80b883a 	mov	r5,sp
 1007e78:	1007bdc0 	call	1007bdc <_Z12read_sleb128PKhPi>
 1007e7c:	d9000017 	ldw	r4,0(sp)
 1007e80:	100b883a 	mov	r5,r2
 1007e84:	003fd106 	br	1007dcc <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 1007e88:	3009883a 	mov	r4,r6
 1007e8c:	d80b883a 	mov	r5,sp
 1007e90:	1007bac0 	call	1007bac <_Z12read_uleb128PKhPj>
 1007e94:	d9000017 	ldw	r4,0(sp)
 1007e98:	100b883a 	mov	r5,r2
 1007e9c:	003fcb06 	br	1007dcc <_Z28read_encoded_value_with_basehjPKhPj+0x100>

01007ea0 <_Z21base_of_encoded_valuehP15_Unwind_Context>:
 1007ea0:	deffff04 	addi	sp,sp,-4
 1007ea4:	21003fcc 	andi	r4,r4,255
 1007ea8:	00803fc4 	movi	r2,255
 1007eac:	dfc00015 	stw	ra,0(sp)
 1007eb0:	20800c26 	beq	r4,r2,1007ee4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 1007eb4:	21001c0c 	andi	r4,r4,112
 1007eb8:	00800804 	movi	r2,32
 1007ebc:	20800d26 	beq	r4,r2,1007ef4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
 1007ec0:	1100070e 	bge	r2,r4,1007ee0 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
 1007ec4:	00801004 	movi	r2,64
 1007ec8:	20801126 	beq	r4,r2,1007f10 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
 1007ecc:	00801404 	movi	r2,80
 1007ed0:	20800426 	beq	r4,r2,1007ee4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 1007ed4:	00800c04 	movi	r2,48
 1007ed8:	20801126 	beq	r4,r2,1007f20 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
 1007edc:	10096b40 	call	10096b4 <abort>
 1007ee0:	2000081e 	bne	r4,zero,1007f04 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
 1007ee4:	0005883a 	mov	r2,zero
 1007ee8:	dfc00017 	ldw	ra,0(sp)
 1007eec:	dec00104 	addi	sp,sp,4
 1007ef0:	f800283a 	ret
 1007ef4:	2809883a 	mov	r4,r5
 1007ef8:	dfc00017 	ldw	ra,0(sp)
 1007efc:	dec00104 	addi	sp,sp,4
 1007f00:	10092241 	jmpi	1009224 <_Unwind_GetTextRelBase>
 1007f04:	00800404 	movi	r2,16
 1007f08:	20bff626 	beq	r4,r2,1007ee4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 1007f0c:	10096b40 	call	10096b4 <abort>
 1007f10:	2809883a 	mov	r4,r5
 1007f14:	dfc00017 	ldw	ra,0(sp)
 1007f18:	dec00104 	addi	sp,sp,4
 1007f1c:	100920c1 	jmpi	100920c <_Unwind_GetRegionStart>
 1007f20:	2809883a 	mov	r4,r5
 1007f24:	dfc00017 	ldw	ra,0(sp)
 1007f28:	dec00104 	addi	sp,sp,4
 1007f2c:	100921c1 	jmpi	100921c <_Unwind_GetDataRelBase>

01007f30 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 1007f30:	defffa04 	addi	sp,sp,-24
 1007f34:	dc800415 	stw	r18,16(sp)
 1007f38:	dc400315 	stw	r17,12(sp)
 1007f3c:	dc000215 	stw	r16,8(sp)
 1007f40:	dfc00515 	stw	ra,20(sp)
 1007f44:	2021883a 	mov	r16,r4
 1007f48:	000f883a 	mov	r7,zero
 1007f4c:	3023883a 	mov	r17,r6
 1007f50:	2825883a 	mov	r18,r5
 1007f54:	20000226 	beq	r4,zero,1007f60 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 1007f58:	100920c0 	call	100920c <_Unwind_GetRegionStart>
 1007f5c:	100f883a 	mov	r7,r2
 1007f60:	89c00015 	stw	r7,0(r17)
 1007f64:	90c00003 	ldbu	r3,0(r18)
 1007f68:	800b883a 	mov	r5,r16
 1007f6c:	00803fc4 	movi	r2,255
 1007f70:	1c003fcc 	andi	r16,r3,255
 1007f74:	91800044 	addi	r6,r18,1
 1007f78:	8009883a 	mov	r4,r16
 1007f7c:	18802226 	beq	r3,r2,1008008 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
 1007f80:	d9800115 	stw	r6,4(sp)
 1007f84:	1007ea00 	call	1007ea0 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 1007f88:	d9800117 	ldw	r6,4(sp)
 1007f8c:	8009883a 	mov	r4,r16
 1007f90:	100b883a 	mov	r5,r2
 1007f94:	89c00104 	addi	r7,r17,4
 1007f98:	1007ccc0 	call	1007ccc <_Z28read_encoded_value_with_basehjPKhPj>
 1007f9c:	100d883a 	mov	r6,r2
 1007fa0:	30800003 	ldbu	r2,0(r6)
 1007fa4:	31c00044 	addi	r7,r6,1
 1007fa8:	00c03fc4 	movi	r3,255
 1007fac:	d80b883a 	mov	r5,sp
 1007fb0:	3809883a 	mov	r4,r7
 1007fb4:	88800505 	stb	r2,20(r17)
 1007fb8:	10c01b26 	beq	r2,r3,1008028 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
 1007fbc:	1007bac0 	call	1007bac <_Z12read_uleb128PKhPj>
 1007fc0:	100f883a 	mov	r7,r2
 1007fc4:	d8800017 	ldw	r2,0(sp)
 1007fc8:	3885883a 	add	r2,r7,r2
 1007fcc:	88800315 	stw	r2,12(r17)
 1007fd0:	38800003 	ldbu	r2,0(r7)
 1007fd4:	39000044 	addi	r4,r7,1
 1007fd8:	d80b883a 	mov	r5,sp
 1007fdc:	88800545 	stb	r2,21(r17)
 1007fe0:	1007bac0 	call	1007bac <_Z12read_uleb128PKhPj>
 1007fe4:	d8c00017 	ldw	r3,0(sp)
 1007fe8:	10c9883a 	add	r4,r2,r3
 1007fec:	89000415 	stw	r4,16(r17)
 1007ff0:	dfc00517 	ldw	ra,20(sp)
 1007ff4:	dc800417 	ldw	r18,16(sp)
 1007ff8:	dc400317 	ldw	r17,12(sp)
 1007ffc:	dc000217 	ldw	r16,8(sp)
 1008000:	dec00604 	addi	sp,sp,24
 1008004:	f800283a 	ret
 1008008:	89c00115 	stw	r7,4(r17)
 100800c:	30800003 	ldbu	r2,0(r6)
 1008010:	31c00044 	addi	r7,r6,1
 1008014:	00c03fc4 	movi	r3,255
 1008018:	d80b883a 	mov	r5,sp
 100801c:	3809883a 	mov	r4,r7
 1008020:	88800505 	stb	r2,20(r17)
 1008024:	10ffe51e 	bne	r2,r3,1007fbc <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
 1008028:	88000315 	stw	zero,12(r17)
 100802c:	003fe806 	br	1007fd0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

01008030 <_Z15get_ttype_entryP16lsda_header_infoj>:
 1008030:	defffe04 	addi	sp,sp,-8
 1008034:	dfc00115 	stw	ra,4(sp)
 1008038:	21c00503 	ldbu	r7,20(r4)
 100803c:	00803fc4 	movi	r2,255
 1008040:	38801a26 	beq	r7,r2,10080ac <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
 1008044:	38c001cc 	andi	r3,r7,7
 1008048:	00800084 	movi	r2,2
 100804c:	18801326 	beq	r3,r2,100809c <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
 1008050:	10c0050e 	bge	r2,r3,1008068 <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
 1008054:	008000c4 	movi	r2,3
 1008058:	18800426 	beq	r3,r2,100806c <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
 100805c:	00800104 	movi	r2,4
 1008060:	18801026 	beq	r3,r2,10080a4 <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
 1008064:	10096b40 	call	10096b4 <abort>
 1008068:	183ffe1e 	bne	r3,zero,1008064 <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
 100806c:	2945883a 	add	r2,r5,r5
 1008070:	1085883a 	add	r2,r2,r2
 1008074:	21800317 	ldw	r6,12(r4)
 1008078:	21400217 	ldw	r5,8(r4)
 100807c:	3809883a 	mov	r4,r7
 1008080:	308dc83a 	sub	r6,r6,r2
 1008084:	d80f883a 	mov	r7,sp
 1008088:	1007ccc0 	call	1007ccc <_Z28read_encoded_value_with_basehjPKhPj>
 100808c:	d8800017 	ldw	r2,0(sp)
 1008090:	dfc00117 	ldw	ra,4(sp)
 1008094:	dec00204 	addi	sp,sp,8
 1008098:	f800283a 	ret
 100809c:	2945883a 	add	r2,r5,r5
 10080a0:	003ff406 	br	1008074 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 10080a4:	280490fa 	slli	r2,r5,3
 10080a8:	003ff206 	br	1008074 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 10080ac:	0005883a 	mov	r2,zero
 10080b0:	003ff006 	br	1008074 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

010080b4 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
 10080b4:	20800317 	ldw	r2,12(r4)
 10080b8:	defffa04 	addi	sp,sp,-24
 10080bc:	dc800415 	stw	r18,16(sp)
 10080c0:	11c5c83a 	sub	r2,r2,r7
 10080c4:	dc400315 	stw	r17,12(sp)
 10080c8:	dc000215 	stw	r16,8(sp)
 10080cc:	dfc00515 	stw	ra,20(sp)
 10080d0:	2023883a 	mov	r17,r4
 10080d4:	d9800115 	stw	r6,4(sp)
 10080d8:	2825883a 	mov	r18,r5
 10080dc:	143fffc4 	addi	r16,r2,-1
 10080e0:	8009883a 	mov	r4,r16
 10080e4:	d80b883a 	mov	r5,sp
 10080e8:	1007bac0 	call	1007bac <_Z12read_uleb128PKhPj>
 10080ec:	1021883a 	mov	r16,r2
 10080f0:	d8800017 	ldw	r2,0(sp)
 10080f4:	8809883a 	mov	r4,r17
 10080f8:	100b883a 	mov	r5,r2
 10080fc:	10000826 	beq	r2,zero,1008120 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
 1008100:	10080300 	call	1008030 <_Z15get_ttype_entryP16lsda_header_infoj>
 1008104:	1009883a 	mov	r4,r2
 1008108:	900b883a 	mov	r5,r18
 100810c:	d9800104 	addi	r6,sp,4
 1008110:	1007c300 	call	1007c30 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 1008114:	10803fcc 	andi	r2,r2,255
 1008118:	103ff126 	beq	r2,zero,10080e0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
 100811c:	00800044 	movi	r2,1
 1008120:	dfc00517 	ldw	ra,20(sp)
 1008124:	dc800417 	ldw	r18,16(sp)
 1008128:	dc400317 	ldw	r17,12(sp)
 100812c:	dc000217 	ldw	r16,8(sp)
 1008130:	dec00604 	addi	sp,sp,24
 1008134:	f800283a 	ret

01008138 <__cxa_call_unexpected>:
 1008138:	deffe204 	addi	sp,sp,-120
 100813c:	00804074 	movhi	r2,257
 1008140:	10a0ae04 	addi	r2,r2,-32072
 1008144:	00c040b4 	movhi	r3,258
 1008148:	18fb4d04 	addi	r3,r3,-4812
 100814c:	d8800c15 	stw	r2,48(sp)
 1008150:	d9001815 	stw	r4,96(sp)
 1008154:	00804074 	movhi	r2,257
 1008158:	10a07004 	addi	r2,r2,-32320
 100815c:	d9000604 	addi	r4,sp,24
 1008160:	d8c00d15 	stw	r3,52(sp)
 1008164:	dfc01d15 	stw	ra,116(sp)
 1008168:	d8800f15 	stw	r2,60(sp)
 100816c:	df001c15 	stw	fp,112(sp)
 1008170:	ddc01b15 	stw	r23,108(sp)
 1008174:	dec00e15 	stw	sp,56(sp)
 1008178:	dec01015 	stw	sp,64(sp)
 100817c:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1008180:	d9001817 	ldw	r4,96(sp)
 1008184:	10089700 	call	1008970 <__cxa_begin_catch>
 1008188:	d8801817 	ldw	r2,96(sp)
 100818c:	10fff504 	addi	r3,r2,-44
 1008190:	18800917 	ldw	r2,36(r3)
 1008194:	19400617 	ldw	r5,24(r3)
 1008198:	19000217 	ldw	r4,8(r3)
 100819c:	d8800215 	stw	r2,8(sp)
 10081a0:	18800817 	ldw	r2,32(r3)
 10081a4:	18c00317 	ldw	r3,12(r3)
 10081a8:	d9401615 	stw	r5,88(sp)
 10081ac:	d8801715 	stw	r2,92(sp)
 10081b0:	00800084 	movi	r2,2
 10081b4:	d8c01515 	stw	r3,84(sp)
 10081b8:	d8800715 	stw	r2,28(sp)
 10081bc:	100887c0 	call	100887c <_ZN10__cxxabiv112__unexpectedEPFvvE>
 10081c0:	d8800717 	ldw	r2,28(sp)
 10081c4:	d8c00817 	ldw	r3,32(sp)
 10081c8:	d8801a15 	stw	r2,104(sp)
 10081cc:	d9401a17 	ldw	r5,104(sp)
 10081d0:	00800044 	movi	r2,1
 10081d4:	d8c01915 	stw	r3,100(sp)
 10081d8:	28800826 	beq	r5,r2,10081fc <__cxa_call_unexpected+0xc4>
 10081dc:	d8000715 	stw	zero,28(sp)
 10081e0:	10088cc0 	call	10088cc <__cxa_end_catch>
 10081e4:	d8000715 	stw	zero,28(sp)
 10081e8:	10088cc0 	call	10088cc <__cxa_end_catch>
 10081ec:	d9001917 	ldw	r4,100(sp)
 10081f0:	00bfffc4 	movi	r2,-1
 10081f4:	d8800715 	stw	r2,28(sp)
 10081f8:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 10081fc:	d9001917 	ldw	r4,100(sp)
 1008200:	10089700 	call	1008970 <__cxa_begin_catch>
 1008204:	100915c0 	call	100915c <__cxa_get_globals_fast>
 1008208:	10800017 	ldw	r2,0(r2)
 100820c:	d8c01a17 	ldw	r3,104(sp)
 1008210:	0009883a 	mov	r4,zero
 1008214:	11401004 	addi	r5,r2,64
 1008218:	d9401315 	stw	r5,76(sp)
 100821c:	d8801415 	stw	r2,80(sp)
 1008220:	d8c00715 	stw	r3,28(sp)
 1008224:	d9401717 	ldw	r5,92(sp)
 1008228:	d80d883a 	mov	r6,sp
 100822c:	1007f300 	call	1007f30 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 1008230:	d8801417 	ldw	r2,80(sp)
 1008234:	d809883a 	mov	r4,sp
 1008238:	d9801317 	ldw	r6,76(sp)
 100823c:	11400017 	ldw	r5,0(r2)
 1008240:	d9c01617 	ldw	r7,88(sp)
 1008244:	10080b40 	call	10080b4 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 1008248:	10803fcc 	andi	r2,r2,255
 100824c:	1000151e 	bne	r2,zero,10082a4 <__cxa_call_unexpected+0x16c>
 1008250:	d8c01a17 	ldw	r3,104(sp)
 1008254:	d809883a 	mov	r4,sp
 1008258:	014040b4 	movhi	r5,258
 100825c:	297c7c04 	addi	r5,r5,-3600
 1008260:	d8c00715 	stw	r3,28(sp)
 1008264:	000d883a 	mov	r6,zero
 1008268:	d9c01617 	ldw	r7,88(sp)
 100826c:	10080b40 	call	10080b4 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 1008270:	10803fcc 	andi	r2,r2,255
 1008274:	10000c26 	beq	r2,zero,10082a8 <__cxa_call_unexpected+0x170>
 1008278:	01000104 	movi	r4,4
 100827c:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 1008280:	1009883a 	mov	r4,r2
 1008284:	008040b4 	movhi	r2,258
 1008288:	10bc6f04 	addi	r2,r2,-3652
 100828c:	20800015 	stw	r2,0(r4)
 1008290:	014040b4 	movhi	r5,258
 1008294:	297c7c04 	addi	r5,r5,-3600
 1008298:	01804034 	movhi	r6,256
 100829c:	319e5c04 	addi	r6,r6,31088
 10082a0:	1008b080 	call	1008b08 <__cxa_throw>
 10082a4:	1008a940 	call	1008a94 <__cxa_rethrow>
 10082a8:	d9401a17 	ldw	r5,104(sp)
 10082ac:	d9001517 	ldw	r4,84(sp)
 10082b0:	d9400715 	stw	r5,28(sp)
 10082b4:	10087c00 	call	10087c0 <_ZN10__cxxabiv111__terminateEPFvvE>

010082b8 <__gxx_personality_sj0>:
 10082b8:	deffd304 	addi	sp,sp,-180
 10082bc:	00804074 	movhi	r2,257
 10082c0:	10a1d504 	addi	r2,r2,-30892
 10082c4:	00c040b4 	movhi	r3,258
 10082c8:	18fb5104 	addi	r3,r3,-4796
 10082cc:	d8801315 	stw	r2,76(sp)
 10082d0:	d9002315 	stw	r4,140(sp)
 10082d4:	00804074 	movhi	r2,257
 10082d8:	10a0ae04 	addi	r2,r2,-32072
 10082dc:	d9000a04 	addi	r4,sp,40
 10082e0:	d8801015 	stw	r2,64(sp)
 10082e4:	d8c01115 	stw	r3,68(sp)
 10082e8:	dfc02c15 	stw	ra,176(sp)
 10082ec:	df002b15 	stw	fp,172(sp)
 10082f0:	ddc02a15 	stw	r23,168(sp)
 10082f4:	dec01215 	stw	sp,72(sp)
 10082f8:	dec01415 	stw	sp,80(sp)
 10082fc:	d9802515 	stw	r6,148(sp)
 1008300:	d9402415 	stw	r5,144(sp)
 1008304:	d9c02615 	stw	r7,152(sp)
 1008308:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 100830c:	d8c02317 	ldw	r3,140(sp)
 1008310:	00800044 	movi	r2,1
 1008314:	18800a26 	beq	r3,r2,1008340 <__gxx_personality_sj0+0x88>
 1008318:	010000c4 	movi	r4,3
 100831c:	d9002215 	stw	r4,136(sp)
 1008320:	d9000a04 	addi	r4,sp,40
 1008324:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1008328:	d8802217 	ldw	r2,136(sp)
 100832c:	dfc02c17 	ldw	ra,176(sp)
 1008330:	df002b17 	ldw	fp,172(sp)
 1008334:	ddc02a17 	ldw	r23,168(sp)
 1008338:	dec02d04 	addi	sp,sp,180
 100833c:	f800283a 	ret
 1008340:	d9402d17 	ldw	r5,180(sp)
 1008344:	d9002517 	ldw	r4,148(sp)
 1008348:	0007883a 	mov	r3,zero
 100834c:	28800504 	addi	r2,r5,20
 1008350:	d8800015 	stw	r2,0(sp)
 1008354:	28bff504 	addi	r2,r5,-44
 1008358:	d8801a15 	stw	r2,104(sp)
 100835c:	0090caf4 	movhi	r2,17195
 1008360:	108ac004 	addi	r2,r2,11008
 1008364:	2080ad26 	beq	r4,r2,100861c <__gxx_personality_sj0+0x364>
 1008368:	d8c02105 	stb	r3,132(sp)
 100836c:	d8c02417 	ldw	r3,144(sp)
 1008370:	00800184 	movi	r2,6
 1008374:	1880281e 	bne	r3,r2,1008418 <__gxx_personality_sj0+0x160>
 1008378:	d8802103 	ldbu	r2,132(sp)
 100837c:	10002626 	beq	r2,zero,1008418 <__gxx_personality_sj0+0x160>
 1008380:	d9001a17 	ldw	r4,104(sp)
 1008384:	d9401a17 	ldw	r5,104(sp)
 1008388:	d8801a17 	ldw	r2,104(sp)
 100838c:	21000917 	ldw	r4,36(r4)
 1008390:	29400617 	ldw	r5,24(r5)
 1008394:	10800817 	ldw	r2,32(r2)
 1008398:	d9001d15 	stw	r4,116(sp)
 100839c:	d9401b15 	stw	r5,108(sp)
 10083a0:	d8802015 	stw	r2,128(sp)
 10083a4:	2000ad1e 	bne	r4,zero,100865c <__gxx_personality_sj0+0x3a4>
 10083a8:	01000044 	movi	r4,1
 10083ac:	00800044 	movi	r2,1
 10083b0:	2080e126 	beq	r4,r2,1008738 <__gxx_personality_sj0+0x480>
 10083b4:	d8801b17 	ldw	r2,108(sp)
 10083b8:	1000d316 	blt	r2,zero,1008708 <__gxx_personality_sj0+0x450>
 10083bc:	d9802d17 	ldw	r6,180(sp)
 10083c0:	d9002e17 	ldw	r4,184(sp)
 10083c4:	00bfffc4 	movi	r2,-1
 10083c8:	000b883a 	mov	r5,zero
 10083cc:	d8800b15 	stw	r2,44(sp)
 10083d0:	10091b40 	call	10091b4 <_Unwind_SetGR>
 10083d4:	d9801b17 	ldw	r6,108(sp)
 10083d8:	d9002e17 	ldw	r4,184(sp)
 10083dc:	01400044 	movi	r5,1
 10083e0:	10091b40 	call	10091b4 <_Unwind_SetGR>
 10083e4:	d9002e17 	ldw	r4,184(sp)
 10083e8:	d9401d17 	ldw	r5,116(sp)
 10083ec:	10091f00 	call	10091f0 <_Unwind_SetIP>
 10083f0:	010001c4 	movi	r4,7
 10083f4:	d9002215 	stw	r4,136(sp)
 10083f8:	d9000a04 	addi	r4,sp,40
 10083fc:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1008400:	d8802217 	ldw	r2,136(sp)
 1008404:	dfc02c17 	ldw	ra,176(sp)
 1008408:	df002b17 	ldw	fp,172(sp)
 100840c:	ddc02a17 	ldw	r23,168(sp)
 1008410:	dec02d04 	addi	sp,sp,180
 1008414:	f800283a 	ret
 1008418:	d9002e17 	ldw	r4,184(sp)
 100841c:	00ffffc4 	movi	r3,-1
 1008420:	d8c00b15 	stw	r3,44(sp)
 1008424:	10092000 	call	1009200 <_Unwind_GetLanguageSpecificData>
 1008428:	10007226 	beq	r2,zero,10085f4 <__gxx_personality_sj0+0x33c>
 100842c:	d9002e17 	ldw	r4,184(sp)
 1008430:	d9800404 	addi	r6,sp,16
 1008434:	100b883a 	mov	r5,r2
 1008438:	d8802015 	stw	r2,128(sp)
 100843c:	1007f300 	call	1007f30 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 1008440:	d9000903 	ldbu	r4,36(sp)
 1008444:	d9402e17 	ldw	r5,184(sp)
 1008448:	d8801e15 	stw	r2,120(sp)
 100844c:	1007ea00 	call	1007ea0 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 1008450:	d9002e17 	ldw	r4,184(sp)
 1008454:	d8800615 	stw	r2,24(sp)
 1008458:	10091cc0 	call	10091cc <_Unwind_GetIP>
 100845c:	10bfffc4 	addi	r2,r2,-1
 1008460:	d8801c15 	stw	r2,112(sp)
 1008464:	10006316 	blt	r2,zero,10085f4 <__gxx_personality_sj0+0x33c>
 1008468:	10001b1e 	bne	r2,zero,10084d8 <__gxx_personality_sj0+0x220>
 100846c:	01000044 	movi	r4,1
 1008470:	d8001f15 	stw	zero,124(sp)
 1008474:	d8001d15 	stw	zero,116(sp)
 1008478:	d8001b15 	stw	zero,108(sp)
 100847c:	d9402417 	ldw	r5,144(sp)
 1008480:	00c00044 	movi	r3,1
 1008484:	28c4703a 	and	r2,r5,r3
 1008488:	1005003a 	cmpeq	r2,r2,zero
 100848c:	10006a1e 	bne	r2,zero,1008638 <__gxx_personality_sj0+0x380>
 1008490:	00800084 	movi	r2,2
 1008494:	20805726 	beq	r4,r2,10085f4 <__gxx_personality_sj0+0x33c>
 1008498:	d8802103 	ldbu	r2,132(sp)
 100849c:	10008626 	beq	r2,zero,10086b8 <__gxx_personality_sj0+0x400>
 10084a0:	d9001a17 	ldw	r4,104(sp)
 10084a4:	d9401d17 	ldw	r5,116(sp)
 10084a8:	d8801b17 	ldw	r2,108(sp)
 10084ac:	00c00184 	movi	r3,6
 10084b0:	d8c02215 	stw	r3,136(sp)
 10084b4:	21400915 	stw	r5,36(r4)
 10084b8:	20800615 	stw	r2,24(r4)
 10084bc:	d8c01f17 	ldw	r3,124(sp)
 10084c0:	d9402017 	ldw	r5,128(sp)
 10084c4:	d8800017 	ldw	r2,0(sp)
 10084c8:	20c00715 	stw	r3,28(r4)
 10084cc:	21400815 	stw	r5,32(r4)
 10084d0:	20800a15 	stw	r2,40(r4)
 10084d4:	003f9206 	br	1008320 <__gxx_personality_sj0+0x68>
 10084d8:	d9001e17 	ldw	r4,120(sp)
 10084dc:	d9400204 	addi	r5,sp,8
 10084e0:	1007bac0 	call	1007bac <_Z12read_uleb128PKhPj>
 10084e4:	d9401c17 	ldw	r5,112(sp)
 10084e8:	1009883a 	mov	r4,r2
 10084ec:	297fffc4 	addi	r5,r5,-1
 10084f0:	d9401c15 	stw	r5,112(sp)
 10084f4:	d9400104 	addi	r5,sp,4
 10084f8:	1007bac0 	call	1007bac <_Z12read_uleb128PKhPj>
 10084fc:	d8801e15 	stw	r2,120(sp)
 1008500:	d8801c17 	ldw	r2,112(sp)
 1008504:	103ff41e 	bne	r2,zero,10084d8 <__gxx_personality_sj0+0x220>
 1008508:	d8800217 	ldw	r2,8(sp)
 100850c:	d8c00117 	ldw	r3,4(sp)
 1008510:	01000044 	movi	r4,1
 1008514:	1105883a 	add	r2,r2,r4
 1008518:	d8801d15 	stw	r2,116(sp)
 100851c:	1800541e 	bne	r3,zero,1008670 <__gxx_personality_sj0+0x3b8>
 1008520:	d8001f15 	stw	zero,124(sp)
 1008524:	d8c01d17 	ldw	r3,116(sp)
 1008528:	18003226 	beq	r3,zero,10085f4 <__gxx_personality_sj0+0x33c>
 100852c:	d9001f17 	ldw	r4,124(sp)
 1008530:	20007226 	beq	r4,zero,10086fc <__gxx_personality_sj0+0x444>
 1008534:	d9402417 	ldw	r5,144(sp)
 1008538:	2880020c 	andi	r2,r5,8
 100853c:	10006a1e 	bne	r2,zero,10086e8 <__gxx_personality_sj0+0x430>
 1008540:	d8802103 	ldbu	r2,132(sp)
 1008544:	10006826 	beq	r2,zero,10086e8 <__gxx_personality_sj0+0x430>
 1008548:	d8801a17 	ldw	r2,104(sp)
 100854c:	10800017 	ldw	r2,0(r2)
 1008550:	d8801915 	stw	r2,100(sp)
 1008554:	d8c01917 	ldw	r3,100(sp)
 1008558:	d8001805 	stb	zero,96(sp)
 100855c:	1807003a 	cmpeq	r3,r3,zero
 1008560:	d8c02715 	stw	r3,156(sp)
 1008564:	00000706 	br	1008584 <__gxx_personality_sj0+0x2cc>
 1008568:	01000044 	movi	r4,1
 100856c:	d9001805 	stb	r4,96(sp)
 1008570:	d8800217 	ldw	r2,8(sp)
 1008574:	10005e26 	beq	r2,zero,10086f0 <__gxx_personality_sj0+0x438>
 1008578:	d8c01717 	ldw	r3,92(sp)
 100857c:	1885883a 	add	r2,r3,r2
 1008580:	d8801f15 	stw	r2,124(sp)
 1008584:	d9001f17 	ldw	r4,124(sp)
 1008588:	d9400104 	addi	r5,sp,4
 100858c:	1007bdc0 	call	1007bdc <_Z12read_sleb128PKhPi>
 1008590:	1009883a 	mov	r4,r2
 1008594:	d9400204 	addi	r5,sp,8
 1008598:	d8801715 	stw	r2,92(sp)
 100859c:	1007bdc0 	call	1007bdc <_Z12read_sleb128PKhPi>
 10085a0:	d8800117 	ldw	r2,4(sp)
 10085a4:	103ff026 	beq	r2,zero,1008568 <__gxx_personality_sj0+0x2b0>
 10085a8:	0080360e 	bge	zero,r2,1008684 <__gxx_personality_sj0+0x3cc>
 10085ac:	017fffc4 	movi	r5,-1
 10085b0:	d9400b15 	stw	r5,44(sp)
 10085b4:	d9000404 	addi	r4,sp,16
 10085b8:	100b883a 	mov	r5,r2
 10085bc:	10080300 	call	1008030 <_Z15get_ttype_entryP16lsda_header_infoj>
 10085c0:	10000826 	beq	r2,zero,10085e4 <__gxx_personality_sj0+0x32c>
 10085c4:	d8c02717 	ldw	r3,156(sp)
 10085c8:	183fe91e 	bne	r3,zero,1008570 <__gxx_personality_sj0+0x2b8>
 10085cc:	d9401917 	ldw	r5,100(sp)
 10085d0:	1009883a 	mov	r4,r2
 10085d4:	d80d883a 	mov	r6,sp
 10085d8:	1007c300 	call	1007c30 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 10085dc:	10803fcc 	andi	r2,r2,255
 10085e0:	103fe326 	beq	r2,zero,1008570 <__gxx_personality_sj0+0x2b8>
 10085e4:	d9000117 	ldw	r4,4(sp)
 10085e8:	d9001b15 	stw	r4,108(sp)
 10085ec:	010000c4 	movi	r4,3
 10085f0:	003fa206 	br	100847c <__gxx_personality_sj0+0x1c4>
 10085f4:	01400204 	movi	r5,8
 10085f8:	d9000a04 	addi	r4,sp,40
 10085fc:	d9402215 	stw	r5,136(sp)
 1008600:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1008604:	d8802217 	ldw	r2,136(sp)
 1008608:	dfc02c17 	ldw	ra,176(sp)
 100860c:	df002b17 	ldw	fp,172(sp)
 1008610:	ddc02a17 	ldw	r23,168(sp)
 1008614:	dec02d04 	addi	sp,sp,180
 1008618:	f800283a 	ret
 100861c:	d9402617 	ldw	r5,152(sp)
 1008620:	0091d3b4 	movhi	r2,18254
 1008624:	109550c4 	addi	r2,r2,21827
 1008628:	28bf4f1e 	bne	r5,r2,1008368 <__gxx_personality_sj0+0xb0>
 100862c:	d8802317 	ldw	r2,140(sp)
 1008630:	1007883a 	mov	r3,r2
 1008634:	003f4c06 	br	1008368 <__gxx_personality_sj0+0xb0>
 1008638:	d9402417 	ldw	r5,144(sp)
 100863c:	2880020c 	andi	r2,r5,8
 1008640:	10000826 	beq	r2,zero,1008664 <__gxx_personality_sj0+0x3ac>
 1008644:	20c04026 	beq	r4,r3,1008748 <__gxx_personality_sj0+0x490>
 1008648:	d8801b17 	ldw	r2,108(sp)
 100864c:	103f5b0e 	bge	r2,zero,10083bc <__gxx_personality_sj0+0x104>
 1008650:	00800084 	movi	r2,2
 1008654:	d8800b15 	stw	r2,44(sp)
 1008658:	100888c0 	call	100888c <_ZSt10unexpectedv>
 100865c:	010000c4 	movi	r4,3
 1008660:	003f5206 	br	10083ac <__gxx_personality_sj0+0xf4>
 1008664:	d8802103 	ldbu	r2,132(sp)
 1008668:	103f501e 	bne	r2,zero,10083ac <__gxx_personality_sj0+0xf4>
 100866c:	003ff506 	br	1008644 <__gxx_personality_sj0+0x38c>
 1008670:	d8800817 	ldw	r2,32(sp)
 1008674:	1885883a 	add	r2,r3,r2
 1008678:	1105c83a 	sub	r2,r2,r4
 100867c:	d8801f15 	stw	r2,124(sp)
 1008680:	003fa806 	br	1008524 <__gxx_personality_sj0+0x26c>
 1008684:	d9002717 	ldw	r4,156(sp)
 1008688:	20000e1e 	bne	r4,zero,10086c4 <__gxx_personality_sj0+0x40c>
 100868c:	017fffc4 	movi	r5,-1
 1008690:	d9400b15 	stw	r5,44(sp)
 1008694:	d9800017 	ldw	r6,0(sp)
 1008698:	d9401917 	ldw	r5,100(sp)
 100869c:	100f883a 	mov	r7,r2
 10086a0:	d9000404 	addi	r4,sp,16
 10086a4:	10080b40 	call	10080b4 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 10086a8:	1080005c 	xori	r2,r2,1
 10086ac:	10803fcc 	andi	r2,r2,255
 10086b0:	103faf26 	beq	r2,zero,1008570 <__gxx_personality_sj0+0x2b8>
 10086b4:	003fcb06 	br	10085e4 <__gxx_personality_sj0+0x32c>
 10086b8:	00800184 	movi	r2,6
 10086bc:	d8802215 	stw	r2,136(sp)
 10086c0:	003f1706 	br	1008320 <__gxx_personality_sj0+0x68>
 10086c4:	d9000717 	ldw	r4,28(sp)
 10086c8:	d9400304 	addi	r5,sp,12
 10086cc:	2089c83a 	sub	r4,r4,r2
 10086d0:	213fffc4 	addi	r4,r4,-1
 10086d4:	1007bac0 	call	1007bac <_Z12read_uleb128PKhPj>
 10086d8:	d8c00317 	ldw	r3,12(sp)
 10086dc:	1807003a 	cmpeq	r3,r3,zero
 10086e0:	1805883a 	mov	r2,r3
 10086e4:	003ff106 	br	10086ac <__gxx_personality_sj0+0x3f4>
 10086e8:	d8001915 	stw	zero,100(sp)
 10086ec:	003f9906 	br	1008554 <__gxx_personality_sj0+0x29c>
 10086f0:	d8801803 	ldbu	r2,96(sp)
 10086f4:	1004c03a 	cmpne	r2,r2,zero
 10086f8:	103fbe26 	beq	r2,zero,10085f4 <__gxx_personality_sj0+0x33c>
 10086fc:	01000084 	movi	r4,2
 1008700:	d8001b15 	stw	zero,108(sp)
 1008704:	003f5d06 	br	100847c <__gxx_personality_sj0+0x1c4>
 1008708:	d9402017 	ldw	r5,128(sp)
 100870c:	d9002e17 	ldw	r4,184(sp)
 1008710:	00bfffc4 	movi	r2,-1
 1008714:	d9800404 	addi	r6,sp,16
 1008718:	d8800b15 	stw	r2,44(sp)
 100871c:	1007f300 	call	1007f30 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 1008720:	d9000903 	ldbu	r4,36(sp)
 1008724:	d9402e17 	ldw	r5,184(sp)
 1008728:	1007ea00 	call	1007ea0 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 100872c:	d8c01a17 	ldw	r3,104(sp)
 1008730:	18800915 	stw	r2,36(r3)
 1008734:	003f2106 	br	10083bc <__gxx_personality_sj0+0x104>
 1008738:	d9002d17 	ldw	r4,180(sp)
 100873c:	00bfffc4 	movi	r2,-1
 1008740:	d8800b15 	stw	r2,44(sp)
 1008744:	10091180 	call	1009118 <__cxa_call_terminate>
 1008748:	00bfffc4 	movi	r2,-1
 100874c:	d8800b15 	stw	r2,44(sp)
 1008750:	10088640 	call	1008864 <_ZSt9terminatev>
 1008754:	d9000b17 	ldw	r4,44(sp)
 1008758:	d9400c17 	ldw	r5,48(sp)
 100875c:	00800044 	movi	r2,1
 1008760:	d9002915 	stw	r4,164(sp)
 1008764:	d9402815 	stw	r5,160(sp)
 1008768:	20800626 	beq	r4,r2,1008784 <__gxx_personality_sj0+0x4cc>
 100876c:	d8000b15 	stw	zero,44(sp)
 1008770:	10088cc0 	call	10088cc <__cxa_end_catch>
 1008774:	d9002817 	ldw	r4,160(sp)
 1008778:	00bfffc4 	movi	r2,-1
 100877c:	d8800b15 	stw	r2,44(sp)
 1008780:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1008784:	d9002817 	ldw	r4,160(sp)
 1008788:	10089700 	call	1008970 <__cxa_begin_catch>
 100878c:	d8c02917 	ldw	r3,164(sp)
 1008790:	d8c00b15 	stw	r3,44(sp)
 1008794:	10088640 	call	1008864 <_ZSt9terminatev>

01008798 <_ZSt13set_terminatePFvvE>:
 1008798:	00c040b4 	movhi	r3,258
 100879c:	18c49c04 	addi	r3,r3,4720
 10087a0:	18800017 	ldw	r2,0(r3)
 10087a4:	19000015 	stw	r4,0(r3)
 10087a8:	f800283a 	ret

010087ac <_ZSt14set_unexpectedPFvvE>:
 10087ac:	00c040b4 	movhi	r3,258
 10087b0:	18c49f04 	addi	r3,r3,4732
 10087b4:	18800017 	ldw	r2,0(r3)
 10087b8:	19000015 	stw	r4,0(r3)
 10087bc:	f800283a 	ret

010087c0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 10087c0:	deffed04 	addi	sp,sp,-76
 10087c4:	00804074 	movhi	r2,257
 10087c8:	10a0ae04 	addi	r2,r2,-32072
 10087cc:	d8800615 	stw	r2,24(sp)
 10087d0:	00c040b4 	movhi	r3,258
 10087d4:	18fb5504 	addi	r3,r3,-4780
 10087d8:	00804074 	movhi	r2,257
 10087dc:	10a20704 	addi	r2,r2,-30692
 10087e0:	d9000d15 	stw	r4,52(sp)
 10087e4:	d809883a 	mov	r4,sp
 10087e8:	d8800915 	stw	r2,36(sp)
 10087ec:	dfc01215 	stw	ra,72(sp)
 10087f0:	df001115 	stw	fp,68(sp)
 10087f4:	ddc01015 	stw	r23,64(sp)
 10087f8:	d8c00715 	stw	r3,28(sp)
 10087fc:	dec00815 	stw	sp,32(sp)
 1008800:	dec00a15 	stw	sp,40(sp)
 1008804:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1008808:	00800084 	movi	r2,2
 100880c:	d8800115 	stw	r2,4(sp)
 1008810:	d8800d17 	ldw	r2,52(sp)
 1008814:	103ee83a 	callr	r2
 1008818:	10096b40 	call	10096b4 <abort>
 100881c:	d8800117 	ldw	r2,4(sp)
 1008820:	d8c00217 	ldw	r3,8(sp)
 1008824:	d8800f15 	stw	r2,60(sp)
 1008828:	d8c00e15 	stw	r3,56(sp)
 100882c:	d8c00f17 	ldw	r3,60(sp)
 1008830:	00800044 	movi	r2,1
 1008834:	18800626 	beq	r3,r2,1008850 <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
 1008838:	d8000115 	stw	zero,4(sp)
 100883c:	10088cc0 	call	10088cc <__cxa_end_catch>
 1008840:	d9000e17 	ldw	r4,56(sp)
 1008844:	00bfffc4 	movi	r2,-1
 1008848:	d8800115 	stw	r2,4(sp)
 100884c:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1008850:	d9000e17 	ldw	r4,56(sp)
 1008854:	10089700 	call	1008970 <__cxa_begin_catch>
 1008858:	d8c00f17 	ldw	r3,60(sp)
 100885c:	d8c00115 	stw	r3,4(sp)
 1008860:	10096b40 	call	10096b4 <abort>

01008864 <_ZSt9terminatev>:
 1008864:	008040b4 	movhi	r2,258
 1008868:	10849c04 	addi	r2,r2,4720
 100886c:	11000017 	ldw	r4,0(r2)
 1008870:	deffff04 	addi	sp,sp,-4
 1008874:	dfc00015 	stw	ra,0(sp)
 1008878:	10087c00 	call	10087c0 <_ZN10__cxxabiv111__terminateEPFvvE>

0100887c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 100887c:	deffff04 	addi	sp,sp,-4
 1008880:	dfc00015 	stw	ra,0(sp)
 1008884:	203ee83a 	callr	r4
 1008888:	10088640 	call	1008864 <_ZSt9terminatev>

0100888c <_ZSt10unexpectedv>:
 100888c:	008040b4 	movhi	r2,258
 1008890:	10849f04 	addi	r2,r2,4732
 1008894:	11000017 	ldw	r4,0(r2)
 1008898:	deffff04 	addi	sp,sp,-4
 100889c:	dfc00015 	stw	ra,0(sp)
 10088a0:	100887c0 	call	100887c <_ZN10__cxxabiv112__unexpectedEPFvvE>

010088a4 <__cxa_get_exception_ptr>:
 10088a4:	20bfff17 	ldw	r2,-4(r4)
 10088a8:	f800283a 	ret

010088ac <_ZSt18uncaught_exceptionv>:
 10088ac:	deffff04 	addi	sp,sp,-4
 10088b0:	dfc00015 	stw	ra,0(sp)
 10088b4:	10091640 	call	1009164 <__cxa_get_globals>
 10088b8:	10800117 	ldw	r2,4(r2)
 10088bc:	1004c03a 	cmpne	r2,r2,zero
 10088c0:	dfc00017 	ldw	ra,0(sp)
 10088c4:	dec00104 	addi	sp,sp,4
 10088c8:	f800283a 	ret

010088cc <__cxa_end_catch>:
 10088cc:	deffff04 	addi	sp,sp,-4
 10088d0:	dfc00015 	stw	ra,0(sp)
 10088d4:	100915c0 	call	100915c <__cxa_get_globals_fast>
 10088d8:	11000017 	ldw	r4,0(r2)
 10088dc:	1007883a 	mov	r3,r2
 10088e0:	20001326 	beq	r4,zero,1008930 <__cxa_end_catch+0x64>
 10088e4:	21400b17 	ldw	r5,44(r4)
 10088e8:	0090caf4 	movhi	r2,17195
 10088ec:	108ac004 	addi	r2,r2,11008
 10088f0:	21800c17 	ldw	r6,48(r4)
 10088f4:	28800526 	beq	r5,r2,100890c <__cxa_end_catch+0x40>
 10088f8:	21000b04 	addi	r4,r4,44
 10088fc:	18000015 	stw	zero,0(r3)
 1008900:	dfc00017 	ldw	ra,0(sp)
 1008904:	dec00104 	addi	sp,sp,4
 1008908:	100932c1 	jmpi	100932c <_Unwind_DeleteException>
 100890c:	0091d3b4 	movhi	r2,18254
 1008910:	109550c4 	addi	r2,r2,21827
 1008914:	30bff81e 	bne	r6,r2,10088f8 <__cxa_end_catch+0x2c>
 1008918:	20800517 	ldw	r2,20(r4)
 100891c:	10000e16 	blt	r2,zero,1008958 <__cxa_end_catch+0x8c>
 1008920:	117fffc4 	addi	r5,r2,-1
 1008924:	28000526 	beq	r5,zero,100893c <__cxa_end_catch+0x70>
 1008928:	28000a16 	blt	r5,zero,1008954 <__cxa_end_catch+0x88>
 100892c:	21400515 	stw	r5,20(r4)
 1008930:	dfc00017 	ldw	ra,0(sp)
 1008934:	dec00104 	addi	sp,sp,4
 1008938:	f800283a 	ret
 100893c:	20800417 	ldw	r2,16(r4)
 1008940:	21000b04 	addi	r4,r4,44
 1008944:	18800015 	stw	r2,0(r3)
 1008948:	dfc00017 	ldw	ra,0(sp)
 100894c:	dec00104 	addi	sp,sp,4
 1008950:	100932c1 	jmpi	100932c <_Unwind_DeleteException>
 1008954:	10088640 	call	1008864 <_ZSt9terminatev>
 1008958:	11400044 	addi	r5,r2,1
 100895c:	283ff31e 	bne	r5,zero,100892c <__cxa_end_catch+0x60>
 1008960:	20800417 	ldw	r2,16(r4)
 1008964:	21400515 	stw	r5,20(r4)
 1008968:	18800015 	stw	r2,0(r3)
 100896c:	003ff006 	br	1008930 <__cxa_end_catch+0x64>

01008970 <__cxa_begin_catch>:
 1008970:	deffee04 	addi	sp,sp,-72
 1008974:	00804074 	movhi	r2,257
 1008978:	10a0ae04 	addi	r2,r2,-32072
 100897c:	00c040b4 	movhi	r3,258
 1008980:	18fb5904 	addi	r3,r3,-4764
 1008984:	d8800615 	stw	r2,24(sp)
 1008988:	d9000e15 	stw	r4,56(sp)
 100898c:	00804074 	movhi	r2,257
 1008990:	10a29904 	addi	r2,r2,-30108
 1008994:	d809883a 	mov	r4,sp
 1008998:	d8c00715 	stw	r3,28(sp)
 100899c:	dfc01115 	stw	ra,68(sp)
 10089a0:	d8800915 	stw	r2,36(sp)
 10089a4:	df001015 	stw	fp,64(sp)
 10089a8:	ddc00f15 	stw	r23,60(sp)
 10089ac:	dec00815 	stw	sp,32(sp)
 10089b0:	dec00a15 	stw	sp,40(sp)
 10089b4:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 10089b8:	10091640 	call	1009164 <__cxa_get_globals>
 10089bc:	100d883a 	mov	r6,r2
 10089c0:	d8800e17 	ldw	r2,56(sp)
 10089c4:	31c00017 	ldw	r7,0(r6)
 10089c8:	117ff504 	addi	r5,r2,-44
 10089cc:	28c00b17 	ldw	r3,44(r5)
 10089d0:	0090caf4 	movhi	r2,17195
 10089d4:	108ac004 	addi	r2,r2,11008
 10089d8:	29000c17 	ldw	r4,48(r5)
 10089dc:	18800b26 	beq	r3,r2,1008a0c <__cxa_begin_catch+0x9c>
 10089e0:	38001d1e 	bne	r7,zero,1008a58 <__cxa_begin_catch+0xe8>
 10089e4:	d8000d15 	stw	zero,52(sp)
 10089e8:	31400015 	stw	r5,0(r6)
 10089ec:	d809883a 	mov	r4,sp
 10089f0:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 10089f4:	d8800d17 	ldw	r2,52(sp)
 10089f8:	dfc01117 	ldw	ra,68(sp)
 10089fc:	df001017 	ldw	fp,64(sp)
 1008a00:	ddc00f17 	ldw	r23,60(sp)
 1008a04:	dec01204 	addi	sp,sp,72
 1008a08:	f800283a 	ret
 1008a0c:	0091d3b4 	movhi	r2,18254
 1008a10:	109550c4 	addi	r2,r2,21827
 1008a14:	20bff21e 	bne	r4,r2,10089e0 <__cxa_begin_catch+0x70>
 1008a18:	28c00517 	ldw	r3,20(r5)
 1008a1c:	18000b16 	blt	r3,zero,1008a4c <__cxa_begin_catch+0xdc>
 1008a20:	18800044 	addi	r2,r3,1
 1008a24:	28800515 	stw	r2,20(r5)
 1008a28:	30800117 	ldw	r2,4(r6)
 1008a2c:	10bfffc4 	addi	r2,r2,-1
 1008a30:	30800115 	stw	r2,4(r6)
 1008a34:	39400226 	beq	r7,r5,1008a40 <__cxa_begin_catch+0xd0>
 1008a38:	29c00415 	stw	r7,16(r5)
 1008a3c:	31400015 	stw	r5,0(r6)
 1008a40:	29400a17 	ldw	r5,40(r5)
 1008a44:	d9400d15 	stw	r5,52(sp)
 1008a48:	003fe806 	br	10089ec <__cxa_begin_catch+0x7c>
 1008a4c:	00800044 	movi	r2,1
 1008a50:	10c5c83a 	sub	r2,r2,r3
 1008a54:	003ff306 	br	1008a24 <__cxa_begin_catch+0xb4>
 1008a58:	00800044 	movi	r2,1
 1008a5c:	d8800115 	stw	r2,4(sp)
 1008a60:	10088640 	call	1008864 <_ZSt9terminatev>
 1008a64:	d8800317 	ldw	r2,12(sp)
 1008a68:	00ffffc4 	movi	r3,-1
 1008a6c:	d9000217 	ldw	r4,8(sp)
 1008a70:	10c00226 	beq	r2,r3,1008a7c <__cxa_begin_catch+0x10c>
 1008a74:	d8c00115 	stw	r3,4(sp)
 1008a78:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1008a7c:	00bfffc4 	movi	r2,-1
 1008a80:	d8800115 	stw	r2,4(sp)
 1008a84:	10081380 	call	1008138 <__cxa_call_unexpected>

01008a88 <_ZdlPv>:
 1008a88:	20000126 	beq	r4,zero,1008a90 <_ZdlPv+0x8>
 1008a8c:	10096cc1 	jmpi	10096cc <free>
 1008a90:	f800283a 	ret

01008a94 <__cxa_rethrow>:
 1008a94:	defffe04 	addi	sp,sp,-8
 1008a98:	dc400015 	stw	r17,0(sp)
 1008a9c:	dfc00115 	stw	ra,4(sp)
 1008aa0:	10091640 	call	1009164 <__cxa_get_globals>
 1008aa4:	100b883a 	mov	r5,r2
 1008aa8:	10800117 	ldw	r2,4(r2)
 1008aac:	2c400017 	ldw	r17,0(r5)
 1008ab0:	10800044 	addi	r2,r2,1
 1008ab4:	28800115 	stw	r2,4(r5)
 1008ab8:	88000b26 	beq	r17,zero,1008ae8 <__cxa_rethrow+0x54>
 1008abc:	88c00b17 	ldw	r3,44(r17)
 1008ac0:	0090caf4 	movhi	r2,17195
 1008ac4:	108ac004 	addi	r2,r2,11008
 1008ac8:	89000c17 	ldw	r4,48(r17)
 1008acc:	18800726 	beq	r3,r2,1008aec <__cxa_rethrow+0x58>
 1008ad0:	28000015 	stw	zero,0(r5)
 1008ad4:	8c400b04 	addi	r17,r17,44
 1008ad8:	8809883a 	mov	r4,r17
 1008adc:	100965c0 	call	100965c <_Unwind_SjLj_Resume_or_Rethrow>
 1008ae0:	8809883a 	mov	r4,r17
 1008ae4:	10089700 	call	1008970 <__cxa_begin_catch>
 1008ae8:	10088640 	call	1008864 <_ZSt9terminatev>
 1008aec:	0091d3b4 	movhi	r2,18254
 1008af0:	109550c4 	addi	r2,r2,21827
 1008af4:	20bff61e 	bne	r4,r2,1008ad0 <__cxa_rethrow+0x3c>
 1008af8:	88800517 	ldw	r2,20(r17)
 1008afc:	0085c83a 	sub	r2,zero,r2
 1008b00:	88800515 	stw	r2,20(r17)
 1008b04:	003ff306 	br	1008ad4 <__cxa_rethrow+0x40>

01008b08 <__cxa_throw>:
 1008b08:	008040b4 	movhi	r2,258
 1008b0c:	10849f04 	addi	r2,r2,4732
 1008b10:	00c040b4 	movhi	r3,258
 1008b14:	18c49c04 	addi	r3,r3,4720
 1008b18:	12000017 	ldw	r8,0(r2)
 1008b1c:	19c00017 	ldw	r7,0(r3)
 1008b20:	defffe04 	addi	sp,sp,-8
 1008b24:	213ff004 	addi	r4,r4,-64
 1008b28:	dfc00115 	stw	ra,4(sp)
 1008b2c:	dc400015 	stw	r17,0(sp)
 1008b30:	0090caf4 	movhi	r2,17195
 1008b34:	108ac004 	addi	r2,r2,11008
 1008b38:	20800b15 	stw	r2,44(r4)
 1008b3c:	00d1d3b4 	movhi	r3,18254
 1008b40:	18d550c4 	addi	r3,r3,21827
 1008b44:	24400b04 	addi	r17,r4,44
 1008b48:	00804074 	movhi	r2,257
 1008b4c:	10a2df04 	addi	r2,r2,-29828
 1008b50:	21400015 	stw	r5,0(r4)
 1008b54:	21800115 	stw	r6,4(r4)
 1008b58:	22000215 	stw	r8,8(r4)
 1008b5c:	21c00315 	stw	r7,12(r4)
 1008b60:	20c00c15 	stw	r3,48(r4)
 1008b64:	20800d15 	stw	r2,52(r4)
 1008b68:	8809883a 	mov	r4,r17
 1008b6c:	10094940 	call	1009494 <_Unwind_SjLj_RaiseException>
 1008b70:	8809883a 	mov	r4,r17
 1008b74:	10089700 	call	1008970 <__cxa_begin_catch>
 1008b78:	10088640 	call	1008864 <_ZSt9terminatev>

01008b7c <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 1008b7c:	defffe04 	addi	sp,sp,-8
 1008b80:	00800044 	movi	r2,1
 1008b84:	dfc00115 	stw	ra,4(sp)
 1008b88:	dc000015 	stw	r16,0(sp)
 1008b8c:	28fff504 	addi	r3,r5,-44
 1008b90:	11001036 	bltu	r2,r4,1008bd4 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
 1008b94:	18800117 	ldw	r2,4(r3)
 1008b98:	10000826 	beq	r2,zero,1008bbc <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
 1008b9c:	2c000504 	addi	r16,r5,20
 1008ba0:	8009883a 	mov	r4,r16
 1008ba4:	103ee83a 	callr	r2
 1008ba8:	8009883a 	mov	r4,r16
 1008bac:	dfc00117 	ldw	ra,4(sp)
 1008bb0:	dc000017 	ldw	r16,0(sp)
 1008bb4:	dec00204 	addi	sp,sp,8
 1008bb8:	1008e501 	jmpi	1008e50 <__cxa_free_exception>
 1008bbc:	2c000504 	addi	r16,r5,20
 1008bc0:	8009883a 	mov	r4,r16
 1008bc4:	dfc00117 	ldw	ra,4(sp)
 1008bc8:	dc000017 	ldw	r16,0(sp)
 1008bcc:	dec00204 	addi	sp,sp,8
 1008bd0:	1008e501 	jmpi	1008e50 <__cxa_free_exception>
 1008bd4:	19000317 	ldw	r4,12(r3)
 1008bd8:	10087c00 	call	10087c0 <_ZN10__cxxabiv111__terminateEPFvvE>

01008bdc <_ZNSt10bad_typeidD0Ev>:
 1008bdc:	defffe04 	addi	sp,sp,-8
 1008be0:	008040b4 	movhi	r2,258
 1008be4:	10bca804 	addi	r2,r2,-3424
 1008be8:	dc400015 	stw	r17,0(sp)
 1008bec:	20800015 	stw	r2,0(r4)
 1008bf0:	2023883a 	mov	r17,r4
 1008bf4:	dfc00115 	stw	ra,4(sp)
 1008bf8:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1008bfc:	8809883a 	mov	r4,r17
 1008c00:	dfc00117 	ldw	ra,4(sp)
 1008c04:	dc400017 	ldw	r17,0(sp)
 1008c08:	dec00204 	addi	sp,sp,8
 1008c0c:	1008a881 	jmpi	1008a88 <_ZdlPv>

01008c10 <_ZNSt10bad_typeidD1Ev>:
 1008c10:	008040b4 	movhi	r2,258
 1008c14:	10bca804 	addi	r2,r2,-3424
 1008c18:	20800015 	stw	r2,0(r4)
 1008c1c:	100792c1 	jmpi	100792c <_ZNSt9exceptionD2Ev>

01008c20 <_ZNSt10bad_typeidD2Ev>:
 1008c20:	008040b4 	movhi	r2,258
 1008c24:	10bca804 	addi	r2,r2,-3424
 1008c28:	20800015 	stw	r2,0(r4)
 1008c2c:	100792c1 	jmpi	100792c <_ZNSt9exceptionD2Ev>

01008c30 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 1008c30:	defffb04 	addi	sp,sp,-20
 1008c34:	dd400315 	stw	r21,12(sp)
 1008c38:	dcc00215 	stw	r19,8(sp)
 1008c3c:	dc400115 	stw	r17,4(sp)
 1008c40:	dc000015 	stw	r16,0(sp)
 1008c44:	2823883a 	mov	r17,r5
 1008c48:	3027883a 	mov	r19,r6
 1008c4c:	382b883a 	mov	r21,r7
 1008c50:	dfc00415 	stw	ra,16(sp)
 1008c54:	2021883a 	mov	r16,r4
 1008c58:	1007b300 	call	1007b30 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 1008c5c:	10803fcc 	andi	r2,r2,255
 1008c60:	880b883a 	mov	r5,r17
 1008c64:	980d883a 	mov	r6,r19
 1008c68:	a80f883a 	mov	r7,r21
 1008c6c:	00c00044 	movi	r3,1
 1008c70:	1000051e 	bne	r2,zero,1008c88 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 1008c74:	81000217 	ldw	r4,8(r16)
 1008c78:	20800017 	ldw	r2,0(r4)
 1008c7c:	10c00617 	ldw	r3,24(r2)
 1008c80:	183ee83a 	callr	r3
 1008c84:	10c03fcc 	andi	r3,r2,255
 1008c88:	1805883a 	mov	r2,r3
 1008c8c:	dfc00417 	ldw	ra,16(sp)
 1008c90:	dd400317 	ldw	r21,12(sp)
 1008c94:	dcc00217 	ldw	r19,8(sp)
 1008c98:	dc400117 	ldw	r17,4(sp)
 1008c9c:	dc000017 	ldw	r16,0(sp)
 1008ca0:	dec00504 	addi	sp,sp,20
 1008ca4:	f800283a 	ret

01008ca8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 1008ca8:	defffe04 	addi	sp,sp,-8
 1008cac:	008040b4 	movhi	r2,258
 1008cb0:	10bcb404 	addi	r2,r2,-3376
 1008cb4:	dc400015 	stw	r17,0(sp)
 1008cb8:	20800015 	stw	r2,0(r4)
 1008cbc:	2023883a 	mov	r17,r4
 1008cc0:	dfc00115 	stw	ra,4(sp)
 1008cc4:	1007ac00 	call	1007ac0 <_ZN10__cxxabiv117__class_type_infoD2Ev>
 1008cc8:	8809883a 	mov	r4,r17
 1008ccc:	dfc00117 	ldw	ra,4(sp)
 1008cd0:	dc400017 	ldw	r17,0(sp)
 1008cd4:	dec00204 	addi	sp,sp,8
 1008cd8:	1008a881 	jmpi	1008a88 <_ZdlPv>

01008cdc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 1008cdc:	008040b4 	movhi	r2,258
 1008ce0:	10bcb404 	addi	r2,r2,-3376
 1008ce4:	20800015 	stw	r2,0(r4)
 1008ce8:	1007ac01 	jmpi	1007ac0 <_ZN10__cxxabiv117__class_type_infoD2Ev>

01008cec <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
 1008cec:	008040b4 	movhi	r2,258
 1008cf0:	10bcb404 	addi	r2,r2,-3376
 1008cf4:	20800015 	stw	r2,0(r4)
 1008cf8:	1007ac01 	jmpi	1007ac0 <_ZN10__cxxabiv117__class_type_infoD2Ev>

01008cfc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
 1008cfc:	da400017 	ldw	r9,0(sp)
 1008d00:	2011883a 	mov	r8,r4
 1008d04:	49800526 	beq	r9,r6,1008d1c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
 1008d08:	41000217 	ldw	r4,8(r8)
 1008d0c:	20800017 	ldw	r2,0(r4)
 1008d10:	da400015 	stw	r9,0(sp)
 1008d14:	10c00817 	ldw	r3,32(r2)
 1008d18:	1800683a 	jmp	r3
 1008d1c:	39000117 	ldw	r4,4(r7)
 1008d20:	40c00117 	ldw	r3,4(r8)
 1008d24:	00800184 	movi	r2,6
 1008d28:	193ff71e 	bne	r3,r4,1008d08 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
 1008d2c:	f800283a 	ret

01008d30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 1008d30:	20c00117 	ldw	r3,4(r4)
 1008d34:	38800117 	ldw	r2,4(r7)
 1008d38:	defffb04 	addi	sp,sp,-20
 1008d3c:	dfc00415 	stw	ra,16(sp)
 1008d40:	da000517 	ldw	r8,20(sp)
 1008d44:	dac00617 	ldw	r11,24(sp)
 1008d48:	da400717 	ldw	r9,28(sp)
 1008d4c:	da800817 	ldw	r10,32(sp)
 1008d50:	18800c1e 	bne	r3,r2,1008d84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 1008d54:	51800115 	stw	r6,4(r10)
 1008d58:	52000015 	stw	r8,0(r10)
 1008d5c:	28001c16 	blt	r5,zero,1008dd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
 1008d60:	4145883a 	add	r2,r8,r5
 1008d64:	48801e26 	beq	r9,r2,1008de0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 1008d68:	00800044 	movi	r2,1
 1008d6c:	0007883a 	mov	r3,zero
 1008d70:	50800315 	stw	r2,12(r10)
 1008d74:	1805883a 	mov	r2,r3
 1008d78:	dfc00417 	ldw	ra,16(sp)
 1008d7c:	dec00504 	addi	sp,sp,20
 1008d80:	f800283a 	ret
 1008d84:	42400d26 	beq	r8,r9,1008dbc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 1008d88:	21000217 	ldw	r4,8(r4)
 1008d8c:	20800017 	ldw	r2,0(r4)
 1008d90:	da000015 	stw	r8,0(sp)
 1008d94:	dac00115 	stw	r11,4(sp)
 1008d98:	da400215 	stw	r9,8(sp)
 1008d9c:	da800315 	stw	r10,12(sp)
 1008da0:	10c00717 	ldw	r3,28(r2)
 1008da4:	183ee83a 	callr	r3
 1008da8:	10c03fcc 	andi	r3,r2,255
 1008dac:	1805883a 	mov	r2,r3
 1008db0:	dfc00417 	ldw	ra,16(sp)
 1008db4:	dec00504 	addi	sp,sp,20
 1008db8:	f800283a 	ret
 1008dbc:	58800117 	ldw	r2,4(r11)
 1008dc0:	18bff11e 	bne	r3,r2,1008d88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 1008dc4:	0007883a 	mov	r3,zero
 1008dc8:	51800215 	stw	r6,8(r10)
 1008dcc:	003fe906 	br	1008d74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 1008dd0:	00bfff84 	movi	r2,-2
 1008dd4:	28800426 	beq	r5,r2,1008de8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
 1008dd8:	0007883a 	mov	r3,zero
 1008ddc:	003fe506 	br	1008d74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 1008de0:	00800184 	movi	r2,6
 1008de4:	003fe106 	br	1008d6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 1008de8:	00800044 	movi	r2,1
 1008dec:	0007883a 	mov	r3,zero
 1008df0:	50800315 	stw	r2,12(r10)
 1008df4:	003fdf06 	br	1008d74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

01008df8 <_ZNKSt9type_info14__is_pointer_pEv>:
 1008df8:	0005883a 	mov	r2,zero
 1008dfc:	f800283a 	ret

01008e00 <_ZNKSt9type_info15__is_function_pEv>:
 1008e00:	0005883a 	mov	r2,zero
 1008e04:	f800283a 	ret

01008e08 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 1008e08:	20c00117 	ldw	r3,4(r4)
 1008e0c:	28800117 	ldw	r2,4(r5)
 1008e10:	1885003a 	cmpeq	r2,r3,r2
 1008e14:	f800283a 	ret

01008e18 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 1008e18:	0005883a 	mov	r2,zero
 1008e1c:	f800283a 	ret

01008e20 <_ZNSt9type_infoD0Ev>:
 1008e20:	008040b4 	movhi	r2,258
 1008e24:	10bccc04 	addi	r2,r2,-3280
 1008e28:	20800015 	stw	r2,0(r4)
 1008e2c:	1008a881 	jmpi	1008a88 <_ZdlPv>

01008e30 <_ZNSt9type_infoD1Ev>:
 1008e30:	008040b4 	movhi	r2,258
 1008e34:	10bccc04 	addi	r2,r2,-3280
 1008e38:	20800015 	stw	r2,0(r4)
 1008e3c:	f800283a 	ret

01008e40 <_ZNSt9type_infoD2Ev>:
 1008e40:	008040b4 	movhi	r2,258
 1008e44:	10bccc04 	addi	r2,r2,-3280
 1008e48:	20800015 	stw	r2,0(r4)
 1008e4c:	f800283a 	ret

01008e50 <__cxa_free_exception>:
 1008e50:	2007883a 	mov	r3,r4
 1008e54:	008040b4 	movhi	r2,258
 1008e58:	109bd304 	addi	r2,r2,28492
 1008e5c:	213ff004 	addi	r4,r4,-64
 1008e60:	11420004 	addi	r5,r2,2048
 1008e64:	18800336 	bltu	r3,r2,1008e74 <__cxa_free_exception+0x24>
 1008e68:	1885c83a 	sub	r2,r3,r2
 1008e6c:	1004d27a 	srli	r2,r2,9
 1008e70:	19400136 	bltu	r3,r5,1008e78 <__cxa_free_exception+0x28>
 1008e74:	10096cc1 	jmpi	10096cc <free>
 1008e78:	00ffff84 	movi	r3,-2
 1008e7c:	1886183a 	rol	r3,r3,r2
 1008e80:	d0a71317 	ldw	r2,-25524(gp)
 1008e84:	10c4703a 	and	r2,r2,r3
 1008e88:	d0a71315 	stw	r2,-25524(gp)
 1008e8c:	f800283a 	ret

01008e90 <__cxa_allocate_exception>:
 1008e90:	deffed04 	addi	sp,sp,-76
 1008e94:	00804074 	movhi	r2,257
 1008e98:	10a0ae04 	addi	r2,r2,-32072
 1008e9c:	21001004 	addi	r4,r4,64
 1008ea0:	00c040b4 	movhi	r3,258
 1008ea4:	18fb5d04 	addi	r3,r3,-4748
 1008ea8:	d8800615 	stw	r2,24(sp)
 1008eac:	d9000d15 	stw	r4,52(sp)
 1008eb0:	00804074 	movhi	r2,257
 1008eb4:	10a3e804 	addi	r2,r2,-28768
 1008eb8:	d809883a 	mov	r4,sp
 1008ebc:	dfc01215 	stw	ra,72(sp)
 1008ec0:	d8c00715 	stw	r3,28(sp)
 1008ec4:	d8800915 	stw	r2,36(sp)
 1008ec8:	df001115 	stw	fp,68(sp)
 1008ecc:	ddc01015 	stw	r23,64(sp)
 1008ed0:	dec00815 	stw	sp,32(sp)
 1008ed4:	dec00a15 	stw	sp,40(sp)
 1008ed8:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1008edc:	d9000d17 	ldw	r4,52(sp)
 1008ee0:	10096e00 	call	10096e0 <malloc>
 1008ee4:	d8800e15 	stw	r2,56(sp)
 1008ee8:	1000171e 	bne	r2,zero,1008f48 <__cxa_allocate_exception+0xb8>
 1008eec:	d8c00d17 	ldw	r3,52(sp)
 1008ef0:	00808004 	movi	r2,512
 1008ef4:	d1e71317 	ldw	r7,-25524(gp)
 1008ef8:	10c02636 	bltu	r2,r3,1008f94 <__cxa_allocate_exception+0x104>
 1008efc:	3807883a 	mov	r3,r7
 1008f00:	01400044 	movi	r5,1
 1008f04:	1944703a 	and	r2,r3,r5
 1008f08:	0009883a 	mov	r4,zero
 1008f0c:	01800104 	movi	r6,4
 1008f10:	10000526 	beq	r2,zero,1008f28 <__cxa_allocate_exception+0x98>
 1008f14:	2149883a 	add	r4,r4,r5
 1008f18:	21801e26 	beq	r4,r6,1008f94 <__cxa_allocate_exception+0x104>
 1008f1c:	1806d07a 	srli	r3,r3,1
 1008f20:	1944703a 	and	r2,r3,r5
 1008f24:	103ffb1e 	bne	r2,zero,1008f14 <__cxa_allocate_exception+0x84>
 1008f28:	2904983a 	sll	r2,r5,r4
 1008f2c:	2008927a 	slli	r4,r4,9
 1008f30:	00c040b4 	movhi	r3,258
 1008f34:	18dbd304 	addi	r3,r3,28492
 1008f38:	3884b03a 	or	r2,r7,r2
 1008f3c:	20c9883a 	add	r4,r4,r3
 1008f40:	d9000e15 	stw	r4,56(sp)
 1008f44:	d0a71315 	stw	r2,-25524(gp)
 1008f48:	10091640 	call	1009164 <__cxa_get_globals>
 1008f4c:	10c00117 	ldw	r3,4(r2)
 1008f50:	d9000e17 	ldw	r4,56(sp)
 1008f54:	000b883a 	mov	r5,zero
 1008f58:	18c00044 	addi	r3,r3,1
 1008f5c:	10c00115 	stw	r3,4(r2)
 1008f60:	01801004 	movi	r6,64
 1008f64:	100a10c0 	call	100a10c <memset>
 1008f68:	d8800e17 	ldw	r2,56(sp)
 1008f6c:	d809883a 	mov	r4,sp
 1008f70:	10801004 	addi	r2,r2,64
 1008f74:	d8800f15 	stw	r2,60(sp)
 1008f78:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 1008f7c:	d8800f17 	ldw	r2,60(sp)
 1008f80:	dfc01217 	ldw	ra,72(sp)
 1008f84:	df001117 	ldw	fp,68(sp)
 1008f88:	ddc01017 	ldw	r23,64(sp)
 1008f8c:	dec01304 	addi	sp,sp,76
 1008f90:	f800283a 	ret
 1008f94:	00800044 	movi	r2,1
 1008f98:	d8800115 	stw	r2,4(sp)
 1008f9c:	10088640 	call	1008864 <_ZSt9terminatev>
 1008fa0:	d8800317 	ldw	r2,12(sp)
 1008fa4:	00ffffc4 	movi	r3,-1
 1008fa8:	d9000217 	ldw	r4,8(sp)
 1008fac:	10c00226 	beq	r2,r3,1008fb8 <__cxa_allocate_exception+0x128>
 1008fb0:	d8c00115 	stw	r3,4(sp)
 1008fb4:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 1008fb8:	00bfffc4 	movi	r2,-1
 1008fbc:	d8800115 	stw	r2,4(sp)
 1008fc0:	10081380 	call	1008138 <__cxa_call_unexpected>

01008fc4 <_ZNSt8bad_castD0Ev>:
 1008fc4:	defffe04 	addi	sp,sp,-8
 1008fc8:	008040b4 	movhi	r2,258
 1008fcc:	10bcd804 	addi	r2,r2,-3232
 1008fd0:	dc400015 	stw	r17,0(sp)
 1008fd4:	20800015 	stw	r2,0(r4)
 1008fd8:	2023883a 	mov	r17,r4
 1008fdc:	dfc00115 	stw	ra,4(sp)
 1008fe0:	100792c0 	call	100792c <_ZNSt9exceptionD2Ev>
 1008fe4:	8809883a 	mov	r4,r17
 1008fe8:	dfc00117 	ldw	ra,4(sp)
 1008fec:	dc400017 	ldw	r17,0(sp)
 1008ff0:	dec00204 	addi	sp,sp,8
 1008ff4:	1008a881 	jmpi	1008a88 <_ZdlPv>

01008ff8 <_ZNSt8bad_castD1Ev>:
 1008ff8:	008040b4 	movhi	r2,258
 1008ffc:	10bcd804 	addi	r2,r2,-3232
 1009000:	20800015 	stw	r2,0(r4)
 1009004:	100792c1 	jmpi	100792c <_ZNSt9exceptionD2Ev>

01009008 <_ZNSt8bad_castD2Ev>:
 1009008:	008040b4 	movhi	r2,258
 100900c:	10bcd804 	addi	r2,r2,-3232
 1009010:	20800015 	stw	r2,0(r4)
 1009014:	100792c1 	jmpi	100792c <_ZNSt9exceptionD2Ev>

01009018 <_Znwm>:
 1009018:	deffee04 	addi	sp,sp,-72
 100901c:	00804074 	movhi	r2,257
 1009020:	10a0ae04 	addi	r2,r2,-32072
 1009024:	d8800615 	stw	r2,24(sp)
 1009028:	00c040b4 	movhi	r3,258
 100902c:	18fb6104 	addi	r3,r3,-4732
 1009030:	00804074 	movhi	r2,257
 1009034:	10a43d04 	addi	r2,r2,-28428
 1009038:	d9000e15 	stw	r4,56(sp)
 100903c:	d809883a 	mov	r4,sp
 1009040:	d8800915 	stw	r2,36(sp)
 1009044:	dfc01115 	stw	ra,68(sp)
 1009048:	df001015 	stw	fp,64(sp)
 100904c:	ddc00f15 	stw	r23,60(sp)
 1009050:	d8c00715 	stw	r3,28(sp)
 1009054:	dec00815 	stw	sp,32(sp)
 1009058:	dec00a15 	stw	sp,40(sp)
 100905c:	100916c0 	call	100916c <_Unwind_SjLj_Register>
 1009060:	d8800e17 	ldw	r2,56(sp)
 1009064:	10000a1e 	bne	r2,zero,1009090 <_Znwm+0x78>
 1009068:	00800044 	movi	r2,1
 100906c:	d8800e15 	stw	r2,56(sp)
 1009070:	00000706 	br	1009090 <_Znwm+0x78>
 1009074:	008040b4 	movhi	r2,258
 1009078:	108ba404 	addi	r2,r2,11920
 100907c:	10c00017 	ldw	r3,0(r2)
 1009080:	18000f26 	beq	r3,zero,10090c0 <_Znwm+0xa8>
 1009084:	00800044 	movi	r2,1
 1009088:	d8800115 	stw	r2,4(sp)
 100908c:	183ee83a 	callr	r3
 1009090:	d9000e17 	ldw	r4,56(sp)
 1009094:	10096e00 	call	10096e0 <malloc>
 1009098:	d8800d15 	stw	r2,52(sp)
 100909c:	103ff526 	beq	r2,zero,1009074 <_Znwm+0x5c>
 10090a0:	d809883a 	mov	r4,sp
 10090a4:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 10090a8:	d8800d17 	ldw	r2,52(sp)
 10090ac:	dfc01117 	ldw	ra,68(sp)
 10090b0:	df001017 	ldw	fp,64(sp)
 10090b4:	ddc00f17 	ldw	r23,60(sp)
 10090b8:	dec01204 	addi	sp,sp,72
 10090bc:	f800283a 	ret
 10090c0:	01000104 	movi	r4,4
 10090c4:	1008e900 	call	1008e90 <__cxa_allocate_exception>
 10090c8:	1009883a 	mov	r4,r2
 10090cc:	008040b4 	movhi	r2,258
 10090d0:	10bc8504 	addi	r2,r2,-3564
 10090d4:	20800015 	stw	r2,0(r4)
 10090d8:	00c00044 	movi	r3,1
 10090dc:	d8c00115 	stw	r3,4(sp)
 10090e0:	014040b4 	movhi	r5,258
 10090e4:	297c8c04 	addi	r5,r5,-3536
 10090e8:	01804034 	movhi	r6,256
 10090ec:	319e7404 	addi	r6,r6,31184
 10090f0:	1008b080 	call	1008b08 <__cxa_throw>
 10090f4:	d8800317 	ldw	r2,12(sp)
 10090f8:	00ffffc4 	movi	r3,-1
 10090fc:	d9000217 	ldw	r4,8(sp)
 1009100:	10c00226 	beq	r2,r3,100910c <_Znwm+0xf4>
 1009104:	d8c00115 	stw	r3,4(sp)
 1009108:	10094380 	call	1009438 <_Unwind_SjLj_Resume>
 100910c:	00bfffc4 	movi	r2,-1
 1009110:	d8800115 	stw	r2,4(sp)
 1009114:	10081380 	call	1008138 <__cxa_call_unexpected>

01009118 <__cxa_call_terminate>:
 1009118:	defffe04 	addi	sp,sp,-8
 100911c:	dc000015 	stw	r16,0(sp)
 1009120:	dfc00115 	stw	ra,4(sp)
 1009124:	2021883a 	mov	r16,r4
 1009128:	20000626 	beq	r4,zero,1009144 <__cxa_call_terminate+0x2c>
 100912c:	10089700 	call	1008970 <__cxa_begin_catch>
 1009130:	80c00017 	ldw	r3,0(r16)
 1009134:	0090caf4 	movhi	r2,17195
 1009138:	108ac004 	addi	r2,r2,11008
 100913c:	81000117 	ldw	r4,4(r16)
 1009140:	18800126 	beq	r3,r2,1009148 <__cxa_call_terminate+0x30>
 1009144:	10088640 	call	1008864 <_ZSt9terminatev>
 1009148:	0091d3b4 	movhi	r2,18254
 100914c:	109550c4 	addi	r2,r2,21827
 1009150:	20bffc1e 	bne	r4,r2,1009144 <__cxa_call_terminate+0x2c>
 1009154:	813ff817 	ldw	r4,-32(r16)
 1009158:	10087c00 	call	10087c0 <_ZN10__cxxabiv111__terminateEPFvvE>

0100915c <__cxa_get_globals_fast>:
 100915c:	d0a71404 	addi	r2,gp,-25520
 1009160:	f800283a 	ret

01009164 <__cxa_get_globals>:
 1009164:	d0a71404 	addi	r2,gp,-25520
 1009168:	f800283a 	ret

0100916c <_Unwind_SjLj_Register>:
 100916c:	d0a71617 	ldw	r2,-25512(gp)
 1009170:	20800015 	stw	r2,0(r4)
 1009174:	d1271615 	stw	r4,-25512(gp)
 1009178:	f800283a 	ret

0100917c <_Unwind_SjLj_Unregister>:
 100917c:	20800017 	ldw	r2,0(r4)
 1009180:	d0a71615 	stw	r2,-25512(gp)
 1009184:	f800283a 	ret

01009188 <_Unwind_GetGR>:
 1009188:	20800017 	ldw	r2,0(r4)
 100918c:	294b883a 	add	r5,r5,r5
 1009190:	294b883a 	add	r5,r5,r5
 1009194:	288b883a 	add	r5,r5,r2
 1009198:	28800217 	ldw	r2,8(r5)
 100919c:	f800283a 	ret

010091a0 <_Unwind_GetCFA>:
 10091a0:	21000017 	ldw	r4,0(r4)
 10091a4:	0005883a 	mov	r2,zero
 10091a8:	20000126 	beq	r4,zero,10091b0 <_Unwind_GetCFA+0x10>
 10091ac:	20800a17 	ldw	r2,40(r4)
 10091b0:	f800283a 	ret

010091b4 <_Unwind_SetGR>:
 10091b4:	20800017 	ldw	r2,0(r4)
 10091b8:	294b883a 	add	r5,r5,r5
 10091bc:	294b883a 	add	r5,r5,r5
 10091c0:	288b883a 	add	r5,r5,r2
 10091c4:	29800215 	stw	r6,8(r5)
 10091c8:	f800283a 	ret

010091cc <_Unwind_GetIP>:
 10091cc:	20c00017 	ldw	r3,0(r4)
 10091d0:	18800117 	ldw	r2,4(r3)
 10091d4:	10800044 	addi	r2,r2,1
 10091d8:	f800283a 	ret

010091dc <_Unwind_GetIPInfo>:
 10091dc:	20c00017 	ldw	r3,0(r4)
 10091e0:	28000015 	stw	zero,0(r5)
 10091e4:	18800117 	ldw	r2,4(r3)
 10091e8:	10800044 	addi	r2,r2,1
 10091ec:	f800283a 	ret

010091f0 <_Unwind_SetIP>:
 10091f0:	20800017 	ldw	r2,0(r4)
 10091f4:	297fffc4 	addi	r5,r5,-1
 10091f8:	11400115 	stw	r5,4(r2)
 10091fc:	f800283a 	ret

01009200 <_Unwind_GetLanguageSpecificData>:
 1009200:	20c00017 	ldw	r3,0(r4)
 1009204:	18800717 	ldw	r2,28(r3)
 1009208:	f800283a 	ret

0100920c <_Unwind_GetRegionStart>:
 100920c:	0005883a 	mov	r2,zero
 1009210:	f800283a 	ret

01009214 <_Unwind_FindEnclosingFunction>:
 1009214:	0005883a 	mov	r2,zero
 1009218:	f800283a 	ret

0100921c <_Unwind_GetDataRelBase>:
 100921c:	0005883a 	mov	r2,zero
 1009220:	f800283a 	ret

01009224 <_Unwind_GetTextRelBase>:
 1009224:	0005883a 	mov	r2,zero
 1009228:	f800283a 	ret

0100922c <_Unwind_ForcedUnwind_Phase2>:
 100922c:	defff604 	addi	sp,sp,-40
 1009230:	dd400815 	stw	r21,32(sp)
 1009234:	dd000715 	stw	r20,28(sp)
 1009238:	25400317 	ldw	r21,12(r4)
 100923c:	25000417 	ldw	r20,16(r4)
 1009240:	28800017 	ldw	r2,0(r5)
 1009244:	dc800515 	stw	r18,20(sp)
 1009248:	dc000315 	stw	r16,12(sp)
 100924c:	2825883a 	mov	r18,r5
 1009250:	2021883a 	mov	r16,r4
 1009254:	dfc00915 	stw	ra,36(sp)
 1009258:	dcc00615 	stw	r19,24(sp)
 100925c:	dc400415 	stw	r17,16(sp)
 1009260:	00001406 	br	10092b4 <_Unwind_ForcedUnwind_Phase2+0x88>
 1009264:	00800144 	movi	r2,5
 1009268:	88802626 	beq	r17,r2,1009304 <_Unwind_ForcedUnwind_Phase2+0xd8>
 100926c:	98000c26 	beq	r19,zero,10092a0 <_Unwind_ForcedUnwind_Phase2+0x74>
 1009270:	82000017 	ldw	r8,0(r16)
 1009274:	dc000015 	stw	r16,0(sp)
 1009278:	dc800115 	stw	r18,4(sp)
 100927c:	82400117 	ldw	r9,4(r16)
 1009280:	400d883a 	mov	r6,r8
 1009284:	480f883a 	mov	r7,r9
 1009288:	983ee83a 	callr	r19
 100928c:	1023883a 	mov	r17,r2
 1009290:	008001c4 	movi	r2,7
 1009294:	88801b26 	beq	r17,r2,1009304 <_Unwind_ForcedUnwind_Phase2+0xd8>
 1009298:	00800204 	movi	r2,8
 100929c:	8880181e 	bne	r17,r2,1009300 <_Unwind_ForcedUnwind_Phase2+0xd4>
 10092a0:	91000017 	ldw	r4,0(r18)
 10092a4:	100917c0 	call	100917c <_Unwind_SjLj_Unregister>
 10092a8:	90800017 	ldw	r2,0(r18)
 10092ac:	10800017 	ldw	r2,0(r2)
 10092b0:	90800015 	stw	r2,0(r18)
 10092b4:	01400684 	movi	r5,26
 10092b8:	04400144 	movi	r17,5
 10092bc:	0027883a 	mov	r19,zero
 10092c0:	10000326 	beq	r2,zero,10092d0 <_Unwind_ForcedUnwind_Phase2+0xa4>
 10092c4:	14c00617 	ldw	r19,24(r2)
 10092c8:	0023883a 	mov	r17,zero
 10092cc:	01400284 	movi	r5,10
 10092d0:	dc000015 	stw	r16,0(sp)
 10092d4:	dc800115 	stw	r18,4(sp)
 10092d8:	80800017 	ldw	r2,0(r16)
 10092dc:	dd000215 	stw	r20,8(sp)
 10092e0:	80c00117 	ldw	r3,4(r16)
 10092e4:	01000044 	movi	r4,1
 10092e8:	100d883a 	mov	r6,r2
 10092ec:	180f883a 	mov	r7,r3
 10092f0:	a83ee83a 	callr	r21
 10092f4:	01400284 	movi	r5,10
 10092f8:	01000044 	movi	r4,1
 10092fc:	103fd926 	beq	r2,zero,1009264 <_Unwind_ForcedUnwind_Phase2+0x38>
 1009300:	04400084 	movi	r17,2
 1009304:	8805883a 	mov	r2,r17
 1009308:	dfc00917 	ldw	ra,36(sp)
 100930c:	dd400817 	ldw	r21,32(sp)
 1009310:	dd000717 	ldw	r20,28(sp)
 1009314:	dcc00617 	ldw	r19,24(sp)
 1009318:	dc800517 	ldw	r18,20(sp)
 100931c:	dc400417 	ldw	r17,16(sp)
 1009320:	dc000317 	ldw	r16,12(sp)
 1009324:	dec00a04 	addi	sp,sp,40
 1009328:	f800283a 	ret

0100932c <_Unwind_DeleteException>:
 100932c:	20800217 	ldw	r2,8(r4)
 1009330:	200b883a 	mov	r5,r4
 1009334:	01000044 	movi	r4,1
 1009338:	10000126 	beq	r2,zero,1009340 <_Unwind_DeleteException+0x14>
 100933c:	1000683a 	jmp	r2
 1009340:	f800283a 	ret

01009344 <_Unwind_RaiseException_Phase2>:
 1009344:	defffa04 	addi	sp,sp,-24
 1009348:	dc800415 	stw	r18,16(sp)
 100934c:	2825883a 	mov	r18,r5
 1009350:	29400017 	ldw	r5,0(r5)
 1009354:	dc400315 	stw	r17,12(sp)
 1009358:	dfc00515 	stw	ra,20(sp)
 100935c:	dc000215 	stw	r16,8(sp)
 1009360:	2023883a 	mov	r17,r4
 1009364:	28001b26 	beq	r5,zero,10093d4 <_Unwind_RaiseException_Phase2+0x90>
 1009368:	88800417 	ldw	r2,16(r17)
 100936c:	0007883a 	mov	r3,zero
 1009370:	2a000617 	ldw	r8,24(r5)
 1009374:	28a1003a 	cmpeq	r16,r5,r2
 1009378:	802090ba 	slli	r16,r16,2
 100937c:	18001b1e 	bne	r3,zero,10093ec <_Unwind_RaiseException_Phase2+0xa8>
 1009380:	40000e26 	beq	r8,zero,10093bc <_Unwind_RaiseException_Phase2+0x78>
 1009384:	88800017 	ldw	r2,0(r17)
 1009388:	dc400015 	stw	r17,0(sp)
 100938c:	dc800115 	stw	r18,4(sp)
 1009390:	88c00117 	ldw	r3,4(r17)
 1009394:	01000044 	movi	r4,1
 1009398:	81400094 	ori	r5,r16,2
 100939c:	180f883a 	mov	r7,r3
 10093a0:	100d883a 	mov	r6,r2
 10093a4:	403ee83a 	callr	r8
 10093a8:	1007883a 	mov	r3,r2
 10093ac:	008001c4 	movi	r2,7
 10093b0:	18800f26 	beq	r3,r2,10093f0 <_Unwind_RaiseException_Phase2+0xac>
 10093b4:	00800204 	movi	r2,8
 10093b8:	18800c1e 	bne	r3,r2,10093ec <_Unwind_RaiseException_Phase2+0xa8>
 10093bc:	8000131e 	bne	r16,zero,100940c <_Unwind_RaiseException_Phase2+0xc8>
 10093c0:	91400017 	ldw	r5,0(r18)
 10093c4:	28800017 	ldw	r2,0(r5)
 10093c8:	100b883a 	mov	r5,r2
 10093cc:	90800015 	stw	r2,0(r18)
 10093d0:	283fe51e 	bne	r5,zero,1009368 <_Unwind_RaiseException_Phase2+0x24>
 10093d4:	88800417 	ldw	r2,16(r17)
 10093d8:	00c00144 	movi	r3,5
 10093dc:	0011883a 	mov	r8,zero
 10093e0:	28a1003a 	cmpeq	r16,r5,r2
 10093e4:	802090ba 	slli	r16,r16,2
 10093e8:	183fe526 	beq	r3,zero,1009380 <_Unwind_RaiseException_Phase2+0x3c>
 10093ec:	00c00084 	movi	r3,2
 10093f0:	1805883a 	mov	r2,r3
 10093f4:	dfc00517 	ldw	ra,20(sp)
 10093f8:	dc800417 	ldw	r18,16(sp)
 10093fc:	dc400317 	ldw	r17,12(sp)
 1009400:	dc000217 	ldw	r16,8(sp)
 1009404:	dec00604 	addi	sp,sp,24
 1009408:	f800283a 	ret
 100940c:	10096b40 	call	10096b4 <abort>

01009410 <uw_install_context>:
 1009410:	28800017 	ldw	r2,0(r5)
 1009414:	deffff04 	addi	sp,sp,-4
 1009418:	df000015 	stw	fp,0(sp)
 100941c:	10c00804 	addi	r3,r2,32
 1009420:	d839883a 	mov	fp,sp
 1009424:	d0a71615 	stw	r2,-25512(gp)
 1009428:	19000117 	ldw	r4,4(r3)
 100942c:	1f000017 	ldw	fp,0(r3)
 1009430:	1ec00217 	ldw	sp,8(r3)
 1009434:	2000683a 	jmp	r4

01009438 <_Unwind_SjLj_Resume>:
 1009438:	d0e71617 	ldw	r3,-25512(gp)
 100943c:	20800317 	ldw	r2,12(r4)
 1009440:	defffc04 	addi	sp,sp,-16
 1009444:	dfc00315 	stw	ra,12(sp)
 1009448:	dc000215 	stw	r16,8(sp)
 100944c:	d8c00015 	stw	r3,0(sp)
 1009450:	d8c00115 	stw	r3,4(sp)
 1009454:	1000071e 	bne	r2,zero,1009474 <_Unwind_SjLj_Resume+0x3c>
 1009458:	dc000104 	addi	r16,sp,4
 100945c:	800b883a 	mov	r5,r16
 1009460:	10093440 	call	1009344 <_Unwind_RaiseException_Phase2>
 1009464:	1007883a 	mov	r3,r2
 1009468:	008001c4 	movi	r2,7
 100946c:	18800626 	beq	r3,r2,1009488 <_Unwind_SjLj_Resume+0x50>
 1009470:	10096b40 	call	10096b4 <abort>
 1009474:	dc000104 	addi	r16,sp,4
 1009478:	800b883a 	mov	r5,r16
 100947c:	100922c0 	call	100922c <_Unwind_ForcedUnwind_Phase2>
 1009480:	1007883a 	mov	r3,r2
 1009484:	003ff806 	br	1009468 <_Unwind_SjLj_Resume+0x30>
 1009488:	800b883a 	mov	r5,r16
 100948c:	d809883a 	mov	r4,sp
 1009490:	10094100 	call	1009410 <uw_install_context>

01009494 <_Unwind_SjLj_RaiseException>:
 1009494:	d0a71617 	ldw	r2,-25512(gp)
 1009498:	defff804 	addi	sp,sp,-32
 100949c:	dc000415 	stw	r16,16(sp)
 10094a0:	dfc00715 	stw	ra,28(sp)
 10094a4:	dc800615 	stw	r18,24(sp)
 10094a8:	dc400515 	stw	r17,20(sp)
 10094ac:	2021883a 	mov	r16,r4
 10094b0:	d8800215 	stw	r2,8(sp)
 10094b4:	d8800315 	stw	r2,12(sp)
 10094b8:	10001626 	beq	r2,zero,1009514 <_Unwind_SjLj_RaiseException+0x80>
 10094bc:	dc400304 	addi	r17,sp,12
 10094c0:	04800184 	movi	r18,6
 10094c4:	00000106 	br	10094cc <_Unwind_SjLj_RaiseException+0x38>
 10094c8:	d8800315 	stw	r2,12(sp)
 10094cc:	12000617 	ldw	r8,24(r2)
 10094d0:	40000d26 	beq	r8,zero,1009508 <_Unwind_SjLj_RaiseException+0x74>
 10094d4:	80800017 	ldw	r2,0(r16)
 10094d8:	dc000015 	stw	r16,0(sp)
 10094dc:	80c00117 	ldw	r3,4(r16)
 10094e0:	01000044 	movi	r4,1
 10094e4:	dc400115 	stw	r17,4(sp)
 10094e8:	180f883a 	mov	r7,r3
 10094ec:	200b883a 	mov	r5,r4
 10094f0:	100d883a 	mov	r6,r2
 10094f4:	403ee83a 	callr	r8
 10094f8:	1007883a 	mov	r3,r2
 10094fc:	14800d26 	beq	r2,r18,1009534 <_Unwind_SjLj_RaiseException+0xa0>
 1009500:	00800204 	movi	r2,8
 1009504:	1880191e 	bne	r3,r2,100956c <_Unwind_SjLj_RaiseException+0xd8>
 1009508:	d8800317 	ldw	r2,12(sp)
 100950c:	10800017 	ldw	r2,0(r2)
 1009510:	103fed1e 	bne	r2,zero,10094c8 <_Unwind_SjLj_RaiseException+0x34>
 1009514:	00c00144 	movi	r3,5
 1009518:	1805883a 	mov	r2,r3
 100951c:	dfc00717 	ldw	ra,28(sp)
 1009520:	dc800617 	ldw	r18,24(sp)
 1009524:	dc400517 	ldw	r17,20(sp)
 1009528:	dc000417 	ldw	r16,16(sp)
 100952c:	dec00804 	addi	sp,sp,32
 1009530:	f800283a 	ret
 1009534:	d8800317 	ldw	r2,12(sp)
 1009538:	80000315 	stw	zero,12(r16)
 100953c:	8009883a 	mov	r4,r16
 1009540:	80800415 	stw	r2,16(r16)
 1009544:	d8800217 	ldw	r2,8(sp)
 1009548:	880b883a 	mov	r5,r17
 100954c:	d8800315 	stw	r2,12(sp)
 1009550:	10093440 	call	1009344 <_Unwind_RaiseException_Phase2>
 1009554:	1007883a 	mov	r3,r2
 1009558:	008001c4 	movi	r2,7
 100955c:	18bfee1e 	bne	r3,r2,1009518 <_Unwind_SjLj_RaiseException+0x84>
 1009560:	880b883a 	mov	r5,r17
 1009564:	d9000204 	addi	r4,sp,8
 1009568:	10094100 	call	1009410 <uw_install_context>
 100956c:	00c000c4 	movi	r3,3
 1009570:	1805883a 	mov	r2,r3
 1009574:	dfc00717 	ldw	ra,28(sp)
 1009578:	dc800617 	ldw	r18,24(sp)
 100957c:	dc400517 	ldw	r17,20(sp)
 1009580:	dc000417 	ldw	r16,16(sp)
 1009584:	dec00804 	addi	sp,sp,32
 1009588:	f800283a 	ret

0100958c <_Unwind_SjLj_ForcedUnwind>:
 100958c:	defffc04 	addi	sp,sp,-16
 1009590:	d0a71617 	ldw	r2,-25512(gp)
 1009594:	dc000215 	stw	r16,8(sp)
 1009598:	dc000104 	addi	r16,sp,4
 100959c:	21400315 	stw	r5,12(r4)
 10095a0:	21800415 	stw	r6,16(r4)
 10095a4:	800b883a 	mov	r5,r16
 10095a8:	dfc00315 	stw	ra,12(sp)
 10095ac:	d8800015 	stw	r2,0(sp)
 10095b0:	d8800115 	stw	r2,4(sp)
 10095b4:	100922c0 	call	100922c <_Unwind_ForcedUnwind_Phase2>
 10095b8:	00c001c4 	movi	r3,7
 10095bc:	10c00426 	beq	r2,r3,10095d0 <_Unwind_SjLj_ForcedUnwind+0x44>
 10095c0:	dfc00317 	ldw	ra,12(sp)
 10095c4:	dc000217 	ldw	r16,8(sp)
 10095c8:	dec00404 	addi	sp,sp,16
 10095cc:	f800283a 	ret
 10095d0:	800b883a 	mov	r5,r16
 10095d4:	d809883a 	mov	r4,sp
 10095d8:	10094100 	call	1009410 <uw_install_context>

010095dc <_Unwind_Backtrace>:
 10095dc:	d0a71617 	ldw	r2,-25512(gp)
 10095e0:	defffa04 	addi	sp,sp,-24
 10095e4:	dcc00415 	stw	r19,16(sp)
 10095e8:	dc800315 	stw	r18,12(sp)
 10095ec:	dc400215 	stw	r17,8(sp)
 10095f0:	2025883a 	mov	r18,r4
 10095f4:	2823883a 	mov	r17,r5
 10095f8:	04c00144 	movi	r19,5
 10095fc:	dfc00515 	stw	ra,20(sp)
 1009600:	dc000115 	stw	r16,4(sp)
 1009604:	d8800015 	stw	r2,0(sp)
 1009608:	00000406 	br	100961c <_Unwind_Backtrace+0x40>
 100960c:	84c00b26 	beq	r16,r19,100963c <_Unwind_Backtrace+0x60>
 1009610:	d8800017 	ldw	r2,0(sp)
 1009614:	10800017 	ldw	r2,0(r2)
 1009618:	d8800015 	stw	r2,0(sp)
 100961c:	04000144 	movi	r16,5
 1009620:	10000126 	beq	r2,zero,1009628 <_Unwind_Backtrace+0x4c>
 1009624:	0021883a 	mov	r16,zero
 1009628:	d809883a 	mov	r4,sp
 100962c:	880b883a 	mov	r5,r17
 1009630:	903ee83a 	callr	r18
 1009634:	103ff526 	beq	r2,zero,100960c <_Unwind_Backtrace+0x30>
 1009638:	040000c4 	movi	r16,3
 100963c:	8005883a 	mov	r2,r16
 1009640:	dfc00517 	ldw	ra,20(sp)
 1009644:	dcc00417 	ldw	r19,16(sp)
 1009648:	dc800317 	ldw	r18,12(sp)
 100964c:	dc400217 	ldw	r17,8(sp)
 1009650:	dc000117 	ldw	r16,4(sp)
 1009654:	dec00604 	addi	sp,sp,24
 1009658:	f800283a 	ret

0100965c <_Unwind_SjLj_Resume_or_Rethrow>:
 100965c:	20800317 	ldw	r2,12(r4)
 1009660:	defffc04 	addi	sp,sp,-16
 1009664:	dfc00315 	stw	ra,12(sp)
 1009668:	dc000215 	stw	r16,8(sp)
 100966c:	10000926 	beq	r2,zero,1009694 <_Unwind_SjLj_Resume_or_Rethrow+0x38>
 1009670:	d0a71617 	ldw	r2,-25512(gp)
 1009674:	dc000104 	addi	r16,sp,4
 1009678:	800b883a 	mov	r5,r16
 100967c:	d8800015 	stw	r2,0(sp)
 1009680:	d8800115 	stw	r2,4(sp)
 1009684:	100922c0 	call	100922c <_Unwind_ForcedUnwind_Phase2>
 1009688:	00c001c4 	movi	r3,7
 100968c:	10c00626 	beq	r2,r3,10096a8 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
 1009690:	10096b40 	call	10096b4 <abort>
 1009694:	10094940 	call	1009494 <_Unwind_SjLj_RaiseException>
 1009698:	dfc00317 	ldw	ra,12(sp)
 100969c:	dc000217 	ldw	r16,8(sp)
 10096a0:	dec00404 	addi	sp,sp,16
 10096a4:	f800283a 	ret
 10096a8:	800b883a 	mov	r5,r16
 10096ac:	d809883a 	mov	r4,sp
 10096b0:	10094100 	call	1009410 <uw_install_context>

010096b4 <abort>:
 10096b4:	deffff04 	addi	sp,sp,-4
 10096b8:	01000184 	movi	r4,6
 10096bc:	dfc00015 	stw	ra,0(sp)
 10096c0:	100a3580 	call	100a358 <raise>
 10096c4:	01000044 	movi	r4,1
 10096c8:	10133100 	call	1013310 <_exit>

010096cc <free>:
 10096cc:	008040b4 	movhi	r2,258
 10096d0:	1084a204 	addi	r2,r2,4744
 10096d4:	200b883a 	mov	r5,r4
 10096d8:	11000017 	ldw	r4,0(r2)
 10096dc:	100e49c1 	jmpi	100e49c <_free_r>

010096e0 <malloc>:
 10096e0:	008040b4 	movhi	r2,258
 10096e4:	1084a204 	addi	r2,r2,4744
 10096e8:	200b883a 	mov	r5,r4
 10096ec:	11000017 	ldw	r4,0(r2)
 10096f0:	10096f41 	jmpi	10096f4 <_malloc_r>

010096f4 <_malloc_r>:
 10096f4:	defff604 	addi	sp,sp,-40
 10096f8:	28c002c4 	addi	r3,r5,11
 10096fc:	00800584 	movi	r2,22
 1009700:	dc800215 	stw	r18,8(sp)
 1009704:	dfc00915 	stw	ra,36(sp)
 1009708:	df000815 	stw	fp,32(sp)
 100970c:	ddc00715 	stw	r23,28(sp)
 1009710:	dd800615 	stw	r22,24(sp)
 1009714:	dd400515 	stw	r21,20(sp)
 1009718:	dd000415 	stw	r20,16(sp)
 100971c:	dcc00315 	stw	r19,12(sp)
 1009720:	dc400115 	stw	r17,4(sp)
 1009724:	dc000015 	stw	r16,0(sp)
 1009728:	2025883a 	mov	r18,r4
 100972c:	10c01236 	bltu	r2,r3,1009778 <_malloc_r+0x84>
 1009730:	04400404 	movi	r17,16
 1009734:	8940142e 	bgeu	r17,r5,1009788 <_malloc_r+0x94>
 1009738:	00800304 	movi	r2,12
 100973c:	0007883a 	mov	r3,zero
 1009740:	90800015 	stw	r2,0(r18)
 1009744:	1805883a 	mov	r2,r3
 1009748:	dfc00917 	ldw	ra,36(sp)
 100974c:	df000817 	ldw	fp,32(sp)
 1009750:	ddc00717 	ldw	r23,28(sp)
 1009754:	dd800617 	ldw	r22,24(sp)
 1009758:	dd400517 	ldw	r21,20(sp)
 100975c:	dd000417 	ldw	r20,16(sp)
 1009760:	dcc00317 	ldw	r19,12(sp)
 1009764:	dc800217 	ldw	r18,8(sp)
 1009768:	dc400117 	ldw	r17,4(sp)
 100976c:	dc000017 	ldw	r16,0(sp)
 1009770:	dec00a04 	addi	sp,sp,40
 1009774:	f800283a 	ret
 1009778:	00bffe04 	movi	r2,-8
 100977c:	18a2703a 	and	r17,r3,r2
 1009780:	883fed16 	blt	r17,zero,1009738 <_malloc_r+0x44>
 1009784:	897fec36 	bltu	r17,r5,1009738 <_malloc_r+0x44>
 1009788:	9009883a 	mov	r4,r18
 100978c:	1013f780 	call	1013f78 <__malloc_lock>
 1009790:	00807dc4 	movi	r2,503
 1009794:	14402b2e 	bgeu	r2,r17,1009844 <_malloc_r+0x150>
 1009798:	8806d27a 	srli	r3,r17,9
 100979c:	18003f1e 	bne	r3,zero,100989c <_malloc_r+0x1a8>
 10097a0:	880cd0fa 	srli	r6,r17,3
 10097a4:	300490fa 	slli	r2,r6,3
 10097a8:	02c040b4 	movhi	r11,258
 10097ac:	5afdfd04 	addi	r11,r11,-2060
 10097b0:	12cb883a 	add	r5,r2,r11
 10097b4:	2c000317 	ldw	r16,12(r5)
 10097b8:	580f883a 	mov	r7,r11
 10097bc:	2c00041e 	bne	r5,r16,10097d0 <_malloc_r+0xdc>
 10097c0:	00000a06 	br	10097ec <_malloc_r+0xf8>
 10097c4:	1800860e 	bge	r3,zero,10099e0 <_malloc_r+0x2ec>
 10097c8:	84000317 	ldw	r16,12(r16)
 10097cc:	2c000726 	beq	r5,r16,10097ec <_malloc_r+0xf8>
 10097d0:	80800117 	ldw	r2,4(r16)
 10097d4:	00ffff04 	movi	r3,-4
 10097d8:	10c8703a 	and	r4,r2,r3
 10097dc:	2447c83a 	sub	r3,r4,r17
 10097e0:	008003c4 	movi	r2,15
 10097e4:	10fff70e 	bge	r2,r3,10097c4 <_malloc_r+0xd0>
 10097e8:	31bfffc4 	addi	r6,r6,-1
 10097ec:	32400044 	addi	r9,r6,1
 10097f0:	028040b4 	movhi	r10,258
 10097f4:	52bdff04 	addi	r10,r10,-2052
 10097f8:	54000217 	ldw	r16,8(r10)
 10097fc:	8280a026 	beq	r16,r10,1009a80 <_malloc_r+0x38c>
 1009800:	80800117 	ldw	r2,4(r16)
 1009804:	00ffff04 	movi	r3,-4
 1009808:	10ca703a 	and	r5,r2,r3
 100980c:	2c4dc83a 	sub	r6,r5,r17
 1009810:	008003c4 	movi	r2,15
 1009814:	11808316 	blt	r2,r6,1009a24 <_malloc_r+0x330>
 1009818:	52800315 	stw	r10,12(r10)
 100981c:	52800215 	stw	r10,8(r10)
 1009820:	30002916 	blt	r6,zero,10098c8 <_malloc_r+0x1d4>
 1009824:	8147883a 	add	r3,r16,r5
 1009828:	18800117 	ldw	r2,4(r3)
 100982c:	9009883a 	mov	r4,r18
 1009830:	10800054 	ori	r2,r2,1
 1009834:	18800115 	stw	r2,4(r3)
 1009838:	10140800 	call	1014080 <__malloc_unlock>
 100983c:	80c00204 	addi	r3,r16,8
 1009840:	003fc006 	br	1009744 <_malloc_r+0x50>
 1009844:	02c040b4 	movhi	r11,258
 1009848:	5afdfd04 	addi	r11,r11,-2060
 100984c:	8ac5883a 	add	r2,r17,r11
 1009850:	14000317 	ldw	r16,12(r2)
 1009854:	580f883a 	mov	r7,r11
 1009858:	8806d0fa 	srli	r3,r17,3
 100985c:	14006c26 	beq	r2,r16,1009a10 <_malloc_r+0x31c>
 1009860:	80c00117 	ldw	r3,4(r16)
 1009864:	00bfff04 	movi	r2,-4
 1009868:	81800317 	ldw	r6,12(r16)
 100986c:	1886703a 	and	r3,r3,r2
 1009870:	80c7883a 	add	r3,r16,r3
 1009874:	18800117 	ldw	r2,4(r3)
 1009878:	81400217 	ldw	r5,8(r16)
 100987c:	9009883a 	mov	r4,r18
 1009880:	10800054 	ori	r2,r2,1
 1009884:	18800115 	stw	r2,4(r3)
 1009888:	31400215 	stw	r5,8(r6)
 100988c:	29800315 	stw	r6,12(r5)
 1009890:	10140800 	call	1014080 <__malloc_unlock>
 1009894:	80c00204 	addi	r3,r16,8
 1009898:	003faa06 	br	1009744 <_malloc_r+0x50>
 100989c:	00800104 	movi	r2,4
 10098a0:	10c0052e 	bgeu	r2,r3,10098b8 <_malloc_r+0x1c4>
 10098a4:	00800504 	movi	r2,20
 10098a8:	10c07836 	bltu	r2,r3,1009a8c <_malloc_r+0x398>
 10098ac:	198016c4 	addi	r6,r3,91
 10098b0:	300490fa 	slli	r2,r6,3
 10098b4:	003fbc06 	br	10097a8 <_malloc_r+0xb4>
 10098b8:	8804d1ba 	srli	r2,r17,6
 10098bc:	11800e04 	addi	r6,r2,56
 10098c0:	300490fa 	slli	r2,r6,3
 10098c4:	003fb806 	br	10097a8 <_malloc_r+0xb4>
 10098c8:	00807fc4 	movi	r2,511
 10098cc:	1140bb36 	bltu	r2,r5,1009bbc <_malloc_r+0x4c8>
 10098d0:	2806d0fa 	srli	r3,r5,3
 10098d4:	573ffe04 	addi	fp,r10,-8
 10098d8:	00800044 	movi	r2,1
 10098dc:	180890fa 	slli	r4,r3,3
 10098e0:	1807d0ba 	srai	r3,r3,2
 10098e4:	e1c00117 	ldw	r7,4(fp)
 10098e8:	5909883a 	add	r4,r11,r4
 10098ec:	21400217 	ldw	r5,8(r4)
 10098f0:	10c4983a 	sll	r2,r2,r3
 10098f4:	81000315 	stw	r4,12(r16)
 10098f8:	81400215 	stw	r5,8(r16)
 10098fc:	388eb03a 	or	r7,r7,r2
 1009900:	2c000315 	stw	r16,12(r5)
 1009904:	24000215 	stw	r16,8(r4)
 1009908:	e1c00115 	stw	r7,4(fp)
 100990c:	4807883a 	mov	r3,r9
 1009910:	4800cd16 	blt	r9,zero,1009c48 <_malloc_r+0x554>
 1009914:	1807d0ba 	srai	r3,r3,2
 1009918:	00800044 	movi	r2,1
 100991c:	10c8983a 	sll	r4,r2,r3
 1009920:	39004436 	bltu	r7,r4,1009a34 <_malloc_r+0x340>
 1009924:	21c4703a 	and	r2,r4,r7
 1009928:	10000a1e 	bne	r2,zero,1009954 <_malloc_r+0x260>
 100992c:	2109883a 	add	r4,r4,r4
 1009930:	00bfff04 	movi	r2,-4
 1009934:	4884703a 	and	r2,r9,r2
 1009938:	3906703a 	and	r3,r7,r4
 100993c:	12400104 	addi	r9,r2,4
 1009940:	1800041e 	bne	r3,zero,1009954 <_malloc_r+0x260>
 1009944:	2109883a 	add	r4,r4,r4
 1009948:	3904703a 	and	r2,r7,r4
 100994c:	4a400104 	addi	r9,r9,4
 1009950:	103ffc26 	beq	r2,zero,1009944 <_malloc_r+0x250>
 1009954:	480490fa 	slli	r2,r9,3
 1009958:	4819883a 	mov	r12,r9
 100995c:	023fff04 	movi	r8,-4
 1009960:	589b883a 	add	r13,r11,r2
 1009964:	6807883a 	mov	r3,r13
 1009968:	014003c4 	movi	r5,15
 100996c:	1c000317 	ldw	r16,12(r3)
 1009970:	1c00041e 	bne	r3,r16,1009984 <_malloc_r+0x290>
 1009974:	0000a706 	br	1009c14 <_malloc_r+0x520>
 1009978:	3000ab0e 	bge	r6,zero,1009c28 <_malloc_r+0x534>
 100997c:	84000317 	ldw	r16,12(r16)
 1009980:	1c00a426 	beq	r3,r16,1009c14 <_malloc_r+0x520>
 1009984:	80800117 	ldw	r2,4(r16)
 1009988:	1204703a 	and	r2,r2,r8
 100998c:	144dc83a 	sub	r6,r2,r17
 1009990:	29bff90e 	bge	r5,r6,1009978 <_malloc_r+0x284>
 1009994:	81000317 	ldw	r4,12(r16)
 1009998:	80c00217 	ldw	r3,8(r16)
 100999c:	89400054 	ori	r5,r17,1
 10099a0:	8445883a 	add	r2,r16,r17
 10099a4:	20c00215 	stw	r3,8(r4)
 10099a8:	19000315 	stw	r4,12(r3)
 10099ac:	81400115 	stw	r5,4(r16)
 10099b0:	1187883a 	add	r3,r2,r6
 10099b4:	31000054 	ori	r4,r6,1
 10099b8:	50800315 	stw	r2,12(r10)
 10099bc:	50800215 	stw	r2,8(r10)
 10099c0:	19800015 	stw	r6,0(r3)
 10099c4:	11000115 	stw	r4,4(r2)
 10099c8:	12800215 	stw	r10,8(r2)
 10099cc:	12800315 	stw	r10,12(r2)
 10099d0:	9009883a 	mov	r4,r18
 10099d4:	10140800 	call	1014080 <__malloc_unlock>
 10099d8:	80c00204 	addi	r3,r16,8
 10099dc:	003f5906 	br	1009744 <_malloc_r+0x50>
 10099e0:	8109883a 	add	r4,r16,r4
 10099e4:	20800117 	ldw	r2,4(r4)
 10099e8:	80c00217 	ldw	r3,8(r16)
 10099ec:	81400317 	ldw	r5,12(r16)
 10099f0:	10800054 	ori	r2,r2,1
 10099f4:	20800115 	stw	r2,4(r4)
 10099f8:	28c00215 	stw	r3,8(r5)
 10099fc:	19400315 	stw	r5,12(r3)
 1009a00:	9009883a 	mov	r4,r18
 1009a04:	10140800 	call	1014080 <__malloc_unlock>
 1009a08:	80c00204 	addi	r3,r16,8
 1009a0c:	003f4d06 	br	1009744 <_malloc_r+0x50>
 1009a10:	80800204 	addi	r2,r16,8
 1009a14:	14000317 	ldw	r16,12(r2)
 1009a18:	143f911e 	bne	r2,r16,1009860 <_malloc_r+0x16c>
 1009a1c:	1a400084 	addi	r9,r3,2
 1009a20:	003f7306 	br	10097f0 <_malloc_r+0xfc>
 1009a24:	88c00054 	ori	r3,r17,1
 1009a28:	8445883a 	add	r2,r16,r17
 1009a2c:	80c00115 	stw	r3,4(r16)
 1009a30:	003fdf06 	br	10099b0 <_malloc_r+0x2bc>
 1009a34:	e4000217 	ldw	r16,8(fp)
 1009a38:	00bfff04 	movi	r2,-4
 1009a3c:	80c00117 	ldw	r3,4(r16)
 1009a40:	802d883a 	mov	r22,r16
 1009a44:	18aa703a 	and	r21,r3,r2
 1009a48:	ac401636 	bltu	r21,r17,1009aa4 <_malloc_r+0x3b0>
 1009a4c:	ac49c83a 	sub	r4,r21,r17
 1009a50:	008003c4 	movi	r2,15
 1009a54:	1100130e 	bge	r2,r4,1009aa4 <_malloc_r+0x3b0>
 1009a58:	88800054 	ori	r2,r17,1
 1009a5c:	8447883a 	add	r3,r16,r17
 1009a60:	80800115 	stw	r2,4(r16)
 1009a64:	20800054 	ori	r2,r4,1
 1009a68:	18800115 	stw	r2,4(r3)
 1009a6c:	e0c00215 	stw	r3,8(fp)
 1009a70:	9009883a 	mov	r4,r18
 1009a74:	10140800 	call	1014080 <__malloc_unlock>
 1009a78:	80c00204 	addi	r3,r16,8
 1009a7c:	003f3106 	br	1009744 <_malloc_r+0x50>
 1009a80:	39c00117 	ldw	r7,4(r7)
 1009a84:	573ffe04 	addi	fp,r10,-8
 1009a88:	003fa006 	br	100990c <_malloc_r+0x218>
 1009a8c:	00801504 	movi	r2,84
 1009a90:	10c06736 	bltu	r2,r3,1009c30 <_malloc_r+0x53c>
 1009a94:	8804d33a 	srli	r2,r17,12
 1009a98:	11801b84 	addi	r6,r2,110
 1009a9c:	300490fa 	slli	r2,r6,3
 1009aa0:	003f4106 	br	10097a8 <_malloc_r+0xb4>
 1009aa4:	d0a71717 	ldw	r2,-25508(gp)
 1009aa8:	d0e00f17 	ldw	r3,-32708(gp)
 1009aac:	053fffc4 	movi	r20,-1
 1009ab0:	10800404 	addi	r2,r2,16
 1009ab4:	88a7883a 	add	r19,r17,r2
 1009ab8:	1d000326 	beq	r3,r20,1009ac8 <_malloc_r+0x3d4>
 1009abc:	98c3ffc4 	addi	r3,r19,4095
 1009ac0:	00bc0004 	movi	r2,-4096
 1009ac4:	18a6703a 	and	r19,r3,r2
 1009ac8:	9009883a 	mov	r4,r18
 1009acc:	980b883a 	mov	r5,r19
 1009ad0:	100a21c0 	call	100a21c <_sbrk_r>
 1009ad4:	1009883a 	mov	r4,r2
 1009ad8:	15000426 	beq	r2,r20,1009aec <_malloc_r+0x3f8>
 1009adc:	854b883a 	add	r5,r16,r21
 1009ae0:	1029883a 	mov	r20,r2
 1009ae4:	11405a2e 	bgeu	r2,r5,1009c50 <_malloc_r+0x55c>
 1009ae8:	87000c26 	beq	r16,fp,1009b1c <_malloc_r+0x428>
 1009aec:	e4000217 	ldw	r16,8(fp)
 1009af0:	80c00117 	ldw	r3,4(r16)
 1009af4:	00bfff04 	movi	r2,-4
 1009af8:	1884703a 	and	r2,r3,r2
 1009afc:	14400336 	bltu	r2,r17,1009b0c <_malloc_r+0x418>
 1009b00:	1449c83a 	sub	r4,r2,r17
 1009b04:	008003c4 	movi	r2,15
 1009b08:	113fd316 	blt	r2,r4,1009a58 <_malloc_r+0x364>
 1009b0c:	9009883a 	mov	r4,r18
 1009b10:	10140800 	call	1014080 <__malloc_unlock>
 1009b14:	0007883a 	mov	r3,zero
 1009b18:	003f0a06 	br	1009744 <_malloc_r+0x50>
 1009b1c:	05c040b4 	movhi	r23,258
 1009b20:	bdddd304 	addi	r23,r23,30540
 1009b24:	b8800017 	ldw	r2,0(r23)
 1009b28:	988d883a 	add	r6,r19,r2
 1009b2c:	b9800015 	stw	r6,0(r23)
 1009b30:	d0e00f17 	ldw	r3,-32708(gp)
 1009b34:	00bfffc4 	movi	r2,-1
 1009b38:	18808e26 	beq	r3,r2,1009d74 <_malloc_r+0x680>
 1009b3c:	2145c83a 	sub	r2,r4,r5
 1009b40:	3085883a 	add	r2,r6,r2
 1009b44:	b8800015 	stw	r2,0(r23)
 1009b48:	20c001cc 	andi	r3,r4,7
 1009b4c:	18005f1e 	bne	r3,zero,1009ccc <_malloc_r+0x5d8>
 1009b50:	000b883a 	mov	r5,zero
 1009b54:	a4c5883a 	add	r2,r20,r19
 1009b58:	1083ffcc 	andi	r2,r2,4095
 1009b5c:	00c40004 	movi	r3,4096
 1009b60:	1887c83a 	sub	r3,r3,r2
 1009b64:	28e7883a 	add	r19,r5,r3
 1009b68:	9009883a 	mov	r4,r18
 1009b6c:	980b883a 	mov	r5,r19
 1009b70:	100a21c0 	call	100a21c <_sbrk_r>
 1009b74:	1007883a 	mov	r3,r2
 1009b78:	00bfffc4 	movi	r2,-1
 1009b7c:	18807a26 	beq	r3,r2,1009d68 <_malloc_r+0x674>
 1009b80:	1d05c83a 	sub	r2,r3,r20
 1009b84:	9885883a 	add	r2,r19,r2
 1009b88:	10c00054 	ori	r3,r2,1
 1009b8c:	b8800017 	ldw	r2,0(r23)
 1009b90:	a021883a 	mov	r16,r20
 1009b94:	a0c00115 	stw	r3,4(r20)
 1009b98:	9885883a 	add	r2,r19,r2
 1009b9c:	b8800015 	stw	r2,0(r23)
 1009ba0:	e5000215 	stw	r20,8(fp)
 1009ba4:	b7003626 	beq	r22,fp,1009c80 <_malloc_r+0x58c>
 1009ba8:	018003c4 	movi	r6,15
 1009bac:	35404b36 	bltu	r6,r21,1009cdc <_malloc_r+0x5e8>
 1009bb0:	00800044 	movi	r2,1
 1009bb4:	a0800115 	stw	r2,4(r20)
 1009bb8:	003fcd06 	br	1009af0 <_malloc_r+0x3fc>
 1009bbc:	2808d27a 	srli	r4,r5,9
 1009bc0:	2000371e 	bne	r4,zero,1009ca0 <_malloc_r+0x5ac>
 1009bc4:	2808d0fa 	srli	r4,r5,3
 1009bc8:	200690fa 	slli	r3,r4,3
 1009bcc:	1ad1883a 	add	r8,r3,r11
 1009bd0:	41800217 	ldw	r6,8(r8)
 1009bd4:	41805b26 	beq	r8,r6,1009d44 <_malloc_r+0x650>
 1009bd8:	30800117 	ldw	r2,4(r6)
 1009bdc:	00ffff04 	movi	r3,-4
 1009be0:	10c4703a 	and	r2,r2,r3
 1009be4:	2880022e 	bgeu	r5,r2,1009bf0 <_malloc_r+0x4fc>
 1009be8:	31800217 	ldw	r6,8(r6)
 1009bec:	41bffa1e 	bne	r8,r6,1009bd8 <_malloc_r+0x4e4>
 1009bf0:	32000317 	ldw	r8,12(r6)
 1009bf4:	39c00117 	ldw	r7,4(r7)
 1009bf8:	82000315 	stw	r8,12(r16)
 1009bfc:	81800215 	stw	r6,8(r16)
 1009c00:	070040b4 	movhi	fp,258
 1009c04:	e73dfd04 	addi	fp,fp,-2060
 1009c08:	34000315 	stw	r16,12(r6)
 1009c0c:	44000215 	stw	r16,8(r8)
 1009c10:	003f3e06 	br	100990c <_malloc_r+0x218>
 1009c14:	63000044 	addi	r12,r12,1
 1009c18:	608000cc 	andi	r2,r12,3
 1009c1c:	10005d26 	beq	r2,zero,1009d94 <_malloc_r+0x6a0>
 1009c20:	18c00204 	addi	r3,r3,8
 1009c24:	003f5106 	br	100996c <_malloc_r+0x278>
 1009c28:	8089883a 	add	r4,r16,r2
 1009c2c:	003f6d06 	br	10099e4 <_malloc_r+0x2f0>
 1009c30:	00805504 	movi	r2,340
 1009c34:	10c02036 	bltu	r2,r3,1009cb8 <_malloc_r+0x5c4>
 1009c38:	8804d3fa 	srli	r2,r17,15
 1009c3c:	11801dc4 	addi	r6,r2,119
 1009c40:	300490fa 	slli	r2,r6,3
 1009c44:	003ed806 	br	10097a8 <_malloc_r+0xb4>
 1009c48:	48c000c4 	addi	r3,r9,3
 1009c4c:	003f3106 	br	1009914 <_malloc_r+0x220>
 1009c50:	05c040b4 	movhi	r23,258
 1009c54:	bdddd304 	addi	r23,r23,30540
 1009c58:	b8800017 	ldw	r2,0(r23)
 1009c5c:	988d883a 	add	r6,r19,r2
 1009c60:	b9800015 	stw	r6,0(r23)
 1009c64:	293fb21e 	bne	r5,r4,1009b30 <_malloc_r+0x43c>
 1009c68:	2083ffcc 	andi	r2,r4,4095
 1009c6c:	103fb01e 	bne	r2,zero,1009b30 <_malloc_r+0x43c>
 1009c70:	e4000217 	ldw	r16,8(fp)
 1009c74:	9d45883a 	add	r2,r19,r21
 1009c78:	10800054 	ori	r2,r2,1
 1009c7c:	80800115 	stw	r2,4(r16)
 1009c80:	b8c00017 	ldw	r3,0(r23)
 1009c84:	d0a71817 	ldw	r2,-25504(gp)
 1009c88:	10c0012e 	bgeu	r2,r3,1009c90 <_malloc_r+0x59c>
 1009c8c:	d0e71815 	stw	r3,-25504(gp)
 1009c90:	d0a71917 	ldw	r2,-25500(gp)
 1009c94:	10ff962e 	bgeu	r2,r3,1009af0 <_malloc_r+0x3fc>
 1009c98:	d0e71915 	stw	r3,-25500(gp)
 1009c9c:	003f9406 	br	1009af0 <_malloc_r+0x3fc>
 1009ca0:	00800104 	movi	r2,4
 1009ca4:	11001e36 	bltu	r2,r4,1009d20 <_malloc_r+0x62c>
 1009ca8:	2804d1ba 	srli	r2,r5,6
 1009cac:	11000e04 	addi	r4,r2,56
 1009cb0:	200690fa 	slli	r3,r4,3
 1009cb4:	003fc506 	br	1009bcc <_malloc_r+0x4d8>
 1009cb8:	00815504 	movi	r2,1364
 1009cbc:	10c01d2e 	bgeu	r2,r3,1009d34 <_malloc_r+0x640>
 1009cc0:	01801f84 	movi	r6,126
 1009cc4:	0080fc04 	movi	r2,1008
 1009cc8:	003eb706 	br	10097a8 <_malloc_r+0xb4>
 1009ccc:	00800204 	movi	r2,8
 1009cd0:	10cbc83a 	sub	r5,r2,r3
 1009cd4:	2169883a 	add	r20,r4,r5
 1009cd8:	003f9e06 	br	1009b54 <_malloc_r+0x460>
 1009cdc:	00bffe04 	movi	r2,-8
 1009ce0:	a93ffd04 	addi	r4,r21,-12
 1009ce4:	2088703a 	and	r4,r4,r2
 1009ce8:	b10b883a 	add	r5,r22,r4
 1009cec:	00c00144 	movi	r3,5
 1009cf0:	28c00215 	stw	r3,8(r5)
 1009cf4:	28c00115 	stw	r3,4(r5)
 1009cf8:	b0800117 	ldw	r2,4(r22)
 1009cfc:	1080004c 	andi	r2,r2,1
 1009d00:	2084b03a 	or	r2,r4,r2
 1009d04:	b0800115 	stw	r2,4(r22)
 1009d08:	313fdd2e 	bgeu	r6,r4,1009c80 <_malloc_r+0x58c>
 1009d0c:	b1400204 	addi	r5,r22,8
 1009d10:	9009883a 	mov	r4,r18
 1009d14:	100e49c0 	call	100e49c <_free_r>
 1009d18:	e4000217 	ldw	r16,8(fp)
 1009d1c:	003fd806 	br	1009c80 <_malloc_r+0x58c>
 1009d20:	00800504 	movi	r2,20
 1009d24:	11001536 	bltu	r2,r4,1009d7c <_malloc_r+0x688>
 1009d28:	210016c4 	addi	r4,r4,91
 1009d2c:	200690fa 	slli	r3,r4,3
 1009d30:	003fa606 	br	1009bcc <_malloc_r+0x4d8>
 1009d34:	8804d4ba 	srli	r2,r17,18
 1009d38:	11801f04 	addi	r6,r2,124
 1009d3c:	300490fa 	slli	r2,r6,3
 1009d40:	003e9906 	br	10097a8 <_malloc_r+0xb4>
 1009d44:	2009d0ba 	srai	r4,r4,2
 1009d48:	014040b4 	movhi	r5,258
 1009d4c:	297dfd04 	addi	r5,r5,-2060
 1009d50:	00c00044 	movi	r3,1
 1009d54:	28800117 	ldw	r2,4(r5)
 1009d58:	1906983a 	sll	r3,r3,r4
 1009d5c:	10c4b03a 	or	r2,r2,r3
 1009d60:	28800115 	stw	r2,4(r5)
 1009d64:	003fa306 	br	1009bf4 <_malloc_r+0x500>
 1009d68:	0027883a 	mov	r19,zero
 1009d6c:	00c00044 	movi	r3,1
 1009d70:	003f8606 	br	1009b8c <_malloc_r+0x498>
 1009d74:	d1200f15 	stw	r4,-32708(gp)
 1009d78:	003f7306 	br	1009b48 <_malloc_r+0x454>
 1009d7c:	00801504 	movi	r2,84
 1009d80:	11001936 	bltu	r2,r4,1009de8 <_malloc_r+0x6f4>
 1009d84:	2804d33a 	srli	r2,r5,12
 1009d88:	11001b84 	addi	r4,r2,110
 1009d8c:	200690fa 	slli	r3,r4,3
 1009d90:	003f8e06 	br	1009bcc <_malloc_r+0x4d8>
 1009d94:	480b883a 	mov	r5,r9
 1009d98:	6807883a 	mov	r3,r13
 1009d9c:	288000cc 	andi	r2,r5,3
 1009da0:	18fffe04 	addi	r3,r3,-8
 1009da4:	297fffc4 	addi	r5,r5,-1
 1009da8:	10001526 	beq	r2,zero,1009e00 <_malloc_r+0x70c>
 1009dac:	18800217 	ldw	r2,8(r3)
 1009db0:	10fffa26 	beq	r2,r3,1009d9c <_malloc_r+0x6a8>
 1009db4:	2109883a 	add	r4,r4,r4
 1009db8:	393f1e36 	bltu	r7,r4,1009a34 <_malloc_r+0x340>
 1009dbc:	203f1d26 	beq	r4,zero,1009a34 <_malloc_r+0x340>
 1009dc0:	21c4703a 	and	r2,r4,r7
 1009dc4:	10000226 	beq	r2,zero,1009dd0 <_malloc_r+0x6dc>
 1009dc8:	6013883a 	mov	r9,r12
 1009dcc:	003ee106 	br	1009954 <_malloc_r+0x260>
 1009dd0:	2109883a 	add	r4,r4,r4
 1009dd4:	3904703a 	and	r2,r7,r4
 1009dd8:	63000104 	addi	r12,r12,4
 1009ddc:	103ffc26 	beq	r2,zero,1009dd0 <_malloc_r+0x6dc>
 1009de0:	6013883a 	mov	r9,r12
 1009de4:	003edb06 	br	1009954 <_malloc_r+0x260>
 1009de8:	00805504 	movi	r2,340
 1009dec:	11000836 	bltu	r2,r4,1009e10 <_malloc_r+0x71c>
 1009df0:	2804d3fa 	srli	r2,r5,15
 1009df4:	11001dc4 	addi	r4,r2,119
 1009df8:	200690fa 	slli	r3,r4,3
 1009dfc:	003f7306 	br	1009bcc <_malloc_r+0x4d8>
 1009e00:	0104303a 	nor	r2,zero,r4
 1009e04:	388e703a 	and	r7,r7,r2
 1009e08:	e1c00115 	stw	r7,4(fp)
 1009e0c:	003fe906 	br	1009db4 <_malloc_r+0x6c0>
 1009e10:	00815504 	movi	r2,1364
 1009e14:	1100032e 	bgeu	r2,r4,1009e24 <_malloc_r+0x730>
 1009e18:	01001f84 	movi	r4,126
 1009e1c:	00c0fc04 	movi	r3,1008
 1009e20:	003f6a06 	br	1009bcc <_malloc_r+0x4d8>
 1009e24:	2804d4ba 	srli	r2,r5,18
 1009e28:	11001f04 	addi	r4,r2,124
 1009e2c:	200690fa 	slli	r3,r4,3
 1009e30:	003f6606 	br	1009bcc <_malloc_r+0x4d8>

01009e34 <memchr>:
 1009e34:	008000c4 	movi	r2,3
 1009e38:	29403fcc 	andi	r5,r5,255
 1009e3c:	2007883a 	mov	r3,r4
 1009e40:	1180022e 	bgeu	r2,r6,1009e4c <memchr+0x18>
 1009e44:	2084703a 	and	r2,r4,r2
 1009e48:	10000b26 	beq	r2,zero,1009e78 <memchr+0x44>
 1009e4c:	313fffc4 	addi	r4,r6,-1
 1009e50:	3000051e 	bne	r6,zero,1009e68 <memchr+0x34>
 1009e54:	00002c06 	br	1009f08 <memchr+0xd4>
 1009e58:	213fffc4 	addi	r4,r4,-1
 1009e5c:	00bfffc4 	movi	r2,-1
 1009e60:	18c00044 	addi	r3,r3,1
 1009e64:	20802826 	beq	r4,r2,1009f08 <memchr+0xd4>
 1009e68:	18800003 	ldbu	r2,0(r3)
 1009e6c:	28bffa1e 	bne	r5,r2,1009e58 <memchr+0x24>
 1009e70:	1805883a 	mov	r2,r3
 1009e74:	f800283a 	ret
 1009e78:	0011883a 	mov	r8,zero
 1009e7c:	0007883a 	mov	r3,zero
 1009e80:	01c00104 	movi	r7,4
 1009e84:	4004923a 	slli	r2,r8,8
 1009e88:	18c00044 	addi	r3,r3,1
 1009e8c:	1151883a 	add	r8,r2,r5
 1009e90:	19fffc1e 	bne	r3,r7,1009e84 <memchr+0x50>
 1009e94:	02bfbff4 	movhi	r10,65279
 1009e98:	52bfbfc4 	addi	r10,r10,-257
 1009e9c:	02602074 	movhi	r9,32897
 1009ea0:	4a602004 	addi	r9,r9,-32640
 1009ea4:	02c000c4 	movi	r11,3
 1009ea8:	20800017 	ldw	r2,0(r4)
 1009eac:	31bfff04 	addi	r6,r6,-4
 1009eb0:	200f883a 	mov	r7,r4
 1009eb4:	1204f03a 	xor	r2,r2,r8
 1009eb8:	1287883a 	add	r3,r2,r10
 1009ebc:	1a46703a 	and	r3,r3,r9
 1009ec0:	0084303a 	nor	r2,zero,r2
 1009ec4:	10c4703a 	and	r2,r2,r3
 1009ec8:	10000b26 	beq	r2,zero,1009ef8 <memchr+0xc4>
 1009ecc:	20800003 	ldbu	r2,0(r4)
 1009ed0:	28800f26 	beq	r5,r2,1009f10 <memchr+0xdc>
 1009ed4:	20800043 	ldbu	r2,1(r4)
 1009ed8:	21c00044 	addi	r7,r4,1
 1009edc:	28800c26 	beq	r5,r2,1009f10 <memchr+0xdc>
 1009ee0:	20800083 	ldbu	r2,2(r4)
 1009ee4:	21c00084 	addi	r7,r4,2
 1009ee8:	28800926 	beq	r5,r2,1009f10 <memchr+0xdc>
 1009eec:	208000c3 	ldbu	r2,3(r4)
 1009ef0:	21c000c4 	addi	r7,r4,3
 1009ef4:	28800626 	beq	r5,r2,1009f10 <memchr+0xdc>
 1009ef8:	21000104 	addi	r4,r4,4
 1009efc:	59bfea36 	bltu	r11,r6,1009ea8 <memchr+0x74>
 1009f00:	2007883a 	mov	r3,r4
 1009f04:	003fd106 	br	1009e4c <memchr+0x18>
 1009f08:	0005883a 	mov	r2,zero
 1009f0c:	f800283a 	ret
 1009f10:	3805883a 	mov	r2,r7
 1009f14:	f800283a 	ret

01009f18 <memcmp>:
 1009f18:	00c000c4 	movi	r3,3
 1009f1c:	1980032e 	bgeu	r3,r6,1009f2c <memcmp+0x14>
 1009f20:	2144b03a 	or	r2,r4,r5
 1009f24:	10c4703a 	and	r2,r2,r3
 1009f28:	10000f26 	beq	r2,zero,1009f68 <memcmp+0x50>
 1009f2c:	31ffffc4 	addi	r7,r6,-1
 1009f30:	3000061e 	bne	r6,zero,1009f4c <memcmp+0x34>
 1009f34:	00000a06 	br	1009f60 <memcmp+0x48>
 1009f38:	39ffffc4 	addi	r7,r7,-1
 1009f3c:	00bfffc4 	movi	r2,-1
 1009f40:	21000044 	addi	r4,r4,1
 1009f44:	29400044 	addi	r5,r5,1
 1009f48:	38800526 	beq	r7,r2,1009f60 <memcmp+0x48>
 1009f4c:	20c00003 	ldbu	r3,0(r4)
 1009f50:	28800003 	ldbu	r2,0(r5)
 1009f54:	18bff826 	beq	r3,r2,1009f38 <memcmp+0x20>
 1009f58:	1885c83a 	sub	r2,r3,r2
 1009f5c:	f800283a 	ret
 1009f60:	0005883a 	mov	r2,zero
 1009f64:	f800283a 	ret
 1009f68:	180f883a 	mov	r7,r3
 1009f6c:	20c00017 	ldw	r3,0(r4)
 1009f70:	28800017 	ldw	r2,0(r5)
 1009f74:	18bfed1e 	bne	r3,r2,1009f2c <memcmp+0x14>
 1009f78:	31bfff04 	addi	r6,r6,-4
 1009f7c:	21000104 	addi	r4,r4,4
 1009f80:	29400104 	addi	r5,r5,4
 1009f84:	39bff936 	bltu	r7,r6,1009f6c <memcmp+0x54>
 1009f88:	003fe806 	br	1009f2c <memcmp+0x14>

01009f8c <memcpy>:
 1009f8c:	01c003c4 	movi	r7,15
 1009f90:	2007883a 	mov	r3,r4
 1009f94:	3980032e 	bgeu	r7,r6,1009fa4 <memcpy+0x18>
 1009f98:	2904b03a 	or	r2,r5,r4
 1009f9c:	108000cc 	andi	r2,r2,3
 1009fa0:	10000926 	beq	r2,zero,1009fc8 <memcpy+0x3c>
 1009fa4:	30000626 	beq	r6,zero,1009fc0 <memcpy+0x34>
 1009fa8:	30cd883a 	add	r6,r6,r3
 1009fac:	28800003 	ldbu	r2,0(r5)
 1009fb0:	29400044 	addi	r5,r5,1
 1009fb4:	18800005 	stb	r2,0(r3)
 1009fb8:	18c00044 	addi	r3,r3,1
 1009fbc:	30fffb1e 	bne	r6,r3,1009fac <memcpy+0x20>
 1009fc0:	2005883a 	mov	r2,r4
 1009fc4:	f800283a 	ret
 1009fc8:	3811883a 	mov	r8,r7
 1009fcc:	200f883a 	mov	r7,r4
 1009fd0:	28c00017 	ldw	r3,0(r5)
 1009fd4:	31bffc04 	addi	r6,r6,-16
 1009fd8:	38c00015 	stw	r3,0(r7)
 1009fdc:	28800117 	ldw	r2,4(r5)
 1009fe0:	38800115 	stw	r2,4(r7)
 1009fe4:	28c00217 	ldw	r3,8(r5)
 1009fe8:	38c00215 	stw	r3,8(r7)
 1009fec:	28800317 	ldw	r2,12(r5)
 1009ff0:	29400404 	addi	r5,r5,16
 1009ff4:	38800315 	stw	r2,12(r7)
 1009ff8:	39c00404 	addi	r7,r7,16
 1009ffc:	41bff436 	bltu	r8,r6,1009fd0 <memcpy+0x44>
 100a000:	008000c4 	movi	r2,3
 100a004:	1180072e 	bgeu	r2,r6,100a024 <memcpy+0x98>
 100a008:	1007883a 	mov	r3,r2
 100a00c:	28800017 	ldw	r2,0(r5)
 100a010:	31bfff04 	addi	r6,r6,-4
 100a014:	29400104 	addi	r5,r5,4
 100a018:	38800015 	stw	r2,0(r7)
 100a01c:	39c00104 	addi	r7,r7,4
 100a020:	19bffa36 	bltu	r3,r6,100a00c <memcpy+0x80>
 100a024:	3807883a 	mov	r3,r7
 100a028:	003fde06 	br	1009fa4 <memcpy+0x18>

0100a02c <memmove>:
 100a02c:	2807883a 	mov	r3,r5
 100a030:	2011883a 	mov	r8,r4
 100a034:	29000c2e 	bgeu	r5,r4,100a068 <memmove+0x3c>
 100a038:	298f883a 	add	r7,r5,r6
 100a03c:	21c00a2e 	bgeu	r4,r7,100a068 <memmove+0x3c>
 100a040:	30000726 	beq	r6,zero,100a060 <memmove+0x34>
 100a044:	2187883a 	add	r3,r4,r6
 100a048:	198dc83a 	sub	r6,r3,r6
 100a04c:	39ffffc4 	addi	r7,r7,-1
 100a050:	38800003 	ldbu	r2,0(r7)
 100a054:	18ffffc4 	addi	r3,r3,-1
 100a058:	18800005 	stb	r2,0(r3)
 100a05c:	19bffb1e 	bne	r3,r6,100a04c <memmove+0x20>
 100a060:	2005883a 	mov	r2,r4
 100a064:	f800283a 	ret
 100a068:	01c003c4 	movi	r7,15
 100a06c:	39800a36 	bltu	r7,r6,100a098 <memmove+0x6c>
 100a070:	303ffb26 	beq	r6,zero,100a060 <memmove+0x34>
 100a074:	400f883a 	mov	r7,r8
 100a078:	320d883a 	add	r6,r6,r8
 100a07c:	28800003 	ldbu	r2,0(r5)
 100a080:	29400044 	addi	r5,r5,1
 100a084:	38800005 	stb	r2,0(r7)
 100a088:	39c00044 	addi	r7,r7,1
 100a08c:	39bffb1e 	bne	r7,r6,100a07c <memmove+0x50>
 100a090:	2005883a 	mov	r2,r4
 100a094:	f800283a 	ret
 100a098:	1904b03a 	or	r2,r3,r4
 100a09c:	108000cc 	andi	r2,r2,3
 100a0a0:	103ff31e 	bne	r2,zero,100a070 <memmove+0x44>
 100a0a4:	3811883a 	mov	r8,r7
 100a0a8:	180b883a 	mov	r5,r3
 100a0ac:	200f883a 	mov	r7,r4
 100a0b0:	28c00017 	ldw	r3,0(r5)
 100a0b4:	31bffc04 	addi	r6,r6,-16
 100a0b8:	38c00015 	stw	r3,0(r7)
 100a0bc:	28800117 	ldw	r2,4(r5)
 100a0c0:	38800115 	stw	r2,4(r7)
 100a0c4:	28c00217 	ldw	r3,8(r5)
 100a0c8:	38c00215 	stw	r3,8(r7)
 100a0cc:	28800317 	ldw	r2,12(r5)
 100a0d0:	29400404 	addi	r5,r5,16
 100a0d4:	38800315 	stw	r2,12(r7)
 100a0d8:	39c00404 	addi	r7,r7,16
 100a0dc:	41bff436 	bltu	r8,r6,100a0b0 <memmove+0x84>
 100a0e0:	008000c4 	movi	r2,3
 100a0e4:	1180072e 	bgeu	r2,r6,100a104 <memmove+0xd8>
 100a0e8:	1007883a 	mov	r3,r2
 100a0ec:	28800017 	ldw	r2,0(r5)
 100a0f0:	31bfff04 	addi	r6,r6,-4
 100a0f4:	29400104 	addi	r5,r5,4
 100a0f8:	38800015 	stw	r2,0(r7)
 100a0fc:	39c00104 	addi	r7,r7,4
 100a100:	19bffa36 	bltu	r3,r6,100a0ec <memmove+0xc0>
 100a104:	3811883a 	mov	r8,r7
 100a108:	003fd906 	br	100a070 <memmove+0x44>

0100a10c <memset>:
 100a10c:	008000c4 	movi	r2,3
 100a110:	29403fcc 	andi	r5,r5,255
 100a114:	2007883a 	mov	r3,r4
 100a118:	1180022e 	bgeu	r2,r6,100a124 <memset+0x18>
 100a11c:	2084703a 	and	r2,r4,r2
 100a120:	10000826 	beq	r2,zero,100a144 <memset+0x38>
 100a124:	30000526 	beq	r6,zero,100a13c <memset+0x30>
 100a128:	2805883a 	mov	r2,r5
 100a12c:	30cd883a 	add	r6,r6,r3
 100a130:	18800005 	stb	r2,0(r3)
 100a134:	18c00044 	addi	r3,r3,1
 100a138:	19bffd1e 	bne	r3,r6,100a130 <memset+0x24>
 100a13c:	2005883a 	mov	r2,r4
 100a140:	f800283a 	ret
 100a144:	2804923a 	slli	r2,r5,8
 100a148:	020003c4 	movi	r8,15
 100a14c:	200f883a 	mov	r7,r4
 100a150:	2884b03a 	or	r2,r5,r2
 100a154:	1006943a 	slli	r3,r2,16
 100a158:	10c6b03a 	or	r3,r2,r3
 100a15c:	41800a2e 	bgeu	r8,r6,100a188 <memset+0x7c>
 100a160:	4005883a 	mov	r2,r8
 100a164:	31bffc04 	addi	r6,r6,-16
 100a168:	38c00015 	stw	r3,0(r7)
 100a16c:	38c00115 	stw	r3,4(r7)
 100a170:	38c00215 	stw	r3,8(r7)
 100a174:	38c00315 	stw	r3,12(r7)
 100a178:	39c00404 	addi	r7,r7,16
 100a17c:	11bff936 	bltu	r2,r6,100a164 <memset+0x58>
 100a180:	008000c4 	movi	r2,3
 100a184:	1180052e 	bgeu	r2,r6,100a19c <memset+0x90>
 100a188:	31bfff04 	addi	r6,r6,-4
 100a18c:	008000c4 	movi	r2,3
 100a190:	38c00015 	stw	r3,0(r7)
 100a194:	39c00104 	addi	r7,r7,4
 100a198:	11bffb36 	bltu	r2,r6,100a188 <memset+0x7c>
 100a19c:	3807883a 	mov	r3,r7
 100a1a0:	003fe006 	br	100a124 <memset+0x18>

0100a1a4 <printf>:
 100a1a4:	defffb04 	addi	sp,sp,-20
 100a1a8:	dfc00115 	stw	ra,4(sp)
 100a1ac:	d9400215 	stw	r5,8(sp)
 100a1b0:	d9800315 	stw	r6,12(sp)
 100a1b4:	d9c00415 	stw	r7,16(sp)
 100a1b8:	008040b4 	movhi	r2,258
 100a1bc:	1084a204 	addi	r2,r2,4744
 100a1c0:	10c00017 	ldw	r3,0(r2)
 100a1c4:	200b883a 	mov	r5,r4
 100a1c8:	d8800204 	addi	r2,sp,8
 100a1cc:	19000217 	ldw	r4,8(r3)
 100a1d0:	100d883a 	mov	r6,r2
 100a1d4:	d8800015 	stw	r2,0(sp)
 100a1d8:	100c5540 	call	100c554 <__vfprintf_internal>
 100a1dc:	dfc00117 	ldw	ra,4(sp)
 100a1e0:	dec00504 	addi	sp,sp,20
 100a1e4:	f800283a 	ret

0100a1e8 <_printf_r>:
 100a1e8:	defffc04 	addi	sp,sp,-16
 100a1ec:	dfc00115 	stw	ra,4(sp)
 100a1f0:	d9800215 	stw	r6,8(sp)
 100a1f4:	d9c00315 	stw	r7,12(sp)
 100a1f8:	280d883a 	mov	r6,r5
 100a1fc:	21400217 	ldw	r5,8(r4)
 100a200:	d8c00204 	addi	r3,sp,8
 100a204:	180f883a 	mov	r7,r3
 100a208:	d8c00015 	stw	r3,0(sp)
 100a20c:	100a6a80 	call	100a6a8 <___vfprintf_internal_r>
 100a210:	dfc00117 	ldw	ra,4(sp)
 100a214:	dec00404 	addi	sp,sp,16
 100a218:	f800283a 	ret

0100a21c <_sbrk_r>:
 100a21c:	defffd04 	addi	sp,sp,-12
 100a220:	dc000015 	stw	r16,0(sp)
 100a224:	040040b4 	movhi	r16,258
 100a228:	840bac04 	addi	r16,r16,11952
 100a22c:	dc400115 	stw	r17,4(sp)
 100a230:	80000015 	stw	zero,0(r16)
 100a234:	2023883a 	mov	r17,r4
 100a238:	2809883a 	mov	r4,r5
 100a23c:	dfc00215 	stw	ra,8(sp)
 100a240:	1013c340 	call	1013c34 <sbrk>
 100a244:	1007883a 	mov	r3,r2
 100a248:	00bfffc4 	movi	r2,-1
 100a24c:	18800626 	beq	r3,r2,100a268 <_sbrk_r+0x4c>
 100a250:	1805883a 	mov	r2,r3
 100a254:	dfc00217 	ldw	ra,8(sp)
 100a258:	dc400117 	ldw	r17,4(sp)
 100a25c:	dc000017 	ldw	r16,0(sp)
 100a260:	dec00304 	addi	sp,sp,12
 100a264:	f800283a 	ret
 100a268:	80800017 	ldw	r2,0(r16)
 100a26c:	103ff826 	beq	r2,zero,100a250 <_sbrk_r+0x34>
 100a270:	88800015 	stw	r2,0(r17)
 100a274:	1805883a 	mov	r2,r3
 100a278:	dfc00217 	ldw	ra,8(sp)
 100a27c:	dc400117 	ldw	r17,4(sp)
 100a280:	dc000017 	ldw	r16,0(sp)
 100a284:	dec00304 	addi	sp,sp,12
 100a288:	f800283a 	ret

0100a28c <_raise_r>:
 100a28c:	defffd04 	addi	sp,sp,-12
 100a290:	008007c4 	movi	r2,31
 100a294:	dc400115 	stw	r17,4(sp)
 100a298:	dc000015 	stw	r16,0(sp)
 100a29c:	dfc00215 	stw	ra,8(sp)
 100a2a0:	2821883a 	mov	r16,r5
 100a2a4:	2023883a 	mov	r17,r4
 100a2a8:	11402736 	bltu	r2,r5,100a348 <_raise_r+0xbc>
 100a2ac:	20c0b717 	ldw	r3,732(r4)
 100a2b0:	18001326 	beq	r3,zero,100a300 <_raise_r+0x74>
 100a2b4:	2945883a 	add	r2,r5,r5
 100a2b8:	1085883a 	add	r2,r2,r2
 100a2bc:	188b883a 	add	r5,r3,r2
 100a2c0:	28c00017 	ldw	r3,0(r5)
 100a2c4:	18000e26 	beq	r3,zero,100a300 <_raise_r+0x74>
 100a2c8:	01000044 	movi	r4,1
 100a2cc:	19000526 	beq	r3,r4,100a2e4 <_raise_r+0x58>
 100a2d0:	00bfffc4 	movi	r2,-1
 100a2d4:	18801326 	beq	r3,r2,100a324 <_raise_r+0x98>
 100a2d8:	28000015 	stw	zero,0(r5)
 100a2dc:	8009883a 	mov	r4,r16
 100a2e0:	183ee83a 	callr	r3
 100a2e4:	0007883a 	mov	r3,zero
 100a2e8:	1805883a 	mov	r2,r3
 100a2ec:	dfc00217 	ldw	ra,8(sp)
 100a2f0:	dc400117 	ldw	r17,4(sp)
 100a2f4:	dc000017 	ldw	r16,0(sp)
 100a2f8:	dec00304 	addi	sp,sp,12
 100a2fc:	f800283a 	ret
 100a300:	100a5640 	call	100a564 <_getpid_r>
 100a304:	100b883a 	mov	r5,r2
 100a308:	8809883a 	mov	r4,r17
 100a30c:	800d883a 	mov	r6,r16
 100a310:	dfc00217 	ldw	ra,8(sp)
 100a314:	dc400117 	ldw	r17,4(sp)
 100a318:	dc000017 	ldw	r16,0(sp)
 100a31c:	dec00304 	addi	sp,sp,12
 100a320:	100a5681 	jmpi	100a568 <_kill_r>
 100a324:	2007883a 	mov	r3,r4
 100a328:	00800584 	movi	r2,22
 100a32c:	88800015 	stw	r2,0(r17)
 100a330:	1805883a 	mov	r2,r3
 100a334:	dfc00217 	ldw	ra,8(sp)
 100a338:	dc400117 	ldw	r17,4(sp)
 100a33c:	dc000017 	ldw	r16,0(sp)
 100a340:	dec00304 	addi	sp,sp,12
 100a344:	f800283a 	ret
 100a348:	00800584 	movi	r2,22
 100a34c:	00ffffc4 	movi	r3,-1
 100a350:	20800015 	stw	r2,0(r4)
 100a354:	003fe406 	br	100a2e8 <_raise_r+0x5c>

0100a358 <raise>:
 100a358:	008040b4 	movhi	r2,258
 100a35c:	1084a204 	addi	r2,r2,4744
 100a360:	200b883a 	mov	r5,r4
 100a364:	11000017 	ldw	r4,0(r2)
 100a368:	100a28c1 	jmpi	100a28c <_raise_r>

0100a36c <_init_signal_r>:
 100a36c:	2080b717 	ldw	r2,732(r4)
 100a370:	defffe04 	addi	sp,sp,-8
 100a374:	dc000015 	stw	r16,0(sp)
 100a378:	dfc00115 	stw	ra,4(sp)
 100a37c:	2021883a 	mov	r16,r4
 100a380:	10000526 	beq	r2,zero,100a398 <_init_signal_r+0x2c>
 100a384:	0005883a 	mov	r2,zero
 100a388:	dfc00117 	ldw	ra,4(sp)
 100a38c:	dc000017 	ldw	r16,0(sp)
 100a390:	dec00204 	addi	sp,sp,8
 100a394:	f800283a 	ret
 100a398:	01402004 	movi	r5,128
 100a39c:	10096f40 	call	10096f4 <_malloc_r>
 100a3a0:	1009883a 	mov	r4,r2
 100a3a4:	8080b715 	stw	r2,732(r16)
 100a3a8:	10000726 	beq	r2,zero,100a3c8 <_init_signal_r+0x5c>
 100a3ac:	0007883a 	mov	r3,zero
 100a3b0:	01402004 	movi	r5,128
 100a3b4:	20c5883a 	add	r2,r4,r3
 100a3b8:	18c00104 	addi	r3,r3,4
 100a3bc:	10000015 	stw	zero,0(r2)
 100a3c0:	197ffc1e 	bne	r3,r5,100a3b4 <_init_signal_r+0x48>
 100a3c4:	003fef06 	br	100a384 <_init_signal_r+0x18>
 100a3c8:	00bfffc4 	movi	r2,-1
 100a3cc:	003fee06 	br	100a388 <_init_signal_r+0x1c>

0100a3d0 <_init_signal>:
 100a3d0:	008040b4 	movhi	r2,258
 100a3d4:	1084a204 	addi	r2,r2,4744
 100a3d8:	11000017 	ldw	r4,0(r2)
 100a3dc:	100a36c1 	jmpi	100a36c <_init_signal_r>

0100a3e0 <__sigtramp_r>:
 100a3e0:	defffd04 	addi	sp,sp,-12
 100a3e4:	008007c4 	movi	r2,31
 100a3e8:	dc000115 	stw	r16,4(sp)
 100a3ec:	dfc00215 	stw	ra,8(sp)
 100a3f0:	2021883a 	mov	r16,r4
 100a3f4:	11401336 	bltu	r2,r5,100a444 <__sigtramp_r+0x64>
 100a3f8:	20c0b717 	ldw	r3,732(r4)
 100a3fc:	18001f26 	beq	r3,zero,100a47c <__sigtramp_r+0x9c>
 100a400:	2945883a 	add	r2,r5,r5
 100a404:	1085883a 	add	r2,r2,r2
 100a408:	10c9883a 	add	r4,r2,r3
 100a40c:	20c00017 	ldw	r3,0(r4)
 100a410:	18001626 	beq	r3,zero,100a46c <__sigtramp_r+0x8c>
 100a414:	00bfffc4 	movi	r2,-1
 100a418:	18801626 	beq	r3,r2,100a474 <__sigtramp_r+0x94>
 100a41c:	00800044 	movi	r2,1
 100a420:	18800d26 	beq	r3,r2,100a458 <__sigtramp_r+0x78>
 100a424:	20000015 	stw	zero,0(r4)
 100a428:	2809883a 	mov	r4,r5
 100a42c:	183ee83a 	callr	r3
 100a430:	0005883a 	mov	r2,zero
 100a434:	dfc00217 	ldw	ra,8(sp)
 100a438:	dc000117 	ldw	r16,4(sp)
 100a43c:	dec00304 	addi	sp,sp,12
 100a440:	f800283a 	ret
 100a444:	00bfffc4 	movi	r2,-1
 100a448:	dfc00217 	ldw	ra,8(sp)
 100a44c:	dc000117 	ldw	r16,4(sp)
 100a450:	dec00304 	addi	sp,sp,12
 100a454:	f800283a 	ret
 100a458:	008000c4 	movi	r2,3
 100a45c:	dfc00217 	ldw	ra,8(sp)
 100a460:	dc000117 	ldw	r16,4(sp)
 100a464:	dec00304 	addi	sp,sp,12
 100a468:	f800283a 	ret
 100a46c:	00800044 	movi	r2,1
 100a470:	003ff006 	br	100a434 <__sigtramp_r+0x54>
 100a474:	00800084 	movi	r2,2
 100a478:	003fee06 	br	100a434 <__sigtramp_r+0x54>
 100a47c:	d9400015 	stw	r5,0(sp)
 100a480:	100a36c0 	call	100a36c <_init_signal_r>
 100a484:	d9400017 	ldw	r5,0(sp)
 100a488:	103fee1e 	bne	r2,zero,100a444 <__sigtramp_r+0x64>
 100a48c:	80c0b717 	ldw	r3,732(r16)
 100a490:	003fdb06 	br	100a400 <__sigtramp_r+0x20>

0100a494 <__sigtramp>:
 100a494:	008040b4 	movhi	r2,258
 100a498:	1084a204 	addi	r2,r2,4744
 100a49c:	200b883a 	mov	r5,r4
 100a4a0:	11000017 	ldw	r4,0(r2)
 100a4a4:	100a3e01 	jmpi	100a3e0 <__sigtramp_r>

0100a4a8 <_signal_r>:
 100a4a8:	defffc04 	addi	sp,sp,-16
 100a4ac:	008007c4 	movi	r2,31
 100a4b0:	dc800215 	stw	r18,8(sp)
 100a4b4:	dc400115 	stw	r17,4(sp)
 100a4b8:	dc000015 	stw	r16,0(sp)
 100a4bc:	dfc00315 	stw	ra,12(sp)
 100a4c0:	2823883a 	mov	r17,r5
 100a4c4:	00ffffc4 	movi	r3,-1
 100a4c8:	3025883a 	mov	r18,r6
 100a4cc:	2021883a 	mov	r16,r4
 100a4d0:	1140092e 	bgeu	r2,r5,100a4f8 <_signal_r+0x50>
 100a4d4:	00800584 	movi	r2,22
 100a4d8:	20800015 	stw	r2,0(r4)
 100a4dc:	1805883a 	mov	r2,r3
 100a4e0:	dfc00317 	ldw	ra,12(sp)
 100a4e4:	dc800217 	ldw	r18,8(sp)
 100a4e8:	dc400117 	ldw	r17,4(sp)
 100a4ec:	dc000017 	ldw	r16,0(sp)
 100a4f0:	dec00404 	addi	sp,sp,16
 100a4f4:	f800283a 	ret
 100a4f8:	2140b717 	ldw	r5,732(r4)
 100a4fc:	28000c26 	beq	r5,zero,100a530 <_signal_r+0x88>
 100a500:	8c45883a 	add	r2,r17,r17
 100a504:	1085883a 	add	r2,r2,r2
 100a508:	1145883a 	add	r2,r2,r5
 100a50c:	10c00017 	ldw	r3,0(r2)
 100a510:	14800015 	stw	r18,0(r2)
 100a514:	1805883a 	mov	r2,r3
 100a518:	dfc00317 	ldw	ra,12(sp)
 100a51c:	dc800217 	ldw	r18,8(sp)
 100a520:	dc400117 	ldw	r17,4(sp)
 100a524:	dc000017 	ldw	r16,0(sp)
 100a528:	dec00404 	addi	sp,sp,16
 100a52c:	f800283a 	ret
 100a530:	100a36c0 	call	100a36c <_init_signal_r>
 100a534:	1000021e 	bne	r2,zero,100a540 <_signal_r+0x98>
 100a538:	8140b717 	ldw	r5,732(r16)
 100a53c:	003ff006 	br	100a500 <_signal_r+0x58>
 100a540:	00ffffc4 	movi	r3,-1
 100a544:	003fe506 	br	100a4dc <_signal_r+0x34>

0100a548 <signal>:
 100a548:	018040b4 	movhi	r6,258
 100a54c:	3184a204 	addi	r6,r6,4744
 100a550:	2007883a 	mov	r3,r4
 100a554:	31000017 	ldw	r4,0(r6)
 100a558:	280d883a 	mov	r6,r5
 100a55c:	180b883a 	mov	r5,r3
 100a560:	100a4a81 	jmpi	100a4a8 <_signal_r>

0100a564 <_getpid_r>:
 100a564:	10134701 	jmpi	1013470 <getpid>

0100a568 <_kill_r>:
 100a568:	defffd04 	addi	sp,sp,-12
 100a56c:	dc000015 	stw	r16,0(sp)
 100a570:	040040b4 	movhi	r16,258
 100a574:	840bac04 	addi	r16,r16,11952
 100a578:	dc400115 	stw	r17,4(sp)
 100a57c:	80000015 	stw	zero,0(r16)
 100a580:	2023883a 	mov	r17,r4
 100a584:	2809883a 	mov	r4,r5
 100a588:	300b883a 	mov	r5,r6
 100a58c:	dfc00215 	stw	ra,8(sp)
 100a590:	10135b00 	call	10135b0 <kill>
 100a594:	1007883a 	mov	r3,r2
 100a598:	00bfffc4 	movi	r2,-1
 100a59c:	18800626 	beq	r3,r2,100a5b8 <_kill_r+0x50>
 100a5a0:	1805883a 	mov	r2,r3
 100a5a4:	dfc00217 	ldw	ra,8(sp)
 100a5a8:	dc400117 	ldw	r17,4(sp)
 100a5ac:	dc000017 	ldw	r16,0(sp)
 100a5b0:	dec00304 	addi	sp,sp,12
 100a5b4:	f800283a 	ret
 100a5b8:	80800017 	ldw	r2,0(r16)
 100a5bc:	103ff826 	beq	r2,zero,100a5a0 <_kill_r+0x38>
 100a5c0:	88800015 	stw	r2,0(r17)
 100a5c4:	1805883a 	mov	r2,r3
 100a5c8:	dfc00217 	ldw	ra,8(sp)
 100a5cc:	dc400117 	ldw	r17,4(sp)
 100a5d0:	dc000017 	ldw	r16,0(sp)
 100a5d4:	dec00304 	addi	sp,sp,12
 100a5d8:	f800283a 	ret

0100a5dc <strlen>:
 100a5dc:	208000cc 	andi	r2,r4,3
 100a5e0:	2011883a 	mov	r8,r4
 100a5e4:	1000161e 	bne	r2,zero,100a640 <strlen+0x64>
 100a5e8:	20c00017 	ldw	r3,0(r4)
 100a5ec:	017fbff4 	movhi	r5,65279
 100a5f0:	297fbfc4 	addi	r5,r5,-257
 100a5f4:	01e02074 	movhi	r7,32897
 100a5f8:	39e02004 	addi	r7,r7,-32640
 100a5fc:	1945883a 	add	r2,r3,r5
 100a600:	11c4703a 	and	r2,r2,r7
 100a604:	00c6303a 	nor	r3,zero,r3
 100a608:	1886703a 	and	r3,r3,r2
 100a60c:	18000c1e 	bne	r3,zero,100a640 <strlen+0x64>
 100a610:	280d883a 	mov	r6,r5
 100a614:	380b883a 	mov	r5,r7
 100a618:	21000104 	addi	r4,r4,4
 100a61c:	20800017 	ldw	r2,0(r4)
 100a620:	1187883a 	add	r3,r2,r6
 100a624:	1946703a 	and	r3,r3,r5
 100a628:	0084303a 	nor	r2,zero,r2
 100a62c:	10c4703a 	and	r2,r2,r3
 100a630:	103ff926 	beq	r2,zero,100a618 <strlen+0x3c>
 100a634:	20800007 	ldb	r2,0(r4)
 100a638:	10000326 	beq	r2,zero,100a648 <strlen+0x6c>
 100a63c:	21000044 	addi	r4,r4,1
 100a640:	20800007 	ldb	r2,0(r4)
 100a644:	103ffd1e 	bne	r2,zero,100a63c <strlen+0x60>
 100a648:	2205c83a 	sub	r2,r4,r8
 100a64c:	f800283a 	ret

0100a650 <__sprint_r>:
 100a650:	30800217 	ldw	r2,8(r6)
 100a654:	defffe04 	addi	sp,sp,-8
 100a658:	dc000015 	stw	r16,0(sp)
 100a65c:	dfc00115 	stw	ra,4(sp)
 100a660:	3021883a 	mov	r16,r6
 100a664:	0007883a 	mov	r3,zero
 100a668:	1000061e 	bne	r2,zero,100a684 <__sprint_r+0x34>
 100a66c:	1805883a 	mov	r2,r3
 100a670:	30000115 	stw	zero,4(r6)
 100a674:	dfc00117 	ldw	ra,4(sp)
 100a678:	dc000017 	ldw	r16,0(sp)
 100a67c:	dec00204 	addi	sp,sp,8
 100a680:	f800283a 	ret
 100a684:	100e7b00 	call	100e7b0 <__sfvwrite_r>
 100a688:	1007883a 	mov	r3,r2
 100a68c:	1805883a 	mov	r2,r3
 100a690:	80000115 	stw	zero,4(r16)
 100a694:	80000215 	stw	zero,8(r16)
 100a698:	dfc00117 	ldw	ra,4(sp)
 100a69c:	dc000017 	ldw	r16,0(sp)
 100a6a0:	dec00204 	addi	sp,sp,8
 100a6a4:	f800283a 	ret

0100a6a8 <___vfprintf_internal_r>:
 100a6a8:	defea404 	addi	sp,sp,-1392
 100a6ac:	dd815815 	stw	r22,1376(sp)
 100a6b0:	dc015215 	stw	r16,1352(sp)
 100a6b4:	d9c15115 	stw	r7,1348(sp)
 100a6b8:	dfc15b15 	stw	ra,1388(sp)
 100a6bc:	df015a15 	stw	fp,1384(sp)
 100a6c0:	ddc15915 	stw	r23,1380(sp)
 100a6c4:	dd415715 	stw	r21,1372(sp)
 100a6c8:	dd015615 	stw	r20,1368(sp)
 100a6cc:	dcc15515 	stw	r19,1364(sp)
 100a6d0:	dc815415 	stw	r18,1360(sp)
 100a6d4:	dc415315 	stw	r17,1356(sp)
 100a6d8:	282d883a 	mov	r22,r5
 100a6dc:	3021883a 	mov	r16,r6
 100a6e0:	d9014f15 	stw	r4,1340(sp)
 100a6e4:	100edd40 	call	100edd4 <_localeconv_r>
 100a6e8:	10800017 	ldw	r2,0(r2)
 100a6ec:	d9c15117 	ldw	r7,1348(sp)
 100a6f0:	d8814915 	stw	r2,1316(sp)
 100a6f4:	d8814f17 	ldw	r2,1340(sp)
 100a6f8:	10000226 	beq	r2,zero,100a704 <___vfprintf_internal_r+0x5c>
 100a6fc:	10800e17 	ldw	r2,56(r2)
 100a700:	10020d26 	beq	r2,zero,100af38 <___vfprintf_internal_r+0x890>
 100a704:	b080030b 	ldhu	r2,12(r22)
 100a708:	1080020c 	andi	r2,r2,8
 100a70c:	10020e26 	beq	r2,zero,100af48 <___vfprintf_internal_r+0x8a0>
 100a710:	b0800417 	ldw	r2,16(r22)
 100a714:	10020c26 	beq	r2,zero,100af48 <___vfprintf_internal_r+0x8a0>
 100a718:	b200030b 	ldhu	r8,12(r22)
 100a71c:	00800284 	movi	r2,10
 100a720:	40c0068c 	andi	r3,r8,26
 100a724:	18802f1e 	bne	r3,r2,100a7e4 <___vfprintf_internal_r+0x13c>
 100a728:	b080038f 	ldh	r2,14(r22)
 100a72c:	10002d16 	blt	r2,zero,100a7e4 <___vfprintf_internal_r+0x13c>
 100a730:	b240038b 	ldhu	r9,14(r22)
 100a734:	b2800717 	ldw	r10,28(r22)
 100a738:	b2c00917 	ldw	r11,36(r22)
 100a73c:	d9014f17 	ldw	r4,1340(sp)
 100a740:	dc402904 	addi	r17,sp,164
 100a744:	d8804004 	addi	r2,sp,256
 100a748:	00c10004 	movi	r3,1024
 100a74c:	423fff4c 	andi	r8,r8,65533
 100a750:	800d883a 	mov	r6,r16
 100a754:	880b883a 	mov	r5,r17
 100a758:	da002c0d 	sth	r8,176(sp)
 100a75c:	da402c8d 	sth	r9,178(sp)
 100a760:	da803015 	stw	r10,192(sp)
 100a764:	dac03215 	stw	r11,200(sp)
 100a768:	d8802d15 	stw	r2,180(sp)
 100a76c:	d8c02e15 	stw	r3,184(sp)
 100a770:	d8802915 	stw	r2,164(sp)
 100a774:	d8c02b15 	stw	r3,172(sp)
 100a778:	d8002f15 	stw	zero,188(sp)
 100a77c:	100a6a80 	call	100a6a8 <___vfprintf_internal_r>
 100a780:	d8814b15 	stw	r2,1324(sp)
 100a784:	10000416 	blt	r2,zero,100a798 <___vfprintf_internal_r+0xf0>
 100a788:	d9014f17 	ldw	r4,1340(sp)
 100a78c:	880b883a 	mov	r5,r17
 100a790:	100de800 	call	100de80 <_fflush_r>
 100a794:	1002321e 	bne	r2,zero,100b060 <___vfprintf_internal_r+0x9b8>
 100a798:	d8802c0b 	ldhu	r2,176(sp)
 100a79c:	1080100c 	andi	r2,r2,64
 100a7a0:	10000326 	beq	r2,zero,100a7b0 <___vfprintf_internal_r+0x108>
 100a7a4:	b080030b 	ldhu	r2,12(r22)
 100a7a8:	10801014 	ori	r2,r2,64
 100a7ac:	b080030d 	sth	r2,12(r22)
 100a7b0:	d8814b17 	ldw	r2,1324(sp)
 100a7b4:	dfc15b17 	ldw	ra,1388(sp)
 100a7b8:	df015a17 	ldw	fp,1384(sp)
 100a7bc:	ddc15917 	ldw	r23,1380(sp)
 100a7c0:	dd815817 	ldw	r22,1376(sp)
 100a7c4:	dd415717 	ldw	r21,1372(sp)
 100a7c8:	dd015617 	ldw	r20,1368(sp)
 100a7cc:	dcc15517 	ldw	r19,1364(sp)
 100a7d0:	dc815417 	ldw	r18,1360(sp)
 100a7d4:	dc415317 	ldw	r17,1356(sp)
 100a7d8:	dc015217 	ldw	r16,1352(sp)
 100a7dc:	dec15c04 	addi	sp,sp,1392
 100a7e0:	f800283a 	ret
 100a7e4:	0005883a 	mov	r2,zero
 100a7e8:	0007883a 	mov	r3,zero
 100a7ec:	dd401904 	addi	r21,sp,100
 100a7f0:	d8814215 	stw	r2,1288(sp)
 100a7f4:	802f883a 	mov	r23,r16
 100a7f8:	d8c14315 	stw	r3,1292(sp)
 100a7fc:	d8014b15 	stw	zero,1324(sp)
 100a800:	d8014815 	stw	zero,1312(sp)
 100a804:	d8014415 	stw	zero,1296(sp)
 100a808:	d8014715 	stw	zero,1308(sp)
 100a80c:	dd400c15 	stw	r21,48(sp)
 100a810:	d8000e15 	stw	zero,56(sp)
 100a814:	d8000d15 	stw	zero,52(sp)
 100a818:	b8800007 	ldb	r2,0(r23)
 100a81c:	10001926 	beq	r2,zero,100a884 <___vfprintf_internal_r+0x1dc>
 100a820:	00c00944 	movi	r3,37
 100a824:	10c01726 	beq	r2,r3,100a884 <___vfprintf_internal_r+0x1dc>
 100a828:	b821883a 	mov	r16,r23
 100a82c:	00000106 	br	100a834 <___vfprintf_internal_r+0x18c>
 100a830:	10c00326 	beq	r2,r3,100a840 <___vfprintf_internal_r+0x198>
 100a834:	84000044 	addi	r16,r16,1
 100a838:	80800007 	ldb	r2,0(r16)
 100a83c:	103ffc1e 	bne	r2,zero,100a830 <___vfprintf_internal_r+0x188>
 100a840:	85e7c83a 	sub	r19,r16,r23
 100a844:	98000e26 	beq	r19,zero,100a880 <___vfprintf_internal_r+0x1d8>
 100a848:	dc800e17 	ldw	r18,56(sp)
 100a84c:	dc400d17 	ldw	r17,52(sp)
 100a850:	008001c4 	movi	r2,7
 100a854:	94e5883a 	add	r18,r18,r19
 100a858:	8c400044 	addi	r17,r17,1
 100a85c:	adc00015 	stw	r23,0(r21)
 100a860:	dc800e15 	stw	r18,56(sp)
 100a864:	acc00115 	stw	r19,4(r21)
 100a868:	dc400d15 	stw	r17,52(sp)
 100a86c:	14428b16 	blt	r2,r17,100b29c <___vfprintf_internal_r+0xbf4>
 100a870:	ad400204 	addi	r21,r21,8
 100a874:	d9014b17 	ldw	r4,1324(sp)
 100a878:	24c9883a 	add	r4,r4,r19
 100a87c:	d9014b15 	stw	r4,1324(sp)
 100a880:	802f883a 	mov	r23,r16
 100a884:	b8800007 	ldb	r2,0(r23)
 100a888:	10013c26 	beq	r2,zero,100ad7c <___vfprintf_internal_r+0x6d4>
 100a88c:	bdc00044 	addi	r23,r23,1
 100a890:	d8000405 	stb	zero,16(sp)
 100a894:	b8c00007 	ldb	r3,0(r23)
 100a898:	04ffffc4 	movi	r19,-1
 100a89c:	d8014c15 	stw	zero,1328(sp)
 100a8a0:	d8014a15 	stw	zero,1320(sp)
 100a8a4:	d8c14d15 	stw	r3,1332(sp)
 100a8a8:	bdc00044 	addi	r23,r23,1
 100a8ac:	d9414d17 	ldw	r5,1332(sp)
 100a8b0:	00801604 	movi	r2,88
 100a8b4:	28fff804 	addi	r3,r5,-32
 100a8b8:	10c06036 	bltu	r2,r3,100aa3c <___vfprintf_internal_r+0x394>
 100a8bc:	18c5883a 	add	r2,r3,r3
 100a8c0:	1085883a 	add	r2,r2,r2
 100a8c4:	00c04074 	movhi	r3,257
 100a8c8:	18ea3604 	addi	r3,r3,-22312
 100a8cc:	10c5883a 	add	r2,r2,r3
 100a8d0:	11000017 	ldw	r4,0(r2)
 100a8d4:	2000683a 	jmp	r4
 100a8d8:	0100b84c 	andi	r4,zero,737
 100a8dc:	0100aa3c 	xorhi	r4,zero,680
 100a8e0:	0100aa3c 	xorhi	r4,zero,680
 100a8e4:	0100b838 	rdprs	r4,zero,736
 100a8e8:	0100aa3c 	xorhi	r4,zero,680
 100a8ec:	0100aa3c 	xorhi	r4,zero,680
 100a8f0:	0100aa3c 	xorhi	r4,zero,680
 100a8f4:	0100aa3c 	xorhi	r4,zero,680
 100a8f8:	0100aa3c 	xorhi	r4,zero,680
 100a8fc:	0100aa3c 	xorhi	r4,zero,680
 100a900:	0100b618 	cmpnei	r4,zero,728
 100a904:	0100b828 	cmpgeui	r4,zero,736
 100a908:	0100aa3c 	xorhi	r4,zero,680
 100a90c:	0100b630 	cmpltui	r4,zero,728
 100a910:	0100b8c4 	movi	r4,739
 100a914:	0100aa3c 	xorhi	r4,zero,680
 100a918:	0100b8b0 	cmpltui	r4,zero,738
 100a91c:	0100b878 	rdprs	r4,zero,737
 100a920:	0100b878 	rdprs	r4,zero,737
 100a924:	0100b878 	rdprs	r4,zero,737
 100a928:	0100b878 	rdprs	r4,zero,737
 100a92c:	0100b878 	rdprs	r4,zero,737
 100a930:	0100b878 	rdprs	r4,zero,737
 100a934:	0100b878 	rdprs	r4,zero,737
 100a938:	0100b878 	rdprs	r4,zero,737
 100a93c:	0100b878 	rdprs	r4,zero,737
 100a940:	0100aa3c 	xorhi	r4,zero,680
 100a944:	0100aa3c 	xorhi	r4,zero,680
 100a948:	0100aa3c 	xorhi	r4,zero,680
 100a94c:	0100aa3c 	xorhi	r4,zero,680
 100a950:	0100aa3c 	xorhi	r4,zero,680
 100a954:	0100aa3c 	xorhi	r4,zero,680
 100a958:	0100aa3c 	xorhi	r4,zero,680
 100a95c:	0100aa3c 	xorhi	r4,zero,680
 100a960:	0100aa3c 	xorhi	r4,zero,680
 100a964:	0100aa3c 	xorhi	r4,zero,680
 100a968:	0100b094 	movui	r4,706
 100a96c:	0100b700 	call	100b70 <OSCtxSw_SWITCH_PC+0x100b30>
 100a970:	0100aa3c 	xorhi	r4,zero,680
 100a974:	0100b700 	call	100b70 <OSCtxSw_SWITCH_PC+0x100b30>
 100a978:	0100aa3c 	xorhi	r4,zero,680
 100a97c:	0100aa3c 	xorhi	r4,zero,680
 100a980:	0100aa3c 	xorhi	r4,zero,680
 100a984:	0100aa3c 	xorhi	r4,zero,680
 100a988:	0100b864 	muli	r4,zero,737
 100a98c:	0100aa3c 	xorhi	r4,zero,680
 100a990:	0100aa3c 	xorhi	r4,zero,680
 100a994:	0100b148 	cmpgei	r4,zero,709
 100a998:	0100aa3c 	xorhi	r4,zero,680
 100a99c:	0100aa3c 	xorhi	r4,zero,680
 100a9a0:	0100aa3c 	xorhi	r4,zero,680
 100a9a4:	0100aa3c 	xorhi	r4,zero,680
 100a9a8:	0100aa3c 	xorhi	r4,zero,680
 100a9ac:	0100b194 	movui	r4,710
 100a9b0:	0100aa3c 	xorhi	r4,zero,680
 100a9b4:	0100aa3c 	xorhi	r4,zero,680
 100a9b8:	0100b7b4 	movhi	r4,734
 100a9bc:	0100aa3c 	xorhi	r4,zero,680
 100a9c0:	0100aa3c 	xorhi	r4,zero,680
 100a9c4:	0100aa3c 	xorhi	r4,zero,680
 100a9c8:	0100aa3c 	xorhi	r4,zero,680
 100a9cc:	0100aa3c 	xorhi	r4,zero,680
 100a9d0:	0100aa3c 	xorhi	r4,zero,680
 100a9d4:	0100aa3c 	xorhi	r4,zero,680
 100a9d8:	0100aa3c 	xorhi	r4,zero,680
 100a9dc:	0100aa3c 	xorhi	r4,zero,680
 100a9e0:	0100aa3c 	xorhi	r4,zero,680
 100a9e4:	0100b788 	cmpgei	r4,zero,734
 100a9e8:	0100b0a0 	cmpeqi	r4,zero,706
 100a9ec:	0100b700 	call	100b70 <OSCtxSw_SWITCH_PC+0x100b30>
 100a9f0:	0100b700 	call	100b70 <OSCtxSw_SWITCH_PC+0x100b30>
 100a9f4:	0100b700 	call	100b70 <OSCtxSw_SWITCH_PC+0x100b30>
 100a9f8:	0100b6ec 	andhi	r4,zero,731
 100a9fc:	0100b0a0 	cmpeqi	r4,zero,706
 100aa00:	0100aa3c 	xorhi	r4,zero,680
 100aa04:	0100aa3c 	xorhi	r4,zero,680
 100aa08:	0100b674 	movhi	r4,729
 100aa0c:	0100aa3c 	xorhi	r4,zero,680
 100aa10:	0100b644 	movi	r4,729
 100aa14:	0100b154 	movui	r4,709
 100aa18:	0100b6a4 	muli	r4,zero,730
 100aa1c:	0100b690 	cmplti	r4,zero,730
 100aa20:	0100aa3c 	xorhi	r4,zero,680
 100aa24:	0100b920 	cmpeqi	r4,zero,740
 100aa28:	0100aa3c 	xorhi	r4,zero,680
 100aa2c:	0100b1a0 	cmpeqi	r4,zero,710
 100aa30:	0100aa3c 	xorhi	r4,zero,680
 100aa34:	0100aa3c 	xorhi	r4,zero,680
 100aa38:	0100b818 	cmpnei	r4,zero,736
 100aa3c:	d9014d17 	ldw	r4,1332(sp)
 100aa40:	2000ce26 	beq	r4,zero,100ad7c <___vfprintf_internal_r+0x6d4>
 100aa44:	01400044 	movi	r5,1
 100aa48:	d9800f04 	addi	r6,sp,60
 100aa4c:	d9c14015 	stw	r7,1280(sp)
 100aa50:	d9414515 	stw	r5,1300(sp)
 100aa54:	d9814115 	stw	r6,1284(sp)
 100aa58:	280f883a 	mov	r7,r5
 100aa5c:	d9000f05 	stb	r4,60(sp)
 100aa60:	d8000405 	stb	zero,16(sp)
 100aa64:	d8014615 	stw	zero,1304(sp)
 100aa68:	d8c14c17 	ldw	r3,1328(sp)
 100aa6c:	1880008c 	andi	r2,r3,2
 100aa70:	1005003a 	cmpeq	r2,r2,zero
 100aa74:	d8815015 	stw	r2,1344(sp)
 100aa78:	1000031e 	bne	r2,zero,100aa88 <___vfprintf_internal_r+0x3e0>
 100aa7c:	d9014517 	ldw	r4,1300(sp)
 100aa80:	21000084 	addi	r4,r4,2
 100aa84:	d9014515 	stw	r4,1300(sp)
 100aa88:	d9414c17 	ldw	r5,1328(sp)
 100aa8c:	2940210c 	andi	r5,r5,132
 100aa90:	d9414e15 	stw	r5,1336(sp)
 100aa94:	28002d1e 	bne	r5,zero,100ab4c <___vfprintf_internal_r+0x4a4>
 100aa98:	d9814a17 	ldw	r6,1320(sp)
 100aa9c:	d8814517 	ldw	r2,1300(sp)
 100aaa0:	30a1c83a 	sub	r16,r6,r2
 100aaa4:	0400290e 	bge	zero,r16,100ab4c <___vfprintf_internal_r+0x4a4>
 100aaa8:	00800404 	movi	r2,16
 100aaac:	1404580e 	bge	r2,r16,100bc10 <___vfprintf_internal_r+0x1568>
 100aab0:	dc800e17 	ldw	r18,56(sp)
 100aab4:	dc400d17 	ldw	r17,52(sp)
 100aab8:	1027883a 	mov	r19,r2
 100aabc:	070040b4 	movhi	fp,258
 100aac0:	e73cfc84 	addi	fp,fp,-3086
 100aac4:	050001c4 	movi	r20,7
 100aac8:	00000306 	br	100aad8 <___vfprintf_internal_r+0x430>
 100aacc:	843ffc04 	addi	r16,r16,-16
 100aad0:	ad400204 	addi	r21,r21,8
 100aad4:	9c00130e 	bge	r19,r16,100ab24 <___vfprintf_internal_r+0x47c>
 100aad8:	94800404 	addi	r18,r18,16
 100aadc:	8c400044 	addi	r17,r17,1
 100aae0:	af000015 	stw	fp,0(r21)
 100aae4:	acc00115 	stw	r19,4(r21)
 100aae8:	dc800e15 	stw	r18,56(sp)
 100aaec:	dc400d15 	stw	r17,52(sp)
 100aaf0:	a47ff60e 	bge	r20,r17,100aacc <___vfprintf_internal_r+0x424>
 100aaf4:	d9014f17 	ldw	r4,1340(sp)
 100aaf8:	b00b883a 	mov	r5,r22
 100aafc:	d9800c04 	addi	r6,sp,48
 100ab00:	d9c15115 	stw	r7,1348(sp)
 100ab04:	100a6500 	call	100a650 <__sprint_r>
 100ab08:	d9c15117 	ldw	r7,1348(sp)
 100ab0c:	10009e1e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100ab10:	843ffc04 	addi	r16,r16,-16
 100ab14:	dc800e17 	ldw	r18,56(sp)
 100ab18:	dc400d17 	ldw	r17,52(sp)
 100ab1c:	dd401904 	addi	r21,sp,100
 100ab20:	9c3fed16 	blt	r19,r16,100aad8 <___vfprintf_internal_r+0x430>
 100ab24:	9425883a 	add	r18,r18,r16
 100ab28:	8c400044 	addi	r17,r17,1
 100ab2c:	008001c4 	movi	r2,7
 100ab30:	af000015 	stw	fp,0(r21)
 100ab34:	ac000115 	stw	r16,4(r21)
 100ab38:	dc800e15 	stw	r18,56(sp)
 100ab3c:	dc400d15 	stw	r17,52(sp)
 100ab40:	1441f516 	blt	r2,r17,100b318 <___vfprintf_internal_r+0xc70>
 100ab44:	ad400204 	addi	r21,r21,8
 100ab48:	00000206 	br	100ab54 <___vfprintf_internal_r+0x4ac>
 100ab4c:	dc800e17 	ldw	r18,56(sp)
 100ab50:	dc400d17 	ldw	r17,52(sp)
 100ab54:	d8800407 	ldb	r2,16(sp)
 100ab58:	10000b26 	beq	r2,zero,100ab88 <___vfprintf_internal_r+0x4e0>
 100ab5c:	00800044 	movi	r2,1
 100ab60:	94800044 	addi	r18,r18,1
 100ab64:	8c400044 	addi	r17,r17,1
 100ab68:	a8800115 	stw	r2,4(r21)
 100ab6c:	d8c00404 	addi	r3,sp,16
 100ab70:	008001c4 	movi	r2,7
 100ab74:	a8c00015 	stw	r3,0(r21)
 100ab78:	dc800e15 	stw	r18,56(sp)
 100ab7c:	dc400d15 	stw	r17,52(sp)
 100ab80:	1441da16 	blt	r2,r17,100b2ec <___vfprintf_internal_r+0xc44>
 100ab84:	ad400204 	addi	r21,r21,8
 100ab88:	d9015017 	ldw	r4,1344(sp)
 100ab8c:	20000b1e 	bne	r4,zero,100abbc <___vfprintf_internal_r+0x514>
 100ab90:	d8800444 	addi	r2,sp,17
 100ab94:	94800084 	addi	r18,r18,2
 100ab98:	8c400044 	addi	r17,r17,1
 100ab9c:	a8800015 	stw	r2,0(r21)
 100aba0:	00c00084 	movi	r3,2
 100aba4:	008001c4 	movi	r2,7
 100aba8:	a8c00115 	stw	r3,4(r21)
 100abac:	dc800e15 	stw	r18,56(sp)
 100abb0:	dc400d15 	stw	r17,52(sp)
 100abb4:	1441c216 	blt	r2,r17,100b2c0 <___vfprintf_internal_r+0xc18>
 100abb8:	ad400204 	addi	r21,r21,8
 100abbc:	d9414e17 	ldw	r5,1336(sp)
 100abc0:	00802004 	movi	r2,128
 100abc4:	2880b126 	beq	r5,r2,100ae8c <___vfprintf_internal_r+0x7e4>
 100abc8:	d8c14617 	ldw	r3,1304(sp)
 100abcc:	19e1c83a 	sub	r16,r3,r7
 100abd0:	0400260e 	bge	zero,r16,100ac6c <___vfprintf_internal_r+0x5c4>
 100abd4:	00800404 	movi	r2,16
 100abd8:	1403c90e 	bge	r2,r16,100bb00 <___vfprintf_internal_r+0x1458>
 100abdc:	1027883a 	mov	r19,r2
 100abe0:	070040b4 	movhi	fp,258
 100abe4:	e73cf884 	addi	fp,fp,-3102
 100abe8:	050001c4 	movi	r20,7
 100abec:	00000306 	br	100abfc <___vfprintf_internal_r+0x554>
 100abf0:	843ffc04 	addi	r16,r16,-16
 100abf4:	ad400204 	addi	r21,r21,8
 100abf8:	9c00130e 	bge	r19,r16,100ac48 <___vfprintf_internal_r+0x5a0>
 100abfc:	94800404 	addi	r18,r18,16
 100ac00:	8c400044 	addi	r17,r17,1
 100ac04:	af000015 	stw	fp,0(r21)
 100ac08:	acc00115 	stw	r19,4(r21)
 100ac0c:	dc800e15 	stw	r18,56(sp)
 100ac10:	dc400d15 	stw	r17,52(sp)
 100ac14:	a47ff60e 	bge	r20,r17,100abf0 <___vfprintf_internal_r+0x548>
 100ac18:	d9014f17 	ldw	r4,1340(sp)
 100ac1c:	b00b883a 	mov	r5,r22
 100ac20:	d9800c04 	addi	r6,sp,48
 100ac24:	d9c15115 	stw	r7,1348(sp)
 100ac28:	100a6500 	call	100a650 <__sprint_r>
 100ac2c:	d9c15117 	ldw	r7,1348(sp)
 100ac30:	1000551e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100ac34:	843ffc04 	addi	r16,r16,-16
 100ac38:	dc800e17 	ldw	r18,56(sp)
 100ac3c:	dc400d17 	ldw	r17,52(sp)
 100ac40:	dd401904 	addi	r21,sp,100
 100ac44:	9c3fed16 	blt	r19,r16,100abfc <___vfprintf_internal_r+0x554>
 100ac48:	9425883a 	add	r18,r18,r16
 100ac4c:	8c400044 	addi	r17,r17,1
 100ac50:	008001c4 	movi	r2,7
 100ac54:	af000015 	stw	fp,0(r21)
 100ac58:	ac000115 	stw	r16,4(r21)
 100ac5c:	dc800e15 	stw	r18,56(sp)
 100ac60:	dc400d15 	stw	r17,52(sp)
 100ac64:	14418216 	blt	r2,r17,100b270 <___vfprintf_internal_r+0xbc8>
 100ac68:	ad400204 	addi	r21,r21,8
 100ac6c:	d9014c17 	ldw	r4,1328(sp)
 100ac70:	2080400c 	andi	r2,r4,256
 100ac74:	10004a1e 	bne	r2,zero,100ada0 <___vfprintf_internal_r+0x6f8>
 100ac78:	d9414117 	ldw	r5,1284(sp)
 100ac7c:	91e5883a 	add	r18,r18,r7
 100ac80:	8c400044 	addi	r17,r17,1
 100ac84:	008001c4 	movi	r2,7
 100ac88:	a9400015 	stw	r5,0(r21)
 100ac8c:	a9c00115 	stw	r7,4(r21)
 100ac90:	dc800e15 	stw	r18,56(sp)
 100ac94:	dc400d15 	stw	r17,52(sp)
 100ac98:	14416716 	blt	r2,r17,100b238 <___vfprintf_internal_r+0xb90>
 100ac9c:	a8c00204 	addi	r3,r21,8
 100aca0:	d9814c17 	ldw	r6,1328(sp)
 100aca4:	3080010c 	andi	r2,r6,4
 100aca8:	10002826 	beq	r2,zero,100ad4c <___vfprintf_internal_r+0x6a4>
 100acac:	d8814a17 	ldw	r2,1320(sp)
 100acb0:	d9014517 	ldw	r4,1300(sp)
 100acb4:	1121c83a 	sub	r16,r2,r4
 100acb8:	0400240e 	bge	zero,r16,100ad4c <___vfprintf_internal_r+0x6a4>
 100acbc:	00800404 	movi	r2,16
 100acc0:	14044f0e 	bge	r2,r16,100be00 <___vfprintf_internal_r+0x1758>
 100acc4:	dc400d17 	ldw	r17,52(sp)
 100acc8:	1027883a 	mov	r19,r2
 100accc:	070040b4 	movhi	fp,258
 100acd0:	e73cfc84 	addi	fp,fp,-3086
 100acd4:	050001c4 	movi	r20,7
 100acd8:	00000306 	br	100ace8 <___vfprintf_internal_r+0x640>
 100acdc:	843ffc04 	addi	r16,r16,-16
 100ace0:	18c00204 	addi	r3,r3,8
 100ace4:	9c00110e 	bge	r19,r16,100ad2c <___vfprintf_internal_r+0x684>
 100ace8:	94800404 	addi	r18,r18,16
 100acec:	8c400044 	addi	r17,r17,1
 100acf0:	1f000015 	stw	fp,0(r3)
 100acf4:	1cc00115 	stw	r19,4(r3)
 100acf8:	dc800e15 	stw	r18,56(sp)
 100acfc:	dc400d15 	stw	r17,52(sp)
 100ad00:	a47ff60e 	bge	r20,r17,100acdc <___vfprintf_internal_r+0x634>
 100ad04:	d9014f17 	ldw	r4,1340(sp)
 100ad08:	b00b883a 	mov	r5,r22
 100ad0c:	d9800c04 	addi	r6,sp,48
 100ad10:	100a6500 	call	100a650 <__sprint_r>
 100ad14:	10001c1e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100ad18:	843ffc04 	addi	r16,r16,-16
 100ad1c:	dc800e17 	ldw	r18,56(sp)
 100ad20:	dc400d17 	ldw	r17,52(sp)
 100ad24:	d8c01904 	addi	r3,sp,100
 100ad28:	9c3fef16 	blt	r19,r16,100ace8 <___vfprintf_internal_r+0x640>
 100ad2c:	9425883a 	add	r18,r18,r16
 100ad30:	8c400044 	addi	r17,r17,1
 100ad34:	008001c4 	movi	r2,7
 100ad38:	1f000015 	stw	fp,0(r3)
 100ad3c:	1c000115 	stw	r16,4(r3)
 100ad40:	dc800e15 	stw	r18,56(sp)
 100ad44:	dc400d15 	stw	r17,52(sp)
 100ad48:	1440cb16 	blt	r2,r17,100b078 <___vfprintf_internal_r+0x9d0>
 100ad4c:	d8814a17 	ldw	r2,1320(sp)
 100ad50:	d9414517 	ldw	r5,1300(sp)
 100ad54:	1140010e 	bge	r2,r5,100ad5c <___vfprintf_internal_r+0x6b4>
 100ad58:	2805883a 	mov	r2,r5
 100ad5c:	d9814b17 	ldw	r6,1324(sp)
 100ad60:	308d883a 	add	r6,r6,r2
 100ad64:	d9814b15 	stw	r6,1324(sp)
 100ad68:	90013b1e 	bne	r18,zero,100b258 <___vfprintf_internal_r+0xbb0>
 100ad6c:	d9c14017 	ldw	r7,1280(sp)
 100ad70:	dd401904 	addi	r21,sp,100
 100ad74:	d8000d15 	stw	zero,52(sp)
 100ad78:	003ea706 	br	100a818 <___vfprintf_internal_r+0x170>
 100ad7c:	d8800e17 	ldw	r2,56(sp)
 100ad80:	10053f1e 	bne	r2,zero,100c280 <___vfprintf_internal_r+0x1bd8>
 100ad84:	d8000d15 	stw	zero,52(sp)
 100ad88:	b080030b 	ldhu	r2,12(r22)
 100ad8c:	1080100c 	andi	r2,r2,64
 100ad90:	103e8726 	beq	r2,zero,100a7b0 <___vfprintf_internal_r+0x108>
 100ad94:	00bfffc4 	movi	r2,-1
 100ad98:	d8814b15 	stw	r2,1324(sp)
 100ad9c:	003e8406 	br	100a7b0 <___vfprintf_internal_r+0x108>
 100ada0:	d9814d17 	ldw	r6,1332(sp)
 100ada4:	00801944 	movi	r2,101
 100ada8:	11806e16 	blt	r2,r6,100af64 <___vfprintf_internal_r+0x8bc>
 100adac:	d9414717 	ldw	r5,1308(sp)
 100adb0:	00c00044 	movi	r3,1
 100adb4:	1943430e 	bge	r3,r5,100bac4 <___vfprintf_internal_r+0x141c>
 100adb8:	d8814117 	ldw	r2,1284(sp)
 100adbc:	94800044 	addi	r18,r18,1
 100adc0:	8c400044 	addi	r17,r17,1
 100adc4:	a8800015 	stw	r2,0(r21)
 100adc8:	008001c4 	movi	r2,7
 100adcc:	a8c00115 	stw	r3,4(r21)
 100add0:	dc800e15 	stw	r18,56(sp)
 100add4:	dc400d15 	stw	r17,52(sp)
 100add8:	1441ca16 	blt	r2,r17,100b504 <___vfprintf_internal_r+0xe5c>
 100addc:	a8c00204 	addi	r3,r21,8
 100ade0:	d9014917 	ldw	r4,1316(sp)
 100ade4:	00800044 	movi	r2,1
 100ade8:	94800044 	addi	r18,r18,1
 100adec:	8c400044 	addi	r17,r17,1
 100adf0:	18800115 	stw	r2,4(r3)
 100adf4:	008001c4 	movi	r2,7
 100adf8:	19000015 	stw	r4,0(r3)
 100adfc:	dc800e15 	stw	r18,56(sp)
 100ae00:	dc400d15 	stw	r17,52(sp)
 100ae04:	1441b616 	blt	r2,r17,100b4e0 <___vfprintf_internal_r+0xe38>
 100ae08:	1cc00204 	addi	r19,r3,8
 100ae0c:	d9014217 	ldw	r4,1288(sp)
 100ae10:	d9414317 	ldw	r5,1292(sp)
 100ae14:	000d883a 	mov	r6,zero
 100ae18:	000f883a 	mov	r7,zero
 100ae1c:	101244c0 	call	101244c <__nedf2>
 100ae20:	10017426 	beq	r2,zero,100b3f4 <___vfprintf_internal_r+0xd4c>
 100ae24:	d9414717 	ldw	r5,1308(sp)
 100ae28:	d9814117 	ldw	r6,1284(sp)
 100ae2c:	8c400044 	addi	r17,r17,1
 100ae30:	2c85883a 	add	r2,r5,r18
 100ae34:	14bfffc4 	addi	r18,r2,-1
 100ae38:	28bfffc4 	addi	r2,r5,-1
 100ae3c:	30c00044 	addi	r3,r6,1
 100ae40:	98800115 	stw	r2,4(r19)
 100ae44:	008001c4 	movi	r2,7
 100ae48:	98c00015 	stw	r3,0(r19)
 100ae4c:	dc800e15 	stw	r18,56(sp)
 100ae50:	dc400d15 	stw	r17,52(sp)
 100ae54:	14418e16 	blt	r2,r17,100b490 <___vfprintf_internal_r+0xde8>
 100ae58:	9cc00204 	addi	r19,r19,8
 100ae5c:	d9414817 	ldw	r5,1312(sp)
 100ae60:	d8800804 	addi	r2,sp,32
 100ae64:	8c400044 	addi	r17,r17,1
 100ae68:	9165883a 	add	r18,r18,r5
 100ae6c:	98800015 	stw	r2,0(r19)
 100ae70:	008001c4 	movi	r2,7
 100ae74:	99400115 	stw	r5,4(r19)
 100ae78:	dc800e15 	stw	r18,56(sp)
 100ae7c:	dc400d15 	stw	r17,52(sp)
 100ae80:	1440ed16 	blt	r2,r17,100b238 <___vfprintf_internal_r+0xb90>
 100ae84:	98c00204 	addi	r3,r19,8
 100ae88:	003f8506 	br	100aca0 <___vfprintf_internal_r+0x5f8>
 100ae8c:	d9814a17 	ldw	r6,1320(sp)
 100ae90:	d8814517 	ldw	r2,1300(sp)
 100ae94:	30a1c83a 	sub	r16,r6,r2
 100ae98:	043f4b0e 	bge	zero,r16,100abc8 <___vfprintf_internal_r+0x520>
 100ae9c:	00800404 	movi	r2,16
 100aea0:	1404340e 	bge	r2,r16,100bf74 <___vfprintf_internal_r+0x18cc>
 100aea4:	1027883a 	mov	r19,r2
 100aea8:	070040b4 	movhi	fp,258
 100aeac:	e73cf884 	addi	fp,fp,-3102
 100aeb0:	050001c4 	movi	r20,7
 100aeb4:	00000306 	br	100aec4 <___vfprintf_internal_r+0x81c>
 100aeb8:	843ffc04 	addi	r16,r16,-16
 100aebc:	ad400204 	addi	r21,r21,8
 100aec0:	9c00130e 	bge	r19,r16,100af10 <___vfprintf_internal_r+0x868>
 100aec4:	94800404 	addi	r18,r18,16
 100aec8:	8c400044 	addi	r17,r17,1
 100aecc:	af000015 	stw	fp,0(r21)
 100aed0:	acc00115 	stw	r19,4(r21)
 100aed4:	dc800e15 	stw	r18,56(sp)
 100aed8:	dc400d15 	stw	r17,52(sp)
 100aedc:	a47ff60e 	bge	r20,r17,100aeb8 <___vfprintf_internal_r+0x810>
 100aee0:	d9014f17 	ldw	r4,1340(sp)
 100aee4:	b00b883a 	mov	r5,r22
 100aee8:	d9800c04 	addi	r6,sp,48
 100aeec:	d9c15115 	stw	r7,1348(sp)
 100aef0:	100a6500 	call	100a650 <__sprint_r>
 100aef4:	d9c15117 	ldw	r7,1348(sp)
 100aef8:	103fa31e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100aefc:	843ffc04 	addi	r16,r16,-16
 100af00:	dc800e17 	ldw	r18,56(sp)
 100af04:	dc400d17 	ldw	r17,52(sp)
 100af08:	dd401904 	addi	r21,sp,100
 100af0c:	9c3fed16 	blt	r19,r16,100aec4 <___vfprintf_internal_r+0x81c>
 100af10:	9425883a 	add	r18,r18,r16
 100af14:	8c400044 	addi	r17,r17,1
 100af18:	008001c4 	movi	r2,7
 100af1c:	af000015 	stw	fp,0(r21)
 100af20:	ac000115 	stw	r16,4(r21)
 100af24:	dc800e15 	stw	r18,56(sp)
 100af28:	dc400d15 	stw	r17,52(sp)
 100af2c:	14416116 	blt	r2,r17,100b4b4 <___vfprintf_internal_r+0xe0c>
 100af30:	ad400204 	addi	r21,r21,8
 100af34:	003f2406 	br	100abc8 <___vfprintf_internal_r+0x520>
 100af38:	d9014f17 	ldw	r4,1340(sp)
 100af3c:	100e1180 	call	100e118 <__sinit>
 100af40:	d9c15117 	ldw	r7,1348(sp)
 100af44:	003def06 	br	100a704 <___vfprintf_internal_r+0x5c>
 100af48:	d9014f17 	ldw	r4,1340(sp)
 100af4c:	b00b883a 	mov	r5,r22
 100af50:	d9c15115 	stw	r7,1348(sp)
 100af54:	100c5780 	call	100c578 <__swsetup_r>
 100af58:	d9c15117 	ldw	r7,1348(sp)
 100af5c:	103dee26 	beq	r2,zero,100a718 <___vfprintf_internal_r+0x70>
 100af60:	003f8c06 	br	100ad94 <___vfprintf_internal_r+0x6ec>
 100af64:	d9014217 	ldw	r4,1288(sp)
 100af68:	d9414317 	ldw	r5,1292(sp)
 100af6c:	000d883a 	mov	r6,zero
 100af70:	000f883a 	mov	r7,zero
 100af74:	10123c40 	call	10123c4 <__eqdf2>
 100af78:	1000f21e 	bne	r2,zero,100b344 <___vfprintf_internal_r+0xc9c>
 100af7c:	008040b4 	movhi	r2,258
 100af80:	10bcf804 	addi	r2,r2,-3104
 100af84:	94800044 	addi	r18,r18,1
 100af88:	8c400044 	addi	r17,r17,1
 100af8c:	a8800015 	stw	r2,0(r21)
 100af90:	00c00044 	movi	r3,1
 100af94:	008001c4 	movi	r2,7
 100af98:	a8c00115 	stw	r3,4(r21)
 100af9c:	dc800e15 	stw	r18,56(sp)
 100afa0:	dc400d15 	stw	r17,52(sp)
 100afa4:	1442fa16 	blt	r2,r17,100bb90 <___vfprintf_internal_r+0x14e8>
 100afa8:	a8c00204 	addi	r3,r21,8
 100afac:	d8800517 	ldw	r2,20(sp)
 100afb0:	d9014717 	ldw	r4,1308(sp)
 100afb4:	11015c0e 	bge	r2,r4,100b528 <___vfprintf_internal_r+0xe80>
 100afb8:	dc400d17 	ldw	r17,52(sp)
 100afbc:	d9814917 	ldw	r6,1316(sp)
 100afc0:	00800044 	movi	r2,1
 100afc4:	94800044 	addi	r18,r18,1
 100afc8:	8c400044 	addi	r17,r17,1
 100afcc:	18800115 	stw	r2,4(r3)
 100afd0:	008001c4 	movi	r2,7
 100afd4:	19800015 	stw	r6,0(r3)
 100afd8:	dc800e15 	stw	r18,56(sp)
 100afdc:	dc400d15 	stw	r17,52(sp)
 100afe0:	14431016 	blt	r2,r17,100bc24 <___vfprintf_internal_r+0x157c>
 100afe4:	18c00204 	addi	r3,r3,8
 100afe8:	d8814717 	ldw	r2,1308(sp)
 100afec:	143fffc4 	addi	r16,r2,-1
 100aff0:	043f2b0e 	bge	zero,r16,100aca0 <___vfprintf_internal_r+0x5f8>
 100aff4:	00800404 	movi	r2,16
 100aff8:	1402a20e 	bge	r2,r16,100ba84 <___vfprintf_internal_r+0x13dc>
 100affc:	dc400d17 	ldw	r17,52(sp)
 100b000:	1027883a 	mov	r19,r2
 100b004:	070040b4 	movhi	fp,258
 100b008:	e73cf884 	addi	fp,fp,-3102
 100b00c:	050001c4 	movi	r20,7
 100b010:	00000306 	br	100b020 <___vfprintf_internal_r+0x978>
 100b014:	18c00204 	addi	r3,r3,8
 100b018:	843ffc04 	addi	r16,r16,-16
 100b01c:	9c029c0e 	bge	r19,r16,100ba90 <___vfprintf_internal_r+0x13e8>
 100b020:	94800404 	addi	r18,r18,16
 100b024:	8c400044 	addi	r17,r17,1
 100b028:	1f000015 	stw	fp,0(r3)
 100b02c:	1cc00115 	stw	r19,4(r3)
 100b030:	dc800e15 	stw	r18,56(sp)
 100b034:	dc400d15 	stw	r17,52(sp)
 100b038:	a47ff60e 	bge	r20,r17,100b014 <___vfprintf_internal_r+0x96c>
 100b03c:	d9014f17 	ldw	r4,1340(sp)
 100b040:	b00b883a 	mov	r5,r22
 100b044:	d9800c04 	addi	r6,sp,48
 100b048:	100a6500 	call	100a650 <__sprint_r>
 100b04c:	103f4e1e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b050:	dc800e17 	ldw	r18,56(sp)
 100b054:	dc400d17 	ldw	r17,52(sp)
 100b058:	d8c01904 	addi	r3,sp,100
 100b05c:	003fee06 	br	100b018 <___vfprintf_internal_r+0x970>
 100b060:	d8802c0b 	ldhu	r2,176(sp)
 100b064:	00ffffc4 	movi	r3,-1
 100b068:	d8c14b15 	stw	r3,1324(sp)
 100b06c:	1080100c 	andi	r2,r2,64
 100b070:	103dcc1e 	bne	r2,zero,100a7a4 <___vfprintf_internal_r+0xfc>
 100b074:	003dce06 	br	100a7b0 <___vfprintf_internal_r+0x108>
 100b078:	d9014f17 	ldw	r4,1340(sp)
 100b07c:	b00b883a 	mov	r5,r22
 100b080:	d9800c04 	addi	r6,sp,48
 100b084:	100a6500 	call	100a650 <__sprint_r>
 100b088:	103f3f1e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b08c:	dc800e17 	ldw	r18,56(sp)
 100b090:	003f2e06 	br	100ad4c <___vfprintf_internal_r+0x6a4>
 100b094:	d9414c17 	ldw	r5,1328(sp)
 100b098:	29400414 	ori	r5,r5,16
 100b09c:	d9414c15 	stw	r5,1328(sp)
 100b0a0:	d9814c17 	ldw	r6,1328(sp)
 100b0a4:	3080080c 	andi	r2,r6,32
 100b0a8:	10014f1e 	bne	r2,zero,100b5e8 <___vfprintf_internal_r+0xf40>
 100b0ac:	d8c14c17 	ldw	r3,1328(sp)
 100b0b0:	1880040c 	andi	r2,r3,16
 100b0b4:	1002ea1e 	bne	r2,zero,100bc60 <___vfprintf_internal_r+0x15b8>
 100b0b8:	d9014c17 	ldw	r4,1328(sp)
 100b0bc:	2080100c 	andi	r2,r4,64
 100b0c0:	1002e726 	beq	r2,zero,100bc60 <___vfprintf_internal_r+0x15b8>
 100b0c4:	3880000f 	ldh	r2,0(r7)
 100b0c8:	39c00104 	addi	r7,r7,4
 100b0cc:	d9c14015 	stw	r7,1280(sp)
 100b0d0:	1023d7fa 	srai	r17,r2,31
 100b0d4:	1021883a 	mov	r16,r2
 100b0d8:	88037216 	blt	r17,zero,100bea4 <___vfprintf_internal_r+0x17fc>
 100b0dc:	01000044 	movi	r4,1
 100b0e0:	98000416 	blt	r19,zero,100b0f4 <___vfprintf_internal_r+0xa4c>
 100b0e4:	d8c14c17 	ldw	r3,1328(sp)
 100b0e8:	00bfdfc4 	movi	r2,-129
 100b0ec:	1886703a 	and	r3,r3,r2
 100b0f0:	d8c14c15 	stw	r3,1328(sp)
 100b0f4:	8444b03a 	or	r2,r16,r17
 100b0f8:	1002261e 	bne	r2,zero,100b994 <___vfprintf_internal_r+0x12ec>
 100b0fc:	9802251e 	bne	r19,zero,100b994 <___vfprintf_internal_r+0x12ec>
 100b100:	20803fcc 	andi	r2,r4,255
 100b104:	10029b26 	beq	r2,zero,100bb74 <___vfprintf_internal_r+0x14cc>
 100b108:	d8c01904 	addi	r3,sp,100
 100b10c:	dd000f04 	addi	r20,sp,60
 100b110:	d8c14115 	stw	r3,1284(sp)
 100b114:	d8c14117 	ldw	r3,1284(sp)
 100b118:	dcc14515 	stw	r19,1300(sp)
 100b11c:	a0c5c83a 	sub	r2,r20,r3
 100b120:	11c00a04 	addi	r7,r2,40
 100b124:	99c0010e 	bge	r19,r7,100b12c <___vfprintf_internal_r+0xa84>
 100b128:	d9c14515 	stw	r7,1300(sp)
 100b12c:	dcc14615 	stw	r19,1304(sp)
 100b130:	d8800407 	ldb	r2,16(sp)
 100b134:	103e4c26 	beq	r2,zero,100aa68 <___vfprintf_internal_r+0x3c0>
 100b138:	d8814517 	ldw	r2,1300(sp)
 100b13c:	10800044 	addi	r2,r2,1
 100b140:	d8814515 	stw	r2,1300(sp)
 100b144:	003e4806 	br	100aa68 <___vfprintf_internal_r+0x3c0>
 100b148:	d9814c17 	ldw	r6,1328(sp)
 100b14c:	31800414 	ori	r6,r6,16
 100b150:	d9814c15 	stw	r6,1328(sp)
 100b154:	d8c14c17 	ldw	r3,1328(sp)
 100b158:	1880080c 	andi	r2,r3,32
 100b15c:	1001271e 	bne	r2,zero,100b5fc <___vfprintf_internal_r+0xf54>
 100b160:	d9414c17 	ldw	r5,1328(sp)
 100b164:	2880040c 	andi	r2,r5,16
 100b168:	1002b61e 	bne	r2,zero,100bc44 <___vfprintf_internal_r+0x159c>
 100b16c:	d9814c17 	ldw	r6,1328(sp)
 100b170:	3080100c 	andi	r2,r6,64
 100b174:	1002b326 	beq	r2,zero,100bc44 <___vfprintf_internal_r+0x159c>
 100b178:	3c00000b 	ldhu	r16,0(r7)
 100b17c:	0009883a 	mov	r4,zero
 100b180:	39c00104 	addi	r7,r7,4
 100b184:	0023883a 	mov	r17,zero
 100b188:	d9c14015 	stw	r7,1280(sp)
 100b18c:	d8000405 	stb	zero,16(sp)
 100b190:	003fd306 	br	100b0e0 <___vfprintf_internal_r+0xa38>
 100b194:	d9014c17 	ldw	r4,1328(sp)
 100b198:	21000414 	ori	r4,r4,16
 100b19c:	d9014c15 	stw	r4,1328(sp)
 100b1a0:	d9414c17 	ldw	r5,1328(sp)
 100b1a4:	2880080c 	andi	r2,r5,32
 100b1a8:	1001081e 	bne	r2,zero,100b5cc <___vfprintf_internal_r+0xf24>
 100b1ac:	d8c14c17 	ldw	r3,1328(sp)
 100b1b0:	1880040c 	andi	r2,r3,16
 100b1b4:	1002b01e 	bne	r2,zero,100bc78 <___vfprintf_internal_r+0x15d0>
 100b1b8:	d9014c17 	ldw	r4,1328(sp)
 100b1bc:	2080100c 	andi	r2,r4,64
 100b1c0:	1002ad26 	beq	r2,zero,100bc78 <___vfprintf_internal_r+0x15d0>
 100b1c4:	3c00000b 	ldhu	r16,0(r7)
 100b1c8:	01000044 	movi	r4,1
 100b1cc:	39c00104 	addi	r7,r7,4
 100b1d0:	0023883a 	mov	r17,zero
 100b1d4:	d9c14015 	stw	r7,1280(sp)
 100b1d8:	d8000405 	stb	zero,16(sp)
 100b1dc:	003fc006 	br	100b0e0 <___vfprintf_internal_r+0xa38>
 100b1e0:	d9014f17 	ldw	r4,1340(sp)
 100b1e4:	b00b883a 	mov	r5,r22
 100b1e8:	d9800c04 	addi	r6,sp,48
 100b1ec:	100a6500 	call	100a650 <__sprint_r>
 100b1f0:	103ee51e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b1f4:	dc800e17 	ldw	r18,56(sp)
 100b1f8:	d8c01904 	addi	r3,sp,100
 100b1fc:	d9814c17 	ldw	r6,1328(sp)
 100b200:	3080004c 	andi	r2,r6,1
 100b204:	1005003a 	cmpeq	r2,r2,zero
 100b208:	103ea51e 	bne	r2,zero,100aca0 <___vfprintf_internal_r+0x5f8>
 100b20c:	00800044 	movi	r2,1
 100b210:	dc400d17 	ldw	r17,52(sp)
 100b214:	18800115 	stw	r2,4(r3)
 100b218:	d8814917 	ldw	r2,1316(sp)
 100b21c:	94800044 	addi	r18,r18,1
 100b220:	8c400044 	addi	r17,r17,1
 100b224:	18800015 	stw	r2,0(r3)
 100b228:	008001c4 	movi	r2,7
 100b22c:	dc800e15 	stw	r18,56(sp)
 100b230:	dc400d15 	stw	r17,52(sp)
 100b234:	14421e0e 	bge	r2,r17,100bab0 <___vfprintf_internal_r+0x1408>
 100b238:	d9014f17 	ldw	r4,1340(sp)
 100b23c:	b00b883a 	mov	r5,r22
 100b240:	d9800c04 	addi	r6,sp,48
 100b244:	100a6500 	call	100a650 <__sprint_r>
 100b248:	103ecf1e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b24c:	dc800e17 	ldw	r18,56(sp)
 100b250:	d8c01904 	addi	r3,sp,100
 100b254:	003e9206 	br	100aca0 <___vfprintf_internal_r+0x5f8>
 100b258:	d9014f17 	ldw	r4,1340(sp)
 100b25c:	b00b883a 	mov	r5,r22
 100b260:	d9800c04 	addi	r6,sp,48
 100b264:	100a6500 	call	100a650 <__sprint_r>
 100b268:	103ec026 	beq	r2,zero,100ad6c <___vfprintf_internal_r+0x6c4>
 100b26c:	003ec606 	br	100ad88 <___vfprintf_internal_r+0x6e0>
 100b270:	d9014f17 	ldw	r4,1340(sp)
 100b274:	b00b883a 	mov	r5,r22
 100b278:	d9800c04 	addi	r6,sp,48
 100b27c:	d9c15115 	stw	r7,1348(sp)
 100b280:	100a6500 	call	100a650 <__sprint_r>
 100b284:	d9c15117 	ldw	r7,1348(sp)
 100b288:	103ebf1e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b28c:	dc800e17 	ldw	r18,56(sp)
 100b290:	dc400d17 	ldw	r17,52(sp)
 100b294:	dd401904 	addi	r21,sp,100
 100b298:	003e7406 	br	100ac6c <___vfprintf_internal_r+0x5c4>
 100b29c:	d9014f17 	ldw	r4,1340(sp)
 100b2a0:	b00b883a 	mov	r5,r22
 100b2a4:	d9800c04 	addi	r6,sp,48
 100b2a8:	d9c15115 	stw	r7,1348(sp)
 100b2ac:	100a6500 	call	100a650 <__sprint_r>
 100b2b0:	d9c15117 	ldw	r7,1348(sp)
 100b2b4:	103eb41e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b2b8:	dd401904 	addi	r21,sp,100
 100b2bc:	003d6d06 	br	100a874 <___vfprintf_internal_r+0x1cc>
 100b2c0:	d9014f17 	ldw	r4,1340(sp)
 100b2c4:	b00b883a 	mov	r5,r22
 100b2c8:	d9800c04 	addi	r6,sp,48
 100b2cc:	d9c15115 	stw	r7,1348(sp)
 100b2d0:	100a6500 	call	100a650 <__sprint_r>
 100b2d4:	d9c15117 	ldw	r7,1348(sp)
 100b2d8:	103eab1e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b2dc:	dc800e17 	ldw	r18,56(sp)
 100b2e0:	dc400d17 	ldw	r17,52(sp)
 100b2e4:	dd401904 	addi	r21,sp,100
 100b2e8:	003e3406 	br	100abbc <___vfprintf_internal_r+0x514>
 100b2ec:	d9014f17 	ldw	r4,1340(sp)
 100b2f0:	b00b883a 	mov	r5,r22
 100b2f4:	d9800c04 	addi	r6,sp,48
 100b2f8:	d9c15115 	stw	r7,1348(sp)
 100b2fc:	100a6500 	call	100a650 <__sprint_r>
 100b300:	d9c15117 	ldw	r7,1348(sp)
 100b304:	103ea01e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b308:	dc800e17 	ldw	r18,56(sp)
 100b30c:	dc400d17 	ldw	r17,52(sp)
 100b310:	dd401904 	addi	r21,sp,100
 100b314:	003e1c06 	br	100ab88 <___vfprintf_internal_r+0x4e0>
 100b318:	d9014f17 	ldw	r4,1340(sp)
 100b31c:	b00b883a 	mov	r5,r22
 100b320:	d9800c04 	addi	r6,sp,48
 100b324:	d9c15115 	stw	r7,1348(sp)
 100b328:	100a6500 	call	100a650 <__sprint_r>
 100b32c:	d9c15117 	ldw	r7,1348(sp)
 100b330:	103e951e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b334:	dc800e17 	ldw	r18,56(sp)
 100b338:	dc400d17 	ldw	r17,52(sp)
 100b33c:	dd401904 	addi	r21,sp,100
 100b340:	003e0406 	br	100ab54 <___vfprintf_internal_r+0x4ac>
 100b344:	d9000517 	ldw	r4,20(sp)
 100b348:	0102520e 	bge	zero,r4,100bc94 <___vfprintf_internal_r+0x15ec>
 100b34c:	d9814717 	ldw	r6,1308(sp)
 100b350:	21807a16 	blt	r4,r6,100b53c <___vfprintf_internal_r+0xe94>
 100b354:	d8814117 	ldw	r2,1284(sp)
 100b358:	91a5883a 	add	r18,r18,r6
 100b35c:	8c400044 	addi	r17,r17,1
 100b360:	a8800015 	stw	r2,0(r21)
 100b364:	008001c4 	movi	r2,7
 100b368:	a9800115 	stw	r6,4(r21)
 100b36c:	dc800e15 	stw	r18,56(sp)
 100b370:	dc400d15 	stw	r17,52(sp)
 100b374:	1442f616 	blt	r2,r17,100bf50 <___vfprintf_internal_r+0x18a8>
 100b378:	a8c00204 	addi	r3,r21,8
 100b37c:	d9414717 	ldw	r5,1308(sp)
 100b380:	2161c83a 	sub	r16,r4,r5
 100b384:	043f9d0e 	bge	zero,r16,100b1fc <___vfprintf_internal_r+0xb54>
 100b388:	00800404 	movi	r2,16
 100b38c:	1402130e 	bge	r2,r16,100bbdc <___vfprintf_internal_r+0x1534>
 100b390:	dc400d17 	ldw	r17,52(sp)
 100b394:	1027883a 	mov	r19,r2
 100b398:	070040b4 	movhi	fp,258
 100b39c:	e73cf884 	addi	fp,fp,-3102
 100b3a0:	050001c4 	movi	r20,7
 100b3a4:	00000306 	br	100b3b4 <___vfprintf_internal_r+0xd0c>
 100b3a8:	18c00204 	addi	r3,r3,8
 100b3ac:	843ffc04 	addi	r16,r16,-16
 100b3b0:	9c020d0e 	bge	r19,r16,100bbe8 <___vfprintf_internal_r+0x1540>
 100b3b4:	94800404 	addi	r18,r18,16
 100b3b8:	8c400044 	addi	r17,r17,1
 100b3bc:	1f000015 	stw	fp,0(r3)
 100b3c0:	1cc00115 	stw	r19,4(r3)
 100b3c4:	dc800e15 	stw	r18,56(sp)
 100b3c8:	dc400d15 	stw	r17,52(sp)
 100b3cc:	a47ff60e 	bge	r20,r17,100b3a8 <___vfprintf_internal_r+0xd00>
 100b3d0:	d9014f17 	ldw	r4,1340(sp)
 100b3d4:	b00b883a 	mov	r5,r22
 100b3d8:	d9800c04 	addi	r6,sp,48
 100b3dc:	100a6500 	call	100a650 <__sprint_r>
 100b3e0:	103e691e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b3e4:	dc800e17 	ldw	r18,56(sp)
 100b3e8:	dc400d17 	ldw	r17,52(sp)
 100b3ec:	d8c01904 	addi	r3,sp,100
 100b3f0:	003fee06 	br	100b3ac <___vfprintf_internal_r+0xd04>
 100b3f4:	d8814717 	ldw	r2,1308(sp)
 100b3f8:	143fffc4 	addi	r16,r2,-1
 100b3fc:	043e970e 	bge	zero,r16,100ae5c <___vfprintf_internal_r+0x7b4>
 100b400:	00800404 	movi	r2,16
 100b404:	1400180e 	bge	r2,r16,100b468 <___vfprintf_internal_r+0xdc0>
 100b408:	1029883a 	mov	r20,r2
 100b40c:	070040b4 	movhi	fp,258
 100b410:	e73cf884 	addi	fp,fp,-3102
 100b414:	054001c4 	movi	r21,7
 100b418:	00000306 	br	100b428 <___vfprintf_internal_r+0xd80>
 100b41c:	9cc00204 	addi	r19,r19,8
 100b420:	843ffc04 	addi	r16,r16,-16
 100b424:	a400120e 	bge	r20,r16,100b470 <___vfprintf_internal_r+0xdc8>
 100b428:	94800404 	addi	r18,r18,16
 100b42c:	8c400044 	addi	r17,r17,1
 100b430:	9f000015 	stw	fp,0(r19)
 100b434:	9d000115 	stw	r20,4(r19)
 100b438:	dc800e15 	stw	r18,56(sp)
 100b43c:	dc400d15 	stw	r17,52(sp)
 100b440:	ac7ff60e 	bge	r21,r17,100b41c <___vfprintf_internal_r+0xd74>
 100b444:	d9014f17 	ldw	r4,1340(sp)
 100b448:	b00b883a 	mov	r5,r22
 100b44c:	d9800c04 	addi	r6,sp,48
 100b450:	100a6500 	call	100a650 <__sprint_r>
 100b454:	103e4c1e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b458:	dc800e17 	ldw	r18,56(sp)
 100b45c:	dc400d17 	ldw	r17,52(sp)
 100b460:	dcc01904 	addi	r19,sp,100
 100b464:	003fee06 	br	100b420 <___vfprintf_internal_r+0xd78>
 100b468:	070040b4 	movhi	fp,258
 100b46c:	e73cf884 	addi	fp,fp,-3102
 100b470:	9425883a 	add	r18,r18,r16
 100b474:	8c400044 	addi	r17,r17,1
 100b478:	008001c4 	movi	r2,7
 100b47c:	9f000015 	stw	fp,0(r19)
 100b480:	9c000115 	stw	r16,4(r19)
 100b484:	dc800e15 	stw	r18,56(sp)
 100b488:	dc400d15 	stw	r17,52(sp)
 100b48c:	147e720e 	bge	r2,r17,100ae58 <___vfprintf_internal_r+0x7b0>
 100b490:	d9014f17 	ldw	r4,1340(sp)
 100b494:	b00b883a 	mov	r5,r22
 100b498:	d9800c04 	addi	r6,sp,48
 100b49c:	100a6500 	call	100a650 <__sprint_r>
 100b4a0:	103e391e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b4a4:	dc800e17 	ldw	r18,56(sp)
 100b4a8:	dc400d17 	ldw	r17,52(sp)
 100b4ac:	dcc01904 	addi	r19,sp,100
 100b4b0:	003e6a06 	br	100ae5c <___vfprintf_internal_r+0x7b4>
 100b4b4:	d9014f17 	ldw	r4,1340(sp)
 100b4b8:	b00b883a 	mov	r5,r22
 100b4bc:	d9800c04 	addi	r6,sp,48
 100b4c0:	d9c15115 	stw	r7,1348(sp)
 100b4c4:	100a6500 	call	100a650 <__sprint_r>
 100b4c8:	d9c15117 	ldw	r7,1348(sp)
 100b4cc:	103e2e1e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b4d0:	dc800e17 	ldw	r18,56(sp)
 100b4d4:	dc400d17 	ldw	r17,52(sp)
 100b4d8:	dd401904 	addi	r21,sp,100
 100b4dc:	003dba06 	br	100abc8 <___vfprintf_internal_r+0x520>
 100b4e0:	d9014f17 	ldw	r4,1340(sp)
 100b4e4:	b00b883a 	mov	r5,r22
 100b4e8:	d9800c04 	addi	r6,sp,48
 100b4ec:	100a6500 	call	100a650 <__sprint_r>
 100b4f0:	103e251e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b4f4:	dc800e17 	ldw	r18,56(sp)
 100b4f8:	dc400d17 	ldw	r17,52(sp)
 100b4fc:	dcc01904 	addi	r19,sp,100
 100b500:	003e4206 	br	100ae0c <___vfprintf_internal_r+0x764>
 100b504:	d9014f17 	ldw	r4,1340(sp)
 100b508:	b00b883a 	mov	r5,r22
 100b50c:	d9800c04 	addi	r6,sp,48
 100b510:	100a6500 	call	100a650 <__sprint_r>
 100b514:	103e1c1e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100b518:	dc800e17 	ldw	r18,56(sp)
 100b51c:	dc400d17 	ldw	r17,52(sp)
 100b520:	d8c01904 	addi	r3,sp,100
 100b524:	003e2e06 	br	100ade0 <___vfprintf_internal_r+0x738>
 100b528:	d9414c17 	ldw	r5,1328(sp)
 100b52c:	2880004c 	andi	r2,r5,1
 100b530:	1005003a 	cmpeq	r2,r2,zero
 100b534:	103dda1e 	bne	r2,zero,100aca0 <___vfprintf_internal_r+0x5f8>
 100b538:	003e9f06 	br	100afb8 <___vfprintf_internal_r+0x910>
 100b53c:	d8c14117 	ldw	r3,1284(sp)
 100b540:	9125883a 	add	r18,r18,r4
 100b544:	8c400044 	addi	r17,r17,1
 100b548:	008001c4 	movi	r2,7
 100b54c:	a8c00015 	stw	r3,0(r21)
 100b550:	a9000115 	stw	r4,4(r21)
 100b554:	dc800e15 	stw	r18,56(sp)
 100b558:	dc400d15 	stw	r17,52(sp)
 100b55c:	14426616 	blt	r2,r17,100bef8 <___vfprintf_internal_r+0x1850>
 100b560:	a8c00204 	addi	r3,r21,8
 100b564:	d9414917 	ldw	r5,1316(sp)
 100b568:	00800044 	movi	r2,1
 100b56c:	94800044 	addi	r18,r18,1
 100b570:	8c400044 	addi	r17,r17,1
 100b574:	18800115 	stw	r2,4(r3)
 100b578:	008001c4 	movi	r2,7
 100b57c:	19400015 	stw	r5,0(r3)
 100b580:	dc800e15 	stw	r18,56(sp)
 100b584:	dc400d15 	stw	r17,52(sp)
 100b588:	2021883a 	mov	r16,r4
 100b58c:	14425016 	blt	r2,r17,100bed0 <___vfprintf_internal_r+0x1828>
 100b590:	19400204 	addi	r5,r3,8
 100b594:	d9814717 	ldw	r6,1308(sp)
 100b598:	8c400044 	addi	r17,r17,1
 100b59c:	dc400d15 	stw	r17,52(sp)
 100b5a0:	3107c83a 	sub	r3,r6,r4
 100b5a4:	d9014117 	ldw	r4,1284(sp)
 100b5a8:	90e5883a 	add	r18,r18,r3
 100b5ac:	28c00115 	stw	r3,4(r5)
 100b5b0:	8105883a 	add	r2,r16,r4
 100b5b4:	28800015 	stw	r2,0(r5)
 100b5b8:	008001c4 	movi	r2,7
 100b5bc:	dc800e15 	stw	r18,56(sp)
 100b5c0:	147f1d16 	blt	r2,r17,100b238 <___vfprintf_internal_r+0xb90>
 100b5c4:	28c00204 	addi	r3,r5,8
 100b5c8:	003db506 	br	100aca0 <___vfprintf_internal_r+0x5f8>
 100b5cc:	3c000017 	ldw	r16,0(r7)
 100b5d0:	3c400117 	ldw	r17,4(r7)
 100b5d4:	39800204 	addi	r6,r7,8
 100b5d8:	01000044 	movi	r4,1
 100b5dc:	d9814015 	stw	r6,1280(sp)
 100b5e0:	d8000405 	stb	zero,16(sp)
 100b5e4:	003ebe06 	br	100b0e0 <___vfprintf_internal_r+0xa38>
 100b5e8:	3c000017 	ldw	r16,0(r7)
 100b5ec:	3c400117 	ldw	r17,4(r7)
 100b5f0:	38800204 	addi	r2,r7,8
 100b5f4:	d8814015 	stw	r2,1280(sp)
 100b5f8:	003eb706 	br	100b0d8 <___vfprintf_internal_r+0xa30>
 100b5fc:	3c000017 	ldw	r16,0(r7)
 100b600:	3c400117 	ldw	r17,4(r7)
 100b604:	39000204 	addi	r4,r7,8
 100b608:	d9014015 	stw	r4,1280(sp)
 100b60c:	0009883a 	mov	r4,zero
 100b610:	d8000405 	stb	zero,16(sp)
 100b614:	003eb206 	br	100b0e0 <___vfprintf_internal_r+0xa38>
 100b618:	38c00017 	ldw	r3,0(r7)
 100b61c:	39c00104 	addi	r7,r7,4
 100b620:	d8c14a15 	stw	r3,1320(sp)
 100b624:	1800d10e 	bge	r3,zero,100b96c <___vfprintf_internal_r+0x12c4>
 100b628:	00c7c83a 	sub	r3,zero,r3
 100b62c:	d8c14a15 	stw	r3,1320(sp)
 100b630:	d9014c17 	ldw	r4,1328(sp)
 100b634:	b8c00007 	ldb	r3,0(r23)
 100b638:	21000114 	ori	r4,r4,4
 100b63c:	d9014c15 	stw	r4,1328(sp)
 100b640:	003c9806 	br	100a8a4 <___vfprintf_internal_r+0x1fc>
 100b644:	d9814c17 	ldw	r6,1328(sp)
 100b648:	3080080c 	andi	r2,r6,32
 100b64c:	1001f026 	beq	r2,zero,100be10 <___vfprintf_internal_r+0x1768>
 100b650:	d9014b17 	ldw	r4,1324(sp)
 100b654:	38800017 	ldw	r2,0(r7)
 100b658:	39c00104 	addi	r7,r7,4
 100b65c:	d9c14015 	stw	r7,1280(sp)
 100b660:	2007d7fa 	srai	r3,r4,31
 100b664:	d9c14017 	ldw	r7,1280(sp)
 100b668:	11000015 	stw	r4,0(r2)
 100b66c:	10c00115 	stw	r3,4(r2)
 100b670:	003c6906 	br	100a818 <___vfprintf_internal_r+0x170>
 100b674:	b8c00007 	ldb	r3,0(r23)
 100b678:	00801b04 	movi	r2,108
 100b67c:	18824f26 	beq	r3,r2,100bfbc <___vfprintf_internal_r+0x1914>
 100b680:	d9414c17 	ldw	r5,1328(sp)
 100b684:	29400414 	ori	r5,r5,16
 100b688:	d9414c15 	stw	r5,1328(sp)
 100b68c:	003c8506 	br	100a8a4 <___vfprintf_internal_r+0x1fc>
 100b690:	d9814c17 	ldw	r6,1328(sp)
 100b694:	b8c00007 	ldb	r3,0(r23)
 100b698:	31800814 	ori	r6,r6,32
 100b69c:	d9814c15 	stw	r6,1328(sp)
 100b6a0:	003c8006 	br	100a8a4 <___vfprintf_internal_r+0x1fc>
 100b6a4:	d8814c17 	ldw	r2,1328(sp)
 100b6a8:	3c000017 	ldw	r16,0(r7)
 100b6ac:	00c01e04 	movi	r3,120
 100b6b0:	10800094 	ori	r2,r2,2
 100b6b4:	d8814c15 	stw	r2,1328(sp)
 100b6b8:	39c00104 	addi	r7,r7,4
 100b6bc:	014040b4 	movhi	r5,258
 100b6c0:	297ce104 	addi	r5,r5,-3196
 100b6c4:	00800c04 	movi	r2,48
 100b6c8:	0023883a 	mov	r17,zero
 100b6cc:	01000084 	movi	r4,2
 100b6d0:	d9c14015 	stw	r7,1280(sp)
 100b6d4:	d8c14d15 	stw	r3,1332(sp)
 100b6d8:	d9414415 	stw	r5,1296(sp)
 100b6dc:	d8800445 	stb	r2,17(sp)
 100b6e0:	d8c00485 	stb	r3,18(sp)
 100b6e4:	d8000405 	stb	zero,16(sp)
 100b6e8:	003e7d06 	br	100b0e0 <___vfprintf_internal_r+0xa38>
 100b6ec:	d8814c17 	ldw	r2,1328(sp)
 100b6f0:	b8c00007 	ldb	r3,0(r23)
 100b6f4:	10801014 	ori	r2,r2,64
 100b6f8:	d8814c15 	stw	r2,1328(sp)
 100b6fc:	003c6906 	br	100a8a4 <___vfprintf_internal_r+0x1fc>
 100b700:	d9414c17 	ldw	r5,1328(sp)
 100b704:	2880020c 	andi	r2,r5,8
 100b708:	1001df26 	beq	r2,zero,100be88 <___vfprintf_internal_r+0x17e0>
 100b70c:	39800017 	ldw	r6,0(r7)
 100b710:	38800204 	addi	r2,r7,8
 100b714:	d8814015 	stw	r2,1280(sp)
 100b718:	d9814215 	stw	r6,1288(sp)
 100b71c:	39c00117 	ldw	r7,4(r7)
 100b720:	d9c14315 	stw	r7,1292(sp)
 100b724:	d9014217 	ldw	r4,1288(sp)
 100b728:	d9414317 	ldw	r5,1292(sp)
 100b72c:	101060c0 	call	101060c <__isinfd>
 100b730:	10021726 	beq	r2,zero,100bf90 <___vfprintf_internal_r+0x18e8>
 100b734:	d9014217 	ldw	r4,1288(sp)
 100b738:	d9414317 	ldw	r5,1292(sp)
 100b73c:	000d883a 	mov	r6,zero
 100b740:	000f883a 	mov	r7,zero
 100b744:	10125e40 	call	10125e4 <__ltdf2>
 100b748:	1002ca16 	blt	r2,zero,100c274 <___vfprintf_internal_r+0x1bcc>
 100b74c:	d9414d17 	ldw	r5,1332(sp)
 100b750:	008011c4 	movi	r2,71
 100b754:	11420a16 	blt	r2,r5,100bf80 <___vfprintf_internal_r+0x18d8>
 100b758:	018040b4 	movhi	r6,258
 100b75c:	31bce604 	addi	r6,r6,-3176
 100b760:	d9814115 	stw	r6,1284(sp)
 100b764:	d9014c17 	ldw	r4,1328(sp)
 100b768:	00c000c4 	movi	r3,3
 100b76c:	00bfdfc4 	movi	r2,-129
 100b770:	2088703a 	and	r4,r4,r2
 100b774:	180f883a 	mov	r7,r3
 100b778:	d8c14515 	stw	r3,1300(sp)
 100b77c:	d9014c15 	stw	r4,1328(sp)
 100b780:	d8014615 	stw	zero,1304(sp)
 100b784:	003e6a06 	br	100b130 <___vfprintf_internal_r+0xa88>
 100b788:	38800017 	ldw	r2,0(r7)
 100b78c:	00c00044 	movi	r3,1
 100b790:	39c00104 	addi	r7,r7,4
 100b794:	d9c14015 	stw	r7,1280(sp)
 100b798:	d9000f04 	addi	r4,sp,60
 100b79c:	180f883a 	mov	r7,r3
 100b7a0:	d8c14515 	stw	r3,1300(sp)
 100b7a4:	d9014115 	stw	r4,1284(sp)
 100b7a8:	d8800f05 	stb	r2,60(sp)
 100b7ac:	d8000405 	stb	zero,16(sp)
 100b7b0:	003cac06 	br	100aa64 <___vfprintf_internal_r+0x3bc>
 100b7b4:	014040b4 	movhi	r5,258
 100b7b8:	297cec04 	addi	r5,r5,-3152
 100b7bc:	d9414415 	stw	r5,1296(sp)
 100b7c0:	d9814c17 	ldw	r6,1328(sp)
 100b7c4:	3080080c 	andi	r2,r6,32
 100b7c8:	1000f926 	beq	r2,zero,100bbb0 <___vfprintf_internal_r+0x1508>
 100b7cc:	3c000017 	ldw	r16,0(r7)
 100b7d0:	3c400117 	ldw	r17,4(r7)
 100b7d4:	38800204 	addi	r2,r7,8
 100b7d8:	d8814015 	stw	r2,1280(sp)
 100b7dc:	d9414c17 	ldw	r5,1328(sp)
 100b7e0:	2880004c 	andi	r2,r5,1
 100b7e4:	1005003a 	cmpeq	r2,r2,zero
 100b7e8:	1000b31e 	bne	r2,zero,100bab8 <___vfprintf_internal_r+0x1410>
 100b7ec:	8444b03a 	or	r2,r16,r17
 100b7f0:	1000b126 	beq	r2,zero,100bab8 <___vfprintf_internal_r+0x1410>
 100b7f4:	d9814d17 	ldw	r6,1332(sp)
 100b7f8:	29400094 	ori	r5,r5,2
 100b7fc:	00800c04 	movi	r2,48
 100b800:	01000084 	movi	r4,2
 100b804:	d9414c15 	stw	r5,1328(sp)
 100b808:	d8800445 	stb	r2,17(sp)
 100b80c:	d9800485 	stb	r6,18(sp)
 100b810:	d8000405 	stb	zero,16(sp)
 100b814:	003e3206 	br	100b0e0 <___vfprintf_internal_r+0xa38>
 100b818:	018040b4 	movhi	r6,258
 100b81c:	31bce104 	addi	r6,r6,-3196
 100b820:	d9814415 	stw	r6,1296(sp)
 100b824:	003fe606 	br	100b7c0 <___vfprintf_internal_r+0x1118>
 100b828:	00800ac4 	movi	r2,43
 100b82c:	d8800405 	stb	r2,16(sp)
 100b830:	b8c00007 	ldb	r3,0(r23)
 100b834:	003c1b06 	br	100a8a4 <___vfprintf_internal_r+0x1fc>
 100b838:	d8814c17 	ldw	r2,1328(sp)
 100b83c:	b8c00007 	ldb	r3,0(r23)
 100b840:	10800054 	ori	r2,r2,1
 100b844:	d8814c15 	stw	r2,1328(sp)
 100b848:	003c1606 	br	100a8a4 <___vfprintf_internal_r+0x1fc>
 100b84c:	d8800407 	ldb	r2,16(sp)
 100b850:	1000461e 	bne	r2,zero,100b96c <___vfprintf_internal_r+0x12c4>
 100b854:	00800804 	movi	r2,32
 100b858:	d8800405 	stb	r2,16(sp)
 100b85c:	b8c00007 	ldb	r3,0(r23)
 100b860:	003c1006 	br	100a8a4 <___vfprintf_internal_r+0x1fc>
 100b864:	d9814c17 	ldw	r6,1328(sp)
 100b868:	b8c00007 	ldb	r3,0(r23)
 100b86c:	31800214 	ori	r6,r6,8
 100b870:	d9814c15 	stw	r6,1328(sp)
 100b874:	003c0b06 	br	100a8a4 <___vfprintf_internal_r+0x1fc>
 100b878:	0007883a 	mov	r3,zero
 100b87c:	01000244 	movi	r4,9
 100b880:	188002a4 	muli	r2,r3,10
 100b884:	b8c00007 	ldb	r3,0(r23)
 100b888:	d9814d17 	ldw	r6,1332(sp)
 100b88c:	bdc00044 	addi	r23,r23,1
 100b890:	d8c14d15 	stw	r3,1332(sp)
 100b894:	d9414d17 	ldw	r5,1332(sp)
 100b898:	3085883a 	add	r2,r6,r2
 100b89c:	10fff404 	addi	r3,r2,-48
 100b8a0:	28bff404 	addi	r2,r5,-48
 100b8a4:	20bff62e 	bgeu	r4,r2,100b880 <___vfprintf_internal_r+0x11d8>
 100b8a8:	d8c14a15 	stw	r3,1320(sp)
 100b8ac:	003bff06 	br	100a8ac <___vfprintf_internal_r+0x204>
 100b8b0:	d9414c17 	ldw	r5,1328(sp)
 100b8b4:	b8c00007 	ldb	r3,0(r23)
 100b8b8:	29402014 	ori	r5,r5,128
 100b8bc:	d9414c15 	stw	r5,1328(sp)
 100b8c0:	003bf806 	br	100a8a4 <___vfprintf_internal_r+0x1fc>
 100b8c4:	b8c00007 	ldb	r3,0(r23)
 100b8c8:	00800a84 	movi	r2,42
 100b8cc:	bdc00044 	addi	r23,r23,1
 100b8d0:	18831526 	beq	r3,r2,100c528 <___vfprintf_internal_r+0x1e80>
 100b8d4:	d8c14d15 	stw	r3,1332(sp)
 100b8d8:	18bff404 	addi	r2,r3,-48
 100b8dc:	00c00244 	movi	r3,9
 100b8e0:	18827836 	bltu	r3,r2,100c2c4 <___vfprintf_internal_r+0x1c1c>
 100b8e4:	000d883a 	mov	r6,zero
 100b8e8:	308002a4 	muli	r2,r6,10
 100b8ec:	b9800007 	ldb	r6,0(r23)
 100b8f0:	d9414d17 	ldw	r5,1332(sp)
 100b8f4:	bdc00044 	addi	r23,r23,1
 100b8f8:	d9814d15 	stw	r6,1332(sp)
 100b8fc:	d9014d17 	ldw	r4,1332(sp)
 100b900:	1145883a 	add	r2,r2,r5
 100b904:	11bff404 	addi	r6,r2,-48
 100b908:	20bff404 	addi	r2,r4,-48
 100b90c:	18bff62e 	bgeu	r3,r2,100b8e8 <___vfprintf_internal_r+0x1240>
 100b910:	3027883a 	mov	r19,r6
 100b914:	303be50e 	bge	r6,zero,100a8ac <___vfprintf_internal_r+0x204>
 100b918:	04ffffc4 	movi	r19,-1
 100b91c:	003be306 	br	100a8ac <___vfprintf_internal_r+0x204>
 100b920:	d8000405 	stb	zero,16(sp)
 100b924:	39800017 	ldw	r6,0(r7)
 100b928:	39c00104 	addi	r7,r7,4
 100b92c:	d9c14015 	stw	r7,1280(sp)
 100b930:	d9814115 	stw	r6,1284(sp)
 100b934:	3001c926 	beq	r6,zero,100c05c <___vfprintf_internal_r+0x19b4>
 100b938:	98000e16 	blt	r19,zero,100b974 <___vfprintf_internal_r+0x12cc>
 100b93c:	d9014117 	ldw	r4,1284(sp)
 100b940:	000b883a 	mov	r5,zero
 100b944:	980d883a 	mov	r6,r19
 100b948:	1009e340 	call	1009e34 <memchr>
 100b94c:	10025926 	beq	r2,zero,100c2b4 <___vfprintf_internal_r+0x1c0c>
 100b950:	d8c14117 	ldw	r3,1284(sp)
 100b954:	10cfc83a 	sub	r7,r2,r3
 100b958:	99c19e16 	blt	r19,r7,100bfd4 <___vfprintf_internal_r+0x192c>
 100b95c:	d9c14515 	stw	r7,1300(sp)
 100b960:	38000916 	blt	r7,zero,100b988 <___vfprintf_internal_r+0x12e0>
 100b964:	d8014615 	stw	zero,1304(sp)
 100b968:	003df106 	br	100b130 <___vfprintf_internal_r+0xa88>
 100b96c:	b8c00007 	ldb	r3,0(r23)
 100b970:	003bcc06 	br	100a8a4 <___vfprintf_internal_r+0x1fc>
 100b974:	d9014117 	ldw	r4,1284(sp)
 100b978:	100a5dc0 	call	100a5dc <strlen>
 100b97c:	d8814515 	stw	r2,1300(sp)
 100b980:	100f883a 	mov	r7,r2
 100b984:	103ff70e 	bge	r2,zero,100b964 <___vfprintf_internal_r+0x12bc>
 100b988:	d8014515 	stw	zero,1300(sp)
 100b98c:	d8014615 	stw	zero,1304(sp)
 100b990:	003de706 	br	100b130 <___vfprintf_internal_r+0xa88>
 100b994:	20c03fcc 	andi	r3,r4,255
 100b998:	00800044 	movi	r2,1
 100b99c:	18802d26 	beq	r3,r2,100ba54 <___vfprintf_internal_r+0x13ac>
 100b9a0:	18800e36 	bltu	r3,r2,100b9dc <___vfprintf_internal_r+0x1334>
 100b9a4:	00800084 	movi	r2,2
 100b9a8:	1880fa26 	beq	r3,r2,100bd94 <___vfprintf_internal_r+0x16ec>
 100b9ac:	010040b4 	movhi	r4,258
 100b9b0:	213cf104 	addi	r4,r4,-3132
 100b9b4:	100a5dc0 	call	100a5dc <strlen>
 100b9b8:	100f883a 	mov	r7,r2
 100b9bc:	dcc14515 	stw	r19,1300(sp)
 100b9c0:	9880010e 	bge	r19,r2,100b9c8 <___vfprintf_internal_r+0x1320>
 100b9c4:	d8814515 	stw	r2,1300(sp)
 100b9c8:	008040b4 	movhi	r2,258
 100b9cc:	10bcf104 	addi	r2,r2,-3132
 100b9d0:	dcc14615 	stw	r19,1304(sp)
 100b9d4:	d8814115 	stw	r2,1284(sp)
 100b9d8:	003dd506 	br	100b130 <___vfprintf_internal_r+0xa88>
 100b9dc:	d9401904 	addi	r5,sp,100
 100b9e0:	dd000f04 	addi	r20,sp,60
 100b9e4:	d9414115 	stw	r5,1284(sp)
 100b9e8:	880a977a 	slli	r5,r17,29
 100b9ec:	d9814117 	ldw	r6,1284(sp)
 100b9f0:	8004d0fa 	srli	r2,r16,3
 100b9f4:	8806d0fa 	srli	r3,r17,3
 100b9f8:	810001cc 	andi	r4,r16,7
 100b9fc:	2884b03a 	or	r2,r5,r2
 100ba00:	31bfffc4 	addi	r6,r6,-1
 100ba04:	21000c04 	addi	r4,r4,48
 100ba08:	d9814115 	stw	r6,1284(sp)
 100ba0c:	10cab03a 	or	r5,r2,r3
 100ba10:	31000005 	stb	r4,0(r6)
 100ba14:	1021883a 	mov	r16,r2
 100ba18:	1823883a 	mov	r17,r3
 100ba1c:	283ff21e 	bne	r5,zero,100b9e8 <___vfprintf_internal_r+0x1340>
 100ba20:	d8c14c17 	ldw	r3,1328(sp)
 100ba24:	1880004c 	andi	r2,r3,1
 100ba28:	1005003a 	cmpeq	r2,r2,zero
 100ba2c:	103db91e 	bne	r2,zero,100b114 <___vfprintf_internal_r+0xa6c>
 100ba30:	20803fcc 	andi	r2,r4,255
 100ba34:	1080201c 	xori	r2,r2,128
 100ba38:	10bfe004 	addi	r2,r2,-128
 100ba3c:	00c00c04 	movi	r3,48
 100ba40:	10fdb426 	beq	r2,r3,100b114 <___vfprintf_internal_r+0xa6c>
 100ba44:	31bfffc4 	addi	r6,r6,-1
 100ba48:	d9814115 	stw	r6,1284(sp)
 100ba4c:	30c00005 	stb	r3,0(r6)
 100ba50:	003db006 	br	100b114 <___vfprintf_internal_r+0xa6c>
 100ba54:	88800068 	cmpgeui	r2,r17,1
 100ba58:	10002c1e 	bne	r2,zero,100bb0c <___vfprintf_internal_r+0x1464>
 100ba5c:	8800021e 	bne	r17,zero,100ba68 <___vfprintf_internal_r+0x13c0>
 100ba60:	00800244 	movi	r2,9
 100ba64:	14002936 	bltu	r2,r16,100bb0c <___vfprintf_internal_r+0x1464>
 100ba68:	d90018c4 	addi	r4,sp,99
 100ba6c:	dd000f04 	addi	r20,sp,60
 100ba70:	d9014115 	stw	r4,1284(sp)
 100ba74:	d9014117 	ldw	r4,1284(sp)
 100ba78:	80800c04 	addi	r2,r16,48
 100ba7c:	20800005 	stb	r2,0(r4)
 100ba80:	003da406 	br	100b114 <___vfprintf_internal_r+0xa6c>
 100ba84:	dc400d17 	ldw	r17,52(sp)
 100ba88:	070040b4 	movhi	fp,258
 100ba8c:	e73cf884 	addi	fp,fp,-3102
 100ba90:	9425883a 	add	r18,r18,r16
 100ba94:	8c400044 	addi	r17,r17,1
 100ba98:	008001c4 	movi	r2,7
 100ba9c:	1f000015 	stw	fp,0(r3)
 100baa0:	1c000115 	stw	r16,4(r3)
 100baa4:	dc800e15 	stw	r18,56(sp)
 100baa8:	dc400d15 	stw	r17,52(sp)
 100baac:	147de216 	blt	r2,r17,100b238 <___vfprintf_internal_r+0xb90>
 100bab0:	18c00204 	addi	r3,r3,8
 100bab4:	003c7a06 	br	100aca0 <___vfprintf_internal_r+0x5f8>
 100bab8:	01000084 	movi	r4,2
 100babc:	d8000405 	stb	zero,16(sp)
 100bac0:	003d8706 	br	100b0e0 <___vfprintf_internal_r+0xa38>
 100bac4:	d9814c17 	ldw	r6,1328(sp)
 100bac8:	30c4703a 	and	r2,r6,r3
 100bacc:	1005003a 	cmpeq	r2,r2,zero
 100bad0:	103cb926 	beq	r2,zero,100adb8 <___vfprintf_internal_r+0x710>
 100bad4:	d9014117 	ldw	r4,1284(sp)
 100bad8:	94800044 	addi	r18,r18,1
 100badc:	8c400044 	addi	r17,r17,1
 100bae0:	008001c4 	movi	r2,7
 100bae4:	a9000015 	stw	r4,0(r21)
 100bae8:	a8c00115 	stw	r3,4(r21)
 100baec:	dc800e15 	stw	r18,56(sp)
 100baf0:	dc400d15 	stw	r17,52(sp)
 100baf4:	147e6616 	blt	r2,r17,100b490 <___vfprintf_internal_r+0xde8>
 100baf8:	acc00204 	addi	r19,r21,8
 100bafc:	003cd706 	br	100ae5c <___vfprintf_internal_r+0x7b4>
 100bb00:	070040b4 	movhi	fp,258
 100bb04:	e73cf884 	addi	fp,fp,-3102
 100bb08:	003c4f06 	br	100ac48 <___vfprintf_internal_r+0x5a0>
 100bb0c:	dd000f04 	addi	r20,sp,60
 100bb10:	dc801904 	addi	r18,sp,100
 100bb14:	8009883a 	mov	r4,r16
 100bb18:	880b883a 	mov	r5,r17
 100bb1c:	01800284 	movi	r6,10
 100bb20:	000f883a 	mov	r7,zero
 100bb24:	10112f40 	call	10112f4 <__umoddi3>
 100bb28:	12000c04 	addi	r8,r2,48
 100bb2c:	94bfffc4 	addi	r18,r18,-1
 100bb30:	8009883a 	mov	r4,r16
 100bb34:	880b883a 	mov	r5,r17
 100bb38:	01800284 	movi	r6,10
 100bb3c:	000f883a 	mov	r7,zero
 100bb40:	92000005 	stb	r8,0(r18)
 100bb44:	1010d180 	call	1010d18 <__udivdi3>
 100bb48:	1009883a 	mov	r4,r2
 100bb4c:	1021883a 	mov	r16,r2
 100bb50:	18800068 	cmpgeui	r2,r3,1
 100bb54:	1823883a 	mov	r17,r3
 100bb58:	103fee1e 	bne	r2,zero,100bb14 <___vfprintf_internal_r+0x146c>
 100bb5c:	1800021e 	bne	r3,zero,100bb68 <___vfprintf_internal_r+0x14c0>
 100bb60:	00800244 	movi	r2,9
 100bb64:	113feb36 	bltu	r2,r4,100bb14 <___vfprintf_internal_r+0x146c>
 100bb68:	94bfffc4 	addi	r18,r18,-1
 100bb6c:	dc814115 	stw	r18,1284(sp)
 100bb70:	003fc006 	br	100ba74 <___vfprintf_internal_r+0x13cc>
 100bb74:	d9014c17 	ldw	r4,1328(sp)
 100bb78:	2080004c 	andi	r2,r4,1
 100bb7c:	10009a1e 	bne	r2,zero,100bde8 <___vfprintf_internal_r+0x1740>
 100bb80:	d9401904 	addi	r5,sp,100
 100bb84:	dd000f04 	addi	r20,sp,60
 100bb88:	d9414115 	stw	r5,1284(sp)
 100bb8c:	003d6106 	br	100b114 <___vfprintf_internal_r+0xa6c>
 100bb90:	d9014f17 	ldw	r4,1340(sp)
 100bb94:	b00b883a 	mov	r5,r22
 100bb98:	d9800c04 	addi	r6,sp,48
 100bb9c:	100a6500 	call	100a650 <__sprint_r>
 100bba0:	103c791e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100bba4:	dc800e17 	ldw	r18,56(sp)
 100bba8:	d8c01904 	addi	r3,sp,100
 100bbac:	003cff06 	br	100afac <___vfprintf_internal_r+0x904>
 100bbb0:	d8c14c17 	ldw	r3,1328(sp)
 100bbb4:	1880040c 	andi	r2,r3,16
 100bbb8:	1000711e 	bne	r2,zero,100bd80 <___vfprintf_internal_r+0x16d8>
 100bbbc:	d9014c17 	ldw	r4,1328(sp)
 100bbc0:	2080100c 	andi	r2,r4,64
 100bbc4:	10006e26 	beq	r2,zero,100bd80 <___vfprintf_internal_r+0x16d8>
 100bbc8:	3c00000b 	ldhu	r16,0(r7)
 100bbcc:	0023883a 	mov	r17,zero
 100bbd0:	39c00104 	addi	r7,r7,4
 100bbd4:	d9c14015 	stw	r7,1280(sp)
 100bbd8:	003f0006 	br	100b7dc <___vfprintf_internal_r+0x1134>
 100bbdc:	dc400d17 	ldw	r17,52(sp)
 100bbe0:	070040b4 	movhi	fp,258
 100bbe4:	e73cf884 	addi	fp,fp,-3102
 100bbe8:	9425883a 	add	r18,r18,r16
 100bbec:	8c400044 	addi	r17,r17,1
 100bbf0:	008001c4 	movi	r2,7
 100bbf4:	1f000015 	stw	fp,0(r3)
 100bbf8:	1c000115 	stw	r16,4(r3)
 100bbfc:	dc800e15 	stw	r18,56(sp)
 100bc00:	dc400d15 	stw	r17,52(sp)
 100bc04:	147d7616 	blt	r2,r17,100b1e0 <___vfprintf_internal_r+0xb38>
 100bc08:	18c00204 	addi	r3,r3,8
 100bc0c:	003d7b06 	br	100b1fc <___vfprintf_internal_r+0xb54>
 100bc10:	dc800e17 	ldw	r18,56(sp)
 100bc14:	dc400d17 	ldw	r17,52(sp)
 100bc18:	070040b4 	movhi	fp,258
 100bc1c:	e73cfc84 	addi	fp,fp,-3086
 100bc20:	003bc006 	br	100ab24 <___vfprintf_internal_r+0x47c>
 100bc24:	d9014f17 	ldw	r4,1340(sp)
 100bc28:	b00b883a 	mov	r5,r22
 100bc2c:	d9800c04 	addi	r6,sp,48
 100bc30:	100a6500 	call	100a650 <__sprint_r>
 100bc34:	103c541e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100bc38:	dc800e17 	ldw	r18,56(sp)
 100bc3c:	d8c01904 	addi	r3,sp,100
 100bc40:	003ce906 	br	100afe8 <___vfprintf_internal_r+0x940>
 100bc44:	3c000017 	ldw	r16,0(r7)
 100bc48:	0009883a 	mov	r4,zero
 100bc4c:	39c00104 	addi	r7,r7,4
 100bc50:	0023883a 	mov	r17,zero
 100bc54:	d9c14015 	stw	r7,1280(sp)
 100bc58:	d8000405 	stb	zero,16(sp)
 100bc5c:	003d2006 	br	100b0e0 <___vfprintf_internal_r+0xa38>
 100bc60:	38800017 	ldw	r2,0(r7)
 100bc64:	39c00104 	addi	r7,r7,4
 100bc68:	d9c14015 	stw	r7,1280(sp)
 100bc6c:	1023d7fa 	srai	r17,r2,31
 100bc70:	1021883a 	mov	r16,r2
 100bc74:	003d1806 	br	100b0d8 <___vfprintf_internal_r+0xa30>
 100bc78:	3c000017 	ldw	r16,0(r7)
 100bc7c:	01000044 	movi	r4,1
 100bc80:	39c00104 	addi	r7,r7,4
 100bc84:	0023883a 	mov	r17,zero
 100bc88:	d9c14015 	stw	r7,1280(sp)
 100bc8c:	d8000405 	stb	zero,16(sp)
 100bc90:	003d1306 	br	100b0e0 <___vfprintf_internal_r+0xa38>
 100bc94:	008040b4 	movhi	r2,258
 100bc98:	10bcf804 	addi	r2,r2,-3104
 100bc9c:	94800044 	addi	r18,r18,1
 100bca0:	8c400044 	addi	r17,r17,1
 100bca4:	a8800015 	stw	r2,0(r21)
 100bca8:	00c00044 	movi	r3,1
 100bcac:	008001c4 	movi	r2,7
 100bcb0:	a8c00115 	stw	r3,4(r21)
 100bcb4:	dc800e15 	stw	r18,56(sp)
 100bcb8:	dc400d15 	stw	r17,52(sp)
 100bcbc:	1440ca16 	blt	r2,r17,100bfe8 <___vfprintf_internal_r+0x1940>
 100bcc0:	a8c00204 	addi	r3,r21,8
 100bcc4:	2000061e 	bne	r4,zero,100bce0 <___vfprintf_internal_r+0x1638>
 100bcc8:	d9414717 	ldw	r5,1308(sp)
 100bccc:	2800041e 	bne	r5,zero,100bce0 <___vfprintf_internal_r+0x1638>
 100bcd0:	d9814c17 	ldw	r6,1328(sp)
 100bcd4:	3080004c 	andi	r2,r6,1
 100bcd8:	1005003a 	cmpeq	r2,r2,zero
 100bcdc:	103bf01e 	bne	r2,zero,100aca0 <___vfprintf_internal_r+0x5f8>
 100bce0:	00800044 	movi	r2,1
 100bce4:	dc400d17 	ldw	r17,52(sp)
 100bce8:	18800115 	stw	r2,4(r3)
 100bcec:	d8814917 	ldw	r2,1316(sp)
 100bcf0:	94800044 	addi	r18,r18,1
 100bcf4:	8c400044 	addi	r17,r17,1
 100bcf8:	18800015 	stw	r2,0(r3)
 100bcfc:	008001c4 	movi	r2,7
 100bd00:	dc800e15 	stw	r18,56(sp)
 100bd04:	dc400d15 	stw	r17,52(sp)
 100bd08:	1440ca16 	blt	r2,r17,100c034 <___vfprintf_internal_r+0x198c>
 100bd0c:	18c00204 	addi	r3,r3,8
 100bd10:	0121c83a 	sub	r16,zero,r4
 100bd14:	0400500e 	bge	zero,r16,100be58 <___vfprintf_internal_r+0x17b0>
 100bd18:	00800404 	movi	r2,16
 100bd1c:	1400800e 	bge	r2,r16,100bf20 <___vfprintf_internal_r+0x1878>
 100bd20:	1027883a 	mov	r19,r2
 100bd24:	070040b4 	movhi	fp,258
 100bd28:	e73cf884 	addi	fp,fp,-3102
 100bd2c:	050001c4 	movi	r20,7
 100bd30:	00000306 	br	100bd40 <___vfprintf_internal_r+0x1698>
 100bd34:	18c00204 	addi	r3,r3,8
 100bd38:	843ffc04 	addi	r16,r16,-16
 100bd3c:	9c007a0e 	bge	r19,r16,100bf28 <___vfprintf_internal_r+0x1880>
 100bd40:	94800404 	addi	r18,r18,16
 100bd44:	8c400044 	addi	r17,r17,1
 100bd48:	1f000015 	stw	fp,0(r3)
 100bd4c:	1cc00115 	stw	r19,4(r3)
 100bd50:	dc800e15 	stw	r18,56(sp)
 100bd54:	dc400d15 	stw	r17,52(sp)
 100bd58:	a47ff60e 	bge	r20,r17,100bd34 <___vfprintf_internal_r+0x168c>
 100bd5c:	d9014f17 	ldw	r4,1340(sp)
 100bd60:	b00b883a 	mov	r5,r22
 100bd64:	d9800c04 	addi	r6,sp,48
 100bd68:	100a6500 	call	100a650 <__sprint_r>
 100bd6c:	103c061e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100bd70:	dc800e17 	ldw	r18,56(sp)
 100bd74:	dc400d17 	ldw	r17,52(sp)
 100bd78:	d8c01904 	addi	r3,sp,100
 100bd7c:	003fee06 	br	100bd38 <___vfprintf_internal_r+0x1690>
 100bd80:	3c000017 	ldw	r16,0(r7)
 100bd84:	0023883a 	mov	r17,zero
 100bd88:	39c00104 	addi	r7,r7,4
 100bd8c:	d9c14015 	stw	r7,1280(sp)
 100bd90:	003e9206 	br	100b7dc <___vfprintf_internal_r+0x1134>
 100bd94:	d9401904 	addi	r5,sp,100
 100bd98:	dd000f04 	addi	r20,sp,60
 100bd9c:	d9414115 	stw	r5,1284(sp)
 100bda0:	d9814417 	ldw	r6,1296(sp)
 100bda4:	880a973a 	slli	r5,r17,28
 100bda8:	8004d13a 	srli	r2,r16,4
 100bdac:	810003cc 	andi	r4,r16,15
 100bdb0:	3109883a 	add	r4,r6,r4
 100bdb4:	2884b03a 	or	r2,r5,r2
 100bdb8:	21400003 	ldbu	r5,0(r4)
 100bdbc:	d9014117 	ldw	r4,1284(sp)
 100bdc0:	8806d13a 	srli	r3,r17,4
 100bdc4:	1021883a 	mov	r16,r2
 100bdc8:	213fffc4 	addi	r4,r4,-1
 100bdcc:	d9014115 	stw	r4,1284(sp)
 100bdd0:	d9814117 	ldw	r6,1284(sp)
 100bdd4:	10c8b03a 	or	r4,r2,r3
 100bdd8:	1823883a 	mov	r17,r3
 100bddc:	31400005 	stb	r5,0(r6)
 100bde0:	203fef1e 	bne	r4,zero,100bda0 <___vfprintf_internal_r+0x16f8>
 100bde4:	003ccb06 	br	100b114 <___vfprintf_internal_r+0xa6c>
 100bde8:	00800c04 	movi	r2,48
 100bdec:	d98018c4 	addi	r6,sp,99
 100bdf0:	dd000f04 	addi	r20,sp,60
 100bdf4:	d88018c5 	stb	r2,99(sp)
 100bdf8:	d9814115 	stw	r6,1284(sp)
 100bdfc:	003cc506 	br	100b114 <___vfprintf_internal_r+0xa6c>
 100be00:	dc400d17 	ldw	r17,52(sp)
 100be04:	070040b4 	movhi	fp,258
 100be08:	e73cfc84 	addi	fp,fp,-3086
 100be0c:	003bc706 	br	100ad2c <___vfprintf_internal_r+0x684>
 100be10:	d9414c17 	ldw	r5,1328(sp)
 100be14:	2880040c 	andi	r2,r5,16
 100be18:	10007c26 	beq	r2,zero,100c00c <___vfprintf_internal_r+0x1964>
 100be1c:	38800017 	ldw	r2,0(r7)
 100be20:	39c00104 	addi	r7,r7,4
 100be24:	d9c14015 	stw	r7,1280(sp)
 100be28:	d9814b17 	ldw	r6,1324(sp)
 100be2c:	d9c14017 	ldw	r7,1280(sp)
 100be30:	11800015 	stw	r6,0(r2)
 100be34:	003a7806 	br	100a818 <___vfprintf_internal_r+0x170>
 100be38:	d9014f17 	ldw	r4,1340(sp)
 100be3c:	b00b883a 	mov	r5,r22
 100be40:	d9800c04 	addi	r6,sp,48
 100be44:	100a6500 	call	100a650 <__sprint_r>
 100be48:	103bcf1e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100be4c:	dc800e17 	ldw	r18,56(sp)
 100be50:	dc400d17 	ldw	r17,52(sp)
 100be54:	d8c01904 	addi	r3,sp,100
 100be58:	d9014717 	ldw	r4,1308(sp)
 100be5c:	d9414117 	ldw	r5,1284(sp)
 100be60:	8c400044 	addi	r17,r17,1
 100be64:	9125883a 	add	r18,r18,r4
 100be68:	008001c4 	movi	r2,7
 100be6c:	19400015 	stw	r5,0(r3)
 100be70:	19000115 	stw	r4,4(r3)
 100be74:	dc800e15 	stw	r18,56(sp)
 100be78:	dc400d15 	stw	r17,52(sp)
 100be7c:	147cee16 	blt	r2,r17,100b238 <___vfprintf_internal_r+0xb90>
 100be80:	18c00204 	addi	r3,r3,8
 100be84:	003b8606 	br	100aca0 <___vfprintf_internal_r+0x5f8>
 100be88:	38c00017 	ldw	r3,0(r7)
 100be8c:	39000204 	addi	r4,r7,8
 100be90:	d9014015 	stw	r4,1280(sp)
 100be94:	d8c14215 	stw	r3,1288(sp)
 100be98:	39c00117 	ldw	r7,4(r7)
 100be9c:	d9c14315 	stw	r7,1292(sp)
 100bea0:	003e2006 	br	100b724 <___vfprintf_internal_r+0x107c>
 100bea4:	0005883a 	mov	r2,zero
 100bea8:	1409c83a 	sub	r4,r2,r16
 100beac:	1105803a 	cmpltu	r2,r2,r4
 100beb0:	044bc83a 	sub	r5,zero,r17
 100beb4:	2885c83a 	sub	r2,r5,r2
 100beb8:	2021883a 	mov	r16,r4
 100bebc:	1023883a 	mov	r17,r2
 100bec0:	01000044 	movi	r4,1
 100bec4:	00800b44 	movi	r2,45
 100bec8:	d8800405 	stb	r2,16(sp)
 100becc:	003c8406 	br	100b0e0 <___vfprintf_internal_r+0xa38>
 100bed0:	d9014f17 	ldw	r4,1340(sp)
 100bed4:	b00b883a 	mov	r5,r22
 100bed8:	d9800c04 	addi	r6,sp,48
 100bedc:	100a6500 	call	100a650 <__sprint_r>
 100bee0:	103ba91e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100bee4:	dc800e17 	ldw	r18,56(sp)
 100bee8:	dc400d17 	ldw	r17,52(sp)
 100beec:	d9000517 	ldw	r4,20(sp)
 100bef0:	d9401904 	addi	r5,sp,100
 100bef4:	003da706 	br	100b594 <___vfprintf_internal_r+0xeec>
 100bef8:	d9014f17 	ldw	r4,1340(sp)
 100befc:	b00b883a 	mov	r5,r22
 100bf00:	d9800c04 	addi	r6,sp,48
 100bf04:	100a6500 	call	100a650 <__sprint_r>
 100bf08:	103b9f1e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100bf0c:	dc800e17 	ldw	r18,56(sp)
 100bf10:	dc400d17 	ldw	r17,52(sp)
 100bf14:	d9000517 	ldw	r4,20(sp)
 100bf18:	d8c01904 	addi	r3,sp,100
 100bf1c:	003d9106 	br	100b564 <___vfprintf_internal_r+0xebc>
 100bf20:	070040b4 	movhi	fp,258
 100bf24:	e73cf884 	addi	fp,fp,-3102
 100bf28:	9425883a 	add	r18,r18,r16
 100bf2c:	8c400044 	addi	r17,r17,1
 100bf30:	008001c4 	movi	r2,7
 100bf34:	1f000015 	stw	fp,0(r3)
 100bf38:	1c000115 	stw	r16,4(r3)
 100bf3c:	dc800e15 	stw	r18,56(sp)
 100bf40:	dc400d15 	stw	r17,52(sp)
 100bf44:	147fbc16 	blt	r2,r17,100be38 <___vfprintf_internal_r+0x1790>
 100bf48:	18c00204 	addi	r3,r3,8
 100bf4c:	003fc206 	br	100be58 <___vfprintf_internal_r+0x17b0>
 100bf50:	d9014f17 	ldw	r4,1340(sp)
 100bf54:	b00b883a 	mov	r5,r22
 100bf58:	d9800c04 	addi	r6,sp,48
 100bf5c:	100a6500 	call	100a650 <__sprint_r>
 100bf60:	103b891e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100bf64:	dc800e17 	ldw	r18,56(sp)
 100bf68:	d9000517 	ldw	r4,20(sp)
 100bf6c:	d8c01904 	addi	r3,sp,100
 100bf70:	003d0206 	br	100b37c <___vfprintf_internal_r+0xcd4>
 100bf74:	070040b4 	movhi	fp,258
 100bf78:	e73cf884 	addi	fp,fp,-3102
 100bf7c:	003be406 	br	100af10 <___vfprintf_internal_r+0x868>
 100bf80:	008040b4 	movhi	r2,258
 100bf84:	10bce704 	addi	r2,r2,-3172
 100bf88:	d8814115 	stw	r2,1284(sp)
 100bf8c:	003df506 	br	100b764 <___vfprintf_internal_r+0x10bc>
 100bf90:	d9014217 	ldw	r4,1288(sp)
 100bf94:	d9414317 	ldw	r5,1292(sp)
 100bf98:	101064c0 	call	101064c <__isnand>
 100bf9c:	10003926 	beq	r2,zero,100c084 <___vfprintf_internal_r+0x19dc>
 100bfa0:	d9414d17 	ldw	r5,1332(sp)
 100bfa4:	008011c4 	movi	r2,71
 100bfa8:	1140ce16 	blt	r2,r5,100c2e4 <___vfprintf_internal_r+0x1c3c>
 100bfac:	018040b4 	movhi	r6,258
 100bfb0:	31bce804 	addi	r6,r6,-3168
 100bfb4:	d9814115 	stw	r6,1284(sp)
 100bfb8:	003dea06 	br	100b764 <___vfprintf_internal_r+0x10bc>
 100bfbc:	d9014c17 	ldw	r4,1328(sp)
 100bfc0:	bdc00044 	addi	r23,r23,1
 100bfc4:	b8c00007 	ldb	r3,0(r23)
 100bfc8:	21000814 	ori	r4,r4,32
 100bfcc:	d9014c15 	stw	r4,1328(sp)
 100bfd0:	003a3406 	br	100a8a4 <___vfprintf_internal_r+0x1fc>
 100bfd4:	dcc14515 	stw	r19,1300(sp)
 100bfd8:	98011016 	blt	r19,zero,100c41c <___vfprintf_internal_r+0x1d74>
 100bfdc:	980f883a 	mov	r7,r19
 100bfe0:	d8014615 	stw	zero,1304(sp)
 100bfe4:	003c5206 	br	100b130 <___vfprintf_internal_r+0xa88>
 100bfe8:	d9014f17 	ldw	r4,1340(sp)
 100bfec:	b00b883a 	mov	r5,r22
 100bff0:	d9800c04 	addi	r6,sp,48
 100bff4:	100a6500 	call	100a650 <__sprint_r>
 100bff8:	103b631e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100bffc:	dc800e17 	ldw	r18,56(sp)
 100c000:	d9000517 	ldw	r4,20(sp)
 100c004:	d8c01904 	addi	r3,sp,100
 100c008:	003f2e06 	br	100bcc4 <___vfprintf_internal_r+0x161c>
 100c00c:	d8c14c17 	ldw	r3,1328(sp)
 100c010:	1880100c 	andi	r2,r3,64
 100c014:	1000a026 	beq	r2,zero,100c298 <___vfprintf_internal_r+0x1bf0>
 100c018:	38800017 	ldw	r2,0(r7)
 100c01c:	39c00104 	addi	r7,r7,4
 100c020:	d9c14015 	stw	r7,1280(sp)
 100c024:	d9014b17 	ldw	r4,1324(sp)
 100c028:	d9c14017 	ldw	r7,1280(sp)
 100c02c:	1100000d 	sth	r4,0(r2)
 100c030:	0039f906 	br	100a818 <___vfprintf_internal_r+0x170>
 100c034:	d9014f17 	ldw	r4,1340(sp)
 100c038:	b00b883a 	mov	r5,r22
 100c03c:	d9800c04 	addi	r6,sp,48
 100c040:	100a6500 	call	100a650 <__sprint_r>
 100c044:	103b501e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100c048:	dc800e17 	ldw	r18,56(sp)
 100c04c:	dc400d17 	ldw	r17,52(sp)
 100c050:	d9000517 	ldw	r4,20(sp)
 100c054:	d8c01904 	addi	r3,sp,100
 100c058:	003f2d06 	br	100bd10 <___vfprintf_internal_r+0x1668>
 100c05c:	00800184 	movi	r2,6
 100c060:	14c09a36 	bltu	r2,r19,100c2cc <___vfprintf_internal_r+0x1c24>
 100c064:	dcc14515 	stw	r19,1300(sp)
 100c068:	9800010e 	bge	r19,zero,100c070 <___vfprintf_internal_r+0x19c8>
 100c06c:	d8014515 	stw	zero,1300(sp)
 100c070:	008040b4 	movhi	r2,258
 100c074:	10bcea04 	addi	r2,r2,-3160
 100c078:	980f883a 	mov	r7,r19
 100c07c:	d8814115 	stw	r2,1284(sp)
 100c080:	003a7806 	br	100aa64 <___vfprintf_internal_r+0x3bc>
 100c084:	00bfffc4 	movi	r2,-1
 100c088:	9880e226 	beq	r19,r2,100c414 <___vfprintf_internal_r+0x1d6c>
 100c08c:	d9414d17 	ldw	r5,1332(sp)
 100c090:	008019c4 	movi	r2,103
 100c094:	2880dc26 	beq	r5,r2,100c408 <___vfprintf_internal_r+0x1d60>
 100c098:	008011c4 	movi	r2,71
 100c09c:	2880da26 	beq	r5,r2,100c408 <___vfprintf_internal_r+0x1d60>
 100c0a0:	d9414c17 	ldw	r5,1328(sp)
 100c0a4:	d9014317 	ldw	r4,1292(sp)
 100c0a8:	d9814217 	ldw	r6,1288(sp)
 100c0ac:	29404014 	ori	r5,r5,256
 100c0b0:	d9414c15 	stw	r5,1328(sp)
 100c0b4:	2000cc16 	blt	r4,zero,100c3e8 <___vfprintf_internal_r+0x1d40>
 100c0b8:	3021883a 	mov	r16,r6
 100c0bc:	2023883a 	mov	r17,r4
 100c0c0:	0039883a 	mov	fp,zero
 100c0c4:	d9414d17 	ldw	r5,1332(sp)
 100c0c8:	00801984 	movi	r2,102
 100c0cc:	2880b726 	beq	r5,r2,100c3ac <___vfprintf_internal_r+0x1d04>
 100c0d0:	00801184 	movi	r2,70
 100c0d4:	2880b526 	beq	r5,r2,100c3ac <___vfprintf_internal_r+0x1d04>
 100c0d8:	00801944 	movi	r2,101
 100c0dc:	2880c826 	beq	r5,r2,100c400 <___vfprintf_internal_r+0x1d58>
 100c0e0:	00801144 	movi	r2,69
 100c0e4:	2880c626 	beq	r5,r2,100c400 <___vfprintf_internal_r+0x1d58>
 100c0e8:	9829883a 	mov	r20,r19
 100c0ec:	d9014f17 	ldw	r4,1340(sp)
 100c0f0:	d8800504 	addi	r2,sp,20
 100c0f4:	880d883a 	mov	r6,r17
 100c0f8:	d8800115 	stw	r2,4(sp)
 100c0fc:	d8c00604 	addi	r3,sp,24
 100c100:	d8800704 	addi	r2,sp,28
 100c104:	800b883a 	mov	r5,r16
 100c108:	01c00084 	movi	r7,2
 100c10c:	d8c00215 	stw	r3,8(sp)
 100c110:	d8800315 	stw	r2,12(sp)
 100c114:	dd000015 	stw	r20,0(sp)
 100c118:	100c8cc0 	call	100c8cc <_dtoa_r>
 100c11c:	d9814d17 	ldw	r6,1332(sp)
 100c120:	d8814115 	stw	r2,1284(sp)
 100c124:	008019c4 	movi	r2,103
 100c128:	30809526 	beq	r6,r2,100c380 <___vfprintf_internal_r+0x1cd8>
 100c12c:	d8c14d17 	ldw	r3,1332(sp)
 100c130:	008011c4 	movi	r2,71
 100c134:	18809226 	beq	r3,r2,100c380 <___vfprintf_internal_r+0x1cd8>
 100c138:	d9414117 	ldw	r5,1284(sp)
 100c13c:	d9814d17 	ldw	r6,1332(sp)
 100c140:	00801984 	movi	r2,102
 100c144:	2d25883a 	add	r18,r5,r20
 100c148:	30808626 	beq	r6,r2,100c364 <___vfprintf_internal_r+0x1cbc>
 100c14c:	00801184 	movi	r2,70
 100c150:	30808426 	beq	r6,r2,100c364 <___vfprintf_internal_r+0x1cbc>
 100c154:	000d883a 	mov	r6,zero
 100c158:	000f883a 	mov	r7,zero
 100c15c:	880b883a 	mov	r5,r17
 100c160:	8009883a 	mov	r4,r16
 100c164:	10123c40 	call	10123c4 <__eqdf2>
 100c168:	1000751e 	bne	r2,zero,100c340 <___vfprintf_internal_r+0x1c98>
 100c16c:	9005883a 	mov	r2,r18
 100c170:	dc800715 	stw	r18,28(sp)
 100c174:	d9014117 	ldw	r4,1284(sp)
 100c178:	d9414d17 	ldw	r5,1332(sp)
 100c17c:	00c019c4 	movi	r3,103
 100c180:	1125c83a 	sub	r18,r2,r4
 100c184:	28c06826 	beq	r5,r3,100c328 <___vfprintf_internal_r+0x1c80>
 100c188:	008011c4 	movi	r2,71
 100c18c:	28806626 	beq	r5,r2,100c328 <___vfprintf_internal_r+0x1c80>
 100c190:	d9000517 	ldw	r4,20(sp)
 100c194:	d8c14d17 	ldw	r3,1332(sp)
 100c198:	00801944 	movi	r2,101
 100c19c:	10c05516 	blt	r2,r3,100c2f4 <___vfprintf_internal_r+0x1c4c>
 100c1a0:	213fffc4 	addi	r4,r4,-1
 100c1a4:	d9000515 	stw	r4,20(sp)
 100c1a8:	d8c00805 	stb	r3,32(sp)
 100c1ac:	2021883a 	mov	r16,r4
 100c1b0:	2000c116 	blt	r4,zero,100c4b8 <___vfprintf_internal_r+0x1e10>
 100c1b4:	00800ac4 	movi	r2,43
 100c1b8:	d8800845 	stb	r2,33(sp)
 100c1bc:	00800244 	movi	r2,9
 100c1c0:	1400af0e 	bge	r2,r16,100c480 <___vfprintf_internal_r+0x1dd8>
 100c1c4:	1027883a 	mov	r19,r2
 100c1c8:	dc400b84 	addi	r17,sp,46
 100c1cc:	8009883a 	mov	r4,r16
 100c1d0:	01400284 	movi	r5,10
 100c1d4:	1012aac0 	call	1012aac <__modsi3>
 100c1d8:	10800c04 	addi	r2,r2,48
 100c1dc:	8c7fffc4 	addi	r17,r17,-1
 100c1e0:	8009883a 	mov	r4,r16
 100c1e4:	01400284 	movi	r5,10
 100c1e8:	88800005 	stb	r2,0(r17)
 100c1ec:	1012a4c0 	call	1012a4c <__divsi3>
 100c1f0:	1021883a 	mov	r16,r2
 100c1f4:	98bff516 	blt	r19,r2,100c1cc <___vfprintf_internal_r+0x1b24>
 100c1f8:	10c00c04 	addi	r3,r2,48
 100c1fc:	d88009c4 	addi	r2,sp,39
 100c200:	108001c4 	addi	r2,r2,7
 100c204:	897fffc4 	addi	r5,r17,-1
 100c208:	88ffffc5 	stb	r3,-1(r17)
 100c20c:	2880a72e 	bgeu	r5,r2,100c4ac <___vfprintf_internal_r+0x1e04>
 100c210:	1009883a 	mov	r4,r2
 100c214:	d9800804 	addi	r6,sp,32
 100c218:	d8c00884 	addi	r3,sp,34
 100c21c:	28800003 	ldbu	r2,0(r5)
 100c220:	29400044 	addi	r5,r5,1
 100c224:	18800005 	stb	r2,0(r3)
 100c228:	18c00044 	addi	r3,r3,1
 100c22c:	293ffb36 	bltu	r5,r4,100c21c <___vfprintf_internal_r+0x1b74>
 100c230:	1987c83a 	sub	r3,r3,r6
 100c234:	00800044 	movi	r2,1
 100c238:	d8c14815 	stw	r3,1312(sp)
 100c23c:	90cf883a 	add	r7,r18,r3
 100c240:	1480960e 	bge	r2,r18,100c49c <___vfprintf_internal_r+0x1df4>
 100c244:	39c00044 	addi	r7,r7,1
 100c248:	d9c14515 	stw	r7,1300(sp)
 100c24c:	38003416 	blt	r7,zero,100c320 <___vfprintf_internal_r+0x1c78>
 100c250:	e0803fcc 	andi	r2,fp,255
 100c254:	1080201c 	xori	r2,r2,128
 100c258:	10bfe004 	addi	r2,r2,-128
 100c25c:	10004e26 	beq	r2,zero,100c398 <___vfprintf_internal_r+0x1cf0>
 100c260:	00800b44 	movi	r2,45
 100c264:	dc814715 	stw	r18,1308(sp)
 100c268:	d8014615 	stw	zero,1304(sp)
 100c26c:	d8800405 	stb	r2,16(sp)
 100c270:	003bb106 	br	100b138 <___vfprintf_internal_r+0xa90>
 100c274:	00800b44 	movi	r2,45
 100c278:	d8800405 	stb	r2,16(sp)
 100c27c:	003d3306 	br	100b74c <___vfprintf_internal_r+0x10a4>
 100c280:	d9014f17 	ldw	r4,1340(sp)
 100c284:	b00b883a 	mov	r5,r22
 100c288:	d9800c04 	addi	r6,sp,48
 100c28c:	100a6500 	call	100a650 <__sprint_r>
 100c290:	103abd1e 	bne	r2,zero,100ad88 <___vfprintf_internal_r+0x6e0>
 100c294:	003abb06 	br	100ad84 <___vfprintf_internal_r+0x6dc>
 100c298:	38800017 	ldw	r2,0(r7)
 100c29c:	39c00104 	addi	r7,r7,4
 100c2a0:	d9c14015 	stw	r7,1280(sp)
 100c2a4:	d9414b17 	ldw	r5,1324(sp)
 100c2a8:	d9c14017 	ldw	r7,1280(sp)
 100c2ac:	11400015 	stw	r5,0(r2)
 100c2b0:	00395906 	br	100a818 <___vfprintf_internal_r+0x170>
 100c2b4:	980f883a 	mov	r7,r19
 100c2b8:	dcc14515 	stw	r19,1300(sp)
 100c2bc:	d8014615 	stw	zero,1304(sp)
 100c2c0:	003b9b06 	br	100b130 <___vfprintf_internal_r+0xa88>
 100c2c4:	0027883a 	mov	r19,zero
 100c2c8:	00397806 	br	100a8ac <___vfprintf_internal_r+0x204>
 100c2cc:	00c040b4 	movhi	r3,258
 100c2d0:	18fcea04 	addi	r3,r3,-3160
 100c2d4:	100f883a 	mov	r7,r2
 100c2d8:	d8814515 	stw	r2,1300(sp)
 100c2dc:	d8c14115 	stw	r3,1284(sp)
 100c2e0:	0039e006 	br	100aa64 <___vfprintf_internal_r+0x3bc>
 100c2e4:	008040b4 	movhi	r2,258
 100c2e8:	10bce904 	addi	r2,r2,-3164
 100c2ec:	d8814115 	stw	r2,1284(sp)
 100c2f0:	003d1c06 	br	100b764 <___vfprintf_internal_r+0x10bc>
 100c2f4:	d9414d17 	ldw	r5,1332(sp)
 100c2f8:	00801984 	movi	r2,102
 100c2fc:	28804926 	beq	r5,r2,100c424 <___vfprintf_internal_r+0x1d7c>
 100c300:	200f883a 	mov	r7,r4
 100c304:	24805716 	blt	r4,r18,100c464 <___vfprintf_internal_r+0x1dbc>
 100c308:	d9414c17 	ldw	r5,1328(sp)
 100c30c:	2880004c 	andi	r2,r5,1
 100c310:	10000126 	beq	r2,zero,100c318 <___vfprintf_internal_r+0x1c70>
 100c314:	21c00044 	addi	r7,r4,1
 100c318:	d9c14515 	stw	r7,1300(sp)
 100c31c:	383fcc0e 	bge	r7,zero,100c250 <___vfprintf_internal_r+0x1ba8>
 100c320:	d8014515 	stw	zero,1300(sp)
 100c324:	003fca06 	br	100c250 <___vfprintf_internal_r+0x1ba8>
 100c328:	d9000517 	ldw	r4,20(sp)
 100c32c:	00bfff04 	movi	r2,-4
 100c330:	1100480e 	bge	r2,r4,100c454 <___vfprintf_internal_r+0x1dac>
 100c334:	99004716 	blt	r19,r4,100c454 <___vfprintf_internal_r+0x1dac>
 100c338:	d8c14d15 	stw	r3,1332(sp)
 100c33c:	003ff006 	br	100c300 <___vfprintf_internal_r+0x1c58>
 100c340:	d8800717 	ldw	r2,28(sp)
 100c344:	14bf8b2e 	bgeu	r2,r18,100c174 <___vfprintf_internal_r+0x1acc>
 100c348:	9007883a 	mov	r3,r18
 100c34c:	01000c04 	movi	r4,48
 100c350:	11000005 	stb	r4,0(r2)
 100c354:	10800044 	addi	r2,r2,1
 100c358:	d8800715 	stw	r2,28(sp)
 100c35c:	18bffc1e 	bne	r3,r2,100c350 <___vfprintf_internal_r+0x1ca8>
 100c360:	003f8406 	br	100c174 <___vfprintf_internal_r+0x1acc>
 100c364:	d8814117 	ldw	r2,1284(sp)
 100c368:	10c00007 	ldb	r3,0(r2)
 100c36c:	00800c04 	movi	r2,48
 100c370:	18805b26 	beq	r3,r2,100c4e0 <___vfprintf_internal_r+0x1e38>
 100c374:	d9000517 	ldw	r4,20(sp)
 100c378:	9125883a 	add	r18,r18,r4
 100c37c:	003f7506 	br	100c154 <___vfprintf_internal_r+0x1aac>
 100c380:	d9014c17 	ldw	r4,1328(sp)
 100c384:	2080004c 	andi	r2,r4,1
 100c388:	1005003a 	cmpeq	r2,r2,zero
 100c38c:	103f6a26 	beq	r2,zero,100c138 <___vfprintf_internal_r+0x1a90>
 100c390:	d8800717 	ldw	r2,28(sp)
 100c394:	003f7706 	br	100c174 <___vfprintf_internal_r+0x1acc>
 100c398:	d9c14515 	stw	r7,1300(sp)
 100c39c:	38004d16 	blt	r7,zero,100c4d4 <___vfprintf_internal_r+0x1e2c>
 100c3a0:	dc814715 	stw	r18,1308(sp)
 100c3a4:	d8014615 	stw	zero,1304(sp)
 100c3a8:	003b6106 	br	100b130 <___vfprintf_internal_r+0xa88>
 100c3ac:	d9014f17 	ldw	r4,1340(sp)
 100c3b0:	d8800504 	addi	r2,sp,20
 100c3b4:	d8800115 	stw	r2,4(sp)
 100c3b8:	d8c00604 	addi	r3,sp,24
 100c3bc:	d8800704 	addi	r2,sp,28
 100c3c0:	800b883a 	mov	r5,r16
 100c3c4:	880d883a 	mov	r6,r17
 100c3c8:	01c000c4 	movi	r7,3
 100c3cc:	d8c00215 	stw	r3,8(sp)
 100c3d0:	d8800315 	stw	r2,12(sp)
 100c3d4:	dcc00015 	stw	r19,0(sp)
 100c3d8:	9829883a 	mov	r20,r19
 100c3dc:	100c8cc0 	call	100c8cc <_dtoa_r>
 100c3e0:	d8814115 	stw	r2,1284(sp)
 100c3e4:	003f5106 	br	100c12c <___vfprintf_internal_r+0x1a84>
 100c3e8:	d8c14217 	ldw	r3,1288(sp)
 100c3ec:	d9014317 	ldw	r4,1292(sp)
 100c3f0:	07000b44 	movi	fp,45
 100c3f4:	1821883a 	mov	r16,r3
 100c3f8:	2460003c 	xorhi	r17,r4,32768
 100c3fc:	003f3106 	br	100c0c4 <___vfprintf_internal_r+0x1a1c>
 100c400:	9d000044 	addi	r20,r19,1
 100c404:	003f3906 	br	100c0ec <___vfprintf_internal_r+0x1a44>
 100c408:	983f251e 	bne	r19,zero,100c0a0 <___vfprintf_internal_r+0x19f8>
 100c40c:	04c00044 	movi	r19,1
 100c410:	003f2306 	br	100c0a0 <___vfprintf_internal_r+0x19f8>
 100c414:	04c00184 	movi	r19,6
 100c418:	003f2106 	br	100c0a0 <___vfprintf_internal_r+0x19f8>
 100c41c:	d8014515 	stw	zero,1300(sp)
 100c420:	003eee06 	br	100bfdc <___vfprintf_internal_r+0x1934>
 100c424:	200f883a 	mov	r7,r4
 100c428:	0100370e 	bge	zero,r4,100c508 <___vfprintf_internal_r+0x1e60>
 100c42c:	9800031e 	bne	r19,zero,100c43c <___vfprintf_internal_r+0x1d94>
 100c430:	d9814c17 	ldw	r6,1328(sp)
 100c434:	3080004c 	andi	r2,r6,1
 100c438:	103fb726 	beq	r2,zero,100c318 <___vfprintf_internal_r+0x1c70>
 100c43c:	20800044 	addi	r2,r4,1
 100c440:	98a7883a 	add	r19,r19,r2
 100c444:	dcc14515 	stw	r19,1300(sp)
 100c448:	980f883a 	mov	r7,r19
 100c44c:	983f800e 	bge	r19,zero,100c250 <___vfprintf_internal_r+0x1ba8>
 100c450:	003fb306 	br	100c320 <___vfprintf_internal_r+0x1c78>
 100c454:	d9814d17 	ldw	r6,1332(sp)
 100c458:	31bfff84 	addi	r6,r6,-2
 100c45c:	d9814d15 	stw	r6,1332(sp)
 100c460:	003f4c06 	br	100c194 <___vfprintf_internal_r+0x1aec>
 100c464:	0100180e 	bge	zero,r4,100c4c8 <___vfprintf_internal_r+0x1e20>
 100c468:	00800044 	movi	r2,1
 100c46c:	1485883a 	add	r2,r2,r18
 100c470:	d8814515 	stw	r2,1300(sp)
 100c474:	100f883a 	mov	r7,r2
 100c478:	103f750e 	bge	r2,zero,100c250 <___vfprintf_internal_r+0x1ba8>
 100c47c:	003fa806 	br	100c320 <___vfprintf_internal_r+0x1c78>
 100c480:	80c00c04 	addi	r3,r16,48
 100c484:	00800c04 	movi	r2,48
 100c488:	d8c008c5 	stb	r3,35(sp)
 100c48c:	d9800804 	addi	r6,sp,32
 100c490:	d8c00904 	addi	r3,sp,36
 100c494:	d8800885 	stb	r2,34(sp)
 100c498:	003f6506 	br	100c230 <___vfprintf_internal_r+0x1b88>
 100c49c:	d9014c17 	ldw	r4,1328(sp)
 100c4a0:	2084703a 	and	r2,r4,r2
 100c4a4:	103f9c26 	beq	r2,zero,100c318 <___vfprintf_internal_r+0x1c70>
 100c4a8:	003f6606 	br	100c244 <___vfprintf_internal_r+0x1b9c>
 100c4ac:	d9800804 	addi	r6,sp,32
 100c4b0:	d8c00884 	addi	r3,sp,34
 100c4b4:	003f5e06 	br	100c230 <___vfprintf_internal_r+0x1b88>
 100c4b8:	00800b44 	movi	r2,45
 100c4bc:	0121c83a 	sub	r16,zero,r4
 100c4c0:	d8800845 	stb	r2,33(sp)
 100c4c4:	003f3d06 	br	100c1bc <___vfprintf_internal_r+0x1b14>
 100c4c8:	00800084 	movi	r2,2
 100c4cc:	1105c83a 	sub	r2,r2,r4
 100c4d0:	003fe606 	br	100c46c <___vfprintf_internal_r+0x1dc4>
 100c4d4:	d8014515 	stw	zero,1300(sp)
 100c4d8:	dc814715 	stw	r18,1308(sp)
 100c4dc:	003fb106 	br	100c3a4 <___vfprintf_internal_r+0x1cfc>
 100c4e0:	000d883a 	mov	r6,zero
 100c4e4:	000f883a 	mov	r7,zero
 100c4e8:	8009883a 	mov	r4,r16
 100c4ec:	880b883a 	mov	r5,r17
 100c4f0:	101244c0 	call	101244c <__nedf2>
 100c4f4:	103f9f26 	beq	r2,zero,100c374 <___vfprintf_internal_r+0x1ccc>
 100c4f8:	00800044 	movi	r2,1
 100c4fc:	1509c83a 	sub	r4,r2,r20
 100c500:	d9000515 	stw	r4,20(sp)
 100c504:	003f9b06 	br	100c374 <___vfprintf_internal_r+0x1ccc>
 100c508:	98000d1e 	bne	r19,zero,100c540 <___vfprintf_internal_r+0x1e98>
 100c50c:	d8c14c17 	ldw	r3,1328(sp)
 100c510:	1880004c 	andi	r2,r3,1
 100c514:	10000a1e 	bne	r2,zero,100c540 <___vfprintf_internal_r+0x1e98>
 100c518:	01000044 	movi	r4,1
 100c51c:	200f883a 	mov	r7,r4
 100c520:	d9014515 	stw	r4,1300(sp)
 100c524:	003f4a06 	br	100c250 <___vfprintf_internal_r+0x1ba8>
 100c528:	3cc00017 	ldw	r19,0(r7)
 100c52c:	39c00104 	addi	r7,r7,4
 100c530:	983d0e0e 	bge	r19,zero,100b96c <___vfprintf_internal_r+0x12c4>
 100c534:	b8c00007 	ldb	r3,0(r23)
 100c538:	04ffffc4 	movi	r19,-1
 100c53c:	0038d906 	br	100a8a4 <___vfprintf_internal_r+0x1fc>
 100c540:	9cc00084 	addi	r19,r19,2
 100c544:	dcc14515 	stw	r19,1300(sp)
 100c548:	980f883a 	mov	r7,r19
 100c54c:	983f400e 	bge	r19,zero,100c250 <___vfprintf_internal_r+0x1ba8>
 100c550:	003f7306 	br	100c320 <___vfprintf_internal_r+0x1c78>

0100c554 <__vfprintf_internal>:
 100c554:	008040b4 	movhi	r2,258
 100c558:	1084a204 	addi	r2,r2,4744
 100c55c:	2013883a 	mov	r9,r4
 100c560:	11000017 	ldw	r4,0(r2)
 100c564:	2805883a 	mov	r2,r5
 100c568:	300f883a 	mov	r7,r6
 100c56c:	480b883a 	mov	r5,r9
 100c570:	100d883a 	mov	r6,r2
 100c574:	100a6a81 	jmpi	100a6a8 <___vfprintf_internal_r>

0100c578 <__swsetup_r>:
 100c578:	008040b4 	movhi	r2,258
 100c57c:	1084a204 	addi	r2,r2,4744
 100c580:	10c00017 	ldw	r3,0(r2)
 100c584:	defffd04 	addi	sp,sp,-12
 100c588:	dc400115 	stw	r17,4(sp)
 100c58c:	dc000015 	stw	r16,0(sp)
 100c590:	dfc00215 	stw	ra,8(sp)
 100c594:	2023883a 	mov	r17,r4
 100c598:	2821883a 	mov	r16,r5
 100c59c:	18000226 	beq	r3,zero,100c5a8 <__swsetup_r+0x30>
 100c5a0:	18800e17 	ldw	r2,56(r3)
 100c5a4:	10001f26 	beq	r2,zero,100c624 <__swsetup_r+0xac>
 100c5a8:	8100030b 	ldhu	r4,12(r16)
 100c5ac:	2080020c 	andi	r2,r4,8
 100c5b0:	10002826 	beq	r2,zero,100c654 <__swsetup_r+0xdc>
 100c5b4:	81400417 	ldw	r5,16(r16)
 100c5b8:	28001d26 	beq	r5,zero,100c630 <__swsetup_r+0xb8>
 100c5bc:	2080004c 	andi	r2,r4,1
 100c5c0:	1005003a 	cmpeq	r2,r2,zero
 100c5c4:	10000b26 	beq	r2,zero,100c5f4 <__swsetup_r+0x7c>
 100c5c8:	2080008c 	andi	r2,r4,2
 100c5cc:	10001226 	beq	r2,zero,100c618 <__swsetup_r+0xa0>
 100c5d0:	0005883a 	mov	r2,zero
 100c5d4:	80800215 	stw	r2,8(r16)
 100c5d8:	28000b26 	beq	r5,zero,100c608 <__swsetup_r+0x90>
 100c5dc:	0005883a 	mov	r2,zero
 100c5e0:	dfc00217 	ldw	ra,8(sp)
 100c5e4:	dc400117 	ldw	r17,4(sp)
 100c5e8:	dc000017 	ldw	r16,0(sp)
 100c5ec:	dec00304 	addi	sp,sp,12
 100c5f0:	f800283a 	ret
 100c5f4:	80800517 	ldw	r2,20(r16)
 100c5f8:	80000215 	stw	zero,8(r16)
 100c5fc:	0085c83a 	sub	r2,zero,r2
 100c600:	80800615 	stw	r2,24(r16)
 100c604:	283ff51e 	bne	r5,zero,100c5dc <__swsetup_r+0x64>
 100c608:	2080200c 	andi	r2,r4,128
 100c60c:	103ff326 	beq	r2,zero,100c5dc <__swsetup_r+0x64>
 100c610:	00bfffc4 	movi	r2,-1
 100c614:	003ff206 	br	100c5e0 <__swsetup_r+0x68>
 100c618:	80800517 	ldw	r2,20(r16)
 100c61c:	80800215 	stw	r2,8(r16)
 100c620:	003fed06 	br	100c5d8 <__swsetup_r+0x60>
 100c624:	1809883a 	mov	r4,r3
 100c628:	100e1180 	call	100e118 <__sinit>
 100c62c:	003fde06 	br	100c5a8 <__swsetup_r+0x30>
 100c630:	20c0a00c 	andi	r3,r4,640
 100c634:	00808004 	movi	r2,512
 100c638:	18bfe026 	beq	r3,r2,100c5bc <__swsetup_r+0x44>
 100c63c:	8809883a 	mov	r4,r17
 100c640:	800b883a 	mov	r5,r16
 100c644:	100ee900 	call	100ee90 <__smakebuf_r>
 100c648:	8100030b 	ldhu	r4,12(r16)
 100c64c:	81400417 	ldw	r5,16(r16)
 100c650:	003fda06 	br	100c5bc <__swsetup_r+0x44>
 100c654:	2080040c 	andi	r2,r4,16
 100c658:	103fed26 	beq	r2,zero,100c610 <__swsetup_r+0x98>
 100c65c:	2080010c 	andi	r2,r4,4
 100c660:	10001226 	beq	r2,zero,100c6ac <__swsetup_r+0x134>
 100c664:	81400c17 	ldw	r5,48(r16)
 100c668:	28000526 	beq	r5,zero,100c680 <__swsetup_r+0x108>
 100c66c:	80801004 	addi	r2,r16,64
 100c670:	28800226 	beq	r5,r2,100c67c <__swsetup_r+0x104>
 100c674:	8809883a 	mov	r4,r17
 100c678:	100e49c0 	call	100e49c <_free_r>
 100c67c:	80000c15 	stw	zero,48(r16)
 100c680:	8080030b 	ldhu	r2,12(r16)
 100c684:	81400417 	ldw	r5,16(r16)
 100c688:	80000115 	stw	zero,4(r16)
 100c68c:	10bff6cc 	andi	r2,r2,65499
 100c690:	8080030d 	sth	r2,12(r16)
 100c694:	81400015 	stw	r5,0(r16)
 100c698:	8080030b 	ldhu	r2,12(r16)
 100c69c:	10800214 	ori	r2,r2,8
 100c6a0:	113fffcc 	andi	r4,r2,65535
 100c6a4:	8080030d 	sth	r2,12(r16)
 100c6a8:	003fc306 	br	100c5b8 <__swsetup_r+0x40>
 100c6ac:	81400417 	ldw	r5,16(r16)
 100c6b0:	003ff906 	br	100c698 <__swsetup_r+0x120>

0100c6b4 <quorem>:
 100c6b4:	28c00417 	ldw	r3,16(r5)
 100c6b8:	20800417 	ldw	r2,16(r4)
 100c6bc:	defff604 	addi	sp,sp,-40
 100c6c0:	ddc00715 	stw	r23,28(sp)
 100c6c4:	dd400515 	stw	r21,20(sp)
 100c6c8:	dfc00915 	stw	ra,36(sp)
 100c6cc:	df000815 	stw	fp,32(sp)
 100c6d0:	dd800615 	stw	r22,24(sp)
 100c6d4:	dd000415 	stw	r20,16(sp)
 100c6d8:	dcc00315 	stw	r19,12(sp)
 100c6dc:	dc800215 	stw	r18,8(sp)
 100c6e0:	dc400115 	stw	r17,4(sp)
 100c6e4:	dc000015 	stw	r16,0(sp)
 100c6e8:	202f883a 	mov	r23,r4
 100c6ec:	282b883a 	mov	r21,r5
 100c6f0:	10c07416 	blt	r2,r3,100c8c4 <quorem+0x210>
 100c6f4:	1c7fffc4 	addi	r17,r3,-1
 100c6f8:	8c45883a 	add	r2,r17,r17
 100c6fc:	1085883a 	add	r2,r2,r2
 100c700:	2c000504 	addi	r16,r5,20
 100c704:	24c00504 	addi	r19,r4,20
 100c708:	14ed883a 	add	r22,r2,r19
 100c70c:	80a5883a 	add	r18,r16,r2
 100c710:	b7000017 	ldw	fp,0(r22)
 100c714:	91400017 	ldw	r5,0(r18)
 100c718:	e009883a 	mov	r4,fp
 100c71c:	29400044 	addi	r5,r5,1
 100c720:	1012b0c0 	call	1012b0c <__udivsi3>
 100c724:	1029883a 	mov	r20,r2
 100c728:	10003c1e 	bne	r2,zero,100c81c <quorem+0x168>
 100c72c:	a80b883a 	mov	r5,r21
 100c730:	b809883a 	mov	r4,r23
 100c734:	100f1800 	call	100f180 <__mcmp>
 100c738:	10002b16 	blt	r2,zero,100c7e8 <quorem+0x134>
 100c73c:	a5000044 	addi	r20,r20,1
 100c740:	980f883a 	mov	r7,r19
 100c744:	0011883a 	mov	r8,zero
 100c748:	0009883a 	mov	r4,zero
 100c74c:	81400017 	ldw	r5,0(r16)
 100c750:	38c00017 	ldw	r3,0(r7)
 100c754:	84000104 	addi	r16,r16,4
 100c758:	28bfffcc 	andi	r2,r5,65535
 100c75c:	2085883a 	add	r2,r4,r2
 100c760:	11bfffcc 	andi	r6,r2,65535
 100c764:	193fffcc 	andi	r4,r3,65535
 100c768:	1004d43a 	srli	r2,r2,16
 100c76c:	280ad43a 	srli	r5,r5,16
 100c770:	2189c83a 	sub	r4,r4,r6
 100c774:	2209883a 	add	r4,r4,r8
 100c778:	1806d43a 	srli	r3,r3,16
 100c77c:	288b883a 	add	r5,r5,r2
 100c780:	200dd43a 	srai	r6,r4,16
 100c784:	28bfffcc 	andi	r2,r5,65535
 100c788:	1887c83a 	sub	r3,r3,r2
 100c78c:	1987883a 	add	r3,r3,r6
 100c790:	3900000d 	sth	r4,0(r7)
 100c794:	38c0008d 	sth	r3,2(r7)
 100c798:	2808d43a 	srli	r4,r5,16
 100c79c:	39c00104 	addi	r7,r7,4
 100c7a0:	1811d43a 	srai	r8,r3,16
 100c7a4:	943fe92e 	bgeu	r18,r16,100c74c <quorem+0x98>
 100c7a8:	8c45883a 	add	r2,r17,r17
 100c7ac:	1085883a 	add	r2,r2,r2
 100c7b0:	9885883a 	add	r2,r19,r2
 100c7b4:	10c00017 	ldw	r3,0(r2)
 100c7b8:	18000b1e 	bne	r3,zero,100c7e8 <quorem+0x134>
 100c7bc:	113fff04 	addi	r4,r2,-4
 100c7c0:	9900082e 	bgeu	r19,r4,100c7e4 <quorem+0x130>
 100c7c4:	10bfff17 	ldw	r2,-4(r2)
 100c7c8:	10000326 	beq	r2,zero,100c7d8 <quorem+0x124>
 100c7cc:	00000506 	br	100c7e4 <quorem+0x130>
 100c7d0:	20800017 	ldw	r2,0(r4)
 100c7d4:	1000031e 	bne	r2,zero,100c7e4 <quorem+0x130>
 100c7d8:	213fff04 	addi	r4,r4,-4
 100c7dc:	8c7fffc4 	addi	r17,r17,-1
 100c7e0:	993ffb36 	bltu	r19,r4,100c7d0 <quorem+0x11c>
 100c7e4:	bc400415 	stw	r17,16(r23)
 100c7e8:	a005883a 	mov	r2,r20
 100c7ec:	dfc00917 	ldw	ra,36(sp)
 100c7f0:	df000817 	ldw	fp,32(sp)
 100c7f4:	ddc00717 	ldw	r23,28(sp)
 100c7f8:	dd800617 	ldw	r22,24(sp)
 100c7fc:	dd400517 	ldw	r21,20(sp)
 100c800:	dd000417 	ldw	r20,16(sp)
 100c804:	dcc00317 	ldw	r19,12(sp)
 100c808:	dc800217 	ldw	r18,8(sp)
 100c80c:	dc400117 	ldw	r17,4(sp)
 100c810:	dc000017 	ldw	r16,0(sp)
 100c814:	dec00a04 	addi	sp,sp,40
 100c818:	f800283a 	ret
 100c81c:	980f883a 	mov	r7,r19
 100c820:	8011883a 	mov	r8,r16
 100c824:	0013883a 	mov	r9,zero
 100c828:	000d883a 	mov	r6,zero
 100c82c:	40c00017 	ldw	r3,0(r8)
 100c830:	39000017 	ldw	r4,0(r7)
 100c834:	42000104 	addi	r8,r8,4
 100c838:	18bfffcc 	andi	r2,r3,65535
 100c83c:	a085383a 	mul	r2,r20,r2
 100c840:	1806d43a 	srli	r3,r3,16
 100c844:	217fffcc 	andi	r5,r4,65535
 100c848:	3085883a 	add	r2,r6,r2
 100c84c:	11bfffcc 	andi	r6,r2,65535
 100c850:	a0c7383a 	mul	r3,r20,r3
 100c854:	1004d43a 	srli	r2,r2,16
 100c858:	298bc83a 	sub	r5,r5,r6
 100c85c:	2a4b883a 	add	r5,r5,r9
 100c860:	2008d43a 	srli	r4,r4,16
 100c864:	1887883a 	add	r3,r3,r2
 100c868:	280dd43a 	srai	r6,r5,16
 100c86c:	18bfffcc 	andi	r2,r3,65535
 100c870:	2089c83a 	sub	r4,r4,r2
 100c874:	2189883a 	add	r4,r4,r6
 100c878:	3900008d 	sth	r4,2(r7)
 100c87c:	3940000d 	sth	r5,0(r7)
 100c880:	180cd43a 	srli	r6,r3,16
 100c884:	39c00104 	addi	r7,r7,4
 100c888:	2013d43a 	srai	r9,r4,16
 100c88c:	923fe72e 	bgeu	r18,r8,100c82c <quorem+0x178>
 100c890:	e03fa61e 	bne	fp,zero,100c72c <quorem+0x78>
 100c894:	b0ffff04 	addi	r3,r22,-4
 100c898:	98c0082e 	bgeu	r19,r3,100c8bc <quorem+0x208>
 100c89c:	b0bfff17 	ldw	r2,-4(r22)
 100c8a0:	10000326 	beq	r2,zero,100c8b0 <quorem+0x1fc>
 100c8a4:	00000506 	br	100c8bc <quorem+0x208>
 100c8a8:	18800017 	ldw	r2,0(r3)
 100c8ac:	1000031e 	bne	r2,zero,100c8bc <quorem+0x208>
 100c8b0:	18ffff04 	addi	r3,r3,-4
 100c8b4:	8c7fffc4 	addi	r17,r17,-1
 100c8b8:	98fffb36 	bltu	r19,r3,100c8a8 <quorem+0x1f4>
 100c8bc:	bc400415 	stw	r17,16(r23)
 100c8c0:	003f9a06 	br	100c72c <quorem+0x78>
 100c8c4:	0005883a 	mov	r2,zero
 100c8c8:	003fc806 	br	100c7ec <quorem+0x138>

0100c8cc <_dtoa_r>:
 100c8cc:	22001017 	ldw	r8,64(r4)
 100c8d0:	deffda04 	addi	sp,sp,-152
 100c8d4:	dd402115 	stw	r21,132(sp)
 100c8d8:	dd002015 	stw	r20,128(sp)
 100c8dc:	dc801e15 	stw	r18,120(sp)
 100c8e0:	dc401d15 	stw	r17,116(sp)
 100c8e4:	dfc02515 	stw	ra,148(sp)
 100c8e8:	df002415 	stw	fp,144(sp)
 100c8ec:	ddc02315 	stw	r23,140(sp)
 100c8f0:	dd802215 	stw	r22,136(sp)
 100c8f4:	dcc01f15 	stw	r19,124(sp)
 100c8f8:	dc001c15 	stw	r16,112(sp)
 100c8fc:	d9001615 	stw	r4,88(sp)
 100c900:	3023883a 	mov	r17,r6
 100c904:	2829883a 	mov	r20,r5
 100c908:	d9c01715 	stw	r7,92(sp)
 100c90c:	dc802817 	ldw	r18,160(sp)
 100c910:	302b883a 	mov	r21,r6
 100c914:	40000a26 	beq	r8,zero,100c940 <_dtoa_r+0x74>
 100c918:	20801117 	ldw	r2,68(r4)
 100c91c:	400b883a 	mov	r5,r8
 100c920:	40800115 	stw	r2,4(r8)
 100c924:	20c01117 	ldw	r3,68(r4)
 100c928:	00800044 	movi	r2,1
 100c92c:	10c4983a 	sll	r2,r2,r3
 100c930:	40800215 	stw	r2,8(r8)
 100c934:	100f0240 	call	100f024 <_Bfree>
 100c938:	d8c01617 	ldw	r3,88(sp)
 100c93c:	18001015 	stw	zero,64(r3)
 100c940:	8800a316 	blt	r17,zero,100cbd0 <_dtoa_r+0x304>
 100c944:	90000015 	stw	zero,0(r18)
 100c948:	a8dffc2c 	andhi	r3,r21,32752
 100c94c:	009ffc34 	movhi	r2,32752
 100c950:	18809126 	beq	r3,r2,100cb98 <_dtoa_r+0x2cc>
 100c954:	000d883a 	mov	r6,zero
 100c958:	000f883a 	mov	r7,zero
 100c95c:	a009883a 	mov	r4,r20
 100c960:	a80b883a 	mov	r5,r21
 100c964:	dd001215 	stw	r20,72(sp)
 100c968:	dd401315 	stw	r21,76(sp)
 100c96c:	101244c0 	call	101244c <__nedf2>
 100c970:	1000171e 	bne	r2,zero,100c9d0 <_dtoa_r+0x104>
 100c974:	d9802717 	ldw	r6,156(sp)
 100c978:	00800044 	movi	r2,1
 100c97c:	30800015 	stw	r2,0(r6)
 100c980:	d8802917 	ldw	r2,164(sp)
 100c984:	10029b26 	beq	r2,zero,100d3f4 <_dtoa_r+0xb28>
 100c988:	d9002917 	ldw	r4,164(sp)
 100c98c:	008040b4 	movhi	r2,258
 100c990:	10bcf844 	addi	r2,r2,-3103
 100c994:	10ffffc4 	addi	r3,r2,-1
 100c998:	20800015 	stw	r2,0(r4)
 100c99c:	1805883a 	mov	r2,r3
 100c9a0:	dfc02517 	ldw	ra,148(sp)
 100c9a4:	df002417 	ldw	fp,144(sp)
 100c9a8:	ddc02317 	ldw	r23,140(sp)
 100c9ac:	dd802217 	ldw	r22,136(sp)
 100c9b0:	dd402117 	ldw	r21,132(sp)
 100c9b4:	dd002017 	ldw	r20,128(sp)
 100c9b8:	dcc01f17 	ldw	r19,124(sp)
 100c9bc:	dc801e17 	ldw	r18,120(sp)
 100c9c0:	dc401d17 	ldw	r17,116(sp)
 100c9c4:	dc001c17 	ldw	r16,112(sp)
 100c9c8:	dec02604 	addi	sp,sp,152
 100c9cc:	f800283a 	ret
 100c9d0:	d9001617 	ldw	r4,88(sp)
 100c9d4:	d9401217 	ldw	r5,72(sp)
 100c9d8:	d8800104 	addi	r2,sp,4
 100c9dc:	a80d883a 	mov	r6,r21
 100c9e0:	d9c00204 	addi	r7,sp,8
 100c9e4:	d8800015 	stw	r2,0(sp)
 100c9e8:	100f6600 	call	100f660 <__d2b>
 100c9ec:	d8800715 	stw	r2,28(sp)
 100c9f0:	a804d53a 	srli	r2,r21,20
 100c9f4:	1101ffcc 	andi	r4,r2,2047
 100c9f8:	20008626 	beq	r4,zero,100cc14 <_dtoa_r+0x348>
 100c9fc:	d8c01217 	ldw	r3,72(sp)
 100ca00:	00800434 	movhi	r2,16
 100ca04:	10bfffc4 	addi	r2,r2,-1
 100ca08:	ddc00117 	ldw	r23,4(sp)
 100ca0c:	a884703a 	and	r2,r21,r2
 100ca10:	1811883a 	mov	r8,r3
 100ca14:	124ffc34 	orhi	r9,r2,16368
 100ca18:	25bf0044 	addi	r22,r4,-1023
 100ca1c:	d8000815 	stw	zero,32(sp)
 100ca20:	0005883a 	mov	r2,zero
 100ca24:	00cffe34 	movhi	r3,16376
 100ca28:	480b883a 	mov	r5,r9
 100ca2c:	4009883a 	mov	r4,r8
 100ca30:	180f883a 	mov	r7,r3
 100ca34:	100d883a 	mov	r6,r2
 100ca38:	1011cb40 	call	1011cb4 <__subdf3>
 100ca3c:	0218dbf4 	movhi	r8,25455
 100ca40:	4210d844 	addi	r8,r8,17249
 100ca44:	024ff4f4 	movhi	r9,16339
 100ca48:	4a61e9c4 	addi	r9,r9,-30809
 100ca4c:	480f883a 	mov	r7,r9
 100ca50:	400d883a 	mov	r6,r8
 100ca54:	180b883a 	mov	r5,r3
 100ca58:	1009883a 	mov	r4,r2
 100ca5c:	1011da80 	call	1011da8 <__muldf3>
 100ca60:	0222d874 	movhi	r8,35681
 100ca64:	42322cc4 	addi	r8,r8,-14157
 100ca68:	024ff1f4 	movhi	r9,16327
 100ca6c:	4a628a04 	addi	r9,r9,-30168
 100ca70:	480f883a 	mov	r7,r9
 100ca74:	400d883a 	mov	r6,r8
 100ca78:	180b883a 	mov	r5,r3
 100ca7c:	1009883a 	mov	r4,r2
 100ca80:	1011d340 	call	1011d34 <__adddf3>
 100ca84:	b009883a 	mov	r4,r22
 100ca88:	1021883a 	mov	r16,r2
 100ca8c:	1823883a 	mov	r17,r3
 100ca90:	101266c0 	call	101266c <__floatsidf>
 100ca94:	021427f4 	movhi	r8,20639
 100ca98:	421e7ec4 	addi	r8,r8,31227
 100ca9c:	024ff4f4 	movhi	r9,16339
 100caa0:	4a5104c4 	addi	r9,r9,17427
 100caa4:	480f883a 	mov	r7,r9
 100caa8:	400d883a 	mov	r6,r8
 100caac:	180b883a 	mov	r5,r3
 100cab0:	1009883a 	mov	r4,r2
 100cab4:	1011da80 	call	1011da8 <__muldf3>
 100cab8:	180f883a 	mov	r7,r3
 100cabc:	880b883a 	mov	r5,r17
 100cac0:	100d883a 	mov	r6,r2
 100cac4:	8009883a 	mov	r4,r16
 100cac8:	1011d340 	call	1011d34 <__adddf3>
 100cacc:	1009883a 	mov	r4,r2
 100cad0:	180b883a 	mov	r5,r3
 100cad4:	1021883a 	mov	r16,r2
 100cad8:	1823883a 	mov	r17,r3
 100cadc:	10127640 	call	1012764 <__fixdfsi>
 100cae0:	000d883a 	mov	r6,zero
 100cae4:	000f883a 	mov	r7,zero
 100cae8:	8009883a 	mov	r4,r16
 100caec:	880b883a 	mov	r5,r17
 100caf0:	d8800d15 	stw	r2,52(sp)
 100caf4:	10125e40 	call	10125e4 <__ltdf2>
 100caf8:	10031716 	blt	r2,zero,100d758 <_dtoa_r+0xe8c>
 100cafc:	d8c00d17 	ldw	r3,52(sp)
 100cb00:	00800584 	movi	r2,22
 100cb04:	10c1482e 	bgeu	r2,r3,100d028 <_dtoa_r+0x75c>
 100cb08:	01000044 	movi	r4,1
 100cb0c:	d9000c15 	stw	r4,48(sp)
 100cb10:	bd85c83a 	sub	r2,r23,r22
 100cb14:	11bfffc4 	addi	r6,r2,-1
 100cb18:	30030b16 	blt	r6,zero,100d748 <_dtoa_r+0xe7c>
 100cb1c:	d9800a15 	stw	r6,40(sp)
 100cb20:	d8001115 	stw	zero,68(sp)
 100cb24:	d8c00d17 	ldw	r3,52(sp)
 100cb28:	1802ff16 	blt	r3,zero,100d728 <_dtoa_r+0xe5c>
 100cb2c:	d9000a17 	ldw	r4,40(sp)
 100cb30:	d8c00915 	stw	r3,36(sp)
 100cb34:	d8001015 	stw	zero,64(sp)
 100cb38:	20c9883a 	add	r4,r4,r3
 100cb3c:	d9000a15 	stw	r4,40(sp)
 100cb40:	d9001717 	ldw	r4,92(sp)
 100cb44:	00800244 	movi	r2,9
 100cb48:	11004636 	bltu	r2,r4,100cc64 <_dtoa_r+0x398>
 100cb4c:	00800144 	movi	r2,5
 100cb50:	11020416 	blt	r2,r4,100d364 <_dtoa_r+0xa98>
 100cb54:	04400044 	movi	r17,1
 100cb58:	d8c01717 	ldw	r3,92(sp)
 100cb5c:	00800144 	movi	r2,5
 100cb60:	10c1ed36 	bltu	r2,r3,100d318 <_dtoa_r+0xa4c>
 100cb64:	18c5883a 	add	r2,r3,r3
 100cb68:	1085883a 	add	r2,r2,r2
 100cb6c:	00c04074 	movhi	r3,257
 100cb70:	18f2e004 	addi	r3,r3,-13440
 100cb74:	10c5883a 	add	r2,r2,r3
 100cb78:	11000017 	ldw	r4,0(r2)
 100cb7c:	2000683a 	jmp	r4
 100cb80:	0100cc6c 	andhi	r4,zero,817
 100cb84:	0100cc6c 	andhi	r4,zero,817
 100cb88:	0100d66c 	andhi	r4,zero,857
 100cb8c:	0100d644 	movi	r4,857
 100cb90:	0100d688 	cmpgei	r4,zero,858
 100cb94:	0100d694 	movui	r4,858
 100cb98:	d9002717 	ldw	r4,156(sp)
 100cb9c:	0089c3c4 	movi	r2,9999
 100cba0:	20800015 	stw	r2,0(r4)
 100cba4:	a0001026 	beq	r20,zero,100cbe8 <_dtoa_r+0x31c>
 100cba8:	00c040b4 	movhi	r3,258
 100cbac:	18fd0404 	addi	r3,r3,-3056
 100cbb0:	d9802917 	ldw	r6,164(sp)
 100cbb4:	303f7926 	beq	r6,zero,100c99c <_dtoa_r+0xd0>
 100cbb8:	188000c7 	ldb	r2,3(r3)
 100cbbc:	190000c4 	addi	r4,r3,3
 100cbc0:	1000101e 	bne	r2,zero,100cc04 <_dtoa_r+0x338>
 100cbc4:	d8802917 	ldw	r2,164(sp)
 100cbc8:	11000015 	stw	r4,0(r2)
 100cbcc:	003f7306 	br	100c99c <_dtoa_r+0xd0>
 100cbd0:	00a00034 	movhi	r2,32768
 100cbd4:	10bfffc4 	addi	r2,r2,-1
 100cbd8:	00c00044 	movi	r3,1
 100cbdc:	88aa703a 	and	r21,r17,r2
 100cbe0:	90c00015 	stw	r3,0(r18)
 100cbe4:	003f5806 	br	100c948 <_dtoa_r+0x7c>
 100cbe8:	00800434 	movhi	r2,16
 100cbec:	10bfffc4 	addi	r2,r2,-1
 100cbf0:	a884703a 	and	r2,r21,r2
 100cbf4:	103fec1e 	bne	r2,zero,100cba8 <_dtoa_r+0x2dc>
 100cbf8:	00c040b4 	movhi	r3,258
 100cbfc:	18fd0104 	addi	r3,r3,-3068
 100cc00:	003feb06 	br	100cbb0 <_dtoa_r+0x2e4>
 100cc04:	d8802917 	ldw	r2,164(sp)
 100cc08:	19000204 	addi	r4,r3,8
 100cc0c:	11000015 	stw	r4,0(r2)
 100cc10:	003f6206 	br	100c99c <_dtoa_r+0xd0>
 100cc14:	ddc00117 	ldw	r23,4(sp)
 100cc18:	d8800217 	ldw	r2,8(sp)
 100cc1c:	01000804 	movi	r4,32
 100cc20:	b8c10c84 	addi	r3,r23,1074
 100cc24:	18a3883a 	add	r17,r3,r2
 100cc28:	2441b80e 	bge	r4,r17,100d30c <_dtoa_r+0xa40>
 100cc2c:	00c01004 	movi	r3,64
 100cc30:	1c47c83a 	sub	r3,r3,r17
 100cc34:	88bff804 	addi	r2,r17,-32
 100cc38:	a8c6983a 	sll	r3,r21,r3
 100cc3c:	a084d83a 	srl	r2,r20,r2
 100cc40:	1888b03a 	or	r4,r3,r2
 100cc44:	101283c0 	call	101283c <__floatunsidf>
 100cc48:	1011883a 	mov	r8,r2
 100cc4c:	00bf8434 	movhi	r2,65040
 100cc50:	01000044 	movi	r4,1
 100cc54:	10d3883a 	add	r9,r2,r3
 100cc58:	8dbef344 	addi	r22,r17,-1075
 100cc5c:	d9000815 	stw	r4,32(sp)
 100cc60:	003f6f06 	br	100ca20 <_dtoa_r+0x154>
 100cc64:	d8001715 	stw	zero,92(sp)
 100cc68:	04400044 	movi	r17,1
 100cc6c:	00bfffc4 	movi	r2,-1
 100cc70:	00c00044 	movi	r3,1
 100cc74:	d8800e15 	stw	r2,56(sp)
 100cc78:	d8002615 	stw	zero,152(sp)
 100cc7c:	d8800f15 	stw	r2,60(sp)
 100cc80:	d8c00b15 	stw	r3,44(sp)
 100cc84:	1021883a 	mov	r16,r2
 100cc88:	d8801617 	ldw	r2,88(sp)
 100cc8c:	10001115 	stw	zero,68(r2)
 100cc90:	d8801617 	ldw	r2,88(sp)
 100cc94:	11401117 	ldw	r5,68(r2)
 100cc98:	1009883a 	mov	r4,r2
 100cc9c:	100f5a40 	call	100f5a4 <_Balloc>
 100cca0:	d8c01617 	ldw	r3,88(sp)
 100cca4:	d8800515 	stw	r2,20(sp)
 100cca8:	18801015 	stw	r2,64(r3)
 100ccac:	00800384 	movi	r2,14
 100ccb0:	14006836 	bltu	r2,r16,100ce54 <_dtoa_r+0x588>
 100ccb4:	8805003a 	cmpeq	r2,r17,zero
 100ccb8:	1000661e 	bne	r2,zero,100ce54 <_dtoa_r+0x588>
 100ccbc:	d9000d17 	ldw	r4,52(sp)
 100ccc0:	0102300e 	bge	zero,r4,100d584 <_dtoa_r+0xcb8>
 100ccc4:	208003cc 	andi	r2,r4,15
 100ccc8:	100490fa 	slli	r2,r2,3
 100cccc:	2025d13a 	srai	r18,r4,4
 100ccd0:	00c040b4 	movhi	r3,258
 100ccd4:	18fd1604 	addi	r3,r3,-2984
 100ccd8:	10c5883a 	add	r2,r2,r3
 100ccdc:	90c0040c 	andi	r3,r18,16
 100cce0:	14000017 	ldw	r16,0(r2)
 100cce4:	14400117 	ldw	r17,4(r2)
 100cce8:	18036a1e 	bne	r3,zero,100da94 <_dtoa_r+0x11c8>
 100ccec:	05800084 	movi	r22,2
 100ccf0:	90001026 	beq	r18,zero,100cd34 <_dtoa_r+0x468>
 100ccf4:	04c040b4 	movhi	r19,258
 100ccf8:	9cfd4804 	addi	r19,r19,-2784
 100ccfc:	9080004c 	andi	r2,r18,1
 100cd00:	1005003a 	cmpeq	r2,r2,zero
 100cd04:	1000081e 	bne	r2,zero,100cd28 <_dtoa_r+0x45c>
 100cd08:	99800017 	ldw	r6,0(r19)
 100cd0c:	99c00117 	ldw	r7,4(r19)
 100cd10:	880b883a 	mov	r5,r17
 100cd14:	8009883a 	mov	r4,r16
 100cd18:	1011da80 	call	1011da8 <__muldf3>
 100cd1c:	1021883a 	mov	r16,r2
 100cd20:	b5800044 	addi	r22,r22,1
 100cd24:	1823883a 	mov	r17,r3
 100cd28:	9025d07a 	srai	r18,r18,1
 100cd2c:	9cc00204 	addi	r19,r19,8
 100cd30:	903ff21e 	bne	r18,zero,100ccfc <_dtoa_r+0x430>
 100cd34:	a80b883a 	mov	r5,r21
 100cd38:	a009883a 	mov	r4,r20
 100cd3c:	880f883a 	mov	r7,r17
 100cd40:	800d883a 	mov	r6,r16
 100cd44:	101216c0 	call	101216c <__divdf3>
 100cd48:	1029883a 	mov	r20,r2
 100cd4c:	182b883a 	mov	r21,r3
 100cd50:	d8c00c17 	ldw	r3,48(sp)
 100cd54:	1805003a 	cmpeq	r2,r3,zero
 100cd58:	1000081e 	bne	r2,zero,100cd7c <_dtoa_r+0x4b0>
 100cd5c:	0005883a 	mov	r2,zero
 100cd60:	00cffc34 	movhi	r3,16368
 100cd64:	180f883a 	mov	r7,r3
 100cd68:	a009883a 	mov	r4,r20
 100cd6c:	a80b883a 	mov	r5,r21
 100cd70:	100d883a 	mov	r6,r2
 100cd74:	10125e40 	call	10125e4 <__ltdf2>
 100cd78:	1003fe16 	blt	r2,zero,100dd74 <_dtoa_r+0x14a8>
 100cd7c:	b009883a 	mov	r4,r22
 100cd80:	101266c0 	call	101266c <__floatsidf>
 100cd84:	180b883a 	mov	r5,r3
 100cd88:	1009883a 	mov	r4,r2
 100cd8c:	a00d883a 	mov	r6,r20
 100cd90:	a80f883a 	mov	r7,r21
 100cd94:	1011da80 	call	1011da8 <__muldf3>
 100cd98:	0011883a 	mov	r8,zero
 100cd9c:	02500734 	movhi	r9,16412
 100cda0:	1009883a 	mov	r4,r2
 100cda4:	180b883a 	mov	r5,r3
 100cda8:	480f883a 	mov	r7,r9
 100cdac:	400d883a 	mov	r6,r8
 100cdb0:	1011d340 	call	1011d34 <__adddf3>
 100cdb4:	d9000f17 	ldw	r4,60(sp)
 100cdb8:	102d883a 	mov	r22,r2
 100cdbc:	00bf3034 	movhi	r2,64704
 100cdc0:	18b9883a 	add	fp,r3,r2
 100cdc4:	e02f883a 	mov	r23,fp
 100cdc8:	20028f1e 	bne	r4,zero,100d808 <_dtoa_r+0xf3c>
 100cdcc:	0005883a 	mov	r2,zero
 100cdd0:	00d00534 	movhi	r3,16404
 100cdd4:	a009883a 	mov	r4,r20
 100cdd8:	a80b883a 	mov	r5,r21
 100cddc:	180f883a 	mov	r7,r3
 100cde0:	100d883a 	mov	r6,r2
 100cde4:	1011cb40 	call	1011cb4 <__subdf3>
 100cde8:	1009883a 	mov	r4,r2
 100cdec:	e00f883a 	mov	r7,fp
 100cdf0:	180b883a 	mov	r5,r3
 100cdf4:	b00d883a 	mov	r6,r22
 100cdf8:	1025883a 	mov	r18,r2
 100cdfc:	1827883a 	mov	r19,r3
 100ce00:	10124d40 	call	10124d4 <__gtdf2>
 100ce04:	00834f16 	blt	zero,r2,100db44 <_dtoa_r+0x1278>
 100ce08:	e0e0003c 	xorhi	r3,fp,32768
 100ce0c:	9009883a 	mov	r4,r18
 100ce10:	980b883a 	mov	r5,r19
 100ce14:	180f883a 	mov	r7,r3
 100ce18:	b00d883a 	mov	r6,r22
 100ce1c:	10125e40 	call	10125e4 <__ltdf2>
 100ce20:	1000080e 	bge	r2,zero,100ce44 <_dtoa_r+0x578>
 100ce24:	0027883a 	mov	r19,zero
 100ce28:	0025883a 	mov	r18,zero
 100ce2c:	d8802617 	ldw	r2,152(sp)
 100ce30:	df000517 	ldw	fp,20(sp)
 100ce34:	d8000615 	stw	zero,24(sp)
 100ce38:	0084303a 	nor	r2,zero,r2
 100ce3c:	d8800d15 	stw	r2,52(sp)
 100ce40:	00019b06 	br	100d4b0 <_dtoa_r+0xbe4>
 100ce44:	d9801217 	ldw	r6,72(sp)
 100ce48:	d8801317 	ldw	r2,76(sp)
 100ce4c:	3029883a 	mov	r20,r6
 100ce50:	102b883a 	mov	r21,r2
 100ce54:	d8c00217 	ldw	r3,8(sp)
 100ce58:	18008516 	blt	r3,zero,100d070 <_dtoa_r+0x7a4>
 100ce5c:	d9000d17 	ldw	r4,52(sp)
 100ce60:	00800384 	movi	r2,14
 100ce64:	11008216 	blt	r2,r4,100d070 <_dtoa_r+0x7a4>
 100ce68:	200490fa 	slli	r2,r4,3
 100ce6c:	d9802617 	ldw	r6,152(sp)
 100ce70:	00c040b4 	movhi	r3,258
 100ce74:	18fd1604 	addi	r3,r3,-2984
 100ce78:	10c5883a 	add	r2,r2,r3
 100ce7c:	14800017 	ldw	r18,0(r2)
 100ce80:	14c00117 	ldw	r19,4(r2)
 100ce84:	30031e16 	blt	r6,zero,100db00 <_dtoa_r+0x1234>
 100ce88:	d9000517 	ldw	r4,20(sp)
 100ce8c:	d8c00f17 	ldw	r3,60(sp)
 100ce90:	a823883a 	mov	r17,r21
 100ce94:	a021883a 	mov	r16,r20
 100ce98:	192b883a 	add	r21,r3,r4
 100ce9c:	2039883a 	mov	fp,r4
 100cea0:	00000f06 	br	100cee0 <_dtoa_r+0x614>
 100cea4:	0005883a 	mov	r2,zero
 100cea8:	00d00934 	movhi	r3,16420
 100ceac:	5009883a 	mov	r4,r10
 100ceb0:	580b883a 	mov	r5,r11
 100ceb4:	180f883a 	mov	r7,r3
 100ceb8:	100d883a 	mov	r6,r2
 100cebc:	1011da80 	call	1011da8 <__muldf3>
 100cec0:	180b883a 	mov	r5,r3
 100cec4:	000d883a 	mov	r6,zero
 100cec8:	000f883a 	mov	r7,zero
 100cecc:	1009883a 	mov	r4,r2
 100ced0:	1021883a 	mov	r16,r2
 100ced4:	1823883a 	mov	r17,r3
 100ced8:	101244c0 	call	101244c <__nedf2>
 100cedc:	10004526 	beq	r2,zero,100cff4 <_dtoa_r+0x728>
 100cee0:	900d883a 	mov	r6,r18
 100cee4:	980f883a 	mov	r7,r19
 100cee8:	8009883a 	mov	r4,r16
 100ceec:	880b883a 	mov	r5,r17
 100cef0:	101216c0 	call	101216c <__divdf3>
 100cef4:	180b883a 	mov	r5,r3
 100cef8:	1009883a 	mov	r4,r2
 100cefc:	10127640 	call	1012764 <__fixdfsi>
 100cf00:	1009883a 	mov	r4,r2
 100cf04:	1029883a 	mov	r20,r2
 100cf08:	101266c0 	call	101266c <__floatsidf>
 100cf0c:	180f883a 	mov	r7,r3
 100cf10:	9009883a 	mov	r4,r18
 100cf14:	980b883a 	mov	r5,r19
 100cf18:	100d883a 	mov	r6,r2
 100cf1c:	1011da80 	call	1011da8 <__muldf3>
 100cf20:	180f883a 	mov	r7,r3
 100cf24:	880b883a 	mov	r5,r17
 100cf28:	8009883a 	mov	r4,r16
 100cf2c:	100d883a 	mov	r6,r2
 100cf30:	1011cb40 	call	1011cb4 <__subdf3>
 100cf34:	1015883a 	mov	r10,r2
 100cf38:	a0800c04 	addi	r2,r20,48
 100cf3c:	e0800005 	stb	r2,0(fp)
 100cf40:	e7000044 	addi	fp,fp,1
 100cf44:	1817883a 	mov	r11,r3
 100cf48:	e57fd61e 	bne	fp,r21,100cea4 <_dtoa_r+0x5d8>
 100cf4c:	500d883a 	mov	r6,r10
 100cf50:	180f883a 	mov	r7,r3
 100cf54:	5009883a 	mov	r4,r10
 100cf58:	180b883a 	mov	r5,r3
 100cf5c:	1011d340 	call	1011d34 <__adddf3>
 100cf60:	100d883a 	mov	r6,r2
 100cf64:	9009883a 	mov	r4,r18
 100cf68:	980b883a 	mov	r5,r19
 100cf6c:	180f883a 	mov	r7,r3
 100cf70:	1021883a 	mov	r16,r2
 100cf74:	1823883a 	mov	r17,r3
 100cf78:	10125e40 	call	10125e4 <__ltdf2>
 100cf7c:	10000816 	blt	r2,zero,100cfa0 <_dtoa_r+0x6d4>
 100cf80:	980b883a 	mov	r5,r19
 100cf84:	800d883a 	mov	r6,r16
 100cf88:	880f883a 	mov	r7,r17
 100cf8c:	9009883a 	mov	r4,r18
 100cf90:	10123c40 	call	10123c4 <__eqdf2>
 100cf94:	1000171e 	bne	r2,zero,100cff4 <_dtoa_r+0x728>
 100cf98:	a080004c 	andi	r2,r20,1
 100cf9c:	10001526 	beq	r2,zero,100cff4 <_dtoa_r+0x728>
 100cfa0:	d8800d17 	ldw	r2,52(sp)
 100cfa4:	d8800415 	stw	r2,16(sp)
 100cfa8:	e009883a 	mov	r4,fp
 100cfac:	213fffc4 	addi	r4,r4,-1
 100cfb0:	20c00007 	ldb	r3,0(r4)
 100cfb4:	00800e44 	movi	r2,57
 100cfb8:	1880081e 	bne	r3,r2,100cfdc <_dtoa_r+0x710>
 100cfbc:	d8800517 	ldw	r2,20(sp)
 100cfc0:	113ffa1e 	bne	r2,r4,100cfac <_dtoa_r+0x6e0>
 100cfc4:	d8c00417 	ldw	r3,16(sp)
 100cfc8:	d9800517 	ldw	r6,20(sp)
 100cfcc:	00800c04 	movi	r2,48
 100cfd0:	18c00044 	addi	r3,r3,1
 100cfd4:	d8c00415 	stw	r3,16(sp)
 100cfd8:	30800005 	stb	r2,0(r6)
 100cfdc:	20800003 	ldbu	r2,0(r4)
 100cfe0:	d8c00417 	ldw	r3,16(sp)
 100cfe4:	27000044 	addi	fp,r4,1
 100cfe8:	10800044 	addi	r2,r2,1
 100cfec:	d8c00d15 	stw	r3,52(sp)
 100cff0:	20800005 	stb	r2,0(r4)
 100cff4:	d9001617 	ldw	r4,88(sp)
 100cff8:	d9400717 	ldw	r5,28(sp)
 100cffc:	100f0240 	call	100f024 <_Bfree>
 100d000:	e0000005 	stb	zero,0(fp)
 100d004:	d9800d17 	ldw	r6,52(sp)
 100d008:	d8c02717 	ldw	r3,156(sp)
 100d00c:	d9002917 	ldw	r4,164(sp)
 100d010:	30800044 	addi	r2,r6,1
 100d014:	18800015 	stw	r2,0(r3)
 100d018:	20029c26 	beq	r4,zero,100da8c <_dtoa_r+0x11c0>
 100d01c:	d8c00517 	ldw	r3,20(sp)
 100d020:	27000015 	stw	fp,0(r4)
 100d024:	003e5d06 	br	100c99c <_dtoa_r+0xd0>
 100d028:	d9800d17 	ldw	r6,52(sp)
 100d02c:	00c040b4 	movhi	r3,258
 100d030:	18fd1604 	addi	r3,r3,-2984
 100d034:	d9001217 	ldw	r4,72(sp)
 100d038:	300490fa 	slli	r2,r6,3
 100d03c:	d9401317 	ldw	r5,76(sp)
 100d040:	10c5883a 	add	r2,r2,r3
 100d044:	12000017 	ldw	r8,0(r2)
 100d048:	12400117 	ldw	r9,4(r2)
 100d04c:	400d883a 	mov	r6,r8
 100d050:	480f883a 	mov	r7,r9
 100d054:	10125e40 	call	10125e4 <__ltdf2>
 100d058:	1000030e 	bge	r2,zero,100d068 <_dtoa_r+0x79c>
 100d05c:	d8800d17 	ldw	r2,52(sp)
 100d060:	10bfffc4 	addi	r2,r2,-1
 100d064:	d8800d15 	stw	r2,52(sp)
 100d068:	d8000c15 	stw	zero,48(sp)
 100d06c:	003ea806 	br	100cb10 <_dtoa_r+0x244>
 100d070:	d9000b17 	ldw	r4,44(sp)
 100d074:	202cc03a 	cmpne	r22,r4,zero
 100d078:	b000c71e 	bne	r22,zero,100d398 <_dtoa_r+0xacc>
 100d07c:	dc001117 	ldw	r16,68(sp)
 100d080:	dc801017 	ldw	r18,64(sp)
 100d084:	0027883a 	mov	r19,zero
 100d088:	04000b0e 	bge	zero,r16,100d0b8 <_dtoa_r+0x7ec>
 100d08c:	d8c00a17 	ldw	r3,40(sp)
 100d090:	00c0090e 	bge	zero,r3,100d0b8 <_dtoa_r+0x7ec>
 100d094:	8005883a 	mov	r2,r16
 100d098:	1c011316 	blt	r3,r16,100d4e8 <_dtoa_r+0xc1c>
 100d09c:	d9000a17 	ldw	r4,40(sp)
 100d0a0:	d9801117 	ldw	r6,68(sp)
 100d0a4:	80a1c83a 	sub	r16,r16,r2
 100d0a8:	2089c83a 	sub	r4,r4,r2
 100d0ac:	308dc83a 	sub	r6,r6,r2
 100d0b0:	d9000a15 	stw	r4,40(sp)
 100d0b4:	d9801115 	stw	r6,68(sp)
 100d0b8:	d8801017 	ldw	r2,64(sp)
 100d0bc:	0080150e 	bge	zero,r2,100d114 <_dtoa_r+0x848>
 100d0c0:	d8c00b17 	ldw	r3,44(sp)
 100d0c4:	1805003a 	cmpeq	r2,r3,zero
 100d0c8:	1001c91e 	bne	r2,zero,100d7f0 <_dtoa_r+0xf24>
 100d0cc:	04800e0e 	bge	zero,r18,100d108 <_dtoa_r+0x83c>
 100d0d0:	d9001617 	ldw	r4,88(sp)
 100d0d4:	980b883a 	mov	r5,r19
 100d0d8:	900d883a 	mov	r6,r18
 100d0dc:	100fdd80 	call	100fdd8 <__pow5mult>
 100d0e0:	d9001617 	ldw	r4,88(sp)
 100d0e4:	d9800717 	ldw	r6,28(sp)
 100d0e8:	100b883a 	mov	r5,r2
 100d0ec:	1027883a 	mov	r19,r2
 100d0f0:	100fab40 	call	100fab4 <__multiply>
 100d0f4:	d9001617 	ldw	r4,88(sp)
 100d0f8:	d9400717 	ldw	r5,28(sp)
 100d0fc:	1023883a 	mov	r17,r2
 100d100:	100f0240 	call	100f024 <_Bfree>
 100d104:	dc400715 	stw	r17,28(sp)
 100d108:	d9001017 	ldw	r4,64(sp)
 100d10c:	248dc83a 	sub	r6,r4,r18
 100d110:	30010e1e 	bne	r6,zero,100d54c <_dtoa_r+0xc80>
 100d114:	d9001617 	ldw	r4,88(sp)
 100d118:	04400044 	movi	r17,1
 100d11c:	880b883a 	mov	r5,r17
 100d120:	100fc9c0 	call	100fc9c <__i2b>
 100d124:	d9800917 	ldw	r6,36(sp)
 100d128:	1025883a 	mov	r18,r2
 100d12c:	0180040e 	bge	zero,r6,100d140 <_dtoa_r+0x874>
 100d130:	d9001617 	ldw	r4,88(sp)
 100d134:	100b883a 	mov	r5,r2
 100d138:	100fdd80 	call	100fdd8 <__pow5mult>
 100d13c:	1025883a 	mov	r18,r2
 100d140:	d8801717 	ldw	r2,92(sp)
 100d144:	8880f30e 	bge	r17,r2,100d514 <_dtoa_r+0xc48>
 100d148:	0023883a 	mov	r17,zero
 100d14c:	d9800917 	ldw	r6,36(sp)
 100d150:	30019e1e 	bne	r6,zero,100d7cc <_dtoa_r+0xf00>
 100d154:	00c00044 	movi	r3,1
 100d158:	d9000a17 	ldw	r4,40(sp)
 100d15c:	20c5883a 	add	r2,r4,r3
 100d160:	10c007cc 	andi	r3,r2,31
 100d164:	1800841e 	bne	r3,zero,100d378 <_dtoa_r+0xaac>
 100d168:	00800704 	movi	r2,28
 100d16c:	d9000a17 	ldw	r4,40(sp)
 100d170:	d9801117 	ldw	r6,68(sp)
 100d174:	80a1883a 	add	r16,r16,r2
 100d178:	2089883a 	add	r4,r4,r2
 100d17c:	308d883a 	add	r6,r6,r2
 100d180:	d9000a15 	stw	r4,40(sp)
 100d184:	d9801115 	stw	r6,68(sp)
 100d188:	d8801117 	ldw	r2,68(sp)
 100d18c:	0080050e 	bge	zero,r2,100d1a4 <_dtoa_r+0x8d8>
 100d190:	d9400717 	ldw	r5,28(sp)
 100d194:	d9001617 	ldw	r4,88(sp)
 100d198:	100d883a 	mov	r6,r2
 100d19c:	100f9680 	call	100f968 <__lshift>
 100d1a0:	d8800715 	stw	r2,28(sp)
 100d1a4:	d8c00a17 	ldw	r3,40(sp)
 100d1a8:	00c0050e 	bge	zero,r3,100d1c0 <_dtoa_r+0x8f4>
 100d1ac:	d9001617 	ldw	r4,88(sp)
 100d1b0:	900b883a 	mov	r5,r18
 100d1b4:	180d883a 	mov	r6,r3
 100d1b8:	100f9680 	call	100f968 <__lshift>
 100d1bc:	1025883a 	mov	r18,r2
 100d1c0:	d9000c17 	ldw	r4,48(sp)
 100d1c4:	2005003a 	cmpeq	r2,r4,zero
 100d1c8:	10016f26 	beq	r2,zero,100d788 <_dtoa_r+0xebc>
 100d1cc:	d9000f17 	ldw	r4,60(sp)
 100d1d0:	0102170e 	bge	zero,r4,100da30 <_dtoa_r+0x1164>
 100d1d4:	d9800b17 	ldw	r6,44(sp)
 100d1d8:	3005003a 	cmpeq	r2,r6,zero
 100d1dc:	1000881e 	bne	r2,zero,100d400 <_dtoa_r+0xb34>
 100d1e0:	0400050e 	bge	zero,r16,100d1f8 <_dtoa_r+0x92c>
 100d1e4:	d9001617 	ldw	r4,88(sp)
 100d1e8:	980b883a 	mov	r5,r19
 100d1ec:	800d883a 	mov	r6,r16
 100d1f0:	100f9680 	call	100f968 <__lshift>
 100d1f4:	1027883a 	mov	r19,r2
 100d1f8:	8804c03a 	cmpne	r2,r17,zero
 100d1fc:	1002541e 	bne	r2,zero,100db50 <_dtoa_r+0x1284>
 100d200:	980b883a 	mov	r5,r19
 100d204:	dd800517 	ldw	r22,20(sp)
 100d208:	dcc00615 	stw	r19,24(sp)
 100d20c:	a700004c 	andi	fp,r20,1
 100d210:	2827883a 	mov	r19,r5
 100d214:	d9000717 	ldw	r4,28(sp)
 100d218:	900b883a 	mov	r5,r18
 100d21c:	100c6b40 	call	100c6b4 <quorem>
 100d220:	d9000717 	ldw	r4,28(sp)
 100d224:	d9400617 	ldw	r5,24(sp)
 100d228:	1023883a 	mov	r17,r2
 100d22c:	8dc00c04 	addi	r23,r17,48
 100d230:	100f1800 	call	100f180 <__mcmp>
 100d234:	d9001617 	ldw	r4,88(sp)
 100d238:	900b883a 	mov	r5,r18
 100d23c:	980d883a 	mov	r6,r19
 100d240:	1029883a 	mov	r20,r2
 100d244:	100f7dc0 	call	100f7dc <__mdiff>
 100d248:	102b883a 	mov	r21,r2
 100d24c:	10800317 	ldw	r2,12(r2)
 100d250:	1001281e 	bne	r2,zero,100d6f4 <_dtoa_r+0xe28>
 100d254:	d9000717 	ldw	r4,28(sp)
 100d258:	a80b883a 	mov	r5,r21
 100d25c:	100f1800 	call	100f180 <__mcmp>
 100d260:	d9001617 	ldw	r4,88(sp)
 100d264:	1021883a 	mov	r16,r2
 100d268:	a80b883a 	mov	r5,r21
 100d26c:	100f0240 	call	100f024 <_Bfree>
 100d270:	8000041e 	bne	r16,zero,100d284 <_dtoa_r+0x9b8>
 100d274:	d8801717 	ldw	r2,92(sp)
 100d278:	1000021e 	bne	r2,zero,100d284 <_dtoa_r+0x9b8>
 100d27c:	e004c03a 	cmpne	r2,fp,zero
 100d280:	10011726 	beq	r2,zero,100d6e0 <_dtoa_r+0xe14>
 100d284:	a0010616 	blt	r20,zero,100d6a0 <_dtoa_r+0xdd4>
 100d288:	a000041e 	bne	r20,zero,100d29c <_dtoa_r+0x9d0>
 100d28c:	d8c01717 	ldw	r3,92(sp)
 100d290:	1800021e 	bne	r3,zero,100d29c <_dtoa_r+0x9d0>
 100d294:	e004c03a 	cmpne	r2,fp,zero
 100d298:	10010126 	beq	r2,zero,100d6a0 <_dtoa_r+0xdd4>
 100d29c:	04023d16 	blt	zero,r16,100db94 <_dtoa_r+0x12c8>
 100d2a0:	b5c00005 	stb	r23,0(r22)
 100d2a4:	d9800517 	ldw	r6,20(sp)
 100d2a8:	d9000f17 	ldw	r4,60(sp)
 100d2ac:	b5800044 	addi	r22,r22,1
 100d2b0:	3105883a 	add	r2,r6,r4
 100d2b4:	b0806526 	beq	r22,r2,100d44c <_dtoa_r+0xb80>
 100d2b8:	d9400717 	ldw	r5,28(sp)
 100d2bc:	d9001617 	ldw	r4,88(sp)
 100d2c0:	01800284 	movi	r6,10
 100d2c4:	000f883a 	mov	r7,zero
 100d2c8:	100fcd80 	call	100fcd8 <__multadd>
 100d2cc:	d8800715 	stw	r2,28(sp)
 100d2d0:	d8800617 	ldw	r2,24(sp)
 100d2d4:	14c10c26 	beq	r2,r19,100d708 <_dtoa_r+0xe3c>
 100d2d8:	d9400617 	ldw	r5,24(sp)
 100d2dc:	d9001617 	ldw	r4,88(sp)
 100d2e0:	01800284 	movi	r6,10
 100d2e4:	000f883a 	mov	r7,zero
 100d2e8:	100fcd80 	call	100fcd8 <__multadd>
 100d2ec:	d9001617 	ldw	r4,88(sp)
 100d2f0:	980b883a 	mov	r5,r19
 100d2f4:	01800284 	movi	r6,10
 100d2f8:	000f883a 	mov	r7,zero
 100d2fc:	d8800615 	stw	r2,24(sp)
 100d300:	100fcd80 	call	100fcd8 <__multadd>
 100d304:	1027883a 	mov	r19,r2
 100d308:	003fc206 	br	100d214 <_dtoa_r+0x948>
 100d30c:	2445c83a 	sub	r2,r4,r17
 100d310:	a088983a 	sll	r4,r20,r2
 100d314:	003e4b06 	br	100cc44 <_dtoa_r+0x378>
 100d318:	01bfffc4 	movi	r6,-1
 100d31c:	00800044 	movi	r2,1
 100d320:	d9800e15 	stw	r6,56(sp)
 100d324:	d9800f15 	stw	r6,60(sp)
 100d328:	d8800b15 	stw	r2,44(sp)
 100d32c:	d8c01617 	ldw	r3,88(sp)
 100d330:	008005c4 	movi	r2,23
 100d334:	18001115 	stw	zero,68(r3)
 100d338:	1580082e 	bgeu	r2,r22,100d35c <_dtoa_r+0xa90>
 100d33c:	00c00104 	movi	r3,4
 100d340:	0009883a 	mov	r4,zero
 100d344:	18c7883a 	add	r3,r3,r3
 100d348:	18800504 	addi	r2,r3,20
 100d34c:	21000044 	addi	r4,r4,1
 100d350:	b0bffc2e 	bgeu	r22,r2,100d344 <_dtoa_r+0xa78>
 100d354:	d9801617 	ldw	r6,88(sp)
 100d358:	31001115 	stw	r4,68(r6)
 100d35c:	dc000f17 	ldw	r16,60(sp)
 100d360:	003e4b06 	br	100cc90 <_dtoa_r+0x3c4>
 100d364:	d9801717 	ldw	r6,92(sp)
 100d368:	0023883a 	mov	r17,zero
 100d36c:	31bfff04 	addi	r6,r6,-4
 100d370:	d9801715 	stw	r6,92(sp)
 100d374:	003df806 	br	100cb58 <_dtoa_r+0x28c>
 100d378:	00800804 	movi	r2,32
 100d37c:	10c9c83a 	sub	r4,r2,r3
 100d380:	00c00104 	movi	r3,4
 100d384:	19005a16 	blt	r3,r4,100d4f0 <_dtoa_r+0xc24>
 100d388:	008000c4 	movi	r2,3
 100d38c:	113f7e16 	blt	r2,r4,100d188 <_dtoa_r+0x8bc>
 100d390:	20800704 	addi	r2,r4,28
 100d394:	003f7506 	br	100d16c <_dtoa_r+0x8a0>
 100d398:	d9801717 	ldw	r6,92(sp)
 100d39c:	00800044 	movi	r2,1
 100d3a0:	1180a10e 	bge	r2,r6,100d628 <_dtoa_r+0xd5c>
 100d3a4:	d9800f17 	ldw	r6,60(sp)
 100d3a8:	d8c01017 	ldw	r3,64(sp)
 100d3ac:	30bfffc4 	addi	r2,r6,-1
 100d3b0:	1881c616 	blt	r3,r2,100dacc <_dtoa_r+0x1200>
 100d3b4:	18a5c83a 	sub	r18,r3,r2
 100d3b8:	d8800f17 	ldw	r2,60(sp)
 100d3bc:	10026216 	blt	r2,zero,100dd48 <_dtoa_r+0x147c>
 100d3c0:	dc001117 	ldw	r16,68(sp)
 100d3c4:	1007883a 	mov	r3,r2
 100d3c8:	d9800a17 	ldw	r6,40(sp)
 100d3cc:	d8801117 	ldw	r2,68(sp)
 100d3d0:	d9001617 	ldw	r4,88(sp)
 100d3d4:	30cd883a 	add	r6,r6,r3
 100d3d8:	10c5883a 	add	r2,r2,r3
 100d3dc:	01400044 	movi	r5,1
 100d3e0:	d9800a15 	stw	r6,40(sp)
 100d3e4:	d8801115 	stw	r2,68(sp)
 100d3e8:	100fc9c0 	call	100fc9c <__i2b>
 100d3ec:	1027883a 	mov	r19,r2
 100d3f0:	003f2506 	br	100d088 <_dtoa_r+0x7bc>
 100d3f4:	00c040b4 	movhi	r3,258
 100d3f8:	18fcf804 	addi	r3,r3,-3104
 100d3fc:	003d6706 	br	100c99c <_dtoa_r+0xd0>
 100d400:	dd800517 	ldw	r22,20(sp)
 100d404:	04000044 	movi	r16,1
 100d408:	00000706 	br	100d428 <_dtoa_r+0xb5c>
 100d40c:	d9400717 	ldw	r5,28(sp)
 100d410:	d9001617 	ldw	r4,88(sp)
 100d414:	01800284 	movi	r6,10
 100d418:	000f883a 	mov	r7,zero
 100d41c:	100fcd80 	call	100fcd8 <__multadd>
 100d420:	d8800715 	stw	r2,28(sp)
 100d424:	84000044 	addi	r16,r16,1
 100d428:	d9000717 	ldw	r4,28(sp)
 100d42c:	900b883a 	mov	r5,r18
 100d430:	100c6b40 	call	100c6b4 <quorem>
 100d434:	15c00c04 	addi	r23,r2,48
 100d438:	b5c00005 	stb	r23,0(r22)
 100d43c:	d8c00f17 	ldw	r3,60(sp)
 100d440:	b5800044 	addi	r22,r22,1
 100d444:	80fff116 	blt	r16,r3,100d40c <_dtoa_r+0xb40>
 100d448:	d8000615 	stw	zero,24(sp)
 100d44c:	d9400717 	ldw	r5,28(sp)
 100d450:	d9001617 	ldw	r4,88(sp)
 100d454:	01800044 	movi	r6,1
 100d458:	100f9680 	call	100f968 <__lshift>
 100d45c:	1009883a 	mov	r4,r2
 100d460:	900b883a 	mov	r5,r18
 100d464:	d8800715 	stw	r2,28(sp)
 100d468:	100f1800 	call	100f180 <__mcmp>
 100d46c:	00803c0e 	bge	zero,r2,100d560 <_dtoa_r+0xc94>
 100d470:	b009883a 	mov	r4,r22
 100d474:	213fffc4 	addi	r4,r4,-1
 100d478:	21400003 	ldbu	r5,0(r4)
 100d47c:	00800e44 	movi	r2,57
 100d480:	28c03fcc 	andi	r3,r5,255
 100d484:	18c0201c 	xori	r3,r3,128
 100d488:	18ffe004 	addi	r3,r3,-128
 100d48c:	1881981e 	bne	r3,r2,100daf0 <_dtoa_r+0x1224>
 100d490:	d9800517 	ldw	r6,20(sp)
 100d494:	21bff71e 	bne	r4,r6,100d474 <_dtoa_r+0xba8>
 100d498:	d8800d17 	ldw	r2,52(sp)
 100d49c:	37000044 	addi	fp,r6,1
 100d4a0:	10800044 	addi	r2,r2,1
 100d4a4:	d8800d15 	stw	r2,52(sp)
 100d4a8:	00800c44 	movi	r2,49
 100d4ac:	30800005 	stb	r2,0(r6)
 100d4b0:	d9001617 	ldw	r4,88(sp)
 100d4b4:	900b883a 	mov	r5,r18
 100d4b8:	100f0240 	call	100f024 <_Bfree>
 100d4bc:	983ecd26 	beq	r19,zero,100cff4 <_dtoa_r+0x728>
 100d4c0:	d8c00617 	ldw	r3,24(sp)
 100d4c4:	18000426 	beq	r3,zero,100d4d8 <_dtoa_r+0xc0c>
 100d4c8:	1cc00326 	beq	r3,r19,100d4d8 <_dtoa_r+0xc0c>
 100d4cc:	d9001617 	ldw	r4,88(sp)
 100d4d0:	180b883a 	mov	r5,r3
 100d4d4:	100f0240 	call	100f024 <_Bfree>
 100d4d8:	d9001617 	ldw	r4,88(sp)
 100d4dc:	980b883a 	mov	r5,r19
 100d4e0:	100f0240 	call	100f024 <_Bfree>
 100d4e4:	003ec306 	br	100cff4 <_dtoa_r+0x728>
 100d4e8:	1805883a 	mov	r2,r3
 100d4ec:	003eeb06 	br	100d09c <_dtoa_r+0x7d0>
 100d4f0:	d9800a17 	ldw	r6,40(sp)
 100d4f4:	d8c01117 	ldw	r3,68(sp)
 100d4f8:	20bfff04 	addi	r2,r4,-4
 100d4fc:	308d883a 	add	r6,r6,r2
 100d500:	1887883a 	add	r3,r3,r2
 100d504:	80a1883a 	add	r16,r16,r2
 100d508:	d9800a15 	stw	r6,40(sp)
 100d50c:	d8c01115 	stw	r3,68(sp)
 100d510:	003f1d06 	br	100d188 <_dtoa_r+0x8bc>
 100d514:	a03f0c1e 	bne	r20,zero,100d148 <_dtoa_r+0x87c>
 100d518:	00800434 	movhi	r2,16
 100d51c:	10bfffc4 	addi	r2,r2,-1
 100d520:	a884703a 	and	r2,r21,r2
 100d524:	103f081e 	bne	r2,zero,100d148 <_dtoa_r+0x87c>
 100d528:	a89ffc2c 	andhi	r2,r21,32752
 100d52c:	103f0626 	beq	r2,zero,100d148 <_dtoa_r+0x87c>
 100d530:	d8c01117 	ldw	r3,68(sp)
 100d534:	d9000a17 	ldw	r4,40(sp)
 100d538:	18c00044 	addi	r3,r3,1
 100d53c:	21000044 	addi	r4,r4,1
 100d540:	d8c01115 	stw	r3,68(sp)
 100d544:	d9000a15 	stw	r4,40(sp)
 100d548:	003f0006 	br	100d14c <_dtoa_r+0x880>
 100d54c:	d9400717 	ldw	r5,28(sp)
 100d550:	d9001617 	ldw	r4,88(sp)
 100d554:	100fdd80 	call	100fdd8 <__pow5mult>
 100d558:	d8800715 	stw	r2,28(sp)
 100d55c:	003eed06 	br	100d114 <_dtoa_r+0x848>
 100d560:	1000021e 	bne	r2,zero,100d56c <_dtoa_r+0xca0>
 100d564:	b880004c 	andi	r2,r23,1
 100d568:	103fc11e 	bne	r2,zero,100d470 <_dtoa_r+0xba4>
 100d56c:	b5bfffc4 	addi	r22,r22,-1
 100d570:	b0c00007 	ldb	r3,0(r22)
 100d574:	00800c04 	movi	r2,48
 100d578:	18bffc26 	beq	r3,r2,100d56c <_dtoa_r+0xca0>
 100d57c:	b7000044 	addi	fp,r22,1
 100d580:	003fcb06 	br	100d4b0 <_dtoa_r+0xbe4>
 100d584:	d9800d17 	ldw	r6,52(sp)
 100d588:	018fc83a 	sub	r7,zero,r6
 100d58c:	3801f726 	beq	r7,zero,100dd6c <_dtoa_r+0x14a0>
 100d590:	398003cc 	andi	r6,r7,15
 100d594:	300c90fa 	slli	r6,r6,3
 100d598:	014040b4 	movhi	r5,258
 100d59c:	297d1604 	addi	r5,r5,-2984
 100d5a0:	d9001217 	ldw	r4,72(sp)
 100d5a4:	314d883a 	add	r6,r6,r5
 100d5a8:	30c00117 	ldw	r3,4(r6)
 100d5ac:	30800017 	ldw	r2,0(r6)
 100d5b0:	d9401317 	ldw	r5,76(sp)
 100d5b4:	3821d13a 	srai	r16,r7,4
 100d5b8:	100d883a 	mov	r6,r2
 100d5bc:	180f883a 	mov	r7,r3
 100d5c0:	1011da80 	call	1011da8 <__muldf3>
 100d5c4:	1011883a 	mov	r8,r2
 100d5c8:	1813883a 	mov	r9,r3
 100d5cc:	1029883a 	mov	r20,r2
 100d5d0:	182b883a 	mov	r21,r3
 100d5d4:	8001e526 	beq	r16,zero,100dd6c <_dtoa_r+0x14a0>
 100d5d8:	05800084 	movi	r22,2
 100d5dc:	044040b4 	movhi	r17,258
 100d5e0:	8c7d4804 	addi	r17,r17,-2784
 100d5e4:	8080004c 	andi	r2,r16,1
 100d5e8:	1005003a 	cmpeq	r2,r2,zero
 100d5ec:	1000081e 	bne	r2,zero,100d610 <_dtoa_r+0xd44>
 100d5f0:	89800017 	ldw	r6,0(r17)
 100d5f4:	89c00117 	ldw	r7,4(r17)
 100d5f8:	480b883a 	mov	r5,r9
 100d5fc:	4009883a 	mov	r4,r8
 100d600:	1011da80 	call	1011da8 <__muldf3>
 100d604:	1011883a 	mov	r8,r2
 100d608:	b5800044 	addi	r22,r22,1
 100d60c:	1813883a 	mov	r9,r3
 100d610:	8021d07a 	srai	r16,r16,1
 100d614:	8c400204 	addi	r17,r17,8
 100d618:	803ff21e 	bne	r16,zero,100d5e4 <_dtoa_r+0xd18>
 100d61c:	4029883a 	mov	r20,r8
 100d620:	482b883a 	mov	r21,r9
 100d624:	003dca06 	br	100cd50 <_dtoa_r+0x484>
 100d628:	d9000817 	ldw	r4,32(sp)
 100d62c:	2005003a 	cmpeq	r2,r4,zero
 100d630:	1001f61e 	bne	r2,zero,100de0c <_dtoa_r+0x1540>
 100d634:	dc001117 	ldw	r16,68(sp)
 100d638:	dc801017 	ldw	r18,64(sp)
 100d63c:	18c10cc4 	addi	r3,r3,1075
 100d640:	003f6106 	br	100d3c8 <_dtoa_r+0xafc>
 100d644:	d8000b15 	stw	zero,44(sp)
 100d648:	d9802617 	ldw	r6,152(sp)
 100d64c:	d8c00d17 	ldw	r3,52(sp)
 100d650:	30800044 	addi	r2,r6,1
 100d654:	18ad883a 	add	r22,r3,r2
 100d658:	b13fffc4 	addi	r4,r22,-1
 100d65c:	d9000e15 	stw	r4,56(sp)
 100d660:	0581f60e 	bge	zero,r22,100de3c <_dtoa_r+0x1570>
 100d664:	dd800f15 	stw	r22,60(sp)
 100d668:	003f3006 	br	100d32c <_dtoa_r+0xa60>
 100d66c:	d8000b15 	stw	zero,44(sp)
 100d670:	d9002617 	ldw	r4,152(sp)
 100d674:	0101eb0e 	bge	zero,r4,100de24 <_dtoa_r+0x1558>
 100d678:	202d883a 	mov	r22,r4
 100d67c:	d9000e15 	stw	r4,56(sp)
 100d680:	d9000f15 	stw	r4,60(sp)
 100d684:	003f2906 	br	100d32c <_dtoa_r+0xa60>
 100d688:	01800044 	movi	r6,1
 100d68c:	d9800b15 	stw	r6,44(sp)
 100d690:	003ff706 	br	100d670 <_dtoa_r+0xda4>
 100d694:	01000044 	movi	r4,1
 100d698:	d9000b15 	stw	r4,44(sp)
 100d69c:	003fea06 	br	100d648 <_dtoa_r+0xd7c>
 100d6a0:	04000c0e 	bge	zero,r16,100d6d4 <_dtoa_r+0xe08>
 100d6a4:	d9400717 	ldw	r5,28(sp)
 100d6a8:	d9001617 	ldw	r4,88(sp)
 100d6ac:	01800044 	movi	r6,1
 100d6b0:	100f9680 	call	100f968 <__lshift>
 100d6b4:	1009883a 	mov	r4,r2
 100d6b8:	900b883a 	mov	r5,r18
 100d6bc:	d8800715 	stw	r2,28(sp)
 100d6c0:	100f1800 	call	100f180 <__mcmp>
 100d6c4:	0081e00e 	bge	zero,r2,100de48 <_dtoa_r+0x157c>
 100d6c8:	bdc00044 	addi	r23,r23,1
 100d6cc:	00800e84 	movi	r2,58
 100d6d0:	b881a226 	beq	r23,r2,100dd5c <_dtoa_r+0x1490>
 100d6d4:	b7000044 	addi	fp,r22,1
 100d6d8:	b5c00005 	stb	r23,0(r22)
 100d6dc:	003f7406 	br	100d4b0 <_dtoa_r+0xbe4>
 100d6e0:	00800e44 	movi	r2,57
 100d6e4:	b8819d26 	beq	r23,r2,100dd5c <_dtoa_r+0x1490>
 100d6e8:	053ffa0e 	bge	zero,r20,100d6d4 <_dtoa_r+0xe08>
 100d6ec:	8dc00c44 	addi	r23,r17,49
 100d6f0:	003ff806 	br	100d6d4 <_dtoa_r+0xe08>
 100d6f4:	d9001617 	ldw	r4,88(sp)
 100d6f8:	a80b883a 	mov	r5,r21
 100d6fc:	04000044 	movi	r16,1
 100d700:	100f0240 	call	100f024 <_Bfree>
 100d704:	003edf06 	br	100d284 <_dtoa_r+0x9b8>
 100d708:	d9001617 	ldw	r4,88(sp)
 100d70c:	980b883a 	mov	r5,r19
 100d710:	01800284 	movi	r6,10
 100d714:	000f883a 	mov	r7,zero
 100d718:	100fcd80 	call	100fcd8 <__multadd>
 100d71c:	1027883a 	mov	r19,r2
 100d720:	d8800615 	stw	r2,24(sp)
 100d724:	003ebb06 	br	100d214 <_dtoa_r+0x948>
 100d728:	d9801117 	ldw	r6,68(sp)
 100d72c:	d8800d17 	ldw	r2,52(sp)
 100d730:	d8000915 	stw	zero,36(sp)
 100d734:	308dc83a 	sub	r6,r6,r2
 100d738:	0087c83a 	sub	r3,zero,r2
 100d73c:	d9801115 	stw	r6,68(sp)
 100d740:	d8c01015 	stw	r3,64(sp)
 100d744:	003cfe06 	br	100cb40 <_dtoa_r+0x274>
 100d748:	018dc83a 	sub	r6,zero,r6
 100d74c:	d9801115 	stw	r6,68(sp)
 100d750:	d8000a15 	stw	zero,40(sp)
 100d754:	003cf306 	br	100cb24 <_dtoa_r+0x258>
 100d758:	d9000d17 	ldw	r4,52(sp)
 100d75c:	101266c0 	call	101266c <__floatsidf>
 100d760:	880b883a 	mov	r5,r17
 100d764:	8009883a 	mov	r4,r16
 100d768:	180f883a 	mov	r7,r3
 100d76c:	100d883a 	mov	r6,r2
 100d770:	101244c0 	call	101244c <__nedf2>
 100d774:	103ce126 	beq	r2,zero,100cafc <_dtoa_r+0x230>
 100d778:	d9800d17 	ldw	r6,52(sp)
 100d77c:	31bfffc4 	addi	r6,r6,-1
 100d780:	d9800d15 	stw	r6,52(sp)
 100d784:	003cdd06 	br	100cafc <_dtoa_r+0x230>
 100d788:	d9000717 	ldw	r4,28(sp)
 100d78c:	900b883a 	mov	r5,r18
 100d790:	100f1800 	call	100f180 <__mcmp>
 100d794:	103e8d0e 	bge	r2,zero,100d1cc <_dtoa_r+0x900>
 100d798:	d9400717 	ldw	r5,28(sp)
 100d79c:	d9001617 	ldw	r4,88(sp)
 100d7a0:	01800284 	movi	r6,10
 100d7a4:	000f883a 	mov	r7,zero
 100d7a8:	100fcd80 	call	100fcd8 <__multadd>
 100d7ac:	d9800d17 	ldw	r6,52(sp)
 100d7b0:	d8800715 	stw	r2,28(sp)
 100d7b4:	31bfffc4 	addi	r6,r6,-1
 100d7b8:	d9800d15 	stw	r6,52(sp)
 100d7bc:	b001a71e 	bne	r22,zero,100de5c <_dtoa_r+0x1590>
 100d7c0:	d8800e17 	ldw	r2,56(sp)
 100d7c4:	d8800f15 	stw	r2,60(sp)
 100d7c8:	003e8006 	br	100d1cc <_dtoa_r+0x900>
 100d7cc:	90800417 	ldw	r2,16(r18)
 100d7d0:	1085883a 	add	r2,r2,r2
 100d7d4:	1085883a 	add	r2,r2,r2
 100d7d8:	1485883a 	add	r2,r2,r18
 100d7dc:	11000417 	ldw	r4,16(r2)
 100d7e0:	100f04c0 	call	100f04c <__hi0bits>
 100d7e4:	00c00804 	movi	r3,32
 100d7e8:	1887c83a 	sub	r3,r3,r2
 100d7ec:	003e5a06 	br	100d158 <_dtoa_r+0x88c>
 100d7f0:	d9400717 	ldw	r5,28(sp)
 100d7f4:	d9801017 	ldw	r6,64(sp)
 100d7f8:	d9001617 	ldw	r4,88(sp)
 100d7fc:	100fdd80 	call	100fdd8 <__pow5mult>
 100d800:	d8800715 	stw	r2,28(sp)
 100d804:	003e4306 	br	100d114 <_dtoa_r+0x848>
 100d808:	d9800f17 	ldw	r6,60(sp)
 100d80c:	d8800d17 	ldw	r2,52(sp)
 100d810:	d9800315 	stw	r6,12(sp)
 100d814:	d8800415 	stw	r2,16(sp)
 100d818:	d8c00b17 	ldw	r3,44(sp)
 100d81c:	1805003a 	cmpeq	r2,r3,zero
 100d820:	1000e21e 	bne	r2,zero,100dbac <_dtoa_r+0x12e0>
 100d824:	d9000317 	ldw	r4,12(sp)
 100d828:	0005883a 	mov	r2,zero
 100d82c:	00cff834 	movhi	r3,16352
 100d830:	200c90fa 	slli	r6,r4,3
 100d834:	010040b4 	movhi	r4,258
 100d838:	213d1604 	addi	r4,r4,-2984
 100d83c:	180b883a 	mov	r5,r3
 100d840:	310d883a 	add	r6,r6,r4
 100d844:	327fff17 	ldw	r9,-4(r6)
 100d848:	323ffe17 	ldw	r8,-8(r6)
 100d84c:	1009883a 	mov	r4,r2
 100d850:	480f883a 	mov	r7,r9
 100d854:	400d883a 	mov	r6,r8
 100d858:	101216c0 	call	101216c <__divdf3>
 100d85c:	180b883a 	mov	r5,r3
 100d860:	b00d883a 	mov	r6,r22
 100d864:	b80f883a 	mov	r7,r23
 100d868:	1009883a 	mov	r4,r2
 100d86c:	1011cb40 	call	1011cb4 <__subdf3>
 100d870:	a80b883a 	mov	r5,r21
 100d874:	a009883a 	mov	r4,r20
 100d878:	d8c01915 	stw	r3,100(sp)
 100d87c:	d8801815 	stw	r2,96(sp)
 100d880:	10127640 	call	1012764 <__fixdfsi>
 100d884:	1009883a 	mov	r4,r2
 100d888:	1027883a 	mov	r19,r2
 100d88c:	101266c0 	call	101266c <__floatsidf>
 100d890:	a80b883a 	mov	r5,r21
 100d894:	a009883a 	mov	r4,r20
 100d898:	180f883a 	mov	r7,r3
 100d89c:	100d883a 	mov	r6,r2
 100d8a0:	1011cb40 	call	1011cb4 <__subdf3>
 100d8a4:	d9801817 	ldw	r6,96(sp)
 100d8a8:	1823883a 	mov	r17,r3
 100d8ac:	d8801415 	stw	r2,80(sp)
 100d8b0:	302d883a 	mov	r22,r6
 100d8b4:	d9800517 	ldw	r6,20(sp)
 100d8b8:	9cc00c04 	addi	r19,r19,48
 100d8bc:	dc401515 	stw	r17,84(sp)
 100d8c0:	d8c01917 	ldw	r3,100(sp)
 100d8c4:	34c00005 	stb	r19,0(r6)
 100d8c8:	d8800517 	ldw	r2,20(sp)
 100d8cc:	d9401917 	ldw	r5,100(sp)
 100d8d0:	d9801417 	ldw	r6,80(sp)
 100d8d4:	b009883a 	mov	r4,r22
 100d8d8:	880f883a 	mov	r7,r17
 100d8dc:	182f883a 	mov	r23,r3
 100d8e0:	17000044 	addi	fp,r2,1
 100d8e4:	10124d40 	call	10124d4 <__gtdf2>
 100d8e8:	00804e16 	blt	zero,r2,100da24 <_dtoa_r+0x1158>
 100d8ec:	d9801417 	ldw	r6,80(sp)
 100d8f0:	0005883a 	mov	r2,zero
 100d8f4:	00cffc34 	movhi	r3,16368
 100d8f8:	180b883a 	mov	r5,r3
 100d8fc:	880f883a 	mov	r7,r17
 100d900:	1009883a 	mov	r4,r2
 100d904:	1011cb40 	call	1011cb4 <__subdf3>
 100d908:	d9401917 	ldw	r5,100(sp)
 100d90c:	180f883a 	mov	r7,r3
 100d910:	b009883a 	mov	r4,r22
 100d914:	100d883a 	mov	r6,r2
 100d918:	10124d40 	call	10124d4 <__gtdf2>
 100d91c:	00bda216 	blt	zero,r2,100cfa8 <_dtoa_r+0x6dc>
 100d920:	d8c00317 	ldw	r3,12(sp)
 100d924:	00800044 	movi	r2,1
 100d928:	10c01216 	blt	r2,r3,100d974 <_dtoa_r+0x10a8>
 100d92c:	003d4506 	br	100ce44 <_dtoa_r+0x578>
 100d930:	d9801417 	ldw	r6,80(sp)
 100d934:	0005883a 	mov	r2,zero
 100d938:	00cffc34 	movhi	r3,16368
 100d93c:	180b883a 	mov	r5,r3
 100d940:	880f883a 	mov	r7,r17
 100d944:	1009883a 	mov	r4,r2
 100d948:	1011cb40 	call	1011cb4 <__subdf3>
 100d94c:	d9c01b17 	ldw	r7,108(sp)
 100d950:	180b883a 	mov	r5,r3
 100d954:	1009883a 	mov	r4,r2
 100d958:	b00d883a 	mov	r6,r22
 100d95c:	10125e40 	call	10125e4 <__ltdf2>
 100d960:	103d9116 	blt	r2,zero,100cfa8 <_dtoa_r+0x6dc>
 100d964:	d9800517 	ldw	r6,20(sp)
 100d968:	d9000317 	ldw	r4,12(sp)
 100d96c:	3105883a 	add	r2,r6,r4
 100d970:	e0bd3426 	beq	fp,r2,100ce44 <_dtoa_r+0x578>
 100d974:	04500934 	movhi	r17,16420
 100d978:	0021883a 	mov	r16,zero
 100d97c:	b80b883a 	mov	r5,r23
 100d980:	b009883a 	mov	r4,r22
 100d984:	800d883a 	mov	r6,r16
 100d988:	880f883a 	mov	r7,r17
 100d98c:	1011da80 	call	1011da8 <__muldf3>
 100d990:	d9401517 	ldw	r5,84(sp)
 100d994:	d9001417 	ldw	r4,80(sp)
 100d998:	880f883a 	mov	r7,r17
 100d99c:	000d883a 	mov	r6,zero
 100d9a0:	d8801a15 	stw	r2,104(sp)
 100d9a4:	d8c01b15 	stw	r3,108(sp)
 100d9a8:	1011da80 	call	1011da8 <__muldf3>
 100d9ac:	180b883a 	mov	r5,r3
 100d9b0:	1009883a 	mov	r4,r2
 100d9b4:	1823883a 	mov	r17,r3
 100d9b8:	1021883a 	mov	r16,r2
 100d9bc:	10127640 	call	1012764 <__fixdfsi>
 100d9c0:	1009883a 	mov	r4,r2
 100d9c4:	102b883a 	mov	r21,r2
 100d9c8:	101266c0 	call	101266c <__floatsidf>
 100d9cc:	880b883a 	mov	r5,r17
 100d9d0:	8009883a 	mov	r4,r16
 100d9d4:	180f883a 	mov	r7,r3
 100d9d8:	100d883a 	mov	r6,r2
 100d9dc:	1011cb40 	call	1011cb4 <__subdf3>
 100d9e0:	1021883a 	mov	r16,r2
 100d9e4:	d9001b17 	ldw	r4,108(sp)
 100d9e8:	1823883a 	mov	r17,r3
 100d9ec:	dc001415 	stw	r16,80(sp)
 100d9f0:	ad400c04 	addi	r21,r21,48
 100d9f4:	dc401515 	stw	r17,84(sp)
 100d9f8:	d8801a17 	ldw	r2,104(sp)
 100d9fc:	e5400005 	stb	r21,0(fp)
 100da00:	202f883a 	mov	r23,r4
 100da04:	d9c01b17 	ldw	r7,108(sp)
 100da08:	d9001417 	ldw	r4,80(sp)
 100da0c:	880b883a 	mov	r5,r17
 100da10:	100d883a 	mov	r6,r2
 100da14:	102d883a 	mov	r22,r2
 100da18:	e7000044 	addi	fp,fp,1
 100da1c:	10125e40 	call	10125e4 <__ltdf2>
 100da20:	103fc30e 	bge	r2,zero,100d930 <_dtoa_r+0x1064>
 100da24:	d9000417 	ldw	r4,16(sp)
 100da28:	d9000d15 	stw	r4,52(sp)
 100da2c:	003d7106 	br	100cff4 <_dtoa_r+0x728>
 100da30:	d9801717 	ldw	r6,92(sp)
 100da34:	00800084 	movi	r2,2
 100da38:	11bde60e 	bge	r2,r6,100d1d4 <_dtoa_r+0x908>
 100da3c:	203cfb1e 	bne	r4,zero,100ce2c <_dtoa_r+0x560>
 100da40:	d9001617 	ldw	r4,88(sp)
 100da44:	900b883a 	mov	r5,r18
 100da48:	01800144 	movi	r6,5
 100da4c:	000f883a 	mov	r7,zero
 100da50:	100fcd80 	call	100fcd8 <__multadd>
 100da54:	d9000717 	ldw	r4,28(sp)
 100da58:	100b883a 	mov	r5,r2
 100da5c:	1025883a 	mov	r18,r2
 100da60:	100f1800 	call	100f180 <__mcmp>
 100da64:	00bcf10e 	bge	zero,r2,100ce2c <_dtoa_r+0x560>
 100da68:	d8c00d17 	ldw	r3,52(sp)
 100da6c:	d9000517 	ldw	r4,20(sp)
 100da70:	d8000615 	stw	zero,24(sp)
 100da74:	18c00044 	addi	r3,r3,1
 100da78:	d8c00d15 	stw	r3,52(sp)
 100da7c:	00800c44 	movi	r2,49
 100da80:	27000044 	addi	fp,r4,1
 100da84:	20800005 	stb	r2,0(r4)
 100da88:	003e8906 	br	100d4b0 <_dtoa_r+0xbe4>
 100da8c:	d8c00517 	ldw	r3,20(sp)
 100da90:	003bc206 	br	100c99c <_dtoa_r+0xd0>
 100da94:	018040b4 	movhi	r6,258
 100da98:	31bd4804 	addi	r6,r6,-2784
 100da9c:	30c00917 	ldw	r3,36(r6)
 100daa0:	30800817 	ldw	r2,32(r6)
 100daa4:	d9001217 	ldw	r4,72(sp)
 100daa8:	d9401317 	ldw	r5,76(sp)
 100daac:	180f883a 	mov	r7,r3
 100dab0:	100d883a 	mov	r6,r2
 100dab4:	101216c0 	call	101216c <__divdf3>
 100dab8:	948003cc 	andi	r18,r18,15
 100dabc:	058000c4 	movi	r22,3
 100dac0:	1029883a 	mov	r20,r2
 100dac4:	182b883a 	mov	r21,r3
 100dac8:	003c8906 	br	100ccf0 <_dtoa_r+0x424>
 100dacc:	d9001017 	ldw	r4,64(sp)
 100dad0:	d9800917 	ldw	r6,36(sp)
 100dad4:	0025883a 	mov	r18,zero
 100dad8:	1105c83a 	sub	r2,r2,r4
 100dadc:	2089883a 	add	r4,r4,r2
 100dae0:	308d883a 	add	r6,r6,r2
 100dae4:	d9001015 	stw	r4,64(sp)
 100dae8:	d9800915 	stw	r6,36(sp)
 100daec:	003e3206 	br	100d3b8 <_dtoa_r+0xaec>
 100daf0:	28800044 	addi	r2,r5,1
 100daf4:	27000044 	addi	fp,r4,1
 100daf8:	20800005 	stb	r2,0(r4)
 100dafc:	003e6c06 	br	100d4b0 <_dtoa_r+0xbe4>
 100db00:	d8800f17 	ldw	r2,60(sp)
 100db04:	00bce016 	blt	zero,r2,100ce88 <_dtoa_r+0x5bc>
 100db08:	d9800f17 	ldw	r6,60(sp)
 100db0c:	303cc51e 	bne	r6,zero,100ce24 <_dtoa_r+0x558>
 100db10:	0005883a 	mov	r2,zero
 100db14:	00d00534 	movhi	r3,16404
 100db18:	980b883a 	mov	r5,r19
 100db1c:	180f883a 	mov	r7,r3
 100db20:	9009883a 	mov	r4,r18
 100db24:	100d883a 	mov	r6,r2
 100db28:	1011da80 	call	1011da8 <__muldf3>
 100db2c:	180b883a 	mov	r5,r3
 100db30:	a80f883a 	mov	r7,r21
 100db34:	1009883a 	mov	r4,r2
 100db38:	a00d883a 	mov	r6,r20
 100db3c:	101255c0 	call	101255c <__gedf2>
 100db40:	103cb80e 	bge	r2,zero,100ce24 <_dtoa_r+0x558>
 100db44:	0027883a 	mov	r19,zero
 100db48:	0025883a 	mov	r18,zero
 100db4c:	003fc606 	br	100da68 <_dtoa_r+0x119c>
 100db50:	99400117 	ldw	r5,4(r19)
 100db54:	d9001617 	ldw	r4,88(sp)
 100db58:	100f5a40 	call	100f5a4 <_Balloc>
 100db5c:	99800417 	ldw	r6,16(r19)
 100db60:	11000304 	addi	r4,r2,12
 100db64:	99400304 	addi	r5,r19,12
 100db68:	318d883a 	add	r6,r6,r6
 100db6c:	318d883a 	add	r6,r6,r6
 100db70:	31800204 	addi	r6,r6,8
 100db74:	1023883a 	mov	r17,r2
 100db78:	1009f8c0 	call	1009f8c <memcpy>
 100db7c:	d9001617 	ldw	r4,88(sp)
 100db80:	880b883a 	mov	r5,r17
 100db84:	01800044 	movi	r6,1
 100db88:	100f9680 	call	100f968 <__lshift>
 100db8c:	100b883a 	mov	r5,r2
 100db90:	003d9c06 	br	100d204 <_dtoa_r+0x938>
 100db94:	00800e44 	movi	r2,57
 100db98:	b8807026 	beq	r23,r2,100dd5c <_dtoa_r+0x1490>
 100db9c:	b8800044 	addi	r2,r23,1
 100dba0:	b7000044 	addi	fp,r22,1
 100dba4:	b0800005 	stb	r2,0(r22)
 100dba8:	003e4106 	br	100d4b0 <_dtoa_r+0xbe4>
 100dbac:	d8800317 	ldw	r2,12(sp)
 100dbb0:	018040b4 	movhi	r6,258
 100dbb4:	31bd1604 	addi	r6,r6,-2984
 100dbb8:	b009883a 	mov	r4,r22
 100dbbc:	100e90fa 	slli	r7,r2,3
 100dbc0:	b80b883a 	mov	r5,r23
 100dbc4:	398f883a 	add	r7,r7,r6
 100dbc8:	38bffe17 	ldw	r2,-8(r7)
 100dbcc:	d9800517 	ldw	r6,20(sp)
 100dbd0:	38ffff17 	ldw	r3,-4(r7)
 100dbd4:	37000044 	addi	fp,r6,1
 100dbd8:	180f883a 	mov	r7,r3
 100dbdc:	100d883a 	mov	r6,r2
 100dbe0:	1011da80 	call	1011da8 <__muldf3>
 100dbe4:	a80b883a 	mov	r5,r21
 100dbe8:	a009883a 	mov	r4,r20
 100dbec:	182f883a 	mov	r23,r3
 100dbf0:	102d883a 	mov	r22,r2
 100dbf4:	10127640 	call	1012764 <__fixdfsi>
 100dbf8:	1009883a 	mov	r4,r2
 100dbfc:	1027883a 	mov	r19,r2
 100dc00:	101266c0 	call	101266c <__floatsidf>
 100dc04:	a80b883a 	mov	r5,r21
 100dc08:	a009883a 	mov	r4,r20
 100dc0c:	180f883a 	mov	r7,r3
 100dc10:	100d883a 	mov	r6,r2
 100dc14:	1011cb40 	call	1011cb4 <__subdf3>
 100dc18:	180b883a 	mov	r5,r3
 100dc1c:	d8c00517 	ldw	r3,20(sp)
 100dc20:	9cc00c04 	addi	r19,r19,48
 100dc24:	1009883a 	mov	r4,r2
 100dc28:	1cc00005 	stb	r19,0(r3)
 100dc2c:	2021883a 	mov	r16,r4
 100dc30:	d9000317 	ldw	r4,12(sp)
 100dc34:	00800044 	movi	r2,1
 100dc38:	2823883a 	mov	r17,r5
 100dc3c:	20802226 	beq	r4,r2,100dcc8 <_dtoa_r+0x13fc>
 100dc40:	1029883a 	mov	r20,r2
 100dc44:	0005883a 	mov	r2,zero
 100dc48:	00d00934 	movhi	r3,16420
 100dc4c:	180f883a 	mov	r7,r3
 100dc50:	100d883a 	mov	r6,r2
 100dc54:	880b883a 	mov	r5,r17
 100dc58:	8009883a 	mov	r4,r16
 100dc5c:	1011da80 	call	1011da8 <__muldf3>
 100dc60:	180b883a 	mov	r5,r3
 100dc64:	1009883a 	mov	r4,r2
 100dc68:	1823883a 	mov	r17,r3
 100dc6c:	1021883a 	mov	r16,r2
 100dc70:	10127640 	call	1012764 <__fixdfsi>
 100dc74:	1009883a 	mov	r4,r2
 100dc78:	102b883a 	mov	r21,r2
 100dc7c:	101266c0 	call	101266c <__floatsidf>
 100dc80:	880b883a 	mov	r5,r17
 100dc84:	8009883a 	mov	r4,r16
 100dc88:	180f883a 	mov	r7,r3
 100dc8c:	100d883a 	mov	r6,r2
 100dc90:	1011cb40 	call	1011cb4 <__subdf3>
 100dc94:	180b883a 	mov	r5,r3
 100dc98:	d8c00517 	ldw	r3,20(sp)
 100dc9c:	1009883a 	mov	r4,r2
 100dca0:	ad400c04 	addi	r21,r21,48
 100dca4:	1d05883a 	add	r2,r3,r20
 100dca8:	15400005 	stb	r21,0(r2)
 100dcac:	2021883a 	mov	r16,r4
 100dcb0:	d9000317 	ldw	r4,12(sp)
 100dcb4:	a5000044 	addi	r20,r20,1
 100dcb8:	2823883a 	mov	r17,r5
 100dcbc:	a13fe11e 	bne	r20,r4,100dc44 <_dtoa_r+0x1378>
 100dcc0:	e505883a 	add	r2,fp,r20
 100dcc4:	173fffc4 	addi	fp,r2,-1
 100dcc8:	0025883a 	mov	r18,zero
 100dccc:	04cff834 	movhi	r19,16352
 100dcd0:	b009883a 	mov	r4,r22
 100dcd4:	b80b883a 	mov	r5,r23
 100dcd8:	900d883a 	mov	r6,r18
 100dcdc:	980f883a 	mov	r7,r19
 100dce0:	1011d340 	call	1011d34 <__adddf3>
 100dce4:	180b883a 	mov	r5,r3
 100dce8:	1009883a 	mov	r4,r2
 100dcec:	800d883a 	mov	r6,r16
 100dcf0:	880f883a 	mov	r7,r17
 100dcf4:	10125e40 	call	10125e4 <__ltdf2>
 100dcf8:	103cab16 	blt	r2,zero,100cfa8 <_dtoa_r+0x6dc>
 100dcfc:	0009883a 	mov	r4,zero
 100dd00:	980b883a 	mov	r5,r19
 100dd04:	b80f883a 	mov	r7,r23
 100dd08:	b00d883a 	mov	r6,r22
 100dd0c:	1011cb40 	call	1011cb4 <__subdf3>
 100dd10:	180b883a 	mov	r5,r3
 100dd14:	880f883a 	mov	r7,r17
 100dd18:	1009883a 	mov	r4,r2
 100dd1c:	800d883a 	mov	r6,r16
 100dd20:	10124d40 	call	10124d4 <__gtdf2>
 100dd24:	00bc470e 	bge	zero,r2,100ce44 <_dtoa_r+0x578>
 100dd28:	00c00c04 	movi	r3,48
 100dd2c:	e73fffc4 	addi	fp,fp,-1
 100dd30:	e0800007 	ldb	r2,0(fp)
 100dd34:	10fffd26 	beq	r2,r3,100dd2c <_dtoa_r+0x1460>
 100dd38:	d9800417 	ldw	r6,16(sp)
 100dd3c:	e7000044 	addi	fp,fp,1
 100dd40:	d9800d15 	stw	r6,52(sp)
 100dd44:	003cab06 	br	100cff4 <_dtoa_r+0x728>
 100dd48:	d8c00f17 	ldw	r3,60(sp)
 100dd4c:	d9001117 	ldw	r4,68(sp)
 100dd50:	20e1c83a 	sub	r16,r4,r3
 100dd54:	0007883a 	mov	r3,zero
 100dd58:	003d9b06 	br	100d3c8 <_dtoa_r+0xafc>
 100dd5c:	00800e44 	movi	r2,57
 100dd60:	b0800005 	stb	r2,0(r22)
 100dd64:	b5800044 	addi	r22,r22,1
 100dd68:	003dc106 	br	100d470 <_dtoa_r+0xba4>
 100dd6c:	05800084 	movi	r22,2
 100dd70:	003bf706 	br	100cd50 <_dtoa_r+0x484>
 100dd74:	d9000f17 	ldw	r4,60(sp)
 100dd78:	013c000e 	bge	zero,r4,100cd7c <_dtoa_r+0x4b0>
 100dd7c:	d9800e17 	ldw	r6,56(sp)
 100dd80:	01bc300e 	bge	zero,r6,100ce44 <_dtoa_r+0x578>
 100dd84:	0005883a 	mov	r2,zero
 100dd88:	00d00934 	movhi	r3,16420
 100dd8c:	a80b883a 	mov	r5,r21
 100dd90:	180f883a 	mov	r7,r3
 100dd94:	a009883a 	mov	r4,r20
 100dd98:	100d883a 	mov	r6,r2
 100dd9c:	1011da80 	call	1011da8 <__muldf3>
 100dda0:	b1000044 	addi	r4,r22,1
 100dda4:	1021883a 	mov	r16,r2
 100dda8:	1823883a 	mov	r17,r3
 100ddac:	101266c0 	call	101266c <__floatsidf>
 100ddb0:	880b883a 	mov	r5,r17
 100ddb4:	8009883a 	mov	r4,r16
 100ddb8:	180f883a 	mov	r7,r3
 100ddbc:	100d883a 	mov	r6,r2
 100ddc0:	1011da80 	call	1011da8 <__muldf3>
 100ddc4:	0011883a 	mov	r8,zero
 100ddc8:	02500734 	movhi	r9,16412
 100ddcc:	180b883a 	mov	r5,r3
 100ddd0:	480f883a 	mov	r7,r9
 100ddd4:	1009883a 	mov	r4,r2
 100ddd8:	400d883a 	mov	r6,r8
 100dddc:	1011d340 	call	1011d34 <__adddf3>
 100dde0:	102d883a 	mov	r22,r2
 100dde4:	00bf3034 	movhi	r2,64704
 100dde8:	10ef883a 	add	r23,r2,r3
 100ddec:	d8800d17 	ldw	r2,52(sp)
 100ddf0:	d8c00e17 	ldw	r3,56(sp)
 100ddf4:	8029883a 	mov	r20,r16
 100ddf8:	10bfffc4 	addi	r2,r2,-1
 100ddfc:	882b883a 	mov	r21,r17
 100de00:	d8800415 	stw	r2,16(sp)
 100de04:	d8c00315 	stw	r3,12(sp)
 100de08:	003e8306 	br	100d818 <_dtoa_r+0xf4c>
 100de0c:	d8800117 	ldw	r2,4(sp)
 100de10:	dc001117 	ldw	r16,68(sp)
 100de14:	dc801017 	ldw	r18,64(sp)
 100de18:	00c00d84 	movi	r3,54
 100de1c:	1887c83a 	sub	r3,r3,r2
 100de20:	003d6906 	br	100d3c8 <_dtoa_r+0xafc>
 100de24:	01800044 	movi	r6,1
 100de28:	3021883a 	mov	r16,r6
 100de2c:	d9800f15 	stw	r6,60(sp)
 100de30:	d9802615 	stw	r6,152(sp)
 100de34:	d9800e15 	stw	r6,56(sp)
 100de38:	003b9306 	br	100cc88 <_dtoa_r+0x3bc>
 100de3c:	b021883a 	mov	r16,r22
 100de40:	dd800f15 	stw	r22,60(sp)
 100de44:	003b9006 	br	100cc88 <_dtoa_r+0x3bc>
 100de48:	103e221e 	bne	r2,zero,100d6d4 <_dtoa_r+0xe08>
 100de4c:	b880004c 	andi	r2,r23,1
 100de50:	1005003a 	cmpeq	r2,r2,zero
 100de54:	103e1f1e 	bne	r2,zero,100d6d4 <_dtoa_r+0xe08>
 100de58:	003e1b06 	br	100d6c8 <_dtoa_r+0xdfc>
 100de5c:	d9001617 	ldw	r4,88(sp)
 100de60:	980b883a 	mov	r5,r19
 100de64:	01800284 	movi	r6,10
 100de68:	000f883a 	mov	r7,zero
 100de6c:	100fcd80 	call	100fcd8 <__multadd>
 100de70:	d8c00e17 	ldw	r3,56(sp)
 100de74:	1027883a 	mov	r19,r2
 100de78:	d8c00f15 	stw	r3,60(sp)
 100de7c:	003cd306 	br	100d1cc <_dtoa_r+0x900>

0100de80 <_fflush_r>:
 100de80:	defffb04 	addi	sp,sp,-20
 100de84:	dcc00315 	stw	r19,12(sp)
 100de88:	dc800215 	stw	r18,8(sp)
 100de8c:	dfc00415 	stw	ra,16(sp)
 100de90:	dc400115 	stw	r17,4(sp)
 100de94:	dc000015 	stw	r16,0(sp)
 100de98:	2027883a 	mov	r19,r4
 100de9c:	2825883a 	mov	r18,r5
 100dea0:	20000226 	beq	r4,zero,100deac <_fflush_r+0x2c>
 100dea4:	20800e17 	ldw	r2,56(r4)
 100dea8:	10005626 	beq	r2,zero,100e004 <_fflush_r+0x184>
 100deac:	9100030b 	ldhu	r4,12(r18)
 100deb0:	20ffffcc 	andi	r3,r4,65535
 100deb4:	18e0001c 	xori	r3,r3,32768
 100deb8:	18e00004 	addi	r3,r3,-32768
 100debc:	1880020c 	andi	r2,r3,8
 100dec0:	1000261e 	bne	r2,zero,100df5c <_fflush_r+0xdc>
 100dec4:	90c00117 	ldw	r3,4(r18)
 100dec8:	20820014 	ori	r2,r4,2048
 100decc:	9080030d 	sth	r2,12(r18)
 100ded0:	1009883a 	mov	r4,r2
 100ded4:	00c0400e 	bge	zero,r3,100dfd8 <_fflush_r+0x158>
 100ded8:	92000a17 	ldw	r8,40(r18)
 100dedc:	40004026 	beq	r8,zero,100dfe0 <_fflush_r+0x160>
 100dee0:	2084000c 	andi	r2,r4,4096
 100dee4:	10005326 	beq	r2,zero,100e034 <_fflush_r+0x1b4>
 100dee8:	94001417 	ldw	r16,80(r18)
 100deec:	9080030b 	ldhu	r2,12(r18)
 100def0:	1080010c 	andi	r2,r2,4
 100def4:	1000481e 	bne	r2,zero,100e018 <_fflush_r+0x198>
 100def8:	91400717 	ldw	r5,28(r18)
 100defc:	9809883a 	mov	r4,r19
 100df00:	800d883a 	mov	r6,r16
 100df04:	000f883a 	mov	r7,zero
 100df08:	403ee83a 	callr	r8
 100df0c:	8080261e 	bne	r16,r2,100dfa8 <_fflush_r+0x128>
 100df10:	9080030b 	ldhu	r2,12(r18)
 100df14:	91000417 	ldw	r4,16(r18)
 100df18:	90000115 	stw	zero,4(r18)
 100df1c:	10bdffcc 	andi	r2,r2,63487
 100df20:	10ffffcc 	andi	r3,r2,65535
 100df24:	18c4000c 	andi	r3,r3,4096
 100df28:	9080030d 	sth	r2,12(r18)
 100df2c:	91000015 	stw	r4,0(r18)
 100df30:	18002b26 	beq	r3,zero,100dfe0 <_fflush_r+0x160>
 100df34:	0007883a 	mov	r3,zero
 100df38:	1805883a 	mov	r2,r3
 100df3c:	94001415 	stw	r16,80(r18)
 100df40:	dfc00417 	ldw	ra,16(sp)
 100df44:	dcc00317 	ldw	r19,12(sp)
 100df48:	dc800217 	ldw	r18,8(sp)
 100df4c:	dc400117 	ldw	r17,4(sp)
 100df50:	dc000017 	ldw	r16,0(sp)
 100df54:	dec00504 	addi	sp,sp,20
 100df58:	f800283a 	ret
 100df5c:	94400417 	ldw	r17,16(r18)
 100df60:	88001f26 	beq	r17,zero,100dfe0 <_fflush_r+0x160>
 100df64:	90800017 	ldw	r2,0(r18)
 100df68:	18c000cc 	andi	r3,r3,3
 100df6c:	94400015 	stw	r17,0(r18)
 100df70:	1461c83a 	sub	r16,r2,r17
 100df74:	18002526 	beq	r3,zero,100e00c <_fflush_r+0x18c>
 100df78:	0005883a 	mov	r2,zero
 100df7c:	90800215 	stw	r2,8(r18)
 100df80:	0400170e 	bge	zero,r16,100dfe0 <_fflush_r+0x160>
 100df84:	90c00917 	ldw	r3,36(r18)
 100df88:	91400717 	ldw	r5,28(r18)
 100df8c:	880d883a 	mov	r6,r17
 100df90:	800f883a 	mov	r7,r16
 100df94:	9809883a 	mov	r4,r19
 100df98:	183ee83a 	callr	r3
 100df9c:	88a3883a 	add	r17,r17,r2
 100dfa0:	80a1c83a 	sub	r16,r16,r2
 100dfa4:	00bff616 	blt	zero,r2,100df80 <_fflush_r+0x100>
 100dfa8:	9080030b 	ldhu	r2,12(r18)
 100dfac:	00ffffc4 	movi	r3,-1
 100dfb0:	10801014 	ori	r2,r2,64
 100dfb4:	9080030d 	sth	r2,12(r18)
 100dfb8:	1805883a 	mov	r2,r3
 100dfbc:	dfc00417 	ldw	ra,16(sp)
 100dfc0:	dcc00317 	ldw	r19,12(sp)
 100dfc4:	dc800217 	ldw	r18,8(sp)
 100dfc8:	dc400117 	ldw	r17,4(sp)
 100dfcc:	dc000017 	ldw	r16,0(sp)
 100dfd0:	dec00504 	addi	sp,sp,20
 100dfd4:	f800283a 	ret
 100dfd8:	90800f17 	ldw	r2,60(r18)
 100dfdc:	00bfbe16 	blt	zero,r2,100ded8 <_fflush_r+0x58>
 100dfe0:	0007883a 	mov	r3,zero
 100dfe4:	1805883a 	mov	r2,r3
 100dfe8:	dfc00417 	ldw	ra,16(sp)
 100dfec:	dcc00317 	ldw	r19,12(sp)
 100dff0:	dc800217 	ldw	r18,8(sp)
 100dff4:	dc400117 	ldw	r17,4(sp)
 100dff8:	dc000017 	ldw	r16,0(sp)
 100dffc:	dec00504 	addi	sp,sp,20
 100e000:	f800283a 	ret
 100e004:	100e1180 	call	100e118 <__sinit>
 100e008:	003fa806 	br	100deac <_fflush_r+0x2c>
 100e00c:	90800517 	ldw	r2,20(r18)
 100e010:	90800215 	stw	r2,8(r18)
 100e014:	003fda06 	br	100df80 <_fflush_r+0x100>
 100e018:	90800117 	ldw	r2,4(r18)
 100e01c:	90c00c17 	ldw	r3,48(r18)
 100e020:	80a1c83a 	sub	r16,r16,r2
 100e024:	183fb426 	beq	r3,zero,100def8 <_fflush_r+0x78>
 100e028:	90800f17 	ldw	r2,60(r18)
 100e02c:	80a1c83a 	sub	r16,r16,r2
 100e030:	003fb106 	br	100def8 <_fflush_r+0x78>
 100e034:	91400717 	ldw	r5,28(r18)
 100e038:	9809883a 	mov	r4,r19
 100e03c:	000d883a 	mov	r6,zero
 100e040:	01c00044 	movi	r7,1
 100e044:	403ee83a 	callr	r8
 100e048:	1021883a 	mov	r16,r2
 100e04c:	00bfffc4 	movi	r2,-1
 100e050:	80800226 	beq	r16,r2,100e05c <_fflush_r+0x1dc>
 100e054:	92000a17 	ldw	r8,40(r18)
 100e058:	003fa406 	br	100deec <_fflush_r+0x6c>
 100e05c:	98c00017 	ldw	r3,0(r19)
 100e060:	00800744 	movi	r2,29
 100e064:	18bfde26 	beq	r3,r2,100dfe0 <_fflush_r+0x160>
 100e068:	9080030b 	ldhu	r2,12(r18)
 100e06c:	8007883a 	mov	r3,r16
 100e070:	10801014 	ori	r2,r2,64
 100e074:	9080030d 	sth	r2,12(r18)
 100e078:	003fcf06 	br	100dfb8 <_fflush_r+0x138>

0100e07c <fflush>:
 100e07c:	01404074 	movhi	r5,257
 100e080:	2977a004 	addi	r5,r5,-8576
 100e084:	2007883a 	mov	r3,r4
 100e088:	20000526 	beq	r4,zero,100e0a0 <fflush+0x24>
 100e08c:	008040b4 	movhi	r2,258
 100e090:	1084a204 	addi	r2,r2,4744
 100e094:	11000017 	ldw	r4,0(r2)
 100e098:	180b883a 	mov	r5,r3
 100e09c:	100de801 	jmpi	100de80 <_fflush_r>
 100e0a0:	008040b4 	movhi	r2,258
 100e0a4:	1084a304 	addi	r2,r2,4748
 100e0a8:	11000017 	ldw	r4,0(r2)
 100e0ac:	100ec4c1 	jmpi	100ec4c <_fwalk_reent>

0100e0b0 <std>:
 100e0b0:	00804074 	movhi	r2,257
 100e0b4:	10819f04 	addi	r2,r2,1660
 100e0b8:	20800b15 	stw	r2,44(r4)
 100e0bc:	00804074 	movhi	r2,257
 100e0c0:	1081da04 	addi	r2,r2,1896
 100e0c4:	20800815 	stw	r2,32(r4)
 100e0c8:	00c04074 	movhi	r3,257
 100e0cc:	18c1bb04 	addi	r3,r3,1772
 100e0d0:	00804074 	movhi	r2,257
 100e0d4:	1081a104 	addi	r2,r2,1668
 100e0d8:	2140030d 	sth	r5,12(r4)
 100e0dc:	2180038d 	sth	r6,14(r4)
 100e0e0:	20c00915 	stw	r3,36(r4)
 100e0e4:	20800a15 	stw	r2,40(r4)
 100e0e8:	20000015 	stw	zero,0(r4)
 100e0ec:	20000115 	stw	zero,4(r4)
 100e0f0:	20000215 	stw	zero,8(r4)
 100e0f4:	20000415 	stw	zero,16(r4)
 100e0f8:	20000515 	stw	zero,20(r4)
 100e0fc:	20000615 	stw	zero,24(r4)
 100e100:	21000715 	stw	r4,28(r4)
 100e104:	f800283a 	ret

0100e108 <__sfp_lock_acquire>:
 100e108:	f800283a 	ret

0100e10c <__sfp_lock_release>:
 100e10c:	f800283a 	ret

0100e110 <__sinit_lock_acquire>:
 100e110:	f800283a 	ret

0100e114 <__sinit_lock_release>:
 100e114:	f800283a 	ret

0100e118 <__sinit>:
 100e118:	20800e17 	ldw	r2,56(r4)
 100e11c:	defffd04 	addi	sp,sp,-12
 100e120:	dc400115 	stw	r17,4(sp)
 100e124:	dc000015 	stw	r16,0(sp)
 100e128:	dfc00215 	stw	ra,8(sp)
 100e12c:	04400044 	movi	r17,1
 100e130:	01400104 	movi	r5,4
 100e134:	000d883a 	mov	r6,zero
 100e138:	2021883a 	mov	r16,r4
 100e13c:	2200bb04 	addi	r8,r4,748
 100e140:	200f883a 	mov	r7,r4
 100e144:	10000526 	beq	r2,zero,100e15c <__sinit+0x44>
 100e148:	dfc00217 	ldw	ra,8(sp)
 100e14c:	dc400117 	ldw	r17,4(sp)
 100e150:	dc000017 	ldw	r16,0(sp)
 100e154:	dec00304 	addi	sp,sp,12
 100e158:	f800283a 	ret
 100e15c:	21000117 	ldw	r4,4(r4)
 100e160:	00804074 	movhi	r2,257
 100e164:	10b87f04 	addi	r2,r2,-7684
 100e168:	00c000c4 	movi	r3,3
 100e16c:	80800f15 	stw	r2,60(r16)
 100e170:	80c0b915 	stw	r3,740(r16)
 100e174:	8200ba15 	stw	r8,744(r16)
 100e178:	84400e15 	stw	r17,56(r16)
 100e17c:	8000b815 	stw	zero,736(r16)
 100e180:	100e0b00 	call	100e0b0 <std>
 100e184:	81000217 	ldw	r4,8(r16)
 100e188:	880d883a 	mov	r6,r17
 100e18c:	800f883a 	mov	r7,r16
 100e190:	01400284 	movi	r5,10
 100e194:	100e0b00 	call	100e0b0 <std>
 100e198:	81000317 	ldw	r4,12(r16)
 100e19c:	800f883a 	mov	r7,r16
 100e1a0:	01400484 	movi	r5,18
 100e1a4:	01800084 	movi	r6,2
 100e1a8:	dfc00217 	ldw	ra,8(sp)
 100e1ac:	dc400117 	ldw	r17,4(sp)
 100e1b0:	dc000017 	ldw	r16,0(sp)
 100e1b4:	dec00304 	addi	sp,sp,12
 100e1b8:	100e0b01 	jmpi	100e0b0 <std>

0100e1bc <__fp_lock>:
 100e1bc:	0005883a 	mov	r2,zero
 100e1c0:	f800283a 	ret

0100e1c4 <__fp_unlock>:
 100e1c4:	0005883a 	mov	r2,zero
 100e1c8:	f800283a 	ret

0100e1cc <__fp_unlock_all>:
 100e1cc:	008040b4 	movhi	r2,258
 100e1d0:	1084a204 	addi	r2,r2,4744
 100e1d4:	11000017 	ldw	r4,0(r2)
 100e1d8:	01404074 	movhi	r5,257
 100e1dc:	29787104 	addi	r5,r5,-7740
 100e1e0:	100ed141 	jmpi	100ed14 <_fwalk>

0100e1e4 <__fp_lock_all>:
 100e1e4:	008040b4 	movhi	r2,258
 100e1e8:	1084a204 	addi	r2,r2,4744
 100e1ec:	11000017 	ldw	r4,0(r2)
 100e1f0:	01404074 	movhi	r5,257
 100e1f4:	29786f04 	addi	r5,r5,-7748
 100e1f8:	100ed141 	jmpi	100ed14 <_fwalk>

0100e1fc <_cleanup_r>:
 100e1fc:	01404074 	movhi	r5,257
 100e200:	2942cc04 	addi	r5,r5,2864
 100e204:	100ed141 	jmpi	100ed14 <_fwalk>

0100e208 <_cleanup>:
 100e208:	008040b4 	movhi	r2,258
 100e20c:	1084a304 	addi	r2,r2,4748
 100e210:	11000017 	ldw	r4,0(r2)
 100e214:	100e1fc1 	jmpi	100e1fc <_cleanup_r>

0100e218 <__sfmoreglue>:
 100e218:	defffc04 	addi	sp,sp,-16
 100e21c:	dc400115 	stw	r17,4(sp)
 100e220:	2c401724 	muli	r17,r5,92
 100e224:	dc800215 	stw	r18,8(sp)
 100e228:	2825883a 	mov	r18,r5
 100e22c:	89400304 	addi	r5,r17,12
 100e230:	dc000015 	stw	r16,0(sp)
 100e234:	dfc00315 	stw	ra,12(sp)
 100e238:	10096f40 	call	10096f4 <_malloc_r>
 100e23c:	0021883a 	mov	r16,zero
 100e240:	880d883a 	mov	r6,r17
 100e244:	000b883a 	mov	r5,zero
 100e248:	10000626 	beq	r2,zero,100e264 <__sfmoreglue+0x4c>
 100e24c:	11000304 	addi	r4,r2,12
 100e250:	14800115 	stw	r18,4(r2)
 100e254:	10000015 	stw	zero,0(r2)
 100e258:	11000215 	stw	r4,8(r2)
 100e25c:	1021883a 	mov	r16,r2
 100e260:	100a10c0 	call	100a10c <memset>
 100e264:	8005883a 	mov	r2,r16
 100e268:	dfc00317 	ldw	ra,12(sp)
 100e26c:	dc800217 	ldw	r18,8(sp)
 100e270:	dc400117 	ldw	r17,4(sp)
 100e274:	dc000017 	ldw	r16,0(sp)
 100e278:	dec00404 	addi	sp,sp,16
 100e27c:	f800283a 	ret

0100e280 <__sfp>:
 100e280:	defffd04 	addi	sp,sp,-12
 100e284:	008040b4 	movhi	r2,258
 100e288:	1084a304 	addi	r2,r2,4748
 100e28c:	dc000015 	stw	r16,0(sp)
 100e290:	14000017 	ldw	r16,0(r2)
 100e294:	dc400115 	stw	r17,4(sp)
 100e298:	dfc00215 	stw	ra,8(sp)
 100e29c:	80800e17 	ldw	r2,56(r16)
 100e2a0:	2023883a 	mov	r17,r4
 100e2a4:	10002626 	beq	r2,zero,100e340 <__sfp+0xc0>
 100e2a8:	8400b804 	addi	r16,r16,736
 100e2ac:	80800117 	ldw	r2,4(r16)
 100e2b0:	81000217 	ldw	r4,8(r16)
 100e2b4:	10ffffc4 	addi	r3,r2,-1
 100e2b8:	18000916 	blt	r3,zero,100e2e0 <__sfp+0x60>
 100e2bc:	2080030f 	ldh	r2,12(r4)
 100e2c0:	10000b26 	beq	r2,zero,100e2f0 <__sfp+0x70>
 100e2c4:	017fffc4 	movi	r5,-1
 100e2c8:	00000206 	br	100e2d4 <__sfp+0x54>
 100e2cc:	2080030f 	ldh	r2,12(r4)
 100e2d0:	10000726 	beq	r2,zero,100e2f0 <__sfp+0x70>
 100e2d4:	18ffffc4 	addi	r3,r3,-1
 100e2d8:	21001704 	addi	r4,r4,92
 100e2dc:	197ffb1e 	bne	r3,r5,100e2cc <__sfp+0x4c>
 100e2e0:	80800017 	ldw	r2,0(r16)
 100e2e4:	10001926 	beq	r2,zero,100e34c <__sfp+0xcc>
 100e2e8:	1021883a 	mov	r16,r2
 100e2ec:	003fef06 	br	100e2ac <__sfp+0x2c>
 100e2f0:	00bfffc4 	movi	r2,-1
 100e2f4:	00c00044 	movi	r3,1
 100e2f8:	2080038d 	sth	r2,14(r4)
 100e2fc:	20c0030d 	sth	r3,12(r4)
 100e300:	20000015 	stw	zero,0(r4)
 100e304:	20000215 	stw	zero,8(r4)
 100e308:	20000115 	stw	zero,4(r4)
 100e30c:	20000415 	stw	zero,16(r4)
 100e310:	20000515 	stw	zero,20(r4)
 100e314:	20000615 	stw	zero,24(r4)
 100e318:	20000c15 	stw	zero,48(r4)
 100e31c:	20000d15 	stw	zero,52(r4)
 100e320:	20001115 	stw	zero,68(r4)
 100e324:	20001215 	stw	zero,72(r4)
 100e328:	2005883a 	mov	r2,r4
 100e32c:	dfc00217 	ldw	ra,8(sp)
 100e330:	dc400117 	ldw	r17,4(sp)
 100e334:	dc000017 	ldw	r16,0(sp)
 100e338:	dec00304 	addi	sp,sp,12
 100e33c:	f800283a 	ret
 100e340:	8009883a 	mov	r4,r16
 100e344:	100e1180 	call	100e118 <__sinit>
 100e348:	003fd706 	br	100e2a8 <__sfp+0x28>
 100e34c:	8809883a 	mov	r4,r17
 100e350:	01400104 	movi	r5,4
 100e354:	100e2180 	call	100e218 <__sfmoreglue>
 100e358:	80800015 	stw	r2,0(r16)
 100e35c:	103fe21e 	bne	r2,zero,100e2e8 <__sfp+0x68>
 100e360:	00800304 	movi	r2,12
 100e364:	0009883a 	mov	r4,zero
 100e368:	88800015 	stw	r2,0(r17)
 100e36c:	003fee06 	br	100e328 <__sfp+0xa8>

0100e370 <_malloc_trim_r>:
 100e370:	defffb04 	addi	sp,sp,-20
 100e374:	dcc00315 	stw	r19,12(sp)
 100e378:	04c040b4 	movhi	r19,258
 100e37c:	9cfdfd04 	addi	r19,r19,-2060
 100e380:	dc800215 	stw	r18,8(sp)
 100e384:	dc400115 	stw	r17,4(sp)
 100e388:	dc000015 	stw	r16,0(sp)
 100e38c:	2823883a 	mov	r17,r5
 100e390:	2025883a 	mov	r18,r4
 100e394:	dfc00415 	stw	ra,16(sp)
 100e398:	1013f780 	call	1013f78 <__malloc_lock>
 100e39c:	98800217 	ldw	r2,8(r19)
 100e3a0:	9009883a 	mov	r4,r18
 100e3a4:	000b883a 	mov	r5,zero
 100e3a8:	10c00117 	ldw	r3,4(r2)
 100e3ac:	00bfff04 	movi	r2,-4
 100e3b0:	18a0703a 	and	r16,r3,r2
 100e3b4:	8463c83a 	sub	r17,r16,r17
 100e3b8:	8c43fbc4 	addi	r17,r17,4079
 100e3bc:	8822d33a 	srli	r17,r17,12
 100e3c0:	0083ffc4 	movi	r2,4095
 100e3c4:	8c7fffc4 	addi	r17,r17,-1
 100e3c8:	8822933a 	slli	r17,r17,12
 100e3cc:	1440060e 	bge	r2,r17,100e3e8 <_malloc_trim_r+0x78>
 100e3d0:	100a21c0 	call	100a21c <_sbrk_r>
 100e3d4:	98c00217 	ldw	r3,8(r19)
 100e3d8:	9009883a 	mov	r4,r18
 100e3dc:	044bc83a 	sub	r5,zero,r17
 100e3e0:	80c7883a 	add	r3,r16,r3
 100e3e4:	10c00926 	beq	r2,r3,100e40c <_malloc_trim_r+0x9c>
 100e3e8:	10140800 	call	1014080 <__malloc_unlock>
 100e3ec:	0005883a 	mov	r2,zero
 100e3f0:	dfc00417 	ldw	ra,16(sp)
 100e3f4:	dcc00317 	ldw	r19,12(sp)
 100e3f8:	dc800217 	ldw	r18,8(sp)
 100e3fc:	dc400117 	ldw	r17,4(sp)
 100e400:	dc000017 	ldw	r16,0(sp)
 100e404:	dec00504 	addi	sp,sp,20
 100e408:	f800283a 	ret
 100e40c:	9009883a 	mov	r4,r18
 100e410:	100a21c0 	call	100a21c <_sbrk_r>
 100e414:	844dc83a 	sub	r6,r16,r17
 100e418:	00ffffc4 	movi	r3,-1
 100e41c:	9009883a 	mov	r4,r18
 100e420:	000b883a 	mov	r5,zero
 100e424:	01c040b4 	movhi	r7,258
 100e428:	39ddd304 	addi	r7,r7,30540
 100e42c:	31800054 	ori	r6,r6,1
 100e430:	10c00926 	beq	r2,r3,100e458 <_malloc_trim_r+0xe8>
 100e434:	38800017 	ldw	r2,0(r7)
 100e438:	98c00217 	ldw	r3,8(r19)
 100e43c:	9009883a 	mov	r4,r18
 100e440:	1445c83a 	sub	r2,r2,r17
 100e444:	38800015 	stw	r2,0(r7)
 100e448:	19800115 	stw	r6,4(r3)
 100e44c:	10140800 	call	1014080 <__malloc_unlock>
 100e450:	00800044 	movi	r2,1
 100e454:	003fe606 	br	100e3f0 <_malloc_trim_r+0x80>
 100e458:	100a21c0 	call	100a21c <_sbrk_r>
 100e45c:	99800217 	ldw	r6,8(r19)
 100e460:	100f883a 	mov	r7,r2
 100e464:	9009883a 	mov	r4,r18
 100e468:	1187c83a 	sub	r3,r2,r6
 100e46c:	008003c4 	movi	r2,15
 100e470:	19400054 	ori	r5,r3,1
 100e474:	10ffdc0e 	bge	r2,r3,100e3e8 <_malloc_trim_r+0x78>
 100e478:	008040b4 	movhi	r2,258
 100e47c:	1084a104 	addi	r2,r2,4740
 100e480:	10c00017 	ldw	r3,0(r2)
 100e484:	008040b4 	movhi	r2,258
 100e488:	109dd304 	addi	r2,r2,30540
 100e48c:	31400115 	stw	r5,4(r6)
 100e490:	38c7c83a 	sub	r3,r7,r3
 100e494:	10c00015 	stw	r3,0(r2)
 100e498:	003fd306 	br	100e3e8 <_malloc_trim_r+0x78>

0100e49c <_free_r>:
 100e49c:	defffd04 	addi	sp,sp,-12
 100e4a0:	dc400115 	stw	r17,4(sp)
 100e4a4:	dc000015 	stw	r16,0(sp)
 100e4a8:	dfc00215 	stw	ra,8(sp)
 100e4ac:	2821883a 	mov	r16,r5
 100e4b0:	2023883a 	mov	r17,r4
 100e4b4:	28005a26 	beq	r5,zero,100e620 <_free_r+0x184>
 100e4b8:	1013f780 	call	1013f78 <__malloc_lock>
 100e4bc:	823ffe04 	addi	r8,r16,-8
 100e4c0:	41400117 	ldw	r5,4(r8)
 100e4c4:	00bfff84 	movi	r2,-2
 100e4c8:	028040b4 	movhi	r10,258
 100e4cc:	52bdfd04 	addi	r10,r10,-2060
 100e4d0:	288e703a 	and	r7,r5,r2
 100e4d4:	41cd883a 	add	r6,r8,r7
 100e4d8:	30c00117 	ldw	r3,4(r6)
 100e4dc:	51000217 	ldw	r4,8(r10)
 100e4e0:	00bfff04 	movi	r2,-4
 100e4e4:	1892703a 	and	r9,r3,r2
 100e4e8:	5017883a 	mov	r11,r10
 100e4ec:	31006726 	beq	r6,r4,100e68c <_free_r+0x1f0>
 100e4f0:	2880004c 	andi	r2,r5,1
 100e4f4:	1005003a 	cmpeq	r2,r2,zero
 100e4f8:	32400115 	stw	r9,4(r6)
 100e4fc:	10001a1e 	bne	r2,zero,100e568 <_free_r+0xcc>
 100e500:	000b883a 	mov	r5,zero
 100e504:	3247883a 	add	r3,r6,r9
 100e508:	18800117 	ldw	r2,4(r3)
 100e50c:	1080004c 	andi	r2,r2,1
 100e510:	1000231e 	bne	r2,zero,100e5a0 <_free_r+0x104>
 100e514:	280ac03a 	cmpne	r5,r5,zero
 100e518:	3a4f883a 	add	r7,r7,r9
 100e51c:	2800451e 	bne	r5,zero,100e634 <_free_r+0x198>
 100e520:	31000217 	ldw	r4,8(r6)
 100e524:	008040b4 	movhi	r2,258
 100e528:	10bdff04 	addi	r2,r2,-2052
 100e52c:	20807b26 	beq	r4,r2,100e71c <_free_r+0x280>
 100e530:	30800317 	ldw	r2,12(r6)
 100e534:	3a07883a 	add	r3,r7,r8
 100e538:	19c00015 	stw	r7,0(r3)
 100e53c:	11000215 	stw	r4,8(r2)
 100e540:	20800315 	stw	r2,12(r4)
 100e544:	38800054 	ori	r2,r7,1
 100e548:	40800115 	stw	r2,4(r8)
 100e54c:	28001a26 	beq	r5,zero,100e5b8 <_free_r+0x11c>
 100e550:	8809883a 	mov	r4,r17
 100e554:	dfc00217 	ldw	ra,8(sp)
 100e558:	dc400117 	ldw	r17,4(sp)
 100e55c:	dc000017 	ldw	r16,0(sp)
 100e560:	dec00304 	addi	sp,sp,12
 100e564:	10140801 	jmpi	1014080 <__malloc_unlock>
 100e568:	80bffe17 	ldw	r2,-8(r16)
 100e56c:	50c00204 	addi	r3,r10,8
 100e570:	4091c83a 	sub	r8,r8,r2
 100e574:	41000217 	ldw	r4,8(r8)
 100e578:	388f883a 	add	r7,r7,r2
 100e57c:	20c06126 	beq	r4,r3,100e704 <_free_r+0x268>
 100e580:	40800317 	ldw	r2,12(r8)
 100e584:	3247883a 	add	r3,r6,r9
 100e588:	000b883a 	mov	r5,zero
 100e58c:	11000215 	stw	r4,8(r2)
 100e590:	20800315 	stw	r2,12(r4)
 100e594:	18800117 	ldw	r2,4(r3)
 100e598:	1080004c 	andi	r2,r2,1
 100e59c:	103fdd26 	beq	r2,zero,100e514 <_free_r+0x78>
 100e5a0:	38800054 	ori	r2,r7,1
 100e5a4:	3a07883a 	add	r3,r7,r8
 100e5a8:	280ac03a 	cmpne	r5,r5,zero
 100e5ac:	40800115 	stw	r2,4(r8)
 100e5b0:	19c00015 	stw	r7,0(r3)
 100e5b4:	283fe61e 	bne	r5,zero,100e550 <_free_r+0xb4>
 100e5b8:	00807fc4 	movi	r2,511
 100e5bc:	11c01f2e 	bgeu	r2,r7,100e63c <_free_r+0x1a0>
 100e5c0:	3806d27a 	srli	r3,r7,9
 100e5c4:	1800481e 	bne	r3,zero,100e6e8 <_free_r+0x24c>
 100e5c8:	3804d0fa 	srli	r2,r7,3
 100e5cc:	100690fa 	slli	r3,r2,3
 100e5d0:	1acd883a 	add	r6,r3,r11
 100e5d4:	31400217 	ldw	r5,8(r6)
 100e5d8:	31405926 	beq	r6,r5,100e740 <_free_r+0x2a4>
 100e5dc:	28800117 	ldw	r2,4(r5)
 100e5e0:	00ffff04 	movi	r3,-4
 100e5e4:	10c4703a 	and	r2,r2,r3
 100e5e8:	3880022e 	bgeu	r7,r2,100e5f4 <_free_r+0x158>
 100e5ec:	29400217 	ldw	r5,8(r5)
 100e5f0:	317ffa1e 	bne	r6,r5,100e5dc <_free_r+0x140>
 100e5f4:	29800317 	ldw	r6,12(r5)
 100e5f8:	41800315 	stw	r6,12(r8)
 100e5fc:	41400215 	stw	r5,8(r8)
 100e600:	8809883a 	mov	r4,r17
 100e604:	2a000315 	stw	r8,12(r5)
 100e608:	32000215 	stw	r8,8(r6)
 100e60c:	dfc00217 	ldw	ra,8(sp)
 100e610:	dc400117 	ldw	r17,4(sp)
 100e614:	dc000017 	ldw	r16,0(sp)
 100e618:	dec00304 	addi	sp,sp,12
 100e61c:	10140801 	jmpi	1014080 <__malloc_unlock>
 100e620:	dfc00217 	ldw	ra,8(sp)
 100e624:	dc400117 	ldw	r17,4(sp)
 100e628:	dc000017 	ldw	r16,0(sp)
 100e62c:	dec00304 	addi	sp,sp,12
 100e630:	f800283a 	ret
 100e634:	31000217 	ldw	r4,8(r6)
 100e638:	003fbd06 	br	100e530 <_free_r+0x94>
 100e63c:	3806d0fa 	srli	r3,r7,3
 100e640:	00800044 	movi	r2,1
 100e644:	51400117 	ldw	r5,4(r10)
 100e648:	180890fa 	slli	r4,r3,3
 100e64c:	1807d0ba 	srai	r3,r3,2
 100e650:	22c9883a 	add	r4,r4,r11
 100e654:	21800217 	ldw	r6,8(r4)
 100e658:	10c4983a 	sll	r2,r2,r3
 100e65c:	41000315 	stw	r4,12(r8)
 100e660:	41800215 	stw	r6,8(r8)
 100e664:	288ab03a 	or	r5,r5,r2
 100e668:	22000215 	stw	r8,8(r4)
 100e66c:	8809883a 	mov	r4,r17
 100e670:	51400115 	stw	r5,4(r10)
 100e674:	32000315 	stw	r8,12(r6)
 100e678:	dfc00217 	ldw	ra,8(sp)
 100e67c:	dc400117 	ldw	r17,4(sp)
 100e680:	dc000017 	ldw	r16,0(sp)
 100e684:	dec00304 	addi	sp,sp,12
 100e688:	10140801 	jmpi	1014080 <__malloc_unlock>
 100e68c:	2880004c 	andi	r2,r5,1
 100e690:	3a4d883a 	add	r6,r7,r9
 100e694:	1000071e 	bne	r2,zero,100e6b4 <_free_r+0x218>
 100e698:	80bffe17 	ldw	r2,-8(r16)
 100e69c:	4091c83a 	sub	r8,r8,r2
 100e6a0:	41000317 	ldw	r4,12(r8)
 100e6a4:	40c00217 	ldw	r3,8(r8)
 100e6a8:	308d883a 	add	r6,r6,r2
 100e6ac:	20c00215 	stw	r3,8(r4)
 100e6b0:	19000315 	stw	r4,12(r3)
 100e6b4:	008040b4 	movhi	r2,258
 100e6b8:	1084a004 	addi	r2,r2,4736
 100e6bc:	11000017 	ldw	r4,0(r2)
 100e6c0:	30c00054 	ori	r3,r6,1
 100e6c4:	52000215 	stw	r8,8(r10)
 100e6c8:	40c00115 	stw	r3,4(r8)
 100e6cc:	313fa036 	bltu	r6,r4,100e550 <_free_r+0xb4>
 100e6d0:	008040b4 	movhi	r2,258
 100e6d4:	108ba904 	addi	r2,r2,11940
 100e6d8:	11400017 	ldw	r5,0(r2)
 100e6dc:	8809883a 	mov	r4,r17
 100e6e0:	100e3700 	call	100e370 <_malloc_trim_r>
 100e6e4:	003f9a06 	br	100e550 <_free_r+0xb4>
 100e6e8:	00800104 	movi	r2,4
 100e6ec:	10c0072e 	bgeu	r2,r3,100e70c <_free_r+0x270>
 100e6f0:	00800504 	movi	r2,20
 100e6f4:	10c01936 	bltu	r2,r3,100e75c <_free_r+0x2c0>
 100e6f8:	188016c4 	addi	r2,r3,91
 100e6fc:	100690fa 	slli	r3,r2,3
 100e700:	003fb306 	br	100e5d0 <_free_r+0x134>
 100e704:	01400044 	movi	r5,1
 100e708:	003f7e06 	br	100e504 <_free_r+0x68>
 100e70c:	3804d1ba 	srli	r2,r7,6
 100e710:	10800e04 	addi	r2,r2,56
 100e714:	100690fa 	slli	r3,r2,3
 100e718:	003fad06 	br	100e5d0 <_free_r+0x134>
 100e71c:	22000315 	stw	r8,12(r4)
 100e720:	22000215 	stw	r8,8(r4)
 100e724:	3a05883a 	add	r2,r7,r8
 100e728:	38c00054 	ori	r3,r7,1
 100e72c:	11c00015 	stw	r7,0(r2)
 100e730:	41000215 	stw	r4,8(r8)
 100e734:	40c00115 	stw	r3,4(r8)
 100e738:	41000315 	stw	r4,12(r8)
 100e73c:	003f8406 	br	100e550 <_free_r+0xb4>
 100e740:	1005d0ba 	srai	r2,r2,2
 100e744:	00c00044 	movi	r3,1
 100e748:	51000117 	ldw	r4,4(r10)
 100e74c:	1886983a 	sll	r3,r3,r2
 100e750:	20c8b03a 	or	r4,r4,r3
 100e754:	51000115 	stw	r4,4(r10)
 100e758:	003fa706 	br	100e5f8 <_free_r+0x15c>
 100e75c:	00801504 	movi	r2,84
 100e760:	10c00436 	bltu	r2,r3,100e774 <_free_r+0x2d8>
 100e764:	3804d33a 	srli	r2,r7,12
 100e768:	10801b84 	addi	r2,r2,110
 100e76c:	100690fa 	slli	r3,r2,3
 100e770:	003f9706 	br	100e5d0 <_free_r+0x134>
 100e774:	00805504 	movi	r2,340
 100e778:	10c00436 	bltu	r2,r3,100e78c <_free_r+0x2f0>
 100e77c:	3804d3fa 	srli	r2,r7,15
 100e780:	10801dc4 	addi	r2,r2,119
 100e784:	100690fa 	slli	r3,r2,3
 100e788:	003f9106 	br	100e5d0 <_free_r+0x134>
 100e78c:	00815504 	movi	r2,1364
 100e790:	10c0032e 	bgeu	r2,r3,100e7a0 <_free_r+0x304>
 100e794:	00801f84 	movi	r2,126
 100e798:	00c0fc04 	movi	r3,1008
 100e79c:	003f8c06 	br	100e5d0 <_free_r+0x134>
 100e7a0:	3804d4ba 	srli	r2,r7,18
 100e7a4:	10801f04 	addi	r2,r2,124
 100e7a8:	100690fa 	slli	r3,r2,3
 100e7ac:	003f8806 	br	100e5d0 <_free_r+0x134>

0100e7b0 <__sfvwrite_r>:
 100e7b0:	30800217 	ldw	r2,8(r6)
 100e7b4:	defff504 	addi	sp,sp,-44
 100e7b8:	df000915 	stw	fp,36(sp)
 100e7bc:	dd800715 	stw	r22,28(sp)
 100e7c0:	dc800315 	stw	r18,12(sp)
 100e7c4:	dfc00a15 	stw	ra,40(sp)
 100e7c8:	ddc00815 	stw	r23,32(sp)
 100e7cc:	dd400615 	stw	r21,24(sp)
 100e7d0:	dd000515 	stw	r20,20(sp)
 100e7d4:	dcc00415 	stw	r19,16(sp)
 100e7d8:	dc400215 	stw	r17,8(sp)
 100e7dc:	dc000115 	stw	r16,4(sp)
 100e7e0:	302d883a 	mov	r22,r6
 100e7e4:	2039883a 	mov	fp,r4
 100e7e8:	2825883a 	mov	r18,r5
 100e7ec:	10001c26 	beq	r2,zero,100e860 <__sfvwrite_r+0xb0>
 100e7f0:	29c0030b 	ldhu	r7,12(r5)
 100e7f4:	3880020c 	andi	r2,r7,8
 100e7f8:	10002726 	beq	r2,zero,100e898 <__sfvwrite_r+0xe8>
 100e7fc:	28800417 	ldw	r2,16(r5)
 100e800:	10002526 	beq	r2,zero,100e898 <__sfvwrite_r+0xe8>
 100e804:	3880008c 	andi	r2,r7,2
 100e808:	b5400017 	ldw	r21,0(r22)
 100e80c:	10002826 	beq	r2,zero,100e8b0 <__sfvwrite_r+0x100>
 100e810:	0021883a 	mov	r16,zero
 100e814:	0023883a 	mov	r17,zero
 100e818:	880d883a 	mov	r6,r17
 100e81c:	e009883a 	mov	r4,fp
 100e820:	00810004 	movi	r2,1024
 100e824:	80006e26 	beq	r16,zero,100e9e0 <__sfvwrite_r+0x230>
 100e828:	800f883a 	mov	r7,r16
 100e82c:	91400717 	ldw	r5,28(r18)
 100e830:	1400012e 	bgeu	r2,r16,100e838 <__sfvwrite_r+0x88>
 100e834:	100f883a 	mov	r7,r2
 100e838:	90c00917 	ldw	r3,36(r18)
 100e83c:	183ee83a 	callr	r3
 100e840:	1007883a 	mov	r3,r2
 100e844:	80a1c83a 	sub	r16,r16,r2
 100e848:	88a3883a 	add	r17,r17,r2
 100e84c:	00806d0e 	bge	zero,r2,100ea04 <__sfvwrite_r+0x254>
 100e850:	b0800217 	ldw	r2,8(r22)
 100e854:	10c5c83a 	sub	r2,r2,r3
 100e858:	b0800215 	stw	r2,8(r22)
 100e85c:	103fee1e 	bne	r2,zero,100e818 <__sfvwrite_r+0x68>
 100e860:	0009883a 	mov	r4,zero
 100e864:	2005883a 	mov	r2,r4
 100e868:	dfc00a17 	ldw	ra,40(sp)
 100e86c:	df000917 	ldw	fp,36(sp)
 100e870:	ddc00817 	ldw	r23,32(sp)
 100e874:	dd800717 	ldw	r22,28(sp)
 100e878:	dd400617 	ldw	r21,24(sp)
 100e87c:	dd000517 	ldw	r20,20(sp)
 100e880:	dcc00417 	ldw	r19,16(sp)
 100e884:	dc800317 	ldw	r18,12(sp)
 100e888:	dc400217 	ldw	r17,8(sp)
 100e88c:	dc000117 	ldw	r16,4(sp)
 100e890:	dec00b04 	addi	sp,sp,44
 100e894:	f800283a 	ret
 100e898:	100c5780 	call	100c578 <__swsetup_r>
 100e89c:	1000e41e 	bne	r2,zero,100ec30 <__sfvwrite_r+0x480>
 100e8a0:	91c0030b 	ldhu	r7,12(r18)
 100e8a4:	b5400017 	ldw	r21,0(r22)
 100e8a8:	3880008c 	andi	r2,r7,2
 100e8ac:	103fd81e 	bne	r2,zero,100e810 <__sfvwrite_r+0x60>
 100e8b0:	3880004c 	andi	r2,r7,1
 100e8b4:	1005003a 	cmpeq	r2,r2,zero
 100e8b8:	10005726 	beq	r2,zero,100ea18 <__sfvwrite_r+0x268>
 100e8bc:	0029883a 	mov	r20,zero
 100e8c0:	002f883a 	mov	r23,zero
 100e8c4:	a0004226 	beq	r20,zero,100e9d0 <__sfvwrite_r+0x220>
 100e8c8:	3880800c 	andi	r2,r7,512
 100e8cc:	94000217 	ldw	r16,8(r18)
 100e8d0:	10008b26 	beq	r2,zero,100eb00 <__sfvwrite_r+0x350>
 100e8d4:	800d883a 	mov	r6,r16
 100e8d8:	a400a536 	bltu	r20,r16,100eb70 <__sfvwrite_r+0x3c0>
 100e8dc:	3881200c 	andi	r2,r7,1152
 100e8e0:	10002726 	beq	r2,zero,100e980 <__sfvwrite_r+0x1d0>
 100e8e4:	90800517 	ldw	r2,20(r18)
 100e8e8:	92000417 	ldw	r8,16(r18)
 100e8ec:	91400017 	ldw	r5,0(r18)
 100e8f0:	1087883a 	add	r3,r2,r2
 100e8f4:	1887883a 	add	r3,r3,r2
 100e8f8:	1808d7fa 	srli	r4,r3,31
 100e8fc:	2a21c83a 	sub	r16,r5,r8
 100e900:	80800044 	addi	r2,r16,1
 100e904:	20c9883a 	add	r4,r4,r3
 100e908:	2027d07a 	srai	r19,r4,1
 100e90c:	a085883a 	add	r2,r20,r2
 100e910:	980d883a 	mov	r6,r19
 100e914:	9880022e 	bgeu	r19,r2,100e920 <__sfvwrite_r+0x170>
 100e918:	1027883a 	mov	r19,r2
 100e91c:	100d883a 	mov	r6,r2
 100e920:	3881000c 	andi	r2,r7,1024
 100e924:	1000b826 	beq	r2,zero,100ec08 <__sfvwrite_r+0x458>
 100e928:	300b883a 	mov	r5,r6
 100e92c:	e009883a 	mov	r4,fp
 100e930:	10096f40 	call	10096f4 <_malloc_r>
 100e934:	10003126 	beq	r2,zero,100e9fc <__sfvwrite_r+0x24c>
 100e938:	91400417 	ldw	r5,16(r18)
 100e93c:	1009883a 	mov	r4,r2
 100e940:	800d883a 	mov	r6,r16
 100e944:	1023883a 	mov	r17,r2
 100e948:	1009f8c0 	call	1009f8c <memcpy>
 100e94c:	90c0030b 	ldhu	r3,12(r18)
 100e950:	00beffc4 	movi	r2,-1025
 100e954:	1886703a 	and	r3,r3,r2
 100e958:	18c02014 	ori	r3,r3,128
 100e95c:	90c0030d 	sth	r3,12(r18)
 100e960:	9c07c83a 	sub	r3,r19,r16
 100e964:	8c05883a 	add	r2,r17,r16
 100e968:	a00d883a 	mov	r6,r20
 100e96c:	a021883a 	mov	r16,r20
 100e970:	90800015 	stw	r2,0(r18)
 100e974:	90c00215 	stw	r3,8(r18)
 100e978:	94400415 	stw	r17,16(r18)
 100e97c:	94c00515 	stw	r19,20(r18)
 100e980:	91000017 	ldw	r4,0(r18)
 100e984:	b80b883a 	mov	r5,r23
 100e988:	a023883a 	mov	r17,r20
 100e98c:	100a02c0 	call	100a02c <memmove>
 100e990:	90c00217 	ldw	r3,8(r18)
 100e994:	90800017 	ldw	r2,0(r18)
 100e998:	a027883a 	mov	r19,r20
 100e99c:	1c07c83a 	sub	r3,r3,r16
 100e9a0:	1405883a 	add	r2,r2,r16
 100e9a4:	90c00215 	stw	r3,8(r18)
 100e9a8:	a021883a 	mov	r16,r20
 100e9ac:	90800015 	stw	r2,0(r18)
 100e9b0:	b0800217 	ldw	r2,8(r22)
 100e9b4:	1405c83a 	sub	r2,r2,r16
 100e9b8:	b0800215 	stw	r2,8(r22)
 100e9bc:	103fa826 	beq	r2,zero,100e860 <__sfvwrite_r+0xb0>
 100e9c0:	a469c83a 	sub	r20,r20,r17
 100e9c4:	91c0030b 	ldhu	r7,12(r18)
 100e9c8:	bcef883a 	add	r23,r23,r19
 100e9cc:	a03fbe1e 	bne	r20,zero,100e8c8 <__sfvwrite_r+0x118>
 100e9d0:	adc00017 	ldw	r23,0(r21)
 100e9d4:	ad000117 	ldw	r20,4(r21)
 100e9d8:	ad400204 	addi	r21,r21,8
 100e9dc:	003fb906 	br	100e8c4 <__sfvwrite_r+0x114>
 100e9e0:	ac400017 	ldw	r17,0(r21)
 100e9e4:	ac000117 	ldw	r16,4(r21)
 100e9e8:	ad400204 	addi	r21,r21,8
 100e9ec:	003f8a06 	br	100e818 <__sfvwrite_r+0x68>
 100e9f0:	91400417 	ldw	r5,16(r18)
 100e9f4:	e009883a 	mov	r4,fp
 100e9f8:	100e49c0 	call	100e49c <_free_r>
 100e9fc:	00800304 	movi	r2,12
 100ea00:	e0800015 	stw	r2,0(fp)
 100ea04:	9080030b 	ldhu	r2,12(r18)
 100ea08:	013fffc4 	movi	r4,-1
 100ea0c:	10801014 	ori	r2,r2,64
 100ea10:	9080030d 	sth	r2,12(r18)
 100ea14:	003f9306 	br	100e864 <__sfvwrite_r+0xb4>
 100ea18:	0027883a 	mov	r19,zero
 100ea1c:	002f883a 	mov	r23,zero
 100ea20:	d8000015 	stw	zero,0(sp)
 100ea24:	0029883a 	mov	r20,zero
 100ea28:	98001e26 	beq	r19,zero,100eaa4 <__sfvwrite_r+0x2f4>
 100ea2c:	d8c00017 	ldw	r3,0(sp)
 100ea30:	1804c03a 	cmpne	r2,r3,zero
 100ea34:	10005e26 	beq	r2,zero,100ebb0 <__sfvwrite_r+0x400>
 100ea38:	9821883a 	mov	r16,r19
 100ea3c:	a4c0012e 	bgeu	r20,r19,100ea44 <__sfvwrite_r+0x294>
 100ea40:	a021883a 	mov	r16,r20
 100ea44:	91000017 	ldw	r4,0(r18)
 100ea48:	90800417 	ldw	r2,16(r18)
 100ea4c:	91800217 	ldw	r6,8(r18)
 100ea50:	91c00517 	ldw	r7,20(r18)
 100ea54:	1100022e 	bgeu	r2,r4,100ea60 <__sfvwrite_r+0x2b0>
 100ea58:	31e3883a 	add	r17,r6,r7
 100ea5c:	8c001616 	blt	r17,r16,100eab8 <__sfvwrite_r+0x308>
 100ea60:	81c03816 	blt	r16,r7,100eb44 <__sfvwrite_r+0x394>
 100ea64:	90c00917 	ldw	r3,36(r18)
 100ea68:	91400717 	ldw	r5,28(r18)
 100ea6c:	e009883a 	mov	r4,fp
 100ea70:	b80d883a 	mov	r6,r23
 100ea74:	183ee83a 	callr	r3
 100ea78:	1023883a 	mov	r17,r2
 100ea7c:	00bfe10e 	bge	zero,r2,100ea04 <__sfvwrite_r+0x254>
 100ea80:	a469c83a 	sub	r20,r20,r17
 100ea84:	a0001826 	beq	r20,zero,100eae8 <__sfvwrite_r+0x338>
 100ea88:	b0800217 	ldw	r2,8(r22)
 100ea8c:	1445c83a 	sub	r2,r2,r17
 100ea90:	b0800215 	stw	r2,8(r22)
 100ea94:	103f7226 	beq	r2,zero,100e860 <__sfvwrite_r+0xb0>
 100ea98:	9c67c83a 	sub	r19,r19,r17
 100ea9c:	bc6f883a 	add	r23,r23,r17
 100eaa0:	983fe21e 	bne	r19,zero,100ea2c <__sfvwrite_r+0x27c>
 100eaa4:	adc00017 	ldw	r23,0(r21)
 100eaa8:	acc00117 	ldw	r19,4(r21)
 100eaac:	ad400204 	addi	r21,r21,8
 100eab0:	d8000015 	stw	zero,0(sp)
 100eab4:	003fdc06 	br	100ea28 <__sfvwrite_r+0x278>
 100eab8:	b80b883a 	mov	r5,r23
 100eabc:	880d883a 	mov	r6,r17
 100eac0:	100a02c0 	call	100a02c <memmove>
 100eac4:	90c00017 	ldw	r3,0(r18)
 100eac8:	e009883a 	mov	r4,fp
 100eacc:	900b883a 	mov	r5,r18
 100ead0:	1c47883a 	add	r3,r3,r17
 100ead4:	90c00015 	stw	r3,0(r18)
 100ead8:	100de800 	call	100de80 <_fflush_r>
 100eadc:	103fc91e 	bne	r2,zero,100ea04 <__sfvwrite_r+0x254>
 100eae0:	a469c83a 	sub	r20,r20,r17
 100eae4:	a03fe81e 	bne	r20,zero,100ea88 <__sfvwrite_r+0x2d8>
 100eae8:	e009883a 	mov	r4,fp
 100eaec:	900b883a 	mov	r5,r18
 100eaf0:	100de800 	call	100de80 <_fflush_r>
 100eaf4:	103fc31e 	bne	r2,zero,100ea04 <__sfvwrite_r+0x254>
 100eaf8:	d8000015 	stw	zero,0(sp)
 100eafc:	003fe206 	br	100ea88 <__sfvwrite_r+0x2d8>
 100eb00:	91000017 	ldw	r4,0(r18)
 100eb04:	90800417 	ldw	r2,16(r18)
 100eb08:	1100022e 	bgeu	r2,r4,100eb14 <__sfvwrite_r+0x364>
 100eb0c:	8023883a 	mov	r17,r16
 100eb10:	85003136 	bltu	r16,r20,100ebd8 <__sfvwrite_r+0x428>
 100eb14:	91c00517 	ldw	r7,20(r18)
 100eb18:	a1c01836 	bltu	r20,r7,100eb7c <__sfvwrite_r+0x3cc>
 100eb1c:	90c00917 	ldw	r3,36(r18)
 100eb20:	91400717 	ldw	r5,28(r18)
 100eb24:	e009883a 	mov	r4,fp
 100eb28:	b80d883a 	mov	r6,r23
 100eb2c:	183ee83a 	callr	r3
 100eb30:	1021883a 	mov	r16,r2
 100eb34:	00bfb30e 	bge	zero,r2,100ea04 <__sfvwrite_r+0x254>
 100eb38:	1023883a 	mov	r17,r2
 100eb3c:	1027883a 	mov	r19,r2
 100eb40:	003f9b06 	br	100e9b0 <__sfvwrite_r+0x200>
 100eb44:	b80b883a 	mov	r5,r23
 100eb48:	800d883a 	mov	r6,r16
 100eb4c:	100a02c0 	call	100a02c <memmove>
 100eb50:	90c00217 	ldw	r3,8(r18)
 100eb54:	90800017 	ldw	r2,0(r18)
 100eb58:	8023883a 	mov	r17,r16
 100eb5c:	1c07c83a 	sub	r3,r3,r16
 100eb60:	1405883a 	add	r2,r2,r16
 100eb64:	90c00215 	stw	r3,8(r18)
 100eb68:	90800015 	stw	r2,0(r18)
 100eb6c:	003fc406 	br	100ea80 <__sfvwrite_r+0x2d0>
 100eb70:	a00d883a 	mov	r6,r20
 100eb74:	a021883a 	mov	r16,r20
 100eb78:	003f8106 	br	100e980 <__sfvwrite_r+0x1d0>
 100eb7c:	b80b883a 	mov	r5,r23
 100eb80:	a00d883a 	mov	r6,r20
 100eb84:	100a02c0 	call	100a02c <memmove>
 100eb88:	90c00217 	ldw	r3,8(r18)
 100eb8c:	90800017 	ldw	r2,0(r18)
 100eb90:	a021883a 	mov	r16,r20
 100eb94:	1d07c83a 	sub	r3,r3,r20
 100eb98:	1505883a 	add	r2,r2,r20
 100eb9c:	a023883a 	mov	r17,r20
 100eba0:	a027883a 	mov	r19,r20
 100eba4:	90c00215 	stw	r3,8(r18)
 100eba8:	90800015 	stw	r2,0(r18)
 100ebac:	003f8006 	br	100e9b0 <__sfvwrite_r+0x200>
 100ebb0:	b809883a 	mov	r4,r23
 100ebb4:	01400284 	movi	r5,10
 100ebb8:	980d883a 	mov	r6,r19
 100ebbc:	1009e340 	call	1009e34 <memchr>
 100ebc0:	10001726 	beq	r2,zero,100ec20 <__sfvwrite_r+0x470>
 100ebc4:	15c5c83a 	sub	r2,r2,r23
 100ebc8:	15000044 	addi	r20,r2,1
 100ebcc:	00800044 	movi	r2,1
 100ebd0:	d8800015 	stw	r2,0(sp)
 100ebd4:	003f9806 	br	100ea38 <__sfvwrite_r+0x288>
 100ebd8:	b80b883a 	mov	r5,r23
 100ebdc:	800d883a 	mov	r6,r16
 100ebe0:	100a02c0 	call	100a02c <memmove>
 100ebe4:	90c00017 	ldw	r3,0(r18)
 100ebe8:	e009883a 	mov	r4,fp
 100ebec:	900b883a 	mov	r5,r18
 100ebf0:	1c07883a 	add	r3,r3,r16
 100ebf4:	90c00015 	stw	r3,0(r18)
 100ebf8:	8027883a 	mov	r19,r16
 100ebfc:	100de800 	call	100de80 <_fflush_r>
 100ec00:	103f6b26 	beq	r2,zero,100e9b0 <__sfvwrite_r+0x200>
 100ec04:	003f7f06 	br	100ea04 <__sfvwrite_r+0x254>
 100ec08:	400b883a 	mov	r5,r8
 100ec0c:	e009883a 	mov	r4,fp
 100ec10:	10100180 	call	1010018 <_realloc_r>
 100ec14:	103f7626 	beq	r2,zero,100e9f0 <__sfvwrite_r+0x240>
 100ec18:	1023883a 	mov	r17,r2
 100ec1c:	003f5006 	br	100e960 <__sfvwrite_r+0x1b0>
 100ec20:	00c00044 	movi	r3,1
 100ec24:	9d000044 	addi	r20,r19,1
 100ec28:	d8c00015 	stw	r3,0(sp)
 100ec2c:	003f8206 	br	100ea38 <__sfvwrite_r+0x288>
 100ec30:	9080030b 	ldhu	r2,12(r18)
 100ec34:	00c00244 	movi	r3,9
 100ec38:	013fffc4 	movi	r4,-1
 100ec3c:	10801014 	ori	r2,r2,64
 100ec40:	9080030d 	sth	r2,12(r18)
 100ec44:	e0c00015 	stw	r3,0(fp)
 100ec48:	003f0606 	br	100e864 <__sfvwrite_r+0xb4>

0100ec4c <_fwalk_reent>:
 100ec4c:	defff704 	addi	sp,sp,-36
 100ec50:	dcc00315 	stw	r19,12(sp)
 100ec54:	24c0b804 	addi	r19,r4,736
 100ec58:	dd800615 	stw	r22,24(sp)
 100ec5c:	dd400515 	stw	r21,20(sp)
 100ec60:	dfc00815 	stw	ra,32(sp)
 100ec64:	ddc00715 	stw	r23,28(sp)
 100ec68:	dd000415 	stw	r20,16(sp)
 100ec6c:	dc800215 	stw	r18,8(sp)
 100ec70:	dc400115 	stw	r17,4(sp)
 100ec74:	dc000015 	stw	r16,0(sp)
 100ec78:	202b883a 	mov	r21,r4
 100ec7c:	282d883a 	mov	r22,r5
 100ec80:	100e1080 	call	100e108 <__sfp_lock_acquire>
 100ec84:	98002126 	beq	r19,zero,100ed0c <_fwalk_reent+0xc0>
 100ec88:	002f883a 	mov	r23,zero
 100ec8c:	9c800117 	ldw	r18,4(r19)
 100ec90:	9c000217 	ldw	r16,8(r19)
 100ec94:	90bfffc4 	addi	r2,r18,-1
 100ec98:	10000d16 	blt	r2,zero,100ecd0 <_fwalk_reent+0x84>
 100ec9c:	0023883a 	mov	r17,zero
 100eca0:	053fffc4 	movi	r20,-1
 100eca4:	8080030f 	ldh	r2,12(r16)
 100eca8:	8c400044 	addi	r17,r17,1
 100ecac:	10000626 	beq	r2,zero,100ecc8 <_fwalk_reent+0x7c>
 100ecb0:	8080038f 	ldh	r2,14(r16)
 100ecb4:	800b883a 	mov	r5,r16
 100ecb8:	a809883a 	mov	r4,r21
 100ecbc:	15000226 	beq	r2,r20,100ecc8 <_fwalk_reent+0x7c>
 100ecc0:	b03ee83a 	callr	r22
 100ecc4:	b8aeb03a 	or	r23,r23,r2
 100ecc8:	84001704 	addi	r16,r16,92
 100eccc:	947ff51e 	bne	r18,r17,100eca4 <_fwalk_reent+0x58>
 100ecd0:	9cc00017 	ldw	r19,0(r19)
 100ecd4:	983fed1e 	bne	r19,zero,100ec8c <_fwalk_reent+0x40>
 100ecd8:	100e10c0 	call	100e10c <__sfp_lock_release>
 100ecdc:	b805883a 	mov	r2,r23
 100ece0:	dfc00817 	ldw	ra,32(sp)
 100ece4:	ddc00717 	ldw	r23,28(sp)
 100ece8:	dd800617 	ldw	r22,24(sp)
 100ecec:	dd400517 	ldw	r21,20(sp)
 100ecf0:	dd000417 	ldw	r20,16(sp)
 100ecf4:	dcc00317 	ldw	r19,12(sp)
 100ecf8:	dc800217 	ldw	r18,8(sp)
 100ecfc:	dc400117 	ldw	r17,4(sp)
 100ed00:	dc000017 	ldw	r16,0(sp)
 100ed04:	dec00904 	addi	sp,sp,36
 100ed08:	f800283a 	ret
 100ed0c:	002f883a 	mov	r23,zero
 100ed10:	003ff106 	br	100ecd8 <_fwalk_reent+0x8c>

0100ed14 <_fwalk>:
 100ed14:	defff804 	addi	sp,sp,-32
 100ed18:	dcc00315 	stw	r19,12(sp)
 100ed1c:	24c0b804 	addi	r19,r4,736
 100ed20:	dd400515 	stw	r21,20(sp)
 100ed24:	dfc00715 	stw	ra,28(sp)
 100ed28:	dd800615 	stw	r22,24(sp)
 100ed2c:	dd000415 	stw	r20,16(sp)
 100ed30:	dc800215 	stw	r18,8(sp)
 100ed34:	dc400115 	stw	r17,4(sp)
 100ed38:	dc000015 	stw	r16,0(sp)
 100ed3c:	282b883a 	mov	r21,r5
 100ed40:	100e1080 	call	100e108 <__sfp_lock_acquire>
 100ed44:	98001f26 	beq	r19,zero,100edc4 <_fwalk+0xb0>
 100ed48:	002d883a 	mov	r22,zero
 100ed4c:	9c800117 	ldw	r18,4(r19)
 100ed50:	9c000217 	ldw	r16,8(r19)
 100ed54:	90bfffc4 	addi	r2,r18,-1
 100ed58:	10000c16 	blt	r2,zero,100ed8c <_fwalk+0x78>
 100ed5c:	0023883a 	mov	r17,zero
 100ed60:	053fffc4 	movi	r20,-1
 100ed64:	8080030f 	ldh	r2,12(r16)
 100ed68:	8c400044 	addi	r17,r17,1
 100ed6c:	10000526 	beq	r2,zero,100ed84 <_fwalk+0x70>
 100ed70:	8080038f 	ldh	r2,14(r16)
 100ed74:	8009883a 	mov	r4,r16
 100ed78:	15000226 	beq	r2,r20,100ed84 <_fwalk+0x70>
 100ed7c:	a83ee83a 	callr	r21
 100ed80:	b0acb03a 	or	r22,r22,r2
 100ed84:	84001704 	addi	r16,r16,92
 100ed88:	947ff61e 	bne	r18,r17,100ed64 <_fwalk+0x50>
 100ed8c:	9cc00017 	ldw	r19,0(r19)
 100ed90:	983fee1e 	bne	r19,zero,100ed4c <_fwalk+0x38>
 100ed94:	100e10c0 	call	100e10c <__sfp_lock_release>
 100ed98:	b005883a 	mov	r2,r22
 100ed9c:	dfc00717 	ldw	ra,28(sp)
 100eda0:	dd800617 	ldw	r22,24(sp)
 100eda4:	dd400517 	ldw	r21,20(sp)
 100eda8:	dd000417 	ldw	r20,16(sp)
 100edac:	dcc00317 	ldw	r19,12(sp)
 100edb0:	dc800217 	ldw	r18,8(sp)
 100edb4:	dc400117 	ldw	r17,4(sp)
 100edb8:	dc000017 	ldw	r16,0(sp)
 100edbc:	dec00804 	addi	sp,sp,32
 100edc0:	f800283a 	ret
 100edc4:	002d883a 	mov	r22,zero
 100edc8:	003ff206 	br	100ed94 <_fwalk+0x80>

0100edcc <__locale_charset>:
 100edcc:	d0a01317 	ldw	r2,-32692(gp)
 100edd0:	f800283a 	ret

0100edd4 <_localeconv_r>:
 100edd4:	008040b4 	movhi	r2,258
 100edd8:	10bd0a04 	addi	r2,r2,-3032
 100eddc:	f800283a 	ret

0100ede0 <localeconv>:
 100ede0:	008040b4 	movhi	r2,258
 100ede4:	1084a204 	addi	r2,r2,4744
 100ede8:	11000017 	ldw	r4,0(r2)
 100edec:	100edd41 	jmpi	100edd4 <_localeconv_r>

0100edf0 <_setlocale_r>:
 100edf0:	defffc04 	addi	sp,sp,-16
 100edf4:	00c040b4 	movhi	r3,258
 100edf8:	18fd0504 	addi	r3,r3,-3052
 100edfc:	dc800215 	stw	r18,8(sp)
 100ee00:	dc400115 	stw	r17,4(sp)
 100ee04:	dc000015 	stw	r16,0(sp)
 100ee08:	2023883a 	mov	r17,r4
 100ee0c:	2825883a 	mov	r18,r5
 100ee10:	dfc00315 	stw	ra,12(sp)
 100ee14:	3021883a 	mov	r16,r6
 100ee18:	3009883a 	mov	r4,r6
 100ee1c:	180b883a 	mov	r5,r3
 100ee20:	30000926 	beq	r6,zero,100ee48 <_setlocale_r+0x58>
 100ee24:	10107c80 	call	10107c8 <strcmp>
 100ee28:	8009883a 	mov	r4,r16
 100ee2c:	014040b4 	movhi	r5,258
 100ee30:	297cf004 	addi	r5,r5,-3136
 100ee34:	10000b1e 	bne	r2,zero,100ee64 <_setlocale_r+0x74>
 100ee38:	8c000d15 	stw	r16,52(r17)
 100ee3c:	8c800c15 	stw	r18,48(r17)
 100ee40:	00c040b4 	movhi	r3,258
 100ee44:	18fd0504 	addi	r3,r3,-3052
 100ee48:	1805883a 	mov	r2,r3
 100ee4c:	dfc00317 	ldw	ra,12(sp)
 100ee50:	dc800217 	ldw	r18,8(sp)
 100ee54:	dc400117 	ldw	r17,4(sp)
 100ee58:	dc000017 	ldw	r16,0(sp)
 100ee5c:	dec00404 	addi	sp,sp,16
 100ee60:	f800283a 	ret
 100ee64:	10107c80 	call	10107c8 <strcmp>
 100ee68:	0007883a 	mov	r3,zero
 100ee6c:	103ff226 	beq	r2,zero,100ee38 <_setlocale_r+0x48>
 100ee70:	003ff506 	br	100ee48 <_setlocale_r+0x58>

0100ee74 <setlocale>:
 100ee74:	018040b4 	movhi	r6,258
 100ee78:	3184a204 	addi	r6,r6,4744
 100ee7c:	2007883a 	mov	r3,r4
 100ee80:	31000017 	ldw	r4,0(r6)
 100ee84:	280d883a 	mov	r6,r5
 100ee88:	180b883a 	mov	r5,r3
 100ee8c:	100edf01 	jmpi	100edf0 <_setlocale_r>

0100ee90 <__smakebuf_r>:
 100ee90:	2880030b 	ldhu	r2,12(r5)
 100ee94:	deffed04 	addi	sp,sp,-76
 100ee98:	dc401015 	stw	r17,64(sp)
 100ee9c:	1080008c 	andi	r2,r2,2
 100eea0:	dc000f15 	stw	r16,60(sp)
 100eea4:	dfc01215 	stw	ra,72(sp)
 100eea8:	dc801115 	stw	r18,68(sp)
 100eeac:	2821883a 	mov	r16,r5
 100eeb0:	2023883a 	mov	r17,r4
 100eeb4:	10000b26 	beq	r2,zero,100eee4 <__smakebuf_r+0x54>
 100eeb8:	28c010c4 	addi	r3,r5,67
 100eebc:	00800044 	movi	r2,1
 100eec0:	28800515 	stw	r2,20(r5)
 100eec4:	28c00415 	stw	r3,16(r5)
 100eec8:	28c00015 	stw	r3,0(r5)
 100eecc:	dfc01217 	ldw	ra,72(sp)
 100eed0:	dc801117 	ldw	r18,68(sp)
 100eed4:	dc401017 	ldw	r17,64(sp)
 100eed8:	dc000f17 	ldw	r16,60(sp)
 100eedc:	dec01304 	addi	sp,sp,76
 100eee0:	f800283a 	ret
 100eee4:	2940038f 	ldh	r5,14(r5)
 100eee8:	28002116 	blt	r5,zero,100ef70 <__smakebuf_r+0xe0>
 100eeec:	d80d883a 	mov	r6,sp
 100eef0:	1010b440 	call	1010b44 <_fstat_r>
 100eef4:	10001e16 	blt	r2,zero,100ef70 <__smakebuf_r+0xe0>
 100eef8:	d8800117 	ldw	r2,4(sp)
 100eefc:	00e00014 	movui	r3,32768
 100ef00:	113c000c 	andi	r4,r2,61440
 100ef04:	20c03126 	beq	r4,r3,100efcc <__smakebuf_r+0x13c>
 100ef08:	8080030b 	ldhu	r2,12(r16)
 100ef0c:	00c80004 	movi	r3,8192
 100ef10:	10820014 	ori	r2,r2,2048
 100ef14:	8080030d 	sth	r2,12(r16)
 100ef18:	20c01e26 	beq	r4,r3,100ef94 <__smakebuf_r+0x104>
 100ef1c:	04810004 	movi	r18,1024
 100ef20:	8809883a 	mov	r4,r17
 100ef24:	900b883a 	mov	r5,r18
 100ef28:	10096f40 	call	10096f4 <_malloc_r>
 100ef2c:	1009883a 	mov	r4,r2
 100ef30:	10003126 	beq	r2,zero,100eff8 <__smakebuf_r+0x168>
 100ef34:	80c0030b 	ldhu	r3,12(r16)
 100ef38:	00804074 	movhi	r2,257
 100ef3c:	10b87f04 	addi	r2,r2,-7684
 100ef40:	88800f15 	stw	r2,60(r17)
 100ef44:	18c02014 	ori	r3,r3,128
 100ef48:	84800515 	stw	r18,20(r16)
 100ef4c:	80c0030d 	sth	r3,12(r16)
 100ef50:	81000415 	stw	r4,16(r16)
 100ef54:	81000015 	stw	r4,0(r16)
 100ef58:	dfc01217 	ldw	ra,72(sp)
 100ef5c:	dc801117 	ldw	r18,68(sp)
 100ef60:	dc401017 	ldw	r17,64(sp)
 100ef64:	dc000f17 	ldw	r16,60(sp)
 100ef68:	dec01304 	addi	sp,sp,76
 100ef6c:	f800283a 	ret
 100ef70:	80c0030b 	ldhu	r3,12(r16)
 100ef74:	1880200c 	andi	r2,r3,128
 100ef78:	10000426 	beq	r2,zero,100ef8c <__smakebuf_r+0xfc>
 100ef7c:	04801004 	movi	r18,64
 100ef80:	18820014 	ori	r2,r3,2048
 100ef84:	8080030d 	sth	r2,12(r16)
 100ef88:	003fe506 	br	100ef20 <__smakebuf_r+0x90>
 100ef8c:	04810004 	movi	r18,1024
 100ef90:	003ffb06 	br	100ef80 <__smakebuf_r+0xf0>
 100ef94:	8140038f 	ldh	r5,14(r16)
 100ef98:	8809883a 	mov	r4,r17
 100ef9c:	1010bb80 	call	1010bb8 <_isatty_r>
 100efa0:	103fde26 	beq	r2,zero,100ef1c <__smakebuf_r+0x8c>
 100efa4:	8080030b 	ldhu	r2,12(r16)
 100efa8:	80c010c4 	addi	r3,r16,67
 100efac:	04810004 	movi	r18,1024
 100efb0:	10800054 	ori	r2,r2,1
 100efb4:	8080030d 	sth	r2,12(r16)
 100efb8:	00800044 	movi	r2,1
 100efbc:	80c00415 	stw	r3,16(r16)
 100efc0:	80800515 	stw	r2,20(r16)
 100efc4:	80c00015 	stw	r3,0(r16)
 100efc8:	003fd506 	br	100ef20 <__smakebuf_r+0x90>
 100efcc:	80c00a17 	ldw	r3,40(r16)
 100efd0:	00804074 	movhi	r2,257
 100efd4:	1081a104 	addi	r2,r2,1668
 100efd8:	18bfcb1e 	bne	r3,r2,100ef08 <__smakebuf_r+0x78>
 100efdc:	8080030b 	ldhu	r2,12(r16)
 100efe0:	00c10004 	movi	r3,1024
 100efe4:	1825883a 	mov	r18,r3
 100efe8:	10c4b03a 	or	r2,r2,r3
 100efec:	8080030d 	sth	r2,12(r16)
 100eff0:	80c01315 	stw	r3,76(r16)
 100eff4:	003fca06 	br	100ef20 <__smakebuf_r+0x90>
 100eff8:	8100030b 	ldhu	r4,12(r16)
 100effc:	2080800c 	andi	r2,r4,512
 100f000:	103fb21e 	bne	r2,zero,100eecc <__smakebuf_r+0x3c>
 100f004:	80c010c4 	addi	r3,r16,67
 100f008:	21000094 	ori	r4,r4,2
 100f00c:	00800044 	movi	r2,1
 100f010:	80800515 	stw	r2,20(r16)
 100f014:	8100030d 	sth	r4,12(r16)
 100f018:	80c00415 	stw	r3,16(r16)
 100f01c:	80c00015 	stw	r3,0(r16)
 100f020:	003faa06 	br	100eecc <__smakebuf_r+0x3c>

0100f024 <_Bfree>:
 100f024:	28000826 	beq	r5,zero,100f048 <_Bfree+0x24>
 100f028:	28800117 	ldw	r2,4(r5)
 100f02c:	21001317 	ldw	r4,76(r4)
 100f030:	1085883a 	add	r2,r2,r2
 100f034:	1085883a 	add	r2,r2,r2
 100f038:	1105883a 	add	r2,r2,r4
 100f03c:	10c00017 	ldw	r3,0(r2)
 100f040:	28c00015 	stw	r3,0(r5)
 100f044:	11400015 	stw	r5,0(r2)
 100f048:	f800283a 	ret

0100f04c <__hi0bits>:
 100f04c:	20bfffec 	andhi	r2,r4,65535
 100f050:	10001426 	beq	r2,zero,100f0a4 <__hi0bits+0x58>
 100f054:	0007883a 	mov	r3,zero
 100f058:	20bfc02c 	andhi	r2,r4,65280
 100f05c:	1000021e 	bne	r2,zero,100f068 <__hi0bits+0x1c>
 100f060:	2008923a 	slli	r4,r4,8
 100f064:	18c00204 	addi	r3,r3,8
 100f068:	20bc002c 	andhi	r2,r4,61440
 100f06c:	1000021e 	bne	r2,zero,100f078 <__hi0bits+0x2c>
 100f070:	2008913a 	slli	r4,r4,4
 100f074:	18c00104 	addi	r3,r3,4
 100f078:	20b0002c 	andhi	r2,r4,49152
 100f07c:	1000031e 	bne	r2,zero,100f08c <__hi0bits+0x40>
 100f080:	2105883a 	add	r2,r4,r4
 100f084:	18c00084 	addi	r3,r3,2
 100f088:	1089883a 	add	r4,r2,r2
 100f08c:	20000316 	blt	r4,zero,100f09c <__hi0bits+0x50>
 100f090:	2090002c 	andhi	r2,r4,16384
 100f094:	10000626 	beq	r2,zero,100f0b0 <__hi0bits+0x64>
 100f098:	18c00044 	addi	r3,r3,1
 100f09c:	1805883a 	mov	r2,r3
 100f0a0:	f800283a 	ret
 100f0a4:	2008943a 	slli	r4,r4,16
 100f0a8:	00c00404 	movi	r3,16
 100f0ac:	003fea06 	br	100f058 <__hi0bits+0xc>
 100f0b0:	00c00804 	movi	r3,32
 100f0b4:	1805883a 	mov	r2,r3
 100f0b8:	f800283a 	ret

0100f0bc <__lo0bits>:
 100f0bc:	20c00017 	ldw	r3,0(r4)
 100f0c0:	188001cc 	andi	r2,r3,7
 100f0c4:	10000a26 	beq	r2,zero,100f0f0 <__lo0bits+0x34>
 100f0c8:	1880004c 	andi	r2,r3,1
 100f0cc:	1005003a 	cmpeq	r2,r2,zero
 100f0d0:	10002126 	beq	r2,zero,100f158 <__lo0bits+0x9c>
 100f0d4:	1880008c 	andi	r2,r3,2
 100f0d8:	1000251e 	bne	r2,zero,100f170 <__lo0bits+0xb4>
 100f0dc:	1804d0ba 	srli	r2,r3,2
 100f0e0:	01400084 	movi	r5,2
 100f0e4:	20800015 	stw	r2,0(r4)
 100f0e8:	2805883a 	mov	r2,r5
 100f0ec:	f800283a 	ret
 100f0f0:	18bfffcc 	andi	r2,r3,65535
 100f0f4:	10001526 	beq	r2,zero,100f14c <__lo0bits+0x90>
 100f0f8:	000b883a 	mov	r5,zero
 100f0fc:	18803fcc 	andi	r2,r3,255
 100f100:	1000021e 	bne	r2,zero,100f10c <__lo0bits+0x50>
 100f104:	1806d23a 	srli	r3,r3,8
 100f108:	29400204 	addi	r5,r5,8
 100f10c:	188003cc 	andi	r2,r3,15
 100f110:	1000021e 	bne	r2,zero,100f11c <__lo0bits+0x60>
 100f114:	1806d13a 	srli	r3,r3,4
 100f118:	29400104 	addi	r5,r5,4
 100f11c:	188000cc 	andi	r2,r3,3
 100f120:	1000021e 	bne	r2,zero,100f12c <__lo0bits+0x70>
 100f124:	1806d0ba 	srli	r3,r3,2
 100f128:	29400084 	addi	r5,r5,2
 100f12c:	1880004c 	andi	r2,r3,1
 100f130:	1000031e 	bne	r2,zero,100f140 <__lo0bits+0x84>
 100f134:	1806d07a 	srli	r3,r3,1
 100f138:	18000a26 	beq	r3,zero,100f164 <__lo0bits+0xa8>
 100f13c:	29400044 	addi	r5,r5,1
 100f140:	2805883a 	mov	r2,r5
 100f144:	20c00015 	stw	r3,0(r4)
 100f148:	f800283a 	ret
 100f14c:	1806d43a 	srli	r3,r3,16
 100f150:	01400404 	movi	r5,16
 100f154:	003fe906 	br	100f0fc <__lo0bits+0x40>
 100f158:	000b883a 	mov	r5,zero
 100f15c:	2805883a 	mov	r2,r5
 100f160:	f800283a 	ret
 100f164:	01400804 	movi	r5,32
 100f168:	2805883a 	mov	r2,r5
 100f16c:	f800283a 	ret
 100f170:	1804d07a 	srli	r2,r3,1
 100f174:	01400044 	movi	r5,1
 100f178:	20800015 	stw	r2,0(r4)
 100f17c:	003fda06 	br	100f0e8 <__lo0bits+0x2c>

0100f180 <__mcmp>:
 100f180:	20800417 	ldw	r2,16(r4)
 100f184:	28c00417 	ldw	r3,16(r5)
 100f188:	10cfc83a 	sub	r7,r2,r3
 100f18c:	38000c1e 	bne	r7,zero,100f1c0 <__mcmp+0x40>
 100f190:	18c5883a 	add	r2,r3,r3
 100f194:	1085883a 	add	r2,r2,r2
 100f198:	10c00504 	addi	r3,r2,20
 100f19c:	21000504 	addi	r4,r4,20
 100f1a0:	28cb883a 	add	r5,r5,r3
 100f1a4:	2085883a 	add	r2,r4,r2
 100f1a8:	10bfff04 	addi	r2,r2,-4
 100f1ac:	297fff04 	addi	r5,r5,-4
 100f1b0:	11800017 	ldw	r6,0(r2)
 100f1b4:	28c00017 	ldw	r3,0(r5)
 100f1b8:	30c0031e 	bne	r6,r3,100f1c8 <__mcmp+0x48>
 100f1bc:	20bffa36 	bltu	r4,r2,100f1a8 <__mcmp+0x28>
 100f1c0:	3805883a 	mov	r2,r7
 100f1c4:	f800283a 	ret
 100f1c8:	30c00336 	bltu	r6,r3,100f1d8 <__mcmp+0x58>
 100f1cc:	01c00044 	movi	r7,1
 100f1d0:	3805883a 	mov	r2,r7
 100f1d4:	f800283a 	ret
 100f1d8:	01ffffc4 	movi	r7,-1
 100f1dc:	003ff806 	br	100f1c0 <__mcmp+0x40>

0100f1e0 <__ulp>:
 100f1e0:	295ffc2c 	andhi	r5,r5,32752
 100f1e4:	013f3034 	movhi	r4,64704
 100f1e8:	290b883a 	add	r5,r5,r4
 100f1ec:	0145c83a 	sub	r2,zero,r5
 100f1f0:	1007d53a 	srai	r3,r2,20
 100f1f4:	000d883a 	mov	r6,zero
 100f1f8:	0140040e 	bge	zero,r5,100f20c <__ulp+0x2c>
 100f1fc:	280f883a 	mov	r7,r5
 100f200:	3807883a 	mov	r3,r7
 100f204:	3005883a 	mov	r2,r6
 100f208:	f800283a 	ret
 100f20c:	008004c4 	movi	r2,19
 100f210:	193ffb04 	addi	r4,r3,-20
 100f214:	10c00c0e 	bge	r2,r3,100f248 <__ulp+0x68>
 100f218:	008007c4 	movi	r2,31
 100f21c:	1107c83a 	sub	r3,r2,r4
 100f220:	00800784 	movi	r2,30
 100f224:	01400044 	movi	r5,1
 100f228:	11000216 	blt	r2,r4,100f234 <__ulp+0x54>
 100f22c:	00800044 	movi	r2,1
 100f230:	10ca983a 	sll	r5,r2,r3
 100f234:	000f883a 	mov	r7,zero
 100f238:	280d883a 	mov	r6,r5
 100f23c:	3807883a 	mov	r3,r7
 100f240:	3005883a 	mov	r2,r6
 100f244:	f800283a 	ret
 100f248:	00800234 	movhi	r2,8
 100f24c:	10cfd83a 	sra	r7,r2,r3
 100f250:	000d883a 	mov	r6,zero
 100f254:	3005883a 	mov	r2,r6
 100f258:	3807883a 	mov	r3,r7
 100f25c:	f800283a 	ret

0100f260 <__b2d>:
 100f260:	20800417 	ldw	r2,16(r4)
 100f264:	defff904 	addi	sp,sp,-28
 100f268:	dd000415 	stw	r20,16(sp)
 100f26c:	1085883a 	add	r2,r2,r2
 100f270:	25000504 	addi	r20,r4,20
 100f274:	1085883a 	add	r2,r2,r2
 100f278:	dc000015 	stw	r16,0(sp)
 100f27c:	a0a1883a 	add	r16,r20,r2
 100f280:	dd400515 	stw	r21,20(sp)
 100f284:	857fff17 	ldw	r21,-4(r16)
 100f288:	dc400115 	stw	r17,4(sp)
 100f28c:	dfc00615 	stw	ra,24(sp)
 100f290:	a809883a 	mov	r4,r21
 100f294:	2823883a 	mov	r17,r5
 100f298:	dcc00315 	stw	r19,12(sp)
 100f29c:	dc800215 	stw	r18,8(sp)
 100f2a0:	100f04c0 	call	100f04c <__hi0bits>
 100f2a4:	100b883a 	mov	r5,r2
 100f2a8:	00800804 	movi	r2,32
 100f2ac:	1145c83a 	sub	r2,r2,r5
 100f2b0:	88800015 	stw	r2,0(r17)
 100f2b4:	00800284 	movi	r2,10
 100f2b8:	80ffff04 	addi	r3,r16,-4
 100f2bc:	11401416 	blt	r2,r5,100f310 <__b2d+0xb0>
 100f2c0:	008002c4 	movi	r2,11
 100f2c4:	1149c83a 	sub	r4,r2,r5
 100f2c8:	a0c02736 	bltu	r20,r3,100f368 <__b2d+0x108>
 100f2cc:	000d883a 	mov	r6,zero
 100f2d0:	28800544 	addi	r2,r5,21
 100f2d4:	a906d83a 	srl	r3,r21,r4
 100f2d8:	a884983a 	sll	r2,r21,r2
 100f2dc:	1ccffc34 	orhi	r19,r3,16368
 100f2e0:	11a4b03a 	or	r18,r2,r6
 100f2e4:	9005883a 	mov	r2,r18
 100f2e8:	9807883a 	mov	r3,r19
 100f2ec:	dfc00617 	ldw	ra,24(sp)
 100f2f0:	dd400517 	ldw	r21,20(sp)
 100f2f4:	dd000417 	ldw	r20,16(sp)
 100f2f8:	dcc00317 	ldw	r19,12(sp)
 100f2fc:	dc800217 	ldw	r18,8(sp)
 100f300:	dc400117 	ldw	r17,4(sp)
 100f304:	dc000017 	ldw	r16,0(sp)
 100f308:	dec00704 	addi	sp,sp,28
 100f30c:	f800283a 	ret
 100f310:	a0c00e36 	bltu	r20,r3,100f34c <__b2d+0xec>
 100f314:	293ffd44 	addi	r4,r5,-11
 100f318:	000d883a 	mov	r6,zero
 100f31c:	20000f26 	beq	r4,zero,100f35c <__b2d+0xfc>
 100f320:	00800804 	movi	r2,32
 100f324:	110bc83a 	sub	r5,r2,r4
 100f328:	a0c01236 	bltu	r20,r3,100f374 <__b2d+0x114>
 100f32c:	000f883a 	mov	r7,zero
 100f330:	a904983a 	sll	r2,r21,r4
 100f334:	3146d83a 	srl	r3,r6,r5
 100f338:	3108983a 	sll	r4,r6,r4
 100f33c:	108ffc34 	orhi	r2,r2,16368
 100f340:	18a6b03a 	or	r19,r3,r2
 100f344:	3924b03a 	or	r18,r7,r4
 100f348:	003fe606 	br	100f2e4 <__b2d+0x84>
 100f34c:	293ffd44 	addi	r4,r5,-11
 100f350:	81bffe17 	ldw	r6,-8(r16)
 100f354:	80fffe04 	addi	r3,r16,-8
 100f358:	203ff11e 	bne	r4,zero,100f320 <__b2d+0xc0>
 100f35c:	accffc34 	orhi	r19,r21,16368
 100f360:	3025883a 	mov	r18,r6
 100f364:	003fdf06 	br	100f2e4 <__b2d+0x84>
 100f368:	18bfff17 	ldw	r2,-4(r3)
 100f36c:	110cd83a 	srl	r6,r2,r4
 100f370:	003fd706 	br	100f2d0 <__b2d+0x70>
 100f374:	18bfff17 	ldw	r2,-4(r3)
 100f378:	114ed83a 	srl	r7,r2,r5
 100f37c:	003fec06 	br	100f330 <__b2d+0xd0>

0100f380 <__ratio>:
 100f380:	defff904 	addi	sp,sp,-28
 100f384:	dc400215 	stw	r17,8(sp)
 100f388:	2823883a 	mov	r17,r5
 100f38c:	d80b883a 	mov	r5,sp
 100f390:	dfc00615 	stw	ra,24(sp)
 100f394:	dd000515 	stw	r20,20(sp)
 100f398:	dcc00415 	stw	r19,16(sp)
 100f39c:	dc800315 	stw	r18,12(sp)
 100f3a0:	2025883a 	mov	r18,r4
 100f3a4:	100f2600 	call	100f260 <__b2d>
 100f3a8:	8809883a 	mov	r4,r17
 100f3ac:	d9400104 	addi	r5,sp,4
 100f3b0:	1027883a 	mov	r19,r2
 100f3b4:	1829883a 	mov	r20,r3
 100f3b8:	100f2600 	call	100f260 <__b2d>
 100f3bc:	89000417 	ldw	r4,16(r17)
 100f3c0:	91c00417 	ldw	r7,16(r18)
 100f3c4:	d9800117 	ldw	r6,4(sp)
 100f3c8:	180b883a 	mov	r5,r3
 100f3cc:	390fc83a 	sub	r7,r7,r4
 100f3d0:	1009883a 	mov	r4,r2
 100f3d4:	d8800017 	ldw	r2,0(sp)
 100f3d8:	380e917a 	slli	r7,r7,5
 100f3dc:	2011883a 	mov	r8,r4
 100f3e0:	1185c83a 	sub	r2,r2,r6
 100f3e4:	11c5883a 	add	r2,r2,r7
 100f3e8:	1006953a 	slli	r3,r2,20
 100f3ec:	2813883a 	mov	r9,r5
 100f3f0:	00800d0e 	bge	zero,r2,100f428 <__ratio+0xa8>
 100f3f4:	1d29883a 	add	r20,r3,r20
 100f3f8:	a00b883a 	mov	r5,r20
 100f3fc:	480f883a 	mov	r7,r9
 100f400:	9809883a 	mov	r4,r19
 100f404:	400d883a 	mov	r6,r8
 100f408:	101216c0 	call	101216c <__divdf3>
 100f40c:	dfc00617 	ldw	ra,24(sp)
 100f410:	dd000517 	ldw	r20,20(sp)
 100f414:	dcc00417 	ldw	r19,16(sp)
 100f418:	dc800317 	ldw	r18,12(sp)
 100f41c:	dc400217 	ldw	r17,8(sp)
 100f420:	dec00704 	addi	sp,sp,28
 100f424:	f800283a 	ret
 100f428:	28d3c83a 	sub	r9,r5,r3
 100f42c:	003ff206 	br	100f3f8 <__ratio+0x78>

0100f430 <_mprec_log10>:
 100f430:	defffe04 	addi	sp,sp,-8
 100f434:	008005c4 	movi	r2,23
 100f438:	dc000015 	stw	r16,0(sp)
 100f43c:	dfc00115 	stw	ra,4(sp)
 100f440:	2021883a 	mov	r16,r4
 100f444:	11000c16 	blt	r2,r4,100f478 <_mprec_log10+0x48>
 100f448:	200490fa 	slli	r2,r4,3
 100f44c:	00c040b4 	movhi	r3,258
 100f450:	18fd1604 	addi	r3,r3,-2984
 100f454:	10c5883a 	add	r2,r2,r3
 100f458:	12400117 	ldw	r9,4(r2)
 100f45c:	12000017 	ldw	r8,0(r2)
 100f460:	4807883a 	mov	r3,r9
 100f464:	4005883a 	mov	r2,r8
 100f468:	dfc00117 	ldw	ra,4(sp)
 100f46c:	dc000017 	ldw	r16,0(sp)
 100f470:	dec00204 	addi	sp,sp,8
 100f474:	f800283a 	ret
 100f478:	0011883a 	mov	r8,zero
 100f47c:	024ffc34 	movhi	r9,16368
 100f480:	0005883a 	mov	r2,zero
 100f484:	00d00934 	movhi	r3,16420
 100f488:	480b883a 	mov	r5,r9
 100f48c:	4009883a 	mov	r4,r8
 100f490:	180f883a 	mov	r7,r3
 100f494:	100d883a 	mov	r6,r2
 100f498:	1011da80 	call	1011da8 <__muldf3>
 100f49c:	843fffc4 	addi	r16,r16,-1
 100f4a0:	1011883a 	mov	r8,r2
 100f4a4:	1813883a 	mov	r9,r3
 100f4a8:	803ff51e 	bne	r16,zero,100f480 <_mprec_log10+0x50>
 100f4ac:	4005883a 	mov	r2,r8
 100f4b0:	4807883a 	mov	r3,r9
 100f4b4:	dfc00117 	ldw	ra,4(sp)
 100f4b8:	dc000017 	ldw	r16,0(sp)
 100f4bc:	dec00204 	addi	sp,sp,8
 100f4c0:	f800283a 	ret

0100f4c4 <__copybits>:
 100f4c4:	297fffc4 	addi	r5,r5,-1
 100f4c8:	30800417 	ldw	r2,16(r6)
 100f4cc:	280bd17a 	srai	r5,r5,5
 100f4d0:	31800504 	addi	r6,r6,20
 100f4d4:	1085883a 	add	r2,r2,r2
 100f4d8:	294b883a 	add	r5,r5,r5
 100f4dc:	294b883a 	add	r5,r5,r5
 100f4e0:	1085883a 	add	r2,r2,r2
 100f4e4:	290b883a 	add	r5,r5,r4
 100f4e8:	3087883a 	add	r3,r6,r2
 100f4ec:	29400104 	addi	r5,r5,4
 100f4f0:	30c0052e 	bgeu	r6,r3,100f508 <__copybits+0x44>
 100f4f4:	30800017 	ldw	r2,0(r6)
 100f4f8:	31800104 	addi	r6,r6,4
 100f4fc:	20800015 	stw	r2,0(r4)
 100f500:	21000104 	addi	r4,r4,4
 100f504:	30fffb36 	bltu	r6,r3,100f4f4 <__copybits+0x30>
 100f508:	2140032e 	bgeu	r4,r5,100f518 <__copybits+0x54>
 100f50c:	20000015 	stw	zero,0(r4)
 100f510:	21000104 	addi	r4,r4,4
 100f514:	217ffd36 	bltu	r4,r5,100f50c <__copybits+0x48>
 100f518:	f800283a 	ret

0100f51c <__any_on>:
 100f51c:	20800417 	ldw	r2,16(r4)
 100f520:	2807d17a 	srai	r3,r5,5
 100f524:	21000504 	addi	r4,r4,20
 100f528:	10c00d0e 	bge	r2,r3,100f560 <__any_on+0x44>
 100f52c:	1085883a 	add	r2,r2,r2
 100f530:	1085883a 	add	r2,r2,r2
 100f534:	208d883a 	add	r6,r4,r2
 100f538:	2180182e 	bgeu	r4,r6,100f59c <__any_on+0x80>
 100f53c:	30bfff17 	ldw	r2,-4(r6)
 100f540:	30ffff04 	addi	r3,r6,-4
 100f544:	1000041e 	bne	r2,zero,100f558 <__any_on+0x3c>
 100f548:	20c0142e 	bgeu	r4,r3,100f59c <__any_on+0x80>
 100f54c:	18ffff04 	addi	r3,r3,-4
 100f550:	18800017 	ldw	r2,0(r3)
 100f554:	103ffc26 	beq	r2,zero,100f548 <__any_on+0x2c>
 100f558:	00800044 	movi	r2,1
 100f55c:	f800283a 	ret
 100f560:	18800a0e 	bge	r3,r2,100f58c <__any_on+0x70>
 100f564:	294007cc 	andi	r5,r5,31
 100f568:	28000826 	beq	r5,zero,100f58c <__any_on+0x70>
 100f56c:	18c5883a 	add	r2,r3,r3
 100f570:	1085883a 	add	r2,r2,r2
 100f574:	208d883a 	add	r6,r4,r2
 100f578:	30c00017 	ldw	r3,0(r6)
 100f57c:	1944d83a 	srl	r2,r3,r5
 100f580:	1144983a 	sll	r2,r2,r5
 100f584:	18bff41e 	bne	r3,r2,100f558 <__any_on+0x3c>
 100f588:	003feb06 	br	100f538 <__any_on+0x1c>
 100f58c:	18c5883a 	add	r2,r3,r3
 100f590:	1085883a 	add	r2,r2,r2
 100f594:	208d883a 	add	r6,r4,r2
 100f598:	003fe706 	br	100f538 <__any_on+0x1c>
 100f59c:	0005883a 	mov	r2,zero
 100f5a0:	f800283a 	ret

0100f5a4 <_Balloc>:
 100f5a4:	20c01317 	ldw	r3,76(r4)
 100f5a8:	defffb04 	addi	sp,sp,-20
 100f5ac:	dcc00315 	stw	r19,12(sp)
 100f5b0:	dc800215 	stw	r18,8(sp)
 100f5b4:	dfc00415 	stw	ra,16(sp)
 100f5b8:	2825883a 	mov	r18,r5
 100f5bc:	dc400115 	stw	r17,4(sp)
 100f5c0:	dc000015 	stw	r16,0(sp)
 100f5c4:	2027883a 	mov	r19,r4
 100f5c8:	01800404 	movi	r6,16
 100f5cc:	01400104 	movi	r5,4
 100f5d0:	18001726 	beq	r3,zero,100f630 <_Balloc+0x8c>
 100f5d4:	01400044 	movi	r5,1
 100f5d8:	9485883a 	add	r2,r18,r18
 100f5dc:	2ca2983a 	sll	r17,r5,r18
 100f5e0:	1085883a 	add	r2,r2,r2
 100f5e4:	10c7883a 	add	r3,r2,r3
 100f5e8:	1c000017 	ldw	r16,0(r3)
 100f5ec:	8c4d883a 	add	r6,r17,r17
 100f5f0:	318d883a 	add	r6,r6,r6
 100f5f4:	9809883a 	mov	r4,r19
 100f5f8:	31800504 	addi	r6,r6,20
 100f5fc:	80001226 	beq	r16,zero,100f648 <_Balloc+0xa4>
 100f600:	80800017 	ldw	r2,0(r16)
 100f604:	18800015 	stw	r2,0(r3)
 100f608:	80000415 	stw	zero,16(r16)
 100f60c:	80000315 	stw	zero,12(r16)
 100f610:	8005883a 	mov	r2,r16
 100f614:	dfc00417 	ldw	ra,16(sp)
 100f618:	dcc00317 	ldw	r19,12(sp)
 100f61c:	dc800217 	ldw	r18,8(sp)
 100f620:	dc400117 	ldw	r17,4(sp)
 100f624:	dc000017 	ldw	r16,0(sp)
 100f628:	dec00504 	addi	sp,sp,20
 100f62c:	f800283a 	ret
 100f630:	10108fc0 	call	10108fc <_calloc_r>
 100f634:	1007883a 	mov	r3,r2
 100f638:	0021883a 	mov	r16,zero
 100f63c:	98801315 	stw	r2,76(r19)
 100f640:	103fe41e 	bne	r2,zero,100f5d4 <_Balloc+0x30>
 100f644:	003ff206 	br	100f610 <_Balloc+0x6c>
 100f648:	10108fc0 	call	10108fc <_calloc_r>
 100f64c:	103ff026 	beq	r2,zero,100f610 <_Balloc+0x6c>
 100f650:	1021883a 	mov	r16,r2
 100f654:	14800115 	stw	r18,4(r2)
 100f658:	14400215 	stw	r17,8(r2)
 100f65c:	003fea06 	br	100f608 <_Balloc+0x64>

0100f660 <__d2b>:
 100f660:	defff504 	addi	sp,sp,-44
 100f664:	dcc00515 	stw	r19,20(sp)
 100f668:	04c00044 	movi	r19,1
 100f66c:	dc000215 	stw	r16,8(sp)
 100f670:	2821883a 	mov	r16,r5
 100f674:	980b883a 	mov	r5,r19
 100f678:	ddc00915 	stw	r23,36(sp)
 100f67c:	dd800815 	stw	r22,32(sp)
 100f680:	dd400715 	stw	r21,28(sp)
 100f684:	dd000615 	stw	r20,24(sp)
 100f688:	dc800415 	stw	r18,16(sp)
 100f68c:	dc400315 	stw	r17,12(sp)
 100f690:	dfc00a15 	stw	ra,40(sp)
 100f694:	3023883a 	mov	r17,r6
 100f698:	382d883a 	mov	r22,r7
 100f69c:	ddc00b17 	ldw	r23,44(sp)
 100f6a0:	100f5a40 	call	100f5a4 <_Balloc>
 100f6a4:	1025883a 	mov	r18,r2
 100f6a8:	00a00034 	movhi	r2,32768
 100f6ac:	10bfffc4 	addi	r2,r2,-1
 100f6b0:	8888703a 	and	r4,r17,r2
 100f6b4:	202ad53a 	srli	r21,r4,20
 100f6b8:	00800434 	movhi	r2,16
 100f6bc:	10bfffc4 	addi	r2,r2,-1
 100f6c0:	8886703a 	and	r3,r17,r2
 100f6c4:	a829003a 	cmpeq	r20,r21,zero
 100f6c8:	800b883a 	mov	r5,r16
 100f6cc:	d8c00115 	stw	r3,4(sp)
 100f6d0:	94000504 	addi	r16,r18,20
 100f6d4:	a000021e 	bne	r20,zero,100f6e0 <__d2b+0x80>
 100f6d8:	18c00434 	orhi	r3,r3,16
 100f6dc:	d8c00115 	stw	r3,4(sp)
 100f6e0:	28002726 	beq	r5,zero,100f780 <__d2b+0x120>
 100f6e4:	d809883a 	mov	r4,sp
 100f6e8:	d9400015 	stw	r5,0(sp)
 100f6ec:	100f0bc0 	call	100f0bc <__lo0bits>
 100f6f0:	100d883a 	mov	r6,r2
 100f6f4:	10003526 	beq	r2,zero,100f7cc <__d2b+0x16c>
 100f6f8:	d8c00117 	ldw	r3,4(sp)
 100f6fc:	00800804 	movi	r2,32
 100f700:	1185c83a 	sub	r2,r2,r6
 100f704:	d9000017 	ldw	r4,0(sp)
 100f708:	1886983a 	sll	r3,r3,r2
 100f70c:	1906b03a 	or	r3,r3,r4
 100f710:	90c00515 	stw	r3,20(r18)
 100f714:	d8c00117 	ldw	r3,4(sp)
 100f718:	1986d83a 	srl	r3,r3,r6
 100f71c:	d8c00115 	stw	r3,4(sp)
 100f720:	180b003a 	cmpeq	r5,r3,zero
 100f724:	00800084 	movi	r2,2
 100f728:	114bc83a 	sub	r5,r2,r5
 100f72c:	80c00115 	stw	r3,4(r16)
 100f730:	91400415 	stw	r5,16(r18)
 100f734:	a0001a1e 	bne	r20,zero,100f7a0 <__d2b+0x140>
 100f738:	3545883a 	add	r2,r6,r21
 100f73c:	10bef344 	addi	r2,r2,-1075
 100f740:	00c00d44 	movi	r3,53
 100f744:	b0800015 	stw	r2,0(r22)
 100f748:	1987c83a 	sub	r3,r3,r6
 100f74c:	b8c00015 	stw	r3,0(r23)
 100f750:	9005883a 	mov	r2,r18
 100f754:	dfc00a17 	ldw	ra,40(sp)
 100f758:	ddc00917 	ldw	r23,36(sp)
 100f75c:	dd800817 	ldw	r22,32(sp)
 100f760:	dd400717 	ldw	r21,28(sp)
 100f764:	dd000617 	ldw	r20,24(sp)
 100f768:	dcc00517 	ldw	r19,20(sp)
 100f76c:	dc800417 	ldw	r18,16(sp)
 100f770:	dc400317 	ldw	r17,12(sp)
 100f774:	dc000217 	ldw	r16,8(sp)
 100f778:	dec00b04 	addi	sp,sp,44
 100f77c:	f800283a 	ret
 100f780:	d9000104 	addi	r4,sp,4
 100f784:	100f0bc0 	call	100f0bc <__lo0bits>
 100f788:	11800804 	addi	r6,r2,32
 100f78c:	d8800117 	ldw	r2,4(sp)
 100f790:	94c00415 	stw	r19,16(r18)
 100f794:	980b883a 	mov	r5,r19
 100f798:	90800515 	stw	r2,20(r18)
 100f79c:	a03fe626 	beq	r20,zero,100f738 <__d2b+0xd8>
 100f7a0:	2945883a 	add	r2,r5,r5
 100f7a4:	1085883a 	add	r2,r2,r2
 100f7a8:	1405883a 	add	r2,r2,r16
 100f7ac:	113fff17 	ldw	r4,-4(r2)
 100f7b0:	30fef384 	addi	r3,r6,-1074
 100f7b4:	2820917a 	slli	r16,r5,5
 100f7b8:	b0c00015 	stw	r3,0(r22)
 100f7bc:	100f04c0 	call	100f04c <__hi0bits>
 100f7c0:	80a1c83a 	sub	r16,r16,r2
 100f7c4:	bc000015 	stw	r16,0(r23)
 100f7c8:	003fe106 	br	100f750 <__d2b+0xf0>
 100f7cc:	d8800017 	ldw	r2,0(sp)
 100f7d0:	90800515 	stw	r2,20(r18)
 100f7d4:	d8c00117 	ldw	r3,4(sp)
 100f7d8:	003fd106 	br	100f720 <__d2b+0xc0>

0100f7dc <__mdiff>:
 100f7dc:	defffb04 	addi	sp,sp,-20
 100f7e0:	dc000015 	stw	r16,0(sp)
 100f7e4:	2821883a 	mov	r16,r5
 100f7e8:	dc800215 	stw	r18,8(sp)
 100f7ec:	300b883a 	mov	r5,r6
 100f7f0:	2025883a 	mov	r18,r4
 100f7f4:	8009883a 	mov	r4,r16
 100f7f8:	dc400115 	stw	r17,4(sp)
 100f7fc:	dfc00415 	stw	ra,16(sp)
 100f800:	dcc00315 	stw	r19,12(sp)
 100f804:	3023883a 	mov	r17,r6
 100f808:	100f1800 	call	100f180 <__mcmp>
 100f80c:	10004226 	beq	r2,zero,100f918 <__mdiff+0x13c>
 100f810:	10005016 	blt	r2,zero,100f954 <__mdiff+0x178>
 100f814:	0027883a 	mov	r19,zero
 100f818:	81400117 	ldw	r5,4(r16)
 100f81c:	9009883a 	mov	r4,r18
 100f820:	100f5a40 	call	100f5a4 <_Balloc>
 100f824:	1019883a 	mov	r12,r2
 100f828:	82800417 	ldw	r10,16(r16)
 100f82c:	88800417 	ldw	r2,16(r17)
 100f830:	81800504 	addi	r6,r16,20
 100f834:	5287883a 	add	r3,r10,r10
 100f838:	1085883a 	add	r2,r2,r2
 100f83c:	18c7883a 	add	r3,r3,r3
 100f840:	1085883a 	add	r2,r2,r2
 100f844:	8a000504 	addi	r8,r17,20
 100f848:	64c00315 	stw	r19,12(r12)
 100f84c:	30db883a 	add	r13,r6,r3
 100f850:	4097883a 	add	r11,r8,r2
 100f854:	61c00504 	addi	r7,r12,20
 100f858:	0013883a 	mov	r9,zero
 100f85c:	31000017 	ldw	r4,0(r6)
 100f860:	41400017 	ldw	r5,0(r8)
 100f864:	42000104 	addi	r8,r8,4
 100f868:	20bfffcc 	andi	r2,r4,65535
 100f86c:	28ffffcc 	andi	r3,r5,65535
 100f870:	10c5c83a 	sub	r2,r2,r3
 100f874:	1245883a 	add	r2,r2,r9
 100f878:	2008d43a 	srli	r4,r4,16
 100f87c:	280ad43a 	srli	r5,r5,16
 100f880:	1007d43a 	srai	r3,r2,16
 100f884:	3880000d 	sth	r2,0(r7)
 100f888:	2149c83a 	sub	r4,r4,r5
 100f88c:	20c9883a 	add	r4,r4,r3
 100f890:	3900008d 	sth	r4,2(r7)
 100f894:	31800104 	addi	r6,r6,4
 100f898:	39c00104 	addi	r7,r7,4
 100f89c:	2013d43a 	srai	r9,r4,16
 100f8a0:	42ffee36 	bltu	r8,r11,100f85c <__mdiff+0x80>
 100f8a4:	33400c2e 	bgeu	r6,r13,100f8d8 <__mdiff+0xfc>
 100f8a8:	30800017 	ldw	r2,0(r6)
 100f8ac:	31800104 	addi	r6,r6,4
 100f8b0:	10ffffcc 	andi	r3,r2,65535
 100f8b4:	1a47883a 	add	r3,r3,r9
 100f8b8:	1004d43a 	srli	r2,r2,16
 100f8bc:	1809d43a 	srai	r4,r3,16
 100f8c0:	38c0000d 	sth	r3,0(r7)
 100f8c4:	1105883a 	add	r2,r2,r4
 100f8c8:	3880008d 	sth	r2,2(r7)
 100f8cc:	1013d43a 	srai	r9,r2,16
 100f8d0:	39c00104 	addi	r7,r7,4
 100f8d4:	337ff436 	bltu	r6,r13,100f8a8 <__mdiff+0xcc>
 100f8d8:	38bfff17 	ldw	r2,-4(r7)
 100f8dc:	38ffff04 	addi	r3,r7,-4
 100f8e0:	1000041e 	bne	r2,zero,100f8f4 <__mdiff+0x118>
 100f8e4:	18ffff04 	addi	r3,r3,-4
 100f8e8:	18800017 	ldw	r2,0(r3)
 100f8ec:	52bfffc4 	addi	r10,r10,-1
 100f8f0:	103ffc26 	beq	r2,zero,100f8e4 <__mdiff+0x108>
 100f8f4:	6005883a 	mov	r2,r12
 100f8f8:	62800415 	stw	r10,16(r12)
 100f8fc:	dfc00417 	ldw	ra,16(sp)
 100f900:	dcc00317 	ldw	r19,12(sp)
 100f904:	dc800217 	ldw	r18,8(sp)
 100f908:	dc400117 	ldw	r17,4(sp)
 100f90c:	dc000017 	ldw	r16,0(sp)
 100f910:	dec00504 	addi	sp,sp,20
 100f914:	f800283a 	ret
 100f918:	9009883a 	mov	r4,r18
 100f91c:	000b883a 	mov	r5,zero
 100f920:	100f5a40 	call	100f5a4 <_Balloc>
 100f924:	1019883a 	mov	r12,r2
 100f928:	00800044 	movi	r2,1
 100f92c:	60800415 	stw	r2,16(r12)
 100f930:	6005883a 	mov	r2,r12
 100f934:	60000515 	stw	zero,20(r12)
 100f938:	dfc00417 	ldw	ra,16(sp)
 100f93c:	dcc00317 	ldw	r19,12(sp)
 100f940:	dc800217 	ldw	r18,8(sp)
 100f944:	dc400117 	ldw	r17,4(sp)
 100f948:	dc000017 	ldw	r16,0(sp)
 100f94c:	dec00504 	addi	sp,sp,20
 100f950:	f800283a 	ret
 100f954:	880d883a 	mov	r6,r17
 100f958:	04c00044 	movi	r19,1
 100f95c:	8023883a 	mov	r17,r16
 100f960:	3021883a 	mov	r16,r6
 100f964:	003fac06 	br	100f818 <__mdiff+0x3c>

0100f968 <__lshift>:
 100f968:	defff904 	addi	sp,sp,-28
 100f96c:	28800417 	ldw	r2,16(r5)
 100f970:	dc000015 	stw	r16,0(sp)
 100f974:	3021d17a 	srai	r16,r6,5
 100f978:	28c00217 	ldw	r3,8(r5)
 100f97c:	10800044 	addi	r2,r2,1
 100f980:	dc400115 	stw	r17,4(sp)
 100f984:	80a3883a 	add	r17,r16,r2
 100f988:	dd400515 	stw	r21,20(sp)
 100f98c:	dd000415 	stw	r20,16(sp)
 100f990:	dc800215 	stw	r18,8(sp)
 100f994:	dfc00615 	stw	ra,24(sp)
 100f998:	2825883a 	mov	r18,r5
 100f99c:	dcc00315 	stw	r19,12(sp)
 100f9a0:	3029883a 	mov	r20,r6
 100f9a4:	202b883a 	mov	r21,r4
 100f9a8:	29400117 	ldw	r5,4(r5)
 100f9ac:	1c40030e 	bge	r3,r17,100f9bc <__lshift+0x54>
 100f9b0:	18c7883a 	add	r3,r3,r3
 100f9b4:	29400044 	addi	r5,r5,1
 100f9b8:	1c7ffd16 	blt	r3,r17,100f9b0 <__lshift+0x48>
 100f9bc:	a809883a 	mov	r4,r21
 100f9c0:	100f5a40 	call	100f5a4 <_Balloc>
 100f9c4:	1027883a 	mov	r19,r2
 100f9c8:	11400504 	addi	r5,r2,20
 100f9cc:	0400090e 	bge	zero,r16,100f9f4 <__lshift+0x8c>
 100f9d0:	2805883a 	mov	r2,r5
 100f9d4:	0007883a 	mov	r3,zero
 100f9d8:	18c00044 	addi	r3,r3,1
 100f9dc:	10000015 	stw	zero,0(r2)
 100f9e0:	10800104 	addi	r2,r2,4
 100f9e4:	80fffc1e 	bne	r16,r3,100f9d8 <__lshift+0x70>
 100f9e8:	8405883a 	add	r2,r16,r16
 100f9ec:	1085883a 	add	r2,r2,r2
 100f9f0:	288b883a 	add	r5,r5,r2
 100f9f4:	90800417 	ldw	r2,16(r18)
 100f9f8:	91000504 	addi	r4,r18,20
 100f9fc:	a18007cc 	andi	r6,r20,31
 100fa00:	1085883a 	add	r2,r2,r2
 100fa04:	1085883a 	add	r2,r2,r2
 100fa08:	208f883a 	add	r7,r4,r2
 100fa0c:	30001e26 	beq	r6,zero,100fa88 <__lshift+0x120>
 100fa10:	00800804 	movi	r2,32
 100fa14:	1191c83a 	sub	r8,r2,r6
 100fa18:	0007883a 	mov	r3,zero
 100fa1c:	20800017 	ldw	r2,0(r4)
 100fa20:	1184983a 	sll	r2,r2,r6
 100fa24:	1884b03a 	or	r2,r3,r2
 100fa28:	28800015 	stw	r2,0(r5)
 100fa2c:	20c00017 	ldw	r3,0(r4)
 100fa30:	21000104 	addi	r4,r4,4
 100fa34:	29400104 	addi	r5,r5,4
 100fa38:	1a06d83a 	srl	r3,r3,r8
 100fa3c:	21fff736 	bltu	r4,r7,100fa1c <__lshift+0xb4>
 100fa40:	28c00015 	stw	r3,0(r5)
 100fa44:	18000126 	beq	r3,zero,100fa4c <__lshift+0xe4>
 100fa48:	8c400044 	addi	r17,r17,1
 100fa4c:	88bfffc4 	addi	r2,r17,-1
 100fa50:	98800415 	stw	r2,16(r19)
 100fa54:	a809883a 	mov	r4,r21
 100fa58:	900b883a 	mov	r5,r18
 100fa5c:	100f0240 	call	100f024 <_Bfree>
 100fa60:	9805883a 	mov	r2,r19
 100fa64:	dfc00617 	ldw	ra,24(sp)
 100fa68:	dd400517 	ldw	r21,20(sp)
 100fa6c:	dd000417 	ldw	r20,16(sp)
 100fa70:	dcc00317 	ldw	r19,12(sp)
 100fa74:	dc800217 	ldw	r18,8(sp)
 100fa78:	dc400117 	ldw	r17,4(sp)
 100fa7c:	dc000017 	ldw	r16,0(sp)
 100fa80:	dec00704 	addi	sp,sp,28
 100fa84:	f800283a 	ret
 100fa88:	20800017 	ldw	r2,0(r4)
 100fa8c:	21000104 	addi	r4,r4,4
 100fa90:	28800015 	stw	r2,0(r5)
 100fa94:	29400104 	addi	r5,r5,4
 100fa98:	21ffec2e 	bgeu	r4,r7,100fa4c <__lshift+0xe4>
 100fa9c:	20800017 	ldw	r2,0(r4)
 100faa0:	21000104 	addi	r4,r4,4
 100faa4:	28800015 	stw	r2,0(r5)
 100faa8:	29400104 	addi	r5,r5,4
 100faac:	21fff636 	bltu	r4,r7,100fa88 <__lshift+0x120>
 100fab0:	003fe606 	br	100fa4c <__lshift+0xe4>

0100fab4 <__multiply>:
 100fab4:	defff904 	addi	sp,sp,-28
 100fab8:	dcc00315 	stw	r19,12(sp)
 100fabc:	dc800215 	stw	r18,8(sp)
 100fac0:	2cc00417 	ldw	r19,16(r5)
 100fac4:	34800417 	ldw	r18,16(r6)
 100fac8:	dd000415 	stw	r20,16(sp)
 100facc:	dc400115 	stw	r17,4(sp)
 100fad0:	dfc00615 	stw	ra,24(sp)
 100fad4:	dd400515 	stw	r21,20(sp)
 100fad8:	dc000015 	stw	r16,0(sp)
 100fadc:	2823883a 	mov	r17,r5
 100fae0:	3029883a 	mov	r20,r6
 100fae4:	9c80040e 	bge	r19,r18,100faf8 <__multiply+0x44>
 100fae8:	9027883a 	mov	r19,r18
 100faec:	2c800417 	ldw	r18,16(r5)
 100faf0:	2829883a 	mov	r20,r5
 100faf4:	3023883a 	mov	r17,r6
 100faf8:	88800217 	ldw	r2,8(r17)
 100fafc:	9ca1883a 	add	r16,r19,r18
 100fb00:	89400117 	ldw	r5,4(r17)
 100fb04:	1400010e 	bge	r2,r16,100fb0c <__multiply+0x58>
 100fb08:	29400044 	addi	r5,r5,1
 100fb0c:	100f5a40 	call	100f5a4 <_Balloc>
 100fb10:	102b883a 	mov	r21,r2
 100fb14:	8405883a 	add	r2,r16,r16
 100fb18:	1085883a 	add	r2,r2,r2
 100fb1c:	a9000504 	addi	r4,r21,20
 100fb20:	209d883a 	add	r14,r4,r2
 100fb24:	2380042e 	bgeu	r4,r14,100fb38 <__multiply+0x84>
 100fb28:	2005883a 	mov	r2,r4
 100fb2c:	10000015 	stw	zero,0(r2)
 100fb30:	10800104 	addi	r2,r2,4
 100fb34:	13bffd36 	bltu	r2,r14,100fb2c <__multiply+0x78>
 100fb38:	9485883a 	add	r2,r18,r18
 100fb3c:	9cc7883a 	add	r3,r19,r19
 100fb40:	a1800504 	addi	r6,r20,20
 100fb44:	1085883a 	add	r2,r2,r2
 100fb48:	8b400504 	addi	r13,r17,20
 100fb4c:	18c7883a 	add	r3,r3,r3
 100fb50:	309f883a 	add	r15,r6,r2
 100fb54:	68d7883a 	add	r11,r13,r3
 100fb58:	33c03b2e 	bgeu	r6,r15,100fc48 <__multiply+0x194>
 100fb5c:	2019883a 	mov	r12,r4
 100fb60:	30800017 	ldw	r2,0(r6)
 100fb64:	127fffcc 	andi	r9,r2,65535
 100fb68:	48001826 	beq	r9,zero,100fbcc <__multiply+0x118>
 100fb6c:	6811883a 	mov	r8,r13
 100fb70:	600f883a 	mov	r7,r12
 100fb74:	0015883a 	mov	r10,zero
 100fb78:	40c00017 	ldw	r3,0(r8)
 100fb7c:	39400017 	ldw	r5,0(r7)
 100fb80:	42000104 	addi	r8,r8,4
 100fb84:	193fffcc 	andi	r4,r3,65535
 100fb88:	4909383a 	mul	r4,r9,r4
 100fb8c:	1806d43a 	srli	r3,r3,16
 100fb90:	28bfffcc 	andi	r2,r5,65535
 100fb94:	5085883a 	add	r2,r10,r2
 100fb98:	2089883a 	add	r4,r4,r2
 100fb9c:	48c7383a 	mul	r3,r9,r3
 100fba0:	280ad43a 	srli	r5,r5,16
 100fba4:	2004d43a 	srli	r2,r4,16
 100fba8:	3900000d 	sth	r4,0(r7)
 100fbac:	1947883a 	add	r3,r3,r5
 100fbb0:	10c5883a 	add	r2,r2,r3
 100fbb4:	3880008d 	sth	r2,2(r7)
 100fbb8:	1014d43a 	srli	r10,r2,16
 100fbbc:	39c00104 	addi	r7,r7,4
 100fbc0:	42ffed36 	bltu	r8,r11,100fb78 <__multiply+0xc4>
 100fbc4:	3a800015 	stw	r10,0(r7)
 100fbc8:	30800017 	ldw	r2,0(r6)
 100fbcc:	1012d43a 	srli	r9,r2,16
 100fbd0:	48001926 	beq	r9,zero,100fc38 <__multiply+0x184>
 100fbd4:	60800017 	ldw	r2,0(r12)
 100fbd8:	6811883a 	mov	r8,r13
 100fbdc:	600f883a 	mov	r7,r12
 100fbe0:	0015883a 	mov	r10,zero
 100fbe4:	100b883a 	mov	r5,r2
 100fbe8:	41000017 	ldw	r4,0(r8)
 100fbec:	2806d43a 	srli	r3,r5,16
 100fbf0:	3880000d 	sth	r2,0(r7)
 100fbf4:	20bfffcc 	andi	r2,r4,65535
 100fbf8:	4885383a 	mul	r2,r9,r2
 100fbfc:	50c7883a 	add	r3,r10,r3
 100fc00:	2008d43a 	srli	r4,r4,16
 100fc04:	10c5883a 	add	r2,r2,r3
 100fc08:	3880008d 	sth	r2,2(r7)
 100fc0c:	39c00104 	addi	r7,r7,4
 100fc10:	39400017 	ldw	r5,0(r7)
 100fc14:	4909383a 	mul	r4,r9,r4
 100fc18:	1004d43a 	srli	r2,r2,16
 100fc1c:	28ffffcc 	andi	r3,r5,65535
 100fc20:	20c9883a 	add	r4,r4,r3
 100fc24:	1105883a 	add	r2,r2,r4
 100fc28:	42000104 	addi	r8,r8,4
 100fc2c:	1014d43a 	srli	r10,r2,16
 100fc30:	42ffed36 	bltu	r8,r11,100fbe8 <__multiply+0x134>
 100fc34:	38800015 	stw	r2,0(r7)
 100fc38:	31800104 	addi	r6,r6,4
 100fc3c:	33c0022e 	bgeu	r6,r15,100fc48 <__multiply+0x194>
 100fc40:	63000104 	addi	r12,r12,4
 100fc44:	003fc606 	br	100fb60 <__multiply+0xac>
 100fc48:	0400090e 	bge	zero,r16,100fc70 <__multiply+0x1bc>
 100fc4c:	70bfff17 	ldw	r2,-4(r14)
 100fc50:	70ffff04 	addi	r3,r14,-4
 100fc54:	10000326 	beq	r2,zero,100fc64 <__multiply+0x1b0>
 100fc58:	00000506 	br	100fc70 <__multiply+0x1bc>
 100fc5c:	18800017 	ldw	r2,0(r3)
 100fc60:	1000031e 	bne	r2,zero,100fc70 <__multiply+0x1bc>
 100fc64:	843fffc4 	addi	r16,r16,-1
 100fc68:	18ffff04 	addi	r3,r3,-4
 100fc6c:	803ffb1e 	bne	r16,zero,100fc5c <__multiply+0x1a8>
 100fc70:	a805883a 	mov	r2,r21
 100fc74:	ac000415 	stw	r16,16(r21)
 100fc78:	dfc00617 	ldw	ra,24(sp)
 100fc7c:	dd400517 	ldw	r21,20(sp)
 100fc80:	dd000417 	ldw	r20,16(sp)
 100fc84:	dcc00317 	ldw	r19,12(sp)
 100fc88:	dc800217 	ldw	r18,8(sp)
 100fc8c:	dc400117 	ldw	r17,4(sp)
 100fc90:	dc000017 	ldw	r16,0(sp)
 100fc94:	dec00704 	addi	sp,sp,28
 100fc98:	f800283a 	ret

0100fc9c <__i2b>:
 100fc9c:	defffd04 	addi	sp,sp,-12
 100fca0:	dc000015 	stw	r16,0(sp)
 100fca4:	04000044 	movi	r16,1
 100fca8:	dc800115 	stw	r18,4(sp)
 100fcac:	2825883a 	mov	r18,r5
 100fcb0:	800b883a 	mov	r5,r16
 100fcb4:	dfc00215 	stw	ra,8(sp)
 100fcb8:	100f5a40 	call	100f5a4 <_Balloc>
 100fcbc:	14000415 	stw	r16,16(r2)
 100fcc0:	14800515 	stw	r18,20(r2)
 100fcc4:	dfc00217 	ldw	ra,8(sp)
 100fcc8:	dc800117 	ldw	r18,4(sp)
 100fccc:	dc000017 	ldw	r16,0(sp)
 100fcd0:	dec00304 	addi	sp,sp,12
 100fcd4:	f800283a 	ret

0100fcd8 <__multadd>:
 100fcd8:	defffa04 	addi	sp,sp,-24
 100fcdc:	dc800215 	stw	r18,8(sp)
 100fce0:	2c800417 	ldw	r18,16(r5)
 100fce4:	dd000415 	stw	r20,16(sp)
 100fce8:	dcc00315 	stw	r19,12(sp)
 100fcec:	dc000015 	stw	r16,0(sp)
 100fcf0:	dfc00515 	stw	ra,20(sp)
 100fcf4:	3821883a 	mov	r16,r7
 100fcf8:	dc400115 	stw	r17,4(sp)
 100fcfc:	2827883a 	mov	r19,r5
 100fd00:	2029883a 	mov	r20,r4
 100fd04:	2a000504 	addi	r8,r5,20
 100fd08:	000f883a 	mov	r7,zero
 100fd0c:	40800017 	ldw	r2,0(r8)
 100fd10:	39c00044 	addi	r7,r7,1
 100fd14:	10ffffcc 	andi	r3,r2,65535
 100fd18:	1987383a 	mul	r3,r3,r6
 100fd1c:	1004d43a 	srli	r2,r2,16
 100fd20:	1c07883a 	add	r3,r3,r16
 100fd24:	180ad43a 	srli	r5,r3,16
 100fd28:	1185383a 	mul	r2,r2,r6
 100fd2c:	18ffffcc 	andi	r3,r3,65535
 100fd30:	1145883a 	add	r2,r2,r5
 100fd34:	1008943a 	slli	r4,r2,16
 100fd38:	1020d43a 	srli	r16,r2,16
 100fd3c:	20c9883a 	add	r4,r4,r3
 100fd40:	41000015 	stw	r4,0(r8)
 100fd44:	42000104 	addi	r8,r8,4
 100fd48:	3cbff016 	blt	r7,r18,100fd0c <__multadd+0x34>
 100fd4c:	80000826 	beq	r16,zero,100fd70 <__multadd+0x98>
 100fd50:	98800217 	ldw	r2,8(r19)
 100fd54:	90800f0e 	bge	r18,r2,100fd94 <__multadd+0xbc>
 100fd58:	9485883a 	add	r2,r18,r18
 100fd5c:	1085883a 	add	r2,r2,r2
 100fd60:	14c5883a 	add	r2,r2,r19
 100fd64:	90c00044 	addi	r3,r18,1
 100fd68:	14000515 	stw	r16,20(r2)
 100fd6c:	98c00415 	stw	r3,16(r19)
 100fd70:	9805883a 	mov	r2,r19
 100fd74:	dfc00517 	ldw	ra,20(sp)
 100fd78:	dd000417 	ldw	r20,16(sp)
 100fd7c:	dcc00317 	ldw	r19,12(sp)
 100fd80:	dc800217 	ldw	r18,8(sp)
 100fd84:	dc400117 	ldw	r17,4(sp)
 100fd88:	dc000017 	ldw	r16,0(sp)
 100fd8c:	dec00604 	addi	sp,sp,24
 100fd90:	f800283a 	ret
 100fd94:	99400117 	ldw	r5,4(r19)
 100fd98:	a009883a 	mov	r4,r20
 100fd9c:	29400044 	addi	r5,r5,1
 100fda0:	100f5a40 	call	100f5a4 <_Balloc>
 100fda4:	99800417 	ldw	r6,16(r19)
 100fda8:	99400304 	addi	r5,r19,12
 100fdac:	11000304 	addi	r4,r2,12
 100fdb0:	318d883a 	add	r6,r6,r6
 100fdb4:	318d883a 	add	r6,r6,r6
 100fdb8:	31800204 	addi	r6,r6,8
 100fdbc:	1023883a 	mov	r17,r2
 100fdc0:	1009f8c0 	call	1009f8c <memcpy>
 100fdc4:	980b883a 	mov	r5,r19
 100fdc8:	a009883a 	mov	r4,r20
 100fdcc:	100f0240 	call	100f024 <_Bfree>
 100fdd0:	8827883a 	mov	r19,r17
 100fdd4:	003fe006 	br	100fd58 <__multadd+0x80>

0100fdd8 <__pow5mult>:
 100fdd8:	defffa04 	addi	sp,sp,-24
 100fddc:	308000cc 	andi	r2,r6,3
 100fde0:	dd000415 	stw	r20,16(sp)
 100fde4:	dcc00315 	stw	r19,12(sp)
 100fde8:	dc000015 	stw	r16,0(sp)
 100fdec:	dfc00515 	stw	ra,20(sp)
 100fdf0:	dc800215 	stw	r18,8(sp)
 100fdf4:	dc400115 	stw	r17,4(sp)
 100fdf8:	3021883a 	mov	r16,r6
 100fdfc:	2027883a 	mov	r19,r4
 100fe00:	2829883a 	mov	r20,r5
 100fe04:	10002b1e 	bne	r2,zero,100feb4 <__pow5mult+0xdc>
 100fe08:	8025d0ba 	srai	r18,r16,2
 100fe0c:	90001b26 	beq	r18,zero,100fe7c <__pow5mult+0xa4>
 100fe10:	9c001217 	ldw	r16,72(r19)
 100fe14:	8000081e 	bne	r16,zero,100fe38 <__pow5mult+0x60>
 100fe18:	00003006 	br	100fedc <__pow5mult+0x104>
 100fe1c:	800b883a 	mov	r5,r16
 100fe20:	800d883a 	mov	r6,r16
 100fe24:	9809883a 	mov	r4,r19
 100fe28:	90001426 	beq	r18,zero,100fe7c <__pow5mult+0xa4>
 100fe2c:	80800017 	ldw	r2,0(r16)
 100fe30:	10001b26 	beq	r2,zero,100fea0 <__pow5mult+0xc8>
 100fe34:	1021883a 	mov	r16,r2
 100fe38:	9080004c 	andi	r2,r18,1
 100fe3c:	1005003a 	cmpeq	r2,r2,zero
 100fe40:	9025d07a 	srai	r18,r18,1
 100fe44:	800d883a 	mov	r6,r16
 100fe48:	9809883a 	mov	r4,r19
 100fe4c:	a00b883a 	mov	r5,r20
 100fe50:	103ff21e 	bne	r2,zero,100fe1c <__pow5mult+0x44>
 100fe54:	100fab40 	call	100fab4 <__multiply>
 100fe58:	a00b883a 	mov	r5,r20
 100fe5c:	9809883a 	mov	r4,r19
 100fe60:	1023883a 	mov	r17,r2
 100fe64:	100f0240 	call	100f024 <_Bfree>
 100fe68:	8829883a 	mov	r20,r17
 100fe6c:	800b883a 	mov	r5,r16
 100fe70:	800d883a 	mov	r6,r16
 100fe74:	9809883a 	mov	r4,r19
 100fe78:	903fec1e 	bne	r18,zero,100fe2c <__pow5mult+0x54>
 100fe7c:	a005883a 	mov	r2,r20
 100fe80:	dfc00517 	ldw	ra,20(sp)
 100fe84:	dd000417 	ldw	r20,16(sp)
 100fe88:	dcc00317 	ldw	r19,12(sp)
 100fe8c:	dc800217 	ldw	r18,8(sp)
 100fe90:	dc400117 	ldw	r17,4(sp)
 100fe94:	dc000017 	ldw	r16,0(sp)
 100fe98:	dec00604 	addi	sp,sp,24
 100fe9c:	f800283a 	ret
 100fea0:	100fab40 	call	100fab4 <__multiply>
 100fea4:	80800015 	stw	r2,0(r16)
 100fea8:	1021883a 	mov	r16,r2
 100feac:	10000015 	stw	zero,0(r2)
 100feb0:	003fe106 	br	100fe38 <__pow5mult+0x60>
 100feb4:	1085883a 	add	r2,r2,r2
 100feb8:	00c040b4 	movhi	r3,258
 100febc:	18fd5c04 	addi	r3,r3,-2704
 100fec0:	1085883a 	add	r2,r2,r2
 100fec4:	10c5883a 	add	r2,r2,r3
 100fec8:	11bfff17 	ldw	r6,-4(r2)
 100fecc:	000f883a 	mov	r7,zero
 100fed0:	100fcd80 	call	100fcd8 <__multadd>
 100fed4:	1029883a 	mov	r20,r2
 100fed8:	003fcb06 	br	100fe08 <__pow5mult+0x30>
 100fedc:	9809883a 	mov	r4,r19
 100fee0:	01409c44 	movi	r5,625
 100fee4:	100fc9c0 	call	100fc9c <__i2b>
 100fee8:	98801215 	stw	r2,72(r19)
 100feec:	1021883a 	mov	r16,r2
 100fef0:	10000015 	stw	zero,0(r2)
 100fef4:	003fd006 	br	100fe38 <__pow5mult+0x60>

0100fef8 <__s2b>:
 100fef8:	defff904 	addi	sp,sp,-28
 100fefc:	dcc00315 	stw	r19,12(sp)
 100ff00:	dc800215 	stw	r18,8(sp)
 100ff04:	2827883a 	mov	r19,r5
 100ff08:	2025883a 	mov	r18,r4
 100ff0c:	01400244 	movi	r5,9
 100ff10:	39000204 	addi	r4,r7,8
 100ff14:	dd000415 	stw	r20,16(sp)
 100ff18:	dc400115 	stw	r17,4(sp)
 100ff1c:	dfc00615 	stw	ra,24(sp)
 100ff20:	dd400515 	stw	r21,20(sp)
 100ff24:	dc000015 	stw	r16,0(sp)
 100ff28:	3829883a 	mov	r20,r7
 100ff2c:	3023883a 	mov	r17,r6
 100ff30:	1012a4c0 	call	1012a4c <__divsi3>
 100ff34:	00c00044 	movi	r3,1
 100ff38:	1880350e 	bge	r3,r2,1010010 <__s2b+0x118>
 100ff3c:	000b883a 	mov	r5,zero
 100ff40:	18c7883a 	add	r3,r3,r3
 100ff44:	29400044 	addi	r5,r5,1
 100ff48:	18bffd16 	blt	r3,r2,100ff40 <__s2b+0x48>
 100ff4c:	9009883a 	mov	r4,r18
 100ff50:	100f5a40 	call	100f5a4 <_Balloc>
 100ff54:	1011883a 	mov	r8,r2
 100ff58:	d8800717 	ldw	r2,28(sp)
 100ff5c:	00c00044 	movi	r3,1
 100ff60:	01800244 	movi	r6,9
 100ff64:	40800515 	stw	r2,20(r8)
 100ff68:	40c00415 	stw	r3,16(r8)
 100ff6c:	3440260e 	bge	r6,r17,1010008 <__s2b+0x110>
 100ff70:	3021883a 	mov	r16,r6
 100ff74:	99ab883a 	add	r21,r19,r6
 100ff78:	9c05883a 	add	r2,r19,r16
 100ff7c:	11c00007 	ldb	r7,0(r2)
 100ff80:	400b883a 	mov	r5,r8
 100ff84:	9009883a 	mov	r4,r18
 100ff88:	39fff404 	addi	r7,r7,-48
 100ff8c:	01800284 	movi	r6,10
 100ff90:	100fcd80 	call	100fcd8 <__multadd>
 100ff94:	84000044 	addi	r16,r16,1
 100ff98:	1011883a 	mov	r8,r2
 100ff9c:	8c3ff61e 	bne	r17,r16,100ff78 <__s2b+0x80>
 100ffa0:	ac45883a 	add	r2,r21,r17
 100ffa4:	117ffe04 	addi	r5,r2,-8
 100ffa8:	880d883a 	mov	r6,r17
 100ffac:	35000c0e 	bge	r6,r20,100ffe0 <__s2b+0xe8>
 100ffb0:	a185c83a 	sub	r2,r20,r6
 100ffb4:	2821883a 	mov	r16,r5
 100ffb8:	28a3883a 	add	r17,r5,r2
 100ffbc:	81c00007 	ldb	r7,0(r16)
 100ffc0:	400b883a 	mov	r5,r8
 100ffc4:	9009883a 	mov	r4,r18
 100ffc8:	39fff404 	addi	r7,r7,-48
 100ffcc:	01800284 	movi	r6,10
 100ffd0:	100fcd80 	call	100fcd8 <__multadd>
 100ffd4:	84000044 	addi	r16,r16,1
 100ffd8:	1011883a 	mov	r8,r2
 100ffdc:	847ff71e 	bne	r16,r17,100ffbc <__s2b+0xc4>
 100ffe0:	4005883a 	mov	r2,r8
 100ffe4:	dfc00617 	ldw	ra,24(sp)
 100ffe8:	dd400517 	ldw	r21,20(sp)
 100ffec:	dd000417 	ldw	r20,16(sp)
 100fff0:	dcc00317 	ldw	r19,12(sp)
 100fff4:	dc800217 	ldw	r18,8(sp)
 100fff8:	dc400117 	ldw	r17,4(sp)
 100fffc:	dc000017 	ldw	r16,0(sp)
 1010000:	dec00704 	addi	sp,sp,28
 1010004:	f800283a 	ret
 1010008:	99400284 	addi	r5,r19,10
 101000c:	003fe706 	br	100ffac <__s2b+0xb4>
 1010010:	000b883a 	mov	r5,zero
 1010014:	003fcd06 	br	100ff4c <__s2b+0x54>

01010018 <_realloc_r>:
 1010018:	defff404 	addi	sp,sp,-48
 101001c:	dd800815 	stw	r22,32(sp)
 1010020:	dc800415 	stw	r18,16(sp)
 1010024:	dc400315 	stw	r17,12(sp)
 1010028:	dfc00b15 	stw	ra,44(sp)
 101002c:	df000a15 	stw	fp,40(sp)
 1010030:	ddc00915 	stw	r23,36(sp)
 1010034:	dd400715 	stw	r21,28(sp)
 1010038:	dd000615 	stw	r20,24(sp)
 101003c:	dcc00515 	stw	r19,20(sp)
 1010040:	dc000215 	stw	r16,8(sp)
 1010044:	2825883a 	mov	r18,r5
 1010048:	3023883a 	mov	r17,r6
 101004c:	202d883a 	mov	r22,r4
 1010050:	2800c926 	beq	r5,zero,1010378 <_realloc_r+0x360>
 1010054:	1013f780 	call	1013f78 <__malloc_lock>
 1010058:	943ffe04 	addi	r16,r18,-8
 101005c:	88c002c4 	addi	r3,r17,11
 1010060:	00800584 	movi	r2,22
 1010064:	82000117 	ldw	r8,4(r16)
 1010068:	10c01b2e 	bgeu	r2,r3,10100d8 <_realloc_r+0xc0>
 101006c:	00bffe04 	movi	r2,-8
 1010070:	188e703a 	and	r7,r3,r2
 1010074:	3839883a 	mov	fp,r7
 1010078:	38001a16 	blt	r7,zero,10100e4 <_realloc_r+0xcc>
 101007c:	e4401936 	bltu	fp,r17,10100e4 <_realloc_r+0xcc>
 1010080:	013fff04 	movi	r4,-4
 1010084:	4126703a 	and	r19,r8,r4
 1010088:	99c02616 	blt	r19,r7,1010124 <_realloc_r+0x10c>
 101008c:	802b883a 	mov	r21,r16
 1010090:	9829883a 	mov	r20,r19
 1010094:	84000204 	addi	r16,r16,8
 1010098:	a80f883a 	mov	r7,r21
 101009c:	a70dc83a 	sub	r6,r20,fp
 10100a0:	008003c4 	movi	r2,15
 10100a4:	1180c136 	bltu	r2,r6,10103ac <_realloc_r+0x394>
 10100a8:	38800117 	ldw	r2,4(r7)
 10100ac:	a549883a 	add	r4,r20,r21
 10100b0:	1080004c 	andi	r2,r2,1
 10100b4:	a084b03a 	or	r2,r20,r2
 10100b8:	38800115 	stw	r2,4(r7)
 10100bc:	20c00117 	ldw	r3,4(r4)
 10100c0:	18c00054 	ori	r3,r3,1
 10100c4:	20c00115 	stw	r3,4(r4)
 10100c8:	b009883a 	mov	r4,r22
 10100cc:	10140800 	call	1014080 <__malloc_unlock>
 10100d0:	8023883a 	mov	r17,r16
 10100d4:	00000606 	br	10100f0 <_realloc_r+0xd8>
 10100d8:	01c00404 	movi	r7,16
 10100dc:	3839883a 	mov	fp,r7
 10100e0:	e47fe72e 	bgeu	fp,r17,1010080 <_realloc_r+0x68>
 10100e4:	00800304 	movi	r2,12
 10100e8:	0023883a 	mov	r17,zero
 10100ec:	b0800015 	stw	r2,0(r22)
 10100f0:	8805883a 	mov	r2,r17
 10100f4:	dfc00b17 	ldw	ra,44(sp)
 10100f8:	df000a17 	ldw	fp,40(sp)
 10100fc:	ddc00917 	ldw	r23,36(sp)
 1010100:	dd800817 	ldw	r22,32(sp)
 1010104:	dd400717 	ldw	r21,28(sp)
 1010108:	dd000617 	ldw	r20,24(sp)
 101010c:	dcc00517 	ldw	r19,20(sp)
 1010110:	dc800417 	ldw	r18,16(sp)
 1010114:	dc400317 	ldw	r17,12(sp)
 1010118:	dc000217 	ldw	r16,8(sp)
 101011c:	dec00c04 	addi	sp,sp,48
 1010120:	f800283a 	ret
 1010124:	008040b4 	movhi	r2,258
 1010128:	10bdfd04 	addi	r2,r2,-2060
 101012c:	12400217 	ldw	r9,8(r2)
 1010130:	84cd883a 	add	r6,r16,r19
 1010134:	802b883a 	mov	r21,r16
 1010138:	3240b926 	beq	r6,r9,1010420 <_realloc_r+0x408>
 101013c:	31400117 	ldw	r5,4(r6)
 1010140:	00bfff84 	movi	r2,-2
 1010144:	2884703a 	and	r2,r5,r2
 1010148:	1185883a 	add	r2,r2,r6
 101014c:	10c00117 	ldw	r3,4(r2)
 1010150:	18c0004c 	andi	r3,r3,1
 1010154:	1807003a 	cmpeq	r3,r3,zero
 1010158:	1800a326 	beq	r3,zero,10103e8 <_realloc_r+0x3d0>
 101015c:	2908703a 	and	r4,r5,r4
 1010160:	9929883a 	add	r20,r19,r4
 1010164:	a1c0a30e 	bge	r20,r7,10103f4 <_realloc_r+0x3dc>
 1010168:	4080004c 	andi	r2,r8,1
 101016c:	1000551e 	bne	r2,zero,10102c4 <_realloc_r+0x2ac>
 1010170:	80800017 	ldw	r2,0(r16)
 1010174:	80afc83a 	sub	r23,r16,r2
 1010178:	b8c00117 	ldw	r3,4(r23)
 101017c:	00bfff04 	movi	r2,-4
 1010180:	1884703a 	and	r2,r3,r2
 1010184:	30002e26 	beq	r6,zero,1010240 <_realloc_r+0x228>
 1010188:	3240b926 	beq	r6,r9,1010470 <_realloc_r+0x458>
 101018c:	98a9883a 	add	r20,r19,r2
 1010190:	2509883a 	add	r4,r4,r20
 1010194:	d9000015 	stw	r4,0(sp)
 1010198:	21c02a16 	blt	r4,r7,1010244 <_realloc_r+0x22c>
 101019c:	30800317 	ldw	r2,12(r6)
 10101a0:	30c00217 	ldw	r3,8(r6)
 10101a4:	01400904 	movi	r5,36
 10101a8:	99bfff04 	addi	r6,r19,-4
 10101ac:	18800315 	stw	r2,12(r3)
 10101b0:	10c00215 	stw	r3,8(r2)
 10101b4:	b9000317 	ldw	r4,12(r23)
 10101b8:	b8800217 	ldw	r2,8(r23)
 10101bc:	b82b883a 	mov	r21,r23
 10101c0:	bc000204 	addi	r16,r23,8
 10101c4:	20800215 	stw	r2,8(r4)
 10101c8:	11000315 	stw	r4,12(r2)
 10101cc:	2980e436 	bltu	r5,r6,1010560 <_realloc_r+0x548>
 10101d0:	008004c4 	movi	r2,19
 10101d4:	9009883a 	mov	r4,r18
 10101d8:	8011883a 	mov	r8,r16
 10101dc:	11800f2e 	bgeu	r2,r6,101021c <_realloc_r+0x204>
 10101e0:	90800017 	ldw	r2,0(r18)
 10101e4:	ba000404 	addi	r8,r23,16
 10101e8:	91000204 	addi	r4,r18,8
 10101ec:	b8800215 	stw	r2,8(r23)
 10101f0:	90c00117 	ldw	r3,4(r18)
 10101f4:	008006c4 	movi	r2,27
 10101f8:	b8c00315 	stw	r3,12(r23)
 10101fc:	1180072e 	bgeu	r2,r6,101021c <_realloc_r+0x204>
 1010200:	90c00217 	ldw	r3,8(r18)
 1010204:	ba000604 	addi	r8,r23,24
 1010208:	91000404 	addi	r4,r18,16
 101020c:	b8c00415 	stw	r3,16(r23)
 1010210:	90800317 	ldw	r2,12(r18)
 1010214:	b8800515 	stw	r2,20(r23)
 1010218:	3140e726 	beq	r6,r5,10105b8 <_realloc_r+0x5a0>
 101021c:	20800017 	ldw	r2,0(r4)
 1010220:	dd000017 	ldw	r20,0(sp)
 1010224:	b80f883a 	mov	r7,r23
 1010228:	40800015 	stw	r2,0(r8)
 101022c:	20c00117 	ldw	r3,4(r4)
 1010230:	40c00115 	stw	r3,4(r8)
 1010234:	20800217 	ldw	r2,8(r4)
 1010238:	40800215 	stw	r2,8(r8)
 101023c:	003f9706 	br	101009c <_realloc_r+0x84>
 1010240:	98a9883a 	add	r20,r19,r2
 1010244:	a1c01f16 	blt	r20,r7,10102c4 <_realloc_r+0x2ac>
 1010248:	b8c00317 	ldw	r3,12(r23)
 101024c:	b8800217 	ldw	r2,8(r23)
 1010250:	99bfff04 	addi	r6,r19,-4
 1010254:	01400904 	movi	r5,36
 1010258:	b82b883a 	mov	r21,r23
 101025c:	18800215 	stw	r2,8(r3)
 1010260:	10c00315 	stw	r3,12(r2)
 1010264:	bc000204 	addi	r16,r23,8
 1010268:	2980c336 	bltu	r5,r6,1010578 <_realloc_r+0x560>
 101026c:	008004c4 	movi	r2,19
 1010270:	9009883a 	mov	r4,r18
 1010274:	8011883a 	mov	r8,r16
 1010278:	11800f2e 	bgeu	r2,r6,10102b8 <_realloc_r+0x2a0>
 101027c:	90800017 	ldw	r2,0(r18)
 1010280:	ba000404 	addi	r8,r23,16
 1010284:	91000204 	addi	r4,r18,8
 1010288:	b8800215 	stw	r2,8(r23)
 101028c:	90c00117 	ldw	r3,4(r18)
 1010290:	008006c4 	movi	r2,27
 1010294:	b8c00315 	stw	r3,12(r23)
 1010298:	1180072e 	bgeu	r2,r6,10102b8 <_realloc_r+0x2a0>
 101029c:	90c00217 	ldw	r3,8(r18)
 10102a0:	ba000604 	addi	r8,r23,24
 10102a4:	91000404 	addi	r4,r18,16
 10102a8:	b8c00415 	stw	r3,16(r23)
 10102ac:	90800317 	ldw	r2,12(r18)
 10102b0:	b8800515 	stw	r2,20(r23)
 10102b4:	3140c726 	beq	r6,r5,10105d4 <_realloc_r+0x5bc>
 10102b8:	20800017 	ldw	r2,0(r4)
 10102bc:	b80f883a 	mov	r7,r23
 10102c0:	003fd906 	br	1010228 <_realloc_r+0x210>
 10102c4:	880b883a 	mov	r5,r17
 10102c8:	b009883a 	mov	r4,r22
 10102cc:	10096f40 	call	10096f4 <_malloc_r>
 10102d0:	1023883a 	mov	r17,r2
 10102d4:	10002526 	beq	r2,zero,101036c <_realloc_r+0x354>
 10102d8:	80800117 	ldw	r2,4(r16)
 10102dc:	00ffff84 	movi	r3,-2
 10102e0:	893ffe04 	addi	r4,r17,-8
 10102e4:	10c4703a 	and	r2,r2,r3
 10102e8:	8085883a 	add	r2,r16,r2
 10102ec:	20809526 	beq	r4,r2,1010544 <_realloc_r+0x52c>
 10102f0:	99bfff04 	addi	r6,r19,-4
 10102f4:	01c00904 	movi	r7,36
 10102f8:	39804536 	bltu	r7,r6,1010410 <_realloc_r+0x3f8>
 10102fc:	008004c4 	movi	r2,19
 1010300:	9009883a 	mov	r4,r18
 1010304:	880b883a 	mov	r5,r17
 1010308:	11800f2e 	bgeu	r2,r6,1010348 <_realloc_r+0x330>
 101030c:	90800017 	ldw	r2,0(r18)
 1010310:	89400204 	addi	r5,r17,8
 1010314:	91000204 	addi	r4,r18,8
 1010318:	88800015 	stw	r2,0(r17)
 101031c:	90c00117 	ldw	r3,4(r18)
 1010320:	008006c4 	movi	r2,27
 1010324:	88c00115 	stw	r3,4(r17)
 1010328:	1180072e 	bgeu	r2,r6,1010348 <_realloc_r+0x330>
 101032c:	90c00217 	ldw	r3,8(r18)
 1010330:	89400404 	addi	r5,r17,16
 1010334:	91000404 	addi	r4,r18,16
 1010338:	88c00215 	stw	r3,8(r17)
 101033c:	90800317 	ldw	r2,12(r18)
 1010340:	88800315 	stw	r2,12(r17)
 1010344:	31c09126 	beq	r6,r7,101058c <_realloc_r+0x574>
 1010348:	20800017 	ldw	r2,0(r4)
 101034c:	28800015 	stw	r2,0(r5)
 1010350:	20c00117 	ldw	r3,4(r4)
 1010354:	28c00115 	stw	r3,4(r5)
 1010358:	20800217 	ldw	r2,8(r4)
 101035c:	28800215 	stw	r2,8(r5)
 1010360:	900b883a 	mov	r5,r18
 1010364:	b009883a 	mov	r4,r22
 1010368:	100e49c0 	call	100e49c <_free_r>
 101036c:	b009883a 	mov	r4,r22
 1010370:	10140800 	call	1014080 <__malloc_unlock>
 1010374:	003f5e06 	br	10100f0 <_realloc_r+0xd8>
 1010378:	300b883a 	mov	r5,r6
 101037c:	dfc00b17 	ldw	ra,44(sp)
 1010380:	df000a17 	ldw	fp,40(sp)
 1010384:	ddc00917 	ldw	r23,36(sp)
 1010388:	dd800817 	ldw	r22,32(sp)
 101038c:	dd400717 	ldw	r21,28(sp)
 1010390:	dd000617 	ldw	r20,24(sp)
 1010394:	dcc00517 	ldw	r19,20(sp)
 1010398:	dc800417 	ldw	r18,16(sp)
 101039c:	dc400317 	ldw	r17,12(sp)
 10103a0:	dc000217 	ldw	r16,8(sp)
 10103a4:	dec00c04 	addi	sp,sp,48
 10103a8:	10096f41 	jmpi	10096f4 <_malloc_r>
 10103ac:	38800117 	ldw	r2,4(r7)
 10103b0:	e54b883a 	add	r5,fp,r21
 10103b4:	31000054 	ori	r4,r6,1
 10103b8:	1080004c 	andi	r2,r2,1
 10103bc:	1704b03a 	or	r2,r2,fp
 10103c0:	38800115 	stw	r2,4(r7)
 10103c4:	29000115 	stw	r4,4(r5)
 10103c8:	2987883a 	add	r3,r5,r6
 10103cc:	18800117 	ldw	r2,4(r3)
 10103d0:	29400204 	addi	r5,r5,8
 10103d4:	b009883a 	mov	r4,r22
 10103d8:	10800054 	ori	r2,r2,1
 10103dc:	18800115 	stw	r2,4(r3)
 10103e0:	100e49c0 	call	100e49c <_free_r>
 10103e4:	003f3806 	br	10100c8 <_realloc_r+0xb0>
 10103e8:	000d883a 	mov	r6,zero
 10103ec:	0009883a 	mov	r4,zero
 10103f0:	003f5d06 	br	1010168 <_realloc_r+0x150>
 10103f4:	30c00217 	ldw	r3,8(r6)
 10103f8:	30800317 	ldw	r2,12(r6)
 10103fc:	800f883a 	mov	r7,r16
 1010400:	84000204 	addi	r16,r16,8
 1010404:	10c00215 	stw	r3,8(r2)
 1010408:	18800315 	stw	r2,12(r3)
 101040c:	003f2306 	br	101009c <_realloc_r+0x84>
 1010410:	8809883a 	mov	r4,r17
 1010414:	900b883a 	mov	r5,r18
 1010418:	100a02c0 	call	100a02c <memmove>
 101041c:	003fd006 	br	1010360 <_realloc_r+0x348>
 1010420:	30800117 	ldw	r2,4(r6)
 1010424:	e0c00404 	addi	r3,fp,16
 1010428:	1108703a 	and	r4,r2,r4
 101042c:	9905883a 	add	r2,r19,r4
 1010430:	10ff4d16 	blt	r2,r3,1010168 <_realloc_r+0x150>
 1010434:	1705c83a 	sub	r2,r2,fp
 1010438:	870b883a 	add	r5,r16,fp
 101043c:	10800054 	ori	r2,r2,1
 1010440:	28800115 	stw	r2,4(r5)
 1010444:	80c00117 	ldw	r3,4(r16)
 1010448:	008040b4 	movhi	r2,258
 101044c:	10bdfd04 	addi	r2,r2,-2060
 1010450:	b009883a 	mov	r4,r22
 1010454:	18c0004c 	andi	r3,r3,1
 1010458:	e0c6b03a 	or	r3,fp,r3
 101045c:	11400215 	stw	r5,8(r2)
 1010460:	80c00115 	stw	r3,4(r16)
 1010464:	10140800 	call	1014080 <__malloc_unlock>
 1010468:	84400204 	addi	r17,r16,8
 101046c:	003f2006 	br	10100f0 <_realloc_r+0xd8>
 1010470:	98a9883a 	add	r20,r19,r2
 1010474:	2509883a 	add	r4,r4,r20
 1010478:	e0800404 	addi	r2,fp,16
 101047c:	d9000115 	stw	r4,4(sp)
 1010480:	20bf7016 	blt	r4,r2,1010244 <_realloc_r+0x22c>
 1010484:	b8c00317 	ldw	r3,12(r23)
 1010488:	b8800217 	ldw	r2,8(r23)
 101048c:	99bfff04 	addi	r6,r19,-4
 1010490:	01400904 	movi	r5,36
 1010494:	18800215 	stw	r2,8(r3)
 1010498:	10c00315 	stw	r3,12(r2)
 101049c:	bc400204 	addi	r17,r23,8
 10104a0:	29804136 	bltu	r5,r6,10105a8 <_realloc_r+0x590>
 10104a4:	008004c4 	movi	r2,19
 10104a8:	9009883a 	mov	r4,r18
 10104ac:	880f883a 	mov	r7,r17
 10104b0:	11800f2e 	bgeu	r2,r6,10104f0 <_realloc_r+0x4d8>
 10104b4:	90800017 	ldw	r2,0(r18)
 10104b8:	b9c00404 	addi	r7,r23,16
 10104bc:	91000204 	addi	r4,r18,8
 10104c0:	b8800215 	stw	r2,8(r23)
 10104c4:	90c00117 	ldw	r3,4(r18)
 10104c8:	008006c4 	movi	r2,27
 10104cc:	b8c00315 	stw	r3,12(r23)
 10104d0:	1180072e 	bgeu	r2,r6,10104f0 <_realloc_r+0x4d8>
 10104d4:	90c00217 	ldw	r3,8(r18)
 10104d8:	b9c00604 	addi	r7,r23,24
 10104dc:	91000404 	addi	r4,r18,16
 10104e0:	b8c00415 	stw	r3,16(r23)
 10104e4:	90800317 	ldw	r2,12(r18)
 10104e8:	b8800515 	stw	r2,20(r23)
 10104ec:	31404026 	beq	r6,r5,10105f0 <_realloc_r+0x5d8>
 10104f0:	20800017 	ldw	r2,0(r4)
 10104f4:	38800015 	stw	r2,0(r7)
 10104f8:	20c00117 	ldw	r3,4(r4)
 10104fc:	38c00115 	stw	r3,4(r7)
 1010500:	20800217 	ldw	r2,8(r4)
 1010504:	38800215 	stw	r2,8(r7)
 1010508:	d8c00117 	ldw	r3,4(sp)
 101050c:	bf0b883a 	add	r5,r23,fp
 1010510:	b009883a 	mov	r4,r22
 1010514:	1f05c83a 	sub	r2,r3,fp
 1010518:	10800054 	ori	r2,r2,1
 101051c:	28800115 	stw	r2,4(r5)
 1010520:	b8c00117 	ldw	r3,4(r23)
 1010524:	008040b4 	movhi	r2,258
 1010528:	10bdfd04 	addi	r2,r2,-2060
 101052c:	11400215 	stw	r5,8(r2)
 1010530:	18c0004c 	andi	r3,r3,1
 1010534:	e0c6b03a 	or	r3,fp,r3
 1010538:	b8c00115 	stw	r3,4(r23)
 101053c:	10140800 	call	1014080 <__malloc_unlock>
 1010540:	003eeb06 	br	10100f0 <_realloc_r+0xd8>
 1010544:	20800117 	ldw	r2,4(r4)
 1010548:	00ffff04 	movi	r3,-4
 101054c:	800f883a 	mov	r7,r16
 1010550:	10c4703a 	and	r2,r2,r3
 1010554:	98a9883a 	add	r20,r19,r2
 1010558:	84000204 	addi	r16,r16,8
 101055c:	003ecf06 	br	101009c <_realloc_r+0x84>
 1010560:	900b883a 	mov	r5,r18
 1010564:	8009883a 	mov	r4,r16
 1010568:	100a02c0 	call	100a02c <memmove>
 101056c:	dd000017 	ldw	r20,0(sp)
 1010570:	b80f883a 	mov	r7,r23
 1010574:	003ec906 	br	101009c <_realloc_r+0x84>
 1010578:	900b883a 	mov	r5,r18
 101057c:	8009883a 	mov	r4,r16
 1010580:	100a02c0 	call	100a02c <memmove>
 1010584:	b80f883a 	mov	r7,r23
 1010588:	003ec406 	br	101009c <_realloc_r+0x84>
 101058c:	90c00417 	ldw	r3,16(r18)
 1010590:	89400604 	addi	r5,r17,24
 1010594:	91000604 	addi	r4,r18,24
 1010598:	88c00415 	stw	r3,16(r17)
 101059c:	90800517 	ldw	r2,20(r18)
 10105a0:	88800515 	stw	r2,20(r17)
 10105a4:	003f6806 	br	1010348 <_realloc_r+0x330>
 10105a8:	900b883a 	mov	r5,r18
 10105ac:	8809883a 	mov	r4,r17
 10105b0:	100a02c0 	call	100a02c <memmove>
 10105b4:	003fd406 	br	1010508 <_realloc_r+0x4f0>
 10105b8:	90c00417 	ldw	r3,16(r18)
 10105bc:	91000604 	addi	r4,r18,24
 10105c0:	ba000804 	addi	r8,r23,32
 10105c4:	b8c00615 	stw	r3,24(r23)
 10105c8:	90800517 	ldw	r2,20(r18)
 10105cc:	b8800715 	stw	r2,28(r23)
 10105d0:	003f1206 	br	101021c <_realloc_r+0x204>
 10105d4:	90c00417 	ldw	r3,16(r18)
 10105d8:	91000604 	addi	r4,r18,24
 10105dc:	ba000804 	addi	r8,r23,32
 10105e0:	b8c00615 	stw	r3,24(r23)
 10105e4:	90800517 	ldw	r2,20(r18)
 10105e8:	b8800715 	stw	r2,28(r23)
 10105ec:	003f3206 	br	10102b8 <_realloc_r+0x2a0>
 10105f0:	90c00417 	ldw	r3,16(r18)
 10105f4:	91000604 	addi	r4,r18,24
 10105f8:	b9c00804 	addi	r7,r23,32
 10105fc:	b8c00615 	stw	r3,24(r23)
 1010600:	90800517 	ldw	r2,20(r18)
 1010604:	b8800715 	stw	r2,28(r23)
 1010608:	003fb906 	br	10104f0 <_realloc_r+0x4d8>

0101060c <__isinfd>:
 101060c:	200d883a 	mov	r6,r4
 1010610:	0109c83a 	sub	r4,zero,r4
 1010614:	2188b03a 	or	r4,r4,r6
 1010618:	2008d7fa 	srli	r4,r4,31
 101061c:	00a00034 	movhi	r2,32768
 1010620:	10bfffc4 	addi	r2,r2,-1
 1010624:	1144703a 	and	r2,r2,r5
 1010628:	2088b03a 	or	r4,r4,r2
 101062c:	009ffc34 	movhi	r2,32752
 1010630:	1105c83a 	sub	r2,r2,r4
 1010634:	0087c83a 	sub	r3,zero,r2
 1010638:	10c4b03a 	or	r2,r2,r3
 101063c:	1004d7fa 	srli	r2,r2,31
 1010640:	00c00044 	movi	r3,1
 1010644:	1885c83a 	sub	r2,r3,r2
 1010648:	f800283a 	ret

0101064c <__isnand>:
 101064c:	200d883a 	mov	r6,r4
 1010650:	0109c83a 	sub	r4,zero,r4
 1010654:	2188b03a 	or	r4,r4,r6
 1010658:	2008d7fa 	srli	r4,r4,31
 101065c:	00a00034 	movhi	r2,32768
 1010660:	10bfffc4 	addi	r2,r2,-1
 1010664:	1144703a 	and	r2,r2,r5
 1010668:	2088b03a 	or	r4,r4,r2
 101066c:	009ffc34 	movhi	r2,32752
 1010670:	1105c83a 	sub	r2,r2,r4
 1010674:	1004d7fa 	srli	r2,r2,31
 1010678:	f800283a 	ret

0101067c <__sclose>:
 101067c:	2940038f 	ldh	r5,14(r5)
 1010680:	10109b01 	jmpi	10109b0 <_close_r>

01010684 <__sseek>:
 1010684:	defffe04 	addi	sp,sp,-8
 1010688:	dc000015 	stw	r16,0(sp)
 101068c:	2821883a 	mov	r16,r5
 1010690:	2940038f 	ldh	r5,14(r5)
 1010694:	dfc00115 	stw	ra,4(sp)
 1010698:	1010c280 	call	1010c28 <_lseek_r>
 101069c:	1007883a 	mov	r3,r2
 10106a0:	00bfffc4 	movi	r2,-1
 10106a4:	18800926 	beq	r3,r2,10106cc <__sseek+0x48>
 10106a8:	8080030b 	ldhu	r2,12(r16)
 10106ac:	80c01415 	stw	r3,80(r16)
 10106b0:	10840014 	ori	r2,r2,4096
 10106b4:	8080030d 	sth	r2,12(r16)
 10106b8:	1805883a 	mov	r2,r3
 10106bc:	dfc00117 	ldw	ra,4(sp)
 10106c0:	dc000017 	ldw	r16,0(sp)
 10106c4:	dec00204 	addi	sp,sp,8
 10106c8:	f800283a 	ret
 10106cc:	8080030b 	ldhu	r2,12(r16)
 10106d0:	10bbffcc 	andi	r2,r2,61439
 10106d4:	8080030d 	sth	r2,12(r16)
 10106d8:	1805883a 	mov	r2,r3
 10106dc:	dfc00117 	ldw	ra,4(sp)
 10106e0:	dc000017 	ldw	r16,0(sp)
 10106e4:	dec00204 	addi	sp,sp,8
 10106e8:	f800283a 	ret

010106ec <__swrite>:
 10106ec:	2880030b 	ldhu	r2,12(r5)
 10106f0:	defffb04 	addi	sp,sp,-20
 10106f4:	dcc00315 	stw	r19,12(sp)
 10106f8:	1080400c 	andi	r2,r2,256
 10106fc:	dc800215 	stw	r18,8(sp)
 1010700:	dc400115 	stw	r17,4(sp)
 1010704:	dc000015 	stw	r16,0(sp)
 1010708:	3027883a 	mov	r19,r6
 101070c:	3825883a 	mov	r18,r7
 1010710:	dfc00415 	stw	ra,16(sp)
 1010714:	2821883a 	mov	r16,r5
 1010718:	000d883a 	mov	r6,zero
 101071c:	01c00084 	movi	r7,2
 1010720:	2023883a 	mov	r17,r4
 1010724:	10000226 	beq	r2,zero,1010730 <__swrite+0x44>
 1010728:	2940038f 	ldh	r5,14(r5)
 101072c:	1010c280 	call	1010c28 <_lseek_r>
 1010730:	8080030b 	ldhu	r2,12(r16)
 1010734:	8140038f 	ldh	r5,14(r16)
 1010738:	8809883a 	mov	r4,r17
 101073c:	10bbffcc 	andi	r2,r2,61439
 1010740:	980d883a 	mov	r6,r19
 1010744:	900f883a 	mov	r7,r18
 1010748:	8080030d 	sth	r2,12(r16)
 101074c:	dfc00417 	ldw	ra,16(sp)
 1010750:	dcc00317 	ldw	r19,12(sp)
 1010754:	dc800217 	ldw	r18,8(sp)
 1010758:	dc400117 	ldw	r17,4(sp)
 101075c:	dc000017 	ldw	r16,0(sp)
 1010760:	dec00504 	addi	sp,sp,20
 1010764:	10108841 	jmpi	1010884 <_write_r>

01010768 <__sread>:
 1010768:	defffe04 	addi	sp,sp,-8
 101076c:	dc000015 	stw	r16,0(sp)
 1010770:	2821883a 	mov	r16,r5
 1010774:	2940038f 	ldh	r5,14(r5)
 1010778:	dfc00115 	stw	ra,4(sp)
 101077c:	1010ca00 	call	1010ca0 <_read_r>
 1010780:	1007883a 	mov	r3,r2
 1010784:	10000816 	blt	r2,zero,10107a8 <__sread+0x40>
 1010788:	80801417 	ldw	r2,80(r16)
 101078c:	10c5883a 	add	r2,r2,r3
 1010790:	80801415 	stw	r2,80(r16)
 1010794:	1805883a 	mov	r2,r3
 1010798:	dfc00117 	ldw	ra,4(sp)
 101079c:	dc000017 	ldw	r16,0(sp)
 10107a0:	dec00204 	addi	sp,sp,8
 10107a4:	f800283a 	ret
 10107a8:	8080030b 	ldhu	r2,12(r16)
 10107ac:	10bbffcc 	andi	r2,r2,61439
 10107b0:	8080030d 	sth	r2,12(r16)
 10107b4:	1805883a 	mov	r2,r3
 10107b8:	dfc00117 	ldw	ra,4(sp)
 10107bc:	dc000017 	ldw	r16,0(sp)
 10107c0:	dec00204 	addi	sp,sp,8
 10107c4:	f800283a 	ret

010107c8 <strcmp>:
 10107c8:	2144b03a 	or	r2,r4,r5
 10107cc:	108000cc 	andi	r2,r2,3
 10107d0:	10001d1e 	bne	r2,zero,1010848 <strcmp+0x80>
 10107d4:	200f883a 	mov	r7,r4
 10107d8:	28800017 	ldw	r2,0(r5)
 10107dc:	21000017 	ldw	r4,0(r4)
 10107e0:	280d883a 	mov	r6,r5
 10107e4:	2080161e 	bne	r4,r2,1010840 <strcmp+0x78>
 10107e8:	023fbff4 	movhi	r8,65279
 10107ec:	423fbfc4 	addi	r8,r8,-257
 10107f0:	2207883a 	add	r3,r4,r8
 10107f4:	01602074 	movhi	r5,32897
 10107f8:	29602004 	addi	r5,r5,-32640
 10107fc:	1946703a 	and	r3,r3,r5
 1010800:	0104303a 	nor	r2,zero,r4
 1010804:	10c4703a 	and	r2,r2,r3
 1010808:	10001c1e 	bne	r2,zero,101087c <strcmp+0xb4>
 101080c:	4013883a 	mov	r9,r8
 1010810:	2811883a 	mov	r8,r5
 1010814:	00000106 	br	101081c <strcmp+0x54>
 1010818:	1800181e 	bne	r3,zero,101087c <strcmp+0xb4>
 101081c:	39c00104 	addi	r7,r7,4
 1010820:	39000017 	ldw	r4,0(r7)
 1010824:	31800104 	addi	r6,r6,4
 1010828:	31400017 	ldw	r5,0(r6)
 101082c:	2245883a 	add	r2,r4,r9
 1010830:	1204703a 	and	r2,r2,r8
 1010834:	0106303a 	nor	r3,zero,r4
 1010838:	1886703a 	and	r3,r3,r2
 101083c:	217ff626 	beq	r4,r5,1010818 <strcmp+0x50>
 1010840:	3809883a 	mov	r4,r7
 1010844:	300b883a 	mov	r5,r6
 1010848:	20c00007 	ldb	r3,0(r4)
 101084c:	1800051e 	bne	r3,zero,1010864 <strcmp+0x9c>
 1010850:	00000606 	br	101086c <strcmp+0xa4>
 1010854:	21000044 	addi	r4,r4,1
 1010858:	20c00007 	ldb	r3,0(r4)
 101085c:	29400044 	addi	r5,r5,1
 1010860:	18000226 	beq	r3,zero,101086c <strcmp+0xa4>
 1010864:	28800007 	ldb	r2,0(r5)
 1010868:	18bffa26 	beq	r3,r2,1010854 <strcmp+0x8c>
 101086c:	20c00003 	ldbu	r3,0(r4)
 1010870:	28800003 	ldbu	r2,0(r5)
 1010874:	1885c83a 	sub	r2,r3,r2
 1010878:	f800283a 	ret
 101087c:	0005883a 	mov	r2,zero
 1010880:	f800283a 	ret

01010884 <_write_r>:
 1010884:	defffd04 	addi	sp,sp,-12
 1010888:	dc000015 	stw	r16,0(sp)
 101088c:	040040b4 	movhi	r16,258
 1010890:	840bac04 	addi	r16,r16,11952
 1010894:	dc400115 	stw	r17,4(sp)
 1010898:	80000015 	stw	zero,0(r16)
 101089c:	2023883a 	mov	r17,r4
 10108a0:	2809883a 	mov	r4,r5
 10108a4:	300b883a 	mov	r5,r6
 10108a8:	380d883a 	mov	r6,r7
 10108ac:	dfc00215 	stw	ra,8(sp)
 10108b0:	1013cf00 	call	1013cf0 <write>
 10108b4:	1007883a 	mov	r3,r2
 10108b8:	00bfffc4 	movi	r2,-1
 10108bc:	18800626 	beq	r3,r2,10108d8 <_write_r+0x54>
 10108c0:	1805883a 	mov	r2,r3
 10108c4:	dfc00217 	ldw	ra,8(sp)
 10108c8:	dc400117 	ldw	r17,4(sp)
 10108cc:	dc000017 	ldw	r16,0(sp)
 10108d0:	dec00304 	addi	sp,sp,12
 10108d4:	f800283a 	ret
 10108d8:	80800017 	ldw	r2,0(r16)
 10108dc:	103ff826 	beq	r2,zero,10108c0 <_write_r+0x3c>
 10108e0:	88800015 	stw	r2,0(r17)
 10108e4:	1805883a 	mov	r2,r3
 10108e8:	dfc00217 	ldw	ra,8(sp)
 10108ec:	dc400117 	ldw	r17,4(sp)
 10108f0:	dc000017 	ldw	r16,0(sp)
 10108f4:	dec00304 	addi	sp,sp,12
 10108f8:	f800283a 	ret

010108fc <_calloc_r>:
 10108fc:	298b383a 	mul	r5,r5,r6
 1010900:	defffe04 	addi	sp,sp,-8
 1010904:	dc000015 	stw	r16,0(sp)
 1010908:	dfc00115 	stw	ra,4(sp)
 101090c:	10096f40 	call	10096f4 <_malloc_r>
 1010910:	1021883a 	mov	r16,r2
 1010914:	01c00904 	movi	r7,36
 1010918:	10000d26 	beq	r2,zero,1010950 <_calloc_r+0x54>
 101091c:	10ffff17 	ldw	r3,-4(r2)
 1010920:	1009883a 	mov	r4,r2
 1010924:	00bfff04 	movi	r2,-4
 1010928:	1886703a 	and	r3,r3,r2
 101092c:	1887883a 	add	r3,r3,r2
 1010930:	180d883a 	mov	r6,r3
 1010934:	000b883a 	mov	r5,zero
 1010938:	38c01736 	bltu	r7,r3,1010998 <_calloc_r+0x9c>
 101093c:	008004c4 	movi	r2,19
 1010940:	10c00836 	bltu	r2,r3,1010964 <_calloc_r+0x68>
 1010944:	20000215 	stw	zero,8(r4)
 1010948:	20000015 	stw	zero,0(r4)
 101094c:	20000115 	stw	zero,4(r4)
 1010950:	8005883a 	mov	r2,r16
 1010954:	dfc00117 	ldw	ra,4(sp)
 1010958:	dc000017 	ldw	r16,0(sp)
 101095c:	dec00204 	addi	sp,sp,8
 1010960:	f800283a 	ret
 1010964:	008006c4 	movi	r2,27
 1010968:	80000015 	stw	zero,0(r16)
 101096c:	80000115 	stw	zero,4(r16)
 1010970:	81000204 	addi	r4,r16,8
 1010974:	10fff32e 	bgeu	r2,r3,1010944 <_calloc_r+0x48>
 1010978:	80000215 	stw	zero,8(r16)
 101097c:	80000315 	stw	zero,12(r16)
 1010980:	81000404 	addi	r4,r16,16
 1010984:	19ffef1e 	bne	r3,r7,1010944 <_calloc_r+0x48>
 1010988:	81000604 	addi	r4,r16,24
 101098c:	80000415 	stw	zero,16(r16)
 1010990:	80000515 	stw	zero,20(r16)
 1010994:	003feb06 	br	1010944 <_calloc_r+0x48>
 1010998:	100a10c0 	call	100a10c <memset>
 101099c:	8005883a 	mov	r2,r16
 10109a0:	dfc00117 	ldw	ra,4(sp)
 10109a4:	dc000017 	ldw	r16,0(sp)
 10109a8:	dec00204 	addi	sp,sp,8
 10109ac:	f800283a 	ret

010109b0 <_close_r>:
 10109b0:	defffd04 	addi	sp,sp,-12
 10109b4:	dc000015 	stw	r16,0(sp)
 10109b8:	040040b4 	movhi	r16,258
 10109bc:	840bac04 	addi	r16,r16,11952
 10109c0:	dc400115 	stw	r17,4(sp)
 10109c4:	80000015 	stw	zero,0(r16)
 10109c8:	2023883a 	mov	r17,r4
 10109cc:	2809883a 	mov	r4,r5
 10109d0:	dfc00215 	stw	ra,8(sp)
 10109d4:	10131480 	call	1013148 <close>
 10109d8:	1007883a 	mov	r3,r2
 10109dc:	00bfffc4 	movi	r2,-1
 10109e0:	18800626 	beq	r3,r2,10109fc <_close_r+0x4c>
 10109e4:	1805883a 	mov	r2,r3
 10109e8:	dfc00217 	ldw	ra,8(sp)
 10109ec:	dc400117 	ldw	r17,4(sp)
 10109f0:	dc000017 	ldw	r16,0(sp)
 10109f4:	dec00304 	addi	sp,sp,12
 10109f8:	f800283a 	ret
 10109fc:	80800017 	ldw	r2,0(r16)
 1010a00:	103ff826 	beq	r2,zero,10109e4 <_close_r+0x34>
 1010a04:	88800015 	stw	r2,0(r17)
 1010a08:	1805883a 	mov	r2,r3
 1010a0c:	dfc00217 	ldw	ra,8(sp)
 1010a10:	dc400117 	ldw	r17,4(sp)
 1010a14:	dc000017 	ldw	r16,0(sp)
 1010a18:	dec00304 	addi	sp,sp,12
 1010a1c:	f800283a 	ret

01010a20 <_fclose_r>:
 1010a20:	defffc04 	addi	sp,sp,-16
 1010a24:	dc400115 	stw	r17,4(sp)
 1010a28:	dc000015 	stw	r16,0(sp)
 1010a2c:	dfc00315 	stw	ra,12(sp)
 1010a30:	dc800215 	stw	r18,8(sp)
 1010a34:	2821883a 	mov	r16,r5
 1010a38:	2023883a 	mov	r17,r4
 1010a3c:	28002926 	beq	r5,zero,1010ae4 <_fclose_r+0xc4>
 1010a40:	100e1080 	call	100e108 <__sfp_lock_acquire>
 1010a44:	88000226 	beq	r17,zero,1010a50 <_fclose_r+0x30>
 1010a48:	88800e17 	ldw	r2,56(r17)
 1010a4c:	10002d26 	beq	r2,zero,1010b04 <_fclose_r+0xe4>
 1010a50:	8080030f 	ldh	r2,12(r16)
 1010a54:	10002226 	beq	r2,zero,1010ae0 <_fclose_r+0xc0>
 1010a58:	8809883a 	mov	r4,r17
 1010a5c:	800b883a 	mov	r5,r16
 1010a60:	100de800 	call	100de80 <_fflush_r>
 1010a64:	1025883a 	mov	r18,r2
 1010a68:	80800b17 	ldw	r2,44(r16)
 1010a6c:	10000426 	beq	r2,zero,1010a80 <_fclose_r+0x60>
 1010a70:	81400717 	ldw	r5,28(r16)
 1010a74:	8809883a 	mov	r4,r17
 1010a78:	103ee83a 	callr	r2
 1010a7c:	10002a16 	blt	r2,zero,1010b28 <_fclose_r+0x108>
 1010a80:	8080030b 	ldhu	r2,12(r16)
 1010a84:	1080200c 	andi	r2,r2,128
 1010a88:	1000231e 	bne	r2,zero,1010b18 <_fclose_r+0xf8>
 1010a8c:	81400c17 	ldw	r5,48(r16)
 1010a90:	28000526 	beq	r5,zero,1010aa8 <_fclose_r+0x88>
 1010a94:	80801004 	addi	r2,r16,64
 1010a98:	28800226 	beq	r5,r2,1010aa4 <_fclose_r+0x84>
 1010a9c:	8809883a 	mov	r4,r17
 1010aa0:	100e49c0 	call	100e49c <_free_r>
 1010aa4:	80000c15 	stw	zero,48(r16)
 1010aa8:	81401117 	ldw	r5,68(r16)
 1010aac:	28000326 	beq	r5,zero,1010abc <_fclose_r+0x9c>
 1010ab0:	8809883a 	mov	r4,r17
 1010ab4:	100e49c0 	call	100e49c <_free_r>
 1010ab8:	80001115 	stw	zero,68(r16)
 1010abc:	8000030d 	sth	zero,12(r16)
 1010ac0:	100e10c0 	call	100e10c <__sfp_lock_release>
 1010ac4:	9005883a 	mov	r2,r18
 1010ac8:	dfc00317 	ldw	ra,12(sp)
 1010acc:	dc800217 	ldw	r18,8(sp)
 1010ad0:	dc400117 	ldw	r17,4(sp)
 1010ad4:	dc000017 	ldw	r16,0(sp)
 1010ad8:	dec00404 	addi	sp,sp,16
 1010adc:	f800283a 	ret
 1010ae0:	100e10c0 	call	100e10c <__sfp_lock_release>
 1010ae4:	0025883a 	mov	r18,zero
 1010ae8:	9005883a 	mov	r2,r18
 1010aec:	dfc00317 	ldw	ra,12(sp)
 1010af0:	dc800217 	ldw	r18,8(sp)
 1010af4:	dc400117 	ldw	r17,4(sp)
 1010af8:	dc000017 	ldw	r16,0(sp)
 1010afc:	dec00404 	addi	sp,sp,16
 1010b00:	f800283a 	ret
 1010b04:	8809883a 	mov	r4,r17
 1010b08:	100e1180 	call	100e118 <__sinit>
 1010b0c:	8080030f 	ldh	r2,12(r16)
 1010b10:	103fd11e 	bne	r2,zero,1010a58 <_fclose_r+0x38>
 1010b14:	003ff206 	br	1010ae0 <_fclose_r+0xc0>
 1010b18:	81400417 	ldw	r5,16(r16)
 1010b1c:	8809883a 	mov	r4,r17
 1010b20:	100e49c0 	call	100e49c <_free_r>
 1010b24:	003fd906 	br	1010a8c <_fclose_r+0x6c>
 1010b28:	04bfffc4 	movi	r18,-1
 1010b2c:	003fd406 	br	1010a80 <_fclose_r+0x60>

01010b30 <fclose>:
 1010b30:	008040b4 	movhi	r2,258
 1010b34:	1084a204 	addi	r2,r2,4744
 1010b38:	200b883a 	mov	r5,r4
 1010b3c:	11000017 	ldw	r4,0(r2)
 1010b40:	1010a201 	jmpi	1010a20 <_fclose_r>

01010b44 <_fstat_r>:
 1010b44:	defffd04 	addi	sp,sp,-12
 1010b48:	dc000015 	stw	r16,0(sp)
 1010b4c:	040040b4 	movhi	r16,258
 1010b50:	840bac04 	addi	r16,r16,11952
 1010b54:	dc400115 	stw	r17,4(sp)
 1010b58:	80000015 	stw	zero,0(r16)
 1010b5c:	2023883a 	mov	r17,r4
 1010b60:	2809883a 	mov	r4,r5
 1010b64:	300b883a 	mov	r5,r6
 1010b68:	dfc00215 	stw	ra,8(sp)
 1010b6c:	101333c0 	call	101333c <fstat>
 1010b70:	1007883a 	mov	r3,r2
 1010b74:	00bfffc4 	movi	r2,-1
 1010b78:	18800626 	beq	r3,r2,1010b94 <_fstat_r+0x50>
 1010b7c:	1805883a 	mov	r2,r3
 1010b80:	dfc00217 	ldw	ra,8(sp)
 1010b84:	dc400117 	ldw	r17,4(sp)
 1010b88:	dc000017 	ldw	r16,0(sp)
 1010b8c:	dec00304 	addi	sp,sp,12
 1010b90:	f800283a 	ret
 1010b94:	80800017 	ldw	r2,0(r16)
 1010b98:	103ff826 	beq	r2,zero,1010b7c <_fstat_r+0x38>
 1010b9c:	88800015 	stw	r2,0(r17)
 1010ba0:	1805883a 	mov	r2,r3
 1010ba4:	dfc00217 	ldw	ra,8(sp)
 1010ba8:	dc400117 	ldw	r17,4(sp)
 1010bac:	dc000017 	ldw	r16,0(sp)
 1010bb0:	dec00304 	addi	sp,sp,12
 1010bb4:	f800283a 	ret

01010bb8 <_isatty_r>:
 1010bb8:	defffd04 	addi	sp,sp,-12
 1010bbc:	dc000015 	stw	r16,0(sp)
 1010bc0:	040040b4 	movhi	r16,258
 1010bc4:	840bac04 	addi	r16,r16,11952
 1010bc8:	dc400115 	stw	r17,4(sp)
 1010bcc:	80000015 	stw	zero,0(r16)
 1010bd0:	2023883a 	mov	r17,r4
 1010bd4:	2809883a 	mov	r4,r5
 1010bd8:	dfc00215 	stw	ra,8(sp)
 1010bdc:	10134900 	call	1013490 <isatty>
 1010be0:	1007883a 	mov	r3,r2
 1010be4:	00bfffc4 	movi	r2,-1
 1010be8:	18800626 	beq	r3,r2,1010c04 <_isatty_r+0x4c>
 1010bec:	1805883a 	mov	r2,r3
 1010bf0:	dfc00217 	ldw	ra,8(sp)
 1010bf4:	dc400117 	ldw	r17,4(sp)
 1010bf8:	dc000017 	ldw	r16,0(sp)
 1010bfc:	dec00304 	addi	sp,sp,12
 1010c00:	f800283a 	ret
 1010c04:	80800017 	ldw	r2,0(r16)
 1010c08:	103ff826 	beq	r2,zero,1010bec <_isatty_r+0x34>
 1010c0c:	88800015 	stw	r2,0(r17)
 1010c10:	1805883a 	mov	r2,r3
 1010c14:	dfc00217 	ldw	ra,8(sp)
 1010c18:	dc400117 	ldw	r17,4(sp)
 1010c1c:	dc000017 	ldw	r16,0(sp)
 1010c20:	dec00304 	addi	sp,sp,12
 1010c24:	f800283a 	ret

01010c28 <_lseek_r>:
 1010c28:	defffd04 	addi	sp,sp,-12
 1010c2c:	dc000015 	stw	r16,0(sp)
 1010c30:	040040b4 	movhi	r16,258
 1010c34:	840bac04 	addi	r16,r16,11952
 1010c38:	dc400115 	stw	r17,4(sp)
 1010c3c:	80000015 	stw	zero,0(r16)
 1010c40:	2023883a 	mov	r17,r4
 1010c44:	2809883a 	mov	r4,r5
 1010c48:	300b883a 	mov	r5,r6
 1010c4c:	380d883a 	mov	r6,r7
 1010c50:	dfc00215 	stw	ra,8(sp)
 1010c54:	101383c0 	call	101383c <lseek>
 1010c58:	1007883a 	mov	r3,r2
 1010c5c:	00bfffc4 	movi	r2,-1
 1010c60:	18800626 	beq	r3,r2,1010c7c <_lseek_r+0x54>
 1010c64:	1805883a 	mov	r2,r3
 1010c68:	dfc00217 	ldw	ra,8(sp)
 1010c6c:	dc400117 	ldw	r17,4(sp)
 1010c70:	dc000017 	ldw	r16,0(sp)
 1010c74:	dec00304 	addi	sp,sp,12
 1010c78:	f800283a 	ret
 1010c7c:	80800017 	ldw	r2,0(r16)
 1010c80:	103ff826 	beq	r2,zero,1010c64 <_lseek_r+0x3c>
 1010c84:	88800015 	stw	r2,0(r17)
 1010c88:	1805883a 	mov	r2,r3
 1010c8c:	dfc00217 	ldw	ra,8(sp)
 1010c90:	dc400117 	ldw	r17,4(sp)
 1010c94:	dc000017 	ldw	r16,0(sp)
 1010c98:	dec00304 	addi	sp,sp,12
 1010c9c:	f800283a 	ret

01010ca0 <_read_r>:
 1010ca0:	defffd04 	addi	sp,sp,-12
 1010ca4:	dc000015 	stw	r16,0(sp)
 1010ca8:	040040b4 	movhi	r16,258
 1010cac:	840bac04 	addi	r16,r16,11952
 1010cb0:	dc400115 	stw	r17,4(sp)
 1010cb4:	80000015 	stw	zero,0(r16)
 1010cb8:	2023883a 	mov	r17,r4
 1010cbc:	2809883a 	mov	r4,r5
 1010cc0:	300b883a 	mov	r5,r6
 1010cc4:	380d883a 	mov	r6,r7
 1010cc8:	dfc00215 	stw	ra,8(sp)
 1010ccc:	1013a540 	call	1013a54 <read>
 1010cd0:	1007883a 	mov	r3,r2
 1010cd4:	00bfffc4 	movi	r2,-1
 1010cd8:	18800626 	beq	r3,r2,1010cf4 <_read_r+0x54>
 1010cdc:	1805883a 	mov	r2,r3
 1010ce0:	dfc00217 	ldw	ra,8(sp)
 1010ce4:	dc400117 	ldw	r17,4(sp)
 1010ce8:	dc000017 	ldw	r16,0(sp)
 1010cec:	dec00304 	addi	sp,sp,12
 1010cf0:	f800283a 	ret
 1010cf4:	80800017 	ldw	r2,0(r16)
 1010cf8:	103ff826 	beq	r2,zero,1010cdc <_read_r+0x3c>
 1010cfc:	88800015 	stw	r2,0(r17)
 1010d00:	1805883a 	mov	r2,r3
 1010d04:	dfc00217 	ldw	ra,8(sp)
 1010d08:	dc400117 	ldw	r17,4(sp)
 1010d0c:	dc000017 	ldw	r16,0(sp)
 1010d10:	dec00304 	addi	sp,sp,12
 1010d14:	f800283a 	ret

01010d18 <__udivdi3>:
 1010d18:	defff004 	addi	sp,sp,-64
 1010d1c:	2005883a 	mov	r2,r4
 1010d20:	3011883a 	mov	r8,r6
 1010d24:	df000e15 	stw	fp,56(sp)
 1010d28:	dd000a15 	stw	r20,40(sp)
 1010d2c:	dc000615 	stw	r16,24(sp)
 1010d30:	dfc00f15 	stw	ra,60(sp)
 1010d34:	ddc00d15 	stw	r23,52(sp)
 1010d38:	dd800c15 	stw	r22,48(sp)
 1010d3c:	dd400b15 	stw	r21,44(sp)
 1010d40:	dcc00915 	stw	r19,36(sp)
 1010d44:	dc800815 	stw	r18,32(sp)
 1010d48:	dc400715 	stw	r17,28(sp)
 1010d4c:	4021883a 	mov	r16,r8
 1010d50:	1039883a 	mov	fp,r2
 1010d54:	2829883a 	mov	r20,r5
 1010d58:	38003b1e 	bne	r7,zero,1010e48 <__udivdi3+0x130>
 1010d5c:	2a005c36 	bltu	r5,r8,1010ed0 <__udivdi3+0x1b8>
 1010d60:	4000a626 	beq	r8,zero,1010ffc <__udivdi3+0x2e4>
 1010d64:	00bfffd4 	movui	r2,65535
 1010d68:	14009e36 	bltu	r2,r16,1010fe4 <__udivdi3+0x2cc>
 1010d6c:	00803fc4 	movi	r2,255
 1010d70:	14013d36 	bltu	r2,r16,1011268 <__udivdi3+0x550>
 1010d74:	000b883a 	mov	r5,zero
 1010d78:	0005883a 	mov	r2,zero
 1010d7c:	8084d83a 	srl	r2,r16,r2
 1010d80:	010040b4 	movhi	r4,258
 1010d84:	213d6404 	addi	r4,r4,-2672
 1010d88:	01800804 	movi	r6,32
 1010d8c:	1105883a 	add	r2,r2,r4
 1010d90:	10c00003 	ldbu	r3,0(r2)
 1010d94:	28c7883a 	add	r3,r5,r3
 1010d98:	30edc83a 	sub	r22,r6,r3
 1010d9c:	b000ee1e 	bne	r22,zero,1011158 <__udivdi3+0x440>
 1010da0:	802ad43a 	srli	r21,r16,16
 1010da4:	00800044 	movi	r2,1
 1010da8:	a423c83a 	sub	r17,r20,r16
 1010dac:	85ffffcc 	andi	r23,r16,65535
 1010db0:	d8800315 	stw	r2,12(sp)
 1010db4:	8809883a 	mov	r4,r17
 1010db8:	a80b883a 	mov	r5,r21
 1010dbc:	1012b0c0 	call	1012b0c <__udivsi3>
 1010dc0:	8809883a 	mov	r4,r17
 1010dc4:	a80b883a 	mov	r5,r21
 1010dc8:	102d883a 	mov	r22,r2
 1010dcc:	1012b140 	call	1012b14 <__umodsi3>
 1010dd0:	1004943a 	slli	r2,r2,16
 1010dd4:	e006d43a 	srli	r3,fp,16
 1010dd8:	bda3383a 	mul	r17,r23,r22
 1010ddc:	10c4b03a 	or	r2,r2,r3
 1010de0:	1440042e 	bgeu	r2,r17,1010df4 <__udivdi3+0xdc>
 1010de4:	1405883a 	add	r2,r2,r16
 1010de8:	b5bfffc4 	addi	r22,r22,-1
 1010dec:	14000136 	bltu	r2,r16,1010df4 <__udivdi3+0xdc>
 1010df0:	14413d36 	bltu	r2,r17,10112e8 <__udivdi3+0x5d0>
 1010df4:	1463c83a 	sub	r17,r2,r17
 1010df8:	8809883a 	mov	r4,r17
 1010dfc:	a80b883a 	mov	r5,r21
 1010e00:	1012b0c0 	call	1012b0c <__udivsi3>
 1010e04:	8809883a 	mov	r4,r17
 1010e08:	a80b883a 	mov	r5,r21
 1010e0c:	1029883a 	mov	r20,r2
 1010e10:	1012b140 	call	1012b14 <__umodsi3>
 1010e14:	1004943a 	slli	r2,r2,16
 1010e18:	bd09383a 	mul	r4,r23,r20
 1010e1c:	e0ffffcc 	andi	r3,fp,65535
 1010e20:	10c4b03a 	or	r2,r2,r3
 1010e24:	1100042e 	bgeu	r2,r4,1010e38 <__udivdi3+0x120>
 1010e28:	8085883a 	add	r2,r16,r2
 1010e2c:	a53fffc4 	addi	r20,r20,-1
 1010e30:	14000136 	bltu	r2,r16,1010e38 <__udivdi3+0x120>
 1010e34:	11012036 	bltu	r2,r4,10112b8 <__udivdi3+0x5a0>
 1010e38:	b004943a 	slli	r2,r22,16
 1010e3c:	d9000317 	ldw	r4,12(sp)
 1010e40:	a084b03a 	or	r2,r20,r2
 1010e44:	00001506 	br	1010e9c <__udivdi3+0x184>
 1010e48:	380d883a 	mov	r6,r7
 1010e4c:	29c06236 	bltu	r5,r7,1010fd8 <__udivdi3+0x2c0>
 1010e50:	00bfffd4 	movui	r2,65535
 1010e54:	11c05a36 	bltu	r2,r7,1010fc0 <__udivdi3+0x2a8>
 1010e58:	00803fc4 	movi	r2,255
 1010e5c:	11c0fc36 	bltu	r2,r7,1011250 <__udivdi3+0x538>
 1010e60:	000b883a 	mov	r5,zero
 1010e64:	0005883a 	mov	r2,zero
 1010e68:	3084d83a 	srl	r2,r6,r2
 1010e6c:	010040b4 	movhi	r4,258
 1010e70:	213d6404 	addi	r4,r4,-2672
 1010e74:	01c00804 	movi	r7,32
 1010e78:	1105883a 	add	r2,r2,r4
 1010e7c:	10c00003 	ldbu	r3,0(r2)
 1010e80:	28c7883a 	add	r3,r5,r3
 1010e84:	38efc83a 	sub	r23,r7,r3
 1010e88:	b800691e 	bne	r23,zero,1011030 <__udivdi3+0x318>
 1010e8c:	35000136 	bltu	r6,r20,1010e94 <__udivdi3+0x17c>
 1010e90:	e4005136 	bltu	fp,r16,1010fd8 <__udivdi3+0x2c0>
 1010e94:	00800044 	movi	r2,1
 1010e98:	0009883a 	mov	r4,zero
 1010e9c:	2007883a 	mov	r3,r4
 1010ea0:	dfc00f17 	ldw	ra,60(sp)
 1010ea4:	df000e17 	ldw	fp,56(sp)
 1010ea8:	ddc00d17 	ldw	r23,52(sp)
 1010eac:	dd800c17 	ldw	r22,48(sp)
 1010eb0:	dd400b17 	ldw	r21,44(sp)
 1010eb4:	dd000a17 	ldw	r20,40(sp)
 1010eb8:	dcc00917 	ldw	r19,36(sp)
 1010ebc:	dc800817 	ldw	r18,32(sp)
 1010ec0:	dc400717 	ldw	r17,28(sp)
 1010ec4:	dc000617 	ldw	r16,24(sp)
 1010ec8:	dec01004 	addi	sp,sp,64
 1010ecc:	f800283a 	ret
 1010ed0:	00bfffd4 	movui	r2,65535
 1010ed4:	12005036 	bltu	r2,r8,1011018 <__udivdi3+0x300>
 1010ed8:	00803fc4 	movi	r2,255
 1010edc:	1200e836 	bltu	r2,r8,1011280 <__udivdi3+0x568>
 1010ee0:	000b883a 	mov	r5,zero
 1010ee4:	0005883a 	mov	r2,zero
 1010ee8:	8084d83a 	srl	r2,r16,r2
 1010eec:	010040b4 	movhi	r4,258
 1010ef0:	213d6404 	addi	r4,r4,-2672
 1010ef4:	01800804 	movi	r6,32
 1010ef8:	1105883a 	add	r2,r2,r4
 1010efc:	10c00003 	ldbu	r3,0(r2)
 1010f00:	28c7883a 	add	r3,r5,r3
 1010f04:	30cbc83a 	sub	r5,r6,r3
 1010f08:	28000626 	beq	r5,zero,1010f24 <__udivdi3+0x20c>
 1010f0c:	3145c83a 	sub	r2,r6,r5
 1010f10:	e084d83a 	srl	r2,fp,r2
 1010f14:	a146983a 	sll	r3,r20,r5
 1010f18:	e178983a 	sll	fp,fp,r5
 1010f1c:	8160983a 	sll	r16,r16,r5
 1010f20:	18a8b03a 	or	r20,r3,r2
 1010f24:	802ad43a 	srli	r21,r16,16
 1010f28:	a009883a 	mov	r4,r20
 1010f2c:	85ffffcc 	andi	r23,r16,65535
 1010f30:	a80b883a 	mov	r5,r21
 1010f34:	1012b0c0 	call	1012b0c <__udivsi3>
 1010f38:	a009883a 	mov	r4,r20
 1010f3c:	a80b883a 	mov	r5,r21
 1010f40:	102d883a 	mov	r22,r2
 1010f44:	1012b140 	call	1012b14 <__umodsi3>
 1010f48:	1004943a 	slli	r2,r2,16
 1010f4c:	e006d43a 	srli	r3,fp,16
 1010f50:	bda3383a 	mul	r17,r23,r22
 1010f54:	10c4b03a 	or	r2,r2,r3
 1010f58:	1440042e 	bgeu	r2,r17,1010f6c <__udivdi3+0x254>
 1010f5c:	1405883a 	add	r2,r2,r16
 1010f60:	b5bfffc4 	addi	r22,r22,-1
 1010f64:	14000136 	bltu	r2,r16,1010f6c <__udivdi3+0x254>
 1010f68:	1440d536 	bltu	r2,r17,10112c0 <__udivdi3+0x5a8>
 1010f6c:	1463c83a 	sub	r17,r2,r17
 1010f70:	8809883a 	mov	r4,r17
 1010f74:	a80b883a 	mov	r5,r21
 1010f78:	1012b0c0 	call	1012b0c <__udivsi3>
 1010f7c:	8809883a 	mov	r4,r17
 1010f80:	a80b883a 	mov	r5,r21
 1010f84:	1029883a 	mov	r20,r2
 1010f88:	1012b140 	call	1012b14 <__umodsi3>
 1010f8c:	1004943a 	slli	r2,r2,16
 1010f90:	bd09383a 	mul	r4,r23,r20
 1010f94:	e0ffffcc 	andi	r3,fp,65535
 1010f98:	10c4b03a 	or	r2,r2,r3
 1010f9c:	1100042e 	bgeu	r2,r4,1010fb0 <__udivdi3+0x298>
 1010fa0:	8085883a 	add	r2,r16,r2
 1010fa4:	a53fffc4 	addi	r20,r20,-1
 1010fa8:	14000136 	bltu	r2,r16,1010fb0 <__udivdi3+0x298>
 1010fac:	1100c736 	bltu	r2,r4,10112cc <__udivdi3+0x5b4>
 1010fb0:	b004943a 	slli	r2,r22,16
 1010fb4:	0009883a 	mov	r4,zero
 1010fb8:	a084b03a 	or	r2,r20,r2
 1010fbc:	003fb706 	br	1010e9c <__udivdi3+0x184>
 1010fc0:	00804034 	movhi	r2,256
 1010fc4:	10bfffc4 	addi	r2,r2,-1
 1010fc8:	11c0a436 	bltu	r2,r7,101125c <__udivdi3+0x544>
 1010fcc:	01400404 	movi	r5,16
 1010fd0:	2805883a 	mov	r2,r5
 1010fd4:	003fa406 	br	1010e68 <__udivdi3+0x150>
 1010fd8:	0005883a 	mov	r2,zero
 1010fdc:	0009883a 	mov	r4,zero
 1010fe0:	003fae06 	br	1010e9c <__udivdi3+0x184>
 1010fe4:	00804034 	movhi	r2,256
 1010fe8:	10bfffc4 	addi	r2,r2,-1
 1010fec:	1400a136 	bltu	r2,r16,1011274 <__udivdi3+0x55c>
 1010ff0:	01400404 	movi	r5,16
 1010ff4:	2805883a 	mov	r2,r5
 1010ff8:	003f6006 	br	1010d7c <__udivdi3+0x64>
 1010ffc:	01000044 	movi	r4,1
 1011000:	000b883a 	mov	r5,zero
 1011004:	1012b0c0 	call	1012b0c <__udivsi3>
 1011008:	1021883a 	mov	r16,r2
 101100c:	00bfffd4 	movui	r2,65535
 1011010:	143ff436 	bltu	r2,r16,1010fe4 <__udivdi3+0x2cc>
 1011014:	003f5506 	br	1010d6c <__udivdi3+0x54>
 1011018:	00804034 	movhi	r2,256
 101101c:	10bfffc4 	addi	r2,r2,-1
 1011020:	12009a36 	bltu	r2,r8,101128c <__udivdi3+0x574>
 1011024:	01400404 	movi	r5,16
 1011028:	2805883a 	mov	r2,r5
 101102c:	003fae06 	br	1010ee8 <__udivdi3+0x1d0>
 1011030:	3dc5c83a 	sub	r2,r7,r23
 1011034:	35c8983a 	sll	r4,r6,r23
 1011038:	8086d83a 	srl	r3,r16,r2
 101103c:	a0a2d83a 	srl	r17,r20,r2
 1011040:	e084d83a 	srl	r2,fp,r2
 1011044:	20eab03a 	or	r21,r4,r3
 1011048:	a82cd43a 	srli	r22,r21,16
 101104c:	a5c6983a 	sll	r3,r20,r23
 1011050:	8809883a 	mov	r4,r17
 1011054:	b00b883a 	mov	r5,r22
 1011058:	1886b03a 	or	r3,r3,r2
 101105c:	d8c00215 	stw	r3,8(sp)
 1011060:	1012b0c0 	call	1012b0c <__udivsi3>
 1011064:	8809883a 	mov	r4,r17
 1011068:	b00b883a 	mov	r5,r22
 101106c:	1029883a 	mov	r20,r2
 1011070:	1012b140 	call	1012b14 <__umodsi3>
 1011074:	a8ffffcc 	andi	r3,r21,65535
 1011078:	d8c00515 	stw	r3,20(sp)
 101107c:	d9000217 	ldw	r4,8(sp)
 1011080:	d9400517 	ldw	r5,20(sp)
 1011084:	1004943a 	slli	r2,r2,16
 1011088:	2006d43a 	srli	r3,r4,16
 101108c:	85e0983a 	sll	r16,r16,r23
 1011090:	2d23383a 	mul	r17,r5,r20
 1011094:	10c4b03a 	or	r2,r2,r3
 1011098:	dc000015 	stw	r16,0(sp)
 101109c:	1440032e 	bgeu	r2,r17,10110ac <__udivdi3+0x394>
 10110a0:	1545883a 	add	r2,r2,r21
 10110a4:	a53fffc4 	addi	r20,r20,-1
 10110a8:	15407f2e 	bgeu	r2,r21,10112a8 <__udivdi3+0x590>
 10110ac:	1463c83a 	sub	r17,r2,r17
 10110b0:	8809883a 	mov	r4,r17
 10110b4:	b00b883a 	mov	r5,r22
 10110b8:	1012b0c0 	call	1012b0c <__udivsi3>
 10110bc:	8809883a 	mov	r4,r17
 10110c0:	b00b883a 	mov	r5,r22
 10110c4:	1021883a 	mov	r16,r2
 10110c8:	1012b140 	call	1012b14 <__umodsi3>
 10110cc:	d8c00517 	ldw	r3,20(sp)
 10110d0:	d9000217 	ldw	r4,8(sp)
 10110d4:	1004943a 	slli	r2,r2,16
 10110d8:	1c0f383a 	mul	r7,r3,r16
 10110dc:	20ffffcc 	andi	r3,r4,65535
 10110e0:	10e2b03a 	or	r17,r2,r3
 10110e4:	89c0032e 	bgeu	r17,r7,10110f4 <__udivdi3+0x3dc>
 10110e8:	8d63883a 	add	r17,r17,r21
 10110ec:	843fffc4 	addi	r16,r16,-1
 10110f0:	8d40692e 	bgeu	r17,r21,1011298 <__udivdi3+0x580>
 10110f4:	a008943a 	slli	r4,r20,16
 10110f8:	d9400017 	ldw	r5,0(sp)
 10110fc:	89e3c83a 	sub	r17,r17,r7
 1011100:	8110b03a 	or	r8,r16,r4
 1011104:	280cd43a 	srli	r6,r5,16
 1011108:	28ffffcc 	andi	r3,r5,65535
 101110c:	40bfffcc 	andi	r2,r8,65535
 1011110:	400ad43a 	srli	r5,r8,16
 1011114:	10d3383a 	mul	r9,r2,r3
 1011118:	1185383a 	mul	r2,r2,r6
 101111c:	28c7383a 	mul	r3,r5,r3
 1011120:	4808d43a 	srli	r4,r9,16
 1011124:	298b383a 	mul	r5,r5,r6
 1011128:	10c5883a 	add	r2,r2,r3
 101112c:	2089883a 	add	r4,r4,r2
 1011130:	20c0022e 	bgeu	r4,r3,101113c <__udivdi3+0x424>
 1011134:	00800074 	movhi	r2,1
 1011138:	288b883a 	add	r5,r5,r2
 101113c:	2004d43a 	srli	r2,r4,16
 1011140:	288b883a 	add	r5,r5,r2
 1011144:	89403f36 	bltu	r17,r5,1011244 <__udivdi3+0x52c>
 1011148:	89403926 	beq	r17,r5,1011230 <__udivdi3+0x518>
 101114c:	4005883a 	mov	r2,r8
 1011150:	0009883a 	mov	r4,zero
 1011154:	003f5106 	br	1010e9c <__udivdi3+0x184>
 1011158:	85a0983a 	sll	r16,r16,r22
 101115c:	3585c83a 	sub	r2,r6,r22
 1011160:	a0a2d83a 	srl	r17,r20,r2
 1011164:	802ad43a 	srli	r21,r16,16
 1011168:	e084d83a 	srl	r2,fp,r2
 101116c:	a586983a 	sll	r3,r20,r22
 1011170:	8809883a 	mov	r4,r17
 1011174:	a80b883a 	mov	r5,r21
 1011178:	1886b03a 	or	r3,r3,r2
 101117c:	d8c00115 	stw	r3,4(sp)
 1011180:	1012b0c0 	call	1012b0c <__udivsi3>
 1011184:	8809883a 	mov	r4,r17
 1011188:	a80b883a 	mov	r5,r21
 101118c:	d8800415 	stw	r2,16(sp)
 1011190:	1012b140 	call	1012b14 <__umodsi3>
 1011194:	d9000117 	ldw	r4,4(sp)
 1011198:	d9400417 	ldw	r5,16(sp)
 101119c:	1004943a 	slli	r2,r2,16
 10111a0:	85ffffcc 	andi	r23,r16,65535
 10111a4:	2006d43a 	srli	r3,r4,16
 10111a8:	b963383a 	mul	r17,r23,r5
 10111ac:	10c4b03a 	or	r2,r2,r3
 10111b0:	1440042e 	bgeu	r2,r17,10111c4 <__udivdi3+0x4ac>
 10111b4:	297fffc4 	addi	r5,r5,-1
 10111b8:	1405883a 	add	r2,r2,r16
 10111bc:	d9400415 	stw	r5,16(sp)
 10111c0:	1400442e 	bgeu	r2,r16,10112d4 <__udivdi3+0x5bc>
 10111c4:	1463c83a 	sub	r17,r2,r17
 10111c8:	8809883a 	mov	r4,r17
 10111cc:	a80b883a 	mov	r5,r21
 10111d0:	1012b0c0 	call	1012b0c <__udivsi3>
 10111d4:	8809883a 	mov	r4,r17
 10111d8:	a80b883a 	mov	r5,r21
 10111dc:	1029883a 	mov	r20,r2
 10111e0:	1012b140 	call	1012b14 <__umodsi3>
 10111e4:	d9400117 	ldw	r5,4(sp)
 10111e8:	1004943a 	slli	r2,r2,16
 10111ec:	bd09383a 	mul	r4,r23,r20
 10111f0:	28ffffcc 	andi	r3,r5,65535
 10111f4:	10c6b03a 	or	r3,r2,r3
 10111f8:	1900062e 	bgeu	r3,r4,1011214 <__udivdi3+0x4fc>
 10111fc:	1c07883a 	add	r3,r3,r16
 1011200:	a53fffc4 	addi	r20,r20,-1
 1011204:	1c000336 	bltu	r3,r16,1011214 <__udivdi3+0x4fc>
 1011208:	1900022e 	bgeu	r3,r4,1011214 <__udivdi3+0x4fc>
 101120c:	a53fffc4 	addi	r20,r20,-1
 1011210:	1c07883a 	add	r3,r3,r16
 1011214:	d9400417 	ldw	r5,16(sp)
 1011218:	e5b8983a 	sll	fp,fp,r22
 101121c:	1923c83a 	sub	r17,r3,r4
 1011220:	2804943a 	slli	r2,r5,16
 1011224:	a0a8b03a 	or	r20,r20,r2
 1011228:	dd000315 	stw	r20,12(sp)
 101122c:	003ee106 	br	1010db4 <__udivdi3+0x9c>
 1011230:	2004943a 	slli	r2,r4,16
 1011234:	e5c8983a 	sll	r4,fp,r23
 1011238:	48ffffcc 	andi	r3,r9,65535
 101123c:	10c5883a 	add	r2,r2,r3
 1011240:	20bfc22e 	bgeu	r4,r2,101114c <__udivdi3+0x434>
 1011244:	40bfffc4 	addi	r2,r8,-1
 1011248:	0009883a 	mov	r4,zero
 101124c:	003f1306 	br	1010e9c <__udivdi3+0x184>
 1011250:	01400204 	movi	r5,8
 1011254:	2805883a 	mov	r2,r5
 1011258:	003f0306 	br	1010e68 <__udivdi3+0x150>
 101125c:	01400604 	movi	r5,24
 1011260:	2805883a 	mov	r2,r5
 1011264:	003f0006 	br	1010e68 <__udivdi3+0x150>
 1011268:	01400204 	movi	r5,8
 101126c:	2805883a 	mov	r2,r5
 1011270:	003ec206 	br	1010d7c <__udivdi3+0x64>
 1011274:	01400604 	movi	r5,24
 1011278:	2805883a 	mov	r2,r5
 101127c:	003ebf06 	br	1010d7c <__udivdi3+0x64>
 1011280:	01400204 	movi	r5,8
 1011284:	2805883a 	mov	r2,r5
 1011288:	003f1706 	br	1010ee8 <__udivdi3+0x1d0>
 101128c:	01400604 	movi	r5,24
 1011290:	2805883a 	mov	r2,r5
 1011294:	003f1406 	br	1010ee8 <__udivdi3+0x1d0>
 1011298:	89ff962e 	bgeu	r17,r7,10110f4 <__udivdi3+0x3dc>
 101129c:	8d63883a 	add	r17,r17,r21
 10112a0:	843fffc4 	addi	r16,r16,-1
 10112a4:	003f9306 	br	10110f4 <__udivdi3+0x3dc>
 10112a8:	147f802e 	bgeu	r2,r17,10110ac <__udivdi3+0x394>
 10112ac:	a53fffc4 	addi	r20,r20,-1
 10112b0:	1545883a 	add	r2,r2,r21
 10112b4:	003f7d06 	br	10110ac <__udivdi3+0x394>
 10112b8:	a53fffc4 	addi	r20,r20,-1
 10112bc:	003ede06 	br	1010e38 <__udivdi3+0x120>
 10112c0:	b5bfffc4 	addi	r22,r22,-1
 10112c4:	1405883a 	add	r2,r2,r16
 10112c8:	003f2806 	br	1010f6c <__udivdi3+0x254>
 10112cc:	a53fffc4 	addi	r20,r20,-1
 10112d0:	003f3706 	br	1010fb0 <__udivdi3+0x298>
 10112d4:	147fbb2e 	bgeu	r2,r17,10111c4 <__udivdi3+0x4ac>
 10112d8:	297fffc4 	addi	r5,r5,-1
 10112dc:	1405883a 	add	r2,r2,r16
 10112e0:	d9400415 	stw	r5,16(sp)
 10112e4:	003fb706 	br	10111c4 <__udivdi3+0x4ac>
 10112e8:	b5bfffc4 	addi	r22,r22,-1
 10112ec:	1405883a 	add	r2,r2,r16
 10112f0:	003ec006 	br	1010df4 <__udivdi3+0xdc>

010112f4 <__umoddi3>:
 10112f4:	defff104 	addi	sp,sp,-60
 10112f8:	dd800b15 	stw	r22,44(sp)
 10112fc:	dd000915 	stw	r20,36(sp)
 1011300:	dc000515 	stw	r16,20(sp)
 1011304:	dfc00e15 	stw	ra,56(sp)
 1011308:	df000d15 	stw	fp,52(sp)
 101130c:	ddc00c15 	stw	r23,48(sp)
 1011310:	dd400a15 	stw	r21,40(sp)
 1011314:	dcc00815 	stw	r19,32(sp)
 1011318:	dc800715 	stw	r18,28(sp)
 101131c:	dc400615 	stw	r17,24(sp)
 1011320:	3021883a 	mov	r16,r6
 1011324:	202d883a 	mov	r22,r4
 1011328:	2829883a 	mov	r20,r5
 101132c:	38002b1e 	bne	r7,zero,10113dc <__umoddi3+0xe8>
 1011330:	29805036 	bltu	r5,r6,1011474 <__umoddi3+0x180>
 1011334:	30008a26 	beq	r6,zero,1011560 <__umoddi3+0x26c>
 1011338:	00bfffd4 	movui	r2,65535
 101133c:	14008236 	bltu	r2,r16,1011548 <__umoddi3+0x254>
 1011340:	00803fc4 	movi	r2,255
 1011344:	14013636 	bltu	r2,r16,1011820 <__umoddi3+0x52c>
 1011348:	000b883a 	mov	r5,zero
 101134c:	0005883a 	mov	r2,zero
 1011350:	8084d83a 	srl	r2,r16,r2
 1011354:	010040b4 	movhi	r4,258
 1011358:	213d6404 	addi	r4,r4,-2672
 101135c:	01800804 	movi	r6,32
 1011360:	1105883a 	add	r2,r2,r4
 1011364:	10c00003 	ldbu	r3,0(r2)
 1011368:	28c7883a 	add	r3,r5,r3
 101136c:	30efc83a 	sub	r23,r6,r3
 1011370:	b800941e 	bne	r23,zero,10115c4 <__umoddi3+0x2d0>
 1011374:	802ad43a 	srli	r21,r16,16
 1011378:	a423c83a 	sub	r17,r20,r16
 101137c:	0039883a 	mov	fp,zero
 1011380:	853fffcc 	andi	r20,r16,65535
 1011384:	8809883a 	mov	r4,r17
 1011388:	a80b883a 	mov	r5,r21
 101138c:	1012b0c0 	call	1012b0c <__udivsi3>
 1011390:	8809883a 	mov	r4,r17
 1011394:	a80b883a 	mov	r5,r21
 1011398:	a0a3383a 	mul	r17,r20,r2
 101139c:	1012b140 	call	1012b14 <__umodsi3>
 10113a0:	1004943a 	slli	r2,r2,16
 10113a4:	b006d43a 	srli	r3,r22,16
 10113a8:	10c4b03a 	or	r2,r2,r3
 10113ac:	1440032e 	bgeu	r2,r17,10113bc <__umoddi3+0xc8>
 10113b0:	1405883a 	add	r2,r2,r16
 10113b4:	14000136 	bltu	r2,r16,10113bc <__umoddi3+0xc8>
 10113b8:	14413536 	bltu	r2,r17,1011890 <__umoddi3+0x59c>
 10113bc:	1463c83a 	sub	r17,r2,r17
 10113c0:	8809883a 	mov	r4,r17
 10113c4:	a80b883a 	mov	r5,r21
 10113c8:	1012b0c0 	call	1012b0c <__udivsi3>
 10113cc:	8809883a 	mov	r4,r17
 10113d0:	a0a3383a 	mul	r17,r20,r2
 10113d4:	a80b883a 	mov	r5,r21
 10113d8:	00004d06 	br	1011510 <__umoddi3+0x21c>
 10113dc:	380d883a 	mov	r6,r7
 10113e0:	29c0102e 	bgeu	r5,r7,1011424 <__umoddi3+0x130>
 10113e4:	2011883a 	mov	r8,r4
 10113e8:	2813883a 	mov	r9,r5
 10113ec:	4005883a 	mov	r2,r8
 10113f0:	4807883a 	mov	r3,r9
 10113f4:	dfc00e17 	ldw	ra,56(sp)
 10113f8:	df000d17 	ldw	fp,52(sp)
 10113fc:	ddc00c17 	ldw	r23,48(sp)
 1011400:	dd800b17 	ldw	r22,44(sp)
 1011404:	dd400a17 	ldw	r21,40(sp)
 1011408:	dd000917 	ldw	r20,36(sp)
 101140c:	dcc00817 	ldw	r19,32(sp)
 1011410:	dc800717 	ldw	r18,28(sp)
 1011414:	dc400617 	ldw	r17,24(sp)
 1011418:	dc000517 	ldw	r16,20(sp)
 101141c:	dec00f04 	addi	sp,sp,60
 1011420:	f800283a 	ret
 1011424:	00bfffd4 	movui	r2,65535
 1011428:	11c05a36 	bltu	r2,r7,1011594 <__umoddi3+0x2a0>
 101142c:	00803fc4 	movi	r2,255
 1011430:	11c0fe36 	bltu	r2,r7,101182c <__umoddi3+0x538>
 1011434:	000b883a 	mov	r5,zero
 1011438:	0005883a 	mov	r2,zero
 101143c:	3084d83a 	srl	r2,r6,r2
 1011440:	010040b4 	movhi	r4,258
 1011444:	213d6404 	addi	r4,r4,-2672
 1011448:	01c00804 	movi	r7,32
 101144c:	1105883a 	add	r2,r2,r4
 1011450:	10c00003 	ldbu	r3,0(r2)
 1011454:	28c7883a 	add	r3,r5,r3
 1011458:	38ebc83a 	sub	r21,r7,r3
 101145c:	a800851e 	bne	r21,zero,1011674 <__umoddi3+0x380>
 1011460:	35005236 	bltu	r6,r20,10115ac <__umoddi3+0x2b8>
 1011464:	b400512e 	bgeu	r22,r16,10115ac <__umoddi3+0x2b8>
 1011468:	b011883a 	mov	r8,r22
 101146c:	a013883a 	mov	r9,r20
 1011470:	003fde06 	br	10113ec <__umoddi3+0xf8>
 1011474:	00bfffd4 	movui	r2,65535
 1011478:	11804036 	bltu	r2,r6,101157c <__umoddi3+0x288>
 101147c:	00803fc4 	movi	r2,255
 1011480:	1180ed36 	bltu	r2,r6,1011838 <__umoddi3+0x544>
 1011484:	000b883a 	mov	r5,zero
 1011488:	0005883a 	mov	r2,zero
 101148c:	8084d83a 	srl	r2,r16,r2
 1011490:	010040b4 	movhi	r4,258
 1011494:	213d6404 	addi	r4,r4,-2672
 1011498:	01800804 	movi	r6,32
 101149c:	1105883a 	add	r2,r2,r4
 10114a0:	10c00003 	ldbu	r3,0(r2)
 10114a4:	28c7883a 	add	r3,r5,r3
 10114a8:	30c7c83a 	sub	r3,r6,r3
 10114ac:	1800bf1e 	bne	r3,zero,10117ac <__umoddi3+0x4b8>
 10114b0:	0039883a 	mov	fp,zero
 10114b4:	802ad43a 	srli	r21,r16,16
 10114b8:	a009883a 	mov	r4,r20
 10114bc:	85ffffcc 	andi	r23,r16,65535
 10114c0:	a80b883a 	mov	r5,r21
 10114c4:	1012b0c0 	call	1012b0c <__udivsi3>
 10114c8:	a009883a 	mov	r4,r20
 10114cc:	a80b883a 	mov	r5,r21
 10114d0:	b8a3383a 	mul	r17,r23,r2
 10114d4:	1012b140 	call	1012b14 <__umodsi3>
 10114d8:	1004943a 	slli	r2,r2,16
 10114dc:	b006d43a 	srli	r3,r22,16
 10114e0:	10c4b03a 	or	r2,r2,r3
 10114e4:	1440032e 	bgeu	r2,r17,10114f4 <__umoddi3+0x200>
 10114e8:	1405883a 	add	r2,r2,r16
 10114ec:	14000136 	bltu	r2,r16,10114f4 <__umoddi3+0x200>
 10114f0:	1440e536 	bltu	r2,r17,1011888 <__umoddi3+0x594>
 10114f4:	1463c83a 	sub	r17,r2,r17
 10114f8:	8809883a 	mov	r4,r17
 10114fc:	a80b883a 	mov	r5,r21
 1011500:	1012b0c0 	call	1012b0c <__udivsi3>
 1011504:	8809883a 	mov	r4,r17
 1011508:	b8a3383a 	mul	r17,r23,r2
 101150c:	a80b883a 	mov	r5,r21
 1011510:	1012b140 	call	1012b14 <__umodsi3>
 1011514:	1004943a 	slli	r2,r2,16
 1011518:	b0ffffcc 	andi	r3,r22,65535
 101151c:	10c4b03a 	or	r2,r2,r3
 1011520:	1440042e 	bgeu	r2,r17,1011534 <__umoddi3+0x240>
 1011524:	1405883a 	add	r2,r2,r16
 1011528:	14000236 	bltu	r2,r16,1011534 <__umoddi3+0x240>
 101152c:	1440012e 	bgeu	r2,r17,1011534 <__umoddi3+0x240>
 1011530:	1405883a 	add	r2,r2,r16
 1011534:	1445c83a 	sub	r2,r2,r17
 1011538:	1724d83a 	srl	r18,r2,fp
 101153c:	0013883a 	mov	r9,zero
 1011540:	9011883a 	mov	r8,r18
 1011544:	003fa906 	br	10113ec <__umoddi3+0xf8>
 1011548:	00804034 	movhi	r2,256
 101154c:	10bfffc4 	addi	r2,r2,-1
 1011550:	1400b036 	bltu	r2,r16,1011814 <__umoddi3+0x520>
 1011554:	01400404 	movi	r5,16
 1011558:	2805883a 	mov	r2,r5
 101155c:	003f7c06 	br	1011350 <__umoddi3+0x5c>
 1011560:	01000044 	movi	r4,1
 1011564:	000b883a 	mov	r5,zero
 1011568:	1012b0c0 	call	1012b0c <__udivsi3>
 101156c:	1021883a 	mov	r16,r2
 1011570:	00bfffd4 	movui	r2,65535
 1011574:	143ff436 	bltu	r2,r16,1011548 <__umoddi3+0x254>
 1011578:	003f7106 	br	1011340 <__umoddi3+0x4c>
 101157c:	00804034 	movhi	r2,256
 1011580:	10bfffc4 	addi	r2,r2,-1
 1011584:	1180af36 	bltu	r2,r6,1011844 <__umoddi3+0x550>
 1011588:	01400404 	movi	r5,16
 101158c:	2805883a 	mov	r2,r5
 1011590:	003fbe06 	br	101148c <__umoddi3+0x198>
 1011594:	00804034 	movhi	r2,256
 1011598:	10bfffc4 	addi	r2,r2,-1
 101159c:	11c0ac36 	bltu	r2,r7,1011850 <__umoddi3+0x55c>
 10115a0:	01400404 	movi	r5,16
 10115a4:	2805883a 	mov	r2,r5
 10115a8:	003fa406 	br	101143c <__umoddi3+0x148>
 10115ac:	b409c83a 	sub	r4,r22,r16
 10115b0:	b105803a 	cmpltu	r2,r22,r4
 10115b4:	a187c83a 	sub	r3,r20,r6
 10115b8:	18a9c83a 	sub	r20,r3,r2
 10115bc:	202d883a 	mov	r22,r4
 10115c0:	003fa906 	br	1011468 <__umoddi3+0x174>
 10115c4:	85e0983a 	sll	r16,r16,r23
 10115c8:	35c5c83a 	sub	r2,r6,r23
 10115cc:	a0a2d83a 	srl	r17,r20,r2
 10115d0:	802ad43a 	srli	r21,r16,16
 10115d4:	b084d83a 	srl	r2,r22,r2
 10115d8:	a5c6983a 	sll	r3,r20,r23
 10115dc:	8809883a 	mov	r4,r17
 10115e0:	a80b883a 	mov	r5,r21
 10115e4:	1886b03a 	or	r3,r3,r2
 10115e8:	d8c00115 	stw	r3,4(sp)
 10115ec:	853fffcc 	andi	r20,r16,65535
 10115f0:	1012b0c0 	call	1012b0c <__udivsi3>
 10115f4:	8809883a 	mov	r4,r17
 10115f8:	a80b883a 	mov	r5,r21
 10115fc:	a0a3383a 	mul	r17,r20,r2
 1011600:	1012b140 	call	1012b14 <__umodsi3>
 1011604:	d9000117 	ldw	r4,4(sp)
 1011608:	1004943a 	slli	r2,r2,16
 101160c:	b839883a 	mov	fp,r23
 1011610:	2006d43a 	srli	r3,r4,16
 1011614:	10c4b03a 	or	r2,r2,r3
 1011618:	1440022e 	bgeu	r2,r17,1011624 <__umoddi3+0x330>
 101161c:	1405883a 	add	r2,r2,r16
 1011620:	1400962e 	bgeu	r2,r16,101187c <__umoddi3+0x588>
 1011624:	1463c83a 	sub	r17,r2,r17
 1011628:	8809883a 	mov	r4,r17
 101162c:	a80b883a 	mov	r5,r21
 1011630:	1012b0c0 	call	1012b0c <__udivsi3>
 1011634:	8809883a 	mov	r4,r17
 1011638:	a80b883a 	mov	r5,r21
 101163c:	a0a3383a 	mul	r17,r20,r2
 1011640:	1012b140 	call	1012b14 <__umodsi3>
 1011644:	d9400117 	ldw	r5,4(sp)
 1011648:	1004943a 	slli	r2,r2,16
 101164c:	28ffffcc 	andi	r3,r5,65535
 1011650:	10c4b03a 	or	r2,r2,r3
 1011654:	1440042e 	bgeu	r2,r17,1011668 <__umoddi3+0x374>
 1011658:	1405883a 	add	r2,r2,r16
 101165c:	14000236 	bltu	r2,r16,1011668 <__umoddi3+0x374>
 1011660:	1440012e 	bgeu	r2,r17,1011668 <__umoddi3+0x374>
 1011664:	1405883a 	add	r2,r2,r16
 1011668:	b5ec983a 	sll	r22,r22,r23
 101166c:	1463c83a 	sub	r17,r2,r17
 1011670:	003f4406 	br	1011384 <__umoddi3+0x90>
 1011674:	3d4fc83a 	sub	r7,r7,r21
 1011678:	3546983a 	sll	r3,r6,r21
 101167c:	81c4d83a 	srl	r2,r16,r7
 1011680:	a1e2d83a 	srl	r17,r20,r7
 1011684:	a54c983a 	sll	r6,r20,r21
 1011688:	18aeb03a 	or	r23,r3,r2
 101168c:	b828d43a 	srli	r20,r23,16
 1011690:	b1c4d83a 	srl	r2,r22,r7
 1011694:	8809883a 	mov	r4,r17
 1011698:	a00b883a 	mov	r5,r20
 101169c:	308cb03a 	or	r6,r6,r2
 10116a0:	d9c00315 	stw	r7,12(sp)
 10116a4:	d9800215 	stw	r6,8(sp)
 10116a8:	1012b0c0 	call	1012b0c <__udivsi3>
 10116ac:	8809883a 	mov	r4,r17
 10116b0:	a00b883a 	mov	r5,r20
 10116b4:	1039883a 	mov	fp,r2
 10116b8:	1012b140 	call	1012b14 <__umodsi3>
 10116bc:	b8ffffcc 	andi	r3,r23,65535
 10116c0:	d8c00415 	stw	r3,16(sp)
 10116c4:	d9000217 	ldw	r4,8(sp)
 10116c8:	d9400417 	ldw	r5,16(sp)
 10116cc:	1004943a 	slli	r2,r2,16
 10116d0:	2006d43a 	srli	r3,r4,16
 10116d4:	8560983a 	sll	r16,r16,r21
 10116d8:	2f23383a 	mul	r17,r5,fp
 10116dc:	10c4b03a 	or	r2,r2,r3
 10116e0:	dc000015 	stw	r16,0(sp)
 10116e4:	b56c983a 	sll	r22,r22,r21
 10116e8:	1440032e 	bgeu	r2,r17,10116f8 <__umoddi3+0x404>
 10116ec:	15c5883a 	add	r2,r2,r23
 10116f0:	e73fffc4 	addi	fp,fp,-1
 10116f4:	15c05d2e 	bgeu	r2,r23,101186c <__umoddi3+0x578>
 10116f8:	1463c83a 	sub	r17,r2,r17
 10116fc:	8809883a 	mov	r4,r17
 1011700:	a00b883a 	mov	r5,r20
 1011704:	1012b0c0 	call	1012b0c <__udivsi3>
 1011708:	8809883a 	mov	r4,r17
 101170c:	a00b883a 	mov	r5,r20
 1011710:	1021883a 	mov	r16,r2
 1011714:	1012b140 	call	1012b14 <__umodsi3>
 1011718:	d8c00417 	ldw	r3,16(sp)
 101171c:	d9000217 	ldw	r4,8(sp)
 1011720:	1004943a 	slli	r2,r2,16
 1011724:	1c23383a 	mul	r17,r3,r16
 1011728:	20ffffcc 	andi	r3,r4,65535
 101172c:	10ceb03a 	or	r7,r2,r3
 1011730:	3c40032e 	bgeu	r7,r17,1011740 <__umoddi3+0x44c>
 1011734:	3dcf883a 	add	r7,r7,r23
 1011738:	843fffc4 	addi	r16,r16,-1
 101173c:	3dc0472e 	bgeu	r7,r23,101185c <__umoddi3+0x568>
 1011740:	e004943a 	slli	r2,fp,16
 1011744:	d9400017 	ldw	r5,0(sp)
 1011748:	3c4fc83a 	sub	r7,r7,r17
 101174c:	8084b03a 	or	r2,r16,r2
 1011750:	28ffffcc 	andi	r3,r5,65535
 1011754:	280cd43a 	srli	r6,r5,16
 1011758:	100ad43a 	srli	r5,r2,16
 101175c:	10bfffcc 	andi	r2,r2,65535
 1011760:	10d1383a 	mul	r8,r2,r3
 1011764:	28c7383a 	mul	r3,r5,r3
 1011768:	1185383a 	mul	r2,r2,r6
 101176c:	4008d43a 	srli	r4,r8,16
 1011770:	298b383a 	mul	r5,r5,r6
 1011774:	10c5883a 	add	r2,r2,r3
 1011778:	2089883a 	add	r4,r4,r2
 101177c:	20c0022e 	bgeu	r4,r3,1011788 <__umoddi3+0x494>
 1011780:	00800074 	movhi	r2,1
 1011784:	288b883a 	add	r5,r5,r2
 1011788:	2004d43a 	srli	r2,r4,16
 101178c:	2008943a 	slli	r4,r4,16
 1011790:	40ffffcc 	andi	r3,r8,65535
 1011794:	288b883a 	add	r5,r5,r2
 1011798:	20c9883a 	add	r4,r4,r3
 101179c:	39400b36 	bltu	r7,r5,10117cc <__umoddi3+0x4d8>
 10117a0:	39403d26 	beq	r7,r5,1011898 <__umoddi3+0x5a4>
 10117a4:	394bc83a 	sub	r5,r7,r5
 10117a8:	00000f06 	br	10117e8 <__umoddi3+0x4f4>
 10117ac:	30c5c83a 	sub	r2,r6,r3
 10117b0:	1839883a 	mov	fp,r3
 10117b4:	b084d83a 	srl	r2,r22,r2
 10117b8:	a0c6983a 	sll	r3,r20,r3
 10117bc:	8720983a 	sll	r16,r16,fp
 10117c0:	b72c983a 	sll	r22,r22,fp
 10117c4:	18a8b03a 	or	r20,r3,r2
 10117c8:	003f3a06 	br	10114b4 <__umoddi3+0x1c0>
 10117cc:	d8c00017 	ldw	r3,0(sp)
 10117d0:	20c5c83a 	sub	r2,r4,r3
 10117d4:	2089803a 	cmpltu	r4,r4,r2
 10117d8:	2dc7c83a 	sub	r3,r5,r23
 10117dc:	1907c83a 	sub	r3,r3,r4
 10117e0:	38cbc83a 	sub	r5,r7,r3
 10117e4:	1009883a 	mov	r4,r2
 10117e8:	b105c83a 	sub	r2,r22,r4
 10117ec:	b087803a 	cmpltu	r3,r22,r2
 10117f0:	28c7c83a 	sub	r3,r5,r3
 10117f4:	d9400317 	ldw	r5,12(sp)
 10117f8:	1544d83a 	srl	r2,r2,r21
 10117fc:	1948983a 	sll	r4,r3,r5
 1011800:	1d46d83a 	srl	r3,r3,r21
 1011804:	20a4b03a 	or	r18,r4,r2
 1011808:	9011883a 	mov	r8,r18
 101180c:	1813883a 	mov	r9,r3
 1011810:	003ef606 	br	10113ec <__umoddi3+0xf8>
 1011814:	01400604 	movi	r5,24
 1011818:	2805883a 	mov	r2,r5
 101181c:	003ecc06 	br	1011350 <__umoddi3+0x5c>
 1011820:	01400204 	movi	r5,8
 1011824:	2805883a 	mov	r2,r5
 1011828:	003ec906 	br	1011350 <__umoddi3+0x5c>
 101182c:	01400204 	movi	r5,8
 1011830:	2805883a 	mov	r2,r5
 1011834:	003f0106 	br	101143c <__umoddi3+0x148>
 1011838:	01400204 	movi	r5,8
 101183c:	2805883a 	mov	r2,r5
 1011840:	003f1206 	br	101148c <__umoddi3+0x198>
 1011844:	01400604 	movi	r5,24
 1011848:	2805883a 	mov	r2,r5
 101184c:	003f0f06 	br	101148c <__umoddi3+0x198>
 1011850:	01400604 	movi	r5,24
 1011854:	2805883a 	mov	r2,r5
 1011858:	003ef806 	br	101143c <__umoddi3+0x148>
 101185c:	3c7fb82e 	bgeu	r7,r17,1011740 <__umoddi3+0x44c>
 1011860:	843fffc4 	addi	r16,r16,-1
 1011864:	3dcf883a 	add	r7,r7,r23
 1011868:	003fb506 	br	1011740 <__umoddi3+0x44c>
 101186c:	147fa22e 	bgeu	r2,r17,10116f8 <__umoddi3+0x404>
 1011870:	e73fffc4 	addi	fp,fp,-1
 1011874:	15c5883a 	add	r2,r2,r23
 1011878:	003f9f06 	br	10116f8 <__umoddi3+0x404>
 101187c:	147f692e 	bgeu	r2,r17,1011624 <__umoddi3+0x330>
 1011880:	1405883a 	add	r2,r2,r16
 1011884:	003f6706 	br	1011624 <__umoddi3+0x330>
 1011888:	1405883a 	add	r2,r2,r16
 101188c:	003f1906 	br	10114f4 <__umoddi3+0x200>
 1011890:	1405883a 	add	r2,r2,r16
 1011894:	003ec906 	br	10113bc <__umoddi3+0xc8>
 1011898:	b13fcc36 	bltu	r22,r4,10117cc <__umoddi3+0x4d8>
 101189c:	000b883a 	mov	r5,zero
 10118a0:	003fd106 	br	10117e8 <__umoddi3+0x4f4>

010118a4 <_fpadd_parts>:
 10118a4:	defff804 	addi	sp,sp,-32
 10118a8:	dcc00315 	stw	r19,12(sp)
 10118ac:	2027883a 	mov	r19,r4
 10118b0:	21000017 	ldw	r4,0(r4)
 10118b4:	00c00044 	movi	r3,1
 10118b8:	dd400515 	stw	r21,20(sp)
 10118bc:	dd000415 	stw	r20,16(sp)
 10118c0:	ddc00715 	stw	r23,28(sp)
 10118c4:	dd800615 	stw	r22,24(sp)
 10118c8:	dc800215 	stw	r18,8(sp)
 10118cc:	dc400115 	stw	r17,4(sp)
 10118d0:	dc000015 	stw	r16,0(sp)
 10118d4:	282b883a 	mov	r21,r5
 10118d8:	3029883a 	mov	r20,r6
 10118dc:	1900632e 	bgeu	r3,r4,1011a6c <_fpadd_parts+0x1c8>
 10118e0:	28800017 	ldw	r2,0(r5)
 10118e4:	1880812e 	bgeu	r3,r2,1011aec <_fpadd_parts+0x248>
 10118e8:	00c00104 	movi	r3,4
 10118ec:	20c0dc26 	beq	r4,r3,1011c60 <_fpadd_parts+0x3bc>
 10118f0:	10c07e26 	beq	r2,r3,1011aec <_fpadd_parts+0x248>
 10118f4:	00c00084 	movi	r3,2
 10118f8:	10c06726 	beq	r2,r3,1011a98 <_fpadd_parts+0x1f4>
 10118fc:	20c07b26 	beq	r4,r3,1011aec <_fpadd_parts+0x248>
 1011900:	9dc00217 	ldw	r23,8(r19)
 1011904:	28c00217 	ldw	r3,8(r5)
 1011908:	9c400317 	ldw	r17,12(r19)
 101190c:	2bc00317 	ldw	r15,12(r5)
 1011910:	b8cdc83a 	sub	r6,r23,r3
 1011914:	9c800417 	ldw	r18,16(r19)
 1011918:	2c000417 	ldw	r16,16(r5)
 101191c:	3009883a 	mov	r4,r6
 1011920:	30009716 	blt	r6,zero,1011b80 <_fpadd_parts+0x2dc>
 1011924:	00800fc4 	movi	r2,63
 1011928:	11806b16 	blt	r2,r6,1011ad8 <_fpadd_parts+0x234>
 101192c:	0100a40e 	bge	zero,r4,1011bc0 <_fpadd_parts+0x31c>
 1011930:	35bff804 	addi	r22,r6,-32
 1011934:	b000bc16 	blt	r22,zero,1011c28 <_fpadd_parts+0x384>
 1011938:	8596d83a 	srl	r11,r16,r22
 101193c:	0019883a 	mov	r12,zero
 1011940:	0013883a 	mov	r9,zero
 1011944:	01000044 	movi	r4,1
 1011948:	0015883a 	mov	r10,zero
 101194c:	b000be16 	blt	r22,zero,1011c48 <_fpadd_parts+0x3a4>
 1011950:	2590983a 	sll	r8,r4,r22
 1011954:	000f883a 	mov	r7,zero
 1011958:	00bfffc4 	movi	r2,-1
 101195c:	3889883a 	add	r4,r7,r2
 1011960:	408b883a 	add	r5,r8,r2
 1011964:	21cd803a 	cmpltu	r6,r4,r7
 1011968:	314b883a 	add	r5,r6,r5
 101196c:	7904703a 	and	r2,r15,r4
 1011970:	8146703a 	and	r3,r16,r5
 1011974:	10c4b03a 	or	r2,r2,r3
 1011978:	10000226 	beq	r2,zero,1011984 <_fpadd_parts+0xe0>
 101197c:	02400044 	movi	r9,1
 1011980:	0015883a 	mov	r10,zero
 1011984:	5a5eb03a 	or	r15,r11,r9
 1011988:	62a0b03a 	or	r16,r12,r10
 101198c:	99400117 	ldw	r5,4(r19)
 1011990:	a8800117 	ldw	r2,4(r21)
 1011994:	28806e26 	beq	r5,r2,1011b50 <_fpadd_parts+0x2ac>
 1011998:	28006626 	beq	r5,zero,1011b34 <_fpadd_parts+0x290>
 101199c:	7c45c83a 	sub	r2,r15,r17
 10119a0:	7889803a 	cmpltu	r4,r15,r2
 10119a4:	8487c83a 	sub	r3,r16,r18
 10119a8:	1909c83a 	sub	r4,r3,r4
 10119ac:	100d883a 	mov	r6,r2
 10119b0:	200f883a 	mov	r7,r4
 10119b4:	38007716 	blt	r7,zero,1011b94 <_fpadd_parts+0x2f0>
 10119b8:	a5c00215 	stw	r23,8(r20)
 10119bc:	a1c00415 	stw	r7,16(r20)
 10119c0:	a0000115 	stw	zero,4(r20)
 10119c4:	a1800315 	stw	r6,12(r20)
 10119c8:	a2000317 	ldw	r8,12(r20)
 10119cc:	a2400417 	ldw	r9,16(r20)
 10119d0:	00bfffc4 	movi	r2,-1
 10119d4:	408b883a 	add	r5,r8,r2
 10119d8:	2a09803a 	cmpltu	r4,r5,r8
 10119dc:	488d883a 	add	r6,r9,r2
 10119e0:	01c40034 	movhi	r7,4096
 10119e4:	39ffffc4 	addi	r7,r7,-1
 10119e8:	218d883a 	add	r6,r4,r6
 10119ec:	39801736 	bltu	r7,r6,1011a4c <_fpadd_parts+0x1a8>
 10119f0:	31c06526 	beq	r6,r7,1011b88 <_fpadd_parts+0x2e4>
 10119f4:	a3000217 	ldw	r12,8(r20)
 10119f8:	4209883a 	add	r4,r8,r8
 10119fc:	00bfffc4 	movi	r2,-1
 1011a00:	220f803a 	cmpltu	r7,r4,r8
 1011a04:	4a4b883a 	add	r5,r9,r9
 1011a08:	394f883a 	add	r7,r7,r5
 1011a0c:	2095883a 	add	r10,r4,r2
 1011a10:	3897883a 	add	r11,r7,r2
 1011a14:	510d803a 	cmpltu	r6,r10,r4
 1011a18:	6099883a 	add	r12,r12,r2
 1011a1c:	32d7883a 	add	r11,r6,r11
 1011a20:	00840034 	movhi	r2,4096
 1011a24:	10bfffc4 	addi	r2,r2,-1
 1011a28:	2011883a 	mov	r8,r4
 1011a2c:	3813883a 	mov	r9,r7
 1011a30:	a1000315 	stw	r4,12(r20)
 1011a34:	a1c00415 	stw	r7,16(r20)
 1011a38:	a3000215 	stw	r12,8(r20)
 1011a3c:	12c00336 	bltu	r2,r11,1011a4c <_fpadd_parts+0x1a8>
 1011a40:	58bfed1e 	bne	r11,r2,10119f8 <_fpadd_parts+0x154>
 1011a44:	00bfff84 	movi	r2,-2
 1011a48:	12bfeb2e 	bgeu	r2,r10,10119f8 <_fpadd_parts+0x154>
 1011a4c:	a2800417 	ldw	r10,16(r20)
 1011a50:	008000c4 	movi	r2,3
 1011a54:	00c80034 	movhi	r3,8192
 1011a58:	18ffffc4 	addi	r3,r3,-1
 1011a5c:	a2400317 	ldw	r9,12(r20)
 1011a60:	a0800015 	stw	r2,0(r20)
 1011a64:	1a802336 	bltu	r3,r10,1011af4 <_fpadd_parts+0x250>
 1011a68:	a027883a 	mov	r19,r20
 1011a6c:	9805883a 	mov	r2,r19
 1011a70:	ddc00717 	ldw	r23,28(sp)
 1011a74:	dd800617 	ldw	r22,24(sp)
 1011a78:	dd400517 	ldw	r21,20(sp)
 1011a7c:	dd000417 	ldw	r20,16(sp)
 1011a80:	dcc00317 	ldw	r19,12(sp)
 1011a84:	dc800217 	ldw	r18,8(sp)
 1011a88:	dc400117 	ldw	r17,4(sp)
 1011a8c:	dc000017 	ldw	r16,0(sp)
 1011a90:	dec00804 	addi	sp,sp,32
 1011a94:	f800283a 	ret
 1011a98:	20fff41e 	bne	r4,r3,1011a6c <_fpadd_parts+0x1c8>
 1011a9c:	31000015 	stw	r4,0(r6)
 1011aa0:	98800117 	ldw	r2,4(r19)
 1011aa4:	30800115 	stw	r2,4(r6)
 1011aa8:	98c00217 	ldw	r3,8(r19)
 1011aac:	30c00215 	stw	r3,8(r6)
 1011ab0:	98800317 	ldw	r2,12(r19)
 1011ab4:	30800315 	stw	r2,12(r6)
 1011ab8:	98c00417 	ldw	r3,16(r19)
 1011abc:	30c00415 	stw	r3,16(r6)
 1011ac0:	98800117 	ldw	r2,4(r19)
 1011ac4:	28c00117 	ldw	r3,4(r5)
 1011ac8:	3027883a 	mov	r19,r6
 1011acc:	10c4703a 	and	r2,r2,r3
 1011ad0:	30800115 	stw	r2,4(r6)
 1011ad4:	003fe506 	br	1011a6c <_fpadd_parts+0x1c8>
 1011ad8:	1dc02616 	blt	r3,r23,1011b74 <_fpadd_parts+0x2d0>
 1011adc:	0023883a 	mov	r17,zero
 1011ae0:	182f883a 	mov	r23,r3
 1011ae4:	0025883a 	mov	r18,zero
 1011ae8:	003fa806 	br	101198c <_fpadd_parts+0xe8>
 1011aec:	a827883a 	mov	r19,r21
 1011af0:	003fde06 	br	1011a6c <_fpadd_parts+0x1c8>
 1011af4:	01800044 	movi	r6,1
 1011af8:	500497fa 	slli	r2,r10,31
 1011afc:	4808d07a 	srli	r4,r9,1
 1011b00:	518ad83a 	srl	r5,r10,r6
 1011b04:	a2000217 	ldw	r8,8(r20)
 1011b08:	1108b03a 	or	r4,r2,r4
 1011b0c:	0007883a 	mov	r3,zero
 1011b10:	4984703a 	and	r2,r9,r6
 1011b14:	208cb03a 	or	r6,r4,r2
 1011b18:	28ceb03a 	or	r7,r5,r3
 1011b1c:	42000044 	addi	r8,r8,1
 1011b20:	a027883a 	mov	r19,r20
 1011b24:	a1c00415 	stw	r7,16(r20)
 1011b28:	a2000215 	stw	r8,8(r20)
 1011b2c:	a1800315 	stw	r6,12(r20)
 1011b30:	003fce06 	br	1011a6c <_fpadd_parts+0x1c8>
 1011b34:	8bc5c83a 	sub	r2,r17,r15
 1011b38:	8889803a 	cmpltu	r4,r17,r2
 1011b3c:	9407c83a 	sub	r3,r18,r16
 1011b40:	1909c83a 	sub	r4,r3,r4
 1011b44:	100d883a 	mov	r6,r2
 1011b48:	200f883a 	mov	r7,r4
 1011b4c:	003f9906 	br	10119b4 <_fpadd_parts+0x110>
 1011b50:	7c45883a 	add	r2,r15,r17
 1011b54:	13c9803a 	cmpltu	r4,r2,r15
 1011b58:	8487883a 	add	r3,r16,r18
 1011b5c:	20c9883a 	add	r4,r4,r3
 1011b60:	a1400115 	stw	r5,4(r20)
 1011b64:	a5c00215 	stw	r23,8(r20)
 1011b68:	a0800315 	stw	r2,12(r20)
 1011b6c:	a1000415 	stw	r4,16(r20)
 1011b70:	003fb606 	br	1011a4c <_fpadd_parts+0x1a8>
 1011b74:	001f883a 	mov	r15,zero
 1011b78:	0021883a 	mov	r16,zero
 1011b7c:	003f8306 	br	101198c <_fpadd_parts+0xe8>
 1011b80:	018dc83a 	sub	r6,zero,r6
 1011b84:	003f6706 	br	1011924 <_fpadd_parts+0x80>
 1011b88:	00bfff84 	movi	r2,-2
 1011b8c:	117faf36 	bltu	r2,r5,1011a4c <_fpadd_parts+0x1a8>
 1011b90:	003f9806 	br	10119f4 <_fpadd_parts+0x150>
 1011b94:	0005883a 	mov	r2,zero
 1011b98:	1189c83a 	sub	r4,r2,r6
 1011b9c:	1105803a 	cmpltu	r2,r2,r4
 1011ba0:	01cbc83a 	sub	r5,zero,r7
 1011ba4:	2885c83a 	sub	r2,r5,r2
 1011ba8:	01800044 	movi	r6,1
 1011bac:	a1800115 	stw	r6,4(r20)
 1011bb0:	a5c00215 	stw	r23,8(r20)
 1011bb4:	a1000315 	stw	r4,12(r20)
 1011bb8:	a0800415 	stw	r2,16(r20)
 1011bbc:	003f8206 	br	10119c8 <_fpadd_parts+0x124>
 1011bc0:	203f7226 	beq	r4,zero,101198c <_fpadd_parts+0xe8>
 1011bc4:	35bff804 	addi	r22,r6,-32
 1011bc8:	b9af883a 	add	r23,r23,r6
 1011bcc:	b0003116 	blt	r22,zero,1011c94 <_fpadd_parts+0x3f0>
 1011bd0:	959ad83a 	srl	r13,r18,r22
 1011bd4:	001d883a 	mov	r14,zero
 1011bd8:	000f883a 	mov	r7,zero
 1011bdc:	01000044 	movi	r4,1
 1011be0:	0011883a 	mov	r8,zero
 1011be4:	b0002516 	blt	r22,zero,1011c7c <_fpadd_parts+0x3d8>
 1011be8:	2594983a 	sll	r10,r4,r22
 1011bec:	0013883a 	mov	r9,zero
 1011bf0:	00bfffc4 	movi	r2,-1
 1011bf4:	4889883a 	add	r4,r9,r2
 1011bf8:	508b883a 	add	r5,r10,r2
 1011bfc:	224d803a 	cmpltu	r6,r4,r9
 1011c00:	314b883a 	add	r5,r6,r5
 1011c04:	8904703a 	and	r2,r17,r4
 1011c08:	9146703a 	and	r3,r18,r5
 1011c0c:	10c4b03a 	or	r2,r2,r3
 1011c10:	10000226 	beq	r2,zero,1011c1c <_fpadd_parts+0x378>
 1011c14:	01c00044 	movi	r7,1
 1011c18:	0011883a 	mov	r8,zero
 1011c1c:	69e2b03a 	or	r17,r13,r7
 1011c20:	7224b03a 	or	r18,r14,r8
 1011c24:	003f5906 	br	101198c <_fpadd_parts+0xe8>
 1011c28:	8407883a 	add	r3,r16,r16
 1011c2c:	008007c4 	movi	r2,31
 1011c30:	1185c83a 	sub	r2,r2,r6
 1011c34:	1886983a 	sll	r3,r3,r2
 1011c38:	7996d83a 	srl	r11,r15,r6
 1011c3c:	8198d83a 	srl	r12,r16,r6
 1011c40:	1ad6b03a 	or	r11,r3,r11
 1011c44:	003f3e06 	br	1011940 <_fpadd_parts+0x9c>
 1011c48:	2006d07a 	srli	r3,r4,1
 1011c4c:	008007c4 	movi	r2,31
 1011c50:	1185c83a 	sub	r2,r2,r6
 1011c54:	1890d83a 	srl	r8,r3,r2
 1011c58:	218e983a 	sll	r7,r4,r6
 1011c5c:	003f3e06 	br	1011958 <_fpadd_parts+0xb4>
 1011c60:	113f821e 	bne	r2,r4,1011a6c <_fpadd_parts+0x1c8>
 1011c64:	28c00117 	ldw	r3,4(r5)
 1011c68:	98800117 	ldw	r2,4(r19)
 1011c6c:	10ff7f26 	beq	r2,r3,1011a6c <_fpadd_parts+0x1c8>
 1011c70:	04c040b4 	movhi	r19,258
 1011c74:	9cfd5f04 	addi	r19,r19,-2692
 1011c78:	003f7c06 	br	1011a6c <_fpadd_parts+0x1c8>
 1011c7c:	2006d07a 	srli	r3,r4,1
 1011c80:	008007c4 	movi	r2,31
 1011c84:	1185c83a 	sub	r2,r2,r6
 1011c88:	1894d83a 	srl	r10,r3,r2
 1011c8c:	2192983a 	sll	r9,r4,r6
 1011c90:	003fd706 	br	1011bf0 <_fpadd_parts+0x34c>
 1011c94:	9487883a 	add	r3,r18,r18
 1011c98:	008007c4 	movi	r2,31
 1011c9c:	1185c83a 	sub	r2,r2,r6
 1011ca0:	1886983a 	sll	r3,r3,r2
 1011ca4:	899ad83a 	srl	r13,r17,r6
 1011ca8:	919cd83a 	srl	r14,r18,r6
 1011cac:	1b5ab03a 	or	r13,r3,r13
 1011cb0:	003fc906 	br	1011bd8 <_fpadd_parts+0x334>

01011cb4 <__subdf3>:
 1011cb4:	deffea04 	addi	sp,sp,-88
 1011cb8:	dcc01415 	stw	r19,80(sp)
 1011cbc:	dcc00404 	addi	r19,sp,16
 1011cc0:	2011883a 	mov	r8,r4
 1011cc4:	2813883a 	mov	r9,r5
 1011cc8:	dc401315 	stw	r17,76(sp)
 1011ccc:	d809883a 	mov	r4,sp
 1011cd0:	980b883a 	mov	r5,r19
 1011cd4:	dc400904 	addi	r17,sp,36
 1011cd8:	dfc01515 	stw	ra,84(sp)
 1011cdc:	da400115 	stw	r9,4(sp)
 1011ce0:	d9c00315 	stw	r7,12(sp)
 1011ce4:	da000015 	stw	r8,0(sp)
 1011ce8:	d9800215 	stw	r6,8(sp)
 1011cec:	1012f480 	call	1012f48 <__unpack_d>
 1011cf0:	d9000204 	addi	r4,sp,8
 1011cf4:	880b883a 	mov	r5,r17
 1011cf8:	1012f480 	call	1012f48 <__unpack_d>
 1011cfc:	d8800a17 	ldw	r2,40(sp)
 1011d00:	880b883a 	mov	r5,r17
 1011d04:	9809883a 	mov	r4,r19
 1011d08:	d9800e04 	addi	r6,sp,56
 1011d0c:	1080005c 	xori	r2,r2,1
 1011d10:	d8800a15 	stw	r2,40(sp)
 1011d14:	10118a40 	call	10118a4 <_fpadd_parts>
 1011d18:	1009883a 	mov	r4,r2
 1011d1c:	1012c340 	call	1012c34 <__pack_d>
 1011d20:	dfc01517 	ldw	ra,84(sp)
 1011d24:	dcc01417 	ldw	r19,80(sp)
 1011d28:	dc401317 	ldw	r17,76(sp)
 1011d2c:	dec01604 	addi	sp,sp,88
 1011d30:	f800283a 	ret

01011d34 <__adddf3>:
 1011d34:	deffea04 	addi	sp,sp,-88
 1011d38:	dcc01415 	stw	r19,80(sp)
 1011d3c:	dcc00404 	addi	r19,sp,16
 1011d40:	2011883a 	mov	r8,r4
 1011d44:	2813883a 	mov	r9,r5
 1011d48:	dc401315 	stw	r17,76(sp)
 1011d4c:	d809883a 	mov	r4,sp
 1011d50:	980b883a 	mov	r5,r19
 1011d54:	dc400904 	addi	r17,sp,36
 1011d58:	dfc01515 	stw	ra,84(sp)
 1011d5c:	da400115 	stw	r9,4(sp)
 1011d60:	d9c00315 	stw	r7,12(sp)
 1011d64:	da000015 	stw	r8,0(sp)
 1011d68:	d9800215 	stw	r6,8(sp)
 1011d6c:	1012f480 	call	1012f48 <__unpack_d>
 1011d70:	d9000204 	addi	r4,sp,8
 1011d74:	880b883a 	mov	r5,r17
 1011d78:	1012f480 	call	1012f48 <__unpack_d>
 1011d7c:	d9800e04 	addi	r6,sp,56
 1011d80:	9809883a 	mov	r4,r19
 1011d84:	880b883a 	mov	r5,r17
 1011d88:	10118a40 	call	10118a4 <_fpadd_parts>
 1011d8c:	1009883a 	mov	r4,r2
 1011d90:	1012c340 	call	1012c34 <__pack_d>
 1011d94:	dfc01517 	ldw	ra,84(sp)
 1011d98:	dcc01417 	ldw	r19,80(sp)
 1011d9c:	dc401317 	ldw	r17,76(sp)
 1011da0:	dec01604 	addi	sp,sp,88
 1011da4:	f800283a 	ret

01011da8 <__muldf3>:
 1011da8:	deffe004 	addi	sp,sp,-128
 1011dac:	dc401815 	stw	r17,96(sp)
 1011db0:	dc400404 	addi	r17,sp,16
 1011db4:	2011883a 	mov	r8,r4
 1011db8:	2813883a 	mov	r9,r5
 1011dbc:	dc001715 	stw	r16,92(sp)
 1011dc0:	d809883a 	mov	r4,sp
 1011dc4:	880b883a 	mov	r5,r17
 1011dc8:	dc000904 	addi	r16,sp,36
 1011dcc:	dfc01f15 	stw	ra,124(sp)
 1011dd0:	da400115 	stw	r9,4(sp)
 1011dd4:	d9c00315 	stw	r7,12(sp)
 1011dd8:	da000015 	stw	r8,0(sp)
 1011ddc:	d9800215 	stw	r6,8(sp)
 1011de0:	ddc01e15 	stw	r23,120(sp)
 1011de4:	dd801d15 	stw	r22,116(sp)
 1011de8:	dd401c15 	stw	r21,112(sp)
 1011dec:	dd001b15 	stw	r20,108(sp)
 1011df0:	dcc01a15 	stw	r19,104(sp)
 1011df4:	dc801915 	stw	r18,100(sp)
 1011df8:	1012f480 	call	1012f48 <__unpack_d>
 1011dfc:	d9000204 	addi	r4,sp,8
 1011e00:	800b883a 	mov	r5,r16
 1011e04:	1012f480 	call	1012f48 <__unpack_d>
 1011e08:	d9000417 	ldw	r4,16(sp)
 1011e0c:	00800044 	movi	r2,1
 1011e10:	1100102e 	bgeu	r2,r4,1011e54 <__muldf3+0xac>
 1011e14:	d8c00917 	ldw	r3,36(sp)
 1011e18:	10c0062e 	bgeu	r2,r3,1011e34 <__muldf3+0x8c>
 1011e1c:	00800104 	movi	r2,4
 1011e20:	20800a26 	beq	r4,r2,1011e4c <__muldf3+0xa4>
 1011e24:	1880cc26 	beq	r3,r2,1012158 <__muldf3+0x3b0>
 1011e28:	00800084 	movi	r2,2
 1011e2c:	20800926 	beq	r4,r2,1011e54 <__muldf3+0xac>
 1011e30:	1880191e 	bne	r3,r2,1011e98 <__muldf3+0xf0>
 1011e34:	d8c00a17 	ldw	r3,40(sp)
 1011e38:	d8800517 	ldw	r2,20(sp)
 1011e3c:	8009883a 	mov	r4,r16
 1011e40:	10c4c03a 	cmpne	r2,r2,r3
 1011e44:	d8800a15 	stw	r2,40(sp)
 1011e48:	00000706 	br	1011e68 <__muldf3+0xc0>
 1011e4c:	00800084 	movi	r2,2
 1011e50:	1880c326 	beq	r3,r2,1012160 <__muldf3+0x3b8>
 1011e54:	d8800517 	ldw	r2,20(sp)
 1011e58:	d8c00a17 	ldw	r3,40(sp)
 1011e5c:	8809883a 	mov	r4,r17
 1011e60:	10c4c03a 	cmpne	r2,r2,r3
 1011e64:	d8800515 	stw	r2,20(sp)
 1011e68:	1012c340 	call	1012c34 <__pack_d>
 1011e6c:	dfc01f17 	ldw	ra,124(sp)
 1011e70:	ddc01e17 	ldw	r23,120(sp)
 1011e74:	dd801d17 	ldw	r22,116(sp)
 1011e78:	dd401c17 	ldw	r21,112(sp)
 1011e7c:	dd001b17 	ldw	r20,108(sp)
 1011e80:	dcc01a17 	ldw	r19,104(sp)
 1011e84:	dc801917 	ldw	r18,100(sp)
 1011e88:	dc401817 	ldw	r17,96(sp)
 1011e8c:	dc001717 	ldw	r16,92(sp)
 1011e90:	dec02004 	addi	sp,sp,128
 1011e94:	f800283a 	ret
 1011e98:	dd800717 	ldw	r22,28(sp)
 1011e9c:	dc800c17 	ldw	r18,48(sp)
 1011ea0:	002b883a 	mov	r21,zero
 1011ea4:	0023883a 	mov	r17,zero
 1011ea8:	a80b883a 	mov	r5,r21
 1011eac:	b00d883a 	mov	r6,r22
 1011eb0:	880f883a 	mov	r7,r17
 1011eb4:	ddc00817 	ldw	r23,32(sp)
 1011eb8:	dcc00d17 	ldw	r19,52(sp)
 1011ebc:	9009883a 	mov	r4,r18
 1011ec0:	1012b1c0 	call	1012b1c <__muldi3>
 1011ec4:	001b883a 	mov	r13,zero
 1011ec8:	680f883a 	mov	r7,r13
 1011ecc:	b009883a 	mov	r4,r22
 1011ed0:	000b883a 	mov	r5,zero
 1011ed4:	980d883a 	mov	r6,r19
 1011ed8:	b82d883a 	mov	r22,r23
 1011edc:	002f883a 	mov	r23,zero
 1011ee0:	db401615 	stw	r13,88(sp)
 1011ee4:	d8801315 	stw	r2,76(sp)
 1011ee8:	d8c01415 	stw	r3,80(sp)
 1011eec:	dcc01515 	stw	r19,84(sp)
 1011ef0:	1012b1c0 	call	1012b1c <__muldi3>
 1011ef4:	b00d883a 	mov	r6,r22
 1011ef8:	000b883a 	mov	r5,zero
 1011efc:	9009883a 	mov	r4,r18
 1011f00:	b80f883a 	mov	r7,r23
 1011f04:	1021883a 	mov	r16,r2
 1011f08:	1823883a 	mov	r17,r3
 1011f0c:	1012b1c0 	call	1012b1c <__muldi3>
 1011f10:	8085883a 	add	r2,r16,r2
 1011f14:	140d803a 	cmpltu	r6,r2,r16
 1011f18:	88c7883a 	add	r3,r17,r3
 1011f1c:	30cd883a 	add	r6,r6,r3
 1011f20:	1029883a 	mov	r20,r2
 1011f24:	302b883a 	mov	r21,r6
 1011f28:	da801317 	ldw	r10,76(sp)
 1011f2c:	dac01417 	ldw	r11,80(sp)
 1011f30:	db001517 	ldw	r12,84(sp)
 1011f34:	db401617 	ldw	r13,88(sp)
 1011f38:	3440612e 	bgeu	r6,r17,10120c0 <__muldf3+0x318>
 1011f3c:	0009883a 	mov	r4,zero
 1011f40:	5105883a 	add	r2,r10,r4
 1011f44:	128d803a 	cmpltu	r6,r2,r10
 1011f48:	5d07883a 	add	r3,r11,r20
 1011f4c:	30cd883a 	add	r6,r6,r3
 1011f50:	0021883a 	mov	r16,zero
 1011f54:	04400044 	movi	r17,1
 1011f58:	1025883a 	mov	r18,r2
 1011f5c:	3027883a 	mov	r19,r6
 1011f60:	32c06236 	bltu	r6,r11,10120ec <__muldf3+0x344>
 1011f64:	59807a26 	beq	r11,r6,1012150 <__muldf3+0x3a8>
 1011f68:	680b883a 	mov	r5,r13
 1011f6c:	b80f883a 	mov	r7,r23
 1011f70:	6009883a 	mov	r4,r12
 1011f74:	b00d883a 	mov	r6,r22
 1011f78:	1012b1c0 	call	1012b1c <__muldi3>
 1011f7c:	1009883a 	mov	r4,r2
 1011f80:	000f883a 	mov	r7,zero
 1011f84:	1545883a 	add	r2,r2,r21
 1011f88:	1111803a 	cmpltu	r8,r2,r4
 1011f8c:	19c7883a 	add	r3,r3,r7
 1011f90:	40c7883a 	add	r3,r8,r3
 1011f94:	88cb883a 	add	r5,r17,r3
 1011f98:	d8c00617 	ldw	r3,24(sp)
 1011f9c:	8089883a 	add	r4,r16,r2
 1011fa0:	d8800b17 	ldw	r2,44(sp)
 1011fa4:	18c00104 	addi	r3,r3,4
 1011fa8:	240d803a 	cmpltu	r6,r4,r16
 1011fac:	10c7883a 	add	r3,r2,r3
 1011fb0:	2013883a 	mov	r9,r4
 1011fb4:	d8800a17 	ldw	r2,40(sp)
 1011fb8:	d9000517 	ldw	r4,20(sp)
 1011fbc:	314d883a 	add	r6,r6,r5
 1011fc0:	3015883a 	mov	r10,r6
 1011fc4:	2088c03a 	cmpne	r4,r4,r2
 1011fc8:	00880034 	movhi	r2,8192
 1011fcc:	10bfffc4 	addi	r2,r2,-1
 1011fd0:	d9000f15 	stw	r4,60(sp)
 1011fd4:	d8c01015 	stw	r3,64(sp)
 1011fd8:	1180162e 	bgeu	r2,r6,1012034 <__muldf3+0x28c>
 1011fdc:	1811883a 	mov	r8,r3
 1011fe0:	101f883a 	mov	r15,r2
 1011fe4:	980497fa 	slli	r2,r19,31
 1011fe8:	9016d07a 	srli	r11,r18,1
 1011fec:	500697fa 	slli	r3,r10,31
 1011ff0:	480cd07a 	srli	r6,r9,1
 1011ff4:	500ed07a 	srli	r7,r10,1
 1011ff8:	12d6b03a 	or	r11,r2,r11
 1011ffc:	00800044 	movi	r2,1
 1012000:	198cb03a 	or	r6,r3,r6
 1012004:	4888703a 	and	r4,r9,r2
 1012008:	9818d07a 	srli	r12,r19,1
 101200c:	001b883a 	mov	r13,zero
 1012010:	03a00034 	movhi	r14,32768
 1012014:	3013883a 	mov	r9,r6
 1012018:	3815883a 	mov	r10,r7
 101201c:	4091883a 	add	r8,r8,r2
 1012020:	20000226 	beq	r4,zero,101202c <__muldf3+0x284>
 1012024:	5b64b03a 	or	r18,r11,r13
 1012028:	63a6b03a 	or	r19,r12,r14
 101202c:	7abfed36 	bltu	r15,r10,1011fe4 <__muldf3+0x23c>
 1012030:	da001015 	stw	r8,64(sp)
 1012034:	00840034 	movhi	r2,4096
 1012038:	10bfffc4 	addi	r2,r2,-1
 101203c:	12801436 	bltu	r2,r10,1012090 <__muldf3+0x2e8>
 1012040:	da001017 	ldw	r8,64(sp)
 1012044:	101f883a 	mov	r15,r2
 1012048:	4a45883a 	add	r2,r9,r9
 101204c:	124d803a 	cmpltu	r6,r2,r9
 1012050:	5287883a 	add	r3,r10,r10
 1012054:	9497883a 	add	r11,r18,r18
 1012058:	5c8f803a 	cmpltu	r7,r11,r18
 101205c:	9cd9883a 	add	r12,r19,r19
 1012060:	01000044 	movi	r4,1
 1012064:	30cd883a 	add	r6,r6,r3
 1012068:	3b0f883a 	add	r7,r7,r12
 101206c:	423fffc4 	addi	r8,r8,-1
 1012070:	1013883a 	mov	r9,r2
 1012074:	3015883a 	mov	r10,r6
 1012078:	111ab03a 	or	r13,r2,r4
 101207c:	98003016 	blt	r19,zero,1012140 <__muldf3+0x398>
 1012080:	5825883a 	mov	r18,r11
 1012084:	3827883a 	mov	r19,r7
 1012088:	7abfef2e 	bgeu	r15,r10,1012048 <__muldf3+0x2a0>
 101208c:	da001015 	stw	r8,64(sp)
 1012090:	00803fc4 	movi	r2,255
 1012094:	488e703a 	and	r7,r9,r2
 1012098:	00802004 	movi	r2,128
 101209c:	0007883a 	mov	r3,zero
 10120a0:	0011883a 	mov	r8,zero
 10120a4:	38801826 	beq	r7,r2,1012108 <__muldf3+0x360>
 10120a8:	008000c4 	movi	r2,3
 10120ac:	d9000e04 	addi	r4,sp,56
 10120b0:	da801215 	stw	r10,72(sp)
 10120b4:	d8800e15 	stw	r2,56(sp)
 10120b8:	da401115 	stw	r9,68(sp)
 10120bc:	003f6a06 	br	1011e68 <__muldf3+0xc0>
 10120c0:	89802126 	beq	r17,r6,1012148 <__muldf3+0x3a0>
 10120c4:	0009883a 	mov	r4,zero
 10120c8:	5105883a 	add	r2,r10,r4
 10120cc:	128d803a 	cmpltu	r6,r2,r10
 10120d0:	5d07883a 	add	r3,r11,r20
 10120d4:	30cd883a 	add	r6,r6,r3
 10120d8:	0021883a 	mov	r16,zero
 10120dc:	0023883a 	mov	r17,zero
 10120e0:	1025883a 	mov	r18,r2
 10120e4:	3027883a 	mov	r19,r6
 10120e8:	32ff9e2e 	bgeu	r6,r11,1011f64 <__muldf3+0x1bc>
 10120ec:	00800044 	movi	r2,1
 10120f0:	8089883a 	add	r4,r16,r2
 10120f4:	240d803a 	cmpltu	r6,r4,r16
 10120f8:	344d883a 	add	r6,r6,r17
 10120fc:	2021883a 	mov	r16,r4
 1012100:	3023883a 	mov	r17,r6
 1012104:	003f9806 	br	1011f68 <__muldf3+0x1c0>
 1012108:	403fe71e 	bne	r8,zero,10120a8 <__muldf3+0x300>
 101210c:	01004004 	movi	r4,256
 1012110:	4904703a 	and	r2,r9,r4
 1012114:	10c4b03a 	or	r2,r2,r3
 1012118:	103fe31e 	bne	r2,zero,10120a8 <__muldf3+0x300>
 101211c:	94c4b03a 	or	r2,r18,r19
 1012120:	103fe126 	beq	r2,zero,10120a8 <__muldf3+0x300>
 1012124:	49c5883a 	add	r2,r9,r7
 1012128:	1251803a 	cmpltu	r8,r2,r9
 101212c:	4291883a 	add	r8,r8,r10
 1012130:	013fc004 	movi	r4,-256
 1012134:	1112703a 	and	r9,r2,r4
 1012138:	4015883a 	mov	r10,r8
 101213c:	003fda06 	br	10120a8 <__muldf3+0x300>
 1012140:	6813883a 	mov	r9,r13
 1012144:	003fce06 	br	1012080 <__muldf3+0x2d8>
 1012148:	143f7c36 	bltu	r2,r16,1011f3c <__muldf3+0x194>
 101214c:	003fdd06 	br	10120c4 <__muldf3+0x31c>
 1012150:	12bf852e 	bgeu	r2,r10,1011f68 <__muldf3+0x1c0>
 1012154:	003fe506 	br	10120ec <__muldf3+0x344>
 1012158:	00800084 	movi	r2,2
 101215c:	20bf351e 	bne	r4,r2,1011e34 <__muldf3+0x8c>
 1012160:	010040b4 	movhi	r4,258
 1012164:	213d5f04 	addi	r4,r4,-2692
 1012168:	003f3f06 	br	1011e68 <__muldf3+0xc0>

0101216c <__divdf3>:
 101216c:	deffed04 	addi	sp,sp,-76
 1012170:	dcc01115 	stw	r19,68(sp)
 1012174:	dcc00404 	addi	r19,sp,16
 1012178:	2011883a 	mov	r8,r4
 101217c:	2813883a 	mov	r9,r5
 1012180:	dc000e15 	stw	r16,56(sp)
 1012184:	d809883a 	mov	r4,sp
 1012188:	980b883a 	mov	r5,r19
 101218c:	dc000904 	addi	r16,sp,36
 1012190:	dfc01215 	stw	ra,72(sp)
 1012194:	da400115 	stw	r9,4(sp)
 1012198:	d9c00315 	stw	r7,12(sp)
 101219c:	da000015 	stw	r8,0(sp)
 10121a0:	d9800215 	stw	r6,8(sp)
 10121a4:	dc801015 	stw	r18,64(sp)
 10121a8:	dc400f15 	stw	r17,60(sp)
 10121ac:	1012f480 	call	1012f48 <__unpack_d>
 10121b0:	d9000204 	addi	r4,sp,8
 10121b4:	800b883a 	mov	r5,r16
 10121b8:	1012f480 	call	1012f48 <__unpack_d>
 10121bc:	d9000417 	ldw	r4,16(sp)
 10121c0:	00800044 	movi	r2,1
 10121c4:	11000b2e 	bgeu	r2,r4,10121f4 <__divdf3+0x88>
 10121c8:	d9400917 	ldw	r5,36(sp)
 10121cc:	1140762e 	bgeu	r2,r5,10123a8 <__divdf3+0x23c>
 10121d0:	d8800517 	ldw	r2,20(sp)
 10121d4:	d8c00a17 	ldw	r3,40(sp)
 10121d8:	01800104 	movi	r6,4
 10121dc:	10c4f03a 	xor	r2,r2,r3
 10121e0:	d8800515 	stw	r2,20(sp)
 10121e4:	21800226 	beq	r4,r6,10121f0 <__divdf3+0x84>
 10121e8:	00800084 	movi	r2,2
 10121ec:	2080141e 	bne	r4,r2,1012240 <__divdf3+0xd4>
 10121f0:	29000926 	beq	r5,r4,1012218 <__divdf3+0xac>
 10121f4:	9809883a 	mov	r4,r19
 10121f8:	1012c340 	call	1012c34 <__pack_d>
 10121fc:	dfc01217 	ldw	ra,72(sp)
 1012200:	dcc01117 	ldw	r19,68(sp)
 1012204:	dc801017 	ldw	r18,64(sp)
 1012208:	dc400f17 	ldw	r17,60(sp)
 101220c:	dc000e17 	ldw	r16,56(sp)
 1012210:	dec01304 	addi	sp,sp,76
 1012214:	f800283a 	ret
 1012218:	010040b4 	movhi	r4,258
 101221c:	213d5f04 	addi	r4,r4,-2692
 1012220:	1012c340 	call	1012c34 <__pack_d>
 1012224:	dfc01217 	ldw	ra,72(sp)
 1012228:	dcc01117 	ldw	r19,68(sp)
 101222c:	dc801017 	ldw	r18,64(sp)
 1012230:	dc400f17 	ldw	r17,60(sp)
 1012234:	dc000e17 	ldw	r16,56(sp)
 1012238:	dec01304 	addi	sp,sp,76
 101223c:	f800283a 	ret
 1012240:	29805b26 	beq	r5,r6,10123b0 <__divdf3+0x244>
 1012244:	28802d26 	beq	r5,r2,10122fc <__divdf3+0x190>
 1012248:	d8c00617 	ldw	r3,24(sp)
 101224c:	d8800b17 	ldw	r2,44(sp)
 1012250:	d9c00817 	ldw	r7,32(sp)
 1012254:	dc400d17 	ldw	r17,52(sp)
 1012258:	188bc83a 	sub	r5,r3,r2
 101225c:	d9800717 	ldw	r6,28(sp)
 1012260:	dc000c17 	ldw	r16,48(sp)
 1012264:	d9400615 	stw	r5,24(sp)
 1012268:	3c403836 	bltu	r7,r17,101234c <__divdf3+0x1e0>
 101226c:	89c03626 	beq	r17,r7,1012348 <__divdf3+0x1dc>
 1012270:	0015883a 	mov	r10,zero
 1012274:	001d883a 	mov	r14,zero
 1012278:	02c40034 	movhi	r11,4096
 101227c:	001f883a 	mov	r15,zero
 1012280:	003f883a 	mov	ra,zero
 1012284:	04800f44 	movi	r18,61
 1012288:	00000f06 	br	10122c8 <__divdf3+0x15c>
 101228c:	601d883a 	mov	r14,r12
 1012290:	681f883a 	mov	r15,r13
 1012294:	400d883a 	mov	r6,r8
 1012298:	100f883a 	mov	r7,r2
 101229c:	3191883a 	add	r8,r6,r6
 10122a0:	5808d07a 	srli	r4,r11,1
 10122a4:	4185803a 	cmpltu	r2,r8,r6
 10122a8:	39d3883a 	add	r9,r7,r7
 10122ac:	28c6b03a 	or	r3,r5,r3
 10122b0:	1245883a 	add	r2,r2,r9
 10122b4:	1815883a 	mov	r10,r3
 10122b8:	2017883a 	mov	r11,r4
 10122bc:	400d883a 	mov	r6,r8
 10122c0:	100f883a 	mov	r7,r2
 10122c4:	fc801726 	beq	ra,r18,1012324 <__divdf3+0x1b8>
 10122c8:	580a97fa 	slli	r5,r11,31
 10122cc:	5006d07a 	srli	r3,r10,1
 10122d0:	ffc00044 	addi	ra,ra,1
 10122d4:	3c7ff136 	bltu	r7,r17,101229c <__divdf3+0x130>
 10122d8:	3411c83a 	sub	r8,r6,r16
 10122dc:	3205803a 	cmpltu	r2,r6,r8
 10122e0:	3c53c83a 	sub	r9,r7,r17
 10122e4:	7298b03a 	or	r12,r14,r10
 10122e8:	7adab03a 	or	r13,r15,r11
 10122ec:	4885c83a 	sub	r2,r9,r2
 10122f0:	89ffe61e 	bne	r17,r7,101228c <__divdf3+0x120>
 10122f4:	343fe936 	bltu	r6,r16,101229c <__divdf3+0x130>
 10122f8:	003fe406 	br	101228c <__divdf3+0x120>
 10122fc:	9809883a 	mov	r4,r19
 1012300:	d9800415 	stw	r6,16(sp)
 1012304:	1012c340 	call	1012c34 <__pack_d>
 1012308:	dfc01217 	ldw	ra,72(sp)
 101230c:	dcc01117 	ldw	r19,68(sp)
 1012310:	dc801017 	ldw	r18,64(sp)
 1012314:	dc400f17 	ldw	r17,60(sp)
 1012318:	dc000e17 	ldw	r16,56(sp)
 101231c:	dec01304 	addi	sp,sp,76
 1012320:	f800283a 	ret
 1012324:	00803fc4 	movi	r2,255
 1012328:	7090703a 	and	r8,r14,r2
 101232c:	00802004 	movi	r2,128
 1012330:	0007883a 	mov	r3,zero
 1012334:	0013883a 	mov	r9,zero
 1012338:	40800d26 	beq	r8,r2,1012370 <__divdf3+0x204>
 101233c:	dbc00815 	stw	r15,32(sp)
 1012340:	db800715 	stw	r14,28(sp)
 1012344:	003fab06 	br	10121f4 <__divdf3+0x88>
 1012348:	343fc92e 	bgeu	r6,r16,1012270 <__divdf3+0x104>
 101234c:	3185883a 	add	r2,r6,r6
 1012350:	1189803a 	cmpltu	r4,r2,r6
 1012354:	39c7883a 	add	r3,r7,r7
 1012358:	20c9883a 	add	r4,r4,r3
 101235c:	297fffc4 	addi	r5,r5,-1
 1012360:	100d883a 	mov	r6,r2
 1012364:	200f883a 	mov	r7,r4
 1012368:	d9400615 	stw	r5,24(sp)
 101236c:	003fc006 	br	1012270 <__divdf3+0x104>
 1012370:	483ff21e 	bne	r9,zero,101233c <__divdf3+0x1d0>
 1012374:	01004004 	movi	r4,256
 1012378:	7104703a 	and	r2,r14,r4
 101237c:	10c4b03a 	or	r2,r2,r3
 1012380:	103fee1e 	bne	r2,zero,101233c <__divdf3+0x1d0>
 1012384:	31c4b03a 	or	r2,r6,r7
 1012388:	103fec26 	beq	r2,zero,101233c <__divdf3+0x1d0>
 101238c:	7205883a 	add	r2,r14,r8
 1012390:	1391803a 	cmpltu	r8,r2,r14
 1012394:	43d1883a 	add	r8,r8,r15
 1012398:	013fc004 	movi	r4,-256
 101239c:	111c703a 	and	r14,r2,r4
 10123a0:	401f883a 	mov	r15,r8
 10123a4:	003fe506 	br	101233c <__divdf3+0x1d0>
 10123a8:	8009883a 	mov	r4,r16
 10123ac:	003f9206 	br	10121f8 <__divdf3+0x8c>
 10123b0:	9809883a 	mov	r4,r19
 10123b4:	d8000715 	stw	zero,28(sp)
 10123b8:	d8000815 	stw	zero,32(sp)
 10123bc:	d8000615 	stw	zero,24(sp)
 10123c0:	003f8d06 	br	10121f8 <__divdf3+0x8c>

010123c4 <__eqdf2>:
 10123c4:	deffef04 	addi	sp,sp,-68
 10123c8:	dc400f15 	stw	r17,60(sp)
 10123cc:	dc400404 	addi	r17,sp,16
 10123d0:	2005883a 	mov	r2,r4
 10123d4:	2807883a 	mov	r3,r5
 10123d8:	dc000e15 	stw	r16,56(sp)
 10123dc:	d809883a 	mov	r4,sp
 10123e0:	880b883a 	mov	r5,r17
 10123e4:	dc000904 	addi	r16,sp,36
 10123e8:	d8c00115 	stw	r3,4(sp)
 10123ec:	d8800015 	stw	r2,0(sp)
 10123f0:	d9800215 	stw	r6,8(sp)
 10123f4:	dfc01015 	stw	ra,64(sp)
 10123f8:	d9c00315 	stw	r7,12(sp)
 10123fc:	1012f480 	call	1012f48 <__unpack_d>
 1012400:	d9000204 	addi	r4,sp,8
 1012404:	800b883a 	mov	r5,r16
 1012408:	1012f480 	call	1012f48 <__unpack_d>
 101240c:	d8800417 	ldw	r2,16(sp)
 1012410:	00c00044 	movi	r3,1
 1012414:	180d883a 	mov	r6,r3
 1012418:	1880062e 	bgeu	r3,r2,1012434 <__eqdf2+0x70>
 101241c:	d8800917 	ldw	r2,36(sp)
 1012420:	8809883a 	mov	r4,r17
 1012424:	800b883a 	mov	r5,r16
 1012428:	1880022e 	bgeu	r3,r2,1012434 <__eqdf2+0x70>
 101242c:	10130800 	call	1013080 <__fpcmp_parts_d>
 1012430:	100d883a 	mov	r6,r2
 1012434:	3005883a 	mov	r2,r6
 1012438:	dfc01017 	ldw	ra,64(sp)
 101243c:	dc400f17 	ldw	r17,60(sp)
 1012440:	dc000e17 	ldw	r16,56(sp)
 1012444:	dec01104 	addi	sp,sp,68
 1012448:	f800283a 	ret

0101244c <__nedf2>:
 101244c:	deffef04 	addi	sp,sp,-68
 1012450:	dc400f15 	stw	r17,60(sp)
 1012454:	dc400404 	addi	r17,sp,16
 1012458:	2005883a 	mov	r2,r4
 101245c:	2807883a 	mov	r3,r5
 1012460:	dc000e15 	stw	r16,56(sp)
 1012464:	d809883a 	mov	r4,sp
 1012468:	880b883a 	mov	r5,r17
 101246c:	dc000904 	addi	r16,sp,36
 1012470:	d8c00115 	stw	r3,4(sp)
 1012474:	d8800015 	stw	r2,0(sp)
 1012478:	d9800215 	stw	r6,8(sp)
 101247c:	dfc01015 	stw	ra,64(sp)
 1012480:	d9c00315 	stw	r7,12(sp)
 1012484:	1012f480 	call	1012f48 <__unpack_d>
 1012488:	d9000204 	addi	r4,sp,8
 101248c:	800b883a 	mov	r5,r16
 1012490:	1012f480 	call	1012f48 <__unpack_d>
 1012494:	d8800417 	ldw	r2,16(sp)
 1012498:	00c00044 	movi	r3,1
 101249c:	180d883a 	mov	r6,r3
 10124a0:	1880062e 	bgeu	r3,r2,10124bc <__nedf2+0x70>
 10124a4:	d8800917 	ldw	r2,36(sp)
 10124a8:	8809883a 	mov	r4,r17
 10124ac:	800b883a 	mov	r5,r16
 10124b0:	1880022e 	bgeu	r3,r2,10124bc <__nedf2+0x70>
 10124b4:	10130800 	call	1013080 <__fpcmp_parts_d>
 10124b8:	100d883a 	mov	r6,r2
 10124bc:	3005883a 	mov	r2,r6
 10124c0:	dfc01017 	ldw	ra,64(sp)
 10124c4:	dc400f17 	ldw	r17,60(sp)
 10124c8:	dc000e17 	ldw	r16,56(sp)
 10124cc:	dec01104 	addi	sp,sp,68
 10124d0:	f800283a 	ret

010124d4 <__gtdf2>:
 10124d4:	deffef04 	addi	sp,sp,-68
 10124d8:	dc400f15 	stw	r17,60(sp)
 10124dc:	dc400404 	addi	r17,sp,16
 10124e0:	2005883a 	mov	r2,r4
 10124e4:	2807883a 	mov	r3,r5
 10124e8:	dc000e15 	stw	r16,56(sp)
 10124ec:	d809883a 	mov	r4,sp
 10124f0:	880b883a 	mov	r5,r17
 10124f4:	dc000904 	addi	r16,sp,36
 10124f8:	d8c00115 	stw	r3,4(sp)
 10124fc:	d8800015 	stw	r2,0(sp)
 1012500:	d9800215 	stw	r6,8(sp)
 1012504:	dfc01015 	stw	ra,64(sp)
 1012508:	d9c00315 	stw	r7,12(sp)
 101250c:	1012f480 	call	1012f48 <__unpack_d>
 1012510:	d9000204 	addi	r4,sp,8
 1012514:	800b883a 	mov	r5,r16
 1012518:	1012f480 	call	1012f48 <__unpack_d>
 101251c:	d8800417 	ldw	r2,16(sp)
 1012520:	00c00044 	movi	r3,1
 1012524:	01bfffc4 	movi	r6,-1
 1012528:	1880062e 	bgeu	r3,r2,1012544 <__gtdf2+0x70>
 101252c:	d8800917 	ldw	r2,36(sp)
 1012530:	8809883a 	mov	r4,r17
 1012534:	800b883a 	mov	r5,r16
 1012538:	1880022e 	bgeu	r3,r2,1012544 <__gtdf2+0x70>
 101253c:	10130800 	call	1013080 <__fpcmp_parts_d>
 1012540:	100d883a 	mov	r6,r2
 1012544:	3005883a 	mov	r2,r6
 1012548:	dfc01017 	ldw	ra,64(sp)
 101254c:	dc400f17 	ldw	r17,60(sp)
 1012550:	dc000e17 	ldw	r16,56(sp)
 1012554:	dec01104 	addi	sp,sp,68
 1012558:	f800283a 	ret

0101255c <__gedf2>:
 101255c:	deffef04 	addi	sp,sp,-68
 1012560:	dc400f15 	stw	r17,60(sp)
 1012564:	dc400404 	addi	r17,sp,16
 1012568:	2005883a 	mov	r2,r4
 101256c:	2807883a 	mov	r3,r5
 1012570:	dc000e15 	stw	r16,56(sp)
 1012574:	d809883a 	mov	r4,sp
 1012578:	880b883a 	mov	r5,r17
 101257c:	dc000904 	addi	r16,sp,36
 1012580:	d8c00115 	stw	r3,4(sp)
 1012584:	d8800015 	stw	r2,0(sp)
 1012588:	d9800215 	stw	r6,8(sp)
 101258c:	dfc01015 	stw	ra,64(sp)
 1012590:	d9c00315 	stw	r7,12(sp)
 1012594:	1012f480 	call	1012f48 <__unpack_d>
 1012598:	d9000204 	addi	r4,sp,8
 101259c:	800b883a 	mov	r5,r16
 10125a0:	1012f480 	call	1012f48 <__unpack_d>
 10125a4:	d8800417 	ldw	r2,16(sp)
 10125a8:	00c00044 	movi	r3,1
 10125ac:	01bfffc4 	movi	r6,-1
 10125b0:	1880062e 	bgeu	r3,r2,10125cc <__gedf2+0x70>
 10125b4:	d8800917 	ldw	r2,36(sp)
 10125b8:	8809883a 	mov	r4,r17
 10125bc:	800b883a 	mov	r5,r16
 10125c0:	1880022e 	bgeu	r3,r2,10125cc <__gedf2+0x70>
 10125c4:	10130800 	call	1013080 <__fpcmp_parts_d>
 10125c8:	100d883a 	mov	r6,r2
 10125cc:	3005883a 	mov	r2,r6
 10125d0:	dfc01017 	ldw	ra,64(sp)
 10125d4:	dc400f17 	ldw	r17,60(sp)
 10125d8:	dc000e17 	ldw	r16,56(sp)
 10125dc:	dec01104 	addi	sp,sp,68
 10125e0:	f800283a 	ret

010125e4 <__ltdf2>:
 10125e4:	deffef04 	addi	sp,sp,-68
 10125e8:	dc400f15 	stw	r17,60(sp)
 10125ec:	dc400404 	addi	r17,sp,16
 10125f0:	2005883a 	mov	r2,r4
 10125f4:	2807883a 	mov	r3,r5
 10125f8:	dc000e15 	stw	r16,56(sp)
 10125fc:	d809883a 	mov	r4,sp
 1012600:	880b883a 	mov	r5,r17
 1012604:	dc000904 	addi	r16,sp,36
 1012608:	d8c00115 	stw	r3,4(sp)
 101260c:	d8800015 	stw	r2,0(sp)
 1012610:	d9800215 	stw	r6,8(sp)
 1012614:	dfc01015 	stw	ra,64(sp)
 1012618:	d9c00315 	stw	r7,12(sp)
 101261c:	1012f480 	call	1012f48 <__unpack_d>
 1012620:	d9000204 	addi	r4,sp,8
 1012624:	800b883a 	mov	r5,r16
 1012628:	1012f480 	call	1012f48 <__unpack_d>
 101262c:	d8800417 	ldw	r2,16(sp)
 1012630:	00c00044 	movi	r3,1
 1012634:	180d883a 	mov	r6,r3
 1012638:	1880062e 	bgeu	r3,r2,1012654 <__ltdf2+0x70>
 101263c:	d8800917 	ldw	r2,36(sp)
 1012640:	8809883a 	mov	r4,r17
 1012644:	800b883a 	mov	r5,r16
 1012648:	1880022e 	bgeu	r3,r2,1012654 <__ltdf2+0x70>
 101264c:	10130800 	call	1013080 <__fpcmp_parts_d>
 1012650:	100d883a 	mov	r6,r2
 1012654:	3005883a 	mov	r2,r6
 1012658:	dfc01017 	ldw	ra,64(sp)
 101265c:	dc400f17 	ldw	r17,60(sp)
 1012660:	dc000e17 	ldw	r16,56(sp)
 1012664:	dec01104 	addi	sp,sp,68
 1012668:	f800283a 	ret

0101266c <__floatsidf>:
 101266c:	2006d7fa 	srli	r3,r4,31
 1012670:	defff604 	addi	sp,sp,-40
 1012674:	008000c4 	movi	r2,3
 1012678:	dfc00915 	stw	ra,36(sp)
 101267c:	dcc00815 	stw	r19,32(sp)
 1012680:	dc800715 	stw	r18,28(sp)
 1012684:	dc400615 	stw	r17,24(sp)
 1012688:	dc000515 	stw	r16,20(sp)
 101268c:	d8800015 	stw	r2,0(sp)
 1012690:	d8c00115 	stw	r3,4(sp)
 1012694:	20000f1e 	bne	r4,zero,10126d4 <__floatsidf+0x68>
 1012698:	00800084 	movi	r2,2
 101269c:	d8800015 	stw	r2,0(sp)
 10126a0:	d809883a 	mov	r4,sp
 10126a4:	1012c340 	call	1012c34 <__pack_d>
 10126a8:	1009883a 	mov	r4,r2
 10126ac:	180b883a 	mov	r5,r3
 10126b0:	2005883a 	mov	r2,r4
 10126b4:	2807883a 	mov	r3,r5
 10126b8:	dfc00917 	ldw	ra,36(sp)
 10126bc:	dcc00817 	ldw	r19,32(sp)
 10126c0:	dc800717 	ldw	r18,28(sp)
 10126c4:	dc400617 	ldw	r17,24(sp)
 10126c8:	dc000517 	ldw	r16,20(sp)
 10126cc:	dec00a04 	addi	sp,sp,40
 10126d0:	f800283a 	ret
 10126d4:	00800f04 	movi	r2,60
 10126d8:	1807003a 	cmpeq	r3,r3,zero
 10126dc:	d8800215 	stw	r2,8(sp)
 10126e0:	18001126 	beq	r3,zero,1012728 <__floatsidf+0xbc>
 10126e4:	0027883a 	mov	r19,zero
 10126e8:	2025883a 	mov	r18,r4
 10126ec:	d9000315 	stw	r4,12(sp)
 10126f0:	dcc00415 	stw	r19,16(sp)
 10126f4:	1012bb40 	call	1012bb4 <__clzsi2>
 10126f8:	11000744 	addi	r4,r2,29
 10126fc:	013fe80e 	bge	zero,r4,10126a0 <__floatsidf+0x34>
 1012700:	10bfff44 	addi	r2,r2,-3
 1012704:	10000c16 	blt	r2,zero,1012738 <__floatsidf+0xcc>
 1012708:	90a2983a 	sll	r17,r18,r2
 101270c:	0021883a 	mov	r16,zero
 1012710:	d8800217 	ldw	r2,8(sp)
 1012714:	dc400415 	stw	r17,16(sp)
 1012718:	dc000315 	stw	r16,12(sp)
 101271c:	1105c83a 	sub	r2,r2,r4
 1012720:	d8800215 	stw	r2,8(sp)
 1012724:	003fde06 	br	10126a0 <__floatsidf+0x34>
 1012728:	00a00034 	movhi	r2,32768
 101272c:	20800a26 	beq	r4,r2,1012758 <__floatsidf+0xec>
 1012730:	0109c83a 	sub	r4,zero,r4
 1012734:	003feb06 	br	10126e4 <__floatsidf+0x78>
 1012738:	9006d07a 	srli	r3,r18,1
 101273c:	008007c4 	movi	r2,31
 1012740:	1105c83a 	sub	r2,r2,r4
 1012744:	1886d83a 	srl	r3,r3,r2
 1012748:	9922983a 	sll	r17,r19,r4
 101274c:	9120983a 	sll	r16,r18,r4
 1012750:	1c62b03a 	or	r17,r3,r17
 1012754:	003fee06 	br	1012710 <__floatsidf+0xa4>
 1012758:	0009883a 	mov	r4,zero
 101275c:	01707834 	movhi	r5,49632
 1012760:	003fd306 	br	10126b0 <__floatsidf+0x44>

01012764 <__fixdfsi>:
 1012764:	defff804 	addi	sp,sp,-32
 1012768:	2005883a 	mov	r2,r4
 101276c:	2807883a 	mov	r3,r5
 1012770:	d809883a 	mov	r4,sp
 1012774:	d9400204 	addi	r5,sp,8
 1012778:	d8c00115 	stw	r3,4(sp)
 101277c:	d8800015 	stw	r2,0(sp)
 1012780:	dfc00715 	stw	ra,28(sp)
 1012784:	1012f480 	call	1012f48 <__unpack_d>
 1012788:	d8c00217 	ldw	r3,8(sp)
 101278c:	00800084 	movi	r2,2
 1012790:	1880051e 	bne	r3,r2,10127a8 <__fixdfsi+0x44>
 1012794:	0007883a 	mov	r3,zero
 1012798:	1805883a 	mov	r2,r3
 101279c:	dfc00717 	ldw	ra,28(sp)
 10127a0:	dec00804 	addi	sp,sp,32
 10127a4:	f800283a 	ret
 10127a8:	00800044 	movi	r2,1
 10127ac:	10fff92e 	bgeu	r2,r3,1012794 <__fixdfsi+0x30>
 10127b0:	00800104 	movi	r2,4
 10127b4:	18800426 	beq	r3,r2,10127c8 <__fixdfsi+0x64>
 10127b8:	d8c00417 	ldw	r3,16(sp)
 10127bc:	183ff516 	blt	r3,zero,1012794 <__fixdfsi+0x30>
 10127c0:	00800784 	movi	r2,30
 10127c4:	10c0080e 	bge	r2,r3,10127e8 <__fixdfsi+0x84>
 10127c8:	d8800317 	ldw	r2,12(sp)
 10127cc:	1000121e 	bne	r2,zero,1012818 <__fixdfsi+0xb4>
 10127d0:	00e00034 	movhi	r3,32768
 10127d4:	18ffffc4 	addi	r3,r3,-1
 10127d8:	1805883a 	mov	r2,r3
 10127dc:	dfc00717 	ldw	ra,28(sp)
 10127e0:	dec00804 	addi	sp,sp,32
 10127e4:	f800283a 	ret
 10127e8:	00800f04 	movi	r2,60
 10127ec:	10d1c83a 	sub	r8,r2,r3
 10127f0:	40bff804 	addi	r2,r8,-32
 10127f4:	d9800517 	ldw	r6,20(sp)
 10127f8:	d9c00617 	ldw	r7,24(sp)
 10127fc:	10000816 	blt	r2,zero,1012820 <__fixdfsi+0xbc>
 1012800:	3888d83a 	srl	r4,r7,r2
 1012804:	d8800317 	ldw	r2,12(sp)
 1012808:	2007883a 	mov	r3,r4
 101280c:	103fe226 	beq	r2,zero,1012798 <__fixdfsi+0x34>
 1012810:	0107c83a 	sub	r3,zero,r4
 1012814:	003fe006 	br	1012798 <__fixdfsi+0x34>
 1012818:	00e00034 	movhi	r3,32768
 101281c:	003fde06 	br	1012798 <__fixdfsi+0x34>
 1012820:	39c7883a 	add	r3,r7,r7
 1012824:	008007c4 	movi	r2,31
 1012828:	1205c83a 	sub	r2,r2,r8
 101282c:	1886983a 	sll	r3,r3,r2
 1012830:	3208d83a 	srl	r4,r6,r8
 1012834:	1908b03a 	or	r4,r3,r4
 1012838:	003ff206 	br	1012804 <__fixdfsi+0xa0>

0101283c <__floatunsidf>:
 101283c:	defff204 	addi	sp,sp,-56
 1012840:	dfc00d15 	stw	ra,52(sp)
 1012844:	ddc00c15 	stw	r23,48(sp)
 1012848:	dd800b15 	stw	r22,44(sp)
 101284c:	dd400a15 	stw	r21,40(sp)
 1012850:	dd000915 	stw	r20,36(sp)
 1012854:	dcc00815 	stw	r19,32(sp)
 1012858:	dc800715 	stw	r18,28(sp)
 101285c:	dc400615 	stw	r17,24(sp)
 1012860:	dc000515 	stw	r16,20(sp)
 1012864:	d8000115 	stw	zero,4(sp)
 1012868:	20000f1e 	bne	r4,zero,10128a8 <__floatunsidf+0x6c>
 101286c:	00800084 	movi	r2,2
 1012870:	d8800015 	stw	r2,0(sp)
 1012874:	d809883a 	mov	r4,sp
 1012878:	1012c340 	call	1012c34 <__pack_d>
 101287c:	dfc00d17 	ldw	ra,52(sp)
 1012880:	ddc00c17 	ldw	r23,48(sp)
 1012884:	dd800b17 	ldw	r22,44(sp)
 1012888:	dd400a17 	ldw	r21,40(sp)
 101288c:	dd000917 	ldw	r20,36(sp)
 1012890:	dcc00817 	ldw	r19,32(sp)
 1012894:	dc800717 	ldw	r18,28(sp)
 1012898:	dc400617 	ldw	r17,24(sp)
 101289c:	dc000517 	ldw	r16,20(sp)
 10128a0:	dec00e04 	addi	sp,sp,56
 10128a4:	f800283a 	ret
 10128a8:	008000c4 	movi	r2,3
 10128ac:	00c00f04 	movi	r3,60
 10128b0:	002f883a 	mov	r23,zero
 10128b4:	202d883a 	mov	r22,r4
 10128b8:	d8800015 	stw	r2,0(sp)
 10128bc:	d8c00215 	stw	r3,8(sp)
 10128c0:	d9000315 	stw	r4,12(sp)
 10128c4:	ddc00415 	stw	r23,16(sp)
 10128c8:	1012bb40 	call	1012bb4 <__clzsi2>
 10128cc:	12400744 	addi	r9,r2,29
 10128d0:	48000b16 	blt	r9,zero,1012900 <__floatunsidf+0xc4>
 10128d4:	483fe726 	beq	r9,zero,1012874 <__floatunsidf+0x38>
 10128d8:	10bfff44 	addi	r2,r2,-3
 10128dc:	10002e16 	blt	r2,zero,1012998 <__floatunsidf+0x15c>
 10128e0:	b0a2983a 	sll	r17,r22,r2
 10128e4:	0021883a 	mov	r16,zero
 10128e8:	d8800217 	ldw	r2,8(sp)
 10128ec:	dc400415 	stw	r17,16(sp)
 10128f0:	dc000315 	stw	r16,12(sp)
 10128f4:	1245c83a 	sub	r2,r2,r9
 10128f8:	d8800215 	stw	r2,8(sp)
 10128fc:	003fdd06 	br	1012874 <__floatunsidf+0x38>
 1012900:	0255c83a 	sub	r10,zero,r9
 1012904:	51bff804 	addi	r6,r10,-32
 1012908:	30001b16 	blt	r6,zero,1012978 <__floatunsidf+0x13c>
 101290c:	b9a8d83a 	srl	r20,r23,r6
 1012910:	002b883a 	mov	r21,zero
 1012914:	000f883a 	mov	r7,zero
 1012918:	01000044 	movi	r4,1
 101291c:	0011883a 	mov	r8,zero
 1012920:	30002516 	blt	r6,zero,10129b8 <__floatunsidf+0x17c>
 1012924:	21a6983a 	sll	r19,r4,r6
 1012928:	0025883a 	mov	r18,zero
 101292c:	00bfffc4 	movi	r2,-1
 1012930:	9089883a 	add	r4,r18,r2
 1012934:	988b883a 	add	r5,r19,r2
 1012938:	248d803a 	cmpltu	r6,r4,r18
 101293c:	314b883a 	add	r5,r6,r5
 1012940:	b104703a 	and	r2,r22,r4
 1012944:	b946703a 	and	r3,r23,r5
 1012948:	10c4b03a 	or	r2,r2,r3
 101294c:	10000226 	beq	r2,zero,1012958 <__floatunsidf+0x11c>
 1012950:	01c00044 	movi	r7,1
 1012954:	0011883a 	mov	r8,zero
 1012958:	d9000217 	ldw	r4,8(sp)
 101295c:	a1c4b03a 	or	r2,r20,r7
 1012960:	aa06b03a 	or	r3,r21,r8
 1012964:	2249c83a 	sub	r4,r4,r9
 1012968:	d8c00415 	stw	r3,16(sp)
 101296c:	d9000215 	stw	r4,8(sp)
 1012970:	d8800315 	stw	r2,12(sp)
 1012974:	003fbf06 	br	1012874 <__floatunsidf+0x38>
 1012978:	bdc7883a 	add	r3,r23,r23
 101297c:	008007c4 	movi	r2,31
 1012980:	1285c83a 	sub	r2,r2,r10
 1012984:	1886983a 	sll	r3,r3,r2
 1012988:	b2a8d83a 	srl	r20,r22,r10
 101298c:	baaad83a 	srl	r21,r23,r10
 1012990:	1d28b03a 	or	r20,r3,r20
 1012994:	003fdf06 	br	1012914 <__floatunsidf+0xd8>
 1012998:	b006d07a 	srli	r3,r22,1
 101299c:	008007c4 	movi	r2,31
 10129a0:	1245c83a 	sub	r2,r2,r9
 10129a4:	1886d83a 	srl	r3,r3,r2
 10129a8:	ba62983a 	sll	r17,r23,r9
 10129ac:	b260983a 	sll	r16,r22,r9
 10129b0:	1c62b03a 	or	r17,r3,r17
 10129b4:	003fcc06 	br	10128e8 <__floatunsidf+0xac>
 10129b8:	2006d07a 	srli	r3,r4,1
 10129bc:	008007c4 	movi	r2,31
 10129c0:	1285c83a 	sub	r2,r2,r10
 10129c4:	18a6d83a 	srl	r19,r3,r2
 10129c8:	22a4983a 	sll	r18,r4,r10
 10129cc:	003fd706 	br	101292c <__floatunsidf+0xf0>

010129d0 <udivmodsi4>:
 10129d0:	29001b2e 	bgeu	r5,r4,1012a40 <udivmodsi4+0x70>
 10129d4:	28001a16 	blt	r5,zero,1012a40 <udivmodsi4+0x70>
 10129d8:	00800044 	movi	r2,1
 10129dc:	0007883a 	mov	r3,zero
 10129e0:	01c007c4 	movi	r7,31
 10129e4:	00000306 	br	10129f4 <udivmodsi4+0x24>
 10129e8:	19c01326 	beq	r3,r7,1012a38 <udivmodsi4+0x68>
 10129ec:	18c00044 	addi	r3,r3,1
 10129f0:	28000416 	blt	r5,zero,1012a04 <udivmodsi4+0x34>
 10129f4:	294b883a 	add	r5,r5,r5
 10129f8:	1085883a 	add	r2,r2,r2
 10129fc:	293ffa36 	bltu	r5,r4,10129e8 <udivmodsi4+0x18>
 1012a00:	10000d26 	beq	r2,zero,1012a38 <udivmodsi4+0x68>
 1012a04:	0007883a 	mov	r3,zero
 1012a08:	21400236 	bltu	r4,r5,1012a14 <udivmodsi4+0x44>
 1012a0c:	2149c83a 	sub	r4,r4,r5
 1012a10:	1886b03a 	or	r3,r3,r2
 1012a14:	1004d07a 	srli	r2,r2,1
 1012a18:	280ad07a 	srli	r5,r5,1
 1012a1c:	103ffa1e 	bne	r2,zero,1012a08 <udivmodsi4+0x38>
 1012a20:	30000226 	beq	r6,zero,1012a2c <udivmodsi4+0x5c>
 1012a24:	2005883a 	mov	r2,r4
 1012a28:	f800283a 	ret
 1012a2c:	1809883a 	mov	r4,r3
 1012a30:	2005883a 	mov	r2,r4
 1012a34:	f800283a 	ret
 1012a38:	0007883a 	mov	r3,zero
 1012a3c:	003ff806 	br	1012a20 <udivmodsi4+0x50>
 1012a40:	00800044 	movi	r2,1
 1012a44:	0007883a 	mov	r3,zero
 1012a48:	003fef06 	br	1012a08 <udivmodsi4+0x38>

01012a4c <__divsi3>:
 1012a4c:	defffe04 	addi	sp,sp,-8
 1012a50:	dc000015 	stw	r16,0(sp)
 1012a54:	dfc00115 	stw	ra,4(sp)
 1012a58:	0021883a 	mov	r16,zero
 1012a5c:	20000c16 	blt	r4,zero,1012a90 <__divsi3+0x44>
 1012a60:	000d883a 	mov	r6,zero
 1012a64:	28000e16 	blt	r5,zero,1012aa0 <__divsi3+0x54>
 1012a68:	10129d00 	call	10129d0 <udivmodsi4>
 1012a6c:	1007883a 	mov	r3,r2
 1012a70:	8005003a 	cmpeq	r2,r16,zero
 1012a74:	1000011e 	bne	r2,zero,1012a7c <__divsi3+0x30>
 1012a78:	00c7c83a 	sub	r3,zero,r3
 1012a7c:	1805883a 	mov	r2,r3
 1012a80:	dfc00117 	ldw	ra,4(sp)
 1012a84:	dc000017 	ldw	r16,0(sp)
 1012a88:	dec00204 	addi	sp,sp,8
 1012a8c:	f800283a 	ret
 1012a90:	0109c83a 	sub	r4,zero,r4
 1012a94:	04000044 	movi	r16,1
 1012a98:	000d883a 	mov	r6,zero
 1012a9c:	283ff20e 	bge	r5,zero,1012a68 <__divsi3+0x1c>
 1012aa0:	014bc83a 	sub	r5,zero,r5
 1012aa4:	8021003a 	cmpeq	r16,r16,zero
 1012aa8:	003fef06 	br	1012a68 <__divsi3+0x1c>

01012aac <__modsi3>:
 1012aac:	deffff04 	addi	sp,sp,-4
 1012ab0:	dfc00015 	stw	ra,0(sp)
 1012ab4:	01800044 	movi	r6,1
 1012ab8:	2807883a 	mov	r3,r5
 1012abc:	20000416 	blt	r4,zero,1012ad0 <__modsi3+0x24>
 1012ac0:	28000c16 	blt	r5,zero,1012af4 <__modsi3+0x48>
 1012ac4:	dfc00017 	ldw	ra,0(sp)
 1012ac8:	dec00104 	addi	sp,sp,4
 1012acc:	10129d01 	jmpi	10129d0 <udivmodsi4>
 1012ad0:	0109c83a 	sub	r4,zero,r4
 1012ad4:	28000b16 	blt	r5,zero,1012b04 <__modsi3+0x58>
 1012ad8:	180b883a 	mov	r5,r3
 1012adc:	01800044 	movi	r6,1
 1012ae0:	10129d00 	call	10129d0 <udivmodsi4>
 1012ae4:	0085c83a 	sub	r2,zero,r2
 1012ae8:	dfc00017 	ldw	ra,0(sp)
 1012aec:	dec00104 	addi	sp,sp,4
 1012af0:	f800283a 	ret
 1012af4:	014bc83a 	sub	r5,zero,r5
 1012af8:	dfc00017 	ldw	ra,0(sp)
 1012afc:	dec00104 	addi	sp,sp,4
 1012b00:	10129d01 	jmpi	10129d0 <udivmodsi4>
 1012b04:	0147c83a 	sub	r3,zero,r5
 1012b08:	003ff306 	br	1012ad8 <__modsi3+0x2c>

01012b0c <__udivsi3>:
 1012b0c:	000d883a 	mov	r6,zero
 1012b10:	10129d01 	jmpi	10129d0 <udivmodsi4>

01012b14 <__umodsi3>:
 1012b14:	01800044 	movi	r6,1
 1012b18:	10129d01 	jmpi	10129d0 <udivmodsi4>

01012b1c <__muldi3>:
 1012b1c:	2011883a 	mov	r8,r4
 1012b20:	427fffcc 	andi	r9,r8,65535
 1012b24:	4018d43a 	srli	r12,r8,16
 1012b28:	32bfffcc 	andi	r10,r6,65535
 1012b2c:	3016d43a 	srli	r11,r6,16
 1012b30:	4a85383a 	mul	r2,r9,r10
 1012b34:	6295383a 	mul	r10,r12,r10
 1012b38:	4ad3383a 	mul	r9,r9,r11
 1012b3c:	113fffcc 	andi	r4,r2,65535
 1012b40:	1004d43a 	srli	r2,r2,16
 1012b44:	4a93883a 	add	r9,r9,r10
 1012b48:	3807883a 	mov	r3,r7
 1012b4c:	1245883a 	add	r2,r2,r9
 1012b50:	280f883a 	mov	r7,r5
 1012b54:	180b883a 	mov	r5,r3
 1012b58:	1006943a 	slli	r3,r2,16
 1012b5c:	defffd04 	addi	sp,sp,-12
 1012b60:	dc800215 	stw	r18,8(sp)
 1012b64:	1907883a 	add	r3,r3,r4
 1012b68:	dc400115 	stw	r17,4(sp)
 1012b6c:	dc000015 	stw	r16,0(sp)
 1012b70:	4165383a 	mul	r18,r8,r5
 1012b74:	31e3383a 	mul	r17,r6,r7
 1012b78:	1012d43a 	srli	r9,r2,16
 1012b7c:	62d9383a 	mul	r12,r12,r11
 1012b80:	181f883a 	mov	r15,r3
 1012b84:	1280022e 	bgeu	r2,r10,1012b90 <__muldi3+0x74>
 1012b88:	00800074 	movhi	r2,1
 1012b8c:	6099883a 	add	r12,r12,r2
 1012b90:	624d883a 	add	r6,r12,r9
 1012b94:	9187883a 	add	r3,r18,r6
 1012b98:	88c7883a 	add	r3,r17,r3
 1012b9c:	7805883a 	mov	r2,r15
 1012ba0:	dc800217 	ldw	r18,8(sp)
 1012ba4:	dc400117 	ldw	r17,4(sp)
 1012ba8:	dc000017 	ldw	r16,0(sp)
 1012bac:	dec00304 	addi	sp,sp,12
 1012bb0:	f800283a 	ret

01012bb4 <__clzsi2>:
 1012bb4:	00bfffd4 	movui	r2,65535
 1012bb8:	11000e36 	bltu	r2,r4,1012bf4 <__clzsi2+0x40>
 1012bbc:	00803fc4 	movi	r2,255
 1012bc0:	01400204 	movi	r5,8
 1012bc4:	0007883a 	mov	r3,zero
 1012bc8:	11001036 	bltu	r2,r4,1012c0c <__clzsi2+0x58>
 1012bcc:	000b883a 	mov	r5,zero
 1012bd0:	20c6d83a 	srl	r3,r4,r3
 1012bd4:	008040b4 	movhi	r2,258
 1012bd8:	10bd6404 	addi	r2,r2,-2672
 1012bdc:	1887883a 	add	r3,r3,r2
 1012be0:	18800003 	ldbu	r2,0(r3)
 1012be4:	00c00804 	movi	r3,32
 1012be8:	2885883a 	add	r2,r5,r2
 1012bec:	1885c83a 	sub	r2,r3,r2
 1012bf0:	f800283a 	ret
 1012bf4:	01400404 	movi	r5,16
 1012bf8:	00804034 	movhi	r2,256
 1012bfc:	10bfffc4 	addi	r2,r2,-1
 1012c00:	2807883a 	mov	r3,r5
 1012c04:	113ff22e 	bgeu	r2,r4,1012bd0 <__clzsi2+0x1c>
 1012c08:	01400604 	movi	r5,24
 1012c0c:	2807883a 	mov	r3,r5
 1012c10:	20c6d83a 	srl	r3,r4,r3
 1012c14:	008040b4 	movhi	r2,258
 1012c18:	10bd6404 	addi	r2,r2,-2672
 1012c1c:	1887883a 	add	r3,r3,r2
 1012c20:	18800003 	ldbu	r2,0(r3)
 1012c24:	00c00804 	movi	r3,32
 1012c28:	2885883a 	add	r2,r5,r2
 1012c2c:	1885c83a 	sub	r2,r3,r2
 1012c30:	f800283a 	ret

01012c34 <__pack_d>:
 1012c34:	20c00017 	ldw	r3,0(r4)
 1012c38:	defffd04 	addi	sp,sp,-12
 1012c3c:	dc000015 	stw	r16,0(sp)
 1012c40:	dc800215 	stw	r18,8(sp)
 1012c44:	dc400115 	stw	r17,4(sp)
 1012c48:	00800044 	movi	r2,1
 1012c4c:	22000317 	ldw	r8,12(r4)
 1012c50:	001f883a 	mov	r15,zero
 1012c54:	22400417 	ldw	r9,16(r4)
 1012c58:	24000117 	ldw	r16,4(r4)
 1012c5c:	10c0552e 	bgeu	r2,r3,1012db4 <__pack_d+0x180>
 1012c60:	00800104 	movi	r2,4
 1012c64:	18804f26 	beq	r3,r2,1012da4 <__pack_d+0x170>
 1012c68:	00800084 	movi	r2,2
 1012c6c:	18800226 	beq	r3,r2,1012c78 <__pack_d+0x44>
 1012c70:	4244b03a 	or	r2,r8,r9
 1012c74:	10001a1e 	bne	r2,zero,1012ce0 <__pack_d+0xac>
 1012c78:	000d883a 	mov	r6,zero
 1012c7c:	000f883a 	mov	r7,zero
 1012c80:	0011883a 	mov	r8,zero
 1012c84:	00800434 	movhi	r2,16
 1012c88:	10bfffc4 	addi	r2,r2,-1
 1012c8c:	301d883a 	mov	r14,r6
 1012c90:	3884703a 	and	r2,r7,r2
 1012c94:	400a953a 	slli	r5,r8,20
 1012c98:	79bffc2c 	andhi	r6,r15,65520
 1012c9c:	308cb03a 	or	r6,r6,r2
 1012ca0:	00e00434 	movhi	r3,32784
 1012ca4:	18ffffc4 	addi	r3,r3,-1
 1012ca8:	800497fa 	slli	r2,r16,31
 1012cac:	30c6703a 	and	r3,r6,r3
 1012cb0:	1946b03a 	or	r3,r3,r5
 1012cb4:	01600034 	movhi	r5,32768
 1012cb8:	297fffc4 	addi	r5,r5,-1
 1012cbc:	194a703a 	and	r5,r3,r5
 1012cc0:	288ab03a 	or	r5,r5,r2
 1012cc4:	2807883a 	mov	r3,r5
 1012cc8:	7005883a 	mov	r2,r14
 1012ccc:	dc800217 	ldw	r18,8(sp)
 1012cd0:	dc400117 	ldw	r17,4(sp)
 1012cd4:	dc000017 	ldw	r16,0(sp)
 1012cd8:	dec00304 	addi	sp,sp,12
 1012cdc:	f800283a 	ret
 1012ce0:	21000217 	ldw	r4,8(r4)
 1012ce4:	00bf0084 	movi	r2,-1022
 1012ce8:	20803f16 	blt	r4,r2,1012de8 <__pack_d+0x1b4>
 1012cec:	0080ffc4 	movi	r2,1023
 1012cf0:	11002c16 	blt	r2,r4,1012da4 <__pack_d+0x170>
 1012cf4:	00803fc4 	movi	r2,255
 1012cf8:	408c703a 	and	r6,r8,r2
 1012cfc:	00802004 	movi	r2,128
 1012d00:	0007883a 	mov	r3,zero
 1012d04:	000f883a 	mov	r7,zero
 1012d08:	2280ffc4 	addi	r10,r4,1023
 1012d0c:	30801e26 	beq	r6,r2,1012d88 <__pack_d+0x154>
 1012d10:	00801fc4 	movi	r2,127
 1012d14:	4089883a 	add	r4,r8,r2
 1012d18:	220d803a 	cmpltu	r6,r4,r8
 1012d1c:	324d883a 	add	r6,r6,r9
 1012d20:	2011883a 	mov	r8,r4
 1012d24:	3013883a 	mov	r9,r6
 1012d28:	00880034 	movhi	r2,8192
 1012d2c:	10bfffc4 	addi	r2,r2,-1
 1012d30:	12400d36 	bltu	r2,r9,1012d68 <__pack_d+0x134>
 1012d34:	4804963a 	slli	r2,r9,24
 1012d38:	400cd23a 	srli	r6,r8,8
 1012d3c:	480ed23a 	srli	r7,r9,8
 1012d40:	013fffc4 	movi	r4,-1
 1012d44:	118cb03a 	or	r6,r2,r6
 1012d48:	01400434 	movhi	r5,16
 1012d4c:	297fffc4 	addi	r5,r5,-1
 1012d50:	3104703a 	and	r2,r6,r4
 1012d54:	3946703a 	and	r3,r7,r5
 1012d58:	5201ffcc 	andi	r8,r10,2047
 1012d5c:	100d883a 	mov	r6,r2
 1012d60:	180f883a 	mov	r7,r3
 1012d64:	003fc706 	br	1012c84 <__pack_d+0x50>
 1012d68:	480897fa 	slli	r4,r9,31
 1012d6c:	4004d07a 	srli	r2,r8,1
 1012d70:	4806d07a 	srli	r3,r9,1
 1012d74:	52800044 	addi	r10,r10,1
 1012d78:	2084b03a 	or	r2,r4,r2
 1012d7c:	1011883a 	mov	r8,r2
 1012d80:	1813883a 	mov	r9,r3
 1012d84:	003feb06 	br	1012d34 <__pack_d+0x100>
 1012d88:	383fe11e 	bne	r7,zero,1012d10 <__pack_d+0xdc>
 1012d8c:	01004004 	movi	r4,256
 1012d90:	4104703a 	and	r2,r8,r4
 1012d94:	10c4b03a 	or	r2,r2,r3
 1012d98:	103fe326 	beq	r2,zero,1012d28 <__pack_d+0xf4>
 1012d9c:	3005883a 	mov	r2,r6
 1012da0:	003fdc06 	br	1012d14 <__pack_d+0xe0>
 1012da4:	000d883a 	mov	r6,zero
 1012da8:	000f883a 	mov	r7,zero
 1012dac:	0201ffc4 	movi	r8,2047
 1012db0:	003fb406 	br	1012c84 <__pack_d+0x50>
 1012db4:	0005883a 	mov	r2,zero
 1012db8:	00c00234 	movhi	r3,8
 1012dbc:	408cb03a 	or	r6,r8,r2
 1012dc0:	48ceb03a 	or	r7,r9,r3
 1012dc4:	013fffc4 	movi	r4,-1
 1012dc8:	01400434 	movhi	r5,16
 1012dcc:	297fffc4 	addi	r5,r5,-1
 1012dd0:	3104703a 	and	r2,r6,r4
 1012dd4:	3946703a 	and	r3,r7,r5
 1012dd8:	100d883a 	mov	r6,r2
 1012ddc:	180f883a 	mov	r7,r3
 1012de0:	0201ffc4 	movi	r8,2047
 1012de4:	003fa706 	br	1012c84 <__pack_d+0x50>
 1012de8:	1109c83a 	sub	r4,r2,r4
 1012dec:	00800e04 	movi	r2,56
 1012df0:	11004316 	blt	r2,r4,1012f00 <__pack_d+0x2cc>
 1012df4:	21fff804 	addi	r7,r4,-32
 1012df8:	38004516 	blt	r7,zero,1012f10 <__pack_d+0x2dc>
 1012dfc:	49d8d83a 	srl	r12,r9,r7
 1012e00:	001b883a 	mov	r13,zero
 1012e04:	0023883a 	mov	r17,zero
 1012e08:	01400044 	movi	r5,1
 1012e0c:	0025883a 	mov	r18,zero
 1012e10:	38004716 	blt	r7,zero,1012f30 <__pack_d+0x2fc>
 1012e14:	29d6983a 	sll	r11,r5,r7
 1012e18:	0015883a 	mov	r10,zero
 1012e1c:	00bfffc4 	movi	r2,-1
 1012e20:	5089883a 	add	r4,r10,r2
 1012e24:	588b883a 	add	r5,r11,r2
 1012e28:	228d803a 	cmpltu	r6,r4,r10
 1012e2c:	314b883a 	add	r5,r6,r5
 1012e30:	4104703a 	and	r2,r8,r4
 1012e34:	4946703a 	and	r3,r9,r5
 1012e38:	10c4b03a 	or	r2,r2,r3
 1012e3c:	10000226 	beq	r2,zero,1012e48 <__pack_d+0x214>
 1012e40:	04400044 	movi	r17,1
 1012e44:	0025883a 	mov	r18,zero
 1012e48:	00803fc4 	movi	r2,255
 1012e4c:	644eb03a 	or	r7,r12,r17
 1012e50:	3892703a 	and	r9,r7,r2
 1012e54:	00802004 	movi	r2,128
 1012e58:	6c90b03a 	or	r8,r13,r18
 1012e5c:	0015883a 	mov	r10,zero
 1012e60:	48801626 	beq	r9,r2,1012ebc <__pack_d+0x288>
 1012e64:	01001fc4 	movi	r4,127
 1012e68:	3905883a 	add	r2,r7,r4
 1012e6c:	11cd803a 	cmpltu	r6,r2,r7
 1012e70:	320d883a 	add	r6,r6,r8
 1012e74:	100f883a 	mov	r7,r2
 1012e78:	00840034 	movhi	r2,4096
 1012e7c:	10bfffc4 	addi	r2,r2,-1
 1012e80:	3011883a 	mov	r8,r6
 1012e84:	0007883a 	mov	r3,zero
 1012e88:	11801b36 	bltu	r2,r6,1012ef8 <__pack_d+0x2c4>
 1012e8c:	4004963a 	slli	r2,r8,24
 1012e90:	3808d23a 	srli	r4,r7,8
 1012e94:	400ad23a 	srli	r5,r8,8
 1012e98:	1813883a 	mov	r9,r3
 1012e9c:	1108b03a 	or	r4,r2,r4
 1012ea0:	00bfffc4 	movi	r2,-1
 1012ea4:	00c00434 	movhi	r3,16
 1012ea8:	18ffffc4 	addi	r3,r3,-1
 1012eac:	208c703a 	and	r6,r4,r2
 1012eb0:	28ce703a 	and	r7,r5,r3
 1012eb4:	4a01ffcc 	andi	r8,r9,2047
 1012eb8:	003f7206 	br	1012c84 <__pack_d+0x50>
 1012ebc:	503fe91e 	bne	r10,zero,1012e64 <__pack_d+0x230>
 1012ec0:	01004004 	movi	r4,256
 1012ec4:	3904703a 	and	r2,r7,r4
 1012ec8:	0007883a 	mov	r3,zero
 1012ecc:	10c4b03a 	or	r2,r2,r3
 1012ed0:	10000626 	beq	r2,zero,1012eec <__pack_d+0x2b8>
 1012ed4:	3a45883a 	add	r2,r7,r9
 1012ed8:	11cd803a 	cmpltu	r6,r2,r7
 1012edc:	320d883a 	add	r6,r6,r8
 1012ee0:	100f883a 	mov	r7,r2
 1012ee4:	3011883a 	mov	r8,r6
 1012ee8:	0007883a 	mov	r3,zero
 1012eec:	00840034 	movhi	r2,4096
 1012ef0:	10bfffc4 	addi	r2,r2,-1
 1012ef4:	123fe52e 	bgeu	r2,r8,1012e8c <__pack_d+0x258>
 1012ef8:	00c00044 	movi	r3,1
 1012efc:	003fe306 	br	1012e8c <__pack_d+0x258>
 1012f00:	0009883a 	mov	r4,zero
 1012f04:	0013883a 	mov	r9,zero
 1012f08:	000b883a 	mov	r5,zero
 1012f0c:	003fe406 	br	1012ea0 <__pack_d+0x26c>
 1012f10:	4a47883a 	add	r3,r9,r9
 1012f14:	008007c4 	movi	r2,31
 1012f18:	1105c83a 	sub	r2,r2,r4
 1012f1c:	1886983a 	sll	r3,r3,r2
 1012f20:	4118d83a 	srl	r12,r8,r4
 1012f24:	491ad83a 	srl	r13,r9,r4
 1012f28:	1b18b03a 	or	r12,r3,r12
 1012f2c:	003fb506 	br	1012e04 <__pack_d+0x1d0>
 1012f30:	2806d07a 	srli	r3,r5,1
 1012f34:	008007c4 	movi	r2,31
 1012f38:	1105c83a 	sub	r2,r2,r4
 1012f3c:	1896d83a 	srl	r11,r3,r2
 1012f40:	2914983a 	sll	r10,r5,r4
 1012f44:	003fb506 	br	1012e1c <__pack_d+0x1e8>

01012f48 <__unpack_d>:
 1012f48:	20c00117 	ldw	r3,4(r4)
 1012f4c:	22400017 	ldw	r9,0(r4)
 1012f50:	00800434 	movhi	r2,16
 1012f54:	10bfffc4 	addi	r2,r2,-1
 1012f58:	1808d53a 	srli	r4,r3,20
 1012f5c:	180cd7fa 	srli	r6,r3,31
 1012f60:	1894703a 	and	r10,r3,r2
 1012f64:	2201ffcc 	andi	r8,r4,2047
 1012f68:	281b883a 	mov	r13,r5
 1012f6c:	4817883a 	mov	r11,r9
 1012f70:	29800115 	stw	r6,4(r5)
 1012f74:	5019883a 	mov	r12,r10
 1012f78:	40001e1e 	bne	r8,zero,1012ff4 <__unpack_d+0xac>
 1012f7c:	4a84b03a 	or	r2,r9,r10
 1012f80:	10001926 	beq	r2,zero,1012fe8 <__unpack_d+0xa0>
 1012f84:	4804d63a 	srli	r2,r9,24
 1012f88:	500c923a 	slli	r6,r10,8
 1012f8c:	013f0084 	movi	r4,-1022
 1012f90:	00c40034 	movhi	r3,4096
 1012f94:	18ffffc4 	addi	r3,r3,-1
 1012f98:	118cb03a 	or	r6,r2,r6
 1012f9c:	008000c4 	movi	r2,3
 1012fa0:	480a923a 	slli	r5,r9,8
 1012fa4:	68800015 	stw	r2,0(r13)
 1012fa8:	69000215 	stw	r4,8(r13)
 1012fac:	19800b36 	bltu	r3,r6,1012fdc <__unpack_d+0x94>
 1012fb0:	200f883a 	mov	r7,r4
 1012fb4:	1811883a 	mov	r8,r3
 1012fb8:	2945883a 	add	r2,r5,r5
 1012fbc:	1149803a 	cmpltu	r4,r2,r5
 1012fc0:	3187883a 	add	r3,r6,r6
 1012fc4:	20c9883a 	add	r4,r4,r3
 1012fc8:	100b883a 	mov	r5,r2
 1012fcc:	200d883a 	mov	r6,r4
 1012fd0:	39ffffc4 	addi	r7,r7,-1
 1012fd4:	413ff82e 	bgeu	r8,r4,1012fb8 <__unpack_d+0x70>
 1012fd8:	69c00215 	stw	r7,8(r13)
 1012fdc:	69800415 	stw	r6,16(r13)
 1012fe0:	69400315 	stw	r5,12(r13)
 1012fe4:	f800283a 	ret
 1012fe8:	00800084 	movi	r2,2
 1012fec:	28800015 	stw	r2,0(r5)
 1012ff0:	f800283a 	ret
 1012ff4:	0081ffc4 	movi	r2,2047
 1012ff8:	40800f26 	beq	r8,r2,1013038 <__unpack_d+0xf0>
 1012ffc:	480cd63a 	srli	r6,r9,24
 1013000:	5006923a 	slli	r3,r10,8
 1013004:	4804923a 	slli	r2,r9,8
 1013008:	0009883a 	mov	r4,zero
 101300c:	30c6b03a 	or	r3,r6,r3
 1013010:	01440034 	movhi	r5,4096
 1013014:	110cb03a 	or	r6,r2,r4
 1013018:	423f0044 	addi	r8,r8,-1023
 101301c:	194eb03a 	or	r7,r3,r5
 1013020:	008000c4 	movi	r2,3
 1013024:	69c00415 	stw	r7,16(r13)
 1013028:	6a000215 	stw	r8,8(r13)
 101302c:	68800015 	stw	r2,0(r13)
 1013030:	69800315 	stw	r6,12(r13)
 1013034:	f800283a 	ret
 1013038:	4a84b03a 	or	r2,r9,r10
 101303c:	1000031e 	bne	r2,zero,101304c <__unpack_d+0x104>
 1013040:	00800104 	movi	r2,4
 1013044:	28800015 	stw	r2,0(r5)
 1013048:	f800283a 	ret
 101304c:	0009883a 	mov	r4,zero
 1013050:	01400234 	movhi	r5,8
 1013054:	4904703a 	and	r2,r9,r4
 1013058:	5146703a 	and	r3,r10,r5
 101305c:	10c4b03a 	or	r2,r2,r3
 1013060:	10000526 	beq	r2,zero,1013078 <__unpack_d+0x130>
 1013064:	00800044 	movi	r2,1
 1013068:	68800015 	stw	r2,0(r13)
 101306c:	6b000415 	stw	r12,16(r13)
 1013070:	6ac00315 	stw	r11,12(r13)
 1013074:	f800283a 	ret
 1013078:	68000015 	stw	zero,0(r13)
 101307c:	003ffb06 	br	101306c <__unpack_d+0x124>

01013080 <__fpcmp_parts_d>:
 1013080:	21800017 	ldw	r6,0(r4)
 1013084:	00c00044 	movi	r3,1
 1013088:	19800a2e 	bgeu	r3,r6,10130b4 <__fpcmp_parts_d+0x34>
 101308c:	28800017 	ldw	r2,0(r5)
 1013090:	1880082e 	bgeu	r3,r2,10130b4 <__fpcmp_parts_d+0x34>
 1013094:	00c00104 	movi	r3,4
 1013098:	30c02626 	beq	r6,r3,1013134 <__fpcmp_parts_d+0xb4>
 101309c:	10c02226 	beq	r2,r3,1013128 <__fpcmp_parts_d+0xa8>
 10130a0:	00c00084 	movi	r3,2
 10130a4:	30c00526 	beq	r6,r3,10130bc <__fpcmp_parts_d+0x3c>
 10130a8:	10c0071e 	bne	r2,r3,10130c8 <__fpcmp_parts_d+0x48>
 10130ac:	20800117 	ldw	r2,4(r4)
 10130b0:	1000091e 	bne	r2,zero,10130d8 <__fpcmp_parts_d+0x58>
 10130b4:	00800044 	movi	r2,1
 10130b8:	f800283a 	ret
 10130bc:	10c01a1e 	bne	r2,r3,1013128 <__fpcmp_parts_d+0xa8>
 10130c0:	0005883a 	mov	r2,zero
 10130c4:	f800283a 	ret
 10130c8:	22000117 	ldw	r8,4(r4)
 10130cc:	28800117 	ldw	r2,4(r5)
 10130d0:	40800326 	beq	r8,r2,10130e0 <__fpcmp_parts_d+0x60>
 10130d4:	403ff726 	beq	r8,zero,10130b4 <__fpcmp_parts_d+0x34>
 10130d8:	00bfffc4 	movi	r2,-1
 10130dc:	f800283a 	ret
 10130e0:	20c00217 	ldw	r3,8(r4)
 10130e4:	28800217 	ldw	r2,8(r5)
 10130e8:	10fffa16 	blt	r2,r3,10130d4 <__fpcmp_parts_d+0x54>
 10130ec:	18800916 	blt	r3,r2,1013114 <__fpcmp_parts_d+0x94>
 10130f0:	21c00417 	ldw	r7,16(r4)
 10130f4:	28c00417 	ldw	r3,16(r5)
 10130f8:	21800317 	ldw	r6,12(r4)
 10130fc:	28800317 	ldw	r2,12(r5)
 1013100:	19fff436 	bltu	r3,r7,10130d4 <__fpcmp_parts_d+0x54>
 1013104:	38c00526 	beq	r7,r3,101311c <__fpcmp_parts_d+0x9c>
 1013108:	38c00236 	bltu	r7,r3,1013114 <__fpcmp_parts_d+0x94>
 101310c:	19ffec1e 	bne	r3,r7,10130c0 <__fpcmp_parts_d+0x40>
 1013110:	30bfeb2e 	bgeu	r6,r2,10130c0 <__fpcmp_parts_d+0x40>
 1013114:	403fe71e 	bne	r8,zero,10130b4 <__fpcmp_parts_d+0x34>
 1013118:	003fef06 	br	10130d8 <__fpcmp_parts_d+0x58>
 101311c:	11bffa2e 	bgeu	r2,r6,1013108 <__fpcmp_parts_d+0x88>
 1013120:	403fe426 	beq	r8,zero,10130b4 <__fpcmp_parts_d+0x34>
 1013124:	003fec06 	br	10130d8 <__fpcmp_parts_d+0x58>
 1013128:	28800117 	ldw	r2,4(r5)
 101312c:	103fe11e 	bne	r2,zero,10130b4 <__fpcmp_parts_d+0x34>
 1013130:	003fe906 	br	10130d8 <__fpcmp_parts_d+0x58>
 1013134:	11bfdd1e 	bne	r2,r6,10130ac <__fpcmp_parts_d+0x2c>
 1013138:	28c00117 	ldw	r3,4(r5)
 101313c:	20800117 	ldw	r2,4(r4)
 1013140:	1885c83a 	sub	r2,r3,r2
 1013144:	f800283a 	ret

01013148 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1013148:	defff804 	addi	sp,sp,-32
 101314c:	dfc00715 	stw	ra,28(sp)
 1013150:	df000615 	stw	fp,24(sp)
 1013154:	df000604 	addi	fp,sp,24
 1013158:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 101315c:	e0bffc17 	ldw	r2,-16(fp)
 1013160:	1004803a 	cmplt	r2,r2,zero
 1013164:	1000081e 	bne	r2,zero,1013188 <close+0x40>
 1013168:	e0bffc17 	ldw	r2,-16(fp)
 101316c:	10800324 	muli	r2,r2,12
 1013170:	1007883a 	mov	r3,r2
 1013174:	008040b4 	movhi	r2,258
 1013178:	10800c04 	addi	r2,r2,48
 101317c:	1887883a 	add	r3,r3,r2
 1013180:	e0ffff15 	stw	r3,-4(fp)
 1013184:	00000106 	br	101318c <close+0x44>
 1013188:	e03fff15 	stw	zero,-4(fp)
 101318c:	e0bfff17 	ldw	r2,-4(fp)
 1013190:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1013194:	e0bffb17 	ldw	r2,-20(fp)
 1013198:	1005003a 	cmpeq	r2,r2,zero
 101319c:	10001d1e 	bne	r2,zero,1013214 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 10131a0:	e0bffb17 	ldw	r2,-20(fp)
 10131a4:	10800017 	ldw	r2,0(r2)
 10131a8:	10800417 	ldw	r2,16(r2)
 10131ac:	1005003a 	cmpeq	r2,r2,zero
 10131b0:	1000071e 	bne	r2,zero,10131d0 <close+0x88>
 10131b4:	e0bffb17 	ldw	r2,-20(fp)
 10131b8:	10800017 	ldw	r2,0(r2)
 10131bc:	10800417 	ldw	r2,16(r2)
 10131c0:	e13ffb17 	ldw	r4,-20(fp)
 10131c4:	103ee83a 	callr	r2
 10131c8:	e0bffe15 	stw	r2,-8(fp)
 10131cc:	00000106 	br	10131d4 <close+0x8c>
 10131d0:	e03ffe15 	stw	zero,-8(fp)
 10131d4:	e0bffe17 	ldw	r2,-8(fp)
 10131d8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 10131dc:	e13ffc17 	ldw	r4,-16(fp)
 10131e0:	1013bd40 	call	1013bd4 <alt_release_fd>
    if (rval < 0)
 10131e4:	e0bffa17 	ldw	r2,-24(fp)
 10131e8:	1004403a 	cmpge	r2,r2,zero
 10131ec:	1000071e 	bne	r2,zero,101320c <close+0xc4>
    {
      ALT_ERRNO = -rval;
 10131f0:	10132440 	call	1013244 <alt_get_errno>
 10131f4:	e0fffa17 	ldw	r3,-24(fp)
 10131f8:	00c7c83a 	sub	r3,zero,r3
 10131fc:	10c00015 	stw	r3,0(r2)
      return -1;
 1013200:	00bfffc4 	movi	r2,-1
 1013204:	e0bffd15 	stw	r2,-12(fp)
 1013208:	00000806 	br	101322c <close+0xe4>
    }
    return 0;
 101320c:	e03ffd15 	stw	zero,-12(fp)
 1013210:	00000606 	br	101322c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1013214:	10132440 	call	1013244 <alt_get_errno>
 1013218:	1007883a 	mov	r3,r2
 101321c:	00801444 	movi	r2,81
 1013220:	18800015 	stw	r2,0(r3)
    return -1;
 1013224:	00bfffc4 	movi	r2,-1
 1013228:	e0bffd15 	stw	r2,-12(fp)
 101322c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1013230:	e037883a 	mov	sp,fp
 1013234:	dfc00117 	ldw	ra,4(sp)
 1013238:	df000017 	ldw	fp,0(sp)
 101323c:	dec00204 	addi	sp,sp,8
 1013240:	f800283a 	ret

01013244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013244:	defffd04 	addi	sp,sp,-12
 1013248:	dfc00215 	stw	ra,8(sp)
 101324c:	df000115 	stw	fp,4(sp)
 1013250:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013254:	008040b4 	movhi	r2,258
 1013258:	1084ab04 	addi	r2,r2,4780
 101325c:	10800017 	ldw	r2,0(r2)
 1013260:	1005003a 	cmpeq	r2,r2,zero
 1013264:	1000061e 	bne	r2,zero,1013280 <alt_get_errno+0x3c>
 1013268:	008040b4 	movhi	r2,258
 101326c:	1084ab04 	addi	r2,r2,4780
 1013270:	10800017 	ldw	r2,0(r2)
 1013274:	103ee83a 	callr	r2
 1013278:	e0bfff15 	stw	r2,-4(fp)
 101327c:	00000306 	br	101328c <alt_get_errno+0x48>
 1013280:	008040b4 	movhi	r2,258
 1013284:	108bac04 	addi	r2,r2,11952
 1013288:	e0bfff15 	stw	r2,-4(fp)
 101328c:	e0bfff17 	ldw	r2,-4(fp)
}
 1013290:	e037883a 	mov	sp,fp
 1013294:	dfc00117 	ldw	ra,4(sp)
 1013298:	df000017 	ldw	fp,0(sp)
 101329c:	dec00204 	addi	sp,sp,8
 10132a0:	f800283a 	ret

010132a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 10132a4:	defffc04 	addi	sp,sp,-16
 10132a8:	df000315 	stw	fp,12(sp)
 10132ac:	df000304 	addi	fp,sp,12
 10132b0:	e13ffd15 	stw	r4,-12(fp)
 10132b4:	e17ffe15 	stw	r5,-8(fp)
 10132b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 10132bc:	e0bfff17 	ldw	r2,-4(fp)
}
 10132c0:	e037883a 	mov	sp,fp
 10132c4:	df000017 	ldw	fp,0(sp)
 10132c8:	dec00104 	addi	sp,sp,4
 10132cc:	f800283a 	ret

010132d0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 10132d0:	defffd04 	addi	sp,sp,-12
 10132d4:	df000215 	stw	fp,8(sp)
 10132d8:	df000204 	addi	fp,sp,8
 10132dc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 10132e0:	e0bfff17 	ldw	r2,-4(fp)
 10132e4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 10132e8:	e0bffe17 	ldw	r2,-8(fp)
 10132ec:	1005003a 	cmpeq	r2,r2,zero
 10132f0:	1000021e 	bne	r2,zero,10132fc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 10132f4:	002af070 	cmpltui	zero,zero,43969
 10132f8:	00000106 	br	1013300 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 10132fc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1013300:	e037883a 	mov	sp,fp
 1013304:	df000017 	ldw	fp,0(sp)
 1013308:	dec00104 	addi	sp,sp,4
 101330c:	f800283a 	ret

01013310 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1013310:	defffd04 	addi	sp,sp,-12
 1013314:	dfc00215 	stw	ra,8(sp)
 1013318:	df000115 	stw	fp,4(sp)
 101331c:	df000104 	addi	fp,sp,4
 1013320:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1013324:	008040b4 	movhi	r2,258
 1013328:	108bb844 	addi	r2,r2,12001
 101332c:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1013330:	e13fff17 	ldw	r4,-4(fp)
 1013334:	10132d00 	call	10132d0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1013338:	003fff06 	br	1013338 <_exit+0x28>

0101333c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 101333c:	defff904 	addi	sp,sp,-28
 1013340:	dfc00615 	stw	ra,24(sp)
 1013344:	df000515 	stw	fp,20(sp)
 1013348:	df000504 	addi	fp,sp,20
 101334c:	e13ffc15 	stw	r4,-16(fp)
 1013350:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1013354:	e0bffc17 	ldw	r2,-16(fp)
 1013358:	1004803a 	cmplt	r2,r2,zero
 101335c:	1000081e 	bne	r2,zero,1013380 <fstat+0x44>
 1013360:	e0bffc17 	ldw	r2,-16(fp)
 1013364:	10800324 	muli	r2,r2,12
 1013368:	1007883a 	mov	r3,r2
 101336c:	008040b4 	movhi	r2,258
 1013370:	10800c04 	addi	r2,r2,48
 1013374:	1887883a 	add	r3,r3,r2
 1013378:	e0ffff15 	stw	r3,-4(fp)
 101337c:	00000106 	br	1013384 <fstat+0x48>
 1013380:	e03fff15 	stw	zero,-4(fp)
 1013384:	e0bfff17 	ldw	r2,-4(fp)
 1013388:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 101338c:	e0bffb17 	ldw	r2,-20(fp)
 1013390:	1005003a 	cmpeq	r2,r2,zero
 1013394:	1000121e 	bne	r2,zero,10133e0 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1013398:	e0bffb17 	ldw	r2,-20(fp)
 101339c:	10800017 	ldw	r2,0(r2)
 10133a0:	10800817 	ldw	r2,32(r2)
 10133a4:	1005003a 	cmpeq	r2,r2,zero
 10133a8:	1000081e 	bne	r2,zero,10133cc <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 10133ac:	e0bffb17 	ldw	r2,-20(fp)
 10133b0:	10800017 	ldw	r2,0(r2)
 10133b4:	10800817 	ldw	r2,32(r2)
 10133b8:	e13ffb17 	ldw	r4,-20(fp)
 10133bc:	e17ffd17 	ldw	r5,-12(fp)
 10133c0:	103ee83a 	callr	r2
 10133c4:	e0bffe15 	stw	r2,-8(fp)
 10133c8:	00000b06 	br	10133f8 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 10133cc:	e0fffd17 	ldw	r3,-12(fp)
 10133d0:	00880004 	movi	r2,8192
 10133d4:	18800115 	stw	r2,4(r3)
      return 0;
 10133d8:	e03ffe15 	stw	zero,-8(fp)
 10133dc:	00000606 	br	10133f8 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10133e0:	10134100 	call	1013410 <alt_get_errno>
 10133e4:	1007883a 	mov	r3,r2
 10133e8:	00801444 	movi	r2,81
 10133ec:	18800015 	stw	r2,0(r3)
    return -1;
 10133f0:	00bfffc4 	movi	r2,-1
 10133f4:	e0bffe15 	stw	r2,-8(fp)
 10133f8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 10133fc:	e037883a 	mov	sp,fp
 1013400:	dfc00117 	ldw	ra,4(sp)
 1013404:	df000017 	ldw	fp,0(sp)
 1013408:	dec00204 	addi	sp,sp,8
 101340c:	f800283a 	ret

01013410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013410:	defffd04 	addi	sp,sp,-12
 1013414:	dfc00215 	stw	ra,8(sp)
 1013418:	df000115 	stw	fp,4(sp)
 101341c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013420:	008040b4 	movhi	r2,258
 1013424:	1084ab04 	addi	r2,r2,4780
 1013428:	10800017 	ldw	r2,0(r2)
 101342c:	1005003a 	cmpeq	r2,r2,zero
 1013430:	1000061e 	bne	r2,zero,101344c <alt_get_errno+0x3c>
 1013434:	008040b4 	movhi	r2,258
 1013438:	1084ab04 	addi	r2,r2,4780
 101343c:	10800017 	ldw	r2,0(r2)
 1013440:	103ee83a 	callr	r2
 1013444:	e0bfff15 	stw	r2,-4(fp)
 1013448:	00000306 	br	1013458 <alt_get_errno+0x48>
 101344c:	008040b4 	movhi	r2,258
 1013450:	108bac04 	addi	r2,r2,11952
 1013454:	e0bfff15 	stw	r2,-4(fp)
 1013458:	e0bfff17 	ldw	r2,-4(fp)
}
 101345c:	e037883a 	mov	sp,fp
 1013460:	dfc00117 	ldw	ra,4(sp)
 1013464:	df000017 	ldw	fp,0(sp)
 1013468:	dec00204 	addi	sp,sp,8
 101346c:	f800283a 	ret

01013470 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 1013470:	deffff04 	addi	sp,sp,-4
 1013474:	df000015 	stw	fp,0(sp)
 1013478:	d839883a 	mov	fp,sp
  return 0;
 101347c:	0005883a 	mov	r2,zero
}
 1013480:	e037883a 	mov	sp,fp
 1013484:	df000017 	ldw	fp,0(sp)
 1013488:	dec00104 	addi	sp,sp,4
 101348c:	f800283a 	ret

01013490 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1013490:	deffeb04 	addi	sp,sp,-84
 1013494:	dfc01415 	stw	ra,80(sp)
 1013498:	df001315 	stw	fp,76(sp)
 101349c:	df001304 	addi	fp,sp,76
 10134a0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10134a4:	e0bffd17 	ldw	r2,-12(fp)
 10134a8:	1004803a 	cmplt	r2,r2,zero
 10134ac:	1000081e 	bne	r2,zero,10134d0 <isatty+0x40>
 10134b0:	e0bffd17 	ldw	r2,-12(fp)
 10134b4:	10800324 	muli	r2,r2,12
 10134b8:	1007883a 	mov	r3,r2
 10134bc:	008040b4 	movhi	r2,258
 10134c0:	10800c04 	addi	r2,r2,48
 10134c4:	1887883a 	add	r3,r3,r2
 10134c8:	e0ffff15 	stw	r3,-4(fp)
 10134cc:	00000106 	br	10134d4 <isatty+0x44>
 10134d0:	e03fff15 	stw	zero,-4(fp)
 10134d4:	e0bfff17 	ldw	r2,-4(fp)
 10134d8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 10134dc:	e0bfed17 	ldw	r2,-76(fp)
 10134e0:	1005003a 	cmpeq	r2,r2,zero
 10134e4:	10000f1e 	bne	r2,zero,1013524 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 10134e8:	e0bfed17 	ldw	r2,-76(fp)
 10134ec:	10800017 	ldw	r2,0(r2)
 10134f0:	10800817 	ldw	r2,32(r2)
 10134f4:	1004c03a 	cmpne	r2,r2,zero
 10134f8:	1000031e 	bne	r2,zero,1013508 <isatty+0x78>
    {
      return 1;
 10134fc:	00800044 	movi	r2,1
 1013500:	e0bffe15 	stw	r2,-8(fp)
 1013504:	00000c06 	br	1013538 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1013508:	e17fee04 	addi	r5,fp,-72
 101350c:	e13ffd17 	ldw	r4,-12(fp)
 1013510:	101333c0 	call	101333c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1013514:	e0bfef17 	ldw	r2,-68(fp)
 1013518:	10880020 	cmpeqi	r2,r2,8192
 101351c:	e0bffe15 	stw	r2,-8(fp)
 1013520:	00000506 	br	1013538 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1013524:	10135500 	call	1013550 <alt_get_errno>
 1013528:	1007883a 	mov	r3,r2
 101352c:	00801444 	movi	r2,81
 1013530:	18800015 	stw	r2,0(r3)
    return 0;
 1013534:	e03ffe15 	stw	zero,-8(fp)
 1013538:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 101353c:	e037883a 	mov	sp,fp
 1013540:	dfc00117 	ldw	ra,4(sp)
 1013544:	df000017 	ldw	fp,0(sp)
 1013548:	dec00204 	addi	sp,sp,8
 101354c:	f800283a 	ret

01013550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013550:	defffd04 	addi	sp,sp,-12
 1013554:	dfc00215 	stw	ra,8(sp)
 1013558:	df000115 	stw	fp,4(sp)
 101355c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013560:	008040b4 	movhi	r2,258
 1013564:	1084ab04 	addi	r2,r2,4780
 1013568:	10800017 	ldw	r2,0(r2)
 101356c:	1005003a 	cmpeq	r2,r2,zero
 1013570:	1000061e 	bne	r2,zero,101358c <alt_get_errno+0x3c>
 1013574:	008040b4 	movhi	r2,258
 1013578:	1084ab04 	addi	r2,r2,4780
 101357c:	10800017 	ldw	r2,0(r2)
 1013580:	103ee83a 	callr	r2
 1013584:	e0bfff15 	stw	r2,-4(fp)
 1013588:	00000306 	br	1013598 <alt_get_errno+0x48>
 101358c:	008040b4 	movhi	r2,258
 1013590:	108bac04 	addi	r2,r2,11952
 1013594:	e0bfff15 	stw	r2,-4(fp)
 1013598:	e0bfff17 	ldw	r2,-4(fp)
}
 101359c:	e037883a 	mov	sp,fp
 10135a0:	dfc00117 	ldw	ra,4(sp)
 10135a4:	df000017 	ldw	fp,0(sp)
 10135a8:	dec00204 	addi	sp,sp,8
 10135ac:	f800283a 	ret

010135b0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 10135b0:	defffa04 	addi	sp,sp,-24
 10135b4:	dfc00515 	stw	ra,20(sp)
 10135b8:	df000415 	stw	fp,16(sp)
 10135bc:	df000404 	addi	fp,sp,16
 10135c0:	e13ffd15 	stw	r4,-12(fp)
 10135c4:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 10135c8:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 10135cc:	e0bffd17 	ldw	r2,-12(fp)
 10135d0:	10800048 	cmpgei	r2,r2,1
 10135d4:	1000301e 	bne	r2,zero,1013698 <kill+0xe8>
  {
    switch (sig)
 10135d8:	e0bffe17 	ldw	r2,-8(fp)
 10135dc:	10800828 	cmpgeui	r2,r2,32
 10135e0:	10002a1e 	bne	r2,zero,101368c <kill+0xdc>
 10135e4:	e0bffe17 	ldw	r2,-8(fp)
 10135e8:	1085883a 	add	r2,r2,r2
 10135ec:	1087883a 	add	r3,r2,r2
 10135f0:	00804074 	movhi	r2,257
 10135f4:	108d8104 	addi	r2,r2,13828
 10135f8:	1885883a 	add	r2,r3,r2
 10135fc:	10800017 	ldw	r2,0(r2)
 1013600:	1000683a 	jmp	r2
 1013604:	010136ac 	andhi	r4,zero,1242
 1013608:	0101368c 	andi	r4,zero,1242
 101360c:	0101368c 	andi	r4,zero,1242
 1013610:	01013684 	movi	r4,1242
 1013614:	01013684 	movi	r4,1242
 1013618:	01013684 	movi	r4,1242
 101361c:	01013684 	movi	r4,1242
 1013620:	0101368c 	andi	r4,zero,1242
 1013624:	01013684 	movi	r4,1242
 1013628:	01013684 	movi	r4,1242
 101362c:	01013684 	movi	r4,1242
 1013630:	01013684 	movi	r4,1242
 1013634:	01013684 	movi	r4,1242
 1013638:	01013684 	movi	r4,1242
 101363c:	01013684 	movi	r4,1242
 1013640:	01013684 	movi	r4,1242
 1013644:	010136ac 	andhi	r4,zero,1242
 1013648:	0101368c 	andi	r4,zero,1242
 101364c:	0101368c 	andi	r4,zero,1242
 1013650:	0101368c 	andi	r4,zero,1242
 1013654:	010136ac 	andhi	r4,zero,1242
 1013658:	0101368c 	andi	r4,zero,1242
 101365c:	0101368c 	andi	r4,zero,1242
 1013660:	01013684 	movi	r4,1242
 1013664:	01013684 	movi	r4,1242
 1013668:	01013684 	movi	r4,1242
 101366c:	01013684 	movi	r4,1242
 1013670:	01013684 	movi	r4,1242
 1013674:	0101368c 	andi	r4,zero,1242
 1013678:	0101368c 	andi	r4,zero,1242
 101367c:	01013684 	movi	r4,1242
 1013680:	01013684 	movi	r4,1242
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 1013684:	0009883a 	mov	r4,zero
 1013688:	10133100 	call	1013310 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 101368c:	00800584 	movi	r2,22
 1013690:	e0bffc15 	stw	r2,-16(fp)
 1013694:	00000506 	br	10136ac <kill+0xfc>
    }
  }

  else if (pid > 0)
 1013698:	e0bffd17 	ldw	r2,-12(fp)
 101369c:	10800050 	cmplti	r2,r2,1
 10136a0:	1000021e 	bne	r2,zero,10136ac <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 10136a4:	008000c4 	movi	r2,3
 10136a8:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 10136ac:	e0bffc17 	ldw	r2,-16(fp)
 10136b0:	1005003a 	cmpeq	r2,r2,zero
 10136b4:	1000071e 	bne	r2,zero,10136d4 <kill+0x124>
  {
    ALT_ERRNO = status;
 10136b8:	10136f00 	call	10136f0 <alt_get_errno>
 10136bc:	1007883a 	mov	r3,r2
 10136c0:	e0bffc17 	ldw	r2,-16(fp)
 10136c4:	18800015 	stw	r2,0(r3)
    return -1;
 10136c8:	00bfffc4 	movi	r2,-1
 10136cc:	e0bfff15 	stw	r2,-4(fp)
 10136d0:	00000106 	br	10136d8 <kill+0x128>
  }

  return 0;
 10136d4:	e03fff15 	stw	zero,-4(fp)
 10136d8:	e0bfff17 	ldw	r2,-4(fp)
}
 10136dc:	e037883a 	mov	sp,fp
 10136e0:	dfc00117 	ldw	ra,4(sp)
 10136e4:	df000017 	ldw	fp,0(sp)
 10136e8:	dec00204 	addi	sp,sp,8
 10136ec:	f800283a 	ret

010136f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10136f0:	defffd04 	addi	sp,sp,-12
 10136f4:	dfc00215 	stw	ra,8(sp)
 10136f8:	df000115 	stw	fp,4(sp)
 10136fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013700:	008040b4 	movhi	r2,258
 1013704:	1084ab04 	addi	r2,r2,4780
 1013708:	10800017 	ldw	r2,0(r2)
 101370c:	1005003a 	cmpeq	r2,r2,zero
 1013710:	1000061e 	bne	r2,zero,101372c <alt_get_errno+0x3c>
 1013714:	008040b4 	movhi	r2,258
 1013718:	1084ab04 	addi	r2,r2,4780
 101371c:	10800017 	ldw	r2,0(r2)
 1013720:	103ee83a 	callr	r2
 1013724:	e0bfff15 	stw	r2,-4(fp)
 1013728:	00000306 	br	1013738 <alt_get_errno+0x48>
 101372c:	008040b4 	movhi	r2,258
 1013730:	108bac04 	addi	r2,r2,11952
 1013734:	e0bfff15 	stw	r2,-4(fp)
 1013738:	e0bfff17 	ldw	r2,-4(fp)
}
 101373c:	e037883a 	mov	sp,fp
 1013740:	dfc00117 	ldw	ra,4(sp)
 1013744:	df000017 	ldw	fp,0(sp)
 1013748:	dec00204 	addi	sp,sp,8
 101374c:	f800283a 	ret

01013750 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1013750:	defffe04 	addi	sp,sp,-8
 1013754:	dfc00115 	stw	ra,4(sp)
 1013758:	df000015 	stw	fp,0(sp)
 101375c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1013760:	010040b4 	movhi	r4,258
 1013764:	2104cf04 	addi	r4,r4,4924
 1013768:	014040b4 	movhi	r5,258
 101376c:	297dfd04 	addi	r5,r5,-2060
 1013770:	018040b4 	movhi	r6,258
 1013774:	3184cf04 	addi	r6,r6,4924
 1013778:	10137d00 	call	10137d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 101377c:	01004034 	movhi	r4,256
 1013780:	21000804 	addi	r4,r4,32
 1013784:	01404034 	movhi	r5,256
 1013788:	29400804 	addi	r5,r5,32
 101378c:	01804034 	movhi	r6,256
 1013790:	31806f04 	addi	r6,r6,444
 1013794:	10137d00 	call	10137d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1013798:	010040b4 	movhi	r4,258
 101379c:	213b6804 	addi	r4,r4,-4704
 10137a0:	014040b4 	movhi	r5,258
 10137a4:	297b6804 	addi	r5,r5,-4704
 10137a8:	018040b4 	movhi	r6,258
 10137ac:	31bdfd04 	addi	r6,r6,-2060
 10137b0:	10137d00 	call	10137d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 10137b4:	101d4a00 	call	101d4a0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 10137b8:	101d6c00 	call	101d6c0 <alt_icache_flush_all>
}
 10137bc:	e037883a 	mov	sp,fp
 10137c0:	dfc00117 	ldw	ra,4(sp)
 10137c4:	df000017 	ldw	fp,0(sp)
 10137c8:	dec00204 	addi	sp,sp,8
 10137cc:	f800283a 	ret

010137d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 10137d0:	defffc04 	addi	sp,sp,-16
 10137d4:	df000315 	stw	fp,12(sp)
 10137d8:	df000304 	addi	fp,sp,12
 10137dc:	e13ffd15 	stw	r4,-12(fp)
 10137e0:	e17ffe15 	stw	r5,-8(fp)
 10137e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10137e8:	e0fffe17 	ldw	r3,-8(fp)
 10137ec:	e0bffd17 	ldw	r2,-12(fp)
 10137f0:	18800e26 	beq	r3,r2,101382c <alt_load_section+0x5c>
  {
    while( to != end )
 10137f4:	00000a06 	br	1013820 <alt_load_section+0x50>
    {
      *to++ = *from++;
 10137f8:	e0bffd17 	ldw	r2,-12(fp)
 10137fc:	10c00017 	ldw	r3,0(r2)
 1013800:	e0bffe17 	ldw	r2,-8(fp)
 1013804:	10c00015 	stw	r3,0(r2)
 1013808:	e0bffe17 	ldw	r2,-8(fp)
 101380c:	10800104 	addi	r2,r2,4
 1013810:	e0bffe15 	stw	r2,-8(fp)
 1013814:	e0bffd17 	ldw	r2,-12(fp)
 1013818:	10800104 	addi	r2,r2,4
 101381c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1013820:	e0fffe17 	ldw	r3,-8(fp)
 1013824:	e0bfff17 	ldw	r2,-4(fp)
 1013828:	18bff31e 	bne	r3,r2,10137f8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 101382c:	e037883a 	mov	sp,fp
 1013830:	df000017 	ldw	fp,0(sp)
 1013834:	dec00104 	addi	sp,sp,4
 1013838:	f800283a 	ret

0101383c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 101383c:	defff804 	addi	sp,sp,-32
 1013840:	dfc00715 	stw	ra,28(sp)
 1013844:	df000615 	stw	fp,24(sp)
 1013848:	df000604 	addi	fp,sp,24
 101384c:	e13ffc15 	stw	r4,-16(fp)
 1013850:	e17ffd15 	stw	r5,-12(fp)
 1013854:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1013858:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 101385c:	e0bffc17 	ldw	r2,-16(fp)
 1013860:	1004803a 	cmplt	r2,r2,zero
 1013864:	1000081e 	bne	r2,zero,1013888 <lseek+0x4c>
 1013868:	e0bffc17 	ldw	r2,-16(fp)
 101386c:	10800324 	muli	r2,r2,12
 1013870:	1007883a 	mov	r3,r2
 1013874:	008040b4 	movhi	r2,258
 1013878:	10800c04 	addi	r2,r2,48
 101387c:	1887883a 	add	r3,r3,r2
 1013880:	e0ffff15 	stw	r3,-4(fp)
 1013884:	00000106 	br	101388c <lseek+0x50>
 1013888:	e03fff15 	stw	zero,-4(fp)
 101388c:	e0bfff17 	ldw	r2,-4(fp)
 1013890:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1013894:	e0bffb17 	ldw	r2,-20(fp)
 1013898:	1005003a 	cmpeq	r2,r2,zero
 101389c:	1000111e 	bne	r2,zero,10138e4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 10138a0:	e0bffb17 	ldw	r2,-20(fp)
 10138a4:	10800017 	ldw	r2,0(r2)
 10138a8:	10800717 	ldw	r2,28(r2)
 10138ac:	1005003a 	cmpeq	r2,r2,zero
 10138b0:	1000091e 	bne	r2,zero,10138d8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 10138b4:	e0bffb17 	ldw	r2,-20(fp)
 10138b8:	10800017 	ldw	r2,0(r2)
 10138bc:	10800717 	ldw	r2,28(r2)
 10138c0:	e13ffb17 	ldw	r4,-20(fp)
 10138c4:	e17ffd17 	ldw	r5,-12(fp)
 10138c8:	e1bffe17 	ldw	r6,-8(fp)
 10138cc:	103ee83a 	callr	r2
 10138d0:	e0bffa15 	stw	r2,-24(fp)
 10138d4:	00000506 	br	10138ec <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 10138d8:	00bfde84 	movi	r2,-134
 10138dc:	e0bffa15 	stw	r2,-24(fp)
 10138e0:	00000206 	br	10138ec <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 10138e4:	00bfebc4 	movi	r2,-81
 10138e8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 10138ec:	e0bffa17 	ldw	r2,-24(fp)
 10138f0:	1004403a 	cmpge	r2,r2,zero
 10138f4:	1000071e 	bne	r2,zero,1013914 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 10138f8:	101392c0 	call	101392c <alt_get_errno>
 10138fc:	1007883a 	mov	r3,r2
 1013900:	e0bffa17 	ldw	r2,-24(fp)
 1013904:	0085c83a 	sub	r2,zero,r2
 1013908:	18800015 	stw	r2,0(r3)
    rc = -1;
 101390c:	00bfffc4 	movi	r2,-1
 1013910:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1013914:	e0bffa17 	ldw	r2,-24(fp)
}
 1013918:	e037883a 	mov	sp,fp
 101391c:	dfc00117 	ldw	ra,4(sp)
 1013920:	df000017 	ldw	fp,0(sp)
 1013924:	dec00204 	addi	sp,sp,8
 1013928:	f800283a 	ret

0101392c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101392c:	defffd04 	addi	sp,sp,-12
 1013930:	dfc00215 	stw	ra,8(sp)
 1013934:	df000115 	stw	fp,4(sp)
 1013938:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101393c:	008040b4 	movhi	r2,258
 1013940:	1084ab04 	addi	r2,r2,4780
 1013944:	10800017 	ldw	r2,0(r2)
 1013948:	1005003a 	cmpeq	r2,r2,zero
 101394c:	1000061e 	bne	r2,zero,1013968 <alt_get_errno+0x3c>
 1013950:	008040b4 	movhi	r2,258
 1013954:	1084ab04 	addi	r2,r2,4780
 1013958:	10800017 	ldw	r2,0(r2)
 101395c:	103ee83a 	callr	r2
 1013960:	e0bfff15 	stw	r2,-4(fp)
 1013964:	00000306 	br	1013974 <alt_get_errno+0x48>
 1013968:	008040b4 	movhi	r2,258
 101396c:	108bac04 	addi	r2,r2,11952
 1013970:	e0bfff15 	stw	r2,-4(fp)
 1013974:	e0bfff17 	ldw	r2,-4(fp)
}
 1013978:	e037883a 	mov	sp,fp
 101397c:	dfc00117 	ldw	ra,4(sp)
 1013980:	df000017 	ldw	fp,0(sp)
 1013984:	dec00204 	addi	sp,sp,8
 1013988:	f800283a 	ret

0101398c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 101398c:	defffb04 	addi	sp,sp,-20
 1013990:	dfc00415 	stw	ra,16(sp)
 1013994:	df000315 	stw	fp,12(sp)
 1013998:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 101399c:	0009883a 	mov	r4,zero
 10139a0:	101c41c0 	call	101c41c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 10139a4:	1014a780 	call	1014a78 <OSInit>
 10139a8:	01000044 	movi	r4,1
 10139ac:	101993c0 	call	101993c <OSSemCreate>
 10139b0:	1007883a 	mov	r3,r2
 10139b4:	008040b4 	movhi	r2,258
 10139b8:	108bb504 	addi	r2,r2,11988
 10139bc:	10c00015 	stw	r3,0(r2)
 10139c0:	01000044 	movi	r4,1
 10139c4:	101993c0 	call	101993c <OSSemCreate>
 10139c8:	1007883a 	mov	r3,r2
 10139cc:	008040b4 	movhi	r2,258
 10139d0:	108bb704 	addi	r2,r2,11996
 10139d4:	10c00015 	stw	r3,0(r2)
 10139d8:	008040b4 	movhi	r2,258
 10139dc:	108bb004 	addi	r2,r2,11968
 10139e0:	e0bffd15 	stw	r2,-12(fp)
 10139e4:	00800044 	movi	r2,1
 10139e8:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 10139ec:	e13ffe0b 	ldhu	r4,-8(fp)
 10139f0:	101993c0 	call	101993c <OSSemCreate>
 10139f4:	1007883a 	mov	r3,r2
 10139f8:	e0bffd17 	ldw	r2,-12(fp)
 10139fc:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1013a00:	101c4500 	call	101c450 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1013a04:	010040b4 	movhi	r4,258
 1013a08:	213da704 	addi	r4,r4,-2404
 1013a0c:	014040b4 	movhi	r5,258
 1013a10:	297da704 	addi	r5,r5,-2404
 1013a14:	018040b4 	movhi	r6,258
 1013a18:	31bda704 	addi	r6,r6,-2404
 1013a1c:	101da800 	call	101da80 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1013a20:	101d5f80 	call	101d5f8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1013a24:	010040b4 	movhi	r4,258
 1013a28:	21359704 	addi	r4,r4,-10660
 1013a2c:	101e7a40 	call	101e7a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1013a30:	d1271f17 	ldw	r4,-25476(gp)
 1013a34:	d1672017 	ldw	r5,-25472(gp)
 1013a38:	d1a72117 	ldw	r6,-25468(gp)
 1013a3c:	10015dc0 	call	10015dc <main>
 1013a40:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1013a44:	01000044 	movi	r4,1
 1013a48:	10131480 	call	1013148 <close>
  exit (result);
 1013a4c:	e13fff17 	ldw	r4,-4(fp)
 1013a50:	101e7b80 	call	101e7b8 <exit>

01013a54 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1013a54:	defff704 	addi	sp,sp,-36
 1013a58:	dfc00815 	stw	ra,32(sp)
 1013a5c:	df000715 	stw	fp,28(sp)
 1013a60:	df000704 	addi	fp,sp,28
 1013a64:	e13ffb15 	stw	r4,-20(fp)
 1013a68:	e17ffc15 	stw	r5,-16(fp)
 1013a6c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1013a70:	e0bffb17 	ldw	r2,-20(fp)
 1013a74:	1004803a 	cmplt	r2,r2,zero
 1013a78:	1000081e 	bne	r2,zero,1013a9c <read+0x48>
 1013a7c:	e0bffb17 	ldw	r2,-20(fp)
 1013a80:	10800324 	muli	r2,r2,12
 1013a84:	1007883a 	mov	r3,r2
 1013a88:	008040b4 	movhi	r2,258
 1013a8c:	10800c04 	addi	r2,r2,48
 1013a90:	1887883a 	add	r3,r3,r2
 1013a94:	e0ffff15 	stw	r3,-4(fp)
 1013a98:	00000106 	br	1013aa0 <read+0x4c>
 1013a9c:	e03fff15 	stw	zero,-4(fp)
 1013aa0:	e0bfff17 	ldw	r2,-4(fp)
 1013aa4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1013aa8:	e0bffa17 	ldw	r2,-24(fp)
 1013aac:	1005003a 	cmpeq	r2,r2,zero
 1013ab0:	1000241e 	bne	r2,zero,1013b44 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1013ab4:	e0bffa17 	ldw	r2,-24(fp)
 1013ab8:	10800217 	ldw	r2,8(r2)
 1013abc:	108000cc 	andi	r2,r2,3
 1013ac0:	10800060 	cmpeqi	r2,r2,1
 1013ac4:	10001a1e 	bne	r2,zero,1013b30 <read+0xdc>
 1013ac8:	e0bffa17 	ldw	r2,-24(fp)
 1013acc:	10800017 	ldw	r2,0(r2)
 1013ad0:	10800517 	ldw	r2,20(r2)
 1013ad4:	1005003a 	cmpeq	r2,r2,zero
 1013ad8:	1000151e 	bne	r2,zero,1013b30 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1013adc:	e0bffa17 	ldw	r2,-24(fp)
 1013ae0:	10800017 	ldw	r2,0(r2)
 1013ae4:	10800517 	ldw	r2,20(r2)
 1013ae8:	e17ffc17 	ldw	r5,-16(fp)
 1013aec:	e1bffd17 	ldw	r6,-12(fp)
 1013af0:	e13ffa17 	ldw	r4,-24(fp)
 1013af4:	103ee83a 	callr	r2
 1013af8:	e0bff915 	stw	r2,-28(fp)
 1013afc:	e0bff917 	ldw	r2,-28(fp)
 1013b00:	1004403a 	cmpge	r2,r2,zero
 1013b04:	1000071e 	bne	r2,zero,1013b24 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 1013b08:	1013b740 	call	1013b74 <alt_get_errno>
 1013b0c:	e0fff917 	ldw	r3,-28(fp)
 1013b10:	00c7c83a 	sub	r3,zero,r3
 1013b14:	10c00015 	stw	r3,0(r2)
          return -1;
 1013b18:	00bfffc4 	movi	r2,-1
 1013b1c:	e0bffe15 	stw	r2,-8(fp)
 1013b20:	00000e06 	br	1013b5c <read+0x108>
        }
        return rval;
 1013b24:	e0bff917 	ldw	r2,-28(fp)
 1013b28:	e0bffe15 	stw	r2,-8(fp)
 1013b2c:	00000b06 	br	1013b5c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1013b30:	1013b740 	call	1013b74 <alt_get_errno>
 1013b34:	1007883a 	mov	r3,r2
 1013b38:	00800344 	movi	r2,13
 1013b3c:	18800015 	stw	r2,0(r3)
 1013b40:	00000406 	br	1013b54 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1013b44:	1013b740 	call	1013b74 <alt_get_errno>
 1013b48:	1007883a 	mov	r3,r2
 1013b4c:	00801444 	movi	r2,81
 1013b50:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1013b54:	00bfffc4 	movi	r2,-1
 1013b58:	e0bffe15 	stw	r2,-8(fp)
 1013b5c:	e0bffe17 	ldw	r2,-8(fp)
}
 1013b60:	e037883a 	mov	sp,fp
 1013b64:	dfc00117 	ldw	ra,4(sp)
 1013b68:	df000017 	ldw	fp,0(sp)
 1013b6c:	dec00204 	addi	sp,sp,8
 1013b70:	f800283a 	ret

01013b74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013b74:	defffd04 	addi	sp,sp,-12
 1013b78:	dfc00215 	stw	ra,8(sp)
 1013b7c:	df000115 	stw	fp,4(sp)
 1013b80:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013b84:	008040b4 	movhi	r2,258
 1013b88:	1084ab04 	addi	r2,r2,4780
 1013b8c:	10800017 	ldw	r2,0(r2)
 1013b90:	1005003a 	cmpeq	r2,r2,zero
 1013b94:	1000061e 	bne	r2,zero,1013bb0 <alt_get_errno+0x3c>
 1013b98:	008040b4 	movhi	r2,258
 1013b9c:	1084ab04 	addi	r2,r2,4780
 1013ba0:	10800017 	ldw	r2,0(r2)
 1013ba4:	103ee83a 	callr	r2
 1013ba8:	e0bfff15 	stw	r2,-4(fp)
 1013bac:	00000306 	br	1013bbc <alt_get_errno+0x48>
 1013bb0:	008040b4 	movhi	r2,258
 1013bb4:	108bac04 	addi	r2,r2,11952
 1013bb8:	e0bfff15 	stw	r2,-4(fp)
 1013bbc:	e0bfff17 	ldw	r2,-4(fp)
}
 1013bc0:	e037883a 	mov	sp,fp
 1013bc4:	dfc00117 	ldw	ra,4(sp)
 1013bc8:	df000017 	ldw	fp,0(sp)
 1013bcc:	dec00204 	addi	sp,sp,8
 1013bd0:	f800283a 	ret

01013bd4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1013bd4:	defffe04 	addi	sp,sp,-8
 1013bd8:	df000115 	stw	fp,4(sp)
 1013bdc:	df000104 	addi	fp,sp,4
 1013be0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1013be4:	e0bfff17 	ldw	r2,-4(fp)
 1013be8:	108000d0 	cmplti	r2,r2,3
 1013bec:	10000d1e 	bne	r2,zero,1013c24 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1013bf0:	e0bfff17 	ldw	r2,-4(fp)
 1013bf4:	00c040b4 	movhi	r3,258
 1013bf8:	18c00c04 	addi	r3,r3,48
 1013bfc:	10800324 	muli	r2,r2,12
 1013c00:	10c5883a 	add	r2,r2,r3
 1013c04:	10800204 	addi	r2,r2,8
 1013c08:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1013c0c:	e0bfff17 	ldw	r2,-4(fp)
 1013c10:	00c040b4 	movhi	r3,258
 1013c14:	18c00c04 	addi	r3,r3,48
 1013c18:	10800324 	muli	r2,r2,12
 1013c1c:	10c5883a 	add	r2,r2,r3
 1013c20:	10000015 	stw	zero,0(r2)
  }
}
 1013c24:	e037883a 	mov	sp,fp
 1013c28:	df000017 	ldw	fp,0(sp)
 1013c2c:	dec00104 	addi	sp,sp,4
 1013c30:	f800283a 	ret

01013c34 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1013c34:	defff804 	addi	sp,sp,-32
 1013c38:	df000715 	stw	fp,28(sp)
 1013c3c:	df000704 	addi	fp,sp,28
 1013c40:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013c44:	0005303a 	rdctl	r2,status
 1013c48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013c4c:	e0fffb17 	ldw	r3,-20(fp)
 1013c50:	00bfff84 	movi	r2,-2
 1013c54:	1884703a 	and	r2,r3,r2
 1013c58:	1001703a 	wrctl	status,r2
  
  return context;
 1013c5c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1013c60:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1013c64:	d0a01a17 	ldw	r2,-32664(gp)
 1013c68:	10c000c4 	addi	r3,r2,3
 1013c6c:	00bfff04 	movi	r2,-4
 1013c70:	1884703a 	and	r2,r3,r2
 1013c74:	d0a01a15 	stw	r2,-32664(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1013c78:	d0e01a17 	ldw	r3,-32664(gp)
 1013c7c:	e0bffe17 	ldw	r2,-8(fp)
 1013c80:	1887883a 	add	r3,r3,r2
 1013c84:	00808034 	movhi	r2,512
 1013c88:	10800004 	addi	r2,r2,0
 1013c8c:	10c0072e 	bgeu	r2,r3,1013cac <sbrk+0x78>
 1013c90:	e0bffd17 	ldw	r2,-12(fp)
 1013c94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013c98:	e0bffa17 	ldw	r2,-24(fp)
 1013c9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1013ca0:	00bfffc4 	movi	r2,-1
 1013ca4:	e0bfff15 	stw	r2,-4(fp)
 1013ca8:	00000c06 	br	1013cdc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1013cac:	d0a01a17 	ldw	r2,-32664(gp)
 1013cb0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 1013cb4:	d0e01a17 	ldw	r3,-32664(gp)
 1013cb8:	e0bffe17 	ldw	r2,-8(fp)
 1013cbc:	1885883a 	add	r2,r3,r2
 1013cc0:	d0a01a15 	stw	r2,-32664(gp)
 1013cc4:	e0bffd17 	ldw	r2,-12(fp)
 1013cc8:	e0bff915 	stw	r2,-28(fp)
 1013ccc:	e0bff917 	ldw	r2,-28(fp)
 1013cd0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1013cd4:	e0bffc17 	ldw	r2,-16(fp)
 1013cd8:	e0bfff15 	stw	r2,-4(fp)
 1013cdc:	e0bfff17 	ldw	r2,-4(fp)
} 
 1013ce0:	e037883a 	mov	sp,fp
 1013ce4:	df000017 	ldw	fp,0(sp)
 1013ce8:	dec00104 	addi	sp,sp,4
 1013cec:	f800283a 	ret

01013cf0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1013cf0:	defff704 	addi	sp,sp,-36
 1013cf4:	dfc00815 	stw	ra,32(sp)
 1013cf8:	df000715 	stw	fp,28(sp)
 1013cfc:	df000704 	addi	fp,sp,28
 1013d00:	e13ffb15 	stw	r4,-20(fp)
 1013d04:	e17ffc15 	stw	r5,-16(fp)
 1013d08:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1013d0c:	e0bffb17 	ldw	r2,-20(fp)
 1013d10:	1004803a 	cmplt	r2,r2,zero
 1013d14:	1000081e 	bne	r2,zero,1013d38 <write+0x48>
 1013d18:	e0bffb17 	ldw	r2,-20(fp)
 1013d1c:	10800324 	muli	r2,r2,12
 1013d20:	1007883a 	mov	r3,r2
 1013d24:	008040b4 	movhi	r2,258
 1013d28:	10800c04 	addi	r2,r2,48
 1013d2c:	1887883a 	add	r3,r3,r2
 1013d30:	e0ffff15 	stw	r3,-4(fp)
 1013d34:	00000106 	br	1013d3c <write+0x4c>
 1013d38:	e03fff15 	stw	zero,-4(fp)
 1013d3c:	e0bfff17 	ldw	r2,-4(fp)
 1013d40:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1013d44:	e0bffa17 	ldw	r2,-24(fp)
 1013d48:	1005003a 	cmpeq	r2,r2,zero
 1013d4c:	1000241e 	bne	r2,zero,1013de0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1013d50:	e0bffa17 	ldw	r2,-24(fp)
 1013d54:	10800217 	ldw	r2,8(r2)
 1013d58:	108000cc 	andi	r2,r2,3
 1013d5c:	1005003a 	cmpeq	r2,r2,zero
 1013d60:	10001a1e 	bne	r2,zero,1013dcc <write+0xdc>
 1013d64:	e0bffa17 	ldw	r2,-24(fp)
 1013d68:	10800017 	ldw	r2,0(r2)
 1013d6c:	10800617 	ldw	r2,24(r2)
 1013d70:	1005003a 	cmpeq	r2,r2,zero
 1013d74:	1000151e 	bne	r2,zero,1013dcc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1013d78:	e0bffa17 	ldw	r2,-24(fp)
 1013d7c:	10800017 	ldw	r2,0(r2)
 1013d80:	10800617 	ldw	r2,24(r2)
 1013d84:	e17ffc17 	ldw	r5,-16(fp)
 1013d88:	e1bffd17 	ldw	r6,-12(fp)
 1013d8c:	e13ffa17 	ldw	r4,-24(fp)
 1013d90:	103ee83a 	callr	r2
 1013d94:	e0bff915 	stw	r2,-28(fp)
 1013d98:	e0bff917 	ldw	r2,-28(fp)
 1013d9c:	1004403a 	cmpge	r2,r2,zero
 1013da0:	1000071e 	bne	r2,zero,1013dc0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 1013da4:	1013e100 	call	1013e10 <alt_get_errno>
 1013da8:	e0fff917 	ldw	r3,-28(fp)
 1013dac:	00c7c83a 	sub	r3,zero,r3
 1013db0:	10c00015 	stw	r3,0(r2)
        return -1;
 1013db4:	00bfffc4 	movi	r2,-1
 1013db8:	e0bffe15 	stw	r2,-8(fp)
 1013dbc:	00000e06 	br	1013df8 <write+0x108>
      }
      return rval;
 1013dc0:	e0bff917 	ldw	r2,-28(fp)
 1013dc4:	e0bffe15 	stw	r2,-8(fp)
 1013dc8:	00000b06 	br	1013df8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1013dcc:	1013e100 	call	1013e10 <alt_get_errno>
 1013dd0:	1007883a 	mov	r3,r2
 1013dd4:	00800344 	movi	r2,13
 1013dd8:	18800015 	stw	r2,0(r3)
 1013ddc:	00000406 	br	1013df0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1013de0:	1013e100 	call	1013e10 <alt_get_errno>
 1013de4:	1007883a 	mov	r3,r2
 1013de8:	00801444 	movi	r2,81
 1013dec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1013df0:	00bfffc4 	movi	r2,-1
 1013df4:	e0bffe15 	stw	r2,-8(fp)
 1013df8:	e0bffe17 	ldw	r2,-8(fp)
}
 1013dfc:	e037883a 	mov	sp,fp
 1013e00:	dfc00117 	ldw	ra,4(sp)
 1013e04:	df000017 	ldw	fp,0(sp)
 1013e08:	dec00204 	addi	sp,sp,8
 1013e0c:	f800283a 	ret

01013e10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013e10:	defffd04 	addi	sp,sp,-12
 1013e14:	dfc00215 	stw	ra,8(sp)
 1013e18:	df000115 	stw	fp,4(sp)
 1013e1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013e20:	008040b4 	movhi	r2,258
 1013e24:	1084ab04 	addi	r2,r2,4780
 1013e28:	10800017 	ldw	r2,0(r2)
 1013e2c:	1005003a 	cmpeq	r2,r2,zero
 1013e30:	1000061e 	bne	r2,zero,1013e4c <alt_get_errno+0x3c>
 1013e34:	008040b4 	movhi	r2,258
 1013e38:	1084ab04 	addi	r2,r2,4780
 1013e3c:	10800017 	ldw	r2,0(r2)
 1013e40:	103ee83a 	callr	r2
 1013e44:	e0bfff15 	stw	r2,-4(fp)
 1013e48:	00000306 	br	1013e58 <alt_get_errno+0x48>
 1013e4c:	008040b4 	movhi	r2,258
 1013e50:	108bac04 	addi	r2,r2,11952
 1013e54:	e0bfff15 	stw	r2,-4(fp)
 1013e58:	e0bfff17 	ldw	r2,-4(fp)
}
 1013e5c:	e037883a 	mov	sp,fp
 1013e60:	dfc00117 	ldw	ra,4(sp)
 1013e64:	df000017 	ldw	fp,0(sp)
 1013e68:	dec00204 	addi	sp,sp,8
 1013e6c:	f800283a 	ret

01013e70 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 1013e70:	deffdf04 	addi	sp,sp,-132
 1013e74:	dfc02015 	stw	ra,128(sp)
 1013e78:	df001f15 	stw	fp,124(sp)
 1013e7c:	df001f04 	addi	fp,sp,124
 1013e80:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 1013e84:	e17fe204 	addi	r5,fp,-120
 1013e88:	01003fc4 	movi	r4,255
 1013e8c:	101bcc40 	call	101bcc4 <OSTaskQuery>
 1013e90:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 1013e94:	e0bffe83 	ldbu	r2,-6(fp)
 1013e98:	10803fcc 	andi	r2,r2,255
 1013e9c:	1004c03a 	cmpne	r2,r2,zero
 1013ea0:	1000191e 	bne	r2,zero,1013f08 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 1013ea4:	e0bfee83 	ldbu	r2,-70(fp)
 1013ea8:	10803fcc 	andi	r2,r2,255
 1013eac:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 1013eb0:	d1272317 	ldw	r4,-25460(gp)
 1013eb4:	e17ffd04 	addi	r5,fp,-12
 1013eb8:	101a2100 	call	101a210 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 1013ebc:	e0bffe43 	ldbu	r2,-7(fp)
 1013ec0:	10803fcc 	andi	r2,r2,255
 1013ec4:	1005003a 	cmpeq	r2,r2,zero
 1013ec8:	1000071e 	bne	r2,zero,1013ee8 <__env_lock+0x78>
 1013ecc:	d0e01b17 	ldw	r3,-32660(gp)
 1013ed0:	e0bfe117 	ldw	r2,-124(fp)
 1013ed4:	10c0041e 	bne	r2,r3,1013ee8 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 1013ed8:	d0a72217 	ldw	r2,-25464(gp)
 1013edc:	10800044 	addi	r2,r2,1
 1013ee0:	d0a72215 	stw	r2,-25464(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 1013ee4:	00000806 	br	1013f08 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 1013ee8:	d1272317 	ldw	r4,-25460(gp)
 1013eec:	e1bffe84 	addi	r6,fp,-6
 1013ef0:	000b883a 	mov	r5,zero
 1013ef4:	1019cf00 	call	1019cf0 <OSSemPend>
    locks  = 1;
 1013ef8:	00800044 	movi	r2,1
 1013efc:	d0a72215 	stw	r2,-25464(gp)
    lockid = id;
 1013f00:	e0bfe117 	ldw	r2,-124(fp)
 1013f04:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 1013f08:	e037883a 	mov	sp,fp
 1013f0c:	dfc00117 	ldw	ra,4(sp)
 1013f10:	df000017 	ldw	fp,0(sp)
 1013f14:	dec00204 	addi	sp,sp,8
 1013f18:	f800283a 	ret

01013f1c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 1013f1c:	defffd04 	addi	sp,sp,-12
 1013f20:	dfc00215 	stw	ra,8(sp)
 1013f24:	df000115 	stw	fp,4(sp)
 1013f28:	df000104 	addi	fp,sp,4
 1013f2c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 1013f30:	d0a72217 	ldw	r2,-25464(gp)
 1013f34:	1005003a 	cmpeq	r2,r2,zero
 1013f38:	10000a1e 	bne	r2,zero,1013f64 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 1013f3c:	d0a72217 	ldw	r2,-25464(gp)
 1013f40:	10bfffc4 	addi	r2,r2,-1
 1013f44:	d0a72215 	stw	r2,-25464(gp)
 1013f48:	d0a72217 	ldw	r2,-25464(gp)
 1013f4c:	1004c03a 	cmpne	r2,r2,zero
 1013f50:	1000041e 	bne	r2,zero,1013f64 <__env_unlock+0x48>
  {
    lockid = -1;
 1013f54:	00bfffc4 	movi	r2,-1
 1013f58:	d0a01b15 	stw	r2,-32660(gp)
    OSSemPost( alt_envsem );
 1013f5c:	d1272317 	ldw	r4,-25460(gp)
 1013f60:	101a0e80 	call	101a0e8 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 1013f64:	e037883a 	mov	sp,fp
 1013f68:	dfc00117 	ldw	ra,4(sp)
 1013f6c:	df000017 	ldw	fp,0(sp)
 1013f70:	dec00204 	addi	sp,sp,8
 1013f74:	f800283a 	ret

01013f78 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 1013f78:	deffdb04 	addi	sp,sp,-148
 1013f7c:	dfc02415 	stw	ra,144(sp)
 1013f80:	df002315 	stw	fp,140(sp)
 1013f84:	df002304 	addi	fp,sp,140
 1013f88:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1013f8c:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 1013f90:	008040b4 	movhi	r2,258
 1013f94:	108bb844 	addi	r2,r2,12001
 1013f98:	10800003 	ldbu	r2,0(r2)
 1013f9c:	10803fcc 	andi	r2,r2,255
 1013fa0:	10800058 	cmpnei	r2,r2,1
 1013fa4:	1000311e 	bne	r2,zero,101406c <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 1013fa8:	e17fe204 	addi	r5,fp,-120
 1013fac:	01003fc4 	movi	r4,255
 1013fb0:	101bcc40 	call	101bcc4 <OSTaskQuery>
 1013fb4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 1013fb8:	e0bffe83 	ldbu	r2,-6(fp)
 1013fbc:	10803fcc 	andi	r2,r2,255
 1013fc0:	1004c03a 	cmpne	r2,r2,zero
 1013fc4:	1000291e 	bne	r2,zero,101406c <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 1013fc8:	e0bfee83 	ldbu	r2,-70(fp)
 1013fcc:	10803fcc 	andi	r2,r2,255
 1013fd0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 1013fd4:	d1272517 	ldw	r4,-25452(gp)
 1013fd8:	e17ffd04 	addi	r5,fp,-12
 1013fdc:	101a2100 	call	101a210 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013fe0:	0005303a 	rdctl	r2,status
 1013fe4:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013fe8:	e0ffdf17 	ldw	r3,-132(fp)
 1013fec:	00bfff84 	movi	r2,-2
 1013ff0:	1884703a 	and	r2,r3,r2
 1013ff4:	1001703a 	wrctl	status,r2
  
  return context;
 1013ff8:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 1013ffc:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 1014000:	e0bffd0b 	ldhu	r2,-12(fp)
 1014004:	10bfffcc 	andi	r2,r2,65535
 1014008:	1004c03a 	cmpne	r2,r2,zero
 101400c:	10000b1e 	bne	r2,zero,101403c <__malloc_lock+0xc4>
 1014010:	d0e01c17 	ldw	r3,-32656(gp)
 1014014:	e0bfe117 	ldw	r2,-124(fp)
 1014018:	10c0081e 	bne	r2,r3,101403c <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 101401c:	d0a72417 	ldw	r2,-25456(gp)
 1014020:	10800044 	addi	r2,r2,1
 1014024:	d0a72415 	stw	r2,-25456(gp)
 1014028:	e0bfe017 	ldw	r2,-128(fp)
 101402c:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014030:	e0bfde17 	ldw	r2,-136(fp)
 1014034:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 1014038:	00000c06 	br	101406c <__malloc_lock+0xf4>
 101403c:	e0bfe017 	ldw	r2,-128(fp)
 1014040:	e0bfdd15 	stw	r2,-140(fp)
 1014044:	e0bfdd17 	ldw	r2,-140(fp)
 1014048:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 101404c:	d1272517 	ldw	r4,-25452(gp)
 1014050:	e1bffe84 	addi	r6,fp,-6
 1014054:	000b883a 	mov	r5,zero
 1014058:	1019cf00 	call	1019cf0 <OSSemPend>
    locks  = 1;
 101405c:	00800044 	movi	r2,1
 1014060:	d0a72415 	stw	r2,-25456(gp)
    lockid = id;
 1014064:	e0bfe117 	ldw	r2,-124(fp)
 1014068:	d0a01c15 	stw	r2,-32656(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 101406c:	e037883a 	mov	sp,fp
 1014070:	dfc00117 	ldw	ra,4(sp)
 1014074:	df000017 	ldw	fp,0(sp)
 1014078:	dec00204 	addi	sp,sp,8
 101407c:	f800283a 	ret

01014080 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1014080:	defff804 	addi	sp,sp,-32
 1014084:	dfc00715 	stw	ra,28(sp)
 1014088:	df000615 	stw	fp,24(sp)
 101408c:	df000604 	addi	fp,sp,24
 1014090:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014094:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 1014098:	008040b4 	movhi	r2,258
 101409c:	108bb844 	addi	r2,r2,12001
 10140a0:	10800003 	ldbu	r2,0(r2)
 10140a4:	10803fcc 	andi	r2,r2,255
 10140a8:	10800058 	cmpnei	r2,r2,1
 10140ac:	1000231e 	bne	r2,zero,101413c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10140b0:	0005303a 	rdctl	r2,status
 10140b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10140b8:	e0fffd17 	ldw	r3,-12(fp)
 10140bc:	00bfff84 	movi	r2,-2
 10140c0:	1884703a 	and	r2,r3,r2
 10140c4:	1001703a 	wrctl	status,r2
  
  return context;
 10140c8:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 10140cc:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 10140d0:	d0a72417 	ldw	r2,-25456(gp)
 10140d4:	1004c03a 	cmpne	r2,r2,zero
 10140d8:	1000051e 	bne	r2,zero,10140f0 <__malloc_unlock+0x70>
 10140dc:	e0bffe17 	ldw	r2,-8(fp)
 10140e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10140e4:	e0bffc17 	ldw	r2,-16(fp)
 10140e8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 10140ec:	00001306 	br	101413c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 10140f0:	d0a72417 	ldw	r2,-25456(gp)
 10140f4:	10bfffc4 	addi	r2,r2,-1
 10140f8:	d0a72415 	stw	r2,-25456(gp)
 10140fc:	d0a72417 	ldw	r2,-25456(gp)
 1014100:	1004c03a 	cmpne	r2,r2,zero
 1014104:	1000091e 	bne	r2,zero,101412c <__malloc_unlock+0xac>
  {
    lockid = -1;
 1014108:	00bfffc4 	movi	r2,-1
 101410c:	d0a01c15 	stw	r2,-32656(gp)
 1014110:	e0bffe17 	ldw	r2,-8(fp)
 1014114:	e0bffb15 	stw	r2,-20(fp)
 1014118:	e0bffb17 	ldw	r2,-20(fp)
 101411c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 1014120:	d1272517 	ldw	r4,-25452(gp)
 1014124:	101a0e80 	call	101a0e8 <OSSemPost>
 1014128:	00000406 	br	101413c <__malloc_unlock+0xbc>
 101412c:	e0bffe17 	ldw	r2,-8(fp)
 1014130:	e0bffa15 	stw	r2,-24(fp)
 1014134:	e0bffa17 	ldw	r2,-24(fp)
 1014138:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 101413c:	e037883a 	mov	sp,fp
 1014140:	dfc00117 	ldw	ra,4(sp)
 1014144:	df000017 	ldw	fp,0(sp)
 1014148:	dec00204 	addi	sp,sp,8
 101414c:	f800283a 	ret

01014150 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 1014150:	defff604 	addi	sp,sp,-40
 1014154:	dfc00915 	stw	ra,36(sp)
 1014158:	df000815 	stw	fp,32(sp)
 101415c:	df000804 	addi	fp,sp,32
 1014160:	e13ffc15 	stw	r4,-16(fp)
 1014164:	e17ffd15 	stw	r5,-12(fp)
 1014168:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101416c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1014170:	e0bffe17 	ldw	r2,-8(fp)
 1014174:	1004c03a 	cmpne	r2,r2,zero
 1014178:	1000021e 	bne	r2,zero,1014184 <OSEventNameGet+0x34>
        return (0);
 101417c:	e03fff15 	stw	zero,-4(fp)
 1014180:	00003906 	br	1014268 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 1014184:	e0bffc17 	ldw	r2,-16(fp)
 1014188:	1004c03a 	cmpne	r2,r2,zero
 101418c:	1000051e 	bne	r2,zero,10141a4 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1014190:	e0fffe17 	ldw	r3,-8(fp)
 1014194:	00800104 	movi	r2,4
 1014198:	18800005 	stb	r2,0(r3)
        return (0);
 101419c:	e03fff15 	stw	zero,-4(fp)
 10141a0:	00003106 	br	1014268 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 10141a4:	e0bffd17 	ldw	r2,-12(fp)
 10141a8:	1004c03a 	cmpne	r2,r2,zero
 10141ac:	1000051e 	bne	r2,zero,10141c4 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 10141b0:	e0fffe17 	ldw	r3,-8(fp)
 10141b4:	00800304 	movi	r2,12
 10141b8:	18800005 	stb	r2,0(r3)
        return (0);
 10141bc:	e03fff15 	stw	zero,-4(fp)
 10141c0:	00002906 	br	1014268 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10141c4:	d0a73403 	ldbu	r2,-25392(gp)
 10141c8:	10803fcc 	andi	r2,r2,255
 10141cc:	1005003a 	cmpeq	r2,r2,zero
 10141d0:	1000051e 	bne	r2,zero,10141e8 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 10141d4:	e0fffe17 	ldw	r3,-8(fp)
 10141d8:	00800444 	movi	r2,17
 10141dc:	18800005 	stb	r2,0(r3)
        return (0);
 10141e0:	e03fff15 	stw	zero,-4(fp)
 10141e4:	00002006 	br	1014268 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 10141e8:	e0bffc17 	ldw	r2,-16(fp)
 10141ec:	10800003 	ldbu	r2,0(r2)
 10141f0:	10803fcc 	andi	r2,r2,255
 10141f4:	10bfffc4 	addi	r2,r2,-1
 10141f8:	10800128 	cmpgeui	r2,r2,4
 10141fc:	1000161e 	bne	r2,zero,1014258 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014200:	0005303a 	rdctl	r2,status
 1014204:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014208:	e0fff917 	ldw	r3,-28(fp)
 101420c:	00bfff84 	movi	r2,-2
 1014210:	1884703a 	and	r2,r3,r2
 1014214:	1001703a 	wrctl	status,r2
  
  return context;
 1014218:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 101421c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 1014220:	e0bffc17 	ldw	r2,-16(fp)
 1014224:	11400384 	addi	r5,r2,14
 1014228:	e13ffd17 	ldw	r4,-12(fp)
 101422c:	1015cd40 	call	1015cd4 <OS_StrCopy>
 1014230:	e0bffb05 	stb	r2,-20(fp)
 1014234:	e0bffa17 	ldw	r2,-24(fp)
 1014238:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101423c:	e0bff817 	ldw	r2,-32(fp)
 1014240:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1014244:	e0bffe17 	ldw	r2,-8(fp)
 1014248:	10000005 	stb	zero,0(r2)
    return (len);
 101424c:	e0bffb03 	ldbu	r2,-20(fp)
 1014250:	e0bfff15 	stw	r2,-4(fp)
 1014254:	00000406 	br	1014268 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 1014258:	e0fffe17 	ldw	r3,-8(fp)
 101425c:	00800044 	movi	r2,1
 1014260:	18800005 	stb	r2,0(r3)
             return (0);
 1014264:	e03fff15 	stw	zero,-4(fp)
 1014268:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 101426c:	e037883a 	mov	sp,fp
 1014270:	dfc00117 	ldw	ra,4(sp)
 1014274:	df000017 	ldw	fp,0(sp)
 1014278:	dec00204 	addi	sp,sp,8
 101427c:	f800283a 	ret

01014280 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 1014280:	defff604 	addi	sp,sp,-40
 1014284:	dfc00915 	stw	ra,36(sp)
 1014288:	df000815 	stw	fp,32(sp)
 101428c:	df000804 	addi	fp,sp,32
 1014290:	e13ffd15 	stw	r4,-12(fp)
 1014294:	e17ffe15 	stw	r5,-8(fp)
 1014298:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101429c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 10142a0:	e0bfff17 	ldw	r2,-4(fp)
 10142a4:	1005003a 	cmpeq	r2,r2,zero
 10142a8:	1000411e 	bne	r2,zero,10143b0 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 10142ac:	e0bffd17 	ldw	r2,-12(fp)
 10142b0:	1004c03a 	cmpne	r2,r2,zero
 10142b4:	1000041e 	bne	r2,zero,10142c8 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 10142b8:	e0ffff17 	ldw	r3,-4(fp)
 10142bc:	00800104 	movi	r2,4
 10142c0:	18800005 	stb	r2,0(r3)
        return;
 10142c4:	00003a06 	br	10143b0 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 10142c8:	e0bffe17 	ldw	r2,-8(fp)
 10142cc:	1004c03a 	cmpne	r2,r2,zero
 10142d0:	1000041e 	bne	r2,zero,10142e4 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 10142d4:	e0ffff17 	ldw	r3,-4(fp)
 10142d8:	00800304 	movi	r2,12
 10142dc:	18800005 	stb	r2,0(r3)
        return;
 10142e0:	00003306 	br	10143b0 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10142e4:	d0a73403 	ldbu	r2,-25392(gp)
 10142e8:	10803fcc 	andi	r2,r2,255
 10142ec:	1005003a 	cmpeq	r2,r2,zero
 10142f0:	1000041e 	bne	r2,zero,1014304 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 10142f4:	e0ffff17 	ldw	r3,-4(fp)
 10142f8:	00800484 	movi	r2,18
 10142fc:	18800005 	stb	r2,0(r3)
        return;
 1014300:	00002b06 	br	10143b0 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 1014304:	e0bffd17 	ldw	r2,-12(fp)
 1014308:	10800003 	ldbu	r2,0(r2)
 101430c:	10803fcc 	andi	r2,r2,255
 1014310:	10bfffc4 	addi	r2,r2,-1
 1014314:	10800128 	cmpgeui	r2,r2,4
 1014318:	10000f1e 	bne	r2,zero,1014358 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101431c:	0005303a 	rdctl	r2,status
 1014320:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014324:	e0fffa17 	ldw	r3,-24(fp)
 1014328:	00bfff84 	movi	r2,-2
 101432c:	1884703a 	and	r2,r3,r2
 1014330:	1001703a 	wrctl	status,r2
  
  return context;
 1014334:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 1014338:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 101433c:	e13ffe17 	ldw	r4,-8(fp)
 1014340:	1015d540 	call	1015d54 <OS_StrLen>
 1014344:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 1014348:	e0bffc03 	ldbu	r2,-16(fp)
 101434c:	10800828 	cmpgeui	r2,r2,32
 1014350:	1000051e 	bne	r2,zero,1014368 <OSEventNameSet+0xe8>
 1014354:	00000c06 	br	1014388 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 1014358:	e0ffff17 	ldw	r3,-4(fp)
 101435c:	00800044 	movi	r2,1
 1014360:	18800005 	stb	r2,0(r3)
             return;
 1014364:	00001206 	br	10143b0 <OSEventNameSet+0x130>
 1014368:	e0bffb17 	ldw	r2,-20(fp)
 101436c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014370:	e0bff917 	ldw	r2,-28(fp)
 1014374:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 1014378:	e0ffff17 	ldw	r3,-4(fp)
 101437c:	008002c4 	movi	r2,11
 1014380:	18800005 	stb	r2,0(r3)
        return;
 1014384:	00000a06 	br	10143b0 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 1014388:	e0bffd17 	ldw	r2,-12(fp)
 101438c:	11000384 	addi	r4,r2,14
 1014390:	e17ffe17 	ldw	r5,-8(fp)
 1014394:	1015cd40 	call	1015cd4 <OS_StrCopy>
 1014398:	e0bffb17 	ldw	r2,-20(fp)
 101439c:	e0bff815 	stw	r2,-32(fp)
 10143a0:	e0bff817 	ldw	r2,-32(fp)
 10143a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10143a8:	e0bfff17 	ldw	r2,-4(fp)
 10143ac:	10000005 	stb	zero,0(r2)
}
 10143b0:	e037883a 	mov	sp,fp
 10143b4:	dfc00117 	ldw	ra,4(sp)
 10143b8:	df000017 	ldw	fp,0(sp)
 10143bc:	dec00204 	addi	sp,sp,8
 10143c0:	f800283a 	ret

010143c4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 10143c4:	deffe704 	addi	sp,sp,-100
 10143c8:	dfc01815 	stw	ra,96(sp)
 10143cc:	df001715 	stw	fp,92(sp)
 10143d0:	df001704 	addi	fp,sp,92
 10143d4:	e13ff615 	stw	r4,-40(fp)
 10143d8:	e17ff715 	stw	r5,-36(fp)
 10143dc:	e1bff815 	stw	r6,-32(fp)
 10143e0:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 10143e4:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 10143e8:	e0800217 	ldw	r2,8(fp)
 10143ec:	1004c03a 	cmpne	r2,r2,zero
 10143f0:	1000021e 	bne	r2,zero,10143fc <OSEventPendMulti+0x38>
        return (0);
 10143f4:	e03fff15 	stw	zero,-4(fp)
 10143f8:	00019906 	br	1014a60 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 10143fc:	e0bff617 	ldw	r2,-40(fp)
 1014400:	1004c03a 	cmpne	r2,r2,zero
 1014404:	1000051e 	bne	r2,zero,101441c <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 1014408:	e0c00217 	ldw	r3,8(fp)
 101440c:	00800104 	movi	r2,4
 1014410:	18800005 	stb	r2,0(r3)
        return (0);
 1014414:	e03fff15 	stw	zero,-4(fp)
 1014418:	00019106 	br	1014a60 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 101441c:	e0bff717 	ldw	r2,-36(fp)
 1014420:	1004c03a 	cmpne	r2,r2,zero
 1014424:	1000051e 	bne	r2,zero,101443c <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 1014428:	e0c00217 	ldw	r3,8(fp)
 101442c:	00800104 	movi	r2,4
 1014430:	18800005 	stb	r2,0(r3)
        return (0);
 1014434:	e03fff15 	stw	zero,-4(fp)
 1014438:	00018906 	br	1014a60 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 101443c:	e0bff817 	ldw	r2,-32(fp)
 1014440:	1004c03a 	cmpne	r2,r2,zero
 1014444:	1000051e 	bne	r2,zero,101445c <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 1014448:	e0c00217 	ldw	r3,8(fp)
 101444c:	00800104 	movi	r2,4
 1014450:	18800005 	stb	r2,0(r3)
        return (0);
 1014454:	e03fff15 	stw	zero,-4(fp)
 1014458:	00018106 	br	1014a60 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 101445c:	e0bff717 	ldw	r2,-36(fp)
 1014460:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 1014464:	e0bff617 	ldw	r2,-40(fp)
 1014468:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 101446c:	e0bff517 	ldw	r2,-44(fp)
 1014470:	10800017 	ldw	r2,0(r2)
 1014474:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 1014478:	00001806 	br	10144dc <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 101447c:	e0bff417 	ldw	r2,-48(fp)
 1014480:	10800003 	ldbu	r2,0(r2)
 1014484:	10803fcc 	andi	r2,r2,255
 1014488:	e0bffe15 	stw	r2,-8(fp)
 101448c:	e0fffe17 	ldw	r3,-8(fp)
 1014490:	188000a0 	cmpeqi	r2,r3,2
 1014494:	10000b1e 	bne	r2,zero,10144c4 <OSEventPendMulti+0x100>
 1014498:	e0fffe17 	ldw	r3,-8(fp)
 101449c:	188000e0 	cmpeqi	r2,r3,3
 10144a0:	1000081e 	bne	r2,zero,10144c4 <OSEventPendMulti+0x100>
 10144a4:	e0fffe17 	ldw	r3,-8(fp)
 10144a8:	18800060 	cmpeqi	r2,r3,1
 10144ac:	1000051e 	bne	r2,zero,10144c4 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 10144b0:	e0c00217 	ldw	r3,8(fp)
 10144b4:	00800044 	movi	r2,1
 10144b8:	18800005 	stb	r2,0(r3)
                 return (0);
 10144bc:	e03fff15 	stw	zero,-4(fp)
 10144c0:	00016706 	br	1014a60 <OSEventPendMulti+0x69c>
        }
        pevents++;
 10144c4:	e0bff517 	ldw	r2,-44(fp)
 10144c8:	10800104 	addi	r2,r2,4
 10144cc:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 10144d0:	e0bff517 	ldw	r2,-44(fp)
 10144d4:	10800017 	ldw	r2,0(r2)
 10144d8:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 10144dc:	e0bff417 	ldw	r2,-48(fp)
 10144e0:	1004c03a 	cmpne	r2,r2,zero
 10144e4:	103fe51e 	bne	r2,zero,101447c <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 10144e8:	d0a73403 	ldbu	r2,-25392(gp)
 10144ec:	10803fcc 	andi	r2,r2,255
 10144f0:	1005003a 	cmpeq	r2,r2,zero
 10144f4:	1000051e 	bne	r2,zero,101450c <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 10144f8:	e0c00217 	ldw	r3,8(fp)
 10144fc:	00800084 	movi	r2,2
 1014500:	18800005 	stb	r2,0(r3)
        return (0);
 1014504:	e03fff15 	stw	zero,-4(fp)
 1014508:	00015506 	br	1014a60 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 101450c:	d0a72603 	ldbu	r2,-25448(gp)
 1014510:	10803fcc 	andi	r2,r2,255
 1014514:	1005003a 	cmpeq	r2,r2,zero
 1014518:	1000051e 	bne	r2,zero,1014530 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 101451c:	e0c00217 	ldw	r3,8(fp)
 1014520:	00800344 	movi	r2,13
 1014524:	18800005 	stb	r2,0(r3)
        return (0);
 1014528:	e03fff15 	stw	zero,-4(fp)
 101452c:	00014c06 	br	1014a60 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014530:	0005303a 	rdctl	r2,status
 1014534:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014538:	e0ffef17 	ldw	r3,-68(fp)
 101453c:	00bfff84 	movi	r2,-2
 1014540:	1884703a 	and	r2,r3,r2
 1014544:	1001703a 	wrctl	status,r2
  
  return context;
 1014548:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 101454c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 1014550:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 1014554:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 1014558:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 101455c:	e0bff617 	ldw	r2,-40(fp)
 1014560:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 1014564:	e0bff517 	ldw	r2,-44(fp)
 1014568:	10800017 	ldw	r2,0(r2)
 101456c:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 1014570:	00008f06 	br	10147b0 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 1014574:	e0bff417 	ldw	r2,-48(fp)
 1014578:	10800003 	ldbu	r2,0(r2)
 101457c:	10803fcc 	andi	r2,r2,255
 1014580:	e0bffd15 	stw	r2,-12(fp)
 1014584:	e0fffd17 	ldw	r3,-12(fp)
 1014588:	188000a0 	cmpeqi	r2,r3,2
 101458c:	1000441e 	bne	r2,zero,10146a0 <OSEventPendMulti+0x2dc>
 1014590:	e0fffd17 	ldw	r3,-12(fp)
 1014594:	188000e0 	cmpeqi	r2,r3,3
 1014598:	1000041e 	bne	r2,zero,10145ac <OSEventPendMulti+0x1e8>
 101459c:	e0fffd17 	ldw	r3,-12(fp)
 10145a0:	18800060 	cmpeqi	r2,r3,1
 10145a4:	1000211e 	bne	r2,zero,101462c <OSEventPendMulti+0x268>
 10145a8:	00006f06 	br	1014768 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 10145ac:	e0bff417 	ldw	r2,-48(fp)
 10145b0:	1080020b 	ldhu	r2,8(r2)
 10145b4:	10bfffcc 	andi	r2,r2,65535
 10145b8:	1005003a 	cmpeq	r2,r2,zero
 10145bc:	1000171e 	bne	r2,zero,101461c <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 10145c0:	e0bff417 	ldw	r2,-48(fp)
 10145c4:	1080020b 	ldhu	r2,8(r2)
 10145c8:	10bfffc4 	addi	r2,r2,-1
 10145cc:	1007883a 	mov	r3,r2
 10145d0:	e0bff417 	ldw	r2,-48(fp)
 10145d4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 10145d8:	e0fff717 	ldw	r3,-36(fp)
 10145dc:	e0bff417 	ldw	r2,-48(fp)
 10145e0:	18800015 	stw	r2,0(r3)
 10145e4:	e0bff717 	ldw	r2,-36(fp)
 10145e8:	10800104 	addi	r2,r2,4
 10145ec:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 10145f0:	00800044 	movi	r2,1
 10145f4:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 10145f8:	e0bff817 	ldw	r2,-32(fp)
 10145fc:	10000015 	stw	zero,0(r2)
 1014600:	e0bff817 	ldw	r2,-32(fp)
 1014604:	10800104 	addi	r2,r2,4
 1014608:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 101460c:	e0bff18b 	ldhu	r2,-58(fp)
 1014610:	10800044 	addi	r2,r2,1
 1014614:	e0bff18d 	sth	r2,-58(fp)
 1014618:	00005f06 	br	1014798 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 101461c:	e0bff103 	ldbu	r2,-60(fp)
 1014620:	10800054 	ori	r2,r2,1
 1014624:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 1014628:	00005b06 	br	1014798 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 101462c:	e0bff417 	ldw	r2,-48(fp)
 1014630:	10800117 	ldw	r2,4(r2)
 1014634:	1005003a 	cmpeq	r2,r2,zero
 1014638:	1000151e 	bne	r2,zero,1014690 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 101463c:	e0bff417 	ldw	r2,-48(fp)
 1014640:	10c00117 	ldw	r3,4(r2)
 1014644:	e0bff817 	ldw	r2,-32(fp)
 1014648:	10c00015 	stw	r3,0(r2)
 101464c:	e0bff817 	ldw	r2,-32(fp)
 1014650:	10800104 	addi	r2,r2,4
 1014654:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 1014658:	e0bff417 	ldw	r2,-48(fp)
 101465c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 1014660:	e0fff717 	ldw	r3,-36(fp)
 1014664:	e0bff417 	ldw	r2,-48(fp)
 1014668:	18800015 	stw	r2,0(r3)
 101466c:	e0bff717 	ldw	r2,-36(fp)
 1014670:	10800104 	addi	r2,r2,4
 1014674:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 1014678:	00800044 	movi	r2,1
 101467c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 1014680:	e0bff18b 	ldhu	r2,-58(fp)
 1014684:	10800044 	addi	r2,r2,1
 1014688:	e0bff18d 	sth	r2,-58(fp)
 101468c:	00004206 	br	1014798 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 1014690:	e0bff103 	ldbu	r2,-60(fp)
 1014694:	10800094 	ori	r2,r2,2
 1014698:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 101469c:	00003e06 	br	1014798 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 10146a0:	e0bff417 	ldw	r2,-48(fp)
 10146a4:	10800117 	ldw	r2,4(r2)
 10146a8:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 10146ac:	e0bff317 	ldw	r2,-52(fp)
 10146b0:	1080058b 	ldhu	r2,22(r2)
 10146b4:	10bfffcc 	andi	r2,r2,65535
 10146b8:	1005003a 	cmpeq	r2,r2,zero
 10146bc:	1000261e 	bne	r2,zero,1014758 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 10146c0:	e0bff317 	ldw	r2,-52(fp)
 10146c4:	11000417 	ldw	r4,16(r2)
 10146c8:	20c00017 	ldw	r3,0(r4)
 10146cc:	e0bff817 	ldw	r2,-32(fp)
 10146d0:	10c00015 	stw	r3,0(r2)
 10146d4:	e0bff817 	ldw	r2,-32(fp)
 10146d8:	10800104 	addi	r2,r2,4
 10146dc:	e0bff815 	stw	r2,-32(fp)
 10146e0:	20c00104 	addi	r3,r4,4
 10146e4:	e0bff317 	ldw	r2,-52(fp)
 10146e8:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 10146ec:	e0bff317 	ldw	r2,-52(fp)
 10146f0:	10c00417 	ldw	r3,16(r2)
 10146f4:	e0bff317 	ldw	r2,-52(fp)
 10146f8:	10800217 	ldw	r2,8(r2)
 10146fc:	1880041e 	bne	r3,r2,1014710 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 1014700:	e0bff317 	ldw	r2,-52(fp)
 1014704:	10c00117 	ldw	r3,4(r2)
 1014708:	e0bff317 	ldw	r2,-52(fp)
 101470c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 1014710:	e0bff317 	ldw	r2,-52(fp)
 1014714:	1080058b 	ldhu	r2,22(r2)
 1014718:	10bfffc4 	addi	r2,r2,-1
 101471c:	1007883a 	mov	r3,r2
 1014720:	e0bff317 	ldw	r2,-52(fp)
 1014724:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 1014728:	e0fff717 	ldw	r3,-36(fp)
 101472c:	e0bff417 	ldw	r2,-48(fp)
 1014730:	18800015 	stw	r2,0(r3)
 1014734:	e0bff717 	ldw	r2,-36(fp)
 1014738:	10800104 	addi	r2,r2,4
 101473c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 1014740:	00800044 	movi	r2,1
 1014744:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 1014748:	e0bff18b 	ldhu	r2,-58(fp)
 101474c:	10800044 	addi	r2,r2,1
 1014750:	e0bff18d 	sth	r2,-58(fp)
 1014754:	00001006 	br	1014798 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 1014758:	e0bff103 	ldbu	r2,-60(fp)
 101475c:	10800114 	ori	r2,r2,4
 1014760:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 1014764:	00000c06 	br	1014798 <OSEventPendMulti+0x3d4>
 1014768:	e0bff017 	ldw	r2,-64(fp)
 101476c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014770:	e0bfee17 	ldw	r2,-72(fp)
 1014774:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 1014778:	e0bff717 	ldw	r2,-36(fp)
 101477c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 1014780:	e0c00217 	ldw	r3,8(fp)
 1014784:	00800044 	movi	r2,1
 1014788:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 101478c:	e0bff18b 	ldhu	r2,-58(fp)
 1014790:	e0bfff15 	stw	r2,-4(fp)
 1014794:	0000b206 	br	1014a60 <OSEventPendMulti+0x69c>
        }
        pevents++;
 1014798:	e0bff517 	ldw	r2,-44(fp)
 101479c:	10800104 	addi	r2,r2,4
 10147a0:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 10147a4:	e0bff517 	ldw	r2,-44(fp)
 10147a8:	10800017 	ldw	r2,0(r2)
 10147ac:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 10147b0:	e0bff417 	ldw	r2,-48(fp)
 10147b4:	1004c03a 	cmpne	r2,r2,zero
 10147b8:	103f6e1e 	bne	r2,zero,1014574 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 10147bc:	e0bff203 	ldbu	r2,-56(fp)
 10147c0:	10800058 	cmpnei	r2,r2,1
 10147c4:	10000b1e 	bne	r2,zero,10147f4 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 10147c8:	e0bff717 	ldw	r2,-36(fp)
 10147cc:	10000015 	stw	zero,0(r2)
 10147d0:	e0bff017 	ldw	r2,-64(fp)
 10147d4:	e0bfed15 	stw	r2,-76(fp)
 10147d8:	e0bfed17 	ldw	r2,-76(fp)
 10147dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 10147e0:	e0800217 	ldw	r2,8(fp)
 10147e4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 10147e8:	e0fff18b 	ldhu	r3,-58(fp)
 10147ec:	e0ffff15 	stw	r3,-4(fp)
 10147f0:	00009b06 	br	1014a60 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 10147f4:	d1273517 	ldw	r4,-25388(gp)
 10147f8:	d0a73517 	ldw	r2,-25388(gp)
 10147fc:	10c00c03 	ldbu	r3,48(r2)
 1014800:	e0bff103 	ldbu	r2,-60(fp)
 1014804:	1884b03a 	or	r2,r3,r2
 1014808:	1007883a 	mov	r3,r2
 101480c:	00bfe004 	movi	r2,-128
 1014810:	1884b03a 	or	r2,r3,r2
 1014814:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1014818:	d0a73517 	ldw	r2,-25388(gp)
 101481c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 1014820:	d0e73517 	ldw	r3,-25388(gp)
 1014824:	e0bff90b 	ldhu	r2,-28(fp)
 1014828:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 101482c:	e13ff617 	ldw	r4,-40(fp)
 1014830:	10153f40 	call	10153f4 <OS_EventTaskWaitMulti>
 1014834:	e0bff017 	ldw	r2,-64(fp)
 1014838:	e0bfec15 	stw	r2,-80(fp)
 101483c:	e0bfec17 	ldw	r2,-80(fp)
 1014840:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 1014844:	1015b900 	call	1015b90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014848:	0005303a 	rdctl	r2,status
 101484c:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014850:	e0ffeb17 	ldw	r3,-84(fp)
 1014854:	00bfff84 	movi	r2,-2
 1014858:	1884703a 	and	r2,r3,r2
 101485c:	1001703a 	wrctl	status,r2
  
  return context;
 1014860:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 1014864:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 1014868:	d0a73517 	ldw	r2,-25388(gp)
 101486c:	10800c43 	ldbu	r2,49(r2)
 1014870:	10803fcc 	andi	r2,r2,255
 1014874:	e0bffc15 	stw	r2,-16(fp)
 1014878:	e0fffc17 	ldw	r3,-16(fp)
 101487c:	1805003a 	cmpeq	r2,r3,zero
 1014880:	1000041e 	bne	r2,zero,1014894 <OSEventPendMulti+0x4d0>
 1014884:	e0fffc17 	ldw	r3,-16(fp)
 1014888:	188000a0 	cmpeqi	r2,r3,2
 101488c:	1000011e 	bne	r2,zero,1014894 <OSEventPendMulti+0x4d0>
 1014890:	00001906 	br	10148f8 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 1014894:	d0a73517 	ldw	r2,-25388(gp)
 1014898:	10800717 	ldw	r2,28(r2)
 101489c:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 10148a0:	e0bff417 	ldw	r2,-48(fp)
 10148a4:	1005003a 	cmpeq	r2,r2,zero
 10148a8:	10000c1e 	bne	r2,zero,10148dc <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 10148ac:	e0fff717 	ldw	r3,-36(fp)
 10148b0:	e0bff417 	ldw	r2,-48(fp)
 10148b4:	18800015 	stw	r2,0(r3)
 10148b8:	e0bff717 	ldw	r2,-36(fp)
 10148bc:	10800104 	addi	r2,r2,4
 10148c0:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 10148c4:	e0bff717 	ldw	r2,-36(fp)
 10148c8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 10148cc:	e0bff18b 	ldhu	r2,-58(fp)
 10148d0:	10800044 	addi	r2,r2,1
 10148d4:	e0bff18d 	sth	r2,-58(fp)
 10148d8:	00000a06 	br	1014904 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 10148dc:	d0a73517 	ldw	r2,-25388(gp)
 10148e0:	00c00044 	movi	r3,1
 10148e4:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 10148e8:	d1273517 	ldw	r4,-25388(gp)
 10148ec:	e17ff617 	ldw	r5,-40(fp)
 10148f0:	10156000 	call	1015600 <OS_EventTaskRemoveMulti>
             }
			 break;
 10148f4:	00000306 	br	1014904 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 10148f8:	d1273517 	ldw	r4,-25388(gp)
 10148fc:	e17ff617 	ldw	r5,-40(fp)
 1014900:	10156000 	call	1015600 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 1014904:	d0a73517 	ldw	r2,-25388(gp)
 1014908:	10800c43 	ldbu	r2,49(r2)
 101490c:	10803fcc 	andi	r2,r2,255
 1014910:	e0bffb15 	stw	r2,-20(fp)
 1014914:	e0fffb17 	ldw	r3,-20(fp)
 1014918:	1805003a 	cmpeq	r2,r3,zero
 101491c:	1000041e 	bne	r2,zero,1014930 <OSEventPendMulti+0x56c>
 1014920:	e0fffb17 	ldw	r3,-20(fp)
 1014924:	188000a0 	cmpeqi	r2,r3,2
 1014928:	10002c1e 	bne	r2,zero,10149dc <OSEventPendMulti+0x618>
 101492c:	00003406 	br	1014a00 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 1014930:	e0bff417 	ldw	r2,-48(fp)
 1014934:	10800003 	ldbu	r2,0(r2)
 1014938:	10803fcc 	andi	r2,r2,255
 101493c:	e0bffa15 	stw	r2,-24(fp)
 1014940:	e0fffa17 	ldw	r3,-24(fp)
 1014944:	18800050 	cmplti	r2,r3,1
 1014948:	1000151e 	bne	r2,zero,10149a0 <OSEventPendMulti+0x5dc>
 101494c:	e0fffa17 	ldw	r3,-24(fp)
 1014950:	188000d0 	cmplti	r2,r3,3
 1014954:	10000a1e 	bne	r2,zero,1014980 <OSEventPendMulti+0x5bc>
 1014958:	e0fffa17 	ldw	r3,-24(fp)
 101495c:	188000e0 	cmpeqi	r2,r3,3
 1014960:	1000011e 	bne	r2,zero,1014968 <OSEventPendMulti+0x5a4>
 1014964:	00000e06 	br	10149a0 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 1014968:	e0bff817 	ldw	r2,-32(fp)
 101496c:	10000015 	stw	zero,0(r2)
 1014970:	e0bff817 	ldw	r2,-32(fp)
 1014974:	10800104 	addi	r2,r2,4
 1014978:	e0bff815 	stw	r2,-32(fp)
                      break;
 101497c:	00001406 	br	10149d0 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 1014980:	d0a73517 	ldw	r2,-25388(gp)
 1014984:	10c00917 	ldw	r3,36(r2)
 1014988:	e0bff817 	ldw	r2,-32(fp)
 101498c:	10c00015 	stw	r3,0(r2)
 1014990:	e0bff817 	ldw	r2,-32(fp)
 1014994:	10800104 	addi	r2,r2,4
 1014998:	e0bff815 	stw	r2,-32(fp)
                      break;
 101499c:	00000c06 	br	10149d0 <OSEventPendMulti+0x60c>
 10149a0:	e0bff017 	ldw	r2,-64(fp)
 10149a4:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10149a8:	e0bfea17 	ldw	r2,-88(fp)
 10149ac:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 10149b0:	e0bff717 	ldw	r2,-36(fp)
 10149b4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 10149b8:	e0c00217 	ldw	r3,8(fp)
 10149bc:	00800044 	movi	r2,1
 10149c0:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 10149c4:	e0bff18b 	ldhu	r2,-58(fp)
 10149c8:	e0bfff15 	stw	r2,-4(fp)
 10149cc:	00002406 	br	1014a60 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 10149d0:	e0800217 	ldw	r2,8(fp)
 10149d4:	10000005 	stb	zero,0(r2)
             break;
 10149d8:	00001106 	br	1014a20 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 10149dc:	e0bff817 	ldw	r2,-32(fp)
 10149e0:	10000015 	stw	zero,0(r2)
 10149e4:	e0bff817 	ldw	r2,-32(fp)
 10149e8:	10800104 	addi	r2,r2,4
 10149ec:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 10149f0:	e0c00217 	ldw	r3,8(fp)
 10149f4:	00800384 	movi	r2,14
 10149f8:	18800005 	stb	r2,0(r3)
             break;
 10149fc:	00000806 	br	1014a20 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 1014a00:	e0bff817 	ldw	r2,-32(fp)
 1014a04:	10000015 	stw	zero,0(r2)
 1014a08:	e0bff817 	ldw	r2,-32(fp)
 1014a0c:	10800104 	addi	r2,r2,4
 1014a10:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 1014a14:	e0c00217 	ldw	r3,8(fp)
 1014a18:	00800284 	movi	r2,10
 1014a1c:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 1014a20:	d0a73517 	ldw	r2,-25388(gp)
 1014a24:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 1014a28:	d0a73517 	ldw	r2,-25388(gp)
 1014a2c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 1014a30:	d0a73517 	ldw	r2,-25388(gp)
 1014a34:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1014a38:	d0a73517 	ldw	r2,-25388(gp)
 1014a3c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 1014a40:	d0a73517 	ldw	r2,-25388(gp)
 1014a44:	10000915 	stw	zero,36(r2)
 1014a48:	e0bff017 	ldw	r2,-64(fp)
 1014a4c:	e0bfe915 	stw	r2,-92(fp)
 1014a50:	e0bfe917 	ldw	r2,-92(fp)
 1014a54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 1014a58:	e0fff18b 	ldhu	r3,-58(fp)
 1014a5c:	e0ffff15 	stw	r3,-4(fp)
 1014a60:	e0bfff17 	ldw	r2,-4(fp)
}
 1014a64:	e037883a 	mov	sp,fp
 1014a68:	dfc00117 	ldw	ra,4(sp)
 1014a6c:	df000017 	ldw	fp,0(sp)
 1014a70:	dec00204 	addi	sp,sp,8
 1014a74:	f800283a 	ret

01014a78 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 1014a78:	defffe04 	addi	sp,sp,-8
 1014a7c:	dfc00115 	stw	ra,4(sp)
 1014a80:	df000015 	stw	fp,0(sp)
 1014a84:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 1014a88:	101e3f80 	call	101e3f8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 1014a8c:	10158480 	call	1015848 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 1014a90:	101588c0 	call	101588c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 1014a94:	10159f00 	call	10159f0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 1014a98:	101576c0 	call	101576c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 1014a9c:	1017aa00 	call	1017aa0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 1014aa0:	10184780 	call	1018478 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 1014aa4:	10197d00 	call	10197d0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 1014aa8:	10158f80 	call	10158f8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 1014aac:	10159740 	call	1015974 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 1014ab0:	101e4140 	call	101e414 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 1014ab4:	10162780 	call	1016278 <OSDebugInit>
#endif
}
 1014ab8:	e037883a 	mov	sp,fp
 1014abc:	dfc00117 	ldw	ra,4(sp)
 1014ac0:	df000017 	ldw	fp,0(sp)
 1014ac4:	dec00204 	addi	sp,sp,8
 1014ac8:	f800283a 	ret

01014acc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 1014acc:	defffc04 	addi	sp,sp,-16
 1014ad0:	df000315 	stw	fp,12(sp)
 1014ad4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1014ad8:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 1014adc:	d0a72643 	ldbu	r2,-25447(gp)
 1014ae0:	10803fcc 	andi	r2,r2,255
 1014ae4:	10800058 	cmpnei	r2,r2,1
 1014ae8:	1000131e 	bne	r2,zero,1014b38 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014aec:	0005303a 	rdctl	r2,status
 1014af0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014af4:	e0fffe17 	ldw	r3,-8(fp)
 1014af8:	00bfff84 	movi	r2,-2
 1014afc:	1884703a 	and	r2,r3,r2
 1014b00:	1001703a 	wrctl	status,r2
  
  return context;
 1014b04:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 1014b08:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 1014b0c:	d0a73403 	ldbu	r2,-25392(gp)
 1014b10:	10803fcc 	andi	r2,r2,255
 1014b14:	10803fe0 	cmpeqi	r2,r2,255
 1014b18:	1000031e 	bne	r2,zero,1014b28 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 1014b1c:	d0a73403 	ldbu	r2,-25392(gp)
 1014b20:	10800044 	addi	r2,r2,1
 1014b24:	d0a73405 	stb	r2,-25392(gp)
 1014b28:	e0bfff17 	ldw	r2,-4(fp)
 1014b2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014b30:	e0bffd17 	ldw	r2,-12(fp)
 1014b34:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 1014b38:	e037883a 	mov	sp,fp
 1014b3c:	df000017 	ldw	fp,0(sp)
 1014b40:	dec00104 	addi	sp,sp,4
 1014b44:	f800283a 	ret

01014b48 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 1014b48:	defffb04 	addi	sp,sp,-20
 1014b4c:	dfc00415 	stw	ra,16(sp)
 1014b50:	df000315 	stw	fp,12(sp)
 1014b54:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1014b58:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 1014b5c:	d0a72643 	ldbu	r2,-25447(gp)
 1014b60:	10803fcc 	andi	r2,r2,255
 1014b64:	10800058 	cmpnei	r2,r2,1
 1014b68:	1000321e 	bne	r2,zero,1014c34 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014b6c:	0005303a 	rdctl	r2,status
 1014b70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014b74:	e0fffe17 	ldw	r3,-8(fp)
 1014b78:	00bfff84 	movi	r2,-2
 1014b7c:	1884703a 	and	r2,r3,r2
 1014b80:	1001703a 	wrctl	status,r2
  
  return context;
 1014b84:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 1014b88:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 1014b8c:	d0a73403 	ldbu	r2,-25392(gp)
 1014b90:	10803fcc 	andi	r2,r2,255
 1014b94:	1005003a 	cmpeq	r2,r2,zero
 1014b98:	1000031e 	bne	r2,zero,1014ba8 <OSIntExit+0x60>
            OSIntNesting--;
 1014b9c:	d0a73403 	ldbu	r2,-25392(gp)
 1014ba0:	10bfffc4 	addi	r2,r2,-1
 1014ba4:	d0a73405 	stb	r2,-25392(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 1014ba8:	d0a73403 	ldbu	r2,-25392(gp)
 1014bac:	10803fcc 	andi	r2,r2,255
 1014bb0:	1004c03a 	cmpne	r2,r2,zero
 1014bb4:	10001b1e 	bne	r2,zero,1014c24 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 1014bb8:	d0a72603 	ldbu	r2,-25448(gp)
 1014bbc:	10803fcc 	andi	r2,r2,255
 1014bc0:	1004c03a 	cmpne	r2,r2,zero
 1014bc4:	1000171e 	bne	r2,zero,1014c24 <OSIntExit+0xdc>
                OS_SchedNew();
 1014bc8:	1015c640 	call	1015c64 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 1014bcc:	d0a72803 	ldbu	r2,-25440(gp)
 1014bd0:	d0e72843 	ldbu	r3,-25439(gp)
 1014bd4:	11003fcc 	andi	r4,r2,255
 1014bd8:	18803fcc 	andi	r2,r3,255
 1014bdc:	20801126 	beq	r4,r2,1014c24 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 1014be0:	d0a72803 	ldbu	r2,-25440(gp)
 1014be4:	10803fcc 	andi	r2,r2,255
 1014be8:	00c040f4 	movhi	r3,259
 1014bec:	18ea5104 	addi	r3,r3,-22204
 1014bf0:	1085883a 	add	r2,r2,r2
 1014bf4:	1085883a 	add	r2,r2,r2
 1014bf8:	10c5883a 	add	r2,r2,r3
 1014bfc:	10800017 	ldw	r2,0(r2)
 1014c00:	d0a73015 	stw	r2,-25408(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 1014c04:	d0e73017 	ldw	r3,-25408(gp)
 1014c08:	18800e17 	ldw	r2,56(r3)
 1014c0c:	10800044 	addi	r2,r2,1
 1014c10:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 1014c14:	d0a72b17 	ldw	r2,-25428(gp)
 1014c18:	10800044 	addi	r2,r2,1
 1014c1c:	d0a72b15 	stw	r2,-25428(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 1014c20:	101df840 	call	101df84 <OSCtxSw>
 1014c24:	e0bfff17 	ldw	r2,-4(fp)
 1014c28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014c2c:	e0bffd17 	ldw	r2,-12(fp)
 1014c30:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 1014c34:	e037883a 	mov	sp,fp
 1014c38:	dfc00117 	ldw	ra,4(sp)
 1014c3c:	df000017 	ldw	fp,0(sp)
 1014c40:	dec00204 	addi	sp,sp,8
 1014c44:	f800283a 	ret

01014c48 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 1014c48:	defffc04 	addi	sp,sp,-16
 1014c4c:	df000315 	stw	fp,12(sp)
 1014c50:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014c54:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 1014c58:	d0a72643 	ldbu	r2,-25447(gp)
 1014c5c:	10803fcc 	andi	r2,r2,255
 1014c60:	10800058 	cmpnei	r2,r2,1
 1014c64:	1000171e 	bne	r2,zero,1014cc4 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014c68:	0005303a 	rdctl	r2,status
 1014c6c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014c70:	e0fffe17 	ldw	r3,-8(fp)
 1014c74:	00bfff84 	movi	r2,-2
 1014c78:	1884703a 	and	r2,r3,r2
 1014c7c:	1001703a 	wrctl	status,r2
  
  return context;
 1014c80:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 1014c84:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 1014c88:	d0a73403 	ldbu	r2,-25392(gp)
 1014c8c:	10803fcc 	andi	r2,r2,255
 1014c90:	1004c03a 	cmpne	r2,r2,zero
 1014c94:	1000071e 	bne	r2,zero,1014cb4 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 1014c98:	d0a72603 	ldbu	r2,-25448(gp)
 1014c9c:	10803fcc 	andi	r2,r2,255
 1014ca0:	10803fe0 	cmpeqi	r2,r2,255
 1014ca4:	1000031e 	bne	r2,zero,1014cb4 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 1014ca8:	d0a72603 	ldbu	r2,-25448(gp)
 1014cac:	10800044 	addi	r2,r2,1
 1014cb0:	d0a72605 	stb	r2,-25448(gp)
 1014cb4:	e0bfff17 	ldw	r2,-4(fp)
 1014cb8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014cbc:	e0bffd17 	ldw	r2,-12(fp)
 1014cc0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 1014cc4:	e037883a 	mov	sp,fp
 1014cc8:	df000017 	ldw	fp,0(sp)
 1014ccc:	dec00104 	addi	sp,sp,4
 1014cd0:	f800283a 	ret

01014cd4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 1014cd4:	defff804 	addi	sp,sp,-32
 1014cd8:	dfc00715 	stw	ra,28(sp)
 1014cdc:	df000615 	stw	fp,24(sp)
 1014ce0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1014ce4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 1014ce8:	d0a72643 	ldbu	r2,-25447(gp)
 1014cec:	10803fcc 	andi	r2,r2,255
 1014cf0:	10800058 	cmpnei	r2,r2,1
 1014cf4:	10002b1e 	bne	r2,zero,1014da4 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014cf8:	0005303a 	rdctl	r2,status
 1014cfc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014d00:	e0fffe17 	ldw	r3,-8(fp)
 1014d04:	00bfff84 	movi	r2,-2
 1014d08:	1884703a 	and	r2,r3,r2
 1014d0c:	1001703a 	wrctl	status,r2
  
  return context;
 1014d10:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 1014d14:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 1014d18:	d0a72603 	ldbu	r2,-25448(gp)
 1014d1c:	10803fcc 	andi	r2,r2,255
 1014d20:	1005003a 	cmpeq	r2,r2,zero
 1014d24:	10001b1e 	bne	r2,zero,1014d94 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 1014d28:	d0a72603 	ldbu	r2,-25448(gp)
 1014d2c:	10bfffc4 	addi	r2,r2,-1
 1014d30:	d0a72605 	stb	r2,-25448(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 1014d34:	d0a72603 	ldbu	r2,-25448(gp)
 1014d38:	10803fcc 	andi	r2,r2,255
 1014d3c:	1004c03a 	cmpne	r2,r2,zero
 1014d40:	10000f1e 	bne	r2,zero,1014d80 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 1014d44:	d0a73403 	ldbu	r2,-25392(gp)
 1014d48:	10803fcc 	andi	r2,r2,255
 1014d4c:	1004c03a 	cmpne	r2,r2,zero
 1014d50:	1000061e 	bne	r2,zero,1014d6c <OSSchedUnlock+0x98>
 1014d54:	e0bfff17 	ldw	r2,-4(fp)
 1014d58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014d5c:	e0bffd17 	ldw	r2,-12(fp)
 1014d60:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 1014d64:	1015b900 	call	1015b90 <OS_Sched>
 1014d68:	00000e06 	br	1014da4 <OSSchedUnlock+0xd0>
 1014d6c:	e0bfff17 	ldw	r2,-4(fp)
 1014d70:	e0bffc15 	stw	r2,-16(fp)
 1014d74:	e0bffc17 	ldw	r2,-16(fp)
 1014d78:	1001703a 	wrctl	status,r2
 1014d7c:	00000906 	br	1014da4 <OSSchedUnlock+0xd0>
 1014d80:	e0bfff17 	ldw	r2,-4(fp)
 1014d84:	e0bffb15 	stw	r2,-20(fp)
 1014d88:	e0bffb17 	ldw	r2,-20(fp)
 1014d8c:	1001703a 	wrctl	status,r2
 1014d90:	00000406 	br	1014da4 <OSSchedUnlock+0xd0>
 1014d94:	e0bfff17 	ldw	r2,-4(fp)
 1014d98:	e0bffa15 	stw	r2,-24(fp)
 1014d9c:	e0bffa17 	ldw	r2,-24(fp)
 1014da0:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 1014da4:	e037883a 	mov	sp,fp
 1014da8:	dfc00117 	ldw	ra,4(sp)
 1014dac:	df000017 	ldw	fp,0(sp)
 1014db0:	dec00204 	addi	sp,sp,8
 1014db4:	f800283a 	ret

01014db8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 1014db8:	defffe04 	addi	sp,sp,-8
 1014dbc:	dfc00115 	stw	ra,4(sp)
 1014dc0:	df000015 	stw	fp,0(sp)
 1014dc4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 1014dc8:	d0a72643 	ldbu	r2,-25447(gp)
 1014dcc:	10803fcc 	andi	r2,r2,255
 1014dd0:	1004c03a 	cmpne	r2,r2,zero
 1014dd4:	10000f1e 	bne	r2,zero,1014e14 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 1014dd8:	1015c640 	call	1015c64 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 1014ddc:	d0a72803 	ldbu	r2,-25440(gp)
 1014de0:	d0a72845 	stb	r2,-25439(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 1014de4:	d0a72803 	ldbu	r2,-25440(gp)
 1014de8:	10803fcc 	andi	r2,r2,255
 1014dec:	00c040f4 	movhi	r3,259
 1014df0:	18ea5104 	addi	r3,r3,-22204
 1014df4:	1085883a 	add	r2,r2,r2
 1014df8:	1085883a 	add	r2,r2,r2
 1014dfc:	10c5883a 	add	r2,r2,r3
 1014e00:	10800017 	ldw	r2,0(r2)
 1014e04:	d0a73015 	stw	r2,-25408(gp)
        OSTCBCur      = OSTCBHighRdy;
 1014e08:	d0a73017 	ldw	r2,-25408(gp)
 1014e0c:	d0a73515 	stw	r2,-25388(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 1014e10:	101e0100 	call	101e010 <OSStartHighRdy>
    }
}
 1014e14:	e037883a 	mov	sp,fp
 1014e18:	dfc00117 	ldw	ra,4(sp)
 1014e1c:	df000017 	ldw	fp,0(sp)
 1014e20:	dec00204 	addi	sp,sp,8
 1014e24:	f800283a 	ret

01014e28 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 1014e28:	defff904 	addi	sp,sp,-28
 1014e2c:	dfc00615 	stw	ra,24(sp)
 1014e30:	df000515 	stw	fp,20(sp)
 1014e34:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014e38:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 1014e3c:	01000084 	movi	r4,2
 1014e40:	101be840 	call	101be84 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014e44:	0005303a 	rdctl	r2,status
 1014e48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014e4c:	e0fffe17 	ldw	r3,-8(fp)
 1014e50:	00bfff84 	movi	r2,-2
 1014e54:	1884703a 	and	r2,r3,r2
 1014e58:	1001703a 	wrctl	status,r2
  
  return context;
 1014e5c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 1014e60:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 1014e64:	d0272715 	stw	zero,-25444(gp)
 1014e68:	e0bfff17 	ldw	r2,-4(fp)
 1014e6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014e70:	e0bffd17 	ldw	r2,-12(fp)
 1014e74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 1014e78:	01001904 	movi	r4,100
 1014e7c:	101be840 	call	101be84 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014e80:	0005303a 	rdctl	r2,status
 1014e84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014e88:	e0fffc17 	ldw	r3,-16(fp)
 1014e8c:	00bfff84 	movi	r2,-2
 1014e90:	1884703a 	and	r2,r3,r2
 1014e94:	1001703a 	wrctl	status,r2
  
  return context;
 1014e98:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 1014e9c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 1014ea0:	d0a72717 	ldw	r2,-25444(gp)
 1014ea4:	d0a72c15 	stw	r2,-25424(gp)
    OSStatRdy    = OS_TRUE;
 1014ea8:	00800044 	movi	r2,1
 1014eac:	d0a73805 	stb	r2,-25376(gp)
 1014eb0:	e0bfff17 	ldw	r2,-4(fp)
 1014eb4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014eb8:	e0bffb17 	ldw	r2,-20(fp)
 1014ebc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 1014ec0:	e037883a 	mov	sp,fp
 1014ec4:	dfc00117 	ldw	ra,4(sp)
 1014ec8:	df000017 	ldw	fp,0(sp)
 1014ecc:	dec00204 	addi	sp,sp,8
 1014ed0:	f800283a 	ret

01014ed4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 1014ed4:	defff604 	addi	sp,sp,-40
 1014ed8:	dfc00915 	stw	ra,36(sp)
 1014edc:	df000815 	stw	fp,32(sp)
 1014ee0:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1014ee4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 1014ee8:	101e3dc0 	call	101e3dc <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014eec:	0005303a 	rdctl	r2,status
 1014ef0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014ef4:	e0fffb17 	ldw	r3,-20(fp)
 1014ef8:	00bfff84 	movi	r2,-2
 1014efc:	1884703a 	and	r2,r3,r2
 1014f00:	1001703a 	wrctl	status,r2
  
  return context;
 1014f04:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 1014f08:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 1014f0c:	d0a73617 	ldw	r2,-25384(gp)
 1014f10:	10800044 	addi	r2,r2,1
 1014f14:	d0a73615 	stw	r2,-25384(gp)
 1014f18:	e0bffc17 	ldw	r2,-16(fp)
 1014f1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014f20:	e0bffa17 	ldw	r2,-24(fp)
 1014f24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 1014f28:	d0a72643 	ldbu	r2,-25447(gp)
 1014f2c:	10803fcc 	andi	r2,r2,255
 1014f30:	10800058 	cmpnei	r2,r2,1
 1014f34:	1000721e 	bne	r2,zero,1015100 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 1014f38:	d0a72a03 	ldbu	r2,-25432(gp)
 1014f3c:	10803fcc 	andi	r2,r2,255
 1014f40:	e0bfff15 	stw	r2,-4(fp)
 1014f44:	e0ffff17 	ldw	r3,-4(fp)
 1014f48:	18800060 	cmpeqi	r2,r3,1
 1014f4c:	10000a1e 	bne	r2,zero,1014f78 <OSTimeTick+0xa4>
 1014f50:	e0ffff17 	ldw	r3,-4(fp)
 1014f54:	188000a0 	cmpeqi	r2,r3,2
 1014f58:	1000091e 	bne	r2,zero,1014f80 <OSTimeTick+0xac>
 1014f5c:	e0ffff17 	ldw	r3,-4(fp)
 1014f60:	1805003a 	cmpeq	r2,r3,zero
 1014f64:	1000011e 	bne	r2,zero,1014f6c <OSTimeTick+0x98>
 1014f68:	00000a06 	br	1014f94 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 1014f6c:	00800044 	movi	r2,1
 1014f70:	e0bffd05 	stb	r2,-12(fp)
                 break;
 1014f74:	00000a06 	br	1014fa0 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 1014f78:	e03ffd05 	stb	zero,-12(fp)
                 break;
 1014f7c:	00000806 	br	1014fa0 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 1014f80:	00800044 	movi	r2,1
 1014f84:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 1014f88:	00800044 	movi	r2,1
 1014f8c:	d0a72a05 	stb	r2,-25432(gp)
                 break;
 1014f90:	00000306 	br	1014fa0 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 1014f94:	00800044 	movi	r2,1
 1014f98:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 1014f9c:	d0272a05 	stb	zero,-25432(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 1014fa0:	e0bffd03 	ldbu	r2,-12(fp)
 1014fa4:	1005003a 	cmpeq	r2,r2,zero
 1014fa8:	1000551e 	bne	r2,zero,1015100 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 1014fac:	d0a72917 	ldw	r2,-25436(gp)
 1014fb0:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 1014fb4:	00004d06 	br	10150ec <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014fb8:	0005303a 	rdctl	r2,status
 1014fbc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014fc0:	e0fff917 	ldw	r3,-28(fp)
 1014fc4:	00bfff84 	movi	r2,-2
 1014fc8:	1884703a 	and	r2,r3,r2
 1014fcc:	1001703a 	wrctl	status,r2
  
  return context;
 1014fd0:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 1014fd4:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 1014fd8:	e0bffe17 	ldw	r2,-8(fp)
 1014fdc:	10800b8b 	ldhu	r2,46(r2)
 1014fe0:	10bfffcc 	andi	r2,r2,65535
 1014fe4:	1005003a 	cmpeq	r2,r2,zero
 1014fe8:	1000391e 	bne	r2,zero,10150d0 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 1014fec:	e0bffe17 	ldw	r2,-8(fp)
 1014ff0:	10800b8b 	ldhu	r2,46(r2)
 1014ff4:	10bfffc4 	addi	r2,r2,-1
 1014ff8:	1007883a 	mov	r3,r2
 1014ffc:	e0bffe17 	ldw	r2,-8(fp)
 1015000:	10c00b8d 	sth	r3,46(r2)
 1015004:	e0bffe17 	ldw	r2,-8(fp)
 1015008:	10800b8b 	ldhu	r2,46(r2)
 101500c:	10bfffcc 	andi	r2,r2,65535
 1015010:	1004c03a 	cmpne	r2,r2,zero
 1015014:	10002e1e 	bne	r2,zero,10150d0 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 1015018:	e0bffe17 	ldw	r2,-8(fp)
 101501c:	10800c03 	ldbu	r2,48(r2)
 1015020:	10803fcc 	andi	r2,r2,255
 1015024:	10800dcc 	andi	r2,r2,55
 1015028:	1005003a 	cmpeq	r2,r2,zero
 101502c:	10000b1e 	bne	r2,zero,101505c <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 1015030:	e0bffe17 	ldw	r2,-8(fp)
 1015034:	10c00c03 	ldbu	r3,48(r2)
 1015038:	00bff204 	movi	r2,-56
 101503c:	1884703a 	and	r2,r3,r2
 1015040:	1007883a 	mov	r3,r2
 1015044:	e0bffe17 	ldw	r2,-8(fp)
 1015048:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 101504c:	e0fffe17 	ldw	r3,-8(fp)
 1015050:	00800044 	movi	r2,1
 1015054:	18800c45 	stb	r2,49(r3)
 1015058:	00000206 	br	1015064 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 101505c:	e0bffe17 	ldw	r2,-8(fp)
 1015060:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 1015064:	e0bffe17 	ldw	r2,-8(fp)
 1015068:	10800c03 	ldbu	r2,48(r2)
 101506c:	10803fcc 	andi	r2,r2,255
 1015070:	1080020c 	andi	r2,r2,8
 1015074:	1004c03a 	cmpne	r2,r2,zero
 1015078:	1000151e 	bne	r2,zero,10150d0 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 101507c:	e0bffe17 	ldw	r2,-8(fp)
 1015080:	10c00d83 	ldbu	r3,54(r2)
 1015084:	d0a73203 	ldbu	r2,-25400(gp)
 1015088:	1884b03a 	or	r2,r3,r2
 101508c:	d0a73205 	stb	r2,-25400(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1015090:	e0bffe17 	ldw	r2,-8(fp)
 1015094:	10800d03 	ldbu	r2,52(r2)
 1015098:	11003fcc 	andi	r4,r2,255
 101509c:	e0bffe17 	ldw	r2,-8(fp)
 10150a0:	10800d03 	ldbu	r2,52(r2)
 10150a4:	10c03fcc 	andi	r3,r2,255
 10150a8:	d0a73244 	addi	r2,gp,-25399
 10150ac:	1885883a 	add	r2,r3,r2
 10150b0:	10c00003 	ldbu	r3,0(r2)
 10150b4:	e0bffe17 	ldw	r2,-8(fp)
 10150b8:	10800d43 	ldbu	r2,53(r2)
 10150bc:	1884b03a 	or	r2,r3,r2
 10150c0:	1007883a 	mov	r3,r2
 10150c4:	d0a73244 	addi	r2,gp,-25399
 10150c8:	2085883a 	add	r2,r4,r2
 10150cc:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 10150d0:	e0bffe17 	ldw	r2,-8(fp)
 10150d4:	10800517 	ldw	r2,20(r2)
 10150d8:	e0bffe15 	stw	r2,-8(fp)
 10150dc:	e0bffc17 	ldw	r2,-16(fp)
 10150e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10150e4:	e0bff817 	ldw	r2,-32(fp)
 10150e8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 10150ec:	e0bffe17 	ldw	r2,-8(fp)
 10150f0:	10800c83 	ldbu	r2,50(r2)
 10150f4:	10803fcc 	andi	r2,r2,255
 10150f8:	10800518 	cmpnei	r2,r2,20
 10150fc:	103fae1e 	bne	r2,zero,1014fb8 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 1015100:	e037883a 	mov	sp,fp
 1015104:	dfc00117 	ldw	ra,4(sp)
 1015108:	df000017 	ldw	fp,0(sp)
 101510c:	dec00204 	addi	sp,sp,8
 1015110:	f800283a 	ret

01015114 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 1015114:	deffff04 	addi	sp,sp,-4
 1015118:	df000015 	stw	fp,0(sp)
 101511c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 1015120:	00804784 	movi	r2,286
}
 1015124:	e037883a 	mov	sp,fp
 1015128:	df000017 	ldw	fp,0(sp)
 101512c:	dec00104 	addi	sp,sp,4
 1015130:	f800283a 	ret

01015134 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 1015134:	deffff04 	addi	sp,sp,-4
 1015138:	df000015 	stw	fp,0(sp)
 101513c:	d839883a 	mov	fp,sp
}
 1015140:	e037883a 	mov	sp,fp
 1015144:	df000017 	ldw	fp,0(sp)
 1015148:	dec00104 	addi	sp,sp,4
 101514c:	f800283a 	ret

01015150 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 1015150:	defff804 	addi	sp,sp,-32
 1015154:	dfc00715 	stw	ra,28(sp)
 1015158:	df000615 	stw	fp,24(sp)
 101515c:	df000604 	addi	fp,sp,24
 1015160:	e13ffc15 	stw	r4,-16(fp)
 1015164:	e17ffd15 	stw	r5,-12(fp)
 1015168:	e1bffe05 	stb	r6,-8(fp)
 101516c:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 1015170:	e0bffc17 	ldw	r2,-16(fp)
 1015174:	10800283 	ldbu	r2,10(r2)
 1015178:	10c03fcc 	andi	r3,r2,255
 101517c:	008040b4 	movhi	r2,258
 1015180:	10bdac04 	addi	r2,r2,-2384
 1015184:	10c5883a 	add	r2,r2,r3
 1015188:	10800003 	ldbu	r2,0(r2)
 101518c:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 1015190:	e0fffa83 	ldbu	r3,-22(fp)
 1015194:	e0bffc17 	ldw	r2,-16(fp)
 1015198:	1885883a 	add	r2,r3,r2
 101519c:	10800204 	addi	r2,r2,8
 10151a0:	108000c3 	ldbu	r2,3(r2)
 10151a4:	10c03fcc 	andi	r3,r2,255
 10151a8:	008040b4 	movhi	r2,258
 10151ac:	10bdac04 	addi	r2,r2,-2384
 10151b0:	10c5883a 	add	r2,r2,r3
 10151b4:	10800003 	ldbu	r2,0(r2)
 10151b8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 10151bc:	e0bffa83 	ldbu	r2,-22(fp)
 10151c0:	100490fa 	slli	r2,r2,3
 10151c4:	1007883a 	mov	r3,r2
 10151c8:	e0bffa43 	ldbu	r2,-23(fp)
 10151cc:	1885883a 	add	r2,r3,r2
 10151d0:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 10151d4:	e0bffa03 	ldbu	r2,-24(fp)
 10151d8:	00c040f4 	movhi	r3,259
 10151dc:	18ea5104 	addi	r3,r3,-22204
 10151e0:	1085883a 	add	r2,r2,r2
 10151e4:	1085883a 	add	r2,r2,r2
 10151e8:	10c5883a 	add	r2,r2,r3
 10151ec:	10800017 	ldw	r2,0(r2)
 10151f0:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 10151f4:	e0bffb17 	ldw	r2,-20(fp)
 10151f8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 10151fc:	e0fffb17 	ldw	r3,-20(fp)
 1015200:	e0bffd17 	ldw	r2,-12(fp)
 1015204:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 1015208:	e0bffb17 	ldw	r2,-20(fp)
 101520c:	10800c03 	ldbu	r2,48(r2)
 1015210:	1007883a 	mov	r3,r2
 1015214:	e0bffe03 	ldbu	r2,-8(fp)
 1015218:	0084303a 	nor	r2,zero,r2
 101521c:	1884703a 	and	r2,r3,r2
 1015220:	1007883a 	mov	r3,r2
 1015224:	e0bffb17 	ldw	r2,-20(fp)
 1015228:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 101522c:	e0fffb17 	ldw	r3,-20(fp)
 1015230:	e0bfff03 	ldbu	r2,-4(fp)
 1015234:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 1015238:	e0bffb17 	ldw	r2,-20(fp)
 101523c:	10800c03 	ldbu	r2,48(r2)
 1015240:	10803fcc 	andi	r2,r2,255
 1015244:	1080020c 	andi	r2,r2,8
 1015248:	1004c03a 	cmpne	r2,r2,zero
 101524c:	1000111e 	bne	r2,zero,1015294 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 1015250:	e0bffb17 	ldw	r2,-20(fp)
 1015254:	10c00d83 	ldbu	r3,54(r2)
 1015258:	d0a73203 	ldbu	r2,-25400(gp)
 101525c:	1884b03a 	or	r2,r3,r2
 1015260:	d0a73205 	stb	r2,-25400(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 1015264:	e13ffa83 	ldbu	r4,-22(fp)
 1015268:	e0fffa83 	ldbu	r3,-22(fp)
 101526c:	d0a73244 	addi	r2,gp,-25399
 1015270:	1885883a 	add	r2,r3,r2
 1015274:	10c00003 	ldbu	r3,0(r2)
 1015278:	e0bffb17 	ldw	r2,-20(fp)
 101527c:	10800d43 	ldbu	r2,53(r2)
 1015280:	1884b03a 	or	r2,r3,r2
 1015284:	1007883a 	mov	r3,r2
 1015288:	d0a73244 	addi	r2,gp,-25399
 101528c:	2085883a 	add	r2,r4,r2
 1015290:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 1015294:	e13ffb17 	ldw	r4,-20(fp)
 1015298:	e17ffc17 	ldw	r5,-16(fp)
 101529c:	10155480 	call	1015548 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 10152a0:	e0bffb17 	ldw	r2,-20(fp)
 10152a4:	10800817 	ldw	r2,32(r2)
 10152a8:	1005003a 	cmpeq	r2,r2,zero
 10152ac:	1000071e 	bne	r2,zero,10152cc <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 10152b0:	e0bffb17 	ldw	r2,-20(fp)
 10152b4:	11400817 	ldw	r5,32(r2)
 10152b8:	e13ffb17 	ldw	r4,-20(fp)
 10152bc:	10156000 	call	1015600 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 10152c0:	e0fffb17 	ldw	r3,-20(fp)
 10152c4:	e0bffc17 	ldw	r2,-16(fp)
 10152c8:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 10152cc:	e0bffa03 	ldbu	r2,-24(fp)
}
 10152d0:	e037883a 	mov	sp,fp
 10152d4:	dfc00117 	ldw	ra,4(sp)
 10152d8:	df000017 	ldw	fp,0(sp)
 10152dc:	dec00204 	addi	sp,sp,8
 10152e0:	f800283a 	ret

010152e4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 10152e4:	defffd04 	addi	sp,sp,-12
 10152e8:	df000215 	stw	fp,8(sp)
 10152ec:	df000204 	addi	fp,sp,8
 10152f0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 10152f4:	d0e73517 	ldw	r3,-25388(gp)
 10152f8:	e0bfff17 	ldw	r2,-4(fp)
 10152fc:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 1015300:	d0a73517 	ldw	r2,-25388(gp)
 1015304:	10800d03 	ldbu	r2,52(r2)
 1015308:	11003fcc 	andi	r4,r2,255
 101530c:	d0a73517 	ldw	r2,-25388(gp)
 1015310:	10800d03 	ldbu	r2,52(r2)
 1015314:	10c03fcc 	andi	r3,r2,255
 1015318:	e0bfff17 	ldw	r2,-4(fp)
 101531c:	1885883a 	add	r2,r3,r2
 1015320:	10800204 	addi	r2,r2,8
 1015324:	10c000c3 	ldbu	r3,3(r2)
 1015328:	d0a73517 	ldw	r2,-25388(gp)
 101532c:	10800d43 	ldbu	r2,53(r2)
 1015330:	1884b03a 	or	r2,r3,r2
 1015334:	1007883a 	mov	r3,r2
 1015338:	e0bfff17 	ldw	r2,-4(fp)
 101533c:	2085883a 	add	r2,r4,r2
 1015340:	10800204 	addi	r2,r2,8
 1015344:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 1015348:	e0bfff17 	ldw	r2,-4(fp)
 101534c:	10c00283 	ldbu	r3,10(r2)
 1015350:	d0a73517 	ldw	r2,-25388(gp)
 1015354:	10800d83 	ldbu	r2,54(r2)
 1015358:	1884b03a 	or	r2,r3,r2
 101535c:	1007883a 	mov	r3,r2
 1015360:	e0bfff17 	ldw	r2,-4(fp)
 1015364:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 1015368:	d0a73517 	ldw	r2,-25388(gp)
 101536c:	10800d03 	ldbu	r2,52(r2)
 1015370:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 1015374:	e13ffe03 	ldbu	r4,-8(fp)
 1015378:	e0fffe03 	ldbu	r3,-8(fp)
 101537c:	d0a73244 	addi	r2,gp,-25399
 1015380:	1885883a 	add	r2,r3,r2
 1015384:	10800003 	ldbu	r2,0(r2)
 1015388:	1007883a 	mov	r3,r2
 101538c:	d0a73517 	ldw	r2,-25388(gp)
 1015390:	10800d43 	ldbu	r2,53(r2)
 1015394:	0084303a 	nor	r2,zero,r2
 1015398:	1884703a 	and	r2,r3,r2
 101539c:	1007883a 	mov	r3,r2
 10153a0:	d0a73244 	addi	r2,gp,-25399
 10153a4:	2085883a 	add	r2,r4,r2
 10153a8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 10153ac:	e0fffe03 	ldbu	r3,-8(fp)
 10153b0:	d0a73244 	addi	r2,gp,-25399
 10153b4:	1885883a 	add	r2,r3,r2
 10153b8:	10800003 	ldbu	r2,0(r2)
 10153bc:	10803fcc 	andi	r2,r2,255
 10153c0:	1004c03a 	cmpne	r2,r2,zero
 10153c4:	1000071e 	bne	r2,zero,10153e4 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 10153c8:	d0a73517 	ldw	r2,-25388(gp)
 10153cc:	10800d83 	ldbu	r2,54(r2)
 10153d0:	0084303a 	nor	r2,zero,r2
 10153d4:	1007883a 	mov	r3,r2
 10153d8:	d0a73203 	ldbu	r2,-25400(gp)
 10153dc:	1884703a 	and	r2,r3,r2
 10153e0:	d0a73205 	stb	r2,-25400(gp)
    }
}
 10153e4:	e037883a 	mov	sp,fp
 10153e8:	df000017 	ldw	fp,0(sp)
 10153ec:	dec00104 	addi	sp,sp,4
 10153f0:	f800283a 	ret

010153f4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 10153f4:	defffb04 	addi	sp,sp,-20
 10153f8:	df000415 	stw	fp,16(sp)
 10153fc:	df000404 	addi	fp,sp,16
 1015400:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 1015404:	d0a73517 	ldw	r2,-25388(gp)
 1015408:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 101540c:	d0e73517 	ldw	r3,-25388(gp)
 1015410:	e0bfff17 	ldw	r2,-4(fp)
 1015414:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 1015418:	e0bfff17 	ldw	r2,-4(fp)
 101541c:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 1015420:	e0bffe17 	ldw	r2,-8(fp)
 1015424:	10800017 	ldw	r2,0(r2)
 1015428:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 101542c:	00002006 	br	10154b0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 1015430:	d0a73517 	ldw	r2,-25388(gp)
 1015434:	10800d03 	ldbu	r2,52(r2)
 1015438:	11003fcc 	andi	r4,r2,255
 101543c:	d0a73517 	ldw	r2,-25388(gp)
 1015440:	10800d03 	ldbu	r2,52(r2)
 1015444:	10c03fcc 	andi	r3,r2,255
 1015448:	e0bffd17 	ldw	r2,-12(fp)
 101544c:	1885883a 	add	r2,r3,r2
 1015450:	10800204 	addi	r2,r2,8
 1015454:	10c000c3 	ldbu	r3,3(r2)
 1015458:	d0a73517 	ldw	r2,-25388(gp)
 101545c:	10800d43 	ldbu	r2,53(r2)
 1015460:	1884b03a 	or	r2,r3,r2
 1015464:	1007883a 	mov	r3,r2
 1015468:	e0bffd17 	ldw	r2,-12(fp)
 101546c:	2085883a 	add	r2,r4,r2
 1015470:	10800204 	addi	r2,r2,8
 1015474:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 1015478:	e0bffd17 	ldw	r2,-12(fp)
 101547c:	10c00283 	ldbu	r3,10(r2)
 1015480:	d0a73517 	ldw	r2,-25388(gp)
 1015484:	10800d83 	ldbu	r2,54(r2)
 1015488:	1884b03a 	or	r2,r3,r2
 101548c:	1007883a 	mov	r3,r2
 1015490:	e0bffd17 	ldw	r2,-12(fp)
 1015494:	10c00285 	stb	r3,10(r2)
        pevents++;
 1015498:	e0bffe17 	ldw	r2,-8(fp)
 101549c:	10800104 	addi	r2,r2,4
 10154a0:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 10154a4:	e0bffe17 	ldw	r2,-8(fp)
 10154a8:	10800017 	ldw	r2,0(r2)
 10154ac:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 10154b0:	e0bffd17 	ldw	r2,-12(fp)
 10154b4:	1004c03a 	cmpne	r2,r2,zero
 10154b8:	103fdd1e 	bne	r2,zero,1015430 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 10154bc:	d0a73517 	ldw	r2,-25388(gp)
 10154c0:	10800d03 	ldbu	r2,52(r2)
 10154c4:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 10154c8:	e13ffc03 	ldbu	r4,-16(fp)
 10154cc:	e0fffc03 	ldbu	r3,-16(fp)
 10154d0:	d0a73244 	addi	r2,gp,-25399
 10154d4:	1885883a 	add	r2,r3,r2
 10154d8:	10800003 	ldbu	r2,0(r2)
 10154dc:	1007883a 	mov	r3,r2
 10154e0:	d0a73517 	ldw	r2,-25388(gp)
 10154e4:	10800d43 	ldbu	r2,53(r2)
 10154e8:	0084303a 	nor	r2,zero,r2
 10154ec:	1884703a 	and	r2,r3,r2
 10154f0:	1007883a 	mov	r3,r2
 10154f4:	d0a73244 	addi	r2,gp,-25399
 10154f8:	2085883a 	add	r2,r4,r2
 10154fc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 1015500:	e0fffc03 	ldbu	r3,-16(fp)
 1015504:	d0a73244 	addi	r2,gp,-25399
 1015508:	1885883a 	add	r2,r3,r2
 101550c:	10800003 	ldbu	r2,0(r2)
 1015510:	10803fcc 	andi	r2,r2,255
 1015514:	1004c03a 	cmpne	r2,r2,zero
 1015518:	1000071e 	bne	r2,zero,1015538 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 101551c:	d0a73517 	ldw	r2,-25388(gp)
 1015520:	10800d83 	ldbu	r2,54(r2)
 1015524:	0084303a 	nor	r2,zero,r2
 1015528:	1007883a 	mov	r3,r2
 101552c:	d0a73203 	ldbu	r2,-25400(gp)
 1015530:	1884703a 	and	r2,r3,r2
 1015534:	d0a73205 	stb	r2,-25400(gp)
    }
}
 1015538:	e037883a 	mov	sp,fp
 101553c:	df000017 	ldw	fp,0(sp)
 1015540:	dec00104 	addi	sp,sp,4
 1015544:	f800283a 	ret

01015548 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 1015548:	defffc04 	addi	sp,sp,-16
 101554c:	df000315 	stw	fp,12(sp)
 1015550:	df000304 	addi	fp,sp,12
 1015554:	e13ffe15 	stw	r4,-8(fp)
 1015558:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 101555c:	e0bffe17 	ldw	r2,-8(fp)
 1015560:	10800d03 	ldbu	r2,52(r2)
 1015564:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 1015568:	e13ffd03 	ldbu	r4,-12(fp)
 101556c:	e0fffd03 	ldbu	r3,-12(fp)
 1015570:	e0bfff17 	ldw	r2,-4(fp)
 1015574:	1885883a 	add	r2,r3,r2
 1015578:	10800204 	addi	r2,r2,8
 101557c:	108000c3 	ldbu	r2,3(r2)
 1015580:	1007883a 	mov	r3,r2
 1015584:	e0bffe17 	ldw	r2,-8(fp)
 1015588:	10800d43 	ldbu	r2,53(r2)
 101558c:	0084303a 	nor	r2,zero,r2
 1015590:	1884703a 	and	r2,r3,r2
 1015594:	1007883a 	mov	r3,r2
 1015598:	e0bfff17 	ldw	r2,-4(fp)
 101559c:	2085883a 	add	r2,r4,r2
 10155a0:	10800204 	addi	r2,r2,8
 10155a4:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 10155a8:	e0fffd03 	ldbu	r3,-12(fp)
 10155ac:	e0bfff17 	ldw	r2,-4(fp)
 10155b0:	1885883a 	add	r2,r3,r2
 10155b4:	10800204 	addi	r2,r2,8
 10155b8:	108000c3 	ldbu	r2,3(r2)
 10155bc:	10803fcc 	andi	r2,r2,255
 10155c0:	1004c03a 	cmpne	r2,r2,zero
 10155c4:	10000a1e 	bne	r2,zero,10155f0 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 10155c8:	e0bfff17 	ldw	r2,-4(fp)
 10155cc:	10800283 	ldbu	r2,10(r2)
 10155d0:	1007883a 	mov	r3,r2
 10155d4:	e0bffe17 	ldw	r2,-8(fp)
 10155d8:	10800d83 	ldbu	r2,54(r2)
 10155dc:	0084303a 	nor	r2,zero,r2
 10155e0:	1884703a 	and	r2,r3,r2
 10155e4:	1007883a 	mov	r3,r2
 10155e8:	e0bfff17 	ldw	r2,-4(fp)
 10155ec:	10c00285 	stb	r3,10(r2)
    }
}
 10155f0:	e037883a 	mov	sp,fp
 10155f4:	df000017 	ldw	fp,0(sp)
 10155f8:	dec00104 	addi	sp,sp,4
 10155fc:	f800283a 	ret

01015600 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 1015600:	defffa04 	addi	sp,sp,-24
 1015604:	df000515 	stw	fp,20(sp)
 1015608:	df000504 	addi	fp,sp,20
 101560c:	e13ffe15 	stw	r4,-8(fp)
 1015610:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 1015614:	e0bffe17 	ldw	r2,-8(fp)
 1015618:	10800d03 	ldbu	r2,52(r2)
 101561c:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 1015620:	e0bffe17 	ldw	r2,-8(fp)
 1015624:	10800d83 	ldbu	r2,54(r2)
 1015628:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 101562c:	e0bffe17 	ldw	r2,-8(fp)
 1015630:	10800d43 	ldbu	r2,53(r2)
 1015634:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 1015638:	e0bfff17 	ldw	r2,-4(fp)
 101563c:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 1015640:	e0bffd17 	ldw	r2,-12(fp)
 1015644:	10800017 	ldw	r2,0(r2)
 1015648:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 101564c:	00002606 	br	10156e8 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 1015650:	e13ffb83 	ldbu	r4,-18(fp)
 1015654:	e0fffb83 	ldbu	r3,-18(fp)
 1015658:	e0bffc17 	ldw	r2,-16(fp)
 101565c:	1885883a 	add	r2,r3,r2
 1015660:	10800204 	addi	r2,r2,8
 1015664:	108000c3 	ldbu	r2,3(r2)
 1015668:	1007883a 	mov	r3,r2
 101566c:	e0bffb03 	ldbu	r2,-20(fp)
 1015670:	0084303a 	nor	r2,zero,r2
 1015674:	1884703a 	and	r2,r3,r2
 1015678:	1007883a 	mov	r3,r2
 101567c:	e0bffc17 	ldw	r2,-16(fp)
 1015680:	2085883a 	add	r2,r4,r2
 1015684:	10800204 	addi	r2,r2,8
 1015688:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 101568c:	e0fffb83 	ldbu	r3,-18(fp)
 1015690:	e0bffc17 	ldw	r2,-16(fp)
 1015694:	1885883a 	add	r2,r3,r2
 1015698:	10800204 	addi	r2,r2,8
 101569c:	108000c3 	ldbu	r2,3(r2)
 10156a0:	10803fcc 	andi	r2,r2,255
 10156a4:	1004c03a 	cmpne	r2,r2,zero
 10156a8:	1000091e 	bne	r2,zero,10156d0 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 10156ac:	e0bffc17 	ldw	r2,-16(fp)
 10156b0:	10800283 	ldbu	r2,10(r2)
 10156b4:	1007883a 	mov	r3,r2
 10156b8:	e0bffb43 	ldbu	r2,-19(fp)
 10156bc:	0084303a 	nor	r2,zero,r2
 10156c0:	1884703a 	and	r2,r3,r2
 10156c4:	1007883a 	mov	r3,r2
 10156c8:	e0bffc17 	ldw	r2,-16(fp)
 10156cc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 10156d0:	e0bffd17 	ldw	r2,-12(fp)
 10156d4:	10800104 	addi	r2,r2,4
 10156d8:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 10156dc:	e0bffd17 	ldw	r2,-12(fp)
 10156e0:	10800017 	ldw	r2,0(r2)
 10156e4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 10156e8:	e0bffc17 	ldw	r2,-16(fp)
 10156ec:	1004c03a 	cmpne	r2,r2,zero
 10156f0:	103fd71e 	bne	r2,zero,1015650 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 10156f4:	e037883a 	mov	sp,fp
 10156f8:	df000017 	ldw	fp,0(sp)
 10156fc:	dec00104 	addi	sp,sp,4
 1015700:	f800283a 	ret

01015704 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 1015704:	defffc04 	addi	sp,sp,-16
 1015708:	df000315 	stw	fp,12(sp)
 101570c:	df000304 	addi	fp,sp,12
 1015710:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 1015714:	e0bfff17 	ldw	r2,-4(fp)
 1015718:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 101571c:	e0bfff17 	ldw	r2,-4(fp)
 1015720:	108002c4 	addi	r2,r2,11
 1015724:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1015728:	e03ffd05 	stb	zero,-12(fp)
 101572c:	00000806 	br	1015750 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 1015730:	e0bffe17 	ldw	r2,-8(fp)
 1015734:	10000005 	stb	zero,0(r2)
 1015738:	e0bffe17 	ldw	r2,-8(fp)
 101573c:	10800044 	addi	r2,r2,1
 1015740:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1015744:	e0bffd03 	ldbu	r2,-12(fp)
 1015748:	10800044 	addi	r2,r2,1
 101574c:	e0bffd05 	stb	r2,-12(fp)
 1015750:	e0bffd03 	ldbu	r2,-12(fp)
 1015754:	108000f0 	cmpltui	r2,r2,3
 1015758:	103ff51e 	bne	r2,zero,1015730 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 101575c:	e037883a 	mov	sp,fp
 1015760:	df000017 	ldw	fp,0(sp)
 1015764:	dec00104 	addi	sp,sp,4
 1015768:	f800283a 	ret

0101576c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 101576c:	defffb04 	addi	sp,sp,-20
 1015770:	dfc00415 	stw	ra,16(sp)
 1015774:	df000315 	stw	fp,12(sp)
 1015778:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 101577c:	010040f4 	movhi	r4,259
 1015780:	21263d04 	addi	r4,r4,-26380
 1015784:	0142d004 	movi	r5,2880
 1015788:	1015ad00 	call	1015ad0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 101578c:	008040f4 	movhi	r2,259
 1015790:	10a63d04 	addi	r2,r2,-26380
 1015794:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 1015798:	008040f4 	movhi	r2,259
 101579c:	10a64904 	addi	r2,r2,-26332
 10157a0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 10157a4:	e03fff0d 	sth	zero,-4(fp)
 10157a8:	00001306 	br	10157f8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 10157ac:	e0bffe17 	ldw	r2,-8(fp)
 10157b0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 10157b4:	e0fffe17 	ldw	r3,-8(fp)
 10157b8:	e0bffd17 	ldw	r2,-12(fp)
 10157bc:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 10157c0:	e0fffe17 	ldw	r3,-8(fp)
 10157c4:	00800fc4 	movi	r2,63
 10157c8:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 10157cc:	e0bffe17 	ldw	r2,-8(fp)
 10157d0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 10157d4:	e0bffe17 	ldw	r2,-8(fp)
 10157d8:	10800c04 	addi	r2,r2,48
 10157dc:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 10157e0:	e0bffd17 	ldw	r2,-12(fp)
 10157e4:	10800c04 	addi	r2,r2,48
 10157e8:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 10157ec:	e0bfff0b 	ldhu	r2,-4(fp)
 10157f0:	10800044 	addi	r2,r2,1
 10157f4:	e0bfff0d 	sth	r2,-4(fp)
 10157f8:	e0bfff0b 	ldhu	r2,-4(fp)
 10157fc:	10800ef0 	cmpltui	r2,r2,59
 1015800:	103fea1e 	bne	r2,zero,10157ac <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 1015804:	e0bffe17 	ldw	r2,-8(fp)
 1015808:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 101580c:	e0bffe17 	ldw	r2,-8(fp)
 1015810:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 1015814:	e0fffe17 	ldw	r3,-8(fp)
 1015818:	00800fc4 	movi	r2,63
 101581c:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 1015820:	e0bffe17 	ldw	r2,-8(fp)
 1015824:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 1015828:	008040f4 	movhi	r2,259
 101582c:	10a63d04 	addi	r2,r2,-26380
 1015830:	d0a73315 	stw	r2,-25396(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 1015834:	e037883a 	mov	sp,fp
 1015838:	dfc00117 	ldw	ra,4(sp)
 101583c:	df000017 	ldw	fp,0(sp)
 1015840:	dec00204 	addi	sp,sp,8
 1015844:	f800283a 	ret

01015848 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 1015848:	deffff04 	addi	sp,sp,-4
 101584c:	df000015 	stw	fp,0(sp)
 1015850:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 1015854:	d0273615 	stw	zero,-25384(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 1015858:	d0273405 	stb	zero,-25392(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 101585c:	d0272605 	stb	zero,-25448(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 1015860:	d0272e45 	stb	zero,-25415(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 1015864:	d0272645 	stb	zero,-25447(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 1015868:	d0272b15 	stw	zero,-25428(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 101586c:	d0272715 	stw	zero,-25444(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 1015870:	d0273915 	stw	zero,-25372(gp)
    OSIdleCtrMax  = 0L;
 1015874:	d0272c15 	stw	zero,-25424(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 1015878:	d0273805 	stb	zero,-25376(gp)
#endif
}
 101587c:	e037883a 	mov	sp,fp
 1015880:	df000017 	ldw	fp,0(sp)
 1015884:	dec00104 	addi	sp,sp,4
 1015888:	f800283a 	ret

0101588c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 101588c:	defffd04 	addi	sp,sp,-12
 1015890:	df000215 	stw	fp,8(sp)
 1015894:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 1015898:	d0273205 	stb	zero,-25400(gp)
    prdytbl       = &OSRdyTbl[0];
 101589c:	d0a73244 	addi	r2,gp,-25399
 10158a0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 10158a4:	e03fff05 	stb	zero,-4(fp)
 10158a8:	00000806 	br	10158cc <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 10158ac:	e0bffe17 	ldw	r2,-8(fp)
 10158b0:	10000005 	stb	zero,0(r2)
 10158b4:	e0bffe17 	ldw	r2,-8(fp)
 10158b8:	10800044 	addi	r2,r2,1
 10158bc:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 10158c0:	e0bfff03 	ldbu	r2,-4(fp)
 10158c4:	10800044 	addi	r2,r2,1
 10158c8:	e0bfff05 	stb	r2,-4(fp)
 10158cc:	e0bfff03 	ldbu	r2,-4(fp)
 10158d0:	108000f0 	cmpltui	r2,r2,3
 10158d4:	103ff51e 	bne	r2,zero,10158ac <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 10158d8:	d0272845 	stb	zero,-25439(gp)
    OSPrioHighRdy = 0;
 10158dc:	d0272805 	stb	zero,-25440(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 10158e0:	d0273015 	stw	zero,-25408(gp)
    OSTCBCur      = (OS_TCB *)0;
 10158e4:	d0273515 	stw	zero,-25388(gp)
}
 10158e8:	e037883a 	mov	sp,fp
 10158ec:	df000017 	ldw	fp,0(sp)
 10158f0:	dec00104 	addi	sp,sp,4
 10158f4:	f800283a 	ret

010158f8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 10158f8:	defff804 	addi	sp,sp,-32
 10158fc:	dfc00715 	stw	ra,28(sp)
 1015900:	df000615 	stw	fp,24(sp)
 1015904:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 1015908:	018040f4 	movhi	r6,259
 101590c:	31a63c04 	addi	r6,r6,-26384
 1015910:	00bfffd4 	movui	r2,65535
 1015914:	d8800015 	stw	r2,0(sp)
 1015918:	008040f4 	movhi	r2,259
 101591c:	10a43d04 	addi	r2,r2,-28428
 1015920:	d8800115 	stw	r2,4(sp)
 1015924:	00808004 	movi	r2,512
 1015928:	d8800215 	stw	r2,8(sp)
 101592c:	d8000315 	stw	zero,12(sp)
 1015930:	008000c4 	movi	r2,3
 1015934:	d8800415 	stw	r2,16(sp)
 1015938:	01004074 	movhi	r4,257
 101593c:	21176b04 	addi	r4,r4,23980
 1015940:	000b883a 	mov	r5,zero
 1015944:	01c00504 	movi	r7,20
 1015948:	101ab8c0 	call	101ab8c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 101594c:	014040b4 	movhi	r5,258
 1015950:	297dec04 	addi	r5,r5,-2128
 1015954:	01000504 	movi	r4,20
 1015958:	e1bfff04 	addi	r6,fp,-4
 101595c:	101b4c00 	call	101b4c0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 1015960:	e037883a 	mov	sp,fp
 1015964:	dfc00117 	ldw	ra,4(sp)
 1015968:	df000017 	ldw	fp,0(sp)
 101596c:	dec00204 	addi	sp,sp,8
 1015970:	f800283a 	ret

01015974 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 1015974:	defff804 	addi	sp,sp,-32
 1015978:	dfc00715 	stw	ra,28(sp)
 101597c:	df000615 	stw	fp,24(sp)
 1015980:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 1015984:	018040f4 	movhi	r6,259
 1015988:	31a3c404 	addi	r6,r6,-28912
 101598c:	00bfff94 	movui	r2,65534
 1015990:	d8800015 	stw	r2,0(sp)
 1015994:	008040f4 	movhi	r2,259
 1015998:	10a1c504 	addi	r2,r2,-30956
 101599c:	d8800115 	stw	r2,4(sp)
 10159a0:	00808004 	movi	r2,512
 10159a4:	d8800215 	stw	r2,8(sp)
 10159a8:	d8000315 	stw	zero,12(sp)
 10159ac:	008000c4 	movi	r2,3
 10159b0:	d8800415 	stw	r2,16(sp)
 10159b4:	01004074 	movhi	r4,257
 10159b8:	21178204 	addi	r4,r4,24072
 10159bc:	000b883a 	mov	r5,zero
 10159c0:	01c004c4 	movi	r7,19
 10159c4:	101ab8c0 	call	101ab8c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 10159c8:	014040b4 	movhi	r5,258
 10159cc:	297df004 	addi	r5,r5,-2112
 10159d0:	010004c4 	movi	r4,19
 10159d4:	e1bfff04 	addi	r6,fp,-4
 10159d8:	101b4c00 	call	101b4c0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 10159dc:	e037883a 	mov	sp,fp
 10159e0:	dfc00117 	ldw	ra,4(sp)
 10159e4:	df000017 	ldw	fp,0(sp)
 10159e8:	dec00204 	addi	sp,sp,8
 10159ec:	f800283a 	ret

010159f0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 10159f0:	defffb04 	addi	sp,sp,-20
 10159f4:	dfc00415 	stw	ra,16(sp)
 10159f8:	df000315 	stw	fp,12(sp)
 10159fc:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 1015a00:	010040f4 	movhi	r4,259
 1015a04:	21290d04 	addi	r4,r4,-23500
 1015a08:	01414404 	movi	r5,1296
 1015a0c:	1015ad00 	call	1015ad0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 1015a10:	010040f4 	movhi	r4,259
 1015a14:	212a5104 	addi	r4,r4,-22204
 1015a18:	01401504 	movi	r5,84
 1015a1c:	1015ad00 	call	1015ad0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 1015a20:	008040f4 	movhi	r2,259
 1015a24:	10a90d04 	addi	r2,r2,-23500
 1015a28:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 1015a2c:	008040f4 	movhi	r2,259
 1015a30:	10a92804 	addi	r2,r2,-23392
 1015a34:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 1015a38:	e03fff05 	stb	zero,-4(fp)
 1015a3c:	00001106 	br	1015a84 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 1015a40:	e0fffe17 	ldw	r3,-8(fp)
 1015a44:	e0bffd17 	ldw	r2,-12(fp)
 1015a48:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 1015a4c:	e0fffe17 	ldw	r3,-8(fp)
 1015a50:	00800fc4 	movi	r2,63
 1015a54:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 1015a58:	e0bffe17 	ldw	r2,-8(fp)
 1015a5c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 1015a60:	e0bffe17 	ldw	r2,-8(fp)
 1015a64:	10801b04 	addi	r2,r2,108
 1015a68:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 1015a6c:	e0bffd17 	ldw	r2,-12(fp)
 1015a70:	10801b04 	addi	r2,r2,108
 1015a74:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 1015a78:	e0bfff03 	ldbu	r2,-4(fp)
 1015a7c:	10800044 	addi	r2,r2,1
 1015a80:	e0bfff05 	stb	r2,-4(fp)
 1015a84:	e0bfff03 	ldbu	r2,-4(fp)
 1015a88:	108002f0 	cmpltui	r2,r2,11
 1015a8c:	103fec1e 	bne	r2,zero,1015a40 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 1015a90:	e0bffe17 	ldw	r2,-8(fp)
 1015a94:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 1015a98:	e0fffe17 	ldw	r3,-8(fp)
 1015a9c:	00800fc4 	movi	r2,63
 1015aa0:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 1015aa4:	e0bffe17 	ldw	r2,-8(fp)
 1015aa8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 1015aac:	d0272915 	stw	zero,-25436(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 1015ab0:	008040f4 	movhi	r2,259
 1015ab4:	10a90d04 	addi	r2,r2,-23500
 1015ab8:	d0a72d15 	stw	r2,-25420(gp)
}
 1015abc:	e037883a 	mov	sp,fp
 1015ac0:	dfc00117 	ldw	ra,4(sp)
 1015ac4:	df000017 	ldw	fp,0(sp)
 1015ac8:	dec00204 	addi	sp,sp,8
 1015acc:	f800283a 	ret

01015ad0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 1015ad0:	defffd04 	addi	sp,sp,-12
 1015ad4:	df000215 	stw	fp,8(sp)
 1015ad8:	df000204 	addi	fp,sp,8
 1015adc:	e13ffe15 	stw	r4,-8(fp)
 1015ae0:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 1015ae4:	00000806 	br	1015b08 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 1015ae8:	e0bffe17 	ldw	r2,-8(fp)
 1015aec:	10000005 	stb	zero,0(r2)
 1015af0:	e0bffe17 	ldw	r2,-8(fp)
 1015af4:	10800044 	addi	r2,r2,1
 1015af8:	e0bffe15 	stw	r2,-8(fp)
        size--;
 1015afc:	e0bfff0b 	ldhu	r2,-4(fp)
 1015b00:	10bfffc4 	addi	r2,r2,-1
 1015b04:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 1015b08:	e0bfff0b 	ldhu	r2,-4(fp)
 1015b0c:	1004c03a 	cmpne	r2,r2,zero
 1015b10:	103ff51e 	bne	r2,zero,1015ae8 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 1015b14:	e037883a 	mov	sp,fp
 1015b18:	df000017 	ldw	fp,0(sp)
 1015b1c:	dec00104 	addi	sp,sp,4
 1015b20:	f800283a 	ret

01015b24 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 1015b24:	defffc04 	addi	sp,sp,-16
 1015b28:	df000315 	stw	fp,12(sp)
 1015b2c:	df000304 	addi	fp,sp,12
 1015b30:	e13ffd15 	stw	r4,-12(fp)
 1015b34:	e17ffe15 	stw	r5,-8(fp)
 1015b38:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 1015b3c:	00000d06 	br	1015b74 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 1015b40:	e0bffe17 	ldw	r2,-8(fp)
 1015b44:	10c00003 	ldbu	r3,0(r2)
 1015b48:	e0bffd17 	ldw	r2,-12(fp)
 1015b4c:	10c00005 	stb	r3,0(r2)
 1015b50:	e0bffd17 	ldw	r2,-12(fp)
 1015b54:	10800044 	addi	r2,r2,1
 1015b58:	e0bffd15 	stw	r2,-12(fp)
 1015b5c:	e0bffe17 	ldw	r2,-8(fp)
 1015b60:	10800044 	addi	r2,r2,1
 1015b64:	e0bffe15 	stw	r2,-8(fp)
        size--;
 1015b68:	e0bfff0b 	ldhu	r2,-4(fp)
 1015b6c:	10bfffc4 	addi	r2,r2,-1
 1015b70:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 1015b74:	e0bfff0b 	ldhu	r2,-4(fp)
 1015b78:	1004c03a 	cmpne	r2,r2,zero
 1015b7c:	103ff01e 	bne	r2,zero,1015b40 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 1015b80:	e037883a 	mov	sp,fp
 1015b84:	df000017 	ldw	fp,0(sp)
 1015b88:	dec00104 	addi	sp,sp,4
 1015b8c:	f800283a 	ret

01015b90 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 1015b90:	defffb04 	addi	sp,sp,-20
 1015b94:	dfc00415 	stw	ra,16(sp)
 1015b98:	df000315 	stw	fp,12(sp)
 1015b9c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1015ba0:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015ba4:	0005303a 	rdctl	r2,status
 1015ba8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015bac:	e0fffe17 	ldw	r3,-8(fp)
 1015bb0:	00bfff84 	movi	r2,-2
 1015bb4:	1884703a 	and	r2,r3,r2
 1015bb8:	1001703a 	wrctl	status,r2
  
  return context;
 1015bbc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 1015bc0:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 1015bc4:	d0a73403 	ldbu	r2,-25392(gp)
 1015bc8:	10803fcc 	andi	r2,r2,255
 1015bcc:	1004c03a 	cmpne	r2,r2,zero
 1015bd0:	10001b1e 	bne	r2,zero,1015c40 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 1015bd4:	d0a72603 	ldbu	r2,-25448(gp)
 1015bd8:	10803fcc 	andi	r2,r2,255
 1015bdc:	1004c03a 	cmpne	r2,r2,zero
 1015be0:	1000171e 	bne	r2,zero,1015c40 <OS_Sched+0xb0>
            OS_SchedNew();
 1015be4:	1015c640 	call	1015c64 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 1015be8:	d0a72803 	ldbu	r2,-25440(gp)
 1015bec:	d0e72843 	ldbu	r3,-25439(gp)
 1015bf0:	11003fcc 	andi	r4,r2,255
 1015bf4:	18803fcc 	andi	r2,r3,255
 1015bf8:	20801126 	beq	r4,r2,1015c40 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 1015bfc:	d0a72803 	ldbu	r2,-25440(gp)
 1015c00:	10803fcc 	andi	r2,r2,255
 1015c04:	00c040f4 	movhi	r3,259
 1015c08:	18ea5104 	addi	r3,r3,-22204
 1015c0c:	1085883a 	add	r2,r2,r2
 1015c10:	1085883a 	add	r2,r2,r2
 1015c14:	10c5883a 	add	r2,r2,r3
 1015c18:	10800017 	ldw	r2,0(r2)
 1015c1c:	d0a73015 	stw	r2,-25408(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 1015c20:	d0e73017 	ldw	r3,-25408(gp)
 1015c24:	18800e17 	ldw	r2,56(r3)
 1015c28:	10800044 	addi	r2,r2,1
 1015c2c:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 1015c30:	d0a72b17 	ldw	r2,-25428(gp)
 1015c34:	10800044 	addi	r2,r2,1
 1015c38:	d0a72b15 	stw	r2,-25428(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 1015c3c:	101df840 	call	101df84 <OSCtxSw>
 1015c40:	e0bfff17 	ldw	r2,-4(fp)
 1015c44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015c48:	e0bffd17 	ldw	r2,-12(fp)
 1015c4c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 1015c50:	e037883a 	mov	sp,fp
 1015c54:	dfc00117 	ldw	ra,4(sp)
 1015c58:	df000017 	ldw	fp,0(sp)
 1015c5c:	dec00204 	addi	sp,sp,8
 1015c60:	f800283a 	ret

01015c64 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 1015c64:	defffe04 	addi	sp,sp,-8
 1015c68:	df000115 	stw	fp,4(sp)
 1015c6c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 1015c70:	d0a73203 	ldbu	r2,-25400(gp)
 1015c74:	10c03fcc 	andi	r3,r2,255
 1015c78:	008040b4 	movhi	r2,258
 1015c7c:	10bdac04 	addi	r2,r2,-2384
 1015c80:	10c5883a 	add	r2,r2,r3
 1015c84:	10800003 	ldbu	r2,0(r2)
 1015c88:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 1015c8c:	e0bfff03 	ldbu	r2,-4(fp)
 1015c90:	100490fa 	slli	r2,r2,3
 1015c94:	1009883a 	mov	r4,r2
 1015c98:	e0ffff03 	ldbu	r3,-4(fp)
 1015c9c:	d0a73244 	addi	r2,gp,-25399
 1015ca0:	1885883a 	add	r2,r3,r2
 1015ca4:	10800003 	ldbu	r2,0(r2)
 1015ca8:	10c03fcc 	andi	r3,r2,255
 1015cac:	008040b4 	movhi	r2,258
 1015cb0:	10bdac04 	addi	r2,r2,-2384
 1015cb4:	10c5883a 	add	r2,r2,r3
 1015cb8:	10800003 	ldbu	r2,0(r2)
 1015cbc:	2085883a 	add	r2,r4,r2
 1015cc0:	d0a72805 	stb	r2,-25440(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 1015cc4:	e037883a 	mov	sp,fp
 1015cc8:	df000017 	ldw	fp,0(sp)
 1015ccc:	dec00104 	addi	sp,sp,4
 1015cd0:	f800283a 	ret

01015cd4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 1015cd4:	defffc04 	addi	sp,sp,-16
 1015cd8:	df000315 	stw	fp,12(sp)
 1015cdc:	df000304 	addi	fp,sp,12
 1015ce0:	e13ffe15 	stw	r4,-8(fp)
 1015ce4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 1015ce8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 1015cec:	00000d06 	br	1015d24 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 1015cf0:	e0bfff17 	ldw	r2,-4(fp)
 1015cf4:	10c00003 	ldbu	r3,0(r2)
 1015cf8:	e0bffe17 	ldw	r2,-8(fp)
 1015cfc:	10c00005 	stb	r3,0(r2)
 1015d00:	e0bffe17 	ldw	r2,-8(fp)
 1015d04:	10800044 	addi	r2,r2,1
 1015d08:	e0bffe15 	stw	r2,-8(fp)
 1015d0c:	e0bfff17 	ldw	r2,-4(fp)
 1015d10:	10800044 	addi	r2,r2,1
 1015d14:	e0bfff15 	stw	r2,-4(fp)
        len++;
 1015d18:	e0bffd03 	ldbu	r2,-12(fp)
 1015d1c:	10800044 	addi	r2,r2,1
 1015d20:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 1015d24:	e0bfff17 	ldw	r2,-4(fp)
 1015d28:	10800003 	ldbu	r2,0(r2)
 1015d2c:	10803fcc 	andi	r2,r2,255
 1015d30:	1004c03a 	cmpne	r2,r2,zero
 1015d34:	103fee1e 	bne	r2,zero,1015cf0 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 1015d38:	e0bffe17 	ldw	r2,-8(fp)
 1015d3c:	10000005 	stb	zero,0(r2)
    return (len);
 1015d40:	e0bffd03 	ldbu	r2,-12(fp)
}
 1015d44:	e037883a 	mov	sp,fp
 1015d48:	df000017 	ldw	fp,0(sp)
 1015d4c:	dec00104 	addi	sp,sp,4
 1015d50:	f800283a 	ret

01015d54 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 1015d54:	defffd04 	addi	sp,sp,-12
 1015d58:	df000215 	stw	fp,8(sp)
 1015d5c:	df000204 	addi	fp,sp,8
 1015d60:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 1015d64:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 1015d68:	00000606 	br	1015d84 <OS_StrLen+0x30>
        psrc++;
 1015d6c:	e0bfff17 	ldw	r2,-4(fp)
 1015d70:	10800044 	addi	r2,r2,1
 1015d74:	e0bfff15 	stw	r2,-4(fp)
        len++;
 1015d78:	e0bffe03 	ldbu	r2,-8(fp)
 1015d7c:	10800044 	addi	r2,r2,1
 1015d80:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 1015d84:	e0bfff17 	ldw	r2,-4(fp)
 1015d88:	10800003 	ldbu	r2,0(r2)
 1015d8c:	10803fcc 	andi	r2,r2,255
 1015d90:	1004c03a 	cmpne	r2,r2,zero
 1015d94:	103ff51e 	bne	r2,zero,1015d6c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 1015d98:	e0bffe03 	ldbu	r2,-8(fp)
}
 1015d9c:	e037883a 	mov	sp,fp
 1015da0:	df000017 	ldw	fp,0(sp)
 1015da4:	dec00104 	addi	sp,sp,4
 1015da8:	f800283a 	ret

01015dac <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 1015dac:	defffa04 	addi	sp,sp,-24
 1015db0:	dfc00515 	stw	ra,20(sp)
 1015db4:	df000415 	stw	fp,16(sp)
 1015db8:	df000404 	addi	fp,sp,16
 1015dbc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1015dc0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015dc4:	0005303a 	rdctl	r2,status
 1015dc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015dcc:	e0fffd17 	ldw	r3,-12(fp)
 1015dd0:	00bfff84 	movi	r2,-2
 1015dd4:	1884703a 	and	r2,r3,r2
 1015dd8:	1001703a 	wrctl	status,r2
  
  return context;
 1015ddc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 1015de0:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 1015de4:	d0a72717 	ldw	r2,-25444(gp)
 1015de8:	10800044 	addi	r2,r2,1
 1015dec:	d0a72715 	stw	r2,-25444(gp)
 1015df0:	e0bffe17 	ldw	r2,-8(fp)
 1015df4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015df8:	e0bffc17 	ldw	r2,-16(fp)
 1015dfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 1015e00:	101e4300 	call	101e430 <OSTaskIdleHook>
    }
 1015e04:	003fef06 	br	1015dc4 <OS_TaskIdle+0x18>

01015e08 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 1015e08:	defffa04 	addi	sp,sp,-24
 1015e0c:	dfc00515 	stw	ra,20(sp)
 1015e10:	df000415 	stw	fp,16(sp)
 1015e14:	df000404 	addi	fp,sp,16
 1015e18:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1015e1c:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 1015e20:	00000206 	br	1015e2c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 1015e24:	01003204 	movi	r4,200
 1015e28:	101be840 	call	101be84 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 1015e2c:	d0a73803 	ldbu	r2,-25376(gp)
 1015e30:	10803fcc 	andi	r2,r2,255
 1015e34:	1005003a 	cmpeq	r2,r2,zero
 1015e38:	103ffa1e 	bne	r2,zero,1015e24 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 1015e3c:	d1272c17 	ldw	r4,-25424(gp)
 1015e40:	01401904 	movi	r5,100
 1015e44:	1012b0c0 	call	1012b0c <__udivsi3>
 1015e48:	d0a72c15 	stw	r2,-25424(gp)
    if (OSIdleCtrMax == 0L) {
 1015e4c:	d0a72c17 	ldw	r2,-25424(gp)
 1015e50:	1004c03a 	cmpne	r2,r2,zero
 1015e54:	1000031e 	bne	r2,zero,1015e64 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 1015e58:	d0272e05 	stb	zero,-25416(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 1015e5c:	01003fc4 	movi	r4,255
 1015e60:	101ba980 	call	101ba98 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015e64:	0005303a 	rdctl	r2,status
 1015e68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015e6c:	e0fffd17 	ldw	r3,-12(fp)
 1015e70:	00bfff84 	movi	r2,-2
 1015e74:	1884703a 	and	r2,r3,r2
 1015e78:	1001703a 	wrctl	status,r2
  
  return context;
 1015e7c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 1015e80:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 1015e84:	d0a72717 	ldw	r2,-25444(gp)
 1015e88:	d0a73915 	stw	r2,-25372(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 1015e8c:	d0272715 	stw	zero,-25444(gp)
 1015e90:	e0bffe17 	ldw	r2,-8(fp)
 1015e94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015e98:	e0bffc17 	ldw	r2,-16(fp)
 1015e9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 1015ea0:	d1273917 	ldw	r4,-25372(gp)
 1015ea4:	d1672c17 	ldw	r5,-25424(gp)
 1015ea8:	1012b0c0 	call	1012b0c <__udivsi3>
 1015eac:	1007883a 	mov	r3,r2
 1015eb0:	00801904 	movi	r2,100
 1015eb4:	10c5c83a 	sub	r2,r2,r3
 1015eb8:	d0a72e05 	stb	r2,-25416(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 1015ebc:	101e3c00 	call	101e3c0 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 1015ec0:	1015ed00 	call	1015ed0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 1015ec4:	01001904 	movi	r4,100
 1015ec8:	101be840 	call	101be84 <OSTimeDly>
    }
 1015ecc:	003fe506 	br	1015e64 <OS_TaskStat+0x5c>

01015ed0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 1015ed0:	defffa04 	addi	sp,sp,-24
 1015ed4:	dfc00515 	stw	ra,20(sp)
 1015ed8:	df000415 	stw	fp,16(sp)
 1015edc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 1015ee0:	e03ffc05 	stb	zero,-16(fp)
 1015ee4:	00002406 	br	1015f78 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 1015ee8:	e13ffc03 	ldbu	r4,-16(fp)
 1015eec:	e17ffe04 	addi	r5,fp,-8
 1015ef0:	101b89c0 	call	101b89c <OSTaskStkChk>
 1015ef4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 1015ef8:	e0bffc43 	ldbu	r2,-15(fp)
 1015efc:	1004c03a 	cmpne	r2,r2,zero
 1015f00:	10001a1e 	bne	r2,zero,1015f6c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 1015f04:	e0bffc03 	ldbu	r2,-16(fp)
 1015f08:	00c040f4 	movhi	r3,259
 1015f0c:	18ea5104 	addi	r3,r3,-22204
 1015f10:	1085883a 	add	r2,r2,r2
 1015f14:	1085883a 	add	r2,r2,r2
 1015f18:	10c5883a 	add	r2,r2,r3
 1015f1c:	10800017 	ldw	r2,0(r2)
 1015f20:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 1015f24:	e0bffd17 	ldw	r2,-12(fp)
 1015f28:	1005003a 	cmpeq	r2,r2,zero
 1015f2c:	10000f1e 	bne	r2,zero,1015f6c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 1015f30:	e0bffd17 	ldw	r2,-12(fp)
 1015f34:	10800060 	cmpeqi	r2,r2,1
 1015f38:	10000c1e 	bne	r2,zero,1015f6c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 1015f3c:	e0bffd17 	ldw	r2,-12(fp)
 1015f40:	10c00217 	ldw	r3,8(r2)
 1015f44:	e0bffd17 	ldw	r2,-12(fp)
 1015f48:	10800317 	ldw	r2,12(r2)
 1015f4c:	1085883a 	add	r2,r2,r2
 1015f50:	1085883a 	add	r2,r2,r2
 1015f54:	1887883a 	add	r3,r3,r2
 1015f58:	e0bffd17 	ldw	r2,-12(fp)
 1015f5c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 1015f60:	e0ffff17 	ldw	r3,-4(fp)
 1015f64:	e0bffd17 	ldw	r2,-12(fp)
 1015f68:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 1015f6c:	e0bffc03 	ldbu	r2,-16(fp)
 1015f70:	10800044 	addi	r2,r2,1
 1015f74:	e0bffc05 	stb	r2,-16(fp)
 1015f78:	e0bffc03 	ldbu	r2,-16(fp)
 1015f7c:	10800570 	cmpltui	r2,r2,21
 1015f80:	103fd91e 	bne	r2,zero,1015ee8 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 1015f84:	e037883a 	mov	sp,fp
 1015f88:	dfc00117 	ldw	ra,4(sp)
 1015f8c:	df000017 	ldw	fp,0(sp)
 1015f90:	dec00204 	addi	sp,sp,8
 1015f94:	f800283a 	ret

01015f98 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 1015f98:	defff104 	addi	sp,sp,-60
 1015f9c:	dfc00e15 	stw	ra,56(sp)
 1015fa0:	df000d15 	stw	fp,52(sp)
 1015fa4:	df000d04 	addi	fp,sp,52
 1015fa8:	e17ffb15 	stw	r5,-20(fp)
 1015fac:	e1bffc15 	stw	r6,-16(fp)
 1015fb0:	e0800417 	ldw	r2,16(fp)
 1015fb4:	e13ffa05 	stb	r4,-24(fp)
 1015fb8:	e1fffd0d 	sth	r7,-12(fp)
 1015fbc:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1015fc0:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015fc4:	0005303a 	rdctl	r2,status
 1015fc8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015fcc:	e0fff717 	ldw	r3,-36(fp)
 1015fd0:	00bfff84 	movi	r2,-2
 1015fd4:	1884703a 	and	r2,r3,r2
 1015fd8:	1001703a 	wrctl	status,r2
  
  return context;
 1015fdc:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 1015fe0:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 1015fe4:	d0a72d17 	ldw	r2,-25420(gp)
 1015fe8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 1015fec:	e0bff917 	ldw	r2,-28(fp)
 1015ff0:	1005003a 	cmpeq	r2,r2,zero
 1015ff4:	1000941e 	bne	r2,zero,1016248 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 1015ff8:	e0bff917 	ldw	r2,-28(fp)
 1015ffc:	10800517 	ldw	r2,20(r2)
 1016000:	d0a72d15 	stw	r2,-25420(gp)
 1016004:	e0bff817 	ldw	r2,-32(fp)
 1016008:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101600c:	e0bff617 	ldw	r2,-40(fp)
 1016010:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 1016014:	e0fff917 	ldw	r3,-28(fp)
 1016018:	e0bffb17 	ldw	r2,-20(fp)
 101601c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 1016020:	e0fff917 	ldw	r3,-28(fp)
 1016024:	e0bffa03 	ldbu	r2,-24(fp)
 1016028:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 101602c:	e0bff917 	ldw	r2,-28(fp)
 1016030:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 1016034:	e0bff917 	ldw	r2,-28(fp)
 1016038:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 101603c:	e0bff917 	ldw	r2,-28(fp)
 1016040:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 1016044:	e0fff917 	ldw	r3,-28(fp)
 1016048:	e0800317 	ldw	r2,12(fp)
 101604c:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 1016050:	e0fff917 	ldw	r3,-28(fp)
 1016054:	e0800217 	ldw	r2,8(fp)
 1016058:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 101605c:	e0fff917 	ldw	r3,-28(fp)
 1016060:	e0bffc17 	ldw	r2,-16(fp)
 1016064:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 1016068:	e0fff917 	ldw	r3,-28(fp)
 101606c:	e0bffe0b 	ldhu	r2,-8(fp)
 1016070:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 1016074:	e0fff917 	ldw	r3,-28(fp)
 1016078:	e0bffd0b 	ldhu	r2,-12(fp)
 101607c:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 1016080:	e0bff917 	ldw	r2,-28(fp)
 1016084:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 1016088:	e0bffa03 	ldbu	r2,-24(fp)
 101608c:	1004d0fa 	srli	r2,r2,3
 1016090:	1007883a 	mov	r3,r2
 1016094:	e0bff917 	ldw	r2,-28(fp)
 1016098:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 101609c:	e0bffa03 	ldbu	r2,-24(fp)
 10160a0:	108001cc 	andi	r2,r2,7
 10160a4:	1007883a 	mov	r3,r2
 10160a8:	e0bff917 	ldw	r2,-28(fp)
 10160ac:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 10160b0:	e0bff917 	ldw	r2,-28(fp)
 10160b4:	10800d03 	ldbu	r2,52(r2)
 10160b8:	10c03fcc 	andi	r3,r2,255
 10160bc:	00800044 	movi	r2,1
 10160c0:	10c4983a 	sll	r2,r2,r3
 10160c4:	1007883a 	mov	r3,r2
 10160c8:	e0bff917 	ldw	r2,-28(fp)
 10160cc:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 10160d0:	e0bff917 	ldw	r2,-28(fp)
 10160d4:	10800cc3 	ldbu	r2,51(r2)
 10160d8:	10c03fcc 	andi	r3,r2,255
 10160dc:	00800044 	movi	r2,1
 10160e0:	10c4983a 	sll	r2,r2,r3
 10160e4:	1007883a 	mov	r3,r2
 10160e8:	e0bff917 	ldw	r2,-28(fp)
 10160ec:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 10160f0:	e0bff917 	ldw	r2,-28(fp)
 10160f4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 10160f8:	e0bff917 	ldw	r2,-28(fp)
 10160fc:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 1016100:	e0bff917 	ldw	r2,-28(fp)
 1016104:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 1016108:	e0bff917 	ldw	r2,-28(fp)
 101610c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 1016110:	e0bff917 	ldw	r2,-28(fp)
 1016114:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 1016118:	e0bff917 	ldw	r2,-28(fp)
 101611c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 1016120:	e0bff917 	ldw	r2,-28(fp)
 1016124:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 1016128:	e0bff917 	ldw	r2,-28(fp)
 101612c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 1016130:	e0bff917 	ldw	r2,-28(fp)
 1016134:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 1016138:	e0fff917 	ldw	r3,-28(fp)
 101613c:	00800fc4 	movi	r2,63
 1016140:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 1016144:	e0bff917 	ldw	r2,-28(fp)
 1016148:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 101614c:	e13ff917 	ldw	r4,-28(fp)
 1016150:	101e44c0 	call	101e44c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 1016154:	e13ff917 	ldw	r4,-28(fp)
 1016158:	101e3640 	call	101e364 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101615c:	0005303a 	rdctl	r2,status
 1016160:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016164:	e0fff517 	ldw	r3,-44(fp)
 1016168:	00bfff84 	movi	r2,-2
 101616c:	1884703a 	and	r2,r3,r2
 1016170:	1001703a 	wrctl	status,r2
  
  return context;
 1016174:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 1016178:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 101617c:	e0bffa03 	ldbu	r2,-24(fp)
 1016180:	00c040f4 	movhi	r3,259
 1016184:	18ea5104 	addi	r3,r3,-22204
 1016188:	1085883a 	add	r2,r2,r2
 101618c:	1085883a 	add	r2,r2,r2
 1016190:	10c7883a 	add	r3,r2,r3
 1016194:	e0bff917 	ldw	r2,-28(fp)
 1016198:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 101619c:	d0e72917 	ldw	r3,-25436(gp)
 10161a0:	e0bff917 	ldw	r2,-28(fp)
 10161a4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 10161a8:	e0bff917 	ldw	r2,-28(fp)
 10161ac:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 10161b0:	d0a72917 	ldw	r2,-25436(gp)
 10161b4:	1005003a 	cmpeq	r2,r2,zero
 10161b8:	1000031e 	bne	r2,zero,10161c8 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 10161bc:	d0e72917 	ldw	r3,-25436(gp)
 10161c0:	e0bff917 	ldw	r2,-28(fp)
 10161c4:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 10161c8:	e0bff917 	ldw	r2,-28(fp)
 10161cc:	d0a72915 	stw	r2,-25436(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 10161d0:	e0bff917 	ldw	r2,-28(fp)
 10161d4:	10c00d83 	ldbu	r3,54(r2)
 10161d8:	d0a73203 	ldbu	r2,-25400(gp)
 10161dc:	1884b03a 	or	r2,r3,r2
 10161e0:	d0a73205 	stb	r2,-25400(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 10161e4:	e0bff917 	ldw	r2,-28(fp)
 10161e8:	10800d03 	ldbu	r2,52(r2)
 10161ec:	11003fcc 	andi	r4,r2,255
 10161f0:	e0bff917 	ldw	r2,-28(fp)
 10161f4:	10800d03 	ldbu	r2,52(r2)
 10161f8:	10c03fcc 	andi	r3,r2,255
 10161fc:	d0a73244 	addi	r2,gp,-25399
 1016200:	1885883a 	add	r2,r3,r2
 1016204:	10c00003 	ldbu	r3,0(r2)
 1016208:	e0bff917 	ldw	r2,-28(fp)
 101620c:	10800d43 	ldbu	r2,53(r2)
 1016210:	1884b03a 	or	r2,r3,r2
 1016214:	1007883a 	mov	r3,r2
 1016218:	d0a73244 	addi	r2,gp,-25399
 101621c:	2085883a 	add	r2,r4,r2
 1016220:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 1016224:	d0a72e43 	ldbu	r2,-25415(gp)
 1016228:	10800044 	addi	r2,r2,1
 101622c:	d0a72e45 	stb	r2,-25415(gp)
 1016230:	e0bff817 	ldw	r2,-32(fp)
 1016234:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016238:	e0bff417 	ldw	r2,-48(fp)
 101623c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 1016240:	e03fff15 	stw	zero,-4(fp)
 1016244:	00000606 	br	1016260 <OS_TCBInit+0x2c8>
 1016248:	e0bff817 	ldw	r2,-32(fp)
 101624c:	e0bff315 	stw	r2,-52(fp)
 1016250:	e0bff317 	ldw	r2,-52(fp)
 1016254:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 1016258:	00801084 	movi	r2,66
 101625c:	e0bfff15 	stw	r2,-4(fp)
 1016260:	e0bfff17 	ldw	r2,-4(fp)
}
 1016264:	e037883a 	mov	sp,fp
 1016268:	dfc00117 	ldw	ra,4(sp)
 101626c:	df000017 	ldw	fp,0(sp)
 1016270:	dec00204 	addi	sp,sp,8
 1016274:	f800283a 	ret

01016278 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 1016278:	defffe04 	addi	sp,sp,-8
 101627c:	df000115 	stw	fp,4(sp)
 1016280:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 1016284:	d0a01d04 	addi	r2,gp,-32652
 1016288:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 101628c:	d0a01e04 	addi	r2,gp,-32648
 1016290:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 1016294:	d0a01f84 	addi	r2,gp,-32642
 1016298:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 101629c:	d0a02004 	addi	r2,gp,-32640
 10162a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 10162a4:	d0a01f04 	addi	r2,gp,-32644
 10162a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 10162ac:	d0a02084 	addi	r2,gp,-32638
 10162b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 10162b4:	d0a02104 	addi	r2,gp,-32636
 10162b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 10162bc:	d0a02184 	addi	r2,gp,-32634
 10162c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 10162c4:	d0a02204 	addi	r2,gp,-32632
 10162c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 10162cc:	d0a02284 	addi	r2,gp,-32630
 10162d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 10162d4:	d0a02304 	addi	r2,gp,-32628
 10162d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 10162dc:	d0a02384 	addi	r2,gp,-32626
 10162e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 10162e4:	d0a02404 	addi	r2,gp,-32624
 10162e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 10162ec:	d0a02484 	addi	r2,gp,-32622
 10162f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 10162f4:	d0a02504 	addi	r2,gp,-32620
 10162f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 10162fc:	d0a02584 	addi	r2,gp,-32618
 1016300:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 1016304:	d0a02604 	addi	r2,gp,-32616
 1016308:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 101630c:	d0a02684 	addi	r2,gp,-32614
 1016310:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 1016314:	d0a02704 	addi	r2,gp,-32612
 1016318:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 101631c:	d0a02784 	addi	r2,gp,-32610
 1016320:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 1016324:	d0a02804 	addi	r2,gp,-32608
 1016328:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 101632c:	d0a02884 	addi	r2,gp,-32606
 1016330:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 1016334:	d0a02904 	addi	r2,gp,-32604
 1016338:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 101633c:	d0a02984 	addi	r2,gp,-32602
 1016340:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 1016344:	d0a02a04 	addi	r2,gp,-32600
 1016348:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 101634c:	d0a02a84 	addi	r2,gp,-32598
 1016350:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 1016354:	d0a02b04 	addi	r2,gp,-32596
 1016358:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 101635c:	d0a02b84 	addi	r2,gp,-32594
 1016360:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 1016364:	d0a02c04 	addi	r2,gp,-32592
 1016368:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 101636c:	d0a02c84 	addi	r2,gp,-32590
 1016370:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 1016374:	d0a02d04 	addi	r2,gp,-32588
 1016378:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 101637c:	d0a02d84 	addi	r2,gp,-32586
 1016380:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 1016384:	d0a02e04 	addi	r2,gp,-32584
 1016388:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 101638c:	d0a02e84 	addi	r2,gp,-32582
 1016390:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 1016394:	d0a02f04 	addi	r2,gp,-32580
 1016398:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 101639c:	d0a02f84 	addi	r2,gp,-32578
 10163a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 10163a4:	d0a03004 	addi	r2,gp,-32576
 10163a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 10163ac:	d0a03084 	addi	r2,gp,-32574
 10163b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 10163b4:	d0a03104 	addi	r2,gp,-32572
 10163b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 10163bc:	d0a03184 	addi	r2,gp,-32570
 10163c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 10163c4:	d0a03204 	addi	r2,gp,-32568
 10163c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 10163cc:	d0a03284 	addi	r2,gp,-32566
 10163d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 10163d4:	d0a03304 	addi	r2,gp,-32564
 10163d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 10163dc:	d0a03384 	addi	r2,gp,-32562
 10163e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 10163e4:	d0a03404 	addi	r2,gp,-32560
 10163e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 10163ec:	d0a03904 	addi	r2,gp,-32540
 10163f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 10163f4:	e037883a 	mov	sp,fp
 10163f8:	df000017 	ldw	fp,0(sp)
 10163fc:	dec00104 	addi	sp,sp,4
 1016400:	f800283a 	ret

01016404 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 1016404:	defff104 	addi	sp,sp,-60
 1016408:	df000e15 	stw	fp,56(sp)
 101640c:	df000e04 	addi	fp,sp,56
 1016410:	e13ffa15 	stw	r4,-24(fp)
 1016414:	e1fffd15 	stw	r7,-12(fp)
 1016418:	e17ffb0d 	sth	r5,-20(fp)
 101641c:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 1016420:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1016424:	e0bffd17 	ldw	r2,-12(fp)
 1016428:	1004c03a 	cmpne	r2,r2,zero
 101642c:	1000021e 	bne	r2,zero,1016438 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 1016430:	e03fff15 	stw	zero,-4(fp)
 1016434:	0000bb06 	br	1016724 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 1016438:	e0bffa17 	ldw	r2,-24(fp)
 101643c:	1004c03a 	cmpne	r2,r2,zero
 1016440:	1000051e 	bne	r2,zero,1016458 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1016444:	e0fffd17 	ldw	r3,-12(fp)
 1016448:	00801b84 	movi	r2,110
 101644c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1016450:	e03fff15 	stw	zero,-4(fp)
 1016454:	0000b306 	br	1016724 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 1016458:	e0bffa17 	ldw	r2,-24(fp)
 101645c:	10800003 	ldbu	r2,0(r2)
 1016460:	10803fcc 	andi	r2,r2,255
 1016464:	10800160 	cmpeqi	r2,r2,5
 1016468:	1000051e 	bne	r2,zero,1016480 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 101646c:	e0fffd17 	ldw	r3,-12(fp)
 1016470:	00800044 	movi	r2,1
 1016474:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1016478:	e03fff15 	stw	zero,-4(fp)
 101647c:	0000a906 	br	1016724 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 1016480:	e0fffc03 	ldbu	r3,-16(fp)
 1016484:	00bfe004 	movi	r2,-128
 1016488:	1884703a 	and	r2,r3,r2
 101648c:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 1016490:	e0bff943 	ldbu	r2,-27(fp)
 1016494:	1005003a 	cmpeq	r2,r2,zero
 1016498:	1000061e 	bne	r2,zero,10164b4 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 101649c:	e0bffc03 	ldbu	r2,-16(fp)
 10164a0:	10801fcc 	andi	r2,r2,127
 10164a4:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 10164a8:	00800044 	movi	r2,1
 10164ac:	e0bff905 	stb	r2,-28(fp)
 10164b0:	00000106 	br	10164b8 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 10164b4:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 10164b8:	e0bffd17 	ldw	r2,-12(fp)
 10164bc:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10164c0:	0005303a 	rdctl	r2,status
 10164c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10164c8:	e0fff717 	ldw	r3,-36(fp)
 10164cc:	00bfff84 	movi	r2,-2
 10164d0:	1884703a 	and	r2,r3,r2
 10164d4:	1001703a 	wrctl	status,r2
  
  return context;
 10164d8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 10164dc:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 10164e0:	e0bffc03 	ldbu	r2,-16(fp)
 10164e4:	e0bffe15 	stw	r2,-8(fp)
 10164e8:	e0fffe17 	ldw	r3,-8(fp)
 10164ec:	18800060 	cmpeqi	r2,r3,1
 10164f0:	1000651e 	bne	r2,zero,1016688 <OSFlagAccept+0x284>
 10164f4:	e0fffe17 	ldw	r3,-8(fp)
 10164f8:	18800088 	cmpgei	r2,r3,2
 10164fc:	1000041e 	bne	r2,zero,1016510 <OSFlagAccept+0x10c>
 1016500:	e0fffe17 	ldw	r3,-8(fp)
 1016504:	1805003a 	cmpeq	r2,r3,zero
 1016508:	1000421e 	bne	r2,zero,1016614 <OSFlagAccept+0x210>
 101650c:	00007b06 	br	10166fc <OSFlagAccept+0x2f8>
 1016510:	e0fffe17 	ldw	r3,-8(fp)
 1016514:	188000a0 	cmpeqi	r2,r3,2
 1016518:	1000041e 	bne	r2,zero,101652c <OSFlagAccept+0x128>
 101651c:	e0fffe17 	ldw	r3,-8(fp)
 1016520:	188000e0 	cmpeqi	r2,r3,3
 1016524:	10001e1e 	bne	r2,zero,10165a0 <OSFlagAccept+0x19c>
 1016528:	00007406 	br	10166fc <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 101652c:	e0bffa17 	ldw	r2,-24(fp)
 1016530:	10c0020b 	ldhu	r3,8(r2)
 1016534:	e0bffb0b 	ldhu	r2,-20(fp)
 1016538:	1884703a 	and	r2,r3,r2
 101653c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 1016540:	e0fff98b 	ldhu	r3,-26(fp)
 1016544:	e0bffb0b 	ldhu	r2,-20(fp)
 1016548:	18800d1e 	bne	r3,r2,1016580 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101654c:	e0bff903 	ldbu	r2,-28(fp)
 1016550:	10800058 	cmpnei	r2,r2,1
 1016554:	10000d1e 	bne	r2,zero,101658c <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 1016558:	e0bffa17 	ldw	r2,-24(fp)
 101655c:	1080020b 	ldhu	r2,8(r2)
 1016560:	1007883a 	mov	r3,r2
 1016564:	e0bff98b 	ldhu	r2,-26(fp)
 1016568:	0084303a 	nor	r2,zero,r2
 101656c:	1884703a 	and	r2,r3,r2
 1016570:	1007883a 	mov	r3,r2
 1016574:	e0bffa17 	ldw	r2,-24(fp)
 1016578:	10c0020d 	sth	r3,8(r2)
 101657c:	00000306 	br	101658c <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 1016580:	e0fffd17 	ldw	r3,-12(fp)
 1016584:	00801c04 	movi	r2,112
 1016588:	18800005 	stb	r2,0(r3)
 101658c:	e0bff817 	ldw	r2,-32(fp)
 1016590:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016594:	e0bff617 	ldw	r2,-40(fp)
 1016598:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 101659c:	00005f06 	br	101671c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 10165a0:	e0bffa17 	ldw	r2,-24(fp)
 10165a4:	10c0020b 	ldhu	r3,8(r2)
 10165a8:	e0bffb0b 	ldhu	r2,-20(fp)
 10165ac:	1884703a 	and	r2,r3,r2
 10165b0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 10165b4:	e0bff98b 	ldhu	r2,-26(fp)
 10165b8:	1005003a 	cmpeq	r2,r2,zero
 10165bc:	10000d1e 	bne	r2,zero,10165f4 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 10165c0:	e0bff903 	ldbu	r2,-28(fp)
 10165c4:	10800058 	cmpnei	r2,r2,1
 10165c8:	10000d1e 	bne	r2,zero,1016600 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 10165cc:	e0bffa17 	ldw	r2,-24(fp)
 10165d0:	1080020b 	ldhu	r2,8(r2)
 10165d4:	1007883a 	mov	r3,r2
 10165d8:	e0bff98b 	ldhu	r2,-26(fp)
 10165dc:	0084303a 	nor	r2,zero,r2
 10165e0:	1884703a 	and	r2,r3,r2
 10165e4:	1007883a 	mov	r3,r2
 10165e8:	e0bffa17 	ldw	r2,-24(fp)
 10165ec:	10c0020d 	sth	r3,8(r2)
 10165f0:	00000306 	br	1016600 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 10165f4:	e0fffd17 	ldw	r3,-12(fp)
 10165f8:	00801c04 	movi	r2,112
 10165fc:	18800005 	stb	r2,0(r3)
 1016600:	e0bff817 	ldw	r2,-32(fp)
 1016604:	e0bff515 	stw	r2,-44(fp)
 1016608:	e0bff517 	ldw	r2,-44(fp)
 101660c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 1016610:	00004206 	br	101671c <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 1016614:	e0bffa17 	ldw	r2,-24(fp)
 1016618:	1080020b 	ldhu	r2,8(r2)
 101661c:	0084303a 	nor	r2,zero,r2
 1016620:	1007883a 	mov	r3,r2
 1016624:	e0bffb0b 	ldhu	r2,-20(fp)
 1016628:	1884703a 	and	r2,r3,r2
 101662c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 1016630:	e0fff98b 	ldhu	r3,-26(fp)
 1016634:	e0bffb0b 	ldhu	r2,-20(fp)
 1016638:	18800b1e 	bne	r3,r2,1016668 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101663c:	e0bff903 	ldbu	r2,-28(fp)
 1016640:	10800058 	cmpnei	r2,r2,1
 1016644:	10000b1e 	bne	r2,zero,1016674 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 1016648:	e0bffa17 	ldw	r2,-24(fp)
 101664c:	10c0020b 	ldhu	r3,8(r2)
 1016650:	e0bff98b 	ldhu	r2,-26(fp)
 1016654:	1884b03a 	or	r2,r3,r2
 1016658:	1007883a 	mov	r3,r2
 101665c:	e0bffa17 	ldw	r2,-24(fp)
 1016660:	10c0020d 	sth	r3,8(r2)
 1016664:	00000306 	br	1016674 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 1016668:	e0fffd17 	ldw	r3,-12(fp)
 101666c:	00801c04 	movi	r2,112
 1016670:	18800005 	stb	r2,0(r3)
 1016674:	e0bff817 	ldw	r2,-32(fp)
 1016678:	e0bff415 	stw	r2,-48(fp)
 101667c:	e0bff417 	ldw	r2,-48(fp)
 1016680:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 1016684:	00002506 	br	101671c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 1016688:	e0bffa17 	ldw	r2,-24(fp)
 101668c:	1080020b 	ldhu	r2,8(r2)
 1016690:	0084303a 	nor	r2,zero,r2
 1016694:	1007883a 	mov	r3,r2
 1016698:	e0bffb0b 	ldhu	r2,-20(fp)
 101669c:	1884703a 	and	r2,r3,r2
 10166a0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 10166a4:	e0bff98b 	ldhu	r2,-26(fp)
 10166a8:	1005003a 	cmpeq	r2,r2,zero
 10166ac:	10000b1e 	bne	r2,zero,10166dc <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 10166b0:	e0bff903 	ldbu	r2,-28(fp)
 10166b4:	10800058 	cmpnei	r2,r2,1
 10166b8:	10000b1e 	bne	r2,zero,10166e8 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 10166bc:	e0bffa17 	ldw	r2,-24(fp)
 10166c0:	10c0020b 	ldhu	r3,8(r2)
 10166c4:	e0bff98b 	ldhu	r2,-26(fp)
 10166c8:	1884b03a 	or	r2,r3,r2
 10166cc:	1007883a 	mov	r3,r2
 10166d0:	e0bffa17 	ldw	r2,-24(fp)
 10166d4:	10c0020d 	sth	r3,8(r2)
 10166d8:	00000306 	br	10166e8 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 10166dc:	e0fffd17 	ldw	r3,-12(fp)
 10166e0:	00801c04 	movi	r2,112
 10166e4:	18800005 	stb	r2,0(r3)
 10166e8:	e0bff817 	ldw	r2,-32(fp)
 10166ec:	e0bff315 	stw	r2,-52(fp)
 10166f0:	e0bff317 	ldw	r2,-52(fp)
 10166f4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 10166f8:	00000806 	br	101671c <OSFlagAccept+0x318>
 10166fc:	e0bff817 	ldw	r2,-32(fp)
 1016700:	e0bff215 	stw	r2,-56(fp)
 1016704:	e0bff217 	ldw	r2,-56(fp)
 1016708:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 101670c:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 1016710:	e0fffd17 	ldw	r3,-12(fp)
 1016714:	00801bc4 	movi	r2,111
 1016718:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 101671c:	e0bff98b 	ldhu	r2,-26(fp)
 1016720:	e0bfff15 	stw	r2,-4(fp)
 1016724:	e0bfff17 	ldw	r2,-4(fp)
}
 1016728:	e037883a 	mov	sp,fp
 101672c:	df000017 	ldw	fp,0(sp)
 1016730:	dec00104 	addi	sp,sp,4
 1016734:	f800283a 	ret

01016738 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 1016738:	defff704 	addi	sp,sp,-36
 101673c:	df000815 	stw	fp,32(sp)
 1016740:	df000804 	addi	fp,sp,32
 1016744:	e17ffe15 	stw	r5,-8(fp)
 1016748:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 101674c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 1016750:	e0bffe17 	ldw	r2,-8(fp)
 1016754:	1004c03a 	cmpne	r2,r2,zero
 1016758:	1000021e 	bne	r2,zero,1016764 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 101675c:	e03fff15 	stw	zero,-4(fp)
 1016760:	00003f06 	br	1016860 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 1016764:	008040b4 	movhi	r2,258
 1016768:	108bc604 	addi	r2,r2,12056
 101676c:	10800003 	ldbu	r2,0(r2)
 1016770:	10803fcc 	andi	r2,r2,255
 1016774:	1005003a 	cmpeq	r2,r2,zero
 1016778:	1000051e 	bne	r2,zero,1016790 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 101677c:	e0fffe17 	ldw	r3,-8(fp)
 1016780:	00800404 	movi	r2,16
 1016784:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 1016788:	e03fff15 	stw	zero,-4(fp)
 101678c:	00003406 	br	1016860 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1016790:	0005303a 	rdctl	r2,status
 1016794:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016798:	e0fffa17 	ldw	r3,-24(fp)
 101679c:	00bfff84 	movi	r2,-2
 10167a0:	1884703a 	and	r2,r3,r2
 10167a4:	1001703a 	wrctl	status,r2
  
  return context;
 10167a8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 10167ac:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 10167b0:	008040b4 	movhi	r2,258
 10167b4:	108bc904 	addi	r2,r2,12068
 10167b8:	10800017 	ldw	r2,0(r2)
 10167bc:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 10167c0:	e0bffc17 	ldw	r2,-16(fp)
 10167c4:	1005003a 	cmpeq	r2,r2,zero
 10167c8:	10001c1e 	bne	r2,zero,101683c <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 10167cc:	008040b4 	movhi	r2,258
 10167d0:	108bc904 	addi	r2,r2,12068
 10167d4:	10800017 	ldw	r2,0(r2)
 10167d8:	10800117 	ldw	r2,4(r2)
 10167dc:	1007883a 	mov	r3,r2
 10167e0:	008040b4 	movhi	r2,258
 10167e4:	108bc904 	addi	r2,r2,12068
 10167e8:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 10167ec:	e0fffc17 	ldw	r3,-16(fp)
 10167f0:	00800144 	movi	r2,5
 10167f4:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 10167f8:	e0fffc17 	ldw	r3,-16(fp)
 10167fc:	e0bffd0b 	ldhu	r2,-12(fp)
 1016800:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 1016804:	e0bffc17 	ldw	r2,-16(fp)
 1016808:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 101680c:	e0fffc17 	ldw	r3,-16(fp)
 1016810:	00800fc4 	movi	r2,63
 1016814:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 1016818:	e0bffc17 	ldw	r2,-16(fp)
 101681c:	100002c5 	stb	zero,11(r2)
 1016820:	e0bffb17 	ldw	r2,-20(fp)
 1016824:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016828:	e0bff917 	ldw	r2,-28(fp)
 101682c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 1016830:	e0bffe17 	ldw	r2,-8(fp)
 1016834:	10000005 	stb	zero,0(r2)
 1016838:	00000706 	br	1016858 <OSFlagCreate+0x120>
 101683c:	e0bffb17 	ldw	r2,-20(fp)
 1016840:	e0bff815 	stw	r2,-32(fp)
 1016844:	e0bff817 	ldw	r2,-32(fp)
 1016848:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 101684c:	e0fffe17 	ldw	r3,-8(fp)
 1016850:	00801c84 	movi	r2,114
 1016854:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 1016858:	e0bffc17 	ldw	r2,-16(fp)
 101685c:	e0bfff15 	stw	r2,-4(fp)
 1016860:	e0bfff17 	ldw	r2,-4(fp)
}
 1016864:	e037883a 	mov	sp,fp
 1016868:	df000017 	ldw	fp,0(sp)
 101686c:	dec00104 	addi	sp,sp,4
 1016870:	f800283a 	ret

01016874 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 1016874:	defff004 	addi	sp,sp,-64
 1016878:	dfc00f15 	stw	ra,60(sp)
 101687c:	df000e15 	stw	fp,56(sp)
 1016880:	df000e04 	addi	fp,sp,56
 1016884:	e13ffb15 	stw	r4,-20(fp)
 1016888:	e1bffd15 	stw	r6,-12(fp)
 101688c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 1016890:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1016894:	e0bffd17 	ldw	r2,-12(fp)
 1016898:	1004c03a 	cmpne	r2,r2,zero
 101689c:	1000031e 	bne	r2,zero,10168ac <OSFlagDel+0x38>
        return (pgrp);
 10168a0:	e0bffb17 	ldw	r2,-20(fp)
 10168a4:	e0bfff15 	stw	r2,-4(fp)
 10168a8:	00009606 	br	1016b04 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 10168ac:	e0bffb17 	ldw	r2,-20(fp)
 10168b0:	1004c03a 	cmpne	r2,r2,zero
 10168b4:	1000061e 	bne	r2,zero,10168d0 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 10168b8:	e0fffd17 	ldw	r3,-12(fp)
 10168bc:	00801b84 	movi	r2,110
 10168c0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 10168c4:	e0fffb17 	ldw	r3,-20(fp)
 10168c8:	e0ffff15 	stw	r3,-4(fp)
 10168cc:	00008d06 	br	1016b04 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 10168d0:	008040b4 	movhi	r2,258
 10168d4:	108bc604 	addi	r2,r2,12056
 10168d8:	10800003 	ldbu	r2,0(r2)
 10168dc:	10803fcc 	andi	r2,r2,255
 10168e0:	1005003a 	cmpeq	r2,r2,zero
 10168e4:	1000061e 	bne	r2,zero,1016900 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 10168e8:	e0fffd17 	ldw	r3,-12(fp)
 10168ec:	008003c4 	movi	r2,15
 10168f0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 10168f4:	e0bffb17 	ldw	r2,-20(fp)
 10168f8:	e0bfff15 	stw	r2,-4(fp)
 10168fc:	00008106 	br	1016b04 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 1016900:	e0bffb17 	ldw	r2,-20(fp)
 1016904:	10800003 	ldbu	r2,0(r2)
 1016908:	10803fcc 	andi	r2,r2,255
 101690c:	10800160 	cmpeqi	r2,r2,5
 1016910:	1000061e 	bne	r2,zero,101692c <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 1016914:	e0fffd17 	ldw	r3,-12(fp)
 1016918:	00800044 	movi	r2,1
 101691c:	18800005 	stb	r2,0(r3)
        return (pgrp);
 1016920:	e0fffb17 	ldw	r3,-20(fp)
 1016924:	e0ffff15 	stw	r3,-4(fp)
 1016928:	00007606 	br	1016b04 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101692c:	0005303a 	rdctl	r2,status
 1016930:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016934:	e0fff617 	ldw	r3,-40(fp)
 1016938:	00bfff84 	movi	r2,-2
 101693c:	1884703a 	and	r2,r3,r2
 1016940:	1001703a 	wrctl	status,r2
  
  return context;
 1016944:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 1016948:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 101694c:	e0bffb17 	ldw	r2,-20(fp)
 1016950:	10800117 	ldw	r2,4(r2)
 1016954:	1005003a 	cmpeq	r2,r2,zero
 1016958:	1000031e 	bne	r2,zero,1016968 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 101695c:	00800044 	movi	r2,1
 1016960:	e0bffa05 	stb	r2,-24(fp)
 1016964:	00000106 	br	101696c <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 1016968:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 101696c:	e0bffc03 	ldbu	r2,-16(fp)
 1016970:	e0bffe15 	stw	r2,-8(fp)
 1016974:	e0fffe17 	ldw	r3,-8(fp)
 1016978:	1805003a 	cmpeq	r2,r3,zero
 101697c:	1000041e 	bne	r2,zero,1016990 <OSFlagDel+0x11c>
 1016980:	e0fffe17 	ldw	r3,-8(fp)
 1016984:	18800060 	cmpeqi	r2,r3,1
 1016988:	1000281e 	bne	r2,zero,1016a2c <OSFlagDel+0x1b8>
 101698c:	00005206 	br	1016ad8 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 1016990:	e0bffa03 	ldbu	r2,-24(fp)
 1016994:	1004c03a 	cmpne	r2,r2,zero
 1016998:	10001a1e 	bne	r2,zero,1016a04 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 101699c:	e0fffb17 	ldw	r3,-20(fp)
 10169a0:	00800fc4 	movi	r2,63
 10169a4:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 10169a8:	e0bffb17 	ldw	r2,-20(fp)
 10169ac:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 10169b0:	e0bffb17 	ldw	r2,-20(fp)
 10169b4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 10169b8:	008040b4 	movhi	r2,258
 10169bc:	108bc904 	addi	r2,r2,12068
 10169c0:	10c00017 	ldw	r3,0(r2)
 10169c4:	e0bffb17 	ldw	r2,-20(fp)
 10169c8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 10169cc:	e0bffb17 	ldw	r2,-20(fp)
 10169d0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 10169d4:	00c040b4 	movhi	r3,258
 10169d8:	18cbc904 	addi	r3,r3,12068
 10169dc:	e0bffb17 	ldw	r2,-20(fp)
 10169e0:	18800015 	stw	r2,0(r3)
 10169e4:	e0bff717 	ldw	r2,-36(fp)
 10169e8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10169ec:	e0bff517 	ldw	r2,-44(fp)
 10169f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 10169f4:	e0bffd17 	ldw	r2,-12(fp)
 10169f8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 10169fc:	e03ff815 	stw	zero,-32(fp)
 1016a00:	00003e06 	br	1016afc <OSFlagDel+0x288>
 1016a04:	e0bff717 	ldw	r2,-36(fp)
 1016a08:	e0bff415 	stw	r2,-48(fp)
 1016a0c:	e0bff417 	ldw	r2,-48(fp)
 1016a10:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 1016a14:	e0fffd17 	ldw	r3,-12(fp)
 1016a18:	00801244 	movi	r2,73
 1016a1c:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 1016a20:	e0bffb17 	ldw	r2,-20(fp)
 1016a24:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 1016a28:	00003406 	br	1016afc <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 1016a2c:	e0bffb17 	ldw	r2,-20(fp)
 1016a30:	10800117 	ldw	r2,4(r2)
 1016a34:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 1016a38:	00000606 	br	1016a54 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 1016a3c:	e13ff917 	ldw	r4,-28(fp)
 1016a40:	000b883a 	mov	r5,zero
 1016a44:	1017b840 	call	1017b84 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 1016a48:	e0bff917 	ldw	r2,-28(fp)
 1016a4c:	10800017 	ldw	r2,0(r2)
 1016a50:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 1016a54:	e0bff917 	ldw	r2,-28(fp)
 1016a58:	1004c03a 	cmpne	r2,r2,zero
 1016a5c:	103ff71e 	bne	r2,zero,1016a3c <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 1016a60:	e0fffb17 	ldw	r3,-20(fp)
 1016a64:	00800fc4 	movi	r2,63
 1016a68:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 1016a6c:	e0bffb17 	ldw	r2,-20(fp)
 1016a70:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 1016a74:	e0bffb17 	ldw	r2,-20(fp)
 1016a78:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 1016a7c:	008040b4 	movhi	r2,258
 1016a80:	108bc904 	addi	r2,r2,12068
 1016a84:	10c00017 	ldw	r3,0(r2)
 1016a88:	e0bffb17 	ldw	r2,-20(fp)
 1016a8c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 1016a90:	e0bffb17 	ldw	r2,-20(fp)
 1016a94:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 1016a98:	00c040b4 	movhi	r3,258
 1016a9c:	18cbc904 	addi	r3,r3,12068
 1016aa0:	e0bffb17 	ldw	r2,-20(fp)
 1016aa4:	18800015 	stw	r2,0(r3)
 1016aa8:	e0bff717 	ldw	r2,-36(fp)
 1016aac:	e0bff315 	stw	r2,-52(fp)
 1016ab0:	e0bff317 	ldw	r2,-52(fp)
 1016ab4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1016ab8:	e0bffa03 	ldbu	r2,-24(fp)
 1016abc:	10800058 	cmpnei	r2,r2,1
 1016ac0:	1000011e 	bne	r2,zero,1016ac8 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 1016ac4:	1015b900 	call	1015b90 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 1016ac8:	e0bffd17 	ldw	r2,-12(fp)
 1016acc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 1016ad0:	e03ff815 	stw	zero,-32(fp)
             break;
 1016ad4:	00000906 	br	1016afc <OSFlagDel+0x288>
 1016ad8:	e0bff717 	ldw	r2,-36(fp)
 1016adc:	e0bff215 	stw	r2,-56(fp)
 1016ae0:	e0bff217 	ldw	r2,-56(fp)
 1016ae4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 1016ae8:	e0fffd17 	ldw	r3,-12(fp)
 1016aec:	008001c4 	movi	r2,7
 1016af0:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 1016af4:	e0bffb17 	ldw	r2,-20(fp)
 1016af8:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 1016afc:	e0bff817 	ldw	r2,-32(fp)
 1016b00:	e0bfff15 	stw	r2,-4(fp)
 1016b04:	e0bfff17 	ldw	r2,-4(fp)
}
 1016b08:	e037883a 	mov	sp,fp
 1016b0c:	dfc00117 	ldw	ra,4(sp)
 1016b10:	df000017 	ldw	fp,0(sp)
 1016b14:	dec00204 	addi	sp,sp,8
 1016b18:	f800283a 	ret

01016b1c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 1016b1c:	defff504 	addi	sp,sp,-44
 1016b20:	dfc00a15 	stw	ra,40(sp)
 1016b24:	df000915 	stw	fp,36(sp)
 1016b28:	df000904 	addi	fp,sp,36
 1016b2c:	e13ffc15 	stw	r4,-16(fp)
 1016b30:	e17ffd15 	stw	r5,-12(fp)
 1016b34:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1016b38:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1016b3c:	e0bffe17 	ldw	r2,-8(fp)
 1016b40:	1004c03a 	cmpne	r2,r2,zero
 1016b44:	1000021e 	bne	r2,zero,1016b50 <OSFlagNameGet+0x34>
        return (0);
 1016b48:	e03fff15 	stw	zero,-4(fp)
 1016b4c:	00003e06 	br	1016c48 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 1016b50:	e0bffc17 	ldw	r2,-16(fp)
 1016b54:	1004c03a 	cmpne	r2,r2,zero
 1016b58:	1000051e 	bne	r2,zero,1016b70 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1016b5c:	e0fffe17 	ldw	r3,-8(fp)
 1016b60:	00801b84 	movi	r2,110
 1016b64:	18800005 	stb	r2,0(r3)
        return (0);
 1016b68:	e03fff15 	stw	zero,-4(fp)
 1016b6c:	00003606 	br	1016c48 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1016b70:	e0bffd17 	ldw	r2,-12(fp)
 1016b74:	1004c03a 	cmpne	r2,r2,zero
 1016b78:	1000051e 	bne	r2,zero,1016b90 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 1016b7c:	e0fffe17 	ldw	r3,-8(fp)
 1016b80:	00800304 	movi	r2,12
 1016b84:	18800005 	stb	r2,0(r3)
        return (0);
 1016b88:	e03fff15 	stw	zero,-4(fp)
 1016b8c:	00002e06 	br	1016c48 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1016b90:	008040b4 	movhi	r2,258
 1016b94:	108bc604 	addi	r2,r2,12056
 1016b98:	10800003 	ldbu	r2,0(r2)
 1016b9c:	10803fcc 	andi	r2,r2,255
 1016ba0:	1005003a 	cmpeq	r2,r2,zero
 1016ba4:	1000051e 	bne	r2,zero,1016bbc <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 1016ba8:	e0fffe17 	ldw	r3,-8(fp)
 1016bac:	00800444 	movi	r2,17
 1016bb0:	18800005 	stb	r2,0(r3)
        return (0);
 1016bb4:	e03fff15 	stw	zero,-4(fp)
 1016bb8:	00002306 	br	1016c48 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1016bbc:	0005303a 	rdctl	r2,status
 1016bc0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016bc4:	e0fff917 	ldw	r3,-28(fp)
 1016bc8:	00bfff84 	movi	r2,-2
 1016bcc:	1884703a 	and	r2,r3,r2
 1016bd0:	1001703a 	wrctl	status,r2
  
  return context;
 1016bd4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1016bd8:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 1016bdc:	e0bffc17 	ldw	r2,-16(fp)
 1016be0:	10800003 	ldbu	r2,0(r2)
 1016be4:	10803fcc 	andi	r2,r2,255
 1016be8:	10800160 	cmpeqi	r2,r2,5
 1016bec:	1000091e 	bne	r2,zero,1016c14 <OSFlagNameGet+0xf8>
 1016bf0:	e0bffa17 	ldw	r2,-24(fp)
 1016bf4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016bf8:	e0bff817 	ldw	r2,-32(fp)
 1016bfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 1016c00:	e0fffe17 	ldw	r3,-8(fp)
 1016c04:	00800044 	movi	r2,1
 1016c08:	18800005 	stb	r2,0(r3)
        return (0);
 1016c0c:	e03fff15 	stw	zero,-4(fp)
 1016c10:	00000d06 	br	1016c48 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 1016c14:	e0bffc17 	ldw	r2,-16(fp)
 1016c18:	11400284 	addi	r5,r2,10
 1016c1c:	e13ffd17 	ldw	r4,-12(fp)
 1016c20:	1015cd40 	call	1015cd4 <OS_StrCopy>
 1016c24:	e0bffb05 	stb	r2,-20(fp)
 1016c28:	e0bffa17 	ldw	r2,-24(fp)
 1016c2c:	e0bff715 	stw	r2,-36(fp)
 1016c30:	e0bff717 	ldw	r2,-36(fp)
 1016c34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1016c38:	e0bffe17 	ldw	r2,-8(fp)
 1016c3c:	10000005 	stb	zero,0(r2)
    return (len);
 1016c40:	e0bffb03 	ldbu	r2,-20(fp)
 1016c44:	e0bfff15 	stw	r2,-4(fp)
 1016c48:	e0bfff17 	ldw	r2,-4(fp)
}
 1016c4c:	e037883a 	mov	sp,fp
 1016c50:	dfc00117 	ldw	ra,4(sp)
 1016c54:	df000017 	ldw	fp,0(sp)
 1016c58:	dec00204 	addi	sp,sp,8
 1016c5c:	f800283a 	ret

01016c60 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 1016c60:	defff504 	addi	sp,sp,-44
 1016c64:	dfc00a15 	stw	ra,40(sp)
 1016c68:	df000915 	stw	fp,36(sp)
 1016c6c:	df000904 	addi	fp,sp,36
 1016c70:	e13ffd15 	stw	r4,-12(fp)
 1016c74:	e17ffe15 	stw	r5,-8(fp)
 1016c78:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1016c7c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1016c80:	e0bfff17 	ldw	r2,-4(fp)
 1016c84:	1005003a 	cmpeq	r2,r2,zero
 1016c88:	1000451e 	bne	r2,zero,1016da0 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 1016c8c:	e0bffd17 	ldw	r2,-12(fp)
 1016c90:	1004c03a 	cmpne	r2,r2,zero
 1016c94:	1000041e 	bne	r2,zero,1016ca8 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1016c98:	e0ffff17 	ldw	r3,-4(fp)
 1016c9c:	00801b84 	movi	r2,110
 1016ca0:	18800005 	stb	r2,0(r3)
        return;
 1016ca4:	00003e06 	br	1016da0 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1016ca8:	e0bffe17 	ldw	r2,-8(fp)
 1016cac:	1004c03a 	cmpne	r2,r2,zero
 1016cb0:	1000041e 	bne	r2,zero,1016cc4 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 1016cb4:	e0ffff17 	ldw	r3,-4(fp)
 1016cb8:	00800304 	movi	r2,12
 1016cbc:	18800005 	stb	r2,0(r3)
        return;
 1016cc0:	00003706 	br	1016da0 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1016cc4:	008040b4 	movhi	r2,258
 1016cc8:	108bc604 	addi	r2,r2,12056
 1016ccc:	10800003 	ldbu	r2,0(r2)
 1016cd0:	10803fcc 	andi	r2,r2,255
 1016cd4:	1005003a 	cmpeq	r2,r2,zero
 1016cd8:	1000041e 	bne	r2,zero,1016cec <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 1016cdc:	e0ffff17 	ldw	r3,-4(fp)
 1016ce0:	00800484 	movi	r2,18
 1016ce4:	18800005 	stb	r2,0(r3)
        return;
 1016ce8:	00002d06 	br	1016da0 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1016cec:	0005303a 	rdctl	r2,status
 1016cf0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016cf4:	e0fffa17 	ldw	r3,-24(fp)
 1016cf8:	00bfff84 	movi	r2,-2
 1016cfc:	1884703a 	and	r2,r3,r2
 1016d00:	1001703a 	wrctl	status,r2
  
  return context;
 1016d04:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1016d08:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 1016d0c:	e0bffd17 	ldw	r2,-12(fp)
 1016d10:	10800003 	ldbu	r2,0(r2)
 1016d14:	10803fcc 	andi	r2,r2,255
 1016d18:	10800160 	cmpeqi	r2,r2,5
 1016d1c:	1000081e 	bne	r2,zero,1016d40 <OSFlagNameSet+0xe0>
 1016d20:	e0bffb17 	ldw	r2,-20(fp)
 1016d24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016d28:	e0bff917 	ldw	r2,-28(fp)
 1016d2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 1016d30:	e0ffff17 	ldw	r3,-4(fp)
 1016d34:	00800044 	movi	r2,1
 1016d38:	18800005 	stb	r2,0(r3)
        return;
 1016d3c:	00001806 	br	1016da0 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 1016d40:	e13ffe17 	ldw	r4,-8(fp)
 1016d44:	1015d540 	call	1015d54 <OS_StrLen>
 1016d48:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 1016d4c:	e0bffc03 	ldbu	r2,-16(fp)
 1016d50:	10800830 	cmpltui	r2,r2,32
 1016d54:	1000081e 	bne	r2,zero,1016d78 <OSFlagNameSet+0x118>
 1016d58:	e0bffb17 	ldw	r2,-20(fp)
 1016d5c:	e0bff815 	stw	r2,-32(fp)
 1016d60:	e0bff817 	ldw	r2,-32(fp)
 1016d64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 1016d68:	e0ffff17 	ldw	r3,-4(fp)
 1016d6c:	00801cc4 	movi	r2,115
 1016d70:	18800005 	stb	r2,0(r3)
        return;
 1016d74:	00000a06 	br	1016da0 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 1016d78:	e0bffd17 	ldw	r2,-12(fp)
 1016d7c:	11000284 	addi	r4,r2,10
 1016d80:	e17ffe17 	ldw	r5,-8(fp)
 1016d84:	1015cd40 	call	1015cd4 <OS_StrCopy>
 1016d88:	e0bffb17 	ldw	r2,-20(fp)
 1016d8c:	e0bff715 	stw	r2,-36(fp)
 1016d90:	e0bff717 	ldw	r2,-36(fp)
 1016d94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1016d98:	e0bfff17 	ldw	r2,-4(fp)
 1016d9c:	10000005 	stb	zero,0(r2)
    return;
}
 1016da0:	e037883a 	mov	sp,fp
 1016da4:	dfc00117 	ldw	ra,4(sp)
 1016da8:	df000017 	ldw	fp,0(sp)
 1016dac:	dec00204 	addi	sp,sp,8
 1016db0:	f800283a 	ret

01016db4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 1016db4:	deffe004 	addi	sp,sp,-128
 1016db8:	dfc01f15 	stw	ra,124(sp)
 1016dbc:	df001e15 	stw	fp,120(sp)
 1016dc0:	df001e04 	addi	fp,sp,120
 1016dc4:	e13ff915 	stw	r4,-28(fp)
 1016dc8:	e17ffa0d 	sth	r5,-24(fp)
 1016dcc:	e1bffb05 	stb	r6,-20(fp)
 1016dd0:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 1016dd4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1016dd8:	e0800217 	ldw	r2,8(fp)
 1016ddc:	1004c03a 	cmpne	r2,r2,zero
 1016de0:	1000021e 	bne	r2,zero,1016dec <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 1016de4:	e03fff15 	stw	zero,-4(fp)
 1016de8:	00017d06 	br	10173e0 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 1016dec:	e0bff917 	ldw	r2,-28(fp)
 1016df0:	1004c03a 	cmpne	r2,r2,zero
 1016df4:	1000051e 	bne	r2,zero,1016e0c <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1016df8:	e0c00217 	ldw	r3,8(fp)
 1016dfc:	00801b84 	movi	r2,110
 1016e00:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1016e04:	e03fff15 	stw	zero,-4(fp)
 1016e08:	00017506 	br	10173e0 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1016e0c:	008040b4 	movhi	r2,258
 1016e10:	108bc604 	addi	r2,r2,12056
 1016e14:	10800003 	ldbu	r2,0(r2)
 1016e18:	10803fcc 	andi	r2,r2,255
 1016e1c:	1005003a 	cmpeq	r2,r2,zero
 1016e20:	1000051e 	bne	r2,zero,1016e38 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 1016e24:	e0c00217 	ldw	r3,8(fp)
 1016e28:	00800084 	movi	r2,2
 1016e2c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1016e30:	e03fff15 	stw	zero,-4(fp)
 1016e34:	00016a06 	br	10173e0 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 1016e38:	008040b4 	movhi	r2,258
 1016e3c:	108bb804 	addi	r2,r2,12000
 1016e40:	10800003 	ldbu	r2,0(r2)
 1016e44:	10803fcc 	andi	r2,r2,255
 1016e48:	1005003a 	cmpeq	r2,r2,zero
 1016e4c:	1000051e 	bne	r2,zero,1016e64 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 1016e50:	e0c00217 	ldw	r3,8(fp)
 1016e54:	00800344 	movi	r2,13
 1016e58:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1016e5c:	e03fff15 	stw	zero,-4(fp)
 1016e60:	00015f06 	br	10173e0 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 1016e64:	e0bff917 	ldw	r2,-28(fp)
 1016e68:	10800003 	ldbu	r2,0(r2)
 1016e6c:	10803fcc 	andi	r2,r2,255
 1016e70:	10800160 	cmpeqi	r2,r2,5
 1016e74:	1000051e 	bne	r2,zero,1016e8c <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 1016e78:	e0c00217 	ldw	r3,8(fp)
 1016e7c:	00800044 	movi	r2,1
 1016e80:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1016e84:	e03fff15 	stw	zero,-4(fp)
 1016e88:	00015506 	br	10173e0 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 1016e8c:	e0fffb03 	ldbu	r3,-20(fp)
 1016e90:	00bfe004 	movi	r2,-128
 1016e94:	1884703a 	and	r2,r3,r2
 1016e98:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 1016e9c:	e0bff283 	ldbu	r2,-54(fp)
 1016ea0:	1005003a 	cmpeq	r2,r2,zero
 1016ea4:	1000071e 	bne	r2,zero,1016ec4 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 1016ea8:	00c01fc4 	movi	r3,127
 1016eac:	e0bffb03 	ldbu	r2,-20(fp)
 1016eb0:	10c4703a 	and	r2,r2,r3
 1016eb4:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 1016eb8:	00800044 	movi	r2,1
 1016ebc:	e0bff205 	stb	r2,-56(fp)
 1016ec0:	00000106 	br	1016ec8 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 1016ec4:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1016ec8:	0005303a 	rdctl	r2,status
 1016ecc:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016ed0:	e0fff017 	ldw	r3,-64(fp)
 1016ed4:	00bfff84 	movi	r2,-2
 1016ed8:	1884703a 	and	r2,r3,r2
 1016edc:	1001703a 	wrctl	status,r2
  
  return context;
 1016ee0:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 1016ee4:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 1016ee8:	e0bffb03 	ldbu	r2,-20(fp)
 1016eec:	e0bffe15 	stw	r2,-8(fp)
 1016ef0:	e0fffe17 	ldw	r3,-8(fp)
 1016ef4:	18800060 	cmpeqi	r2,r3,1
 1016ef8:	1000981e 	bne	r2,zero,101715c <OSFlagPend+0x3a8>
 1016efc:	e0fffe17 	ldw	r3,-8(fp)
 1016f00:	18800088 	cmpgei	r2,r3,2
 1016f04:	1000041e 	bne	r2,zero,1016f18 <OSFlagPend+0x164>
 1016f08:	e0fffe17 	ldw	r3,-8(fp)
 1016f0c:	1805003a 	cmpeq	r2,r3,zero
 1016f10:	1000641e 	bne	r2,zero,10170a4 <OSFlagPend+0x2f0>
 1016f14:	0000bf06 	br	1017214 <OSFlagPend+0x460>
 1016f18:	e0fffe17 	ldw	r3,-8(fp)
 1016f1c:	188000a0 	cmpeqi	r2,r3,2
 1016f20:	1000041e 	bne	r2,zero,1016f34 <OSFlagPend+0x180>
 1016f24:	e0fffe17 	ldw	r3,-8(fp)
 1016f28:	188000e0 	cmpeqi	r2,r3,3
 1016f2c:	10002f1e 	bne	r2,zero,1016fec <OSFlagPend+0x238>
 1016f30:	0000b806 	br	1017214 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 1016f34:	e0bff917 	ldw	r2,-28(fp)
 1016f38:	10c0020b 	ldhu	r3,8(r2)
 1016f3c:	e0bffa0b 	ldhu	r2,-24(fp)
 1016f40:	1884703a 	and	r2,r3,r2
 1016f44:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 1016f48:	e0fff30b 	ldhu	r3,-52(fp)
 1016f4c:	e0bffa0b 	ldhu	r2,-24(fp)
 1016f50:	18801a1e 	bne	r3,r2,1016fbc <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 1016f54:	e0bff203 	ldbu	r2,-56(fp)
 1016f58:	10800058 	cmpnei	r2,r2,1
 1016f5c:	1000091e 	bne	r2,zero,1016f84 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 1016f60:	e0bff917 	ldw	r2,-28(fp)
 1016f64:	1080020b 	ldhu	r2,8(r2)
 1016f68:	1007883a 	mov	r3,r2
 1016f6c:	e0bff30b 	ldhu	r2,-52(fp)
 1016f70:	0084303a 	nor	r2,zero,r2
 1016f74:	1884703a 	and	r2,r3,r2
 1016f78:	1007883a 	mov	r3,r2
 1016f7c:	e0bff917 	ldw	r2,-28(fp)
 1016f80:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 1016f84:	008040b4 	movhi	r2,258
 1016f88:	108bc704 	addi	r2,r2,12060
 1016f8c:	10c00017 	ldw	r3,0(r2)
 1016f90:	e0bff30b 	ldhu	r2,-52(fp)
 1016f94:	18800b0d 	sth	r2,44(r3)
 1016f98:	e0bff117 	ldw	r2,-60(fp)
 1016f9c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016fa0:	e0bfef17 	ldw	r2,-68(fp)
 1016fa4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 1016fa8:	e0800217 	ldw	r2,8(fp)
 1016fac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 1016fb0:	e0bff30b 	ldhu	r2,-52(fp)
 1016fb4:	e0bfff15 	stw	r2,-4(fp)
 1016fb8:	00010906 	br	10173e0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 1016fbc:	e1bffa0b 	ldhu	r6,-24(fp)
 1016fc0:	e1fffb03 	ldbu	r7,-20(fp)
 1016fc4:	e0bffc0b 	ldhu	r2,-16(fp)
 1016fc8:	e17ff404 	addi	r5,fp,-48
 1016fcc:	d8800015 	stw	r2,0(sp)
 1016fd0:	e13ff917 	ldw	r4,-28(fp)
 1016fd4:	10178dc0 	call	10178dc <OS_FlagBlock>
 1016fd8:	e0bff117 	ldw	r2,-60(fp)
 1016fdc:	e0bfee15 	stw	r2,-72(fp)
 1016fe0:	e0bfee17 	ldw	r2,-72(fp)
 1016fe4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 1016fe8:	00009506 	br	1017240 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 1016fec:	e0bff917 	ldw	r2,-28(fp)
 1016ff0:	10c0020b 	ldhu	r3,8(r2)
 1016ff4:	e0bffa0b 	ldhu	r2,-24(fp)
 1016ff8:	1884703a 	and	r2,r3,r2
 1016ffc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 1017000:	e0bff30b 	ldhu	r2,-52(fp)
 1017004:	1005003a 	cmpeq	r2,r2,zero
 1017008:	10001a1e 	bne	r2,zero,1017074 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101700c:	e0bff203 	ldbu	r2,-56(fp)
 1017010:	10800058 	cmpnei	r2,r2,1
 1017014:	1000091e 	bne	r2,zero,101703c <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 1017018:	e0bff917 	ldw	r2,-28(fp)
 101701c:	1080020b 	ldhu	r2,8(r2)
 1017020:	1007883a 	mov	r3,r2
 1017024:	e0bff30b 	ldhu	r2,-52(fp)
 1017028:	0084303a 	nor	r2,zero,r2
 101702c:	1884703a 	and	r2,r3,r2
 1017030:	1007883a 	mov	r3,r2
 1017034:	e0bff917 	ldw	r2,-28(fp)
 1017038:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 101703c:	008040b4 	movhi	r2,258
 1017040:	108bc704 	addi	r2,r2,12060
 1017044:	10c00017 	ldw	r3,0(r2)
 1017048:	e0bff30b 	ldhu	r2,-52(fp)
 101704c:	18800b0d 	sth	r2,44(r3)
 1017050:	e0bff117 	ldw	r2,-60(fp)
 1017054:	e0bfed15 	stw	r2,-76(fp)
 1017058:	e0bfed17 	ldw	r2,-76(fp)
 101705c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 1017060:	e0800217 	ldw	r2,8(fp)
 1017064:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 1017068:	e0fff30b 	ldhu	r3,-52(fp)
 101706c:	e0ffff15 	stw	r3,-4(fp)
 1017070:	0000db06 	br	10173e0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 1017074:	e1bffa0b 	ldhu	r6,-24(fp)
 1017078:	e1fffb03 	ldbu	r7,-20(fp)
 101707c:	e0bffc0b 	ldhu	r2,-16(fp)
 1017080:	e17ff404 	addi	r5,fp,-48
 1017084:	d8800015 	stw	r2,0(sp)
 1017088:	e13ff917 	ldw	r4,-28(fp)
 101708c:	10178dc0 	call	10178dc <OS_FlagBlock>
 1017090:	e0bff117 	ldw	r2,-60(fp)
 1017094:	e0bfec15 	stw	r2,-80(fp)
 1017098:	e0bfec17 	ldw	r2,-80(fp)
 101709c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 10170a0:	00006706 	br	1017240 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 10170a4:	e0bff917 	ldw	r2,-28(fp)
 10170a8:	1080020b 	ldhu	r2,8(r2)
 10170ac:	0084303a 	nor	r2,zero,r2
 10170b0:	1007883a 	mov	r3,r2
 10170b4:	e0bffa0b 	ldhu	r2,-24(fp)
 10170b8:	1884703a 	and	r2,r3,r2
 10170bc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 10170c0:	e0fff30b 	ldhu	r3,-52(fp)
 10170c4:	e0bffa0b 	ldhu	r2,-24(fp)
 10170c8:	1880181e 	bne	r3,r2,101712c <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 10170cc:	e0bff203 	ldbu	r2,-56(fp)
 10170d0:	10800058 	cmpnei	r2,r2,1
 10170d4:	1000071e 	bne	r2,zero,10170f4 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 10170d8:	e0bff917 	ldw	r2,-28(fp)
 10170dc:	10c0020b 	ldhu	r3,8(r2)
 10170e0:	e0bff30b 	ldhu	r2,-52(fp)
 10170e4:	1884b03a 	or	r2,r3,r2
 10170e8:	1007883a 	mov	r3,r2
 10170ec:	e0bff917 	ldw	r2,-28(fp)
 10170f0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 10170f4:	008040b4 	movhi	r2,258
 10170f8:	108bc704 	addi	r2,r2,12060
 10170fc:	10c00017 	ldw	r3,0(r2)
 1017100:	e0bff30b 	ldhu	r2,-52(fp)
 1017104:	18800b0d 	sth	r2,44(r3)
 1017108:	e0bff117 	ldw	r2,-60(fp)
 101710c:	e0bfeb15 	stw	r2,-84(fp)
 1017110:	e0bfeb17 	ldw	r2,-84(fp)
 1017114:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 1017118:	e0800217 	ldw	r2,8(fp)
 101711c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 1017120:	e0bff30b 	ldhu	r2,-52(fp)
 1017124:	e0bfff15 	stw	r2,-4(fp)
 1017128:	0000ad06 	br	10173e0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 101712c:	e1bffa0b 	ldhu	r6,-24(fp)
 1017130:	e1fffb03 	ldbu	r7,-20(fp)
 1017134:	e0bffc0b 	ldhu	r2,-16(fp)
 1017138:	e17ff404 	addi	r5,fp,-48
 101713c:	d8800015 	stw	r2,0(sp)
 1017140:	e13ff917 	ldw	r4,-28(fp)
 1017144:	10178dc0 	call	10178dc <OS_FlagBlock>
 1017148:	e0bff117 	ldw	r2,-60(fp)
 101714c:	e0bfea15 	stw	r2,-88(fp)
 1017150:	e0bfea17 	ldw	r2,-88(fp)
 1017154:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 1017158:	00003906 	br	1017240 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 101715c:	e0bff917 	ldw	r2,-28(fp)
 1017160:	1080020b 	ldhu	r2,8(r2)
 1017164:	0084303a 	nor	r2,zero,r2
 1017168:	1007883a 	mov	r3,r2
 101716c:	e0bffa0b 	ldhu	r2,-24(fp)
 1017170:	1884703a 	and	r2,r3,r2
 1017174:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 1017178:	e0bff30b 	ldhu	r2,-52(fp)
 101717c:	1005003a 	cmpeq	r2,r2,zero
 1017180:	1000181e 	bne	r2,zero,10171e4 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 1017184:	e0bff203 	ldbu	r2,-56(fp)
 1017188:	10800058 	cmpnei	r2,r2,1
 101718c:	1000071e 	bne	r2,zero,10171ac <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 1017190:	e0bff917 	ldw	r2,-28(fp)
 1017194:	10c0020b 	ldhu	r3,8(r2)
 1017198:	e0bff30b 	ldhu	r2,-52(fp)
 101719c:	1884b03a 	or	r2,r3,r2
 10171a0:	1007883a 	mov	r3,r2
 10171a4:	e0bff917 	ldw	r2,-28(fp)
 10171a8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 10171ac:	008040b4 	movhi	r2,258
 10171b0:	108bc704 	addi	r2,r2,12060
 10171b4:	10c00017 	ldw	r3,0(r2)
 10171b8:	e0bff30b 	ldhu	r2,-52(fp)
 10171bc:	18800b0d 	sth	r2,44(r3)
 10171c0:	e0bff117 	ldw	r2,-60(fp)
 10171c4:	e0bfe915 	stw	r2,-92(fp)
 10171c8:	e0bfe917 	ldw	r2,-92(fp)
 10171cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 10171d0:	e0800217 	ldw	r2,8(fp)
 10171d4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 10171d8:	e0fff30b 	ldhu	r3,-52(fp)
 10171dc:	e0ffff15 	stw	r3,-4(fp)
 10171e0:	00007f06 	br	10173e0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 10171e4:	e1bffa0b 	ldhu	r6,-24(fp)
 10171e8:	e1fffb03 	ldbu	r7,-20(fp)
 10171ec:	e0bffc0b 	ldhu	r2,-16(fp)
 10171f0:	e17ff404 	addi	r5,fp,-48
 10171f4:	d8800015 	stw	r2,0(sp)
 10171f8:	e13ff917 	ldw	r4,-28(fp)
 10171fc:	10178dc0 	call	10178dc <OS_FlagBlock>
 1017200:	e0bff117 	ldw	r2,-60(fp)
 1017204:	e0bfe815 	stw	r2,-96(fp)
 1017208:	e0bfe817 	ldw	r2,-96(fp)
 101720c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 1017210:	00000b06 	br	1017240 <OSFlagPend+0x48c>
 1017214:	e0bff117 	ldw	r2,-60(fp)
 1017218:	e0bfe715 	stw	r2,-100(fp)
 101721c:	e0bfe717 	ldw	r2,-100(fp)
 1017220:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 1017224:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 1017228:	e0c00217 	ldw	r3,8(fp)
 101722c:	00801bc4 	movi	r2,111
 1017230:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 1017234:	e0bff30b 	ldhu	r2,-52(fp)
 1017238:	e0bfff15 	stw	r2,-4(fp)
 101723c:	00006806 	br	10173e0 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 1017240:	1015b900 	call	1015b90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017244:	0005303a 	rdctl	r2,status
 1017248:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101724c:	e0ffe617 	ldw	r3,-104(fp)
 1017250:	00bfff84 	movi	r2,-2
 1017254:	1884703a 	and	r2,r3,r2
 1017258:	1001703a 	wrctl	status,r2
  
  return context;
 101725c:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 1017260:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 1017264:	008040b4 	movhi	r2,258
 1017268:	108bc704 	addi	r2,r2,12060
 101726c:	10800017 	ldw	r2,0(r2)
 1017270:	10800c43 	ldbu	r2,49(r2)
 1017274:	10803fcc 	andi	r2,r2,255
 1017278:	1005003a 	cmpeq	r2,r2,zero
 101727c:	1000221e 	bne	r2,zero,1017308 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 1017280:	008040b4 	movhi	r2,258
 1017284:	108bc704 	addi	r2,r2,12060
 1017288:	10800017 	ldw	r2,0(r2)
 101728c:	10800c43 	ldbu	r2,49(r2)
 1017290:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1017294:	008040b4 	movhi	r2,258
 1017298:	108bc704 	addi	r2,r2,12060
 101729c:	10800017 	ldw	r2,0(r2)
 10172a0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 10172a4:	e13ff404 	addi	r4,fp,-48
 10172a8:	1017c940 	call	1017c94 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 10172ac:	008040b4 	movhi	r2,258
 10172b0:	108bc704 	addi	r2,r2,12060
 10172b4:	10800017 	ldw	r2,0(r2)
 10172b8:	10000c05 	stb	zero,48(r2)
 10172bc:	e0bff117 	ldw	r2,-60(fp)
 10172c0:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10172c4:	e0bfe517 	ldw	r2,-108(fp)
 10172c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 10172cc:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 10172d0:	e0bff243 	ldbu	r2,-55(fp)
 10172d4:	108000a0 	cmpeqi	r2,r2,2
 10172d8:	1000011e 	bne	r2,zero,10172e0 <OSFlagPend+0x52c>
 10172dc:	00000406 	br	10172f0 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 10172e0:	e0c00217 	ldw	r3,8(fp)
 10172e4:	00800384 	movi	r2,14
 10172e8:	18800005 	stb	r2,0(r3)
                 break;
 10172ec:	00000306 	br	10172fc <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 10172f0:	e0c00217 	ldw	r3,8(fp)
 10172f4:	00800284 	movi	r2,10
 10172f8:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 10172fc:	e0fff30b 	ldhu	r3,-52(fp)
 1017300:	e0ffff15 	stw	r3,-4(fp)
 1017304:	00003606 	br	10173e0 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 1017308:	008040b4 	movhi	r2,258
 101730c:	108bc704 	addi	r2,r2,12060
 1017310:	10800017 	ldw	r2,0(r2)
 1017314:	10800b0b 	ldhu	r2,44(r2)
 1017318:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 101731c:	e0bff203 	ldbu	r2,-56(fp)
 1017320:	10800058 	cmpnei	r2,r2,1
 1017324:	1000261e 	bne	r2,zero,10173c0 <OSFlagPend+0x60c>
        switch (wait_type) {
 1017328:	e0bffb03 	ldbu	r2,-20(fp)
 101732c:	e0bffd15 	stw	r2,-12(fp)
 1017330:	e0fffd17 	ldw	r3,-12(fp)
 1017334:	1804803a 	cmplt	r2,r3,zero
 1017338:	1000181e 	bne	r2,zero,101739c <OSFlagPend+0x5e8>
 101733c:	e0fffd17 	ldw	r3,-12(fp)
 1017340:	18800090 	cmplti	r2,r3,2
 1017344:	10000d1e 	bne	r2,zero,101737c <OSFlagPend+0x5c8>
 1017348:	e0fffd17 	ldw	r3,-12(fp)
 101734c:	18800108 	cmpgei	r2,r3,4
 1017350:	1000121e 	bne	r2,zero,101739c <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 1017354:	e0bff917 	ldw	r2,-28(fp)
 1017358:	1080020b 	ldhu	r2,8(r2)
 101735c:	1007883a 	mov	r3,r2
 1017360:	e0bff30b 	ldhu	r2,-52(fp)
 1017364:	0084303a 	nor	r2,zero,r2
 1017368:	1884703a 	and	r2,r3,r2
 101736c:	1007883a 	mov	r3,r2
 1017370:	e0bff917 	ldw	r2,-28(fp)
 1017374:	10c0020d 	sth	r3,8(r2)
                 break;
 1017378:	00001106 	br	10173c0 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 101737c:	e0bff917 	ldw	r2,-28(fp)
 1017380:	10c0020b 	ldhu	r3,8(r2)
 1017384:	e0bff30b 	ldhu	r2,-52(fp)
 1017388:	1884b03a 	or	r2,r3,r2
 101738c:	1007883a 	mov	r3,r2
 1017390:	e0bff917 	ldw	r2,-28(fp)
 1017394:	10c0020d 	sth	r3,8(r2)
                 break;
 1017398:	00000906 	br	10173c0 <OSFlagPend+0x60c>
 101739c:	e0bff117 	ldw	r2,-60(fp)
 10173a0:	e0bfe415 	stw	r2,-112(fp)
 10173a4:	e0bfe417 	ldw	r2,-112(fp)
 10173a8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 10173ac:	e0c00217 	ldw	r3,8(fp)
 10173b0:	00801bc4 	movi	r2,111
 10173b4:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 10173b8:	e03fff15 	stw	zero,-4(fp)
 10173bc:	00000806 	br	10173e0 <OSFlagPend+0x62c>
 10173c0:	e0bff117 	ldw	r2,-60(fp)
 10173c4:	e0bfe315 	stw	r2,-116(fp)
 10173c8:	e0bfe317 	ldw	r2,-116(fp)
 10173cc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 10173d0:	e0800217 	ldw	r2,8(fp)
 10173d4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 10173d8:	e0bff30b 	ldhu	r2,-52(fp)
 10173dc:	e0bfff15 	stw	r2,-4(fp)
 10173e0:	e0bfff17 	ldw	r2,-4(fp)
}
 10173e4:	e037883a 	mov	sp,fp
 10173e8:	dfc00117 	ldw	ra,4(sp)
 10173ec:	df000017 	ldw	fp,0(sp)
 10173f0:	dec00204 	addi	sp,sp,8
 10173f4:	f800283a 	ret

010173f8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 10173f8:	defffb04 	addi	sp,sp,-20
 10173fc:	df000415 	stw	fp,16(sp)
 1017400:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 1017404:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017408:	0005303a 	rdctl	r2,status
 101740c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017410:	e0fffd17 	ldw	r3,-12(fp)
 1017414:	00bfff84 	movi	r2,-2
 1017418:	1884703a 	and	r2,r3,r2
 101741c:	1001703a 	wrctl	status,r2
  
  return context;
 1017420:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 1017424:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 1017428:	008040b4 	movhi	r2,258
 101742c:	108bc704 	addi	r2,r2,12060
 1017430:	10800017 	ldw	r2,0(r2)
 1017434:	10800b0b 	ldhu	r2,44(r2)
 1017438:	e0bfff0d 	sth	r2,-4(fp)
 101743c:	e0bffe17 	ldw	r2,-8(fp)
 1017440:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017444:	e0bffc17 	ldw	r2,-16(fp)
 1017448:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 101744c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1017450:	e037883a 	mov	sp,fp
 1017454:	df000017 	ldw	fp,0(sp)
 1017458:	dec00104 	addi	sp,sp,4
 101745c:	f800283a 	ret

01017460 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 1017460:	deffed04 	addi	sp,sp,-76
 1017464:	dfc01215 	stw	ra,72(sp)
 1017468:	df001115 	stw	fp,68(sp)
 101746c:	df001104 	addi	fp,sp,68
 1017470:	e13ff915 	stw	r4,-28(fp)
 1017474:	e1fffc15 	stw	r7,-16(fp)
 1017478:	e17ffa0d 	sth	r5,-24(fp)
 101747c:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 1017480:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 1017484:	e0bffc17 	ldw	r2,-16(fp)
 1017488:	1004c03a 	cmpne	r2,r2,zero
 101748c:	1000021e 	bne	r2,zero,1017498 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 1017490:	e03fff15 	stw	zero,-4(fp)
 1017494:	0000d606 	br	10177f0 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 1017498:	e0bff917 	ldw	r2,-28(fp)
 101749c:	1004c03a 	cmpne	r2,r2,zero
 10174a0:	1000051e 	bne	r2,zero,10174b8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 10174a4:	e0fffc17 	ldw	r3,-16(fp)
 10174a8:	00801b84 	movi	r2,110
 10174ac:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 10174b0:	e03fff15 	stw	zero,-4(fp)
 10174b4:	0000ce06 	br	10177f0 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 10174b8:	e0bff917 	ldw	r2,-28(fp)
 10174bc:	10800003 	ldbu	r2,0(r2)
 10174c0:	10803fcc 	andi	r2,r2,255
 10174c4:	10800160 	cmpeqi	r2,r2,5
 10174c8:	1000051e 	bne	r2,zero,10174e0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 10174cc:	e0fffc17 	ldw	r3,-16(fp)
 10174d0:	00800044 	movi	r2,1
 10174d4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 10174d8:	e03fff15 	stw	zero,-4(fp)
 10174dc:	0000c406 	br	10177f0 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10174e0:	0005303a 	rdctl	r2,status
 10174e4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10174e8:	e0fff417 	ldw	r3,-48(fp)
 10174ec:	00bfff84 	movi	r2,-2
 10174f0:	1884703a 	and	r2,r3,r2
 10174f4:	1001703a 	wrctl	status,r2
  
  return context;
 10174f8:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 10174fc:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 1017500:	e0bffb03 	ldbu	r2,-20(fp)
 1017504:	e0bffe15 	stw	r2,-8(fp)
 1017508:	e0fffe17 	ldw	r3,-8(fp)
 101750c:	1805003a 	cmpeq	r2,r3,zero
 1017510:	1000041e 	bne	r2,zero,1017524 <OSFlagPost+0xc4>
 1017514:	e0fffe17 	ldw	r3,-8(fp)
 1017518:	18800060 	cmpeqi	r2,r3,1
 101751c:	10000b1e 	bne	r2,zero,101754c <OSFlagPost+0xec>
 1017520:	00001206 	br	101756c <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 1017524:	e0bff917 	ldw	r2,-28(fp)
 1017528:	1080020b 	ldhu	r2,8(r2)
 101752c:	1007883a 	mov	r3,r2
 1017530:	e0bffa0b 	ldhu	r2,-24(fp)
 1017534:	0084303a 	nor	r2,zero,r2
 1017538:	1884703a 	and	r2,r3,r2
 101753c:	1007883a 	mov	r3,r2
 1017540:	e0bff917 	ldw	r2,-28(fp)
 1017544:	10c0020d 	sth	r3,8(r2)
             break;
 1017548:	00001106 	br	1017590 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 101754c:	e0bff917 	ldw	r2,-28(fp)
 1017550:	10c0020b 	ldhu	r3,8(r2)
 1017554:	e0bffa0b 	ldhu	r2,-24(fp)
 1017558:	1884b03a 	or	r2,r3,r2
 101755c:	1007883a 	mov	r3,r2
 1017560:	e0bff917 	ldw	r2,-28(fp)
 1017564:	10c0020d 	sth	r3,8(r2)
             break;
 1017568:	00000906 	br	1017590 <OSFlagPost+0x130>
 101756c:	e0bff517 	ldw	r2,-44(fp)
 1017570:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017574:	e0bff317 	ldw	r2,-52(fp)
 1017578:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 101757c:	e0fffc17 	ldw	r3,-16(fp)
 1017580:	00801c44 	movi	r2,113
 1017584:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 1017588:	e03fff15 	stw	zero,-4(fp)
 101758c:	00009806 	br	10177f0 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 1017590:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 1017594:	e0bff917 	ldw	r2,-28(fp)
 1017598:	10800117 	ldw	r2,4(r2)
 101759c:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 10175a0:	00007506 	br	1017778 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 10175a4:	e0bff817 	ldw	r2,-32(fp)
 10175a8:	10800483 	ldbu	r2,18(r2)
 10175ac:	10803fcc 	andi	r2,r2,255
 10175b0:	e0bffd15 	stw	r2,-12(fp)
 10175b4:	e0fffd17 	ldw	r3,-12(fp)
 10175b8:	18800060 	cmpeqi	r2,r3,1
 10175bc:	10004d1e 	bne	r2,zero,10176f4 <OSFlagPost+0x294>
 10175c0:	e0fffd17 	ldw	r3,-12(fp)
 10175c4:	18800088 	cmpgei	r2,r3,2
 10175c8:	1000041e 	bne	r2,zero,10175dc <OSFlagPost+0x17c>
 10175cc:	e0fffd17 	ldw	r3,-12(fp)
 10175d0:	1805003a 	cmpeq	r2,r3,zero
 10175d4:	1000301e 	bne	r2,zero,1017698 <OSFlagPost+0x238>
 10175d8:	00005b06 	br	1017748 <OSFlagPost+0x2e8>
 10175dc:	e0fffd17 	ldw	r3,-12(fp)
 10175e0:	188000a0 	cmpeqi	r2,r3,2
 10175e4:	1000041e 	bne	r2,zero,10175f8 <OSFlagPost+0x198>
 10175e8:	e0fffd17 	ldw	r3,-12(fp)
 10175ec:	188000e0 	cmpeqi	r2,r3,3
 10175f0:	1000161e 	bne	r2,zero,101764c <OSFlagPost+0x1ec>
 10175f4:	00005406 	br	1017748 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 10175f8:	e0bff917 	ldw	r2,-28(fp)
 10175fc:	10c0020b 	ldhu	r3,8(r2)
 1017600:	e0bff817 	ldw	r2,-32(fp)
 1017604:	1080040b 	ldhu	r2,16(r2)
 1017608:	1884703a 	and	r2,r3,r2
 101760c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 1017610:	e0bff817 	ldw	r2,-32(fp)
 1017614:	1080040b 	ldhu	r2,16(r2)
 1017618:	10ffffcc 	andi	r3,r2,65535
 101761c:	e0bff68b 	ldhu	r2,-38(fp)
 1017620:	1880521e 	bne	r3,r2,101776c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 1017624:	e17ff68b 	ldhu	r5,-38(fp)
 1017628:	e13ff817 	ldw	r4,-32(fp)
 101762c:	1017b840 	call	1017b84 <OS_FlagTaskRdy>
 1017630:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 1017634:	e0bff603 	ldbu	r2,-40(fp)
 1017638:	10800058 	cmpnei	r2,r2,1
 101763c:	10004b1e 	bne	r2,zero,101776c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 1017640:	00800044 	movi	r2,1
 1017644:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 1017648:	00004806 	br	101776c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 101764c:	e0bff917 	ldw	r2,-28(fp)
 1017650:	10c0020b 	ldhu	r3,8(r2)
 1017654:	e0bff817 	ldw	r2,-32(fp)
 1017658:	1080040b 	ldhu	r2,16(r2)
 101765c:	1884703a 	and	r2,r3,r2
 1017660:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 1017664:	e0bff68b 	ldhu	r2,-38(fp)
 1017668:	1005003a 	cmpeq	r2,r2,zero
 101766c:	10003f1e 	bne	r2,zero,101776c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 1017670:	e17ff68b 	ldhu	r5,-38(fp)
 1017674:	e13ff817 	ldw	r4,-32(fp)
 1017678:	1017b840 	call	1017b84 <OS_FlagTaskRdy>
 101767c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 1017680:	e0bff603 	ldbu	r2,-40(fp)
 1017684:	10800058 	cmpnei	r2,r2,1
 1017688:	1000381e 	bne	r2,zero,101776c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 101768c:	00800044 	movi	r2,1
 1017690:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 1017694:	00003506 	br	101776c <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 1017698:	e0bff917 	ldw	r2,-28(fp)
 101769c:	1080020b 	ldhu	r2,8(r2)
 10176a0:	0084303a 	nor	r2,zero,r2
 10176a4:	1007883a 	mov	r3,r2
 10176a8:	e0bff817 	ldw	r2,-32(fp)
 10176ac:	1080040b 	ldhu	r2,16(r2)
 10176b0:	1884703a 	and	r2,r3,r2
 10176b4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 10176b8:	e0bff817 	ldw	r2,-32(fp)
 10176bc:	1080040b 	ldhu	r2,16(r2)
 10176c0:	10ffffcc 	andi	r3,r2,65535
 10176c4:	e0bff68b 	ldhu	r2,-38(fp)
 10176c8:	1880281e 	bne	r3,r2,101776c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 10176cc:	e17ff68b 	ldhu	r5,-38(fp)
 10176d0:	e13ff817 	ldw	r4,-32(fp)
 10176d4:	1017b840 	call	1017b84 <OS_FlagTaskRdy>
 10176d8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 10176dc:	e0bff603 	ldbu	r2,-40(fp)
 10176e0:	10800058 	cmpnei	r2,r2,1
 10176e4:	1000211e 	bne	r2,zero,101776c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 10176e8:	00800044 	movi	r2,1
 10176ec:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 10176f0:	00001e06 	br	101776c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 10176f4:	e0bff917 	ldw	r2,-28(fp)
 10176f8:	1080020b 	ldhu	r2,8(r2)
 10176fc:	0084303a 	nor	r2,zero,r2
 1017700:	1007883a 	mov	r3,r2
 1017704:	e0bff817 	ldw	r2,-32(fp)
 1017708:	1080040b 	ldhu	r2,16(r2)
 101770c:	1884703a 	and	r2,r3,r2
 1017710:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 1017714:	e0bff68b 	ldhu	r2,-38(fp)
 1017718:	1005003a 	cmpeq	r2,r2,zero
 101771c:	1000131e 	bne	r2,zero,101776c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 1017720:	e17ff68b 	ldhu	r5,-38(fp)
 1017724:	e13ff817 	ldw	r4,-32(fp)
 1017728:	1017b840 	call	1017b84 <OS_FlagTaskRdy>
 101772c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 1017730:	e0bff603 	ldbu	r2,-40(fp)
 1017734:	10800058 	cmpnei	r2,r2,1
 1017738:	10000c1e 	bne	r2,zero,101776c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 101773c:	00800044 	movi	r2,1
 1017740:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 1017744:	00000906 	br	101776c <OSFlagPost+0x30c>
 1017748:	e0bff517 	ldw	r2,-44(fp)
 101774c:	e0bff215 	stw	r2,-56(fp)
 1017750:	e0bff217 	ldw	r2,-56(fp)
 1017754:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 1017758:	e0fffc17 	ldw	r3,-16(fp)
 101775c:	00801bc4 	movi	r2,111
 1017760:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 1017764:	e03fff15 	stw	zero,-4(fp)
 1017768:	00002106 	br	10177f0 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 101776c:	e0bff817 	ldw	r2,-32(fp)
 1017770:	10800017 	ldw	r2,0(r2)
 1017774:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 1017778:	e0bff817 	ldw	r2,-32(fp)
 101777c:	1004c03a 	cmpne	r2,r2,zero
 1017780:	103f881e 	bne	r2,zero,10175a4 <OSFlagPost+0x144>
 1017784:	e0bff517 	ldw	r2,-44(fp)
 1017788:	e0bff115 	stw	r2,-60(fp)
 101778c:	e0bff117 	ldw	r2,-60(fp)
 1017790:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 1017794:	e0bff783 	ldbu	r2,-34(fp)
 1017798:	10800058 	cmpnei	r2,r2,1
 101779c:	1000011e 	bne	r2,zero,10177a4 <OSFlagPost+0x344>
        OS_Sched();
 10177a0:	1015b900 	call	1015b90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10177a4:	0005303a 	rdctl	r2,status
 10177a8:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10177ac:	e0fff017 	ldw	r3,-64(fp)
 10177b0:	00bfff84 	movi	r2,-2
 10177b4:	1884703a 	and	r2,r3,r2
 10177b8:	1001703a 	wrctl	status,r2
  
  return context;
 10177bc:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 10177c0:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 10177c4:	e0bff917 	ldw	r2,-28(fp)
 10177c8:	1080020b 	ldhu	r2,8(r2)
 10177cc:	e0bff70d 	sth	r2,-36(fp)
 10177d0:	e0bff517 	ldw	r2,-44(fp)
 10177d4:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10177d8:	e0bfef17 	ldw	r2,-68(fp)
 10177dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 10177e0:	e0bffc17 	ldw	r2,-16(fp)
 10177e4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 10177e8:	e0bff70b 	ldhu	r2,-36(fp)
 10177ec:	e0bfff15 	stw	r2,-4(fp)
 10177f0:	e0bfff17 	ldw	r2,-4(fp)
}
 10177f4:	e037883a 	mov	sp,fp
 10177f8:	dfc00117 	ldw	ra,4(sp)
 10177fc:	df000017 	ldw	fp,0(sp)
 1017800:	dec00204 	addi	sp,sp,8
 1017804:	f800283a 	ret

01017808 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 1017808:	defff804 	addi	sp,sp,-32
 101780c:	df000715 	stw	fp,28(sp)
 1017810:	df000704 	addi	fp,sp,28
 1017814:	e13ffd15 	stw	r4,-12(fp)
 1017818:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 101781c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 1017820:	e0bffe17 	ldw	r2,-8(fp)
 1017824:	1004c03a 	cmpne	r2,r2,zero
 1017828:	1000021e 	bne	r2,zero,1017834 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 101782c:	e03fff15 	stw	zero,-4(fp)
 1017830:	00002506 	br	10178c8 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 1017834:	e0bffd17 	ldw	r2,-12(fp)
 1017838:	1004c03a 	cmpne	r2,r2,zero
 101783c:	1000051e 	bne	r2,zero,1017854 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1017840:	e0fffe17 	ldw	r3,-8(fp)
 1017844:	00801b84 	movi	r2,110
 1017848:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101784c:	e03fff15 	stw	zero,-4(fp)
 1017850:	00001d06 	br	10178c8 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 1017854:	e0bffd17 	ldw	r2,-12(fp)
 1017858:	10800003 	ldbu	r2,0(r2)
 101785c:	10803fcc 	andi	r2,r2,255
 1017860:	10800160 	cmpeqi	r2,r2,5
 1017864:	1000051e 	bne	r2,zero,101787c <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 1017868:	e0fffe17 	ldw	r3,-8(fp)
 101786c:	00800044 	movi	r2,1
 1017870:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1017874:	e03fff15 	stw	zero,-4(fp)
 1017878:	00001306 	br	10178c8 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101787c:	0005303a 	rdctl	r2,status
 1017880:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017884:	e0fffa17 	ldw	r3,-24(fp)
 1017888:	00bfff84 	movi	r2,-2
 101788c:	1884703a 	and	r2,r3,r2
 1017890:	1001703a 	wrctl	status,r2
  
  return context;
 1017894:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1017898:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 101789c:	e0bffd17 	ldw	r2,-12(fp)
 10178a0:	1080020b 	ldhu	r2,8(r2)
 10178a4:	e0bffc0d 	sth	r2,-16(fp)
 10178a8:	e0bffb17 	ldw	r2,-20(fp)
 10178ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10178b0:	e0bff917 	ldw	r2,-28(fp)
 10178b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10178b8:	e0bffe17 	ldw	r2,-8(fp)
 10178bc:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 10178c0:	e0bffc0b 	ldhu	r2,-16(fp)
 10178c4:	e0bfff15 	stw	r2,-4(fp)
 10178c8:	e0bfff17 	ldw	r2,-4(fp)
}
 10178cc:	e037883a 	mov	sp,fp
 10178d0:	df000017 	ldw	fp,0(sp)
 10178d4:	dec00104 	addi	sp,sp,4
 10178d8:	f800283a 	ret

010178dc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 10178dc:	defff804 	addi	sp,sp,-32
 10178e0:	df000715 	stw	fp,28(sp)
 10178e4:	df000704 	addi	fp,sp,28
 10178e8:	e13ffb15 	stw	r4,-20(fp)
 10178ec:	e17ffc15 	stw	r5,-16(fp)
 10178f0:	e0800117 	ldw	r2,4(fp)
 10178f4:	e1bffd0d 	sth	r6,-12(fp)
 10178f8:	e1fffe05 	stb	r7,-8(fp)
 10178fc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 1017900:	008040b4 	movhi	r2,258
 1017904:	108bc704 	addi	r2,r2,12060
 1017908:	10c00017 	ldw	r3,0(r2)
 101790c:	008040b4 	movhi	r2,258
 1017910:	108bc704 	addi	r2,r2,12060
 1017914:	10800017 	ldw	r2,0(r2)
 1017918:	10800c03 	ldbu	r2,48(r2)
 101791c:	10800814 	ori	r2,r2,32
 1017920:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 1017924:	008040b4 	movhi	r2,258
 1017928:	108bc704 	addi	r2,r2,12060
 101792c:	10800017 	ldw	r2,0(r2)
 1017930:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 1017934:	008040b4 	movhi	r2,258
 1017938:	108bc704 	addi	r2,r2,12060
 101793c:	10c00017 	ldw	r3,0(r2)
 1017940:	e0bfff0b 	ldhu	r2,-4(fp)
 1017944:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 1017948:	008040b4 	movhi	r2,258
 101794c:	108bc704 	addi	r2,r2,12060
 1017950:	10c00017 	ldw	r3,0(r2)
 1017954:	e0bffc17 	ldw	r2,-16(fp)
 1017958:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 101795c:	e0fffc17 	ldw	r3,-16(fp)
 1017960:	e0bffd0b 	ldhu	r2,-12(fp)
 1017964:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 1017968:	e0fffc17 	ldw	r3,-16(fp)
 101796c:	e0bffe03 	ldbu	r2,-8(fp)
 1017970:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 1017974:	008040b4 	movhi	r2,258
 1017978:	108bc704 	addi	r2,r2,12060
 101797c:	10c00017 	ldw	r3,0(r2)
 1017980:	e0bffc17 	ldw	r2,-16(fp)
 1017984:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 1017988:	e0bffb17 	ldw	r2,-20(fp)
 101798c:	10c00117 	ldw	r3,4(r2)
 1017990:	e0bffc17 	ldw	r2,-16(fp)
 1017994:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 1017998:	e0bffc17 	ldw	r2,-16(fp)
 101799c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 10179a0:	e0fffc17 	ldw	r3,-16(fp)
 10179a4:	e0bffb17 	ldw	r2,-20(fp)
 10179a8:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 10179ac:	e0bffb17 	ldw	r2,-20(fp)
 10179b0:	10800117 	ldw	r2,4(r2)
 10179b4:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 10179b8:	e0bffa17 	ldw	r2,-24(fp)
 10179bc:	1005003a 	cmpeq	r2,r2,zero
 10179c0:	1000031e 	bne	r2,zero,10179d0 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 10179c4:	e0fffa17 	ldw	r3,-24(fp)
 10179c8:	e0bffc17 	ldw	r2,-16(fp)
 10179cc:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 10179d0:	e0fffb17 	ldw	r3,-20(fp)
 10179d4:	e0bffc17 	ldw	r2,-16(fp)
 10179d8:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 10179dc:	008040b4 	movhi	r2,258
 10179e0:	108bc704 	addi	r2,r2,12060
 10179e4:	10800017 	ldw	r2,0(r2)
 10179e8:	10800d03 	ldbu	r2,52(r2)
 10179ec:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 10179f0:	e13ff903 	ldbu	r4,-28(fp)
 10179f4:	e0fff903 	ldbu	r3,-28(fp)
 10179f8:	008040b4 	movhi	r2,258
 10179fc:	108bc444 	addi	r2,r2,12049
 1017a00:	10c5883a 	add	r2,r2,r3
 1017a04:	10800003 	ldbu	r2,0(r2)
 1017a08:	1007883a 	mov	r3,r2
 1017a0c:	008040b4 	movhi	r2,258
 1017a10:	108bc704 	addi	r2,r2,12060
 1017a14:	10800017 	ldw	r2,0(r2)
 1017a18:	10800d43 	ldbu	r2,53(r2)
 1017a1c:	0084303a 	nor	r2,zero,r2
 1017a20:	1884703a 	and	r2,r3,r2
 1017a24:	1007883a 	mov	r3,r2
 1017a28:	008040b4 	movhi	r2,258
 1017a2c:	108bc444 	addi	r2,r2,12049
 1017a30:	1105883a 	add	r2,r2,r4
 1017a34:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 1017a38:	e0fff903 	ldbu	r3,-28(fp)
 1017a3c:	008040b4 	movhi	r2,258
 1017a40:	108bc444 	addi	r2,r2,12049
 1017a44:	10c5883a 	add	r2,r2,r3
 1017a48:	10800003 	ldbu	r2,0(r2)
 1017a4c:	10803fcc 	andi	r2,r2,255
 1017a50:	1004c03a 	cmpne	r2,r2,zero
 1017a54:	10000e1e 	bne	r2,zero,1017a90 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 1017a58:	008040b4 	movhi	r2,258
 1017a5c:	108bc704 	addi	r2,r2,12060
 1017a60:	10800017 	ldw	r2,0(r2)
 1017a64:	10800d83 	ldbu	r2,54(r2)
 1017a68:	0084303a 	nor	r2,zero,r2
 1017a6c:	1007883a 	mov	r3,r2
 1017a70:	008040b4 	movhi	r2,258
 1017a74:	108bc404 	addi	r2,r2,12048
 1017a78:	10800003 	ldbu	r2,0(r2)
 1017a7c:	1884703a 	and	r2,r3,r2
 1017a80:	1007883a 	mov	r3,r2
 1017a84:	008040b4 	movhi	r2,258
 1017a88:	108bc404 	addi	r2,r2,12048
 1017a8c:	10c00005 	stb	r3,0(r2)
    }
}
 1017a90:	e037883a 	mov	sp,fp
 1017a94:	df000017 	ldw	fp,0(sp)
 1017a98:	dec00104 	addi	sp,sp,4
 1017a9c:	f800283a 	ret

01017aa0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 1017aa0:	defffb04 	addi	sp,sp,-20
 1017aa4:	dfc00415 	stw	ra,16(sp)
 1017aa8:	df000315 	stw	fp,12(sp)
 1017aac:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 1017ab0:	010040b4 	movhi	r4,258
 1017ab4:	211ddd04 	addi	r4,r4,30580
 1017ab8:	0140dc04 	movi	r5,880
 1017abc:	1015ad00 	call	1015ad0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 1017ac0:	008040b4 	movhi	r2,258
 1017ac4:	109ddd04 	addi	r2,r2,30580
 1017ac8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 1017acc:	008040b4 	movhi	r2,258
 1017ad0:	109de804 	addi	r2,r2,30624
 1017ad4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 1017ad8:	e03fff0d 	sth	zero,-4(fp)
 1017adc:	00001306 	br	1017b2c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 1017ae0:	e0bffe17 	ldw	r2,-8(fp)
 1017ae4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 1017ae8:	e0fffe17 	ldw	r3,-8(fp)
 1017aec:	e0bffd17 	ldw	r2,-12(fp)
 1017af0:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 1017af4:	e0fffe17 	ldw	r3,-8(fp)
 1017af8:	00800fc4 	movi	r2,63
 1017afc:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 1017b00:	e0bffe17 	ldw	r2,-8(fp)
 1017b04:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 1017b08:	e0bffe17 	ldw	r2,-8(fp)
 1017b0c:	10800b04 	addi	r2,r2,44
 1017b10:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 1017b14:	e0bffd17 	ldw	r2,-12(fp)
 1017b18:	10800b04 	addi	r2,r2,44
 1017b1c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 1017b20:	e0bfff0b 	ldhu	r2,-4(fp)
 1017b24:	10800044 	addi	r2,r2,1
 1017b28:	e0bfff0d 	sth	r2,-4(fp)
 1017b2c:	e0bfff0b 	ldhu	r2,-4(fp)
 1017b30:	108004f0 	cmpltui	r2,r2,19
 1017b34:	103fea1e 	bne	r2,zero,1017ae0 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 1017b38:	e0bffe17 	ldw	r2,-8(fp)
 1017b3c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 1017b40:	e0bffe17 	ldw	r2,-8(fp)
 1017b44:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 1017b48:	e0fffe17 	ldw	r3,-8(fp)
 1017b4c:	00800fc4 	movi	r2,63
 1017b50:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 1017b54:	e0bffe17 	ldw	r2,-8(fp)
 1017b58:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 1017b5c:	00c040b4 	movhi	r3,258
 1017b60:	18cbc904 	addi	r3,r3,12068
 1017b64:	008040b4 	movhi	r2,258
 1017b68:	109ddd04 	addi	r2,r2,30580
 1017b6c:	18800015 	stw	r2,0(r3)
#endif
}
 1017b70:	e037883a 	mov	sp,fp
 1017b74:	dfc00117 	ldw	ra,4(sp)
 1017b78:	df000017 	ldw	fp,0(sp)
 1017b7c:	dec00204 	addi	sp,sp,8
 1017b80:	f800283a 	ret

01017b84 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 1017b84:	defffa04 	addi	sp,sp,-24
 1017b88:	dfc00515 	stw	ra,20(sp)
 1017b8c:	df000415 	stw	fp,16(sp)
 1017b90:	df000404 	addi	fp,sp,16
 1017b94:	e13ffe15 	stw	r4,-8(fp)
 1017b98:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 1017b9c:	e0bffe17 	ldw	r2,-8(fp)
 1017ba0:	10800217 	ldw	r2,8(r2)
 1017ba4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 1017ba8:	e0bffd17 	ldw	r2,-12(fp)
 1017bac:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 1017bb0:	e0fffd17 	ldw	r3,-12(fp)
 1017bb4:	e0bfff0b 	ldhu	r2,-4(fp)
 1017bb8:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 1017bbc:	e0bffd17 	ldw	r2,-12(fp)
 1017bc0:	10c00c03 	ldbu	r3,48(r2)
 1017bc4:	00bff7c4 	movi	r2,-33
 1017bc8:	1884703a 	and	r2,r3,r2
 1017bcc:	1007883a 	mov	r3,r2
 1017bd0:	e0bffd17 	ldw	r2,-12(fp)
 1017bd4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 1017bd8:	e0bffd17 	ldw	r2,-12(fp)
 1017bdc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 1017be0:	e0bffd17 	ldw	r2,-12(fp)
 1017be4:	10800c03 	ldbu	r2,48(r2)
 1017be8:	10803fcc 	andi	r2,r2,255
 1017bec:	1004c03a 	cmpne	r2,r2,zero
 1017bf0:	10001f1e 	bne	r2,zero,1017c70 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 1017bf4:	e0bffd17 	ldw	r2,-12(fp)
 1017bf8:	10c00d83 	ldbu	r3,54(r2)
 1017bfc:	008040b4 	movhi	r2,258
 1017c00:	108bc404 	addi	r2,r2,12048
 1017c04:	10800003 	ldbu	r2,0(r2)
 1017c08:	1884b03a 	or	r2,r3,r2
 1017c0c:	1007883a 	mov	r3,r2
 1017c10:	008040b4 	movhi	r2,258
 1017c14:	108bc404 	addi	r2,r2,12048
 1017c18:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1017c1c:	e0bffd17 	ldw	r2,-12(fp)
 1017c20:	10800d03 	ldbu	r2,52(r2)
 1017c24:	11003fcc 	andi	r4,r2,255
 1017c28:	e0bffd17 	ldw	r2,-12(fp)
 1017c2c:	10800d03 	ldbu	r2,52(r2)
 1017c30:	10c03fcc 	andi	r3,r2,255
 1017c34:	008040b4 	movhi	r2,258
 1017c38:	108bc444 	addi	r2,r2,12049
 1017c3c:	10c5883a 	add	r2,r2,r3
 1017c40:	10c00003 	ldbu	r3,0(r2)
 1017c44:	e0bffd17 	ldw	r2,-12(fp)
 1017c48:	10800d43 	ldbu	r2,53(r2)
 1017c4c:	1884b03a 	or	r2,r3,r2
 1017c50:	1007883a 	mov	r3,r2
 1017c54:	008040b4 	movhi	r2,258
 1017c58:	108bc444 	addi	r2,r2,12049
 1017c5c:	1105883a 	add	r2,r2,r4
 1017c60:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 1017c64:	00800044 	movi	r2,1
 1017c68:	e0bffc05 	stb	r2,-16(fp)
 1017c6c:	00000106 	br	1017c74 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 1017c70:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 1017c74:	e13ffe17 	ldw	r4,-8(fp)
 1017c78:	1017c940 	call	1017c94 <OS_FlagUnlink>
    return (sched);
 1017c7c:	e0bffc03 	ldbu	r2,-16(fp)
}
 1017c80:	e037883a 	mov	sp,fp
 1017c84:	dfc00117 	ldw	ra,4(sp)
 1017c88:	df000017 	ldw	fp,0(sp)
 1017c8c:	dec00204 	addi	sp,sp,8
 1017c90:	f800283a 	ret

01017c94 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 1017c94:	defffa04 	addi	sp,sp,-24
 1017c98:	df000515 	stw	fp,20(sp)
 1017c9c:	df000504 	addi	fp,sp,20
 1017ca0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 1017ca4:	e0bfff17 	ldw	r2,-4(fp)
 1017ca8:	10800117 	ldw	r2,4(r2)
 1017cac:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 1017cb0:	e0bfff17 	ldw	r2,-4(fp)
 1017cb4:	10800017 	ldw	r2,0(r2)
 1017cb8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 1017cbc:	e0bffc17 	ldw	r2,-16(fp)
 1017cc0:	1004c03a 	cmpne	r2,r2,zero
 1017cc4:	10000c1e 	bne	r2,zero,1017cf8 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 1017cc8:	e0bfff17 	ldw	r2,-4(fp)
 1017ccc:	10800317 	ldw	r2,12(r2)
 1017cd0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 1017cd4:	e0fffd17 	ldw	r3,-12(fp)
 1017cd8:	e0bffb17 	ldw	r2,-20(fp)
 1017cdc:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 1017ce0:	e0bffb17 	ldw	r2,-20(fp)
 1017ce4:	1005003a 	cmpeq	r2,r2,zero
 1017ce8:	10000c1e 	bne	r2,zero,1017d1c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 1017cec:	e0bffb17 	ldw	r2,-20(fp)
 1017cf0:	10000115 	stw	zero,4(r2)
 1017cf4:	00000906 	br	1017d1c <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 1017cf8:	e0fffc17 	ldw	r3,-16(fp)
 1017cfc:	e0bffb17 	ldw	r2,-20(fp)
 1017d00:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 1017d04:	e0bffb17 	ldw	r2,-20(fp)
 1017d08:	1005003a 	cmpeq	r2,r2,zero
 1017d0c:	1000031e 	bne	r2,zero,1017d1c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 1017d10:	e0fffb17 	ldw	r3,-20(fp)
 1017d14:	e0bffc17 	ldw	r2,-16(fp)
 1017d18:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 1017d1c:	e0bfff17 	ldw	r2,-4(fp)
 1017d20:	10800217 	ldw	r2,8(r2)
 1017d24:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 1017d28:	e0bffe17 	ldw	r2,-8(fp)
 1017d2c:	10000a15 	stw	zero,40(r2)
#endif
}
 1017d30:	e037883a 	mov	sp,fp
 1017d34:	df000017 	ldw	fp,0(sp)
 1017d38:	dec00104 	addi	sp,sp,4
 1017d3c:	f800283a 	ret

01017d40 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 1017d40:	defff304 	addi	sp,sp,-52
 1017d44:	df000c15 	stw	fp,48(sp)
 1017d48:	df000c04 	addi	fp,sp,48
 1017d4c:	e13ffb15 	stw	r4,-20(fp)
 1017d50:	e17ffc15 	stw	r5,-16(fp)
 1017d54:	e1bffd15 	stw	r6,-12(fp)
 1017d58:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1017d5c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1017d60:	e0bffe17 	ldw	r2,-8(fp)
 1017d64:	1004c03a 	cmpne	r2,r2,zero
 1017d68:	1000021e 	bne	r2,zero,1017d74 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 1017d6c:	e03fff15 	stw	zero,-4(fp)
 1017d70:	00007506 	br	1017f48 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 1017d74:	e0bffb17 	ldw	r2,-20(fp)
 1017d78:	1004c03a 	cmpne	r2,r2,zero
 1017d7c:	1000051e 	bne	r2,zero,1017d94 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 1017d80:	e0fffe17 	ldw	r3,-8(fp)
 1017d84:	00801884 	movi	r2,98
 1017d88:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1017d8c:	e03fff15 	stw	zero,-4(fp)
 1017d90:	00006d06 	br	1017f48 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 1017d94:	e0bffb17 	ldw	r2,-20(fp)
 1017d98:	108000cc 	andi	r2,r2,3
 1017d9c:	1005003a 	cmpeq	r2,r2,zero
 1017da0:	1000051e 	bne	r2,zero,1017db8 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 1017da4:	e0fffe17 	ldw	r3,-8(fp)
 1017da8:	00801884 	movi	r2,98
 1017dac:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1017db0:	e03fff15 	stw	zero,-4(fp)
 1017db4:	00006406 	br	1017f48 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 1017db8:	e0bffc17 	ldw	r2,-16(fp)
 1017dbc:	108000a8 	cmpgeui	r2,r2,2
 1017dc0:	1000051e 	bne	r2,zero,1017dd8 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 1017dc4:	e0fffe17 	ldw	r3,-8(fp)
 1017dc8:	008016c4 	movi	r2,91
 1017dcc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1017dd0:	e03fff15 	stw	zero,-4(fp)
 1017dd4:	00005c06 	br	1017f48 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 1017dd8:	e0bffd17 	ldw	r2,-12(fp)
 1017ddc:	10800128 	cmpgeui	r2,r2,4
 1017de0:	1000051e 	bne	r2,zero,1017df8 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 1017de4:	e0fffe17 	ldw	r3,-8(fp)
 1017de8:	00801704 	movi	r2,92
 1017dec:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1017df0:	e03fff15 	stw	zero,-4(fp)
 1017df4:	00005406 	br	1017f48 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017df8:	0005303a 	rdctl	r2,status
 1017dfc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017e00:	e0fff517 	ldw	r3,-44(fp)
 1017e04:	00bfff84 	movi	r2,-2
 1017e08:	1884703a 	and	r2,r3,r2
 1017e0c:	1001703a 	wrctl	status,r2
  
  return context;
 1017e10:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1017e14:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 1017e18:	008040b4 	movhi	r2,258
 1017e1c:	108bc104 	addi	r2,r2,12036
 1017e20:	10800017 	ldw	r2,0(r2)
 1017e24:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 1017e28:	008040b4 	movhi	r2,258
 1017e2c:	108bc104 	addi	r2,r2,12036
 1017e30:	10800017 	ldw	r2,0(r2)
 1017e34:	1005003a 	cmpeq	r2,r2,zero
 1017e38:	1000081e 	bne	r2,zero,1017e5c <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 1017e3c:	008040b4 	movhi	r2,258
 1017e40:	108bc104 	addi	r2,r2,12036
 1017e44:	10800017 	ldw	r2,0(r2)
 1017e48:	10800117 	ldw	r2,4(r2)
 1017e4c:	1007883a 	mov	r3,r2
 1017e50:	008040b4 	movhi	r2,258
 1017e54:	108bc104 	addi	r2,r2,12036
 1017e58:	10c00015 	stw	r3,0(r2)
 1017e5c:	e0bff617 	ldw	r2,-40(fp)
 1017e60:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017e64:	e0bff417 	ldw	r2,-48(fp)
 1017e68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 1017e6c:	e0bffa17 	ldw	r2,-24(fp)
 1017e70:	1004c03a 	cmpne	r2,r2,zero
 1017e74:	1000051e 	bne	r2,zero,1017e8c <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 1017e78:	e0fffe17 	ldw	r3,-8(fp)
 1017e7c:	00801684 	movi	r2,90
 1017e80:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1017e84:	e03fff15 	stw	zero,-4(fp)
 1017e88:	00002f06 	br	1017f48 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 1017e8c:	e0bffb17 	ldw	r2,-20(fp)
 1017e90:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 1017e94:	e0bffb17 	ldw	r2,-20(fp)
 1017e98:	1007883a 	mov	r3,r2
 1017e9c:	e0bffd17 	ldw	r2,-12(fp)
 1017ea0:	1885883a 	add	r2,r3,r2
 1017ea4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 1017ea8:	e03ff715 	stw	zero,-36(fp)
 1017eac:	00000d06 	br	1017ee4 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 1017eb0:	e0fff817 	ldw	r3,-32(fp)
 1017eb4:	e0bff917 	ldw	r2,-28(fp)
 1017eb8:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 1017ebc:	e0bff917 	ldw	r2,-28(fp)
 1017ec0:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 1017ec4:	e0bff917 	ldw	r2,-28(fp)
 1017ec8:	1007883a 	mov	r3,r2
 1017ecc:	e0bffd17 	ldw	r2,-12(fp)
 1017ed0:	1885883a 	add	r2,r3,r2
 1017ed4:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 1017ed8:	e0bff717 	ldw	r2,-36(fp)
 1017edc:	10800044 	addi	r2,r2,1
 1017ee0:	e0bff715 	stw	r2,-36(fp)
 1017ee4:	e0bffc17 	ldw	r2,-16(fp)
 1017ee8:	10ffffc4 	addi	r3,r2,-1
 1017eec:	e0bff717 	ldw	r2,-36(fp)
 1017ef0:	10ffef36 	bltu	r2,r3,1017eb0 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 1017ef4:	e0bff817 	ldw	r2,-32(fp)
 1017ef8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 1017efc:	e0fffa17 	ldw	r3,-24(fp)
 1017f00:	e0bffb17 	ldw	r2,-20(fp)
 1017f04:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 1017f08:	e0fffa17 	ldw	r3,-24(fp)
 1017f0c:	e0bffb17 	ldw	r2,-20(fp)
 1017f10:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 1017f14:	e0fffa17 	ldw	r3,-24(fp)
 1017f18:	e0bffc17 	ldw	r2,-16(fp)
 1017f1c:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 1017f20:	e0fffa17 	ldw	r3,-24(fp)
 1017f24:	e0bffc17 	ldw	r2,-16(fp)
 1017f28:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 1017f2c:	e0fffa17 	ldw	r3,-24(fp)
 1017f30:	e0bffd17 	ldw	r2,-12(fp)
 1017f34:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 1017f38:	e0bffe17 	ldw	r2,-8(fp)
 1017f3c:	10000005 	stb	zero,0(r2)
    return (pmem);
 1017f40:	e0bffa17 	ldw	r2,-24(fp)
 1017f44:	e0bfff15 	stw	r2,-4(fp)
 1017f48:	e0bfff17 	ldw	r2,-4(fp)
}
 1017f4c:	e037883a 	mov	sp,fp
 1017f50:	df000017 	ldw	fp,0(sp)
 1017f54:	dec00104 	addi	sp,sp,4
 1017f58:	f800283a 	ret

01017f5c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 1017f5c:	defff704 	addi	sp,sp,-36
 1017f60:	df000815 	stw	fp,32(sp)
 1017f64:	df000804 	addi	fp,sp,32
 1017f68:	e13ffd15 	stw	r4,-12(fp)
 1017f6c:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1017f70:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1017f74:	e0bffe17 	ldw	r2,-8(fp)
 1017f78:	1004c03a 	cmpne	r2,r2,zero
 1017f7c:	1000021e 	bne	r2,zero,1017f88 <OSMemGet+0x2c>
        return ((void *)0);
 1017f80:	e03fff15 	stw	zero,-4(fp)
 1017f84:	00003106 	br	101804c <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 1017f88:	e0bffd17 	ldw	r2,-12(fp)
 1017f8c:	1004c03a 	cmpne	r2,r2,zero
 1017f90:	1000051e 	bne	r2,zero,1017fa8 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 1017f94:	e0fffe17 	ldw	r3,-8(fp)
 1017f98:	00801804 	movi	r2,96
 1017f9c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1017fa0:	e03fff15 	stw	zero,-4(fp)
 1017fa4:	00002906 	br	101804c <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017fa8:	0005303a 	rdctl	r2,status
 1017fac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017fb0:	e0fffa17 	ldw	r3,-24(fp)
 1017fb4:	00bfff84 	movi	r2,-2
 1017fb8:	1884703a 	and	r2,r3,r2
 1017fbc:	1001703a 	wrctl	status,r2
  
  return context;
 1017fc0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1017fc4:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 1017fc8:	e0bffd17 	ldw	r2,-12(fp)
 1017fcc:	10800417 	ldw	r2,16(r2)
 1017fd0:	1005003a 	cmpeq	r2,r2,zero
 1017fd4:	1000151e 	bne	r2,zero,101802c <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 1017fd8:	e0bffd17 	ldw	r2,-12(fp)
 1017fdc:	10800117 	ldw	r2,4(r2)
 1017fe0:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 1017fe4:	e0bffc17 	ldw	r2,-16(fp)
 1017fe8:	10c00017 	ldw	r3,0(r2)
 1017fec:	e0bffd17 	ldw	r2,-12(fp)
 1017ff0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 1017ff4:	e0bffd17 	ldw	r2,-12(fp)
 1017ff8:	10800417 	ldw	r2,16(r2)
 1017ffc:	10ffffc4 	addi	r3,r2,-1
 1018000:	e0bffd17 	ldw	r2,-12(fp)
 1018004:	10c00415 	stw	r3,16(r2)
 1018008:	e0bffb17 	ldw	r2,-20(fp)
 101800c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018010:	e0bff917 	ldw	r2,-28(fp)
 1018014:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 1018018:	e0bffe17 	ldw	r2,-8(fp)
 101801c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 1018020:	e0bffc17 	ldw	r2,-16(fp)
 1018024:	e0bfff15 	stw	r2,-4(fp)
 1018028:	00000806 	br	101804c <OSMemGet+0xf0>
 101802c:	e0bffb17 	ldw	r2,-20(fp)
 1018030:	e0bff815 	stw	r2,-32(fp)
 1018034:	e0bff817 	ldw	r2,-32(fp)
 1018038:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 101803c:	e0fffe17 	ldw	r3,-8(fp)
 1018040:	00801744 	movi	r2,93
 1018044:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 1018048:	e03fff15 	stw	zero,-4(fp)
 101804c:	e0bfff17 	ldw	r2,-4(fp)
}
 1018050:	e037883a 	mov	sp,fp
 1018054:	df000017 	ldw	fp,0(sp)
 1018058:	dec00104 	addi	sp,sp,4
 101805c:	f800283a 	ret

01018060 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 1018060:	defff604 	addi	sp,sp,-40
 1018064:	dfc00915 	stw	ra,36(sp)
 1018068:	df000815 	stw	fp,32(sp)
 101806c:	df000804 	addi	fp,sp,32
 1018070:	e13ffc15 	stw	r4,-16(fp)
 1018074:	e17ffd15 	stw	r5,-12(fp)
 1018078:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101807c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1018080:	e0bffe17 	ldw	r2,-8(fp)
 1018084:	1004c03a 	cmpne	r2,r2,zero
 1018088:	1000021e 	bne	r2,zero,1018094 <OSMemNameGet+0x34>
        return (0);
 101808c:	e03fff15 	stw	zero,-4(fp)
 1018090:	00003006 	br	1018154 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 1018094:	e0bffc17 	ldw	r2,-16(fp)
 1018098:	1004c03a 	cmpne	r2,r2,zero
 101809c:	1000051e 	bne	r2,zero,10180b4 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 10180a0:	e0fffe17 	ldw	r3,-8(fp)
 10180a4:	00801804 	movi	r2,96
 10180a8:	18800005 	stb	r2,0(r3)
        return (0);
 10180ac:	e03fff15 	stw	zero,-4(fp)
 10180b0:	00002806 	br	1018154 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 10180b4:	e0bffd17 	ldw	r2,-12(fp)
 10180b8:	1004c03a 	cmpne	r2,r2,zero
 10180bc:	1000051e 	bne	r2,zero,10180d4 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 10180c0:	e0fffe17 	ldw	r3,-8(fp)
 10180c4:	00800304 	movi	r2,12
 10180c8:	18800005 	stb	r2,0(r3)
        return (0);
 10180cc:	e03fff15 	stw	zero,-4(fp)
 10180d0:	00002006 	br	1018154 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10180d4:	008040b4 	movhi	r2,258
 10180d8:	108bc604 	addi	r2,r2,12056
 10180dc:	10800003 	ldbu	r2,0(r2)
 10180e0:	10803fcc 	andi	r2,r2,255
 10180e4:	1005003a 	cmpeq	r2,r2,zero
 10180e8:	1000051e 	bne	r2,zero,1018100 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 10180ec:	e0fffe17 	ldw	r3,-8(fp)
 10180f0:	00800444 	movi	r2,17
 10180f4:	18800005 	stb	r2,0(r3)
        return (0);
 10180f8:	e03fff15 	stw	zero,-4(fp)
 10180fc:	00001506 	br	1018154 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018100:	0005303a 	rdctl	r2,status
 1018104:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018108:	e0fff917 	ldw	r3,-28(fp)
 101810c:	00bfff84 	movi	r2,-2
 1018110:	1884703a 	and	r2,r3,r2
 1018114:	1001703a 	wrctl	status,r2
  
  return context;
 1018118:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101811c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 1018120:	e0bffc17 	ldw	r2,-16(fp)
 1018124:	11400504 	addi	r5,r2,20
 1018128:	e13ffd17 	ldw	r4,-12(fp)
 101812c:	1015cd40 	call	1015cd4 <OS_StrCopy>
 1018130:	e0bffb05 	stb	r2,-20(fp)
 1018134:	e0bffa17 	ldw	r2,-24(fp)
 1018138:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101813c:	e0bff817 	ldw	r2,-32(fp)
 1018140:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1018144:	e0bffe17 	ldw	r2,-8(fp)
 1018148:	10000005 	stb	zero,0(r2)
    return (len);
 101814c:	e0bffb03 	ldbu	r2,-20(fp)
 1018150:	e0bfff15 	stw	r2,-4(fp)
 1018154:	e0bfff17 	ldw	r2,-4(fp)
}
 1018158:	e037883a 	mov	sp,fp
 101815c:	dfc00117 	ldw	ra,4(sp)
 1018160:	df000017 	ldw	fp,0(sp)
 1018164:	dec00204 	addi	sp,sp,8
 1018168:	f800283a 	ret

0101816c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 101816c:	defff604 	addi	sp,sp,-40
 1018170:	dfc00915 	stw	ra,36(sp)
 1018174:	df000815 	stw	fp,32(sp)
 1018178:	df000804 	addi	fp,sp,32
 101817c:	e13ffd15 	stw	r4,-12(fp)
 1018180:	e17ffe15 	stw	r5,-8(fp)
 1018184:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1018188:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101818c:	e0bfff17 	ldw	r2,-4(fp)
 1018190:	1005003a 	cmpeq	r2,r2,zero
 1018194:	1000381e 	bne	r2,zero,1018278 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 1018198:	e0bffd17 	ldw	r2,-12(fp)
 101819c:	1004c03a 	cmpne	r2,r2,zero
 10181a0:	1000041e 	bne	r2,zero,10181b4 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 10181a4:	e0ffff17 	ldw	r3,-4(fp)
 10181a8:	00801804 	movi	r2,96
 10181ac:	18800005 	stb	r2,0(r3)
        return;
 10181b0:	00003106 	br	1018278 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 10181b4:	e0bffe17 	ldw	r2,-8(fp)
 10181b8:	1004c03a 	cmpne	r2,r2,zero
 10181bc:	1000041e 	bne	r2,zero,10181d0 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 10181c0:	e0ffff17 	ldw	r3,-4(fp)
 10181c4:	00800304 	movi	r2,12
 10181c8:	18800005 	stb	r2,0(r3)
        return;
 10181cc:	00002a06 	br	1018278 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10181d0:	008040b4 	movhi	r2,258
 10181d4:	108bc604 	addi	r2,r2,12056
 10181d8:	10800003 	ldbu	r2,0(r2)
 10181dc:	10803fcc 	andi	r2,r2,255
 10181e0:	1005003a 	cmpeq	r2,r2,zero
 10181e4:	1000041e 	bne	r2,zero,10181f8 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 10181e8:	e0ffff17 	ldw	r3,-4(fp)
 10181ec:	00800484 	movi	r2,18
 10181f0:	18800005 	stb	r2,0(r3)
        return;
 10181f4:	00002006 	br	1018278 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10181f8:	0005303a 	rdctl	r2,status
 10181fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018200:	e0fffa17 	ldw	r3,-24(fp)
 1018204:	00bfff84 	movi	r2,-2
 1018208:	1884703a 	and	r2,r3,r2
 101820c:	1001703a 	wrctl	status,r2
  
  return context;
 1018210:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1018214:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 1018218:	e13ffe17 	ldw	r4,-8(fp)
 101821c:	1015d540 	call	1015d54 <OS_StrLen>
 1018220:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 1018224:	e0bffc03 	ldbu	r2,-16(fp)
 1018228:	10800830 	cmpltui	r2,r2,32
 101822c:	1000081e 	bne	r2,zero,1018250 <OSMemNameSet+0xe4>
 1018230:	e0bffb17 	ldw	r2,-20(fp)
 1018234:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018238:	e0bff917 	ldw	r2,-28(fp)
 101823c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 1018240:	e0ffff17 	ldw	r3,-4(fp)
 1018244:	008018c4 	movi	r2,99
 1018248:	18800005 	stb	r2,0(r3)
        return;
 101824c:	00000a06 	br	1018278 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 1018250:	e0bffd17 	ldw	r2,-12(fp)
 1018254:	11000504 	addi	r4,r2,20
 1018258:	e17ffe17 	ldw	r5,-8(fp)
 101825c:	1015cd40 	call	1015cd4 <OS_StrCopy>
 1018260:	e0bffb17 	ldw	r2,-20(fp)
 1018264:	e0bff815 	stw	r2,-32(fp)
 1018268:	e0bff817 	ldw	r2,-32(fp)
 101826c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1018270:	e0bfff17 	ldw	r2,-4(fp)
 1018274:	10000005 	stb	zero,0(r2)
}
 1018278:	e037883a 	mov	sp,fp
 101827c:	dfc00117 	ldw	ra,4(sp)
 1018280:	df000017 	ldw	fp,0(sp)
 1018284:	dec00204 	addi	sp,sp,8
 1018288:	f800283a 	ret

0101828c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 101828c:	defff804 	addi	sp,sp,-32
 1018290:	df000715 	stw	fp,28(sp)
 1018294:	df000704 	addi	fp,sp,28
 1018298:	e13ffd15 	stw	r4,-12(fp)
 101829c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10182a0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 10182a4:	e0bffd17 	ldw	r2,-12(fp)
 10182a8:	1004c03a 	cmpne	r2,r2,zero
 10182ac:	1000031e 	bne	r2,zero,10182bc <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 10182b0:	00801804 	movi	r2,96
 10182b4:	e0bfff15 	stw	r2,-4(fp)
 10182b8:	00002b06 	br	1018368 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 10182bc:	e0bffe17 	ldw	r2,-8(fp)
 10182c0:	1004c03a 	cmpne	r2,r2,zero
 10182c4:	1000031e 	bne	r2,zero,10182d4 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 10182c8:	008017c4 	movi	r2,95
 10182cc:	e0bfff15 	stw	r2,-4(fp)
 10182d0:	00002506 	br	1018368 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10182d4:	0005303a 	rdctl	r2,status
 10182d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10182dc:	e0fffb17 	ldw	r3,-20(fp)
 10182e0:	00bfff84 	movi	r2,-2
 10182e4:	1884703a 	and	r2,r3,r2
 10182e8:	1001703a 	wrctl	status,r2
  
  return context;
 10182ec:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10182f0:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 10182f4:	e0bffd17 	ldw	r2,-12(fp)
 10182f8:	10c00417 	ldw	r3,16(r2)
 10182fc:	e0bffd17 	ldw	r2,-12(fp)
 1018300:	10800317 	ldw	r2,12(r2)
 1018304:	18800736 	bltu	r3,r2,1018324 <OSMemPut+0x98>
 1018308:	e0bffc17 	ldw	r2,-16(fp)
 101830c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018310:	e0bffa17 	ldw	r2,-24(fp)
 1018314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 1018318:	00801784 	movi	r2,94
 101831c:	e0bfff15 	stw	r2,-4(fp)
 1018320:	00001106 	br	1018368 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 1018324:	e0fffe17 	ldw	r3,-8(fp)
 1018328:	e0bffd17 	ldw	r2,-12(fp)
 101832c:	10800117 	ldw	r2,4(r2)
 1018330:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 1018334:	e0fffd17 	ldw	r3,-12(fp)
 1018338:	e0bffe17 	ldw	r2,-8(fp)
 101833c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 1018340:	e0bffd17 	ldw	r2,-12(fp)
 1018344:	10800417 	ldw	r2,16(r2)
 1018348:	10c00044 	addi	r3,r2,1
 101834c:	e0bffd17 	ldw	r2,-12(fp)
 1018350:	10c00415 	stw	r3,16(r2)
 1018354:	e0bffc17 	ldw	r2,-16(fp)
 1018358:	e0bff915 	stw	r2,-28(fp)
 101835c:	e0bff917 	ldw	r2,-28(fp)
 1018360:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 1018364:	e03fff15 	stw	zero,-4(fp)
 1018368:	e0bfff17 	ldw	r2,-4(fp)
}
 101836c:	e037883a 	mov	sp,fp
 1018370:	df000017 	ldw	fp,0(sp)
 1018374:	dec00104 	addi	sp,sp,4
 1018378:	f800283a 	ret

0101837c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 101837c:	defff904 	addi	sp,sp,-28
 1018380:	df000615 	stw	fp,24(sp)
 1018384:	df000604 	addi	fp,sp,24
 1018388:	e13ffd15 	stw	r4,-12(fp)
 101838c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1018390:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 1018394:	e0bffd17 	ldw	r2,-12(fp)
 1018398:	1004c03a 	cmpne	r2,r2,zero
 101839c:	1000031e 	bne	r2,zero,10183ac <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 10183a0:	00801804 	movi	r2,96
 10183a4:	e0bfff15 	stw	r2,-4(fp)
 10183a8:	00002e06 	br	1018464 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 10183ac:	e0bffe17 	ldw	r2,-8(fp)
 10183b0:	1004c03a 	cmpne	r2,r2,zero
 10183b4:	1000031e 	bne	r2,zero,10183c4 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 10183b8:	00801844 	movi	r2,97
 10183bc:	e0bfff15 	stw	r2,-4(fp)
 10183c0:	00002806 	br	1018464 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10183c4:	0005303a 	rdctl	r2,status
 10183c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10183cc:	e0fffb17 	ldw	r3,-20(fp)
 10183d0:	00bfff84 	movi	r2,-2
 10183d4:	1884703a 	and	r2,r3,r2
 10183d8:	1001703a 	wrctl	status,r2
  
  return context;
 10183dc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10183e0:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 10183e4:	e0bffd17 	ldw	r2,-12(fp)
 10183e8:	10c00017 	ldw	r3,0(r2)
 10183ec:	e0bffe17 	ldw	r2,-8(fp)
 10183f0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 10183f4:	e0bffd17 	ldw	r2,-12(fp)
 10183f8:	10c00117 	ldw	r3,4(r2)
 10183fc:	e0bffe17 	ldw	r2,-8(fp)
 1018400:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 1018404:	e0bffd17 	ldw	r2,-12(fp)
 1018408:	10c00217 	ldw	r3,8(r2)
 101840c:	e0bffe17 	ldw	r2,-8(fp)
 1018410:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 1018414:	e0bffd17 	ldw	r2,-12(fp)
 1018418:	10c00317 	ldw	r3,12(r2)
 101841c:	e0bffe17 	ldw	r2,-8(fp)
 1018420:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 1018424:	e0bffd17 	ldw	r2,-12(fp)
 1018428:	10c00417 	ldw	r3,16(r2)
 101842c:	e0bffe17 	ldw	r2,-8(fp)
 1018430:	10c00415 	stw	r3,16(r2)
 1018434:	e0bffc17 	ldw	r2,-16(fp)
 1018438:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101843c:	e0bffa17 	ldw	r2,-24(fp)
 1018440:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 1018444:	e0bffe17 	ldw	r2,-8(fp)
 1018448:	10c00317 	ldw	r3,12(r2)
 101844c:	e0bffe17 	ldw	r2,-8(fp)
 1018450:	10800417 	ldw	r2,16(r2)
 1018454:	1887c83a 	sub	r3,r3,r2
 1018458:	e0bffe17 	ldw	r2,-8(fp)
 101845c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 1018460:	e03fff15 	stw	zero,-4(fp)
 1018464:	e0bfff17 	ldw	r2,-4(fp)
}
 1018468:	e037883a 	mov	sp,fp
 101846c:	df000017 	ldw	fp,0(sp)
 1018470:	dec00104 	addi	sp,sp,4
 1018474:	f800283a 	ret

01018478 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 1018478:	defffc04 	addi	sp,sp,-16
 101847c:	dfc00315 	stw	ra,12(sp)
 1018480:	df000215 	stw	fp,8(sp)
 1018484:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 1018488:	010040b4 	movhi	r4,258
 101848c:	211eb904 	addi	r4,r4,31460
 1018490:	01430c04 	movi	r5,3120
 1018494:	1015ad00 	call	1015ad0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 1018498:	008040b4 	movhi	r2,258
 101849c:	109eb904 	addi	r2,r2,31460
 10184a0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 10184a4:	e03ffe0d 	sth	zero,-8(fp)
 10184a8:	00001306 	br	10184f8 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 10184ac:	e0bffe0b 	ldhu	r2,-8(fp)
 10184b0:	10800d24 	muli	r2,r2,52
 10184b4:	1007883a 	mov	r3,r2
 10184b8:	008040b4 	movhi	r2,258
 10184bc:	109ec604 	addi	r2,r2,31512
 10184c0:	1887883a 	add	r3,r3,r2
 10184c4:	e0bfff17 	ldw	r2,-4(fp)
 10184c8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 10184cc:	e0ffff17 	ldw	r3,-4(fp)
 10184d0:	00800fc4 	movi	r2,63
 10184d4:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 10184d8:	e0bfff17 	ldw	r2,-4(fp)
 10184dc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 10184e0:	e0bfff17 	ldw	r2,-4(fp)
 10184e4:	10800d04 	addi	r2,r2,52
 10184e8:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 10184ec:	e0bffe0b 	ldhu	r2,-8(fp)
 10184f0:	10800044 	addi	r2,r2,1
 10184f4:	e0bffe0d 	sth	r2,-8(fp)
 10184f8:	e0bffe0b 	ldhu	r2,-8(fp)
 10184fc:	10800ef0 	cmpltui	r2,r2,59
 1018500:	103fea1e 	bne	r2,zero,10184ac <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 1018504:	e0bfff17 	ldw	r2,-4(fp)
 1018508:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 101850c:	e0ffff17 	ldw	r3,-4(fp)
 1018510:	00800fc4 	movi	r2,63
 1018514:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 1018518:	e0bfff17 	ldw	r2,-4(fp)
 101851c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 1018520:	00c040b4 	movhi	r3,258
 1018524:	18cbc104 	addi	r3,r3,12036
 1018528:	008040b4 	movhi	r2,258
 101852c:	109eb904 	addi	r2,r2,31460
 1018530:	18800015 	stw	r2,0(r3)
#endif
}
 1018534:	e037883a 	mov	sp,fp
 1018538:	dfc00117 	ldw	ra,4(sp)
 101853c:	df000017 	ldw	fp,0(sp)
 1018540:	dec00204 	addi	sp,sp,8
 1018544:	f800283a 	ret

01018548 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 1018548:	defff704 	addi	sp,sp,-36
 101854c:	df000815 	stw	fp,32(sp)
 1018550:	df000804 	addi	fp,sp,32
 1018554:	e13ffd15 	stw	r4,-12(fp)
 1018558:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101855c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1018560:	e0bffe17 	ldw	r2,-8(fp)
 1018564:	1004c03a 	cmpne	r2,r2,zero
 1018568:	1000021e 	bne	r2,zero,1018574 <OSQAccept+0x2c>
        return ((void *)0);
 101856c:	e03fff15 	stw	zero,-4(fp)
 1018570:	00004506 	br	1018688 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 1018574:	e0bffd17 	ldw	r2,-12(fp)
 1018578:	1004c03a 	cmpne	r2,r2,zero
 101857c:	1000051e 	bne	r2,zero,1018594 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 1018580:	e0fffe17 	ldw	r3,-8(fp)
 1018584:	00800104 	movi	r2,4
 1018588:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101858c:	e03fff15 	stw	zero,-4(fp)
 1018590:	00003d06 	br	1018688 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 1018594:	e0bffd17 	ldw	r2,-12(fp)
 1018598:	10800003 	ldbu	r2,0(r2)
 101859c:	10803fcc 	andi	r2,r2,255
 10185a0:	108000a0 	cmpeqi	r2,r2,2
 10185a4:	1000051e 	bne	r2,zero,10185bc <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 10185a8:	e0fffe17 	ldw	r3,-8(fp)
 10185ac:	00800044 	movi	r2,1
 10185b0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 10185b4:	e03fff15 	stw	zero,-4(fp)
 10185b8:	00003306 	br	1018688 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10185bc:	0005303a 	rdctl	r2,status
 10185c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10185c4:	e0fff917 	ldw	r3,-28(fp)
 10185c8:	00bfff84 	movi	r2,-2
 10185cc:	1884703a 	and	r2,r3,r2
 10185d0:	1001703a 	wrctl	status,r2
  
  return context;
 10185d4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 10185d8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 10185dc:	e0bffd17 	ldw	r2,-12(fp)
 10185e0:	10800117 	ldw	r2,4(r2)
 10185e4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 10185e8:	e0bffb17 	ldw	r2,-20(fp)
 10185ec:	1080058b 	ldhu	r2,22(r2)
 10185f0:	10bfffcc 	andi	r2,r2,65535
 10185f4:	1005003a 	cmpeq	r2,r2,zero
 10185f8:	1000191e 	bne	r2,zero,1018660 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 10185fc:	e0bffb17 	ldw	r2,-20(fp)
 1018600:	10c00417 	ldw	r3,16(r2)
 1018604:	18800017 	ldw	r2,0(r3)
 1018608:	e0bffc15 	stw	r2,-16(fp)
 101860c:	18c00104 	addi	r3,r3,4
 1018610:	e0bffb17 	ldw	r2,-20(fp)
 1018614:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 1018618:	e0bffb17 	ldw	r2,-20(fp)
 101861c:	1080058b 	ldhu	r2,22(r2)
 1018620:	10bfffc4 	addi	r2,r2,-1
 1018624:	1007883a 	mov	r3,r2
 1018628:	e0bffb17 	ldw	r2,-20(fp)
 101862c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 1018630:	e0bffb17 	ldw	r2,-20(fp)
 1018634:	10c00417 	ldw	r3,16(r2)
 1018638:	e0bffb17 	ldw	r2,-20(fp)
 101863c:	10800217 	ldw	r2,8(r2)
 1018640:	1880041e 	bne	r3,r2,1018654 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 1018644:	e0bffb17 	ldw	r2,-20(fp)
 1018648:	10c00117 	ldw	r3,4(r2)
 101864c:	e0bffb17 	ldw	r2,-20(fp)
 1018650:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 1018654:	e0bffe17 	ldw	r2,-8(fp)
 1018658:	10000005 	stb	zero,0(r2)
 101865c:	00000406 	br	1018670 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 1018660:	e0fffe17 	ldw	r3,-8(fp)
 1018664:	008007c4 	movi	r2,31
 1018668:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 101866c:	e03ffc15 	stw	zero,-16(fp)
 1018670:	e0bffa17 	ldw	r2,-24(fp)
 1018674:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018678:	e0bff817 	ldw	r2,-32(fp)
 101867c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 1018680:	e0bffc17 	ldw	r2,-16(fp)
 1018684:	e0bfff15 	stw	r2,-4(fp)
 1018688:	e0bfff17 	ldw	r2,-4(fp)
}
 101868c:	e037883a 	mov	sp,fp
 1018690:	df000017 	ldw	fp,0(sp)
 1018694:	dec00104 	addi	sp,sp,4
 1018698:	f800283a 	ret

0101869c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 101869c:	defff304 	addi	sp,sp,-52
 10186a0:	dfc00c15 	stw	ra,48(sp)
 10186a4:	df000b15 	stw	fp,44(sp)
 10186a8:	df000b04 	addi	fp,sp,44
 10186ac:	e13ffd15 	stw	r4,-12(fp)
 10186b0:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10186b4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 10186b8:	008040b4 	movhi	r2,258
 10186bc:	108bc604 	addi	r2,r2,12056
 10186c0:	10800003 	ldbu	r2,0(r2)
 10186c4:	10803fcc 	andi	r2,r2,255
 10186c8:	1005003a 	cmpeq	r2,r2,zero
 10186cc:	1000021e 	bne	r2,zero,10186d8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 10186d0:	e03fff15 	stw	zero,-4(fp)
 10186d4:	00007006 	br	1018898 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10186d8:	0005303a 	rdctl	r2,status
 10186dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10186e0:	e0fff917 	ldw	r3,-28(fp)
 10186e4:	00bfff84 	movi	r2,-2
 10186e8:	1884703a 	and	r2,r3,r2
 10186ec:	1001703a 	wrctl	status,r2
  
  return context;
 10186f0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 10186f4:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 10186f8:	008040b4 	movhi	r2,258
 10186fc:	108bc504 	addi	r2,r2,12052
 1018700:	10800017 	ldw	r2,0(r2)
 1018704:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 1018708:	008040b4 	movhi	r2,258
 101870c:	108bc504 	addi	r2,r2,12052
 1018710:	10800017 	ldw	r2,0(r2)
 1018714:	1005003a 	cmpeq	r2,r2,zero
 1018718:	1000081e 	bne	r2,zero,101873c <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 101871c:	008040b4 	movhi	r2,258
 1018720:	108bc504 	addi	r2,r2,12052
 1018724:	10800017 	ldw	r2,0(r2)
 1018728:	10800117 	ldw	r2,4(r2)
 101872c:	1007883a 	mov	r3,r2
 1018730:	008040b4 	movhi	r2,258
 1018734:	108bc504 	addi	r2,r2,12052
 1018738:	10c00015 	stw	r3,0(r2)
 101873c:	e0bffa17 	ldw	r2,-24(fp)
 1018740:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018744:	e0bff817 	ldw	r2,-32(fp)
 1018748:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 101874c:	e0bffc17 	ldw	r2,-16(fp)
 1018750:	1005003a 	cmpeq	r2,r2,zero
 1018754:	10004e1e 	bne	r2,zero,1018890 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018758:	0005303a 	rdctl	r2,status
 101875c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018760:	e0fff717 	ldw	r3,-36(fp)
 1018764:	00bfff84 	movi	r2,-2
 1018768:	1884703a 	and	r2,r3,r2
 101876c:	1001703a 	wrctl	status,r2
  
  return context;
 1018770:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 1018774:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 1018778:	008040b4 	movhi	r2,258
 101877c:	108bc304 	addi	r2,r2,12044
 1018780:	10800017 	ldw	r2,0(r2)
 1018784:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 1018788:	e0bffb17 	ldw	r2,-20(fp)
 101878c:	1005003a 	cmpeq	r2,r2,zero
 1018790:	1000311e 	bne	r2,zero,1018858 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 1018794:	008040b4 	movhi	r2,258
 1018798:	108bc304 	addi	r2,r2,12044
 101879c:	10800017 	ldw	r2,0(r2)
 10187a0:	10c00017 	ldw	r3,0(r2)
 10187a4:	008040b4 	movhi	r2,258
 10187a8:	108bc304 	addi	r2,r2,12044
 10187ac:	10c00015 	stw	r3,0(r2)
 10187b0:	e0bffa17 	ldw	r2,-24(fp)
 10187b4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10187b8:	e0bff617 	ldw	r2,-40(fp)
 10187bc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 10187c0:	e0fffb17 	ldw	r3,-20(fp)
 10187c4:	e0bffd17 	ldw	r2,-12(fp)
 10187c8:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 10187cc:	e0bffe0b 	ldhu	r2,-8(fp)
 10187d0:	1085883a 	add	r2,r2,r2
 10187d4:	1085883a 	add	r2,r2,r2
 10187d8:	1007883a 	mov	r3,r2
 10187dc:	e0bffd17 	ldw	r2,-12(fp)
 10187e0:	1887883a 	add	r3,r3,r2
 10187e4:	e0bffb17 	ldw	r2,-20(fp)
 10187e8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 10187ec:	e0fffb17 	ldw	r3,-20(fp)
 10187f0:	e0bffd17 	ldw	r2,-12(fp)
 10187f4:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 10187f8:	e0fffb17 	ldw	r3,-20(fp)
 10187fc:	e0bffd17 	ldw	r2,-12(fp)
 1018800:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 1018804:	e0fffb17 	ldw	r3,-20(fp)
 1018808:	e0bffe0b 	ldhu	r2,-8(fp)
 101880c:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 1018810:	e0bffb17 	ldw	r2,-20(fp)
 1018814:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 1018818:	e0fffc17 	ldw	r3,-16(fp)
 101881c:	00800084 	movi	r2,2
 1018820:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 1018824:	e0bffc17 	ldw	r2,-16(fp)
 1018828:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 101882c:	e0fffc17 	ldw	r3,-16(fp)
 1018830:	e0bffb17 	ldw	r2,-20(fp)
 1018834:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 1018838:	e0fffc17 	ldw	r3,-16(fp)
 101883c:	00800fc4 	movi	r2,63
 1018840:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 1018844:	e0bffc17 	ldw	r2,-16(fp)
 1018848:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 101884c:	e13ffc17 	ldw	r4,-16(fp)
 1018850:	10157040 	call	1015704 <OS_EventWaitListInit>
 1018854:	00000e06 	br	1018890 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 1018858:	008040b4 	movhi	r2,258
 101885c:	108bc504 	addi	r2,r2,12052
 1018860:	10c00017 	ldw	r3,0(r2)
 1018864:	e0bffc17 	ldw	r2,-16(fp)
 1018868:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 101886c:	00c040b4 	movhi	r3,258
 1018870:	18cbc504 	addi	r3,r3,12052
 1018874:	e0bffc17 	ldw	r2,-16(fp)
 1018878:	18800015 	stw	r2,0(r3)
 101887c:	e0bffa17 	ldw	r2,-24(fp)
 1018880:	e0bff515 	stw	r2,-44(fp)
 1018884:	e0bff517 	ldw	r2,-44(fp)
 1018888:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 101888c:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 1018890:	e0bffc17 	ldw	r2,-16(fp)
 1018894:	e0bfff15 	stw	r2,-4(fp)
 1018898:	e0bfff17 	ldw	r2,-4(fp)
}
 101889c:	e037883a 	mov	sp,fp
 10188a0:	dfc00117 	ldw	ra,4(sp)
 10188a4:	df000017 	ldw	fp,0(sp)
 10188a8:	dec00204 	addi	sp,sp,8
 10188ac:	f800283a 	ret

010188b0 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 10188b0:	defff004 	addi	sp,sp,-64
 10188b4:	dfc00f15 	stw	ra,60(sp)
 10188b8:	df000e15 	stw	fp,56(sp)
 10188bc:	df000e04 	addi	fp,sp,56
 10188c0:	e13ffb15 	stw	r4,-20(fp)
 10188c4:	e1bffd15 	stw	r6,-12(fp)
 10188c8:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 10188cc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 10188d0:	e0bffd17 	ldw	r2,-12(fp)
 10188d4:	1004c03a 	cmpne	r2,r2,zero
 10188d8:	1000031e 	bne	r2,zero,10188e8 <OSQDel+0x38>
        return (pevent);
 10188dc:	e0bffb17 	ldw	r2,-20(fp)
 10188e0:	e0bfff15 	stw	r2,-4(fp)
 10188e4:	0000ac06 	br	1018b98 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 10188e8:	e0bffb17 	ldw	r2,-20(fp)
 10188ec:	1004c03a 	cmpne	r2,r2,zero
 10188f0:	1000061e 	bne	r2,zero,101890c <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 10188f4:	e0fffd17 	ldw	r3,-12(fp)
 10188f8:	00800104 	movi	r2,4
 10188fc:	18800005 	stb	r2,0(r3)
        return (pevent);
 1018900:	e0fffb17 	ldw	r3,-20(fp)
 1018904:	e0ffff15 	stw	r3,-4(fp)
 1018908:	0000a306 	br	1018b98 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 101890c:	e0bffb17 	ldw	r2,-20(fp)
 1018910:	10800003 	ldbu	r2,0(r2)
 1018914:	10803fcc 	andi	r2,r2,255
 1018918:	108000a0 	cmpeqi	r2,r2,2
 101891c:	1000061e 	bne	r2,zero,1018938 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 1018920:	e0fffd17 	ldw	r3,-12(fp)
 1018924:	00800044 	movi	r2,1
 1018928:	18800005 	stb	r2,0(r3)
        return (pevent);
 101892c:	e0bffb17 	ldw	r2,-20(fp)
 1018930:	e0bfff15 	stw	r2,-4(fp)
 1018934:	00009806 	br	1018b98 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1018938:	008040b4 	movhi	r2,258
 101893c:	108bc604 	addi	r2,r2,12056
 1018940:	10800003 	ldbu	r2,0(r2)
 1018944:	10803fcc 	andi	r2,r2,255
 1018948:	1005003a 	cmpeq	r2,r2,zero
 101894c:	1000061e 	bne	r2,zero,1018968 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 1018950:	e0fffd17 	ldw	r3,-12(fp)
 1018954:	008003c4 	movi	r2,15
 1018958:	18800005 	stb	r2,0(r3)
        return (pevent);
 101895c:	e0fffb17 	ldw	r3,-20(fp)
 1018960:	e0ffff15 	stw	r3,-4(fp)
 1018964:	00008c06 	br	1018b98 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018968:	0005303a 	rdctl	r2,status
 101896c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018970:	e0fff617 	ldw	r3,-40(fp)
 1018974:	00bfff84 	movi	r2,-2
 1018978:	1884703a 	and	r2,r3,r2
 101897c:	1001703a 	wrctl	status,r2
  
  return context;
 1018980:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 1018984:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 1018988:	e0bffb17 	ldw	r2,-20(fp)
 101898c:	10800283 	ldbu	r2,10(r2)
 1018990:	10803fcc 	andi	r2,r2,255
 1018994:	1005003a 	cmpeq	r2,r2,zero
 1018998:	1000031e 	bne	r2,zero,10189a8 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 101899c:	00800044 	movi	r2,1
 10189a0:	e0bffa05 	stb	r2,-24(fp)
 10189a4:	00000106 	br	10189ac <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 10189a8:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 10189ac:	e0bffc03 	ldbu	r2,-16(fp)
 10189b0:	e0bffe15 	stw	r2,-8(fp)
 10189b4:	e0fffe17 	ldw	r3,-8(fp)
 10189b8:	1805003a 	cmpeq	r2,r3,zero
 10189bc:	1000041e 	bne	r2,zero,10189d0 <OSQDel+0x120>
 10189c0:	e0fffe17 	ldw	r3,-8(fp)
 10189c4:	18800060 	cmpeqi	r2,r3,1
 10189c8:	1000391e 	bne	r2,zero,1018ab0 <OSQDel+0x200>
 10189cc:	00006706 	br	1018b6c <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 10189d0:	e0bffa03 	ldbu	r2,-24(fp)
 10189d4:	1004c03a 	cmpne	r2,r2,zero
 10189d8:	1000261e 	bne	r2,zero,1018a74 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 10189dc:	e0fffb17 	ldw	r3,-20(fp)
 10189e0:	00800fc4 	movi	r2,63
 10189e4:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 10189e8:	e0bffb17 	ldw	r2,-20(fp)
 10189ec:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 10189f0:	e0bffb17 	ldw	r2,-20(fp)
 10189f4:	10800117 	ldw	r2,4(r2)
 10189f8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 10189fc:	008040b4 	movhi	r2,258
 1018a00:	108bc304 	addi	r2,r2,12044
 1018a04:	10c00017 	ldw	r3,0(r2)
 1018a08:	e0bff817 	ldw	r2,-32(fp)
 1018a0c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 1018a10:	00c040b4 	movhi	r3,258
 1018a14:	18cbc304 	addi	r3,r3,12044
 1018a18:	e0bff817 	ldw	r2,-32(fp)
 1018a1c:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1018a20:	e0bffb17 	ldw	r2,-20(fp)
 1018a24:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 1018a28:	008040b4 	movhi	r2,258
 1018a2c:	108bc504 	addi	r2,r2,12052
 1018a30:	10c00017 	ldw	r3,0(r2)
 1018a34:	e0bffb17 	ldw	r2,-20(fp)
 1018a38:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 1018a3c:	e0bffb17 	ldw	r2,-20(fp)
 1018a40:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 1018a44:	00c040b4 	movhi	r3,258
 1018a48:	18cbc504 	addi	r3,r3,12052
 1018a4c:	e0bffb17 	ldw	r2,-20(fp)
 1018a50:	18800015 	stw	r2,0(r3)
 1018a54:	e0bff717 	ldw	r2,-36(fp)
 1018a58:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018a5c:	e0bff517 	ldw	r2,-44(fp)
 1018a60:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 1018a64:	e0bffd17 	ldw	r2,-12(fp)
 1018a68:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 1018a6c:	e03ff915 	stw	zero,-28(fp)
 1018a70:	00004706 	br	1018b90 <OSQDel+0x2e0>
 1018a74:	e0bff717 	ldw	r2,-36(fp)
 1018a78:	e0bff415 	stw	r2,-48(fp)
 1018a7c:	e0bff417 	ldw	r2,-48(fp)
 1018a80:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 1018a84:	e0fffd17 	ldw	r3,-12(fp)
 1018a88:	00801244 	movi	r2,73
 1018a8c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 1018a90:	e0bffb17 	ldw	r2,-20(fp)
 1018a94:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 1018a98:	00003d06 	br	1018b90 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 1018a9c:	e13ffb17 	ldw	r4,-20(fp)
 1018aa0:	000b883a 	mov	r5,zero
 1018aa4:	01800104 	movi	r6,4
 1018aa8:	000f883a 	mov	r7,zero
 1018aac:	10151500 	call	1015150 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 1018ab0:	e0bffb17 	ldw	r2,-20(fp)
 1018ab4:	10800283 	ldbu	r2,10(r2)
 1018ab8:	10803fcc 	andi	r2,r2,255
 1018abc:	1004c03a 	cmpne	r2,r2,zero
 1018ac0:	103ff61e 	bne	r2,zero,1018a9c <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 1018ac4:	e0fffb17 	ldw	r3,-20(fp)
 1018ac8:	00800fc4 	movi	r2,63
 1018acc:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 1018ad0:	e0bffb17 	ldw	r2,-20(fp)
 1018ad4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 1018ad8:	e0bffb17 	ldw	r2,-20(fp)
 1018adc:	10800117 	ldw	r2,4(r2)
 1018ae0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 1018ae4:	008040b4 	movhi	r2,258
 1018ae8:	108bc304 	addi	r2,r2,12044
 1018aec:	10c00017 	ldw	r3,0(r2)
 1018af0:	e0bff817 	ldw	r2,-32(fp)
 1018af4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 1018af8:	00c040b4 	movhi	r3,258
 1018afc:	18cbc304 	addi	r3,r3,12044
 1018b00:	e0bff817 	ldw	r2,-32(fp)
 1018b04:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1018b08:	e0bffb17 	ldw	r2,-20(fp)
 1018b0c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 1018b10:	008040b4 	movhi	r2,258
 1018b14:	108bc504 	addi	r2,r2,12052
 1018b18:	10c00017 	ldw	r3,0(r2)
 1018b1c:	e0bffb17 	ldw	r2,-20(fp)
 1018b20:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 1018b24:	e0bffb17 	ldw	r2,-20(fp)
 1018b28:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 1018b2c:	00c040b4 	movhi	r3,258
 1018b30:	18cbc504 	addi	r3,r3,12052
 1018b34:	e0bffb17 	ldw	r2,-20(fp)
 1018b38:	18800015 	stw	r2,0(r3)
 1018b3c:	e0bff717 	ldw	r2,-36(fp)
 1018b40:	e0bff315 	stw	r2,-52(fp)
 1018b44:	e0bff317 	ldw	r2,-52(fp)
 1018b48:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1018b4c:	e0bffa03 	ldbu	r2,-24(fp)
 1018b50:	10800058 	cmpnei	r2,r2,1
 1018b54:	1000011e 	bne	r2,zero,1018b5c <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 1018b58:	1015b900 	call	1015b90 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 1018b5c:	e0bffd17 	ldw	r2,-12(fp)
 1018b60:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 1018b64:	e03ff915 	stw	zero,-28(fp)
             break;
 1018b68:	00000906 	br	1018b90 <OSQDel+0x2e0>
 1018b6c:	e0bff717 	ldw	r2,-36(fp)
 1018b70:	e0bff215 	stw	r2,-56(fp)
 1018b74:	e0bff217 	ldw	r2,-56(fp)
 1018b78:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 1018b7c:	e0fffd17 	ldw	r3,-12(fp)
 1018b80:	008001c4 	movi	r2,7
 1018b84:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 1018b88:	e0bffb17 	ldw	r2,-20(fp)
 1018b8c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 1018b90:	e0bff917 	ldw	r2,-28(fp)
 1018b94:	e0bfff15 	stw	r2,-4(fp)
 1018b98:	e0bfff17 	ldw	r2,-4(fp)
}
 1018b9c:	e037883a 	mov	sp,fp
 1018ba0:	dfc00117 	ldw	ra,4(sp)
 1018ba4:	df000017 	ldw	fp,0(sp)
 1018ba8:	dec00204 	addi	sp,sp,8
 1018bac:	f800283a 	ret

01018bb0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 1018bb0:	defff904 	addi	sp,sp,-28
 1018bb4:	df000615 	stw	fp,24(sp)
 1018bb8:	df000604 	addi	fp,sp,24
 1018bbc:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1018bc0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1018bc4:	e0bffe17 	ldw	r2,-8(fp)
 1018bc8:	1004c03a 	cmpne	r2,r2,zero
 1018bcc:	1000031e 	bne	r2,zero,1018bdc <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 1018bd0:	00800104 	movi	r2,4
 1018bd4:	e0bfff15 	stw	r2,-4(fp)
 1018bd8:	00002206 	br	1018c64 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 1018bdc:	e0bffe17 	ldw	r2,-8(fp)
 1018be0:	10800003 	ldbu	r2,0(r2)
 1018be4:	10803fcc 	andi	r2,r2,255
 1018be8:	108000a0 	cmpeqi	r2,r2,2
 1018bec:	1000031e 	bne	r2,zero,1018bfc <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 1018bf0:	00800044 	movi	r2,1
 1018bf4:	e0bfff15 	stw	r2,-4(fp)
 1018bf8:	00001a06 	br	1018c64 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018bfc:	0005303a 	rdctl	r2,status
 1018c00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018c04:	e0fffb17 	ldw	r3,-20(fp)
 1018c08:	00bfff84 	movi	r2,-2
 1018c0c:	1884703a 	and	r2,r3,r2
 1018c10:	1001703a 	wrctl	status,r2
  
  return context;
 1018c14:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1018c18:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 1018c1c:	e0bffe17 	ldw	r2,-8(fp)
 1018c20:	10800117 	ldw	r2,4(r2)
 1018c24:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 1018c28:	e0bffd17 	ldw	r2,-12(fp)
 1018c2c:	10c00117 	ldw	r3,4(r2)
 1018c30:	e0bffd17 	ldw	r2,-12(fp)
 1018c34:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 1018c38:	e0bffd17 	ldw	r2,-12(fp)
 1018c3c:	10c00117 	ldw	r3,4(r2)
 1018c40:	e0bffd17 	ldw	r2,-12(fp)
 1018c44:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 1018c48:	e0bffd17 	ldw	r2,-12(fp)
 1018c4c:	1000058d 	sth	zero,22(r2)
 1018c50:	e0bffc17 	ldw	r2,-16(fp)
 1018c54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018c58:	e0bffa17 	ldw	r2,-24(fp)
 1018c5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1018c60:	e03fff15 	stw	zero,-4(fp)
 1018c64:	e0bfff17 	ldw	r2,-4(fp)
}
 1018c68:	e037883a 	mov	sp,fp
 1018c6c:	df000017 	ldw	fp,0(sp)
 1018c70:	dec00104 	addi	sp,sp,4
 1018c74:	f800283a 	ret

01018c78 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 1018c78:	defff104 	addi	sp,sp,-60
 1018c7c:	dfc00e15 	stw	ra,56(sp)
 1018c80:	df000d15 	stw	fp,52(sp)
 1018c84:	df000d04 	addi	fp,sp,52
 1018c88:	e13ffb15 	stw	r4,-20(fp)
 1018c8c:	e1bffd15 	stw	r6,-12(fp)
 1018c90:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1018c94:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1018c98:	e0bffd17 	ldw	r2,-12(fp)
 1018c9c:	1004c03a 	cmpne	r2,r2,zero
 1018ca0:	1000021e 	bne	r2,zero,1018cac <OSQPend+0x34>
        return ((void *)0);
 1018ca4:	e03fff15 	stw	zero,-4(fp)
 1018ca8:	0000b506 	br	1018f80 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 1018cac:	e0bffb17 	ldw	r2,-20(fp)
 1018cb0:	1004c03a 	cmpne	r2,r2,zero
 1018cb4:	1000051e 	bne	r2,zero,1018ccc <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1018cb8:	e0fffd17 	ldw	r3,-12(fp)
 1018cbc:	00800104 	movi	r2,4
 1018cc0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1018cc4:	e03fff15 	stw	zero,-4(fp)
 1018cc8:	0000ad06 	br	1018f80 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 1018ccc:	e0bffb17 	ldw	r2,-20(fp)
 1018cd0:	10800003 	ldbu	r2,0(r2)
 1018cd4:	10803fcc 	andi	r2,r2,255
 1018cd8:	108000a0 	cmpeqi	r2,r2,2
 1018cdc:	1000051e 	bne	r2,zero,1018cf4 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1018ce0:	e0fffd17 	ldw	r3,-12(fp)
 1018ce4:	00800044 	movi	r2,1
 1018ce8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1018cec:	e03fff15 	stw	zero,-4(fp)
 1018cf0:	0000a306 	br	1018f80 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 1018cf4:	008040b4 	movhi	r2,258
 1018cf8:	108bc604 	addi	r2,r2,12056
 1018cfc:	10800003 	ldbu	r2,0(r2)
 1018d00:	10803fcc 	andi	r2,r2,255
 1018d04:	1005003a 	cmpeq	r2,r2,zero
 1018d08:	1000051e 	bne	r2,zero,1018d20 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 1018d0c:	e0fffd17 	ldw	r3,-12(fp)
 1018d10:	00800084 	movi	r2,2
 1018d14:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1018d18:	e03fff15 	stw	zero,-4(fp)
 1018d1c:	00009806 	br	1018f80 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 1018d20:	008040b4 	movhi	r2,258
 1018d24:	108bb804 	addi	r2,r2,12000
 1018d28:	10800003 	ldbu	r2,0(r2)
 1018d2c:	10803fcc 	andi	r2,r2,255
 1018d30:	1005003a 	cmpeq	r2,r2,zero
 1018d34:	1000051e 	bne	r2,zero,1018d4c <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 1018d38:	e0fffd17 	ldw	r3,-12(fp)
 1018d3c:	00800344 	movi	r2,13
 1018d40:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1018d44:	e03fff15 	stw	zero,-4(fp)
 1018d48:	00008d06 	br	1018f80 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018d4c:	0005303a 	rdctl	r2,status
 1018d50:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018d54:	e0fff717 	ldw	r3,-36(fp)
 1018d58:	00bfff84 	movi	r2,-2
 1018d5c:	1884703a 	and	r2,r3,r2
 1018d60:	1001703a 	wrctl	status,r2
  
  return context;
 1018d64:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 1018d68:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 1018d6c:	e0bffb17 	ldw	r2,-20(fp)
 1018d70:	10800117 	ldw	r2,4(r2)
 1018d74:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 1018d78:	e0bff917 	ldw	r2,-28(fp)
 1018d7c:	1080058b 	ldhu	r2,22(r2)
 1018d80:	10bfffcc 	andi	r2,r2,65535
 1018d84:	1005003a 	cmpeq	r2,r2,zero
 1018d88:	10001f1e 	bne	r2,zero,1018e08 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 1018d8c:	e0bff917 	ldw	r2,-28(fp)
 1018d90:	10c00417 	ldw	r3,16(r2)
 1018d94:	18800017 	ldw	r2,0(r3)
 1018d98:	e0bffa15 	stw	r2,-24(fp)
 1018d9c:	18c00104 	addi	r3,r3,4
 1018da0:	e0bff917 	ldw	r2,-28(fp)
 1018da4:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 1018da8:	e0bff917 	ldw	r2,-28(fp)
 1018dac:	1080058b 	ldhu	r2,22(r2)
 1018db0:	10bfffc4 	addi	r2,r2,-1
 1018db4:	1007883a 	mov	r3,r2
 1018db8:	e0bff917 	ldw	r2,-28(fp)
 1018dbc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 1018dc0:	e0bff917 	ldw	r2,-28(fp)
 1018dc4:	10c00417 	ldw	r3,16(r2)
 1018dc8:	e0bff917 	ldw	r2,-28(fp)
 1018dcc:	10800217 	ldw	r2,8(r2)
 1018dd0:	1880041e 	bne	r3,r2,1018de4 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 1018dd4:	e0bff917 	ldw	r2,-28(fp)
 1018dd8:	10c00117 	ldw	r3,4(r2)
 1018ddc:	e0bff917 	ldw	r2,-28(fp)
 1018de0:	10c00415 	stw	r3,16(r2)
 1018de4:	e0bff817 	ldw	r2,-32(fp)
 1018de8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018dec:	e0bff617 	ldw	r2,-40(fp)
 1018df0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 1018df4:	e0bffd17 	ldw	r2,-12(fp)
 1018df8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 1018dfc:	e0bffa17 	ldw	r2,-24(fp)
 1018e00:	e0bfff15 	stw	r2,-4(fp)
 1018e04:	00005e06 	br	1018f80 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 1018e08:	008040b4 	movhi	r2,258
 1018e0c:	108bc704 	addi	r2,r2,12060
 1018e10:	10c00017 	ldw	r3,0(r2)
 1018e14:	008040b4 	movhi	r2,258
 1018e18:	108bc704 	addi	r2,r2,12060
 1018e1c:	10800017 	ldw	r2,0(r2)
 1018e20:	10800c03 	ldbu	r2,48(r2)
 1018e24:	10800114 	ori	r2,r2,4
 1018e28:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1018e2c:	008040b4 	movhi	r2,258
 1018e30:	108bc704 	addi	r2,r2,12060
 1018e34:	10800017 	ldw	r2,0(r2)
 1018e38:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 1018e3c:	008040b4 	movhi	r2,258
 1018e40:	108bc704 	addi	r2,r2,12060
 1018e44:	10c00017 	ldw	r3,0(r2)
 1018e48:	e0bffc0b 	ldhu	r2,-16(fp)
 1018e4c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 1018e50:	e13ffb17 	ldw	r4,-20(fp)
 1018e54:	10152e40 	call	10152e4 <OS_EventTaskWait>
 1018e58:	e0bff817 	ldw	r2,-32(fp)
 1018e5c:	e0bff515 	stw	r2,-44(fp)
 1018e60:	e0bff517 	ldw	r2,-44(fp)
 1018e64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 1018e68:	1015b900 	call	1015b90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018e6c:	0005303a 	rdctl	r2,status
 1018e70:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018e74:	e0fff417 	ldw	r3,-48(fp)
 1018e78:	00bfff84 	movi	r2,-2
 1018e7c:	1884703a 	and	r2,r3,r2
 1018e80:	1001703a 	wrctl	status,r2
  
  return context;
 1018e84:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 1018e88:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 1018e8c:	008040b4 	movhi	r2,258
 1018e90:	108bc704 	addi	r2,r2,12060
 1018e94:	10800017 	ldw	r2,0(r2)
 1018e98:	10800c43 	ldbu	r2,49(r2)
 1018e9c:	10803fcc 	andi	r2,r2,255
 1018ea0:	e0bffe15 	stw	r2,-8(fp)
 1018ea4:	e0fffe17 	ldw	r3,-8(fp)
 1018ea8:	1805003a 	cmpeq	r2,r3,zero
 1018eac:	1000041e 	bne	r2,zero,1018ec0 <OSQPend+0x248>
 1018eb0:	e0fffe17 	ldw	r3,-8(fp)
 1018eb4:	188000a0 	cmpeqi	r2,r3,2
 1018eb8:	1000091e 	bne	r2,zero,1018ee0 <OSQPend+0x268>
 1018ebc:	00000d06 	br	1018ef4 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 1018ec0:	008040b4 	movhi	r2,258
 1018ec4:	108bc704 	addi	r2,r2,12060
 1018ec8:	10800017 	ldw	r2,0(r2)
 1018ecc:	10800917 	ldw	r2,36(r2)
 1018ed0:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 1018ed4:	e0bffd17 	ldw	r2,-12(fp)
 1018ed8:	10000005 	stb	zero,0(r2)
             break;
 1018edc:	00000e06 	br	1018f18 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 1018ee0:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 1018ee4:	e0fffd17 	ldw	r3,-12(fp)
 1018ee8:	00800384 	movi	r2,14
 1018eec:	18800005 	stb	r2,0(r3)
             break;
 1018ef0:	00000906 	br	1018f18 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 1018ef4:	008040b4 	movhi	r2,258
 1018ef8:	108bc704 	addi	r2,r2,12060
 1018efc:	11000017 	ldw	r4,0(r2)
 1018f00:	e17ffb17 	ldw	r5,-20(fp)
 1018f04:	10155480 	call	1015548 <OS_EventTaskRemove>
             pmsg = (void *)0;
 1018f08:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1018f0c:	e0fffd17 	ldw	r3,-12(fp)
 1018f10:	00800284 	movi	r2,10
 1018f14:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 1018f18:	008040b4 	movhi	r2,258
 1018f1c:	108bc704 	addi	r2,r2,12060
 1018f20:	10800017 	ldw	r2,0(r2)
 1018f24:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 1018f28:	008040b4 	movhi	r2,258
 1018f2c:	108bc704 	addi	r2,r2,12060
 1018f30:	10800017 	ldw	r2,0(r2)
 1018f34:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 1018f38:	008040b4 	movhi	r2,258
 1018f3c:	108bc704 	addi	r2,r2,12060
 1018f40:	10800017 	ldw	r2,0(r2)
 1018f44:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1018f48:	008040b4 	movhi	r2,258
 1018f4c:	108bc704 	addi	r2,r2,12060
 1018f50:	10800017 	ldw	r2,0(r2)
 1018f54:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 1018f58:	008040b4 	movhi	r2,258
 1018f5c:	108bc704 	addi	r2,r2,12060
 1018f60:	10800017 	ldw	r2,0(r2)
 1018f64:	10000915 	stw	zero,36(r2)
 1018f68:	e0bff817 	ldw	r2,-32(fp)
 1018f6c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018f70:	e0bff317 	ldw	r2,-52(fp)
 1018f74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 1018f78:	e0bffa17 	ldw	r2,-24(fp)
 1018f7c:	e0bfff15 	stw	r2,-4(fp)
 1018f80:	e0bfff17 	ldw	r2,-4(fp)
}
 1018f84:	e037883a 	mov	sp,fp
 1018f88:	dfc00117 	ldw	ra,4(sp)
 1018f8c:	df000017 	ldw	fp,0(sp)
 1018f90:	dec00204 	addi	sp,sp,8
 1018f94:	f800283a 	ret

01018f98 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1018f98:	defff504 	addi	sp,sp,-44
 1018f9c:	dfc00a15 	stw	ra,40(sp)
 1018fa0:	df000915 	stw	fp,36(sp)
 1018fa4:	df000904 	addi	fp,sp,36
 1018fa8:	e13ffc15 	stw	r4,-16(fp)
 1018fac:	e1bffe15 	stw	r6,-8(fp)
 1018fb0:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1018fb4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1018fb8:	e0bffe17 	ldw	r2,-8(fp)
 1018fbc:	1004c03a 	cmpne	r2,r2,zero
 1018fc0:	1000021e 	bne	r2,zero,1018fcc <OSQPendAbort+0x34>
        return (0);
 1018fc4:	e03fff15 	stw	zero,-4(fp)
 1018fc8:	00004c06 	br	10190fc <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1018fcc:	e0bffc17 	ldw	r2,-16(fp)
 1018fd0:	1004c03a 	cmpne	r2,r2,zero
 1018fd4:	1000051e 	bne	r2,zero,1018fec <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1018fd8:	e0fffe17 	ldw	r3,-8(fp)
 1018fdc:	00800104 	movi	r2,4
 1018fe0:	18800005 	stb	r2,0(r3)
        return (0);
 1018fe4:	e03fff15 	stw	zero,-4(fp)
 1018fe8:	00004406 	br	10190fc <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 1018fec:	e0bffc17 	ldw	r2,-16(fp)
 1018ff0:	10800003 	ldbu	r2,0(r2)
 1018ff4:	10803fcc 	andi	r2,r2,255
 1018ff8:	108000a0 	cmpeqi	r2,r2,2
 1018ffc:	1000051e 	bne	r2,zero,1019014 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1019000:	e0fffe17 	ldw	r3,-8(fp)
 1019004:	00800044 	movi	r2,1
 1019008:	18800005 	stb	r2,0(r3)
        return (0);
 101900c:	e03fff15 	stw	zero,-4(fp)
 1019010:	00003a06 	br	10190fc <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019014:	0005303a 	rdctl	r2,status
 1019018:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101901c:	e0fff917 	ldw	r3,-28(fp)
 1019020:	00bfff84 	movi	r2,-2
 1019024:	1884703a 	and	r2,r3,r2
 1019028:	1001703a 	wrctl	status,r2
  
  return context;
 101902c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1019030:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 1019034:	e0bffc17 	ldw	r2,-16(fp)
 1019038:	10800283 	ldbu	r2,10(r2)
 101903c:	10803fcc 	andi	r2,r2,255
 1019040:	1005003a 	cmpeq	r2,r2,zero
 1019044:	1000261e 	bne	r2,zero,10190e0 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 1019048:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 101904c:	e0bffd03 	ldbu	r2,-12(fp)
 1019050:	10800060 	cmpeqi	r2,r2,1
 1019054:	1000091e 	bne	r2,zero,101907c <OSQPendAbort+0xe4>
 1019058:	00000e06 	br	1019094 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 101905c:	e13ffc17 	ldw	r4,-16(fp)
 1019060:	000b883a 	mov	r5,zero
 1019064:	01800104 	movi	r6,4
 1019068:	01c00084 	movi	r7,2
 101906c:	10151500 	call	1015150 <OS_EventTaskRdy>
                     nbr_tasks++;
 1019070:	e0bffb03 	ldbu	r2,-20(fp)
 1019074:	10800044 	addi	r2,r2,1
 1019078:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 101907c:	e0bffc17 	ldw	r2,-16(fp)
 1019080:	10800283 	ldbu	r2,10(r2)
 1019084:	10803fcc 	andi	r2,r2,255
 1019088:	1004c03a 	cmpne	r2,r2,zero
 101908c:	103ff31e 	bne	r2,zero,101905c <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 1019090:	00000806 	br	10190b4 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 1019094:	e13ffc17 	ldw	r4,-16(fp)
 1019098:	000b883a 	mov	r5,zero
 101909c:	01800104 	movi	r6,4
 10190a0:	01c00084 	movi	r7,2
 10190a4:	10151500 	call	1015150 <OS_EventTaskRdy>
                 nbr_tasks++;
 10190a8:	e0bffb03 	ldbu	r2,-20(fp)
 10190ac:	10800044 	addi	r2,r2,1
 10190b0:	e0bffb05 	stb	r2,-20(fp)
 10190b4:	e0bffa17 	ldw	r2,-24(fp)
 10190b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10190bc:	e0bff817 	ldw	r2,-32(fp)
 10190c0:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 10190c4:	1015b900 	call	1015b90 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 10190c8:	e0fffe17 	ldw	r3,-8(fp)
 10190cc:	00800384 	movi	r2,14
 10190d0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 10190d4:	e0bffb03 	ldbu	r2,-20(fp)
 10190d8:	e0bfff15 	stw	r2,-4(fp)
 10190dc:	00000706 	br	10190fc <OSQPendAbort+0x164>
 10190e0:	e0bffa17 	ldw	r2,-24(fp)
 10190e4:	e0bff715 	stw	r2,-36(fp)
 10190e8:	e0bff717 	ldw	r2,-36(fp)
 10190ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10190f0:	e0bffe17 	ldw	r2,-8(fp)
 10190f4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 10190f8:	e03fff15 	stw	zero,-4(fp)
 10190fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1019100:	e037883a 	mov	sp,fp
 1019104:	dfc00117 	ldw	ra,4(sp)
 1019108:	df000017 	ldw	fp,0(sp)
 101910c:	dec00204 	addi	sp,sp,8
 1019110:	f800283a 	ret

01019114 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 1019114:	defff504 	addi	sp,sp,-44
 1019118:	dfc00a15 	stw	ra,40(sp)
 101911c:	df000915 	stw	fp,36(sp)
 1019120:	df000904 	addi	fp,sp,36
 1019124:	e13ffd15 	stw	r4,-12(fp)
 1019128:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 101912c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 1019130:	e0bffd17 	ldw	r2,-12(fp)
 1019134:	1004c03a 	cmpne	r2,r2,zero
 1019138:	1000031e 	bne	r2,zero,1019148 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 101913c:	00800104 	movi	r2,4
 1019140:	e0bfff15 	stw	r2,-4(fp)
 1019144:	00004d06 	br	101927c <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 1019148:	e0bffd17 	ldw	r2,-12(fp)
 101914c:	10800003 	ldbu	r2,0(r2)
 1019150:	10803fcc 	andi	r2,r2,255
 1019154:	108000a0 	cmpeqi	r2,r2,2
 1019158:	1000031e 	bne	r2,zero,1019168 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 101915c:	00800044 	movi	r2,1
 1019160:	e0bfff15 	stw	r2,-4(fp)
 1019164:	00004506 	br	101927c <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019168:	0005303a 	rdctl	r2,status
 101916c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019170:	e0fffa17 	ldw	r3,-24(fp)
 1019174:	00bfff84 	movi	r2,-2
 1019178:	1884703a 	and	r2,r3,r2
 101917c:	1001703a 	wrctl	status,r2
  
  return context;
 1019180:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1019184:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 1019188:	e0bffd17 	ldw	r2,-12(fp)
 101918c:	10800283 	ldbu	r2,10(r2)
 1019190:	10803fcc 	andi	r2,r2,255
 1019194:	1005003a 	cmpeq	r2,r2,zero
 1019198:	10000c1e 	bne	r2,zero,10191cc <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 101919c:	e13ffd17 	ldw	r4,-12(fp)
 10191a0:	e17ffe17 	ldw	r5,-8(fp)
 10191a4:	01800104 	movi	r6,4
 10191a8:	000f883a 	mov	r7,zero
 10191ac:	10151500 	call	1015150 <OS_EventTaskRdy>
 10191b0:	e0bffb17 	ldw	r2,-20(fp)
 10191b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10191b8:	e0bff917 	ldw	r2,-28(fp)
 10191bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 10191c0:	1015b900 	call	1015b90 <OS_Sched>
        return (OS_ERR_NONE);
 10191c4:	e03fff15 	stw	zero,-4(fp)
 10191c8:	00002c06 	br	101927c <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 10191cc:	e0bffd17 	ldw	r2,-12(fp)
 10191d0:	10800117 	ldw	r2,4(r2)
 10191d4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 10191d8:	e0bffc17 	ldw	r2,-16(fp)
 10191dc:	10c0058b 	ldhu	r3,22(r2)
 10191e0:	e0bffc17 	ldw	r2,-16(fp)
 10191e4:	1080050b 	ldhu	r2,20(r2)
 10191e8:	18ffffcc 	andi	r3,r3,65535
 10191ec:	10bfffcc 	andi	r2,r2,65535
 10191f0:	18800736 	bltu	r3,r2,1019210 <OSQPost+0xfc>
 10191f4:	e0bffb17 	ldw	r2,-20(fp)
 10191f8:	e0bff815 	stw	r2,-32(fp)
 10191fc:	e0bff817 	ldw	r2,-32(fp)
 1019200:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1019204:	00800784 	movi	r2,30
 1019208:	e0bfff15 	stw	r2,-4(fp)
 101920c:	00001b06 	br	101927c <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 1019210:	e0bffc17 	ldw	r2,-16(fp)
 1019214:	10c00317 	ldw	r3,12(r2)
 1019218:	e0bffe17 	ldw	r2,-8(fp)
 101921c:	18800015 	stw	r2,0(r3)
 1019220:	18c00104 	addi	r3,r3,4
 1019224:	e0bffc17 	ldw	r2,-16(fp)
 1019228:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 101922c:	e0bffc17 	ldw	r2,-16(fp)
 1019230:	1080058b 	ldhu	r2,22(r2)
 1019234:	10800044 	addi	r2,r2,1
 1019238:	1007883a 	mov	r3,r2
 101923c:	e0bffc17 	ldw	r2,-16(fp)
 1019240:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 1019244:	e0bffc17 	ldw	r2,-16(fp)
 1019248:	10c00317 	ldw	r3,12(r2)
 101924c:	e0bffc17 	ldw	r2,-16(fp)
 1019250:	10800217 	ldw	r2,8(r2)
 1019254:	1880041e 	bne	r3,r2,1019268 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 1019258:	e0bffc17 	ldw	r2,-16(fp)
 101925c:	10c00117 	ldw	r3,4(r2)
 1019260:	e0bffc17 	ldw	r2,-16(fp)
 1019264:	10c00315 	stw	r3,12(r2)
 1019268:	e0bffb17 	ldw	r2,-20(fp)
 101926c:	e0bff715 	stw	r2,-36(fp)
 1019270:	e0bff717 	ldw	r2,-36(fp)
 1019274:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1019278:	e03fff15 	stw	zero,-4(fp)
 101927c:	e0bfff17 	ldw	r2,-4(fp)
}
 1019280:	e037883a 	mov	sp,fp
 1019284:	dfc00117 	ldw	ra,4(sp)
 1019288:	df000017 	ldw	fp,0(sp)
 101928c:	dec00204 	addi	sp,sp,8
 1019290:	f800283a 	ret

01019294 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 1019294:	defff504 	addi	sp,sp,-44
 1019298:	dfc00a15 	stw	ra,40(sp)
 101929c:	df000915 	stw	fp,36(sp)
 10192a0:	df000904 	addi	fp,sp,36
 10192a4:	e13ffd15 	stw	r4,-12(fp)
 10192a8:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 10192ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 10192b0:	e0bffd17 	ldw	r2,-12(fp)
 10192b4:	1004c03a 	cmpne	r2,r2,zero
 10192b8:	1000031e 	bne	r2,zero,10192c8 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 10192bc:	00800104 	movi	r2,4
 10192c0:	e0bfff15 	stw	r2,-4(fp)
 10192c4:	00004f06 	br	1019404 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 10192c8:	e0bffd17 	ldw	r2,-12(fp)
 10192cc:	10800003 	ldbu	r2,0(r2)
 10192d0:	10803fcc 	andi	r2,r2,255
 10192d4:	108000a0 	cmpeqi	r2,r2,2
 10192d8:	1000031e 	bne	r2,zero,10192e8 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 10192dc:	00800044 	movi	r2,1
 10192e0:	e0bfff15 	stw	r2,-4(fp)
 10192e4:	00004706 	br	1019404 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10192e8:	0005303a 	rdctl	r2,status
 10192ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10192f0:	e0fffa17 	ldw	r3,-24(fp)
 10192f4:	00bfff84 	movi	r2,-2
 10192f8:	1884703a 	and	r2,r3,r2
 10192fc:	1001703a 	wrctl	status,r2
  
  return context;
 1019300:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1019304:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 1019308:	e0bffd17 	ldw	r2,-12(fp)
 101930c:	10800283 	ldbu	r2,10(r2)
 1019310:	10803fcc 	andi	r2,r2,255
 1019314:	1005003a 	cmpeq	r2,r2,zero
 1019318:	10000c1e 	bne	r2,zero,101934c <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 101931c:	e13ffd17 	ldw	r4,-12(fp)
 1019320:	e17ffe17 	ldw	r5,-8(fp)
 1019324:	01800104 	movi	r6,4
 1019328:	000f883a 	mov	r7,zero
 101932c:	10151500 	call	1015150 <OS_EventTaskRdy>
 1019330:	e0bffb17 	ldw	r2,-20(fp)
 1019334:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019338:	e0bff917 	ldw	r2,-28(fp)
 101933c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 1019340:	1015b900 	call	1015b90 <OS_Sched>
        return (OS_ERR_NONE);
 1019344:	e03fff15 	stw	zero,-4(fp)
 1019348:	00002e06 	br	1019404 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 101934c:	e0bffd17 	ldw	r2,-12(fp)
 1019350:	10800117 	ldw	r2,4(r2)
 1019354:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 1019358:	e0bffc17 	ldw	r2,-16(fp)
 101935c:	10c0058b 	ldhu	r3,22(r2)
 1019360:	e0bffc17 	ldw	r2,-16(fp)
 1019364:	1080050b 	ldhu	r2,20(r2)
 1019368:	18ffffcc 	andi	r3,r3,65535
 101936c:	10bfffcc 	andi	r2,r2,65535
 1019370:	18800736 	bltu	r3,r2,1019390 <OSQPostFront+0xfc>
 1019374:	e0bffb17 	ldw	r2,-20(fp)
 1019378:	e0bff815 	stw	r2,-32(fp)
 101937c:	e0bff817 	ldw	r2,-32(fp)
 1019380:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1019384:	00800784 	movi	r2,30
 1019388:	e0bfff15 	stw	r2,-4(fp)
 101938c:	00001d06 	br	1019404 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 1019390:	e0bffc17 	ldw	r2,-16(fp)
 1019394:	10c00417 	ldw	r3,16(r2)
 1019398:	e0bffc17 	ldw	r2,-16(fp)
 101939c:	10800117 	ldw	r2,4(r2)
 10193a0:	1880041e 	bne	r3,r2,10193b4 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 10193a4:	e0bffc17 	ldw	r2,-16(fp)
 10193a8:	10c00217 	ldw	r3,8(r2)
 10193ac:	e0bffc17 	ldw	r2,-16(fp)
 10193b0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 10193b4:	e0bffc17 	ldw	r2,-16(fp)
 10193b8:	10800417 	ldw	r2,16(r2)
 10193bc:	10ffff04 	addi	r3,r2,-4
 10193c0:	e0bffc17 	ldw	r2,-16(fp)
 10193c4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 10193c8:	e0bffc17 	ldw	r2,-16(fp)
 10193cc:	10c00417 	ldw	r3,16(r2)
 10193d0:	e0bffe17 	ldw	r2,-8(fp)
 10193d4:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 10193d8:	e0bffc17 	ldw	r2,-16(fp)
 10193dc:	1080058b 	ldhu	r2,22(r2)
 10193e0:	10800044 	addi	r2,r2,1
 10193e4:	1007883a 	mov	r3,r2
 10193e8:	e0bffc17 	ldw	r2,-16(fp)
 10193ec:	10c0058d 	sth	r3,22(r2)
 10193f0:	e0bffb17 	ldw	r2,-20(fp)
 10193f4:	e0bff715 	stw	r2,-36(fp)
 10193f8:	e0bff717 	ldw	r2,-36(fp)
 10193fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1019400:	e03fff15 	stw	zero,-4(fp)
 1019404:	e0bfff17 	ldw	r2,-4(fp)
}
 1019408:	e037883a 	mov	sp,fp
 101940c:	dfc00117 	ldw	ra,4(sp)
 1019410:	df000017 	ldw	fp,0(sp)
 1019414:	dec00204 	addi	sp,sp,8
 1019418:	f800283a 	ret

0101941c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 101941c:	defff404 	addi	sp,sp,-48
 1019420:	dfc00b15 	stw	ra,44(sp)
 1019424:	df000a15 	stw	fp,40(sp)
 1019428:	df000a04 	addi	fp,sp,40
 101942c:	e13ffc15 	stw	r4,-16(fp)
 1019430:	e17ffd15 	stw	r5,-12(fp)
 1019434:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1019438:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101943c:	e0bffc17 	ldw	r2,-16(fp)
 1019440:	1004c03a 	cmpne	r2,r2,zero
 1019444:	1000031e 	bne	r2,zero,1019454 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 1019448:	00800104 	movi	r2,4
 101944c:	e0bfff15 	stw	r2,-4(fp)
 1019450:	00007906 	br	1019638 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 1019454:	e0bffc17 	ldw	r2,-16(fp)
 1019458:	10800003 	ldbu	r2,0(r2)
 101945c:	10803fcc 	andi	r2,r2,255
 1019460:	108000a0 	cmpeqi	r2,r2,2
 1019464:	1000031e 	bne	r2,zero,1019474 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 1019468:	00800044 	movi	r2,1
 101946c:	e0bfff15 	stw	r2,-4(fp)
 1019470:	00007106 	br	1019638 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019474:	0005303a 	rdctl	r2,status
 1019478:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101947c:	e0fff917 	ldw	r3,-28(fp)
 1019480:	00bfff84 	movi	r2,-2
 1019484:	1884703a 	and	r2,r3,r2
 1019488:	1001703a 	wrctl	status,r2
  
  return context;
 101948c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1019490:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 1019494:	e0bffc17 	ldw	r2,-16(fp)
 1019498:	10800283 	ldbu	r2,10(r2)
 101949c:	10803fcc 	andi	r2,r2,255
 10194a0:	1005003a 	cmpeq	r2,r2,zero
 10194a4:	1000211e 	bne	r2,zero,101952c <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 10194a8:	e0bffe03 	ldbu	r2,-8(fp)
 10194ac:	1080004c 	andi	r2,r2,1
 10194b0:	10803fcc 	andi	r2,r2,255
 10194b4:	1005003a 	cmpeq	r2,r2,zero
 10194b8:	10000c1e 	bne	r2,zero,10194ec <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 10194bc:	00000506 	br	10194d4 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 10194c0:	e13ffc17 	ldw	r4,-16(fp)
 10194c4:	e17ffd17 	ldw	r5,-12(fp)
 10194c8:	01800104 	movi	r6,4
 10194cc:	000f883a 	mov	r7,zero
 10194d0:	10151500 	call	1015150 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 10194d4:	e0bffc17 	ldw	r2,-16(fp)
 10194d8:	10800283 	ldbu	r2,10(r2)
 10194dc:	10803fcc 	andi	r2,r2,255
 10194e0:	1004c03a 	cmpne	r2,r2,zero
 10194e4:	103ff61e 	bne	r2,zero,10194c0 <OSQPostOpt+0xa4>
 10194e8:	00000506 	br	1019500 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 10194ec:	e13ffc17 	ldw	r4,-16(fp)
 10194f0:	e17ffd17 	ldw	r5,-12(fp)
 10194f4:	01800104 	movi	r6,4
 10194f8:	000f883a 	mov	r7,zero
 10194fc:	10151500 	call	1015150 <OS_EventTaskRdy>
 1019500:	e0bffa17 	ldw	r2,-24(fp)
 1019504:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019508:	e0bff817 	ldw	r2,-32(fp)
 101950c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 1019510:	e0bffe03 	ldbu	r2,-8(fp)
 1019514:	1080010c 	andi	r2,r2,4
 1019518:	1004c03a 	cmpne	r2,r2,zero
 101951c:	1000011e 	bne	r2,zero,1019524 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 1019520:	1015b900 	call	1015b90 <OS_Sched>
        }
        return (OS_ERR_NONE);
 1019524:	e03fff15 	stw	zero,-4(fp)
 1019528:	00004306 	br	1019638 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 101952c:	e0bffc17 	ldw	r2,-16(fp)
 1019530:	10800117 	ldw	r2,4(r2)
 1019534:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 1019538:	e0bffb17 	ldw	r2,-20(fp)
 101953c:	10c0058b 	ldhu	r3,22(r2)
 1019540:	e0bffb17 	ldw	r2,-20(fp)
 1019544:	1080050b 	ldhu	r2,20(r2)
 1019548:	18ffffcc 	andi	r3,r3,65535
 101954c:	10bfffcc 	andi	r2,r2,65535
 1019550:	18800736 	bltu	r3,r2,1019570 <OSQPostOpt+0x154>
 1019554:	e0bffa17 	ldw	r2,-24(fp)
 1019558:	e0bff715 	stw	r2,-36(fp)
 101955c:	e0bff717 	ldw	r2,-36(fp)
 1019560:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1019564:	00800784 	movi	r2,30
 1019568:	e0bfff15 	stw	r2,-4(fp)
 101956c:	00003206 	br	1019638 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 1019570:	e0bffe03 	ldbu	r2,-8(fp)
 1019574:	1080008c 	andi	r2,r2,2
 1019578:	1005003a 	cmpeq	r2,r2,zero
 101957c:	1000131e 	bne	r2,zero,10195cc <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 1019580:	e0bffb17 	ldw	r2,-20(fp)
 1019584:	10c00417 	ldw	r3,16(r2)
 1019588:	e0bffb17 	ldw	r2,-20(fp)
 101958c:	10800117 	ldw	r2,4(r2)
 1019590:	1880041e 	bne	r3,r2,10195a4 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 1019594:	e0bffb17 	ldw	r2,-20(fp)
 1019598:	10c00217 	ldw	r3,8(r2)
 101959c:	e0bffb17 	ldw	r2,-20(fp)
 10195a0:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 10195a4:	e0bffb17 	ldw	r2,-20(fp)
 10195a8:	10800417 	ldw	r2,16(r2)
 10195ac:	10ffff04 	addi	r3,r2,-4
 10195b0:	e0bffb17 	ldw	r2,-20(fp)
 10195b4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 10195b8:	e0bffb17 	ldw	r2,-20(fp)
 10195bc:	10c00417 	ldw	r3,16(r2)
 10195c0:	e0bffd17 	ldw	r2,-12(fp)
 10195c4:	18800015 	stw	r2,0(r3)
 10195c8:	00001006 	br	101960c <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 10195cc:	e0bffb17 	ldw	r2,-20(fp)
 10195d0:	10c00317 	ldw	r3,12(r2)
 10195d4:	e0bffd17 	ldw	r2,-12(fp)
 10195d8:	18800015 	stw	r2,0(r3)
 10195dc:	18c00104 	addi	r3,r3,4
 10195e0:	e0bffb17 	ldw	r2,-20(fp)
 10195e4:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 10195e8:	e0bffb17 	ldw	r2,-20(fp)
 10195ec:	10c00317 	ldw	r3,12(r2)
 10195f0:	e0bffb17 	ldw	r2,-20(fp)
 10195f4:	10800217 	ldw	r2,8(r2)
 10195f8:	1880041e 	bne	r3,r2,101960c <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 10195fc:	e0bffb17 	ldw	r2,-20(fp)
 1019600:	10c00117 	ldw	r3,4(r2)
 1019604:	e0bffb17 	ldw	r2,-20(fp)
 1019608:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 101960c:	e0bffb17 	ldw	r2,-20(fp)
 1019610:	1080058b 	ldhu	r2,22(r2)
 1019614:	10800044 	addi	r2,r2,1
 1019618:	1007883a 	mov	r3,r2
 101961c:	e0bffb17 	ldw	r2,-20(fp)
 1019620:	10c0058d 	sth	r3,22(r2)
 1019624:	e0bffa17 	ldw	r2,-24(fp)
 1019628:	e0bff615 	stw	r2,-40(fp)
 101962c:	e0bff617 	ldw	r2,-40(fp)
 1019630:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1019634:	e03fff15 	stw	zero,-4(fp)
 1019638:	e0bfff17 	ldw	r2,-4(fp)
}
 101963c:	e037883a 	mov	sp,fp
 1019640:	dfc00117 	ldw	ra,4(sp)
 1019644:	df000017 	ldw	fp,0(sp)
 1019648:	dec00204 	addi	sp,sp,8
 101964c:	f800283a 	ret

01019650 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 1019650:	defff504 	addi	sp,sp,-44
 1019654:	df000a15 	stw	fp,40(sp)
 1019658:	df000a04 	addi	fp,sp,40
 101965c:	e13ffd15 	stw	r4,-12(fp)
 1019660:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1019664:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 1019668:	e0bffd17 	ldw	r2,-12(fp)
 101966c:	1004c03a 	cmpne	r2,r2,zero
 1019670:	1000031e 	bne	r2,zero,1019680 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 1019674:	00800104 	movi	r2,4
 1019678:	e0bfff15 	stw	r2,-4(fp)
 101967c:	00004f06 	br	10197bc <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 1019680:	e0bffe17 	ldw	r2,-8(fp)
 1019684:	1004c03a 	cmpne	r2,r2,zero
 1019688:	1000031e 	bne	r2,zero,1019698 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 101968c:	00800244 	movi	r2,9
 1019690:	e0bfff15 	stw	r2,-4(fp)
 1019694:	00004906 	br	10197bc <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 1019698:	e0bffd17 	ldw	r2,-12(fp)
 101969c:	10800003 	ldbu	r2,0(r2)
 10196a0:	10803fcc 	andi	r2,r2,255
 10196a4:	108000a0 	cmpeqi	r2,r2,2
 10196a8:	1000031e 	bne	r2,zero,10196b8 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 10196ac:	00800044 	movi	r2,1
 10196b0:	e0bfff15 	stw	r2,-4(fp)
 10196b4:	00004106 	br	10197bc <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10196b8:	0005303a 	rdctl	r2,status
 10196bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10196c0:	e0fff717 	ldw	r3,-36(fp)
 10196c4:	00bfff84 	movi	r2,-2
 10196c8:	1884703a 	and	r2,r3,r2
 10196cc:	1001703a 	wrctl	status,r2
  
  return context;
 10196d0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 10196d4:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 10196d8:	e0bffd17 	ldw	r2,-12(fp)
 10196dc:	10c00283 	ldbu	r3,10(r2)
 10196e0:	e0bffe17 	ldw	r2,-8(fp)
 10196e4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 10196e8:	e0bffd17 	ldw	r2,-12(fp)
 10196ec:	108002c4 	addi	r2,r2,11
 10196f0:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 10196f4:	e0bffe17 	ldw	r2,-8(fp)
 10196f8:	10800204 	addi	r2,r2,8
 10196fc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1019700:	e03ffb05 	stb	zero,-20(fp)
 1019704:	00000d06 	br	101973c <OSQQuery+0xec>
        *pdest++ = *psrc++;
 1019708:	e0bffa17 	ldw	r2,-24(fp)
 101970c:	10c00003 	ldbu	r3,0(r2)
 1019710:	e0bff917 	ldw	r2,-28(fp)
 1019714:	10c00005 	stb	r3,0(r2)
 1019718:	e0bff917 	ldw	r2,-28(fp)
 101971c:	10800044 	addi	r2,r2,1
 1019720:	e0bff915 	stw	r2,-28(fp)
 1019724:	e0bffa17 	ldw	r2,-24(fp)
 1019728:	10800044 	addi	r2,r2,1
 101972c:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1019730:	e0bffb03 	ldbu	r2,-20(fp)
 1019734:	10800044 	addi	r2,r2,1
 1019738:	e0bffb05 	stb	r2,-20(fp)
 101973c:	e0bffb03 	ldbu	r2,-20(fp)
 1019740:	108000f0 	cmpltui	r2,r2,3
 1019744:	103ff01e 	bne	r2,zero,1019708 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 1019748:	e0bffd17 	ldw	r2,-12(fp)
 101974c:	10800117 	ldw	r2,4(r2)
 1019750:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 1019754:	e0bffc17 	ldw	r2,-16(fp)
 1019758:	1080058b 	ldhu	r2,22(r2)
 101975c:	10bfffcc 	andi	r2,r2,65535
 1019760:	1005003a 	cmpeq	r2,r2,zero
 1019764:	1000061e 	bne	r2,zero,1019780 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 1019768:	e0bffc17 	ldw	r2,-16(fp)
 101976c:	10800417 	ldw	r2,16(r2)
 1019770:	10c00017 	ldw	r3,0(r2)
 1019774:	e0bffe17 	ldw	r2,-8(fp)
 1019778:	10c00015 	stw	r3,0(r2)
 101977c:	00000206 	br	1019788 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 1019780:	e0bffe17 	ldw	r2,-8(fp)
 1019784:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 1019788:	e0bffc17 	ldw	r2,-16(fp)
 101978c:	10c0058b 	ldhu	r3,22(r2)
 1019790:	e0bffe17 	ldw	r2,-8(fp)
 1019794:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 1019798:	e0bffc17 	ldw	r2,-16(fp)
 101979c:	10c0050b 	ldhu	r3,20(r2)
 10197a0:	e0bffe17 	ldw	r2,-8(fp)
 10197a4:	10c0018d 	sth	r3,6(r2)
 10197a8:	e0bff817 	ldw	r2,-32(fp)
 10197ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10197b0:	e0bff617 	ldw	r2,-40(fp)
 10197b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10197b8:	e03fff15 	stw	zero,-4(fp)
 10197bc:	e0bfff17 	ldw	r2,-4(fp)
}
 10197c0:	e037883a 	mov	sp,fp
 10197c4:	df000017 	ldw	fp,0(sp)
 10197c8:	dec00104 	addi	sp,sp,4
 10197cc:	f800283a 	ret

010197d0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 10197d0:	defffb04 	addi	sp,sp,-20
 10197d4:	dfc00415 	stw	ra,16(sp)
 10197d8:	df000315 	stw	fp,12(sp)
 10197dc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 10197e0:	010040f4 	movhi	r4,259
 10197e4:	2123c504 	addi	r4,r4,-28908
 10197e8:	01407804 	movi	r5,480
 10197ec:	1015ad00 	call	1015ad0 <OS_MemClr>
    pq1 = &OSQTbl[0];
 10197f0:	008040f4 	movhi	r2,259
 10197f4:	10a3c504 	addi	r2,r2,-28908
 10197f8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 10197fc:	008040f4 	movhi	r2,259
 1019800:	10a3cb04 	addi	r2,r2,-28884
 1019804:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 1019808:	e03fff0d 	sth	zero,-4(fp)
 101980c:	00000c06 	br	1019840 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 1019810:	e0fffe17 	ldw	r3,-8(fp)
 1019814:	e0bffd17 	ldw	r2,-12(fp)
 1019818:	18800015 	stw	r2,0(r3)
        pq1++;
 101981c:	e0bffe17 	ldw	r2,-8(fp)
 1019820:	10800604 	addi	r2,r2,24
 1019824:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 1019828:	e0bffd17 	ldw	r2,-12(fp)
 101982c:	10800604 	addi	r2,r2,24
 1019830:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 1019834:	e0bfff0b 	ldhu	r2,-4(fp)
 1019838:	10800044 	addi	r2,r2,1
 101983c:	e0bfff0d 	sth	r2,-4(fp)
 1019840:	e0bfff0b 	ldhu	r2,-4(fp)
 1019844:	108004f0 	cmpltui	r2,r2,19
 1019848:	103ff11e 	bne	r2,zero,1019810 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 101984c:	e0bffe17 	ldw	r2,-8(fp)
 1019850:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 1019854:	00c040b4 	movhi	r3,258
 1019858:	18cbc304 	addi	r3,r3,12044
 101985c:	008040f4 	movhi	r2,259
 1019860:	10a3c504 	addi	r2,r2,-28908
 1019864:	18800015 	stw	r2,0(r3)
#endif
}
 1019868:	e037883a 	mov	sp,fp
 101986c:	dfc00117 	ldw	ra,4(sp)
 1019870:	df000017 	ldw	fp,0(sp)
 1019874:	dec00204 	addi	sp,sp,8
 1019878:	f800283a 	ret

0101987c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 101987c:	defff904 	addi	sp,sp,-28
 1019880:	df000615 	stw	fp,24(sp)
 1019884:	df000604 	addi	fp,sp,24
 1019888:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101988c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1019890:	e0bffe17 	ldw	r2,-8(fp)
 1019894:	1004c03a 	cmpne	r2,r2,zero
 1019898:	1000021e 	bne	r2,zero,10198a4 <OSSemAccept+0x28>
        return (0);
 101989c:	e03fff15 	stw	zero,-4(fp)
 10198a0:	00002106 	br	1019928 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 10198a4:	e0bffe17 	ldw	r2,-8(fp)
 10198a8:	10800003 	ldbu	r2,0(r2)
 10198ac:	10803fcc 	andi	r2,r2,255
 10198b0:	108000e0 	cmpeqi	r2,r2,3
 10198b4:	1000021e 	bne	r2,zero,10198c0 <OSSemAccept+0x44>
        return (0);
 10198b8:	e03fff15 	stw	zero,-4(fp)
 10198bc:	00001a06 	br	1019928 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10198c0:	0005303a 	rdctl	r2,status
 10198c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10198c8:	e0fffb17 	ldw	r3,-20(fp)
 10198cc:	00bfff84 	movi	r2,-2
 10198d0:	1884703a 	and	r2,r3,r2
 10198d4:	1001703a 	wrctl	status,r2
  
  return context;
 10198d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 10198dc:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 10198e0:	e0bffe17 	ldw	r2,-8(fp)
 10198e4:	1080020b 	ldhu	r2,8(r2)
 10198e8:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 10198ec:	e0bffd0b 	ldhu	r2,-12(fp)
 10198f0:	1005003a 	cmpeq	r2,r2,zero
 10198f4:	1000061e 	bne	r2,zero,1019910 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 10198f8:	e0bffe17 	ldw	r2,-8(fp)
 10198fc:	1080020b 	ldhu	r2,8(r2)
 1019900:	10bfffc4 	addi	r2,r2,-1
 1019904:	1007883a 	mov	r3,r2
 1019908:	e0bffe17 	ldw	r2,-8(fp)
 101990c:	10c0020d 	sth	r3,8(r2)
 1019910:	e0bffc17 	ldw	r2,-16(fp)
 1019914:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019918:	e0bffa17 	ldw	r2,-24(fp)
 101991c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 1019920:	e0bffd0b 	ldhu	r2,-12(fp)
 1019924:	e0bfff15 	stw	r2,-4(fp)
 1019928:	e0bfff17 	ldw	r2,-4(fp)
}
 101992c:	e037883a 	mov	sp,fp
 1019930:	df000017 	ldw	fp,0(sp)
 1019934:	dec00104 	addi	sp,sp,4
 1019938:	f800283a 	ret

0101993c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 101993c:	defff804 	addi	sp,sp,-32
 1019940:	dfc00715 	stw	ra,28(sp)
 1019944:	df000615 	stw	fp,24(sp)
 1019948:	df000604 	addi	fp,sp,24
 101994c:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1019950:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1019954:	008040b4 	movhi	r2,258
 1019958:	108bc604 	addi	r2,r2,12056
 101995c:	10800003 	ldbu	r2,0(r2)
 1019960:	10803fcc 	andi	r2,r2,255
 1019964:	1005003a 	cmpeq	r2,r2,zero
 1019968:	1000021e 	bne	r2,zero,1019974 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 101996c:	e03fff15 	stw	zero,-4(fp)
 1019970:	00003106 	br	1019a38 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019974:	0005303a 	rdctl	r2,status
 1019978:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101997c:	e0fffb17 	ldw	r3,-20(fp)
 1019980:	00bfff84 	movi	r2,-2
 1019984:	1884703a 	and	r2,r3,r2
 1019988:	1001703a 	wrctl	status,r2
  
  return context;
 101998c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1019990:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 1019994:	008040b4 	movhi	r2,258
 1019998:	108bc504 	addi	r2,r2,12052
 101999c:	10800017 	ldw	r2,0(r2)
 10199a0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 10199a4:	008040b4 	movhi	r2,258
 10199a8:	108bc504 	addi	r2,r2,12052
 10199ac:	10800017 	ldw	r2,0(r2)
 10199b0:	1005003a 	cmpeq	r2,r2,zero
 10199b4:	1000081e 	bne	r2,zero,10199d8 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 10199b8:	008040b4 	movhi	r2,258
 10199bc:	108bc504 	addi	r2,r2,12052
 10199c0:	10800017 	ldw	r2,0(r2)
 10199c4:	10800117 	ldw	r2,4(r2)
 10199c8:	1007883a 	mov	r3,r2
 10199cc:	008040b4 	movhi	r2,258
 10199d0:	108bc504 	addi	r2,r2,12052
 10199d4:	10c00015 	stw	r3,0(r2)
 10199d8:	e0bffc17 	ldw	r2,-16(fp)
 10199dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10199e0:	e0bffa17 	ldw	r2,-24(fp)
 10199e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 10199e8:	e0bffd17 	ldw	r2,-12(fp)
 10199ec:	1005003a 	cmpeq	r2,r2,zero
 10199f0:	10000f1e 	bne	r2,zero,1019a30 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 10199f4:	e0fffd17 	ldw	r3,-12(fp)
 10199f8:	008000c4 	movi	r2,3
 10199fc:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 1019a00:	e0fffd17 	ldw	r3,-12(fp)
 1019a04:	e0bffe0b 	ldhu	r2,-8(fp)
 1019a08:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 1019a0c:	e0bffd17 	ldw	r2,-12(fp)
 1019a10:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 1019a14:	e0fffd17 	ldw	r3,-12(fp)
 1019a18:	00800fc4 	movi	r2,63
 1019a1c:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 1019a20:	e0bffd17 	ldw	r2,-12(fp)
 1019a24:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 1019a28:	e13ffd17 	ldw	r4,-12(fp)
 1019a2c:	10157040 	call	1015704 <OS_EventWaitListInit>
    }
    return (pevent);
 1019a30:	e0bffd17 	ldw	r2,-12(fp)
 1019a34:	e0bfff15 	stw	r2,-4(fp)
 1019a38:	e0bfff17 	ldw	r2,-4(fp)
}
 1019a3c:	e037883a 	mov	sp,fp
 1019a40:	dfc00117 	ldw	ra,4(sp)
 1019a44:	df000017 	ldw	fp,0(sp)
 1019a48:	dec00204 	addi	sp,sp,8
 1019a4c:	f800283a 	ret

01019a50 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1019a50:	defff104 	addi	sp,sp,-60
 1019a54:	dfc00e15 	stw	ra,56(sp)
 1019a58:	df000d15 	stw	fp,52(sp)
 1019a5c:	df000d04 	addi	fp,sp,52
 1019a60:	e13ffb15 	stw	r4,-20(fp)
 1019a64:	e1bffd15 	stw	r6,-12(fp)
 1019a68:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1019a6c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1019a70:	e0bffd17 	ldw	r2,-12(fp)
 1019a74:	1004c03a 	cmpne	r2,r2,zero
 1019a78:	1000031e 	bne	r2,zero,1019a88 <OSSemDel+0x38>
        return (pevent);
 1019a7c:	e0bffb17 	ldw	r2,-20(fp)
 1019a80:	e0bfff15 	stw	r2,-4(fp)
 1019a84:	00009406 	br	1019cd8 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1019a88:	e0bffb17 	ldw	r2,-20(fp)
 1019a8c:	1004c03a 	cmpne	r2,r2,zero
 1019a90:	1000061e 	bne	r2,zero,1019aac <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 1019a94:	e0fffd17 	ldw	r3,-12(fp)
 1019a98:	00800104 	movi	r2,4
 1019a9c:	18800005 	stb	r2,0(r3)
        return (pevent);
 1019aa0:	e0fffb17 	ldw	r3,-20(fp)
 1019aa4:	e0ffff15 	stw	r3,-4(fp)
 1019aa8:	00008b06 	br	1019cd8 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 1019aac:	e0bffb17 	ldw	r2,-20(fp)
 1019ab0:	10800003 	ldbu	r2,0(r2)
 1019ab4:	10803fcc 	andi	r2,r2,255
 1019ab8:	108000e0 	cmpeqi	r2,r2,3
 1019abc:	1000061e 	bne	r2,zero,1019ad8 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 1019ac0:	e0fffd17 	ldw	r3,-12(fp)
 1019ac4:	00800044 	movi	r2,1
 1019ac8:	18800005 	stb	r2,0(r3)
        return (pevent);
 1019acc:	e0bffb17 	ldw	r2,-20(fp)
 1019ad0:	e0bfff15 	stw	r2,-4(fp)
 1019ad4:	00008006 	br	1019cd8 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1019ad8:	008040b4 	movhi	r2,258
 1019adc:	108bc604 	addi	r2,r2,12056
 1019ae0:	10800003 	ldbu	r2,0(r2)
 1019ae4:	10803fcc 	andi	r2,r2,255
 1019ae8:	1005003a 	cmpeq	r2,r2,zero
 1019aec:	1000061e 	bne	r2,zero,1019b08 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 1019af0:	e0fffd17 	ldw	r3,-12(fp)
 1019af4:	008003c4 	movi	r2,15
 1019af8:	18800005 	stb	r2,0(r3)
        return (pevent);
 1019afc:	e0fffb17 	ldw	r3,-20(fp)
 1019b00:	e0ffff15 	stw	r3,-4(fp)
 1019b04:	00007406 	br	1019cd8 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019b08:	0005303a 	rdctl	r2,status
 1019b0c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019b10:	e0fff717 	ldw	r3,-36(fp)
 1019b14:	00bfff84 	movi	r2,-2
 1019b18:	1884703a 	and	r2,r3,r2
 1019b1c:	1001703a 	wrctl	status,r2
  
  return context;
 1019b20:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 1019b24:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 1019b28:	e0bffb17 	ldw	r2,-20(fp)
 1019b2c:	10800283 	ldbu	r2,10(r2)
 1019b30:	10803fcc 	andi	r2,r2,255
 1019b34:	1005003a 	cmpeq	r2,r2,zero
 1019b38:	1000031e 	bne	r2,zero,1019b48 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 1019b3c:	00800044 	movi	r2,1
 1019b40:	e0bffa05 	stb	r2,-24(fp)
 1019b44:	00000106 	br	1019b4c <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 1019b48:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 1019b4c:	e0bffc03 	ldbu	r2,-16(fp)
 1019b50:	e0bffe15 	stw	r2,-8(fp)
 1019b54:	e0fffe17 	ldw	r3,-8(fp)
 1019b58:	1805003a 	cmpeq	r2,r3,zero
 1019b5c:	1000041e 	bne	r2,zero,1019b70 <OSSemDel+0x120>
 1019b60:	e0fffe17 	ldw	r3,-8(fp)
 1019b64:	18800060 	cmpeqi	r2,r3,1
 1019b68:	10002d1e 	bne	r2,zero,1019c20 <OSSemDel+0x1d0>
 1019b6c:	00004f06 	br	1019cac <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 1019b70:	e0bffa03 	ldbu	r2,-24(fp)
 1019b74:	1004c03a 	cmpne	r2,r2,zero
 1019b78:	10001a1e 	bne	r2,zero,1019be4 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 1019b7c:	e0fffb17 	ldw	r3,-20(fp)
 1019b80:	00800fc4 	movi	r2,63
 1019b84:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 1019b88:	e0bffb17 	ldw	r2,-20(fp)
 1019b8c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1019b90:	e0bffb17 	ldw	r2,-20(fp)
 1019b94:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 1019b98:	008040b4 	movhi	r2,258
 1019b9c:	108bc504 	addi	r2,r2,12052
 1019ba0:	10c00017 	ldw	r3,0(r2)
 1019ba4:	e0bffb17 	ldw	r2,-20(fp)
 1019ba8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 1019bac:	e0bffb17 	ldw	r2,-20(fp)
 1019bb0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 1019bb4:	00c040b4 	movhi	r3,258
 1019bb8:	18cbc504 	addi	r3,r3,12052
 1019bbc:	e0bffb17 	ldw	r2,-20(fp)
 1019bc0:	18800015 	stw	r2,0(r3)
 1019bc4:	e0bff817 	ldw	r2,-32(fp)
 1019bc8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019bcc:	e0bff617 	ldw	r2,-40(fp)
 1019bd0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 1019bd4:	e0bffd17 	ldw	r2,-12(fp)
 1019bd8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 1019bdc:	e03ff915 	stw	zero,-28(fp)
 1019be0:	00003b06 	br	1019cd0 <OSSemDel+0x280>
 1019be4:	e0bff817 	ldw	r2,-32(fp)
 1019be8:	e0bff515 	stw	r2,-44(fp)
 1019bec:	e0bff517 	ldw	r2,-44(fp)
 1019bf0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 1019bf4:	e0fffd17 	ldw	r3,-12(fp)
 1019bf8:	00801244 	movi	r2,73
 1019bfc:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 1019c00:	e0bffb17 	ldw	r2,-20(fp)
 1019c04:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 1019c08:	00003106 	br	1019cd0 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 1019c0c:	e13ffb17 	ldw	r4,-20(fp)
 1019c10:	000b883a 	mov	r5,zero
 1019c14:	01800044 	movi	r6,1
 1019c18:	000f883a 	mov	r7,zero
 1019c1c:	10151500 	call	1015150 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 1019c20:	e0bffb17 	ldw	r2,-20(fp)
 1019c24:	10800283 	ldbu	r2,10(r2)
 1019c28:	10803fcc 	andi	r2,r2,255
 1019c2c:	1004c03a 	cmpne	r2,r2,zero
 1019c30:	103ff61e 	bne	r2,zero,1019c0c <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 1019c34:	e0fffb17 	ldw	r3,-20(fp)
 1019c38:	00800fc4 	movi	r2,63
 1019c3c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 1019c40:	e0bffb17 	ldw	r2,-20(fp)
 1019c44:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1019c48:	e0bffb17 	ldw	r2,-20(fp)
 1019c4c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 1019c50:	008040b4 	movhi	r2,258
 1019c54:	108bc504 	addi	r2,r2,12052
 1019c58:	10c00017 	ldw	r3,0(r2)
 1019c5c:	e0bffb17 	ldw	r2,-20(fp)
 1019c60:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 1019c64:	e0bffb17 	ldw	r2,-20(fp)
 1019c68:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 1019c6c:	00c040b4 	movhi	r3,258
 1019c70:	18cbc504 	addi	r3,r3,12052
 1019c74:	e0bffb17 	ldw	r2,-20(fp)
 1019c78:	18800015 	stw	r2,0(r3)
 1019c7c:	e0bff817 	ldw	r2,-32(fp)
 1019c80:	e0bff415 	stw	r2,-48(fp)
 1019c84:	e0bff417 	ldw	r2,-48(fp)
 1019c88:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1019c8c:	e0bffa03 	ldbu	r2,-24(fp)
 1019c90:	10800058 	cmpnei	r2,r2,1
 1019c94:	1000011e 	bne	r2,zero,1019c9c <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 1019c98:	1015b900 	call	1015b90 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 1019c9c:	e0bffd17 	ldw	r2,-12(fp)
 1019ca0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 1019ca4:	e03ff915 	stw	zero,-28(fp)
             break;
 1019ca8:	00000906 	br	1019cd0 <OSSemDel+0x280>
 1019cac:	e0bff817 	ldw	r2,-32(fp)
 1019cb0:	e0bff315 	stw	r2,-52(fp)
 1019cb4:	e0bff317 	ldw	r2,-52(fp)
 1019cb8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 1019cbc:	e0fffd17 	ldw	r3,-12(fp)
 1019cc0:	008001c4 	movi	r2,7
 1019cc4:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 1019cc8:	e0bffb17 	ldw	r2,-20(fp)
 1019ccc:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 1019cd0:	e0bff917 	ldw	r2,-28(fp)
 1019cd4:	e0bfff15 	stw	r2,-4(fp)
 1019cd8:	e0bfff17 	ldw	r2,-4(fp)
}
 1019cdc:	e037883a 	mov	sp,fp
 1019ce0:	dfc00117 	ldw	ra,4(sp)
 1019ce4:	df000017 	ldw	fp,0(sp)
 1019ce8:	dec00204 	addi	sp,sp,8
 1019cec:	f800283a 	ret

01019cf0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 1019cf0:	defff404 	addi	sp,sp,-48
 1019cf4:	dfc00b15 	stw	ra,44(sp)
 1019cf8:	df000a15 	stw	fp,40(sp)
 1019cfc:	df000a04 	addi	fp,sp,40
 1019d00:	e13ffc15 	stw	r4,-16(fp)
 1019d04:	e1bffe15 	stw	r6,-8(fp)
 1019d08:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1019d0c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1019d10:	e0bffe17 	ldw	r2,-8(fp)
 1019d14:	1005003a 	cmpeq	r2,r2,zero
 1019d18:	10008f1e 	bne	r2,zero,1019f58 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1019d1c:	e0bffc17 	ldw	r2,-16(fp)
 1019d20:	1004c03a 	cmpne	r2,r2,zero
 1019d24:	1000041e 	bne	r2,zero,1019d38 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 1019d28:	e0fffe17 	ldw	r3,-8(fp)
 1019d2c:	00800104 	movi	r2,4
 1019d30:	18800005 	stb	r2,0(r3)
        return;
 1019d34:	00008806 	br	1019f58 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1019d38:	e0bffc17 	ldw	r2,-16(fp)
 1019d3c:	10800003 	ldbu	r2,0(r2)
 1019d40:	10803fcc 	andi	r2,r2,255
 1019d44:	108000e0 	cmpeqi	r2,r2,3
 1019d48:	1000041e 	bne	r2,zero,1019d5c <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 1019d4c:	e0fffe17 	ldw	r3,-8(fp)
 1019d50:	00800044 	movi	r2,1
 1019d54:	18800005 	stb	r2,0(r3)
        return;
 1019d58:	00007f06 	br	1019f58 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 1019d5c:	008040b4 	movhi	r2,258
 1019d60:	108bc604 	addi	r2,r2,12056
 1019d64:	10800003 	ldbu	r2,0(r2)
 1019d68:	10803fcc 	andi	r2,r2,255
 1019d6c:	1005003a 	cmpeq	r2,r2,zero
 1019d70:	1000041e 	bne	r2,zero,1019d84 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 1019d74:	e0fffe17 	ldw	r3,-8(fp)
 1019d78:	00800084 	movi	r2,2
 1019d7c:	18800005 	stb	r2,0(r3)
        return;
 1019d80:	00007506 	br	1019f58 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 1019d84:	008040b4 	movhi	r2,258
 1019d88:	108bb804 	addi	r2,r2,12000
 1019d8c:	10800003 	ldbu	r2,0(r2)
 1019d90:	10803fcc 	andi	r2,r2,255
 1019d94:	1005003a 	cmpeq	r2,r2,zero
 1019d98:	1000041e 	bne	r2,zero,1019dac <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 1019d9c:	e0fffe17 	ldw	r3,-8(fp)
 1019da0:	00800344 	movi	r2,13
 1019da4:	18800005 	stb	r2,0(r3)
        return;
 1019da8:	00006b06 	br	1019f58 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019dac:	0005303a 	rdctl	r2,status
 1019db0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019db4:	e0fffa17 	ldw	r3,-24(fp)
 1019db8:	00bfff84 	movi	r2,-2
 1019dbc:	1884703a 	and	r2,r3,r2
 1019dc0:	1001703a 	wrctl	status,r2
  
  return context;
 1019dc4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1019dc8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 1019dcc:	e0bffc17 	ldw	r2,-16(fp)
 1019dd0:	1080020b 	ldhu	r2,8(r2)
 1019dd4:	10bfffcc 	andi	r2,r2,65535
 1019dd8:	1005003a 	cmpeq	r2,r2,zero
 1019ddc:	10000d1e 	bne	r2,zero,1019e14 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 1019de0:	e0bffc17 	ldw	r2,-16(fp)
 1019de4:	1080020b 	ldhu	r2,8(r2)
 1019de8:	10bfffc4 	addi	r2,r2,-1
 1019dec:	1007883a 	mov	r3,r2
 1019df0:	e0bffc17 	ldw	r2,-16(fp)
 1019df4:	10c0020d 	sth	r3,8(r2)
 1019df8:	e0bffb17 	ldw	r2,-20(fp)
 1019dfc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019e00:	e0bff917 	ldw	r2,-28(fp)
 1019e04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 1019e08:	e0bffe17 	ldw	r2,-8(fp)
 1019e0c:	10000005 	stb	zero,0(r2)
        return;
 1019e10:	00005106 	br	1019f58 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 1019e14:	008040b4 	movhi	r2,258
 1019e18:	108bc704 	addi	r2,r2,12060
 1019e1c:	10c00017 	ldw	r3,0(r2)
 1019e20:	008040b4 	movhi	r2,258
 1019e24:	108bc704 	addi	r2,r2,12060
 1019e28:	10800017 	ldw	r2,0(r2)
 1019e2c:	10800c03 	ldbu	r2,48(r2)
 1019e30:	10800054 	ori	r2,r2,1
 1019e34:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1019e38:	008040b4 	movhi	r2,258
 1019e3c:	108bc704 	addi	r2,r2,12060
 1019e40:	10800017 	ldw	r2,0(r2)
 1019e44:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 1019e48:	008040b4 	movhi	r2,258
 1019e4c:	108bc704 	addi	r2,r2,12060
 1019e50:	10c00017 	ldw	r3,0(r2)
 1019e54:	e0bffd0b 	ldhu	r2,-12(fp)
 1019e58:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 1019e5c:	e13ffc17 	ldw	r4,-16(fp)
 1019e60:	10152e40 	call	10152e4 <OS_EventTaskWait>
 1019e64:	e0bffb17 	ldw	r2,-20(fp)
 1019e68:	e0bff815 	stw	r2,-32(fp)
 1019e6c:	e0bff817 	ldw	r2,-32(fp)
 1019e70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 1019e74:	1015b900 	call	1015b90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019e78:	0005303a 	rdctl	r2,status
 1019e7c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019e80:	e0fff717 	ldw	r3,-36(fp)
 1019e84:	00bfff84 	movi	r2,-2
 1019e88:	1884703a 	and	r2,r3,r2
 1019e8c:	1001703a 	wrctl	status,r2
  
  return context;
 1019e90:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 1019e94:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 1019e98:	008040b4 	movhi	r2,258
 1019e9c:	108bc704 	addi	r2,r2,12060
 1019ea0:	10800017 	ldw	r2,0(r2)
 1019ea4:	10800c43 	ldbu	r2,49(r2)
 1019ea8:	10803fcc 	andi	r2,r2,255
 1019eac:	e0bfff15 	stw	r2,-4(fp)
 1019eb0:	e0ffff17 	ldw	r3,-4(fp)
 1019eb4:	1805003a 	cmpeq	r2,r3,zero
 1019eb8:	1000041e 	bne	r2,zero,1019ecc <OSSemPend+0x1dc>
 1019ebc:	e0ffff17 	ldw	r3,-4(fp)
 1019ec0:	188000a0 	cmpeqi	r2,r3,2
 1019ec4:	1000041e 	bne	r2,zero,1019ed8 <OSSemPend+0x1e8>
 1019ec8:	00000706 	br	1019ee8 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 1019ecc:	e0bffe17 	ldw	r2,-8(fp)
 1019ed0:	10000005 	stb	zero,0(r2)
             break;
 1019ed4:	00000c06 	br	1019f08 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 1019ed8:	e0fffe17 	ldw	r3,-8(fp)
 1019edc:	00800384 	movi	r2,14
 1019ee0:	18800005 	stb	r2,0(r3)
             break;
 1019ee4:	00000806 	br	1019f08 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 1019ee8:	008040b4 	movhi	r2,258
 1019eec:	108bc704 	addi	r2,r2,12060
 1019ef0:	11000017 	ldw	r4,0(r2)
 1019ef4:	e17ffc17 	ldw	r5,-16(fp)
 1019ef8:	10155480 	call	1015548 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1019efc:	e0fffe17 	ldw	r3,-8(fp)
 1019f00:	00800284 	movi	r2,10
 1019f04:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 1019f08:	008040b4 	movhi	r2,258
 1019f0c:	108bc704 	addi	r2,r2,12060
 1019f10:	10800017 	ldw	r2,0(r2)
 1019f14:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 1019f18:	008040b4 	movhi	r2,258
 1019f1c:	108bc704 	addi	r2,r2,12060
 1019f20:	10800017 	ldw	r2,0(r2)
 1019f24:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 1019f28:	008040b4 	movhi	r2,258
 1019f2c:	108bc704 	addi	r2,r2,12060
 1019f30:	10800017 	ldw	r2,0(r2)
 1019f34:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1019f38:	008040b4 	movhi	r2,258
 1019f3c:	108bc704 	addi	r2,r2,12060
 1019f40:	10800017 	ldw	r2,0(r2)
 1019f44:	10000815 	stw	zero,32(r2)
 1019f48:	e0bffb17 	ldw	r2,-20(fp)
 1019f4c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019f50:	e0bff617 	ldw	r2,-40(fp)
 1019f54:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 1019f58:	e037883a 	mov	sp,fp
 1019f5c:	dfc00117 	ldw	ra,4(sp)
 1019f60:	df000017 	ldw	fp,0(sp)
 1019f64:	dec00204 	addi	sp,sp,8
 1019f68:	f800283a 	ret

01019f6c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1019f6c:	defff504 	addi	sp,sp,-44
 1019f70:	dfc00a15 	stw	ra,40(sp)
 1019f74:	df000915 	stw	fp,36(sp)
 1019f78:	df000904 	addi	fp,sp,36
 1019f7c:	e13ffc15 	stw	r4,-16(fp)
 1019f80:	e1bffe15 	stw	r6,-8(fp)
 1019f84:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1019f88:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1019f8c:	e0bffe17 	ldw	r2,-8(fp)
 1019f90:	1004c03a 	cmpne	r2,r2,zero
 1019f94:	1000021e 	bne	r2,zero,1019fa0 <OSSemPendAbort+0x34>
        return (0);
 1019f98:	e03fff15 	stw	zero,-4(fp)
 1019f9c:	00004c06 	br	101a0d0 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1019fa0:	e0bffc17 	ldw	r2,-16(fp)
 1019fa4:	1004c03a 	cmpne	r2,r2,zero
 1019fa8:	1000051e 	bne	r2,zero,1019fc0 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1019fac:	e0fffe17 	ldw	r3,-8(fp)
 1019fb0:	00800104 	movi	r2,4
 1019fb4:	18800005 	stb	r2,0(r3)
        return (0);
 1019fb8:	e03fff15 	stw	zero,-4(fp)
 1019fbc:	00004406 	br	101a0d0 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1019fc0:	e0bffc17 	ldw	r2,-16(fp)
 1019fc4:	10800003 	ldbu	r2,0(r2)
 1019fc8:	10803fcc 	andi	r2,r2,255
 1019fcc:	108000e0 	cmpeqi	r2,r2,3
 1019fd0:	1000051e 	bne	r2,zero,1019fe8 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1019fd4:	e0fffe17 	ldw	r3,-8(fp)
 1019fd8:	00800044 	movi	r2,1
 1019fdc:	18800005 	stb	r2,0(r3)
        return (0);
 1019fe0:	e03fff15 	stw	zero,-4(fp)
 1019fe4:	00003a06 	br	101a0d0 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019fe8:	0005303a 	rdctl	r2,status
 1019fec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019ff0:	e0fff917 	ldw	r3,-28(fp)
 1019ff4:	00bfff84 	movi	r2,-2
 1019ff8:	1884703a 	and	r2,r3,r2
 1019ffc:	1001703a 	wrctl	status,r2
  
  return context;
 101a000:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101a004:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 101a008:	e0bffc17 	ldw	r2,-16(fp)
 101a00c:	10800283 	ldbu	r2,10(r2)
 101a010:	10803fcc 	andi	r2,r2,255
 101a014:	1005003a 	cmpeq	r2,r2,zero
 101a018:	1000261e 	bne	r2,zero,101a0b4 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 101a01c:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 101a020:	e0bffd03 	ldbu	r2,-12(fp)
 101a024:	10800060 	cmpeqi	r2,r2,1
 101a028:	1000091e 	bne	r2,zero,101a050 <OSSemPendAbort+0xe4>
 101a02c:	00000e06 	br	101a068 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 101a030:	e13ffc17 	ldw	r4,-16(fp)
 101a034:	000b883a 	mov	r5,zero
 101a038:	01800044 	movi	r6,1
 101a03c:	01c00084 	movi	r7,2
 101a040:	10151500 	call	1015150 <OS_EventTaskRdy>
                     nbr_tasks++;
 101a044:	e0bffb03 	ldbu	r2,-20(fp)
 101a048:	10800044 	addi	r2,r2,1
 101a04c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 101a050:	e0bffc17 	ldw	r2,-16(fp)
 101a054:	10800283 	ldbu	r2,10(r2)
 101a058:	10803fcc 	andi	r2,r2,255
 101a05c:	1004c03a 	cmpne	r2,r2,zero
 101a060:	103ff31e 	bne	r2,zero,101a030 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 101a064:	00000806 	br	101a088 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 101a068:	e13ffc17 	ldw	r4,-16(fp)
 101a06c:	000b883a 	mov	r5,zero
 101a070:	01800044 	movi	r6,1
 101a074:	01c00084 	movi	r7,2
 101a078:	10151500 	call	1015150 <OS_EventTaskRdy>
                 nbr_tasks++;
 101a07c:	e0bffb03 	ldbu	r2,-20(fp)
 101a080:	10800044 	addi	r2,r2,1
 101a084:	e0bffb05 	stb	r2,-20(fp)
 101a088:	e0bffa17 	ldw	r2,-24(fp)
 101a08c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a090:	e0bff817 	ldw	r2,-32(fp)
 101a094:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 101a098:	1015b900 	call	1015b90 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 101a09c:	e0fffe17 	ldw	r3,-8(fp)
 101a0a0:	00800384 	movi	r2,14
 101a0a4:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 101a0a8:	e0bffb03 	ldbu	r2,-20(fp)
 101a0ac:	e0bfff15 	stw	r2,-4(fp)
 101a0b0:	00000706 	br	101a0d0 <OSSemPendAbort+0x164>
 101a0b4:	e0bffa17 	ldw	r2,-24(fp)
 101a0b8:	e0bff715 	stw	r2,-36(fp)
 101a0bc:	e0bff717 	ldw	r2,-36(fp)
 101a0c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101a0c4:	e0bffe17 	ldw	r2,-8(fp)
 101a0c8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 101a0cc:	e03fff15 	stw	zero,-4(fp)
 101a0d0:	e0bfff17 	ldw	r2,-4(fp)
}
 101a0d4:	e037883a 	mov	sp,fp
 101a0d8:	dfc00117 	ldw	ra,4(sp)
 101a0dc:	df000017 	ldw	fp,0(sp)
 101a0e0:	dec00204 	addi	sp,sp,8
 101a0e4:	f800283a 	ret

0101a0e8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 101a0e8:	defff704 	addi	sp,sp,-36
 101a0ec:	dfc00815 	stw	ra,32(sp)
 101a0f0:	df000715 	stw	fp,28(sp)
 101a0f4:	df000704 	addi	fp,sp,28
 101a0f8:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101a0fc:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101a100:	e0bffe17 	ldw	r2,-8(fp)
 101a104:	1004c03a 	cmpne	r2,r2,zero
 101a108:	1000031e 	bne	r2,zero,101a118 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 101a10c:	00800104 	movi	r2,4
 101a110:	e0bfff15 	stw	r2,-4(fp)
 101a114:	00003806 	br	101a1f8 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101a118:	e0bffe17 	ldw	r2,-8(fp)
 101a11c:	10800003 	ldbu	r2,0(r2)
 101a120:	10803fcc 	andi	r2,r2,255
 101a124:	108000e0 	cmpeqi	r2,r2,3
 101a128:	1000031e 	bne	r2,zero,101a138 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 101a12c:	00800044 	movi	r2,1
 101a130:	e0bfff15 	stw	r2,-4(fp)
 101a134:	00003006 	br	101a1f8 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a138:	0005303a 	rdctl	r2,status
 101a13c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a140:	e0fffc17 	ldw	r3,-16(fp)
 101a144:	00bfff84 	movi	r2,-2
 101a148:	1884703a 	and	r2,r3,r2
 101a14c:	1001703a 	wrctl	status,r2
  
  return context;
 101a150:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 101a154:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 101a158:	e0bffe17 	ldw	r2,-8(fp)
 101a15c:	10800283 	ldbu	r2,10(r2)
 101a160:	10803fcc 	andi	r2,r2,255
 101a164:	1005003a 	cmpeq	r2,r2,zero
 101a168:	10000c1e 	bne	r2,zero,101a19c <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 101a16c:	e13ffe17 	ldw	r4,-8(fp)
 101a170:	000b883a 	mov	r5,zero
 101a174:	01800044 	movi	r6,1
 101a178:	000f883a 	mov	r7,zero
 101a17c:	10151500 	call	1015150 <OS_EventTaskRdy>
 101a180:	e0bffd17 	ldw	r2,-12(fp)
 101a184:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a188:	e0bffb17 	ldw	r2,-20(fp)
 101a18c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 101a190:	1015b900 	call	1015b90 <OS_Sched>
        return (OS_ERR_NONE);
 101a194:	e03fff15 	stw	zero,-4(fp)
 101a198:	00001706 	br	101a1f8 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 101a19c:	e0bffe17 	ldw	r2,-8(fp)
 101a1a0:	1080020b 	ldhu	r2,8(r2)
 101a1a4:	10ffffcc 	andi	r3,r2,65535
 101a1a8:	00bfffd4 	movui	r2,65535
 101a1ac:	18800c26 	beq	r3,r2,101a1e0 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 101a1b0:	e0bffe17 	ldw	r2,-8(fp)
 101a1b4:	1080020b 	ldhu	r2,8(r2)
 101a1b8:	10800044 	addi	r2,r2,1
 101a1bc:	1007883a 	mov	r3,r2
 101a1c0:	e0bffe17 	ldw	r2,-8(fp)
 101a1c4:	10c0020d 	sth	r3,8(r2)
 101a1c8:	e0bffd17 	ldw	r2,-12(fp)
 101a1cc:	e0bffa15 	stw	r2,-24(fp)
 101a1d0:	e0bffa17 	ldw	r2,-24(fp)
 101a1d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 101a1d8:	e03fff15 	stw	zero,-4(fp)
 101a1dc:	00000606 	br	101a1f8 <OSSemPost+0x110>
 101a1e0:	e0bffd17 	ldw	r2,-12(fp)
 101a1e4:	e0bff915 	stw	r2,-28(fp)
 101a1e8:	e0bff917 	ldw	r2,-28(fp)
 101a1ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 101a1f0:	00800c84 	movi	r2,50
 101a1f4:	e0bfff15 	stw	r2,-4(fp)
 101a1f8:	e0bfff17 	ldw	r2,-4(fp)
}
 101a1fc:	e037883a 	mov	sp,fp
 101a200:	dfc00117 	ldw	ra,4(sp)
 101a204:	df000017 	ldw	fp,0(sp)
 101a208:	dec00204 	addi	sp,sp,8
 101a20c:	f800283a 	ret

0101a210 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 101a210:	defff604 	addi	sp,sp,-40
 101a214:	df000915 	stw	fp,36(sp)
 101a218:	df000904 	addi	fp,sp,36
 101a21c:	e13ffd15 	stw	r4,-12(fp)
 101a220:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101a224:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 101a228:	e0bffd17 	ldw	r2,-12(fp)
 101a22c:	1004c03a 	cmpne	r2,r2,zero
 101a230:	1000031e 	bne	r2,zero,101a240 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 101a234:	00800104 	movi	r2,4
 101a238:	e0bfff15 	stw	r2,-4(fp)
 101a23c:	00003b06 	br	101a32c <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 101a240:	e0bffe17 	ldw	r2,-8(fp)
 101a244:	1004c03a 	cmpne	r2,r2,zero
 101a248:	1000031e 	bne	r2,zero,101a258 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 101a24c:	00800244 	movi	r2,9
 101a250:	e0bfff15 	stw	r2,-4(fp)
 101a254:	00003506 	br	101a32c <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 101a258:	e0bffd17 	ldw	r2,-12(fp)
 101a25c:	10800003 	ldbu	r2,0(r2)
 101a260:	10803fcc 	andi	r2,r2,255
 101a264:	108000e0 	cmpeqi	r2,r2,3
 101a268:	1000031e 	bne	r2,zero,101a278 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 101a26c:	00800044 	movi	r2,1
 101a270:	e0bfff15 	stw	r2,-4(fp)
 101a274:	00002d06 	br	101a32c <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a278:	0005303a 	rdctl	r2,status
 101a27c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a280:	e0fff817 	ldw	r3,-32(fp)
 101a284:	00bfff84 	movi	r2,-2
 101a288:	1884703a 	and	r2,r3,r2
 101a28c:	1001703a 	wrctl	status,r2
  
  return context;
 101a290:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 101a294:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 101a298:	e0bffd17 	ldw	r2,-12(fp)
 101a29c:	10c00283 	ldbu	r3,10(r2)
 101a2a0:	e0bffe17 	ldw	r2,-8(fp)
 101a2a4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 101a2a8:	e0bffd17 	ldw	r2,-12(fp)
 101a2ac:	108002c4 	addi	r2,r2,11
 101a2b0:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 101a2b4:	e0bffe17 	ldw	r2,-8(fp)
 101a2b8:	10800084 	addi	r2,r2,2
 101a2bc:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101a2c0:	e03ffa05 	stb	zero,-24(fp)
 101a2c4:	00000d06 	br	101a2fc <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 101a2c8:	e0bffc17 	ldw	r2,-16(fp)
 101a2cc:	10c00003 	ldbu	r3,0(r2)
 101a2d0:	e0bffb17 	ldw	r2,-20(fp)
 101a2d4:	10c00005 	stb	r3,0(r2)
 101a2d8:	e0bffb17 	ldw	r2,-20(fp)
 101a2dc:	10800044 	addi	r2,r2,1
 101a2e0:	e0bffb15 	stw	r2,-20(fp)
 101a2e4:	e0bffc17 	ldw	r2,-16(fp)
 101a2e8:	10800044 	addi	r2,r2,1
 101a2ec:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101a2f0:	e0bffa03 	ldbu	r2,-24(fp)
 101a2f4:	10800044 	addi	r2,r2,1
 101a2f8:	e0bffa05 	stb	r2,-24(fp)
 101a2fc:	e0bffa03 	ldbu	r2,-24(fp)
 101a300:	108000f0 	cmpltui	r2,r2,3
 101a304:	103ff01e 	bne	r2,zero,101a2c8 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 101a308:	e0bffd17 	ldw	r2,-12(fp)
 101a30c:	10c0020b 	ldhu	r3,8(r2)
 101a310:	e0bffe17 	ldw	r2,-8(fp)
 101a314:	10c0000d 	sth	r3,0(r2)
 101a318:	e0bff917 	ldw	r2,-28(fp)
 101a31c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a320:	e0bff717 	ldw	r2,-36(fp)
 101a324:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101a328:	e03fff15 	stw	zero,-4(fp)
 101a32c:	e0bfff17 	ldw	r2,-4(fp)
}
 101a330:	e037883a 	mov	sp,fp
 101a334:	df000017 	ldw	fp,0(sp)
 101a338:	dec00104 	addi	sp,sp,4
 101a33c:	f800283a 	ret

0101a340 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 101a340:	defff904 	addi	sp,sp,-28
 101a344:	df000615 	stw	fp,24(sp)
 101a348:	df000604 	addi	fp,sp,24
 101a34c:	e13ffd15 	stw	r4,-12(fp)
 101a350:	e1bfff15 	stw	r6,-4(fp)
 101a354:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101a358:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 101a35c:	e0bfff17 	ldw	r2,-4(fp)
 101a360:	1005003a 	cmpeq	r2,r2,zero
 101a364:	1000331e 	bne	r2,zero,101a434 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101a368:	e0bffd17 	ldw	r2,-12(fp)
 101a36c:	1004c03a 	cmpne	r2,r2,zero
 101a370:	1000041e 	bne	r2,zero,101a384 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 101a374:	e0ffff17 	ldw	r3,-4(fp)
 101a378:	00800104 	movi	r2,4
 101a37c:	18800005 	stb	r2,0(r3)
        return;
 101a380:	00002c06 	br	101a434 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101a384:	e0bffd17 	ldw	r2,-12(fp)
 101a388:	10800003 	ldbu	r2,0(r2)
 101a38c:	10803fcc 	andi	r2,r2,255
 101a390:	108000e0 	cmpeqi	r2,r2,3
 101a394:	1000041e 	bne	r2,zero,101a3a8 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 101a398:	e0ffff17 	ldw	r3,-4(fp)
 101a39c:	00800044 	movi	r2,1
 101a3a0:	18800005 	stb	r2,0(r3)
        return;
 101a3a4:	00002306 	br	101a434 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a3a8:	0005303a 	rdctl	r2,status
 101a3ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a3b0:	e0fffb17 	ldw	r3,-20(fp)
 101a3b4:	00bfff84 	movi	r2,-2
 101a3b8:	1884703a 	and	r2,r3,r2
 101a3bc:	1001703a 	wrctl	status,r2
  
  return context;
 101a3c0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 101a3c4:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 101a3c8:	e0bfff17 	ldw	r2,-4(fp)
 101a3cc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 101a3d0:	e0bffd17 	ldw	r2,-12(fp)
 101a3d4:	1080020b 	ldhu	r2,8(r2)
 101a3d8:	10bfffcc 	andi	r2,r2,65535
 101a3dc:	1005003a 	cmpeq	r2,r2,zero
 101a3e0:	1000041e 	bne	r2,zero,101a3f4 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 101a3e4:	e0fffd17 	ldw	r3,-12(fp)
 101a3e8:	e0bffe0b 	ldhu	r2,-8(fp)
 101a3ec:	1880020d 	sth	r2,8(r3)
 101a3f0:	00000c06 	br	101a424 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 101a3f4:	e0bffd17 	ldw	r2,-12(fp)
 101a3f8:	10800283 	ldbu	r2,10(r2)
 101a3fc:	10803fcc 	andi	r2,r2,255
 101a400:	1004c03a 	cmpne	r2,r2,zero
 101a404:	1000041e 	bne	r2,zero,101a418 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 101a408:	e0fffd17 	ldw	r3,-12(fp)
 101a40c:	e0bffe0b 	ldhu	r2,-8(fp)
 101a410:	1880020d 	sth	r2,8(r3)
 101a414:	00000306 	br	101a424 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 101a418:	e0ffff17 	ldw	r3,-4(fp)
 101a41c:	00801244 	movi	r2,73
 101a420:	18800005 	stb	r2,0(r3)
 101a424:	e0bffc17 	ldw	r2,-16(fp)
 101a428:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a42c:	e0bffa17 	ldw	r2,-24(fp)
 101a430:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 101a434:	e037883a 	mov	sp,fp
 101a438:	df000017 	ldw	fp,0(sp)
 101a43c:	dec00104 	addi	sp,sp,4
 101a440:	f800283a 	ret

0101a444 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 101a444:	defff004 	addi	sp,sp,-64
 101a448:	dfc00f15 	stw	ra,60(sp)
 101a44c:	df000e15 	stw	fp,56(sp)
 101a450:	df000e04 	addi	fp,sp,56
 101a454:	e13ffd05 	stb	r4,-12(fp)
 101a458:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 101a45c:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 101a460:	e0bffd03 	ldbu	r2,-12(fp)
 101a464:	10800530 	cmpltui	r2,r2,20
 101a468:	1000061e 	bne	r2,zero,101a484 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 101a46c:	e0bffd03 	ldbu	r2,-12(fp)
 101a470:	10803fe0 	cmpeqi	r2,r2,255
 101a474:	1000031e 	bne	r2,zero,101a484 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 101a478:	00800a84 	movi	r2,42
 101a47c:	e0bfff15 	stw	r2,-4(fp)
 101a480:	00014706 	br	101a9a0 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 101a484:	e0bffe03 	ldbu	r2,-8(fp)
 101a488:	10800530 	cmpltui	r2,r2,20
 101a48c:	1000031e 	bne	r2,zero,101a49c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 101a490:	00800a84 	movi	r2,42
 101a494:	e0bfff15 	stw	r2,-4(fp)
 101a498:	00014106 	br	101a9a0 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a49c:	0005303a 	rdctl	r2,status
 101a4a0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a4a4:	e0fff617 	ldw	r3,-40(fp)
 101a4a8:	00bfff84 	movi	r2,-2
 101a4ac:	1884703a 	and	r2,r3,r2
 101a4b0:	1001703a 	wrctl	status,r2
  
  return context;
 101a4b4:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101a4b8:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 101a4bc:	e0bffe03 	ldbu	r2,-8(fp)
 101a4c0:	00c040f4 	movhi	r3,259
 101a4c4:	18ea5104 	addi	r3,r3,-22204
 101a4c8:	1085883a 	add	r2,r2,r2
 101a4cc:	1085883a 	add	r2,r2,r2
 101a4d0:	10c5883a 	add	r2,r2,r3
 101a4d4:	10800017 	ldw	r2,0(r2)
 101a4d8:	1005003a 	cmpeq	r2,r2,zero
 101a4dc:	1000071e 	bne	r2,zero,101a4fc <OSTaskChangePrio+0xb8>
 101a4e0:	e0bff717 	ldw	r2,-36(fp)
 101a4e4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a4e8:	e0bff517 	ldw	r2,-44(fp)
 101a4ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 101a4f0:	00800a04 	movi	r2,40
 101a4f4:	e0bfff15 	stw	r2,-4(fp)
 101a4f8:	00012906 	br	101a9a0 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 101a4fc:	e0bffd03 	ldbu	r2,-12(fp)
 101a500:	10803fd8 	cmpnei	r2,r2,255
 101a504:	1000051e 	bne	r2,zero,101a51c <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 101a508:	008040b4 	movhi	r2,258
 101a50c:	108bc704 	addi	r2,r2,12060
 101a510:	10800017 	ldw	r2,0(r2)
 101a514:	10800c83 	ldbu	r2,50(r2)
 101a518:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 101a51c:	e0bffd03 	ldbu	r2,-12(fp)
 101a520:	00c040f4 	movhi	r3,259
 101a524:	18ea5104 	addi	r3,r3,-22204
 101a528:	1085883a 	add	r2,r2,r2
 101a52c:	1085883a 	add	r2,r2,r2
 101a530:	10c5883a 	add	r2,r2,r3
 101a534:	10800017 	ldw	r2,0(r2)
 101a538:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 101a53c:	e0bffa17 	ldw	r2,-24(fp)
 101a540:	1004c03a 	cmpne	r2,r2,zero
 101a544:	1000071e 	bne	r2,zero,101a564 <OSTaskChangePrio+0x120>
 101a548:	e0bff717 	ldw	r2,-36(fp)
 101a54c:	e0bff415 	stw	r2,-48(fp)
 101a550:	e0bff417 	ldw	r2,-48(fp)
 101a554:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 101a558:	00800a44 	movi	r2,41
 101a55c:	e0bfff15 	stw	r2,-4(fp)
 101a560:	00010f06 	br	101a9a0 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 101a564:	e0bffa17 	ldw	r2,-24(fp)
 101a568:	10800058 	cmpnei	r2,r2,1
 101a56c:	1000071e 	bne	r2,zero,101a58c <OSTaskChangePrio+0x148>
 101a570:	e0bff717 	ldw	r2,-36(fp)
 101a574:	e0bff315 	stw	r2,-52(fp)
 101a578:	e0bff317 	ldw	r2,-52(fp)
 101a57c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 101a580:	008010c4 	movi	r2,67
 101a584:	e0bfff15 	stw	r2,-4(fp)
 101a588:	00010506 	br	101a9a0 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 101a58c:	e0bffe03 	ldbu	r2,-8(fp)
 101a590:	1004d0fa 	srli	r2,r2,3
 101a594:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 101a598:	e0bffe03 	ldbu	r2,-8(fp)
 101a59c:	108001cc 	andi	r2,r2,7
 101a5a0:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 101a5a4:	e0fff983 	ldbu	r3,-26(fp)
 101a5a8:	00800044 	movi	r2,1
 101a5ac:	10c4983a 	sll	r2,r2,r3
 101a5b0:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 101a5b4:	e0fff943 	ldbu	r3,-27(fp)
 101a5b8:	00800044 	movi	r2,1
 101a5bc:	10c4983a 	sll	r2,r2,r3
 101a5c0:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 101a5c4:	e0bffd03 	ldbu	r2,-12(fp)
 101a5c8:	00c040f4 	movhi	r3,259
 101a5cc:	18ea5104 	addi	r3,r3,-22204
 101a5d0:	1085883a 	add	r2,r2,r2
 101a5d4:	1085883a 	add	r2,r2,r2
 101a5d8:	10c5883a 	add	r2,r2,r3
 101a5dc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 101a5e0:	e0bffe03 	ldbu	r2,-8(fp)
 101a5e4:	00c040f4 	movhi	r3,259
 101a5e8:	18ea5104 	addi	r3,r3,-22204
 101a5ec:	1085883a 	add	r2,r2,r2
 101a5f0:	1085883a 	add	r2,r2,r2
 101a5f4:	10c7883a 	add	r3,r2,r3
 101a5f8:	e0bffa17 	ldw	r2,-24(fp)
 101a5fc:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 101a600:	e0bffa17 	ldw	r2,-24(fp)
 101a604:	10800d03 	ldbu	r2,52(r2)
 101a608:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 101a60c:	e0bffa17 	ldw	r2,-24(fp)
 101a610:	10800d83 	ldbu	r2,54(r2)
 101a614:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 101a618:	e0bffa17 	ldw	r2,-24(fp)
 101a61c:	10800d43 	ldbu	r2,53(r2)
 101a620:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 101a624:	e0fff903 	ldbu	r3,-28(fp)
 101a628:	008040b4 	movhi	r2,258
 101a62c:	108bc444 	addi	r2,r2,12049
 101a630:	10c5883a 	add	r2,r2,r3
 101a634:	10c00003 	ldbu	r3,0(r2)
 101a638:	e0bff803 	ldbu	r2,-32(fp)
 101a63c:	1884703a 	and	r2,r3,r2
 101a640:	10803fcc 	andi	r2,r2,255
 101a644:	1005003a 	cmpeq	r2,r2,zero
 101a648:	1000381e 	bne	r2,zero,101a72c <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 101a64c:	e13ff903 	ldbu	r4,-28(fp)
 101a650:	e0fff903 	ldbu	r3,-28(fp)
 101a654:	008040b4 	movhi	r2,258
 101a658:	108bc444 	addi	r2,r2,12049
 101a65c:	10c5883a 	add	r2,r2,r3
 101a660:	10800003 	ldbu	r2,0(r2)
 101a664:	1007883a 	mov	r3,r2
 101a668:	e0bff803 	ldbu	r2,-32(fp)
 101a66c:	0084303a 	nor	r2,zero,r2
 101a670:	1884703a 	and	r2,r3,r2
 101a674:	1007883a 	mov	r3,r2
 101a678:	008040b4 	movhi	r2,258
 101a67c:	108bc444 	addi	r2,r2,12049
 101a680:	1105883a 	add	r2,r2,r4
 101a684:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 101a688:	e0fff903 	ldbu	r3,-28(fp)
 101a68c:	008040b4 	movhi	r2,258
 101a690:	108bc444 	addi	r2,r2,12049
 101a694:	10c5883a 	add	r2,r2,r3
 101a698:	10800003 	ldbu	r2,0(r2)
 101a69c:	10803fcc 	andi	r2,r2,255
 101a6a0:	1004c03a 	cmpne	r2,r2,zero
 101a6a4:	10000b1e 	bne	r2,zero,101a6d4 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 101a6a8:	e0bff843 	ldbu	r2,-31(fp)
 101a6ac:	0084303a 	nor	r2,zero,r2
 101a6b0:	1007883a 	mov	r3,r2
 101a6b4:	008040b4 	movhi	r2,258
 101a6b8:	108bc404 	addi	r2,r2,12048
 101a6bc:	10800003 	ldbu	r2,0(r2)
 101a6c0:	1884703a 	and	r2,r3,r2
 101a6c4:	1007883a 	mov	r3,r2
 101a6c8:	008040b4 	movhi	r2,258
 101a6cc:	108bc404 	addi	r2,r2,12048
 101a6d0:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 101a6d4:	008040b4 	movhi	r2,258
 101a6d8:	108bc404 	addi	r2,r2,12048
 101a6dc:	10c00003 	ldbu	r3,0(r2)
 101a6e0:	e0bff8c3 	ldbu	r2,-29(fp)
 101a6e4:	1884b03a 	or	r2,r3,r2
 101a6e8:	1007883a 	mov	r3,r2
 101a6ec:	008040b4 	movhi	r2,258
 101a6f0:	108bc404 	addi	r2,r2,12048
 101a6f4:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 101a6f8:	e13ff983 	ldbu	r4,-26(fp)
 101a6fc:	e0fff983 	ldbu	r3,-26(fp)
 101a700:	008040b4 	movhi	r2,258
 101a704:	108bc444 	addi	r2,r2,12049
 101a708:	10c5883a 	add	r2,r2,r3
 101a70c:	10c00003 	ldbu	r3,0(r2)
 101a710:	e0bff883 	ldbu	r2,-30(fp)
 101a714:	1884b03a 	or	r2,r3,r2
 101a718:	1007883a 	mov	r3,r2
 101a71c:	008040b4 	movhi	r2,258
 101a720:	108bc444 	addi	r2,r2,12049
 101a724:	1105883a 	add	r2,r2,r4
 101a728:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 101a72c:	e0bffa17 	ldw	r2,-24(fp)
 101a730:	10800717 	ldw	r2,28(r2)
 101a734:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 101a738:	e0bffc17 	ldw	r2,-16(fp)
 101a73c:	1005003a 	cmpeq	r2,r2,zero
 101a740:	1000341e 	bne	r2,zero,101a814 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 101a744:	e13ff903 	ldbu	r4,-28(fp)
 101a748:	e0fff903 	ldbu	r3,-28(fp)
 101a74c:	e0bffc17 	ldw	r2,-16(fp)
 101a750:	1885883a 	add	r2,r3,r2
 101a754:	10800204 	addi	r2,r2,8
 101a758:	108000c3 	ldbu	r2,3(r2)
 101a75c:	1007883a 	mov	r3,r2
 101a760:	e0bff803 	ldbu	r2,-32(fp)
 101a764:	0084303a 	nor	r2,zero,r2
 101a768:	1884703a 	and	r2,r3,r2
 101a76c:	1007883a 	mov	r3,r2
 101a770:	e0bffc17 	ldw	r2,-16(fp)
 101a774:	2085883a 	add	r2,r4,r2
 101a778:	10800204 	addi	r2,r2,8
 101a77c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 101a780:	e0fff903 	ldbu	r3,-28(fp)
 101a784:	e0bffc17 	ldw	r2,-16(fp)
 101a788:	1885883a 	add	r2,r3,r2
 101a78c:	10800204 	addi	r2,r2,8
 101a790:	108000c3 	ldbu	r2,3(r2)
 101a794:	10803fcc 	andi	r2,r2,255
 101a798:	1004c03a 	cmpne	r2,r2,zero
 101a79c:	1000091e 	bne	r2,zero,101a7c4 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 101a7a0:	e0bffc17 	ldw	r2,-16(fp)
 101a7a4:	10800283 	ldbu	r2,10(r2)
 101a7a8:	1007883a 	mov	r3,r2
 101a7ac:	e0bff843 	ldbu	r2,-31(fp)
 101a7b0:	0084303a 	nor	r2,zero,r2
 101a7b4:	1884703a 	and	r2,r3,r2
 101a7b8:	1007883a 	mov	r3,r2
 101a7bc:	e0bffc17 	ldw	r2,-16(fp)
 101a7c0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 101a7c4:	e0bffc17 	ldw	r2,-16(fp)
 101a7c8:	10c00283 	ldbu	r3,10(r2)
 101a7cc:	e0bff8c3 	ldbu	r2,-29(fp)
 101a7d0:	1884b03a 	or	r2,r3,r2
 101a7d4:	1007883a 	mov	r3,r2
 101a7d8:	e0bffc17 	ldw	r2,-16(fp)
 101a7dc:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 101a7e0:	e13ff983 	ldbu	r4,-26(fp)
 101a7e4:	e0fff983 	ldbu	r3,-26(fp)
 101a7e8:	e0bffc17 	ldw	r2,-16(fp)
 101a7ec:	1885883a 	add	r2,r3,r2
 101a7f0:	10800204 	addi	r2,r2,8
 101a7f4:	10c000c3 	ldbu	r3,3(r2)
 101a7f8:	e0bff883 	ldbu	r2,-30(fp)
 101a7fc:	1884b03a 	or	r2,r3,r2
 101a800:	1007883a 	mov	r3,r2
 101a804:	e0bffc17 	ldw	r2,-16(fp)
 101a808:	2085883a 	add	r2,r4,r2
 101a80c:	10800204 	addi	r2,r2,8
 101a810:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 101a814:	e0bffa17 	ldw	r2,-24(fp)
 101a818:	10800817 	ldw	r2,32(r2)
 101a81c:	1005003a 	cmpeq	r2,r2,zero
 101a820:	1000441e 	bne	r2,zero,101a934 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 101a824:	e0bffa17 	ldw	r2,-24(fp)
 101a828:	10800817 	ldw	r2,32(r2)
 101a82c:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 101a830:	e0bffb17 	ldw	r2,-20(fp)
 101a834:	10800017 	ldw	r2,0(r2)
 101a838:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 101a83c:	00003a06 	br	101a928 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 101a840:	e13ff903 	ldbu	r4,-28(fp)
 101a844:	e0fff903 	ldbu	r3,-28(fp)
 101a848:	e0bffc17 	ldw	r2,-16(fp)
 101a84c:	1885883a 	add	r2,r3,r2
 101a850:	10800204 	addi	r2,r2,8
 101a854:	108000c3 	ldbu	r2,3(r2)
 101a858:	1007883a 	mov	r3,r2
 101a85c:	e0bff803 	ldbu	r2,-32(fp)
 101a860:	0084303a 	nor	r2,zero,r2
 101a864:	1884703a 	and	r2,r3,r2
 101a868:	1007883a 	mov	r3,r2
 101a86c:	e0bffc17 	ldw	r2,-16(fp)
 101a870:	2085883a 	add	r2,r4,r2
 101a874:	10800204 	addi	r2,r2,8
 101a878:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 101a87c:	e0fff903 	ldbu	r3,-28(fp)
 101a880:	e0bffc17 	ldw	r2,-16(fp)
 101a884:	1885883a 	add	r2,r3,r2
 101a888:	10800204 	addi	r2,r2,8
 101a88c:	108000c3 	ldbu	r2,3(r2)
 101a890:	10803fcc 	andi	r2,r2,255
 101a894:	1004c03a 	cmpne	r2,r2,zero
 101a898:	1000091e 	bne	r2,zero,101a8c0 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 101a89c:	e0bffc17 	ldw	r2,-16(fp)
 101a8a0:	10800283 	ldbu	r2,10(r2)
 101a8a4:	1007883a 	mov	r3,r2
 101a8a8:	e0bff843 	ldbu	r2,-31(fp)
 101a8ac:	0084303a 	nor	r2,zero,r2
 101a8b0:	1884703a 	and	r2,r3,r2
 101a8b4:	1007883a 	mov	r3,r2
 101a8b8:	e0bffc17 	ldw	r2,-16(fp)
 101a8bc:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 101a8c0:	e0bffc17 	ldw	r2,-16(fp)
 101a8c4:	10c00283 	ldbu	r3,10(r2)
 101a8c8:	e0bff8c3 	ldbu	r2,-29(fp)
 101a8cc:	1884b03a 	or	r2,r3,r2
 101a8d0:	1007883a 	mov	r3,r2
 101a8d4:	e0bffc17 	ldw	r2,-16(fp)
 101a8d8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 101a8dc:	e13ff983 	ldbu	r4,-26(fp)
 101a8e0:	e0fff983 	ldbu	r3,-26(fp)
 101a8e4:	e0bffc17 	ldw	r2,-16(fp)
 101a8e8:	1885883a 	add	r2,r3,r2
 101a8ec:	10800204 	addi	r2,r2,8
 101a8f0:	10c000c3 	ldbu	r3,3(r2)
 101a8f4:	e0bff883 	ldbu	r2,-30(fp)
 101a8f8:	1884b03a 	or	r2,r3,r2
 101a8fc:	1007883a 	mov	r3,r2
 101a900:	e0bffc17 	ldw	r2,-16(fp)
 101a904:	2085883a 	add	r2,r4,r2
 101a908:	10800204 	addi	r2,r2,8
 101a90c:	10c000c5 	stb	r3,3(r2)
            pevents++;
 101a910:	e0bffb17 	ldw	r2,-20(fp)
 101a914:	10800104 	addi	r2,r2,4
 101a918:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 101a91c:	e0bffb17 	ldw	r2,-20(fp)
 101a920:	10800017 	ldw	r2,0(r2)
 101a924:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 101a928:	e0bffc17 	ldw	r2,-16(fp)
 101a92c:	1004c03a 	cmpne	r2,r2,zero
 101a930:	103fc31e 	bne	r2,zero,101a840 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 101a934:	e0fffa17 	ldw	r3,-24(fp)
 101a938:	e0bffe03 	ldbu	r2,-8(fp)
 101a93c:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 101a940:	e0fffa17 	ldw	r3,-24(fp)
 101a944:	e0bff983 	ldbu	r2,-26(fp)
 101a948:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 101a94c:	e0fffa17 	ldw	r3,-24(fp)
 101a950:	e0bff943 	ldbu	r2,-27(fp)
 101a954:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 101a958:	e0fffa17 	ldw	r3,-24(fp)
 101a95c:	e0bff8c3 	ldbu	r2,-29(fp)
 101a960:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 101a964:	e0fffa17 	ldw	r3,-24(fp)
 101a968:	e0bff883 	ldbu	r2,-30(fp)
 101a96c:	18800d45 	stb	r2,53(r3)
 101a970:	e0bff717 	ldw	r2,-36(fp)
 101a974:	e0bff215 	stw	r2,-56(fp)
 101a978:	e0bff217 	ldw	r2,-56(fp)
 101a97c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 101a980:	008040b4 	movhi	r2,258
 101a984:	108bb844 	addi	r2,r2,12001
 101a988:	10800003 	ldbu	r2,0(r2)
 101a98c:	10803fcc 	andi	r2,r2,255
 101a990:	10800058 	cmpnei	r2,r2,1
 101a994:	1000011e 	bne	r2,zero,101a99c <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 101a998:	1015b900 	call	1015b90 <OS_Sched>
    }
    return (OS_ERR_NONE);
 101a99c:	e03fff15 	stw	zero,-4(fp)
 101a9a0:	e0bfff17 	ldw	r2,-4(fp)
}
 101a9a4:	e037883a 	mov	sp,fp
 101a9a8:	dfc00117 	ldw	ra,4(sp)
 101a9ac:	df000017 	ldw	fp,0(sp)
 101a9b0:	dec00204 	addi	sp,sp,8
 101a9b4:	f800283a 	ret

0101a9b8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 101a9b8:	deffed04 	addi	sp,sp,-76
 101a9bc:	dfc01215 	stw	ra,72(sp)
 101a9c0:	df001115 	stw	fp,68(sp)
 101a9c4:	df001104 	addi	fp,sp,68
 101a9c8:	e13ffb15 	stw	r4,-20(fp)
 101a9cc:	e17ffc15 	stw	r5,-16(fp)
 101a9d0:	e1bffd15 	stw	r6,-12(fp)
 101a9d4:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 101a9d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 101a9dc:	e0bffe03 	ldbu	r2,-8(fp)
 101a9e0:	10800570 	cmpltui	r2,r2,21
 101a9e4:	1000031e 	bne	r2,zero,101a9f4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 101a9e8:	00800a84 	movi	r2,42
 101a9ec:	e0bfff15 	stw	r2,-4(fp)
 101a9f0:	00006006 	br	101ab74 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a9f4:	0005303a 	rdctl	r2,status
 101a9f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a9fc:	e0fff717 	ldw	r3,-36(fp)
 101aa00:	00bfff84 	movi	r2,-2
 101aa04:	1884703a 	and	r2,r3,r2
 101aa08:	1001703a 	wrctl	status,r2
  
  return context;
 101aa0c:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101aa10:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 101aa14:	008040b4 	movhi	r2,258
 101aa18:	108bc604 	addi	r2,r2,12056
 101aa1c:	10800003 	ldbu	r2,0(r2)
 101aa20:	10803fcc 	andi	r2,r2,255
 101aa24:	1005003a 	cmpeq	r2,r2,zero
 101aa28:	1000071e 	bne	r2,zero,101aa48 <OSTaskCreate+0x90>
 101aa2c:	e0bff817 	ldw	r2,-32(fp)
 101aa30:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101aa34:	e0bff617 	ldw	r2,-40(fp)
 101aa38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 101aa3c:	00800f04 	movi	r2,60
 101aa40:	e0bfff15 	stw	r2,-4(fp)
 101aa44:	00004b06 	br	101ab74 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 101aa48:	e0bffe03 	ldbu	r2,-8(fp)
 101aa4c:	00c040f4 	movhi	r3,259
 101aa50:	18ea5104 	addi	r3,r3,-22204
 101aa54:	1085883a 	add	r2,r2,r2
 101aa58:	1085883a 	add	r2,r2,r2
 101aa5c:	10c5883a 	add	r2,r2,r3
 101aa60:	10800017 	ldw	r2,0(r2)
 101aa64:	1004c03a 	cmpne	r2,r2,zero
 101aa68:	10003c1e 	bne	r2,zero,101ab5c <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 101aa6c:	e0bffe03 	ldbu	r2,-8(fp)
 101aa70:	00c040f4 	movhi	r3,259
 101aa74:	18ea5104 	addi	r3,r3,-22204
 101aa78:	1085883a 	add	r2,r2,r2
 101aa7c:	1085883a 	add	r2,r2,r2
 101aa80:	10c7883a 	add	r3,r2,r3
 101aa84:	00800044 	movi	r2,1
 101aa88:	18800015 	stw	r2,0(r3)
 101aa8c:	e0bff817 	ldw	r2,-32(fp)
 101aa90:	e0bff515 	stw	r2,-44(fp)
 101aa94:	e0bff517 	ldw	r2,-44(fp)
 101aa98:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 101aa9c:	e13ffb17 	ldw	r4,-20(fp)
 101aaa0:	e17ffc17 	ldw	r5,-16(fp)
 101aaa4:	e1bffd17 	ldw	r6,-12(fp)
 101aaa8:	000f883a 	mov	r7,zero
 101aaac:	101e0540 	call	101e054 <OSTaskStkInit>
 101aab0:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 101aab4:	e13ffe03 	ldbu	r4,-8(fp)
 101aab8:	d8000015 	stw	zero,0(sp)
 101aabc:	d8000115 	stw	zero,4(sp)
 101aac0:	d8000215 	stw	zero,8(sp)
 101aac4:	e17ffa17 	ldw	r5,-24(fp)
 101aac8:	000d883a 	mov	r6,zero
 101aacc:	000f883a 	mov	r7,zero
 101aad0:	1015f980 	call	1015f98 <OS_TCBInit>
 101aad4:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 101aad8:	e0bff903 	ldbu	r2,-28(fp)
 101aadc:	1004c03a 	cmpne	r2,r2,zero
 101aae0:	1000081e 	bne	r2,zero,101ab04 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 101aae4:	008040b4 	movhi	r2,258
 101aae8:	108bb844 	addi	r2,r2,12001
 101aaec:	10800003 	ldbu	r2,0(r2)
 101aaf0:	10803fcc 	andi	r2,r2,255
 101aaf4:	10800058 	cmpnei	r2,r2,1
 101aaf8:	1000151e 	bne	r2,zero,101ab50 <OSTaskCreate+0x198>
                OS_Sched();
 101aafc:	1015b900 	call	1015b90 <OS_Sched>
 101ab00:	00001306 	br	101ab50 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ab04:	0005303a 	rdctl	r2,status
 101ab08:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ab0c:	e0fff417 	ldw	r3,-48(fp)
 101ab10:	00bfff84 	movi	r2,-2
 101ab14:	1884703a 	and	r2,r3,r2
 101ab18:	1001703a 	wrctl	status,r2
  
  return context;
 101ab1c:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 101ab20:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 101ab24:	e0bffe03 	ldbu	r2,-8(fp)
 101ab28:	00c040f4 	movhi	r3,259
 101ab2c:	18ea5104 	addi	r3,r3,-22204
 101ab30:	1085883a 	add	r2,r2,r2
 101ab34:	1085883a 	add	r2,r2,r2
 101ab38:	10c5883a 	add	r2,r2,r3
 101ab3c:	10000015 	stw	zero,0(r2)
 101ab40:	e0bff817 	ldw	r2,-32(fp)
 101ab44:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ab48:	e0bff317 	ldw	r2,-52(fp)
 101ab4c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 101ab50:	e0bff903 	ldbu	r2,-28(fp)
 101ab54:	e0bfff15 	stw	r2,-4(fp)
 101ab58:	00000606 	br	101ab74 <OSTaskCreate+0x1bc>
 101ab5c:	e0bff817 	ldw	r2,-32(fp)
 101ab60:	e0bff215 	stw	r2,-56(fp)
 101ab64:	e0bff217 	ldw	r2,-56(fp)
 101ab68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 101ab6c:	00800a04 	movi	r2,40
 101ab70:	e0bfff15 	stw	r2,-4(fp)
 101ab74:	e0bfff17 	ldw	r2,-4(fp)
}
 101ab78:	e037883a 	mov	sp,fp
 101ab7c:	dfc00117 	ldw	ra,4(sp)
 101ab80:	df000017 	ldw	fp,0(sp)
 101ab84:	dec00204 	addi	sp,sp,8
 101ab88:	f800283a 	ret

0101ab8c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 101ab8c:	deffeb04 	addi	sp,sp,-84
 101ab90:	dfc01415 	stw	ra,80(sp)
 101ab94:	df001315 	stw	fp,76(sp)
 101ab98:	df001304 	addi	fp,sp,76
 101ab9c:	e13ff915 	stw	r4,-28(fp)
 101aba0:	e17ffa15 	stw	r5,-24(fp)
 101aba4:	e1bffb15 	stw	r6,-20(fp)
 101aba8:	e0800217 	ldw	r2,8(fp)
 101abac:	e0c00617 	ldw	r3,24(fp)
 101abb0:	e1fffc05 	stb	r7,-16(fp)
 101abb4:	e0bffd0d 	sth	r2,-12(fp)
 101abb8:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 101abbc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 101abc0:	e0bffc03 	ldbu	r2,-16(fp)
 101abc4:	10800570 	cmpltui	r2,r2,21
 101abc8:	1000031e 	bne	r2,zero,101abd8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 101abcc:	00800a84 	movi	r2,42
 101abd0:	e0bfff15 	stw	r2,-4(fp)
 101abd4:	00006706 	br	101ad74 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101abd8:	0005303a 	rdctl	r2,status
 101abdc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101abe0:	e0fff517 	ldw	r3,-44(fp)
 101abe4:	00bfff84 	movi	r2,-2
 101abe8:	1884703a 	and	r2,r3,r2
 101abec:	1001703a 	wrctl	status,r2
  
  return context;
 101abf0:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101abf4:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 101abf8:	008040b4 	movhi	r2,258
 101abfc:	108bc604 	addi	r2,r2,12056
 101ac00:	10800003 	ldbu	r2,0(r2)
 101ac04:	10803fcc 	andi	r2,r2,255
 101ac08:	1005003a 	cmpeq	r2,r2,zero
 101ac0c:	1000071e 	bne	r2,zero,101ac2c <OSTaskCreateExt+0xa0>
 101ac10:	e0bff617 	ldw	r2,-40(fp)
 101ac14:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ac18:	e0bff417 	ldw	r2,-48(fp)
 101ac1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 101ac20:	00800f04 	movi	r2,60
 101ac24:	e0bfff15 	stw	r2,-4(fp)
 101ac28:	00005206 	br	101ad74 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 101ac2c:	e0bffc03 	ldbu	r2,-16(fp)
 101ac30:	00c040f4 	movhi	r3,259
 101ac34:	18ea5104 	addi	r3,r3,-22204
 101ac38:	1085883a 	add	r2,r2,r2
 101ac3c:	1085883a 	add	r2,r2,r2
 101ac40:	10c5883a 	add	r2,r2,r3
 101ac44:	10800017 	ldw	r2,0(r2)
 101ac48:	1004c03a 	cmpne	r2,r2,zero
 101ac4c:	1000431e 	bne	r2,zero,101ad5c <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 101ac50:	e0bffc03 	ldbu	r2,-16(fp)
 101ac54:	00c040f4 	movhi	r3,259
 101ac58:	18ea5104 	addi	r3,r3,-22204
 101ac5c:	1085883a 	add	r2,r2,r2
 101ac60:	1085883a 	add	r2,r2,r2
 101ac64:	10c7883a 	add	r3,r2,r3
 101ac68:	00800044 	movi	r2,1
 101ac6c:	18800015 	stw	r2,0(r3)
 101ac70:	e0bff617 	ldw	r2,-40(fp)
 101ac74:	e0bff315 	stw	r2,-52(fp)
 101ac78:	e0bff317 	ldw	r2,-52(fp)
 101ac7c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 101ac80:	e1bffe0b 	ldhu	r6,-8(fp)
 101ac84:	e1000317 	ldw	r4,12(fp)
 101ac88:	e1400417 	ldw	r5,16(fp)
 101ac8c:	101be080 	call	101be08 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 101ac90:	e1fffe0b 	ldhu	r7,-8(fp)
 101ac94:	e13ff917 	ldw	r4,-28(fp)
 101ac98:	e17ffa17 	ldw	r5,-24(fp)
 101ac9c:	e1bffb17 	ldw	r6,-20(fp)
 101aca0:	101e0540 	call	101e054 <OSTaskStkInit>
 101aca4:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 101aca8:	e13ffc03 	ldbu	r4,-16(fp)
 101acac:	e1fffd0b 	ldhu	r7,-12(fp)
 101acb0:	e0fffe0b 	ldhu	r3,-8(fp)
 101acb4:	e0800417 	ldw	r2,16(fp)
 101acb8:	d8800015 	stw	r2,0(sp)
 101acbc:	e0800517 	ldw	r2,20(fp)
 101acc0:	d8800115 	stw	r2,4(sp)
 101acc4:	d8c00215 	stw	r3,8(sp)
 101acc8:	e17ff817 	ldw	r5,-32(fp)
 101accc:	e1800317 	ldw	r6,12(fp)
 101acd0:	1015f980 	call	1015f98 <OS_TCBInit>
 101acd4:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 101acd8:	e0bff703 	ldbu	r2,-36(fp)
 101acdc:	1004c03a 	cmpne	r2,r2,zero
 101ace0:	1000081e 	bne	r2,zero,101ad04 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 101ace4:	008040b4 	movhi	r2,258
 101ace8:	108bb844 	addi	r2,r2,12001
 101acec:	10800003 	ldbu	r2,0(r2)
 101acf0:	10803fcc 	andi	r2,r2,255
 101acf4:	10800058 	cmpnei	r2,r2,1
 101acf8:	1000151e 	bne	r2,zero,101ad50 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 101acfc:	1015b900 	call	1015b90 <OS_Sched>
 101ad00:	00001306 	br	101ad50 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ad04:	0005303a 	rdctl	r2,status
 101ad08:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ad0c:	e0fff217 	ldw	r3,-56(fp)
 101ad10:	00bfff84 	movi	r2,-2
 101ad14:	1884703a 	and	r2,r3,r2
 101ad18:	1001703a 	wrctl	status,r2
  
  return context;
 101ad1c:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 101ad20:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 101ad24:	e0bffc03 	ldbu	r2,-16(fp)
 101ad28:	00c040f4 	movhi	r3,259
 101ad2c:	18ea5104 	addi	r3,r3,-22204
 101ad30:	1085883a 	add	r2,r2,r2
 101ad34:	1085883a 	add	r2,r2,r2
 101ad38:	10c5883a 	add	r2,r2,r3
 101ad3c:	10000015 	stw	zero,0(r2)
 101ad40:	e0bff617 	ldw	r2,-40(fp)
 101ad44:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ad48:	e0bff117 	ldw	r2,-60(fp)
 101ad4c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 101ad50:	e0bff703 	ldbu	r2,-36(fp)
 101ad54:	e0bfff15 	stw	r2,-4(fp)
 101ad58:	00000606 	br	101ad74 <OSTaskCreateExt+0x1e8>
 101ad5c:	e0bff617 	ldw	r2,-40(fp)
 101ad60:	e0bff015 	stw	r2,-64(fp)
 101ad64:	e0bff017 	ldw	r2,-64(fp)
 101ad68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 101ad6c:	00800a04 	movi	r2,40
 101ad70:	e0bfff15 	stw	r2,-4(fp)
 101ad74:	e0bfff17 	ldw	r2,-4(fp)
}
 101ad78:	e037883a 	mov	sp,fp
 101ad7c:	dfc00117 	ldw	ra,4(sp)
 101ad80:	df000017 	ldw	fp,0(sp)
 101ad84:	dec00204 	addi	sp,sp,8
 101ad88:	f800283a 	ret

0101ad8c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 101ad8c:	defff304 	addi	sp,sp,-52
 101ad90:	dfc00c15 	stw	ra,48(sp)
 101ad94:	df000b15 	stw	fp,44(sp)
 101ad98:	df000b04 	addi	fp,sp,44
 101ad9c:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 101ada0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 101ada4:	008040b4 	movhi	r2,258
 101ada8:	108bc604 	addi	r2,r2,12056
 101adac:	10800003 	ldbu	r2,0(r2)
 101adb0:	10803fcc 	andi	r2,r2,255
 101adb4:	1005003a 	cmpeq	r2,r2,zero
 101adb8:	1000031e 	bne	r2,zero,101adc8 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 101adbc:	00801004 	movi	r2,64
 101adc0:	e0bfff15 	stw	r2,-4(fp)
 101adc4:	0000ee06 	br	101b180 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 101adc8:	e0bffe03 	ldbu	r2,-8(fp)
 101adcc:	10800518 	cmpnei	r2,r2,20
 101add0:	1000031e 	bne	r2,zero,101ade0 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 101add4:	00800f84 	movi	r2,62
 101add8:	e0bfff15 	stw	r2,-4(fp)
 101addc:	0000e806 	br	101b180 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 101ade0:	e0bffe03 	ldbu	r2,-8(fp)
 101ade4:	10800530 	cmpltui	r2,r2,20
 101ade8:	1000061e 	bne	r2,zero,101ae04 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 101adec:	e0bffe03 	ldbu	r2,-8(fp)
 101adf0:	10803fe0 	cmpeqi	r2,r2,255
 101adf4:	1000031e 	bne	r2,zero,101ae04 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 101adf8:	00800a84 	movi	r2,42
 101adfc:	e0bfff15 	stw	r2,-4(fp)
 101ae00:	0000df06 	br	101b180 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ae04:	0005303a 	rdctl	r2,status
 101ae08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ae0c:	e0fffa17 	ldw	r3,-24(fp)
 101ae10:	00bfff84 	movi	r2,-2
 101ae14:	1884703a 	and	r2,r3,r2
 101ae18:	1001703a 	wrctl	status,r2
  
  return context;
 101ae1c:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 101ae20:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 101ae24:	e0bffe03 	ldbu	r2,-8(fp)
 101ae28:	10803fd8 	cmpnei	r2,r2,255
 101ae2c:	1000051e 	bne	r2,zero,101ae44 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 101ae30:	008040b4 	movhi	r2,258
 101ae34:	108bc704 	addi	r2,r2,12060
 101ae38:	10800017 	ldw	r2,0(r2)
 101ae3c:	10800c83 	ldbu	r2,50(r2)
 101ae40:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101ae44:	e0bffe03 	ldbu	r2,-8(fp)
 101ae48:	00c040f4 	movhi	r3,259
 101ae4c:	18ea5104 	addi	r3,r3,-22204
 101ae50:	1085883a 	add	r2,r2,r2
 101ae54:	1085883a 	add	r2,r2,r2
 101ae58:	10c5883a 	add	r2,r2,r3
 101ae5c:	10800017 	ldw	r2,0(r2)
 101ae60:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 101ae64:	e0bffc17 	ldw	r2,-16(fp)
 101ae68:	1004c03a 	cmpne	r2,r2,zero
 101ae6c:	1000071e 	bne	r2,zero,101ae8c <OSTaskDel+0x100>
 101ae70:	e0bffb17 	ldw	r2,-20(fp)
 101ae74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ae78:	e0bff917 	ldw	r2,-28(fp)
 101ae7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101ae80:	008010c4 	movi	r2,67
 101ae84:	e0bfff15 	stw	r2,-4(fp)
 101ae88:	0000bd06 	br	101b180 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 101ae8c:	e0bffc17 	ldw	r2,-16(fp)
 101ae90:	10800058 	cmpnei	r2,r2,1
 101ae94:	1000071e 	bne	r2,zero,101aeb4 <OSTaskDel+0x128>
 101ae98:	e0bffb17 	ldw	r2,-20(fp)
 101ae9c:	e0bff815 	stw	r2,-32(fp)
 101aea0:	e0bff817 	ldw	r2,-32(fp)
 101aea4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 101aea8:	00800f44 	movi	r2,61
 101aeac:	e0bfff15 	stw	r2,-4(fp)
 101aeb0:	0000b306 	br	101b180 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 101aeb4:	e0bffc17 	ldw	r2,-16(fp)
 101aeb8:	10800d03 	ldbu	r2,52(r2)
 101aebc:	11003fcc 	andi	r4,r2,255
 101aec0:	e0bffc17 	ldw	r2,-16(fp)
 101aec4:	10800d03 	ldbu	r2,52(r2)
 101aec8:	10c03fcc 	andi	r3,r2,255
 101aecc:	008040b4 	movhi	r2,258
 101aed0:	108bc444 	addi	r2,r2,12049
 101aed4:	10c5883a 	add	r2,r2,r3
 101aed8:	10800003 	ldbu	r2,0(r2)
 101aedc:	1007883a 	mov	r3,r2
 101aee0:	e0bffc17 	ldw	r2,-16(fp)
 101aee4:	10800d43 	ldbu	r2,53(r2)
 101aee8:	0084303a 	nor	r2,zero,r2
 101aeec:	1884703a 	and	r2,r3,r2
 101aef0:	1007883a 	mov	r3,r2
 101aef4:	008040b4 	movhi	r2,258
 101aef8:	108bc444 	addi	r2,r2,12049
 101aefc:	1105883a 	add	r2,r2,r4
 101af00:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 101af04:	e0bffc17 	ldw	r2,-16(fp)
 101af08:	10800d03 	ldbu	r2,52(r2)
 101af0c:	10c03fcc 	andi	r3,r2,255
 101af10:	008040b4 	movhi	r2,258
 101af14:	108bc444 	addi	r2,r2,12049
 101af18:	10c5883a 	add	r2,r2,r3
 101af1c:	10800003 	ldbu	r2,0(r2)
 101af20:	10803fcc 	andi	r2,r2,255
 101af24:	1004c03a 	cmpne	r2,r2,zero
 101af28:	10000c1e 	bne	r2,zero,101af5c <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 101af2c:	e0bffc17 	ldw	r2,-16(fp)
 101af30:	10800d83 	ldbu	r2,54(r2)
 101af34:	0084303a 	nor	r2,zero,r2
 101af38:	1007883a 	mov	r3,r2
 101af3c:	008040b4 	movhi	r2,258
 101af40:	108bc404 	addi	r2,r2,12048
 101af44:	10800003 	ldbu	r2,0(r2)
 101af48:	1884703a 	and	r2,r3,r2
 101af4c:	1007883a 	mov	r3,r2
 101af50:	008040b4 	movhi	r2,258
 101af54:	108bc404 	addi	r2,r2,12048
 101af58:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 101af5c:	e0bffc17 	ldw	r2,-16(fp)
 101af60:	10800717 	ldw	r2,28(r2)
 101af64:	1005003a 	cmpeq	r2,r2,zero
 101af68:	1000041e 	bne	r2,zero,101af7c <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 101af6c:	e0bffc17 	ldw	r2,-16(fp)
 101af70:	11400717 	ldw	r5,28(r2)
 101af74:	e13ffc17 	ldw	r4,-16(fp)
 101af78:	10155480 	call	1015548 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 101af7c:	e0bffc17 	ldw	r2,-16(fp)
 101af80:	10800817 	ldw	r2,32(r2)
 101af84:	1005003a 	cmpeq	r2,r2,zero
 101af88:	1000041e 	bne	r2,zero,101af9c <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 101af8c:	e0bffc17 	ldw	r2,-16(fp)
 101af90:	11400817 	ldw	r5,32(r2)
 101af94:	e13ffc17 	ldw	r4,-16(fp)
 101af98:	10156000 	call	1015600 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 101af9c:	e0bffc17 	ldw	r2,-16(fp)
 101afa0:	10800a17 	ldw	r2,40(r2)
 101afa4:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 101afa8:	e0bffd17 	ldw	r2,-12(fp)
 101afac:	1005003a 	cmpeq	r2,r2,zero
 101afb0:	1000021e 	bne	r2,zero,101afbc <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 101afb4:	e13ffd17 	ldw	r4,-12(fp)
 101afb8:	1017c940 	call	1017c94 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 101afbc:	e0bffc17 	ldw	r2,-16(fp)
 101afc0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 101afc4:	e0bffc17 	ldw	r2,-16(fp)
 101afc8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 101afcc:	e0bffc17 	ldw	r2,-16(fp)
 101afd0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 101afd4:	008040b4 	movhi	r2,258
 101afd8:	108bb804 	addi	r2,r2,12000
 101afdc:	10800003 	ldbu	r2,0(r2)
 101afe0:	10803fcc 	andi	r2,r2,255
 101afe4:	10803fe0 	cmpeqi	r2,r2,255
 101afe8:	1000081e 	bne	r2,zero,101b00c <OSTaskDel+0x280>
        OSLockNesting++;
 101afec:	008040b4 	movhi	r2,258
 101aff0:	108bb804 	addi	r2,r2,12000
 101aff4:	10800003 	ldbu	r2,0(r2)
 101aff8:	10800044 	addi	r2,r2,1
 101affc:	1007883a 	mov	r3,r2
 101b000:	008040b4 	movhi	r2,258
 101b004:	108bb804 	addi	r2,r2,12000
 101b008:	10c00005 	stb	r3,0(r2)
 101b00c:	e0bffb17 	ldw	r2,-20(fp)
 101b010:	e0bff715 	stw	r2,-36(fp)
 101b014:	e0bff717 	ldw	r2,-36(fp)
 101b018:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 101b01c:	10151340 	call	1015134 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b020:	0005303a 	rdctl	r2,status
 101b024:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b028:	e0fff617 	ldw	r3,-40(fp)
 101b02c:	00bfff84 	movi	r2,-2
 101b030:	1884703a 	and	r2,r3,r2
 101b034:	1001703a 	wrctl	status,r2
  
  return context;
 101b038:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 101b03c:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 101b040:	008040b4 	movhi	r2,258
 101b044:	108bb804 	addi	r2,r2,12000
 101b048:	10800003 	ldbu	r2,0(r2)
 101b04c:	10803fcc 	andi	r2,r2,255
 101b050:	1005003a 	cmpeq	r2,r2,zero
 101b054:	1000081e 	bne	r2,zero,101b078 <OSTaskDel+0x2ec>
        OSLockNesting--;
 101b058:	008040b4 	movhi	r2,258
 101b05c:	108bb804 	addi	r2,r2,12000
 101b060:	10800003 	ldbu	r2,0(r2)
 101b064:	10bfffc4 	addi	r2,r2,-1
 101b068:	1007883a 	mov	r3,r2
 101b06c:	008040b4 	movhi	r2,258
 101b070:	108bb804 	addi	r2,r2,12000
 101b074:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 101b078:	e13ffc17 	ldw	r4,-16(fp)
 101b07c:	101e3840 	call	101e384 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 101b080:	008040b4 	movhi	r2,258
 101b084:	108bc044 	addi	r2,r2,12033
 101b088:	10800003 	ldbu	r2,0(r2)
 101b08c:	10bfffc4 	addi	r2,r2,-1
 101b090:	1007883a 	mov	r3,r2
 101b094:	008040b4 	movhi	r2,258
 101b098:	108bc044 	addi	r2,r2,12033
 101b09c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 101b0a0:	e0bffe03 	ldbu	r2,-8(fp)
 101b0a4:	00c040f4 	movhi	r3,259
 101b0a8:	18ea5104 	addi	r3,r3,-22204
 101b0ac:	1085883a 	add	r2,r2,r2
 101b0b0:	1085883a 	add	r2,r2,r2
 101b0b4:	10c5883a 	add	r2,r2,r3
 101b0b8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 101b0bc:	e0bffc17 	ldw	r2,-16(fp)
 101b0c0:	10800617 	ldw	r2,24(r2)
 101b0c4:	1004c03a 	cmpne	r2,r2,zero
 101b0c8:	1000091e 	bne	r2,zero,101b0f0 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 101b0cc:	e0bffc17 	ldw	r2,-16(fp)
 101b0d0:	10800517 	ldw	r2,20(r2)
 101b0d4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 101b0d8:	e0bffc17 	ldw	r2,-16(fp)
 101b0dc:	10c00517 	ldw	r3,20(r2)
 101b0e0:	008040b4 	movhi	r2,258
 101b0e4:	108bbb04 	addi	r2,r2,12012
 101b0e8:	10c00015 	stw	r3,0(r2)
 101b0ec:	00000a06 	br	101b118 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 101b0f0:	e0bffc17 	ldw	r2,-16(fp)
 101b0f4:	10c00617 	ldw	r3,24(r2)
 101b0f8:	e0bffc17 	ldw	r2,-16(fp)
 101b0fc:	10800517 	ldw	r2,20(r2)
 101b100:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 101b104:	e0bffc17 	ldw	r2,-16(fp)
 101b108:	10c00517 	ldw	r3,20(r2)
 101b10c:	e0bffc17 	ldw	r2,-16(fp)
 101b110:	10800617 	ldw	r2,24(r2)
 101b114:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 101b118:	008040b4 	movhi	r2,258
 101b11c:	108bbf04 	addi	r2,r2,12028
 101b120:	10c00017 	ldw	r3,0(r2)
 101b124:	e0bffc17 	ldw	r2,-16(fp)
 101b128:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 101b12c:	00c040b4 	movhi	r3,258
 101b130:	18cbbf04 	addi	r3,r3,12028
 101b134:	e0bffc17 	ldw	r2,-16(fp)
 101b138:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 101b13c:	e0fffc17 	ldw	r3,-16(fp)
 101b140:	00800fc4 	movi	r2,63
 101b144:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 101b148:	e0bffc17 	ldw	r2,-16(fp)
 101b14c:	10001345 	stb	zero,77(r2)
 101b150:	e0bffb17 	ldw	r2,-20(fp)
 101b154:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b158:	e0bff517 	ldw	r2,-44(fp)
 101b15c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 101b160:	008040b4 	movhi	r2,258
 101b164:	108bb844 	addi	r2,r2,12001
 101b168:	10800003 	ldbu	r2,0(r2)
 101b16c:	10803fcc 	andi	r2,r2,255
 101b170:	10800058 	cmpnei	r2,r2,1
 101b174:	1000011e 	bne	r2,zero,101b17c <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 101b178:	1015b900 	call	1015b90 <OS_Sched>
    }
    return (OS_ERR_NONE);
 101b17c:	e03fff15 	stw	zero,-4(fp)
 101b180:	e0bfff17 	ldw	r2,-4(fp)
}
 101b184:	e037883a 	mov	sp,fp
 101b188:	dfc00117 	ldw	ra,4(sp)
 101b18c:	df000017 	ldw	fp,0(sp)
 101b190:	dec00204 	addi	sp,sp,8
 101b194:	f800283a 	ret

0101b198 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 101b198:	defff404 	addi	sp,sp,-48
 101b19c:	df000b15 	stw	fp,44(sp)
 101b1a0:	df000b04 	addi	fp,sp,44
 101b1a4:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101b1a8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 101b1ac:	e0bffe03 	ldbu	r2,-8(fp)
 101b1b0:	10800518 	cmpnei	r2,r2,20
 101b1b4:	1000031e 	bne	r2,zero,101b1c4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 101b1b8:	00800f84 	movi	r2,62
 101b1bc:	e0bfff15 	stw	r2,-4(fp)
 101b1c0:	00004c06 	br	101b2f4 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 101b1c4:	e0bffe03 	ldbu	r2,-8(fp)
 101b1c8:	10800530 	cmpltui	r2,r2,20
 101b1cc:	1000061e 	bne	r2,zero,101b1e8 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 101b1d0:	e0bffe03 	ldbu	r2,-8(fp)
 101b1d4:	10803fe0 	cmpeqi	r2,r2,255
 101b1d8:	1000031e 	bne	r2,zero,101b1e8 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 101b1dc:	00800a84 	movi	r2,42
 101b1e0:	e0bfff15 	stw	r2,-4(fp)
 101b1e4:	00004306 	br	101b2f4 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 101b1e8:	e0bffe03 	ldbu	r2,-8(fp)
 101b1ec:	10803fd8 	cmpnei	r2,r2,255
 101b1f0:	1000141e 	bne	r2,zero,101b244 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b1f4:	0005303a 	rdctl	r2,status
 101b1f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b1fc:	e0fffa17 	ldw	r3,-24(fp)
 101b200:	00bfff84 	movi	r2,-2
 101b204:	1884703a 	and	r2,r3,r2
 101b208:	1001703a 	wrctl	status,r2
  
  return context;
 101b20c:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 101b210:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 101b214:	008040b4 	movhi	r2,258
 101b218:	108bc704 	addi	r2,r2,12060
 101b21c:	10800017 	ldw	r2,0(r2)
 101b220:	10800dc3 	ldbu	r2,55(r2)
 101b224:	e0bffd05 	stb	r2,-12(fp)
 101b228:	e0bffb17 	ldw	r2,-20(fp)
 101b22c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b230:	e0bff917 	ldw	r2,-28(fp)
 101b234:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 101b238:	e0bffd03 	ldbu	r2,-12(fp)
 101b23c:	e0bfff15 	stw	r2,-4(fp)
 101b240:	00002c06 	br	101b2f4 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b244:	0005303a 	rdctl	r2,status
 101b248:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b24c:	e0fff817 	ldw	r3,-32(fp)
 101b250:	00bfff84 	movi	r2,-2
 101b254:	1884703a 	and	r2,r3,r2
 101b258:	1001703a 	wrctl	status,r2
  
  return context;
 101b25c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 101b260:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 101b264:	e0bffe03 	ldbu	r2,-8(fp)
 101b268:	00c040f4 	movhi	r3,259
 101b26c:	18ea5104 	addi	r3,r3,-22204
 101b270:	1085883a 	add	r2,r2,r2
 101b274:	1085883a 	add	r2,r2,r2
 101b278:	10c5883a 	add	r2,r2,r3
 101b27c:	10800017 	ldw	r2,0(r2)
 101b280:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 101b284:	e0bffc17 	ldw	r2,-16(fp)
 101b288:	1004c03a 	cmpne	r2,r2,zero
 101b28c:	1000071e 	bne	r2,zero,101b2ac <OSTaskDelReq+0x114>
 101b290:	e0bffb17 	ldw	r2,-20(fp)
 101b294:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b298:	e0bff717 	ldw	r2,-36(fp)
 101b29c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 101b2a0:	008010c4 	movi	r2,67
 101b2a4:	e0bfff15 	stw	r2,-4(fp)
 101b2a8:	00001206 	br	101b2f4 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 101b2ac:	e0bffc17 	ldw	r2,-16(fp)
 101b2b0:	10800058 	cmpnei	r2,r2,1
 101b2b4:	1000071e 	bne	r2,zero,101b2d4 <OSTaskDelReq+0x13c>
 101b2b8:	e0bffb17 	ldw	r2,-20(fp)
 101b2bc:	e0bff615 	stw	r2,-40(fp)
 101b2c0:	e0bff617 	ldw	r2,-40(fp)
 101b2c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 101b2c8:	00800f44 	movi	r2,61
 101b2cc:	e0bfff15 	stw	r2,-4(fp)
 101b2d0:	00000806 	br	101b2f4 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 101b2d4:	e0fffc17 	ldw	r3,-16(fp)
 101b2d8:	00800fc4 	movi	r2,63
 101b2dc:	18800dc5 	stb	r2,55(r3)
 101b2e0:	e0bffb17 	ldw	r2,-20(fp)
 101b2e4:	e0bff515 	stw	r2,-44(fp)
 101b2e8:	e0bff517 	ldw	r2,-44(fp)
 101b2ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101b2f0:	e03fff15 	stw	zero,-4(fp)
 101b2f4:	e0bfff17 	ldw	r2,-4(fp)
}
 101b2f8:	e037883a 	mov	sp,fp
 101b2fc:	df000017 	ldw	fp,0(sp)
 101b300:	dec00104 	addi	sp,sp,4
 101b304:	f800283a 	ret

0101b308 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 101b308:	defff304 	addi	sp,sp,-52
 101b30c:	dfc00c15 	stw	ra,48(sp)
 101b310:	df000b15 	stw	fp,44(sp)
 101b314:	df000b04 	addi	fp,sp,44
 101b318:	e17ffd15 	stw	r5,-12(fp)
 101b31c:	e1bffe15 	stw	r6,-8(fp)
 101b320:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 101b324:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 101b328:	e0bffe17 	ldw	r2,-8(fp)
 101b32c:	1004c03a 	cmpne	r2,r2,zero
 101b330:	1000021e 	bne	r2,zero,101b33c <OSTaskNameGet+0x34>
        return (0);
 101b334:	e03fff15 	stw	zero,-4(fp)
 101b338:	00005b06 	br	101b4a8 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 101b33c:	e0bffc03 	ldbu	r2,-16(fp)
 101b340:	10800570 	cmpltui	r2,r2,21
 101b344:	1000081e 	bne	r2,zero,101b368 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 101b348:	e0bffc03 	ldbu	r2,-16(fp)
 101b34c:	10803fe0 	cmpeqi	r2,r2,255
 101b350:	1000051e 	bne	r2,zero,101b368 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 101b354:	e0fffe17 	ldw	r3,-8(fp)
 101b358:	00800a84 	movi	r2,42
 101b35c:	18800005 	stb	r2,0(r3)
            return (0);
 101b360:	e03fff15 	stw	zero,-4(fp)
 101b364:	00005006 	br	101b4a8 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 101b368:	e0bffd17 	ldw	r2,-12(fp)
 101b36c:	1004c03a 	cmpne	r2,r2,zero
 101b370:	1000051e 	bne	r2,zero,101b388 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 101b374:	e0fffe17 	ldw	r3,-8(fp)
 101b378:	00800304 	movi	r2,12
 101b37c:	18800005 	stb	r2,0(r3)
        return (0);
 101b380:	e03fff15 	stw	zero,-4(fp)
 101b384:	00004806 	br	101b4a8 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 101b388:	008040b4 	movhi	r2,258
 101b38c:	108bc604 	addi	r2,r2,12056
 101b390:	10800003 	ldbu	r2,0(r2)
 101b394:	10803fcc 	andi	r2,r2,255
 101b398:	1005003a 	cmpeq	r2,r2,zero
 101b39c:	1000051e 	bne	r2,zero,101b3b4 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 101b3a0:	e0fffe17 	ldw	r3,-8(fp)
 101b3a4:	00800444 	movi	r2,17
 101b3a8:	18800005 	stb	r2,0(r3)
        return (0);
 101b3ac:	e03fff15 	stw	zero,-4(fp)
 101b3b0:	00003d06 	br	101b4a8 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b3b4:	0005303a 	rdctl	r2,status
 101b3b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b3bc:	e0fff817 	ldw	r3,-32(fp)
 101b3c0:	00bfff84 	movi	r2,-2
 101b3c4:	1884703a 	and	r2,r3,r2
 101b3c8:	1001703a 	wrctl	status,r2
  
  return context;
 101b3cc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 101b3d0:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 101b3d4:	e0bffc03 	ldbu	r2,-16(fp)
 101b3d8:	10803fd8 	cmpnei	r2,r2,255
 101b3dc:	1000051e 	bne	r2,zero,101b3f4 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 101b3e0:	008040b4 	movhi	r2,258
 101b3e4:	108bc704 	addi	r2,r2,12060
 101b3e8:	10800017 	ldw	r2,0(r2)
 101b3ec:	10800c83 	ldbu	r2,50(r2)
 101b3f0:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101b3f4:	e0bffc03 	ldbu	r2,-16(fp)
 101b3f8:	00c040f4 	movhi	r3,259
 101b3fc:	18ea5104 	addi	r3,r3,-22204
 101b400:	1085883a 	add	r2,r2,r2
 101b404:	1085883a 	add	r2,r2,r2
 101b408:	10c5883a 	add	r2,r2,r3
 101b40c:	10800017 	ldw	r2,0(r2)
 101b410:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 101b414:	e0bffb17 	ldw	r2,-20(fp)
 101b418:	1004c03a 	cmpne	r2,r2,zero
 101b41c:	1000091e 	bne	r2,zero,101b444 <OSTaskNameGet+0x13c>
 101b420:	e0bff917 	ldw	r2,-28(fp)
 101b424:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b428:	e0bff717 	ldw	r2,-36(fp)
 101b42c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 101b430:	e0fffe17 	ldw	r3,-8(fp)
 101b434:	008010c4 	movi	r2,67
 101b438:	18800005 	stb	r2,0(r3)
        return (0);
 101b43c:	e03fff15 	stw	zero,-4(fp)
 101b440:	00001906 	br	101b4a8 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 101b444:	e0bffb17 	ldw	r2,-20(fp)
 101b448:	10800058 	cmpnei	r2,r2,1
 101b44c:	1000091e 	bne	r2,zero,101b474 <OSTaskNameGet+0x16c>
 101b450:	e0bff917 	ldw	r2,-28(fp)
 101b454:	e0bff615 	stw	r2,-40(fp)
 101b458:	e0bff617 	ldw	r2,-40(fp)
 101b45c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 101b460:	e0fffe17 	ldw	r3,-8(fp)
 101b464:	008010c4 	movi	r2,67
 101b468:	18800005 	stb	r2,0(r3)
        return (0);
 101b46c:	e03fff15 	stw	zero,-4(fp)
 101b470:	00000d06 	br	101b4a8 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 101b474:	e0bffb17 	ldw	r2,-20(fp)
 101b478:	11401304 	addi	r5,r2,76
 101b47c:	e13ffd17 	ldw	r4,-12(fp)
 101b480:	1015cd40 	call	1015cd4 <OS_StrCopy>
 101b484:	e0bffa05 	stb	r2,-24(fp)
 101b488:	e0bff917 	ldw	r2,-28(fp)
 101b48c:	e0bff515 	stw	r2,-44(fp)
 101b490:	e0bff517 	ldw	r2,-44(fp)
 101b494:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101b498:	e0bffe17 	ldw	r2,-8(fp)
 101b49c:	10000005 	stb	zero,0(r2)
    return (len);
 101b4a0:	e0bffa03 	ldbu	r2,-24(fp)
 101b4a4:	e0bfff15 	stw	r2,-4(fp)
 101b4a8:	e0bfff17 	ldw	r2,-4(fp)
}
 101b4ac:	e037883a 	mov	sp,fp
 101b4b0:	dfc00117 	ldw	ra,4(sp)
 101b4b4:	df000017 	ldw	fp,0(sp)
 101b4b8:	dec00204 	addi	sp,sp,8
 101b4bc:	f800283a 	ret

0101b4c0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 101b4c0:	defff304 	addi	sp,sp,-52
 101b4c4:	dfc00c15 	stw	ra,48(sp)
 101b4c8:	df000b15 	stw	fp,44(sp)
 101b4cc:	df000b04 	addi	fp,sp,44
 101b4d0:	e17ffe15 	stw	r5,-8(fp)
 101b4d4:	e1bfff15 	stw	r6,-4(fp)
 101b4d8:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 101b4dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 101b4e0:	e0bfff17 	ldw	r2,-4(fp)
 101b4e4:	1005003a 	cmpeq	r2,r2,zero
 101b4e8:	1000611e 	bne	r2,zero,101b670 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 101b4ec:	e0bffd03 	ldbu	r2,-12(fp)
 101b4f0:	10800570 	cmpltui	r2,r2,21
 101b4f4:	1000071e 	bne	r2,zero,101b514 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 101b4f8:	e0bffd03 	ldbu	r2,-12(fp)
 101b4fc:	10803fe0 	cmpeqi	r2,r2,255
 101b500:	1000041e 	bne	r2,zero,101b514 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 101b504:	e0ffff17 	ldw	r3,-4(fp)
 101b508:	00800a84 	movi	r2,42
 101b50c:	18800005 	stb	r2,0(r3)
            return;
 101b510:	00005706 	br	101b670 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 101b514:	e0bffe17 	ldw	r2,-8(fp)
 101b518:	1004c03a 	cmpne	r2,r2,zero
 101b51c:	1000041e 	bne	r2,zero,101b530 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 101b520:	e0ffff17 	ldw	r3,-4(fp)
 101b524:	00800304 	movi	r2,12
 101b528:	18800005 	stb	r2,0(r3)
        return;
 101b52c:	00005006 	br	101b670 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 101b530:	008040b4 	movhi	r2,258
 101b534:	108bc604 	addi	r2,r2,12056
 101b538:	10800003 	ldbu	r2,0(r2)
 101b53c:	10803fcc 	andi	r2,r2,255
 101b540:	1005003a 	cmpeq	r2,r2,zero
 101b544:	1000041e 	bne	r2,zero,101b558 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 101b548:	e0ffff17 	ldw	r3,-4(fp)
 101b54c:	00800484 	movi	r2,18
 101b550:	18800005 	stb	r2,0(r3)
        return;
 101b554:	00004606 	br	101b670 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b558:	0005303a 	rdctl	r2,status
 101b55c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b560:	e0fff917 	ldw	r3,-28(fp)
 101b564:	00bfff84 	movi	r2,-2
 101b568:	1884703a 	and	r2,r3,r2
 101b56c:	1001703a 	wrctl	status,r2
  
  return context;
 101b570:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101b574:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 101b578:	e0bffd03 	ldbu	r2,-12(fp)
 101b57c:	10803fd8 	cmpnei	r2,r2,255
 101b580:	1000051e 	bne	r2,zero,101b598 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 101b584:	008040b4 	movhi	r2,258
 101b588:	108bc704 	addi	r2,r2,12060
 101b58c:	10800017 	ldw	r2,0(r2)
 101b590:	10800c83 	ldbu	r2,50(r2)
 101b594:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101b598:	e0bffd03 	ldbu	r2,-12(fp)
 101b59c:	00c040f4 	movhi	r3,259
 101b5a0:	18ea5104 	addi	r3,r3,-22204
 101b5a4:	1085883a 	add	r2,r2,r2
 101b5a8:	1085883a 	add	r2,r2,r2
 101b5ac:	10c5883a 	add	r2,r2,r3
 101b5b0:	10800017 	ldw	r2,0(r2)
 101b5b4:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 101b5b8:	e0bffb17 	ldw	r2,-20(fp)
 101b5bc:	1004c03a 	cmpne	r2,r2,zero
 101b5c0:	1000081e 	bne	r2,zero,101b5e4 <OSTaskNameSet+0x124>
 101b5c4:	e0bffa17 	ldw	r2,-24(fp)
 101b5c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b5cc:	e0bff817 	ldw	r2,-32(fp)
 101b5d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 101b5d4:	e0ffff17 	ldw	r3,-4(fp)
 101b5d8:	008010c4 	movi	r2,67
 101b5dc:	18800005 	stb	r2,0(r3)
        return;
 101b5e0:	00002306 	br	101b670 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 101b5e4:	e0bffb17 	ldw	r2,-20(fp)
 101b5e8:	10800058 	cmpnei	r2,r2,1
 101b5ec:	1000081e 	bne	r2,zero,101b610 <OSTaskNameSet+0x150>
 101b5f0:	e0bffa17 	ldw	r2,-24(fp)
 101b5f4:	e0bff715 	stw	r2,-36(fp)
 101b5f8:	e0bff717 	ldw	r2,-36(fp)
 101b5fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 101b600:	e0ffff17 	ldw	r3,-4(fp)
 101b604:	008010c4 	movi	r2,67
 101b608:	18800005 	stb	r2,0(r3)
        return;
 101b60c:	00001806 	br	101b670 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 101b610:	e13ffe17 	ldw	r4,-8(fp)
 101b614:	1015d540 	call	1015d54 <OS_StrLen>
 101b618:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 101b61c:	e0bffc03 	ldbu	r2,-16(fp)
 101b620:	10800830 	cmpltui	r2,r2,32
 101b624:	1000081e 	bne	r2,zero,101b648 <OSTaskNameSet+0x188>
 101b628:	e0bffa17 	ldw	r2,-24(fp)
 101b62c:	e0bff615 	stw	r2,-40(fp)
 101b630:	e0bff617 	ldw	r2,-40(fp)
 101b634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 101b638:	e0ffff17 	ldw	r3,-4(fp)
 101b63c:	00801044 	movi	r2,65
 101b640:	18800005 	stb	r2,0(r3)
        return;
 101b644:	00000a06 	br	101b670 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 101b648:	e0bffb17 	ldw	r2,-20(fp)
 101b64c:	11001304 	addi	r4,r2,76
 101b650:	e17ffe17 	ldw	r5,-8(fp)
 101b654:	1015cd40 	call	1015cd4 <OS_StrCopy>
 101b658:	e0bffa17 	ldw	r2,-24(fp)
 101b65c:	e0bff515 	stw	r2,-44(fp)
 101b660:	e0bff517 	ldw	r2,-44(fp)
 101b664:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101b668:	e0bfff17 	ldw	r2,-4(fp)
 101b66c:	10000005 	stb	zero,0(r2)
}
 101b670:	e037883a 	mov	sp,fp
 101b674:	dfc00117 	ldw	ra,4(sp)
 101b678:	df000017 	ldw	fp,0(sp)
 101b67c:	dec00204 	addi	sp,sp,8
 101b680:	f800283a 	ret

0101b684 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 101b684:	defff304 	addi	sp,sp,-52
 101b688:	dfc00c15 	stw	ra,48(sp)
 101b68c:	df000b15 	stw	fp,44(sp)
 101b690:	df000b04 	addi	fp,sp,44
 101b694:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 101b698:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 101b69c:	e0bffe03 	ldbu	r2,-8(fp)
 101b6a0:	10800530 	cmpltui	r2,r2,20
 101b6a4:	1000031e 	bne	r2,zero,101b6b4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 101b6a8:	00800a84 	movi	r2,42
 101b6ac:	e0bfff15 	stw	r2,-4(fp)
 101b6b0:	00007406 	br	101b884 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b6b4:	0005303a 	rdctl	r2,status
 101b6b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b6bc:	e0fffb17 	ldw	r3,-20(fp)
 101b6c0:	00bfff84 	movi	r2,-2
 101b6c4:	1884703a 	and	r2,r3,r2
 101b6c8:	1001703a 	wrctl	status,r2
  
  return context;
 101b6cc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101b6d0:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 101b6d4:	e0bffe03 	ldbu	r2,-8(fp)
 101b6d8:	00c040f4 	movhi	r3,259
 101b6dc:	18ea5104 	addi	r3,r3,-22204
 101b6e0:	1085883a 	add	r2,r2,r2
 101b6e4:	1085883a 	add	r2,r2,r2
 101b6e8:	10c5883a 	add	r2,r2,r3
 101b6ec:	10800017 	ldw	r2,0(r2)
 101b6f0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 101b6f4:	e0bffd17 	ldw	r2,-12(fp)
 101b6f8:	1004c03a 	cmpne	r2,r2,zero
 101b6fc:	1000071e 	bne	r2,zero,101b71c <OSTaskResume+0x98>
 101b700:	e0bffc17 	ldw	r2,-16(fp)
 101b704:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b708:	e0bffa17 	ldw	r2,-24(fp)
 101b70c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 101b710:	00801184 	movi	r2,70
 101b714:	e0bfff15 	stw	r2,-4(fp)
 101b718:	00005a06 	br	101b884 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 101b71c:	e0bffd17 	ldw	r2,-12(fp)
 101b720:	10800058 	cmpnei	r2,r2,1
 101b724:	1000071e 	bne	r2,zero,101b744 <OSTaskResume+0xc0>
 101b728:	e0bffc17 	ldw	r2,-16(fp)
 101b72c:	e0bff915 	stw	r2,-28(fp)
 101b730:	e0bff917 	ldw	r2,-28(fp)
 101b734:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101b738:	008010c4 	movi	r2,67
 101b73c:	e0bfff15 	stw	r2,-4(fp)
 101b740:	00005006 	br	101b884 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 101b744:	e0bffd17 	ldw	r2,-12(fp)
 101b748:	10800c03 	ldbu	r2,48(r2)
 101b74c:	10803fcc 	andi	r2,r2,255
 101b750:	1080020c 	andi	r2,r2,8
 101b754:	1005003a 	cmpeq	r2,r2,zero
 101b758:	1000441e 	bne	r2,zero,101b86c <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 101b75c:	e0bffd17 	ldw	r2,-12(fp)
 101b760:	10c00c03 	ldbu	r3,48(r2)
 101b764:	00bffdc4 	movi	r2,-9
 101b768:	1884703a 	and	r2,r3,r2
 101b76c:	1007883a 	mov	r3,r2
 101b770:	e0bffd17 	ldw	r2,-12(fp)
 101b774:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 101b778:	e0bffd17 	ldw	r2,-12(fp)
 101b77c:	10800c03 	ldbu	r2,48(r2)
 101b780:	10803fcc 	andi	r2,r2,255
 101b784:	1004c03a 	cmpne	r2,r2,zero
 101b788:	1000321e 	bne	r2,zero,101b854 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 101b78c:	e0bffd17 	ldw	r2,-12(fp)
 101b790:	10800b8b 	ldhu	r2,46(r2)
 101b794:	10bfffcc 	andi	r2,r2,65535
 101b798:	1004c03a 	cmpne	r2,r2,zero
 101b79c:	1000281e 	bne	r2,zero,101b840 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 101b7a0:	e0bffd17 	ldw	r2,-12(fp)
 101b7a4:	10c00d83 	ldbu	r3,54(r2)
 101b7a8:	008040b4 	movhi	r2,258
 101b7ac:	108bc404 	addi	r2,r2,12048
 101b7b0:	10800003 	ldbu	r2,0(r2)
 101b7b4:	1884b03a 	or	r2,r3,r2
 101b7b8:	1007883a 	mov	r3,r2
 101b7bc:	008040b4 	movhi	r2,258
 101b7c0:	108bc404 	addi	r2,r2,12048
 101b7c4:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 101b7c8:	e0bffd17 	ldw	r2,-12(fp)
 101b7cc:	10800d03 	ldbu	r2,52(r2)
 101b7d0:	11003fcc 	andi	r4,r2,255
 101b7d4:	e0bffd17 	ldw	r2,-12(fp)
 101b7d8:	10800d03 	ldbu	r2,52(r2)
 101b7dc:	10c03fcc 	andi	r3,r2,255
 101b7e0:	008040b4 	movhi	r2,258
 101b7e4:	108bc444 	addi	r2,r2,12049
 101b7e8:	10c5883a 	add	r2,r2,r3
 101b7ec:	10c00003 	ldbu	r3,0(r2)
 101b7f0:	e0bffd17 	ldw	r2,-12(fp)
 101b7f4:	10800d43 	ldbu	r2,53(r2)
 101b7f8:	1884b03a 	or	r2,r3,r2
 101b7fc:	1007883a 	mov	r3,r2
 101b800:	008040b4 	movhi	r2,258
 101b804:	108bc444 	addi	r2,r2,12049
 101b808:	1105883a 	add	r2,r2,r4
 101b80c:	10c00005 	stb	r3,0(r2)
 101b810:	e0bffc17 	ldw	r2,-16(fp)
 101b814:	e0bff815 	stw	r2,-32(fp)
 101b818:	e0bff817 	ldw	r2,-32(fp)
 101b81c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 101b820:	008040b4 	movhi	r2,258
 101b824:	108bb844 	addi	r2,r2,12001
 101b828:	10800003 	ldbu	r2,0(r2)
 101b82c:	10803fcc 	andi	r2,r2,255
 101b830:	10800058 	cmpnei	r2,r2,1
 101b834:	10000b1e 	bne	r2,zero,101b864 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 101b838:	1015b900 	call	1015b90 <OS_Sched>
 101b83c:	00000906 	br	101b864 <OSTaskResume+0x1e0>
 101b840:	e0bffc17 	ldw	r2,-16(fp)
 101b844:	e0bff715 	stw	r2,-36(fp)
 101b848:	e0bff717 	ldw	r2,-36(fp)
 101b84c:	1001703a 	wrctl	status,r2
 101b850:	00000406 	br	101b864 <OSTaskResume+0x1e0>
 101b854:	e0bffc17 	ldw	r2,-16(fp)
 101b858:	e0bff615 	stw	r2,-40(fp)
 101b85c:	e0bff617 	ldw	r2,-40(fp)
 101b860:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 101b864:	e03fff15 	stw	zero,-4(fp)
 101b868:	00000606 	br	101b884 <OSTaskResume+0x200>
 101b86c:	e0bffc17 	ldw	r2,-16(fp)
 101b870:	e0bff515 	stw	r2,-44(fp)
 101b874:	e0bff517 	ldw	r2,-44(fp)
 101b878:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 101b87c:	00801104 	movi	r2,68
 101b880:	e0bfff15 	stw	r2,-4(fp)
 101b884:	e0bfff17 	ldw	r2,-4(fp)
}
 101b888:	e037883a 	mov	sp,fp
 101b88c:	dfc00117 	ldw	ra,4(sp)
 101b890:	df000017 	ldw	fp,0(sp)
 101b894:	dec00204 	addi	sp,sp,8
 101b898:	f800283a 	ret

0101b89c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 101b89c:	defff204 	addi	sp,sp,-56
 101b8a0:	df000d15 	stw	fp,52(sp)
 101b8a4:	df000d04 	addi	fp,sp,52
 101b8a8:	e17ffe15 	stw	r5,-8(fp)
 101b8ac:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 101b8b0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 101b8b4:	e0bffd03 	ldbu	r2,-12(fp)
 101b8b8:	10800570 	cmpltui	r2,r2,21
 101b8bc:	1000061e 	bne	r2,zero,101b8d8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 101b8c0:	e0bffd03 	ldbu	r2,-12(fp)
 101b8c4:	10803fe0 	cmpeqi	r2,r2,255
 101b8c8:	1000031e 	bne	r2,zero,101b8d8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 101b8cc:	00800a84 	movi	r2,42
 101b8d0:	e0bfff15 	stw	r2,-4(fp)
 101b8d4:	00006b06 	br	101ba84 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 101b8d8:	e0bffe17 	ldw	r2,-8(fp)
 101b8dc:	1004c03a 	cmpne	r2,r2,zero
 101b8e0:	1000031e 	bne	r2,zero,101b8f0 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 101b8e4:	00800244 	movi	r2,9
 101b8e8:	e0bfff15 	stw	r2,-4(fp)
 101b8ec:	00006506 	br	101ba84 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 101b8f0:	e0bffe17 	ldw	r2,-8(fp)
 101b8f4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 101b8f8:	e0bffe17 	ldw	r2,-8(fp)
 101b8fc:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b900:	0005303a 	rdctl	r2,status
 101b904:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b908:	e0fff717 	ldw	r3,-36(fp)
 101b90c:	00bfff84 	movi	r2,-2
 101b910:	1884703a 	and	r2,r3,r2
 101b914:	1001703a 	wrctl	status,r2
  
  return context;
 101b918:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 101b91c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 101b920:	e0bffd03 	ldbu	r2,-12(fp)
 101b924:	10803fd8 	cmpnei	r2,r2,255
 101b928:	1000051e 	bne	r2,zero,101b940 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 101b92c:	008040b4 	movhi	r2,258
 101b930:	108bc704 	addi	r2,r2,12060
 101b934:	10800017 	ldw	r2,0(r2)
 101b938:	10800c83 	ldbu	r2,50(r2)
 101b93c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101b940:	e0bffd03 	ldbu	r2,-12(fp)
 101b944:	00c040f4 	movhi	r3,259
 101b948:	18ea5104 	addi	r3,r3,-22204
 101b94c:	1085883a 	add	r2,r2,r2
 101b950:	1085883a 	add	r2,r2,r2
 101b954:	10c5883a 	add	r2,r2,r3
 101b958:	10800017 	ldw	r2,0(r2)
 101b95c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 101b960:	e0bffc17 	ldw	r2,-16(fp)
 101b964:	1004c03a 	cmpne	r2,r2,zero
 101b968:	1000071e 	bne	r2,zero,101b988 <OSTaskStkChk+0xec>
 101b96c:	e0bff817 	ldw	r2,-32(fp)
 101b970:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b974:	e0bff617 	ldw	r2,-40(fp)
 101b978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101b97c:	008010c4 	movi	r2,67
 101b980:	e0bfff15 	stw	r2,-4(fp)
 101b984:	00003f06 	br	101ba84 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 101b988:	e0bffc17 	ldw	r2,-16(fp)
 101b98c:	10800058 	cmpnei	r2,r2,1
 101b990:	1000071e 	bne	r2,zero,101b9b0 <OSTaskStkChk+0x114>
 101b994:	e0bff817 	ldw	r2,-32(fp)
 101b998:	e0bff515 	stw	r2,-44(fp)
 101b99c:	e0bff517 	ldw	r2,-44(fp)
 101b9a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101b9a4:	008010c4 	movi	r2,67
 101b9a8:	e0bfff15 	stw	r2,-4(fp)
 101b9ac:	00003506 	br	101ba84 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 101b9b0:	e0bffc17 	ldw	r2,-16(fp)
 101b9b4:	1080040b 	ldhu	r2,16(r2)
 101b9b8:	10bfffcc 	andi	r2,r2,65535
 101b9bc:	1080004c 	andi	r2,r2,1
 101b9c0:	1004c03a 	cmpne	r2,r2,zero
 101b9c4:	1000071e 	bne	r2,zero,101b9e4 <OSTaskStkChk+0x148>
 101b9c8:	e0bff817 	ldw	r2,-32(fp)
 101b9cc:	e0bff415 	stw	r2,-48(fp)
 101b9d0:	e0bff417 	ldw	r2,-48(fp)
 101b9d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 101b9d8:	00801144 	movi	r2,69
 101b9dc:	e0bfff15 	stw	r2,-4(fp)
 101b9e0:	00002806 	br	101ba84 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 101b9e4:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 101b9e8:	e0bffc17 	ldw	r2,-16(fp)
 101b9ec:	10800317 	ldw	r2,12(r2)
 101b9f0:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 101b9f4:	e0bffc17 	ldw	r2,-16(fp)
 101b9f8:	10800217 	ldw	r2,8(r2)
 101b9fc:	e0bffb15 	stw	r2,-20(fp)
 101ba00:	e0bff817 	ldw	r2,-32(fp)
 101ba04:	e0bff315 	stw	r2,-52(fp)
 101ba08:	e0bff317 	ldw	r2,-52(fp)
 101ba0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 101ba10:	00000306 	br	101ba20 <OSTaskStkChk+0x184>
        nfree++;
 101ba14:	e0bffa17 	ldw	r2,-24(fp)
 101ba18:	10800044 	addi	r2,r2,1
 101ba1c:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 101ba20:	e0bffb17 	ldw	r2,-20(fp)
 101ba24:	10800017 	ldw	r2,0(r2)
 101ba28:	1005003a 	cmpeq	r2,r2,zero
 101ba2c:	1007883a 	mov	r3,r2
 101ba30:	e0bffb17 	ldw	r2,-20(fp)
 101ba34:	10800104 	addi	r2,r2,4
 101ba38:	e0bffb15 	stw	r2,-20(fp)
 101ba3c:	18803fcc 	andi	r2,r3,255
 101ba40:	1004c03a 	cmpne	r2,r2,zero
 101ba44:	103ff31e 	bne	r2,zero,101ba14 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 101ba48:	e0bffa17 	ldw	r2,-24(fp)
 101ba4c:	1085883a 	add	r2,r2,r2
 101ba50:	1085883a 	add	r2,r2,r2
 101ba54:	1007883a 	mov	r3,r2
 101ba58:	e0bffe17 	ldw	r2,-8(fp)
 101ba5c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 101ba60:	e0fff917 	ldw	r3,-28(fp)
 101ba64:	e0bffa17 	ldw	r2,-24(fp)
 101ba68:	1885c83a 	sub	r2,r3,r2
 101ba6c:	1085883a 	add	r2,r2,r2
 101ba70:	1085883a 	add	r2,r2,r2
 101ba74:	1007883a 	mov	r3,r2
 101ba78:	e0bffe17 	ldw	r2,-8(fp)
 101ba7c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 101ba80:	e03fff15 	stw	zero,-4(fp)
 101ba84:	e0bfff17 	ldw	r2,-4(fp)
}
 101ba88:	e037883a 	mov	sp,fp
 101ba8c:	df000017 	ldw	fp,0(sp)
 101ba90:	dec00104 	addi	sp,sp,4
 101ba94:	f800283a 	ret

0101ba98 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 101ba98:	defff404 	addi	sp,sp,-48
 101ba9c:	dfc00b15 	stw	ra,44(sp)
 101baa0:	df000a15 	stw	fp,40(sp)
 101baa4:	df000a04 	addi	fp,sp,40
 101baa8:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101baac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 101bab0:	e0bffe03 	ldbu	r2,-8(fp)
 101bab4:	10800518 	cmpnei	r2,r2,20
 101bab8:	1000031e 	bne	r2,zero,101bac8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 101babc:	008011c4 	movi	r2,71
 101bac0:	e0bfff15 	stw	r2,-4(fp)
 101bac4:	00007906 	br	101bcac <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 101bac8:	e0bffe03 	ldbu	r2,-8(fp)
 101bacc:	10800530 	cmpltui	r2,r2,20
 101bad0:	1000061e 	bne	r2,zero,101baec <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 101bad4:	e0bffe03 	ldbu	r2,-8(fp)
 101bad8:	10803fe0 	cmpeqi	r2,r2,255
 101badc:	1000031e 	bne	r2,zero,101baec <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 101bae0:	00800a84 	movi	r2,42
 101bae4:	e0bfff15 	stw	r2,-4(fp)
 101bae8:	00007006 	br	101bcac <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101baec:	0005303a 	rdctl	r2,status
 101baf0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101baf4:	e0fff917 	ldw	r3,-28(fp)
 101baf8:	00bfff84 	movi	r2,-2
 101bafc:	1884703a 	and	r2,r3,r2
 101bb00:	1001703a 	wrctl	status,r2
  
  return context;
 101bb04:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 101bb08:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 101bb0c:	e0bffe03 	ldbu	r2,-8(fp)
 101bb10:	10803fd8 	cmpnei	r2,r2,255
 101bb14:	1000081e 	bne	r2,zero,101bb38 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 101bb18:	008040b4 	movhi	r2,258
 101bb1c:	108bc704 	addi	r2,r2,12060
 101bb20:	10800017 	ldw	r2,0(r2)
 101bb24:	10800c83 	ldbu	r2,50(r2)
 101bb28:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 101bb2c:	00800044 	movi	r2,1
 101bb30:	e0bffd05 	stb	r2,-12(fp)
 101bb34:	00000b06 	br	101bb64 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 101bb38:	008040b4 	movhi	r2,258
 101bb3c:	108bc704 	addi	r2,r2,12060
 101bb40:	10800017 	ldw	r2,0(r2)
 101bb44:	10800c83 	ldbu	r2,50(r2)
 101bb48:	10c03fcc 	andi	r3,r2,255
 101bb4c:	e0bffe03 	ldbu	r2,-8(fp)
 101bb50:	1880031e 	bne	r3,r2,101bb60 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 101bb54:	00800044 	movi	r2,1
 101bb58:	e0bffd05 	stb	r2,-12(fp)
 101bb5c:	00000106 	br	101bb64 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 101bb60:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101bb64:	e0bffe03 	ldbu	r2,-8(fp)
 101bb68:	00c040f4 	movhi	r3,259
 101bb6c:	18ea5104 	addi	r3,r3,-22204
 101bb70:	1085883a 	add	r2,r2,r2
 101bb74:	1085883a 	add	r2,r2,r2
 101bb78:	10c5883a 	add	r2,r2,r3
 101bb7c:	10800017 	ldw	r2,0(r2)
 101bb80:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 101bb84:	e0bffc17 	ldw	r2,-16(fp)
 101bb88:	1004c03a 	cmpne	r2,r2,zero
 101bb8c:	1000071e 	bne	r2,zero,101bbac <OSTaskSuspend+0x114>
 101bb90:	e0bffa17 	ldw	r2,-24(fp)
 101bb94:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101bb98:	e0bff817 	ldw	r2,-32(fp)
 101bb9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 101bba0:	00801204 	movi	r2,72
 101bba4:	e0bfff15 	stw	r2,-4(fp)
 101bba8:	00004006 	br	101bcac <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 101bbac:	e0bffc17 	ldw	r2,-16(fp)
 101bbb0:	10800058 	cmpnei	r2,r2,1
 101bbb4:	1000071e 	bne	r2,zero,101bbd4 <OSTaskSuspend+0x13c>
 101bbb8:	e0bffa17 	ldw	r2,-24(fp)
 101bbbc:	e0bff715 	stw	r2,-36(fp)
 101bbc0:	e0bff717 	ldw	r2,-36(fp)
 101bbc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101bbc8:	008010c4 	movi	r2,67
 101bbcc:	e0bfff15 	stw	r2,-4(fp)
 101bbd0:	00003606 	br	101bcac <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 101bbd4:	e0bffc17 	ldw	r2,-16(fp)
 101bbd8:	10800d03 	ldbu	r2,52(r2)
 101bbdc:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 101bbe0:	e13ffb03 	ldbu	r4,-20(fp)
 101bbe4:	e0fffb03 	ldbu	r3,-20(fp)
 101bbe8:	008040b4 	movhi	r2,258
 101bbec:	108bc444 	addi	r2,r2,12049
 101bbf0:	10c5883a 	add	r2,r2,r3
 101bbf4:	10800003 	ldbu	r2,0(r2)
 101bbf8:	1007883a 	mov	r3,r2
 101bbfc:	e0bffc17 	ldw	r2,-16(fp)
 101bc00:	10800d43 	ldbu	r2,53(r2)
 101bc04:	0084303a 	nor	r2,zero,r2
 101bc08:	1884703a 	and	r2,r3,r2
 101bc0c:	1007883a 	mov	r3,r2
 101bc10:	008040b4 	movhi	r2,258
 101bc14:	108bc444 	addi	r2,r2,12049
 101bc18:	1105883a 	add	r2,r2,r4
 101bc1c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 101bc20:	e0fffb03 	ldbu	r3,-20(fp)
 101bc24:	008040b4 	movhi	r2,258
 101bc28:	108bc444 	addi	r2,r2,12049
 101bc2c:	10c5883a 	add	r2,r2,r3
 101bc30:	10800003 	ldbu	r2,0(r2)
 101bc34:	10803fcc 	andi	r2,r2,255
 101bc38:	1004c03a 	cmpne	r2,r2,zero
 101bc3c:	10000c1e 	bne	r2,zero,101bc70 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 101bc40:	e0bffc17 	ldw	r2,-16(fp)
 101bc44:	10800d83 	ldbu	r2,54(r2)
 101bc48:	0084303a 	nor	r2,zero,r2
 101bc4c:	1007883a 	mov	r3,r2
 101bc50:	008040b4 	movhi	r2,258
 101bc54:	108bc404 	addi	r2,r2,12048
 101bc58:	10800003 	ldbu	r2,0(r2)
 101bc5c:	1884703a 	and	r2,r3,r2
 101bc60:	1007883a 	mov	r3,r2
 101bc64:	008040b4 	movhi	r2,258
 101bc68:	108bc404 	addi	r2,r2,12048
 101bc6c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 101bc70:	e0bffc17 	ldw	r2,-16(fp)
 101bc74:	10800c03 	ldbu	r2,48(r2)
 101bc78:	10800214 	ori	r2,r2,8
 101bc7c:	1007883a 	mov	r3,r2
 101bc80:	e0bffc17 	ldw	r2,-16(fp)
 101bc84:	10c00c05 	stb	r3,48(r2)
 101bc88:	e0bffa17 	ldw	r2,-24(fp)
 101bc8c:	e0bff615 	stw	r2,-40(fp)
 101bc90:	e0bff617 	ldw	r2,-40(fp)
 101bc94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 101bc98:	e0bffd03 	ldbu	r2,-12(fp)
 101bc9c:	10800058 	cmpnei	r2,r2,1
 101bca0:	1000011e 	bne	r2,zero,101bca8 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 101bca4:	1015b900 	call	1015b90 <OS_Sched>
    }
    return (OS_ERR_NONE);
 101bca8:	e03fff15 	stw	zero,-4(fp)
 101bcac:	e0bfff17 	ldw	r2,-4(fp)
}
 101bcb0:	e037883a 	mov	sp,fp
 101bcb4:	dfc00117 	ldw	ra,4(sp)
 101bcb8:	df000017 	ldw	fp,0(sp)
 101bcbc:	dec00204 	addi	sp,sp,8
 101bcc0:	f800283a 	ret

0101bcc4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 101bcc4:	defff504 	addi	sp,sp,-44
 101bcc8:	dfc00a15 	stw	ra,40(sp)
 101bccc:	df000915 	stw	fp,36(sp)
 101bcd0:	df000904 	addi	fp,sp,36
 101bcd4:	e17ffe15 	stw	r5,-8(fp)
 101bcd8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101bcdc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 101bce0:	e0bffd03 	ldbu	r2,-12(fp)
 101bce4:	10800570 	cmpltui	r2,r2,21
 101bce8:	1000061e 	bne	r2,zero,101bd04 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 101bcec:	e0bffd03 	ldbu	r2,-12(fp)
 101bcf0:	10803fe0 	cmpeqi	r2,r2,255
 101bcf4:	1000031e 	bne	r2,zero,101bd04 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 101bcf8:	00800a84 	movi	r2,42
 101bcfc:	e0bfff15 	stw	r2,-4(fp)
 101bd00:	00003b06 	br	101bdf0 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 101bd04:	e0bffe17 	ldw	r2,-8(fp)
 101bd08:	1004c03a 	cmpne	r2,r2,zero
 101bd0c:	1000031e 	bne	r2,zero,101bd1c <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 101bd10:	00800244 	movi	r2,9
 101bd14:	e0bfff15 	stw	r2,-4(fp)
 101bd18:	00003506 	br	101bdf0 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101bd1c:	0005303a 	rdctl	r2,status
 101bd20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101bd24:	e0fffa17 	ldw	r3,-24(fp)
 101bd28:	00bfff84 	movi	r2,-2
 101bd2c:	1884703a 	and	r2,r3,r2
 101bd30:	1001703a 	wrctl	status,r2
  
  return context;
 101bd34:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101bd38:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 101bd3c:	e0bffd03 	ldbu	r2,-12(fp)
 101bd40:	10803fd8 	cmpnei	r2,r2,255
 101bd44:	1000051e 	bne	r2,zero,101bd5c <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 101bd48:	008040b4 	movhi	r2,258
 101bd4c:	108bc704 	addi	r2,r2,12060
 101bd50:	10800017 	ldw	r2,0(r2)
 101bd54:	10800c83 	ldbu	r2,50(r2)
 101bd58:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101bd5c:	e0bffd03 	ldbu	r2,-12(fp)
 101bd60:	00c040f4 	movhi	r3,259
 101bd64:	18ea5104 	addi	r3,r3,-22204
 101bd68:	1085883a 	add	r2,r2,r2
 101bd6c:	1085883a 	add	r2,r2,r2
 101bd70:	10c5883a 	add	r2,r2,r3
 101bd74:	10800017 	ldw	r2,0(r2)
 101bd78:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 101bd7c:	e0bffc17 	ldw	r2,-16(fp)
 101bd80:	1004c03a 	cmpne	r2,r2,zero
 101bd84:	1000071e 	bne	r2,zero,101bda4 <OSTaskQuery+0xe0>
 101bd88:	e0bffb17 	ldw	r2,-20(fp)
 101bd8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101bd90:	e0bff917 	ldw	r2,-28(fp)
 101bd94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 101bd98:	00800a44 	movi	r2,41
 101bd9c:	e0bfff15 	stw	r2,-4(fp)
 101bda0:	00001306 	br	101bdf0 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 101bda4:	e0bffc17 	ldw	r2,-16(fp)
 101bda8:	10800058 	cmpnei	r2,r2,1
 101bdac:	1000071e 	bne	r2,zero,101bdcc <OSTaskQuery+0x108>
 101bdb0:	e0bffb17 	ldw	r2,-20(fp)
 101bdb4:	e0bff815 	stw	r2,-32(fp)
 101bdb8:	e0bff817 	ldw	r2,-32(fp)
 101bdbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101bdc0:	008010c4 	movi	r2,67
 101bdc4:	e0bfff15 	stw	r2,-4(fp)
 101bdc8:	00000906 	br	101bdf0 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 101bdcc:	e13ffe17 	ldw	r4,-8(fp)
 101bdd0:	e17ffc17 	ldw	r5,-16(fp)
 101bdd4:	01801b04 	movi	r6,108
 101bdd8:	1015b240 	call	1015b24 <OS_MemCopy>
 101bddc:	e0bffb17 	ldw	r2,-20(fp)
 101bde0:	e0bff715 	stw	r2,-36(fp)
 101bde4:	e0bff717 	ldw	r2,-36(fp)
 101bde8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101bdec:	e03fff15 	stw	zero,-4(fp)
 101bdf0:	e0bfff17 	ldw	r2,-4(fp)
}
 101bdf4:	e037883a 	mov	sp,fp
 101bdf8:	dfc00117 	ldw	ra,4(sp)
 101bdfc:	df000017 	ldw	fp,0(sp)
 101be00:	dec00204 	addi	sp,sp,8
 101be04:	f800283a 	ret

0101be08 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 101be08:	defffc04 	addi	sp,sp,-16
 101be0c:	df000315 	stw	fp,12(sp)
 101be10:	df000304 	addi	fp,sp,12
 101be14:	e13ffd15 	stw	r4,-12(fp)
 101be18:	e17ffe15 	stw	r5,-8(fp)
 101be1c:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 101be20:	e0bfff0b 	ldhu	r2,-4(fp)
 101be24:	1080004c 	andi	r2,r2,1
 101be28:	10803fcc 	andi	r2,r2,255
 101be2c:	1005003a 	cmpeq	r2,r2,zero
 101be30:	1000101e 	bne	r2,zero,101be74 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 101be34:	e0bfff0b 	ldhu	r2,-4(fp)
 101be38:	1080008c 	andi	r2,r2,2
 101be3c:	1005003a 	cmpeq	r2,r2,zero
 101be40:	10000c1e 	bne	r2,zero,101be74 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 101be44:	00000806 	br	101be68 <OS_TaskStkClr+0x60>
                size--;
 101be48:	e0bffe17 	ldw	r2,-8(fp)
 101be4c:	10bfffc4 	addi	r2,r2,-1
 101be50:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 101be54:	e0bffd17 	ldw	r2,-12(fp)
 101be58:	10000015 	stw	zero,0(r2)
 101be5c:	e0bffd17 	ldw	r2,-12(fp)
 101be60:	10800104 	addi	r2,r2,4
 101be64:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 101be68:	e0bffe17 	ldw	r2,-8(fp)
 101be6c:	1004c03a 	cmpne	r2,r2,zero
 101be70:	103ff51e 	bne	r2,zero,101be48 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 101be74:	e037883a 	mov	sp,fp
 101be78:	df000017 	ldw	fp,0(sp)
 101be7c:	dec00104 	addi	sp,sp,4
 101be80:	f800283a 	ret

0101be84 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 101be84:	defff904 	addi	sp,sp,-28
 101be88:	dfc00615 	stw	ra,24(sp)
 101be8c:	df000515 	stw	fp,20(sp)
 101be90:	df000504 	addi	fp,sp,20
 101be94:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101be98:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 101be9c:	008040b4 	movhi	r2,258
 101bea0:	108bc604 	addi	r2,r2,12056
 101bea4:	10800003 	ldbu	r2,0(r2)
 101bea8:	10803fcc 	andi	r2,r2,255
 101beac:	1004c03a 	cmpne	r2,r2,zero
 101beb0:	1000421e 	bne	r2,zero,101bfbc <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 101beb4:	e0bfff0b 	ldhu	r2,-4(fp)
 101beb8:	1005003a 	cmpeq	r2,r2,zero
 101bebc:	10003f1e 	bne	r2,zero,101bfbc <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101bec0:	0005303a 	rdctl	r2,status
 101bec4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101bec8:	e0fffc17 	ldw	r3,-16(fp)
 101becc:	00bfff84 	movi	r2,-2
 101bed0:	1884703a 	and	r2,r3,r2
 101bed4:	1001703a 	wrctl	status,r2
  
  return context;
 101bed8:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 101bedc:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 101bee0:	008040b4 	movhi	r2,258
 101bee4:	108bc704 	addi	r2,r2,12060
 101bee8:	10800017 	ldw	r2,0(r2)
 101beec:	10800d03 	ldbu	r2,52(r2)
 101bef0:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 101bef4:	e13ffe03 	ldbu	r4,-8(fp)
 101bef8:	e0fffe03 	ldbu	r3,-8(fp)
 101befc:	008040b4 	movhi	r2,258
 101bf00:	108bc444 	addi	r2,r2,12049
 101bf04:	10c5883a 	add	r2,r2,r3
 101bf08:	10800003 	ldbu	r2,0(r2)
 101bf0c:	1007883a 	mov	r3,r2
 101bf10:	008040b4 	movhi	r2,258
 101bf14:	108bc704 	addi	r2,r2,12060
 101bf18:	10800017 	ldw	r2,0(r2)
 101bf1c:	10800d43 	ldbu	r2,53(r2)
 101bf20:	0084303a 	nor	r2,zero,r2
 101bf24:	1884703a 	and	r2,r3,r2
 101bf28:	1007883a 	mov	r3,r2
 101bf2c:	008040b4 	movhi	r2,258
 101bf30:	108bc444 	addi	r2,r2,12049
 101bf34:	1105883a 	add	r2,r2,r4
 101bf38:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 101bf3c:	e0fffe03 	ldbu	r3,-8(fp)
 101bf40:	008040b4 	movhi	r2,258
 101bf44:	108bc444 	addi	r2,r2,12049
 101bf48:	10c5883a 	add	r2,r2,r3
 101bf4c:	10800003 	ldbu	r2,0(r2)
 101bf50:	10803fcc 	andi	r2,r2,255
 101bf54:	1004c03a 	cmpne	r2,r2,zero
 101bf58:	10000e1e 	bne	r2,zero,101bf94 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 101bf5c:	008040b4 	movhi	r2,258
 101bf60:	108bc704 	addi	r2,r2,12060
 101bf64:	10800017 	ldw	r2,0(r2)
 101bf68:	10800d83 	ldbu	r2,54(r2)
 101bf6c:	0084303a 	nor	r2,zero,r2
 101bf70:	1007883a 	mov	r3,r2
 101bf74:	008040b4 	movhi	r2,258
 101bf78:	108bc404 	addi	r2,r2,12048
 101bf7c:	10800003 	ldbu	r2,0(r2)
 101bf80:	1884703a 	and	r2,r3,r2
 101bf84:	1007883a 	mov	r3,r2
 101bf88:	008040b4 	movhi	r2,258
 101bf8c:	108bc404 	addi	r2,r2,12048
 101bf90:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 101bf94:	008040b4 	movhi	r2,258
 101bf98:	108bc704 	addi	r2,r2,12060
 101bf9c:	10c00017 	ldw	r3,0(r2)
 101bfa0:	e0bfff0b 	ldhu	r2,-4(fp)
 101bfa4:	18800b8d 	sth	r2,46(r3)
 101bfa8:	e0bffd17 	ldw	r2,-12(fp)
 101bfac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101bfb0:	e0bffb17 	ldw	r2,-20(fp)
 101bfb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 101bfb8:	1015b900 	call	1015b90 <OS_Sched>
    }
}
 101bfbc:	e037883a 	mov	sp,fp
 101bfc0:	dfc00117 	ldw	ra,4(sp)
 101bfc4:	df000017 	ldw	fp,0(sp)
 101bfc8:	dec00204 	addi	sp,sp,8
 101bfcc:	f800283a 	ret

0101bfd0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 101bfd0:	defff604 	addi	sp,sp,-40
 101bfd4:	dfc00915 	stw	ra,36(sp)
 101bfd8:	df000815 	stw	fp,32(sp)
 101bfdc:	dc000715 	stw	r16,28(sp)
 101bfe0:	df000704 	addi	fp,sp,28
 101bfe4:	e13ffb05 	stb	r4,-20(fp)
 101bfe8:	e17ffc05 	stb	r5,-16(fp)
 101bfec:	e1bffd05 	stb	r6,-12(fp)
 101bff0:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 101bff4:	008040b4 	movhi	r2,258
 101bff8:	108bc604 	addi	r2,r2,12056
 101bffc:	10800003 	ldbu	r2,0(r2)
 101c000:	10803fcc 	andi	r2,r2,255
 101c004:	1005003a 	cmpeq	r2,r2,zero
 101c008:	1000031e 	bne	r2,zero,101c018 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 101c00c:	00801544 	movi	r2,85
 101c010:	e0bfff15 	stw	r2,-4(fp)
 101c014:	00004406 	br	101c128 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 101c018:	e0bffb03 	ldbu	r2,-20(fp)
 101c01c:	1004c03a 	cmpne	r2,r2,zero
 101c020:	10000c1e 	bne	r2,zero,101c054 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
 101c024:	e0bffc03 	ldbu	r2,-16(fp)
 101c028:	1004c03a 	cmpne	r2,r2,zero
 101c02c:	1000091e 	bne	r2,zero,101c054 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
 101c030:	e0bffd03 	ldbu	r2,-12(fp)
 101c034:	1004c03a 	cmpne	r2,r2,zero
 101c038:	1000061e 	bne	r2,zero,101c054 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
 101c03c:	e0bffe0b 	ldhu	r2,-8(fp)
 101c040:	1004c03a 	cmpne	r2,r2,zero
 101c044:	1000031e 	bne	r2,zero,101c054 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
 101c048:	00801504 	movi	r2,84
 101c04c:	e0bfff15 	stw	r2,-4(fp)
 101c050:	00003506 	br	101c128 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
 101c054:	e0bffc03 	ldbu	r2,-16(fp)
 101c058:	10800f30 	cmpltui	r2,r2,60
 101c05c:	1000031e 	bne	r2,zero,101c06c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 101c060:	00801444 	movi	r2,81
 101c064:	e0bfff15 	stw	r2,-4(fp)
 101c068:	00002f06 	br	101c128 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
 101c06c:	e0bffd03 	ldbu	r2,-12(fp)
 101c070:	10800f30 	cmpltui	r2,r2,60
 101c074:	1000031e 	bne	r2,zero,101c084 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
 101c078:	00801484 	movi	r2,82
 101c07c:	e0bfff15 	stw	r2,-4(fp)
 101c080:	00002906 	br	101c128 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
 101c084:	e0bffe0b 	ldhu	r2,-8(fp)
 101c088:	1080fa30 	cmpltui	r2,r2,1000
 101c08c:	1000031e 	bne	r2,zero,101c09c <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
 101c090:	008014c4 	movi	r2,83
 101c094:	e0bfff15 	stw	r2,-4(fp)
 101c098:	00002306 	br	101c128 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 101c09c:	e0bffb03 	ldbu	r2,-20(fp)
 101c0a0:	10c38424 	muli	r3,r2,3600
 101c0a4:	e0bffc03 	ldbu	r2,-16(fp)
 101c0a8:	10800f24 	muli	r2,r2,60
 101c0ac:	1887883a 	add	r3,r3,r2
 101c0b0:	e0bffd03 	ldbu	r2,-12(fp)
 101c0b4:	1885883a 	add	r2,r3,r2
 101c0b8:	1400fa24 	muli	r16,r2,1000
 101c0bc:	e0bffe0b 	ldhu	r2,-8(fp)
 101c0c0:	1100fa24 	muli	r4,r2,1000
 101c0c4:	0140fa04 	movi	r5,1000
 101c0c8:	1012b0c0 	call	1012b0c <__udivsi3>
 101c0cc:	8085883a 	add	r2,r16,r2
 101c0d0:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 101c0d4:	e0bffa17 	ldw	r2,-24(fp)
 101c0d8:	1004d43a 	srli	r2,r2,16
 101c0dc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 101c0e0:	e0bffa17 	ldw	r2,-24(fp)
 101c0e4:	10bfffcc 	andi	r2,r2,65535
 101c0e8:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 101c0ec:	e0bffa17 	ldw	r2,-24(fp)
 101c0f0:	113fffcc 	andi	r4,r2,65535
 101c0f4:	101be840 	call	101be84 <OSTimeDly>
    while (loops > 0) {
 101c0f8:	00000706 	br	101c118 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
 101c0fc:	01200014 	movui	r4,32768
 101c100:	101be840 	call	101be84 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 101c104:	01200014 	movui	r4,32768
 101c108:	101be840 	call	101be84 <OSTimeDly>
        loops--;
 101c10c:	e0bff90b 	ldhu	r2,-28(fp)
 101c110:	10bfffc4 	addi	r2,r2,-1
 101c114:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 101c118:	e0bff90b 	ldhu	r2,-28(fp)
 101c11c:	1004c03a 	cmpne	r2,r2,zero
 101c120:	103ff61e 	bne	r2,zero,101c0fc <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 101c124:	e03fff15 	stw	zero,-4(fp)
 101c128:	e0bfff17 	ldw	r2,-4(fp)
}
 101c12c:	e037883a 	mov	sp,fp
 101c130:	dfc00217 	ldw	ra,8(sp)
 101c134:	df000117 	ldw	fp,4(sp)
 101c138:	dc000017 	ldw	r16,0(sp)
 101c13c:	dec00304 	addi	sp,sp,12
 101c140:	f800283a 	ret

0101c144 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 101c144:	defff404 	addi	sp,sp,-48
 101c148:	dfc00b15 	stw	ra,44(sp)
 101c14c:	df000a15 	stw	fp,40(sp)
 101c150:	df000a04 	addi	fp,sp,40
 101c154:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101c158:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 101c15c:	e0bffe03 	ldbu	r2,-8(fp)
 101c160:	10800530 	cmpltui	r2,r2,20
 101c164:	1000031e 	bne	r2,zero,101c174 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 101c168:	00800a84 	movi	r2,42
 101c16c:	e0bfff15 	stw	r2,-4(fp)
 101c170:	00007206 	br	101c33c <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c174:	0005303a 	rdctl	r2,status
 101c178:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c17c:	e0fffb17 	ldw	r3,-20(fp)
 101c180:	00bfff84 	movi	r2,-2
 101c184:	1884703a 	and	r2,r3,r2
 101c188:	1001703a 	wrctl	status,r2
  
  return context;
 101c18c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 101c190:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 101c194:	e0bffe03 	ldbu	r2,-8(fp)
 101c198:	00c040f4 	movhi	r3,259
 101c19c:	18ea5104 	addi	r3,r3,-22204
 101c1a0:	1085883a 	add	r2,r2,r2
 101c1a4:	1085883a 	add	r2,r2,r2
 101c1a8:	10c5883a 	add	r2,r2,r3
 101c1ac:	10800017 	ldw	r2,0(r2)
 101c1b0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 101c1b4:	e0bffd17 	ldw	r2,-12(fp)
 101c1b8:	1004c03a 	cmpne	r2,r2,zero
 101c1bc:	1000071e 	bne	r2,zero,101c1dc <OSTimeDlyResume+0x98>
 101c1c0:	e0bffc17 	ldw	r2,-16(fp)
 101c1c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c1c8:	e0bffa17 	ldw	r2,-24(fp)
 101c1cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 101c1d0:	008010c4 	movi	r2,67
 101c1d4:	e0bfff15 	stw	r2,-4(fp)
 101c1d8:	00005806 	br	101c33c <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 101c1dc:	e0bffd17 	ldw	r2,-12(fp)
 101c1e0:	10800058 	cmpnei	r2,r2,1
 101c1e4:	1000071e 	bne	r2,zero,101c204 <OSTimeDlyResume+0xc0>
 101c1e8:	e0bffc17 	ldw	r2,-16(fp)
 101c1ec:	e0bff915 	stw	r2,-28(fp)
 101c1f0:	e0bff917 	ldw	r2,-28(fp)
 101c1f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 101c1f8:	008010c4 	movi	r2,67
 101c1fc:	e0bfff15 	stw	r2,-4(fp)
 101c200:	00004e06 	br	101c33c <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 101c204:	e0bffd17 	ldw	r2,-12(fp)
 101c208:	10800b8b 	ldhu	r2,46(r2)
 101c20c:	10bfffcc 	andi	r2,r2,65535
 101c210:	1004c03a 	cmpne	r2,r2,zero
 101c214:	1000071e 	bne	r2,zero,101c234 <OSTimeDlyResume+0xf0>
 101c218:	e0bffc17 	ldw	r2,-16(fp)
 101c21c:	e0bff815 	stw	r2,-32(fp)
 101c220:	e0bff817 	ldw	r2,-32(fp)
 101c224:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 101c228:	00801404 	movi	r2,80
 101c22c:	e0bfff15 	stw	r2,-4(fp)
 101c230:	00004206 	br	101c33c <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 101c234:	e0bffd17 	ldw	r2,-12(fp)
 101c238:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 101c23c:	e0bffd17 	ldw	r2,-12(fp)
 101c240:	10800c03 	ldbu	r2,48(r2)
 101c244:	10803fcc 	andi	r2,r2,255
 101c248:	10800dcc 	andi	r2,r2,55
 101c24c:	1005003a 	cmpeq	r2,r2,zero
 101c250:	10000b1e 	bne	r2,zero,101c280 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 101c254:	e0bffd17 	ldw	r2,-12(fp)
 101c258:	10c00c03 	ldbu	r3,48(r2)
 101c25c:	00bff204 	movi	r2,-56
 101c260:	1884703a 	and	r2,r3,r2
 101c264:	1007883a 	mov	r3,r2
 101c268:	e0bffd17 	ldw	r2,-12(fp)
 101c26c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 101c270:	e0fffd17 	ldw	r3,-12(fp)
 101c274:	00800044 	movi	r2,1
 101c278:	18800c45 	stb	r2,49(r3)
 101c27c:	00000206 	br	101c288 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 101c280:	e0bffd17 	ldw	r2,-12(fp)
 101c284:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 101c288:	e0bffd17 	ldw	r2,-12(fp)
 101c28c:	10800c03 	ldbu	r2,48(r2)
 101c290:	10803fcc 	andi	r2,r2,255
 101c294:	1080020c 	andi	r2,r2,8
 101c298:	1004c03a 	cmpne	r2,r2,zero
 101c29c:	1000221e 	bne	r2,zero,101c328 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 101c2a0:	e0bffd17 	ldw	r2,-12(fp)
 101c2a4:	10c00d83 	ldbu	r3,54(r2)
 101c2a8:	008040b4 	movhi	r2,258
 101c2ac:	108bc404 	addi	r2,r2,12048
 101c2b0:	10800003 	ldbu	r2,0(r2)
 101c2b4:	1884b03a 	or	r2,r3,r2
 101c2b8:	1007883a 	mov	r3,r2
 101c2bc:	008040b4 	movhi	r2,258
 101c2c0:	108bc404 	addi	r2,r2,12048
 101c2c4:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 101c2c8:	e0bffd17 	ldw	r2,-12(fp)
 101c2cc:	10800d03 	ldbu	r2,52(r2)
 101c2d0:	11003fcc 	andi	r4,r2,255
 101c2d4:	e0bffd17 	ldw	r2,-12(fp)
 101c2d8:	10800d03 	ldbu	r2,52(r2)
 101c2dc:	10c03fcc 	andi	r3,r2,255
 101c2e0:	008040b4 	movhi	r2,258
 101c2e4:	108bc444 	addi	r2,r2,12049
 101c2e8:	10c5883a 	add	r2,r2,r3
 101c2ec:	10c00003 	ldbu	r3,0(r2)
 101c2f0:	e0bffd17 	ldw	r2,-12(fp)
 101c2f4:	10800d43 	ldbu	r2,53(r2)
 101c2f8:	1884b03a 	or	r2,r3,r2
 101c2fc:	1007883a 	mov	r3,r2
 101c300:	008040b4 	movhi	r2,258
 101c304:	108bc444 	addi	r2,r2,12049
 101c308:	1105883a 	add	r2,r2,r4
 101c30c:	10c00005 	stb	r3,0(r2)
 101c310:	e0bffc17 	ldw	r2,-16(fp)
 101c314:	e0bff715 	stw	r2,-36(fp)
 101c318:	e0bff717 	ldw	r2,-36(fp)
 101c31c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 101c320:	1015b900 	call	1015b90 <OS_Sched>
 101c324:	00000406 	br	101c338 <OSTimeDlyResume+0x1f4>
 101c328:	e0bffc17 	ldw	r2,-16(fp)
 101c32c:	e0bff615 	stw	r2,-40(fp)
 101c330:	e0bff617 	ldw	r2,-40(fp)
 101c334:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 101c338:	e03fff15 	stw	zero,-4(fp)
 101c33c:	e0bfff17 	ldw	r2,-4(fp)
}
 101c340:	e037883a 	mov	sp,fp
 101c344:	dfc00117 	ldw	ra,4(sp)
 101c348:	df000017 	ldw	fp,0(sp)
 101c34c:	dec00204 	addi	sp,sp,8
 101c350:	f800283a 	ret

0101c354 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 101c354:	defffb04 	addi	sp,sp,-20
 101c358:	df000415 	stw	fp,16(sp)
 101c35c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101c360:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c364:	0005303a 	rdctl	r2,status
 101c368:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c36c:	e0fffd17 	ldw	r3,-12(fp)
 101c370:	00bfff84 	movi	r2,-2
 101c374:	1884703a 	and	r2,r3,r2
 101c378:	1001703a 	wrctl	status,r2
  
  return context;
 101c37c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 101c380:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 101c384:	008040b4 	movhi	r2,258
 101c388:	108bc804 	addi	r2,r2,12064
 101c38c:	10800017 	ldw	r2,0(r2)
 101c390:	e0bfff15 	stw	r2,-4(fp)
 101c394:	e0bffe17 	ldw	r2,-8(fp)
 101c398:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c39c:	e0bffc17 	ldw	r2,-16(fp)
 101c3a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 101c3a4:	e0bfff17 	ldw	r2,-4(fp)
}
 101c3a8:	e037883a 	mov	sp,fp
 101c3ac:	df000017 	ldw	fp,0(sp)
 101c3b0:	dec00104 	addi	sp,sp,4
 101c3b4:	f800283a 	ret

0101c3b8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 101c3b8:	defffb04 	addi	sp,sp,-20
 101c3bc:	df000415 	stw	fp,16(sp)
 101c3c0:	df000404 	addi	fp,sp,16
 101c3c4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101c3c8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c3cc:	0005303a 	rdctl	r2,status
 101c3d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c3d4:	e0fffd17 	ldw	r3,-12(fp)
 101c3d8:	00bfff84 	movi	r2,-2
 101c3dc:	1884703a 	and	r2,r3,r2
 101c3e0:	1001703a 	wrctl	status,r2
  
  return context;
 101c3e4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 101c3e8:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 101c3ec:	00c040b4 	movhi	r3,258
 101c3f0:	18cbc804 	addi	r3,r3,12064
 101c3f4:	e0bfff17 	ldw	r2,-4(fp)
 101c3f8:	18800015 	stw	r2,0(r3)
 101c3fc:	e0bffe17 	ldw	r2,-8(fp)
 101c400:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c404:	e0bffc17 	ldw	r2,-16(fp)
 101c408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 101c40c:	e037883a 	mov	sp,fp
 101c410:	df000017 	ldw	fp,0(sp)
 101c414:	dec00104 	addi	sp,sp,4
 101c418:	f800283a 	ret

0101c41c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 101c41c:	defffd04 	addi	sp,sp,-12
 101c420:	dfc00215 	stw	ra,8(sp)
 101c424:	df000115 	stw	fp,4(sp)
 101c428:	df000104 	addi	fp,sp,4
 101c42c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 101c430:	101df640 	call	101df64 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 101c434:	00800044 	movi	r2,1
 101c438:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 101c43c:	e037883a 	mov	sp,fp
 101c440:	dfc00117 	ldw	ra,4(sp)
 101c444:	df000017 	ldw	fp,0(sp)
 101c448:	dec00204 	addi	sp,sp,8
 101c44c:	f800283a 	ret

0101c450 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 101c450:	defffe04 	addi	sp,sp,-8
 101c454:	dfc00115 	stw	ra,4(sp)
 101c458:	df000015 	stw	fp,0(sp)
 101c45c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 101c460:	01008034 	movhi	r4,512
 101c464:	21041004 	addi	r4,r4,4160
 101c468:	000b883a 	mov	r5,zero
 101c46c:	000d883a 	mov	r6,zero
 101c470:	01c0fa04 	movi	r7,1000
 101c474:	101d2bc0 	call	101d2bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 101c478:	010040b4 	movhi	r4,258
 101c47c:	21007604 	addi	r4,r4,472
 101c480:	000b883a 	mov	r5,zero
 101c484:	01800384 	movi	r6,14
 101c488:	101c6380 	call	101c638 <altera_avalon_jtag_uart_init>
 101c48c:	010040b4 	movhi	r4,258
 101c490:	21006c04 	addi	r4,r4,432
 101c494:	101c4b80 	call	101c4b8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_DE0_NANO_ADC_INIT ( ADC, adc);
 101c498:	010040b4 	movhi	r4,258
 101c49c:	21048704 	addi	r4,r4,4636
 101c4a0:	101c4b80 	call	101c4b8 <alt_dev_reg>
}
 101c4a4:	e037883a 	mov	sp,fp
 101c4a8:	dfc00117 	ldw	ra,4(sp)
 101c4ac:	df000017 	ldw	fp,0(sp)
 101c4b0:	dec00204 	addi	sp,sp,8
 101c4b4:	f800283a 	ret

0101c4b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 101c4b8:	defffd04 	addi	sp,sp,-12
 101c4bc:	dfc00215 	stw	ra,8(sp)
 101c4c0:	df000115 	stw	fp,4(sp)
 101c4c4:	df000104 	addi	fp,sp,4
 101c4c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 101c4cc:	e13fff17 	ldw	r4,-4(fp)
 101c4d0:	014040b4 	movhi	r5,258
 101c4d4:	2944a804 	addi	r5,r5,4768
 101c4d8:	101d4e40 	call	101d4e4 <alt_dev_llist_insert>
}
 101c4dc:	e037883a 	mov	sp,fp
 101c4e0:	dfc00117 	ldw	ra,4(sp)
 101c4e4:	df000017 	ldw	fp,0(sp)
 101c4e8:	dec00204 	addi	sp,sp,8
 101c4ec:	f800283a 	ret

0101c4f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 101c4f0:	defffa04 	addi	sp,sp,-24
 101c4f4:	dfc00515 	stw	ra,20(sp)
 101c4f8:	df000415 	stw	fp,16(sp)
 101c4fc:	df000404 	addi	fp,sp,16
 101c500:	e13ffd15 	stw	r4,-12(fp)
 101c504:	e17ffe15 	stw	r5,-8(fp)
 101c508:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101c50c:	e0bffd17 	ldw	r2,-12(fp)
 101c510:	10800017 	ldw	r2,0(r2)
 101c514:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 101c518:	e0bffc17 	ldw	r2,-16(fp)
 101c51c:	11000a04 	addi	r4,r2,40
 101c520:	e0bffd17 	ldw	r2,-12(fp)
 101c524:	11c00217 	ldw	r7,8(r2)
 101c528:	e17ffe17 	ldw	r5,-8(fp)
 101c52c:	e1bfff17 	ldw	r6,-4(fp)
 101c530:	101ccb00 	call	101ccb0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 101c534:	e037883a 	mov	sp,fp
 101c538:	dfc00117 	ldw	ra,4(sp)
 101c53c:	df000017 	ldw	fp,0(sp)
 101c540:	dec00204 	addi	sp,sp,8
 101c544:	f800283a 	ret

0101c548 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 101c548:	defffa04 	addi	sp,sp,-24
 101c54c:	dfc00515 	stw	ra,20(sp)
 101c550:	df000415 	stw	fp,16(sp)
 101c554:	df000404 	addi	fp,sp,16
 101c558:	e13ffd15 	stw	r4,-12(fp)
 101c55c:	e17ffe15 	stw	r5,-8(fp)
 101c560:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101c564:	e0bffd17 	ldw	r2,-12(fp)
 101c568:	10800017 	ldw	r2,0(r2)
 101c56c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 101c570:	e0bffc17 	ldw	r2,-16(fp)
 101c574:	11000a04 	addi	r4,r2,40
 101c578:	e0bffd17 	ldw	r2,-12(fp)
 101c57c:	11c00217 	ldw	r7,8(r2)
 101c580:	e17ffe17 	ldw	r5,-8(fp)
 101c584:	e1bfff17 	ldw	r6,-4(fp)
 101c588:	101cf700 	call	101cf70 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 101c58c:	e037883a 	mov	sp,fp
 101c590:	dfc00117 	ldw	ra,4(sp)
 101c594:	df000017 	ldw	fp,0(sp)
 101c598:	dec00204 	addi	sp,sp,8
 101c59c:	f800283a 	ret

0101c5a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 101c5a0:	defffc04 	addi	sp,sp,-16
 101c5a4:	dfc00315 	stw	ra,12(sp)
 101c5a8:	df000215 	stw	fp,8(sp)
 101c5ac:	df000204 	addi	fp,sp,8
 101c5b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101c5b4:	e0bfff17 	ldw	r2,-4(fp)
 101c5b8:	10800017 	ldw	r2,0(r2)
 101c5bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 101c5c0:	e0bffe17 	ldw	r2,-8(fp)
 101c5c4:	11000a04 	addi	r4,r2,40
 101c5c8:	e0bfff17 	ldw	r2,-4(fp)
 101c5cc:	11400217 	ldw	r5,8(r2)
 101c5d0:	101cb480 	call	101cb48 <altera_avalon_jtag_uart_close>
}
 101c5d4:	e037883a 	mov	sp,fp
 101c5d8:	dfc00117 	ldw	ra,4(sp)
 101c5dc:	df000017 	ldw	fp,0(sp)
 101c5e0:	dec00204 	addi	sp,sp,8
 101c5e4:	f800283a 	ret

0101c5e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 101c5e8:	defffa04 	addi	sp,sp,-24
 101c5ec:	dfc00515 	stw	ra,20(sp)
 101c5f0:	df000415 	stw	fp,16(sp)
 101c5f4:	df000404 	addi	fp,sp,16
 101c5f8:	e13ffd15 	stw	r4,-12(fp)
 101c5fc:	e17ffe15 	stw	r5,-8(fp)
 101c600:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 101c604:	e0bffd17 	ldw	r2,-12(fp)
 101c608:	10800017 	ldw	r2,0(r2)
 101c60c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 101c610:	e0bffc17 	ldw	r2,-16(fp)
 101c614:	11000a04 	addi	r4,r2,40
 101c618:	e17ffe17 	ldw	r5,-8(fp)
 101c61c:	e1bfff17 	ldw	r6,-4(fp)
 101c620:	101cbbc0 	call	101cbbc <altera_avalon_jtag_uart_ioctl>
}
 101c624:	e037883a 	mov	sp,fp
 101c628:	dfc00117 	ldw	ra,4(sp)
 101c62c:	df000017 	ldw	fp,0(sp)
 101c630:	dec00204 	addi	sp,sp,8
 101c634:	f800283a 	ret

0101c638 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 101c638:	defff404 	addi	sp,sp,-48
 101c63c:	dfc00b15 	stw	ra,44(sp)
 101c640:	df000a15 	stw	fp,40(sp)
 101c644:	df000a04 	addi	fp,sp,40
 101c648:	e13ffd15 	stw	r4,-12(fp)
 101c64c:	e17ffe15 	stw	r5,-8(fp)
 101c650:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 101c654:	e0bffd17 	ldw	r2,-12(fp)
 101c658:	10800c04 	addi	r2,r2,48
 101c65c:	e0bffb15 	stw	r2,-20(fp)
 101c660:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 101c664:	e13ffc0b 	ldhu	r4,-16(fp)
 101c668:	e17ffc84 	addi	r5,fp,-14
 101c66c:	10167380 	call	1016738 <OSFlagCreate>
 101c670:	1007883a 	mov	r3,r2
 101c674:	e0bffb17 	ldw	r2,-20(fp)
 101c678:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 101c67c:	e0bffd17 	ldw	r2,-12(fp)
 101c680:	10800a04 	addi	r2,r2,40
 101c684:	e0bff915 	stw	r2,-28(fp)
 101c688:	00800044 	movi	r2,1
 101c68c:	e0bffa0d 	sth	r2,-24(fp)
 101c690:	e13ffa0b 	ldhu	r4,-24(fp)
 101c694:	101993c0 	call	101993c <OSSemCreate>
 101c698:	1007883a 	mov	r3,r2
 101c69c:	e0bff917 	ldw	r2,-28(fp)
 101c6a0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 101c6a4:	e0bffd17 	ldw	r2,-12(fp)
 101c6a8:	10800b04 	addi	r2,r2,44
 101c6ac:	e0bff715 	stw	r2,-36(fp)
 101c6b0:	00800044 	movi	r2,1
 101c6b4:	e0bff80d 	sth	r2,-32(fp)
 101c6b8:	e13ff80b 	ldhu	r4,-32(fp)
 101c6bc:	101993c0 	call	101993c <OSSemCreate>
 101c6c0:	1007883a 	mov	r3,r2
 101c6c4:	e0bff717 	ldw	r2,-36(fp)
 101c6c8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101c6cc:	e0fffd17 	ldw	r3,-12(fp)
 101c6d0:	00800044 	movi	r2,1
 101c6d4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 101c6d8:	e0bffd17 	ldw	r2,-12(fp)
 101c6dc:	10800017 	ldw	r2,0(r2)
 101c6e0:	11000104 	addi	r4,r2,4
 101c6e4:	e0bffd17 	ldw	r2,-12(fp)
 101c6e8:	10800817 	ldw	r2,32(r2)
 101c6ec:	1007883a 	mov	r3,r2
 101c6f0:	2005883a 	mov	r2,r4
 101c6f4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 101c6f8:	e13ffe17 	ldw	r4,-8(fp)
 101c6fc:	e17fff17 	ldw	r5,-4(fp)
 101c700:	d8000015 	stw	zero,0(sp)
 101c704:	018040b4 	movhi	r6,258
 101c708:	31b1dc04 	addi	r6,r6,-14480
 101c70c:	e1fffd17 	ldw	r7,-12(fp)
 101c710:	101d6f00 	call	101d6f0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 101c714:	e0bffd17 	ldw	r2,-12(fp)
 101c718:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 101c71c:	e0bffd17 	ldw	r2,-12(fp)
 101c720:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 101c724:	008040b4 	movhi	r2,258
 101c728:	108bcd04 	addi	r2,r2,12084
 101c72c:	10800017 	ldw	r2,0(r2)
 101c730:	100b883a 	mov	r5,r2
 101c734:	018040b4 	movhi	r6,258
 101c738:	31b28d04 	addi	r6,r6,-13772
 101c73c:	e1fffd17 	ldw	r7,-12(fp)
 101c740:	101d34c0 	call	101d34c <alt_alarm_start>
 101c744:	1004403a 	cmpge	r2,r2,zero
 101c748:	1000041e 	bne	r2,zero,101c75c <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 101c74c:	e0fffd17 	ldw	r3,-12(fp)
 101c750:	00a00034 	movhi	r2,32768
 101c754:	10bfffc4 	addi	r2,r2,-1
 101c758:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 101c75c:	e037883a 	mov	sp,fp
 101c760:	dfc00117 	ldw	ra,4(sp)
 101c764:	df000017 	ldw	fp,0(sp)
 101c768:	dec00204 	addi	sp,sp,8
 101c76c:	f800283a 	ret

0101c770 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 101c770:	defff204 	addi	sp,sp,-56
 101c774:	dfc00d15 	stw	ra,52(sp)
 101c778:	df000c15 	stw	fp,48(sp)
 101c77c:	df000c04 	addi	fp,sp,48
 101c780:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 101c784:	e0bfff17 	ldw	r2,-4(fp)
 101c788:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 101c78c:	e0bffd17 	ldw	r2,-12(fp)
 101c790:	10800017 	ldw	r2,0(r2)
 101c794:	e0bffc15 	stw	r2,-16(fp)
 101c798:	00000006 	br	101c79c <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101c79c:	e0bffc17 	ldw	r2,-16(fp)
 101c7a0:	10800104 	addi	r2,r2,4
 101c7a4:	10800037 	ldwio	r2,0(r2)
 101c7a8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 101c7ac:	e0bffb17 	ldw	r2,-20(fp)
 101c7b0:	1080c00c 	andi	r2,r2,768
 101c7b4:	1005003a 	cmpeq	r2,r2,zero
 101c7b8:	1000991e 	bne	r2,zero,101ca20 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 101c7bc:	e0bffb17 	ldw	r2,-20(fp)
 101c7c0:	1080400c 	andi	r2,r2,256
 101c7c4:	1005003a 	cmpeq	r2,r2,zero
 101c7c8:	1000481e 	bne	r2,zero,101c8ec <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 101c7cc:	00800074 	movhi	r2,1
 101c7d0:	e0bffa15 	stw	r2,-24(fp)
 101c7d4:	00000006 	br	101c7d8 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101c7d8:	e0bffd17 	ldw	r2,-12(fp)
 101c7dc:	10800d17 	ldw	r2,52(r2)
 101c7e0:	10800044 	addi	r2,r2,1
 101c7e4:	1081ffcc 	andi	r2,r2,2047
 101c7e8:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 101c7ec:	e0bffd17 	ldw	r2,-12(fp)
 101c7f0:	10c00e17 	ldw	r3,56(r2)
 101c7f4:	e0bff917 	ldw	r2,-28(fp)
 101c7f8:	18802826 	beq	r3,r2,101c89c <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 101c7fc:	e0bffc17 	ldw	r2,-16(fp)
 101c800:	10800037 	ldwio	r2,0(r2)
 101c804:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 101c808:	e0bffa17 	ldw	r2,-24(fp)
 101c80c:	10a0000c 	andi	r2,r2,32768
 101c810:	1005003a 	cmpeq	r2,r2,zero
 101c814:	1000211e 	bne	r2,zero,101c89c <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 101c818:	e0bffd17 	ldw	r2,-12(fp)
 101c81c:	10c00d17 	ldw	r3,52(r2)
 101c820:	e0bffa17 	ldw	r2,-24(fp)
 101c824:	1009883a 	mov	r4,r2
 101c828:	e0bffd17 	ldw	r2,-12(fp)
 101c82c:	1885883a 	add	r2,r3,r2
 101c830:	10801104 	addi	r2,r2,68
 101c834:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101c838:	e0bffd17 	ldw	r2,-12(fp)
 101c83c:	10800d17 	ldw	r2,52(r2)
 101c840:	10800044 	addi	r2,r2,1
 101c844:	10c1ffcc 	andi	r3,r2,2047
 101c848:	e0bffd17 	ldw	r2,-12(fp)
 101c84c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 101c850:	e0bffd17 	ldw	r2,-12(fp)
 101c854:	10800c17 	ldw	r2,48(r2)
 101c858:	e0bff615 	stw	r2,-40(fp)
 101c85c:	00800044 	movi	r2,1
 101c860:	e0bff70d 	sth	r2,-36(fp)
 101c864:	00800044 	movi	r2,1
 101c868:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 101c86c:	008040b4 	movhi	r2,258
 101c870:	108bb844 	addi	r2,r2,12001
 101c874:	10800003 	ldbu	r2,0(r2)
 101c878:	10803fcc 	andi	r2,r2,255
 101c87c:	1005003a 	cmpeq	r2,r2,zero
 101c880:	103fd51e 	bne	r2,zero,101c7d8 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
 101c884:	e17ff70b 	ldhu	r5,-36(fp)
 101c888:	e1bff783 	ldbu	r6,-34(fp)
 101c88c:	e1fffe04 	addi	r7,fp,-8
 101c890:	e13ff617 	ldw	r4,-40(fp)
 101c894:	10174600 	call	1017460 <OSFlagPost>
    return err;
 101c898:	003fcf06 	br	101c7d8 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 101c89c:	e0bffa17 	ldw	r2,-24(fp)
 101c8a0:	10bfffec 	andhi	r2,r2,65535
 101c8a4:	1005003a 	cmpeq	r2,r2,zero
 101c8a8:	1000101e 	bne	r2,zero,101c8ec <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101c8ac:	e0bffd17 	ldw	r2,-12(fp)
 101c8b0:	10c00817 	ldw	r3,32(r2)
 101c8b4:	00bfff84 	movi	r2,-2
 101c8b8:	1886703a 	and	r3,r3,r2
 101c8bc:	e0bffd17 	ldw	r2,-12(fp)
 101c8c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 101c8c4:	e0bffc17 	ldw	r2,-16(fp)
 101c8c8:	11000104 	addi	r4,r2,4
 101c8cc:	e0bffd17 	ldw	r2,-12(fp)
 101c8d0:	10800817 	ldw	r2,32(r2)
 101c8d4:	1007883a 	mov	r3,r2
 101c8d8:	2005883a 	mov	r2,r4
 101c8dc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101c8e0:	e0bffc17 	ldw	r2,-16(fp)
 101c8e4:	10800104 	addi	r2,r2,4
 101c8e8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 101c8ec:	e0bffb17 	ldw	r2,-20(fp)
 101c8f0:	1080800c 	andi	r2,r2,512
 101c8f4:	1005003a 	cmpeq	r2,r2,zero
 101c8f8:	103fa81e 	bne	r2,zero,101c79c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 101c8fc:	e0bffb17 	ldw	r2,-20(fp)
 101c900:	10bfffec 	andhi	r2,r2,65535
 101c904:	1004d43a 	srli	r2,r2,16
 101c908:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 101c90c:	00002706 	br	101c9ac <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 101c910:	e13ffc17 	ldw	r4,-16(fp)
 101c914:	e0bffd17 	ldw	r2,-12(fp)
 101c918:	10c01017 	ldw	r3,64(r2)
 101c91c:	e0bffd17 	ldw	r2,-12(fp)
 101c920:	1885883a 	add	r2,r3,r2
 101c924:	10821104 	addi	r2,r2,2116
 101c928:	10800003 	ldbu	r2,0(r2)
 101c92c:	10c03fcc 	andi	r3,r2,255
 101c930:	18c0201c 	xori	r3,r3,128
 101c934:	18ffe004 	addi	r3,r3,-128
 101c938:	2005883a 	mov	r2,r4
 101c93c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101c940:	e0bffd17 	ldw	r2,-12(fp)
 101c944:	10801017 	ldw	r2,64(r2)
 101c948:	10800044 	addi	r2,r2,1
 101c94c:	10c1ffcc 	andi	r3,r2,2047
 101c950:	e0bffd17 	ldw	r2,-12(fp)
 101c954:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 101c958:	e0bffd17 	ldw	r2,-12(fp)
 101c95c:	10800c17 	ldw	r2,48(r2)
 101c960:	e0bff415 	stw	r2,-48(fp)
 101c964:	00800084 	movi	r2,2
 101c968:	e0bff50d 	sth	r2,-44(fp)
 101c96c:	00800044 	movi	r2,1
 101c970:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 101c974:	008040b4 	movhi	r2,258
 101c978:	108bb844 	addi	r2,r2,12001
 101c97c:	10800003 	ldbu	r2,0(r2)
 101c980:	10803fcc 	andi	r2,r2,255
 101c984:	1005003a 	cmpeq	r2,r2,zero
 101c988:	1000051e 	bne	r2,zero,101c9a0 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
 101c98c:	e17ff50b 	ldhu	r5,-44(fp)
 101c990:	e1bff583 	ldbu	r6,-42(fp)
 101c994:	e1fffe44 	addi	r7,fp,-7
 101c998:	e13ff417 	ldw	r4,-48(fp)
 101c99c:	10174600 	call	1017460 <OSFlagPost>

        space--;
 101c9a0:	e0bff817 	ldw	r2,-32(fp)
 101c9a4:	10bfffc4 	addi	r2,r2,-1
 101c9a8:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 101c9ac:	e0bff817 	ldw	r2,-32(fp)
 101c9b0:	1005003a 	cmpeq	r2,r2,zero
 101c9b4:	1000051e 	bne	r2,zero,101c9cc <altera_avalon_jtag_uart_irq+0x25c>
 101c9b8:	e0bffd17 	ldw	r2,-12(fp)
 101c9bc:	10c01017 	ldw	r3,64(r2)
 101c9c0:	e0bffd17 	ldw	r2,-12(fp)
 101c9c4:	10800f17 	ldw	r2,60(r2)
 101c9c8:	18bfd11e 	bne	r3,r2,101c910 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 101c9cc:	e0bff817 	ldw	r2,-32(fp)
 101c9d0:	1005003a 	cmpeq	r2,r2,zero
 101c9d4:	103f711e 	bne	r2,zero,101c79c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 101c9d8:	e0bffd17 	ldw	r2,-12(fp)
 101c9dc:	10c00817 	ldw	r3,32(r2)
 101c9e0:	00bfff44 	movi	r2,-3
 101c9e4:	1886703a 	and	r3,r3,r2
 101c9e8:	e0bffd17 	ldw	r2,-12(fp)
 101c9ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101c9f0:	e0bffd17 	ldw	r2,-12(fp)
 101c9f4:	10800017 	ldw	r2,0(r2)
 101c9f8:	11000104 	addi	r4,r2,4
 101c9fc:	e0bffd17 	ldw	r2,-12(fp)
 101ca00:	10800817 	ldw	r2,32(r2)
 101ca04:	1007883a 	mov	r3,r2
 101ca08:	2005883a 	mov	r2,r4
 101ca0c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101ca10:	e0bffc17 	ldw	r2,-16(fp)
 101ca14:	10800104 	addi	r2,r2,4
 101ca18:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 101ca1c:	003f5f06 	br	101c79c <altera_avalon_jtag_uart_irq+0x2c>
}
 101ca20:	e037883a 	mov	sp,fp
 101ca24:	dfc00117 	ldw	ra,4(sp)
 101ca28:	df000017 	ldw	fp,0(sp)
 101ca2c:	dec00204 	addi	sp,sp,8
 101ca30:	f800283a 	ret

0101ca34 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 101ca34:	defff804 	addi	sp,sp,-32
 101ca38:	dfc00715 	stw	ra,28(sp)
 101ca3c:	df000615 	stw	fp,24(sp)
 101ca40:	df000604 	addi	fp,sp,24
 101ca44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 101ca48:	e0bfff17 	ldw	r2,-4(fp)
 101ca4c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 101ca50:	e0bffd17 	ldw	r2,-12(fp)
 101ca54:	10800017 	ldw	r2,0(r2)
 101ca58:	10800104 	addi	r2,r2,4
 101ca5c:	10800037 	ldwio	r2,0(r2)
 101ca60:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 101ca64:	e0bffc17 	ldw	r2,-16(fp)
 101ca68:	1081000c 	andi	r2,r2,1024
 101ca6c:	1005003a 	cmpeq	r2,r2,zero
 101ca70:	10000c1e 	bne	r2,zero,101caa4 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 101ca74:	e0bffd17 	ldw	r2,-12(fp)
 101ca78:	10800017 	ldw	r2,0(r2)
 101ca7c:	11000104 	addi	r4,r2,4
 101ca80:	e0bffd17 	ldw	r2,-12(fp)
 101ca84:	10800817 	ldw	r2,32(r2)
 101ca88:	10810014 	ori	r2,r2,1024
 101ca8c:	1007883a 	mov	r3,r2
 101ca90:	2005883a 	mov	r2,r4
 101ca94:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 101ca98:	e0bffd17 	ldw	r2,-12(fp)
 101ca9c:	10000915 	stw	zero,36(r2)
 101caa0:	00002106 	br	101cb28 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 101caa4:	e0bffd17 	ldw	r2,-12(fp)
 101caa8:	10c00917 	ldw	r3,36(r2)
 101caac:	00a00034 	movhi	r2,32768
 101cab0:	10bfff04 	addi	r2,r2,-4
 101cab4:	10c01c36 	bltu	r2,r3,101cb28 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 101cab8:	e0bffd17 	ldw	r2,-12(fp)
 101cabc:	10800917 	ldw	r2,36(r2)
 101cac0:	10c00044 	addi	r3,r2,1
 101cac4:	e0bffd17 	ldw	r2,-12(fp)
 101cac8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 101cacc:	e0bffd17 	ldw	r2,-12(fp)
 101cad0:	10c00917 	ldw	r3,36(r2)
 101cad4:	e0bffd17 	ldw	r2,-12(fp)
 101cad8:	10800117 	ldw	r2,4(r2)
 101cadc:	18801236 	bltu	r3,r2,101cb28 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 101cae0:	e0bffd17 	ldw	r2,-12(fp)
 101cae4:	10800c17 	ldw	r2,48(r2)
 101cae8:	e0bffa15 	stw	r2,-24(fp)
 101caec:	00800104 	movi	r2,4
 101caf0:	e0bffb0d 	sth	r2,-20(fp)
 101caf4:	00800044 	movi	r2,1
 101caf8:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 101cafc:	008040b4 	movhi	r2,258
 101cb00:	108bb844 	addi	r2,r2,12001
 101cb04:	10800003 	ldbu	r2,0(r2)
 101cb08:	10803fcc 	andi	r2,r2,255
 101cb0c:	1005003a 	cmpeq	r2,r2,zero
 101cb10:	1000051e 	bne	r2,zero,101cb28 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 101cb14:	e17ffb0b 	ldhu	r5,-20(fp)
 101cb18:	e1bffb83 	ldbu	r6,-18(fp)
 101cb1c:	e1fffe04 	addi	r7,fp,-8
 101cb20:	e13ffa17 	ldw	r4,-24(fp)
 101cb24:	10174600 	call	1017460 <OSFlagPost>
 101cb28:	008040b4 	movhi	r2,258
 101cb2c:	108bcd04 	addi	r2,r2,12084
 101cb30:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 101cb34:	e037883a 	mov	sp,fp
 101cb38:	dfc00117 	ldw	ra,4(sp)
 101cb3c:	df000017 	ldw	fp,0(sp)
 101cb40:	dec00204 	addi	sp,sp,8
 101cb44:	f800283a 	ret

0101cb48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 101cb48:	defffc04 	addi	sp,sp,-16
 101cb4c:	df000315 	stw	fp,12(sp)
 101cb50:	df000304 	addi	fp,sp,12
 101cb54:	e13ffd15 	stw	r4,-12(fp)
 101cb58:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 101cb5c:	00000706 	br	101cb7c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 101cb60:	e0bffe17 	ldw	r2,-8(fp)
 101cb64:	1090000c 	andi	r2,r2,16384
 101cb68:	1005003a 	cmpeq	r2,r2,zero
 101cb6c:	1000031e 	bne	r2,zero,101cb7c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 101cb70:	00bffd44 	movi	r2,-11
 101cb74:	e0bfff15 	stw	r2,-4(fp)
 101cb78:	00000b06 	br	101cba8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 101cb7c:	e0bffd17 	ldw	r2,-12(fp)
 101cb80:	10c01017 	ldw	r3,64(r2)
 101cb84:	e0bffd17 	ldw	r2,-12(fp)
 101cb88:	10800f17 	ldw	r2,60(r2)
 101cb8c:	18800526 	beq	r3,r2,101cba4 <altera_avalon_jtag_uart_close+0x5c>
 101cb90:	e0bffd17 	ldw	r2,-12(fp)
 101cb94:	10c00917 	ldw	r3,36(r2)
 101cb98:	e0bffd17 	ldw	r2,-12(fp)
 101cb9c:	10800117 	ldw	r2,4(r2)
 101cba0:	18bfef36 	bltu	r3,r2,101cb60 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 101cba4:	e03fff15 	stw	zero,-4(fp)
 101cba8:	e0bfff17 	ldw	r2,-4(fp)
}
 101cbac:	e037883a 	mov	sp,fp
 101cbb0:	df000017 	ldw	fp,0(sp)
 101cbb4:	dec00104 	addi	sp,sp,4
 101cbb8:	f800283a 	ret

0101cbbc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 101cbbc:	defff804 	addi	sp,sp,-32
 101cbc0:	df000715 	stw	fp,28(sp)
 101cbc4:	df000704 	addi	fp,sp,28
 101cbc8:	e13ffb15 	stw	r4,-20(fp)
 101cbcc:	e17ffc15 	stw	r5,-16(fp)
 101cbd0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 101cbd4:	00bff9c4 	movi	r2,-25
 101cbd8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 101cbdc:	e0bffc17 	ldw	r2,-16(fp)
 101cbe0:	e0bfff15 	stw	r2,-4(fp)
 101cbe4:	e0ffff17 	ldw	r3,-4(fp)
 101cbe8:	189a8060 	cmpeqi	r2,r3,27137
 101cbec:	1000041e 	bne	r2,zero,101cc00 <altera_avalon_jtag_uart_ioctl+0x44>
 101cbf0:	e0ffff17 	ldw	r3,-4(fp)
 101cbf4:	189a80a0 	cmpeqi	r2,r3,27138
 101cbf8:	10001b1e 	bne	r2,zero,101cc68 <altera_avalon_jtag_uart_ioctl+0xac>
 101cbfc:	00002706 	br	101cc9c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 101cc00:	e0bffb17 	ldw	r2,-20(fp)
 101cc04:	10c00117 	ldw	r3,4(r2)
 101cc08:	00a00034 	movhi	r2,32768
 101cc0c:	10bfffc4 	addi	r2,r2,-1
 101cc10:	18802226 	beq	r3,r2,101cc9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 101cc14:	e0bffd17 	ldw	r2,-12(fp)
 101cc18:	10800017 	ldw	r2,0(r2)
 101cc1c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 101cc20:	e0bff917 	ldw	r2,-28(fp)
 101cc24:	10800090 	cmplti	r2,r2,2
 101cc28:	1000071e 	bne	r2,zero,101cc48 <altera_avalon_jtag_uart_ioctl+0x8c>
 101cc2c:	e0fff917 	ldw	r3,-28(fp)
 101cc30:	00a00034 	movhi	r2,32768
 101cc34:	10bfffc4 	addi	r2,r2,-1
 101cc38:	18800326 	beq	r3,r2,101cc48 <altera_avalon_jtag_uart_ioctl+0x8c>
 101cc3c:	e0bff917 	ldw	r2,-28(fp)
 101cc40:	e0bffe15 	stw	r2,-8(fp)
 101cc44:	00000306 	br	101cc54 <altera_avalon_jtag_uart_ioctl+0x98>
 101cc48:	00e00034 	movhi	r3,32768
 101cc4c:	18ffff84 	addi	r3,r3,-2
 101cc50:	e0fffe15 	stw	r3,-8(fp)
 101cc54:	e0bffb17 	ldw	r2,-20(fp)
 101cc58:	e0fffe17 	ldw	r3,-8(fp)
 101cc5c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 101cc60:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 101cc64:	00000d06 	br	101cc9c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 101cc68:	e0bffb17 	ldw	r2,-20(fp)
 101cc6c:	10c00117 	ldw	r3,4(r2)
 101cc70:	00a00034 	movhi	r2,32768
 101cc74:	10bfffc4 	addi	r2,r2,-1
 101cc78:	18800826 	beq	r3,r2,101cc9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 101cc7c:	e13ffd17 	ldw	r4,-12(fp)
 101cc80:	e0bffb17 	ldw	r2,-20(fp)
 101cc84:	10c00917 	ldw	r3,36(r2)
 101cc88:	e0bffb17 	ldw	r2,-20(fp)
 101cc8c:	10800117 	ldw	r2,4(r2)
 101cc90:	1885803a 	cmpltu	r2,r3,r2
 101cc94:	20800015 	stw	r2,0(r4)
      rc = 0;
 101cc98:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 101cc9c:	e0bffa17 	ldw	r2,-24(fp)
}
 101cca0:	e037883a 	mov	sp,fp
 101cca4:	df000017 	ldw	fp,0(sp)
 101cca8:	dec00104 	addi	sp,sp,4
 101ccac:	f800283a 	ret

0101ccb0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 101ccb0:	deffeb04 	addi	sp,sp,-84
 101ccb4:	dfc01415 	stw	ra,80(sp)
 101ccb8:	df001315 	stw	fp,76(sp)
 101ccbc:	df001304 	addi	fp,sp,76
 101ccc0:	e13ffb15 	stw	r4,-20(fp)
 101ccc4:	e17ffc15 	stw	r5,-16(fp)
 101ccc8:	e1bffd15 	stw	r6,-12(fp)
 101cccc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 101ccd0:	e0bffc17 	ldw	r2,-16(fp)
 101ccd4:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 101ccd8:	e0bffb17 	ldw	r2,-20(fp)
 101ccdc:	10800a17 	ldw	r2,40(r2)
 101cce0:	e0bff315 	stw	r2,-52(fp)
 101cce4:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 101cce8:	e17ff40b 	ldhu	r5,-48(fp)
 101ccec:	e1bffa44 	addi	r6,fp,-23
 101ccf0:	e13ff317 	ldw	r4,-52(fp)
 101ccf4:	1019cf00 	call	1019cf0 <OSSemPend>

  while (space > 0)
 101ccf8:	00006406 	br	101ce8c <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 101ccfc:	e0bffb17 	ldw	r2,-20(fp)
 101cd00:	10800d17 	ldw	r2,52(r2)
 101cd04:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 101cd08:	e0bffb17 	ldw	r2,-20(fp)
 101cd0c:	10800e17 	ldw	r2,56(r2)
 101cd10:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 101cd14:	e0fff617 	ldw	r3,-40(fp)
 101cd18:	e0bff517 	ldw	r2,-44(fp)
 101cd1c:	18800536 	bltu	r3,r2,101cd34 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 101cd20:	e0bff617 	ldw	r2,-40(fp)
 101cd24:	e0fff517 	ldw	r3,-44(fp)
 101cd28:	10c5c83a 	sub	r2,r2,r3
 101cd2c:	e0bff715 	stw	r2,-36(fp)
 101cd30:	00000406 	br	101cd44 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 101cd34:	00820004 	movi	r2,2048
 101cd38:	e0fff517 	ldw	r3,-44(fp)
 101cd3c:	10c5c83a 	sub	r2,r2,r3
 101cd40:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 101cd44:	e0bff717 	ldw	r2,-36(fp)
 101cd48:	1005003a 	cmpeq	r2,r2,zero
 101cd4c:	10001f1e 	bne	r2,zero,101cdcc <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 101cd50:	e0fffd17 	ldw	r3,-12(fp)
 101cd54:	e0bff717 	ldw	r2,-36(fp)
 101cd58:	1880022e 	bgeu	r3,r2,101cd64 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 101cd5c:	e0bffd17 	ldw	r2,-12(fp)
 101cd60:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 101cd64:	e0bffb17 	ldw	r2,-20(fp)
 101cd68:	10c01104 	addi	r3,r2,68
 101cd6c:	e0bff517 	ldw	r2,-44(fp)
 101cd70:	1887883a 	add	r3,r3,r2
 101cd74:	e0bff917 	ldw	r2,-28(fp)
 101cd78:	1009883a 	mov	r4,r2
 101cd7c:	180b883a 	mov	r5,r3
 101cd80:	e1bff717 	ldw	r6,-36(fp)
 101cd84:	1009f8c0 	call	1009f8c <memcpy>
      ptr   += n;
 101cd88:	e0fff717 	ldw	r3,-36(fp)
 101cd8c:	e0bff917 	ldw	r2,-28(fp)
 101cd90:	10c5883a 	add	r2,r2,r3
 101cd94:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 101cd98:	e0fffd17 	ldw	r3,-12(fp)
 101cd9c:	e0bff717 	ldw	r2,-36(fp)
 101cda0:	1885c83a 	sub	r2,r3,r2
 101cda4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101cda8:	e0fff517 	ldw	r3,-44(fp)
 101cdac:	e0bff717 	ldw	r2,-36(fp)
 101cdb0:	1885883a 	add	r2,r3,r2
 101cdb4:	10c1ffcc 	andi	r3,r2,2047
 101cdb8:	e0bffb17 	ldw	r2,-20(fp)
 101cdbc:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 101cdc0:	e0bffd17 	ldw	r2,-12(fp)
 101cdc4:	10800048 	cmpgei	r2,r2,1
 101cdc8:	103fcc1e 	bne	r2,zero,101ccfc <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 101cdcc:	e0fff917 	ldw	r3,-28(fp)
 101cdd0:	e0bffc17 	ldw	r2,-16(fp)
 101cdd4:	1880301e 	bne	r3,r2,101ce98 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 101cdd8:	e0bffe17 	ldw	r2,-8(fp)
 101cddc:	1090000c 	andi	r2,r2,16384
 101cde0:	1004c03a 	cmpne	r2,r2,zero
 101cde4:	10002c1e 	bne	r2,zero,101ce98 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 101cde8:	008040b4 	movhi	r2,258
 101cdec:	108bb844 	addi	r2,r2,12001
 101cdf0:	10800003 	ldbu	r2,0(r2)
 101cdf4:	10803fcc 	andi	r2,r2,255
 101cdf8:	10800058 	cmpnei	r2,r2,1
 101cdfc:	1000161e 	bne	r2,zero,101ce58 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 101ce00:	e0bffb17 	ldw	r2,-20(fp)
 101ce04:	10800c17 	ldw	r2,48(r2)
 101ce08:	e0bff015 	stw	r2,-64(fp)
 101ce0c:	00800144 	movi	r2,5
 101ce10:	e0bff10d 	sth	r2,-60(fp)
 101ce14:	00bfe0c4 	movi	r2,-125
 101ce18:	e0bff185 	stb	r2,-58(fp)
 101ce1c:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 101ce20:	008040b4 	movhi	r2,258
 101ce24:	108bb844 	addi	r2,r2,12001
 101ce28:	10800003 	ldbu	r2,0(r2)
 101ce2c:	10803fcc 	andi	r2,r2,255
 101ce30:	1005003a 	cmpeq	r2,r2,zero
 101ce34:	1000111e 	bne	r2,zero,101ce7c <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 101ce38:	e17ff10b 	ldhu	r5,-60(fp)
 101ce3c:	e1bff183 	ldbu	r6,-58(fp)
 101ce40:	e1fff20b 	ldhu	r7,-56(fp)
 101ce44:	e0bffa04 	addi	r2,fp,-24
 101ce48:	d8800015 	stw	r2,0(sp)
 101ce4c:	e13ff017 	ldw	r4,-64(fp)
 101ce50:	1016db40 	call	1016db4 <OSFlagPend>
    return err;
 101ce54:	00000906 	br	101ce7c <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 101ce58:	e0bffb17 	ldw	r2,-20(fp)
 101ce5c:	10c00d17 	ldw	r3,52(r2)
 101ce60:	e0bff617 	ldw	r2,-40(fp)
 101ce64:	1880051e 	bne	r3,r2,101ce7c <altera_avalon_jtag_uart_read+0x1cc>
 101ce68:	e0bffb17 	ldw	r2,-20(fp)
 101ce6c:	10c00917 	ldw	r3,36(r2)
 101ce70:	e0bffb17 	ldw	r2,-20(fp)
 101ce74:	10800117 	ldw	r2,4(r2)
 101ce78:	18bff736 	bltu	r3,r2,101ce58 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 101ce7c:	e0bffb17 	ldw	r2,-20(fp)
 101ce80:	10c00d17 	ldw	r3,52(r2)
 101ce84:	e0bff617 	ldw	r2,-40(fp)
 101ce88:	18800326 	beq	r3,r2,101ce98 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 101ce8c:	e0bffd17 	ldw	r2,-12(fp)
 101ce90:	10800048 	cmpgei	r2,r2,1
 101ce94:	103f991e 	bne	r2,zero,101ccfc <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 101ce98:	e0bffb17 	ldw	r2,-20(fp)
 101ce9c:	11000a17 	ldw	r4,40(r2)
 101cea0:	101a0e80 	call	101a0e8 <OSSemPost>

  if (ptr != buffer)
 101cea4:	e0fff917 	ldw	r3,-28(fp)
 101cea8:	e0bffc17 	ldw	r2,-16(fp)
 101ceac:	18801926 	beq	r3,r2,101cf14 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ceb0:	0005303a 	rdctl	r2,status
 101ceb4:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ceb8:	e0ffef17 	ldw	r3,-68(fp)
 101cebc:	00bfff84 	movi	r2,-2
 101cec0:	1884703a 	and	r2,r3,r2
 101cec4:	1001703a 	wrctl	status,r2
  
  return context;
 101cec8:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 101cecc:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101ced0:	e0bffb17 	ldw	r2,-20(fp)
 101ced4:	10800817 	ldw	r2,32(r2)
 101ced8:	10c00054 	ori	r3,r2,1
 101cedc:	e0bffb17 	ldw	r2,-20(fp)
 101cee0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101cee4:	e0bffb17 	ldw	r2,-20(fp)
 101cee8:	10800017 	ldw	r2,0(r2)
 101ceec:	11000104 	addi	r4,r2,4
 101cef0:	e0bffb17 	ldw	r2,-20(fp)
 101cef4:	10800817 	ldw	r2,32(r2)
 101cef8:	1007883a 	mov	r3,r2
 101cefc:	2005883a 	mov	r2,r4
 101cf00:	10c00035 	stwio	r3,0(r2)
 101cf04:	e0bff817 	ldw	r2,-32(fp)
 101cf08:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101cf0c:	e0bfee17 	ldw	r2,-72(fp)
 101cf10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 101cf14:	e0fff917 	ldw	r3,-28(fp)
 101cf18:	e0bffc17 	ldw	r2,-16(fp)
 101cf1c:	18800526 	beq	r3,r2,101cf34 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 101cf20:	e0fff917 	ldw	r3,-28(fp)
 101cf24:	e0bffc17 	ldw	r2,-16(fp)
 101cf28:	1887c83a 	sub	r3,r3,r2
 101cf2c:	e0ffff15 	stw	r3,-4(fp)
 101cf30:	00000906 	br	101cf58 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 101cf34:	e0bffe17 	ldw	r2,-8(fp)
 101cf38:	1090000c 	andi	r2,r2,16384
 101cf3c:	1005003a 	cmpeq	r2,r2,zero
 101cf40:	1000031e 	bne	r2,zero,101cf50 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 101cf44:	00bffd44 	movi	r2,-11
 101cf48:	e0bfff15 	stw	r2,-4(fp)
 101cf4c:	00000206 	br	101cf58 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 101cf50:	00bffec4 	movi	r2,-5
 101cf54:	e0bfff15 	stw	r2,-4(fp)
 101cf58:	e0bfff17 	ldw	r2,-4(fp)
}
 101cf5c:	e037883a 	mov	sp,fp
 101cf60:	dfc00117 	ldw	ra,4(sp)
 101cf64:	df000017 	ldw	fp,0(sp)
 101cf68:	dec00204 	addi	sp,sp,8
 101cf6c:	f800283a 	ret

0101cf70 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 101cf70:	deffeb04 	addi	sp,sp,-84
 101cf74:	dfc01415 	stw	ra,80(sp)
 101cf78:	df001315 	stw	fp,76(sp)
 101cf7c:	df001304 	addi	fp,sp,76
 101cf80:	e13ffb15 	stw	r4,-20(fp)
 101cf84:	e17ffc15 	stw	r5,-16(fp)
 101cf88:	e1bffd15 	stw	r6,-12(fp)
 101cf8c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 101cf90:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 101cf94:	e0bffc17 	ldw	r2,-16(fp)
 101cf98:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 101cf9c:	e0bffb17 	ldw	r2,-20(fp)
 101cfa0:	10800b17 	ldw	r2,44(r2)
 101cfa4:	e0bff315 	stw	r2,-52(fp)
 101cfa8:	e03ff40d 	sth	zero,-48(fp)
 101cfac:	e17ff40b 	ldhu	r5,-48(fp)
 101cfb0:	e1bffa04 	addi	r6,fp,-24
 101cfb4:	e13ff317 	ldw	r4,-52(fp)
 101cfb8:	1019cf00 	call	1019cf0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 101cfbc:	00003a06 	br	101d0a8 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 101cfc0:	e0bffb17 	ldw	r2,-20(fp)
 101cfc4:	10800f17 	ldw	r2,60(r2)
 101cfc8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 101cfcc:	e0bffb17 	ldw	r2,-20(fp)
 101cfd0:	10801017 	ldw	r2,64(r2)
 101cfd4:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 101cfd8:	e0fff917 	ldw	r3,-28(fp)
 101cfdc:	e0bff817 	ldw	r2,-32(fp)
 101cfe0:	1880062e 	bgeu	r3,r2,101cffc <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 101cfe4:	e0fff817 	ldw	r3,-32(fp)
 101cfe8:	e0bff917 	ldw	r2,-28(fp)
 101cfec:	1885c83a 	sub	r2,r3,r2
 101cff0:	10bfffc4 	addi	r2,r2,-1
 101cff4:	e0bff715 	stw	r2,-36(fp)
 101cff8:	00000c06 	br	101d02c <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 101cffc:	e0bff817 	ldw	r2,-32(fp)
 101d000:	1005003a 	cmpeq	r2,r2,zero
 101d004:	1000051e 	bne	r2,zero,101d01c <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 101d008:	00820004 	movi	r2,2048
 101d00c:	e0fff917 	ldw	r3,-28(fp)
 101d010:	10c5c83a 	sub	r2,r2,r3
 101d014:	e0bff715 	stw	r2,-36(fp)
 101d018:	00000406 	br	101d02c <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 101d01c:	0081ffc4 	movi	r2,2047
 101d020:	e0fff917 	ldw	r3,-28(fp)
 101d024:	10c5c83a 	sub	r2,r2,r3
 101d028:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 101d02c:	e0bff717 	ldw	r2,-36(fp)
 101d030:	1005003a 	cmpeq	r2,r2,zero
 101d034:	10001f1e 	bne	r2,zero,101d0b4 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 101d038:	e0fffd17 	ldw	r3,-12(fp)
 101d03c:	e0bff717 	ldw	r2,-36(fp)
 101d040:	1880022e 	bgeu	r3,r2,101d04c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 101d044:	e0bffd17 	ldw	r2,-12(fp)
 101d048:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 101d04c:	e0bffb17 	ldw	r2,-20(fp)
 101d050:	10c21104 	addi	r3,r2,2116
 101d054:	e0bff917 	ldw	r2,-28(fp)
 101d058:	1885883a 	add	r2,r3,r2
 101d05c:	e0fffc17 	ldw	r3,-16(fp)
 101d060:	1009883a 	mov	r4,r2
 101d064:	180b883a 	mov	r5,r3
 101d068:	e1bff717 	ldw	r6,-36(fp)
 101d06c:	1009f8c0 	call	1009f8c <memcpy>
      ptr   += n;
 101d070:	e0fff717 	ldw	r3,-36(fp)
 101d074:	e0bffc17 	ldw	r2,-16(fp)
 101d078:	10c5883a 	add	r2,r2,r3
 101d07c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 101d080:	e0fffd17 	ldw	r3,-12(fp)
 101d084:	e0bff717 	ldw	r2,-36(fp)
 101d088:	1885c83a 	sub	r2,r3,r2
 101d08c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101d090:	e0fff917 	ldw	r3,-28(fp)
 101d094:	e0bff717 	ldw	r2,-36(fp)
 101d098:	1885883a 	add	r2,r3,r2
 101d09c:	10c1ffcc 	andi	r3,r2,2047
 101d0a0:	e0bffb17 	ldw	r2,-20(fp)
 101d0a4:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 101d0a8:	e0bffd17 	ldw	r2,-12(fp)
 101d0ac:	10800048 	cmpgei	r2,r2,1
 101d0b0:	103fc31e 	bne	r2,zero,101cfc0 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d0b4:	0005303a 	rdctl	r2,status
 101d0b8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d0bc:	e0fff217 	ldw	r3,-56(fp)
 101d0c0:	00bfff84 	movi	r2,-2
 101d0c4:	1884703a 	and	r2,r3,r2
 101d0c8:	1001703a 	wrctl	status,r2
  
  return context;
 101d0cc:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 101d0d0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 101d0d4:	e0bffb17 	ldw	r2,-20(fp)
 101d0d8:	10800817 	ldw	r2,32(r2)
 101d0dc:	10c00094 	ori	r3,r2,2
 101d0e0:	e0bffb17 	ldw	r2,-20(fp)
 101d0e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101d0e8:	e0bffb17 	ldw	r2,-20(fp)
 101d0ec:	10800017 	ldw	r2,0(r2)
 101d0f0:	11000104 	addi	r4,r2,4
 101d0f4:	e0bffb17 	ldw	r2,-20(fp)
 101d0f8:	10800817 	ldw	r2,32(r2)
 101d0fc:	1007883a 	mov	r3,r2
 101d100:	2005883a 	mov	r2,r4
 101d104:	10c00035 	stwio	r3,0(r2)
 101d108:	e0bff617 	ldw	r2,-40(fp)
 101d10c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d110:	e0bff117 	ldw	r2,-60(fp)
 101d114:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 101d118:	e0bffd17 	ldw	r2,-12(fp)
 101d11c:	10800050 	cmplti	r2,r2,1
 101d120:	10002d1e 	bne	r2,zero,101d1d8 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 101d124:	e0bffe17 	ldw	r2,-8(fp)
 101d128:	1090000c 	andi	r2,r2,16384
 101d12c:	1004c03a 	cmpne	r2,r2,zero
 101d130:	10002c1e 	bne	r2,zero,101d1e4 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 101d134:	008040b4 	movhi	r2,258
 101d138:	108bb844 	addi	r2,r2,12001
 101d13c:	10800003 	ldbu	r2,0(r2)
 101d140:	10803fcc 	andi	r2,r2,255
 101d144:	10800058 	cmpnei	r2,r2,1
 101d148:	1000161e 	bne	r2,zero,101d1a4 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
 101d14c:	e0bffb17 	ldw	r2,-20(fp)
 101d150:	10800c17 	ldw	r2,48(r2)
 101d154:	e0bfee15 	stw	r2,-72(fp)
 101d158:	00800184 	movi	r2,6
 101d15c:	e0bfef0d 	sth	r2,-68(fp)
 101d160:	00bfe0c4 	movi	r2,-125
 101d164:	e0bfef85 	stb	r2,-66(fp)
 101d168:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 101d16c:	008040b4 	movhi	r2,258
 101d170:	108bb844 	addi	r2,r2,12001
 101d174:	10800003 	ldbu	r2,0(r2)
 101d178:	10803fcc 	andi	r2,r2,255
 101d17c:	1005003a 	cmpeq	r2,r2,zero
 101d180:	1000111e 	bne	r2,zero,101d1c8 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 101d184:	e17fef0b 	ldhu	r5,-68(fp)
 101d188:	e1bfef83 	ldbu	r6,-66(fp)
 101d18c:	e1fff00b 	ldhu	r7,-64(fp)
 101d190:	e0bffa44 	addi	r2,fp,-23
 101d194:	d8800015 	stw	r2,0(sp)
 101d198:	e13fee17 	ldw	r4,-72(fp)
 101d19c:	1016db40 	call	1016db4 <OSFlagPend>
    return err;
 101d1a0:	00000906 	br	101d1c8 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 101d1a4:	e0bffb17 	ldw	r2,-20(fp)
 101d1a8:	10c01017 	ldw	r3,64(r2)
 101d1ac:	e0bff817 	ldw	r2,-32(fp)
 101d1b0:	1880051e 	bne	r3,r2,101d1c8 <altera_avalon_jtag_uart_write+0x258>
 101d1b4:	e0bffb17 	ldw	r2,-20(fp)
 101d1b8:	10c00917 	ldw	r3,36(r2)
 101d1bc:	e0bffb17 	ldw	r2,-20(fp)
 101d1c0:	10800117 	ldw	r2,4(r2)
 101d1c4:	18bff736 	bltu	r3,r2,101d1a4 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 101d1c8:	e0bffb17 	ldw	r2,-20(fp)
 101d1cc:	10c01017 	ldw	r3,64(r2)
 101d1d0:	e0bff817 	ldw	r2,-32(fp)
 101d1d4:	18800326 	beq	r3,r2,101d1e4 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
 101d1d8:	e0bffd17 	ldw	r2,-12(fp)
 101d1dc:	10800048 	cmpgei	r2,r2,1
 101d1e0:	103fb11e 	bne	r2,zero,101d0a8 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 101d1e4:	e0bffb17 	ldw	r2,-20(fp)
 101d1e8:	11000b17 	ldw	r4,44(r2)
 101d1ec:	101a0e80 	call	101a0e8 <OSSemPost>

  if (ptr != start)
 101d1f0:	e0fffc17 	ldw	r3,-16(fp)
 101d1f4:	e0bff517 	ldw	r2,-44(fp)
 101d1f8:	18800526 	beq	r3,r2,101d210 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 101d1fc:	e0fffc17 	ldw	r3,-16(fp)
 101d200:	e0bff517 	ldw	r2,-44(fp)
 101d204:	1887c83a 	sub	r3,r3,r2
 101d208:	e0ffff15 	stw	r3,-4(fp)
 101d20c:	00000906 	br	101d234 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 101d210:	e0bffe17 	ldw	r2,-8(fp)
 101d214:	1090000c 	andi	r2,r2,16384
 101d218:	1005003a 	cmpeq	r2,r2,zero
 101d21c:	1000031e 	bne	r2,zero,101d22c <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 101d220:	00bffd44 	movi	r2,-11
 101d224:	e0bfff15 	stw	r2,-4(fp)
 101d228:	00000206 	br	101d234 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
 101d22c:	00bffec4 	movi	r2,-5
 101d230:	e0bfff15 	stw	r2,-4(fp)
 101d234:	e0bfff17 	ldw	r2,-4(fp)
}
 101d238:	e037883a 	mov	sp,fp
 101d23c:	dfc00117 	ldw	ra,4(sp)
 101d240:	df000017 	ldw	fp,0(sp)
 101d244:	dec00204 	addi	sp,sp,8
 101d248:	f800283a 	ret

0101d24c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 101d24c:	defffa04 	addi	sp,sp,-24
 101d250:	dfc00515 	stw	ra,20(sp)
 101d254:	df000415 	stw	fp,16(sp)
 101d258:	df000404 	addi	fp,sp,16
 101d25c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 101d260:	e0bfff17 	ldw	r2,-4(fp)
 101d264:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 101d268:	e0bfff17 	ldw	r2,-4(fp)
 101d26c:	10800104 	addi	r2,r2,4
 101d270:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d274:	0005303a 	rdctl	r2,status
 101d278:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d27c:	e0fffd17 	ldw	r3,-12(fp)
 101d280:	00bfff84 	movi	r2,-2
 101d284:	1884703a 	and	r2,r3,r2
 101d288:	1001703a 	wrctl	status,r2
  
  return context;
 101d28c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 101d290:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 101d294:	101de540 	call	101de54 <alt_tick>
 101d298:	e0bffe17 	ldw	r2,-8(fp)
 101d29c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d2a0:	e0bffc17 	ldw	r2,-16(fp)
 101d2a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 101d2a8:	e037883a 	mov	sp,fp
 101d2ac:	dfc00117 	ldw	ra,4(sp)
 101d2b0:	df000017 	ldw	fp,0(sp)
 101d2b4:	dec00204 	addi	sp,sp,8
 101d2b8:	f800283a 	ret

0101d2bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 101d2bc:	defff804 	addi	sp,sp,-32
 101d2c0:	dfc00715 	stw	ra,28(sp)
 101d2c4:	df000615 	stw	fp,24(sp)
 101d2c8:	df000604 	addi	fp,sp,24
 101d2cc:	e13ffc15 	stw	r4,-16(fp)
 101d2d0:	e17ffd15 	stw	r5,-12(fp)
 101d2d4:	e1bffe15 	stw	r6,-8(fp)
 101d2d8:	e1ffff15 	stw	r7,-4(fp)
 101d2dc:	e0bfff17 	ldw	r2,-4(fp)
 101d2e0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 101d2e4:	008040b4 	movhi	r2,258
 101d2e8:	108bcd04 	addi	r2,r2,12084
 101d2ec:	10800017 	ldw	r2,0(r2)
 101d2f0:	1004c03a 	cmpne	r2,r2,zero
 101d2f4:	1000041e 	bne	r2,zero,101d308 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 101d2f8:	00c040b4 	movhi	r3,258
 101d2fc:	18cbcd04 	addi	r3,r3,12084
 101d300:	e0bffb17 	ldw	r2,-20(fp)
 101d304:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 101d308:	e0bffc17 	ldw	r2,-16(fp)
 101d30c:	10800104 	addi	r2,r2,4
 101d310:	1007883a 	mov	r3,r2
 101d314:	008001c4 	movi	r2,7
 101d318:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 101d31c:	d8000015 	stw	zero,0(sp)
 101d320:	e13ffd17 	ldw	r4,-12(fp)
 101d324:	e17ffe17 	ldw	r5,-8(fp)
 101d328:	018040b4 	movhi	r6,258
 101d32c:	31b49304 	addi	r6,r6,-11700
 101d330:	e1fffc17 	ldw	r7,-16(fp)
 101d334:	101d6f00 	call	101d6f0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 101d338:	e037883a 	mov	sp,fp
 101d33c:	dfc00117 	ldw	ra,4(sp)
 101d340:	df000017 	ldw	fp,0(sp)
 101d344:	dec00204 	addi	sp,sp,8
 101d348:	f800283a 	ret

0101d34c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 101d34c:	defff404 	addi	sp,sp,-48
 101d350:	df000b15 	stw	fp,44(sp)
 101d354:	df000b04 	addi	fp,sp,44
 101d358:	e13ffb15 	stw	r4,-20(fp)
 101d35c:	e17ffc15 	stw	r5,-16(fp)
 101d360:	e1bffd15 	stw	r6,-12(fp)
 101d364:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 101d368:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 101d36c:	008040b4 	movhi	r2,258
 101d370:	108bcd04 	addi	r2,r2,12084
 101d374:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 101d378:	1005003a 	cmpeq	r2,r2,zero
 101d37c:	1000411e 	bne	r2,zero,101d484 <alt_alarm_start+0x138>
  {
    if (alarm)
 101d380:	e0bffb17 	ldw	r2,-20(fp)
 101d384:	1005003a 	cmpeq	r2,r2,zero
 101d388:	10003b1e 	bne	r2,zero,101d478 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 101d38c:	e0fffb17 	ldw	r3,-20(fp)
 101d390:	e0bffd17 	ldw	r2,-12(fp)
 101d394:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 101d398:	e0fffb17 	ldw	r3,-20(fp)
 101d39c:	e0bffe17 	ldw	r2,-8(fp)
 101d3a0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d3a4:	0005303a 	rdctl	r2,status
 101d3a8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d3ac:	e0fff817 	ldw	r3,-32(fp)
 101d3b0:	00bfff84 	movi	r2,-2
 101d3b4:	1884703a 	and	r2,r3,r2
 101d3b8:	1001703a 	wrctl	status,r2
  
  return context;
 101d3bc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 101d3c0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 101d3c4:	008040b4 	movhi	r2,258
 101d3c8:	108bce04 	addi	r2,r2,12088
 101d3cc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 101d3d0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 101d3d4:	e0fffc17 	ldw	r3,-16(fp)
 101d3d8:	e0bff917 	ldw	r2,-28(fp)
 101d3dc:	1885883a 	add	r2,r3,r2
 101d3e0:	10c00044 	addi	r3,r2,1
 101d3e4:	e0bffb17 	ldw	r2,-20(fp)
 101d3e8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 101d3ec:	e0bffb17 	ldw	r2,-20(fp)
 101d3f0:	10c00217 	ldw	r3,8(r2)
 101d3f4:	e0bff917 	ldw	r2,-28(fp)
 101d3f8:	1880042e 	bgeu	r3,r2,101d40c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 101d3fc:	e0fffb17 	ldw	r3,-20(fp)
 101d400:	00800044 	movi	r2,1
 101d404:	18800405 	stb	r2,16(r3)
 101d408:	00000206 	br	101d414 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 101d40c:	e0bffb17 	ldw	r2,-20(fp)
 101d410:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 101d414:	e0fffb17 	ldw	r3,-20(fp)
 101d418:	008040b4 	movhi	r2,258
 101d41c:	1084cd04 	addi	r2,r2,4916
 101d420:	e0bff615 	stw	r2,-40(fp)
 101d424:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101d428:	e0fff717 	ldw	r3,-36(fp)
 101d42c:	e0bff617 	ldw	r2,-40(fp)
 101d430:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 101d434:	e0bff617 	ldw	r2,-40(fp)
 101d438:	10c00017 	ldw	r3,0(r2)
 101d43c:	e0bff717 	ldw	r2,-36(fp)
 101d440:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 101d444:	e0bff617 	ldw	r2,-40(fp)
 101d448:	10c00017 	ldw	r3,0(r2)
 101d44c:	e0bff717 	ldw	r2,-36(fp)
 101d450:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 101d454:	e0fff617 	ldw	r3,-40(fp)
 101d458:	e0bff717 	ldw	r2,-36(fp)
 101d45c:	18800015 	stw	r2,0(r3)
 101d460:	e0bffa17 	ldw	r2,-24(fp)
 101d464:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d468:	e0bff517 	ldw	r2,-44(fp)
 101d46c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 101d470:	e03fff15 	stw	zero,-4(fp)
 101d474:	00000506 	br	101d48c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 101d478:	00bffa84 	movi	r2,-22
 101d47c:	e0bfff15 	stw	r2,-4(fp)
 101d480:	00000206 	br	101d48c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 101d484:	00bfde84 	movi	r2,-134
 101d488:	e0bfff15 	stw	r2,-4(fp)
 101d48c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 101d490:	e037883a 	mov	sp,fp
 101d494:	df000017 	ldw	fp,0(sp)
 101d498:	dec00104 	addi	sp,sp,4
 101d49c:	f800283a 	ret

0101d4a0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 101d4a0:	defffe04 	addi	sp,sp,-8
 101d4a4:	df000115 	stw	fp,4(sp)
 101d4a8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 101d4ac:	e03fff15 	stw	zero,-4(fp)
 101d4b0:	00000506 	br	101d4c8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 101d4b4:	e0bfff17 	ldw	r2,-4(fp)
 101d4b8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 101d4bc:	e0bfff17 	ldw	r2,-4(fp)
 101d4c0:	10800804 	addi	r2,r2,32
 101d4c4:	e0bfff15 	stw	r2,-4(fp)
 101d4c8:	e0bfff17 	ldw	r2,-4(fp)
 101d4cc:	10840030 	cmpltui	r2,r2,4096
 101d4d0:	103ff81e 	bne	r2,zero,101d4b4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 101d4d4:	e037883a 	mov	sp,fp
 101d4d8:	df000017 	ldw	fp,0(sp)
 101d4dc:	dec00104 	addi	sp,sp,4
 101d4e0:	f800283a 	ret

0101d4e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 101d4e4:	defff904 	addi	sp,sp,-28
 101d4e8:	dfc00615 	stw	ra,24(sp)
 101d4ec:	df000515 	stw	fp,20(sp)
 101d4f0:	df000504 	addi	fp,sp,20
 101d4f4:	e13ffd15 	stw	r4,-12(fp)
 101d4f8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 101d4fc:	e0bffd17 	ldw	r2,-12(fp)
 101d500:	1005003a 	cmpeq	r2,r2,zero
 101d504:	1000041e 	bne	r2,zero,101d518 <alt_dev_llist_insert+0x34>
 101d508:	e0bffd17 	ldw	r2,-12(fp)
 101d50c:	10800217 	ldw	r2,8(r2)
 101d510:	1004c03a 	cmpne	r2,r2,zero
 101d514:	1000071e 	bne	r2,zero,101d534 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 101d518:	101d5980 	call	101d598 <alt_get_errno>
 101d51c:	1007883a 	mov	r3,r2
 101d520:	00800584 	movi	r2,22
 101d524:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 101d528:	00bffa84 	movi	r2,-22
 101d52c:	e0bfff15 	stw	r2,-4(fp)
 101d530:	00001306 	br	101d580 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 101d534:	e0fffd17 	ldw	r3,-12(fp)
 101d538:	e0bffe17 	ldw	r2,-8(fp)
 101d53c:	e0bffb15 	stw	r2,-20(fp)
 101d540:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101d544:	e0fffc17 	ldw	r3,-16(fp)
 101d548:	e0bffb17 	ldw	r2,-20(fp)
 101d54c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 101d550:	e0bffb17 	ldw	r2,-20(fp)
 101d554:	10c00017 	ldw	r3,0(r2)
 101d558:	e0bffc17 	ldw	r2,-16(fp)
 101d55c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 101d560:	e0bffb17 	ldw	r2,-20(fp)
 101d564:	10c00017 	ldw	r3,0(r2)
 101d568:	e0bffc17 	ldw	r2,-16(fp)
 101d56c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 101d570:	e0fffb17 	ldw	r3,-20(fp)
 101d574:	e0bffc17 	ldw	r2,-16(fp)
 101d578:	18800015 	stw	r2,0(r3)

  return 0;  
 101d57c:	e03fff15 	stw	zero,-4(fp)
 101d580:	e0bfff17 	ldw	r2,-4(fp)
}
 101d584:	e037883a 	mov	sp,fp
 101d588:	dfc00117 	ldw	ra,4(sp)
 101d58c:	df000017 	ldw	fp,0(sp)
 101d590:	dec00204 	addi	sp,sp,8
 101d594:	f800283a 	ret

0101d598 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101d598:	defffd04 	addi	sp,sp,-12
 101d59c:	dfc00215 	stw	ra,8(sp)
 101d5a0:	df000115 	stw	fp,4(sp)
 101d5a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101d5a8:	008040b4 	movhi	r2,258
 101d5ac:	1084ab04 	addi	r2,r2,4780
 101d5b0:	10800017 	ldw	r2,0(r2)
 101d5b4:	1005003a 	cmpeq	r2,r2,zero
 101d5b8:	1000061e 	bne	r2,zero,101d5d4 <alt_get_errno+0x3c>
 101d5bc:	008040b4 	movhi	r2,258
 101d5c0:	1084ab04 	addi	r2,r2,4780
 101d5c4:	10800017 	ldw	r2,0(r2)
 101d5c8:	103ee83a 	callr	r2
 101d5cc:	e0bfff15 	stw	r2,-4(fp)
 101d5d0:	00000306 	br	101d5e0 <alt_get_errno+0x48>
 101d5d4:	008040b4 	movhi	r2,258
 101d5d8:	108bac04 	addi	r2,r2,11952
 101d5dc:	e0bfff15 	stw	r2,-4(fp)
 101d5e0:	e0bfff17 	ldw	r2,-4(fp)
}
 101d5e4:	e037883a 	mov	sp,fp
 101d5e8:	dfc00117 	ldw	ra,4(sp)
 101d5ec:	df000017 	ldw	fp,0(sp)
 101d5f0:	dec00204 	addi	sp,sp,8
 101d5f4:	f800283a 	ret

0101d5f8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 101d5f8:	defffd04 	addi	sp,sp,-12
 101d5fc:	dfc00215 	stw	ra,8(sp)
 101d600:	df000115 	stw	fp,4(sp)
 101d604:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 101d608:	00bfff04 	movi	r2,-4
 101d60c:	00c040b4 	movhi	r3,258
 101d610:	18fb6804 	addi	r3,r3,-4704
 101d614:	1885883a 	add	r2,r3,r2
 101d618:	e0bfff15 	stw	r2,-4(fp)
 101d61c:	00000606 	br	101d638 <_do_ctors+0x40>
        (*ctor) (); 
 101d620:	e0bfff17 	ldw	r2,-4(fp)
 101d624:	10800017 	ldw	r2,0(r2)
 101d628:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 101d62c:	e0bfff17 	ldw	r2,-4(fp)
 101d630:	10bfff04 	addi	r2,r2,-4
 101d634:	e0bfff15 	stw	r2,-4(fp)
 101d638:	e0ffff17 	ldw	r3,-4(fp)
 101d63c:	008040b4 	movhi	r2,258
 101d640:	10bb6604 	addi	r2,r2,-4712
 101d644:	18bff62e 	bgeu	r3,r2,101d620 <_do_ctors+0x28>
        (*ctor) (); 
}
 101d648:	e037883a 	mov	sp,fp
 101d64c:	dfc00117 	ldw	ra,4(sp)
 101d650:	df000017 	ldw	fp,0(sp)
 101d654:	dec00204 	addi	sp,sp,8
 101d658:	f800283a 	ret

0101d65c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 101d65c:	defffd04 	addi	sp,sp,-12
 101d660:	dfc00215 	stw	ra,8(sp)
 101d664:	df000115 	stw	fp,4(sp)
 101d668:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 101d66c:	00bfff04 	movi	r2,-4
 101d670:	00c040b4 	movhi	r3,258
 101d674:	18fb6804 	addi	r3,r3,-4704
 101d678:	1885883a 	add	r2,r3,r2
 101d67c:	e0bfff15 	stw	r2,-4(fp)
 101d680:	00000606 	br	101d69c <_do_dtors+0x40>
        (*dtor) (); 
 101d684:	e0bfff17 	ldw	r2,-4(fp)
 101d688:	10800017 	ldw	r2,0(r2)
 101d68c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 101d690:	e0bfff17 	ldw	r2,-4(fp)
 101d694:	10bfff04 	addi	r2,r2,-4
 101d698:	e0bfff15 	stw	r2,-4(fp)
 101d69c:	e0ffff17 	ldw	r3,-4(fp)
 101d6a0:	008040b4 	movhi	r2,258
 101d6a4:	10bb6804 	addi	r2,r2,-4704
 101d6a8:	18bff62e 	bgeu	r3,r2,101d684 <_do_dtors+0x28>
        (*dtor) (); 
}
 101d6ac:	e037883a 	mov	sp,fp
 101d6b0:	dfc00117 	ldw	ra,4(sp)
 101d6b4:	df000017 	ldw	fp,0(sp)
 101d6b8:	dec00204 	addi	sp,sp,8
 101d6bc:	f800283a 	ret

0101d6c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 101d6c0:	defffe04 	addi	sp,sp,-8
 101d6c4:	dfc00115 	stw	ra,4(sp)
 101d6c8:	df000015 	stw	fp,0(sp)
 101d6cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 101d6d0:	0009883a 	mov	r4,zero
 101d6d4:	01480004 	movi	r5,8192
 101d6d8:	101e7140 	call	101e714 <alt_icache_flush>
#endif
}
 101d6dc:	e037883a 	mov	sp,fp
 101d6e0:	dfc00117 	ldw	ra,4(sp)
 101d6e4:	df000017 	ldw	fp,0(sp)
 101d6e8:	dec00204 	addi	sp,sp,8
 101d6ec:	f800283a 	ret

0101d6f0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 101d6f0:	defff904 	addi	sp,sp,-28
 101d6f4:	dfc00615 	stw	ra,24(sp)
 101d6f8:	df000515 	stw	fp,20(sp)
 101d6fc:	df000504 	addi	fp,sp,20
 101d700:	e13ffc15 	stw	r4,-16(fp)
 101d704:	e17ffd15 	stw	r5,-12(fp)
 101d708:	e1bffe15 	stw	r6,-8(fp)
 101d70c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 101d710:	e0800217 	ldw	r2,8(fp)
 101d714:	d8800015 	stw	r2,0(sp)
 101d718:	e13ffc17 	ldw	r4,-16(fp)
 101d71c:	e17ffd17 	ldw	r5,-12(fp)
 101d720:	e1bffe17 	ldw	r6,-8(fp)
 101d724:	e1ffff17 	ldw	r7,-4(fp)
 101d728:	101d8c40 	call	101d8c4 <alt_iic_isr_register>
}  
 101d72c:	e037883a 	mov	sp,fp
 101d730:	dfc00117 	ldw	ra,4(sp)
 101d734:	df000017 	ldw	fp,0(sp)
 101d738:	dec00204 	addi	sp,sp,8
 101d73c:	f800283a 	ret

0101d740 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 101d740:	defff904 	addi	sp,sp,-28
 101d744:	df000615 	stw	fp,24(sp)
 101d748:	df000604 	addi	fp,sp,24
 101d74c:	e13ffe15 	stw	r4,-8(fp)
 101d750:	e17fff15 	stw	r5,-4(fp)
 101d754:	e0bfff17 	ldw	r2,-4(fp)
 101d758:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d75c:	0005303a 	rdctl	r2,status
 101d760:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d764:	e0fffb17 	ldw	r3,-20(fp)
 101d768:	00bfff84 	movi	r2,-2
 101d76c:	1884703a 	and	r2,r3,r2
 101d770:	1001703a 	wrctl	status,r2
  
  return context;
 101d774:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 101d778:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 101d77c:	e0fffc17 	ldw	r3,-16(fp)
 101d780:	00800044 	movi	r2,1
 101d784:	10c4983a 	sll	r2,r2,r3
 101d788:	1007883a 	mov	r3,r2
 101d78c:	008040b4 	movhi	r2,258
 101d790:	108bcc04 	addi	r2,r2,12080
 101d794:	10800017 	ldw	r2,0(r2)
 101d798:	1886b03a 	or	r3,r3,r2
 101d79c:	008040b4 	movhi	r2,258
 101d7a0:	108bcc04 	addi	r2,r2,12080
 101d7a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 101d7a8:	008040b4 	movhi	r2,258
 101d7ac:	108bcc04 	addi	r2,r2,12080
 101d7b0:	10800017 	ldw	r2,0(r2)
 101d7b4:	100170fa 	wrctl	ienable,r2
 101d7b8:	e0bffd17 	ldw	r2,-12(fp)
 101d7bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d7c0:	e0bffa17 	ldw	r2,-24(fp)
 101d7c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 101d7c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 101d7cc:	e037883a 	mov	sp,fp
 101d7d0:	df000017 	ldw	fp,0(sp)
 101d7d4:	dec00104 	addi	sp,sp,4
 101d7d8:	f800283a 	ret

0101d7dc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 101d7dc:	defff904 	addi	sp,sp,-28
 101d7e0:	df000615 	stw	fp,24(sp)
 101d7e4:	df000604 	addi	fp,sp,24
 101d7e8:	e13ffe15 	stw	r4,-8(fp)
 101d7ec:	e17fff15 	stw	r5,-4(fp)
 101d7f0:	e0bfff17 	ldw	r2,-4(fp)
 101d7f4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d7f8:	0005303a 	rdctl	r2,status
 101d7fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d800:	e0fffb17 	ldw	r3,-20(fp)
 101d804:	00bfff84 	movi	r2,-2
 101d808:	1884703a 	and	r2,r3,r2
 101d80c:	1001703a 	wrctl	status,r2
  
  return context;
 101d810:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 101d814:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 101d818:	e0fffc17 	ldw	r3,-16(fp)
 101d81c:	00800044 	movi	r2,1
 101d820:	10c4983a 	sll	r2,r2,r3
 101d824:	0084303a 	nor	r2,zero,r2
 101d828:	1007883a 	mov	r3,r2
 101d82c:	008040b4 	movhi	r2,258
 101d830:	108bcc04 	addi	r2,r2,12080
 101d834:	10800017 	ldw	r2,0(r2)
 101d838:	1886703a 	and	r3,r3,r2
 101d83c:	008040b4 	movhi	r2,258
 101d840:	108bcc04 	addi	r2,r2,12080
 101d844:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 101d848:	008040b4 	movhi	r2,258
 101d84c:	108bcc04 	addi	r2,r2,12080
 101d850:	10800017 	ldw	r2,0(r2)
 101d854:	100170fa 	wrctl	ienable,r2
 101d858:	e0bffd17 	ldw	r2,-12(fp)
 101d85c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d860:	e0bffa17 	ldw	r2,-24(fp)
 101d864:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 101d868:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 101d86c:	e037883a 	mov	sp,fp
 101d870:	df000017 	ldw	fp,0(sp)
 101d874:	dec00104 	addi	sp,sp,4
 101d878:	f800283a 	ret

0101d87c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 101d87c:	defffc04 	addi	sp,sp,-16
 101d880:	df000315 	stw	fp,12(sp)
 101d884:	df000304 	addi	fp,sp,12
 101d888:	e13ffe15 	stw	r4,-8(fp)
 101d88c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 101d890:	000530fa 	rdctl	r2,ienable
 101d894:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 101d898:	e0ffff17 	ldw	r3,-4(fp)
 101d89c:	00800044 	movi	r2,1
 101d8a0:	10c4983a 	sll	r2,r2,r3
 101d8a4:	1007883a 	mov	r3,r2
 101d8a8:	e0bffd17 	ldw	r2,-12(fp)
 101d8ac:	1884703a 	and	r2,r3,r2
 101d8b0:	1004c03a 	cmpne	r2,r2,zero
}
 101d8b4:	e037883a 	mov	sp,fp
 101d8b8:	df000017 	ldw	fp,0(sp)
 101d8bc:	dec00104 	addi	sp,sp,4
 101d8c0:	f800283a 	ret

0101d8c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 101d8c4:	defff404 	addi	sp,sp,-48
 101d8c8:	dfc00b15 	stw	ra,44(sp)
 101d8cc:	df000a15 	stw	fp,40(sp)
 101d8d0:	df000a04 	addi	fp,sp,40
 101d8d4:	e13ffb15 	stw	r4,-20(fp)
 101d8d8:	e17ffc15 	stw	r5,-16(fp)
 101d8dc:	e1bffd15 	stw	r6,-12(fp)
 101d8e0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 101d8e4:	00bffa84 	movi	r2,-22
 101d8e8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 101d8ec:	e0bffc17 	ldw	r2,-16(fp)
 101d8f0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 101d8f4:	e0bff917 	ldw	r2,-28(fp)
 101d8f8:	10800808 	cmpgei	r2,r2,32
 101d8fc:	1000291e 	bne	r2,zero,101d9a4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d900:	0005303a 	rdctl	r2,status
 101d904:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d908:	e0fff717 	ldw	r3,-36(fp)
 101d90c:	00bfff84 	movi	r2,-2
 101d910:	1884703a 	and	r2,r3,r2
 101d914:	1001703a 	wrctl	status,r2
  
  return context;
 101d918:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 101d91c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 101d920:	e0bff917 	ldw	r2,-28(fp)
 101d924:	00c040f4 	movhi	r3,259
 101d928:	18ea6604 	addi	r3,r3,-22120
 101d92c:	100490fa 	slli	r2,r2,3
 101d930:	10c7883a 	add	r3,r2,r3
 101d934:	e0bffd17 	ldw	r2,-12(fp)
 101d938:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 101d93c:	e0bff917 	ldw	r2,-28(fp)
 101d940:	00c040f4 	movhi	r3,259
 101d944:	18ea6604 	addi	r3,r3,-22120
 101d948:	100490fa 	slli	r2,r2,3
 101d94c:	10c5883a 	add	r2,r2,r3
 101d950:	10c00104 	addi	r3,r2,4
 101d954:	e0bffe17 	ldw	r2,-8(fp)
 101d958:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 101d95c:	e0bffd17 	ldw	r2,-12(fp)
 101d960:	1005003a 	cmpeq	r2,r2,zero
 101d964:	1000051e 	bne	r2,zero,101d97c <alt_iic_isr_register+0xb8>
 101d968:	e17ff917 	ldw	r5,-28(fp)
 101d96c:	e13ffb17 	ldw	r4,-20(fp)
 101d970:	101d7400 	call	101d740 <alt_ic_irq_enable>
 101d974:	e0bfff15 	stw	r2,-4(fp)
 101d978:	00000406 	br	101d98c <alt_iic_isr_register+0xc8>
 101d97c:	e17ff917 	ldw	r5,-28(fp)
 101d980:	e13ffb17 	ldw	r4,-20(fp)
 101d984:	101d7dc0 	call	101d7dc <alt_ic_irq_disable>
 101d988:	e0bfff15 	stw	r2,-4(fp)
 101d98c:	e0bfff17 	ldw	r2,-4(fp)
 101d990:	e0bffa15 	stw	r2,-24(fp)
 101d994:	e0bff817 	ldw	r2,-32(fp)
 101d998:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d99c:	e0bff617 	ldw	r2,-40(fp)
 101d9a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 101d9a4:	e0bffa17 	ldw	r2,-24(fp)
}
 101d9a8:	e037883a 	mov	sp,fp
 101d9ac:	dfc00117 	ldw	ra,4(sp)
 101d9b0:	df000017 	ldw	fp,0(sp)
 101d9b4:	dec00204 	addi	sp,sp,8
 101d9b8:	f800283a 	ret

0101d9bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 101d9bc:	defff904 	addi	sp,sp,-28
 101d9c0:	dfc00615 	stw	ra,24(sp)
 101d9c4:	df000515 	stw	fp,20(sp)
 101d9c8:	df000504 	addi	fp,sp,20
 101d9cc:	e13ffc15 	stw	r4,-16(fp)
 101d9d0:	e17ffd15 	stw	r5,-12(fp)
 101d9d4:	e1bffe15 	stw	r6,-8(fp)
 101d9d8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 101d9dc:	e13ffd17 	ldw	r4,-12(fp)
 101d9e0:	e17ffe17 	ldw	r5,-8(fp)
 101d9e4:	e1bfff17 	ldw	r6,-4(fp)
 101d9e8:	101dbd40 	call	101dbd4 <open>
 101d9ec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 101d9f0:	e0bffb17 	ldw	r2,-20(fp)
 101d9f4:	1004803a 	cmplt	r2,r2,zero
 101d9f8:	10001c1e 	bne	r2,zero,101da6c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 101d9fc:	e0bffb17 	ldw	r2,-20(fp)
 101da00:	00c040b4 	movhi	r3,258
 101da04:	18c00c04 	addi	r3,r3,48
 101da08:	10800324 	muli	r2,r2,12
 101da0c:	10c5883a 	add	r2,r2,r3
 101da10:	10c00017 	ldw	r3,0(r2)
 101da14:	e0bffc17 	ldw	r2,-16(fp)
 101da18:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 101da1c:	e0bffb17 	ldw	r2,-20(fp)
 101da20:	00c040b4 	movhi	r3,258
 101da24:	18c00c04 	addi	r3,r3,48
 101da28:	10800324 	muli	r2,r2,12
 101da2c:	10c5883a 	add	r2,r2,r3
 101da30:	10800104 	addi	r2,r2,4
 101da34:	10c00017 	ldw	r3,0(r2)
 101da38:	e0bffc17 	ldw	r2,-16(fp)
 101da3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 101da40:	e0bffb17 	ldw	r2,-20(fp)
 101da44:	00c040b4 	movhi	r3,258
 101da48:	18c00c04 	addi	r3,r3,48
 101da4c:	10800324 	muli	r2,r2,12
 101da50:	10c5883a 	add	r2,r2,r3
 101da54:	10800204 	addi	r2,r2,8
 101da58:	10c00017 	ldw	r3,0(r2)
 101da5c:	e0bffc17 	ldw	r2,-16(fp)
 101da60:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 101da64:	e13ffb17 	ldw	r4,-20(fp)
 101da68:	1013bd40 	call	1013bd4 <alt_release_fd>
  }
} 
 101da6c:	e037883a 	mov	sp,fp
 101da70:	dfc00117 	ldw	ra,4(sp)
 101da74:	df000017 	ldw	fp,0(sp)
 101da78:	dec00204 	addi	sp,sp,8
 101da7c:	f800283a 	ret

0101da80 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 101da80:	defffb04 	addi	sp,sp,-20
 101da84:	dfc00415 	stw	ra,16(sp)
 101da88:	df000315 	stw	fp,12(sp)
 101da8c:	df000304 	addi	fp,sp,12
 101da90:	e13ffd15 	stw	r4,-12(fp)
 101da94:	e17ffe15 	stw	r5,-8(fp)
 101da98:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 101da9c:	010040b4 	movhi	r4,258
 101daa0:	21000f04 	addi	r4,r4,60
 101daa4:	e17ffd17 	ldw	r5,-12(fp)
 101daa8:	01800044 	movi	r6,1
 101daac:	01c07fc4 	movi	r7,511
 101dab0:	101d9bc0 	call	101d9bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 101dab4:	010040b4 	movhi	r4,258
 101dab8:	21000c04 	addi	r4,r4,48
 101dabc:	e17ffe17 	ldw	r5,-8(fp)
 101dac0:	000d883a 	mov	r6,zero
 101dac4:	01c07fc4 	movi	r7,511
 101dac8:	101d9bc0 	call	101d9bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 101dacc:	010040b4 	movhi	r4,258
 101dad0:	21001204 	addi	r4,r4,72
 101dad4:	e17fff17 	ldw	r5,-4(fp)
 101dad8:	01800044 	movi	r6,1
 101dadc:	01c07fc4 	movi	r7,511
 101dae0:	101d9bc0 	call	101d9bc <alt_open_fd>
}  
 101dae4:	e037883a 	mov	sp,fp
 101dae8:	dfc00117 	ldw	ra,4(sp)
 101daec:	df000017 	ldw	fp,0(sp)
 101daf0:	dec00204 	addi	sp,sp,8
 101daf4:	f800283a 	ret

0101daf8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 101daf8:	defffc04 	addi	sp,sp,-16
 101dafc:	df000315 	stw	fp,12(sp)
 101db00:	df000304 	addi	fp,sp,12
 101db04:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 101db08:	e0bffe17 	ldw	r2,-8(fp)
 101db0c:	10800217 	ldw	r2,8(r2)
 101db10:	10d00034 	orhi	r3,r2,16384
 101db14:	e0bffe17 	ldw	r2,-8(fp)
 101db18:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101db1c:	e03ffd15 	stw	zero,-12(fp)
 101db20:	00002006 	br	101dba4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 101db24:	e0bffd17 	ldw	r2,-12(fp)
 101db28:	00c040b4 	movhi	r3,258
 101db2c:	18c00c04 	addi	r3,r3,48
 101db30:	10800324 	muli	r2,r2,12
 101db34:	10c5883a 	add	r2,r2,r3
 101db38:	10c00017 	ldw	r3,0(r2)
 101db3c:	e0bffe17 	ldw	r2,-8(fp)
 101db40:	10800017 	ldw	r2,0(r2)
 101db44:	1880141e 	bne	r3,r2,101db98 <alt_file_locked+0xa0>
 101db48:	e0bffd17 	ldw	r2,-12(fp)
 101db4c:	00c040b4 	movhi	r3,258
 101db50:	18c00c04 	addi	r3,r3,48
 101db54:	10800324 	muli	r2,r2,12
 101db58:	10c5883a 	add	r2,r2,r3
 101db5c:	10800204 	addi	r2,r2,8
 101db60:	10800017 	ldw	r2,0(r2)
 101db64:	1004403a 	cmpge	r2,r2,zero
 101db68:	10000b1e 	bne	r2,zero,101db98 <alt_file_locked+0xa0>
 101db6c:	e0bffd17 	ldw	r2,-12(fp)
 101db70:	10800324 	muli	r2,r2,12
 101db74:	1007883a 	mov	r3,r2
 101db78:	008040b4 	movhi	r2,258
 101db7c:	10800c04 	addi	r2,r2,48
 101db80:	1887883a 	add	r3,r3,r2
 101db84:	e0bffe17 	ldw	r2,-8(fp)
 101db88:	18800326 	beq	r3,r2,101db98 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 101db8c:	00bffcc4 	movi	r2,-13
 101db90:	e0bfff15 	stw	r2,-4(fp)
 101db94:	00000a06 	br	101dbc0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101db98:	e0bffd17 	ldw	r2,-12(fp)
 101db9c:	10800044 	addi	r2,r2,1
 101dba0:	e0bffd15 	stw	r2,-12(fp)
 101dba4:	008040b4 	movhi	r2,258
 101dba8:	1084aa04 	addi	r2,r2,4776
 101dbac:	10800017 	ldw	r2,0(r2)
 101dbb0:	1007883a 	mov	r3,r2
 101dbb4:	e0bffd17 	ldw	r2,-12(fp)
 101dbb8:	18bfda2e 	bgeu	r3,r2,101db24 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 101dbbc:	e03fff15 	stw	zero,-4(fp)
 101dbc0:	e0bfff17 	ldw	r2,-4(fp)
}
 101dbc4:	e037883a 	mov	sp,fp
 101dbc8:	df000017 	ldw	fp,0(sp)
 101dbcc:	dec00104 	addi	sp,sp,4
 101dbd0:	f800283a 	ret

0101dbd4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 101dbd4:	defff404 	addi	sp,sp,-48
 101dbd8:	dfc00b15 	stw	ra,44(sp)
 101dbdc:	df000a15 	stw	fp,40(sp)
 101dbe0:	df000a04 	addi	fp,sp,40
 101dbe4:	e13ffb15 	stw	r4,-20(fp)
 101dbe8:	e17ffc15 	stw	r5,-16(fp)
 101dbec:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 101dbf0:	00bfffc4 	movi	r2,-1
 101dbf4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 101dbf8:	00bffb44 	movi	r2,-19
 101dbfc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 101dc00:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 101dc04:	e13ffb17 	ldw	r4,-20(fp)
 101dc08:	014040b4 	movhi	r5,258
 101dc0c:	2944a804 	addi	r5,r5,4768
 101dc10:	101e46c0 	call	101e46c <alt_find_dev>
 101dc14:	e0bffa15 	stw	r2,-24(fp)
 101dc18:	e0bffa17 	ldw	r2,-24(fp)
 101dc1c:	1004c03a 	cmpne	r2,r2,zero
 101dc20:	1000051e 	bne	r2,zero,101dc38 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 101dc24:	e13ffb17 	ldw	r4,-20(fp)
 101dc28:	101e5000 	call	101e500 <alt_find_file>
 101dc2c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 101dc30:	00800044 	movi	r2,1
 101dc34:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 101dc38:	e0bffa17 	ldw	r2,-24(fp)
 101dc3c:	1005003a 	cmpeq	r2,r2,zero
 101dc40:	1000301e 	bne	r2,zero,101dd04 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 101dc44:	e13ffa17 	ldw	r4,-24(fp)
 101dc48:	101e6200 	call	101e620 <alt_get_fd>
 101dc4c:	e0bff815 	stw	r2,-32(fp)
 101dc50:	e0bff817 	ldw	r2,-32(fp)
 101dc54:	1004403a 	cmpge	r2,r2,zero
 101dc58:	1000031e 	bne	r2,zero,101dc68 <open+0x94>
    {
      status = index;
 101dc5c:	e0bff817 	ldw	r2,-32(fp)
 101dc60:	e0bff715 	stw	r2,-36(fp)
 101dc64:	00002906 	br	101dd0c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 101dc68:	e0bff817 	ldw	r2,-32(fp)
 101dc6c:	10800324 	muli	r2,r2,12
 101dc70:	1007883a 	mov	r3,r2
 101dc74:	008040b4 	movhi	r2,258
 101dc78:	10800c04 	addi	r2,r2,48
 101dc7c:	1885883a 	add	r2,r3,r2
 101dc80:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 101dc84:	e0fffc17 	ldw	r3,-16(fp)
 101dc88:	00900034 	movhi	r2,16384
 101dc8c:	10bfffc4 	addi	r2,r2,-1
 101dc90:	1886703a 	and	r3,r3,r2
 101dc94:	e0bff917 	ldw	r2,-28(fp)
 101dc98:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 101dc9c:	e0bff617 	ldw	r2,-40(fp)
 101dca0:	1004c03a 	cmpne	r2,r2,zero
 101dca4:	1000061e 	bne	r2,zero,101dcc0 <open+0xec>
 101dca8:	e13ff917 	ldw	r4,-28(fp)
 101dcac:	101daf80 	call	101daf8 <alt_file_locked>
 101dcb0:	e0bff715 	stw	r2,-36(fp)
 101dcb4:	e0bff717 	ldw	r2,-36(fp)
 101dcb8:	1004803a 	cmplt	r2,r2,zero
 101dcbc:	1000131e 	bne	r2,zero,101dd0c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 101dcc0:	e0bffa17 	ldw	r2,-24(fp)
 101dcc4:	10800317 	ldw	r2,12(r2)
 101dcc8:	1005003a 	cmpeq	r2,r2,zero
 101dccc:	1000091e 	bne	r2,zero,101dcf4 <open+0x120>
 101dcd0:	e0bffa17 	ldw	r2,-24(fp)
 101dcd4:	10800317 	ldw	r2,12(r2)
 101dcd8:	e13ff917 	ldw	r4,-28(fp)
 101dcdc:	e17ffb17 	ldw	r5,-20(fp)
 101dce0:	e1bffc17 	ldw	r6,-16(fp)
 101dce4:	e1fffd17 	ldw	r7,-12(fp)
 101dce8:	103ee83a 	callr	r2
 101dcec:	e0bfff15 	stw	r2,-4(fp)
 101dcf0:	00000106 	br	101dcf8 <open+0x124>
 101dcf4:	e03fff15 	stw	zero,-4(fp)
 101dcf8:	e0bfff17 	ldw	r2,-4(fp)
 101dcfc:	e0bff715 	stw	r2,-36(fp)
 101dd00:	00000206 	br	101dd0c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 101dd04:	00bffb44 	movi	r2,-19
 101dd08:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 101dd0c:	e0bff717 	ldw	r2,-36(fp)
 101dd10:	1004403a 	cmpge	r2,r2,zero
 101dd14:	1000091e 	bne	r2,zero,101dd3c <open+0x168>
  {
    alt_release_fd (index);  
 101dd18:	e13ff817 	ldw	r4,-32(fp)
 101dd1c:	1013bd40 	call	1013bd4 <alt_release_fd>
    ALT_ERRNO = -status;
 101dd20:	101dd5c0 	call	101dd5c <alt_get_errno>
 101dd24:	e0fff717 	ldw	r3,-36(fp)
 101dd28:	00c7c83a 	sub	r3,zero,r3
 101dd2c:	10c00015 	stw	r3,0(r2)
    return -1;
 101dd30:	00bfffc4 	movi	r2,-1
 101dd34:	e0bffe15 	stw	r2,-8(fp)
 101dd38:	00000206 	br	101dd44 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 101dd3c:	e0bff817 	ldw	r2,-32(fp)
 101dd40:	e0bffe15 	stw	r2,-8(fp)
 101dd44:	e0bffe17 	ldw	r2,-8(fp)
}
 101dd48:	e037883a 	mov	sp,fp
 101dd4c:	dfc00117 	ldw	ra,4(sp)
 101dd50:	df000017 	ldw	fp,0(sp)
 101dd54:	dec00204 	addi	sp,sp,8
 101dd58:	f800283a 	ret

0101dd5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101dd5c:	defffd04 	addi	sp,sp,-12
 101dd60:	dfc00215 	stw	ra,8(sp)
 101dd64:	df000115 	stw	fp,4(sp)
 101dd68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101dd6c:	008040b4 	movhi	r2,258
 101dd70:	1084ab04 	addi	r2,r2,4780
 101dd74:	10800017 	ldw	r2,0(r2)
 101dd78:	1005003a 	cmpeq	r2,r2,zero
 101dd7c:	1000061e 	bne	r2,zero,101dd98 <alt_get_errno+0x3c>
 101dd80:	008040b4 	movhi	r2,258
 101dd84:	1084ab04 	addi	r2,r2,4780
 101dd88:	10800017 	ldw	r2,0(r2)
 101dd8c:	103ee83a 	callr	r2
 101dd90:	e0bfff15 	stw	r2,-4(fp)
 101dd94:	00000306 	br	101dda4 <alt_get_errno+0x48>
 101dd98:	008040b4 	movhi	r2,258
 101dd9c:	108bac04 	addi	r2,r2,11952
 101dda0:	e0bfff15 	stw	r2,-4(fp)
 101dda4:	e0bfff17 	ldw	r2,-4(fp)
}
 101dda8:	e037883a 	mov	sp,fp
 101ddac:	dfc00117 	ldw	ra,4(sp)
 101ddb0:	df000017 	ldw	fp,0(sp)
 101ddb4:	dec00204 	addi	sp,sp,8
 101ddb8:	f800283a 	ret

0101ddbc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 101ddbc:	defffa04 	addi	sp,sp,-24
 101ddc0:	df000515 	stw	fp,20(sp)
 101ddc4:	df000504 	addi	fp,sp,20
 101ddc8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ddcc:	0005303a 	rdctl	r2,status
 101ddd0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ddd4:	e0fffd17 	ldw	r3,-12(fp)
 101ddd8:	00bfff84 	movi	r2,-2
 101dddc:	1884703a 	and	r2,r3,r2
 101dde0:	1001703a 	wrctl	status,r2
  
  return context;
 101dde4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 101dde8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 101ddec:	e0bfff17 	ldw	r2,-4(fp)
 101ddf0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 101ddf4:	e0bffc17 	ldw	r2,-16(fp)
 101ddf8:	10c00017 	ldw	r3,0(r2)
 101ddfc:	e0bffc17 	ldw	r2,-16(fp)
 101de00:	10800117 	ldw	r2,4(r2)
 101de04:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 101de08:	e0bffc17 	ldw	r2,-16(fp)
 101de0c:	10c00117 	ldw	r3,4(r2)
 101de10:	e0bffc17 	ldw	r2,-16(fp)
 101de14:	10800017 	ldw	r2,0(r2)
 101de18:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 101de1c:	e0fffc17 	ldw	r3,-16(fp)
 101de20:	e0bffc17 	ldw	r2,-16(fp)
 101de24:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 101de28:	e0fffc17 	ldw	r3,-16(fp)
 101de2c:	e0bffc17 	ldw	r2,-16(fp)
 101de30:	18800015 	stw	r2,0(r3)
 101de34:	e0bffe17 	ldw	r2,-8(fp)
 101de38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101de3c:	e0bffb17 	ldw	r2,-20(fp)
 101de40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 101de44:	e037883a 	mov	sp,fp
 101de48:	df000017 	ldw	fp,0(sp)
 101de4c:	dec00104 	addi	sp,sp,4
 101de50:	f800283a 	ret

0101de54 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 101de54:	defffb04 	addi	sp,sp,-20
 101de58:	dfc00415 	stw	ra,16(sp)
 101de5c:	df000315 	stw	fp,12(sp)
 101de60:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 101de64:	d0a03b17 	ldw	r2,-32532(gp)
 101de68:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 101de6c:	d0a73c17 	ldw	r2,-25360(gp)
 101de70:	10800044 	addi	r2,r2,1
 101de74:	d0a73c15 	stw	r2,-25360(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 101de78:	00003106 	br	101df40 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 101de7c:	e0bffe17 	ldw	r2,-8(fp)
 101de80:	10800017 	ldw	r2,0(r2)
 101de84:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 101de88:	e0bffe17 	ldw	r2,-8(fp)
 101de8c:	10800403 	ldbu	r2,16(r2)
 101de90:	10803fcc 	andi	r2,r2,255
 101de94:	1005003a 	cmpeq	r2,r2,zero
 101de98:	1000051e 	bne	r2,zero,101deb0 <alt_tick+0x5c>
 101de9c:	d0a73c17 	ldw	r2,-25360(gp)
 101dea0:	1004c03a 	cmpne	r2,r2,zero
 101dea4:	1000021e 	bne	r2,zero,101deb0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 101dea8:	e0bffe17 	ldw	r2,-8(fp)
 101deac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 101deb0:	e0bffe17 	ldw	r2,-8(fp)
 101deb4:	10c00217 	ldw	r3,8(r2)
 101deb8:	d0a73c17 	ldw	r2,-25360(gp)
 101debc:	10c01e36 	bltu	r2,r3,101df38 <alt_tick+0xe4>
 101dec0:	e0bffe17 	ldw	r2,-8(fp)
 101dec4:	10800403 	ldbu	r2,16(r2)
 101dec8:	10803fcc 	andi	r2,r2,255
 101decc:	1004c03a 	cmpne	r2,r2,zero
 101ded0:	1000191e 	bne	r2,zero,101df38 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 101ded4:	e0bffe17 	ldw	r2,-8(fp)
 101ded8:	10c00317 	ldw	r3,12(r2)
 101dedc:	e0bffe17 	ldw	r2,-8(fp)
 101dee0:	11000517 	ldw	r4,20(r2)
 101dee4:	183ee83a 	callr	r3
 101dee8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 101deec:	e0bffd17 	ldw	r2,-12(fp)
 101def0:	1004c03a 	cmpne	r2,r2,zero
 101def4:	1000031e 	bne	r2,zero,101df04 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 101def8:	e13ffe17 	ldw	r4,-8(fp)
 101defc:	101ddbc0 	call	101ddbc <alt_alarm_stop>
 101df00:	00000d06 	br	101df38 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 101df04:	e0bffe17 	ldw	r2,-8(fp)
 101df08:	10c00217 	ldw	r3,8(r2)
 101df0c:	e0bffd17 	ldw	r2,-12(fp)
 101df10:	1887883a 	add	r3,r3,r2
 101df14:	e0bffe17 	ldw	r2,-8(fp)
 101df18:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 101df1c:	e0bffe17 	ldw	r2,-8(fp)
 101df20:	10c00217 	ldw	r3,8(r2)
 101df24:	d0a73c17 	ldw	r2,-25360(gp)
 101df28:	1880032e 	bgeu	r3,r2,101df38 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 101df2c:	e0fffe17 	ldw	r3,-8(fp)
 101df30:	00800044 	movi	r2,1
 101df34:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 101df38:	e0bfff17 	ldw	r2,-4(fp)
 101df3c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 101df40:	d0e03b04 	addi	r3,gp,-32532
 101df44:	e0bffe17 	ldw	r2,-8(fp)
 101df48:	10ffcc1e 	bne	r2,r3,101de7c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 101df4c:	1014ed40 	call	1014ed4 <OSTimeTick>
}
 101df50:	e037883a 	mov	sp,fp
 101df54:	dfc00117 	ldw	ra,4(sp)
 101df58:	df000017 	ldw	fp,0(sp)
 101df5c:	dec00204 	addi	sp,sp,8
 101df60:	f800283a 	ret

0101df64 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 101df64:	deffff04 	addi	sp,sp,-4
 101df68:	df000015 	stw	fp,0(sp)
 101df6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 101df70:	000170fa 	wrctl	ienable,zero
}
 101df74:	e037883a 	mov	sp,fp
 101df78:	df000017 	ldw	fp,0(sp)
 101df7c:	dec00104 	addi	sp,sp,4
 101df80:	f800283a 	ret

0101df84 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 101df84:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 101df88:	d0e01017 	ldw	r3,-32704(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 101df8c:	d1273517 	ldw	r4,-25388(gp)

      stw ra,  0(sp)
 101df90:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 101df94:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 101df98:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 101df9c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 101dfa0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 101dfa4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 101dfa8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 101dfac:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 101dfb0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 101dfb4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 101dfb8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 101dfbc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 101dfc0:	101e3a40 	call	101e3a4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 101dfc4:	d1273017 	ldw	r4,-25408(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 101dfc8:	d1672807 	ldb	r5,-25440(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 101dfcc:	d1273515 	stw	r4,-25388(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 101dfd0:	d1672845 	stb	r5,-25439(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 101dfd4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 101dfd8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 101dfdc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 101dfe0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 101dfe4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 101dfe8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 101dfec:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 101dff0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 101dff4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 101dff8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 101dffc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 101e000:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 101e004:	d0e01015 	stw	r3,-32704(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 101e008:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 101e00c:	f800283a 	ret

0101e010 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 101e010:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 101e014:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 101e018:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 101e01c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 101e020:	101e3a40 	call	101e3a4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 101e024:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 101e028:	d4a72645 	stb	r18,-25447(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 101e02c:	003fe506 	br	101dfc4 <OSCtxSw+0x40>

0101e030 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 101e030:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 101e034:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 101e038:	10800054 	ori	r2,r2,1
      wrctl status, r2
 101e03c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 101e040:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 101e044:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 101e048:	dec00204 	addi	sp,sp,8

      callr r2
 101e04c:	103ee83a 	callr	r2

      nop
 101e050:	0001883a 	nop

0101e054 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 101e054:	defff704 	addi	sp,sp,-36
 101e058:	dfc00815 	stw	ra,32(sp)
 101e05c:	df000715 	stw	fp,28(sp)
 101e060:	df000704 	addi	fp,sp,28
 101e064:	e13ffc15 	stw	r4,-16(fp)
 101e068:	e17ffd15 	stw	r5,-12(fp)
 101e06c:	e1bffe15 	stw	r6,-8(fp)
 101e070:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 101e074:	e0bffe17 	ldw	r2,-8(fp)
 101e078:	1007883a 	mov	r3,r2
 101e07c:	00bfff04 	movi	r2,-4
 101e080:	1884703a 	and	r2,r3,r2
 101e084:	10bf0004 	addi	r2,r2,-1024
 101e088:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 101e08c:	e0bff917 	ldw	r2,-28(fp)
 101e090:	10000015 	stw	zero,0(r2)
 101e094:	e0bff917 	ldw	r2,-28(fp)
 101e098:	10c0bb04 	addi	r3,r2,748
 101e09c:	e0bff917 	ldw	r2,-28(fp)
 101e0a0:	10c00115 	stw	r3,4(r2)
 101e0a4:	e0bff917 	ldw	r2,-28(fp)
 101e0a8:	1080bb04 	addi	r2,r2,748
 101e0ac:	10c01704 	addi	r3,r2,92
 101e0b0:	e0bff917 	ldw	r2,-28(fp)
 101e0b4:	10c00215 	stw	r3,8(r2)
 101e0b8:	e0bff917 	ldw	r2,-28(fp)
 101e0bc:	1080bb04 	addi	r2,r2,748
 101e0c0:	10c02e04 	addi	r3,r2,184
 101e0c4:	e0bff917 	ldw	r2,-28(fp)
 101e0c8:	10c00315 	stw	r3,12(r2)
 101e0cc:	e0bff917 	ldw	r2,-28(fp)
 101e0d0:	10000415 	stw	zero,16(r2)
 101e0d4:	e0bff917 	ldw	r2,-28(fp)
 101e0d8:	10800504 	addi	r2,r2,20
 101e0dc:	1009883a 	mov	r4,r2
 101e0e0:	01800644 	movi	r6,25
 101e0e4:	000b883a 	mov	r5,zero
 101e0e8:	100a10c0 	call	100a10c <memset>
 101e0ec:	e0bff917 	ldw	r2,-28(fp)
 101e0f0:	10000c15 	stw	zero,48(r2)
 101e0f4:	e0fff917 	ldw	r3,-28(fp)
 101e0f8:	008040b4 	movhi	r2,258
 101e0fc:	10bdfc04 	addi	r2,r2,-2064
 101e100:	18800d15 	stw	r2,52(r3)
 101e104:	e0bff917 	ldw	r2,-28(fp)
 101e108:	10000e15 	stw	zero,56(r2)
 101e10c:	e0bff917 	ldw	r2,-28(fp)
 101e110:	10000f15 	stw	zero,60(r2)
 101e114:	e0bff917 	ldw	r2,-28(fp)
 101e118:	10001015 	stw	zero,64(r2)
 101e11c:	e0bff917 	ldw	r2,-28(fp)
 101e120:	10001115 	stw	zero,68(r2)
 101e124:	e0bff917 	ldw	r2,-28(fp)
 101e128:	10001215 	stw	zero,72(r2)
 101e12c:	e0bff917 	ldw	r2,-28(fp)
 101e130:	10001315 	stw	zero,76(r2)
 101e134:	e0bff917 	ldw	r2,-28(fp)
 101e138:	10001415 	stw	zero,80(r2)
 101e13c:	e0bff917 	ldw	r2,-28(fp)
 101e140:	10001515 	stw	zero,84(r2)
 101e144:	e0bff917 	ldw	r2,-28(fp)
 101e148:	10001615 	stw	zero,88(r2)
 101e14c:	e0bff917 	ldw	r2,-28(fp)
 101e150:	10001715 	stw	zero,92(r2)
 101e154:	e0bff917 	ldw	r2,-28(fp)
 101e158:	10001805 	stb	zero,96(r2)
 101e15c:	e0bff917 	ldw	r2,-28(fp)
 101e160:	10801f04 	addi	r2,r2,124
 101e164:	10000015 	stw	zero,0(r2)
 101e168:	10000115 	stw	zero,4(r2)
 101e16c:	10000215 	stw	zero,8(r2)
 101e170:	10000315 	stw	zero,12(r2)
 101e174:	10000415 	stw	zero,16(r2)
 101e178:	10000515 	stw	zero,20(r2)
 101e17c:	10000615 	stw	zero,24(r2)
 101e180:	10000715 	stw	zero,28(r2)
 101e184:	10000815 	stw	zero,32(r2)
 101e188:	e0bff917 	ldw	r2,-28(fp)
 101e18c:	10002815 	stw	zero,160(r2)
 101e190:	e0fff917 	ldw	r3,-28(fp)
 101e194:	00800044 	movi	r2,1
 101e198:	18802915 	stw	r2,164(r3)
 101e19c:	18002a15 	stw	zero,168(r3)
 101e1a0:	e0fff917 	ldw	r3,-28(fp)
 101e1a4:	008cc384 	movi	r2,13070
 101e1a8:	18802b0d 	sth	r2,172(r3)
 101e1ac:	e0fff917 	ldw	r3,-28(fp)
 101e1b0:	00aaf344 	movi	r2,-21555
 101e1b4:	18802b8d 	sth	r2,174(r3)
 101e1b8:	e0fff917 	ldw	r3,-28(fp)
 101e1bc:	00848d04 	movi	r2,4660
 101e1c0:	18802c0d 	sth	r2,176(r3)
 101e1c4:	e0fff917 	ldw	r3,-28(fp)
 101e1c8:	00b99b44 	movi	r2,-6547
 101e1cc:	18802c8d 	sth	r2,178(r3)
 101e1d0:	e0fff917 	ldw	r3,-28(fp)
 101e1d4:	00b7bb04 	movi	r2,-8468
 101e1d8:	18802d0d 	sth	r2,180(r3)
 101e1dc:	e0fff917 	ldw	r3,-28(fp)
 101e1e0:	00800144 	movi	r2,5
 101e1e4:	18802d8d 	sth	r2,182(r3)
 101e1e8:	e0fff917 	ldw	r3,-28(fp)
 101e1ec:	008002c4 	movi	r2,11
 101e1f0:	18802e0d 	sth	r2,184(r3)
 101e1f4:	e0bff917 	ldw	r2,-28(fp)
 101e1f8:	10002f15 	stw	zero,188(r2)
 101e1fc:	e0bff917 	ldw	r2,-28(fp)
 101e200:	10003015 	stw	zero,192(r2)
 101e204:	e0bff917 	ldw	r2,-28(fp)
 101e208:	10003115 	stw	zero,196(r2)
 101e20c:	e0bff917 	ldw	r2,-28(fp)
 101e210:	10003215 	stw	zero,200(r2)
 101e214:	e0bff917 	ldw	r2,-28(fp)
 101e218:	10003315 	stw	zero,204(r2)
 101e21c:	e0bff917 	ldw	r2,-28(fp)
 101e220:	10003415 	stw	zero,208(r2)
 101e224:	e0bff917 	ldw	r2,-28(fp)
 101e228:	10003e15 	stw	zero,248(r2)
 101e22c:	e0bff917 	ldw	r2,-28(fp)
 101e230:	10003f15 	stw	zero,252(r2)
 101e234:	e0bff917 	ldw	r2,-28(fp)
 101e238:	10004015 	stw	zero,256(r2)
 101e23c:	e0bff917 	ldw	r2,-28(fp)
 101e240:	10004115 	stw	zero,260(r2)
 101e244:	e0bff917 	ldw	r2,-28(fp)
 101e248:	10004215 	stw	zero,264(r2)
 101e24c:	e0bff917 	ldw	r2,-28(fp)
 101e250:	10004315 	stw	zero,268(r2)
 101e254:	e0bff917 	ldw	r2,-28(fp)
 101e258:	10004415 	stw	zero,272(r2)
 101e25c:	e0bff917 	ldw	r2,-28(fp)
 101e260:	10004515 	stw	zero,276(r2)
 101e264:	e0bff917 	ldw	r2,-28(fp)
 101e268:	10004615 	stw	zero,280(r2)
 101e26c:	e0bff917 	ldw	r2,-28(fp)
 101e270:	10004715 	stw	zero,284(r2)
 101e274:	e0bff917 	ldw	r2,-28(fp)
 101e278:	10003505 	stb	zero,212(r2)
 101e27c:	e0bff917 	ldw	r2,-28(fp)
 101e280:	10003705 	stb	zero,220(r2)
 101e284:	e0bff917 	ldw	r2,-28(fp)
 101e288:	10003d15 	stw	zero,244(r2)
 101e28c:	e0bff917 	ldw	r2,-28(fp)
 101e290:	10005215 	stw	zero,328(r2)
 101e294:	e0bff917 	ldw	r2,-28(fp)
 101e298:	10005315 	stw	zero,332(r2)
 101e29c:	e0bff917 	ldw	r2,-28(fp)
 101e2a0:	10005415 	stw	zero,336(r2)
 101e2a4:	e0bff917 	ldw	r2,-28(fp)
 101e2a8:	10005515 	stw	zero,340(r2)
 101e2ac:	e0bff917 	ldw	r2,-28(fp)
 101e2b0:	1000b515 	stw	zero,724(r2)
 101e2b4:	e0bff917 	ldw	r2,-28(fp)
 101e2b8:	10007515 	stw	zero,468(r2)
 101e2bc:	e0bff917 	ldw	r2,-28(fp)
 101e2c0:	1000b715 	stw	zero,732(r2)
 101e2c4:	e0bff917 	ldw	r2,-28(fp)
 101e2c8:	1000b815 	stw	zero,736(r2)
 101e2cc:	e0bff917 	ldw	r2,-28(fp)
 101e2d0:	1000b915 	stw	zero,740(r2)
 101e2d4:	e0bff917 	ldw	r2,-28(fp)
 101e2d8:	1000ba15 	stw	zero,744(r2)
 101e2dc:	e0bff917 	ldw	r2,-28(fp)
 101e2e0:	1080bb04 	addi	r2,r2,748
 101e2e4:	1009883a 	mov	r4,r2
 101e2e8:	01804504 	movi	r6,276
 101e2ec:	000b883a 	mov	r5,zero
 101e2f0:	100a10c0 	call	100a10c <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 101e2f4:	e0bff917 	ldw	r2,-28(fp)
 101e2f8:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 101e2fc:	e0bffb17 	ldw	r2,-20(fp)
 101e300:	10bff304 	addi	r2,r2,-52
 101e304:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 101e308:	e0bffa17 	ldw	r2,-24(fp)
 101e30c:	10c00c04 	addi	r3,r2,48
 101e310:	e0bffc17 	ldw	r2,-16(fp)
 101e314:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 101e318:	e0bffa17 	ldw	r2,-24(fp)
 101e31c:	10c00b04 	addi	r3,r2,44
 101e320:	e0bffd17 	ldw	r2,-12(fp)
 101e324:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 101e328:	e0bffa17 	ldw	r2,-24(fp)
 101e32c:	10c00a04 	addi	r3,r2,40
 101e330:	e0bff917 	ldw	r2,-28(fp)
 101e334:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 101e338:	008040b4 	movhi	r2,258
 101e33c:	10b80c04 	addi	r2,r2,-8144
 101e340:	10c00104 	addi	r3,r2,4
 101e344:	e0bffa17 	ldw	r2,-24(fp)
 101e348:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 101e34c:	e0bffa17 	ldw	r2,-24(fp)
}
 101e350:	e037883a 	mov	sp,fp
 101e354:	dfc00117 	ldw	ra,4(sp)
 101e358:	df000017 	ldw	fp,0(sp)
 101e35c:	dec00204 	addi	sp,sp,8
 101e360:	f800283a 	ret

0101e364 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 101e364:	defffe04 	addi	sp,sp,-8
 101e368:	df000115 	stw	fp,4(sp)
 101e36c:	df000104 	addi	fp,sp,4
 101e370:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 101e374:	e037883a 	mov	sp,fp
 101e378:	df000017 	ldw	fp,0(sp)
 101e37c:	dec00104 	addi	sp,sp,4
 101e380:	f800283a 	ret

0101e384 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 101e384:	defffe04 	addi	sp,sp,-8
 101e388:	df000115 	stw	fp,4(sp)
 101e38c:	df000104 	addi	fp,sp,4
 101e390:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 101e394:	e037883a 	mov	sp,fp
 101e398:	df000017 	ldw	fp,0(sp)
 101e39c:	dec00104 	addi	sp,sp,4
 101e3a0:	f800283a 	ret

0101e3a4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 101e3a4:	deffff04 	addi	sp,sp,-4
 101e3a8:	df000015 	stw	fp,0(sp)
 101e3ac:	d839883a 	mov	fp,sp
}
 101e3b0:	e037883a 	mov	sp,fp
 101e3b4:	df000017 	ldw	fp,0(sp)
 101e3b8:	dec00104 	addi	sp,sp,4
 101e3bc:	f800283a 	ret

0101e3c0 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 101e3c0:	deffff04 	addi	sp,sp,-4
 101e3c4:	df000015 	stw	fp,0(sp)
 101e3c8:	d839883a 	mov	fp,sp
}
 101e3cc:	e037883a 	mov	sp,fp
 101e3d0:	df000017 	ldw	fp,0(sp)
 101e3d4:	dec00104 	addi	sp,sp,4
 101e3d8:	f800283a 	ret

0101e3dc <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 101e3dc:	deffff04 	addi	sp,sp,-4
 101e3e0:	df000015 	stw	fp,0(sp)
 101e3e4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 101e3e8:	e037883a 	mov	sp,fp
 101e3ec:	df000017 	ldw	fp,0(sp)
 101e3f0:	dec00104 	addi	sp,sp,4
 101e3f4:	f800283a 	ret

0101e3f8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 101e3f8:	deffff04 	addi	sp,sp,-4
 101e3fc:	df000015 	stw	fp,0(sp)
 101e400:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 101e404:	e037883a 	mov	sp,fp
 101e408:	df000017 	ldw	fp,0(sp)
 101e40c:	dec00104 	addi	sp,sp,4
 101e410:	f800283a 	ret

0101e414 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 101e414:	deffff04 	addi	sp,sp,-4
 101e418:	df000015 	stw	fp,0(sp)
 101e41c:	d839883a 	mov	fp,sp
}
 101e420:	e037883a 	mov	sp,fp
 101e424:	df000017 	ldw	fp,0(sp)
 101e428:	dec00104 	addi	sp,sp,4
 101e42c:	f800283a 	ret

0101e430 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 101e430:	deffff04 	addi	sp,sp,-4
 101e434:	df000015 	stw	fp,0(sp)
 101e438:	d839883a 	mov	fp,sp
}
 101e43c:	e037883a 	mov	sp,fp
 101e440:	df000017 	ldw	fp,0(sp)
 101e444:	dec00104 	addi	sp,sp,4
 101e448:	f800283a 	ret

0101e44c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 101e44c:	defffe04 	addi	sp,sp,-8
 101e450:	df000115 	stw	fp,4(sp)
 101e454:	df000104 	addi	fp,sp,4
 101e458:	e13fff15 	stw	r4,-4(fp)
}
 101e45c:	e037883a 	mov	sp,fp
 101e460:	df000017 	ldw	fp,0(sp)
 101e464:	dec00104 	addi	sp,sp,4
 101e468:	f800283a 	ret

0101e46c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 101e46c:	defff904 	addi	sp,sp,-28
 101e470:	dfc00615 	stw	ra,24(sp)
 101e474:	df000515 	stw	fp,20(sp)
 101e478:	df000504 	addi	fp,sp,20
 101e47c:	e13ffd15 	stw	r4,-12(fp)
 101e480:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 101e484:	e0bffe17 	ldw	r2,-8(fp)
 101e488:	10800017 	ldw	r2,0(r2)
 101e48c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 101e490:	e13ffd17 	ldw	r4,-12(fp)
 101e494:	100a5dc0 	call	100a5dc <strlen>
 101e498:	10800044 	addi	r2,r2,1
 101e49c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 101e4a0:	00000d06 	br	101e4d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 101e4a4:	e0bffc17 	ldw	r2,-16(fp)
 101e4a8:	11000217 	ldw	r4,8(r2)
 101e4ac:	e1bffb17 	ldw	r6,-20(fp)
 101e4b0:	e17ffd17 	ldw	r5,-12(fp)
 101e4b4:	1009f180 	call	1009f18 <memcmp>
 101e4b8:	1004c03a 	cmpne	r2,r2,zero
 101e4bc:	1000031e 	bne	r2,zero,101e4cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 101e4c0:	e0bffc17 	ldw	r2,-16(fp)
 101e4c4:	e0bfff15 	stw	r2,-4(fp)
 101e4c8:	00000706 	br	101e4e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 101e4cc:	e0bffc17 	ldw	r2,-16(fp)
 101e4d0:	10800017 	ldw	r2,0(r2)
 101e4d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 101e4d8:	e0fffe17 	ldw	r3,-8(fp)
 101e4dc:	e0bffc17 	ldw	r2,-16(fp)
 101e4e0:	10fff01e 	bne	r2,r3,101e4a4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 101e4e4:	e03fff15 	stw	zero,-4(fp)
 101e4e8:	e0bfff17 	ldw	r2,-4(fp)
}
 101e4ec:	e037883a 	mov	sp,fp
 101e4f0:	dfc00117 	ldw	ra,4(sp)
 101e4f4:	df000017 	ldw	fp,0(sp)
 101e4f8:	dec00204 	addi	sp,sp,8
 101e4fc:	f800283a 	ret

0101e500 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 101e500:	defffa04 	addi	sp,sp,-24
 101e504:	dfc00515 	stw	ra,20(sp)
 101e508:	df000415 	stw	fp,16(sp)
 101e50c:	df000404 	addi	fp,sp,16
 101e510:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 101e514:	008040b4 	movhi	r2,258
 101e518:	1084a604 	addi	r2,r2,4760
 101e51c:	10800017 	ldw	r2,0(r2)
 101e520:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 101e524:	00003306 	br	101e5f4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 101e528:	e0bffd17 	ldw	r2,-12(fp)
 101e52c:	11000217 	ldw	r4,8(r2)
 101e530:	100a5dc0 	call	100a5dc <strlen>
 101e534:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 101e538:	e0bffd17 	ldw	r2,-12(fp)
 101e53c:	10c00217 	ldw	r3,8(r2)
 101e540:	e0bffc17 	ldw	r2,-16(fp)
 101e544:	1885883a 	add	r2,r3,r2
 101e548:	10bfffc4 	addi	r2,r2,-1
 101e54c:	10800003 	ldbu	r2,0(r2)
 101e550:	10803fcc 	andi	r2,r2,255
 101e554:	1080201c 	xori	r2,r2,128
 101e558:	10bfe004 	addi	r2,r2,-128
 101e55c:	10800bd8 	cmpnei	r2,r2,47
 101e560:	1000031e 	bne	r2,zero,101e570 <alt_find_file+0x70>
    {
      len -= 1;
 101e564:	e0bffc17 	ldw	r2,-16(fp)
 101e568:	10bfffc4 	addi	r2,r2,-1
 101e56c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 101e570:	e0bffc17 	ldw	r2,-16(fp)
 101e574:	1007883a 	mov	r3,r2
 101e578:	e0bffe17 	ldw	r2,-8(fp)
 101e57c:	1885883a 	add	r2,r3,r2
 101e580:	10800003 	ldbu	r2,0(r2)
 101e584:	10803fcc 	andi	r2,r2,255
 101e588:	1080201c 	xori	r2,r2,128
 101e58c:	10bfe004 	addi	r2,r2,-128
 101e590:	10800be0 	cmpeqi	r2,r2,47
 101e594:	10000a1e 	bne	r2,zero,101e5c0 <alt_find_file+0xc0>
 101e598:	e0bffc17 	ldw	r2,-16(fp)
 101e59c:	1007883a 	mov	r3,r2
 101e5a0:	e0bffe17 	ldw	r2,-8(fp)
 101e5a4:	1885883a 	add	r2,r3,r2
 101e5a8:	10800003 	ldbu	r2,0(r2)
 101e5ac:	10803fcc 	andi	r2,r2,255
 101e5b0:	1080201c 	xori	r2,r2,128
 101e5b4:	10bfe004 	addi	r2,r2,-128
 101e5b8:	1004c03a 	cmpne	r2,r2,zero
 101e5bc:	10000a1e 	bne	r2,zero,101e5e8 <alt_find_file+0xe8>
 101e5c0:	e0bffd17 	ldw	r2,-12(fp)
 101e5c4:	11000217 	ldw	r4,8(r2)
 101e5c8:	e1bffc17 	ldw	r6,-16(fp)
 101e5cc:	e17ffe17 	ldw	r5,-8(fp)
 101e5d0:	1009f180 	call	1009f18 <memcmp>
 101e5d4:	1004c03a 	cmpne	r2,r2,zero
 101e5d8:	1000031e 	bne	r2,zero,101e5e8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 101e5dc:	e0bffd17 	ldw	r2,-12(fp)
 101e5e0:	e0bfff15 	stw	r2,-4(fp)
 101e5e4:	00000806 	br	101e608 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 101e5e8:	e0bffd17 	ldw	r2,-12(fp)
 101e5ec:	10800017 	ldw	r2,0(r2)
 101e5f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 101e5f4:	00c040b4 	movhi	r3,258
 101e5f8:	18c4a604 	addi	r3,r3,4760
 101e5fc:	e0bffd17 	ldw	r2,-12(fp)
 101e600:	10ffc91e 	bne	r2,r3,101e528 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 101e604:	e03fff15 	stw	zero,-4(fp)
 101e608:	e0bfff17 	ldw	r2,-4(fp)
}
 101e60c:	e037883a 	mov	sp,fp
 101e610:	dfc00117 	ldw	ra,4(sp)
 101e614:	df000017 	ldw	fp,0(sp)
 101e618:	dec00204 	addi	sp,sp,8
 101e61c:	f800283a 	ret

0101e620 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 101e620:	defff804 	addi	sp,sp,-32
 101e624:	dfc00715 	stw	ra,28(sp)
 101e628:	df000615 	stw	fp,24(sp)
 101e62c:	df000604 	addi	fp,sp,24
 101e630:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 101e634:	00bffa04 	movi	r2,-24
 101e638:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 101e63c:	008040b4 	movhi	r2,258
 101e640:	108bb004 	addi	r2,r2,11968
 101e644:	10800017 	ldw	r2,0(r2)
 101e648:	e0bffa15 	stw	r2,-24(fp)
 101e64c:	e03ffb0d 	sth	zero,-20(fp)
 101e650:	e17ffb0b 	ldhu	r5,-20(fp)
 101e654:	e1bffe04 	addi	r6,fp,-8
 101e658:	e13ffa17 	ldw	r4,-24(fp)
 101e65c:	1019cf00 	call	1019cf0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 101e660:	e03ffd15 	stw	zero,-12(fp)
 101e664:	00001e06 	br	101e6e0 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 101e668:	e0bffd17 	ldw	r2,-12(fp)
 101e66c:	00c040b4 	movhi	r3,258
 101e670:	18c00c04 	addi	r3,r3,48
 101e674:	10800324 	muli	r2,r2,12
 101e678:	10c5883a 	add	r2,r2,r3
 101e67c:	10800017 	ldw	r2,0(r2)
 101e680:	1004c03a 	cmpne	r2,r2,zero
 101e684:	1000131e 	bne	r2,zero,101e6d4 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 101e688:	e0bffd17 	ldw	r2,-12(fp)
 101e68c:	00c040b4 	movhi	r3,258
 101e690:	18c00c04 	addi	r3,r3,48
 101e694:	10800324 	muli	r2,r2,12
 101e698:	10c7883a 	add	r3,r2,r3
 101e69c:	e0bfff17 	ldw	r2,-4(fp)
 101e6a0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 101e6a4:	008040b4 	movhi	r2,258
 101e6a8:	1084aa04 	addi	r2,r2,4776
 101e6ac:	10c00017 	ldw	r3,0(r2)
 101e6b0:	e0bffd17 	ldw	r2,-12(fp)
 101e6b4:	1880040e 	bge	r3,r2,101e6c8 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 101e6b8:	00c040b4 	movhi	r3,258
 101e6bc:	18c4aa04 	addi	r3,r3,4776
 101e6c0:	e0bffd17 	ldw	r2,-12(fp)
 101e6c4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 101e6c8:	e0bffd17 	ldw	r2,-12(fp)
 101e6cc:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 101e6d0:	00000606 	br	101e6ec <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 101e6d4:	e0bffd17 	ldw	r2,-12(fp)
 101e6d8:	10800044 	addi	r2,r2,1
 101e6dc:	e0bffd15 	stw	r2,-12(fp)
 101e6e0:	e0bffd17 	ldw	r2,-12(fp)
 101e6e4:	10800810 	cmplti	r2,r2,32
 101e6e8:	103fdf1e 	bne	r2,zero,101e668 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 101e6ec:	008040b4 	movhi	r2,258
 101e6f0:	108bb004 	addi	r2,r2,11968
 101e6f4:	11000017 	ldw	r4,0(r2)
 101e6f8:	101a0e80 	call	101a0e8 <OSSemPost>

  return rc;
 101e6fc:	e0bffc17 	ldw	r2,-16(fp)
}
 101e700:	e037883a 	mov	sp,fp
 101e704:	dfc00117 	ldw	ra,4(sp)
 101e708:	df000017 	ldw	fp,0(sp)
 101e70c:	dec00204 	addi	sp,sp,8
 101e710:	f800283a 	ret

0101e714 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 101e714:	defffb04 	addi	sp,sp,-20
 101e718:	df000415 	stw	fp,16(sp)
 101e71c:	df000404 	addi	fp,sp,16
 101e720:	e13ffe15 	stw	r4,-8(fp)
 101e724:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 101e728:	e0bfff17 	ldw	r2,-4(fp)
 101e72c:	10880070 	cmpltui	r2,r2,8193
 101e730:	1000021e 	bne	r2,zero,101e73c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 101e734:	00880004 	movi	r2,8192
 101e738:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 101e73c:	e0fffe17 	ldw	r3,-8(fp)
 101e740:	e0bfff17 	ldw	r2,-4(fp)
 101e744:	1885883a 	add	r2,r3,r2
 101e748:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 101e74c:	e0bffe17 	ldw	r2,-8(fp)
 101e750:	e0bffd15 	stw	r2,-12(fp)
 101e754:	00000506 	br	101e76c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 101e758:	e0bffd17 	ldw	r2,-12(fp)
 101e75c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 101e760:	e0bffd17 	ldw	r2,-12(fp)
 101e764:	10800804 	addi	r2,r2,32
 101e768:	e0bffd15 	stw	r2,-12(fp)
 101e76c:	e0fffd17 	ldw	r3,-12(fp)
 101e770:	e0bffc17 	ldw	r2,-16(fp)
 101e774:	18bff836 	bltu	r3,r2,101e758 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 101e778:	e0bffe17 	ldw	r2,-8(fp)
 101e77c:	108007cc 	andi	r2,r2,31
 101e780:	1005003a 	cmpeq	r2,r2,zero
 101e784:	1000021e 	bne	r2,zero,101e790 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 101e788:	e0bffd17 	ldw	r2,-12(fp)
 101e78c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 101e790:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 101e794:	e037883a 	mov	sp,fp
 101e798:	df000017 	ldw	fp,0(sp)
 101e79c:	dec00104 	addi	sp,sp,4
 101e7a0:	f800283a 	ret

0101e7a4 <atexit>:
 101e7a4:	200b883a 	mov	r5,r4
 101e7a8:	000d883a 	mov	r6,zero
 101e7ac:	0009883a 	mov	r4,zero
 101e7b0:	000f883a 	mov	r7,zero
 101e7b4:	101e7f01 	jmpi	101e7f0 <__register_exitproc>

0101e7b8 <exit>:
 101e7b8:	defffe04 	addi	sp,sp,-8
 101e7bc:	000b883a 	mov	r5,zero
 101e7c0:	dc000015 	stw	r16,0(sp)
 101e7c4:	dfc00115 	stw	ra,4(sp)
 101e7c8:	2021883a 	mov	r16,r4
 101e7cc:	101e9280 	call	101e928 <__call_exitprocs>
 101e7d0:	008040b4 	movhi	r2,258
 101e7d4:	1084a304 	addi	r2,r2,4748
 101e7d8:	11000017 	ldw	r4,0(r2)
 101e7dc:	20800f17 	ldw	r2,60(r4)
 101e7e0:	10000126 	beq	r2,zero,101e7e8 <exit+0x30>
 101e7e4:	103ee83a 	callr	r2
 101e7e8:	8009883a 	mov	r4,r16
 101e7ec:	10133100 	call	1013310 <_exit>

0101e7f0 <__register_exitproc>:
 101e7f0:	defffa04 	addi	sp,sp,-24
 101e7f4:	008040b4 	movhi	r2,258
 101e7f8:	1084a304 	addi	r2,r2,4748
 101e7fc:	dc000015 	stw	r16,0(sp)
 101e800:	14000017 	ldw	r16,0(r2)
 101e804:	dd000415 	stw	r20,16(sp)
 101e808:	2829883a 	mov	r20,r5
 101e80c:	81405217 	ldw	r5,328(r16)
 101e810:	dcc00315 	stw	r19,12(sp)
 101e814:	dc800215 	stw	r18,8(sp)
 101e818:	dc400115 	stw	r17,4(sp)
 101e81c:	dfc00515 	stw	ra,20(sp)
 101e820:	2023883a 	mov	r17,r4
 101e824:	3027883a 	mov	r19,r6
 101e828:	3825883a 	mov	r18,r7
 101e82c:	28002526 	beq	r5,zero,101e8c4 <__register_exitproc+0xd4>
 101e830:	29000117 	ldw	r4,4(r5)
 101e834:	008007c4 	movi	r2,31
 101e838:	11002716 	blt	r2,r4,101e8d8 <__register_exitproc+0xe8>
 101e83c:	8800101e 	bne	r17,zero,101e880 <__register_exitproc+0x90>
 101e840:	2105883a 	add	r2,r4,r4
 101e844:	1085883a 	add	r2,r2,r2
 101e848:	20c00044 	addi	r3,r4,1
 101e84c:	1145883a 	add	r2,r2,r5
 101e850:	0009883a 	mov	r4,zero
 101e854:	15000215 	stw	r20,8(r2)
 101e858:	28c00115 	stw	r3,4(r5)
 101e85c:	2005883a 	mov	r2,r4
 101e860:	dfc00517 	ldw	ra,20(sp)
 101e864:	dd000417 	ldw	r20,16(sp)
 101e868:	dcc00317 	ldw	r19,12(sp)
 101e86c:	dc800217 	ldw	r18,8(sp)
 101e870:	dc400117 	ldw	r17,4(sp)
 101e874:	dc000017 	ldw	r16,0(sp)
 101e878:	dec00604 	addi	sp,sp,24
 101e87c:	f800283a 	ret
 101e880:	29802204 	addi	r6,r5,136
 101e884:	00800044 	movi	r2,1
 101e888:	110e983a 	sll	r7,r2,r4
 101e88c:	30c04017 	ldw	r3,256(r6)
 101e890:	2105883a 	add	r2,r4,r4
 101e894:	1085883a 	add	r2,r2,r2
 101e898:	1185883a 	add	r2,r2,r6
 101e89c:	19c6b03a 	or	r3,r3,r7
 101e8a0:	14802015 	stw	r18,128(r2)
 101e8a4:	14c00015 	stw	r19,0(r2)
 101e8a8:	00800084 	movi	r2,2
 101e8ac:	30c04015 	stw	r3,256(r6)
 101e8b0:	88bfe31e 	bne	r17,r2,101e840 <__register_exitproc+0x50>
 101e8b4:	30804117 	ldw	r2,260(r6)
 101e8b8:	11c4b03a 	or	r2,r2,r7
 101e8bc:	30804115 	stw	r2,260(r6)
 101e8c0:	003fdf06 	br	101e840 <__register_exitproc+0x50>
 101e8c4:	008040f4 	movhi	r2,259
 101e8c8:	10aaa604 	addi	r2,r2,-21864
 101e8cc:	100b883a 	mov	r5,r2
 101e8d0:	80805215 	stw	r2,328(r16)
 101e8d4:	003fd606 	br	101e830 <__register_exitproc+0x40>
 101e8d8:	00804074 	movhi	r2,257
 101e8dc:	10a5b804 	addi	r2,r2,-26912
 101e8e0:	1000021e 	bne	r2,zero,101e8ec <__register_exitproc+0xfc>
 101e8e4:	013fffc4 	movi	r4,-1
 101e8e8:	003fdc06 	br	101e85c <__register_exitproc+0x6c>
 101e8ec:	01006404 	movi	r4,400
 101e8f0:	103ee83a 	callr	r2
 101e8f4:	1007883a 	mov	r3,r2
 101e8f8:	103ffa26 	beq	r2,zero,101e8e4 <__register_exitproc+0xf4>
 101e8fc:	80805217 	ldw	r2,328(r16)
 101e900:	180b883a 	mov	r5,r3
 101e904:	18000115 	stw	zero,4(r3)
 101e908:	18800015 	stw	r2,0(r3)
 101e90c:	80c05215 	stw	r3,328(r16)
 101e910:	18006215 	stw	zero,392(r3)
 101e914:	18006315 	stw	zero,396(r3)
 101e918:	0009883a 	mov	r4,zero
 101e91c:	883fc826 	beq	r17,zero,101e840 <__register_exitproc+0x50>
 101e920:	003fd706 	br	101e880 <__register_exitproc+0x90>

0101e924 <register_fini>:
 101e924:	f800283a 	ret

0101e928 <__call_exitprocs>:
 101e928:	008040b4 	movhi	r2,258
 101e92c:	1084a304 	addi	r2,r2,4748
 101e930:	10800017 	ldw	r2,0(r2)
 101e934:	defff304 	addi	sp,sp,-52
 101e938:	df000b15 	stw	fp,44(sp)
 101e93c:	d8800115 	stw	r2,4(sp)
 101e940:	00804074 	movhi	r2,257
 101e944:	10a5b304 	addi	r2,r2,-26932
 101e948:	1005003a 	cmpeq	r2,r2,zero
 101e94c:	d8800215 	stw	r2,8(sp)
 101e950:	d8800117 	ldw	r2,4(sp)
 101e954:	dd400815 	stw	r21,32(sp)
 101e958:	dd000715 	stw	r20,28(sp)
 101e95c:	10805204 	addi	r2,r2,328
 101e960:	dfc00c15 	stw	ra,48(sp)
 101e964:	ddc00a15 	stw	r23,40(sp)
 101e968:	dd800915 	stw	r22,36(sp)
 101e96c:	dcc00615 	stw	r19,24(sp)
 101e970:	dc800515 	stw	r18,20(sp)
 101e974:	dc400415 	stw	r17,16(sp)
 101e978:	dc000315 	stw	r16,12(sp)
 101e97c:	282b883a 	mov	r21,r5
 101e980:	2039883a 	mov	fp,r4
 101e984:	d8800015 	stw	r2,0(sp)
 101e988:	2829003a 	cmpeq	r20,r5,zero
 101e98c:	d8800117 	ldw	r2,4(sp)
 101e990:	14405217 	ldw	r17,328(r2)
 101e994:	88001026 	beq	r17,zero,101e9d8 <__call_exitprocs+0xb0>
 101e998:	ddc00017 	ldw	r23,0(sp)
 101e99c:	88800117 	ldw	r2,4(r17)
 101e9a0:	8c802204 	addi	r18,r17,136
 101e9a4:	143fffc4 	addi	r16,r2,-1
 101e9a8:	80000916 	blt	r16,zero,101e9d0 <__call_exitprocs+0xa8>
 101e9ac:	05bfffc4 	movi	r22,-1
 101e9b0:	a000151e 	bne	r20,zero,101ea08 <__call_exitprocs+0xe0>
 101e9b4:	8409883a 	add	r4,r16,r16
 101e9b8:	2105883a 	add	r2,r4,r4
 101e9bc:	1485883a 	add	r2,r2,r18
 101e9c0:	10c02017 	ldw	r3,128(r2)
 101e9c4:	a8c01126 	beq	r21,r3,101ea0c <__call_exitprocs+0xe4>
 101e9c8:	843fffc4 	addi	r16,r16,-1
 101e9cc:	85bff81e 	bne	r16,r22,101e9b0 <__call_exitprocs+0x88>
 101e9d0:	d8800217 	ldw	r2,8(sp)
 101e9d4:	10003126 	beq	r2,zero,101ea9c <__call_exitprocs+0x174>
 101e9d8:	dfc00c17 	ldw	ra,48(sp)
 101e9dc:	df000b17 	ldw	fp,44(sp)
 101e9e0:	ddc00a17 	ldw	r23,40(sp)
 101e9e4:	dd800917 	ldw	r22,36(sp)
 101e9e8:	dd400817 	ldw	r21,32(sp)
 101e9ec:	dd000717 	ldw	r20,28(sp)
 101e9f0:	dcc00617 	ldw	r19,24(sp)
 101e9f4:	dc800517 	ldw	r18,20(sp)
 101e9f8:	dc400417 	ldw	r17,16(sp)
 101e9fc:	dc000317 	ldw	r16,12(sp)
 101ea00:	dec00d04 	addi	sp,sp,52
 101ea04:	f800283a 	ret
 101ea08:	8409883a 	add	r4,r16,r16
 101ea0c:	88c00117 	ldw	r3,4(r17)
 101ea10:	2105883a 	add	r2,r4,r4
 101ea14:	1445883a 	add	r2,r2,r17
 101ea18:	18ffffc4 	addi	r3,r3,-1
 101ea1c:	11800217 	ldw	r6,8(r2)
 101ea20:	1c001526 	beq	r3,r16,101ea78 <__call_exitprocs+0x150>
 101ea24:	10000215 	stw	zero,8(r2)
 101ea28:	303fe726 	beq	r6,zero,101e9c8 <__call_exitprocs+0xa0>
 101ea2c:	00c00044 	movi	r3,1
 101ea30:	1c06983a 	sll	r3,r3,r16
 101ea34:	90804017 	ldw	r2,256(r18)
 101ea38:	8cc00117 	ldw	r19,4(r17)
 101ea3c:	1884703a 	and	r2,r3,r2
 101ea40:	10001426 	beq	r2,zero,101ea94 <__call_exitprocs+0x16c>
 101ea44:	90804117 	ldw	r2,260(r18)
 101ea48:	1884703a 	and	r2,r3,r2
 101ea4c:	10000c1e 	bne	r2,zero,101ea80 <__call_exitprocs+0x158>
 101ea50:	2105883a 	add	r2,r4,r4
 101ea54:	1485883a 	add	r2,r2,r18
 101ea58:	11400017 	ldw	r5,0(r2)
 101ea5c:	e009883a 	mov	r4,fp
 101ea60:	303ee83a 	callr	r6
 101ea64:	88800117 	ldw	r2,4(r17)
 101ea68:	98bfc81e 	bne	r19,r2,101e98c <__call_exitprocs+0x64>
 101ea6c:	b8800017 	ldw	r2,0(r23)
 101ea70:	147fd526 	beq	r2,r17,101e9c8 <__call_exitprocs+0xa0>
 101ea74:	003fc506 	br	101e98c <__call_exitprocs+0x64>
 101ea78:	8c000115 	stw	r16,4(r17)
 101ea7c:	003fea06 	br	101ea28 <__call_exitprocs+0x100>
 101ea80:	2105883a 	add	r2,r4,r4
 101ea84:	1485883a 	add	r2,r2,r18
 101ea88:	11000017 	ldw	r4,0(r2)
 101ea8c:	303ee83a 	callr	r6
 101ea90:	003ff406 	br	101ea64 <__call_exitprocs+0x13c>
 101ea94:	303ee83a 	callr	r6
 101ea98:	003ff206 	br	101ea64 <__call_exitprocs+0x13c>
 101ea9c:	88800117 	ldw	r2,4(r17)
 101eaa0:	1000081e 	bne	r2,zero,101eac4 <__call_exitprocs+0x19c>
 101eaa4:	89000017 	ldw	r4,0(r17)
 101eaa8:	20000726 	beq	r4,zero,101eac8 <__call_exitprocs+0x1a0>
 101eaac:	b9000015 	stw	r4,0(r23)
 101eab0:	8809883a 	mov	r4,r17
 101eab4:	10096cc0 	call	10096cc <free>
 101eab8:	bc400017 	ldw	r17,0(r23)
 101eabc:	883fb71e 	bne	r17,zero,101e99c <__call_exitprocs+0x74>
 101eac0:	003fc506 	br	101e9d8 <__call_exitprocs+0xb0>
 101eac4:	89000017 	ldw	r4,0(r17)
 101eac8:	882f883a 	mov	r23,r17
 101eacc:	2023883a 	mov	r17,r4
 101ead0:	883fb21e 	bne	r17,zero,101e99c <__call_exitprocs+0x74>
 101ead4:	003fc006 	br	101e9d8 <__call_exitprocs+0xb0>
 101ead8:	0401ffff 	0x401ffff
 101eadc:	00010000 	call	1000 <OSCtxSw_SWITCH_PC+0xfc0>
 101eae0:	010d0bff 	0x10d0bff
 101eae4:	01030004 	movi	r4,3072
 101eae8:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eaec:	0000007d 	0x7d
 101eaf0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eaf4:	01110bff 	0x1110bff
 101eaf8:	01030008 	cmpgei	r4,zero,3072
 101eafc:	03000203 	ldbu	r12,8(zero)
 101eb00:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb04:	0000007d 	0x7d
 101eb08:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eb0c:	01110bff 	0x1110bff
 101eb10:	01030008 	cmpgei	r4,zero,3072
 101eb14:	03000203 	ldbu	r12,8(zero)
 101eb18:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb1c:	0000007d 	0x7d
 101eb20:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eb24:	01110bff 	0x1110bff
 101eb28:	01030008 	cmpgei	r4,zero,3072
 101eb2c:	03000203 	ldbu	r12,8(zero)
 101eb30:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb34:	0000007d 	0x7d
 101eb38:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eb3c:	01110bff 	0x1110bff
 101eb40:	01030008 	cmpgei	r4,zero,3072
 101eb44:	03000203 	ldbu	r12,8(zero)
 101eb48:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb4c:	0000007d 	0x7d
 101eb50:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eb54:	01110bff 	0x1110bff
 101eb58:	01030008 	cmpgei	r4,zero,3072
 101eb5c:	03000203 	ldbu	r12,8(zero)
 101eb60:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb64:	0000007d 	0x7d
 101eb68:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eb6c:	01110bff 	0x1110bff
 101eb70:	01030008 	cmpgei	r4,zero,3072
 101eb74:	03000203 	ldbu	r12,8(zero)
 101eb78:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb7c:	0000007d 	0x7d
 101eb80:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eb84:	01110bff 	0x1110bff
 101eb88:	01030008 	cmpgei	r4,zero,3072
 101eb8c:	03000203 	ldbu	r12,8(zero)
 101eb90:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb94:	0000007d 	0x7d
 101eb98:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eb9c:	01110bff 	0x1110bff
 101eba0:	01030008 	cmpgei	r4,zero,3072
 101eba4:	03000203 	ldbu	r12,8(zero)
 101eba8:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101ebac:	0000007d 	0x7d
 101ebb0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ebb4:	01110bff 	0x1110bff
 101ebb8:	01030008 	cmpgei	r4,zero,3072
 101ebbc:	03000203 	ldbu	r12,8(zero)
 101ebc0:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101ebc4:	0000007d 	0x7d
 101ebc8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ebcc:	01090bff 	0x1090bff
 101ebd0:	7f030002 	0x7f030002
 101ebd4:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ebd8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ebdc:	01090bff 	0x1090bff
 101ebe0:	7f030002 	0x7f030002
 101ebe4:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ebe8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ebec:	01090bff 	0x1090bff
 101ebf0:	7f030002 	0x7f030002
 101ebf4:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ebf8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ebfc:	01090bff 	0x1090bff
 101ec00:	7f030002 	0x7f030002
 101ec04:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec08:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec0c:	01090bff 	0x1090bff
 101ec10:	7f030002 	0x7f030002
 101ec14:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec18:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec1c:	01090bff 	0x1090bff
 101ec20:	7f030002 	0x7f030002
 101ec24:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec28:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ec2c:	ff000002 	0xff000002
 101ec30:	000201ff 	0x201ff
 101ec34:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ec38:	ff000002 	0xff000002
 101ec3c:	000201ff 	0x201ff
 101ec40:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec44:	01090bff 	0x1090bff
 101ec48:	7f030002 	0x7f030002
 101ec4c:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec50:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec54:	01090bff 	0x1090bff
 101ec58:	7f030002 	0x7f030002
 101ec5c:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec60:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec64:	01090bff 	0x1090bff
 101ec68:	7f030002 	0x7f030002
 101ec6c:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec70:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec74:	01090bff 	0x1090bff
 101ec78:	7f030002 	0x7f030002
 101ec7c:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec80:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec84:	01090bff 	0x1090bff
 101ec88:	7f030002 	0x7f030002
 101ec8c:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec90:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec94:	01090bff 	0x1090bff
 101ec98:	7f010002 	0x7f010002
 101ec9c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eca0:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101eca4:	00000002 	0x2
 101eca8:	01090bff 	0x1090bff
 101ecac:	7f010002 	0x7f010002
 101ecb0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ecb4:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ecb8:	ff000002 	0xff000002
 101ecbc:	000201ff 	0x201ff
 101ecc0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ecc4:	01090bff 	0x1090bff
 101ecc8:	01010004 	movi	r4,1024
 101eccc:	00007f00 	call	7f0 <OSCtxSw_SWITCH_PC+0x7b0>
 101ecd0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ecd4:	01090bff 	0x1090bff
 101ecd8:	01010004 	movi	r4,1024
 101ecdc:	00007f00 	call	7f0 <OSCtxSw_SWITCH_PC+0x7b0>
 101ece0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ece4:	010d0bff 	0x10d0bff
 101ece8:	01010006 	br	101f0ec <_ZTISt11logic_error+0xa8>
 101ecec:	7f000200 	call	7f00020 <__alt_data_end+0x5f00020>
 101ecf0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ecf4:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ecf8:	ff000002 	0xff000002
 101ecfc:	000201ff 	0x201ff
 101ed00:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ed04:	ff000002 	0xff000002
 101ed08:	000201ff 	0x201ff
 101ed0c:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ed10:	01000004 	movi	r4,0
 101ed14:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ed18:	01000004 	movi	r4,0
 101ed1c:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ed20:	01000004 	movi	r4,0
 101ed24:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ed28:	01000008 	cmpgei	r4,zero,0
 101ed2c:	03000200 	call	300020 <OSCtxSw_SWITCH_PC+0x2fffe0>
 101ed30:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ed34:	010d0bff 	0x10d0bff
 101ed38:	01000004 	movi	r4,0
 101ed3c:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 101ed40:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ed44:	010d0bff 	0x10d0bff
 101ed48:	01000004 	movi	r4,0
 101ed4c:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 101ed50:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ed54:	010d0bff 	0x10d0bff
 101ed58:	01000004 	movi	r4,0
 101ed5c:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 101ed60:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ed64:	01090bff 	0x1090bff
 101ed68:	7f010002 	0x7f010002
	...
 101ed74:	01090bff 	0x1090bff
 101ed78:	7f010002 	0x7f010002
	...
 101ed84:	010d0bff 	0x10d0bff
 101ed88:	7f010002 	0x7f010002
 101ed8c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ed90:	0101f230 	cmpltui	r4,zero,1992
 101ed94:	00000001 	jmpi	0 <OSTCBStkPtr_OFFSET>
 101ed98:	010015ac 	andhi	r4,zero,86
 101ed9c:	0101e924 	muli	r4,zero,1956
