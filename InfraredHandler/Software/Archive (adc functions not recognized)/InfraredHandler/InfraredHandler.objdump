
InfraredHandler.elf:     file format elf32-littlenios2
InfraredHandler.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0001f7f0 memsz 0x0001f7f0 flags r-x
    LOAD off    0x00020810 vaddr 0x0101f810 paddr 0x01021358 align 2**12
         filesz 0x00001b48 memsz 0x00001b48 flags rw-
    LOAD off    0x00022ea0 vaddr 0x01022ea0 paddr 0x01022ea0 align 2**12
         filesz 0x00000000 memsz 0x00007da4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001ec00  010001bc  010001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a54  0101edbc  0101edbc  0001fdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b48  0101f810  01021358  00020810  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007da4  01022ea0  01022ea0  00022ea0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00022358  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001990  00000000  00000000  00022380  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000082a2  00000000  00000000  00023d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00064119  00000000  00000000  0002bfb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000fbd5  00000000  00000000  000900cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00029eb9  00000000  00000000  0009fca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00004e30  00000000  00000000  000c9b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00008eeb  00000000  00000000  000ce98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000162d1  00000000  00000000  000d7877  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000edb48  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003290  00000000  00000000  000edb78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000fadfc  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000fae02  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000fae05  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000fae06  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000fae07  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000fae0b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000fae0f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000fae13  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000fae1e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000fae29  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  000fae34  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003c  00000000  00000000  000fae3a  2**0
                  CONTENTS, READONLY
 29 .jdi          000046ad  00000000  00000000  000fae76  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00048ed1  00000000  00000000  000ff523  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001bc l    d  .text	00000000 .text
0101edbc l    d  .rodata	00000000 .rodata
0101f810 l    d  .rwdata	00000000 .rwdata
01022ea0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 CommandHandler.cpp
00000000 l    df *ABS*	00000000 CommandTasks.cpp
00000000 l    df *ABS*	00000000 DataSource.cpp
00000000 l    df *ABS*	00000000 InfraredHandler.cpp
00000000 l    df *ABS*	00000000 InfraredTasks.cpp
00000000 l    df *ABS*	00000000 main.cpp
010015c8 l     F .text	00000030 _GLOBAL__I_command_check_infrared_task_stk
01001438 l     F .text	00000190 _Z41__static_initialization_and_destruction_0ii
00000000 l    df *ABS*	00000000 functexcept.cc
00000000 l    df *ABS*	00000000 ios_failure.cc
00000000 l    df *ABS*	00000000 list.cc
00000000 l    df *ABS*	00000000 stdexcept.cc
00000000 l    df *ABS*	00000000 string-inst.cc
00000000 l    df *ABS*	00000000 atomicity.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
01007bc8 l     F .text	00000030 _Z12read_uleb128PKhPj
01007bf8 l     F .text	00000054 _Z12read_sleb128PKhPi
01007c4c l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
01007ce8 l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
01007ebc l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
01007f4c l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0100804c l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
010080d0 l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
01008b98 l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 bad_typeid.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
01026f68 l     O .bss	00000800 emergency_buffer
01022eb0 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 bad_cast.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
01022eb4 l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 unwind-sjlj.c
01022ebc l     O .bss	00000004 fc_static
01009248 l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
01009360 l     F .text	000000cc _Unwind_RaiseException_Phase2
0100942c l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100a66c l     F .text	00000058 __sprint_r
0101f40e l     O .rodata	00000010 blanks.3452
0101f3fe l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0100c6d0 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0100e0cc l     F .text	00000058 std
0100e1d8 l     F .text	00000008 __fp_lock
0100e1e0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0101fc18 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
010212b0 l     O .rwdata	00000004 charset
0101f444 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mprec.c
0101f58c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
010118c0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
010129ec l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
01013260 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
010132c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
010132ec l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0101342c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0101356c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0101370c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
010137ec l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01013948 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
01013b90 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
010212cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
01013e2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
010212d0 l     O .rwdata	00000004 lockid
01022eec l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
010212d4 l     O .rwdata	00000004 lockid
01022ef4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
01015864 l     F .text	00000044 OS_InitMisc
010158a8 l     F .text	0000006c OS_InitRdyList
01015a0c l     F .text	000000e0 OS_InitTCBList
01015788 l     F .text	000000dc OS_InitEventList
01015914 l     F .text	0000007c OS_InitTaskIdle
01015990 l     F .text	0000007c OS_InitTaskStat
01015c80 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
01017ba0 l     F .text	00000110 OS_FlagTaskRdy
010178f8 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
010201cc l     O .rwdata	0000106c jtag_uart_0
01021238 l     O .rwdata	0000002c adc
0101c4d4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0101c78c l     F .text	000002c4 altera_avalon_jtag_uart_irq
0101ca50 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0101d268 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0101d5b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0101d9d8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0101db14 l     F .text	000000dc alt_file_locked
0101dd78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0101e940 l     F .text	00000004 register_fini
01000f6c  w    F .text	00000064 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8allocateEmPKv
01006e18  w    F .text	0000005c _ZNSs2atEm
01008e6c g     F .text	00000040 __cxa_free_exception
010057b4  w    F .text	00000034 _ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
01024f58 g     O .bss	00002000 infrared_read_task_stk
01008e1c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
0100f44c g     F .text	00000094 _mprec_log10
010088a8 g     F .text	00000018 _ZSt10unexpectedv
01021322 g     O .rwdata	00000002 OSTaskNameSize
01001708 g     F .text	00000034 _ZSt18__throw_bad_typeidv
0100f538 g     F .text	00000088 __any_on
01010bd4 g     F .text	00000070 _isatty_r
0101f564 g     O .rodata	00000028 __mprec_tinytens
010030c0 g     F .text	00000030 _ZNSt14overflow_errorC1ERKSs
010139a8 g     F .text	000000c8 alt_main
010052d8  w    F .text	00000040 _ZNKSs6substrEmm
0102a9b4 g     O .bss	00000100 alt_irq
01021274  w    O .rwdata	00000004 _ZNSs4nposE
01010c44 g     F .text	00000078 _lseek_r
01018494 g     F .text	000000d0 OS_MemInit
010091f8 g     F .text	00000014 _Unwind_GetIPInfo
01021358 g       *ABS*	00000000 __flash_rwdata_start
0101c3d4 g     F .text	00000064 OSTimeSet
010123e0 g     F .text	00000088 __eqdf2
010013d4 g     F .text	00000064 _Z18infrared_read_taskPv
01008ab0 g     F .text	00000074 __cxa_rethrow
01009198 g     F .text	0000000c _Unwind_SjLj_Unregister
0100495c  w    F .text	00000018 _ZNKSs6rbeginEv
010087c8 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
010143e0 g     F .text	000006b4 OSEventPendMulti
010056cc  w    F .text	000000b4 _ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag
01005438  w    F .text	00000020 _ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_
01007848  w    F .text	00000024 _ZNSs7replaceEmmRKSs
010091e8 g     F .text	00000010 _Unwind_GetIP
0102ac44 g       *ABS*	00000000 __alt_heap_start
0101e380 g     F .text	00000020 OSTaskCreateHook
01003340 g     F .text	00000030 _ZNSt12length_errorC1ERKSs
0100a584 g     F .text	00000074 _kill_r
01006ef4  w    F .text	00000038 _ZNSs5beginEv
010079fc g     F .text	00000010 _ZNSt9bad_allocD2Ev
0100a1c0 g     F .text	00000044 printf
010212fa g     O .rwdata	00000002 OSMboxEn
01014ae8 g     F .text	0000007c OSIntEnter
01008d18 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
0100a4c4 g     F .text	000000a0 _signal_r
0101eea4  w    O .rodata	00000013 _ZTSSt14overflow_error
010106a0 g     F .text	00000068 __sseek
0100e134 g     F .text	000000a4 __sinit
0102130a g     O .rwdata	00000002 OSQEn
01000b2c  w    F .text	0000005c _ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_
010065f4  w    F .text	000000f8 _ZNSs6assignEPKcm
01000904  w    F .text	00000030 _ZNSaISt10_List_nodeIP8os_eventEED2Ev
01008d08 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
0100ee0c g     F .text	00000084 _setlocale_r
0101f310  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0100e234 g     F .text	00000068 __sfmoreglue
01001168 g     F .text	000000a4 _ZN15InfraredHandler17onInfraredReceiveEj
0101409c g     F .text	000000d0 __malloc_unlock
0101e3dc g     F .text	0000001c OSTaskStatHook
01003e2c  w    F .text	00000018 _ZNSs7_M_moveEPcPKcm
01000b88  w    F .text	00000024 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEEC2ERKS5_
01022efc g     O .bss	00000001 OSLockNesting
0100789c  w    F .text	00000064 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc
010088c8 g     F .text	00000020 _ZSt18uncaught_exceptionv
0101ee64  w    O .rodata	0000000c _ZTISt15underflow_error
01000a5c  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEEC2Ev
01021348 g     O .rwdata	00000002 OSDataSize
01022efd g     O .bss	00000001 OSRunning
01006264  w    F .text	000000bc _ZNSsD2Ev
0100611c  w    F .text	0000008c _ZNSspLEc
01005d08  w    F .text	000000e0 _ZNSs6appendEmc
0100a048 g     F .text	000000e0 memmove
0101e414 g     F .text	0000001c OSInitHookBegin
01021340 g     O .rwdata	00000002 OSTmrSize
01007948 g     F .text	00000010 _ZNSt9exceptionD2Ev
0100e224 g     F .text	00000010 _cleanup
0100f5c0 g     F .text	000000bc _Balloc
010056ac  w    F .text	00000020 _ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_
0101ef08  w    O .rodata	00000011 _ZTSSt12out_of_range
0101f394  w    O .rodata	0000000c _ZTISt8bad_cast
01003e44  w    F .text	00000018 _ZNSs7_M_copyEPcPKcm
01022ea4 g     O .bss	00000004 infrared
01022f00 g     O .bss	00000004 OSIdleCtr
0100677c  w    F .text	00000040 _ZNSsaSEPKc
01007900 g     F .text	00000014 _ZN9__gnu_cxx18__exchange_and_addEPVii
010017d8 g     F .text	00000108 _ZSt19__throw_ios_failurePKc
010124f0 g     F .text	00000088 __gtdf2
0101f1d0  w    O .rodata	00000014 _ZTVSt13bad_exception
0101e04c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
01015fb4 g     F .text	000002e0 OS_TCBInit
01002734  w    F .text	00000034 _ZNSt14overflow_errorD0Ev
0101ee34  w    O .rodata	00000010 _ZTV15InfraredHandler
01000000 g     F .entry	0000001c __reset
0102127c  w    O .rwdata	00000001 _ZNSs4_Rep11_S_terminalE
010045f4  w    F .text	000000e0 _ZNKSs16find_last_not_ofEPKcmm
01001394 g     F .text	00000040 _ZN15InfraredHandlerC2Ev
01009228 g     F .text	00000008 _Unwind_GetRegionStart
01021346 g     O .rwdata	00000002 OSTmrWheelTblSize
01000020 g       *ABS*	00000000 __flash_exceptions_start
010212e6 g     O .rwdata	00000002 OSEventSize
01022f04 g     O .bss	00000001 OSPrioHighRdy
01010b60 g     F .text	00000074 _fstat_r
0101e3a0 g     F .text	00000020 OSTaskDelHook
01009034 g     F .text	00000100 _Znwm
01004394  w    F .text	00000064 _ZNSs4_Rep10_M_disposeERKSaIcE
01022ecc g     O .bss	00000004 errno
01004a70  w    F .text	0000003c _ZNSsC2EmcRKSaIcE
0101e02c g       .text	00000000 OSStartHighRdy
01004790  w    F .text	0000007c _ZNKSs7compareEPKc
010057e8  w    F .text	000000fc _ZNSsC1ERKSs
0101aba8 g     F .text	00000200 OSTaskCreateExt
01017414 g     F .text	00000068 OSFlagPendGetFlagsRdy
01021326 g     O .rwdata	00000002 OSTaskStatStkSize
010095f8 g     F .text	00000080 _Unwind_Backtrace
01004f6c  w    F .text	00000088 _ZNKSs4copyEPcmm
01016420 g     F .text	00000334 OSFlagAccept
01018bcc g     F .text	000000c8 OSQFlush
01018564 g     F .text	00000154 OSQAccept
01022ee4 g     O .bss	00000004 alt_argv
01000268 g     F .text	00000028 _ZN14CommandHandler17onInfraredReceiveEv
01029264 g       *ABS*	00000000 _gp
01000ae4  w    F .text	00000048 _ZNKSt10_List_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv
01008bf8 g     F .text	00000034 _ZNSt10bad_typeidD0Ev
01002768  w    F .text	00000010 _ZNSt14overflow_errorD1Ev
01000e7c  w    F .text	00000088 _ZNSt10_List_baseIP8os_eventSaIS1_EE8_M_clearEv
0101a9d4 g     F .text	000001d4 OSTaskCreate
0101a460 g     F .text	00000574 OSTaskChangePrio
01008fe0 g     F .text	00000034 _ZNSt8bad_castD0Ev
01022ef8 g     O .bss	00000004 alt_heapsem
0101348c g     F .text	00000020 getpid
010069b0  w    F .text	00000038 _ZNSs6assignEmc
01003b34  w    F .text	0000000c _ZNKSs4_Rep12_M_is_leakedEv
01016294 g     F .text	0000018c OSDebugInit
01008154 g     F .text	00000180 __cxa_call_unexpected
0101ada8 g     F .text	0000040c OSTaskDel
01000238 g     F .text	00000030 _ZN14CommandHandlerC1Ev
010088c0 g     F .text	00000008 __cxa_get_exception_ptr
0101ee24  w    O .rodata	0000000d _ZTS10DataSource
01003e64  w    F .text	0000000c _ZNKSsixEm
0102004c g     O .rwdata	00000180 alt_fd_list
01027790 g     O .bss	00000370 OSFlagTbl
01000d68  w    F .text	0000006c _ZNSt4listIP8os_eventSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E
0101ef1c  w    O .rodata	00000014 _ZTVSt12out_of_range
010095a8 g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
01015564 g     F .text	000000b8 OS_EventTaskRemove
010091bc g     F .text	00000014 _Unwind_GetCFA
010087b4 g     F .text	00000014 _ZSt13set_terminatePFvvE
0101e488 g     F .text	00000094 alt_find_dev
01009fa8 g     F .text	000000a0 memcpy
01004110  w    F .text	00000010 _ZNSsC2Ev
010004cc g     F .text	00000028 _Z27command_check_infrared_taskPv
01004000  w    F .text	0000000c _ZNKSs17find_first_not_ofERKSsm
01021310 g     O .rwdata	00000002 OSRdyTblSize
01003e70  w    F .text	000000a4 _ZNKSs17find_first_not_ofEPKcmm
010055b8  w    F .text	00000034 _ZNSsC1IPKcEET_S2_RKSaIcE
0100e218 g     F .text	0000000c _cleanup_r
01012688 g     F .text	000000f8 __floatsidf
0101da9c g     F .text	00000078 alt_io_redirect
01012600 g     F .text	00000088 __ltdf2
0101eee8  w    O .rodata	00000014 _ZTVSt11range_error
01002d88 g     F .text	00000038 _ZNSt15_List_node_base8transferEPS_S0_
0100361c g     F .text	00000104 _ZNSt13runtime_errorD2Ev
01002240 g     F .text	00000190 _ZSt21__throw_runtime_errorPKc
01000c30  w    F .text	00000060 _ZNSt10_List_baseIP8os_eventSaIS1_EEC2ERKS2_
0101edbc g       *ABS*	00000000 __DTOR_END__
010040b4  w    F .text	00000050 _ZNKSs5rfindEPKcm
01007acc g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
01003230 g     F .text	000000b0 _ZNSt11logic_errorC2ERKSs
0101ef88  w    O .rodata	00000014 _ZTVSt16invalid_argument
01004120  w    F .text	00000010 _ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_
010009b8  w    F .text	00000030 _ZNSt14_List_iteratorIP8os_eventEC1EPSt15_List_node_base
01007044  w    F .text	00000150 _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_
0101416c g     F .text	00000130 OSEventNameGet
010212f4 g     O .rwdata	00000002 OSFlagMax
01003150 g     F .text	00000030 _ZNSt11range_errorC2ERKSs
0100f39c g     F .text	000000b0 __ratio
01014b64 g     F .text	00000100 OSIntExit
01005b54  w    F .text	00000004 _ZNSsaSERKSs
0101eefc  w    O .rodata	0000000c _ZTISt12out_of_range
01003d9c  w    F .text	00000038 _ZNKSs15_M_check_lengthEmmPKc
0102132e g     O .rwdata	00000002 OSTCBSize
01004974  w    F .text	000000c0 _ZNSs12_S_constructEmcRKSaIcE
01022f05 g     O .bss	00000001 OSPrioCur
0101cccc g     F .text	000002c0 altera_avalon_jtag_uart_read
010096fc g     F .text	00000014 malloc
0100a204 g     F .text	00000034 _printf_r
01012b28 g     F .text	00000008 __udivsi3
010134ac g     F .text	000000c0 isatty
01000cc8  w    F .text	00000028 _ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8max_sizeEv
0100a2a8 g     F .text	000000cc _raise_r
01021314 g     O .rwdata	00000002 OSStkWidth
0101f474 g     O .rodata	000000c8 __mprec_tens
01006558  w    F .text	0000009c _ZNSs15_M_replace_safeEmmPKcm
01021308 g     O .rwdata	00000002 OSPtrSize
01001c00 g     F .text	00000190 _ZSt22__throw_overflow_errorPKc
01000558 g     F .text	00000064 _ZN10DataSourceC2Ev
01003310 g     F .text	00000030 _ZNSt12out_of_rangeC2ERKSs
0100ede8 g     F .text	00000008 __locale_charset
010212e8 g     O .rwdata	00000002 OSEventTblSize
01005b58  w    F .text	00000128 _ZNSs7reserveEm
01004ba4  w    F .text	000000c8 _ZNKSs7compareEmmPKc
0101dfa0 g       .text	00000000 OSCtxSw
0101e730 g     F .text	00000090 alt_icache_flush
01003aec  w    F .text	0000000c _ZNKSs4sizeEv
01022ec0 g     O .bss	00000004 __malloc_top_pad
01006320  w    F .text	00000238 _ZNSs9_M_mutateEmmm
01007428  w    F .text	000002e0 _ZNSs7replaceEmmPKcm
010041a4  w    F .text	00000058 _ZNKSs16find_last_not_ofEcm
01022f08 g     O .bss	00000004 OSTCBList
0100a580 g     F .text	00000004 _getpid_r
01022edc g     O .bss	00000004 alt_fd_list_lock
01007778  w    F .text	00000010 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcm
0101edf0  w    O .rodata	00000010 _ZTV14CommandHandler
010212ac g     O .rwdata	00000004 __mb_cur_max
01005ef4  w    F .text	00000040 _ZNSs6appendEPKc
0101ee14  w    O .rodata	00000010 _ZTV10DataSource
0100edf0 g     F .text	0000000c _localeconv_r
010041fc  w    F .text	00000064 _ZNKSs17find_first_not_ofEcm
0100fcb8 g     F .text	0000003c __i2b
0100e7cc g     F .text	0000049c __sfvwrite_r
01007aec g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0100a3fc g     F .text	000000b4 __sigtramp_r
01003a6c  w    F .text	00000008 _ZNKSs9_M_ibeginEv
01002fb0 g     F .text	000000b0 _ZNSt13runtime_errorC2ERKSs
01027b00 g     O .bss	00000c30 OSMemTbl
01022f0c g     O .bss	00000001 OSTickStepState
01000810  w    F .text	00000038 _ZNKSt14_List_iteratorIP8os_eventEneERKS2_
0100a238 g     F .text	00000070 _sbrk_r
0100047c g     F .text	00000050 _ZN14CommandHandlerD2Ev
0101f344  w    O .rodata	00000020 _ZTVSt9type_info
0101ef70  w    O .rodata	00000015 _ZTSSt16invalid_argument
01001770 g     F .text	00000034 _ZSt17__throw_bad_allocv
0102130c g     O .rwdata	00000002 OSQMax
01028730 g     O .bss	00000800 OSTaskStatStk
0101807c g     F .text	0000010c OSMemNameGet
01000a7c  w    F .text	00000034 _ZNSaISt10_List_nodeIP8os_eventEEC1IS1_EERKSaIT_E
01003a3c  w    F .text	00000010 _ZNSt11char_traitsIcE2eqERKcS2_
010212ec g     O .rwdata	00000002 OSFlagEn
01010cbc g     F .text	00000078 _read_r
01007918 g     F .text	00000010 _ZNKSt9exception4whatEv
0100457c  w    F .text	00000068 _ZNKSs4findEcm
01021332 g     O .rwdata	00000002 OSTimeTickHookEn
01022ea0 g     O .bss	00000004 command
010008ac  w    F .text	00000038 _ZNSt10_List_baseIP8os_eventSaIS1_EE7_M_initEv
01017cb0 g     F .text	000000ac OS_FlagUnlink
01019130 g     F .text	00000180 OSQPost
01020018 g     O .rwdata	0000000c __lc_ctype
010212c4 g     O .rwdata	00000004 alt_max_fd
0100480c  w    F .text	00000050 _ZNKSs16find_last_not_ofEPKcm
01015b40 g     F .text	0000006c OS_MemCopy
01015bac g     F .text	000000d4 OS_Sched
01012f64 g     F .text	00000138 __unpack_d
01004740  w    F .text	00000050 _ZNKSs4findEPKcm
01010a3c g     F .text	00000110 _fclose_r
010048ac  w    F .text	00000050 _ZNKSs12find_last_ofEPKcm
01017f78 g     F .text	00000104 OSMemGet
0100400c  w    F .text	000000a8 _ZNKSs5rfindEPKcmm
0101b4dc g     F .text	000001c4 OSTaskNameSet
0101f24c  w    O .rodata	0000000c _ZTISt9bad_alloc
01003a60  w    F .text	0000000c _ZNKSs6_M_repEv
0100e098 g     F .text	00000034 fflush
01022ec4 g     O .bss	00000004 __malloc_max_sbrked_mem
01022f10 g     O .bss	00000004 OSCtxSwCtr
0101e3f8 g     F .text	0000001c OSTimeTickHook
01006ab8  w    F .text	00000050 _ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE
010212f6 g     O .rwdata	00000002 OSFlagNameSize
0100042c g     F .text	00000050 _ZN14CommandHandlerD1Ev
01006e74  w    F .text	00000044 _ZNSsixEm
010059e0  w    F .text	00000174 _ZNSs6assignERKSs
0101561c g     F .text	00000104 OS_EventTaskRemoveMulti
01001140 g     F .text	00000028 _ZN15InfraredHandler4readEi
01011d50 g     F .text	00000074 __adddf3
0101f2e4  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
01015410 g     F .text	00000154 OS_EventTaskWaitMulti
0100100c  w    F .text	00000064 _ZNSt4listIP8os_eventSaIS1_EE14_M_create_nodeERKS1_
010061a8  w    F .text	000000bc _ZNSsD1Ev
0100f27c g     F .text	00000120 __b2d
01000cf0  w    F .text	00000038 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE10deallocateEPS4_m
0102130e g     O .rwdata	00000002 OSQSize
01009014 g     F .text	00000010 _ZNSt8bad_castD1Ev
01011310 g     F .text	000005b0 __umoddi3
01013858 g     F .text	000000f0 lseek
01006eb8  w    F .text	0000003c _ZNSs3endEv
01019d0c g     F .text	0000027c OSSemPend
01007b4c g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0101f01c  w    O .rodata	00000014 _ZTVSt11logic_error
01008aa4 g     F .text	0000000c _ZdlPv
01002800  w    F .text	00000034 _ZNSt12length_errorD0Ev
010212a8 g     O .rwdata	00000004 _global_impure_ptr
01010034 g     F .text	000005f4 _realloc_r
010212f8 g     O .rwdata	00000002 OSLowestPrio
0102ac44 g       *ABS*	00000000 __bss_end
0101d8e0 g     F .text	000000f8 alt_iic_isr_register
0101e468 g     F .text	00000020 OSTCBInitHook
0102133e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0101de70 g     F .text	00000110 alt_tick
01009188 g     F .text	00000010 _Unwind_SjLj_Register
01010d34 g     F .text	000005dc __udivdi3
0101eeb8  w    O .rodata	00000014 _ZTVSt14overflow_error
01002560 g     F .text	00000190 _ZSt20__throw_length_errorPKc
010212e0 g     O .rwdata	00000002 OSEventEn
0101f53c g     O .rodata	00000028 __mprec_bigtens
0100ff14 g     F .text	00000120 __s2b
0102133a g     O .rwdata	00000002 OSTmrCfgNameSize
010096d0 g     F .text	00000018 abort
01012858 g     F .text	00000194 __floatunsidf
01003ce0  w    F .text	000000bc _ZNSs4_Rep10_M_refcopyEv
0100f19c g     F .text	00000060 __mcmp
010088e8 g     F .text	000000a4 __cxa_end_catch
0100e200 g     F .text	00000018 __fp_lock_all
0101d898 g     F .text	00000048 alt_ic_irq_enabled
0100799c g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
01017abc g     F .text	000000e4 OS_FlagInit
0101ddd8 g     F .text	00000098 alt_alarm_stop
01003b40  w    F .text	0000000c _ZNKSs4_Rep12_M_is_sharedEv
0102131c g     O .rwdata	00000002 OSTaskIdleStkSize
01003a4c  w    F .text	00000008 _ZNKSs7_M_dataEv
0100518c  w    F .text	00000060 _ZNSsC2ERKSsmmRKSaIcE
01022f4c g     O .bss	00000004 alt_irq_active
01019898 g     F .text	000000c0 OSSemAccept
01002e84 g     F .text	00000020 _ZNSt15_List_node_base7reverseEv
01008880 g     F .text	00000018 _ZSt9terminatev
010182a8 g     F .text	000000f0 OSMemPut
0100703c  w    F .text	00000008 _ZNSs6resizeEm
01017d5c g     F .text	0000021c OSMemCreate
01002724  w    F .text	00000010 _ZNSt15underflow_errorD1Ev
01022f14 g     O .bss	00000004 OSIdleCtrMax
01001d90 g     F .text	00000190 _ZSt24__throw_invalid_argumentPKc
010000ec g     F .exceptions	000000d0 alt_irq_handler
010066ec  w    F .text	00000040 _ZNSs6assignEPKc
01020024 g     O .rwdata	00000028 alt_dev_null
0100124c g     F .text	00000058 _ZN15InfraredHandlerD0Ev
01000be4  w    F .text	0000004c _ZNSt10_List_baseIP8os_eventSaIS1_EE10_List_implC1ERKSaISt10_List_nodeIS1_EE
01004e68  w    F .text	00000104 _ZNSs4_Rep7_M_grabERKSaIcES2_
01006d38  w    F .text	00000050 _ZNSs6insertEmRKSsmm
01021330 g     O .rwdata	00000002 OSTicksPerSec
010028cc g     F .text	00000008 _ZNKSt8ios_base7failure4whatEv
01003930 g     F .text	0000010c _ZNSt11logic_errorD0Ev
010048fc  w    F .text	00000050 _ZNKSs13find_first_ofEPKcm
0101dfa0 g       .text	00000000 OSIntCtxSw
0101f284  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
010003ac g     F .text	00000030 _ZN14CommandHandler4initEv
01005f74  w    F .text	000000e8 _ZNSs6appendERKSsmm
0101d4bc g     F .text	00000044 alt_dcache_flush_all
0100f068 g     F .text	00000070 __hi0bits
01021280  w    O .rwdata	00000008 _ZTISt9exception
01012780 g     F .text	000000d8 __fixdfsi
0100494c  w    F .text	00000010 _ZNKSs4rendEv
01003ff4  w    F .text	0000000c _ZNKSs4findERKSsm
01002c7c g     F .text	0000010c _ZNSt8ios_base7failureD0Ev
01003b7c  w    F .text	0000014c _ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_
01006d88  w    F .text	0000000c _ZNSs6insertEmRKSs
01022f18 g     O .bss	00000004 OSTCBFreeList
01021358 g       *ABS*	00000000 __ram_rwdata_end
01019f88 g     F .text	0000017c OSSemPendAbort
01002ddc g     F .text	00000014 _ZNSt15_List_node_base6unhookEv
01008e4c g     F .text	00000010 _ZNSt9type_infoD1Ev
010212bc g     O .rwdata	00000008 alt_dev_list
01022eac g     O .bss	00000004 __new_handler
0101efa8  w    O .rodata	00000011 _ZTSSt12domain_error
01013d0c g     F .text	00000120 write
01006a30  w    F .text	00000038 _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEmc
01005550  w    F .text	00000034 _ZNSsC1EPKcmRKSaIcE
01002dc0 g     F .text	0000001c _ZNSt15_List_node_base4hookEPS_
01021334 g     O .rwdata	00000002 OSVersionNbr
01006f2c  w    F .text	0000004c _ZNSs4rendEv
01008e3c g     F .text	00000010 _ZNSt9type_infoD0Ev
01000880  w    F .text	0000002c _ZNKSt14_List_iteratorIP8os_eventEdeEv
01003518 g     F .text	00000104 _ZNSt13runtime_errorD1Ev
0101f810 g       *ABS*	00000000 __ram_rodata_end
01013358 g     F .text	000000d4 fstat
01003cd8  w    F .text	00000008 _ZNSs12_Alloc_hiderC2EPcRKSaIcE
010135cc g     F .text	00000140 kill
0100512c  w    F .text	00000060 _ZNSsC1ERKSsmmRKSaIcE
01003430 g     F .text	00000030 _ZNSt12domain_errorC2ERKSs
01003400 g     F .text	00000030 _ZNSt12domain_errorC1ERKSs
010028bc  w    F .text	00000010 _ZNSt12domain_errorD1Ev
010050f8  w    F .text	00000034 _ZNSsC2IPcEET_S1_RKSaIcE
010212dc g     O .rwdata	00000004 OSEndiannessTest
0100fdf4 g     F .text	00000120 __pow5mult
010072dc  w    F .text	0000014c _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_
01022ed0 g     O .bss	00000004 __nlocale_changed
010026f0  w    F .text	00000034 _ZNSt15underflow_errorD0Ev
01012b30 g     F .text	00000008 __umodsi3
01008e34 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
01001354 g     F .text	00000040 _ZN15InfraredHandlerC1Ev
01007788  w    F .text	00000064 _ZNSs7replaceEmmPKc
010212ee g     O .rwdata	00000002 OSFlagGrpSize
01000964  w    F .text	00000030 _ZNSaISt10_List_nodeIP8os_eventEED1Ev
010009e8  w    F .text	0000003c _ZNSt4listIP8os_eventSaIS1_EE5beginEv
0102ac44 g       *ABS*	00000000 end
01007914 g     F .text	00000004 _ZN9__gnu_cxx12__atomic_addEPVii
010002d0 g     F .text	00000070 _ZN14CommandHandler20checkInfraredReceiveEv
01003090 g     F .text	00000030 _ZNSt15underflow_errorC2ERKSs
010077ec  w    F .text	0000005c _ZNSs7replaceEmmRKSsmm
0100070c g     F .text	0000003c _ZN10DataSource11addListenerEP8os_event
01003fa8  w    F .text	00000030 _ZNKSs2atEm
0100672c  w    F .text	00000050 _ZNSs6assignERKSsmm
01000790  w    F .text	00000030 _ZNSaIP8os_eventEC1Ev
01005404  w    F .text	00000034 _ZNSsC1IPcEET_S1_RKSaIcE
01003a74  w    F .text	00000010 _ZNKSs7_M_iendEv
01009348 g     F .text	00000018 _Unwind_DeleteException
0101c654 g     F .text	00000138 altera_avalon_jtag_uart_init
01015e24 g     F .text	000000c8 OS_TaskStat
01003ad4  w    F .text	00000008 _ZNKSs5beginEv
0101edb4 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
01006888  w    F .text	00000018 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_mc
010012a4 g     F .text	00000058 _ZN15InfraredHandlerD1Ev
01026f58  w    O .bss	00000010 _ZNSs4_Rep20_S_empty_rep_storageE
0101d2d8 g     F .text	00000090 alt_avalon_timer_sc_init
01002ea4 g     F .text	00000008 _ZNKSt13runtime_error4whatEv
01012bd0 g     F .text	00000080 __clzsi2
0101f044  w    O .rodata	0000000c _ZTISt13runtime_error
01007a0c g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0101cf8c g     F .text	000002dc altera_avalon_jtag_uart_write
0100e124 g     F .text	00000004 __sfp_lock_acquire
0101f1f8  w    O .rodata	00000012 _ZTSSt13bad_exception
01009e50 g     F .text	000000e4 memchr
01015aec g     F .text	00000054 OS_MemClr
0100a6c4 g     F .text	00001eac ___vfprintf_internal_r
0101ef50  w    O .rodata	00000014 _ZTVSt12length_error
0101e070 g     F .text	00000310 OSTaskStkInit
01000dd4  w    F .text	000000a8 _ZNSt4listIP8os_eventSaIS1_EE6removeERKS1_
0100e4b8 g     F .text	00000314 _free_r
01007724  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_
01004aac  w    F .text	00000034 _ZNSsC1ERKSaIcE
0101516c g     F .text	00000194 OS_EventTaskRdy
010010bc  w    F .text	00000044 _ZNSt4listIP8os_eventSaIS1_EE9push_backERKS1_
0101e944 g     F .text	000001b0 __call_exitprocs
01003b58  w    F .text	00000008 _ZNSs4_Rep15_M_set_sharableEv
01000290 g     F .text	00000040 _ZN14CommandHandler22processInfraredReceiveEj
01022f1c g     O .bss	00000001 OSCPUUsage
010006b0 g     F .text	0000005c _ZN10DataSourceD2Ev
01021278  w    O .rwdata	00000004 _ZNSs4_Rep11_S_max_sizeE
01022ed4 g     O .bss	00000004 __mlocale_changed
01002834  w    F .text	00000010 _ZNSt12length_errorD1Ev
010212a0 g     O .rwdata	00000004 __malloc_sbrk_base
010001bc g     F .text	0000004c _start
0101f060  w    O .rodata	0000000c _ZTISt11logic_error
01003b10  w    F .text	00000008 _ZNKSs4dataEv
01022f50 g     O .bss	00000004 _alt_tick_rate
01018c94 g     F .text	00000320 OSQPend
0101f364  w    O .rodata	0000000d _ZTSSt9type_info
01003b04  w    F .text	0000000c _ZNKSs8capacityEv
01003a54  w    F .text	0000000c _ZNSs7_M_dataEPc
0101bea0 g     F .text	0000014c OSTimeDly
01003060 g     F .text	00000030 _ZNSt15underflow_errorC1ERKSs
0100f984 g     F .text	0000014c __lshift
01003a84  w    F .text	00000018 _ZNKSs8_M_limitEmm
01021264  w    O .rwdata	00000008 _ZTI14CommandHandler
0101f228  w    O .rodata	00000014 _ZTVSt9bad_alloc
01022f54 g     O .bss	00000004 _alt_nticks
0100a564 g     F .text	0000001c signal
01013a70 g     F .text	00000120 read
010067bc  w    F .text	000000cc _ZNSs14_M_replace_auxEmmmc
0101c46c g     F .text	00000068 alt_sys_init
010058e4  w    F .text	000000fc _ZNSsC2ERKSs
01003b18  w    F .text	00000008 _ZNKSs13get_allocatorEv
0101f2d8  w    O .rodata	0000000c _ZTISt10bad_typeid
010005f8 g     F .text	0000005c _ZN10DataSourceD0Ev
0101e80c g     F .text	00000134 __register_exitproc
0101f23c  w    O .rodata	0000000d _ZTSSt9bad_alloc
01022f1d g     O .bss	00000001 OSTaskCtr
01003f14  w    F .text	00000094 _ZNKSs4findEPKcmm
01006a68  w    F .text	00000050 _ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_
0101bfec g     F .text	00000174 OSTimeDlyHMSM
0100fad0 g     F .text	000001e8 __multiply
0101cb64 g     F .text	00000074 altera_avalon_jtag_uart_close
0101f810 g       *ABS*	00000000 __ram_rwdata_start
010094b0 g     F .text	000000f8 _Unwind_SjLj_RaiseException
0101edbc g       *ABS*	00000000 __ram_rodata_start
010046e0  w    F .text	00000060 _ZNKSs7compareERKSs
01027768 g     O .bss	00000028 __malloc_current_mallinfo
01009454 g     F .text	0000005c _Unwind_SjLj_Resume
010212e2 g     O .rwdata	00000002 OSEventMax
01006e04  w    F .text	00000014 _ZNSs7_M_leakEv
0100f67c g     F .text	0000017c __d2b
0101a104 g     F .text	00000128 OSSemPost
01008e5c g     F .text	00000010 _ZNSt9type_infoD2Ev
01014cf0 g     F .text	000000e4 OSSchedUnlock
01008c4c g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
01002878  w    F .text	00000010 _ZNSt16invalid_argumentD1Ev
01003adc  w    F .text	00000010 _ZNKSs3endEv
01003e00  w    F .text	0000002c _ZNSs9_M_assignEPcmc
01000f04  w    F .text	00000038 _ZNSt10_List_baseIP8os_eventSaIS1_EED2Ev
0101c50c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0101e63c g     F .text	000000f4 alt_get_fd
01022f20 g     O .bss	00000004 OSMemFreeList
01014e44 g     F .text	000000ac OSStatInit
01004130  w    F .text	00000064 _ZNKSs5rfindEcm
01017824 g     F .text	000000d4 OSFlagQuery
0101309c g     F .text	000000c8 __fpcmp_parts_d
0101ee70  w    O .rodata	00000014 _ZTSSt15underflow_error
01021318 g     O .rwdata	00000002 OSTaskCreateExtEn
01000340 g     F .text	0000006c _ZN14CommandHandler21createInfraredReceiveEv
010045e4  w    F .text	00000010 _ZNKSs13find_first_ofEcm
010109cc g     F .text	00000070 _close_r
01009f34 g     F .text	00000074 memcmp
01015150 g     F .text	0000001c OS_Dummy
0101c5bc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0102ac44 g       *ABS*	00000000 __alt_stack_base
0101c604 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01000d28  w    F .text	00000040 _ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E
010079b8 g     F .text	00000034 _ZNSt9bad_allocD0Ev
01008cf8 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
010027ac  w    F .text	00000010 _ZNSt11range_errorD1Ev
0100c594 g     F .text	0000013c __swsetup_r
0101eed8  w    O .rodata	00000010 _ZTSSt11range_error
01028f30 g     O .bss	000001e0 OSQTbl
01009678 g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
01012188 g     F .text	00000258 __divdf3
0100e29c g     F .text	000000f0 __sfp
0100f4e0 g     F .text	00000058 __copybits
0101ef9c  w    O .rodata	0000000c _ZTISt12domain_error
0101f388  w    O .rodata	0000000c _ZTSSt8bad_cast
01008e14 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
01007708  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_
0101ee98  w    O .rodata	0000000c _ZTISt14overflow_error
0101f810 g     O .rwdata	00000408 __malloc_av_
0100e130 g     F .text	00000004 __sinit_lock_release
01022f24 g     O .bss	00000004 OSTCBHighRdy
01011dc4 g     F .text	000003c4 __muldf3
01010784 g     F .text	00000060 __sread
0101f1e4  w    O .rodata	00000014 _ZTVSt9exception
01022f28 g     O .bss	00000004 OSQFreeList
0101e51c g     F .text	00000120 alt_find_file
0100786c  w    F .text	00000030 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs
01007a78 g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
01006d94  w    F .text	00000014 _ZNSs5clearEv
0101d500 g     F .text	000000b4 alt_dev_llist_insert
01013f94 g     F .text	00000108 __malloc_lock
01013c50 g     F .text	000000bc sbrk
01001f20 g     F .text	00000190 _ZSt20__throw_domain_errorPKc
010018e0 g     F .text	00000190 _ZSt19__throw_logic_errorPKc
0101f258  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
01008b24 g     F .text	00000074 __cxa_throw
0101429c g     F .text	00000144 OSEventNameSet
0100de9c g     F .text	000001fc _fflush_r
0100920c g     F .text	00000010 _Unwind_SetIP
010044e8  w    F .text	00000088 _ZNKSs13find_first_ofEPKcmm
01010918 g     F .text	000000b4 _calloc_r
01022f2c g     O .bss	00000001 OSRdyGrp
01004194  w    F .text	00000010 _ZNKSs12find_last_ofEcm
0101ef30  w    O .rodata	0000000c _ZTISt12length_error
01003b4c  w    F .text	0000000c _ZNSs4_Rep13_M_set_leakedEv
01005584  w    F .text	00000034 _ZNSsC2EPKcmRKSaIcE
010020b0 g     F .text	00000190 _ZSt19__throw_range_errorPKc
010033a0 g     F .text	00000030 _ZNSt16invalid_argumentC1ERKSs
01022ea0 g       *ABS*	00000000 __bss_start
01004570  w    F .text	0000000c _ZNKSs13find_first_ofERKSsm
01004d2c  w    F .text	000000a0 _ZNKSs7compareEmmRKSs
0100a128 g     F .text	00000098 memset
01003b60  w    F .text	00000014 _ZNSs4_Rep26_M_set_length_and_sharableEm
01003ab8  w    F .text	0000000c _ZNSs12_S_empty_repEv
010015f8 g     F .text	00000110 main
0101f030  w    O .rodata	00000012 _ZTSSt13runtime_error
01022ee8 g     O .bss	00000004 alt_envp
01022ec8 g     O .bss	00000004 __malloc_max_total_mem
0101f2b4  w    O .rodata	00000014 _ZTVSt10bad_typeid
0101c564 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
010017a4 g     F .text	00000034 _ZSt21__throw_bad_exceptionv
01009178 g     F .text	00000008 __cxa_get_globals_fast
0101f6cc g     O .rodata	00000100 OSUnMapTbl
01021312 g     O .rwdata	00000002 OSSemEn
0101efe4  w    O .rodata	00000016 _ZTSNSt8ios_base7failureE
010005bc g     F .text	0000003c _ZN10DataSource14removeListenerEP8os_event
0101747c g     F .text	000003a8 OSFlagPost
0101f374  w    O .rodata	00000014 _ZTVSt8bad_cast
01010698 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01000748  w    F .text	00000028 _ZnwmPv
010007c0  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorIP8os_eventED2Ev
01010b4c g     F .text	00000014 fclose
01015300 g     F .text	00000110 OS_EventTaskWait
01015eec g     F .text	000000c8 OS_TaskStatStkChk
0102aab4 g     O .bss	00000190 _atexit0
0101b1b4 g     F .text	00000170 OSTaskDelReq
010027f0  w    F .text	00000010 _ZNSt12out_of_rangeD1Ev
0102126c  w    O .rwdata	00000008 _ZTI10DataSource
01000770  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev
0100c8e8 g     F .text	000015b4 _dtoa_r
01009710 g     F .text	00000740 _malloc_r
0100551c  w    F .text	00000034 _ZNSsC2IPKcEET_S2_RKSaIcE
01004ae0  w    F .text	00000034 _ZNSsC2ERKSaIcE
010212c8 g     O .rwdata	00000004 alt_errno
01000a24  w    F .text	00000038 _ZNSt4listIP8os_eventSaIS1_EE3endEv
0100775c  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_
01014dd4 g     F .text	00000070 OSStart
010030f0 g     F .text	00000030 _ZNSt14overflow_errorC2ERKSs
01002778  w    F .text	00000034 _ZNSt11range_errorD0Ev
0100a3ec g     F .text	00000010 _init_signal
01013f38 g     F .text	0000005c __env_unlock
0101f2a8  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
01000994  w    F .text	00000024 _ZN9__gnu_cxx13new_allocatorIP8os_eventE7destroyEPS2_
0100ed30 g     F .text	000000b8 _fwalk
0101b6a0 g     F .text	00000218 OSTaskResume
01018398 g     F .text	000000fc OSMemQuery
01001100 g     F .text	00000040 _ZN15InfraredHandler4initEv
01021324 g     O .rwdata	00000002 OSTaskStatEn
010212fe g     O .rwdata	00000002 OSMemMax
010043f8  w    F .text	000000e4 _ZNKSs12find_last_ofEPKcmm
010192b0 g     F .text	00000188 OSQPostFront
0100798c g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
01012a68 g     F .text	00000060 __divsi3
01022f2d g     O .bss	00000003 OSRdyTbl
010212d8 g     O .rwdata	00000002 OSDebugEn
0101f598 g     O .rodata	00000014 __thenan_df
0100e38c g     F .text	0000012c _malloc_trim_r
0101edbc g       *ABS*	00000000 __CTOR_END__
010212f0 g     O .rwdata	00000002 OSFlagNodeSize
0100605c  w    F .text	000000bc _ZNSs6appendERKSs
01021338 g     O .rwdata	00000002 OSTmrCfgMax
01005c80  w    F .text	00000088 _ZNSs9push_backEc
01000fd0  w    F .text	0000003c _ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_get_nodeEv
010107e4 g     F .text	000000bc strcmp
01004ff4  w    F .text	00000020 _ZNSs13_S_copy_charsEPcPKcS1_
010186b8 g     F .text	00000214 OSQCreate
0101b324 g     F .text	000001b8 OSTaskNameGet
0101edbc g       *ABS*	00000000 __flash_rodata_start
01019438 g     F .text	00000234 OSQPostOpt
01014ef0 g     F .text	00000240 OSTimeTick
01021320 g     O .rwdata	00000002 OSTaskMax
01002b78 g     F .text	00000104 _ZNSt8ios_base7failureD2Ev
0101edbc g       *ABS*	00000000 __DTOR_LIST__
01019958 g     F .text	00000114 OSSemCreate
010029d8 g     F .text	000000d0 _ZNSt8ios_base7failureC1ERKSs
01021344 g     O .rwdata	00000002 OSTmrWheelSize
010055ec  w    F .text	00000060 _ZNSsC1EPKcRKSaIcE
01012468 g     F .text	00000088 __nedf2
01009024 g     F .text	00000010 _ZNSt8bad_castD2Ev
0101ee00  w    O .rodata	00000011 _ZTS14CommandHandler
0102131a g     O .rwdata	00000002 OSTaskDelEn
010032e0 g     F .text	00000030 _ZNSt12out_of_rangeC1ERKSs
01000208 g     F .text	00000030 _ZN14CommandHandlerC2Ev
0101a22c g     F .text	00000130 OSSemQuery
010188cc g     F .text	00000300 OSQDel
01018fb4 g     F .text	0000017c OSQPendAbort
0101c438 g     F .text	00000034 alt_irq_init
01005034  w    F .text	000000c4 _ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag
01013bf0 g     F .text	00000060 alt_release_fd
01008cc4 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
01006ce8  w    F .text	00000050 _ZNSs6insertEmPKc
0101f5ac g     O .rodata	00000100 __clz_tab
0100382c g     F .text	00000104 _ZNSt11logic_errorD2Ev
01006da8  w    F .text	0000005c _ZNSs12_M_leak_hardEv
0100120c g     F .text	00000040 _ZN15InfraredHandler6updateEv
01022ed8 g     O .bss	00000004 _PathLocale
0101f050  w    O .rodata	00000010 _ZTSSt11logic_error
01022f58 g     O .bss	00002000 command_check_infrared_task_stk
01002eac g     F .text	00000104 _ZNSt11logic_errorD1Ev
0101e7c0 g     F .text	00000014 atexit
0101eecc  w    O .rodata	0000000c _ZTISt11range_error
01003120 g     F .text	00000030 _ZNSt11range_errorC1ERKSs
010108a0 g     F .text	00000078 _write_r
010007e0  w    F .text	00000030 _ZNSaIP8os_eventED1Ev
0101ee58  w    O .rodata	0000000c _ZTI15InfraredHandler
01014c64 g     F .text	0000008c OSSchedLock
0100ee90 g     F .text	0000001c setlocale
010027bc  w    F .text	00000034 _ZNSt12out_of_rangeD0Ev
01009240 g     F .text	00000008 _Unwind_GetTextRelBase
01009134 g     F .text	00000044 __cxa_call_terminate
01016754 g     F .text	0000013c OSFlagCreate
01000654 g     F .text	0000005c _ZN10DataSourceD1Ev
010212a4 g     O .rwdata	00000004 _impure_ptr
01022ee0 g     O .bss	00000004 alt_argc
0101d678 g     F .text	00000064 _do_dtors
010212ea g     O .rwdata	00000002 OSEventMultiEn
01007194  w    F .text	00000114 _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_
01016890 g     F .text	000002a8 OSFlagDel
01022f30 g     O .bss	00000004 OSEventFreeList
01000020 g       .exceptions	00000000 alt_irq_entry
01003dd4  w    F .text	0000002c _ZNKSs8_M_checkEmPKc
0100485c  w    F .text	00000050 _ZNKSs17find_first_not_ofEPKcm
01003fd8  w    F .text	00000010 _ZNKSs5emptyEv
0100f1fc g     F .text	00000080 __ulp
01010628 g     F .text	00000040 __isinfd
01009230 g     F .text	00000008 _Unwind_FindEnclosingFunction
01016dd0 g     F .text	00000644 OSFlagPend
01021336 g     O .rwdata	00000002 OSTmrEn
01003cc8  w    F .text	00000010 _ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_
0100e1e8 g     F .text	00000018 __fp_unlock_all
01006b08  w    F .text	0000006c _ZNSs5eraseEmm
010212b4 g     O .rwdata	00000008 alt_fs_list
01004104  w    F .text	0000000c _ZNKSs5rfindERKSsm
01000c90  w    F .text	00000038 _ZNSt4listIP8os_eventSaIS1_EEC1ERKS2_
01005318  w    F .text	000000ec _ZNSsC2ERKSsmm
010046d4  w    F .text	0000000c _ZNKSs16find_last_not_ofERKSsm
01015cf0 g     F .text	00000080 OS_StrCopy
0100921c g     F .text	0000000c _Unwind_GetLanguageSpecificData
01002844  w    F .text	00000034 _ZNSt16invalid_argumentD0Ev
0100898c g     F .text	00000118 __cxa_begin_catch
01021300 g     O .rwdata	00000002 OSMemNameSize
01007adc g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
01008898 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
0101e430 g     F .text	0000001c OSInitHookEnd
0101ef3c  w    O .rodata	00000011 _ZTSSt12length_error
01000020 g       *ABS*	00000000 __ram_exceptions_start
0102132c g     O .rwdata	00000002 OSTCBPrioTblMax
0100edfc g     F .text	00000010 localeconv
0100173c g     F .text	00000034 _ZSt16__throw_bad_castv
01021328 g     O .rwdata	00000002 OSTaskStatStkChkEn
01007958 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
01000ab0  w    F .text	00000034 _ZNSaIP8os_eventEC1ISt10_List_nodeIS0_EEERKSaIT_E
0102128c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
0101ee84  w    O .rodata	00000014 _ZTVSt15underflow_error
0101d70c g     F .text	00000050 alt_ic_isr_register
010212fc g     O .rwdata	00000002 OSMemEn
01008eac g     F .text	00000134 __cxa_allocate_exception
01021306 g     O .rwdata	00000002 OSMutexEn
0101f338  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
010079ac g     F .text	0000000c _ZSt15set_new_handlerPFvvE
010069e8  w    F .text	00000048 _ZNSsaSEc
01021358 g       *ABS*	00000000 _edata
0102ac44 g       *ABS*	00000000 _end
01021288 g     O .rwdata	00000001 _ZSt7nothrow
01003720 g     F .text	0000010c _ZNSt13runtime_errorD0Ev
01022f34 g     O .bss	00000001 OSIntNesting
010082d4 g     F .text	000004e0 __gxx_personality_sj0
01004dcc  w    F .text	0000009c _ZNSs4_Rep8_M_cloneERKSaIcEm
010001bc g       *ABS*	00000000 __ram_exceptions_end
0101cbd8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0101c160 g     F .text	00000210 OSTimeDlyResume
010008e4  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEED2Ev
01016c7c g     F .text	00000154 OSFlagNameSet
01007b7c g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
01007938 g     F .text	00000010 _ZNSt9exceptionD1Ev
0101b8b8 g     F .text	000001fc OSTaskStkChk
0101d7f8 g     F .text	000000a0 alt_ic_irq_disable
01022ea8 g     O .bss	00000004 _ZN14__gnu_internal12atomic_mutexE
01021302 g     O .rwdata	00000002 OSMemSize
0101effc  w    O .rodata	0000000c _ZTINSt8ios_base7failureE
01010708 g     F .text	0000007c __swrite
0102129c g     O .rwdata	00000004 __malloc_trim_threshold
0101df80 g     F .text	00000020 altera_nios2_qsys_irq_init
01004260  w    F .text	00000130 _ZNSs4_Rep9_S_createEmmRKSaIcE
01022f38 g     O .bss	00000004 OSTCBCur
0101e7d4 g     F .text	00000038 exit
010091d0 g     F .text	00000018 _Unwind_SetGR
01006118  w    F .text	00000004 _ZNSspLERKSs
01021304 g     O .rwdata	00000002 OSMemTblSize
0100ec68 g     F .text	000000c8 _fwalk_reent
0101efbc  w    O .rodata	00000014 _ZTVSt12domain_error
0100f7f8 g     F .text	0000018c __mdiff
010087dc g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
010068a0  w    F .text	00000068 _ZNSs7replaceEmmmc
01012ac8 g     F .text	00000060 __modsi3
010004f4 g     F .text	00000064 _ZN10DataSourceC1Ev
010079ec g     F .text	00000010 _ZNSt9bad_allocD1Ev
02000000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
0100e128 g     F .text	00000004 __sfp_lock_release
01008d4c g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
01014a94 g     F .text	00000054 OSInit
0101f20c  w    O .rodata	0000000c _ZTISt13bad_exception
01000000 g       *ABS*	00000000 __alt_mem_sdram
0101bce0 g     F .text	00000144 OSTaskQuery
010197ec g     F .text	000000ac OS_QInit
01015d70 g     F .text	00000058 OS_StrLen
01000bac  w    F .text	00000038 _ZNSaISt10_List_nodeIP8os_eventEEC2ERKS3_
01018188 g     F .text	00000120 OSMemNameSet
01000f3c  w    F .text	00000030 _ZNSt4listIP8os_eventSaIS1_EED1Ev
01000934  w    F .text	00000030 _ZNSt10_List_baseIP8os_eventSaIS1_EE10_List_implD1Ev
01002888  w    F .text	00000034 _ZNSt12domain_errorD0Ev
0102131e g     O .rwdata	00000002 OSTaskProfileEn
010012fc g     F .text	00000058 _ZN15InfraredHandlerD2Ev
01022f3c g     O .bss	00000004 OSTime
01003e5c  w    F .text	00000008 _ZNKSs5c_strEv
01029110 g     O .bss	00000800 OSTaskIdleStk
01010668 g     F .text	00000030 __isnand
0101332c g     F .text	0000002c _exit
01002aa8 g     F .text	000000d0 _ZNSt8ios_base7failureC2ERKSs
0101d368 g     F .text	00000154 alt_alarm_start
01016b38 g     F .text	00000144 OSFlagNameGet
010023d0 g     F .text	00000190 _ZSt20__throw_out_of_rangePKc
01004b14  w    F .text	00000090 _ZNKSs7compareEmmPKcm
01006908  w    F .text	00000060 _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc
0101c370 g     F .text	00000064 OSTimeGet
01012b38 g     F .text	00000098 __muldi3
010091a4 g     F .text	00000018 _Unwind_GetGR
01009180 g     F .text	00000008 __cxa_get_globals
0100eeac g     F .text	00000194 __smakebuf_r
01021298 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
01005f34  w    F .text	00000040 _ZNSspLEPKc
0100a5f8 g     F .text	00000074 strlen
01001a70 g     F .text	00000190 _ZSt23__throw_underflow_errorPKc
0100a388 g     F .text	00000064 _init_signal_r
01021290  w    O .rwdata	00000008 _ZTISt9type_info
0101e3c0 g     F .text	0000001c OSTaskSwHook
0101dbf0 g     F .text	00000188 open
01003b28  w    F .text	0000000c _ZNSs4_Rep12_S_empty_repEv
01003b20  w    F .text	00000008 _ZNSs12_Alloc_hiderC1EPcRKSaIcE
01029910 g     O .bss	00000b40 OSEventTbl
01012578 g     F .text	00000088 __gedf2
0101f218  w    O .rodata	0000000d _ZTSSt9exception
0102a450 g     O .bss	00000510 OSTCBTbl
0101f008  w    O .rodata	00000014 _ZTVSt13runtime_error
0101a35c g     F .text	00000104 OSSemSet
0101f2c8  w    O .rodata	0000000f _ZTSSt10bad_typeid
01003fe8  w    F .text	0000000c _ZNKSs6lengthEv
01005014  w    F .text	00000020 _ZNSs13_S_copy_charsEPcS_S_
01003460 g     F .text	00000008 _ZNKSt11logic_error4whatEv
01005458  w    F .text	000000c4 _ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag
01007928 g     F .text	00000010 _ZNSt9exceptionD0Ev
01006fcc  w    F .text	00000070 _ZNSs6resizeEmc
0101d6dc g     F .text	00000030 alt_icache_flush_all
0101efd0  w    O .rodata	00000014 _ZTVNSt8ios_base7failureE
01008c2c g     F .text	00000010 _ZNSt10bad_typeidD1Ev
01009238 g     F .text	00000008 _Unwind_GetDataRelBase
01007740  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_
0102134c g     O .rwdata	00000004 alt_priority_mask
01006b74  w    F .text	00000174 _ZNSs6insertEmPKcm
01019a6c g     F .text	000002a0 OSSemDel
01002df0 g     F .text	00000094 _ZNSt15_List_node_base4swapERS_S0_
01022f40 g     O .bss	00000004 OSFlagFreeList
0101d75c g     F .text	0000009c alt_ic_irq_enable
010212e4 g     O .rwdata	00000002 OSEventNameSize
0100c570 g     F .text	00000024 __vfprintf_internal
01003af8  w    F .text	0000000c _ZNKSs8max_sizeEv
01022f44 g     O .bss	00000001 OSStatRdy
0102a960 g     O .bss	00000054 OSTCBPrioTbl
01013e8c g     F .text	000000ac __env_lock
0102132a g     O .rwdata	00000002 OSTaskSwHookEn
010028d4 g     F .text	00000104 _ZNSt8ios_base7failureD1Ev
01008c3c g     F .text	00000010 _ZNSt10bad_typeidD2Ev
01011cd0 g     F .text	00000080 __subdf3
01004390  w    F .text	00000004 _ZNSs4_Rep10_M_destroyERKSaIcE
01004c6c  w    F .text	000000c0 _ZNKSs7compareEmmRKSsmm
010044dc  w    F .text	0000000c _ZNKSs12find_last_ofERKSsm
0100564c  w    F .text	00000060 _ZNSsC2EPKcRKSaIcE
01003b74  w    F .text	00000008 _ZNSs4_Rep10_M_refdataEv
0100f0d8 g     F .text	000000c4 __lo0bits
01001070  w    F .text	0000004c _ZNSt4listIP8os_eventSaIS1_EE9_M_insertESt14_List_iteratorIS1_ERKS1_
01006f78  w    F .text	00000054 _ZNSs6rbeginEv
01006968  w    F .text	00000048 _ZNSs6insertEmmc
01021350 g     O .rwdata	00000008 alt_alarm_list
010212f2 g     O .rwdata	00000002 OSFlagWidth
0101d614 g     F .text	00000064 _do_ctors
0100a4b0 g     F .text	00000014 __sigtramp
0101ef64  w    O .rodata	0000000c _ZTISt16invalid_argument
01005780  w    F .text	00000034 _ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
01003a9c  w    F .text	0000001c _ZNKSs11_M_disjunctEPKc
01013164 g     F .text	000000fc close
010072a8  w    F .text	00000034 _ZNSs4swapERSs
01004a34  w    F .text	0000003c _ZNSsC1EmcRKSaIcE
01022ef0 g     O .bss	00000004 alt_envsem
01022f48 g     O .bss	00000004 OSIdleCtrRun
01015130 g     F .text	00000020 OSVersion
0102133c g     O .rwdata	00000002 OSTmrCfgWheelSize
01003180 g     F .text	000000b0 _ZNSt11logic_errorC1ERKSs
0101376c g     F .text	00000080 alt_load
0101be24 g     F .text	0000007c OS_TaskStkClr
01000848  w    F .text	00000038 _ZNSt14_List_iteratorIP8os_eventEppEv
01012c50 g     F .text	00000314 __pack_d
01021316 g     O .rwdata	00000002 OSTaskCreateEn
01003ac4  w    F .text	00000010 _ZNSsC1Ev
01008e24 g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
010003dc g     F .text	00000050 _ZN14CommandHandlerD0Ev
01015720 g     F .text	00000068 OS_EventWaitListInit
0100a374 g     F .text	00000014 raise
0101e44c g     F .text	0000001c OSTaskIdleHook
010033d0 g     F .text	00000030 _ZNSt16invalid_argumentC2ERKSs
010096e8 g     F .text	00000014 free
0100e12c g     F .text	00000004 __sinit_lock_acquire
01003370 g     F .text	00000030 _ZNSt12length_errorC2ERKSs
0100fcf4 g     F .text	00000100 __multadd
01007a98 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
0101ee44  w    O .rodata	00000012 _ZTS15InfraredHandler
0101bab4 g     F .text	0000022c OSTaskSuspend
0100f040 g     F .text	00000028 _Bfree
01005de8  w    F .text	0000010c _ZNSs6appendEPKcm
01015dc8 g     F .text	0000005c OS_TaskIdle
01003468 g     F .text	000000b0 _ZNSt13runtime_errorC1ERKSs
010051ec  w    F .text	000000ec _ZNSsC1ERKSsmm
01021342 g     O .rwdata	00000002 OSTmrTblSize
0101966c g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406f14 	ori	at,at,444
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10000fc:	1014ae80 	call	1014ae8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000100:	0005313a 	rdctl	r2,ipending
 1000104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000114:	00800044 	movi	r2,1
 1000118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100011c:	e0ffff17 	ldw	r3,-4(fp)
 1000120:	e0bffe17 	ldw	r2,-8(fp)
 1000124:	1884703a 	and	r2,r3,r2
 1000128:	1005003a 	cmpeq	r2,r2,zero
 100012c:	1000161e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1000130:	e0bffd17 	ldw	r2,-12(fp)
 1000134:	00c040f4 	movhi	r3,259
 1000138:	18ea6d04 	addi	r3,r3,-22092
 100013c:	100490fa 	slli	r2,r2,3
 1000140:	10c5883a 	add	r2,r2,r3
 1000144:	11400017 	ldw	r5,0(r2)
 1000148:	e0bffd17 	ldw	r2,-12(fp)
 100014c:	00c040f4 	movhi	r3,259
 1000150:	18ea6d04 	addi	r3,r3,-22092
 1000154:	100490fa 	slli	r2,r2,3
 1000158:	10c5883a 	add	r2,r2,r3
 100015c:	10800104 	addi	r2,r2,4
 1000160:	11000017 	ldw	r4,0(r2)
 1000164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe31e 	bne	r2,zero,1000110 <alt_irq_handler+0x24>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fde06 	br	100011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001a4:	1014b640 	call	1014b64 <OSIntExit>
}
 10001a8:	e037883a 	mov	sp,fp
 10001ac:	dfc00117 	ldw	ra,4(sp)
 10001b0:	df000017 	ldw	fp,0(sp)
 10001b4:	dec00204 	addi	sp,sp,8
 10001b8:	f800283a 	ret

Disassembly of section .text:

010001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001bc:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
 10001c0:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c4:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c8:	00bffd16 	blt	zero,r2,10001c0 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001cc:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 10001d0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d4:	068040b4 	movhi	gp,258
    ori gp, gp, %lo(_gp)
 10001d8:	d6a49914 	ori	gp,gp,37476
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001dc:	008040b4 	movhi	r2,258
    ori r2, r2, %lo(__bss_start)
 10001e0:	108ba814 	ori	r2,r2,11936

    movhi r3, %hi(__bss_end)
 10001e4:	00c040b4 	movhi	r3,258
    ori r3, r3, %lo(__bss_end)
 10001e8:	18eb1114 	ori	r3,r3,44100

    beq r2, r3, 1f
 10001ec:	10c00326 	beq	r2,r3,10001fc <_start+0x40>

0:
    stw zero, (r2)
 10001f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f8:	10fffd36 	bltu	r2,r3,10001f0 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001fc:	101376c0 	call	101376c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000200:	10139a80 	call	10139a8 <alt_main>

01000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000204:	003fff06 	br	1000204 <alt_after_alt_main>

01000208 <_ZN14CommandHandlerC2Ev>:

#include <stdio.h>
#include "CommandHandler.h"

// ALLOCATION
CommandHandler::CommandHandler() {}
 1000208:	defffe04 	addi	sp,sp,-8
 100020c:	df000115 	stw	fp,4(sp)
 1000210:	df000104 	addi	fp,sp,4
 1000214:	e13fff15 	stw	r4,-4(fp)
 1000218:	00c040b4 	movhi	r3,258
 100021c:	18fb7e04 	addi	r3,r3,-4616
 1000220:	e0bfff17 	ldw	r2,-4(fp)
 1000224:	10c00015 	stw	r3,0(r2)
 1000228:	e037883a 	mov	sp,fp
 100022c:	df000017 	ldw	fp,0(sp)
 1000230:	dec00104 	addi	sp,sp,4
 1000234:	f800283a 	ret

01000238 <_ZN14CommandHandlerC1Ev>:
 1000238:	defffe04 	addi	sp,sp,-8
 100023c:	df000115 	stw	fp,4(sp)
 1000240:	df000104 	addi	fp,sp,4
 1000244:	e13fff15 	stw	r4,-4(fp)
 1000248:	00c040b4 	movhi	r3,258
 100024c:	18fb7e04 	addi	r3,r3,-4616
 1000250:	e0bfff17 	ldw	r2,-4(fp)
 1000254:	10c00015 	stw	r3,0(r2)
 1000258:	e037883a 	mov	sp,fp
 100025c:	df000017 	ldw	fp,0(sp)
 1000260:	dec00104 	addi	sp,sp,4
 1000264:	f800283a 	ret

01000268 <_ZN14CommandHandler17onInfraredReceiveEv>:

/*
 * Gets the queue used to accept infrared receive events.
 * @return the infrared receive queue
 */
OS_EVENT *CommandHandler::onInfraredReceive() {
 1000268:	defffe04 	addi	sp,sp,-8
 100026c:	df000115 	stw	fp,4(sp)
 1000270:	df000104 	addi	fp,sp,4
 1000274:	e13fff15 	stw	r4,-4(fp)
	return infraredReceiveQueue;
 1000278:	e0bfff17 	ldw	r2,-4(fp)
 100027c:	10800517 	ldw	r2,20(r2)
}
 1000280:	e037883a 	mov	sp,fp
 1000284:	df000017 	ldw	fp,0(sp)
 1000288:	dec00104 	addi	sp,sp,4
 100028c:	f800283a 	ret

01000290 <_ZN14CommandHandler22processInfraredReceiveEj>:

/*
 * Processes an infrared receive event.
 * @param level - the level recorded by the infrared receiver
 */
Status CommandHandler::processInfraredReceive(unsigned int level) {
 1000290:	defffc04 	addi	sp,sp,-16
 1000294:	dfc00315 	stw	ra,12(sp)
 1000298:	df000215 	stw	fp,8(sp)
 100029c:	df000204 	addi	fp,sp,8
 10002a0:	e13ffe15 	stw	r4,-8(fp)
 10002a4:	e17fff15 	stw	r5,-4(fp)
	printf("CommandHandler [event: infrared receive, level: %u]", level);
 10002a8:	010040b4 	movhi	r4,258
 10002ac:	213b6f04 	addi	r4,r4,-4676
 10002b0:	e17fff17 	ldw	r5,-4(fp)
 10002b4:	100a1c00 	call	100a1c0 <printf>
	return OK;
 10002b8:	0005883a 	mov	r2,zero
}
 10002bc:	e037883a 	mov	sp,fp
 10002c0:	dfc00117 	ldw	ra,4(sp)
 10002c4:	df000017 	ldw	fp,0(sp)
 10002c8:	dec00204 	addi	sp,sp,8
 10002cc:	f800283a 	ret

010002d0 <_ZN14CommandHandler20checkInfraredReceiveEv>:

/*
 * Checks the infrared receive queue for new readings.
 * @return OK when a new reading is received and processed without error
 */
Status CommandHandler::checkInfraredReceive() {
 10002d0:	defffa04 	addi	sp,sp,-24
 10002d4:	dfc00515 	stw	ra,20(sp)
 10002d8:	df000415 	stw	fp,16(sp)
 10002dc:	df000404 	addi	fp,sp,16
 10002e0:	e13ffe15 	stw	r4,-8(fp)
	INT8U status;
	int level = (int)OSQPend(infraredReceiveQueue, 0, &status);
 10002e4:	e0bffe17 	ldw	r2,-8(fp)
 10002e8:	11000517 	ldw	r4,20(r2)
 10002ec:	e1bffd04 	addi	r6,fp,-12
 10002f0:	000b883a 	mov	r5,zero
 10002f4:	1018c940 	call	1018c94 <OSQPend>
 10002f8:	e0bffc15 	stw	r2,-16(fp)
	if (status != OS_NO_ERR) {
 10002fc:	e0bffd03 	ldbu	r2,-12(fp)
 1000300:	10803fcc 	andi	r2,r2,255
 1000304:	1005003a 	cmpeq	r2,r2,zero
 1000308:	1000031e 	bne	r2,zero,1000318 <_ZN14CommandHandler20checkInfraredReceiveEv+0x48>
		return ERR_INFRARED;
 100030c:	00800044 	movi	r2,1
 1000310:	e0bfff15 	stw	r2,-4(fp)
 1000314:	00000406 	br	1000328 <_ZN14CommandHandler20checkInfraredReceiveEv+0x58>
	} else {
		return processInfraredReceive(level);
 1000318:	e17ffc17 	ldw	r5,-16(fp)
 100031c:	e13ffe17 	ldw	r4,-8(fp)
 1000320:	10002900 	call	1000290 <_ZN14CommandHandler22processInfraredReceiveEj>
 1000324:	e0bfff15 	stw	r2,-4(fp)
 1000328:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 100032c:	e037883a 	mov	sp,fp
 1000330:	dfc00117 	ldw	ra,4(sp)
 1000334:	df000017 	ldw	fp,0(sp)
 1000338:	dec00204 	addi	sp,sp,8
 100033c:	f800283a 	ret

01000340 <_ZN14CommandHandler21createInfraredReceiveEv>:
	return createInfraredReceive();
}

// INFRARED

Status CommandHandler::createInfraredReceive() {
 1000340:	defffc04 	addi	sp,sp,-16
 1000344:	dfc00315 	stw	ra,12(sp)
 1000348:	df000215 	stw	fp,8(sp)
 100034c:	df000204 	addi	fp,sp,8
 1000350:	e13ffe15 	stw	r4,-8(fp)
	/* Create the infrared receive queue. */
	infraredReceiveQueue = OSQCreate((void**)&infraredReceiveArray, COMMAND_INFRARED_RECEIVE_SIZE);
 1000354:	e0bffe17 	ldw	r2,-8(fp)
 1000358:	10800104 	addi	r2,r2,4
 100035c:	1009883a 	mov	r4,r2
 1000360:	01400104 	movi	r5,4
 1000364:	10186b80 	call	10186b8 <OSQCreate>
 1000368:	1007883a 	mov	r3,r2
 100036c:	e0bffe17 	ldw	r2,-8(fp)
 1000370:	10c00515 	stw	r3,20(r2)
	if (infraredReceiveQueue == NULL) {
 1000374:	e0bffe17 	ldw	r2,-8(fp)
 1000378:	10800517 	ldw	r2,20(r2)
 100037c:	1004c03a 	cmpne	r2,r2,zero
 1000380:	1000031e 	bne	r2,zero,1000390 <_ZN14CommandHandler21createInfraredReceiveEv+0x50>
		return ERR_INFRARED;
 1000384:	00800044 	movi	r2,1
 1000388:	e0bfff15 	stw	r2,-4(fp)
 100038c:	00000106 	br	1000394 <_ZN14CommandHandler21createInfraredReceiveEv+0x54>
	} else {
		return OK;
 1000390:	e03fff15 	stw	zero,-4(fp)
 1000394:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 1000398:	e037883a 	mov	sp,fp
 100039c:	dfc00117 	ldw	ra,4(sp)
 10003a0:	df000017 	ldw	fp,0(sp)
 10003a4:	dec00204 	addi	sp,sp,8
 10003a8:	f800283a 	ret

010003ac <_ZN14CommandHandler4initEv>:

/*
 * Initializes this handler.
 * @return OK if there are no initialization errors
 */
Status CommandHandler::init() {
 10003ac:	defffd04 	addi	sp,sp,-12
 10003b0:	dfc00215 	stw	ra,8(sp)
 10003b4:	df000115 	stw	fp,4(sp)
 10003b8:	df000104 	addi	fp,sp,4
 10003bc:	e13fff15 	stw	r4,-4(fp)
	return createInfraredReceive();
 10003c0:	e13fff17 	ldw	r4,-4(fp)
 10003c4:	10003400 	call	1000340 <_ZN14CommandHandler21createInfraredReceiveEv>
}
 10003c8:	e037883a 	mov	sp,fp
 10003cc:	dfc00117 	ldw	ra,4(sp)
 10003d0:	df000017 	ldw	fp,0(sp)
 10003d4:	dec00204 	addi	sp,sp,8
 10003d8:	f800283a 	ret

010003dc <_ZN14CommandHandlerD0Ev>:
#include <stdio.h>
#include "CommandHandler.h"

// ALLOCATION
CommandHandler::CommandHandler() {}
CommandHandler::~CommandHandler() {}
 10003dc:	defffd04 	addi	sp,sp,-12
 10003e0:	dfc00215 	stw	ra,8(sp)
 10003e4:	df000115 	stw	fp,4(sp)
 10003e8:	df000104 	addi	fp,sp,4
 10003ec:	e13fff15 	stw	r4,-4(fp)
 10003f0:	00c040b4 	movhi	r3,258
 10003f4:	18fb7e04 	addi	r3,r3,-4616
 10003f8:	e0bfff17 	ldw	r2,-4(fp)
 10003fc:	10c00015 	stw	r3,0(r2)
 1000400:	00800044 	movi	r2,1
 1000404:	10803fcc 	andi	r2,r2,255
 1000408:	1005003a 	cmpeq	r2,r2,zero
 100040c:	1000021e 	bne	r2,zero,1000418 <_ZN14CommandHandlerD0Ev+0x3c>
 1000410:	e13fff17 	ldw	r4,-4(fp)
 1000414:	1008aa40 	call	1008aa4 <_ZdlPv>
 1000418:	e037883a 	mov	sp,fp
 100041c:	dfc00117 	ldw	ra,4(sp)
 1000420:	df000017 	ldw	fp,0(sp)
 1000424:	dec00204 	addi	sp,sp,8
 1000428:	f800283a 	ret

0100042c <_ZN14CommandHandlerD1Ev>:
 100042c:	defffd04 	addi	sp,sp,-12
 1000430:	dfc00215 	stw	ra,8(sp)
 1000434:	df000115 	stw	fp,4(sp)
 1000438:	df000104 	addi	fp,sp,4
 100043c:	e13fff15 	stw	r4,-4(fp)
 1000440:	00c040b4 	movhi	r3,258
 1000444:	18fb7e04 	addi	r3,r3,-4616
 1000448:	e0bfff17 	ldw	r2,-4(fp)
 100044c:	10c00015 	stw	r3,0(r2)
 1000450:	0005883a 	mov	r2,zero
 1000454:	10803fcc 	andi	r2,r2,255
 1000458:	1005003a 	cmpeq	r2,r2,zero
 100045c:	1000021e 	bne	r2,zero,1000468 <_ZN14CommandHandlerD1Ev+0x3c>
 1000460:	e13fff17 	ldw	r4,-4(fp)
 1000464:	1008aa40 	call	1008aa4 <_ZdlPv>
 1000468:	e037883a 	mov	sp,fp
 100046c:	dfc00117 	ldw	ra,4(sp)
 1000470:	df000017 	ldw	fp,0(sp)
 1000474:	dec00204 	addi	sp,sp,8
 1000478:	f800283a 	ret

0100047c <_ZN14CommandHandlerD2Ev>:
 100047c:	defffd04 	addi	sp,sp,-12
 1000480:	dfc00215 	stw	ra,8(sp)
 1000484:	df000115 	stw	fp,4(sp)
 1000488:	df000104 	addi	fp,sp,4
 100048c:	e13fff15 	stw	r4,-4(fp)
 1000490:	00c040b4 	movhi	r3,258
 1000494:	18fb7e04 	addi	r3,r3,-4616
 1000498:	e0bfff17 	ldw	r2,-4(fp)
 100049c:	10c00015 	stw	r3,0(r2)
 10004a0:	0005883a 	mov	r2,zero
 10004a4:	10803fcc 	andi	r2,r2,255
 10004a8:	1005003a 	cmpeq	r2,r2,zero
 10004ac:	1000021e 	bne	r2,zero,10004b8 <_ZN14CommandHandlerD2Ev+0x3c>
 10004b0:	e13fff17 	ldw	r4,-4(fp)
 10004b4:	1008aa40 	call	1008aa4 <_ZdlPv>
 10004b8:	e037883a 	mov	sp,fp
 10004bc:	dfc00117 	ldw	ra,4(sp)
 10004c0:	df000017 	ldw	fp,0(sp)
 10004c4:	dec00204 	addi	sp,sp,8
 10004c8:	f800283a 	ret

010004cc <_Z27command_check_infrared_taskPv>:
#include "CommandTasks.h"

extern CommandHandler *command;

/* Monitors the infrared receive queue and responds to infrared receive events. */
void command_check_infrared_task(void* pdata) {
 10004cc:	defffd04 	addi	sp,sp,-12
 10004d0:	dfc00215 	stw	ra,8(sp)
 10004d4:	df000115 	stw	fp,4(sp)
 10004d8:	df000104 	addi	fp,sp,4
 10004dc:	e13fff15 	stw	r4,-4(fp)
	while (true) {
		command->checkInfraredReceive();
 10004e0:	008040b4 	movhi	r2,258
 10004e4:	108ba804 	addi	r2,r2,11936
 10004e8:	11000017 	ldw	r4,0(r2)
 10004ec:	10002d00 	call	10002d0 <_ZN14CommandHandler20checkInfraredReceiveEv>

extern CommandHandler *command;

/* Monitors the infrared receive queue and responds to infrared receive events. */
void command_check_infrared_task(void* pdata) {
	while (true) {
 10004f0:	003ffb06 	br	10004e0 <_Z27command_check_infrared_taskPv+0x14>

010004f4 <_ZN10DataSourceC1Ev>:
 */

#include "DataSource.h"

// ALLOCATION
DataSource::DataSource() {}
 10004f4:	defffb04 	addi	sp,sp,-20
 10004f8:	dfc00415 	stw	ra,16(sp)
 10004fc:	df000315 	stw	fp,12(sp)
 1000500:	dc000215 	stw	r16,8(sp)
 1000504:	df000204 	addi	fp,sp,8
 1000508:	e13fff15 	stw	r4,-4(fp)
 100050c:	00c040b4 	movhi	r3,258
 1000510:	18fb8704 	addi	r3,r3,-4580
 1000514:	e0bfff17 	ldw	r2,-4(fp)
 1000518:	10c00015 	stw	r3,0(r2)
 100051c:	e0bfff17 	ldw	r2,-4(fp)
 1000520:	14000104 	addi	r16,r2,4
 1000524:	e13ffe04 	addi	r4,fp,-8
 1000528:	10007900 	call	1000790 <_ZNSaIP8os_eventEC1Ev>
 100052c:	8009883a 	mov	r4,r16
 1000530:	e17ffe04 	addi	r5,fp,-8
 1000534:	1000c900 	call	1000c90 <_ZNSt4listIP8os_eventSaIS1_EEC1ERKS2_>
 1000538:	e13ffe04 	addi	r4,fp,-8
 100053c:	10007e00 	call	10007e0 <_ZNSaIP8os_eventED1Ev>
 1000540:	e037883a 	mov	sp,fp
 1000544:	dfc00217 	ldw	ra,8(sp)
 1000548:	df000117 	ldw	fp,4(sp)
 100054c:	dc000017 	ldw	r16,0(sp)
 1000550:	dec00304 	addi	sp,sp,12
 1000554:	f800283a 	ret

01000558 <_ZN10DataSourceC2Ev>:
 1000558:	defffb04 	addi	sp,sp,-20
 100055c:	dfc00415 	stw	ra,16(sp)
 1000560:	df000315 	stw	fp,12(sp)
 1000564:	dc000215 	stw	r16,8(sp)
 1000568:	df000204 	addi	fp,sp,8
 100056c:	e13fff15 	stw	r4,-4(fp)
 1000570:	00c040b4 	movhi	r3,258
 1000574:	18fb8704 	addi	r3,r3,-4580
 1000578:	e0bfff17 	ldw	r2,-4(fp)
 100057c:	10c00015 	stw	r3,0(r2)
 1000580:	e0bfff17 	ldw	r2,-4(fp)
 1000584:	14000104 	addi	r16,r2,4
 1000588:	e13ffe04 	addi	r4,fp,-8
 100058c:	10007900 	call	1000790 <_ZNSaIP8os_eventEC1Ev>
 1000590:	8009883a 	mov	r4,r16
 1000594:	e17ffe04 	addi	r5,fp,-8
 1000598:	1000c900 	call	1000c90 <_ZNSt4listIP8os_eventSaIS1_EEC1ERKS2_>
 100059c:	e13ffe04 	addi	r4,fp,-8
 10005a0:	10007e00 	call	10007e0 <_ZNSaIP8os_eventED1Ev>
 10005a4:	e037883a 	mov	sp,fp
 10005a8:	dfc00217 	ldw	ra,8(sp)
 10005ac:	df000117 	ldw	fp,4(sp)
 10005b0:	dc000017 	ldw	r16,0(sp)
 10005b4:	dec00304 	addi	sp,sp,12
 10005b8:	f800283a 	ret

010005bc <_ZN10DataSource14removeListenerEP8os_event>:

/*
 * Removes a listener queue from this data source.
 * @param queue - the queue to remove
 */
void DataSource::removeListener(OS_EVENT *queue) {
 10005bc:	defffc04 	addi	sp,sp,-16
 10005c0:	dfc00315 	stw	ra,12(sp)
 10005c4:	df000215 	stw	fp,8(sp)
 10005c8:	df000204 	addi	fp,sp,8
 10005cc:	e13ffe15 	stw	r4,-8(fp)
 10005d0:	e17fff15 	stw	r5,-4(fp)
	listeners.remove(queue);
 10005d4:	e0bffe17 	ldw	r2,-8(fp)
 10005d8:	11000104 	addi	r4,r2,4
 10005dc:	e17fff04 	addi	r5,fp,-4
 10005e0:	1000dd40 	call	1000dd4 <_ZNSt4listIP8os_eventSaIS1_EE6removeERKS1_>
}
 10005e4:	e037883a 	mov	sp,fp
 10005e8:	dfc00117 	ldw	ra,4(sp)
 10005ec:	df000017 	ldw	fp,0(sp)
 10005f0:	dec00204 	addi	sp,sp,8
 10005f4:	f800283a 	ret

010005f8 <_ZN10DataSourceD0Ev>:

#include "DataSource.h"

// ALLOCATION
DataSource::DataSource() {}
DataSource::~DataSource() {}
 10005f8:	defffd04 	addi	sp,sp,-12
 10005fc:	dfc00215 	stw	ra,8(sp)
 1000600:	df000115 	stw	fp,4(sp)
 1000604:	df000104 	addi	fp,sp,4
 1000608:	e13fff15 	stw	r4,-4(fp)
 100060c:	00c040b4 	movhi	r3,258
 1000610:	18fb8704 	addi	r3,r3,-4580
 1000614:	e0bfff17 	ldw	r2,-4(fp)
 1000618:	10c00015 	stw	r3,0(r2)
 100061c:	e0bfff17 	ldw	r2,-4(fp)
 1000620:	11000104 	addi	r4,r2,4
 1000624:	1000f3c0 	call	1000f3c <_ZNSt4listIP8os_eventSaIS1_EED1Ev>
 1000628:	00800044 	movi	r2,1
 100062c:	10803fcc 	andi	r2,r2,255
 1000630:	1005003a 	cmpeq	r2,r2,zero
 1000634:	1000021e 	bne	r2,zero,1000640 <_ZN10DataSourceD0Ev+0x48>
 1000638:	e13fff17 	ldw	r4,-4(fp)
 100063c:	1008aa40 	call	1008aa4 <_ZdlPv>
 1000640:	e037883a 	mov	sp,fp
 1000644:	dfc00117 	ldw	ra,4(sp)
 1000648:	df000017 	ldw	fp,0(sp)
 100064c:	dec00204 	addi	sp,sp,8
 1000650:	f800283a 	ret

01000654 <_ZN10DataSourceD1Ev>:
 1000654:	defffd04 	addi	sp,sp,-12
 1000658:	dfc00215 	stw	ra,8(sp)
 100065c:	df000115 	stw	fp,4(sp)
 1000660:	df000104 	addi	fp,sp,4
 1000664:	e13fff15 	stw	r4,-4(fp)
 1000668:	00c040b4 	movhi	r3,258
 100066c:	18fb8704 	addi	r3,r3,-4580
 1000670:	e0bfff17 	ldw	r2,-4(fp)
 1000674:	10c00015 	stw	r3,0(r2)
 1000678:	e0bfff17 	ldw	r2,-4(fp)
 100067c:	11000104 	addi	r4,r2,4
 1000680:	1000f3c0 	call	1000f3c <_ZNSt4listIP8os_eventSaIS1_EED1Ev>
 1000684:	0005883a 	mov	r2,zero
 1000688:	10803fcc 	andi	r2,r2,255
 100068c:	1005003a 	cmpeq	r2,r2,zero
 1000690:	1000021e 	bne	r2,zero,100069c <_ZN10DataSourceD1Ev+0x48>
 1000694:	e13fff17 	ldw	r4,-4(fp)
 1000698:	1008aa40 	call	1008aa4 <_ZdlPv>
 100069c:	e037883a 	mov	sp,fp
 10006a0:	dfc00117 	ldw	ra,4(sp)
 10006a4:	df000017 	ldw	fp,0(sp)
 10006a8:	dec00204 	addi	sp,sp,8
 10006ac:	f800283a 	ret

010006b0 <_ZN10DataSourceD2Ev>:
 10006b0:	defffd04 	addi	sp,sp,-12
 10006b4:	dfc00215 	stw	ra,8(sp)
 10006b8:	df000115 	stw	fp,4(sp)
 10006bc:	df000104 	addi	fp,sp,4
 10006c0:	e13fff15 	stw	r4,-4(fp)
 10006c4:	00c040b4 	movhi	r3,258
 10006c8:	18fb8704 	addi	r3,r3,-4580
 10006cc:	e0bfff17 	ldw	r2,-4(fp)
 10006d0:	10c00015 	stw	r3,0(r2)
 10006d4:	e0bfff17 	ldw	r2,-4(fp)
 10006d8:	11000104 	addi	r4,r2,4
 10006dc:	1000f3c0 	call	1000f3c <_ZNSt4listIP8os_eventSaIS1_EED1Ev>
 10006e0:	0005883a 	mov	r2,zero
 10006e4:	10803fcc 	andi	r2,r2,255
 10006e8:	1005003a 	cmpeq	r2,r2,zero
 10006ec:	1000021e 	bne	r2,zero,10006f8 <_ZN10DataSourceD2Ev+0x48>
 10006f0:	e13fff17 	ldw	r4,-4(fp)
 10006f4:	1008aa40 	call	1008aa4 <_ZdlPv>
 10006f8:	e037883a 	mov	sp,fp
 10006fc:	dfc00117 	ldw	ra,4(sp)
 1000700:	df000017 	ldw	fp,0(sp)
 1000704:	dec00204 	addi	sp,sp,8
 1000708:	f800283a 	ret

0100070c <_ZN10DataSource11addListenerEP8os_event>:

/*
 * Adds a listener queue to this data source.
 * @param queue - the queue to add
 */
void DataSource::addListener(OS_EVENT *queue) {
 100070c:	defffc04 	addi	sp,sp,-16
 1000710:	dfc00315 	stw	ra,12(sp)
 1000714:	df000215 	stw	fp,8(sp)
 1000718:	df000204 	addi	fp,sp,8
 100071c:	e13ffe15 	stw	r4,-8(fp)
 1000720:	e17fff15 	stw	r5,-4(fp)
	listeners.push_back(queue);
 1000724:	e0bffe17 	ldw	r2,-8(fp)
 1000728:	11000104 	addi	r4,r2,4
 100072c:	e17fff04 	addi	r5,fp,-4
 1000730:	10010bc0 	call	10010bc <_ZNSt4listIP8os_eventSaIS1_EE9push_backERKS1_>
}
 1000734:	e037883a 	mov	sp,fp
 1000738:	dfc00117 	ldw	ra,4(sp)
 100073c:	df000017 	ldw	fp,0(sp)
 1000740:	dec00204 	addi	sp,sp,8
 1000744:	f800283a 	ret

01000748 <_ZnwmPv>:
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) throw() { return __p; }
 1000748:	defffd04 	addi	sp,sp,-12
 100074c:	df000215 	stw	fp,8(sp)
 1000750:	df000204 	addi	fp,sp,8
 1000754:	e13ffe15 	stw	r4,-8(fp)
 1000758:	e17fff15 	stw	r5,-4(fp)
 100075c:	e0bfff17 	ldw	r2,-4(fp)
 1000760:	e037883a 	mov	sp,fp
 1000764:	df000017 	ldw	fp,0(sp)
 1000768:	dec00104 	addi	sp,sp,4
 100076c:	f800283a 	ret

01000770 <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }
 1000770:	defffe04 	addi	sp,sp,-8
 1000774:	df000115 	stw	fp,4(sp)
 1000778:	df000104 	addi	fp,sp,4
 100077c:	e13fff15 	stw	r4,-4(fp)
 1000780:	e037883a 	mov	sp,fp
 1000784:	df000017 	ldw	fp,0(sp)
 1000788:	dec00104 	addi	sp,sp,4
 100078c:	f800283a 	ret

01000790 <_ZNSaIP8os_eventEC1Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }
 1000790:	defffd04 	addi	sp,sp,-12
 1000794:	dfc00215 	stw	ra,8(sp)
 1000798:	df000115 	stw	fp,4(sp)
 100079c:	df000104 	addi	fp,sp,4
 10007a0:	e13fff15 	stw	r4,-4(fp)
 10007a4:	e13fff17 	ldw	r4,-4(fp)
 10007a8:	10007700 	call	1000770 <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev>
 10007ac:	e037883a 	mov	sp,fp
 10007b0:	dfc00117 	ldw	ra,4(sp)
 10007b4:	df000017 	ldw	fp,0(sp)
 10007b8:	dec00204 	addi	sp,sp,8
 10007bc:	f800283a 	ret

010007c0 <_ZN9__gnu_cxx13new_allocatorIP8os_eventED2Ev>:
      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }
 10007c0:	defffe04 	addi	sp,sp,-8
 10007c4:	df000115 	stw	fp,4(sp)
 10007c8:	df000104 	addi	fp,sp,4
 10007cc:	e13fff15 	stw	r4,-4(fp)
 10007d0:	e037883a 	mov	sp,fp
 10007d4:	df000017 	ldw	fp,0(sp)
 10007d8:	dec00104 	addi	sp,sp,4
 10007dc:	f800283a 	ret

010007e0 <_ZNSaIP8os_eventED1Ev>:
      : __glibcxx_base_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 10007e0:	defffd04 	addi	sp,sp,-12
 10007e4:	dfc00215 	stw	ra,8(sp)
 10007e8:	df000115 	stw	fp,4(sp)
 10007ec:	df000104 	addi	fp,sp,4
 10007f0:	e13fff15 	stw	r4,-4(fp)
 10007f4:	e13fff17 	ldw	r4,-4(fp)
 10007f8:	10007c00 	call	10007c0 <_ZN9__gnu_cxx13new_allocatorIP8os_eventED2Ev>
 10007fc:	e037883a 	mov	sp,fp
 1000800:	dfc00117 	ldw	ra,4(sp)
 1000804:	df000017 	ldw	fp,0(sp)
 1000808:	dec00204 	addi	sp,sp,8
 100080c:	f800283a 	ret

01000810 <_ZNKSt14_List_iteratorIP8os_eventEneERKS2_>:
      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
 1000810:	defffd04 	addi	sp,sp,-12
 1000814:	df000215 	stw	fp,8(sp)
 1000818:	df000204 	addi	fp,sp,8
 100081c:	e13ffe15 	stw	r4,-8(fp)
 1000820:	e17fff15 	stw	r5,-4(fp)
      { return _M_node != __x._M_node; }
 1000824:	e0bffe17 	ldw	r2,-8(fp)
 1000828:	10c00017 	ldw	r3,0(r2)
 100082c:	e0bfff17 	ldw	r2,-4(fp)
 1000830:	10800017 	ldw	r2,0(r2)
 1000834:	1884c03a 	cmpne	r2,r3,r2
 1000838:	e037883a 	mov	sp,fp
 100083c:	df000017 	ldw	fp,0(sp)
 1000840:	dec00104 	addi	sp,sp,4
 1000844:	f800283a 	ret

01000848 <_ZNSt14_List_iteratorIP8os_eventEppEv>:
      pointer
      operator->() const
      { return &static_cast<_Node*>(_M_node)->_M_data; }

      _Self&
      operator++()
 1000848:	defffe04 	addi	sp,sp,-8
 100084c:	df000115 	stw	fp,4(sp)
 1000850:	df000104 	addi	fp,sp,4
 1000854:	e13fff15 	stw	r4,-4(fp)
      {
	_M_node = _M_node->_M_next;
 1000858:	e0bfff17 	ldw	r2,-4(fp)
 100085c:	10800017 	ldw	r2,0(r2)
 1000860:	10c00017 	ldw	r3,0(r2)
 1000864:	e0bfff17 	ldw	r2,-4(fp)
 1000868:	10c00015 	stw	r3,0(r2)
	return *this;
 100086c:	e0bfff17 	ldw	r2,-4(fp)
 1000870:	e037883a 	mov	sp,fp
 1000874:	df000017 	ldw	fp,0(sp)
 1000878:	dec00104 	addi	sp,sp,4
 100087c:	f800283a 	ret

01000880 <_ZNKSt14_List_iteratorIP8os_eventEdeEv>:
      _List_iterator(_List_node_base* __x)
      : _M_node(__x) { }

      // Must downcast from List_node_base to _List_node to get to _M_data.
      reference
      operator*() const
 1000880:	defffe04 	addi	sp,sp,-8
 1000884:	df000115 	stw	fp,4(sp)
 1000888:	df000104 	addi	fp,sp,4
 100088c:	e13fff15 	stw	r4,-4(fp)
      { return static_cast<_Node*>(_M_node)->_M_data; }
 1000890:	e0bfff17 	ldw	r2,-4(fp)
 1000894:	10800017 	ldw	r2,0(r2)
 1000898:	10800204 	addi	r2,r2,8
 100089c:	e037883a 	mov	sp,fp
 10008a0:	df000017 	ldw	fp,0(sp)
 10008a4:	dec00104 	addi	sp,sp,4
 10008a8:	f800283a 	ret

010008ac <_ZNSt10_List_baseIP8os_eventSaIS1_EE7_M_initEv>:

      void
      _M_clear();

      void
      _M_init()
 10008ac:	defffe04 	addi	sp,sp,-8
 10008b0:	df000115 	stw	fp,4(sp)
 10008b4:	df000104 	addi	fp,sp,4
 10008b8:	e13fff15 	stw	r4,-4(fp)
      {
        this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 10008bc:	e0ffff17 	ldw	r3,-4(fp)
 10008c0:	e0bfff17 	ldw	r2,-4(fp)
 10008c4:	10c00015 	stw	r3,0(r2)
        this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 10008c8:	e0ffff17 	ldw	r3,-4(fp)
 10008cc:	e0bfff17 	ldw	r2,-4(fp)
 10008d0:	10c00115 	stw	r3,4(r2)
 10008d4:	e037883a 	mov	sp,fp
 10008d8:	df000017 	ldw	fp,0(sp)
 10008dc:	dec00104 	addi	sp,sp,4
 10008e0:	f800283a 	ret

010008e4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEED2Ev>:
 10008e4:	defffe04 	addi	sp,sp,-8
 10008e8:	df000115 	stw	fp,4(sp)
 10008ec:	df000104 	addi	fp,sp,4
 10008f0:	e13fff15 	stw	r4,-4(fp)
 10008f4:	e037883a 	mov	sp,fp
 10008f8:	df000017 	ldw	fp,0(sp)
 10008fc:	dec00104 	addi	sp,sp,4
 1000900:	f800283a 	ret

01000904 <_ZNSaISt10_List_nodeIP8os_eventEED2Ev>:
 1000904:	defffd04 	addi	sp,sp,-12
 1000908:	dfc00215 	stw	ra,8(sp)
 100090c:	df000115 	stw	fp,4(sp)
 1000910:	df000104 	addi	fp,sp,4
 1000914:	e13fff15 	stw	r4,-4(fp)
 1000918:	e13fff17 	ldw	r4,-4(fp)
 100091c:	10008e40 	call	10008e4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEED2Ev>
 1000920:	e037883a 	mov	sp,fp
 1000924:	dfc00117 	ldw	ra,4(sp)
 1000928:	df000017 	ldw	fp,0(sp)
 100092c:	dec00204 	addi	sp,sp,8
 1000930:	f800283a 	ret

01000934 <_ZNSt10_List_baseIP8os_eventSaIS1_EE10_List_implD1Ev>:

      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _List_impl 
      : public _Node_alloc_type
      {
 1000934:	defffd04 	addi	sp,sp,-12
 1000938:	dfc00215 	stw	ra,8(sp)
 100093c:	df000115 	stw	fp,4(sp)
 1000940:	df000104 	addi	fp,sp,4
 1000944:	e13fff15 	stw	r4,-4(fp)
 1000948:	e13fff17 	ldw	r4,-4(fp)
 100094c:	10009040 	call	1000904 <_ZNSaISt10_List_nodeIP8os_eventEED2Ev>
 1000950:	e037883a 	mov	sp,fp
 1000954:	dfc00117 	ldw	ra,4(sp)
 1000958:	df000017 	ldw	fp,0(sp)
 100095c:	dec00204 	addi	sp,sp,8
 1000960:	f800283a 	ret

01000964 <_ZNSaISt10_List_nodeIP8os_eventEED1Ev>:
 1000964:	defffd04 	addi	sp,sp,-12
 1000968:	dfc00215 	stw	ra,8(sp)
 100096c:	df000115 	stw	fp,4(sp)
 1000970:	df000104 	addi	fp,sp,4
 1000974:	e13fff15 	stw	r4,-4(fp)
 1000978:	e13fff17 	ldw	r4,-4(fp)
 100097c:	10008e40 	call	10008e4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEED2Ev>
 1000980:	e037883a 	mov	sp,fp
 1000984:	dfc00117 	ldw	ra,4(sp)
 1000988:	df000017 	ldw	fp,0(sp)
 100098c:	dec00204 	addi	sp,sp,8
 1000990:	f800283a 	ret

01000994 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE7destroyEPS2_>:
      void 
      construct(pointer __p, const _Tp& __val) 
      { ::new(__p) _Tp(__val); }

      void 
      destroy(pointer __p) { __p->~_Tp(); }
 1000994:	defffd04 	addi	sp,sp,-12
 1000998:	df000215 	stw	fp,8(sp)
 100099c:	df000204 	addi	fp,sp,8
 10009a0:	e13ffe15 	stw	r4,-8(fp)
 10009a4:	e17fff15 	stw	r5,-4(fp)
 10009a8:	e037883a 	mov	sp,fp
 10009ac:	df000017 	ldw	fp,0(sp)
 10009b0:	dec00104 	addi	sp,sp,4
 10009b4:	f800283a 	ret

010009b8 <_ZNSt14_List_iteratorIP8os_eventEC1EPSt15_List_node_base>:

      _List_iterator()
      : _M_node() { }

      explicit
      _List_iterator(_List_node_base* __x)
 10009b8:	defffd04 	addi	sp,sp,-12
 10009bc:	df000215 	stw	fp,8(sp)
 10009c0:	df000204 	addi	fp,sp,8
 10009c4:	e13ffe15 	stw	r4,-8(fp)
 10009c8:	e17fff15 	stw	r5,-4(fp)
      : _M_node(__x) { }
 10009cc:	e0fffe17 	ldw	r3,-8(fp)
 10009d0:	e0bfff17 	ldw	r2,-4(fp)
 10009d4:	18800015 	stw	r2,0(r3)
 10009d8:	e037883a 	mov	sp,fp
 10009dc:	df000017 	ldw	fp,0(sp)
 10009e0:	dec00104 	addi	sp,sp,4
 10009e4:	f800283a 	ret

010009e8 <_ZNSt4listIP8os_eventSaIS1_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin()
 10009e8:	defffc04 	addi	sp,sp,-16
 10009ec:	dfc00315 	stw	ra,12(sp)
 10009f0:	df000215 	stw	fp,8(sp)
 10009f4:	df000204 	addi	fp,sp,8
 10009f8:	e13fff15 	stw	r4,-4(fp)
      { return iterator(this->_M_impl._M_node._M_next); }
 10009fc:	e0bfff17 	ldw	r2,-4(fp)
 1000a00:	11400017 	ldw	r5,0(r2)
 1000a04:	e13ffe04 	addi	r4,fp,-8
 1000a08:	10009b80 	call	10009b8 <_ZNSt14_List_iteratorIP8os_eventEC1EPSt15_List_node_base>
 1000a0c:	e0bffe17 	ldw	r2,-8(fp)
 1000a10:	e037883a 	mov	sp,fp
 1000a14:	dfc00117 	ldw	ra,4(sp)
 1000a18:	df000017 	ldw	fp,0(sp)
 1000a1c:	dec00204 	addi	sp,sp,8
 1000a20:	f800283a 	ret

01000a24 <_ZNSt4listIP8os_eventSaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %list.  Iteration is done in ordinary element
       *  order.
       */
      iterator
      end()
 1000a24:	defffc04 	addi	sp,sp,-16
 1000a28:	dfc00315 	stw	ra,12(sp)
 1000a2c:	df000215 	stw	fp,8(sp)
 1000a30:	df000204 	addi	fp,sp,8
 1000a34:	e13fff15 	stw	r4,-4(fp)
      { return iterator(&this->_M_impl._M_node); }
 1000a38:	e17fff17 	ldw	r5,-4(fp)
 1000a3c:	e13ffe04 	addi	r4,fp,-8
 1000a40:	10009b80 	call	10009b8 <_ZNSt14_List_iteratorIP8os_eventEC1EPSt15_List_node_base>
 1000a44:	e0bffe17 	ldw	r2,-8(fp)
 1000a48:	e037883a 	mov	sp,fp
 1000a4c:	dfc00117 	ldw	ra,4(sp)
 1000a50:	df000017 	ldw	fp,0(sp)
 1000a54:	dec00204 	addi	sp,sp,8
 1000a58:	f800283a 	ret

01000a5c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEEC2Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }
 1000a5c:	defffe04 	addi	sp,sp,-8
 1000a60:	df000115 	stw	fp,4(sp)
 1000a64:	df000104 	addi	fp,sp,4
 1000a68:	e13fff15 	stw	r4,-4(fp)
 1000a6c:	e037883a 	mov	sp,fp
 1000a70:	df000017 	ldw	fp,0(sp)
 1000a74:	dec00104 	addi	sp,sp,4
 1000a78:	f800283a 	ret

01000a7c <_ZNSaISt10_List_nodeIP8os_eventEEC1IS1_EERKSaIT_E>:

      allocator(const allocator& __a) throw()
      : __glibcxx_base_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }
 1000a7c:	defffc04 	addi	sp,sp,-16
 1000a80:	dfc00315 	stw	ra,12(sp)
 1000a84:	df000215 	stw	fp,8(sp)
 1000a88:	df000204 	addi	fp,sp,8
 1000a8c:	e13ffe15 	stw	r4,-8(fp)
 1000a90:	e17fff15 	stw	r5,-4(fp)
 1000a94:	e13ffe17 	ldw	r4,-8(fp)
 1000a98:	1000a5c0 	call	1000a5c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEEC2Ev>
 1000a9c:	e037883a 	mov	sp,fp
 1000aa0:	dfc00117 	ldw	ra,4(sp)
 1000aa4:	df000017 	ldw	fp,0(sp)
 1000aa8:	dec00204 	addi	sp,sp,8
 1000aac:	f800283a 	ret

01000ab0 <_ZNSaIP8os_eventEC1ISt10_List_nodeIS0_EEERKSaIT_E>:
 1000ab0:	defffc04 	addi	sp,sp,-16
 1000ab4:	dfc00315 	stw	ra,12(sp)
 1000ab8:	df000215 	stw	fp,8(sp)
 1000abc:	df000204 	addi	fp,sp,8
 1000ac0:	e13ffe15 	stw	r4,-8(fp)
 1000ac4:	e17fff15 	stw	r5,-4(fp)
 1000ac8:	e13ffe17 	ldw	r4,-8(fp)
 1000acc:	10007700 	call	1000770 <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev>
 1000ad0:	e037883a 	mov	sp,fp
 1000ad4:	dfc00117 	ldw	ra,4(sp)
 1000ad8:	df000017 	ldw	fp,0(sp)
 1000adc:	dec00204 	addi	sp,sp,8
 1000ae0:	f800283a 	ret

01000ae4 <_ZNKSt10_List_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>:
      
  public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type
      _M_get_Tp_allocator() const
 1000ae4:	defffc04 	addi	sp,sp,-16
 1000ae8:	dfc00315 	stw	ra,12(sp)
 1000aec:	df000215 	stw	fp,8(sp)
 1000af0:	dc000115 	stw	r16,4(sp)
 1000af4:	df000104 	addi	fp,sp,4
 1000af8:	2021883a 	mov	r16,r4
 1000afc:	e17fff15 	stw	r5,-4(fp)
      { return *static_cast<const _Node_alloc_type*>(&this->_M_impl); }
 1000b00:	8009883a 	mov	r4,r16
 1000b04:	e0bfff17 	ldw	r2,-4(fp)
 1000b08:	100b883a 	mov	r5,r2
 1000b0c:	1000ab00 	call	1000ab0 <_ZNSaIP8os_eventEC1ISt10_List_nodeIS0_EEERKSaIT_E>
 1000b10:	8005883a 	mov	r2,r16
 1000b14:	e037883a 	mov	sp,fp
 1000b18:	dfc00217 	ldw	ra,8(sp)
 1000b1c:	df000117 	ldw	fp,4(sp)
 1000b20:	dc000017 	ldw	r16,0(sp)
 1000b24:	dec00304 	addi	sp,sp,12
 1000b28:	f800283a 	ret

01000b2c <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_>:
      { return size_t(-1) / sizeof(_Tp); }

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
 1000b2c:	defffa04 	addi	sp,sp,-24
 1000b30:	dfc00515 	stw	ra,20(sp)
 1000b34:	df000415 	stw	fp,16(sp)
 1000b38:	df000404 	addi	fp,sp,16
 1000b3c:	e13ffc15 	stw	r4,-16(fp)
 1000b40:	e17ffd15 	stw	r5,-12(fp)
 1000b44:	e1bffe15 	stw	r6,-8(fp)
      { ::new(__p) _Tp(__val); }
 1000b48:	01000104 	movi	r4,4
 1000b4c:	e17ffd17 	ldw	r5,-12(fp)
 1000b50:	10007480 	call	1000748 <_ZnwmPv>
 1000b54:	e0bfff15 	stw	r2,-4(fp)
 1000b58:	e0ffff17 	ldw	r3,-4(fp)
 1000b5c:	1805003a 	cmpeq	r2,r3,zero
 1000b60:	1000041e 	bne	r2,zero,1000b74 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_+0x48>
 1000b64:	e0bffe17 	ldw	r2,-8(fp)
 1000b68:	10800017 	ldw	r2,0(r2)
 1000b6c:	e0ffff17 	ldw	r3,-4(fp)
 1000b70:	18800015 	stw	r2,0(r3)
 1000b74:	e037883a 	mov	sp,fp
 1000b78:	dfc00117 	ldw	ra,4(sp)
 1000b7c:	df000017 	ldw	fp,0(sp)
 1000b80:	dec00204 	addi	sp,sp,8
 1000b84:	f800283a 	ret

01000b88 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEEC2ERKS5_>:
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }
 1000b88:	defffd04 	addi	sp,sp,-12
 1000b8c:	df000215 	stw	fp,8(sp)
 1000b90:	df000204 	addi	fp,sp,8
 1000b94:	e13ffe15 	stw	r4,-8(fp)
 1000b98:	e17fff15 	stw	r5,-4(fp)
 1000b9c:	e037883a 	mov	sp,fp
 1000ba0:	df000017 	ldw	fp,0(sp)
 1000ba4:	dec00104 	addi	sp,sp,4
 1000ba8:	f800283a 	ret

01000bac <_ZNSaISt10_List_nodeIP8os_eventEEC2ERKS3_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
 1000bac:	defffc04 	addi	sp,sp,-16
 1000bb0:	dfc00315 	stw	ra,12(sp)
 1000bb4:	df000215 	stw	fp,8(sp)
 1000bb8:	df000204 	addi	fp,sp,8
 1000bbc:	e13ffe15 	stw	r4,-8(fp)
 1000bc0:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
 1000bc4:	e13ffe17 	ldw	r4,-8(fp)
 1000bc8:	e17fff17 	ldw	r5,-4(fp)
 1000bcc:	1000b880 	call	1000b88 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEEC2ERKS5_>
 1000bd0:	e037883a 	mov	sp,fp
 1000bd4:	dfc00117 	ldw	ra,4(sp)
 1000bd8:	df000017 	ldw	fp,0(sp)
 1000bdc:	dec00204 	addi	sp,sp,8
 1000be0:	f800283a 	ret

01000be4 <_ZNSt10_List_baseIP8os_eventSaIS1_EE10_List_implC1ERKSaISt10_List_nodeIS1_EE>:
      struct _List_impl 
      : public _Node_alloc_type
      {
	_List_node_base _M_node;

	_List_impl(const _Node_alloc_type& __a)
 1000be4:	defffc04 	addi	sp,sp,-16
 1000be8:	dfc00315 	stw	ra,12(sp)
 1000bec:	df000215 	stw	fp,8(sp)
 1000bf0:	df000204 	addi	fp,sp,8
 1000bf4:	e13ffe15 	stw	r4,-8(fp)
 1000bf8:	e17fff15 	stw	r5,-4(fp)
	: _Node_alloc_type(__a), _M_node()
 1000bfc:	e13ffe17 	ldw	r4,-8(fp)
 1000c00:	e17fff17 	ldw	r5,-4(fp)
 1000c04:	1000bac0 	call	1000bac <_ZNSaISt10_List_nodeIP8os_eventEEC2ERKS3_>
 1000c08:	e13ffe17 	ldw	r4,-8(fp)
 1000c0c:	0005883a 	mov	r2,zero
 1000c10:	0007883a 	mov	r3,zero
 1000c14:	20800015 	stw	r2,0(r4)
 1000c18:	20c00115 	stw	r3,4(r4)
	{ }
 1000c1c:	e037883a 	mov	sp,fp
 1000c20:	dfc00117 	ldw	ra,4(sp)
 1000c24:	df000017 	ldw	fp,0(sp)
 1000c28:	dec00204 	addi	sp,sp,8
 1000c2c:	f800283a 	ret

01000c30 <_ZNSt10_List_baseIP8os_eventSaIS1_EEC2ERKS2_>:

      allocator_type
      get_allocator() const
      { return _M_get_Tp_allocator(); }

      _List_base(const allocator_type& __a)
 1000c30:	defffa04 	addi	sp,sp,-24
 1000c34:	dfc00515 	stw	ra,20(sp)
 1000c38:	df000415 	stw	fp,16(sp)
 1000c3c:	dc000315 	stw	r16,12(sp)
 1000c40:	df000304 	addi	fp,sp,12
 1000c44:	e13ffe15 	stw	r4,-8(fp)
 1000c48:	e17fff15 	stw	r5,-4(fp)
      : _M_impl(__a)
 1000c4c:	e43ffe17 	ldw	r16,-8(fp)
 1000c50:	e13ffd04 	addi	r4,fp,-12
 1000c54:	e17fff17 	ldw	r5,-4(fp)
 1000c58:	1000a7c0 	call	1000a7c <_ZNSaISt10_List_nodeIP8os_eventEEC1IS1_EERKSaIT_E>
 1000c5c:	8009883a 	mov	r4,r16
 1000c60:	e17ffd04 	addi	r5,fp,-12
 1000c64:	1000be40 	call	1000be4 <_ZNSt10_List_baseIP8os_eventSaIS1_EE10_List_implC1ERKSaISt10_List_nodeIS1_EE>
 1000c68:	e13ffd04 	addi	r4,fp,-12
 1000c6c:	10009640 	call	1000964 <_ZNSaISt10_List_nodeIP8os_eventEED1Ev>
      { _M_init(); }
 1000c70:	e13ffe17 	ldw	r4,-8(fp)
 1000c74:	10008ac0 	call	10008ac <_ZNSt10_List_baseIP8os_eventSaIS1_EE7_M_initEv>
 1000c78:	e037883a 	mov	sp,fp
 1000c7c:	dfc00217 	ldw	ra,8(sp)
 1000c80:	df000117 	ldw	fp,4(sp)
 1000c84:	dc000017 	ldw	r16,0(sp)
 1000c88:	dec00304 	addi	sp,sp,12
 1000c8c:	f800283a 	ret

01000c90 <_ZNSt4listIP8os_eventSaIS1_EEC1ERKS2_>:
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      explicit
      list(const allocator_type& __a = allocator_type())
 1000c90:	defffc04 	addi	sp,sp,-16
 1000c94:	dfc00315 	stw	ra,12(sp)
 1000c98:	df000215 	stw	fp,8(sp)
 1000c9c:	df000204 	addi	fp,sp,8
 1000ca0:	e13ffe15 	stw	r4,-8(fp)
 1000ca4:	e17fff15 	stw	r5,-4(fp)
      : _Base(__a) { }
 1000ca8:	e13ffe17 	ldw	r4,-8(fp)
 1000cac:	e17fff17 	ldw	r5,-4(fp)
 1000cb0:	1000c300 	call	1000c30 <_ZNSt10_List_baseIP8os_eventSaIS1_EEC2ERKS2_>
 1000cb4:	e037883a 	mov	sp,fp
 1000cb8:	dfc00117 	ldw	ra,4(sp)
 1000cbc:	df000017 	ldw	fp,0(sp)
 1000cc0:	dec00204 	addi	sp,sp,8
 1000cc4:	f800283a 	ret

01000cc8 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw() 
 1000cc8:	defffe04 	addi	sp,sp,-8
 1000ccc:	df000115 	stw	fp,4(sp)
 1000cd0:	df000104 	addi	fp,sp,4
 1000cd4:	e13fff15 	stw	r4,-4(fp)
      { return size_t(-1) / sizeof(_Tp); }
 1000cd8:	00855574 	movhi	r2,5461
 1000cdc:	10955544 	addi	r2,r2,21845
 1000ce0:	e037883a 	mov	sp,fp
 1000ce4:	df000017 	ldw	fp,0(sp)
 1000ce8:	dec00104 	addi	sp,sp,4
 1000cec:	f800283a 	ret

01000cf0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE10deallocateEPS4_m>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 1000cf0:	defffb04 	addi	sp,sp,-20
 1000cf4:	dfc00415 	stw	ra,16(sp)
 1000cf8:	df000315 	stw	fp,12(sp)
 1000cfc:	df000304 	addi	fp,sp,12
 1000d00:	e13ffd15 	stw	r4,-12(fp)
 1000d04:	e17ffe15 	stw	r5,-8(fp)
 1000d08:	e1bfff15 	stw	r6,-4(fp)
      { ::operator delete(__p); }
 1000d0c:	e13ffe17 	ldw	r4,-8(fp)
 1000d10:	1008aa40 	call	1008aa4 <_ZdlPv>
 1000d14:	e037883a 	mov	sp,fp
 1000d18:	dfc00117 	ldw	ra,4(sp)
 1000d1c:	df000017 	ldw	fp,0(sp)
 1000d20:	dec00204 	addi	sp,sp,8
 1000d24:	f800283a 	ret

01000d28 <_ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>:
      _List_node<_Tp>*
      _M_get_node()
      { return _M_impl._Node_alloc_type::allocate(1); }
      
      void
      _M_put_node(_List_node<_Tp>* __p)
 1000d28:	defffc04 	addi	sp,sp,-16
 1000d2c:	dfc00315 	stw	ra,12(sp)
 1000d30:	df000215 	stw	fp,8(sp)
 1000d34:	df000204 	addi	fp,sp,8
 1000d38:	e13ffe15 	stw	r4,-8(fp)
 1000d3c:	e17fff15 	stw	r5,-4(fp)
      { _M_impl._Node_alloc_type::deallocate(__p, 1); }
 1000d40:	e0bffe17 	ldw	r2,-8(fp)
 1000d44:	1009883a 	mov	r4,r2
 1000d48:	e17fff17 	ldw	r5,-4(fp)
 1000d4c:	01800044 	movi	r6,1
 1000d50:	1000cf00 	call	1000cf0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE10deallocateEPS4_m>
 1000d54:	e037883a 	mov	sp,fp
 1000d58:	dfc00117 	ldw	ra,4(sp)
 1000d5c:	df000017 	ldw	fp,0(sp)
 1000d60:	dec00204 	addi	sp,sp,8
 1000d64:	f800283a 	ret

01000d68 <_ZNSt4listIP8os_eventSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E>:
        __tmp->hook(__position._M_node);
      }

      // Erases element at position given.
      void
      _M_erase(iterator __position)
 1000d68:	defffa04 	addi	sp,sp,-24
 1000d6c:	dfc00515 	stw	ra,20(sp)
 1000d70:	df000415 	stw	fp,16(sp)
 1000d74:	df000404 	addi	fp,sp,16
 1000d78:	e13ffe15 	stw	r4,-8(fp)
 1000d7c:	e17fff15 	stw	r5,-4(fp)
      {
        __position._M_node->unhook();
 1000d80:	e13fff17 	ldw	r4,-4(fp)
 1000d84:	1002ddc0 	call	1002ddc <_ZNSt15_List_node_base6unhookEv>
        _Node* __n = static_cast<_Node*>(__position._M_node);
 1000d88:	e0bfff17 	ldw	r2,-4(fp)
 1000d8c:	e0bffc15 	stw	r2,-16(fp)
        _M_get_Tp_allocator().destroy(&__n->_M_data);
 1000d90:	e17ffe17 	ldw	r5,-8(fp)
 1000d94:	e13ffd04 	addi	r4,fp,-12
 1000d98:	1000ae40 	call	1000ae4 <_ZNKSt10_List_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>
 1000d9c:	e13ffd04 	addi	r4,fp,-12
 1000da0:	e0bffc17 	ldw	r2,-16(fp)
 1000da4:	11400204 	addi	r5,r2,8
 1000da8:	10009940 	call	1000994 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE7destroyEPS2_>
 1000dac:	e13ffd04 	addi	r4,fp,-12
 1000db0:	10007e00 	call	10007e0 <_ZNSaIP8os_eventED1Ev>
        _M_put_node(__n);
 1000db4:	e13ffe17 	ldw	r4,-8(fp)
 1000db8:	e17ffc17 	ldw	r5,-16(fp)
 1000dbc:	1000d280 	call	1000d28 <_ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>
 1000dc0:	e037883a 	mov	sp,fp
 1000dc4:	dfc00117 	ldw	ra,4(sp)
 1000dc8:	df000017 	ldw	fp,0(sp)
 1000dcc:	dec00204 	addi	sp,sp,8
 1000dd0:	f800283a 	ret

01000dd4 <_ZNSt4listIP8os_eventSaIS1_EE6removeERKS1_>:
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    remove(const value_type& __value)
 1000dd4:	defff904 	addi	sp,sp,-28
 1000dd8:	dfc00615 	stw	ra,24(sp)
 1000ddc:	df000515 	stw	fp,20(sp)
 1000de0:	df000504 	addi	fp,sp,20
 1000de4:	e13ffe15 	stw	r4,-8(fp)
 1000de8:	e17fff15 	stw	r5,-4(fp)
    {
      iterator __first = begin();
 1000dec:	e13ffe17 	ldw	r4,-8(fp)
 1000df0:	10009e80 	call	10009e8 <_ZNSt4listIP8os_eventSaIS1_EE5beginEv>
 1000df4:	e0bffb15 	stw	r2,-20(fp)
      iterator __last = end();
 1000df8:	e13ffe17 	ldw	r4,-8(fp)
 1000dfc:	1000a240 	call	1000a24 <_ZNSt4listIP8os_eventSaIS1_EE3endEv>
 1000e00:	e0bffc15 	stw	r2,-16(fp)
      while (__first != __last)
 1000e04:	00001206 	br	1000e50 <_ZNSt4listIP8os_eventSaIS1_EE6removeERKS1_+0x7c>
	{
	  iterator __next = __first;
 1000e08:	e0bffb17 	ldw	r2,-20(fp)
 1000e0c:	e0bffd15 	stw	r2,-12(fp)
	  ++__next;
 1000e10:	e13ffd04 	addi	r4,fp,-12
 1000e14:	10008480 	call	1000848 <_ZNSt14_List_iteratorIP8os_eventEppEv>
	  if (*__first == __value)
 1000e18:	e13ffb04 	addi	r4,fp,-20
 1000e1c:	10008800 	call	1000880 <_ZNKSt14_List_iteratorIP8os_eventEdeEv>
 1000e20:	10c00017 	ldw	r3,0(r2)
 1000e24:	e0bfff17 	ldw	r2,-4(fp)
 1000e28:	10800017 	ldw	r2,0(r2)
 1000e2c:	1885003a 	cmpeq	r2,r3,r2
 1000e30:	10803fcc 	andi	r2,r2,255
 1000e34:	1005003a 	cmpeq	r2,r2,zero
 1000e38:	1000031e 	bne	r2,zero,1000e48 <_ZNSt4listIP8os_eventSaIS1_EE6removeERKS1_+0x74>
	    _M_erase(__first);
 1000e3c:	e13ffe17 	ldw	r4,-8(fp)
 1000e40:	e17ffb17 	ldw	r5,-20(fp)
 1000e44:	1000d680 	call	1000d68 <_ZNSt4listIP8os_eventSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E>
	  __first = __next;
 1000e48:	e0bffd17 	ldw	r2,-12(fp)
 1000e4c:	e0bffb15 	stw	r2,-20(fp)
    list<_Tp, _Alloc>::
    remove(const value_type& __value)
    {
      iterator __first = begin();
      iterator __last = end();
      while (__first != __last)
 1000e50:	e17ffc04 	addi	r5,fp,-16
 1000e54:	e13ffb04 	addi	r4,fp,-20
 1000e58:	10008100 	call	1000810 <_ZNKSt14_List_iteratorIP8os_eventEneERKS2_>
 1000e5c:	10803fcc 	andi	r2,r2,255
 1000e60:	1004c03a 	cmpne	r2,r2,zero
 1000e64:	103fe81e 	bne	r2,zero,1000e08 <_ZNSt4listIP8os_eventSaIS1_EE6removeERKS1_+0x34>
	{
	  iterator __next = __first;
	  ++__next;
	  if (*__first == __value)
	    _M_erase(__first);
	  __first = __next;
 1000e68:	e037883a 	mov	sp,fp
 1000e6c:	dfc00117 	ldw	ra,4(sp)
 1000e70:	df000017 	ldw	fp,0(sp)
 1000e74:	dec00204 	addi	sp,sp,8
 1000e78:	f800283a 	ret

01000e7c <_ZNSt10_List_baseIP8os_eventSaIS1_EE8_M_clearEv>:
namespace _GLIBCXX_STD
{
  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
    _M_clear()
 1000e7c:	defffa04 	addi	sp,sp,-24
 1000e80:	dfc00515 	stw	ra,20(sp)
 1000e84:	df000415 	stw	fp,16(sp)
 1000e88:	df000404 	addi	fp,sp,16
 1000e8c:	e13fff15 	stw	r4,-4(fp)
    {
      typedef _List_node<_Tp>  _Node;
      _Node* __cur = static_cast<_Node*>(this->_M_impl._M_node._M_next);
 1000e90:	e0bfff17 	ldw	r2,-4(fp)
 1000e94:	10800017 	ldw	r2,0(r2)
 1000e98:	e0bffd15 	stw	r2,-12(fp)
      while (__cur != &this->_M_impl._M_node)
 1000e9c:	00001106 	br	1000ee4 <_ZNSt10_List_baseIP8os_eventSaIS1_EE8_M_clearEv+0x68>
	{
	  _Node* __tmp = __cur;
 1000ea0:	e0bffd17 	ldw	r2,-12(fp)
 1000ea4:	e0bffc15 	stw	r2,-16(fp)
	  __cur = static_cast<_Node*>(__cur->_M_next);
 1000ea8:	e0bffd17 	ldw	r2,-12(fp)
 1000eac:	10800017 	ldw	r2,0(r2)
 1000eb0:	e0bffd15 	stw	r2,-12(fp)
	  _M_get_Tp_allocator().destroy(&__tmp->_M_data);
 1000eb4:	e13ffe04 	addi	r4,fp,-8
 1000eb8:	e17fff17 	ldw	r5,-4(fp)
 1000ebc:	1000ae40 	call	1000ae4 <_ZNKSt10_List_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>
 1000ec0:	e13ffe04 	addi	r4,fp,-8
 1000ec4:	e0bffc17 	ldw	r2,-16(fp)
 1000ec8:	11400204 	addi	r5,r2,8
 1000ecc:	10009940 	call	1000994 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE7destroyEPS2_>
 1000ed0:	e13ffe04 	addi	r4,fp,-8
 1000ed4:	10007e00 	call	10007e0 <_ZNSaIP8os_eventED1Ev>
	  _M_put_node(__tmp);
 1000ed8:	e13fff17 	ldw	r4,-4(fp)
 1000edc:	e17ffc17 	ldw	r5,-16(fp)
 1000ee0:	1000d280 	call	1000d28 <_ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>
    _List_base<_Tp, _Alloc>::
    _M_clear()
    {
      typedef _List_node<_Tp>  _Node;
      _Node* __cur = static_cast<_Node*>(this->_M_impl._M_node._M_next);
      while (__cur != &this->_M_impl._M_node)
 1000ee4:	e0ffff17 	ldw	r3,-4(fp)
 1000ee8:	e0bffd17 	ldw	r2,-12(fp)
 1000eec:	18bfec1e 	bne	r3,r2,1000ea0 <_ZNSt10_List_baseIP8os_eventSaIS1_EE8_M_clearEv+0x24>
	{
	  _Node* __tmp = __cur;
	  __cur = static_cast<_Node*>(__cur->_M_next);
	  _M_get_Tp_allocator().destroy(&__tmp->_M_data);
	  _M_put_node(__tmp);
 1000ef0:	e037883a 	mov	sp,fp
 1000ef4:	dfc00117 	ldw	ra,4(sp)
 1000ef8:	df000017 	ldw	fp,0(sp)
 1000efc:	dec00204 	addi	sp,sp,8
 1000f00:	f800283a 	ret

01000f04 <_ZNSt10_List_baseIP8os_eventSaIS1_EED2Ev>:
      _List_base(const allocator_type& __a)
      : _M_impl(__a)
      { _M_init(); }

      // This is what actually destroys the list.
      ~_List_base()
 1000f04:	defffd04 	addi	sp,sp,-12
 1000f08:	dfc00215 	stw	ra,8(sp)
 1000f0c:	df000115 	stw	fp,4(sp)
 1000f10:	df000104 	addi	fp,sp,4
 1000f14:	e13fff15 	stw	r4,-4(fp)
      { _M_clear(); }
 1000f18:	e13fff17 	ldw	r4,-4(fp)
 1000f1c:	1000e7c0 	call	1000e7c <_ZNSt10_List_baseIP8os_eventSaIS1_EE8_M_clearEv>
 1000f20:	e13fff17 	ldw	r4,-4(fp)
 1000f24:	10009340 	call	1000934 <_ZNSt10_List_baseIP8os_eventSaIS1_EE10_List_implD1Ev>
 1000f28:	e037883a 	mov	sp,fp
 1000f2c:	dfc00117 	ldw	ra,4(sp)
 1000f30:	df000017 	ldw	fp,0(sp)
 1000f34:	dec00204 	addi	sp,sp,8
 1000f38:	f800283a 	ret

01000f3c <_ZNSt4listIP8os_eventSaIS1_EED1Ev>:
   *  iterator's next/previous pointers refer to itself, the %list is
   *  %empty.  @endif
  */
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class list : protected _List_base<_Tp, _Alloc>
    {
 1000f3c:	defffd04 	addi	sp,sp,-12
 1000f40:	dfc00215 	stw	ra,8(sp)
 1000f44:	df000115 	stw	fp,4(sp)
 1000f48:	df000104 	addi	fp,sp,4
 1000f4c:	e13fff15 	stw	r4,-4(fp)
 1000f50:	e13fff17 	ldw	r4,-4(fp)
 1000f54:	1000f040 	call	1000f04 <_ZNSt10_List_baseIP8os_eventSaIS1_EED2Ev>
 1000f58:	e037883a 	mov	sp,fp
 1000f5c:	dfc00117 	ldw	ra,4(sp)
 1000f60:	df000017 	ldw	fp,0(sp)
 1000f64:	dec00204 	addi	sp,sp,8
 1000f68:	f800283a 	ret

01000f6c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8allocateEmPKv>:
      address(const_reference __x) const { return &__x; }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
 1000f6c:	defffb04 	addi	sp,sp,-20
 1000f70:	dfc00415 	stw	ra,16(sp)
 1000f74:	df000315 	stw	fp,12(sp)
 1000f78:	df000304 	addi	fp,sp,12
 1000f7c:	e13ffd15 	stw	r4,-12(fp)
 1000f80:	e17ffe15 	stw	r5,-8(fp)
 1000f84:	e1bfff15 	stw	r6,-4(fp)
      { 
	if (__builtin_expect(__n > this->max_size(), false))
 1000f88:	e13ffd17 	ldw	r4,-12(fp)
 1000f8c:	1000cc80 	call	1000cc8 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8max_sizeEv>
 1000f90:	1007883a 	mov	r3,r2
 1000f94:	e0bffe17 	ldw	r2,-8(fp)
 1000f98:	1885803a 	cmpltu	r2,r3,r2
 1000f9c:	1004c03a 	cmpne	r2,r2,zero
 1000fa0:	10803fcc 	andi	r2,r2,255
 1000fa4:	1005003a 	cmpeq	r2,r2,zero
 1000fa8:	1000011e 	bne	r2,zero,1000fb0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8allocateEmPKv+0x44>
	  std::__throw_bad_alloc();
 1000fac:	10017700 	call	1001770 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 1000fb0:	e0bffe17 	ldw	r2,-8(fp)
 1000fb4:	11000324 	muli	r4,r2,12
 1000fb8:	10090340 	call	1009034 <_Znwm>
 1000fbc:	e037883a 	mov	sp,fp
 1000fc0:	dfc00117 	ldw	ra,4(sp)
 1000fc4:	df000017 	ldw	fp,0(sp)
 1000fc8:	dec00204 	addi	sp,sp,8
 1000fcc:	f800283a 	ret

01000fd0 <_ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_get_nodeEv>:
      };

      _List_impl _M_impl;

      _List_node<_Tp>*
      _M_get_node()
 1000fd0:	defffd04 	addi	sp,sp,-12
 1000fd4:	dfc00215 	stw	ra,8(sp)
 1000fd8:	df000115 	stw	fp,4(sp)
 1000fdc:	df000104 	addi	fp,sp,4
 1000fe0:	e13fff15 	stw	r4,-4(fp)
      { return _M_impl._Node_alloc_type::allocate(1); }
 1000fe4:	e0bfff17 	ldw	r2,-4(fp)
 1000fe8:	1009883a 	mov	r4,r2
 1000fec:	01400044 	movi	r5,1
 1000ff0:	000d883a 	mov	r6,zero
 1000ff4:	1000f6c0 	call	1000f6c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP8os_eventEE8allocateEmPKv>
 1000ff8:	e037883a 	mov	sp,fp
 1000ffc:	dfc00117 	ldw	ra,4(sp)
 1001000:	df000017 	ldw	fp,0(sp)
 1001004:	dec00204 	addi	sp,sp,8
 1001008:	f800283a 	ret

0100100c <_ZNSt4listIP8os_eventSaIS1_EE14_M_create_nodeERKS1_>:
       *
       *  Allocates space for a new node and constructs a copy of @a x in it.
       *  @endif
       */
      _Node*
      _M_create_node(const value_type& __x)
 100100c:	defffa04 	addi	sp,sp,-24
 1001010:	dfc00515 	stw	ra,20(sp)
 1001014:	df000415 	stw	fp,16(sp)
 1001018:	df000404 	addi	fp,sp,16
 100101c:	e13ffe15 	stw	r4,-8(fp)
 1001020:	e17fff15 	stw	r5,-4(fp)
      {
	_Node* __p = this->_M_get_node();
 1001024:	e13ffe17 	ldw	r4,-8(fp)
 1001028:	1000fd00 	call	1000fd0 <_ZNSt10_List_baseIP8os_eventSaIS1_EE11_M_get_nodeEv>
 100102c:	e0bffc15 	stw	r2,-16(fp)
	try
	  {
	    _M_get_Tp_allocator().construct(&__p->_M_data, __x);
 1001030:	e17ffe17 	ldw	r5,-8(fp)
 1001034:	e13ffd04 	addi	r4,fp,-12
 1001038:	1000ae40 	call	1000ae4 <_ZNKSt10_List_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>
 100103c:	e13ffd04 	addi	r4,fp,-12
 1001040:	e0bffc17 	ldw	r2,-16(fp)
 1001044:	11400204 	addi	r5,r2,8
 1001048:	e1bfff17 	ldw	r6,-4(fp)
 100104c:	1000b2c0 	call	1000b2c <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_>
 1001050:	e13ffd04 	addi	r4,fp,-12
 1001054:	10007e00 	call	10007e0 <_ZNSaIP8os_eventED1Ev>
	catch(...)
	  {
	    _M_put_node(__p);
	    __throw_exception_again;
	  }
	return __p;
 1001058:	e0bffc17 	ldw	r2,-16(fp)
 100105c:	e037883a 	mov	sp,fp
 1001060:	dfc00117 	ldw	ra,4(sp)
 1001064:	df000017 	ldw	fp,0(sp)
 1001068:	dec00204 	addi	sp,sp,8
 100106c:	f800283a 	ret

01001070 <_ZNSt4listIP8os_eventSaIS1_EE9_M_insertESt14_List_iteratorIS1_ERKS1_>:
      _M_transfer(iterator __position, iterator __first, iterator __last)
      { __position._M_node->transfer(__first._M_node, __last._M_node); }

      // Inserts new element at position given and with value given.
      void
      _M_insert(iterator __position, const value_type& __x)
 1001070:	defffa04 	addi	sp,sp,-24
 1001074:	dfc00515 	stw	ra,20(sp)
 1001078:	df000415 	stw	fp,16(sp)
 100107c:	df000404 	addi	fp,sp,16
 1001080:	e13ffd15 	stw	r4,-12(fp)
 1001084:	e17ffe15 	stw	r5,-8(fp)
 1001088:	e1bfff15 	stw	r6,-4(fp)
      {
        _Node* __tmp = _M_create_node(__x);
 100108c:	e13ffd17 	ldw	r4,-12(fp)
 1001090:	e17fff17 	ldw	r5,-4(fp)
 1001094:	100100c0 	call	100100c <_ZNSt4listIP8os_eventSaIS1_EE14_M_create_nodeERKS1_>
 1001098:	e0bffc15 	stw	r2,-16(fp)
        __tmp->hook(__position._M_node);
 100109c:	e13ffc17 	ldw	r4,-16(fp)
 10010a0:	e17ffe17 	ldw	r5,-8(fp)
 10010a4:	1002dc00 	call	1002dc0 <_ZNSt15_List_node_base4hookEPS_>
 10010a8:	e037883a 	mov	sp,fp
 10010ac:	dfc00117 	ldw	ra,4(sp)
 10010b0:	df000017 	ldw	fp,0(sp)
 10010b4:	dec00204 	addi	sp,sp,8
 10010b8:	f800283a 	ret

010010bc <_ZNSt4listIP8os_eventSaIS1_EE9push_backERKS1_>:
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
 10010bc:	defffc04 	addi	sp,sp,-16
 10010c0:	dfc00315 	stw	ra,12(sp)
 10010c4:	df000215 	stw	fp,8(sp)
 10010c8:	df000204 	addi	fp,sp,8
 10010cc:	e13ffe15 	stw	r4,-8(fp)
 10010d0:	e17fff15 	stw	r5,-4(fp)
      { this->_M_insert(end(), __x); }
 10010d4:	e13ffe17 	ldw	r4,-8(fp)
 10010d8:	1000a240 	call	1000a24 <_ZNSt4listIP8os_eventSaIS1_EE3endEv>
 10010dc:	100b883a 	mov	r5,r2
 10010e0:	e13ffe17 	ldw	r4,-8(fp)
 10010e4:	e1bfff17 	ldw	r6,-4(fp)
 10010e8:	10010700 	call	1001070 <_ZNSt4listIP8os_eventSaIS1_EE9_M_insertESt14_List_iteratorIS1_ERKS1_>
 10010ec:	e037883a 	mov	sp,fp
 10010f0:	dfc00117 	ldw	ra,4(sp)
 10010f4:	df000017 	ldw	fp,0(sp)
 10010f8:	dec00204 	addi	sp,sp,8
 10010fc:	f800283a 	ret

01001100 <_ZN15InfraredHandler4initEv>:

/*
 * Initializes this handler.
 * @return INFRARED_OK if there are no initialization errors
 */
Status InfraredHandler::init() {
 1001100:	defffc04 	addi	sp,sp,-16
 1001104:	df000315 	stw	fp,12(sp)
 1001108:	df000304 	addi	fp,sp,12
 100110c:	e13ffe15 	stw	r4,-8(fp)
	// Open the ADC.
	alt_up_de0_nano_adc_dev *adc_dev; //= alt_up_de0_nano_adc_open_dev(ADC_NAME);
	if (adc_dev == NULL) {
 1001110:	e0bffd17 	ldw	r2,-12(fp)
 1001114:	1004c03a 	cmpne	r2,r2,zero
 1001118:	1000031e 	bne	r2,zero,1001128 <_ZN15InfraredHandler4initEv+0x28>
		return ERR_INFRARED;
 100111c:	00800044 	movi	r2,1
 1001120:	e0bfff15 	stw	r2,-4(fp)
 1001124:	00000106 	br	100112c <_ZN15InfraredHandler4initEv+0x2c>
	} else {
		return OK;
 1001128:	e03fff15 	stw	zero,-4(fp)
 100112c:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 1001130:	e037883a 	mov	sp,fp
 1001134:	df000017 	ldw	fp,0(sp)
 1001138:	dec00104 	addi	sp,sp,4
 100113c:	f800283a 	ret

01001140 <_ZN15InfraredHandler4readEi>:
}

// RECEIVERS

/* A mock implementation of InfraredHandler::read, for testing. */
unsigned int InfraredHandler::read(int channel) {
 1001140:	defffd04 	addi	sp,sp,-12
 1001144:	df000215 	stw	fp,8(sp)
 1001148:	df000204 	addi	fp,sp,8
 100114c:	e13ffe15 	stw	r4,-8(fp)
 1001150:	e17fff15 	stw	r5,-4(fp)
	return 10;
 1001154:	00800284 	movi	r2,10
}
 1001158:	e037883a 	mov	sp,fp
 100115c:	df000017 	ldw	fp,0(sp)
 1001160:	dec00104 	addi	sp,sp,4
 1001164:	f800283a 	ret

01001168 <_ZN15InfraredHandler17onInfraredReceiveEj>:
/*
 * Posts the given infrared level readings to all listener queues.
 * @param level - the level read by the infrared receivers
 * @return OK if the readings are posted to all listener queues without error
 */
Status InfraredHandler::onInfraredReceive(unsigned int level) {
 1001168:	defff804 	addi	sp,sp,-32
 100116c:	dfc00715 	stw	ra,28(sp)
 1001170:	df000615 	stw	fp,24(sp)
 1001174:	df000604 	addi	fp,sp,24
 1001178:	e13ffe15 	stw	r4,-8(fp)
 100117c:	e17fff15 	stw	r5,-4(fp)
	Status overall = OK;
 1001180:	e03ffb15 	stw	zero,-20(fp)
	INT8U status;
	for (list<OS_EVENT *>::iterator it = listeners.begin(); it != listeners.end(); ++it) {
 1001184:	e0bffe17 	ldw	r2,-8(fp)
 1001188:	11000104 	addi	r4,r2,4
 100118c:	10009e80 	call	10009e8 <_ZNSt4listIP8os_eventSaIS1_EE5beginEv>
 1001190:	e0bffd15 	stw	r2,-12(fp)
 1001194:	00000d06 	br	10011cc <_ZN15InfraredHandler17onInfraredReceiveEj+0x64>
		status = OSQPost(*it, (void*)level);
 1001198:	e13ffd04 	addi	r4,fp,-12
 100119c:	10008800 	call	1000880 <_ZNKSt14_List_iteratorIP8os_eventEdeEv>
 10011a0:	11000017 	ldw	r4,0(r2)
 10011a4:	e17fff17 	ldw	r5,-4(fp)
 10011a8:	10191300 	call	1019130 <OSQPost>
 10011ac:	e0bffa05 	stb	r2,-24(fp)
		if (status != OS_NO_ERR) overall = ERR_INFRARED;
 10011b0:	e0bffa03 	ldbu	r2,-24(fp)
 10011b4:	1005003a 	cmpeq	r2,r2,zero
 10011b8:	1000021e 	bne	r2,zero,10011c4 <_ZN15InfraredHandler17onInfraredReceiveEj+0x5c>
 10011bc:	00800044 	movi	r2,1
 10011c0:	e0bffb15 	stw	r2,-20(fp)
 * @return OK if the readings are posted to all listener queues without error
 */
Status InfraredHandler::onInfraredReceive(unsigned int level) {
	Status overall = OK;
	INT8U status;
	for (list<OS_EVENT *>::iterator it = listeners.begin(); it != listeners.end(); ++it) {
 10011c4:	e13ffd04 	addi	r4,fp,-12
 10011c8:	10008480 	call	1000848 <_ZNSt14_List_iteratorIP8os_eventEppEv>
 10011cc:	e0bffe17 	ldw	r2,-8(fp)
 10011d0:	11000104 	addi	r4,r2,4
 10011d4:	1000a240 	call	1000a24 <_ZNSt4listIP8os_eventSaIS1_EE3endEv>
 10011d8:	e0bffc15 	stw	r2,-16(fp)
 10011dc:	e13ffd04 	addi	r4,fp,-12
 10011e0:	e17ffc04 	addi	r5,fp,-16
 10011e4:	10008100 	call	1000810 <_ZNKSt14_List_iteratorIP8os_eventEneERKS2_>
 10011e8:	10803fcc 	andi	r2,r2,255
 10011ec:	1004c03a 	cmpne	r2,r2,zero
 10011f0:	103fe91e 	bne	r2,zero,1001198 <_ZN15InfraredHandler17onInfraredReceiveEj+0x30>
		status = OSQPost(*it, (void*)level);
		if (status != OS_NO_ERR) overall = ERR_INFRARED;
	} return overall;
 10011f4:	e0bffb17 	ldw	r2,-20(fp)
}
 10011f8:	e037883a 	mov	sp,fp
 10011fc:	dfc00117 	ldw	ra,4(sp)
 1001200:	df000017 	ldw	fp,0(sp)
 1001204:	dec00204 	addi	sp,sp,8
 1001208:	f800283a 	ret

0100120c <_ZN15InfraredHandler6updateEv>:

/*
 * Updates the infrared readings by checking all receivers.
 * @return OK if the infrared readings are accepted by all listeners
 */
Status InfraredHandler::update() {
 100120c:	defffd04 	addi	sp,sp,-12
 1001210:	dfc00215 	stw	ra,8(sp)
 1001214:	df000115 	stw	fp,4(sp)
 1001218:	df000104 	addi	fp,sp,4
 100121c:	e13fff15 	stw	r4,-4(fp)
	return onInfraredReceive(read(1));
 1001220:	e13fff17 	ldw	r4,-4(fp)
 1001224:	01400044 	movi	r5,1
 1001228:	10011400 	call	1001140 <_ZN15InfraredHandler4readEi>
 100122c:	100b883a 	mov	r5,r2
 1001230:	e13fff17 	ldw	r4,-4(fp)
 1001234:	10011680 	call	1001168 <_ZN15InfraredHandler17onInfraredReceiveEj>
}
 1001238:	e037883a 	mov	sp,fp
 100123c:	dfc00117 	ldw	ra,4(sp)
 1001240:	df000017 	ldw	fp,0(sp)
 1001244:	dec00204 	addi	sp,sp,8
 1001248:	f800283a 	ret

0100124c <_ZN15InfraredHandlerD0Ev>:

#include "InfraredHandler.h"

// ALLOCATION
InfraredHandler::InfraredHandler() {}
InfraredHandler::~InfraredHandler() {}
 100124c:	defffd04 	addi	sp,sp,-12
 1001250:	dfc00215 	stw	ra,8(sp)
 1001254:	df000115 	stw	fp,4(sp)
 1001258:	df000104 	addi	fp,sp,4
 100125c:	e13fff15 	stw	r4,-4(fp)
 1001260:	00c040b4 	movhi	r3,258
 1001264:	18fb8f04 	addi	r3,r3,-4548
 1001268:	e0bfff17 	ldw	r2,-4(fp)
 100126c:	10c00015 	stw	r3,0(r2)
 1001270:	e13fff17 	ldw	r4,-4(fp)
 1001274:	10006b00 	call	10006b0 <_ZN10DataSourceD2Ev>
 1001278:	00800044 	movi	r2,1
 100127c:	10803fcc 	andi	r2,r2,255
 1001280:	1005003a 	cmpeq	r2,r2,zero
 1001284:	1000021e 	bne	r2,zero,1001290 <_ZN15InfraredHandlerD0Ev+0x44>
 1001288:	e13fff17 	ldw	r4,-4(fp)
 100128c:	1008aa40 	call	1008aa4 <_ZdlPv>
 1001290:	e037883a 	mov	sp,fp
 1001294:	dfc00117 	ldw	ra,4(sp)
 1001298:	df000017 	ldw	fp,0(sp)
 100129c:	dec00204 	addi	sp,sp,8
 10012a0:	f800283a 	ret

010012a4 <_ZN15InfraredHandlerD1Ev>:
 10012a4:	defffd04 	addi	sp,sp,-12
 10012a8:	dfc00215 	stw	ra,8(sp)
 10012ac:	df000115 	stw	fp,4(sp)
 10012b0:	df000104 	addi	fp,sp,4
 10012b4:	e13fff15 	stw	r4,-4(fp)
 10012b8:	00c040b4 	movhi	r3,258
 10012bc:	18fb8f04 	addi	r3,r3,-4548
 10012c0:	e0bfff17 	ldw	r2,-4(fp)
 10012c4:	10c00015 	stw	r3,0(r2)
 10012c8:	e13fff17 	ldw	r4,-4(fp)
 10012cc:	10006b00 	call	10006b0 <_ZN10DataSourceD2Ev>
 10012d0:	0005883a 	mov	r2,zero
 10012d4:	10803fcc 	andi	r2,r2,255
 10012d8:	1005003a 	cmpeq	r2,r2,zero
 10012dc:	1000021e 	bne	r2,zero,10012e8 <_ZN15InfraredHandlerD1Ev+0x44>
 10012e0:	e13fff17 	ldw	r4,-4(fp)
 10012e4:	1008aa40 	call	1008aa4 <_ZdlPv>
 10012e8:	e037883a 	mov	sp,fp
 10012ec:	dfc00117 	ldw	ra,4(sp)
 10012f0:	df000017 	ldw	fp,0(sp)
 10012f4:	dec00204 	addi	sp,sp,8
 10012f8:	f800283a 	ret

010012fc <_ZN15InfraredHandlerD2Ev>:
 10012fc:	defffd04 	addi	sp,sp,-12
 1001300:	dfc00215 	stw	ra,8(sp)
 1001304:	df000115 	stw	fp,4(sp)
 1001308:	df000104 	addi	fp,sp,4
 100130c:	e13fff15 	stw	r4,-4(fp)
 1001310:	00c040b4 	movhi	r3,258
 1001314:	18fb8f04 	addi	r3,r3,-4548
 1001318:	e0bfff17 	ldw	r2,-4(fp)
 100131c:	10c00015 	stw	r3,0(r2)
 1001320:	e13fff17 	ldw	r4,-4(fp)
 1001324:	10006b00 	call	10006b0 <_ZN10DataSourceD2Ev>
 1001328:	0005883a 	mov	r2,zero
 100132c:	10803fcc 	andi	r2,r2,255
 1001330:	1005003a 	cmpeq	r2,r2,zero
 1001334:	1000021e 	bne	r2,zero,1001340 <_ZN15InfraredHandlerD2Ev+0x44>
 1001338:	e13fff17 	ldw	r4,-4(fp)
 100133c:	1008aa40 	call	1008aa4 <_ZdlPv>
 1001340:	e037883a 	mov	sp,fp
 1001344:	dfc00117 	ldw	ra,4(sp)
 1001348:	df000017 	ldw	fp,0(sp)
 100134c:	dec00204 	addi	sp,sp,8
 1001350:	f800283a 	ret

01001354 <_ZN15InfraredHandlerC1Ev>:
#include <stdio.h>

#include "InfraredHandler.h"

// ALLOCATION
InfraredHandler::InfraredHandler() {}
 1001354:	defffd04 	addi	sp,sp,-12
 1001358:	dfc00215 	stw	ra,8(sp)
 100135c:	df000115 	stw	fp,4(sp)
 1001360:	df000104 	addi	fp,sp,4
 1001364:	e13fff15 	stw	r4,-4(fp)
 1001368:	e13fff17 	ldw	r4,-4(fp)
 100136c:	10005580 	call	1000558 <_ZN10DataSourceC2Ev>
 1001370:	00c040b4 	movhi	r3,258
 1001374:	18fb8f04 	addi	r3,r3,-4548
 1001378:	e0bfff17 	ldw	r2,-4(fp)
 100137c:	10c00015 	stw	r3,0(r2)
 1001380:	e037883a 	mov	sp,fp
 1001384:	dfc00117 	ldw	ra,4(sp)
 1001388:	df000017 	ldw	fp,0(sp)
 100138c:	dec00204 	addi	sp,sp,8
 1001390:	f800283a 	ret

01001394 <_ZN15InfraredHandlerC2Ev>:
 1001394:	defffd04 	addi	sp,sp,-12
 1001398:	dfc00215 	stw	ra,8(sp)
 100139c:	df000115 	stw	fp,4(sp)
 10013a0:	df000104 	addi	fp,sp,4
 10013a4:	e13fff15 	stw	r4,-4(fp)
 10013a8:	e13fff17 	ldw	r4,-4(fp)
 10013ac:	10005580 	call	1000558 <_ZN10DataSourceC2Ev>
 10013b0:	00c040b4 	movhi	r3,258
 10013b4:	18fb8f04 	addi	r3,r3,-4548
 10013b8:	e0bfff17 	ldw	r2,-4(fp)
 10013bc:	10c00015 	stw	r3,0(r2)
 10013c0:	e037883a 	mov	sp,fp
 10013c4:	dfc00117 	ldw	ra,4(sp)
 10013c8:	df000017 	ldw	fp,0(sp)
 10013cc:	dec00204 	addi	sp,sp,8
 10013d0:	f800283a 	ret

010013d4 <_Z18infrared_read_taskPv>:
#include "InfraredTasks.h"

extern InfraredHandler *infrared;

/* Polls the infrared handler for infrared updates. */
void infrared_read_task(void* pdata) {
 10013d4:	defffc04 	addi	sp,sp,-16
 10013d8:	dfc00315 	stw	ra,12(sp)
 10013dc:	df000215 	stw	fp,8(sp)
 10013e0:	df000204 	addi	fp,sp,8
 10013e4:	e13fff15 	stw	r4,-4(fp)
	int status = OK;
 10013e8:	e03ffe15 	stw	zero,-8(fp)
	while (status == OK) {
 10013ec:	00000a06 	br	1001418 <_Z18infrared_read_taskPv+0x44>
		// Update the infrared handler.
		status = infrared->update();
 10013f0:	008040b4 	movhi	r2,258
 10013f4:	108ba904 	addi	r2,r2,11940
 10013f8:	11000017 	ldw	r4,0(r2)
 10013fc:	100120c0 	call	100120c <_ZN15InfraredHandler6updateEv>
 1001400:	e0bffe15 	stw	r2,-8(fp)
		// Wait for 500 ms.
		OSTimeDlyHMSM(0, 0, 0, 500);
 1001404:	0009883a 	mov	r4,zero
 1001408:	000b883a 	mov	r5,zero
 100140c:	000d883a 	mov	r6,zero
 1001410:	01c07d04 	movi	r7,500
 1001414:	101bfec0 	call	101bfec <OSTimeDlyHMSM>
extern InfraredHandler *infrared;

/* Polls the infrared handler for infrared updates. */
void infrared_read_task(void* pdata) {
	int status = OK;
	while (status == OK) {
 1001418:	e0bffe17 	ldw	r2,-8(fp)
 100141c:	1005003a 	cmpeq	r2,r2,zero
 1001420:	103ff31e 	bne	r2,zero,10013f0 <_Z18infrared_read_taskPv+0x1c>
		// Update the infrared handler.
		status = infrared->update();
		// Wait for 500 ms.
		OSTimeDlyHMSM(0, 0, 0, 500);
	}
}
 1001424:	e037883a 	mov	sp,fp
 1001428:	dfc00117 	ldw	ra,4(sp)
 100142c:	df000017 	ldw	fp,0(sp)
 1001430:	dec00204 	addi	sp,sp,8
 1001434:	f800283a 	ret

01001438 <_Z41__static_initialization_and_destruction_0ii>:
		// Start.
		OSStart();
	}

	return 0;
}
 1001438:	deffe204 	addi	sp,sp,-120
 100143c:	dfc01d15 	stw	ra,116(sp)
 1001440:	df001c15 	stw	fp,112(sp)
 1001444:	ddc01b15 	stw	r23,108(sp)
 1001448:	dd801a15 	stw	r22,104(sp)
 100144c:	dd401915 	stw	r21,100(sp)
 1001450:	dd001815 	stw	r20,96(sp)
 1001454:	dcc01715 	stw	r19,92(sp)
 1001458:	dc801615 	stw	r18,88(sp)
 100145c:	dc401515 	stw	r17,84(sp)
 1001460:	dc001415 	stw	r16,80(sp)
 1001464:	df001404 	addi	fp,sp,80
 1001468:	e13fec15 	stw	r4,-80(fp)
 100146c:	e17fed15 	stw	r5,-76(fp)
 1001470:	00804074 	movhi	r2,257
 1001474:	10a0b504 	addi	r2,r2,-32044
 1001478:	e0bff415 	stw	r2,-48(fp)
 100147c:	008040b4 	movhi	r2,258
 1001480:	10babd04 	addi	r2,r2,-5388
 1001484:	e0bff515 	stw	r2,-44(fp)
 1001488:	e0bff604 	addi	r2,fp,-40
 100148c:	e0ffec04 	addi	r3,fp,-80
 1001490:	10c00015 	stw	r3,0(r2)
 1001494:	00c04034 	movhi	r3,256
 1001498:	18c55304 	addi	r3,r3,5452
 100149c:	10c00115 	stw	r3,4(r2)
 10014a0:	16c00215 	stw	sp,8(r2)
 10014a4:	e13fee04 	addi	r4,fp,-72
 10014a8:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 10014ac:	e0bfec17 	ldw	r2,-80(fp)
 10014b0:	10800058 	cmpnei	r2,r2,1
 10014b4:	1000351e 	bne	r2,zero,100158c <_Z41__static_initialization_and_destruction_0ii+0x154>
 10014b8:	e0ffed17 	ldw	r3,-76(fp)
 10014bc:	00bfffd4 	movui	r2,65535
 10014c0:	1880321e 	bne	r3,r2,100158c <_Z41__static_initialization_and_destruction_0ii+0x154>
#include "includes.h"

#include "Tasks.h"

/* Command handler. */
CommandHandler *command = new CommandHandler();
 10014c4:	00bfffc4 	movi	r2,-1
 10014c8:	e0bfef15 	stw	r2,-68(fp)
 10014cc:	01000604 	movi	r4,24
 10014d0:	10090340 	call	1009034 <_Znwm>
 10014d4:	e0bffe15 	stw	r2,-8(fp)
 10014d8:	00800084 	movi	r2,2
 10014dc:	e0bfef15 	stw	r2,-68(fp)
 10014e0:	e13ffe17 	ldw	r4,-8(fp)
 10014e4:	10002380 	call	1000238 <_ZN14CommandHandlerC1Ev>
 10014e8:	e0bffe17 	ldw	r2,-8(fp)
 10014ec:	d0a70f15 	stw	r2,-25540(gp)
InfraredHandler *infrared = new InfraredHandler();
 10014f0:	00bfffc4 	movi	r2,-1
 10014f4:	e0bfef15 	stw	r2,-68(fp)
 10014f8:	01000404 	movi	r4,16
 10014fc:	10090340 	call	1009034 <_Znwm>
 1001500:	e0bffd15 	stw	r2,-12(fp)
 1001504:	00800044 	movi	r2,1
 1001508:	e0bfef15 	stw	r2,-68(fp)
 100150c:	e13ffd17 	ldw	r4,-12(fp)
 1001510:	10013540 	call	1001354 <_ZN15InfraredHandlerC1Ev>
 1001514:	00000a06 	br	1001540 <_Z41__static_initialization_and_destruction_0ii+0x108>
 1001518:	e0ffff17 	ldw	r3,-4(fp)
 100151c:	e0fffc15 	stw	r3,-16(fp)
#include "includes.h"

#include "Tasks.h"

/* Command handler. */
CommandHandler *command = new CommandHandler();
 1001520:	e13ffe17 	ldw	r4,-8(fp)
 1001524:	1008aa40 	call	1008aa4 <_ZdlPv>
 1001528:	e0bffc17 	ldw	r2,-16(fp)
 100152c:	e0bfff15 	stw	r2,-4(fp)
 1001530:	00bfffc4 	movi	r2,-1
 1001534:	e0bfef15 	stw	r2,-68(fp)
 1001538:	e13fff17 	ldw	r4,-4(fp)
 100153c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
InfraredHandler *infrared = new InfraredHandler();
 1001540:	e0fffd17 	ldw	r3,-12(fp)
 1001544:	d0e71015 	stw	r3,-25536(gp)
 1001548:	00001006 	br	100158c <_Z41__static_initialization_and_destruction_0ii+0x154>
 100154c:	e7001404 	addi	fp,fp,80
 1001550:	e0bfef17 	ldw	r2,-68(fp)
 1001554:	e0fff017 	ldw	r3,-64(fp)
 1001558:	e0ffff15 	stw	r3,-4(fp)
 100155c:	10800060 	cmpeqi	r2,r2,1
 1001560:	103fed1e 	bne	r2,zero,1001518 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 1001564:	e0bfff17 	ldw	r2,-4(fp)
 1001568:	e0bffb15 	stw	r2,-20(fp)
 100156c:	e13ffd17 	ldw	r4,-12(fp)
 1001570:	1008aa40 	call	1008aa4 <_ZdlPv>
 1001574:	e0fffb17 	ldw	r3,-20(fp)
 1001578:	e0ffff15 	stw	r3,-4(fp)
 100157c:	00bfffc4 	movi	r2,-1
 1001580:	e0bfef15 	stw	r2,-68(fp)
 1001584:	e13fff17 	ldw	r4,-4(fp)
 1001588:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 100158c:	e13fee04 	addi	r4,fp,-72
 1001590:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
		// Start.
		OSStart();
	}

	return 0;
}
 1001594:	e037883a 	mov	sp,fp
 1001598:	dfc00917 	ldw	ra,36(sp)
 100159c:	df000817 	ldw	fp,32(sp)
 10015a0:	ddc00717 	ldw	r23,28(sp)
 10015a4:	dd800617 	ldw	r22,24(sp)
 10015a8:	dd400517 	ldw	r21,20(sp)
 10015ac:	dd000417 	ldw	r20,16(sp)
 10015b0:	dcc00317 	ldw	r19,12(sp)
 10015b4:	dc800217 	ldw	r18,8(sp)
 10015b8:	dc400117 	ldw	r17,4(sp)
 10015bc:	dc000017 	ldw	r16,0(sp)
 10015c0:	dec00a04 	addi	sp,sp,40
 10015c4:	f800283a 	ret

010015c8 <_GLOBAL__I_command_check_infrared_task_stk>:

 10015c8:	defffe04 	addi	sp,sp,-8
 10015cc:	dfc00115 	stw	ra,4(sp)
 10015d0:	df000015 	stw	fp,0(sp)
 10015d4:	d839883a 	mov	fp,sp
 10015d8:	01000044 	movi	r4,1
 10015dc:	017fffd4 	movui	r5,65535
 10015e0:	10014380 	call	1001438 <_Z41__static_initialization_and_destruction_0ii>
 10015e4:	e037883a 	mov	sp,fp
 10015e8:	dfc00117 	ldw	ra,4(sp)
 10015ec:	df000017 	ldw	fp,0(sp)
 10015f0:	dec00204 	addi	sp,sp,8
 10015f4:	f800283a 	ret

010015f8 <main>:
/* Command handler. */
CommandHandler *command = new CommandHandler();
InfraredHandler *infrared = new InfraredHandler();

/* The main function creates the command and infrared tasks and starts multi-tasking */
int main(void) {
 10015f8:	defff704 	addi	sp,sp,-36
 10015fc:	dfc00815 	stw	ra,32(sp)
 1001600:	df000715 	stw	fp,28(sp)
 1001604:	dc000615 	stw	r16,24(sp)
 1001608:	df000604 	addi	fp,sp,24
			INFRARED_READ_TASK_PRIORITY,
			INFRARED_READ_TASK_PRIORITY,
			infrared_read_task_stk,
			TASK_STACKSIZE,
			NULL,
			0);
 100160c:	00800084 	movi	r2,2
 1001610:	d8800015 	stw	r2,0(sp)
 1001614:	008040b4 	movhi	r2,258
 1001618:	1093d604 	addi	r2,r2,20312
 100161c:	d8800115 	stw	r2,4(sp)
 1001620:	00820004 	movi	r2,2048
 1001624:	d8800215 	stw	r2,8(sp)
 1001628:	d8000315 	stw	zero,12(sp)
 100162c:	d8000415 	stw	zero,16(sp)
 1001630:	01004034 	movhi	r4,256
 1001634:	2104f504 	addi	r4,r4,5076
 1001638:	000b883a 	mov	r5,zero
 100163c:	018040b4 	movhi	r6,258
 1001640:	319bd504 	addi	r6,r6,28500
 1001644:	01c00084 	movi	r7,2
 1001648:	101aba80 	call	101aba8 <OSTaskCreateExt>
			COMMAND_CHECK_INFRARED_TASK_PRIORITY,
			COMMAND_CHECK_INFRARED_TASK_PRIORITY,
			command_check_infrared_task_stk,
			TASK_STACKSIZE,
			0,
			0);
 100164c:	00800044 	movi	r2,1
 1001650:	d8800015 	stw	r2,0(sp)
 1001654:	008040b4 	movhi	r2,258
 1001658:	108bd604 	addi	r2,r2,12120
 100165c:	d8800115 	stw	r2,4(sp)
 1001660:	00820004 	movi	r2,2048
 1001664:	d8800215 	stw	r2,8(sp)
 1001668:	d8000315 	stw	zero,12(sp)
 100166c:	d8000415 	stw	zero,16(sp)
 1001670:	01004034 	movhi	r4,256
 1001674:	21013304 	addi	r4,r4,1228
 1001678:	000b883a 	mov	r5,zero
 100167c:	018040b4 	movhi	r6,258
 1001680:	3193d504 	addi	r6,r6,20308
 1001684:	01c00044 	movi	r7,1
 1001688:	101aba80 	call	101aba8 <OSTaskCreateExt>


	// Initialize the handlers.
	if ((command->init() == OK) && (infrared->init() == OK)) {
 100168c:	d1270f17 	ldw	r4,-25540(gp)
 1001690:	10003ac0 	call	10003ac <_ZN14CommandHandler4initEv>
 1001694:	1004c03a 	cmpne	r2,r2,zero
 1001698:	1000071e 	bne	r2,zero,10016b8 <main+0xc0>
 100169c:	d1271017 	ldw	r4,-25536(gp)
 10016a0:	10011000 	call	1001100 <_ZN15InfraredHandler4initEv>
 10016a4:	1004c03a 	cmpne	r2,r2,zero
 10016a8:	1000031e 	bne	r2,zero,10016b8 <main+0xc0>
 10016ac:	00800044 	movi	r2,1
 10016b0:	e0bfff05 	stb	r2,-4(fp)
 10016b4:	00000106 	br	10016bc <main+0xc4>
 10016b8:	e03fff05 	stb	zero,-4(fp)
 10016bc:	e0bfff03 	ldbu	r2,-4(fp)
 10016c0:	10803fcc 	andi	r2,r2,255
 10016c4:	1005003a 	cmpeq	r2,r2,zero
 10016c8:	1000081e 	bne	r2,zero,10016ec <main+0xf4>

		// Create the communications chain.
		infrared->addListener(command->onInfraredReceive());
 10016cc:	d0a71017 	ldw	r2,-25536(gp)
 10016d0:	1021883a 	mov	r16,r2
 10016d4:	d1270f17 	ldw	r4,-25540(gp)
 10016d8:	10002680 	call	1000268 <_ZN14CommandHandler17onInfraredReceiveEv>
 10016dc:	100b883a 	mov	r5,r2
 10016e0:	8009883a 	mov	r4,r16
 10016e4:	100070c0 	call	100070c <_ZN10DataSource11addListenerEP8os_event>

		// Start.
		OSStart();
 10016e8:	1014dd40 	call	1014dd4 <OSStart>
	}

	return 0;
 10016ec:	0005883a 	mov	r2,zero
}
 10016f0:	e037883a 	mov	sp,fp
 10016f4:	dfc00217 	ldw	ra,8(sp)
 10016f8:	df000117 	ldw	fp,4(sp)
 10016fc:	dc000017 	ldw	r16,0(sp)
 1001700:	dec00304 	addi	sp,sp,12
 1001704:	f800283a 	ret

01001708 <_ZSt18__throw_bad_typeidv>:
 1001708:	deffff04 	addi	sp,sp,-4
 100170c:	01000104 	movi	r4,4
 1001710:	dfc00015 	stw	ra,0(sp)
 1001714:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 1001718:	1009883a 	mov	r4,r2
 100171c:	008040b4 	movhi	r2,258
 1001720:	10bcaf04 	addi	r2,r2,-3396
 1001724:	20800015 	stw	r2,0(r4)
 1001728:	014040b4 	movhi	r5,258
 100172c:	297cb604 	addi	r5,r5,-3368
 1001730:	01804074 	movhi	r6,257
 1001734:	31a30b04 	addi	r6,r6,-29652
 1001738:	1008b240 	call	1008b24 <__cxa_throw>

0100173c <_ZSt16__throw_bad_castv>:
 100173c:	deffff04 	addi	sp,sp,-4
 1001740:	01000104 	movi	r4,4
 1001744:	dfc00015 	stw	ra,0(sp)
 1001748:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 100174c:	1009883a 	mov	r4,r2
 1001750:	008040b4 	movhi	r2,258
 1001754:	10bcdf04 	addi	r2,r2,-3204
 1001758:	20800015 	stw	r2,0(r4)
 100175c:	014040b4 	movhi	r5,258
 1001760:	297ce504 	addi	r5,r5,-3180
 1001764:	01804074 	movhi	r6,257
 1001768:	31a40504 	addi	r6,r6,-28652
 100176c:	1008b240 	call	1008b24 <__cxa_throw>

01001770 <_ZSt17__throw_bad_allocv>:
 1001770:	deffff04 	addi	sp,sp,-4
 1001774:	01000104 	movi	r4,4
 1001778:	dfc00015 	stw	ra,0(sp)
 100177c:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 1001780:	1009883a 	mov	r4,r2
 1001784:	008040b4 	movhi	r2,258
 1001788:	10bc8c04 	addi	r2,r2,-3536
 100178c:	20800015 	stw	r2,0(r4)
 1001790:	014040b4 	movhi	r5,258
 1001794:	297c9304 	addi	r5,r5,-3508
 1001798:	01804034 	movhi	r6,256
 100179c:	319e7b04 	addi	r6,r6,31212
 10017a0:	1008b240 	call	1008b24 <__cxa_throw>

010017a4 <_ZSt21__throw_bad_exceptionv>:
 10017a4:	deffff04 	addi	sp,sp,-4
 10017a8:	01000104 	movi	r4,4
 10017ac:	dfc00015 	stw	ra,0(sp)
 10017b0:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 10017b4:	1009883a 	mov	r4,r2
 10017b8:	008040b4 	movhi	r2,258
 10017bc:	10bc7604 	addi	r2,r2,-3624
 10017c0:	20800015 	stw	r2,0(r4)
 10017c4:	014040b4 	movhi	r5,258
 10017c8:	297c8304 	addi	r5,r5,-3572
 10017cc:	01804034 	movhi	r6,256
 10017d0:	319e6304 	addi	r6,r6,31116
 10017d4:	1008b240 	call	1008b24 <__cxa_throw>

010017d8 <_ZSt19__throw_ios_failurePKc>:
 10017d8:	deffeb04 	addi	sp,sp,-84
 10017dc:	00804074 	movhi	r2,257
 10017e0:	10a0b504 	addi	r2,r2,-32044
 10017e4:	d8800815 	stw	r2,32(sp)
 10017e8:	00c040b4 	movhi	r3,258
 10017ec:	18fabf04 	addi	r3,r3,-5380
 10017f0:	00804034 	movhi	r2,256
 10017f4:	10862d04 	addi	r2,r2,6324
 10017f8:	d9001115 	stw	r4,68(sp)
 10017fc:	d9000204 	addi	r4,sp,8
 1001800:	d8800b15 	stw	r2,44(sp)
 1001804:	dfc01415 	stw	ra,80(sp)
 1001808:	df001315 	stw	fp,76(sp)
 100180c:	ddc01215 	stw	r23,72(sp)
 1001810:	d8c00915 	stw	r3,36(sp)
 1001814:	dec00a15 	stw	sp,40(sp)
 1001818:	dec00c15 	stw	sp,48(sp)
 100181c:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1001820:	00800084 	movi	r2,2
 1001824:	d8800315 	stw	r2,12(sp)
 1001828:	d9401117 	ldw	r5,68(sp)
 100182c:	d9000104 	addi	r4,sp,4
 1001830:	d9800044 	addi	r6,sp,1
 1001834:	10055ec0 	call	10055ec <_ZNSsC1EPKcRKSaIcE>
 1001838:	01000204 	movi	r4,8
 100183c:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 1001840:	1009883a 	mov	r4,r2
 1001844:	d9400104 	addi	r5,sp,4
 1001848:	d8801015 	stw	r2,64(sp)
 100184c:	10029d80 	call	10029d8 <_ZNSt8ios_base7failureC1ERKSs>
 1001850:	d8800117 	ldw	r2,4(sp)
 1001854:	00c040b4 	movhi	r3,258
 1001858:	18dbd604 	addi	r3,r3,28504
 100185c:	10bffd04 	addi	r2,r2,-12
 1001860:	d8800f15 	stw	r2,60(sp)
 1001864:	10c0081e 	bne	r2,r3,1001888 <_ZSt19__throw_ios_failurePKc+0xb0>
 1001868:	d9001017 	ldw	r4,64(sp)
 100186c:	00bfffc4 	movi	r2,-1
 1001870:	014040b4 	movhi	r5,258
 1001874:	297bff04 	addi	r5,r5,-4100
 1001878:	01804034 	movhi	r6,256
 100187c:	318a3504 	addi	r6,r6,10452
 1001880:	d8800315 	stw	r2,12(sp)
 1001884:	1008b240 	call	1008b24 <__cxa_throw>
 1001888:	00800044 	movi	r2,1
 100188c:	d8800315 	stw	r2,12(sp)
 1001890:	d8800f17 	ldw	r2,60(sp)
 1001894:	017fffc4 	movi	r5,-1
 1001898:	11000204 	addi	r4,r2,8
 100189c:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10018a0:	00bff116 	blt	zero,r2,1001868 <_ZSt19__throw_ios_failurePKc+0x90>
 10018a4:	d9000f17 	ldw	r4,60(sp)
 10018a8:	d80b883a 	mov	r5,sp
 10018ac:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10018b0:	003fed06 	br	1001868 <_ZSt19__throw_ios_failurePKc+0x90>
 10018b4:	d8c00317 	ldw	r3,12(sp)
 10018b8:	00800044 	movi	r2,1
 10018bc:	d9000417 	ldw	r4,16(sp)
 10018c0:	d9400517 	ldw	r5,20(sp)
 10018c4:	18800226 	beq	r3,r2,10018d0 <_ZSt19__throw_ios_failurePKc+0xf8>
 10018c8:	00bfffc4 	movi	r2,-1
 10018cc:	28800326 	beq	r5,r2,10018dc <_ZSt19__throw_ios_failurePKc+0x104>
 10018d0:	00bfffc4 	movi	r2,-1
 10018d4:	d8800315 	stw	r2,12(sp)
 10018d8:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 10018dc:	10088800 	call	1008880 <_ZSt9terminatev>

010018e0 <_ZSt19__throw_logic_errorPKc>:
 10018e0:	deffe704 	addi	sp,sp,-100
 10018e4:	00804074 	movhi	r2,257
 10018e8:	10a0b504 	addi	r2,r2,-32044
 10018ec:	d8800815 	stw	r2,32(sp)
 10018f0:	00c040b4 	movhi	r3,258
 10018f4:	18fac404 	addi	r3,r3,-5360
 10018f8:	00804034 	movhi	r2,256
 10018fc:	10867304 	addi	r2,r2,6604
 1001900:	d9001315 	stw	r4,76(sp)
 1001904:	d9000204 	addi	r4,sp,8
 1001908:	d8800b15 	stw	r2,44(sp)
 100190c:	dfc01815 	stw	ra,96(sp)
 1001910:	df001715 	stw	fp,92(sp)
 1001914:	ddc01615 	stw	r23,88(sp)
 1001918:	d8c00915 	stw	r3,36(sp)
 100191c:	dec00a15 	stw	sp,40(sp)
 1001920:	dec00c15 	stw	sp,48(sp)
 1001924:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1001928:	00800104 	movi	r2,4
 100192c:	d8800315 	stw	r2,12(sp)
 1001930:	d885883a 	add	r2,sp,r2
 1001934:	d8801415 	stw	r2,80(sp)
 1001938:	d9401317 	ldw	r5,76(sp)
 100193c:	1009883a 	mov	r4,r2
 1001940:	d9800084 	addi	r6,sp,2
 1001944:	10055ec0 	call	10055ec <_ZNSsC1EPKcRKSaIcE>
 1001948:	01000204 	movi	r4,8
 100194c:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 1001950:	d8801215 	stw	r2,72(sp)
 1001954:	008000c4 	movi	r2,3
 1001958:	d8800315 	stw	r2,12(sp)
 100195c:	d9401417 	ldw	r5,80(sp)
 1001960:	d9001217 	ldw	r4,72(sp)
 1001964:	10031800 	call	1003180 <_ZNSt11logic_errorC1ERKSs>
 1001968:	d8800117 	ldw	r2,4(sp)
 100196c:	00c040b4 	movhi	r3,258
 1001970:	18dbd604 	addi	r3,r3,28504
 1001974:	10bffd04 	addi	r2,r2,-12
 1001978:	d8800f15 	stw	r2,60(sp)
 100197c:	10c0081e 	bne	r2,r3,10019a0 <_ZSt19__throw_logic_errorPKc+0xc0>
 1001980:	d9001217 	ldw	r4,72(sp)
 1001984:	00bfffc4 	movi	r2,-1
 1001988:	014040b4 	movhi	r5,258
 100198c:	297c1804 	addi	r5,r5,-4000
 1001990:	01804034 	movhi	r6,256
 1001994:	318bab04 	addi	r6,r6,11948
 1001998:	d8800315 	stw	r2,12(sp)
 100199c:	1008b240 	call	1008b24 <__cxa_throw>
 10019a0:	00800044 	movi	r2,1
 10019a4:	d8800315 	stw	r2,12(sp)
 10019a8:	d8800f17 	ldw	r2,60(sp)
 10019ac:	017fffc4 	movi	r5,-1
 10019b0:	11000204 	addi	r4,r2,8
 10019b4:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10019b8:	00bff116 	blt	zero,r2,1001980 <_ZSt19__throw_logic_errorPKc+0xa0>
 10019bc:	d9000f17 	ldw	r4,60(sp)
 10019c0:	d80b883a 	mov	r5,sp
 10019c4:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10019c8:	003fed06 	br	1001980 <_ZSt19__throw_logic_errorPKc+0xa0>
 10019cc:	d8800417 	ldw	r2,16(sp)
 10019d0:	d8c00317 	ldw	r3,12(sp)
 10019d4:	d9000517 	ldw	r4,20(sp)
 10019d8:	d8801515 	stw	r2,84(sp)
 10019dc:	00800044 	movi	r2,1
 10019e0:	18800426 	beq	r3,r2,10019f4 <_ZSt19__throw_logic_errorPKc+0x114>
 10019e4:	00800084 	movi	r2,2
 10019e8:	18800826 	beq	r3,r2,1001a0c <_ZSt19__throw_logic_errorPKc+0x12c>
 10019ec:	008000c4 	movi	r2,3
 10019f0:	18800226 	beq	r3,r2,10019fc <_ZSt19__throw_logic_errorPKc+0x11c>
 10019f4:	00bfffc4 	movi	r2,-1
 10019f8:	20801126 	beq	r4,r2,1001a40 <_ZSt19__throw_logic_errorPKc+0x160>
 10019fc:	d9001517 	ldw	r4,84(sp)
 1001a00:	00bfffc4 	movi	r2,-1
 1001a04:	d8800315 	stw	r2,12(sp)
 1001a08:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1001a0c:	d9001217 	ldw	r4,72(sp)
 1001a10:	1008e6c0 	call	1008e6c <__cxa_free_exception>
 1001a14:	d8801517 	ldw	r2,84(sp)
 1001a18:	00c040b4 	movhi	r3,258
 1001a1c:	18dbd604 	addi	r3,r3,28504
 1001a20:	d8801115 	stw	r2,68(sp)
 1001a24:	d8800117 	ldw	r2,4(sp)
 1001a28:	10bffd04 	addi	r2,r2,-12
 1001a2c:	d8801015 	stw	r2,64(sp)
 1001a30:	10c0041e 	bne	r2,r3,1001a44 <_ZSt19__throw_logic_errorPKc+0x164>
 1001a34:	d8801117 	ldw	r2,68(sp)
 1001a38:	d8801515 	stw	r2,84(sp)
 1001a3c:	003fef06 	br	10019fc <_ZSt19__throw_logic_errorPKc+0x11c>
 1001a40:	10088800 	call	1008880 <_ZSt9terminatev>
 1001a44:	00800084 	movi	r2,2
 1001a48:	d8800315 	stw	r2,12(sp)
 1001a4c:	d8801017 	ldw	r2,64(sp)
 1001a50:	017fffc4 	movi	r5,-1
 1001a54:	11000204 	addi	r4,r2,8
 1001a58:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001a5c:	00bff516 	blt	zero,r2,1001a34 <_ZSt19__throw_logic_errorPKc+0x154>
 1001a60:	d9001017 	ldw	r4,64(sp)
 1001a64:	d9400044 	addi	r5,sp,1
 1001a68:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001a6c:	003ff106 	br	1001a34 <_ZSt19__throw_logic_errorPKc+0x154>

01001a70 <_ZSt23__throw_underflow_errorPKc>:
 1001a70:	deffe704 	addi	sp,sp,-100
 1001a74:	00804074 	movhi	r2,257
 1001a78:	10a0b504 	addi	r2,r2,-32044
 1001a7c:	d8800815 	stw	r2,32(sp)
 1001a80:	00c040b4 	movhi	r3,258
 1001a84:	18faca04 	addi	r3,r3,-5336
 1001a88:	00804034 	movhi	r2,256
 1001a8c:	1086d704 	addi	r2,r2,7004
 1001a90:	d9001315 	stw	r4,76(sp)
 1001a94:	d9000204 	addi	r4,sp,8
 1001a98:	d8800b15 	stw	r2,44(sp)
 1001a9c:	dfc01815 	stw	ra,96(sp)
 1001aa0:	df001715 	stw	fp,92(sp)
 1001aa4:	ddc01615 	stw	r23,88(sp)
 1001aa8:	d8c00915 	stw	r3,36(sp)
 1001aac:	dec00a15 	stw	sp,40(sp)
 1001ab0:	dec00c15 	stw	sp,48(sp)
 1001ab4:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1001ab8:	00800104 	movi	r2,4
 1001abc:	d8800315 	stw	r2,12(sp)
 1001ac0:	d885883a 	add	r2,sp,r2
 1001ac4:	d8801415 	stw	r2,80(sp)
 1001ac8:	d9401317 	ldw	r5,76(sp)
 1001acc:	1009883a 	mov	r4,r2
 1001ad0:	d9800084 	addi	r6,sp,2
 1001ad4:	10055ec0 	call	10055ec <_ZNSsC1EPKcRKSaIcE>
 1001ad8:	01000204 	movi	r4,8
 1001adc:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 1001ae0:	d8801215 	stw	r2,72(sp)
 1001ae4:	008000c4 	movi	r2,3
 1001ae8:	d8800315 	stw	r2,12(sp)
 1001aec:	d9401417 	ldw	r5,80(sp)
 1001af0:	d9001217 	ldw	r4,72(sp)
 1001af4:	10030600 	call	1003060 <_ZNSt15underflow_errorC1ERKSs>
 1001af8:	d8800117 	ldw	r2,4(sp)
 1001afc:	00c040b4 	movhi	r3,258
 1001b00:	18dbd604 	addi	r3,r3,28504
 1001b04:	10bffd04 	addi	r2,r2,-12
 1001b08:	d8800f15 	stw	r2,60(sp)
 1001b0c:	10c0081e 	bne	r2,r3,1001b30 <_ZSt23__throw_underflow_errorPKc+0xc0>
 1001b10:	d9001217 	ldw	r4,72(sp)
 1001b14:	00bfffc4 	movi	r2,-1
 1001b18:	014040b4 	movhi	r5,258
 1001b1c:	297b9904 	addi	r5,r5,-4508
 1001b20:	01804034 	movhi	r6,256
 1001b24:	3189c904 	addi	r6,r6,10020
 1001b28:	d8800315 	stw	r2,12(sp)
 1001b2c:	1008b240 	call	1008b24 <__cxa_throw>
 1001b30:	00800044 	movi	r2,1
 1001b34:	d8800315 	stw	r2,12(sp)
 1001b38:	d8800f17 	ldw	r2,60(sp)
 1001b3c:	017fffc4 	movi	r5,-1
 1001b40:	11000204 	addi	r4,r2,8
 1001b44:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001b48:	00bff116 	blt	zero,r2,1001b10 <_ZSt23__throw_underflow_errorPKc+0xa0>
 1001b4c:	d9000f17 	ldw	r4,60(sp)
 1001b50:	d80b883a 	mov	r5,sp
 1001b54:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001b58:	003fed06 	br	1001b10 <_ZSt23__throw_underflow_errorPKc+0xa0>
 1001b5c:	d8800417 	ldw	r2,16(sp)
 1001b60:	d8c00317 	ldw	r3,12(sp)
 1001b64:	d9000517 	ldw	r4,20(sp)
 1001b68:	d8801515 	stw	r2,84(sp)
 1001b6c:	00800044 	movi	r2,1
 1001b70:	18800426 	beq	r3,r2,1001b84 <_ZSt23__throw_underflow_errorPKc+0x114>
 1001b74:	00800084 	movi	r2,2
 1001b78:	18800826 	beq	r3,r2,1001b9c <_ZSt23__throw_underflow_errorPKc+0x12c>
 1001b7c:	008000c4 	movi	r2,3
 1001b80:	18800226 	beq	r3,r2,1001b8c <_ZSt23__throw_underflow_errorPKc+0x11c>
 1001b84:	00bfffc4 	movi	r2,-1
 1001b88:	20801126 	beq	r4,r2,1001bd0 <_ZSt23__throw_underflow_errorPKc+0x160>
 1001b8c:	d9001517 	ldw	r4,84(sp)
 1001b90:	00bfffc4 	movi	r2,-1
 1001b94:	d8800315 	stw	r2,12(sp)
 1001b98:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1001b9c:	d9001217 	ldw	r4,72(sp)
 1001ba0:	1008e6c0 	call	1008e6c <__cxa_free_exception>
 1001ba4:	d8801517 	ldw	r2,84(sp)
 1001ba8:	00c040b4 	movhi	r3,258
 1001bac:	18dbd604 	addi	r3,r3,28504
 1001bb0:	d8801115 	stw	r2,68(sp)
 1001bb4:	d8800117 	ldw	r2,4(sp)
 1001bb8:	10bffd04 	addi	r2,r2,-12
 1001bbc:	d8801015 	stw	r2,64(sp)
 1001bc0:	10c0041e 	bne	r2,r3,1001bd4 <_ZSt23__throw_underflow_errorPKc+0x164>
 1001bc4:	d8801117 	ldw	r2,68(sp)
 1001bc8:	d8801515 	stw	r2,84(sp)
 1001bcc:	003fef06 	br	1001b8c <_ZSt23__throw_underflow_errorPKc+0x11c>
 1001bd0:	10088800 	call	1008880 <_ZSt9terminatev>
 1001bd4:	00800084 	movi	r2,2
 1001bd8:	d8800315 	stw	r2,12(sp)
 1001bdc:	d8801017 	ldw	r2,64(sp)
 1001be0:	017fffc4 	movi	r5,-1
 1001be4:	11000204 	addi	r4,r2,8
 1001be8:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001bec:	00bff516 	blt	zero,r2,1001bc4 <_ZSt23__throw_underflow_errorPKc+0x154>
 1001bf0:	d9001017 	ldw	r4,64(sp)
 1001bf4:	d9400044 	addi	r5,sp,1
 1001bf8:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001bfc:	003ff106 	br	1001bc4 <_ZSt23__throw_underflow_errorPKc+0x154>

01001c00 <_ZSt22__throw_overflow_errorPKc>:
 1001c00:	deffe704 	addi	sp,sp,-100
 1001c04:	00804074 	movhi	r2,257
 1001c08:	10a0b504 	addi	r2,r2,-32044
 1001c0c:	d8800815 	stw	r2,32(sp)
 1001c10:	00c040b4 	movhi	r3,258
 1001c14:	18fad004 	addi	r3,r3,-5312
 1001c18:	00804034 	movhi	r2,256
 1001c1c:	10873b04 	addi	r2,r2,7404
 1001c20:	d9001315 	stw	r4,76(sp)
 1001c24:	d9000204 	addi	r4,sp,8
 1001c28:	d8800b15 	stw	r2,44(sp)
 1001c2c:	dfc01815 	stw	ra,96(sp)
 1001c30:	df001715 	stw	fp,92(sp)
 1001c34:	ddc01615 	stw	r23,88(sp)
 1001c38:	d8c00915 	stw	r3,36(sp)
 1001c3c:	dec00a15 	stw	sp,40(sp)
 1001c40:	dec00c15 	stw	sp,48(sp)
 1001c44:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1001c48:	00800104 	movi	r2,4
 1001c4c:	d8800315 	stw	r2,12(sp)
 1001c50:	d885883a 	add	r2,sp,r2
 1001c54:	d8801415 	stw	r2,80(sp)
 1001c58:	d9401317 	ldw	r5,76(sp)
 1001c5c:	1009883a 	mov	r4,r2
 1001c60:	d9800084 	addi	r6,sp,2
 1001c64:	10055ec0 	call	10055ec <_ZNSsC1EPKcRKSaIcE>
 1001c68:	01000204 	movi	r4,8
 1001c6c:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 1001c70:	d8801215 	stw	r2,72(sp)
 1001c74:	008000c4 	movi	r2,3
 1001c78:	d8800315 	stw	r2,12(sp)
 1001c7c:	d9401417 	ldw	r5,80(sp)
 1001c80:	d9001217 	ldw	r4,72(sp)
 1001c84:	10030c00 	call	10030c0 <_ZNSt14overflow_errorC1ERKSs>
 1001c88:	d8800117 	ldw	r2,4(sp)
 1001c8c:	00c040b4 	movhi	r3,258
 1001c90:	18dbd604 	addi	r3,r3,28504
 1001c94:	10bffd04 	addi	r2,r2,-12
 1001c98:	d8800f15 	stw	r2,60(sp)
 1001c9c:	10c0081e 	bne	r2,r3,1001cc0 <_ZSt22__throw_overflow_errorPKc+0xc0>
 1001ca0:	d9001217 	ldw	r4,72(sp)
 1001ca4:	00bfffc4 	movi	r2,-1
 1001ca8:	014040b4 	movhi	r5,258
 1001cac:	297ba604 	addi	r5,r5,-4456
 1001cb0:	01804034 	movhi	r6,256
 1001cb4:	3189da04 	addi	r6,r6,10088
 1001cb8:	d8800315 	stw	r2,12(sp)
 1001cbc:	1008b240 	call	1008b24 <__cxa_throw>
 1001cc0:	00800044 	movi	r2,1
 1001cc4:	d8800315 	stw	r2,12(sp)
 1001cc8:	d8800f17 	ldw	r2,60(sp)
 1001ccc:	017fffc4 	movi	r5,-1
 1001cd0:	11000204 	addi	r4,r2,8
 1001cd4:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001cd8:	00bff116 	blt	zero,r2,1001ca0 <_ZSt22__throw_overflow_errorPKc+0xa0>
 1001cdc:	d9000f17 	ldw	r4,60(sp)
 1001ce0:	d80b883a 	mov	r5,sp
 1001ce4:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001ce8:	003fed06 	br	1001ca0 <_ZSt22__throw_overflow_errorPKc+0xa0>
 1001cec:	d8800417 	ldw	r2,16(sp)
 1001cf0:	d8c00317 	ldw	r3,12(sp)
 1001cf4:	d9000517 	ldw	r4,20(sp)
 1001cf8:	d8801515 	stw	r2,84(sp)
 1001cfc:	00800044 	movi	r2,1
 1001d00:	18800426 	beq	r3,r2,1001d14 <_ZSt22__throw_overflow_errorPKc+0x114>
 1001d04:	00800084 	movi	r2,2
 1001d08:	18800826 	beq	r3,r2,1001d2c <_ZSt22__throw_overflow_errorPKc+0x12c>
 1001d0c:	008000c4 	movi	r2,3
 1001d10:	18800226 	beq	r3,r2,1001d1c <_ZSt22__throw_overflow_errorPKc+0x11c>
 1001d14:	00bfffc4 	movi	r2,-1
 1001d18:	20801126 	beq	r4,r2,1001d60 <_ZSt22__throw_overflow_errorPKc+0x160>
 1001d1c:	d9001517 	ldw	r4,84(sp)
 1001d20:	00bfffc4 	movi	r2,-1
 1001d24:	d8800315 	stw	r2,12(sp)
 1001d28:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1001d2c:	d9001217 	ldw	r4,72(sp)
 1001d30:	1008e6c0 	call	1008e6c <__cxa_free_exception>
 1001d34:	d8801517 	ldw	r2,84(sp)
 1001d38:	00c040b4 	movhi	r3,258
 1001d3c:	18dbd604 	addi	r3,r3,28504
 1001d40:	d8801115 	stw	r2,68(sp)
 1001d44:	d8800117 	ldw	r2,4(sp)
 1001d48:	10bffd04 	addi	r2,r2,-12
 1001d4c:	d8801015 	stw	r2,64(sp)
 1001d50:	10c0041e 	bne	r2,r3,1001d64 <_ZSt22__throw_overflow_errorPKc+0x164>
 1001d54:	d8801117 	ldw	r2,68(sp)
 1001d58:	d8801515 	stw	r2,84(sp)
 1001d5c:	003fef06 	br	1001d1c <_ZSt22__throw_overflow_errorPKc+0x11c>
 1001d60:	10088800 	call	1008880 <_ZSt9terminatev>
 1001d64:	00800084 	movi	r2,2
 1001d68:	d8800315 	stw	r2,12(sp)
 1001d6c:	d8801017 	ldw	r2,64(sp)
 1001d70:	017fffc4 	movi	r5,-1
 1001d74:	11000204 	addi	r4,r2,8
 1001d78:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001d7c:	00bff516 	blt	zero,r2,1001d54 <_ZSt22__throw_overflow_errorPKc+0x154>
 1001d80:	d9001017 	ldw	r4,64(sp)
 1001d84:	d9400044 	addi	r5,sp,1
 1001d88:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001d8c:	003ff106 	br	1001d54 <_ZSt22__throw_overflow_errorPKc+0x154>

01001d90 <_ZSt24__throw_invalid_argumentPKc>:
 1001d90:	deffe704 	addi	sp,sp,-100
 1001d94:	00804074 	movhi	r2,257
 1001d98:	10a0b504 	addi	r2,r2,-32044
 1001d9c:	d8800815 	stw	r2,32(sp)
 1001da0:	00c040b4 	movhi	r3,258
 1001da4:	18fad604 	addi	r3,r3,-5288
 1001da8:	00804034 	movhi	r2,256
 1001dac:	10879f04 	addi	r2,r2,7804
 1001db0:	d9001315 	stw	r4,76(sp)
 1001db4:	d9000204 	addi	r4,sp,8
 1001db8:	d8800b15 	stw	r2,44(sp)
 1001dbc:	dfc01815 	stw	ra,96(sp)
 1001dc0:	df001715 	stw	fp,92(sp)
 1001dc4:	ddc01615 	stw	r23,88(sp)
 1001dc8:	d8c00915 	stw	r3,36(sp)
 1001dcc:	dec00a15 	stw	sp,40(sp)
 1001dd0:	dec00c15 	stw	sp,48(sp)
 1001dd4:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1001dd8:	00800104 	movi	r2,4
 1001ddc:	d8800315 	stw	r2,12(sp)
 1001de0:	d885883a 	add	r2,sp,r2
 1001de4:	d8801415 	stw	r2,80(sp)
 1001de8:	d9401317 	ldw	r5,76(sp)
 1001dec:	1009883a 	mov	r4,r2
 1001df0:	d9800084 	addi	r6,sp,2
 1001df4:	10055ec0 	call	10055ec <_ZNSsC1EPKcRKSaIcE>
 1001df8:	01000204 	movi	r4,8
 1001dfc:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 1001e00:	d8801215 	stw	r2,72(sp)
 1001e04:	008000c4 	movi	r2,3
 1001e08:	d8800315 	stw	r2,12(sp)
 1001e0c:	d9401417 	ldw	r5,80(sp)
 1001e10:	d9001217 	ldw	r4,72(sp)
 1001e14:	10033a00 	call	10033a0 <_ZNSt16invalid_argumentC1ERKSs>
 1001e18:	d8800117 	ldw	r2,4(sp)
 1001e1c:	00c040b4 	movhi	r3,258
 1001e20:	18dbd604 	addi	r3,r3,28504
 1001e24:	10bffd04 	addi	r2,r2,-12
 1001e28:	d8800f15 	stw	r2,60(sp)
 1001e2c:	10c0081e 	bne	r2,r3,1001e50 <_ZSt24__throw_invalid_argumentPKc+0xc0>
 1001e30:	d9001217 	ldw	r4,72(sp)
 1001e34:	00bfffc4 	movi	r2,-1
 1001e38:	014040b4 	movhi	r5,258
 1001e3c:	297bd904 	addi	r5,r5,-4252
 1001e40:	01804034 	movhi	r6,256
 1001e44:	318a1e04 	addi	r6,r6,10360
 1001e48:	d8800315 	stw	r2,12(sp)
 1001e4c:	1008b240 	call	1008b24 <__cxa_throw>
 1001e50:	00800044 	movi	r2,1
 1001e54:	d8800315 	stw	r2,12(sp)
 1001e58:	d8800f17 	ldw	r2,60(sp)
 1001e5c:	017fffc4 	movi	r5,-1
 1001e60:	11000204 	addi	r4,r2,8
 1001e64:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001e68:	00bff116 	blt	zero,r2,1001e30 <_ZSt24__throw_invalid_argumentPKc+0xa0>
 1001e6c:	d9000f17 	ldw	r4,60(sp)
 1001e70:	d80b883a 	mov	r5,sp
 1001e74:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001e78:	003fed06 	br	1001e30 <_ZSt24__throw_invalid_argumentPKc+0xa0>
 1001e7c:	d8800417 	ldw	r2,16(sp)
 1001e80:	d8c00317 	ldw	r3,12(sp)
 1001e84:	d9000517 	ldw	r4,20(sp)
 1001e88:	d8801515 	stw	r2,84(sp)
 1001e8c:	00800044 	movi	r2,1
 1001e90:	18800426 	beq	r3,r2,1001ea4 <_ZSt24__throw_invalid_argumentPKc+0x114>
 1001e94:	00800084 	movi	r2,2
 1001e98:	18800826 	beq	r3,r2,1001ebc <_ZSt24__throw_invalid_argumentPKc+0x12c>
 1001e9c:	008000c4 	movi	r2,3
 1001ea0:	18800226 	beq	r3,r2,1001eac <_ZSt24__throw_invalid_argumentPKc+0x11c>
 1001ea4:	00bfffc4 	movi	r2,-1
 1001ea8:	20801126 	beq	r4,r2,1001ef0 <_ZSt24__throw_invalid_argumentPKc+0x160>
 1001eac:	d9001517 	ldw	r4,84(sp)
 1001eb0:	00bfffc4 	movi	r2,-1
 1001eb4:	d8800315 	stw	r2,12(sp)
 1001eb8:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1001ebc:	d9001217 	ldw	r4,72(sp)
 1001ec0:	1008e6c0 	call	1008e6c <__cxa_free_exception>
 1001ec4:	d8801517 	ldw	r2,84(sp)
 1001ec8:	00c040b4 	movhi	r3,258
 1001ecc:	18dbd604 	addi	r3,r3,28504
 1001ed0:	d8801115 	stw	r2,68(sp)
 1001ed4:	d8800117 	ldw	r2,4(sp)
 1001ed8:	10bffd04 	addi	r2,r2,-12
 1001edc:	d8801015 	stw	r2,64(sp)
 1001ee0:	10c0041e 	bne	r2,r3,1001ef4 <_ZSt24__throw_invalid_argumentPKc+0x164>
 1001ee4:	d8801117 	ldw	r2,68(sp)
 1001ee8:	d8801515 	stw	r2,84(sp)
 1001eec:	003fef06 	br	1001eac <_ZSt24__throw_invalid_argumentPKc+0x11c>
 1001ef0:	10088800 	call	1008880 <_ZSt9terminatev>
 1001ef4:	00800084 	movi	r2,2
 1001ef8:	d8800315 	stw	r2,12(sp)
 1001efc:	d8801017 	ldw	r2,64(sp)
 1001f00:	017fffc4 	movi	r5,-1
 1001f04:	11000204 	addi	r4,r2,8
 1001f08:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001f0c:	00bff516 	blt	zero,r2,1001ee4 <_ZSt24__throw_invalid_argumentPKc+0x154>
 1001f10:	d9001017 	ldw	r4,64(sp)
 1001f14:	d9400044 	addi	r5,sp,1
 1001f18:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1001f1c:	003ff106 	br	1001ee4 <_ZSt24__throw_invalid_argumentPKc+0x154>

01001f20 <_ZSt20__throw_domain_errorPKc>:
 1001f20:	deffe704 	addi	sp,sp,-100
 1001f24:	00804074 	movhi	r2,257
 1001f28:	10a0b504 	addi	r2,r2,-32044
 1001f2c:	d8800815 	stw	r2,32(sp)
 1001f30:	00c040b4 	movhi	r3,258
 1001f34:	18fadc04 	addi	r3,r3,-5264
 1001f38:	00804034 	movhi	r2,256
 1001f3c:	10880304 	addi	r2,r2,8204
 1001f40:	d9001315 	stw	r4,76(sp)
 1001f44:	d9000204 	addi	r4,sp,8
 1001f48:	d8800b15 	stw	r2,44(sp)
 1001f4c:	dfc01815 	stw	ra,96(sp)
 1001f50:	df001715 	stw	fp,92(sp)
 1001f54:	ddc01615 	stw	r23,88(sp)
 1001f58:	d8c00915 	stw	r3,36(sp)
 1001f5c:	dec00a15 	stw	sp,40(sp)
 1001f60:	dec00c15 	stw	sp,48(sp)
 1001f64:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1001f68:	00800104 	movi	r2,4
 1001f6c:	d8800315 	stw	r2,12(sp)
 1001f70:	d885883a 	add	r2,sp,r2
 1001f74:	d8801415 	stw	r2,80(sp)
 1001f78:	d9401317 	ldw	r5,76(sp)
 1001f7c:	1009883a 	mov	r4,r2
 1001f80:	d9800084 	addi	r6,sp,2
 1001f84:	10055ec0 	call	10055ec <_ZNSsC1EPKcRKSaIcE>
 1001f88:	01000204 	movi	r4,8
 1001f8c:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 1001f90:	d8801215 	stw	r2,72(sp)
 1001f94:	008000c4 	movi	r2,3
 1001f98:	d8800315 	stw	r2,12(sp)
 1001f9c:	d9401417 	ldw	r5,80(sp)
 1001fa0:	d9001217 	ldw	r4,72(sp)
 1001fa4:	10034000 	call	1003400 <_ZNSt12domain_errorC1ERKSs>
 1001fa8:	d8800117 	ldw	r2,4(sp)
 1001fac:	00c040b4 	movhi	r3,258
 1001fb0:	18dbd604 	addi	r3,r3,28504
 1001fb4:	10bffd04 	addi	r2,r2,-12
 1001fb8:	d8800f15 	stw	r2,60(sp)
 1001fbc:	10c0081e 	bne	r2,r3,1001fe0 <_ZSt20__throw_domain_errorPKc+0xc0>
 1001fc0:	d9001217 	ldw	r4,72(sp)
 1001fc4:	00bfffc4 	movi	r2,-1
 1001fc8:	014040b4 	movhi	r5,258
 1001fcc:	297be704 	addi	r5,r5,-4196
 1001fd0:	01804034 	movhi	r6,256
 1001fd4:	318a2f04 	addi	r6,r6,10428
 1001fd8:	d8800315 	stw	r2,12(sp)
 1001fdc:	1008b240 	call	1008b24 <__cxa_throw>
 1001fe0:	00800044 	movi	r2,1
 1001fe4:	d8800315 	stw	r2,12(sp)
 1001fe8:	d8800f17 	ldw	r2,60(sp)
 1001fec:	017fffc4 	movi	r5,-1
 1001ff0:	11000204 	addi	r4,r2,8
 1001ff4:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1001ff8:	00bff116 	blt	zero,r2,1001fc0 <_ZSt20__throw_domain_errorPKc+0xa0>
 1001ffc:	d9000f17 	ldw	r4,60(sp)
 1002000:	d80b883a 	mov	r5,sp
 1002004:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002008:	003fed06 	br	1001fc0 <_ZSt20__throw_domain_errorPKc+0xa0>
 100200c:	d8800417 	ldw	r2,16(sp)
 1002010:	d8c00317 	ldw	r3,12(sp)
 1002014:	d9000517 	ldw	r4,20(sp)
 1002018:	d8801515 	stw	r2,84(sp)
 100201c:	00800044 	movi	r2,1
 1002020:	18800426 	beq	r3,r2,1002034 <_ZSt20__throw_domain_errorPKc+0x114>
 1002024:	00800084 	movi	r2,2
 1002028:	18800826 	beq	r3,r2,100204c <_ZSt20__throw_domain_errorPKc+0x12c>
 100202c:	008000c4 	movi	r2,3
 1002030:	18800226 	beq	r3,r2,100203c <_ZSt20__throw_domain_errorPKc+0x11c>
 1002034:	00bfffc4 	movi	r2,-1
 1002038:	20801126 	beq	r4,r2,1002080 <_ZSt20__throw_domain_errorPKc+0x160>
 100203c:	d9001517 	ldw	r4,84(sp)
 1002040:	00bfffc4 	movi	r2,-1
 1002044:	d8800315 	stw	r2,12(sp)
 1002048:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 100204c:	d9001217 	ldw	r4,72(sp)
 1002050:	1008e6c0 	call	1008e6c <__cxa_free_exception>
 1002054:	d8801517 	ldw	r2,84(sp)
 1002058:	00c040b4 	movhi	r3,258
 100205c:	18dbd604 	addi	r3,r3,28504
 1002060:	d8801115 	stw	r2,68(sp)
 1002064:	d8800117 	ldw	r2,4(sp)
 1002068:	10bffd04 	addi	r2,r2,-12
 100206c:	d8801015 	stw	r2,64(sp)
 1002070:	10c0041e 	bne	r2,r3,1002084 <_ZSt20__throw_domain_errorPKc+0x164>
 1002074:	d8801117 	ldw	r2,68(sp)
 1002078:	d8801515 	stw	r2,84(sp)
 100207c:	003fef06 	br	100203c <_ZSt20__throw_domain_errorPKc+0x11c>
 1002080:	10088800 	call	1008880 <_ZSt9terminatev>
 1002084:	00800084 	movi	r2,2
 1002088:	d8800315 	stw	r2,12(sp)
 100208c:	d8801017 	ldw	r2,64(sp)
 1002090:	017fffc4 	movi	r5,-1
 1002094:	11000204 	addi	r4,r2,8
 1002098:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100209c:	00bff516 	blt	zero,r2,1002074 <_ZSt20__throw_domain_errorPKc+0x154>
 10020a0:	d9001017 	ldw	r4,64(sp)
 10020a4:	d9400044 	addi	r5,sp,1
 10020a8:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10020ac:	003ff106 	br	1002074 <_ZSt20__throw_domain_errorPKc+0x154>

010020b0 <_ZSt19__throw_range_errorPKc>:
 10020b0:	deffe704 	addi	sp,sp,-100
 10020b4:	00804074 	movhi	r2,257
 10020b8:	10a0b504 	addi	r2,r2,-32044
 10020bc:	d8800815 	stw	r2,32(sp)
 10020c0:	00c040b4 	movhi	r3,258
 10020c4:	18fae204 	addi	r3,r3,-5240
 10020c8:	00804034 	movhi	r2,256
 10020cc:	10886704 	addi	r2,r2,8604
 10020d0:	d9001315 	stw	r4,76(sp)
 10020d4:	d9000204 	addi	r4,sp,8
 10020d8:	d8800b15 	stw	r2,44(sp)
 10020dc:	dfc01815 	stw	ra,96(sp)
 10020e0:	df001715 	stw	fp,92(sp)
 10020e4:	ddc01615 	stw	r23,88(sp)
 10020e8:	d8c00915 	stw	r3,36(sp)
 10020ec:	dec00a15 	stw	sp,40(sp)
 10020f0:	dec00c15 	stw	sp,48(sp)
 10020f4:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 10020f8:	00800104 	movi	r2,4
 10020fc:	d8800315 	stw	r2,12(sp)
 1002100:	d885883a 	add	r2,sp,r2
 1002104:	d8801415 	stw	r2,80(sp)
 1002108:	d9401317 	ldw	r5,76(sp)
 100210c:	1009883a 	mov	r4,r2
 1002110:	d9800084 	addi	r6,sp,2
 1002114:	10055ec0 	call	10055ec <_ZNSsC1EPKcRKSaIcE>
 1002118:	01000204 	movi	r4,8
 100211c:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 1002120:	d8801215 	stw	r2,72(sp)
 1002124:	008000c4 	movi	r2,3
 1002128:	d8800315 	stw	r2,12(sp)
 100212c:	d9401417 	ldw	r5,80(sp)
 1002130:	d9001217 	ldw	r4,72(sp)
 1002134:	10031200 	call	1003120 <_ZNSt11range_errorC1ERKSs>
 1002138:	d8800117 	ldw	r2,4(sp)
 100213c:	00c040b4 	movhi	r3,258
 1002140:	18dbd604 	addi	r3,r3,28504
 1002144:	10bffd04 	addi	r2,r2,-12
 1002148:	d8800f15 	stw	r2,60(sp)
 100214c:	10c0081e 	bne	r2,r3,1002170 <_ZSt19__throw_range_errorPKc+0xc0>
 1002150:	d9001217 	ldw	r4,72(sp)
 1002154:	00bfffc4 	movi	r2,-1
 1002158:	014040b4 	movhi	r5,258
 100215c:	297bb304 	addi	r5,r5,-4404
 1002160:	01804034 	movhi	r6,256
 1002164:	3189eb04 	addi	r6,r6,10156
 1002168:	d8800315 	stw	r2,12(sp)
 100216c:	1008b240 	call	1008b24 <__cxa_throw>
 1002170:	00800044 	movi	r2,1
 1002174:	d8800315 	stw	r2,12(sp)
 1002178:	d8800f17 	ldw	r2,60(sp)
 100217c:	017fffc4 	movi	r5,-1
 1002180:	11000204 	addi	r4,r2,8
 1002184:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002188:	00bff116 	blt	zero,r2,1002150 <_ZSt19__throw_range_errorPKc+0xa0>
 100218c:	d9000f17 	ldw	r4,60(sp)
 1002190:	d80b883a 	mov	r5,sp
 1002194:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002198:	003fed06 	br	1002150 <_ZSt19__throw_range_errorPKc+0xa0>
 100219c:	d8800417 	ldw	r2,16(sp)
 10021a0:	d8c00317 	ldw	r3,12(sp)
 10021a4:	d9000517 	ldw	r4,20(sp)
 10021a8:	d8801515 	stw	r2,84(sp)
 10021ac:	00800044 	movi	r2,1
 10021b0:	18800426 	beq	r3,r2,10021c4 <_ZSt19__throw_range_errorPKc+0x114>
 10021b4:	00800084 	movi	r2,2
 10021b8:	18800826 	beq	r3,r2,10021dc <_ZSt19__throw_range_errorPKc+0x12c>
 10021bc:	008000c4 	movi	r2,3
 10021c0:	18800226 	beq	r3,r2,10021cc <_ZSt19__throw_range_errorPKc+0x11c>
 10021c4:	00bfffc4 	movi	r2,-1
 10021c8:	20801126 	beq	r4,r2,1002210 <_ZSt19__throw_range_errorPKc+0x160>
 10021cc:	d9001517 	ldw	r4,84(sp)
 10021d0:	00bfffc4 	movi	r2,-1
 10021d4:	d8800315 	stw	r2,12(sp)
 10021d8:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 10021dc:	d9001217 	ldw	r4,72(sp)
 10021e0:	1008e6c0 	call	1008e6c <__cxa_free_exception>
 10021e4:	d8801517 	ldw	r2,84(sp)
 10021e8:	00c040b4 	movhi	r3,258
 10021ec:	18dbd604 	addi	r3,r3,28504
 10021f0:	d8801115 	stw	r2,68(sp)
 10021f4:	d8800117 	ldw	r2,4(sp)
 10021f8:	10bffd04 	addi	r2,r2,-12
 10021fc:	d8801015 	stw	r2,64(sp)
 1002200:	10c0041e 	bne	r2,r3,1002214 <_ZSt19__throw_range_errorPKc+0x164>
 1002204:	d8801117 	ldw	r2,68(sp)
 1002208:	d8801515 	stw	r2,84(sp)
 100220c:	003fef06 	br	10021cc <_ZSt19__throw_range_errorPKc+0x11c>
 1002210:	10088800 	call	1008880 <_ZSt9terminatev>
 1002214:	00800084 	movi	r2,2
 1002218:	d8800315 	stw	r2,12(sp)
 100221c:	d8801017 	ldw	r2,64(sp)
 1002220:	017fffc4 	movi	r5,-1
 1002224:	11000204 	addi	r4,r2,8
 1002228:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100222c:	00bff516 	blt	zero,r2,1002204 <_ZSt19__throw_range_errorPKc+0x154>
 1002230:	d9001017 	ldw	r4,64(sp)
 1002234:	d9400044 	addi	r5,sp,1
 1002238:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100223c:	003ff106 	br	1002204 <_ZSt19__throw_range_errorPKc+0x154>

01002240 <_ZSt21__throw_runtime_errorPKc>:
 1002240:	deffe704 	addi	sp,sp,-100
 1002244:	00804074 	movhi	r2,257
 1002248:	10a0b504 	addi	r2,r2,-32044
 100224c:	d8800815 	stw	r2,32(sp)
 1002250:	00c040b4 	movhi	r3,258
 1002254:	18fae804 	addi	r3,r3,-5216
 1002258:	00804034 	movhi	r2,256
 100225c:	1088cb04 	addi	r2,r2,9004
 1002260:	d9001315 	stw	r4,76(sp)
 1002264:	d9000204 	addi	r4,sp,8
 1002268:	d8800b15 	stw	r2,44(sp)
 100226c:	dfc01815 	stw	ra,96(sp)
 1002270:	df001715 	stw	fp,92(sp)
 1002274:	ddc01615 	stw	r23,88(sp)
 1002278:	d8c00915 	stw	r3,36(sp)
 100227c:	dec00a15 	stw	sp,40(sp)
 1002280:	dec00c15 	stw	sp,48(sp)
 1002284:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1002288:	00800104 	movi	r2,4
 100228c:	d8800315 	stw	r2,12(sp)
 1002290:	d885883a 	add	r2,sp,r2
 1002294:	d8801415 	stw	r2,80(sp)
 1002298:	d9401317 	ldw	r5,76(sp)
 100229c:	1009883a 	mov	r4,r2
 10022a0:	d9800084 	addi	r6,sp,2
 10022a4:	10055ec0 	call	10055ec <_ZNSsC1EPKcRKSaIcE>
 10022a8:	01000204 	movi	r4,8
 10022ac:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 10022b0:	d8801215 	stw	r2,72(sp)
 10022b4:	008000c4 	movi	r2,3
 10022b8:	d8800315 	stw	r2,12(sp)
 10022bc:	d9401417 	ldw	r5,80(sp)
 10022c0:	d9001217 	ldw	r4,72(sp)
 10022c4:	10034680 	call	1003468 <_ZNSt13runtime_errorC1ERKSs>
 10022c8:	d8800117 	ldw	r2,4(sp)
 10022cc:	00c040b4 	movhi	r3,258
 10022d0:	18dbd604 	addi	r3,r3,28504
 10022d4:	10bffd04 	addi	r2,r2,-12
 10022d8:	d8800f15 	stw	r2,60(sp)
 10022dc:	10c0081e 	bne	r2,r3,1002300 <_ZSt21__throw_runtime_errorPKc+0xc0>
 10022e0:	d9001217 	ldw	r4,72(sp)
 10022e4:	00bfffc4 	movi	r2,-1
 10022e8:	014040b4 	movhi	r5,258
 10022ec:	297c1104 	addi	r5,r5,-4028
 10022f0:	01804034 	movhi	r6,256
 10022f4:	318d4604 	addi	r6,r6,13592
 10022f8:	d8800315 	stw	r2,12(sp)
 10022fc:	1008b240 	call	1008b24 <__cxa_throw>
 1002300:	00800044 	movi	r2,1
 1002304:	d8800315 	stw	r2,12(sp)
 1002308:	d8800f17 	ldw	r2,60(sp)
 100230c:	017fffc4 	movi	r5,-1
 1002310:	11000204 	addi	r4,r2,8
 1002314:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002318:	00bff116 	blt	zero,r2,10022e0 <_ZSt21__throw_runtime_errorPKc+0xa0>
 100231c:	d9000f17 	ldw	r4,60(sp)
 1002320:	d80b883a 	mov	r5,sp
 1002324:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002328:	003fed06 	br	10022e0 <_ZSt21__throw_runtime_errorPKc+0xa0>
 100232c:	d8800417 	ldw	r2,16(sp)
 1002330:	d8c00317 	ldw	r3,12(sp)
 1002334:	d9000517 	ldw	r4,20(sp)
 1002338:	d8801515 	stw	r2,84(sp)
 100233c:	00800044 	movi	r2,1
 1002340:	18800426 	beq	r3,r2,1002354 <_ZSt21__throw_runtime_errorPKc+0x114>
 1002344:	00800084 	movi	r2,2
 1002348:	18800826 	beq	r3,r2,100236c <_ZSt21__throw_runtime_errorPKc+0x12c>
 100234c:	008000c4 	movi	r2,3
 1002350:	18800226 	beq	r3,r2,100235c <_ZSt21__throw_runtime_errorPKc+0x11c>
 1002354:	00bfffc4 	movi	r2,-1
 1002358:	20801126 	beq	r4,r2,10023a0 <_ZSt21__throw_runtime_errorPKc+0x160>
 100235c:	d9001517 	ldw	r4,84(sp)
 1002360:	00bfffc4 	movi	r2,-1
 1002364:	d8800315 	stw	r2,12(sp)
 1002368:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 100236c:	d9001217 	ldw	r4,72(sp)
 1002370:	1008e6c0 	call	1008e6c <__cxa_free_exception>
 1002374:	d8801517 	ldw	r2,84(sp)
 1002378:	00c040b4 	movhi	r3,258
 100237c:	18dbd604 	addi	r3,r3,28504
 1002380:	d8801115 	stw	r2,68(sp)
 1002384:	d8800117 	ldw	r2,4(sp)
 1002388:	10bffd04 	addi	r2,r2,-12
 100238c:	d8801015 	stw	r2,64(sp)
 1002390:	10c0041e 	bne	r2,r3,10023a4 <_ZSt21__throw_runtime_errorPKc+0x164>
 1002394:	d8801117 	ldw	r2,68(sp)
 1002398:	d8801515 	stw	r2,84(sp)
 100239c:	003fef06 	br	100235c <_ZSt21__throw_runtime_errorPKc+0x11c>
 10023a0:	10088800 	call	1008880 <_ZSt9terminatev>
 10023a4:	00800084 	movi	r2,2
 10023a8:	d8800315 	stw	r2,12(sp)
 10023ac:	d8801017 	ldw	r2,64(sp)
 10023b0:	017fffc4 	movi	r5,-1
 10023b4:	11000204 	addi	r4,r2,8
 10023b8:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10023bc:	00bff516 	blt	zero,r2,1002394 <_ZSt21__throw_runtime_errorPKc+0x154>
 10023c0:	d9001017 	ldw	r4,64(sp)
 10023c4:	d9400044 	addi	r5,sp,1
 10023c8:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10023cc:	003ff106 	br	1002394 <_ZSt21__throw_runtime_errorPKc+0x154>

010023d0 <_ZSt20__throw_out_of_rangePKc>:
 10023d0:	deffe704 	addi	sp,sp,-100
 10023d4:	00804074 	movhi	r2,257
 10023d8:	10a0b504 	addi	r2,r2,-32044
 10023dc:	d8800815 	stw	r2,32(sp)
 10023e0:	00c040b4 	movhi	r3,258
 10023e4:	18faee04 	addi	r3,r3,-5192
 10023e8:	00804034 	movhi	r2,256
 10023ec:	10892f04 	addi	r2,r2,9404
 10023f0:	d9001315 	stw	r4,76(sp)
 10023f4:	d9000204 	addi	r4,sp,8
 10023f8:	d8800b15 	stw	r2,44(sp)
 10023fc:	dfc01815 	stw	ra,96(sp)
 1002400:	df001715 	stw	fp,92(sp)
 1002404:	ddc01615 	stw	r23,88(sp)
 1002408:	d8c00915 	stw	r3,36(sp)
 100240c:	dec00a15 	stw	sp,40(sp)
 1002410:	dec00c15 	stw	sp,48(sp)
 1002414:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1002418:	00800104 	movi	r2,4
 100241c:	d8800315 	stw	r2,12(sp)
 1002420:	d885883a 	add	r2,sp,r2
 1002424:	d8801415 	stw	r2,80(sp)
 1002428:	d9401317 	ldw	r5,76(sp)
 100242c:	1009883a 	mov	r4,r2
 1002430:	d9800084 	addi	r6,sp,2
 1002434:	10055ec0 	call	10055ec <_ZNSsC1EPKcRKSaIcE>
 1002438:	01000204 	movi	r4,8
 100243c:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 1002440:	d8801215 	stw	r2,72(sp)
 1002444:	008000c4 	movi	r2,3
 1002448:	d8800315 	stw	r2,12(sp)
 100244c:	d9401417 	ldw	r5,80(sp)
 1002450:	d9001217 	ldw	r4,72(sp)
 1002454:	10032e00 	call	10032e0 <_ZNSt12out_of_rangeC1ERKSs>
 1002458:	d8800117 	ldw	r2,4(sp)
 100245c:	00c040b4 	movhi	r3,258
 1002460:	18dbd604 	addi	r3,r3,28504
 1002464:	10bffd04 	addi	r2,r2,-12
 1002468:	d8800f15 	stw	r2,60(sp)
 100246c:	10c0081e 	bne	r2,r3,1002490 <_ZSt20__throw_out_of_rangePKc+0xc0>
 1002470:	d9001217 	ldw	r4,72(sp)
 1002474:	00bfffc4 	movi	r2,-1
 1002478:	014040b4 	movhi	r5,258
 100247c:	297bbf04 	addi	r5,r5,-4356
 1002480:	01804034 	movhi	r6,256
 1002484:	3189fc04 	addi	r6,r6,10224
 1002488:	d8800315 	stw	r2,12(sp)
 100248c:	1008b240 	call	1008b24 <__cxa_throw>
 1002490:	00800044 	movi	r2,1
 1002494:	d8800315 	stw	r2,12(sp)
 1002498:	d8800f17 	ldw	r2,60(sp)
 100249c:	017fffc4 	movi	r5,-1
 10024a0:	11000204 	addi	r4,r2,8
 10024a4:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10024a8:	00bff116 	blt	zero,r2,1002470 <_ZSt20__throw_out_of_rangePKc+0xa0>
 10024ac:	d9000f17 	ldw	r4,60(sp)
 10024b0:	d80b883a 	mov	r5,sp
 10024b4:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10024b8:	003fed06 	br	1002470 <_ZSt20__throw_out_of_rangePKc+0xa0>
 10024bc:	d8800417 	ldw	r2,16(sp)
 10024c0:	d8c00317 	ldw	r3,12(sp)
 10024c4:	d9000517 	ldw	r4,20(sp)
 10024c8:	d8801515 	stw	r2,84(sp)
 10024cc:	00800044 	movi	r2,1
 10024d0:	18800426 	beq	r3,r2,10024e4 <_ZSt20__throw_out_of_rangePKc+0x114>
 10024d4:	00800084 	movi	r2,2
 10024d8:	18800826 	beq	r3,r2,10024fc <_ZSt20__throw_out_of_rangePKc+0x12c>
 10024dc:	008000c4 	movi	r2,3
 10024e0:	18800226 	beq	r3,r2,10024ec <_ZSt20__throw_out_of_rangePKc+0x11c>
 10024e4:	00bfffc4 	movi	r2,-1
 10024e8:	20801126 	beq	r4,r2,1002530 <_ZSt20__throw_out_of_rangePKc+0x160>
 10024ec:	d9001517 	ldw	r4,84(sp)
 10024f0:	00bfffc4 	movi	r2,-1
 10024f4:	d8800315 	stw	r2,12(sp)
 10024f8:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 10024fc:	d9001217 	ldw	r4,72(sp)
 1002500:	1008e6c0 	call	1008e6c <__cxa_free_exception>
 1002504:	d8801517 	ldw	r2,84(sp)
 1002508:	00c040b4 	movhi	r3,258
 100250c:	18dbd604 	addi	r3,r3,28504
 1002510:	d8801115 	stw	r2,68(sp)
 1002514:	d8800117 	ldw	r2,4(sp)
 1002518:	10bffd04 	addi	r2,r2,-12
 100251c:	d8801015 	stw	r2,64(sp)
 1002520:	10c0041e 	bne	r2,r3,1002534 <_ZSt20__throw_out_of_rangePKc+0x164>
 1002524:	d8801117 	ldw	r2,68(sp)
 1002528:	d8801515 	stw	r2,84(sp)
 100252c:	003fef06 	br	10024ec <_ZSt20__throw_out_of_rangePKc+0x11c>
 1002530:	10088800 	call	1008880 <_ZSt9terminatev>
 1002534:	00800084 	movi	r2,2
 1002538:	d8800315 	stw	r2,12(sp)
 100253c:	d8801017 	ldw	r2,64(sp)
 1002540:	017fffc4 	movi	r5,-1
 1002544:	11000204 	addi	r4,r2,8
 1002548:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100254c:	00bff516 	blt	zero,r2,1002524 <_ZSt20__throw_out_of_rangePKc+0x154>
 1002550:	d9001017 	ldw	r4,64(sp)
 1002554:	d9400044 	addi	r5,sp,1
 1002558:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100255c:	003ff106 	br	1002524 <_ZSt20__throw_out_of_rangePKc+0x154>

01002560 <_ZSt20__throw_length_errorPKc>:
 1002560:	deffe704 	addi	sp,sp,-100
 1002564:	00804074 	movhi	r2,257
 1002568:	10a0b504 	addi	r2,r2,-32044
 100256c:	d8800815 	stw	r2,32(sp)
 1002570:	00c040b4 	movhi	r3,258
 1002574:	18faf404 	addi	r3,r3,-5168
 1002578:	00804034 	movhi	r2,256
 100257c:	10899304 	addi	r2,r2,9804
 1002580:	d9001315 	stw	r4,76(sp)
 1002584:	d9000204 	addi	r4,sp,8
 1002588:	d8800b15 	stw	r2,44(sp)
 100258c:	dfc01815 	stw	ra,96(sp)
 1002590:	df001715 	stw	fp,92(sp)
 1002594:	ddc01615 	stw	r23,88(sp)
 1002598:	d8c00915 	stw	r3,36(sp)
 100259c:	dec00a15 	stw	sp,40(sp)
 10025a0:	dec00c15 	stw	sp,48(sp)
 10025a4:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 10025a8:	00800104 	movi	r2,4
 10025ac:	d8800315 	stw	r2,12(sp)
 10025b0:	d885883a 	add	r2,sp,r2
 10025b4:	d8801415 	stw	r2,80(sp)
 10025b8:	d9401317 	ldw	r5,76(sp)
 10025bc:	1009883a 	mov	r4,r2
 10025c0:	d9800084 	addi	r6,sp,2
 10025c4:	10055ec0 	call	10055ec <_ZNSsC1EPKcRKSaIcE>
 10025c8:	01000204 	movi	r4,8
 10025cc:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 10025d0:	d8801215 	stw	r2,72(sp)
 10025d4:	008000c4 	movi	r2,3
 10025d8:	d8800315 	stw	r2,12(sp)
 10025dc:	d9401417 	ldw	r5,80(sp)
 10025e0:	d9001217 	ldw	r4,72(sp)
 10025e4:	10033400 	call	1003340 <_ZNSt12length_errorC1ERKSs>
 10025e8:	d8800117 	ldw	r2,4(sp)
 10025ec:	00c040b4 	movhi	r3,258
 10025f0:	18dbd604 	addi	r3,r3,28504
 10025f4:	10bffd04 	addi	r2,r2,-12
 10025f8:	d8800f15 	stw	r2,60(sp)
 10025fc:	10c0081e 	bne	r2,r3,1002620 <_ZSt20__throw_length_errorPKc+0xc0>
 1002600:	d9001217 	ldw	r4,72(sp)
 1002604:	00bfffc4 	movi	r2,-1
 1002608:	014040b4 	movhi	r5,258
 100260c:	297bcc04 	addi	r5,r5,-4304
 1002610:	01804034 	movhi	r6,256
 1002614:	318a0d04 	addi	r6,r6,10292
 1002618:	d8800315 	stw	r2,12(sp)
 100261c:	1008b240 	call	1008b24 <__cxa_throw>
 1002620:	00800044 	movi	r2,1
 1002624:	d8800315 	stw	r2,12(sp)
 1002628:	d8800f17 	ldw	r2,60(sp)
 100262c:	017fffc4 	movi	r5,-1
 1002630:	11000204 	addi	r4,r2,8
 1002634:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002638:	00bff116 	blt	zero,r2,1002600 <_ZSt20__throw_length_errorPKc+0xa0>
 100263c:	d9000f17 	ldw	r4,60(sp)
 1002640:	d80b883a 	mov	r5,sp
 1002644:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002648:	003fed06 	br	1002600 <_ZSt20__throw_length_errorPKc+0xa0>
 100264c:	d8800417 	ldw	r2,16(sp)
 1002650:	d8c00317 	ldw	r3,12(sp)
 1002654:	d9000517 	ldw	r4,20(sp)
 1002658:	d8801515 	stw	r2,84(sp)
 100265c:	00800044 	movi	r2,1
 1002660:	18800426 	beq	r3,r2,1002674 <_ZSt20__throw_length_errorPKc+0x114>
 1002664:	00800084 	movi	r2,2
 1002668:	18800826 	beq	r3,r2,100268c <_ZSt20__throw_length_errorPKc+0x12c>
 100266c:	008000c4 	movi	r2,3
 1002670:	18800226 	beq	r3,r2,100267c <_ZSt20__throw_length_errorPKc+0x11c>
 1002674:	00bfffc4 	movi	r2,-1
 1002678:	20801126 	beq	r4,r2,10026c0 <_ZSt20__throw_length_errorPKc+0x160>
 100267c:	d9001517 	ldw	r4,84(sp)
 1002680:	00bfffc4 	movi	r2,-1
 1002684:	d8800315 	stw	r2,12(sp)
 1002688:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 100268c:	d9001217 	ldw	r4,72(sp)
 1002690:	1008e6c0 	call	1008e6c <__cxa_free_exception>
 1002694:	d8801517 	ldw	r2,84(sp)
 1002698:	00c040b4 	movhi	r3,258
 100269c:	18dbd604 	addi	r3,r3,28504
 10026a0:	d8801115 	stw	r2,68(sp)
 10026a4:	d8800117 	ldw	r2,4(sp)
 10026a8:	10bffd04 	addi	r2,r2,-12
 10026ac:	d8801015 	stw	r2,64(sp)
 10026b0:	10c0041e 	bne	r2,r3,10026c4 <_ZSt20__throw_length_errorPKc+0x164>
 10026b4:	d8801117 	ldw	r2,68(sp)
 10026b8:	d8801515 	stw	r2,84(sp)
 10026bc:	003fef06 	br	100267c <_ZSt20__throw_length_errorPKc+0x11c>
 10026c0:	10088800 	call	1008880 <_ZSt9terminatev>
 10026c4:	00800084 	movi	r2,2
 10026c8:	d8800315 	stw	r2,12(sp)
 10026cc:	d8801017 	ldw	r2,64(sp)
 10026d0:	017fffc4 	movi	r5,-1
 10026d4:	11000204 	addi	r4,r2,8
 10026d8:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10026dc:	00bff516 	blt	zero,r2,10026b4 <_ZSt20__throw_length_errorPKc+0x154>
 10026e0:	d9001017 	ldw	r4,64(sp)
 10026e4:	d9400044 	addi	r5,sp,1
 10026e8:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10026ec:	003ff106 	br	10026b4 <_ZSt20__throw_length_errorPKc+0x154>

010026f0 <_ZNSt15underflow_errorD0Ev>:
 10026f0:	defffe04 	addi	sp,sp,-8
 10026f4:	008040b4 	movhi	r2,258
 10026f8:	10bba304 	addi	r2,r2,-4468
 10026fc:	dc400015 	stw	r17,0(sp)
 1002700:	20800015 	stw	r2,0(r4)
 1002704:	2023883a 	mov	r17,r4
 1002708:	dfc00115 	stw	ra,4(sp)
 100270c:	100361c0 	call	100361c <_ZNSt13runtime_errorD2Ev>
 1002710:	8809883a 	mov	r4,r17
 1002714:	dfc00117 	ldw	ra,4(sp)
 1002718:	dc400017 	ldw	r17,0(sp)
 100271c:	dec00204 	addi	sp,sp,8
 1002720:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

01002724 <_ZNSt15underflow_errorD1Ev>:
 1002724:	008040b4 	movhi	r2,258
 1002728:	10bba304 	addi	r2,r2,-4468
 100272c:	20800015 	stw	r2,0(r4)
 1002730:	100361c1 	jmpi	100361c <_ZNSt13runtime_errorD2Ev>

01002734 <_ZNSt14overflow_errorD0Ev>:
 1002734:	defffe04 	addi	sp,sp,-8
 1002738:	008040b4 	movhi	r2,258
 100273c:	10bbb004 	addi	r2,r2,-4416
 1002740:	dc400015 	stw	r17,0(sp)
 1002744:	20800015 	stw	r2,0(r4)
 1002748:	2023883a 	mov	r17,r4
 100274c:	dfc00115 	stw	ra,4(sp)
 1002750:	100361c0 	call	100361c <_ZNSt13runtime_errorD2Ev>
 1002754:	8809883a 	mov	r4,r17
 1002758:	dfc00117 	ldw	ra,4(sp)
 100275c:	dc400017 	ldw	r17,0(sp)
 1002760:	dec00204 	addi	sp,sp,8
 1002764:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

01002768 <_ZNSt14overflow_errorD1Ev>:
 1002768:	008040b4 	movhi	r2,258
 100276c:	10bbb004 	addi	r2,r2,-4416
 1002770:	20800015 	stw	r2,0(r4)
 1002774:	100361c1 	jmpi	100361c <_ZNSt13runtime_errorD2Ev>

01002778 <_ZNSt11range_errorD0Ev>:
 1002778:	defffe04 	addi	sp,sp,-8
 100277c:	008040b4 	movhi	r2,258
 1002780:	10bbbc04 	addi	r2,r2,-4368
 1002784:	dc400015 	stw	r17,0(sp)
 1002788:	20800015 	stw	r2,0(r4)
 100278c:	2023883a 	mov	r17,r4
 1002790:	dfc00115 	stw	ra,4(sp)
 1002794:	100361c0 	call	100361c <_ZNSt13runtime_errorD2Ev>
 1002798:	8809883a 	mov	r4,r17
 100279c:	dfc00117 	ldw	ra,4(sp)
 10027a0:	dc400017 	ldw	r17,0(sp)
 10027a4:	dec00204 	addi	sp,sp,8
 10027a8:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

010027ac <_ZNSt11range_errorD1Ev>:
 10027ac:	008040b4 	movhi	r2,258
 10027b0:	10bbbc04 	addi	r2,r2,-4368
 10027b4:	20800015 	stw	r2,0(r4)
 10027b8:	100361c1 	jmpi	100361c <_ZNSt13runtime_errorD2Ev>

010027bc <_ZNSt12out_of_rangeD0Ev>:
 10027bc:	defffe04 	addi	sp,sp,-8
 10027c0:	008040b4 	movhi	r2,258
 10027c4:	10bbc904 	addi	r2,r2,-4316
 10027c8:	dc400015 	stw	r17,0(sp)
 10027cc:	20800015 	stw	r2,0(r4)
 10027d0:	2023883a 	mov	r17,r4
 10027d4:	dfc00115 	stw	ra,4(sp)
 10027d8:	100382c0 	call	100382c <_ZNSt11logic_errorD2Ev>
 10027dc:	8809883a 	mov	r4,r17
 10027e0:	dfc00117 	ldw	ra,4(sp)
 10027e4:	dc400017 	ldw	r17,0(sp)
 10027e8:	dec00204 	addi	sp,sp,8
 10027ec:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

010027f0 <_ZNSt12out_of_rangeD1Ev>:
 10027f0:	008040b4 	movhi	r2,258
 10027f4:	10bbc904 	addi	r2,r2,-4316
 10027f8:	20800015 	stw	r2,0(r4)
 10027fc:	100382c1 	jmpi	100382c <_ZNSt11logic_errorD2Ev>

01002800 <_ZNSt12length_errorD0Ev>:
 1002800:	defffe04 	addi	sp,sp,-8
 1002804:	008040b4 	movhi	r2,258
 1002808:	10bbd604 	addi	r2,r2,-4264
 100280c:	dc400015 	stw	r17,0(sp)
 1002810:	20800015 	stw	r2,0(r4)
 1002814:	2023883a 	mov	r17,r4
 1002818:	dfc00115 	stw	ra,4(sp)
 100281c:	100382c0 	call	100382c <_ZNSt11logic_errorD2Ev>
 1002820:	8809883a 	mov	r4,r17
 1002824:	dfc00117 	ldw	ra,4(sp)
 1002828:	dc400017 	ldw	r17,0(sp)
 100282c:	dec00204 	addi	sp,sp,8
 1002830:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

01002834 <_ZNSt12length_errorD1Ev>:
 1002834:	008040b4 	movhi	r2,258
 1002838:	10bbd604 	addi	r2,r2,-4264
 100283c:	20800015 	stw	r2,0(r4)
 1002840:	100382c1 	jmpi	100382c <_ZNSt11logic_errorD2Ev>

01002844 <_ZNSt16invalid_argumentD0Ev>:
 1002844:	defffe04 	addi	sp,sp,-8
 1002848:	008040b4 	movhi	r2,258
 100284c:	10bbe404 	addi	r2,r2,-4208
 1002850:	dc400015 	stw	r17,0(sp)
 1002854:	20800015 	stw	r2,0(r4)
 1002858:	2023883a 	mov	r17,r4
 100285c:	dfc00115 	stw	ra,4(sp)
 1002860:	100382c0 	call	100382c <_ZNSt11logic_errorD2Ev>
 1002864:	8809883a 	mov	r4,r17
 1002868:	dfc00117 	ldw	ra,4(sp)
 100286c:	dc400017 	ldw	r17,0(sp)
 1002870:	dec00204 	addi	sp,sp,8
 1002874:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

01002878 <_ZNSt16invalid_argumentD1Ev>:
 1002878:	008040b4 	movhi	r2,258
 100287c:	10bbe404 	addi	r2,r2,-4208
 1002880:	20800015 	stw	r2,0(r4)
 1002884:	100382c1 	jmpi	100382c <_ZNSt11logic_errorD2Ev>

01002888 <_ZNSt12domain_errorD0Ev>:
 1002888:	defffe04 	addi	sp,sp,-8
 100288c:	008040b4 	movhi	r2,258
 1002890:	10bbf104 	addi	r2,r2,-4156
 1002894:	dc400015 	stw	r17,0(sp)
 1002898:	20800015 	stw	r2,0(r4)
 100289c:	2023883a 	mov	r17,r4
 10028a0:	dfc00115 	stw	ra,4(sp)
 10028a4:	100382c0 	call	100382c <_ZNSt11logic_errorD2Ev>
 10028a8:	8809883a 	mov	r4,r17
 10028ac:	dfc00117 	ldw	ra,4(sp)
 10028b0:	dc400017 	ldw	r17,0(sp)
 10028b4:	dec00204 	addi	sp,sp,8
 10028b8:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

010028bc <_ZNSt12domain_errorD1Ev>:
 10028bc:	008040b4 	movhi	r2,258
 10028c0:	10bbf104 	addi	r2,r2,-4156
 10028c4:	20800015 	stw	r2,0(r4)
 10028c8:	100382c1 	jmpi	100382c <_ZNSt11logic_errorD2Ev>

010028cc <_ZNKSt8ios_base7failure4whatEv>:
 10028cc:	20800117 	ldw	r2,4(r4)
 10028d0:	f800283a 	ret

010028d4 <_ZNSt8ios_base7failureD1Ev>:
 10028d4:	deffeb04 	addi	sp,sp,-84
 10028d8:	00804074 	movhi	r2,257
 10028dc:	10a0b504 	addi	r2,r2,-32044
 10028e0:	00c040b4 	movhi	r3,258
 10028e4:	18fafa04 	addi	r3,r3,-5144
 10028e8:	d8800715 	stw	r2,28(sp)
 10028ec:	d9001015 	stw	r4,64(sp)
 10028f0:	00804034 	movhi	r2,256
 10028f4:	108a6604 	addi	r2,r2,10648
 10028f8:	d9000104 	addi	r4,sp,4
 10028fc:	d8c00815 	stw	r3,32(sp)
 1002900:	d8800a15 	stw	r2,40(sp)
 1002904:	dfc01415 	stw	ra,80(sp)
 1002908:	df001315 	stw	fp,76(sp)
 100290c:	ddc01215 	stw	r23,72(sp)
 1002910:	dec00915 	stw	sp,36(sp)
 1002914:	dec00b15 	stw	sp,44(sp)
 1002918:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 100291c:	d8c01017 	ldw	r3,64(sp)
 1002920:	18800117 	ldw	r2,4(r3)
 1002924:	00c040b4 	movhi	r3,258
 1002928:	18fbf604 	addi	r3,r3,-4136
 100292c:	10bffd04 	addi	r2,r2,-12
 1002930:	d8800e15 	stw	r2,56(sp)
 1002934:	d8801017 	ldw	r2,64(sp)
 1002938:	10c00015 	stw	r3,0(r2)
 100293c:	d8c00e17 	ldw	r3,56(sp)
 1002940:	008040b4 	movhi	r2,258
 1002944:	109bd604 	addi	r2,r2,28504
 1002948:	1880091e 	bne	r3,r2,1002970 <_ZNSt8ios_base7failureD1Ev+0x9c>
 100294c:	d9001017 	ldw	r4,64(sp)
 1002950:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1002954:	d9000104 	addi	r4,sp,4
 1002958:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 100295c:	dfc01417 	ldw	ra,80(sp)
 1002960:	df001317 	ldw	fp,76(sp)
 1002964:	ddc01217 	ldw	r23,72(sp)
 1002968:	dec01504 	addi	sp,sp,84
 100296c:	f800283a 	ret
 1002970:	00800044 	movi	r2,1
 1002974:	d8800215 	stw	r2,8(sp)
 1002978:	19000204 	addi	r4,r3,8
 100297c:	017fffc4 	movi	r5,-1
 1002980:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002984:	00bff116 	blt	zero,r2,100294c <_ZNSt8ios_base7failureD1Ev+0x78>
 1002988:	d9000e17 	ldw	r4,56(sp)
 100298c:	d80b883a 	mov	r5,sp
 1002990:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002994:	003fed06 	br	100294c <_ZNSt8ios_base7failureD1Ev+0x78>
 1002998:	d8800417 	ldw	r2,16(sp)
 100299c:	d8c00317 	ldw	r3,12(sp)
 10029a0:	d9001017 	ldw	r4,64(sp)
 10029a4:	d8800f15 	stw	r2,60(sp)
 10029a8:	d8c01115 	stw	r3,68(sp)
 10029ac:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 10029b0:	d8c00f17 	ldw	r3,60(sp)
 10029b4:	00bfffc4 	movi	r2,-1
 10029b8:	18800326 	beq	r3,r2,10029c8 <_ZNSt8ios_base7failureD1Ev+0xf4>
 10029bc:	d9001117 	ldw	r4,68(sp)
 10029c0:	d8800215 	stw	r2,8(sp)
 10029c4:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 10029c8:	d9001117 	ldw	r4,68(sp)
 10029cc:	00bfffc4 	movi	r2,-1
 10029d0:	d8800215 	stw	r2,8(sp)
 10029d4:	10081540 	call	1008154 <__cxa_call_unexpected>

010029d8 <_ZNSt8ios_base7failureC1ERKSs>:
 10029d8:	deffec04 	addi	sp,sp,-80
 10029dc:	00804074 	movhi	r2,257
 10029e0:	10a0b504 	addi	r2,r2,-32044
 10029e4:	00c040b4 	movhi	r3,258
 10029e8:	18fafe04 	addi	r3,r3,-5128
 10029ec:	d8800615 	stw	r2,24(sp)
 10029f0:	d9000d15 	stw	r4,52(sp)
 10029f4:	00804034 	movhi	r2,256
 10029f8:	108a9a04 	addi	r2,r2,10856
 10029fc:	d809883a 	mov	r4,sp
 1002a00:	d8c00715 	stw	r3,28(sp)
 1002a04:	d8800915 	stw	r2,36(sp)
 1002a08:	d9400e15 	stw	r5,56(sp)
 1002a0c:	dfc01315 	stw	ra,76(sp)
 1002a10:	df001215 	stw	fp,72(sp)
 1002a14:	ddc01115 	stw	r23,68(sp)
 1002a18:	dec00815 	stw	sp,32(sp)
 1002a1c:	dec00a15 	stw	sp,40(sp)
 1002a20:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1002a24:	d8c00d17 	ldw	r3,52(sp)
 1002a28:	008040b4 	movhi	r2,258
 1002a2c:	10bbf604 	addi	r2,r2,-4136
 1002a30:	d9400e17 	ldw	r5,56(sp)
 1002a34:	18800015 	stw	r2,0(r3)
 1002a38:	d8800d17 	ldw	r2,52(sp)
 1002a3c:	00c00044 	movi	r3,1
 1002a40:	d8c00115 	stw	r3,4(sp)
 1002a44:	11000104 	addi	r4,r2,4
 1002a48:	10057e80 	call	10057e8 <_ZNSsC1ERKSs>
 1002a4c:	d809883a 	mov	r4,sp
 1002a50:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1002a54:	dfc01317 	ldw	ra,76(sp)
 1002a58:	df001217 	ldw	fp,72(sp)
 1002a5c:	ddc01117 	ldw	r23,68(sp)
 1002a60:	dec01404 	addi	sp,sp,80
 1002a64:	f800283a 	ret
 1002a68:	d8c00317 	ldw	r3,12(sp)
 1002a6c:	d8800217 	ldw	r2,8(sp)
 1002a70:	d9000d17 	ldw	r4,52(sp)
 1002a74:	d8c00f15 	stw	r3,60(sp)
 1002a78:	d8801015 	stw	r2,64(sp)
 1002a7c:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1002a80:	d8c00f17 	ldw	r3,60(sp)
 1002a84:	00bfffc4 	movi	r2,-1
 1002a88:	18800326 	beq	r3,r2,1002a98 <_ZNSt8ios_base7failureC1ERKSs+0xc0>
 1002a8c:	d9001017 	ldw	r4,64(sp)
 1002a90:	d8800115 	stw	r2,4(sp)
 1002a94:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1002a98:	d9001017 	ldw	r4,64(sp)
 1002a9c:	00bfffc4 	movi	r2,-1
 1002aa0:	d8800115 	stw	r2,4(sp)
 1002aa4:	10081540 	call	1008154 <__cxa_call_unexpected>

01002aa8 <_ZNSt8ios_base7failureC2ERKSs>:
 1002aa8:	deffec04 	addi	sp,sp,-80
 1002aac:	00804074 	movhi	r2,257
 1002ab0:	10a0b504 	addi	r2,r2,-32044
 1002ab4:	00c040b4 	movhi	r3,258
 1002ab8:	18fb0204 	addi	r3,r3,-5112
 1002abc:	d8800615 	stw	r2,24(sp)
 1002ac0:	d9000d15 	stw	r4,52(sp)
 1002ac4:	00804034 	movhi	r2,256
 1002ac8:	108ace04 	addi	r2,r2,11064
 1002acc:	d809883a 	mov	r4,sp
 1002ad0:	d8c00715 	stw	r3,28(sp)
 1002ad4:	d8800915 	stw	r2,36(sp)
 1002ad8:	d9400e15 	stw	r5,56(sp)
 1002adc:	dfc01315 	stw	ra,76(sp)
 1002ae0:	df001215 	stw	fp,72(sp)
 1002ae4:	ddc01115 	stw	r23,68(sp)
 1002ae8:	dec00815 	stw	sp,32(sp)
 1002aec:	dec00a15 	stw	sp,40(sp)
 1002af0:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1002af4:	d8c00d17 	ldw	r3,52(sp)
 1002af8:	008040b4 	movhi	r2,258
 1002afc:	10bbf604 	addi	r2,r2,-4136
 1002b00:	d9400e17 	ldw	r5,56(sp)
 1002b04:	18800015 	stw	r2,0(r3)
 1002b08:	d8800d17 	ldw	r2,52(sp)
 1002b0c:	00c00044 	movi	r3,1
 1002b10:	d8c00115 	stw	r3,4(sp)
 1002b14:	11000104 	addi	r4,r2,4
 1002b18:	10057e80 	call	10057e8 <_ZNSsC1ERKSs>
 1002b1c:	d809883a 	mov	r4,sp
 1002b20:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1002b24:	dfc01317 	ldw	ra,76(sp)
 1002b28:	df001217 	ldw	fp,72(sp)
 1002b2c:	ddc01117 	ldw	r23,68(sp)
 1002b30:	dec01404 	addi	sp,sp,80
 1002b34:	f800283a 	ret
 1002b38:	d8c00317 	ldw	r3,12(sp)
 1002b3c:	d8800217 	ldw	r2,8(sp)
 1002b40:	d9000d17 	ldw	r4,52(sp)
 1002b44:	d8c00f15 	stw	r3,60(sp)
 1002b48:	d8801015 	stw	r2,64(sp)
 1002b4c:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1002b50:	d8c00f17 	ldw	r3,60(sp)
 1002b54:	00bfffc4 	movi	r2,-1
 1002b58:	18800326 	beq	r3,r2,1002b68 <_ZNSt8ios_base7failureC2ERKSs+0xc0>
 1002b5c:	d9001017 	ldw	r4,64(sp)
 1002b60:	d8800115 	stw	r2,4(sp)
 1002b64:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1002b68:	d9001017 	ldw	r4,64(sp)
 1002b6c:	00bfffc4 	movi	r2,-1
 1002b70:	d8800115 	stw	r2,4(sp)
 1002b74:	10081540 	call	1008154 <__cxa_call_unexpected>

01002b78 <_ZNSt8ios_base7failureD2Ev>:
 1002b78:	deffeb04 	addi	sp,sp,-84
 1002b7c:	00804074 	movhi	r2,257
 1002b80:	10a0b504 	addi	r2,r2,-32044
 1002b84:	00c040b4 	movhi	r3,258
 1002b88:	18fb0604 	addi	r3,r3,-5096
 1002b8c:	d8800715 	stw	r2,28(sp)
 1002b90:	d9001015 	stw	r4,64(sp)
 1002b94:	00804034 	movhi	r2,256
 1002b98:	108b0f04 	addi	r2,r2,11324
 1002b9c:	d9000104 	addi	r4,sp,4
 1002ba0:	d8c00815 	stw	r3,32(sp)
 1002ba4:	d8800a15 	stw	r2,40(sp)
 1002ba8:	dfc01415 	stw	ra,80(sp)
 1002bac:	df001315 	stw	fp,76(sp)
 1002bb0:	ddc01215 	stw	r23,72(sp)
 1002bb4:	dec00915 	stw	sp,36(sp)
 1002bb8:	dec00b15 	stw	sp,44(sp)
 1002bbc:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1002bc0:	d8c01017 	ldw	r3,64(sp)
 1002bc4:	18800117 	ldw	r2,4(r3)
 1002bc8:	00c040b4 	movhi	r3,258
 1002bcc:	18fbf604 	addi	r3,r3,-4136
 1002bd0:	10bffd04 	addi	r2,r2,-12
 1002bd4:	d8800e15 	stw	r2,56(sp)
 1002bd8:	d8801017 	ldw	r2,64(sp)
 1002bdc:	10c00015 	stw	r3,0(r2)
 1002be0:	d8c00e17 	ldw	r3,56(sp)
 1002be4:	008040b4 	movhi	r2,258
 1002be8:	109bd604 	addi	r2,r2,28504
 1002bec:	1880091e 	bne	r3,r2,1002c14 <_ZNSt8ios_base7failureD2Ev+0x9c>
 1002bf0:	d9001017 	ldw	r4,64(sp)
 1002bf4:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1002bf8:	d9000104 	addi	r4,sp,4
 1002bfc:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1002c00:	dfc01417 	ldw	ra,80(sp)
 1002c04:	df001317 	ldw	fp,76(sp)
 1002c08:	ddc01217 	ldw	r23,72(sp)
 1002c0c:	dec01504 	addi	sp,sp,84
 1002c10:	f800283a 	ret
 1002c14:	00800044 	movi	r2,1
 1002c18:	d8800215 	stw	r2,8(sp)
 1002c1c:	19000204 	addi	r4,r3,8
 1002c20:	017fffc4 	movi	r5,-1
 1002c24:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002c28:	00bff116 	blt	zero,r2,1002bf0 <_ZNSt8ios_base7failureD2Ev+0x78>
 1002c2c:	d9000e17 	ldw	r4,56(sp)
 1002c30:	d80b883a 	mov	r5,sp
 1002c34:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002c38:	003fed06 	br	1002bf0 <_ZNSt8ios_base7failureD2Ev+0x78>
 1002c3c:	d8800417 	ldw	r2,16(sp)
 1002c40:	d8c00317 	ldw	r3,12(sp)
 1002c44:	d9001017 	ldw	r4,64(sp)
 1002c48:	d8800f15 	stw	r2,60(sp)
 1002c4c:	d8c01115 	stw	r3,68(sp)
 1002c50:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1002c54:	d8c00f17 	ldw	r3,60(sp)
 1002c58:	00bfffc4 	movi	r2,-1
 1002c5c:	18800326 	beq	r3,r2,1002c6c <_ZNSt8ios_base7failureD2Ev+0xf4>
 1002c60:	d9001117 	ldw	r4,68(sp)
 1002c64:	d8800215 	stw	r2,8(sp)
 1002c68:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1002c6c:	d9001117 	ldw	r4,68(sp)
 1002c70:	00bfffc4 	movi	r2,-1
 1002c74:	d8800215 	stw	r2,8(sp)
 1002c78:	10081540 	call	1008154 <__cxa_call_unexpected>

01002c7c <_ZNSt8ios_base7failureD0Ev>:
 1002c7c:	deffeb04 	addi	sp,sp,-84
 1002c80:	00804074 	movhi	r2,257
 1002c84:	10a0b504 	addi	r2,r2,-32044
 1002c88:	00c040b4 	movhi	r3,258
 1002c8c:	18fb0a04 	addi	r3,r3,-5080
 1002c90:	d8800715 	stw	r2,28(sp)
 1002c94:	d9001015 	stw	r4,64(sp)
 1002c98:	00804034 	movhi	r2,256
 1002c9c:	108b5204 	addi	r2,r2,11592
 1002ca0:	d9000104 	addi	r4,sp,4
 1002ca4:	d8c00815 	stw	r3,32(sp)
 1002ca8:	d8800a15 	stw	r2,40(sp)
 1002cac:	dfc01415 	stw	ra,80(sp)
 1002cb0:	df001315 	stw	fp,76(sp)
 1002cb4:	ddc01215 	stw	r23,72(sp)
 1002cb8:	dec00915 	stw	sp,36(sp)
 1002cbc:	dec00b15 	stw	sp,44(sp)
 1002cc0:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1002cc4:	d8c01017 	ldw	r3,64(sp)
 1002cc8:	18800117 	ldw	r2,4(r3)
 1002ccc:	00c040b4 	movhi	r3,258
 1002cd0:	18fbf604 	addi	r3,r3,-4136
 1002cd4:	10bffd04 	addi	r2,r2,-12
 1002cd8:	d8800e15 	stw	r2,56(sp)
 1002cdc:	d8801017 	ldw	r2,64(sp)
 1002ce0:	10c00015 	stw	r3,0(r2)
 1002ce4:	d8c00e17 	ldw	r3,56(sp)
 1002ce8:	008040b4 	movhi	r2,258
 1002cec:	109bd604 	addi	r2,r2,28504
 1002cf0:	18800b1e 	bne	r3,r2,1002d20 <_ZNSt8ios_base7failureD0Ev+0xa4>
 1002cf4:	d9001017 	ldw	r4,64(sp)
 1002cf8:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1002cfc:	d9001017 	ldw	r4,64(sp)
 1002d00:	1008aa40 	call	1008aa4 <_ZdlPv>
 1002d04:	d9000104 	addi	r4,sp,4
 1002d08:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1002d0c:	dfc01417 	ldw	ra,80(sp)
 1002d10:	df001317 	ldw	fp,76(sp)
 1002d14:	ddc01217 	ldw	r23,72(sp)
 1002d18:	dec01504 	addi	sp,sp,84
 1002d1c:	f800283a 	ret
 1002d20:	00800044 	movi	r2,1
 1002d24:	d8800215 	stw	r2,8(sp)
 1002d28:	19000204 	addi	r4,r3,8
 1002d2c:	017fffc4 	movi	r5,-1
 1002d30:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002d34:	00bfef16 	blt	zero,r2,1002cf4 <_ZNSt8ios_base7failureD0Ev+0x78>
 1002d38:	d9000e17 	ldw	r4,56(sp)
 1002d3c:	d80b883a 	mov	r5,sp
 1002d40:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002d44:	003feb06 	br	1002cf4 <_ZNSt8ios_base7failureD0Ev+0x78>
 1002d48:	d8800417 	ldw	r2,16(sp)
 1002d4c:	d8c00317 	ldw	r3,12(sp)
 1002d50:	d9001017 	ldw	r4,64(sp)
 1002d54:	d8800f15 	stw	r2,60(sp)
 1002d58:	d8c01115 	stw	r3,68(sp)
 1002d5c:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1002d60:	d8c00f17 	ldw	r3,60(sp)
 1002d64:	00bfffc4 	movi	r2,-1
 1002d68:	18800326 	beq	r3,r2,1002d78 <_ZNSt8ios_base7failureD0Ev+0xfc>
 1002d6c:	d9001117 	ldw	r4,68(sp)
 1002d70:	d8800215 	stw	r2,8(sp)
 1002d74:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1002d78:	d9001117 	ldw	r4,68(sp)
 1002d7c:	00bfffc4 	movi	r2,-1
 1002d80:	d8800215 	stw	r2,8(sp)
 1002d84:	10081540 	call	1008154 <__cxa_call_unexpected>

01002d88 <_ZNSt15_List_node_base8transferEPS_S0_>:
 1002d88:	200f883a 	mov	r7,r4
 1002d8c:	2811883a 	mov	r8,r5
 1002d90:	21800a26 	beq	r4,r6,1002dbc <_ZNSt15_List_node_base8transferEPS_S0_+0x34>
 1002d94:	30c00117 	ldw	r3,4(r6)
 1002d98:	29400117 	ldw	r5,4(r5)
 1002d9c:	21000117 	ldw	r4,4(r4)
 1002da0:	38c00115 	stw	r3,4(r7)
 1002da4:	40800117 	ldw	r2,4(r8)
 1002da8:	19c00015 	stw	r7,0(r3)
 1002dac:	29800015 	stw	r6,0(r5)
 1002db0:	30800115 	stw	r2,4(r6)
 1002db4:	41000115 	stw	r4,4(r8)
 1002db8:	22000015 	stw	r8,0(r4)
 1002dbc:	f800283a 	ret

01002dc0 <_ZNSt15_List_node_base4hookEPS_>:
 1002dc0:	28c00117 	ldw	r3,4(r5)
 1002dc4:	21400015 	stw	r5,0(r4)
 1002dc8:	20c00115 	stw	r3,4(r4)
 1002dcc:	28800117 	ldw	r2,4(r5)
 1002dd0:	29000115 	stw	r4,4(r5)
 1002dd4:	11000015 	stw	r4,0(r2)
 1002dd8:	f800283a 	ret

01002ddc <_ZNSt15_List_node_base6unhookEv>:
 1002ddc:	20c00117 	ldw	r3,4(r4)
 1002de0:	20800017 	ldw	r2,0(r4)
 1002de4:	10c00115 	stw	r3,4(r2)
 1002de8:	18800015 	stw	r2,0(r3)
 1002dec:	f800283a 	ret

01002df0 <_ZNSt15_List_node_base4swapERS_S0_>:
 1002df0:	20c00017 	ldw	r3,0(r4)
 1002df4:	20c01126 	beq	r4,r3,1002e3c <_ZNSt15_List_node_base4swapERS_S0_+0x4c>
 1002df8:	28800017 	ldw	r2,0(r5)
 1002dfc:	28801926 	beq	r5,r2,1002e64 <_ZNSt15_List_node_base4swapERS_S0_+0x74>
 1002e00:	20800015 	stw	r2,0(r4)
 1002e04:	28c00015 	stw	r3,0(r5)
 1002e08:	28800117 	ldw	r2,4(r5)
 1002e0c:	20c00117 	ldw	r3,4(r4)
 1002e10:	20800115 	stw	r2,4(r4)
 1002e14:	28c00115 	stw	r3,4(r5)
 1002e18:	20800017 	ldw	r2,0(r4)
 1002e1c:	20c00117 	ldw	r3,4(r4)
 1002e20:	11000115 	stw	r4,4(r2)
 1002e24:	19000015 	stw	r4,0(r3)
 1002e28:	28800017 	ldw	r2,0(r5)
 1002e2c:	28c00117 	ldw	r3,4(r5)
 1002e30:	11400115 	stw	r5,4(r2)
 1002e34:	19400015 	stw	r5,0(r3)
 1002e38:	f800283a 	ret
 1002e3c:	28c00017 	ldw	r3,0(r5)
 1002e40:	28c00726 	beq	r5,r3,1002e60 <_ZNSt15_List_node_base4swapERS_S0_+0x70>
 1002e44:	28800117 	ldw	r2,4(r5)
 1002e48:	20c00015 	stw	r3,0(r4)
 1002e4c:	20800115 	stw	r2,4(r4)
 1002e50:	19000115 	stw	r4,4(r3)
 1002e54:	11000015 	stw	r4,0(r2)
 1002e58:	29400115 	stw	r5,4(r5)
 1002e5c:	29400015 	stw	r5,0(r5)
 1002e60:	f800283a 	ret
 1002e64:	20800117 	ldw	r2,4(r4)
 1002e68:	28c00015 	stw	r3,0(r5)
 1002e6c:	28800115 	stw	r2,4(r5)
 1002e70:	19400115 	stw	r5,4(r3)
 1002e74:	11400015 	stw	r5,0(r2)
 1002e78:	21000115 	stw	r4,4(r4)
 1002e7c:	21000015 	stw	r4,0(r4)
 1002e80:	f800283a 	ret

01002e84 <_ZNSt15_List_node_base7reverseEv>:
 1002e84:	200b883a 	mov	r5,r4
 1002e88:	28800017 	ldw	r2,0(r5)
 1002e8c:	28c00117 	ldw	r3,4(r5)
 1002e90:	28800115 	stw	r2,4(r5)
 1002e94:	28c00015 	stw	r3,0(r5)
 1002e98:	100b883a 	mov	r5,r2
 1002e9c:	20bffa1e 	bne	r4,r2,1002e88 <_ZNSt15_List_node_base7reverseEv+0x4>
 1002ea0:	f800283a 	ret

01002ea4 <_ZNKSt13runtime_error4whatEv>:
 1002ea4:	20800117 	ldw	r2,4(r4)
 1002ea8:	f800283a 	ret

01002eac <_ZNSt11logic_errorD1Ev>:
 1002eac:	deffeb04 	addi	sp,sp,-84
 1002eb0:	00804074 	movhi	r2,257
 1002eb4:	10a0b504 	addi	r2,r2,-32044
 1002eb8:	00c040b4 	movhi	r3,258
 1002ebc:	18fb0e04 	addi	r3,r3,-5064
 1002ec0:	d8800715 	stw	r2,28(sp)
 1002ec4:	d9001015 	stw	r4,64(sp)
 1002ec8:	00804034 	movhi	r2,256
 1002ecc:	108bdc04 	addi	r2,r2,12144
 1002ed0:	d9000104 	addi	r4,sp,4
 1002ed4:	d8c00815 	stw	r3,32(sp)
 1002ed8:	d8800a15 	stw	r2,40(sp)
 1002edc:	dfc01415 	stw	ra,80(sp)
 1002ee0:	df001315 	stw	fp,76(sp)
 1002ee4:	ddc01215 	stw	r23,72(sp)
 1002ee8:	dec00915 	stw	sp,36(sp)
 1002eec:	dec00b15 	stw	sp,44(sp)
 1002ef0:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1002ef4:	d8c01017 	ldw	r3,64(sp)
 1002ef8:	18800117 	ldw	r2,4(r3)
 1002efc:	00c040b4 	movhi	r3,258
 1002f00:	18fc0904 	addi	r3,r3,-4060
 1002f04:	10bffd04 	addi	r2,r2,-12
 1002f08:	d8800e15 	stw	r2,56(sp)
 1002f0c:	d8801017 	ldw	r2,64(sp)
 1002f10:	10c00015 	stw	r3,0(r2)
 1002f14:	d8c00e17 	ldw	r3,56(sp)
 1002f18:	008040b4 	movhi	r2,258
 1002f1c:	109bd604 	addi	r2,r2,28504
 1002f20:	1880091e 	bne	r3,r2,1002f48 <_ZNSt11logic_errorD1Ev+0x9c>
 1002f24:	d9001017 	ldw	r4,64(sp)
 1002f28:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1002f2c:	d9000104 	addi	r4,sp,4
 1002f30:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1002f34:	dfc01417 	ldw	ra,80(sp)
 1002f38:	df001317 	ldw	fp,76(sp)
 1002f3c:	ddc01217 	ldw	r23,72(sp)
 1002f40:	dec01504 	addi	sp,sp,84
 1002f44:	f800283a 	ret
 1002f48:	00800044 	movi	r2,1
 1002f4c:	d8800215 	stw	r2,8(sp)
 1002f50:	19000204 	addi	r4,r3,8
 1002f54:	017fffc4 	movi	r5,-1
 1002f58:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1002f5c:	00bff116 	blt	zero,r2,1002f24 <_ZNSt11logic_errorD1Ev+0x78>
 1002f60:	d9000e17 	ldw	r4,56(sp)
 1002f64:	d80b883a 	mov	r5,sp
 1002f68:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1002f6c:	003fed06 	br	1002f24 <_ZNSt11logic_errorD1Ev+0x78>
 1002f70:	d8800417 	ldw	r2,16(sp)
 1002f74:	d8c00317 	ldw	r3,12(sp)
 1002f78:	d9001017 	ldw	r4,64(sp)
 1002f7c:	d8800f15 	stw	r2,60(sp)
 1002f80:	d8c01115 	stw	r3,68(sp)
 1002f84:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1002f88:	d8c00f17 	ldw	r3,60(sp)
 1002f8c:	00bfffc4 	movi	r2,-1
 1002f90:	18800326 	beq	r3,r2,1002fa0 <_ZNSt11logic_errorD1Ev+0xf4>
 1002f94:	d9001117 	ldw	r4,68(sp)
 1002f98:	d8800215 	stw	r2,8(sp)
 1002f9c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1002fa0:	d9001117 	ldw	r4,68(sp)
 1002fa4:	00bfffc4 	movi	r2,-1
 1002fa8:	d8800215 	stw	r2,8(sp)
 1002fac:	10081540 	call	1008154 <__cxa_call_unexpected>

01002fb0 <_ZNSt13runtime_errorC2ERKSs>:
 1002fb0:	deffed04 	addi	sp,sp,-76
 1002fb4:	00804074 	movhi	r2,257
 1002fb8:	10a0b504 	addi	r2,r2,-32044
 1002fbc:	00c040b4 	movhi	r3,258
 1002fc0:	18fb1144 	addi	r3,r3,-5051
 1002fc4:	d8800615 	stw	r2,24(sp)
 1002fc8:	d9000d15 	stw	r4,52(sp)
 1002fcc:	00804034 	movhi	r2,256
 1002fd0:	108c1004 	addi	r2,r2,12352
 1002fd4:	d809883a 	mov	r4,sp
 1002fd8:	d8c00715 	stw	r3,28(sp)
 1002fdc:	d8800915 	stw	r2,36(sp)
 1002fe0:	d9400e15 	stw	r5,56(sp)
 1002fe4:	dfc01215 	stw	ra,72(sp)
 1002fe8:	df001115 	stw	fp,68(sp)
 1002fec:	ddc01015 	stw	r23,64(sp)
 1002ff0:	dec00815 	stw	sp,32(sp)
 1002ff4:	dec00a15 	stw	sp,40(sp)
 1002ff8:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1002ffc:	d8c00d17 	ldw	r3,52(sp)
 1003000:	008040b4 	movhi	r2,258
 1003004:	10bc0404 	addi	r2,r2,-4080
 1003008:	d9400e17 	ldw	r5,56(sp)
 100300c:	18800015 	stw	r2,0(r3)
 1003010:	d8800d17 	ldw	r2,52(sp)
 1003014:	00c00044 	movi	r3,1
 1003018:	d8c00115 	stw	r3,4(sp)
 100301c:	11000104 	addi	r4,r2,4
 1003020:	10057e80 	call	10057e8 <_ZNSsC1ERKSs>
 1003024:	d809883a 	mov	r4,sp
 1003028:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 100302c:	dfc01217 	ldw	ra,72(sp)
 1003030:	df001117 	ldw	fp,68(sp)
 1003034:	ddc01017 	ldw	r23,64(sp)
 1003038:	dec01304 	addi	sp,sp,76
 100303c:	f800283a 	ret
 1003040:	d8c00217 	ldw	r3,8(sp)
 1003044:	d9000d17 	ldw	r4,52(sp)
 1003048:	d8c00f15 	stw	r3,60(sp)
 100304c:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1003050:	d9000f17 	ldw	r4,60(sp)
 1003054:	00bfffc4 	movi	r2,-1
 1003058:	d8800115 	stw	r2,4(sp)
 100305c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>

01003060 <_ZNSt15underflow_errorC1ERKSs>:
 1003060:	defffe04 	addi	sp,sp,-8
 1003064:	dc000015 	stw	r16,0(sp)
 1003068:	dfc00115 	stw	ra,4(sp)
 100306c:	2021883a 	mov	r16,r4
 1003070:	1002fb00 	call	1002fb0 <_ZNSt13runtime_errorC2ERKSs>
 1003074:	008040b4 	movhi	r2,258
 1003078:	10bba304 	addi	r2,r2,-4468
 100307c:	80800015 	stw	r2,0(r16)
 1003080:	dfc00117 	ldw	ra,4(sp)
 1003084:	dc000017 	ldw	r16,0(sp)
 1003088:	dec00204 	addi	sp,sp,8
 100308c:	f800283a 	ret

01003090 <_ZNSt15underflow_errorC2ERKSs>:
 1003090:	defffe04 	addi	sp,sp,-8
 1003094:	dc000015 	stw	r16,0(sp)
 1003098:	dfc00115 	stw	ra,4(sp)
 100309c:	2021883a 	mov	r16,r4
 10030a0:	1002fb00 	call	1002fb0 <_ZNSt13runtime_errorC2ERKSs>
 10030a4:	008040b4 	movhi	r2,258
 10030a8:	10bba304 	addi	r2,r2,-4468
 10030ac:	80800015 	stw	r2,0(r16)
 10030b0:	dfc00117 	ldw	ra,4(sp)
 10030b4:	dc000017 	ldw	r16,0(sp)
 10030b8:	dec00204 	addi	sp,sp,8
 10030bc:	f800283a 	ret

010030c0 <_ZNSt14overflow_errorC1ERKSs>:
 10030c0:	defffe04 	addi	sp,sp,-8
 10030c4:	dc000015 	stw	r16,0(sp)
 10030c8:	dfc00115 	stw	ra,4(sp)
 10030cc:	2021883a 	mov	r16,r4
 10030d0:	1002fb00 	call	1002fb0 <_ZNSt13runtime_errorC2ERKSs>
 10030d4:	008040b4 	movhi	r2,258
 10030d8:	10bbb004 	addi	r2,r2,-4416
 10030dc:	80800015 	stw	r2,0(r16)
 10030e0:	dfc00117 	ldw	ra,4(sp)
 10030e4:	dc000017 	ldw	r16,0(sp)
 10030e8:	dec00204 	addi	sp,sp,8
 10030ec:	f800283a 	ret

010030f0 <_ZNSt14overflow_errorC2ERKSs>:
 10030f0:	defffe04 	addi	sp,sp,-8
 10030f4:	dc000015 	stw	r16,0(sp)
 10030f8:	dfc00115 	stw	ra,4(sp)
 10030fc:	2021883a 	mov	r16,r4
 1003100:	1002fb00 	call	1002fb0 <_ZNSt13runtime_errorC2ERKSs>
 1003104:	008040b4 	movhi	r2,258
 1003108:	10bbb004 	addi	r2,r2,-4416
 100310c:	80800015 	stw	r2,0(r16)
 1003110:	dfc00117 	ldw	ra,4(sp)
 1003114:	dc000017 	ldw	r16,0(sp)
 1003118:	dec00204 	addi	sp,sp,8
 100311c:	f800283a 	ret

01003120 <_ZNSt11range_errorC1ERKSs>:
 1003120:	defffe04 	addi	sp,sp,-8
 1003124:	dc000015 	stw	r16,0(sp)
 1003128:	dfc00115 	stw	ra,4(sp)
 100312c:	2021883a 	mov	r16,r4
 1003130:	1002fb00 	call	1002fb0 <_ZNSt13runtime_errorC2ERKSs>
 1003134:	008040b4 	movhi	r2,258
 1003138:	10bbbc04 	addi	r2,r2,-4368
 100313c:	80800015 	stw	r2,0(r16)
 1003140:	dfc00117 	ldw	ra,4(sp)
 1003144:	dc000017 	ldw	r16,0(sp)
 1003148:	dec00204 	addi	sp,sp,8
 100314c:	f800283a 	ret

01003150 <_ZNSt11range_errorC2ERKSs>:
 1003150:	defffe04 	addi	sp,sp,-8
 1003154:	dc000015 	stw	r16,0(sp)
 1003158:	dfc00115 	stw	ra,4(sp)
 100315c:	2021883a 	mov	r16,r4
 1003160:	1002fb00 	call	1002fb0 <_ZNSt13runtime_errorC2ERKSs>
 1003164:	008040b4 	movhi	r2,258
 1003168:	10bbbc04 	addi	r2,r2,-4368
 100316c:	80800015 	stw	r2,0(r16)
 1003170:	dfc00117 	ldw	ra,4(sp)
 1003174:	dc000017 	ldw	r16,0(sp)
 1003178:	dec00204 	addi	sp,sp,8
 100317c:	f800283a 	ret

01003180 <_ZNSt11logic_errorC1ERKSs>:
 1003180:	deffed04 	addi	sp,sp,-76
 1003184:	00804074 	movhi	r2,257
 1003188:	10a0b504 	addi	r2,r2,-32044
 100318c:	00c040b4 	movhi	r3,258
 1003190:	18fb12c4 	addi	r3,r3,-5045
 1003194:	d8800615 	stw	r2,24(sp)
 1003198:	d9000d15 	stw	r4,52(sp)
 100319c:	00804034 	movhi	r2,256
 10031a0:	108c8404 	addi	r2,r2,12816
 10031a4:	d809883a 	mov	r4,sp
 10031a8:	d8c00715 	stw	r3,28(sp)
 10031ac:	d8800915 	stw	r2,36(sp)
 10031b0:	d9400e15 	stw	r5,56(sp)
 10031b4:	dfc01215 	stw	ra,72(sp)
 10031b8:	df001115 	stw	fp,68(sp)
 10031bc:	ddc01015 	stw	r23,64(sp)
 10031c0:	dec00815 	stw	sp,32(sp)
 10031c4:	dec00a15 	stw	sp,40(sp)
 10031c8:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 10031cc:	d8c00d17 	ldw	r3,52(sp)
 10031d0:	008040b4 	movhi	r2,258
 10031d4:	10bc0904 	addi	r2,r2,-4060
 10031d8:	d9400e17 	ldw	r5,56(sp)
 10031dc:	18800015 	stw	r2,0(r3)
 10031e0:	d8800d17 	ldw	r2,52(sp)
 10031e4:	00c00044 	movi	r3,1
 10031e8:	d8c00115 	stw	r3,4(sp)
 10031ec:	11000104 	addi	r4,r2,4
 10031f0:	10057e80 	call	10057e8 <_ZNSsC1ERKSs>
 10031f4:	d809883a 	mov	r4,sp
 10031f8:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 10031fc:	dfc01217 	ldw	ra,72(sp)
 1003200:	df001117 	ldw	fp,68(sp)
 1003204:	ddc01017 	ldw	r23,64(sp)
 1003208:	dec01304 	addi	sp,sp,76
 100320c:	f800283a 	ret
 1003210:	d8c00217 	ldw	r3,8(sp)
 1003214:	d9000d17 	ldw	r4,52(sp)
 1003218:	d8c00f15 	stw	r3,60(sp)
 100321c:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1003220:	d9000f17 	ldw	r4,60(sp)
 1003224:	00bfffc4 	movi	r2,-1
 1003228:	d8800115 	stw	r2,4(sp)
 100322c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>

01003230 <_ZNSt11logic_errorC2ERKSs>:
 1003230:	deffed04 	addi	sp,sp,-76
 1003234:	00804074 	movhi	r2,257
 1003238:	10a0b504 	addi	r2,r2,-32044
 100323c:	00c040b4 	movhi	r3,258
 1003240:	18fb1444 	addi	r3,r3,-5039
 1003244:	d8800615 	stw	r2,24(sp)
 1003248:	d9000d15 	stw	r4,52(sp)
 100324c:	00804034 	movhi	r2,256
 1003250:	108cb004 	addi	r2,r2,12992
 1003254:	d809883a 	mov	r4,sp
 1003258:	d8c00715 	stw	r3,28(sp)
 100325c:	d8800915 	stw	r2,36(sp)
 1003260:	d9400e15 	stw	r5,56(sp)
 1003264:	dfc01215 	stw	ra,72(sp)
 1003268:	df001115 	stw	fp,68(sp)
 100326c:	ddc01015 	stw	r23,64(sp)
 1003270:	dec00815 	stw	sp,32(sp)
 1003274:	dec00a15 	stw	sp,40(sp)
 1003278:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 100327c:	d8c00d17 	ldw	r3,52(sp)
 1003280:	008040b4 	movhi	r2,258
 1003284:	10bc0904 	addi	r2,r2,-4060
 1003288:	d9400e17 	ldw	r5,56(sp)
 100328c:	18800015 	stw	r2,0(r3)
 1003290:	d8800d17 	ldw	r2,52(sp)
 1003294:	00c00044 	movi	r3,1
 1003298:	d8c00115 	stw	r3,4(sp)
 100329c:	11000104 	addi	r4,r2,4
 10032a0:	10057e80 	call	10057e8 <_ZNSsC1ERKSs>
 10032a4:	d809883a 	mov	r4,sp
 10032a8:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 10032ac:	dfc01217 	ldw	ra,72(sp)
 10032b0:	df001117 	ldw	fp,68(sp)
 10032b4:	ddc01017 	ldw	r23,64(sp)
 10032b8:	dec01304 	addi	sp,sp,76
 10032bc:	f800283a 	ret
 10032c0:	d8c00217 	ldw	r3,8(sp)
 10032c4:	d9000d17 	ldw	r4,52(sp)
 10032c8:	d8c00f15 	stw	r3,60(sp)
 10032cc:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 10032d0:	d9000f17 	ldw	r4,60(sp)
 10032d4:	00bfffc4 	movi	r2,-1
 10032d8:	d8800115 	stw	r2,4(sp)
 10032dc:	10094540 	call	1009454 <_Unwind_SjLj_Resume>

010032e0 <_ZNSt12out_of_rangeC1ERKSs>:
 10032e0:	defffe04 	addi	sp,sp,-8
 10032e4:	dc000015 	stw	r16,0(sp)
 10032e8:	dfc00115 	stw	ra,4(sp)
 10032ec:	2021883a 	mov	r16,r4
 10032f0:	10032300 	call	1003230 <_ZNSt11logic_errorC2ERKSs>
 10032f4:	008040b4 	movhi	r2,258
 10032f8:	10bbc904 	addi	r2,r2,-4316
 10032fc:	80800015 	stw	r2,0(r16)
 1003300:	dfc00117 	ldw	ra,4(sp)
 1003304:	dc000017 	ldw	r16,0(sp)
 1003308:	dec00204 	addi	sp,sp,8
 100330c:	f800283a 	ret

01003310 <_ZNSt12out_of_rangeC2ERKSs>:
 1003310:	defffe04 	addi	sp,sp,-8
 1003314:	dc000015 	stw	r16,0(sp)
 1003318:	dfc00115 	stw	ra,4(sp)
 100331c:	2021883a 	mov	r16,r4
 1003320:	10032300 	call	1003230 <_ZNSt11logic_errorC2ERKSs>
 1003324:	008040b4 	movhi	r2,258
 1003328:	10bbc904 	addi	r2,r2,-4316
 100332c:	80800015 	stw	r2,0(r16)
 1003330:	dfc00117 	ldw	ra,4(sp)
 1003334:	dc000017 	ldw	r16,0(sp)
 1003338:	dec00204 	addi	sp,sp,8
 100333c:	f800283a 	ret

01003340 <_ZNSt12length_errorC1ERKSs>:
 1003340:	defffe04 	addi	sp,sp,-8
 1003344:	dc000015 	stw	r16,0(sp)
 1003348:	dfc00115 	stw	ra,4(sp)
 100334c:	2021883a 	mov	r16,r4
 1003350:	10032300 	call	1003230 <_ZNSt11logic_errorC2ERKSs>
 1003354:	008040b4 	movhi	r2,258
 1003358:	10bbd604 	addi	r2,r2,-4264
 100335c:	80800015 	stw	r2,0(r16)
 1003360:	dfc00117 	ldw	ra,4(sp)
 1003364:	dc000017 	ldw	r16,0(sp)
 1003368:	dec00204 	addi	sp,sp,8
 100336c:	f800283a 	ret

01003370 <_ZNSt12length_errorC2ERKSs>:
 1003370:	defffe04 	addi	sp,sp,-8
 1003374:	dc000015 	stw	r16,0(sp)
 1003378:	dfc00115 	stw	ra,4(sp)
 100337c:	2021883a 	mov	r16,r4
 1003380:	10032300 	call	1003230 <_ZNSt11logic_errorC2ERKSs>
 1003384:	008040b4 	movhi	r2,258
 1003388:	10bbd604 	addi	r2,r2,-4264
 100338c:	80800015 	stw	r2,0(r16)
 1003390:	dfc00117 	ldw	ra,4(sp)
 1003394:	dc000017 	ldw	r16,0(sp)
 1003398:	dec00204 	addi	sp,sp,8
 100339c:	f800283a 	ret

010033a0 <_ZNSt16invalid_argumentC1ERKSs>:
 10033a0:	defffe04 	addi	sp,sp,-8
 10033a4:	dc000015 	stw	r16,0(sp)
 10033a8:	dfc00115 	stw	ra,4(sp)
 10033ac:	2021883a 	mov	r16,r4
 10033b0:	10032300 	call	1003230 <_ZNSt11logic_errorC2ERKSs>
 10033b4:	008040b4 	movhi	r2,258
 10033b8:	10bbe404 	addi	r2,r2,-4208
 10033bc:	80800015 	stw	r2,0(r16)
 10033c0:	dfc00117 	ldw	ra,4(sp)
 10033c4:	dc000017 	ldw	r16,0(sp)
 10033c8:	dec00204 	addi	sp,sp,8
 10033cc:	f800283a 	ret

010033d0 <_ZNSt16invalid_argumentC2ERKSs>:
 10033d0:	defffe04 	addi	sp,sp,-8
 10033d4:	dc000015 	stw	r16,0(sp)
 10033d8:	dfc00115 	stw	ra,4(sp)
 10033dc:	2021883a 	mov	r16,r4
 10033e0:	10032300 	call	1003230 <_ZNSt11logic_errorC2ERKSs>
 10033e4:	008040b4 	movhi	r2,258
 10033e8:	10bbe404 	addi	r2,r2,-4208
 10033ec:	80800015 	stw	r2,0(r16)
 10033f0:	dfc00117 	ldw	ra,4(sp)
 10033f4:	dc000017 	ldw	r16,0(sp)
 10033f8:	dec00204 	addi	sp,sp,8
 10033fc:	f800283a 	ret

01003400 <_ZNSt12domain_errorC1ERKSs>:
 1003400:	defffe04 	addi	sp,sp,-8
 1003404:	dc000015 	stw	r16,0(sp)
 1003408:	dfc00115 	stw	ra,4(sp)
 100340c:	2021883a 	mov	r16,r4
 1003410:	10032300 	call	1003230 <_ZNSt11logic_errorC2ERKSs>
 1003414:	008040b4 	movhi	r2,258
 1003418:	10bbf104 	addi	r2,r2,-4156
 100341c:	80800015 	stw	r2,0(r16)
 1003420:	dfc00117 	ldw	ra,4(sp)
 1003424:	dc000017 	ldw	r16,0(sp)
 1003428:	dec00204 	addi	sp,sp,8
 100342c:	f800283a 	ret

01003430 <_ZNSt12domain_errorC2ERKSs>:
 1003430:	defffe04 	addi	sp,sp,-8
 1003434:	dc000015 	stw	r16,0(sp)
 1003438:	dfc00115 	stw	ra,4(sp)
 100343c:	2021883a 	mov	r16,r4
 1003440:	10032300 	call	1003230 <_ZNSt11logic_errorC2ERKSs>
 1003444:	008040b4 	movhi	r2,258
 1003448:	10bbf104 	addi	r2,r2,-4156
 100344c:	80800015 	stw	r2,0(r16)
 1003450:	dfc00117 	ldw	ra,4(sp)
 1003454:	dc000017 	ldw	r16,0(sp)
 1003458:	dec00204 	addi	sp,sp,8
 100345c:	f800283a 	ret

01003460 <_ZNKSt11logic_error4whatEv>:
 1003460:	20800117 	ldw	r2,4(r4)
 1003464:	f800283a 	ret

01003468 <_ZNSt13runtime_errorC1ERKSs>:
 1003468:	deffed04 	addi	sp,sp,-76
 100346c:	00804074 	movhi	r2,257
 1003470:	10a0b504 	addi	r2,r2,-32044
 1003474:	00c040b4 	movhi	r3,258
 1003478:	18fb15c4 	addi	r3,r3,-5033
 100347c:	d8800615 	stw	r2,24(sp)
 1003480:	d9000d15 	stw	r4,52(sp)
 1003484:	00804034 	movhi	r2,256
 1003488:	108d3e04 	addi	r2,r2,13560
 100348c:	d809883a 	mov	r4,sp
 1003490:	d8c00715 	stw	r3,28(sp)
 1003494:	d8800915 	stw	r2,36(sp)
 1003498:	d9400e15 	stw	r5,56(sp)
 100349c:	dfc01215 	stw	ra,72(sp)
 10034a0:	df001115 	stw	fp,68(sp)
 10034a4:	ddc01015 	stw	r23,64(sp)
 10034a8:	dec00815 	stw	sp,32(sp)
 10034ac:	dec00a15 	stw	sp,40(sp)
 10034b0:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 10034b4:	d8c00d17 	ldw	r3,52(sp)
 10034b8:	008040b4 	movhi	r2,258
 10034bc:	10bc0404 	addi	r2,r2,-4080
 10034c0:	d9400e17 	ldw	r5,56(sp)
 10034c4:	18800015 	stw	r2,0(r3)
 10034c8:	d8800d17 	ldw	r2,52(sp)
 10034cc:	00c00044 	movi	r3,1
 10034d0:	d8c00115 	stw	r3,4(sp)
 10034d4:	11000104 	addi	r4,r2,4
 10034d8:	10057e80 	call	10057e8 <_ZNSsC1ERKSs>
 10034dc:	d809883a 	mov	r4,sp
 10034e0:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 10034e4:	dfc01217 	ldw	ra,72(sp)
 10034e8:	df001117 	ldw	fp,68(sp)
 10034ec:	ddc01017 	ldw	r23,64(sp)
 10034f0:	dec01304 	addi	sp,sp,76
 10034f4:	f800283a 	ret
 10034f8:	d8c00217 	ldw	r3,8(sp)
 10034fc:	d9000d17 	ldw	r4,52(sp)
 1003500:	d8c00f15 	stw	r3,60(sp)
 1003504:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1003508:	d9000f17 	ldw	r4,60(sp)
 100350c:	00bfffc4 	movi	r2,-1
 1003510:	d8800115 	stw	r2,4(sp)
 1003514:	10094540 	call	1009454 <_Unwind_SjLj_Resume>

01003518 <_ZNSt13runtime_errorD1Ev>:
 1003518:	deffeb04 	addi	sp,sp,-84
 100351c:	00804074 	movhi	r2,257
 1003520:	10a0b504 	addi	r2,r2,-32044
 1003524:	00c040b4 	movhi	r3,258
 1003528:	18fb1804 	addi	r3,r3,-5024
 100352c:	d8800715 	stw	r2,28(sp)
 1003530:	d9001015 	stw	r4,64(sp)
 1003534:	00804034 	movhi	r2,256
 1003538:	108d7704 	addi	r2,r2,13788
 100353c:	d9000104 	addi	r4,sp,4
 1003540:	d8c00815 	stw	r3,32(sp)
 1003544:	d8800a15 	stw	r2,40(sp)
 1003548:	dfc01415 	stw	ra,80(sp)
 100354c:	df001315 	stw	fp,76(sp)
 1003550:	ddc01215 	stw	r23,72(sp)
 1003554:	dec00915 	stw	sp,36(sp)
 1003558:	dec00b15 	stw	sp,44(sp)
 100355c:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1003560:	d8c01017 	ldw	r3,64(sp)
 1003564:	18800117 	ldw	r2,4(r3)
 1003568:	00c040b4 	movhi	r3,258
 100356c:	18fc0404 	addi	r3,r3,-4080
 1003570:	10bffd04 	addi	r2,r2,-12
 1003574:	d8800e15 	stw	r2,56(sp)
 1003578:	d8801017 	ldw	r2,64(sp)
 100357c:	10c00015 	stw	r3,0(r2)
 1003580:	d8c00e17 	ldw	r3,56(sp)
 1003584:	008040b4 	movhi	r2,258
 1003588:	109bd604 	addi	r2,r2,28504
 100358c:	1880091e 	bne	r3,r2,10035b4 <_ZNSt13runtime_errorD1Ev+0x9c>
 1003590:	d9001017 	ldw	r4,64(sp)
 1003594:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1003598:	d9000104 	addi	r4,sp,4
 100359c:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 10035a0:	dfc01417 	ldw	ra,80(sp)
 10035a4:	df001317 	ldw	fp,76(sp)
 10035a8:	ddc01217 	ldw	r23,72(sp)
 10035ac:	dec01504 	addi	sp,sp,84
 10035b0:	f800283a 	ret
 10035b4:	00800044 	movi	r2,1
 10035b8:	d8800215 	stw	r2,8(sp)
 10035bc:	19000204 	addi	r4,r3,8
 10035c0:	017fffc4 	movi	r5,-1
 10035c4:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10035c8:	00bff116 	blt	zero,r2,1003590 <_ZNSt13runtime_errorD1Ev+0x78>
 10035cc:	d9000e17 	ldw	r4,56(sp)
 10035d0:	d80b883a 	mov	r5,sp
 10035d4:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10035d8:	003fed06 	br	1003590 <_ZNSt13runtime_errorD1Ev+0x78>
 10035dc:	d8800417 	ldw	r2,16(sp)
 10035e0:	d8c00317 	ldw	r3,12(sp)
 10035e4:	d9001017 	ldw	r4,64(sp)
 10035e8:	d8800f15 	stw	r2,60(sp)
 10035ec:	d8c01115 	stw	r3,68(sp)
 10035f0:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 10035f4:	d8c00f17 	ldw	r3,60(sp)
 10035f8:	00bfffc4 	movi	r2,-1
 10035fc:	18800326 	beq	r3,r2,100360c <_ZNSt13runtime_errorD1Ev+0xf4>
 1003600:	d9001117 	ldw	r4,68(sp)
 1003604:	d8800215 	stw	r2,8(sp)
 1003608:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 100360c:	d9001117 	ldw	r4,68(sp)
 1003610:	00bfffc4 	movi	r2,-1
 1003614:	d8800215 	stw	r2,8(sp)
 1003618:	10081540 	call	1008154 <__cxa_call_unexpected>

0100361c <_ZNSt13runtime_errorD2Ev>:
 100361c:	deffeb04 	addi	sp,sp,-84
 1003620:	00804074 	movhi	r2,257
 1003624:	10a0b504 	addi	r2,r2,-32044
 1003628:	00c040b4 	movhi	r3,258
 100362c:	18fb1c04 	addi	r3,r3,-5008
 1003630:	d8800715 	stw	r2,28(sp)
 1003634:	d9001015 	stw	r4,64(sp)
 1003638:	00804034 	movhi	r2,256
 100363c:	108db804 	addi	r2,r2,14048
 1003640:	d9000104 	addi	r4,sp,4
 1003644:	d8c00815 	stw	r3,32(sp)
 1003648:	d8800a15 	stw	r2,40(sp)
 100364c:	dfc01415 	stw	ra,80(sp)
 1003650:	df001315 	stw	fp,76(sp)
 1003654:	ddc01215 	stw	r23,72(sp)
 1003658:	dec00915 	stw	sp,36(sp)
 100365c:	dec00b15 	stw	sp,44(sp)
 1003660:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1003664:	d8c01017 	ldw	r3,64(sp)
 1003668:	18800117 	ldw	r2,4(r3)
 100366c:	00c040b4 	movhi	r3,258
 1003670:	18fc0404 	addi	r3,r3,-4080
 1003674:	10bffd04 	addi	r2,r2,-12
 1003678:	d8800e15 	stw	r2,56(sp)
 100367c:	d8801017 	ldw	r2,64(sp)
 1003680:	10c00015 	stw	r3,0(r2)
 1003684:	d8c00e17 	ldw	r3,56(sp)
 1003688:	008040b4 	movhi	r2,258
 100368c:	109bd604 	addi	r2,r2,28504
 1003690:	1880091e 	bne	r3,r2,10036b8 <_ZNSt13runtime_errorD2Ev+0x9c>
 1003694:	d9001017 	ldw	r4,64(sp)
 1003698:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 100369c:	d9000104 	addi	r4,sp,4
 10036a0:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 10036a4:	dfc01417 	ldw	ra,80(sp)
 10036a8:	df001317 	ldw	fp,76(sp)
 10036ac:	ddc01217 	ldw	r23,72(sp)
 10036b0:	dec01504 	addi	sp,sp,84
 10036b4:	f800283a 	ret
 10036b8:	00800044 	movi	r2,1
 10036bc:	d8800215 	stw	r2,8(sp)
 10036c0:	19000204 	addi	r4,r3,8
 10036c4:	017fffc4 	movi	r5,-1
 10036c8:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10036cc:	00bff116 	blt	zero,r2,1003694 <_ZNSt13runtime_errorD2Ev+0x78>
 10036d0:	d9000e17 	ldw	r4,56(sp)
 10036d4:	d80b883a 	mov	r5,sp
 10036d8:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10036dc:	003fed06 	br	1003694 <_ZNSt13runtime_errorD2Ev+0x78>
 10036e0:	d8800417 	ldw	r2,16(sp)
 10036e4:	d8c00317 	ldw	r3,12(sp)
 10036e8:	d9001017 	ldw	r4,64(sp)
 10036ec:	d8800f15 	stw	r2,60(sp)
 10036f0:	d8c01115 	stw	r3,68(sp)
 10036f4:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 10036f8:	d8c00f17 	ldw	r3,60(sp)
 10036fc:	00bfffc4 	movi	r2,-1
 1003700:	18800326 	beq	r3,r2,1003710 <_ZNSt13runtime_errorD2Ev+0xf4>
 1003704:	d9001117 	ldw	r4,68(sp)
 1003708:	d8800215 	stw	r2,8(sp)
 100370c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1003710:	d9001117 	ldw	r4,68(sp)
 1003714:	00bfffc4 	movi	r2,-1
 1003718:	d8800215 	stw	r2,8(sp)
 100371c:	10081540 	call	1008154 <__cxa_call_unexpected>

01003720 <_ZNSt13runtime_errorD0Ev>:
 1003720:	deffeb04 	addi	sp,sp,-84
 1003724:	00804074 	movhi	r2,257
 1003728:	10a0b504 	addi	r2,r2,-32044
 100372c:	00c040b4 	movhi	r3,258
 1003730:	18fb2004 	addi	r3,r3,-4992
 1003734:	d8800715 	stw	r2,28(sp)
 1003738:	d9001015 	stw	r4,64(sp)
 100373c:	00804034 	movhi	r2,256
 1003740:	108dfb04 	addi	r2,r2,14316
 1003744:	d9000104 	addi	r4,sp,4
 1003748:	d8c00815 	stw	r3,32(sp)
 100374c:	d8800a15 	stw	r2,40(sp)
 1003750:	dfc01415 	stw	ra,80(sp)
 1003754:	df001315 	stw	fp,76(sp)
 1003758:	ddc01215 	stw	r23,72(sp)
 100375c:	dec00915 	stw	sp,36(sp)
 1003760:	dec00b15 	stw	sp,44(sp)
 1003764:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1003768:	d8c01017 	ldw	r3,64(sp)
 100376c:	18800117 	ldw	r2,4(r3)
 1003770:	00c040b4 	movhi	r3,258
 1003774:	18fc0404 	addi	r3,r3,-4080
 1003778:	10bffd04 	addi	r2,r2,-12
 100377c:	d8800e15 	stw	r2,56(sp)
 1003780:	d8801017 	ldw	r2,64(sp)
 1003784:	10c00015 	stw	r3,0(r2)
 1003788:	d8c00e17 	ldw	r3,56(sp)
 100378c:	008040b4 	movhi	r2,258
 1003790:	109bd604 	addi	r2,r2,28504
 1003794:	18800b1e 	bne	r3,r2,10037c4 <_ZNSt13runtime_errorD0Ev+0xa4>
 1003798:	d9001017 	ldw	r4,64(sp)
 100379c:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 10037a0:	d9001017 	ldw	r4,64(sp)
 10037a4:	1008aa40 	call	1008aa4 <_ZdlPv>
 10037a8:	d9000104 	addi	r4,sp,4
 10037ac:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 10037b0:	dfc01417 	ldw	ra,80(sp)
 10037b4:	df001317 	ldw	fp,76(sp)
 10037b8:	ddc01217 	ldw	r23,72(sp)
 10037bc:	dec01504 	addi	sp,sp,84
 10037c0:	f800283a 	ret
 10037c4:	00800044 	movi	r2,1
 10037c8:	d8800215 	stw	r2,8(sp)
 10037cc:	19000204 	addi	r4,r3,8
 10037d0:	017fffc4 	movi	r5,-1
 10037d4:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10037d8:	00bfef16 	blt	zero,r2,1003798 <_ZNSt13runtime_errorD0Ev+0x78>
 10037dc:	d9000e17 	ldw	r4,56(sp)
 10037e0:	d80b883a 	mov	r5,sp
 10037e4:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10037e8:	003feb06 	br	1003798 <_ZNSt13runtime_errorD0Ev+0x78>
 10037ec:	d8800417 	ldw	r2,16(sp)
 10037f0:	d8c00317 	ldw	r3,12(sp)
 10037f4:	d9001017 	ldw	r4,64(sp)
 10037f8:	d8800f15 	stw	r2,60(sp)
 10037fc:	d8c01115 	stw	r3,68(sp)
 1003800:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1003804:	d8c00f17 	ldw	r3,60(sp)
 1003808:	00bfffc4 	movi	r2,-1
 100380c:	18800326 	beq	r3,r2,100381c <_ZNSt13runtime_errorD0Ev+0xfc>
 1003810:	d9001117 	ldw	r4,68(sp)
 1003814:	d8800215 	stw	r2,8(sp)
 1003818:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 100381c:	d9001117 	ldw	r4,68(sp)
 1003820:	00bfffc4 	movi	r2,-1
 1003824:	d8800215 	stw	r2,8(sp)
 1003828:	10081540 	call	1008154 <__cxa_call_unexpected>

0100382c <_ZNSt11logic_errorD2Ev>:
 100382c:	deffeb04 	addi	sp,sp,-84
 1003830:	00804074 	movhi	r2,257
 1003834:	10a0b504 	addi	r2,r2,-32044
 1003838:	00c040b4 	movhi	r3,258
 100383c:	18fb2404 	addi	r3,r3,-4976
 1003840:	d8800715 	stw	r2,28(sp)
 1003844:	d9001015 	stw	r4,64(sp)
 1003848:	00804034 	movhi	r2,256
 100384c:	108e3c04 	addi	r2,r2,14576
 1003850:	d9000104 	addi	r4,sp,4
 1003854:	d8c00815 	stw	r3,32(sp)
 1003858:	d8800a15 	stw	r2,40(sp)
 100385c:	dfc01415 	stw	ra,80(sp)
 1003860:	df001315 	stw	fp,76(sp)
 1003864:	ddc01215 	stw	r23,72(sp)
 1003868:	dec00915 	stw	sp,36(sp)
 100386c:	dec00b15 	stw	sp,44(sp)
 1003870:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1003874:	d8c01017 	ldw	r3,64(sp)
 1003878:	18800117 	ldw	r2,4(r3)
 100387c:	00c040b4 	movhi	r3,258
 1003880:	18fc0904 	addi	r3,r3,-4060
 1003884:	10bffd04 	addi	r2,r2,-12
 1003888:	d8800e15 	stw	r2,56(sp)
 100388c:	d8801017 	ldw	r2,64(sp)
 1003890:	10c00015 	stw	r3,0(r2)
 1003894:	d8c00e17 	ldw	r3,56(sp)
 1003898:	008040b4 	movhi	r2,258
 100389c:	109bd604 	addi	r2,r2,28504
 10038a0:	1880091e 	bne	r3,r2,10038c8 <_ZNSt11logic_errorD2Ev+0x9c>
 10038a4:	d9001017 	ldw	r4,64(sp)
 10038a8:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 10038ac:	d9000104 	addi	r4,sp,4
 10038b0:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 10038b4:	dfc01417 	ldw	ra,80(sp)
 10038b8:	df001317 	ldw	fp,76(sp)
 10038bc:	ddc01217 	ldw	r23,72(sp)
 10038c0:	dec01504 	addi	sp,sp,84
 10038c4:	f800283a 	ret
 10038c8:	00800044 	movi	r2,1
 10038cc:	d8800215 	stw	r2,8(sp)
 10038d0:	19000204 	addi	r4,r3,8
 10038d4:	017fffc4 	movi	r5,-1
 10038d8:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10038dc:	00bff116 	blt	zero,r2,10038a4 <_ZNSt11logic_errorD2Ev+0x78>
 10038e0:	d9000e17 	ldw	r4,56(sp)
 10038e4:	d80b883a 	mov	r5,sp
 10038e8:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10038ec:	003fed06 	br	10038a4 <_ZNSt11logic_errorD2Ev+0x78>
 10038f0:	d8800417 	ldw	r2,16(sp)
 10038f4:	d8c00317 	ldw	r3,12(sp)
 10038f8:	d9001017 	ldw	r4,64(sp)
 10038fc:	d8800f15 	stw	r2,60(sp)
 1003900:	d8c01115 	stw	r3,68(sp)
 1003904:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1003908:	d8c00f17 	ldw	r3,60(sp)
 100390c:	00bfffc4 	movi	r2,-1
 1003910:	18800326 	beq	r3,r2,1003920 <_ZNSt11logic_errorD2Ev+0xf4>
 1003914:	d9001117 	ldw	r4,68(sp)
 1003918:	d8800215 	stw	r2,8(sp)
 100391c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1003920:	d9001117 	ldw	r4,68(sp)
 1003924:	00bfffc4 	movi	r2,-1
 1003928:	d8800215 	stw	r2,8(sp)
 100392c:	10081540 	call	1008154 <__cxa_call_unexpected>

01003930 <_ZNSt11logic_errorD0Ev>:
 1003930:	deffeb04 	addi	sp,sp,-84
 1003934:	00804074 	movhi	r2,257
 1003938:	10a0b504 	addi	r2,r2,-32044
 100393c:	00c040b4 	movhi	r3,258
 1003940:	18fb2804 	addi	r3,r3,-4960
 1003944:	d8800715 	stw	r2,28(sp)
 1003948:	d9001015 	stw	r4,64(sp)
 100394c:	00804034 	movhi	r2,256
 1003950:	108e7f04 	addi	r2,r2,14844
 1003954:	d9000104 	addi	r4,sp,4
 1003958:	d8c00815 	stw	r3,32(sp)
 100395c:	d8800a15 	stw	r2,40(sp)
 1003960:	dfc01415 	stw	ra,80(sp)
 1003964:	df001315 	stw	fp,76(sp)
 1003968:	ddc01215 	stw	r23,72(sp)
 100396c:	dec00915 	stw	sp,36(sp)
 1003970:	dec00b15 	stw	sp,44(sp)
 1003974:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1003978:	d8c01017 	ldw	r3,64(sp)
 100397c:	18800117 	ldw	r2,4(r3)
 1003980:	00c040b4 	movhi	r3,258
 1003984:	18fc0904 	addi	r3,r3,-4060
 1003988:	10bffd04 	addi	r2,r2,-12
 100398c:	d8800e15 	stw	r2,56(sp)
 1003990:	d8801017 	ldw	r2,64(sp)
 1003994:	10c00015 	stw	r3,0(r2)
 1003998:	d8c00e17 	ldw	r3,56(sp)
 100399c:	008040b4 	movhi	r2,258
 10039a0:	109bd604 	addi	r2,r2,28504
 10039a4:	18800b1e 	bne	r3,r2,10039d4 <_ZNSt11logic_errorD0Ev+0xa4>
 10039a8:	d9001017 	ldw	r4,64(sp)
 10039ac:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 10039b0:	d9001017 	ldw	r4,64(sp)
 10039b4:	1008aa40 	call	1008aa4 <_ZdlPv>
 10039b8:	d9000104 	addi	r4,sp,4
 10039bc:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 10039c0:	dfc01417 	ldw	ra,80(sp)
 10039c4:	df001317 	ldw	fp,76(sp)
 10039c8:	ddc01217 	ldw	r23,72(sp)
 10039cc:	dec01504 	addi	sp,sp,84
 10039d0:	f800283a 	ret
 10039d4:	00800044 	movi	r2,1
 10039d8:	d8800215 	stw	r2,8(sp)
 10039dc:	19000204 	addi	r4,r3,8
 10039e0:	017fffc4 	movi	r5,-1
 10039e4:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10039e8:	00bfef16 	blt	zero,r2,10039a8 <_ZNSt11logic_errorD0Ev+0x78>
 10039ec:	d9000e17 	ldw	r4,56(sp)
 10039f0:	d80b883a 	mov	r5,sp
 10039f4:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10039f8:	003feb06 	br	10039a8 <_ZNSt11logic_errorD0Ev+0x78>
 10039fc:	d8800417 	ldw	r2,16(sp)
 1003a00:	d8c00317 	ldw	r3,12(sp)
 1003a04:	d9001017 	ldw	r4,64(sp)
 1003a08:	d8800f15 	stw	r2,60(sp)
 1003a0c:	d8c01115 	stw	r3,68(sp)
 1003a10:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1003a14:	d8c00f17 	ldw	r3,60(sp)
 1003a18:	00bfffc4 	movi	r2,-1
 1003a1c:	18800326 	beq	r3,r2,1003a2c <_ZNSt11logic_errorD0Ev+0xfc>
 1003a20:	d9001117 	ldw	r4,68(sp)
 1003a24:	d8800215 	stw	r2,8(sp)
 1003a28:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1003a2c:	d9001117 	ldw	r4,68(sp)
 1003a30:	00bfffc4 	movi	r2,-1
 1003a34:	d8800215 	stw	r2,8(sp)
 1003a38:	10081540 	call	1008154 <__cxa_call_unexpected>

01003a3c <_ZNSt11char_traitsIcE2eqERKcS2_>:
 1003a3c:	20c00007 	ldb	r3,0(r4)
 1003a40:	28800007 	ldb	r2,0(r5)
 1003a44:	1885003a 	cmpeq	r2,r3,r2
 1003a48:	f800283a 	ret

01003a4c <_ZNKSs7_M_dataEv>:
 1003a4c:	20800017 	ldw	r2,0(r4)
 1003a50:	f800283a 	ret

01003a54 <_ZNSs7_M_dataEPc>:
 1003a54:	2805883a 	mov	r2,r5
 1003a58:	21400015 	stw	r5,0(r4)
 1003a5c:	f800283a 	ret

01003a60 <_ZNKSs6_M_repEv>:
 1003a60:	20800017 	ldw	r2,0(r4)
 1003a64:	10bffd04 	addi	r2,r2,-12
 1003a68:	f800283a 	ret

01003a6c <_ZNKSs9_M_ibeginEv>:
 1003a6c:	20800017 	ldw	r2,0(r4)
 1003a70:	f800283a 	ret

01003a74 <_ZNKSs7_M_iendEv>:
 1003a74:	20c00017 	ldw	r3,0(r4)
 1003a78:	18bffd17 	ldw	r2,-12(r3)
 1003a7c:	1885883a 	add	r2,r3,r2
 1003a80:	f800283a 	ret

01003a84 <_ZNKSs8_M_limitEmm>:
 1003a84:	20c00017 	ldw	r3,0(r4)
 1003a88:	18bffd17 	ldw	r2,-12(r3)
 1003a8c:	1145c83a 	sub	r2,r2,r5
 1003a90:	3080012e 	bgeu	r6,r2,1003a98 <_ZNKSs8_M_limitEmm+0x14>
 1003a94:	3005883a 	mov	r2,r6
 1003a98:	f800283a 	ret

01003a9c <_ZNKSs11_M_disjunctEPKc>:
 1003a9c:	21000017 	ldw	r4,0(r4)
 1003aa0:	00800044 	movi	r2,1
 1003aa4:	29000336 	bltu	r5,r4,1003ab4 <_ZNKSs11_M_disjunctEPKc+0x18>
 1003aa8:	20bffd17 	ldw	r2,-12(r4)
 1003aac:	2085883a 	add	r2,r4,r2
 1003ab0:	1145803a 	cmpltu	r2,r2,r5
 1003ab4:	f800283a 	ret

01003ab8 <_ZNSs12_S_empty_repEv>:
 1003ab8:	008040b4 	movhi	r2,258
 1003abc:	109bd604 	addi	r2,r2,28504
 1003ac0:	f800283a 	ret

01003ac4 <_ZNSsC1Ev>:
 1003ac4:	008040b4 	movhi	r2,258
 1003ac8:	109bd904 	addi	r2,r2,28516
 1003acc:	20800015 	stw	r2,0(r4)
 1003ad0:	f800283a 	ret

01003ad4 <_ZNKSs5beginEv>:
 1003ad4:	20800017 	ldw	r2,0(r4)
 1003ad8:	f800283a 	ret

01003adc <_ZNKSs3endEv>:
 1003adc:	20c00017 	ldw	r3,0(r4)
 1003ae0:	18bffd17 	ldw	r2,-12(r3)
 1003ae4:	1885883a 	add	r2,r3,r2
 1003ae8:	f800283a 	ret

01003aec <_ZNKSs4sizeEv>:
 1003aec:	20c00017 	ldw	r3,0(r4)
 1003af0:	18bffd17 	ldw	r2,-12(r3)
 1003af4:	f800283a 	ret

01003af8 <_ZNKSs8max_sizeEv>:
 1003af8:	00900034 	movhi	r2,16384
 1003afc:	10bfff04 	addi	r2,r2,-4
 1003b00:	f800283a 	ret

01003b04 <_ZNKSs8capacityEv>:
 1003b04:	20c00017 	ldw	r3,0(r4)
 1003b08:	18bffe17 	ldw	r2,-8(r3)
 1003b0c:	f800283a 	ret

01003b10 <_ZNKSs4dataEv>:
 1003b10:	20800017 	ldw	r2,0(r4)
 1003b14:	f800283a 	ret

01003b18 <_ZNKSs13get_allocatorEv>:
 1003b18:	2005883a 	mov	r2,r4
 1003b1c:	f800283a 	ret

01003b20 <_ZNSs12_Alloc_hiderC1EPcRKSaIcE>:
 1003b20:	21400015 	stw	r5,0(r4)
 1003b24:	f800283a 	ret

01003b28 <_ZNSs4_Rep12_S_empty_repEv>:
 1003b28:	008040b4 	movhi	r2,258
 1003b2c:	109bd604 	addi	r2,r2,28504
 1003b30:	f800283a 	ret

01003b34 <_ZNKSs4_Rep12_M_is_leakedEv>:
 1003b34:	20800217 	ldw	r2,8(r4)
 1003b38:	1004d7fa 	srli	r2,r2,31
 1003b3c:	f800283a 	ret

01003b40 <_ZNKSs4_Rep12_M_is_sharedEv>:
 1003b40:	20800217 	ldw	r2,8(r4)
 1003b44:	0084803a 	cmplt	r2,zero,r2
 1003b48:	f800283a 	ret

01003b4c <_ZNSs4_Rep13_M_set_leakedEv>:
 1003b4c:	00bfffc4 	movi	r2,-1
 1003b50:	20800215 	stw	r2,8(r4)
 1003b54:	f800283a 	ret

01003b58 <_ZNSs4_Rep15_M_set_sharableEv>:
 1003b58:	20000215 	stw	zero,8(r4)
 1003b5c:	f800283a 	ret

01003b60 <_ZNSs4_Rep26_M_set_length_and_sharableEm>:
 1003b60:	2145883a 	add	r2,r4,r5
 1003b64:	20000215 	stw	zero,8(r4)
 1003b68:	21400015 	stw	r5,0(r4)
 1003b6c:	10000305 	stb	zero,12(r2)
 1003b70:	f800283a 	ret

01003b74 <_ZNSs4_Rep10_M_refdataEv>:
 1003b74:	20800304 	addi	r2,r4,12
 1003b78:	f800283a 	ret

01003b7c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_>:
 1003b7c:	defff504 	addi	sp,sp,-44
 1003b80:	dd400615 	stw	r21,24(sp)
 1003b84:	dd000515 	stw	r20,20(sp)
 1003b88:	dcc00415 	stw	r19,16(sp)
 1003b8c:	dc800315 	stw	r18,12(sp)
 1003b90:	dc400215 	stw	r17,8(sp)
 1003b94:	dfc00a15 	stw	ra,40(sp)
 1003b98:	df000915 	stw	fp,36(sp)
 1003b9c:	ddc00815 	stw	r23,32(sp)
 1003ba0:	dd800715 	stw	r22,28(sp)
 1003ba4:	dc000115 	stw	r16,4(sp)
 1003ba8:	2025883a 	mov	r18,r4
 1003bac:	2823883a 	mov	r17,r5
 1003bb0:	3027883a 	mov	r19,r6
 1003bb4:	382b883a 	mov	r21,r7
 1003bb8:	dd000b17 	ldw	r20,44(sp)
 1003bbc:	21400d26 	beq	r4,r5,1003bf4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1003bc0:	31c00c26 	beq	r6,r7,1003bf4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1003bc4:	30800044 	addi	r2,r6,1
 1003bc8:	d8800015 	stw	r2,0(sp)
 1003bcc:	38803226 	beq	r7,r2,1003c98 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x11c>
 1003bd0:	9021883a 	mov	r16,r18
 1003bd4:	8009883a 	mov	r4,r16
 1003bd8:	980b883a 	mov	r5,r19
 1003bdc:	a03ee83a 	callr	r20
 1003be0:	10803fcc 	andi	r2,r2,255
 1003be4:	1000101e 	bne	r2,zero,1003c28 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xac>
 1003be8:	84000044 	addi	r16,r16,1
 1003bec:	847ff91e 	bne	r16,r17,1003bd4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x58>
 1003bf0:	8825883a 	mov	r18,r17
 1003bf4:	9005883a 	mov	r2,r18
 1003bf8:	dfc00a17 	ldw	ra,40(sp)
 1003bfc:	df000917 	ldw	fp,36(sp)
 1003c00:	ddc00817 	ldw	r23,32(sp)
 1003c04:	dd800717 	ldw	r22,28(sp)
 1003c08:	dd400617 	ldw	r21,24(sp)
 1003c0c:	dd000517 	ldw	r20,20(sp)
 1003c10:	dcc00417 	ldw	r19,16(sp)
 1003c14:	dc800317 	ldw	r18,12(sp)
 1003c18:	dc400217 	ldw	r17,8(sp)
 1003c1c:	dc000117 	ldw	r16,4(sp)
 1003c20:	dec00b04 	addi	sp,sp,44
 1003c24:	f800283a 	ret
 1003c28:	8c3ff126 	beq	r17,r16,1003bf0 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x74>
 1003c2c:	8825883a 	mov	r18,r17
 1003c30:	00000206 	br	1003c3c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xc0>
 1003c34:	84000044 	addi	r16,r16,1
 1003c38:	84bfed26 	beq	r16,r18,1003bf0 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x74>
 1003c3c:	8009883a 	mov	r4,r16
 1003c40:	980b883a 	mov	r5,r19
 1003c44:	a03ee83a 	callr	r20
 1003c48:	10803fcc 	andi	r2,r2,255
 1003c4c:	103ff926 	beq	r2,zero,1003c34 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xb8>
 1003c50:	87000044 	addi	fp,r16,1
 1003c54:	8f001a26 	beq	r17,fp,1003cc0 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x144>
 1003c58:	dd800017 	ldw	r22,0(sp)
 1003c5c:	e02f883a 	mov	r23,fp
 1003c60:	b809883a 	mov	r4,r23
 1003c64:	b00b883a 	mov	r5,r22
 1003c68:	a03ee83a 	callr	r20
 1003c6c:	8c07c83a 	sub	r3,r17,r16
 1003c70:	10803fcc 	andi	r2,r2,255
 1003c74:	98c7883a 	add	r3,r19,r3
 1003c78:	b5800044 	addi	r22,r22,1
 1003c7c:	bdc00044 	addi	r23,r23,1
 1003c80:	e025883a 	mov	r18,fp
 1003c84:	103fd226 	beq	r2,zero,1003bd0 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x54>
 1003c88:	ad800b26 	beq	r21,r22,1003cb8 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x13c>
 1003c8c:	b0fff41e 	bne	r22,r3,1003c60 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xe4>
 1003c90:	b825883a 	mov	r18,r23
 1003c94:	003fd706 	br	1003bf4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1003c98:	2021883a 	mov	r16,r4
 1003c9c:	8009883a 	mov	r4,r16
 1003ca0:	980b883a 	mov	r5,r19
 1003ca4:	a03ee83a 	callr	r20
 1003ca8:	10803fcc 	andi	r2,r2,255
 1003cac:	1000021e 	bne	r2,zero,1003cb8 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x13c>
 1003cb0:	84000044 	addi	r16,r16,1
 1003cb4:	8c3ff91e 	bne	r17,r16,1003c9c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x120>
 1003cb8:	8025883a 	mov	r18,r16
 1003cbc:	003fcd06 	br	1003bf4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1003cc0:	e025883a 	mov	r18,fp
 1003cc4:	003fcb06 	br	1003bf4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>

01003cc8 <_ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_>:
 1003cc8:	20c00017 	ldw	r3,0(r4)
 1003ccc:	28800017 	ldw	r2,0(r5)
 1003cd0:	1885003a 	cmpeq	r2,r3,r2
 1003cd4:	f800283a 	ret

01003cd8 <_ZNSs12_Alloc_hiderC2EPcRKSaIcE>:
 1003cd8:	21400015 	stw	r5,0(r4)
 1003cdc:	f800283a 	ret

01003ce0 <_ZNSs4_Rep10_M_refcopyEv>:
 1003ce0:	deffee04 	addi	sp,sp,-72
 1003ce4:	00804074 	movhi	r2,257
 1003ce8:	10a0b504 	addi	r2,r2,-32044
 1003cec:	00c040b4 	movhi	r3,258
 1003cf0:	18fb2c04 	addi	r3,r3,-4944
 1003cf4:	d8800615 	stw	r2,24(sp)
 1003cf8:	d9000d15 	stw	r4,52(sp)
 1003cfc:	00804034 	movhi	r2,256
 1003d00:	108f5e04 	addi	r2,r2,15736
 1003d04:	d809883a 	mov	r4,sp
 1003d08:	d8c00715 	stw	r3,28(sp)
 1003d0c:	d8800915 	stw	r2,36(sp)
 1003d10:	dfc01115 	stw	ra,68(sp)
 1003d14:	df001015 	stw	fp,64(sp)
 1003d18:	ddc00f15 	stw	r23,60(sp)
 1003d1c:	dec00815 	stw	sp,32(sp)
 1003d20:	dec00a15 	stw	sp,40(sp)
 1003d24:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1003d28:	d8c00d17 	ldw	r3,52(sp)
 1003d2c:	008040b4 	movhi	r2,258
 1003d30:	109bd604 	addi	r2,r2,28504
 1003d34:	18800b1e 	bne	r3,r2,1003d64 <_ZNSs4_Rep10_M_refcopyEv+0x84>
 1003d38:	d8800d17 	ldw	r2,52(sp)
 1003d3c:	d809883a 	mov	r4,sp
 1003d40:	10800304 	addi	r2,r2,12
 1003d44:	d8800e15 	stw	r2,56(sp)
 1003d48:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1003d4c:	d8800e17 	ldw	r2,56(sp)
 1003d50:	dfc01117 	ldw	ra,68(sp)
 1003d54:	df001017 	ldw	fp,64(sp)
 1003d58:	ddc00f17 	ldw	r23,60(sp)
 1003d5c:	dec01204 	addi	sp,sp,72
 1003d60:	f800283a 	ret
 1003d64:	01400044 	movi	r5,1
 1003d68:	d9400115 	stw	r5,4(sp)
 1003d6c:	19000204 	addi	r4,r3,8
 1003d70:	10079140 	call	1007914 <_ZN9__gnu_cxx12__atomic_addEPVii>
 1003d74:	003ff006 	br	1003d38 <_ZNSs4_Rep10_M_refcopyEv+0x58>
 1003d78:	d8800317 	ldw	r2,12(sp)
 1003d7c:	00ffffc4 	movi	r3,-1
 1003d80:	d9000217 	ldw	r4,8(sp)
 1003d84:	10c00226 	beq	r2,r3,1003d90 <_ZNSs4_Rep10_M_refcopyEv+0xb0>
 1003d88:	d8c00115 	stw	r3,4(sp)
 1003d8c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1003d90:	00bfffc4 	movi	r2,-1
 1003d94:	d8800115 	stw	r2,4(sp)
 1003d98:	10081540 	call	1008154 <__cxa_call_unexpected>

01003d9c <_ZNKSs15_M_check_lengthEmmPKc>:
 1003d9c:	20800017 	ldw	r2,0(r4)
 1003da0:	deffff04 	addi	sp,sp,-4
 1003da4:	dfc00015 	stw	ra,0(sp)
 1003da8:	10fffd17 	ldw	r3,-12(r2)
 1003dac:	00900034 	movhi	r2,16384
 1003db0:	10bfff04 	addi	r2,r2,-4
 1003db4:	1947c83a 	sub	r3,r3,r5
 1003db8:	10c5c83a 	sub	r2,r2,r3
 1003dbc:	11800336 	bltu	r2,r6,1003dcc <_ZNKSs15_M_check_lengthEmmPKc+0x30>
 1003dc0:	dfc00017 	ldw	ra,0(sp)
 1003dc4:	dec00104 	addi	sp,sp,4
 1003dc8:	f800283a 	ret
 1003dcc:	3809883a 	mov	r4,r7
 1003dd0:	10025600 	call	1002560 <_ZSt20__throw_length_errorPKc>

01003dd4 <_ZNKSs8_M_checkEmPKc>:
 1003dd4:	20c00017 	ldw	r3,0(r4)
 1003dd8:	deffff04 	addi	sp,sp,-4
 1003ddc:	dfc00015 	stw	ra,0(sp)
 1003de0:	18bffd17 	ldw	r2,-12(r3)
 1003de4:	11400436 	bltu	r2,r5,1003df8 <_ZNKSs8_M_checkEmPKc+0x24>
 1003de8:	2805883a 	mov	r2,r5
 1003dec:	dfc00017 	ldw	ra,0(sp)
 1003df0:	dec00104 	addi	sp,sp,4
 1003df4:	f800283a 	ret
 1003df8:	3009883a 	mov	r4,r6
 1003dfc:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

01003e00 <_ZNSs9_M_assignEPcmc>:
 1003e00:	3011883a 	mov	r8,r6
 1003e04:	2807883a 	mov	r3,r5
 1003e08:	280d883a 	mov	r6,r5
 1003e0c:	41403fcc 	andi	r5,r8,255
 1003e10:	2940201c 	xori	r5,r5,128
 1003e14:	01c00044 	movi	r7,1
 1003e18:	297fe004 	addi	r5,r5,-128
 1003e1c:	19c00126 	beq	r3,r7,1003e24 <_ZNSs9_M_assignEPcmc+0x24>
 1003e20:	100a1281 	jmpi	100a128 <memset>
 1003e24:	22000005 	stb	r8,0(r4)
 1003e28:	f800283a 	ret

01003e2c <_ZNSs7_M_moveEPcPKcm>:
 1003e2c:	00800044 	movi	r2,1
 1003e30:	30800126 	beq	r6,r2,1003e38 <_ZNSs7_M_moveEPcPKcm+0xc>
 1003e34:	100a0481 	jmpi	100a048 <memmove>
 1003e38:	28800003 	ldbu	r2,0(r5)
 1003e3c:	20800005 	stb	r2,0(r4)
 1003e40:	f800283a 	ret

01003e44 <_ZNSs7_M_copyEPcPKcm>:
 1003e44:	00800044 	movi	r2,1
 1003e48:	30800126 	beq	r6,r2,1003e50 <_ZNSs7_M_copyEPcPKcm+0xc>
 1003e4c:	1009fa81 	jmpi	1009fa8 <memcpy>
 1003e50:	28800003 	ldbu	r2,0(r5)
 1003e54:	20800005 	stb	r2,0(r4)
 1003e58:	f800283a 	ret

01003e5c <_ZNKSs5c_strEv>:
 1003e5c:	20800017 	ldw	r2,0(r4)
 1003e60:	f800283a 	ret

01003e64 <_ZNKSsixEm>:
 1003e64:	20800017 	ldw	r2,0(r4)
 1003e68:	2885883a 	add	r2,r5,r2
 1003e6c:	f800283a 	ret

01003e70 <_ZNKSs17find_first_not_ofEPKcmm>:
 1003e70:	20c00017 	ldw	r3,0(r4)
 1003e74:	defffb04 	addi	sp,sp,-20
 1003e78:	dcc00315 	stw	r19,12(sp)
 1003e7c:	18bffd17 	ldw	r2,-12(r3)
 1003e80:	dc800215 	stw	r18,8(sp)
 1003e84:	dc400115 	stw	r17,4(sp)
 1003e88:	dc000015 	stw	r16,0(sp)
 1003e8c:	dfc00415 	stw	ra,16(sp)
 1003e90:	2027883a 	mov	r19,r4
 1003e94:	3021883a 	mov	r16,r6
 1003e98:	2825883a 	mov	r18,r5
 1003e9c:	3823883a 	mov	r17,r7
 1003ea0:	30800536 	bltu	r6,r2,1003eb8 <_ZNKSs17find_first_not_ofEPKcmm+0x48>
 1003ea4:	00001206 	br	1003ef0 <_ZNKSs17find_first_not_ofEPKcmm+0x80>
 1003ea8:	98c00017 	ldw	r3,0(r19)
 1003eac:	84000044 	addi	r16,r16,1
 1003eb0:	18bffd17 	ldw	r2,-12(r3)
 1003eb4:	80800e2e 	bgeu	r16,r2,1003ef0 <_ZNKSs17find_first_not_ofEPKcmm+0x80>
 1003eb8:	1c05883a 	add	r2,r3,r16
 1003ebc:	11400007 	ldb	r5,0(r2)
 1003ec0:	9009883a 	mov	r4,r18
 1003ec4:	880d883a 	mov	r6,r17
 1003ec8:	1009e500 	call	1009e50 <memchr>
 1003ecc:	103ff61e 	bne	r2,zero,1003ea8 <_ZNKSs17find_first_not_ofEPKcmm+0x38>
 1003ed0:	8005883a 	mov	r2,r16
 1003ed4:	dfc00417 	ldw	ra,16(sp)
 1003ed8:	dcc00317 	ldw	r19,12(sp)
 1003edc:	dc800217 	ldw	r18,8(sp)
 1003ee0:	dc400117 	ldw	r17,4(sp)
 1003ee4:	dc000017 	ldw	r16,0(sp)
 1003ee8:	dec00504 	addi	sp,sp,20
 1003eec:	f800283a 	ret
 1003ef0:	043fffc4 	movi	r16,-1
 1003ef4:	8005883a 	mov	r2,r16
 1003ef8:	dfc00417 	ldw	ra,16(sp)
 1003efc:	dcc00317 	ldw	r19,12(sp)
 1003f00:	dc800217 	ldw	r18,8(sp)
 1003f04:	dc400117 	ldw	r17,4(sp)
 1003f08:	dc000017 	ldw	r16,0(sp)
 1003f0c:	dec00504 	addi	sp,sp,20
 1003f10:	f800283a 	ret

01003f14 <_ZNKSs4findEPKcmm>:
 1003f14:	defffb04 	addi	sp,sp,-20
 1003f18:	dc000115 	stw	r16,4(sp)
 1003f1c:	24000017 	ldw	r16,0(r4)
 1003f20:	31c7883a 	add	r3,r6,r7
 1003f24:	dc800315 	stw	r18,12(sp)
 1003f28:	823ffd17 	ldw	r8,-12(r16)
 1003f2c:	8189883a 	add	r4,r16,r6
 1003f30:	280d883a 	mov	r6,r5
 1003f34:	8225883a 	add	r18,r16,r8
 1003f38:	dc400215 	stw	r17,8(sp)
 1003f3c:	dfc00415 	stw	ra,16(sp)
 1003f40:	3823883a 	mov	r17,r7
 1003f44:	900b883a 	mov	r5,r18
 1003f48:	398f883a 	add	r7,r7,r6
 1003f4c:	40c0082e 	bgeu	r8,r3,1003f70 <_ZNKSs4findEPKcmm+0x5c>
 1003f50:	00ffffc4 	movi	r3,-1
 1003f54:	1805883a 	mov	r2,r3
 1003f58:	dfc00417 	ldw	ra,16(sp)
 1003f5c:	dc800317 	ldw	r18,12(sp)
 1003f60:	dc400217 	ldw	r17,8(sp)
 1003f64:	dc000117 	ldw	r16,4(sp)
 1003f68:	dec00504 	addi	sp,sp,20
 1003f6c:	f800283a 	ret
 1003f70:	00804034 	movhi	r2,256
 1003f74:	108e8f04 	addi	r2,r2,14908
 1003f78:	d8800015 	stw	r2,0(sp)
 1003f7c:	1003b7c0 	call	1003b7c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_>
 1003f80:	1407c83a 	sub	r3,r2,r16
 1003f84:	90bff31e 	bne	r18,r2,1003f54 <_ZNKSs4findEPKcmm+0x40>
 1003f88:	883ff11e 	bne	r17,zero,1003f50 <_ZNKSs4findEPKcmm+0x3c>
 1003f8c:	1805883a 	mov	r2,r3
 1003f90:	dfc00417 	ldw	ra,16(sp)
 1003f94:	dc800317 	ldw	r18,12(sp)
 1003f98:	dc400217 	ldw	r17,8(sp)
 1003f9c:	dc000117 	ldw	r16,4(sp)
 1003fa0:	dec00504 	addi	sp,sp,20
 1003fa4:	f800283a 	ret

01003fa8 <_ZNKSs2atEm>:
 1003fa8:	21000017 	ldw	r4,0(r4)
 1003fac:	deffff04 	addi	sp,sp,-4
 1003fb0:	dfc00015 	stw	ra,0(sp)
 1003fb4:	20bffd17 	ldw	r2,-12(r4)
 1003fb8:	2880042e 	bgeu	r5,r2,1003fcc <_ZNKSs2atEm+0x24>
 1003fbc:	2145883a 	add	r2,r4,r5
 1003fc0:	dfc00017 	ldw	ra,0(sp)
 1003fc4:	dec00104 	addi	sp,sp,4
 1003fc8:	f800283a 	ret
 1003fcc:	010040b4 	movhi	r4,258
 1003fd0:	213c1b04 	addi	r4,r4,-3988
 1003fd4:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

01003fd8 <_ZNKSs5emptyEv>:
 1003fd8:	20c00017 	ldw	r3,0(r4)
 1003fdc:	18bffd17 	ldw	r2,-12(r3)
 1003fe0:	1005003a 	cmpeq	r2,r2,zero
 1003fe4:	f800283a 	ret

01003fe8 <_ZNKSs6lengthEv>:
 1003fe8:	20c00017 	ldw	r3,0(r4)
 1003fec:	18bffd17 	ldw	r2,-12(r3)
 1003ff0:	f800283a 	ret

01003ff4 <_ZNKSs4findERKSsm>:
 1003ff4:	29400017 	ldw	r5,0(r5)
 1003ff8:	29fffd17 	ldw	r7,-12(r5)
 1003ffc:	1003f141 	jmpi	1003f14 <_ZNKSs4findEPKcmm>

01004000 <_ZNKSs17find_first_not_ofERKSsm>:
 1004000:	29400017 	ldw	r5,0(r5)
 1004004:	29fffd17 	ldw	r7,-12(r5)
 1004008:	1003e701 	jmpi	1003e70 <_ZNKSs17find_first_not_ofEPKcmm>

0100400c <_ZNKSs5rfindEPKcmm>:
 100400c:	defff804 	addi	sp,sp,-32
 1004010:	dc800415 	stw	r18,16(sp)
 1004014:	24800017 	ldw	r18,0(r4)
 1004018:	dcc00515 	stw	r19,20(sp)
 100401c:	dc400315 	stw	r17,12(sp)
 1004020:	90bffd17 	ldw	r2,-12(r18)
 1004024:	dfc00715 	stw	ra,28(sp)
 1004028:	dd000615 	stw	r20,24(sp)
 100402c:	dc000215 	stw	r16,8(sp)
 1004030:	3823883a 	mov	r17,r7
 1004034:	2827883a 	mov	r19,r5
 1004038:	d9800115 	stw	r6,4(sp)
 100403c:	11c01136 	bltu	r2,r7,1004084 <_ZNKSs5rfindEPKcmm+0x78>
 1004040:	11c5c83a 	sub	r2,r2,r7
 1004044:	d8800015 	stw	r2,0(sp)
 1004048:	3080182e 	bgeu	r6,r2,10040ac <_ZNKSs5rfindEPKcmm+0xa0>
 100404c:	d8800104 	addi	r2,sp,4
 1004050:	10800017 	ldw	r2,0(r2)
 1004054:	053fffc4 	movi	r20,-1
 1004058:	d8800115 	stw	r2,4(sp)
 100405c:	00000106 	br	1004064 <_ZNKSs5rfindEPKcmm+0x58>
 1004060:	d8c00115 	stw	r3,4(sp)
 1004064:	dc000117 	ldw	r16,4(sp)
 1004068:	980b883a 	mov	r5,r19
 100406c:	880d883a 	mov	r6,r17
 1004070:	9409883a 	add	r4,r18,r16
 1004074:	1009f340 	call	1009f34 <memcmp>
 1004078:	80ffffc4 	addi	r3,r16,-1
 100407c:	10000226 	beq	r2,zero,1004088 <_ZNKSs5rfindEPKcmm+0x7c>
 1004080:	1d3ff71e 	bne	r3,r20,1004060 <_ZNKSs5rfindEPKcmm+0x54>
 1004084:	043fffc4 	movi	r16,-1
 1004088:	8005883a 	mov	r2,r16
 100408c:	dfc00717 	ldw	ra,28(sp)
 1004090:	dd000617 	ldw	r20,24(sp)
 1004094:	dcc00517 	ldw	r19,20(sp)
 1004098:	dc800417 	ldw	r18,16(sp)
 100409c:	dc400317 	ldw	r17,12(sp)
 10040a0:	dc000217 	ldw	r16,8(sp)
 10040a4:	dec00804 	addi	sp,sp,32
 10040a8:	f800283a 	ret
 10040ac:	d805883a 	mov	r2,sp
 10040b0:	003fe706 	br	1004050 <_ZNKSs5rfindEPKcmm+0x44>

010040b4 <_ZNKSs5rfindEPKcm>:
 10040b4:	defffc04 	addi	sp,sp,-16
 10040b8:	dd400215 	stw	r21,8(sp)
 10040bc:	dcc00115 	stw	r19,4(sp)
 10040c0:	dc400015 	stw	r17,0(sp)
 10040c4:	2027883a 	mov	r19,r4
 10040c8:	dfc00315 	stw	ra,12(sp)
 10040cc:	2809883a 	mov	r4,r5
 10040d0:	2823883a 	mov	r17,r5
 10040d4:	302b883a 	mov	r21,r6
 10040d8:	100a5f80 	call	100a5f8 <strlen>
 10040dc:	880b883a 	mov	r5,r17
 10040e0:	9809883a 	mov	r4,r19
 10040e4:	a80d883a 	mov	r6,r21
 10040e8:	100f883a 	mov	r7,r2
 10040ec:	dfc00317 	ldw	ra,12(sp)
 10040f0:	dd400217 	ldw	r21,8(sp)
 10040f4:	dcc00117 	ldw	r19,4(sp)
 10040f8:	dc400017 	ldw	r17,0(sp)
 10040fc:	dec00404 	addi	sp,sp,16
 1004100:	100400c1 	jmpi	100400c <_ZNKSs5rfindEPKcmm>

01004104 <_ZNKSs5rfindERKSsm>:
 1004104:	29400017 	ldw	r5,0(r5)
 1004108:	29fffd17 	ldw	r7,-12(r5)
 100410c:	100400c1 	jmpi	100400c <_ZNKSs5rfindEPKcmm>

01004110 <_ZNSsC2Ev>:
 1004110:	008040b4 	movhi	r2,258
 1004114:	109bd904 	addi	r2,r2,28516
 1004118:	20800015 	stw	r2,0(r4)
 100411c:	f800283a 	ret

01004120 <_ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_>:
 1004120:	20c00017 	ldw	r3,0(r4)
 1004124:	28800017 	ldw	r2,0(r5)
 1004128:	1885003a 	cmpeq	r2,r3,r2
 100412c:	f800283a 	ret

01004130 <_ZNKSs5rfindEcm>:
 1004130:	21000017 	ldw	r4,0(r4)
 1004134:	3007883a 	mov	r3,r6
 1004138:	20bffd17 	ldw	r2,-12(r4)
 100413c:	10001226 	beq	r2,zero,1004188 <_ZNKSs5rfindEcm+0x58>
 1004140:	11bfffc4 	addi	r6,r2,-1
 1004144:	19800e36 	bltu	r3,r6,1004180 <_ZNKSs5rfindEcm+0x50>
 1004148:	29403fcc 	andi	r5,r5,255
 100414c:	2940201c 	xori	r5,r5,128
 1004150:	2189883a 	add	r4,r4,r6
 1004154:	297fe004 	addi	r5,r5,-128
 1004158:	0007883a 	mov	r3,zero
 100415c:	32000044 	addi	r8,r6,1
 1004160:	30cfc83a 	sub	r7,r6,r3
 1004164:	40c00826 	beq	r8,r3,1004188 <_ZNKSs5rfindEcm+0x58>
 1004168:	20800007 	ldb	r2,0(r4)
 100416c:	18c00044 	addi	r3,r3,1
 1004170:	213fffc4 	addi	r4,r4,-1
 1004174:	117ffa1e 	bne	r2,r5,1004160 <_ZNKSs5rfindEcm+0x30>
 1004178:	3805883a 	mov	r2,r7
 100417c:	f800283a 	ret
 1004180:	180d883a 	mov	r6,r3
 1004184:	003ff006 	br	1004148 <_ZNKSs5rfindEcm+0x18>
 1004188:	01ffffc4 	movi	r7,-1
 100418c:	3805883a 	mov	r2,r7
 1004190:	f800283a 	ret

01004194 <_ZNKSs12find_last_ofEcm>:
 1004194:	29403fcc 	andi	r5,r5,255
 1004198:	2940201c 	xori	r5,r5,128
 100419c:	297fe004 	addi	r5,r5,-128
 10041a0:	10041301 	jmpi	1004130 <_ZNKSs5rfindEcm>

010041a4 <_ZNKSs16find_last_not_ofEcm>:
 10041a4:	21000017 	ldw	r4,0(r4)
 10041a8:	20bffd17 	ldw	r2,-12(r4)
 10041ac:	10001026 	beq	r2,zero,10041f0 <_ZNKSs16find_last_not_ofEcm+0x4c>
 10041b0:	10ffffc4 	addi	r3,r2,-1
 10041b4:	30c00c36 	bltu	r6,r3,10041e8 <_ZNKSs16find_last_not_ofEcm+0x44>
 10041b8:	29403fcc 	andi	r5,r5,255
 10041bc:	2940201c 	xori	r5,r5,128
 10041c0:	20c9883a 	add	r4,r4,r3
 10041c4:	297fe004 	addi	r5,r5,-128
 10041c8:	01bfffc4 	movi	r6,-1
 10041cc:	20800007 	ldb	r2,0(r4)
 10041d0:	213fffc4 	addi	r4,r4,-1
 10041d4:	1140021e 	bne	r2,r5,10041e0 <_ZNKSs16find_last_not_ofEcm+0x3c>
 10041d8:	18ffffc4 	addi	r3,r3,-1
 10041dc:	19bffb1e 	bne	r3,r6,10041cc <_ZNKSs16find_last_not_ofEcm+0x28>
 10041e0:	1805883a 	mov	r2,r3
 10041e4:	f800283a 	ret
 10041e8:	3007883a 	mov	r3,r6
 10041ec:	003ff206 	br	10041b8 <_ZNKSs16find_last_not_ofEcm+0x14>
 10041f0:	00ffffc4 	movi	r3,-1
 10041f4:	1805883a 	mov	r2,r3
 10041f8:	f800283a 	ret

010041fc <_ZNKSs17find_first_not_ofEcm>:
 10041fc:	21000017 	ldw	r4,0(r4)
 1004200:	3007883a 	mov	r3,r6
 1004204:	21bffd17 	ldw	r6,-12(r4)
 1004208:	19800f2e 	bgeu	r3,r6,1004248 <_ZNKSs17find_first_not_ofEcm+0x4c>
 100420c:	20c9883a 	add	r4,r4,r3
 1004210:	29403fcc 	andi	r5,r5,255
 1004214:	20800007 	ldb	r2,0(r4)
 1004218:	2940201c 	xori	r5,r5,128
 100421c:	297fe004 	addi	r5,r5,-128
 1004220:	28800a1e 	bne	r5,r2,100424c <_ZNKSs17find_first_not_ofEcm+0x50>
 1004224:	30cfc83a 	sub	r7,r6,r3
 1004228:	180d883a 	mov	r6,r3
 100422c:	00000306 	br	100423c <_ZNKSs17find_first_not_ofEcm+0x40>
 1004230:	20800047 	ldb	r2,1(r4)
 1004234:	21000044 	addi	r4,r4,1
 1004238:	1140061e 	bne	r2,r5,1004254 <_ZNKSs17find_first_not_ofEcm+0x58>
 100423c:	31800044 	addi	r6,r6,1
 1004240:	19c5883a 	add	r2,r3,r7
 1004244:	11bffa1e 	bne	r2,r6,1004230 <_ZNKSs17find_first_not_ofEcm+0x34>
 1004248:	00ffffc4 	movi	r3,-1
 100424c:	1805883a 	mov	r2,r3
 1004250:	f800283a 	ret
 1004254:	3007883a 	mov	r3,r6
 1004258:	1805883a 	mov	r2,r3
 100425c:	f800283a 	ret

01004260 <_ZNSs4_Rep9_S_createEmmRKSaIcE>:
 1004260:	deffed04 	addi	sp,sp,-76
 1004264:	00804074 	movhi	r2,257
 1004268:	10a0b504 	addi	r2,r2,-32044
 100426c:	00c040b4 	movhi	r3,258
 1004270:	18fb2f44 	addi	r3,r3,-4931
 1004274:	d8800615 	stw	r2,24(sp)
 1004278:	d9000e15 	stw	r4,56(sp)
 100427c:	00804034 	movhi	r2,256
 1004280:	1090e004 	addi	r2,r2,17280
 1004284:	d809883a 	mov	r4,sp
 1004288:	d8c00715 	stw	r3,28(sp)
 100428c:	d8800915 	stw	r2,36(sp)
 1004290:	dfc01215 	stw	ra,72(sp)
 1004294:	df001115 	stw	fp,68(sp)
 1004298:	ddc01015 	stw	r23,64(sp)
 100429c:	dec00815 	stw	sp,32(sp)
 10042a0:	dec00a15 	stw	sp,40(sp)
 10042a4:	d9400f15 	stw	r5,60(sp)
 10042a8:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 10042ac:	d8c00e17 	ldw	r3,56(sp)
 10042b0:	00900034 	movhi	r2,16384
 10042b4:	10bfff04 	addi	r2,r2,-4
 10042b8:	10c02c36 	bltu	r2,r3,100436c <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x10c>
 10042bc:	d9800f17 	ldw	r6,60(sp)
 10042c0:	d9c00e17 	ldw	r7,56(sp)
 10042c4:	31c0032e 	bgeu	r6,r7,10042d4 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x74>
 10042c8:	3189883a 	add	r4,r6,r6
 10042cc:	3900012e 	bgeu	r7,r4,10042d4 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x74>
 10042d0:	d9000e15 	stw	r4,56(sp)
 10042d4:	d8800e17 	ldw	r2,56(sp)
 10042d8:	01400344 	movi	r5,13
 10042dc:	00c40004 	movi	r3,4096
 10042e0:	1149883a 	add	r4,r2,r5
 10042e4:	20800404 	addi	r2,r4,16
 10042e8:	18800f36 	bltu	r3,r2,1004328 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0xc8>
 10042ec:	00800044 	movi	r2,1
 10042f0:	d8800115 	stw	r2,4(sp)
 10042f4:	10090340 	call	1009034 <_Znwm>
 10042f8:	d8c00e17 	ldw	r3,56(sp)
 10042fc:	10000215 	stw	zero,8(r2)
 1004300:	d809883a 	mov	r4,sp
 1004304:	10c00115 	stw	r3,4(r2)
 1004308:	d8800d15 	stw	r2,52(sp)
 100430c:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1004310:	d8800d17 	ldw	r2,52(sp)
 1004314:	dfc01217 	ldw	ra,72(sp)
 1004318:	df001117 	ldw	fp,68(sp)
 100431c:	ddc01017 	ldw	r23,64(sp)
 1004320:	dec01304 	addi	sp,sp,76
 1004324:	f800283a 	ret
 1004328:	d9800f17 	ldw	r6,60(sp)
 100432c:	d9c00e17 	ldw	r7,56(sp)
 1004330:	31ffee2e 	bgeu	r6,r7,10042ec <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
 1004334:	1083ffcc 	andi	r2,r2,4095
 1004338:	1885c83a 	sub	r2,r3,r2
 100433c:	388f883a 	add	r7,r7,r2
 1004340:	01100034 	movhi	r4,16384
 1004344:	213fff04 	addi	r4,r4,-4
 1004348:	d9c00e15 	stw	r7,56(sp)
 100434c:	21c00336 	bltu	r4,r7,100435c <_ZNSs4_Rep9_S_createEmmRKSaIcE+0xfc>
 1004350:	d8800e17 	ldw	r2,56(sp)
 1004354:	1149883a 	add	r4,r2,r5
 1004358:	003fe406 	br	10042ec <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
 100435c:	d9000e15 	stw	r4,56(sp)
 1004360:	d8800e17 	ldw	r2,56(sp)
 1004364:	1149883a 	add	r4,r2,r5
 1004368:	003fe006 	br	10042ec <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
 100436c:	00bfffc4 	movi	r2,-1
 1004370:	010040b4 	movhi	r4,258
 1004374:	213c2004 	addi	r4,r4,-3968
 1004378:	d8800115 	stw	r2,4(sp)
 100437c:	10025600 	call	1002560 <_ZSt20__throw_length_errorPKc>
 1004380:	d9000217 	ldw	r4,8(sp)
 1004384:	00bfffc4 	movi	r2,-1
 1004388:	d8800115 	stw	r2,4(sp)
 100438c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>

01004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 1004390:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

01004394 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 1004394:	defffd04 	addi	sp,sp,-12
 1004398:	dc000015 	stw	r16,0(sp)
 100439c:	008040b4 	movhi	r2,258
 10043a0:	109bd604 	addi	r2,r2,28504
 10043a4:	2021883a 	mov	r16,r4
 10043a8:	dc400115 	stw	r17,4(sp)
 10043ac:	dfc00215 	stw	ra,8(sp)
 10043b0:	2823883a 	mov	r17,r5
 10043b4:	21000204 	addi	r4,r4,8
 10043b8:	017fffc4 	movi	r5,-1
 10043bc:	8080051e 	bne	r16,r2,10043d4 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x40>
 10043c0:	dfc00217 	ldw	ra,8(sp)
 10043c4:	dc400117 	ldw	r17,4(sp)
 10043c8:	dc000017 	ldw	r16,0(sp)
 10043cc:	dec00304 	addi	sp,sp,12
 10043d0:	f800283a 	ret
 10043d4:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10043d8:	8009883a 	mov	r4,r16
 10043dc:	880b883a 	mov	r5,r17
 10043e0:	00bff716 	blt	zero,r2,10043c0 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x2c>
 10043e4:	dfc00217 	ldw	ra,8(sp)
 10043e8:	dc400117 	ldw	r17,4(sp)
 10043ec:	dc000017 	ldw	r16,0(sp)
 10043f0:	dec00304 	addi	sp,sp,12
 10043f4:	10043901 	jmpi	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>

010043f8 <_ZNKSs12find_last_ofEPKcmm>:
 10043f8:	20800017 	ldw	r2,0(r4)
 10043fc:	defffb04 	addi	sp,sp,-20
 1004400:	dcc00315 	stw	r19,12(sp)
 1004404:	10fffd17 	ldw	r3,-12(r2)
 1004408:	dc800215 	stw	r18,8(sp)
 100440c:	dc400115 	stw	r17,4(sp)
 1004410:	dfc00415 	stw	ra,16(sp)
 1004414:	dc000015 	stw	r16,0(sp)
 1004418:	2027883a 	mov	r19,r4
 100441c:	2825883a 	mov	r18,r5
 1004420:	3823883a 	mov	r17,r7
 1004424:	18002426 	beq	r3,zero,10044b8 <_ZNKSs12find_last_ofEPKcmm+0xc0>
 1004428:	38002326 	beq	r7,zero,10044b8 <_ZNKSs12find_last_ofEPKcmm+0xc0>
 100442c:	1c3fffc4 	addi	r16,r3,-1
 1004430:	3400102e 	bgeu	r6,r16,1004474 <_ZNKSs12find_last_ofEPKcmm+0x7c>
 1004434:	3021883a 	mov	r16,r6
 1004438:	1405883a 	add	r2,r2,r16
 100443c:	11400007 	ldb	r5,0(r2)
 1004440:	9009883a 	mov	r4,r18
 1004444:	880d883a 	mov	r6,r17
 1004448:	1009e500 	call	1009e50 <memchr>
 100444c:	10000f26 	beq	r2,zero,100448c <_ZNKSs12find_last_ofEPKcmm+0x94>
 1004450:	8005883a 	mov	r2,r16
 1004454:	dfc00417 	ldw	ra,16(sp)
 1004458:	dcc00317 	ldw	r19,12(sp)
 100445c:	dc800217 	ldw	r18,8(sp)
 1004460:	dc400117 	ldw	r17,4(sp)
 1004464:	dc000017 	ldw	r16,0(sp)
 1004468:	dec00504 	addi	sp,sp,20
 100446c:	f800283a 	ret
 1004470:	98800017 	ldw	r2,0(r19)
 1004474:	1405883a 	add	r2,r2,r16
 1004478:	11400007 	ldb	r5,0(r2)
 100447c:	9009883a 	mov	r4,r18
 1004480:	880d883a 	mov	r6,r17
 1004484:	1009e500 	call	1009e50 <memchr>
 1004488:	103ff11e 	bne	r2,zero,1004450 <_ZNKSs12find_last_ofEPKcmm+0x58>
 100448c:	843fffc4 	addi	r16,r16,-1
 1004490:	00bfffc4 	movi	r2,-1
 1004494:	80bff61e 	bne	r16,r2,1004470 <_ZNKSs12find_last_ofEPKcmm+0x78>
 1004498:	8005883a 	mov	r2,r16
 100449c:	dfc00417 	ldw	ra,16(sp)
 10044a0:	dcc00317 	ldw	r19,12(sp)
 10044a4:	dc800217 	ldw	r18,8(sp)
 10044a8:	dc400117 	ldw	r17,4(sp)
 10044ac:	dc000017 	ldw	r16,0(sp)
 10044b0:	dec00504 	addi	sp,sp,20
 10044b4:	f800283a 	ret
 10044b8:	043fffc4 	movi	r16,-1
 10044bc:	8005883a 	mov	r2,r16
 10044c0:	dfc00417 	ldw	ra,16(sp)
 10044c4:	dcc00317 	ldw	r19,12(sp)
 10044c8:	dc800217 	ldw	r18,8(sp)
 10044cc:	dc400117 	ldw	r17,4(sp)
 10044d0:	dc000017 	ldw	r16,0(sp)
 10044d4:	dec00504 	addi	sp,sp,20
 10044d8:	f800283a 	ret

010044dc <_ZNKSs12find_last_ofERKSsm>:
 10044dc:	29400017 	ldw	r5,0(r5)
 10044e0:	29fffd17 	ldw	r7,-12(r5)
 10044e4:	10043f81 	jmpi	10043f8 <_ZNKSs12find_last_ofEPKcmm>

010044e8 <_ZNKSs13find_first_ofEPKcmm>:
 10044e8:	defffb04 	addi	sp,sp,-20
 10044ec:	dcc00315 	stw	r19,12(sp)
 10044f0:	dc800215 	stw	r18,8(sp)
 10044f4:	dc400115 	stw	r17,4(sp)
 10044f8:	dc000015 	stw	r16,0(sp)
 10044fc:	dfc00415 	stw	ra,16(sp)
 1004500:	3823883a 	mov	r17,r7
 1004504:	2027883a 	mov	r19,r4
 1004508:	2825883a 	mov	r18,r5
 100450c:	3021883a 	mov	r16,r6
 1004510:	3800091e 	bne	r7,zero,1004538 <_ZNKSs13find_first_ofEPKcmm+0x50>
 1004514:	043fffc4 	movi	r16,-1
 1004518:	8005883a 	mov	r2,r16
 100451c:	dfc00417 	ldw	ra,16(sp)
 1004520:	dcc00317 	ldw	r19,12(sp)
 1004524:	dc800217 	ldw	r18,8(sp)
 1004528:	dc400117 	ldw	r17,4(sp)
 100452c:	dc000017 	ldw	r16,0(sp)
 1004530:	dec00504 	addi	sp,sp,20
 1004534:	f800283a 	ret
 1004538:	20c00017 	ldw	r3,0(r4)
 100453c:	18bffd17 	ldw	r2,-12(r3)
 1004540:	30bff42e 	bgeu	r6,r2,1004514 <_ZNKSs13find_first_ofEPKcmm+0x2c>
 1004544:	80c5883a 	add	r2,r16,r3
 1004548:	11400007 	ldb	r5,0(r2)
 100454c:	9009883a 	mov	r4,r18
 1004550:	880d883a 	mov	r6,r17
 1004554:	1009e500 	call	1009e50 <memchr>
 1004558:	103fef1e 	bne	r2,zero,1004518 <_ZNKSs13find_first_ofEPKcmm+0x30>
 100455c:	98c00017 	ldw	r3,0(r19)
 1004560:	84000044 	addi	r16,r16,1
 1004564:	18bffd17 	ldw	r2,-12(r3)
 1004568:	80bff636 	bltu	r16,r2,1004544 <_ZNKSs13find_first_ofEPKcmm+0x5c>
 100456c:	003fe906 	br	1004514 <_ZNKSs13find_first_ofEPKcmm+0x2c>

01004570 <_ZNKSs13find_first_ofERKSsm>:
 1004570:	29400017 	ldw	r5,0(r5)
 1004574:	29fffd17 	ldw	r7,-12(r5)
 1004578:	10044e81 	jmpi	10044e8 <_ZNKSs13find_first_ofEPKcmm>

0100457c <_ZNKSs4findEcm>:
 100457c:	defffe04 	addi	sp,sp,-8
 1004580:	dc000015 	stw	r16,0(sp)
 1004584:	24000017 	ldw	r16,0(r4)
 1004588:	29403fcc 	andi	r5,r5,255
 100458c:	3007883a 	mov	r3,r6
 1004590:	81fffd17 	ldw	r7,-12(r16)
 1004594:	2940201c 	xori	r5,r5,128
 1004598:	8189883a 	add	r4,r16,r6
 100459c:	dfc00115 	stw	ra,4(sp)
 10045a0:	297fe004 	addi	r5,r5,-128
 10045a4:	398dc83a 	sub	r6,r7,r6
 10045a8:	19c0082e 	bgeu	r3,r7,10045cc <_ZNKSs4findEcm+0x50>
 10045ac:	1009e500 	call	1009e50 <memchr>
 10045b0:	1407c83a 	sub	r3,r2,r16
 10045b4:	10000526 	beq	r2,zero,10045cc <_ZNKSs4findEcm+0x50>
 10045b8:	1805883a 	mov	r2,r3
 10045bc:	dfc00117 	ldw	ra,4(sp)
 10045c0:	dc000017 	ldw	r16,0(sp)
 10045c4:	dec00204 	addi	sp,sp,8
 10045c8:	f800283a 	ret
 10045cc:	00ffffc4 	movi	r3,-1
 10045d0:	1805883a 	mov	r2,r3
 10045d4:	dfc00117 	ldw	ra,4(sp)
 10045d8:	dc000017 	ldw	r16,0(sp)
 10045dc:	dec00204 	addi	sp,sp,8
 10045e0:	f800283a 	ret

010045e4 <_ZNKSs13find_first_ofEcm>:
 10045e4:	29403fcc 	andi	r5,r5,255
 10045e8:	2940201c 	xori	r5,r5,128
 10045ec:	297fe004 	addi	r5,r5,-128
 10045f0:	100457c1 	jmpi	100457c <_ZNKSs4findEcm>

010045f4 <_ZNKSs16find_last_not_ofEPKcmm>:
 10045f4:	20800017 	ldw	r2,0(r4)
 10045f8:	defffb04 	addi	sp,sp,-20
 10045fc:	dcc00315 	stw	r19,12(sp)
 1004600:	10fffd17 	ldw	r3,-12(r2)
 1004604:	dc800215 	stw	r18,8(sp)
 1004608:	dc400115 	stw	r17,4(sp)
 100460c:	dfc00415 	stw	ra,16(sp)
 1004610:	dc000015 	stw	r16,0(sp)
 1004614:	2027883a 	mov	r19,r4
 1004618:	2825883a 	mov	r18,r5
 100461c:	3823883a 	mov	r17,r7
 1004620:	18002326 	beq	r3,zero,10046b0 <_ZNKSs16find_last_not_ofEPKcmm+0xbc>
 1004624:	1c3fffc4 	addi	r16,r3,-1
 1004628:	3400102e 	bgeu	r6,r16,100466c <_ZNKSs16find_last_not_ofEPKcmm+0x78>
 100462c:	3021883a 	mov	r16,r6
 1004630:	1405883a 	add	r2,r2,r16
 1004634:	11400007 	ldb	r5,0(r2)
 1004638:	9009883a 	mov	r4,r18
 100463c:	880d883a 	mov	r6,r17
 1004640:	1009e500 	call	1009e50 <memchr>
 1004644:	10000f1e 	bne	r2,zero,1004684 <_ZNKSs16find_last_not_ofEPKcmm+0x90>
 1004648:	8005883a 	mov	r2,r16
 100464c:	dfc00417 	ldw	ra,16(sp)
 1004650:	dcc00317 	ldw	r19,12(sp)
 1004654:	dc800217 	ldw	r18,8(sp)
 1004658:	dc400117 	ldw	r17,4(sp)
 100465c:	dc000017 	ldw	r16,0(sp)
 1004660:	dec00504 	addi	sp,sp,20
 1004664:	f800283a 	ret
 1004668:	98800017 	ldw	r2,0(r19)
 100466c:	1405883a 	add	r2,r2,r16
 1004670:	11400007 	ldb	r5,0(r2)
 1004674:	9009883a 	mov	r4,r18
 1004678:	880d883a 	mov	r6,r17
 100467c:	1009e500 	call	1009e50 <memchr>
 1004680:	103ff126 	beq	r2,zero,1004648 <_ZNKSs16find_last_not_ofEPKcmm+0x54>
 1004684:	843fffc4 	addi	r16,r16,-1
 1004688:	00bfffc4 	movi	r2,-1
 100468c:	80bff61e 	bne	r16,r2,1004668 <_ZNKSs16find_last_not_ofEPKcmm+0x74>
 1004690:	8005883a 	mov	r2,r16
 1004694:	dfc00417 	ldw	ra,16(sp)
 1004698:	dcc00317 	ldw	r19,12(sp)
 100469c:	dc800217 	ldw	r18,8(sp)
 10046a0:	dc400117 	ldw	r17,4(sp)
 10046a4:	dc000017 	ldw	r16,0(sp)
 10046a8:	dec00504 	addi	sp,sp,20
 10046ac:	f800283a 	ret
 10046b0:	043fffc4 	movi	r16,-1
 10046b4:	8005883a 	mov	r2,r16
 10046b8:	dfc00417 	ldw	ra,16(sp)
 10046bc:	dcc00317 	ldw	r19,12(sp)
 10046c0:	dc800217 	ldw	r18,8(sp)
 10046c4:	dc400117 	ldw	r17,4(sp)
 10046c8:	dc000017 	ldw	r16,0(sp)
 10046cc:	dec00504 	addi	sp,sp,20
 10046d0:	f800283a 	ret

010046d4 <_ZNKSs16find_last_not_ofERKSsm>:
 10046d4:	29400017 	ldw	r5,0(r5)
 10046d8:	29fffd17 	ldw	r7,-12(r5)
 10046dc:	10045f41 	jmpi	10045f4 <_ZNKSs16find_last_not_ofEPKcmm>

010046e0 <_ZNKSs7compareERKSs>:
 10046e0:	20800017 	ldw	r2,0(r4)
 10046e4:	28c00017 	ldw	r3,0(r5)
 10046e8:	defffb04 	addi	sp,sp,-20
 10046ec:	dc400315 	stw	r17,12(sp)
 10046f0:	dc000215 	stw	r16,8(sp)
 10046f4:	147ffd17 	ldw	r17,-12(r2)
 10046f8:	1c3ffd17 	ldw	r16,-12(r3)
 10046fc:	dfc00415 	stw	ra,16(sp)
 1004700:	d80d883a 	mov	r6,sp
 1004704:	dc400015 	stw	r17,0(sp)
 1004708:	dc000115 	stw	r16,4(sp)
 100470c:	8440012e 	bgeu	r16,r17,1004714 <_ZNKSs7compareERKSs+0x34>
 1004710:	d9800104 	addi	r6,sp,4
 1004714:	21000017 	ldw	r4,0(r4)
 1004718:	29400017 	ldw	r5,0(r5)
 100471c:	31800017 	ldw	r6,0(r6)
 1004720:	1009f340 	call	1009f34 <memcmp>
 1004724:	1000011e 	bne	r2,zero,100472c <_ZNKSs7compareERKSs+0x4c>
 1004728:	8c05c83a 	sub	r2,r17,r16
 100472c:	dfc00417 	ldw	ra,16(sp)
 1004730:	dc400317 	ldw	r17,12(sp)
 1004734:	dc000217 	ldw	r16,8(sp)
 1004738:	dec00504 	addi	sp,sp,20
 100473c:	f800283a 	ret

01004740 <_ZNKSs4findEPKcm>:
 1004740:	defffc04 	addi	sp,sp,-16
 1004744:	dd400215 	stw	r21,8(sp)
 1004748:	dcc00115 	stw	r19,4(sp)
 100474c:	dc400015 	stw	r17,0(sp)
 1004750:	2027883a 	mov	r19,r4
 1004754:	dfc00315 	stw	ra,12(sp)
 1004758:	2809883a 	mov	r4,r5
 100475c:	2823883a 	mov	r17,r5
 1004760:	302b883a 	mov	r21,r6
 1004764:	100a5f80 	call	100a5f8 <strlen>
 1004768:	880b883a 	mov	r5,r17
 100476c:	9809883a 	mov	r4,r19
 1004770:	a80d883a 	mov	r6,r21
 1004774:	100f883a 	mov	r7,r2
 1004778:	dfc00317 	ldw	ra,12(sp)
 100477c:	dd400217 	ldw	r21,8(sp)
 1004780:	dcc00117 	ldw	r19,4(sp)
 1004784:	dc400017 	ldw	r17,0(sp)
 1004788:	dec00404 	addi	sp,sp,16
 100478c:	1003f141 	jmpi	1003f14 <_ZNKSs4findEPKcmm>

01004790 <_ZNKSs7compareEPKc>:
 1004790:	20800017 	ldw	r2,0(r4)
 1004794:	defff904 	addi	sp,sp,-28
 1004798:	dc400315 	stw	r17,12(sp)
 100479c:	147ffd17 	ldw	r17,-12(r2)
 10047a0:	dcc00515 	stw	r19,20(sp)
 10047a4:	dc800415 	stw	r18,16(sp)
 10047a8:	dc000215 	stw	r16,8(sp)
 10047ac:	dfc00615 	stw	ra,24(sp)
 10047b0:	2025883a 	mov	r18,r4
 10047b4:	dc400015 	stw	r17,0(sp)
 10047b8:	2809883a 	mov	r4,r5
 10047bc:	2827883a 	mov	r19,r5
 10047c0:	100a5f80 	call	100a5f8 <strlen>
 10047c4:	1021883a 	mov	r16,r2
 10047c8:	d80d883a 	mov	r6,sp
 10047cc:	d8800115 	stw	r2,4(sp)
 10047d0:	1440012e 	bgeu	r2,r17,10047d8 <_ZNKSs7compareEPKc+0x48>
 10047d4:	d9800104 	addi	r6,sp,4
 10047d8:	91000017 	ldw	r4,0(r18)
 10047dc:	31800017 	ldw	r6,0(r6)
 10047e0:	980b883a 	mov	r5,r19
 10047e4:	1009f340 	call	1009f34 <memcmp>
 10047e8:	1000011e 	bne	r2,zero,10047f0 <_ZNKSs7compareEPKc+0x60>
 10047ec:	8c05c83a 	sub	r2,r17,r16
 10047f0:	dfc00617 	ldw	ra,24(sp)
 10047f4:	dcc00517 	ldw	r19,20(sp)
 10047f8:	dc800417 	ldw	r18,16(sp)
 10047fc:	dc400317 	ldw	r17,12(sp)
 1004800:	dc000217 	ldw	r16,8(sp)
 1004804:	dec00704 	addi	sp,sp,28
 1004808:	f800283a 	ret

0100480c <_ZNKSs16find_last_not_ofEPKcm>:
 100480c:	defffc04 	addi	sp,sp,-16
 1004810:	dd400215 	stw	r21,8(sp)
 1004814:	dcc00115 	stw	r19,4(sp)
 1004818:	dc400015 	stw	r17,0(sp)
 100481c:	2027883a 	mov	r19,r4
 1004820:	dfc00315 	stw	ra,12(sp)
 1004824:	2809883a 	mov	r4,r5
 1004828:	2823883a 	mov	r17,r5
 100482c:	302b883a 	mov	r21,r6
 1004830:	100a5f80 	call	100a5f8 <strlen>
 1004834:	880b883a 	mov	r5,r17
 1004838:	9809883a 	mov	r4,r19
 100483c:	a80d883a 	mov	r6,r21
 1004840:	100f883a 	mov	r7,r2
 1004844:	dfc00317 	ldw	ra,12(sp)
 1004848:	dd400217 	ldw	r21,8(sp)
 100484c:	dcc00117 	ldw	r19,4(sp)
 1004850:	dc400017 	ldw	r17,0(sp)
 1004854:	dec00404 	addi	sp,sp,16
 1004858:	10045f41 	jmpi	10045f4 <_ZNKSs16find_last_not_ofEPKcmm>

0100485c <_ZNKSs17find_first_not_ofEPKcm>:
 100485c:	defffc04 	addi	sp,sp,-16
 1004860:	dd400215 	stw	r21,8(sp)
 1004864:	dcc00115 	stw	r19,4(sp)
 1004868:	dc400015 	stw	r17,0(sp)
 100486c:	2027883a 	mov	r19,r4
 1004870:	dfc00315 	stw	ra,12(sp)
 1004874:	2809883a 	mov	r4,r5
 1004878:	2823883a 	mov	r17,r5
 100487c:	302b883a 	mov	r21,r6
 1004880:	100a5f80 	call	100a5f8 <strlen>
 1004884:	880b883a 	mov	r5,r17
 1004888:	9809883a 	mov	r4,r19
 100488c:	a80d883a 	mov	r6,r21
 1004890:	100f883a 	mov	r7,r2
 1004894:	dfc00317 	ldw	ra,12(sp)
 1004898:	dd400217 	ldw	r21,8(sp)
 100489c:	dcc00117 	ldw	r19,4(sp)
 10048a0:	dc400017 	ldw	r17,0(sp)
 10048a4:	dec00404 	addi	sp,sp,16
 10048a8:	1003e701 	jmpi	1003e70 <_ZNKSs17find_first_not_ofEPKcmm>

010048ac <_ZNKSs12find_last_ofEPKcm>:
 10048ac:	defffc04 	addi	sp,sp,-16
 10048b0:	dd400215 	stw	r21,8(sp)
 10048b4:	dcc00115 	stw	r19,4(sp)
 10048b8:	dc400015 	stw	r17,0(sp)
 10048bc:	2027883a 	mov	r19,r4
 10048c0:	dfc00315 	stw	ra,12(sp)
 10048c4:	2809883a 	mov	r4,r5
 10048c8:	2823883a 	mov	r17,r5
 10048cc:	302b883a 	mov	r21,r6
 10048d0:	100a5f80 	call	100a5f8 <strlen>
 10048d4:	880b883a 	mov	r5,r17
 10048d8:	9809883a 	mov	r4,r19
 10048dc:	a80d883a 	mov	r6,r21
 10048e0:	100f883a 	mov	r7,r2
 10048e4:	dfc00317 	ldw	ra,12(sp)
 10048e8:	dd400217 	ldw	r21,8(sp)
 10048ec:	dcc00117 	ldw	r19,4(sp)
 10048f0:	dc400017 	ldw	r17,0(sp)
 10048f4:	dec00404 	addi	sp,sp,16
 10048f8:	10043f81 	jmpi	10043f8 <_ZNKSs12find_last_ofEPKcmm>

010048fc <_ZNKSs13find_first_ofEPKcm>:
 10048fc:	defffc04 	addi	sp,sp,-16
 1004900:	dd400215 	stw	r21,8(sp)
 1004904:	dcc00115 	stw	r19,4(sp)
 1004908:	dc400015 	stw	r17,0(sp)
 100490c:	2027883a 	mov	r19,r4
 1004910:	dfc00315 	stw	ra,12(sp)
 1004914:	2809883a 	mov	r4,r5
 1004918:	2823883a 	mov	r17,r5
 100491c:	302b883a 	mov	r21,r6
 1004920:	100a5f80 	call	100a5f8 <strlen>
 1004924:	880b883a 	mov	r5,r17
 1004928:	9809883a 	mov	r4,r19
 100492c:	a80d883a 	mov	r6,r21
 1004930:	100f883a 	mov	r7,r2
 1004934:	dfc00317 	ldw	ra,12(sp)
 1004938:	dd400217 	ldw	r21,8(sp)
 100493c:	dcc00117 	ldw	r19,4(sp)
 1004940:	dc400017 	ldw	r17,0(sp)
 1004944:	dec00404 	addi	sp,sp,16
 1004948:	10044e81 	jmpi	10044e8 <_ZNKSs13find_first_ofEPKcmm>

0100494c <_ZNKSs4rendEv>:
 100494c:	28c00017 	ldw	r3,0(r5)
 1004950:	2005883a 	mov	r2,r4
 1004954:	20c00015 	stw	r3,0(r4)
 1004958:	f800283a 	ret

0100495c <_ZNKSs6rbeginEv>:
 100495c:	28c00017 	ldw	r3,0(r5)
 1004960:	2005883a 	mov	r2,r4
 1004964:	197ffd17 	ldw	r5,-12(r3)
 1004968:	1947883a 	add	r3,r3,r5
 100496c:	20c00015 	stw	r3,0(r4)
 1004970:	f800283a 	ret

01004974 <_ZNSs12_S_constructEmcRKSaIcE>:
 1004974:	defffb04 	addi	sp,sp,-20
 1004978:	dcc00315 	stw	r19,12(sp)
 100497c:	dc400115 	stw	r17,4(sp)
 1004980:	dc000015 	stw	r16,0(sp)
 1004984:	2823883a 	mov	r17,r5
 1004988:	dfc00415 	stw	ra,16(sp)
 100498c:	dc800215 	stw	r18,8(sp)
 1004990:	2021883a 	mov	r16,r4
 1004994:	04c040b4 	movhi	r19,258
 1004998:	9cdbd904 	addi	r19,r19,28516
 100499c:	000b883a 	mov	r5,zero
 10049a0:	2000081e 	bne	r4,zero,10049c4 <_ZNSs12_S_constructEmcRKSaIcE+0x50>
 10049a4:	9805883a 	mov	r2,r19
 10049a8:	dfc00417 	ldw	ra,16(sp)
 10049ac:	dcc00317 	ldw	r19,12(sp)
 10049b0:	dc800217 	ldw	r18,8(sp)
 10049b4:	dc400117 	ldw	r17,4(sp)
 10049b8:	dc000017 	ldw	r16,0(sp)
 10049bc:	dec00504 	addi	sp,sp,20
 10049c0:	f800283a 	ret
 10049c4:	10042600 	call	1004260 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 10049c8:	88c03fcc 	andi	r3,r17,255
 10049cc:	18c0201c 	xori	r3,r3,128
 10049d0:	18ffe004 	addi	r3,r3,-128
 10049d4:	19403fcc 	andi	r5,r3,255
 10049d8:	14c00304 	addi	r19,r2,12
 10049dc:	1025883a 	mov	r18,r2
 10049e0:	2940201c 	xori	r5,r5,128
 10049e4:	00800044 	movi	r2,1
 10049e8:	800d883a 	mov	r6,r16
 10049ec:	9809883a 	mov	r4,r19
 10049f0:	297fe004 	addi	r5,r5,-128
 10049f4:	80800d26 	beq	r16,r2,1004a2c <_ZNSs12_S_constructEmcRKSaIcE+0xb8>
 10049f8:	100a1280 	call	100a128 <memset>
 10049fc:	84c5883a 	add	r2,r16,r19
 1004a00:	94000015 	stw	r16,0(r18)
 1004a04:	90000215 	stw	zero,8(r18)
 1004a08:	10000005 	stb	zero,0(r2)
 1004a0c:	9805883a 	mov	r2,r19
 1004a10:	dfc00417 	ldw	ra,16(sp)
 1004a14:	dcc00317 	ldw	r19,12(sp)
 1004a18:	dc800217 	ldw	r18,8(sp)
 1004a1c:	dc400117 	ldw	r17,4(sp)
 1004a20:	dc000017 	ldw	r16,0(sp)
 1004a24:	dec00504 	addi	sp,sp,20
 1004a28:	f800283a 	ret
 1004a2c:	98c00005 	stb	r3,0(r19)
 1004a30:	003ff206 	br	10049fc <_ZNSs12_S_constructEmcRKSaIcE+0x88>

01004a34 <_ZNSsC1EmcRKSaIcE>:
 1004a34:	defffe04 	addi	sp,sp,-8
 1004a38:	dc400015 	stw	r17,0(sp)
 1004a3c:	2023883a 	mov	r17,r4
 1004a40:	2809883a 	mov	r4,r5
 1004a44:	31403fcc 	andi	r5,r6,255
 1004a48:	2940201c 	xori	r5,r5,128
 1004a4c:	297fe004 	addi	r5,r5,-128
 1004a50:	380d883a 	mov	r6,r7
 1004a54:	dfc00115 	stw	ra,4(sp)
 1004a58:	10049740 	call	1004974 <_ZNSs12_S_constructEmcRKSaIcE>
 1004a5c:	88800015 	stw	r2,0(r17)
 1004a60:	dfc00117 	ldw	ra,4(sp)
 1004a64:	dc400017 	ldw	r17,0(sp)
 1004a68:	dec00204 	addi	sp,sp,8
 1004a6c:	f800283a 	ret

01004a70 <_ZNSsC2EmcRKSaIcE>:
 1004a70:	defffe04 	addi	sp,sp,-8
 1004a74:	dc400015 	stw	r17,0(sp)
 1004a78:	2023883a 	mov	r17,r4
 1004a7c:	2809883a 	mov	r4,r5
 1004a80:	31403fcc 	andi	r5,r6,255
 1004a84:	2940201c 	xori	r5,r5,128
 1004a88:	297fe004 	addi	r5,r5,-128
 1004a8c:	380d883a 	mov	r6,r7
 1004a90:	dfc00115 	stw	ra,4(sp)
 1004a94:	10049740 	call	1004974 <_ZNSs12_S_constructEmcRKSaIcE>
 1004a98:	88800015 	stw	r2,0(r17)
 1004a9c:	dfc00117 	ldw	ra,4(sp)
 1004aa0:	dc400017 	ldw	r17,0(sp)
 1004aa4:	dec00204 	addi	sp,sp,8
 1004aa8:	f800283a 	ret

01004aac <_ZNSsC1ERKSaIcE>:
 1004aac:	defffe04 	addi	sp,sp,-8
 1004ab0:	dc400015 	stw	r17,0(sp)
 1004ab4:	280d883a 	mov	r6,r5
 1004ab8:	2023883a 	mov	r17,r4
 1004abc:	000b883a 	mov	r5,zero
 1004ac0:	0009883a 	mov	r4,zero
 1004ac4:	dfc00115 	stw	ra,4(sp)
 1004ac8:	10049740 	call	1004974 <_ZNSs12_S_constructEmcRKSaIcE>
 1004acc:	88800015 	stw	r2,0(r17)
 1004ad0:	dfc00117 	ldw	ra,4(sp)
 1004ad4:	dc400017 	ldw	r17,0(sp)
 1004ad8:	dec00204 	addi	sp,sp,8
 1004adc:	f800283a 	ret

01004ae0 <_ZNSsC2ERKSaIcE>:
 1004ae0:	defffe04 	addi	sp,sp,-8
 1004ae4:	dc400015 	stw	r17,0(sp)
 1004ae8:	280d883a 	mov	r6,r5
 1004aec:	2023883a 	mov	r17,r4
 1004af0:	000b883a 	mov	r5,zero
 1004af4:	0009883a 	mov	r4,zero
 1004af8:	dfc00115 	stw	ra,4(sp)
 1004afc:	10049740 	call	1004974 <_ZNSs12_S_constructEmcRKSaIcE>
 1004b00:	88800015 	stw	r2,0(r17)
 1004b04:	dfc00117 	ldw	ra,4(sp)
 1004b08:	dc400017 	ldw	r17,0(sp)
 1004b0c:	dec00204 	addi	sp,sp,8
 1004b10:	f800283a 	ret

01004b14 <_ZNKSs7compareEmmPKcm>:
 1004b14:	21000017 	ldw	r4,0(r4)
 1004b18:	defffc04 	addi	sp,sp,-16
 1004b1c:	d9800015 	stw	r6,0(sp)
 1004b20:	20bffd17 	ldw	r2,-12(r4)
 1004b24:	dfc00315 	stw	ra,12(sp)
 1004b28:	dc400215 	stw	r17,8(sp)
 1004b2c:	dc000115 	stw	r16,4(sp)
 1004b30:	11401936 	bltu	r2,r5,1004b98 <_ZNKSs7compareEmmPKcm+0x84>
 1004b34:	dc000017 	ldw	r16,0(sp)
 1004b38:	1145c83a 	sub	r2,r2,r5
 1004b3c:	14001136 	bltu	r2,r16,1004b84 <_ZNKSs7compareEmmPKcm+0x70>
 1004b40:	dc400417 	ldw	r17,16(sp)
 1004b44:	dc000015 	stw	r16,0(sp)
 1004b48:	8c000c36 	bltu	r17,r16,1004b7c <_ZNKSs7compareEmmPKcm+0x68>
 1004b4c:	d80d883a 	mov	r6,sp
 1004b50:	31800017 	ldw	r6,0(r6)
 1004b54:	2149883a 	add	r4,r4,r5
 1004b58:	380b883a 	mov	r5,r7
 1004b5c:	1009f340 	call	1009f34 <memcmp>
 1004b60:	1000011e 	bne	r2,zero,1004b68 <_ZNKSs7compareEmmPKcm+0x54>
 1004b64:	8445c83a 	sub	r2,r16,r17
 1004b68:	dfc00317 	ldw	ra,12(sp)
 1004b6c:	dc400217 	ldw	r17,8(sp)
 1004b70:	dc000117 	ldw	r16,4(sp)
 1004b74:	dec00404 	addi	sp,sp,16
 1004b78:	f800283a 	ret
 1004b7c:	d9800404 	addi	r6,sp,16
 1004b80:	003ff306 	br	1004b50 <_ZNKSs7compareEmmPKcm+0x3c>
 1004b84:	dc400417 	ldw	r17,16(sp)
 1004b88:	1021883a 	mov	r16,r2
 1004b8c:	dc000015 	stw	r16,0(sp)
 1004b90:	8c3ffa36 	bltu	r17,r16,1004b7c <_ZNKSs7compareEmmPKcm+0x68>
 1004b94:	003fed06 	br	1004b4c <_ZNKSs7compareEmmPKcm+0x38>
 1004b98:	010040b4 	movhi	r4,258
 1004b9c:	213c2604 	addi	r4,r4,-3944
 1004ba0:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

01004ba4 <_ZNKSs7compareEmmPKc>:
 1004ba4:	defff804 	addi	sp,sp,-32
 1004ba8:	dd000615 	stw	r20,24(sp)
 1004bac:	25000017 	ldw	r20,0(r4)
 1004bb0:	d9800115 	stw	r6,4(sp)
 1004bb4:	dcc00515 	stw	r19,20(sp)
 1004bb8:	a0bffd17 	ldw	r2,-12(r20)
 1004bbc:	dc800415 	stw	r18,16(sp)
 1004bc0:	dfc00715 	stw	ra,28(sp)
 1004bc4:	dc400315 	stw	r17,12(sp)
 1004bc8:	dc000215 	stw	r16,8(sp)
 1004bcc:	2825883a 	mov	r18,r5
 1004bd0:	3827883a 	mov	r19,r7
 1004bd4:	11402236 	bltu	r2,r5,1004c60 <_ZNKSs7compareEmmPKc+0xbc>
 1004bd8:	1145c83a 	sub	r2,r2,r5
 1004bdc:	3023883a 	mov	r17,r6
 1004be0:	11801736 	bltu	r2,r6,1004c40 <_ZNKSs7compareEmmPKc+0x9c>
 1004be4:	dc400115 	stw	r17,4(sp)
 1004be8:	9809883a 	mov	r4,r19
 1004bec:	100a5f80 	call	100a5f8 <strlen>
 1004bf0:	1021883a 	mov	r16,r2
 1004bf4:	d8800015 	stw	r2,0(sp)
 1004bf8:	14400f36 	bltu	r2,r17,1004c38 <_ZNKSs7compareEmmPKc+0x94>
 1004bfc:	d9800104 	addi	r6,sp,4
 1004c00:	31800017 	ldw	r6,0(r6)
 1004c04:	a489883a 	add	r4,r20,r18
 1004c08:	980b883a 	mov	r5,r19
 1004c0c:	1009f340 	call	1009f34 <memcmp>
 1004c10:	1000011e 	bne	r2,zero,1004c18 <_ZNKSs7compareEmmPKc+0x74>
 1004c14:	8c05c83a 	sub	r2,r17,r16
 1004c18:	dfc00717 	ldw	ra,28(sp)
 1004c1c:	dd000617 	ldw	r20,24(sp)
 1004c20:	dcc00517 	ldw	r19,20(sp)
 1004c24:	dc800417 	ldw	r18,16(sp)
 1004c28:	dc400317 	ldw	r17,12(sp)
 1004c2c:	dc000217 	ldw	r16,8(sp)
 1004c30:	dec00804 	addi	sp,sp,32
 1004c34:	f800283a 	ret
 1004c38:	d80d883a 	mov	r6,sp
 1004c3c:	003ff006 	br	1004c00 <_ZNKSs7compareEmmPKc+0x5c>
 1004c40:	1023883a 	mov	r17,r2
 1004c44:	dc400115 	stw	r17,4(sp)
 1004c48:	9809883a 	mov	r4,r19
 1004c4c:	100a5f80 	call	100a5f8 <strlen>
 1004c50:	1021883a 	mov	r16,r2
 1004c54:	d8800015 	stw	r2,0(sp)
 1004c58:	147ff736 	bltu	r2,r17,1004c38 <_ZNKSs7compareEmmPKc+0x94>
 1004c5c:	003fe706 	br	1004bfc <_ZNKSs7compareEmmPKc+0x58>
 1004c60:	010040b4 	movhi	r4,258
 1004c64:	213c2604 	addi	r4,r4,-3944
 1004c68:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

01004c6c <_ZNKSs7compareEmmRKSsmm>:
 1004c6c:	21000017 	ldw	r4,0(r4)
 1004c70:	defffc04 	addi	sp,sp,-16
 1004c74:	d9800015 	stw	r6,0(sp)
 1004c78:	20bffd17 	ldw	r2,-12(r4)
 1004c7c:	dfc00315 	stw	ra,12(sp)
 1004c80:	dc400215 	stw	r17,8(sp)
 1004c84:	dc000115 	stw	r16,4(sp)
 1004c88:	da000417 	ldw	r8,16(sp)
 1004c8c:	11402436 	bltu	r2,r5,1004d20 <_ZNKSs7compareEmmRKSsmm+0xb4>
 1004c90:	39c00017 	ldw	r7,0(r7)
 1004c94:	38fffd17 	ldw	r3,-12(r7)
 1004c98:	1a002136 	bltu	r3,r8,1004d20 <_ZNKSs7compareEmmRKSsmm+0xb4>
 1004c9c:	dc400017 	ldw	r17,0(sp)
 1004ca0:	1145c83a 	sub	r2,r2,r5
 1004ca4:	14401836 	bltu	r2,r17,1004d08 <_ZNKSs7compareEmmRKSsmm+0x9c>
 1004ca8:	dc000517 	ldw	r16,20(sp)
 1004cac:	1a05c83a 	sub	r2,r3,r8
 1004cb0:	dc400015 	stw	r17,0(sp)
 1004cb4:	14001036 	bltu	r2,r16,1004cf8 <_ZNKSs7compareEmmRKSsmm+0x8c>
 1004cb8:	dc000515 	stw	r16,20(sp)
 1004cbc:	84400c36 	bltu	r16,r17,1004cf0 <_ZNKSs7compareEmmRKSsmm+0x84>
 1004cc0:	d80d883a 	mov	r6,sp
 1004cc4:	31800017 	ldw	r6,0(r6)
 1004cc8:	2149883a 	add	r4,r4,r5
 1004ccc:	3a0b883a 	add	r5,r7,r8
 1004cd0:	1009f340 	call	1009f34 <memcmp>
 1004cd4:	1000011e 	bne	r2,zero,1004cdc <_ZNKSs7compareEmmRKSsmm+0x70>
 1004cd8:	8c05c83a 	sub	r2,r17,r16
 1004cdc:	dfc00317 	ldw	ra,12(sp)
 1004ce0:	dc400217 	ldw	r17,8(sp)
 1004ce4:	dc000117 	ldw	r16,4(sp)
 1004ce8:	dec00404 	addi	sp,sp,16
 1004cec:	f800283a 	ret
 1004cf0:	d9800504 	addi	r6,sp,20
 1004cf4:	003ff306 	br	1004cc4 <_ZNKSs7compareEmmRKSsmm+0x58>
 1004cf8:	1021883a 	mov	r16,r2
 1004cfc:	dc000515 	stw	r16,20(sp)
 1004d00:	847ffb36 	bltu	r16,r17,1004cf0 <_ZNKSs7compareEmmRKSsmm+0x84>
 1004d04:	003fee06 	br	1004cc0 <_ZNKSs7compareEmmRKSsmm+0x54>
 1004d08:	dc000517 	ldw	r16,20(sp)
 1004d0c:	1023883a 	mov	r17,r2
 1004d10:	1a05c83a 	sub	r2,r3,r8
 1004d14:	dc400015 	stw	r17,0(sp)
 1004d18:	143fe72e 	bgeu	r2,r16,1004cb8 <_ZNKSs7compareEmmRKSsmm+0x4c>
 1004d1c:	003ff606 	br	1004cf8 <_ZNKSs7compareEmmRKSsmm+0x8c>
 1004d20:	010040b4 	movhi	r4,258
 1004d24:	213c2604 	addi	r4,r4,-3944
 1004d28:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

01004d2c <_ZNKSs7compareEmmRKSs>:
 1004d2c:	21000017 	ldw	r4,0(r4)
 1004d30:	defffb04 	addi	sp,sp,-20
 1004d34:	d9800115 	stw	r6,4(sp)
 1004d38:	20bffd17 	ldw	r2,-12(r4)
 1004d3c:	dfc00415 	stw	ra,16(sp)
 1004d40:	dc400315 	stw	r17,12(sp)
 1004d44:	dc000215 	stw	r16,8(sp)
 1004d48:	11401d36 	bltu	r2,r5,1004dc0 <_ZNKSs7compareEmmRKSs+0x94>
 1004d4c:	1145c83a 	sub	r2,r2,r5
 1004d50:	3021883a 	mov	r16,r6
 1004d54:	11801336 	bltu	r2,r6,1004da4 <_ZNKSs7compareEmmRKSs+0x78>
 1004d58:	38800017 	ldw	r2,0(r7)
 1004d5c:	dc000115 	stw	r16,4(sp)
 1004d60:	147ffd17 	ldw	r17,-12(r2)
 1004d64:	dc400015 	stw	r17,0(sp)
 1004d68:	8c000c36 	bltu	r17,r16,1004d9c <_ZNKSs7compareEmmRKSs+0x70>
 1004d6c:	d9800104 	addi	r6,sp,4
 1004d70:	31800017 	ldw	r6,0(r6)
 1004d74:	2149883a 	add	r4,r4,r5
 1004d78:	100b883a 	mov	r5,r2
 1004d7c:	1009f340 	call	1009f34 <memcmp>
 1004d80:	1000011e 	bne	r2,zero,1004d88 <_ZNKSs7compareEmmRKSs+0x5c>
 1004d84:	8445c83a 	sub	r2,r16,r17
 1004d88:	dfc00417 	ldw	ra,16(sp)
 1004d8c:	dc400317 	ldw	r17,12(sp)
 1004d90:	dc000217 	ldw	r16,8(sp)
 1004d94:	dec00504 	addi	sp,sp,20
 1004d98:	f800283a 	ret
 1004d9c:	d80d883a 	mov	r6,sp
 1004da0:	003ff306 	br	1004d70 <_ZNKSs7compareEmmRKSs+0x44>
 1004da4:	1021883a 	mov	r16,r2
 1004da8:	38800017 	ldw	r2,0(r7)
 1004dac:	dc000115 	stw	r16,4(sp)
 1004db0:	147ffd17 	ldw	r17,-12(r2)
 1004db4:	dc400015 	stw	r17,0(sp)
 1004db8:	8c3ff836 	bltu	r17,r16,1004d9c <_ZNKSs7compareEmmRKSs+0x70>
 1004dbc:	003feb06 	br	1004d6c <_ZNKSs7compareEmmRKSs+0x40>
 1004dc0:	010040b4 	movhi	r4,258
 1004dc4:	213c2604 	addi	r4,r4,-3944
 1004dc8:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

01004dcc <_ZNSs4_Rep8_M_cloneERKSaIcEm>:
 1004dcc:	defffc04 	addi	sp,sp,-16
 1004dd0:	dc000015 	stw	r16,0(sp)
 1004dd4:	2021883a 	mov	r16,r4
 1004dd8:	21000017 	ldw	r4,0(r4)
 1004ddc:	2807883a 	mov	r3,r5
 1004de0:	81400117 	ldw	r5,4(r16)
 1004de4:	3109883a 	add	r4,r6,r4
 1004de8:	180d883a 	mov	r6,r3
 1004dec:	dc800215 	stw	r18,8(sp)
 1004df0:	dc400115 	stw	r17,4(sp)
 1004df4:	dfc00315 	stw	ra,12(sp)
 1004df8:	10042600 	call	1004260 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1004dfc:	80c00017 	ldw	r3,0(r16)
 1004e00:	1023883a 	mov	r17,r2
 1004e04:	14800304 	addi	r18,r2,12
 1004e08:	18000826 	beq	r3,zero,1004e2c <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x60>
 1004e0c:	14800304 	addi	r18,r2,12
 1004e10:	00800044 	movi	r2,1
 1004e14:	180d883a 	mov	r6,r3
 1004e18:	9009883a 	mov	r4,r18
 1004e1c:	81400304 	addi	r5,r16,12
 1004e20:	18800d26 	beq	r3,r2,1004e58 <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x8c>
 1004e24:	1009fa80 	call	1009fa8 <memcpy>
 1004e28:	80c00017 	ldw	r3,0(r16)
 1004e2c:	88c00015 	stw	r3,0(r17)
 1004e30:	88000215 	stw	zero,8(r17)
 1004e34:	1c87883a 	add	r3,r3,r18
 1004e38:	9005883a 	mov	r2,r18
 1004e3c:	18000005 	stb	zero,0(r3)
 1004e40:	dfc00317 	ldw	ra,12(sp)
 1004e44:	dc800217 	ldw	r18,8(sp)
 1004e48:	dc400117 	ldw	r17,4(sp)
 1004e4c:	dc000017 	ldw	r16,0(sp)
 1004e50:	dec00404 	addi	sp,sp,16
 1004e54:	f800283a 	ret
 1004e58:	80800303 	ldbu	r2,12(r16)
 1004e5c:	88800305 	stb	r2,12(r17)
 1004e60:	80c00017 	ldw	r3,0(r16)
 1004e64:	003ff106 	br	1004e2c <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x60>

01004e68 <_ZNSs4_Rep7_M_grabERKSaIcES2_>:
 1004e68:	deffed04 	addi	sp,sp,-76
 1004e6c:	00804074 	movhi	r2,257
 1004e70:	10a0b504 	addi	r2,r2,-32044
 1004e74:	00c040b4 	movhi	r3,258
 1004e78:	18fb3104 	addi	r3,r3,-4924
 1004e7c:	d8800615 	stw	r2,24(sp)
 1004e80:	d9000e15 	stw	r4,56(sp)
 1004e84:	00804034 	movhi	r2,256
 1004e88:	1093d204 	addi	r2,r2,20296
 1004e8c:	d809883a 	mov	r4,sp
 1004e90:	d8c00715 	stw	r3,28(sp)
 1004e94:	d8800915 	stw	r2,36(sp)
 1004e98:	dfc01215 	stw	ra,72(sp)
 1004e9c:	df001115 	stw	fp,68(sp)
 1004ea0:	ddc01015 	stw	r23,64(sp)
 1004ea4:	dec00815 	stw	sp,32(sp)
 1004ea8:	dec00a15 	stw	sp,40(sp)
 1004eac:	d9400f15 	stw	r5,60(sp)
 1004eb0:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1004eb4:	d8c00e17 	ldw	r3,56(sp)
 1004eb8:	18800217 	ldw	r2,8(r3)
 1004ebc:	10000e16 	blt	r2,zero,1004ef8 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0x90>
 1004ec0:	008040b4 	movhi	r2,258
 1004ec4:	109bd604 	addi	r2,r2,28504
 1004ec8:	18801a1e 	bne	r3,r2,1004f34 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xcc>
 1004ecc:	d8800e17 	ldw	r2,56(sp)
 1004ed0:	d809883a 	mov	r4,sp
 1004ed4:	10800304 	addi	r2,r2,12
 1004ed8:	d8800d15 	stw	r2,52(sp)
 1004edc:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1004ee0:	d8800d17 	ldw	r2,52(sp)
 1004ee4:	dfc01217 	ldw	ra,72(sp)
 1004ee8:	df001117 	ldw	fp,68(sp)
 1004eec:	ddc01017 	ldw	r23,64(sp)
 1004ef0:	dec01304 	addi	sp,sp,76
 1004ef4:	f800283a 	ret
 1004ef8:	d9000e17 	ldw	r4,56(sp)
 1004efc:	d9400f17 	ldw	r5,60(sp)
 1004f00:	000d883a 	mov	r6,zero
 1004f04:	00bfffc4 	movi	r2,-1
 1004f08:	d8800115 	stw	r2,4(sp)
 1004f0c:	1004dcc0 	call	1004dcc <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1004f10:	d809883a 	mov	r4,sp
 1004f14:	d8800d15 	stw	r2,52(sp)
 1004f18:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1004f1c:	d8800d17 	ldw	r2,52(sp)
 1004f20:	dfc01217 	ldw	ra,72(sp)
 1004f24:	df001117 	ldw	fp,68(sp)
 1004f28:	ddc01017 	ldw	r23,64(sp)
 1004f2c:	dec01304 	addi	sp,sp,76
 1004f30:	f800283a 	ret
 1004f34:	01400044 	movi	r5,1
 1004f38:	d9400115 	stw	r5,4(sp)
 1004f3c:	19000204 	addi	r4,r3,8
 1004f40:	10079140 	call	1007914 <_ZN9__gnu_cxx12__atomic_addEPVii>
 1004f44:	003fe106 	br	1004ecc <_ZNSs4_Rep7_M_grabERKSaIcES2_+0x64>
 1004f48:	d8800317 	ldw	r2,12(sp)
 1004f4c:	00ffffc4 	movi	r3,-1
 1004f50:	d9000217 	ldw	r4,8(sp)
 1004f54:	10c00226 	beq	r2,r3,1004f60 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xf8>
 1004f58:	d8c00115 	stw	r3,4(sp)
 1004f5c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1004f60:	00bfffc4 	movi	r2,-1
 1004f64:	d8800115 	stw	r2,4(sp)
 1004f68:	10081540 	call	1008154 <__cxa_call_unexpected>

01004f6c <_ZNKSs4copyEPcmm>:
 1004f6c:	21000017 	ldw	r4,0(r4)
 1004f70:	defffe04 	addi	sp,sp,-8
 1004f74:	dfc00115 	stw	ra,4(sp)
 1004f78:	20fffd17 	ldw	r3,-12(r4)
 1004f7c:	dc000015 	stw	r16,0(sp)
 1004f80:	2811883a 	mov	r8,r5
 1004f84:	19c01836 	bltu	r3,r7,1004fe8 <_ZNKSs4copyEPcmm+0x7c>
 1004f88:	19c5c83a 	sub	r2,r3,r7
 1004f8c:	3021883a 	mov	r16,r6
 1004f90:	11800c36 	bltu	r2,r6,1004fc4 <_ZNKSs4copyEPcmm+0x58>
 1004f94:	80000626 	beq	r16,zero,1004fb0 <_ZNKSs4copyEPcmm+0x44>
 1004f98:	00800044 	movi	r2,1
 1004f9c:	21cb883a 	add	r5,r4,r7
 1004fa0:	80800a26 	beq	r16,r2,1004fcc <_ZNKSs4copyEPcmm+0x60>
 1004fa4:	4009883a 	mov	r4,r8
 1004fa8:	800d883a 	mov	r6,r16
 1004fac:	1009fa80 	call	1009fa8 <memcpy>
 1004fb0:	8005883a 	mov	r2,r16
 1004fb4:	dfc00117 	ldw	ra,4(sp)
 1004fb8:	dc000017 	ldw	r16,0(sp)
 1004fbc:	dec00204 	addi	sp,sp,8
 1004fc0:	f800283a 	ret
 1004fc4:	1021883a 	mov	r16,r2
 1004fc8:	003ff206 	br	1004f94 <_ZNKSs4copyEPcmm+0x28>
 1004fcc:	28800003 	ldbu	r2,0(r5)
 1004fd0:	40800005 	stb	r2,0(r8)
 1004fd4:	8005883a 	mov	r2,r16
 1004fd8:	dfc00117 	ldw	ra,4(sp)
 1004fdc:	dc000017 	ldw	r16,0(sp)
 1004fe0:	dec00204 	addi	sp,sp,8
 1004fe4:	f800283a 	ret
 1004fe8:	010040b4 	movhi	r4,258
 1004fec:	213c2c04 	addi	r4,r4,-3920
 1004ff0:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

01004ff4 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 1004ff4:	3147c83a 	sub	r3,r6,r5
 1004ff8:	00800044 	movi	r2,1
 1004ffc:	180d883a 	mov	r6,r3
 1005000:	18800126 	beq	r3,r2,1005008 <_ZNSs13_S_copy_charsEPcPKcS1_+0x14>
 1005004:	1009fa81 	jmpi	1009fa8 <memcpy>
 1005008:	28800003 	ldbu	r2,0(r5)
 100500c:	20800005 	stb	r2,0(r4)
 1005010:	f800283a 	ret

01005014 <_ZNSs13_S_copy_charsEPcS_S_>:
 1005014:	3147c83a 	sub	r3,r6,r5
 1005018:	00800044 	movi	r2,1
 100501c:	180d883a 	mov	r6,r3
 1005020:	18800126 	beq	r3,r2,1005028 <_ZNSs13_S_copy_charsEPcS_S_+0x14>
 1005024:	1009fa81 	jmpi	1009fa8 <memcpy>
 1005028:	28800003 	ldbu	r2,0(r5)
 100502c:	20800005 	stb	r2,0(r4)
 1005030:	f800283a 	ret

01005034 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>:
 1005034:	defffb04 	addi	sp,sp,-20
 1005038:	dc000015 	stw	r16,0(sp)
 100503c:	dfc00415 	stw	ra,16(sp)
 1005040:	dcc00315 	stw	r19,12(sp)
 1005044:	dc800215 	stw	r18,8(sp)
 1005048:	dc400115 	stw	r17,4(sp)
 100504c:	2021883a 	mov	r16,r4
 1005050:	21401c26 	beq	r4,r5,10050c4 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x90>
 1005054:	20002526 	beq	r4,zero,10050ec <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0xb8>
 1005058:	2c25c83a 	sub	r18,r5,r16
 100505c:	9009883a 	mov	r4,r18
 1005060:	000b883a 	mov	r5,zero
 1005064:	10042600 	call	1004260 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1005068:	1023883a 	mov	r17,r2
 100506c:	14c00304 	addi	r19,r2,12
 1005070:	00800044 	movi	r2,1
 1005074:	90801026 	beq	r18,r2,10050b8 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x84>
 1005078:	800b883a 	mov	r5,r16
 100507c:	9809883a 	mov	r4,r19
 1005080:	900d883a 	mov	r6,r18
 1005084:	1009fa80 	call	1009fa8 <memcpy>
 1005088:	9c85883a 	add	r2,r19,r18
 100508c:	8c800015 	stw	r18,0(r17)
 1005090:	88000215 	stw	zero,8(r17)
 1005094:	10000005 	stb	zero,0(r2)
 1005098:	9805883a 	mov	r2,r19
 100509c:	dfc00417 	ldw	ra,16(sp)
 10050a0:	dcc00317 	ldw	r19,12(sp)
 10050a4:	dc800217 	ldw	r18,8(sp)
 10050a8:	dc400117 	ldw	r17,4(sp)
 10050ac:	dc000017 	ldw	r16,0(sp)
 10050b0:	dec00504 	addi	sp,sp,20
 10050b4:	f800283a 	ret
 10050b8:	80800003 	ldbu	r2,0(r16)
 10050bc:	88800305 	stb	r2,12(r17)
 10050c0:	003ff106 	br	1005088 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x54>
 10050c4:	04c040b4 	movhi	r19,258
 10050c8:	9cdbd904 	addi	r19,r19,28516
 10050cc:	9805883a 	mov	r2,r19
 10050d0:	dfc00417 	ldw	ra,16(sp)
 10050d4:	dcc00317 	ldw	r19,12(sp)
 10050d8:	dc800217 	ldw	r18,8(sp)
 10050dc:	dc400117 	ldw	r17,4(sp)
 10050e0:	dc000017 	ldw	r16,0(sp)
 10050e4:	dec00504 	addi	sp,sp,20
 10050e8:	f800283a 	ret
 10050ec:	010040b4 	movhi	r4,258
 10050f0:	213c3104 	addi	r4,r4,-3900
 10050f4:	10018e00 	call	10018e0 <_ZSt19__throw_logic_errorPKc>

010050f8 <_ZNSsC2IPcEET_S1_RKSaIcE>:
 10050f8:	defffe04 	addi	sp,sp,-8
 10050fc:	dc400015 	stw	r17,0(sp)
 1005100:	2023883a 	mov	r17,r4
 1005104:	2809883a 	mov	r4,r5
 1005108:	300b883a 	mov	r5,r6
 100510c:	380d883a 	mov	r6,r7
 1005110:	dfc00115 	stw	ra,4(sp)
 1005114:	10050340 	call	1005034 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 1005118:	88800015 	stw	r2,0(r17)
 100511c:	dfc00117 	ldw	ra,4(sp)
 1005120:	dc400017 	ldw	r17,0(sp)
 1005124:	dec00204 	addi	sp,sp,8
 1005128:	f800283a 	ret

0100512c <_ZNSsC1ERKSsmmRKSaIcE>:
 100512c:	29400017 	ldw	r5,0(r5)
 1005130:	defffe04 	addi	sp,sp,-8
 1005134:	dc000015 	stw	r16,0(sp)
 1005138:	28bffd17 	ldw	r2,-12(r5)
 100513c:	dfc00115 	stw	ra,4(sp)
 1005140:	2021883a 	mov	r16,r4
 1005144:	11800e36 	bltu	r2,r6,1005180 <_ZNSsC1ERKSsmmRKSaIcE+0x54>
 1005148:	1185c83a 	sub	r2,r2,r6
 100514c:	2989883a 	add	r4,r5,r6
 1005150:	11c00936 	bltu	r2,r7,1005178 <_ZNSsC1ERKSsmmRKSaIcE+0x4c>
 1005154:	29cb883a 	add	r5,r5,r7
 1005158:	314b883a 	add	r5,r6,r5
 100515c:	d9800217 	ldw	r6,8(sp)
 1005160:	10050340 	call	1005034 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 1005164:	80800015 	stw	r2,0(r16)
 1005168:	dfc00117 	ldw	ra,4(sp)
 100516c:	dc000017 	ldw	r16,0(sp)
 1005170:	dec00204 	addi	sp,sp,8
 1005174:	f800283a 	ret
 1005178:	100f883a 	mov	r7,r2
 100517c:	003ff506 	br	1005154 <_ZNSsC1ERKSsmmRKSaIcE+0x28>
 1005180:	010040b4 	movhi	r4,258
 1005184:	213c3c04 	addi	r4,r4,-3856
 1005188:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

0100518c <_ZNSsC2ERKSsmmRKSaIcE>:
 100518c:	29400017 	ldw	r5,0(r5)
 1005190:	defffe04 	addi	sp,sp,-8
 1005194:	dc000015 	stw	r16,0(sp)
 1005198:	28bffd17 	ldw	r2,-12(r5)
 100519c:	dfc00115 	stw	ra,4(sp)
 10051a0:	2021883a 	mov	r16,r4
 10051a4:	11800e36 	bltu	r2,r6,10051e0 <_ZNSsC2ERKSsmmRKSaIcE+0x54>
 10051a8:	1185c83a 	sub	r2,r2,r6
 10051ac:	2989883a 	add	r4,r5,r6
 10051b0:	11c00936 	bltu	r2,r7,10051d8 <_ZNSsC2ERKSsmmRKSaIcE+0x4c>
 10051b4:	29cb883a 	add	r5,r5,r7
 10051b8:	314b883a 	add	r5,r6,r5
 10051bc:	d9800217 	ldw	r6,8(sp)
 10051c0:	10050340 	call	1005034 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 10051c4:	80800015 	stw	r2,0(r16)
 10051c8:	dfc00117 	ldw	ra,4(sp)
 10051cc:	dc000017 	ldw	r16,0(sp)
 10051d0:	dec00204 	addi	sp,sp,8
 10051d4:	f800283a 	ret
 10051d8:	100f883a 	mov	r7,r2
 10051dc:	003ff506 	br	10051b4 <_ZNSsC2ERKSsmmRKSaIcE+0x28>
 10051e0:	010040b4 	movhi	r4,258
 10051e4:	213c3c04 	addi	r4,r4,-3856
 10051e8:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

010051ec <_ZNSsC1ERKSsmm>:
 10051ec:	deffea04 	addi	sp,sp,-88
 10051f0:	00804074 	movhi	r2,257
 10051f4:	10a0b504 	addi	r2,r2,-32044
 10051f8:	00c040b4 	movhi	r3,258
 10051fc:	18fb3444 	addi	r3,r3,-4911
 1005200:	d8800715 	stw	r2,28(sp)
 1005204:	d9000f15 	stw	r4,60(sp)
 1005208:	00804034 	movhi	r2,256
 100520c:	1094b204 	addi	r2,r2,21192
 1005210:	d9000104 	addi	r4,sp,4
 1005214:	d8c00815 	stw	r3,32(sp)
 1005218:	d8800a15 	stw	r2,40(sp)
 100521c:	d9401015 	stw	r5,64(sp)
 1005220:	dfc01515 	stw	ra,84(sp)
 1005224:	df001415 	stw	fp,80(sp)
 1005228:	ddc01315 	stw	r23,76(sp)
 100522c:	dec00915 	stw	sp,36(sp)
 1005230:	dec00b15 	stw	sp,44(sp)
 1005234:	d9801115 	stw	r6,68(sp)
 1005238:	d9c01215 	stw	r7,72(sp)
 100523c:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1005240:	d8801017 	ldw	r2,64(sp)
 1005244:	d8c01117 	ldw	r3,68(sp)
 1005248:	11400017 	ldw	r5,0(r2)
 100524c:	28bffd17 	ldw	r2,-12(r5)
 1005250:	10c01836 	bltu	r2,r3,10052b4 <_ZNSsC1ERKSsmm+0xc8>
 1005254:	d8c01117 	ldw	r3,68(sp)
 1005258:	d9c01217 	ldw	r7,72(sp)
 100525c:	10c5c83a 	sub	r2,r2,r3
 1005260:	28c9883a 	add	r4,r5,r3
 1005264:	11c01136 	bltu	r2,r7,10052ac <_ZNSsC1ERKSsmm+0xc0>
 1005268:	00800044 	movi	r2,1
 100526c:	d8800215 	stw	r2,8(sp)
 1005270:	d8801117 	ldw	r2,68(sp)
 1005274:	29cb883a 	add	r5,r5,r7
 1005278:	d80d883a 	mov	r6,sp
 100527c:	114b883a 	add	r5,r2,r5
 1005280:	d9c00e03 	ldbu	r7,56(sp)
 1005284:	10050340 	call	1005034 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 1005288:	d8c00f17 	ldw	r3,60(sp)
 100528c:	d9000104 	addi	r4,sp,4
 1005290:	18800015 	stw	r2,0(r3)
 1005294:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1005298:	dfc01517 	ldw	ra,84(sp)
 100529c:	df001417 	ldw	fp,80(sp)
 10052a0:	ddc01317 	ldw	r23,76(sp)
 10052a4:	dec01604 	addi	sp,sp,88
 10052a8:	f800283a 	ret
 10052ac:	100f883a 	mov	r7,r2
 10052b0:	003fed06 	br	1005268 <_ZNSsC1ERKSsmm+0x7c>
 10052b4:	00bfffc4 	movi	r2,-1
 10052b8:	010040b4 	movhi	r4,258
 10052bc:	213c3c04 	addi	r4,r4,-3856
 10052c0:	d8800215 	stw	r2,8(sp)
 10052c4:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>
 10052c8:	d9000317 	ldw	r4,12(sp)
 10052cc:	00bfffc4 	movi	r2,-1
 10052d0:	d8800215 	stw	r2,8(sp)
 10052d4:	10094540 	call	1009454 <_Unwind_SjLj_Resume>

010052d8 <_ZNKSs6substrEmm>:
 10052d8:	28c00017 	ldw	r3,0(r5)
 10052dc:	defffe04 	addi	sp,sp,-8
 10052e0:	dc000015 	stw	r16,0(sp)
 10052e4:	18bffd17 	ldw	r2,-12(r3)
 10052e8:	dfc00115 	stw	ra,4(sp)
 10052ec:	2021883a 	mov	r16,r4
 10052f0:	11800636 	bltu	r2,r6,100530c <_ZNKSs6substrEmm+0x34>
 10052f4:	10051ec0 	call	10051ec <_ZNSsC1ERKSsmm>
 10052f8:	8005883a 	mov	r2,r16
 10052fc:	dfc00117 	ldw	ra,4(sp)
 1005300:	dc000017 	ldw	r16,0(sp)
 1005304:	dec00204 	addi	sp,sp,8
 1005308:	f800283a 	ret
 100530c:	010040b4 	movhi	r4,258
 1005310:	213c4304 	addi	r4,r4,-3828
 1005314:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

01005318 <_ZNSsC2ERKSsmm>:
 1005318:	deffea04 	addi	sp,sp,-88
 100531c:	00804074 	movhi	r2,257
 1005320:	10a0b504 	addi	r2,r2,-32044
 1005324:	00c040b4 	movhi	r3,258
 1005328:	18fb35c4 	addi	r3,r3,-4905
 100532c:	d8800715 	stw	r2,28(sp)
 1005330:	d9000f15 	stw	r4,60(sp)
 1005334:	00804034 	movhi	r2,256
 1005338:	1094fd04 	addi	r2,r2,21492
 100533c:	d9000104 	addi	r4,sp,4
 1005340:	d8c00815 	stw	r3,32(sp)
 1005344:	d8800a15 	stw	r2,40(sp)
 1005348:	d9401015 	stw	r5,64(sp)
 100534c:	dfc01515 	stw	ra,84(sp)
 1005350:	df001415 	stw	fp,80(sp)
 1005354:	ddc01315 	stw	r23,76(sp)
 1005358:	dec00915 	stw	sp,36(sp)
 100535c:	dec00b15 	stw	sp,44(sp)
 1005360:	d9801115 	stw	r6,68(sp)
 1005364:	d9c01215 	stw	r7,72(sp)
 1005368:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 100536c:	d8801017 	ldw	r2,64(sp)
 1005370:	d8c01117 	ldw	r3,68(sp)
 1005374:	11400017 	ldw	r5,0(r2)
 1005378:	28bffd17 	ldw	r2,-12(r5)
 100537c:	10c01836 	bltu	r2,r3,10053e0 <_ZNSsC2ERKSsmm+0xc8>
 1005380:	d8c01117 	ldw	r3,68(sp)
 1005384:	d9c01217 	ldw	r7,72(sp)
 1005388:	10c5c83a 	sub	r2,r2,r3
 100538c:	28c9883a 	add	r4,r5,r3
 1005390:	11c01136 	bltu	r2,r7,10053d8 <_ZNSsC2ERKSsmm+0xc0>
 1005394:	00800044 	movi	r2,1
 1005398:	d8800215 	stw	r2,8(sp)
 100539c:	d8801117 	ldw	r2,68(sp)
 10053a0:	29cb883a 	add	r5,r5,r7
 10053a4:	d80d883a 	mov	r6,sp
 10053a8:	114b883a 	add	r5,r2,r5
 10053ac:	d9c00e03 	ldbu	r7,56(sp)
 10053b0:	10050340 	call	1005034 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 10053b4:	d8c00f17 	ldw	r3,60(sp)
 10053b8:	d9000104 	addi	r4,sp,4
 10053bc:	18800015 	stw	r2,0(r3)
 10053c0:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 10053c4:	dfc01517 	ldw	ra,84(sp)
 10053c8:	df001417 	ldw	fp,80(sp)
 10053cc:	ddc01317 	ldw	r23,76(sp)
 10053d0:	dec01604 	addi	sp,sp,88
 10053d4:	f800283a 	ret
 10053d8:	100f883a 	mov	r7,r2
 10053dc:	003fed06 	br	1005394 <_ZNSsC2ERKSsmm+0x7c>
 10053e0:	00bfffc4 	movi	r2,-1
 10053e4:	010040b4 	movhi	r4,258
 10053e8:	213c3c04 	addi	r4,r4,-3856
 10053ec:	d8800215 	stw	r2,8(sp)
 10053f0:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>
 10053f4:	d9000317 	ldw	r4,12(sp)
 10053f8:	00bfffc4 	movi	r2,-1
 10053fc:	d8800215 	stw	r2,8(sp)
 1005400:	10094540 	call	1009454 <_Unwind_SjLj_Resume>

01005404 <_ZNSsC1IPcEET_S1_RKSaIcE>:
 1005404:	defffe04 	addi	sp,sp,-8
 1005408:	dc400015 	stw	r17,0(sp)
 100540c:	2023883a 	mov	r17,r4
 1005410:	2809883a 	mov	r4,r5
 1005414:	300b883a 	mov	r5,r6
 1005418:	380d883a 	mov	r6,r7
 100541c:	dfc00115 	stw	ra,4(sp)
 1005420:	10050340 	call	1005034 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 1005424:	88800015 	stw	r2,0(r17)
 1005428:	dfc00117 	ldw	ra,4(sp)
 100542c:	dc400017 	ldw	r17,0(sp)
 1005430:	dec00204 	addi	sp,sp,8
 1005434:	f800283a 	ret

01005438 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_>:
 1005438:	3147c83a 	sub	r3,r6,r5
 100543c:	00800044 	movi	r2,1
 1005440:	180d883a 	mov	r6,r3
 1005444:	18800126 	beq	r3,r2,100544c <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_+0x14>
 1005448:	1009fa81 	jmpi	1009fa8 <memcpy>
 100544c:	28800003 	ldbu	r2,0(r5)
 1005450:	20800005 	stb	r2,0(r4)
 1005454:	f800283a 	ret

01005458 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 1005458:	defffb04 	addi	sp,sp,-20
 100545c:	dc000015 	stw	r16,0(sp)
 1005460:	dfc00415 	stw	ra,16(sp)
 1005464:	dcc00315 	stw	r19,12(sp)
 1005468:	dc800215 	stw	r18,8(sp)
 100546c:	dc400115 	stw	r17,4(sp)
 1005470:	2021883a 	mov	r16,r4
 1005474:	21401c26 	beq	r4,r5,10054e8 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x90>
 1005478:	20002526 	beq	r4,zero,1005510 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xb8>
 100547c:	2c25c83a 	sub	r18,r5,r16
 1005480:	9009883a 	mov	r4,r18
 1005484:	000b883a 	mov	r5,zero
 1005488:	10042600 	call	1004260 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 100548c:	1023883a 	mov	r17,r2
 1005490:	14c00304 	addi	r19,r2,12
 1005494:	00800044 	movi	r2,1
 1005498:	90801026 	beq	r18,r2,10054dc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x84>
 100549c:	800b883a 	mov	r5,r16
 10054a0:	9809883a 	mov	r4,r19
 10054a4:	900d883a 	mov	r6,r18
 10054a8:	1009fa80 	call	1009fa8 <memcpy>
 10054ac:	9c85883a 	add	r2,r19,r18
 10054b0:	8c800015 	stw	r18,0(r17)
 10054b4:	88000215 	stw	zero,8(r17)
 10054b8:	10000005 	stb	zero,0(r2)
 10054bc:	9805883a 	mov	r2,r19
 10054c0:	dfc00417 	ldw	ra,16(sp)
 10054c4:	dcc00317 	ldw	r19,12(sp)
 10054c8:	dc800217 	ldw	r18,8(sp)
 10054cc:	dc400117 	ldw	r17,4(sp)
 10054d0:	dc000017 	ldw	r16,0(sp)
 10054d4:	dec00504 	addi	sp,sp,20
 10054d8:	f800283a 	ret
 10054dc:	80800003 	ldbu	r2,0(r16)
 10054e0:	88800305 	stb	r2,12(r17)
 10054e4:	003ff106 	br	10054ac <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x54>
 10054e8:	04c040b4 	movhi	r19,258
 10054ec:	9cdbd904 	addi	r19,r19,28516
 10054f0:	9805883a 	mov	r2,r19
 10054f4:	dfc00417 	ldw	ra,16(sp)
 10054f8:	dcc00317 	ldw	r19,12(sp)
 10054fc:	dc800217 	ldw	r18,8(sp)
 1005500:	dc400117 	ldw	r17,4(sp)
 1005504:	dc000017 	ldw	r16,0(sp)
 1005508:	dec00504 	addi	sp,sp,20
 100550c:	f800283a 	ret
 1005510:	010040b4 	movhi	r4,258
 1005514:	213c3104 	addi	r4,r4,-3900
 1005518:	10018e00 	call	10018e0 <_ZSt19__throw_logic_errorPKc>

0100551c <_ZNSsC2IPKcEET_S2_RKSaIcE>:
 100551c:	defffe04 	addi	sp,sp,-8
 1005520:	dc400015 	stw	r17,0(sp)
 1005524:	2023883a 	mov	r17,r4
 1005528:	2809883a 	mov	r4,r5
 100552c:	300b883a 	mov	r5,r6
 1005530:	380d883a 	mov	r6,r7
 1005534:	dfc00115 	stw	ra,4(sp)
 1005538:	10054580 	call	1005458 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 100553c:	88800015 	stw	r2,0(r17)
 1005540:	dfc00117 	ldw	ra,4(sp)
 1005544:	dc400017 	ldw	r17,0(sp)
 1005548:	dec00204 	addi	sp,sp,8
 100554c:	f800283a 	ret

01005550 <_ZNSsC1EPKcmRKSaIcE>:
 1005550:	defffe04 	addi	sp,sp,-8
 1005554:	dc400015 	stw	r17,0(sp)
 1005558:	2023883a 	mov	r17,r4
 100555c:	2809883a 	mov	r4,r5
 1005560:	314b883a 	add	r5,r6,r5
 1005564:	380d883a 	mov	r6,r7
 1005568:	dfc00115 	stw	ra,4(sp)
 100556c:	10054580 	call	1005458 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1005570:	88800015 	stw	r2,0(r17)
 1005574:	dfc00117 	ldw	ra,4(sp)
 1005578:	dc400017 	ldw	r17,0(sp)
 100557c:	dec00204 	addi	sp,sp,8
 1005580:	f800283a 	ret

01005584 <_ZNSsC2EPKcmRKSaIcE>:
 1005584:	defffe04 	addi	sp,sp,-8
 1005588:	dc400015 	stw	r17,0(sp)
 100558c:	2023883a 	mov	r17,r4
 1005590:	2809883a 	mov	r4,r5
 1005594:	314b883a 	add	r5,r6,r5
 1005598:	380d883a 	mov	r6,r7
 100559c:	dfc00115 	stw	ra,4(sp)
 10055a0:	10054580 	call	1005458 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 10055a4:	88800015 	stw	r2,0(r17)
 10055a8:	dfc00117 	ldw	ra,4(sp)
 10055ac:	dc400017 	ldw	r17,0(sp)
 10055b0:	dec00204 	addi	sp,sp,8
 10055b4:	f800283a 	ret

010055b8 <_ZNSsC1IPKcEET_S2_RKSaIcE>:
 10055b8:	defffe04 	addi	sp,sp,-8
 10055bc:	dc400015 	stw	r17,0(sp)
 10055c0:	2023883a 	mov	r17,r4
 10055c4:	2809883a 	mov	r4,r5
 10055c8:	300b883a 	mov	r5,r6
 10055cc:	380d883a 	mov	r6,r7
 10055d0:	dfc00115 	stw	ra,4(sp)
 10055d4:	10054580 	call	1005458 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 10055d8:	88800015 	stw	r2,0(r17)
 10055dc:	dfc00117 	ldw	ra,4(sp)
 10055e0:	dc400017 	ldw	r17,0(sp)
 10055e4:	dec00204 	addi	sp,sp,8
 10055e8:	f800283a 	ret

010055ec <_ZNSsC1EPKcRKSaIcE>:
 10055ec:	defffc04 	addi	sp,sp,-16
 10055f0:	dc400215 	stw	r17,8(sp)
 10055f4:	dc000115 	stw	r16,4(sp)
 10055f8:	2023883a 	mov	r17,r4
 10055fc:	dfc00315 	stw	ra,12(sp)
 1005600:	00bfffc4 	movi	r2,-1
 1005604:	2809883a 	mov	r4,r5
 1005608:	3021883a 	mov	r16,r6
 100560c:	28000426 	beq	r5,zero,1005620 <_ZNSsC1EPKcRKSaIcE+0x34>
 1005610:	d9400015 	stw	r5,0(sp)
 1005614:	100a5f80 	call	100a5f8 <strlen>
 1005618:	d9400017 	ldw	r5,0(sp)
 100561c:	2885883a 	add	r2,r5,r2
 1005620:	2809883a 	mov	r4,r5
 1005624:	800d883a 	mov	r6,r16
 1005628:	100b883a 	mov	r5,r2
 100562c:	800f883a 	mov	r7,r16
 1005630:	10054580 	call	1005458 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1005634:	88800015 	stw	r2,0(r17)
 1005638:	dfc00317 	ldw	ra,12(sp)
 100563c:	dc400217 	ldw	r17,8(sp)
 1005640:	dc000117 	ldw	r16,4(sp)
 1005644:	dec00404 	addi	sp,sp,16
 1005648:	f800283a 	ret

0100564c <_ZNSsC2EPKcRKSaIcE>:
 100564c:	defffc04 	addi	sp,sp,-16
 1005650:	dc400215 	stw	r17,8(sp)
 1005654:	dc000115 	stw	r16,4(sp)
 1005658:	2023883a 	mov	r17,r4
 100565c:	dfc00315 	stw	ra,12(sp)
 1005660:	00bfffc4 	movi	r2,-1
 1005664:	2809883a 	mov	r4,r5
 1005668:	3021883a 	mov	r16,r6
 100566c:	28000426 	beq	r5,zero,1005680 <_ZNSsC2EPKcRKSaIcE+0x34>
 1005670:	d9400015 	stw	r5,0(sp)
 1005674:	100a5f80 	call	100a5f8 <strlen>
 1005678:	d9400017 	ldw	r5,0(sp)
 100567c:	2885883a 	add	r2,r5,r2
 1005680:	2809883a 	mov	r4,r5
 1005684:	800d883a 	mov	r6,r16
 1005688:	100b883a 	mov	r5,r2
 100568c:	800f883a 	mov	r7,r16
 1005690:	10054580 	call	1005458 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1005694:	88800015 	stw	r2,0(r17)
 1005698:	dfc00317 	ldw	ra,12(sp)
 100569c:	dc400217 	ldw	r17,8(sp)
 10056a0:	dc000117 	ldw	r16,4(sp)
 10056a4:	dec00404 	addi	sp,sp,16
 10056a8:	f800283a 	ret

010056ac <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_>:
 10056ac:	3147c83a 	sub	r3,r6,r5
 10056b0:	00800044 	movi	r2,1
 10056b4:	180d883a 	mov	r6,r3
 10056b8:	18800126 	beq	r3,r2,10056c0 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_+0x14>
 10056bc:	1009fa81 	jmpi	1009fa8 <memcpy>
 10056c0:	28800003 	ldbu	r2,0(r5)
 10056c4:	20800005 	stb	r2,0(r4)
 10056c8:	f800283a 	ret

010056cc <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>:
 10056cc:	defffb04 	addi	sp,sp,-20
 10056d0:	dc000015 	stw	r16,0(sp)
 10056d4:	dfc00415 	stw	ra,16(sp)
 10056d8:	dcc00315 	stw	r19,12(sp)
 10056dc:	dc800215 	stw	r18,8(sp)
 10056e0:	dc400115 	stw	r17,4(sp)
 10056e4:	2021883a 	mov	r16,r4
 10056e8:	29000a1e 	bne	r5,r4,1005714 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0x48>
 10056ec:	04c040b4 	movhi	r19,258
 10056f0:	9cdbd904 	addi	r19,r19,28516
 10056f4:	9805883a 	mov	r2,r19
 10056f8:	dfc00417 	ldw	ra,16(sp)
 10056fc:	dcc00317 	ldw	r19,12(sp)
 1005700:	dc800217 	ldw	r18,8(sp)
 1005704:	dc400117 	ldw	r17,4(sp)
 1005708:	dc000017 	ldw	r16,0(sp)
 100570c:	dec00504 	addi	sp,sp,20
 1005710:	f800283a 	ret
 1005714:	2923c83a 	sub	r17,r5,r4
 1005718:	8809883a 	mov	r4,r17
 100571c:	000b883a 	mov	r5,zero
 1005720:	10042600 	call	1004260 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1005724:	1025883a 	mov	r18,r2
 1005728:	14c00304 	addi	r19,r2,12
 100572c:	00800044 	movi	r2,1
 1005730:	88801026 	beq	r17,r2,1005774 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0xa8>
 1005734:	800b883a 	mov	r5,r16
 1005738:	9809883a 	mov	r4,r19
 100573c:	880d883a 	mov	r6,r17
 1005740:	1009fa80 	call	1009fa8 <memcpy>
 1005744:	9c45883a 	add	r2,r19,r17
 1005748:	94400015 	stw	r17,0(r18)
 100574c:	90000215 	stw	zero,8(r18)
 1005750:	10000005 	stb	zero,0(r2)
 1005754:	9805883a 	mov	r2,r19
 1005758:	dfc00417 	ldw	ra,16(sp)
 100575c:	dcc00317 	ldw	r19,12(sp)
 1005760:	dc800217 	ldw	r18,8(sp)
 1005764:	dc400117 	ldw	r17,4(sp)
 1005768:	dc000017 	ldw	r16,0(sp)
 100576c:	dec00504 	addi	sp,sp,20
 1005770:	f800283a 	ret
 1005774:	80800003 	ldbu	r2,0(r16)
 1005778:	98800005 	stb	r2,0(r19)
 100577c:	003ff106 	br	1005744 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0x78>

01005780 <_ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE>:
 1005780:	defffe04 	addi	sp,sp,-8
 1005784:	dc400015 	stw	r17,0(sp)
 1005788:	2023883a 	mov	r17,r4
 100578c:	2809883a 	mov	r4,r5
 1005790:	300b883a 	mov	r5,r6
 1005794:	380d883a 	mov	r6,r7
 1005798:	dfc00115 	stw	ra,4(sp)
 100579c:	10056cc0 	call	10056cc <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>
 10057a0:	88800015 	stw	r2,0(r17)
 10057a4:	dfc00117 	ldw	ra,4(sp)
 10057a8:	dc400017 	ldw	r17,0(sp)
 10057ac:	dec00204 	addi	sp,sp,8
 10057b0:	f800283a 	ret

010057b4 <_ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE>:
 10057b4:	defffe04 	addi	sp,sp,-8
 10057b8:	dc400015 	stw	r17,0(sp)
 10057bc:	2023883a 	mov	r17,r4
 10057c0:	2809883a 	mov	r4,r5
 10057c4:	300b883a 	mov	r5,r6
 10057c8:	380d883a 	mov	r6,r7
 10057cc:	dfc00115 	stw	ra,4(sp)
 10057d0:	10056cc0 	call	10056cc <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>
 10057d4:	88800015 	stw	r2,0(r17)
 10057d8:	dfc00117 	ldw	ra,4(sp)
 10057dc:	dc400017 	ldw	r17,0(sp)
 10057e0:	dec00204 	addi	sp,sp,8
 10057e4:	f800283a 	ret

010057e8 <_ZNSsC1ERKSs>:
 10057e8:	deffec04 	addi	sp,sp,-80
 10057ec:	00804074 	movhi	r2,257
 10057f0:	10a0b504 	addi	r2,r2,-32044
 10057f4:	d8800715 	stw	r2,28(sp)
 10057f8:	00c040b4 	movhi	r3,258
 10057fc:	18fb3804 	addi	r3,r3,-4896
 1005800:	00804034 	movhi	r2,256
 1005804:	10962b04 	addi	r2,r2,22700
 1005808:	d9000e15 	stw	r4,56(sp)
 100580c:	d9000104 	addi	r4,sp,4
 1005810:	d8800a15 	stw	r2,40(sp)
 1005814:	dfc01315 	stw	ra,76(sp)
 1005818:	df001215 	stw	fp,72(sp)
 100581c:	ddc01115 	stw	r23,68(sp)
 1005820:	d8c00815 	stw	r3,32(sp)
 1005824:	d9400f15 	stw	r5,60(sp)
 1005828:	dec00915 	stw	sp,36(sp)
 100582c:	dec00b15 	stw	sp,44(sp)
 1005830:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1005834:	d8800f17 	ldw	r2,60(sp)
 1005838:	10800017 	ldw	r2,0(r2)
 100583c:	113ffd04 	addi	r4,r2,-12
 1005840:	d8801015 	stw	r2,64(sp)
 1005844:	20800217 	ldw	r2,8(r4)
 1005848:	10000d16 	blt	r2,zero,1005880 <_ZNSsC1ERKSs+0x98>
 100584c:	008040b4 	movhi	r2,258
 1005850:	109bd604 	addi	r2,r2,28504
 1005854:	2080101e 	bne	r4,r2,1005898 <_ZNSsC1ERKSs+0xb0>
 1005858:	d8801017 	ldw	r2,64(sp)
 100585c:	d8c00e17 	ldw	r3,56(sp)
 1005860:	d9000104 	addi	r4,sp,4
 1005864:	18800015 	stw	r2,0(r3)
 1005868:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 100586c:	dfc01317 	ldw	ra,76(sp)
 1005870:	df001217 	ldw	fp,72(sp)
 1005874:	ddc01117 	ldw	r23,68(sp)
 1005878:	dec01404 	addi	sp,sp,80
 100587c:	f800283a 	ret
 1005880:	00800084 	movi	r2,2
 1005884:	d8800215 	stw	r2,8(sp)
 1005888:	d80b883a 	mov	r5,sp
 100588c:	000d883a 	mov	r6,zero
 1005890:	1004dcc0 	call	1004dcc <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1005894:	003ff106 	br	100585c <_ZNSsC1ERKSs+0x74>
 1005898:	01400044 	movi	r5,1
 100589c:	d9400215 	stw	r5,8(sp)
 10058a0:	21000204 	addi	r4,r4,8
 10058a4:	10079140 	call	1007914 <_ZN9__gnu_cxx12__atomic_addEPVii>
 10058a8:	003feb06 	br	1005858 <_ZNSsC1ERKSs+0x70>
 10058ac:	d8c00217 	ldw	r3,8(sp)
 10058b0:	00800044 	movi	r2,1
 10058b4:	d9000317 	ldw	r4,12(sp)
 10058b8:	d9400417 	ldw	r5,16(sp)
 10058bc:	18800426 	beq	r3,r2,10058d0 <_ZNSsC1ERKSs+0xe8>
 10058c0:	00bfffc4 	movi	r2,-1
 10058c4:	28800426 	beq	r5,r2,10058d8 <_ZNSsC1ERKSs+0xf0>
 10058c8:	d8800215 	stw	r2,8(sp)
 10058cc:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 10058d0:	00bfffc4 	movi	r2,-1
 10058d4:	003ffc06 	br	10058c8 <_ZNSsC1ERKSs+0xe0>
 10058d8:	00bfffc4 	movi	r2,-1
 10058dc:	d8800215 	stw	r2,8(sp)
 10058e0:	10081540 	call	1008154 <__cxa_call_unexpected>

010058e4 <_ZNSsC2ERKSs>:
 10058e4:	deffec04 	addi	sp,sp,-80
 10058e8:	00804074 	movhi	r2,257
 10058ec:	10a0b504 	addi	r2,r2,-32044
 10058f0:	d8800715 	stw	r2,28(sp)
 10058f4:	00c040b4 	movhi	r3,258
 10058f8:	18fb3c04 	addi	r3,r3,-4880
 10058fc:	00804034 	movhi	r2,256
 1005900:	10966a04 	addi	r2,r2,22952
 1005904:	d9000e15 	stw	r4,56(sp)
 1005908:	d9000104 	addi	r4,sp,4
 100590c:	d8800a15 	stw	r2,40(sp)
 1005910:	dfc01315 	stw	ra,76(sp)
 1005914:	df001215 	stw	fp,72(sp)
 1005918:	ddc01115 	stw	r23,68(sp)
 100591c:	d8c00815 	stw	r3,32(sp)
 1005920:	d9400f15 	stw	r5,60(sp)
 1005924:	dec00915 	stw	sp,36(sp)
 1005928:	dec00b15 	stw	sp,44(sp)
 100592c:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1005930:	d8800f17 	ldw	r2,60(sp)
 1005934:	10800017 	ldw	r2,0(r2)
 1005938:	113ffd04 	addi	r4,r2,-12
 100593c:	d8801015 	stw	r2,64(sp)
 1005940:	20800217 	ldw	r2,8(r4)
 1005944:	10000d16 	blt	r2,zero,100597c <_ZNSsC2ERKSs+0x98>
 1005948:	008040b4 	movhi	r2,258
 100594c:	109bd604 	addi	r2,r2,28504
 1005950:	2080101e 	bne	r4,r2,1005994 <_ZNSsC2ERKSs+0xb0>
 1005954:	d8801017 	ldw	r2,64(sp)
 1005958:	d8c00e17 	ldw	r3,56(sp)
 100595c:	d9000104 	addi	r4,sp,4
 1005960:	18800015 	stw	r2,0(r3)
 1005964:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1005968:	dfc01317 	ldw	ra,76(sp)
 100596c:	df001217 	ldw	fp,72(sp)
 1005970:	ddc01117 	ldw	r23,68(sp)
 1005974:	dec01404 	addi	sp,sp,80
 1005978:	f800283a 	ret
 100597c:	00800084 	movi	r2,2
 1005980:	d8800215 	stw	r2,8(sp)
 1005984:	d80b883a 	mov	r5,sp
 1005988:	000d883a 	mov	r6,zero
 100598c:	1004dcc0 	call	1004dcc <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1005990:	003ff106 	br	1005958 <_ZNSsC2ERKSs+0x74>
 1005994:	01400044 	movi	r5,1
 1005998:	d9400215 	stw	r5,8(sp)
 100599c:	21000204 	addi	r4,r4,8
 10059a0:	10079140 	call	1007914 <_ZN9__gnu_cxx12__atomic_addEPVii>
 10059a4:	003feb06 	br	1005954 <_ZNSsC2ERKSs+0x70>
 10059a8:	d8c00217 	ldw	r3,8(sp)
 10059ac:	00800044 	movi	r2,1
 10059b0:	d9000317 	ldw	r4,12(sp)
 10059b4:	d9400417 	ldw	r5,16(sp)
 10059b8:	18800426 	beq	r3,r2,10059cc <_ZNSsC2ERKSs+0xe8>
 10059bc:	00bfffc4 	movi	r2,-1
 10059c0:	28800426 	beq	r5,r2,10059d4 <_ZNSsC2ERKSs+0xf0>
 10059c4:	d8800215 	stw	r2,8(sp)
 10059c8:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 10059cc:	00bfffc4 	movi	r2,-1
 10059d0:	003ffc06 	br	10059c4 <_ZNSsC2ERKSs+0xe0>
 10059d4:	00bfffc4 	movi	r2,-1
 10059d8:	d8800215 	stw	r2,8(sp)
 10059dc:	10081540 	call	1008154 <__cxa_call_unexpected>

010059e0 <_ZNSs6assignERKSs>:
 10059e0:	deffea04 	addi	sp,sp,-88
 10059e4:	00804074 	movhi	r2,257
 10059e8:	10a0b504 	addi	r2,r2,-32044
 10059ec:	00c040b4 	movhi	r3,258
 10059f0:	18fb4004 	addi	r3,r3,-4864
 10059f4:	d8800715 	stw	r2,28(sp)
 10059f8:	d9001015 	stw	r4,64(sp)
 10059fc:	00804034 	movhi	r2,256
 1005a00:	1096c504 	addi	r2,r2,23316
 1005a04:	d9000104 	addi	r4,sp,4
 1005a08:	d8c00815 	stw	r3,32(sp)
 1005a0c:	d8800a15 	stw	r2,40(sp)
 1005a10:	d9401115 	stw	r5,68(sp)
 1005a14:	dfc01515 	stw	ra,84(sp)
 1005a18:	df001415 	stw	fp,80(sp)
 1005a1c:	ddc01315 	stw	r23,76(sp)
 1005a20:	dec00915 	stw	sp,36(sp)
 1005a24:	dec00b15 	stw	sp,44(sp)
 1005a28:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1005a2c:	d8801117 	ldw	r2,68(sp)
 1005a30:	d8c01017 	ldw	r3,64(sp)
 1005a34:	10800017 	ldw	r2,0(r2)
 1005a38:	d8801215 	stw	r2,72(sp)
 1005a3c:	d9401217 	ldw	r5,72(sp)
 1005a40:	18800017 	ldw	r2,0(r3)
 1005a44:	00fffd04 	movi	r3,-12
 1005a48:	28c9883a 	add	r4,r5,r3
 1005a4c:	10c5883a 	add	r2,r2,r3
 1005a50:	11001126 	beq	r2,r4,1005a98 <_ZNSs6assignERKSs+0xb8>
 1005a54:	20800217 	ldw	r2,8(r4)
 1005a58:	10001716 	blt	r2,zero,1005ab8 <_ZNSs6assignERKSs+0xd8>
 1005a5c:	008040b4 	movhi	r2,258
 1005a60:	109bd604 	addi	r2,r2,28504
 1005a64:	2080261e 	bne	r4,r2,1005b00 <_ZNSs6assignERKSs+0x120>
 1005a68:	d8c01217 	ldw	r3,72(sp)
 1005a6c:	d8c00f15 	stw	r3,60(sp)
 1005a70:	d9401017 	ldw	r5,64(sp)
 1005a74:	00c040b4 	movhi	r3,258
 1005a78:	18dbd604 	addi	r3,r3,28504
 1005a7c:	28800017 	ldw	r2,0(r5)
 1005a80:	10bffd04 	addi	r2,r2,-12
 1005a84:	d8800e15 	stw	r2,56(sp)
 1005a88:	10c0121e 	bne	r2,r3,1005ad4 <_ZNSs6assignERKSs+0xf4>
 1005a8c:	d8c00f17 	ldw	r3,60(sp)
 1005a90:	d8801017 	ldw	r2,64(sp)
 1005a94:	10c00015 	stw	r3,0(r2)
 1005a98:	d9000104 	addi	r4,sp,4
 1005a9c:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1005aa0:	d8801017 	ldw	r2,64(sp)
 1005aa4:	dfc01517 	ldw	ra,84(sp)
 1005aa8:	df001417 	ldw	fp,80(sp)
 1005aac:	ddc01317 	ldw	r23,76(sp)
 1005ab0:	dec01604 	addi	sp,sp,88
 1005ab4:	f800283a 	ret
 1005ab8:	00800084 	movi	r2,2
 1005abc:	d8800215 	stw	r2,8(sp)
 1005ac0:	d80b883a 	mov	r5,sp
 1005ac4:	000d883a 	mov	r6,zero
 1005ac8:	1004dcc0 	call	1004dcc <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1005acc:	d8800f15 	stw	r2,60(sp)
 1005ad0:	003fe706 	br	1005a70 <_ZNSs6assignERKSs+0x90>
 1005ad4:	d9400e17 	ldw	r5,56(sp)
 1005ad8:	008000c4 	movi	r2,3
 1005adc:	d8800215 	stw	r2,8(sp)
 1005ae0:	29000204 	addi	r4,r5,8
 1005ae4:	017fffc4 	movi	r5,-1
 1005ae8:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005aec:	00bfe716 	blt	zero,r2,1005a8c <_ZNSs6assignERKSs+0xac>
 1005af0:	d9000e17 	ldw	r4,56(sp)
 1005af4:	d80b883a 	mov	r5,sp
 1005af8:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005afc:	003fe306 	br	1005a8c <_ZNSs6assignERKSs+0xac>
 1005b00:	01400044 	movi	r5,1
 1005b04:	d9400215 	stw	r5,8(sp)
 1005b08:	21000204 	addi	r4,r4,8
 1005b0c:	10079140 	call	1007914 <_ZN9__gnu_cxx12__atomic_addEPVii>
 1005b10:	003fd506 	br	1005a68 <_ZNSs6assignERKSs+0x88>
 1005b14:	d8c00217 	ldw	r3,8(sp)
 1005b18:	00800044 	movi	r2,1
 1005b1c:	d9000317 	ldw	r4,12(sp)
 1005b20:	d9400417 	ldw	r5,16(sp)
 1005b24:	18800626 	beq	r3,r2,1005b40 <_ZNSs6assignERKSs+0x160>
 1005b28:	00800084 	movi	r2,2
 1005b2c:	18800426 	beq	r3,r2,1005b40 <_ZNSs6assignERKSs+0x160>
 1005b30:	00bfffc4 	movi	r2,-1
 1005b34:	28800426 	beq	r5,r2,1005b48 <_ZNSs6assignERKSs+0x168>
 1005b38:	d8800215 	stw	r2,8(sp)
 1005b3c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1005b40:	00bfffc4 	movi	r2,-1
 1005b44:	003ffc06 	br	1005b38 <_ZNSs6assignERKSs+0x158>
 1005b48:	00bfffc4 	movi	r2,-1
 1005b4c:	d8800215 	stw	r2,8(sp)
 1005b50:	10081540 	call	1008154 <__cxa_call_unexpected>

01005b54 <_ZNSsaSERKSs>:
 1005b54:	10059e01 	jmpi	10059e0 <_ZNSs6assignERKSs>

01005b58 <_ZNSs7reserveEm>:
 1005b58:	deffeb04 	addi	sp,sp,-84
 1005b5c:	00804074 	movhi	r2,257
 1005b60:	10a0b504 	addi	r2,r2,-32044
 1005b64:	00c040b4 	movhi	r3,258
 1005b68:	18fb4444 	addi	r3,r3,-4847
 1005b6c:	d8800715 	stw	r2,28(sp)
 1005b70:	d9001015 	stw	r4,64(sp)
 1005b74:	00804034 	movhi	r2,256
 1005b78:	10971c04 	addi	r2,r2,23664
 1005b7c:	d9000104 	addi	r4,sp,4
 1005b80:	d8c00815 	stw	r3,32(sp)
 1005b84:	d8800a15 	stw	r2,40(sp)
 1005b88:	dfc01415 	stw	ra,80(sp)
 1005b8c:	df001315 	stw	fp,76(sp)
 1005b90:	ddc01215 	stw	r23,72(sp)
 1005b94:	dec00915 	stw	sp,36(sp)
 1005b98:	dec00b15 	stw	sp,44(sp)
 1005b9c:	d9401115 	stw	r5,68(sp)
 1005ba0:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1005ba4:	d8801017 	ldw	r2,64(sp)
 1005ba8:	10c00017 	ldw	r3,0(r2)
 1005bac:	193ffd04 	addi	r4,r3,-12
 1005bb0:	20800117 	ldw	r2,4(r4)
 1005bb4:	d8c01117 	ldw	r3,68(sp)
 1005bb8:	10c01c26 	beq	r2,r3,1005c2c <_ZNSs7reserveEm+0xd4>
 1005bbc:	20c00017 	ldw	r3,0(r4)
 1005bc0:	d9401117 	ldw	r5,68(sp)
 1005bc4:	28c01736 	bltu	r5,r3,1005c24 <_ZNSs7reserveEm+0xcc>
 1005bc8:	00800044 	movi	r2,1
 1005bcc:	28cdc83a 	sub	r6,r5,r3
 1005bd0:	d8800215 	stw	r2,8(sp)
 1005bd4:	d80b883a 	mov	r5,sp
 1005bd8:	1004dcc0 	call	1004dcc <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1005bdc:	d8c01017 	ldw	r3,64(sp)
 1005be0:	d8800f15 	stw	r2,60(sp)
 1005be4:	18800017 	ldw	r2,0(r3)
 1005be8:	00c040b4 	movhi	r3,258
 1005bec:	18dbd604 	addi	r3,r3,28504
 1005bf0:	10bffd04 	addi	r2,r2,-12
 1005bf4:	d8800e15 	stw	r2,56(sp)
 1005bf8:	10c0151e 	bne	r2,r3,1005c50 <_ZNSs7reserveEm+0xf8>
 1005bfc:	d8c00f17 	ldw	r3,60(sp)
 1005c00:	d8801017 	ldw	r2,64(sp)
 1005c04:	d9000104 	addi	r4,sp,4
 1005c08:	10c00015 	stw	r3,0(r2)
 1005c0c:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1005c10:	dfc01417 	ldw	ra,80(sp)
 1005c14:	df001317 	ldw	fp,76(sp)
 1005c18:	ddc01217 	ldw	r23,72(sp)
 1005c1c:	dec01504 	addi	sp,sp,84
 1005c20:	f800283a 	ret
 1005c24:	180b883a 	mov	r5,r3
 1005c28:	003fe706 	br	1005bc8 <_ZNSs7reserveEm+0x70>
 1005c2c:	20800217 	ldw	r2,8(r4)
 1005c30:	00bfe216 	blt	zero,r2,1005bbc <_ZNSs7reserveEm+0x64>
 1005c34:	d9000104 	addi	r4,sp,4
 1005c38:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1005c3c:	dfc01417 	ldw	ra,80(sp)
 1005c40:	df001317 	ldw	fp,76(sp)
 1005c44:	ddc01217 	ldw	r23,72(sp)
 1005c48:	dec01504 	addi	sp,sp,84
 1005c4c:	f800283a 	ret
 1005c50:	11000204 	addi	r4,r2,8
 1005c54:	017fffc4 	movi	r5,-1
 1005c58:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005c5c:	00bfe716 	blt	zero,r2,1005bfc <_ZNSs7reserveEm+0xa4>
 1005c60:	d9000e17 	ldw	r4,56(sp)
 1005c64:	d80b883a 	mov	r5,sp
 1005c68:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005c6c:	003fe306 	br	1005bfc <_ZNSs7reserveEm+0xa4>
 1005c70:	d9000317 	ldw	r4,12(sp)
 1005c74:	00bfffc4 	movi	r2,-1
 1005c78:	d8800215 	stw	r2,8(sp)
 1005c7c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>

01005c80 <_ZNSs9push_backEc>:
 1005c80:	21800017 	ldw	r6,0(r4)
 1005c84:	defffc04 	addi	sp,sp,-16
 1005c88:	dc000015 	stw	r16,0(sp)
 1005c8c:	30bffd17 	ldw	r2,-12(r6)
 1005c90:	31fffd04 	addi	r7,r6,-12
 1005c94:	38c00117 	ldw	r3,4(r7)
 1005c98:	14000044 	addi	r16,r2,1
 1005c9c:	dc800215 	stw	r18,8(sp)
 1005ca0:	dc400115 	stw	r17,4(sp)
 1005ca4:	2825883a 	mov	r18,r5
 1005ca8:	dfc00315 	stw	ra,12(sp)
 1005cac:	2023883a 	mov	r17,r4
 1005cb0:	800b883a 	mov	r5,r16
 1005cb4:	1c001136 	bltu	r3,r16,1005cfc <_ZNSs9push_backEc+0x7c>
 1005cb8:	38800217 	ldw	r2,8(r7)
 1005cbc:	00800f16 	blt	zero,r2,1005cfc <_ZNSs9push_backEc+0x7c>
 1005cc0:	30bffd17 	ldw	r2,-12(r6)
 1005cc4:	3085883a 	add	r2,r6,r2
 1005cc8:	14800005 	stb	r18,0(r2)
 1005ccc:	88c00017 	ldw	r3,0(r17)
 1005cd0:	18bffd04 	addi	r2,r3,-12
 1005cd4:	1c3ffd15 	stw	r16,-12(r3)
 1005cd8:	1409883a 	add	r4,r2,r16
 1005cdc:	10000215 	stw	zero,8(r2)
 1005ce0:	20000305 	stb	zero,12(r4)
 1005ce4:	dfc00317 	ldw	ra,12(sp)
 1005ce8:	dc800217 	ldw	r18,8(sp)
 1005cec:	dc400117 	ldw	r17,4(sp)
 1005cf0:	dc000017 	ldw	r16,0(sp)
 1005cf4:	dec00404 	addi	sp,sp,16
 1005cf8:	f800283a 	ret
 1005cfc:	1005b580 	call	1005b58 <_ZNSs7reserveEm>
 1005d00:	89800017 	ldw	r6,0(r17)
 1005d04:	003fee06 	br	1005cc0 <_ZNSs9push_backEc+0x40>

01005d08 <_ZNSs6appendEmc>:
 1005d08:	defffb04 	addi	sp,sp,-20
 1005d0c:	dcc00315 	stw	r19,12(sp)
 1005d10:	dc800215 	stw	r18,8(sp)
 1005d14:	dc000015 	stw	r16,0(sp)
 1005d18:	dfc00415 	stw	ra,16(sp)
 1005d1c:	dc400115 	stw	r17,4(sp)
 1005d20:	2821883a 	mov	r16,r5
 1005d24:	3027883a 	mov	r19,r6
 1005d28:	2025883a 	mov	r18,r4
 1005d2c:	28001d26 	beq	r5,zero,1005da4 <_ZNSs6appendEmc+0x9c>
 1005d30:	20c00017 	ldw	r3,0(r4)
 1005d34:	00900034 	movhi	r2,16384
 1005d38:	10bfff04 	addi	r2,r2,-4
 1005d3c:	197ffd17 	ldw	r5,-12(r3)
 1005d40:	19bffd04 	addi	r6,r3,-12
 1005d44:	1145c83a 	sub	r2,r2,r5
 1005d48:	14002436 	bltu	r2,r16,1005ddc <_ZNSs6appendEmc+0xd4>
 1005d4c:	30800117 	ldw	r2,4(r6)
 1005d50:	8163883a 	add	r17,r16,r5
 1005d54:	14400236 	bltu	r2,r17,1005d60 <_ZNSs6appendEmc+0x58>
 1005d58:	30800217 	ldw	r2,8(r6)
 1005d5c:	0080030e 	bge	zero,r2,1005d6c <_ZNSs6appendEmc+0x64>
 1005d60:	880b883a 	mov	r5,r17
 1005d64:	1005b580 	call	1005b58 <_ZNSs7reserveEm>
 1005d68:	90c00017 	ldw	r3,0(r18)
 1005d6c:	18bffd17 	ldw	r2,-12(r3)
 1005d70:	99803fcc 	andi	r6,r19,255
 1005d74:	3180201c 	xori	r6,r6,128
 1005d78:	1889883a 	add	r4,r3,r2
 1005d7c:	00800044 	movi	r2,1
 1005d80:	31bfe004 	addi	r6,r6,-128
 1005d84:	80800f1e 	bne	r16,r2,1005dc4 <_ZNSs6appendEmc+0xbc>
 1005d88:	21800005 	stb	r6,0(r4)
 1005d8c:	90800017 	ldw	r2,0(r18)
 1005d90:	10fffd04 	addi	r3,r2,-12
 1005d94:	147ffd15 	stw	r17,-12(r2)
 1005d98:	1c49883a 	add	r4,r3,r17
 1005d9c:	18000215 	stw	zero,8(r3)
 1005da0:	20000305 	stb	zero,12(r4)
 1005da4:	9005883a 	mov	r2,r18
 1005da8:	dfc00417 	ldw	ra,16(sp)
 1005dac:	dcc00317 	ldw	r19,12(sp)
 1005db0:	dc800217 	ldw	r18,8(sp)
 1005db4:	dc400117 	ldw	r17,4(sp)
 1005db8:	dc000017 	ldw	r16,0(sp)
 1005dbc:	dec00504 	addi	sp,sp,20
 1005dc0:	f800283a 	ret
 1005dc4:	31403fcc 	andi	r5,r6,255
 1005dc8:	2940201c 	xori	r5,r5,128
 1005dcc:	297fe004 	addi	r5,r5,-128
 1005dd0:	800d883a 	mov	r6,r16
 1005dd4:	100a1280 	call	100a128 <memset>
 1005dd8:	003fec06 	br	1005d8c <_ZNSs6appendEmc+0x84>
 1005ddc:	010040b4 	movhi	r4,258
 1005de0:	213c4904 	addi	r4,r4,-3804
 1005de4:	10025600 	call	1002560 <_ZSt20__throw_length_errorPKc>

01005de8 <_ZNSs6appendEPKcm>:
 1005de8:	defffa04 	addi	sp,sp,-24
 1005dec:	dd000415 	stw	r20,16(sp)
 1005df0:	dcc00315 	stw	r19,12(sp)
 1005df4:	dc400115 	stw	r17,4(sp)
 1005df8:	dfc00515 	stw	ra,20(sp)
 1005dfc:	dc800215 	stw	r18,8(sp)
 1005e00:	dc000015 	stw	r16,0(sp)
 1005e04:	3023883a 	mov	r17,r6
 1005e08:	2829883a 	mov	r20,r5
 1005e0c:	2027883a 	mov	r19,r4
 1005e10:	30001c26 	beq	r6,zero,1005e84 <_ZNSs6appendEPKcm+0x9c>
 1005e14:	24000017 	ldw	r16,0(r4)
 1005e18:	00900034 	movhi	r2,16384
 1005e1c:	10bfff04 	addi	r2,r2,-4
 1005e20:	80fffd17 	ldw	r3,-12(r16)
 1005e24:	817ffd04 	addi	r5,r16,-12
 1005e28:	10c5c83a 	sub	r2,r2,r3
 1005e2c:	11802e36 	bltu	r2,r6,1005ee8 <_ZNSs6appendEPKcm+0x100>
 1005e30:	28800117 	ldw	r2,4(r5)
 1005e34:	30e5883a 	add	r18,r6,r3
 1005e38:	14801b2e 	bgeu	r2,r18,1005ea8 <_ZNSs6appendEPKcm+0xc0>
 1005e3c:	a4000236 	bltu	r20,r16,1005e48 <_ZNSs6appendEPKcm+0x60>
 1005e40:	80c5883a 	add	r2,r16,r3
 1005e44:	1500222e 	bgeu	r2,r20,1005ed0 <_ZNSs6appendEPKcm+0xe8>
 1005e48:	900b883a 	mov	r5,r18
 1005e4c:	1005b580 	call	1005b58 <_ZNSs7reserveEm>
 1005e50:	9c000017 	ldw	r16,0(r19)
 1005e54:	80bffd17 	ldw	r2,-12(r16)
 1005e58:	00c00044 	movi	r3,1
 1005e5c:	8089883a 	add	r4,r16,r2
 1005e60:	88c0171e 	bne	r17,r3,1005ec0 <_ZNSs6appendEPKcm+0xd8>
 1005e64:	a0800003 	ldbu	r2,0(r20)
 1005e68:	20800005 	stb	r2,0(r4)
 1005e6c:	98800017 	ldw	r2,0(r19)
 1005e70:	10fffd04 	addi	r3,r2,-12
 1005e74:	14bffd15 	stw	r18,-12(r2)
 1005e78:	1c89883a 	add	r4,r3,r18
 1005e7c:	18000215 	stw	zero,8(r3)
 1005e80:	20000305 	stb	zero,12(r4)
 1005e84:	9805883a 	mov	r2,r19
 1005e88:	dfc00517 	ldw	ra,20(sp)
 1005e8c:	dd000417 	ldw	r20,16(sp)
 1005e90:	dcc00317 	ldw	r19,12(sp)
 1005e94:	dc800217 	ldw	r18,8(sp)
 1005e98:	dc400117 	ldw	r17,4(sp)
 1005e9c:	dc000017 	ldw	r16,0(sp)
 1005ea0:	dec00604 	addi	sp,sp,24
 1005ea4:	f800283a 	ret
 1005ea8:	28800217 	ldw	r2,8(r5)
 1005eac:	00bfe316 	blt	zero,r2,1005e3c <_ZNSs6appendEPKcm+0x54>
 1005eb0:	80bffd17 	ldw	r2,-12(r16)
 1005eb4:	00c00044 	movi	r3,1
 1005eb8:	8089883a 	add	r4,r16,r2
 1005ebc:	88ffe926 	beq	r17,r3,1005e64 <_ZNSs6appendEPKcm+0x7c>
 1005ec0:	a00b883a 	mov	r5,r20
 1005ec4:	880d883a 	mov	r6,r17
 1005ec8:	1009fa80 	call	1009fa8 <memcpy>
 1005ecc:	003fe706 	br	1005e6c <_ZNSs6appendEPKcm+0x84>
 1005ed0:	900b883a 	mov	r5,r18
 1005ed4:	1005b580 	call	1005b58 <_ZNSs7reserveEm>
 1005ed8:	a405c83a 	sub	r2,r20,r16
 1005edc:	9c000017 	ldw	r16,0(r19)
 1005ee0:	1429883a 	add	r20,r2,r16
 1005ee4:	003fdb06 	br	1005e54 <_ZNSs6appendEPKcm+0x6c>
 1005ee8:	010040b4 	movhi	r4,258
 1005eec:	213c4904 	addi	r4,r4,-3804
 1005ef0:	10025600 	call	1002560 <_ZSt20__throw_length_errorPKc>

01005ef4 <_ZNSs6appendEPKc>:
 1005ef4:	defffd04 	addi	sp,sp,-12
 1005ef8:	dcc00115 	stw	r19,4(sp)
 1005efc:	dc400015 	stw	r17,0(sp)
 1005f00:	dfc00215 	stw	ra,8(sp)
 1005f04:	2023883a 	mov	r17,r4
 1005f08:	2809883a 	mov	r4,r5
 1005f0c:	2827883a 	mov	r19,r5
 1005f10:	100a5f80 	call	100a5f8 <strlen>
 1005f14:	980b883a 	mov	r5,r19
 1005f18:	8809883a 	mov	r4,r17
 1005f1c:	100d883a 	mov	r6,r2
 1005f20:	dfc00217 	ldw	ra,8(sp)
 1005f24:	dcc00117 	ldw	r19,4(sp)
 1005f28:	dc400017 	ldw	r17,0(sp)
 1005f2c:	dec00304 	addi	sp,sp,12
 1005f30:	1005de81 	jmpi	1005de8 <_ZNSs6appendEPKcm>

01005f34 <_ZNSspLEPKc>:
 1005f34:	defffd04 	addi	sp,sp,-12
 1005f38:	dcc00115 	stw	r19,4(sp)
 1005f3c:	dc400015 	stw	r17,0(sp)
 1005f40:	dfc00215 	stw	ra,8(sp)
 1005f44:	2023883a 	mov	r17,r4
 1005f48:	2809883a 	mov	r4,r5
 1005f4c:	2827883a 	mov	r19,r5
 1005f50:	100a5f80 	call	100a5f8 <strlen>
 1005f54:	980b883a 	mov	r5,r19
 1005f58:	8809883a 	mov	r4,r17
 1005f5c:	100d883a 	mov	r6,r2
 1005f60:	dfc00217 	ldw	ra,8(sp)
 1005f64:	dcc00117 	ldw	r19,4(sp)
 1005f68:	dc400017 	ldw	r17,0(sp)
 1005f6c:	dec00304 	addi	sp,sp,12
 1005f70:	1005de81 	jmpi	1005de8 <_ZNSs6appendEPKcm>

01005f74 <_ZNSs6appendERKSsmm>:
 1005f74:	defffa04 	addi	sp,sp,-24
 1005f78:	dcc00415 	stw	r19,16(sp)
 1005f7c:	2827883a 	mov	r19,r5
 1005f80:	29400017 	ldw	r5,0(r5)
 1005f84:	dc800315 	stw	r18,12(sp)
 1005f88:	dc000115 	stw	r16,4(sp)
 1005f8c:	28bffd17 	ldw	r2,-12(r5)
 1005f90:	dfc00515 	stw	ra,20(sp)
 1005f94:	dc400215 	stw	r17,8(sp)
 1005f98:	3021883a 	mov	r16,r6
 1005f9c:	2025883a 	mov	r18,r4
 1005fa0:	11802b36 	bltu	r2,r6,1006050 <_ZNSs6appendERKSsmm+0xdc>
 1005fa4:	118dc83a 	sub	r6,r2,r6
 1005fa8:	31c02436 	bltu	r6,r7,100603c <_ZNSs6appendERKSsmm+0xc8>
 1005fac:	38001b26 	beq	r7,zero,100601c <_ZNSs6appendERKSsmm+0xa8>
 1005fb0:	91800017 	ldw	r6,0(r18)
 1005fb4:	323ffd04 	addi	r8,r6,-12
 1005fb8:	30bffd17 	ldw	r2,-12(r6)
 1005fbc:	40c00117 	ldw	r3,4(r8)
 1005fc0:	38a3883a 	add	r17,r7,r2
 1005fc4:	1c400236 	bltu	r3,r17,1005fd0 <_ZNSs6appendERKSsmm+0x5c>
 1005fc8:	40800217 	ldw	r2,8(r8)
 1005fcc:	0080060e 	bge	zero,r2,1005fe8 <_ZNSs6appendERKSsmm+0x74>
 1005fd0:	880b883a 	mov	r5,r17
 1005fd4:	d9c00015 	stw	r7,0(sp)
 1005fd8:	1005b580 	call	1005b58 <_ZNSs7reserveEm>
 1005fdc:	99400017 	ldw	r5,0(r19)
 1005fe0:	91800017 	ldw	r6,0(r18)
 1005fe4:	d9c00017 	ldw	r7,0(sp)
 1005fe8:	30fffd17 	ldw	r3,-12(r6)
 1005fec:	00800044 	movi	r2,1
 1005ff0:	814b883a 	add	r5,r16,r5
 1005ff4:	30c9883a 	add	r4,r6,r3
 1005ff8:	3880121e 	bne	r7,r2,1006044 <_ZNSs6appendERKSsmm+0xd0>
 1005ffc:	28800003 	ldbu	r2,0(r5)
 1006000:	20800005 	stb	r2,0(r4)
 1006004:	90800017 	ldw	r2,0(r18)
 1006008:	10fffd04 	addi	r3,r2,-12
 100600c:	147ffd15 	stw	r17,-12(r2)
 1006010:	1c49883a 	add	r4,r3,r17
 1006014:	18000215 	stw	zero,8(r3)
 1006018:	20000305 	stb	zero,12(r4)
 100601c:	9005883a 	mov	r2,r18
 1006020:	dfc00517 	ldw	ra,20(sp)
 1006024:	dcc00417 	ldw	r19,16(sp)
 1006028:	dc800317 	ldw	r18,12(sp)
 100602c:	dc400217 	ldw	r17,8(sp)
 1006030:	dc000117 	ldw	r16,4(sp)
 1006034:	dec00604 	addi	sp,sp,24
 1006038:	f800283a 	ret
 100603c:	300f883a 	mov	r7,r6
 1006040:	003fda06 	br	1005fac <_ZNSs6appendERKSsmm+0x38>
 1006044:	380d883a 	mov	r6,r7
 1006048:	1009fa80 	call	1009fa8 <memcpy>
 100604c:	003fed06 	br	1006004 <_ZNSs6appendERKSsmm+0x90>
 1006050:	010040b4 	movhi	r4,258
 1006054:	213c4904 	addi	r4,r4,-3804
 1006058:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

0100605c <_ZNSs6appendERKSs>:
 100605c:	2a000017 	ldw	r8,0(r5)
 1006060:	defffb04 	addi	sp,sp,-20
 1006064:	dc000015 	stw	r16,0(sp)
 1006068:	443ffd17 	ldw	r16,-12(r8)
 100606c:	dcc00315 	stw	r19,12(sp)
 1006070:	dc800215 	stw	r18,8(sp)
 1006074:	dfc00415 	stw	ra,16(sp)
 1006078:	dc400115 	stw	r17,4(sp)
 100607c:	2827883a 	mov	r19,r5
 1006080:	2025883a 	mov	r18,r4
 1006084:	80001a26 	beq	r16,zero,10060f0 <_ZNSs6appendERKSs+0x94>
 1006088:	21c00017 	ldw	r7,0(r4)
 100608c:	39bffd04 	addi	r6,r7,-12
 1006090:	38bffd17 	ldw	r2,-12(r7)
 1006094:	30c00117 	ldw	r3,4(r6)
 1006098:	80a3883a 	add	r17,r16,r2
 100609c:	880b883a 	mov	r5,r17
 10060a0:	1c400236 	bltu	r3,r17,10060ac <_ZNSs6appendERKSs+0x50>
 10060a4:	30800217 	ldw	r2,8(r6)
 10060a8:	0080030e 	bge	zero,r2,10060b8 <_ZNSs6appendERKSs+0x5c>
 10060ac:	1005b580 	call	1005b58 <_ZNSs7reserveEm>
 10060b0:	9a000017 	ldw	r8,0(r19)
 10060b4:	91c00017 	ldw	r7,0(r18)
 10060b8:	38fffd17 	ldw	r3,-12(r7)
 10060bc:	00800044 	movi	r2,1
 10060c0:	400b883a 	mov	r5,r8
 10060c4:	800d883a 	mov	r6,r16
 10060c8:	38c9883a 	add	r4,r7,r3
 10060cc:	8080101e 	bne	r16,r2,1006110 <_ZNSs6appendERKSs+0xb4>
 10060d0:	40800003 	ldbu	r2,0(r8)
 10060d4:	20800005 	stb	r2,0(r4)
 10060d8:	90800017 	ldw	r2,0(r18)
 10060dc:	10fffd04 	addi	r3,r2,-12
 10060e0:	147ffd15 	stw	r17,-12(r2)
 10060e4:	1c49883a 	add	r4,r3,r17
 10060e8:	18000215 	stw	zero,8(r3)
 10060ec:	20000305 	stb	zero,12(r4)
 10060f0:	9005883a 	mov	r2,r18
 10060f4:	dfc00417 	ldw	ra,16(sp)
 10060f8:	dcc00317 	ldw	r19,12(sp)
 10060fc:	dc800217 	ldw	r18,8(sp)
 1006100:	dc400117 	ldw	r17,4(sp)
 1006104:	dc000017 	ldw	r16,0(sp)
 1006108:	dec00504 	addi	sp,sp,20
 100610c:	f800283a 	ret
 1006110:	1009fa80 	call	1009fa8 <memcpy>
 1006114:	003ff006 	br	10060d8 <_ZNSs6appendERKSs+0x7c>

01006118 <_ZNSspLERKSs>:
 1006118:	100605c1 	jmpi	100605c <_ZNSs6appendERKSs>

0100611c <_ZNSspLEc>:
 100611c:	21800017 	ldw	r6,0(r4)
 1006120:	defffc04 	addi	sp,sp,-16
 1006124:	dc000015 	stw	r16,0(sp)
 1006128:	30bffd17 	ldw	r2,-12(r6)
 100612c:	31fffd04 	addi	r7,r6,-12
 1006130:	38c00117 	ldw	r3,4(r7)
 1006134:	14000044 	addi	r16,r2,1
 1006138:	dc800215 	stw	r18,8(sp)
 100613c:	dc400115 	stw	r17,4(sp)
 1006140:	2825883a 	mov	r18,r5
 1006144:	dfc00315 	stw	ra,12(sp)
 1006148:	2023883a 	mov	r17,r4
 100614c:	800b883a 	mov	r5,r16
 1006150:	1c001236 	bltu	r3,r16,100619c <_ZNSspLEc+0x80>
 1006154:	38800217 	ldw	r2,8(r7)
 1006158:	00801016 	blt	zero,r2,100619c <_ZNSspLEc+0x80>
 100615c:	30fffd17 	ldw	r3,-12(r6)
 1006160:	8805883a 	mov	r2,r17
 1006164:	30c7883a 	add	r3,r6,r3
 1006168:	1c800005 	stb	r18,0(r3)
 100616c:	89000017 	ldw	r4,0(r17)
 1006170:	20fffd04 	addi	r3,r4,-12
 1006174:	243ffd15 	stw	r16,-12(r4)
 1006178:	1c0b883a 	add	r5,r3,r16
 100617c:	18000215 	stw	zero,8(r3)
 1006180:	28000305 	stb	zero,12(r5)
 1006184:	dfc00317 	ldw	ra,12(sp)
 1006188:	dc800217 	ldw	r18,8(sp)
 100618c:	dc400117 	ldw	r17,4(sp)
 1006190:	dc000017 	ldw	r16,0(sp)
 1006194:	dec00404 	addi	sp,sp,16
 1006198:	f800283a 	ret
 100619c:	1005b580 	call	1005b58 <_ZNSs7reserveEm>
 10061a0:	89800017 	ldw	r6,0(r17)
 10061a4:	003fed06 	br	100615c <_ZNSspLEc+0x40>

010061a8 <_ZNSsD1Ev>:
 10061a8:	deffed04 	addi	sp,sp,-76
 10061ac:	00804074 	movhi	r2,257
 10061b0:	10a0b504 	addi	r2,r2,-32044
 10061b4:	00c040b4 	movhi	r3,258
 10061b8:	18fb45c4 	addi	r3,r3,-4841
 10061bc:	d8800715 	stw	r2,28(sp)
 10061c0:	d9000f15 	stw	r4,60(sp)
 10061c4:	00804034 	movhi	r2,256
 10061c8:	10989504 	addi	r2,r2,25172
 10061cc:	d9000104 	addi	r4,sp,4
 10061d0:	d8c00815 	stw	r3,32(sp)
 10061d4:	d8800a15 	stw	r2,40(sp)
 10061d8:	dfc01215 	stw	ra,72(sp)
 10061dc:	df001115 	stw	fp,68(sp)
 10061e0:	ddc01015 	stw	r23,64(sp)
 10061e4:	dec00915 	stw	sp,36(sp)
 10061e8:	dec00b15 	stw	sp,44(sp)
 10061ec:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 10061f0:	d8c00f17 	ldw	r3,60(sp)
 10061f4:	18800017 	ldw	r2,0(r3)
 10061f8:	00c040b4 	movhi	r3,258
 10061fc:	18dbd604 	addi	r3,r3,28504
 1006200:	10bffd04 	addi	r2,r2,-12
 1006204:	d8800e15 	stw	r2,56(sp)
 1006208:	10c0071e 	bne	r2,r3,1006228 <_ZNSsD1Ev+0x80>
 100620c:	d9000104 	addi	r4,sp,4
 1006210:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1006214:	dfc01217 	ldw	ra,72(sp)
 1006218:	df001117 	ldw	fp,68(sp)
 100621c:	ddc01017 	ldw	r23,64(sp)
 1006220:	dec01304 	addi	sp,sp,76
 1006224:	f800283a 	ret
 1006228:	00800044 	movi	r2,1
 100622c:	d8800215 	stw	r2,8(sp)
 1006230:	d8800e17 	ldw	r2,56(sp)
 1006234:	017fffc4 	movi	r5,-1
 1006238:	11000204 	addi	r4,r2,8
 100623c:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006240:	00bff216 	blt	zero,r2,100620c <_ZNSsD1Ev+0x64>
 1006244:	d9000e17 	ldw	r4,56(sp)
 1006248:	d80b883a 	mov	r5,sp
 100624c:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006250:	003fee06 	br	100620c <_ZNSsD1Ev+0x64>
 1006254:	d9000317 	ldw	r4,12(sp)
 1006258:	00bfffc4 	movi	r2,-1
 100625c:	d8800215 	stw	r2,8(sp)
 1006260:	10094540 	call	1009454 <_Unwind_SjLj_Resume>

01006264 <_ZNSsD2Ev>:
 1006264:	deffed04 	addi	sp,sp,-76
 1006268:	00804074 	movhi	r2,257
 100626c:	10a0b504 	addi	r2,r2,-32044
 1006270:	00c040b4 	movhi	r3,258
 1006274:	18fb4744 	addi	r3,r3,-4835
 1006278:	d8800715 	stw	r2,28(sp)
 100627c:	d9000f15 	stw	r4,60(sp)
 1006280:	00804034 	movhi	r2,256
 1006284:	1098c404 	addi	r2,r2,25360
 1006288:	d9000104 	addi	r4,sp,4
 100628c:	d8c00815 	stw	r3,32(sp)
 1006290:	d8800a15 	stw	r2,40(sp)
 1006294:	dfc01215 	stw	ra,72(sp)
 1006298:	df001115 	stw	fp,68(sp)
 100629c:	ddc01015 	stw	r23,64(sp)
 10062a0:	dec00915 	stw	sp,36(sp)
 10062a4:	dec00b15 	stw	sp,44(sp)
 10062a8:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 10062ac:	d8c00f17 	ldw	r3,60(sp)
 10062b0:	18800017 	ldw	r2,0(r3)
 10062b4:	00c040b4 	movhi	r3,258
 10062b8:	18dbd604 	addi	r3,r3,28504
 10062bc:	10bffd04 	addi	r2,r2,-12
 10062c0:	d8800e15 	stw	r2,56(sp)
 10062c4:	10c0071e 	bne	r2,r3,10062e4 <_ZNSsD2Ev+0x80>
 10062c8:	d9000104 	addi	r4,sp,4
 10062cc:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 10062d0:	dfc01217 	ldw	ra,72(sp)
 10062d4:	df001117 	ldw	fp,68(sp)
 10062d8:	ddc01017 	ldw	r23,64(sp)
 10062dc:	dec01304 	addi	sp,sp,76
 10062e0:	f800283a 	ret
 10062e4:	00800044 	movi	r2,1
 10062e8:	d8800215 	stw	r2,8(sp)
 10062ec:	d8800e17 	ldw	r2,56(sp)
 10062f0:	017fffc4 	movi	r5,-1
 10062f4:	11000204 	addi	r4,r2,8
 10062f8:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10062fc:	00bff216 	blt	zero,r2,10062c8 <_ZNSsD2Ev+0x64>
 1006300:	d9000e17 	ldw	r4,56(sp)
 1006304:	d80b883a 	mov	r5,sp
 1006308:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100630c:	003fee06 	br	10062c8 <_ZNSsD2Ev+0x64>
 1006310:	d9000317 	ldw	r4,12(sp)
 1006314:	00bfffc4 	movi	r2,-1
 1006318:	d8800215 	stw	r2,8(sp)
 100631c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>

01006320 <_ZNSs9_M_mutateEmmm>:
 1006320:	deffe704 	addi	sp,sp,-100
 1006324:	00804074 	movhi	r2,257
 1006328:	10a0b504 	addi	r2,r2,-32044
 100632c:	00c040b4 	movhi	r3,258
 1006330:	18fb48c4 	addi	r3,r3,-4829
 1006334:	d8800715 	stw	r2,28(sp)
 1006338:	d9001215 	stw	r4,72(sp)
 100633c:	00804034 	movhi	r2,256
 1006340:	10995204 	addi	r2,r2,25928
 1006344:	d9000104 	addi	r4,sp,4
 1006348:	d8c00815 	stw	r3,32(sp)
 100634c:	d8800a15 	stw	r2,40(sp)
 1006350:	d9801415 	stw	r6,80(sp)
 1006354:	d9401315 	stw	r5,76(sp)
 1006358:	d9c01515 	stw	r7,84(sp)
 100635c:	dfc01815 	stw	ra,96(sp)
 1006360:	df001715 	stw	fp,92(sp)
 1006364:	ddc01615 	stw	r23,88(sp)
 1006368:	dec00915 	stw	sp,36(sp)
 100636c:	dec00b15 	stw	sp,44(sp)
 1006370:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1006374:	d8801217 	ldw	r2,72(sp)
 1006378:	d9c01517 	ldw	r7,84(sp)
 100637c:	11800017 	ldw	r6,0(r2)
 1006380:	313ffd04 	addi	r4,r6,-12
 1006384:	20800017 	ldw	r2,0(r4)
 1006388:	21400117 	ldw	r5,4(r4)
 100638c:	11c7883a 	add	r3,r2,r7
 1006390:	d9c01317 	ldw	r7,76(sp)
 1006394:	11c5c83a 	sub	r2,r2,r7
 1006398:	d9c01417 	ldw	r7,80(sp)
 100639c:	19c7c83a 	sub	r3,r3,r7
 10063a0:	11c5c83a 	sub	r2,r2,r7
 10063a4:	d8c01115 	stw	r3,68(sp)
 10063a8:	d8801015 	stw	r2,64(sp)
 10063ac:	28c00236 	bltu	r5,r3,10063b8 <_ZNSs9_M_mutateEmmm+0x98>
 10063b0:	20800217 	ldw	r2,8(r4)
 10063b4:	0080240e 	bge	zero,r2,1006448 <_ZNSs9_M_mutateEmmm+0x128>
 10063b8:	00800044 	movi	r2,1
 10063bc:	d8800215 	stw	r2,8(sp)
 10063c0:	d9001117 	ldw	r4,68(sp)
 10063c4:	d80d883a 	mov	r6,sp
 10063c8:	10042600 	call	1004260 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 10063cc:	d8c01317 	ldw	r3,76(sp)
 10063d0:	d8800f15 	stw	r2,60(sp)
 10063d4:	18003c1e 	bne	r3,zero,10064c8 <_ZNSs9_M_mutateEmmm+0x1a8>
 10063d8:	d8c01017 	ldw	r3,64(sp)
 10063dc:	1800291e 	bne	r3,zero,1006484 <_ZNSs9_M_mutateEmmm+0x164>
 10063e0:	d8c01217 	ldw	r3,72(sp)
 10063e4:	18800017 	ldw	r2,0(r3)
 10063e8:	00c040b4 	movhi	r3,258
 10063ec:	18dbd604 	addi	r3,r3,28504
 10063f0:	10bffd04 	addi	r2,r2,-12
 10063f4:	d8800e15 	stw	r2,56(sp)
 10063f8:	10c0481e 	bne	r2,r3,100651c <_ZNSs9_M_mutateEmmm+0x1fc>
 10063fc:	d9c00f17 	ldw	r7,60(sp)
 1006400:	d8c01217 	ldw	r3,72(sp)
 1006404:	38800304 	addi	r2,r7,12
 1006408:	18800015 	stw	r2,0(r3)
 100640c:	d9401217 	ldw	r5,72(sp)
 1006410:	d9c01117 	ldw	r7,68(sp)
 1006414:	d9000104 	addi	r4,sp,4
 1006418:	28800017 	ldw	r2,0(r5)
 100641c:	10bffd04 	addi	r2,r2,-12
 1006420:	11c7883a 	add	r3,r2,r7
 1006424:	10000215 	stw	zero,8(r2)
 1006428:	11c00015 	stw	r7,0(r2)
 100642c:	18000305 	stb	zero,12(r3)
 1006430:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1006434:	dfc01817 	ldw	ra,96(sp)
 1006438:	df001717 	ldw	fp,92(sp)
 100643c:	ddc01617 	ldw	r23,88(sp)
 1006440:	dec01904 	addi	sp,sp,100
 1006444:	f800283a 	ret
 1006448:	d9001017 	ldw	r4,64(sp)
 100644c:	203fef26 	beq	r4,zero,100640c <_ZNSs9_M_mutateEmmm+0xec>
 1006450:	d9001517 	ldw	r4,84(sp)
 1006454:	d9401417 	ldw	r5,80(sp)
 1006458:	217fec26 	beq	r4,r5,100640c <_ZNSs9_M_mutateEmmm+0xec>
 100645c:	d9c01317 	ldw	r7,76(sp)
 1006460:	00800044 	movi	r2,1
 1006464:	31c7883a 	add	r3,r6,r7
 1006468:	194b883a 	add	r5,r3,r5
 100646c:	1909883a 	add	r4,r3,r4
 1006470:	d8c01017 	ldw	r3,64(sp)
 1006474:	1880261e 	bne	r3,r2,1006510 <_ZNSs9_M_mutateEmmm+0x1f0>
 1006478:	28800003 	ldbu	r2,0(r5)
 100647c:	20800005 	stb	r2,0(r4)
 1006480:	003fe206 	br	100640c <_ZNSs9_M_mutateEmmm+0xec>
 1006484:	d9001217 	ldw	r4,72(sp)
 1006488:	d9400f17 	ldw	r5,60(sp)
 100648c:	d9c01317 	ldw	r7,76(sp)
 1006490:	20800017 	ldw	r2,0(r4)
 1006494:	28c00304 	addi	r3,r5,12
 1006498:	19c7883a 	add	r3,r3,r7
 100649c:	3885883a 	add	r2,r7,r2
 10064a0:	d9401517 	ldw	r5,84(sp)
 10064a4:	d9c01417 	ldw	r7,80(sp)
 10064a8:	1949883a 	add	r4,r3,r5
 10064ac:	11cb883a 	add	r5,r2,r7
 10064b0:	d8801017 	ldw	r2,64(sp)
 10064b4:	00c00044 	movi	r3,1
 10064b8:	10c00d26 	beq	r2,r3,10064f0 <_ZNSs9_M_mutateEmmm+0x1d0>
 10064bc:	d9801017 	ldw	r6,64(sp)
 10064c0:	1009fa80 	call	1009fa8 <memcpy>
 10064c4:	003fc606 	br	10063e0 <_ZNSs9_M_mutateEmmm+0xc0>
 10064c8:	d9c01217 	ldw	r7,72(sp)
 10064cc:	11000304 	addi	r4,r2,12
 10064d0:	00800044 	movi	r2,1
 10064d4:	39400017 	ldw	r5,0(r7)
 10064d8:	18800826 	beq	r3,r2,10064fc <_ZNSs9_M_mutateEmmm+0x1dc>
 10064dc:	d9801317 	ldw	r6,76(sp)
 10064e0:	1009fa80 	call	1009fa8 <memcpy>
 10064e4:	d8c01017 	ldw	r3,64(sp)
 10064e8:	183fbd26 	beq	r3,zero,10063e0 <_ZNSs9_M_mutateEmmm+0xc0>
 10064ec:	003fe506 	br	1006484 <_ZNSs9_M_mutateEmmm+0x164>
 10064f0:	28800003 	ldbu	r2,0(r5)
 10064f4:	20800005 	stb	r2,0(r4)
 10064f8:	003fb906 	br	10063e0 <_ZNSs9_M_mutateEmmm+0xc0>
 10064fc:	28800003 	ldbu	r2,0(r5)
 1006500:	20800005 	stb	r2,0(r4)
 1006504:	d8c01017 	ldw	r3,64(sp)
 1006508:	183fb526 	beq	r3,zero,10063e0 <_ZNSs9_M_mutateEmmm+0xc0>
 100650c:	003fdd06 	br	1006484 <_ZNSs9_M_mutateEmmm+0x164>
 1006510:	d9801017 	ldw	r6,64(sp)
 1006514:	100a0480 	call	100a048 <memmove>
 1006518:	003fbc06 	br	100640c <_ZNSs9_M_mutateEmmm+0xec>
 100651c:	d9400e17 	ldw	r5,56(sp)
 1006520:	00800044 	movi	r2,1
 1006524:	d8800215 	stw	r2,8(sp)
 1006528:	29000204 	addi	r4,r5,8
 100652c:	017fffc4 	movi	r5,-1
 1006530:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006534:	00bfb116 	blt	zero,r2,10063fc <_ZNSs9_M_mutateEmmm+0xdc>
 1006538:	d9000e17 	ldw	r4,56(sp)
 100653c:	d80b883a 	mov	r5,sp
 1006540:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006544:	003fad06 	br	10063fc <_ZNSs9_M_mutateEmmm+0xdc>
 1006548:	d9000317 	ldw	r4,12(sp)
 100654c:	00bfffc4 	movi	r2,-1
 1006550:	d8800215 	stw	r2,8(sp)
 1006554:	10094540 	call	1009454 <_Unwind_SjLj_Resume>

01006558 <_ZNSs15_M_replace_safeEmmPKcm>:
 1006558:	defffb04 	addi	sp,sp,-20
 100655c:	dc000015 	stw	r16,0(sp)
 1006560:	dc000517 	ldw	r16,20(sp)
 1006564:	dcc00315 	stw	r19,12(sp)
 1006568:	3827883a 	mov	r19,r7
 100656c:	800f883a 	mov	r7,r16
 1006570:	dc800215 	stw	r18,8(sp)
 1006574:	dc400115 	stw	r17,4(sp)
 1006578:	dfc00415 	stw	ra,16(sp)
 100657c:	2025883a 	mov	r18,r4
 1006580:	2823883a 	mov	r17,r5
 1006584:	10063200 	call	1006320 <_ZNSs9_M_mutateEmmm>
 1006588:	80000826 	beq	r16,zero,10065ac <_ZNSs15_M_replace_safeEmmPKcm+0x54>
 100658c:	90800017 	ldw	r2,0(r18)
 1006590:	980b883a 	mov	r5,r19
 1006594:	800d883a 	mov	r6,r16
 1006598:	8887883a 	add	r3,r17,r2
 100659c:	00800044 	movi	r2,1
 10065a0:	1809883a 	mov	r4,r3
 10065a4:	80800926 	beq	r16,r2,10065cc <_ZNSs15_M_replace_safeEmmPKcm+0x74>
 10065a8:	1009fa80 	call	1009fa8 <memcpy>
 10065ac:	9005883a 	mov	r2,r18
 10065b0:	dfc00417 	ldw	ra,16(sp)
 10065b4:	dcc00317 	ldw	r19,12(sp)
 10065b8:	dc800217 	ldw	r18,8(sp)
 10065bc:	dc400117 	ldw	r17,4(sp)
 10065c0:	dc000017 	ldw	r16,0(sp)
 10065c4:	dec00504 	addi	sp,sp,20
 10065c8:	f800283a 	ret
 10065cc:	98800003 	ldbu	r2,0(r19)
 10065d0:	18800005 	stb	r2,0(r3)
 10065d4:	9005883a 	mov	r2,r18
 10065d8:	dfc00417 	ldw	ra,16(sp)
 10065dc:	dcc00317 	ldw	r19,12(sp)
 10065e0:	dc800217 	ldw	r18,8(sp)
 10065e4:	dc400117 	ldw	r17,4(sp)
 10065e8:	dc000017 	ldw	r16,0(sp)
 10065ec:	dec00504 	addi	sp,sp,20
 10065f0:	f800283a 	ret

010065f4 <_ZNSs6assignEPKcm>:
 10065f4:	defffc04 	addi	sp,sp,-16
 10065f8:	00900034 	movhi	r2,16384
 10065fc:	10bfff04 	addi	r2,r2,-4
 1006600:	dc400215 	stw	r17,8(sp)
 1006604:	dc000115 	stw	r16,4(sp)
 1006608:	dfc00315 	stw	ra,12(sp)
 100660c:	3023883a 	mov	r17,r6
 1006610:	2021883a 	mov	r16,r4
 1006614:	280f883a 	mov	r7,r5
 1006618:	11803136 	bltu	r2,r6,10066e0 <_ZNSs6assignEPKcm+0xec>
 100661c:	21000017 	ldw	r4,0(r4)
 1006620:	29000c2e 	bgeu	r5,r4,1006654 <_ZNSs6assignEPKcm+0x60>
 1006624:	21bffd17 	ldw	r6,-12(r4)
 1006628:	000b883a 	mov	r5,zero
 100662c:	8009883a 	mov	r4,r16
 1006630:	dc400015 	stw	r17,0(sp)
 1006634:	10065580 	call	1006558 <_ZNSs15_M_replace_safeEmmPKcm>
 1006638:	1021883a 	mov	r16,r2
 100663c:	8005883a 	mov	r2,r16
 1006640:	dfc00317 	ldw	ra,12(sp)
 1006644:	dc400217 	ldw	r17,8(sp)
 1006648:	dc000117 	ldw	r16,4(sp)
 100664c:	dec00404 	addi	sp,sp,16
 1006650:	f800283a 	ret
 1006654:	20bffd17 	ldw	r2,-12(r4)
 1006658:	20fffd04 	addi	r3,r4,-12
 100665c:	2085883a 	add	r2,r4,r2
 1006660:	117ff036 	bltu	r2,r5,1006624 <_ZNSs6assignEPKcm+0x30>
 1006664:	18800217 	ldw	r2,8(r3)
 1006668:	00bfee16 	blt	zero,r2,1006624 <_ZNSs6assignEPKcm+0x30>
 100666c:	2905c83a 	sub	r2,r5,r4
 1006670:	11800f36 	bltu	r2,r6,10066b0 <_ZNSs6assignEPKcm+0xbc>
 1006674:	00800044 	movi	r2,1
 1006678:	88801526 	beq	r17,r2,10066d0 <_ZNSs6assignEPKcm+0xdc>
 100667c:	1009fa80 	call	1009fa8 <memcpy>
 1006680:	81000017 	ldw	r4,0(r16)
 1006684:	20bffd04 	addi	r2,r4,-12
 1006688:	1447883a 	add	r3,r2,r17
 100668c:	10000215 	stw	zero,8(r2)
 1006690:	247ffd15 	stw	r17,-12(r4)
 1006694:	8005883a 	mov	r2,r16
 1006698:	18000305 	stb	zero,12(r3)
 100669c:	dfc00317 	ldw	ra,12(sp)
 10066a0:	dc400217 	ldw	r17,8(sp)
 10066a4:	dc000117 	ldw	r16,4(sp)
 10066a8:	dec00404 	addi	sp,sp,16
 10066ac:	f800283a 	ret
 10066b0:	103ff426 	beq	r2,zero,1006684 <_ZNSs6assignEPKcm+0x90>
 10066b4:	00800044 	movi	r2,1
 10066b8:	88800526 	beq	r17,r2,10066d0 <_ZNSs6assignEPKcm+0xdc>
 10066bc:	380b883a 	mov	r5,r7
 10066c0:	880d883a 	mov	r6,r17
 10066c4:	100a0480 	call	100a048 <memmove>
 10066c8:	81000017 	ldw	r4,0(r16)
 10066cc:	003fed06 	br	1006684 <_ZNSs6assignEPKcm+0x90>
 10066d0:	38800003 	ldbu	r2,0(r7)
 10066d4:	20800005 	stb	r2,0(r4)
 10066d8:	81000017 	ldw	r4,0(r16)
 10066dc:	003fe906 	br	1006684 <_ZNSs6assignEPKcm+0x90>
 10066e0:	010040b4 	movhi	r4,258
 10066e4:	213c4f04 	addi	r4,r4,-3780
 10066e8:	10025600 	call	1002560 <_ZSt20__throw_length_errorPKc>

010066ec <_ZNSs6assignEPKc>:
 10066ec:	defffd04 	addi	sp,sp,-12
 10066f0:	dcc00115 	stw	r19,4(sp)
 10066f4:	dc400015 	stw	r17,0(sp)
 10066f8:	dfc00215 	stw	ra,8(sp)
 10066fc:	2023883a 	mov	r17,r4
 1006700:	2809883a 	mov	r4,r5
 1006704:	2827883a 	mov	r19,r5
 1006708:	100a5f80 	call	100a5f8 <strlen>
 100670c:	980b883a 	mov	r5,r19
 1006710:	8809883a 	mov	r4,r17
 1006714:	100d883a 	mov	r6,r2
 1006718:	dfc00217 	ldw	ra,8(sp)
 100671c:	dcc00117 	ldw	r19,4(sp)
 1006720:	dc400017 	ldw	r17,0(sp)
 1006724:	dec00304 	addi	sp,sp,12
 1006728:	10065f41 	jmpi	10065f4 <_ZNSs6assignEPKcm>

0100672c <_ZNSs6assignERKSsmm>:
 100672c:	29400017 	ldw	r5,0(r5)
 1006730:	deffff04 	addi	sp,sp,-4
 1006734:	dfc00015 	stw	ra,0(sp)
 1006738:	28bffd17 	ldw	r2,-12(r5)
 100673c:	11800c36 	bltu	r2,r6,1006770 <_ZNSs6assignERKSsmm+0x44>
 1006740:	1185c83a 	sub	r2,r2,r6
 1006744:	298b883a 	add	r5,r5,r6
 1006748:	11c00436 	bltu	r2,r7,100675c <_ZNSs6assignERKSsmm+0x30>
 100674c:	380d883a 	mov	r6,r7
 1006750:	dfc00017 	ldw	ra,0(sp)
 1006754:	dec00104 	addi	sp,sp,4
 1006758:	10065f41 	jmpi	10065f4 <_ZNSs6assignEPKcm>
 100675c:	100f883a 	mov	r7,r2
 1006760:	380d883a 	mov	r6,r7
 1006764:	dfc00017 	ldw	ra,0(sp)
 1006768:	dec00104 	addi	sp,sp,4
 100676c:	10065f41 	jmpi	10065f4 <_ZNSs6assignEPKcm>
 1006770:	010040b4 	movhi	r4,258
 1006774:	213c4f04 	addi	r4,r4,-3780
 1006778:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

0100677c <_ZNSsaSEPKc>:
 100677c:	defffd04 	addi	sp,sp,-12
 1006780:	dcc00115 	stw	r19,4(sp)
 1006784:	dc400015 	stw	r17,0(sp)
 1006788:	dfc00215 	stw	ra,8(sp)
 100678c:	2023883a 	mov	r17,r4
 1006790:	2809883a 	mov	r4,r5
 1006794:	2827883a 	mov	r19,r5
 1006798:	100a5f80 	call	100a5f8 <strlen>
 100679c:	980b883a 	mov	r5,r19
 10067a0:	8809883a 	mov	r4,r17
 10067a4:	100d883a 	mov	r6,r2
 10067a8:	dfc00217 	ldw	ra,8(sp)
 10067ac:	dcc00117 	ldw	r19,4(sp)
 10067b0:	dc400017 	ldw	r17,0(sp)
 10067b4:	dec00304 	addi	sp,sp,12
 10067b8:	10065f41 	jmpi	10065f4 <_ZNSs6assignEPKcm>

010067bc <_ZNSs14_M_replace_auxEmmmc>:
 10067bc:	20800017 	ldw	r2,0(r4)
 10067c0:	defffb04 	addi	sp,sp,-20
 10067c4:	dcc00315 	stw	r19,12(sp)
 10067c8:	10fffd17 	ldw	r3,-12(r2)
 10067cc:	00900034 	movhi	r2,16384
 10067d0:	10bfff04 	addi	r2,r2,-4
 10067d4:	dc800215 	stw	r18,8(sp)
 10067d8:	1987c83a 	sub	r3,r3,r6
 10067dc:	10c5c83a 	sub	r2,r2,r3
 10067e0:	dc400115 	stw	r17,4(sp)
 10067e4:	dc000015 	stw	r16,0(sp)
 10067e8:	dfc00415 	stw	ra,16(sp)
 10067ec:	2023883a 	mov	r17,r4
 10067f0:	3821883a 	mov	r16,r7
 10067f4:	2827883a 	mov	r19,r5
 10067f8:	dc800503 	ldbu	r18,20(sp)
 10067fc:	11c01f36 	bltu	r2,r7,100687c <_ZNSs14_M_replace_auxEmmmc+0xc0>
 1006800:	10063200 	call	1006320 <_ZNSs9_M_mutateEmmm>
 1006804:	80000c26 	beq	r16,zero,1006838 <_ZNSs14_M_replace_auxEmmmc+0x7c>
 1006808:	88800017 	ldw	r2,0(r17)
 100680c:	90c03fcc 	andi	r3,r18,255
 1006810:	18c0201c 	xori	r3,r3,128
 1006814:	9889883a 	add	r4,r19,r2
 1006818:	00800044 	movi	r2,1
 100681c:	18ffe004 	addi	r3,r3,-128
 1006820:	80800d26 	beq	r16,r2,1006858 <_ZNSs14_M_replace_auxEmmmc+0x9c>
 1006824:	19403fcc 	andi	r5,r3,255
 1006828:	2940201c 	xori	r5,r5,128
 100682c:	297fe004 	addi	r5,r5,-128
 1006830:	800d883a 	mov	r6,r16
 1006834:	100a1280 	call	100a128 <memset>
 1006838:	8805883a 	mov	r2,r17
 100683c:	dfc00417 	ldw	ra,16(sp)
 1006840:	dcc00317 	ldw	r19,12(sp)
 1006844:	dc800217 	ldw	r18,8(sp)
 1006848:	dc400117 	ldw	r17,4(sp)
 100684c:	dc000017 	ldw	r16,0(sp)
 1006850:	dec00504 	addi	sp,sp,20
 1006854:	f800283a 	ret
 1006858:	8805883a 	mov	r2,r17
 100685c:	20c00005 	stb	r3,0(r4)
 1006860:	dfc00417 	ldw	ra,16(sp)
 1006864:	dcc00317 	ldw	r19,12(sp)
 1006868:	dc800217 	ldw	r18,8(sp)
 100686c:	dc400117 	ldw	r17,4(sp)
 1006870:	dc000017 	ldw	r16,0(sp)
 1006874:	dec00504 	addi	sp,sp,20
 1006878:	f800283a 	ret
 100687c:	010040b4 	movhi	r4,258
 1006880:	213c5504 	addi	r4,r4,-3756
 1006884:	10025600 	call	1002560 <_ZSt20__throw_length_errorPKc>

01006888 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_mc>:
 1006888:	20800017 	ldw	r2,0(r4)
 100688c:	d8c00007 	ldb	r3,0(sp)
 1006890:	314dc83a 	sub	r6,r6,r5
 1006894:	288bc83a 	sub	r5,r5,r2
 1006898:	d8c00015 	stw	r3,0(sp)
 100689c:	10067bc1 	jmpi	10067bc <_ZNSs14_M_replace_auxEmmmc>

010068a0 <_ZNSs7replaceEmmmc>:
 10068a0:	20800017 	ldw	r2,0(r4)
 10068a4:	deffff04 	addi	sp,sp,-4
 10068a8:	dfc00015 	stw	ra,0(sp)
 10068ac:	10fffd17 	ldw	r3,-12(r2)
 10068b0:	d8800103 	ldbu	r2,4(sp)
 10068b4:	19401136 	bltu	r3,r5,10068fc <_ZNSs7replaceEmmmc+0x5c>
 10068b8:	1947c83a 	sub	r3,r3,r5
 10068bc:	19800736 	bltu	r3,r6,10068dc <_ZNSs7replaceEmmmc+0x3c>
 10068c0:	10803fcc 	andi	r2,r2,255
 10068c4:	1080201c 	xori	r2,r2,128
 10068c8:	10bfe004 	addi	r2,r2,-128
 10068cc:	d8800115 	stw	r2,4(sp)
 10068d0:	dfc00017 	ldw	ra,0(sp)
 10068d4:	dec00104 	addi	sp,sp,4
 10068d8:	10067bc1 	jmpi	10067bc <_ZNSs14_M_replace_auxEmmmc>
 10068dc:	10803fcc 	andi	r2,r2,255
 10068e0:	1080201c 	xori	r2,r2,128
 10068e4:	10bfe004 	addi	r2,r2,-128
 10068e8:	180d883a 	mov	r6,r3
 10068ec:	d8800115 	stw	r2,4(sp)
 10068f0:	dfc00017 	ldw	ra,0(sp)
 10068f4:	dec00104 	addi	sp,sp,4
 10068f8:	10067bc1 	jmpi	10067bc <_ZNSs14_M_replace_auxEmmmc>
 10068fc:	010040b4 	movhi	r4,258
 1006900:	213c5d04 	addi	r4,r4,-3724
 1006904:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

01006908 <_ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc>:
 1006908:	20800017 	ldw	r2,0(r4)
 100690c:	defffc04 	addi	sp,sp,-16
 1006910:	30c03fcc 	andi	r3,r6,255
 1006914:	dc000115 	stw	r16,4(sp)
 1006918:	18c0201c 	xori	r3,r3,128
 100691c:	28a1c83a 	sub	r16,r5,r2
 1006920:	dc400215 	stw	r17,8(sp)
 1006924:	18ffe004 	addi	r3,r3,-128
 1006928:	2023883a 	mov	r17,r4
 100692c:	01c00044 	movi	r7,1
 1006930:	800b883a 	mov	r5,r16
 1006934:	000d883a 	mov	r6,zero
 1006938:	d8c00015 	stw	r3,0(sp)
 100693c:	dfc00315 	stw	ra,12(sp)
 1006940:	10067bc0 	call	10067bc <_ZNSs14_M_replace_auxEmmmc>
 1006944:	88800017 	ldw	r2,0(r17)
 1006948:	00ffffc4 	movi	r3,-1
 100694c:	10ffff15 	stw	r3,-4(r2)
 1006950:	1405883a 	add	r2,r2,r16
 1006954:	dfc00317 	ldw	ra,12(sp)
 1006958:	dc400217 	ldw	r17,8(sp)
 100695c:	dc000117 	ldw	r16,4(sp)
 1006960:	dec00404 	addi	sp,sp,16
 1006964:	f800283a 	ret

01006968 <_ZNSs6insertEmmc>:
 1006968:	20c00017 	ldw	r3,0(r4)
 100696c:	defffe04 	addi	sp,sp,-8
 1006970:	dfc00115 	stw	ra,4(sp)
 1006974:	18bffd17 	ldw	r2,-12(r3)
 1006978:	11400a36 	bltu	r2,r5,10069a4 <_ZNSs6insertEmmc+0x3c>
 100697c:	38803fcc 	andi	r2,r7,255
 1006980:	1080201c 	xori	r2,r2,128
 1006984:	300f883a 	mov	r7,r6
 1006988:	10bfe004 	addi	r2,r2,-128
 100698c:	000d883a 	mov	r6,zero
 1006990:	d8800015 	stw	r2,0(sp)
 1006994:	10067bc0 	call	10067bc <_ZNSs14_M_replace_auxEmmmc>
 1006998:	dfc00117 	ldw	ra,4(sp)
 100699c:	dec00204 	addi	sp,sp,8
 10069a0:	f800283a 	ret
 10069a4:	010040b4 	movhi	r4,258
 10069a8:	213c6304 	addi	r4,r4,-3700
 10069ac:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

010069b0 <_ZNSs6assignEmc>:
 10069b0:	20800017 	ldw	r2,0(r4)
 10069b4:	30c03fcc 	andi	r3,r6,255
 10069b8:	18c0201c 	xori	r3,r3,128
 10069bc:	11bffd17 	ldw	r6,-12(r2)
 10069c0:	defffe04 	addi	sp,sp,-8
 10069c4:	280f883a 	mov	r7,r5
 10069c8:	18ffe004 	addi	r3,r3,-128
 10069cc:	000b883a 	mov	r5,zero
 10069d0:	dfc00115 	stw	ra,4(sp)
 10069d4:	d8c00015 	stw	r3,0(sp)
 10069d8:	10067bc0 	call	10067bc <_ZNSs14_M_replace_auxEmmmc>
 10069dc:	dfc00117 	ldw	ra,4(sp)
 10069e0:	dec00204 	addi	sp,sp,8
 10069e4:	f800283a 	ret

010069e8 <_ZNSsaSEc>:
 10069e8:	20800017 	ldw	r2,0(r4)
 10069ec:	28c03fcc 	andi	r3,r5,255
 10069f0:	18c0201c 	xori	r3,r3,128
 10069f4:	11bffd17 	ldw	r6,-12(r2)
 10069f8:	defffd04 	addi	sp,sp,-12
 10069fc:	18ffe004 	addi	r3,r3,-128
 1006a00:	01c00044 	movi	r7,1
 1006a04:	000b883a 	mov	r5,zero
 1006a08:	dc400115 	stw	r17,4(sp)
 1006a0c:	dfc00215 	stw	ra,8(sp)
 1006a10:	2023883a 	mov	r17,r4
 1006a14:	d8c00015 	stw	r3,0(sp)
 1006a18:	10067bc0 	call	10067bc <_ZNSs14_M_replace_auxEmmmc>
 1006a1c:	8805883a 	mov	r2,r17
 1006a20:	dfc00217 	ldw	ra,8(sp)
 1006a24:	dc400117 	ldw	r17,4(sp)
 1006a28:	dec00304 	addi	sp,sp,12
 1006a2c:	f800283a 	ret

01006a30 <_ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEmc>:
 1006a30:	20800017 	ldw	r2,0(r4)
 1006a34:	3a003fcc 	andi	r8,r7,255
 1006a38:	4200201c 	xori	r8,r8,128
 1006a3c:	defffe04 	addi	sp,sp,-8
 1006a40:	423fe004 	addi	r8,r8,-128
 1006a44:	300f883a 	mov	r7,r6
 1006a48:	288bc83a 	sub	r5,r5,r2
 1006a4c:	000d883a 	mov	r6,zero
 1006a50:	dfc00115 	stw	ra,4(sp)
 1006a54:	da000015 	stw	r8,0(sp)
 1006a58:	10067bc0 	call	10067bc <_ZNSs14_M_replace_auxEmmmc>
 1006a5c:	dfc00117 	ldw	ra,4(sp)
 1006a60:	dec00204 	addi	sp,sp,8
 1006a64:	f800283a 	ret

01006a68 <_ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_>:
 1006a68:	20800017 	ldw	r2,0(r4)
 1006a6c:	defffd04 	addi	sp,sp,-12
 1006a70:	dc400015 	stw	r17,0(sp)
 1006a74:	28a3c83a 	sub	r17,r5,r2
 1006a78:	dc800115 	stw	r18,4(sp)
 1006a7c:	314dc83a 	sub	r6,r6,r5
 1006a80:	2025883a 	mov	r18,r4
 1006a84:	880b883a 	mov	r5,r17
 1006a88:	000f883a 	mov	r7,zero
 1006a8c:	dfc00215 	stw	ra,8(sp)
 1006a90:	10063200 	call	1006320 <_ZNSs9_M_mutateEmmm>
 1006a94:	90800017 	ldw	r2,0(r18)
 1006a98:	00ffffc4 	movi	r3,-1
 1006a9c:	10ffff15 	stw	r3,-4(r2)
 1006aa0:	1445883a 	add	r2,r2,r17
 1006aa4:	dfc00217 	ldw	ra,8(sp)
 1006aa8:	dc800117 	ldw	r18,4(sp)
 1006aac:	dc400017 	ldw	r17,0(sp)
 1006ab0:	dec00304 	addi	sp,sp,12
 1006ab4:	f800283a 	ret

01006ab8 <_ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE>:
 1006ab8:	20800017 	ldw	r2,0(r4)
 1006abc:	defffd04 	addi	sp,sp,-12
 1006ac0:	dc000015 	stw	r16,0(sp)
 1006ac4:	28a1c83a 	sub	r16,r5,r2
 1006ac8:	dc400115 	stw	r17,4(sp)
 1006acc:	01800044 	movi	r6,1
 1006ad0:	2023883a 	mov	r17,r4
 1006ad4:	000f883a 	mov	r7,zero
 1006ad8:	800b883a 	mov	r5,r16
 1006adc:	dfc00215 	stw	ra,8(sp)
 1006ae0:	10063200 	call	1006320 <_ZNSs9_M_mutateEmmm>
 1006ae4:	88800017 	ldw	r2,0(r17)
 1006ae8:	00ffffc4 	movi	r3,-1
 1006aec:	10ffff15 	stw	r3,-4(r2)
 1006af0:	1405883a 	add	r2,r2,r16
 1006af4:	dfc00217 	ldw	ra,8(sp)
 1006af8:	dc400117 	ldw	r17,4(sp)
 1006afc:	dc000017 	ldw	r16,0(sp)
 1006b00:	dec00304 	addi	sp,sp,12
 1006b04:	f800283a 	ret

01006b08 <_ZNSs5eraseEmm>:
 1006b08:	20800017 	ldw	r2,0(r4)
 1006b0c:	defffe04 	addi	sp,sp,-8
 1006b10:	dc000015 	stw	r16,0(sp)
 1006b14:	10bffd17 	ldw	r2,-12(r2)
 1006b18:	dfc00115 	stw	ra,4(sp)
 1006b1c:	2021883a 	mov	r16,r4
 1006b20:	11401136 	bltu	r2,r5,1006b68 <_ZNSs5eraseEmm+0x60>
 1006b24:	1145c83a 	sub	r2,r2,r5
 1006b28:	11800736 	bltu	r2,r6,1006b48 <_ZNSs5eraseEmm+0x40>
 1006b2c:	000f883a 	mov	r7,zero
 1006b30:	10063200 	call	1006320 <_ZNSs9_M_mutateEmmm>
 1006b34:	8005883a 	mov	r2,r16
 1006b38:	dfc00117 	ldw	ra,4(sp)
 1006b3c:	dc000017 	ldw	r16,0(sp)
 1006b40:	dec00204 	addi	sp,sp,8
 1006b44:	f800283a 	ret
 1006b48:	100d883a 	mov	r6,r2
 1006b4c:	000f883a 	mov	r7,zero
 1006b50:	10063200 	call	1006320 <_ZNSs9_M_mutateEmmm>
 1006b54:	8005883a 	mov	r2,r16
 1006b58:	dfc00117 	ldw	ra,4(sp)
 1006b5c:	dc000017 	ldw	r16,0(sp)
 1006b60:	dec00204 	addi	sp,sp,8
 1006b64:	f800283a 	ret
 1006b68:	010040b4 	movhi	r4,258
 1006b6c:	213c6904 	addi	r4,r4,-3676
 1006b70:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

01006b74 <_ZNSs6insertEmPKcm>:
 1006b74:	defff904 	addi	sp,sp,-28
 1006b78:	dc000115 	stw	r16,4(sp)
 1006b7c:	24000017 	ldw	r16,0(r4)
 1006b80:	dd000515 	stw	r20,20(sp)
 1006b84:	dcc00415 	stw	r19,16(sp)
 1006b88:	80fffd17 	ldw	r3,-12(r16)
 1006b8c:	dc800315 	stw	r18,12(sp)
 1006b90:	dc400215 	stw	r17,8(sp)
 1006b94:	dfc00615 	stw	ra,24(sp)
 1006b98:	3023883a 	mov	r17,r6
 1006b9c:	2029883a 	mov	r20,r4
 1006ba0:	2825883a 	mov	r18,r5
 1006ba4:	3827883a 	mov	r19,r7
 1006ba8:	81bffd04 	addi	r6,r16,-12
 1006bac:	19403d36 	bltu	r3,r5,1006ca4 <_ZNSs6insertEmPKcm+0x130>
 1006bb0:	00900034 	movhi	r2,16384
 1006bb4:	10bfff04 	addi	r2,r2,-4
 1006bb8:	10c5c83a 	sub	r2,r2,r3
 1006bbc:	11c03c36 	bltu	r2,r7,1006cb0 <_ZNSs6insertEmPKcm+0x13c>
 1006bc0:	8c00102e 	bgeu	r17,r16,1006c04 <_ZNSs6insertEmPKcm+0x90>
 1006bc4:	a009883a 	mov	r4,r20
 1006bc8:	900b883a 	mov	r5,r18
 1006bcc:	880f883a 	mov	r7,r17
 1006bd0:	000d883a 	mov	r6,zero
 1006bd4:	dcc00015 	stw	r19,0(sp)
 1006bd8:	10065580 	call	1006558 <_ZNSs15_M_replace_safeEmmPKcm>
 1006bdc:	1029883a 	mov	r20,r2
 1006be0:	a005883a 	mov	r2,r20
 1006be4:	dfc00617 	ldw	ra,24(sp)
 1006be8:	dd000517 	ldw	r20,20(sp)
 1006bec:	dcc00417 	ldw	r19,16(sp)
 1006bf0:	dc800317 	ldw	r18,12(sp)
 1006bf4:	dc400217 	ldw	r17,8(sp)
 1006bf8:	dc000117 	ldw	r16,4(sp)
 1006bfc:	dec00704 	addi	sp,sp,28
 1006c00:	f800283a 	ret
 1006c04:	80c5883a 	add	r2,r16,r3
 1006c08:	147fee36 	bltu	r2,r17,1006bc4 <_ZNSs6insertEmPKcm+0x50>
 1006c0c:	30800217 	ldw	r2,8(r6)
 1006c10:	00bfec16 	blt	zero,r2,1006bc4 <_ZNSs6insertEmPKcm+0x50>
 1006c14:	000d883a 	mov	r6,zero
 1006c18:	10063200 	call	1006320 <_ZNSs9_M_mutateEmmm>
 1006c1c:	a0c00017 	ldw	r3,0(r20)
 1006c20:	8c05c83a 	sub	r2,r17,r16
 1006c24:	188b883a 	add	r5,r3,r2
 1006c28:	1ca1883a 	add	r16,r3,r18
 1006c2c:	2cc7883a 	add	r3,r5,r19
 1006c30:	80c0062e 	bgeu	r16,r3,1006c4c <_ZNSs6insertEmPKcm+0xd8>
 1006c34:	2c000e36 	bltu	r5,r16,1006c70 <_ZNSs6insertEmPKcm+0xfc>
 1006c38:	00800044 	movi	r2,1
 1006c3c:	98801f1e 	bne	r19,r2,1006cbc <_ZNSs6insertEmPKcm+0x148>
 1006c40:	18800003 	ldbu	r2,0(r3)
 1006c44:	80800005 	stb	r2,0(r16)
 1006c48:	003fe506 	br	1006be0 <_ZNSs6insertEmPKcm+0x6c>
 1006c4c:	00800044 	movi	r2,1
 1006c50:	9880031e 	bne	r19,r2,1006c60 <_ZNSs6insertEmPKcm+0xec>
 1006c54:	28800003 	ldbu	r2,0(r5)
 1006c58:	80800005 	stb	r2,0(r16)
 1006c5c:	003fe006 	br	1006be0 <_ZNSs6insertEmPKcm+0x6c>
 1006c60:	8009883a 	mov	r4,r16
 1006c64:	980d883a 	mov	r6,r19
 1006c68:	1009fa80 	call	1009fa8 <memcpy>
 1006c6c:	003fdc06 	br	1006be0 <_ZNSs6insertEmPKcm+0x6c>
 1006c70:	8163c83a 	sub	r17,r16,r5
 1006c74:	00800044 	movi	r2,1
 1006c78:	8880171e 	bne	r17,r2,1006cd8 <_ZNSs6insertEmPKcm+0x164>
 1006c7c:	28800003 	ldbu	r2,0(r5)
 1006c80:	80800005 	stb	r2,0(r16)
 1006c84:	9c4dc83a 	sub	r6,r19,r17
 1006c88:	00800044 	movi	r2,1
 1006c8c:	84cb883a 	add	r5,r16,r19
 1006c90:	8449883a 	add	r4,r16,r17
 1006c94:	30800e1e 	bne	r6,r2,1006cd0 <_ZNSs6insertEmPKcm+0x15c>
 1006c98:	28800003 	ldbu	r2,0(r5)
 1006c9c:	20800005 	stb	r2,0(r4)
 1006ca0:	003fcf06 	br	1006be0 <_ZNSs6insertEmPKcm+0x6c>
 1006ca4:	010040b4 	movhi	r4,258
 1006ca8:	213c6304 	addi	r4,r4,-3700
 1006cac:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>
 1006cb0:	010040b4 	movhi	r4,258
 1006cb4:	213c6304 	addi	r4,r4,-3700
 1006cb8:	10025600 	call	1002560 <_ZSt20__throw_length_errorPKc>
 1006cbc:	8009883a 	mov	r4,r16
 1006cc0:	180b883a 	mov	r5,r3
 1006cc4:	980d883a 	mov	r6,r19
 1006cc8:	1009fa80 	call	1009fa8 <memcpy>
 1006ccc:	003fc406 	br	1006be0 <_ZNSs6insertEmPKcm+0x6c>
 1006cd0:	1009fa80 	call	1009fa8 <memcpy>
 1006cd4:	003fc206 	br	1006be0 <_ZNSs6insertEmPKcm+0x6c>
 1006cd8:	8009883a 	mov	r4,r16
 1006cdc:	880d883a 	mov	r6,r17
 1006ce0:	1009fa80 	call	1009fa8 <memcpy>
 1006ce4:	003fe706 	br	1006c84 <_ZNSs6insertEmPKcm+0x110>

01006ce8 <_ZNSs6insertEmPKc>:
 1006ce8:	defffc04 	addi	sp,sp,-16
 1006cec:	dd400215 	stw	r21,8(sp)
 1006cf0:	dcc00115 	stw	r19,4(sp)
 1006cf4:	dc400015 	stw	r17,0(sp)
 1006cf8:	2027883a 	mov	r19,r4
 1006cfc:	dfc00315 	stw	ra,12(sp)
 1006d00:	3009883a 	mov	r4,r6
 1006d04:	3023883a 	mov	r17,r6
 1006d08:	282b883a 	mov	r21,r5
 1006d0c:	100a5f80 	call	100a5f8 <strlen>
 1006d10:	a80b883a 	mov	r5,r21
 1006d14:	9809883a 	mov	r4,r19
 1006d18:	880d883a 	mov	r6,r17
 1006d1c:	100f883a 	mov	r7,r2
 1006d20:	dfc00317 	ldw	ra,12(sp)
 1006d24:	dd400217 	ldw	r21,8(sp)
 1006d28:	dcc00117 	ldw	r19,4(sp)
 1006d2c:	dc400017 	ldw	r17,0(sp)
 1006d30:	dec00404 	addi	sp,sp,16
 1006d34:	1006b741 	jmpi	1006b74 <_ZNSs6insertEmPKcm>

01006d38 <_ZNSs6insertEmRKSsmm>:
 1006d38:	31800017 	ldw	r6,0(r6)
 1006d3c:	deffff04 	addi	sp,sp,-4
 1006d40:	3805883a 	mov	r2,r7
 1006d44:	30fffd17 	ldw	r3,-12(r6)
 1006d48:	dfc00015 	stw	ra,0(sp)
 1006d4c:	d9c00117 	ldw	r7,4(sp)
 1006d50:	18800a36 	bltu	r3,r2,1006d7c <_ZNSs6insertEmRKSsmm+0x44>
 1006d54:	1887c83a 	sub	r3,r3,r2
 1006d58:	308d883a 	add	r6,r6,r2
 1006d5c:	19c00336 	bltu	r3,r7,1006d6c <_ZNSs6insertEmRKSsmm+0x34>
 1006d60:	dfc00017 	ldw	ra,0(sp)
 1006d64:	dec00104 	addi	sp,sp,4
 1006d68:	1006b741 	jmpi	1006b74 <_ZNSs6insertEmPKcm>
 1006d6c:	180f883a 	mov	r7,r3
 1006d70:	dfc00017 	ldw	ra,0(sp)
 1006d74:	dec00104 	addi	sp,sp,4
 1006d78:	1006b741 	jmpi	1006b74 <_ZNSs6insertEmPKcm>
 1006d7c:	010040b4 	movhi	r4,258
 1006d80:	213c6304 	addi	r4,r4,-3700
 1006d84:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

01006d88 <_ZNSs6insertEmRKSs>:
 1006d88:	31800017 	ldw	r6,0(r6)
 1006d8c:	31fffd17 	ldw	r7,-12(r6)
 1006d90:	1006b741 	jmpi	1006b74 <_ZNSs6insertEmPKcm>

01006d94 <_ZNSs5clearEv>:
 1006d94:	20800017 	ldw	r2,0(r4)
 1006d98:	000b883a 	mov	r5,zero
 1006d9c:	000f883a 	mov	r7,zero
 1006da0:	11bffd17 	ldw	r6,-12(r2)
 1006da4:	10063201 	jmpi	1006320 <_ZNSs9_M_mutateEmmm>

01006da8 <_ZNSs12_M_leak_hardEv>:
 1006da8:	22000017 	ldw	r8,0(r4)
 1006dac:	defffe04 	addi	sp,sp,-8
 1006db0:	008040b4 	movhi	r2,258
 1006db4:	109bd604 	addi	r2,r2,28504
 1006db8:	40fffd04 	addi	r3,r8,-12
 1006dbc:	dc000015 	stw	r16,0(sp)
 1006dc0:	dfc00115 	stw	ra,4(sp)
 1006dc4:	2021883a 	mov	r16,r4
 1006dc8:	18800726 	beq	r3,r2,1006de8 <_ZNSs12_M_leak_hardEv+0x40>
 1006dcc:	18800217 	ldw	r2,8(r3)
 1006dd0:	000b883a 	mov	r5,zero
 1006dd4:	000d883a 	mov	r6,zero
 1006dd8:	000f883a 	mov	r7,zero
 1006ddc:	00800616 	blt	zero,r2,1006df8 <_ZNSs12_M_leak_hardEv+0x50>
 1006de0:	00bfffc4 	movi	r2,-1
 1006de4:	40bfff15 	stw	r2,-4(r8)
 1006de8:	dfc00117 	ldw	ra,4(sp)
 1006dec:	dc000017 	ldw	r16,0(sp)
 1006df0:	dec00204 	addi	sp,sp,8
 1006df4:	f800283a 	ret
 1006df8:	10063200 	call	1006320 <_ZNSs9_M_mutateEmmm>
 1006dfc:	82000017 	ldw	r8,0(r16)
 1006e00:	003ff706 	br	1006de0 <_ZNSs12_M_leak_hardEv+0x38>

01006e04 <_ZNSs7_M_leakEv>:
 1006e04:	20800017 	ldw	r2,0(r4)
 1006e08:	10ffff17 	ldw	r3,-4(r2)
 1006e0c:	1800010e 	bge	r3,zero,1006e14 <_ZNSs7_M_leakEv+0x10>
 1006e10:	f800283a 	ret
 1006e14:	1006da81 	jmpi	1006da8 <_ZNSs12_M_leak_hardEv>

01006e18 <_ZNSs2atEm>:
 1006e18:	20c00017 	ldw	r3,0(r4)
 1006e1c:	defffd04 	addi	sp,sp,-12
 1006e20:	dc000015 	stw	r16,0(sp)
 1006e24:	18bffd17 	ldw	r2,-12(r3)
 1006e28:	2821883a 	mov	r16,r5
 1006e2c:	dc400115 	stw	r17,4(sp)
 1006e30:	dfc00215 	stw	ra,8(sp)
 1006e34:	2023883a 	mov	r17,r4
 1006e38:	197ffd04 	addi	r5,r3,-12
 1006e3c:	80800a2e 	bgeu	r16,r2,1006e68 <_ZNSs2atEm+0x50>
 1006e40:	28800217 	ldw	r2,8(r5)
 1006e44:	10000216 	blt	r2,zero,1006e50 <_ZNSs2atEm+0x38>
 1006e48:	1006da80 	call	1006da8 <_ZNSs12_M_leak_hardEv>
 1006e4c:	88c00017 	ldw	r3,0(r17)
 1006e50:	80c5883a 	add	r2,r16,r3
 1006e54:	dfc00217 	ldw	ra,8(sp)
 1006e58:	dc400117 	ldw	r17,4(sp)
 1006e5c:	dc000017 	ldw	r16,0(sp)
 1006e60:	dec00304 	addi	sp,sp,12
 1006e64:	f800283a 	ret
 1006e68:	010040b4 	movhi	r4,258
 1006e6c:	213c1b04 	addi	r4,r4,-3988
 1006e70:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

01006e74 <_ZNSsixEm>:
 1006e74:	20c00017 	ldw	r3,0(r4)
 1006e78:	defffd04 	addi	sp,sp,-12
 1006e7c:	dc400115 	stw	r17,4(sp)
 1006e80:	18bfff17 	ldw	r2,-4(r3)
 1006e84:	dc000015 	stw	r16,0(sp)
 1006e88:	dfc00215 	stw	ra,8(sp)
 1006e8c:	2021883a 	mov	r16,r4
 1006e90:	2823883a 	mov	r17,r5
 1006e94:	10000216 	blt	r2,zero,1006ea0 <_ZNSsixEm+0x2c>
 1006e98:	1006da80 	call	1006da8 <_ZNSs12_M_leak_hardEv>
 1006e9c:	80c00017 	ldw	r3,0(r16)
 1006ea0:	88c5883a 	add	r2,r17,r3
 1006ea4:	dfc00217 	ldw	ra,8(sp)
 1006ea8:	dc400117 	ldw	r17,4(sp)
 1006eac:	dc000017 	ldw	r16,0(sp)
 1006eb0:	dec00304 	addi	sp,sp,12
 1006eb4:	f800283a 	ret

01006eb8 <_ZNSs3endEv>:
 1006eb8:	20c00017 	ldw	r3,0(r4)
 1006ebc:	defffe04 	addi	sp,sp,-8
 1006ec0:	dc000015 	stw	r16,0(sp)
 1006ec4:	18bfff17 	ldw	r2,-4(r3)
 1006ec8:	dfc00115 	stw	ra,4(sp)
 1006ecc:	2021883a 	mov	r16,r4
 1006ed0:	10000216 	blt	r2,zero,1006edc <_ZNSs3endEv+0x24>
 1006ed4:	1006da80 	call	1006da8 <_ZNSs12_M_leak_hardEv>
 1006ed8:	80c00017 	ldw	r3,0(r16)
 1006edc:	18bffd17 	ldw	r2,-12(r3)
 1006ee0:	1885883a 	add	r2,r3,r2
 1006ee4:	dfc00117 	ldw	ra,4(sp)
 1006ee8:	dc000017 	ldw	r16,0(sp)
 1006eec:	dec00204 	addi	sp,sp,8
 1006ef0:	f800283a 	ret

01006ef4 <_ZNSs5beginEv>:
 1006ef4:	20c00017 	ldw	r3,0(r4)
 1006ef8:	defffe04 	addi	sp,sp,-8
 1006efc:	dc000015 	stw	r16,0(sp)
 1006f00:	18bfff17 	ldw	r2,-4(r3)
 1006f04:	dfc00115 	stw	ra,4(sp)
 1006f08:	2021883a 	mov	r16,r4
 1006f0c:	10000216 	blt	r2,zero,1006f18 <_ZNSs5beginEv+0x24>
 1006f10:	1006da80 	call	1006da8 <_ZNSs12_M_leak_hardEv>
 1006f14:	80c00017 	ldw	r3,0(r16)
 1006f18:	1805883a 	mov	r2,r3
 1006f1c:	dfc00117 	ldw	ra,4(sp)
 1006f20:	dc000017 	ldw	r16,0(sp)
 1006f24:	dec00204 	addi	sp,sp,8
 1006f28:	f800283a 	ret

01006f2c <_ZNSs4rendEv>:
 1006f2c:	28c00017 	ldw	r3,0(r5)
 1006f30:	defffd04 	addi	sp,sp,-12
 1006f34:	dc400115 	stw	r17,4(sp)
 1006f38:	18bfff17 	ldw	r2,-4(r3)
 1006f3c:	dc000015 	stw	r16,0(sp)
 1006f40:	2023883a 	mov	r17,r4
 1006f44:	dfc00215 	stw	ra,8(sp)
 1006f48:	2821883a 	mov	r16,r5
 1006f4c:	2809883a 	mov	r4,r5
 1006f50:	10000216 	blt	r2,zero,1006f5c <_ZNSs4rendEv+0x30>
 1006f54:	1006da80 	call	1006da8 <_ZNSs12_M_leak_hardEv>
 1006f58:	80c00017 	ldw	r3,0(r16)
 1006f5c:	8805883a 	mov	r2,r17
 1006f60:	88c00015 	stw	r3,0(r17)
 1006f64:	dfc00217 	ldw	ra,8(sp)
 1006f68:	dc400117 	ldw	r17,4(sp)
 1006f6c:	dc000017 	ldw	r16,0(sp)
 1006f70:	dec00304 	addi	sp,sp,12
 1006f74:	f800283a 	ret

01006f78 <_ZNSs6rbeginEv>:
 1006f78:	defffd04 	addi	sp,sp,-12
 1006f7c:	dc000015 	stw	r16,0(sp)
 1006f80:	2821883a 	mov	r16,r5
 1006f84:	29400017 	ldw	r5,0(r5)
 1006f88:	dc400115 	stw	r17,4(sp)
 1006f8c:	dfc00215 	stw	ra,8(sp)
 1006f90:	28bfff17 	ldw	r2,-4(r5)
 1006f94:	2023883a 	mov	r17,r4
 1006f98:	8009883a 	mov	r4,r16
 1006f9c:	10000216 	blt	r2,zero,1006fa8 <_ZNSs6rbeginEv+0x30>
 1006fa0:	1006da80 	call	1006da8 <_ZNSs12_M_leak_hardEv>
 1006fa4:	81400017 	ldw	r5,0(r16)
 1006fa8:	28fffd17 	ldw	r3,-12(r5)
 1006fac:	8805883a 	mov	r2,r17
 1006fb0:	28c7883a 	add	r3,r5,r3
 1006fb4:	88c00015 	stw	r3,0(r17)
 1006fb8:	dfc00217 	ldw	ra,8(sp)
 1006fbc:	dc400117 	ldw	r17,4(sp)
 1006fc0:	dc000017 	ldw	r16,0(sp)
 1006fc4:	dec00304 	addi	sp,sp,12
 1006fc8:	f800283a 	ret

01006fcc <_ZNSs6resizeEmc>:
 1006fcc:	20c00017 	ldw	r3,0(r4)
 1006fd0:	deffff04 	addi	sp,sp,-4
 1006fd4:	00900034 	movhi	r2,16384
 1006fd8:	10bfff04 	addi	r2,r2,-4
 1006fdc:	3011883a 	mov	r8,r6
 1006fe0:	dfc00015 	stw	ra,0(sp)
 1006fe4:	19bffd17 	ldw	r6,-12(r3)
 1006fe8:	11401136 	bltu	r2,r5,1007030 <_ZNSs6resizeEmc+0x64>
 1006fec:	31400936 	bltu	r6,r5,1007014 <_ZNSs6resizeEmc+0x48>
 1006ff0:	29800336 	bltu	r5,r6,1007000 <_ZNSs6resizeEmc+0x34>
 1006ff4:	dfc00017 	ldw	ra,0(sp)
 1006ff8:	dec00104 	addi	sp,sp,4
 1006ffc:	f800283a 	ret
 1007000:	314dc83a 	sub	r6,r6,r5
 1007004:	000f883a 	mov	r7,zero
 1007008:	dfc00017 	ldw	ra,0(sp)
 100700c:	dec00104 	addi	sp,sp,4
 1007010:	10063201 	jmpi	1006320 <_ZNSs9_M_mutateEmmm>
 1007014:	298bc83a 	sub	r5,r5,r6
 1007018:	41803fcc 	andi	r6,r8,255
 100701c:	3180201c 	xori	r6,r6,128
 1007020:	31bfe004 	addi	r6,r6,-128
 1007024:	dfc00017 	ldw	ra,0(sp)
 1007028:	dec00104 	addi	sp,sp,4
 100702c:	1005d081 	jmpi	1005d08 <_ZNSs6appendEmc>
 1007030:	010040b4 	movhi	r4,258
 1007034:	213c6e04 	addi	r4,r4,-3656
 1007038:	10025600 	call	1002560 <_ZSt20__throw_length_errorPKc>

0100703c <_ZNSs6resizeEm>:
 100703c:	000d883a 	mov	r6,zero
 1007040:	1006fcc1 	jmpi	1006fcc <_ZNSs6resizeEmc>

01007044 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_>:
 1007044:	deffe804 	addi	sp,sp,-96
 1007048:	00804074 	movhi	r2,257
 100704c:	10a0b504 	addi	r2,r2,-32044
 1007050:	00c040b4 	movhi	r3,258
 1007054:	18fb4a44 	addi	r3,r3,-4823
 1007058:	d8800715 	stw	r2,28(sp)
 100705c:	d9001115 	stw	r4,68(sp)
 1007060:	00804034 	movhi	r2,256
 1007064:	109c4704 	addi	r2,r2,28956
 1007068:	d9000104 	addi	r4,sp,4
 100706c:	d8c00815 	stw	r3,32(sp)
 1007070:	d9401215 	stw	r5,72(sp)
 1007074:	dfc01715 	stw	ra,92(sp)
 1007078:	d8800a15 	stw	r2,40(sp)
 100707c:	d9801315 	stw	r6,76(sp)
 1007080:	df001615 	stw	fp,88(sp)
 1007084:	ddc01515 	stw	r23,84(sp)
 1007088:	dec00915 	stw	sp,36(sp)
 100708c:	dec00b15 	stw	sp,44(sp)
 1007090:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1007094:	d9001217 	ldw	r4,72(sp)
 1007098:	100a5f80 	call	100a5f8 <strlen>
 100709c:	00c040b4 	movhi	r3,258
 10070a0:	18dbd604 	addi	r3,r3,28504
 10070a4:	d8801415 	stw	r2,80(sp)
 10070a8:	18800304 	addi	r2,r3,12
 10070ac:	d8c01117 	ldw	r3,68(sp)
 10070b0:	d9001117 	ldw	r4,68(sp)
 10070b4:	18800015 	stw	r2,0(r3)
 10070b8:	d8801317 	ldw	r2,76(sp)
 10070bc:	10c00017 	ldw	r3,0(r2)
 10070c0:	d8801117 	ldw	r2,68(sp)
 10070c4:	197ffd17 	ldw	r5,-12(r3)
 10070c8:	d8c01417 	ldw	r3,80(sp)
 10070cc:	d8800f15 	stw	r2,60(sp)
 10070d0:	00800084 	movi	r2,2
 10070d4:	d8800215 	stw	r2,8(sp)
 10070d8:	194b883a 	add	r5,r3,r5
 10070dc:	1005b580 	call	1005b58 <_ZNSs7reserveEm>
 10070e0:	d9001117 	ldw	r4,68(sp)
 10070e4:	d9401217 	ldw	r5,72(sp)
 10070e8:	d9801417 	ldw	r6,80(sp)
 10070ec:	1005de80 	call	1005de8 <_ZNSs6appendEPKcm>
 10070f0:	d9001117 	ldw	r4,68(sp)
 10070f4:	d9401317 	ldw	r5,76(sp)
 10070f8:	100605c0 	call	100605c <_ZNSs6appendERKSs>
 10070fc:	d9000104 	addi	r4,sp,4
 1007100:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1007104:	d8801117 	ldw	r2,68(sp)
 1007108:	dfc01717 	ldw	ra,92(sp)
 100710c:	df001617 	ldw	fp,88(sp)
 1007110:	ddc01517 	ldw	r23,84(sp)
 1007114:	dec01804 	addi	sp,sp,96
 1007118:	f800283a 	ret
 100711c:	d8c00217 	ldw	r3,8(sp)
 1007120:	00800044 	movi	r2,1
 1007124:	d9000317 	ldw	r4,12(sp)
 1007128:	18800326 	beq	r3,r2,1007138 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0xf4>
 100712c:	00bfffc4 	movi	r2,-1
 1007130:	d8800215 	stw	r2,8(sp)
 1007134:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1007138:	d8c00f17 	ldw	r3,60(sp)
 100713c:	d9001015 	stw	r4,64(sp)
 1007140:	18800017 	ldw	r2,0(r3)
 1007144:	00c040b4 	movhi	r3,258
 1007148:	18dbd604 	addi	r3,r3,28504
 100714c:	10bffd04 	addi	r2,r2,-12
 1007150:	d8800e15 	stw	r2,56(sp)
 1007154:	1880041e 	bne	r3,r2,1007168 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x124>
 1007158:	d9001017 	ldw	r4,64(sp)
 100715c:	00bfffc4 	movi	r2,-1
 1007160:	d8800215 	stw	r2,8(sp)
 1007164:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1007168:	00800044 	movi	r2,1
 100716c:	d8800215 	stw	r2,8(sp)
 1007170:	d8800e17 	ldw	r2,56(sp)
 1007174:	017fffc4 	movi	r5,-1
 1007178:	11000204 	addi	r4,r2,8
 100717c:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007180:	00bff516 	blt	zero,r2,1007158 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x114>
 1007184:	d9000e17 	ldw	r4,56(sp)
 1007188:	d80b883a 	mov	r5,sp
 100718c:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007190:	003ff106 	br	1007158 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x114>

01007194 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>:
 1007194:	deffe904 	addi	sp,sp,-92
 1007198:	00804074 	movhi	r2,257
 100719c:	10a0b504 	addi	r2,r2,-32044
 10071a0:	00c040b4 	movhi	r3,258
 10071a4:	18fb4c44 	addi	r3,r3,-4815
 10071a8:	d8800715 	stw	r2,28(sp)
 10071ac:	d9001115 	stw	r4,68(sp)
 10071b0:	00804034 	movhi	r2,256
 10071b4:	109c8d04 	addi	r2,r2,29236
 10071b8:	d9000104 	addi	r4,sp,4
 10071bc:	dfc01615 	stw	ra,88(sp)
 10071c0:	d8c00815 	stw	r3,32(sp)
 10071c4:	d8800a15 	stw	r2,40(sp)
 10071c8:	d9801315 	stw	r6,76(sp)
 10071cc:	d9401215 	stw	r5,72(sp)
 10071d0:	df001515 	stw	fp,84(sp)
 10071d4:	ddc01415 	stw	r23,80(sp)
 10071d8:	dec00915 	stw	sp,36(sp)
 10071dc:	dec00b15 	stw	sp,44(sp)
 10071e0:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 10071e4:	d9401217 	ldw	r5,72(sp)
 10071e8:	d9001117 	ldw	r4,68(sp)
 10071ec:	00bfffc4 	movi	r2,-1
 10071f0:	d8800215 	stw	r2,8(sp)
 10071f4:	10057e80 	call	10057e8 <_ZNSsC1ERKSs>
 10071f8:	00800084 	movi	r2,2
 10071fc:	d8800215 	stw	r2,8(sp)
 1007200:	d8801117 	ldw	r2,68(sp)
 1007204:	d9401317 	ldw	r5,76(sp)
 1007208:	d8801015 	stw	r2,64(sp)
 100720c:	1009883a 	mov	r4,r2
 1007210:	100605c0 	call	100605c <_ZNSs6appendERKSs>
 1007214:	d9000104 	addi	r4,sp,4
 1007218:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 100721c:	d8801117 	ldw	r2,68(sp)
 1007220:	dfc01617 	ldw	ra,88(sp)
 1007224:	df001517 	ldw	fp,84(sp)
 1007228:	ddc01417 	ldw	r23,80(sp)
 100722c:	dec01704 	addi	sp,sp,92
 1007230:	f800283a 	ret
 1007234:	d8c00217 	ldw	r3,8(sp)
 1007238:	00800044 	movi	r2,1
 100723c:	d9000317 	ldw	r4,12(sp)
 1007240:	18800326 	beq	r3,r2,1007250 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xbc>
 1007244:	00bfffc4 	movi	r2,-1
 1007248:	d8800215 	stw	r2,8(sp)
 100724c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1007250:	d8801017 	ldw	r2,64(sp)
 1007254:	d9000f15 	stw	r4,60(sp)
 1007258:	10c00017 	ldw	r3,0(r2)
 100725c:	008040b4 	movhi	r2,258
 1007260:	109bd604 	addi	r2,r2,28504
 1007264:	18fffd04 	addi	r3,r3,-12
 1007268:	d8c00e15 	stw	r3,56(sp)
 100726c:	1880041e 	bne	r3,r2,1007280 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xec>
 1007270:	d9000f17 	ldw	r4,60(sp)
 1007274:	00bfffc4 	movi	r2,-1
 1007278:	d8800215 	stw	r2,8(sp)
 100727c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1007280:	00800044 	movi	r2,1
 1007284:	d8800215 	stw	r2,8(sp)
 1007288:	19000204 	addi	r4,r3,8
 100728c:	017fffc4 	movi	r5,-1
 1007290:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007294:	00bff616 	blt	zero,r2,1007270 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xdc>
 1007298:	d9000e17 	ldw	r4,56(sp)
 100729c:	d80b883a 	mov	r5,sp
 10072a0:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10072a4:	003ff206 	br	1007270 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xdc>

010072a8 <_ZNSs4swapERSs>:
 10072a8:	21c00017 	ldw	r7,0(r4)
 10072ac:	38fffd04 	addi	r3,r7,-12
 10072b0:	18800217 	ldw	r2,8(r3)
 10072b4:	1000010e 	bge	r2,zero,10072bc <_ZNSs4swapERSs+0x14>
 10072b8:	18000215 	stw	zero,8(r3)
 10072bc:	29800017 	ldw	r6,0(r5)
 10072c0:	30fffd04 	addi	r3,r6,-12
 10072c4:	18800217 	ldw	r2,8(r3)
 10072c8:	1000010e 	bge	r2,zero,10072d0 <_ZNSs4swapERSs+0x28>
 10072cc:	18000215 	stw	zero,8(r3)
 10072d0:	21800015 	stw	r6,0(r4)
 10072d4:	29c00015 	stw	r7,0(r5)
 10072d8:	f800283a 	ret

010072dc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_>:
 10072dc:	deffe904 	addi	sp,sp,-92
 10072e0:	00804074 	movhi	r2,257
 10072e4:	10a0b504 	addi	r2,r2,-32044
 10072e8:	00c040b4 	movhi	r3,258
 10072ec:	18fb4e44 	addi	r3,r3,-4807
 10072f0:	d8800715 	stw	r2,28(sp)
 10072f4:	d9001115 	stw	r4,68(sp)
 10072f8:	00804034 	movhi	r2,256
 10072fc:	109cec04 	addi	r2,r2,29616
 1007300:	d9000104 	addi	r4,sp,4
 1007304:	d8c00815 	stw	r3,32(sp)
 1007308:	d8800a15 	stw	r2,40(sp)
 100730c:	d9401205 	stb	r5,72(sp)
 1007310:	dfc01615 	stw	ra,88(sp)
 1007314:	df001515 	stw	fp,84(sp)
 1007318:	ddc01415 	stw	r23,80(sp)
 100731c:	dec00915 	stw	sp,36(sp)
 1007320:	dec00b15 	stw	sp,44(sp)
 1007324:	d9801315 	stw	r6,76(sp)
 1007328:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 100732c:	00c040b4 	movhi	r3,258
 1007330:	18dbd604 	addi	r3,r3,28504
 1007334:	18800304 	addi	r2,r3,12
 1007338:	d8c01117 	ldw	r3,68(sp)
 100733c:	18800015 	stw	r2,0(r3)
 1007340:	d8801317 	ldw	r2,76(sp)
 1007344:	10c00017 	ldw	r3,0(r2)
 1007348:	00800084 	movi	r2,2
 100734c:	197ffd17 	ldw	r5,-12(r3)
 1007350:	d8c01117 	ldw	r3,68(sp)
 1007354:	d8800215 	stw	r2,8(sp)
 1007358:	29400044 	addi	r5,r5,1
 100735c:	d8c00f15 	stw	r3,60(sp)
 1007360:	1809883a 	mov	r4,r3
 1007364:	1005b580 	call	1005b58 <_ZNSs7reserveEm>
 1007368:	d8801203 	ldbu	r2,72(sp)
 100736c:	d9001117 	ldw	r4,68(sp)
 1007370:	01400044 	movi	r5,1
 1007374:	11803fcc 	andi	r6,r2,255
 1007378:	3180201c 	xori	r6,r6,128
 100737c:	31bfe004 	addi	r6,r6,-128
 1007380:	1005d080 	call	1005d08 <_ZNSs6appendEmc>
 1007384:	d9001117 	ldw	r4,68(sp)
 1007388:	d9401317 	ldw	r5,76(sp)
 100738c:	100605c0 	call	100605c <_ZNSs6appendERKSs>
 1007390:	d9000104 	addi	r4,sp,4
 1007394:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1007398:	d8801117 	ldw	r2,68(sp)
 100739c:	dfc01617 	ldw	ra,88(sp)
 10073a0:	df001517 	ldw	fp,84(sp)
 10073a4:	ddc01417 	ldw	r23,80(sp)
 10073a8:	dec01704 	addi	sp,sp,92
 10073ac:	f800283a 	ret
 10073b0:	d8c00217 	ldw	r3,8(sp)
 10073b4:	00800044 	movi	r2,1
 10073b8:	d9000317 	ldw	r4,12(sp)
 10073bc:	18800326 	beq	r3,r2,10073cc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0xf0>
 10073c0:	00bfffc4 	movi	r2,-1
 10073c4:	d8800215 	stw	r2,8(sp)
 10073c8:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 10073cc:	d8c00f17 	ldw	r3,60(sp)
 10073d0:	d9001015 	stw	r4,64(sp)
 10073d4:	18800017 	ldw	r2,0(r3)
 10073d8:	00c040b4 	movhi	r3,258
 10073dc:	18dbd604 	addi	r3,r3,28504
 10073e0:	10bffd04 	addi	r2,r2,-12
 10073e4:	d8800e15 	stw	r2,56(sp)
 10073e8:	1880041e 	bne	r3,r2,10073fc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x120>
 10073ec:	d9001017 	ldw	r4,64(sp)
 10073f0:	00bfffc4 	movi	r2,-1
 10073f4:	d8800215 	stw	r2,8(sp)
 10073f8:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 10073fc:	00800044 	movi	r2,1
 1007400:	d8800215 	stw	r2,8(sp)
 1007404:	d8800e17 	ldw	r2,56(sp)
 1007408:	017fffc4 	movi	r5,-1
 100740c:	11000204 	addi	r4,r2,8
 1007410:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007414:	00bff516 	blt	zero,r2,10073ec <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x110>
 1007418:	d9000e17 	ldw	r4,56(sp)
 100741c:	d80b883a 	mov	r5,sp
 1007420:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007424:	003ff106 	br	10073ec <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x110>

01007428 <_ZNSs7replaceEmmPKcm>:
 1007428:	deffe304 	addi	sp,sp,-116
 100742c:	00804034 	movhi	r2,256
 1007430:	109da304 	addi	r2,r2,30348
 1007434:	d8800c15 	stw	r2,48(sp)
 1007438:	d8800104 	addi	r2,sp,4
 100743c:	00c040b4 	movhi	r3,258
 1007440:	18fb5044 	addi	r3,r3,-4799
 1007444:	d9001615 	stw	r4,88(sp)
 1007448:	d8800b15 	stw	r2,44(sp)
 100744c:	d9000304 	addi	r4,sp,12
 1007450:	00804074 	movhi	r2,257
 1007454:	10a0b504 	addi	r2,r2,-32044
 1007458:	d8c00a15 	stw	r3,40(sp)
 100745c:	d9401715 	stw	r5,92(sp)
 1007460:	d9801815 	stw	r6,96(sp)
 1007464:	d9c01915 	stw	r7,100(sp)
 1007468:	dfc01c15 	stw	ra,112(sp)
 100746c:	df001b15 	stw	fp,108(sp)
 1007470:	ddc01a15 	stw	r23,104(sp)
 1007474:	dec00d15 	stw	sp,52(sp)
 1007478:	d8800915 	stw	r2,36(sp)
 100747c:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1007480:	d8c01617 	ldw	r3,88(sp)
 1007484:	d9801717 	ldw	r6,92(sp)
 1007488:	19400017 	ldw	r5,0(r3)
 100748c:	29fffd04 	addi	r7,r5,-12
 1007490:	39000017 	ldw	r4,0(r7)
 1007494:	21807336 	bltu	r4,r6,1007664 <_ZNSs7replaceEmmPKcm+0x23c>
 1007498:	d8c01717 	ldw	r3,92(sp)
 100749c:	d8801817 	ldw	r2,96(sp)
 10074a0:	20cdc83a 	sub	r6,r4,r3
 10074a4:	d8801015 	stw	r2,64(sp)
 10074a8:	30801b36 	bltu	r6,r2,1007518 <_ZNSs7replaceEmmPKcm+0xf0>
 10074ac:	d9801017 	ldw	r6,64(sp)
 10074b0:	00900034 	movhi	r2,16384
 10074b4:	10bfff04 	addi	r2,r2,-4
 10074b8:	2187c83a 	sub	r3,r4,r6
 10074bc:	10c5c83a 	sub	r2,r2,r3
 10074c0:	d8c01d17 	ldw	r3,116(sp)
 10074c4:	10c06c36 	bltu	r2,r3,1007678 <_ZNSs7replaceEmmPKcm+0x250>
 10074c8:	d9801917 	ldw	r6,100(sp)
 10074cc:	3140142e 	bgeu	r6,r5,1007520 <_ZNSs7replaceEmmPKcm+0xf8>
 10074d0:	d8801d17 	ldw	r2,116(sp)
 10074d4:	d9001617 	ldw	r4,88(sp)
 10074d8:	d9401717 	ldw	r5,92(sp)
 10074dc:	d9801017 	ldw	r6,64(sp)
 10074e0:	d9c01917 	ldw	r7,100(sp)
 10074e4:	d8800015 	stw	r2,0(sp)
 10074e8:	00bfffc4 	movi	r2,-1
 10074ec:	d8800415 	stw	r2,16(sp)
 10074f0:	10065580 	call	1006558 <_ZNSs15_M_replace_safeEmmPKcm>
 10074f4:	d8801615 	stw	r2,88(sp)
 10074f8:	d9000304 	addi	r4,sp,12
 10074fc:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1007500:	d8801617 	ldw	r2,88(sp)
 1007504:	dfc01c17 	ldw	ra,112(sp)
 1007508:	df001b17 	ldw	fp,108(sp)
 100750c:	ddc01a17 	ldw	r23,104(sp)
 1007510:	dec01d04 	addi	sp,sp,116
 1007514:	f800283a 	ret
 1007518:	d9801015 	stw	r6,64(sp)
 100751c:	003fe306 	br	10074ac <_ZNSs7replaceEmmPKcm+0x84>
 1007520:	2905883a 	add	r2,r5,r4
 1007524:	11bfea36 	bltu	r2,r6,10074d0 <_ZNSs7replaceEmmPKcm+0xa8>
 1007528:	38800217 	ldw	r2,8(r7)
 100752c:	00bfe816 	blt	zero,r2,10074d0 <_ZNSs7replaceEmmPKcm+0xa8>
 1007530:	d8801717 	ldw	r2,92(sp)
 1007534:	d9001917 	ldw	r4,100(sp)
 1007538:	d9801d17 	ldw	r6,116(sp)
 100753c:	d8801515 	stw	r2,84(sp)
 1007540:	2887883a 	add	r3,r5,r2
 1007544:	2185883a 	add	r2,r4,r6
 1007548:	18801636 	bltu	r3,r2,10075a4 <_ZNSs7replaceEmmPKcm+0x17c>
 100754c:	d8c01917 	ldw	r3,100(sp)
 1007550:	194bc83a 	sub	r5,r3,r5
 1007554:	d9401415 	stw	r5,80(sp)
 1007558:	d9401717 	ldw	r5,92(sp)
 100755c:	d9801017 	ldw	r6,64(sp)
 1007560:	d9001617 	ldw	r4,88(sp)
 1007564:	d9c01d17 	ldw	r7,116(sp)
 1007568:	00bfffc4 	movi	r2,-1
 100756c:	d8800415 	stw	r2,16(sp)
 1007570:	10063200 	call	1006320 <_ZNSs9_M_mutateEmmm>
 1007574:	d9801617 	ldw	r6,88(sp)
 1007578:	d8801417 	ldw	r2,80(sp)
 100757c:	30c00017 	ldw	r3,0(r6)
 1007580:	d9801517 	ldw	r6,84(sp)
 1007584:	188b883a 	add	r5,r3,r2
 1007588:	30c9883a 	add	r4,r6,r3
 100758c:	d8c01d17 	ldw	r3,116(sp)
 1007590:	00800044 	movi	r2,1
 1007594:	18800d1e 	bne	r3,r2,10075cc <_ZNSs7replaceEmmPKcm+0x1a4>
 1007598:	28800003 	ldbu	r2,0(r5)
 100759c:	20800005 	stb	r2,0(r4)
 10075a0:	003fd506 	br	10074f8 <_ZNSs7replaceEmmPKcm+0xd0>
 10075a4:	d9001017 	ldw	r4,64(sp)
 10075a8:	d9801917 	ldw	r6,100(sp)
 10075ac:	1905883a 	add	r2,r3,r4
 10075b0:	30800936 	bltu	r6,r2,10075d8 <_ZNSs7replaceEmmPKcm+0x1b0>
 10075b4:	3147c83a 	sub	r3,r6,r5
 10075b8:	d9401d17 	ldw	r5,116(sp)
 10075bc:	2905c83a 	sub	r2,r5,r4
 10075c0:	1887883a 	add	r3,r3,r2
 10075c4:	d8c01415 	stw	r3,80(sp)
 10075c8:	003fe306 	br	1007558 <_ZNSs7replaceEmmPKcm+0x130>
 10075cc:	d9801d17 	ldw	r6,116(sp)
 10075d0:	1009fa80 	call	1009fa8 <memcpy>
 10075d4:	003fc806 	br	10074f8 <_ZNSs7replaceEmmPKcm+0xd0>
 10075d8:	01000104 	movi	r4,4
 10075dc:	d905883a 	add	r2,sp,r4
 10075e0:	d9000415 	stw	r4,16(sp)
 10075e4:	d9401917 	ldw	r5,100(sp)
 10075e8:	1109883a 	add	r4,r2,r4
 10075ec:	d9801d17 	ldw	r6,116(sp)
 10075f0:	d9c00184 	addi	r7,sp,6
 10075f4:	10055500 	call	1005550 <_ZNSsC1EPKcmRKSaIcE>
 10075f8:	d9001d17 	ldw	r4,116(sp)
 10075fc:	008000c4 	movi	r2,3
 1007600:	d9c00217 	ldw	r7,8(sp)
 1007604:	d9000015 	stw	r4,0(sp)
 1007608:	d8800415 	stw	r2,16(sp)
 100760c:	d9001617 	ldw	r4,88(sp)
 1007610:	d9401717 	ldw	r5,92(sp)
 1007614:	d9801017 	ldw	r6,64(sp)
 1007618:	10065580 	call	1006558 <_ZNSs15_M_replace_safeEmmPKcm>
 100761c:	d8801615 	stw	r2,88(sp)
 1007620:	d8800217 	ldw	r2,8(sp)
 1007624:	00c040b4 	movhi	r3,258
 1007628:	18dbd604 	addi	r3,r3,28504
 100762c:	10bffd04 	addi	r2,r2,-12
 1007630:	d8801215 	stw	r2,72(sp)
 1007634:	10ffb026 	beq	r2,r3,10074f8 <_ZNSs7replaceEmmPKcm+0xd0>
 1007638:	d9401217 	ldw	r5,72(sp)
 100763c:	00800084 	movi	r2,2
 1007640:	d8800415 	stw	r2,16(sp)
 1007644:	29000204 	addi	r4,r5,8
 1007648:	017fffc4 	movi	r5,-1
 100764c:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007650:	00bfa916 	blt	zero,r2,10074f8 <_ZNSs7replaceEmmPKcm+0xd0>
 1007654:	d9001217 	ldw	r4,72(sp)
 1007658:	d9400144 	addi	r5,sp,5
 100765c:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007660:	003fa506 	br	10074f8 <_ZNSs7replaceEmmPKcm+0xd0>
 1007664:	00bfffc4 	movi	r2,-1
 1007668:	010040b4 	movhi	r4,258
 100766c:	213c5d04 	addi	r4,r4,-3724
 1007670:	d8800415 	stw	r2,16(sp)
 1007674:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>
 1007678:	00bfffc4 	movi	r2,-1
 100767c:	010040b4 	movhi	r4,258
 1007680:	213c5d04 	addi	r4,r4,-3724
 1007684:	d8800415 	stw	r2,16(sp)
 1007688:	10025600 	call	1002560 <_ZSt20__throw_length_errorPKc>
 100768c:	d8c00417 	ldw	r3,16(sp)
 1007690:	00800044 	movi	r2,1
 1007694:	d9000517 	ldw	r4,20(sp)
 1007698:	18800226 	beq	r3,r2,10076a4 <_ZNSs7replaceEmmPKcm+0x27c>
 100769c:	00800084 	movi	r2,2
 10076a0:	18800326 	beq	r3,r2,10076b0 <_ZNSs7replaceEmmPKcm+0x288>
 10076a4:	00bfffc4 	movi	r2,-1
 10076a8:	d8800415 	stw	r2,16(sp)
 10076ac:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 10076b0:	d8800217 	ldw	r2,8(sp)
 10076b4:	00c040b4 	movhi	r3,258
 10076b8:	18dbd604 	addi	r3,r3,28504
 10076bc:	d9001315 	stw	r4,76(sp)
 10076c0:	10bffd04 	addi	r2,r2,-12
 10076c4:	d8801115 	stw	r2,68(sp)
 10076c8:	10c0041e 	bne	r2,r3,10076dc <_ZNSs7replaceEmmPKcm+0x2b4>
 10076cc:	d9001317 	ldw	r4,76(sp)
 10076d0:	00bfffc4 	movi	r2,-1
 10076d4:	d8800415 	stw	r2,16(sp)
 10076d8:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 10076dc:	d9801117 	ldw	r6,68(sp)
 10076e0:	00800044 	movi	r2,1
 10076e4:	d8800415 	stw	r2,16(sp)
 10076e8:	31000204 	addi	r4,r6,8
 10076ec:	017fffc4 	movi	r5,-1
 10076f0:	10079000 	call	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10076f4:	00bff516 	blt	zero,r2,10076cc <_ZNSs7replaceEmmPKcm+0x2a4>
 10076f8:	d9001117 	ldw	r4,68(sp)
 10076fc:	d9400104 	addi	r5,sp,4
 1007700:	10043900 	call	1004390 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007704:	003ff106 	br	10076cc <_ZNSs7replaceEmmPKcm+0x2a4>

01007708 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_>:
 1007708:	d8800017 	ldw	r2,0(sp)
 100770c:	20c00017 	ldw	r3,0(r4)
 1007710:	314dc83a 	sub	r6,r6,r5
 1007714:	11c5c83a 	sub	r2,r2,r7
 1007718:	28cbc83a 	sub	r5,r5,r3
 100771c:	d8800015 	stw	r2,0(sp)
 1007720:	10074281 	jmpi	1007428 <_ZNSs7replaceEmmPKcm>

01007724 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_>:
 1007724:	d8800017 	ldw	r2,0(sp)
 1007728:	20c00017 	ldw	r3,0(r4)
 100772c:	314dc83a 	sub	r6,r6,r5
 1007730:	11c5c83a 	sub	r2,r2,r7
 1007734:	28cbc83a 	sub	r5,r5,r3
 1007738:	d8800015 	stw	r2,0(sp)
 100773c:	10074281 	jmpi	1007428 <_ZNSs7replaceEmmPKcm>

01007740 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_>:
 1007740:	d8800017 	ldw	r2,0(sp)
 1007744:	20c00017 	ldw	r3,0(r4)
 1007748:	314dc83a 	sub	r6,r6,r5
 100774c:	11c5c83a 	sub	r2,r2,r7
 1007750:	28cbc83a 	sub	r5,r5,r3
 1007754:	d8800015 	stw	r2,0(sp)
 1007758:	10074281 	jmpi	1007428 <_ZNSs7replaceEmmPKcm>

0100775c <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_>:
 100775c:	d8800017 	ldw	r2,0(sp)
 1007760:	20c00017 	ldw	r3,0(r4)
 1007764:	314dc83a 	sub	r6,r6,r5
 1007768:	11c5c83a 	sub	r2,r2,r7
 100776c:	28cbc83a 	sub	r5,r5,r3
 1007770:	d8800015 	stw	r2,0(sp)
 1007774:	10074281 	jmpi	1007428 <_ZNSs7replaceEmmPKcm>

01007778 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcm>:
 1007778:	20800017 	ldw	r2,0(r4)
 100777c:	314dc83a 	sub	r6,r6,r5
 1007780:	288bc83a 	sub	r5,r5,r2
 1007784:	10074281 	jmpi	1007428 <_ZNSs7replaceEmmPKcm>

01007788 <_ZNSs7replaceEmmPKc>:
 1007788:	defffa04 	addi	sp,sp,-24
 100778c:	dfc00515 	stw	ra,20(sp)
 1007790:	ddc00415 	stw	r23,16(sp)
 1007794:	dd400315 	stw	r21,12(sp)
 1007798:	dcc00215 	stw	r19,8(sp)
 100779c:	dc400115 	stw	r17,4(sp)
 10077a0:	202f883a 	mov	r23,r4
 10077a4:	3809883a 	mov	r4,r7
 10077a8:	382b883a 	mov	r21,r7
 10077ac:	2823883a 	mov	r17,r5
 10077b0:	3027883a 	mov	r19,r6
 10077b4:	100a5f80 	call	100a5f8 <strlen>
 10077b8:	880b883a 	mov	r5,r17
 10077bc:	b809883a 	mov	r4,r23
 10077c0:	980d883a 	mov	r6,r19
 10077c4:	a80f883a 	mov	r7,r21
 10077c8:	d8800015 	stw	r2,0(sp)
 10077cc:	10074280 	call	1007428 <_ZNSs7replaceEmmPKcm>
 10077d0:	dfc00517 	ldw	ra,20(sp)
 10077d4:	ddc00417 	ldw	r23,16(sp)
 10077d8:	dd400317 	ldw	r21,12(sp)
 10077dc:	dcc00217 	ldw	r19,8(sp)
 10077e0:	dc400117 	ldw	r17,4(sp)
 10077e4:	dec00604 	addi	sp,sp,24
 10077e8:	f800283a 	ret

010077ec <_ZNSs7replaceEmmRKSsmm>:
 10077ec:	3a400017 	ldw	r9,0(r7)
 10077f0:	deffff04 	addi	sp,sp,-4
 10077f4:	d9c00117 	ldw	r7,4(sp)
 10077f8:	48bffd17 	ldw	r2,-12(r9)
 10077fc:	dfc00015 	stw	ra,0(sp)
 1007800:	da000217 	ldw	r8,8(sp)
 1007804:	11c00d36 	bltu	r2,r7,100783c <_ZNSs7replaceEmmRKSsmm+0x50>
 1007808:	11c7c83a 	sub	r3,r2,r7
 100780c:	4005883a 	mov	r2,r8
 1007810:	49cf883a 	add	r7,r9,r7
 1007814:	1a000436 	bltu	r3,r8,1007828 <_ZNSs7replaceEmmRKSsmm+0x3c>
 1007818:	d8800115 	stw	r2,4(sp)
 100781c:	dfc00017 	ldw	ra,0(sp)
 1007820:	dec00104 	addi	sp,sp,4
 1007824:	10074281 	jmpi	1007428 <_ZNSs7replaceEmmPKcm>
 1007828:	1805883a 	mov	r2,r3
 100782c:	d8800115 	stw	r2,4(sp)
 1007830:	dfc00017 	ldw	ra,0(sp)
 1007834:	dec00104 	addi	sp,sp,4
 1007838:	10074281 	jmpi	1007428 <_ZNSs7replaceEmmPKcm>
 100783c:	010040b4 	movhi	r4,258
 1007840:	213c5d04 	addi	r4,r4,-3724
 1007844:	10023d00 	call	10023d0 <_ZSt20__throw_out_of_rangePKc>

01007848 <_ZNSs7replaceEmmRKSs>:
 1007848:	39c00017 	ldw	r7,0(r7)
 100784c:	defffe04 	addi	sp,sp,-8
 1007850:	dfc00115 	stw	ra,4(sp)
 1007854:	38bffd17 	ldw	r2,-12(r7)
 1007858:	d8800015 	stw	r2,0(sp)
 100785c:	10074280 	call	1007428 <_ZNSs7replaceEmmPKcm>
 1007860:	dfc00117 	ldw	ra,4(sp)
 1007864:	dec00204 	addi	sp,sp,8
 1007868:	f800283a 	ret

0100786c <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs>:
 100786c:	39c00017 	ldw	r7,0(r7)
 1007870:	20800017 	ldw	r2,0(r4)
 1007874:	defffe04 	addi	sp,sp,-8
 1007878:	38fffd17 	ldw	r3,-12(r7)
 100787c:	314dc83a 	sub	r6,r6,r5
 1007880:	288bc83a 	sub	r5,r5,r2
 1007884:	dfc00115 	stw	ra,4(sp)
 1007888:	d8c00015 	stw	r3,0(sp)
 100788c:	10074280 	call	1007428 <_ZNSs7replaceEmmPKcm>
 1007890:	dfc00117 	ldw	ra,4(sp)
 1007894:	dec00204 	addi	sp,sp,8
 1007898:	f800283a 	ret

0100789c <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc>:
 100789c:	20800017 	ldw	r2,0(r4)
 10078a0:	defffa04 	addi	sp,sp,-24
 10078a4:	dc400215 	stw	r17,8(sp)
 10078a8:	3163c83a 	sub	r17,r6,r5
 10078ac:	288bc83a 	sub	r5,r5,r2
 10078b0:	dfc00515 	stw	ra,20(sp)
 10078b4:	dd400415 	stw	r21,16(sp)
 10078b8:	dcc00315 	stw	r19,12(sp)
 10078bc:	d9400115 	stw	r5,4(sp)
 10078c0:	2027883a 	mov	r19,r4
 10078c4:	3809883a 	mov	r4,r7
 10078c8:	382b883a 	mov	r21,r7
 10078cc:	100a5f80 	call	100a5f8 <strlen>
 10078d0:	d9400117 	ldw	r5,4(sp)
 10078d4:	9809883a 	mov	r4,r19
 10078d8:	880d883a 	mov	r6,r17
 10078dc:	a80f883a 	mov	r7,r21
 10078e0:	d8800015 	stw	r2,0(sp)
 10078e4:	10074280 	call	1007428 <_ZNSs7replaceEmmPKcm>
 10078e8:	dfc00517 	ldw	ra,20(sp)
 10078ec:	dd400417 	ldw	r21,16(sp)
 10078f0:	dcc00317 	ldw	r19,12(sp)
 10078f4:	dc400217 	ldw	r17,8(sp)
 10078f8:	dec00604 	addi	sp,sp,24
 10078fc:	f800283a 	ret

01007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>:
 1007900:	20800017 	ldw	r2,0(r4)
 1007904:	20c00017 	ldw	r3,0(r4)
 1007908:	1947883a 	add	r3,r3,r5
 100790c:	20c00015 	stw	r3,0(r4)
 1007910:	f800283a 	ret

01007914 <_ZN9__gnu_cxx12__atomic_addEPVii>:
 1007914:	10079001 	jmpi	1007900 <_ZN9__gnu_cxx18__exchange_and_addEPVii>

01007918 <_ZNKSt9exception4whatEv>:
 1007918:	20800017 	ldw	r2,0(r4)
 100791c:	10ffff17 	ldw	r3,-4(r2)
 1007920:	18800117 	ldw	r2,4(r3)
 1007924:	f800283a 	ret

01007928 <_ZNSt9exceptionD0Ev>:
 1007928:	008040b4 	movhi	r2,258
 100792c:	10bc7b04 	addi	r2,r2,-3604
 1007930:	20800015 	stw	r2,0(r4)
 1007934:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

01007938 <_ZNSt9exceptionD1Ev>:
 1007938:	008040b4 	movhi	r2,258
 100793c:	10bc7b04 	addi	r2,r2,-3604
 1007940:	20800015 	stw	r2,0(r4)
 1007944:	f800283a 	ret

01007948 <_ZNSt9exceptionD2Ev>:
 1007948:	008040b4 	movhi	r2,258
 100794c:	10bc7b04 	addi	r2,r2,-3604
 1007950:	20800015 	stw	r2,0(r4)
 1007954:	f800283a 	ret

01007958 <_ZNSt13bad_exceptionD0Ev>:
 1007958:	defffe04 	addi	sp,sp,-8
 100795c:	008040b4 	movhi	r2,258
 1007960:	10bc7604 	addi	r2,r2,-3624
 1007964:	dc400015 	stw	r17,0(sp)
 1007968:	20800015 	stw	r2,0(r4)
 100796c:	2023883a 	mov	r17,r4
 1007970:	dfc00115 	stw	ra,4(sp)
 1007974:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1007978:	8809883a 	mov	r4,r17
 100797c:	dfc00117 	ldw	ra,4(sp)
 1007980:	dc400017 	ldw	r17,0(sp)
 1007984:	dec00204 	addi	sp,sp,8
 1007988:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

0100798c <_ZNSt13bad_exceptionD1Ev>:
 100798c:	008040b4 	movhi	r2,258
 1007990:	10bc7604 	addi	r2,r2,-3624
 1007994:	20800015 	stw	r2,0(r4)
 1007998:	10079481 	jmpi	1007948 <_ZNSt9exceptionD2Ev>

0100799c <_ZNSt13bad_exceptionD2Ev>:
 100799c:	008040b4 	movhi	r2,258
 10079a0:	10bc7604 	addi	r2,r2,-3624
 10079a4:	20800015 	stw	r2,0(r4)
 10079a8:	10079481 	jmpi	1007948 <_ZNSt9exceptionD2Ev>

010079ac <_ZSt15set_new_handlerPFvvE>:
 10079ac:	d0a71217 	ldw	r2,-25528(gp)
 10079b0:	d1271215 	stw	r4,-25528(gp)
 10079b4:	f800283a 	ret

010079b8 <_ZNSt9bad_allocD0Ev>:
 10079b8:	defffe04 	addi	sp,sp,-8
 10079bc:	008040b4 	movhi	r2,258
 10079c0:	10bc8c04 	addi	r2,r2,-3536
 10079c4:	dc400015 	stw	r17,0(sp)
 10079c8:	20800015 	stw	r2,0(r4)
 10079cc:	2023883a 	mov	r17,r4
 10079d0:	dfc00115 	stw	ra,4(sp)
 10079d4:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 10079d8:	8809883a 	mov	r4,r17
 10079dc:	dfc00117 	ldw	ra,4(sp)
 10079e0:	dc400017 	ldw	r17,0(sp)
 10079e4:	dec00204 	addi	sp,sp,8
 10079e8:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

010079ec <_ZNSt9bad_allocD1Ev>:
 10079ec:	008040b4 	movhi	r2,258
 10079f0:	10bc8c04 	addi	r2,r2,-3536
 10079f4:	20800015 	stw	r2,0(r4)
 10079f8:	10079481 	jmpi	1007948 <_ZNSt9exceptionD2Ev>

010079fc <_ZNSt9bad_allocD2Ev>:
 10079fc:	008040b4 	movhi	r2,258
 1007a00:	10bc8c04 	addi	r2,r2,-3536
 1007a04:	20800015 	stw	r2,0(r4)
 1007a08:	10079481 	jmpi	1007948 <_ZNSt9exceptionD2Ev>

01007a0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 1007a0c:	20c00017 	ldw	r3,0(r4)
 1007a10:	defffa04 	addi	sp,sp,-24
 1007a14:	dc000415 	stw	r16,16(sp)
 1007a18:	1a000617 	ldw	r8,24(r3)
 1007a1c:	3021883a 	mov	r16,r6
 1007a20:	31800017 	ldw	r6,0(r6)
 1007a24:	00800404 	movi	r2,16
 1007a28:	dfc00515 	stw	ra,20(sp)
 1007a2c:	d8800215 	stw	r2,8(sp)
 1007a30:	d8000015 	stw	zero,0(sp)
 1007a34:	d8000115 	stw	zero,4(sp)
 1007a38:	d8000315 	stw	zero,12(sp)
 1007a3c:	d80f883a 	mov	r7,sp
 1007a40:	403ee83a 	callr	r8
 1007a44:	d8800117 	ldw	r2,4(sp)
 1007a48:	00c00184 	movi	r3,6
 1007a4c:	0009883a 	mov	r4,zero
 1007a50:	1080018c 	andi	r2,r2,6
 1007a54:	10c0031e 	bne	r2,r3,1007a64 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
 1007a58:	d8800017 	ldw	r2,0(sp)
 1007a5c:	01000044 	movi	r4,1
 1007a60:	80800015 	stw	r2,0(r16)
 1007a64:	2005883a 	mov	r2,r4
 1007a68:	dfc00517 	ldw	ra,20(sp)
 1007a6c:	dc000417 	ldw	r16,16(sp)
 1007a70:	dec00604 	addi	sp,sp,24
 1007a74:	f800283a 	ret

01007a78 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
 1007a78:	d8800017 	ldw	r2,0(sp)
 1007a7c:	00c00184 	movi	r3,6
 1007a80:	1180021e 	bne	r2,r6,1007a8c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
 1007a84:	1805883a 	mov	r2,r3
 1007a88:	f800283a 	ret
 1007a8c:	00c00044 	movi	r3,1
 1007a90:	1805883a 	mov	r2,r3
 1007a94:	f800283a 	ret

01007a98 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 1007a98:	defffe04 	addi	sp,sp,-8
 1007a9c:	008040b4 	movhi	r2,258
 1007aa0:	10bc9804 	addi	r2,r2,-3488
 1007aa4:	dc400015 	stw	r17,0(sp)
 1007aa8:	20800015 	stw	r2,0(r4)
 1007aac:	2023883a 	mov	r17,r4
 1007ab0:	dfc00115 	stw	ra,4(sp)
 1007ab4:	1008e5c0 	call	1008e5c <_ZNSt9type_infoD2Ev>
 1007ab8:	8809883a 	mov	r4,r17
 1007abc:	dfc00117 	ldw	ra,4(sp)
 1007ac0:	dc400017 	ldw	r17,0(sp)
 1007ac4:	dec00204 	addi	sp,sp,8
 1007ac8:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

01007acc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 1007acc:	008040b4 	movhi	r2,258
 1007ad0:	10bc9804 	addi	r2,r2,-3488
 1007ad4:	20800015 	stw	r2,0(r4)
 1007ad8:	1008e5c1 	jmpi	1008e5c <_ZNSt9type_infoD2Ev>

01007adc <_ZN10__cxxabiv117__class_type_infoD2Ev>:
 1007adc:	008040b4 	movhi	r2,258
 1007ae0:	10bc9804 	addi	r2,r2,-3488
 1007ae4:	20800015 	stw	r2,0(r4)
 1007ae8:	1008e5c1 	jmpi	1008e5c <_ZNSt9type_infoD2Ev>

01007aec <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 1007aec:	2811883a 	mov	r8,r5
 1007af0:	20c00117 	ldw	r3,4(r4)
 1007af4:	40800117 	ldw	r2,4(r8)
 1007af8:	deffff04 	addi	sp,sp,-4
 1007afc:	dfc00015 	stw	ra,0(sp)
 1007b00:	200b883a 	mov	r5,r4
 1007b04:	02400044 	movi	r9,1
 1007b08:	18800426 	beq	r3,r2,1007b1c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
 1007b0c:	008000c4 	movi	r2,3
 1007b10:	4009883a 	mov	r4,r8
 1007b14:	0013883a 	mov	r9,zero
 1007b18:	11c0042e 	bgeu	r2,r7,1007b2c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
 1007b1c:	4805883a 	mov	r2,r9
 1007b20:	dfc00017 	ldw	ra,0(sp)
 1007b24:	dec00104 	addi	sp,sp,4
 1007b28:	f800283a 	ret
 1007b2c:	40800017 	ldw	r2,0(r8)
 1007b30:	10c00517 	ldw	r3,20(r2)
 1007b34:	183ee83a 	callr	r3
 1007b38:	12403fcc 	andi	r9,r2,255
 1007b3c:	4805883a 	mov	r2,r9
 1007b40:	dfc00017 	ldw	ra,0(sp)
 1007b44:	dec00104 	addi	sp,sp,4
 1007b48:	f800283a 	ret

01007b4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 1007b4c:	20c00117 	ldw	r3,4(r4)
 1007b50:	28800117 	ldw	r2,4(r5)
 1007b54:	0009883a 	mov	r4,zero
 1007b58:	1880061e 	bne	r3,r2,1007b74 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
 1007b5c:	00800184 	movi	r2,6
 1007b60:	38800115 	stw	r2,4(r7)
 1007b64:	00800204 	movi	r2,8
 1007b68:	39800015 	stw	r6,0(r7)
 1007b6c:	38800315 	stw	r2,12(r7)
 1007b70:	01000044 	movi	r4,1
 1007b74:	2005883a 	mov	r2,r4
 1007b78:	f800283a 	ret

01007b7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 1007b7c:	da000017 	ldw	r8,0(sp)
 1007b80:	d8800217 	ldw	r2,8(sp)
 1007b84:	d9400317 	ldw	r5,12(sp)
 1007b88:	40800926 	beq	r8,r2,1007bb0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 1007b8c:	21000117 	ldw	r4,4(r4)
 1007b90:	38800117 	ldw	r2,4(r7)
 1007b94:	2080041e 	bne	r4,r2,1007ba8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
 1007b98:	00800044 	movi	r2,1
 1007b9c:	28800315 	stw	r2,12(r5)
 1007ba0:	2a000015 	stw	r8,0(r5)
 1007ba4:	29800115 	stw	r6,4(r5)
 1007ba8:	0005883a 	mov	r2,zero
 1007bac:	f800283a 	ret
 1007bb0:	d8800117 	ldw	r2,4(sp)
 1007bb4:	21000117 	ldw	r4,4(r4)
 1007bb8:	10c00117 	ldw	r3,4(r2)
 1007bbc:	20fff41e 	bne	r4,r3,1007b90 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 1007bc0:	29800215 	stw	r6,8(r5)
 1007bc4:	003ff806 	br	1007ba8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

01007bc8 <_Z12read_uleb128PKhPj>:
 1007bc8:	000d883a 	mov	r6,zero
 1007bcc:	000f883a 	mov	r7,zero
 1007bd0:	20c00007 	ldb	r3,0(r4)
 1007bd4:	21000044 	addi	r4,r4,1
 1007bd8:	18801fcc 	andi	r2,r3,127
 1007bdc:	1184983a 	sll	r2,r2,r6
 1007be0:	318001c4 	addi	r6,r6,7
 1007be4:	388eb03a 	or	r7,r7,r2
 1007be8:	183ff916 	blt	r3,zero,1007bd0 <_Z12read_uleb128PKhPj+0x8>
 1007bec:	2005883a 	mov	r2,r4
 1007bf0:	29c00015 	stw	r7,0(r5)
 1007bf4:	f800283a 	ret

01007bf8 <_Z12read_sleb128PKhPi>:
 1007bf8:	000f883a 	mov	r7,zero
 1007bfc:	0011883a 	mov	r8,zero
 1007c00:	20c00007 	ldb	r3,0(r4)
 1007c04:	21000044 	addi	r4,r4,1
 1007c08:	19803fcc 	andi	r6,r3,255
 1007c0c:	30801fcc 	andi	r2,r6,127
 1007c10:	11c4983a 	sll	r2,r2,r7
 1007c14:	39c001c4 	addi	r7,r7,7
 1007c18:	4090b03a 	or	r8,r8,r2
 1007c1c:	183ff816 	blt	r3,zero,1007c00 <_Z12read_sleb128PKhPi+0x8>
 1007c20:	008007c4 	movi	r2,31
 1007c24:	11c00636 	bltu	r2,r7,1007c40 <_Z12read_sleb128PKhPi+0x48>
 1007c28:	3080100c 	andi	r2,r6,64
 1007c2c:	10000426 	beq	r2,zero,1007c40 <_Z12read_sleb128PKhPi+0x48>
 1007c30:	00800044 	movi	r2,1
 1007c34:	11c4983a 	sll	r2,r2,r7
 1007c38:	0085c83a 	sub	r2,zero,r2
 1007c3c:	4090b03a 	or	r8,r8,r2
 1007c40:	2005883a 	mov	r2,r4
 1007c44:	2a000015 	stw	r8,0(r5)
 1007c48:	f800283a 	ret

01007c4c <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
 1007c4c:	28800017 	ldw	r2,0(r5)
 1007c50:	defffb04 	addi	sp,sp,-20
 1007c54:	30c00017 	ldw	r3,0(r6)
 1007c58:	dc400215 	stw	r17,8(sp)
 1007c5c:	2823883a 	mov	r17,r5
 1007c60:	11400217 	ldw	r5,8(r2)
 1007c64:	dc800315 	stw	r18,12(sp)
 1007c68:	dc000115 	stw	r16,4(sp)
 1007c6c:	dfc00415 	stw	ra,16(sp)
 1007c70:	2021883a 	mov	r16,r4
 1007c74:	d8c00015 	stw	r3,0(sp)
 1007c78:	8809883a 	mov	r4,r17
 1007c7c:	3025883a 	mov	r18,r6
 1007c80:	283ee83a 	callr	r5
 1007c84:	10803fcc 	andi	r2,r2,255
 1007c88:	880b883a 	mov	r5,r17
 1007c8c:	8009883a 	mov	r4,r16
 1007c90:	d80d883a 	mov	r6,sp
 1007c94:	01c00044 	movi	r7,1
 1007c98:	10000326 	beq	r2,zero,1007ca8 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
 1007c9c:	d8800017 	ldw	r2,0(sp)
 1007ca0:	10c00017 	ldw	r3,0(r2)
 1007ca4:	d8c00015 	stw	r3,0(sp)
 1007ca8:	80800017 	ldw	r2,0(r16)
 1007cac:	10c00417 	ldw	r3,16(r2)
 1007cb0:	183ee83a 	callr	r3
 1007cb4:	10803fcc 	andi	r2,r2,255
 1007cb8:	0007883a 	mov	r3,zero
 1007cbc:	10000326 	beq	r2,zero,1007ccc <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
 1007cc0:	d8800017 	ldw	r2,0(sp)
 1007cc4:	00c00044 	movi	r3,1
 1007cc8:	90800015 	stw	r2,0(r18)
 1007ccc:	1805883a 	mov	r2,r3
 1007cd0:	dfc00417 	ldw	ra,16(sp)
 1007cd4:	dc800317 	ldw	r18,12(sp)
 1007cd8:	dc400217 	ldw	r17,8(sp)
 1007cdc:	dc000117 	ldw	r16,4(sp)
 1007ce0:	dec00504 	addi	sp,sp,20
 1007ce4:	f800283a 	ret

01007ce8 <_Z28read_encoded_value_with_basehjPKhPj>:
 1007ce8:	defff904 	addi	sp,sp,-28
 1007cec:	dc400215 	stw	r17,8(sp)
 1007cf0:	00801404 	movi	r2,80
 1007cf4:	24403fcc 	andi	r17,r4,255
 1007cf8:	dd000515 	stw	r20,20(sp)
 1007cfc:	dcc00415 	stw	r19,16(sp)
 1007d00:	dc800315 	stw	r18,12(sp)
 1007d04:	dc000115 	stw	r16,4(sp)
 1007d08:	dfc00615 	stw	ra,24(sp)
 1007d0c:	2025883a 	mov	r18,r4
 1007d10:	2829883a 	mov	r20,r5
 1007d14:	3021883a 	mov	r16,r6
 1007d18:	3827883a 	mov	r19,r7
 1007d1c:	88801826 	beq	r17,r2,1007d80 <_Z28read_encoded_value_with_basehjPKhPj+0x98>
 1007d20:	88c003cc 	andi	r3,r17,15
 1007d24:	00800304 	movi	r2,12
 1007d28:	10c0012e 	bgeu	r2,r3,1007d30 <_Z28read_encoded_value_with_basehjPKhPj+0x48>
 1007d2c:	10096d00 	call	10096d0 <abort>
 1007d30:	18c5883a 	add	r2,r3,r3
 1007d34:	1085883a 	add	r2,r2,r2
 1007d38:	00c04034 	movhi	r3,256
 1007d3c:	18df5304 	addi	r3,r3,32076
 1007d40:	10c5883a 	add	r2,r2,r3
 1007d44:	11000017 	ldw	r4,0(r2)
 1007d48:	2000683a 	jmp	r4
 1007d4c:	01007dbc 	xorhi	r4,zero,502
 1007d50:	01007ea4 	muli	r4,zero,506
 1007d54:	01007e50 	cmplti	r4,zero,505
 1007d58:	01007dbc 	xorhi	r4,zero,502
 1007d5c:	01007e14 	movui	r4,504
 1007d60:	01007d2c 	andhi	r4,zero,500
 1007d64:	01007d2c 	andhi	r4,zero,500
 1007d68:	01007d2c 	andhi	r4,zero,500
 1007d6c:	01007d2c 	andhi	r4,zero,500
 1007d70:	01007e8c 	andi	r4,zero,506
 1007d74:	01007e68 	cmpgeui	r4,zero,505
 1007d78:	01007dbc 	xorhi	r4,zero,502
 1007d7c:	01007e14 	movui	r4,504
 1007d80:	308000c4 	addi	r2,r6,3
 1007d84:	00ffff04 	movi	r3,-4
 1007d88:	10c4703a 	and	r2,r2,r3
 1007d8c:	11000017 	ldw	r4,0(r2)
 1007d90:	11400104 	addi	r5,r2,4
 1007d94:	2805883a 	mov	r2,r5
 1007d98:	99000015 	stw	r4,0(r19)
 1007d9c:	dfc00617 	ldw	ra,24(sp)
 1007da0:	dd000517 	ldw	r20,20(sp)
 1007da4:	dcc00417 	ldw	r19,16(sp)
 1007da8:	dc800317 	ldw	r18,12(sp)
 1007dac:	dc400217 	ldw	r17,8(sp)
 1007db0:	dc000117 	ldw	r16,4(sp)
 1007db4:	dec00704 	addi	sp,sp,28
 1007db8:	f800283a 	ret
 1007dbc:	30800043 	ldbu	r2,1(r6)
 1007dc0:	30c00083 	ldbu	r3,2(r6)
 1007dc4:	310000c3 	ldbu	r4,3(r6)
 1007dc8:	31400003 	ldbu	r5,0(r6)
 1007dcc:	1004923a 	slli	r2,r2,8
 1007dd0:	1806943a 	slli	r3,r3,16
 1007dd4:	2008963a 	slli	r4,r4,24
 1007dd8:	1144b03a 	or	r2,r2,r5
 1007ddc:	1886b03a 	or	r3,r3,r2
 1007de0:	20c8b03a 	or	r4,r4,r3
 1007de4:	31400104 	addi	r5,r6,4
 1007de8:	203fea26 	beq	r4,zero,1007d94 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 1007dec:	88c01c0c 	andi	r3,r17,112
 1007df0:	00800404 	movi	r2,16
 1007df4:	18801426 	beq	r3,r2,1007e48 <_Z28read_encoded_value_with_basehjPKhPj+0x160>
 1007df8:	90803fcc 	andi	r2,r18,255
 1007dfc:	1080201c 	xori	r2,r2,128
 1007e00:	10bfe004 	addi	r2,r2,-128
 1007e04:	2509883a 	add	r4,r4,r20
 1007e08:	103fe20e 	bge	r2,zero,1007d94 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 1007e0c:	21000017 	ldw	r4,0(r4)
 1007e10:	003fe006 	br	1007d94 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 1007e14:	30800043 	ldbu	r2,1(r6)
 1007e18:	31800083 	ldbu	r6,2(r6)
 1007e1c:	820000c3 	ldbu	r8,3(r16)
 1007e20:	1004923a 	slli	r2,r2,8
 1007e24:	82400003 	ldbu	r9,0(r16)
 1007e28:	300c943a 	slli	r6,r6,16
 1007e2c:	4010963a 	slli	r8,r8,24
 1007e30:	1244b03a 	or	r2,r2,r9
 1007e34:	308cb03a 	or	r6,r6,r2
 1007e38:	4184b03a 	or	r2,r8,r6
 1007e3c:	1009883a 	mov	r4,r2
 1007e40:	81400204 	addi	r5,r16,8
 1007e44:	003fe806 	br	1007de8 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 1007e48:	8029883a 	mov	r20,r16
 1007e4c:	003fea06 	br	1007df8 <_Z28read_encoded_value_with_basehjPKhPj+0x110>
 1007e50:	30800043 	ldbu	r2,1(r6)
 1007e54:	30c00003 	ldbu	r3,0(r6)
 1007e58:	31400084 	addi	r5,r6,2
 1007e5c:	1004923a 	slli	r2,r2,8
 1007e60:	10c8b03a 	or	r4,r2,r3
 1007e64:	003fe006 	br	1007de8 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 1007e68:	30800043 	ldbu	r2,1(r6)
 1007e6c:	30c00003 	ldbu	r3,0(r6)
 1007e70:	31400084 	addi	r5,r6,2
 1007e74:	1004923a 	slli	r2,r2,8
 1007e78:	10c4b03a 	or	r2,r2,r3
 1007e7c:	113fffcc 	andi	r4,r2,65535
 1007e80:	2120001c 	xori	r4,r4,32768
 1007e84:	21200004 	addi	r4,r4,-32768
 1007e88:	003fd706 	br	1007de8 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 1007e8c:	3009883a 	mov	r4,r6
 1007e90:	d80b883a 	mov	r5,sp
 1007e94:	1007bf80 	call	1007bf8 <_Z12read_sleb128PKhPi>
 1007e98:	d9000017 	ldw	r4,0(sp)
 1007e9c:	100b883a 	mov	r5,r2
 1007ea0:	003fd106 	br	1007de8 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 1007ea4:	3009883a 	mov	r4,r6
 1007ea8:	d80b883a 	mov	r5,sp
 1007eac:	1007bc80 	call	1007bc8 <_Z12read_uleb128PKhPj>
 1007eb0:	d9000017 	ldw	r4,0(sp)
 1007eb4:	100b883a 	mov	r5,r2
 1007eb8:	003fcb06 	br	1007de8 <_Z28read_encoded_value_with_basehjPKhPj+0x100>

01007ebc <_Z21base_of_encoded_valuehP15_Unwind_Context>:
 1007ebc:	deffff04 	addi	sp,sp,-4
 1007ec0:	21003fcc 	andi	r4,r4,255
 1007ec4:	00803fc4 	movi	r2,255
 1007ec8:	dfc00015 	stw	ra,0(sp)
 1007ecc:	20800c26 	beq	r4,r2,1007f00 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 1007ed0:	21001c0c 	andi	r4,r4,112
 1007ed4:	00800804 	movi	r2,32
 1007ed8:	20800d26 	beq	r4,r2,1007f10 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
 1007edc:	1100070e 	bge	r2,r4,1007efc <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
 1007ee0:	00801004 	movi	r2,64
 1007ee4:	20801126 	beq	r4,r2,1007f2c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
 1007ee8:	00801404 	movi	r2,80
 1007eec:	20800426 	beq	r4,r2,1007f00 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 1007ef0:	00800c04 	movi	r2,48
 1007ef4:	20801126 	beq	r4,r2,1007f3c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
 1007ef8:	10096d00 	call	10096d0 <abort>
 1007efc:	2000081e 	bne	r4,zero,1007f20 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
 1007f00:	0005883a 	mov	r2,zero
 1007f04:	dfc00017 	ldw	ra,0(sp)
 1007f08:	dec00104 	addi	sp,sp,4
 1007f0c:	f800283a 	ret
 1007f10:	2809883a 	mov	r4,r5
 1007f14:	dfc00017 	ldw	ra,0(sp)
 1007f18:	dec00104 	addi	sp,sp,4
 1007f1c:	10092401 	jmpi	1009240 <_Unwind_GetTextRelBase>
 1007f20:	00800404 	movi	r2,16
 1007f24:	20bff626 	beq	r4,r2,1007f00 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 1007f28:	10096d00 	call	10096d0 <abort>
 1007f2c:	2809883a 	mov	r4,r5
 1007f30:	dfc00017 	ldw	ra,0(sp)
 1007f34:	dec00104 	addi	sp,sp,4
 1007f38:	10092281 	jmpi	1009228 <_Unwind_GetRegionStart>
 1007f3c:	2809883a 	mov	r4,r5
 1007f40:	dfc00017 	ldw	ra,0(sp)
 1007f44:	dec00104 	addi	sp,sp,4
 1007f48:	10092381 	jmpi	1009238 <_Unwind_GetDataRelBase>

01007f4c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 1007f4c:	defffa04 	addi	sp,sp,-24
 1007f50:	dc800415 	stw	r18,16(sp)
 1007f54:	dc400315 	stw	r17,12(sp)
 1007f58:	dc000215 	stw	r16,8(sp)
 1007f5c:	dfc00515 	stw	ra,20(sp)
 1007f60:	2021883a 	mov	r16,r4
 1007f64:	000f883a 	mov	r7,zero
 1007f68:	3023883a 	mov	r17,r6
 1007f6c:	2825883a 	mov	r18,r5
 1007f70:	20000226 	beq	r4,zero,1007f7c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 1007f74:	10092280 	call	1009228 <_Unwind_GetRegionStart>
 1007f78:	100f883a 	mov	r7,r2
 1007f7c:	89c00015 	stw	r7,0(r17)
 1007f80:	90c00003 	ldbu	r3,0(r18)
 1007f84:	800b883a 	mov	r5,r16
 1007f88:	00803fc4 	movi	r2,255
 1007f8c:	1c003fcc 	andi	r16,r3,255
 1007f90:	91800044 	addi	r6,r18,1
 1007f94:	8009883a 	mov	r4,r16
 1007f98:	18802226 	beq	r3,r2,1008024 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
 1007f9c:	d9800115 	stw	r6,4(sp)
 1007fa0:	1007ebc0 	call	1007ebc <_Z21base_of_encoded_valuehP15_Unwind_Context>
 1007fa4:	d9800117 	ldw	r6,4(sp)
 1007fa8:	8009883a 	mov	r4,r16
 1007fac:	100b883a 	mov	r5,r2
 1007fb0:	89c00104 	addi	r7,r17,4
 1007fb4:	1007ce80 	call	1007ce8 <_Z28read_encoded_value_with_basehjPKhPj>
 1007fb8:	100d883a 	mov	r6,r2
 1007fbc:	30800003 	ldbu	r2,0(r6)
 1007fc0:	31c00044 	addi	r7,r6,1
 1007fc4:	00c03fc4 	movi	r3,255
 1007fc8:	d80b883a 	mov	r5,sp
 1007fcc:	3809883a 	mov	r4,r7
 1007fd0:	88800505 	stb	r2,20(r17)
 1007fd4:	10c01b26 	beq	r2,r3,1008044 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
 1007fd8:	1007bc80 	call	1007bc8 <_Z12read_uleb128PKhPj>
 1007fdc:	100f883a 	mov	r7,r2
 1007fe0:	d8800017 	ldw	r2,0(sp)
 1007fe4:	3885883a 	add	r2,r7,r2
 1007fe8:	88800315 	stw	r2,12(r17)
 1007fec:	38800003 	ldbu	r2,0(r7)
 1007ff0:	39000044 	addi	r4,r7,1
 1007ff4:	d80b883a 	mov	r5,sp
 1007ff8:	88800545 	stb	r2,21(r17)
 1007ffc:	1007bc80 	call	1007bc8 <_Z12read_uleb128PKhPj>
 1008000:	d8c00017 	ldw	r3,0(sp)
 1008004:	10c9883a 	add	r4,r2,r3
 1008008:	89000415 	stw	r4,16(r17)
 100800c:	dfc00517 	ldw	ra,20(sp)
 1008010:	dc800417 	ldw	r18,16(sp)
 1008014:	dc400317 	ldw	r17,12(sp)
 1008018:	dc000217 	ldw	r16,8(sp)
 100801c:	dec00604 	addi	sp,sp,24
 1008020:	f800283a 	ret
 1008024:	89c00115 	stw	r7,4(r17)
 1008028:	30800003 	ldbu	r2,0(r6)
 100802c:	31c00044 	addi	r7,r6,1
 1008030:	00c03fc4 	movi	r3,255
 1008034:	d80b883a 	mov	r5,sp
 1008038:	3809883a 	mov	r4,r7
 100803c:	88800505 	stb	r2,20(r17)
 1008040:	10ffe51e 	bne	r2,r3,1007fd8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
 1008044:	88000315 	stw	zero,12(r17)
 1008048:	003fe806 	br	1007fec <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

0100804c <_Z15get_ttype_entryP16lsda_header_infoj>:
 100804c:	defffe04 	addi	sp,sp,-8
 1008050:	dfc00115 	stw	ra,4(sp)
 1008054:	21c00503 	ldbu	r7,20(r4)
 1008058:	00803fc4 	movi	r2,255
 100805c:	38801a26 	beq	r7,r2,10080c8 <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
 1008060:	38c001cc 	andi	r3,r7,7
 1008064:	00800084 	movi	r2,2
 1008068:	18801326 	beq	r3,r2,10080b8 <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
 100806c:	10c0050e 	bge	r2,r3,1008084 <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
 1008070:	008000c4 	movi	r2,3
 1008074:	18800426 	beq	r3,r2,1008088 <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
 1008078:	00800104 	movi	r2,4
 100807c:	18801026 	beq	r3,r2,10080c0 <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
 1008080:	10096d00 	call	10096d0 <abort>
 1008084:	183ffe1e 	bne	r3,zero,1008080 <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
 1008088:	2945883a 	add	r2,r5,r5
 100808c:	1085883a 	add	r2,r2,r2
 1008090:	21800317 	ldw	r6,12(r4)
 1008094:	21400217 	ldw	r5,8(r4)
 1008098:	3809883a 	mov	r4,r7
 100809c:	308dc83a 	sub	r6,r6,r2
 10080a0:	d80f883a 	mov	r7,sp
 10080a4:	1007ce80 	call	1007ce8 <_Z28read_encoded_value_with_basehjPKhPj>
 10080a8:	d8800017 	ldw	r2,0(sp)
 10080ac:	dfc00117 	ldw	ra,4(sp)
 10080b0:	dec00204 	addi	sp,sp,8
 10080b4:	f800283a 	ret
 10080b8:	2945883a 	add	r2,r5,r5
 10080bc:	003ff406 	br	1008090 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 10080c0:	280490fa 	slli	r2,r5,3
 10080c4:	003ff206 	br	1008090 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 10080c8:	0005883a 	mov	r2,zero
 10080cc:	003ff006 	br	1008090 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

010080d0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
 10080d0:	20800317 	ldw	r2,12(r4)
 10080d4:	defffa04 	addi	sp,sp,-24
 10080d8:	dc800415 	stw	r18,16(sp)
 10080dc:	11c5c83a 	sub	r2,r2,r7
 10080e0:	dc400315 	stw	r17,12(sp)
 10080e4:	dc000215 	stw	r16,8(sp)
 10080e8:	dfc00515 	stw	ra,20(sp)
 10080ec:	2023883a 	mov	r17,r4
 10080f0:	d9800115 	stw	r6,4(sp)
 10080f4:	2825883a 	mov	r18,r5
 10080f8:	143fffc4 	addi	r16,r2,-1
 10080fc:	8009883a 	mov	r4,r16
 1008100:	d80b883a 	mov	r5,sp
 1008104:	1007bc80 	call	1007bc8 <_Z12read_uleb128PKhPj>
 1008108:	1021883a 	mov	r16,r2
 100810c:	d8800017 	ldw	r2,0(sp)
 1008110:	8809883a 	mov	r4,r17
 1008114:	100b883a 	mov	r5,r2
 1008118:	10000826 	beq	r2,zero,100813c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
 100811c:	100804c0 	call	100804c <_Z15get_ttype_entryP16lsda_header_infoj>
 1008120:	1009883a 	mov	r4,r2
 1008124:	900b883a 	mov	r5,r18
 1008128:	d9800104 	addi	r6,sp,4
 100812c:	1007c4c0 	call	1007c4c <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 1008130:	10803fcc 	andi	r2,r2,255
 1008134:	103ff126 	beq	r2,zero,10080fc <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
 1008138:	00800044 	movi	r2,1
 100813c:	dfc00517 	ldw	ra,20(sp)
 1008140:	dc800417 	ldw	r18,16(sp)
 1008144:	dc400317 	ldw	r17,12(sp)
 1008148:	dc000217 	ldw	r16,8(sp)
 100814c:	dec00604 	addi	sp,sp,24
 1008150:	f800283a 	ret

01008154 <__cxa_call_unexpected>:
 1008154:	deffe204 	addi	sp,sp,-120
 1008158:	00804074 	movhi	r2,257
 100815c:	10a0b504 	addi	r2,r2,-32044
 1008160:	00c040b4 	movhi	r3,258
 1008164:	18fb5404 	addi	r3,r3,-4784
 1008168:	d8800c15 	stw	r2,48(sp)
 100816c:	d9001815 	stw	r4,96(sp)
 1008170:	00804074 	movhi	r2,257
 1008174:	10a07704 	addi	r2,r2,-32292
 1008178:	d9000604 	addi	r4,sp,24
 100817c:	d8c00d15 	stw	r3,52(sp)
 1008180:	dfc01d15 	stw	ra,116(sp)
 1008184:	d8800f15 	stw	r2,60(sp)
 1008188:	df001c15 	stw	fp,112(sp)
 100818c:	ddc01b15 	stw	r23,108(sp)
 1008190:	dec00e15 	stw	sp,56(sp)
 1008194:	dec01015 	stw	sp,64(sp)
 1008198:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 100819c:	d9001817 	ldw	r4,96(sp)
 10081a0:	100898c0 	call	100898c <__cxa_begin_catch>
 10081a4:	d8801817 	ldw	r2,96(sp)
 10081a8:	10fff504 	addi	r3,r2,-44
 10081ac:	18800917 	ldw	r2,36(r3)
 10081b0:	19400617 	ldw	r5,24(r3)
 10081b4:	19000217 	ldw	r4,8(r3)
 10081b8:	d8800215 	stw	r2,8(sp)
 10081bc:	18800817 	ldw	r2,32(r3)
 10081c0:	18c00317 	ldw	r3,12(r3)
 10081c4:	d9401615 	stw	r5,88(sp)
 10081c8:	d8801715 	stw	r2,92(sp)
 10081cc:	00800084 	movi	r2,2
 10081d0:	d8c01515 	stw	r3,84(sp)
 10081d4:	d8800715 	stw	r2,28(sp)
 10081d8:	10088980 	call	1008898 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 10081dc:	d8800717 	ldw	r2,28(sp)
 10081e0:	d8c00817 	ldw	r3,32(sp)
 10081e4:	d8801a15 	stw	r2,104(sp)
 10081e8:	d9401a17 	ldw	r5,104(sp)
 10081ec:	00800044 	movi	r2,1
 10081f0:	d8c01915 	stw	r3,100(sp)
 10081f4:	28800826 	beq	r5,r2,1008218 <__cxa_call_unexpected+0xc4>
 10081f8:	d8000715 	stw	zero,28(sp)
 10081fc:	10088e80 	call	10088e8 <__cxa_end_catch>
 1008200:	d8000715 	stw	zero,28(sp)
 1008204:	10088e80 	call	10088e8 <__cxa_end_catch>
 1008208:	d9001917 	ldw	r4,100(sp)
 100820c:	00bfffc4 	movi	r2,-1
 1008210:	d8800715 	stw	r2,28(sp)
 1008214:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1008218:	d9001917 	ldw	r4,100(sp)
 100821c:	100898c0 	call	100898c <__cxa_begin_catch>
 1008220:	10091780 	call	1009178 <__cxa_get_globals_fast>
 1008224:	10800017 	ldw	r2,0(r2)
 1008228:	d8c01a17 	ldw	r3,104(sp)
 100822c:	0009883a 	mov	r4,zero
 1008230:	11401004 	addi	r5,r2,64
 1008234:	d9401315 	stw	r5,76(sp)
 1008238:	d8801415 	stw	r2,80(sp)
 100823c:	d8c00715 	stw	r3,28(sp)
 1008240:	d9401717 	ldw	r5,92(sp)
 1008244:	d80d883a 	mov	r6,sp
 1008248:	1007f4c0 	call	1007f4c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 100824c:	d8801417 	ldw	r2,80(sp)
 1008250:	d809883a 	mov	r4,sp
 1008254:	d9801317 	ldw	r6,76(sp)
 1008258:	11400017 	ldw	r5,0(r2)
 100825c:	d9c01617 	ldw	r7,88(sp)
 1008260:	10080d00 	call	10080d0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 1008264:	10803fcc 	andi	r2,r2,255
 1008268:	1000151e 	bne	r2,zero,10082c0 <__cxa_call_unexpected+0x16c>
 100826c:	d8c01a17 	ldw	r3,104(sp)
 1008270:	d809883a 	mov	r4,sp
 1008274:	014040b4 	movhi	r5,258
 1008278:	297c8304 	addi	r5,r5,-3572
 100827c:	d8c00715 	stw	r3,28(sp)
 1008280:	000d883a 	mov	r6,zero
 1008284:	d9c01617 	ldw	r7,88(sp)
 1008288:	10080d00 	call	10080d0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 100828c:	10803fcc 	andi	r2,r2,255
 1008290:	10000c26 	beq	r2,zero,10082c4 <__cxa_call_unexpected+0x170>
 1008294:	01000104 	movi	r4,4
 1008298:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 100829c:	1009883a 	mov	r4,r2
 10082a0:	008040b4 	movhi	r2,258
 10082a4:	10bc7604 	addi	r2,r2,-3624
 10082a8:	20800015 	stw	r2,0(r4)
 10082ac:	014040b4 	movhi	r5,258
 10082b0:	297c8304 	addi	r5,r5,-3572
 10082b4:	01804034 	movhi	r6,256
 10082b8:	319e6304 	addi	r6,r6,31116
 10082bc:	1008b240 	call	1008b24 <__cxa_throw>
 10082c0:	1008ab00 	call	1008ab0 <__cxa_rethrow>
 10082c4:	d9401a17 	ldw	r5,104(sp)
 10082c8:	d9001517 	ldw	r4,84(sp)
 10082cc:	d9400715 	stw	r5,28(sp)
 10082d0:	10087dc0 	call	10087dc <_ZN10__cxxabiv111__terminateEPFvvE>

010082d4 <__gxx_personality_sj0>:
 10082d4:	deffd304 	addi	sp,sp,-180
 10082d8:	00804074 	movhi	r2,257
 10082dc:	10a1dc04 	addi	r2,r2,-30864
 10082e0:	00c040b4 	movhi	r3,258
 10082e4:	18fb5804 	addi	r3,r3,-4768
 10082e8:	d8801315 	stw	r2,76(sp)
 10082ec:	d9002315 	stw	r4,140(sp)
 10082f0:	00804074 	movhi	r2,257
 10082f4:	10a0b504 	addi	r2,r2,-32044
 10082f8:	d9000a04 	addi	r4,sp,40
 10082fc:	d8801015 	stw	r2,64(sp)
 1008300:	d8c01115 	stw	r3,68(sp)
 1008304:	dfc02c15 	stw	ra,176(sp)
 1008308:	df002b15 	stw	fp,172(sp)
 100830c:	ddc02a15 	stw	r23,168(sp)
 1008310:	dec01215 	stw	sp,72(sp)
 1008314:	dec01415 	stw	sp,80(sp)
 1008318:	d9802515 	stw	r6,148(sp)
 100831c:	d9402415 	stw	r5,144(sp)
 1008320:	d9c02615 	stw	r7,152(sp)
 1008324:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1008328:	d8c02317 	ldw	r3,140(sp)
 100832c:	00800044 	movi	r2,1
 1008330:	18800a26 	beq	r3,r2,100835c <__gxx_personality_sj0+0x88>
 1008334:	010000c4 	movi	r4,3
 1008338:	d9002215 	stw	r4,136(sp)
 100833c:	d9000a04 	addi	r4,sp,40
 1008340:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1008344:	d8802217 	ldw	r2,136(sp)
 1008348:	dfc02c17 	ldw	ra,176(sp)
 100834c:	df002b17 	ldw	fp,172(sp)
 1008350:	ddc02a17 	ldw	r23,168(sp)
 1008354:	dec02d04 	addi	sp,sp,180
 1008358:	f800283a 	ret
 100835c:	d9402d17 	ldw	r5,180(sp)
 1008360:	d9002517 	ldw	r4,148(sp)
 1008364:	0007883a 	mov	r3,zero
 1008368:	28800504 	addi	r2,r5,20
 100836c:	d8800015 	stw	r2,0(sp)
 1008370:	28bff504 	addi	r2,r5,-44
 1008374:	d8801a15 	stw	r2,104(sp)
 1008378:	0090caf4 	movhi	r2,17195
 100837c:	108ac004 	addi	r2,r2,11008
 1008380:	2080ad26 	beq	r4,r2,1008638 <__gxx_personality_sj0+0x364>
 1008384:	d8c02105 	stb	r3,132(sp)
 1008388:	d8c02417 	ldw	r3,144(sp)
 100838c:	00800184 	movi	r2,6
 1008390:	1880281e 	bne	r3,r2,1008434 <__gxx_personality_sj0+0x160>
 1008394:	d8802103 	ldbu	r2,132(sp)
 1008398:	10002626 	beq	r2,zero,1008434 <__gxx_personality_sj0+0x160>
 100839c:	d9001a17 	ldw	r4,104(sp)
 10083a0:	d9401a17 	ldw	r5,104(sp)
 10083a4:	d8801a17 	ldw	r2,104(sp)
 10083a8:	21000917 	ldw	r4,36(r4)
 10083ac:	29400617 	ldw	r5,24(r5)
 10083b0:	10800817 	ldw	r2,32(r2)
 10083b4:	d9001d15 	stw	r4,116(sp)
 10083b8:	d9401b15 	stw	r5,108(sp)
 10083bc:	d8802015 	stw	r2,128(sp)
 10083c0:	2000ad1e 	bne	r4,zero,1008678 <__gxx_personality_sj0+0x3a4>
 10083c4:	01000044 	movi	r4,1
 10083c8:	00800044 	movi	r2,1
 10083cc:	2080e126 	beq	r4,r2,1008754 <__gxx_personality_sj0+0x480>
 10083d0:	d8801b17 	ldw	r2,108(sp)
 10083d4:	1000d316 	blt	r2,zero,1008724 <__gxx_personality_sj0+0x450>
 10083d8:	d9802d17 	ldw	r6,180(sp)
 10083dc:	d9002e17 	ldw	r4,184(sp)
 10083e0:	00bfffc4 	movi	r2,-1
 10083e4:	000b883a 	mov	r5,zero
 10083e8:	d8800b15 	stw	r2,44(sp)
 10083ec:	10091d00 	call	10091d0 <_Unwind_SetGR>
 10083f0:	d9801b17 	ldw	r6,108(sp)
 10083f4:	d9002e17 	ldw	r4,184(sp)
 10083f8:	01400044 	movi	r5,1
 10083fc:	10091d00 	call	10091d0 <_Unwind_SetGR>
 1008400:	d9002e17 	ldw	r4,184(sp)
 1008404:	d9401d17 	ldw	r5,116(sp)
 1008408:	100920c0 	call	100920c <_Unwind_SetIP>
 100840c:	010001c4 	movi	r4,7
 1008410:	d9002215 	stw	r4,136(sp)
 1008414:	d9000a04 	addi	r4,sp,40
 1008418:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 100841c:	d8802217 	ldw	r2,136(sp)
 1008420:	dfc02c17 	ldw	ra,176(sp)
 1008424:	df002b17 	ldw	fp,172(sp)
 1008428:	ddc02a17 	ldw	r23,168(sp)
 100842c:	dec02d04 	addi	sp,sp,180
 1008430:	f800283a 	ret
 1008434:	d9002e17 	ldw	r4,184(sp)
 1008438:	00ffffc4 	movi	r3,-1
 100843c:	d8c00b15 	stw	r3,44(sp)
 1008440:	100921c0 	call	100921c <_Unwind_GetLanguageSpecificData>
 1008444:	10007226 	beq	r2,zero,1008610 <__gxx_personality_sj0+0x33c>
 1008448:	d9002e17 	ldw	r4,184(sp)
 100844c:	d9800404 	addi	r6,sp,16
 1008450:	100b883a 	mov	r5,r2
 1008454:	d8802015 	stw	r2,128(sp)
 1008458:	1007f4c0 	call	1007f4c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 100845c:	d9000903 	ldbu	r4,36(sp)
 1008460:	d9402e17 	ldw	r5,184(sp)
 1008464:	d8801e15 	stw	r2,120(sp)
 1008468:	1007ebc0 	call	1007ebc <_Z21base_of_encoded_valuehP15_Unwind_Context>
 100846c:	d9002e17 	ldw	r4,184(sp)
 1008470:	d8800615 	stw	r2,24(sp)
 1008474:	10091e80 	call	10091e8 <_Unwind_GetIP>
 1008478:	10bfffc4 	addi	r2,r2,-1
 100847c:	d8801c15 	stw	r2,112(sp)
 1008480:	10006316 	blt	r2,zero,1008610 <__gxx_personality_sj0+0x33c>
 1008484:	10001b1e 	bne	r2,zero,10084f4 <__gxx_personality_sj0+0x220>
 1008488:	01000044 	movi	r4,1
 100848c:	d8001f15 	stw	zero,124(sp)
 1008490:	d8001d15 	stw	zero,116(sp)
 1008494:	d8001b15 	stw	zero,108(sp)
 1008498:	d9402417 	ldw	r5,144(sp)
 100849c:	00c00044 	movi	r3,1
 10084a0:	28c4703a 	and	r2,r5,r3
 10084a4:	1005003a 	cmpeq	r2,r2,zero
 10084a8:	10006a1e 	bne	r2,zero,1008654 <__gxx_personality_sj0+0x380>
 10084ac:	00800084 	movi	r2,2
 10084b0:	20805726 	beq	r4,r2,1008610 <__gxx_personality_sj0+0x33c>
 10084b4:	d8802103 	ldbu	r2,132(sp)
 10084b8:	10008626 	beq	r2,zero,10086d4 <__gxx_personality_sj0+0x400>
 10084bc:	d9001a17 	ldw	r4,104(sp)
 10084c0:	d9401d17 	ldw	r5,116(sp)
 10084c4:	d8801b17 	ldw	r2,108(sp)
 10084c8:	00c00184 	movi	r3,6
 10084cc:	d8c02215 	stw	r3,136(sp)
 10084d0:	21400915 	stw	r5,36(r4)
 10084d4:	20800615 	stw	r2,24(r4)
 10084d8:	d8c01f17 	ldw	r3,124(sp)
 10084dc:	d9402017 	ldw	r5,128(sp)
 10084e0:	d8800017 	ldw	r2,0(sp)
 10084e4:	20c00715 	stw	r3,28(r4)
 10084e8:	21400815 	stw	r5,32(r4)
 10084ec:	20800a15 	stw	r2,40(r4)
 10084f0:	003f9206 	br	100833c <__gxx_personality_sj0+0x68>
 10084f4:	d9001e17 	ldw	r4,120(sp)
 10084f8:	d9400204 	addi	r5,sp,8
 10084fc:	1007bc80 	call	1007bc8 <_Z12read_uleb128PKhPj>
 1008500:	d9401c17 	ldw	r5,112(sp)
 1008504:	1009883a 	mov	r4,r2
 1008508:	297fffc4 	addi	r5,r5,-1
 100850c:	d9401c15 	stw	r5,112(sp)
 1008510:	d9400104 	addi	r5,sp,4
 1008514:	1007bc80 	call	1007bc8 <_Z12read_uleb128PKhPj>
 1008518:	d8801e15 	stw	r2,120(sp)
 100851c:	d8801c17 	ldw	r2,112(sp)
 1008520:	103ff41e 	bne	r2,zero,10084f4 <__gxx_personality_sj0+0x220>
 1008524:	d8800217 	ldw	r2,8(sp)
 1008528:	d8c00117 	ldw	r3,4(sp)
 100852c:	01000044 	movi	r4,1
 1008530:	1105883a 	add	r2,r2,r4
 1008534:	d8801d15 	stw	r2,116(sp)
 1008538:	1800541e 	bne	r3,zero,100868c <__gxx_personality_sj0+0x3b8>
 100853c:	d8001f15 	stw	zero,124(sp)
 1008540:	d8c01d17 	ldw	r3,116(sp)
 1008544:	18003226 	beq	r3,zero,1008610 <__gxx_personality_sj0+0x33c>
 1008548:	d9001f17 	ldw	r4,124(sp)
 100854c:	20007226 	beq	r4,zero,1008718 <__gxx_personality_sj0+0x444>
 1008550:	d9402417 	ldw	r5,144(sp)
 1008554:	2880020c 	andi	r2,r5,8
 1008558:	10006a1e 	bne	r2,zero,1008704 <__gxx_personality_sj0+0x430>
 100855c:	d8802103 	ldbu	r2,132(sp)
 1008560:	10006826 	beq	r2,zero,1008704 <__gxx_personality_sj0+0x430>
 1008564:	d8801a17 	ldw	r2,104(sp)
 1008568:	10800017 	ldw	r2,0(r2)
 100856c:	d8801915 	stw	r2,100(sp)
 1008570:	d8c01917 	ldw	r3,100(sp)
 1008574:	d8001805 	stb	zero,96(sp)
 1008578:	1807003a 	cmpeq	r3,r3,zero
 100857c:	d8c02715 	stw	r3,156(sp)
 1008580:	00000706 	br	10085a0 <__gxx_personality_sj0+0x2cc>
 1008584:	01000044 	movi	r4,1
 1008588:	d9001805 	stb	r4,96(sp)
 100858c:	d8800217 	ldw	r2,8(sp)
 1008590:	10005e26 	beq	r2,zero,100870c <__gxx_personality_sj0+0x438>
 1008594:	d8c01717 	ldw	r3,92(sp)
 1008598:	1885883a 	add	r2,r3,r2
 100859c:	d8801f15 	stw	r2,124(sp)
 10085a0:	d9001f17 	ldw	r4,124(sp)
 10085a4:	d9400104 	addi	r5,sp,4
 10085a8:	1007bf80 	call	1007bf8 <_Z12read_sleb128PKhPi>
 10085ac:	1009883a 	mov	r4,r2
 10085b0:	d9400204 	addi	r5,sp,8
 10085b4:	d8801715 	stw	r2,92(sp)
 10085b8:	1007bf80 	call	1007bf8 <_Z12read_sleb128PKhPi>
 10085bc:	d8800117 	ldw	r2,4(sp)
 10085c0:	103ff026 	beq	r2,zero,1008584 <__gxx_personality_sj0+0x2b0>
 10085c4:	0080360e 	bge	zero,r2,10086a0 <__gxx_personality_sj0+0x3cc>
 10085c8:	017fffc4 	movi	r5,-1
 10085cc:	d9400b15 	stw	r5,44(sp)
 10085d0:	d9000404 	addi	r4,sp,16
 10085d4:	100b883a 	mov	r5,r2
 10085d8:	100804c0 	call	100804c <_Z15get_ttype_entryP16lsda_header_infoj>
 10085dc:	10000826 	beq	r2,zero,1008600 <__gxx_personality_sj0+0x32c>
 10085e0:	d8c02717 	ldw	r3,156(sp)
 10085e4:	183fe91e 	bne	r3,zero,100858c <__gxx_personality_sj0+0x2b8>
 10085e8:	d9401917 	ldw	r5,100(sp)
 10085ec:	1009883a 	mov	r4,r2
 10085f0:	d80d883a 	mov	r6,sp
 10085f4:	1007c4c0 	call	1007c4c <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 10085f8:	10803fcc 	andi	r2,r2,255
 10085fc:	103fe326 	beq	r2,zero,100858c <__gxx_personality_sj0+0x2b8>
 1008600:	d9000117 	ldw	r4,4(sp)
 1008604:	d9001b15 	stw	r4,108(sp)
 1008608:	010000c4 	movi	r4,3
 100860c:	003fa206 	br	1008498 <__gxx_personality_sj0+0x1c4>
 1008610:	01400204 	movi	r5,8
 1008614:	d9000a04 	addi	r4,sp,40
 1008618:	d9402215 	stw	r5,136(sp)
 100861c:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1008620:	d8802217 	ldw	r2,136(sp)
 1008624:	dfc02c17 	ldw	ra,176(sp)
 1008628:	df002b17 	ldw	fp,172(sp)
 100862c:	ddc02a17 	ldw	r23,168(sp)
 1008630:	dec02d04 	addi	sp,sp,180
 1008634:	f800283a 	ret
 1008638:	d9402617 	ldw	r5,152(sp)
 100863c:	0091d3b4 	movhi	r2,18254
 1008640:	109550c4 	addi	r2,r2,21827
 1008644:	28bf4f1e 	bne	r5,r2,1008384 <__gxx_personality_sj0+0xb0>
 1008648:	d8802317 	ldw	r2,140(sp)
 100864c:	1007883a 	mov	r3,r2
 1008650:	003f4c06 	br	1008384 <__gxx_personality_sj0+0xb0>
 1008654:	d9402417 	ldw	r5,144(sp)
 1008658:	2880020c 	andi	r2,r5,8
 100865c:	10000826 	beq	r2,zero,1008680 <__gxx_personality_sj0+0x3ac>
 1008660:	20c04026 	beq	r4,r3,1008764 <__gxx_personality_sj0+0x490>
 1008664:	d8801b17 	ldw	r2,108(sp)
 1008668:	103f5b0e 	bge	r2,zero,10083d8 <__gxx_personality_sj0+0x104>
 100866c:	00800084 	movi	r2,2
 1008670:	d8800b15 	stw	r2,44(sp)
 1008674:	10088a80 	call	10088a8 <_ZSt10unexpectedv>
 1008678:	010000c4 	movi	r4,3
 100867c:	003f5206 	br	10083c8 <__gxx_personality_sj0+0xf4>
 1008680:	d8802103 	ldbu	r2,132(sp)
 1008684:	103f501e 	bne	r2,zero,10083c8 <__gxx_personality_sj0+0xf4>
 1008688:	003ff506 	br	1008660 <__gxx_personality_sj0+0x38c>
 100868c:	d8800817 	ldw	r2,32(sp)
 1008690:	1885883a 	add	r2,r3,r2
 1008694:	1105c83a 	sub	r2,r2,r4
 1008698:	d8801f15 	stw	r2,124(sp)
 100869c:	003fa806 	br	1008540 <__gxx_personality_sj0+0x26c>
 10086a0:	d9002717 	ldw	r4,156(sp)
 10086a4:	20000e1e 	bne	r4,zero,10086e0 <__gxx_personality_sj0+0x40c>
 10086a8:	017fffc4 	movi	r5,-1
 10086ac:	d9400b15 	stw	r5,44(sp)
 10086b0:	d9800017 	ldw	r6,0(sp)
 10086b4:	d9401917 	ldw	r5,100(sp)
 10086b8:	100f883a 	mov	r7,r2
 10086bc:	d9000404 	addi	r4,sp,16
 10086c0:	10080d00 	call	10080d0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 10086c4:	1080005c 	xori	r2,r2,1
 10086c8:	10803fcc 	andi	r2,r2,255
 10086cc:	103faf26 	beq	r2,zero,100858c <__gxx_personality_sj0+0x2b8>
 10086d0:	003fcb06 	br	1008600 <__gxx_personality_sj0+0x32c>
 10086d4:	00800184 	movi	r2,6
 10086d8:	d8802215 	stw	r2,136(sp)
 10086dc:	003f1706 	br	100833c <__gxx_personality_sj0+0x68>
 10086e0:	d9000717 	ldw	r4,28(sp)
 10086e4:	d9400304 	addi	r5,sp,12
 10086e8:	2089c83a 	sub	r4,r4,r2
 10086ec:	213fffc4 	addi	r4,r4,-1
 10086f0:	1007bc80 	call	1007bc8 <_Z12read_uleb128PKhPj>
 10086f4:	d8c00317 	ldw	r3,12(sp)
 10086f8:	1807003a 	cmpeq	r3,r3,zero
 10086fc:	1805883a 	mov	r2,r3
 1008700:	003ff106 	br	10086c8 <__gxx_personality_sj0+0x3f4>
 1008704:	d8001915 	stw	zero,100(sp)
 1008708:	003f9906 	br	1008570 <__gxx_personality_sj0+0x29c>
 100870c:	d8801803 	ldbu	r2,96(sp)
 1008710:	1004c03a 	cmpne	r2,r2,zero
 1008714:	103fbe26 	beq	r2,zero,1008610 <__gxx_personality_sj0+0x33c>
 1008718:	01000084 	movi	r4,2
 100871c:	d8001b15 	stw	zero,108(sp)
 1008720:	003f5d06 	br	1008498 <__gxx_personality_sj0+0x1c4>
 1008724:	d9402017 	ldw	r5,128(sp)
 1008728:	d9002e17 	ldw	r4,184(sp)
 100872c:	00bfffc4 	movi	r2,-1
 1008730:	d9800404 	addi	r6,sp,16
 1008734:	d8800b15 	stw	r2,44(sp)
 1008738:	1007f4c0 	call	1007f4c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 100873c:	d9000903 	ldbu	r4,36(sp)
 1008740:	d9402e17 	ldw	r5,184(sp)
 1008744:	1007ebc0 	call	1007ebc <_Z21base_of_encoded_valuehP15_Unwind_Context>
 1008748:	d8c01a17 	ldw	r3,104(sp)
 100874c:	18800915 	stw	r2,36(r3)
 1008750:	003f2106 	br	10083d8 <__gxx_personality_sj0+0x104>
 1008754:	d9002d17 	ldw	r4,180(sp)
 1008758:	00bfffc4 	movi	r2,-1
 100875c:	d8800b15 	stw	r2,44(sp)
 1008760:	10091340 	call	1009134 <__cxa_call_terminate>
 1008764:	00bfffc4 	movi	r2,-1
 1008768:	d8800b15 	stw	r2,44(sp)
 100876c:	10088800 	call	1008880 <_ZSt9terminatev>
 1008770:	d9000b17 	ldw	r4,44(sp)
 1008774:	d9400c17 	ldw	r5,48(sp)
 1008778:	00800044 	movi	r2,1
 100877c:	d9002915 	stw	r4,164(sp)
 1008780:	d9402815 	stw	r5,160(sp)
 1008784:	20800626 	beq	r4,r2,10087a0 <__gxx_personality_sj0+0x4cc>
 1008788:	d8000b15 	stw	zero,44(sp)
 100878c:	10088e80 	call	10088e8 <__cxa_end_catch>
 1008790:	d9002817 	ldw	r4,160(sp)
 1008794:	00bfffc4 	movi	r2,-1
 1008798:	d8800b15 	stw	r2,44(sp)
 100879c:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 10087a0:	d9002817 	ldw	r4,160(sp)
 10087a4:	100898c0 	call	100898c <__cxa_begin_catch>
 10087a8:	d8c02917 	ldw	r3,164(sp)
 10087ac:	d8c00b15 	stw	r3,44(sp)
 10087b0:	10088800 	call	1008880 <_ZSt9terminatev>

010087b4 <_ZSt13set_terminatePFvvE>:
 10087b4:	00c040b4 	movhi	r3,258
 10087b8:	18c4a304 	addi	r3,r3,4748
 10087bc:	18800017 	ldw	r2,0(r3)
 10087c0:	19000015 	stw	r4,0(r3)
 10087c4:	f800283a 	ret

010087c8 <_ZSt14set_unexpectedPFvvE>:
 10087c8:	00c040b4 	movhi	r3,258
 10087cc:	18c4a604 	addi	r3,r3,4760
 10087d0:	18800017 	ldw	r2,0(r3)
 10087d4:	19000015 	stw	r4,0(r3)
 10087d8:	f800283a 	ret

010087dc <_ZN10__cxxabiv111__terminateEPFvvE>:
 10087dc:	deffed04 	addi	sp,sp,-76
 10087e0:	00804074 	movhi	r2,257
 10087e4:	10a0b504 	addi	r2,r2,-32044
 10087e8:	d8800615 	stw	r2,24(sp)
 10087ec:	00c040b4 	movhi	r3,258
 10087f0:	18fb5c04 	addi	r3,r3,-4752
 10087f4:	00804074 	movhi	r2,257
 10087f8:	10a20e04 	addi	r2,r2,-30664
 10087fc:	d9000d15 	stw	r4,52(sp)
 1008800:	d809883a 	mov	r4,sp
 1008804:	d8800915 	stw	r2,36(sp)
 1008808:	dfc01215 	stw	ra,72(sp)
 100880c:	df001115 	stw	fp,68(sp)
 1008810:	ddc01015 	stw	r23,64(sp)
 1008814:	d8c00715 	stw	r3,28(sp)
 1008818:	dec00815 	stw	sp,32(sp)
 100881c:	dec00a15 	stw	sp,40(sp)
 1008820:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1008824:	00800084 	movi	r2,2
 1008828:	d8800115 	stw	r2,4(sp)
 100882c:	d8800d17 	ldw	r2,52(sp)
 1008830:	103ee83a 	callr	r2
 1008834:	10096d00 	call	10096d0 <abort>
 1008838:	d8800117 	ldw	r2,4(sp)
 100883c:	d8c00217 	ldw	r3,8(sp)
 1008840:	d8800f15 	stw	r2,60(sp)
 1008844:	d8c00e15 	stw	r3,56(sp)
 1008848:	d8c00f17 	ldw	r3,60(sp)
 100884c:	00800044 	movi	r2,1
 1008850:	18800626 	beq	r3,r2,100886c <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
 1008854:	d8000115 	stw	zero,4(sp)
 1008858:	10088e80 	call	10088e8 <__cxa_end_catch>
 100885c:	d9000e17 	ldw	r4,56(sp)
 1008860:	00bfffc4 	movi	r2,-1
 1008864:	d8800115 	stw	r2,4(sp)
 1008868:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 100886c:	d9000e17 	ldw	r4,56(sp)
 1008870:	100898c0 	call	100898c <__cxa_begin_catch>
 1008874:	d8c00f17 	ldw	r3,60(sp)
 1008878:	d8c00115 	stw	r3,4(sp)
 100887c:	10096d00 	call	10096d0 <abort>

01008880 <_ZSt9terminatev>:
 1008880:	008040b4 	movhi	r2,258
 1008884:	1084a304 	addi	r2,r2,4748
 1008888:	11000017 	ldw	r4,0(r2)
 100888c:	deffff04 	addi	sp,sp,-4
 1008890:	dfc00015 	stw	ra,0(sp)
 1008894:	10087dc0 	call	10087dc <_ZN10__cxxabiv111__terminateEPFvvE>

01008898 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 1008898:	deffff04 	addi	sp,sp,-4
 100889c:	dfc00015 	stw	ra,0(sp)
 10088a0:	203ee83a 	callr	r4
 10088a4:	10088800 	call	1008880 <_ZSt9terminatev>

010088a8 <_ZSt10unexpectedv>:
 10088a8:	008040b4 	movhi	r2,258
 10088ac:	1084a604 	addi	r2,r2,4760
 10088b0:	11000017 	ldw	r4,0(r2)
 10088b4:	deffff04 	addi	sp,sp,-4
 10088b8:	dfc00015 	stw	ra,0(sp)
 10088bc:	10088980 	call	1008898 <_ZN10__cxxabiv112__unexpectedEPFvvE>

010088c0 <__cxa_get_exception_ptr>:
 10088c0:	20bfff17 	ldw	r2,-4(r4)
 10088c4:	f800283a 	ret

010088c8 <_ZSt18uncaught_exceptionv>:
 10088c8:	deffff04 	addi	sp,sp,-4
 10088cc:	dfc00015 	stw	ra,0(sp)
 10088d0:	10091800 	call	1009180 <__cxa_get_globals>
 10088d4:	10800117 	ldw	r2,4(r2)
 10088d8:	1004c03a 	cmpne	r2,r2,zero
 10088dc:	dfc00017 	ldw	ra,0(sp)
 10088e0:	dec00104 	addi	sp,sp,4
 10088e4:	f800283a 	ret

010088e8 <__cxa_end_catch>:
 10088e8:	deffff04 	addi	sp,sp,-4
 10088ec:	dfc00015 	stw	ra,0(sp)
 10088f0:	10091780 	call	1009178 <__cxa_get_globals_fast>
 10088f4:	11000017 	ldw	r4,0(r2)
 10088f8:	1007883a 	mov	r3,r2
 10088fc:	20001326 	beq	r4,zero,100894c <__cxa_end_catch+0x64>
 1008900:	21400b17 	ldw	r5,44(r4)
 1008904:	0090caf4 	movhi	r2,17195
 1008908:	108ac004 	addi	r2,r2,11008
 100890c:	21800c17 	ldw	r6,48(r4)
 1008910:	28800526 	beq	r5,r2,1008928 <__cxa_end_catch+0x40>
 1008914:	21000b04 	addi	r4,r4,44
 1008918:	18000015 	stw	zero,0(r3)
 100891c:	dfc00017 	ldw	ra,0(sp)
 1008920:	dec00104 	addi	sp,sp,4
 1008924:	10093481 	jmpi	1009348 <_Unwind_DeleteException>
 1008928:	0091d3b4 	movhi	r2,18254
 100892c:	109550c4 	addi	r2,r2,21827
 1008930:	30bff81e 	bne	r6,r2,1008914 <__cxa_end_catch+0x2c>
 1008934:	20800517 	ldw	r2,20(r4)
 1008938:	10000e16 	blt	r2,zero,1008974 <__cxa_end_catch+0x8c>
 100893c:	117fffc4 	addi	r5,r2,-1
 1008940:	28000526 	beq	r5,zero,1008958 <__cxa_end_catch+0x70>
 1008944:	28000a16 	blt	r5,zero,1008970 <__cxa_end_catch+0x88>
 1008948:	21400515 	stw	r5,20(r4)
 100894c:	dfc00017 	ldw	ra,0(sp)
 1008950:	dec00104 	addi	sp,sp,4
 1008954:	f800283a 	ret
 1008958:	20800417 	ldw	r2,16(r4)
 100895c:	21000b04 	addi	r4,r4,44
 1008960:	18800015 	stw	r2,0(r3)
 1008964:	dfc00017 	ldw	ra,0(sp)
 1008968:	dec00104 	addi	sp,sp,4
 100896c:	10093481 	jmpi	1009348 <_Unwind_DeleteException>
 1008970:	10088800 	call	1008880 <_ZSt9terminatev>
 1008974:	11400044 	addi	r5,r2,1
 1008978:	283ff31e 	bne	r5,zero,1008948 <__cxa_end_catch+0x60>
 100897c:	20800417 	ldw	r2,16(r4)
 1008980:	21400515 	stw	r5,20(r4)
 1008984:	18800015 	stw	r2,0(r3)
 1008988:	003ff006 	br	100894c <__cxa_end_catch+0x64>

0100898c <__cxa_begin_catch>:
 100898c:	deffee04 	addi	sp,sp,-72
 1008990:	00804074 	movhi	r2,257
 1008994:	10a0b504 	addi	r2,r2,-32044
 1008998:	00c040b4 	movhi	r3,258
 100899c:	18fb6004 	addi	r3,r3,-4736
 10089a0:	d8800615 	stw	r2,24(sp)
 10089a4:	d9000e15 	stw	r4,56(sp)
 10089a8:	00804074 	movhi	r2,257
 10089ac:	10a2a004 	addi	r2,r2,-30080
 10089b0:	d809883a 	mov	r4,sp
 10089b4:	d8c00715 	stw	r3,28(sp)
 10089b8:	dfc01115 	stw	ra,68(sp)
 10089bc:	d8800915 	stw	r2,36(sp)
 10089c0:	df001015 	stw	fp,64(sp)
 10089c4:	ddc00f15 	stw	r23,60(sp)
 10089c8:	dec00815 	stw	sp,32(sp)
 10089cc:	dec00a15 	stw	sp,40(sp)
 10089d0:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 10089d4:	10091800 	call	1009180 <__cxa_get_globals>
 10089d8:	100d883a 	mov	r6,r2
 10089dc:	d8800e17 	ldw	r2,56(sp)
 10089e0:	31c00017 	ldw	r7,0(r6)
 10089e4:	117ff504 	addi	r5,r2,-44
 10089e8:	28c00b17 	ldw	r3,44(r5)
 10089ec:	0090caf4 	movhi	r2,17195
 10089f0:	108ac004 	addi	r2,r2,11008
 10089f4:	29000c17 	ldw	r4,48(r5)
 10089f8:	18800b26 	beq	r3,r2,1008a28 <__cxa_begin_catch+0x9c>
 10089fc:	38001d1e 	bne	r7,zero,1008a74 <__cxa_begin_catch+0xe8>
 1008a00:	d8000d15 	stw	zero,52(sp)
 1008a04:	31400015 	stw	r5,0(r6)
 1008a08:	d809883a 	mov	r4,sp
 1008a0c:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1008a10:	d8800d17 	ldw	r2,52(sp)
 1008a14:	dfc01117 	ldw	ra,68(sp)
 1008a18:	df001017 	ldw	fp,64(sp)
 1008a1c:	ddc00f17 	ldw	r23,60(sp)
 1008a20:	dec01204 	addi	sp,sp,72
 1008a24:	f800283a 	ret
 1008a28:	0091d3b4 	movhi	r2,18254
 1008a2c:	109550c4 	addi	r2,r2,21827
 1008a30:	20bff21e 	bne	r4,r2,10089fc <__cxa_begin_catch+0x70>
 1008a34:	28c00517 	ldw	r3,20(r5)
 1008a38:	18000b16 	blt	r3,zero,1008a68 <__cxa_begin_catch+0xdc>
 1008a3c:	18800044 	addi	r2,r3,1
 1008a40:	28800515 	stw	r2,20(r5)
 1008a44:	30800117 	ldw	r2,4(r6)
 1008a48:	10bfffc4 	addi	r2,r2,-1
 1008a4c:	30800115 	stw	r2,4(r6)
 1008a50:	39400226 	beq	r7,r5,1008a5c <__cxa_begin_catch+0xd0>
 1008a54:	29c00415 	stw	r7,16(r5)
 1008a58:	31400015 	stw	r5,0(r6)
 1008a5c:	29400a17 	ldw	r5,40(r5)
 1008a60:	d9400d15 	stw	r5,52(sp)
 1008a64:	003fe806 	br	1008a08 <__cxa_begin_catch+0x7c>
 1008a68:	00800044 	movi	r2,1
 1008a6c:	10c5c83a 	sub	r2,r2,r3
 1008a70:	003ff306 	br	1008a40 <__cxa_begin_catch+0xb4>
 1008a74:	00800044 	movi	r2,1
 1008a78:	d8800115 	stw	r2,4(sp)
 1008a7c:	10088800 	call	1008880 <_ZSt9terminatev>
 1008a80:	d8800317 	ldw	r2,12(sp)
 1008a84:	00ffffc4 	movi	r3,-1
 1008a88:	d9000217 	ldw	r4,8(sp)
 1008a8c:	10c00226 	beq	r2,r3,1008a98 <__cxa_begin_catch+0x10c>
 1008a90:	d8c00115 	stw	r3,4(sp)
 1008a94:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1008a98:	00bfffc4 	movi	r2,-1
 1008a9c:	d8800115 	stw	r2,4(sp)
 1008aa0:	10081540 	call	1008154 <__cxa_call_unexpected>

01008aa4 <_ZdlPv>:
 1008aa4:	20000126 	beq	r4,zero,1008aac <_ZdlPv+0x8>
 1008aa8:	10096e81 	jmpi	10096e8 <free>
 1008aac:	f800283a 	ret

01008ab0 <__cxa_rethrow>:
 1008ab0:	defffe04 	addi	sp,sp,-8
 1008ab4:	dc400015 	stw	r17,0(sp)
 1008ab8:	dfc00115 	stw	ra,4(sp)
 1008abc:	10091800 	call	1009180 <__cxa_get_globals>
 1008ac0:	100b883a 	mov	r5,r2
 1008ac4:	10800117 	ldw	r2,4(r2)
 1008ac8:	2c400017 	ldw	r17,0(r5)
 1008acc:	10800044 	addi	r2,r2,1
 1008ad0:	28800115 	stw	r2,4(r5)
 1008ad4:	88000b26 	beq	r17,zero,1008b04 <__cxa_rethrow+0x54>
 1008ad8:	88c00b17 	ldw	r3,44(r17)
 1008adc:	0090caf4 	movhi	r2,17195
 1008ae0:	108ac004 	addi	r2,r2,11008
 1008ae4:	89000c17 	ldw	r4,48(r17)
 1008ae8:	18800726 	beq	r3,r2,1008b08 <__cxa_rethrow+0x58>
 1008aec:	28000015 	stw	zero,0(r5)
 1008af0:	8c400b04 	addi	r17,r17,44
 1008af4:	8809883a 	mov	r4,r17
 1008af8:	10096780 	call	1009678 <_Unwind_SjLj_Resume_or_Rethrow>
 1008afc:	8809883a 	mov	r4,r17
 1008b00:	100898c0 	call	100898c <__cxa_begin_catch>
 1008b04:	10088800 	call	1008880 <_ZSt9terminatev>
 1008b08:	0091d3b4 	movhi	r2,18254
 1008b0c:	109550c4 	addi	r2,r2,21827
 1008b10:	20bff61e 	bne	r4,r2,1008aec <__cxa_rethrow+0x3c>
 1008b14:	88800517 	ldw	r2,20(r17)
 1008b18:	0085c83a 	sub	r2,zero,r2
 1008b1c:	88800515 	stw	r2,20(r17)
 1008b20:	003ff306 	br	1008af0 <__cxa_rethrow+0x40>

01008b24 <__cxa_throw>:
 1008b24:	008040b4 	movhi	r2,258
 1008b28:	1084a604 	addi	r2,r2,4760
 1008b2c:	00c040b4 	movhi	r3,258
 1008b30:	18c4a304 	addi	r3,r3,4748
 1008b34:	12000017 	ldw	r8,0(r2)
 1008b38:	19c00017 	ldw	r7,0(r3)
 1008b3c:	defffe04 	addi	sp,sp,-8
 1008b40:	213ff004 	addi	r4,r4,-64
 1008b44:	dfc00115 	stw	ra,4(sp)
 1008b48:	dc400015 	stw	r17,0(sp)
 1008b4c:	0090caf4 	movhi	r2,17195
 1008b50:	108ac004 	addi	r2,r2,11008
 1008b54:	20800b15 	stw	r2,44(r4)
 1008b58:	00d1d3b4 	movhi	r3,18254
 1008b5c:	18d550c4 	addi	r3,r3,21827
 1008b60:	24400b04 	addi	r17,r4,44
 1008b64:	00804074 	movhi	r2,257
 1008b68:	10a2e604 	addi	r2,r2,-29800
 1008b6c:	21400015 	stw	r5,0(r4)
 1008b70:	21800115 	stw	r6,4(r4)
 1008b74:	22000215 	stw	r8,8(r4)
 1008b78:	21c00315 	stw	r7,12(r4)
 1008b7c:	20c00c15 	stw	r3,48(r4)
 1008b80:	20800d15 	stw	r2,52(r4)
 1008b84:	8809883a 	mov	r4,r17
 1008b88:	10094b00 	call	10094b0 <_Unwind_SjLj_RaiseException>
 1008b8c:	8809883a 	mov	r4,r17
 1008b90:	100898c0 	call	100898c <__cxa_begin_catch>
 1008b94:	10088800 	call	1008880 <_ZSt9terminatev>

01008b98 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 1008b98:	defffe04 	addi	sp,sp,-8
 1008b9c:	00800044 	movi	r2,1
 1008ba0:	dfc00115 	stw	ra,4(sp)
 1008ba4:	dc000015 	stw	r16,0(sp)
 1008ba8:	28fff504 	addi	r3,r5,-44
 1008bac:	11001036 	bltu	r2,r4,1008bf0 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
 1008bb0:	18800117 	ldw	r2,4(r3)
 1008bb4:	10000826 	beq	r2,zero,1008bd8 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
 1008bb8:	2c000504 	addi	r16,r5,20
 1008bbc:	8009883a 	mov	r4,r16
 1008bc0:	103ee83a 	callr	r2
 1008bc4:	8009883a 	mov	r4,r16
 1008bc8:	dfc00117 	ldw	ra,4(sp)
 1008bcc:	dc000017 	ldw	r16,0(sp)
 1008bd0:	dec00204 	addi	sp,sp,8
 1008bd4:	1008e6c1 	jmpi	1008e6c <__cxa_free_exception>
 1008bd8:	2c000504 	addi	r16,r5,20
 1008bdc:	8009883a 	mov	r4,r16
 1008be0:	dfc00117 	ldw	ra,4(sp)
 1008be4:	dc000017 	ldw	r16,0(sp)
 1008be8:	dec00204 	addi	sp,sp,8
 1008bec:	1008e6c1 	jmpi	1008e6c <__cxa_free_exception>
 1008bf0:	19000317 	ldw	r4,12(r3)
 1008bf4:	10087dc0 	call	10087dc <_ZN10__cxxabiv111__terminateEPFvvE>

01008bf8 <_ZNSt10bad_typeidD0Ev>:
 1008bf8:	defffe04 	addi	sp,sp,-8
 1008bfc:	008040b4 	movhi	r2,258
 1008c00:	10bcaf04 	addi	r2,r2,-3396
 1008c04:	dc400015 	stw	r17,0(sp)
 1008c08:	20800015 	stw	r2,0(r4)
 1008c0c:	2023883a 	mov	r17,r4
 1008c10:	dfc00115 	stw	ra,4(sp)
 1008c14:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1008c18:	8809883a 	mov	r4,r17
 1008c1c:	dfc00117 	ldw	ra,4(sp)
 1008c20:	dc400017 	ldw	r17,0(sp)
 1008c24:	dec00204 	addi	sp,sp,8
 1008c28:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

01008c2c <_ZNSt10bad_typeidD1Ev>:
 1008c2c:	008040b4 	movhi	r2,258
 1008c30:	10bcaf04 	addi	r2,r2,-3396
 1008c34:	20800015 	stw	r2,0(r4)
 1008c38:	10079481 	jmpi	1007948 <_ZNSt9exceptionD2Ev>

01008c3c <_ZNSt10bad_typeidD2Ev>:
 1008c3c:	008040b4 	movhi	r2,258
 1008c40:	10bcaf04 	addi	r2,r2,-3396
 1008c44:	20800015 	stw	r2,0(r4)
 1008c48:	10079481 	jmpi	1007948 <_ZNSt9exceptionD2Ev>

01008c4c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 1008c4c:	defffb04 	addi	sp,sp,-20
 1008c50:	dd400315 	stw	r21,12(sp)
 1008c54:	dcc00215 	stw	r19,8(sp)
 1008c58:	dc400115 	stw	r17,4(sp)
 1008c5c:	dc000015 	stw	r16,0(sp)
 1008c60:	2823883a 	mov	r17,r5
 1008c64:	3027883a 	mov	r19,r6
 1008c68:	382b883a 	mov	r21,r7
 1008c6c:	dfc00415 	stw	ra,16(sp)
 1008c70:	2021883a 	mov	r16,r4
 1008c74:	1007b4c0 	call	1007b4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 1008c78:	10803fcc 	andi	r2,r2,255
 1008c7c:	880b883a 	mov	r5,r17
 1008c80:	980d883a 	mov	r6,r19
 1008c84:	a80f883a 	mov	r7,r21
 1008c88:	00c00044 	movi	r3,1
 1008c8c:	1000051e 	bne	r2,zero,1008ca4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 1008c90:	81000217 	ldw	r4,8(r16)
 1008c94:	20800017 	ldw	r2,0(r4)
 1008c98:	10c00617 	ldw	r3,24(r2)
 1008c9c:	183ee83a 	callr	r3
 1008ca0:	10c03fcc 	andi	r3,r2,255
 1008ca4:	1805883a 	mov	r2,r3
 1008ca8:	dfc00417 	ldw	ra,16(sp)
 1008cac:	dd400317 	ldw	r21,12(sp)
 1008cb0:	dcc00217 	ldw	r19,8(sp)
 1008cb4:	dc400117 	ldw	r17,4(sp)
 1008cb8:	dc000017 	ldw	r16,0(sp)
 1008cbc:	dec00504 	addi	sp,sp,20
 1008cc0:	f800283a 	ret

01008cc4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 1008cc4:	defffe04 	addi	sp,sp,-8
 1008cc8:	008040b4 	movhi	r2,258
 1008ccc:	10bcbb04 	addi	r2,r2,-3348
 1008cd0:	dc400015 	stw	r17,0(sp)
 1008cd4:	20800015 	stw	r2,0(r4)
 1008cd8:	2023883a 	mov	r17,r4
 1008cdc:	dfc00115 	stw	ra,4(sp)
 1008ce0:	1007adc0 	call	1007adc <_ZN10__cxxabiv117__class_type_infoD2Ev>
 1008ce4:	8809883a 	mov	r4,r17
 1008ce8:	dfc00117 	ldw	ra,4(sp)
 1008cec:	dc400017 	ldw	r17,0(sp)
 1008cf0:	dec00204 	addi	sp,sp,8
 1008cf4:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

01008cf8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 1008cf8:	008040b4 	movhi	r2,258
 1008cfc:	10bcbb04 	addi	r2,r2,-3348
 1008d00:	20800015 	stw	r2,0(r4)
 1008d04:	1007adc1 	jmpi	1007adc <_ZN10__cxxabiv117__class_type_infoD2Ev>

01008d08 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
 1008d08:	008040b4 	movhi	r2,258
 1008d0c:	10bcbb04 	addi	r2,r2,-3348
 1008d10:	20800015 	stw	r2,0(r4)
 1008d14:	1007adc1 	jmpi	1007adc <_ZN10__cxxabiv117__class_type_infoD2Ev>

01008d18 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
 1008d18:	da400017 	ldw	r9,0(sp)
 1008d1c:	2011883a 	mov	r8,r4
 1008d20:	49800526 	beq	r9,r6,1008d38 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
 1008d24:	41000217 	ldw	r4,8(r8)
 1008d28:	20800017 	ldw	r2,0(r4)
 1008d2c:	da400015 	stw	r9,0(sp)
 1008d30:	10c00817 	ldw	r3,32(r2)
 1008d34:	1800683a 	jmp	r3
 1008d38:	39000117 	ldw	r4,4(r7)
 1008d3c:	40c00117 	ldw	r3,4(r8)
 1008d40:	00800184 	movi	r2,6
 1008d44:	193ff71e 	bne	r3,r4,1008d24 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
 1008d48:	f800283a 	ret

01008d4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 1008d4c:	20c00117 	ldw	r3,4(r4)
 1008d50:	38800117 	ldw	r2,4(r7)
 1008d54:	defffb04 	addi	sp,sp,-20
 1008d58:	dfc00415 	stw	ra,16(sp)
 1008d5c:	da000517 	ldw	r8,20(sp)
 1008d60:	dac00617 	ldw	r11,24(sp)
 1008d64:	da400717 	ldw	r9,28(sp)
 1008d68:	da800817 	ldw	r10,32(sp)
 1008d6c:	18800c1e 	bne	r3,r2,1008da0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 1008d70:	51800115 	stw	r6,4(r10)
 1008d74:	52000015 	stw	r8,0(r10)
 1008d78:	28001c16 	blt	r5,zero,1008dec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
 1008d7c:	4145883a 	add	r2,r8,r5
 1008d80:	48801e26 	beq	r9,r2,1008dfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 1008d84:	00800044 	movi	r2,1
 1008d88:	0007883a 	mov	r3,zero
 1008d8c:	50800315 	stw	r2,12(r10)
 1008d90:	1805883a 	mov	r2,r3
 1008d94:	dfc00417 	ldw	ra,16(sp)
 1008d98:	dec00504 	addi	sp,sp,20
 1008d9c:	f800283a 	ret
 1008da0:	42400d26 	beq	r8,r9,1008dd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 1008da4:	21000217 	ldw	r4,8(r4)
 1008da8:	20800017 	ldw	r2,0(r4)
 1008dac:	da000015 	stw	r8,0(sp)
 1008db0:	dac00115 	stw	r11,4(sp)
 1008db4:	da400215 	stw	r9,8(sp)
 1008db8:	da800315 	stw	r10,12(sp)
 1008dbc:	10c00717 	ldw	r3,28(r2)
 1008dc0:	183ee83a 	callr	r3
 1008dc4:	10c03fcc 	andi	r3,r2,255
 1008dc8:	1805883a 	mov	r2,r3
 1008dcc:	dfc00417 	ldw	ra,16(sp)
 1008dd0:	dec00504 	addi	sp,sp,20
 1008dd4:	f800283a 	ret
 1008dd8:	58800117 	ldw	r2,4(r11)
 1008ddc:	18bff11e 	bne	r3,r2,1008da4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 1008de0:	0007883a 	mov	r3,zero
 1008de4:	51800215 	stw	r6,8(r10)
 1008de8:	003fe906 	br	1008d90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 1008dec:	00bfff84 	movi	r2,-2
 1008df0:	28800426 	beq	r5,r2,1008e04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
 1008df4:	0007883a 	mov	r3,zero
 1008df8:	003fe506 	br	1008d90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 1008dfc:	00800184 	movi	r2,6
 1008e00:	003fe106 	br	1008d88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 1008e04:	00800044 	movi	r2,1
 1008e08:	0007883a 	mov	r3,zero
 1008e0c:	50800315 	stw	r2,12(r10)
 1008e10:	003fdf06 	br	1008d90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

01008e14 <_ZNKSt9type_info14__is_pointer_pEv>:
 1008e14:	0005883a 	mov	r2,zero
 1008e18:	f800283a 	ret

01008e1c <_ZNKSt9type_info15__is_function_pEv>:
 1008e1c:	0005883a 	mov	r2,zero
 1008e20:	f800283a 	ret

01008e24 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 1008e24:	20c00117 	ldw	r3,4(r4)
 1008e28:	28800117 	ldw	r2,4(r5)
 1008e2c:	1885003a 	cmpeq	r2,r3,r2
 1008e30:	f800283a 	ret

01008e34 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 1008e34:	0005883a 	mov	r2,zero
 1008e38:	f800283a 	ret

01008e3c <_ZNSt9type_infoD0Ev>:
 1008e3c:	008040b4 	movhi	r2,258
 1008e40:	10bcd304 	addi	r2,r2,-3252
 1008e44:	20800015 	stw	r2,0(r4)
 1008e48:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

01008e4c <_ZNSt9type_infoD1Ev>:
 1008e4c:	008040b4 	movhi	r2,258
 1008e50:	10bcd304 	addi	r2,r2,-3252
 1008e54:	20800015 	stw	r2,0(r4)
 1008e58:	f800283a 	ret

01008e5c <_ZNSt9type_infoD2Ev>:
 1008e5c:	008040b4 	movhi	r2,258
 1008e60:	10bcd304 	addi	r2,r2,-3252
 1008e64:	20800015 	stw	r2,0(r4)
 1008e68:	f800283a 	ret

01008e6c <__cxa_free_exception>:
 1008e6c:	2007883a 	mov	r3,r4
 1008e70:	008040b4 	movhi	r2,258
 1008e74:	109bda04 	addi	r2,r2,28520
 1008e78:	213ff004 	addi	r4,r4,-64
 1008e7c:	11420004 	addi	r5,r2,2048
 1008e80:	18800336 	bltu	r3,r2,1008e90 <__cxa_free_exception+0x24>
 1008e84:	1885c83a 	sub	r2,r3,r2
 1008e88:	1004d27a 	srli	r2,r2,9
 1008e8c:	19400136 	bltu	r3,r5,1008e94 <__cxa_free_exception+0x28>
 1008e90:	10096e81 	jmpi	10096e8 <free>
 1008e94:	00ffff84 	movi	r3,-2
 1008e98:	1886183a 	rol	r3,r3,r2
 1008e9c:	d0a71317 	ldw	r2,-25524(gp)
 1008ea0:	10c4703a 	and	r2,r2,r3
 1008ea4:	d0a71315 	stw	r2,-25524(gp)
 1008ea8:	f800283a 	ret

01008eac <__cxa_allocate_exception>:
 1008eac:	deffed04 	addi	sp,sp,-76
 1008eb0:	00804074 	movhi	r2,257
 1008eb4:	10a0b504 	addi	r2,r2,-32044
 1008eb8:	21001004 	addi	r4,r4,64
 1008ebc:	00c040b4 	movhi	r3,258
 1008ec0:	18fb6404 	addi	r3,r3,-4720
 1008ec4:	d8800615 	stw	r2,24(sp)
 1008ec8:	d9000d15 	stw	r4,52(sp)
 1008ecc:	00804074 	movhi	r2,257
 1008ed0:	10a3ef04 	addi	r2,r2,-28740
 1008ed4:	d809883a 	mov	r4,sp
 1008ed8:	dfc01215 	stw	ra,72(sp)
 1008edc:	d8c00715 	stw	r3,28(sp)
 1008ee0:	d8800915 	stw	r2,36(sp)
 1008ee4:	df001115 	stw	fp,68(sp)
 1008ee8:	ddc01015 	stw	r23,64(sp)
 1008eec:	dec00815 	stw	sp,32(sp)
 1008ef0:	dec00a15 	stw	sp,40(sp)
 1008ef4:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 1008ef8:	d9000d17 	ldw	r4,52(sp)
 1008efc:	10096fc0 	call	10096fc <malloc>
 1008f00:	d8800e15 	stw	r2,56(sp)
 1008f04:	1000171e 	bne	r2,zero,1008f64 <__cxa_allocate_exception+0xb8>
 1008f08:	d8c00d17 	ldw	r3,52(sp)
 1008f0c:	00808004 	movi	r2,512
 1008f10:	d1e71317 	ldw	r7,-25524(gp)
 1008f14:	10c02636 	bltu	r2,r3,1008fb0 <__cxa_allocate_exception+0x104>
 1008f18:	3807883a 	mov	r3,r7
 1008f1c:	01400044 	movi	r5,1
 1008f20:	1944703a 	and	r2,r3,r5
 1008f24:	0009883a 	mov	r4,zero
 1008f28:	01800104 	movi	r6,4
 1008f2c:	10000526 	beq	r2,zero,1008f44 <__cxa_allocate_exception+0x98>
 1008f30:	2149883a 	add	r4,r4,r5
 1008f34:	21801e26 	beq	r4,r6,1008fb0 <__cxa_allocate_exception+0x104>
 1008f38:	1806d07a 	srli	r3,r3,1
 1008f3c:	1944703a 	and	r2,r3,r5
 1008f40:	103ffb1e 	bne	r2,zero,1008f30 <__cxa_allocate_exception+0x84>
 1008f44:	2904983a 	sll	r2,r5,r4
 1008f48:	2008927a 	slli	r4,r4,9
 1008f4c:	00c040b4 	movhi	r3,258
 1008f50:	18dbda04 	addi	r3,r3,28520
 1008f54:	3884b03a 	or	r2,r7,r2
 1008f58:	20c9883a 	add	r4,r4,r3
 1008f5c:	d9000e15 	stw	r4,56(sp)
 1008f60:	d0a71315 	stw	r2,-25524(gp)
 1008f64:	10091800 	call	1009180 <__cxa_get_globals>
 1008f68:	10c00117 	ldw	r3,4(r2)
 1008f6c:	d9000e17 	ldw	r4,56(sp)
 1008f70:	000b883a 	mov	r5,zero
 1008f74:	18c00044 	addi	r3,r3,1
 1008f78:	10c00115 	stw	r3,4(r2)
 1008f7c:	01801004 	movi	r6,64
 1008f80:	100a1280 	call	100a128 <memset>
 1008f84:	d8800e17 	ldw	r2,56(sp)
 1008f88:	d809883a 	mov	r4,sp
 1008f8c:	10801004 	addi	r2,r2,64
 1008f90:	d8800f15 	stw	r2,60(sp)
 1008f94:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 1008f98:	d8800f17 	ldw	r2,60(sp)
 1008f9c:	dfc01217 	ldw	ra,72(sp)
 1008fa0:	df001117 	ldw	fp,68(sp)
 1008fa4:	ddc01017 	ldw	r23,64(sp)
 1008fa8:	dec01304 	addi	sp,sp,76
 1008fac:	f800283a 	ret
 1008fb0:	00800044 	movi	r2,1
 1008fb4:	d8800115 	stw	r2,4(sp)
 1008fb8:	10088800 	call	1008880 <_ZSt9terminatev>
 1008fbc:	d8800317 	ldw	r2,12(sp)
 1008fc0:	00ffffc4 	movi	r3,-1
 1008fc4:	d9000217 	ldw	r4,8(sp)
 1008fc8:	10c00226 	beq	r2,r3,1008fd4 <__cxa_allocate_exception+0x128>
 1008fcc:	d8c00115 	stw	r3,4(sp)
 1008fd0:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1008fd4:	00bfffc4 	movi	r2,-1
 1008fd8:	d8800115 	stw	r2,4(sp)
 1008fdc:	10081540 	call	1008154 <__cxa_call_unexpected>

01008fe0 <_ZNSt8bad_castD0Ev>:
 1008fe0:	defffe04 	addi	sp,sp,-8
 1008fe4:	008040b4 	movhi	r2,258
 1008fe8:	10bcdf04 	addi	r2,r2,-3204
 1008fec:	dc400015 	stw	r17,0(sp)
 1008ff0:	20800015 	stw	r2,0(r4)
 1008ff4:	2023883a 	mov	r17,r4
 1008ff8:	dfc00115 	stw	ra,4(sp)
 1008ffc:	10079480 	call	1007948 <_ZNSt9exceptionD2Ev>
 1009000:	8809883a 	mov	r4,r17
 1009004:	dfc00117 	ldw	ra,4(sp)
 1009008:	dc400017 	ldw	r17,0(sp)
 100900c:	dec00204 	addi	sp,sp,8
 1009010:	1008aa41 	jmpi	1008aa4 <_ZdlPv>

01009014 <_ZNSt8bad_castD1Ev>:
 1009014:	008040b4 	movhi	r2,258
 1009018:	10bcdf04 	addi	r2,r2,-3204
 100901c:	20800015 	stw	r2,0(r4)
 1009020:	10079481 	jmpi	1007948 <_ZNSt9exceptionD2Ev>

01009024 <_ZNSt8bad_castD2Ev>:
 1009024:	008040b4 	movhi	r2,258
 1009028:	10bcdf04 	addi	r2,r2,-3204
 100902c:	20800015 	stw	r2,0(r4)
 1009030:	10079481 	jmpi	1007948 <_ZNSt9exceptionD2Ev>

01009034 <_Znwm>:
 1009034:	deffee04 	addi	sp,sp,-72
 1009038:	00804074 	movhi	r2,257
 100903c:	10a0b504 	addi	r2,r2,-32044
 1009040:	d8800615 	stw	r2,24(sp)
 1009044:	00c040b4 	movhi	r3,258
 1009048:	18fb6804 	addi	r3,r3,-4704
 100904c:	00804074 	movhi	r2,257
 1009050:	10a44404 	addi	r2,r2,-28400
 1009054:	d9000e15 	stw	r4,56(sp)
 1009058:	d809883a 	mov	r4,sp
 100905c:	d8800915 	stw	r2,36(sp)
 1009060:	dfc01115 	stw	ra,68(sp)
 1009064:	df001015 	stw	fp,64(sp)
 1009068:	ddc00f15 	stw	r23,60(sp)
 100906c:	d8c00715 	stw	r3,28(sp)
 1009070:	dec00815 	stw	sp,32(sp)
 1009074:	dec00a15 	stw	sp,40(sp)
 1009078:	10091880 	call	1009188 <_Unwind_SjLj_Register>
 100907c:	d8800e17 	ldw	r2,56(sp)
 1009080:	10000a1e 	bne	r2,zero,10090ac <_Znwm+0x78>
 1009084:	00800044 	movi	r2,1
 1009088:	d8800e15 	stw	r2,56(sp)
 100908c:	00000706 	br	10090ac <_Znwm+0x78>
 1009090:	008040b4 	movhi	r2,258
 1009094:	108bab04 	addi	r2,r2,11948
 1009098:	10c00017 	ldw	r3,0(r2)
 100909c:	18000f26 	beq	r3,zero,10090dc <_Znwm+0xa8>
 10090a0:	00800044 	movi	r2,1
 10090a4:	d8800115 	stw	r2,4(sp)
 10090a8:	183ee83a 	callr	r3
 10090ac:	d9000e17 	ldw	r4,56(sp)
 10090b0:	10096fc0 	call	10096fc <malloc>
 10090b4:	d8800d15 	stw	r2,52(sp)
 10090b8:	103ff526 	beq	r2,zero,1009090 <_Znwm+0x5c>
 10090bc:	d809883a 	mov	r4,sp
 10090c0:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 10090c4:	d8800d17 	ldw	r2,52(sp)
 10090c8:	dfc01117 	ldw	ra,68(sp)
 10090cc:	df001017 	ldw	fp,64(sp)
 10090d0:	ddc00f17 	ldw	r23,60(sp)
 10090d4:	dec01204 	addi	sp,sp,72
 10090d8:	f800283a 	ret
 10090dc:	01000104 	movi	r4,4
 10090e0:	1008eac0 	call	1008eac <__cxa_allocate_exception>
 10090e4:	1009883a 	mov	r4,r2
 10090e8:	008040b4 	movhi	r2,258
 10090ec:	10bc8c04 	addi	r2,r2,-3536
 10090f0:	20800015 	stw	r2,0(r4)
 10090f4:	00c00044 	movi	r3,1
 10090f8:	d8c00115 	stw	r3,4(sp)
 10090fc:	014040b4 	movhi	r5,258
 1009100:	297c9304 	addi	r5,r5,-3508
 1009104:	01804034 	movhi	r6,256
 1009108:	319e7b04 	addi	r6,r6,31212
 100910c:	1008b240 	call	1008b24 <__cxa_throw>
 1009110:	d8800317 	ldw	r2,12(sp)
 1009114:	00ffffc4 	movi	r3,-1
 1009118:	d9000217 	ldw	r4,8(sp)
 100911c:	10c00226 	beq	r2,r3,1009128 <_Znwm+0xf4>
 1009120:	d8c00115 	stw	r3,4(sp)
 1009124:	10094540 	call	1009454 <_Unwind_SjLj_Resume>
 1009128:	00bfffc4 	movi	r2,-1
 100912c:	d8800115 	stw	r2,4(sp)
 1009130:	10081540 	call	1008154 <__cxa_call_unexpected>

01009134 <__cxa_call_terminate>:
 1009134:	defffe04 	addi	sp,sp,-8
 1009138:	dc000015 	stw	r16,0(sp)
 100913c:	dfc00115 	stw	ra,4(sp)
 1009140:	2021883a 	mov	r16,r4
 1009144:	20000626 	beq	r4,zero,1009160 <__cxa_call_terminate+0x2c>
 1009148:	100898c0 	call	100898c <__cxa_begin_catch>
 100914c:	80c00017 	ldw	r3,0(r16)
 1009150:	0090caf4 	movhi	r2,17195
 1009154:	108ac004 	addi	r2,r2,11008
 1009158:	81000117 	ldw	r4,4(r16)
 100915c:	18800126 	beq	r3,r2,1009164 <__cxa_call_terminate+0x30>
 1009160:	10088800 	call	1008880 <_ZSt9terminatev>
 1009164:	0091d3b4 	movhi	r2,18254
 1009168:	109550c4 	addi	r2,r2,21827
 100916c:	20bffc1e 	bne	r4,r2,1009160 <__cxa_call_terminate+0x2c>
 1009170:	813ff817 	ldw	r4,-32(r16)
 1009174:	10087dc0 	call	10087dc <_ZN10__cxxabiv111__terminateEPFvvE>

01009178 <__cxa_get_globals_fast>:
 1009178:	d0a71404 	addi	r2,gp,-25520
 100917c:	f800283a 	ret

01009180 <__cxa_get_globals>:
 1009180:	d0a71404 	addi	r2,gp,-25520
 1009184:	f800283a 	ret

01009188 <_Unwind_SjLj_Register>:
 1009188:	d0a71617 	ldw	r2,-25512(gp)
 100918c:	20800015 	stw	r2,0(r4)
 1009190:	d1271615 	stw	r4,-25512(gp)
 1009194:	f800283a 	ret

01009198 <_Unwind_SjLj_Unregister>:
 1009198:	20800017 	ldw	r2,0(r4)
 100919c:	d0a71615 	stw	r2,-25512(gp)
 10091a0:	f800283a 	ret

010091a4 <_Unwind_GetGR>:
 10091a4:	20800017 	ldw	r2,0(r4)
 10091a8:	294b883a 	add	r5,r5,r5
 10091ac:	294b883a 	add	r5,r5,r5
 10091b0:	288b883a 	add	r5,r5,r2
 10091b4:	28800217 	ldw	r2,8(r5)
 10091b8:	f800283a 	ret

010091bc <_Unwind_GetCFA>:
 10091bc:	21000017 	ldw	r4,0(r4)
 10091c0:	0005883a 	mov	r2,zero
 10091c4:	20000126 	beq	r4,zero,10091cc <_Unwind_GetCFA+0x10>
 10091c8:	20800a17 	ldw	r2,40(r4)
 10091cc:	f800283a 	ret

010091d0 <_Unwind_SetGR>:
 10091d0:	20800017 	ldw	r2,0(r4)
 10091d4:	294b883a 	add	r5,r5,r5
 10091d8:	294b883a 	add	r5,r5,r5
 10091dc:	288b883a 	add	r5,r5,r2
 10091e0:	29800215 	stw	r6,8(r5)
 10091e4:	f800283a 	ret

010091e8 <_Unwind_GetIP>:
 10091e8:	20c00017 	ldw	r3,0(r4)
 10091ec:	18800117 	ldw	r2,4(r3)
 10091f0:	10800044 	addi	r2,r2,1
 10091f4:	f800283a 	ret

010091f8 <_Unwind_GetIPInfo>:
 10091f8:	20c00017 	ldw	r3,0(r4)
 10091fc:	28000015 	stw	zero,0(r5)
 1009200:	18800117 	ldw	r2,4(r3)
 1009204:	10800044 	addi	r2,r2,1
 1009208:	f800283a 	ret

0100920c <_Unwind_SetIP>:
 100920c:	20800017 	ldw	r2,0(r4)
 1009210:	297fffc4 	addi	r5,r5,-1
 1009214:	11400115 	stw	r5,4(r2)
 1009218:	f800283a 	ret

0100921c <_Unwind_GetLanguageSpecificData>:
 100921c:	20c00017 	ldw	r3,0(r4)
 1009220:	18800717 	ldw	r2,28(r3)
 1009224:	f800283a 	ret

01009228 <_Unwind_GetRegionStart>:
 1009228:	0005883a 	mov	r2,zero
 100922c:	f800283a 	ret

01009230 <_Unwind_FindEnclosingFunction>:
 1009230:	0005883a 	mov	r2,zero
 1009234:	f800283a 	ret

01009238 <_Unwind_GetDataRelBase>:
 1009238:	0005883a 	mov	r2,zero
 100923c:	f800283a 	ret

01009240 <_Unwind_GetTextRelBase>:
 1009240:	0005883a 	mov	r2,zero
 1009244:	f800283a 	ret

01009248 <_Unwind_ForcedUnwind_Phase2>:
 1009248:	defff604 	addi	sp,sp,-40
 100924c:	dd400815 	stw	r21,32(sp)
 1009250:	dd000715 	stw	r20,28(sp)
 1009254:	25400317 	ldw	r21,12(r4)
 1009258:	25000417 	ldw	r20,16(r4)
 100925c:	28800017 	ldw	r2,0(r5)
 1009260:	dc800515 	stw	r18,20(sp)
 1009264:	dc000315 	stw	r16,12(sp)
 1009268:	2825883a 	mov	r18,r5
 100926c:	2021883a 	mov	r16,r4
 1009270:	dfc00915 	stw	ra,36(sp)
 1009274:	dcc00615 	stw	r19,24(sp)
 1009278:	dc400415 	stw	r17,16(sp)
 100927c:	00001406 	br	10092d0 <_Unwind_ForcedUnwind_Phase2+0x88>
 1009280:	00800144 	movi	r2,5
 1009284:	88802626 	beq	r17,r2,1009320 <_Unwind_ForcedUnwind_Phase2+0xd8>
 1009288:	98000c26 	beq	r19,zero,10092bc <_Unwind_ForcedUnwind_Phase2+0x74>
 100928c:	82000017 	ldw	r8,0(r16)
 1009290:	dc000015 	stw	r16,0(sp)
 1009294:	dc800115 	stw	r18,4(sp)
 1009298:	82400117 	ldw	r9,4(r16)
 100929c:	400d883a 	mov	r6,r8
 10092a0:	480f883a 	mov	r7,r9
 10092a4:	983ee83a 	callr	r19
 10092a8:	1023883a 	mov	r17,r2
 10092ac:	008001c4 	movi	r2,7
 10092b0:	88801b26 	beq	r17,r2,1009320 <_Unwind_ForcedUnwind_Phase2+0xd8>
 10092b4:	00800204 	movi	r2,8
 10092b8:	8880181e 	bne	r17,r2,100931c <_Unwind_ForcedUnwind_Phase2+0xd4>
 10092bc:	91000017 	ldw	r4,0(r18)
 10092c0:	10091980 	call	1009198 <_Unwind_SjLj_Unregister>
 10092c4:	90800017 	ldw	r2,0(r18)
 10092c8:	10800017 	ldw	r2,0(r2)
 10092cc:	90800015 	stw	r2,0(r18)
 10092d0:	01400684 	movi	r5,26
 10092d4:	04400144 	movi	r17,5
 10092d8:	0027883a 	mov	r19,zero
 10092dc:	10000326 	beq	r2,zero,10092ec <_Unwind_ForcedUnwind_Phase2+0xa4>
 10092e0:	14c00617 	ldw	r19,24(r2)
 10092e4:	0023883a 	mov	r17,zero
 10092e8:	01400284 	movi	r5,10
 10092ec:	dc000015 	stw	r16,0(sp)
 10092f0:	dc800115 	stw	r18,4(sp)
 10092f4:	80800017 	ldw	r2,0(r16)
 10092f8:	dd000215 	stw	r20,8(sp)
 10092fc:	80c00117 	ldw	r3,4(r16)
 1009300:	01000044 	movi	r4,1
 1009304:	100d883a 	mov	r6,r2
 1009308:	180f883a 	mov	r7,r3
 100930c:	a83ee83a 	callr	r21
 1009310:	01400284 	movi	r5,10
 1009314:	01000044 	movi	r4,1
 1009318:	103fd926 	beq	r2,zero,1009280 <_Unwind_ForcedUnwind_Phase2+0x38>
 100931c:	04400084 	movi	r17,2
 1009320:	8805883a 	mov	r2,r17
 1009324:	dfc00917 	ldw	ra,36(sp)
 1009328:	dd400817 	ldw	r21,32(sp)
 100932c:	dd000717 	ldw	r20,28(sp)
 1009330:	dcc00617 	ldw	r19,24(sp)
 1009334:	dc800517 	ldw	r18,20(sp)
 1009338:	dc400417 	ldw	r17,16(sp)
 100933c:	dc000317 	ldw	r16,12(sp)
 1009340:	dec00a04 	addi	sp,sp,40
 1009344:	f800283a 	ret

01009348 <_Unwind_DeleteException>:
 1009348:	20800217 	ldw	r2,8(r4)
 100934c:	200b883a 	mov	r5,r4
 1009350:	01000044 	movi	r4,1
 1009354:	10000126 	beq	r2,zero,100935c <_Unwind_DeleteException+0x14>
 1009358:	1000683a 	jmp	r2
 100935c:	f800283a 	ret

01009360 <_Unwind_RaiseException_Phase2>:
 1009360:	defffa04 	addi	sp,sp,-24
 1009364:	dc800415 	stw	r18,16(sp)
 1009368:	2825883a 	mov	r18,r5
 100936c:	29400017 	ldw	r5,0(r5)
 1009370:	dc400315 	stw	r17,12(sp)
 1009374:	dfc00515 	stw	ra,20(sp)
 1009378:	dc000215 	stw	r16,8(sp)
 100937c:	2023883a 	mov	r17,r4
 1009380:	28001b26 	beq	r5,zero,10093f0 <_Unwind_RaiseException_Phase2+0x90>
 1009384:	88800417 	ldw	r2,16(r17)
 1009388:	0007883a 	mov	r3,zero
 100938c:	2a000617 	ldw	r8,24(r5)
 1009390:	28a1003a 	cmpeq	r16,r5,r2
 1009394:	802090ba 	slli	r16,r16,2
 1009398:	18001b1e 	bne	r3,zero,1009408 <_Unwind_RaiseException_Phase2+0xa8>
 100939c:	40000e26 	beq	r8,zero,10093d8 <_Unwind_RaiseException_Phase2+0x78>
 10093a0:	88800017 	ldw	r2,0(r17)
 10093a4:	dc400015 	stw	r17,0(sp)
 10093a8:	dc800115 	stw	r18,4(sp)
 10093ac:	88c00117 	ldw	r3,4(r17)
 10093b0:	01000044 	movi	r4,1
 10093b4:	81400094 	ori	r5,r16,2
 10093b8:	180f883a 	mov	r7,r3
 10093bc:	100d883a 	mov	r6,r2
 10093c0:	403ee83a 	callr	r8
 10093c4:	1007883a 	mov	r3,r2
 10093c8:	008001c4 	movi	r2,7
 10093cc:	18800f26 	beq	r3,r2,100940c <_Unwind_RaiseException_Phase2+0xac>
 10093d0:	00800204 	movi	r2,8
 10093d4:	18800c1e 	bne	r3,r2,1009408 <_Unwind_RaiseException_Phase2+0xa8>
 10093d8:	8000131e 	bne	r16,zero,1009428 <_Unwind_RaiseException_Phase2+0xc8>
 10093dc:	91400017 	ldw	r5,0(r18)
 10093e0:	28800017 	ldw	r2,0(r5)
 10093e4:	100b883a 	mov	r5,r2
 10093e8:	90800015 	stw	r2,0(r18)
 10093ec:	283fe51e 	bne	r5,zero,1009384 <_Unwind_RaiseException_Phase2+0x24>
 10093f0:	88800417 	ldw	r2,16(r17)
 10093f4:	00c00144 	movi	r3,5
 10093f8:	0011883a 	mov	r8,zero
 10093fc:	28a1003a 	cmpeq	r16,r5,r2
 1009400:	802090ba 	slli	r16,r16,2
 1009404:	183fe526 	beq	r3,zero,100939c <_Unwind_RaiseException_Phase2+0x3c>
 1009408:	00c00084 	movi	r3,2
 100940c:	1805883a 	mov	r2,r3
 1009410:	dfc00517 	ldw	ra,20(sp)
 1009414:	dc800417 	ldw	r18,16(sp)
 1009418:	dc400317 	ldw	r17,12(sp)
 100941c:	dc000217 	ldw	r16,8(sp)
 1009420:	dec00604 	addi	sp,sp,24
 1009424:	f800283a 	ret
 1009428:	10096d00 	call	10096d0 <abort>

0100942c <uw_install_context>:
 100942c:	28800017 	ldw	r2,0(r5)
 1009430:	deffff04 	addi	sp,sp,-4
 1009434:	df000015 	stw	fp,0(sp)
 1009438:	10c00804 	addi	r3,r2,32
 100943c:	d839883a 	mov	fp,sp
 1009440:	d0a71615 	stw	r2,-25512(gp)
 1009444:	19000117 	ldw	r4,4(r3)
 1009448:	1f000017 	ldw	fp,0(r3)
 100944c:	1ec00217 	ldw	sp,8(r3)
 1009450:	2000683a 	jmp	r4

01009454 <_Unwind_SjLj_Resume>:
 1009454:	d0e71617 	ldw	r3,-25512(gp)
 1009458:	20800317 	ldw	r2,12(r4)
 100945c:	defffc04 	addi	sp,sp,-16
 1009460:	dfc00315 	stw	ra,12(sp)
 1009464:	dc000215 	stw	r16,8(sp)
 1009468:	d8c00015 	stw	r3,0(sp)
 100946c:	d8c00115 	stw	r3,4(sp)
 1009470:	1000071e 	bne	r2,zero,1009490 <_Unwind_SjLj_Resume+0x3c>
 1009474:	dc000104 	addi	r16,sp,4
 1009478:	800b883a 	mov	r5,r16
 100947c:	10093600 	call	1009360 <_Unwind_RaiseException_Phase2>
 1009480:	1007883a 	mov	r3,r2
 1009484:	008001c4 	movi	r2,7
 1009488:	18800626 	beq	r3,r2,10094a4 <_Unwind_SjLj_Resume+0x50>
 100948c:	10096d00 	call	10096d0 <abort>
 1009490:	dc000104 	addi	r16,sp,4
 1009494:	800b883a 	mov	r5,r16
 1009498:	10092480 	call	1009248 <_Unwind_ForcedUnwind_Phase2>
 100949c:	1007883a 	mov	r3,r2
 10094a0:	003ff806 	br	1009484 <_Unwind_SjLj_Resume+0x30>
 10094a4:	800b883a 	mov	r5,r16
 10094a8:	d809883a 	mov	r4,sp
 10094ac:	100942c0 	call	100942c <uw_install_context>

010094b0 <_Unwind_SjLj_RaiseException>:
 10094b0:	d0a71617 	ldw	r2,-25512(gp)
 10094b4:	defff804 	addi	sp,sp,-32
 10094b8:	dc000415 	stw	r16,16(sp)
 10094bc:	dfc00715 	stw	ra,28(sp)
 10094c0:	dc800615 	stw	r18,24(sp)
 10094c4:	dc400515 	stw	r17,20(sp)
 10094c8:	2021883a 	mov	r16,r4
 10094cc:	d8800215 	stw	r2,8(sp)
 10094d0:	d8800315 	stw	r2,12(sp)
 10094d4:	10001626 	beq	r2,zero,1009530 <_Unwind_SjLj_RaiseException+0x80>
 10094d8:	dc400304 	addi	r17,sp,12
 10094dc:	04800184 	movi	r18,6
 10094e0:	00000106 	br	10094e8 <_Unwind_SjLj_RaiseException+0x38>
 10094e4:	d8800315 	stw	r2,12(sp)
 10094e8:	12000617 	ldw	r8,24(r2)
 10094ec:	40000d26 	beq	r8,zero,1009524 <_Unwind_SjLj_RaiseException+0x74>
 10094f0:	80800017 	ldw	r2,0(r16)
 10094f4:	dc000015 	stw	r16,0(sp)
 10094f8:	80c00117 	ldw	r3,4(r16)
 10094fc:	01000044 	movi	r4,1
 1009500:	dc400115 	stw	r17,4(sp)
 1009504:	180f883a 	mov	r7,r3
 1009508:	200b883a 	mov	r5,r4
 100950c:	100d883a 	mov	r6,r2
 1009510:	403ee83a 	callr	r8
 1009514:	1007883a 	mov	r3,r2
 1009518:	14800d26 	beq	r2,r18,1009550 <_Unwind_SjLj_RaiseException+0xa0>
 100951c:	00800204 	movi	r2,8
 1009520:	1880191e 	bne	r3,r2,1009588 <_Unwind_SjLj_RaiseException+0xd8>
 1009524:	d8800317 	ldw	r2,12(sp)
 1009528:	10800017 	ldw	r2,0(r2)
 100952c:	103fed1e 	bne	r2,zero,10094e4 <_Unwind_SjLj_RaiseException+0x34>
 1009530:	00c00144 	movi	r3,5
 1009534:	1805883a 	mov	r2,r3
 1009538:	dfc00717 	ldw	ra,28(sp)
 100953c:	dc800617 	ldw	r18,24(sp)
 1009540:	dc400517 	ldw	r17,20(sp)
 1009544:	dc000417 	ldw	r16,16(sp)
 1009548:	dec00804 	addi	sp,sp,32
 100954c:	f800283a 	ret
 1009550:	d8800317 	ldw	r2,12(sp)
 1009554:	80000315 	stw	zero,12(r16)
 1009558:	8009883a 	mov	r4,r16
 100955c:	80800415 	stw	r2,16(r16)
 1009560:	d8800217 	ldw	r2,8(sp)
 1009564:	880b883a 	mov	r5,r17
 1009568:	d8800315 	stw	r2,12(sp)
 100956c:	10093600 	call	1009360 <_Unwind_RaiseException_Phase2>
 1009570:	1007883a 	mov	r3,r2
 1009574:	008001c4 	movi	r2,7
 1009578:	18bfee1e 	bne	r3,r2,1009534 <_Unwind_SjLj_RaiseException+0x84>
 100957c:	880b883a 	mov	r5,r17
 1009580:	d9000204 	addi	r4,sp,8
 1009584:	100942c0 	call	100942c <uw_install_context>
 1009588:	00c000c4 	movi	r3,3
 100958c:	1805883a 	mov	r2,r3
 1009590:	dfc00717 	ldw	ra,28(sp)
 1009594:	dc800617 	ldw	r18,24(sp)
 1009598:	dc400517 	ldw	r17,20(sp)
 100959c:	dc000417 	ldw	r16,16(sp)
 10095a0:	dec00804 	addi	sp,sp,32
 10095a4:	f800283a 	ret

010095a8 <_Unwind_SjLj_ForcedUnwind>:
 10095a8:	defffc04 	addi	sp,sp,-16
 10095ac:	d0a71617 	ldw	r2,-25512(gp)
 10095b0:	dc000215 	stw	r16,8(sp)
 10095b4:	dc000104 	addi	r16,sp,4
 10095b8:	21400315 	stw	r5,12(r4)
 10095bc:	21800415 	stw	r6,16(r4)
 10095c0:	800b883a 	mov	r5,r16
 10095c4:	dfc00315 	stw	ra,12(sp)
 10095c8:	d8800015 	stw	r2,0(sp)
 10095cc:	d8800115 	stw	r2,4(sp)
 10095d0:	10092480 	call	1009248 <_Unwind_ForcedUnwind_Phase2>
 10095d4:	00c001c4 	movi	r3,7
 10095d8:	10c00426 	beq	r2,r3,10095ec <_Unwind_SjLj_ForcedUnwind+0x44>
 10095dc:	dfc00317 	ldw	ra,12(sp)
 10095e0:	dc000217 	ldw	r16,8(sp)
 10095e4:	dec00404 	addi	sp,sp,16
 10095e8:	f800283a 	ret
 10095ec:	800b883a 	mov	r5,r16
 10095f0:	d809883a 	mov	r4,sp
 10095f4:	100942c0 	call	100942c <uw_install_context>

010095f8 <_Unwind_Backtrace>:
 10095f8:	d0a71617 	ldw	r2,-25512(gp)
 10095fc:	defffa04 	addi	sp,sp,-24
 1009600:	dcc00415 	stw	r19,16(sp)
 1009604:	dc800315 	stw	r18,12(sp)
 1009608:	dc400215 	stw	r17,8(sp)
 100960c:	2025883a 	mov	r18,r4
 1009610:	2823883a 	mov	r17,r5
 1009614:	04c00144 	movi	r19,5
 1009618:	dfc00515 	stw	ra,20(sp)
 100961c:	dc000115 	stw	r16,4(sp)
 1009620:	d8800015 	stw	r2,0(sp)
 1009624:	00000406 	br	1009638 <_Unwind_Backtrace+0x40>
 1009628:	84c00b26 	beq	r16,r19,1009658 <_Unwind_Backtrace+0x60>
 100962c:	d8800017 	ldw	r2,0(sp)
 1009630:	10800017 	ldw	r2,0(r2)
 1009634:	d8800015 	stw	r2,0(sp)
 1009638:	04000144 	movi	r16,5
 100963c:	10000126 	beq	r2,zero,1009644 <_Unwind_Backtrace+0x4c>
 1009640:	0021883a 	mov	r16,zero
 1009644:	d809883a 	mov	r4,sp
 1009648:	880b883a 	mov	r5,r17
 100964c:	903ee83a 	callr	r18
 1009650:	103ff526 	beq	r2,zero,1009628 <_Unwind_Backtrace+0x30>
 1009654:	040000c4 	movi	r16,3
 1009658:	8005883a 	mov	r2,r16
 100965c:	dfc00517 	ldw	ra,20(sp)
 1009660:	dcc00417 	ldw	r19,16(sp)
 1009664:	dc800317 	ldw	r18,12(sp)
 1009668:	dc400217 	ldw	r17,8(sp)
 100966c:	dc000117 	ldw	r16,4(sp)
 1009670:	dec00604 	addi	sp,sp,24
 1009674:	f800283a 	ret

01009678 <_Unwind_SjLj_Resume_or_Rethrow>:
 1009678:	20800317 	ldw	r2,12(r4)
 100967c:	defffc04 	addi	sp,sp,-16
 1009680:	dfc00315 	stw	ra,12(sp)
 1009684:	dc000215 	stw	r16,8(sp)
 1009688:	10000926 	beq	r2,zero,10096b0 <_Unwind_SjLj_Resume_or_Rethrow+0x38>
 100968c:	d0a71617 	ldw	r2,-25512(gp)
 1009690:	dc000104 	addi	r16,sp,4
 1009694:	800b883a 	mov	r5,r16
 1009698:	d8800015 	stw	r2,0(sp)
 100969c:	d8800115 	stw	r2,4(sp)
 10096a0:	10092480 	call	1009248 <_Unwind_ForcedUnwind_Phase2>
 10096a4:	00c001c4 	movi	r3,7
 10096a8:	10c00626 	beq	r2,r3,10096c4 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
 10096ac:	10096d00 	call	10096d0 <abort>
 10096b0:	10094b00 	call	10094b0 <_Unwind_SjLj_RaiseException>
 10096b4:	dfc00317 	ldw	ra,12(sp)
 10096b8:	dc000217 	ldw	r16,8(sp)
 10096bc:	dec00404 	addi	sp,sp,16
 10096c0:	f800283a 	ret
 10096c4:	800b883a 	mov	r5,r16
 10096c8:	d809883a 	mov	r4,sp
 10096cc:	100942c0 	call	100942c <uw_install_context>

010096d0 <abort>:
 10096d0:	deffff04 	addi	sp,sp,-4
 10096d4:	01000184 	movi	r4,6
 10096d8:	dfc00015 	stw	ra,0(sp)
 10096dc:	100a3740 	call	100a374 <raise>
 10096e0:	01000044 	movi	r4,1
 10096e4:	101332c0 	call	101332c <_exit>

010096e8 <free>:
 10096e8:	008040b4 	movhi	r2,258
 10096ec:	1084a904 	addi	r2,r2,4772
 10096f0:	200b883a 	mov	r5,r4
 10096f4:	11000017 	ldw	r4,0(r2)
 10096f8:	100e4b81 	jmpi	100e4b8 <_free_r>

010096fc <malloc>:
 10096fc:	008040b4 	movhi	r2,258
 1009700:	1084a904 	addi	r2,r2,4772
 1009704:	200b883a 	mov	r5,r4
 1009708:	11000017 	ldw	r4,0(r2)
 100970c:	10097101 	jmpi	1009710 <_malloc_r>

01009710 <_malloc_r>:
 1009710:	defff604 	addi	sp,sp,-40
 1009714:	28c002c4 	addi	r3,r5,11
 1009718:	00800584 	movi	r2,22
 100971c:	dc800215 	stw	r18,8(sp)
 1009720:	dfc00915 	stw	ra,36(sp)
 1009724:	df000815 	stw	fp,32(sp)
 1009728:	ddc00715 	stw	r23,28(sp)
 100972c:	dd800615 	stw	r22,24(sp)
 1009730:	dd400515 	stw	r21,20(sp)
 1009734:	dd000415 	stw	r20,16(sp)
 1009738:	dcc00315 	stw	r19,12(sp)
 100973c:	dc400115 	stw	r17,4(sp)
 1009740:	dc000015 	stw	r16,0(sp)
 1009744:	2025883a 	mov	r18,r4
 1009748:	10c01236 	bltu	r2,r3,1009794 <_malloc_r+0x84>
 100974c:	04400404 	movi	r17,16
 1009750:	8940142e 	bgeu	r17,r5,10097a4 <_malloc_r+0x94>
 1009754:	00800304 	movi	r2,12
 1009758:	0007883a 	mov	r3,zero
 100975c:	90800015 	stw	r2,0(r18)
 1009760:	1805883a 	mov	r2,r3
 1009764:	dfc00917 	ldw	ra,36(sp)
 1009768:	df000817 	ldw	fp,32(sp)
 100976c:	ddc00717 	ldw	r23,28(sp)
 1009770:	dd800617 	ldw	r22,24(sp)
 1009774:	dd400517 	ldw	r21,20(sp)
 1009778:	dd000417 	ldw	r20,16(sp)
 100977c:	dcc00317 	ldw	r19,12(sp)
 1009780:	dc800217 	ldw	r18,8(sp)
 1009784:	dc400117 	ldw	r17,4(sp)
 1009788:	dc000017 	ldw	r16,0(sp)
 100978c:	dec00a04 	addi	sp,sp,40
 1009790:	f800283a 	ret
 1009794:	00bffe04 	movi	r2,-8
 1009798:	18a2703a 	and	r17,r3,r2
 100979c:	883fed16 	blt	r17,zero,1009754 <_malloc_r+0x44>
 10097a0:	897fec36 	bltu	r17,r5,1009754 <_malloc_r+0x44>
 10097a4:	9009883a 	mov	r4,r18
 10097a8:	1013f940 	call	1013f94 <__malloc_lock>
 10097ac:	00807dc4 	movi	r2,503
 10097b0:	14402b2e 	bgeu	r2,r17,1009860 <_malloc_r+0x150>
 10097b4:	8806d27a 	srli	r3,r17,9
 10097b8:	18003f1e 	bne	r3,zero,10098b8 <_malloc_r+0x1a8>
 10097bc:	880cd0fa 	srli	r6,r17,3
 10097c0:	300490fa 	slli	r2,r6,3
 10097c4:	02c040b4 	movhi	r11,258
 10097c8:	5afe0404 	addi	r11,r11,-2032
 10097cc:	12cb883a 	add	r5,r2,r11
 10097d0:	2c000317 	ldw	r16,12(r5)
 10097d4:	580f883a 	mov	r7,r11
 10097d8:	2c00041e 	bne	r5,r16,10097ec <_malloc_r+0xdc>
 10097dc:	00000a06 	br	1009808 <_malloc_r+0xf8>
 10097e0:	1800860e 	bge	r3,zero,10099fc <_malloc_r+0x2ec>
 10097e4:	84000317 	ldw	r16,12(r16)
 10097e8:	2c000726 	beq	r5,r16,1009808 <_malloc_r+0xf8>
 10097ec:	80800117 	ldw	r2,4(r16)
 10097f0:	00ffff04 	movi	r3,-4
 10097f4:	10c8703a 	and	r4,r2,r3
 10097f8:	2447c83a 	sub	r3,r4,r17
 10097fc:	008003c4 	movi	r2,15
 1009800:	10fff70e 	bge	r2,r3,10097e0 <_malloc_r+0xd0>
 1009804:	31bfffc4 	addi	r6,r6,-1
 1009808:	32400044 	addi	r9,r6,1
 100980c:	028040b4 	movhi	r10,258
 1009810:	52be0604 	addi	r10,r10,-2024
 1009814:	54000217 	ldw	r16,8(r10)
 1009818:	8280a026 	beq	r16,r10,1009a9c <_malloc_r+0x38c>
 100981c:	80800117 	ldw	r2,4(r16)
 1009820:	00ffff04 	movi	r3,-4
 1009824:	10ca703a 	and	r5,r2,r3
 1009828:	2c4dc83a 	sub	r6,r5,r17
 100982c:	008003c4 	movi	r2,15
 1009830:	11808316 	blt	r2,r6,1009a40 <_malloc_r+0x330>
 1009834:	52800315 	stw	r10,12(r10)
 1009838:	52800215 	stw	r10,8(r10)
 100983c:	30002916 	blt	r6,zero,10098e4 <_malloc_r+0x1d4>
 1009840:	8147883a 	add	r3,r16,r5
 1009844:	18800117 	ldw	r2,4(r3)
 1009848:	9009883a 	mov	r4,r18
 100984c:	10800054 	ori	r2,r2,1
 1009850:	18800115 	stw	r2,4(r3)
 1009854:	101409c0 	call	101409c <__malloc_unlock>
 1009858:	80c00204 	addi	r3,r16,8
 100985c:	003fc006 	br	1009760 <_malloc_r+0x50>
 1009860:	02c040b4 	movhi	r11,258
 1009864:	5afe0404 	addi	r11,r11,-2032
 1009868:	8ac5883a 	add	r2,r17,r11
 100986c:	14000317 	ldw	r16,12(r2)
 1009870:	580f883a 	mov	r7,r11
 1009874:	8806d0fa 	srli	r3,r17,3
 1009878:	14006c26 	beq	r2,r16,1009a2c <_malloc_r+0x31c>
 100987c:	80c00117 	ldw	r3,4(r16)
 1009880:	00bfff04 	movi	r2,-4
 1009884:	81800317 	ldw	r6,12(r16)
 1009888:	1886703a 	and	r3,r3,r2
 100988c:	80c7883a 	add	r3,r16,r3
 1009890:	18800117 	ldw	r2,4(r3)
 1009894:	81400217 	ldw	r5,8(r16)
 1009898:	9009883a 	mov	r4,r18
 100989c:	10800054 	ori	r2,r2,1
 10098a0:	18800115 	stw	r2,4(r3)
 10098a4:	31400215 	stw	r5,8(r6)
 10098a8:	29800315 	stw	r6,12(r5)
 10098ac:	101409c0 	call	101409c <__malloc_unlock>
 10098b0:	80c00204 	addi	r3,r16,8
 10098b4:	003faa06 	br	1009760 <_malloc_r+0x50>
 10098b8:	00800104 	movi	r2,4
 10098bc:	10c0052e 	bgeu	r2,r3,10098d4 <_malloc_r+0x1c4>
 10098c0:	00800504 	movi	r2,20
 10098c4:	10c07836 	bltu	r2,r3,1009aa8 <_malloc_r+0x398>
 10098c8:	198016c4 	addi	r6,r3,91
 10098cc:	300490fa 	slli	r2,r6,3
 10098d0:	003fbc06 	br	10097c4 <_malloc_r+0xb4>
 10098d4:	8804d1ba 	srli	r2,r17,6
 10098d8:	11800e04 	addi	r6,r2,56
 10098dc:	300490fa 	slli	r2,r6,3
 10098e0:	003fb806 	br	10097c4 <_malloc_r+0xb4>
 10098e4:	00807fc4 	movi	r2,511
 10098e8:	1140bb36 	bltu	r2,r5,1009bd8 <_malloc_r+0x4c8>
 10098ec:	2806d0fa 	srli	r3,r5,3
 10098f0:	573ffe04 	addi	fp,r10,-8
 10098f4:	00800044 	movi	r2,1
 10098f8:	180890fa 	slli	r4,r3,3
 10098fc:	1807d0ba 	srai	r3,r3,2
 1009900:	e1c00117 	ldw	r7,4(fp)
 1009904:	5909883a 	add	r4,r11,r4
 1009908:	21400217 	ldw	r5,8(r4)
 100990c:	10c4983a 	sll	r2,r2,r3
 1009910:	81000315 	stw	r4,12(r16)
 1009914:	81400215 	stw	r5,8(r16)
 1009918:	388eb03a 	or	r7,r7,r2
 100991c:	2c000315 	stw	r16,12(r5)
 1009920:	24000215 	stw	r16,8(r4)
 1009924:	e1c00115 	stw	r7,4(fp)
 1009928:	4807883a 	mov	r3,r9
 100992c:	4800cd16 	blt	r9,zero,1009c64 <_malloc_r+0x554>
 1009930:	1807d0ba 	srai	r3,r3,2
 1009934:	00800044 	movi	r2,1
 1009938:	10c8983a 	sll	r4,r2,r3
 100993c:	39004436 	bltu	r7,r4,1009a50 <_malloc_r+0x340>
 1009940:	21c4703a 	and	r2,r4,r7
 1009944:	10000a1e 	bne	r2,zero,1009970 <_malloc_r+0x260>
 1009948:	2109883a 	add	r4,r4,r4
 100994c:	00bfff04 	movi	r2,-4
 1009950:	4884703a 	and	r2,r9,r2
 1009954:	3906703a 	and	r3,r7,r4
 1009958:	12400104 	addi	r9,r2,4
 100995c:	1800041e 	bne	r3,zero,1009970 <_malloc_r+0x260>
 1009960:	2109883a 	add	r4,r4,r4
 1009964:	3904703a 	and	r2,r7,r4
 1009968:	4a400104 	addi	r9,r9,4
 100996c:	103ffc26 	beq	r2,zero,1009960 <_malloc_r+0x250>
 1009970:	480490fa 	slli	r2,r9,3
 1009974:	4819883a 	mov	r12,r9
 1009978:	023fff04 	movi	r8,-4
 100997c:	589b883a 	add	r13,r11,r2
 1009980:	6807883a 	mov	r3,r13
 1009984:	014003c4 	movi	r5,15
 1009988:	1c000317 	ldw	r16,12(r3)
 100998c:	1c00041e 	bne	r3,r16,10099a0 <_malloc_r+0x290>
 1009990:	0000a706 	br	1009c30 <_malloc_r+0x520>
 1009994:	3000ab0e 	bge	r6,zero,1009c44 <_malloc_r+0x534>
 1009998:	84000317 	ldw	r16,12(r16)
 100999c:	1c00a426 	beq	r3,r16,1009c30 <_malloc_r+0x520>
 10099a0:	80800117 	ldw	r2,4(r16)
 10099a4:	1204703a 	and	r2,r2,r8
 10099a8:	144dc83a 	sub	r6,r2,r17
 10099ac:	29bff90e 	bge	r5,r6,1009994 <_malloc_r+0x284>
 10099b0:	81000317 	ldw	r4,12(r16)
 10099b4:	80c00217 	ldw	r3,8(r16)
 10099b8:	89400054 	ori	r5,r17,1
 10099bc:	8445883a 	add	r2,r16,r17
 10099c0:	20c00215 	stw	r3,8(r4)
 10099c4:	19000315 	stw	r4,12(r3)
 10099c8:	81400115 	stw	r5,4(r16)
 10099cc:	1187883a 	add	r3,r2,r6
 10099d0:	31000054 	ori	r4,r6,1
 10099d4:	50800315 	stw	r2,12(r10)
 10099d8:	50800215 	stw	r2,8(r10)
 10099dc:	19800015 	stw	r6,0(r3)
 10099e0:	11000115 	stw	r4,4(r2)
 10099e4:	12800215 	stw	r10,8(r2)
 10099e8:	12800315 	stw	r10,12(r2)
 10099ec:	9009883a 	mov	r4,r18
 10099f0:	101409c0 	call	101409c <__malloc_unlock>
 10099f4:	80c00204 	addi	r3,r16,8
 10099f8:	003f5906 	br	1009760 <_malloc_r+0x50>
 10099fc:	8109883a 	add	r4,r16,r4
 1009a00:	20800117 	ldw	r2,4(r4)
 1009a04:	80c00217 	ldw	r3,8(r16)
 1009a08:	81400317 	ldw	r5,12(r16)
 1009a0c:	10800054 	ori	r2,r2,1
 1009a10:	20800115 	stw	r2,4(r4)
 1009a14:	28c00215 	stw	r3,8(r5)
 1009a18:	19400315 	stw	r5,12(r3)
 1009a1c:	9009883a 	mov	r4,r18
 1009a20:	101409c0 	call	101409c <__malloc_unlock>
 1009a24:	80c00204 	addi	r3,r16,8
 1009a28:	003f4d06 	br	1009760 <_malloc_r+0x50>
 1009a2c:	80800204 	addi	r2,r16,8
 1009a30:	14000317 	ldw	r16,12(r2)
 1009a34:	143f911e 	bne	r2,r16,100987c <_malloc_r+0x16c>
 1009a38:	1a400084 	addi	r9,r3,2
 1009a3c:	003f7306 	br	100980c <_malloc_r+0xfc>
 1009a40:	88c00054 	ori	r3,r17,1
 1009a44:	8445883a 	add	r2,r16,r17
 1009a48:	80c00115 	stw	r3,4(r16)
 1009a4c:	003fdf06 	br	10099cc <_malloc_r+0x2bc>
 1009a50:	e4000217 	ldw	r16,8(fp)
 1009a54:	00bfff04 	movi	r2,-4
 1009a58:	80c00117 	ldw	r3,4(r16)
 1009a5c:	802d883a 	mov	r22,r16
 1009a60:	18aa703a 	and	r21,r3,r2
 1009a64:	ac401636 	bltu	r21,r17,1009ac0 <_malloc_r+0x3b0>
 1009a68:	ac49c83a 	sub	r4,r21,r17
 1009a6c:	008003c4 	movi	r2,15
 1009a70:	1100130e 	bge	r2,r4,1009ac0 <_malloc_r+0x3b0>
 1009a74:	88800054 	ori	r2,r17,1
 1009a78:	8447883a 	add	r3,r16,r17
 1009a7c:	80800115 	stw	r2,4(r16)
 1009a80:	20800054 	ori	r2,r4,1
 1009a84:	18800115 	stw	r2,4(r3)
 1009a88:	e0c00215 	stw	r3,8(fp)
 1009a8c:	9009883a 	mov	r4,r18
 1009a90:	101409c0 	call	101409c <__malloc_unlock>
 1009a94:	80c00204 	addi	r3,r16,8
 1009a98:	003f3106 	br	1009760 <_malloc_r+0x50>
 1009a9c:	39c00117 	ldw	r7,4(r7)
 1009aa0:	573ffe04 	addi	fp,r10,-8
 1009aa4:	003fa006 	br	1009928 <_malloc_r+0x218>
 1009aa8:	00801504 	movi	r2,84
 1009aac:	10c06736 	bltu	r2,r3,1009c4c <_malloc_r+0x53c>
 1009ab0:	8804d33a 	srli	r2,r17,12
 1009ab4:	11801b84 	addi	r6,r2,110
 1009ab8:	300490fa 	slli	r2,r6,3
 1009abc:	003f4106 	br	10097c4 <_malloc_r+0xb4>
 1009ac0:	d0a71717 	ldw	r2,-25508(gp)
 1009ac4:	d0e00f17 	ldw	r3,-32708(gp)
 1009ac8:	053fffc4 	movi	r20,-1
 1009acc:	10800404 	addi	r2,r2,16
 1009ad0:	88a7883a 	add	r19,r17,r2
 1009ad4:	1d000326 	beq	r3,r20,1009ae4 <_malloc_r+0x3d4>
 1009ad8:	98c3ffc4 	addi	r3,r19,4095
 1009adc:	00bc0004 	movi	r2,-4096
 1009ae0:	18a6703a 	and	r19,r3,r2
 1009ae4:	9009883a 	mov	r4,r18
 1009ae8:	980b883a 	mov	r5,r19
 1009aec:	100a2380 	call	100a238 <_sbrk_r>
 1009af0:	1009883a 	mov	r4,r2
 1009af4:	15000426 	beq	r2,r20,1009b08 <_malloc_r+0x3f8>
 1009af8:	854b883a 	add	r5,r16,r21
 1009afc:	1029883a 	mov	r20,r2
 1009b00:	11405a2e 	bgeu	r2,r5,1009c6c <_malloc_r+0x55c>
 1009b04:	87000c26 	beq	r16,fp,1009b38 <_malloc_r+0x428>
 1009b08:	e4000217 	ldw	r16,8(fp)
 1009b0c:	80c00117 	ldw	r3,4(r16)
 1009b10:	00bfff04 	movi	r2,-4
 1009b14:	1884703a 	and	r2,r3,r2
 1009b18:	14400336 	bltu	r2,r17,1009b28 <_malloc_r+0x418>
 1009b1c:	1449c83a 	sub	r4,r2,r17
 1009b20:	008003c4 	movi	r2,15
 1009b24:	113fd316 	blt	r2,r4,1009a74 <_malloc_r+0x364>
 1009b28:	9009883a 	mov	r4,r18
 1009b2c:	101409c0 	call	101409c <__malloc_unlock>
 1009b30:	0007883a 	mov	r3,zero
 1009b34:	003f0a06 	br	1009760 <_malloc_r+0x50>
 1009b38:	05c040b4 	movhi	r23,258
 1009b3c:	bdddda04 	addi	r23,r23,30568
 1009b40:	b8800017 	ldw	r2,0(r23)
 1009b44:	988d883a 	add	r6,r19,r2
 1009b48:	b9800015 	stw	r6,0(r23)
 1009b4c:	d0e00f17 	ldw	r3,-32708(gp)
 1009b50:	00bfffc4 	movi	r2,-1
 1009b54:	18808e26 	beq	r3,r2,1009d90 <_malloc_r+0x680>
 1009b58:	2145c83a 	sub	r2,r4,r5
 1009b5c:	3085883a 	add	r2,r6,r2
 1009b60:	b8800015 	stw	r2,0(r23)
 1009b64:	20c001cc 	andi	r3,r4,7
 1009b68:	18005f1e 	bne	r3,zero,1009ce8 <_malloc_r+0x5d8>
 1009b6c:	000b883a 	mov	r5,zero
 1009b70:	a4c5883a 	add	r2,r20,r19
 1009b74:	1083ffcc 	andi	r2,r2,4095
 1009b78:	00c40004 	movi	r3,4096
 1009b7c:	1887c83a 	sub	r3,r3,r2
 1009b80:	28e7883a 	add	r19,r5,r3
 1009b84:	9009883a 	mov	r4,r18
 1009b88:	980b883a 	mov	r5,r19
 1009b8c:	100a2380 	call	100a238 <_sbrk_r>
 1009b90:	1007883a 	mov	r3,r2
 1009b94:	00bfffc4 	movi	r2,-1
 1009b98:	18807a26 	beq	r3,r2,1009d84 <_malloc_r+0x674>
 1009b9c:	1d05c83a 	sub	r2,r3,r20
 1009ba0:	9885883a 	add	r2,r19,r2
 1009ba4:	10c00054 	ori	r3,r2,1
 1009ba8:	b8800017 	ldw	r2,0(r23)
 1009bac:	a021883a 	mov	r16,r20
 1009bb0:	a0c00115 	stw	r3,4(r20)
 1009bb4:	9885883a 	add	r2,r19,r2
 1009bb8:	b8800015 	stw	r2,0(r23)
 1009bbc:	e5000215 	stw	r20,8(fp)
 1009bc0:	b7003626 	beq	r22,fp,1009c9c <_malloc_r+0x58c>
 1009bc4:	018003c4 	movi	r6,15
 1009bc8:	35404b36 	bltu	r6,r21,1009cf8 <_malloc_r+0x5e8>
 1009bcc:	00800044 	movi	r2,1
 1009bd0:	a0800115 	stw	r2,4(r20)
 1009bd4:	003fcd06 	br	1009b0c <_malloc_r+0x3fc>
 1009bd8:	2808d27a 	srli	r4,r5,9
 1009bdc:	2000371e 	bne	r4,zero,1009cbc <_malloc_r+0x5ac>
 1009be0:	2808d0fa 	srli	r4,r5,3
 1009be4:	200690fa 	slli	r3,r4,3
 1009be8:	1ad1883a 	add	r8,r3,r11
 1009bec:	41800217 	ldw	r6,8(r8)
 1009bf0:	41805b26 	beq	r8,r6,1009d60 <_malloc_r+0x650>
 1009bf4:	30800117 	ldw	r2,4(r6)
 1009bf8:	00ffff04 	movi	r3,-4
 1009bfc:	10c4703a 	and	r2,r2,r3
 1009c00:	2880022e 	bgeu	r5,r2,1009c0c <_malloc_r+0x4fc>
 1009c04:	31800217 	ldw	r6,8(r6)
 1009c08:	41bffa1e 	bne	r8,r6,1009bf4 <_malloc_r+0x4e4>
 1009c0c:	32000317 	ldw	r8,12(r6)
 1009c10:	39c00117 	ldw	r7,4(r7)
 1009c14:	82000315 	stw	r8,12(r16)
 1009c18:	81800215 	stw	r6,8(r16)
 1009c1c:	070040b4 	movhi	fp,258
 1009c20:	e73e0404 	addi	fp,fp,-2032
 1009c24:	34000315 	stw	r16,12(r6)
 1009c28:	44000215 	stw	r16,8(r8)
 1009c2c:	003f3e06 	br	1009928 <_malloc_r+0x218>
 1009c30:	63000044 	addi	r12,r12,1
 1009c34:	608000cc 	andi	r2,r12,3
 1009c38:	10005d26 	beq	r2,zero,1009db0 <_malloc_r+0x6a0>
 1009c3c:	18c00204 	addi	r3,r3,8
 1009c40:	003f5106 	br	1009988 <_malloc_r+0x278>
 1009c44:	8089883a 	add	r4,r16,r2
 1009c48:	003f6d06 	br	1009a00 <_malloc_r+0x2f0>
 1009c4c:	00805504 	movi	r2,340
 1009c50:	10c02036 	bltu	r2,r3,1009cd4 <_malloc_r+0x5c4>
 1009c54:	8804d3fa 	srli	r2,r17,15
 1009c58:	11801dc4 	addi	r6,r2,119
 1009c5c:	300490fa 	slli	r2,r6,3
 1009c60:	003ed806 	br	10097c4 <_malloc_r+0xb4>
 1009c64:	48c000c4 	addi	r3,r9,3
 1009c68:	003f3106 	br	1009930 <_malloc_r+0x220>
 1009c6c:	05c040b4 	movhi	r23,258
 1009c70:	bdddda04 	addi	r23,r23,30568
 1009c74:	b8800017 	ldw	r2,0(r23)
 1009c78:	988d883a 	add	r6,r19,r2
 1009c7c:	b9800015 	stw	r6,0(r23)
 1009c80:	293fb21e 	bne	r5,r4,1009b4c <_malloc_r+0x43c>
 1009c84:	2083ffcc 	andi	r2,r4,4095
 1009c88:	103fb01e 	bne	r2,zero,1009b4c <_malloc_r+0x43c>
 1009c8c:	e4000217 	ldw	r16,8(fp)
 1009c90:	9d45883a 	add	r2,r19,r21
 1009c94:	10800054 	ori	r2,r2,1
 1009c98:	80800115 	stw	r2,4(r16)
 1009c9c:	b8c00017 	ldw	r3,0(r23)
 1009ca0:	d0a71817 	ldw	r2,-25504(gp)
 1009ca4:	10c0012e 	bgeu	r2,r3,1009cac <_malloc_r+0x59c>
 1009ca8:	d0e71815 	stw	r3,-25504(gp)
 1009cac:	d0a71917 	ldw	r2,-25500(gp)
 1009cb0:	10ff962e 	bgeu	r2,r3,1009b0c <_malloc_r+0x3fc>
 1009cb4:	d0e71915 	stw	r3,-25500(gp)
 1009cb8:	003f9406 	br	1009b0c <_malloc_r+0x3fc>
 1009cbc:	00800104 	movi	r2,4
 1009cc0:	11001e36 	bltu	r2,r4,1009d3c <_malloc_r+0x62c>
 1009cc4:	2804d1ba 	srli	r2,r5,6
 1009cc8:	11000e04 	addi	r4,r2,56
 1009ccc:	200690fa 	slli	r3,r4,3
 1009cd0:	003fc506 	br	1009be8 <_malloc_r+0x4d8>
 1009cd4:	00815504 	movi	r2,1364
 1009cd8:	10c01d2e 	bgeu	r2,r3,1009d50 <_malloc_r+0x640>
 1009cdc:	01801f84 	movi	r6,126
 1009ce0:	0080fc04 	movi	r2,1008
 1009ce4:	003eb706 	br	10097c4 <_malloc_r+0xb4>
 1009ce8:	00800204 	movi	r2,8
 1009cec:	10cbc83a 	sub	r5,r2,r3
 1009cf0:	2169883a 	add	r20,r4,r5
 1009cf4:	003f9e06 	br	1009b70 <_malloc_r+0x460>
 1009cf8:	00bffe04 	movi	r2,-8
 1009cfc:	a93ffd04 	addi	r4,r21,-12
 1009d00:	2088703a 	and	r4,r4,r2
 1009d04:	b10b883a 	add	r5,r22,r4
 1009d08:	00c00144 	movi	r3,5
 1009d0c:	28c00215 	stw	r3,8(r5)
 1009d10:	28c00115 	stw	r3,4(r5)
 1009d14:	b0800117 	ldw	r2,4(r22)
 1009d18:	1080004c 	andi	r2,r2,1
 1009d1c:	2084b03a 	or	r2,r4,r2
 1009d20:	b0800115 	stw	r2,4(r22)
 1009d24:	313fdd2e 	bgeu	r6,r4,1009c9c <_malloc_r+0x58c>
 1009d28:	b1400204 	addi	r5,r22,8
 1009d2c:	9009883a 	mov	r4,r18
 1009d30:	100e4b80 	call	100e4b8 <_free_r>
 1009d34:	e4000217 	ldw	r16,8(fp)
 1009d38:	003fd806 	br	1009c9c <_malloc_r+0x58c>
 1009d3c:	00800504 	movi	r2,20
 1009d40:	11001536 	bltu	r2,r4,1009d98 <_malloc_r+0x688>
 1009d44:	210016c4 	addi	r4,r4,91
 1009d48:	200690fa 	slli	r3,r4,3
 1009d4c:	003fa606 	br	1009be8 <_malloc_r+0x4d8>
 1009d50:	8804d4ba 	srli	r2,r17,18
 1009d54:	11801f04 	addi	r6,r2,124
 1009d58:	300490fa 	slli	r2,r6,3
 1009d5c:	003e9906 	br	10097c4 <_malloc_r+0xb4>
 1009d60:	2009d0ba 	srai	r4,r4,2
 1009d64:	014040b4 	movhi	r5,258
 1009d68:	297e0404 	addi	r5,r5,-2032
 1009d6c:	00c00044 	movi	r3,1
 1009d70:	28800117 	ldw	r2,4(r5)
 1009d74:	1906983a 	sll	r3,r3,r4
 1009d78:	10c4b03a 	or	r2,r2,r3
 1009d7c:	28800115 	stw	r2,4(r5)
 1009d80:	003fa306 	br	1009c10 <_malloc_r+0x500>
 1009d84:	0027883a 	mov	r19,zero
 1009d88:	00c00044 	movi	r3,1
 1009d8c:	003f8606 	br	1009ba8 <_malloc_r+0x498>
 1009d90:	d1200f15 	stw	r4,-32708(gp)
 1009d94:	003f7306 	br	1009b64 <_malloc_r+0x454>
 1009d98:	00801504 	movi	r2,84
 1009d9c:	11001936 	bltu	r2,r4,1009e04 <_malloc_r+0x6f4>
 1009da0:	2804d33a 	srli	r2,r5,12
 1009da4:	11001b84 	addi	r4,r2,110
 1009da8:	200690fa 	slli	r3,r4,3
 1009dac:	003f8e06 	br	1009be8 <_malloc_r+0x4d8>
 1009db0:	480b883a 	mov	r5,r9
 1009db4:	6807883a 	mov	r3,r13
 1009db8:	288000cc 	andi	r2,r5,3
 1009dbc:	18fffe04 	addi	r3,r3,-8
 1009dc0:	297fffc4 	addi	r5,r5,-1
 1009dc4:	10001526 	beq	r2,zero,1009e1c <_malloc_r+0x70c>
 1009dc8:	18800217 	ldw	r2,8(r3)
 1009dcc:	10fffa26 	beq	r2,r3,1009db8 <_malloc_r+0x6a8>
 1009dd0:	2109883a 	add	r4,r4,r4
 1009dd4:	393f1e36 	bltu	r7,r4,1009a50 <_malloc_r+0x340>
 1009dd8:	203f1d26 	beq	r4,zero,1009a50 <_malloc_r+0x340>
 1009ddc:	21c4703a 	and	r2,r4,r7
 1009de0:	10000226 	beq	r2,zero,1009dec <_malloc_r+0x6dc>
 1009de4:	6013883a 	mov	r9,r12
 1009de8:	003ee106 	br	1009970 <_malloc_r+0x260>
 1009dec:	2109883a 	add	r4,r4,r4
 1009df0:	3904703a 	and	r2,r7,r4
 1009df4:	63000104 	addi	r12,r12,4
 1009df8:	103ffc26 	beq	r2,zero,1009dec <_malloc_r+0x6dc>
 1009dfc:	6013883a 	mov	r9,r12
 1009e00:	003edb06 	br	1009970 <_malloc_r+0x260>
 1009e04:	00805504 	movi	r2,340
 1009e08:	11000836 	bltu	r2,r4,1009e2c <_malloc_r+0x71c>
 1009e0c:	2804d3fa 	srli	r2,r5,15
 1009e10:	11001dc4 	addi	r4,r2,119
 1009e14:	200690fa 	slli	r3,r4,3
 1009e18:	003f7306 	br	1009be8 <_malloc_r+0x4d8>
 1009e1c:	0104303a 	nor	r2,zero,r4
 1009e20:	388e703a 	and	r7,r7,r2
 1009e24:	e1c00115 	stw	r7,4(fp)
 1009e28:	003fe906 	br	1009dd0 <_malloc_r+0x6c0>
 1009e2c:	00815504 	movi	r2,1364
 1009e30:	1100032e 	bgeu	r2,r4,1009e40 <_malloc_r+0x730>
 1009e34:	01001f84 	movi	r4,126
 1009e38:	00c0fc04 	movi	r3,1008
 1009e3c:	003f6a06 	br	1009be8 <_malloc_r+0x4d8>
 1009e40:	2804d4ba 	srli	r2,r5,18
 1009e44:	11001f04 	addi	r4,r2,124
 1009e48:	200690fa 	slli	r3,r4,3
 1009e4c:	003f6606 	br	1009be8 <_malloc_r+0x4d8>

01009e50 <memchr>:
 1009e50:	008000c4 	movi	r2,3
 1009e54:	29403fcc 	andi	r5,r5,255
 1009e58:	2007883a 	mov	r3,r4
 1009e5c:	1180022e 	bgeu	r2,r6,1009e68 <memchr+0x18>
 1009e60:	2084703a 	and	r2,r4,r2
 1009e64:	10000b26 	beq	r2,zero,1009e94 <memchr+0x44>
 1009e68:	313fffc4 	addi	r4,r6,-1
 1009e6c:	3000051e 	bne	r6,zero,1009e84 <memchr+0x34>
 1009e70:	00002c06 	br	1009f24 <memchr+0xd4>
 1009e74:	213fffc4 	addi	r4,r4,-1
 1009e78:	00bfffc4 	movi	r2,-1
 1009e7c:	18c00044 	addi	r3,r3,1
 1009e80:	20802826 	beq	r4,r2,1009f24 <memchr+0xd4>
 1009e84:	18800003 	ldbu	r2,0(r3)
 1009e88:	28bffa1e 	bne	r5,r2,1009e74 <memchr+0x24>
 1009e8c:	1805883a 	mov	r2,r3
 1009e90:	f800283a 	ret
 1009e94:	0011883a 	mov	r8,zero
 1009e98:	0007883a 	mov	r3,zero
 1009e9c:	01c00104 	movi	r7,4
 1009ea0:	4004923a 	slli	r2,r8,8
 1009ea4:	18c00044 	addi	r3,r3,1
 1009ea8:	1151883a 	add	r8,r2,r5
 1009eac:	19fffc1e 	bne	r3,r7,1009ea0 <memchr+0x50>
 1009eb0:	02bfbff4 	movhi	r10,65279
 1009eb4:	52bfbfc4 	addi	r10,r10,-257
 1009eb8:	02602074 	movhi	r9,32897
 1009ebc:	4a602004 	addi	r9,r9,-32640
 1009ec0:	02c000c4 	movi	r11,3
 1009ec4:	20800017 	ldw	r2,0(r4)
 1009ec8:	31bfff04 	addi	r6,r6,-4
 1009ecc:	200f883a 	mov	r7,r4
 1009ed0:	1204f03a 	xor	r2,r2,r8
 1009ed4:	1287883a 	add	r3,r2,r10
 1009ed8:	1a46703a 	and	r3,r3,r9
 1009edc:	0084303a 	nor	r2,zero,r2
 1009ee0:	10c4703a 	and	r2,r2,r3
 1009ee4:	10000b26 	beq	r2,zero,1009f14 <memchr+0xc4>
 1009ee8:	20800003 	ldbu	r2,0(r4)
 1009eec:	28800f26 	beq	r5,r2,1009f2c <memchr+0xdc>
 1009ef0:	20800043 	ldbu	r2,1(r4)
 1009ef4:	21c00044 	addi	r7,r4,1
 1009ef8:	28800c26 	beq	r5,r2,1009f2c <memchr+0xdc>
 1009efc:	20800083 	ldbu	r2,2(r4)
 1009f00:	21c00084 	addi	r7,r4,2
 1009f04:	28800926 	beq	r5,r2,1009f2c <memchr+0xdc>
 1009f08:	208000c3 	ldbu	r2,3(r4)
 1009f0c:	21c000c4 	addi	r7,r4,3
 1009f10:	28800626 	beq	r5,r2,1009f2c <memchr+0xdc>
 1009f14:	21000104 	addi	r4,r4,4
 1009f18:	59bfea36 	bltu	r11,r6,1009ec4 <memchr+0x74>
 1009f1c:	2007883a 	mov	r3,r4
 1009f20:	003fd106 	br	1009e68 <memchr+0x18>
 1009f24:	0005883a 	mov	r2,zero
 1009f28:	f800283a 	ret
 1009f2c:	3805883a 	mov	r2,r7
 1009f30:	f800283a 	ret

01009f34 <memcmp>:
 1009f34:	00c000c4 	movi	r3,3
 1009f38:	1980032e 	bgeu	r3,r6,1009f48 <memcmp+0x14>
 1009f3c:	2144b03a 	or	r2,r4,r5
 1009f40:	10c4703a 	and	r2,r2,r3
 1009f44:	10000f26 	beq	r2,zero,1009f84 <memcmp+0x50>
 1009f48:	31ffffc4 	addi	r7,r6,-1
 1009f4c:	3000061e 	bne	r6,zero,1009f68 <memcmp+0x34>
 1009f50:	00000a06 	br	1009f7c <memcmp+0x48>
 1009f54:	39ffffc4 	addi	r7,r7,-1
 1009f58:	00bfffc4 	movi	r2,-1
 1009f5c:	21000044 	addi	r4,r4,1
 1009f60:	29400044 	addi	r5,r5,1
 1009f64:	38800526 	beq	r7,r2,1009f7c <memcmp+0x48>
 1009f68:	20c00003 	ldbu	r3,0(r4)
 1009f6c:	28800003 	ldbu	r2,0(r5)
 1009f70:	18bff826 	beq	r3,r2,1009f54 <memcmp+0x20>
 1009f74:	1885c83a 	sub	r2,r3,r2
 1009f78:	f800283a 	ret
 1009f7c:	0005883a 	mov	r2,zero
 1009f80:	f800283a 	ret
 1009f84:	180f883a 	mov	r7,r3
 1009f88:	20c00017 	ldw	r3,0(r4)
 1009f8c:	28800017 	ldw	r2,0(r5)
 1009f90:	18bfed1e 	bne	r3,r2,1009f48 <memcmp+0x14>
 1009f94:	31bfff04 	addi	r6,r6,-4
 1009f98:	21000104 	addi	r4,r4,4
 1009f9c:	29400104 	addi	r5,r5,4
 1009fa0:	39bff936 	bltu	r7,r6,1009f88 <memcmp+0x54>
 1009fa4:	003fe806 	br	1009f48 <memcmp+0x14>

01009fa8 <memcpy>:
 1009fa8:	01c003c4 	movi	r7,15
 1009fac:	2007883a 	mov	r3,r4
 1009fb0:	3980032e 	bgeu	r7,r6,1009fc0 <memcpy+0x18>
 1009fb4:	2904b03a 	or	r2,r5,r4
 1009fb8:	108000cc 	andi	r2,r2,3
 1009fbc:	10000926 	beq	r2,zero,1009fe4 <memcpy+0x3c>
 1009fc0:	30000626 	beq	r6,zero,1009fdc <memcpy+0x34>
 1009fc4:	30cd883a 	add	r6,r6,r3
 1009fc8:	28800003 	ldbu	r2,0(r5)
 1009fcc:	29400044 	addi	r5,r5,1
 1009fd0:	18800005 	stb	r2,0(r3)
 1009fd4:	18c00044 	addi	r3,r3,1
 1009fd8:	30fffb1e 	bne	r6,r3,1009fc8 <memcpy+0x20>
 1009fdc:	2005883a 	mov	r2,r4
 1009fe0:	f800283a 	ret
 1009fe4:	3811883a 	mov	r8,r7
 1009fe8:	200f883a 	mov	r7,r4
 1009fec:	28c00017 	ldw	r3,0(r5)
 1009ff0:	31bffc04 	addi	r6,r6,-16
 1009ff4:	38c00015 	stw	r3,0(r7)
 1009ff8:	28800117 	ldw	r2,4(r5)
 1009ffc:	38800115 	stw	r2,4(r7)
 100a000:	28c00217 	ldw	r3,8(r5)
 100a004:	38c00215 	stw	r3,8(r7)
 100a008:	28800317 	ldw	r2,12(r5)
 100a00c:	29400404 	addi	r5,r5,16
 100a010:	38800315 	stw	r2,12(r7)
 100a014:	39c00404 	addi	r7,r7,16
 100a018:	41bff436 	bltu	r8,r6,1009fec <memcpy+0x44>
 100a01c:	008000c4 	movi	r2,3
 100a020:	1180072e 	bgeu	r2,r6,100a040 <memcpy+0x98>
 100a024:	1007883a 	mov	r3,r2
 100a028:	28800017 	ldw	r2,0(r5)
 100a02c:	31bfff04 	addi	r6,r6,-4
 100a030:	29400104 	addi	r5,r5,4
 100a034:	38800015 	stw	r2,0(r7)
 100a038:	39c00104 	addi	r7,r7,4
 100a03c:	19bffa36 	bltu	r3,r6,100a028 <memcpy+0x80>
 100a040:	3807883a 	mov	r3,r7
 100a044:	003fde06 	br	1009fc0 <memcpy+0x18>

0100a048 <memmove>:
 100a048:	2807883a 	mov	r3,r5
 100a04c:	2011883a 	mov	r8,r4
 100a050:	29000c2e 	bgeu	r5,r4,100a084 <memmove+0x3c>
 100a054:	298f883a 	add	r7,r5,r6
 100a058:	21c00a2e 	bgeu	r4,r7,100a084 <memmove+0x3c>
 100a05c:	30000726 	beq	r6,zero,100a07c <memmove+0x34>
 100a060:	2187883a 	add	r3,r4,r6
 100a064:	198dc83a 	sub	r6,r3,r6
 100a068:	39ffffc4 	addi	r7,r7,-1
 100a06c:	38800003 	ldbu	r2,0(r7)
 100a070:	18ffffc4 	addi	r3,r3,-1
 100a074:	18800005 	stb	r2,0(r3)
 100a078:	19bffb1e 	bne	r3,r6,100a068 <memmove+0x20>
 100a07c:	2005883a 	mov	r2,r4
 100a080:	f800283a 	ret
 100a084:	01c003c4 	movi	r7,15
 100a088:	39800a36 	bltu	r7,r6,100a0b4 <memmove+0x6c>
 100a08c:	303ffb26 	beq	r6,zero,100a07c <memmove+0x34>
 100a090:	400f883a 	mov	r7,r8
 100a094:	320d883a 	add	r6,r6,r8
 100a098:	28800003 	ldbu	r2,0(r5)
 100a09c:	29400044 	addi	r5,r5,1
 100a0a0:	38800005 	stb	r2,0(r7)
 100a0a4:	39c00044 	addi	r7,r7,1
 100a0a8:	39bffb1e 	bne	r7,r6,100a098 <memmove+0x50>
 100a0ac:	2005883a 	mov	r2,r4
 100a0b0:	f800283a 	ret
 100a0b4:	1904b03a 	or	r2,r3,r4
 100a0b8:	108000cc 	andi	r2,r2,3
 100a0bc:	103ff31e 	bne	r2,zero,100a08c <memmove+0x44>
 100a0c0:	3811883a 	mov	r8,r7
 100a0c4:	180b883a 	mov	r5,r3
 100a0c8:	200f883a 	mov	r7,r4
 100a0cc:	28c00017 	ldw	r3,0(r5)
 100a0d0:	31bffc04 	addi	r6,r6,-16
 100a0d4:	38c00015 	stw	r3,0(r7)
 100a0d8:	28800117 	ldw	r2,4(r5)
 100a0dc:	38800115 	stw	r2,4(r7)
 100a0e0:	28c00217 	ldw	r3,8(r5)
 100a0e4:	38c00215 	stw	r3,8(r7)
 100a0e8:	28800317 	ldw	r2,12(r5)
 100a0ec:	29400404 	addi	r5,r5,16
 100a0f0:	38800315 	stw	r2,12(r7)
 100a0f4:	39c00404 	addi	r7,r7,16
 100a0f8:	41bff436 	bltu	r8,r6,100a0cc <memmove+0x84>
 100a0fc:	008000c4 	movi	r2,3
 100a100:	1180072e 	bgeu	r2,r6,100a120 <memmove+0xd8>
 100a104:	1007883a 	mov	r3,r2
 100a108:	28800017 	ldw	r2,0(r5)
 100a10c:	31bfff04 	addi	r6,r6,-4
 100a110:	29400104 	addi	r5,r5,4
 100a114:	38800015 	stw	r2,0(r7)
 100a118:	39c00104 	addi	r7,r7,4
 100a11c:	19bffa36 	bltu	r3,r6,100a108 <memmove+0xc0>
 100a120:	3811883a 	mov	r8,r7
 100a124:	003fd906 	br	100a08c <memmove+0x44>

0100a128 <memset>:
 100a128:	008000c4 	movi	r2,3
 100a12c:	29403fcc 	andi	r5,r5,255
 100a130:	2007883a 	mov	r3,r4
 100a134:	1180022e 	bgeu	r2,r6,100a140 <memset+0x18>
 100a138:	2084703a 	and	r2,r4,r2
 100a13c:	10000826 	beq	r2,zero,100a160 <memset+0x38>
 100a140:	30000526 	beq	r6,zero,100a158 <memset+0x30>
 100a144:	2805883a 	mov	r2,r5
 100a148:	30cd883a 	add	r6,r6,r3
 100a14c:	18800005 	stb	r2,0(r3)
 100a150:	18c00044 	addi	r3,r3,1
 100a154:	19bffd1e 	bne	r3,r6,100a14c <memset+0x24>
 100a158:	2005883a 	mov	r2,r4
 100a15c:	f800283a 	ret
 100a160:	2804923a 	slli	r2,r5,8
 100a164:	020003c4 	movi	r8,15
 100a168:	200f883a 	mov	r7,r4
 100a16c:	2884b03a 	or	r2,r5,r2
 100a170:	1006943a 	slli	r3,r2,16
 100a174:	10c6b03a 	or	r3,r2,r3
 100a178:	41800a2e 	bgeu	r8,r6,100a1a4 <memset+0x7c>
 100a17c:	4005883a 	mov	r2,r8
 100a180:	31bffc04 	addi	r6,r6,-16
 100a184:	38c00015 	stw	r3,0(r7)
 100a188:	38c00115 	stw	r3,4(r7)
 100a18c:	38c00215 	stw	r3,8(r7)
 100a190:	38c00315 	stw	r3,12(r7)
 100a194:	39c00404 	addi	r7,r7,16
 100a198:	11bff936 	bltu	r2,r6,100a180 <memset+0x58>
 100a19c:	008000c4 	movi	r2,3
 100a1a0:	1180052e 	bgeu	r2,r6,100a1b8 <memset+0x90>
 100a1a4:	31bfff04 	addi	r6,r6,-4
 100a1a8:	008000c4 	movi	r2,3
 100a1ac:	38c00015 	stw	r3,0(r7)
 100a1b0:	39c00104 	addi	r7,r7,4
 100a1b4:	11bffb36 	bltu	r2,r6,100a1a4 <memset+0x7c>
 100a1b8:	3807883a 	mov	r3,r7
 100a1bc:	003fe006 	br	100a140 <memset+0x18>

0100a1c0 <printf>:
 100a1c0:	defffb04 	addi	sp,sp,-20
 100a1c4:	dfc00115 	stw	ra,4(sp)
 100a1c8:	d9400215 	stw	r5,8(sp)
 100a1cc:	d9800315 	stw	r6,12(sp)
 100a1d0:	d9c00415 	stw	r7,16(sp)
 100a1d4:	008040b4 	movhi	r2,258
 100a1d8:	1084a904 	addi	r2,r2,4772
 100a1dc:	10c00017 	ldw	r3,0(r2)
 100a1e0:	200b883a 	mov	r5,r4
 100a1e4:	d8800204 	addi	r2,sp,8
 100a1e8:	19000217 	ldw	r4,8(r3)
 100a1ec:	100d883a 	mov	r6,r2
 100a1f0:	d8800015 	stw	r2,0(sp)
 100a1f4:	100c5700 	call	100c570 <__vfprintf_internal>
 100a1f8:	dfc00117 	ldw	ra,4(sp)
 100a1fc:	dec00504 	addi	sp,sp,20
 100a200:	f800283a 	ret

0100a204 <_printf_r>:
 100a204:	defffc04 	addi	sp,sp,-16
 100a208:	dfc00115 	stw	ra,4(sp)
 100a20c:	d9800215 	stw	r6,8(sp)
 100a210:	d9c00315 	stw	r7,12(sp)
 100a214:	280d883a 	mov	r6,r5
 100a218:	21400217 	ldw	r5,8(r4)
 100a21c:	d8c00204 	addi	r3,sp,8
 100a220:	180f883a 	mov	r7,r3
 100a224:	d8c00015 	stw	r3,0(sp)
 100a228:	100a6c40 	call	100a6c4 <___vfprintf_internal_r>
 100a22c:	dfc00117 	ldw	ra,4(sp)
 100a230:	dec00404 	addi	sp,sp,16
 100a234:	f800283a 	ret

0100a238 <_sbrk_r>:
 100a238:	defffd04 	addi	sp,sp,-12
 100a23c:	dc000015 	stw	r16,0(sp)
 100a240:	040040b4 	movhi	r16,258
 100a244:	840bb304 	addi	r16,r16,11980
 100a248:	dc400115 	stw	r17,4(sp)
 100a24c:	80000015 	stw	zero,0(r16)
 100a250:	2023883a 	mov	r17,r4
 100a254:	2809883a 	mov	r4,r5
 100a258:	dfc00215 	stw	ra,8(sp)
 100a25c:	1013c500 	call	1013c50 <sbrk>
 100a260:	1007883a 	mov	r3,r2
 100a264:	00bfffc4 	movi	r2,-1
 100a268:	18800626 	beq	r3,r2,100a284 <_sbrk_r+0x4c>
 100a26c:	1805883a 	mov	r2,r3
 100a270:	dfc00217 	ldw	ra,8(sp)
 100a274:	dc400117 	ldw	r17,4(sp)
 100a278:	dc000017 	ldw	r16,0(sp)
 100a27c:	dec00304 	addi	sp,sp,12
 100a280:	f800283a 	ret
 100a284:	80800017 	ldw	r2,0(r16)
 100a288:	103ff826 	beq	r2,zero,100a26c <_sbrk_r+0x34>
 100a28c:	88800015 	stw	r2,0(r17)
 100a290:	1805883a 	mov	r2,r3
 100a294:	dfc00217 	ldw	ra,8(sp)
 100a298:	dc400117 	ldw	r17,4(sp)
 100a29c:	dc000017 	ldw	r16,0(sp)
 100a2a0:	dec00304 	addi	sp,sp,12
 100a2a4:	f800283a 	ret

0100a2a8 <_raise_r>:
 100a2a8:	defffd04 	addi	sp,sp,-12
 100a2ac:	008007c4 	movi	r2,31
 100a2b0:	dc400115 	stw	r17,4(sp)
 100a2b4:	dc000015 	stw	r16,0(sp)
 100a2b8:	dfc00215 	stw	ra,8(sp)
 100a2bc:	2821883a 	mov	r16,r5
 100a2c0:	2023883a 	mov	r17,r4
 100a2c4:	11402736 	bltu	r2,r5,100a364 <_raise_r+0xbc>
 100a2c8:	20c0b717 	ldw	r3,732(r4)
 100a2cc:	18001326 	beq	r3,zero,100a31c <_raise_r+0x74>
 100a2d0:	2945883a 	add	r2,r5,r5
 100a2d4:	1085883a 	add	r2,r2,r2
 100a2d8:	188b883a 	add	r5,r3,r2
 100a2dc:	28c00017 	ldw	r3,0(r5)
 100a2e0:	18000e26 	beq	r3,zero,100a31c <_raise_r+0x74>
 100a2e4:	01000044 	movi	r4,1
 100a2e8:	19000526 	beq	r3,r4,100a300 <_raise_r+0x58>
 100a2ec:	00bfffc4 	movi	r2,-1
 100a2f0:	18801326 	beq	r3,r2,100a340 <_raise_r+0x98>
 100a2f4:	28000015 	stw	zero,0(r5)
 100a2f8:	8009883a 	mov	r4,r16
 100a2fc:	183ee83a 	callr	r3
 100a300:	0007883a 	mov	r3,zero
 100a304:	1805883a 	mov	r2,r3
 100a308:	dfc00217 	ldw	ra,8(sp)
 100a30c:	dc400117 	ldw	r17,4(sp)
 100a310:	dc000017 	ldw	r16,0(sp)
 100a314:	dec00304 	addi	sp,sp,12
 100a318:	f800283a 	ret
 100a31c:	100a5800 	call	100a580 <_getpid_r>
 100a320:	100b883a 	mov	r5,r2
 100a324:	8809883a 	mov	r4,r17
 100a328:	800d883a 	mov	r6,r16
 100a32c:	dfc00217 	ldw	ra,8(sp)
 100a330:	dc400117 	ldw	r17,4(sp)
 100a334:	dc000017 	ldw	r16,0(sp)
 100a338:	dec00304 	addi	sp,sp,12
 100a33c:	100a5841 	jmpi	100a584 <_kill_r>
 100a340:	2007883a 	mov	r3,r4
 100a344:	00800584 	movi	r2,22
 100a348:	88800015 	stw	r2,0(r17)
 100a34c:	1805883a 	mov	r2,r3
 100a350:	dfc00217 	ldw	ra,8(sp)
 100a354:	dc400117 	ldw	r17,4(sp)
 100a358:	dc000017 	ldw	r16,0(sp)
 100a35c:	dec00304 	addi	sp,sp,12
 100a360:	f800283a 	ret
 100a364:	00800584 	movi	r2,22
 100a368:	00ffffc4 	movi	r3,-1
 100a36c:	20800015 	stw	r2,0(r4)
 100a370:	003fe406 	br	100a304 <_raise_r+0x5c>

0100a374 <raise>:
 100a374:	008040b4 	movhi	r2,258
 100a378:	1084a904 	addi	r2,r2,4772
 100a37c:	200b883a 	mov	r5,r4
 100a380:	11000017 	ldw	r4,0(r2)
 100a384:	100a2a81 	jmpi	100a2a8 <_raise_r>

0100a388 <_init_signal_r>:
 100a388:	2080b717 	ldw	r2,732(r4)
 100a38c:	defffe04 	addi	sp,sp,-8
 100a390:	dc000015 	stw	r16,0(sp)
 100a394:	dfc00115 	stw	ra,4(sp)
 100a398:	2021883a 	mov	r16,r4
 100a39c:	10000526 	beq	r2,zero,100a3b4 <_init_signal_r+0x2c>
 100a3a0:	0005883a 	mov	r2,zero
 100a3a4:	dfc00117 	ldw	ra,4(sp)
 100a3a8:	dc000017 	ldw	r16,0(sp)
 100a3ac:	dec00204 	addi	sp,sp,8
 100a3b0:	f800283a 	ret
 100a3b4:	01402004 	movi	r5,128
 100a3b8:	10097100 	call	1009710 <_malloc_r>
 100a3bc:	1009883a 	mov	r4,r2
 100a3c0:	8080b715 	stw	r2,732(r16)
 100a3c4:	10000726 	beq	r2,zero,100a3e4 <_init_signal_r+0x5c>
 100a3c8:	0007883a 	mov	r3,zero
 100a3cc:	01402004 	movi	r5,128
 100a3d0:	20c5883a 	add	r2,r4,r3
 100a3d4:	18c00104 	addi	r3,r3,4
 100a3d8:	10000015 	stw	zero,0(r2)
 100a3dc:	197ffc1e 	bne	r3,r5,100a3d0 <_init_signal_r+0x48>
 100a3e0:	003fef06 	br	100a3a0 <_init_signal_r+0x18>
 100a3e4:	00bfffc4 	movi	r2,-1
 100a3e8:	003fee06 	br	100a3a4 <_init_signal_r+0x1c>

0100a3ec <_init_signal>:
 100a3ec:	008040b4 	movhi	r2,258
 100a3f0:	1084a904 	addi	r2,r2,4772
 100a3f4:	11000017 	ldw	r4,0(r2)
 100a3f8:	100a3881 	jmpi	100a388 <_init_signal_r>

0100a3fc <__sigtramp_r>:
 100a3fc:	defffd04 	addi	sp,sp,-12
 100a400:	008007c4 	movi	r2,31
 100a404:	dc000115 	stw	r16,4(sp)
 100a408:	dfc00215 	stw	ra,8(sp)
 100a40c:	2021883a 	mov	r16,r4
 100a410:	11401336 	bltu	r2,r5,100a460 <__sigtramp_r+0x64>
 100a414:	20c0b717 	ldw	r3,732(r4)
 100a418:	18001f26 	beq	r3,zero,100a498 <__sigtramp_r+0x9c>
 100a41c:	2945883a 	add	r2,r5,r5
 100a420:	1085883a 	add	r2,r2,r2
 100a424:	10c9883a 	add	r4,r2,r3
 100a428:	20c00017 	ldw	r3,0(r4)
 100a42c:	18001626 	beq	r3,zero,100a488 <__sigtramp_r+0x8c>
 100a430:	00bfffc4 	movi	r2,-1
 100a434:	18801626 	beq	r3,r2,100a490 <__sigtramp_r+0x94>
 100a438:	00800044 	movi	r2,1
 100a43c:	18800d26 	beq	r3,r2,100a474 <__sigtramp_r+0x78>
 100a440:	20000015 	stw	zero,0(r4)
 100a444:	2809883a 	mov	r4,r5
 100a448:	183ee83a 	callr	r3
 100a44c:	0005883a 	mov	r2,zero
 100a450:	dfc00217 	ldw	ra,8(sp)
 100a454:	dc000117 	ldw	r16,4(sp)
 100a458:	dec00304 	addi	sp,sp,12
 100a45c:	f800283a 	ret
 100a460:	00bfffc4 	movi	r2,-1
 100a464:	dfc00217 	ldw	ra,8(sp)
 100a468:	dc000117 	ldw	r16,4(sp)
 100a46c:	dec00304 	addi	sp,sp,12
 100a470:	f800283a 	ret
 100a474:	008000c4 	movi	r2,3
 100a478:	dfc00217 	ldw	ra,8(sp)
 100a47c:	dc000117 	ldw	r16,4(sp)
 100a480:	dec00304 	addi	sp,sp,12
 100a484:	f800283a 	ret
 100a488:	00800044 	movi	r2,1
 100a48c:	003ff006 	br	100a450 <__sigtramp_r+0x54>
 100a490:	00800084 	movi	r2,2
 100a494:	003fee06 	br	100a450 <__sigtramp_r+0x54>
 100a498:	d9400015 	stw	r5,0(sp)
 100a49c:	100a3880 	call	100a388 <_init_signal_r>
 100a4a0:	d9400017 	ldw	r5,0(sp)
 100a4a4:	103fee1e 	bne	r2,zero,100a460 <__sigtramp_r+0x64>
 100a4a8:	80c0b717 	ldw	r3,732(r16)
 100a4ac:	003fdb06 	br	100a41c <__sigtramp_r+0x20>

0100a4b0 <__sigtramp>:
 100a4b0:	008040b4 	movhi	r2,258
 100a4b4:	1084a904 	addi	r2,r2,4772
 100a4b8:	200b883a 	mov	r5,r4
 100a4bc:	11000017 	ldw	r4,0(r2)
 100a4c0:	100a3fc1 	jmpi	100a3fc <__sigtramp_r>

0100a4c4 <_signal_r>:
 100a4c4:	defffc04 	addi	sp,sp,-16
 100a4c8:	008007c4 	movi	r2,31
 100a4cc:	dc800215 	stw	r18,8(sp)
 100a4d0:	dc400115 	stw	r17,4(sp)
 100a4d4:	dc000015 	stw	r16,0(sp)
 100a4d8:	dfc00315 	stw	ra,12(sp)
 100a4dc:	2823883a 	mov	r17,r5
 100a4e0:	00ffffc4 	movi	r3,-1
 100a4e4:	3025883a 	mov	r18,r6
 100a4e8:	2021883a 	mov	r16,r4
 100a4ec:	1140092e 	bgeu	r2,r5,100a514 <_signal_r+0x50>
 100a4f0:	00800584 	movi	r2,22
 100a4f4:	20800015 	stw	r2,0(r4)
 100a4f8:	1805883a 	mov	r2,r3
 100a4fc:	dfc00317 	ldw	ra,12(sp)
 100a500:	dc800217 	ldw	r18,8(sp)
 100a504:	dc400117 	ldw	r17,4(sp)
 100a508:	dc000017 	ldw	r16,0(sp)
 100a50c:	dec00404 	addi	sp,sp,16
 100a510:	f800283a 	ret
 100a514:	2140b717 	ldw	r5,732(r4)
 100a518:	28000c26 	beq	r5,zero,100a54c <_signal_r+0x88>
 100a51c:	8c45883a 	add	r2,r17,r17
 100a520:	1085883a 	add	r2,r2,r2
 100a524:	1145883a 	add	r2,r2,r5
 100a528:	10c00017 	ldw	r3,0(r2)
 100a52c:	14800015 	stw	r18,0(r2)
 100a530:	1805883a 	mov	r2,r3
 100a534:	dfc00317 	ldw	ra,12(sp)
 100a538:	dc800217 	ldw	r18,8(sp)
 100a53c:	dc400117 	ldw	r17,4(sp)
 100a540:	dc000017 	ldw	r16,0(sp)
 100a544:	dec00404 	addi	sp,sp,16
 100a548:	f800283a 	ret
 100a54c:	100a3880 	call	100a388 <_init_signal_r>
 100a550:	1000021e 	bne	r2,zero,100a55c <_signal_r+0x98>
 100a554:	8140b717 	ldw	r5,732(r16)
 100a558:	003ff006 	br	100a51c <_signal_r+0x58>
 100a55c:	00ffffc4 	movi	r3,-1
 100a560:	003fe506 	br	100a4f8 <_signal_r+0x34>

0100a564 <signal>:
 100a564:	018040b4 	movhi	r6,258
 100a568:	3184a904 	addi	r6,r6,4772
 100a56c:	2007883a 	mov	r3,r4
 100a570:	31000017 	ldw	r4,0(r6)
 100a574:	280d883a 	mov	r6,r5
 100a578:	180b883a 	mov	r5,r3
 100a57c:	100a4c41 	jmpi	100a4c4 <_signal_r>

0100a580 <_getpid_r>:
 100a580:	101348c1 	jmpi	101348c <getpid>

0100a584 <_kill_r>:
 100a584:	defffd04 	addi	sp,sp,-12
 100a588:	dc000015 	stw	r16,0(sp)
 100a58c:	040040b4 	movhi	r16,258
 100a590:	840bb304 	addi	r16,r16,11980
 100a594:	dc400115 	stw	r17,4(sp)
 100a598:	80000015 	stw	zero,0(r16)
 100a59c:	2023883a 	mov	r17,r4
 100a5a0:	2809883a 	mov	r4,r5
 100a5a4:	300b883a 	mov	r5,r6
 100a5a8:	dfc00215 	stw	ra,8(sp)
 100a5ac:	10135cc0 	call	10135cc <kill>
 100a5b0:	1007883a 	mov	r3,r2
 100a5b4:	00bfffc4 	movi	r2,-1
 100a5b8:	18800626 	beq	r3,r2,100a5d4 <_kill_r+0x50>
 100a5bc:	1805883a 	mov	r2,r3
 100a5c0:	dfc00217 	ldw	ra,8(sp)
 100a5c4:	dc400117 	ldw	r17,4(sp)
 100a5c8:	dc000017 	ldw	r16,0(sp)
 100a5cc:	dec00304 	addi	sp,sp,12
 100a5d0:	f800283a 	ret
 100a5d4:	80800017 	ldw	r2,0(r16)
 100a5d8:	103ff826 	beq	r2,zero,100a5bc <_kill_r+0x38>
 100a5dc:	88800015 	stw	r2,0(r17)
 100a5e0:	1805883a 	mov	r2,r3
 100a5e4:	dfc00217 	ldw	ra,8(sp)
 100a5e8:	dc400117 	ldw	r17,4(sp)
 100a5ec:	dc000017 	ldw	r16,0(sp)
 100a5f0:	dec00304 	addi	sp,sp,12
 100a5f4:	f800283a 	ret

0100a5f8 <strlen>:
 100a5f8:	208000cc 	andi	r2,r4,3
 100a5fc:	2011883a 	mov	r8,r4
 100a600:	1000161e 	bne	r2,zero,100a65c <strlen+0x64>
 100a604:	20c00017 	ldw	r3,0(r4)
 100a608:	017fbff4 	movhi	r5,65279
 100a60c:	297fbfc4 	addi	r5,r5,-257
 100a610:	01e02074 	movhi	r7,32897
 100a614:	39e02004 	addi	r7,r7,-32640
 100a618:	1945883a 	add	r2,r3,r5
 100a61c:	11c4703a 	and	r2,r2,r7
 100a620:	00c6303a 	nor	r3,zero,r3
 100a624:	1886703a 	and	r3,r3,r2
 100a628:	18000c1e 	bne	r3,zero,100a65c <strlen+0x64>
 100a62c:	280d883a 	mov	r6,r5
 100a630:	380b883a 	mov	r5,r7
 100a634:	21000104 	addi	r4,r4,4
 100a638:	20800017 	ldw	r2,0(r4)
 100a63c:	1187883a 	add	r3,r2,r6
 100a640:	1946703a 	and	r3,r3,r5
 100a644:	0084303a 	nor	r2,zero,r2
 100a648:	10c4703a 	and	r2,r2,r3
 100a64c:	103ff926 	beq	r2,zero,100a634 <strlen+0x3c>
 100a650:	20800007 	ldb	r2,0(r4)
 100a654:	10000326 	beq	r2,zero,100a664 <strlen+0x6c>
 100a658:	21000044 	addi	r4,r4,1
 100a65c:	20800007 	ldb	r2,0(r4)
 100a660:	103ffd1e 	bne	r2,zero,100a658 <strlen+0x60>
 100a664:	2205c83a 	sub	r2,r4,r8
 100a668:	f800283a 	ret

0100a66c <__sprint_r>:
 100a66c:	30800217 	ldw	r2,8(r6)
 100a670:	defffe04 	addi	sp,sp,-8
 100a674:	dc000015 	stw	r16,0(sp)
 100a678:	dfc00115 	stw	ra,4(sp)
 100a67c:	3021883a 	mov	r16,r6
 100a680:	0007883a 	mov	r3,zero
 100a684:	1000061e 	bne	r2,zero,100a6a0 <__sprint_r+0x34>
 100a688:	1805883a 	mov	r2,r3
 100a68c:	30000115 	stw	zero,4(r6)
 100a690:	dfc00117 	ldw	ra,4(sp)
 100a694:	dc000017 	ldw	r16,0(sp)
 100a698:	dec00204 	addi	sp,sp,8
 100a69c:	f800283a 	ret
 100a6a0:	100e7cc0 	call	100e7cc <__sfvwrite_r>
 100a6a4:	1007883a 	mov	r3,r2
 100a6a8:	1805883a 	mov	r2,r3
 100a6ac:	80000115 	stw	zero,4(r16)
 100a6b0:	80000215 	stw	zero,8(r16)
 100a6b4:	dfc00117 	ldw	ra,4(sp)
 100a6b8:	dc000017 	ldw	r16,0(sp)
 100a6bc:	dec00204 	addi	sp,sp,8
 100a6c0:	f800283a 	ret

0100a6c4 <___vfprintf_internal_r>:
 100a6c4:	defea404 	addi	sp,sp,-1392
 100a6c8:	dd815815 	stw	r22,1376(sp)
 100a6cc:	dc015215 	stw	r16,1352(sp)
 100a6d0:	d9c15115 	stw	r7,1348(sp)
 100a6d4:	dfc15b15 	stw	ra,1388(sp)
 100a6d8:	df015a15 	stw	fp,1384(sp)
 100a6dc:	ddc15915 	stw	r23,1380(sp)
 100a6e0:	dd415715 	stw	r21,1372(sp)
 100a6e4:	dd015615 	stw	r20,1368(sp)
 100a6e8:	dcc15515 	stw	r19,1364(sp)
 100a6ec:	dc815415 	stw	r18,1360(sp)
 100a6f0:	dc415315 	stw	r17,1356(sp)
 100a6f4:	282d883a 	mov	r22,r5
 100a6f8:	3021883a 	mov	r16,r6
 100a6fc:	d9014f15 	stw	r4,1340(sp)
 100a700:	100edf00 	call	100edf0 <_localeconv_r>
 100a704:	10800017 	ldw	r2,0(r2)
 100a708:	d9c15117 	ldw	r7,1348(sp)
 100a70c:	d8814915 	stw	r2,1316(sp)
 100a710:	d8814f17 	ldw	r2,1340(sp)
 100a714:	10000226 	beq	r2,zero,100a720 <___vfprintf_internal_r+0x5c>
 100a718:	10800e17 	ldw	r2,56(r2)
 100a71c:	10020d26 	beq	r2,zero,100af54 <___vfprintf_internal_r+0x890>
 100a720:	b080030b 	ldhu	r2,12(r22)
 100a724:	1080020c 	andi	r2,r2,8
 100a728:	10020e26 	beq	r2,zero,100af64 <___vfprintf_internal_r+0x8a0>
 100a72c:	b0800417 	ldw	r2,16(r22)
 100a730:	10020c26 	beq	r2,zero,100af64 <___vfprintf_internal_r+0x8a0>
 100a734:	b200030b 	ldhu	r8,12(r22)
 100a738:	00800284 	movi	r2,10
 100a73c:	40c0068c 	andi	r3,r8,26
 100a740:	18802f1e 	bne	r3,r2,100a800 <___vfprintf_internal_r+0x13c>
 100a744:	b080038f 	ldh	r2,14(r22)
 100a748:	10002d16 	blt	r2,zero,100a800 <___vfprintf_internal_r+0x13c>
 100a74c:	b240038b 	ldhu	r9,14(r22)
 100a750:	b2800717 	ldw	r10,28(r22)
 100a754:	b2c00917 	ldw	r11,36(r22)
 100a758:	d9014f17 	ldw	r4,1340(sp)
 100a75c:	dc402904 	addi	r17,sp,164
 100a760:	d8804004 	addi	r2,sp,256
 100a764:	00c10004 	movi	r3,1024
 100a768:	423fff4c 	andi	r8,r8,65533
 100a76c:	800d883a 	mov	r6,r16
 100a770:	880b883a 	mov	r5,r17
 100a774:	da002c0d 	sth	r8,176(sp)
 100a778:	da402c8d 	sth	r9,178(sp)
 100a77c:	da803015 	stw	r10,192(sp)
 100a780:	dac03215 	stw	r11,200(sp)
 100a784:	d8802d15 	stw	r2,180(sp)
 100a788:	d8c02e15 	stw	r3,184(sp)
 100a78c:	d8802915 	stw	r2,164(sp)
 100a790:	d8c02b15 	stw	r3,172(sp)
 100a794:	d8002f15 	stw	zero,188(sp)
 100a798:	100a6c40 	call	100a6c4 <___vfprintf_internal_r>
 100a79c:	d8814b15 	stw	r2,1324(sp)
 100a7a0:	10000416 	blt	r2,zero,100a7b4 <___vfprintf_internal_r+0xf0>
 100a7a4:	d9014f17 	ldw	r4,1340(sp)
 100a7a8:	880b883a 	mov	r5,r17
 100a7ac:	100de9c0 	call	100de9c <_fflush_r>
 100a7b0:	1002321e 	bne	r2,zero,100b07c <___vfprintf_internal_r+0x9b8>
 100a7b4:	d8802c0b 	ldhu	r2,176(sp)
 100a7b8:	1080100c 	andi	r2,r2,64
 100a7bc:	10000326 	beq	r2,zero,100a7cc <___vfprintf_internal_r+0x108>
 100a7c0:	b080030b 	ldhu	r2,12(r22)
 100a7c4:	10801014 	ori	r2,r2,64
 100a7c8:	b080030d 	sth	r2,12(r22)
 100a7cc:	d8814b17 	ldw	r2,1324(sp)
 100a7d0:	dfc15b17 	ldw	ra,1388(sp)
 100a7d4:	df015a17 	ldw	fp,1384(sp)
 100a7d8:	ddc15917 	ldw	r23,1380(sp)
 100a7dc:	dd815817 	ldw	r22,1376(sp)
 100a7e0:	dd415717 	ldw	r21,1372(sp)
 100a7e4:	dd015617 	ldw	r20,1368(sp)
 100a7e8:	dcc15517 	ldw	r19,1364(sp)
 100a7ec:	dc815417 	ldw	r18,1360(sp)
 100a7f0:	dc415317 	ldw	r17,1356(sp)
 100a7f4:	dc015217 	ldw	r16,1352(sp)
 100a7f8:	dec15c04 	addi	sp,sp,1392
 100a7fc:	f800283a 	ret
 100a800:	0005883a 	mov	r2,zero
 100a804:	0007883a 	mov	r3,zero
 100a808:	dd401904 	addi	r21,sp,100
 100a80c:	d8814215 	stw	r2,1288(sp)
 100a810:	802f883a 	mov	r23,r16
 100a814:	d8c14315 	stw	r3,1292(sp)
 100a818:	d8014b15 	stw	zero,1324(sp)
 100a81c:	d8014815 	stw	zero,1312(sp)
 100a820:	d8014415 	stw	zero,1296(sp)
 100a824:	d8014715 	stw	zero,1308(sp)
 100a828:	dd400c15 	stw	r21,48(sp)
 100a82c:	d8000e15 	stw	zero,56(sp)
 100a830:	d8000d15 	stw	zero,52(sp)
 100a834:	b8800007 	ldb	r2,0(r23)
 100a838:	10001926 	beq	r2,zero,100a8a0 <___vfprintf_internal_r+0x1dc>
 100a83c:	00c00944 	movi	r3,37
 100a840:	10c01726 	beq	r2,r3,100a8a0 <___vfprintf_internal_r+0x1dc>
 100a844:	b821883a 	mov	r16,r23
 100a848:	00000106 	br	100a850 <___vfprintf_internal_r+0x18c>
 100a84c:	10c00326 	beq	r2,r3,100a85c <___vfprintf_internal_r+0x198>
 100a850:	84000044 	addi	r16,r16,1
 100a854:	80800007 	ldb	r2,0(r16)
 100a858:	103ffc1e 	bne	r2,zero,100a84c <___vfprintf_internal_r+0x188>
 100a85c:	85e7c83a 	sub	r19,r16,r23
 100a860:	98000e26 	beq	r19,zero,100a89c <___vfprintf_internal_r+0x1d8>
 100a864:	dc800e17 	ldw	r18,56(sp)
 100a868:	dc400d17 	ldw	r17,52(sp)
 100a86c:	008001c4 	movi	r2,7
 100a870:	94e5883a 	add	r18,r18,r19
 100a874:	8c400044 	addi	r17,r17,1
 100a878:	adc00015 	stw	r23,0(r21)
 100a87c:	dc800e15 	stw	r18,56(sp)
 100a880:	acc00115 	stw	r19,4(r21)
 100a884:	dc400d15 	stw	r17,52(sp)
 100a888:	14428b16 	blt	r2,r17,100b2b8 <___vfprintf_internal_r+0xbf4>
 100a88c:	ad400204 	addi	r21,r21,8
 100a890:	d9014b17 	ldw	r4,1324(sp)
 100a894:	24c9883a 	add	r4,r4,r19
 100a898:	d9014b15 	stw	r4,1324(sp)
 100a89c:	802f883a 	mov	r23,r16
 100a8a0:	b8800007 	ldb	r2,0(r23)
 100a8a4:	10013c26 	beq	r2,zero,100ad98 <___vfprintf_internal_r+0x6d4>
 100a8a8:	bdc00044 	addi	r23,r23,1
 100a8ac:	d8000405 	stb	zero,16(sp)
 100a8b0:	b8c00007 	ldb	r3,0(r23)
 100a8b4:	04ffffc4 	movi	r19,-1
 100a8b8:	d8014c15 	stw	zero,1328(sp)
 100a8bc:	d8014a15 	stw	zero,1320(sp)
 100a8c0:	d8c14d15 	stw	r3,1332(sp)
 100a8c4:	bdc00044 	addi	r23,r23,1
 100a8c8:	d9414d17 	ldw	r5,1332(sp)
 100a8cc:	00801604 	movi	r2,88
 100a8d0:	28fff804 	addi	r3,r5,-32
 100a8d4:	10c06036 	bltu	r2,r3,100aa58 <___vfprintf_internal_r+0x394>
 100a8d8:	18c5883a 	add	r2,r3,r3
 100a8dc:	1085883a 	add	r2,r2,r2
 100a8e0:	00c04074 	movhi	r3,257
 100a8e4:	18ea3d04 	addi	r3,r3,-22284
 100a8e8:	10c5883a 	add	r2,r2,r3
 100a8ec:	11000017 	ldw	r4,0(r2)
 100a8f0:	2000683a 	jmp	r4
 100a8f4:	0100b868 	cmpgeui	r4,zero,737
 100a8f8:	0100aa58 	cmpnei	r4,zero,681
 100a8fc:	0100aa58 	cmpnei	r4,zero,681
 100a900:	0100b854 	movui	r4,737
 100a904:	0100aa58 	cmpnei	r4,zero,681
 100a908:	0100aa58 	cmpnei	r4,zero,681
 100a90c:	0100aa58 	cmpnei	r4,zero,681
 100a910:	0100aa58 	cmpnei	r4,zero,681
 100a914:	0100aa58 	cmpnei	r4,zero,681
 100a918:	0100aa58 	cmpnei	r4,zero,681
 100a91c:	0100b634 	movhi	r4,728
 100a920:	0100b844 	movi	r4,737
 100a924:	0100aa58 	cmpnei	r4,zero,681
 100a928:	0100b64c 	andi	r4,zero,729
 100a92c:	0100b8e0 	cmpeqi	r4,zero,739
 100a930:	0100aa58 	cmpnei	r4,zero,681
 100a934:	0100b8cc 	andi	r4,zero,739
 100a938:	0100b894 	movui	r4,738
 100a93c:	0100b894 	movui	r4,738
 100a940:	0100b894 	movui	r4,738
 100a944:	0100b894 	movui	r4,738
 100a948:	0100b894 	movui	r4,738
 100a94c:	0100b894 	movui	r4,738
 100a950:	0100b894 	movui	r4,738
 100a954:	0100b894 	movui	r4,738
 100a958:	0100b894 	movui	r4,738
 100a95c:	0100aa58 	cmpnei	r4,zero,681
 100a960:	0100aa58 	cmpnei	r4,zero,681
 100a964:	0100aa58 	cmpnei	r4,zero,681
 100a968:	0100aa58 	cmpnei	r4,zero,681
 100a96c:	0100aa58 	cmpnei	r4,zero,681
 100a970:	0100aa58 	cmpnei	r4,zero,681
 100a974:	0100aa58 	cmpnei	r4,zero,681
 100a978:	0100aa58 	cmpnei	r4,zero,681
 100a97c:	0100aa58 	cmpnei	r4,zero,681
 100a980:	0100aa58 	cmpnei	r4,zero,681
 100a984:	0100b0b0 	cmpltui	r4,zero,706
 100a988:	0100b71c 	xori	r4,zero,732
 100a98c:	0100aa58 	cmpnei	r4,zero,681
 100a990:	0100b71c 	xori	r4,zero,732
 100a994:	0100aa58 	cmpnei	r4,zero,681
 100a998:	0100aa58 	cmpnei	r4,zero,681
 100a99c:	0100aa58 	cmpnei	r4,zero,681
 100a9a0:	0100aa58 	cmpnei	r4,zero,681
 100a9a4:	0100b880 	call	100b88 <OSCtxSw_SWITCH_PC+0x100b48>
 100a9a8:	0100aa58 	cmpnei	r4,zero,681
 100a9ac:	0100aa58 	cmpnei	r4,zero,681
 100a9b0:	0100b164 	muli	r4,zero,709
 100a9b4:	0100aa58 	cmpnei	r4,zero,681
 100a9b8:	0100aa58 	cmpnei	r4,zero,681
 100a9bc:	0100aa58 	cmpnei	r4,zero,681
 100a9c0:	0100aa58 	cmpnei	r4,zero,681
 100a9c4:	0100aa58 	cmpnei	r4,zero,681
 100a9c8:	0100b1b0 	cmpltui	r4,zero,710
 100a9cc:	0100aa58 	cmpnei	r4,zero,681
 100a9d0:	0100aa58 	cmpnei	r4,zero,681
 100a9d4:	0100b7d0 	cmplti	r4,zero,735
 100a9d8:	0100aa58 	cmpnei	r4,zero,681
 100a9dc:	0100aa58 	cmpnei	r4,zero,681
 100a9e0:	0100aa58 	cmpnei	r4,zero,681
 100a9e4:	0100aa58 	cmpnei	r4,zero,681
 100a9e8:	0100aa58 	cmpnei	r4,zero,681
 100a9ec:	0100aa58 	cmpnei	r4,zero,681
 100a9f0:	0100aa58 	cmpnei	r4,zero,681
 100a9f4:	0100aa58 	cmpnei	r4,zero,681
 100a9f8:	0100aa58 	cmpnei	r4,zero,681
 100a9fc:	0100aa58 	cmpnei	r4,zero,681
 100aa00:	0100b7a4 	muli	r4,zero,734
 100aa04:	0100b0bc 	xorhi	r4,zero,706
 100aa08:	0100b71c 	xori	r4,zero,732
 100aa0c:	0100b71c 	xori	r4,zero,732
 100aa10:	0100b71c 	xori	r4,zero,732
 100aa14:	0100b708 	cmpgei	r4,zero,732
 100aa18:	0100b0bc 	xorhi	r4,zero,706
 100aa1c:	0100aa58 	cmpnei	r4,zero,681
 100aa20:	0100aa58 	cmpnei	r4,zero,681
 100aa24:	0100b690 	cmplti	r4,zero,730
 100aa28:	0100aa58 	cmpnei	r4,zero,681
 100aa2c:	0100b660 	cmpeqi	r4,zero,729
 100aa30:	0100b170 	cmpltui	r4,zero,709
 100aa34:	0100b6c0 	call	100b6c <OSCtxSw_SWITCH_PC+0x100b2c>
 100aa38:	0100b6ac 	andhi	r4,zero,730
 100aa3c:	0100aa58 	cmpnei	r4,zero,681
 100aa40:	0100b93c 	xorhi	r4,zero,740
 100aa44:	0100aa58 	cmpnei	r4,zero,681
 100aa48:	0100b1bc 	xorhi	r4,zero,710
 100aa4c:	0100aa58 	cmpnei	r4,zero,681
 100aa50:	0100aa58 	cmpnei	r4,zero,681
 100aa54:	0100b834 	movhi	r4,736
 100aa58:	d9014d17 	ldw	r4,1332(sp)
 100aa5c:	2000ce26 	beq	r4,zero,100ad98 <___vfprintf_internal_r+0x6d4>
 100aa60:	01400044 	movi	r5,1
 100aa64:	d9800f04 	addi	r6,sp,60
 100aa68:	d9c14015 	stw	r7,1280(sp)
 100aa6c:	d9414515 	stw	r5,1300(sp)
 100aa70:	d9814115 	stw	r6,1284(sp)
 100aa74:	280f883a 	mov	r7,r5
 100aa78:	d9000f05 	stb	r4,60(sp)
 100aa7c:	d8000405 	stb	zero,16(sp)
 100aa80:	d8014615 	stw	zero,1304(sp)
 100aa84:	d8c14c17 	ldw	r3,1328(sp)
 100aa88:	1880008c 	andi	r2,r3,2
 100aa8c:	1005003a 	cmpeq	r2,r2,zero
 100aa90:	d8815015 	stw	r2,1344(sp)
 100aa94:	1000031e 	bne	r2,zero,100aaa4 <___vfprintf_internal_r+0x3e0>
 100aa98:	d9014517 	ldw	r4,1300(sp)
 100aa9c:	21000084 	addi	r4,r4,2
 100aaa0:	d9014515 	stw	r4,1300(sp)
 100aaa4:	d9414c17 	ldw	r5,1328(sp)
 100aaa8:	2940210c 	andi	r5,r5,132
 100aaac:	d9414e15 	stw	r5,1336(sp)
 100aab0:	28002d1e 	bne	r5,zero,100ab68 <___vfprintf_internal_r+0x4a4>
 100aab4:	d9814a17 	ldw	r6,1320(sp)
 100aab8:	d8814517 	ldw	r2,1300(sp)
 100aabc:	30a1c83a 	sub	r16,r6,r2
 100aac0:	0400290e 	bge	zero,r16,100ab68 <___vfprintf_internal_r+0x4a4>
 100aac4:	00800404 	movi	r2,16
 100aac8:	1404580e 	bge	r2,r16,100bc2c <___vfprintf_internal_r+0x1568>
 100aacc:	dc800e17 	ldw	r18,56(sp)
 100aad0:	dc400d17 	ldw	r17,52(sp)
 100aad4:	1027883a 	mov	r19,r2
 100aad8:	070040b4 	movhi	fp,258
 100aadc:	e73d0384 	addi	fp,fp,-3058
 100aae0:	050001c4 	movi	r20,7
 100aae4:	00000306 	br	100aaf4 <___vfprintf_internal_r+0x430>
 100aae8:	843ffc04 	addi	r16,r16,-16
 100aaec:	ad400204 	addi	r21,r21,8
 100aaf0:	9c00130e 	bge	r19,r16,100ab40 <___vfprintf_internal_r+0x47c>
 100aaf4:	94800404 	addi	r18,r18,16
 100aaf8:	8c400044 	addi	r17,r17,1
 100aafc:	af000015 	stw	fp,0(r21)
 100ab00:	acc00115 	stw	r19,4(r21)
 100ab04:	dc800e15 	stw	r18,56(sp)
 100ab08:	dc400d15 	stw	r17,52(sp)
 100ab0c:	a47ff60e 	bge	r20,r17,100aae8 <___vfprintf_internal_r+0x424>
 100ab10:	d9014f17 	ldw	r4,1340(sp)
 100ab14:	b00b883a 	mov	r5,r22
 100ab18:	d9800c04 	addi	r6,sp,48
 100ab1c:	d9c15115 	stw	r7,1348(sp)
 100ab20:	100a66c0 	call	100a66c <__sprint_r>
 100ab24:	d9c15117 	ldw	r7,1348(sp)
 100ab28:	10009e1e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100ab2c:	843ffc04 	addi	r16,r16,-16
 100ab30:	dc800e17 	ldw	r18,56(sp)
 100ab34:	dc400d17 	ldw	r17,52(sp)
 100ab38:	dd401904 	addi	r21,sp,100
 100ab3c:	9c3fed16 	blt	r19,r16,100aaf4 <___vfprintf_internal_r+0x430>
 100ab40:	9425883a 	add	r18,r18,r16
 100ab44:	8c400044 	addi	r17,r17,1
 100ab48:	008001c4 	movi	r2,7
 100ab4c:	af000015 	stw	fp,0(r21)
 100ab50:	ac000115 	stw	r16,4(r21)
 100ab54:	dc800e15 	stw	r18,56(sp)
 100ab58:	dc400d15 	stw	r17,52(sp)
 100ab5c:	1441f516 	blt	r2,r17,100b334 <___vfprintf_internal_r+0xc70>
 100ab60:	ad400204 	addi	r21,r21,8
 100ab64:	00000206 	br	100ab70 <___vfprintf_internal_r+0x4ac>
 100ab68:	dc800e17 	ldw	r18,56(sp)
 100ab6c:	dc400d17 	ldw	r17,52(sp)
 100ab70:	d8800407 	ldb	r2,16(sp)
 100ab74:	10000b26 	beq	r2,zero,100aba4 <___vfprintf_internal_r+0x4e0>
 100ab78:	00800044 	movi	r2,1
 100ab7c:	94800044 	addi	r18,r18,1
 100ab80:	8c400044 	addi	r17,r17,1
 100ab84:	a8800115 	stw	r2,4(r21)
 100ab88:	d8c00404 	addi	r3,sp,16
 100ab8c:	008001c4 	movi	r2,7
 100ab90:	a8c00015 	stw	r3,0(r21)
 100ab94:	dc800e15 	stw	r18,56(sp)
 100ab98:	dc400d15 	stw	r17,52(sp)
 100ab9c:	1441da16 	blt	r2,r17,100b308 <___vfprintf_internal_r+0xc44>
 100aba0:	ad400204 	addi	r21,r21,8
 100aba4:	d9015017 	ldw	r4,1344(sp)
 100aba8:	20000b1e 	bne	r4,zero,100abd8 <___vfprintf_internal_r+0x514>
 100abac:	d8800444 	addi	r2,sp,17
 100abb0:	94800084 	addi	r18,r18,2
 100abb4:	8c400044 	addi	r17,r17,1
 100abb8:	a8800015 	stw	r2,0(r21)
 100abbc:	00c00084 	movi	r3,2
 100abc0:	008001c4 	movi	r2,7
 100abc4:	a8c00115 	stw	r3,4(r21)
 100abc8:	dc800e15 	stw	r18,56(sp)
 100abcc:	dc400d15 	stw	r17,52(sp)
 100abd0:	1441c216 	blt	r2,r17,100b2dc <___vfprintf_internal_r+0xc18>
 100abd4:	ad400204 	addi	r21,r21,8
 100abd8:	d9414e17 	ldw	r5,1336(sp)
 100abdc:	00802004 	movi	r2,128
 100abe0:	2880b126 	beq	r5,r2,100aea8 <___vfprintf_internal_r+0x7e4>
 100abe4:	d8c14617 	ldw	r3,1304(sp)
 100abe8:	19e1c83a 	sub	r16,r3,r7
 100abec:	0400260e 	bge	zero,r16,100ac88 <___vfprintf_internal_r+0x5c4>
 100abf0:	00800404 	movi	r2,16
 100abf4:	1403c90e 	bge	r2,r16,100bb1c <___vfprintf_internal_r+0x1458>
 100abf8:	1027883a 	mov	r19,r2
 100abfc:	070040b4 	movhi	fp,258
 100ac00:	e73cff84 	addi	fp,fp,-3074
 100ac04:	050001c4 	movi	r20,7
 100ac08:	00000306 	br	100ac18 <___vfprintf_internal_r+0x554>
 100ac0c:	843ffc04 	addi	r16,r16,-16
 100ac10:	ad400204 	addi	r21,r21,8
 100ac14:	9c00130e 	bge	r19,r16,100ac64 <___vfprintf_internal_r+0x5a0>
 100ac18:	94800404 	addi	r18,r18,16
 100ac1c:	8c400044 	addi	r17,r17,1
 100ac20:	af000015 	stw	fp,0(r21)
 100ac24:	acc00115 	stw	r19,4(r21)
 100ac28:	dc800e15 	stw	r18,56(sp)
 100ac2c:	dc400d15 	stw	r17,52(sp)
 100ac30:	a47ff60e 	bge	r20,r17,100ac0c <___vfprintf_internal_r+0x548>
 100ac34:	d9014f17 	ldw	r4,1340(sp)
 100ac38:	b00b883a 	mov	r5,r22
 100ac3c:	d9800c04 	addi	r6,sp,48
 100ac40:	d9c15115 	stw	r7,1348(sp)
 100ac44:	100a66c0 	call	100a66c <__sprint_r>
 100ac48:	d9c15117 	ldw	r7,1348(sp)
 100ac4c:	1000551e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100ac50:	843ffc04 	addi	r16,r16,-16
 100ac54:	dc800e17 	ldw	r18,56(sp)
 100ac58:	dc400d17 	ldw	r17,52(sp)
 100ac5c:	dd401904 	addi	r21,sp,100
 100ac60:	9c3fed16 	blt	r19,r16,100ac18 <___vfprintf_internal_r+0x554>
 100ac64:	9425883a 	add	r18,r18,r16
 100ac68:	8c400044 	addi	r17,r17,1
 100ac6c:	008001c4 	movi	r2,7
 100ac70:	af000015 	stw	fp,0(r21)
 100ac74:	ac000115 	stw	r16,4(r21)
 100ac78:	dc800e15 	stw	r18,56(sp)
 100ac7c:	dc400d15 	stw	r17,52(sp)
 100ac80:	14418216 	blt	r2,r17,100b28c <___vfprintf_internal_r+0xbc8>
 100ac84:	ad400204 	addi	r21,r21,8
 100ac88:	d9014c17 	ldw	r4,1328(sp)
 100ac8c:	2080400c 	andi	r2,r4,256
 100ac90:	10004a1e 	bne	r2,zero,100adbc <___vfprintf_internal_r+0x6f8>
 100ac94:	d9414117 	ldw	r5,1284(sp)
 100ac98:	91e5883a 	add	r18,r18,r7
 100ac9c:	8c400044 	addi	r17,r17,1
 100aca0:	008001c4 	movi	r2,7
 100aca4:	a9400015 	stw	r5,0(r21)
 100aca8:	a9c00115 	stw	r7,4(r21)
 100acac:	dc800e15 	stw	r18,56(sp)
 100acb0:	dc400d15 	stw	r17,52(sp)
 100acb4:	14416716 	blt	r2,r17,100b254 <___vfprintf_internal_r+0xb90>
 100acb8:	a8c00204 	addi	r3,r21,8
 100acbc:	d9814c17 	ldw	r6,1328(sp)
 100acc0:	3080010c 	andi	r2,r6,4
 100acc4:	10002826 	beq	r2,zero,100ad68 <___vfprintf_internal_r+0x6a4>
 100acc8:	d8814a17 	ldw	r2,1320(sp)
 100accc:	d9014517 	ldw	r4,1300(sp)
 100acd0:	1121c83a 	sub	r16,r2,r4
 100acd4:	0400240e 	bge	zero,r16,100ad68 <___vfprintf_internal_r+0x6a4>
 100acd8:	00800404 	movi	r2,16
 100acdc:	14044f0e 	bge	r2,r16,100be1c <___vfprintf_internal_r+0x1758>
 100ace0:	dc400d17 	ldw	r17,52(sp)
 100ace4:	1027883a 	mov	r19,r2
 100ace8:	070040b4 	movhi	fp,258
 100acec:	e73d0384 	addi	fp,fp,-3058
 100acf0:	050001c4 	movi	r20,7
 100acf4:	00000306 	br	100ad04 <___vfprintf_internal_r+0x640>
 100acf8:	843ffc04 	addi	r16,r16,-16
 100acfc:	18c00204 	addi	r3,r3,8
 100ad00:	9c00110e 	bge	r19,r16,100ad48 <___vfprintf_internal_r+0x684>
 100ad04:	94800404 	addi	r18,r18,16
 100ad08:	8c400044 	addi	r17,r17,1
 100ad0c:	1f000015 	stw	fp,0(r3)
 100ad10:	1cc00115 	stw	r19,4(r3)
 100ad14:	dc800e15 	stw	r18,56(sp)
 100ad18:	dc400d15 	stw	r17,52(sp)
 100ad1c:	a47ff60e 	bge	r20,r17,100acf8 <___vfprintf_internal_r+0x634>
 100ad20:	d9014f17 	ldw	r4,1340(sp)
 100ad24:	b00b883a 	mov	r5,r22
 100ad28:	d9800c04 	addi	r6,sp,48
 100ad2c:	100a66c0 	call	100a66c <__sprint_r>
 100ad30:	10001c1e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100ad34:	843ffc04 	addi	r16,r16,-16
 100ad38:	dc800e17 	ldw	r18,56(sp)
 100ad3c:	dc400d17 	ldw	r17,52(sp)
 100ad40:	d8c01904 	addi	r3,sp,100
 100ad44:	9c3fef16 	blt	r19,r16,100ad04 <___vfprintf_internal_r+0x640>
 100ad48:	9425883a 	add	r18,r18,r16
 100ad4c:	8c400044 	addi	r17,r17,1
 100ad50:	008001c4 	movi	r2,7
 100ad54:	1f000015 	stw	fp,0(r3)
 100ad58:	1c000115 	stw	r16,4(r3)
 100ad5c:	dc800e15 	stw	r18,56(sp)
 100ad60:	dc400d15 	stw	r17,52(sp)
 100ad64:	1440cb16 	blt	r2,r17,100b094 <___vfprintf_internal_r+0x9d0>
 100ad68:	d8814a17 	ldw	r2,1320(sp)
 100ad6c:	d9414517 	ldw	r5,1300(sp)
 100ad70:	1140010e 	bge	r2,r5,100ad78 <___vfprintf_internal_r+0x6b4>
 100ad74:	2805883a 	mov	r2,r5
 100ad78:	d9814b17 	ldw	r6,1324(sp)
 100ad7c:	308d883a 	add	r6,r6,r2
 100ad80:	d9814b15 	stw	r6,1324(sp)
 100ad84:	90013b1e 	bne	r18,zero,100b274 <___vfprintf_internal_r+0xbb0>
 100ad88:	d9c14017 	ldw	r7,1280(sp)
 100ad8c:	dd401904 	addi	r21,sp,100
 100ad90:	d8000d15 	stw	zero,52(sp)
 100ad94:	003ea706 	br	100a834 <___vfprintf_internal_r+0x170>
 100ad98:	d8800e17 	ldw	r2,56(sp)
 100ad9c:	10053f1e 	bne	r2,zero,100c29c <___vfprintf_internal_r+0x1bd8>
 100ada0:	d8000d15 	stw	zero,52(sp)
 100ada4:	b080030b 	ldhu	r2,12(r22)
 100ada8:	1080100c 	andi	r2,r2,64
 100adac:	103e8726 	beq	r2,zero,100a7cc <___vfprintf_internal_r+0x108>
 100adb0:	00bfffc4 	movi	r2,-1
 100adb4:	d8814b15 	stw	r2,1324(sp)
 100adb8:	003e8406 	br	100a7cc <___vfprintf_internal_r+0x108>
 100adbc:	d9814d17 	ldw	r6,1332(sp)
 100adc0:	00801944 	movi	r2,101
 100adc4:	11806e16 	blt	r2,r6,100af80 <___vfprintf_internal_r+0x8bc>
 100adc8:	d9414717 	ldw	r5,1308(sp)
 100adcc:	00c00044 	movi	r3,1
 100add0:	1943430e 	bge	r3,r5,100bae0 <___vfprintf_internal_r+0x141c>
 100add4:	d8814117 	ldw	r2,1284(sp)
 100add8:	94800044 	addi	r18,r18,1
 100addc:	8c400044 	addi	r17,r17,1
 100ade0:	a8800015 	stw	r2,0(r21)
 100ade4:	008001c4 	movi	r2,7
 100ade8:	a8c00115 	stw	r3,4(r21)
 100adec:	dc800e15 	stw	r18,56(sp)
 100adf0:	dc400d15 	stw	r17,52(sp)
 100adf4:	1441ca16 	blt	r2,r17,100b520 <___vfprintf_internal_r+0xe5c>
 100adf8:	a8c00204 	addi	r3,r21,8
 100adfc:	d9014917 	ldw	r4,1316(sp)
 100ae00:	00800044 	movi	r2,1
 100ae04:	94800044 	addi	r18,r18,1
 100ae08:	8c400044 	addi	r17,r17,1
 100ae0c:	18800115 	stw	r2,4(r3)
 100ae10:	008001c4 	movi	r2,7
 100ae14:	19000015 	stw	r4,0(r3)
 100ae18:	dc800e15 	stw	r18,56(sp)
 100ae1c:	dc400d15 	stw	r17,52(sp)
 100ae20:	1441b616 	blt	r2,r17,100b4fc <___vfprintf_internal_r+0xe38>
 100ae24:	1cc00204 	addi	r19,r3,8
 100ae28:	d9014217 	ldw	r4,1288(sp)
 100ae2c:	d9414317 	ldw	r5,1292(sp)
 100ae30:	000d883a 	mov	r6,zero
 100ae34:	000f883a 	mov	r7,zero
 100ae38:	10124680 	call	1012468 <__nedf2>
 100ae3c:	10017426 	beq	r2,zero,100b410 <___vfprintf_internal_r+0xd4c>
 100ae40:	d9414717 	ldw	r5,1308(sp)
 100ae44:	d9814117 	ldw	r6,1284(sp)
 100ae48:	8c400044 	addi	r17,r17,1
 100ae4c:	2c85883a 	add	r2,r5,r18
 100ae50:	14bfffc4 	addi	r18,r2,-1
 100ae54:	28bfffc4 	addi	r2,r5,-1
 100ae58:	30c00044 	addi	r3,r6,1
 100ae5c:	98800115 	stw	r2,4(r19)
 100ae60:	008001c4 	movi	r2,7
 100ae64:	98c00015 	stw	r3,0(r19)
 100ae68:	dc800e15 	stw	r18,56(sp)
 100ae6c:	dc400d15 	stw	r17,52(sp)
 100ae70:	14418e16 	blt	r2,r17,100b4ac <___vfprintf_internal_r+0xde8>
 100ae74:	9cc00204 	addi	r19,r19,8
 100ae78:	d9414817 	ldw	r5,1312(sp)
 100ae7c:	d8800804 	addi	r2,sp,32
 100ae80:	8c400044 	addi	r17,r17,1
 100ae84:	9165883a 	add	r18,r18,r5
 100ae88:	98800015 	stw	r2,0(r19)
 100ae8c:	008001c4 	movi	r2,7
 100ae90:	99400115 	stw	r5,4(r19)
 100ae94:	dc800e15 	stw	r18,56(sp)
 100ae98:	dc400d15 	stw	r17,52(sp)
 100ae9c:	1440ed16 	blt	r2,r17,100b254 <___vfprintf_internal_r+0xb90>
 100aea0:	98c00204 	addi	r3,r19,8
 100aea4:	003f8506 	br	100acbc <___vfprintf_internal_r+0x5f8>
 100aea8:	d9814a17 	ldw	r6,1320(sp)
 100aeac:	d8814517 	ldw	r2,1300(sp)
 100aeb0:	30a1c83a 	sub	r16,r6,r2
 100aeb4:	043f4b0e 	bge	zero,r16,100abe4 <___vfprintf_internal_r+0x520>
 100aeb8:	00800404 	movi	r2,16
 100aebc:	1404340e 	bge	r2,r16,100bf90 <___vfprintf_internal_r+0x18cc>
 100aec0:	1027883a 	mov	r19,r2
 100aec4:	070040b4 	movhi	fp,258
 100aec8:	e73cff84 	addi	fp,fp,-3074
 100aecc:	050001c4 	movi	r20,7
 100aed0:	00000306 	br	100aee0 <___vfprintf_internal_r+0x81c>
 100aed4:	843ffc04 	addi	r16,r16,-16
 100aed8:	ad400204 	addi	r21,r21,8
 100aedc:	9c00130e 	bge	r19,r16,100af2c <___vfprintf_internal_r+0x868>
 100aee0:	94800404 	addi	r18,r18,16
 100aee4:	8c400044 	addi	r17,r17,1
 100aee8:	af000015 	stw	fp,0(r21)
 100aeec:	acc00115 	stw	r19,4(r21)
 100aef0:	dc800e15 	stw	r18,56(sp)
 100aef4:	dc400d15 	stw	r17,52(sp)
 100aef8:	a47ff60e 	bge	r20,r17,100aed4 <___vfprintf_internal_r+0x810>
 100aefc:	d9014f17 	ldw	r4,1340(sp)
 100af00:	b00b883a 	mov	r5,r22
 100af04:	d9800c04 	addi	r6,sp,48
 100af08:	d9c15115 	stw	r7,1348(sp)
 100af0c:	100a66c0 	call	100a66c <__sprint_r>
 100af10:	d9c15117 	ldw	r7,1348(sp)
 100af14:	103fa31e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100af18:	843ffc04 	addi	r16,r16,-16
 100af1c:	dc800e17 	ldw	r18,56(sp)
 100af20:	dc400d17 	ldw	r17,52(sp)
 100af24:	dd401904 	addi	r21,sp,100
 100af28:	9c3fed16 	blt	r19,r16,100aee0 <___vfprintf_internal_r+0x81c>
 100af2c:	9425883a 	add	r18,r18,r16
 100af30:	8c400044 	addi	r17,r17,1
 100af34:	008001c4 	movi	r2,7
 100af38:	af000015 	stw	fp,0(r21)
 100af3c:	ac000115 	stw	r16,4(r21)
 100af40:	dc800e15 	stw	r18,56(sp)
 100af44:	dc400d15 	stw	r17,52(sp)
 100af48:	14416116 	blt	r2,r17,100b4d0 <___vfprintf_internal_r+0xe0c>
 100af4c:	ad400204 	addi	r21,r21,8
 100af50:	003f2406 	br	100abe4 <___vfprintf_internal_r+0x520>
 100af54:	d9014f17 	ldw	r4,1340(sp)
 100af58:	100e1340 	call	100e134 <__sinit>
 100af5c:	d9c15117 	ldw	r7,1348(sp)
 100af60:	003def06 	br	100a720 <___vfprintf_internal_r+0x5c>
 100af64:	d9014f17 	ldw	r4,1340(sp)
 100af68:	b00b883a 	mov	r5,r22
 100af6c:	d9c15115 	stw	r7,1348(sp)
 100af70:	100c5940 	call	100c594 <__swsetup_r>
 100af74:	d9c15117 	ldw	r7,1348(sp)
 100af78:	103dee26 	beq	r2,zero,100a734 <___vfprintf_internal_r+0x70>
 100af7c:	003f8c06 	br	100adb0 <___vfprintf_internal_r+0x6ec>
 100af80:	d9014217 	ldw	r4,1288(sp)
 100af84:	d9414317 	ldw	r5,1292(sp)
 100af88:	000d883a 	mov	r6,zero
 100af8c:	000f883a 	mov	r7,zero
 100af90:	10123e00 	call	10123e0 <__eqdf2>
 100af94:	1000f21e 	bne	r2,zero,100b360 <___vfprintf_internal_r+0xc9c>
 100af98:	008040b4 	movhi	r2,258
 100af9c:	10bcff04 	addi	r2,r2,-3076
 100afa0:	94800044 	addi	r18,r18,1
 100afa4:	8c400044 	addi	r17,r17,1
 100afa8:	a8800015 	stw	r2,0(r21)
 100afac:	00c00044 	movi	r3,1
 100afb0:	008001c4 	movi	r2,7
 100afb4:	a8c00115 	stw	r3,4(r21)
 100afb8:	dc800e15 	stw	r18,56(sp)
 100afbc:	dc400d15 	stw	r17,52(sp)
 100afc0:	1442fa16 	blt	r2,r17,100bbac <___vfprintf_internal_r+0x14e8>
 100afc4:	a8c00204 	addi	r3,r21,8
 100afc8:	d8800517 	ldw	r2,20(sp)
 100afcc:	d9014717 	ldw	r4,1308(sp)
 100afd0:	11015c0e 	bge	r2,r4,100b544 <___vfprintf_internal_r+0xe80>
 100afd4:	dc400d17 	ldw	r17,52(sp)
 100afd8:	d9814917 	ldw	r6,1316(sp)
 100afdc:	00800044 	movi	r2,1
 100afe0:	94800044 	addi	r18,r18,1
 100afe4:	8c400044 	addi	r17,r17,1
 100afe8:	18800115 	stw	r2,4(r3)
 100afec:	008001c4 	movi	r2,7
 100aff0:	19800015 	stw	r6,0(r3)
 100aff4:	dc800e15 	stw	r18,56(sp)
 100aff8:	dc400d15 	stw	r17,52(sp)
 100affc:	14431016 	blt	r2,r17,100bc40 <___vfprintf_internal_r+0x157c>
 100b000:	18c00204 	addi	r3,r3,8
 100b004:	d8814717 	ldw	r2,1308(sp)
 100b008:	143fffc4 	addi	r16,r2,-1
 100b00c:	043f2b0e 	bge	zero,r16,100acbc <___vfprintf_internal_r+0x5f8>
 100b010:	00800404 	movi	r2,16
 100b014:	1402a20e 	bge	r2,r16,100baa0 <___vfprintf_internal_r+0x13dc>
 100b018:	dc400d17 	ldw	r17,52(sp)
 100b01c:	1027883a 	mov	r19,r2
 100b020:	070040b4 	movhi	fp,258
 100b024:	e73cff84 	addi	fp,fp,-3074
 100b028:	050001c4 	movi	r20,7
 100b02c:	00000306 	br	100b03c <___vfprintf_internal_r+0x978>
 100b030:	18c00204 	addi	r3,r3,8
 100b034:	843ffc04 	addi	r16,r16,-16
 100b038:	9c029c0e 	bge	r19,r16,100baac <___vfprintf_internal_r+0x13e8>
 100b03c:	94800404 	addi	r18,r18,16
 100b040:	8c400044 	addi	r17,r17,1
 100b044:	1f000015 	stw	fp,0(r3)
 100b048:	1cc00115 	stw	r19,4(r3)
 100b04c:	dc800e15 	stw	r18,56(sp)
 100b050:	dc400d15 	stw	r17,52(sp)
 100b054:	a47ff60e 	bge	r20,r17,100b030 <___vfprintf_internal_r+0x96c>
 100b058:	d9014f17 	ldw	r4,1340(sp)
 100b05c:	b00b883a 	mov	r5,r22
 100b060:	d9800c04 	addi	r6,sp,48
 100b064:	100a66c0 	call	100a66c <__sprint_r>
 100b068:	103f4e1e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b06c:	dc800e17 	ldw	r18,56(sp)
 100b070:	dc400d17 	ldw	r17,52(sp)
 100b074:	d8c01904 	addi	r3,sp,100
 100b078:	003fee06 	br	100b034 <___vfprintf_internal_r+0x970>
 100b07c:	d8802c0b 	ldhu	r2,176(sp)
 100b080:	00ffffc4 	movi	r3,-1
 100b084:	d8c14b15 	stw	r3,1324(sp)
 100b088:	1080100c 	andi	r2,r2,64
 100b08c:	103dcc1e 	bne	r2,zero,100a7c0 <___vfprintf_internal_r+0xfc>
 100b090:	003dce06 	br	100a7cc <___vfprintf_internal_r+0x108>
 100b094:	d9014f17 	ldw	r4,1340(sp)
 100b098:	b00b883a 	mov	r5,r22
 100b09c:	d9800c04 	addi	r6,sp,48
 100b0a0:	100a66c0 	call	100a66c <__sprint_r>
 100b0a4:	103f3f1e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b0a8:	dc800e17 	ldw	r18,56(sp)
 100b0ac:	003f2e06 	br	100ad68 <___vfprintf_internal_r+0x6a4>
 100b0b0:	d9414c17 	ldw	r5,1328(sp)
 100b0b4:	29400414 	ori	r5,r5,16
 100b0b8:	d9414c15 	stw	r5,1328(sp)
 100b0bc:	d9814c17 	ldw	r6,1328(sp)
 100b0c0:	3080080c 	andi	r2,r6,32
 100b0c4:	10014f1e 	bne	r2,zero,100b604 <___vfprintf_internal_r+0xf40>
 100b0c8:	d8c14c17 	ldw	r3,1328(sp)
 100b0cc:	1880040c 	andi	r2,r3,16
 100b0d0:	1002ea1e 	bne	r2,zero,100bc7c <___vfprintf_internal_r+0x15b8>
 100b0d4:	d9014c17 	ldw	r4,1328(sp)
 100b0d8:	2080100c 	andi	r2,r4,64
 100b0dc:	1002e726 	beq	r2,zero,100bc7c <___vfprintf_internal_r+0x15b8>
 100b0e0:	3880000f 	ldh	r2,0(r7)
 100b0e4:	39c00104 	addi	r7,r7,4
 100b0e8:	d9c14015 	stw	r7,1280(sp)
 100b0ec:	1023d7fa 	srai	r17,r2,31
 100b0f0:	1021883a 	mov	r16,r2
 100b0f4:	88037216 	blt	r17,zero,100bec0 <___vfprintf_internal_r+0x17fc>
 100b0f8:	01000044 	movi	r4,1
 100b0fc:	98000416 	blt	r19,zero,100b110 <___vfprintf_internal_r+0xa4c>
 100b100:	d8c14c17 	ldw	r3,1328(sp)
 100b104:	00bfdfc4 	movi	r2,-129
 100b108:	1886703a 	and	r3,r3,r2
 100b10c:	d8c14c15 	stw	r3,1328(sp)
 100b110:	8444b03a 	or	r2,r16,r17
 100b114:	1002261e 	bne	r2,zero,100b9b0 <___vfprintf_internal_r+0x12ec>
 100b118:	9802251e 	bne	r19,zero,100b9b0 <___vfprintf_internal_r+0x12ec>
 100b11c:	20803fcc 	andi	r2,r4,255
 100b120:	10029b26 	beq	r2,zero,100bb90 <___vfprintf_internal_r+0x14cc>
 100b124:	d8c01904 	addi	r3,sp,100
 100b128:	dd000f04 	addi	r20,sp,60
 100b12c:	d8c14115 	stw	r3,1284(sp)
 100b130:	d8c14117 	ldw	r3,1284(sp)
 100b134:	dcc14515 	stw	r19,1300(sp)
 100b138:	a0c5c83a 	sub	r2,r20,r3
 100b13c:	11c00a04 	addi	r7,r2,40
 100b140:	99c0010e 	bge	r19,r7,100b148 <___vfprintf_internal_r+0xa84>
 100b144:	d9c14515 	stw	r7,1300(sp)
 100b148:	dcc14615 	stw	r19,1304(sp)
 100b14c:	d8800407 	ldb	r2,16(sp)
 100b150:	103e4c26 	beq	r2,zero,100aa84 <___vfprintf_internal_r+0x3c0>
 100b154:	d8814517 	ldw	r2,1300(sp)
 100b158:	10800044 	addi	r2,r2,1
 100b15c:	d8814515 	stw	r2,1300(sp)
 100b160:	003e4806 	br	100aa84 <___vfprintf_internal_r+0x3c0>
 100b164:	d9814c17 	ldw	r6,1328(sp)
 100b168:	31800414 	ori	r6,r6,16
 100b16c:	d9814c15 	stw	r6,1328(sp)
 100b170:	d8c14c17 	ldw	r3,1328(sp)
 100b174:	1880080c 	andi	r2,r3,32
 100b178:	1001271e 	bne	r2,zero,100b618 <___vfprintf_internal_r+0xf54>
 100b17c:	d9414c17 	ldw	r5,1328(sp)
 100b180:	2880040c 	andi	r2,r5,16
 100b184:	1002b61e 	bne	r2,zero,100bc60 <___vfprintf_internal_r+0x159c>
 100b188:	d9814c17 	ldw	r6,1328(sp)
 100b18c:	3080100c 	andi	r2,r6,64
 100b190:	1002b326 	beq	r2,zero,100bc60 <___vfprintf_internal_r+0x159c>
 100b194:	3c00000b 	ldhu	r16,0(r7)
 100b198:	0009883a 	mov	r4,zero
 100b19c:	39c00104 	addi	r7,r7,4
 100b1a0:	0023883a 	mov	r17,zero
 100b1a4:	d9c14015 	stw	r7,1280(sp)
 100b1a8:	d8000405 	stb	zero,16(sp)
 100b1ac:	003fd306 	br	100b0fc <___vfprintf_internal_r+0xa38>
 100b1b0:	d9014c17 	ldw	r4,1328(sp)
 100b1b4:	21000414 	ori	r4,r4,16
 100b1b8:	d9014c15 	stw	r4,1328(sp)
 100b1bc:	d9414c17 	ldw	r5,1328(sp)
 100b1c0:	2880080c 	andi	r2,r5,32
 100b1c4:	1001081e 	bne	r2,zero,100b5e8 <___vfprintf_internal_r+0xf24>
 100b1c8:	d8c14c17 	ldw	r3,1328(sp)
 100b1cc:	1880040c 	andi	r2,r3,16
 100b1d0:	1002b01e 	bne	r2,zero,100bc94 <___vfprintf_internal_r+0x15d0>
 100b1d4:	d9014c17 	ldw	r4,1328(sp)
 100b1d8:	2080100c 	andi	r2,r4,64
 100b1dc:	1002ad26 	beq	r2,zero,100bc94 <___vfprintf_internal_r+0x15d0>
 100b1e0:	3c00000b 	ldhu	r16,0(r7)
 100b1e4:	01000044 	movi	r4,1
 100b1e8:	39c00104 	addi	r7,r7,4
 100b1ec:	0023883a 	mov	r17,zero
 100b1f0:	d9c14015 	stw	r7,1280(sp)
 100b1f4:	d8000405 	stb	zero,16(sp)
 100b1f8:	003fc006 	br	100b0fc <___vfprintf_internal_r+0xa38>
 100b1fc:	d9014f17 	ldw	r4,1340(sp)
 100b200:	b00b883a 	mov	r5,r22
 100b204:	d9800c04 	addi	r6,sp,48
 100b208:	100a66c0 	call	100a66c <__sprint_r>
 100b20c:	103ee51e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b210:	dc800e17 	ldw	r18,56(sp)
 100b214:	d8c01904 	addi	r3,sp,100
 100b218:	d9814c17 	ldw	r6,1328(sp)
 100b21c:	3080004c 	andi	r2,r6,1
 100b220:	1005003a 	cmpeq	r2,r2,zero
 100b224:	103ea51e 	bne	r2,zero,100acbc <___vfprintf_internal_r+0x5f8>
 100b228:	00800044 	movi	r2,1
 100b22c:	dc400d17 	ldw	r17,52(sp)
 100b230:	18800115 	stw	r2,4(r3)
 100b234:	d8814917 	ldw	r2,1316(sp)
 100b238:	94800044 	addi	r18,r18,1
 100b23c:	8c400044 	addi	r17,r17,1
 100b240:	18800015 	stw	r2,0(r3)
 100b244:	008001c4 	movi	r2,7
 100b248:	dc800e15 	stw	r18,56(sp)
 100b24c:	dc400d15 	stw	r17,52(sp)
 100b250:	14421e0e 	bge	r2,r17,100bacc <___vfprintf_internal_r+0x1408>
 100b254:	d9014f17 	ldw	r4,1340(sp)
 100b258:	b00b883a 	mov	r5,r22
 100b25c:	d9800c04 	addi	r6,sp,48
 100b260:	100a66c0 	call	100a66c <__sprint_r>
 100b264:	103ecf1e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b268:	dc800e17 	ldw	r18,56(sp)
 100b26c:	d8c01904 	addi	r3,sp,100
 100b270:	003e9206 	br	100acbc <___vfprintf_internal_r+0x5f8>
 100b274:	d9014f17 	ldw	r4,1340(sp)
 100b278:	b00b883a 	mov	r5,r22
 100b27c:	d9800c04 	addi	r6,sp,48
 100b280:	100a66c0 	call	100a66c <__sprint_r>
 100b284:	103ec026 	beq	r2,zero,100ad88 <___vfprintf_internal_r+0x6c4>
 100b288:	003ec606 	br	100ada4 <___vfprintf_internal_r+0x6e0>
 100b28c:	d9014f17 	ldw	r4,1340(sp)
 100b290:	b00b883a 	mov	r5,r22
 100b294:	d9800c04 	addi	r6,sp,48
 100b298:	d9c15115 	stw	r7,1348(sp)
 100b29c:	100a66c0 	call	100a66c <__sprint_r>
 100b2a0:	d9c15117 	ldw	r7,1348(sp)
 100b2a4:	103ebf1e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b2a8:	dc800e17 	ldw	r18,56(sp)
 100b2ac:	dc400d17 	ldw	r17,52(sp)
 100b2b0:	dd401904 	addi	r21,sp,100
 100b2b4:	003e7406 	br	100ac88 <___vfprintf_internal_r+0x5c4>
 100b2b8:	d9014f17 	ldw	r4,1340(sp)
 100b2bc:	b00b883a 	mov	r5,r22
 100b2c0:	d9800c04 	addi	r6,sp,48
 100b2c4:	d9c15115 	stw	r7,1348(sp)
 100b2c8:	100a66c0 	call	100a66c <__sprint_r>
 100b2cc:	d9c15117 	ldw	r7,1348(sp)
 100b2d0:	103eb41e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b2d4:	dd401904 	addi	r21,sp,100
 100b2d8:	003d6d06 	br	100a890 <___vfprintf_internal_r+0x1cc>
 100b2dc:	d9014f17 	ldw	r4,1340(sp)
 100b2e0:	b00b883a 	mov	r5,r22
 100b2e4:	d9800c04 	addi	r6,sp,48
 100b2e8:	d9c15115 	stw	r7,1348(sp)
 100b2ec:	100a66c0 	call	100a66c <__sprint_r>
 100b2f0:	d9c15117 	ldw	r7,1348(sp)
 100b2f4:	103eab1e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b2f8:	dc800e17 	ldw	r18,56(sp)
 100b2fc:	dc400d17 	ldw	r17,52(sp)
 100b300:	dd401904 	addi	r21,sp,100
 100b304:	003e3406 	br	100abd8 <___vfprintf_internal_r+0x514>
 100b308:	d9014f17 	ldw	r4,1340(sp)
 100b30c:	b00b883a 	mov	r5,r22
 100b310:	d9800c04 	addi	r6,sp,48
 100b314:	d9c15115 	stw	r7,1348(sp)
 100b318:	100a66c0 	call	100a66c <__sprint_r>
 100b31c:	d9c15117 	ldw	r7,1348(sp)
 100b320:	103ea01e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b324:	dc800e17 	ldw	r18,56(sp)
 100b328:	dc400d17 	ldw	r17,52(sp)
 100b32c:	dd401904 	addi	r21,sp,100
 100b330:	003e1c06 	br	100aba4 <___vfprintf_internal_r+0x4e0>
 100b334:	d9014f17 	ldw	r4,1340(sp)
 100b338:	b00b883a 	mov	r5,r22
 100b33c:	d9800c04 	addi	r6,sp,48
 100b340:	d9c15115 	stw	r7,1348(sp)
 100b344:	100a66c0 	call	100a66c <__sprint_r>
 100b348:	d9c15117 	ldw	r7,1348(sp)
 100b34c:	103e951e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b350:	dc800e17 	ldw	r18,56(sp)
 100b354:	dc400d17 	ldw	r17,52(sp)
 100b358:	dd401904 	addi	r21,sp,100
 100b35c:	003e0406 	br	100ab70 <___vfprintf_internal_r+0x4ac>
 100b360:	d9000517 	ldw	r4,20(sp)
 100b364:	0102520e 	bge	zero,r4,100bcb0 <___vfprintf_internal_r+0x15ec>
 100b368:	d9814717 	ldw	r6,1308(sp)
 100b36c:	21807a16 	blt	r4,r6,100b558 <___vfprintf_internal_r+0xe94>
 100b370:	d8814117 	ldw	r2,1284(sp)
 100b374:	91a5883a 	add	r18,r18,r6
 100b378:	8c400044 	addi	r17,r17,1
 100b37c:	a8800015 	stw	r2,0(r21)
 100b380:	008001c4 	movi	r2,7
 100b384:	a9800115 	stw	r6,4(r21)
 100b388:	dc800e15 	stw	r18,56(sp)
 100b38c:	dc400d15 	stw	r17,52(sp)
 100b390:	1442f616 	blt	r2,r17,100bf6c <___vfprintf_internal_r+0x18a8>
 100b394:	a8c00204 	addi	r3,r21,8
 100b398:	d9414717 	ldw	r5,1308(sp)
 100b39c:	2161c83a 	sub	r16,r4,r5
 100b3a0:	043f9d0e 	bge	zero,r16,100b218 <___vfprintf_internal_r+0xb54>
 100b3a4:	00800404 	movi	r2,16
 100b3a8:	1402130e 	bge	r2,r16,100bbf8 <___vfprintf_internal_r+0x1534>
 100b3ac:	dc400d17 	ldw	r17,52(sp)
 100b3b0:	1027883a 	mov	r19,r2
 100b3b4:	070040b4 	movhi	fp,258
 100b3b8:	e73cff84 	addi	fp,fp,-3074
 100b3bc:	050001c4 	movi	r20,7
 100b3c0:	00000306 	br	100b3d0 <___vfprintf_internal_r+0xd0c>
 100b3c4:	18c00204 	addi	r3,r3,8
 100b3c8:	843ffc04 	addi	r16,r16,-16
 100b3cc:	9c020d0e 	bge	r19,r16,100bc04 <___vfprintf_internal_r+0x1540>
 100b3d0:	94800404 	addi	r18,r18,16
 100b3d4:	8c400044 	addi	r17,r17,1
 100b3d8:	1f000015 	stw	fp,0(r3)
 100b3dc:	1cc00115 	stw	r19,4(r3)
 100b3e0:	dc800e15 	stw	r18,56(sp)
 100b3e4:	dc400d15 	stw	r17,52(sp)
 100b3e8:	a47ff60e 	bge	r20,r17,100b3c4 <___vfprintf_internal_r+0xd00>
 100b3ec:	d9014f17 	ldw	r4,1340(sp)
 100b3f0:	b00b883a 	mov	r5,r22
 100b3f4:	d9800c04 	addi	r6,sp,48
 100b3f8:	100a66c0 	call	100a66c <__sprint_r>
 100b3fc:	103e691e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b400:	dc800e17 	ldw	r18,56(sp)
 100b404:	dc400d17 	ldw	r17,52(sp)
 100b408:	d8c01904 	addi	r3,sp,100
 100b40c:	003fee06 	br	100b3c8 <___vfprintf_internal_r+0xd04>
 100b410:	d8814717 	ldw	r2,1308(sp)
 100b414:	143fffc4 	addi	r16,r2,-1
 100b418:	043e970e 	bge	zero,r16,100ae78 <___vfprintf_internal_r+0x7b4>
 100b41c:	00800404 	movi	r2,16
 100b420:	1400180e 	bge	r2,r16,100b484 <___vfprintf_internal_r+0xdc0>
 100b424:	1029883a 	mov	r20,r2
 100b428:	070040b4 	movhi	fp,258
 100b42c:	e73cff84 	addi	fp,fp,-3074
 100b430:	054001c4 	movi	r21,7
 100b434:	00000306 	br	100b444 <___vfprintf_internal_r+0xd80>
 100b438:	9cc00204 	addi	r19,r19,8
 100b43c:	843ffc04 	addi	r16,r16,-16
 100b440:	a400120e 	bge	r20,r16,100b48c <___vfprintf_internal_r+0xdc8>
 100b444:	94800404 	addi	r18,r18,16
 100b448:	8c400044 	addi	r17,r17,1
 100b44c:	9f000015 	stw	fp,0(r19)
 100b450:	9d000115 	stw	r20,4(r19)
 100b454:	dc800e15 	stw	r18,56(sp)
 100b458:	dc400d15 	stw	r17,52(sp)
 100b45c:	ac7ff60e 	bge	r21,r17,100b438 <___vfprintf_internal_r+0xd74>
 100b460:	d9014f17 	ldw	r4,1340(sp)
 100b464:	b00b883a 	mov	r5,r22
 100b468:	d9800c04 	addi	r6,sp,48
 100b46c:	100a66c0 	call	100a66c <__sprint_r>
 100b470:	103e4c1e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b474:	dc800e17 	ldw	r18,56(sp)
 100b478:	dc400d17 	ldw	r17,52(sp)
 100b47c:	dcc01904 	addi	r19,sp,100
 100b480:	003fee06 	br	100b43c <___vfprintf_internal_r+0xd78>
 100b484:	070040b4 	movhi	fp,258
 100b488:	e73cff84 	addi	fp,fp,-3074
 100b48c:	9425883a 	add	r18,r18,r16
 100b490:	8c400044 	addi	r17,r17,1
 100b494:	008001c4 	movi	r2,7
 100b498:	9f000015 	stw	fp,0(r19)
 100b49c:	9c000115 	stw	r16,4(r19)
 100b4a0:	dc800e15 	stw	r18,56(sp)
 100b4a4:	dc400d15 	stw	r17,52(sp)
 100b4a8:	147e720e 	bge	r2,r17,100ae74 <___vfprintf_internal_r+0x7b0>
 100b4ac:	d9014f17 	ldw	r4,1340(sp)
 100b4b0:	b00b883a 	mov	r5,r22
 100b4b4:	d9800c04 	addi	r6,sp,48
 100b4b8:	100a66c0 	call	100a66c <__sprint_r>
 100b4bc:	103e391e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b4c0:	dc800e17 	ldw	r18,56(sp)
 100b4c4:	dc400d17 	ldw	r17,52(sp)
 100b4c8:	dcc01904 	addi	r19,sp,100
 100b4cc:	003e6a06 	br	100ae78 <___vfprintf_internal_r+0x7b4>
 100b4d0:	d9014f17 	ldw	r4,1340(sp)
 100b4d4:	b00b883a 	mov	r5,r22
 100b4d8:	d9800c04 	addi	r6,sp,48
 100b4dc:	d9c15115 	stw	r7,1348(sp)
 100b4e0:	100a66c0 	call	100a66c <__sprint_r>
 100b4e4:	d9c15117 	ldw	r7,1348(sp)
 100b4e8:	103e2e1e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b4ec:	dc800e17 	ldw	r18,56(sp)
 100b4f0:	dc400d17 	ldw	r17,52(sp)
 100b4f4:	dd401904 	addi	r21,sp,100
 100b4f8:	003dba06 	br	100abe4 <___vfprintf_internal_r+0x520>
 100b4fc:	d9014f17 	ldw	r4,1340(sp)
 100b500:	b00b883a 	mov	r5,r22
 100b504:	d9800c04 	addi	r6,sp,48
 100b508:	100a66c0 	call	100a66c <__sprint_r>
 100b50c:	103e251e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b510:	dc800e17 	ldw	r18,56(sp)
 100b514:	dc400d17 	ldw	r17,52(sp)
 100b518:	dcc01904 	addi	r19,sp,100
 100b51c:	003e4206 	br	100ae28 <___vfprintf_internal_r+0x764>
 100b520:	d9014f17 	ldw	r4,1340(sp)
 100b524:	b00b883a 	mov	r5,r22
 100b528:	d9800c04 	addi	r6,sp,48
 100b52c:	100a66c0 	call	100a66c <__sprint_r>
 100b530:	103e1c1e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100b534:	dc800e17 	ldw	r18,56(sp)
 100b538:	dc400d17 	ldw	r17,52(sp)
 100b53c:	d8c01904 	addi	r3,sp,100
 100b540:	003e2e06 	br	100adfc <___vfprintf_internal_r+0x738>
 100b544:	d9414c17 	ldw	r5,1328(sp)
 100b548:	2880004c 	andi	r2,r5,1
 100b54c:	1005003a 	cmpeq	r2,r2,zero
 100b550:	103dda1e 	bne	r2,zero,100acbc <___vfprintf_internal_r+0x5f8>
 100b554:	003e9f06 	br	100afd4 <___vfprintf_internal_r+0x910>
 100b558:	d8c14117 	ldw	r3,1284(sp)
 100b55c:	9125883a 	add	r18,r18,r4
 100b560:	8c400044 	addi	r17,r17,1
 100b564:	008001c4 	movi	r2,7
 100b568:	a8c00015 	stw	r3,0(r21)
 100b56c:	a9000115 	stw	r4,4(r21)
 100b570:	dc800e15 	stw	r18,56(sp)
 100b574:	dc400d15 	stw	r17,52(sp)
 100b578:	14426616 	blt	r2,r17,100bf14 <___vfprintf_internal_r+0x1850>
 100b57c:	a8c00204 	addi	r3,r21,8
 100b580:	d9414917 	ldw	r5,1316(sp)
 100b584:	00800044 	movi	r2,1
 100b588:	94800044 	addi	r18,r18,1
 100b58c:	8c400044 	addi	r17,r17,1
 100b590:	18800115 	stw	r2,4(r3)
 100b594:	008001c4 	movi	r2,7
 100b598:	19400015 	stw	r5,0(r3)
 100b59c:	dc800e15 	stw	r18,56(sp)
 100b5a0:	dc400d15 	stw	r17,52(sp)
 100b5a4:	2021883a 	mov	r16,r4
 100b5a8:	14425016 	blt	r2,r17,100beec <___vfprintf_internal_r+0x1828>
 100b5ac:	19400204 	addi	r5,r3,8
 100b5b0:	d9814717 	ldw	r6,1308(sp)
 100b5b4:	8c400044 	addi	r17,r17,1
 100b5b8:	dc400d15 	stw	r17,52(sp)
 100b5bc:	3107c83a 	sub	r3,r6,r4
 100b5c0:	d9014117 	ldw	r4,1284(sp)
 100b5c4:	90e5883a 	add	r18,r18,r3
 100b5c8:	28c00115 	stw	r3,4(r5)
 100b5cc:	8105883a 	add	r2,r16,r4
 100b5d0:	28800015 	stw	r2,0(r5)
 100b5d4:	008001c4 	movi	r2,7
 100b5d8:	dc800e15 	stw	r18,56(sp)
 100b5dc:	147f1d16 	blt	r2,r17,100b254 <___vfprintf_internal_r+0xb90>
 100b5e0:	28c00204 	addi	r3,r5,8
 100b5e4:	003db506 	br	100acbc <___vfprintf_internal_r+0x5f8>
 100b5e8:	3c000017 	ldw	r16,0(r7)
 100b5ec:	3c400117 	ldw	r17,4(r7)
 100b5f0:	39800204 	addi	r6,r7,8
 100b5f4:	01000044 	movi	r4,1
 100b5f8:	d9814015 	stw	r6,1280(sp)
 100b5fc:	d8000405 	stb	zero,16(sp)
 100b600:	003ebe06 	br	100b0fc <___vfprintf_internal_r+0xa38>
 100b604:	3c000017 	ldw	r16,0(r7)
 100b608:	3c400117 	ldw	r17,4(r7)
 100b60c:	38800204 	addi	r2,r7,8
 100b610:	d8814015 	stw	r2,1280(sp)
 100b614:	003eb706 	br	100b0f4 <___vfprintf_internal_r+0xa30>
 100b618:	3c000017 	ldw	r16,0(r7)
 100b61c:	3c400117 	ldw	r17,4(r7)
 100b620:	39000204 	addi	r4,r7,8
 100b624:	d9014015 	stw	r4,1280(sp)
 100b628:	0009883a 	mov	r4,zero
 100b62c:	d8000405 	stb	zero,16(sp)
 100b630:	003eb206 	br	100b0fc <___vfprintf_internal_r+0xa38>
 100b634:	38c00017 	ldw	r3,0(r7)
 100b638:	39c00104 	addi	r7,r7,4
 100b63c:	d8c14a15 	stw	r3,1320(sp)
 100b640:	1800d10e 	bge	r3,zero,100b988 <___vfprintf_internal_r+0x12c4>
 100b644:	00c7c83a 	sub	r3,zero,r3
 100b648:	d8c14a15 	stw	r3,1320(sp)
 100b64c:	d9014c17 	ldw	r4,1328(sp)
 100b650:	b8c00007 	ldb	r3,0(r23)
 100b654:	21000114 	ori	r4,r4,4
 100b658:	d9014c15 	stw	r4,1328(sp)
 100b65c:	003c9806 	br	100a8c0 <___vfprintf_internal_r+0x1fc>
 100b660:	d9814c17 	ldw	r6,1328(sp)
 100b664:	3080080c 	andi	r2,r6,32
 100b668:	1001f026 	beq	r2,zero,100be2c <___vfprintf_internal_r+0x1768>
 100b66c:	d9014b17 	ldw	r4,1324(sp)
 100b670:	38800017 	ldw	r2,0(r7)
 100b674:	39c00104 	addi	r7,r7,4
 100b678:	d9c14015 	stw	r7,1280(sp)
 100b67c:	2007d7fa 	srai	r3,r4,31
 100b680:	d9c14017 	ldw	r7,1280(sp)
 100b684:	11000015 	stw	r4,0(r2)
 100b688:	10c00115 	stw	r3,4(r2)
 100b68c:	003c6906 	br	100a834 <___vfprintf_internal_r+0x170>
 100b690:	b8c00007 	ldb	r3,0(r23)
 100b694:	00801b04 	movi	r2,108
 100b698:	18824f26 	beq	r3,r2,100bfd8 <___vfprintf_internal_r+0x1914>
 100b69c:	d9414c17 	ldw	r5,1328(sp)
 100b6a0:	29400414 	ori	r5,r5,16
 100b6a4:	d9414c15 	stw	r5,1328(sp)
 100b6a8:	003c8506 	br	100a8c0 <___vfprintf_internal_r+0x1fc>
 100b6ac:	d9814c17 	ldw	r6,1328(sp)
 100b6b0:	b8c00007 	ldb	r3,0(r23)
 100b6b4:	31800814 	ori	r6,r6,32
 100b6b8:	d9814c15 	stw	r6,1328(sp)
 100b6bc:	003c8006 	br	100a8c0 <___vfprintf_internal_r+0x1fc>
 100b6c0:	d8814c17 	ldw	r2,1328(sp)
 100b6c4:	3c000017 	ldw	r16,0(r7)
 100b6c8:	00c01e04 	movi	r3,120
 100b6cc:	10800094 	ori	r2,r2,2
 100b6d0:	d8814c15 	stw	r2,1328(sp)
 100b6d4:	39c00104 	addi	r7,r7,4
 100b6d8:	014040b4 	movhi	r5,258
 100b6dc:	297ce804 	addi	r5,r5,-3168
 100b6e0:	00800c04 	movi	r2,48
 100b6e4:	0023883a 	mov	r17,zero
 100b6e8:	01000084 	movi	r4,2
 100b6ec:	d9c14015 	stw	r7,1280(sp)
 100b6f0:	d8c14d15 	stw	r3,1332(sp)
 100b6f4:	d9414415 	stw	r5,1296(sp)
 100b6f8:	d8800445 	stb	r2,17(sp)
 100b6fc:	d8c00485 	stb	r3,18(sp)
 100b700:	d8000405 	stb	zero,16(sp)
 100b704:	003e7d06 	br	100b0fc <___vfprintf_internal_r+0xa38>
 100b708:	d8814c17 	ldw	r2,1328(sp)
 100b70c:	b8c00007 	ldb	r3,0(r23)
 100b710:	10801014 	ori	r2,r2,64
 100b714:	d8814c15 	stw	r2,1328(sp)
 100b718:	003c6906 	br	100a8c0 <___vfprintf_internal_r+0x1fc>
 100b71c:	d9414c17 	ldw	r5,1328(sp)
 100b720:	2880020c 	andi	r2,r5,8
 100b724:	1001df26 	beq	r2,zero,100bea4 <___vfprintf_internal_r+0x17e0>
 100b728:	39800017 	ldw	r6,0(r7)
 100b72c:	38800204 	addi	r2,r7,8
 100b730:	d8814015 	stw	r2,1280(sp)
 100b734:	d9814215 	stw	r6,1288(sp)
 100b738:	39c00117 	ldw	r7,4(r7)
 100b73c:	d9c14315 	stw	r7,1292(sp)
 100b740:	d9014217 	ldw	r4,1288(sp)
 100b744:	d9414317 	ldw	r5,1292(sp)
 100b748:	10106280 	call	1010628 <__isinfd>
 100b74c:	10021726 	beq	r2,zero,100bfac <___vfprintf_internal_r+0x18e8>
 100b750:	d9014217 	ldw	r4,1288(sp)
 100b754:	d9414317 	ldw	r5,1292(sp)
 100b758:	000d883a 	mov	r6,zero
 100b75c:	000f883a 	mov	r7,zero
 100b760:	10126000 	call	1012600 <__ltdf2>
 100b764:	1002ca16 	blt	r2,zero,100c290 <___vfprintf_internal_r+0x1bcc>
 100b768:	d9414d17 	ldw	r5,1332(sp)
 100b76c:	008011c4 	movi	r2,71
 100b770:	11420a16 	blt	r2,r5,100bf9c <___vfprintf_internal_r+0x18d8>
 100b774:	018040b4 	movhi	r6,258
 100b778:	31bced04 	addi	r6,r6,-3148
 100b77c:	d9814115 	stw	r6,1284(sp)
 100b780:	d9014c17 	ldw	r4,1328(sp)
 100b784:	00c000c4 	movi	r3,3
 100b788:	00bfdfc4 	movi	r2,-129
 100b78c:	2088703a 	and	r4,r4,r2
 100b790:	180f883a 	mov	r7,r3
 100b794:	d8c14515 	stw	r3,1300(sp)
 100b798:	d9014c15 	stw	r4,1328(sp)
 100b79c:	d8014615 	stw	zero,1304(sp)
 100b7a0:	003e6a06 	br	100b14c <___vfprintf_internal_r+0xa88>
 100b7a4:	38800017 	ldw	r2,0(r7)
 100b7a8:	00c00044 	movi	r3,1
 100b7ac:	39c00104 	addi	r7,r7,4
 100b7b0:	d9c14015 	stw	r7,1280(sp)
 100b7b4:	d9000f04 	addi	r4,sp,60
 100b7b8:	180f883a 	mov	r7,r3
 100b7bc:	d8c14515 	stw	r3,1300(sp)
 100b7c0:	d9014115 	stw	r4,1284(sp)
 100b7c4:	d8800f05 	stb	r2,60(sp)
 100b7c8:	d8000405 	stb	zero,16(sp)
 100b7cc:	003cac06 	br	100aa80 <___vfprintf_internal_r+0x3bc>
 100b7d0:	014040b4 	movhi	r5,258
 100b7d4:	297cf304 	addi	r5,r5,-3124
 100b7d8:	d9414415 	stw	r5,1296(sp)
 100b7dc:	d9814c17 	ldw	r6,1328(sp)
 100b7e0:	3080080c 	andi	r2,r6,32
 100b7e4:	1000f926 	beq	r2,zero,100bbcc <___vfprintf_internal_r+0x1508>
 100b7e8:	3c000017 	ldw	r16,0(r7)
 100b7ec:	3c400117 	ldw	r17,4(r7)
 100b7f0:	38800204 	addi	r2,r7,8
 100b7f4:	d8814015 	stw	r2,1280(sp)
 100b7f8:	d9414c17 	ldw	r5,1328(sp)
 100b7fc:	2880004c 	andi	r2,r5,1
 100b800:	1005003a 	cmpeq	r2,r2,zero
 100b804:	1000b31e 	bne	r2,zero,100bad4 <___vfprintf_internal_r+0x1410>
 100b808:	8444b03a 	or	r2,r16,r17
 100b80c:	1000b126 	beq	r2,zero,100bad4 <___vfprintf_internal_r+0x1410>
 100b810:	d9814d17 	ldw	r6,1332(sp)
 100b814:	29400094 	ori	r5,r5,2
 100b818:	00800c04 	movi	r2,48
 100b81c:	01000084 	movi	r4,2
 100b820:	d9414c15 	stw	r5,1328(sp)
 100b824:	d8800445 	stb	r2,17(sp)
 100b828:	d9800485 	stb	r6,18(sp)
 100b82c:	d8000405 	stb	zero,16(sp)
 100b830:	003e3206 	br	100b0fc <___vfprintf_internal_r+0xa38>
 100b834:	018040b4 	movhi	r6,258
 100b838:	31bce804 	addi	r6,r6,-3168
 100b83c:	d9814415 	stw	r6,1296(sp)
 100b840:	003fe606 	br	100b7dc <___vfprintf_internal_r+0x1118>
 100b844:	00800ac4 	movi	r2,43
 100b848:	d8800405 	stb	r2,16(sp)
 100b84c:	b8c00007 	ldb	r3,0(r23)
 100b850:	003c1b06 	br	100a8c0 <___vfprintf_internal_r+0x1fc>
 100b854:	d8814c17 	ldw	r2,1328(sp)
 100b858:	b8c00007 	ldb	r3,0(r23)
 100b85c:	10800054 	ori	r2,r2,1
 100b860:	d8814c15 	stw	r2,1328(sp)
 100b864:	003c1606 	br	100a8c0 <___vfprintf_internal_r+0x1fc>
 100b868:	d8800407 	ldb	r2,16(sp)
 100b86c:	1000461e 	bne	r2,zero,100b988 <___vfprintf_internal_r+0x12c4>
 100b870:	00800804 	movi	r2,32
 100b874:	d8800405 	stb	r2,16(sp)
 100b878:	b8c00007 	ldb	r3,0(r23)
 100b87c:	003c1006 	br	100a8c0 <___vfprintf_internal_r+0x1fc>
 100b880:	d9814c17 	ldw	r6,1328(sp)
 100b884:	b8c00007 	ldb	r3,0(r23)
 100b888:	31800214 	ori	r6,r6,8
 100b88c:	d9814c15 	stw	r6,1328(sp)
 100b890:	003c0b06 	br	100a8c0 <___vfprintf_internal_r+0x1fc>
 100b894:	0007883a 	mov	r3,zero
 100b898:	01000244 	movi	r4,9
 100b89c:	188002a4 	muli	r2,r3,10
 100b8a0:	b8c00007 	ldb	r3,0(r23)
 100b8a4:	d9814d17 	ldw	r6,1332(sp)
 100b8a8:	bdc00044 	addi	r23,r23,1
 100b8ac:	d8c14d15 	stw	r3,1332(sp)
 100b8b0:	d9414d17 	ldw	r5,1332(sp)
 100b8b4:	3085883a 	add	r2,r6,r2
 100b8b8:	10fff404 	addi	r3,r2,-48
 100b8bc:	28bff404 	addi	r2,r5,-48
 100b8c0:	20bff62e 	bgeu	r4,r2,100b89c <___vfprintf_internal_r+0x11d8>
 100b8c4:	d8c14a15 	stw	r3,1320(sp)
 100b8c8:	003bff06 	br	100a8c8 <___vfprintf_internal_r+0x204>
 100b8cc:	d9414c17 	ldw	r5,1328(sp)
 100b8d0:	b8c00007 	ldb	r3,0(r23)
 100b8d4:	29402014 	ori	r5,r5,128
 100b8d8:	d9414c15 	stw	r5,1328(sp)
 100b8dc:	003bf806 	br	100a8c0 <___vfprintf_internal_r+0x1fc>
 100b8e0:	b8c00007 	ldb	r3,0(r23)
 100b8e4:	00800a84 	movi	r2,42
 100b8e8:	bdc00044 	addi	r23,r23,1
 100b8ec:	18831526 	beq	r3,r2,100c544 <___vfprintf_internal_r+0x1e80>
 100b8f0:	d8c14d15 	stw	r3,1332(sp)
 100b8f4:	18bff404 	addi	r2,r3,-48
 100b8f8:	00c00244 	movi	r3,9
 100b8fc:	18827836 	bltu	r3,r2,100c2e0 <___vfprintf_internal_r+0x1c1c>
 100b900:	000d883a 	mov	r6,zero
 100b904:	308002a4 	muli	r2,r6,10
 100b908:	b9800007 	ldb	r6,0(r23)
 100b90c:	d9414d17 	ldw	r5,1332(sp)
 100b910:	bdc00044 	addi	r23,r23,1
 100b914:	d9814d15 	stw	r6,1332(sp)
 100b918:	d9014d17 	ldw	r4,1332(sp)
 100b91c:	1145883a 	add	r2,r2,r5
 100b920:	11bff404 	addi	r6,r2,-48
 100b924:	20bff404 	addi	r2,r4,-48
 100b928:	18bff62e 	bgeu	r3,r2,100b904 <___vfprintf_internal_r+0x1240>
 100b92c:	3027883a 	mov	r19,r6
 100b930:	303be50e 	bge	r6,zero,100a8c8 <___vfprintf_internal_r+0x204>
 100b934:	04ffffc4 	movi	r19,-1
 100b938:	003be306 	br	100a8c8 <___vfprintf_internal_r+0x204>
 100b93c:	d8000405 	stb	zero,16(sp)
 100b940:	39800017 	ldw	r6,0(r7)
 100b944:	39c00104 	addi	r7,r7,4
 100b948:	d9c14015 	stw	r7,1280(sp)
 100b94c:	d9814115 	stw	r6,1284(sp)
 100b950:	3001c926 	beq	r6,zero,100c078 <___vfprintf_internal_r+0x19b4>
 100b954:	98000e16 	blt	r19,zero,100b990 <___vfprintf_internal_r+0x12cc>
 100b958:	d9014117 	ldw	r4,1284(sp)
 100b95c:	000b883a 	mov	r5,zero
 100b960:	980d883a 	mov	r6,r19
 100b964:	1009e500 	call	1009e50 <memchr>
 100b968:	10025926 	beq	r2,zero,100c2d0 <___vfprintf_internal_r+0x1c0c>
 100b96c:	d8c14117 	ldw	r3,1284(sp)
 100b970:	10cfc83a 	sub	r7,r2,r3
 100b974:	99c19e16 	blt	r19,r7,100bff0 <___vfprintf_internal_r+0x192c>
 100b978:	d9c14515 	stw	r7,1300(sp)
 100b97c:	38000916 	blt	r7,zero,100b9a4 <___vfprintf_internal_r+0x12e0>
 100b980:	d8014615 	stw	zero,1304(sp)
 100b984:	003df106 	br	100b14c <___vfprintf_internal_r+0xa88>
 100b988:	b8c00007 	ldb	r3,0(r23)
 100b98c:	003bcc06 	br	100a8c0 <___vfprintf_internal_r+0x1fc>
 100b990:	d9014117 	ldw	r4,1284(sp)
 100b994:	100a5f80 	call	100a5f8 <strlen>
 100b998:	d8814515 	stw	r2,1300(sp)
 100b99c:	100f883a 	mov	r7,r2
 100b9a0:	103ff70e 	bge	r2,zero,100b980 <___vfprintf_internal_r+0x12bc>
 100b9a4:	d8014515 	stw	zero,1300(sp)
 100b9a8:	d8014615 	stw	zero,1304(sp)
 100b9ac:	003de706 	br	100b14c <___vfprintf_internal_r+0xa88>
 100b9b0:	20c03fcc 	andi	r3,r4,255
 100b9b4:	00800044 	movi	r2,1
 100b9b8:	18802d26 	beq	r3,r2,100ba70 <___vfprintf_internal_r+0x13ac>
 100b9bc:	18800e36 	bltu	r3,r2,100b9f8 <___vfprintf_internal_r+0x1334>
 100b9c0:	00800084 	movi	r2,2
 100b9c4:	1880fa26 	beq	r3,r2,100bdb0 <___vfprintf_internal_r+0x16ec>
 100b9c8:	010040b4 	movhi	r4,258
 100b9cc:	213cf804 	addi	r4,r4,-3104
 100b9d0:	100a5f80 	call	100a5f8 <strlen>
 100b9d4:	100f883a 	mov	r7,r2
 100b9d8:	dcc14515 	stw	r19,1300(sp)
 100b9dc:	9880010e 	bge	r19,r2,100b9e4 <___vfprintf_internal_r+0x1320>
 100b9e0:	d8814515 	stw	r2,1300(sp)
 100b9e4:	008040b4 	movhi	r2,258
 100b9e8:	10bcf804 	addi	r2,r2,-3104
 100b9ec:	dcc14615 	stw	r19,1304(sp)
 100b9f0:	d8814115 	stw	r2,1284(sp)
 100b9f4:	003dd506 	br	100b14c <___vfprintf_internal_r+0xa88>
 100b9f8:	d9401904 	addi	r5,sp,100
 100b9fc:	dd000f04 	addi	r20,sp,60
 100ba00:	d9414115 	stw	r5,1284(sp)
 100ba04:	880a977a 	slli	r5,r17,29
 100ba08:	d9814117 	ldw	r6,1284(sp)
 100ba0c:	8004d0fa 	srli	r2,r16,3
 100ba10:	8806d0fa 	srli	r3,r17,3
 100ba14:	810001cc 	andi	r4,r16,7
 100ba18:	2884b03a 	or	r2,r5,r2
 100ba1c:	31bfffc4 	addi	r6,r6,-1
 100ba20:	21000c04 	addi	r4,r4,48
 100ba24:	d9814115 	stw	r6,1284(sp)
 100ba28:	10cab03a 	or	r5,r2,r3
 100ba2c:	31000005 	stb	r4,0(r6)
 100ba30:	1021883a 	mov	r16,r2
 100ba34:	1823883a 	mov	r17,r3
 100ba38:	283ff21e 	bne	r5,zero,100ba04 <___vfprintf_internal_r+0x1340>
 100ba3c:	d8c14c17 	ldw	r3,1328(sp)
 100ba40:	1880004c 	andi	r2,r3,1
 100ba44:	1005003a 	cmpeq	r2,r2,zero
 100ba48:	103db91e 	bne	r2,zero,100b130 <___vfprintf_internal_r+0xa6c>
 100ba4c:	20803fcc 	andi	r2,r4,255
 100ba50:	1080201c 	xori	r2,r2,128
 100ba54:	10bfe004 	addi	r2,r2,-128
 100ba58:	00c00c04 	movi	r3,48
 100ba5c:	10fdb426 	beq	r2,r3,100b130 <___vfprintf_internal_r+0xa6c>
 100ba60:	31bfffc4 	addi	r6,r6,-1
 100ba64:	d9814115 	stw	r6,1284(sp)
 100ba68:	30c00005 	stb	r3,0(r6)
 100ba6c:	003db006 	br	100b130 <___vfprintf_internal_r+0xa6c>
 100ba70:	88800068 	cmpgeui	r2,r17,1
 100ba74:	10002c1e 	bne	r2,zero,100bb28 <___vfprintf_internal_r+0x1464>
 100ba78:	8800021e 	bne	r17,zero,100ba84 <___vfprintf_internal_r+0x13c0>
 100ba7c:	00800244 	movi	r2,9
 100ba80:	14002936 	bltu	r2,r16,100bb28 <___vfprintf_internal_r+0x1464>
 100ba84:	d90018c4 	addi	r4,sp,99
 100ba88:	dd000f04 	addi	r20,sp,60
 100ba8c:	d9014115 	stw	r4,1284(sp)
 100ba90:	d9014117 	ldw	r4,1284(sp)
 100ba94:	80800c04 	addi	r2,r16,48
 100ba98:	20800005 	stb	r2,0(r4)
 100ba9c:	003da406 	br	100b130 <___vfprintf_internal_r+0xa6c>
 100baa0:	dc400d17 	ldw	r17,52(sp)
 100baa4:	070040b4 	movhi	fp,258
 100baa8:	e73cff84 	addi	fp,fp,-3074
 100baac:	9425883a 	add	r18,r18,r16
 100bab0:	8c400044 	addi	r17,r17,1
 100bab4:	008001c4 	movi	r2,7
 100bab8:	1f000015 	stw	fp,0(r3)
 100babc:	1c000115 	stw	r16,4(r3)
 100bac0:	dc800e15 	stw	r18,56(sp)
 100bac4:	dc400d15 	stw	r17,52(sp)
 100bac8:	147de216 	blt	r2,r17,100b254 <___vfprintf_internal_r+0xb90>
 100bacc:	18c00204 	addi	r3,r3,8
 100bad0:	003c7a06 	br	100acbc <___vfprintf_internal_r+0x5f8>
 100bad4:	01000084 	movi	r4,2
 100bad8:	d8000405 	stb	zero,16(sp)
 100badc:	003d8706 	br	100b0fc <___vfprintf_internal_r+0xa38>
 100bae0:	d9814c17 	ldw	r6,1328(sp)
 100bae4:	30c4703a 	and	r2,r6,r3
 100bae8:	1005003a 	cmpeq	r2,r2,zero
 100baec:	103cb926 	beq	r2,zero,100add4 <___vfprintf_internal_r+0x710>
 100baf0:	d9014117 	ldw	r4,1284(sp)
 100baf4:	94800044 	addi	r18,r18,1
 100baf8:	8c400044 	addi	r17,r17,1
 100bafc:	008001c4 	movi	r2,7
 100bb00:	a9000015 	stw	r4,0(r21)
 100bb04:	a8c00115 	stw	r3,4(r21)
 100bb08:	dc800e15 	stw	r18,56(sp)
 100bb0c:	dc400d15 	stw	r17,52(sp)
 100bb10:	147e6616 	blt	r2,r17,100b4ac <___vfprintf_internal_r+0xde8>
 100bb14:	acc00204 	addi	r19,r21,8
 100bb18:	003cd706 	br	100ae78 <___vfprintf_internal_r+0x7b4>
 100bb1c:	070040b4 	movhi	fp,258
 100bb20:	e73cff84 	addi	fp,fp,-3074
 100bb24:	003c4f06 	br	100ac64 <___vfprintf_internal_r+0x5a0>
 100bb28:	dd000f04 	addi	r20,sp,60
 100bb2c:	dc801904 	addi	r18,sp,100
 100bb30:	8009883a 	mov	r4,r16
 100bb34:	880b883a 	mov	r5,r17
 100bb38:	01800284 	movi	r6,10
 100bb3c:	000f883a 	mov	r7,zero
 100bb40:	10113100 	call	1011310 <__umoddi3>
 100bb44:	12000c04 	addi	r8,r2,48
 100bb48:	94bfffc4 	addi	r18,r18,-1
 100bb4c:	8009883a 	mov	r4,r16
 100bb50:	880b883a 	mov	r5,r17
 100bb54:	01800284 	movi	r6,10
 100bb58:	000f883a 	mov	r7,zero
 100bb5c:	92000005 	stb	r8,0(r18)
 100bb60:	1010d340 	call	1010d34 <__udivdi3>
 100bb64:	1009883a 	mov	r4,r2
 100bb68:	1021883a 	mov	r16,r2
 100bb6c:	18800068 	cmpgeui	r2,r3,1
 100bb70:	1823883a 	mov	r17,r3
 100bb74:	103fee1e 	bne	r2,zero,100bb30 <___vfprintf_internal_r+0x146c>
 100bb78:	1800021e 	bne	r3,zero,100bb84 <___vfprintf_internal_r+0x14c0>
 100bb7c:	00800244 	movi	r2,9
 100bb80:	113feb36 	bltu	r2,r4,100bb30 <___vfprintf_internal_r+0x146c>
 100bb84:	94bfffc4 	addi	r18,r18,-1
 100bb88:	dc814115 	stw	r18,1284(sp)
 100bb8c:	003fc006 	br	100ba90 <___vfprintf_internal_r+0x13cc>
 100bb90:	d9014c17 	ldw	r4,1328(sp)
 100bb94:	2080004c 	andi	r2,r4,1
 100bb98:	10009a1e 	bne	r2,zero,100be04 <___vfprintf_internal_r+0x1740>
 100bb9c:	d9401904 	addi	r5,sp,100
 100bba0:	dd000f04 	addi	r20,sp,60
 100bba4:	d9414115 	stw	r5,1284(sp)
 100bba8:	003d6106 	br	100b130 <___vfprintf_internal_r+0xa6c>
 100bbac:	d9014f17 	ldw	r4,1340(sp)
 100bbb0:	b00b883a 	mov	r5,r22
 100bbb4:	d9800c04 	addi	r6,sp,48
 100bbb8:	100a66c0 	call	100a66c <__sprint_r>
 100bbbc:	103c791e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100bbc0:	dc800e17 	ldw	r18,56(sp)
 100bbc4:	d8c01904 	addi	r3,sp,100
 100bbc8:	003cff06 	br	100afc8 <___vfprintf_internal_r+0x904>
 100bbcc:	d8c14c17 	ldw	r3,1328(sp)
 100bbd0:	1880040c 	andi	r2,r3,16
 100bbd4:	1000711e 	bne	r2,zero,100bd9c <___vfprintf_internal_r+0x16d8>
 100bbd8:	d9014c17 	ldw	r4,1328(sp)
 100bbdc:	2080100c 	andi	r2,r4,64
 100bbe0:	10006e26 	beq	r2,zero,100bd9c <___vfprintf_internal_r+0x16d8>
 100bbe4:	3c00000b 	ldhu	r16,0(r7)
 100bbe8:	0023883a 	mov	r17,zero
 100bbec:	39c00104 	addi	r7,r7,4
 100bbf0:	d9c14015 	stw	r7,1280(sp)
 100bbf4:	003f0006 	br	100b7f8 <___vfprintf_internal_r+0x1134>
 100bbf8:	dc400d17 	ldw	r17,52(sp)
 100bbfc:	070040b4 	movhi	fp,258
 100bc00:	e73cff84 	addi	fp,fp,-3074
 100bc04:	9425883a 	add	r18,r18,r16
 100bc08:	8c400044 	addi	r17,r17,1
 100bc0c:	008001c4 	movi	r2,7
 100bc10:	1f000015 	stw	fp,0(r3)
 100bc14:	1c000115 	stw	r16,4(r3)
 100bc18:	dc800e15 	stw	r18,56(sp)
 100bc1c:	dc400d15 	stw	r17,52(sp)
 100bc20:	147d7616 	blt	r2,r17,100b1fc <___vfprintf_internal_r+0xb38>
 100bc24:	18c00204 	addi	r3,r3,8
 100bc28:	003d7b06 	br	100b218 <___vfprintf_internal_r+0xb54>
 100bc2c:	dc800e17 	ldw	r18,56(sp)
 100bc30:	dc400d17 	ldw	r17,52(sp)
 100bc34:	070040b4 	movhi	fp,258
 100bc38:	e73d0384 	addi	fp,fp,-3058
 100bc3c:	003bc006 	br	100ab40 <___vfprintf_internal_r+0x47c>
 100bc40:	d9014f17 	ldw	r4,1340(sp)
 100bc44:	b00b883a 	mov	r5,r22
 100bc48:	d9800c04 	addi	r6,sp,48
 100bc4c:	100a66c0 	call	100a66c <__sprint_r>
 100bc50:	103c541e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100bc54:	dc800e17 	ldw	r18,56(sp)
 100bc58:	d8c01904 	addi	r3,sp,100
 100bc5c:	003ce906 	br	100b004 <___vfprintf_internal_r+0x940>
 100bc60:	3c000017 	ldw	r16,0(r7)
 100bc64:	0009883a 	mov	r4,zero
 100bc68:	39c00104 	addi	r7,r7,4
 100bc6c:	0023883a 	mov	r17,zero
 100bc70:	d9c14015 	stw	r7,1280(sp)
 100bc74:	d8000405 	stb	zero,16(sp)
 100bc78:	003d2006 	br	100b0fc <___vfprintf_internal_r+0xa38>
 100bc7c:	38800017 	ldw	r2,0(r7)
 100bc80:	39c00104 	addi	r7,r7,4
 100bc84:	d9c14015 	stw	r7,1280(sp)
 100bc88:	1023d7fa 	srai	r17,r2,31
 100bc8c:	1021883a 	mov	r16,r2
 100bc90:	003d1806 	br	100b0f4 <___vfprintf_internal_r+0xa30>
 100bc94:	3c000017 	ldw	r16,0(r7)
 100bc98:	01000044 	movi	r4,1
 100bc9c:	39c00104 	addi	r7,r7,4
 100bca0:	0023883a 	mov	r17,zero
 100bca4:	d9c14015 	stw	r7,1280(sp)
 100bca8:	d8000405 	stb	zero,16(sp)
 100bcac:	003d1306 	br	100b0fc <___vfprintf_internal_r+0xa38>
 100bcb0:	008040b4 	movhi	r2,258
 100bcb4:	10bcff04 	addi	r2,r2,-3076
 100bcb8:	94800044 	addi	r18,r18,1
 100bcbc:	8c400044 	addi	r17,r17,1
 100bcc0:	a8800015 	stw	r2,0(r21)
 100bcc4:	00c00044 	movi	r3,1
 100bcc8:	008001c4 	movi	r2,7
 100bccc:	a8c00115 	stw	r3,4(r21)
 100bcd0:	dc800e15 	stw	r18,56(sp)
 100bcd4:	dc400d15 	stw	r17,52(sp)
 100bcd8:	1440ca16 	blt	r2,r17,100c004 <___vfprintf_internal_r+0x1940>
 100bcdc:	a8c00204 	addi	r3,r21,8
 100bce0:	2000061e 	bne	r4,zero,100bcfc <___vfprintf_internal_r+0x1638>
 100bce4:	d9414717 	ldw	r5,1308(sp)
 100bce8:	2800041e 	bne	r5,zero,100bcfc <___vfprintf_internal_r+0x1638>
 100bcec:	d9814c17 	ldw	r6,1328(sp)
 100bcf0:	3080004c 	andi	r2,r6,1
 100bcf4:	1005003a 	cmpeq	r2,r2,zero
 100bcf8:	103bf01e 	bne	r2,zero,100acbc <___vfprintf_internal_r+0x5f8>
 100bcfc:	00800044 	movi	r2,1
 100bd00:	dc400d17 	ldw	r17,52(sp)
 100bd04:	18800115 	stw	r2,4(r3)
 100bd08:	d8814917 	ldw	r2,1316(sp)
 100bd0c:	94800044 	addi	r18,r18,1
 100bd10:	8c400044 	addi	r17,r17,1
 100bd14:	18800015 	stw	r2,0(r3)
 100bd18:	008001c4 	movi	r2,7
 100bd1c:	dc800e15 	stw	r18,56(sp)
 100bd20:	dc400d15 	stw	r17,52(sp)
 100bd24:	1440ca16 	blt	r2,r17,100c050 <___vfprintf_internal_r+0x198c>
 100bd28:	18c00204 	addi	r3,r3,8
 100bd2c:	0121c83a 	sub	r16,zero,r4
 100bd30:	0400500e 	bge	zero,r16,100be74 <___vfprintf_internal_r+0x17b0>
 100bd34:	00800404 	movi	r2,16
 100bd38:	1400800e 	bge	r2,r16,100bf3c <___vfprintf_internal_r+0x1878>
 100bd3c:	1027883a 	mov	r19,r2
 100bd40:	070040b4 	movhi	fp,258
 100bd44:	e73cff84 	addi	fp,fp,-3074
 100bd48:	050001c4 	movi	r20,7
 100bd4c:	00000306 	br	100bd5c <___vfprintf_internal_r+0x1698>
 100bd50:	18c00204 	addi	r3,r3,8
 100bd54:	843ffc04 	addi	r16,r16,-16
 100bd58:	9c007a0e 	bge	r19,r16,100bf44 <___vfprintf_internal_r+0x1880>
 100bd5c:	94800404 	addi	r18,r18,16
 100bd60:	8c400044 	addi	r17,r17,1
 100bd64:	1f000015 	stw	fp,0(r3)
 100bd68:	1cc00115 	stw	r19,4(r3)
 100bd6c:	dc800e15 	stw	r18,56(sp)
 100bd70:	dc400d15 	stw	r17,52(sp)
 100bd74:	a47ff60e 	bge	r20,r17,100bd50 <___vfprintf_internal_r+0x168c>
 100bd78:	d9014f17 	ldw	r4,1340(sp)
 100bd7c:	b00b883a 	mov	r5,r22
 100bd80:	d9800c04 	addi	r6,sp,48
 100bd84:	100a66c0 	call	100a66c <__sprint_r>
 100bd88:	103c061e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100bd8c:	dc800e17 	ldw	r18,56(sp)
 100bd90:	dc400d17 	ldw	r17,52(sp)
 100bd94:	d8c01904 	addi	r3,sp,100
 100bd98:	003fee06 	br	100bd54 <___vfprintf_internal_r+0x1690>
 100bd9c:	3c000017 	ldw	r16,0(r7)
 100bda0:	0023883a 	mov	r17,zero
 100bda4:	39c00104 	addi	r7,r7,4
 100bda8:	d9c14015 	stw	r7,1280(sp)
 100bdac:	003e9206 	br	100b7f8 <___vfprintf_internal_r+0x1134>
 100bdb0:	d9401904 	addi	r5,sp,100
 100bdb4:	dd000f04 	addi	r20,sp,60
 100bdb8:	d9414115 	stw	r5,1284(sp)
 100bdbc:	d9814417 	ldw	r6,1296(sp)
 100bdc0:	880a973a 	slli	r5,r17,28
 100bdc4:	8004d13a 	srli	r2,r16,4
 100bdc8:	810003cc 	andi	r4,r16,15
 100bdcc:	3109883a 	add	r4,r6,r4
 100bdd0:	2884b03a 	or	r2,r5,r2
 100bdd4:	21400003 	ldbu	r5,0(r4)
 100bdd8:	d9014117 	ldw	r4,1284(sp)
 100bddc:	8806d13a 	srli	r3,r17,4
 100bde0:	1021883a 	mov	r16,r2
 100bde4:	213fffc4 	addi	r4,r4,-1
 100bde8:	d9014115 	stw	r4,1284(sp)
 100bdec:	d9814117 	ldw	r6,1284(sp)
 100bdf0:	10c8b03a 	or	r4,r2,r3
 100bdf4:	1823883a 	mov	r17,r3
 100bdf8:	31400005 	stb	r5,0(r6)
 100bdfc:	203fef1e 	bne	r4,zero,100bdbc <___vfprintf_internal_r+0x16f8>
 100be00:	003ccb06 	br	100b130 <___vfprintf_internal_r+0xa6c>
 100be04:	00800c04 	movi	r2,48
 100be08:	d98018c4 	addi	r6,sp,99
 100be0c:	dd000f04 	addi	r20,sp,60
 100be10:	d88018c5 	stb	r2,99(sp)
 100be14:	d9814115 	stw	r6,1284(sp)
 100be18:	003cc506 	br	100b130 <___vfprintf_internal_r+0xa6c>
 100be1c:	dc400d17 	ldw	r17,52(sp)
 100be20:	070040b4 	movhi	fp,258
 100be24:	e73d0384 	addi	fp,fp,-3058
 100be28:	003bc706 	br	100ad48 <___vfprintf_internal_r+0x684>
 100be2c:	d9414c17 	ldw	r5,1328(sp)
 100be30:	2880040c 	andi	r2,r5,16
 100be34:	10007c26 	beq	r2,zero,100c028 <___vfprintf_internal_r+0x1964>
 100be38:	38800017 	ldw	r2,0(r7)
 100be3c:	39c00104 	addi	r7,r7,4
 100be40:	d9c14015 	stw	r7,1280(sp)
 100be44:	d9814b17 	ldw	r6,1324(sp)
 100be48:	d9c14017 	ldw	r7,1280(sp)
 100be4c:	11800015 	stw	r6,0(r2)
 100be50:	003a7806 	br	100a834 <___vfprintf_internal_r+0x170>
 100be54:	d9014f17 	ldw	r4,1340(sp)
 100be58:	b00b883a 	mov	r5,r22
 100be5c:	d9800c04 	addi	r6,sp,48
 100be60:	100a66c0 	call	100a66c <__sprint_r>
 100be64:	103bcf1e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100be68:	dc800e17 	ldw	r18,56(sp)
 100be6c:	dc400d17 	ldw	r17,52(sp)
 100be70:	d8c01904 	addi	r3,sp,100
 100be74:	d9014717 	ldw	r4,1308(sp)
 100be78:	d9414117 	ldw	r5,1284(sp)
 100be7c:	8c400044 	addi	r17,r17,1
 100be80:	9125883a 	add	r18,r18,r4
 100be84:	008001c4 	movi	r2,7
 100be88:	19400015 	stw	r5,0(r3)
 100be8c:	19000115 	stw	r4,4(r3)
 100be90:	dc800e15 	stw	r18,56(sp)
 100be94:	dc400d15 	stw	r17,52(sp)
 100be98:	147cee16 	blt	r2,r17,100b254 <___vfprintf_internal_r+0xb90>
 100be9c:	18c00204 	addi	r3,r3,8
 100bea0:	003b8606 	br	100acbc <___vfprintf_internal_r+0x5f8>
 100bea4:	38c00017 	ldw	r3,0(r7)
 100bea8:	39000204 	addi	r4,r7,8
 100beac:	d9014015 	stw	r4,1280(sp)
 100beb0:	d8c14215 	stw	r3,1288(sp)
 100beb4:	39c00117 	ldw	r7,4(r7)
 100beb8:	d9c14315 	stw	r7,1292(sp)
 100bebc:	003e2006 	br	100b740 <___vfprintf_internal_r+0x107c>
 100bec0:	0005883a 	mov	r2,zero
 100bec4:	1409c83a 	sub	r4,r2,r16
 100bec8:	1105803a 	cmpltu	r2,r2,r4
 100becc:	044bc83a 	sub	r5,zero,r17
 100bed0:	2885c83a 	sub	r2,r5,r2
 100bed4:	2021883a 	mov	r16,r4
 100bed8:	1023883a 	mov	r17,r2
 100bedc:	01000044 	movi	r4,1
 100bee0:	00800b44 	movi	r2,45
 100bee4:	d8800405 	stb	r2,16(sp)
 100bee8:	003c8406 	br	100b0fc <___vfprintf_internal_r+0xa38>
 100beec:	d9014f17 	ldw	r4,1340(sp)
 100bef0:	b00b883a 	mov	r5,r22
 100bef4:	d9800c04 	addi	r6,sp,48
 100bef8:	100a66c0 	call	100a66c <__sprint_r>
 100befc:	103ba91e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100bf00:	dc800e17 	ldw	r18,56(sp)
 100bf04:	dc400d17 	ldw	r17,52(sp)
 100bf08:	d9000517 	ldw	r4,20(sp)
 100bf0c:	d9401904 	addi	r5,sp,100
 100bf10:	003da706 	br	100b5b0 <___vfprintf_internal_r+0xeec>
 100bf14:	d9014f17 	ldw	r4,1340(sp)
 100bf18:	b00b883a 	mov	r5,r22
 100bf1c:	d9800c04 	addi	r6,sp,48
 100bf20:	100a66c0 	call	100a66c <__sprint_r>
 100bf24:	103b9f1e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100bf28:	dc800e17 	ldw	r18,56(sp)
 100bf2c:	dc400d17 	ldw	r17,52(sp)
 100bf30:	d9000517 	ldw	r4,20(sp)
 100bf34:	d8c01904 	addi	r3,sp,100
 100bf38:	003d9106 	br	100b580 <___vfprintf_internal_r+0xebc>
 100bf3c:	070040b4 	movhi	fp,258
 100bf40:	e73cff84 	addi	fp,fp,-3074
 100bf44:	9425883a 	add	r18,r18,r16
 100bf48:	8c400044 	addi	r17,r17,1
 100bf4c:	008001c4 	movi	r2,7
 100bf50:	1f000015 	stw	fp,0(r3)
 100bf54:	1c000115 	stw	r16,4(r3)
 100bf58:	dc800e15 	stw	r18,56(sp)
 100bf5c:	dc400d15 	stw	r17,52(sp)
 100bf60:	147fbc16 	blt	r2,r17,100be54 <___vfprintf_internal_r+0x1790>
 100bf64:	18c00204 	addi	r3,r3,8
 100bf68:	003fc206 	br	100be74 <___vfprintf_internal_r+0x17b0>
 100bf6c:	d9014f17 	ldw	r4,1340(sp)
 100bf70:	b00b883a 	mov	r5,r22
 100bf74:	d9800c04 	addi	r6,sp,48
 100bf78:	100a66c0 	call	100a66c <__sprint_r>
 100bf7c:	103b891e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100bf80:	dc800e17 	ldw	r18,56(sp)
 100bf84:	d9000517 	ldw	r4,20(sp)
 100bf88:	d8c01904 	addi	r3,sp,100
 100bf8c:	003d0206 	br	100b398 <___vfprintf_internal_r+0xcd4>
 100bf90:	070040b4 	movhi	fp,258
 100bf94:	e73cff84 	addi	fp,fp,-3074
 100bf98:	003be406 	br	100af2c <___vfprintf_internal_r+0x868>
 100bf9c:	008040b4 	movhi	r2,258
 100bfa0:	10bcee04 	addi	r2,r2,-3144
 100bfa4:	d8814115 	stw	r2,1284(sp)
 100bfa8:	003df506 	br	100b780 <___vfprintf_internal_r+0x10bc>
 100bfac:	d9014217 	ldw	r4,1288(sp)
 100bfb0:	d9414317 	ldw	r5,1292(sp)
 100bfb4:	10106680 	call	1010668 <__isnand>
 100bfb8:	10003926 	beq	r2,zero,100c0a0 <___vfprintf_internal_r+0x19dc>
 100bfbc:	d9414d17 	ldw	r5,1332(sp)
 100bfc0:	008011c4 	movi	r2,71
 100bfc4:	1140ce16 	blt	r2,r5,100c300 <___vfprintf_internal_r+0x1c3c>
 100bfc8:	018040b4 	movhi	r6,258
 100bfcc:	31bcef04 	addi	r6,r6,-3140
 100bfd0:	d9814115 	stw	r6,1284(sp)
 100bfd4:	003dea06 	br	100b780 <___vfprintf_internal_r+0x10bc>
 100bfd8:	d9014c17 	ldw	r4,1328(sp)
 100bfdc:	bdc00044 	addi	r23,r23,1
 100bfe0:	b8c00007 	ldb	r3,0(r23)
 100bfe4:	21000814 	ori	r4,r4,32
 100bfe8:	d9014c15 	stw	r4,1328(sp)
 100bfec:	003a3406 	br	100a8c0 <___vfprintf_internal_r+0x1fc>
 100bff0:	dcc14515 	stw	r19,1300(sp)
 100bff4:	98011016 	blt	r19,zero,100c438 <___vfprintf_internal_r+0x1d74>
 100bff8:	980f883a 	mov	r7,r19
 100bffc:	d8014615 	stw	zero,1304(sp)
 100c000:	003c5206 	br	100b14c <___vfprintf_internal_r+0xa88>
 100c004:	d9014f17 	ldw	r4,1340(sp)
 100c008:	b00b883a 	mov	r5,r22
 100c00c:	d9800c04 	addi	r6,sp,48
 100c010:	100a66c0 	call	100a66c <__sprint_r>
 100c014:	103b631e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100c018:	dc800e17 	ldw	r18,56(sp)
 100c01c:	d9000517 	ldw	r4,20(sp)
 100c020:	d8c01904 	addi	r3,sp,100
 100c024:	003f2e06 	br	100bce0 <___vfprintf_internal_r+0x161c>
 100c028:	d8c14c17 	ldw	r3,1328(sp)
 100c02c:	1880100c 	andi	r2,r3,64
 100c030:	1000a026 	beq	r2,zero,100c2b4 <___vfprintf_internal_r+0x1bf0>
 100c034:	38800017 	ldw	r2,0(r7)
 100c038:	39c00104 	addi	r7,r7,4
 100c03c:	d9c14015 	stw	r7,1280(sp)
 100c040:	d9014b17 	ldw	r4,1324(sp)
 100c044:	d9c14017 	ldw	r7,1280(sp)
 100c048:	1100000d 	sth	r4,0(r2)
 100c04c:	0039f906 	br	100a834 <___vfprintf_internal_r+0x170>
 100c050:	d9014f17 	ldw	r4,1340(sp)
 100c054:	b00b883a 	mov	r5,r22
 100c058:	d9800c04 	addi	r6,sp,48
 100c05c:	100a66c0 	call	100a66c <__sprint_r>
 100c060:	103b501e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100c064:	dc800e17 	ldw	r18,56(sp)
 100c068:	dc400d17 	ldw	r17,52(sp)
 100c06c:	d9000517 	ldw	r4,20(sp)
 100c070:	d8c01904 	addi	r3,sp,100
 100c074:	003f2d06 	br	100bd2c <___vfprintf_internal_r+0x1668>
 100c078:	00800184 	movi	r2,6
 100c07c:	14c09a36 	bltu	r2,r19,100c2e8 <___vfprintf_internal_r+0x1c24>
 100c080:	dcc14515 	stw	r19,1300(sp)
 100c084:	9800010e 	bge	r19,zero,100c08c <___vfprintf_internal_r+0x19c8>
 100c088:	d8014515 	stw	zero,1300(sp)
 100c08c:	008040b4 	movhi	r2,258
 100c090:	10bcf104 	addi	r2,r2,-3132
 100c094:	980f883a 	mov	r7,r19
 100c098:	d8814115 	stw	r2,1284(sp)
 100c09c:	003a7806 	br	100aa80 <___vfprintf_internal_r+0x3bc>
 100c0a0:	00bfffc4 	movi	r2,-1
 100c0a4:	9880e226 	beq	r19,r2,100c430 <___vfprintf_internal_r+0x1d6c>
 100c0a8:	d9414d17 	ldw	r5,1332(sp)
 100c0ac:	008019c4 	movi	r2,103
 100c0b0:	2880dc26 	beq	r5,r2,100c424 <___vfprintf_internal_r+0x1d60>
 100c0b4:	008011c4 	movi	r2,71
 100c0b8:	2880da26 	beq	r5,r2,100c424 <___vfprintf_internal_r+0x1d60>
 100c0bc:	d9414c17 	ldw	r5,1328(sp)
 100c0c0:	d9014317 	ldw	r4,1292(sp)
 100c0c4:	d9814217 	ldw	r6,1288(sp)
 100c0c8:	29404014 	ori	r5,r5,256
 100c0cc:	d9414c15 	stw	r5,1328(sp)
 100c0d0:	2000cc16 	blt	r4,zero,100c404 <___vfprintf_internal_r+0x1d40>
 100c0d4:	3021883a 	mov	r16,r6
 100c0d8:	2023883a 	mov	r17,r4
 100c0dc:	0039883a 	mov	fp,zero
 100c0e0:	d9414d17 	ldw	r5,1332(sp)
 100c0e4:	00801984 	movi	r2,102
 100c0e8:	2880b726 	beq	r5,r2,100c3c8 <___vfprintf_internal_r+0x1d04>
 100c0ec:	00801184 	movi	r2,70
 100c0f0:	2880b526 	beq	r5,r2,100c3c8 <___vfprintf_internal_r+0x1d04>
 100c0f4:	00801944 	movi	r2,101
 100c0f8:	2880c826 	beq	r5,r2,100c41c <___vfprintf_internal_r+0x1d58>
 100c0fc:	00801144 	movi	r2,69
 100c100:	2880c626 	beq	r5,r2,100c41c <___vfprintf_internal_r+0x1d58>
 100c104:	9829883a 	mov	r20,r19
 100c108:	d9014f17 	ldw	r4,1340(sp)
 100c10c:	d8800504 	addi	r2,sp,20
 100c110:	880d883a 	mov	r6,r17
 100c114:	d8800115 	stw	r2,4(sp)
 100c118:	d8c00604 	addi	r3,sp,24
 100c11c:	d8800704 	addi	r2,sp,28
 100c120:	800b883a 	mov	r5,r16
 100c124:	01c00084 	movi	r7,2
 100c128:	d8c00215 	stw	r3,8(sp)
 100c12c:	d8800315 	stw	r2,12(sp)
 100c130:	dd000015 	stw	r20,0(sp)
 100c134:	100c8e80 	call	100c8e8 <_dtoa_r>
 100c138:	d9814d17 	ldw	r6,1332(sp)
 100c13c:	d8814115 	stw	r2,1284(sp)
 100c140:	008019c4 	movi	r2,103
 100c144:	30809526 	beq	r6,r2,100c39c <___vfprintf_internal_r+0x1cd8>
 100c148:	d8c14d17 	ldw	r3,1332(sp)
 100c14c:	008011c4 	movi	r2,71
 100c150:	18809226 	beq	r3,r2,100c39c <___vfprintf_internal_r+0x1cd8>
 100c154:	d9414117 	ldw	r5,1284(sp)
 100c158:	d9814d17 	ldw	r6,1332(sp)
 100c15c:	00801984 	movi	r2,102
 100c160:	2d25883a 	add	r18,r5,r20
 100c164:	30808626 	beq	r6,r2,100c380 <___vfprintf_internal_r+0x1cbc>
 100c168:	00801184 	movi	r2,70
 100c16c:	30808426 	beq	r6,r2,100c380 <___vfprintf_internal_r+0x1cbc>
 100c170:	000d883a 	mov	r6,zero
 100c174:	000f883a 	mov	r7,zero
 100c178:	880b883a 	mov	r5,r17
 100c17c:	8009883a 	mov	r4,r16
 100c180:	10123e00 	call	10123e0 <__eqdf2>
 100c184:	1000751e 	bne	r2,zero,100c35c <___vfprintf_internal_r+0x1c98>
 100c188:	9005883a 	mov	r2,r18
 100c18c:	dc800715 	stw	r18,28(sp)
 100c190:	d9014117 	ldw	r4,1284(sp)
 100c194:	d9414d17 	ldw	r5,1332(sp)
 100c198:	00c019c4 	movi	r3,103
 100c19c:	1125c83a 	sub	r18,r2,r4
 100c1a0:	28c06826 	beq	r5,r3,100c344 <___vfprintf_internal_r+0x1c80>
 100c1a4:	008011c4 	movi	r2,71
 100c1a8:	28806626 	beq	r5,r2,100c344 <___vfprintf_internal_r+0x1c80>
 100c1ac:	d9000517 	ldw	r4,20(sp)
 100c1b0:	d8c14d17 	ldw	r3,1332(sp)
 100c1b4:	00801944 	movi	r2,101
 100c1b8:	10c05516 	blt	r2,r3,100c310 <___vfprintf_internal_r+0x1c4c>
 100c1bc:	213fffc4 	addi	r4,r4,-1
 100c1c0:	d9000515 	stw	r4,20(sp)
 100c1c4:	d8c00805 	stb	r3,32(sp)
 100c1c8:	2021883a 	mov	r16,r4
 100c1cc:	2000c116 	blt	r4,zero,100c4d4 <___vfprintf_internal_r+0x1e10>
 100c1d0:	00800ac4 	movi	r2,43
 100c1d4:	d8800845 	stb	r2,33(sp)
 100c1d8:	00800244 	movi	r2,9
 100c1dc:	1400af0e 	bge	r2,r16,100c49c <___vfprintf_internal_r+0x1dd8>
 100c1e0:	1027883a 	mov	r19,r2
 100c1e4:	dc400b84 	addi	r17,sp,46
 100c1e8:	8009883a 	mov	r4,r16
 100c1ec:	01400284 	movi	r5,10
 100c1f0:	1012ac80 	call	1012ac8 <__modsi3>
 100c1f4:	10800c04 	addi	r2,r2,48
 100c1f8:	8c7fffc4 	addi	r17,r17,-1
 100c1fc:	8009883a 	mov	r4,r16
 100c200:	01400284 	movi	r5,10
 100c204:	88800005 	stb	r2,0(r17)
 100c208:	1012a680 	call	1012a68 <__divsi3>
 100c20c:	1021883a 	mov	r16,r2
 100c210:	98bff516 	blt	r19,r2,100c1e8 <___vfprintf_internal_r+0x1b24>
 100c214:	10c00c04 	addi	r3,r2,48
 100c218:	d88009c4 	addi	r2,sp,39
 100c21c:	108001c4 	addi	r2,r2,7
 100c220:	897fffc4 	addi	r5,r17,-1
 100c224:	88ffffc5 	stb	r3,-1(r17)
 100c228:	2880a72e 	bgeu	r5,r2,100c4c8 <___vfprintf_internal_r+0x1e04>
 100c22c:	1009883a 	mov	r4,r2
 100c230:	d9800804 	addi	r6,sp,32
 100c234:	d8c00884 	addi	r3,sp,34
 100c238:	28800003 	ldbu	r2,0(r5)
 100c23c:	29400044 	addi	r5,r5,1
 100c240:	18800005 	stb	r2,0(r3)
 100c244:	18c00044 	addi	r3,r3,1
 100c248:	293ffb36 	bltu	r5,r4,100c238 <___vfprintf_internal_r+0x1b74>
 100c24c:	1987c83a 	sub	r3,r3,r6
 100c250:	00800044 	movi	r2,1
 100c254:	d8c14815 	stw	r3,1312(sp)
 100c258:	90cf883a 	add	r7,r18,r3
 100c25c:	1480960e 	bge	r2,r18,100c4b8 <___vfprintf_internal_r+0x1df4>
 100c260:	39c00044 	addi	r7,r7,1
 100c264:	d9c14515 	stw	r7,1300(sp)
 100c268:	38003416 	blt	r7,zero,100c33c <___vfprintf_internal_r+0x1c78>
 100c26c:	e0803fcc 	andi	r2,fp,255
 100c270:	1080201c 	xori	r2,r2,128
 100c274:	10bfe004 	addi	r2,r2,-128
 100c278:	10004e26 	beq	r2,zero,100c3b4 <___vfprintf_internal_r+0x1cf0>
 100c27c:	00800b44 	movi	r2,45
 100c280:	dc814715 	stw	r18,1308(sp)
 100c284:	d8014615 	stw	zero,1304(sp)
 100c288:	d8800405 	stb	r2,16(sp)
 100c28c:	003bb106 	br	100b154 <___vfprintf_internal_r+0xa90>
 100c290:	00800b44 	movi	r2,45
 100c294:	d8800405 	stb	r2,16(sp)
 100c298:	003d3306 	br	100b768 <___vfprintf_internal_r+0x10a4>
 100c29c:	d9014f17 	ldw	r4,1340(sp)
 100c2a0:	b00b883a 	mov	r5,r22
 100c2a4:	d9800c04 	addi	r6,sp,48
 100c2a8:	100a66c0 	call	100a66c <__sprint_r>
 100c2ac:	103abd1e 	bne	r2,zero,100ada4 <___vfprintf_internal_r+0x6e0>
 100c2b0:	003abb06 	br	100ada0 <___vfprintf_internal_r+0x6dc>
 100c2b4:	38800017 	ldw	r2,0(r7)
 100c2b8:	39c00104 	addi	r7,r7,4
 100c2bc:	d9c14015 	stw	r7,1280(sp)
 100c2c0:	d9414b17 	ldw	r5,1324(sp)
 100c2c4:	d9c14017 	ldw	r7,1280(sp)
 100c2c8:	11400015 	stw	r5,0(r2)
 100c2cc:	00395906 	br	100a834 <___vfprintf_internal_r+0x170>
 100c2d0:	980f883a 	mov	r7,r19
 100c2d4:	dcc14515 	stw	r19,1300(sp)
 100c2d8:	d8014615 	stw	zero,1304(sp)
 100c2dc:	003b9b06 	br	100b14c <___vfprintf_internal_r+0xa88>
 100c2e0:	0027883a 	mov	r19,zero
 100c2e4:	00397806 	br	100a8c8 <___vfprintf_internal_r+0x204>
 100c2e8:	00c040b4 	movhi	r3,258
 100c2ec:	18fcf104 	addi	r3,r3,-3132
 100c2f0:	100f883a 	mov	r7,r2
 100c2f4:	d8814515 	stw	r2,1300(sp)
 100c2f8:	d8c14115 	stw	r3,1284(sp)
 100c2fc:	0039e006 	br	100aa80 <___vfprintf_internal_r+0x3bc>
 100c300:	008040b4 	movhi	r2,258
 100c304:	10bcf004 	addi	r2,r2,-3136
 100c308:	d8814115 	stw	r2,1284(sp)
 100c30c:	003d1c06 	br	100b780 <___vfprintf_internal_r+0x10bc>
 100c310:	d9414d17 	ldw	r5,1332(sp)
 100c314:	00801984 	movi	r2,102
 100c318:	28804926 	beq	r5,r2,100c440 <___vfprintf_internal_r+0x1d7c>
 100c31c:	200f883a 	mov	r7,r4
 100c320:	24805716 	blt	r4,r18,100c480 <___vfprintf_internal_r+0x1dbc>
 100c324:	d9414c17 	ldw	r5,1328(sp)
 100c328:	2880004c 	andi	r2,r5,1
 100c32c:	10000126 	beq	r2,zero,100c334 <___vfprintf_internal_r+0x1c70>
 100c330:	21c00044 	addi	r7,r4,1
 100c334:	d9c14515 	stw	r7,1300(sp)
 100c338:	383fcc0e 	bge	r7,zero,100c26c <___vfprintf_internal_r+0x1ba8>
 100c33c:	d8014515 	stw	zero,1300(sp)
 100c340:	003fca06 	br	100c26c <___vfprintf_internal_r+0x1ba8>
 100c344:	d9000517 	ldw	r4,20(sp)
 100c348:	00bfff04 	movi	r2,-4
 100c34c:	1100480e 	bge	r2,r4,100c470 <___vfprintf_internal_r+0x1dac>
 100c350:	99004716 	blt	r19,r4,100c470 <___vfprintf_internal_r+0x1dac>
 100c354:	d8c14d15 	stw	r3,1332(sp)
 100c358:	003ff006 	br	100c31c <___vfprintf_internal_r+0x1c58>
 100c35c:	d8800717 	ldw	r2,28(sp)
 100c360:	14bf8b2e 	bgeu	r2,r18,100c190 <___vfprintf_internal_r+0x1acc>
 100c364:	9007883a 	mov	r3,r18
 100c368:	01000c04 	movi	r4,48
 100c36c:	11000005 	stb	r4,0(r2)
 100c370:	10800044 	addi	r2,r2,1
 100c374:	d8800715 	stw	r2,28(sp)
 100c378:	18bffc1e 	bne	r3,r2,100c36c <___vfprintf_internal_r+0x1ca8>
 100c37c:	003f8406 	br	100c190 <___vfprintf_internal_r+0x1acc>
 100c380:	d8814117 	ldw	r2,1284(sp)
 100c384:	10c00007 	ldb	r3,0(r2)
 100c388:	00800c04 	movi	r2,48
 100c38c:	18805b26 	beq	r3,r2,100c4fc <___vfprintf_internal_r+0x1e38>
 100c390:	d9000517 	ldw	r4,20(sp)
 100c394:	9125883a 	add	r18,r18,r4
 100c398:	003f7506 	br	100c170 <___vfprintf_internal_r+0x1aac>
 100c39c:	d9014c17 	ldw	r4,1328(sp)
 100c3a0:	2080004c 	andi	r2,r4,1
 100c3a4:	1005003a 	cmpeq	r2,r2,zero
 100c3a8:	103f6a26 	beq	r2,zero,100c154 <___vfprintf_internal_r+0x1a90>
 100c3ac:	d8800717 	ldw	r2,28(sp)
 100c3b0:	003f7706 	br	100c190 <___vfprintf_internal_r+0x1acc>
 100c3b4:	d9c14515 	stw	r7,1300(sp)
 100c3b8:	38004d16 	blt	r7,zero,100c4f0 <___vfprintf_internal_r+0x1e2c>
 100c3bc:	dc814715 	stw	r18,1308(sp)
 100c3c0:	d8014615 	stw	zero,1304(sp)
 100c3c4:	003b6106 	br	100b14c <___vfprintf_internal_r+0xa88>
 100c3c8:	d9014f17 	ldw	r4,1340(sp)
 100c3cc:	d8800504 	addi	r2,sp,20
 100c3d0:	d8800115 	stw	r2,4(sp)
 100c3d4:	d8c00604 	addi	r3,sp,24
 100c3d8:	d8800704 	addi	r2,sp,28
 100c3dc:	800b883a 	mov	r5,r16
 100c3e0:	880d883a 	mov	r6,r17
 100c3e4:	01c000c4 	movi	r7,3
 100c3e8:	d8c00215 	stw	r3,8(sp)
 100c3ec:	d8800315 	stw	r2,12(sp)
 100c3f0:	dcc00015 	stw	r19,0(sp)
 100c3f4:	9829883a 	mov	r20,r19
 100c3f8:	100c8e80 	call	100c8e8 <_dtoa_r>
 100c3fc:	d8814115 	stw	r2,1284(sp)
 100c400:	003f5106 	br	100c148 <___vfprintf_internal_r+0x1a84>
 100c404:	d8c14217 	ldw	r3,1288(sp)
 100c408:	d9014317 	ldw	r4,1292(sp)
 100c40c:	07000b44 	movi	fp,45
 100c410:	1821883a 	mov	r16,r3
 100c414:	2460003c 	xorhi	r17,r4,32768
 100c418:	003f3106 	br	100c0e0 <___vfprintf_internal_r+0x1a1c>
 100c41c:	9d000044 	addi	r20,r19,1
 100c420:	003f3906 	br	100c108 <___vfprintf_internal_r+0x1a44>
 100c424:	983f251e 	bne	r19,zero,100c0bc <___vfprintf_internal_r+0x19f8>
 100c428:	04c00044 	movi	r19,1
 100c42c:	003f2306 	br	100c0bc <___vfprintf_internal_r+0x19f8>
 100c430:	04c00184 	movi	r19,6
 100c434:	003f2106 	br	100c0bc <___vfprintf_internal_r+0x19f8>
 100c438:	d8014515 	stw	zero,1300(sp)
 100c43c:	003eee06 	br	100bff8 <___vfprintf_internal_r+0x1934>
 100c440:	200f883a 	mov	r7,r4
 100c444:	0100370e 	bge	zero,r4,100c524 <___vfprintf_internal_r+0x1e60>
 100c448:	9800031e 	bne	r19,zero,100c458 <___vfprintf_internal_r+0x1d94>
 100c44c:	d9814c17 	ldw	r6,1328(sp)
 100c450:	3080004c 	andi	r2,r6,1
 100c454:	103fb726 	beq	r2,zero,100c334 <___vfprintf_internal_r+0x1c70>
 100c458:	20800044 	addi	r2,r4,1
 100c45c:	98a7883a 	add	r19,r19,r2
 100c460:	dcc14515 	stw	r19,1300(sp)
 100c464:	980f883a 	mov	r7,r19
 100c468:	983f800e 	bge	r19,zero,100c26c <___vfprintf_internal_r+0x1ba8>
 100c46c:	003fb306 	br	100c33c <___vfprintf_internal_r+0x1c78>
 100c470:	d9814d17 	ldw	r6,1332(sp)
 100c474:	31bfff84 	addi	r6,r6,-2
 100c478:	d9814d15 	stw	r6,1332(sp)
 100c47c:	003f4c06 	br	100c1b0 <___vfprintf_internal_r+0x1aec>
 100c480:	0100180e 	bge	zero,r4,100c4e4 <___vfprintf_internal_r+0x1e20>
 100c484:	00800044 	movi	r2,1
 100c488:	1485883a 	add	r2,r2,r18
 100c48c:	d8814515 	stw	r2,1300(sp)
 100c490:	100f883a 	mov	r7,r2
 100c494:	103f750e 	bge	r2,zero,100c26c <___vfprintf_internal_r+0x1ba8>
 100c498:	003fa806 	br	100c33c <___vfprintf_internal_r+0x1c78>
 100c49c:	80c00c04 	addi	r3,r16,48
 100c4a0:	00800c04 	movi	r2,48
 100c4a4:	d8c008c5 	stb	r3,35(sp)
 100c4a8:	d9800804 	addi	r6,sp,32
 100c4ac:	d8c00904 	addi	r3,sp,36
 100c4b0:	d8800885 	stb	r2,34(sp)
 100c4b4:	003f6506 	br	100c24c <___vfprintf_internal_r+0x1b88>
 100c4b8:	d9014c17 	ldw	r4,1328(sp)
 100c4bc:	2084703a 	and	r2,r4,r2
 100c4c0:	103f9c26 	beq	r2,zero,100c334 <___vfprintf_internal_r+0x1c70>
 100c4c4:	003f6606 	br	100c260 <___vfprintf_internal_r+0x1b9c>
 100c4c8:	d9800804 	addi	r6,sp,32
 100c4cc:	d8c00884 	addi	r3,sp,34
 100c4d0:	003f5e06 	br	100c24c <___vfprintf_internal_r+0x1b88>
 100c4d4:	00800b44 	movi	r2,45
 100c4d8:	0121c83a 	sub	r16,zero,r4
 100c4dc:	d8800845 	stb	r2,33(sp)
 100c4e0:	003f3d06 	br	100c1d8 <___vfprintf_internal_r+0x1b14>
 100c4e4:	00800084 	movi	r2,2
 100c4e8:	1105c83a 	sub	r2,r2,r4
 100c4ec:	003fe606 	br	100c488 <___vfprintf_internal_r+0x1dc4>
 100c4f0:	d8014515 	stw	zero,1300(sp)
 100c4f4:	dc814715 	stw	r18,1308(sp)
 100c4f8:	003fb106 	br	100c3c0 <___vfprintf_internal_r+0x1cfc>
 100c4fc:	000d883a 	mov	r6,zero
 100c500:	000f883a 	mov	r7,zero
 100c504:	8009883a 	mov	r4,r16
 100c508:	880b883a 	mov	r5,r17
 100c50c:	10124680 	call	1012468 <__nedf2>
 100c510:	103f9f26 	beq	r2,zero,100c390 <___vfprintf_internal_r+0x1ccc>
 100c514:	00800044 	movi	r2,1
 100c518:	1509c83a 	sub	r4,r2,r20
 100c51c:	d9000515 	stw	r4,20(sp)
 100c520:	003f9b06 	br	100c390 <___vfprintf_internal_r+0x1ccc>
 100c524:	98000d1e 	bne	r19,zero,100c55c <___vfprintf_internal_r+0x1e98>
 100c528:	d8c14c17 	ldw	r3,1328(sp)
 100c52c:	1880004c 	andi	r2,r3,1
 100c530:	10000a1e 	bne	r2,zero,100c55c <___vfprintf_internal_r+0x1e98>
 100c534:	01000044 	movi	r4,1
 100c538:	200f883a 	mov	r7,r4
 100c53c:	d9014515 	stw	r4,1300(sp)
 100c540:	003f4a06 	br	100c26c <___vfprintf_internal_r+0x1ba8>
 100c544:	3cc00017 	ldw	r19,0(r7)
 100c548:	39c00104 	addi	r7,r7,4
 100c54c:	983d0e0e 	bge	r19,zero,100b988 <___vfprintf_internal_r+0x12c4>
 100c550:	b8c00007 	ldb	r3,0(r23)
 100c554:	04ffffc4 	movi	r19,-1
 100c558:	0038d906 	br	100a8c0 <___vfprintf_internal_r+0x1fc>
 100c55c:	9cc00084 	addi	r19,r19,2
 100c560:	dcc14515 	stw	r19,1300(sp)
 100c564:	980f883a 	mov	r7,r19
 100c568:	983f400e 	bge	r19,zero,100c26c <___vfprintf_internal_r+0x1ba8>
 100c56c:	003f7306 	br	100c33c <___vfprintf_internal_r+0x1c78>

0100c570 <__vfprintf_internal>:
 100c570:	008040b4 	movhi	r2,258
 100c574:	1084a904 	addi	r2,r2,4772
 100c578:	2013883a 	mov	r9,r4
 100c57c:	11000017 	ldw	r4,0(r2)
 100c580:	2805883a 	mov	r2,r5
 100c584:	300f883a 	mov	r7,r6
 100c588:	480b883a 	mov	r5,r9
 100c58c:	100d883a 	mov	r6,r2
 100c590:	100a6c41 	jmpi	100a6c4 <___vfprintf_internal_r>

0100c594 <__swsetup_r>:
 100c594:	008040b4 	movhi	r2,258
 100c598:	1084a904 	addi	r2,r2,4772
 100c59c:	10c00017 	ldw	r3,0(r2)
 100c5a0:	defffd04 	addi	sp,sp,-12
 100c5a4:	dc400115 	stw	r17,4(sp)
 100c5a8:	dc000015 	stw	r16,0(sp)
 100c5ac:	dfc00215 	stw	ra,8(sp)
 100c5b0:	2023883a 	mov	r17,r4
 100c5b4:	2821883a 	mov	r16,r5
 100c5b8:	18000226 	beq	r3,zero,100c5c4 <__swsetup_r+0x30>
 100c5bc:	18800e17 	ldw	r2,56(r3)
 100c5c0:	10001f26 	beq	r2,zero,100c640 <__swsetup_r+0xac>
 100c5c4:	8100030b 	ldhu	r4,12(r16)
 100c5c8:	2080020c 	andi	r2,r4,8
 100c5cc:	10002826 	beq	r2,zero,100c670 <__swsetup_r+0xdc>
 100c5d0:	81400417 	ldw	r5,16(r16)
 100c5d4:	28001d26 	beq	r5,zero,100c64c <__swsetup_r+0xb8>
 100c5d8:	2080004c 	andi	r2,r4,1
 100c5dc:	1005003a 	cmpeq	r2,r2,zero
 100c5e0:	10000b26 	beq	r2,zero,100c610 <__swsetup_r+0x7c>
 100c5e4:	2080008c 	andi	r2,r4,2
 100c5e8:	10001226 	beq	r2,zero,100c634 <__swsetup_r+0xa0>
 100c5ec:	0005883a 	mov	r2,zero
 100c5f0:	80800215 	stw	r2,8(r16)
 100c5f4:	28000b26 	beq	r5,zero,100c624 <__swsetup_r+0x90>
 100c5f8:	0005883a 	mov	r2,zero
 100c5fc:	dfc00217 	ldw	ra,8(sp)
 100c600:	dc400117 	ldw	r17,4(sp)
 100c604:	dc000017 	ldw	r16,0(sp)
 100c608:	dec00304 	addi	sp,sp,12
 100c60c:	f800283a 	ret
 100c610:	80800517 	ldw	r2,20(r16)
 100c614:	80000215 	stw	zero,8(r16)
 100c618:	0085c83a 	sub	r2,zero,r2
 100c61c:	80800615 	stw	r2,24(r16)
 100c620:	283ff51e 	bne	r5,zero,100c5f8 <__swsetup_r+0x64>
 100c624:	2080200c 	andi	r2,r4,128
 100c628:	103ff326 	beq	r2,zero,100c5f8 <__swsetup_r+0x64>
 100c62c:	00bfffc4 	movi	r2,-1
 100c630:	003ff206 	br	100c5fc <__swsetup_r+0x68>
 100c634:	80800517 	ldw	r2,20(r16)
 100c638:	80800215 	stw	r2,8(r16)
 100c63c:	003fed06 	br	100c5f4 <__swsetup_r+0x60>
 100c640:	1809883a 	mov	r4,r3
 100c644:	100e1340 	call	100e134 <__sinit>
 100c648:	003fde06 	br	100c5c4 <__swsetup_r+0x30>
 100c64c:	20c0a00c 	andi	r3,r4,640
 100c650:	00808004 	movi	r2,512
 100c654:	18bfe026 	beq	r3,r2,100c5d8 <__swsetup_r+0x44>
 100c658:	8809883a 	mov	r4,r17
 100c65c:	800b883a 	mov	r5,r16
 100c660:	100eeac0 	call	100eeac <__smakebuf_r>
 100c664:	8100030b 	ldhu	r4,12(r16)
 100c668:	81400417 	ldw	r5,16(r16)
 100c66c:	003fda06 	br	100c5d8 <__swsetup_r+0x44>
 100c670:	2080040c 	andi	r2,r4,16
 100c674:	103fed26 	beq	r2,zero,100c62c <__swsetup_r+0x98>
 100c678:	2080010c 	andi	r2,r4,4
 100c67c:	10001226 	beq	r2,zero,100c6c8 <__swsetup_r+0x134>
 100c680:	81400c17 	ldw	r5,48(r16)
 100c684:	28000526 	beq	r5,zero,100c69c <__swsetup_r+0x108>
 100c688:	80801004 	addi	r2,r16,64
 100c68c:	28800226 	beq	r5,r2,100c698 <__swsetup_r+0x104>
 100c690:	8809883a 	mov	r4,r17
 100c694:	100e4b80 	call	100e4b8 <_free_r>
 100c698:	80000c15 	stw	zero,48(r16)
 100c69c:	8080030b 	ldhu	r2,12(r16)
 100c6a0:	81400417 	ldw	r5,16(r16)
 100c6a4:	80000115 	stw	zero,4(r16)
 100c6a8:	10bff6cc 	andi	r2,r2,65499
 100c6ac:	8080030d 	sth	r2,12(r16)
 100c6b0:	81400015 	stw	r5,0(r16)
 100c6b4:	8080030b 	ldhu	r2,12(r16)
 100c6b8:	10800214 	ori	r2,r2,8
 100c6bc:	113fffcc 	andi	r4,r2,65535
 100c6c0:	8080030d 	sth	r2,12(r16)
 100c6c4:	003fc306 	br	100c5d4 <__swsetup_r+0x40>
 100c6c8:	81400417 	ldw	r5,16(r16)
 100c6cc:	003ff906 	br	100c6b4 <__swsetup_r+0x120>

0100c6d0 <quorem>:
 100c6d0:	28c00417 	ldw	r3,16(r5)
 100c6d4:	20800417 	ldw	r2,16(r4)
 100c6d8:	defff604 	addi	sp,sp,-40
 100c6dc:	ddc00715 	stw	r23,28(sp)
 100c6e0:	dd400515 	stw	r21,20(sp)
 100c6e4:	dfc00915 	stw	ra,36(sp)
 100c6e8:	df000815 	stw	fp,32(sp)
 100c6ec:	dd800615 	stw	r22,24(sp)
 100c6f0:	dd000415 	stw	r20,16(sp)
 100c6f4:	dcc00315 	stw	r19,12(sp)
 100c6f8:	dc800215 	stw	r18,8(sp)
 100c6fc:	dc400115 	stw	r17,4(sp)
 100c700:	dc000015 	stw	r16,0(sp)
 100c704:	202f883a 	mov	r23,r4
 100c708:	282b883a 	mov	r21,r5
 100c70c:	10c07416 	blt	r2,r3,100c8e0 <quorem+0x210>
 100c710:	1c7fffc4 	addi	r17,r3,-1
 100c714:	8c45883a 	add	r2,r17,r17
 100c718:	1085883a 	add	r2,r2,r2
 100c71c:	2c000504 	addi	r16,r5,20
 100c720:	24c00504 	addi	r19,r4,20
 100c724:	14ed883a 	add	r22,r2,r19
 100c728:	80a5883a 	add	r18,r16,r2
 100c72c:	b7000017 	ldw	fp,0(r22)
 100c730:	91400017 	ldw	r5,0(r18)
 100c734:	e009883a 	mov	r4,fp
 100c738:	29400044 	addi	r5,r5,1
 100c73c:	1012b280 	call	1012b28 <__udivsi3>
 100c740:	1029883a 	mov	r20,r2
 100c744:	10003c1e 	bne	r2,zero,100c838 <quorem+0x168>
 100c748:	a80b883a 	mov	r5,r21
 100c74c:	b809883a 	mov	r4,r23
 100c750:	100f19c0 	call	100f19c <__mcmp>
 100c754:	10002b16 	blt	r2,zero,100c804 <quorem+0x134>
 100c758:	a5000044 	addi	r20,r20,1
 100c75c:	980f883a 	mov	r7,r19
 100c760:	0011883a 	mov	r8,zero
 100c764:	0009883a 	mov	r4,zero
 100c768:	81400017 	ldw	r5,0(r16)
 100c76c:	38c00017 	ldw	r3,0(r7)
 100c770:	84000104 	addi	r16,r16,4
 100c774:	28bfffcc 	andi	r2,r5,65535
 100c778:	2085883a 	add	r2,r4,r2
 100c77c:	11bfffcc 	andi	r6,r2,65535
 100c780:	193fffcc 	andi	r4,r3,65535
 100c784:	1004d43a 	srli	r2,r2,16
 100c788:	280ad43a 	srli	r5,r5,16
 100c78c:	2189c83a 	sub	r4,r4,r6
 100c790:	2209883a 	add	r4,r4,r8
 100c794:	1806d43a 	srli	r3,r3,16
 100c798:	288b883a 	add	r5,r5,r2
 100c79c:	200dd43a 	srai	r6,r4,16
 100c7a0:	28bfffcc 	andi	r2,r5,65535
 100c7a4:	1887c83a 	sub	r3,r3,r2
 100c7a8:	1987883a 	add	r3,r3,r6
 100c7ac:	3900000d 	sth	r4,0(r7)
 100c7b0:	38c0008d 	sth	r3,2(r7)
 100c7b4:	2808d43a 	srli	r4,r5,16
 100c7b8:	39c00104 	addi	r7,r7,4
 100c7bc:	1811d43a 	srai	r8,r3,16
 100c7c0:	943fe92e 	bgeu	r18,r16,100c768 <quorem+0x98>
 100c7c4:	8c45883a 	add	r2,r17,r17
 100c7c8:	1085883a 	add	r2,r2,r2
 100c7cc:	9885883a 	add	r2,r19,r2
 100c7d0:	10c00017 	ldw	r3,0(r2)
 100c7d4:	18000b1e 	bne	r3,zero,100c804 <quorem+0x134>
 100c7d8:	113fff04 	addi	r4,r2,-4
 100c7dc:	9900082e 	bgeu	r19,r4,100c800 <quorem+0x130>
 100c7e0:	10bfff17 	ldw	r2,-4(r2)
 100c7e4:	10000326 	beq	r2,zero,100c7f4 <quorem+0x124>
 100c7e8:	00000506 	br	100c800 <quorem+0x130>
 100c7ec:	20800017 	ldw	r2,0(r4)
 100c7f0:	1000031e 	bne	r2,zero,100c800 <quorem+0x130>
 100c7f4:	213fff04 	addi	r4,r4,-4
 100c7f8:	8c7fffc4 	addi	r17,r17,-1
 100c7fc:	993ffb36 	bltu	r19,r4,100c7ec <quorem+0x11c>
 100c800:	bc400415 	stw	r17,16(r23)
 100c804:	a005883a 	mov	r2,r20
 100c808:	dfc00917 	ldw	ra,36(sp)
 100c80c:	df000817 	ldw	fp,32(sp)
 100c810:	ddc00717 	ldw	r23,28(sp)
 100c814:	dd800617 	ldw	r22,24(sp)
 100c818:	dd400517 	ldw	r21,20(sp)
 100c81c:	dd000417 	ldw	r20,16(sp)
 100c820:	dcc00317 	ldw	r19,12(sp)
 100c824:	dc800217 	ldw	r18,8(sp)
 100c828:	dc400117 	ldw	r17,4(sp)
 100c82c:	dc000017 	ldw	r16,0(sp)
 100c830:	dec00a04 	addi	sp,sp,40
 100c834:	f800283a 	ret
 100c838:	980f883a 	mov	r7,r19
 100c83c:	8011883a 	mov	r8,r16
 100c840:	0013883a 	mov	r9,zero
 100c844:	000d883a 	mov	r6,zero
 100c848:	40c00017 	ldw	r3,0(r8)
 100c84c:	39000017 	ldw	r4,0(r7)
 100c850:	42000104 	addi	r8,r8,4
 100c854:	18bfffcc 	andi	r2,r3,65535
 100c858:	a085383a 	mul	r2,r20,r2
 100c85c:	1806d43a 	srli	r3,r3,16
 100c860:	217fffcc 	andi	r5,r4,65535
 100c864:	3085883a 	add	r2,r6,r2
 100c868:	11bfffcc 	andi	r6,r2,65535
 100c86c:	a0c7383a 	mul	r3,r20,r3
 100c870:	1004d43a 	srli	r2,r2,16
 100c874:	298bc83a 	sub	r5,r5,r6
 100c878:	2a4b883a 	add	r5,r5,r9
 100c87c:	2008d43a 	srli	r4,r4,16
 100c880:	1887883a 	add	r3,r3,r2
 100c884:	280dd43a 	srai	r6,r5,16
 100c888:	18bfffcc 	andi	r2,r3,65535
 100c88c:	2089c83a 	sub	r4,r4,r2
 100c890:	2189883a 	add	r4,r4,r6
 100c894:	3900008d 	sth	r4,2(r7)
 100c898:	3940000d 	sth	r5,0(r7)
 100c89c:	180cd43a 	srli	r6,r3,16
 100c8a0:	39c00104 	addi	r7,r7,4
 100c8a4:	2013d43a 	srai	r9,r4,16
 100c8a8:	923fe72e 	bgeu	r18,r8,100c848 <quorem+0x178>
 100c8ac:	e03fa61e 	bne	fp,zero,100c748 <quorem+0x78>
 100c8b0:	b0ffff04 	addi	r3,r22,-4
 100c8b4:	98c0082e 	bgeu	r19,r3,100c8d8 <quorem+0x208>
 100c8b8:	b0bfff17 	ldw	r2,-4(r22)
 100c8bc:	10000326 	beq	r2,zero,100c8cc <quorem+0x1fc>
 100c8c0:	00000506 	br	100c8d8 <quorem+0x208>
 100c8c4:	18800017 	ldw	r2,0(r3)
 100c8c8:	1000031e 	bne	r2,zero,100c8d8 <quorem+0x208>
 100c8cc:	18ffff04 	addi	r3,r3,-4
 100c8d0:	8c7fffc4 	addi	r17,r17,-1
 100c8d4:	98fffb36 	bltu	r19,r3,100c8c4 <quorem+0x1f4>
 100c8d8:	bc400415 	stw	r17,16(r23)
 100c8dc:	003f9a06 	br	100c748 <quorem+0x78>
 100c8e0:	0005883a 	mov	r2,zero
 100c8e4:	003fc806 	br	100c808 <quorem+0x138>

0100c8e8 <_dtoa_r>:
 100c8e8:	22001017 	ldw	r8,64(r4)
 100c8ec:	deffda04 	addi	sp,sp,-152
 100c8f0:	dd402115 	stw	r21,132(sp)
 100c8f4:	dd002015 	stw	r20,128(sp)
 100c8f8:	dc801e15 	stw	r18,120(sp)
 100c8fc:	dc401d15 	stw	r17,116(sp)
 100c900:	dfc02515 	stw	ra,148(sp)
 100c904:	df002415 	stw	fp,144(sp)
 100c908:	ddc02315 	stw	r23,140(sp)
 100c90c:	dd802215 	stw	r22,136(sp)
 100c910:	dcc01f15 	stw	r19,124(sp)
 100c914:	dc001c15 	stw	r16,112(sp)
 100c918:	d9001615 	stw	r4,88(sp)
 100c91c:	3023883a 	mov	r17,r6
 100c920:	2829883a 	mov	r20,r5
 100c924:	d9c01715 	stw	r7,92(sp)
 100c928:	dc802817 	ldw	r18,160(sp)
 100c92c:	302b883a 	mov	r21,r6
 100c930:	40000a26 	beq	r8,zero,100c95c <_dtoa_r+0x74>
 100c934:	20801117 	ldw	r2,68(r4)
 100c938:	400b883a 	mov	r5,r8
 100c93c:	40800115 	stw	r2,4(r8)
 100c940:	20c01117 	ldw	r3,68(r4)
 100c944:	00800044 	movi	r2,1
 100c948:	10c4983a 	sll	r2,r2,r3
 100c94c:	40800215 	stw	r2,8(r8)
 100c950:	100f0400 	call	100f040 <_Bfree>
 100c954:	d8c01617 	ldw	r3,88(sp)
 100c958:	18001015 	stw	zero,64(r3)
 100c95c:	8800a316 	blt	r17,zero,100cbec <_dtoa_r+0x304>
 100c960:	90000015 	stw	zero,0(r18)
 100c964:	a8dffc2c 	andhi	r3,r21,32752
 100c968:	009ffc34 	movhi	r2,32752
 100c96c:	18809126 	beq	r3,r2,100cbb4 <_dtoa_r+0x2cc>
 100c970:	000d883a 	mov	r6,zero
 100c974:	000f883a 	mov	r7,zero
 100c978:	a009883a 	mov	r4,r20
 100c97c:	a80b883a 	mov	r5,r21
 100c980:	dd001215 	stw	r20,72(sp)
 100c984:	dd401315 	stw	r21,76(sp)
 100c988:	10124680 	call	1012468 <__nedf2>
 100c98c:	1000171e 	bne	r2,zero,100c9ec <_dtoa_r+0x104>
 100c990:	d9802717 	ldw	r6,156(sp)
 100c994:	00800044 	movi	r2,1
 100c998:	30800015 	stw	r2,0(r6)
 100c99c:	d8802917 	ldw	r2,164(sp)
 100c9a0:	10029b26 	beq	r2,zero,100d410 <_dtoa_r+0xb28>
 100c9a4:	d9002917 	ldw	r4,164(sp)
 100c9a8:	008040b4 	movhi	r2,258
 100c9ac:	10bcff44 	addi	r2,r2,-3075
 100c9b0:	10ffffc4 	addi	r3,r2,-1
 100c9b4:	20800015 	stw	r2,0(r4)
 100c9b8:	1805883a 	mov	r2,r3
 100c9bc:	dfc02517 	ldw	ra,148(sp)
 100c9c0:	df002417 	ldw	fp,144(sp)
 100c9c4:	ddc02317 	ldw	r23,140(sp)
 100c9c8:	dd802217 	ldw	r22,136(sp)
 100c9cc:	dd402117 	ldw	r21,132(sp)
 100c9d0:	dd002017 	ldw	r20,128(sp)
 100c9d4:	dcc01f17 	ldw	r19,124(sp)
 100c9d8:	dc801e17 	ldw	r18,120(sp)
 100c9dc:	dc401d17 	ldw	r17,116(sp)
 100c9e0:	dc001c17 	ldw	r16,112(sp)
 100c9e4:	dec02604 	addi	sp,sp,152
 100c9e8:	f800283a 	ret
 100c9ec:	d9001617 	ldw	r4,88(sp)
 100c9f0:	d9401217 	ldw	r5,72(sp)
 100c9f4:	d8800104 	addi	r2,sp,4
 100c9f8:	a80d883a 	mov	r6,r21
 100c9fc:	d9c00204 	addi	r7,sp,8
 100ca00:	d8800015 	stw	r2,0(sp)
 100ca04:	100f67c0 	call	100f67c <__d2b>
 100ca08:	d8800715 	stw	r2,28(sp)
 100ca0c:	a804d53a 	srli	r2,r21,20
 100ca10:	1101ffcc 	andi	r4,r2,2047
 100ca14:	20008626 	beq	r4,zero,100cc30 <_dtoa_r+0x348>
 100ca18:	d8c01217 	ldw	r3,72(sp)
 100ca1c:	00800434 	movhi	r2,16
 100ca20:	10bfffc4 	addi	r2,r2,-1
 100ca24:	ddc00117 	ldw	r23,4(sp)
 100ca28:	a884703a 	and	r2,r21,r2
 100ca2c:	1811883a 	mov	r8,r3
 100ca30:	124ffc34 	orhi	r9,r2,16368
 100ca34:	25bf0044 	addi	r22,r4,-1023
 100ca38:	d8000815 	stw	zero,32(sp)
 100ca3c:	0005883a 	mov	r2,zero
 100ca40:	00cffe34 	movhi	r3,16376
 100ca44:	480b883a 	mov	r5,r9
 100ca48:	4009883a 	mov	r4,r8
 100ca4c:	180f883a 	mov	r7,r3
 100ca50:	100d883a 	mov	r6,r2
 100ca54:	1011cd00 	call	1011cd0 <__subdf3>
 100ca58:	0218dbf4 	movhi	r8,25455
 100ca5c:	4210d844 	addi	r8,r8,17249
 100ca60:	024ff4f4 	movhi	r9,16339
 100ca64:	4a61e9c4 	addi	r9,r9,-30809
 100ca68:	480f883a 	mov	r7,r9
 100ca6c:	400d883a 	mov	r6,r8
 100ca70:	180b883a 	mov	r5,r3
 100ca74:	1009883a 	mov	r4,r2
 100ca78:	1011dc40 	call	1011dc4 <__muldf3>
 100ca7c:	0222d874 	movhi	r8,35681
 100ca80:	42322cc4 	addi	r8,r8,-14157
 100ca84:	024ff1f4 	movhi	r9,16327
 100ca88:	4a628a04 	addi	r9,r9,-30168
 100ca8c:	480f883a 	mov	r7,r9
 100ca90:	400d883a 	mov	r6,r8
 100ca94:	180b883a 	mov	r5,r3
 100ca98:	1009883a 	mov	r4,r2
 100ca9c:	1011d500 	call	1011d50 <__adddf3>
 100caa0:	b009883a 	mov	r4,r22
 100caa4:	1021883a 	mov	r16,r2
 100caa8:	1823883a 	mov	r17,r3
 100caac:	10126880 	call	1012688 <__floatsidf>
 100cab0:	021427f4 	movhi	r8,20639
 100cab4:	421e7ec4 	addi	r8,r8,31227
 100cab8:	024ff4f4 	movhi	r9,16339
 100cabc:	4a5104c4 	addi	r9,r9,17427
 100cac0:	480f883a 	mov	r7,r9
 100cac4:	400d883a 	mov	r6,r8
 100cac8:	180b883a 	mov	r5,r3
 100cacc:	1009883a 	mov	r4,r2
 100cad0:	1011dc40 	call	1011dc4 <__muldf3>
 100cad4:	180f883a 	mov	r7,r3
 100cad8:	880b883a 	mov	r5,r17
 100cadc:	100d883a 	mov	r6,r2
 100cae0:	8009883a 	mov	r4,r16
 100cae4:	1011d500 	call	1011d50 <__adddf3>
 100cae8:	1009883a 	mov	r4,r2
 100caec:	180b883a 	mov	r5,r3
 100caf0:	1021883a 	mov	r16,r2
 100caf4:	1823883a 	mov	r17,r3
 100caf8:	10127800 	call	1012780 <__fixdfsi>
 100cafc:	000d883a 	mov	r6,zero
 100cb00:	000f883a 	mov	r7,zero
 100cb04:	8009883a 	mov	r4,r16
 100cb08:	880b883a 	mov	r5,r17
 100cb0c:	d8800d15 	stw	r2,52(sp)
 100cb10:	10126000 	call	1012600 <__ltdf2>
 100cb14:	10031716 	blt	r2,zero,100d774 <_dtoa_r+0xe8c>
 100cb18:	d8c00d17 	ldw	r3,52(sp)
 100cb1c:	00800584 	movi	r2,22
 100cb20:	10c1482e 	bgeu	r2,r3,100d044 <_dtoa_r+0x75c>
 100cb24:	01000044 	movi	r4,1
 100cb28:	d9000c15 	stw	r4,48(sp)
 100cb2c:	bd85c83a 	sub	r2,r23,r22
 100cb30:	11bfffc4 	addi	r6,r2,-1
 100cb34:	30030b16 	blt	r6,zero,100d764 <_dtoa_r+0xe7c>
 100cb38:	d9800a15 	stw	r6,40(sp)
 100cb3c:	d8001115 	stw	zero,68(sp)
 100cb40:	d8c00d17 	ldw	r3,52(sp)
 100cb44:	1802ff16 	blt	r3,zero,100d744 <_dtoa_r+0xe5c>
 100cb48:	d9000a17 	ldw	r4,40(sp)
 100cb4c:	d8c00915 	stw	r3,36(sp)
 100cb50:	d8001015 	stw	zero,64(sp)
 100cb54:	20c9883a 	add	r4,r4,r3
 100cb58:	d9000a15 	stw	r4,40(sp)
 100cb5c:	d9001717 	ldw	r4,92(sp)
 100cb60:	00800244 	movi	r2,9
 100cb64:	11004636 	bltu	r2,r4,100cc80 <_dtoa_r+0x398>
 100cb68:	00800144 	movi	r2,5
 100cb6c:	11020416 	blt	r2,r4,100d380 <_dtoa_r+0xa98>
 100cb70:	04400044 	movi	r17,1
 100cb74:	d8c01717 	ldw	r3,92(sp)
 100cb78:	00800144 	movi	r2,5
 100cb7c:	10c1ed36 	bltu	r2,r3,100d334 <_dtoa_r+0xa4c>
 100cb80:	18c5883a 	add	r2,r3,r3
 100cb84:	1085883a 	add	r2,r2,r2
 100cb88:	00c04074 	movhi	r3,257
 100cb8c:	18f2e704 	addi	r3,r3,-13412
 100cb90:	10c5883a 	add	r2,r2,r3
 100cb94:	11000017 	ldw	r4,0(r2)
 100cb98:	2000683a 	jmp	r4
 100cb9c:	0100cc88 	cmpgei	r4,zero,818
 100cba0:	0100cc88 	cmpgei	r4,zero,818
 100cba4:	0100d688 	cmpgei	r4,zero,858
 100cba8:	0100d660 	cmpeqi	r4,zero,857
 100cbac:	0100d6a4 	muli	r4,zero,858
 100cbb0:	0100d6b0 	cmpltui	r4,zero,858
 100cbb4:	d9002717 	ldw	r4,156(sp)
 100cbb8:	0089c3c4 	movi	r2,9999
 100cbbc:	20800015 	stw	r2,0(r4)
 100cbc0:	a0001026 	beq	r20,zero,100cc04 <_dtoa_r+0x31c>
 100cbc4:	00c040b4 	movhi	r3,258
 100cbc8:	18fd0b04 	addi	r3,r3,-3028
 100cbcc:	d9802917 	ldw	r6,164(sp)
 100cbd0:	303f7926 	beq	r6,zero,100c9b8 <_dtoa_r+0xd0>
 100cbd4:	188000c7 	ldb	r2,3(r3)
 100cbd8:	190000c4 	addi	r4,r3,3
 100cbdc:	1000101e 	bne	r2,zero,100cc20 <_dtoa_r+0x338>
 100cbe0:	d8802917 	ldw	r2,164(sp)
 100cbe4:	11000015 	stw	r4,0(r2)
 100cbe8:	003f7306 	br	100c9b8 <_dtoa_r+0xd0>
 100cbec:	00a00034 	movhi	r2,32768
 100cbf0:	10bfffc4 	addi	r2,r2,-1
 100cbf4:	00c00044 	movi	r3,1
 100cbf8:	88aa703a 	and	r21,r17,r2
 100cbfc:	90c00015 	stw	r3,0(r18)
 100cc00:	003f5806 	br	100c964 <_dtoa_r+0x7c>
 100cc04:	00800434 	movhi	r2,16
 100cc08:	10bfffc4 	addi	r2,r2,-1
 100cc0c:	a884703a 	and	r2,r21,r2
 100cc10:	103fec1e 	bne	r2,zero,100cbc4 <_dtoa_r+0x2dc>
 100cc14:	00c040b4 	movhi	r3,258
 100cc18:	18fd0804 	addi	r3,r3,-3040
 100cc1c:	003feb06 	br	100cbcc <_dtoa_r+0x2e4>
 100cc20:	d8802917 	ldw	r2,164(sp)
 100cc24:	19000204 	addi	r4,r3,8
 100cc28:	11000015 	stw	r4,0(r2)
 100cc2c:	003f6206 	br	100c9b8 <_dtoa_r+0xd0>
 100cc30:	ddc00117 	ldw	r23,4(sp)
 100cc34:	d8800217 	ldw	r2,8(sp)
 100cc38:	01000804 	movi	r4,32
 100cc3c:	b8c10c84 	addi	r3,r23,1074
 100cc40:	18a3883a 	add	r17,r3,r2
 100cc44:	2441b80e 	bge	r4,r17,100d328 <_dtoa_r+0xa40>
 100cc48:	00c01004 	movi	r3,64
 100cc4c:	1c47c83a 	sub	r3,r3,r17
 100cc50:	88bff804 	addi	r2,r17,-32
 100cc54:	a8c6983a 	sll	r3,r21,r3
 100cc58:	a084d83a 	srl	r2,r20,r2
 100cc5c:	1888b03a 	or	r4,r3,r2
 100cc60:	10128580 	call	1012858 <__floatunsidf>
 100cc64:	1011883a 	mov	r8,r2
 100cc68:	00bf8434 	movhi	r2,65040
 100cc6c:	01000044 	movi	r4,1
 100cc70:	10d3883a 	add	r9,r2,r3
 100cc74:	8dbef344 	addi	r22,r17,-1075
 100cc78:	d9000815 	stw	r4,32(sp)
 100cc7c:	003f6f06 	br	100ca3c <_dtoa_r+0x154>
 100cc80:	d8001715 	stw	zero,92(sp)
 100cc84:	04400044 	movi	r17,1
 100cc88:	00bfffc4 	movi	r2,-1
 100cc8c:	00c00044 	movi	r3,1
 100cc90:	d8800e15 	stw	r2,56(sp)
 100cc94:	d8002615 	stw	zero,152(sp)
 100cc98:	d8800f15 	stw	r2,60(sp)
 100cc9c:	d8c00b15 	stw	r3,44(sp)
 100cca0:	1021883a 	mov	r16,r2
 100cca4:	d8801617 	ldw	r2,88(sp)
 100cca8:	10001115 	stw	zero,68(r2)
 100ccac:	d8801617 	ldw	r2,88(sp)
 100ccb0:	11401117 	ldw	r5,68(r2)
 100ccb4:	1009883a 	mov	r4,r2
 100ccb8:	100f5c00 	call	100f5c0 <_Balloc>
 100ccbc:	d8c01617 	ldw	r3,88(sp)
 100ccc0:	d8800515 	stw	r2,20(sp)
 100ccc4:	18801015 	stw	r2,64(r3)
 100ccc8:	00800384 	movi	r2,14
 100cccc:	14006836 	bltu	r2,r16,100ce70 <_dtoa_r+0x588>
 100ccd0:	8805003a 	cmpeq	r2,r17,zero
 100ccd4:	1000661e 	bne	r2,zero,100ce70 <_dtoa_r+0x588>
 100ccd8:	d9000d17 	ldw	r4,52(sp)
 100ccdc:	0102300e 	bge	zero,r4,100d5a0 <_dtoa_r+0xcb8>
 100cce0:	208003cc 	andi	r2,r4,15
 100cce4:	100490fa 	slli	r2,r2,3
 100cce8:	2025d13a 	srai	r18,r4,4
 100ccec:	00c040b4 	movhi	r3,258
 100ccf0:	18fd1d04 	addi	r3,r3,-2956
 100ccf4:	10c5883a 	add	r2,r2,r3
 100ccf8:	90c0040c 	andi	r3,r18,16
 100ccfc:	14000017 	ldw	r16,0(r2)
 100cd00:	14400117 	ldw	r17,4(r2)
 100cd04:	18036a1e 	bne	r3,zero,100dab0 <_dtoa_r+0x11c8>
 100cd08:	05800084 	movi	r22,2
 100cd0c:	90001026 	beq	r18,zero,100cd50 <_dtoa_r+0x468>
 100cd10:	04c040b4 	movhi	r19,258
 100cd14:	9cfd4f04 	addi	r19,r19,-2756
 100cd18:	9080004c 	andi	r2,r18,1
 100cd1c:	1005003a 	cmpeq	r2,r2,zero
 100cd20:	1000081e 	bne	r2,zero,100cd44 <_dtoa_r+0x45c>
 100cd24:	99800017 	ldw	r6,0(r19)
 100cd28:	99c00117 	ldw	r7,4(r19)
 100cd2c:	880b883a 	mov	r5,r17
 100cd30:	8009883a 	mov	r4,r16
 100cd34:	1011dc40 	call	1011dc4 <__muldf3>
 100cd38:	1021883a 	mov	r16,r2
 100cd3c:	b5800044 	addi	r22,r22,1
 100cd40:	1823883a 	mov	r17,r3
 100cd44:	9025d07a 	srai	r18,r18,1
 100cd48:	9cc00204 	addi	r19,r19,8
 100cd4c:	903ff21e 	bne	r18,zero,100cd18 <_dtoa_r+0x430>
 100cd50:	a80b883a 	mov	r5,r21
 100cd54:	a009883a 	mov	r4,r20
 100cd58:	880f883a 	mov	r7,r17
 100cd5c:	800d883a 	mov	r6,r16
 100cd60:	10121880 	call	1012188 <__divdf3>
 100cd64:	1029883a 	mov	r20,r2
 100cd68:	182b883a 	mov	r21,r3
 100cd6c:	d8c00c17 	ldw	r3,48(sp)
 100cd70:	1805003a 	cmpeq	r2,r3,zero
 100cd74:	1000081e 	bne	r2,zero,100cd98 <_dtoa_r+0x4b0>
 100cd78:	0005883a 	mov	r2,zero
 100cd7c:	00cffc34 	movhi	r3,16368
 100cd80:	180f883a 	mov	r7,r3
 100cd84:	a009883a 	mov	r4,r20
 100cd88:	a80b883a 	mov	r5,r21
 100cd8c:	100d883a 	mov	r6,r2
 100cd90:	10126000 	call	1012600 <__ltdf2>
 100cd94:	1003fe16 	blt	r2,zero,100dd90 <_dtoa_r+0x14a8>
 100cd98:	b009883a 	mov	r4,r22
 100cd9c:	10126880 	call	1012688 <__floatsidf>
 100cda0:	180b883a 	mov	r5,r3
 100cda4:	1009883a 	mov	r4,r2
 100cda8:	a00d883a 	mov	r6,r20
 100cdac:	a80f883a 	mov	r7,r21
 100cdb0:	1011dc40 	call	1011dc4 <__muldf3>
 100cdb4:	0011883a 	mov	r8,zero
 100cdb8:	02500734 	movhi	r9,16412
 100cdbc:	1009883a 	mov	r4,r2
 100cdc0:	180b883a 	mov	r5,r3
 100cdc4:	480f883a 	mov	r7,r9
 100cdc8:	400d883a 	mov	r6,r8
 100cdcc:	1011d500 	call	1011d50 <__adddf3>
 100cdd0:	d9000f17 	ldw	r4,60(sp)
 100cdd4:	102d883a 	mov	r22,r2
 100cdd8:	00bf3034 	movhi	r2,64704
 100cddc:	18b9883a 	add	fp,r3,r2
 100cde0:	e02f883a 	mov	r23,fp
 100cde4:	20028f1e 	bne	r4,zero,100d824 <_dtoa_r+0xf3c>
 100cde8:	0005883a 	mov	r2,zero
 100cdec:	00d00534 	movhi	r3,16404
 100cdf0:	a009883a 	mov	r4,r20
 100cdf4:	a80b883a 	mov	r5,r21
 100cdf8:	180f883a 	mov	r7,r3
 100cdfc:	100d883a 	mov	r6,r2
 100ce00:	1011cd00 	call	1011cd0 <__subdf3>
 100ce04:	1009883a 	mov	r4,r2
 100ce08:	e00f883a 	mov	r7,fp
 100ce0c:	180b883a 	mov	r5,r3
 100ce10:	b00d883a 	mov	r6,r22
 100ce14:	1025883a 	mov	r18,r2
 100ce18:	1827883a 	mov	r19,r3
 100ce1c:	10124f00 	call	10124f0 <__gtdf2>
 100ce20:	00834f16 	blt	zero,r2,100db60 <_dtoa_r+0x1278>
 100ce24:	e0e0003c 	xorhi	r3,fp,32768
 100ce28:	9009883a 	mov	r4,r18
 100ce2c:	980b883a 	mov	r5,r19
 100ce30:	180f883a 	mov	r7,r3
 100ce34:	b00d883a 	mov	r6,r22
 100ce38:	10126000 	call	1012600 <__ltdf2>
 100ce3c:	1000080e 	bge	r2,zero,100ce60 <_dtoa_r+0x578>
 100ce40:	0027883a 	mov	r19,zero
 100ce44:	0025883a 	mov	r18,zero
 100ce48:	d8802617 	ldw	r2,152(sp)
 100ce4c:	df000517 	ldw	fp,20(sp)
 100ce50:	d8000615 	stw	zero,24(sp)
 100ce54:	0084303a 	nor	r2,zero,r2
 100ce58:	d8800d15 	stw	r2,52(sp)
 100ce5c:	00019b06 	br	100d4cc <_dtoa_r+0xbe4>
 100ce60:	d9801217 	ldw	r6,72(sp)
 100ce64:	d8801317 	ldw	r2,76(sp)
 100ce68:	3029883a 	mov	r20,r6
 100ce6c:	102b883a 	mov	r21,r2
 100ce70:	d8c00217 	ldw	r3,8(sp)
 100ce74:	18008516 	blt	r3,zero,100d08c <_dtoa_r+0x7a4>
 100ce78:	d9000d17 	ldw	r4,52(sp)
 100ce7c:	00800384 	movi	r2,14
 100ce80:	11008216 	blt	r2,r4,100d08c <_dtoa_r+0x7a4>
 100ce84:	200490fa 	slli	r2,r4,3
 100ce88:	d9802617 	ldw	r6,152(sp)
 100ce8c:	00c040b4 	movhi	r3,258
 100ce90:	18fd1d04 	addi	r3,r3,-2956
 100ce94:	10c5883a 	add	r2,r2,r3
 100ce98:	14800017 	ldw	r18,0(r2)
 100ce9c:	14c00117 	ldw	r19,4(r2)
 100cea0:	30031e16 	blt	r6,zero,100db1c <_dtoa_r+0x1234>
 100cea4:	d9000517 	ldw	r4,20(sp)
 100cea8:	d8c00f17 	ldw	r3,60(sp)
 100ceac:	a823883a 	mov	r17,r21
 100ceb0:	a021883a 	mov	r16,r20
 100ceb4:	192b883a 	add	r21,r3,r4
 100ceb8:	2039883a 	mov	fp,r4
 100cebc:	00000f06 	br	100cefc <_dtoa_r+0x614>
 100cec0:	0005883a 	mov	r2,zero
 100cec4:	00d00934 	movhi	r3,16420
 100cec8:	5009883a 	mov	r4,r10
 100cecc:	580b883a 	mov	r5,r11
 100ced0:	180f883a 	mov	r7,r3
 100ced4:	100d883a 	mov	r6,r2
 100ced8:	1011dc40 	call	1011dc4 <__muldf3>
 100cedc:	180b883a 	mov	r5,r3
 100cee0:	000d883a 	mov	r6,zero
 100cee4:	000f883a 	mov	r7,zero
 100cee8:	1009883a 	mov	r4,r2
 100ceec:	1021883a 	mov	r16,r2
 100cef0:	1823883a 	mov	r17,r3
 100cef4:	10124680 	call	1012468 <__nedf2>
 100cef8:	10004526 	beq	r2,zero,100d010 <_dtoa_r+0x728>
 100cefc:	900d883a 	mov	r6,r18
 100cf00:	980f883a 	mov	r7,r19
 100cf04:	8009883a 	mov	r4,r16
 100cf08:	880b883a 	mov	r5,r17
 100cf0c:	10121880 	call	1012188 <__divdf3>
 100cf10:	180b883a 	mov	r5,r3
 100cf14:	1009883a 	mov	r4,r2
 100cf18:	10127800 	call	1012780 <__fixdfsi>
 100cf1c:	1009883a 	mov	r4,r2
 100cf20:	1029883a 	mov	r20,r2
 100cf24:	10126880 	call	1012688 <__floatsidf>
 100cf28:	180f883a 	mov	r7,r3
 100cf2c:	9009883a 	mov	r4,r18
 100cf30:	980b883a 	mov	r5,r19
 100cf34:	100d883a 	mov	r6,r2
 100cf38:	1011dc40 	call	1011dc4 <__muldf3>
 100cf3c:	180f883a 	mov	r7,r3
 100cf40:	880b883a 	mov	r5,r17
 100cf44:	8009883a 	mov	r4,r16
 100cf48:	100d883a 	mov	r6,r2
 100cf4c:	1011cd00 	call	1011cd0 <__subdf3>
 100cf50:	1015883a 	mov	r10,r2
 100cf54:	a0800c04 	addi	r2,r20,48
 100cf58:	e0800005 	stb	r2,0(fp)
 100cf5c:	e7000044 	addi	fp,fp,1
 100cf60:	1817883a 	mov	r11,r3
 100cf64:	e57fd61e 	bne	fp,r21,100cec0 <_dtoa_r+0x5d8>
 100cf68:	500d883a 	mov	r6,r10
 100cf6c:	180f883a 	mov	r7,r3
 100cf70:	5009883a 	mov	r4,r10
 100cf74:	180b883a 	mov	r5,r3
 100cf78:	1011d500 	call	1011d50 <__adddf3>
 100cf7c:	100d883a 	mov	r6,r2
 100cf80:	9009883a 	mov	r4,r18
 100cf84:	980b883a 	mov	r5,r19
 100cf88:	180f883a 	mov	r7,r3
 100cf8c:	1021883a 	mov	r16,r2
 100cf90:	1823883a 	mov	r17,r3
 100cf94:	10126000 	call	1012600 <__ltdf2>
 100cf98:	10000816 	blt	r2,zero,100cfbc <_dtoa_r+0x6d4>
 100cf9c:	980b883a 	mov	r5,r19
 100cfa0:	800d883a 	mov	r6,r16
 100cfa4:	880f883a 	mov	r7,r17
 100cfa8:	9009883a 	mov	r4,r18
 100cfac:	10123e00 	call	10123e0 <__eqdf2>
 100cfb0:	1000171e 	bne	r2,zero,100d010 <_dtoa_r+0x728>
 100cfb4:	a080004c 	andi	r2,r20,1
 100cfb8:	10001526 	beq	r2,zero,100d010 <_dtoa_r+0x728>
 100cfbc:	d8800d17 	ldw	r2,52(sp)
 100cfc0:	d8800415 	stw	r2,16(sp)
 100cfc4:	e009883a 	mov	r4,fp
 100cfc8:	213fffc4 	addi	r4,r4,-1
 100cfcc:	20c00007 	ldb	r3,0(r4)
 100cfd0:	00800e44 	movi	r2,57
 100cfd4:	1880081e 	bne	r3,r2,100cff8 <_dtoa_r+0x710>
 100cfd8:	d8800517 	ldw	r2,20(sp)
 100cfdc:	113ffa1e 	bne	r2,r4,100cfc8 <_dtoa_r+0x6e0>
 100cfe0:	d8c00417 	ldw	r3,16(sp)
 100cfe4:	d9800517 	ldw	r6,20(sp)
 100cfe8:	00800c04 	movi	r2,48
 100cfec:	18c00044 	addi	r3,r3,1
 100cff0:	d8c00415 	stw	r3,16(sp)
 100cff4:	30800005 	stb	r2,0(r6)
 100cff8:	20800003 	ldbu	r2,0(r4)
 100cffc:	d8c00417 	ldw	r3,16(sp)
 100d000:	27000044 	addi	fp,r4,1
 100d004:	10800044 	addi	r2,r2,1
 100d008:	d8c00d15 	stw	r3,52(sp)
 100d00c:	20800005 	stb	r2,0(r4)
 100d010:	d9001617 	ldw	r4,88(sp)
 100d014:	d9400717 	ldw	r5,28(sp)
 100d018:	100f0400 	call	100f040 <_Bfree>
 100d01c:	e0000005 	stb	zero,0(fp)
 100d020:	d9800d17 	ldw	r6,52(sp)
 100d024:	d8c02717 	ldw	r3,156(sp)
 100d028:	d9002917 	ldw	r4,164(sp)
 100d02c:	30800044 	addi	r2,r6,1
 100d030:	18800015 	stw	r2,0(r3)
 100d034:	20029c26 	beq	r4,zero,100daa8 <_dtoa_r+0x11c0>
 100d038:	d8c00517 	ldw	r3,20(sp)
 100d03c:	27000015 	stw	fp,0(r4)
 100d040:	003e5d06 	br	100c9b8 <_dtoa_r+0xd0>
 100d044:	d9800d17 	ldw	r6,52(sp)
 100d048:	00c040b4 	movhi	r3,258
 100d04c:	18fd1d04 	addi	r3,r3,-2956
 100d050:	d9001217 	ldw	r4,72(sp)
 100d054:	300490fa 	slli	r2,r6,3
 100d058:	d9401317 	ldw	r5,76(sp)
 100d05c:	10c5883a 	add	r2,r2,r3
 100d060:	12000017 	ldw	r8,0(r2)
 100d064:	12400117 	ldw	r9,4(r2)
 100d068:	400d883a 	mov	r6,r8
 100d06c:	480f883a 	mov	r7,r9
 100d070:	10126000 	call	1012600 <__ltdf2>
 100d074:	1000030e 	bge	r2,zero,100d084 <_dtoa_r+0x79c>
 100d078:	d8800d17 	ldw	r2,52(sp)
 100d07c:	10bfffc4 	addi	r2,r2,-1
 100d080:	d8800d15 	stw	r2,52(sp)
 100d084:	d8000c15 	stw	zero,48(sp)
 100d088:	003ea806 	br	100cb2c <_dtoa_r+0x244>
 100d08c:	d9000b17 	ldw	r4,44(sp)
 100d090:	202cc03a 	cmpne	r22,r4,zero
 100d094:	b000c71e 	bne	r22,zero,100d3b4 <_dtoa_r+0xacc>
 100d098:	dc001117 	ldw	r16,68(sp)
 100d09c:	dc801017 	ldw	r18,64(sp)
 100d0a0:	0027883a 	mov	r19,zero
 100d0a4:	04000b0e 	bge	zero,r16,100d0d4 <_dtoa_r+0x7ec>
 100d0a8:	d8c00a17 	ldw	r3,40(sp)
 100d0ac:	00c0090e 	bge	zero,r3,100d0d4 <_dtoa_r+0x7ec>
 100d0b0:	8005883a 	mov	r2,r16
 100d0b4:	1c011316 	blt	r3,r16,100d504 <_dtoa_r+0xc1c>
 100d0b8:	d9000a17 	ldw	r4,40(sp)
 100d0bc:	d9801117 	ldw	r6,68(sp)
 100d0c0:	80a1c83a 	sub	r16,r16,r2
 100d0c4:	2089c83a 	sub	r4,r4,r2
 100d0c8:	308dc83a 	sub	r6,r6,r2
 100d0cc:	d9000a15 	stw	r4,40(sp)
 100d0d0:	d9801115 	stw	r6,68(sp)
 100d0d4:	d8801017 	ldw	r2,64(sp)
 100d0d8:	0080150e 	bge	zero,r2,100d130 <_dtoa_r+0x848>
 100d0dc:	d8c00b17 	ldw	r3,44(sp)
 100d0e0:	1805003a 	cmpeq	r2,r3,zero
 100d0e4:	1001c91e 	bne	r2,zero,100d80c <_dtoa_r+0xf24>
 100d0e8:	04800e0e 	bge	zero,r18,100d124 <_dtoa_r+0x83c>
 100d0ec:	d9001617 	ldw	r4,88(sp)
 100d0f0:	980b883a 	mov	r5,r19
 100d0f4:	900d883a 	mov	r6,r18
 100d0f8:	100fdf40 	call	100fdf4 <__pow5mult>
 100d0fc:	d9001617 	ldw	r4,88(sp)
 100d100:	d9800717 	ldw	r6,28(sp)
 100d104:	100b883a 	mov	r5,r2
 100d108:	1027883a 	mov	r19,r2
 100d10c:	100fad00 	call	100fad0 <__multiply>
 100d110:	d9001617 	ldw	r4,88(sp)
 100d114:	d9400717 	ldw	r5,28(sp)
 100d118:	1023883a 	mov	r17,r2
 100d11c:	100f0400 	call	100f040 <_Bfree>
 100d120:	dc400715 	stw	r17,28(sp)
 100d124:	d9001017 	ldw	r4,64(sp)
 100d128:	248dc83a 	sub	r6,r4,r18
 100d12c:	30010e1e 	bne	r6,zero,100d568 <_dtoa_r+0xc80>
 100d130:	d9001617 	ldw	r4,88(sp)
 100d134:	04400044 	movi	r17,1
 100d138:	880b883a 	mov	r5,r17
 100d13c:	100fcb80 	call	100fcb8 <__i2b>
 100d140:	d9800917 	ldw	r6,36(sp)
 100d144:	1025883a 	mov	r18,r2
 100d148:	0180040e 	bge	zero,r6,100d15c <_dtoa_r+0x874>
 100d14c:	d9001617 	ldw	r4,88(sp)
 100d150:	100b883a 	mov	r5,r2
 100d154:	100fdf40 	call	100fdf4 <__pow5mult>
 100d158:	1025883a 	mov	r18,r2
 100d15c:	d8801717 	ldw	r2,92(sp)
 100d160:	8880f30e 	bge	r17,r2,100d530 <_dtoa_r+0xc48>
 100d164:	0023883a 	mov	r17,zero
 100d168:	d9800917 	ldw	r6,36(sp)
 100d16c:	30019e1e 	bne	r6,zero,100d7e8 <_dtoa_r+0xf00>
 100d170:	00c00044 	movi	r3,1
 100d174:	d9000a17 	ldw	r4,40(sp)
 100d178:	20c5883a 	add	r2,r4,r3
 100d17c:	10c007cc 	andi	r3,r2,31
 100d180:	1800841e 	bne	r3,zero,100d394 <_dtoa_r+0xaac>
 100d184:	00800704 	movi	r2,28
 100d188:	d9000a17 	ldw	r4,40(sp)
 100d18c:	d9801117 	ldw	r6,68(sp)
 100d190:	80a1883a 	add	r16,r16,r2
 100d194:	2089883a 	add	r4,r4,r2
 100d198:	308d883a 	add	r6,r6,r2
 100d19c:	d9000a15 	stw	r4,40(sp)
 100d1a0:	d9801115 	stw	r6,68(sp)
 100d1a4:	d8801117 	ldw	r2,68(sp)
 100d1a8:	0080050e 	bge	zero,r2,100d1c0 <_dtoa_r+0x8d8>
 100d1ac:	d9400717 	ldw	r5,28(sp)
 100d1b0:	d9001617 	ldw	r4,88(sp)
 100d1b4:	100d883a 	mov	r6,r2
 100d1b8:	100f9840 	call	100f984 <__lshift>
 100d1bc:	d8800715 	stw	r2,28(sp)
 100d1c0:	d8c00a17 	ldw	r3,40(sp)
 100d1c4:	00c0050e 	bge	zero,r3,100d1dc <_dtoa_r+0x8f4>
 100d1c8:	d9001617 	ldw	r4,88(sp)
 100d1cc:	900b883a 	mov	r5,r18
 100d1d0:	180d883a 	mov	r6,r3
 100d1d4:	100f9840 	call	100f984 <__lshift>
 100d1d8:	1025883a 	mov	r18,r2
 100d1dc:	d9000c17 	ldw	r4,48(sp)
 100d1e0:	2005003a 	cmpeq	r2,r4,zero
 100d1e4:	10016f26 	beq	r2,zero,100d7a4 <_dtoa_r+0xebc>
 100d1e8:	d9000f17 	ldw	r4,60(sp)
 100d1ec:	0102170e 	bge	zero,r4,100da4c <_dtoa_r+0x1164>
 100d1f0:	d9800b17 	ldw	r6,44(sp)
 100d1f4:	3005003a 	cmpeq	r2,r6,zero
 100d1f8:	1000881e 	bne	r2,zero,100d41c <_dtoa_r+0xb34>
 100d1fc:	0400050e 	bge	zero,r16,100d214 <_dtoa_r+0x92c>
 100d200:	d9001617 	ldw	r4,88(sp)
 100d204:	980b883a 	mov	r5,r19
 100d208:	800d883a 	mov	r6,r16
 100d20c:	100f9840 	call	100f984 <__lshift>
 100d210:	1027883a 	mov	r19,r2
 100d214:	8804c03a 	cmpne	r2,r17,zero
 100d218:	1002541e 	bne	r2,zero,100db6c <_dtoa_r+0x1284>
 100d21c:	980b883a 	mov	r5,r19
 100d220:	dd800517 	ldw	r22,20(sp)
 100d224:	dcc00615 	stw	r19,24(sp)
 100d228:	a700004c 	andi	fp,r20,1
 100d22c:	2827883a 	mov	r19,r5
 100d230:	d9000717 	ldw	r4,28(sp)
 100d234:	900b883a 	mov	r5,r18
 100d238:	100c6d00 	call	100c6d0 <quorem>
 100d23c:	d9000717 	ldw	r4,28(sp)
 100d240:	d9400617 	ldw	r5,24(sp)
 100d244:	1023883a 	mov	r17,r2
 100d248:	8dc00c04 	addi	r23,r17,48
 100d24c:	100f19c0 	call	100f19c <__mcmp>
 100d250:	d9001617 	ldw	r4,88(sp)
 100d254:	900b883a 	mov	r5,r18
 100d258:	980d883a 	mov	r6,r19
 100d25c:	1029883a 	mov	r20,r2
 100d260:	100f7f80 	call	100f7f8 <__mdiff>
 100d264:	102b883a 	mov	r21,r2
 100d268:	10800317 	ldw	r2,12(r2)
 100d26c:	1001281e 	bne	r2,zero,100d710 <_dtoa_r+0xe28>
 100d270:	d9000717 	ldw	r4,28(sp)
 100d274:	a80b883a 	mov	r5,r21
 100d278:	100f19c0 	call	100f19c <__mcmp>
 100d27c:	d9001617 	ldw	r4,88(sp)
 100d280:	1021883a 	mov	r16,r2
 100d284:	a80b883a 	mov	r5,r21
 100d288:	100f0400 	call	100f040 <_Bfree>
 100d28c:	8000041e 	bne	r16,zero,100d2a0 <_dtoa_r+0x9b8>
 100d290:	d8801717 	ldw	r2,92(sp)
 100d294:	1000021e 	bne	r2,zero,100d2a0 <_dtoa_r+0x9b8>
 100d298:	e004c03a 	cmpne	r2,fp,zero
 100d29c:	10011726 	beq	r2,zero,100d6fc <_dtoa_r+0xe14>
 100d2a0:	a0010616 	blt	r20,zero,100d6bc <_dtoa_r+0xdd4>
 100d2a4:	a000041e 	bne	r20,zero,100d2b8 <_dtoa_r+0x9d0>
 100d2a8:	d8c01717 	ldw	r3,92(sp)
 100d2ac:	1800021e 	bne	r3,zero,100d2b8 <_dtoa_r+0x9d0>
 100d2b0:	e004c03a 	cmpne	r2,fp,zero
 100d2b4:	10010126 	beq	r2,zero,100d6bc <_dtoa_r+0xdd4>
 100d2b8:	04023d16 	blt	zero,r16,100dbb0 <_dtoa_r+0x12c8>
 100d2bc:	b5c00005 	stb	r23,0(r22)
 100d2c0:	d9800517 	ldw	r6,20(sp)
 100d2c4:	d9000f17 	ldw	r4,60(sp)
 100d2c8:	b5800044 	addi	r22,r22,1
 100d2cc:	3105883a 	add	r2,r6,r4
 100d2d0:	b0806526 	beq	r22,r2,100d468 <_dtoa_r+0xb80>
 100d2d4:	d9400717 	ldw	r5,28(sp)
 100d2d8:	d9001617 	ldw	r4,88(sp)
 100d2dc:	01800284 	movi	r6,10
 100d2e0:	000f883a 	mov	r7,zero
 100d2e4:	100fcf40 	call	100fcf4 <__multadd>
 100d2e8:	d8800715 	stw	r2,28(sp)
 100d2ec:	d8800617 	ldw	r2,24(sp)
 100d2f0:	14c10c26 	beq	r2,r19,100d724 <_dtoa_r+0xe3c>
 100d2f4:	d9400617 	ldw	r5,24(sp)
 100d2f8:	d9001617 	ldw	r4,88(sp)
 100d2fc:	01800284 	movi	r6,10
 100d300:	000f883a 	mov	r7,zero
 100d304:	100fcf40 	call	100fcf4 <__multadd>
 100d308:	d9001617 	ldw	r4,88(sp)
 100d30c:	980b883a 	mov	r5,r19
 100d310:	01800284 	movi	r6,10
 100d314:	000f883a 	mov	r7,zero
 100d318:	d8800615 	stw	r2,24(sp)
 100d31c:	100fcf40 	call	100fcf4 <__multadd>
 100d320:	1027883a 	mov	r19,r2
 100d324:	003fc206 	br	100d230 <_dtoa_r+0x948>
 100d328:	2445c83a 	sub	r2,r4,r17
 100d32c:	a088983a 	sll	r4,r20,r2
 100d330:	003e4b06 	br	100cc60 <_dtoa_r+0x378>
 100d334:	01bfffc4 	movi	r6,-1
 100d338:	00800044 	movi	r2,1
 100d33c:	d9800e15 	stw	r6,56(sp)
 100d340:	d9800f15 	stw	r6,60(sp)
 100d344:	d8800b15 	stw	r2,44(sp)
 100d348:	d8c01617 	ldw	r3,88(sp)
 100d34c:	008005c4 	movi	r2,23
 100d350:	18001115 	stw	zero,68(r3)
 100d354:	1580082e 	bgeu	r2,r22,100d378 <_dtoa_r+0xa90>
 100d358:	00c00104 	movi	r3,4
 100d35c:	0009883a 	mov	r4,zero
 100d360:	18c7883a 	add	r3,r3,r3
 100d364:	18800504 	addi	r2,r3,20
 100d368:	21000044 	addi	r4,r4,1
 100d36c:	b0bffc2e 	bgeu	r22,r2,100d360 <_dtoa_r+0xa78>
 100d370:	d9801617 	ldw	r6,88(sp)
 100d374:	31001115 	stw	r4,68(r6)
 100d378:	dc000f17 	ldw	r16,60(sp)
 100d37c:	003e4b06 	br	100ccac <_dtoa_r+0x3c4>
 100d380:	d9801717 	ldw	r6,92(sp)
 100d384:	0023883a 	mov	r17,zero
 100d388:	31bfff04 	addi	r6,r6,-4
 100d38c:	d9801715 	stw	r6,92(sp)
 100d390:	003df806 	br	100cb74 <_dtoa_r+0x28c>
 100d394:	00800804 	movi	r2,32
 100d398:	10c9c83a 	sub	r4,r2,r3
 100d39c:	00c00104 	movi	r3,4
 100d3a0:	19005a16 	blt	r3,r4,100d50c <_dtoa_r+0xc24>
 100d3a4:	008000c4 	movi	r2,3
 100d3a8:	113f7e16 	blt	r2,r4,100d1a4 <_dtoa_r+0x8bc>
 100d3ac:	20800704 	addi	r2,r4,28
 100d3b0:	003f7506 	br	100d188 <_dtoa_r+0x8a0>
 100d3b4:	d9801717 	ldw	r6,92(sp)
 100d3b8:	00800044 	movi	r2,1
 100d3bc:	1180a10e 	bge	r2,r6,100d644 <_dtoa_r+0xd5c>
 100d3c0:	d9800f17 	ldw	r6,60(sp)
 100d3c4:	d8c01017 	ldw	r3,64(sp)
 100d3c8:	30bfffc4 	addi	r2,r6,-1
 100d3cc:	1881c616 	blt	r3,r2,100dae8 <_dtoa_r+0x1200>
 100d3d0:	18a5c83a 	sub	r18,r3,r2
 100d3d4:	d8800f17 	ldw	r2,60(sp)
 100d3d8:	10026216 	blt	r2,zero,100dd64 <_dtoa_r+0x147c>
 100d3dc:	dc001117 	ldw	r16,68(sp)
 100d3e0:	1007883a 	mov	r3,r2
 100d3e4:	d9800a17 	ldw	r6,40(sp)
 100d3e8:	d8801117 	ldw	r2,68(sp)
 100d3ec:	d9001617 	ldw	r4,88(sp)
 100d3f0:	30cd883a 	add	r6,r6,r3
 100d3f4:	10c5883a 	add	r2,r2,r3
 100d3f8:	01400044 	movi	r5,1
 100d3fc:	d9800a15 	stw	r6,40(sp)
 100d400:	d8801115 	stw	r2,68(sp)
 100d404:	100fcb80 	call	100fcb8 <__i2b>
 100d408:	1027883a 	mov	r19,r2
 100d40c:	003f2506 	br	100d0a4 <_dtoa_r+0x7bc>
 100d410:	00c040b4 	movhi	r3,258
 100d414:	18fcff04 	addi	r3,r3,-3076
 100d418:	003d6706 	br	100c9b8 <_dtoa_r+0xd0>
 100d41c:	dd800517 	ldw	r22,20(sp)
 100d420:	04000044 	movi	r16,1
 100d424:	00000706 	br	100d444 <_dtoa_r+0xb5c>
 100d428:	d9400717 	ldw	r5,28(sp)
 100d42c:	d9001617 	ldw	r4,88(sp)
 100d430:	01800284 	movi	r6,10
 100d434:	000f883a 	mov	r7,zero
 100d438:	100fcf40 	call	100fcf4 <__multadd>
 100d43c:	d8800715 	stw	r2,28(sp)
 100d440:	84000044 	addi	r16,r16,1
 100d444:	d9000717 	ldw	r4,28(sp)
 100d448:	900b883a 	mov	r5,r18
 100d44c:	100c6d00 	call	100c6d0 <quorem>
 100d450:	15c00c04 	addi	r23,r2,48
 100d454:	b5c00005 	stb	r23,0(r22)
 100d458:	d8c00f17 	ldw	r3,60(sp)
 100d45c:	b5800044 	addi	r22,r22,1
 100d460:	80fff116 	blt	r16,r3,100d428 <_dtoa_r+0xb40>
 100d464:	d8000615 	stw	zero,24(sp)
 100d468:	d9400717 	ldw	r5,28(sp)
 100d46c:	d9001617 	ldw	r4,88(sp)
 100d470:	01800044 	movi	r6,1
 100d474:	100f9840 	call	100f984 <__lshift>
 100d478:	1009883a 	mov	r4,r2
 100d47c:	900b883a 	mov	r5,r18
 100d480:	d8800715 	stw	r2,28(sp)
 100d484:	100f19c0 	call	100f19c <__mcmp>
 100d488:	00803c0e 	bge	zero,r2,100d57c <_dtoa_r+0xc94>
 100d48c:	b009883a 	mov	r4,r22
 100d490:	213fffc4 	addi	r4,r4,-1
 100d494:	21400003 	ldbu	r5,0(r4)
 100d498:	00800e44 	movi	r2,57
 100d49c:	28c03fcc 	andi	r3,r5,255
 100d4a0:	18c0201c 	xori	r3,r3,128
 100d4a4:	18ffe004 	addi	r3,r3,-128
 100d4a8:	1881981e 	bne	r3,r2,100db0c <_dtoa_r+0x1224>
 100d4ac:	d9800517 	ldw	r6,20(sp)
 100d4b0:	21bff71e 	bne	r4,r6,100d490 <_dtoa_r+0xba8>
 100d4b4:	d8800d17 	ldw	r2,52(sp)
 100d4b8:	37000044 	addi	fp,r6,1
 100d4bc:	10800044 	addi	r2,r2,1
 100d4c0:	d8800d15 	stw	r2,52(sp)
 100d4c4:	00800c44 	movi	r2,49
 100d4c8:	30800005 	stb	r2,0(r6)
 100d4cc:	d9001617 	ldw	r4,88(sp)
 100d4d0:	900b883a 	mov	r5,r18
 100d4d4:	100f0400 	call	100f040 <_Bfree>
 100d4d8:	983ecd26 	beq	r19,zero,100d010 <_dtoa_r+0x728>
 100d4dc:	d8c00617 	ldw	r3,24(sp)
 100d4e0:	18000426 	beq	r3,zero,100d4f4 <_dtoa_r+0xc0c>
 100d4e4:	1cc00326 	beq	r3,r19,100d4f4 <_dtoa_r+0xc0c>
 100d4e8:	d9001617 	ldw	r4,88(sp)
 100d4ec:	180b883a 	mov	r5,r3
 100d4f0:	100f0400 	call	100f040 <_Bfree>
 100d4f4:	d9001617 	ldw	r4,88(sp)
 100d4f8:	980b883a 	mov	r5,r19
 100d4fc:	100f0400 	call	100f040 <_Bfree>
 100d500:	003ec306 	br	100d010 <_dtoa_r+0x728>
 100d504:	1805883a 	mov	r2,r3
 100d508:	003eeb06 	br	100d0b8 <_dtoa_r+0x7d0>
 100d50c:	d9800a17 	ldw	r6,40(sp)
 100d510:	d8c01117 	ldw	r3,68(sp)
 100d514:	20bfff04 	addi	r2,r4,-4
 100d518:	308d883a 	add	r6,r6,r2
 100d51c:	1887883a 	add	r3,r3,r2
 100d520:	80a1883a 	add	r16,r16,r2
 100d524:	d9800a15 	stw	r6,40(sp)
 100d528:	d8c01115 	stw	r3,68(sp)
 100d52c:	003f1d06 	br	100d1a4 <_dtoa_r+0x8bc>
 100d530:	a03f0c1e 	bne	r20,zero,100d164 <_dtoa_r+0x87c>
 100d534:	00800434 	movhi	r2,16
 100d538:	10bfffc4 	addi	r2,r2,-1
 100d53c:	a884703a 	and	r2,r21,r2
 100d540:	103f081e 	bne	r2,zero,100d164 <_dtoa_r+0x87c>
 100d544:	a89ffc2c 	andhi	r2,r21,32752
 100d548:	103f0626 	beq	r2,zero,100d164 <_dtoa_r+0x87c>
 100d54c:	d8c01117 	ldw	r3,68(sp)
 100d550:	d9000a17 	ldw	r4,40(sp)
 100d554:	18c00044 	addi	r3,r3,1
 100d558:	21000044 	addi	r4,r4,1
 100d55c:	d8c01115 	stw	r3,68(sp)
 100d560:	d9000a15 	stw	r4,40(sp)
 100d564:	003f0006 	br	100d168 <_dtoa_r+0x880>
 100d568:	d9400717 	ldw	r5,28(sp)
 100d56c:	d9001617 	ldw	r4,88(sp)
 100d570:	100fdf40 	call	100fdf4 <__pow5mult>
 100d574:	d8800715 	stw	r2,28(sp)
 100d578:	003eed06 	br	100d130 <_dtoa_r+0x848>
 100d57c:	1000021e 	bne	r2,zero,100d588 <_dtoa_r+0xca0>
 100d580:	b880004c 	andi	r2,r23,1
 100d584:	103fc11e 	bne	r2,zero,100d48c <_dtoa_r+0xba4>
 100d588:	b5bfffc4 	addi	r22,r22,-1
 100d58c:	b0c00007 	ldb	r3,0(r22)
 100d590:	00800c04 	movi	r2,48
 100d594:	18bffc26 	beq	r3,r2,100d588 <_dtoa_r+0xca0>
 100d598:	b7000044 	addi	fp,r22,1
 100d59c:	003fcb06 	br	100d4cc <_dtoa_r+0xbe4>
 100d5a0:	d9800d17 	ldw	r6,52(sp)
 100d5a4:	018fc83a 	sub	r7,zero,r6
 100d5a8:	3801f726 	beq	r7,zero,100dd88 <_dtoa_r+0x14a0>
 100d5ac:	398003cc 	andi	r6,r7,15
 100d5b0:	300c90fa 	slli	r6,r6,3
 100d5b4:	014040b4 	movhi	r5,258
 100d5b8:	297d1d04 	addi	r5,r5,-2956
 100d5bc:	d9001217 	ldw	r4,72(sp)
 100d5c0:	314d883a 	add	r6,r6,r5
 100d5c4:	30c00117 	ldw	r3,4(r6)
 100d5c8:	30800017 	ldw	r2,0(r6)
 100d5cc:	d9401317 	ldw	r5,76(sp)
 100d5d0:	3821d13a 	srai	r16,r7,4
 100d5d4:	100d883a 	mov	r6,r2
 100d5d8:	180f883a 	mov	r7,r3
 100d5dc:	1011dc40 	call	1011dc4 <__muldf3>
 100d5e0:	1011883a 	mov	r8,r2
 100d5e4:	1813883a 	mov	r9,r3
 100d5e8:	1029883a 	mov	r20,r2
 100d5ec:	182b883a 	mov	r21,r3
 100d5f0:	8001e526 	beq	r16,zero,100dd88 <_dtoa_r+0x14a0>
 100d5f4:	05800084 	movi	r22,2
 100d5f8:	044040b4 	movhi	r17,258
 100d5fc:	8c7d4f04 	addi	r17,r17,-2756
 100d600:	8080004c 	andi	r2,r16,1
 100d604:	1005003a 	cmpeq	r2,r2,zero
 100d608:	1000081e 	bne	r2,zero,100d62c <_dtoa_r+0xd44>
 100d60c:	89800017 	ldw	r6,0(r17)
 100d610:	89c00117 	ldw	r7,4(r17)
 100d614:	480b883a 	mov	r5,r9
 100d618:	4009883a 	mov	r4,r8
 100d61c:	1011dc40 	call	1011dc4 <__muldf3>
 100d620:	1011883a 	mov	r8,r2
 100d624:	b5800044 	addi	r22,r22,1
 100d628:	1813883a 	mov	r9,r3
 100d62c:	8021d07a 	srai	r16,r16,1
 100d630:	8c400204 	addi	r17,r17,8
 100d634:	803ff21e 	bne	r16,zero,100d600 <_dtoa_r+0xd18>
 100d638:	4029883a 	mov	r20,r8
 100d63c:	482b883a 	mov	r21,r9
 100d640:	003dca06 	br	100cd6c <_dtoa_r+0x484>
 100d644:	d9000817 	ldw	r4,32(sp)
 100d648:	2005003a 	cmpeq	r2,r4,zero
 100d64c:	1001f61e 	bne	r2,zero,100de28 <_dtoa_r+0x1540>
 100d650:	dc001117 	ldw	r16,68(sp)
 100d654:	dc801017 	ldw	r18,64(sp)
 100d658:	18c10cc4 	addi	r3,r3,1075
 100d65c:	003f6106 	br	100d3e4 <_dtoa_r+0xafc>
 100d660:	d8000b15 	stw	zero,44(sp)
 100d664:	d9802617 	ldw	r6,152(sp)
 100d668:	d8c00d17 	ldw	r3,52(sp)
 100d66c:	30800044 	addi	r2,r6,1
 100d670:	18ad883a 	add	r22,r3,r2
 100d674:	b13fffc4 	addi	r4,r22,-1
 100d678:	d9000e15 	stw	r4,56(sp)
 100d67c:	0581f60e 	bge	zero,r22,100de58 <_dtoa_r+0x1570>
 100d680:	dd800f15 	stw	r22,60(sp)
 100d684:	003f3006 	br	100d348 <_dtoa_r+0xa60>
 100d688:	d8000b15 	stw	zero,44(sp)
 100d68c:	d9002617 	ldw	r4,152(sp)
 100d690:	0101eb0e 	bge	zero,r4,100de40 <_dtoa_r+0x1558>
 100d694:	202d883a 	mov	r22,r4
 100d698:	d9000e15 	stw	r4,56(sp)
 100d69c:	d9000f15 	stw	r4,60(sp)
 100d6a0:	003f2906 	br	100d348 <_dtoa_r+0xa60>
 100d6a4:	01800044 	movi	r6,1
 100d6a8:	d9800b15 	stw	r6,44(sp)
 100d6ac:	003ff706 	br	100d68c <_dtoa_r+0xda4>
 100d6b0:	01000044 	movi	r4,1
 100d6b4:	d9000b15 	stw	r4,44(sp)
 100d6b8:	003fea06 	br	100d664 <_dtoa_r+0xd7c>
 100d6bc:	04000c0e 	bge	zero,r16,100d6f0 <_dtoa_r+0xe08>
 100d6c0:	d9400717 	ldw	r5,28(sp)
 100d6c4:	d9001617 	ldw	r4,88(sp)
 100d6c8:	01800044 	movi	r6,1
 100d6cc:	100f9840 	call	100f984 <__lshift>
 100d6d0:	1009883a 	mov	r4,r2
 100d6d4:	900b883a 	mov	r5,r18
 100d6d8:	d8800715 	stw	r2,28(sp)
 100d6dc:	100f19c0 	call	100f19c <__mcmp>
 100d6e0:	0081e00e 	bge	zero,r2,100de64 <_dtoa_r+0x157c>
 100d6e4:	bdc00044 	addi	r23,r23,1
 100d6e8:	00800e84 	movi	r2,58
 100d6ec:	b881a226 	beq	r23,r2,100dd78 <_dtoa_r+0x1490>
 100d6f0:	b7000044 	addi	fp,r22,1
 100d6f4:	b5c00005 	stb	r23,0(r22)
 100d6f8:	003f7406 	br	100d4cc <_dtoa_r+0xbe4>
 100d6fc:	00800e44 	movi	r2,57
 100d700:	b8819d26 	beq	r23,r2,100dd78 <_dtoa_r+0x1490>
 100d704:	053ffa0e 	bge	zero,r20,100d6f0 <_dtoa_r+0xe08>
 100d708:	8dc00c44 	addi	r23,r17,49
 100d70c:	003ff806 	br	100d6f0 <_dtoa_r+0xe08>
 100d710:	d9001617 	ldw	r4,88(sp)
 100d714:	a80b883a 	mov	r5,r21
 100d718:	04000044 	movi	r16,1
 100d71c:	100f0400 	call	100f040 <_Bfree>
 100d720:	003edf06 	br	100d2a0 <_dtoa_r+0x9b8>
 100d724:	d9001617 	ldw	r4,88(sp)
 100d728:	980b883a 	mov	r5,r19
 100d72c:	01800284 	movi	r6,10
 100d730:	000f883a 	mov	r7,zero
 100d734:	100fcf40 	call	100fcf4 <__multadd>
 100d738:	1027883a 	mov	r19,r2
 100d73c:	d8800615 	stw	r2,24(sp)
 100d740:	003ebb06 	br	100d230 <_dtoa_r+0x948>
 100d744:	d9801117 	ldw	r6,68(sp)
 100d748:	d8800d17 	ldw	r2,52(sp)
 100d74c:	d8000915 	stw	zero,36(sp)
 100d750:	308dc83a 	sub	r6,r6,r2
 100d754:	0087c83a 	sub	r3,zero,r2
 100d758:	d9801115 	stw	r6,68(sp)
 100d75c:	d8c01015 	stw	r3,64(sp)
 100d760:	003cfe06 	br	100cb5c <_dtoa_r+0x274>
 100d764:	018dc83a 	sub	r6,zero,r6
 100d768:	d9801115 	stw	r6,68(sp)
 100d76c:	d8000a15 	stw	zero,40(sp)
 100d770:	003cf306 	br	100cb40 <_dtoa_r+0x258>
 100d774:	d9000d17 	ldw	r4,52(sp)
 100d778:	10126880 	call	1012688 <__floatsidf>
 100d77c:	880b883a 	mov	r5,r17
 100d780:	8009883a 	mov	r4,r16
 100d784:	180f883a 	mov	r7,r3
 100d788:	100d883a 	mov	r6,r2
 100d78c:	10124680 	call	1012468 <__nedf2>
 100d790:	103ce126 	beq	r2,zero,100cb18 <_dtoa_r+0x230>
 100d794:	d9800d17 	ldw	r6,52(sp)
 100d798:	31bfffc4 	addi	r6,r6,-1
 100d79c:	d9800d15 	stw	r6,52(sp)
 100d7a0:	003cdd06 	br	100cb18 <_dtoa_r+0x230>
 100d7a4:	d9000717 	ldw	r4,28(sp)
 100d7a8:	900b883a 	mov	r5,r18
 100d7ac:	100f19c0 	call	100f19c <__mcmp>
 100d7b0:	103e8d0e 	bge	r2,zero,100d1e8 <_dtoa_r+0x900>
 100d7b4:	d9400717 	ldw	r5,28(sp)
 100d7b8:	d9001617 	ldw	r4,88(sp)
 100d7bc:	01800284 	movi	r6,10
 100d7c0:	000f883a 	mov	r7,zero
 100d7c4:	100fcf40 	call	100fcf4 <__multadd>
 100d7c8:	d9800d17 	ldw	r6,52(sp)
 100d7cc:	d8800715 	stw	r2,28(sp)
 100d7d0:	31bfffc4 	addi	r6,r6,-1
 100d7d4:	d9800d15 	stw	r6,52(sp)
 100d7d8:	b001a71e 	bne	r22,zero,100de78 <_dtoa_r+0x1590>
 100d7dc:	d8800e17 	ldw	r2,56(sp)
 100d7e0:	d8800f15 	stw	r2,60(sp)
 100d7e4:	003e8006 	br	100d1e8 <_dtoa_r+0x900>
 100d7e8:	90800417 	ldw	r2,16(r18)
 100d7ec:	1085883a 	add	r2,r2,r2
 100d7f0:	1085883a 	add	r2,r2,r2
 100d7f4:	1485883a 	add	r2,r2,r18
 100d7f8:	11000417 	ldw	r4,16(r2)
 100d7fc:	100f0680 	call	100f068 <__hi0bits>
 100d800:	00c00804 	movi	r3,32
 100d804:	1887c83a 	sub	r3,r3,r2
 100d808:	003e5a06 	br	100d174 <_dtoa_r+0x88c>
 100d80c:	d9400717 	ldw	r5,28(sp)
 100d810:	d9801017 	ldw	r6,64(sp)
 100d814:	d9001617 	ldw	r4,88(sp)
 100d818:	100fdf40 	call	100fdf4 <__pow5mult>
 100d81c:	d8800715 	stw	r2,28(sp)
 100d820:	003e4306 	br	100d130 <_dtoa_r+0x848>
 100d824:	d9800f17 	ldw	r6,60(sp)
 100d828:	d8800d17 	ldw	r2,52(sp)
 100d82c:	d9800315 	stw	r6,12(sp)
 100d830:	d8800415 	stw	r2,16(sp)
 100d834:	d8c00b17 	ldw	r3,44(sp)
 100d838:	1805003a 	cmpeq	r2,r3,zero
 100d83c:	1000e21e 	bne	r2,zero,100dbc8 <_dtoa_r+0x12e0>
 100d840:	d9000317 	ldw	r4,12(sp)
 100d844:	0005883a 	mov	r2,zero
 100d848:	00cff834 	movhi	r3,16352
 100d84c:	200c90fa 	slli	r6,r4,3
 100d850:	010040b4 	movhi	r4,258
 100d854:	213d1d04 	addi	r4,r4,-2956
 100d858:	180b883a 	mov	r5,r3
 100d85c:	310d883a 	add	r6,r6,r4
 100d860:	327fff17 	ldw	r9,-4(r6)
 100d864:	323ffe17 	ldw	r8,-8(r6)
 100d868:	1009883a 	mov	r4,r2
 100d86c:	480f883a 	mov	r7,r9
 100d870:	400d883a 	mov	r6,r8
 100d874:	10121880 	call	1012188 <__divdf3>
 100d878:	180b883a 	mov	r5,r3
 100d87c:	b00d883a 	mov	r6,r22
 100d880:	b80f883a 	mov	r7,r23
 100d884:	1009883a 	mov	r4,r2
 100d888:	1011cd00 	call	1011cd0 <__subdf3>
 100d88c:	a80b883a 	mov	r5,r21
 100d890:	a009883a 	mov	r4,r20
 100d894:	d8c01915 	stw	r3,100(sp)
 100d898:	d8801815 	stw	r2,96(sp)
 100d89c:	10127800 	call	1012780 <__fixdfsi>
 100d8a0:	1009883a 	mov	r4,r2
 100d8a4:	1027883a 	mov	r19,r2
 100d8a8:	10126880 	call	1012688 <__floatsidf>
 100d8ac:	a80b883a 	mov	r5,r21
 100d8b0:	a009883a 	mov	r4,r20
 100d8b4:	180f883a 	mov	r7,r3
 100d8b8:	100d883a 	mov	r6,r2
 100d8bc:	1011cd00 	call	1011cd0 <__subdf3>
 100d8c0:	d9801817 	ldw	r6,96(sp)
 100d8c4:	1823883a 	mov	r17,r3
 100d8c8:	d8801415 	stw	r2,80(sp)
 100d8cc:	302d883a 	mov	r22,r6
 100d8d0:	d9800517 	ldw	r6,20(sp)
 100d8d4:	9cc00c04 	addi	r19,r19,48
 100d8d8:	dc401515 	stw	r17,84(sp)
 100d8dc:	d8c01917 	ldw	r3,100(sp)
 100d8e0:	34c00005 	stb	r19,0(r6)
 100d8e4:	d8800517 	ldw	r2,20(sp)
 100d8e8:	d9401917 	ldw	r5,100(sp)
 100d8ec:	d9801417 	ldw	r6,80(sp)
 100d8f0:	b009883a 	mov	r4,r22
 100d8f4:	880f883a 	mov	r7,r17
 100d8f8:	182f883a 	mov	r23,r3
 100d8fc:	17000044 	addi	fp,r2,1
 100d900:	10124f00 	call	10124f0 <__gtdf2>
 100d904:	00804e16 	blt	zero,r2,100da40 <_dtoa_r+0x1158>
 100d908:	d9801417 	ldw	r6,80(sp)
 100d90c:	0005883a 	mov	r2,zero
 100d910:	00cffc34 	movhi	r3,16368
 100d914:	180b883a 	mov	r5,r3
 100d918:	880f883a 	mov	r7,r17
 100d91c:	1009883a 	mov	r4,r2
 100d920:	1011cd00 	call	1011cd0 <__subdf3>
 100d924:	d9401917 	ldw	r5,100(sp)
 100d928:	180f883a 	mov	r7,r3
 100d92c:	b009883a 	mov	r4,r22
 100d930:	100d883a 	mov	r6,r2
 100d934:	10124f00 	call	10124f0 <__gtdf2>
 100d938:	00bda216 	blt	zero,r2,100cfc4 <_dtoa_r+0x6dc>
 100d93c:	d8c00317 	ldw	r3,12(sp)
 100d940:	00800044 	movi	r2,1
 100d944:	10c01216 	blt	r2,r3,100d990 <_dtoa_r+0x10a8>
 100d948:	003d4506 	br	100ce60 <_dtoa_r+0x578>
 100d94c:	d9801417 	ldw	r6,80(sp)
 100d950:	0005883a 	mov	r2,zero
 100d954:	00cffc34 	movhi	r3,16368
 100d958:	180b883a 	mov	r5,r3
 100d95c:	880f883a 	mov	r7,r17
 100d960:	1009883a 	mov	r4,r2
 100d964:	1011cd00 	call	1011cd0 <__subdf3>
 100d968:	d9c01b17 	ldw	r7,108(sp)
 100d96c:	180b883a 	mov	r5,r3
 100d970:	1009883a 	mov	r4,r2
 100d974:	b00d883a 	mov	r6,r22
 100d978:	10126000 	call	1012600 <__ltdf2>
 100d97c:	103d9116 	blt	r2,zero,100cfc4 <_dtoa_r+0x6dc>
 100d980:	d9800517 	ldw	r6,20(sp)
 100d984:	d9000317 	ldw	r4,12(sp)
 100d988:	3105883a 	add	r2,r6,r4
 100d98c:	e0bd3426 	beq	fp,r2,100ce60 <_dtoa_r+0x578>
 100d990:	04500934 	movhi	r17,16420
 100d994:	0021883a 	mov	r16,zero
 100d998:	b80b883a 	mov	r5,r23
 100d99c:	b009883a 	mov	r4,r22
 100d9a0:	800d883a 	mov	r6,r16
 100d9a4:	880f883a 	mov	r7,r17
 100d9a8:	1011dc40 	call	1011dc4 <__muldf3>
 100d9ac:	d9401517 	ldw	r5,84(sp)
 100d9b0:	d9001417 	ldw	r4,80(sp)
 100d9b4:	880f883a 	mov	r7,r17
 100d9b8:	000d883a 	mov	r6,zero
 100d9bc:	d8801a15 	stw	r2,104(sp)
 100d9c0:	d8c01b15 	stw	r3,108(sp)
 100d9c4:	1011dc40 	call	1011dc4 <__muldf3>
 100d9c8:	180b883a 	mov	r5,r3
 100d9cc:	1009883a 	mov	r4,r2
 100d9d0:	1823883a 	mov	r17,r3
 100d9d4:	1021883a 	mov	r16,r2
 100d9d8:	10127800 	call	1012780 <__fixdfsi>
 100d9dc:	1009883a 	mov	r4,r2
 100d9e0:	102b883a 	mov	r21,r2
 100d9e4:	10126880 	call	1012688 <__floatsidf>
 100d9e8:	880b883a 	mov	r5,r17
 100d9ec:	8009883a 	mov	r4,r16
 100d9f0:	180f883a 	mov	r7,r3
 100d9f4:	100d883a 	mov	r6,r2
 100d9f8:	1011cd00 	call	1011cd0 <__subdf3>
 100d9fc:	1021883a 	mov	r16,r2
 100da00:	d9001b17 	ldw	r4,108(sp)
 100da04:	1823883a 	mov	r17,r3
 100da08:	dc001415 	stw	r16,80(sp)
 100da0c:	ad400c04 	addi	r21,r21,48
 100da10:	dc401515 	stw	r17,84(sp)
 100da14:	d8801a17 	ldw	r2,104(sp)
 100da18:	e5400005 	stb	r21,0(fp)
 100da1c:	202f883a 	mov	r23,r4
 100da20:	d9c01b17 	ldw	r7,108(sp)
 100da24:	d9001417 	ldw	r4,80(sp)
 100da28:	880b883a 	mov	r5,r17
 100da2c:	100d883a 	mov	r6,r2
 100da30:	102d883a 	mov	r22,r2
 100da34:	e7000044 	addi	fp,fp,1
 100da38:	10126000 	call	1012600 <__ltdf2>
 100da3c:	103fc30e 	bge	r2,zero,100d94c <_dtoa_r+0x1064>
 100da40:	d9000417 	ldw	r4,16(sp)
 100da44:	d9000d15 	stw	r4,52(sp)
 100da48:	003d7106 	br	100d010 <_dtoa_r+0x728>
 100da4c:	d9801717 	ldw	r6,92(sp)
 100da50:	00800084 	movi	r2,2
 100da54:	11bde60e 	bge	r2,r6,100d1f0 <_dtoa_r+0x908>
 100da58:	203cfb1e 	bne	r4,zero,100ce48 <_dtoa_r+0x560>
 100da5c:	d9001617 	ldw	r4,88(sp)
 100da60:	900b883a 	mov	r5,r18
 100da64:	01800144 	movi	r6,5
 100da68:	000f883a 	mov	r7,zero
 100da6c:	100fcf40 	call	100fcf4 <__multadd>
 100da70:	d9000717 	ldw	r4,28(sp)
 100da74:	100b883a 	mov	r5,r2
 100da78:	1025883a 	mov	r18,r2
 100da7c:	100f19c0 	call	100f19c <__mcmp>
 100da80:	00bcf10e 	bge	zero,r2,100ce48 <_dtoa_r+0x560>
 100da84:	d8c00d17 	ldw	r3,52(sp)
 100da88:	d9000517 	ldw	r4,20(sp)
 100da8c:	d8000615 	stw	zero,24(sp)
 100da90:	18c00044 	addi	r3,r3,1
 100da94:	d8c00d15 	stw	r3,52(sp)
 100da98:	00800c44 	movi	r2,49
 100da9c:	27000044 	addi	fp,r4,1
 100daa0:	20800005 	stb	r2,0(r4)
 100daa4:	003e8906 	br	100d4cc <_dtoa_r+0xbe4>
 100daa8:	d8c00517 	ldw	r3,20(sp)
 100daac:	003bc206 	br	100c9b8 <_dtoa_r+0xd0>
 100dab0:	018040b4 	movhi	r6,258
 100dab4:	31bd4f04 	addi	r6,r6,-2756
 100dab8:	30c00917 	ldw	r3,36(r6)
 100dabc:	30800817 	ldw	r2,32(r6)
 100dac0:	d9001217 	ldw	r4,72(sp)
 100dac4:	d9401317 	ldw	r5,76(sp)
 100dac8:	180f883a 	mov	r7,r3
 100dacc:	100d883a 	mov	r6,r2
 100dad0:	10121880 	call	1012188 <__divdf3>
 100dad4:	948003cc 	andi	r18,r18,15
 100dad8:	058000c4 	movi	r22,3
 100dadc:	1029883a 	mov	r20,r2
 100dae0:	182b883a 	mov	r21,r3
 100dae4:	003c8906 	br	100cd0c <_dtoa_r+0x424>
 100dae8:	d9001017 	ldw	r4,64(sp)
 100daec:	d9800917 	ldw	r6,36(sp)
 100daf0:	0025883a 	mov	r18,zero
 100daf4:	1105c83a 	sub	r2,r2,r4
 100daf8:	2089883a 	add	r4,r4,r2
 100dafc:	308d883a 	add	r6,r6,r2
 100db00:	d9001015 	stw	r4,64(sp)
 100db04:	d9800915 	stw	r6,36(sp)
 100db08:	003e3206 	br	100d3d4 <_dtoa_r+0xaec>
 100db0c:	28800044 	addi	r2,r5,1
 100db10:	27000044 	addi	fp,r4,1
 100db14:	20800005 	stb	r2,0(r4)
 100db18:	003e6c06 	br	100d4cc <_dtoa_r+0xbe4>
 100db1c:	d8800f17 	ldw	r2,60(sp)
 100db20:	00bce016 	blt	zero,r2,100cea4 <_dtoa_r+0x5bc>
 100db24:	d9800f17 	ldw	r6,60(sp)
 100db28:	303cc51e 	bne	r6,zero,100ce40 <_dtoa_r+0x558>
 100db2c:	0005883a 	mov	r2,zero
 100db30:	00d00534 	movhi	r3,16404
 100db34:	980b883a 	mov	r5,r19
 100db38:	180f883a 	mov	r7,r3
 100db3c:	9009883a 	mov	r4,r18
 100db40:	100d883a 	mov	r6,r2
 100db44:	1011dc40 	call	1011dc4 <__muldf3>
 100db48:	180b883a 	mov	r5,r3
 100db4c:	a80f883a 	mov	r7,r21
 100db50:	1009883a 	mov	r4,r2
 100db54:	a00d883a 	mov	r6,r20
 100db58:	10125780 	call	1012578 <__gedf2>
 100db5c:	103cb80e 	bge	r2,zero,100ce40 <_dtoa_r+0x558>
 100db60:	0027883a 	mov	r19,zero
 100db64:	0025883a 	mov	r18,zero
 100db68:	003fc606 	br	100da84 <_dtoa_r+0x119c>
 100db6c:	99400117 	ldw	r5,4(r19)
 100db70:	d9001617 	ldw	r4,88(sp)
 100db74:	100f5c00 	call	100f5c0 <_Balloc>
 100db78:	99800417 	ldw	r6,16(r19)
 100db7c:	11000304 	addi	r4,r2,12
 100db80:	99400304 	addi	r5,r19,12
 100db84:	318d883a 	add	r6,r6,r6
 100db88:	318d883a 	add	r6,r6,r6
 100db8c:	31800204 	addi	r6,r6,8
 100db90:	1023883a 	mov	r17,r2
 100db94:	1009fa80 	call	1009fa8 <memcpy>
 100db98:	d9001617 	ldw	r4,88(sp)
 100db9c:	880b883a 	mov	r5,r17
 100dba0:	01800044 	movi	r6,1
 100dba4:	100f9840 	call	100f984 <__lshift>
 100dba8:	100b883a 	mov	r5,r2
 100dbac:	003d9c06 	br	100d220 <_dtoa_r+0x938>
 100dbb0:	00800e44 	movi	r2,57
 100dbb4:	b8807026 	beq	r23,r2,100dd78 <_dtoa_r+0x1490>
 100dbb8:	b8800044 	addi	r2,r23,1
 100dbbc:	b7000044 	addi	fp,r22,1
 100dbc0:	b0800005 	stb	r2,0(r22)
 100dbc4:	003e4106 	br	100d4cc <_dtoa_r+0xbe4>
 100dbc8:	d8800317 	ldw	r2,12(sp)
 100dbcc:	018040b4 	movhi	r6,258
 100dbd0:	31bd1d04 	addi	r6,r6,-2956
 100dbd4:	b009883a 	mov	r4,r22
 100dbd8:	100e90fa 	slli	r7,r2,3
 100dbdc:	b80b883a 	mov	r5,r23
 100dbe0:	398f883a 	add	r7,r7,r6
 100dbe4:	38bffe17 	ldw	r2,-8(r7)
 100dbe8:	d9800517 	ldw	r6,20(sp)
 100dbec:	38ffff17 	ldw	r3,-4(r7)
 100dbf0:	37000044 	addi	fp,r6,1
 100dbf4:	180f883a 	mov	r7,r3
 100dbf8:	100d883a 	mov	r6,r2
 100dbfc:	1011dc40 	call	1011dc4 <__muldf3>
 100dc00:	a80b883a 	mov	r5,r21
 100dc04:	a009883a 	mov	r4,r20
 100dc08:	182f883a 	mov	r23,r3
 100dc0c:	102d883a 	mov	r22,r2
 100dc10:	10127800 	call	1012780 <__fixdfsi>
 100dc14:	1009883a 	mov	r4,r2
 100dc18:	1027883a 	mov	r19,r2
 100dc1c:	10126880 	call	1012688 <__floatsidf>
 100dc20:	a80b883a 	mov	r5,r21
 100dc24:	a009883a 	mov	r4,r20
 100dc28:	180f883a 	mov	r7,r3
 100dc2c:	100d883a 	mov	r6,r2
 100dc30:	1011cd00 	call	1011cd0 <__subdf3>
 100dc34:	180b883a 	mov	r5,r3
 100dc38:	d8c00517 	ldw	r3,20(sp)
 100dc3c:	9cc00c04 	addi	r19,r19,48
 100dc40:	1009883a 	mov	r4,r2
 100dc44:	1cc00005 	stb	r19,0(r3)
 100dc48:	2021883a 	mov	r16,r4
 100dc4c:	d9000317 	ldw	r4,12(sp)
 100dc50:	00800044 	movi	r2,1
 100dc54:	2823883a 	mov	r17,r5
 100dc58:	20802226 	beq	r4,r2,100dce4 <_dtoa_r+0x13fc>
 100dc5c:	1029883a 	mov	r20,r2
 100dc60:	0005883a 	mov	r2,zero
 100dc64:	00d00934 	movhi	r3,16420
 100dc68:	180f883a 	mov	r7,r3
 100dc6c:	100d883a 	mov	r6,r2
 100dc70:	880b883a 	mov	r5,r17
 100dc74:	8009883a 	mov	r4,r16
 100dc78:	1011dc40 	call	1011dc4 <__muldf3>
 100dc7c:	180b883a 	mov	r5,r3
 100dc80:	1009883a 	mov	r4,r2
 100dc84:	1823883a 	mov	r17,r3
 100dc88:	1021883a 	mov	r16,r2
 100dc8c:	10127800 	call	1012780 <__fixdfsi>
 100dc90:	1009883a 	mov	r4,r2
 100dc94:	102b883a 	mov	r21,r2
 100dc98:	10126880 	call	1012688 <__floatsidf>
 100dc9c:	880b883a 	mov	r5,r17
 100dca0:	8009883a 	mov	r4,r16
 100dca4:	180f883a 	mov	r7,r3
 100dca8:	100d883a 	mov	r6,r2
 100dcac:	1011cd00 	call	1011cd0 <__subdf3>
 100dcb0:	180b883a 	mov	r5,r3
 100dcb4:	d8c00517 	ldw	r3,20(sp)
 100dcb8:	1009883a 	mov	r4,r2
 100dcbc:	ad400c04 	addi	r21,r21,48
 100dcc0:	1d05883a 	add	r2,r3,r20
 100dcc4:	15400005 	stb	r21,0(r2)
 100dcc8:	2021883a 	mov	r16,r4
 100dccc:	d9000317 	ldw	r4,12(sp)
 100dcd0:	a5000044 	addi	r20,r20,1
 100dcd4:	2823883a 	mov	r17,r5
 100dcd8:	a13fe11e 	bne	r20,r4,100dc60 <_dtoa_r+0x1378>
 100dcdc:	e505883a 	add	r2,fp,r20
 100dce0:	173fffc4 	addi	fp,r2,-1
 100dce4:	0025883a 	mov	r18,zero
 100dce8:	04cff834 	movhi	r19,16352
 100dcec:	b009883a 	mov	r4,r22
 100dcf0:	b80b883a 	mov	r5,r23
 100dcf4:	900d883a 	mov	r6,r18
 100dcf8:	980f883a 	mov	r7,r19
 100dcfc:	1011d500 	call	1011d50 <__adddf3>
 100dd00:	180b883a 	mov	r5,r3
 100dd04:	1009883a 	mov	r4,r2
 100dd08:	800d883a 	mov	r6,r16
 100dd0c:	880f883a 	mov	r7,r17
 100dd10:	10126000 	call	1012600 <__ltdf2>
 100dd14:	103cab16 	blt	r2,zero,100cfc4 <_dtoa_r+0x6dc>
 100dd18:	0009883a 	mov	r4,zero
 100dd1c:	980b883a 	mov	r5,r19
 100dd20:	b80f883a 	mov	r7,r23
 100dd24:	b00d883a 	mov	r6,r22
 100dd28:	1011cd00 	call	1011cd0 <__subdf3>
 100dd2c:	180b883a 	mov	r5,r3
 100dd30:	880f883a 	mov	r7,r17
 100dd34:	1009883a 	mov	r4,r2
 100dd38:	800d883a 	mov	r6,r16
 100dd3c:	10124f00 	call	10124f0 <__gtdf2>
 100dd40:	00bc470e 	bge	zero,r2,100ce60 <_dtoa_r+0x578>
 100dd44:	00c00c04 	movi	r3,48
 100dd48:	e73fffc4 	addi	fp,fp,-1
 100dd4c:	e0800007 	ldb	r2,0(fp)
 100dd50:	10fffd26 	beq	r2,r3,100dd48 <_dtoa_r+0x1460>
 100dd54:	d9800417 	ldw	r6,16(sp)
 100dd58:	e7000044 	addi	fp,fp,1
 100dd5c:	d9800d15 	stw	r6,52(sp)
 100dd60:	003cab06 	br	100d010 <_dtoa_r+0x728>
 100dd64:	d8c00f17 	ldw	r3,60(sp)
 100dd68:	d9001117 	ldw	r4,68(sp)
 100dd6c:	20e1c83a 	sub	r16,r4,r3
 100dd70:	0007883a 	mov	r3,zero
 100dd74:	003d9b06 	br	100d3e4 <_dtoa_r+0xafc>
 100dd78:	00800e44 	movi	r2,57
 100dd7c:	b0800005 	stb	r2,0(r22)
 100dd80:	b5800044 	addi	r22,r22,1
 100dd84:	003dc106 	br	100d48c <_dtoa_r+0xba4>
 100dd88:	05800084 	movi	r22,2
 100dd8c:	003bf706 	br	100cd6c <_dtoa_r+0x484>
 100dd90:	d9000f17 	ldw	r4,60(sp)
 100dd94:	013c000e 	bge	zero,r4,100cd98 <_dtoa_r+0x4b0>
 100dd98:	d9800e17 	ldw	r6,56(sp)
 100dd9c:	01bc300e 	bge	zero,r6,100ce60 <_dtoa_r+0x578>
 100dda0:	0005883a 	mov	r2,zero
 100dda4:	00d00934 	movhi	r3,16420
 100dda8:	a80b883a 	mov	r5,r21
 100ddac:	180f883a 	mov	r7,r3
 100ddb0:	a009883a 	mov	r4,r20
 100ddb4:	100d883a 	mov	r6,r2
 100ddb8:	1011dc40 	call	1011dc4 <__muldf3>
 100ddbc:	b1000044 	addi	r4,r22,1
 100ddc0:	1021883a 	mov	r16,r2
 100ddc4:	1823883a 	mov	r17,r3
 100ddc8:	10126880 	call	1012688 <__floatsidf>
 100ddcc:	880b883a 	mov	r5,r17
 100ddd0:	8009883a 	mov	r4,r16
 100ddd4:	180f883a 	mov	r7,r3
 100ddd8:	100d883a 	mov	r6,r2
 100dddc:	1011dc40 	call	1011dc4 <__muldf3>
 100dde0:	0011883a 	mov	r8,zero
 100dde4:	02500734 	movhi	r9,16412
 100dde8:	180b883a 	mov	r5,r3
 100ddec:	480f883a 	mov	r7,r9
 100ddf0:	1009883a 	mov	r4,r2
 100ddf4:	400d883a 	mov	r6,r8
 100ddf8:	1011d500 	call	1011d50 <__adddf3>
 100ddfc:	102d883a 	mov	r22,r2
 100de00:	00bf3034 	movhi	r2,64704
 100de04:	10ef883a 	add	r23,r2,r3
 100de08:	d8800d17 	ldw	r2,52(sp)
 100de0c:	d8c00e17 	ldw	r3,56(sp)
 100de10:	8029883a 	mov	r20,r16
 100de14:	10bfffc4 	addi	r2,r2,-1
 100de18:	882b883a 	mov	r21,r17
 100de1c:	d8800415 	stw	r2,16(sp)
 100de20:	d8c00315 	stw	r3,12(sp)
 100de24:	003e8306 	br	100d834 <_dtoa_r+0xf4c>
 100de28:	d8800117 	ldw	r2,4(sp)
 100de2c:	dc001117 	ldw	r16,68(sp)
 100de30:	dc801017 	ldw	r18,64(sp)
 100de34:	00c00d84 	movi	r3,54
 100de38:	1887c83a 	sub	r3,r3,r2
 100de3c:	003d6906 	br	100d3e4 <_dtoa_r+0xafc>
 100de40:	01800044 	movi	r6,1
 100de44:	3021883a 	mov	r16,r6
 100de48:	d9800f15 	stw	r6,60(sp)
 100de4c:	d9802615 	stw	r6,152(sp)
 100de50:	d9800e15 	stw	r6,56(sp)
 100de54:	003b9306 	br	100cca4 <_dtoa_r+0x3bc>
 100de58:	b021883a 	mov	r16,r22
 100de5c:	dd800f15 	stw	r22,60(sp)
 100de60:	003b9006 	br	100cca4 <_dtoa_r+0x3bc>
 100de64:	103e221e 	bne	r2,zero,100d6f0 <_dtoa_r+0xe08>
 100de68:	b880004c 	andi	r2,r23,1
 100de6c:	1005003a 	cmpeq	r2,r2,zero
 100de70:	103e1f1e 	bne	r2,zero,100d6f0 <_dtoa_r+0xe08>
 100de74:	003e1b06 	br	100d6e4 <_dtoa_r+0xdfc>
 100de78:	d9001617 	ldw	r4,88(sp)
 100de7c:	980b883a 	mov	r5,r19
 100de80:	01800284 	movi	r6,10
 100de84:	000f883a 	mov	r7,zero
 100de88:	100fcf40 	call	100fcf4 <__multadd>
 100de8c:	d8c00e17 	ldw	r3,56(sp)
 100de90:	1027883a 	mov	r19,r2
 100de94:	d8c00f15 	stw	r3,60(sp)
 100de98:	003cd306 	br	100d1e8 <_dtoa_r+0x900>

0100de9c <_fflush_r>:
 100de9c:	defffb04 	addi	sp,sp,-20
 100dea0:	dcc00315 	stw	r19,12(sp)
 100dea4:	dc800215 	stw	r18,8(sp)
 100dea8:	dfc00415 	stw	ra,16(sp)
 100deac:	dc400115 	stw	r17,4(sp)
 100deb0:	dc000015 	stw	r16,0(sp)
 100deb4:	2027883a 	mov	r19,r4
 100deb8:	2825883a 	mov	r18,r5
 100debc:	20000226 	beq	r4,zero,100dec8 <_fflush_r+0x2c>
 100dec0:	20800e17 	ldw	r2,56(r4)
 100dec4:	10005626 	beq	r2,zero,100e020 <_fflush_r+0x184>
 100dec8:	9100030b 	ldhu	r4,12(r18)
 100decc:	20ffffcc 	andi	r3,r4,65535
 100ded0:	18e0001c 	xori	r3,r3,32768
 100ded4:	18e00004 	addi	r3,r3,-32768
 100ded8:	1880020c 	andi	r2,r3,8
 100dedc:	1000261e 	bne	r2,zero,100df78 <_fflush_r+0xdc>
 100dee0:	90c00117 	ldw	r3,4(r18)
 100dee4:	20820014 	ori	r2,r4,2048
 100dee8:	9080030d 	sth	r2,12(r18)
 100deec:	1009883a 	mov	r4,r2
 100def0:	00c0400e 	bge	zero,r3,100dff4 <_fflush_r+0x158>
 100def4:	92000a17 	ldw	r8,40(r18)
 100def8:	40004026 	beq	r8,zero,100dffc <_fflush_r+0x160>
 100defc:	2084000c 	andi	r2,r4,4096
 100df00:	10005326 	beq	r2,zero,100e050 <_fflush_r+0x1b4>
 100df04:	94001417 	ldw	r16,80(r18)
 100df08:	9080030b 	ldhu	r2,12(r18)
 100df0c:	1080010c 	andi	r2,r2,4
 100df10:	1000481e 	bne	r2,zero,100e034 <_fflush_r+0x198>
 100df14:	91400717 	ldw	r5,28(r18)
 100df18:	9809883a 	mov	r4,r19
 100df1c:	800d883a 	mov	r6,r16
 100df20:	000f883a 	mov	r7,zero
 100df24:	403ee83a 	callr	r8
 100df28:	8080261e 	bne	r16,r2,100dfc4 <_fflush_r+0x128>
 100df2c:	9080030b 	ldhu	r2,12(r18)
 100df30:	91000417 	ldw	r4,16(r18)
 100df34:	90000115 	stw	zero,4(r18)
 100df38:	10bdffcc 	andi	r2,r2,63487
 100df3c:	10ffffcc 	andi	r3,r2,65535
 100df40:	18c4000c 	andi	r3,r3,4096
 100df44:	9080030d 	sth	r2,12(r18)
 100df48:	91000015 	stw	r4,0(r18)
 100df4c:	18002b26 	beq	r3,zero,100dffc <_fflush_r+0x160>
 100df50:	0007883a 	mov	r3,zero
 100df54:	1805883a 	mov	r2,r3
 100df58:	94001415 	stw	r16,80(r18)
 100df5c:	dfc00417 	ldw	ra,16(sp)
 100df60:	dcc00317 	ldw	r19,12(sp)
 100df64:	dc800217 	ldw	r18,8(sp)
 100df68:	dc400117 	ldw	r17,4(sp)
 100df6c:	dc000017 	ldw	r16,0(sp)
 100df70:	dec00504 	addi	sp,sp,20
 100df74:	f800283a 	ret
 100df78:	94400417 	ldw	r17,16(r18)
 100df7c:	88001f26 	beq	r17,zero,100dffc <_fflush_r+0x160>
 100df80:	90800017 	ldw	r2,0(r18)
 100df84:	18c000cc 	andi	r3,r3,3
 100df88:	94400015 	stw	r17,0(r18)
 100df8c:	1461c83a 	sub	r16,r2,r17
 100df90:	18002526 	beq	r3,zero,100e028 <_fflush_r+0x18c>
 100df94:	0005883a 	mov	r2,zero
 100df98:	90800215 	stw	r2,8(r18)
 100df9c:	0400170e 	bge	zero,r16,100dffc <_fflush_r+0x160>
 100dfa0:	90c00917 	ldw	r3,36(r18)
 100dfa4:	91400717 	ldw	r5,28(r18)
 100dfa8:	880d883a 	mov	r6,r17
 100dfac:	800f883a 	mov	r7,r16
 100dfb0:	9809883a 	mov	r4,r19
 100dfb4:	183ee83a 	callr	r3
 100dfb8:	88a3883a 	add	r17,r17,r2
 100dfbc:	80a1c83a 	sub	r16,r16,r2
 100dfc0:	00bff616 	blt	zero,r2,100df9c <_fflush_r+0x100>
 100dfc4:	9080030b 	ldhu	r2,12(r18)
 100dfc8:	00ffffc4 	movi	r3,-1
 100dfcc:	10801014 	ori	r2,r2,64
 100dfd0:	9080030d 	sth	r2,12(r18)
 100dfd4:	1805883a 	mov	r2,r3
 100dfd8:	dfc00417 	ldw	ra,16(sp)
 100dfdc:	dcc00317 	ldw	r19,12(sp)
 100dfe0:	dc800217 	ldw	r18,8(sp)
 100dfe4:	dc400117 	ldw	r17,4(sp)
 100dfe8:	dc000017 	ldw	r16,0(sp)
 100dfec:	dec00504 	addi	sp,sp,20
 100dff0:	f800283a 	ret
 100dff4:	90800f17 	ldw	r2,60(r18)
 100dff8:	00bfbe16 	blt	zero,r2,100def4 <_fflush_r+0x58>
 100dffc:	0007883a 	mov	r3,zero
 100e000:	1805883a 	mov	r2,r3
 100e004:	dfc00417 	ldw	ra,16(sp)
 100e008:	dcc00317 	ldw	r19,12(sp)
 100e00c:	dc800217 	ldw	r18,8(sp)
 100e010:	dc400117 	ldw	r17,4(sp)
 100e014:	dc000017 	ldw	r16,0(sp)
 100e018:	dec00504 	addi	sp,sp,20
 100e01c:	f800283a 	ret
 100e020:	100e1340 	call	100e134 <__sinit>
 100e024:	003fa806 	br	100dec8 <_fflush_r+0x2c>
 100e028:	90800517 	ldw	r2,20(r18)
 100e02c:	90800215 	stw	r2,8(r18)
 100e030:	003fda06 	br	100df9c <_fflush_r+0x100>
 100e034:	90800117 	ldw	r2,4(r18)
 100e038:	90c00c17 	ldw	r3,48(r18)
 100e03c:	80a1c83a 	sub	r16,r16,r2
 100e040:	183fb426 	beq	r3,zero,100df14 <_fflush_r+0x78>
 100e044:	90800f17 	ldw	r2,60(r18)
 100e048:	80a1c83a 	sub	r16,r16,r2
 100e04c:	003fb106 	br	100df14 <_fflush_r+0x78>
 100e050:	91400717 	ldw	r5,28(r18)
 100e054:	9809883a 	mov	r4,r19
 100e058:	000d883a 	mov	r6,zero
 100e05c:	01c00044 	movi	r7,1
 100e060:	403ee83a 	callr	r8
 100e064:	1021883a 	mov	r16,r2
 100e068:	00bfffc4 	movi	r2,-1
 100e06c:	80800226 	beq	r16,r2,100e078 <_fflush_r+0x1dc>
 100e070:	92000a17 	ldw	r8,40(r18)
 100e074:	003fa406 	br	100df08 <_fflush_r+0x6c>
 100e078:	98c00017 	ldw	r3,0(r19)
 100e07c:	00800744 	movi	r2,29
 100e080:	18bfde26 	beq	r3,r2,100dffc <_fflush_r+0x160>
 100e084:	9080030b 	ldhu	r2,12(r18)
 100e088:	8007883a 	mov	r3,r16
 100e08c:	10801014 	ori	r2,r2,64
 100e090:	9080030d 	sth	r2,12(r18)
 100e094:	003fcf06 	br	100dfd4 <_fflush_r+0x138>

0100e098 <fflush>:
 100e098:	01404074 	movhi	r5,257
 100e09c:	2977a704 	addi	r5,r5,-8548
 100e0a0:	2007883a 	mov	r3,r4
 100e0a4:	20000526 	beq	r4,zero,100e0bc <fflush+0x24>
 100e0a8:	008040b4 	movhi	r2,258
 100e0ac:	1084a904 	addi	r2,r2,4772
 100e0b0:	11000017 	ldw	r4,0(r2)
 100e0b4:	180b883a 	mov	r5,r3
 100e0b8:	100de9c1 	jmpi	100de9c <_fflush_r>
 100e0bc:	008040b4 	movhi	r2,258
 100e0c0:	1084aa04 	addi	r2,r2,4776
 100e0c4:	11000017 	ldw	r4,0(r2)
 100e0c8:	100ec681 	jmpi	100ec68 <_fwalk_reent>

0100e0cc <std>:
 100e0cc:	00804074 	movhi	r2,257
 100e0d0:	1081a604 	addi	r2,r2,1688
 100e0d4:	20800b15 	stw	r2,44(r4)
 100e0d8:	00804074 	movhi	r2,257
 100e0dc:	1081e104 	addi	r2,r2,1924
 100e0e0:	20800815 	stw	r2,32(r4)
 100e0e4:	00c04074 	movhi	r3,257
 100e0e8:	18c1c204 	addi	r3,r3,1800
 100e0ec:	00804074 	movhi	r2,257
 100e0f0:	1081a804 	addi	r2,r2,1696
 100e0f4:	2140030d 	sth	r5,12(r4)
 100e0f8:	2180038d 	sth	r6,14(r4)
 100e0fc:	20c00915 	stw	r3,36(r4)
 100e100:	20800a15 	stw	r2,40(r4)
 100e104:	20000015 	stw	zero,0(r4)
 100e108:	20000115 	stw	zero,4(r4)
 100e10c:	20000215 	stw	zero,8(r4)
 100e110:	20000415 	stw	zero,16(r4)
 100e114:	20000515 	stw	zero,20(r4)
 100e118:	20000615 	stw	zero,24(r4)
 100e11c:	21000715 	stw	r4,28(r4)
 100e120:	f800283a 	ret

0100e124 <__sfp_lock_acquire>:
 100e124:	f800283a 	ret

0100e128 <__sfp_lock_release>:
 100e128:	f800283a 	ret

0100e12c <__sinit_lock_acquire>:
 100e12c:	f800283a 	ret

0100e130 <__sinit_lock_release>:
 100e130:	f800283a 	ret

0100e134 <__sinit>:
 100e134:	20800e17 	ldw	r2,56(r4)
 100e138:	defffd04 	addi	sp,sp,-12
 100e13c:	dc400115 	stw	r17,4(sp)
 100e140:	dc000015 	stw	r16,0(sp)
 100e144:	dfc00215 	stw	ra,8(sp)
 100e148:	04400044 	movi	r17,1
 100e14c:	01400104 	movi	r5,4
 100e150:	000d883a 	mov	r6,zero
 100e154:	2021883a 	mov	r16,r4
 100e158:	2200bb04 	addi	r8,r4,748
 100e15c:	200f883a 	mov	r7,r4
 100e160:	10000526 	beq	r2,zero,100e178 <__sinit+0x44>
 100e164:	dfc00217 	ldw	ra,8(sp)
 100e168:	dc400117 	ldw	r17,4(sp)
 100e16c:	dc000017 	ldw	r16,0(sp)
 100e170:	dec00304 	addi	sp,sp,12
 100e174:	f800283a 	ret
 100e178:	21000117 	ldw	r4,4(r4)
 100e17c:	00804074 	movhi	r2,257
 100e180:	10b88604 	addi	r2,r2,-7656
 100e184:	00c000c4 	movi	r3,3
 100e188:	80800f15 	stw	r2,60(r16)
 100e18c:	80c0b915 	stw	r3,740(r16)
 100e190:	8200ba15 	stw	r8,744(r16)
 100e194:	84400e15 	stw	r17,56(r16)
 100e198:	8000b815 	stw	zero,736(r16)
 100e19c:	100e0cc0 	call	100e0cc <std>
 100e1a0:	81000217 	ldw	r4,8(r16)
 100e1a4:	880d883a 	mov	r6,r17
 100e1a8:	800f883a 	mov	r7,r16
 100e1ac:	01400284 	movi	r5,10
 100e1b0:	100e0cc0 	call	100e0cc <std>
 100e1b4:	81000317 	ldw	r4,12(r16)
 100e1b8:	800f883a 	mov	r7,r16
 100e1bc:	01400484 	movi	r5,18
 100e1c0:	01800084 	movi	r6,2
 100e1c4:	dfc00217 	ldw	ra,8(sp)
 100e1c8:	dc400117 	ldw	r17,4(sp)
 100e1cc:	dc000017 	ldw	r16,0(sp)
 100e1d0:	dec00304 	addi	sp,sp,12
 100e1d4:	100e0cc1 	jmpi	100e0cc <std>

0100e1d8 <__fp_lock>:
 100e1d8:	0005883a 	mov	r2,zero
 100e1dc:	f800283a 	ret

0100e1e0 <__fp_unlock>:
 100e1e0:	0005883a 	mov	r2,zero
 100e1e4:	f800283a 	ret

0100e1e8 <__fp_unlock_all>:
 100e1e8:	008040b4 	movhi	r2,258
 100e1ec:	1084a904 	addi	r2,r2,4772
 100e1f0:	11000017 	ldw	r4,0(r2)
 100e1f4:	01404074 	movhi	r5,257
 100e1f8:	29787804 	addi	r5,r5,-7712
 100e1fc:	100ed301 	jmpi	100ed30 <_fwalk>

0100e200 <__fp_lock_all>:
 100e200:	008040b4 	movhi	r2,258
 100e204:	1084a904 	addi	r2,r2,4772
 100e208:	11000017 	ldw	r4,0(r2)
 100e20c:	01404074 	movhi	r5,257
 100e210:	29787604 	addi	r5,r5,-7720
 100e214:	100ed301 	jmpi	100ed30 <_fwalk>

0100e218 <_cleanup_r>:
 100e218:	01404074 	movhi	r5,257
 100e21c:	2942d304 	addi	r5,r5,2892
 100e220:	100ed301 	jmpi	100ed30 <_fwalk>

0100e224 <_cleanup>:
 100e224:	008040b4 	movhi	r2,258
 100e228:	1084aa04 	addi	r2,r2,4776
 100e22c:	11000017 	ldw	r4,0(r2)
 100e230:	100e2181 	jmpi	100e218 <_cleanup_r>

0100e234 <__sfmoreglue>:
 100e234:	defffc04 	addi	sp,sp,-16
 100e238:	dc400115 	stw	r17,4(sp)
 100e23c:	2c401724 	muli	r17,r5,92
 100e240:	dc800215 	stw	r18,8(sp)
 100e244:	2825883a 	mov	r18,r5
 100e248:	89400304 	addi	r5,r17,12
 100e24c:	dc000015 	stw	r16,0(sp)
 100e250:	dfc00315 	stw	ra,12(sp)
 100e254:	10097100 	call	1009710 <_malloc_r>
 100e258:	0021883a 	mov	r16,zero
 100e25c:	880d883a 	mov	r6,r17
 100e260:	000b883a 	mov	r5,zero
 100e264:	10000626 	beq	r2,zero,100e280 <__sfmoreglue+0x4c>
 100e268:	11000304 	addi	r4,r2,12
 100e26c:	14800115 	stw	r18,4(r2)
 100e270:	10000015 	stw	zero,0(r2)
 100e274:	11000215 	stw	r4,8(r2)
 100e278:	1021883a 	mov	r16,r2
 100e27c:	100a1280 	call	100a128 <memset>
 100e280:	8005883a 	mov	r2,r16
 100e284:	dfc00317 	ldw	ra,12(sp)
 100e288:	dc800217 	ldw	r18,8(sp)
 100e28c:	dc400117 	ldw	r17,4(sp)
 100e290:	dc000017 	ldw	r16,0(sp)
 100e294:	dec00404 	addi	sp,sp,16
 100e298:	f800283a 	ret

0100e29c <__sfp>:
 100e29c:	defffd04 	addi	sp,sp,-12
 100e2a0:	008040b4 	movhi	r2,258
 100e2a4:	1084aa04 	addi	r2,r2,4776
 100e2a8:	dc000015 	stw	r16,0(sp)
 100e2ac:	14000017 	ldw	r16,0(r2)
 100e2b0:	dc400115 	stw	r17,4(sp)
 100e2b4:	dfc00215 	stw	ra,8(sp)
 100e2b8:	80800e17 	ldw	r2,56(r16)
 100e2bc:	2023883a 	mov	r17,r4
 100e2c0:	10002626 	beq	r2,zero,100e35c <__sfp+0xc0>
 100e2c4:	8400b804 	addi	r16,r16,736
 100e2c8:	80800117 	ldw	r2,4(r16)
 100e2cc:	81000217 	ldw	r4,8(r16)
 100e2d0:	10ffffc4 	addi	r3,r2,-1
 100e2d4:	18000916 	blt	r3,zero,100e2fc <__sfp+0x60>
 100e2d8:	2080030f 	ldh	r2,12(r4)
 100e2dc:	10000b26 	beq	r2,zero,100e30c <__sfp+0x70>
 100e2e0:	017fffc4 	movi	r5,-1
 100e2e4:	00000206 	br	100e2f0 <__sfp+0x54>
 100e2e8:	2080030f 	ldh	r2,12(r4)
 100e2ec:	10000726 	beq	r2,zero,100e30c <__sfp+0x70>
 100e2f0:	18ffffc4 	addi	r3,r3,-1
 100e2f4:	21001704 	addi	r4,r4,92
 100e2f8:	197ffb1e 	bne	r3,r5,100e2e8 <__sfp+0x4c>
 100e2fc:	80800017 	ldw	r2,0(r16)
 100e300:	10001926 	beq	r2,zero,100e368 <__sfp+0xcc>
 100e304:	1021883a 	mov	r16,r2
 100e308:	003fef06 	br	100e2c8 <__sfp+0x2c>
 100e30c:	00bfffc4 	movi	r2,-1
 100e310:	00c00044 	movi	r3,1
 100e314:	2080038d 	sth	r2,14(r4)
 100e318:	20c0030d 	sth	r3,12(r4)
 100e31c:	20000015 	stw	zero,0(r4)
 100e320:	20000215 	stw	zero,8(r4)
 100e324:	20000115 	stw	zero,4(r4)
 100e328:	20000415 	stw	zero,16(r4)
 100e32c:	20000515 	stw	zero,20(r4)
 100e330:	20000615 	stw	zero,24(r4)
 100e334:	20000c15 	stw	zero,48(r4)
 100e338:	20000d15 	stw	zero,52(r4)
 100e33c:	20001115 	stw	zero,68(r4)
 100e340:	20001215 	stw	zero,72(r4)
 100e344:	2005883a 	mov	r2,r4
 100e348:	dfc00217 	ldw	ra,8(sp)
 100e34c:	dc400117 	ldw	r17,4(sp)
 100e350:	dc000017 	ldw	r16,0(sp)
 100e354:	dec00304 	addi	sp,sp,12
 100e358:	f800283a 	ret
 100e35c:	8009883a 	mov	r4,r16
 100e360:	100e1340 	call	100e134 <__sinit>
 100e364:	003fd706 	br	100e2c4 <__sfp+0x28>
 100e368:	8809883a 	mov	r4,r17
 100e36c:	01400104 	movi	r5,4
 100e370:	100e2340 	call	100e234 <__sfmoreglue>
 100e374:	80800015 	stw	r2,0(r16)
 100e378:	103fe21e 	bne	r2,zero,100e304 <__sfp+0x68>
 100e37c:	00800304 	movi	r2,12
 100e380:	0009883a 	mov	r4,zero
 100e384:	88800015 	stw	r2,0(r17)
 100e388:	003fee06 	br	100e344 <__sfp+0xa8>

0100e38c <_malloc_trim_r>:
 100e38c:	defffb04 	addi	sp,sp,-20
 100e390:	dcc00315 	stw	r19,12(sp)
 100e394:	04c040b4 	movhi	r19,258
 100e398:	9cfe0404 	addi	r19,r19,-2032
 100e39c:	dc800215 	stw	r18,8(sp)
 100e3a0:	dc400115 	stw	r17,4(sp)
 100e3a4:	dc000015 	stw	r16,0(sp)
 100e3a8:	2823883a 	mov	r17,r5
 100e3ac:	2025883a 	mov	r18,r4
 100e3b0:	dfc00415 	stw	ra,16(sp)
 100e3b4:	1013f940 	call	1013f94 <__malloc_lock>
 100e3b8:	98800217 	ldw	r2,8(r19)
 100e3bc:	9009883a 	mov	r4,r18
 100e3c0:	000b883a 	mov	r5,zero
 100e3c4:	10c00117 	ldw	r3,4(r2)
 100e3c8:	00bfff04 	movi	r2,-4
 100e3cc:	18a0703a 	and	r16,r3,r2
 100e3d0:	8463c83a 	sub	r17,r16,r17
 100e3d4:	8c43fbc4 	addi	r17,r17,4079
 100e3d8:	8822d33a 	srli	r17,r17,12
 100e3dc:	0083ffc4 	movi	r2,4095
 100e3e0:	8c7fffc4 	addi	r17,r17,-1
 100e3e4:	8822933a 	slli	r17,r17,12
 100e3e8:	1440060e 	bge	r2,r17,100e404 <_malloc_trim_r+0x78>
 100e3ec:	100a2380 	call	100a238 <_sbrk_r>
 100e3f0:	98c00217 	ldw	r3,8(r19)
 100e3f4:	9009883a 	mov	r4,r18
 100e3f8:	044bc83a 	sub	r5,zero,r17
 100e3fc:	80c7883a 	add	r3,r16,r3
 100e400:	10c00926 	beq	r2,r3,100e428 <_malloc_trim_r+0x9c>
 100e404:	101409c0 	call	101409c <__malloc_unlock>
 100e408:	0005883a 	mov	r2,zero
 100e40c:	dfc00417 	ldw	ra,16(sp)
 100e410:	dcc00317 	ldw	r19,12(sp)
 100e414:	dc800217 	ldw	r18,8(sp)
 100e418:	dc400117 	ldw	r17,4(sp)
 100e41c:	dc000017 	ldw	r16,0(sp)
 100e420:	dec00504 	addi	sp,sp,20
 100e424:	f800283a 	ret
 100e428:	9009883a 	mov	r4,r18
 100e42c:	100a2380 	call	100a238 <_sbrk_r>
 100e430:	844dc83a 	sub	r6,r16,r17
 100e434:	00ffffc4 	movi	r3,-1
 100e438:	9009883a 	mov	r4,r18
 100e43c:	000b883a 	mov	r5,zero
 100e440:	01c040b4 	movhi	r7,258
 100e444:	39ddda04 	addi	r7,r7,30568
 100e448:	31800054 	ori	r6,r6,1
 100e44c:	10c00926 	beq	r2,r3,100e474 <_malloc_trim_r+0xe8>
 100e450:	38800017 	ldw	r2,0(r7)
 100e454:	98c00217 	ldw	r3,8(r19)
 100e458:	9009883a 	mov	r4,r18
 100e45c:	1445c83a 	sub	r2,r2,r17
 100e460:	38800015 	stw	r2,0(r7)
 100e464:	19800115 	stw	r6,4(r3)
 100e468:	101409c0 	call	101409c <__malloc_unlock>
 100e46c:	00800044 	movi	r2,1
 100e470:	003fe606 	br	100e40c <_malloc_trim_r+0x80>
 100e474:	100a2380 	call	100a238 <_sbrk_r>
 100e478:	99800217 	ldw	r6,8(r19)
 100e47c:	100f883a 	mov	r7,r2
 100e480:	9009883a 	mov	r4,r18
 100e484:	1187c83a 	sub	r3,r2,r6
 100e488:	008003c4 	movi	r2,15
 100e48c:	19400054 	ori	r5,r3,1
 100e490:	10ffdc0e 	bge	r2,r3,100e404 <_malloc_trim_r+0x78>
 100e494:	008040b4 	movhi	r2,258
 100e498:	1084a804 	addi	r2,r2,4768
 100e49c:	10c00017 	ldw	r3,0(r2)
 100e4a0:	008040b4 	movhi	r2,258
 100e4a4:	109dda04 	addi	r2,r2,30568
 100e4a8:	31400115 	stw	r5,4(r6)
 100e4ac:	38c7c83a 	sub	r3,r7,r3
 100e4b0:	10c00015 	stw	r3,0(r2)
 100e4b4:	003fd306 	br	100e404 <_malloc_trim_r+0x78>

0100e4b8 <_free_r>:
 100e4b8:	defffd04 	addi	sp,sp,-12
 100e4bc:	dc400115 	stw	r17,4(sp)
 100e4c0:	dc000015 	stw	r16,0(sp)
 100e4c4:	dfc00215 	stw	ra,8(sp)
 100e4c8:	2821883a 	mov	r16,r5
 100e4cc:	2023883a 	mov	r17,r4
 100e4d0:	28005a26 	beq	r5,zero,100e63c <_free_r+0x184>
 100e4d4:	1013f940 	call	1013f94 <__malloc_lock>
 100e4d8:	823ffe04 	addi	r8,r16,-8
 100e4dc:	41400117 	ldw	r5,4(r8)
 100e4e0:	00bfff84 	movi	r2,-2
 100e4e4:	028040b4 	movhi	r10,258
 100e4e8:	52be0404 	addi	r10,r10,-2032
 100e4ec:	288e703a 	and	r7,r5,r2
 100e4f0:	41cd883a 	add	r6,r8,r7
 100e4f4:	30c00117 	ldw	r3,4(r6)
 100e4f8:	51000217 	ldw	r4,8(r10)
 100e4fc:	00bfff04 	movi	r2,-4
 100e500:	1892703a 	and	r9,r3,r2
 100e504:	5017883a 	mov	r11,r10
 100e508:	31006726 	beq	r6,r4,100e6a8 <_free_r+0x1f0>
 100e50c:	2880004c 	andi	r2,r5,1
 100e510:	1005003a 	cmpeq	r2,r2,zero
 100e514:	32400115 	stw	r9,4(r6)
 100e518:	10001a1e 	bne	r2,zero,100e584 <_free_r+0xcc>
 100e51c:	000b883a 	mov	r5,zero
 100e520:	3247883a 	add	r3,r6,r9
 100e524:	18800117 	ldw	r2,4(r3)
 100e528:	1080004c 	andi	r2,r2,1
 100e52c:	1000231e 	bne	r2,zero,100e5bc <_free_r+0x104>
 100e530:	280ac03a 	cmpne	r5,r5,zero
 100e534:	3a4f883a 	add	r7,r7,r9
 100e538:	2800451e 	bne	r5,zero,100e650 <_free_r+0x198>
 100e53c:	31000217 	ldw	r4,8(r6)
 100e540:	008040b4 	movhi	r2,258
 100e544:	10be0604 	addi	r2,r2,-2024
 100e548:	20807b26 	beq	r4,r2,100e738 <_free_r+0x280>
 100e54c:	30800317 	ldw	r2,12(r6)
 100e550:	3a07883a 	add	r3,r7,r8
 100e554:	19c00015 	stw	r7,0(r3)
 100e558:	11000215 	stw	r4,8(r2)
 100e55c:	20800315 	stw	r2,12(r4)
 100e560:	38800054 	ori	r2,r7,1
 100e564:	40800115 	stw	r2,4(r8)
 100e568:	28001a26 	beq	r5,zero,100e5d4 <_free_r+0x11c>
 100e56c:	8809883a 	mov	r4,r17
 100e570:	dfc00217 	ldw	ra,8(sp)
 100e574:	dc400117 	ldw	r17,4(sp)
 100e578:	dc000017 	ldw	r16,0(sp)
 100e57c:	dec00304 	addi	sp,sp,12
 100e580:	101409c1 	jmpi	101409c <__malloc_unlock>
 100e584:	80bffe17 	ldw	r2,-8(r16)
 100e588:	50c00204 	addi	r3,r10,8
 100e58c:	4091c83a 	sub	r8,r8,r2
 100e590:	41000217 	ldw	r4,8(r8)
 100e594:	388f883a 	add	r7,r7,r2
 100e598:	20c06126 	beq	r4,r3,100e720 <_free_r+0x268>
 100e59c:	40800317 	ldw	r2,12(r8)
 100e5a0:	3247883a 	add	r3,r6,r9
 100e5a4:	000b883a 	mov	r5,zero
 100e5a8:	11000215 	stw	r4,8(r2)
 100e5ac:	20800315 	stw	r2,12(r4)
 100e5b0:	18800117 	ldw	r2,4(r3)
 100e5b4:	1080004c 	andi	r2,r2,1
 100e5b8:	103fdd26 	beq	r2,zero,100e530 <_free_r+0x78>
 100e5bc:	38800054 	ori	r2,r7,1
 100e5c0:	3a07883a 	add	r3,r7,r8
 100e5c4:	280ac03a 	cmpne	r5,r5,zero
 100e5c8:	40800115 	stw	r2,4(r8)
 100e5cc:	19c00015 	stw	r7,0(r3)
 100e5d0:	283fe61e 	bne	r5,zero,100e56c <_free_r+0xb4>
 100e5d4:	00807fc4 	movi	r2,511
 100e5d8:	11c01f2e 	bgeu	r2,r7,100e658 <_free_r+0x1a0>
 100e5dc:	3806d27a 	srli	r3,r7,9
 100e5e0:	1800481e 	bne	r3,zero,100e704 <_free_r+0x24c>
 100e5e4:	3804d0fa 	srli	r2,r7,3
 100e5e8:	100690fa 	slli	r3,r2,3
 100e5ec:	1acd883a 	add	r6,r3,r11
 100e5f0:	31400217 	ldw	r5,8(r6)
 100e5f4:	31405926 	beq	r6,r5,100e75c <_free_r+0x2a4>
 100e5f8:	28800117 	ldw	r2,4(r5)
 100e5fc:	00ffff04 	movi	r3,-4
 100e600:	10c4703a 	and	r2,r2,r3
 100e604:	3880022e 	bgeu	r7,r2,100e610 <_free_r+0x158>
 100e608:	29400217 	ldw	r5,8(r5)
 100e60c:	317ffa1e 	bne	r6,r5,100e5f8 <_free_r+0x140>
 100e610:	29800317 	ldw	r6,12(r5)
 100e614:	41800315 	stw	r6,12(r8)
 100e618:	41400215 	stw	r5,8(r8)
 100e61c:	8809883a 	mov	r4,r17
 100e620:	2a000315 	stw	r8,12(r5)
 100e624:	32000215 	stw	r8,8(r6)
 100e628:	dfc00217 	ldw	ra,8(sp)
 100e62c:	dc400117 	ldw	r17,4(sp)
 100e630:	dc000017 	ldw	r16,0(sp)
 100e634:	dec00304 	addi	sp,sp,12
 100e638:	101409c1 	jmpi	101409c <__malloc_unlock>
 100e63c:	dfc00217 	ldw	ra,8(sp)
 100e640:	dc400117 	ldw	r17,4(sp)
 100e644:	dc000017 	ldw	r16,0(sp)
 100e648:	dec00304 	addi	sp,sp,12
 100e64c:	f800283a 	ret
 100e650:	31000217 	ldw	r4,8(r6)
 100e654:	003fbd06 	br	100e54c <_free_r+0x94>
 100e658:	3806d0fa 	srli	r3,r7,3
 100e65c:	00800044 	movi	r2,1
 100e660:	51400117 	ldw	r5,4(r10)
 100e664:	180890fa 	slli	r4,r3,3
 100e668:	1807d0ba 	srai	r3,r3,2
 100e66c:	22c9883a 	add	r4,r4,r11
 100e670:	21800217 	ldw	r6,8(r4)
 100e674:	10c4983a 	sll	r2,r2,r3
 100e678:	41000315 	stw	r4,12(r8)
 100e67c:	41800215 	stw	r6,8(r8)
 100e680:	288ab03a 	or	r5,r5,r2
 100e684:	22000215 	stw	r8,8(r4)
 100e688:	8809883a 	mov	r4,r17
 100e68c:	51400115 	stw	r5,4(r10)
 100e690:	32000315 	stw	r8,12(r6)
 100e694:	dfc00217 	ldw	ra,8(sp)
 100e698:	dc400117 	ldw	r17,4(sp)
 100e69c:	dc000017 	ldw	r16,0(sp)
 100e6a0:	dec00304 	addi	sp,sp,12
 100e6a4:	101409c1 	jmpi	101409c <__malloc_unlock>
 100e6a8:	2880004c 	andi	r2,r5,1
 100e6ac:	3a4d883a 	add	r6,r7,r9
 100e6b0:	1000071e 	bne	r2,zero,100e6d0 <_free_r+0x218>
 100e6b4:	80bffe17 	ldw	r2,-8(r16)
 100e6b8:	4091c83a 	sub	r8,r8,r2
 100e6bc:	41000317 	ldw	r4,12(r8)
 100e6c0:	40c00217 	ldw	r3,8(r8)
 100e6c4:	308d883a 	add	r6,r6,r2
 100e6c8:	20c00215 	stw	r3,8(r4)
 100e6cc:	19000315 	stw	r4,12(r3)
 100e6d0:	008040b4 	movhi	r2,258
 100e6d4:	1084a704 	addi	r2,r2,4764
 100e6d8:	11000017 	ldw	r4,0(r2)
 100e6dc:	30c00054 	ori	r3,r6,1
 100e6e0:	52000215 	stw	r8,8(r10)
 100e6e4:	40c00115 	stw	r3,4(r8)
 100e6e8:	313fa036 	bltu	r6,r4,100e56c <_free_r+0xb4>
 100e6ec:	008040b4 	movhi	r2,258
 100e6f0:	108bb004 	addi	r2,r2,11968
 100e6f4:	11400017 	ldw	r5,0(r2)
 100e6f8:	8809883a 	mov	r4,r17
 100e6fc:	100e38c0 	call	100e38c <_malloc_trim_r>
 100e700:	003f9a06 	br	100e56c <_free_r+0xb4>
 100e704:	00800104 	movi	r2,4
 100e708:	10c0072e 	bgeu	r2,r3,100e728 <_free_r+0x270>
 100e70c:	00800504 	movi	r2,20
 100e710:	10c01936 	bltu	r2,r3,100e778 <_free_r+0x2c0>
 100e714:	188016c4 	addi	r2,r3,91
 100e718:	100690fa 	slli	r3,r2,3
 100e71c:	003fb306 	br	100e5ec <_free_r+0x134>
 100e720:	01400044 	movi	r5,1
 100e724:	003f7e06 	br	100e520 <_free_r+0x68>
 100e728:	3804d1ba 	srli	r2,r7,6
 100e72c:	10800e04 	addi	r2,r2,56
 100e730:	100690fa 	slli	r3,r2,3
 100e734:	003fad06 	br	100e5ec <_free_r+0x134>
 100e738:	22000315 	stw	r8,12(r4)
 100e73c:	22000215 	stw	r8,8(r4)
 100e740:	3a05883a 	add	r2,r7,r8
 100e744:	38c00054 	ori	r3,r7,1
 100e748:	11c00015 	stw	r7,0(r2)
 100e74c:	41000215 	stw	r4,8(r8)
 100e750:	40c00115 	stw	r3,4(r8)
 100e754:	41000315 	stw	r4,12(r8)
 100e758:	003f8406 	br	100e56c <_free_r+0xb4>
 100e75c:	1005d0ba 	srai	r2,r2,2
 100e760:	00c00044 	movi	r3,1
 100e764:	51000117 	ldw	r4,4(r10)
 100e768:	1886983a 	sll	r3,r3,r2
 100e76c:	20c8b03a 	or	r4,r4,r3
 100e770:	51000115 	stw	r4,4(r10)
 100e774:	003fa706 	br	100e614 <_free_r+0x15c>
 100e778:	00801504 	movi	r2,84
 100e77c:	10c00436 	bltu	r2,r3,100e790 <_free_r+0x2d8>
 100e780:	3804d33a 	srli	r2,r7,12
 100e784:	10801b84 	addi	r2,r2,110
 100e788:	100690fa 	slli	r3,r2,3
 100e78c:	003f9706 	br	100e5ec <_free_r+0x134>
 100e790:	00805504 	movi	r2,340
 100e794:	10c00436 	bltu	r2,r3,100e7a8 <_free_r+0x2f0>
 100e798:	3804d3fa 	srli	r2,r7,15
 100e79c:	10801dc4 	addi	r2,r2,119
 100e7a0:	100690fa 	slli	r3,r2,3
 100e7a4:	003f9106 	br	100e5ec <_free_r+0x134>
 100e7a8:	00815504 	movi	r2,1364
 100e7ac:	10c0032e 	bgeu	r2,r3,100e7bc <_free_r+0x304>
 100e7b0:	00801f84 	movi	r2,126
 100e7b4:	00c0fc04 	movi	r3,1008
 100e7b8:	003f8c06 	br	100e5ec <_free_r+0x134>
 100e7bc:	3804d4ba 	srli	r2,r7,18
 100e7c0:	10801f04 	addi	r2,r2,124
 100e7c4:	100690fa 	slli	r3,r2,3
 100e7c8:	003f8806 	br	100e5ec <_free_r+0x134>

0100e7cc <__sfvwrite_r>:
 100e7cc:	30800217 	ldw	r2,8(r6)
 100e7d0:	defff504 	addi	sp,sp,-44
 100e7d4:	df000915 	stw	fp,36(sp)
 100e7d8:	dd800715 	stw	r22,28(sp)
 100e7dc:	dc800315 	stw	r18,12(sp)
 100e7e0:	dfc00a15 	stw	ra,40(sp)
 100e7e4:	ddc00815 	stw	r23,32(sp)
 100e7e8:	dd400615 	stw	r21,24(sp)
 100e7ec:	dd000515 	stw	r20,20(sp)
 100e7f0:	dcc00415 	stw	r19,16(sp)
 100e7f4:	dc400215 	stw	r17,8(sp)
 100e7f8:	dc000115 	stw	r16,4(sp)
 100e7fc:	302d883a 	mov	r22,r6
 100e800:	2039883a 	mov	fp,r4
 100e804:	2825883a 	mov	r18,r5
 100e808:	10001c26 	beq	r2,zero,100e87c <__sfvwrite_r+0xb0>
 100e80c:	29c0030b 	ldhu	r7,12(r5)
 100e810:	3880020c 	andi	r2,r7,8
 100e814:	10002726 	beq	r2,zero,100e8b4 <__sfvwrite_r+0xe8>
 100e818:	28800417 	ldw	r2,16(r5)
 100e81c:	10002526 	beq	r2,zero,100e8b4 <__sfvwrite_r+0xe8>
 100e820:	3880008c 	andi	r2,r7,2
 100e824:	b5400017 	ldw	r21,0(r22)
 100e828:	10002826 	beq	r2,zero,100e8cc <__sfvwrite_r+0x100>
 100e82c:	0021883a 	mov	r16,zero
 100e830:	0023883a 	mov	r17,zero
 100e834:	880d883a 	mov	r6,r17
 100e838:	e009883a 	mov	r4,fp
 100e83c:	00810004 	movi	r2,1024
 100e840:	80006e26 	beq	r16,zero,100e9fc <__sfvwrite_r+0x230>
 100e844:	800f883a 	mov	r7,r16
 100e848:	91400717 	ldw	r5,28(r18)
 100e84c:	1400012e 	bgeu	r2,r16,100e854 <__sfvwrite_r+0x88>
 100e850:	100f883a 	mov	r7,r2
 100e854:	90c00917 	ldw	r3,36(r18)
 100e858:	183ee83a 	callr	r3
 100e85c:	1007883a 	mov	r3,r2
 100e860:	80a1c83a 	sub	r16,r16,r2
 100e864:	88a3883a 	add	r17,r17,r2
 100e868:	00806d0e 	bge	zero,r2,100ea20 <__sfvwrite_r+0x254>
 100e86c:	b0800217 	ldw	r2,8(r22)
 100e870:	10c5c83a 	sub	r2,r2,r3
 100e874:	b0800215 	stw	r2,8(r22)
 100e878:	103fee1e 	bne	r2,zero,100e834 <__sfvwrite_r+0x68>
 100e87c:	0009883a 	mov	r4,zero
 100e880:	2005883a 	mov	r2,r4
 100e884:	dfc00a17 	ldw	ra,40(sp)
 100e888:	df000917 	ldw	fp,36(sp)
 100e88c:	ddc00817 	ldw	r23,32(sp)
 100e890:	dd800717 	ldw	r22,28(sp)
 100e894:	dd400617 	ldw	r21,24(sp)
 100e898:	dd000517 	ldw	r20,20(sp)
 100e89c:	dcc00417 	ldw	r19,16(sp)
 100e8a0:	dc800317 	ldw	r18,12(sp)
 100e8a4:	dc400217 	ldw	r17,8(sp)
 100e8a8:	dc000117 	ldw	r16,4(sp)
 100e8ac:	dec00b04 	addi	sp,sp,44
 100e8b0:	f800283a 	ret
 100e8b4:	100c5940 	call	100c594 <__swsetup_r>
 100e8b8:	1000e41e 	bne	r2,zero,100ec4c <__sfvwrite_r+0x480>
 100e8bc:	91c0030b 	ldhu	r7,12(r18)
 100e8c0:	b5400017 	ldw	r21,0(r22)
 100e8c4:	3880008c 	andi	r2,r7,2
 100e8c8:	103fd81e 	bne	r2,zero,100e82c <__sfvwrite_r+0x60>
 100e8cc:	3880004c 	andi	r2,r7,1
 100e8d0:	1005003a 	cmpeq	r2,r2,zero
 100e8d4:	10005726 	beq	r2,zero,100ea34 <__sfvwrite_r+0x268>
 100e8d8:	0029883a 	mov	r20,zero
 100e8dc:	002f883a 	mov	r23,zero
 100e8e0:	a0004226 	beq	r20,zero,100e9ec <__sfvwrite_r+0x220>
 100e8e4:	3880800c 	andi	r2,r7,512
 100e8e8:	94000217 	ldw	r16,8(r18)
 100e8ec:	10008b26 	beq	r2,zero,100eb1c <__sfvwrite_r+0x350>
 100e8f0:	800d883a 	mov	r6,r16
 100e8f4:	a400a536 	bltu	r20,r16,100eb8c <__sfvwrite_r+0x3c0>
 100e8f8:	3881200c 	andi	r2,r7,1152
 100e8fc:	10002726 	beq	r2,zero,100e99c <__sfvwrite_r+0x1d0>
 100e900:	90800517 	ldw	r2,20(r18)
 100e904:	92000417 	ldw	r8,16(r18)
 100e908:	91400017 	ldw	r5,0(r18)
 100e90c:	1087883a 	add	r3,r2,r2
 100e910:	1887883a 	add	r3,r3,r2
 100e914:	1808d7fa 	srli	r4,r3,31
 100e918:	2a21c83a 	sub	r16,r5,r8
 100e91c:	80800044 	addi	r2,r16,1
 100e920:	20c9883a 	add	r4,r4,r3
 100e924:	2027d07a 	srai	r19,r4,1
 100e928:	a085883a 	add	r2,r20,r2
 100e92c:	980d883a 	mov	r6,r19
 100e930:	9880022e 	bgeu	r19,r2,100e93c <__sfvwrite_r+0x170>
 100e934:	1027883a 	mov	r19,r2
 100e938:	100d883a 	mov	r6,r2
 100e93c:	3881000c 	andi	r2,r7,1024
 100e940:	1000b826 	beq	r2,zero,100ec24 <__sfvwrite_r+0x458>
 100e944:	300b883a 	mov	r5,r6
 100e948:	e009883a 	mov	r4,fp
 100e94c:	10097100 	call	1009710 <_malloc_r>
 100e950:	10003126 	beq	r2,zero,100ea18 <__sfvwrite_r+0x24c>
 100e954:	91400417 	ldw	r5,16(r18)
 100e958:	1009883a 	mov	r4,r2
 100e95c:	800d883a 	mov	r6,r16
 100e960:	1023883a 	mov	r17,r2
 100e964:	1009fa80 	call	1009fa8 <memcpy>
 100e968:	90c0030b 	ldhu	r3,12(r18)
 100e96c:	00beffc4 	movi	r2,-1025
 100e970:	1886703a 	and	r3,r3,r2
 100e974:	18c02014 	ori	r3,r3,128
 100e978:	90c0030d 	sth	r3,12(r18)
 100e97c:	9c07c83a 	sub	r3,r19,r16
 100e980:	8c05883a 	add	r2,r17,r16
 100e984:	a00d883a 	mov	r6,r20
 100e988:	a021883a 	mov	r16,r20
 100e98c:	90800015 	stw	r2,0(r18)
 100e990:	90c00215 	stw	r3,8(r18)
 100e994:	94400415 	stw	r17,16(r18)
 100e998:	94c00515 	stw	r19,20(r18)
 100e99c:	91000017 	ldw	r4,0(r18)
 100e9a0:	b80b883a 	mov	r5,r23
 100e9a4:	a023883a 	mov	r17,r20
 100e9a8:	100a0480 	call	100a048 <memmove>
 100e9ac:	90c00217 	ldw	r3,8(r18)
 100e9b0:	90800017 	ldw	r2,0(r18)
 100e9b4:	a027883a 	mov	r19,r20
 100e9b8:	1c07c83a 	sub	r3,r3,r16
 100e9bc:	1405883a 	add	r2,r2,r16
 100e9c0:	90c00215 	stw	r3,8(r18)
 100e9c4:	a021883a 	mov	r16,r20
 100e9c8:	90800015 	stw	r2,0(r18)
 100e9cc:	b0800217 	ldw	r2,8(r22)
 100e9d0:	1405c83a 	sub	r2,r2,r16
 100e9d4:	b0800215 	stw	r2,8(r22)
 100e9d8:	103fa826 	beq	r2,zero,100e87c <__sfvwrite_r+0xb0>
 100e9dc:	a469c83a 	sub	r20,r20,r17
 100e9e0:	91c0030b 	ldhu	r7,12(r18)
 100e9e4:	bcef883a 	add	r23,r23,r19
 100e9e8:	a03fbe1e 	bne	r20,zero,100e8e4 <__sfvwrite_r+0x118>
 100e9ec:	adc00017 	ldw	r23,0(r21)
 100e9f0:	ad000117 	ldw	r20,4(r21)
 100e9f4:	ad400204 	addi	r21,r21,8
 100e9f8:	003fb906 	br	100e8e0 <__sfvwrite_r+0x114>
 100e9fc:	ac400017 	ldw	r17,0(r21)
 100ea00:	ac000117 	ldw	r16,4(r21)
 100ea04:	ad400204 	addi	r21,r21,8
 100ea08:	003f8a06 	br	100e834 <__sfvwrite_r+0x68>
 100ea0c:	91400417 	ldw	r5,16(r18)
 100ea10:	e009883a 	mov	r4,fp
 100ea14:	100e4b80 	call	100e4b8 <_free_r>
 100ea18:	00800304 	movi	r2,12
 100ea1c:	e0800015 	stw	r2,0(fp)
 100ea20:	9080030b 	ldhu	r2,12(r18)
 100ea24:	013fffc4 	movi	r4,-1
 100ea28:	10801014 	ori	r2,r2,64
 100ea2c:	9080030d 	sth	r2,12(r18)
 100ea30:	003f9306 	br	100e880 <__sfvwrite_r+0xb4>
 100ea34:	0027883a 	mov	r19,zero
 100ea38:	002f883a 	mov	r23,zero
 100ea3c:	d8000015 	stw	zero,0(sp)
 100ea40:	0029883a 	mov	r20,zero
 100ea44:	98001e26 	beq	r19,zero,100eac0 <__sfvwrite_r+0x2f4>
 100ea48:	d8c00017 	ldw	r3,0(sp)
 100ea4c:	1804c03a 	cmpne	r2,r3,zero
 100ea50:	10005e26 	beq	r2,zero,100ebcc <__sfvwrite_r+0x400>
 100ea54:	9821883a 	mov	r16,r19
 100ea58:	a4c0012e 	bgeu	r20,r19,100ea60 <__sfvwrite_r+0x294>
 100ea5c:	a021883a 	mov	r16,r20
 100ea60:	91000017 	ldw	r4,0(r18)
 100ea64:	90800417 	ldw	r2,16(r18)
 100ea68:	91800217 	ldw	r6,8(r18)
 100ea6c:	91c00517 	ldw	r7,20(r18)
 100ea70:	1100022e 	bgeu	r2,r4,100ea7c <__sfvwrite_r+0x2b0>
 100ea74:	31e3883a 	add	r17,r6,r7
 100ea78:	8c001616 	blt	r17,r16,100ead4 <__sfvwrite_r+0x308>
 100ea7c:	81c03816 	blt	r16,r7,100eb60 <__sfvwrite_r+0x394>
 100ea80:	90c00917 	ldw	r3,36(r18)
 100ea84:	91400717 	ldw	r5,28(r18)
 100ea88:	e009883a 	mov	r4,fp
 100ea8c:	b80d883a 	mov	r6,r23
 100ea90:	183ee83a 	callr	r3
 100ea94:	1023883a 	mov	r17,r2
 100ea98:	00bfe10e 	bge	zero,r2,100ea20 <__sfvwrite_r+0x254>
 100ea9c:	a469c83a 	sub	r20,r20,r17
 100eaa0:	a0001826 	beq	r20,zero,100eb04 <__sfvwrite_r+0x338>
 100eaa4:	b0800217 	ldw	r2,8(r22)
 100eaa8:	1445c83a 	sub	r2,r2,r17
 100eaac:	b0800215 	stw	r2,8(r22)
 100eab0:	103f7226 	beq	r2,zero,100e87c <__sfvwrite_r+0xb0>
 100eab4:	9c67c83a 	sub	r19,r19,r17
 100eab8:	bc6f883a 	add	r23,r23,r17
 100eabc:	983fe21e 	bne	r19,zero,100ea48 <__sfvwrite_r+0x27c>
 100eac0:	adc00017 	ldw	r23,0(r21)
 100eac4:	acc00117 	ldw	r19,4(r21)
 100eac8:	ad400204 	addi	r21,r21,8
 100eacc:	d8000015 	stw	zero,0(sp)
 100ead0:	003fdc06 	br	100ea44 <__sfvwrite_r+0x278>
 100ead4:	b80b883a 	mov	r5,r23
 100ead8:	880d883a 	mov	r6,r17
 100eadc:	100a0480 	call	100a048 <memmove>
 100eae0:	90c00017 	ldw	r3,0(r18)
 100eae4:	e009883a 	mov	r4,fp
 100eae8:	900b883a 	mov	r5,r18
 100eaec:	1c47883a 	add	r3,r3,r17
 100eaf0:	90c00015 	stw	r3,0(r18)
 100eaf4:	100de9c0 	call	100de9c <_fflush_r>
 100eaf8:	103fc91e 	bne	r2,zero,100ea20 <__sfvwrite_r+0x254>
 100eafc:	a469c83a 	sub	r20,r20,r17
 100eb00:	a03fe81e 	bne	r20,zero,100eaa4 <__sfvwrite_r+0x2d8>
 100eb04:	e009883a 	mov	r4,fp
 100eb08:	900b883a 	mov	r5,r18
 100eb0c:	100de9c0 	call	100de9c <_fflush_r>
 100eb10:	103fc31e 	bne	r2,zero,100ea20 <__sfvwrite_r+0x254>
 100eb14:	d8000015 	stw	zero,0(sp)
 100eb18:	003fe206 	br	100eaa4 <__sfvwrite_r+0x2d8>
 100eb1c:	91000017 	ldw	r4,0(r18)
 100eb20:	90800417 	ldw	r2,16(r18)
 100eb24:	1100022e 	bgeu	r2,r4,100eb30 <__sfvwrite_r+0x364>
 100eb28:	8023883a 	mov	r17,r16
 100eb2c:	85003136 	bltu	r16,r20,100ebf4 <__sfvwrite_r+0x428>
 100eb30:	91c00517 	ldw	r7,20(r18)
 100eb34:	a1c01836 	bltu	r20,r7,100eb98 <__sfvwrite_r+0x3cc>
 100eb38:	90c00917 	ldw	r3,36(r18)
 100eb3c:	91400717 	ldw	r5,28(r18)
 100eb40:	e009883a 	mov	r4,fp
 100eb44:	b80d883a 	mov	r6,r23
 100eb48:	183ee83a 	callr	r3
 100eb4c:	1021883a 	mov	r16,r2
 100eb50:	00bfb30e 	bge	zero,r2,100ea20 <__sfvwrite_r+0x254>
 100eb54:	1023883a 	mov	r17,r2
 100eb58:	1027883a 	mov	r19,r2
 100eb5c:	003f9b06 	br	100e9cc <__sfvwrite_r+0x200>
 100eb60:	b80b883a 	mov	r5,r23
 100eb64:	800d883a 	mov	r6,r16
 100eb68:	100a0480 	call	100a048 <memmove>
 100eb6c:	90c00217 	ldw	r3,8(r18)
 100eb70:	90800017 	ldw	r2,0(r18)
 100eb74:	8023883a 	mov	r17,r16
 100eb78:	1c07c83a 	sub	r3,r3,r16
 100eb7c:	1405883a 	add	r2,r2,r16
 100eb80:	90c00215 	stw	r3,8(r18)
 100eb84:	90800015 	stw	r2,0(r18)
 100eb88:	003fc406 	br	100ea9c <__sfvwrite_r+0x2d0>
 100eb8c:	a00d883a 	mov	r6,r20
 100eb90:	a021883a 	mov	r16,r20
 100eb94:	003f8106 	br	100e99c <__sfvwrite_r+0x1d0>
 100eb98:	b80b883a 	mov	r5,r23
 100eb9c:	a00d883a 	mov	r6,r20
 100eba0:	100a0480 	call	100a048 <memmove>
 100eba4:	90c00217 	ldw	r3,8(r18)
 100eba8:	90800017 	ldw	r2,0(r18)
 100ebac:	a021883a 	mov	r16,r20
 100ebb0:	1d07c83a 	sub	r3,r3,r20
 100ebb4:	1505883a 	add	r2,r2,r20
 100ebb8:	a023883a 	mov	r17,r20
 100ebbc:	a027883a 	mov	r19,r20
 100ebc0:	90c00215 	stw	r3,8(r18)
 100ebc4:	90800015 	stw	r2,0(r18)
 100ebc8:	003f8006 	br	100e9cc <__sfvwrite_r+0x200>
 100ebcc:	b809883a 	mov	r4,r23
 100ebd0:	01400284 	movi	r5,10
 100ebd4:	980d883a 	mov	r6,r19
 100ebd8:	1009e500 	call	1009e50 <memchr>
 100ebdc:	10001726 	beq	r2,zero,100ec3c <__sfvwrite_r+0x470>
 100ebe0:	15c5c83a 	sub	r2,r2,r23
 100ebe4:	15000044 	addi	r20,r2,1
 100ebe8:	00800044 	movi	r2,1
 100ebec:	d8800015 	stw	r2,0(sp)
 100ebf0:	003f9806 	br	100ea54 <__sfvwrite_r+0x288>
 100ebf4:	b80b883a 	mov	r5,r23
 100ebf8:	800d883a 	mov	r6,r16
 100ebfc:	100a0480 	call	100a048 <memmove>
 100ec00:	90c00017 	ldw	r3,0(r18)
 100ec04:	e009883a 	mov	r4,fp
 100ec08:	900b883a 	mov	r5,r18
 100ec0c:	1c07883a 	add	r3,r3,r16
 100ec10:	90c00015 	stw	r3,0(r18)
 100ec14:	8027883a 	mov	r19,r16
 100ec18:	100de9c0 	call	100de9c <_fflush_r>
 100ec1c:	103f6b26 	beq	r2,zero,100e9cc <__sfvwrite_r+0x200>
 100ec20:	003f7f06 	br	100ea20 <__sfvwrite_r+0x254>
 100ec24:	400b883a 	mov	r5,r8
 100ec28:	e009883a 	mov	r4,fp
 100ec2c:	10100340 	call	1010034 <_realloc_r>
 100ec30:	103f7626 	beq	r2,zero,100ea0c <__sfvwrite_r+0x240>
 100ec34:	1023883a 	mov	r17,r2
 100ec38:	003f5006 	br	100e97c <__sfvwrite_r+0x1b0>
 100ec3c:	00c00044 	movi	r3,1
 100ec40:	9d000044 	addi	r20,r19,1
 100ec44:	d8c00015 	stw	r3,0(sp)
 100ec48:	003f8206 	br	100ea54 <__sfvwrite_r+0x288>
 100ec4c:	9080030b 	ldhu	r2,12(r18)
 100ec50:	00c00244 	movi	r3,9
 100ec54:	013fffc4 	movi	r4,-1
 100ec58:	10801014 	ori	r2,r2,64
 100ec5c:	9080030d 	sth	r2,12(r18)
 100ec60:	e0c00015 	stw	r3,0(fp)
 100ec64:	003f0606 	br	100e880 <__sfvwrite_r+0xb4>

0100ec68 <_fwalk_reent>:
 100ec68:	defff704 	addi	sp,sp,-36
 100ec6c:	dcc00315 	stw	r19,12(sp)
 100ec70:	24c0b804 	addi	r19,r4,736
 100ec74:	dd800615 	stw	r22,24(sp)
 100ec78:	dd400515 	stw	r21,20(sp)
 100ec7c:	dfc00815 	stw	ra,32(sp)
 100ec80:	ddc00715 	stw	r23,28(sp)
 100ec84:	dd000415 	stw	r20,16(sp)
 100ec88:	dc800215 	stw	r18,8(sp)
 100ec8c:	dc400115 	stw	r17,4(sp)
 100ec90:	dc000015 	stw	r16,0(sp)
 100ec94:	202b883a 	mov	r21,r4
 100ec98:	282d883a 	mov	r22,r5
 100ec9c:	100e1240 	call	100e124 <__sfp_lock_acquire>
 100eca0:	98002126 	beq	r19,zero,100ed28 <_fwalk_reent+0xc0>
 100eca4:	002f883a 	mov	r23,zero
 100eca8:	9c800117 	ldw	r18,4(r19)
 100ecac:	9c000217 	ldw	r16,8(r19)
 100ecb0:	90bfffc4 	addi	r2,r18,-1
 100ecb4:	10000d16 	blt	r2,zero,100ecec <_fwalk_reent+0x84>
 100ecb8:	0023883a 	mov	r17,zero
 100ecbc:	053fffc4 	movi	r20,-1
 100ecc0:	8080030f 	ldh	r2,12(r16)
 100ecc4:	8c400044 	addi	r17,r17,1
 100ecc8:	10000626 	beq	r2,zero,100ece4 <_fwalk_reent+0x7c>
 100eccc:	8080038f 	ldh	r2,14(r16)
 100ecd0:	800b883a 	mov	r5,r16
 100ecd4:	a809883a 	mov	r4,r21
 100ecd8:	15000226 	beq	r2,r20,100ece4 <_fwalk_reent+0x7c>
 100ecdc:	b03ee83a 	callr	r22
 100ece0:	b8aeb03a 	or	r23,r23,r2
 100ece4:	84001704 	addi	r16,r16,92
 100ece8:	947ff51e 	bne	r18,r17,100ecc0 <_fwalk_reent+0x58>
 100ecec:	9cc00017 	ldw	r19,0(r19)
 100ecf0:	983fed1e 	bne	r19,zero,100eca8 <_fwalk_reent+0x40>
 100ecf4:	100e1280 	call	100e128 <__sfp_lock_release>
 100ecf8:	b805883a 	mov	r2,r23
 100ecfc:	dfc00817 	ldw	ra,32(sp)
 100ed00:	ddc00717 	ldw	r23,28(sp)
 100ed04:	dd800617 	ldw	r22,24(sp)
 100ed08:	dd400517 	ldw	r21,20(sp)
 100ed0c:	dd000417 	ldw	r20,16(sp)
 100ed10:	dcc00317 	ldw	r19,12(sp)
 100ed14:	dc800217 	ldw	r18,8(sp)
 100ed18:	dc400117 	ldw	r17,4(sp)
 100ed1c:	dc000017 	ldw	r16,0(sp)
 100ed20:	dec00904 	addi	sp,sp,36
 100ed24:	f800283a 	ret
 100ed28:	002f883a 	mov	r23,zero
 100ed2c:	003ff106 	br	100ecf4 <_fwalk_reent+0x8c>

0100ed30 <_fwalk>:
 100ed30:	defff804 	addi	sp,sp,-32
 100ed34:	dcc00315 	stw	r19,12(sp)
 100ed38:	24c0b804 	addi	r19,r4,736
 100ed3c:	dd400515 	stw	r21,20(sp)
 100ed40:	dfc00715 	stw	ra,28(sp)
 100ed44:	dd800615 	stw	r22,24(sp)
 100ed48:	dd000415 	stw	r20,16(sp)
 100ed4c:	dc800215 	stw	r18,8(sp)
 100ed50:	dc400115 	stw	r17,4(sp)
 100ed54:	dc000015 	stw	r16,0(sp)
 100ed58:	282b883a 	mov	r21,r5
 100ed5c:	100e1240 	call	100e124 <__sfp_lock_acquire>
 100ed60:	98001f26 	beq	r19,zero,100ede0 <_fwalk+0xb0>
 100ed64:	002d883a 	mov	r22,zero
 100ed68:	9c800117 	ldw	r18,4(r19)
 100ed6c:	9c000217 	ldw	r16,8(r19)
 100ed70:	90bfffc4 	addi	r2,r18,-1
 100ed74:	10000c16 	blt	r2,zero,100eda8 <_fwalk+0x78>
 100ed78:	0023883a 	mov	r17,zero
 100ed7c:	053fffc4 	movi	r20,-1
 100ed80:	8080030f 	ldh	r2,12(r16)
 100ed84:	8c400044 	addi	r17,r17,1
 100ed88:	10000526 	beq	r2,zero,100eda0 <_fwalk+0x70>
 100ed8c:	8080038f 	ldh	r2,14(r16)
 100ed90:	8009883a 	mov	r4,r16
 100ed94:	15000226 	beq	r2,r20,100eda0 <_fwalk+0x70>
 100ed98:	a83ee83a 	callr	r21
 100ed9c:	b0acb03a 	or	r22,r22,r2
 100eda0:	84001704 	addi	r16,r16,92
 100eda4:	947ff61e 	bne	r18,r17,100ed80 <_fwalk+0x50>
 100eda8:	9cc00017 	ldw	r19,0(r19)
 100edac:	983fee1e 	bne	r19,zero,100ed68 <_fwalk+0x38>
 100edb0:	100e1280 	call	100e128 <__sfp_lock_release>
 100edb4:	b005883a 	mov	r2,r22
 100edb8:	dfc00717 	ldw	ra,28(sp)
 100edbc:	dd800617 	ldw	r22,24(sp)
 100edc0:	dd400517 	ldw	r21,20(sp)
 100edc4:	dd000417 	ldw	r20,16(sp)
 100edc8:	dcc00317 	ldw	r19,12(sp)
 100edcc:	dc800217 	ldw	r18,8(sp)
 100edd0:	dc400117 	ldw	r17,4(sp)
 100edd4:	dc000017 	ldw	r16,0(sp)
 100edd8:	dec00804 	addi	sp,sp,32
 100eddc:	f800283a 	ret
 100ede0:	002d883a 	mov	r22,zero
 100ede4:	003ff206 	br	100edb0 <_fwalk+0x80>

0100ede8 <__locale_charset>:
 100ede8:	d0a01317 	ldw	r2,-32692(gp)
 100edec:	f800283a 	ret

0100edf0 <_localeconv_r>:
 100edf0:	008040b4 	movhi	r2,258
 100edf4:	10bd1104 	addi	r2,r2,-3004
 100edf8:	f800283a 	ret

0100edfc <localeconv>:
 100edfc:	008040b4 	movhi	r2,258
 100ee00:	1084a904 	addi	r2,r2,4772
 100ee04:	11000017 	ldw	r4,0(r2)
 100ee08:	100edf01 	jmpi	100edf0 <_localeconv_r>

0100ee0c <_setlocale_r>:
 100ee0c:	defffc04 	addi	sp,sp,-16
 100ee10:	00c040b4 	movhi	r3,258
 100ee14:	18fd0c04 	addi	r3,r3,-3024
 100ee18:	dc800215 	stw	r18,8(sp)
 100ee1c:	dc400115 	stw	r17,4(sp)
 100ee20:	dc000015 	stw	r16,0(sp)
 100ee24:	2023883a 	mov	r17,r4
 100ee28:	2825883a 	mov	r18,r5
 100ee2c:	dfc00315 	stw	ra,12(sp)
 100ee30:	3021883a 	mov	r16,r6
 100ee34:	3009883a 	mov	r4,r6
 100ee38:	180b883a 	mov	r5,r3
 100ee3c:	30000926 	beq	r6,zero,100ee64 <_setlocale_r+0x58>
 100ee40:	10107e40 	call	10107e4 <strcmp>
 100ee44:	8009883a 	mov	r4,r16
 100ee48:	014040b4 	movhi	r5,258
 100ee4c:	297cf704 	addi	r5,r5,-3108
 100ee50:	10000b1e 	bne	r2,zero,100ee80 <_setlocale_r+0x74>
 100ee54:	8c000d15 	stw	r16,52(r17)
 100ee58:	8c800c15 	stw	r18,48(r17)
 100ee5c:	00c040b4 	movhi	r3,258
 100ee60:	18fd0c04 	addi	r3,r3,-3024
 100ee64:	1805883a 	mov	r2,r3
 100ee68:	dfc00317 	ldw	ra,12(sp)
 100ee6c:	dc800217 	ldw	r18,8(sp)
 100ee70:	dc400117 	ldw	r17,4(sp)
 100ee74:	dc000017 	ldw	r16,0(sp)
 100ee78:	dec00404 	addi	sp,sp,16
 100ee7c:	f800283a 	ret
 100ee80:	10107e40 	call	10107e4 <strcmp>
 100ee84:	0007883a 	mov	r3,zero
 100ee88:	103ff226 	beq	r2,zero,100ee54 <_setlocale_r+0x48>
 100ee8c:	003ff506 	br	100ee64 <_setlocale_r+0x58>

0100ee90 <setlocale>:
 100ee90:	018040b4 	movhi	r6,258
 100ee94:	3184a904 	addi	r6,r6,4772
 100ee98:	2007883a 	mov	r3,r4
 100ee9c:	31000017 	ldw	r4,0(r6)
 100eea0:	280d883a 	mov	r6,r5
 100eea4:	180b883a 	mov	r5,r3
 100eea8:	100ee0c1 	jmpi	100ee0c <_setlocale_r>

0100eeac <__smakebuf_r>:
 100eeac:	2880030b 	ldhu	r2,12(r5)
 100eeb0:	deffed04 	addi	sp,sp,-76
 100eeb4:	dc401015 	stw	r17,64(sp)
 100eeb8:	1080008c 	andi	r2,r2,2
 100eebc:	dc000f15 	stw	r16,60(sp)
 100eec0:	dfc01215 	stw	ra,72(sp)
 100eec4:	dc801115 	stw	r18,68(sp)
 100eec8:	2821883a 	mov	r16,r5
 100eecc:	2023883a 	mov	r17,r4
 100eed0:	10000b26 	beq	r2,zero,100ef00 <__smakebuf_r+0x54>
 100eed4:	28c010c4 	addi	r3,r5,67
 100eed8:	00800044 	movi	r2,1
 100eedc:	28800515 	stw	r2,20(r5)
 100eee0:	28c00415 	stw	r3,16(r5)
 100eee4:	28c00015 	stw	r3,0(r5)
 100eee8:	dfc01217 	ldw	ra,72(sp)
 100eeec:	dc801117 	ldw	r18,68(sp)
 100eef0:	dc401017 	ldw	r17,64(sp)
 100eef4:	dc000f17 	ldw	r16,60(sp)
 100eef8:	dec01304 	addi	sp,sp,76
 100eefc:	f800283a 	ret
 100ef00:	2940038f 	ldh	r5,14(r5)
 100ef04:	28002116 	blt	r5,zero,100ef8c <__smakebuf_r+0xe0>
 100ef08:	d80d883a 	mov	r6,sp
 100ef0c:	1010b600 	call	1010b60 <_fstat_r>
 100ef10:	10001e16 	blt	r2,zero,100ef8c <__smakebuf_r+0xe0>
 100ef14:	d8800117 	ldw	r2,4(sp)
 100ef18:	00e00014 	movui	r3,32768
 100ef1c:	113c000c 	andi	r4,r2,61440
 100ef20:	20c03126 	beq	r4,r3,100efe8 <__smakebuf_r+0x13c>
 100ef24:	8080030b 	ldhu	r2,12(r16)
 100ef28:	00c80004 	movi	r3,8192
 100ef2c:	10820014 	ori	r2,r2,2048
 100ef30:	8080030d 	sth	r2,12(r16)
 100ef34:	20c01e26 	beq	r4,r3,100efb0 <__smakebuf_r+0x104>
 100ef38:	04810004 	movi	r18,1024
 100ef3c:	8809883a 	mov	r4,r17
 100ef40:	900b883a 	mov	r5,r18
 100ef44:	10097100 	call	1009710 <_malloc_r>
 100ef48:	1009883a 	mov	r4,r2
 100ef4c:	10003126 	beq	r2,zero,100f014 <__smakebuf_r+0x168>
 100ef50:	80c0030b 	ldhu	r3,12(r16)
 100ef54:	00804074 	movhi	r2,257
 100ef58:	10b88604 	addi	r2,r2,-7656
 100ef5c:	88800f15 	stw	r2,60(r17)
 100ef60:	18c02014 	ori	r3,r3,128
 100ef64:	84800515 	stw	r18,20(r16)
 100ef68:	80c0030d 	sth	r3,12(r16)
 100ef6c:	81000415 	stw	r4,16(r16)
 100ef70:	81000015 	stw	r4,0(r16)
 100ef74:	dfc01217 	ldw	ra,72(sp)
 100ef78:	dc801117 	ldw	r18,68(sp)
 100ef7c:	dc401017 	ldw	r17,64(sp)
 100ef80:	dc000f17 	ldw	r16,60(sp)
 100ef84:	dec01304 	addi	sp,sp,76
 100ef88:	f800283a 	ret
 100ef8c:	80c0030b 	ldhu	r3,12(r16)
 100ef90:	1880200c 	andi	r2,r3,128
 100ef94:	10000426 	beq	r2,zero,100efa8 <__smakebuf_r+0xfc>
 100ef98:	04801004 	movi	r18,64
 100ef9c:	18820014 	ori	r2,r3,2048
 100efa0:	8080030d 	sth	r2,12(r16)
 100efa4:	003fe506 	br	100ef3c <__smakebuf_r+0x90>
 100efa8:	04810004 	movi	r18,1024
 100efac:	003ffb06 	br	100ef9c <__smakebuf_r+0xf0>
 100efb0:	8140038f 	ldh	r5,14(r16)
 100efb4:	8809883a 	mov	r4,r17
 100efb8:	1010bd40 	call	1010bd4 <_isatty_r>
 100efbc:	103fde26 	beq	r2,zero,100ef38 <__smakebuf_r+0x8c>
 100efc0:	8080030b 	ldhu	r2,12(r16)
 100efc4:	80c010c4 	addi	r3,r16,67
 100efc8:	04810004 	movi	r18,1024
 100efcc:	10800054 	ori	r2,r2,1
 100efd0:	8080030d 	sth	r2,12(r16)
 100efd4:	00800044 	movi	r2,1
 100efd8:	80c00415 	stw	r3,16(r16)
 100efdc:	80800515 	stw	r2,20(r16)
 100efe0:	80c00015 	stw	r3,0(r16)
 100efe4:	003fd506 	br	100ef3c <__smakebuf_r+0x90>
 100efe8:	80c00a17 	ldw	r3,40(r16)
 100efec:	00804074 	movhi	r2,257
 100eff0:	1081a804 	addi	r2,r2,1696
 100eff4:	18bfcb1e 	bne	r3,r2,100ef24 <__smakebuf_r+0x78>
 100eff8:	8080030b 	ldhu	r2,12(r16)
 100effc:	00c10004 	movi	r3,1024
 100f000:	1825883a 	mov	r18,r3
 100f004:	10c4b03a 	or	r2,r2,r3
 100f008:	8080030d 	sth	r2,12(r16)
 100f00c:	80c01315 	stw	r3,76(r16)
 100f010:	003fca06 	br	100ef3c <__smakebuf_r+0x90>
 100f014:	8100030b 	ldhu	r4,12(r16)
 100f018:	2080800c 	andi	r2,r4,512
 100f01c:	103fb21e 	bne	r2,zero,100eee8 <__smakebuf_r+0x3c>
 100f020:	80c010c4 	addi	r3,r16,67
 100f024:	21000094 	ori	r4,r4,2
 100f028:	00800044 	movi	r2,1
 100f02c:	80800515 	stw	r2,20(r16)
 100f030:	8100030d 	sth	r4,12(r16)
 100f034:	80c00415 	stw	r3,16(r16)
 100f038:	80c00015 	stw	r3,0(r16)
 100f03c:	003faa06 	br	100eee8 <__smakebuf_r+0x3c>

0100f040 <_Bfree>:
 100f040:	28000826 	beq	r5,zero,100f064 <_Bfree+0x24>
 100f044:	28800117 	ldw	r2,4(r5)
 100f048:	21001317 	ldw	r4,76(r4)
 100f04c:	1085883a 	add	r2,r2,r2
 100f050:	1085883a 	add	r2,r2,r2
 100f054:	1105883a 	add	r2,r2,r4
 100f058:	10c00017 	ldw	r3,0(r2)
 100f05c:	28c00015 	stw	r3,0(r5)
 100f060:	11400015 	stw	r5,0(r2)
 100f064:	f800283a 	ret

0100f068 <__hi0bits>:
 100f068:	20bfffec 	andhi	r2,r4,65535
 100f06c:	10001426 	beq	r2,zero,100f0c0 <__hi0bits+0x58>
 100f070:	0007883a 	mov	r3,zero
 100f074:	20bfc02c 	andhi	r2,r4,65280
 100f078:	1000021e 	bne	r2,zero,100f084 <__hi0bits+0x1c>
 100f07c:	2008923a 	slli	r4,r4,8
 100f080:	18c00204 	addi	r3,r3,8
 100f084:	20bc002c 	andhi	r2,r4,61440
 100f088:	1000021e 	bne	r2,zero,100f094 <__hi0bits+0x2c>
 100f08c:	2008913a 	slli	r4,r4,4
 100f090:	18c00104 	addi	r3,r3,4
 100f094:	20b0002c 	andhi	r2,r4,49152
 100f098:	1000031e 	bne	r2,zero,100f0a8 <__hi0bits+0x40>
 100f09c:	2105883a 	add	r2,r4,r4
 100f0a0:	18c00084 	addi	r3,r3,2
 100f0a4:	1089883a 	add	r4,r2,r2
 100f0a8:	20000316 	blt	r4,zero,100f0b8 <__hi0bits+0x50>
 100f0ac:	2090002c 	andhi	r2,r4,16384
 100f0b0:	10000626 	beq	r2,zero,100f0cc <__hi0bits+0x64>
 100f0b4:	18c00044 	addi	r3,r3,1
 100f0b8:	1805883a 	mov	r2,r3
 100f0bc:	f800283a 	ret
 100f0c0:	2008943a 	slli	r4,r4,16
 100f0c4:	00c00404 	movi	r3,16
 100f0c8:	003fea06 	br	100f074 <__hi0bits+0xc>
 100f0cc:	00c00804 	movi	r3,32
 100f0d0:	1805883a 	mov	r2,r3
 100f0d4:	f800283a 	ret

0100f0d8 <__lo0bits>:
 100f0d8:	20c00017 	ldw	r3,0(r4)
 100f0dc:	188001cc 	andi	r2,r3,7
 100f0e0:	10000a26 	beq	r2,zero,100f10c <__lo0bits+0x34>
 100f0e4:	1880004c 	andi	r2,r3,1
 100f0e8:	1005003a 	cmpeq	r2,r2,zero
 100f0ec:	10002126 	beq	r2,zero,100f174 <__lo0bits+0x9c>
 100f0f0:	1880008c 	andi	r2,r3,2
 100f0f4:	1000251e 	bne	r2,zero,100f18c <__lo0bits+0xb4>
 100f0f8:	1804d0ba 	srli	r2,r3,2
 100f0fc:	01400084 	movi	r5,2
 100f100:	20800015 	stw	r2,0(r4)
 100f104:	2805883a 	mov	r2,r5
 100f108:	f800283a 	ret
 100f10c:	18bfffcc 	andi	r2,r3,65535
 100f110:	10001526 	beq	r2,zero,100f168 <__lo0bits+0x90>
 100f114:	000b883a 	mov	r5,zero
 100f118:	18803fcc 	andi	r2,r3,255
 100f11c:	1000021e 	bne	r2,zero,100f128 <__lo0bits+0x50>
 100f120:	1806d23a 	srli	r3,r3,8
 100f124:	29400204 	addi	r5,r5,8
 100f128:	188003cc 	andi	r2,r3,15
 100f12c:	1000021e 	bne	r2,zero,100f138 <__lo0bits+0x60>
 100f130:	1806d13a 	srli	r3,r3,4
 100f134:	29400104 	addi	r5,r5,4
 100f138:	188000cc 	andi	r2,r3,3
 100f13c:	1000021e 	bne	r2,zero,100f148 <__lo0bits+0x70>
 100f140:	1806d0ba 	srli	r3,r3,2
 100f144:	29400084 	addi	r5,r5,2
 100f148:	1880004c 	andi	r2,r3,1
 100f14c:	1000031e 	bne	r2,zero,100f15c <__lo0bits+0x84>
 100f150:	1806d07a 	srli	r3,r3,1
 100f154:	18000a26 	beq	r3,zero,100f180 <__lo0bits+0xa8>
 100f158:	29400044 	addi	r5,r5,1
 100f15c:	2805883a 	mov	r2,r5
 100f160:	20c00015 	stw	r3,0(r4)
 100f164:	f800283a 	ret
 100f168:	1806d43a 	srli	r3,r3,16
 100f16c:	01400404 	movi	r5,16
 100f170:	003fe906 	br	100f118 <__lo0bits+0x40>
 100f174:	000b883a 	mov	r5,zero
 100f178:	2805883a 	mov	r2,r5
 100f17c:	f800283a 	ret
 100f180:	01400804 	movi	r5,32
 100f184:	2805883a 	mov	r2,r5
 100f188:	f800283a 	ret
 100f18c:	1804d07a 	srli	r2,r3,1
 100f190:	01400044 	movi	r5,1
 100f194:	20800015 	stw	r2,0(r4)
 100f198:	003fda06 	br	100f104 <__lo0bits+0x2c>

0100f19c <__mcmp>:
 100f19c:	20800417 	ldw	r2,16(r4)
 100f1a0:	28c00417 	ldw	r3,16(r5)
 100f1a4:	10cfc83a 	sub	r7,r2,r3
 100f1a8:	38000c1e 	bne	r7,zero,100f1dc <__mcmp+0x40>
 100f1ac:	18c5883a 	add	r2,r3,r3
 100f1b0:	1085883a 	add	r2,r2,r2
 100f1b4:	10c00504 	addi	r3,r2,20
 100f1b8:	21000504 	addi	r4,r4,20
 100f1bc:	28cb883a 	add	r5,r5,r3
 100f1c0:	2085883a 	add	r2,r4,r2
 100f1c4:	10bfff04 	addi	r2,r2,-4
 100f1c8:	297fff04 	addi	r5,r5,-4
 100f1cc:	11800017 	ldw	r6,0(r2)
 100f1d0:	28c00017 	ldw	r3,0(r5)
 100f1d4:	30c0031e 	bne	r6,r3,100f1e4 <__mcmp+0x48>
 100f1d8:	20bffa36 	bltu	r4,r2,100f1c4 <__mcmp+0x28>
 100f1dc:	3805883a 	mov	r2,r7
 100f1e0:	f800283a 	ret
 100f1e4:	30c00336 	bltu	r6,r3,100f1f4 <__mcmp+0x58>
 100f1e8:	01c00044 	movi	r7,1
 100f1ec:	3805883a 	mov	r2,r7
 100f1f0:	f800283a 	ret
 100f1f4:	01ffffc4 	movi	r7,-1
 100f1f8:	003ff806 	br	100f1dc <__mcmp+0x40>

0100f1fc <__ulp>:
 100f1fc:	295ffc2c 	andhi	r5,r5,32752
 100f200:	013f3034 	movhi	r4,64704
 100f204:	290b883a 	add	r5,r5,r4
 100f208:	0145c83a 	sub	r2,zero,r5
 100f20c:	1007d53a 	srai	r3,r2,20
 100f210:	000d883a 	mov	r6,zero
 100f214:	0140040e 	bge	zero,r5,100f228 <__ulp+0x2c>
 100f218:	280f883a 	mov	r7,r5
 100f21c:	3807883a 	mov	r3,r7
 100f220:	3005883a 	mov	r2,r6
 100f224:	f800283a 	ret
 100f228:	008004c4 	movi	r2,19
 100f22c:	193ffb04 	addi	r4,r3,-20
 100f230:	10c00c0e 	bge	r2,r3,100f264 <__ulp+0x68>
 100f234:	008007c4 	movi	r2,31
 100f238:	1107c83a 	sub	r3,r2,r4
 100f23c:	00800784 	movi	r2,30
 100f240:	01400044 	movi	r5,1
 100f244:	11000216 	blt	r2,r4,100f250 <__ulp+0x54>
 100f248:	00800044 	movi	r2,1
 100f24c:	10ca983a 	sll	r5,r2,r3
 100f250:	000f883a 	mov	r7,zero
 100f254:	280d883a 	mov	r6,r5
 100f258:	3807883a 	mov	r3,r7
 100f25c:	3005883a 	mov	r2,r6
 100f260:	f800283a 	ret
 100f264:	00800234 	movhi	r2,8
 100f268:	10cfd83a 	sra	r7,r2,r3
 100f26c:	000d883a 	mov	r6,zero
 100f270:	3005883a 	mov	r2,r6
 100f274:	3807883a 	mov	r3,r7
 100f278:	f800283a 	ret

0100f27c <__b2d>:
 100f27c:	20800417 	ldw	r2,16(r4)
 100f280:	defff904 	addi	sp,sp,-28
 100f284:	dd000415 	stw	r20,16(sp)
 100f288:	1085883a 	add	r2,r2,r2
 100f28c:	25000504 	addi	r20,r4,20
 100f290:	1085883a 	add	r2,r2,r2
 100f294:	dc000015 	stw	r16,0(sp)
 100f298:	a0a1883a 	add	r16,r20,r2
 100f29c:	dd400515 	stw	r21,20(sp)
 100f2a0:	857fff17 	ldw	r21,-4(r16)
 100f2a4:	dc400115 	stw	r17,4(sp)
 100f2a8:	dfc00615 	stw	ra,24(sp)
 100f2ac:	a809883a 	mov	r4,r21
 100f2b0:	2823883a 	mov	r17,r5
 100f2b4:	dcc00315 	stw	r19,12(sp)
 100f2b8:	dc800215 	stw	r18,8(sp)
 100f2bc:	100f0680 	call	100f068 <__hi0bits>
 100f2c0:	100b883a 	mov	r5,r2
 100f2c4:	00800804 	movi	r2,32
 100f2c8:	1145c83a 	sub	r2,r2,r5
 100f2cc:	88800015 	stw	r2,0(r17)
 100f2d0:	00800284 	movi	r2,10
 100f2d4:	80ffff04 	addi	r3,r16,-4
 100f2d8:	11401416 	blt	r2,r5,100f32c <__b2d+0xb0>
 100f2dc:	008002c4 	movi	r2,11
 100f2e0:	1149c83a 	sub	r4,r2,r5
 100f2e4:	a0c02736 	bltu	r20,r3,100f384 <__b2d+0x108>
 100f2e8:	000d883a 	mov	r6,zero
 100f2ec:	28800544 	addi	r2,r5,21
 100f2f0:	a906d83a 	srl	r3,r21,r4
 100f2f4:	a884983a 	sll	r2,r21,r2
 100f2f8:	1ccffc34 	orhi	r19,r3,16368
 100f2fc:	11a4b03a 	or	r18,r2,r6
 100f300:	9005883a 	mov	r2,r18
 100f304:	9807883a 	mov	r3,r19
 100f308:	dfc00617 	ldw	ra,24(sp)
 100f30c:	dd400517 	ldw	r21,20(sp)
 100f310:	dd000417 	ldw	r20,16(sp)
 100f314:	dcc00317 	ldw	r19,12(sp)
 100f318:	dc800217 	ldw	r18,8(sp)
 100f31c:	dc400117 	ldw	r17,4(sp)
 100f320:	dc000017 	ldw	r16,0(sp)
 100f324:	dec00704 	addi	sp,sp,28
 100f328:	f800283a 	ret
 100f32c:	a0c00e36 	bltu	r20,r3,100f368 <__b2d+0xec>
 100f330:	293ffd44 	addi	r4,r5,-11
 100f334:	000d883a 	mov	r6,zero
 100f338:	20000f26 	beq	r4,zero,100f378 <__b2d+0xfc>
 100f33c:	00800804 	movi	r2,32
 100f340:	110bc83a 	sub	r5,r2,r4
 100f344:	a0c01236 	bltu	r20,r3,100f390 <__b2d+0x114>
 100f348:	000f883a 	mov	r7,zero
 100f34c:	a904983a 	sll	r2,r21,r4
 100f350:	3146d83a 	srl	r3,r6,r5
 100f354:	3108983a 	sll	r4,r6,r4
 100f358:	108ffc34 	orhi	r2,r2,16368
 100f35c:	18a6b03a 	or	r19,r3,r2
 100f360:	3924b03a 	or	r18,r7,r4
 100f364:	003fe606 	br	100f300 <__b2d+0x84>
 100f368:	293ffd44 	addi	r4,r5,-11
 100f36c:	81bffe17 	ldw	r6,-8(r16)
 100f370:	80fffe04 	addi	r3,r16,-8
 100f374:	203ff11e 	bne	r4,zero,100f33c <__b2d+0xc0>
 100f378:	accffc34 	orhi	r19,r21,16368
 100f37c:	3025883a 	mov	r18,r6
 100f380:	003fdf06 	br	100f300 <__b2d+0x84>
 100f384:	18bfff17 	ldw	r2,-4(r3)
 100f388:	110cd83a 	srl	r6,r2,r4
 100f38c:	003fd706 	br	100f2ec <__b2d+0x70>
 100f390:	18bfff17 	ldw	r2,-4(r3)
 100f394:	114ed83a 	srl	r7,r2,r5
 100f398:	003fec06 	br	100f34c <__b2d+0xd0>

0100f39c <__ratio>:
 100f39c:	defff904 	addi	sp,sp,-28
 100f3a0:	dc400215 	stw	r17,8(sp)
 100f3a4:	2823883a 	mov	r17,r5
 100f3a8:	d80b883a 	mov	r5,sp
 100f3ac:	dfc00615 	stw	ra,24(sp)
 100f3b0:	dd000515 	stw	r20,20(sp)
 100f3b4:	dcc00415 	stw	r19,16(sp)
 100f3b8:	dc800315 	stw	r18,12(sp)
 100f3bc:	2025883a 	mov	r18,r4
 100f3c0:	100f27c0 	call	100f27c <__b2d>
 100f3c4:	8809883a 	mov	r4,r17
 100f3c8:	d9400104 	addi	r5,sp,4
 100f3cc:	1027883a 	mov	r19,r2
 100f3d0:	1829883a 	mov	r20,r3
 100f3d4:	100f27c0 	call	100f27c <__b2d>
 100f3d8:	89000417 	ldw	r4,16(r17)
 100f3dc:	91c00417 	ldw	r7,16(r18)
 100f3e0:	d9800117 	ldw	r6,4(sp)
 100f3e4:	180b883a 	mov	r5,r3
 100f3e8:	390fc83a 	sub	r7,r7,r4
 100f3ec:	1009883a 	mov	r4,r2
 100f3f0:	d8800017 	ldw	r2,0(sp)
 100f3f4:	380e917a 	slli	r7,r7,5
 100f3f8:	2011883a 	mov	r8,r4
 100f3fc:	1185c83a 	sub	r2,r2,r6
 100f400:	11c5883a 	add	r2,r2,r7
 100f404:	1006953a 	slli	r3,r2,20
 100f408:	2813883a 	mov	r9,r5
 100f40c:	00800d0e 	bge	zero,r2,100f444 <__ratio+0xa8>
 100f410:	1d29883a 	add	r20,r3,r20
 100f414:	a00b883a 	mov	r5,r20
 100f418:	480f883a 	mov	r7,r9
 100f41c:	9809883a 	mov	r4,r19
 100f420:	400d883a 	mov	r6,r8
 100f424:	10121880 	call	1012188 <__divdf3>
 100f428:	dfc00617 	ldw	ra,24(sp)
 100f42c:	dd000517 	ldw	r20,20(sp)
 100f430:	dcc00417 	ldw	r19,16(sp)
 100f434:	dc800317 	ldw	r18,12(sp)
 100f438:	dc400217 	ldw	r17,8(sp)
 100f43c:	dec00704 	addi	sp,sp,28
 100f440:	f800283a 	ret
 100f444:	28d3c83a 	sub	r9,r5,r3
 100f448:	003ff206 	br	100f414 <__ratio+0x78>

0100f44c <_mprec_log10>:
 100f44c:	defffe04 	addi	sp,sp,-8
 100f450:	008005c4 	movi	r2,23
 100f454:	dc000015 	stw	r16,0(sp)
 100f458:	dfc00115 	stw	ra,4(sp)
 100f45c:	2021883a 	mov	r16,r4
 100f460:	11000c16 	blt	r2,r4,100f494 <_mprec_log10+0x48>
 100f464:	200490fa 	slli	r2,r4,3
 100f468:	00c040b4 	movhi	r3,258
 100f46c:	18fd1d04 	addi	r3,r3,-2956
 100f470:	10c5883a 	add	r2,r2,r3
 100f474:	12400117 	ldw	r9,4(r2)
 100f478:	12000017 	ldw	r8,0(r2)
 100f47c:	4807883a 	mov	r3,r9
 100f480:	4005883a 	mov	r2,r8
 100f484:	dfc00117 	ldw	ra,4(sp)
 100f488:	dc000017 	ldw	r16,0(sp)
 100f48c:	dec00204 	addi	sp,sp,8
 100f490:	f800283a 	ret
 100f494:	0011883a 	mov	r8,zero
 100f498:	024ffc34 	movhi	r9,16368
 100f49c:	0005883a 	mov	r2,zero
 100f4a0:	00d00934 	movhi	r3,16420
 100f4a4:	480b883a 	mov	r5,r9
 100f4a8:	4009883a 	mov	r4,r8
 100f4ac:	180f883a 	mov	r7,r3
 100f4b0:	100d883a 	mov	r6,r2
 100f4b4:	1011dc40 	call	1011dc4 <__muldf3>
 100f4b8:	843fffc4 	addi	r16,r16,-1
 100f4bc:	1011883a 	mov	r8,r2
 100f4c0:	1813883a 	mov	r9,r3
 100f4c4:	803ff51e 	bne	r16,zero,100f49c <_mprec_log10+0x50>
 100f4c8:	4005883a 	mov	r2,r8
 100f4cc:	4807883a 	mov	r3,r9
 100f4d0:	dfc00117 	ldw	ra,4(sp)
 100f4d4:	dc000017 	ldw	r16,0(sp)
 100f4d8:	dec00204 	addi	sp,sp,8
 100f4dc:	f800283a 	ret

0100f4e0 <__copybits>:
 100f4e0:	297fffc4 	addi	r5,r5,-1
 100f4e4:	30800417 	ldw	r2,16(r6)
 100f4e8:	280bd17a 	srai	r5,r5,5
 100f4ec:	31800504 	addi	r6,r6,20
 100f4f0:	1085883a 	add	r2,r2,r2
 100f4f4:	294b883a 	add	r5,r5,r5
 100f4f8:	294b883a 	add	r5,r5,r5
 100f4fc:	1085883a 	add	r2,r2,r2
 100f500:	290b883a 	add	r5,r5,r4
 100f504:	3087883a 	add	r3,r6,r2
 100f508:	29400104 	addi	r5,r5,4
 100f50c:	30c0052e 	bgeu	r6,r3,100f524 <__copybits+0x44>
 100f510:	30800017 	ldw	r2,0(r6)
 100f514:	31800104 	addi	r6,r6,4
 100f518:	20800015 	stw	r2,0(r4)
 100f51c:	21000104 	addi	r4,r4,4
 100f520:	30fffb36 	bltu	r6,r3,100f510 <__copybits+0x30>
 100f524:	2140032e 	bgeu	r4,r5,100f534 <__copybits+0x54>
 100f528:	20000015 	stw	zero,0(r4)
 100f52c:	21000104 	addi	r4,r4,4
 100f530:	217ffd36 	bltu	r4,r5,100f528 <__copybits+0x48>
 100f534:	f800283a 	ret

0100f538 <__any_on>:
 100f538:	20800417 	ldw	r2,16(r4)
 100f53c:	2807d17a 	srai	r3,r5,5
 100f540:	21000504 	addi	r4,r4,20
 100f544:	10c00d0e 	bge	r2,r3,100f57c <__any_on+0x44>
 100f548:	1085883a 	add	r2,r2,r2
 100f54c:	1085883a 	add	r2,r2,r2
 100f550:	208d883a 	add	r6,r4,r2
 100f554:	2180182e 	bgeu	r4,r6,100f5b8 <__any_on+0x80>
 100f558:	30bfff17 	ldw	r2,-4(r6)
 100f55c:	30ffff04 	addi	r3,r6,-4
 100f560:	1000041e 	bne	r2,zero,100f574 <__any_on+0x3c>
 100f564:	20c0142e 	bgeu	r4,r3,100f5b8 <__any_on+0x80>
 100f568:	18ffff04 	addi	r3,r3,-4
 100f56c:	18800017 	ldw	r2,0(r3)
 100f570:	103ffc26 	beq	r2,zero,100f564 <__any_on+0x2c>
 100f574:	00800044 	movi	r2,1
 100f578:	f800283a 	ret
 100f57c:	18800a0e 	bge	r3,r2,100f5a8 <__any_on+0x70>
 100f580:	294007cc 	andi	r5,r5,31
 100f584:	28000826 	beq	r5,zero,100f5a8 <__any_on+0x70>
 100f588:	18c5883a 	add	r2,r3,r3
 100f58c:	1085883a 	add	r2,r2,r2
 100f590:	208d883a 	add	r6,r4,r2
 100f594:	30c00017 	ldw	r3,0(r6)
 100f598:	1944d83a 	srl	r2,r3,r5
 100f59c:	1144983a 	sll	r2,r2,r5
 100f5a0:	18bff41e 	bne	r3,r2,100f574 <__any_on+0x3c>
 100f5a4:	003feb06 	br	100f554 <__any_on+0x1c>
 100f5a8:	18c5883a 	add	r2,r3,r3
 100f5ac:	1085883a 	add	r2,r2,r2
 100f5b0:	208d883a 	add	r6,r4,r2
 100f5b4:	003fe706 	br	100f554 <__any_on+0x1c>
 100f5b8:	0005883a 	mov	r2,zero
 100f5bc:	f800283a 	ret

0100f5c0 <_Balloc>:
 100f5c0:	20c01317 	ldw	r3,76(r4)
 100f5c4:	defffb04 	addi	sp,sp,-20
 100f5c8:	dcc00315 	stw	r19,12(sp)
 100f5cc:	dc800215 	stw	r18,8(sp)
 100f5d0:	dfc00415 	stw	ra,16(sp)
 100f5d4:	2825883a 	mov	r18,r5
 100f5d8:	dc400115 	stw	r17,4(sp)
 100f5dc:	dc000015 	stw	r16,0(sp)
 100f5e0:	2027883a 	mov	r19,r4
 100f5e4:	01800404 	movi	r6,16
 100f5e8:	01400104 	movi	r5,4
 100f5ec:	18001726 	beq	r3,zero,100f64c <_Balloc+0x8c>
 100f5f0:	01400044 	movi	r5,1
 100f5f4:	9485883a 	add	r2,r18,r18
 100f5f8:	2ca2983a 	sll	r17,r5,r18
 100f5fc:	1085883a 	add	r2,r2,r2
 100f600:	10c7883a 	add	r3,r2,r3
 100f604:	1c000017 	ldw	r16,0(r3)
 100f608:	8c4d883a 	add	r6,r17,r17
 100f60c:	318d883a 	add	r6,r6,r6
 100f610:	9809883a 	mov	r4,r19
 100f614:	31800504 	addi	r6,r6,20
 100f618:	80001226 	beq	r16,zero,100f664 <_Balloc+0xa4>
 100f61c:	80800017 	ldw	r2,0(r16)
 100f620:	18800015 	stw	r2,0(r3)
 100f624:	80000415 	stw	zero,16(r16)
 100f628:	80000315 	stw	zero,12(r16)
 100f62c:	8005883a 	mov	r2,r16
 100f630:	dfc00417 	ldw	ra,16(sp)
 100f634:	dcc00317 	ldw	r19,12(sp)
 100f638:	dc800217 	ldw	r18,8(sp)
 100f63c:	dc400117 	ldw	r17,4(sp)
 100f640:	dc000017 	ldw	r16,0(sp)
 100f644:	dec00504 	addi	sp,sp,20
 100f648:	f800283a 	ret
 100f64c:	10109180 	call	1010918 <_calloc_r>
 100f650:	1007883a 	mov	r3,r2
 100f654:	0021883a 	mov	r16,zero
 100f658:	98801315 	stw	r2,76(r19)
 100f65c:	103fe41e 	bne	r2,zero,100f5f0 <_Balloc+0x30>
 100f660:	003ff206 	br	100f62c <_Balloc+0x6c>
 100f664:	10109180 	call	1010918 <_calloc_r>
 100f668:	103ff026 	beq	r2,zero,100f62c <_Balloc+0x6c>
 100f66c:	1021883a 	mov	r16,r2
 100f670:	14800115 	stw	r18,4(r2)
 100f674:	14400215 	stw	r17,8(r2)
 100f678:	003fea06 	br	100f624 <_Balloc+0x64>

0100f67c <__d2b>:
 100f67c:	defff504 	addi	sp,sp,-44
 100f680:	dcc00515 	stw	r19,20(sp)
 100f684:	04c00044 	movi	r19,1
 100f688:	dc000215 	stw	r16,8(sp)
 100f68c:	2821883a 	mov	r16,r5
 100f690:	980b883a 	mov	r5,r19
 100f694:	ddc00915 	stw	r23,36(sp)
 100f698:	dd800815 	stw	r22,32(sp)
 100f69c:	dd400715 	stw	r21,28(sp)
 100f6a0:	dd000615 	stw	r20,24(sp)
 100f6a4:	dc800415 	stw	r18,16(sp)
 100f6a8:	dc400315 	stw	r17,12(sp)
 100f6ac:	dfc00a15 	stw	ra,40(sp)
 100f6b0:	3023883a 	mov	r17,r6
 100f6b4:	382d883a 	mov	r22,r7
 100f6b8:	ddc00b17 	ldw	r23,44(sp)
 100f6bc:	100f5c00 	call	100f5c0 <_Balloc>
 100f6c0:	1025883a 	mov	r18,r2
 100f6c4:	00a00034 	movhi	r2,32768
 100f6c8:	10bfffc4 	addi	r2,r2,-1
 100f6cc:	8888703a 	and	r4,r17,r2
 100f6d0:	202ad53a 	srli	r21,r4,20
 100f6d4:	00800434 	movhi	r2,16
 100f6d8:	10bfffc4 	addi	r2,r2,-1
 100f6dc:	8886703a 	and	r3,r17,r2
 100f6e0:	a829003a 	cmpeq	r20,r21,zero
 100f6e4:	800b883a 	mov	r5,r16
 100f6e8:	d8c00115 	stw	r3,4(sp)
 100f6ec:	94000504 	addi	r16,r18,20
 100f6f0:	a000021e 	bne	r20,zero,100f6fc <__d2b+0x80>
 100f6f4:	18c00434 	orhi	r3,r3,16
 100f6f8:	d8c00115 	stw	r3,4(sp)
 100f6fc:	28002726 	beq	r5,zero,100f79c <__d2b+0x120>
 100f700:	d809883a 	mov	r4,sp
 100f704:	d9400015 	stw	r5,0(sp)
 100f708:	100f0d80 	call	100f0d8 <__lo0bits>
 100f70c:	100d883a 	mov	r6,r2
 100f710:	10003526 	beq	r2,zero,100f7e8 <__d2b+0x16c>
 100f714:	d8c00117 	ldw	r3,4(sp)
 100f718:	00800804 	movi	r2,32
 100f71c:	1185c83a 	sub	r2,r2,r6
 100f720:	d9000017 	ldw	r4,0(sp)
 100f724:	1886983a 	sll	r3,r3,r2
 100f728:	1906b03a 	or	r3,r3,r4
 100f72c:	90c00515 	stw	r3,20(r18)
 100f730:	d8c00117 	ldw	r3,4(sp)
 100f734:	1986d83a 	srl	r3,r3,r6
 100f738:	d8c00115 	stw	r3,4(sp)
 100f73c:	180b003a 	cmpeq	r5,r3,zero
 100f740:	00800084 	movi	r2,2
 100f744:	114bc83a 	sub	r5,r2,r5
 100f748:	80c00115 	stw	r3,4(r16)
 100f74c:	91400415 	stw	r5,16(r18)
 100f750:	a0001a1e 	bne	r20,zero,100f7bc <__d2b+0x140>
 100f754:	3545883a 	add	r2,r6,r21
 100f758:	10bef344 	addi	r2,r2,-1075
 100f75c:	00c00d44 	movi	r3,53
 100f760:	b0800015 	stw	r2,0(r22)
 100f764:	1987c83a 	sub	r3,r3,r6
 100f768:	b8c00015 	stw	r3,0(r23)
 100f76c:	9005883a 	mov	r2,r18
 100f770:	dfc00a17 	ldw	ra,40(sp)
 100f774:	ddc00917 	ldw	r23,36(sp)
 100f778:	dd800817 	ldw	r22,32(sp)
 100f77c:	dd400717 	ldw	r21,28(sp)
 100f780:	dd000617 	ldw	r20,24(sp)
 100f784:	dcc00517 	ldw	r19,20(sp)
 100f788:	dc800417 	ldw	r18,16(sp)
 100f78c:	dc400317 	ldw	r17,12(sp)
 100f790:	dc000217 	ldw	r16,8(sp)
 100f794:	dec00b04 	addi	sp,sp,44
 100f798:	f800283a 	ret
 100f79c:	d9000104 	addi	r4,sp,4
 100f7a0:	100f0d80 	call	100f0d8 <__lo0bits>
 100f7a4:	11800804 	addi	r6,r2,32
 100f7a8:	d8800117 	ldw	r2,4(sp)
 100f7ac:	94c00415 	stw	r19,16(r18)
 100f7b0:	980b883a 	mov	r5,r19
 100f7b4:	90800515 	stw	r2,20(r18)
 100f7b8:	a03fe626 	beq	r20,zero,100f754 <__d2b+0xd8>
 100f7bc:	2945883a 	add	r2,r5,r5
 100f7c0:	1085883a 	add	r2,r2,r2
 100f7c4:	1405883a 	add	r2,r2,r16
 100f7c8:	113fff17 	ldw	r4,-4(r2)
 100f7cc:	30fef384 	addi	r3,r6,-1074
 100f7d0:	2820917a 	slli	r16,r5,5
 100f7d4:	b0c00015 	stw	r3,0(r22)
 100f7d8:	100f0680 	call	100f068 <__hi0bits>
 100f7dc:	80a1c83a 	sub	r16,r16,r2
 100f7e0:	bc000015 	stw	r16,0(r23)
 100f7e4:	003fe106 	br	100f76c <__d2b+0xf0>
 100f7e8:	d8800017 	ldw	r2,0(sp)
 100f7ec:	90800515 	stw	r2,20(r18)
 100f7f0:	d8c00117 	ldw	r3,4(sp)
 100f7f4:	003fd106 	br	100f73c <__d2b+0xc0>

0100f7f8 <__mdiff>:
 100f7f8:	defffb04 	addi	sp,sp,-20
 100f7fc:	dc000015 	stw	r16,0(sp)
 100f800:	2821883a 	mov	r16,r5
 100f804:	dc800215 	stw	r18,8(sp)
 100f808:	300b883a 	mov	r5,r6
 100f80c:	2025883a 	mov	r18,r4
 100f810:	8009883a 	mov	r4,r16
 100f814:	dc400115 	stw	r17,4(sp)
 100f818:	dfc00415 	stw	ra,16(sp)
 100f81c:	dcc00315 	stw	r19,12(sp)
 100f820:	3023883a 	mov	r17,r6
 100f824:	100f19c0 	call	100f19c <__mcmp>
 100f828:	10004226 	beq	r2,zero,100f934 <__mdiff+0x13c>
 100f82c:	10005016 	blt	r2,zero,100f970 <__mdiff+0x178>
 100f830:	0027883a 	mov	r19,zero
 100f834:	81400117 	ldw	r5,4(r16)
 100f838:	9009883a 	mov	r4,r18
 100f83c:	100f5c00 	call	100f5c0 <_Balloc>
 100f840:	1019883a 	mov	r12,r2
 100f844:	82800417 	ldw	r10,16(r16)
 100f848:	88800417 	ldw	r2,16(r17)
 100f84c:	81800504 	addi	r6,r16,20
 100f850:	5287883a 	add	r3,r10,r10
 100f854:	1085883a 	add	r2,r2,r2
 100f858:	18c7883a 	add	r3,r3,r3
 100f85c:	1085883a 	add	r2,r2,r2
 100f860:	8a000504 	addi	r8,r17,20
 100f864:	64c00315 	stw	r19,12(r12)
 100f868:	30db883a 	add	r13,r6,r3
 100f86c:	4097883a 	add	r11,r8,r2
 100f870:	61c00504 	addi	r7,r12,20
 100f874:	0013883a 	mov	r9,zero
 100f878:	31000017 	ldw	r4,0(r6)
 100f87c:	41400017 	ldw	r5,0(r8)
 100f880:	42000104 	addi	r8,r8,4
 100f884:	20bfffcc 	andi	r2,r4,65535
 100f888:	28ffffcc 	andi	r3,r5,65535
 100f88c:	10c5c83a 	sub	r2,r2,r3
 100f890:	1245883a 	add	r2,r2,r9
 100f894:	2008d43a 	srli	r4,r4,16
 100f898:	280ad43a 	srli	r5,r5,16
 100f89c:	1007d43a 	srai	r3,r2,16
 100f8a0:	3880000d 	sth	r2,0(r7)
 100f8a4:	2149c83a 	sub	r4,r4,r5
 100f8a8:	20c9883a 	add	r4,r4,r3
 100f8ac:	3900008d 	sth	r4,2(r7)
 100f8b0:	31800104 	addi	r6,r6,4
 100f8b4:	39c00104 	addi	r7,r7,4
 100f8b8:	2013d43a 	srai	r9,r4,16
 100f8bc:	42ffee36 	bltu	r8,r11,100f878 <__mdiff+0x80>
 100f8c0:	33400c2e 	bgeu	r6,r13,100f8f4 <__mdiff+0xfc>
 100f8c4:	30800017 	ldw	r2,0(r6)
 100f8c8:	31800104 	addi	r6,r6,4
 100f8cc:	10ffffcc 	andi	r3,r2,65535
 100f8d0:	1a47883a 	add	r3,r3,r9
 100f8d4:	1004d43a 	srli	r2,r2,16
 100f8d8:	1809d43a 	srai	r4,r3,16
 100f8dc:	38c0000d 	sth	r3,0(r7)
 100f8e0:	1105883a 	add	r2,r2,r4
 100f8e4:	3880008d 	sth	r2,2(r7)
 100f8e8:	1013d43a 	srai	r9,r2,16
 100f8ec:	39c00104 	addi	r7,r7,4
 100f8f0:	337ff436 	bltu	r6,r13,100f8c4 <__mdiff+0xcc>
 100f8f4:	38bfff17 	ldw	r2,-4(r7)
 100f8f8:	38ffff04 	addi	r3,r7,-4
 100f8fc:	1000041e 	bne	r2,zero,100f910 <__mdiff+0x118>
 100f900:	18ffff04 	addi	r3,r3,-4
 100f904:	18800017 	ldw	r2,0(r3)
 100f908:	52bfffc4 	addi	r10,r10,-1
 100f90c:	103ffc26 	beq	r2,zero,100f900 <__mdiff+0x108>
 100f910:	6005883a 	mov	r2,r12
 100f914:	62800415 	stw	r10,16(r12)
 100f918:	dfc00417 	ldw	ra,16(sp)
 100f91c:	dcc00317 	ldw	r19,12(sp)
 100f920:	dc800217 	ldw	r18,8(sp)
 100f924:	dc400117 	ldw	r17,4(sp)
 100f928:	dc000017 	ldw	r16,0(sp)
 100f92c:	dec00504 	addi	sp,sp,20
 100f930:	f800283a 	ret
 100f934:	9009883a 	mov	r4,r18
 100f938:	000b883a 	mov	r5,zero
 100f93c:	100f5c00 	call	100f5c0 <_Balloc>
 100f940:	1019883a 	mov	r12,r2
 100f944:	00800044 	movi	r2,1
 100f948:	60800415 	stw	r2,16(r12)
 100f94c:	6005883a 	mov	r2,r12
 100f950:	60000515 	stw	zero,20(r12)
 100f954:	dfc00417 	ldw	ra,16(sp)
 100f958:	dcc00317 	ldw	r19,12(sp)
 100f95c:	dc800217 	ldw	r18,8(sp)
 100f960:	dc400117 	ldw	r17,4(sp)
 100f964:	dc000017 	ldw	r16,0(sp)
 100f968:	dec00504 	addi	sp,sp,20
 100f96c:	f800283a 	ret
 100f970:	880d883a 	mov	r6,r17
 100f974:	04c00044 	movi	r19,1
 100f978:	8023883a 	mov	r17,r16
 100f97c:	3021883a 	mov	r16,r6
 100f980:	003fac06 	br	100f834 <__mdiff+0x3c>

0100f984 <__lshift>:
 100f984:	defff904 	addi	sp,sp,-28
 100f988:	28800417 	ldw	r2,16(r5)
 100f98c:	dc000015 	stw	r16,0(sp)
 100f990:	3021d17a 	srai	r16,r6,5
 100f994:	28c00217 	ldw	r3,8(r5)
 100f998:	10800044 	addi	r2,r2,1
 100f99c:	dc400115 	stw	r17,4(sp)
 100f9a0:	80a3883a 	add	r17,r16,r2
 100f9a4:	dd400515 	stw	r21,20(sp)
 100f9a8:	dd000415 	stw	r20,16(sp)
 100f9ac:	dc800215 	stw	r18,8(sp)
 100f9b0:	dfc00615 	stw	ra,24(sp)
 100f9b4:	2825883a 	mov	r18,r5
 100f9b8:	dcc00315 	stw	r19,12(sp)
 100f9bc:	3029883a 	mov	r20,r6
 100f9c0:	202b883a 	mov	r21,r4
 100f9c4:	29400117 	ldw	r5,4(r5)
 100f9c8:	1c40030e 	bge	r3,r17,100f9d8 <__lshift+0x54>
 100f9cc:	18c7883a 	add	r3,r3,r3
 100f9d0:	29400044 	addi	r5,r5,1
 100f9d4:	1c7ffd16 	blt	r3,r17,100f9cc <__lshift+0x48>
 100f9d8:	a809883a 	mov	r4,r21
 100f9dc:	100f5c00 	call	100f5c0 <_Balloc>
 100f9e0:	1027883a 	mov	r19,r2
 100f9e4:	11400504 	addi	r5,r2,20
 100f9e8:	0400090e 	bge	zero,r16,100fa10 <__lshift+0x8c>
 100f9ec:	2805883a 	mov	r2,r5
 100f9f0:	0007883a 	mov	r3,zero
 100f9f4:	18c00044 	addi	r3,r3,1
 100f9f8:	10000015 	stw	zero,0(r2)
 100f9fc:	10800104 	addi	r2,r2,4
 100fa00:	80fffc1e 	bne	r16,r3,100f9f4 <__lshift+0x70>
 100fa04:	8405883a 	add	r2,r16,r16
 100fa08:	1085883a 	add	r2,r2,r2
 100fa0c:	288b883a 	add	r5,r5,r2
 100fa10:	90800417 	ldw	r2,16(r18)
 100fa14:	91000504 	addi	r4,r18,20
 100fa18:	a18007cc 	andi	r6,r20,31
 100fa1c:	1085883a 	add	r2,r2,r2
 100fa20:	1085883a 	add	r2,r2,r2
 100fa24:	208f883a 	add	r7,r4,r2
 100fa28:	30001e26 	beq	r6,zero,100faa4 <__lshift+0x120>
 100fa2c:	00800804 	movi	r2,32
 100fa30:	1191c83a 	sub	r8,r2,r6
 100fa34:	0007883a 	mov	r3,zero
 100fa38:	20800017 	ldw	r2,0(r4)
 100fa3c:	1184983a 	sll	r2,r2,r6
 100fa40:	1884b03a 	or	r2,r3,r2
 100fa44:	28800015 	stw	r2,0(r5)
 100fa48:	20c00017 	ldw	r3,0(r4)
 100fa4c:	21000104 	addi	r4,r4,4
 100fa50:	29400104 	addi	r5,r5,4
 100fa54:	1a06d83a 	srl	r3,r3,r8
 100fa58:	21fff736 	bltu	r4,r7,100fa38 <__lshift+0xb4>
 100fa5c:	28c00015 	stw	r3,0(r5)
 100fa60:	18000126 	beq	r3,zero,100fa68 <__lshift+0xe4>
 100fa64:	8c400044 	addi	r17,r17,1
 100fa68:	88bfffc4 	addi	r2,r17,-1
 100fa6c:	98800415 	stw	r2,16(r19)
 100fa70:	a809883a 	mov	r4,r21
 100fa74:	900b883a 	mov	r5,r18
 100fa78:	100f0400 	call	100f040 <_Bfree>
 100fa7c:	9805883a 	mov	r2,r19
 100fa80:	dfc00617 	ldw	ra,24(sp)
 100fa84:	dd400517 	ldw	r21,20(sp)
 100fa88:	dd000417 	ldw	r20,16(sp)
 100fa8c:	dcc00317 	ldw	r19,12(sp)
 100fa90:	dc800217 	ldw	r18,8(sp)
 100fa94:	dc400117 	ldw	r17,4(sp)
 100fa98:	dc000017 	ldw	r16,0(sp)
 100fa9c:	dec00704 	addi	sp,sp,28
 100faa0:	f800283a 	ret
 100faa4:	20800017 	ldw	r2,0(r4)
 100faa8:	21000104 	addi	r4,r4,4
 100faac:	28800015 	stw	r2,0(r5)
 100fab0:	29400104 	addi	r5,r5,4
 100fab4:	21ffec2e 	bgeu	r4,r7,100fa68 <__lshift+0xe4>
 100fab8:	20800017 	ldw	r2,0(r4)
 100fabc:	21000104 	addi	r4,r4,4
 100fac0:	28800015 	stw	r2,0(r5)
 100fac4:	29400104 	addi	r5,r5,4
 100fac8:	21fff636 	bltu	r4,r7,100faa4 <__lshift+0x120>
 100facc:	003fe606 	br	100fa68 <__lshift+0xe4>

0100fad0 <__multiply>:
 100fad0:	defff904 	addi	sp,sp,-28
 100fad4:	dcc00315 	stw	r19,12(sp)
 100fad8:	dc800215 	stw	r18,8(sp)
 100fadc:	2cc00417 	ldw	r19,16(r5)
 100fae0:	34800417 	ldw	r18,16(r6)
 100fae4:	dd000415 	stw	r20,16(sp)
 100fae8:	dc400115 	stw	r17,4(sp)
 100faec:	dfc00615 	stw	ra,24(sp)
 100faf0:	dd400515 	stw	r21,20(sp)
 100faf4:	dc000015 	stw	r16,0(sp)
 100faf8:	2823883a 	mov	r17,r5
 100fafc:	3029883a 	mov	r20,r6
 100fb00:	9c80040e 	bge	r19,r18,100fb14 <__multiply+0x44>
 100fb04:	9027883a 	mov	r19,r18
 100fb08:	2c800417 	ldw	r18,16(r5)
 100fb0c:	2829883a 	mov	r20,r5
 100fb10:	3023883a 	mov	r17,r6
 100fb14:	88800217 	ldw	r2,8(r17)
 100fb18:	9ca1883a 	add	r16,r19,r18
 100fb1c:	89400117 	ldw	r5,4(r17)
 100fb20:	1400010e 	bge	r2,r16,100fb28 <__multiply+0x58>
 100fb24:	29400044 	addi	r5,r5,1
 100fb28:	100f5c00 	call	100f5c0 <_Balloc>
 100fb2c:	102b883a 	mov	r21,r2
 100fb30:	8405883a 	add	r2,r16,r16
 100fb34:	1085883a 	add	r2,r2,r2
 100fb38:	a9000504 	addi	r4,r21,20
 100fb3c:	209d883a 	add	r14,r4,r2
 100fb40:	2380042e 	bgeu	r4,r14,100fb54 <__multiply+0x84>
 100fb44:	2005883a 	mov	r2,r4
 100fb48:	10000015 	stw	zero,0(r2)
 100fb4c:	10800104 	addi	r2,r2,4
 100fb50:	13bffd36 	bltu	r2,r14,100fb48 <__multiply+0x78>
 100fb54:	9485883a 	add	r2,r18,r18
 100fb58:	9cc7883a 	add	r3,r19,r19
 100fb5c:	a1800504 	addi	r6,r20,20
 100fb60:	1085883a 	add	r2,r2,r2
 100fb64:	8b400504 	addi	r13,r17,20
 100fb68:	18c7883a 	add	r3,r3,r3
 100fb6c:	309f883a 	add	r15,r6,r2
 100fb70:	68d7883a 	add	r11,r13,r3
 100fb74:	33c03b2e 	bgeu	r6,r15,100fc64 <__multiply+0x194>
 100fb78:	2019883a 	mov	r12,r4
 100fb7c:	30800017 	ldw	r2,0(r6)
 100fb80:	127fffcc 	andi	r9,r2,65535
 100fb84:	48001826 	beq	r9,zero,100fbe8 <__multiply+0x118>
 100fb88:	6811883a 	mov	r8,r13
 100fb8c:	600f883a 	mov	r7,r12
 100fb90:	0015883a 	mov	r10,zero
 100fb94:	40c00017 	ldw	r3,0(r8)
 100fb98:	39400017 	ldw	r5,0(r7)
 100fb9c:	42000104 	addi	r8,r8,4
 100fba0:	193fffcc 	andi	r4,r3,65535
 100fba4:	4909383a 	mul	r4,r9,r4
 100fba8:	1806d43a 	srli	r3,r3,16
 100fbac:	28bfffcc 	andi	r2,r5,65535
 100fbb0:	5085883a 	add	r2,r10,r2
 100fbb4:	2089883a 	add	r4,r4,r2
 100fbb8:	48c7383a 	mul	r3,r9,r3
 100fbbc:	280ad43a 	srli	r5,r5,16
 100fbc0:	2004d43a 	srli	r2,r4,16
 100fbc4:	3900000d 	sth	r4,0(r7)
 100fbc8:	1947883a 	add	r3,r3,r5
 100fbcc:	10c5883a 	add	r2,r2,r3
 100fbd0:	3880008d 	sth	r2,2(r7)
 100fbd4:	1014d43a 	srli	r10,r2,16
 100fbd8:	39c00104 	addi	r7,r7,4
 100fbdc:	42ffed36 	bltu	r8,r11,100fb94 <__multiply+0xc4>
 100fbe0:	3a800015 	stw	r10,0(r7)
 100fbe4:	30800017 	ldw	r2,0(r6)
 100fbe8:	1012d43a 	srli	r9,r2,16
 100fbec:	48001926 	beq	r9,zero,100fc54 <__multiply+0x184>
 100fbf0:	60800017 	ldw	r2,0(r12)
 100fbf4:	6811883a 	mov	r8,r13
 100fbf8:	600f883a 	mov	r7,r12
 100fbfc:	0015883a 	mov	r10,zero
 100fc00:	100b883a 	mov	r5,r2
 100fc04:	41000017 	ldw	r4,0(r8)
 100fc08:	2806d43a 	srli	r3,r5,16
 100fc0c:	3880000d 	sth	r2,0(r7)
 100fc10:	20bfffcc 	andi	r2,r4,65535
 100fc14:	4885383a 	mul	r2,r9,r2
 100fc18:	50c7883a 	add	r3,r10,r3
 100fc1c:	2008d43a 	srli	r4,r4,16
 100fc20:	10c5883a 	add	r2,r2,r3
 100fc24:	3880008d 	sth	r2,2(r7)
 100fc28:	39c00104 	addi	r7,r7,4
 100fc2c:	39400017 	ldw	r5,0(r7)
 100fc30:	4909383a 	mul	r4,r9,r4
 100fc34:	1004d43a 	srli	r2,r2,16
 100fc38:	28ffffcc 	andi	r3,r5,65535
 100fc3c:	20c9883a 	add	r4,r4,r3
 100fc40:	1105883a 	add	r2,r2,r4
 100fc44:	42000104 	addi	r8,r8,4
 100fc48:	1014d43a 	srli	r10,r2,16
 100fc4c:	42ffed36 	bltu	r8,r11,100fc04 <__multiply+0x134>
 100fc50:	38800015 	stw	r2,0(r7)
 100fc54:	31800104 	addi	r6,r6,4
 100fc58:	33c0022e 	bgeu	r6,r15,100fc64 <__multiply+0x194>
 100fc5c:	63000104 	addi	r12,r12,4
 100fc60:	003fc606 	br	100fb7c <__multiply+0xac>
 100fc64:	0400090e 	bge	zero,r16,100fc8c <__multiply+0x1bc>
 100fc68:	70bfff17 	ldw	r2,-4(r14)
 100fc6c:	70ffff04 	addi	r3,r14,-4
 100fc70:	10000326 	beq	r2,zero,100fc80 <__multiply+0x1b0>
 100fc74:	00000506 	br	100fc8c <__multiply+0x1bc>
 100fc78:	18800017 	ldw	r2,0(r3)
 100fc7c:	1000031e 	bne	r2,zero,100fc8c <__multiply+0x1bc>
 100fc80:	843fffc4 	addi	r16,r16,-1
 100fc84:	18ffff04 	addi	r3,r3,-4
 100fc88:	803ffb1e 	bne	r16,zero,100fc78 <__multiply+0x1a8>
 100fc8c:	a805883a 	mov	r2,r21
 100fc90:	ac000415 	stw	r16,16(r21)
 100fc94:	dfc00617 	ldw	ra,24(sp)
 100fc98:	dd400517 	ldw	r21,20(sp)
 100fc9c:	dd000417 	ldw	r20,16(sp)
 100fca0:	dcc00317 	ldw	r19,12(sp)
 100fca4:	dc800217 	ldw	r18,8(sp)
 100fca8:	dc400117 	ldw	r17,4(sp)
 100fcac:	dc000017 	ldw	r16,0(sp)
 100fcb0:	dec00704 	addi	sp,sp,28
 100fcb4:	f800283a 	ret

0100fcb8 <__i2b>:
 100fcb8:	defffd04 	addi	sp,sp,-12
 100fcbc:	dc000015 	stw	r16,0(sp)
 100fcc0:	04000044 	movi	r16,1
 100fcc4:	dc800115 	stw	r18,4(sp)
 100fcc8:	2825883a 	mov	r18,r5
 100fccc:	800b883a 	mov	r5,r16
 100fcd0:	dfc00215 	stw	ra,8(sp)
 100fcd4:	100f5c00 	call	100f5c0 <_Balloc>
 100fcd8:	14000415 	stw	r16,16(r2)
 100fcdc:	14800515 	stw	r18,20(r2)
 100fce0:	dfc00217 	ldw	ra,8(sp)
 100fce4:	dc800117 	ldw	r18,4(sp)
 100fce8:	dc000017 	ldw	r16,0(sp)
 100fcec:	dec00304 	addi	sp,sp,12
 100fcf0:	f800283a 	ret

0100fcf4 <__multadd>:
 100fcf4:	defffa04 	addi	sp,sp,-24
 100fcf8:	dc800215 	stw	r18,8(sp)
 100fcfc:	2c800417 	ldw	r18,16(r5)
 100fd00:	dd000415 	stw	r20,16(sp)
 100fd04:	dcc00315 	stw	r19,12(sp)
 100fd08:	dc000015 	stw	r16,0(sp)
 100fd0c:	dfc00515 	stw	ra,20(sp)
 100fd10:	3821883a 	mov	r16,r7
 100fd14:	dc400115 	stw	r17,4(sp)
 100fd18:	2827883a 	mov	r19,r5
 100fd1c:	2029883a 	mov	r20,r4
 100fd20:	2a000504 	addi	r8,r5,20
 100fd24:	000f883a 	mov	r7,zero
 100fd28:	40800017 	ldw	r2,0(r8)
 100fd2c:	39c00044 	addi	r7,r7,1
 100fd30:	10ffffcc 	andi	r3,r2,65535
 100fd34:	1987383a 	mul	r3,r3,r6
 100fd38:	1004d43a 	srli	r2,r2,16
 100fd3c:	1c07883a 	add	r3,r3,r16
 100fd40:	180ad43a 	srli	r5,r3,16
 100fd44:	1185383a 	mul	r2,r2,r6
 100fd48:	18ffffcc 	andi	r3,r3,65535
 100fd4c:	1145883a 	add	r2,r2,r5
 100fd50:	1008943a 	slli	r4,r2,16
 100fd54:	1020d43a 	srli	r16,r2,16
 100fd58:	20c9883a 	add	r4,r4,r3
 100fd5c:	41000015 	stw	r4,0(r8)
 100fd60:	42000104 	addi	r8,r8,4
 100fd64:	3cbff016 	blt	r7,r18,100fd28 <__multadd+0x34>
 100fd68:	80000826 	beq	r16,zero,100fd8c <__multadd+0x98>
 100fd6c:	98800217 	ldw	r2,8(r19)
 100fd70:	90800f0e 	bge	r18,r2,100fdb0 <__multadd+0xbc>
 100fd74:	9485883a 	add	r2,r18,r18
 100fd78:	1085883a 	add	r2,r2,r2
 100fd7c:	14c5883a 	add	r2,r2,r19
 100fd80:	90c00044 	addi	r3,r18,1
 100fd84:	14000515 	stw	r16,20(r2)
 100fd88:	98c00415 	stw	r3,16(r19)
 100fd8c:	9805883a 	mov	r2,r19
 100fd90:	dfc00517 	ldw	ra,20(sp)
 100fd94:	dd000417 	ldw	r20,16(sp)
 100fd98:	dcc00317 	ldw	r19,12(sp)
 100fd9c:	dc800217 	ldw	r18,8(sp)
 100fda0:	dc400117 	ldw	r17,4(sp)
 100fda4:	dc000017 	ldw	r16,0(sp)
 100fda8:	dec00604 	addi	sp,sp,24
 100fdac:	f800283a 	ret
 100fdb0:	99400117 	ldw	r5,4(r19)
 100fdb4:	a009883a 	mov	r4,r20
 100fdb8:	29400044 	addi	r5,r5,1
 100fdbc:	100f5c00 	call	100f5c0 <_Balloc>
 100fdc0:	99800417 	ldw	r6,16(r19)
 100fdc4:	99400304 	addi	r5,r19,12
 100fdc8:	11000304 	addi	r4,r2,12
 100fdcc:	318d883a 	add	r6,r6,r6
 100fdd0:	318d883a 	add	r6,r6,r6
 100fdd4:	31800204 	addi	r6,r6,8
 100fdd8:	1023883a 	mov	r17,r2
 100fddc:	1009fa80 	call	1009fa8 <memcpy>
 100fde0:	980b883a 	mov	r5,r19
 100fde4:	a009883a 	mov	r4,r20
 100fde8:	100f0400 	call	100f040 <_Bfree>
 100fdec:	8827883a 	mov	r19,r17
 100fdf0:	003fe006 	br	100fd74 <__multadd+0x80>

0100fdf4 <__pow5mult>:
 100fdf4:	defffa04 	addi	sp,sp,-24
 100fdf8:	308000cc 	andi	r2,r6,3
 100fdfc:	dd000415 	stw	r20,16(sp)
 100fe00:	dcc00315 	stw	r19,12(sp)
 100fe04:	dc000015 	stw	r16,0(sp)
 100fe08:	dfc00515 	stw	ra,20(sp)
 100fe0c:	dc800215 	stw	r18,8(sp)
 100fe10:	dc400115 	stw	r17,4(sp)
 100fe14:	3021883a 	mov	r16,r6
 100fe18:	2027883a 	mov	r19,r4
 100fe1c:	2829883a 	mov	r20,r5
 100fe20:	10002b1e 	bne	r2,zero,100fed0 <__pow5mult+0xdc>
 100fe24:	8025d0ba 	srai	r18,r16,2
 100fe28:	90001b26 	beq	r18,zero,100fe98 <__pow5mult+0xa4>
 100fe2c:	9c001217 	ldw	r16,72(r19)
 100fe30:	8000081e 	bne	r16,zero,100fe54 <__pow5mult+0x60>
 100fe34:	00003006 	br	100fef8 <__pow5mult+0x104>
 100fe38:	800b883a 	mov	r5,r16
 100fe3c:	800d883a 	mov	r6,r16
 100fe40:	9809883a 	mov	r4,r19
 100fe44:	90001426 	beq	r18,zero,100fe98 <__pow5mult+0xa4>
 100fe48:	80800017 	ldw	r2,0(r16)
 100fe4c:	10001b26 	beq	r2,zero,100febc <__pow5mult+0xc8>
 100fe50:	1021883a 	mov	r16,r2
 100fe54:	9080004c 	andi	r2,r18,1
 100fe58:	1005003a 	cmpeq	r2,r2,zero
 100fe5c:	9025d07a 	srai	r18,r18,1
 100fe60:	800d883a 	mov	r6,r16
 100fe64:	9809883a 	mov	r4,r19
 100fe68:	a00b883a 	mov	r5,r20
 100fe6c:	103ff21e 	bne	r2,zero,100fe38 <__pow5mult+0x44>
 100fe70:	100fad00 	call	100fad0 <__multiply>
 100fe74:	a00b883a 	mov	r5,r20
 100fe78:	9809883a 	mov	r4,r19
 100fe7c:	1023883a 	mov	r17,r2
 100fe80:	100f0400 	call	100f040 <_Bfree>
 100fe84:	8829883a 	mov	r20,r17
 100fe88:	800b883a 	mov	r5,r16
 100fe8c:	800d883a 	mov	r6,r16
 100fe90:	9809883a 	mov	r4,r19
 100fe94:	903fec1e 	bne	r18,zero,100fe48 <__pow5mult+0x54>
 100fe98:	a005883a 	mov	r2,r20
 100fe9c:	dfc00517 	ldw	ra,20(sp)
 100fea0:	dd000417 	ldw	r20,16(sp)
 100fea4:	dcc00317 	ldw	r19,12(sp)
 100fea8:	dc800217 	ldw	r18,8(sp)
 100feac:	dc400117 	ldw	r17,4(sp)
 100feb0:	dc000017 	ldw	r16,0(sp)
 100feb4:	dec00604 	addi	sp,sp,24
 100feb8:	f800283a 	ret
 100febc:	100fad00 	call	100fad0 <__multiply>
 100fec0:	80800015 	stw	r2,0(r16)
 100fec4:	1021883a 	mov	r16,r2
 100fec8:	10000015 	stw	zero,0(r2)
 100fecc:	003fe106 	br	100fe54 <__pow5mult+0x60>
 100fed0:	1085883a 	add	r2,r2,r2
 100fed4:	00c040b4 	movhi	r3,258
 100fed8:	18fd6304 	addi	r3,r3,-2676
 100fedc:	1085883a 	add	r2,r2,r2
 100fee0:	10c5883a 	add	r2,r2,r3
 100fee4:	11bfff17 	ldw	r6,-4(r2)
 100fee8:	000f883a 	mov	r7,zero
 100feec:	100fcf40 	call	100fcf4 <__multadd>
 100fef0:	1029883a 	mov	r20,r2
 100fef4:	003fcb06 	br	100fe24 <__pow5mult+0x30>
 100fef8:	9809883a 	mov	r4,r19
 100fefc:	01409c44 	movi	r5,625
 100ff00:	100fcb80 	call	100fcb8 <__i2b>
 100ff04:	98801215 	stw	r2,72(r19)
 100ff08:	1021883a 	mov	r16,r2
 100ff0c:	10000015 	stw	zero,0(r2)
 100ff10:	003fd006 	br	100fe54 <__pow5mult+0x60>

0100ff14 <__s2b>:
 100ff14:	defff904 	addi	sp,sp,-28
 100ff18:	dcc00315 	stw	r19,12(sp)
 100ff1c:	dc800215 	stw	r18,8(sp)
 100ff20:	2827883a 	mov	r19,r5
 100ff24:	2025883a 	mov	r18,r4
 100ff28:	01400244 	movi	r5,9
 100ff2c:	39000204 	addi	r4,r7,8
 100ff30:	dd000415 	stw	r20,16(sp)
 100ff34:	dc400115 	stw	r17,4(sp)
 100ff38:	dfc00615 	stw	ra,24(sp)
 100ff3c:	dd400515 	stw	r21,20(sp)
 100ff40:	dc000015 	stw	r16,0(sp)
 100ff44:	3829883a 	mov	r20,r7
 100ff48:	3023883a 	mov	r17,r6
 100ff4c:	1012a680 	call	1012a68 <__divsi3>
 100ff50:	00c00044 	movi	r3,1
 100ff54:	1880350e 	bge	r3,r2,101002c <__s2b+0x118>
 100ff58:	000b883a 	mov	r5,zero
 100ff5c:	18c7883a 	add	r3,r3,r3
 100ff60:	29400044 	addi	r5,r5,1
 100ff64:	18bffd16 	blt	r3,r2,100ff5c <__s2b+0x48>
 100ff68:	9009883a 	mov	r4,r18
 100ff6c:	100f5c00 	call	100f5c0 <_Balloc>
 100ff70:	1011883a 	mov	r8,r2
 100ff74:	d8800717 	ldw	r2,28(sp)
 100ff78:	00c00044 	movi	r3,1
 100ff7c:	01800244 	movi	r6,9
 100ff80:	40800515 	stw	r2,20(r8)
 100ff84:	40c00415 	stw	r3,16(r8)
 100ff88:	3440260e 	bge	r6,r17,1010024 <__s2b+0x110>
 100ff8c:	3021883a 	mov	r16,r6
 100ff90:	99ab883a 	add	r21,r19,r6
 100ff94:	9c05883a 	add	r2,r19,r16
 100ff98:	11c00007 	ldb	r7,0(r2)
 100ff9c:	400b883a 	mov	r5,r8
 100ffa0:	9009883a 	mov	r4,r18
 100ffa4:	39fff404 	addi	r7,r7,-48
 100ffa8:	01800284 	movi	r6,10
 100ffac:	100fcf40 	call	100fcf4 <__multadd>
 100ffb0:	84000044 	addi	r16,r16,1
 100ffb4:	1011883a 	mov	r8,r2
 100ffb8:	8c3ff61e 	bne	r17,r16,100ff94 <__s2b+0x80>
 100ffbc:	ac45883a 	add	r2,r21,r17
 100ffc0:	117ffe04 	addi	r5,r2,-8
 100ffc4:	880d883a 	mov	r6,r17
 100ffc8:	35000c0e 	bge	r6,r20,100fffc <__s2b+0xe8>
 100ffcc:	a185c83a 	sub	r2,r20,r6
 100ffd0:	2821883a 	mov	r16,r5
 100ffd4:	28a3883a 	add	r17,r5,r2
 100ffd8:	81c00007 	ldb	r7,0(r16)
 100ffdc:	400b883a 	mov	r5,r8
 100ffe0:	9009883a 	mov	r4,r18
 100ffe4:	39fff404 	addi	r7,r7,-48
 100ffe8:	01800284 	movi	r6,10
 100ffec:	100fcf40 	call	100fcf4 <__multadd>
 100fff0:	84000044 	addi	r16,r16,1
 100fff4:	1011883a 	mov	r8,r2
 100fff8:	847ff71e 	bne	r16,r17,100ffd8 <__s2b+0xc4>
 100fffc:	4005883a 	mov	r2,r8
 1010000:	dfc00617 	ldw	ra,24(sp)
 1010004:	dd400517 	ldw	r21,20(sp)
 1010008:	dd000417 	ldw	r20,16(sp)
 101000c:	dcc00317 	ldw	r19,12(sp)
 1010010:	dc800217 	ldw	r18,8(sp)
 1010014:	dc400117 	ldw	r17,4(sp)
 1010018:	dc000017 	ldw	r16,0(sp)
 101001c:	dec00704 	addi	sp,sp,28
 1010020:	f800283a 	ret
 1010024:	99400284 	addi	r5,r19,10
 1010028:	003fe706 	br	100ffc8 <__s2b+0xb4>
 101002c:	000b883a 	mov	r5,zero
 1010030:	003fcd06 	br	100ff68 <__s2b+0x54>

01010034 <_realloc_r>:
 1010034:	defff404 	addi	sp,sp,-48
 1010038:	dd800815 	stw	r22,32(sp)
 101003c:	dc800415 	stw	r18,16(sp)
 1010040:	dc400315 	stw	r17,12(sp)
 1010044:	dfc00b15 	stw	ra,44(sp)
 1010048:	df000a15 	stw	fp,40(sp)
 101004c:	ddc00915 	stw	r23,36(sp)
 1010050:	dd400715 	stw	r21,28(sp)
 1010054:	dd000615 	stw	r20,24(sp)
 1010058:	dcc00515 	stw	r19,20(sp)
 101005c:	dc000215 	stw	r16,8(sp)
 1010060:	2825883a 	mov	r18,r5
 1010064:	3023883a 	mov	r17,r6
 1010068:	202d883a 	mov	r22,r4
 101006c:	2800c926 	beq	r5,zero,1010394 <_realloc_r+0x360>
 1010070:	1013f940 	call	1013f94 <__malloc_lock>
 1010074:	943ffe04 	addi	r16,r18,-8
 1010078:	88c002c4 	addi	r3,r17,11
 101007c:	00800584 	movi	r2,22
 1010080:	82000117 	ldw	r8,4(r16)
 1010084:	10c01b2e 	bgeu	r2,r3,10100f4 <_realloc_r+0xc0>
 1010088:	00bffe04 	movi	r2,-8
 101008c:	188e703a 	and	r7,r3,r2
 1010090:	3839883a 	mov	fp,r7
 1010094:	38001a16 	blt	r7,zero,1010100 <_realloc_r+0xcc>
 1010098:	e4401936 	bltu	fp,r17,1010100 <_realloc_r+0xcc>
 101009c:	013fff04 	movi	r4,-4
 10100a0:	4126703a 	and	r19,r8,r4
 10100a4:	99c02616 	blt	r19,r7,1010140 <_realloc_r+0x10c>
 10100a8:	802b883a 	mov	r21,r16
 10100ac:	9829883a 	mov	r20,r19
 10100b0:	84000204 	addi	r16,r16,8
 10100b4:	a80f883a 	mov	r7,r21
 10100b8:	a70dc83a 	sub	r6,r20,fp
 10100bc:	008003c4 	movi	r2,15
 10100c0:	1180c136 	bltu	r2,r6,10103c8 <_realloc_r+0x394>
 10100c4:	38800117 	ldw	r2,4(r7)
 10100c8:	a549883a 	add	r4,r20,r21
 10100cc:	1080004c 	andi	r2,r2,1
 10100d0:	a084b03a 	or	r2,r20,r2
 10100d4:	38800115 	stw	r2,4(r7)
 10100d8:	20c00117 	ldw	r3,4(r4)
 10100dc:	18c00054 	ori	r3,r3,1
 10100e0:	20c00115 	stw	r3,4(r4)
 10100e4:	b009883a 	mov	r4,r22
 10100e8:	101409c0 	call	101409c <__malloc_unlock>
 10100ec:	8023883a 	mov	r17,r16
 10100f0:	00000606 	br	101010c <_realloc_r+0xd8>
 10100f4:	01c00404 	movi	r7,16
 10100f8:	3839883a 	mov	fp,r7
 10100fc:	e47fe72e 	bgeu	fp,r17,101009c <_realloc_r+0x68>
 1010100:	00800304 	movi	r2,12
 1010104:	0023883a 	mov	r17,zero
 1010108:	b0800015 	stw	r2,0(r22)
 101010c:	8805883a 	mov	r2,r17
 1010110:	dfc00b17 	ldw	ra,44(sp)
 1010114:	df000a17 	ldw	fp,40(sp)
 1010118:	ddc00917 	ldw	r23,36(sp)
 101011c:	dd800817 	ldw	r22,32(sp)
 1010120:	dd400717 	ldw	r21,28(sp)
 1010124:	dd000617 	ldw	r20,24(sp)
 1010128:	dcc00517 	ldw	r19,20(sp)
 101012c:	dc800417 	ldw	r18,16(sp)
 1010130:	dc400317 	ldw	r17,12(sp)
 1010134:	dc000217 	ldw	r16,8(sp)
 1010138:	dec00c04 	addi	sp,sp,48
 101013c:	f800283a 	ret
 1010140:	008040b4 	movhi	r2,258
 1010144:	10be0404 	addi	r2,r2,-2032
 1010148:	12400217 	ldw	r9,8(r2)
 101014c:	84cd883a 	add	r6,r16,r19
 1010150:	802b883a 	mov	r21,r16
 1010154:	3240b926 	beq	r6,r9,101043c <_realloc_r+0x408>
 1010158:	31400117 	ldw	r5,4(r6)
 101015c:	00bfff84 	movi	r2,-2
 1010160:	2884703a 	and	r2,r5,r2
 1010164:	1185883a 	add	r2,r2,r6
 1010168:	10c00117 	ldw	r3,4(r2)
 101016c:	18c0004c 	andi	r3,r3,1
 1010170:	1807003a 	cmpeq	r3,r3,zero
 1010174:	1800a326 	beq	r3,zero,1010404 <_realloc_r+0x3d0>
 1010178:	2908703a 	and	r4,r5,r4
 101017c:	9929883a 	add	r20,r19,r4
 1010180:	a1c0a30e 	bge	r20,r7,1010410 <_realloc_r+0x3dc>
 1010184:	4080004c 	andi	r2,r8,1
 1010188:	1000551e 	bne	r2,zero,10102e0 <_realloc_r+0x2ac>
 101018c:	80800017 	ldw	r2,0(r16)
 1010190:	80afc83a 	sub	r23,r16,r2
 1010194:	b8c00117 	ldw	r3,4(r23)
 1010198:	00bfff04 	movi	r2,-4
 101019c:	1884703a 	and	r2,r3,r2
 10101a0:	30002e26 	beq	r6,zero,101025c <_realloc_r+0x228>
 10101a4:	3240b926 	beq	r6,r9,101048c <_realloc_r+0x458>
 10101a8:	98a9883a 	add	r20,r19,r2
 10101ac:	2509883a 	add	r4,r4,r20
 10101b0:	d9000015 	stw	r4,0(sp)
 10101b4:	21c02a16 	blt	r4,r7,1010260 <_realloc_r+0x22c>
 10101b8:	30800317 	ldw	r2,12(r6)
 10101bc:	30c00217 	ldw	r3,8(r6)
 10101c0:	01400904 	movi	r5,36
 10101c4:	99bfff04 	addi	r6,r19,-4
 10101c8:	18800315 	stw	r2,12(r3)
 10101cc:	10c00215 	stw	r3,8(r2)
 10101d0:	b9000317 	ldw	r4,12(r23)
 10101d4:	b8800217 	ldw	r2,8(r23)
 10101d8:	b82b883a 	mov	r21,r23
 10101dc:	bc000204 	addi	r16,r23,8
 10101e0:	20800215 	stw	r2,8(r4)
 10101e4:	11000315 	stw	r4,12(r2)
 10101e8:	2980e436 	bltu	r5,r6,101057c <_realloc_r+0x548>
 10101ec:	008004c4 	movi	r2,19
 10101f0:	9009883a 	mov	r4,r18
 10101f4:	8011883a 	mov	r8,r16
 10101f8:	11800f2e 	bgeu	r2,r6,1010238 <_realloc_r+0x204>
 10101fc:	90800017 	ldw	r2,0(r18)
 1010200:	ba000404 	addi	r8,r23,16
 1010204:	91000204 	addi	r4,r18,8
 1010208:	b8800215 	stw	r2,8(r23)
 101020c:	90c00117 	ldw	r3,4(r18)
 1010210:	008006c4 	movi	r2,27
 1010214:	b8c00315 	stw	r3,12(r23)
 1010218:	1180072e 	bgeu	r2,r6,1010238 <_realloc_r+0x204>
 101021c:	90c00217 	ldw	r3,8(r18)
 1010220:	ba000604 	addi	r8,r23,24
 1010224:	91000404 	addi	r4,r18,16
 1010228:	b8c00415 	stw	r3,16(r23)
 101022c:	90800317 	ldw	r2,12(r18)
 1010230:	b8800515 	stw	r2,20(r23)
 1010234:	3140e726 	beq	r6,r5,10105d4 <_realloc_r+0x5a0>
 1010238:	20800017 	ldw	r2,0(r4)
 101023c:	dd000017 	ldw	r20,0(sp)
 1010240:	b80f883a 	mov	r7,r23
 1010244:	40800015 	stw	r2,0(r8)
 1010248:	20c00117 	ldw	r3,4(r4)
 101024c:	40c00115 	stw	r3,4(r8)
 1010250:	20800217 	ldw	r2,8(r4)
 1010254:	40800215 	stw	r2,8(r8)
 1010258:	003f9706 	br	10100b8 <_realloc_r+0x84>
 101025c:	98a9883a 	add	r20,r19,r2
 1010260:	a1c01f16 	blt	r20,r7,10102e0 <_realloc_r+0x2ac>
 1010264:	b8c00317 	ldw	r3,12(r23)
 1010268:	b8800217 	ldw	r2,8(r23)
 101026c:	99bfff04 	addi	r6,r19,-4
 1010270:	01400904 	movi	r5,36
 1010274:	b82b883a 	mov	r21,r23
 1010278:	18800215 	stw	r2,8(r3)
 101027c:	10c00315 	stw	r3,12(r2)
 1010280:	bc000204 	addi	r16,r23,8
 1010284:	2980c336 	bltu	r5,r6,1010594 <_realloc_r+0x560>
 1010288:	008004c4 	movi	r2,19
 101028c:	9009883a 	mov	r4,r18
 1010290:	8011883a 	mov	r8,r16
 1010294:	11800f2e 	bgeu	r2,r6,10102d4 <_realloc_r+0x2a0>
 1010298:	90800017 	ldw	r2,0(r18)
 101029c:	ba000404 	addi	r8,r23,16
 10102a0:	91000204 	addi	r4,r18,8
 10102a4:	b8800215 	stw	r2,8(r23)
 10102a8:	90c00117 	ldw	r3,4(r18)
 10102ac:	008006c4 	movi	r2,27
 10102b0:	b8c00315 	stw	r3,12(r23)
 10102b4:	1180072e 	bgeu	r2,r6,10102d4 <_realloc_r+0x2a0>
 10102b8:	90c00217 	ldw	r3,8(r18)
 10102bc:	ba000604 	addi	r8,r23,24
 10102c0:	91000404 	addi	r4,r18,16
 10102c4:	b8c00415 	stw	r3,16(r23)
 10102c8:	90800317 	ldw	r2,12(r18)
 10102cc:	b8800515 	stw	r2,20(r23)
 10102d0:	3140c726 	beq	r6,r5,10105f0 <_realloc_r+0x5bc>
 10102d4:	20800017 	ldw	r2,0(r4)
 10102d8:	b80f883a 	mov	r7,r23
 10102dc:	003fd906 	br	1010244 <_realloc_r+0x210>
 10102e0:	880b883a 	mov	r5,r17
 10102e4:	b009883a 	mov	r4,r22
 10102e8:	10097100 	call	1009710 <_malloc_r>
 10102ec:	1023883a 	mov	r17,r2
 10102f0:	10002526 	beq	r2,zero,1010388 <_realloc_r+0x354>
 10102f4:	80800117 	ldw	r2,4(r16)
 10102f8:	00ffff84 	movi	r3,-2
 10102fc:	893ffe04 	addi	r4,r17,-8
 1010300:	10c4703a 	and	r2,r2,r3
 1010304:	8085883a 	add	r2,r16,r2
 1010308:	20809526 	beq	r4,r2,1010560 <_realloc_r+0x52c>
 101030c:	99bfff04 	addi	r6,r19,-4
 1010310:	01c00904 	movi	r7,36
 1010314:	39804536 	bltu	r7,r6,101042c <_realloc_r+0x3f8>
 1010318:	008004c4 	movi	r2,19
 101031c:	9009883a 	mov	r4,r18
 1010320:	880b883a 	mov	r5,r17
 1010324:	11800f2e 	bgeu	r2,r6,1010364 <_realloc_r+0x330>
 1010328:	90800017 	ldw	r2,0(r18)
 101032c:	89400204 	addi	r5,r17,8
 1010330:	91000204 	addi	r4,r18,8
 1010334:	88800015 	stw	r2,0(r17)
 1010338:	90c00117 	ldw	r3,4(r18)
 101033c:	008006c4 	movi	r2,27
 1010340:	88c00115 	stw	r3,4(r17)
 1010344:	1180072e 	bgeu	r2,r6,1010364 <_realloc_r+0x330>
 1010348:	90c00217 	ldw	r3,8(r18)
 101034c:	89400404 	addi	r5,r17,16
 1010350:	91000404 	addi	r4,r18,16
 1010354:	88c00215 	stw	r3,8(r17)
 1010358:	90800317 	ldw	r2,12(r18)
 101035c:	88800315 	stw	r2,12(r17)
 1010360:	31c09126 	beq	r6,r7,10105a8 <_realloc_r+0x574>
 1010364:	20800017 	ldw	r2,0(r4)
 1010368:	28800015 	stw	r2,0(r5)
 101036c:	20c00117 	ldw	r3,4(r4)
 1010370:	28c00115 	stw	r3,4(r5)
 1010374:	20800217 	ldw	r2,8(r4)
 1010378:	28800215 	stw	r2,8(r5)
 101037c:	900b883a 	mov	r5,r18
 1010380:	b009883a 	mov	r4,r22
 1010384:	100e4b80 	call	100e4b8 <_free_r>
 1010388:	b009883a 	mov	r4,r22
 101038c:	101409c0 	call	101409c <__malloc_unlock>
 1010390:	003f5e06 	br	101010c <_realloc_r+0xd8>
 1010394:	300b883a 	mov	r5,r6
 1010398:	dfc00b17 	ldw	ra,44(sp)
 101039c:	df000a17 	ldw	fp,40(sp)
 10103a0:	ddc00917 	ldw	r23,36(sp)
 10103a4:	dd800817 	ldw	r22,32(sp)
 10103a8:	dd400717 	ldw	r21,28(sp)
 10103ac:	dd000617 	ldw	r20,24(sp)
 10103b0:	dcc00517 	ldw	r19,20(sp)
 10103b4:	dc800417 	ldw	r18,16(sp)
 10103b8:	dc400317 	ldw	r17,12(sp)
 10103bc:	dc000217 	ldw	r16,8(sp)
 10103c0:	dec00c04 	addi	sp,sp,48
 10103c4:	10097101 	jmpi	1009710 <_malloc_r>
 10103c8:	38800117 	ldw	r2,4(r7)
 10103cc:	e54b883a 	add	r5,fp,r21
 10103d0:	31000054 	ori	r4,r6,1
 10103d4:	1080004c 	andi	r2,r2,1
 10103d8:	1704b03a 	or	r2,r2,fp
 10103dc:	38800115 	stw	r2,4(r7)
 10103e0:	29000115 	stw	r4,4(r5)
 10103e4:	2987883a 	add	r3,r5,r6
 10103e8:	18800117 	ldw	r2,4(r3)
 10103ec:	29400204 	addi	r5,r5,8
 10103f0:	b009883a 	mov	r4,r22
 10103f4:	10800054 	ori	r2,r2,1
 10103f8:	18800115 	stw	r2,4(r3)
 10103fc:	100e4b80 	call	100e4b8 <_free_r>
 1010400:	003f3806 	br	10100e4 <_realloc_r+0xb0>
 1010404:	000d883a 	mov	r6,zero
 1010408:	0009883a 	mov	r4,zero
 101040c:	003f5d06 	br	1010184 <_realloc_r+0x150>
 1010410:	30c00217 	ldw	r3,8(r6)
 1010414:	30800317 	ldw	r2,12(r6)
 1010418:	800f883a 	mov	r7,r16
 101041c:	84000204 	addi	r16,r16,8
 1010420:	10c00215 	stw	r3,8(r2)
 1010424:	18800315 	stw	r2,12(r3)
 1010428:	003f2306 	br	10100b8 <_realloc_r+0x84>
 101042c:	8809883a 	mov	r4,r17
 1010430:	900b883a 	mov	r5,r18
 1010434:	100a0480 	call	100a048 <memmove>
 1010438:	003fd006 	br	101037c <_realloc_r+0x348>
 101043c:	30800117 	ldw	r2,4(r6)
 1010440:	e0c00404 	addi	r3,fp,16
 1010444:	1108703a 	and	r4,r2,r4
 1010448:	9905883a 	add	r2,r19,r4
 101044c:	10ff4d16 	blt	r2,r3,1010184 <_realloc_r+0x150>
 1010450:	1705c83a 	sub	r2,r2,fp
 1010454:	870b883a 	add	r5,r16,fp
 1010458:	10800054 	ori	r2,r2,1
 101045c:	28800115 	stw	r2,4(r5)
 1010460:	80c00117 	ldw	r3,4(r16)
 1010464:	008040b4 	movhi	r2,258
 1010468:	10be0404 	addi	r2,r2,-2032
 101046c:	b009883a 	mov	r4,r22
 1010470:	18c0004c 	andi	r3,r3,1
 1010474:	e0c6b03a 	or	r3,fp,r3
 1010478:	11400215 	stw	r5,8(r2)
 101047c:	80c00115 	stw	r3,4(r16)
 1010480:	101409c0 	call	101409c <__malloc_unlock>
 1010484:	84400204 	addi	r17,r16,8
 1010488:	003f2006 	br	101010c <_realloc_r+0xd8>
 101048c:	98a9883a 	add	r20,r19,r2
 1010490:	2509883a 	add	r4,r4,r20
 1010494:	e0800404 	addi	r2,fp,16
 1010498:	d9000115 	stw	r4,4(sp)
 101049c:	20bf7016 	blt	r4,r2,1010260 <_realloc_r+0x22c>
 10104a0:	b8c00317 	ldw	r3,12(r23)
 10104a4:	b8800217 	ldw	r2,8(r23)
 10104a8:	99bfff04 	addi	r6,r19,-4
 10104ac:	01400904 	movi	r5,36
 10104b0:	18800215 	stw	r2,8(r3)
 10104b4:	10c00315 	stw	r3,12(r2)
 10104b8:	bc400204 	addi	r17,r23,8
 10104bc:	29804136 	bltu	r5,r6,10105c4 <_realloc_r+0x590>
 10104c0:	008004c4 	movi	r2,19
 10104c4:	9009883a 	mov	r4,r18
 10104c8:	880f883a 	mov	r7,r17
 10104cc:	11800f2e 	bgeu	r2,r6,101050c <_realloc_r+0x4d8>
 10104d0:	90800017 	ldw	r2,0(r18)
 10104d4:	b9c00404 	addi	r7,r23,16
 10104d8:	91000204 	addi	r4,r18,8
 10104dc:	b8800215 	stw	r2,8(r23)
 10104e0:	90c00117 	ldw	r3,4(r18)
 10104e4:	008006c4 	movi	r2,27
 10104e8:	b8c00315 	stw	r3,12(r23)
 10104ec:	1180072e 	bgeu	r2,r6,101050c <_realloc_r+0x4d8>
 10104f0:	90c00217 	ldw	r3,8(r18)
 10104f4:	b9c00604 	addi	r7,r23,24
 10104f8:	91000404 	addi	r4,r18,16
 10104fc:	b8c00415 	stw	r3,16(r23)
 1010500:	90800317 	ldw	r2,12(r18)
 1010504:	b8800515 	stw	r2,20(r23)
 1010508:	31404026 	beq	r6,r5,101060c <_realloc_r+0x5d8>
 101050c:	20800017 	ldw	r2,0(r4)
 1010510:	38800015 	stw	r2,0(r7)
 1010514:	20c00117 	ldw	r3,4(r4)
 1010518:	38c00115 	stw	r3,4(r7)
 101051c:	20800217 	ldw	r2,8(r4)
 1010520:	38800215 	stw	r2,8(r7)
 1010524:	d8c00117 	ldw	r3,4(sp)
 1010528:	bf0b883a 	add	r5,r23,fp
 101052c:	b009883a 	mov	r4,r22
 1010530:	1f05c83a 	sub	r2,r3,fp
 1010534:	10800054 	ori	r2,r2,1
 1010538:	28800115 	stw	r2,4(r5)
 101053c:	b8c00117 	ldw	r3,4(r23)
 1010540:	008040b4 	movhi	r2,258
 1010544:	10be0404 	addi	r2,r2,-2032
 1010548:	11400215 	stw	r5,8(r2)
 101054c:	18c0004c 	andi	r3,r3,1
 1010550:	e0c6b03a 	or	r3,fp,r3
 1010554:	b8c00115 	stw	r3,4(r23)
 1010558:	101409c0 	call	101409c <__malloc_unlock>
 101055c:	003eeb06 	br	101010c <_realloc_r+0xd8>
 1010560:	20800117 	ldw	r2,4(r4)
 1010564:	00ffff04 	movi	r3,-4
 1010568:	800f883a 	mov	r7,r16
 101056c:	10c4703a 	and	r2,r2,r3
 1010570:	98a9883a 	add	r20,r19,r2
 1010574:	84000204 	addi	r16,r16,8
 1010578:	003ecf06 	br	10100b8 <_realloc_r+0x84>
 101057c:	900b883a 	mov	r5,r18
 1010580:	8009883a 	mov	r4,r16
 1010584:	100a0480 	call	100a048 <memmove>
 1010588:	dd000017 	ldw	r20,0(sp)
 101058c:	b80f883a 	mov	r7,r23
 1010590:	003ec906 	br	10100b8 <_realloc_r+0x84>
 1010594:	900b883a 	mov	r5,r18
 1010598:	8009883a 	mov	r4,r16
 101059c:	100a0480 	call	100a048 <memmove>
 10105a0:	b80f883a 	mov	r7,r23
 10105a4:	003ec406 	br	10100b8 <_realloc_r+0x84>
 10105a8:	90c00417 	ldw	r3,16(r18)
 10105ac:	89400604 	addi	r5,r17,24
 10105b0:	91000604 	addi	r4,r18,24
 10105b4:	88c00415 	stw	r3,16(r17)
 10105b8:	90800517 	ldw	r2,20(r18)
 10105bc:	88800515 	stw	r2,20(r17)
 10105c0:	003f6806 	br	1010364 <_realloc_r+0x330>
 10105c4:	900b883a 	mov	r5,r18
 10105c8:	8809883a 	mov	r4,r17
 10105cc:	100a0480 	call	100a048 <memmove>
 10105d0:	003fd406 	br	1010524 <_realloc_r+0x4f0>
 10105d4:	90c00417 	ldw	r3,16(r18)
 10105d8:	91000604 	addi	r4,r18,24
 10105dc:	ba000804 	addi	r8,r23,32
 10105e0:	b8c00615 	stw	r3,24(r23)
 10105e4:	90800517 	ldw	r2,20(r18)
 10105e8:	b8800715 	stw	r2,28(r23)
 10105ec:	003f1206 	br	1010238 <_realloc_r+0x204>
 10105f0:	90c00417 	ldw	r3,16(r18)
 10105f4:	91000604 	addi	r4,r18,24
 10105f8:	ba000804 	addi	r8,r23,32
 10105fc:	b8c00615 	stw	r3,24(r23)
 1010600:	90800517 	ldw	r2,20(r18)
 1010604:	b8800715 	stw	r2,28(r23)
 1010608:	003f3206 	br	10102d4 <_realloc_r+0x2a0>
 101060c:	90c00417 	ldw	r3,16(r18)
 1010610:	91000604 	addi	r4,r18,24
 1010614:	b9c00804 	addi	r7,r23,32
 1010618:	b8c00615 	stw	r3,24(r23)
 101061c:	90800517 	ldw	r2,20(r18)
 1010620:	b8800715 	stw	r2,28(r23)
 1010624:	003fb906 	br	101050c <_realloc_r+0x4d8>

01010628 <__isinfd>:
 1010628:	200d883a 	mov	r6,r4
 101062c:	0109c83a 	sub	r4,zero,r4
 1010630:	2188b03a 	or	r4,r4,r6
 1010634:	2008d7fa 	srli	r4,r4,31
 1010638:	00a00034 	movhi	r2,32768
 101063c:	10bfffc4 	addi	r2,r2,-1
 1010640:	1144703a 	and	r2,r2,r5
 1010644:	2088b03a 	or	r4,r4,r2
 1010648:	009ffc34 	movhi	r2,32752
 101064c:	1105c83a 	sub	r2,r2,r4
 1010650:	0087c83a 	sub	r3,zero,r2
 1010654:	10c4b03a 	or	r2,r2,r3
 1010658:	1004d7fa 	srli	r2,r2,31
 101065c:	00c00044 	movi	r3,1
 1010660:	1885c83a 	sub	r2,r3,r2
 1010664:	f800283a 	ret

01010668 <__isnand>:
 1010668:	200d883a 	mov	r6,r4
 101066c:	0109c83a 	sub	r4,zero,r4
 1010670:	2188b03a 	or	r4,r4,r6
 1010674:	2008d7fa 	srli	r4,r4,31
 1010678:	00a00034 	movhi	r2,32768
 101067c:	10bfffc4 	addi	r2,r2,-1
 1010680:	1144703a 	and	r2,r2,r5
 1010684:	2088b03a 	or	r4,r4,r2
 1010688:	009ffc34 	movhi	r2,32752
 101068c:	1105c83a 	sub	r2,r2,r4
 1010690:	1004d7fa 	srli	r2,r2,31
 1010694:	f800283a 	ret

01010698 <__sclose>:
 1010698:	2940038f 	ldh	r5,14(r5)
 101069c:	10109cc1 	jmpi	10109cc <_close_r>

010106a0 <__sseek>:
 10106a0:	defffe04 	addi	sp,sp,-8
 10106a4:	dc000015 	stw	r16,0(sp)
 10106a8:	2821883a 	mov	r16,r5
 10106ac:	2940038f 	ldh	r5,14(r5)
 10106b0:	dfc00115 	stw	ra,4(sp)
 10106b4:	1010c440 	call	1010c44 <_lseek_r>
 10106b8:	1007883a 	mov	r3,r2
 10106bc:	00bfffc4 	movi	r2,-1
 10106c0:	18800926 	beq	r3,r2,10106e8 <__sseek+0x48>
 10106c4:	8080030b 	ldhu	r2,12(r16)
 10106c8:	80c01415 	stw	r3,80(r16)
 10106cc:	10840014 	ori	r2,r2,4096
 10106d0:	8080030d 	sth	r2,12(r16)
 10106d4:	1805883a 	mov	r2,r3
 10106d8:	dfc00117 	ldw	ra,4(sp)
 10106dc:	dc000017 	ldw	r16,0(sp)
 10106e0:	dec00204 	addi	sp,sp,8
 10106e4:	f800283a 	ret
 10106e8:	8080030b 	ldhu	r2,12(r16)
 10106ec:	10bbffcc 	andi	r2,r2,61439
 10106f0:	8080030d 	sth	r2,12(r16)
 10106f4:	1805883a 	mov	r2,r3
 10106f8:	dfc00117 	ldw	ra,4(sp)
 10106fc:	dc000017 	ldw	r16,0(sp)
 1010700:	dec00204 	addi	sp,sp,8
 1010704:	f800283a 	ret

01010708 <__swrite>:
 1010708:	2880030b 	ldhu	r2,12(r5)
 101070c:	defffb04 	addi	sp,sp,-20
 1010710:	dcc00315 	stw	r19,12(sp)
 1010714:	1080400c 	andi	r2,r2,256
 1010718:	dc800215 	stw	r18,8(sp)
 101071c:	dc400115 	stw	r17,4(sp)
 1010720:	dc000015 	stw	r16,0(sp)
 1010724:	3027883a 	mov	r19,r6
 1010728:	3825883a 	mov	r18,r7
 101072c:	dfc00415 	stw	ra,16(sp)
 1010730:	2821883a 	mov	r16,r5
 1010734:	000d883a 	mov	r6,zero
 1010738:	01c00084 	movi	r7,2
 101073c:	2023883a 	mov	r17,r4
 1010740:	10000226 	beq	r2,zero,101074c <__swrite+0x44>
 1010744:	2940038f 	ldh	r5,14(r5)
 1010748:	1010c440 	call	1010c44 <_lseek_r>
 101074c:	8080030b 	ldhu	r2,12(r16)
 1010750:	8140038f 	ldh	r5,14(r16)
 1010754:	8809883a 	mov	r4,r17
 1010758:	10bbffcc 	andi	r2,r2,61439
 101075c:	980d883a 	mov	r6,r19
 1010760:	900f883a 	mov	r7,r18
 1010764:	8080030d 	sth	r2,12(r16)
 1010768:	dfc00417 	ldw	ra,16(sp)
 101076c:	dcc00317 	ldw	r19,12(sp)
 1010770:	dc800217 	ldw	r18,8(sp)
 1010774:	dc400117 	ldw	r17,4(sp)
 1010778:	dc000017 	ldw	r16,0(sp)
 101077c:	dec00504 	addi	sp,sp,20
 1010780:	10108a01 	jmpi	10108a0 <_write_r>

01010784 <__sread>:
 1010784:	defffe04 	addi	sp,sp,-8
 1010788:	dc000015 	stw	r16,0(sp)
 101078c:	2821883a 	mov	r16,r5
 1010790:	2940038f 	ldh	r5,14(r5)
 1010794:	dfc00115 	stw	ra,4(sp)
 1010798:	1010cbc0 	call	1010cbc <_read_r>
 101079c:	1007883a 	mov	r3,r2
 10107a0:	10000816 	blt	r2,zero,10107c4 <__sread+0x40>
 10107a4:	80801417 	ldw	r2,80(r16)
 10107a8:	10c5883a 	add	r2,r2,r3
 10107ac:	80801415 	stw	r2,80(r16)
 10107b0:	1805883a 	mov	r2,r3
 10107b4:	dfc00117 	ldw	ra,4(sp)
 10107b8:	dc000017 	ldw	r16,0(sp)
 10107bc:	dec00204 	addi	sp,sp,8
 10107c0:	f800283a 	ret
 10107c4:	8080030b 	ldhu	r2,12(r16)
 10107c8:	10bbffcc 	andi	r2,r2,61439
 10107cc:	8080030d 	sth	r2,12(r16)
 10107d0:	1805883a 	mov	r2,r3
 10107d4:	dfc00117 	ldw	ra,4(sp)
 10107d8:	dc000017 	ldw	r16,0(sp)
 10107dc:	dec00204 	addi	sp,sp,8
 10107e0:	f800283a 	ret

010107e4 <strcmp>:
 10107e4:	2144b03a 	or	r2,r4,r5
 10107e8:	108000cc 	andi	r2,r2,3
 10107ec:	10001d1e 	bne	r2,zero,1010864 <strcmp+0x80>
 10107f0:	200f883a 	mov	r7,r4
 10107f4:	28800017 	ldw	r2,0(r5)
 10107f8:	21000017 	ldw	r4,0(r4)
 10107fc:	280d883a 	mov	r6,r5
 1010800:	2080161e 	bne	r4,r2,101085c <strcmp+0x78>
 1010804:	023fbff4 	movhi	r8,65279
 1010808:	423fbfc4 	addi	r8,r8,-257
 101080c:	2207883a 	add	r3,r4,r8
 1010810:	01602074 	movhi	r5,32897
 1010814:	29602004 	addi	r5,r5,-32640
 1010818:	1946703a 	and	r3,r3,r5
 101081c:	0104303a 	nor	r2,zero,r4
 1010820:	10c4703a 	and	r2,r2,r3
 1010824:	10001c1e 	bne	r2,zero,1010898 <strcmp+0xb4>
 1010828:	4013883a 	mov	r9,r8
 101082c:	2811883a 	mov	r8,r5
 1010830:	00000106 	br	1010838 <strcmp+0x54>
 1010834:	1800181e 	bne	r3,zero,1010898 <strcmp+0xb4>
 1010838:	39c00104 	addi	r7,r7,4
 101083c:	39000017 	ldw	r4,0(r7)
 1010840:	31800104 	addi	r6,r6,4
 1010844:	31400017 	ldw	r5,0(r6)
 1010848:	2245883a 	add	r2,r4,r9
 101084c:	1204703a 	and	r2,r2,r8
 1010850:	0106303a 	nor	r3,zero,r4
 1010854:	1886703a 	and	r3,r3,r2
 1010858:	217ff626 	beq	r4,r5,1010834 <strcmp+0x50>
 101085c:	3809883a 	mov	r4,r7
 1010860:	300b883a 	mov	r5,r6
 1010864:	20c00007 	ldb	r3,0(r4)
 1010868:	1800051e 	bne	r3,zero,1010880 <strcmp+0x9c>
 101086c:	00000606 	br	1010888 <strcmp+0xa4>
 1010870:	21000044 	addi	r4,r4,1
 1010874:	20c00007 	ldb	r3,0(r4)
 1010878:	29400044 	addi	r5,r5,1
 101087c:	18000226 	beq	r3,zero,1010888 <strcmp+0xa4>
 1010880:	28800007 	ldb	r2,0(r5)
 1010884:	18bffa26 	beq	r3,r2,1010870 <strcmp+0x8c>
 1010888:	20c00003 	ldbu	r3,0(r4)
 101088c:	28800003 	ldbu	r2,0(r5)
 1010890:	1885c83a 	sub	r2,r3,r2
 1010894:	f800283a 	ret
 1010898:	0005883a 	mov	r2,zero
 101089c:	f800283a 	ret

010108a0 <_write_r>:
 10108a0:	defffd04 	addi	sp,sp,-12
 10108a4:	dc000015 	stw	r16,0(sp)
 10108a8:	040040b4 	movhi	r16,258
 10108ac:	840bb304 	addi	r16,r16,11980
 10108b0:	dc400115 	stw	r17,4(sp)
 10108b4:	80000015 	stw	zero,0(r16)
 10108b8:	2023883a 	mov	r17,r4
 10108bc:	2809883a 	mov	r4,r5
 10108c0:	300b883a 	mov	r5,r6
 10108c4:	380d883a 	mov	r6,r7
 10108c8:	dfc00215 	stw	ra,8(sp)
 10108cc:	1013d0c0 	call	1013d0c <write>
 10108d0:	1007883a 	mov	r3,r2
 10108d4:	00bfffc4 	movi	r2,-1
 10108d8:	18800626 	beq	r3,r2,10108f4 <_write_r+0x54>
 10108dc:	1805883a 	mov	r2,r3
 10108e0:	dfc00217 	ldw	ra,8(sp)
 10108e4:	dc400117 	ldw	r17,4(sp)
 10108e8:	dc000017 	ldw	r16,0(sp)
 10108ec:	dec00304 	addi	sp,sp,12
 10108f0:	f800283a 	ret
 10108f4:	80800017 	ldw	r2,0(r16)
 10108f8:	103ff826 	beq	r2,zero,10108dc <_write_r+0x3c>
 10108fc:	88800015 	stw	r2,0(r17)
 1010900:	1805883a 	mov	r2,r3
 1010904:	dfc00217 	ldw	ra,8(sp)
 1010908:	dc400117 	ldw	r17,4(sp)
 101090c:	dc000017 	ldw	r16,0(sp)
 1010910:	dec00304 	addi	sp,sp,12
 1010914:	f800283a 	ret

01010918 <_calloc_r>:
 1010918:	298b383a 	mul	r5,r5,r6
 101091c:	defffe04 	addi	sp,sp,-8
 1010920:	dc000015 	stw	r16,0(sp)
 1010924:	dfc00115 	stw	ra,4(sp)
 1010928:	10097100 	call	1009710 <_malloc_r>
 101092c:	1021883a 	mov	r16,r2
 1010930:	01c00904 	movi	r7,36
 1010934:	10000d26 	beq	r2,zero,101096c <_calloc_r+0x54>
 1010938:	10ffff17 	ldw	r3,-4(r2)
 101093c:	1009883a 	mov	r4,r2
 1010940:	00bfff04 	movi	r2,-4
 1010944:	1886703a 	and	r3,r3,r2
 1010948:	1887883a 	add	r3,r3,r2
 101094c:	180d883a 	mov	r6,r3
 1010950:	000b883a 	mov	r5,zero
 1010954:	38c01736 	bltu	r7,r3,10109b4 <_calloc_r+0x9c>
 1010958:	008004c4 	movi	r2,19
 101095c:	10c00836 	bltu	r2,r3,1010980 <_calloc_r+0x68>
 1010960:	20000215 	stw	zero,8(r4)
 1010964:	20000015 	stw	zero,0(r4)
 1010968:	20000115 	stw	zero,4(r4)
 101096c:	8005883a 	mov	r2,r16
 1010970:	dfc00117 	ldw	ra,4(sp)
 1010974:	dc000017 	ldw	r16,0(sp)
 1010978:	dec00204 	addi	sp,sp,8
 101097c:	f800283a 	ret
 1010980:	008006c4 	movi	r2,27
 1010984:	80000015 	stw	zero,0(r16)
 1010988:	80000115 	stw	zero,4(r16)
 101098c:	81000204 	addi	r4,r16,8
 1010990:	10fff32e 	bgeu	r2,r3,1010960 <_calloc_r+0x48>
 1010994:	80000215 	stw	zero,8(r16)
 1010998:	80000315 	stw	zero,12(r16)
 101099c:	81000404 	addi	r4,r16,16
 10109a0:	19ffef1e 	bne	r3,r7,1010960 <_calloc_r+0x48>
 10109a4:	81000604 	addi	r4,r16,24
 10109a8:	80000415 	stw	zero,16(r16)
 10109ac:	80000515 	stw	zero,20(r16)
 10109b0:	003feb06 	br	1010960 <_calloc_r+0x48>
 10109b4:	100a1280 	call	100a128 <memset>
 10109b8:	8005883a 	mov	r2,r16
 10109bc:	dfc00117 	ldw	ra,4(sp)
 10109c0:	dc000017 	ldw	r16,0(sp)
 10109c4:	dec00204 	addi	sp,sp,8
 10109c8:	f800283a 	ret

010109cc <_close_r>:
 10109cc:	defffd04 	addi	sp,sp,-12
 10109d0:	dc000015 	stw	r16,0(sp)
 10109d4:	040040b4 	movhi	r16,258
 10109d8:	840bb304 	addi	r16,r16,11980
 10109dc:	dc400115 	stw	r17,4(sp)
 10109e0:	80000015 	stw	zero,0(r16)
 10109e4:	2023883a 	mov	r17,r4
 10109e8:	2809883a 	mov	r4,r5
 10109ec:	dfc00215 	stw	ra,8(sp)
 10109f0:	10131640 	call	1013164 <close>
 10109f4:	1007883a 	mov	r3,r2
 10109f8:	00bfffc4 	movi	r2,-1
 10109fc:	18800626 	beq	r3,r2,1010a18 <_close_r+0x4c>
 1010a00:	1805883a 	mov	r2,r3
 1010a04:	dfc00217 	ldw	ra,8(sp)
 1010a08:	dc400117 	ldw	r17,4(sp)
 1010a0c:	dc000017 	ldw	r16,0(sp)
 1010a10:	dec00304 	addi	sp,sp,12
 1010a14:	f800283a 	ret
 1010a18:	80800017 	ldw	r2,0(r16)
 1010a1c:	103ff826 	beq	r2,zero,1010a00 <_close_r+0x34>
 1010a20:	88800015 	stw	r2,0(r17)
 1010a24:	1805883a 	mov	r2,r3
 1010a28:	dfc00217 	ldw	ra,8(sp)
 1010a2c:	dc400117 	ldw	r17,4(sp)
 1010a30:	dc000017 	ldw	r16,0(sp)
 1010a34:	dec00304 	addi	sp,sp,12
 1010a38:	f800283a 	ret

01010a3c <_fclose_r>:
 1010a3c:	defffc04 	addi	sp,sp,-16
 1010a40:	dc400115 	stw	r17,4(sp)
 1010a44:	dc000015 	stw	r16,0(sp)
 1010a48:	dfc00315 	stw	ra,12(sp)
 1010a4c:	dc800215 	stw	r18,8(sp)
 1010a50:	2821883a 	mov	r16,r5
 1010a54:	2023883a 	mov	r17,r4
 1010a58:	28002926 	beq	r5,zero,1010b00 <_fclose_r+0xc4>
 1010a5c:	100e1240 	call	100e124 <__sfp_lock_acquire>
 1010a60:	88000226 	beq	r17,zero,1010a6c <_fclose_r+0x30>
 1010a64:	88800e17 	ldw	r2,56(r17)
 1010a68:	10002d26 	beq	r2,zero,1010b20 <_fclose_r+0xe4>
 1010a6c:	8080030f 	ldh	r2,12(r16)
 1010a70:	10002226 	beq	r2,zero,1010afc <_fclose_r+0xc0>
 1010a74:	8809883a 	mov	r4,r17
 1010a78:	800b883a 	mov	r5,r16
 1010a7c:	100de9c0 	call	100de9c <_fflush_r>
 1010a80:	1025883a 	mov	r18,r2
 1010a84:	80800b17 	ldw	r2,44(r16)
 1010a88:	10000426 	beq	r2,zero,1010a9c <_fclose_r+0x60>
 1010a8c:	81400717 	ldw	r5,28(r16)
 1010a90:	8809883a 	mov	r4,r17
 1010a94:	103ee83a 	callr	r2
 1010a98:	10002a16 	blt	r2,zero,1010b44 <_fclose_r+0x108>
 1010a9c:	8080030b 	ldhu	r2,12(r16)
 1010aa0:	1080200c 	andi	r2,r2,128
 1010aa4:	1000231e 	bne	r2,zero,1010b34 <_fclose_r+0xf8>
 1010aa8:	81400c17 	ldw	r5,48(r16)
 1010aac:	28000526 	beq	r5,zero,1010ac4 <_fclose_r+0x88>
 1010ab0:	80801004 	addi	r2,r16,64
 1010ab4:	28800226 	beq	r5,r2,1010ac0 <_fclose_r+0x84>
 1010ab8:	8809883a 	mov	r4,r17
 1010abc:	100e4b80 	call	100e4b8 <_free_r>
 1010ac0:	80000c15 	stw	zero,48(r16)
 1010ac4:	81401117 	ldw	r5,68(r16)
 1010ac8:	28000326 	beq	r5,zero,1010ad8 <_fclose_r+0x9c>
 1010acc:	8809883a 	mov	r4,r17
 1010ad0:	100e4b80 	call	100e4b8 <_free_r>
 1010ad4:	80001115 	stw	zero,68(r16)
 1010ad8:	8000030d 	sth	zero,12(r16)
 1010adc:	100e1280 	call	100e128 <__sfp_lock_release>
 1010ae0:	9005883a 	mov	r2,r18
 1010ae4:	dfc00317 	ldw	ra,12(sp)
 1010ae8:	dc800217 	ldw	r18,8(sp)
 1010aec:	dc400117 	ldw	r17,4(sp)
 1010af0:	dc000017 	ldw	r16,0(sp)
 1010af4:	dec00404 	addi	sp,sp,16
 1010af8:	f800283a 	ret
 1010afc:	100e1280 	call	100e128 <__sfp_lock_release>
 1010b00:	0025883a 	mov	r18,zero
 1010b04:	9005883a 	mov	r2,r18
 1010b08:	dfc00317 	ldw	ra,12(sp)
 1010b0c:	dc800217 	ldw	r18,8(sp)
 1010b10:	dc400117 	ldw	r17,4(sp)
 1010b14:	dc000017 	ldw	r16,0(sp)
 1010b18:	dec00404 	addi	sp,sp,16
 1010b1c:	f800283a 	ret
 1010b20:	8809883a 	mov	r4,r17
 1010b24:	100e1340 	call	100e134 <__sinit>
 1010b28:	8080030f 	ldh	r2,12(r16)
 1010b2c:	103fd11e 	bne	r2,zero,1010a74 <_fclose_r+0x38>
 1010b30:	003ff206 	br	1010afc <_fclose_r+0xc0>
 1010b34:	81400417 	ldw	r5,16(r16)
 1010b38:	8809883a 	mov	r4,r17
 1010b3c:	100e4b80 	call	100e4b8 <_free_r>
 1010b40:	003fd906 	br	1010aa8 <_fclose_r+0x6c>
 1010b44:	04bfffc4 	movi	r18,-1
 1010b48:	003fd406 	br	1010a9c <_fclose_r+0x60>

01010b4c <fclose>:
 1010b4c:	008040b4 	movhi	r2,258
 1010b50:	1084a904 	addi	r2,r2,4772
 1010b54:	200b883a 	mov	r5,r4
 1010b58:	11000017 	ldw	r4,0(r2)
 1010b5c:	1010a3c1 	jmpi	1010a3c <_fclose_r>

01010b60 <_fstat_r>:
 1010b60:	defffd04 	addi	sp,sp,-12
 1010b64:	dc000015 	stw	r16,0(sp)
 1010b68:	040040b4 	movhi	r16,258
 1010b6c:	840bb304 	addi	r16,r16,11980
 1010b70:	dc400115 	stw	r17,4(sp)
 1010b74:	80000015 	stw	zero,0(r16)
 1010b78:	2023883a 	mov	r17,r4
 1010b7c:	2809883a 	mov	r4,r5
 1010b80:	300b883a 	mov	r5,r6
 1010b84:	dfc00215 	stw	ra,8(sp)
 1010b88:	10133580 	call	1013358 <fstat>
 1010b8c:	1007883a 	mov	r3,r2
 1010b90:	00bfffc4 	movi	r2,-1
 1010b94:	18800626 	beq	r3,r2,1010bb0 <_fstat_r+0x50>
 1010b98:	1805883a 	mov	r2,r3
 1010b9c:	dfc00217 	ldw	ra,8(sp)
 1010ba0:	dc400117 	ldw	r17,4(sp)
 1010ba4:	dc000017 	ldw	r16,0(sp)
 1010ba8:	dec00304 	addi	sp,sp,12
 1010bac:	f800283a 	ret
 1010bb0:	80800017 	ldw	r2,0(r16)
 1010bb4:	103ff826 	beq	r2,zero,1010b98 <_fstat_r+0x38>
 1010bb8:	88800015 	stw	r2,0(r17)
 1010bbc:	1805883a 	mov	r2,r3
 1010bc0:	dfc00217 	ldw	ra,8(sp)
 1010bc4:	dc400117 	ldw	r17,4(sp)
 1010bc8:	dc000017 	ldw	r16,0(sp)
 1010bcc:	dec00304 	addi	sp,sp,12
 1010bd0:	f800283a 	ret

01010bd4 <_isatty_r>:
 1010bd4:	defffd04 	addi	sp,sp,-12
 1010bd8:	dc000015 	stw	r16,0(sp)
 1010bdc:	040040b4 	movhi	r16,258
 1010be0:	840bb304 	addi	r16,r16,11980
 1010be4:	dc400115 	stw	r17,4(sp)
 1010be8:	80000015 	stw	zero,0(r16)
 1010bec:	2023883a 	mov	r17,r4
 1010bf0:	2809883a 	mov	r4,r5
 1010bf4:	dfc00215 	stw	ra,8(sp)
 1010bf8:	10134ac0 	call	10134ac <isatty>
 1010bfc:	1007883a 	mov	r3,r2
 1010c00:	00bfffc4 	movi	r2,-1
 1010c04:	18800626 	beq	r3,r2,1010c20 <_isatty_r+0x4c>
 1010c08:	1805883a 	mov	r2,r3
 1010c0c:	dfc00217 	ldw	ra,8(sp)
 1010c10:	dc400117 	ldw	r17,4(sp)
 1010c14:	dc000017 	ldw	r16,0(sp)
 1010c18:	dec00304 	addi	sp,sp,12
 1010c1c:	f800283a 	ret
 1010c20:	80800017 	ldw	r2,0(r16)
 1010c24:	103ff826 	beq	r2,zero,1010c08 <_isatty_r+0x34>
 1010c28:	88800015 	stw	r2,0(r17)
 1010c2c:	1805883a 	mov	r2,r3
 1010c30:	dfc00217 	ldw	ra,8(sp)
 1010c34:	dc400117 	ldw	r17,4(sp)
 1010c38:	dc000017 	ldw	r16,0(sp)
 1010c3c:	dec00304 	addi	sp,sp,12
 1010c40:	f800283a 	ret

01010c44 <_lseek_r>:
 1010c44:	defffd04 	addi	sp,sp,-12
 1010c48:	dc000015 	stw	r16,0(sp)
 1010c4c:	040040b4 	movhi	r16,258
 1010c50:	840bb304 	addi	r16,r16,11980
 1010c54:	dc400115 	stw	r17,4(sp)
 1010c58:	80000015 	stw	zero,0(r16)
 1010c5c:	2023883a 	mov	r17,r4
 1010c60:	2809883a 	mov	r4,r5
 1010c64:	300b883a 	mov	r5,r6
 1010c68:	380d883a 	mov	r6,r7
 1010c6c:	dfc00215 	stw	ra,8(sp)
 1010c70:	10138580 	call	1013858 <lseek>
 1010c74:	1007883a 	mov	r3,r2
 1010c78:	00bfffc4 	movi	r2,-1
 1010c7c:	18800626 	beq	r3,r2,1010c98 <_lseek_r+0x54>
 1010c80:	1805883a 	mov	r2,r3
 1010c84:	dfc00217 	ldw	ra,8(sp)
 1010c88:	dc400117 	ldw	r17,4(sp)
 1010c8c:	dc000017 	ldw	r16,0(sp)
 1010c90:	dec00304 	addi	sp,sp,12
 1010c94:	f800283a 	ret
 1010c98:	80800017 	ldw	r2,0(r16)
 1010c9c:	103ff826 	beq	r2,zero,1010c80 <_lseek_r+0x3c>
 1010ca0:	88800015 	stw	r2,0(r17)
 1010ca4:	1805883a 	mov	r2,r3
 1010ca8:	dfc00217 	ldw	ra,8(sp)
 1010cac:	dc400117 	ldw	r17,4(sp)
 1010cb0:	dc000017 	ldw	r16,0(sp)
 1010cb4:	dec00304 	addi	sp,sp,12
 1010cb8:	f800283a 	ret

01010cbc <_read_r>:
 1010cbc:	defffd04 	addi	sp,sp,-12
 1010cc0:	dc000015 	stw	r16,0(sp)
 1010cc4:	040040b4 	movhi	r16,258
 1010cc8:	840bb304 	addi	r16,r16,11980
 1010ccc:	dc400115 	stw	r17,4(sp)
 1010cd0:	80000015 	stw	zero,0(r16)
 1010cd4:	2023883a 	mov	r17,r4
 1010cd8:	2809883a 	mov	r4,r5
 1010cdc:	300b883a 	mov	r5,r6
 1010ce0:	380d883a 	mov	r6,r7
 1010ce4:	dfc00215 	stw	ra,8(sp)
 1010ce8:	1013a700 	call	1013a70 <read>
 1010cec:	1007883a 	mov	r3,r2
 1010cf0:	00bfffc4 	movi	r2,-1
 1010cf4:	18800626 	beq	r3,r2,1010d10 <_read_r+0x54>
 1010cf8:	1805883a 	mov	r2,r3
 1010cfc:	dfc00217 	ldw	ra,8(sp)
 1010d00:	dc400117 	ldw	r17,4(sp)
 1010d04:	dc000017 	ldw	r16,0(sp)
 1010d08:	dec00304 	addi	sp,sp,12
 1010d0c:	f800283a 	ret
 1010d10:	80800017 	ldw	r2,0(r16)
 1010d14:	103ff826 	beq	r2,zero,1010cf8 <_read_r+0x3c>
 1010d18:	88800015 	stw	r2,0(r17)
 1010d1c:	1805883a 	mov	r2,r3
 1010d20:	dfc00217 	ldw	ra,8(sp)
 1010d24:	dc400117 	ldw	r17,4(sp)
 1010d28:	dc000017 	ldw	r16,0(sp)
 1010d2c:	dec00304 	addi	sp,sp,12
 1010d30:	f800283a 	ret

01010d34 <__udivdi3>:
 1010d34:	defff004 	addi	sp,sp,-64
 1010d38:	2005883a 	mov	r2,r4
 1010d3c:	3011883a 	mov	r8,r6
 1010d40:	df000e15 	stw	fp,56(sp)
 1010d44:	dd000a15 	stw	r20,40(sp)
 1010d48:	dc000615 	stw	r16,24(sp)
 1010d4c:	dfc00f15 	stw	ra,60(sp)
 1010d50:	ddc00d15 	stw	r23,52(sp)
 1010d54:	dd800c15 	stw	r22,48(sp)
 1010d58:	dd400b15 	stw	r21,44(sp)
 1010d5c:	dcc00915 	stw	r19,36(sp)
 1010d60:	dc800815 	stw	r18,32(sp)
 1010d64:	dc400715 	stw	r17,28(sp)
 1010d68:	4021883a 	mov	r16,r8
 1010d6c:	1039883a 	mov	fp,r2
 1010d70:	2829883a 	mov	r20,r5
 1010d74:	38003b1e 	bne	r7,zero,1010e64 <__udivdi3+0x130>
 1010d78:	2a005c36 	bltu	r5,r8,1010eec <__udivdi3+0x1b8>
 1010d7c:	4000a626 	beq	r8,zero,1011018 <__udivdi3+0x2e4>
 1010d80:	00bfffd4 	movui	r2,65535
 1010d84:	14009e36 	bltu	r2,r16,1011000 <__udivdi3+0x2cc>
 1010d88:	00803fc4 	movi	r2,255
 1010d8c:	14013d36 	bltu	r2,r16,1011284 <__udivdi3+0x550>
 1010d90:	000b883a 	mov	r5,zero
 1010d94:	0005883a 	mov	r2,zero
 1010d98:	8084d83a 	srl	r2,r16,r2
 1010d9c:	010040b4 	movhi	r4,258
 1010da0:	213d6b04 	addi	r4,r4,-2644
 1010da4:	01800804 	movi	r6,32
 1010da8:	1105883a 	add	r2,r2,r4
 1010dac:	10c00003 	ldbu	r3,0(r2)
 1010db0:	28c7883a 	add	r3,r5,r3
 1010db4:	30edc83a 	sub	r22,r6,r3
 1010db8:	b000ee1e 	bne	r22,zero,1011174 <__udivdi3+0x440>
 1010dbc:	802ad43a 	srli	r21,r16,16
 1010dc0:	00800044 	movi	r2,1
 1010dc4:	a423c83a 	sub	r17,r20,r16
 1010dc8:	85ffffcc 	andi	r23,r16,65535
 1010dcc:	d8800315 	stw	r2,12(sp)
 1010dd0:	8809883a 	mov	r4,r17
 1010dd4:	a80b883a 	mov	r5,r21
 1010dd8:	1012b280 	call	1012b28 <__udivsi3>
 1010ddc:	8809883a 	mov	r4,r17
 1010de0:	a80b883a 	mov	r5,r21
 1010de4:	102d883a 	mov	r22,r2
 1010de8:	1012b300 	call	1012b30 <__umodsi3>
 1010dec:	1004943a 	slli	r2,r2,16
 1010df0:	e006d43a 	srli	r3,fp,16
 1010df4:	bda3383a 	mul	r17,r23,r22
 1010df8:	10c4b03a 	or	r2,r2,r3
 1010dfc:	1440042e 	bgeu	r2,r17,1010e10 <__udivdi3+0xdc>
 1010e00:	1405883a 	add	r2,r2,r16
 1010e04:	b5bfffc4 	addi	r22,r22,-1
 1010e08:	14000136 	bltu	r2,r16,1010e10 <__udivdi3+0xdc>
 1010e0c:	14413d36 	bltu	r2,r17,1011304 <__udivdi3+0x5d0>
 1010e10:	1463c83a 	sub	r17,r2,r17
 1010e14:	8809883a 	mov	r4,r17
 1010e18:	a80b883a 	mov	r5,r21
 1010e1c:	1012b280 	call	1012b28 <__udivsi3>
 1010e20:	8809883a 	mov	r4,r17
 1010e24:	a80b883a 	mov	r5,r21
 1010e28:	1029883a 	mov	r20,r2
 1010e2c:	1012b300 	call	1012b30 <__umodsi3>
 1010e30:	1004943a 	slli	r2,r2,16
 1010e34:	bd09383a 	mul	r4,r23,r20
 1010e38:	e0ffffcc 	andi	r3,fp,65535
 1010e3c:	10c4b03a 	or	r2,r2,r3
 1010e40:	1100042e 	bgeu	r2,r4,1010e54 <__udivdi3+0x120>
 1010e44:	8085883a 	add	r2,r16,r2
 1010e48:	a53fffc4 	addi	r20,r20,-1
 1010e4c:	14000136 	bltu	r2,r16,1010e54 <__udivdi3+0x120>
 1010e50:	11012036 	bltu	r2,r4,10112d4 <__udivdi3+0x5a0>
 1010e54:	b004943a 	slli	r2,r22,16
 1010e58:	d9000317 	ldw	r4,12(sp)
 1010e5c:	a084b03a 	or	r2,r20,r2
 1010e60:	00001506 	br	1010eb8 <__udivdi3+0x184>
 1010e64:	380d883a 	mov	r6,r7
 1010e68:	29c06236 	bltu	r5,r7,1010ff4 <__udivdi3+0x2c0>
 1010e6c:	00bfffd4 	movui	r2,65535
 1010e70:	11c05a36 	bltu	r2,r7,1010fdc <__udivdi3+0x2a8>
 1010e74:	00803fc4 	movi	r2,255
 1010e78:	11c0fc36 	bltu	r2,r7,101126c <__udivdi3+0x538>
 1010e7c:	000b883a 	mov	r5,zero
 1010e80:	0005883a 	mov	r2,zero
 1010e84:	3084d83a 	srl	r2,r6,r2
 1010e88:	010040b4 	movhi	r4,258
 1010e8c:	213d6b04 	addi	r4,r4,-2644
 1010e90:	01c00804 	movi	r7,32
 1010e94:	1105883a 	add	r2,r2,r4
 1010e98:	10c00003 	ldbu	r3,0(r2)
 1010e9c:	28c7883a 	add	r3,r5,r3
 1010ea0:	38efc83a 	sub	r23,r7,r3
 1010ea4:	b800691e 	bne	r23,zero,101104c <__udivdi3+0x318>
 1010ea8:	35000136 	bltu	r6,r20,1010eb0 <__udivdi3+0x17c>
 1010eac:	e4005136 	bltu	fp,r16,1010ff4 <__udivdi3+0x2c0>
 1010eb0:	00800044 	movi	r2,1
 1010eb4:	0009883a 	mov	r4,zero
 1010eb8:	2007883a 	mov	r3,r4
 1010ebc:	dfc00f17 	ldw	ra,60(sp)
 1010ec0:	df000e17 	ldw	fp,56(sp)
 1010ec4:	ddc00d17 	ldw	r23,52(sp)
 1010ec8:	dd800c17 	ldw	r22,48(sp)
 1010ecc:	dd400b17 	ldw	r21,44(sp)
 1010ed0:	dd000a17 	ldw	r20,40(sp)
 1010ed4:	dcc00917 	ldw	r19,36(sp)
 1010ed8:	dc800817 	ldw	r18,32(sp)
 1010edc:	dc400717 	ldw	r17,28(sp)
 1010ee0:	dc000617 	ldw	r16,24(sp)
 1010ee4:	dec01004 	addi	sp,sp,64
 1010ee8:	f800283a 	ret
 1010eec:	00bfffd4 	movui	r2,65535
 1010ef0:	12005036 	bltu	r2,r8,1011034 <__udivdi3+0x300>
 1010ef4:	00803fc4 	movi	r2,255
 1010ef8:	1200e836 	bltu	r2,r8,101129c <__udivdi3+0x568>
 1010efc:	000b883a 	mov	r5,zero
 1010f00:	0005883a 	mov	r2,zero
 1010f04:	8084d83a 	srl	r2,r16,r2
 1010f08:	010040b4 	movhi	r4,258
 1010f0c:	213d6b04 	addi	r4,r4,-2644
 1010f10:	01800804 	movi	r6,32
 1010f14:	1105883a 	add	r2,r2,r4
 1010f18:	10c00003 	ldbu	r3,0(r2)
 1010f1c:	28c7883a 	add	r3,r5,r3
 1010f20:	30cbc83a 	sub	r5,r6,r3
 1010f24:	28000626 	beq	r5,zero,1010f40 <__udivdi3+0x20c>
 1010f28:	3145c83a 	sub	r2,r6,r5
 1010f2c:	e084d83a 	srl	r2,fp,r2
 1010f30:	a146983a 	sll	r3,r20,r5
 1010f34:	e178983a 	sll	fp,fp,r5
 1010f38:	8160983a 	sll	r16,r16,r5
 1010f3c:	18a8b03a 	or	r20,r3,r2
 1010f40:	802ad43a 	srli	r21,r16,16
 1010f44:	a009883a 	mov	r4,r20
 1010f48:	85ffffcc 	andi	r23,r16,65535
 1010f4c:	a80b883a 	mov	r5,r21
 1010f50:	1012b280 	call	1012b28 <__udivsi3>
 1010f54:	a009883a 	mov	r4,r20
 1010f58:	a80b883a 	mov	r5,r21
 1010f5c:	102d883a 	mov	r22,r2
 1010f60:	1012b300 	call	1012b30 <__umodsi3>
 1010f64:	1004943a 	slli	r2,r2,16
 1010f68:	e006d43a 	srli	r3,fp,16
 1010f6c:	bda3383a 	mul	r17,r23,r22
 1010f70:	10c4b03a 	or	r2,r2,r3
 1010f74:	1440042e 	bgeu	r2,r17,1010f88 <__udivdi3+0x254>
 1010f78:	1405883a 	add	r2,r2,r16
 1010f7c:	b5bfffc4 	addi	r22,r22,-1
 1010f80:	14000136 	bltu	r2,r16,1010f88 <__udivdi3+0x254>
 1010f84:	1440d536 	bltu	r2,r17,10112dc <__udivdi3+0x5a8>
 1010f88:	1463c83a 	sub	r17,r2,r17
 1010f8c:	8809883a 	mov	r4,r17
 1010f90:	a80b883a 	mov	r5,r21
 1010f94:	1012b280 	call	1012b28 <__udivsi3>
 1010f98:	8809883a 	mov	r4,r17
 1010f9c:	a80b883a 	mov	r5,r21
 1010fa0:	1029883a 	mov	r20,r2
 1010fa4:	1012b300 	call	1012b30 <__umodsi3>
 1010fa8:	1004943a 	slli	r2,r2,16
 1010fac:	bd09383a 	mul	r4,r23,r20
 1010fb0:	e0ffffcc 	andi	r3,fp,65535
 1010fb4:	10c4b03a 	or	r2,r2,r3
 1010fb8:	1100042e 	bgeu	r2,r4,1010fcc <__udivdi3+0x298>
 1010fbc:	8085883a 	add	r2,r16,r2
 1010fc0:	a53fffc4 	addi	r20,r20,-1
 1010fc4:	14000136 	bltu	r2,r16,1010fcc <__udivdi3+0x298>
 1010fc8:	1100c736 	bltu	r2,r4,10112e8 <__udivdi3+0x5b4>
 1010fcc:	b004943a 	slli	r2,r22,16
 1010fd0:	0009883a 	mov	r4,zero
 1010fd4:	a084b03a 	or	r2,r20,r2
 1010fd8:	003fb706 	br	1010eb8 <__udivdi3+0x184>
 1010fdc:	00804034 	movhi	r2,256
 1010fe0:	10bfffc4 	addi	r2,r2,-1
 1010fe4:	11c0a436 	bltu	r2,r7,1011278 <__udivdi3+0x544>
 1010fe8:	01400404 	movi	r5,16
 1010fec:	2805883a 	mov	r2,r5
 1010ff0:	003fa406 	br	1010e84 <__udivdi3+0x150>
 1010ff4:	0005883a 	mov	r2,zero
 1010ff8:	0009883a 	mov	r4,zero
 1010ffc:	003fae06 	br	1010eb8 <__udivdi3+0x184>
 1011000:	00804034 	movhi	r2,256
 1011004:	10bfffc4 	addi	r2,r2,-1
 1011008:	1400a136 	bltu	r2,r16,1011290 <__udivdi3+0x55c>
 101100c:	01400404 	movi	r5,16
 1011010:	2805883a 	mov	r2,r5
 1011014:	003f6006 	br	1010d98 <__udivdi3+0x64>
 1011018:	01000044 	movi	r4,1
 101101c:	000b883a 	mov	r5,zero
 1011020:	1012b280 	call	1012b28 <__udivsi3>
 1011024:	1021883a 	mov	r16,r2
 1011028:	00bfffd4 	movui	r2,65535
 101102c:	143ff436 	bltu	r2,r16,1011000 <__udivdi3+0x2cc>
 1011030:	003f5506 	br	1010d88 <__udivdi3+0x54>
 1011034:	00804034 	movhi	r2,256
 1011038:	10bfffc4 	addi	r2,r2,-1
 101103c:	12009a36 	bltu	r2,r8,10112a8 <__udivdi3+0x574>
 1011040:	01400404 	movi	r5,16
 1011044:	2805883a 	mov	r2,r5
 1011048:	003fae06 	br	1010f04 <__udivdi3+0x1d0>
 101104c:	3dc5c83a 	sub	r2,r7,r23
 1011050:	35c8983a 	sll	r4,r6,r23
 1011054:	8086d83a 	srl	r3,r16,r2
 1011058:	a0a2d83a 	srl	r17,r20,r2
 101105c:	e084d83a 	srl	r2,fp,r2
 1011060:	20eab03a 	or	r21,r4,r3
 1011064:	a82cd43a 	srli	r22,r21,16
 1011068:	a5c6983a 	sll	r3,r20,r23
 101106c:	8809883a 	mov	r4,r17
 1011070:	b00b883a 	mov	r5,r22
 1011074:	1886b03a 	or	r3,r3,r2
 1011078:	d8c00215 	stw	r3,8(sp)
 101107c:	1012b280 	call	1012b28 <__udivsi3>
 1011080:	8809883a 	mov	r4,r17
 1011084:	b00b883a 	mov	r5,r22
 1011088:	1029883a 	mov	r20,r2
 101108c:	1012b300 	call	1012b30 <__umodsi3>
 1011090:	a8ffffcc 	andi	r3,r21,65535
 1011094:	d8c00515 	stw	r3,20(sp)
 1011098:	d9000217 	ldw	r4,8(sp)
 101109c:	d9400517 	ldw	r5,20(sp)
 10110a0:	1004943a 	slli	r2,r2,16
 10110a4:	2006d43a 	srli	r3,r4,16
 10110a8:	85e0983a 	sll	r16,r16,r23
 10110ac:	2d23383a 	mul	r17,r5,r20
 10110b0:	10c4b03a 	or	r2,r2,r3
 10110b4:	dc000015 	stw	r16,0(sp)
 10110b8:	1440032e 	bgeu	r2,r17,10110c8 <__udivdi3+0x394>
 10110bc:	1545883a 	add	r2,r2,r21
 10110c0:	a53fffc4 	addi	r20,r20,-1
 10110c4:	15407f2e 	bgeu	r2,r21,10112c4 <__udivdi3+0x590>
 10110c8:	1463c83a 	sub	r17,r2,r17
 10110cc:	8809883a 	mov	r4,r17
 10110d0:	b00b883a 	mov	r5,r22
 10110d4:	1012b280 	call	1012b28 <__udivsi3>
 10110d8:	8809883a 	mov	r4,r17
 10110dc:	b00b883a 	mov	r5,r22
 10110e0:	1021883a 	mov	r16,r2
 10110e4:	1012b300 	call	1012b30 <__umodsi3>
 10110e8:	d8c00517 	ldw	r3,20(sp)
 10110ec:	d9000217 	ldw	r4,8(sp)
 10110f0:	1004943a 	slli	r2,r2,16
 10110f4:	1c0f383a 	mul	r7,r3,r16
 10110f8:	20ffffcc 	andi	r3,r4,65535
 10110fc:	10e2b03a 	or	r17,r2,r3
 1011100:	89c0032e 	bgeu	r17,r7,1011110 <__udivdi3+0x3dc>
 1011104:	8d63883a 	add	r17,r17,r21
 1011108:	843fffc4 	addi	r16,r16,-1
 101110c:	8d40692e 	bgeu	r17,r21,10112b4 <__udivdi3+0x580>
 1011110:	a008943a 	slli	r4,r20,16
 1011114:	d9400017 	ldw	r5,0(sp)
 1011118:	89e3c83a 	sub	r17,r17,r7
 101111c:	8110b03a 	or	r8,r16,r4
 1011120:	280cd43a 	srli	r6,r5,16
 1011124:	28ffffcc 	andi	r3,r5,65535
 1011128:	40bfffcc 	andi	r2,r8,65535
 101112c:	400ad43a 	srli	r5,r8,16
 1011130:	10d3383a 	mul	r9,r2,r3
 1011134:	1185383a 	mul	r2,r2,r6
 1011138:	28c7383a 	mul	r3,r5,r3
 101113c:	4808d43a 	srli	r4,r9,16
 1011140:	298b383a 	mul	r5,r5,r6
 1011144:	10c5883a 	add	r2,r2,r3
 1011148:	2089883a 	add	r4,r4,r2
 101114c:	20c0022e 	bgeu	r4,r3,1011158 <__udivdi3+0x424>
 1011150:	00800074 	movhi	r2,1
 1011154:	288b883a 	add	r5,r5,r2
 1011158:	2004d43a 	srli	r2,r4,16
 101115c:	288b883a 	add	r5,r5,r2
 1011160:	89403f36 	bltu	r17,r5,1011260 <__udivdi3+0x52c>
 1011164:	89403926 	beq	r17,r5,101124c <__udivdi3+0x518>
 1011168:	4005883a 	mov	r2,r8
 101116c:	0009883a 	mov	r4,zero
 1011170:	003f5106 	br	1010eb8 <__udivdi3+0x184>
 1011174:	85a0983a 	sll	r16,r16,r22
 1011178:	3585c83a 	sub	r2,r6,r22
 101117c:	a0a2d83a 	srl	r17,r20,r2
 1011180:	802ad43a 	srli	r21,r16,16
 1011184:	e084d83a 	srl	r2,fp,r2
 1011188:	a586983a 	sll	r3,r20,r22
 101118c:	8809883a 	mov	r4,r17
 1011190:	a80b883a 	mov	r5,r21
 1011194:	1886b03a 	or	r3,r3,r2
 1011198:	d8c00115 	stw	r3,4(sp)
 101119c:	1012b280 	call	1012b28 <__udivsi3>
 10111a0:	8809883a 	mov	r4,r17
 10111a4:	a80b883a 	mov	r5,r21
 10111a8:	d8800415 	stw	r2,16(sp)
 10111ac:	1012b300 	call	1012b30 <__umodsi3>
 10111b0:	d9000117 	ldw	r4,4(sp)
 10111b4:	d9400417 	ldw	r5,16(sp)
 10111b8:	1004943a 	slli	r2,r2,16
 10111bc:	85ffffcc 	andi	r23,r16,65535
 10111c0:	2006d43a 	srli	r3,r4,16
 10111c4:	b963383a 	mul	r17,r23,r5
 10111c8:	10c4b03a 	or	r2,r2,r3
 10111cc:	1440042e 	bgeu	r2,r17,10111e0 <__udivdi3+0x4ac>
 10111d0:	297fffc4 	addi	r5,r5,-1
 10111d4:	1405883a 	add	r2,r2,r16
 10111d8:	d9400415 	stw	r5,16(sp)
 10111dc:	1400442e 	bgeu	r2,r16,10112f0 <__udivdi3+0x5bc>
 10111e0:	1463c83a 	sub	r17,r2,r17
 10111e4:	8809883a 	mov	r4,r17
 10111e8:	a80b883a 	mov	r5,r21
 10111ec:	1012b280 	call	1012b28 <__udivsi3>
 10111f0:	8809883a 	mov	r4,r17
 10111f4:	a80b883a 	mov	r5,r21
 10111f8:	1029883a 	mov	r20,r2
 10111fc:	1012b300 	call	1012b30 <__umodsi3>
 1011200:	d9400117 	ldw	r5,4(sp)
 1011204:	1004943a 	slli	r2,r2,16
 1011208:	bd09383a 	mul	r4,r23,r20
 101120c:	28ffffcc 	andi	r3,r5,65535
 1011210:	10c6b03a 	or	r3,r2,r3
 1011214:	1900062e 	bgeu	r3,r4,1011230 <__udivdi3+0x4fc>
 1011218:	1c07883a 	add	r3,r3,r16
 101121c:	a53fffc4 	addi	r20,r20,-1
 1011220:	1c000336 	bltu	r3,r16,1011230 <__udivdi3+0x4fc>
 1011224:	1900022e 	bgeu	r3,r4,1011230 <__udivdi3+0x4fc>
 1011228:	a53fffc4 	addi	r20,r20,-1
 101122c:	1c07883a 	add	r3,r3,r16
 1011230:	d9400417 	ldw	r5,16(sp)
 1011234:	e5b8983a 	sll	fp,fp,r22
 1011238:	1923c83a 	sub	r17,r3,r4
 101123c:	2804943a 	slli	r2,r5,16
 1011240:	a0a8b03a 	or	r20,r20,r2
 1011244:	dd000315 	stw	r20,12(sp)
 1011248:	003ee106 	br	1010dd0 <__udivdi3+0x9c>
 101124c:	2004943a 	slli	r2,r4,16
 1011250:	e5c8983a 	sll	r4,fp,r23
 1011254:	48ffffcc 	andi	r3,r9,65535
 1011258:	10c5883a 	add	r2,r2,r3
 101125c:	20bfc22e 	bgeu	r4,r2,1011168 <__udivdi3+0x434>
 1011260:	40bfffc4 	addi	r2,r8,-1
 1011264:	0009883a 	mov	r4,zero
 1011268:	003f1306 	br	1010eb8 <__udivdi3+0x184>
 101126c:	01400204 	movi	r5,8
 1011270:	2805883a 	mov	r2,r5
 1011274:	003f0306 	br	1010e84 <__udivdi3+0x150>
 1011278:	01400604 	movi	r5,24
 101127c:	2805883a 	mov	r2,r5
 1011280:	003f0006 	br	1010e84 <__udivdi3+0x150>
 1011284:	01400204 	movi	r5,8
 1011288:	2805883a 	mov	r2,r5
 101128c:	003ec206 	br	1010d98 <__udivdi3+0x64>
 1011290:	01400604 	movi	r5,24
 1011294:	2805883a 	mov	r2,r5
 1011298:	003ebf06 	br	1010d98 <__udivdi3+0x64>
 101129c:	01400204 	movi	r5,8
 10112a0:	2805883a 	mov	r2,r5
 10112a4:	003f1706 	br	1010f04 <__udivdi3+0x1d0>
 10112a8:	01400604 	movi	r5,24
 10112ac:	2805883a 	mov	r2,r5
 10112b0:	003f1406 	br	1010f04 <__udivdi3+0x1d0>
 10112b4:	89ff962e 	bgeu	r17,r7,1011110 <__udivdi3+0x3dc>
 10112b8:	8d63883a 	add	r17,r17,r21
 10112bc:	843fffc4 	addi	r16,r16,-1
 10112c0:	003f9306 	br	1011110 <__udivdi3+0x3dc>
 10112c4:	147f802e 	bgeu	r2,r17,10110c8 <__udivdi3+0x394>
 10112c8:	a53fffc4 	addi	r20,r20,-1
 10112cc:	1545883a 	add	r2,r2,r21
 10112d0:	003f7d06 	br	10110c8 <__udivdi3+0x394>
 10112d4:	a53fffc4 	addi	r20,r20,-1
 10112d8:	003ede06 	br	1010e54 <__udivdi3+0x120>
 10112dc:	b5bfffc4 	addi	r22,r22,-1
 10112e0:	1405883a 	add	r2,r2,r16
 10112e4:	003f2806 	br	1010f88 <__udivdi3+0x254>
 10112e8:	a53fffc4 	addi	r20,r20,-1
 10112ec:	003f3706 	br	1010fcc <__udivdi3+0x298>
 10112f0:	147fbb2e 	bgeu	r2,r17,10111e0 <__udivdi3+0x4ac>
 10112f4:	297fffc4 	addi	r5,r5,-1
 10112f8:	1405883a 	add	r2,r2,r16
 10112fc:	d9400415 	stw	r5,16(sp)
 1011300:	003fb706 	br	10111e0 <__udivdi3+0x4ac>
 1011304:	b5bfffc4 	addi	r22,r22,-1
 1011308:	1405883a 	add	r2,r2,r16
 101130c:	003ec006 	br	1010e10 <__udivdi3+0xdc>

01011310 <__umoddi3>:
 1011310:	defff104 	addi	sp,sp,-60
 1011314:	dd800b15 	stw	r22,44(sp)
 1011318:	dd000915 	stw	r20,36(sp)
 101131c:	dc000515 	stw	r16,20(sp)
 1011320:	dfc00e15 	stw	ra,56(sp)
 1011324:	df000d15 	stw	fp,52(sp)
 1011328:	ddc00c15 	stw	r23,48(sp)
 101132c:	dd400a15 	stw	r21,40(sp)
 1011330:	dcc00815 	stw	r19,32(sp)
 1011334:	dc800715 	stw	r18,28(sp)
 1011338:	dc400615 	stw	r17,24(sp)
 101133c:	3021883a 	mov	r16,r6
 1011340:	202d883a 	mov	r22,r4
 1011344:	2829883a 	mov	r20,r5
 1011348:	38002b1e 	bne	r7,zero,10113f8 <__umoddi3+0xe8>
 101134c:	29805036 	bltu	r5,r6,1011490 <__umoddi3+0x180>
 1011350:	30008a26 	beq	r6,zero,101157c <__umoddi3+0x26c>
 1011354:	00bfffd4 	movui	r2,65535
 1011358:	14008236 	bltu	r2,r16,1011564 <__umoddi3+0x254>
 101135c:	00803fc4 	movi	r2,255
 1011360:	14013636 	bltu	r2,r16,101183c <__umoddi3+0x52c>
 1011364:	000b883a 	mov	r5,zero
 1011368:	0005883a 	mov	r2,zero
 101136c:	8084d83a 	srl	r2,r16,r2
 1011370:	010040b4 	movhi	r4,258
 1011374:	213d6b04 	addi	r4,r4,-2644
 1011378:	01800804 	movi	r6,32
 101137c:	1105883a 	add	r2,r2,r4
 1011380:	10c00003 	ldbu	r3,0(r2)
 1011384:	28c7883a 	add	r3,r5,r3
 1011388:	30efc83a 	sub	r23,r6,r3
 101138c:	b800941e 	bne	r23,zero,10115e0 <__umoddi3+0x2d0>
 1011390:	802ad43a 	srli	r21,r16,16
 1011394:	a423c83a 	sub	r17,r20,r16
 1011398:	0039883a 	mov	fp,zero
 101139c:	853fffcc 	andi	r20,r16,65535
 10113a0:	8809883a 	mov	r4,r17
 10113a4:	a80b883a 	mov	r5,r21
 10113a8:	1012b280 	call	1012b28 <__udivsi3>
 10113ac:	8809883a 	mov	r4,r17
 10113b0:	a80b883a 	mov	r5,r21
 10113b4:	a0a3383a 	mul	r17,r20,r2
 10113b8:	1012b300 	call	1012b30 <__umodsi3>
 10113bc:	1004943a 	slli	r2,r2,16
 10113c0:	b006d43a 	srli	r3,r22,16
 10113c4:	10c4b03a 	or	r2,r2,r3
 10113c8:	1440032e 	bgeu	r2,r17,10113d8 <__umoddi3+0xc8>
 10113cc:	1405883a 	add	r2,r2,r16
 10113d0:	14000136 	bltu	r2,r16,10113d8 <__umoddi3+0xc8>
 10113d4:	14413536 	bltu	r2,r17,10118ac <__umoddi3+0x59c>
 10113d8:	1463c83a 	sub	r17,r2,r17
 10113dc:	8809883a 	mov	r4,r17
 10113e0:	a80b883a 	mov	r5,r21
 10113e4:	1012b280 	call	1012b28 <__udivsi3>
 10113e8:	8809883a 	mov	r4,r17
 10113ec:	a0a3383a 	mul	r17,r20,r2
 10113f0:	a80b883a 	mov	r5,r21
 10113f4:	00004d06 	br	101152c <__umoddi3+0x21c>
 10113f8:	380d883a 	mov	r6,r7
 10113fc:	29c0102e 	bgeu	r5,r7,1011440 <__umoddi3+0x130>
 1011400:	2011883a 	mov	r8,r4
 1011404:	2813883a 	mov	r9,r5
 1011408:	4005883a 	mov	r2,r8
 101140c:	4807883a 	mov	r3,r9
 1011410:	dfc00e17 	ldw	ra,56(sp)
 1011414:	df000d17 	ldw	fp,52(sp)
 1011418:	ddc00c17 	ldw	r23,48(sp)
 101141c:	dd800b17 	ldw	r22,44(sp)
 1011420:	dd400a17 	ldw	r21,40(sp)
 1011424:	dd000917 	ldw	r20,36(sp)
 1011428:	dcc00817 	ldw	r19,32(sp)
 101142c:	dc800717 	ldw	r18,28(sp)
 1011430:	dc400617 	ldw	r17,24(sp)
 1011434:	dc000517 	ldw	r16,20(sp)
 1011438:	dec00f04 	addi	sp,sp,60
 101143c:	f800283a 	ret
 1011440:	00bfffd4 	movui	r2,65535
 1011444:	11c05a36 	bltu	r2,r7,10115b0 <__umoddi3+0x2a0>
 1011448:	00803fc4 	movi	r2,255
 101144c:	11c0fe36 	bltu	r2,r7,1011848 <__umoddi3+0x538>
 1011450:	000b883a 	mov	r5,zero
 1011454:	0005883a 	mov	r2,zero
 1011458:	3084d83a 	srl	r2,r6,r2
 101145c:	010040b4 	movhi	r4,258
 1011460:	213d6b04 	addi	r4,r4,-2644
 1011464:	01c00804 	movi	r7,32
 1011468:	1105883a 	add	r2,r2,r4
 101146c:	10c00003 	ldbu	r3,0(r2)
 1011470:	28c7883a 	add	r3,r5,r3
 1011474:	38ebc83a 	sub	r21,r7,r3
 1011478:	a800851e 	bne	r21,zero,1011690 <__umoddi3+0x380>
 101147c:	35005236 	bltu	r6,r20,10115c8 <__umoddi3+0x2b8>
 1011480:	b400512e 	bgeu	r22,r16,10115c8 <__umoddi3+0x2b8>
 1011484:	b011883a 	mov	r8,r22
 1011488:	a013883a 	mov	r9,r20
 101148c:	003fde06 	br	1011408 <__umoddi3+0xf8>
 1011490:	00bfffd4 	movui	r2,65535
 1011494:	11804036 	bltu	r2,r6,1011598 <__umoddi3+0x288>
 1011498:	00803fc4 	movi	r2,255
 101149c:	1180ed36 	bltu	r2,r6,1011854 <__umoddi3+0x544>
 10114a0:	000b883a 	mov	r5,zero
 10114a4:	0005883a 	mov	r2,zero
 10114a8:	8084d83a 	srl	r2,r16,r2
 10114ac:	010040b4 	movhi	r4,258
 10114b0:	213d6b04 	addi	r4,r4,-2644
 10114b4:	01800804 	movi	r6,32
 10114b8:	1105883a 	add	r2,r2,r4
 10114bc:	10c00003 	ldbu	r3,0(r2)
 10114c0:	28c7883a 	add	r3,r5,r3
 10114c4:	30c7c83a 	sub	r3,r6,r3
 10114c8:	1800bf1e 	bne	r3,zero,10117c8 <__umoddi3+0x4b8>
 10114cc:	0039883a 	mov	fp,zero
 10114d0:	802ad43a 	srli	r21,r16,16
 10114d4:	a009883a 	mov	r4,r20
 10114d8:	85ffffcc 	andi	r23,r16,65535
 10114dc:	a80b883a 	mov	r5,r21
 10114e0:	1012b280 	call	1012b28 <__udivsi3>
 10114e4:	a009883a 	mov	r4,r20
 10114e8:	a80b883a 	mov	r5,r21
 10114ec:	b8a3383a 	mul	r17,r23,r2
 10114f0:	1012b300 	call	1012b30 <__umodsi3>
 10114f4:	1004943a 	slli	r2,r2,16
 10114f8:	b006d43a 	srli	r3,r22,16
 10114fc:	10c4b03a 	or	r2,r2,r3
 1011500:	1440032e 	bgeu	r2,r17,1011510 <__umoddi3+0x200>
 1011504:	1405883a 	add	r2,r2,r16
 1011508:	14000136 	bltu	r2,r16,1011510 <__umoddi3+0x200>
 101150c:	1440e536 	bltu	r2,r17,10118a4 <__umoddi3+0x594>
 1011510:	1463c83a 	sub	r17,r2,r17
 1011514:	8809883a 	mov	r4,r17
 1011518:	a80b883a 	mov	r5,r21
 101151c:	1012b280 	call	1012b28 <__udivsi3>
 1011520:	8809883a 	mov	r4,r17
 1011524:	b8a3383a 	mul	r17,r23,r2
 1011528:	a80b883a 	mov	r5,r21
 101152c:	1012b300 	call	1012b30 <__umodsi3>
 1011530:	1004943a 	slli	r2,r2,16
 1011534:	b0ffffcc 	andi	r3,r22,65535
 1011538:	10c4b03a 	or	r2,r2,r3
 101153c:	1440042e 	bgeu	r2,r17,1011550 <__umoddi3+0x240>
 1011540:	1405883a 	add	r2,r2,r16
 1011544:	14000236 	bltu	r2,r16,1011550 <__umoddi3+0x240>
 1011548:	1440012e 	bgeu	r2,r17,1011550 <__umoddi3+0x240>
 101154c:	1405883a 	add	r2,r2,r16
 1011550:	1445c83a 	sub	r2,r2,r17
 1011554:	1724d83a 	srl	r18,r2,fp
 1011558:	0013883a 	mov	r9,zero
 101155c:	9011883a 	mov	r8,r18
 1011560:	003fa906 	br	1011408 <__umoddi3+0xf8>
 1011564:	00804034 	movhi	r2,256
 1011568:	10bfffc4 	addi	r2,r2,-1
 101156c:	1400b036 	bltu	r2,r16,1011830 <__umoddi3+0x520>
 1011570:	01400404 	movi	r5,16
 1011574:	2805883a 	mov	r2,r5
 1011578:	003f7c06 	br	101136c <__umoddi3+0x5c>
 101157c:	01000044 	movi	r4,1
 1011580:	000b883a 	mov	r5,zero
 1011584:	1012b280 	call	1012b28 <__udivsi3>
 1011588:	1021883a 	mov	r16,r2
 101158c:	00bfffd4 	movui	r2,65535
 1011590:	143ff436 	bltu	r2,r16,1011564 <__umoddi3+0x254>
 1011594:	003f7106 	br	101135c <__umoddi3+0x4c>
 1011598:	00804034 	movhi	r2,256
 101159c:	10bfffc4 	addi	r2,r2,-1
 10115a0:	1180af36 	bltu	r2,r6,1011860 <__umoddi3+0x550>
 10115a4:	01400404 	movi	r5,16
 10115a8:	2805883a 	mov	r2,r5
 10115ac:	003fbe06 	br	10114a8 <__umoddi3+0x198>
 10115b0:	00804034 	movhi	r2,256
 10115b4:	10bfffc4 	addi	r2,r2,-1
 10115b8:	11c0ac36 	bltu	r2,r7,101186c <__umoddi3+0x55c>
 10115bc:	01400404 	movi	r5,16
 10115c0:	2805883a 	mov	r2,r5
 10115c4:	003fa406 	br	1011458 <__umoddi3+0x148>
 10115c8:	b409c83a 	sub	r4,r22,r16
 10115cc:	b105803a 	cmpltu	r2,r22,r4
 10115d0:	a187c83a 	sub	r3,r20,r6
 10115d4:	18a9c83a 	sub	r20,r3,r2
 10115d8:	202d883a 	mov	r22,r4
 10115dc:	003fa906 	br	1011484 <__umoddi3+0x174>
 10115e0:	85e0983a 	sll	r16,r16,r23
 10115e4:	35c5c83a 	sub	r2,r6,r23
 10115e8:	a0a2d83a 	srl	r17,r20,r2
 10115ec:	802ad43a 	srli	r21,r16,16
 10115f0:	b084d83a 	srl	r2,r22,r2
 10115f4:	a5c6983a 	sll	r3,r20,r23
 10115f8:	8809883a 	mov	r4,r17
 10115fc:	a80b883a 	mov	r5,r21
 1011600:	1886b03a 	or	r3,r3,r2
 1011604:	d8c00115 	stw	r3,4(sp)
 1011608:	853fffcc 	andi	r20,r16,65535
 101160c:	1012b280 	call	1012b28 <__udivsi3>
 1011610:	8809883a 	mov	r4,r17
 1011614:	a80b883a 	mov	r5,r21
 1011618:	a0a3383a 	mul	r17,r20,r2
 101161c:	1012b300 	call	1012b30 <__umodsi3>
 1011620:	d9000117 	ldw	r4,4(sp)
 1011624:	1004943a 	slli	r2,r2,16
 1011628:	b839883a 	mov	fp,r23
 101162c:	2006d43a 	srli	r3,r4,16
 1011630:	10c4b03a 	or	r2,r2,r3
 1011634:	1440022e 	bgeu	r2,r17,1011640 <__umoddi3+0x330>
 1011638:	1405883a 	add	r2,r2,r16
 101163c:	1400962e 	bgeu	r2,r16,1011898 <__umoddi3+0x588>
 1011640:	1463c83a 	sub	r17,r2,r17
 1011644:	8809883a 	mov	r4,r17
 1011648:	a80b883a 	mov	r5,r21
 101164c:	1012b280 	call	1012b28 <__udivsi3>
 1011650:	8809883a 	mov	r4,r17
 1011654:	a80b883a 	mov	r5,r21
 1011658:	a0a3383a 	mul	r17,r20,r2
 101165c:	1012b300 	call	1012b30 <__umodsi3>
 1011660:	d9400117 	ldw	r5,4(sp)
 1011664:	1004943a 	slli	r2,r2,16
 1011668:	28ffffcc 	andi	r3,r5,65535
 101166c:	10c4b03a 	or	r2,r2,r3
 1011670:	1440042e 	bgeu	r2,r17,1011684 <__umoddi3+0x374>
 1011674:	1405883a 	add	r2,r2,r16
 1011678:	14000236 	bltu	r2,r16,1011684 <__umoddi3+0x374>
 101167c:	1440012e 	bgeu	r2,r17,1011684 <__umoddi3+0x374>
 1011680:	1405883a 	add	r2,r2,r16
 1011684:	b5ec983a 	sll	r22,r22,r23
 1011688:	1463c83a 	sub	r17,r2,r17
 101168c:	003f4406 	br	10113a0 <__umoddi3+0x90>
 1011690:	3d4fc83a 	sub	r7,r7,r21
 1011694:	3546983a 	sll	r3,r6,r21
 1011698:	81c4d83a 	srl	r2,r16,r7
 101169c:	a1e2d83a 	srl	r17,r20,r7
 10116a0:	a54c983a 	sll	r6,r20,r21
 10116a4:	18aeb03a 	or	r23,r3,r2
 10116a8:	b828d43a 	srli	r20,r23,16
 10116ac:	b1c4d83a 	srl	r2,r22,r7
 10116b0:	8809883a 	mov	r4,r17
 10116b4:	a00b883a 	mov	r5,r20
 10116b8:	308cb03a 	or	r6,r6,r2
 10116bc:	d9c00315 	stw	r7,12(sp)
 10116c0:	d9800215 	stw	r6,8(sp)
 10116c4:	1012b280 	call	1012b28 <__udivsi3>
 10116c8:	8809883a 	mov	r4,r17
 10116cc:	a00b883a 	mov	r5,r20
 10116d0:	1039883a 	mov	fp,r2
 10116d4:	1012b300 	call	1012b30 <__umodsi3>
 10116d8:	b8ffffcc 	andi	r3,r23,65535
 10116dc:	d8c00415 	stw	r3,16(sp)
 10116e0:	d9000217 	ldw	r4,8(sp)
 10116e4:	d9400417 	ldw	r5,16(sp)
 10116e8:	1004943a 	slli	r2,r2,16
 10116ec:	2006d43a 	srli	r3,r4,16
 10116f0:	8560983a 	sll	r16,r16,r21
 10116f4:	2f23383a 	mul	r17,r5,fp
 10116f8:	10c4b03a 	or	r2,r2,r3
 10116fc:	dc000015 	stw	r16,0(sp)
 1011700:	b56c983a 	sll	r22,r22,r21
 1011704:	1440032e 	bgeu	r2,r17,1011714 <__umoddi3+0x404>
 1011708:	15c5883a 	add	r2,r2,r23
 101170c:	e73fffc4 	addi	fp,fp,-1
 1011710:	15c05d2e 	bgeu	r2,r23,1011888 <__umoddi3+0x578>
 1011714:	1463c83a 	sub	r17,r2,r17
 1011718:	8809883a 	mov	r4,r17
 101171c:	a00b883a 	mov	r5,r20
 1011720:	1012b280 	call	1012b28 <__udivsi3>
 1011724:	8809883a 	mov	r4,r17
 1011728:	a00b883a 	mov	r5,r20
 101172c:	1021883a 	mov	r16,r2
 1011730:	1012b300 	call	1012b30 <__umodsi3>
 1011734:	d8c00417 	ldw	r3,16(sp)
 1011738:	d9000217 	ldw	r4,8(sp)
 101173c:	1004943a 	slli	r2,r2,16
 1011740:	1c23383a 	mul	r17,r3,r16
 1011744:	20ffffcc 	andi	r3,r4,65535
 1011748:	10ceb03a 	or	r7,r2,r3
 101174c:	3c40032e 	bgeu	r7,r17,101175c <__umoddi3+0x44c>
 1011750:	3dcf883a 	add	r7,r7,r23
 1011754:	843fffc4 	addi	r16,r16,-1
 1011758:	3dc0472e 	bgeu	r7,r23,1011878 <__umoddi3+0x568>
 101175c:	e004943a 	slli	r2,fp,16
 1011760:	d9400017 	ldw	r5,0(sp)
 1011764:	3c4fc83a 	sub	r7,r7,r17
 1011768:	8084b03a 	or	r2,r16,r2
 101176c:	28ffffcc 	andi	r3,r5,65535
 1011770:	280cd43a 	srli	r6,r5,16
 1011774:	100ad43a 	srli	r5,r2,16
 1011778:	10bfffcc 	andi	r2,r2,65535
 101177c:	10d1383a 	mul	r8,r2,r3
 1011780:	28c7383a 	mul	r3,r5,r3
 1011784:	1185383a 	mul	r2,r2,r6
 1011788:	4008d43a 	srli	r4,r8,16
 101178c:	298b383a 	mul	r5,r5,r6
 1011790:	10c5883a 	add	r2,r2,r3
 1011794:	2089883a 	add	r4,r4,r2
 1011798:	20c0022e 	bgeu	r4,r3,10117a4 <__umoddi3+0x494>
 101179c:	00800074 	movhi	r2,1
 10117a0:	288b883a 	add	r5,r5,r2
 10117a4:	2004d43a 	srli	r2,r4,16
 10117a8:	2008943a 	slli	r4,r4,16
 10117ac:	40ffffcc 	andi	r3,r8,65535
 10117b0:	288b883a 	add	r5,r5,r2
 10117b4:	20c9883a 	add	r4,r4,r3
 10117b8:	39400b36 	bltu	r7,r5,10117e8 <__umoddi3+0x4d8>
 10117bc:	39403d26 	beq	r7,r5,10118b4 <__umoddi3+0x5a4>
 10117c0:	394bc83a 	sub	r5,r7,r5
 10117c4:	00000f06 	br	1011804 <__umoddi3+0x4f4>
 10117c8:	30c5c83a 	sub	r2,r6,r3
 10117cc:	1839883a 	mov	fp,r3
 10117d0:	b084d83a 	srl	r2,r22,r2
 10117d4:	a0c6983a 	sll	r3,r20,r3
 10117d8:	8720983a 	sll	r16,r16,fp
 10117dc:	b72c983a 	sll	r22,r22,fp
 10117e0:	18a8b03a 	or	r20,r3,r2
 10117e4:	003f3a06 	br	10114d0 <__umoddi3+0x1c0>
 10117e8:	d8c00017 	ldw	r3,0(sp)
 10117ec:	20c5c83a 	sub	r2,r4,r3
 10117f0:	2089803a 	cmpltu	r4,r4,r2
 10117f4:	2dc7c83a 	sub	r3,r5,r23
 10117f8:	1907c83a 	sub	r3,r3,r4
 10117fc:	38cbc83a 	sub	r5,r7,r3
 1011800:	1009883a 	mov	r4,r2
 1011804:	b105c83a 	sub	r2,r22,r4
 1011808:	b087803a 	cmpltu	r3,r22,r2
 101180c:	28c7c83a 	sub	r3,r5,r3
 1011810:	d9400317 	ldw	r5,12(sp)
 1011814:	1544d83a 	srl	r2,r2,r21
 1011818:	1948983a 	sll	r4,r3,r5
 101181c:	1d46d83a 	srl	r3,r3,r21
 1011820:	20a4b03a 	or	r18,r4,r2
 1011824:	9011883a 	mov	r8,r18
 1011828:	1813883a 	mov	r9,r3
 101182c:	003ef606 	br	1011408 <__umoddi3+0xf8>
 1011830:	01400604 	movi	r5,24
 1011834:	2805883a 	mov	r2,r5
 1011838:	003ecc06 	br	101136c <__umoddi3+0x5c>
 101183c:	01400204 	movi	r5,8
 1011840:	2805883a 	mov	r2,r5
 1011844:	003ec906 	br	101136c <__umoddi3+0x5c>
 1011848:	01400204 	movi	r5,8
 101184c:	2805883a 	mov	r2,r5
 1011850:	003f0106 	br	1011458 <__umoddi3+0x148>
 1011854:	01400204 	movi	r5,8
 1011858:	2805883a 	mov	r2,r5
 101185c:	003f1206 	br	10114a8 <__umoddi3+0x198>
 1011860:	01400604 	movi	r5,24
 1011864:	2805883a 	mov	r2,r5
 1011868:	003f0f06 	br	10114a8 <__umoddi3+0x198>
 101186c:	01400604 	movi	r5,24
 1011870:	2805883a 	mov	r2,r5
 1011874:	003ef806 	br	1011458 <__umoddi3+0x148>
 1011878:	3c7fb82e 	bgeu	r7,r17,101175c <__umoddi3+0x44c>
 101187c:	843fffc4 	addi	r16,r16,-1
 1011880:	3dcf883a 	add	r7,r7,r23
 1011884:	003fb506 	br	101175c <__umoddi3+0x44c>
 1011888:	147fa22e 	bgeu	r2,r17,1011714 <__umoddi3+0x404>
 101188c:	e73fffc4 	addi	fp,fp,-1
 1011890:	15c5883a 	add	r2,r2,r23
 1011894:	003f9f06 	br	1011714 <__umoddi3+0x404>
 1011898:	147f692e 	bgeu	r2,r17,1011640 <__umoddi3+0x330>
 101189c:	1405883a 	add	r2,r2,r16
 10118a0:	003f6706 	br	1011640 <__umoddi3+0x330>
 10118a4:	1405883a 	add	r2,r2,r16
 10118a8:	003f1906 	br	1011510 <__umoddi3+0x200>
 10118ac:	1405883a 	add	r2,r2,r16
 10118b0:	003ec906 	br	10113d8 <__umoddi3+0xc8>
 10118b4:	b13fcc36 	bltu	r22,r4,10117e8 <__umoddi3+0x4d8>
 10118b8:	000b883a 	mov	r5,zero
 10118bc:	003fd106 	br	1011804 <__umoddi3+0x4f4>

010118c0 <_fpadd_parts>:
 10118c0:	defff804 	addi	sp,sp,-32
 10118c4:	dcc00315 	stw	r19,12(sp)
 10118c8:	2027883a 	mov	r19,r4
 10118cc:	21000017 	ldw	r4,0(r4)
 10118d0:	00c00044 	movi	r3,1
 10118d4:	dd400515 	stw	r21,20(sp)
 10118d8:	dd000415 	stw	r20,16(sp)
 10118dc:	ddc00715 	stw	r23,28(sp)
 10118e0:	dd800615 	stw	r22,24(sp)
 10118e4:	dc800215 	stw	r18,8(sp)
 10118e8:	dc400115 	stw	r17,4(sp)
 10118ec:	dc000015 	stw	r16,0(sp)
 10118f0:	282b883a 	mov	r21,r5
 10118f4:	3029883a 	mov	r20,r6
 10118f8:	1900632e 	bgeu	r3,r4,1011a88 <_fpadd_parts+0x1c8>
 10118fc:	28800017 	ldw	r2,0(r5)
 1011900:	1880812e 	bgeu	r3,r2,1011b08 <_fpadd_parts+0x248>
 1011904:	00c00104 	movi	r3,4
 1011908:	20c0dc26 	beq	r4,r3,1011c7c <_fpadd_parts+0x3bc>
 101190c:	10c07e26 	beq	r2,r3,1011b08 <_fpadd_parts+0x248>
 1011910:	00c00084 	movi	r3,2
 1011914:	10c06726 	beq	r2,r3,1011ab4 <_fpadd_parts+0x1f4>
 1011918:	20c07b26 	beq	r4,r3,1011b08 <_fpadd_parts+0x248>
 101191c:	9dc00217 	ldw	r23,8(r19)
 1011920:	28c00217 	ldw	r3,8(r5)
 1011924:	9c400317 	ldw	r17,12(r19)
 1011928:	2bc00317 	ldw	r15,12(r5)
 101192c:	b8cdc83a 	sub	r6,r23,r3
 1011930:	9c800417 	ldw	r18,16(r19)
 1011934:	2c000417 	ldw	r16,16(r5)
 1011938:	3009883a 	mov	r4,r6
 101193c:	30009716 	blt	r6,zero,1011b9c <_fpadd_parts+0x2dc>
 1011940:	00800fc4 	movi	r2,63
 1011944:	11806b16 	blt	r2,r6,1011af4 <_fpadd_parts+0x234>
 1011948:	0100a40e 	bge	zero,r4,1011bdc <_fpadd_parts+0x31c>
 101194c:	35bff804 	addi	r22,r6,-32
 1011950:	b000bc16 	blt	r22,zero,1011c44 <_fpadd_parts+0x384>
 1011954:	8596d83a 	srl	r11,r16,r22
 1011958:	0019883a 	mov	r12,zero
 101195c:	0013883a 	mov	r9,zero
 1011960:	01000044 	movi	r4,1
 1011964:	0015883a 	mov	r10,zero
 1011968:	b000be16 	blt	r22,zero,1011c64 <_fpadd_parts+0x3a4>
 101196c:	2590983a 	sll	r8,r4,r22
 1011970:	000f883a 	mov	r7,zero
 1011974:	00bfffc4 	movi	r2,-1
 1011978:	3889883a 	add	r4,r7,r2
 101197c:	408b883a 	add	r5,r8,r2
 1011980:	21cd803a 	cmpltu	r6,r4,r7
 1011984:	314b883a 	add	r5,r6,r5
 1011988:	7904703a 	and	r2,r15,r4
 101198c:	8146703a 	and	r3,r16,r5
 1011990:	10c4b03a 	or	r2,r2,r3
 1011994:	10000226 	beq	r2,zero,10119a0 <_fpadd_parts+0xe0>
 1011998:	02400044 	movi	r9,1
 101199c:	0015883a 	mov	r10,zero
 10119a0:	5a5eb03a 	or	r15,r11,r9
 10119a4:	62a0b03a 	or	r16,r12,r10
 10119a8:	99400117 	ldw	r5,4(r19)
 10119ac:	a8800117 	ldw	r2,4(r21)
 10119b0:	28806e26 	beq	r5,r2,1011b6c <_fpadd_parts+0x2ac>
 10119b4:	28006626 	beq	r5,zero,1011b50 <_fpadd_parts+0x290>
 10119b8:	7c45c83a 	sub	r2,r15,r17
 10119bc:	7889803a 	cmpltu	r4,r15,r2
 10119c0:	8487c83a 	sub	r3,r16,r18
 10119c4:	1909c83a 	sub	r4,r3,r4
 10119c8:	100d883a 	mov	r6,r2
 10119cc:	200f883a 	mov	r7,r4
 10119d0:	38007716 	blt	r7,zero,1011bb0 <_fpadd_parts+0x2f0>
 10119d4:	a5c00215 	stw	r23,8(r20)
 10119d8:	a1c00415 	stw	r7,16(r20)
 10119dc:	a0000115 	stw	zero,4(r20)
 10119e0:	a1800315 	stw	r6,12(r20)
 10119e4:	a2000317 	ldw	r8,12(r20)
 10119e8:	a2400417 	ldw	r9,16(r20)
 10119ec:	00bfffc4 	movi	r2,-1
 10119f0:	408b883a 	add	r5,r8,r2
 10119f4:	2a09803a 	cmpltu	r4,r5,r8
 10119f8:	488d883a 	add	r6,r9,r2
 10119fc:	01c40034 	movhi	r7,4096
 1011a00:	39ffffc4 	addi	r7,r7,-1
 1011a04:	218d883a 	add	r6,r4,r6
 1011a08:	39801736 	bltu	r7,r6,1011a68 <_fpadd_parts+0x1a8>
 1011a0c:	31c06526 	beq	r6,r7,1011ba4 <_fpadd_parts+0x2e4>
 1011a10:	a3000217 	ldw	r12,8(r20)
 1011a14:	4209883a 	add	r4,r8,r8
 1011a18:	00bfffc4 	movi	r2,-1
 1011a1c:	220f803a 	cmpltu	r7,r4,r8
 1011a20:	4a4b883a 	add	r5,r9,r9
 1011a24:	394f883a 	add	r7,r7,r5
 1011a28:	2095883a 	add	r10,r4,r2
 1011a2c:	3897883a 	add	r11,r7,r2
 1011a30:	510d803a 	cmpltu	r6,r10,r4
 1011a34:	6099883a 	add	r12,r12,r2
 1011a38:	32d7883a 	add	r11,r6,r11
 1011a3c:	00840034 	movhi	r2,4096
 1011a40:	10bfffc4 	addi	r2,r2,-1
 1011a44:	2011883a 	mov	r8,r4
 1011a48:	3813883a 	mov	r9,r7
 1011a4c:	a1000315 	stw	r4,12(r20)
 1011a50:	a1c00415 	stw	r7,16(r20)
 1011a54:	a3000215 	stw	r12,8(r20)
 1011a58:	12c00336 	bltu	r2,r11,1011a68 <_fpadd_parts+0x1a8>
 1011a5c:	58bfed1e 	bne	r11,r2,1011a14 <_fpadd_parts+0x154>
 1011a60:	00bfff84 	movi	r2,-2
 1011a64:	12bfeb2e 	bgeu	r2,r10,1011a14 <_fpadd_parts+0x154>
 1011a68:	a2800417 	ldw	r10,16(r20)
 1011a6c:	008000c4 	movi	r2,3
 1011a70:	00c80034 	movhi	r3,8192
 1011a74:	18ffffc4 	addi	r3,r3,-1
 1011a78:	a2400317 	ldw	r9,12(r20)
 1011a7c:	a0800015 	stw	r2,0(r20)
 1011a80:	1a802336 	bltu	r3,r10,1011b10 <_fpadd_parts+0x250>
 1011a84:	a027883a 	mov	r19,r20
 1011a88:	9805883a 	mov	r2,r19
 1011a8c:	ddc00717 	ldw	r23,28(sp)
 1011a90:	dd800617 	ldw	r22,24(sp)
 1011a94:	dd400517 	ldw	r21,20(sp)
 1011a98:	dd000417 	ldw	r20,16(sp)
 1011a9c:	dcc00317 	ldw	r19,12(sp)
 1011aa0:	dc800217 	ldw	r18,8(sp)
 1011aa4:	dc400117 	ldw	r17,4(sp)
 1011aa8:	dc000017 	ldw	r16,0(sp)
 1011aac:	dec00804 	addi	sp,sp,32
 1011ab0:	f800283a 	ret
 1011ab4:	20fff41e 	bne	r4,r3,1011a88 <_fpadd_parts+0x1c8>
 1011ab8:	31000015 	stw	r4,0(r6)
 1011abc:	98800117 	ldw	r2,4(r19)
 1011ac0:	30800115 	stw	r2,4(r6)
 1011ac4:	98c00217 	ldw	r3,8(r19)
 1011ac8:	30c00215 	stw	r3,8(r6)
 1011acc:	98800317 	ldw	r2,12(r19)
 1011ad0:	30800315 	stw	r2,12(r6)
 1011ad4:	98c00417 	ldw	r3,16(r19)
 1011ad8:	30c00415 	stw	r3,16(r6)
 1011adc:	98800117 	ldw	r2,4(r19)
 1011ae0:	28c00117 	ldw	r3,4(r5)
 1011ae4:	3027883a 	mov	r19,r6
 1011ae8:	10c4703a 	and	r2,r2,r3
 1011aec:	30800115 	stw	r2,4(r6)
 1011af0:	003fe506 	br	1011a88 <_fpadd_parts+0x1c8>
 1011af4:	1dc02616 	blt	r3,r23,1011b90 <_fpadd_parts+0x2d0>
 1011af8:	0023883a 	mov	r17,zero
 1011afc:	182f883a 	mov	r23,r3
 1011b00:	0025883a 	mov	r18,zero
 1011b04:	003fa806 	br	10119a8 <_fpadd_parts+0xe8>
 1011b08:	a827883a 	mov	r19,r21
 1011b0c:	003fde06 	br	1011a88 <_fpadd_parts+0x1c8>
 1011b10:	01800044 	movi	r6,1
 1011b14:	500497fa 	slli	r2,r10,31
 1011b18:	4808d07a 	srli	r4,r9,1
 1011b1c:	518ad83a 	srl	r5,r10,r6
 1011b20:	a2000217 	ldw	r8,8(r20)
 1011b24:	1108b03a 	or	r4,r2,r4
 1011b28:	0007883a 	mov	r3,zero
 1011b2c:	4984703a 	and	r2,r9,r6
 1011b30:	208cb03a 	or	r6,r4,r2
 1011b34:	28ceb03a 	or	r7,r5,r3
 1011b38:	42000044 	addi	r8,r8,1
 1011b3c:	a027883a 	mov	r19,r20
 1011b40:	a1c00415 	stw	r7,16(r20)
 1011b44:	a2000215 	stw	r8,8(r20)
 1011b48:	a1800315 	stw	r6,12(r20)
 1011b4c:	003fce06 	br	1011a88 <_fpadd_parts+0x1c8>
 1011b50:	8bc5c83a 	sub	r2,r17,r15
 1011b54:	8889803a 	cmpltu	r4,r17,r2
 1011b58:	9407c83a 	sub	r3,r18,r16
 1011b5c:	1909c83a 	sub	r4,r3,r4
 1011b60:	100d883a 	mov	r6,r2
 1011b64:	200f883a 	mov	r7,r4
 1011b68:	003f9906 	br	10119d0 <_fpadd_parts+0x110>
 1011b6c:	7c45883a 	add	r2,r15,r17
 1011b70:	13c9803a 	cmpltu	r4,r2,r15
 1011b74:	8487883a 	add	r3,r16,r18
 1011b78:	20c9883a 	add	r4,r4,r3
 1011b7c:	a1400115 	stw	r5,4(r20)
 1011b80:	a5c00215 	stw	r23,8(r20)
 1011b84:	a0800315 	stw	r2,12(r20)
 1011b88:	a1000415 	stw	r4,16(r20)
 1011b8c:	003fb606 	br	1011a68 <_fpadd_parts+0x1a8>
 1011b90:	001f883a 	mov	r15,zero
 1011b94:	0021883a 	mov	r16,zero
 1011b98:	003f8306 	br	10119a8 <_fpadd_parts+0xe8>
 1011b9c:	018dc83a 	sub	r6,zero,r6
 1011ba0:	003f6706 	br	1011940 <_fpadd_parts+0x80>
 1011ba4:	00bfff84 	movi	r2,-2
 1011ba8:	117faf36 	bltu	r2,r5,1011a68 <_fpadd_parts+0x1a8>
 1011bac:	003f9806 	br	1011a10 <_fpadd_parts+0x150>
 1011bb0:	0005883a 	mov	r2,zero
 1011bb4:	1189c83a 	sub	r4,r2,r6
 1011bb8:	1105803a 	cmpltu	r2,r2,r4
 1011bbc:	01cbc83a 	sub	r5,zero,r7
 1011bc0:	2885c83a 	sub	r2,r5,r2
 1011bc4:	01800044 	movi	r6,1
 1011bc8:	a1800115 	stw	r6,4(r20)
 1011bcc:	a5c00215 	stw	r23,8(r20)
 1011bd0:	a1000315 	stw	r4,12(r20)
 1011bd4:	a0800415 	stw	r2,16(r20)
 1011bd8:	003f8206 	br	10119e4 <_fpadd_parts+0x124>
 1011bdc:	203f7226 	beq	r4,zero,10119a8 <_fpadd_parts+0xe8>
 1011be0:	35bff804 	addi	r22,r6,-32
 1011be4:	b9af883a 	add	r23,r23,r6
 1011be8:	b0003116 	blt	r22,zero,1011cb0 <_fpadd_parts+0x3f0>
 1011bec:	959ad83a 	srl	r13,r18,r22
 1011bf0:	001d883a 	mov	r14,zero
 1011bf4:	000f883a 	mov	r7,zero
 1011bf8:	01000044 	movi	r4,1
 1011bfc:	0011883a 	mov	r8,zero
 1011c00:	b0002516 	blt	r22,zero,1011c98 <_fpadd_parts+0x3d8>
 1011c04:	2594983a 	sll	r10,r4,r22
 1011c08:	0013883a 	mov	r9,zero
 1011c0c:	00bfffc4 	movi	r2,-1
 1011c10:	4889883a 	add	r4,r9,r2
 1011c14:	508b883a 	add	r5,r10,r2
 1011c18:	224d803a 	cmpltu	r6,r4,r9
 1011c1c:	314b883a 	add	r5,r6,r5
 1011c20:	8904703a 	and	r2,r17,r4
 1011c24:	9146703a 	and	r3,r18,r5
 1011c28:	10c4b03a 	or	r2,r2,r3
 1011c2c:	10000226 	beq	r2,zero,1011c38 <_fpadd_parts+0x378>
 1011c30:	01c00044 	movi	r7,1
 1011c34:	0011883a 	mov	r8,zero
 1011c38:	69e2b03a 	or	r17,r13,r7
 1011c3c:	7224b03a 	or	r18,r14,r8
 1011c40:	003f5906 	br	10119a8 <_fpadd_parts+0xe8>
 1011c44:	8407883a 	add	r3,r16,r16
 1011c48:	008007c4 	movi	r2,31
 1011c4c:	1185c83a 	sub	r2,r2,r6
 1011c50:	1886983a 	sll	r3,r3,r2
 1011c54:	7996d83a 	srl	r11,r15,r6
 1011c58:	8198d83a 	srl	r12,r16,r6
 1011c5c:	1ad6b03a 	or	r11,r3,r11
 1011c60:	003f3e06 	br	101195c <_fpadd_parts+0x9c>
 1011c64:	2006d07a 	srli	r3,r4,1
 1011c68:	008007c4 	movi	r2,31
 1011c6c:	1185c83a 	sub	r2,r2,r6
 1011c70:	1890d83a 	srl	r8,r3,r2
 1011c74:	218e983a 	sll	r7,r4,r6
 1011c78:	003f3e06 	br	1011974 <_fpadd_parts+0xb4>
 1011c7c:	113f821e 	bne	r2,r4,1011a88 <_fpadd_parts+0x1c8>
 1011c80:	28c00117 	ldw	r3,4(r5)
 1011c84:	98800117 	ldw	r2,4(r19)
 1011c88:	10ff7f26 	beq	r2,r3,1011a88 <_fpadd_parts+0x1c8>
 1011c8c:	04c040b4 	movhi	r19,258
 1011c90:	9cfd6604 	addi	r19,r19,-2664
 1011c94:	003f7c06 	br	1011a88 <_fpadd_parts+0x1c8>
 1011c98:	2006d07a 	srli	r3,r4,1
 1011c9c:	008007c4 	movi	r2,31
 1011ca0:	1185c83a 	sub	r2,r2,r6
 1011ca4:	1894d83a 	srl	r10,r3,r2
 1011ca8:	2192983a 	sll	r9,r4,r6
 1011cac:	003fd706 	br	1011c0c <_fpadd_parts+0x34c>
 1011cb0:	9487883a 	add	r3,r18,r18
 1011cb4:	008007c4 	movi	r2,31
 1011cb8:	1185c83a 	sub	r2,r2,r6
 1011cbc:	1886983a 	sll	r3,r3,r2
 1011cc0:	899ad83a 	srl	r13,r17,r6
 1011cc4:	919cd83a 	srl	r14,r18,r6
 1011cc8:	1b5ab03a 	or	r13,r3,r13
 1011ccc:	003fc906 	br	1011bf4 <_fpadd_parts+0x334>

01011cd0 <__subdf3>:
 1011cd0:	deffea04 	addi	sp,sp,-88
 1011cd4:	dcc01415 	stw	r19,80(sp)
 1011cd8:	dcc00404 	addi	r19,sp,16
 1011cdc:	2011883a 	mov	r8,r4
 1011ce0:	2813883a 	mov	r9,r5
 1011ce4:	dc401315 	stw	r17,76(sp)
 1011ce8:	d809883a 	mov	r4,sp
 1011cec:	980b883a 	mov	r5,r19
 1011cf0:	dc400904 	addi	r17,sp,36
 1011cf4:	dfc01515 	stw	ra,84(sp)
 1011cf8:	da400115 	stw	r9,4(sp)
 1011cfc:	d9c00315 	stw	r7,12(sp)
 1011d00:	da000015 	stw	r8,0(sp)
 1011d04:	d9800215 	stw	r6,8(sp)
 1011d08:	1012f640 	call	1012f64 <__unpack_d>
 1011d0c:	d9000204 	addi	r4,sp,8
 1011d10:	880b883a 	mov	r5,r17
 1011d14:	1012f640 	call	1012f64 <__unpack_d>
 1011d18:	d8800a17 	ldw	r2,40(sp)
 1011d1c:	880b883a 	mov	r5,r17
 1011d20:	9809883a 	mov	r4,r19
 1011d24:	d9800e04 	addi	r6,sp,56
 1011d28:	1080005c 	xori	r2,r2,1
 1011d2c:	d8800a15 	stw	r2,40(sp)
 1011d30:	10118c00 	call	10118c0 <_fpadd_parts>
 1011d34:	1009883a 	mov	r4,r2
 1011d38:	1012c500 	call	1012c50 <__pack_d>
 1011d3c:	dfc01517 	ldw	ra,84(sp)
 1011d40:	dcc01417 	ldw	r19,80(sp)
 1011d44:	dc401317 	ldw	r17,76(sp)
 1011d48:	dec01604 	addi	sp,sp,88
 1011d4c:	f800283a 	ret

01011d50 <__adddf3>:
 1011d50:	deffea04 	addi	sp,sp,-88
 1011d54:	dcc01415 	stw	r19,80(sp)
 1011d58:	dcc00404 	addi	r19,sp,16
 1011d5c:	2011883a 	mov	r8,r4
 1011d60:	2813883a 	mov	r9,r5
 1011d64:	dc401315 	stw	r17,76(sp)
 1011d68:	d809883a 	mov	r4,sp
 1011d6c:	980b883a 	mov	r5,r19
 1011d70:	dc400904 	addi	r17,sp,36
 1011d74:	dfc01515 	stw	ra,84(sp)
 1011d78:	da400115 	stw	r9,4(sp)
 1011d7c:	d9c00315 	stw	r7,12(sp)
 1011d80:	da000015 	stw	r8,0(sp)
 1011d84:	d9800215 	stw	r6,8(sp)
 1011d88:	1012f640 	call	1012f64 <__unpack_d>
 1011d8c:	d9000204 	addi	r4,sp,8
 1011d90:	880b883a 	mov	r5,r17
 1011d94:	1012f640 	call	1012f64 <__unpack_d>
 1011d98:	d9800e04 	addi	r6,sp,56
 1011d9c:	9809883a 	mov	r4,r19
 1011da0:	880b883a 	mov	r5,r17
 1011da4:	10118c00 	call	10118c0 <_fpadd_parts>
 1011da8:	1009883a 	mov	r4,r2
 1011dac:	1012c500 	call	1012c50 <__pack_d>
 1011db0:	dfc01517 	ldw	ra,84(sp)
 1011db4:	dcc01417 	ldw	r19,80(sp)
 1011db8:	dc401317 	ldw	r17,76(sp)
 1011dbc:	dec01604 	addi	sp,sp,88
 1011dc0:	f800283a 	ret

01011dc4 <__muldf3>:
 1011dc4:	deffe004 	addi	sp,sp,-128
 1011dc8:	dc401815 	stw	r17,96(sp)
 1011dcc:	dc400404 	addi	r17,sp,16
 1011dd0:	2011883a 	mov	r8,r4
 1011dd4:	2813883a 	mov	r9,r5
 1011dd8:	dc001715 	stw	r16,92(sp)
 1011ddc:	d809883a 	mov	r4,sp
 1011de0:	880b883a 	mov	r5,r17
 1011de4:	dc000904 	addi	r16,sp,36
 1011de8:	dfc01f15 	stw	ra,124(sp)
 1011dec:	da400115 	stw	r9,4(sp)
 1011df0:	d9c00315 	stw	r7,12(sp)
 1011df4:	da000015 	stw	r8,0(sp)
 1011df8:	d9800215 	stw	r6,8(sp)
 1011dfc:	ddc01e15 	stw	r23,120(sp)
 1011e00:	dd801d15 	stw	r22,116(sp)
 1011e04:	dd401c15 	stw	r21,112(sp)
 1011e08:	dd001b15 	stw	r20,108(sp)
 1011e0c:	dcc01a15 	stw	r19,104(sp)
 1011e10:	dc801915 	stw	r18,100(sp)
 1011e14:	1012f640 	call	1012f64 <__unpack_d>
 1011e18:	d9000204 	addi	r4,sp,8
 1011e1c:	800b883a 	mov	r5,r16
 1011e20:	1012f640 	call	1012f64 <__unpack_d>
 1011e24:	d9000417 	ldw	r4,16(sp)
 1011e28:	00800044 	movi	r2,1
 1011e2c:	1100102e 	bgeu	r2,r4,1011e70 <__muldf3+0xac>
 1011e30:	d8c00917 	ldw	r3,36(sp)
 1011e34:	10c0062e 	bgeu	r2,r3,1011e50 <__muldf3+0x8c>
 1011e38:	00800104 	movi	r2,4
 1011e3c:	20800a26 	beq	r4,r2,1011e68 <__muldf3+0xa4>
 1011e40:	1880cc26 	beq	r3,r2,1012174 <__muldf3+0x3b0>
 1011e44:	00800084 	movi	r2,2
 1011e48:	20800926 	beq	r4,r2,1011e70 <__muldf3+0xac>
 1011e4c:	1880191e 	bne	r3,r2,1011eb4 <__muldf3+0xf0>
 1011e50:	d8c00a17 	ldw	r3,40(sp)
 1011e54:	d8800517 	ldw	r2,20(sp)
 1011e58:	8009883a 	mov	r4,r16
 1011e5c:	10c4c03a 	cmpne	r2,r2,r3
 1011e60:	d8800a15 	stw	r2,40(sp)
 1011e64:	00000706 	br	1011e84 <__muldf3+0xc0>
 1011e68:	00800084 	movi	r2,2
 1011e6c:	1880c326 	beq	r3,r2,101217c <__muldf3+0x3b8>
 1011e70:	d8800517 	ldw	r2,20(sp)
 1011e74:	d8c00a17 	ldw	r3,40(sp)
 1011e78:	8809883a 	mov	r4,r17
 1011e7c:	10c4c03a 	cmpne	r2,r2,r3
 1011e80:	d8800515 	stw	r2,20(sp)
 1011e84:	1012c500 	call	1012c50 <__pack_d>
 1011e88:	dfc01f17 	ldw	ra,124(sp)
 1011e8c:	ddc01e17 	ldw	r23,120(sp)
 1011e90:	dd801d17 	ldw	r22,116(sp)
 1011e94:	dd401c17 	ldw	r21,112(sp)
 1011e98:	dd001b17 	ldw	r20,108(sp)
 1011e9c:	dcc01a17 	ldw	r19,104(sp)
 1011ea0:	dc801917 	ldw	r18,100(sp)
 1011ea4:	dc401817 	ldw	r17,96(sp)
 1011ea8:	dc001717 	ldw	r16,92(sp)
 1011eac:	dec02004 	addi	sp,sp,128
 1011eb0:	f800283a 	ret
 1011eb4:	dd800717 	ldw	r22,28(sp)
 1011eb8:	dc800c17 	ldw	r18,48(sp)
 1011ebc:	002b883a 	mov	r21,zero
 1011ec0:	0023883a 	mov	r17,zero
 1011ec4:	a80b883a 	mov	r5,r21
 1011ec8:	b00d883a 	mov	r6,r22
 1011ecc:	880f883a 	mov	r7,r17
 1011ed0:	ddc00817 	ldw	r23,32(sp)
 1011ed4:	dcc00d17 	ldw	r19,52(sp)
 1011ed8:	9009883a 	mov	r4,r18
 1011edc:	1012b380 	call	1012b38 <__muldi3>
 1011ee0:	001b883a 	mov	r13,zero
 1011ee4:	680f883a 	mov	r7,r13
 1011ee8:	b009883a 	mov	r4,r22
 1011eec:	000b883a 	mov	r5,zero
 1011ef0:	980d883a 	mov	r6,r19
 1011ef4:	b82d883a 	mov	r22,r23
 1011ef8:	002f883a 	mov	r23,zero
 1011efc:	db401615 	stw	r13,88(sp)
 1011f00:	d8801315 	stw	r2,76(sp)
 1011f04:	d8c01415 	stw	r3,80(sp)
 1011f08:	dcc01515 	stw	r19,84(sp)
 1011f0c:	1012b380 	call	1012b38 <__muldi3>
 1011f10:	b00d883a 	mov	r6,r22
 1011f14:	000b883a 	mov	r5,zero
 1011f18:	9009883a 	mov	r4,r18
 1011f1c:	b80f883a 	mov	r7,r23
 1011f20:	1021883a 	mov	r16,r2
 1011f24:	1823883a 	mov	r17,r3
 1011f28:	1012b380 	call	1012b38 <__muldi3>
 1011f2c:	8085883a 	add	r2,r16,r2
 1011f30:	140d803a 	cmpltu	r6,r2,r16
 1011f34:	88c7883a 	add	r3,r17,r3
 1011f38:	30cd883a 	add	r6,r6,r3
 1011f3c:	1029883a 	mov	r20,r2
 1011f40:	302b883a 	mov	r21,r6
 1011f44:	da801317 	ldw	r10,76(sp)
 1011f48:	dac01417 	ldw	r11,80(sp)
 1011f4c:	db001517 	ldw	r12,84(sp)
 1011f50:	db401617 	ldw	r13,88(sp)
 1011f54:	3440612e 	bgeu	r6,r17,10120dc <__muldf3+0x318>
 1011f58:	0009883a 	mov	r4,zero
 1011f5c:	5105883a 	add	r2,r10,r4
 1011f60:	128d803a 	cmpltu	r6,r2,r10
 1011f64:	5d07883a 	add	r3,r11,r20
 1011f68:	30cd883a 	add	r6,r6,r3
 1011f6c:	0021883a 	mov	r16,zero
 1011f70:	04400044 	movi	r17,1
 1011f74:	1025883a 	mov	r18,r2
 1011f78:	3027883a 	mov	r19,r6
 1011f7c:	32c06236 	bltu	r6,r11,1012108 <__muldf3+0x344>
 1011f80:	59807a26 	beq	r11,r6,101216c <__muldf3+0x3a8>
 1011f84:	680b883a 	mov	r5,r13
 1011f88:	b80f883a 	mov	r7,r23
 1011f8c:	6009883a 	mov	r4,r12
 1011f90:	b00d883a 	mov	r6,r22
 1011f94:	1012b380 	call	1012b38 <__muldi3>
 1011f98:	1009883a 	mov	r4,r2
 1011f9c:	000f883a 	mov	r7,zero
 1011fa0:	1545883a 	add	r2,r2,r21
 1011fa4:	1111803a 	cmpltu	r8,r2,r4
 1011fa8:	19c7883a 	add	r3,r3,r7
 1011fac:	40c7883a 	add	r3,r8,r3
 1011fb0:	88cb883a 	add	r5,r17,r3
 1011fb4:	d8c00617 	ldw	r3,24(sp)
 1011fb8:	8089883a 	add	r4,r16,r2
 1011fbc:	d8800b17 	ldw	r2,44(sp)
 1011fc0:	18c00104 	addi	r3,r3,4
 1011fc4:	240d803a 	cmpltu	r6,r4,r16
 1011fc8:	10c7883a 	add	r3,r2,r3
 1011fcc:	2013883a 	mov	r9,r4
 1011fd0:	d8800a17 	ldw	r2,40(sp)
 1011fd4:	d9000517 	ldw	r4,20(sp)
 1011fd8:	314d883a 	add	r6,r6,r5
 1011fdc:	3015883a 	mov	r10,r6
 1011fe0:	2088c03a 	cmpne	r4,r4,r2
 1011fe4:	00880034 	movhi	r2,8192
 1011fe8:	10bfffc4 	addi	r2,r2,-1
 1011fec:	d9000f15 	stw	r4,60(sp)
 1011ff0:	d8c01015 	stw	r3,64(sp)
 1011ff4:	1180162e 	bgeu	r2,r6,1012050 <__muldf3+0x28c>
 1011ff8:	1811883a 	mov	r8,r3
 1011ffc:	101f883a 	mov	r15,r2
 1012000:	980497fa 	slli	r2,r19,31
 1012004:	9016d07a 	srli	r11,r18,1
 1012008:	500697fa 	slli	r3,r10,31
 101200c:	480cd07a 	srli	r6,r9,1
 1012010:	500ed07a 	srli	r7,r10,1
 1012014:	12d6b03a 	or	r11,r2,r11
 1012018:	00800044 	movi	r2,1
 101201c:	198cb03a 	or	r6,r3,r6
 1012020:	4888703a 	and	r4,r9,r2
 1012024:	9818d07a 	srli	r12,r19,1
 1012028:	001b883a 	mov	r13,zero
 101202c:	03a00034 	movhi	r14,32768
 1012030:	3013883a 	mov	r9,r6
 1012034:	3815883a 	mov	r10,r7
 1012038:	4091883a 	add	r8,r8,r2
 101203c:	20000226 	beq	r4,zero,1012048 <__muldf3+0x284>
 1012040:	5b64b03a 	or	r18,r11,r13
 1012044:	63a6b03a 	or	r19,r12,r14
 1012048:	7abfed36 	bltu	r15,r10,1012000 <__muldf3+0x23c>
 101204c:	da001015 	stw	r8,64(sp)
 1012050:	00840034 	movhi	r2,4096
 1012054:	10bfffc4 	addi	r2,r2,-1
 1012058:	12801436 	bltu	r2,r10,10120ac <__muldf3+0x2e8>
 101205c:	da001017 	ldw	r8,64(sp)
 1012060:	101f883a 	mov	r15,r2
 1012064:	4a45883a 	add	r2,r9,r9
 1012068:	124d803a 	cmpltu	r6,r2,r9
 101206c:	5287883a 	add	r3,r10,r10
 1012070:	9497883a 	add	r11,r18,r18
 1012074:	5c8f803a 	cmpltu	r7,r11,r18
 1012078:	9cd9883a 	add	r12,r19,r19
 101207c:	01000044 	movi	r4,1
 1012080:	30cd883a 	add	r6,r6,r3
 1012084:	3b0f883a 	add	r7,r7,r12
 1012088:	423fffc4 	addi	r8,r8,-1
 101208c:	1013883a 	mov	r9,r2
 1012090:	3015883a 	mov	r10,r6
 1012094:	111ab03a 	or	r13,r2,r4
 1012098:	98003016 	blt	r19,zero,101215c <__muldf3+0x398>
 101209c:	5825883a 	mov	r18,r11
 10120a0:	3827883a 	mov	r19,r7
 10120a4:	7abfef2e 	bgeu	r15,r10,1012064 <__muldf3+0x2a0>
 10120a8:	da001015 	stw	r8,64(sp)
 10120ac:	00803fc4 	movi	r2,255
 10120b0:	488e703a 	and	r7,r9,r2
 10120b4:	00802004 	movi	r2,128
 10120b8:	0007883a 	mov	r3,zero
 10120bc:	0011883a 	mov	r8,zero
 10120c0:	38801826 	beq	r7,r2,1012124 <__muldf3+0x360>
 10120c4:	008000c4 	movi	r2,3
 10120c8:	d9000e04 	addi	r4,sp,56
 10120cc:	da801215 	stw	r10,72(sp)
 10120d0:	d8800e15 	stw	r2,56(sp)
 10120d4:	da401115 	stw	r9,68(sp)
 10120d8:	003f6a06 	br	1011e84 <__muldf3+0xc0>
 10120dc:	89802126 	beq	r17,r6,1012164 <__muldf3+0x3a0>
 10120e0:	0009883a 	mov	r4,zero
 10120e4:	5105883a 	add	r2,r10,r4
 10120e8:	128d803a 	cmpltu	r6,r2,r10
 10120ec:	5d07883a 	add	r3,r11,r20
 10120f0:	30cd883a 	add	r6,r6,r3
 10120f4:	0021883a 	mov	r16,zero
 10120f8:	0023883a 	mov	r17,zero
 10120fc:	1025883a 	mov	r18,r2
 1012100:	3027883a 	mov	r19,r6
 1012104:	32ff9e2e 	bgeu	r6,r11,1011f80 <__muldf3+0x1bc>
 1012108:	00800044 	movi	r2,1
 101210c:	8089883a 	add	r4,r16,r2
 1012110:	240d803a 	cmpltu	r6,r4,r16
 1012114:	344d883a 	add	r6,r6,r17
 1012118:	2021883a 	mov	r16,r4
 101211c:	3023883a 	mov	r17,r6
 1012120:	003f9806 	br	1011f84 <__muldf3+0x1c0>
 1012124:	403fe71e 	bne	r8,zero,10120c4 <__muldf3+0x300>
 1012128:	01004004 	movi	r4,256
 101212c:	4904703a 	and	r2,r9,r4
 1012130:	10c4b03a 	or	r2,r2,r3
 1012134:	103fe31e 	bne	r2,zero,10120c4 <__muldf3+0x300>
 1012138:	94c4b03a 	or	r2,r18,r19
 101213c:	103fe126 	beq	r2,zero,10120c4 <__muldf3+0x300>
 1012140:	49c5883a 	add	r2,r9,r7
 1012144:	1251803a 	cmpltu	r8,r2,r9
 1012148:	4291883a 	add	r8,r8,r10
 101214c:	013fc004 	movi	r4,-256
 1012150:	1112703a 	and	r9,r2,r4
 1012154:	4015883a 	mov	r10,r8
 1012158:	003fda06 	br	10120c4 <__muldf3+0x300>
 101215c:	6813883a 	mov	r9,r13
 1012160:	003fce06 	br	101209c <__muldf3+0x2d8>
 1012164:	143f7c36 	bltu	r2,r16,1011f58 <__muldf3+0x194>
 1012168:	003fdd06 	br	10120e0 <__muldf3+0x31c>
 101216c:	12bf852e 	bgeu	r2,r10,1011f84 <__muldf3+0x1c0>
 1012170:	003fe506 	br	1012108 <__muldf3+0x344>
 1012174:	00800084 	movi	r2,2
 1012178:	20bf351e 	bne	r4,r2,1011e50 <__muldf3+0x8c>
 101217c:	010040b4 	movhi	r4,258
 1012180:	213d6604 	addi	r4,r4,-2664
 1012184:	003f3f06 	br	1011e84 <__muldf3+0xc0>

01012188 <__divdf3>:
 1012188:	deffed04 	addi	sp,sp,-76
 101218c:	dcc01115 	stw	r19,68(sp)
 1012190:	dcc00404 	addi	r19,sp,16
 1012194:	2011883a 	mov	r8,r4
 1012198:	2813883a 	mov	r9,r5
 101219c:	dc000e15 	stw	r16,56(sp)
 10121a0:	d809883a 	mov	r4,sp
 10121a4:	980b883a 	mov	r5,r19
 10121a8:	dc000904 	addi	r16,sp,36
 10121ac:	dfc01215 	stw	ra,72(sp)
 10121b0:	da400115 	stw	r9,4(sp)
 10121b4:	d9c00315 	stw	r7,12(sp)
 10121b8:	da000015 	stw	r8,0(sp)
 10121bc:	d9800215 	stw	r6,8(sp)
 10121c0:	dc801015 	stw	r18,64(sp)
 10121c4:	dc400f15 	stw	r17,60(sp)
 10121c8:	1012f640 	call	1012f64 <__unpack_d>
 10121cc:	d9000204 	addi	r4,sp,8
 10121d0:	800b883a 	mov	r5,r16
 10121d4:	1012f640 	call	1012f64 <__unpack_d>
 10121d8:	d9000417 	ldw	r4,16(sp)
 10121dc:	00800044 	movi	r2,1
 10121e0:	11000b2e 	bgeu	r2,r4,1012210 <__divdf3+0x88>
 10121e4:	d9400917 	ldw	r5,36(sp)
 10121e8:	1140762e 	bgeu	r2,r5,10123c4 <__divdf3+0x23c>
 10121ec:	d8800517 	ldw	r2,20(sp)
 10121f0:	d8c00a17 	ldw	r3,40(sp)
 10121f4:	01800104 	movi	r6,4
 10121f8:	10c4f03a 	xor	r2,r2,r3
 10121fc:	d8800515 	stw	r2,20(sp)
 1012200:	21800226 	beq	r4,r6,101220c <__divdf3+0x84>
 1012204:	00800084 	movi	r2,2
 1012208:	2080141e 	bne	r4,r2,101225c <__divdf3+0xd4>
 101220c:	29000926 	beq	r5,r4,1012234 <__divdf3+0xac>
 1012210:	9809883a 	mov	r4,r19
 1012214:	1012c500 	call	1012c50 <__pack_d>
 1012218:	dfc01217 	ldw	ra,72(sp)
 101221c:	dcc01117 	ldw	r19,68(sp)
 1012220:	dc801017 	ldw	r18,64(sp)
 1012224:	dc400f17 	ldw	r17,60(sp)
 1012228:	dc000e17 	ldw	r16,56(sp)
 101222c:	dec01304 	addi	sp,sp,76
 1012230:	f800283a 	ret
 1012234:	010040b4 	movhi	r4,258
 1012238:	213d6604 	addi	r4,r4,-2664
 101223c:	1012c500 	call	1012c50 <__pack_d>
 1012240:	dfc01217 	ldw	ra,72(sp)
 1012244:	dcc01117 	ldw	r19,68(sp)
 1012248:	dc801017 	ldw	r18,64(sp)
 101224c:	dc400f17 	ldw	r17,60(sp)
 1012250:	dc000e17 	ldw	r16,56(sp)
 1012254:	dec01304 	addi	sp,sp,76
 1012258:	f800283a 	ret
 101225c:	29805b26 	beq	r5,r6,10123cc <__divdf3+0x244>
 1012260:	28802d26 	beq	r5,r2,1012318 <__divdf3+0x190>
 1012264:	d8c00617 	ldw	r3,24(sp)
 1012268:	d8800b17 	ldw	r2,44(sp)
 101226c:	d9c00817 	ldw	r7,32(sp)
 1012270:	dc400d17 	ldw	r17,52(sp)
 1012274:	188bc83a 	sub	r5,r3,r2
 1012278:	d9800717 	ldw	r6,28(sp)
 101227c:	dc000c17 	ldw	r16,48(sp)
 1012280:	d9400615 	stw	r5,24(sp)
 1012284:	3c403836 	bltu	r7,r17,1012368 <__divdf3+0x1e0>
 1012288:	89c03626 	beq	r17,r7,1012364 <__divdf3+0x1dc>
 101228c:	0015883a 	mov	r10,zero
 1012290:	001d883a 	mov	r14,zero
 1012294:	02c40034 	movhi	r11,4096
 1012298:	001f883a 	mov	r15,zero
 101229c:	003f883a 	mov	ra,zero
 10122a0:	04800f44 	movi	r18,61
 10122a4:	00000f06 	br	10122e4 <__divdf3+0x15c>
 10122a8:	601d883a 	mov	r14,r12
 10122ac:	681f883a 	mov	r15,r13
 10122b0:	400d883a 	mov	r6,r8
 10122b4:	100f883a 	mov	r7,r2
 10122b8:	3191883a 	add	r8,r6,r6
 10122bc:	5808d07a 	srli	r4,r11,1
 10122c0:	4185803a 	cmpltu	r2,r8,r6
 10122c4:	39d3883a 	add	r9,r7,r7
 10122c8:	28c6b03a 	or	r3,r5,r3
 10122cc:	1245883a 	add	r2,r2,r9
 10122d0:	1815883a 	mov	r10,r3
 10122d4:	2017883a 	mov	r11,r4
 10122d8:	400d883a 	mov	r6,r8
 10122dc:	100f883a 	mov	r7,r2
 10122e0:	fc801726 	beq	ra,r18,1012340 <__divdf3+0x1b8>
 10122e4:	580a97fa 	slli	r5,r11,31
 10122e8:	5006d07a 	srli	r3,r10,1
 10122ec:	ffc00044 	addi	ra,ra,1
 10122f0:	3c7ff136 	bltu	r7,r17,10122b8 <__divdf3+0x130>
 10122f4:	3411c83a 	sub	r8,r6,r16
 10122f8:	3205803a 	cmpltu	r2,r6,r8
 10122fc:	3c53c83a 	sub	r9,r7,r17
 1012300:	7298b03a 	or	r12,r14,r10
 1012304:	7adab03a 	or	r13,r15,r11
 1012308:	4885c83a 	sub	r2,r9,r2
 101230c:	89ffe61e 	bne	r17,r7,10122a8 <__divdf3+0x120>
 1012310:	343fe936 	bltu	r6,r16,10122b8 <__divdf3+0x130>
 1012314:	003fe406 	br	10122a8 <__divdf3+0x120>
 1012318:	9809883a 	mov	r4,r19
 101231c:	d9800415 	stw	r6,16(sp)
 1012320:	1012c500 	call	1012c50 <__pack_d>
 1012324:	dfc01217 	ldw	ra,72(sp)
 1012328:	dcc01117 	ldw	r19,68(sp)
 101232c:	dc801017 	ldw	r18,64(sp)
 1012330:	dc400f17 	ldw	r17,60(sp)
 1012334:	dc000e17 	ldw	r16,56(sp)
 1012338:	dec01304 	addi	sp,sp,76
 101233c:	f800283a 	ret
 1012340:	00803fc4 	movi	r2,255
 1012344:	7090703a 	and	r8,r14,r2
 1012348:	00802004 	movi	r2,128
 101234c:	0007883a 	mov	r3,zero
 1012350:	0013883a 	mov	r9,zero
 1012354:	40800d26 	beq	r8,r2,101238c <__divdf3+0x204>
 1012358:	dbc00815 	stw	r15,32(sp)
 101235c:	db800715 	stw	r14,28(sp)
 1012360:	003fab06 	br	1012210 <__divdf3+0x88>
 1012364:	343fc92e 	bgeu	r6,r16,101228c <__divdf3+0x104>
 1012368:	3185883a 	add	r2,r6,r6
 101236c:	1189803a 	cmpltu	r4,r2,r6
 1012370:	39c7883a 	add	r3,r7,r7
 1012374:	20c9883a 	add	r4,r4,r3
 1012378:	297fffc4 	addi	r5,r5,-1
 101237c:	100d883a 	mov	r6,r2
 1012380:	200f883a 	mov	r7,r4
 1012384:	d9400615 	stw	r5,24(sp)
 1012388:	003fc006 	br	101228c <__divdf3+0x104>
 101238c:	483ff21e 	bne	r9,zero,1012358 <__divdf3+0x1d0>
 1012390:	01004004 	movi	r4,256
 1012394:	7104703a 	and	r2,r14,r4
 1012398:	10c4b03a 	or	r2,r2,r3
 101239c:	103fee1e 	bne	r2,zero,1012358 <__divdf3+0x1d0>
 10123a0:	31c4b03a 	or	r2,r6,r7
 10123a4:	103fec26 	beq	r2,zero,1012358 <__divdf3+0x1d0>
 10123a8:	7205883a 	add	r2,r14,r8
 10123ac:	1391803a 	cmpltu	r8,r2,r14
 10123b0:	43d1883a 	add	r8,r8,r15
 10123b4:	013fc004 	movi	r4,-256
 10123b8:	111c703a 	and	r14,r2,r4
 10123bc:	401f883a 	mov	r15,r8
 10123c0:	003fe506 	br	1012358 <__divdf3+0x1d0>
 10123c4:	8009883a 	mov	r4,r16
 10123c8:	003f9206 	br	1012214 <__divdf3+0x8c>
 10123cc:	9809883a 	mov	r4,r19
 10123d0:	d8000715 	stw	zero,28(sp)
 10123d4:	d8000815 	stw	zero,32(sp)
 10123d8:	d8000615 	stw	zero,24(sp)
 10123dc:	003f8d06 	br	1012214 <__divdf3+0x8c>

010123e0 <__eqdf2>:
 10123e0:	deffef04 	addi	sp,sp,-68
 10123e4:	dc400f15 	stw	r17,60(sp)
 10123e8:	dc400404 	addi	r17,sp,16
 10123ec:	2005883a 	mov	r2,r4
 10123f0:	2807883a 	mov	r3,r5
 10123f4:	dc000e15 	stw	r16,56(sp)
 10123f8:	d809883a 	mov	r4,sp
 10123fc:	880b883a 	mov	r5,r17
 1012400:	dc000904 	addi	r16,sp,36
 1012404:	d8c00115 	stw	r3,4(sp)
 1012408:	d8800015 	stw	r2,0(sp)
 101240c:	d9800215 	stw	r6,8(sp)
 1012410:	dfc01015 	stw	ra,64(sp)
 1012414:	d9c00315 	stw	r7,12(sp)
 1012418:	1012f640 	call	1012f64 <__unpack_d>
 101241c:	d9000204 	addi	r4,sp,8
 1012420:	800b883a 	mov	r5,r16
 1012424:	1012f640 	call	1012f64 <__unpack_d>
 1012428:	d8800417 	ldw	r2,16(sp)
 101242c:	00c00044 	movi	r3,1
 1012430:	180d883a 	mov	r6,r3
 1012434:	1880062e 	bgeu	r3,r2,1012450 <__eqdf2+0x70>
 1012438:	d8800917 	ldw	r2,36(sp)
 101243c:	8809883a 	mov	r4,r17
 1012440:	800b883a 	mov	r5,r16
 1012444:	1880022e 	bgeu	r3,r2,1012450 <__eqdf2+0x70>
 1012448:	101309c0 	call	101309c <__fpcmp_parts_d>
 101244c:	100d883a 	mov	r6,r2
 1012450:	3005883a 	mov	r2,r6
 1012454:	dfc01017 	ldw	ra,64(sp)
 1012458:	dc400f17 	ldw	r17,60(sp)
 101245c:	dc000e17 	ldw	r16,56(sp)
 1012460:	dec01104 	addi	sp,sp,68
 1012464:	f800283a 	ret

01012468 <__nedf2>:
 1012468:	deffef04 	addi	sp,sp,-68
 101246c:	dc400f15 	stw	r17,60(sp)
 1012470:	dc400404 	addi	r17,sp,16
 1012474:	2005883a 	mov	r2,r4
 1012478:	2807883a 	mov	r3,r5
 101247c:	dc000e15 	stw	r16,56(sp)
 1012480:	d809883a 	mov	r4,sp
 1012484:	880b883a 	mov	r5,r17
 1012488:	dc000904 	addi	r16,sp,36
 101248c:	d8c00115 	stw	r3,4(sp)
 1012490:	d8800015 	stw	r2,0(sp)
 1012494:	d9800215 	stw	r6,8(sp)
 1012498:	dfc01015 	stw	ra,64(sp)
 101249c:	d9c00315 	stw	r7,12(sp)
 10124a0:	1012f640 	call	1012f64 <__unpack_d>
 10124a4:	d9000204 	addi	r4,sp,8
 10124a8:	800b883a 	mov	r5,r16
 10124ac:	1012f640 	call	1012f64 <__unpack_d>
 10124b0:	d8800417 	ldw	r2,16(sp)
 10124b4:	00c00044 	movi	r3,1
 10124b8:	180d883a 	mov	r6,r3
 10124bc:	1880062e 	bgeu	r3,r2,10124d8 <__nedf2+0x70>
 10124c0:	d8800917 	ldw	r2,36(sp)
 10124c4:	8809883a 	mov	r4,r17
 10124c8:	800b883a 	mov	r5,r16
 10124cc:	1880022e 	bgeu	r3,r2,10124d8 <__nedf2+0x70>
 10124d0:	101309c0 	call	101309c <__fpcmp_parts_d>
 10124d4:	100d883a 	mov	r6,r2
 10124d8:	3005883a 	mov	r2,r6
 10124dc:	dfc01017 	ldw	ra,64(sp)
 10124e0:	dc400f17 	ldw	r17,60(sp)
 10124e4:	dc000e17 	ldw	r16,56(sp)
 10124e8:	dec01104 	addi	sp,sp,68
 10124ec:	f800283a 	ret

010124f0 <__gtdf2>:
 10124f0:	deffef04 	addi	sp,sp,-68
 10124f4:	dc400f15 	stw	r17,60(sp)
 10124f8:	dc400404 	addi	r17,sp,16
 10124fc:	2005883a 	mov	r2,r4
 1012500:	2807883a 	mov	r3,r5
 1012504:	dc000e15 	stw	r16,56(sp)
 1012508:	d809883a 	mov	r4,sp
 101250c:	880b883a 	mov	r5,r17
 1012510:	dc000904 	addi	r16,sp,36
 1012514:	d8c00115 	stw	r3,4(sp)
 1012518:	d8800015 	stw	r2,0(sp)
 101251c:	d9800215 	stw	r6,8(sp)
 1012520:	dfc01015 	stw	ra,64(sp)
 1012524:	d9c00315 	stw	r7,12(sp)
 1012528:	1012f640 	call	1012f64 <__unpack_d>
 101252c:	d9000204 	addi	r4,sp,8
 1012530:	800b883a 	mov	r5,r16
 1012534:	1012f640 	call	1012f64 <__unpack_d>
 1012538:	d8800417 	ldw	r2,16(sp)
 101253c:	00c00044 	movi	r3,1
 1012540:	01bfffc4 	movi	r6,-1
 1012544:	1880062e 	bgeu	r3,r2,1012560 <__gtdf2+0x70>
 1012548:	d8800917 	ldw	r2,36(sp)
 101254c:	8809883a 	mov	r4,r17
 1012550:	800b883a 	mov	r5,r16
 1012554:	1880022e 	bgeu	r3,r2,1012560 <__gtdf2+0x70>
 1012558:	101309c0 	call	101309c <__fpcmp_parts_d>
 101255c:	100d883a 	mov	r6,r2
 1012560:	3005883a 	mov	r2,r6
 1012564:	dfc01017 	ldw	ra,64(sp)
 1012568:	dc400f17 	ldw	r17,60(sp)
 101256c:	dc000e17 	ldw	r16,56(sp)
 1012570:	dec01104 	addi	sp,sp,68
 1012574:	f800283a 	ret

01012578 <__gedf2>:
 1012578:	deffef04 	addi	sp,sp,-68
 101257c:	dc400f15 	stw	r17,60(sp)
 1012580:	dc400404 	addi	r17,sp,16
 1012584:	2005883a 	mov	r2,r4
 1012588:	2807883a 	mov	r3,r5
 101258c:	dc000e15 	stw	r16,56(sp)
 1012590:	d809883a 	mov	r4,sp
 1012594:	880b883a 	mov	r5,r17
 1012598:	dc000904 	addi	r16,sp,36
 101259c:	d8c00115 	stw	r3,4(sp)
 10125a0:	d8800015 	stw	r2,0(sp)
 10125a4:	d9800215 	stw	r6,8(sp)
 10125a8:	dfc01015 	stw	ra,64(sp)
 10125ac:	d9c00315 	stw	r7,12(sp)
 10125b0:	1012f640 	call	1012f64 <__unpack_d>
 10125b4:	d9000204 	addi	r4,sp,8
 10125b8:	800b883a 	mov	r5,r16
 10125bc:	1012f640 	call	1012f64 <__unpack_d>
 10125c0:	d8800417 	ldw	r2,16(sp)
 10125c4:	00c00044 	movi	r3,1
 10125c8:	01bfffc4 	movi	r6,-1
 10125cc:	1880062e 	bgeu	r3,r2,10125e8 <__gedf2+0x70>
 10125d0:	d8800917 	ldw	r2,36(sp)
 10125d4:	8809883a 	mov	r4,r17
 10125d8:	800b883a 	mov	r5,r16
 10125dc:	1880022e 	bgeu	r3,r2,10125e8 <__gedf2+0x70>
 10125e0:	101309c0 	call	101309c <__fpcmp_parts_d>
 10125e4:	100d883a 	mov	r6,r2
 10125e8:	3005883a 	mov	r2,r6
 10125ec:	dfc01017 	ldw	ra,64(sp)
 10125f0:	dc400f17 	ldw	r17,60(sp)
 10125f4:	dc000e17 	ldw	r16,56(sp)
 10125f8:	dec01104 	addi	sp,sp,68
 10125fc:	f800283a 	ret

01012600 <__ltdf2>:
 1012600:	deffef04 	addi	sp,sp,-68
 1012604:	dc400f15 	stw	r17,60(sp)
 1012608:	dc400404 	addi	r17,sp,16
 101260c:	2005883a 	mov	r2,r4
 1012610:	2807883a 	mov	r3,r5
 1012614:	dc000e15 	stw	r16,56(sp)
 1012618:	d809883a 	mov	r4,sp
 101261c:	880b883a 	mov	r5,r17
 1012620:	dc000904 	addi	r16,sp,36
 1012624:	d8c00115 	stw	r3,4(sp)
 1012628:	d8800015 	stw	r2,0(sp)
 101262c:	d9800215 	stw	r6,8(sp)
 1012630:	dfc01015 	stw	ra,64(sp)
 1012634:	d9c00315 	stw	r7,12(sp)
 1012638:	1012f640 	call	1012f64 <__unpack_d>
 101263c:	d9000204 	addi	r4,sp,8
 1012640:	800b883a 	mov	r5,r16
 1012644:	1012f640 	call	1012f64 <__unpack_d>
 1012648:	d8800417 	ldw	r2,16(sp)
 101264c:	00c00044 	movi	r3,1
 1012650:	180d883a 	mov	r6,r3
 1012654:	1880062e 	bgeu	r3,r2,1012670 <__ltdf2+0x70>
 1012658:	d8800917 	ldw	r2,36(sp)
 101265c:	8809883a 	mov	r4,r17
 1012660:	800b883a 	mov	r5,r16
 1012664:	1880022e 	bgeu	r3,r2,1012670 <__ltdf2+0x70>
 1012668:	101309c0 	call	101309c <__fpcmp_parts_d>
 101266c:	100d883a 	mov	r6,r2
 1012670:	3005883a 	mov	r2,r6
 1012674:	dfc01017 	ldw	ra,64(sp)
 1012678:	dc400f17 	ldw	r17,60(sp)
 101267c:	dc000e17 	ldw	r16,56(sp)
 1012680:	dec01104 	addi	sp,sp,68
 1012684:	f800283a 	ret

01012688 <__floatsidf>:
 1012688:	2006d7fa 	srli	r3,r4,31
 101268c:	defff604 	addi	sp,sp,-40
 1012690:	008000c4 	movi	r2,3
 1012694:	dfc00915 	stw	ra,36(sp)
 1012698:	dcc00815 	stw	r19,32(sp)
 101269c:	dc800715 	stw	r18,28(sp)
 10126a0:	dc400615 	stw	r17,24(sp)
 10126a4:	dc000515 	stw	r16,20(sp)
 10126a8:	d8800015 	stw	r2,0(sp)
 10126ac:	d8c00115 	stw	r3,4(sp)
 10126b0:	20000f1e 	bne	r4,zero,10126f0 <__floatsidf+0x68>
 10126b4:	00800084 	movi	r2,2
 10126b8:	d8800015 	stw	r2,0(sp)
 10126bc:	d809883a 	mov	r4,sp
 10126c0:	1012c500 	call	1012c50 <__pack_d>
 10126c4:	1009883a 	mov	r4,r2
 10126c8:	180b883a 	mov	r5,r3
 10126cc:	2005883a 	mov	r2,r4
 10126d0:	2807883a 	mov	r3,r5
 10126d4:	dfc00917 	ldw	ra,36(sp)
 10126d8:	dcc00817 	ldw	r19,32(sp)
 10126dc:	dc800717 	ldw	r18,28(sp)
 10126e0:	dc400617 	ldw	r17,24(sp)
 10126e4:	dc000517 	ldw	r16,20(sp)
 10126e8:	dec00a04 	addi	sp,sp,40
 10126ec:	f800283a 	ret
 10126f0:	00800f04 	movi	r2,60
 10126f4:	1807003a 	cmpeq	r3,r3,zero
 10126f8:	d8800215 	stw	r2,8(sp)
 10126fc:	18001126 	beq	r3,zero,1012744 <__floatsidf+0xbc>
 1012700:	0027883a 	mov	r19,zero
 1012704:	2025883a 	mov	r18,r4
 1012708:	d9000315 	stw	r4,12(sp)
 101270c:	dcc00415 	stw	r19,16(sp)
 1012710:	1012bd00 	call	1012bd0 <__clzsi2>
 1012714:	11000744 	addi	r4,r2,29
 1012718:	013fe80e 	bge	zero,r4,10126bc <__floatsidf+0x34>
 101271c:	10bfff44 	addi	r2,r2,-3
 1012720:	10000c16 	blt	r2,zero,1012754 <__floatsidf+0xcc>
 1012724:	90a2983a 	sll	r17,r18,r2
 1012728:	0021883a 	mov	r16,zero
 101272c:	d8800217 	ldw	r2,8(sp)
 1012730:	dc400415 	stw	r17,16(sp)
 1012734:	dc000315 	stw	r16,12(sp)
 1012738:	1105c83a 	sub	r2,r2,r4
 101273c:	d8800215 	stw	r2,8(sp)
 1012740:	003fde06 	br	10126bc <__floatsidf+0x34>
 1012744:	00a00034 	movhi	r2,32768
 1012748:	20800a26 	beq	r4,r2,1012774 <__floatsidf+0xec>
 101274c:	0109c83a 	sub	r4,zero,r4
 1012750:	003feb06 	br	1012700 <__floatsidf+0x78>
 1012754:	9006d07a 	srli	r3,r18,1
 1012758:	008007c4 	movi	r2,31
 101275c:	1105c83a 	sub	r2,r2,r4
 1012760:	1886d83a 	srl	r3,r3,r2
 1012764:	9922983a 	sll	r17,r19,r4
 1012768:	9120983a 	sll	r16,r18,r4
 101276c:	1c62b03a 	or	r17,r3,r17
 1012770:	003fee06 	br	101272c <__floatsidf+0xa4>
 1012774:	0009883a 	mov	r4,zero
 1012778:	01707834 	movhi	r5,49632
 101277c:	003fd306 	br	10126cc <__floatsidf+0x44>

01012780 <__fixdfsi>:
 1012780:	defff804 	addi	sp,sp,-32
 1012784:	2005883a 	mov	r2,r4
 1012788:	2807883a 	mov	r3,r5
 101278c:	d809883a 	mov	r4,sp
 1012790:	d9400204 	addi	r5,sp,8
 1012794:	d8c00115 	stw	r3,4(sp)
 1012798:	d8800015 	stw	r2,0(sp)
 101279c:	dfc00715 	stw	ra,28(sp)
 10127a0:	1012f640 	call	1012f64 <__unpack_d>
 10127a4:	d8c00217 	ldw	r3,8(sp)
 10127a8:	00800084 	movi	r2,2
 10127ac:	1880051e 	bne	r3,r2,10127c4 <__fixdfsi+0x44>
 10127b0:	0007883a 	mov	r3,zero
 10127b4:	1805883a 	mov	r2,r3
 10127b8:	dfc00717 	ldw	ra,28(sp)
 10127bc:	dec00804 	addi	sp,sp,32
 10127c0:	f800283a 	ret
 10127c4:	00800044 	movi	r2,1
 10127c8:	10fff92e 	bgeu	r2,r3,10127b0 <__fixdfsi+0x30>
 10127cc:	00800104 	movi	r2,4
 10127d0:	18800426 	beq	r3,r2,10127e4 <__fixdfsi+0x64>
 10127d4:	d8c00417 	ldw	r3,16(sp)
 10127d8:	183ff516 	blt	r3,zero,10127b0 <__fixdfsi+0x30>
 10127dc:	00800784 	movi	r2,30
 10127e0:	10c0080e 	bge	r2,r3,1012804 <__fixdfsi+0x84>
 10127e4:	d8800317 	ldw	r2,12(sp)
 10127e8:	1000121e 	bne	r2,zero,1012834 <__fixdfsi+0xb4>
 10127ec:	00e00034 	movhi	r3,32768
 10127f0:	18ffffc4 	addi	r3,r3,-1
 10127f4:	1805883a 	mov	r2,r3
 10127f8:	dfc00717 	ldw	ra,28(sp)
 10127fc:	dec00804 	addi	sp,sp,32
 1012800:	f800283a 	ret
 1012804:	00800f04 	movi	r2,60
 1012808:	10d1c83a 	sub	r8,r2,r3
 101280c:	40bff804 	addi	r2,r8,-32
 1012810:	d9800517 	ldw	r6,20(sp)
 1012814:	d9c00617 	ldw	r7,24(sp)
 1012818:	10000816 	blt	r2,zero,101283c <__fixdfsi+0xbc>
 101281c:	3888d83a 	srl	r4,r7,r2
 1012820:	d8800317 	ldw	r2,12(sp)
 1012824:	2007883a 	mov	r3,r4
 1012828:	103fe226 	beq	r2,zero,10127b4 <__fixdfsi+0x34>
 101282c:	0107c83a 	sub	r3,zero,r4
 1012830:	003fe006 	br	10127b4 <__fixdfsi+0x34>
 1012834:	00e00034 	movhi	r3,32768
 1012838:	003fde06 	br	10127b4 <__fixdfsi+0x34>
 101283c:	39c7883a 	add	r3,r7,r7
 1012840:	008007c4 	movi	r2,31
 1012844:	1205c83a 	sub	r2,r2,r8
 1012848:	1886983a 	sll	r3,r3,r2
 101284c:	3208d83a 	srl	r4,r6,r8
 1012850:	1908b03a 	or	r4,r3,r4
 1012854:	003ff206 	br	1012820 <__fixdfsi+0xa0>

01012858 <__floatunsidf>:
 1012858:	defff204 	addi	sp,sp,-56
 101285c:	dfc00d15 	stw	ra,52(sp)
 1012860:	ddc00c15 	stw	r23,48(sp)
 1012864:	dd800b15 	stw	r22,44(sp)
 1012868:	dd400a15 	stw	r21,40(sp)
 101286c:	dd000915 	stw	r20,36(sp)
 1012870:	dcc00815 	stw	r19,32(sp)
 1012874:	dc800715 	stw	r18,28(sp)
 1012878:	dc400615 	stw	r17,24(sp)
 101287c:	dc000515 	stw	r16,20(sp)
 1012880:	d8000115 	stw	zero,4(sp)
 1012884:	20000f1e 	bne	r4,zero,10128c4 <__floatunsidf+0x6c>
 1012888:	00800084 	movi	r2,2
 101288c:	d8800015 	stw	r2,0(sp)
 1012890:	d809883a 	mov	r4,sp
 1012894:	1012c500 	call	1012c50 <__pack_d>
 1012898:	dfc00d17 	ldw	ra,52(sp)
 101289c:	ddc00c17 	ldw	r23,48(sp)
 10128a0:	dd800b17 	ldw	r22,44(sp)
 10128a4:	dd400a17 	ldw	r21,40(sp)
 10128a8:	dd000917 	ldw	r20,36(sp)
 10128ac:	dcc00817 	ldw	r19,32(sp)
 10128b0:	dc800717 	ldw	r18,28(sp)
 10128b4:	dc400617 	ldw	r17,24(sp)
 10128b8:	dc000517 	ldw	r16,20(sp)
 10128bc:	dec00e04 	addi	sp,sp,56
 10128c0:	f800283a 	ret
 10128c4:	008000c4 	movi	r2,3
 10128c8:	00c00f04 	movi	r3,60
 10128cc:	002f883a 	mov	r23,zero
 10128d0:	202d883a 	mov	r22,r4
 10128d4:	d8800015 	stw	r2,0(sp)
 10128d8:	d8c00215 	stw	r3,8(sp)
 10128dc:	d9000315 	stw	r4,12(sp)
 10128e0:	ddc00415 	stw	r23,16(sp)
 10128e4:	1012bd00 	call	1012bd0 <__clzsi2>
 10128e8:	12400744 	addi	r9,r2,29
 10128ec:	48000b16 	blt	r9,zero,101291c <__floatunsidf+0xc4>
 10128f0:	483fe726 	beq	r9,zero,1012890 <__floatunsidf+0x38>
 10128f4:	10bfff44 	addi	r2,r2,-3
 10128f8:	10002e16 	blt	r2,zero,10129b4 <__floatunsidf+0x15c>
 10128fc:	b0a2983a 	sll	r17,r22,r2
 1012900:	0021883a 	mov	r16,zero
 1012904:	d8800217 	ldw	r2,8(sp)
 1012908:	dc400415 	stw	r17,16(sp)
 101290c:	dc000315 	stw	r16,12(sp)
 1012910:	1245c83a 	sub	r2,r2,r9
 1012914:	d8800215 	stw	r2,8(sp)
 1012918:	003fdd06 	br	1012890 <__floatunsidf+0x38>
 101291c:	0255c83a 	sub	r10,zero,r9
 1012920:	51bff804 	addi	r6,r10,-32
 1012924:	30001b16 	blt	r6,zero,1012994 <__floatunsidf+0x13c>
 1012928:	b9a8d83a 	srl	r20,r23,r6
 101292c:	002b883a 	mov	r21,zero
 1012930:	000f883a 	mov	r7,zero
 1012934:	01000044 	movi	r4,1
 1012938:	0011883a 	mov	r8,zero
 101293c:	30002516 	blt	r6,zero,10129d4 <__floatunsidf+0x17c>
 1012940:	21a6983a 	sll	r19,r4,r6
 1012944:	0025883a 	mov	r18,zero
 1012948:	00bfffc4 	movi	r2,-1
 101294c:	9089883a 	add	r4,r18,r2
 1012950:	988b883a 	add	r5,r19,r2
 1012954:	248d803a 	cmpltu	r6,r4,r18
 1012958:	314b883a 	add	r5,r6,r5
 101295c:	b104703a 	and	r2,r22,r4
 1012960:	b946703a 	and	r3,r23,r5
 1012964:	10c4b03a 	or	r2,r2,r3
 1012968:	10000226 	beq	r2,zero,1012974 <__floatunsidf+0x11c>
 101296c:	01c00044 	movi	r7,1
 1012970:	0011883a 	mov	r8,zero
 1012974:	d9000217 	ldw	r4,8(sp)
 1012978:	a1c4b03a 	or	r2,r20,r7
 101297c:	aa06b03a 	or	r3,r21,r8
 1012980:	2249c83a 	sub	r4,r4,r9
 1012984:	d8c00415 	stw	r3,16(sp)
 1012988:	d9000215 	stw	r4,8(sp)
 101298c:	d8800315 	stw	r2,12(sp)
 1012990:	003fbf06 	br	1012890 <__floatunsidf+0x38>
 1012994:	bdc7883a 	add	r3,r23,r23
 1012998:	008007c4 	movi	r2,31
 101299c:	1285c83a 	sub	r2,r2,r10
 10129a0:	1886983a 	sll	r3,r3,r2
 10129a4:	b2a8d83a 	srl	r20,r22,r10
 10129a8:	baaad83a 	srl	r21,r23,r10
 10129ac:	1d28b03a 	or	r20,r3,r20
 10129b0:	003fdf06 	br	1012930 <__floatunsidf+0xd8>
 10129b4:	b006d07a 	srli	r3,r22,1
 10129b8:	008007c4 	movi	r2,31
 10129bc:	1245c83a 	sub	r2,r2,r9
 10129c0:	1886d83a 	srl	r3,r3,r2
 10129c4:	ba62983a 	sll	r17,r23,r9
 10129c8:	b260983a 	sll	r16,r22,r9
 10129cc:	1c62b03a 	or	r17,r3,r17
 10129d0:	003fcc06 	br	1012904 <__floatunsidf+0xac>
 10129d4:	2006d07a 	srli	r3,r4,1
 10129d8:	008007c4 	movi	r2,31
 10129dc:	1285c83a 	sub	r2,r2,r10
 10129e0:	18a6d83a 	srl	r19,r3,r2
 10129e4:	22a4983a 	sll	r18,r4,r10
 10129e8:	003fd706 	br	1012948 <__floatunsidf+0xf0>

010129ec <udivmodsi4>:
 10129ec:	29001b2e 	bgeu	r5,r4,1012a5c <udivmodsi4+0x70>
 10129f0:	28001a16 	blt	r5,zero,1012a5c <udivmodsi4+0x70>
 10129f4:	00800044 	movi	r2,1
 10129f8:	0007883a 	mov	r3,zero
 10129fc:	01c007c4 	movi	r7,31
 1012a00:	00000306 	br	1012a10 <udivmodsi4+0x24>
 1012a04:	19c01326 	beq	r3,r7,1012a54 <udivmodsi4+0x68>
 1012a08:	18c00044 	addi	r3,r3,1
 1012a0c:	28000416 	blt	r5,zero,1012a20 <udivmodsi4+0x34>
 1012a10:	294b883a 	add	r5,r5,r5
 1012a14:	1085883a 	add	r2,r2,r2
 1012a18:	293ffa36 	bltu	r5,r4,1012a04 <udivmodsi4+0x18>
 1012a1c:	10000d26 	beq	r2,zero,1012a54 <udivmodsi4+0x68>
 1012a20:	0007883a 	mov	r3,zero
 1012a24:	21400236 	bltu	r4,r5,1012a30 <udivmodsi4+0x44>
 1012a28:	2149c83a 	sub	r4,r4,r5
 1012a2c:	1886b03a 	or	r3,r3,r2
 1012a30:	1004d07a 	srli	r2,r2,1
 1012a34:	280ad07a 	srli	r5,r5,1
 1012a38:	103ffa1e 	bne	r2,zero,1012a24 <udivmodsi4+0x38>
 1012a3c:	30000226 	beq	r6,zero,1012a48 <udivmodsi4+0x5c>
 1012a40:	2005883a 	mov	r2,r4
 1012a44:	f800283a 	ret
 1012a48:	1809883a 	mov	r4,r3
 1012a4c:	2005883a 	mov	r2,r4
 1012a50:	f800283a 	ret
 1012a54:	0007883a 	mov	r3,zero
 1012a58:	003ff806 	br	1012a3c <udivmodsi4+0x50>
 1012a5c:	00800044 	movi	r2,1
 1012a60:	0007883a 	mov	r3,zero
 1012a64:	003fef06 	br	1012a24 <udivmodsi4+0x38>

01012a68 <__divsi3>:
 1012a68:	defffe04 	addi	sp,sp,-8
 1012a6c:	dc000015 	stw	r16,0(sp)
 1012a70:	dfc00115 	stw	ra,4(sp)
 1012a74:	0021883a 	mov	r16,zero
 1012a78:	20000c16 	blt	r4,zero,1012aac <__divsi3+0x44>
 1012a7c:	000d883a 	mov	r6,zero
 1012a80:	28000e16 	blt	r5,zero,1012abc <__divsi3+0x54>
 1012a84:	10129ec0 	call	10129ec <udivmodsi4>
 1012a88:	1007883a 	mov	r3,r2
 1012a8c:	8005003a 	cmpeq	r2,r16,zero
 1012a90:	1000011e 	bne	r2,zero,1012a98 <__divsi3+0x30>
 1012a94:	00c7c83a 	sub	r3,zero,r3
 1012a98:	1805883a 	mov	r2,r3
 1012a9c:	dfc00117 	ldw	ra,4(sp)
 1012aa0:	dc000017 	ldw	r16,0(sp)
 1012aa4:	dec00204 	addi	sp,sp,8
 1012aa8:	f800283a 	ret
 1012aac:	0109c83a 	sub	r4,zero,r4
 1012ab0:	04000044 	movi	r16,1
 1012ab4:	000d883a 	mov	r6,zero
 1012ab8:	283ff20e 	bge	r5,zero,1012a84 <__divsi3+0x1c>
 1012abc:	014bc83a 	sub	r5,zero,r5
 1012ac0:	8021003a 	cmpeq	r16,r16,zero
 1012ac4:	003fef06 	br	1012a84 <__divsi3+0x1c>

01012ac8 <__modsi3>:
 1012ac8:	deffff04 	addi	sp,sp,-4
 1012acc:	dfc00015 	stw	ra,0(sp)
 1012ad0:	01800044 	movi	r6,1
 1012ad4:	2807883a 	mov	r3,r5
 1012ad8:	20000416 	blt	r4,zero,1012aec <__modsi3+0x24>
 1012adc:	28000c16 	blt	r5,zero,1012b10 <__modsi3+0x48>
 1012ae0:	dfc00017 	ldw	ra,0(sp)
 1012ae4:	dec00104 	addi	sp,sp,4
 1012ae8:	10129ec1 	jmpi	10129ec <udivmodsi4>
 1012aec:	0109c83a 	sub	r4,zero,r4
 1012af0:	28000b16 	blt	r5,zero,1012b20 <__modsi3+0x58>
 1012af4:	180b883a 	mov	r5,r3
 1012af8:	01800044 	movi	r6,1
 1012afc:	10129ec0 	call	10129ec <udivmodsi4>
 1012b00:	0085c83a 	sub	r2,zero,r2
 1012b04:	dfc00017 	ldw	ra,0(sp)
 1012b08:	dec00104 	addi	sp,sp,4
 1012b0c:	f800283a 	ret
 1012b10:	014bc83a 	sub	r5,zero,r5
 1012b14:	dfc00017 	ldw	ra,0(sp)
 1012b18:	dec00104 	addi	sp,sp,4
 1012b1c:	10129ec1 	jmpi	10129ec <udivmodsi4>
 1012b20:	0147c83a 	sub	r3,zero,r5
 1012b24:	003ff306 	br	1012af4 <__modsi3+0x2c>

01012b28 <__udivsi3>:
 1012b28:	000d883a 	mov	r6,zero
 1012b2c:	10129ec1 	jmpi	10129ec <udivmodsi4>

01012b30 <__umodsi3>:
 1012b30:	01800044 	movi	r6,1
 1012b34:	10129ec1 	jmpi	10129ec <udivmodsi4>

01012b38 <__muldi3>:
 1012b38:	2011883a 	mov	r8,r4
 1012b3c:	427fffcc 	andi	r9,r8,65535
 1012b40:	4018d43a 	srli	r12,r8,16
 1012b44:	32bfffcc 	andi	r10,r6,65535
 1012b48:	3016d43a 	srli	r11,r6,16
 1012b4c:	4a85383a 	mul	r2,r9,r10
 1012b50:	6295383a 	mul	r10,r12,r10
 1012b54:	4ad3383a 	mul	r9,r9,r11
 1012b58:	113fffcc 	andi	r4,r2,65535
 1012b5c:	1004d43a 	srli	r2,r2,16
 1012b60:	4a93883a 	add	r9,r9,r10
 1012b64:	3807883a 	mov	r3,r7
 1012b68:	1245883a 	add	r2,r2,r9
 1012b6c:	280f883a 	mov	r7,r5
 1012b70:	180b883a 	mov	r5,r3
 1012b74:	1006943a 	slli	r3,r2,16
 1012b78:	defffd04 	addi	sp,sp,-12
 1012b7c:	dc800215 	stw	r18,8(sp)
 1012b80:	1907883a 	add	r3,r3,r4
 1012b84:	dc400115 	stw	r17,4(sp)
 1012b88:	dc000015 	stw	r16,0(sp)
 1012b8c:	4165383a 	mul	r18,r8,r5
 1012b90:	31e3383a 	mul	r17,r6,r7
 1012b94:	1012d43a 	srli	r9,r2,16
 1012b98:	62d9383a 	mul	r12,r12,r11
 1012b9c:	181f883a 	mov	r15,r3
 1012ba0:	1280022e 	bgeu	r2,r10,1012bac <__muldi3+0x74>
 1012ba4:	00800074 	movhi	r2,1
 1012ba8:	6099883a 	add	r12,r12,r2
 1012bac:	624d883a 	add	r6,r12,r9
 1012bb0:	9187883a 	add	r3,r18,r6
 1012bb4:	88c7883a 	add	r3,r17,r3
 1012bb8:	7805883a 	mov	r2,r15
 1012bbc:	dc800217 	ldw	r18,8(sp)
 1012bc0:	dc400117 	ldw	r17,4(sp)
 1012bc4:	dc000017 	ldw	r16,0(sp)
 1012bc8:	dec00304 	addi	sp,sp,12
 1012bcc:	f800283a 	ret

01012bd0 <__clzsi2>:
 1012bd0:	00bfffd4 	movui	r2,65535
 1012bd4:	11000e36 	bltu	r2,r4,1012c10 <__clzsi2+0x40>
 1012bd8:	00803fc4 	movi	r2,255
 1012bdc:	01400204 	movi	r5,8
 1012be0:	0007883a 	mov	r3,zero
 1012be4:	11001036 	bltu	r2,r4,1012c28 <__clzsi2+0x58>
 1012be8:	000b883a 	mov	r5,zero
 1012bec:	20c6d83a 	srl	r3,r4,r3
 1012bf0:	008040b4 	movhi	r2,258
 1012bf4:	10bd6b04 	addi	r2,r2,-2644
 1012bf8:	1887883a 	add	r3,r3,r2
 1012bfc:	18800003 	ldbu	r2,0(r3)
 1012c00:	00c00804 	movi	r3,32
 1012c04:	2885883a 	add	r2,r5,r2
 1012c08:	1885c83a 	sub	r2,r3,r2
 1012c0c:	f800283a 	ret
 1012c10:	01400404 	movi	r5,16
 1012c14:	00804034 	movhi	r2,256
 1012c18:	10bfffc4 	addi	r2,r2,-1
 1012c1c:	2807883a 	mov	r3,r5
 1012c20:	113ff22e 	bgeu	r2,r4,1012bec <__clzsi2+0x1c>
 1012c24:	01400604 	movi	r5,24
 1012c28:	2807883a 	mov	r3,r5
 1012c2c:	20c6d83a 	srl	r3,r4,r3
 1012c30:	008040b4 	movhi	r2,258
 1012c34:	10bd6b04 	addi	r2,r2,-2644
 1012c38:	1887883a 	add	r3,r3,r2
 1012c3c:	18800003 	ldbu	r2,0(r3)
 1012c40:	00c00804 	movi	r3,32
 1012c44:	2885883a 	add	r2,r5,r2
 1012c48:	1885c83a 	sub	r2,r3,r2
 1012c4c:	f800283a 	ret

01012c50 <__pack_d>:
 1012c50:	20c00017 	ldw	r3,0(r4)
 1012c54:	defffd04 	addi	sp,sp,-12
 1012c58:	dc000015 	stw	r16,0(sp)
 1012c5c:	dc800215 	stw	r18,8(sp)
 1012c60:	dc400115 	stw	r17,4(sp)
 1012c64:	00800044 	movi	r2,1
 1012c68:	22000317 	ldw	r8,12(r4)
 1012c6c:	001f883a 	mov	r15,zero
 1012c70:	22400417 	ldw	r9,16(r4)
 1012c74:	24000117 	ldw	r16,4(r4)
 1012c78:	10c0552e 	bgeu	r2,r3,1012dd0 <__pack_d+0x180>
 1012c7c:	00800104 	movi	r2,4
 1012c80:	18804f26 	beq	r3,r2,1012dc0 <__pack_d+0x170>
 1012c84:	00800084 	movi	r2,2
 1012c88:	18800226 	beq	r3,r2,1012c94 <__pack_d+0x44>
 1012c8c:	4244b03a 	or	r2,r8,r9
 1012c90:	10001a1e 	bne	r2,zero,1012cfc <__pack_d+0xac>
 1012c94:	000d883a 	mov	r6,zero
 1012c98:	000f883a 	mov	r7,zero
 1012c9c:	0011883a 	mov	r8,zero
 1012ca0:	00800434 	movhi	r2,16
 1012ca4:	10bfffc4 	addi	r2,r2,-1
 1012ca8:	301d883a 	mov	r14,r6
 1012cac:	3884703a 	and	r2,r7,r2
 1012cb0:	400a953a 	slli	r5,r8,20
 1012cb4:	79bffc2c 	andhi	r6,r15,65520
 1012cb8:	308cb03a 	or	r6,r6,r2
 1012cbc:	00e00434 	movhi	r3,32784
 1012cc0:	18ffffc4 	addi	r3,r3,-1
 1012cc4:	800497fa 	slli	r2,r16,31
 1012cc8:	30c6703a 	and	r3,r6,r3
 1012ccc:	1946b03a 	or	r3,r3,r5
 1012cd0:	01600034 	movhi	r5,32768
 1012cd4:	297fffc4 	addi	r5,r5,-1
 1012cd8:	194a703a 	and	r5,r3,r5
 1012cdc:	288ab03a 	or	r5,r5,r2
 1012ce0:	2807883a 	mov	r3,r5
 1012ce4:	7005883a 	mov	r2,r14
 1012ce8:	dc800217 	ldw	r18,8(sp)
 1012cec:	dc400117 	ldw	r17,4(sp)
 1012cf0:	dc000017 	ldw	r16,0(sp)
 1012cf4:	dec00304 	addi	sp,sp,12
 1012cf8:	f800283a 	ret
 1012cfc:	21000217 	ldw	r4,8(r4)
 1012d00:	00bf0084 	movi	r2,-1022
 1012d04:	20803f16 	blt	r4,r2,1012e04 <__pack_d+0x1b4>
 1012d08:	0080ffc4 	movi	r2,1023
 1012d0c:	11002c16 	blt	r2,r4,1012dc0 <__pack_d+0x170>
 1012d10:	00803fc4 	movi	r2,255
 1012d14:	408c703a 	and	r6,r8,r2
 1012d18:	00802004 	movi	r2,128
 1012d1c:	0007883a 	mov	r3,zero
 1012d20:	000f883a 	mov	r7,zero
 1012d24:	2280ffc4 	addi	r10,r4,1023
 1012d28:	30801e26 	beq	r6,r2,1012da4 <__pack_d+0x154>
 1012d2c:	00801fc4 	movi	r2,127
 1012d30:	4089883a 	add	r4,r8,r2
 1012d34:	220d803a 	cmpltu	r6,r4,r8
 1012d38:	324d883a 	add	r6,r6,r9
 1012d3c:	2011883a 	mov	r8,r4
 1012d40:	3013883a 	mov	r9,r6
 1012d44:	00880034 	movhi	r2,8192
 1012d48:	10bfffc4 	addi	r2,r2,-1
 1012d4c:	12400d36 	bltu	r2,r9,1012d84 <__pack_d+0x134>
 1012d50:	4804963a 	slli	r2,r9,24
 1012d54:	400cd23a 	srli	r6,r8,8
 1012d58:	480ed23a 	srli	r7,r9,8
 1012d5c:	013fffc4 	movi	r4,-1
 1012d60:	118cb03a 	or	r6,r2,r6
 1012d64:	01400434 	movhi	r5,16
 1012d68:	297fffc4 	addi	r5,r5,-1
 1012d6c:	3104703a 	and	r2,r6,r4
 1012d70:	3946703a 	and	r3,r7,r5
 1012d74:	5201ffcc 	andi	r8,r10,2047
 1012d78:	100d883a 	mov	r6,r2
 1012d7c:	180f883a 	mov	r7,r3
 1012d80:	003fc706 	br	1012ca0 <__pack_d+0x50>
 1012d84:	480897fa 	slli	r4,r9,31
 1012d88:	4004d07a 	srli	r2,r8,1
 1012d8c:	4806d07a 	srli	r3,r9,1
 1012d90:	52800044 	addi	r10,r10,1
 1012d94:	2084b03a 	or	r2,r4,r2
 1012d98:	1011883a 	mov	r8,r2
 1012d9c:	1813883a 	mov	r9,r3
 1012da0:	003feb06 	br	1012d50 <__pack_d+0x100>
 1012da4:	383fe11e 	bne	r7,zero,1012d2c <__pack_d+0xdc>
 1012da8:	01004004 	movi	r4,256
 1012dac:	4104703a 	and	r2,r8,r4
 1012db0:	10c4b03a 	or	r2,r2,r3
 1012db4:	103fe326 	beq	r2,zero,1012d44 <__pack_d+0xf4>
 1012db8:	3005883a 	mov	r2,r6
 1012dbc:	003fdc06 	br	1012d30 <__pack_d+0xe0>
 1012dc0:	000d883a 	mov	r6,zero
 1012dc4:	000f883a 	mov	r7,zero
 1012dc8:	0201ffc4 	movi	r8,2047
 1012dcc:	003fb406 	br	1012ca0 <__pack_d+0x50>
 1012dd0:	0005883a 	mov	r2,zero
 1012dd4:	00c00234 	movhi	r3,8
 1012dd8:	408cb03a 	or	r6,r8,r2
 1012ddc:	48ceb03a 	or	r7,r9,r3
 1012de0:	013fffc4 	movi	r4,-1
 1012de4:	01400434 	movhi	r5,16
 1012de8:	297fffc4 	addi	r5,r5,-1
 1012dec:	3104703a 	and	r2,r6,r4
 1012df0:	3946703a 	and	r3,r7,r5
 1012df4:	100d883a 	mov	r6,r2
 1012df8:	180f883a 	mov	r7,r3
 1012dfc:	0201ffc4 	movi	r8,2047
 1012e00:	003fa706 	br	1012ca0 <__pack_d+0x50>
 1012e04:	1109c83a 	sub	r4,r2,r4
 1012e08:	00800e04 	movi	r2,56
 1012e0c:	11004316 	blt	r2,r4,1012f1c <__pack_d+0x2cc>
 1012e10:	21fff804 	addi	r7,r4,-32
 1012e14:	38004516 	blt	r7,zero,1012f2c <__pack_d+0x2dc>
 1012e18:	49d8d83a 	srl	r12,r9,r7
 1012e1c:	001b883a 	mov	r13,zero
 1012e20:	0023883a 	mov	r17,zero
 1012e24:	01400044 	movi	r5,1
 1012e28:	0025883a 	mov	r18,zero
 1012e2c:	38004716 	blt	r7,zero,1012f4c <__pack_d+0x2fc>
 1012e30:	29d6983a 	sll	r11,r5,r7
 1012e34:	0015883a 	mov	r10,zero
 1012e38:	00bfffc4 	movi	r2,-1
 1012e3c:	5089883a 	add	r4,r10,r2
 1012e40:	588b883a 	add	r5,r11,r2
 1012e44:	228d803a 	cmpltu	r6,r4,r10
 1012e48:	314b883a 	add	r5,r6,r5
 1012e4c:	4104703a 	and	r2,r8,r4
 1012e50:	4946703a 	and	r3,r9,r5
 1012e54:	10c4b03a 	or	r2,r2,r3
 1012e58:	10000226 	beq	r2,zero,1012e64 <__pack_d+0x214>
 1012e5c:	04400044 	movi	r17,1
 1012e60:	0025883a 	mov	r18,zero
 1012e64:	00803fc4 	movi	r2,255
 1012e68:	644eb03a 	or	r7,r12,r17
 1012e6c:	3892703a 	and	r9,r7,r2
 1012e70:	00802004 	movi	r2,128
 1012e74:	6c90b03a 	or	r8,r13,r18
 1012e78:	0015883a 	mov	r10,zero
 1012e7c:	48801626 	beq	r9,r2,1012ed8 <__pack_d+0x288>
 1012e80:	01001fc4 	movi	r4,127
 1012e84:	3905883a 	add	r2,r7,r4
 1012e88:	11cd803a 	cmpltu	r6,r2,r7
 1012e8c:	320d883a 	add	r6,r6,r8
 1012e90:	100f883a 	mov	r7,r2
 1012e94:	00840034 	movhi	r2,4096
 1012e98:	10bfffc4 	addi	r2,r2,-1
 1012e9c:	3011883a 	mov	r8,r6
 1012ea0:	0007883a 	mov	r3,zero
 1012ea4:	11801b36 	bltu	r2,r6,1012f14 <__pack_d+0x2c4>
 1012ea8:	4004963a 	slli	r2,r8,24
 1012eac:	3808d23a 	srli	r4,r7,8
 1012eb0:	400ad23a 	srli	r5,r8,8
 1012eb4:	1813883a 	mov	r9,r3
 1012eb8:	1108b03a 	or	r4,r2,r4
 1012ebc:	00bfffc4 	movi	r2,-1
 1012ec0:	00c00434 	movhi	r3,16
 1012ec4:	18ffffc4 	addi	r3,r3,-1
 1012ec8:	208c703a 	and	r6,r4,r2
 1012ecc:	28ce703a 	and	r7,r5,r3
 1012ed0:	4a01ffcc 	andi	r8,r9,2047
 1012ed4:	003f7206 	br	1012ca0 <__pack_d+0x50>
 1012ed8:	503fe91e 	bne	r10,zero,1012e80 <__pack_d+0x230>
 1012edc:	01004004 	movi	r4,256
 1012ee0:	3904703a 	and	r2,r7,r4
 1012ee4:	0007883a 	mov	r3,zero
 1012ee8:	10c4b03a 	or	r2,r2,r3
 1012eec:	10000626 	beq	r2,zero,1012f08 <__pack_d+0x2b8>
 1012ef0:	3a45883a 	add	r2,r7,r9
 1012ef4:	11cd803a 	cmpltu	r6,r2,r7
 1012ef8:	320d883a 	add	r6,r6,r8
 1012efc:	100f883a 	mov	r7,r2
 1012f00:	3011883a 	mov	r8,r6
 1012f04:	0007883a 	mov	r3,zero
 1012f08:	00840034 	movhi	r2,4096
 1012f0c:	10bfffc4 	addi	r2,r2,-1
 1012f10:	123fe52e 	bgeu	r2,r8,1012ea8 <__pack_d+0x258>
 1012f14:	00c00044 	movi	r3,1
 1012f18:	003fe306 	br	1012ea8 <__pack_d+0x258>
 1012f1c:	0009883a 	mov	r4,zero
 1012f20:	0013883a 	mov	r9,zero
 1012f24:	000b883a 	mov	r5,zero
 1012f28:	003fe406 	br	1012ebc <__pack_d+0x26c>
 1012f2c:	4a47883a 	add	r3,r9,r9
 1012f30:	008007c4 	movi	r2,31
 1012f34:	1105c83a 	sub	r2,r2,r4
 1012f38:	1886983a 	sll	r3,r3,r2
 1012f3c:	4118d83a 	srl	r12,r8,r4
 1012f40:	491ad83a 	srl	r13,r9,r4
 1012f44:	1b18b03a 	or	r12,r3,r12
 1012f48:	003fb506 	br	1012e20 <__pack_d+0x1d0>
 1012f4c:	2806d07a 	srli	r3,r5,1
 1012f50:	008007c4 	movi	r2,31
 1012f54:	1105c83a 	sub	r2,r2,r4
 1012f58:	1896d83a 	srl	r11,r3,r2
 1012f5c:	2914983a 	sll	r10,r5,r4
 1012f60:	003fb506 	br	1012e38 <__pack_d+0x1e8>

01012f64 <__unpack_d>:
 1012f64:	20c00117 	ldw	r3,4(r4)
 1012f68:	22400017 	ldw	r9,0(r4)
 1012f6c:	00800434 	movhi	r2,16
 1012f70:	10bfffc4 	addi	r2,r2,-1
 1012f74:	1808d53a 	srli	r4,r3,20
 1012f78:	180cd7fa 	srli	r6,r3,31
 1012f7c:	1894703a 	and	r10,r3,r2
 1012f80:	2201ffcc 	andi	r8,r4,2047
 1012f84:	281b883a 	mov	r13,r5
 1012f88:	4817883a 	mov	r11,r9
 1012f8c:	29800115 	stw	r6,4(r5)
 1012f90:	5019883a 	mov	r12,r10
 1012f94:	40001e1e 	bne	r8,zero,1013010 <__unpack_d+0xac>
 1012f98:	4a84b03a 	or	r2,r9,r10
 1012f9c:	10001926 	beq	r2,zero,1013004 <__unpack_d+0xa0>
 1012fa0:	4804d63a 	srli	r2,r9,24
 1012fa4:	500c923a 	slli	r6,r10,8
 1012fa8:	013f0084 	movi	r4,-1022
 1012fac:	00c40034 	movhi	r3,4096
 1012fb0:	18ffffc4 	addi	r3,r3,-1
 1012fb4:	118cb03a 	or	r6,r2,r6
 1012fb8:	008000c4 	movi	r2,3
 1012fbc:	480a923a 	slli	r5,r9,8
 1012fc0:	68800015 	stw	r2,0(r13)
 1012fc4:	69000215 	stw	r4,8(r13)
 1012fc8:	19800b36 	bltu	r3,r6,1012ff8 <__unpack_d+0x94>
 1012fcc:	200f883a 	mov	r7,r4
 1012fd0:	1811883a 	mov	r8,r3
 1012fd4:	2945883a 	add	r2,r5,r5
 1012fd8:	1149803a 	cmpltu	r4,r2,r5
 1012fdc:	3187883a 	add	r3,r6,r6
 1012fe0:	20c9883a 	add	r4,r4,r3
 1012fe4:	100b883a 	mov	r5,r2
 1012fe8:	200d883a 	mov	r6,r4
 1012fec:	39ffffc4 	addi	r7,r7,-1
 1012ff0:	413ff82e 	bgeu	r8,r4,1012fd4 <__unpack_d+0x70>
 1012ff4:	69c00215 	stw	r7,8(r13)
 1012ff8:	69800415 	stw	r6,16(r13)
 1012ffc:	69400315 	stw	r5,12(r13)
 1013000:	f800283a 	ret
 1013004:	00800084 	movi	r2,2
 1013008:	28800015 	stw	r2,0(r5)
 101300c:	f800283a 	ret
 1013010:	0081ffc4 	movi	r2,2047
 1013014:	40800f26 	beq	r8,r2,1013054 <__unpack_d+0xf0>
 1013018:	480cd63a 	srli	r6,r9,24
 101301c:	5006923a 	slli	r3,r10,8
 1013020:	4804923a 	slli	r2,r9,8
 1013024:	0009883a 	mov	r4,zero
 1013028:	30c6b03a 	or	r3,r6,r3
 101302c:	01440034 	movhi	r5,4096
 1013030:	110cb03a 	or	r6,r2,r4
 1013034:	423f0044 	addi	r8,r8,-1023
 1013038:	194eb03a 	or	r7,r3,r5
 101303c:	008000c4 	movi	r2,3
 1013040:	69c00415 	stw	r7,16(r13)
 1013044:	6a000215 	stw	r8,8(r13)
 1013048:	68800015 	stw	r2,0(r13)
 101304c:	69800315 	stw	r6,12(r13)
 1013050:	f800283a 	ret
 1013054:	4a84b03a 	or	r2,r9,r10
 1013058:	1000031e 	bne	r2,zero,1013068 <__unpack_d+0x104>
 101305c:	00800104 	movi	r2,4
 1013060:	28800015 	stw	r2,0(r5)
 1013064:	f800283a 	ret
 1013068:	0009883a 	mov	r4,zero
 101306c:	01400234 	movhi	r5,8
 1013070:	4904703a 	and	r2,r9,r4
 1013074:	5146703a 	and	r3,r10,r5
 1013078:	10c4b03a 	or	r2,r2,r3
 101307c:	10000526 	beq	r2,zero,1013094 <__unpack_d+0x130>
 1013080:	00800044 	movi	r2,1
 1013084:	68800015 	stw	r2,0(r13)
 1013088:	6b000415 	stw	r12,16(r13)
 101308c:	6ac00315 	stw	r11,12(r13)
 1013090:	f800283a 	ret
 1013094:	68000015 	stw	zero,0(r13)
 1013098:	003ffb06 	br	1013088 <__unpack_d+0x124>

0101309c <__fpcmp_parts_d>:
 101309c:	21800017 	ldw	r6,0(r4)
 10130a0:	00c00044 	movi	r3,1
 10130a4:	19800a2e 	bgeu	r3,r6,10130d0 <__fpcmp_parts_d+0x34>
 10130a8:	28800017 	ldw	r2,0(r5)
 10130ac:	1880082e 	bgeu	r3,r2,10130d0 <__fpcmp_parts_d+0x34>
 10130b0:	00c00104 	movi	r3,4
 10130b4:	30c02626 	beq	r6,r3,1013150 <__fpcmp_parts_d+0xb4>
 10130b8:	10c02226 	beq	r2,r3,1013144 <__fpcmp_parts_d+0xa8>
 10130bc:	00c00084 	movi	r3,2
 10130c0:	30c00526 	beq	r6,r3,10130d8 <__fpcmp_parts_d+0x3c>
 10130c4:	10c0071e 	bne	r2,r3,10130e4 <__fpcmp_parts_d+0x48>
 10130c8:	20800117 	ldw	r2,4(r4)
 10130cc:	1000091e 	bne	r2,zero,10130f4 <__fpcmp_parts_d+0x58>
 10130d0:	00800044 	movi	r2,1
 10130d4:	f800283a 	ret
 10130d8:	10c01a1e 	bne	r2,r3,1013144 <__fpcmp_parts_d+0xa8>
 10130dc:	0005883a 	mov	r2,zero
 10130e0:	f800283a 	ret
 10130e4:	22000117 	ldw	r8,4(r4)
 10130e8:	28800117 	ldw	r2,4(r5)
 10130ec:	40800326 	beq	r8,r2,10130fc <__fpcmp_parts_d+0x60>
 10130f0:	403ff726 	beq	r8,zero,10130d0 <__fpcmp_parts_d+0x34>
 10130f4:	00bfffc4 	movi	r2,-1
 10130f8:	f800283a 	ret
 10130fc:	20c00217 	ldw	r3,8(r4)
 1013100:	28800217 	ldw	r2,8(r5)
 1013104:	10fffa16 	blt	r2,r3,10130f0 <__fpcmp_parts_d+0x54>
 1013108:	18800916 	blt	r3,r2,1013130 <__fpcmp_parts_d+0x94>
 101310c:	21c00417 	ldw	r7,16(r4)
 1013110:	28c00417 	ldw	r3,16(r5)
 1013114:	21800317 	ldw	r6,12(r4)
 1013118:	28800317 	ldw	r2,12(r5)
 101311c:	19fff436 	bltu	r3,r7,10130f0 <__fpcmp_parts_d+0x54>
 1013120:	38c00526 	beq	r7,r3,1013138 <__fpcmp_parts_d+0x9c>
 1013124:	38c00236 	bltu	r7,r3,1013130 <__fpcmp_parts_d+0x94>
 1013128:	19ffec1e 	bne	r3,r7,10130dc <__fpcmp_parts_d+0x40>
 101312c:	30bfeb2e 	bgeu	r6,r2,10130dc <__fpcmp_parts_d+0x40>
 1013130:	403fe71e 	bne	r8,zero,10130d0 <__fpcmp_parts_d+0x34>
 1013134:	003fef06 	br	10130f4 <__fpcmp_parts_d+0x58>
 1013138:	11bffa2e 	bgeu	r2,r6,1013124 <__fpcmp_parts_d+0x88>
 101313c:	403fe426 	beq	r8,zero,10130d0 <__fpcmp_parts_d+0x34>
 1013140:	003fec06 	br	10130f4 <__fpcmp_parts_d+0x58>
 1013144:	28800117 	ldw	r2,4(r5)
 1013148:	103fe11e 	bne	r2,zero,10130d0 <__fpcmp_parts_d+0x34>
 101314c:	003fe906 	br	10130f4 <__fpcmp_parts_d+0x58>
 1013150:	11bfdd1e 	bne	r2,r6,10130c8 <__fpcmp_parts_d+0x2c>
 1013154:	28c00117 	ldw	r3,4(r5)
 1013158:	20800117 	ldw	r2,4(r4)
 101315c:	1885c83a 	sub	r2,r3,r2
 1013160:	f800283a 	ret

01013164 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1013164:	defff804 	addi	sp,sp,-32
 1013168:	dfc00715 	stw	ra,28(sp)
 101316c:	df000615 	stw	fp,24(sp)
 1013170:	df000604 	addi	fp,sp,24
 1013174:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1013178:	e0bffc17 	ldw	r2,-16(fp)
 101317c:	1004803a 	cmplt	r2,r2,zero
 1013180:	1000081e 	bne	r2,zero,10131a4 <close+0x40>
 1013184:	e0bffc17 	ldw	r2,-16(fp)
 1013188:	10800324 	muli	r2,r2,12
 101318c:	1007883a 	mov	r3,r2
 1013190:	008040b4 	movhi	r2,258
 1013194:	10801304 	addi	r2,r2,76
 1013198:	1887883a 	add	r3,r3,r2
 101319c:	e0ffff15 	stw	r3,-4(fp)
 10131a0:	00000106 	br	10131a8 <close+0x44>
 10131a4:	e03fff15 	stw	zero,-4(fp)
 10131a8:	e0bfff17 	ldw	r2,-4(fp)
 10131ac:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 10131b0:	e0bffb17 	ldw	r2,-20(fp)
 10131b4:	1005003a 	cmpeq	r2,r2,zero
 10131b8:	10001d1e 	bne	r2,zero,1013230 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 10131bc:	e0bffb17 	ldw	r2,-20(fp)
 10131c0:	10800017 	ldw	r2,0(r2)
 10131c4:	10800417 	ldw	r2,16(r2)
 10131c8:	1005003a 	cmpeq	r2,r2,zero
 10131cc:	1000071e 	bne	r2,zero,10131ec <close+0x88>
 10131d0:	e0bffb17 	ldw	r2,-20(fp)
 10131d4:	10800017 	ldw	r2,0(r2)
 10131d8:	10800417 	ldw	r2,16(r2)
 10131dc:	e13ffb17 	ldw	r4,-20(fp)
 10131e0:	103ee83a 	callr	r2
 10131e4:	e0bffe15 	stw	r2,-8(fp)
 10131e8:	00000106 	br	10131f0 <close+0x8c>
 10131ec:	e03ffe15 	stw	zero,-8(fp)
 10131f0:	e0bffe17 	ldw	r2,-8(fp)
 10131f4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 10131f8:	e13ffc17 	ldw	r4,-16(fp)
 10131fc:	1013bf00 	call	1013bf0 <alt_release_fd>
    if (rval < 0)
 1013200:	e0bffa17 	ldw	r2,-24(fp)
 1013204:	1004403a 	cmpge	r2,r2,zero
 1013208:	1000071e 	bne	r2,zero,1013228 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 101320c:	10132600 	call	1013260 <alt_get_errno>
 1013210:	e0fffa17 	ldw	r3,-24(fp)
 1013214:	00c7c83a 	sub	r3,zero,r3
 1013218:	10c00015 	stw	r3,0(r2)
      return -1;
 101321c:	00bfffc4 	movi	r2,-1
 1013220:	e0bffd15 	stw	r2,-12(fp)
 1013224:	00000806 	br	1013248 <close+0xe4>
    }
    return 0;
 1013228:	e03ffd15 	stw	zero,-12(fp)
 101322c:	00000606 	br	1013248 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1013230:	10132600 	call	1013260 <alt_get_errno>
 1013234:	1007883a 	mov	r3,r2
 1013238:	00801444 	movi	r2,81
 101323c:	18800015 	stw	r2,0(r3)
    return -1;
 1013240:	00bfffc4 	movi	r2,-1
 1013244:	e0bffd15 	stw	r2,-12(fp)
 1013248:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 101324c:	e037883a 	mov	sp,fp
 1013250:	dfc00117 	ldw	ra,4(sp)
 1013254:	df000017 	ldw	fp,0(sp)
 1013258:	dec00204 	addi	sp,sp,8
 101325c:	f800283a 	ret

01013260 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013260:	defffd04 	addi	sp,sp,-12
 1013264:	dfc00215 	stw	ra,8(sp)
 1013268:	df000115 	stw	fp,4(sp)
 101326c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013270:	008040b4 	movhi	r2,258
 1013274:	1084b204 	addi	r2,r2,4808
 1013278:	10800017 	ldw	r2,0(r2)
 101327c:	1005003a 	cmpeq	r2,r2,zero
 1013280:	1000061e 	bne	r2,zero,101329c <alt_get_errno+0x3c>
 1013284:	008040b4 	movhi	r2,258
 1013288:	1084b204 	addi	r2,r2,4808
 101328c:	10800017 	ldw	r2,0(r2)
 1013290:	103ee83a 	callr	r2
 1013294:	e0bfff15 	stw	r2,-4(fp)
 1013298:	00000306 	br	10132a8 <alt_get_errno+0x48>
 101329c:	008040b4 	movhi	r2,258
 10132a0:	108bb304 	addi	r2,r2,11980
 10132a4:	e0bfff15 	stw	r2,-4(fp)
 10132a8:	e0bfff17 	ldw	r2,-4(fp)
}
 10132ac:	e037883a 	mov	sp,fp
 10132b0:	dfc00117 	ldw	ra,4(sp)
 10132b4:	df000017 	ldw	fp,0(sp)
 10132b8:	dec00204 	addi	sp,sp,8
 10132bc:	f800283a 	ret

010132c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 10132c0:	defffc04 	addi	sp,sp,-16
 10132c4:	df000315 	stw	fp,12(sp)
 10132c8:	df000304 	addi	fp,sp,12
 10132cc:	e13ffd15 	stw	r4,-12(fp)
 10132d0:	e17ffe15 	stw	r5,-8(fp)
 10132d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 10132d8:	e0bfff17 	ldw	r2,-4(fp)
}
 10132dc:	e037883a 	mov	sp,fp
 10132e0:	df000017 	ldw	fp,0(sp)
 10132e4:	dec00104 	addi	sp,sp,4
 10132e8:	f800283a 	ret

010132ec <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 10132ec:	defffd04 	addi	sp,sp,-12
 10132f0:	df000215 	stw	fp,8(sp)
 10132f4:	df000204 	addi	fp,sp,8
 10132f8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 10132fc:	e0bfff17 	ldw	r2,-4(fp)
 1013300:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1013304:	e0bffe17 	ldw	r2,-8(fp)
 1013308:	1005003a 	cmpeq	r2,r2,zero
 101330c:	1000021e 	bne	r2,zero,1013318 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1013310:	002af070 	cmpltui	zero,zero,43969
 1013314:	00000106 	br	101331c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1013318:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 101331c:	e037883a 	mov	sp,fp
 1013320:	df000017 	ldw	fp,0(sp)
 1013324:	dec00104 	addi	sp,sp,4
 1013328:	f800283a 	ret

0101332c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 101332c:	defffd04 	addi	sp,sp,-12
 1013330:	dfc00215 	stw	ra,8(sp)
 1013334:	df000115 	stw	fp,4(sp)
 1013338:	df000104 	addi	fp,sp,4
 101333c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1013340:	008040b4 	movhi	r2,258
 1013344:	108bbf44 	addi	r2,r2,12029
 1013348:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 101334c:	e13fff17 	ldw	r4,-4(fp)
 1013350:	10132ec0 	call	10132ec <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1013354:	003fff06 	br	1013354 <_exit+0x28>

01013358 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1013358:	defff904 	addi	sp,sp,-28
 101335c:	dfc00615 	stw	ra,24(sp)
 1013360:	df000515 	stw	fp,20(sp)
 1013364:	df000504 	addi	fp,sp,20
 1013368:	e13ffc15 	stw	r4,-16(fp)
 101336c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1013370:	e0bffc17 	ldw	r2,-16(fp)
 1013374:	1004803a 	cmplt	r2,r2,zero
 1013378:	1000081e 	bne	r2,zero,101339c <fstat+0x44>
 101337c:	e0bffc17 	ldw	r2,-16(fp)
 1013380:	10800324 	muli	r2,r2,12
 1013384:	1007883a 	mov	r3,r2
 1013388:	008040b4 	movhi	r2,258
 101338c:	10801304 	addi	r2,r2,76
 1013390:	1887883a 	add	r3,r3,r2
 1013394:	e0ffff15 	stw	r3,-4(fp)
 1013398:	00000106 	br	10133a0 <fstat+0x48>
 101339c:	e03fff15 	stw	zero,-4(fp)
 10133a0:	e0bfff17 	ldw	r2,-4(fp)
 10133a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 10133a8:	e0bffb17 	ldw	r2,-20(fp)
 10133ac:	1005003a 	cmpeq	r2,r2,zero
 10133b0:	1000121e 	bne	r2,zero,10133fc <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 10133b4:	e0bffb17 	ldw	r2,-20(fp)
 10133b8:	10800017 	ldw	r2,0(r2)
 10133bc:	10800817 	ldw	r2,32(r2)
 10133c0:	1005003a 	cmpeq	r2,r2,zero
 10133c4:	1000081e 	bne	r2,zero,10133e8 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 10133c8:	e0bffb17 	ldw	r2,-20(fp)
 10133cc:	10800017 	ldw	r2,0(r2)
 10133d0:	10800817 	ldw	r2,32(r2)
 10133d4:	e13ffb17 	ldw	r4,-20(fp)
 10133d8:	e17ffd17 	ldw	r5,-12(fp)
 10133dc:	103ee83a 	callr	r2
 10133e0:	e0bffe15 	stw	r2,-8(fp)
 10133e4:	00000b06 	br	1013414 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 10133e8:	e0fffd17 	ldw	r3,-12(fp)
 10133ec:	00880004 	movi	r2,8192
 10133f0:	18800115 	stw	r2,4(r3)
      return 0;
 10133f4:	e03ffe15 	stw	zero,-8(fp)
 10133f8:	00000606 	br	1013414 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10133fc:	101342c0 	call	101342c <alt_get_errno>
 1013400:	1007883a 	mov	r3,r2
 1013404:	00801444 	movi	r2,81
 1013408:	18800015 	stw	r2,0(r3)
    return -1;
 101340c:	00bfffc4 	movi	r2,-1
 1013410:	e0bffe15 	stw	r2,-8(fp)
 1013414:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1013418:	e037883a 	mov	sp,fp
 101341c:	dfc00117 	ldw	ra,4(sp)
 1013420:	df000017 	ldw	fp,0(sp)
 1013424:	dec00204 	addi	sp,sp,8
 1013428:	f800283a 	ret

0101342c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101342c:	defffd04 	addi	sp,sp,-12
 1013430:	dfc00215 	stw	ra,8(sp)
 1013434:	df000115 	stw	fp,4(sp)
 1013438:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101343c:	008040b4 	movhi	r2,258
 1013440:	1084b204 	addi	r2,r2,4808
 1013444:	10800017 	ldw	r2,0(r2)
 1013448:	1005003a 	cmpeq	r2,r2,zero
 101344c:	1000061e 	bne	r2,zero,1013468 <alt_get_errno+0x3c>
 1013450:	008040b4 	movhi	r2,258
 1013454:	1084b204 	addi	r2,r2,4808
 1013458:	10800017 	ldw	r2,0(r2)
 101345c:	103ee83a 	callr	r2
 1013460:	e0bfff15 	stw	r2,-4(fp)
 1013464:	00000306 	br	1013474 <alt_get_errno+0x48>
 1013468:	008040b4 	movhi	r2,258
 101346c:	108bb304 	addi	r2,r2,11980
 1013470:	e0bfff15 	stw	r2,-4(fp)
 1013474:	e0bfff17 	ldw	r2,-4(fp)
}
 1013478:	e037883a 	mov	sp,fp
 101347c:	dfc00117 	ldw	ra,4(sp)
 1013480:	df000017 	ldw	fp,0(sp)
 1013484:	dec00204 	addi	sp,sp,8
 1013488:	f800283a 	ret

0101348c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 101348c:	deffff04 	addi	sp,sp,-4
 1013490:	df000015 	stw	fp,0(sp)
 1013494:	d839883a 	mov	fp,sp
  return 0;
 1013498:	0005883a 	mov	r2,zero
}
 101349c:	e037883a 	mov	sp,fp
 10134a0:	df000017 	ldw	fp,0(sp)
 10134a4:	dec00104 	addi	sp,sp,4
 10134a8:	f800283a 	ret

010134ac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 10134ac:	deffeb04 	addi	sp,sp,-84
 10134b0:	dfc01415 	stw	ra,80(sp)
 10134b4:	df001315 	stw	fp,76(sp)
 10134b8:	df001304 	addi	fp,sp,76
 10134bc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10134c0:	e0bffd17 	ldw	r2,-12(fp)
 10134c4:	1004803a 	cmplt	r2,r2,zero
 10134c8:	1000081e 	bne	r2,zero,10134ec <isatty+0x40>
 10134cc:	e0bffd17 	ldw	r2,-12(fp)
 10134d0:	10800324 	muli	r2,r2,12
 10134d4:	1007883a 	mov	r3,r2
 10134d8:	008040b4 	movhi	r2,258
 10134dc:	10801304 	addi	r2,r2,76
 10134e0:	1887883a 	add	r3,r3,r2
 10134e4:	e0ffff15 	stw	r3,-4(fp)
 10134e8:	00000106 	br	10134f0 <isatty+0x44>
 10134ec:	e03fff15 	stw	zero,-4(fp)
 10134f0:	e0bfff17 	ldw	r2,-4(fp)
 10134f4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 10134f8:	e0bfed17 	ldw	r2,-76(fp)
 10134fc:	1005003a 	cmpeq	r2,r2,zero
 1013500:	10000f1e 	bne	r2,zero,1013540 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1013504:	e0bfed17 	ldw	r2,-76(fp)
 1013508:	10800017 	ldw	r2,0(r2)
 101350c:	10800817 	ldw	r2,32(r2)
 1013510:	1004c03a 	cmpne	r2,r2,zero
 1013514:	1000031e 	bne	r2,zero,1013524 <isatty+0x78>
    {
      return 1;
 1013518:	00800044 	movi	r2,1
 101351c:	e0bffe15 	stw	r2,-8(fp)
 1013520:	00000c06 	br	1013554 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1013524:	e17fee04 	addi	r5,fp,-72
 1013528:	e13ffd17 	ldw	r4,-12(fp)
 101352c:	10133580 	call	1013358 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1013530:	e0bfef17 	ldw	r2,-68(fp)
 1013534:	10880020 	cmpeqi	r2,r2,8192
 1013538:	e0bffe15 	stw	r2,-8(fp)
 101353c:	00000506 	br	1013554 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1013540:	101356c0 	call	101356c <alt_get_errno>
 1013544:	1007883a 	mov	r3,r2
 1013548:	00801444 	movi	r2,81
 101354c:	18800015 	stw	r2,0(r3)
    return 0;
 1013550:	e03ffe15 	stw	zero,-8(fp)
 1013554:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1013558:	e037883a 	mov	sp,fp
 101355c:	dfc00117 	ldw	ra,4(sp)
 1013560:	df000017 	ldw	fp,0(sp)
 1013564:	dec00204 	addi	sp,sp,8
 1013568:	f800283a 	ret

0101356c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101356c:	defffd04 	addi	sp,sp,-12
 1013570:	dfc00215 	stw	ra,8(sp)
 1013574:	df000115 	stw	fp,4(sp)
 1013578:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101357c:	008040b4 	movhi	r2,258
 1013580:	1084b204 	addi	r2,r2,4808
 1013584:	10800017 	ldw	r2,0(r2)
 1013588:	1005003a 	cmpeq	r2,r2,zero
 101358c:	1000061e 	bne	r2,zero,10135a8 <alt_get_errno+0x3c>
 1013590:	008040b4 	movhi	r2,258
 1013594:	1084b204 	addi	r2,r2,4808
 1013598:	10800017 	ldw	r2,0(r2)
 101359c:	103ee83a 	callr	r2
 10135a0:	e0bfff15 	stw	r2,-4(fp)
 10135a4:	00000306 	br	10135b4 <alt_get_errno+0x48>
 10135a8:	008040b4 	movhi	r2,258
 10135ac:	108bb304 	addi	r2,r2,11980
 10135b0:	e0bfff15 	stw	r2,-4(fp)
 10135b4:	e0bfff17 	ldw	r2,-4(fp)
}
 10135b8:	e037883a 	mov	sp,fp
 10135bc:	dfc00117 	ldw	ra,4(sp)
 10135c0:	df000017 	ldw	fp,0(sp)
 10135c4:	dec00204 	addi	sp,sp,8
 10135c8:	f800283a 	ret

010135cc <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 10135cc:	defffa04 	addi	sp,sp,-24
 10135d0:	dfc00515 	stw	ra,20(sp)
 10135d4:	df000415 	stw	fp,16(sp)
 10135d8:	df000404 	addi	fp,sp,16
 10135dc:	e13ffd15 	stw	r4,-12(fp)
 10135e0:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 10135e4:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 10135e8:	e0bffd17 	ldw	r2,-12(fp)
 10135ec:	10800048 	cmpgei	r2,r2,1
 10135f0:	1000301e 	bne	r2,zero,10136b4 <kill+0xe8>
  {
    switch (sig)
 10135f4:	e0bffe17 	ldw	r2,-8(fp)
 10135f8:	10800828 	cmpgeui	r2,r2,32
 10135fc:	10002a1e 	bne	r2,zero,10136a8 <kill+0xdc>
 1013600:	e0bffe17 	ldw	r2,-8(fp)
 1013604:	1085883a 	add	r2,r2,r2
 1013608:	1087883a 	add	r3,r2,r2
 101360c:	00804074 	movhi	r2,257
 1013610:	108d8804 	addi	r2,r2,13856
 1013614:	1885883a 	add	r2,r3,r2
 1013618:	10800017 	ldw	r2,0(r2)
 101361c:	1000683a 	jmp	r2
 1013620:	010136c8 	cmpgei	r4,zero,1243
 1013624:	010136a8 	cmpgeui	r4,zero,1242
 1013628:	010136a8 	cmpgeui	r4,zero,1242
 101362c:	010136a0 	cmpeqi	r4,zero,1242
 1013630:	010136a0 	cmpeqi	r4,zero,1242
 1013634:	010136a0 	cmpeqi	r4,zero,1242
 1013638:	010136a0 	cmpeqi	r4,zero,1242
 101363c:	010136a8 	cmpgeui	r4,zero,1242
 1013640:	010136a0 	cmpeqi	r4,zero,1242
 1013644:	010136a0 	cmpeqi	r4,zero,1242
 1013648:	010136a0 	cmpeqi	r4,zero,1242
 101364c:	010136a0 	cmpeqi	r4,zero,1242
 1013650:	010136a0 	cmpeqi	r4,zero,1242
 1013654:	010136a0 	cmpeqi	r4,zero,1242
 1013658:	010136a0 	cmpeqi	r4,zero,1242
 101365c:	010136a0 	cmpeqi	r4,zero,1242
 1013660:	010136c8 	cmpgei	r4,zero,1243
 1013664:	010136a8 	cmpgeui	r4,zero,1242
 1013668:	010136a8 	cmpgeui	r4,zero,1242
 101366c:	010136a8 	cmpgeui	r4,zero,1242
 1013670:	010136c8 	cmpgei	r4,zero,1243
 1013674:	010136a8 	cmpgeui	r4,zero,1242
 1013678:	010136a8 	cmpgeui	r4,zero,1242
 101367c:	010136a0 	cmpeqi	r4,zero,1242
 1013680:	010136a0 	cmpeqi	r4,zero,1242
 1013684:	010136a0 	cmpeqi	r4,zero,1242
 1013688:	010136a0 	cmpeqi	r4,zero,1242
 101368c:	010136a0 	cmpeqi	r4,zero,1242
 1013690:	010136a8 	cmpgeui	r4,zero,1242
 1013694:	010136a8 	cmpgeui	r4,zero,1242
 1013698:	010136a0 	cmpeqi	r4,zero,1242
 101369c:	010136a0 	cmpeqi	r4,zero,1242
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 10136a0:	0009883a 	mov	r4,zero
 10136a4:	101332c0 	call	101332c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 10136a8:	00800584 	movi	r2,22
 10136ac:	e0bffc15 	stw	r2,-16(fp)
 10136b0:	00000506 	br	10136c8 <kill+0xfc>
    }
  }

  else if (pid > 0)
 10136b4:	e0bffd17 	ldw	r2,-12(fp)
 10136b8:	10800050 	cmplti	r2,r2,1
 10136bc:	1000021e 	bne	r2,zero,10136c8 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 10136c0:	008000c4 	movi	r2,3
 10136c4:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 10136c8:	e0bffc17 	ldw	r2,-16(fp)
 10136cc:	1005003a 	cmpeq	r2,r2,zero
 10136d0:	1000071e 	bne	r2,zero,10136f0 <kill+0x124>
  {
    ALT_ERRNO = status;
 10136d4:	101370c0 	call	101370c <alt_get_errno>
 10136d8:	1007883a 	mov	r3,r2
 10136dc:	e0bffc17 	ldw	r2,-16(fp)
 10136e0:	18800015 	stw	r2,0(r3)
    return -1;
 10136e4:	00bfffc4 	movi	r2,-1
 10136e8:	e0bfff15 	stw	r2,-4(fp)
 10136ec:	00000106 	br	10136f4 <kill+0x128>
  }

  return 0;
 10136f0:	e03fff15 	stw	zero,-4(fp)
 10136f4:	e0bfff17 	ldw	r2,-4(fp)
}
 10136f8:	e037883a 	mov	sp,fp
 10136fc:	dfc00117 	ldw	ra,4(sp)
 1013700:	df000017 	ldw	fp,0(sp)
 1013704:	dec00204 	addi	sp,sp,8
 1013708:	f800283a 	ret

0101370c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101370c:	defffd04 	addi	sp,sp,-12
 1013710:	dfc00215 	stw	ra,8(sp)
 1013714:	df000115 	stw	fp,4(sp)
 1013718:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101371c:	008040b4 	movhi	r2,258
 1013720:	1084b204 	addi	r2,r2,4808
 1013724:	10800017 	ldw	r2,0(r2)
 1013728:	1005003a 	cmpeq	r2,r2,zero
 101372c:	1000061e 	bne	r2,zero,1013748 <alt_get_errno+0x3c>
 1013730:	008040b4 	movhi	r2,258
 1013734:	1084b204 	addi	r2,r2,4808
 1013738:	10800017 	ldw	r2,0(r2)
 101373c:	103ee83a 	callr	r2
 1013740:	e0bfff15 	stw	r2,-4(fp)
 1013744:	00000306 	br	1013754 <alt_get_errno+0x48>
 1013748:	008040b4 	movhi	r2,258
 101374c:	108bb304 	addi	r2,r2,11980
 1013750:	e0bfff15 	stw	r2,-4(fp)
 1013754:	e0bfff17 	ldw	r2,-4(fp)
}
 1013758:	e037883a 	mov	sp,fp
 101375c:	dfc00117 	ldw	ra,4(sp)
 1013760:	df000017 	ldw	fp,0(sp)
 1013764:	dec00204 	addi	sp,sp,8
 1013768:	f800283a 	ret

0101376c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 101376c:	defffe04 	addi	sp,sp,-8
 1013770:	dfc00115 	stw	ra,4(sp)
 1013774:	df000015 	stw	fp,0(sp)
 1013778:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 101377c:	010040b4 	movhi	r4,258
 1013780:	2104d604 	addi	r4,r4,4952
 1013784:	014040b4 	movhi	r5,258
 1013788:	297e0404 	addi	r5,r5,-2032
 101378c:	018040b4 	movhi	r6,258
 1013790:	3184d604 	addi	r6,r6,4952
 1013794:	10137ec0 	call	10137ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1013798:	01004034 	movhi	r4,256
 101379c:	21000804 	addi	r4,r4,32
 10137a0:	01404034 	movhi	r5,256
 10137a4:	29400804 	addi	r5,r5,32
 10137a8:	01804034 	movhi	r6,256
 10137ac:	31806f04 	addi	r6,r6,444
 10137b0:	10137ec0 	call	10137ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 10137b4:	010040b4 	movhi	r4,258
 10137b8:	213b6f04 	addi	r4,r4,-4676
 10137bc:	014040b4 	movhi	r5,258
 10137c0:	297b6f04 	addi	r5,r5,-4676
 10137c4:	018040b4 	movhi	r6,258
 10137c8:	31be0404 	addi	r6,r6,-2032
 10137cc:	10137ec0 	call	10137ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 10137d0:	101d4bc0 	call	101d4bc <alt_dcache_flush_all>
  alt_icache_flush_all();
 10137d4:	101d6dc0 	call	101d6dc <alt_icache_flush_all>
}
 10137d8:	e037883a 	mov	sp,fp
 10137dc:	dfc00117 	ldw	ra,4(sp)
 10137e0:	df000017 	ldw	fp,0(sp)
 10137e4:	dec00204 	addi	sp,sp,8
 10137e8:	f800283a 	ret

010137ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 10137ec:	defffc04 	addi	sp,sp,-16
 10137f0:	df000315 	stw	fp,12(sp)
 10137f4:	df000304 	addi	fp,sp,12
 10137f8:	e13ffd15 	stw	r4,-12(fp)
 10137fc:	e17ffe15 	stw	r5,-8(fp)
 1013800:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1013804:	e0fffe17 	ldw	r3,-8(fp)
 1013808:	e0bffd17 	ldw	r2,-12(fp)
 101380c:	18800e26 	beq	r3,r2,1013848 <alt_load_section+0x5c>
  {
    while( to != end )
 1013810:	00000a06 	br	101383c <alt_load_section+0x50>
    {
      *to++ = *from++;
 1013814:	e0bffd17 	ldw	r2,-12(fp)
 1013818:	10c00017 	ldw	r3,0(r2)
 101381c:	e0bffe17 	ldw	r2,-8(fp)
 1013820:	10c00015 	stw	r3,0(r2)
 1013824:	e0bffe17 	ldw	r2,-8(fp)
 1013828:	10800104 	addi	r2,r2,4
 101382c:	e0bffe15 	stw	r2,-8(fp)
 1013830:	e0bffd17 	ldw	r2,-12(fp)
 1013834:	10800104 	addi	r2,r2,4
 1013838:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 101383c:	e0fffe17 	ldw	r3,-8(fp)
 1013840:	e0bfff17 	ldw	r2,-4(fp)
 1013844:	18bff31e 	bne	r3,r2,1013814 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1013848:	e037883a 	mov	sp,fp
 101384c:	df000017 	ldw	fp,0(sp)
 1013850:	dec00104 	addi	sp,sp,4
 1013854:	f800283a 	ret

01013858 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1013858:	defff804 	addi	sp,sp,-32
 101385c:	dfc00715 	stw	ra,28(sp)
 1013860:	df000615 	stw	fp,24(sp)
 1013864:	df000604 	addi	fp,sp,24
 1013868:	e13ffc15 	stw	r4,-16(fp)
 101386c:	e17ffd15 	stw	r5,-12(fp)
 1013870:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1013874:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1013878:	e0bffc17 	ldw	r2,-16(fp)
 101387c:	1004803a 	cmplt	r2,r2,zero
 1013880:	1000081e 	bne	r2,zero,10138a4 <lseek+0x4c>
 1013884:	e0bffc17 	ldw	r2,-16(fp)
 1013888:	10800324 	muli	r2,r2,12
 101388c:	1007883a 	mov	r3,r2
 1013890:	008040b4 	movhi	r2,258
 1013894:	10801304 	addi	r2,r2,76
 1013898:	1887883a 	add	r3,r3,r2
 101389c:	e0ffff15 	stw	r3,-4(fp)
 10138a0:	00000106 	br	10138a8 <lseek+0x50>
 10138a4:	e03fff15 	stw	zero,-4(fp)
 10138a8:	e0bfff17 	ldw	r2,-4(fp)
 10138ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 10138b0:	e0bffb17 	ldw	r2,-20(fp)
 10138b4:	1005003a 	cmpeq	r2,r2,zero
 10138b8:	1000111e 	bne	r2,zero,1013900 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 10138bc:	e0bffb17 	ldw	r2,-20(fp)
 10138c0:	10800017 	ldw	r2,0(r2)
 10138c4:	10800717 	ldw	r2,28(r2)
 10138c8:	1005003a 	cmpeq	r2,r2,zero
 10138cc:	1000091e 	bne	r2,zero,10138f4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 10138d0:	e0bffb17 	ldw	r2,-20(fp)
 10138d4:	10800017 	ldw	r2,0(r2)
 10138d8:	10800717 	ldw	r2,28(r2)
 10138dc:	e13ffb17 	ldw	r4,-20(fp)
 10138e0:	e17ffd17 	ldw	r5,-12(fp)
 10138e4:	e1bffe17 	ldw	r6,-8(fp)
 10138e8:	103ee83a 	callr	r2
 10138ec:	e0bffa15 	stw	r2,-24(fp)
 10138f0:	00000506 	br	1013908 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 10138f4:	00bfde84 	movi	r2,-134
 10138f8:	e0bffa15 	stw	r2,-24(fp)
 10138fc:	00000206 	br	1013908 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 1013900:	00bfebc4 	movi	r2,-81
 1013904:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1013908:	e0bffa17 	ldw	r2,-24(fp)
 101390c:	1004403a 	cmpge	r2,r2,zero
 1013910:	1000071e 	bne	r2,zero,1013930 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 1013914:	10139480 	call	1013948 <alt_get_errno>
 1013918:	1007883a 	mov	r3,r2
 101391c:	e0bffa17 	ldw	r2,-24(fp)
 1013920:	0085c83a 	sub	r2,zero,r2
 1013924:	18800015 	stw	r2,0(r3)
    rc = -1;
 1013928:	00bfffc4 	movi	r2,-1
 101392c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1013930:	e0bffa17 	ldw	r2,-24(fp)
}
 1013934:	e037883a 	mov	sp,fp
 1013938:	dfc00117 	ldw	ra,4(sp)
 101393c:	df000017 	ldw	fp,0(sp)
 1013940:	dec00204 	addi	sp,sp,8
 1013944:	f800283a 	ret

01013948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013948:	defffd04 	addi	sp,sp,-12
 101394c:	dfc00215 	stw	ra,8(sp)
 1013950:	df000115 	stw	fp,4(sp)
 1013954:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013958:	008040b4 	movhi	r2,258
 101395c:	1084b204 	addi	r2,r2,4808
 1013960:	10800017 	ldw	r2,0(r2)
 1013964:	1005003a 	cmpeq	r2,r2,zero
 1013968:	1000061e 	bne	r2,zero,1013984 <alt_get_errno+0x3c>
 101396c:	008040b4 	movhi	r2,258
 1013970:	1084b204 	addi	r2,r2,4808
 1013974:	10800017 	ldw	r2,0(r2)
 1013978:	103ee83a 	callr	r2
 101397c:	e0bfff15 	stw	r2,-4(fp)
 1013980:	00000306 	br	1013990 <alt_get_errno+0x48>
 1013984:	008040b4 	movhi	r2,258
 1013988:	108bb304 	addi	r2,r2,11980
 101398c:	e0bfff15 	stw	r2,-4(fp)
 1013990:	e0bfff17 	ldw	r2,-4(fp)
}
 1013994:	e037883a 	mov	sp,fp
 1013998:	dfc00117 	ldw	ra,4(sp)
 101399c:	df000017 	ldw	fp,0(sp)
 10139a0:	dec00204 	addi	sp,sp,8
 10139a4:	f800283a 	ret

010139a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 10139a8:	defffb04 	addi	sp,sp,-20
 10139ac:	dfc00415 	stw	ra,16(sp)
 10139b0:	df000315 	stw	fp,12(sp)
 10139b4:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 10139b8:	0009883a 	mov	r4,zero
 10139bc:	101c4380 	call	101c438 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 10139c0:	1014a940 	call	1014a94 <OSInit>
 10139c4:	01000044 	movi	r4,1
 10139c8:	10199580 	call	1019958 <OSSemCreate>
 10139cc:	1007883a 	mov	r3,r2
 10139d0:	008040b4 	movhi	r2,258
 10139d4:	108bbc04 	addi	r2,r2,12016
 10139d8:	10c00015 	stw	r3,0(r2)
 10139dc:	01000044 	movi	r4,1
 10139e0:	10199580 	call	1019958 <OSSemCreate>
 10139e4:	1007883a 	mov	r3,r2
 10139e8:	008040b4 	movhi	r2,258
 10139ec:	108bbe04 	addi	r2,r2,12024
 10139f0:	10c00015 	stw	r3,0(r2)
 10139f4:	008040b4 	movhi	r2,258
 10139f8:	108bb704 	addi	r2,r2,11996
 10139fc:	e0bffd15 	stw	r2,-12(fp)
 1013a00:	00800044 	movi	r2,1
 1013a04:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 1013a08:	e13ffe0b 	ldhu	r4,-8(fp)
 1013a0c:	10199580 	call	1019958 <OSSemCreate>
 1013a10:	1007883a 	mov	r3,r2
 1013a14:	e0bffd17 	ldw	r2,-12(fp)
 1013a18:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1013a1c:	101c46c0 	call	101c46c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1013a20:	010040b4 	movhi	r4,258
 1013a24:	213dae04 	addi	r4,r4,-2376
 1013a28:	014040b4 	movhi	r5,258
 1013a2c:	297dae04 	addi	r5,r5,-2376
 1013a30:	018040b4 	movhi	r6,258
 1013a34:	31bdae04 	addi	r6,r6,-2376
 1013a38:	101da9c0 	call	101da9c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1013a3c:	101d6140 	call	101d614 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1013a40:	010040b4 	movhi	r4,258
 1013a44:	21359e04 	addi	r4,r4,-10632
 1013a48:	101e7c00 	call	101e7c0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1013a4c:	d1271f17 	ldw	r4,-25476(gp)
 1013a50:	d1672017 	ldw	r5,-25472(gp)
 1013a54:	d1a72117 	ldw	r6,-25468(gp)
 1013a58:	10015f80 	call	10015f8 <main>
 1013a5c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1013a60:	01000044 	movi	r4,1
 1013a64:	10131640 	call	1013164 <close>
  exit (result);
 1013a68:	e13fff17 	ldw	r4,-4(fp)
 1013a6c:	101e7d40 	call	101e7d4 <exit>

01013a70 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1013a70:	defff704 	addi	sp,sp,-36
 1013a74:	dfc00815 	stw	ra,32(sp)
 1013a78:	df000715 	stw	fp,28(sp)
 1013a7c:	df000704 	addi	fp,sp,28
 1013a80:	e13ffb15 	stw	r4,-20(fp)
 1013a84:	e17ffc15 	stw	r5,-16(fp)
 1013a88:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1013a8c:	e0bffb17 	ldw	r2,-20(fp)
 1013a90:	1004803a 	cmplt	r2,r2,zero
 1013a94:	1000081e 	bne	r2,zero,1013ab8 <read+0x48>
 1013a98:	e0bffb17 	ldw	r2,-20(fp)
 1013a9c:	10800324 	muli	r2,r2,12
 1013aa0:	1007883a 	mov	r3,r2
 1013aa4:	008040b4 	movhi	r2,258
 1013aa8:	10801304 	addi	r2,r2,76
 1013aac:	1887883a 	add	r3,r3,r2
 1013ab0:	e0ffff15 	stw	r3,-4(fp)
 1013ab4:	00000106 	br	1013abc <read+0x4c>
 1013ab8:	e03fff15 	stw	zero,-4(fp)
 1013abc:	e0bfff17 	ldw	r2,-4(fp)
 1013ac0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1013ac4:	e0bffa17 	ldw	r2,-24(fp)
 1013ac8:	1005003a 	cmpeq	r2,r2,zero
 1013acc:	1000241e 	bne	r2,zero,1013b60 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1013ad0:	e0bffa17 	ldw	r2,-24(fp)
 1013ad4:	10800217 	ldw	r2,8(r2)
 1013ad8:	108000cc 	andi	r2,r2,3
 1013adc:	10800060 	cmpeqi	r2,r2,1
 1013ae0:	10001a1e 	bne	r2,zero,1013b4c <read+0xdc>
 1013ae4:	e0bffa17 	ldw	r2,-24(fp)
 1013ae8:	10800017 	ldw	r2,0(r2)
 1013aec:	10800517 	ldw	r2,20(r2)
 1013af0:	1005003a 	cmpeq	r2,r2,zero
 1013af4:	1000151e 	bne	r2,zero,1013b4c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1013af8:	e0bffa17 	ldw	r2,-24(fp)
 1013afc:	10800017 	ldw	r2,0(r2)
 1013b00:	10800517 	ldw	r2,20(r2)
 1013b04:	e17ffc17 	ldw	r5,-16(fp)
 1013b08:	e1bffd17 	ldw	r6,-12(fp)
 1013b0c:	e13ffa17 	ldw	r4,-24(fp)
 1013b10:	103ee83a 	callr	r2
 1013b14:	e0bff915 	stw	r2,-28(fp)
 1013b18:	e0bff917 	ldw	r2,-28(fp)
 1013b1c:	1004403a 	cmpge	r2,r2,zero
 1013b20:	1000071e 	bne	r2,zero,1013b40 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 1013b24:	1013b900 	call	1013b90 <alt_get_errno>
 1013b28:	e0fff917 	ldw	r3,-28(fp)
 1013b2c:	00c7c83a 	sub	r3,zero,r3
 1013b30:	10c00015 	stw	r3,0(r2)
          return -1;
 1013b34:	00bfffc4 	movi	r2,-1
 1013b38:	e0bffe15 	stw	r2,-8(fp)
 1013b3c:	00000e06 	br	1013b78 <read+0x108>
        }
        return rval;
 1013b40:	e0bff917 	ldw	r2,-28(fp)
 1013b44:	e0bffe15 	stw	r2,-8(fp)
 1013b48:	00000b06 	br	1013b78 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1013b4c:	1013b900 	call	1013b90 <alt_get_errno>
 1013b50:	1007883a 	mov	r3,r2
 1013b54:	00800344 	movi	r2,13
 1013b58:	18800015 	stw	r2,0(r3)
 1013b5c:	00000406 	br	1013b70 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1013b60:	1013b900 	call	1013b90 <alt_get_errno>
 1013b64:	1007883a 	mov	r3,r2
 1013b68:	00801444 	movi	r2,81
 1013b6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1013b70:	00bfffc4 	movi	r2,-1
 1013b74:	e0bffe15 	stw	r2,-8(fp)
 1013b78:	e0bffe17 	ldw	r2,-8(fp)
}
 1013b7c:	e037883a 	mov	sp,fp
 1013b80:	dfc00117 	ldw	ra,4(sp)
 1013b84:	df000017 	ldw	fp,0(sp)
 1013b88:	dec00204 	addi	sp,sp,8
 1013b8c:	f800283a 	ret

01013b90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013b90:	defffd04 	addi	sp,sp,-12
 1013b94:	dfc00215 	stw	ra,8(sp)
 1013b98:	df000115 	stw	fp,4(sp)
 1013b9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013ba0:	008040b4 	movhi	r2,258
 1013ba4:	1084b204 	addi	r2,r2,4808
 1013ba8:	10800017 	ldw	r2,0(r2)
 1013bac:	1005003a 	cmpeq	r2,r2,zero
 1013bb0:	1000061e 	bne	r2,zero,1013bcc <alt_get_errno+0x3c>
 1013bb4:	008040b4 	movhi	r2,258
 1013bb8:	1084b204 	addi	r2,r2,4808
 1013bbc:	10800017 	ldw	r2,0(r2)
 1013bc0:	103ee83a 	callr	r2
 1013bc4:	e0bfff15 	stw	r2,-4(fp)
 1013bc8:	00000306 	br	1013bd8 <alt_get_errno+0x48>
 1013bcc:	008040b4 	movhi	r2,258
 1013bd0:	108bb304 	addi	r2,r2,11980
 1013bd4:	e0bfff15 	stw	r2,-4(fp)
 1013bd8:	e0bfff17 	ldw	r2,-4(fp)
}
 1013bdc:	e037883a 	mov	sp,fp
 1013be0:	dfc00117 	ldw	ra,4(sp)
 1013be4:	df000017 	ldw	fp,0(sp)
 1013be8:	dec00204 	addi	sp,sp,8
 1013bec:	f800283a 	ret

01013bf0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1013bf0:	defffe04 	addi	sp,sp,-8
 1013bf4:	df000115 	stw	fp,4(sp)
 1013bf8:	df000104 	addi	fp,sp,4
 1013bfc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1013c00:	e0bfff17 	ldw	r2,-4(fp)
 1013c04:	108000d0 	cmplti	r2,r2,3
 1013c08:	10000d1e 	bne	r2,zero,1013c40 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1013c0c:	e0bfff17 	ldw	r2,-4(fp)
 1013c10:	00c040b4 	movhi	r3,258
 1013c14:	18c01304 	addi	r3,r3,76
 1013c18:	10800324 	muli	r2,r2,12
 1013c1c:	10c5883a 	add	r2,r2,r3
 1013c20:	10800204 	addi	r2,r2,8
 1013c24:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1013c28:	e0bfff17 	ldw	r2,-4(fp)
 1013c2c:	00c040b4 	movhi	r3,258
 1013c30:	18c01304 	addi	r3,r3,76
 1013c34:	10800324 	muli	r2,r2,12
 1013c38:	10c5883a 	add	r2,r2,r3
 1013c3c:	10000015 	stw	zero,0(r2)
  }
}
 1013c40:	e037883a 	mov	sp,fp
 1013c44:	df000017 	ldw	fp,0(sp)
 1013c48:	dec00104 	addi	sp,sp,4
 1013c4c:	f800283a 	ret

01013c50 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1013c50:	defff804 	addi	sp,sp,-32
 1013c54:	df000715 	stw	fp,28(sp)
 1013c58:	df000704 	addi	fp,sp,28
 1013c5c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013c60:	0005303a 	rdctl	r2,status
 1013c64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013c68:	e0fffb17 	ldw	r3,-20(fp)
 1013c6c:	00bfff84 	movi	r2,-2
 1013c70:	1884703a 	and	r2,r3,r2
 1013c74:	1001703a 	wrctl	status,r2
  
  return context;
 1013c78:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1013c7c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1013c80:	d0a01a17 	ldw	r2,-32664(gp)
 1013c84:	10c000c4 	addi	r3,r2,3
 1013c88:	00bfff04 	movi	r2,-4
 1013c8c:	1884703a 	and	r2,r3,r2
 1013c90:	d0a01a15 	stw	r2,-32664(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1013c94:	d0e01a17 	ldw	r3,-32664(gp)
 1013c98:	e0bffe17 	ldw	r2,-8(fp)
 1013c9c:	1887883a 	add	r3,r3,r2
 1013ca0:	00808034 	movhi	r2,512
 1013ca4:	10800004 	addi	r2,r2,0
 1013ca8:	10c0072e 	bgeu	r2,r3,1013cc8 <sbrk+0x78>
 1013cac:	e0bffd17 	ldw	r2,-12(fp)
 1013cb0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013cb4:	e0bffa17 	ldw	r2,-24(fp)
 1013cb8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1013cbc:	00bfffc4 	movi	r2,-1
 1013cc0:	e0bfff15 	stw	r2,-4(fp)
 1013cc4:	00000c06 	br	1013cf8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1013cc8:	d0a01a17 	ldw	r2,-32664(gp)
 1013ccc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 1013cd0:	d0e01a17 	ldw	r3,-32664(gp)
 1013cd4:	e0bffe17 	ldw	r2,-8(fp)
 1013cd8:	1885883a 	add	r2,r3,r2
 1013cdc:	d0a01a15 	stw	r2,-32664(gp)
 1013ce0:	e0bffd17 	ldw	r2,-12(fp)
 1013ce4:	e0bff915 	stw	r2,-28(fp)
 1013ce8:	e0bff917 	ldw	r2,-28(fp)
 1013cec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1013cf0:	e0bffc17 	ldw	r2,-16(fp)
 1013cf4:	e0bfff15 	stw	r2,-4(fp)
 1013cf8:	e0bfff17 	ldw	r2,-4(fp)
} 
 1013cfc:	e037883a 	mov	sp,fp
 1013d00:	df000017 	ldw	fp,0(sp)
 1013d04:	dec00104 	addi	sp,sp,4
 1013d08:	f800283a 	ret

01013d0c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1013d0c:	defff704 	addi	sp,sp,-36
 1013d10:	dfc00815 	stw	ra,32(sp)
 1013d14:	df000715 	stw	fp,28(sp)
 1013d18:	df000704 	addi	fp,sp,28
 1013d1c:	e13ffb15 	stw	r4,-20(fp)
 1013d20:	e17ffc15 	stw	r5,-16(fp)
 1013d24:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1013d28:	e0bffb17 	ldw	r2,-20(fp)
 1013d2c:	1004803a 	cmplt	r2,r2,zero
 1013d30:	1000081e 	bne	r2,zero,1013d54 <write+0x48>
 1013d34:	e0bffb17 	ldw	r2,-20(fp)
 1013d38:	10800324 	muli	r2,r2,12
 1013d3c:	1007883a 	mov	r3,r2
 1013d40:	008040b4 	movhi	r2,258
 1013d44:	10801304 	addi	r2,r2,76
 1013d48:	1887883a 	add	r3,r3,r2
 1013d4c:	e0ffff15 	stw	r3,-4(fp)
 1013d50:	00000106 	br	1013d58 <write+0x4c>
 1013d54:	e03fff15 	stw	zero,-4(fp)
 1013d58:	e0bfff17 	ldw	r2,-4(fp)
 1013d5c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1013d60:	e0bffa17 	ldw	r2,-24(fp)
 1013d64:	1005003a 	cmpeq	r2,r2,zero
 1013d68:	1000241e 	bne	r2,zero,1013dfc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1013d6c:	e0bffa17 	ldw	r2,-24(fp)
 1013d70:	10800217 	ldw	r2,8(r2)
 1013d74:	108000cc 	andi	r2,r2,3
 1013d78:	1005003a 	cmpeq	r2,r2,zero
 1013d7c:	10001a1e 	bne	r2,zero,1013de8 <write+0xdc>
 1013d80:	e0bffa17 	ldw	r2,-24(fp)
 1013d84:	10800017 	ldw	r2,0(r2)
 1013d88:	10800617 	ldw	r2,24(r2)
 1013d8c:	1005003a 	cmpeq	r2,r2,zero
 1013d90:	1000151e 	bne	r2,zero,1013de8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1013d94:	e0bffa17 	ldw	r2,-24(fp)
 1013d98:	10800017 	ldw	r2,0(r2)
 1013d9c:	10800617 	ldw	r2,24(r2)
 1013da0:	e17ffc17 	ldw	r5,-16(fp)
 1013da4:	e1bffd17 	ldw	r6,-12(fp)
 1013da8:	e13ffa17 	ldw	r4,-24(fp)
 1013dac:	103ee83a 	callr	r2
 1013db0:	e0bff915 	stw	r2,-28(fp)
 1013db4:	e0bff917 	ldw	r2,-28(fp)
 1013db8:	1004403a 	cmpge	r2,r2,zero
 1013dbc:	1000071e 	bne	r2,zero,1013ddc <write+0xd0>
      {
        ALT_ERRNO = -rval;
 1013dc0:	1013e2c0 	call	1013e2c <alt_get_errno>
 1013dc4:	e0fff917 	ldw	r3,-28(fp)
 1013dc8:	00c7c83a 	sub	r3,zero,r3
 1013dcc:	10c00015 	stw	r3,0(r2)
        return -1;
 1013dd0:	00bfffc4 	movi	r2,-1
 1013dd4:	e0bffe15 	stw	r2,-8(fp)
 1013dd8:	00000e06 	br	1013e14 <write+0x108>
      }
      return rval;
 1013ddc:	e0bff917 	ldw	r2,-28(fp)
 1013de0:	e0bffe15 	stw	r2,-8(fp)
 1013de4:	00000b06 	br	1013e14 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1013de8:	1013e2c0 	call	1013e2c <alt_get_errno>
 1013dec:	1007883a 	mov	r3,r2
 1013df0:	00800344 	movi	r2,13
 1013df4:	18800015 	stw	r2,0(r3)
 1013df8:	00000406 	br	1013e0c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1013dfc:	1013e2c0 	call	1013e2c <alt_get_errno>
 1013e00:	1007883a 	mov	r3,r2
 1013e04:	00801444 	movi	r2,81
 1013e08:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1013e0c:	00bfffc4 	movi	r2,-1
 1013e10:	e0bffe15 	stw	r2,-8(fp)
 1013e14:	e0bffe17 	ldw	r2,-8(fp)
}
 1013e18:	e037883a 	mov	sp,fp
 1013e1c:	dfc00117 	ldw	ra,4(sp)
 1013e20:	df000017 	ldw	fp,0(sp)
 1013e24:	dec00204 	addi	sp,sp,8
 1013e28:	f800283a 	ret

01013e2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013e2c:	defffd04 	addi	sp,sp,-12
 1013e30:	dfc00215 	stw	ra,8(sp)
 1013e34:	df000115 	stw	fp,4(sp)
 1013e38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013e3c:	008040b4 	movhi	r2,258
 1013e40:	1084b204 	addi	r2,r2,4808
 1013e44:	10800017 	ldw	r2,0(r2)
 1013e48:	1005003a 	cmpeq	r2,r2,zero
 1013e4c:	1000061e 	bne	r2,zero,1013e68 <alt_get_errno+0x3c>
 1013e50:	008040b4 	movhi	r2,258
 1013e54:	1084b204 	addi	r2,r2,4808
 1013e58:	10800017 	ldw	r2,0(r2)
 1013e5c:	103ee83a 	callr	r2
 1013e60:	e0bfff15 	stw	r2,-4(fp)
 1013e64:	00000306 	br	1013e74 <alt_get_errno+0x48>
 1013e68:	008040b4 	movhi	r2,258
 1013e6c:	108bb304 	addi	r2,r2,11980
 1013e70:	e0bfff15 	stw	r2,-4(fp)
 1013e74:	e0bfff17 	ldw	r2,-4(fp)
}
 1013e78:	e037883a 	mov	sp,fp
 1013e7c:	dfc00117 	ldw	ra,4(sp)
 1013e80:	df000017 	ldw	fp,0(sp)
 1013e84:	dec00204 	addi	sp,sp,8
 1013e88:	f800283a 	ret

01013e8c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 1013e8c:	deffdf04 	addi	sp,sp,-132
 1013e90:	dfc02015 	stw	ra,128(sp)
 1013e94:	df001f15 	stw	fp,124(sp)
 1013e98:	df001f04 	addi	fp,sp,124
 1013e9c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 1013ea0:	e17fe204 	addi	r5,fp,-120
 1013ea4:	01003fc4 	movi	r4,255
 1013ea8:	101bce00 	call	101bce0 <OSTaskQuery>
 1013eac:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 1013eb0:	e0bffe83 	ldbu	r2,-6(fp)
 1013eb4:	10803fcc 	andi	r2,r2,255
 1013eb8:	1004c03a 	cmpne	r2,r2,zero
 1013ebc:	1000191e 	bne	r2,zero,1013f24 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 1013ec0:	e0bfee83 	ldbu	r2,-70(fp)
 1013ec4:	10803fcc 	andi	r2,r2,255
 1013ec8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 1013ecc:	d1272317 	ldw	r4,-25460(gp)
 1013ed0:	e17ffd04 	addi	r5,fp,-12
 1013ed4:	101a22c0 	call	101a22c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 1013ed8:	e0bffe43 	ldbu	r2,-7(fp)
 1013edc:	10803fcc 	andi	r2,r2,255
 1013ee0:	1005003a 	cmpeq	r2,r2,zero
 1013ee4:	1000071e 	bne	r2,zero,1013f04 <__env_lock+0x78>
 1013ee8:	d0e01b17 	ldw	r3,-32660(gp)
 1013eec:	e0bfe117 	ldw	r2,-124(fp)
 1013ef0:	10c0041e 	bne	r2,r3,1013f04 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 1013ef4:	d0a72217 	ldw	r2,-25464(gp)
 1013ef8:	10800044 	addi	r2,r2,1
 1013efc:	d0a72215 	stw	r2,-25464(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 1013f00:	00000806 	br	1013f24 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 1013f04:	d1272317 	ldw	r4,-25460(gp)
 1013f08:	e1bffe84 	addi	r6,fp,-6
 1013f0c:	000b883a 	mov	r5,zero
 1013f10:	1019d0c0 	call	1019d0c <OSSemPend>
    locks  = 1;
 1013f14:	00800044 	movi	r2,1
 1013f18:	d0a72215 	stw	r2,-25464(gp)
    lockid = id;
 1013f1c:	e0bfe117 	ldw	r2,-124(fp)
 1013f20:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 1013f24:	e037883a 	mov	sp,fp
 1013f28:	dfc00117 	ldw	ra,4(sp)
 1013f2c:	df000017 	ldw	fp,0(sp)
 1013f30:	dec00204 	addi	sp,sp,8
 1013f34:	f800283a 	ret

01013f38 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 1013f38:	defffd04 	addi	sp,sp,-12
 1013f3c:	dfc00215 	stw	ra,8(sp)
 1013f40:	df000115 	stw	fp,4(sp)
 1013f44:	df000104 	addi	fp,sp,4
 1013f48:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 1013f4c:	d0a72217 	ldw	r2,-25464(gp)
 1013f50:	1005003a 	cmpeq	r2,r2,zero
 1013f54:	10000a1e 	bne	r2,zero,1013f80 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 1013f58:	d0a72217 	ldw	r2,-25464(gp)
 1013f5c:	10bfffc4 	addi	r2,r2,-1
 1013f60:	d0a72215 	stw	r2,-25464(gp)
 1013f64:	d0a72217 	ldw	r2,-25464(gp)
 1013f68:	1004c03a 	cmpne	r2,r2,zero
 1013f6c:	1000041e 	bne	r2,zero,1013f80 <__env_unlock+0x48>
  {
    lockid = -1;
 1013f70:	00bfffc4 	movi	r2,-1
 1013f74:	d0a01b15 	stw	r2,-32660(gp)
    OSSemPost( alt_envsem );
 1013f78:	d1272317 	ldw	r4,-25460(gp)
 1013f7c:	101a1040 	call	101a104 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 1013f80:	e037883a 	mov	sp,fp
 1013f84:	dfc00117 	ldw	ra,4(sp)
 1013f88:	df000017 	ldw	fp,0(sp)
 1013f8c:	dec00204 	addi	sp,sp,8
 1013f90:	f800283a 	ret

01013f94 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 1013f94:	deffdb04 	addi	sp,sp,-148
 1013f98:	dfc02415 	stw	ra,144(sp)
 1013f9c:	df002315 	stw	fp,140(sp)
 1013fa0:	df002304 	addi	fp,sp,140
 1013fa4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1013fa8:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 1013fac:	008040b4 	movhi	r2,258
 1013fb0:	108bbf44 	addi	r2,r2,12029
 1013fb4:	10800003 	ldbu	r2,0(r2)
 1013fb8:	10803fcc 	andi	r2,r2,255
 1013fbc:	10800058 	cmpnei	r2,r2,1
 1013fc0:	1000311e 	bne	r2,zero,1014088 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 1013fc4:	e17fe204 	addi	r5,fp,-120
 1013fc8:	01003fc4 	movi	r4,255
 1013fcc:	101bce00 	call	101bce0 <OSTaskQuery>
 1013fd0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 1013fd4:	e0bffe83 	ldbu	r2,-6(fp)
 1013fd8:	10803fcc 	andi	r2,r2,255
 1013fdc:	1004c03a 	cmpne	r2,r2,zero
 1013fe0:	1000291e 	bne	r2,zero,1014088 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 1013fe4:	e0bfee83 	ldbu	r2,-70(fp)
 1013fe8:	10803fcc 	andi	r2,r2,255
 1013fec:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 1013ff0:	d1272517 	ldw	r4,-25452(gp)
 1013ff4:	e17ffd04 	addi	r5,fp,-12
 1013ff8:	101a22c0 	call	101a22c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013ffc:	0005303a 	rdctl	r2,status
 1014000:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014004:	e0ffdf17 	ldw	r3,-132(fp)
 1014008:	00bfff84 	movi	r2,-2
 101400c:	1884703a 	and	r2,r3,r2
 1014010:	1001703a 	wrctl	status,r2
  
  return context;
 1014014:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 1014018:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 101401c:	e0bffd0b 	ldhu	r2,-12(fp)
 1014020:	10bfffcc 	andi	r2,r2,65535
 1014024:	1004c03a 	cmpne	r2,r2,zero
 1014028:	10000b1e 	bne	r2,zero,1014058 <__malloc_lock+0xc4>
 101402c:	d0e01c17 	ldw	r3,-32656(gp)
 1014030:	e0bfe117 	ldw	r2,-124(fp)
 1014034:	10c0081e 	bne	r2,r3,1014058 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 1014038:	d0a72417 	ldw	r2,-25456(gp)
 101403c:	10800044 	addi	r2,r2,1
 1014040:	d0a72415 	stw	r2,-25456(gp)
 1014044:	e0bfe017 	ldw	r2,-128(fp)
 1014048:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101404c:	e0bfde17 	ldw	r2,-136(fp)
 1014050:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 1014054:	00000c06 	br	1014088 <__malloc_lock+0xf4>
 1014058:	e0bfe017 	ldw	r2,-128(fp)
 101405c:	e0bfdd15 	stw	r2,-140(fp)
 1014060:	e0bfdd17 	ldw	r2,-140(fp)
 1014064:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 1014068:	d1272517 	ldw	r4,-25452(gp)
 101406c:	e1bffe84 	addi	r6,fp,-6
 1014070:	000b883a 	mov	r5,zero
 1014074:	1019d0c0 	call	1019d0c <OSSemPend>
    locks  = 1;
 1014078:	00800044 	movi	r2,1
 101407c:	d0a72415 	stw	r2,-25456(gp)
    lockid = id;
 1014080:	e0bfe117 	ldw	r2,-124(fp)
 1014084:	d0a01c15 	stw	r2,-32656(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 1014088:	e037883a 	mov	sp,fp
 101408c:	dfc00117 	ldw	ra,4(sp)
 1014090:	df000017 	ldw	fp,0(sp)
 1014094:	dec00204 	addi	sp,sp,8
 1014098:	f800283a 	ret

0101409c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 101409c:	defff804 	addi	sp,sp,-32
 10140a0:	dfc00715 	stw	ra,28(sp)
 10140a4:	df000615 	stw	fp,24(sp)
 10140a8:	df000604 	addi	fp,sp,24
 10140ac:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10140b0:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 10140b4:	008040b4 	movhi	r2,258
 10140b8:	108bbf44 	addi	r2,r2,12029
 10140bc:	10800003 	ldbu	r2,0(r2)
 10140c0:	10803fcc 	andi	r2,r2,255
 10140c4:	10800058 	cmpnei	r2,r2,1
 10140c8:	1000231e 	bne	r2,zero,1014158 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10140cc:	0005303a 	rdctl	r2,status
 10140d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10140d4:	e0fffd17 	ldw	r3,-12(fp)
 10140d8:	00bfff84 	movi	r2,-2
 10140dc:	1884703a 	and	r2,r3,r2
 10140e0:	1001703a 	wrctl	status,r2
  
  return context;
 10140e4:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 10140e8:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 10140ec:	d0a72417 	ldw	r2,-25456(gp)
 10140f0:	1004c03a 	cmpne	r2,r2,zero
 10140f4:	1000051e 	bne	r2,zero,101410c <__malloc_unlock+0x70>
 10140f8:	e0bffe17 	ldw	r2,-8(fp)
 10140fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014100:	e0bffc17 	ldw	r2,-16(fp)
 1014104:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 1014108:	00001306 	br	1014158 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 101410c:	d0a72417 	ldw	r2,-25456(gp)
 1014110:	10bfffc4 	addi	r2,r2,-1
 1014114:	d0a72415 	stw	r2,-25456(gp)
 1014118:	d0a72417 	ldw	r2,-25456(gp)
 101411c:	1004c03a 	cmpne	r2,r2,zero
 1014120:	1000091e 	bne	r2,zero,1014148 <__malloc_unlock+0xac>
  {
    lockid = -1;
 1014124:	00bfffc4 	movi	r2,-1
 1014128:	d0a01c15 	stw	r2,-32656(gp)
 101412c:	e0bffe17 	ldw	r2,-8(fp)
 1014130:	e0bffb15 	stw	r2,-20(fp)
 1014134:	e0bffb17 	ldw	r2,-20(fp)
 1014138:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 101413c:	d1272517 	ldw	r4,-25452(gp)
 1014140:	101a1040 	call	101a104 <OSSemPost>
 1014144:	00000406 	br	1014158 <__malloc_unlock+0xbc>
 1014148:	e0bffe17 	ldw	r2,-8(fp)
 101414c:	e0bffa15 	stw	r2,-24(fp)
 1014150:	e0bffa17 	ldw	r2,-24(fp)
 1014154:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 1014158:	e037883a 	mov	sp,fp
 101415c:	dfc00117 	ldw	ra,4(sp)
 1014160:	df000017 	ldw	fp,0(sp)
 1014164:	dec00204 	addi	sp,sp,8
 1014168:	f800283a 	ret

0101416c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 101416c:	defff604 	addi	sp,sp,-40
 1014170:	dfc00915 	stw	ra,36(sp)
 1014174:	df000815 	stw	fp,32(sp)
 1014178:	df000804 	addi	fp,sp,32
 101417c:	e13ffc15 	stw	r4,-16(fp)
 1014180:	e17ffd15 	stw	r5,-12(fp)
 1014184:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014188:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101418c:	e0bffe17 	ldw	r2,-8(fp)
 1014190:	1004c03a 	cmpne	r2,r2,zero
 1014194:	1000021e 	bne	r2,zero,10141a0 <OSEventNameGet+0x34>
        return (0);
 1014198:	e03fff15 	stw	zero,-4(fp)
 101419c:	00003906 	br	1014284 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 10141a0:	e0bffc17 	ldw	r2,-16(fp)
 10141a4:	1004c03a 	cmpne	r2,r2,zero
 10141a8:	1000051e 	bne	r2,zero,10141c0 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 10141ac:	e0fffe17 	ldw	r3,-8(fp)
 10141b0:	00800104 	movi	r2,4
 10141b4:	18800005 	stb	r2,0(r3)
        return (0);
 10141b8:	e03fff15 	stw	zero,-4(fp)
 10141bc:	00003106 	br	1014284 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 10141c0:	e0bffd17 	ldw	r2,-12(fp)
 10141c4:	1004c03a 	cmpne	r2,r2,zero
 10141c8:	1000051e 	bne	r2,zero,10141e0 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 10141cc:	e0fffe17 	ldw	r3,-8(fp)
 10141d0:	00800304 	movi	r2,12
 10141d4:	18800005 	stb	r2,0(r3)
        return (0);
 10141d8:	e03fff15 	stw	zero,-4(fp)
 10141dc:	00002906 	br	1014284 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10141e0:	d0a73403 	ldbu	r2,-25392(gp)
 10141e4:	10803fcc 	andi	r2,r2,255
 10141e8:	1005003a 	cmpeq	r2,r2,zero
 10141ec:	1000051e 	bne	r2,zero,1014204 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 10141f0:	e0fffe17 	ldw	r3,-8(fp)
 10141f4:	00800444 	movi	r2,17
 10141f8:	18800005 	stb	r2,0(r3)
        return (0);
 10141fc:	e03fff15 	stw	zero,-4(fp)
 1014200:	00002006 	br	1014284 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 1014204:	e0bffc17 	ldw	r2,-16(fp)
 1014208:	10800003 	ldbu	r2,0(r2)
 101420c:	10803fcc 	andi	r2,r2,255
 1014210:	10bfffc4 	addi	r2,r2,-1
 1014214:	10800128 	cmpgeui	r2,r2,4
 1014218:	1000161e 	bne	r2,zero,1014274 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101421c:	0005303a 	rdctl	r2,status
 1014220:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014224:	e0fff917 	ldw	r3,-28(fp)
 1014228:	00bfff84 	movi	r2,-2
 101422c:	1884703a 	and	r2,r3,r2
 1014230:	1001703a 	wrctl	status,r2
  
  return context;
 1014234:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 1014238:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 101423c:	e0bffc17 	ldw	r2,-16(fp)
 1014240:	11400384 	addi	r5,r2,14
 1014244:	e13ffd17 	ldw	r4,-12(fp)
 1014248:	1015cf00 	call	1015cf0 <OS_StrCopy>
 101424c:	e0bffb05 	stb	r2,-20(fp)
 1014250:	e0bffa17 	ldw	r2,-24(fp)
 1014254:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014258:	e0bff817 	ldw	r2,-32(fp)
 101425c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1014260:	e0bffe17 	ldw	r2,-8(fp)
 1014264:	10000005 	stb	zero,0(r2)
    return (len);
 1014268:	e0bffb03 	ldbu	r2,-20(fp)
 101426c:	e0bfff15 	stw	r2,-4(fp)
 1014270:	00000406 	br	1014284 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 1014274:	e0fffe17 	ldw	r3,-8(fp)
 1014278:	00800044 	movi	r2,1
 101427c:	18800005 	stb	r2,0(r3)
             return (0);
 1014280:	e03fff15 	stw	zero,-4(fp)
 1014284:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 1014288:	e037883a 	mov	sp,fp
 101428c:	dfc00117 	ldw	ra,4(sp)
 1014290:	df000017 	ldw	fp,0(sp)
 1014294:	dec00204 	addi	sp,sp,8
 1014298:	f800283a 	ret

0101429c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 101429c:	defff604 	addi	sp,sp,-40
 10142a0:	dfc00915 	stw	ra,36(sp)
 10142a4:	df000815 	stw	fp,32(sp)
 10142a8:	df000804 	addi	fp,sp,32
 10142ac:	e13ffd15 	stw	r4,-12(fp)
 10142b0:	e17ffe15 	stw	r5,-8(fp)
 10142b4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10142b8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 10142bc:	e0bfff17 	ldw	r2,-4(fp)
 10142c0:	1005003a 	cmpeq	r2,r2,zero
 10142c4:	1000411e 	bne	r2,zero,10143cc <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 10142c8:	e0bffd17 	ldw	r2,-12(fp)
 10142cc:	1004c03a 	cmpne	r2,r2,zero
 10142d0:	1000041e 	bne	r2,zero,10142e4 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 10142d4:	e0ffff17 	ldw	r3,-4(fp)
 10142d8:	00800104 	movi	r2,4
 10142dc:	18800005 	stb	r2,0(r3)
        return;
 10142e0:	00003a06 	br	10143cc <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 10142e4:	e0bffe17 	ldw	r2,-8(fp)
 10142e8:	1004c03a 	cmpne	r2,r2,zero
 10142ec:	1000041e 	bne	r2,zero,1014300 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 10142f0:	e0ffff17 	ldw	r3,-4(fp)
 10142f4:	00800304 	movi	r2,12
 10142f8:	18800005 	stb	r2,0(r3)
        return;
 10142fc:	00003306 	br	10143cc <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1014300:	d0a73403 	ldbu	r2,-25392(gp)
 1014304:	10803fcc 	andi	r2,r2,255
 1014308:	1005003a 	cmpeq	r2,r2,zero
 101430c:	1000041e 	bne	r2,zero,1014320 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 1014310:	e0ffff17 	ldw	r3,-4(fp)
 1014314:	00800484 	movi	r2,18
 1014318:	18800005 	stb	r2,0(r3)
        return;
 101431c:	00002b06 	br	10143cc <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 1014320:	e0bffd17 	ldw	r2,-12(fp)
 1014324:	10800003 	ldbu	r2,0(r2)
 1014328:	10803fcc 	andi	r2,r2,255
 101432c:	10bfffc4 	addi	r2,r2,-1
 1014330:	10800128 	cmpgeui	r2,r2,4
 1014334:	10000f1e 	bne	r2,zero,1014374 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014338:	0005303a 	rdctl	r2,status
 101433c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014340:	e0fffa17 	ldw	r3,-24(fp)
 1014344:	00bfff84 	movi	r2,-2
 1014348:	1884703a 	and	r2,r3,r2
 101434c:	1001703a 	wrctl	status,r2
  
  return context;
 1014350:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 1014354:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 1014358:	e13ffe17 	ldw	r4,-8(fp)
 101435c:	1015d700 	call	1015d70 <OS_StrLen>
 1014360:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 1014364:	e0bffc03 	ldbu	r2,-16(fp)
 1014368:	10800828 	cmpgeui	r2,r2,32
 101436c:	1000051e 	bne	r2,zero,1014384 <OSEventNameSet+0xe8>
 1014370:	00000c06 	br	10143a4 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 1014374:	e0ffff17 	ldw	r3,-4(fp)
 1014378:	00800044 	movi	r2,1
 101437c:	18800005 	stb	r2,0(r3)
             return;
 1014380:	00001206 	br	10143cc <OSEventNameSet+0x130>
 1014384:	e0bffb17 	ldw	r2,-20(fp)
 1014388:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101438c:	e0bff917 	ldw	r2,-28(fp)
 1014390:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 1014394:	e0ffff17 	ldw	r3,-4(fp)
 1014398:	008002c4 	movi	r2,11
 101439c:	18800005 	stb	r2,0(r3)
        return;
 10143a0:	00000a06 	br	10143cc <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 10143a4:	e0bffd17 	ldw	r2,-12(fp)
 10143a8:	11000384 	addi	r4,r2,14
 10143ac:	e17ffe17 	ldw	r5,-8(fp)
 10143b0:	1015cf00 	call	1015cf0 <OS_StrCopy>
 10143b4:	e0bffb17 	ldw	r2,-20(fp)
 10143b8:	e0bff815 	stw	r2,-32(fp)
 10143bc:	e0bff817 	ldw	r2,-32(fp)
 10143c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10143c4:	e0bfff17 	ldw	r2,-4(fp)
 10143c8:	10000005 	stb	zero,0(r2)
}
 10143cc:	e037883a 	mov	sp,fp
 10143d0:	dfc00117 	ldw	ra,4(sp)
 10143d4:	df000017 	ldw	fp,0(sp)
 10143d8:	dec00204 	addi	sp,sp,8
 10143dc:	f800283a 	ret

010143e0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 10143e0:	deffe704 	addi	sp,sp,-100
 10143e4:	dfc01815 	stw	ra,96(sp)
 10143e8:	df001715 	stw	fp,92(sp)
 10143ec:	df001704 	addi	fp,sp,92
 10143f0:	e13ff615 	stw	r4,-40(fp)
 10143f4:	e17ff715 	stw	r5,-36(fp)
 10143f8:	e1bff815 	stw	r6,-32(fp)
 10143fc:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 1014400:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 1014404:	e0800217 	ldw	r2,8(fp)
 1014408:	1004c03a 	cmpne	r2,r2,zero
 101440c:	1000021e 	bne	r2,zero,1014418 <OSEventPendMulti+0x38>
        return (0);
 1014410:	e03fff15 	stw	zero,-4(fp)
 1014414:	00019906 	br	1014a7c <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 1014418:	e0bff617 	ldw	r2,-40(fp)
 101441c:	1004c03a 	cmpne	r2,r2,zero
 1014420:	1000051e 	bne	r2,zero,1014438 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 1014424:	e0c00217 	ldw	r3,8(fp)
 1014428:	00800104 	movi	r2,4
 101442c:	18800005 	stb	r2,0(r3)
        return (0);
 1014430:	e03fff15 	stw	zero,-4(fp)
 1014434:	00019106 	br	1014a7c <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 1014438:	e0bff717 	ldw	r2,-36(fp)
 101443c:	1004c03a 	cmpne	r2,r2,zero
 1014440:	1000051e 	bne	r2,zero,1014458 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 1014444:	e0c00217 	ldw	r3,8(fp)
 1014448:	00800104 	movi	r2,4
 101444c:	18800005 	stb	r2,0(r3)
        return (0);
 1014450:	e03fff15 	stw	zero,-4(fp)
 1014454:	00018906 	br	1014a7c <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 1014458:	e0bff817 	ldw	r2,-32(fp)
 101445c:	1004c03a 	cmpne	r2,r2,zero
 1014460:	1000051e 	bne	r2,zero,1014478 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 1014464:	e0c00217 	ldw	r3,8(fp)
 1014468:	00800104 	movi	r2,4
 101446c:	18800005 	stb	r2,0(r3)
        return (0);
 1014470:	e03fff15 	stw	zero,-4(fp)
 1014474:	00018106 	br	1014a7c <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 1014478:	e0bff717 	ldw	r2,-36(fp)
 101447c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 1014480:	e0bff617 	ldw	r2,-40(fp)
 1014484:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 1014488:	e0bff517 	ldw	r2,-44(fp)
 101448c:	10800017 	ldw	r2,0(r2)
 1014490:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 1014494:	00001806 	br	10144f8 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 1014498:	e0bff417 	ldw	r2,-48(fp)
 101449c:	10800003 	ldbu	r2,0(r2)
 10144a0:	10803fcc 	andi	r2,r2,255
 10144a4:	e0bffe15 	stw	r2,-8(fp)
 10144a8:	e0fffe17 	ldw	r3,-8(fp)
 10144ac:	188000a0 	cmpeqi	r2,r3,2
 10144b0:	10000b1e 	bne	r2,zero,10144e0 <OSEventPendMulti+0x100>
 10144b4:	e0fffe17 	ldw	r3,-8(fp)
 10144b8:	188000e0 	cmpeqi	r2,r3,3
 10144bc:	1000081e 	bne	r2,zero,10144e0 <OSEventPendMulti+0x100>
 10144c0:	e0fffe17 	ldw	r3,-8(fp)
 10144c4:	18800060 	cmpeqi	r2,r3,1
 10144c8:	1000051e 	bne	r2,zero,10144e0 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 10144cc:	e0c00217 	ldw	r3,8(fp)
 10144d0:	00800044 	movi	r2,1
 10144d4:	18800005 	stb	r2,0(r3)
                 return (0);
 10144d8:	e03fff15 	stw	zero,-4(fp)
 10144dc:	00016706 	br	1014a7c <OSEventPendMulti+0x69c>
        }
        pevents++;
 10144e0:	e0bff517 	ldw	r2,-44(fp)
 10144e4:	10800104 	addi	r2,r2,4
 10144e8:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 10144ec:	e0bff517 	ldw	r2,-44(fp)
 10144f0:	10800017 	ldw	r2,0(r2)
 10144f4:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 10144f8:	e0bff417 	ldw	r2,-48(fp)
 10144fc:	1004c03a 	cmpne	r2,r2,zero
 1014500:	103fe51e 	bne	r2,zero,1014498 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 1014504:	d0a73403 	ldbu	r2,-25392(gp)
 1014508:	10803fcc 	andi	r2,r2,255
 101450c:	1005003a 	cmpeq	r2,r2,zero
 1014510:	1000051e 	bne	r2,zero,1014528 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 1014514:	e0c00217 	ldw	r3,8(fp)
 1014518:	00800084 	movi	r2,2
 101451c:	18800005 	stb	r2,0(r3)
        return (0);
 1014520:	e03fff15 	stw	zero,-4(fp)
 1014524:	00015506 	br	1014a7c <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 1014528:	d0a72603 	ldbu	r2,-25448(gp)
 101452c:	10803fcc 	andi	r2,r2,255
 1014530:	1005003a 	cmpeq	r2,r2,zero
 1014534:	1000051e 	bne	r2,zero,101454c <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 1014538:	e0c00217 	ldw	r3,8(fp)
 101453c:	00800344 	movi	r2,13
 1014540:	18800005 	stb	r2,0(r3)
        return (0);
 1014544:	e03fff15 	stw	zero,-4(fp)
 1014548:	00014c06 	br	1014a7c <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101454c:	0005303a 	rdctl	r2,status
 1014550:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014554:	e0ffef17 	ldw	r3,-68(fp)
 1014558:	00bfff84 	movi	r2,-2
 101455c:	1884703a 	and	r2,r3,r2
 1014560:	1001703a 	wrctl	status,r2
  
  return context;
 1014564:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 1014568:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 101456c:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 1014570:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 1014574:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 1014578:	e0bff617 	ldw	r2,-40(fp)
 101457c:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 1014580:	e0bff517 	ldw	r2,-44(fp)
 1014584:	10800017 	ldw	r2,0(r2)
 1014588:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 101458c:	00008f06 	br	10147cc <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 1014590:	e0bff417 	ldw	r2,-48(fp)
 1014594:	10800003 	ldbu	r2,0(r2)
 1014598:	10803fcc 	andi	r2,r2,255
 101459c:	e0bffd15 	stw	r2,-12(fp)
 10145a0:	e0fffd17 	ldw	r3,-12(fp)
 10145a4:	188000a0 	cmpeqi	r2,r3,2
 10145a8:	1000441e 	bne	r2,zero,10146bc <OSEventPendMulti+0x2dc>
 10145ac:	e0fffd17 	ldw	r3,-12(fp)
 10145b0:	188000e0 	cmpeqi	r2,r3,3
 10145b4:	1000041e 	bne	r2,zero,10145c8 <OSEventPendMulti+0x1e8>
 10145b8:	e0fffd17 	ldw	r3,-12(fp)
 10145bc:	18800060 	cmpeqi	r2,r3,1
 10145c0:	1000211e 	bne	r2,zero,1014648 <OSEventPendMulti+0x268>
 10145c4:	00006f06 	br	1014784 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 10145c8:	e0bff417 	ldw	r2,-48(fp)
 10145cc:	1080020b 	ldhu	r2,8(r2)
 10145d0:	10bfffcc 	andi	r2,r2,65535
 10145d4:	1005003a 	cmpeq	r2,r2,zero
 10145d8:	1000171e 	bne	r2,zero,1014638 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 10145dc:	e0bff417 	ldw	r2,-48(fp)
 10145e0:	1080020b 	ldhu	r2,8(r2)
 10145e4:	10bfffc4 	addi	r2,r2,-1
 10145e8:	1007883a 	mov	r3,r2
 10145ec:	e0bff417 	ldw	r2,-48(fp)
 10145f0:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 10145f4:	e0fff717 	ldw	r3,-36(fp)
 10145f8:	e0bff417 	ldw	r2,-48(fp)
 10145fc:	18800015 	stw	r2,0(r3)
 1014600:	e0bff717 	ldw	r2,-36(fp)
 1014604:	10800104 	addi	r2,r2,4
 1014608:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 101460c:	00800044 	movi	r2,1
 1014610:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 1014614:	e0bff817 	ldw	r2,-32(fp)
 1014618:	10000015 	stw	zero,0(r2)
 101461c:	e0bff817 	ldw	r2,-32(fp)
 1014620:	10800104 	addi	r2,r2,4
 1014624:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 1014628:	e0bff18b 	ldhu	r2,-58(fp)
 101462c:	10800044 	addi	r2,r2,1
 1014630:	e0bff18d 	sth	r2,-58(fp)
 1014634:	00005f06 	br	10147b4 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 1014638:	e0bff103 	ldbu	r2,-60(fp)
 101463c:	10800054 	ori	r2,r2,1
 1014640:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 1014644:	00005b06 	br	10147b4 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 1014648:	e0bff417 	ldw	r2,-48(fp)
 101464c:	10800117 	ldw	r2,4(r2)
 1014650:	1005003a 	cmpeq	r2,r2,zero
 1014654:	1000151e 	bne	r2,zero,10146ac <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 1014658:	e0bff417 	ldw	r2,-48(fp)
 101465c:	10c00117 	ldw	r3,4(r2)
 1014660:	e0bff817 	ldw	r2,-32(fp)
 1014664:	10c00015 	stw	r3,0(r2)
 1014668:	e0bff817 	ldw	r2,-32(fp)
 101466c:	10800104 	addi	r2,r2,4
 1014670:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 1014674:	e0bff417 	ldw	r2,-48(fp)
 1014678:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 101467c:	e0fff717 	ldw	r3,-36(fp)
 1014680:	e0bff417 	ldw	r2,-48(fp)
 1014684:	18800015 	stw	r2,0(r3)
 1014688:	e0bff717 	ldw	r2,-36(fp)
 101468c:	10800104 	addi	r2,r2,4
 1014690:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 1014694:	00800044 	movi	r2,1
 1014698:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 101469c:	e0bff18b 	ldhu	r2,-58(fp)
 10146a0:	10800044 	addi	r2,r2,1
 10146a4:	e0bff18d 	sth	r2,-58(fp)
 10146a8:	00004206 	br	10147b4 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 10146ac:	e0bff103 	ldbu	r2,-60(fp)
 10146b0:	10800094 	ori	r2,r2,2
 10146b4:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 10146b8:	00003e06 	br	10147b4 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 10146bc:	e0bff417 	ldw	r2,-48(fp)
 10146c0:	10800117 	ldw	r2,4(r2)
 10146c4:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 10146c8:	e0bff317 	ldw	r2,-52(fp)
 10146cc:	1080058b 	ldhu	r2,22(r2)
 10146d0:	10bfffcc 	andi	r2,r2,65535
 10146d4:	1005003a 	cmpeq	r2,r2,zero
 10146d8:	1000261e 	bne	r2,zero,1014774 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 10146dc:	e0bff317 	ldw	r2,-52(fp)
 10146e0:	11000417 	ldw	r4,16(r2)
 10146e4:	20c00017 	ldw	r3,0(r4)
 10146e8:	e0bff817 	ldw	r2,-32(fp)
 10146ec:	10c00015 	stw	r3,0(r2)
 10146f0:	e0bff817 	ldw	r2,-32(fp)
 10146f4:	10800104 	addi	r2,r2,4
 10146f8:	e0bff815 	stw	r2,-32(fp)
 10146fc:	20c00104 	addi	r3,r4,4
 1014700:	e0bff317 	ldw	r2,-52(fp)
 1014704:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 1014708:	e0bff317 	ldw	r2,-52(fp)
 101470c:	10c00417 	ldw	r3,16(r2)
 1014710:	e0bff317 	ldw	r2,-52(fp)
 1014714:	10800217 	ldw	r2,8(r2)
 1014718:	1880041e 	bne	r3,r2,101472c <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 101471c:	e0bff317 	ldw	r2,-52(fp)
 1014720:	10c00117 	ldw	r3,4(r2)
 1014724:	e0bff317 	ldw	r2,-52(fp)
 1014728:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 101472c:	e0bff317 	ldw	r2,-52(fp)
 1014730:	1080058b 	ldhu	r2,22(r2)
 1014734:	10bfffc4 	addi	r2,r2,-1
 1014738:	1007883a 	mov	r3,r2
 101473c:	e0bff317 	ldw	r2,-52(fp)
 1014740:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 1014744:	e0fff717 	ldw	r3,-36(fp)
 1014748:	e0bff417 	ldw	r2,-48(fp)
 101474c:	18800015 	stw	r2,0(r3)
 1014750:	e0bff717 	ldw	r2,-36(fp)
 1014754:	10800104 	addi	r2,r2,4
 1014758:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 101475c:	00800044 	movi	r2,1
 1014760:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 1014764:	e0bff18b 	ldhu	r2,-58(fp)
 1014768:	10800044 	addi	r2,r2,1
 101476c:	e0bff18d 	sth	r2,-58(fp)
 1014770:	00001006 	br	10147b4 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 1014774:	e0bff103 	ldbu	r2,-60(fp)
 1014778:	10800114 	ori	r2,r2,4
 101477c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 1014780:	00000c06 	br	10147b4 <OSEventPendMulti+0x3d4>
 1014784:	e0bff017 	ldw	r2,-64(fp)
 1014788:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101478c:	e0bfee17 	ldw	r2,-72(fp)
 1014790:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 1014794:	e0bff717 	ldw	r2,-36(fp)
 1014798:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 101479c:	e0c00217 	ldw	r3,8(fp)
 10147a0:	00800044 	movi	r2,1
 10147a4:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 10147a8:	e0bff18b 	ldhu	r2,-58(fp)
 10147ac:	e0bfff15 	stw	r2,-4(fp)
 10147b0:	0000b206 	br	1014a7c <OSEventPendMulti+0x69c>
        }
        pevents++;
 10147b4:	e0bff517 	ldw	r2,-44(fp)
 10147b8:	10800104 	addi	r2,r2,4
 10147bc:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 10147c0:	e0bff517 	ldw	r2,-44(fp)
 10147c4:	10800017 	ldw	r2,0(r2)
 10147c8:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 10147cc:	e0bff417 	ldw	r2,-48(fp)
 10147d0:	1004c03a 	cmpne	r2,r2,zero
 10147d4:	103f6e1e 	bne	r2,zero,1014590 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 10147d8:	e0bff203 	ldbu	r2,-56(fp)
 10147dc:	10800058 	cmpnei	r2,r2,1
 10147e0:	10000b1e 	bne	r2,zero,1014810 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 10147e4:	e0bff717 	ldw	r2,-36(fp)
 10147e8:	10000015 	stw	zero,0(r2)
 10147ec:	e0bff017 	ldw	r2,-64(fp)
 10147f0:	e0bfed15 	stw	r2,-76(fp)
 10147f4:	e0bfed17 	ldw	r2,-76(fp)
 10147f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 10147fc:	e0800217 	ldw	r2,8(fp)
 1014800:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 1014804:	e0fff18b 	ldhu	r3,-58(fp)
 1014808:	e0ffff15 	stw	r3,-4(fp)
 101480c:	00009b06 	br	1014a7c <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 1014810:	d1273517 	ldw	r4,-25388(gp)
 1014814:	d0a73517 	ldw	r2,-25388(gp)
 1014818:	10c00c03 	ldbu	r3,48(r2)
 101481c:	e0bff103 	ldbu	r2,-60(fp)
 1014820:	1884b03a 	or	r2,r3,r2
 1014824:	1007883a 	mov	r3,r2
 1014828:	00bfe004 	movi	r2,-128
 101482c:	1884b03a 	or	r2,r3,r2
 1014830:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1014834:	d0a73517 	ldw	r2,-25388(gp)
 1014838:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 101483c:	d0e73517 	ldw	r3,-25388(gp)
 1014840:	e0bff90b 	ldhu	r2,-28(fp)
 1014844:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 1014848:	e13ff617 	ldw	r4,-40(fp)
 101484c:	10154100 	call	1015410 <OS_EventTaskWaitMulti>
 1014850:	e0bff017 	ldw	r2,-64(fp)
 1014854:	e0bfec15 	stw	r2,-80(fp)
 1014858:	e0bfec17 	ldw	r2,-80(fp)
 101485c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 1014860:	1015bac0 	call	1015bac <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014864:	0005303a 	rdctl	r2,status
 1014868:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101486c:	e0ffeb17 	ldw	r3,-84(fp)
 1014870:	00bfff84 	movi	r2,-2
 1014874:	1884703a 	and	r2,r3,r2
 1014878:	1001703a 	wrctl	status,r2
  
  return context;
 101487c:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 1014880:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 1014884:	d0a73517 	ldw	r2,-25388(gp)
 1014888:	10800c43 	ldbu	r2,49(r2)
 101488c:	10803fcc 	andi	r2,r2,255
 1014890:	e0bffc15 	stw	r2,-16(fp)
 1014894:	e0fffc17 	ldw	r3,-16(fp)
 1014898:	1805003a 	cmpeq	r2,r3,zero
 101489c:	1000041e 	bne	r2,zero,10148b0 <OSEventPendMulti+0x4d0>
 10148a0:	e0fffc17 	ldw	r3,-16(fp)
 10148a4:	188000a0 	cmpeqi	r2,r3,2
 10148a8:	1000011e 	bne	r2,zero,10148b0 <OSEventPendMulti+0x4d0>
 10148ac:	00001906 	br	1014914 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 10148b0:	d0a73517 	ldw	r2,-25388(gp)
 10148b4:	10800717 	ldw	r2,28(r2)
 10148b8:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 10148bc:	e0bff417 	ldw	r2,-48(fp)
 10148c0:	1005003a 	cmpeq	r2,r2,zero
 10148c4:	10000c1e 	bne	r2,zero,10148f8 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 10148c8:	e0fff717 	ldw	r3,-36(fp)
 10148cc:	e0bff417 	ldw	r2,-48(fp)
 10148d0:	18800015 	stw	r2,0(r3)
 10148d4:	e0bff717 	ldw	r2,-36(fp)
 10148d8:	10800104 	addi	r2,r2,4
 10148dc:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 10148e0:	e0bff717 	ldw	r2,-36(fp)
 10148e4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 10148e8:	e0bff18b 	ldhu	r2,-58(fp)
 10148ec:	10800044 	addi	r2,r2,1
 10148f0:	e0bff18d 	sth	r2,-58(fp)
 10148f4:	00000a06 	br	1014920 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 10148f8:	d0a73517 	ldw	r2,-25388(gp)
 10148fc:	00c00044 	movi	r3,1
 1014900:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 1014904:	d1273517 	ldw	r4,-25388(gp)
 1014908:	e17ff617 	ldw	r5,-40(fp)
 101490c:	101561c0 	call	101561c <OS_EventTaskRemoveMulti>
             }
			 break;
 1014910:	00000306 	br	1014920 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 1014914:	d1273517 	ldw	r4,-25388(gp)
 1014918:	e17ff617 	ldw	r5,-40(fp)
 101491c:	101561c0 	call	101561c <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 1014920:	d0a73517 	ldw	r2,-25388(gp)
 1014924:	10800c43 	ldbu	r2,49(r2)
 1014928:	10803fcc 	andi	r2,r2,255
 101492c:	e0bffb15 	stw	r2,-20(fp)
 1014930:	e0fffb17 	ldw	r3,-20(fp)
 1014934:	1805003a 	cmpeq	r2,r3,zero
 1014938:	1000041e 	bne	r2,zero,101494c <OSEventPendMulti+0x56c>
 101493c:	e0fffb17 	ldw	r3,-20(fp)
 1014940:	188000a0 	cmpeqi	r2,r3,2
 1014944:	10002c1e 	bne	r2,zero,10149f8 <OSEventPendMulti+0x618>
 1014948:	00003406 	br	1014a1c <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 101494c:	e0bff417 	ldw	r2,-48(fp)
 1014950:	10800003 	ldbu	r2,0(r2)
 1014954:	10803fcc 	andi	r2,r2,255
 1014958:	e0bffa15 	stw	r2,-24(fp)
 101495c:	e0fffa17 	ldw	r3,-24(fp)
 1014960:	18800050 	cmplti	r2,r3,1
 1014964:	1000151e 	bne	r2,zero,10149bc <OSEventPendMulti+0x5dc>
 1014968:	e0fffa17 	ldw	r3,-24(fp)
 101496c:	188000d0 	cmplti	r2,r3,3
 1014970:	10000a1e 	bne	r2,zero,101499c <OSEventPendMulti+0x5bc>
 1014974:	e0fffa17 	ldw	r3,-24(fp)
 1014978:	188000e0 	cmpeqi	r2,r3,3
 101497c:	1000011e 	bne	r2,zero,1014984 <OSEventPendMulti+0x5a4>
 1014980:	00000e06 	br	10149bc <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 1014984:	e0bff817 	ldw	r2,-32(fp)
 1014988:	10000015 	stw	zero,0(r2)
 101498c:	e0bff817 	ldw	r2,-32(fp)
 1014990:	10800104 	addi	r2,r2,4
 1014994:	e0bff815 	stw	r2,-32(fp)
                      break;
 1014998:	00001406 	br	10149ec <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 101499c:	d0a73517 	ldw	r2,-25388(gp)
 10149a0:	10c00917 	ldw	r3,36(r2)
 10149a4:	e0bff817 	ldw	r2,-32(fp)
 10149a8:	10c00015 	stw	r3,0(r2)
 10149ac:	e0bff817 	ldw	r2,-32(fp)
 10149b0:	10800104 	addi	r2,r2,4
 10149b4:	e0bff815 	stw	r2,-32(fp)
                      break;
 10149b8:	00000c06 	br	10149ec <OSEventPendMulti+0x60c>
 10149bc:	e0bff017 	ldw	r2,-64(fp)
 10149c0:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10149c4:	e0bfea17 	ldw	r2,-88(fp)
 10149c8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 10149cc:	e0bff717 	ldw	r2,-36(fp)
 10149d0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 10149d4:	e0c00217 	ldw	r3,8(fp)
 10149d8:	00800044 	movi	r2,1
 10149dc:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 10149e0:	e0bff18b 	ldhu	r2,-58(fp)
 10149e4:	e0bfff15 	stw	r2,-4(fp)
 10149e8:	00002406 	br	1014a7c <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 10149ec:	e0800217 	ldw	r2,8(fp)
 10149f0:	10000005 	stb	zero,0(r2)
             break;
 10149f4:	00001106 	br	1014a3c <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 10149f8:	e0bff817 	ldw	r2,-32(fp)
 10149fc:	10000015 	stw	zero,0(r2)
 1014a00:	e0bff817 	ldw	r2,-32(fp)
 1014a04:	10800104 	addi	r2,r2,4
 1014a08:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 1014a0c:	e0c00217 	ldw	r3,8(fp)
 1014a10:	00800384 	movi	r2,14
 1014a14:	18800005 	stb	r2,0(r3)
             break;
 1014a18:	00000806 	br	1014a3c <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 1014a1c:	e0bff817 	ldw	r2,-32(fp)
 1014a20:	10000015 	stw	zero,0(r2)
 1014a24:	e0bff817 	ldw	r2,-32(fp)
 1014a28:	10800104 	addi	r2,r2,4
 1014a2c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 1014a30:	e0c00217 	ldw	r3,8(fp)
 1014a34:	00800284 	movi	r2,10
 1014a38:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 1014a3c:	d0a73517 	ldw	r2,-25388(gp)
 1014a40:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 1014a44:	d0a73517 	ldw	r2,-25388(gp)
 1014a48:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 1014a4c:	d0a73517 	ldw	r2,-25388(gp)
 1014a50:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1014a54:	d0a73517 	ldw	r2,-25388(gp)
 1014a58:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 1014a5c:	d0a73517 	ldw	r2,-25388(gp)
 1014a60:	10000915 	stw	zero,36(r2)
 1014a64:	e0bff017 	ldw	r2,-64(fp)
 1014a68:	e0bfe915 	stw	r2,-92(fp)
 1014a6c:	e0bfe917 	ldw	r2,-92(fp)
 1014a70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 1014a74:	e0fff18b 	ldhu	r3,-58(fp)
 1014a78:	e0ffff15 	stw	r3,-4(fp)
 1014a7c:	e0bfff17 	ldw	r2,-4(fp)
}
 1014a80:	e037883a 	mov	sp,fp
 1014a84:	dfc00117 	ldw	ra,4(sp)
 1014a88:	df000017 	ldw	fp,0(sp)
 1014a8c:	dec00204 	addi	sp,sp,8
 1014a90:	f800283a 	ret

01014a94 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 1014a94:	defffe04 	addi	sp,sp,-8
 1014a98:	dfc00115 	stw	ra,4(sp)
 1014a9c:	df000015 	stw	fp,0(sp)
 1014aa0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 1014aa4:	101e4140 	call	101e414 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 1014aa8:	10158640 	call	1015864 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 1014aac:	10158a80 	call	10158a8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 1014ab0:	1015a0c0 	call	1015a0c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 1014ab4:	10157880 	call	1015788 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 1014ab8:	1017abc0 	call	1017abc <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 1014abc:	10184940 	call	1018494 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 1014ac0:	10197ec0 	call	10197ec <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 1014ac4:	10159140 	call	1015914 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 1014ac8:	10159900 	call	1015990 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 1014acc:	101e4300 	call	101e430 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 1014ad0:	10162940 	call	1016294 <OSDebugInit>
#endif
}
 1014ad4:	e037883a 	mov	sp,fp
 1014ad8:	dfc00117 	ldw	ra,4(sp)
 1014adc:	df000017 	ldw	fp,0(sp)
 1014ae0:	dec00204 	addi	sp,sp,8
 1014ae4:	f800283a 	ret

01014ae8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 1014ae8:	defffc04 	addi	sp,sp,-16
 1014aec:	df000315 	stw	fp,12(sp)
 1014af0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1014af4:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 1014af8:	d0a72643 	ldbu	r2,-25447(gp)
 1014afc:	10803fcc 	andi	r2,r2,255
 1014b00:	10800058 	cmpnei	r2,r2,1
 1014b04:	1000131e 	bne	r2,zero,1014b54 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014b08:	0005303a 	rdctl	r2,status
 1014b0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014b10:	e0fffe17 	ldw	r3,-8(fp)
 1014b14:	00bfff84 	movi	r2,-2
 1014b18:	1884703a 	and	r2,r3,r2
 1014b1c:	1001703a 	wrctl	status,r2
  
  return context;
 1014b20:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 1014b24:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 1014b28:	d0a73403 	ldbu	r2,-25392(gp)
 1014b2c:	10803fcc 	andi	r2,r2,255
 1014b30:	10803fe0 	cmpeqi	r2,r2,255
 1014b34:	1000031e 	bne	r2,zero,1014b44 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 1014b38:	d0a73403 	ldbu	r2,-25392(gp)
 1014b3c:	10800044 	addi	r2,r2,1
 1014b40:	d0a73405 	stb	r2,-25392(gp)
 1014b44:	e0bfff17 	ldw	r2,-4(fp)
 1014b48:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014b4c:	e0bffd17 	ldw	r2,-12(fp)
 1014b50:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 1014b54:	e037883a 	mov	sp,fp
 1014b58:	df000017 	ldw	fp,0(sp)
 1014b5c:	dec00104 	addi	sp,sp,4
 1014b60:	f800283a 	ret

01014b64 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 1014b64:	defffb04 	addi	sp,sp,-20
 1014b68:	dfc00415 	stw	ra,16(sp)
 1014b6c:	df000315 	stw	fp,12(sp)
 1014b70:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1014b74:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 1014b78:	d0a72643 	ldbu	r2,-25447(gp)
 1014b7c:	10803fcc 	andi	r2,r2,255
 1014b80:	10800058 	cmpnei	r2,r2,1
 1014b84:	1000321e 	bne	r2,zero,1014c50 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014b88:	0005303a 	rdctl	r2,status
 1014b8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014b90:	e0fffe17 	ldw	r3,-8(fp)
 1014b94:	00bfff84 	movi	r2,-2
 1014b98:	1884703a 	and	r2,r3,r2
 1014b9c:	1001703a 	wrctl	status,r2
  
  return context;
 1014ba0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 1014ba4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 1014ba8:	d0a73403 	ldbu	r2,-25392(gp)
 1014bac:	10803fcc 	andi	r2,r2,255
 1014bb0:	1005003a 	cmpeq	r2,r2,zero
 1014bb4:	1000031e 	bne	r2,zero,1014bc4 <OSIntExit+0x60>
            OSIntNesting--;
 1014bb8:	d0a73403 	ldbu	r2,-25392(gp)
 1014bbc:	10bfffc4 	addi	r2,r2,-1
 1014bc0:	d0a73405 	stb	r2,-25392(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 1014bc4:	d0a73403 	ldbu	r2,-25392(gp)
 1014bc8:	10803fcc 	andi	r2,r2,255
 1014bcc:	1004c03a 	cmpne	r2,r2,zero
 1014bd0:	10001b1e 	bne	r2,zero,1014c40 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 1014bd4:	d0a72603 	ldbu	r2,-25448(gp)
 1014bd8:	10803fcc 	andi	r2,r2,255
 1014bdc:	1004c03a 	cmpne	r2,r2,zero
 1014be0:	1000171e 	bne	r2,zero,1014c40 <OSIntExit+0xdc>
                OS_SchedNew();
 1014be4:	1015c800 	call	1015c80 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 1014be8:	d0a72803 	ldbu	r2,-25440(gp)
 1014bec:	d0e72843 	ldbu	r3,-25439(gp)
 1014bf0:	11003fcc 	andi	r4,r2,255
 1014bf4:	18803fcc 	andi	r2,r3,255
 1014bf8:	20801126 	beq	r4,r2,1014c40 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 1014bfc:	d0a72803 	ldbu	r2,-25440(gp)
 1014c00:	10803fcc 	andi	r2,r2,255
 1014c04:	00c040f4 	movhi	r3,259
 1014c08:	18ea5804 	addi	r3,r3,-22176
 1014c0c:	1085883a 	add	r2,r2,r2
 1014c10:	1085883a 	add	r2,r2,r2
 1014c14:	10c5883a 	add	r2,r2,r3
 1014c18:	10800017 	ldw	r2,0(r2)
 1014c1c:	d0a73015 	stw	r2,-25408(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 1014c20:	d0e73017 	ldw	r3,-25408(gp)
 1014c24:	18800e17 	ldw	r2,56(r3)
 1014c28:	10800044 	addi	r2,r2,1
 1014c2c:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 1014c30:	d0a72b17 	ldw	r2,-25428(gp)
 1014c34:	10800044 	addi	r2,r2,1
 1014c38:	d0a72b15 	stw	r2,-25428(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 1014c3c:	101dfa00 	call	101dfa0 <OSCtxSw>
 1014c40:	e0bfff17 	ldw	r2,-4(fp)
 1014c44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014c48:	e0bffd17 	ldw	r2,-12(fp)
 1014c4c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 1014c50:	e037883a 	mov	sp,fp
 1014c54:	dfc00117 	ldw	ra,4(sp)
 1014c58:	df000017 	ldw	fp,0(sp)
 1014c5c:	dec00204 	addi	sp,sp,8
 1014c60:	f800283a 	ret

01014c64 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 1014c64:	defffc04 	addi	sp,sp,-16
 1014c68:	df000315 	stw	fp,12(sp)
 1014c6c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014c70:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 1014c74:	d0a72643 	ldbu	r2,-25447(gp)
 1014c78:	10803fcc 	andi	r2,r2,255
 1014c7c:	10800058 	cmpnei	r2,r2,1
 1014c80:	1000171e 	bne	r2,zero,1014ce0 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014c84:	0005303a 	rdctl	r2,status
 1014c88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014c8c:	e0fffe17 	ldw	r3,-8(fp)
 1014c90:	00bfff84 	movi	r2,-2
 1014c94:	1884703a 	and	r2,r3,r2
 1014c98:	1001703a 	wrctl	status,r2
  
  return context;
 1014c9c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 1014ca0:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 1014ca4:	d0a73403 	ldbu	r2,-25392(gp)
 1014ca8:	10803fcc 	andi	r2,r2,255
 1014cac:	1004c03a 	cmpne	r2,r2,zero
 1014cb0:	1000071e 	bne	r2,zero,1014cd0 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 1014cb4:	d0a72603 	ldbu	r2,-25448(gp)
 1014cb8:	10803fcc 	andi	r2,r2,255
 1014cbc:	10803fe0 	cmpeqi	r2,r2,255
 1014cc0:	1000031e 	bne	r2,zero,1014cd0 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 1014cc4:	d0a72603 	ldbu	r2,-25448(gp)
 1014cc8:	10800044 	addi	r2,r2,1
 1014ccc:	d0a72605 	stb	r2,-25448(gp)
 1014cd0:	e0bfff17 	ldw	r2,-4(fp)
 1014cd4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014cd8:	e0bffd17 	ldw	r2,-12(fp)
 1014cdc:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 1014ce0:	e037883a 	mov	sp,fp
 1014ce4:	df000017 	ldw	fp,0(sp)
 1014ce8:	dec00104 	addi	sp,sp,4
 1014cec:	f800283a 	ret

01014cf0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 1014cf0:	defff804 	addi	sp,sp,-32
 1014cf4:	dfc00715 	stw	ra,28(sp)
 1014cf8:	df000615 	stw	fp,24(sp)
 1014cfc:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1014d00:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 1014d04:	d0a72643 	ldbu	r2,-25447(gp)
 1014d08:	10803fcc 	andi	r2,r2,255
 1014d0c:	10800058 	cmpnei	r2,r2,1
 1014d10:	10002b1e 	bne	r2,zero,1014dc0 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014d14:	0005303a 	rdctl	r2,status
 1014d18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014d1c:	e0fffe17 	ldw	r3,-8(fp)
 1014d20:	00bfff84 	movi	r2,-2
 1014d24:	1884703a 	and	r2,r3,r2
 1014d28:	1001703a 	wrctl	status,r2
  
  return context;
 1014d2c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 1014d30:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 1014d34:	d0a72603 	ldbu	r2,-25448(gp)
 1014d38:	10803fcc 	andi	r2,r2,255
 1014d3c:	1005003a 	cmpeq	r2,r2,zero
 1014d40:	10001b1e 	bne	r2,zero,1014db0 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 1014d44:	d0a72603 	ldbu	r2,-25448(gp)
 1014d48:	10bfffc4 	addi	r2,r2,-1
 1014d4c:	d0a72605 	stb	r2,-25448(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 1014d50:	d0a72603 	ldbu	r2,-25448(gp)
 1014d54:	10803fcc 	andi	r2,r2,255
 1014d58:	1004c03a 	cmpne	r2,r2,zero
 1014d5c:	10000f1e 	bne	r2,zero,1014d9c <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 1014d60:	d0a73403 	ldbu	r2,-25392(gp)
 1014d64:	10803fcc 	andi	r2,r2,255
 1014d68:	1004c03a 	cmpne	r2,r2,zero
 1014d6c:	1000061e 	bne	r2,zero,1014d88 <OSSchedUnlock+0x98>
 1014d70:	e0bfff17 	ldw	r2,-4(fp)
 1014d74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014d78:	e0bffd17 	ldw	r2,-12(fp)
 1014d7c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 1014d80:	1015bac0 	call	1015bac <OS_Sched>
 1014d84:	00000e06 	br	1014dc0 <OSSchedUnlock+0xd0>
 1014d88:	e0bfff17 	ldw	r2,-4(fp)
 1014d8c:	e0bffc15 	stw	r2,-16(fp)
 1014d90:	e0bffc17 	ldw	r2,-16(fp)
 1014d94:	1001703a 	wrctl	status,r2
 1014d98:	00000906 	br	1014dc0 <OSSchedUnlock+0xd0>
 1014d9c:	e0bfff17 	ldw	r2,-4(fp)
 1014da0:	e0bffb15 	stw	r2,-20(fp)
 1014da4:	e0bffb17 	ldw	r2,-20(fp)
 1014da8:	1001703a 	wrctl	status,r2
 1014dac:	00000406 	br	1014dc0 <OSSchedUnlock+0xd0>
 1014db0:	e0bfff17 	ldw	r2,-4(fp)
 1014db4:	e0bffa15 	stw	r2,-24(fp)
 1014db8:	e0bffa17 	ldw	r2,-24(fp)
 1014dbc:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 1014dc0:	e037883a 	mov	sp,fp
 1014dc4:	dfc00117 	ldw	ra,4(sp)
 1014dc8:	df000017 	ldw	fp,0(sp)
 1014dcc:	dec00204 	addi	sp,sp,8
 1014dd0:	f800283a 	ret

01014dd4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 1014dd4:	defffe04 	addi	sp,sp,-8
 1014dd8:	dfc00115 	stw	ra,4(sp)
 1014ddc:	df000015 	stw	fp,0(sp)
 1014de0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 1014de4:	d0a72643 	ldbu	r2,-25447(gp)
 1014de8:	10803fcc 	andi	r2,r2,255
 1014dec:	1004c03a 	cmpne	r2,r2,zero
 1014df0:	10000f1e 	bne	r2,zero,1014e30 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 1014df4:	1015c800 	call	1015c80 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 1014df8:	d0a72803 	ldbu	r2,-25440(gp)
 1014dfc:	d0a72845 	stb	r2,-25439(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 1014e00:	d0a72803 	ldbu	r2,-25440(gp)
 1014e04:	10803fcc 	andi	r2,r2,255
 1014e08:	00c040f4 	movhi	r3,259
 1014e0c:	18ea5804 	addi	r3,r3,-22176
 1014e10:	1085883a 	add	r2,r2,r2
 1014e14:	1085883a 	add	r2,r2,r2
 1014e18:	10c5883a 	add	r2,r2,r3
 1014e1c:	10800017 	ldw	r2,0(r2)
 1014e20:	d0a73015 	stw	r2,-25408(gp)
        OSTCBCur      = OSTCBHighRdy;
 1014e24:	d0a73017 	ldw	r2,-25408(gp)
 1014e28:	d0a73515 	stw	r2,-25388(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 1014e2c:	101e02c0 	call	101e02c <OSStartHighRdy>
    }
}
 1014e30:	e037883a 	mov	sp,fp
 1014e34:	dfc00117 	ldw	ra,4(sp)
 1014e38:	df000017 	ldw	fp,0(sp)
 1014e3c:	dec00204 	addi	sp,sp,8
 1014e40:	f800283a 	ret

01014e44 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 1014e44:	defff904 	addi	sp,sp,-28
 1014e48:	dfc00615 	stw	ra,24(sp)
 1014e4c:	df000515 	stw	fp,20(sp)
 1014e50:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014e54:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 1014e58:	01000084 	movi	r4,2
 1014e5c:	101bea00 	call	101bea0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014e60:	0005303a 	rdctl	r2,status
 1014e64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014e68:	e0fffe17 	ldw	r3,-8(fp)
 1014e6c:	00bfff84 	movi	r2,-2
 1014e70:	1884703a 	and	r2,r3,r2
 1014e74:	1001703a 	wrctl	status,r2
  
  return context;
 1014e78:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 1014e7c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 1014e80:	d0272715 	stw	zero,-25444(gp)
 1014e84:	e0bfff17 	ldw	r2,-4(fp)
 1014e88:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014e8c:	e0bffd17 	ldw	r2,-12(fp)
 1014e90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 1014e94:	01001904 	movi	r4,100
 1014e98:	101bea00 	call	101bea0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014e9c:	0005303a 	rdctl	r2,status
 1014ea0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014ea4:	e0fffc17 	ldw	r3,-16(fp)
 1014ea8:	00bfff84 	movi	r2,-2
 1014eac:	1884703a 	and	r2,r3,r2
 1014eb0:	1001703a 	wrctl	status,r2
  
  return context;
 1014eb4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 1014eb8:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 1014ebc:	d0a72717 	ldw	r2,-25444(gp)
 1014ec0:	d0a72c15 	stw	r2,-25424(gp)
    OSStatRdy    = OS_TRUE;
 1014ec4:	00800044 	movi	r2,1
 1014ec8:	d0a73805 	stb	r2,-25376(gp)
 1014ecc:	e0bfff17 	ldw	r2,-4(fp)
 1014ed0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014ed4:	e0bffb17 	ldw	r2,-20(fp)
 1014ed8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 1014edc:	e037883a 	mov	sp,fp
 1014ee0:	dfc00117 	ldw	ra,4(sp)
 1014ee4:	df000017 	ldw	fp,0(sp)
 1014ee8:	dec00204 	addi	sp,sp,8
 1014eec:	f800283a 	ret

01014ef0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 1014ef0:	defff604 	addi	sp,sp,-40
 1014ef4:	dfc00915 	stw	ra,36(sp)
 1014ef8:	df000815 	stw	fp,32(sp)
 1014efc:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1014f00:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 1014f04:	101e3f80 	call	101e3f8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014f08:	0005303a 	rdctl	r2,status
 1014f0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014f10:	e0fffb17 	ldw	r3,-20(fp)
 1014f14:	00bfff84 	movi	r2,-2
 1014f18:	1884703a 	and	r2,r3,r2
 1014f1c:	1001703a 	wrctl	status,r2
  
  return context;
 1014f20:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 1014f24:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 1014f28:	d0a73617 	ldw	r2,-25384(gp)
 1014f2c:	10800044 	addi	r2,r2,1
 1014f30:	d0a73615 	stw	r2,-25384(gp)
 1014f34:	e0bffc17 	ldw	r2,-16(fp)
 1014f38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014f3c:	e0bffa17 	ldw	r2,-24(fp)
 1014f40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 1014f44:	d0a72643 	ldbu	r2,-25447(gp)
 1014f48:	10803fcc 	andi	r2,r2,255
 1014f4c:	10800058 	cmpnei	r2,r2,1
 1014f50:	1000721e 	bne	r2,zero,101511c <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 1014f54:	d0a72a03 	ldbu	r2,-25432(gp)
 1014f58:	10803fcc 	andi	r2,r2,255
 1014f5c:	e0bfff15 	stw	r2,-4(fp)
 1014f60:	e0ffff17 	ldw	r3,-4(fp)
 1014f64:	18800060 	cmpeqi	r2,r3,1
 1014f68:	10000a1e 	bne	r2,zero,1014f94 <OSTimeTick+0xa4>
 1014f6c:	e0ffff17 	ldw	r3,-4(fp)
 1014f70:	188000a0 	cmpeqi	r2,r3,2
 1014f74:	1000091e 	bne	r2,zero,1014f9c <OSTimeTick+0xac>
 1014f78:	e0ffff17 	ldw	r3,-4(fp)
 1014f7c:	1805003a 	cmpeq	r2,r3,zero
 1014f80:	1000011e 	bne	r2,zero,1014f88 <OSTimeTick+0x98>
 1014f84:	00000a06 	br	1014fb0 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 1014f88:	00800044 	movi	r2,1
 1014f8c:	e0bffd05 	stb	r2,-12(fp)
                 break;
 1014f90:	00000a06 	br	1014fbc <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 1014f94:	e03ffd05 	stb	zero,-12(fp)
                 break;
 1014f98:	00000806 	br	1014fbc <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 1014f9c:	00800044 	movi	r2,1
 1014fa0:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 1014fa4:	00800044 	movi	r2,1
 1014fa8:	d0a72a05 	stb	r2,-25432(gp)
                 break;
 1014fac:	00000306 	br	1014fbc <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 1014fb0:	00800044 	movi	r2,1
 1014fb4:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 1014fb8:	d0272a05 	stb	zero,-25432(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 1014fbc:	e0bffd03 	ldbu	r2,-12(fp)
 1014fc0:	1005003a 	cmpeq	r2,r2,zero
 1014fc4:	1000551e 	bne	r2,zero,101511c <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 1014fc8:	d0a72917 	ldw	r2,-25436(gp)
 1014fcc:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 1014fd0:	00004d06 	br	1015108 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014fd4:	0005303a 	rdctl	r2,status
 1014fd8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014fdc:	e0fff917 	ldw	r3,-28(fp)
 1014fe0:	00bfff84 	movi	r2,-2
 1014fe4:	1884703a 	and	r2,r3,r2
 1014fe8:	1001703a 	wrctl	status,r2
  
  return context;
 1014fec:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 1014ff0:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 1014ff4:	e0bffe17 	ldw	r2,-8(fp)
 1014ff8:	10800b8b 	ldhu	r2,46(r2)
 1014ffc:	10bfffcc 	andi	r2,r2,65535
 1015000:	1005003a 	cmpeq	r2,r2,zero
 1015004:	1000391e 	bne	r2,zero,10150ec <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 1015008:	e0bffe17 	ldw	r2,-8(fp)
 101500c:	10800b8b 	ldhu	r2,46(r2)
 1015010:	10bfffc4 	addi	r2,r2,-1
 1015014:	1007883a 	mov	r3,r2
 1015018:	e0bffe17 	ldw	r2,-8(fp)
 101501c:	10c00b8d 	sth	r3,46(r2)
 1015020:	e0bffe17 	ldw	r2,-8(fp)
 1015024:	10800b8b 	ldhu	r2,46(r2)
 1015028:	10bfffcc 	andi	r2,r2,65535
 101502c:	1004c03a 	cmpne	r2,r2,zero
 1015030:	10002e1e 	bne	r2,zero,10150ec <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 1015034:	e0bffe17 	ldw	r2,-8(fp)
 1015038:	10800c03 	ldbu	r2,48(r2)
 101503c:	10803fcc 	andi	r2,r2,255
 1015040:	10800dcc 	andi	r2,r2,55
 1015044:	1005003a 	cmpeq	r2,r2,zero
 1015048:	10000b1e 	bne	r2,zero,1015078 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 101504c:	e0bffe17 	ldw	r2,-8(fp)
 1015050:	10c00c03 	ldbu	r3,48(r2)
 1015054:	00bff204 	movi	r2,-56
 1015058:	1884703a 	and	r2,r3,r2
 101505c:	1007883a 	mov	r3,r2
 1015060:	e0bffe17 	ldw	r2,-8(fp)
 1015064:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 1015068:	e0fffe17 	ldw	r3,-8(fp)
 101506c:	00800044 	movi	r2,1
 1015070:	18800c45 	stb	r2,49(r3)
 1015074:	00000206 	br	1015080 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 1015078:	e0bffe17 	ldw	r2,-8(fp)
 101507c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 1015080:	e0bffe17 	ldw	r2,-8(fp)
 1015084:	10800c03 	ldbu	r2,48(r2)
 1015088:	10803fcc 	andi	r2,r2,255
 101508c:	1080020c 	andi	r2,r2,8
 1015090:	1004c03a 	cmpne	r2,r2,zero
 1015094:	1000151e 	bne	r2,zero,10150ec <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 1015098:	e0bffe17 	ldw	r2,-8(fp)
 101509c:	10c00d83 	ldbu	r3,54(r2)
 10150a0:	d0a73203 	ldbu	r2,-25400(gp)
 10150a4:	1884b03a 	or	r2,r3,r2
 10150a8:	d0a73205 	stb	r2,-25400(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 10150ac:	e0bffe17 	ldw	r2,-8(fp)
 10150b0:	10800d03 	ldbu	r2,52(r2)
 10150b4:	11003fcc 	andi	r4,r2,255
 10150b8:	e0bffe17 	ldw	r2,-8(fp)
 10150bc:	10800d03 	ldbu	r2,52(r2)
 10150c0:	10c03fcc 	andi	r3,r2,255
 10150c4:	d0a73244 	addi	r2,gp,-25399
 10150c8:	1885883a 	add	r2,r3,r2
 10150cc:	10c00003 	ldbu	r3,0(r2)
 10150d0:	e0bffe17 	ldw	r2,-8(fp)
 10150d4:	10800d43 	ldbu	r2,53(r2)
 10150d8:	1884b03a 	or	r2,r3,r2
 10150dc:	1007883a 	mov	r3,r2
 10150e0:	d0a73244 	addi	r2,gp,-25399
 10150e4:	2085883a 	add	r2,r4,r2
 10150e8:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 10150ec:	e0bffe17 	ldw	r2,-8(fp)
 10150f0:	10800517 	ldw	r2,20(r2)
 10150f4:	e0bffe15 	stw	r2,-8(fp)
 10150f8:	e0bffc17 	ldw	r2,-16(fp)
 10150fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015100:	e0bff817 	ldw	r2,-32(fp)
 1015104:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 1015108:	e0bffe17 	ldw	r2,-8(fp)
 101510c:	10800c83 	ldbu	r2,50(r2)
 1015110:	10803fcc 	andi	r2,r2,255
 1015114:	10800518 	cmpnei	r2,r2,20
 1015118:	103fae1e 	bne	r2,zero,1014fd4 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 101511c:	e037883a 	mov	sp,fp
 1015120:	dfc00117 	ldw	ra,4(sp)
 1015124:	df000017 	ldw	fp,0(sp)
 1015128:	dec00204 	addi	sp,sp,8
 101512c:	f800283a 	ret

01015130 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 1015130:	deffff04 	addi	sp,sp,-4
 1015134:	df000015 	stw	fp,0(sp)
 1015138:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 101513c:	00804784 	movi	r2,286
}
 1015140:	e037883a 	mov	sp,fp
 1015144:	df000017 	ldw	fp,0(sp)
 1015148:	dec00104 	addi	sp,sp,4
 101514c:	f800283a 	ret

01015150 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 1015150:	deffff04 	addi	sp,sp,-4
 1015154:	df000015 	stw	fp,0(sp)
 1015158:	d839883a 	mov	fp,sp
}
 101515c:	e037883a 	mov	sp,fp
 1015160:	df000017 	ldw	fp,0(sp)
 1015164:	dec00104 	addi	sp,sp,4
 1015168:	f800283a 	ret

0101516c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 101516c:	defff804 	addi	sp,sp,-32
 1015170:	dfc00715 	stw	ra,28(sp)
 1015174:	df000615 	stw	fp,24(sp)
 1015178:	df000604 	addi	fp,sp,24
 101517c:	e13ffc15 	stw	r4,-16(fp)
 1015180:	e17ffd15 	stw	r5,-12(fp)
 1015184:	e1bffe05 	stb	r6,-8(fp)
 1015188:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 101518c:	e0bffc17 	ldw	r2,-16(fp)
 1015190:	10800283 	ldbu	r2,10(r2)
 1015194:	10c03fcc 	andi	r3,r2,255
 1015198:	008040b4 	movhi	r2,258
 101519c:	10bdb304 	addi	r2,r2,-2356
 10151a0:	10c5883a 	add	r2,r2,r3
 10151a4:	10800003 	ldbu	r2,0(r2)
 10151a8:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 10151ac:	e0fffa83 	ldbu	r3,-22(fp)
 10151b0:	e0bffc17 	ldw	r2,-16(fp)
 10151b4:	1885883a 	add	r2,r3,r2
 10151b8:	10800204 	addi	r2,r2,8
 10151bc:	108000c3 	ldbu	r2,3(r2)
 10151c0:	10c03fcc 	andi	r3,r2,255
 10151c4:	008040b4 	movhi	r2,258
 10151c8:	10bdb304 	addi	r2,r2,-2356
 10151cc:	10c5883a 	add	r2,r2,r3
 10151d0:	10800003 	ldbu	r2,0(r2)
 10151d4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 10151d8:	e0bffa83 	ldbu	r2,-22(fp)
 10151dc:	100490fa 	slli	r2,r2,3
 10151e0:	1007883a 	mov	r3,r2
 10151e4:	e0bffa43 	ldbu	r2,-23(fp)
 10151e8:	1885883a 	add	r2,r3,r2
 10151ec:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 10151f0:	e0bffa03 	ldbu	r2,-24(fp)
 10151f4:	00c040f4 	movhi	r3,259
 10151f8:	18ea5804 	addi	r3,r3,-22176
 10151fc:	1085883a 	add	r2,r2,r2
 1015200:	1085883a 	add	r2,r2,r2
 1015204:	10c5883a 	add	r2,r2,r3
 1015208:	10800017 	ldw	r2,0(r2)
 101520c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 1015210:	e0bffb17 	ldw	r2,-20(fp)
 1015214:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 1015218:	e0fffb17 	ldw	r3,-20(fp)
 101521c:	e0bffd17 	ldw	r2,-12(fp)
 1015220:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 1015224:	e0bffb17 	ldw	r2,-20(fp)
 1015228:	10800c03 	ldbu	r2,48(r2)
 101522c:	1007883a 	mov	r3,r2
 1015230:	e0bffe03 	ldbu	r2,-8(fp)
 1015234:	0084303a 	nor	r2,zero,r2
 1015238:	1884703a 	and	r2,r3,r2
 101523c:	1007883a 	mov	r3,r2
 1015240:	e0bffb17 	ldw	r2,-20(fp)
 1015244:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 1015248:	e0fffb17 	ldw	r3,-20(fp)
 101524c:	e0bfff03 	ldbu	r2,-4(fp)
 1015250:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 1015254:	e0bffb17 	ldw	r2,-20(fp)
 1015258:	10800c03 	ldbu	r2,48(r2)
 101525c:	10803fcc 	andi	r2,r2,255
 1015260:	1080020c 	andi	r2,r2,8
 1015264:	1004c03a 	cmpne	r2,r2,zero
 1015268:	1000111e 	bne	r2,zero,10152b0 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 101526c:	e0bffb17 	ldw	r2,-20(fp)
 1015270:	10c00d83 	ldbu	r3,54(r2)
 1015274:	d0a73203 	ldbu	r2,-25400(gp)
 1015278:	1884b03a 	or	r2,r3,r2
 101527c:	d0a73205 	stb	r2,-25400(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 1015280:	e13ffa83 	ldbu	r4,-22(fp)
 1015284:	e0fffa83 	ldbu	r3,-22(fp)
 1015288:	d0a73244 	addi	r2,gp,-25399
 101528c:	1885883a 	add	r2,r3,r2
 1015290:	10c00003 	ldbu	r3,0(r2)
 1015294:	e0bffb17 	ldw	r2,-20(fp)
 1015298:	10800d43 	ldbu	r2,53(r2)
 101529c:	1884b03a 	or	r2,r3,r2
 10152a0:	1007883a 	mov	r3,r2
 10152a4:	d0a73244 	addi	r2,gp,-25399
 10152a8:	2085883a 	add	r2,r4,r2
 10152ac:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 10152b0:	e13ffb17 	ldw	r4,-20(fp)
 10152b4:	e17ffc17 	ldw	r5,-16(fp)
 10152b8:	10155640 	call	1015564 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 10152bc:	e0bffb17 	ldw	r2,-20(fp)
 10152c0:	10800817 	ldw	r2,32(r2)
 10152c4:	1005003a 	cmpeq	r2,r2,zero
 10152c8:	1000071e 	bne	r2,zero,10152e8 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 10152cc:	e0bffb17 	ldw	r2,-20(fp)
 10152d0:	11400817 	ldw	r5,32(r2)
 10152d4:	e13ffb17 	ldw	r4,-20(fp)
 10152d8:	101561c0 	call	101561c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 10152dc:	e0fffb17 	ldw	r3,-20(fp)
 10152e0:	e0bffc17 	ldw	r2,-16(fp)
 10152e4:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 10152e8:	e0bffa03 	ldbu	r2,-24(fp)
}
 10152ec:	e037883a 	mov	sp,fp
 10152f0:	dfc00117 	ldw	ra,4(sp)
 10152f4:	df000017 	ldw	fp,0(sp)
 10152f8:	dec00204 	addi	sp,sp,8
 10152fc:	f800283a 	ret

01015300 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 1015300:	defffd04 	addi	sp,sp,-12
 1015304:	df000215 	stw	fp,8(sp)
 1015308:	df000204 	addi	fp,sp,8
 101530c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 1015310:	d0e73517 	ldw	r3,-25388(gp)
 1015314:	e0bfff17 	ldw	r2,-4(fp)
 1015318:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 101531c:	d0a73517 	ldw	r2,-25388(gp)
 1015320:	10800d03 	ldbu	r2,52(r2)
 1015324:	11003fcc 	andi	r4,r2,255
 1015328:	d0a73517 	ldw	r2,-25388(gp)
 101532c:	10800d03 	ldbu	r2,52(r2)
 1015330:	10c03fcc 	andi	r3,r2,255
 1015334:	e0bfff17 	ldw	r2,-4(fp)
 1015338:	1885883a 	add	r2,r3,r2
 101533c:	10800204 	addi	r2,r2,8
 1015340:	10c000c3 	ldbu	r3,3(r2)
 1015344:	d0a73517 	ldw	r2,-25388(gp)
 1015348:	10800d43 	ldbu	r2,53(r2)
 101534c:	1884b03a 	or	r2,r3,r2
 1015350:	1007883a 	mov	r3,r2
 1015354:	e0bfff17 	ldw	r2,-4(fp)
 1015358:	2085883a 	add	r2,r4,r2
 101535c:	10800204 	addi	r2,r2,8
 1015360:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 1015364:	e0bfff17 	ldw	r2,-4(fp)
 1015368:	10c00283 	ldbu	r3,10(r2)
 101536c:	d0a73517 	ldw	r2,-25388(gp)
 1015370:	10800d83 	ldbu	r2,54(r2)
 1015374:	1884b03a 	or	r2,r3,r2
 1015378:	1007883a 	mov	r3,r2
 101537c:	e0bfff17 	ldw	r2,-4(fp)
 1015380:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 1015384:	d0a73517 	ldw	r2,-25388(gp)
 1015388:	10800d03 	ldbu	r2,52(r2)
 101538c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 1015390:	e13ffe03 	ldbu	r4,-8(fp)
 1015394:	e0fffe03 	ldbu	r3,-8(fp)
 1015398:	d0a73244 	addi	r2,gp,-25399
 101539c:	1885883a 	add	r2,r3,r2
 10153a0:	10800003 	ldbu	r2,0(r2)
 10153a4:	1007883a 	mov	r3,r2
 10153a8:	d0a73517 	ldw	r2,-25388(gp)
 10153ac:	10800d43 	ldbu	r2,53(r2)
 10153b0:	0084303a 	nor	r2,zero,r2
 10153b4:	1884703a 	and	r2,r3,r2
 10153b8:	1007883a 	mov	r3,r2
 10153bc:	d0a73244 	addi	r2,gp,-25399
 10153c0:	2085883a 	add	r2,r4,r2
 10153c4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 10153c8:	e0fffe03 	ldbu	r3,-8(fp)
 10153cc:	d0a73244 	addi	r2,gp,-25399
 10153d0:	1885883a 	add	r2,r3,r2
 10153d4:	10800003 	ldbu	r2,0(r2)
 10153d8:	10803fcc 	andi	r2,r2,255
 10153dc:	1004c03a 	cmpne	r2,r2,zero
 10153e0:	1000071e 	bne	r2,zero,1015400 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 10153e4:	d0a73517 	ldw	r2,-25388(gp)
 10153e8:	10800d83 	ldbu	r2,54(r2)
 10153ec:	0084303a 	nor	r2,zero,r2
 10153f0:	1007883a 	mov	r3,r2
 10153f4:	d0a73203 	ldbu	r2,-25400(gp)
 10153f8:	1884703a 	and	r2,r3,r2
 10153fc:	d0a73205 	stb	r2,-25400(gp)
    }
}
 1015400:	e037883a 	mov	sp,fp
 1015404:	df000017 	ldw	fp,0(sp)
 1015408:	dec00104 	addi	sp,sp,4
 101540c:	f800283a 	ret

01015410 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 1015410:	defffb04 	addi	sp,sp,-20
 1015414:	df000415 	stw	fp,16(sp)
 1015418:	df000404 	addi	fp,sp,16
 101541c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 1015420:	d0a73517 	ldw	r2,-25388(gp)
 1015424:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 1015428:	d0e73517 	ldw	r3,-25388(gp)
 101542c:	e0bfff17 	ldw	r2,-4(fp)
 1015430:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 1015434:	e0bfff17 	ldw	r2,-4(fp)
 1015438:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 101543c:	e0bffe17 	ldw	r2,-8(fp)
 1015440:	10800017 	ldw	r2,0(r2)
 1015444:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 1015448:	00002006 	br	10154cc <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 101544c:	d0a73517 	ldw	r2,-25388(gp)
 1015450:	10800d03 	ldbu	r2,52(r2)
 1015454:	11003fcc 	andi	r4,r2,255
 1015458:	d0a73517 	ldw	r2,-25388(gp)
 101545c:	10800d03 	ldbu	r2,52(r2)
 1015460:	10c03fcc 	andi	r3,r2,255
 1015464:	e0bffd17 	ldw	r2,-12(fp)
 1015468:	1885883a 	add	r2,r3,r2
 101546c:	10800204 	addi	r2,r2,8
 1015470:	10c000c3 	ldbu	r3,3(r2)
 1015474:	d0a73517 	ldw	r2,-25388(gp)
 1015478:	10800d43 	ldbu	r2,53(r2)
 101547c:	1884b03a 	or	r2,r3,r2
 1015480:	1007883a 	mov	r3,r2
 1015484:	e0bffd17 	ldw	r2,-12(fp)
 1015488:	2085883a 	add	r2,r4,r2
 101548c:	10800204 	addi	r2,r2,8
 1015490:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 1015494:	e0bffd17 	ldw	r2,-12(fp)
 1015498:	10c00283 	ldbu	r3,10(r2)
 101549c:	d0a73517 	ldw	r2,-25388(gp)
 10154a0:	10800d83 	ldbu	r2,54(r2)
 10154a4:	1884b03a 	or	r2,r3,r2
 10154a8:	1007883a 	mov	r3,r2
 10154ac:	e0bffd17 	ldw	r2,-12(fp)
 10154b0:	10c00285 	stb	r3,10(r2)
        pevents++;
 10154b4:	e0bffe17 	ldw	r2,-8(fp)
 10154b8:	10800104 	addi	r2,r2,4
 10154bc:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 10154c0:	e0bffe17 	ldw	r2,-8(fp)
 10154c4:	10800017 	ldw	r2,0(r2)
 10154c8:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 10154cc:	e0bffd17 	ldw	r2,-12(fp)
 10154d0:	1004c03a 	cmpne	r2,r2,zero
 10154d4:	103fdd1e 	bne	r2,zero,101544c <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 10154d8:	d0a73517 	ldw	r2,-25388(gp)
 10154dc:	10800d03 	ldbu	r2,52(r2)
 10154e0:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 10154e4:	e13ffc03 	ldbu	r4,-16(fp)
 10154e8:	e0fffc03 	ldbu	r3,-16(fp)
 10154ec:	d0a73244 	addi	r2,gp,-25399
 10154f0:	1885883a 	add	r2,r3,r2
 10154f4:	10800003 	ldbu	r2,0(r2)
 10154f8:	1007883a 	mov	r3,r2
 10154fc:	d0a73517 	ldw	r2,-25388(gp)
 1015500:	10800d43 	ldbu	r2,53(r2)
 1015504:	0084303a 	nor	r2,zero,r2
 1015508:	1884703a 	and	r2,r3,r2
 101550c:	1007883a 	mov	r3,r2
 1015510:	d0a73244 	addi	r2,gp,-25399
 1015514:	2085883a 	add	r2,r4,r2
 1015518:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 101551c:	e0fffc03 	ldbu	r3,-16(fp)
 1015520:	d0a73244 	addi	r2,gp,-25399
 1015524:	1885883a 	add	r2,r3,r2
 1015528:	10800003 	ldbu	r2,0(r2)
 101552c:	10803fcc 	andi	r2,r2,255
 1015530:	1004c03a 	cmpne	r2,r2,zero
 1015534:	1000071e 	bne	r2,zero,1015554 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 1015538:	d0a73517 	ldw	r2,-25388(gp)
 101553c:	10800d83 	ldbu	r2,54(r2)
 1015540:	0084303a 	nor	r2,zero,r2
 1015544:	1007883a 	mov	r3,r2
 1015548:	d0a73203 	ldbu	r2,-25400(gp)
 101554c:	1884703a 	and	r2,r3,r2
 1015550:	d0a73205 	stb	r2,-25400(gp)
    }
}
 1015554:	e037883a 	mov	sp,fp
 1015558:	df000017 	ldw	fp,0(sp)
 101555c:	dec00104 	addi	sp,sp,4
 1015560:	f800283a 	ret

01015564 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 1015564:	defffc04 	addi	sp,sp,-16
 1015568:	df000315 	stw	fp,12(sp)
 101556c:	df000304 	addi	fp,sp,12
 1015570:	e13ffe15 	stw	r4,-8(fp)
 1015574:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 1015578:	e0bffe17 	ldw	r2,-8(fp)
 101557c:	10800d03 	ldbu	r2,52(r2)
 1015580:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 1015584:	e13ffd03 	ldbu	r4,-12(fp)
 1015588:	e0fffd03 	ldbu	r3,-12(fp)
 101558c:	e0bfff17 	ldw	r2,-4(fp)
 1015590:	1885883a 	add	r2,r3,r2
 1015594:	10800204 	addi	r2,r2,8
 1015598:	108000c3 	ldbu	r2,3(r2)
 101559c:	1007883a 	mov	r3,r2
 10155a0:	e0bffe17 	ldw	r2,-8(fp)
 10155a4:	10800d43 	ldbu	r2,53(r2)
 10155a8:	0084303a 	nor	r2,zero,r2
 10155ac:	1884703a 	and	r2,r3,r2
 10155b0:	1007883a 	mov	r3,r2
 10155b4:	e0bfff17 	ldw	r2,-4(fp)
 10155b8:	2085883a 	add	r2,r4,r2
 10155bc:	10800204 	addi	r2,r2,8
 10155c0:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 10155c4:	e0fffd03 	ldbu	r3,-12(fp)
 10155c8:	e0bfff17 	ldw	r2,-4(fp)
 10155cc:	1885883a 	add	r2,r3,r2
 10155d0:	10800204 	addi	r2,r2,8
 10155d4:	108000c3 	ldbu	r2,3(r2)
 10155d8:	10803fcc 	andi	r2,r2,255
 10155dc:	1004c03a 	cmpne	r2,r2,zero
 10155e0:	10000a1e 	bne	r2,zero,101560c <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 10155e4:	e0bfff17 	ldw	r2,-4(fp)
 10155e8:	10800283 	ldbu	r2,10(r2)
 10155ec:	1007883a 	mov	r3,r2
 10155f0:	e0bffe17 	ldw	r2,-8(fp)
 10155f4:	10800d83 	ldbu	r2,54(r2)
 10155f8:	0084303a 	nor	r2,zero,r2
 10155fc:	1884703a 	and	r2,r3,r2
 1015600:	1007883a 	mov	r3,r2
 1015604:	e0bfff17 	ldw	r2,-4(fp)
 1015608:	10c00285 	stb	r3,10(r2)
    }
}
 101560c:	e037883a 	mov	sp,fp
 1015610:	df000017 	ldw	fp,0(sp)
 1015614:	dec00104 	addi	sp,sp,4
 1015618:	f800283a 	ret

0101561c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 101561c:	defffa04 	addi	sp,sp,-24
 1015620:	df000515 	stw	fp,20(sp)
 1015624:	df000504 	addi	fp,sp,20
 1015628:	e13ffe15 	stw	r4,-8(fp)
 101562c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 1015630:	e0bffe17 	ldw	r2,-8(fp)
 1015634:	10800d03 	ldbu	r2,52(r2)
 1015638:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 101563c:	e0bffe17 	ldw	r2,-8(fp)
 1015640:	10800d83 	ldbu	r2,54(r2)
 1015644:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 1015648:	e0bffe17 	ldw	r2,-8(fp)
 101564c:	10800d43 	ldbu	r2,53(r2)
 1015650:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 1015654:	e0bfff17 	ldw	r2,-4(fp)
 1015658:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 101565c:	e0bffd17 	ldw	r2,-12(fp)
 1015660:	10800017 	ldw	r2,0(r2)
 1015664:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 1015668:	00002606 	br	1015704 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 101566c:	e13ffb83 	ldbu	r4,-18(fp)
 1015670:	e0fffb83 	ldbu	r3,-18(fp)
 1015674:	e0bffc17 	ldw	r2,-16(fp)
 1015678:	1885883a 	add	r2,r3,r2
 101567c:	10800204 	addi	r2,r2,8
 1015680:	108000c3 	ldbu	r2,3(r2)
 1015684:	1007883a 	mov	r3,r2
 1015688:	e0bffb03 	ldbu	r2,-20(fp)
 101568c:	0084303a 	nor	r2,zero,r2
 1015690:	1884703a 	and	r2,r3,r2
 1015694:	1007883a 	mov	r3,r2
 1015698:	e0bffc17 	ldw	r2,-16(fp)
 101569c:	2085883a 	add	r2,r4,r2
 10156a0:	10800204 	addi	r2,r2,8
 10156a4:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 10156a8:	e0fffb83 	ldbu	r3,-18(fp)
 10156ac:	e0bffc17 	ldw	r2,-16(fp)
 10156b0:	1885883a 	add	r2,r3,r2
 10156b4:	10800204 	addi	r2,r2,8
 10156b8:	108000c3 	ldbu	r2,3(r2)
 10156bc:	10803fcc 	andi	r2,r2,255
 10156c0:	1004c03a 	cmpne	r2,r2,zero
 10156c4:	1000091e 	bne	r2,zero,10156ec <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 10156c8:	e0bffc17 	ldw	r2,-16(fp)
 10156cc:	10800283 	ldbu	r2,10(r2)
 10156d0:	1007883a 	mov	r3,r2
 10156d4:	e0bffb43 	ldbu	r2,-19(fp)
 10156d8:	0084303a 	nor	r2,zero,r2
 10156dc:	1884703a 	and	r2,r3,r2
 10156e0:	1007883a 	mov	r3,r2
 10156e4:	e0bffc17 	ldw	r2,-16(fp)
 10156e8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 10156ec:	e0bffd17 	ldw	r2,-12(fp)
 10156f0:	10800104 	addi	r2,r2,4
 10156f4:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 10156f8:	e0bffd17 	ldw	r2,-12(fp)
 10156fc:	10800017 	ldw	r2,0(r2)
 1015700:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 1015704:	e0bffc17 	ldw	r2,-16(fp)
 1015708:	1004c03a 	cmpne	r2,r2,zero
 101570c:	103fd71e 	bne	r2,zero,101566c <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 1015710:	e037883a 	mov	sp,fp
 1015714:	df000017 	ldw	fp,0(sp)
 1015718:	dec00104 	addi	sp,sp,4
 101571c:	f800283a 	ret

01015720 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 1015720:	defffc04 	addi	sp,sp,-16
 1015724:	df000315 	stw	fp,12(sp)
 1015728:	df000304 	addi	fp,sp,12
 101572c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 1015730:	e0bfff17 	ldw	r2,-4(fp)
 1015734:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 1015738:	e0bfff17 	ldw	r2,-4(fp)
 101573c:	108002c4 	addi	r2,r2,11
 1015740:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1015744:	e03ffd05 	stb	zero,-12(fp)
 1015748:	00000806 	br	101576c <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 101574c:	e0bffe17 	ldw	r2,-8(fp)
 1015750:	10000005 	stb	zero,0(r2)
 1015754:	e0bffe17 	ldw	r2,-8(fp)
 1015758:	10800044 	addi	r2,r2,1
 101575c:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1015760:	e0bffd03 	ldbu	r2,-12(fp)
 1015764:	10800044 	addi	r2,r2,1
 1015768:	e0bffd05 	stb	r2,-12(fp)
 101576c:	e0bffd03 	ldbu	r2,-12(fp)
 1015770:	108000f0 	cmpltui	r2,r2,3
 1015774:	103ff51e 	bne	r2,zero,101574c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 1015778:	e037883a 	mov	sp,fp
 101577c:	df000017 	ldw	fp,0(sp)
 1015780:	dec00104 	addi	sp,sp,4
 1015784:	f800283a 	ret

01015788 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 1015788:	defffb04 	addi	sp,sp,-20
 101578c:	dfc00415 	stw	ra,16(sp)
 1015790:	df000315 	stw	fp,12(sp)
 1015794:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 1015798:	010040f4 	movhi	r4,259
 101579c:	21264404 	addi	r4,r4,-26352
 10157a0:	0142d004 	movi	r5,2880
 10157a4:	1015aec0 	call	1015aec <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 10157a8:	008040f4 	movhi	r2,259
 10157ac:	10a64404 	addi	r2,r2,-26352
 10157b0:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 10157b4:	008040f4 	movhi	r2,259
 10157b8:	10a65004 	addi	r2,r2,-26304
 10157bc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 10157c0:	e03fff0d 	sth	zero,-4(fp)
 10157c4:	00001306 	br	1015814 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 10157c8:	e0bffe17 	ldw	r2,-8(fp)
 10157cc:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 10157d0:	e0fffe17 	ldw	r3,-8(fp)
 10157d4:	e0bffd17 	ldw	r2,-12(fp)
 10157d8:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 10157dc:	e0fffe17 	ldw	r3,-8(fp)
 10157e0:	00800fc4 	movi	r2,63
 10157e4:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 10157e8:	e0bffe17 	ldw	r2,-8(fp)
 10157ec:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 10157f0:	e0bffe17 	ldw	r2,-8(fp)
 10157f4:	10800c04 	addi	r2,r2,48
 10157f8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 10157fc:	e0bffd17 	ldw	r2,-12(fp)
 1015800:	10800c04 	addi	r2,r2,48
 1015804:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 1015808:	e0bfff0b 	ldhu	r2,-4(fp)
 101580c:	10800044 	addi	r2,r2,1
 1015810:	e0bfff0d 	sth	r2,-4(fp)
 1015814:	e0bfff0b 	ldhu	r2,-4(fp)
 1015818:	10800ef0 	cmpltui	r2,r2,59
 101581c:	103fea1e 	bne	r2,zero,10157c8 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 1015820:	e0bffe17 	ldw	r2,-8(fp)
 1015824:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 1015828:	e0bffe17 	ldw	r2,-8(fp)
 101582c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 1015830:	e0fffe17 	ldw	r3,-8(fp)
 1015834:	00800fc4 	movi	r2,63
 1015838:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 101583c:	e0bffe17 	ldw	r2,-8(fp)
 1015840:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 1015844:	008040f4 	movhi	r2,259
 1015848:	10a64404 	addi	r2,r2,-26352
 101584c:	d0a73315 	stw	r2,-25396(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 1015850:	e037883a 	mov	sp,fp
 1015854:	dfc00117 	ldw	ra,4(sp)
 1015858:	df000017 	ldw	fp,0(sp)
 101585c:	dec00204 	addi	sp,sp,8
 1015860:	f800283a 	ret

01015864 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 1015864:	deffff04 	addi	sp,sp,-4
 1015868:	df000015 	stw	fp,0(sp)
 101586c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 1015870:	d0273615 	stw	zero,-25384(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 1015874:	d0273405 	stb	zero,-25392(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 1015878:	d0272605 	stb	zero,-25448(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 101587c:	d0272e45 	stb	zero,-25415(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 1015880:	d0272645 	stb	zero,-25447(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 1015884:	d0272b15 	stw	zero,-25428(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 1015888:	d0272715 	stw	zero,-25444(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 101588c:	d0273915 	stw	zero,-25372(gp)
    OSIdleCtrMax  = 0L;
 1015890:	d0272c15 	stw	zero,-25424(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 1015894:	d0273805 	stb	zero,-25376(gp)
#endif
}
 1015898:	e037883a 	mov	sp,fp
 101589c:	df000017 	ldw	fp,0(sp)
 10158a0:	dec00104 	addi	sp,sp,4
 10158a4:	f800283a 	ret

010158a8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 10158a8:	defffd04 	addi	sp,sp,-12
 10158ac:	df000215 	stw	fp,8(sp)
 10158b0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 10158b4:	d0273205 	stb	zero,-25400(gp)
    prdytbl       = &OSRdyTbl[0];
 10158b8:	d0a73244 	addi	r2,gp,-25399
 10158bc:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 10158c0:	e03fff05 	stb	zero,-4(fp)
 10158c4:	00000806 	br	10158e8 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 10158c8:	e0bffe17 	ldw	r2,-8(fp)
 10158cc:	10000005 	stb	zero,0(r2)
 10158d0:	e0bffe17 	ldw	r2,-8(fp)
 10158d4:	10800044 	addi	r2,r2,1
 10158d8:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 10158dc:	e0bfff03 	ldbu	r2,-4(fp)
 10158e0:	10800044 	addi	r2,r2,1
 10158e4:	e0bfff05 	stb	r2,-4(fp)
 10158e8:	e0bfff03 	ldbu	r2,-4(fp)
 10158ec:	108000f0 	cmpltui	r2,r2,3
 10158f0:	103ff51e 	bne	r2,zero,10158c8 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 10158f4:	d0272845 	stb	zero,-25439(gp)
    OSPrioHighRdy = 0;
 10158f8:	d0272805 	stb	zero,-25440(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 10158fc:	d0273015 	stw	zero,-25408(gp)
    OSTCBCur      = (OS_TCB *)0;
 1015900:	d0273515 	stw	zero,-25388(gp)
}
 1015904:	e037883a 	mov	sp,fp
 1015908:	df000017 	ldw	fp,0(sp)
 101590c:	dec00104 	addi	sp,sp,4
 1015910:	f800283a 	ret

01015914 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 1015914:	defff804 	addi	sp,sp,-32
 1015918:	dfc00715 	stw	ra,28(sp)
 101591c:	df000615 	stw	fp,24(sp)
 1015920:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 1015924:	018040f4 	movhi	r6,259
 1015928:	31a64304 	addi	r6,r6,-26356
 101592c:	00bfffd4 	movui	r2,65535
 1015930:	d8800015 	stw	r2,0(sp)
 1015934:	008040f4 	movhi	r2,259
 1015938:	10a44404 	addi	r2,r2,-28400
 101593c:	d8800115 	stw	r2,4(sp)
 1015940:	00808004 	movi	r2,512
 1015944:	d8800215 	stw	r2,8(sp)
 1015948:	d8000315 	stw	zero,12(sp)
 101594c:	008000c4 	movi	r2,3
 1015950:	d8800415 	stw	r2,16(sp)
 1015954:	01004074 	movhi	r4,257
 1015958:	21177204 	addi	r4,r4,24008
 101595c:	000b883a 	mov	r5,zero
 1015960:	01c00504 	movi	r7,20
 1015964:	101aba80 	call	101aba8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 1015968:	014040b4 	movhi	r5,258
 101596c:	297df304 	addi	r5,r5,-2100
 1015970:	01000504 	movi	r4,20
 1015974:	e1bfff04 	addi	r6,fp,-4
 1015978:	101b4dc0 	call	101b4dc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 101597c:	e037883a 	mov	sp,fp
 1015980:	dfc00117 	ldw	ra,4(sp)
 1015984:	df000017 	ldw	fp,0(sp)
 1015988:	dec00204 	addi	sp,sp,8
 101598c:	f800283a 	ret

01015990 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 1015990:	defff804 	addi	sp,sp,-32
 1015994:	dfc00715 	stw	ra,28(sp)
 1015998:	df000615 	stw	fp,24(sp)
 101599c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 10159a0:	018040f4 	movhi	r6,259
 10159a4:	31a3cb04 	addi	r6,r6,-28884
 10159a8:	00bfff94 	movui	r2,65534
 10159ac:	d8800015 	stw	r2,0(sp)
 10159b0:	008040f4 	movhi	r2,259
 10159b4:	10a1cc04 	addi	r2,r2,-30928
 10159b8:	d8800115 	stw	r2,4(sp)
 10159bc:	00808004 	movi	r2,512
 10159c0:	d8800215 	stw	r2,8(sp)
 10159c4:	d8000315 	stw	zero,12(sp)
 10159c8:	008000c4 	movi	r2,3
 10159cc:	d8800415 	stw	r2,16(sp)
 10159d0:	01004074 	movhi	r4,257
 10159d4:	21178904 	addi	r4,r4,24100
 10159d8:	000b883a 	mov	r5,zero
 10159dc:	01c004c4 	movi	r7,19
 10159e0:	101aba80 	call	101aba8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 10159e4:	014040b4 	movhi	r5,258
 10159e8:	297df704 	addi	r5,r5,-2084
 10159ec:	010004c4 	movi	r4,19
 10159f0:	e1bfff04 	addi	r6,fp,-4
 10159f4:	101b4dc0 	call	101b4dc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 10159f8:	e037883a 	mov	sp,fp
 10159fc:	dfc00117 	ldw	ra,4(sp)
 1015a00:	df000017 	ldw	fp,0(sp)
 1015a04:	dec00204 	addi	sp,sp,8
 1015a08:	f800283a 	ret

01015a0c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 1015a0c:	defffb04 	addi	sp,sp,-20
 1015a10:	dfc00415 	stw	ra,16(sp)
 1015a14:	df000315 	stw	fp,12(sp)
 1015a18:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 1015a1c:	010040f4 	movhi	r4,259
 1015a20:	21291404 	addi	r4,r4,-23472
 1015a24:	01414404 	movi	r5,1296
 1015a28:	1015aec0 	call	1015aec <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 1015a2c:	010040f4 	movhi	r4,259
 1015a30:	212a5804 	addi	r4,r4,-22176
 1015a34:	01401504 	movi	r5,84
 1015a38:	1015aec0 	call	1015aec <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 1015a3c:	008040f4 	movhi	r2,259
 1015a40:	10a91404 	addi	r2,r2,-23472
 1015a44:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 1015a48:	008040f4 	movhi	r2,259
 1015a4c:	10a92f04 	addi	r2,r2,-23364
 1015a50:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 1015a54:	e03fff05 	stb	zero,-4(fp)
 1015a58:	00001106 	br	1015aa0 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 1015a5c:	e0fffe17 	ldw	r3,-8(fp)
 1015a60:	e0bffd17 	ldw	r2,-12(fp)
 1015a64:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 1015a68:	e0fffe17 	ldw	r3,-8(fp)
 1015a6c:	00800fc4 	movi	r2,63
 1015a70:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 1015a74:	e0bffe17 	ldw	r2,-8(fp)
 1015a78:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 1015a7c:	e0bffe17 	ldw	r2,-8(fp)
 1015a80:	10801b04 	addi	r2,r2,108
 1015a84:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 1015a88:	e0bffd17 	ldw	r2,-12(fp)
 1015a8c:	10801b04 	addi	r2,r2,108
 1015a90:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 1015a94:	e0bfff03 	ldbu	r2,-4(fp)
 1015a98:	10800044 	addi	r2,r2,1
 1015a9c:	e0bfff05 	stb	r2,-4(fp)
 1015aa0:	e0bfff03 	ldbu	r2,-4(fp)
 1015aa4:	108002f0 	cmpltui	r2,r2,11
 1015aa8:	103fec1e 	bne	r2,zero,1015a5c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 1015aac:	e0bffe17 	ldw	r2,-8(fp)
 1015ab0:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 1015ab4:	e0fffe17 	ldw	r3,-8(fp)
 1015ab8:	00800fc4 	movi	r2,63
 1015abc:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 1015ac0:	e0bffe17 	ldw	r2,-8(fp)
 1015ac4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 1015ac8:	d0272915 	stw	zero,-25436(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 1015acc:	008040f4 	movhi	r2,259
 1015ad0:	10a91404 	addi	r2,r2,-23472
 1015ad4:	d0a72d15 	stw	r2,-25420(gp)
}
 1015ad8:	e037883a 	mov	sp,fp
 1015adc:	dfc00117 	ldw	ra,4(sp)
 1015ae0:	df000017 	ldw	fp,0(sp)
 1015ae4:	dec00204 	addi	sp,sp,8
 1015ae8:	f800283a 	ret

01015aec <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 1015aec:	defffd04 	addi	sp,sp,-12
 1015af0:	df000215 	stw	fp,8(sp)
 1015af4:	df000204 	addi	fp,sp,8
 1015af8:	e13ffe15 	stw	r4,-8(fp)
 1015afc:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 1015b00:	00000806 	br	1015b24 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 1015b04:	e0bffe17 	ldw	r2,-8(fp)
 1015b08:	10000005 	stb	zero,0(r2)
 1015b0c:	e0bffe17 	ldw	r2,-8(fp)
 1015b10:	10800044 	addi	r2,r2,1
 1015b14:	e0bffe15 	stw	r2,-8(fp)
        size--;
 1015b18:	e0bfff0b 	ldhu	r2,-4(fp)
 1015b1c:	10bfffc4 	addi	r2,r2,-1
 1015b20:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 1015b24:	e0bfff0b 	ldhu	r2,-4(fp)
 1015b28:	1004c03a 	cmpne	r2,r2,zero
 1015b2c:	103ff51e 	bne	r2,zero,1015b04 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 1015b30:	e037883a 	mov	sp,fp
 1015b34:	df000017 	ldw	fp,0(sp)
 1015b38:	dec00104 	addi	sp,sp,4
 1015b3c:	f800283a 	ret

01015b40 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 1015b40:	defffc04 	addi	sp,sp,-16
 1015b44:	df000315 	stw	fp,12(sp)
 1015b48:	df000304 	addi	fp,sp,12
 1015b4c:	e13ffd15 	stw	r4,-12(fp)
 1015b50:	e17ffe15 	stw	r5,-8(fp)
 1015b54:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 1015b58:	00000d06 	br	1015b90 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 1015b5c:	e0bffe17 	ldw	r2,-8(fp)
 1015b60:	10c00003 	ldbu	r3,0(r2)
 1015b64:	e0bffd17 	ldw	r2,-12(fp)
 1015b68:	10c00005 	stb	r3,0(r2)
 1015b6c:	e0bffd17 	ldw	r2,-12(fp)
 1015b70:	10800044 	addi	r2,r2,1
 1015b74:	e0bffd15 	stw	r2,-12(fp)
 1015b78:	e0bffe17 	ldw	r2,-8(fp)
 1015b7c:	10800044 	addi	r2,r2,1
 1015b80:	e0bffe15 	stw	r2,-8(fp)
        size--;
 1015b84:	e0bfff0b 	ldhu	r2,-4(fp)
 1015b88:	10bfffc4 	addi	r2,r2,-1
 1015b8c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 1015b90:	e0bfff0b 	ldhu	r2,-4(fp)
 1015b94:	1004c03a 	cmpne	r2,r2,zero
 1015b98:	103ff01e 	bne	r2,zero,1015b5c <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 1015b9c:	e037883a 	mov	sp,fp
 1015ba0:	df000017 	ldw	fp,0(sp)
 1015ba4:	dec00104 	addi	sp,sp,4
 1015ba8:	f800283a 	ret

01015bac <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 1015bac:	defffb04 	addi	sp,sp,-20
 1015bb0:	dfc00415 	stw	ra,16(sp)
 1015bb4:	df000315 	stw	fp,12(sp)
 1015bb8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1015bbc:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015bc0:	0005303a 	rdctl	r2,status
 1015bc4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015bc8:	e0fffe17 	ldw	r3,-8(fp)
 1015bcc:	00bfff84 	movi	r2,-2
 1015bd0:	1884703a 	and	r2,r3,r2
 1015bd4:	1001703a 	wrctl	status,r2
  
  return context;
 1015bd8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 1015bdc:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 1015be0:	d0a73403 	ldbu	r2,-25392(gp)
 1015be4:	10803fcc 	andi	r2,r2,255
 1015be8:	1004c03a 	cmpne	r2,r2,zero
 1015bec:	10001b1e 	bne	r2,zero,1015c5c <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 1015bf0:	d0a72603 	ldbu	r2,-25448(gp)
 1015bf4:	10803fcc 	andi	r2,r2,255
 1015bf8:	1004c03a 	cmpne	r2,r2,zero
 1015bfc:	1000171e 	bne	r2,zero,1015c5c <OS_Sched+0xb0>
            OS_SchedNew();
 1015c00:	1015c800 	call	1015c80 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 1015c04:	d0a72803 	ldbu	r2,-25440(gp)
 1015c08:	d0e72843 	ldbu	r3,-25439(gp)
 1015c0c:	11003fcc 	andi	r4,r2,255
 1015c10:	18803fcc 	andi	r2,r3,255
 1015c14:	20801126 	beq	r4,r2,1015c5c <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 1015c18:	d0a72803 	ldbu	r2,-25440(gp)
 1015c1c:	10803fcc 	andi	r2,r2,255
 1015c20:	00c040f4 	movhi	r3,259
 1015c24:	18ea5804 	addi	r3,r3,-22176
 1015c28:	1085883a 	add	r2,r2,r2
 1015c2c:	1085883a 	add	r2,r2,r2
 1015c30:	10c5883a 	add	r2,r2,r3
 1015c34:	10800017 	ldw	r2,0(r2)
 1015c38:	d0a73015 	stw	r2,-25408(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 1015c3c:	d0e73017 	ldw	r3,-25408(gp)
 1015c40:	18800e17 	ldw	r2,56(r3)
 1015c44:	10800044 	addi	r2,r2,1
 1015c48:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 1015c4c:	d0a72b17 	ldw	r2,-25428(gp)
 1015c50:	10800044 	addi	r2,r2,1
 1015c54:	d0a72b15 	stw	r2,-25428(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 1015c58:	101dfa00 	call	101dfa0 <OSCtxSw>
 1015c5c:	e0bfff17 	ldw	r2,-4(fp)
 1015c60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015c64:	e0bffd17 	ldw	r2,-12(fp)
 1015c68:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 1015c6c:	e037883a 	mov	sp,fp
 1015c70:	dfc00117 	ldw	ra,4(sp)
 1015c74:	df000017 	ldw	fp,0(sp)
 1015c78:	dec00204 	addi	sp,sp,8
 1015c7c:	f800283a 	ret

01015c80 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 1015c80:	defffe04 	addi	sp,sp,-8
 1015c84:	df000115 	stw	fp,4(sp)
 1015c88:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 1015c8c:	d0a73203 	ldbu	r2,-25400(gp)
 1015c90:	10c03fcc 	andi	r3,r2,255
 1015c94:	008040b4 	movhi	r2,258
 1015c98:	10bdb304 	addi	r2,r2,-2356
 1015c9c:	10c5883a 	add	r2,r2,r3
 1015ca0:	10800003 	ldbu	r2,0(r2)
 1015ca4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 1015ca8:	e0bfff03 	ldbu	r2,-4(fp)
 1015cac:	100490fa 	slli	r2,r2,3
 1015cb0:	1009883a 	mov	r4,r2
 1015cb4:	e0ffff03 	ldbu	r3,-4(fp)
 1015cb8:	d0a73244 	addi	r2,gp,-25399
 1015cbc:	1885883a 	add	r2,r3,r2
 1015cc0:	10800003 	ldbu	r2,0(r2)
 1015cc4:	10c03fcc 	andi	r3,r2,255
 1015cc8:	008040b4 	movhi	r2,258
 1015ccc:	10bdb304 	addi	r2,r2,-2356
 1015cd0:	10c5883a 	add	r2,r2,r3
 1015cd4:	10800003 	ldbu	r2,0(r2)
 1015cd8:	2085883a 	add	r2,r4,r2
 1015cdc:	d0a72805 	stb	r2,-25440(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 1015ce0:	e037883a 	mov	sp,fp
 1015ce4:	df000017 	ldw	fp,0(sp)
 1015ce8:	dec00104 	addi	sp,sp,4
 1015cec:	f800283a 	ret

01015cf0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 1015cf0:	defffc04 	addi	sp,sp,-16
 1015cf4:	df000315 	stw	fp,12(sp)
 1015cf8:	df000304 	addi	fp,sp,12
 1015cfc:	e13ffe15 	stw	r4,-8(fp)
 1015d00:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 1015d04:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 1015d08:	00000d06 	br	1015d40 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 1015d0c:	e0bfff17 	ldw	r2,-4(fp)
 1015d10:	10c00003 	ldbu	r3,0(r2)
 1015d14:	e0bffe17 	ldw	r2,-8(fp)
 1015d18:	10c00005 	stb	r3,0(r2)
 1015d1c:	e0bffe17 	ldw	r2,-8(fp)
 1015d20:	10800044 	addi	r2,r2,1
 1015d24:	e0bffe15 	stw	r2,-8(fp)
 1015d28:	e0bfff17 	ldw	r2,-4(fp)
 1015d2c:	10800044 	addi	r2,r2,1
 1015d30:	e0bfff15 	stw	r2,-4(fp)
        len++;
 1015d34:	e0bffd03 	ldbu	r2,-12(fp)
 1015d38:	10800044 	addi	r2,r2,1
 1015d3c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 1015d40:	e0bfff17 	ldw	r2,-4(fp)
 1015d44:	10800003 	ldbu	r2,0(r2)
 1015d48:	10803fcc 	andi	r2,r2,255
 1015d4c:	1004c03a 	cmpne	r2,r2,zero
 1015d50:	103fee1e 	bne	r2,zero,1015d0c <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 1015d54:	e0bffe17 	ldw	r2,-8(fp)
 1015d58:	10000005 	stb	zero,0(r2)
    return (len);
 1015d5c:	e0bffd03 	ldbu	r2,-12(fp)
}
 1015d60:	e037883a 	mov	sp,fp
 1015d64:	df000017 	ldw	fp,0(sp)
 1015d68:	dec00104 	addi	sp,sp,4
 1015d6c:	f800283a 	ret

01015d70 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 1015d70:	defffd04 	addi	sp,sp,-12
 1015d74:	df000215 	stw	fp,8(sp)
 1015d78:	df000204 	addi	fp,sp,8
 1015d7c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 1015d80:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 1015d84:	00000606 	br	1015da0 <OS_StrLen+0x30>
        psrc++;
 1015d88:	e0bfff17 	ldw	r2,-4(fp)
 1015d8c:	10800044 	addi	r2,r2,1
 1015d90:	e0bfff15 	stw	r2,-4(fp)
        len++;
 1015d94:	e0bffe03 	ldbu	r2,-8(fp)
 1015d98:	10800044 	addi	r2,r2,1
 1015d9c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 1015da0:	e0bfff17 	ldw	r2,-4(fp)
 1015da4:	10800003 	ldbu	r2,0(r2)
 1015da8:	10803fcc 	andi	r2,r2,255
 1015dac:	1004c03a 	cmpne	r2,r2,zero
 1015db0:	103ff51e 	bne	r2,zero,1015d88 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 1015db4:	e0bffe03 	ldbu	r2,-8(fp)
}
 1015db8:	e037883a 	mov	sp,fp
 1015dbc:	df000017 	ldw	fp,0(sp)
 1015dc0:	dec00104 	addi	sp,sp,4
 1015dc4:	f800283a 	ret

01015dc8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 1015dc8:	defffa04 	addi	sp,sp,-24
 1015dcc:	dfc00515 	stw	ra,20(sp)
 1015dd0:	df000415 	stw	fp,16(sp)
 1015dd4:	df000404 	addi	fp,sp,16
 1015dd8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1015ddc:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015de0:	0005303a 	rdctl	r2,status
 1015de4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015de8:	e0fffd17 	ldw	r3,-12(fp)
 1015dec:	00bfff84 	movi	r2,-2
 1015df0:	1884703a 	and	r2,r3,r2
 1015df4:	1001703a 	wrctl	status,r2
  
  return context;
 1015df8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 1015dfc:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 1015e00:	d0a72717 	ldw	r2,-25444(gp)
 1015e04:	10800044 	addi	r2,r2,1
 1015e08:	d0a72715 	stw	r2,-25444(gp)
 1015e0c:	e0bffe17 	ldw	r2,-8(fp)
 1015e10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015e14:	e0bffc17 	ldw	r2,-16(fp)
 1015e18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 1015e1c:	101e44c0 	call	101e44c <OSTaskIdleHook>
    }
 1015e20:	003fef06 	br	1015de0 <OS_TaskIdle+0x18>

01015e24 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 1015e24:	defffa04 	addi	sp,sp,-24
 1015e28:	dfc00515 	stw	ra,20(sp)
 1015e2c:	df000415 	stw	fp,16(sp)
 1015e30:	df000404 	addi	fp,sp,16
 1015e34:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1015e38:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 1015e3c:	00000206 	br	1015e48 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 1015e40:	01003204 	movi	r4,200
 1015e44:	101bea00 	call	101bea0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 1015e48:	d0a73803 	ldbu	r2,-25376(gp)
 1015e4c:	10803fcc 	andi	r2,r2,255
 1015e50:	1005003a 	cmpeq	r2,r2,zero
 1015e54:	103ffa1e 	bne	r2,zero,1015e40 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 1015e58:	d1272c17 	ldw	r4,-25424(gp)
 1015e5c:	01401904 	movi	r5,100
 1015e60:	1012b280 	call	1012b28 <__udivsi3>
 1015e64:	d0a72c15 	stw	r2,-25424(gp)
    if (OSIdleCtrMax == 0L) {
 1015e68:	d0a72c17 	ldw	r2,-25424(gp)
 1015e6c:	1004c03a 	cmpne	r2,r2,zero
 1015e70:	1000031e 	bne	r2,zero,1015e80 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 1015e74:	d0272e05 	stb	zero,-25416(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 1015e78:	01003fc4 	movi	r4,255
 1015e7c:	101bab40 	call	101bab4 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015e80:	0005303a 	rdctl	r2,status
 1015e84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015e88:	e0fffd17 	ldw	r3,-12(fp)
 1015e8c:	00bfff84 	movi	r2,-2
 1015e90:	1884703a 	and	r2,r3,r2
 1015e94:	1001703a 	wrctl	status,r2
  
  return context;
 1015e98:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 1015e9c:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 1015ea0:	d0a72717 	ldw	r2,-25444(gp)
 1015ea4:	d0a73915 	stw	r2,-25372(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 1015ea8:	d0272715 	stw	zero,-25444(gp)
 1015eac:	e0bffe17 	ldw	r2,-8(fp)
 1015eb0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015eb4:	e0bffc17 	ldw	r2,-16(fp)
 1015eb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 1015ebc:	d1273917 	ldw	r4,-25372(gp)
 1015ec0:	d1672c17 	ldw	r5,-25424(gp)
 1015ec4:	1012b280 	call	1012b28 <__udivsi3>
 1015ec8:	1007883a 	mov	r3,r2
 1015ecc:	00801904 	movi	r2,100
 1015ed0:	10c5c83a 	sub	r2,r2,r3
 1015ed4:	d0a72e05 	stb	r2,-25416(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 1015ed8:	101e3dc0 	call	101e3dc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 1015edc:	1015eec0 	call	1015eec <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 1015ee0:	01001904 	movi	r4,100
 1015ee4:	101bea00 	call	101bea0 <OSTimeDly>
    }
 1015ee8:	003fe506 	br	1015e80 <OS_TaskStat+0x5c>

01015eec <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 1015eec:	defffa04 	addi	sp,sp,-24
 1015ef0:	dfc00515 	stw	ra,20(sp)
 1015ef4:	df000415 	stw	fp,16(sp)
 1015ef8:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 1015efc:	e03ffc05 	stb	zero,-16(fp)
 1015f00:	00002406 	br	1015f94 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 1015f04:	e13ffc03 	ldbu	r4,-16(fp)
 1015f08:	e17ffe04 	addi	r5,fp,-8
 1015f0c:	101b8b80 	call	101b8b8 <OSTaskStkChk>
 1015f10:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 1015f14:	e0bffc43 	ldbu	r2,-15(fp)
 1015f18:	1004c03a 	cmpne	r2,r2,zero
 1015f1c:	10001a1e 	bne	r2,zero,1015f88 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 1015f20:	e0bffc03 	ldbu	r2,-16(fp)
 1015f24:	00c040f4 	movhi	r3,259
 1015f28:	18ea5804 	addi	r3,r3,-22176
 1015f2c:	1085883a 	add	r2,r2,r2
 1015f30:	1085883a 	add	r2,r2,r2
 1015f34:	10c5883a 	add	r2,r2,r3
 1015f38:	10800017 	ldw	r2,0(r2)
 1015f3c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 1015f40:	e0bffd17 	ldw	r2,-12(fp)
 1015f44:	1005003a 	cmpeq	r2,r2,zero
 1015f48:	10000f1e 	bne	r2,zero,1015f88 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 1015f4c:	e0bffd17 	ldw	r2,-12(fp)
 1015f50:	10800060 	cmpeqi	r2,r2,1
 1015f54:	10000c1e 	bne	r2,zero,1015f88 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 1015f58:	e0bffd17 	ldw	r2,-12(fp)
 1015f5c:	10c00217 	ldw	r3,8(r2)
 1015f60:	e0bffd17 	ldw	r2,-12(fp)
 1015f64:	10800317 	ldw	r2,12(r2)
 1015f68:	1085883a 	add	r2,r2,r2
 1015f6c:	1085883a 	add	r2,r2,r2
 1015f70:	1887883a 	add	r3,r3,r2
 1015f74:	e0bffd17 	ldw	r2,-12(fp)
 1015f78:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 1015f7c:	e0ffff17 	ldw	r3,-4(fp)
 1015f80:	e0bffd17 	ldw	r2,-12(fp)
 1015f84:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 1015f88:	e0bffc03 	ldbu	r2,-16(fp)
 1015f8c:	10800044 	addi	r2,r2,1
 1015f90:	e0bffc05 	stb	r2,-16(fp)
 1015f94:	e0bffc03 	ldbu	r2,-16(fp)
 1015f98:	10800570 	cmpltui	r2,r2,21
 1015f9c:	103fd91e 	bne	r2,zero,1015f04 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 1015fa0:	e037883a 	mov	sp,fp
 1015fa4:	dfc00117 	ldw	ra,4(sp)
 1015fa8:	df000017 	ldw	fp,0(sp)
 1015fac:	dec00204 	addi	sp,sp,8
 1015fb0:	f800283a 	ret

01015fb4 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 1015fb4:	defff104 	addi	sp,sp,-60
 1015fb8:	dfc00e15 	stw	ra,56(sp)
 1015fbc:	df000d15 	stw	fp,52(sp)
 1015fc0:	df000d04 	addi	fp,sp,52
 1015fc4:	e17ffb15 	stw	r5,-20(fp)
 1015fc8:	e1bffc15 	stw	r6,-16(fp)
 1015fcc:	e0800417 	ldw	r2,16(fp)
 1015fd0:	e13ffa05 	stb	r4,-24(fp)
 1015fd4:	e1fffd0d 	sth	r7,-12(fp)
 1015fd8:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1015fdc:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015fe0:	0005303a 	rdctl	r2,status
 1015fe4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015fe8:	e0fff717 	ldw	r3,-36(fp)
 1015fec:	00bfff84 	movi	r2,-2
 1015ff0:	1884703a 	and	r2,r3,r2
 1015ff4:	1001703a 	wrctl	status,r2
  
  return context;
 1015ff8:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 1015ffc:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 1016000:	d0a72d17 	ldw	r2,-25420(gp)
 1016004:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 1016008:	e0bff917 	ldw	r2,-28(fp)
 101600c:	1005003a 	cmpeq	r2,r2,zero
 1016010:	1000941e 	bne	r2,zero,1016264 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 1016014:	e0bff917 	ldw	r2,-28(fp)
 1016018:	10800517 	ldw	r2,20(r2)
 101601c:	d0a72d15 	stw	r2,-25420(gp)
 1016020:	e0bff817 	ldw	r2,-32(fp)
 1016024:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016028:	e0bff617 	ldw	r2,-40(fp)
 101602c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 1016030:	e0fff917 	ldw	r3,-28(fp)
 1016034:	e0bffb17 	ldw	r2,-20(fp)
 1016038:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 101603c:	e0fff917 	ldw	r3,-28(fp)
 1016040:	e0bffa03 	ldbu	r2,-24(fp)
 1016044:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 1016048:	e0bff917 	ldw	r2,-28(fp)
 101604c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 1016050:	e0bff917 	ldw	r2,-28(fp)
 1016054:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 1016058:	e0bff917 	ldw	r2,-28(fp)
 101605c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 1016060:	e0fff917 	ldw	r3,-28(fp)
 1016064:	e0800317 	ldw	r2,12(fp)
 1016068:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 101606c:	e0fff917 	ldw	r3,-28(fp)
 1016070:	e0800217 	ldw	r2,8(fp)
 1016074:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 1016078:	e0fff917 	ldw	r3,-28(fp)
 101607c:	e0bffc17 	ldw	r2,-16(fp)
 1016080:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 1016084:	e0fff917 	ldw	r3,-28(fp)
 1016088:	e0bffe0b 	ldhu	r2,-8(fp)
 101608c:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 1016090:	e0fff917 	ldw	r3,-28(fp)
 1016094:	e0bffd0b 	ldhu	r2,-12(fp)
 1016098:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 101609c:	e0bff917 	ldw	r2,-28(fp)
 10160a0:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 10160a4:	e0bffa03 	ldbu	r2,-24(fp)
 10160a8:	1004d0fa 	srli	r2,r2,3
 10160ac:	1007883a 	mov	r3,r2
 10160b0:	e0bff917 	ldw	r2,-28(fp)
 10160b4:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 10160b8:	e0bffa03 	ldbu	r2,-24(fp)
 10160bc:	108001cc 	andi	r2,r2,7
 10160c0:	1007883a 	mov	r3,r2
 10160c4:	e0bff917 	ldw	r2,-28(fp)
 10160c8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 10160cc:	e0bff917 	ldw	r2,-28(fp)
 10160d0:	10800d03 	ldbu	r2,52(r2)
 10160d4:	10c03fcc 	andi	r3,r2,255
 10160d8:	00800044 	movi	r2,1
 10160dc:	10c4983a 	sll	r2,r2,r3
 10160e0:	1007883a 	mov	r3,r2
 10160e4:	e0bff917 	ldw	r2,-28(fp)
 10160e8:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 10160ec:	e0bff917 	ldw	r2,-28(fp)
 10160f0:	10800cc3 	ldbu	r2,51(r2)
 10160f4:	10c03fcc 	andi	r3,r2,255
 10160f8:	00800044 	movi	r2,1
 10160fc:	10c4983a 	sll	r2,r2,r3
 1016100:	1007883a 	mov	r3,r2
 1016104:	e0bff917 	ldw	r2,-28(fp)
 1016108:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 101610c:	e0bff917 	ldw	r2,-28(fp)
 1016110:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 1016114:	e0bff917 	ldw	r2,-28(fp)
 1016118:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 101611c:	e0bff917 	ldw	r2,-28(fp)
 1016120:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 1016124:	e0bff917 	ldw	r2,-28(fp)
 1016128:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 101612c:	e0bff917 	ldw	r2,-28(fp)
 1016130:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 1016134:	e0bff917 	ldw	r2,-28(fp)
 1016138:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 101613c:	e0bff917 	ldw	r2,-28(fp)
 1016140:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 1016144:	e0bff917 	ldw	r2,-28(fp)
 1016148:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 101614c:	e0bff917 	ldw	r2,-28(fp)
 1016150:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 1016154:	e0fff917 	ldw	r3,-28(fp)
 1016158:	00800fc4 	movi	r2,63
 101615c:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 1016160:	e0bff917 	ldw	r2,-28(fp)
 1016164:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 1016168:	e13ff917 	ldw	r4,-28(fp)
 101616c:	101e4680 	call	101e468 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 1016170:	e13ff917 	ldw	r4,-28(fp)
 1016174:	101e3800 	call	101e380 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1016178:	0005303a 	rdctl	r2,status
 101617c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016180:	e0fff517 	ldw	r3,-44(fp)
 1016184:	00bfff84 	movi	r2,-2
 1016188:	1884703a 	and	r2,r3,r2
 101618c:	1001703a 	wrctl	status,r2
  
  return context;
 1016190:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 1016194:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 1016198:	e0bffa03 	ldbu	r2,-24(fp)
 101619c:	00c040f4 	movhi	r3,259
 10161a0:	18ea5804 	addi	r3,r3,-22176
 10161a4:	1085883a 	add	r2,r2,r2
 10161a8:	1085883a 	add	r2,r2,r2
 10161ac:	10c7883a 	add	r3,r2,r3
 10161b0:	e0bff917 	ldw	r2,-28(fp)
 10161b4:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 10161b8:	d0e72917 	ldw	r3,-25436(gp)
 10161bc:	e0bff917 	ldw	r2,-28(fp)
 10161c0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 10161c4:	e0bff917 	ldw	r2,-28(fp)
 10161c8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 10161cc:	d0a72917 	ldw	r2,-25436(gp)
 10161d0:	1005003a 	cmpeq	r2,r2,zero
 10161d4:	1000031e 	bne	r2,zero,10161e4 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 10161d8:	d0e72917 	ldw	r3,-25436(gp)
 10161dc:	e0bff917 	ldw	r2,-28(fp)
 10161e0:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 10161e4:	e0bff917 	ldw	r2,-28(fp)
 10161e8:	d0a72915 	stw	r2,-25436(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 10161ec:	e0bff917 	ldw	r2,-28(fp)
 10161f0:	10c00d83 	ldbu	r3,54(r2)
 10161f4:	d0a73203 	ldbu	r2,-25400(gp)
 10161f8:	1884b03a 	or	r2,r3,r2
 10161fc:	d0a73205 	stb	r2,-25400(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1016200:	e0bff917 	ldw	r2,-28(fp)
 1016204:	10800d03 	ldbu	r2,52(r2)
 1016208:	11003fcc 	andi	r4,r2,255
 101620c:	e0bff917 	ldw	r2,-28(fp)
 1016210:	10800d03 	ldbu	r2,52(r2)
 1016214:	10c03fcc 	andi	r3,r2,255
 1016218:	d0a73244 	addi	r2,gp,-25399
 101621c:	1885883a 	add	r2,r3,r2
 1016220:	10c00003 	ldbu	r3,0(r2)
 1016224:	e0bff917 	ldw	r2,-28(fp)
 1016228:	10800d43 	ldbu	r2,53(r2)
 101622c:	1884b03a 	or	r2,r3,r2
 1016230:	1007883a 	mov	r3,r2
 1016234:	d0a73244 	addi	r2,gp,-25399
 1016238:	2085883a 	add	r2,r4,r2
 101623c:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 1016240:	d0a72e43 	ldbu	r2,-25415(gp)
 1016244:	10800044 	addi	r2,r2,1
 1016248:	d0a72e45 	stb	r2,-25415(gp)
 101624c:	e0bff817 	ldw	r2,-32(fp)
 1016250:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016254:	e0bff417 	ldw	r2,-48(fp)
 1016258:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 101625c:	e03fff15 	stw	zero,-4(fp)
 1016260:	00000606 	br	101627c <OS_TCBInit+0x2c8>
 1016264:	e0bff817 	ldw	r2,-32(fp)
 1016268:	e0bff315 	stw	r2,-52(fp)
 101626c:	e0bff317 	ldw	r2,-52(fp)
 1016270:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 1016274:	00801084 	movi	r2,66
 1016278:	e0bfff15 	stw	r2,-4(fp)
 101627c:	e0bfff17 	ldw	r2,-4(fp)
}
 1016280:	e037883a 	mov	sp,fp
 1016284:	dfc00117 	ldw	ra,4(sp)
 1016288:	df000017 	ldw	fp,0(sp)
 101628c:	dec00204 	addi	sp,sp,8
 1016290:	f800283a 	ret

01016294 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 1016294:	defffe04 	addi	sp,sp,-8
 1016298:	df000115 	stw	fp,4(sp)
 101629c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 10162a0:	d0a01d04 	addi	r2,gp,-32652
 10162a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 10162a8:	d0a01e04 	addi	r2,gp,-32648
 10162ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 10162b0:	d0a01f84 	addi	r2,gp,-32642
 10162b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 10162b8:	d0a02004 	addi	r2,gp,-32640
 10162bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 10162c0:	d0a01f04 	addi	r2,gp,-32644
 10162c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 10162c8:	d0a02084 	addi	r2,gp,-32638
 10162cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 10162d0:	d0a02104 	addi	r2,gp,-32636
 10162d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 10162d8:	d0a02184 	addi	r2,gp,-32634
 10162dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 10162e0:	d0a02204 	addi	r2,gp,-32632
 10162e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 10162e8:	d0a02284 	addi	r2,gp,-32630
 10162ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 10162f0:	d0a02304 	addi	r2,gp,-32628
 10162f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 10162f8:	d0a02384 	addi	r2,gp,-32626
 10162fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 1016300:	d0a02404 	addi	r2,gp,-32624
 1016304:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 1016308:	d0a02484 	addi	r2,gp,-32622
 101630c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 1016310:	d0a02504 	addi	r2,gp,-32620
 1016314:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 1016318:	d0a02584 	addi	r2,gp,-32618
 101631c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 1016320:	d0a02604 	addi	r2,gp,-32616
 1016324:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 1016328:	d0a02684 	addi	r2,gp,-32614
 101632c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 1016330:	d0a02704 	addi	r2,gp,-32612
 1016334:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 1016338:	d0a02784 	addi	r2,gp,-32610
 101633c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 1016340:	d0a02804 	addi	r2,gp,-32608
 1016344:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 1016348:	d0a02884 	addi	r2,gp,-32606
 101634c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 1016350:	d0a02904 	addi	r2,gp,-32604
 1016354:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 1016358:	d0a02984 	addi	r2,gp,-32602
 101635c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 1016360:	d0a02a04 	addi	r2,gp,-32600
 1016364:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 1016368:	d0a02a84 	addi	r2,gp,-32598
 101636c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 1016370:	d0a02b04 	addi	r2,gp,-32596
 1016374:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 1016378:	d0a02b84 	addi	r2,gp,-32594
 101637c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 1016380:	d0a02c04 	addi	r2,gp,-32592
 1016384:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 1016388:	d0a02c84 	addi	r2,gp,-32590
 101638c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 1016390:	d0a02d04 	addi	r2,gp,-32588
 1016394:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 1016398:	d0a02d84 	addi	r2,gp,-32586
 101639c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 10163a0:	d0a02e04 	addi	r2,gp,-32584
 10163a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 10163a8:	d0a02e84 	addi	r2,gp,-32582
 10163ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 10163b0:	d0a02f04 	addi	r2,gp,-32580
 10163b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 10163b8:	d0a02f84 	addi	r2,gp,-32578
 10163bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 10163c0:	d0a03004 	addi	r2,gp,-32576
 10163c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 10163c8:	d0a03084 	addi	r2,gp,-32574
 10163cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 10163d0:	d0a03104 	addi	r2,gp,-32572
 10163d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 10163d8:	d0a03184 	addi	r2,gp,-32570
 10163dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 10163e0:	d0a03204 	addi	r2,gp,-32568
 10163e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 10163e8:	d0a03284 	addi	r2,gp,-32566
 10163ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 10163f0:	d0a03304 	addi	r2,gp,-32564
 10163f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 10163f8:	d0a03384 	addi	r2,gp,-32562
 10163fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 1016400:	d0a03404 	addi	r2,gp,-32560
 1016404:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 1016408:	d0a03904 	addi	r2,gp,-32540
 101640c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 1016410:	e037883a 	mov	sp,fp
 1016414:	df000017 	ldw	fp,0(sp)
 1016418:	dec00104 	addi	sp,sp,4
 101641c:	f800283a 	ret

01016420 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 1016420:	defff104 	addi	sp,sp,-60
 1016424:	df000e15 	stw	fp,56(sp)
 1016428:	df000e04 	addi	fp,sp,56
 101642c:	e13ffa15 	stw	r4,-24(fp)
 1016430:	e1fffd15 	stw	r7,-12(fp)
 1016434:	e17ffb0d 	sth	r5,-20(fp)
 1016438:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 101643c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1016440:	e0bffd17 	ldw	r2,-12(fp)
 1016444:	1004c03a 	cmpne	r2,r2,zero
 1016448:	1000021e 	bne	r2,zero,1016454 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 101644c:	e03fff15 	stw	zero,-4(fp)
 1016450:	0000bb06 	br	1016740 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 1016454:	e0bffa17 	ldw	r2,-24(fp)
 1016458:	1004c03a 	cmpne	r2,r2,zero
 101645c:	1000051e 	bne	r2,zero,1016474 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1016460:	e0fffd17 	ldw	r3,-12(fp)
 1016464:	00801b84 	movi	r2,110
 1016468:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101646c:	e03fff15 	stw	zero,-4(fp)
 1016470:	0000b306 	br	1016740 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 1016474:	e0bffa17 	ldw	r2,-24(fp)
 1016478:	10800003 	ldbu	r2,0(r2)
 101647c:	10803fcc 	andi	r2,r2,255
 1016480:	10800160 	cmpeqi	r2,r2,5
 1016484:	1000051e 	bne	r2,zero,101649c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1016488:	e0fffd17 	ldw	r3,-12(fp)
 101648c:	00800044 	movi	r2,1
 1016490:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1016494:	e03fff15 	stw	zero,-4(fp)
 1016498:	0000a906 	br	1016740 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 101649c:	e0fffc03 	ldbu	r3,-16(fp)
 10164a0:	00bfe004 	movi	r2,-128
 10164a4:	1884703a 	and	r2,r3,r2
 10164a8:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 10164ac:	e0bff943 	ldbu	r2,-27(fp)
 10164b0:	1005003a 	cmpeq	r2,r2,zero
 10164b4:	1000061e 	bne	r2,zero,10164d0 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 10164b8:	e0bffc03 	ldbu	r2,-16(fp)
 10164bc:	10801fcc 	andi	r2,r2,127
 10164c0:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 10164c4:	00800044 	movi	r2,1
 10164c8:	e0bff905 	stb	r2,-28(fp)
 10164cc:	00000106 	br	10164d4 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 10164d0:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 10164d4:	e0bffd17 	ldw	r2,-12(fp)
 10164d8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10164dc:	0005303a 	rdctl	r2,status
 10164e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10164e4:	e0fff717 	ldw	r3,-36(fp)
 10164e8:	00bfff84 	movi	r2,-2
 10164ec:	1884703a 	and	r2,r3,r2
 10164f0:	1001703a 	wrctl	status,r2
  
  return context;
 10164f4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 10164f8:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 10164fc:	e0bffc03 	ldbu	r2,-16(fp)
 1016500:	e0bffe15 	stw	r2,-8(fp)
 1016504:	e0fffe17 	ldw	r3,-8(fp)
 1016508:	18800060 	cmpeqi	r2,r3,1
 101650c:	1000651e 	bne	r2,zero,10166a4 <OSFlagAccept+0x284>
 1016510:	e0fffe17 	ldw	r3,-8(fp)
 1016514:	18800088 	cmpgei	r2,r3,2
 1016518:	1000041e 	bne	r2,zero,101652c <OSFlagAccept+0x10c>
 101651c:	e0fffe17 	ldw	r3,-8(fp)
 1016520:	1805003a 	cmpeq	r2,r3,zero
 1016524:	1000421e 	bne	r2,zero,1016630 <OSFlagAccept+0x210>
 1016528:	00007b06 	br	1016718 <OSFlagAccept+0x2f8>
 101652c:	e0fffe17 	ldw	r3,-8(fp)
 1016530:	188000a0 	cmpeqi	r2,r3,2
 1016534:	1000041e 	bne	r2,zero,1016548 <OSFlagAccept+0x128>
 1016538:	e0fffe17 	ldw	r3,-8(fp)
 101653c:	188000e0 	cmpeqi	r2,r3,3
 1016540:	10001e1e 	bne	r2,zero,10165bc <OSFlagAccept+0x19c>
 1016544:	00007406 	br	1016718 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 1016548:	e0bffa17 	ldw	r2,-24(fp)
 101654c:	10c0020b 	ldhu	r3,8(r2)
 1016550:	e0bffb0b 	ldhu	r2,-20(fp)
 1016554:	1884703a 	and	r2,r3,r2
 1016558:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 101655c:	e0fff98b 	ldhu	r3,-26(fp)
 1016560:	e0bffb0b 	ldhu	r2,-20(fp)
 1016564:	18800d1e 	bne	r3,r2,101659c <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 1016568:	e0bff903 	ldbu	r2,-28(fp)
 101656c:	10800058 	cmpnei	r2,r2,1
 1016570:	10000d1e 	bne	r2,zero,10165a8 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 1016574:	e0bffa17 	ldw	r2,-24(fp)
 1016578:	1080020b 	ldhu	r2,8(r2)
 101657c:	1007883a 	mov	r3,r2
 1016580:	e0bff98b 	ldhu	r2,-26(fp)
 1016584:	0084303a 	nor	r2,zero,r2
 1016588:	1884703a 	and	r2,r3,r2
 101658c:	1007883a 	mov	r3,r2
 1016590:	e0bffa17 	ldw	r2,-24(fp)
 1016594:	10c0020d 	sth	r3,8(r2)
 1016598:	00000306 	br	10165a8 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 101659c:	e0fffd17 	ldw	r3,-12(fp)
 10165a0:	00801c04 	movi	r2,112
 10165a4:	18800005 	stb	r2,0(r3)
 10165a8:	e0bff817 	ldw	r2,-32(fp)
 10165ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10165b0:	e0bff617 	ldw	r2,-40(fp)
 10165b4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 10165b8:	00005f06 	br	1016738 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 10165bc:	e0bffa17 	ldw	r2,-24(fp)
 10165c0:	10c0020b 	ldhu	r3,8(r2)
 10165c4:	e0bffb0b 	ldhu	r2,-20(fp)
 10165c8:	1884703a 	and	r2,r3,r2
 10165cc:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 10165d0:	e0bff98b 	ldhu	r2,-26(fp)
 10165d4:	1005003a 	cmpeq	r2,r2,zero
 10165d8:	10000d1e 	bne	r2,zero,1016610 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 10165dc:	e0bff903 	ldbu	r2,-28(fp)
 10165e0:	10800058 	cmpnei	r2,r2,1
 10165e4:	10000d1e 	bne	r2,zero,101661c <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 10165e8:	e0bffa17 	ldw	r2,-24(fp)
 10165ec:	1080020b 	ldhu	r2,8(r2)
 10165f0:	1007883a 	mov	r3,r2
 10165f4:	e0bff98b 	ldhu	r2,-26(fp)
 10165f8:	0084303a 	nor	r2,zero,r2
 10165fc:	1884703a 	and	r2,r3,r2
 1016600:	1007883a 	mov	r3,r2
 1016604:	e0bffa17 	ldw	r2,-24(fp)
 1016608:	10c0020d 	sth	r3,8(r2)
 101660c:	00000306 	br	101661c <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 1016610:	e0fffd17 	ldw	r3,-12(fp)
 1016614:	00801c04 	movi	r2,112
 1016618:	18800005 	stb	r2,0(r3)
 101661c:	e0bff817 	ldw	r2,-32(fp)
 1016620:	e0bff515 	stw	r2,-44(fp)
 1016624:	e0bff517 	ldw	r2,-44(fp)
 1016628:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 101662c:	00004206 	br	1016738 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 1016630:	e0bffa17 	ldw	r2,-24(fp)
 1016634:	1080020b 	ldhu	r2,8(r2)
 1016638:	0084303a 	nor	r2,zero,r2
 101663c:	1007883a 	mov	r3,r2
 1016640:	e0bffb0b 	ldhu	r2,-20(fp)
 1016644:	1884703a 	and	r2,r3,r2
 1016648:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 101664c:	e0fff98b 	ldhu	r3,-26(fp)
 1016650:	e0bffb0b 	ldhu	r2,-20(fp)
 1016654:	18800b1e 	bne	r3,r2,1016684 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 1016658:	e0bff903 	ldbu	r2,-28(fp)
 101665c:	10800058 	cmpnei	r2,r2,1
 1016660:	10000b1e 	bne	r2,zero,1016690 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 1016664:	e0bffa17 	ldw	r2,-24(fp)
 1016668:	10c0020b 	ldhu	r3,8(r2)
 101666c:	e0bff98b 	ldhu	r2,-26(fp)
 1016670:	1884b03a 	or	r2,r3,r2
 1016674:	1007883a 	mov	r3,r2
 1016678:	e0bffa17 	ldw	r2,-24(fp)
 101667c:	10c0020d 	sth	r3,8(r2)
 1016680:	00000306 	br	1016690 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 1016684:	e0fffd17 	ldw	r3,-12(fp)
 1016688:	00801c04 	movi	r2,112
 101668c:	18800005 	stb	r2,0(r3)
 1016690:	e0bff817 	ldw	r2,-32(fp)
 1016694:	e0bff415 	stw	r2,-48(fp)
 1016698:	e0bff417 	ldw	r2,-48(fp)
 101669c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 10166a0:	00002506 	br	1016738 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 10166a4:	e0bffa17 	ldw	r2,-24(fp)
 10166a8:	1080020b 	ldhu	r2,8(r2)
 10166ac:	0084303a 	nor	r2,zero,r2
 10166b0:	1007883a 	mov	r3,r2
 10166b4:	e0bffb0b 	ldhu	r2,-20(fp)
 10166b8:	1884703a 	and	r2,r3,r2
 10166bc:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 10166c0:	e0bff98b 	ldhu	r2,-26(fp)
 10166c4:	1005003a 	cmpeq	r2,r2,zero
 10166c8:	10000b1e 	bne	r2,zero,10166f8 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 10166cc:	e0bff903 	ldbu	r2,-28(fp)
 10166d0:	10800058 	cmpnei	r2,r2,1
 10166d4:	10000b1e 	bne	r2,zero,1016704 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 10166d8:	e0bffa17 	ldw	r2,-24(fp)
 10166dc:	10c0020b 	ldhu	r3,8(r2)
 10166e0:	e0bff98b 	ldhu	r2,-26(fp)
 10166e4:	1884b03a 	or	r2,r3,r2
 10166e8:	1007883a 	mov	r3,r2
 10166ec:	e0bffa17 	ldw	r2,-24(fp)
 10166f0:	10c0020d 	sth	r3,8(r2)
 10166f4:	00000306 	br	1016704 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 10166f8:	e0fffd17 	ldw	r3,-12(fp)
 10166fc:	00801c04 	movi	r2,112
 1016700:	18800005 	stb	r2,0(r3)
 1016704:	e0bff817 	ldw	r2,-32(fp)
 1016708:	e0bff315 	stw	r2,-52(fp)
 101670c:	e0bff317 	ldw	r2,-52(fp)
 1016710:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 1016714:	00000806 	br	1016738 <OSFlagAccept+0x318>
 1016718:	e0bff817 	ldw	r2,-32(fp)
 101671c:	e0bff215 	stw	r2,-56(fp)
 1016720:	e0bff217 	ldw	r2,-56(fp)
 1016724:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 1016728:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 101672c:	e0fffd17 	ldw	r3,-12(fp)
 1016730:	00801bc4 	movi	r2,111
 1016734:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 1016738:	e0bff98b 	ldhu	r2,-26(fp)
 101673c:	e0bfff15 	stw	r2,-4(fp)
 1016740:	e0bfff17 	ldw	r2,-4(fp)
}
 1016744:	e037883a 	mov	sp,fp
 1016748:	df000017 	ldw	fp,0(sp)
 101674c:	dec00104 	addi	sp,sp,4
 1016750:	f800283a 	ret

01016754 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 1016754:	defff704 	addi	sp,sp,-36
 1016758:	df000815 	stw	fp,32(sp)
 101675c:	df000804 	addi	fp,sp,32
 1016760:	e17ffe15 	stw	r5,-8(fp)
 1016764:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 1016768:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 101676c:	e0bffe17 	ldw	r2,-8(fp)
 1016770:	1004c03a 	cmpne	r2,r2,zero
 1016774:	1000021e 	bne	r2,zero,1016780 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 1016778:	e03fff15 	stw	zero,-4(fp)
 101677c:	00003f06 	br	101687c <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 1016780:	008040b4 	movhi	r2,258
 1016784:	108bcd04 	addi	r2,r2,12084
 1016788:	10800003 	ldbu	r2,0(r2)
 101678c:	10803fcc 	andi	r2,r2,255
 1016790:	1005003a 	cmpeq	r2,r2,zero
 1016794:	1000051e 	bne	r2,zero,10167ac <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 1016798:	e0fffe17 	ldw	r3,-8(fp)
 101679c:	00800404 	movi	r2,16
 10167a0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 10167a4:	e03fff15 	stw	zero,-4(fp)
 10167a8:	00003406 	br	101687c <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10167ac:	0005303a 	rdctl	r2,status
 10167b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10167b4:	e0fffa17 	ldw	r3,-24(fp)
 10167b8:	00bfff84 	movi	r2,-2
 10167bc:	1884703a 	and	r2,r3,r2
 10167c0:	1001703a 	wrctl	status,r2
  
  return context;
 10167c4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 10167c8:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 10167cc:	008040b4 	movhi	r2,258
 10167d0:	108bd004 	addi	r2,r2,12096
 10167d4:	10800017 	ldw	r2,0(r2)
 10167d8:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 10167dc:	e0bffc17 	ldw	r2,-16(fp)
 10167e0:	1005003a 	cmpeq	r2,r2,zero
 10167e4:	10001c1e 	bne	r2,zero,1016858 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 10167e8:	008040b4 	movhi	r2,258
 10167ec:	108bd004 	addi	r2,r2,12096
 10167f0:	10800017 	ldw	r2,0(r2)
 10167f4:	10800117 	ldw	r2,4(r2)
 10167f8:	1007883a 	mov	r3,r2
 10167fc:	008040b4 	movhi	r2,258
 1016800:	108bd004 	addi	r2,r2,12096
 1016804:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 1016808:	e0fffc17 	ldw	r3,-16(fp)
 101680c:	00800144 	movi	r2,5
 1016810:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 1016814:	e0fffc17 	ldw	r3,-16(fp)
 1016818:	e0bffd0b 	ldhu	r2,-12(fp)
 101681c:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 1016820:	e0bffc17 	ldw	r2,-16(fp)
 1016824:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 1016828:	e0fffc17 	ldw	r3,-16(fp)
 101682c:	00800fc4 	movi	r2,63
 1016830:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 1016834:	e0bffc17 	ldw	r2,-16(fp)
 1016838:	100002c5 	stb	zero,11(r2)
 101683c:	e0bffb17 	ldw	r2,-20(fp)
 1016840:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016844:	e0bff917 	ldw	r2,-28(fp)
 1016848:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 101684c:	e0bffe17 	ldw	r2,-8(fp)
 1016850:	10000005 	stb	zero,0(r2)
 1016854:	00000706 	br	1016874 <OSFlagCreate+0x120>
 1016858:	e0bffb17 	ldw	r2,-20(fp)
 101685c:	e0bff815 	stw	r2,-32(fp)
 1016860:	e0bff817 	ldw	r2,-32(fp)
 1016864:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 1016868:	e0fffe17 	ldw	r3,-8(fp)
 101686c:	00801c84 	movi	r2,114
 1016870:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 1016874:	e0bffc17 	ldw	r2,-16(fp)
 1016878:	e0bfff15 	stw	r2,-4(fp)
 101687c:	e0bfff17 	ldw	r2,-4(fp)
}
 1016880:	e037883a 	mov	sp,fp
 1016884:	df000017 	ldw	fp,0(sp)
 1016888:	dec00104 	addi	sp,sp,4
 101688c:	f800283a 	ret

01016890 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 1016890:	defff004 	addi	sp,sp,-64
 1016894:	dfc00f15 	stw	ra,60(sp)
 1016898:	df000e15 	stw	fp,56(sp)
 101689c:	df000e04 	addi	fp,sp,56
 10168a0:	e13ffb15 	stw	r4,-20(fp)
 10168a4:	e1bffd15 	stw	r6,-12(fp)
 10168a8:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 10168ac:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 10168b0:	e0bffd17 	ldw	r2,-12(fp)
 10168b4:	1004c03a 	cmpne	r2,r2,zero
 10168b8:	1000031e 	bne	r2,zero,10168c8 <OSFlagDel+0x38>
        return (pgrp);
 10168bc:	e0bffb17 	ldw	r2,-20(fp)
 10168c0:	e0bfff15 	stw	r2,-4(fp)
 10168c4:	00009606 	br	1016b20 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 10168c8:	e0bffb17 	ldw	r2,-20(fp)
 10168cc:	1004c03a 	cmpne	r2,r2,zero
 10168d0:	1000061e 	bne	r2,zero,10168ec <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 10168d4:	e0fffd17 	ldw	r3,-12(fp)
 10168d8:	00801b84 	movi	r2,110
 10168dc:	18800005 	stb	r2,0(r3)
        return (pgrp);
 10168e0:	e0fffb17 	ldw	r3,-20(fp)
 10168e4:	e0ffff15 	stw	r3,-4(fp)
 10168e8:	00008d06 	br	1016b20 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 10168ec:	008040b4 	movhi	r2,258
 10168f0:	108bcd04 	addi	r2,r2,12084
 10168f4:	10800003 	ldbu	r2,0(r2)
 10168f8:	10803fcc 	andi	r2,r2,255
 10168fc:	1005003a 	cmpeq	r2,r2,zero
 1016900:	1000061e 	bne	r2,zero,101691c <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 1016904:	e0fffd17 	ldw	r3,-12(fp)
 1016908:	008003c4 	movi	r2,15
 101690c:	18800005 	stb	r2,0(r3)
        return (pgrp);
 1016910:	e0bffb17 	ldw	r2,-20(fp)
 1016914:	e0bfff15 	stw	r2,-4(fp)
 1016918:	00008106 	br	1016b20 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 101691c:	e0bffb17 	ldw	r2,-20(fp)
 1016920:	10800003 	ldbu	r2,0(r2)
 1016924:	10803fcc 	andi	r2,r2,255
 1016928:	10800160 	cmpeqi	r2,r2,5
 101692c:	1000061e 	bne	r2,zero,1016948 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 1016930:	e0fffd17 	ldw	r3,-12(fp)
 1016934:	00800044 	movi	r2,1
 1016938:	18800005 	stb	r2,0(r3)
        return (pgrp);
 101693c:	e0fffb17 	ldw	r3,-20(fp)
 1016940:	e0ffff15 	stw	r3,-4(fp)
 1016944:	00007606 	br	1016b20 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1016948:	0005303a 	rdctl	r2,status
 101694c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016950:	e0fff617 	ldw	r3,-40(fp)
 1016954:	00bfff84 	movi	r2,-2
 1016958:	1884703a 	and	r2,r3,r2
 101695c:	1001703a 	wrctl	status,r2
  
  return context;
 1016960:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 1016964:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 1016968:	e0bffb17 	ldw	r2,-20(fp)
 101696c:	10800117 	ldw	r2,4(r2)
 1016970:	1005003a 	cmpeq	r2,r2,zero
 1016974:	1000031e 	bne	r2,zero,1016984 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 1016978:	00800044 	movi	r2,1
 101697c:	e0bffa05 	stb	r2,-24(fp)
 1016980:	00000106 	br	1016988 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 1016984:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 1016988:	e0bffc03 	ldbu	r2,-16(fp)
 101698c:	e0bffe15 	stw	r2,-8(fp)
 1016990:	e0fffe17 	ldw	r3,-8(fp)
 1016994:	1805003a 	cmpeq	r2,r3,zero
 1016998:	1000041e 	bne	r2,zero,10169ac <OSFlagDel+0x11c>
 101699c:	e0fffe17 	ldw	r3,-8(fp)
 10169a0:	18800060 	cmpeqi	r2,r3,1
 10169a4:	1000281e 	bne	r2,zero,1016a48 <OSFlagDel+0x1b8>
 10169a8:	00005206 	br	1016af4 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 10169ac:	e0bffa03 	ldbu	r2,-24(fp)
 10169b0:	1004c03a 	cmpne	r2,r2,zero
 10169b4:	10001a1e 	bne	r2,zero,1016a20 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 10169b8:	e0fffb17 	ldw	r3,-20(fp)
 10169bc:	00800fc4 	movi	r2,63
 10169c0:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 10169c4:	e0bffb17 	ldw	r2,-20(fp)
 10169c8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 10169cc:	e0bffb17 	ldw	r2,-20(fp)
 10169d0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 10169d4:	008040b4 	movhi	r2,258
 10169d8:	108bd004 	addi	r2,r2,12096
 10169dc:	10c00017 	ldw	r3,0(r2)
 10169e0:	e0bffb17 	ldw	r2,-20(fp)
 10169e4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 10169e8:	e0bffb17 	ldw	r2,-20(fp)
 10169ec:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 10169f0:	00c040b4 	movhi	r3,258
 10169f4:	18cbd004 	addi	r3,r3,12096
 10169f8:	e0bffb17 	ldw	r2,-20(fp)
 10169fc:	18800015 	stw	r2,0(r3)
 1016a00:	e0bff717 	ldw	r2,-36(fp)
 1016a04:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016a08:	e0bff517 	ldw	r2,-44(fp)
 1016a0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 1016a10:	e0bffd17 	ldw	r2,-12(fp)
 1016a14:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 1016a18:	e03ff815 	stw	zero,-32(fp)
 1016a1c:	00003e06 	br	1016b18 <OSFlagDel+0x288>
 1016a20:	e0bff717 	ldw	r2,-36(fp)
 1016a24:	e0bff415 	stw	r2,-48(fp)
 1016a28:	e0bff417 	ldw	r2,-48(fp)
 1016a2c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 1016a30:	e0fffd17 	ldw	r3,-12(fp)
 1016a34:	00801244 	movi	r2,73
 1016a38:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 1016a3c:	e0bffb17 	ldw	r2,-20(fp)
 1016a40:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 1016a44:	00003406 	br	1016b18 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 1016a48:	e0bffb17 	ldw	r2,-20(fp)
 1016a4c:	10800117 	ldw	r2,4(r2)
 1016a50:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 1016a54:	00000606 	br	1016a70 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 1016a58:	e13ff917 	ldw	r4,-28(fp)
 1016a5c:	000b883a 	mov	r5,zero
 1016a60:	1017ba00 	call	1017ba0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 1016a64:	e0bff917 	ldw	r2,-28(fp)
 1016a68:	10800017 	ldw	r2,0(r2)
 1016a6c:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 1016a70:	e0bff917 	ldw	r2,-28(fp)
 1016a74:	1004c03a 	cmpne	r2,r2,zero
 1016a78:	103ff71e 	bne	r2,zero,1016a58 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 1016a7c:	e0fffb17 	ldw	r3,-20(fp)
 1016a80:	00800fc4 	movi	r2,63
 1016a84:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 1016a88:	e0bffb17 	ldw	r2,-20(fp)
 1016a8c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 1016a90:	e0bffb17 	ldw	r2,-20(fp)
 1016a94:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 1016a98:	008040b4 	movhi	r2,258
 1016a9c:	108bd004 	addi	r2,r2,12096
 1016aa0:	10c00017 	ldw	r3,0(r2)
 1016aa4:	e0bffb17 	ldw	r2,-20(fp)
 1016aa8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 1016aac:	e0bffb17 	ldw	r2,-20(fp)
 1016ab0:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 1016ab4:	00c040b4 	movhi	r3,258
 1016ab8:	18cbd004 	addi	r3,r3,12096
 1016abc:	e0bffb17 	ldw	r2,-20(fp)
 1016ac0:	18800015 	stw	r2,0(r3)
 1016ac4:	e0bff717 	ldw	r2,-36(fp)
 1016ac8:	e0bff315 	stw	r2,-52(fp)
 1016acc:	e0bff317 	ldw	r2,-52(fp)
 1016ad0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1016ad4:	e0bffa03 	ldbu	r2,-24(fp)
 1016ad8:	10800058 	cmpnei	r2,r2,1
 1016adc:	1000011e 	bne	r2,zero,1016ae4 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 1016ae0:	1015bac0 	call	1015bac <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 1016ae4:	e0bffd17 	ldw	r2,-12(fp)
 1016ae8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 1016aec:	e03ff815 	stw	zero,-32(fp)
             break;
 1016af0:	00000906 	br	1016b18 <OSFlagDel+0x288>
 1016af4:	e0bff717 	ldw	r2,-36(fp)
 1016af8:	e0bff215 	stw	r2,-56(fp)
 1016afc:	e0bff217 	ldw	r2,-56(fp)
 1016b00:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 1016b04:	e0fffd17 	ldw	r3,-12(fp)
 1016b08:	008001c4 	movi	r2,7
 1016b0c:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 1016b10:	e0bffb17 	ldw	r2,-20(fp)
 1016b14:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 1016b18:	e0bff817 	ldw	r2,-32(fp)
 1016b1c:	e0bfff15 	stw	r2,-4(fp)
 1016b20:	e0bfff17 	ldw	r2,-4(fp)
}
 1016b24:	e037883a 	mov	sp,fp
 1016b28:	dfc00117 	ldw	ra,4(sp)
 1016b2c:	df000017 	ldw	fp,0(sp)
 1016b30:	dec00204 	addi	sp,sp,8
 1016b34:	f800283a 	ret

01016b38 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 1016b38:	defff504 	addi	sp,sp,-44
 1016b3c:	dfc00a15 	stw	ra,40(sp)
 1016b40:	df000915 	stw	fp,36(sp)
 1016b44:	df000904 	addi	fp,sp,36
 1016b48:	e13ffc15 	stw	r4,-16(fp)
 1016b4c:	e17ffd15 	stw	r5,-12(fp)
 1016b50:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1016b54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1016b58:	e0bffe17 	ldw	r2,-8(fp)
 1016b5c:	1004c03a 	cmpne	r2,r2,zero
 1016b60:	1000021e 	bne	r2,zero,1016b6c <OSFlagNameGet+0x34>
        return (0);
 1016b64:	e03fff15 	stw	zero,-4(fp)
 1016b68:	00003e06 	br	1016c64 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 1016b6c:	e0bffc17 	ldw	r2,-16(fp)
 1016b70:	1004c03a 	cmpne	r2,r2,zero
 1016b74:	1000051e 	bne	r2,zero,1016b8c <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1016b78:	e0fffe17 	ldw	r3,-8(fp)
 1016b7c:	00801b84 	movi	r2,110
 1016b80:	18800005 	stb	r2,0(r3)
        return (0);
 1016b84:	e03fff15 	stw	zero,-4(fp)
 1016b88:	00003606 	br	1016c64 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1016b8c:	e0bffd17 	ldw	r2,-12(fp)
 1016b90:	1004c03a 	cmpne	r2,r2,zero
 1016b94:	1000051e 	bne	r2,zero,1016bac <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 1016b98:	e0fffe17 	ldw	r3,-8(fp)
 1016b9c:	00800304 	movi	r2,12
 1016ba0:	18800005 	stb	r2,0(r3)
        return (0);
 1016ba4:	e03fff15 	stw	zero,-4(fp)
 1016ba8:	00002e06 	br	1016c64 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1016bac:	008040b4 	movhi	r2,258
 1016bb0:	108bcd04 	addi	r2,r2,12084
 1016bb4:	10800003 	ldbu	r2,0(r2)
 1016bb8:	10803fcc 	andi	r2,r2,255
 1016bbc:	1005003a 	cmpeq	r2,r2,zero
 1016bc0:	1000051e 	bne	r2,zero,1016bd8 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 1016bc4:	e0fffe17 	ldw	r3,-8(fp)
 1016bc8:	00800444 	movi	r2,17
 1016bcc:	18800005 	stb	r2,0(r3)
        return (0);
 1016bd0:	e03fff15 	stw	zero,-4(fp)
 1016bd4:	00002306 	br	1016c64 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1016bd8:	0005303a 	rdctl	r2,status
 1016bdc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016be0:	e0fff917 	ldw	r3,-28(fp)
 1016be4:	00bfff84 	movi	r2,-2
 1016be8:	1884703a 	and	r2,r3,r2
 1016bec:	1001703a 	wrctl	status,r2
  
  return context;
 1016bf0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1016bf4:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 1016bf8:	e0bffc17 	ldw	r2,-16(fp)
 1016bfc:	10800003 	ldbu	r2,0(r2)
 1016c00:	10803fcc 	andi	r2,r2,255
 1016c04:	10800160 	cmpeqi	r2,r2,5
 1016c08:	1000091e 	bne	r2,zero,1016c30 <OSFlagNameGet+0xf8>
 1016c0c:	e0bffa17 	ldw	r2,-24(fp)
 1016c10:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016c14:	e0bff817 	ldw	r2,-32(fp)
 1016c18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 1016c1c:	e0fffe17 	ldw	r3,-8(fp)
 1016c20:	00800044 	movi	r2,1
 1016c24:	18800005 	stb	r2,0(r3)
        return (0);
 1016c28:	e03fff15 	stw	zero,-4(fp)
 1016c2c:	00000d06 	br	1016c64 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 1016c30:	e0bffc17 	ldw	r2,-16(fp)
 1016c34:	11400284 	addi	r5,r2,10
 1016c38:	e13ffd17 	ldw	r4,-12(fp)
 1016c3c:	1015cf00 	call	1015cf0 <OS_StrCopy>
 1016c40:	e0bffb05 	stb	r2,-20(fp)
 1016c44:	e0bffa17 	ldw	r2,-24(fp)
 1016c48:	e0bff715 	stw	r2,-36(fp)
 1016c4c:	e0bff717 	ldw	r2,-36(fp)
 1016c50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1016c54:	e0bffe17 	ldw	r2,-8(fp)
 1016c58:	10000005 	stb	zero,0(r2)
    return (len);
 1016c5c:	e0bffb03 	ldbu	r2,-20(fp)
 1016c60:	e0bfff15 	stw	r2,-4(fp)
 1016c64:	e0bfff17 	ldw	r2,-4(fp)
}
 1016c68:	e037883a 	mov	sp,fp
 1016c6c:	dfc00117 	ldw	ra,4(sp)
 1016c70:	df000017 	ldw	fp,0(sp)
 1016c74:	dec00204 	addi	sp,sp,8
 1016c78:	f800283a 	ret

01016c7c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 1016c7c:	defff504 	addi	sp,sp,-44
 1016c80:	dfc00a15 	stw	ra,40(sp)
 1016c84:	df000915 	stw	fp,36(sp)
 1016c88:	df000904 	addi	fp,sp,36
 1016c8c:	e13ffd15 	stw	r4,-12(fp)
 1016c90:	e17ffe15 	stw	r5,-8(fp)
 1016c94:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1016c98:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1016c9c:	e0bfff17 	ldw	r2,-4(fp)
 1016ca0:	1005003a 	cmpeq	r2,r2,zero
 1016ca4:	1000451e 	bne	r2,zero,1016dbc <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 1016ca8:	e0bffd17 	ldw	r2,-12(fp)
 1016cac:	1004c03a 	cmpne	r2,r2,zero
 1016cb0:	1000041e 	bne	r2,zero,1016cc4 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1016cb4:	e0ffff17 	ldw	r3,-4(fp)
 1016cb8:	00801b84 	movi	r2,110
 1016cbc:	18800005 	stb	r2,0(r3)
        return;
 1016cc0:	00003e06 	br	1016dbc <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1016cc4:	e0bffe17 	ldw	r2,-8(fp)
 1016cc8:	1004c03a 	cmpne	r2,r2,zero
 1016ccc:	1000041e 	bne	r2,zero,1016ce0 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 1016cd0:	e0ffff17 	ldw	r3,-4(fp)
 1016cd4:	00800304 	movi	r2,12
 1016cd8:	18800005 	stb	r2,0(r3)
        return;
 1016cdc:	00003706 	br	1016dbc <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1016ce0:	008040b4 	movhi	r2,258
 1016ce4:	108bcd04 	addi	r2,r2,12084
 1016ce8:	10800003 	ldbu	r2,0(r2)
 1016cec:	10803fcc 	andi	r2,r2,255
 1016cf0:	1005003a 	cmpeq	r2,r2,zero
 1016cf4:	1000041e 	bne	r2,zero,1016d08 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 1016cf8:	e0ffff17 	ldw	r3,-4(fp)
 1016cfc:	00800484 	movi	r2,18
 1016d00:	18800005 	stb	r2,0(r3)
        return;
 1016d04:	00002d06 	br	1016dbc <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1016d08:	0005303a 	rdctl	r2,status
 1016d0c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016d10:	e0fffa17 	ldw	r3,-24(fp)
 1016d14:	00bfff84 	movi	r2,-2
 1016d18:	1884703a 	and	r2,r3,r2
 1016d1c:	1001703a 	wrctl	status,r2
  
  return context;
 1016d20:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1016d24:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 1016d28:	e0bffd17 	ldw	r2,-12(fp)
 1016d2c:	10800003 	ldbu	r2,0(r2)
 1016d30:	10803fcc 	andi	r2,r2,255
 1016d34:	10800160 	cmpeqi	r2,r2,5
 1016d38:	1000081e 	bne	r2,zero,1016d5c <OSFlagNameSet+0xe0>
 1016d3c:	e0bffb17 	ldw	r2,-20(fp)
 1016d40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016d44:	e0bff917 	ldw	r2,-28(fp)
 1016d48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 1016d4c:	e0ffff17 	ldw	r3,-4(fp)
 1016d50:	00800044 	movi	r2,1
 1016d54:	18800005 	stb	r2,0(r3)
        return;
 1016d58:	00001806 	br	1016dbc <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 1016d5c:	e13ffe17 	ldw	r4,-8(fp)
 1016d60:	1015d700 	call	1015d70 <OS_StrLen>
 1016d64:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 1016d68:	e0bffc03 	ldbu	r2,-16(fp)
 1016d6c:	10800830 	cmpltui	r2,r2,32
 1016d70:	1000081e 	bne	r2,zero,1016d94 <OSFlagNameSet+0x118>
 1016d74:	e0bffb17 	ldw	r2,-20(fp)
 1016d78:	e0bff815 	stw	r2,-32(fp)
 1016d7c:	e0bff817 	ldw	r2,-32(fp)
 1016d80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 1016d84:	e0ffff17 	ldw	r3,-4(fp)
 1016d88:	00801cc4 	movi	r2,115
 1016d8c:	18800005 	stb	r2,0(r3)
        return;
 1016d90:	00000a06 	br	1016dbc <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 1016d94:	e0bffd17 	ldw	r2,-12(fp)
 1016d98:	11000284 	addi	r4,r2,10
 1016d9c:	e17ffe17 	ldw	r5,-8(fp)
 1016da0:	1015cf00 	call	1015cf0 <OS_StrCopy>
 1016da4:	e0bffb17 	ldw	r2,-20(fp)
 1016da8:	e0bff715 	stw	r2,-36(fp)
 1016dac:	e0bff717 	ldw	r2,-36(fp)
 1016db0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1016db4:	e0bfff17 	ldw	r2,-4(fp)
 1016db8:	10000005 	stb	zero,0(r2)
    return;
}
 1016dbc:	e037883a 	mov	sp,fp
 1016dc0:	dfc00117 	ldw	ra,4(sp)
 1016dc4:	df000017 	ldw	fp,0(sp)
 1016dc8:	dec00204 	addi	sp,sp,8
 1016dcc:	f800283a 	ret

01016dd0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 1016dd0:	deffe004 	addi	sp,sp,-128
 1016dd4:	dfc01f15 	stw	ra,124(sp)
 1016dd8:	df001e15 	stw	fp,120(sp)
 1016ddc:	df001e04 	addi	fp,sp,120
 1016de0:	e13ff915 	stw	r4,-28(fp)
 1016de4:	e17ffa0d 	sth	r5,-24(fp)
 1016de8:	e1bffb05 	stb	r6,-20(fp)
 1016dec:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 1016df0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1016df4:	e0800217 	ldw	r2,8(fp)
 1016df8:	1004c03a 	cmpne	r2,r2,zero
 1016dfc:	1000021e 	bne	r2,zero,1016e08 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 1016e00:	e03fff15 	stw	zero,-4(fp)
 1016e04:	00017d06 	br	10173fc <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 1016e08:	e0bff917 	ldw	r2,-28(fp)
 1016e0c:	1004c03a 	cmpne	r2,r2,zero
 1016e10:	1000051e 	bne	r2,zero,1016e28 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 1016e14:	e0c00217 	ldw	r3,8(fp)
 1016e18:	00801b84 	movi	r2,110
 1016e1c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1016e20:	e03fff15 	stw	zero,-4(fp)
 1016e24:	00017506 	br	10173fc <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1016e28:	008040b4 	movhi	r2,258
 1016e2c:	108bcd04 	addi	r2,r2,12084
 1016e30:	10800003 	ldbu	r2,0(r2)
 1016e34:	10803fcc 	andi	r2,r2,255
 1016e38:	1005003a 	cmpeq	r2,r2,zero
 1016e3c:	1000051e 	bne	r2,zero,1016e54 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 1016e40:	e0c00217 	ldw	r3,8(fp)
 1016e44:	00800084 	movi	r2,2
 1016e48:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1016e4c:	e03fff15 	stw	zero,-4(fp)
 1016e50:	00016a06 	br	10173fc <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 1016e54:	008040b4 	movhi	r2,258
 1016e58:	108bbf04 	addi	r2,r2,12028
 1016e5c:	10800003 	ldbu	r2,0(r2)
 1016e60:	10803fcc 	andi	r2,r2,255
 1016e64:	1005003a 	cmpeq	r2,r2,zero
 1016e68:	1000051e 	bne	r2,zero,1016e80 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 1016e6c:	e0c00217 	ldw	r3,8(fp)
 1016e70:	00800344 	movi	r2,13
 1016e74:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1016e78:	e03fff15 	stw	zero,-4(fp)
 1016e7c:	00015f06 	br	10173fc <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 1016e80:	e0bff917 	ldw	r2,-28(fp)
 1016e84:	10800003 	ldbu	r2,0(r2)
 1016e88:	10803fcc 	andi	r2,r2,255
 1016e8c:	10800160 	cmpeqi	r2,r2,5
 1016e90:	1000051e 	bne	r2,zero,1016ea8 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 1016e94:	e0c00217 	ldw	r3,8(fp)
 1016e98:	00800044 	movi	r2,1
 1016e9c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1016ea0:	e03fff15 	stw	zero,-4(fp)
 1016ea4:	00015506 	br	10173fc <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 1016ea8:	e0fffb03 	ldbu	r3,-20(fp)
 1016eac:	00bfe004 	movi	r2,-128
 1016eb0:	1884703a 	and	r2,r3,r2
 1016eb4:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 1016eb8:	e0bff283 	ldbu	r2,-54(fp)
 1016ebc:	1005003a 	cmpeq	r2,r2,zero
 1016ec0:	1000071e 	bne	r2,zero,1016ee0 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 1016ec4:	00c01fc4 	movi	r3,127
 1016ec8:	e0bffb03 	ldbu	r2,-20(fp)
 1016ecc:	10c4703a 	and	r2,r2,r3
 1016ed0:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 1016ed4:	00800044 	movi	r2,1
 1016ed8:	e0bff205 	stb	r2,-56(fp)
 1016edc:	00000106 	br	1016ee4 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 1016ee0:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1016ee4:	0005303a 	rdctl	r2,status
 1016ee8:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016eec:	e0fff017 	ldw	r3,-64(fp)
 1016ef0:	00bfff84 	movi	r2,-2
 1016ef4:	1884703a 	and	r2,r3,r2
 1016ef8:	1001703a 	wrctl	status,r2
  
  return context;
 1016efc:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 1016f00:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 1016f04:	e0bffb03 	ldbu	r2,-20(fp)
 1016f08:	e0bffe15 	stw	r2,-8(fp)
 1016f0c:	e0fffe17 	ldw	r3,-8(fp)
 1016f10:	18800060 	cmpeqi	r2,r3,1
 1016f14:	1000981e 	bne	r2,zero,1017178 <OSFlagPend+0x3a8>
 1016f18:	e0fffe17 	ldw	r3,-8(fp)
 1016f1c:	18800088 	cmpgei	r2,r3,2
 1016f20:	1000041e 	bne	r2,zero,1016f34 <OSFlagPend+0x164>
 1016f24:	e0fffe17 	ldw	r3,-8(fp)
 1016f28:	1805003a 	cmpeq	r2,r3,zero
 1016f2c:	1000641e 	bne	r2,zero,10170c0 <OSFlagPend+0x2f0>
 1016f30:	0000bf06 	br	1017230 <OSFlagPend+0x460>
 1016f34:	e0fffe17 	ldw	r3,-8(fp)
 1016f38:	188000a0 	cmpeqi	r2,r3,2
 1016f3c:	1000041e 	bne	r2,zero,1016f50 <OSFlagPend+0x180>
 1016f40:	e0fffe17 	ldw	r3,-8(fp)
 1016f44:	188000e0 	cmpeqi	r2,r3,3
 1016f48:	10002f1e 	bne	r2,zero,1017008 <OSFlagPend+0x238>
 1016f4c:	0000b806 	br	1017230 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 1016f50:	e0bff917 	ldw	r2,-28(fp)
 1016f54:	10c0020b 	ldhu	r3,8(r2)
 1016f58:	e0bffa0b 	ldhu	r2,-24(fp)
 1016f5c:	1884703a 	and	r2,r3,r2
 1016f60:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 1016f64:	e0fff30b 	ldhu	r3,-52(fp)
 1016f68:	e0bffa0b 	ldhu	r2,-24(fp)
 1016f6c:	18801a1e 	bne	r3,r2,1016fd8 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 1016f70:	e0bff203 	ldbu	r2,-56(fp)
 1016f74:	10800058 	cmpnei	r2,r2,1
 1016f78:	1000091e 	bne	r2,zero,1016fa0 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 1016f7c:	e0bff917 	ldw	r2,-28(fp)
 1016f80:	1080020b 	ldhu	r2,8(r2)
 1016f84:	1007883a 	mov	r3,r2
 1016f88:	e0bff30b 	ldhu	r2,-52(fp)
 1016f8c:	0084303a 	nor	r2,zero,r2
 1016f90:	1884703a 	and	r2,r3,r2
 1016f94:	1007883a 	mov	r3,r2
 1016f98:	e0bff917 	ldw	r2,-28(fp)
 1016f9c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 1016fa0:	008040b4 	movhi	r2,258
 1016fa4:	108bce04 	addi	r2,r2,12088
 1016fa8:	10c00017 	ldw	r3,0(r2)
 1016fac:	e0bff30b 	ldhu	r2,-52(fp)
 1016fb0:	18800b0d 	sth	r2,44(r3)
 1016fb4:	e0bff117 	ldw	r2,-60(fp)
 1016fb8:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016fbc:	e0bfef17 	ldw	r2,-68(fp)
 1016fc0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 1016fc4:	e0800217 	ldw	r2,8(fp)
 1016fc8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 1016fcc:	e0bff30b 	ldhu	r2,-52(fp)
 1016fd0:	e0bfff15 	stw	r2,-4(fp)
 1016fd4:	00010906 	br	10173fc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 1016fd8:	e1bffa0b 	ldhu	r6,-24(fp)
 1016fdc:	e1fffb03 	ldbu	r7,-20(fp)
 1016fe0:	e0bffc0b 	ldhu	r2,-16(fp)
 1016fe4:	e17ff404 	addi	r5,fp,-48
 1016fe8:	d8800015 	stw	r2,0(sp)
 1016fec:	e13ff917 	ldw	r4,-28(fp)
 1016ff0:	10178f80 	call	10178f8 <OS_FlagBlock>
 1016ff4:	e0bff117 	ldw	r2,-60(fp)
 1016ff8:	e0bfee15 	stw	r2,-72(fp)
 1016ffc:	e0bfee17 	ldw	r2,-72(fp)
 1017000:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 1017004:	00009506 	br	101725c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 1017008:	e0bff917 	ldw	r2,-28(fp)
 101700c:	10c0020b 	ldhu	r3,8(r2)
 1017010:	e0bffa0b 	ldhu	r2,-24(fp)
 1017014:	1884703a 	and	r2,r3,r2
 1017018:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 101701c:	e0bff30b 	ldhu	r2,-52(fp)
 1017020:	1005003a 	cmpeq	r2,r2,zero
 1017024:	10001a1e 	bne	r2,zero,1017090 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 1017028:	e0bff203 	ldbu	r2,-56(fp)
 101702c:	10800058 	cmpnei	r2,r2,1
 1017030:	1000091e 	bne	r2,zero,1017058 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 1017034:	e0bff917 	ldw	r2,-28(fp)
 1017038:	1080020b 	ldhu	r2,8(r2)
 101703c:	1007883a 	mov	r3,r2
 1017040:	e0bff30b 	ldhu	r2,-52(fp)
 1017044:	0084303a 	nor	r2,zero,r2
 1017048:	1884703a 	and	r2,r3,r2
 101704c:	1007883a 	mov	r3,r2
 1017050:	e0bff917 	ldw	r2,-28(fp)
 1017054:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 1017058:	008040b4 	movhi	r2,258
 101705c:	108bce04 	addi	r2,r2,12088
 1017060:	10c00017 	ldw	r3,0(r2)
 1017064:	e0bff30b 	ldhu	r2,-52(fp)
 1017068:	18800b0d 	sth	r2,44(r3)
 101706c:	e0bff117 	ldw	r2,-60(fp)
 1017070:	e0bfed15 	stw	r2,-76(fp)
 1017074:	e0bfed17 	ldw	r2,-76(fp)
 1017078:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 101707c:	e0800217 	ldw	r2,8(fp)
 1017080:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 1017084:	e0fff30b 	ldhu	r3,-52(fp)
 1017088:	e0ffff15 	stw	r3,-4(fp)
 101708c:	0000db06 	br	10173fc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 1017090:	e1bffa0b 	ldhu	r6,-24(fp)
 1017094:	e1fffb03 	ldbu	r7,-20(fp)
 1017098:	e0bffc0b 	ldhu	r2,-16(fp)
 101709c:	e17ff404 	addi	r5,fp,-48
 10170a0:	d8800015 	stw	r2,0(sp)
 10170a4:	e13ff917 	ldw	r4,-28(fp)
 10170a8:	10178f80 	call	10178f8 <OS_FlagBlock>
 10170ac:	e0bff117 	ldw	r2,-60(fp)
 10170b0:	e0bfec15 	stw	r2,-80(fp)
 10170b4:	e0bfec17 	ldw	r2,-80(fp)
 10170b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 10170bc:	00006706 	br	101725c <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 10170c0:	e0bff917 	ldw	r2,-28(fp)
 10170c4:	1080020b 	ldhu	r2,8(r2)
 10170c8:	0084303a 	nor	r2,zero,r2
 10170cc:	1007883a 	mov	r3,r2
 10170d0:	e0bffa0b 	ldhu	r2,-24(fp)
 10170d4:	1884703a 	and	r2,r3,r2
 10170d8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 10170dc:	e0fff30b 	ldhu	r3,-52(fp)
 10170e0:	e0bffa0b 	ldhu	r2,-24(fp)
 10170e4:	1880181e 	bne	r3,r2,1017148 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 10170e8:	e0bff203 	ldbu	r2,-56(fp)
 10170ec:	10800058 	cmpnei	r2,r2,1
 10170f0:	1000071e 	bne	r2,zero,1017110 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 10170f4:	e0bff917 	ldw	r2,-28(fp)
 10170f8:	10c0020b 	ldhu	r3,8(r2)
 10170fc:	e0bff30b 	ldhu	r2,-52(fp)
 1017100:	1884b03a 	or	r2,r3,r2
 1017104:	1007883a 	mov	r3,r2
 1017108:	e0bff917 	ldw	r2,-28(fp)
 101710c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 1017110:	008040b4 	movhi	r2,258
 1017114:	108bce04 	addi	r2,r2,12088
 1017118:	10c00017 	ldw	r3,0(r2)
 101711c:	e0bff30b 	ldhu	r2,-52(fp)
 1017120:	18800b0d 	sth	r2,44(r3)
 1017124:	e0bff117 	ldw	r2,-60(fp)
 1017128:	e0bfeb15 	stw	r2,-84(fp)
 101712c:	e0bfeb17 	ldw	r2,-84(fp)
 1017130:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 1017134:	e0800217 	ldw	r2,8(fp)
 1017138:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 101713c:	e0bff30b 	ldhu	r2,-52(fp)
 1017140:	e0bfff15 	stw	r2,-4(fp)
 1017144:	0000ad06 	br	10173fc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 1017148:	e1bffa0b 	ldhu	r6,-24(fp)
 101714c:	e1fffb03 	ldbu	r7,-20(fp)
 1017150:	e0bffc0b 	ldhu	r2,-16(fp)
 1017154:	e17ff404 	addi	r5,fp,-48
 1017158:	d8800015 	stw	r2,0(sp)
 101715c:	e13ff917 	ldw	r4,-28(fp)
 1017160:	10178f80 	call	10178f8 <OS_FlagBlock>
 1017164:	e0bff117 	ldw	r2,-60(fp)
 1017168:	e0bfea15 	stw	r2,-88(fp)
 101716c:	e0bfea17 	ldw	r2,-88(fp)
 1017170:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 1017174:	00003906 	br	101725c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 1017178:	e0bff917 	ldw	r2,-28(fp)
 101717c:	1080020b 	ldhu	r2,8(r2)
 1017180:	0084303a 	nor	r2,zero,r2
 1017184:	1007883a 	mov	r3,r2
 1017188:	e0bffa0b 	ldhu	r2,-24(fp)
 101718c:	1884703a 	and	r2,r3,r2
 1017190:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 1017194:	e0bff30b 	ldhu	r2,-52(fp)
 1017198:	1005003a 	cmpeq	r2,r2,zero
 101719c:	1000181e 	bne	r2,zero,1017200 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 10171a0:	e0bff203 	ldbu	r2,-56(fp)
 10171a4:	10800058 	cmpnei	r2,r2,1
 10171a8:	1000071e 	bne	r2,zero,10171c8 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 10171ac:	e0bff917 	ldw	r2,-28(fp)
 10171b0:	10c0020b 	ldhu	r3,8(r2)
 10171b4:	e0bff30b 	ldhu	r2,-52(fp)
 10171b8:	1884b03a 	or	r2,r3,r2
 10171bc:	1007883a 	mov	r3,r2
 10171c0:	e0bff917 	ldw	r2,-28(fp)
 10171c4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 10171c8:	008040b4 	movhi	r2,258
 10171cc:	108bce04 	addi	r2,r2,12088
 10171d0:	10c00017 	ldw	r3,0(r2)
 10171d4:	e0bff30b 	ldhu	r2,-52(fp)
 10171d8:	18800b0d 	sth	r2,44(r3)
 10171dc:	e0bff117 	ldw	r2,-60(fp)
 10171e0:	e0bfe915 	stw	r2,-92(fp)
 10171e4:	e0bfe917 	ldw	r2,-92(fp)
 10171e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 10171ec:	e0800217 	ldw	r2,8(fp)
 10171f0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 10171f4:	e0fff30b 	ldhu	r3,-52(fp)
 10171f8:	e0ffff15 	stw	r3,-4(fp)
 10171fc:	00007f06 	br	10173fc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 1017200:	e1bffa0b 	ldhu	r6,-24(fp)
 1017204:	e1fffb03 	ldbu	r7,-20(fp)
 1017208:	e0bffc0b 	ldhu	r2,-16(fp)
 101720c:	e17ff404 	addi	r5,fp,-48
 1017210:	d8800015 	stw	r2,0(sp)
 1017214:	e13ff917 	ldw	r4,-28(fp)
 1017218:	10178f80 	call	10178f8 <OS_FlagBlock>
 101721c:	e0bff117 	ldw	r2,-60(fp)
 1017220:	e0bfe815 	stw	r2,-96(fp)
 1017224:	e0bfe817 	ldw	r2,-96(fp)
 1017228:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 101722c:	00000b06 	br	101725c <OSFlagPend+0x48c>
 1017230:	e0bff117 	ldw	r2,-60(fp)
 1017234:	e0bfe715 	stw	r2,-100(fp)
 1017238:	e0bfe717 	ldw	r2,-100(fp)
 101723c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 1017240:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 1017244:	e0c00217 	ldw	r3,8(fp)
 1017248:	00801bc4 	movi	r2,111
 101724c:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 1017250:	e0bff30b 	ldhu	r2,-52(fp)
 1017254:	e0bfff15 	stw	r2,-4(fp)
 1017258:	00006806 	br	10173fc <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 101725c:	1015bac0 	call	1015bac <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017260:	0005303a 	rdctl	r2,status
 1017264:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017268:	e0ffe617 	ldw	r3,-104(fp)
 101726c:	00bfff84 	movi	r2,-2
 1017270:	1884703a 	and	r2,r3,r2
 1017274:	1001703a 	wrctl	status,r2
  
  return context;
 1017278:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 101727c:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 1017280:	008040b4 	movhi	r2,258
 1017284:	108bce04 	addi	r2,r2,12088
 1017288:	10800017 	ldw	r2,0(r2)
 101728c:	10800c43 	ldbu	r2,49(r2)
 1017290:	10803fcc 	andi	r2,r2,255
 1017294:	1005003a 	cmpeq	r2,r2,zero
 1017298:	1000221e 	bne	r2,zero,1017324 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 101729c:	008040b4 	movhi	r2,258
 10172a0:	108bce04 	addi	r2,r2,12088
 10172a4:	10800017 	ldw	r2,0(r2)
 10172a8:	10800c43 	ldbu	r2,49(r2)
 10172ac:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 10172b0:	008040b4 	movhi	r2,258
 10172b4:	108bce04 	addi	r2,r2,12088
 10172b8:	10800017 	ldw	r2,0(r2)
 10172bc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 10172c0:	e13ff404 	addi	r4,fp,-48
 10172c4:	1017cb00 	call	1017cb0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 10172c8:	008040b4 	movhi	r2,258
 10172cc:	108bce04 	addi	r2,r2,12088
 10172d0:	10800017 	ldw	r2,0(r2)
 10172d4:	10000c05 	stb	zero,48(r2)
 10172d8:	e0bff117 	ldw	r2,-60(fp)
 10172dc:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10172e0:	e0bfe517 	ldw	r2,-108(fp)
 10172e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 10172e8:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 10172ec:	e0bff243 	ldbu	r2,-55(fp)
 10172f0:	108000a0 	cmpeqi	r2,r2,2
 10172f4:	1000011e 	bne	r2,zero,10172fc <OSFlagPend+0x52c>
 10172f8:	00000406 	br	101730c <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 10172fc:	e0c00217 	ldw	r3,8(fp)
 1017300:	00800384 	movi	r2,14
 1017304:	18800005 	stb	r2,0(r3)
                 break;
 1017308:	00000306 	br	1017318 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 101730c:	e0c00217 	ldw	r3,8(fp)
 1017310:	00800284 	movi	r2,10
 1017314:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 1017318:	e0fff30b 	ldhu	r3,-52(fp)
 101731c:	e0ffff15 	stw	r3,-4(fp)
 1017320:	00003606 	br	10173fc <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 1017324:	008040b4 	movhi	r2,258
 1017328:	108bce04 	addi	r2,r2,12088
 101732c:	10800017 	ldw	r2,0(r2)
 1017330:	10800b0b 	ldhu	r2,44(r2)
 1017334:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 1017338:	e0bff203 	ldbu	r2,-56(fp)
 101733c:	10800058 	cmpnei	r2,r2,1
 1017340:	1000261e 	bne	r2,zero,10173dc <OSFlagPend+0x60c>
        switch (wait_type) {
 1017344:	e0bffb03 	ldbu	r2,-20(fp)
 1017348:	e0bffd15 	stw	r2,-12(fp)
 101734c:	e0fffd17 	ldw	r3,-12(fp)
 1017350:	1804803a 	cmplt	r2,r3,zero
 1017354:	1000181e 	bne	r2,zero,10173b8 <OSFlagPend+0x5e8>
 1017358:	e0fffd17 	ldw	r3,-12(fp)
 101735c:	18800090 	cmplti	r2,r3,2
 1017360:	10000d1e 	bne	r2,zero,1017398 <OSFlagPend+0x5c8>
 1017364:	e0fffd17 	ldw	r3,-12(fp)
 1017368:	18800108 	cmpgei	r2,r3,4
 101736c:	1000121e 	bne	r2,zero,10173b8 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 1017370:	e0bff917 	ldw	r2,-28(fp)
 1017374:	1080020b 	ldhu	r2,8(r2)
 1017378:	1007883a 	mov	r3,r2
 101737c:	e0bff30b 	ldhu	r2,-52(fp)
 1017380:	0084303a 	nor	r2,zero,r2
 1017384:	1884703a 	and	r2,r3,r2
 1017388:	1007883a 	mov	r3,r2
 101738c:	e0bff917 	ldw	r2,-28(fp)
 1017390:	10c0020d 	sth	r3,8(r2)
                 break;
 1017394:	00001106 	br	10173dc <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 1017398:	e0bff917 	ldw	r2,-28(fp)
 101739c:	10c0020b 	ldhu	r3,8(r2)
 10173a0:	e0bff30b 	ldhu	r2,-52(fp)
 10173a4:	1884b03a 	or	r2,r3,r2
 10173a8:	1007883a 	mov	r3,r2
 10173ac:	e0bff917 	ldw	r2,-28(fp)
 10173b0:	10c0020d 	sth	r3,8(r2)
                 break;
 10173b4:	00000906 	br	10173dc <OSFlagPend+0x60c>
 10173b8:	e0bff117 	ldw	r2,-60(fp)
 10173bc:	e0bfe415 	stw	r2,-112(fp)
 10173c0:	e0bfe417 	ldw	r2,-112(fp)
 10173c4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 10173c8:	e0c00217 	ldw	r3,8(fp)
 10173cc:	00801bc4 	movi	r2,111
 10173d0:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 10173d4:	e03fff15 	stw	zero,-4(fp)
 10173d8:	00000806 	br	10173fc <OSFlagPend+0x62c>
 10173dc:	e0bff117 	ldw	r2,-60(fp)
 10173e0:	e0bfe315 	stw	r2,-116(fp)
 10173e4:	e0bfe317 	ldw	r2,-116(fp)
 10173e8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 10173ec:	e0800217 	ldw	r2,8(fp)
 10173f0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 10173f4:	e0bff30b 	ldhu	r2,-52(fp)
 10173f8:	e0bfff15 	stw	r2,-4(fp)
 10173fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1017400:	e037883a 	mov	sp,fp
 1017404:	dfc00117 	ldw	ra,4(sp)
 1017408:	df000017 	ldw	fp,0(sp)
 101740c:	dec00204 	addi	sp,sp,8
 1017410:	f800283a 	ret

01017414 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 1017414:	defffb04 	addi	sp,sp,-20
 1017418:	df000415 	stw	fp,16(sp)
 101741c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 1017420:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017424:	0005303a 	rdctl	r2,status
 1017428:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101742c:	e0fffd17 	ldw	r3,-12(fp)
 1017430:	00bfff84 	movi	r2,-2
 1017434:	1884703a 	and	r2,r3,r2
 1017438:	1001703a 	wrctl	status,r2
  
  return context;
 101743c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 1017440:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 1017444:	008040b4 	movhi	r2,258
 1017448:	108bce04 	addi	r2,r2,12088
 101744c:	10800017 	ldw	r2,0(r2)
 1017450:	10800b0b 	ldhu	r2,44(r2)
 1017454:	e0bfff0d 	sth	r2,-4(fp)
 1017458:	e0bffe17 	ldw	r2,-8(fp)
 101745c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017460:	e0bffc17 	ldw	r2,-16(fp)
 1017464:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 1017468:	e0bfff0b 	ldhu	r2,-4(fp)
}
 101746c:	e037883a 	mov	sp,fp
 1017470:	df000017 	ldw	fp,0(sp)
 1017474:	dec00104 	addi	sp,sp,4
 1017478:	f800283a 	ret

0101747c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 101747c:	deffed04 	addi	sp,sp,-76
 1017480:	dfc01215 	stw	ra,72(sp)
 1017484:	df001115 	stw	fp,68(sp)
 1017488:	df001104 	addi	fp,sp,68
 101748c:	e13ff915 	stw	r4,-28(fp)
 1017490:	e1fffc15 	stw	r7,-16(fp)
 1017494:	e17ffa0d 	sth	r5,-24(fp)
 1017498:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 101749c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 10174a0:	e0bffc17 	ldw	r2,-16(fp)
 10174a4:	1004c03a 	cmpne	r2,r2,zero
 10174a8:	1000021e 	bne	r2,zero,10174b4 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 10174ac:	e03fff15 	stw	zero,-4(fp)
 10174b0:	0000d606 	br	101780c <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 10174b4:	e0bff917 	ldw	r2,-28(fp)
 10174b8:	1004c03a 	cmpne	r2,r2,zero
 10174bc:	1000051e 	bne	r2,zero,10174d4 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 10174c0:	e0fffc17 	ldw	r3,-16(fp)
 10174c4:	00801b84 	movi	r2,110
 10174c8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 10174cc:	e03fff15 	stw	zero,-4(fp)
 10174d0:	0000ce06 	br	101780c <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 10174d4:	e0bff917 	ldw	r2,-28(fp)
 10174d8:	10800003 	ldbu	r2,0(r2)
 10174dc:	10803fcc 	andi	r2,r2,255
 10174e0:	10800160 	cmpeqi	r2,r2,5
 10174e4:	1000051e 	bne	r2,zero,10174fc <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 10174e8:	e0fffc17 	ldw	r3,-16(fp)
 10174ec:	00800044 	movi	r2,1
 10174f0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 10174f4:	e03fff15 	stw	zero,-4(fp)
 10174f8:	0000c406 	br	101780c <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10174fc:	0005303a 	rdctl	r2,status
 1017500:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017504:	e0fff417 	ldw	r3,-48(fp)
 1017508:	00bfff84 	movi	r2,-2
 101750c:	1884703a 	and	r2,r3,r2
 1017510:	1001703a 	wrctl	status,r2
  
  return context;
 1017514:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 1017518:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 101751c:	e0bffb03 	ldbu	r2,-20(fp)
 1017520:	e0bffe15 	stw	r2,-8(fp)
 1017524:	e0fffe17 	ldw	r3,-8(fp)
 1017528:	1805003a 	cmpeq	r2,r3,zero
 101752c:	1000041e 	bne	r2,zero,1017540 <OSFlagPost+0xc4>
 1017530:	e0fffe17 	ldw	r3,-8(fp)
 1017534:	18800060 	cmpeqi	r2,r3,1
 1017538:	10000b1e 	bne	r2,zero,1017568 <OSFlagPost+0xec>
 101753c:	00001206 	br	1017588 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 1017540:	e0bff917 	ldw	r2,-28(fp)
 1017544:	1080020b 	ldhu	r2,8(r2)
 1017548:	1007883a 	mov	r3,r2
 101754c:	e0bffa0b 	ldhu	r2,-24(fp)
 1017550:	0084303a 	nor	r2,zero,r2
 1017554:	1884703a 	and	r2,r3,r2
 1017558:	1007883a 	mov	r3,r2
 101755c:	e0bff917 	ldw	r2,-28(fp)
 1017560:	10c0020d 	sth	r3,8(r2)
             break;
 1017564:	00001106 	br	10175ac <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 1017568:	e0bff917 	ldw	r2,-28(fp)
 101756c:	10c0020b 	ldhu	r3,8(r2)
 1017570:	e0bffa0b 	ldhu	r2,-24(fp)
 1017574:	1884b03a 	or	r2,r3,r2
 1017578:	1007883a 	mov	r3,r2
 101757c:	e0bff917 	ldw	r2,-28(fp)
 1017580:	10c0020d 	sth	r3,8(r2)
             break;
 1017584:	00000906 	br	10175ac <OSFlagPost+0x130>
 1017588:	e0bff517 	ldw	r2,-44(fp)
 101758c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017590:	e0bff317 	ldw	r2,-52(fp)
 1017594:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 1017598:	e0fffc17 	ldw	r3,-16(fp)
 101759c:	00801c44 	movi	r2,113
 10175a0:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 10175a4:	e03fff15 	stw	zero,-4(fp)
 10175a8:	00009806 	br	101780c <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 10175ac:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 10175b0:	e0bff917 	ldw	r2,-28(fp)
 10175b4:	10800117 	ldw	r2,4(r2)
 10175b8:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 10175bc:	00007506 	br	1017794 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 10175c0:	e0bff817 	ldw	r2,-32(fp)
 10175c4:	10800483 	ldbu	r2,18(r2)
 10175c8:	10803fcc 	andi	r2,r2,255
 10175cc:	e0bffd15 	stw	r2,-12(fp)
 10175d0:	e0fffd17 	ldw	r3,-12(fp)
 10175d4:	18800060 	cmpeqi	r2,r3,1
 10175d8:	10004d1e 	bne	r2,zero,1017710 <OSFlagPost+0x294>
 10175dc:	e0fffd17 	ldw	r3,-12(fp)
 10175e0:	18800088 	cmpgei	r2,r3,2
 10175e4:	1000041e 	bne	r2,zero,10175f8 <OSFlagPost+0x17c>
 10175e8:	e0fffd17 	ldw	r3,-12(fp)
 10175ec:	1805003a 	cmpeq	r2,r3,zero
 10175f0:	1000301e 	bne	r2,zero,10176b4 <OSFlagPost+0x238>
 10175f4:	00005b06 	br	1017764 <OSFlagPost+0x2e8>
 10175f8:	e0fffd17 	ldw	r3,-12(fp)
 10175fc:	188000a0 	cmpeqi	r2,r3,2
 1017600:	1000041e 	bne	r2,zero,1017614 <OSFlagPost+0x198>
 1017604:	e0fffd17 	ldw	r3,-12(fp)
 1017608:	188000e0 	cmpeqi	r2,r3,3
 101760c:	1000161e 	bne	r2,zero,1017668 <OSFlagPost+0x1ec>
 1017610:	00005406 	br	1017764 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 1017614:	e0bff917 	ldw	r2,-28(fp)
 1017618:	10c0020b 	ldhu	r3,8(r2)
 101761c:	e0bff817 	ldw	r2,-32(fp)
 1017620:	1080040b 	ldhu	r2,16(r2)
 1017624:	1884703a 	and	r2,r3,r2
 1017628:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 101762c:	e0bff817 	ldw	r2,-32(fp)
 1017630:	1080040b 	ldhu	r2,16(r2)
 1017634:	10ffffcc 	andi	r3,r2,65535
 1017638:	e0bff68b 	ldhu	r2,-38(fp)
 101763c:	1880521e 	bne	r3,r2,1017788 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 1017640:	e17ff68b 	ldhu	r5,-38(fp)
 1017644:	e13ff817 	ldw	r4,-32(fp)
 1017648:	1017ba00 	call	1017ba0 <OS_FlagTaskRdy>
 101764c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 1017650:	e0bff603 	ldbu	r2,-40(fp)
 1017654:	10800058 	cmpnei	r2,r2,1
 1017658:	10004b1e 	bne	r2,zero,1017788 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 101765c:	00800044 	movi	r2,1
 1017660:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 1017664:	00004806 	br	1017788 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 1017668:	e0bff917 	ldw	r2,-28(fp)
 101766c:	10c0020b 	ldhu	r3,8(r2)
 1017670:	e0bff817 	ldw	r2,-32(fp)
 1017674:	1080040b 	ldhu	r2,16(r2)
 1017678:	1884703a 	and	r2,r3,r2
 101767c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 1017680:	e0bff68b 	ldhu	r2,-38(fp)
 1017684:	1005003a 	cmpeq	r2,r2,zero
 1017688:	10003f1e 	bne	r2,zero,1017788 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 101768c:	e17ff68b 	ldhu	r5,-38(fp)
 1017690:	e13ff817 	ldw	r4,-32(fp)
 1017694:	1017ba00 	call	1017ba0 <OS_FlagTaskRdy>
 1017698:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 101769c:	e0bff603 	ldbu	r2,-40(fp)
 10176a0:	10800058 	cmpnei	r2,r2,1
 10176a4:	1000381e 	bne	r2,zero,1017788 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 10176a8:	00800044 	movi	r2,1
 10176ac:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 10176b0:	00003506 	br	1017788 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 10176b4:	e0bff917 	ldw	r2,-28(fp)
 10176b8:	1080020b 	ldhu	r2,8(r2)
 10176bc:	0084303a 	nor	r2,zero,r2
 10176c0:	1007883a 	mov	r3,r2
 10176c4:	e0bff817 	ldw	r2,-32(fp)
 10176c8:	1080040b 	ldhu	r2,16(r2)
 10176cc:	1884703a 	and	r2,r3,r2
 10176d0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 10176d4:	e0bff817 	ldw	r2,-32(fp)
 10176d8:	1080040b 	ldhu	r2,16(r2)
 10176dc:	10ffffcc 	andi	r3,r2,65535
 10176e0:	e0bff68b 	ldhu	r2,-38(fp)
 10176e4:	1880281e 	bne	r3,r2,1017788 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 10176e8:	e17ff68b 	ldhu	r5,-38(fp)
 10176ec:	e13ff817 	ldw	r4,-32(fp)
 10176f0:	1017ba00 	call	1017ba0 <OS_FlagTaskRdy>
 10176f4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 10176f8:	e0bff603 	ldbu	r2,-40(fp)
 10176fc:	10800058 	cmpnei	r2,r2,1
 1017700:	1000211e 	bne	r2,zero,1017788 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 1017704:	00800044 	movi	r2,1
 1017708:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 101770c:	00001e06 	br	1017788 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 1017710:	e0bff917 	ldw	r2,-28(fp)
 1017714:	1080020b 	ldhu	r2,8(r2)
 1017718:	0084303a 	nor	r2,zero,r2
 101771c:	1007883a 	mov	r3,r2
 1017720:	e0bff817 	ldw	r2,-32(fp)
 1017724:	1080040b 	ldhu	r2,16(r2)
 1017728:	1884703a 	and	r2,r3,r2
 101772c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 1017730:	e0bff68b 	ldhu	r2,-38(fp)
 1017734:	1005003a 	cmpeq	r2,r2,zero
 1017738:	1000131e 	bne	r2,zero,1017788 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 101773c:	e17ff68b 	ldhu	r5,-38(fp)
 1017740:	e13ff817 	ldw	r4,-32(fp)
 1017744:	1017ba00 	call	1017ba0 <OS_FlagTaskRdy>
 1017748:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 101774c:	e0bff603 	ldbu	r2,-40(fp)
 1017750:	10800058 	cmpnei	r2,r2,1
 1017754:	10000c1e 	bne	r2,zero,1017788 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 1017758:	00800044 	movi	r2,1
 101775c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 1017760:	00000906 	br	1017788 <OSFlagPost+0x30c>
 1017764:	e0bff517 	ldw	r2,-44(fp)
 1017768:	e0bff215 	stw	r2,-56(fp)
 101776c:	e0bff217 	ldw	r2,-56(fp)
 1017770:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 1017774:	e0fffc17 	ldw	r3,-16(fp)
 1017778:	00801bc4 	movi	r2,111
 101777c:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 1017780:	e03fff15 	stw	zero,-4(fp)
 1017784:	00002106 	br	101780c <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 1017788:	e0bff817 	ldw	r2,-32(fp)
 101778c:	10800017 	ldw	r2,0(r2)
 1017790:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 1017794:	e0bff817 	ldw	r2,-32(fp)
 1017798:	1004c03a 	cmpne	r2,r2,zero
 101779c:	103f881e 	bne	r2,zero,10175c0 <OSFlagPost+0x144>
 10177a0:	e0bff517 	ldw	r2,-44(fp)
 10177a4:	e0bff115 	stw	r2,-60(fp)
 10177a8:	e0bff117 	ldw	r2,-60(fp)
 10177ac:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 10177b0:	e0bff783 	ldbu	r2,-34(fp)
 10177b4:	10800058 	cmpnei	r2,r2,1
 10177b8:	1000011e 	bne	r2,zero,10177c0 <OSFlagPost+0x344>
        OS_Sched();
 10177bc:	1015bac0 	call	1015bac <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10177c0:	0005303a 	rdctl	r2,status
 10177c4:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10177c8:	e0fff017 	ldw	r3,-64(fp)
 10177cc:	00bfff84 	movi	r2,-2
 10177d0:	1884703a 	and	r2,r3,r2
 10177d4:	1001703a 	wrctl	status,r2
  
  return context;
 10177d8:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 10177dc:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 10177e0:	e0bff917 	ldw	r2,-28(fp)
 10177e4:	1080020b 	ldhu	r2,8(r2)
 10177e8:	e0bff70d 	sth	r2,-36(fp)
 10177ec:	e0bff517 	ldw	r2,-44(fp)
 10177f0:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10177f4:	e0bfef17 	ldw	r2,-68(fp)
 10177f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 10177fc:	e0bffc17 	ldw	r2,-16(fp)
 1017800:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 1017804:	e0bff70b 	ldhu	r2,-36(fp)
 1017808:	e0bfff15 	stw	r2,-4(fp)
 101780c:	e0bfff17 	ldw	r2,-4(fp)
}
 1017810:	e037883a 	mov	sp,fp
 1017814:	dfc00117 	ldw	ra,4(sp)
 1017818:	df000017 	ldw	fp,0(sp)
 101781c:	dec00204 	addi	sp,sp,8
 1017820:	f800283a 	ret

01017824 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 1017824:	defff804 	addi	sp,sp,-32
 1017828:	df000715 	stw	fp,28(sp)
 101782c:	df000704 	addi	fp,sp,28
 1017830:	e13ffd15 	stw	r4,-12(fp)
 1017834:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 1017838:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 101783c:	e0bffe17 	ldw	r2,-8(fp)
 1017840:	1004c03a 	cmpne	r2,r2,zero
 1017844:	1000021e 	bne	r2,zero,1017850 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 1017848:	e03fff15 	stw	zero,-4(fp)
 101784c:	00002506 	br	10178e4 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 1017850:	e0bffd17 	ldw	r2,-12(fp)
 1017854:	1004c03a 	cmpne	r2,r2,zero
 1017858:	1000051e 	bne	r2,zero,1017870 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101785c:	e0fffe17 	ldw	r3,-8(fp)
 1017860:	00801b84 	movi	r2,110
 1017864:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1017868:	e03fff15 	stw	zero,-4(fp)
 101786c:	00001d06 	br	10178e4 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 1017870:	e0bffd17 	ldw	r2,-12(fp)
 1017874:	10800003 	ldbu	r2,0(r2)
 1017878:	10803fcc 	andi	r2,r2,255
 101787c:	10800160 	cmpeqi	r2,r2,5
 1017880:	1000051e 	bne	r2,zero,1017898 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 1017884:	e0fffe17 	ldw	r3,-8(fp)
 1017888:	00800044 	movi	r2,1
 101788c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 1017890:	e03fff15 	stw	zero,-4(fp)
 1017894:	00001306 	br	10178e4 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017898:	0005303a 	rdctl	r2,status
 101789c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10178a0:	e0fffa17 	ldw	r3,-24(fp)
 10178a4:	00bfff84 	movi	r2,-2
 10178a8:	1884703a 	and	r2,r3,r2
 10178ac:	1001703a 	wrctl	status,r2
  
  return context;
 10178b0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 10178b4:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 10178b8:	e0bffd17 	ldw	r2,-12(fp)
 10178bc:	1080020b 	ldhu	r2,8(r2)
 10178c0:	e0bffc0d 	sth	r2,-16(fp)
 10178c4:	e0bffb17 	ldw	r2,-20(fp)
 10178c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10178cc:	e0bff917 	ldw	r2,-28(fp)
 10178d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10178d4:	e0bffe17 	ldw	r2,-8(fp)
 10178d8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 10178dc:	e0bffc0b 	ldhu	r2,-16(fp)
 10178e0:	e0bfff15 	stw	r2,-4(fp)
 10178e4:	e0bfff17 	ldw	r2,-4(fp)
}
 10178e8:	e037883a 	mov	sp,fp
 10178ec:	df000017 	ldw	fp,0(sp)
 10178f0:	dec00104 	addi	sp,sp,4
 10178f4:	f800283a 	ret

010178f8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 10178f8:	defff804 	addi	sp,sp,-32
 10178fc:	df000715 	stw	fp,28(sp)
 1017900:	df000704 	addi	fp,sp,28
 1017904:	e13ffb15 	stw	r4,-20(fp)
 1017908:	e17ffc15 	stw	r5,-16(fp)
 101790c:	e0800117 	ldw	r2,4(fp)
 1017910:	e1bffd0d 	sth	r6,-12(fp)
 1017914:	e1fffe05 	stb	r7,-8(fp)
 1017918:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 101791c:	008040b4 	movhi	r2,258
 1017920:	108bce04 	addi	r2,r2,12088
 1017924:	10c00017 	ldw	r3,0(r2)
 1017928:	008040b4 	movhi	r2,258
 101792c:	108bce04 	addi	r2,r2,12088
 1017930:	10800017 	ldw	r2,0(r2)
 1017934:	10800c03 	ldbu	r2,48(r2)
 1017938:	10800814 	ori	r2,r2,32
 101793c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 1017940:	008040b4 	movhi	r2,258
 1017944:	108bce04 	addi	r2,r2,12088
 1017948:	10800017 	ldw	r2,0(r2)
 101794c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 1017950:	008040b4 	movhi	r2,258
 1017954:	108bce04 	addi	r2,r2,12088
 1017958:	10c00017 	ldw	r3,0(r2)
 101795c:	e0bfff0b 	ldhu	r2,-4(fp)
 1017960:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 1017964:	008040b4 	movhi	r2,258
 1017968:	108bce04 	addi	r2,r2,12088
 101796c:	10c00017 	ldw	r3,0(r2)
 1017970:	e0bffc17 	ldw	r2,-16(fp)
 1017974:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 1017978:	e0fffc17 	ldw	r3,-16(fp)
 101797c:	e0bffd0b 	ldhu	r2,-12(fp)
 1017980:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 1017984:	e0fffc17 	ldw	r3,-16(fp)
 1017988:	e0bffe03 	ldbu	r2,-8(fp)
 101798c:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 1017990:	008040b4 	movhi	r2,258
 1017994:	108bce04 	addi	r2,r2,12088
 1017998:	10c00017 	ldw	r3,0(r2)
 101799c:	e0bffc17 	ldw	r2,-16(fp)
 10179a0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 10179a4:	e0bffb17 	ldw	r2,-20(fp)
 10179a8:	10c00117 	ldw	r3,4(r2)
 10179ac:	e0bffc17 	ldw	r2,-16(fp)
 10179b0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 10179b4:	e0bffc17 	ldw	r2,-16(fp)
 10179b8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 10179bc:	e0fffc17 	ldw	r3,-16(fp)
 10179c0:	e0bffb17 	ldw	r2,-20(fp)
 10179c4:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 10179c8:	e0bffb17 	ldw	r2,-20(fp)
 10179cc:	10800117 	ldw	r2,4(r2)
 10179d0:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 10179d4:	e0bffa17 	ldw	r2,-24(fp)
 10179d8:	1005003a 	cmpeq	r2,r2,zero
 10179dc:	1000031e 	bne	r2,zero,10179ec <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 10179e0:	e0fffa17 	ldw	r3,-24(fp)
 10179e4:	e0bffc17 	ldw	r2,-16(fp)
 10179e8:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 10179ec:	e0fffb17 	ldw	r3,-20(fp)
 10179f0:	e0bffc17 	ldw	r2,-16(fp)
 10179f4:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 10179f8:	008040b4 	movhi	r2,258
 10179fc:	108bce04 	addi	r2,r2,12088
 1017a00:	10800017 	ldw	r2,0(r2)
 1017a04:	10800d03 	ldbu	r2,52(r2)
 1017a08:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 1017a0c:	e13ff903 	ldbu	r4,-28(fp)
 1017a10:	e0fff903 	ldbu	r3,-28(fp)
 1017a14:	008040b4 	movhi	r2,258
 1017a18:	108bcb44 	addi	r2,r2,12077
 1017a1c:	10c5883a 	add	r2,r2,r3
 1017a20:	10800003 	ldbu	r2,0(r2)
 1017a24:	1007883a 	mov	r3,r2
 1017a28:	008040b4 	movhi	r2,258
 1017a2c:	108bce04 	addi	r2,r2,12088
 1017a30:	10800017 	ldw	r2,0(r2)
 1017a34:	10800d43 	ldbu	r2,53(r2)
 1017a38:	0084303a 	nor	r2,zero,r2
 1017a3c:	1884703a 	and	r2,r3,r2
 1017a40:	1007883a 	mov	r3,r2
 1017a44:	008040b4 	movhi	r2,258
 1017a48:	108bcb44 	addi	r2,r2,12077
 1017a4c:	1105883a 	add	r2,r2,r4
 1017a50:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 1017a54:	e0fff903 	ldbu	r3,-28(fp)
 1017a58:	008040b4 	movhi	r2,258
 1017a5c:	108bcb44 	addi	r2,r2,12077
 1017a60:	10c5883a 	add	r2,r2,r3
 1017a64:	10800003 	ldbu	r2,0(r2)
 1017a68:	10803fcc 	andi	r2,r2,255
 1017a6c:	1004c03a 	cmpne	r2,r2,zero
 1017a70:	10000e1e 	bne	r2,zero,1017aac <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 1017a74:	008040b4 	movhi	r2,258
 1017a78:	108bce04 	addi	r2,r2,12088
 1017a7c:	10800017 	ldw	r2,0(r2)
 1017a80:	10800d83 	ldbu	r2,54(r2)
 1017a84:	0084303a 	nor	r2,zero,r2
 1017a88:	1007883a 	mov	r3,r2
 1017a8c:	008040b4 	movhi	r2,258
 1017a90:	108bcb04 	addi	r2,r2,12076
 1017a94:	10800003 	ldbu	r2,0(r2)
 1017a98:	1884703a 	and	r2,r3,r2
 1017a9c:	1007883a 	mov	r3,r2
 1017aa0:	008040b4 	movhi	r2,258
 1017aa4:	108bcb04 	addi	r2,r2,12076
 1017aa8:	10c00005 	stb	r3,0(r2)
    }
}
 1017aac:	e037883a 	mov	sp,fp
 1017ab0:	df000017 	ldw	fp,0(sp)
 1017ab4:	dec00104 	addi	sp,sp,4
 1017ab8:	f800283a 	ret

01017abc <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 1017abc:	defffb04 	addi	sp,sp,-20
 1017ac0:	dfc00415 	stw	ra,16(sp)
 1017ac4:	df000315 	stw	fp,12(sp)
 1017ac8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 1017acc:	010040b4 	movhi	r4,258
 1017ad0:	211de404 	addi	r4,r4,30608
 1017ad4:	0140dc04 	movi	r5,880
 1017ad8:	1015aec0 	call	1015aec <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 1017adc:	008040b4 	movhi	r2,258
 1017ae0:	109de404 	addi	r2,r2,30608
 1017ae4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 1017ae8:	008040b4 	movhi	r2,258
 1017aec:	109def04 	addi	r2,r2,30652
 1017af0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 1017af4:	e03fff0d 	sth	zero,-4(fp)
 1017af8:	00001306 	br	1017b48 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 1017afc:	e0bffe17 	ldw	r2,-8(fp)
 1017b00:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 1017b04:	e0fffe17 	ldw	r3,-8(fp)
 1017b08:	e0bffd17 	ldw	r2,-12(fp)
 1017b0c:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 1017b10:	e0fffe17 	ldw	r3,-8(fp)
 1017b14:	00800fc4 	movi	r2,63
 1017b18:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 1017b1c:	e0bffe17 	ldw	r2,-8(fp)
 1017b20:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 1017b24:	e0bffe17 	ldw	r2,-8(fp)
 1017b28:	10800b04 	addi	r2,r2,44
 1017b2c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 1017b30:	e0bffd17 	ldw	r2,-12(fp)
 1017b34:	10800b04 	addi	r2,r2,44
 1017b38:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 1017b3c:	e0bfff0b 	ldhu	r2,-4(fp)
 1017b40:	10800044 	addi	r2,r2,1
 1017b44:	e0bfff0d 	sth	r2,-4(fp)
 1017b48:	e0bfff0b 	ldhu	r2,-4(fp)
 1017b4c:	108004f0 	cmpltui	r2,r2,19
 1017b50:	103fea1e 	bne	r2,zero,1017afc <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 1017b54:	e0bffe17 	ldw	r2,-8(fp)
 1017b58:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 1017b5c:	e0bffe17 	ldw	r2,-8(fp)
 1017b60:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 1017b64:	e0fffe17 	ldw	r3,-8(fp)
 1017b68:	00800fc4 	movi	r2,63
 1017b6c:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 1017b70:	e0bffe17 	ldw	r2,-8(fp)
 1017b74:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 1017b78:	00c040b4 	movhi	r3,258
 1017b7c:	18cbd004 	addi	r3,r3,12096
 1017b80:	008040b4 	movhi	r2,258
 1017b84:	109de404 	addi	r2,r2,30608
 1017b88:	18800015 	stw	r2,0(r3)
#endif
}
 1017b8c:	e037883a 	mov	sp,fp
 1017b90:	dfc00117 	ldw	ra,4(sp)
 1017b94:	df000017 	ldw	fp,0(sp)
 1017b98:	dec00204 	addi	sp,sp,8
 1017b9c:	f800283a 	ret

01017ba0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 1017ba0:	defffa04 	addi	sp,sp,-24
 1017ba4:	dfc00515 	stw	ra,20(sp)
 1017ba8:	df000415 	stw	fp,16(sp)
 1017bac:	df000404 	addi	fp,sp,16
 1017bb0:	e13ffe15 	stw	r4,-8(fp)
 1017bb4:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 1017bb8:	e0bffe17 	ldw	r2,-8(fp)
 1017bbc:	10800217 	ldw	r2,8(r2)
 1017bc0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 1017bc4:	e0bffd17 	ldw	r2,-12(fp)
 1017bc8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 1017bcc:	e0fffd17 	ldw	r3,-12(fp)
 1017bd0:	e0bfff0b 	ldhu	r2,-4(fp)
 1017bd4:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 1017bd8:	e0bffd17 	ldw	r2,-12(fp)
 1017bdc:	10c00c03 	ldbu	r3,48(r2)
 1017be0:	00bff7c4 	movi	r2,-33
 1017be4:	1884703a 	and	r2,r3,r2
 1017be8:	1007883a 	mov	r3,r2
 1017bec:	e0bffd17 	ldw	r2,-12(fp)
 1017bf0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 1017bf4:	e0bffd17 	ldw	r2,-12(fp)
 1017bf8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 1017bfc:	e0bffd17 	ldw	r2,-12(fp)
 1017c00:	10800c03 	ldbu	r2,48(r2)
 1017c04:	10803fcc 	andi	r2,r2,255
 1017c08:	1004c03a 	cmpne	r2,r2,zero
 1017c0c:	10001f1e 	bne	r2,zero,1017c8c <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 1017c10:	e0bffd17 	ldw	r2,-12(fp)
 1017c14:	10c00d83 	ldbu	r3,54(r2)
 1017c18:	008040b4 	movhi	r2,258
 1017c1c:	108bcb04 	addi	r2,r2,12076
 1017c20:	10800003 	ldbu	r2,0(r2)
 1017c24:	1884b03a 	or	r2,r3,r2
 1017c28:	1007883a 	mov	r3,r2
 1017c2c:	008040b4 	movhi	r2,258
 1017c30:	108bcb04 	addi	r2,r2,12076
 1017c34:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1017c38:	e0bffd17 	ldw	r2,-12(fp)
 1017c3c:	10800d03 	ldbu	r2,52(r2)
 1017c40:	11003fcc 	andi	r4,r2,255
 1017c44:	e0bffd17 	ldw	r2,-12(fp)
 1017c48:	10800d03 	ldbu	r2,52(r2)
 1017c4c:	10c03fcc 	andi	r3,r2,255
 1017c50:	008040b4 	movhi	r2,258
 1017c54:	108bcb44 	addi	r2,r2,12077
 1017c58:	10c5883a 	add	r2,r2,r3
 1017c5c:	10c00003 	ldbu	r3,0(r2)
 1017c60:	e0bffd17 	ldw	r2,-12(fp)
 1017c64:	10800d43 	ldbu	r2,53(r2)
 1017c68:	1884b03a 	or	r2,r3,r2
 1017c6c:	1007883a 	mov	r3,r2
 1017c70:	008040b4 	movhi	r2,258
 1017c74:	108bcb44 	addi	r2,r2,12077
 1017c78:	1105883a 	add	r2,r2,r4
 1017c7c:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 1017c80:	00800044 	movi	r2,1
 1017c84:	e0bffc05 	stb	r2,-16(fp)
 1017c88:	00000106 	br	1017c90 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 1017c8c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 1017c90:	e13ffe17 	ldw	r4,-8(fp)
 1017c94:	1017cb00 	call	1017cb0 <OS_FlagUnlink>
    return (sched);
 1017c98:	e0bffc03 	ldbu	r2,-16(fp)
}
 1017c9c:	e037883a 	mov	sp,fp
 1017ca0:	dfc00117 	ldw	ra,4(sp)
 1017ca4:	df000017 	ldw	fp,0(sp)
 1017ca8:	dec00204 	addi	sp,sp,8
 1017cac:	f800283a 	ret

01017cb0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 1017cb0:	defffa04 	addi	sp,sp,-24
 1017cb4:	df000515 	stw	fp,20(sp)
 1017cb8:	df000504 	addi	fp,sp,20
 1017cbc:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 1017cc0:	e0bfff17 	ldw	r2,-4(fp)
 1017cc4:	10800117 	ldw	r2,4(r2)
 1017cc8:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 1017ccc:	e0bfff17 	ldw	r2,-4(fp)
 1017cd0:	10800017 	ldw	r2,0(r2)
 1017cd4:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 1017cd8:	e0bffc17 	ldw	r2,-16(fp)
 1017cdc:	1004c03a 	cmpne	r2,r2,zero
 1017ce0:	10000c1e 	bne	r2,zero,1017d14 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 1017ce4:	e0bfff17 	ldw	r2,-4(fp)
 1017ce8:	10800317 	ldw	r2,12(r2)
 1017cec:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 1017cf0:	e0fffd17 	ldw	r3,-12(fp)
 1017cf4:	e0bffb17 	ldw	r2,-20(fp)
 1017cf8:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 1017cfc:	e0bffb17 	ldw	r2,-20(fp)
 1017d00:	1005003a 	cmpeq	r2,r2,zero
 1017d04:	10000c1e 	bne	r2,zero,1017d38 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 1017d08:	e0bffb17 	ldw	r2,-20(fp)
 1017d0c:	10000115 	stw	zero,4(r2)
 1017d10:	00000906 	br	1017d38 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 1017d14:	e0fffc17 	ldw	r3,-16(fp)
 1017d18:	e0bffb17 	ldw	r2,-20(fp)
 1017d1c:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 1017d20:	e0bffb17 	ldw	r2,-20(fp)
 1017d24:	1005003a 	cmpeq	r2,r2,zero
 1017d28:	1000031e 	bne	r2,zero,1017d38 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 1017d2c:	e0fffb17 	ldw	r3,-20(fp)
 1017d30:	e0bffc17 	ldw	r2,-16(fp)
 1017d34:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 1017d38:	e0bfff17 	ldw	r2,-4(fp)
 1017d3c:	10800217 	ldw	r2,8(r2)
 1017d40:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 1017d44:	e0bffe17 	ldw	r2,-8(fp)
 1017d48:	10000a15 	stw	zero,40(r2)
#endif
}
 1017d4c:	e037883a 	mov	sp,fp
 1017d50:	df000017 	ldw	fp,0(sp)
 1017d54:	dec00104 	addi	sp,sp,4
 1017d58:	f800283a 	ret

01017d5c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 1017d5c:	defff304 	addi	sp,sp,-52
 1017d60:	df000c15 	stw	fp,48(sp)
 1017d64:	df000c04 	addi	fp,sp,48
 1017d68:	e13ffb15 	stw	r4,-20(fp)
 1017d6c:	e17ffc15 	stw	r5,-16(fp)
 1017d70:	e1bffd15 	stw	r6,-12(fp)
 1017d74:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1017d78:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1017d7c:	e0bffe17 	ldw	r2,-8(fp)
 1017d80:	1004c03a 	cmpne	r2,r2,zero
 1017d84:	1000021e 	bne	r2,zero,1017d90 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 1017d88:	e03fff15 	stw	zero,-4(fp)
 1017d8c:	00007506 	br	1017f64 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 1017d90:	e0bffb17 	ldw	r2,-20(fp)
 1017d94:	1004c03a 	cmpne	r2,r2,zero
 1017d98:	1000051e 	bne	r2,zero,1017db0 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 1017d9c:	e0fffe17 	ldw	r3,-8(fp)
 1017da0:	00801884 	movi	r2,98
 1017da4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1017da8:	e03fff15 	stw	zero,-4(fp)
 1017dac:	00006d06 	br	1017f64 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 1017db0:	e0bffb17 	ldw	r2,-20(fp)
 1017db4:	108000cc 	andi	r2,r2,3
 1017db8:	1005003a 	cmpeq	r2,r2,zero
 1017dbc:	1000051e 	bne	r2,zero,1017dd4 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 1017dc0:	e0fffe17 	ldw	r3,-8(fp)
 1017dc4:	00801884 	movi	r2,98
 1017dc8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1017dcc:	e03fff15 	stw	zero,-4(fp)
 1017dd0:	00006406 	br	1017f64 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 1017dd4:	e0bffc17 	ldw	r2,-16(fp)
 1017dd8:	108000a8 	cmpgeui	r2,r2,2
 1017ddc:	1000051e 	bne	r2,zero,1017df4 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 1017de0:	e0fffe17 	ldw	r3,-8(fp)
 1017de4:	008016c4 	movi	r2,91
 1017de8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1017dec:	e03fff15 	stw	zero,-4(fp)
 1017df0:	00005c06 	br	1017f64 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 1017df4:	e0bffd17 	ldw	r2,-12(fp)
 1017df8:	10800128 	cmpgeui	r2,r2,4
 1017dfc:	1000051e 	bne	r2,zero,1017e14 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 1017e00:	e0fffe17 	ldw	r3,-8(fp)
 1017e04:	00801704 	movi	r2,92
 1017e08:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1017e0c:	e03fff15 	stw	zero,-4(fp)
 1017e10:	00005406 	br	1017f64 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017e14:	0005303a 	rdctl	r2,status
 1017e18:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017e1c:	e0fff517 	ldw	r3,-44(fp)
 1017e20:	00bfff84 	movi	r2,-2
 1017e24:	1884703a 	and	r2,r3,r2
 1017e28:	1001703a 	wrctl	status,r2
  
  return context;
 1017e2c:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1017e30:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 1017e34:	008040b4 	movhi	r2,258
 1017e38:	108bc804 	addi	r2,r2,12064
 1017e3c:	10800017 	ldw	r2,0(r2)
 1017e40:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 1017e44:	008040b4 	movhi	r2,258
 1017e48:	108bc804 	addi	r2,r2,12064
 1017e4c:	10800017 	ldw	r2,0(r2)
 1017e50:	1005003a 	cmpeq	r2,r2,zero
 1017e54:	1000081e 	bne	r2,zero,1017e78 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 1017e58:	008040b4 	movhi	r2,258
 1017e5c:	108bc804 	addi	r2,r2,12064
 1017e60:	10800017 	ldw	r2,0(r2)
 1017e64:	10800117 	ldw	r2,4(r2)
 1017e68:	1007883a 	mov	r3,r2
 1017e6c:	008040b4 	movhi	r2,258
 1017e70:	108bc804 	addi	r2,r2,12064
 1017e74:	10c00015 	stw	r3,0(r2)
 1017e78:	e0bff617 	ldw	r2,-40(fp)
 1017e7c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017e80:	e0bff417 	ldw	r2,-48(fp)
 1017e84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 1017e88:	e0bffa17 	ldw	r2,-24(fp)
 1017e8c:	1004c03a 	cmpne	r2,r2,zero
 1017e90:	1000051e 	bne	r2,zero,1017ea8 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 1017e94:	e0fffe17 	ldw	r3,-8(fp)
 1017e98:	00801684 	movi	r2,90
 1017e9c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1017ea0:	e03fff15 	stw	zero,-4(fp)
 1017ea4:	00002f06 	br	1017f64 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 1017ea8:	e0bffb17 	ldw	r2,-20(fp)
 1017eac:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 1017eb0:	e0bffb17 	ldw	r2,-20(fp)
 1017eb4:	1007883a 	mov	r3,r2
 1017eb8:	e0bffd17 	ldw	r2,-12(fp)
 1017ebc:	1885883a 	add	r2,r3,r2
 1017ec0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 1017ec4:	e03ff715 	stw	zero,-36(fp)
 1017ec8:	00000d06 	br	1017f00 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 1017ecc:	e0fff817 	ldw	r3,-32(fp)
 1017ed0:	e0bff917 	ldw	r2,-28(fp)
 1017ed4:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 1017ed8:	e0bff917 	ldw	r2,-28(fp)
 1017edc:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 1017ee0:	e0bff917 	ldw	r2,-28(fp)
 1017ee4:	1007883a 	mov	r3,r2
 1017ee8:	e0bffd17 	ldw	r2,-12(fp)
 1017eec:	1885883a 	add	r2,r3,r2
 1017ef0:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 1017ef4:	e0bff717 	ldw	r2,-36(fp)
 1017ef8:	10800044 	addi	r2,r2,1
 1017efc:	e0bff715 	stw	r2,-36(fp)
 1017f00:	e0bffc17 	ldw	r2,-16(fp)
 1017f04:	10ffffc4 	addi	r3,r2,-1
 1017f08:	e0bff717 	ldw	r2,-36(fp)
 1017f0c:	10ffef36 	bltu	r2,r3,1017ecc <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 1017f10:	e0bff817 	ldw	r2,-32(fp)
 1017f14:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 1017f18:	e0fffa17 	ldw	r3,-24(fp)
 1017f1c:	e0bffb17 	ldw	r2,-20(fp)
 1017f20:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 1017f24:	e0fffa17 	ldw	r3,-24(fp)
 1017f28:	e0bffb17 	ldw	r2,-20(fp)
 1017f2c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 1017f30:	e0fffa17 	ldw	r3,-24(fp)
 1017f34:	e0bffc17 	ldw	r2,-16(fp)
 1017f38:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 1017f3c:	e0fffa17 	ldw	r3,-24(fp)
 1017f40:	e0bffc17 	ldw	r2,-16(fp)
 1017f44:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 1017f48:	e0fffa17 	ldw	r3,-24(fp)
 1017f4c:	e0bffd17 	ldw	r2,-12(fp)
 1017f50:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 1017f54:	e0bffe17 	ldw	r2,-8(fp)
 1017f58:	10000005 	stb	zero,0(r2)
    return (pmem);
 1017f5c:	e0bffa17 	ldw	r2,-24(fp)
 1017f60:	e0bfff15 	stw	r2,-4(fp)
 1017f64:	e0bfff17 	ldw	r2,-4(fp)
}
 1017f68:	e037883a 	mov	sp,fp
 1017f6c:	df000017 	ldw	fp,0(sp)
 1017f70:	dec00104 	addi	sp,sp,4
 1017f74:	f800283a 	ret

01017f78 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 1017f78:	defff704 	addi	sp,sp,-36
 1017f7c:	df000815 	stw	fp,32(sp)
 1017f80:	df000804 	addi	fp,sp,32
 1017f84:	e13ffd15 	stw	r4,-12(fp)
 1017f88:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1017f8c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1017f90:	e0bffe17 	ldw	r2,-8(fp)
 1017f94:	1004c03a 	cmpne	r2,r2,zero
 1017f98:	1000021e 	bne	r2,zero,1017fa4 <OSMemGet+0x2c>
        return ((void *)0);
 1017f9c:	e03fff15 	stw	zero,-4(fp)
 1017fa0:	00003106 	br	1018068 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 1017fa4:	e0bffd17 	ldw	r2,-12(fp)
 1017fa8:	1004c03a 	cmpne	r2,r2,zero
 1017fac:	1000051e 	bne	r2,zero,1017fc4 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 1017fb0:	e0fffe17 	ldw	r3,-8(fp)
 1017fb4:	00801804 	movi	r2,96
 1017fb8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1017fbc:	e03fff15 	stw	zero,-4(fp)
 1017fc0:	00002906 	br	1018068 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017fc4:	0005303a 	rdctl	r2,status
 1017fc8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017fcc:	e0fffa17 	ldw	r3,-24(fp)
 1017fd0:	00bfff84 	movi	r2,-2
 1017fd4:	1884703a 	and	r2,r3,r2
 1017fd8:	1001703a 	wrctl	status,r2
  
  return context;
 1017fdc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1017fe0:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 1017fe4:	e0bffd17 	ldw	r2,-12(fp)
 1017fe8:	10800417 	ldw	r2,16(r2)
 1017fec:	1005003a 	cmpeq	r2,r2,zero
 1017ff0:	1000151e 	bne	r2,zero,1018048 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 1017ff4:	e0bffd17 	ldw	r2,-12(fp)
 1017ff8:	10800117 	ldw	r2,4(r2)
 1017ffc:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 1018000:	e0bffc17 	ldw	r2,-16(fp)
 1018004:	10c00017 	ldw	r3,0(r2)
 1018008:	e0bffd17 	ldw	r2,-12(fp)
 101800c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 1018010:	e0bffd17 	ldw	r2,-12(fp)
 1018014:	10800417 	ldw	r2,16(r2)
 1018018:	10ffffc4 	addi	r3,r2,-1
 101801c:	e0bffd17 	ldw	r2,-12(fp)
 1018020:	10c00415 	stw	r3,16(r2)
 1018024:	e0bffb17 	ldw	r2,-20(fp)
 1018028:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101802c:	e0bff917 	ldw	r2,-28(fp)
 1018030:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 1018034:	e0bffe17 	ldw	r2,-8(fp)
 1018038:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 101803c:	e0bffc17 	ldw	r2,-16(fp)
 1018040:	e0bfff15 	stw	r2,-4(fp)
 1018044:	00000806 	br	1018068 <OSMemGet+0xf0>
 1018048:	e0bffb17 	ldw	r2,-20(fp)
 101804c:	e0bff815 	stw	r2,-32(fp)
 1018050:	e0bff817 	ldw	r2,-32(fp)
 1018054:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 1018058:	e0fffe17 	ldw	r3,-8(fp)
 101805c:	00801744 	movi	r2,93
 1018060:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 1018064:	e03fff15 	stw	zero,-4(fp)
 1018068:	e0bfff17 	ldw	r2,-4(fp)
}
 101806c:	e037883a 	mov	sp,fp
 1018070:	df000017 	ldw	fp,0(sp)
 1018074:	dec00104 	addi	sp,sp,4
 1018078:	f800283a 	ret

0101807c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 101807c:	defff604 	addi	sp,sp,-40
 1018080:	dfc00915 	stw	ra,36(sp)
 1018084:	df000815 	stw	fp,32(sp)
 1018088:	df000804 	addi	fp,sp,32
 101808c:	e13ffc15 	stw	r4,-16(fp)
 1018090:	e17ffd15 	stw	r5,-12(fp)
 1018094:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1018098:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101809c:	e0bffe17 	ldw	r2,-8(fp)
 10180a0:	1004c03a 	cmpne	r2,r2,zero
 10180a4:	1000021e 	bne	r2,zero,10180b0 <OSMemNameGet+0x34>
        return (0);
 10180a8:	e03fff15 	stw	zero,-4(fp)
 10180ac:	00003006 	br	1018170 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 10180b0:	e0bffc17 	ldw	r2,-16(fp)
 10180b4:	1004c03a 	cmpne	r2,r2,zero
 10180b8:	1000051e 	bne	r2,zero,10180d0 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 10180bc:	e0fffe17 	ldw	r3,-8(fp)
 10180c0:	00801804 	movi	r2,96
 10180c4:	18800005 	stb	r2,0(r3)
        return (0);
 10180c8:	e03fff15 	stw	zero,-4(fp)
 10180cc:	00002806 	br	1018170 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 10180d0:	e0bffd17 	ldw	r2,-12(fp)
 10180d4:	1004c03a 	cmpne	r2,r2,zero
 10180d8:	1000051e 	bne	r2,zero,10180f0 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 10180dc:	e0fffe17 	ldw	r3,-8(fp)
 10180e0:	00800304 	movi	r2,12
 10180e4:	18800005 	stb	r2,0(r3)
        return (0);
 10180e8:	e03fff15 	stw	zero,-4(fp)
 10180ec:	00002006 	br	1018170 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10180f0:	008040b4 	movhi	r2,258
 10180f4:	108bcd04 	addi	r2,r2,12084
 10180f8:	10800003 	ldbu	r2,0(r2)
 10180fc:	10803fcc 	andi	r2,r2,255
 1018100:	1005003a 	cmpeq	r2,r2,zero
 1018104:	1000051e 	bne	r2,zero,101811c <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 1018108:	e0fffe17 	ldw	r3,-8(fp)
 101810c:	00800444 	movi	r2,17
 1018110:	18800005 	stb	r2,0(r3)
        return (0);
 1018114:	e03fff15 	stw	zero,-4(fp)
 1018118:	00001506 	br	1018170 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101811c:	0005303a 	rdctl	r2,status
 1018120:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018124:	e0fff917 	ldw	r3,-28(fp)
 1018128:	00bfff84 	movi	r2,-2
 101812c:	1884703a 	and	r2,r3,r2
 1018130:	1001703a 	wrctl	status,r2
  
  return context;
 1018134:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1018138:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 101813c:	e0bffc17 	ldw	r2,-16(fp)
 1018140:	11400504 	addi	r5,r2,20
 1018144:	e13ffd17 	ldw	r4,-12(fp)
 1018148:	1015cf00 	call	1015cf0 <OS_StrCopy>
 101814c:	e0bffb05 	stb	r2,-20(fp)
 1018150:	e0bffa17 	ldw	r2,-24(fp)
 1018154:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018158:	e0bff817 	ldw	r2,-32(fp)
 101815c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1018160:	e0bffe17 	ldw	r2,-8(fp)
 1018164:	10000005 	stb	zero,0(r2)
    return (len);
 1018168:	e0bffb03 	ldbu	r2,-20(fp)
 101816c:	e0bfff15 	stw	r2,-4(fp)
 1018170:	e0bfff17 	ldw	r2,-4(fp)
}
 1018174:	e037883a 	mov	sp,fp
 1018178:	dfc00117 	ldw	ra,4(sp)
 101817c:	df000017 	ldw	fp,0(sp)
 1018180:	dec00204 	addi	sp,sp,8
 1018184:	f800283a 	ret

01018188 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 1018188:	defff604 	addi	sp,sp,-40
 101818c:	dfc00915 	stw	ra,36(sp)
 1018190:	df000815 	stw	fp,32(sp)
 1018194:	df000804 	addi	fp,sp,32
 1018198:	e13ffd15 	stw	r4,-12(fp)
 101819c:	e17ffe15 	stw	r5,-8(fp)
 10181a0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10181a4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 10181a8:	e0bfff17 	ldw	r2,-4(fp)
 10181ac:	1005003a 	cmpeq	r2,r2,zero
 10181b0:	1000381e 	bne	r2,zero,1018294 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 10181b4:	e0bffd17 	ldw	r2,-12(fp)
 10181b8:	1004c03a 	cmpne	r2,r2,zero
 10181bc:	1000041e 	bne	r2,zero,10181d0 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 10181c0:	e0ffff17 	ldw	r3,-4(fp)
 10181c4:	00801804 	movi	r2,96
 10181c8:	18800005 	stb	r2,0(r3)
        return;
 10181cc:	00003106 	br	1018294 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 10181d0:	e0bffe17 	ldw	r2,-8(fp)
 10181d4:	1004c03a 	cmpne	r2,r2,zero
 10181d8:	1000041e 	bne	r2,zero,10181ec <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 10181dc:	e0ffff17 	ldw	r3,-4(fp)
 10181e0:	00800304 	movi	r2,12
 10181e4:	18800005 	stb	r2,0(r3)
        return;
 10181e8:	00002a06 	br	1018294 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10181ec:	008040b4 	movhi	r2,258
 10181f0:	108bcd04 	addi	r2,r2,12084
 10181f4:	10800003 	ldbu	r2,0(r2)
 10181f8:	10803fcc 	andi	r2,r2,255
 10181fc:	1005003a 	cmpeq	r2,r2,zero
 1018200:	1000041e 	bne	r2,zero,1018214 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 1018204:	e0ffff17 	ldw	r3,-4(fp)
 1018208:	00800484 	movi	r2,18
 101820c:	18800005 	stb	r2,0(r3)
        return;
 1018210:	00002006 	br	1018294 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018214:	0005303a 	rdctl	r2,status
 1018218:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101821c:	e0fffa17 	ldw	r3,-24(fp)
 1018220:	00bfff84 	movi	r2,-2
 1018224:	1884703a 	and	r2,r3,r2
 1018228:	1001703a 	wrctl	status,r2
  
  return context;
 101822c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1018230:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 1018234:	e13ffe17 	ldw	r4,-8(fp)
 1018238:	1015d700 	call	1015d70 <OS_StrLen>
 101823c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 1018240:	e0bffc03 	ldbu	r2,-16(fp)
 1018244:	10800830 	cmpltui	r2,r2,32
 1018248:	1000081e 	bne	r2,zero,101826c <OSMemNameSet+0xe4>
 101824c:	e0bffb17 	ldw	r2,-20(fp)
 1018250:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018254:	e0bff917 	ldw	r2,-28(fp)
 1018258:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 101825c:	e0ffff17 	ldw	r3,-4(fp)
 1018260:	008018c4 	movi	r2,99
 1018264:	18800005 	stb	r2,0(r3)
        return;
 1018268:	00000a06 	br	1018294 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 101826c:	e0bffd17 	ldw	r2,-12(fp)
 1018270:	11000504 	addi	r4,r2,20
 1018274:	e17ffe17 	ldw	r5,-8(fp)
 1018278:	1015cf00 	call	1015cf0 <OS_StrCopy>
 101827c:	e0bffb17 	ldw	r2,-20(fp)
 1018280:	e0bff815 	stw	r2,-32(fp)
 1018284:	e0bff817 	ldw	r2,-32(fp)
 1018288:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101828c:	e0bfff17 	ldw	r2,-4(fp)
 1018290:	10000005 	stb	zero,0(r2)
}
 1018294:	e037883a 	mov	sp,fp
 1018298:	dfc00117 	ldw	ra,4(sp)
 101829c:	df000017 	ldw	fp,0(sp)
 10182a0:	dec00204 	addi	sp,sp,8
 10182a4:	f800283a 	ret

010182a8 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 10182a8:	defff804 	addi	sp,sp,-32
 10182ac:	df000715 	stw	fp,28(sp)
 10182b0:	df000704 	addi	fp,sp,28
 10182b4:	e13ffd15 	stw	r4,-12(fp)
 10182b8:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10182bc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 10182c0:	e0bffd17 	ldw	r2,-12(fp)
 10182c4:	1004c03a 	cmpne	r2,r2,zero
 10182c8:	1000031e 	bne	r2,zero,10182d8 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 10182cc:	00801804 	movi	r2,96
 10182d0:	e0bfff15 	stw	r2,-4(fp)
 10182d4:	00002b06 	br	1018384 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 10182d8:	e0bffe17 	ldw	r2,-8(fp)
 10182dc:	1004c03a 	cmpne	r2,r2,zero
 10182e0:	1000031e 	bne	r2,zero,10182f0 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 10182e4:	008017c4 	movi	r2,95
 10182e8:	e0bfff15 	stw	r2,-4(fp)
 10182ec:	00002506 	br	1018384 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10182f0:	0005303a 	rdctl	r2,status
 10182f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10182f8:	e0fffb17 	ldw	r3,-20(fp)
 10182fc:	00bfff84 	movi	r2,-2
 1018300:	1884703a 	and	r2,r3,r2
 1018304:	1001703a 	wrctl	status,r2
  
  return context;
 1018308:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101830c:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 1018310:	e0bffd17 	ldw	r2,-12(fp)
 1018314:	10c00417 	ldw	r3,16(r2)
 1018318:	e0bffd17 	ldw	r2,-12(fp)
 101831c:	10800317 	ldw	r2,12(r2)
 1018320:	18800736 	bltu	r3,r2,1018340 <OSMemPut+0x98>
 1018324:	e0bffc17 	ldw	r2,-16(fp)
 1018328:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101832c:	e0bffa17 	ldw	r2,-24(fp)
 1018330:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 1018334:	00801784 	movi	r2,94
 1018338:	e0bfff15 	stw	r2,-4(fp)
 101833c:	00001106 	br	1018384 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 1018340:	e0fffe17 	ldw	r3,-8(fp)
 1018344:	e0bffd17 	ldw	r2,-12(fp)
 1018348:	10800117 	ldw	r2,4(r2)
 101834c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 1018350:	e0fffd17 	ldw	r3,-12(fp)
 1018354:	e0bffe17 	ldw	r2,-8(fp)
 1018358:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 101835c:	e0bffd17 	ldw	r2,-12(fp)
 1018360:	10800417 	ldw	r2,16(r2)
 1018364:	10c00044 	addi	r3,r2,1
 1018368:	e0bffd17 	ldw	r2,-12(fp)
 101836c:	10c00415 	stw	r3,16(r2)
 1018370:	e0bffc17 	ldw	r2,-16(fp)
 1018374:	e0bff915 	stw	r2,-28(fp)
 1018378:	e0bff917 	ldw	r2,-28(fp)
 101837c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 1018380:	e03fff15 	stw	zero,-4(fp)
 1018384:	e0bfff17 	ldw	r2,-4(fp)
}
 1018388:	e037883a 	mov	sp,fp
 101838c:	df000017 	ldw	fp,0(sp)
 1018390:	dec00104 	addi	sp,sp,4
 1018394:	f800283a 	ret

01018398 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 1018398:	defff904 	addi	sp,sp,-28
 101839c:	df000615 	stw	fp,24(sp)
 10183a0:	df000604 	addi	fp,sp,24
 10183a4:	e13ffd15 	stw	r4,-12(fp)
 10183a8:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10183ac:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 10183b0:	e0bffd17 	ldw	r2,-12(fp)
 10183b4:	1004c03a 	cmpne	r2,r2,zero
 10183b8:	1000031e 	bne	r2,zero,10183c8 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 10183bc:	00801804 	movi	r2,96
 10183c0:	e0bfff15 	stw	r2,-4(fp)
 10183c4:	00002e06 	br	1018480 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 10183c8:	e0bffe17 	ldw	r2,-8(fp)
 10183cc:	1004c03a 	cmpne	r2,r2,zero
 10183d0:	1000031e 	bne	r2,zero,10183e0 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 10183d4:	00801844 	movi	r2,97
 10183d8:	e0bfff15 	stw	r2,-4(fp)
 10183dc:	00002806 	br	1018480 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10183e0:	0005303a 	rdctl	r2,status
 10183e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10183e8:	e0fffb17 	ldw	r3,-20(fp)
 10183ec:	00bfff84 	movi	r2,-2
 10183f0:	1884703a 	and	r2,r3,r2
 10183f4:	1001703a 	wrctl	status,r2
  
  return context;
 10183f8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10183fc:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 1018400:	e0bffd17 	ldw	r2,-12(fp)
 1018404:	10c00017 	ldw	r3,0(r2)
 1018408:	e0bffe17 	ldw	r2,-8(fp)
 101840c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 1018410:	e0bffd17 	ldw	r2,-12(fp)
 1018414:	10c00117 	ldw	r3,4(r2)
 1018418:	e0bffe17 	ldw	r2,-8(fp)
 101841c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 1018420:	e0bffd17 	ldw	r2,-12(fp)
 1018424:	10c00217 	ldw	r3,8(r2)
 1018428:	e0bffe17 	ldw	r2,-8(fp)
 101842c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 1018430:	e0bffd17 	ldw	r2,-12(fp)
 1018434:	10c00317 	ldw	r3,12(r2)
 1018438:	e0bffe17 	ldw	r2,-8(fp)
 101843c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 1018440:	e0bffd17 	ldw	r2,-12(fp)
 1018444:	10c00417 	ldw	r3,16(r2)
 1018448:	e0bffe17 	ldw	r2,-8(fp)
 101844c:	10c00415 	stw	r3,16(r2)
 1018450:	e0bffc17 	ldw	r2,-16(fp)
 1018454:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018458:	e0bffa17 	ldw	r2,-24(fp)
 101845c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 1018460:	e0bffe17 	ldw	r2,-8(fp)
 1018464:	10c00317 	ldw	r3,12(r2)
 1018468:	e0bffe17 	ldw	r2,-8(fp)
 101846c:	10800417 	ldw	r2,16(r2)
 1018470:	1887c83a 	sub	r3,r3,r2
 1018474:	e0bffe17 	ldw	r2,-8(fp)
 1018478:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 101847c:	e03fff15 	stw	zero,-4(fp)
 1018480:	e0bfff17 	ldw	r2,-4(fp)
}
 1018484:	e037883a 	mov	sp,fp
 1018488:	df000017 	ldw	fp,0(sp)
 101848c:	dec00104 	addi	sp,sp,4
 1018490:	f800283a 	ret

01018494 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 1018494:	defffc04 	addi	sp,sp,-16
 1018498:	dfc00315 	stw	ra,12(sp)
 101849c:	df000215 	stw	fp,8(sp)
 10184a0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 10184a4:	010040b4 	movhi	r4,258
 10184a8:	211ec004 	addi	r4,r4,31488
 10184ac:	01430c04 	movi	r5,3120
 10184b0:	1015aec0 	call	1015aec <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 10184b4:	008040b4 	movhi	r2,258
 10184b8:	109ec004 	addi	r2,r2,31488
 10184bc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 10184c0:	e03ffe0d 	sth	zero,-8(fp)
 10184c4:	00001306 	br	1018514 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 10184c8:	e0bffe0b 	ldhu	r2,-8(fp)
 10184cc:	10800d24 	muli	r2,r2,52
 10184d0:	1007883a 	mov	r3,r2
 10184d4:	008040b4 	movhi	r2,258
 10184d8:	109ecd04 	addi	r2,r2,31540
 10184dc:	1887883a 	add	r3,r3,r2
 10184e0:	e0bfff17 	ldw	r2,-4(fp)
 10184e4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 10184e8:	e0ffff17 	ldw	r3,-4(fp)
 10184ec:	00800fc4 	movi	r2,63
 10184f0:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 10184f4:	e0bfff17 	ldw	r2,-4(fp)
 10184f8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 10184fc:	e0bfff17 	ldw	r2,-4(fp)
 1018500:	10800d04 	addi	r2,r2,52
 1018504:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 1018508:	e0bffe0b 	ldhu	r2,-8(fp)
 101850c:	10800044 	addi	r2,r2,1
 1018510:	e0bffe0d 	sth	r2,-8(fp)
 1018514:	e0bffe0b 	ldhu	r2,-8(fp)
 1018518:	10800ef0 	cmpltui	r2,r2,59
 101851c:	103fea1e 	bne	r2,zero,10184c8 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 1018520:	e0bfff17 	ldw	r2,-4(fp)
 1018524:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 1018528:	e0ffff17 	ldw	r3,-4(fp)
 101852c:	00800fc4 	movi	r2,63
 1018530:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 1018534:	e0bfff17 	ldw	r2,-4(fp)
 1018538:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 101853c:	00c040b4 	movhi	r3,258
 1018540:	18cbc804 	addi	r3,r3,12064
 1018544:	008040b4 	movhi	r2,258
 1018548:	109ec004 	addi	r2,r2,31488
 101854c:	18800015 	stw	r2,0(r3)
#endif
}
 1018550:	e037883a 	mov	sp,fp
 1018554:	dfc00117 	ldw	ra,4(sp)
 1018558:	df000017 	ldw	fp,0(sp)
 101855c:	dec00204 	addi	sp,sp,8
 1018560:	f800283a 	ret

01018564 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 1018564:	defff704 	addi	sp,sp,-36
 1018568:	df000815 	stw	fp,32(sp)
 101856c:	df000804 	addi	fp,sp,32
 1018570:	e13ffd15 	stw	r4,-12(fp)
 1018574:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1018578:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101857c:	e0bffe17 	ldw	r2,-8(fp)
 1018580:	1004c03a 	cmpne	r2,r2,zero
 1018584:	1000021e 	bne	r2,zero,1018590 <OSQAccept+0x2c>
        return ((void *)0);
 1018588:	e03fff15 	stw	zero,-4(fp)
 101858c:	00004506 	br	10186a4 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 1018590:	e0bffd17 	ldw	r2,-12(fp)
 1018594:	1004c03a 	cmpne	r2,r2,zero
 1018598:	1000051e 	bne	r2,zero,10185b0 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 101859c:	e0fffe17 	ldw	r3,-8(fp)
 10185a0:	00800104 	movi	r2,4
 10185a4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 10185a8:	e03fff15 	stw	zero,-4(fp)
 10185ac:	00003d06 	br	10186a4 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 10185b0:	e0bffd17 	ldw	r2,-12(fp)
 10185b4:	10800003 	ldbu	r2,0(r2)
 10185b8:	10803fcc 	andi	r2,r2,255
 10185bc:	108000a0 	cmpeqi	r2,r2,2
 10185c0:	1000051e 	bne	r2,zero,10185d8 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 10185c4:	e0fffe17 	ldw	r3,-8(fp)
 10185c8:	00800044 	movi	r2,1
 10185cc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 10185d0:	e03fff15 	stw	zero,-4(fp)
 10185d4:	00003306 	br	10186a4 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10185d8:	0005303a 	rdctl	r2,status
 10185dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10185e0:	e0fff917 	ldw	r3,-28(fp)
 10185e4:	00bfff84 	movi	r2,-2
 10185e8:	1884703a 	and	r2,r3,r2
 10185ec:	1001703a 	wrctl	status,r2
  
  return context;
 10185f0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 10185f4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 10185f8:	e0bffd17 	ldw	r2,-12(fp)
 10185fc:	10800117 	ldw	r2,4(r2)
 1018600:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 1018604:	e0bffb17 	ldw	r2,-20(fp)
 1018608:	1080058b 	ldhu	r2,22(r2)
 101860c:	10bfffcc 	andi	r2,r2,65535
 1018610:	1005003a 	cmpeq	r2,r2,zero
 1018614:	1000191e 	bne	r2,zero,101867c <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 1018618:	e0bffb17 	ldw	r2,-20(fp)
 101861c:	10c00417 	ldw	r3,16(r2)
 1018620:	18800017 	ldw	r2,0(r3)
 1018624:	e0bffc15 	stw	r2,-16(fp)
 1018628:	18c00104 	addi	r3,r3,4
 101862c:	e0bffb17 	ldw	r2,-20(fp)
 1018630:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 1018634:	e0bffb17 	ldw	r2,-20(fp)
 1018638:	1080058b 	ldhu	r2,22(r2)
 101863c:	10bfffc4 	addi	r2,r2,-1
 1018640:	1007883a 	mov	r3,r2
 1018644:	e0bffb17 	ldw	r2,-20(fp)
 1018648:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 101864c:	e0bffb17 	ldw	r2,-20(fp)
 1018650:	10c00417 	ldw	r3,16(r2)
 1018654:	e0bffb17 	ldw	r2,-20(fp)
 1018658:	10800217 	ldw	r2,8(r2)
 101865c:	1880041e 	bne	r3,r2,1018670 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 1018660:	e0bffb17 	ldw	r2,-20(fp)
 1018664:	10c00117 	ldw	r3,4(r2)
 1018668:	e0bffb17 	ldw	r2,-20(fp)
 101866c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 1018670:	e0bffe17 	ldw	r2,-8(fp)
 1018674:	10000005 	stb	zero,0(r2)
 1018678:	00000406 	br	101868c <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 101867c:	e0fffe17 	ldw	r3,-8(fp)
 1018680:	008007c4 	movi	r2,31
 1018684:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 1018688:	e03ffc15 	stw	zero,-16(fp)
 101868c:	e0bffa17 	ldw	r2,-24(fp)
 1018690:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018694:	e0bff817 	ldw	r2,-32(fp)
 1018698:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 101869c:	e0bffc17 	ldw	r2,-16(fp)
 10186a0:	e0bfff15 	stw	r2,-4(fp)
 10186a4:	e0bfff17 	ldw	r2,-4(fp)
}
 10186a8:	e037883a 	mov	sp,fp
 10186ac:	df000017 	ldw	fp,0(sp)
 10186b0:	dec00104 	addi	sp,sp,4
 10186b4:	f800283a 	ret

010186b8 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 10186b8:	defff304 	addi	sp,sp,-52
 10186bc:	dfc00c15 	stw	ra,48(sp)
 10186c0:	df000b15 	stw	fp,44(sp)
 10186c4:	df000b04 	addi	fp,sp,44
 10186c8:	e13ffd15 	stw	r4,-12(fp)
 10186cc:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10186d0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 10186d4:	008040b4 	movhi	r2,258
 10186d8:	108bcd04 	addi	r2,r2,12084
 10186dc:	10800003 	ldbu	r2,0(r2)
 10186e0:	10803fcc 	andi	r2,r2,255
 10186e4:	1005003a 	cmpeq	r2,r2,zero
 10186e8:	1000021e 	bne	r2,zero,10186f4 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 10186ec:	e03fff15 	stw	zero,-4(fp)
 10186f0:	00007006 	br	10188b4 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10186f4:	0005303a 	rdctl	r2,status
 10186f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10186fc:	e0fff917 	ldw	r3,-28(fp)
 1018700:	00bfff84 	movi	r2,-2
 1018704:	1884703a 	and	r2,r3,r2
 1018708:	1001703a 	wrctl	status,r2
  
  return context;
 101870c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1018710:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 1018714:	008040b4 	movhi	r2,258
 1018718:	108bcc04 	addi	r2,r2,12080
 101871c:	10800017 	ldw	r2,0(r2)
 1018720:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 1018724:	008040b4 	movhi	r2,258
 1018728:	108bcc04 	addi	r2,r2,12080
 101872c:	10800017 	ldw	r2,0(r2)
 1018730:	1005003a 	cmpeq	r2,r2,zero
 1018734:	1000081e 	bne	r2,zero,1018758 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 1018738:	008040b4 	movhi	r2,258
 101873c:	108bcc04 	addi	r2,r2,12080
 1018740:	10800017 	ldw	r2,0(r2)
 1018744:	10800117 	ldw	r2,4(r2)
 1018748:	1007883a 	mov	r3,r2
 101874c:	008040b4 	movhi	r2,258
 1018750:	108bcc04 	addi	r2,r2,12080
 1018754:	10c00015 	stw	r3,0(r2)
 1018758:	e0bffa17 	ldw	r2,-24(fp)
 101875c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018760:	e0bff817 	ldw	r2,-32(fp)
 1018764:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 1018768:	e0bffc17 	ldw	r2,-16(fp)
 101876c:	1005003a 	cmpeq	r2,r2,zero
 1018770:	10004e1e 	bne	r2,zero,10188ac <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018774:	0005303a 	rdctl	r2,status
 1018778:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101877c:	e0fff717 	ldw	r3,-36(fp)
 1018780:	00bfff84 	movi	r2,-2
 1018784:	1884703a 	and	r2,r3,r2
 1018788:	1001703a 	wrctl	status,r2
  
  return context;
 101878c:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 1018790:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 1018794:	008040b4 	movhi	r2,258
 1018798:	108bca04 	addi	r2,r2,12072
 101879c:	10800017 	ldw	r2,0(r2)
 10187a0:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 10187a4:	e0bffb17 	ldw	r2,-20(fp)
 10187a8:	1005003a 	cmpeq	r2,r2,zero
 10187ac:	1000311e 	bne	r2,zero,1018874 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 10187b0:	008040b4 	movhi	r2,258
 10187b4:	108bca04 	addi	r2,r2,12072
 10187b8:	10800017 	ldw	r2,0(r2)
 10187bc:	10c00017 	ldw	r3,0(r2)
 10187c0:	008040b4 	movhi	r2,258
 10187c4:	108bca04 	addi	r2,r2,12072
 10187c8:	10c00015 	stw	r3,0(r2)
 10187cc:	e0bffa17 	ldw	r2,-24(fp)
 10187d0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10187d4:	e0bff617 	ldw	r2,-40(fp)
 10187d8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 10187dc:	e0fffb17 	ldw	r3,-20(fp)
 10187e0:	e0bffd17 	ldw	r2,-12(fp)
 10187e4:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 10187e8:	e0bffe0b 	ldhu	r2,-8(fp)
 10187ec:	1085883a 	add	r2,r2,r2
 10187f0:	1085883a 	add	r2,r2,r2
 10187f4:	1007883a 	mov	r3,r2
 10187f8:	e0bffd17 	ldw	r2,-12(fp)
 10187fc:	1887883a 	add	r3,r3,r2
 1018800:	e0bffb17 	ldw	r2,-20(fp)
 1018804:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 1018808:	e0fffb17 	ldw	r3,-20(fp)
 101880c:	e0bffd17 	ldw	r2,-12(fp)
 1018810:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 1018814:	e0fffb17 	ldw	r3,-20(fp)
 1018818:	e0bffd17 	ldw	r2,-12(fp)
 101881c:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 1018820:	e0fffb17 	ldw	r3,-20(fp)
 1018824:	e0bffe0b 	ldhu	r2,-8(fp)
 1018828:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 101882c:	e0bffb17 	ldw	r2,-20(fp)
 1018830:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 1018834:	e0fffc17 	ldw	r3,-16(fp)
 1018838:	00800084 	movi	r2,2
 101883c:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 1018840:	e0bffc17 	ldw	r2,-16(fp)
 1018844:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 1018848:	e0fffc17 	ldw	r3,-16(fp)
 101884c:	e0bffb17 	ldw	r2,-20(fp)
 1018850:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 1018854:	e0fffc17 	ldw	r3,-16(fp)
 1018858:	00800fc4 	movi	r2,63
 101885c:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 1018860:	e0bffc17 	ldw	r2,-16(fp)
 1018864:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 1018868:	e13ffc17 	ldw	r4,-16(fp)
 101886c:	10157200 	call	1015720 <OS_EventWaitListInit>
 1018870:	00000e06 	br	10188ac <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 1018874:	008040b4 	movhi	r2,258
 1018878:	108bcc04 	addi	r2,r2,12080
 101887c:	10c00017 	ldw	r3,0(r2)
 1018880:	e0bffc17 	ldw	r2,-16(fp)
 1018884:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 1018888:	00c040b4 	movhi	r3,258
 101888c:	18cbcc04 	addi	r3,r3,12080
 1018890:	e0bffc17 	ldw	r2,-16(fp)
 1018894:	18800015 	stw	r2,0(r3)
 1018898:	e0bffa17 	ldw	r2,-24(fp)
 101889c:	e0bff515 	stw	r2,-44(fp)
 10188a0:	e0bff517 	ldw	r2,-44(fp)
 10188a4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 10188a8:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 10188ac:	e0bffc17 	ldw	r2,-16(fp)
 10188b0:	e0bfff15 	stw	r2,-4(fp)
 10188b4:	e0bfff17 	ldw	r2,-4(fp)
}
 10188b8:	e037883a 	mov	sp,fp
 10188bc:	dfc00117 	ldw	ra,4(sp)
 10188c0:	df000017 	ldw	fp,0(sp)
 10188c4:	dec00204 	addi	sp,sp,8
 10188c8:	f800283a 	ret

010188cc <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 10188cc:	defff004 	addi	sp,sp,-64
 10188d0:	dfc00f15 	stw	ra,60(sp)
 10188d4:	df000e15 	stw	fp,56(sp)
 10188d8:	df000e04 	addi	fp,sp,56
 10188dc:	e13ffb15 	stw	r4,-20(fp)
 10188e0:	e1bffd15 	stw	r6,-12(fp)
 10188e4:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 10188e8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 10188ec:	e0bffd17 	ldw	r2,-12(fp)
 10188f0:	1004c03a 	cmpne	r2,r2,zero
 10188f4:	1000031e 	bne	r2,zero,1018904 <OSQDel+0x38>
        return (pevent);
 10188f8:	e0bffb17 	ldw	r2,-20(fp)
 10188fc:	e0bfff15 	stw	r2,-4(fp)
 1018900:	0000ac06 	br	1018bb4 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1018904:	e0bffb17 	ldw	r2,-20(fp)
 1018908:	1004c03a 	cmpne	r2,r2,zero
 101890c:	1000061e 	bne	r2,zero,1018928 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 1018910:	e0fffd17 	ldw	r3,-12(fp)
 1018914:	00800104 	movi	r2,4
 1018918:	18800005 	stb	r2,0(r3)
        return (pevent);
 101891c:	e0fffb17 	ldw	r3,-20(fp)
 1018920:	e0ffff15 	stw	r3,-4(fp)
 1018924:	0000a306 	br	1018bb4 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 1018928:	e0bffb17 	ldw	r2,-20(fp)
 101892c:	10800003 	ldbu	r2,0(r2)
 1018930:	10803fcc 	andi	r2,r2,255
 1018934:	108000a0 	cmpeqi	r2,r2,2
 1018938:	1000061e 	bne	r2,zero,1018954 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 101893c:	e0fffd17 	ldw	r3,-12(fp)
 1018940:	00800044 	movi	r2,1
 1018944:	18800005 	stb	r2,0(r3)
        return (pevent);
 1018948:	e0bffb17 	ldw	r2,-20(fp)
 101894c:	e0bfff15 	stw	r2,-4(fp)
 1018950:	00009806 	br	1018bb4 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1018954:	008040b4 	movhi	r2,258
 1018958:	108bcd04 	addi	r2,r2,12084
 101895c:	10800003 	ldbu	r2,0(r2)
 1018960:	10803fcc 	andi	r2,r2,255
 1018964:	1005003a 	cmpeq	r2,r2,zero
 1018968:	1000061e 	bne	r2,zero,1018984 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 101896c:	e0fffd17 	ldw	r3,-12(fp)
 1018970:	008003c4 	movi	r2,15
 1018974:	18800005 	stb	r2,0(r3)
        return (pevent);
 1018978:	e0fffb17 	ldw	r3,-20(fp)
 101897c:	e0ffff15 	stw	r3,-4(fp)
 1018980:	00008c06 	br	1018bb4 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018984:	0005303a 	rdctl	r2,status
 1018988:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101898c:	e0fff617 	ldw	r3,-40(fp)
 1018990:	00bfff84 	movi	r2,-2
 1018994:	1884703a 	and	r2,r3,r2
 1018998:	1001703a 	wrctl	status,r2
  
  return context;
 101899c:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 10189a0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 10189a4:	e0bffb17 	ldw	r2,-20(fp)
 10189a8:	10800283 	ldbu	r2,10(r2)
 10189ac:	10803fcc 	andi	r2,r2,255
 10189b0:	1005003a 	cmpeq	r2,r2,zero
 10189b4:	1000031e 	bne	r2,zero,10189c4 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 10189b8:	00800044 	movi	r2,1
 10189bc:	e0bffa05 	stb	r2,-24(fp)
 10189c0:	00000106 	br	10189c8 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 10189c4:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 10189c8:	e0bffc03 	ldbu	r2,-16(fp)
 10189cc:	e0bffe15 	stw	r2,-8(fp)
 10189d0:	e0fffe17 	ldw	r3,-8(fp)
 10189d4:	1805003a 	cmpeq	r2,r3,zero
 10189d8:	1000041e 	bne	r2,zero,10189ec <OSQDel+0x120>
 10189dc:	e0fffe17 	ldw	r3,-8(fp)
 10189e0:	18800060 	cmpeqi	r2,r3,1
 10189e4:	1000391e 	bne	r2,zero,1018acc <OSQDel+0x200>
 10189e8:	00006706 	br	1018b88 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 10189ec:	e0bffa03 	ldbu	r2,-24(fp)
 10189f0:	1004c03a 	cmpne	r2,r2,zero
 10189f4:	1000261e 	bne	r2,zero,1018a90 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 10189f8:	e0fffb17 	ldw	r3,-20(fp)
 10189fc:	00800fc4 	movi	r2,63
 1018a00:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 1018a04:	e0bffb17 	ldw	r2,-20(fp)
 1018a08:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 1018a0c:	e0bffb17 	ldw	r2,-20(fp)
 1018a10:	10800117 	ldw	r2,4(r2)
 1018a14:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 1018a18:	008040b4 	movhi	r2,258
 1018a1c:	108bca04 	addi	r2,r2,12072
 1018a20:	10c00017 	ldw	r3,0(r2)
 1018a24:	e0bff817 	ldw	r2,-32(fp)
 1018a28:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 1018a2c:	00c040b4 	movhi	r3,258
 1018a30:	18cbca04 	addi	r3,r3,12072
 1018a34:	e0bff817 	ldw	r2,-32(fp)
 1018a38:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1018a3c:	e0bffb17 	ldw	r2,-20(fp)
 1018a40:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 1018a44:	008040b4 	movhi	r2,258
 1018a48:	108bcc04 	addi	r2,r2,12080
 1018a4c:	10c00017 	ldw	r3,0(r2)
 1018a50:	e0bffb17 	ldw	r2,-20(fp)
 1018a54:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 1018a58:	e0bffb17 	ldw	r2,-20(fp)
 1018a5c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 1018a60:	00c040b4 	movhi	r3,258
 1018a64:	18cbcc04 	addi	r3,r3,12080
 1018a68:	e0bffb17 	ldw	r2,-20(fp)
 1018a6c:	18800015 	stw	r2,0(r3)
 1018a70:	e0bff717 	ldw	r2,-36(fp)
 1018a74:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018a78:	e0bff517 	ldw	r2,-44(fp)
 1018a7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 1018a80:	e0bffd17 	ldw	r2,-12(fp)
 1018a84:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 1018a88:	e03ff915 	stw	zero,-28(fp)
 1018a8c:	00004706 	br	1018bac <OSQDel+0x2e0>
 1018a90:	e0bff717 	ldw	r2,-36(fp)
 1018a94:	e0bff415 	stw	r2,-48(fp)
 1018a98:	e0bff417 	ldw	r2,-48(fp)
 1018a9c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 1018aa0:	e0fffd17 	ldw	r3,-12(fp)
 1018aa4:	00801244 	movi	r2,73
 1018aa8:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 1018aac:	e0bffb17 	ldw	r2,-20(fp)
 1018ab0:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 1018ab4:	00003d06 	br	1018bac <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 1018ab8:	e13ffb17 	ldw	r4,-20(fp)
 1018abc:	000b883a 	mov	r5,zero
 1018ac0:	01800104 	movi	r6,4
 1018ac4:	000f883a 	mov	r7,zero
 1018ac8:	101516c0 	call	101516c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 1018acc:	e0bffb17 	ldw	r2,-20(fp)
 1018ad0:	10800283 	ldbu	r2,10(r2)
 1018ad4:	10803fcc 	andi	r2,r2,255
 1018ad8:	1004c03a 	cmpne	r2,r2,zero
 1018adc:	103ff61e 	bne	r2,zero,1018ab8 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 1018ae0:	e0fffb17 	ldw	r3,-20(fp)
 1018ae4:	00800fc4 	movi	r2,63
 1018ae8:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 1018aec:	e0bffb17 	ldw	r2,-20(fp)
 1018af0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 1018af4:	e0bffb17 	ldw	r2,-20(fp)
 1018af8:	10800117 	ldw	r2,4(r2)
 1018afc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 1018b00:	008040b4 	movhi	r2,258
 1018b04:	108bca04 	addi	r2,r2,12072
 1018b08:	10c00017 	ldw	r3,0(r2)
 1018b0c:	e0bff817 	ldw	r2,-32(fp)
 1018b10:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 1018b14:	00c040b4 	movhi	r3,258
 1018b18:	18cbca04 	addi	r3,r3,12072
 1018b1c:	e0bff817 	ldw	r2,-32(fp)
 1018b20:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1018b24:	e0bffb17 	ldw	r2,-20(fp)
 1018b28:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 1018b2c:	008040b4 	movhi	r2,258
 1018b30:	108bcc04 	addi	r2,r2,12080
 1018b34:	10c00017 	ldw	r3,0(r2)
 1018b38:	e0bffb17 	ldw	r2,-20(fp)
 1018b3c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 1018b40:	e0bffb17 	ldw	r2,-20(fp)
 1018b44:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 1018b48:	00c040b4 	movhi	r3,258
 1018b4c:	18cbcc04 	addi	r3,r3,12080
 1018b50:	e0bffb17 	ldw	r2,-20(fp)
 1018b54:	18800015 	stw	r2,0(r3)
 1018b58:	e0bff717 	ldw	r2,-36(fp)
 1018b5c:	e0bff315 	stw	r2,-52(fp)
 1018b60:	e0bff317 	ldw	r2,-52(fp)
 1018b64:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1018b68:	e0bffa03 	ldbu	r2,-24(fp)
 1018b6c:	10800058 	cmpnei	r2,r2,1
 1018b70:	1000011e 	bne	r2,zero,1018b78 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 1018b74:	1015bac0 	call	1015bac <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 1018b78:	e0bffd17 	ldw	r2,-12(fp)
 1018b7c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 1018b80:	e03ff915 	stw	zero,-28(fp)
             break;
 1018b84:	00000906 	br	1018bac <OSQDel+0x2e0>
 1018b88:	e0bff717 	ldw	r2,-36(fp)
 1018b8c:	e0bff215 	stw	r2,-56(fp)
 1018b90:	e0bff217 	ldw	r2,-56(fp)
 1018b94:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 1018b98:	e0fffd17 	ldw	r3,-12(fp)
 1018b9c:	008001c4 	movi	r2,7
 1018ba0:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 1018ba4:	e0bffb17 	ldw	r2,-20(fp)
 1018ba8:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 1018bac:	e0bff917 	ldw	r2,-28(fp)
 1018bb0:	e0bfff15 	stw	r2,-4(fp)
 1018bb4:	e0bfff17 	ldw	r2,-4(fp)
}
 1018bb8:	e037883a 	mov	sp,fp
 1018bbc:	dfc00117 	ldw	ra,4(sp)
 1018bc0:	df000017 	ldw	fp,0(sp)
 1018bc4:	dec00204 	addi	sp,sp,8
 1018bc8:	f800283a 	ret

01018bcc <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 1018bcc:	defff904 	addi	sp,sp,-28
 1018bd0:	df000615 	stw	fp,24(sp)
 1018bd4:	df000604 	addi	fp,sp,24
 1018bd8:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1018bdc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1018be0:	e0bffe17 	ldw	r2,-8(fp)
 1018be4:	1004c03a 	cmpne	r2,r2,zero
 1018be8:	1000031e 	bne	r2,zero,1018bf8 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 1018bec:	00800104 	movi	r2,4
 1018bf0:	e0bfff15 	stw	r2,-4(fp)
 1018bf4:	00002206 	br	1018c80 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 1018bf8:	e0bffe17 	ldw	r2,-8(fp)
 1018bfc:	10800003 	ldbu	r2,0(r2)
 1018c00:	10803fcc 	andi	r2,r2,255
 1018c04:	108000a0 	cmpeqi	r2,r2,2
 1018c08:	1000031e 	bne	r2,zero,1018c18 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 1018c0c:	00800044 	movi	r2,1
 1018c10:	e0bfff15 	stw	r2,-4(fp)
 1018c14:	00001a06 	br	1018c80 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018c18:	0005303a 	rdctl	r2,status
 1018c1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018c20:	e0fffb17 	ldw	r3,-20(fp)
 1018c24:	00bfff84 	movi	r2,-2
 1018c28:	1884703a 	and	r2,r3,r2
 1018c2c:	1001703a 	wrctl	status,r2
  
  return context;
 1018c30:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1018c34:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 1018c38:	e0bffe17 	ldw	r2,-8(fp)
 1018c3c:	10800117 	ldw	r2,4(r2)
 1018c40:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 1018c44:	e0bffd17 	ldw	r2,-12(fp)
 1018c48:	10c00117 	ldw	r3,4(r2)
 1018c4c:	e0bffd17 	ldw	r2,-12(fp)
 1018c50:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 1018c54:	e0bffd17 	ldw	r2,-12(fp)
 1018c58:	10c00117 	ldw	r3,4(r2)
 1018c5c:	e0bffd17 	ldw	r2,-12(fp)
 1018c60:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 1018c64:	e0bffd17 	ldw	r2,-12(fp)
 1018c68:	1000058d 	sth	zero,22(r2)
 1018c6c:	e0bffc17 	ldw	r2,-16(fp)
 1018c70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018c74:	e0bffa17 	ldw	r2,-24(fp)
 1018c78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1018c7c:	e03fff15 	stw	zero,-4(fp)
 1018c80:	e0bfff17 	ldw	r2,-4(fp)
}
 1018c84:	e037883a 	mov	sp,fp
 1018c88:	df000017 	ldw	fp,0(sp)
 1018c8c:	dec00104 	addi	sp,sp,4
 1018c90:	f800283a 	ret

01018c94 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 1018c94:	defff104 	addi	sp,sp,-60
 1018c98:	dfc00e15 	stw	ra,56(sp)
 1018c9c:	df000d15 	stw	fp,52(sp)
 1018ca0:	df000d04 	addi	fp,sp,52
 1018ca4:	e13ffb15 	stw	r4,-20(fp)
 1018ca8:	e1bffd15 	stw	r6,-12(fp)
 1018cac:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1018cb0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1018cb4:	e0bffd17 	ldw	r2,-12(fp)
 1018cb8:	1004c03a 	cmpne	r2,r2,zero
 1018cbc:	1000021e 	bne	r2,zero,1018cc8 <OSQPend+0x34>
        return ((void *)0);
 1018cc0:	e03fff15 	stw	zero,-4(fp)
 1018cc4:	0000b506 	br	1018f9c <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 1018cc8:	e0bffb17 	ldw	r2,-20(fp)
 1018ccc:	1004c03a 	cmpne	r2,r2,zero
 1018cd0:	1000051e 	bne	r2,zero,1018ce8 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1018cd4:	e0fffd17 	ldw	r3,-12(fp)
 1018cd8:	00800104 	movi	r2,4
 1018cdc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1018ce0:	e03fff15 	stw	zero,-4(fp)
 1018ce4:	0000ad06 	br	1018f9c <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 1018ce8:	e0bffb17 	ldw	r2,-20(fp)
 1018cec:	10800003 	ldbu	r2,0(r2)
 1018cf0:	10803fcc 	andi	r2,r2,255
 1018cf4:	108000a0 	cmpeqi	r2,r2,2
 1018cf8:	1000051e 	bne	r2,zero,1018d10 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1018cfc:	e0fffd17 	ldw	r3,-12(fp)
 1018d00:	00800044 	movi	r2,1
 1018d04:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1018d08:	e03fff15 	stw	zero,-4(fp)
 1018d0c:	0000a306 	br	1018f9c <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 1018d10:	008040b4 	movhi	r2,258
 1018d14:	108bcd04 	addi	r2,r2,12084
 1018d18:	10800003 	ldbu	r2,0(r2)
 1018d1c:	10803fcc 	andi	r2,r2,255
 1018d20:	1005003a 	cmpeq	r2,r2,zero
 1018d24:	1000051e 	bne	r2,zero,1018d3c <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 1018d28:	e0fffd17 	ldw	r3,-12(fp)
 1018d2c:	00800084 	movi	r2,2
 1018d30:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1018d34:	e03fff15 	stw	zero,-4(fp)
 1018d38:	00009806 	br	1018f9c <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 1018d3c:	008040b4 	movhi	r2,258
 1018d40:	108bbf04 	addi	r2,r2,12028
 1018d44:	10800003 	ldbu	r2,0(r2)
 1018d48:	10803fcc 	andi	r2,r2,255
 1018d4c:	1005003a 	cmpeq	r2,r2,zero
 1018d50:	1000051e 	bne	r2,zero,1018d68 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 1018d54:	e0fffd17 	ldw	r3,-12(fp)
 1018d58:	00800344 	movi	r2,13
 1018d5c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1018d60:	e03fff15 	stw	zero,-4(fp)
 1018d64:	00008d06 	br	1018f9c <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018d68:	0005303a 	rdctl	r2,status
 1018d6c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018d70:	e0fff717 	ldw	r3,-36(fp)
 1018d74:	00bfff84 	movi	r2,-2
 1018d78:	1884703a 	and	r2,r3,r2
 1018d7c:	1001703a 	wrctl	status,r2
  
  return context;
 1018d80:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 1018d84:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 1018d88:	e0bffb17 	ldw	r2,-20(fp)
 1018d8c:	10800117 	ldw	r2,4(r2)
 1018d90:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 1018d94:	e0bff917 	ldw	r2,-28(fp)
 1018d98:	1080058b 	ldhu	r2,22(r2)
 1018d9c:	10bfffcc 	andi	r2,r2,65535
 1018da0:	1005003a 	cmpeq	r2,r2,zero
 1018da4:	10001f1e 	bne	r2,zero,1018e24 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 1018da8:	e0bff917 	ldw	r2,-28(fp)
 1018dac:	10c00417 	ldw	r3,16(r2)
 1018db0:	18800017 	ldw	r2,0(r3)
 1018db4:	e0bffa15 	stw	r2,-24(fp)
 1018db8:	18c00104 	addi	r3,r3,4
 1018dbc:	e0bff917 	ldw	r2,-28(fp)
 1018dc0:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 1018dc4:	e0bff917 	ldw	r2,-28(fp)
 1018dc8:	1080058b 	ldhu	r2,22(r2)
 1018dcc:	10bfffc4 	addi	r2,r2,-1
 1018dd0:	1007883a 	mov	r3,r2
 1018dd4:	e0bff917 	ldw	r2,-28(fp)
 1018dd8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 1018ddc:	e0bff917 	ldw	r2,-28(fp)
 1018de0:	10c00417 	ldw	r3,16(r2)
 1018de4:	e0bff917 	ldw	r2,-28(fp)
 1018de8:	10800217 	ldw	r2,8(r2)
 1018dec:	1880041e 	bne	r3,r2,1018e00 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 1018df0:	e0bff917 	ldw	r2,-28(fp)
 1018df4:	10c00117 	ldw	r3,4(r2)
 1018df8:	e0bff917 	ldw	r2,-28(fp)
 1018dfc:	10c00415 	stw	r3,16(r2)
 1018e00:	e0bff817 	ldw	r2,-32(fp)
 1018e04:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018e08:	e0bff617 	ldw	r2,-40(fp)
 1018e0c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 1018e10:	e0bffd17 	ldw	r2,-12(fp)
 1018e14:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 1018e18:	e0bffa17 	ldw	r2,-24(fp)
 1018e1c:	e0bfff15 	stw	r2,-4(fp)
 1018e20:	00005e06 	br	1018f9c <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 1018e24:	008040b4 	movhi	r2,258
 1018e28:	108bce04 	addi	r2,r2,12088
 1018e2c:	10c00017 	ldw	r3,0(r2)
 1018e30:	008040b4 	movhi	r2,258
 1018e34:	108bce04 	addi	r2,r2,12088
 1018e38:	10800017 	ldw	r2,0(r2)
 1018e3c:	10800c03 	ldbu	r2,48(r2)
 1018e40:	10800114 	ori	r2,r2,4
 1018e44:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1018e48:	008040b4 	movhi	r2,258
 1018e4c:	108bce04 	addi	r2,r2,12088
 1018e50:	10800017 	ldw	r2,0(r2)
 1018e54:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 1018e58:	008040b4 	movhi	r2,258
 1018e5c:	108bce04 	addi	r2,r2,12088
 1018e60:	10c00017 	ldw	r3,0(r2)
 1018e64:	e0bffc0b 	ldhu	r2,-16(fp)
 1018e68:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 1018e6c:	e13ffb17 	ldw	r4,-20(fp)
 1018e70:	10153000 	call	1015300 <OS_EventTaskWait>
 1018e74:	e0bff817 	ldw	r2,-32(fp)
 1018e78:	e0bff515 	stw	r2,-44(fp)
 1018e7c:	e0bff517 	ldw	r2,-44(fp)
 1018e80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 1018e84:	1015bac0 	call	1015bac <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018e88:	0005303a 	rdctl	r2,status
 1018e8c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018e90:	e0fff417 	ldw	r3,-48(fp)
 1018e94:	00bfff84 	movi	r2,-2
 1018e98:	1884703a 	and	r2,r3,r2
 1018e9c:	1001703a 	wrctl	status,r2
  
  return context;
 1018ea0:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 1018ea4:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 1018ea8:	008040b4 	movhi	r2,258
 1018eac:	108bce04 	addi	r2,r2,12088
 1018eb0:	10800017 	ldw	r2,0(r2)
 1018eb4:	10800c43 	ldbu	r2,49(r2)
 1018eb8:	10803fcc 	andi	r2,r2,255
 1018ebc:	e0bffe15 	stw	r2,-8(fp)
 1018ec0:	e0fffe17 	ldw	r3,-8(fp)
 1018ec4:	1805003a 	cmpeq	r2,r3,zero
 1018ec8:	1000041e 	bne	r2,zero,1018edc <OSQPend+0x248>
 1018ecc:	e0fffe17 	ldw	r3,-8(fp)
 1018ed0:	188000a0 	cmpeqi	r2,r3,2
 1018ed4:	1000091e 	bne	r2,zero,1018efc <OSQPend+0x268>
 1018ed8:	00000d06 	br	1018f10 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 1018edc:	008040b4 	movhi	r2,258
 1018ee0:	108bce04 	addi	r2,r2,12088
 1018ee4:	10800017 	ldw	r2,0(r2)
 1018ee8:	10800917 	ldw	r2,36(r2)
 1018eec:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 1018ef0:	e0bffd17 	ldw	r2,-12(fp)
 1018ef4:	10000005 	stb	zero,0(r2)
             break;
 1018ef8:	00000e06 	br	1018f34 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 1018efc:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 1018f00:	e0fffd17 	ldw	r3,-12(fp)
 1018f04:	00800384 	movi	r2,14
 1018f08:	18800005 	stb	r2,0(r3)
             break;
 1018f0c:	00000906 	br	1018f34 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 1018f10:	008040b4 	movhi	r2,258
 1018f14:	108bce04 	addi	r2,r2,12088
 1018f18:	11000017 	ldw	r4,0(r2)
 1018f1c:	e17ffb17 	ldw	r5,-20(fp)
 1018f20:	10155640 	call	1015564 <OS_EventTaskRemove>
             pmsg = (void *)0;
 1018f24:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1018f28:	e0fffd17 	ldw	r3,-12(fp)
 1018f2c:	00800284 	movi	r2,10
 1018f30:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 1018f34:	008040b4 	movhi	r2,258
 1018f38:	108bce04 	addi	r2,r2,12088
 1018f3c:	10800017 	ldw	r2,0(r2)
 1018f40:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 1018f44:	008040b4 	movhi	r2,258
 1018f48:	108bce04 	addi	r2,r2,12088
 1018f4c:	10800017 	ldw	r2,0(r2)
 1018f50:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 1018f54:	008040b4 	movhi	r2,258
 1018f58:	108bce04 	addi	r2,r2,12088
 1018f5c:	10800017 	ldw	r2,0(r2)
 1018f60:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1018f64:	008040b4 	movhi	r2,258
 1018f68:	108bce04 	addi	r2,r2,12088
 1018f6c:	10800017 	ldw	r2,0(r2)
 1018f70:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 1018f74:	008040b4 	movhi	r2,258
 1018f78:	108bce04 	addi	r2,r2,12088
 1018f7c:	10800017 	ldw	r2,0(r2)
 1018f80:	10000915 	stw	zero,36(r2)
 1018f84:	e0bff817 	ldw	r2,-32(fp)
 1018f88:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018f8c:	e0bff317 	ldw	r2,-52(fp)
 1018f90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 1018f94:	e0bffa17 	ldw	r2,-24(fp)
 1018f98:	e0bfff15 	stw	r2,-4(fp)
 1018f9c:	e0bfff17 	ldw	r2,-4(fp)
}
 1018fa0:	e037883a 	mov	sp,fp
 1018fa4:	dfc00117 	ldw	ra,4(sp)
 1018fa8:	df000017 	ldw	fp,0(sp)
 1018fac:	dec00204 	addi	sp,sp,8
 1018fb0:	f800283a 	ret

01018fb4 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1018fb4:	defff504 	addi	sp,sp,-44
 1018fb8:	dfc00a15 	stw	ra,40(sp)
 1018fbc:	df000915 	stw	fp,36(sp)
 1018fc0:	df000904 	addi	fp,sp,36
 1018fc4:	e13ffc15 	stw	r4,-16(fp)
 1018fc8:	e1bffe15 	stw	r6,-8(fp)
 1018fcc:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1018fd0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1018fd4:	e0bffe17 	ldw	r2,-8(fp)
 1018fd8:	1004c03a 	cmpne	r2,r2,zero
 1018fdc:	1000021e 	bne	r2,zero,1018fe8 <OSQPendAbort+0x34>
        return (0);
 1018fe0:	e03fff15 	stw	zero,-4(fp)
 1018fe4:	00004c06 	br	1019118 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1018fe8:	e0bffc17 	ldw	r2,-16(fp)
 1018fec:	1004c03a 	cmpne	r2,r2,zero
 1018ff0:	1000051e 	bne	r2,zero,1019008 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1018ff4:	e0fffe17 	ldw	r3,-8(fp)
 1018ff8:	00800104 	movi	r2,4
 1018ffc:	18800005 	stb	r2,0(r3)
        return (0);
 1019000:	e03fff15 	stw	zero,-4(fp)
 1019004:	00004406 	br	1019118 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 1019008:	e0bffc17 	ldw	r2,-16(fp)
 101900c:	10800003 	ldbu	r2,0(r2)
 1019010:	10803fcc 	andi	r2,r2,255
 1019014:	108000a0 	cmpeqi	r2,r2,2
 1019018:	1000051e 	bne	r2,zero,1019030 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 101901c:	e0fffe17 	ldw	r3,-8(fp)
 1019020:	00800044 	movi	r2,1
 1019024:	18800005 	stb	r2,0(r3)
        return (0);
 1019028:	e03fff15 	stw	zero,-4(fp)
 101902c:	00003a06 	br	1019118 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019030:	0005303a 	rdctl	r2,status
 1019034:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019038:	e0fff917 	ldw	r3,-28(fp)
 101903c:	00bfff84 	movi	r2,-2
 1019040:	1884703a 	and	r2,r3,r2
 1019044:	1001703a 	wrctl	status,r2
  
  return context;
 1019048:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101904c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 1019050:	e0bffc17 	ldw	r2,-16(fp)
 1019054:	10800283 	ldbu	r2,10(r2)
 1019058:	10803fcc 	andi	r2,r2,255
 101905c:	1005003a 	cmpeq	r2,r2,zero
 1019060:	1000261e 	bne	r2,zero,10190fc <OSQPendAbort+0x148>
        nbr_tasks = 0;
 1019064:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 1019068:	e0bffd03 	ldbu	r2,-12(fp)
 101906c:	10800060 	cmpeqi	r2,r2,1
 1019070:	1000091e 	bne	r2,zero,1019098 <OSQPendAbort+0xe4>
 1019074:	00000e06 	br	10190b0 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 1019078:	e13ffc17 	ldw	r4,-16(fp)
 101907c:	000b883a 	mov	r5,zero
 1019080:	01800104 	movi	r6,4
 1019084:	01c00084 	movi	r7,2
 1019088:	101516c0 	call	101516c <OS_EventTaskRdy>
                     nbr_tasks++;
 101908c:	e0bffb03 	ldbu	r2,-20(fp)
 1019090:	10800044 	addi	r2,r2,1
 1019094:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 1019098:	e0bffc17 	ldw	r2,-16(fp)
 101909c:	10800283 	ldbu	r2,10(r2)
 10190a0:	10803fcc 	andi	r2,r2,255
 10190a4:	1004c03a 	cmpne	r2,r2,zero
 10190a8:	103ff31e 	bne	r2,zero,1019078 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 10190ac:	00000806 	br	10190d0 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 10190b0:	e13ffc17 	ldw	r4,-16(fp)
 10190b4:	000b883a 	mov	r5,zero
 10190b8:	01800104 	movi	r6,4
 10190bc:	01c00084 	movi	r7,2
 10190c0:	101516c0 	call	101516c <OS_EventTaskRdy>
                 nbr_tasks++;
 10190c4:	e0bffb03 	ldbu	r2,-20(fp)
 10190c8:	10800044 	addi	r2,r2,1
 10190cc:	e0bffb05 	stb	r2,-20(fp)
 10190d0:	e0bffa17 	ldw	r2,-24(fp)
 10190d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10190d8:	e0bff817 	ldw	r2,-32(fp)
 10190dc:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 10190e0:	1015bac0 	call	1015bac <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 10190e4:	e0fffe17 	ldw	r3,-8(fp)
 10190e8:	00800384 	movi	r2,14
 10190ec:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 10190f0:	e0bffb03 	ldbu	r2,-20(fp)
 10190f4:	e0bfff15 	stw	r2,-4(fp)
 10190f8:	00000706 	br	1019118 <OSQPendAbort+0x164>
 10190fc:	e0bffa17 	ldw	r2,-24(fp)
 1019100:	e0bff715 	stw	r2,-36(fp)
 1019104:	e0bff717 	ldw	r2,-36(fp)
 1019108:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101910c:	e0bffe17 	ldw	r2,-8(fp)
 1019110:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 1019114:	e03fff15 	stw	zero,-4(fp)
 1019118:	e0bfff17 	ldw	r2,-4(fp)
}
 101911c:	e037883a 	mov	sp,fp
 1019120:	dfc00117 	ldw	ra,4(sp)
 1019124:	df000017 	ldw	fp,0(sp)
 1019128:	dec00204 	addi	sp,sp,8
 101912c:	f800283a 	ret

01019130 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 1019130:	defff504 	addi	sp,sp,-44
 1019134:	dfc00a15 	stw	ra,40(sp)
 1019138:	df000915 	stw	fp,36(sp)
 101913c:	df000904 	addi	fp,sp,36
 1019140:	e13ffd15 	stw	r4,-12(fp)
 1019144:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1019148:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 101914c:	e0bffd17 	ldw	r2,-12(fp)
 1019150:	1004c03a 	cmpne	r2,r2,zero
 1019154:	1000031e 	bne	r2,zero,1019164 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 1019158:	00800104 	movi	r2,4
 101915c:	e0bfff15 	stw	r2,-4(fp)
 1019160:	00004d06 	br	1019298 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 1019164:	e0bffd17 	ldw	r2,-12(fp)
 1019168:	10800003 	ldbu	r2,0(r2)
 101916c:	10803fcc 	andi	r2,r2,255
 1019170:	108000a0 	cmpeqi	r2,r2,2
 1019174:	1000031e 	bne	r2,zero,1019184 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 1019178:	00800044 	movi	r2,1
 101917c:	e0bfff15 	stw	r2,-4(fp)
 1019180:	00004506 	br	1019298 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019184:	0005303a 	rdctl	r2,status
 1019188:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101918c:	e0fffa17 	ldw	r3,-24(fp)
 1019190:	00bfff84 	movi	r2,-2
 1019194:	1884703a 	and	r2,r3,r2
 1019198:	1001703a 	wrctl	status,r2
  
  return context;
 101919c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 10191a0:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 10191a4:	e0bffd17 	ldw	r2,-12(fp)
 10191a8:	10800283 	ldbu	r2,10(r2)
 10191ac:	10803fcc 	andi	r2,r2,255
 10191b0:	1005003a 	cmpeq	r2,r2,zero
 10191b4:	10000c1e 	bne	r2,zero,10191e8 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 10191b8:	e13ffd17 	ldw	r4,-12(fp)
 10191bc:	e17ffe17 	ldw	r5,-8(fp)
 10191c0:	01800104 	movi	r6,4
 10191c4:	000f883a 	mov	r7,zero
 10191c8:	101516c0 	call	101516c <OS_EventTaskRdy>
 10191cc:	e0bffb17 	ldw	r2,-20(fp)
 10191d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10191d4:	e0bff917 	ldw	r2,-28(fp)
 10191d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 10191dc:	1015bac0 	call	1015bac <OS_Sched>
        return (OS_ERR_NONE);
 10191e0:	e03fff15 	stw	zero,-4(fp)
 10191e4:	00002c06 	br	1019298 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 10191e8:	e0bffd17 	ldw	r2,-12(fp)
 10191ec:	10800117 	ldw	r2,4(r2)
 10191f0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 10191f4:	e0bffc17 	ldw	r2,-16(fp)
 10191f8:	10c0058b 	ldhu	r3,22(r2)
 10191fc:	e0bffc17 	ldw	r2,-16(fp)
 1019200:	1080050b 	ldhu	r2,20(r2)
 1019204:	18ffffcc 	andi	r3,r3,65535
 1019208:	10bfffcc 	andi	r2,r2,65535
 101920c:	18800736 	bltu	r3,r2,101922c <OSQPost+0xfc>
 1019210:	e0bffb17 	ldw	r2,-20(fp)
 1019214:	e0bff815 	stw	r2,-32(fp)
 1019218:	e0bff817 	ldw	r2,-32(fp)
 101921c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1019220:	00800784 	movi	r2,30
 1019224:	e0bfff15 	stw	r2,-4(fp)
 1019228:	00001b06 	br	1019298 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 101922c:	e0bffc17 	ldw	r2,-16(fp)
 1019230:	10c00317 	ldw	r3,12(r2)
 1019234:	e0bffe17 	ldw	r2,-8(fp)
 1019238:	18800015 	stw	r2,0(r3)
 101923c:	18c00104 	addi	r3,r3,4
 1019240:	e0bffc17 	ldw	r2,-16(fp)
 1019244:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 1019248:	e0bffc17 	ldw	r2,-16(fp)
 101924c:	1080058b 	ldhu	r2,22(r2)
 1019250:	10800044 	addi	r2,r2,1
 1019254:	1007883a 	mov	r3,r2
 1019258:	e0bffc17 	ldw	r2,-16(fp)
 101925c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 1019260:	e0bffc17 	ldw	r2,-16(fp)
 1019264:	10c00317 	ldw	r3,12(r2)
 1019268:	e0bffc17 	ldw	r2,-16(fp)
 101926c:	10800217 	ldw	r2,8(r2)
 1019270:	1880041e 	bne	r3,r2,1019284 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 1019274:	e0bffc17 	ldw	r2,-16(fp)
 1019278:	10c00117 	ldw	r3,4(r2)
 101927c:	e0bffc17 	ldw	r2,-16(fp)
 1019280:	10c00315 	stw	r3,12(r2)
 1019284:	e0bffb17 	ldw	r2,-20(fp)
 1019288:	e0bff715 	stw	r2,-36(fp)
 101928c:	e0bff717 	ldw	r2,-36(fp)
 1019290:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1019294:	e03fff15 	stw	zero,-4(fp)
 1019298:	e0bfff17 	ldw	r2,-4(fp)
}
 101929c:	e037883a 	mov	sp,fp
 10192a0:	dfc00117 	ldw	ra,4(sp)
 10192a4:	df000017 	ldw	fp,0(sp)
 10192a8:	dec00204 	addi	sp,sp,8
 10192ac:	f800283a 	ret

010192b0 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 10192b0:	defff504 	addi	sp,sp,-44
 10192b4:	dfc00a15 	stw	ra,40(sp)
 10192b8:	df000915 	stw	fp,36(sp)
 10192bc:	df000904 	addi	fp,sp,36
 10192c0:	e13ffd15 	stw	r4,-12(fp)
 10192c4:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 10192c8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 10192cc:	e0bffd17 	ldw	r2,-12(fp)
 10192d0:	1004c03a 	cmpne	r2,r2,zero
 10192d4:	1000031e 	bne	r2,zero,10192e4 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 10192d8:	00800104 	movi	r2,4
 10192dc:	e0bfff15 	stw	r2,-4(fp)
 10192e0:	00004f06 	br	1019420 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 10192e4:	e0bffd17 	ldw	r2,-12(fp)
 10192e8:	10800003 	ldbu	r2,0(r2)
 10192ec:	10803fcc 	andi	r2,r2,255
 10192f0:	108000a0 	cmpeqi	r2,r2,2
 10192f4:	1000031e 	bne	r2,zero,1019304 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 10192f8:	00800044 	movi	r2,1
 10192fc:	e0bfff15 	stw	r2,-4(fp)
 1019300:	00004706 	br	1019420 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019304:	0005303a 	rdctl	r2,status
 1019308:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101930c:	e0fffa17 	ldw	r3,-24(fp)
 1019310:	00bfff84 	movi	r2,-2
 1019314:	1884703a 	and	r2,r3,r2
 1019318:	1001703a 	wrctl	status,r2
  
  return context;
 101931c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1019320:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 1019324:	e0bffd17 	ldw	r2,-12(fp)
 1019328:	10800283 	ldbu	r2,10(r2)
 101932c:	10803fcc 	andi	r2,r2,255
 1019330:	1005003a 	cmpeq	r2,r2,zero
 1019334:	10000c1e 	bne	r2,zero,1019368 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 1019338:	e13ffd17 	ldw	r4,-12(fp)
 101933c:	e17ffe17 	ldw	r5,-8(fp)
 1019340:	01800104 	movi	r6,4
 1019344:	000f883a 	mov	r7,zero
 1019348:	101516c0 	call	101516c <OS_EventTaskRdy>
 101934c:	e0bffb17 	ldw	r2,-20(fp)
 1019350:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019354:	e0bff917 	ldw	r2,-28(fp)
 1019358:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 101935c:	1015bac0 	call	1015bac <OS_Sched>
        return (OS_ERR_NONE);
 1019360:	e03fff15 	stw	zero,-4(fp)
 1019364:	00002e06 	br	1019420 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 1019368:	e0bffd17 	ldw	r2,-12(fp)
 101936c:	10800117 	ldw	r2,4(r2)
 1019370:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 1019374:	e0bffc17 	ldw	r2,-16(fp)
 1019378:	10c0058b 	ldhu	r3,22(r2)
 101937c:	e0bffc17 	ldw	r2,-16(fp)
 1019380:	1080050b 	ldhu	r2,20(r2)
 1019384:	18ffffcc 	andi	r3,r3,65535
 1019388:	10bfffcc 	andi	r2,r2,65535
 101938c:	18800736 	bltu	r3,r2,10193ac <OSQPostFront+0xfc>
 1019390:	e0bffb17 	ldw	r2,-20(fp)
 1019394:	e0bff815 	stw	r2,-32(fp)
 1019398:	e0bff817 	ldw	r2,-32(fp)
 101939c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 10193a0:	00800784 	movi	r2,30
 10193a4:	e0bfff15 	stw	r2,-4(fp)
 10193a8:	00001d06 	br	1019420 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 10193ac:	e0bffc17 	ldw	r2,-16(fp)
 10193b0:	10c00417 	ldw	r3,16(r2)
 10193b4:	e0bffc17 	ldw	r2,-16(fp)
 10193b8:	10800117 	ldw	r2,4(r2)
 10193bc:	1880041e 	bne	r3,r2,10193d0 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 10193c0:	e0bffc17 	ldw	r2,-16(fp)
 10193c4:	10c00217 	ldw	r3,8(r2)
 10193c8:	e0bffc17 	ldw	r2,-16(fp)
 10193cc:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 10193d0:	e0bffc17 	ldw	r2,-16(fp)
 10193d4:	10800417 	ldw	r2,16(r2)
 10193d8:	10ffff04 	addi	r3,r2,-4
 10193dc:	e0bffc17 	ldw	r2,-16(fp)
 10193e0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 10193e4:	e0bffc17 	ldw	r2,-16(fp)
 10193e8:	10c00417 	ldw	r3,16(r2)
 10193ec:	e0bffe17 	ldw	r2,-8(fp)
 10193f0:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 10193f4:	e0bffc17 	ldw	r2,-16(fp)
 10193f8:	1080058b 	ldhu	r2,22(r2)
 10193fc:	10800044 	addi	r2,r2,1
 1019400:	1007883a 	mov	r3,r2
 1019404:	e0bffc17 	ldw	r2,-16(fp)
 1019408:	10c0058d 	sth	r3,22(r2)
 101940c:	e0bffb17 	ldw	r2,-20(fp)
 1019410:	e0bff715 	stw	r2,-36(fp)
 1019414:	e0bff717 	ldw	r2,-36(fp)
 1019418:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101941c:	e03fff15 	stw	zero,-4(fp)
 1019420:	e0bfff17 	ldw	r2,-4(fp)
}
 1019424:	e037883a 	mov	sp,fp
 1019428:	dfc00117 	ldw	ra,4(sp)
 101942c:	df000017 	ldw	fp,0(sp)
 1019430:	dec00204 	addi	sp,sp,8
 1019434:	f800283a 	ret

01019438 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 1019438:	defff404 	addi	sp,sp,-48
 101943c:	dfc00b15 	stw	ra,44(sp)
 1019440:	df000a15 	stw	fp,40(sp)
 1019444:	df000a04 	addi	fp,sp,40
 1019448:	e13ffc15 	stw	r4,-16(fp)
 101944c:	e17ffd15 	stw	r5,-12(fp)
 1019450:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1019454:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1019458:	e0bffc17 	ldw	r2,-16(fp)
 101945c:	1004c03a 	cmpne	r2,r2,zero
 1019460:	1000031e 	bne	r2,zero,1019470 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 1019464:	00800104 	movi	r2,4
 1019468:	e0bfff15 	stw	r2,-4(fp)
 101946c:	00007906 	br	1019654 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 1019470:	e0bffc17 	ldw	r2,-16(fp)
 1019474:	10800003 	ldbu	r2,0(r2)
 1019478:	10803fcc 	andi	r2,r2,255
 101947c:	108000a0 	cmpeqi	r2,r2,2
 1019480:	1000031e 	bne	r2,zero,1019490 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 1019484:	00800044 	movi	r2,1
 1019488:	e0bfff15 	stw	r2,-4(fp)
 101948c:	00007106 	br	1019654 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019490:	0005303a 	rdctl	r2,status
 1019494:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019498:	e0fff917 	ldw	r3,-28(fp)
 101949c:	00bfff84 	movi	r2,-2
 10194a0:	1884703a 	and	r2,r3,r2
 10194a4:	1001703a 	wrctl	status,r2
  
  return context;
 10194a8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 10194ac:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 10194b0:	e0bffc17 	ldw	r2,-16(fp)
 10194b4:	10800283 	ldbu	r2,10(r2)
 10194b8:	10803fcc 	andi	r2,r2,255
 10194bc:	1005003a 	cmpeq	r2,r2,zero
 10194c0:	1000211e 	bne	r2,zero,1019548 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 10194c4:	e0bffe03 	ldbu	r2,-8(fp)
 10194c8:	1080004c 	andi	r2,r2,1
 10194cc:	10803fcc 	andi	r2,r2,255
 10194d0:	1005003a 	cmpeq	r2,r2,zero
 10194d4:	10000c1e 	bne	r2,zero,1019508 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 10194d8:	00000506 	br	10194f0 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 10194dc:	e13ffc17 	ldw	r4,-16(fp)
 10194e0:	e17ffd17 	ldw	r5,-12(fp)
 10194e4:	01800104 	movi	r6,4
 10194e8:	000f883a 	mov	r7,zero
 10194ec:	101516c0 	call	101516c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 10194f0:	e0bffc17 	ldw	r2,-16(fp)
 10194f4:	10800283 	ldbu	r2,10(r2)
 10194f8:	10803fcc 	andi	r2,r2,255
 10194fc:	1004c03a 	cmpne	r2,r2,zero
 1019500:	103ff61e 	bne	r2,zero,10194dc <OSQPostOpt+0xa4>
 1019504:	00000506 	br	101951c <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 1019508:	e13ffc17 	ldw	r4,-16(fp)
 101950c:	e17ffd17 	ldw	r5,-12(fp)
 1019510:	01800104 	movi	r6,4
 1019514:	000f883a 	mov	r7,zero
 1019518:	101516c0 	call	101516c <OS_EventTaskRdy>
 101951c:	e0bffa17 	ldw	r2,-24(fp)
 1019520:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019524:	e0bff817 	ldw	r2,-32(fp)
 1019528:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 101952c:	e0bffe03 	ldbu	r2,-8(fp)
 1019530:	1080010c 	andi	r2,r2,4
 1019534:	1004c03a 	cmpne	r2,r2,zero
 1019538:	1000011e 	bne	r2,zero,1019540 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 101953c:	1015bac0 	call	1015bac <OS_Sched>
        }
        return (OS_ERR_NONE);
 1019540:	e03fff15 	stw	zero,-4(fp)
 1019544:	00004306 	br	1019654 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 1019548:	e0bffc17 	ldw	r2,-16(fp)
 101954c:	10800117 	ldw	r2,4(r2)
 1019550:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 1019554:	e0bffb17 	ldw	r2,-20(fp)
 1019558:	10c0058b 	ldhu	r3,22(r2)
 101955c:	e0bffb17 	ldw	r2,-20(fp)
 1019560:	1080050b 	ldhu	r2,20(r2)
 1019564:	18ffffcc 	andi	r3,r3,65535
 1019568:	10bfffcc 	andi	r2,r2,65535
 101956c:	18800736 	bltu	r3,r2,101958c <OSQPostOpt+0x154>
 1019570:	e0bffa17 	ldw	r2,-24(fp)
 1019574:	e0bff715 	stw	r2,-36(fp)
 1019578:	e0bff717 	ldw	r2,-36(fp)
 101957c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1019580:	00800784 	movi	r2,30
 1019584:	e0bfff15 	stw	r2,-4(fp)
 1019588:	00003206 	br	1019654 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 101958c:	e0bffe03 	ldbu	r2,-8(fp)
 1019590:	1080008c 	andi	r2,r2,2
 1019594:	1005003a 	cmpeq	r2,r2,zero
 1019598:	1000131e 	bne	r2,zero,10195e8 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 101959c:	e0bffb17 	ldw	r2,-20(fp)
 10195a0:	10c00417 	ldw	r3,16(r2)
 10195a4:	e0bffb17 	ldw	r2,-20(fp)
 10195a8:	10800117 	ldw	r2,4(r2)
 10195ac:	1880041e 	bne	r3,r2,10195c0 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 10195b0:	e0bffb17 	ldw	r2,-20(fp)
 10195b4:	10c00217 	ldw	r3,8(r2)
 10195b8:	e0bffb17 	ldw	r2,-20(fp)
 10195bc:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 10195c0:	e0bffb17 	ldw	r2,-20(fp)
 10195c4:	10800417 	ldw	r2,16(r2)
 10195c8:	10ffff04 	addi	r3,r2,-4
 10195cc:	e0bffb17 	ldw	r2,-20(fp)
 10195d0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 10195d4:	e0bffb17 	ldw	r2,-20(fp)
 10195d8:	10c00417 	ldw	r3,16(r2)
 10195dc:	e0bffd17 	ldw	r2,-12(fp)
 10195e0:	18800015 	stw	r2,0(r3)
 10195e4:	00001006 	br	1019628 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 10195e8:	e0bffb17 	ldw	r2,-20(fp)
 10195ec:	10c00317 	ldw	r3,12(r2)
 10195f0:	e0bffd17 	ldw	r2,-12(fp)
 10195f4:	18800015 	stw	r2,0(r3)
 10195f8:	18c00104 	addi	r3,r3,4
 10195fc:	e0bffb17 	ldw	r2,-20(fp)
 1019600:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 1019604:	e0bffb17 	ldw	r2,-20(fp)
 1019608:	10c00317 	ldw	r3,12(r2)
 101960c:	e0bffb17 	ldw	r2,-20(fp)
 1019610:	10800217 	ldw	r2,8(r2)
 1019614:	1880041e 	bne	r3,r2,1019628 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 1019618:	e0bffb17 	ldw	r2,-20(fp)
 101961c:	10c00117 	ldw	r3,4(r2)
 1019620:	e0bffb17 	ldw	r2,-20(fp)
 1019624:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 1019628:	e0bffb17 	ldw	r2,-20(fp)
 101962c:	1080058b 	ldhu	r2,22(r2)
 1019630:	10800044 	addi	r2,r2,1
 1019634:	1007883a 	mov	r3,r2
 1019638:	e0bffb17 	ldw	r2,-20(fp)
 101963c:	10c0058d 	sth	r3,22(r2)
 1019640:	e0bffa17 	ldw	r2,-24(fp)
 1019644:	e0bff615 	stw	r2,-40(fp)
 1019648:	e0bff617 	ldw	r2,-40(fp)
 101964c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1019650:	e03fff15 	stw	zero,-4(fp)
 1019654:	e0bfff17 	ldw	r2,-4(fp)
}
 1019658:	e037883a 	mov	sp,fp
 101965c:	dfc00117 	ldw	ra,4(sp)
 1019660:	df000017 	ldw	fp,0(sp)
 1019664:	dec00204 	addi	sp,sp,8
 1019668:	f800283a 	ret

0101966c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 101966c:	defff504 	addi	sp,sp,-44
 1019670:	df000a15 	stw	fp,40(sp)
 1019674:	df000a04 	addi	fp,sp,40
 1019678:	e13ffd15 	stw	r4,-12(fp)
 101967c:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1019680:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 1019684:	e0bffd17 	ldw	r2,-12(fp)
 1019688:	1004c03a 	cmpne	r2,r2,zero
 101968c:	1000031e 	bne	r2,zero,101969c <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 1019690:	00800104 	movi	r2,4
 1019694:	e0bfff15 	stw	r2,-4(fp)
 1019698:	00004f06 	br	10197d8 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 101969c:	e0bffe17 	ldw	r2,-8(fp)
 10196a0:	1004c03a 	cmpne	r2,r2,zero
 10196a4:	1000031e 	bne	r2,zero,10196b4 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 10196a8:	00800244 	movi	r2,9
 10196ac:	e0bfff15 	stw	r2,-4(fp)
 10196b0:	00004906 	br	10197d8 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 10196b4:	e0bffd17 	ldw	r2,-12(fp)
 10196b8:	10800003 	ldbu	r2,0(r2)
 10196bc:	10803fcc 	andi	r2,r2,255
 10196c0:	108000a0 	cmpeqi	r2,r2,2
 10196c4:	1000031e 	bne	r2,zero,10196d4 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 10196c8:	00800044 	movi	r2,1
 10196cc:	e0bfff15 	stw	r2,-4(fp)
 10196d0:	00004106 	br	10197d8 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10196d4:	0005303a 	rdctl	r2,status
 10196d8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10196dc:	e0fff717 	ldw	r3,-36(fp)
 10196e0:	00bfff84 	movi	r2,-2
 10196e4:	1884703a 	and	r2,r3,r2
 10196e8:	1001703a 	wrctl	status,r2
  
  return context;
 10196ec:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 10196f0:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 10196f4:	e0bffd17 	ldw	r2,-12(fp)
 10196f8:	10c00283 	ldbu	r3,10(r2)
 10196fc:	e0bffe17 	ldw	r2,-8(fp)
 1019700:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 1019704:	e0bffd17 	ldw	r2,-12(fp)
 1019708:	108002c4 	addi	r2,r2,11
 101970c:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 1019710:	e0bffe17 	ldw	r2,-8(fp)
 1019714:	10800204 	addi	r2,r2,8
 1019718:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101971c:	e03ffb05 	stb	zero,-20(fp)
 1019720:	00000d06 	br	1019758 <OSQQuery+0xec>
        *pdest++ = *psrc++;
 1019724:	e0bffa17 	ldw	r2,-24(fp)
 1019728:	10c00003 	ldbu	r3,0(r2)
 101972c:	e0bff917 	ldw	r2,-28(fp)
 1019730:	10c00005 	stb	r3,0(r2)
 1019734:	e0bff917 	ldw	r2,-28(fp)
 1019738:	10800044 	addi	r2,r2,1
 101973c:	e0bff915 	stw	r2,-28(fp)
 1019740:	e0bffa17 	ldw	r2,-24(fp)
 1019744:	10800044 	addi	r2,r2,1
 1019748:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101974c:	e0bffb03 	ldbu	r2,-20(fp)
 1019750:	10800044 	addi	r2,r2,1
 1019754:	e0bffb05 	stb	r2,-20(fp)
 1019758:	e0bffb03 	ldbu	r2,-20(fp)
 101975c:	108000f0 	cmpltui	r2,r2,3
 1019760:	103ff01e 	bne	r2,zero,1019724 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 1019764:	e0bffd17 	ldw	r2,-12(fp)
 1019768:	10800117 	ldw	r2,4(r2)
 101976c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 1019770:	e0bffc17 	ldw	r2,-16(fp)
 1019774:	1080058b 	ldhu	r2,22(r2)
 1019778:	10bfffcc 	andi	r2,r2,65535
 101977c:	1005003a 	cmpeq	r2,r2,zero
 1019780:	1000061e 	bne	r2,zero,101979c <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 1019784:	e0bffc17 	ldw	r2,-16(fp)
 1019788:	10800417 	ldw	r2,16(r2)
 101978c:	10c00017 	ldw	r3,0(r2)
 1019790:	e0bffe17 	ldw	r2,-8(fp)
 1019794:	10c00015 	stw	r3,0(r2)
 1019798:	00000206 	br	10197a4 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 101979c:	e0bffe17 	ldw	r2,-8(fp)
 10197a0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 10197a4:	e0bffc17 	ldw	r2,-16(fp)
 10197a8:	10c0058b 	ldhu	r3,22(r2)
 10197ac:	e0bffe17 	ldw	r2,-8(fp)
 10197b0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 10197b4:	e0bffc17 	ldw	r2,-16(fp)
 10197b8:	10c0050b 	ldhu	r3,20(r2)
 10197bc:	e0bffe17 	ldw	r2,-8(fp)
 10197c0:	10c0018d 	sth	r3,6(r2)
 10197c4:	e0bff817 	ldw	r2,-32(fp)
 10197c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10197cc:	e0bff617 	ldw	r2,-40(fp)
 10197d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10197d4:	e03fff15 	stw	zero,-4(fp)
 10197d8:	e0bfff17 	ldw	r2,-4(fp)
}
 10197dc:	e037883a 	mov	sp,fp
 10197e0:	df000017 	ldw	fp,0(sp)
 10197e4:	dec00104 	addi	sp,sp,4
 10197e8:	f800283a 	ret

010197ec <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 10197ec:	defffb04 	addi	sp,sp,-20
 10197f0:	dfc00415 	stw	ra,16(sp)
 10197f4:	df000315 	stw	fp,12(sp)
 10197f8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 10197fc:	010040f4 	movhi	r4,259
 1019800:	2123cc04 	addi	r4,r4,-28880
 1019804:	01407804 	movi	r5,480
 1019808:	1015aec0 	call	1015aec <OS_MemClr>
    pq1 = &OSQTbl[0];
 101980c:	008040f4 	movhi	r2,259
 1019810:	10a3cc04 	addi	r2,r2,-28880
 1019814:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 1019818:	008040f4 	movhi	r2,259
 101981c:	10a3d204 	addi	r2,r2,-28856
 1019820:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 1019824:	e03fff0d 	sth	zero,-4(fp)
 1019828:	00000c06 	br	101985c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 101982c:	e0fffe17 	ldw	r3,-8(fp)
 1019830:	e0bffd17 	ldw	r2,-12(fp)
 1019834:	18800015 	stw	r2,0(r3)
        pq1++;
 1019838:	e0bffe17 	ldw	r2,-8(fp)
 101983c:	10800604 	addi	r2,r2,24
 1019840:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 1019844:	e0bffd17 	ldw	r2,-12(fp)
 1019848:	10800604 	addi	r2,r2,24
 101984c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 1019850:	e0bfff0b 	ldhu	r2,-4(fp)
 1019854:	10800044 	addi	r2,r2,1
 1019858:	e0bfff0d 	sth	r2,-4(fp)
 101985c:	e0bfff0b 	ldhu	r2,-4(fp)
 1019860:	108004f0 	cmpltui	r2,r2,19
 1019864:	103ff11e 	bne	r2,zero,101982c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 1019868:	e0bffe17 	ldw	r2,-8(fp)
 101986c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 1019870:	00c040b4 	movhi	r3,258
 1019874:	18cbca04 	addi	r3,r3,12072
 1019878:	008040f4 	movhi	r2,259
 101987c:	10a3cc04 	addi	r2,r2,-28880
 1019880:	18800015 	stw	r2,0(r3)
#endif
}
 1019884:	e037883a 	mov	sp,fp
 1019888:	dfc00117 	ldw	ra,4(sp)
 101988c:	df000017 	ldw	fp,0(sp)
 1019890:	dec00204 	addi	sp,sp,8
 1019894:	f800283a 	ret

01019898 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 1019898:	defff904 	addi	sp,sp,-28
 101989c:	df000615 	stw	fp,24(sp)
 10198a0:	df000604 	addi	fp,sp,24
 10198a4:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 10198a8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 10198ac:	e0bffe17 	ldw	r2,-8(fp)
 10198b0:	1004c03a 	cmpne	r2,r2,zero
 10198b4:	1000021e 	bne	r2,zero,10198c0 <OSSemAccept+0x28>
        return (0);
 10198b8:	e03fff15 	stw	zero,-4(fp)
 10198bc:	00002106 	br	1019944 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 10198c0:	e0bffe17 	ldw	r2,-8(fp)
 10198c4:	10800003 	ldbu	r2,0(r2)
 10198c8:	10803fcc 	andi	r2,r2,255
 10198cc:	108000e0 	cmpeqi	r2,r2,3
 10198d0:	1000021e 	bne	r2,zero,10198dc <OSSemAccept+0x44>
        return (0);
 10198d4:	e03fff15 	stw	zero,-4(fp)
 10198d8:	00001a06 	br	1019944 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10198dc:	0005303a 	rdctl	r2,status
 10198e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10198e4:	e0fffb17 	ldw	r3,-20(fp)
 10198e8:	00bfff84 	movi	r2,-2
 10198ec:	1884703a 	and	r2,r3,r2
 10198f0:	1001703a 	wrctl	status,r2
  
  return context;
 10198f4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 10198f8:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 10198fc:	e0bffe17 	ldw	r2,-8(fp)
 1019900:	1080020b 	ldhu	r2,8(r2)
 1019904:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 1019908:	e0bffd0b 	ldhu	r2,-12(fp)
 101990c:	1005003a 	cmpeq	r2,r2,zero
 1019910:	1000061e 	bne	r2,zero,101992c <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 1019914:	e0bffe17 	ldw	r2,-8(fp)
 1019918:	1080020b 	ldhu	r2,8(r2)
 101991c:	10bfffc4 	addi	r2,r2,-1
 1019920:	1007883a 	mov	r3,r2
 1019924:	e0bffe17 	ldw	r2,-8(fp)
 1019928:	10c0020d 	sth	r3,8(r2)
 101992c:	e0bffc17 	ldw	r2,-16(fp)
 1019930:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019934:	e0bffa17 	ldw	r2,-24(fp)
 1019938:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 101993c:	e0bffd0b 	ldhu	r2,-12(fp)
 1019940:	e0bfff15 	stw	r2,-4(fp)
 1019944:	e0bfff17 	ldw	r2,-4(fp)
}
 1019948:	e037883a 	mov	sp,fp
 101994c:	df000017 	ldw	fp,0(sp)
 1019950:	dec00104 	addi	sp,sp,4
 1019954:	f800283a 	ret

01019958 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 1019958:	defff804 	addi	sp,sp,-32
 101995c:	dfc00715 	stw	ra,28(sp)
 1019960:	df000615 	stw	fp,24(sp)
 1019964:	df000604 	addi	fp,sp,24
 1019968:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101996c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1019970:	008040b4 	movhi	r2,258
 1019974:	108bcd04 	addi	r2,r2,12084
 1019978:	10800003 	ldbu	r2,0(r2)
 101997c:	10803fcc 	andi	r2,r2,255
 1019980:	1005003a 	cmpeq	r2,r2,zero
 1019984:	1000021e 	bne	r2,zero,1019990 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 1019988:	e03fff15 	stw	zero,-4(fp)
 101998c:	00003106 	br	1019a54 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019990:	0005303a 	rdctl	r2,status
 1019994:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019998:	e0fffb17 	ldw	r3,-20(fp)
 101999c:	00bfff84 	movi	r2,-2
 10199a0:	1884703a 	and	r2,r3,r2
 10199a4:	1001703a 	wrctl	status,r2
  
  return context;
 10199a8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 10199ac:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 10199b0:	008040b4 	movhi	r2,258
 10199b4:	108bcc04 	addi	r2,r2,12080
 10199b8:	10800017 	ldw	r2,0(r2)
 10199bc:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 10199c0:	008040b4 	movhi	r2,258
 10199c4:	108bcc04 	addi	r2,r2,12080
 10199c8:	10800017 	ldw	r2,0(r2)
 10199cc:	1005003a 	cmpeq	r2,r2,zero
 10199d0:	1000081e 	bne	r2,zero,10199f4 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 10199d4:	008040b4 	movhi	r2,258
 10199d8:	108bcc04 	addi	r2,r2,12080
 10199dc:	10800017 	ldw	r2,0(r2)
 10199e0:	10800117 	ldw	r2,4(r2)
 10199e4:	1007883a 	mov	r3,r2
 10199e8:	008040b4 	movhi	r2,258
 10199ec:	108bcc04 	addi	r2,r2,12080
 10199f0:	10c00015 	stw	r3,0(r2)
 10199f4:	e0bffc17 	ldw	r2,-16(fp)
 10199f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10199fc:	e0bffa17 	ldw	r2,-24(fp)
 1019a00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 1019a04:	e0bffd17 	ldw	r2,-12(fp)
 1019a08:	1005003a 	cmpeq	r2,r2,zero
 1019a0c:	10000f1e 	bne	r2,zero,1019a4c <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 1019a10:	e0fffd17 	ldw	r3,-12(fp)
 1019a14:	008000c4 	movi	r2,3
 1019a18:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 1019a1c:	e0fffd17 	ldw	r3,-12(fp)
 1019a20:	e0bffe0b 	ldhu	r2,-8(fp)
 1019a24:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 1019a28:	e0bffd17 	ldw	r2,-12(fp)
 1019a2c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 1019a30:	e0fffd17 	ldw	r3,-12(fp)
 1019a34:	00800fc4 	movi	r2,63
 1019a38:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 1019a3c:	e0bffd17 	ldw	r2,-12(fp)
 1019a40:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 1019a44:	e13ffd17 	ldw	r4,-12(fp)
 1019a48:	10157200 	call	1015720 <OS_EventWaitListInit>
    }
    return (pevent);
 1019a4c:	e0bffd17 	ldw	r2,-12(fp)
 1019a50:	e0bfff15 	stw	r2,-4(fp)
 1019a54:	e0bfff17 	ldw	r2,-4(fp)
}
 1019a58:	e037883a 	mov	sp,fp
 1019a5c:	dfc00117 	ldw	ra,4(sp)
 1019a60:	df000017 	ldw	fp,0(sp)
 1019a64:	dec00204 	addi	sp,sp,8
 1019a68:	f800283a 	ret

01019a6c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1019a6c:	defff104 	addi	sp,sp,-60
 1019a70:	dfc00e15 	stw	ra,56(sp)
 1019a74:	df000d15 	stw	fp,52(sp)
 1019a78:	df000d04 	addi	fp,sp,52
 1019a7c:	e13ffb15 	stw	r4,-20(fp)
 1019a80:	e1bffd15 	stw	r6,-12(fp)
 1019a84:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1019a88:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1019a8c:	e0bffd17 	ldw	r2,-12(fp)
 1019a90:	1004c03a 	cmpne	r2,r2,zero
 1019a94:	1000031e 	bne	r2,zero,1019aa4 <OSSemDel+0x38>
        return (pevent);
 1019a98:	e0bffb17 	ldw	r2,-20(fp)
 1019a9c:	e0bfff15 	stw	r2,-4(fp)
 1019aa0:	00009406 	br	1019cf4 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1019aa4:	e0bffb17 	ldw	r2,-20(fp)
 1019aa8:	1004c03a 	cmpne	r2,r2,zero
 1019aac:	1000061e 	bne	r2,zero,1019ac8 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 1019ab0:	e0fffd17 	ldw	r3,-12(fp)
 1019ab4:	00800104 	movi	r2,4
 1019ab8:	18800005 	stb	r2,0(r3)
        return (pevent);
 1019abc:	e0fffb17 	ldw	r3,-20(fp)
 1019ac0:	e0ffff15 	stw	r3,-4(fp)
 1019ac4:	00008b06 	br	1019cf4 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 1019ac8:	e0bffb17 	ldw	r2,-20(fp)
 1019acc:	10800003 	ldbu	r2,0(r2)
 1019ad0:	10803fcc 	andi	r2,r2,255
 1019ad4:	108000e0 	cmpeqi	r2,r2,3
 1019ad8:	1000061e 	bne	r2,zero,1019af4 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 1019adc:	e0fffd17 	ldw	r3,-12(fp)
 1019ae0:	00800044 	movi	r2,1
 1019ae4:	18800005 	stb	r2,0(r3)
        return (pevent);
 1019ae8:	e0bffb17 	ldw	r2,-20(fp)
 1019aec:	e0bfff15 	stw	r2,-4(fp)
 1019af0:	00008006 	br	1019cf4 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1019af4:	008040b4 	movhi	r2,258
 1019af8:	108bcd04 	addi	r2,r2,12084
 1019afc:	10800003 	ldbu	r2,0(r2)
 1019b00:	10803fcc 	andi	r2,r2,255
 1019b04:	1005003a 	cmpeq	r2,r2,zero
 1019b08:	1000061e 	bne	r2,zero,1019b24 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 1019b0c:	e0fffd17 	ldw	r3,-12(fp)
 1019b10:	008003c4 	movi	r2,15
 1019b14:	18800005 	stb	r2,0(r3)
        return (pevent);
 1019b18:	e0fffb17 	ldw	r3,-20(fp)
 1019b1c:	e0ffff15 	stw	r3,-4(fp)
 1019b20:	00007406 	br	1019cf4 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019b24:	0005303a 	rdctl	r2,status
 1019b28:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019b2c:	e0fff717 	ldw	r3,-36(fp)
 1019b30:	00bfff84 	movi	r2,-2
 1019b34:	1884703a 	and	r2,r3,r2
 1019b38:	1001703a 	wrctl	status,r2
  
  return context;
 1019b3c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 1019b40:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 1019b44:	e0bffb17 	ldw	r2,-20(fp)
 1019b48:	10800283 	ldbu	r2,10(r2)
 1019b4c:	10803fcc 	andi	r2,r2,255
 1019b50:	1005003a 	cmpeq	r2,r2,zero
 1019b54:	1000031e 	bne	r2,zero,1019b64 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 1019b58:	00800044 	movi	r2,1
 1019b5c:	e0bffa05 	stb	r2,-24(fp)
 1019b60:	00000106 	br	1019b68 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 1019b64:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 1019b68:	e0bffc03 	ldbu	r2,-16(fp)
 1019b6c:	e0bffe15 	stw	r2,-8(fp)
 1019b70:	e0fffe17 	ldw	r3,-8(fp)
 1019b74:	1805003a 	cmpeq	r2,r3,zero
 1019b78:	1000041e 	bne	r2,zero,1019b8c <OSSemDel+0x120>
 1019b7c:	e0fffe17 	ldw	r3,-8(fp)
 1019b80:	18800060 	cmpeqi	r2,r3,1
 1019b84:	10002d1e 	bne	r2,zero,1019c3c <OSSemDel+0x1d0>
 1019b88:	00004f06 	br	1019cc8 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 1019b8c:	e0bffa03 	ldbu	r2,-24(fp)
 1019b90:	1004c03a 	cmpne	r2,r2,zero
 1019b94:	10001a1e 	bne	r2,zero,1019c00 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 1019b98:	e0fffb17 	ldw	r3,-20(fp)
 1019b9c:	00800fc4 	movi	r2,63
 1019ba0:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 1019ba4:	e0bffb17 	ldw	r2,-20(fp)
 1019ba8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1019bac:	e0bffb17 	ldw	r2,-20(fp)
 1019bb0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 1019bb4:	008040b4 	movhi	r2,258
 1019bb8:	108bcc04 	addi	r2,r2,12080
 1019bbc:	10c00017 	ldw	r3,0(r2)
 1019bc0:	e0bffb17 	ldw	r2,-20(fp)
 1019bc4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 1019bc8:	e0bffb17 	ldw	r2,-20(fp)
 1019bcc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 1019bd0:	00c040b4 	movhi	r3,258
 1019bd4:	18cbcc04 	addi	r3,r3,12080
 1019bd8:	e0bffb17 	ldw	r2,-20(fp)
 1019bdc:	18800015 	stw	r2,0(r3)
 1019be0:	e0bff817 	ldw	r2,-32(fp)
 1019be4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019be8:	e0bff617 	ldw	r2,-40(fp)
 1019bec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 1019bf0:	e0bffd17 	ldw	r2,-12(fp)
 1019bf4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 1019bf8:	e03ff915 	stw	zero,-28(fp)
 1019bfc:	00003b06 	br	1019cec <OSSemDel+0x280>
 1019c00:	e0bff817 	ldw	r2,-32(fp)
 1019c04:	e0bff515 	stw	r2,-44(fp)
 1019c08:	e0bff517 	ldw	r2,-44(fp)
 1019c0c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 1019c10:	e0fffd17 	ldw	r3,-12(fp)
 1019c14:	00801244 	movi	r2,73
 1019c18:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 1019c1c:	e0bffb17 	ldw	r2,-20(fp)
 1019c20:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 1019c24:	00003106 	br	1019cec <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 1019c28:	e13ffb17 	ldw	r4,-20(fp)
 1019c2c:	000b883a 	mov	r5,zero
 1019c30:	01800044 	movi	r6,1
 1019c34:	000f883a 	mov	r7,zero
 1019c38:	101516c0 	call	101516c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 1019c3c:	e0bffb17 	ldw	r2,-20(fp)
 1019c40:	10800283 	ldbu	r2,10(r2)
 1019c44:	10803fcc 	andi	r2,r2,255
 1019c48:	1004c03a 	cmpne	r2,r2,zero
 1019c4c:	103ff61e 	bne	r2,zero,1019c28 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 1019c50:	e0fffb17 	ldw	r3,-20(fp)
 1019c54:	00800fc4 	movi	r2,63
 1019c58:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 1019c5c:	e0bffb17 	ldw	r2,-20(fp)
 1019c60:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1019c64:	e0bffb17 	ldw	r2,-20(fp)
 1019c68:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 1019c6c:	008040b4 	movhi	r2,258
 1019c70:	108bcc04 	addi	r2,r2,12080
 1019c74:	10c00017 	ldw	r3,0(r2)
 1019c78:	e0bffb17 	ldw	r2,-20(fp)
 1019c7c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 1019c80:	e0bffb17 	ldw	r2,-20(fp)
 1019c84:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 1019c88:	00c040b4 	movhi	r3,258
 1019c8c:	18cbcc04 	addi	r3,r3,12080
 1019c90:	e0bffb17 	ldw	r2,-20(fp)
 1019c94:	18800015 	stw	r2,0(r3)
 1019c98:	e0bff817 	ldw	r2,-32(fp)
 1019c9c:	e0bff415 	stw	r2,-48(fp)
 1019ca0:	e0bff417 	ldw	r2,-48(fp)
 1019ca4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1019ca8:	e0bffa03 	ldbu	r2,-24(fp)
 1019cac:	10800058 	cmpnei	r2,r2,1
 1019cb0:	1000011e 	bne	r2,zero,1019cb8 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 1019cb4:	1015bac0 	call	1015bac <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 1019cb8:	e0bffd17 	ldw	r2,-12(fp)
 1019cbc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 1019cc0:	e03ff915 	stw	zero,-28(fp)
             break;
 1019cc4:	00000906 	br	1019cec <OSSemDel+0x280>
 1019cc8:	e0bff817 	ldw	r2,-32(fp)
 1019ccc:	e0bff315 	stw	r2,-52(fp)
 1019cd0:	e0bff317 	ldw	r2,-52(fp)
 1019cd4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 1019cd8:	e0fffd17 	ldw	r3,-12(fp)
 1019cdc:	008001c4 	movi	r2,7
 1019ce0:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 1019ce4:	e0bffb17 	ldw	r2,-20(fp)
 1019ce8:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 1019cec:	e0bff917 	ldw	r2,-28(fp)
 1019cf0:	e0bfff15 	stw	r2,-4(fp)
 1019cf4:	e0bfff17 	ldw	r2,-4(fp)
}
 1019cf8:	e037883a 	mov	sp,fp
 1019cfc:	dfc00117 	ldw	ra,4(sp)
 1019d00:	df000017 	ldw	fp,0(sp)
 1019d04:	dec00204 	addi	sp,sp,8
 1019d08:	f800283a 	ret

01019d0c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 1019d0c:	defff404 	addi	sp,sp,-48
 1019d10:	dfc00b15 	stw	ra,44(sp)
 1019d14:	df000a15 	stw	fp,40(sp)
 1019d18:	df000a04 	addi	fp,sp,40
 1019d1c:	e13ffc15 	stw	r4,-16(fp)
 1019d20:	e1bffe15 	stw	r6,-8(fp)
 1019d24:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1019d28:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1019d2c:	e0bffe17 	ldw	r2,-8(fp)
 1019d30:	1005003a 	cmpeq	r2,r2,zero
 1019d34:	10008f1e 	bne	r2,zero,1019f74 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1019d38:	e0bffc17 	ldw	r2,-16(fp)
 1019d3c:	1004c03a 	cmpne	r2,r2,zero
 1019d40:	1000041e 	bne	r2,zero,1019d54 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 1019d44:	e0fffe17 	ldw	r3,-8(fp)
 1019d48:	00800104 	movi	r2,4
 1019d4c:	18800005 	stb	r2,0(r3)
        return;
 1019d50:	00008806 	br	1019f74 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1019d54:	e0bffc17 	ldw	r2,-16(fp)
 1019d58:	10800003 	ldbu	r2,0(r2)
 1019d5c:	10803fcc 	andi	r2,r2,255
 1019d60:	108000e0 	cmpeqi	r2,r2,3
 1019d64:	1000041e 	bne	r2,zero,1019d78 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 1019d68:	e0fffe17 	ldw	r3,-8(fp)
 1019d6c:	00800044 	movi	r2,1
 1019d70:	18800005 	stb	r2,0(r3)
        return;
 1019d74:	00007f06 	br	1019f74 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 1019d78:	008040b4 	movhi	r2,258
 1019d7c:	108bcd04 	addi	r2,r2,12084
 1019d80:	10800003 	ldbu	r2,0(r2)
 1019d84:	10803fcc 	andi	r2,r2,255
 1019d88:	1005003a 	cmpeq	r2,r2,zero
 1019d8c:	1000041e 	bne	r2,zero,1019da0 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 1019d90:	e0fffe17 	ldw	r3,-8(fp)
 1019d94:	00800084 	movi	r2,2
 1019d98:	18800005 	stb	r2,0(r3)
        return;
 1019d9c:	00007506 	br	1019f74 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 1019da0:	008040b4 	movhi	r2,258
 1019da4:	108bbf04 	addi	r2,r2,12028
 1019da8:	10800003 	ldbu	r2,0(r2)
 1019dac:	10803fcc 	andi	r2,r2,255
 1019db0:	1005003a 	cmpeq	r2,r2,zero
 1019db4:	1000041e 	bne	r2,zero,1019dc8 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 1019db8:	e0fffe17 	ldw	r3,-8(fp)
 1019dbc:	00800344 	movi	r2,13
 1019dc0:	18800005 	stb	r2,0(r3)
        return;
 1019dc4:	00006b06 	br	1019f74 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019dc8:	0005303a 	rdctl	r2,status
 1019dcc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019dd0:	e0fffa17 	ldw	r3,-24(fp)
 1019dd4:	00bfff84 	movi	r2,-2
 1019dd8:	1884703a 	and	r2,r3,r2
 1019ddc:	1001703a 	wrctl	status,r2
  
  return context;
 1019de0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1019de4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 1019de8:	e0bffc17 	ldw	r2,-16(fp)
 1019dec:	1080020b 	ldhu	r2,8(r2)
 1019df0:	10bfffcc 	andi	r2,r2,65535
 1019df4:	1005003a 	cmpeq	r2,r2,zero
 1019df8:	10000d1e 	bne	r2,zero,1019e30 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 1019dfc:	e0bffc17 	ldw	r2,-16(fp)
 1019e00:	1080020b 	ldhu	r2,8(r2)
 1019e04:	10bfffc4 	addi	r2,r2,-1
 1019e08:	1007883a 	mov	r3,r2
 1019e0c:	e0bffc17 	ldw	r2,-16(fp)
 1019e10:	10c0020d 	sth	r3,8(r2)
 1019e14:	e0bffb17 	ldw	r2,-20(fp)
 1019e18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019e1c:	e0bff917 	ldw	r2,-28(fp)
 1019e20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 1019e24:	e0bffe17 	ldw	r2,-8(fp)
 1019e28:	10000005 	stb	zero,0(r2)
        return;
 1019e2c:	00005106 	br	1019f74 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 1019e30:	008040b4 	movhi	r2,258
 1019e34:	108bce04 	addi	r2,r2,12088
 1019e38:	10c00017 	ldw	r3,0(r2)
 1019e3c:	008040b4 	movhi	r2,258
 1019e40:	108bce04 	addi	r2,r2,12088
 1019e44:	10800017 	ldw	r2,0(r2)
 1019e48:	10800c03 	ldbu	r2,48(r2)
 1019e4c:	10800054 	ori	r2,r2,1
 1019e50:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1019e54:	008040b4 	movhi	r2,258
 1019e58:	108bce04 	addi	r2,r2,12088
 1019e5c:	10800017 	ldw	r2,0(r2)
 1019e60:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 1019e64:	008040b4 	movhi	r2,258
 1019e68:	108bce04 	addi	r2,r2,12088
 1019e6c:	10c00017 	ldw	r3,0(r2)
 1019e70:	e0bffd0b 	ldhu	r2,-12(fp)
 1019e74:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 1019e78:	e13ffc17 	ldw	r4,-16(fp)
 1019e7c:	10153000 	call	1015300 <OS_EventTaskWait>
 1019e80:	e0bffb17 	ldw	r2,-20(fp)
 1019e84:	e0bff815 	stw	r2,-32(fp)
 1019e88:	e0bff817 	ldw	r2,-32(fp)
 1019e8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 1019e90:	1015bac0 	call	1015bac <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019e94:	0005303a 	rdctl	r2,status
 1019e98:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019e9c:	e0fff717 	ldw	r3,-36(fp)
 1019ea0:	00bfff84 	movi	r2,-2
 1019ea4:	1884703a 	and	r2,r3,r2
 1019ea8:	1001703a 	wrctl	status,r2
  
  return context;
 1019eac:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 1019eb0:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 1019eb4:	008040b4 	movhi	r2,258
 1019eb8:	108bce04 	addi	r2,r2,12088
 1019ebc:	10800017 	ldw	r2,0(r2)
 1019ec0:	10800c43 	ldbu	r2,49(r2)
 1019ec4:	10803fcc 	andi	r2,r2,255
 1019ec8:	e0bfff15 	stw	r2,-4(fp)
 1019ecc:	e0ffff17 	ldw	r3,-4(fp)
 1019ed0:	1805003a 	cmpeq	r2,r3,zero
 1019ed4:	1000041e 	bne	r2,zero,1019ee8 <OSSemPend+0x1dc>
 1019ed8:	e0ffff17 	ldw	r3,-4(fp)
 1019edc:	188000a0 	cmpeqi	r2,r3,2
 1019ee0:	1000041e 	bne	r2,zero,1019ef4 <OSSemPend+0x1e8>
 1019ee4:	00000706 	br	1019f04 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 1019ee8:	e0bffe17 	ldw	r2,-8(fp)
 1019eec:	10000005 	stb	zero,0(r2)
             break;
 1019ef0:	00000c06 	br	1019f24 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 1019ef4:	e0fffe17 	ldw	r3,-8(fp)
 1019ef8:	00800384 	movi	r2,14
 1019efc:	18800005 	stb	r2,0(r3)
             break;
 1019f00:	00000806 	br	1019f24 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 1019f04:	008040b4 	movhi	r2,258
 1019f08:	108bce04 	addi	r2,r2,12088
 1019f0c:	11000017 	ldw	r4,0(r2)
 1019f10:	e17ffc17 	ldw	r5,-16(fp)
 1019f14:	10155640 	call	1015564 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1019f18:	e0fffe17 	ldw	r3,-8(fp)
 1019f1c:	00800284 	movi	r2,10
 1019f20:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 1019f24:	008040b4 	movhi	r2,258
 1019f28:	108bce04 	addi	r2,r2,12088
 1019f2c:	10800017 	ldw	r2,0(r2)
 1019f30:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 1019f34:	008040b4 	movhi	r2,258
 1019f38:	108bce04 	addi	r2,r2,12088
 1019f3c:	10800017 	ldw	r2,0(r2)
 1019f40:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 1019f44:	008040b4 	movhi	r2,258
 1019f48:	108bce04 	addi	r2,r2,12088
 1019f4c:	10800017 	ldw	r2,0(r2)
 1019f50:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1019f54:	008040b4 	movhi	r2,258
 1019f58:	108bce04 	addi	r2,r2,12088
 1019f5c:	10800017 	ldw	r2,0(r2)
 1019f60:	10000815 	stw	zero,32(r2)
 1019f64:	e0bffb17 	ldw	r2,-20(fp)
 1019f68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019f6c:	e0bff617 	ldw	r2,-40(fp)
 1019f70:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 1019f74:	e037883a 	mov	sp,fp
 1019f78:	dfc00117 	ldw	ra,4(sp)
 1019f7c:	df000017 	ldw	fp,0(sp)
 1019f80:	dec00204 	addi	sp,sp,8
 1019f84:	f800283a 	ret

01019f88 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1019f88:	defff504 	addi	sp,sp,-44
 1019f8c:	dfc00a15 	stw	ra,40(sp)
 1019f90:	df000915 	stw	fp,36(sp)
 1019f94:	df000904 	addi	fp,sp,36
 1019f98:	e13ffc15 	stw	r4,-16(fp)
 1019f9c:	e1bffe15 	stw	r6,-8(fp)
 1019fa0:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1019fa4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1019fa8:	e0bffe17 	ldw	r2,-8(fp)
 1019fac:	1004c03a 	cmpne	r2,r2,zero
 1019fb0:	1000021e 	bne	r2,zero,1019fbc <OSSemPendAbort+0x34>
        return (0);
 1019fb4:	e03fff15 	stw	zero,-4(fp)
 1019fb8:	00004c06 	br	101a0ec <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1019fbc:	e0bffc17 	ldw	r2,-16(fp)
 1019fc0:	1004c03a 	cmpne	r2,r2,zero
 1019fc4:	1000051e 	bne	r2,zero,1019fdc <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1019fc8:	e0fffe17 	ldw	r3,-8(fp)
 1019fcc:	00800104 	movi	r2,4
 1019fd0:	18800005 	stb	r2,0(r3)
        return (0);
 1019fd4:	e03fff15 	stw	zero,-4(fp)
 1019fd8:	00004406 	br	101a0ec <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1019fdc:	e0bffc17 	ldw	r2,-16(fp)
 1019fe0:	10800003 	ldbu	r2,0(r2)
 1019fe4:	10803fcc 	andi	r2,r2,255
 1019fe8:	108000e0 	cmpeqi	r2,r2,3
 1019fec:	1000051e 	bne	r2,zero,101a004 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1019ff0:	e0fffe17 	ldw	r3,-8(fp)
 1019ff4:	00800044 	movi	r2,1
 1019ff8:	18800005 	stb	r2,0(r3)
        return (0);
 1019ffc:	e03fff15 	stw	zero,-4(fp)
 101a000:	00003a06 	br	101a0ec <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a004:	0005303a 	rdctl	r2,status
 101a008:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a00c:	e0fff917 	ldw	r3,-28(fp)
 101a010:	00bfff84 	movi	r2,-2
 101a014:	1884703a 	and	r2,r3,r2
 101a018:	1001703a 	wrctl	status,r2
  
  return context;
 101a01c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101a020:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 101a024:	e0bffc17 	ldw	r2,-16(fp)
 101a028:	10800283 	ldbu	r2,10(r2)
 101a02c:	10803fcc 	andi	r2,r2,255
 101a030:	1005003a 	cmpeq	r2,r2,zero
 101a034:	1000261e 	bne	r2,zero,101a0d0 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 101a038:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 101a03c:	e0bffd03 	ldbu	r2,-12(fp)
 101a040:	10800060 	cmpeqi	r2,r2,1
 101a044:	1000091e 	bne	r2,zero,101a06c <OSSemPendAbort+0xe4>
 101a048:	00000e06 	br	101a084 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 101a04c:	e13ffc17 	ldw	r4,-16(fp)
 101a050:	000b883a 	mov	r5,zero
 101a054:	01800044 	movi	r6,1
 101a058:	01c00084 	movi	r7,2
 101a05c:	101516c0 	call	101516c <OS_EventTaskRdy>
                     nbr_tasks++;
 101a060:	e0bffb03 	ldbu	r2,-20(fp)
 101a064:	10800044 	addi	r2,r2,1
 101a068:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 101a06c:	e0bffc17 	ldw	r2,-16(fp)
 101a070:	10800283 	ldbu	r2,10(r2)
 101a074:	10803fcc 	andi	r2,r2,255
 101a078:	1004c03a 	cmpne	r2,r2,zero
 101a07c:	103ff31e 	bne	r2,zero,101a04c <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 101a080:	00000806 	br	101a0a4 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 101a084:	e13ffc17 	ldw	r4,-16(fp)
 101a088:	000b883a 	mov	r5,zero
 101a08c:	01800044 	movi	r6,1
 101a090:	01c00084 	movi	r7,2
 101a094:	101516c0 	call	101516c <OS_EventTaskRdy>
                 nbr_tasks++;
 101a098:	e0bffb03 	ldbu	r2,-20(fp)
 101a09c:	10800044 	addi	r2,r2,1
 101a0a0:	e0bffb05 	stb	r2,-20(fp)
 101a0a4:	e0bffa17 	ldw	r2,-24(fp)
 101a0a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a0ac:	e0bff817 	ldw	r2,-32(fp)
 101a0b0:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 101a0b4:	1015bac0 	call	1015bac <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 101a0b8:	e0fffe17 	ldw	r3,-8(fp)
 101a0bc:	00800384 	movi	r2,14
 101a0c0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 101a0c4:	e0bffb03 	ldbu	r2,-20(fp)
 101a0c8:	e0bfff15 	stw	r2,-4(fp)
 101a0cc:	00000706 	br	101a0ec <OSSemPendAbort+0x164>
 101a0d0:	e0bffa17 	ldw	r2,-24(fp)
 101a0d4:	e0bff715 	stw	r2,-36(fp)
 101a0d8:	e0bff717 	ldw	r2,-36(fp)
 101a0dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101a0e0:	e0bffe17 	ldw	r2,-8(fp)
 101a0e4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 101a0e8:	e03fff15 	stw	zero,-4(fp)
 101a0ec:	e0bfff17 	ldw	r2,-4(fp)
}
 101a0f0:	e037883a 	mov	sp,fp
 101a0f4:	dfc00117 	ldw	ra,4(sp)
 101a0f8:	df000017 	ldw	fp,0(sp)
 101a0fc:	dec00204 	addi	sp,sp,8
 101a100:	f800283a 	ret

0101a104 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 101a104:	defff704 	addi	sp,sp,-36
 101a108:	dfc00815 	stw	ra,32(sp)
 101a10c:	df000715 	stw	fp,28(sp)
 101a110:	df000704 	addi	fp,sp,28
 101a114:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101a118:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101a11c:	e0bffe17 	ldw	r2,-8(fp)
 101a120:	1004c03a 	cmpne	r2,r2,zero
 101a124:	1000031e 	bne	r2,zero,101a134 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 101a128:	00800104 	movi	r2,4
 101a12c:	e0bfff15 	stw	r2,-4(fp)
 101a130:	00003806 	br	101a214 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101a134:	e0bffe17 	ldw	r2,-8(fp)
 101a138:	10800003 	ldbu	r2,0(r2)
 101a13c:	10803fcc 	andi	r2,r2,255
 101a140:	108000e0 	cmpeqi	r2,r2,3
 101a144:	1000031e 	bne	r2,zero,101a154 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 101a148:	00800044 	movi	r2,1
 101a14c:	e0bfff15 	stw	r2,-4(fp)
 101a150:	00003006 	br	101a214 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a154:	0005303a 	rdctl	r2,status
 101a158:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a15c:	e0fffc17 	ldw	r3,-16(fp)
 101a160:	00bfff84 	movi	r2,-2
 101a164:	1884703a 	and	r2,r3,r2
 101a168:	1001703a 	wrctl	status,r2
  
  return context;
 101a16c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 101a170:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 101a174:	e0bffe17 	ldw	r2,-8(fp)
 101a178:	10800283 	ldbu	r2,10(r2)
 101a17c:	10803fcc 	andi	r2,r2,255
 101a180:	1005003a 	cmpeq	r2,r2,zero
 101a184:	10000c1e 	bne	r2,zero,101a1b8 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 101a188:	e13ffe17 	ldw	r4,-8(fp)
 101a18c:	000b883a 	mov	r5,zero
 101a190:	01800044 	movi	r6,1
 101a194:	000f883a 	mov	r7,zero
 101a198:	101516c0 	call	101516c <OS_EventTaskRdy>
 101a19c:	e0bffd17 	ldw	r2,-12(fp)
 101a1a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a1a4:	e0bffb17 	ldw	r2,-20(fp)
 101a1a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 101a1ac:	1015bac0 	call	1015bac <OS_Sched>
        return (OS_ERR_NONE);
 101a1b0:	e03fff15 	stw	zero,-4(fp)
 101a1b4:	00001706 	br	101a214 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 101a1b8:	e0bffe17 	ldw	r2,-8(fp)
 101a1bc:	1080020b 	ldhu	r2,8(r2)
 101a1c0:	10ffffcc 	andi	r3,r2,65535
 101a1c4:	00bfffd4 	movui	r2,65535
 101a1c8:	18800c26 	beq	r3,r2,101a1fc <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 101a1cc:	e0bffe17 	ldw	r2,-8(fp)
 101a1d0:	1080020b 	ldhu	r2,8(r2)
 101a1d4:	10800044 	addi	r2,r2,1
 101a1d8:	1007883a 	mov	r3,r2
 101a1dc:	e0bffe17 	ldw	r2,-8(fp)
 101a1e0:	10c0020d 	sth	r3,8(r2)
 101a1e4:	e0bffd17 	ldw	r2,-12(fp)
 101a1e8:	e0bffa15 	stw	r2,-24(fp)
 101a1ec:	e0bffa17 	ldw	r2,-24(fp)
 101a1f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 101a1f4:	e03fff15 	stw	zero,-4(fp)
 101a1f8:	00000606 	br	101a214 <OSSemPost+0x110>
 101a1fc:	e0bffd17 	ldw	r2,-12(fp)
 101a200:	e0bff915 	stw	r2,-28(fp)
 101a204:	e0bff917 	ldw	r2,-28(fp)
 101a208:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 101a20c:	00800c84 	movi	r2,50
 101a210:	e0bfff15 	stw	r2,-4(fp)
 101a214:	e0bfff17 	ldw	r2,-4(fp)
}
 101a218:	e037883a 	mov	sp,fp
 101a21c:	dfc00117 	ldw	ra,4(sp)
 101a220:	df000017 	ldw	fp,0(sp)
 101a224:	dec00204 	addi	sp,sp,8
 101a228:	f800283a 	ret

0101a22c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 101a22c:	defff604 	addi	sp,sp,-40
 101a230:	df000915 	stw	fp,36(sp)
 101a234:	df000904 	addi	fp,sp,36
 101a238:	e13ffd15 	stw	r4,-12(fp)
 101a23c:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101a240:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 101a244:	e0bffd17 	ldw	r2,-12(fp)
 101a248:	1004c03a 	cmpne	r2,r2,zero
 101a24c:	1000031e 	bne	r2,zero,101a25c <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 101a250:	00800104 	movi	r2,4
 101a254:	e0bfff15 	stw	r2,-4(fp)
 101a258:	00003b06 	br	101a348 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 101a25c:	e0bffe17 	ldw	r2,-8(fp)
 101a260:	1004c03a 	cmpne	r2,r2,zero
 101a264:	1000031e 	bne	r2,zero,101a274 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 101a268:	00800244 	movi	r2,9
 101a26c:	e0bfff15 	stw	r2,-4(fp)
 101a270:	00003506 	br	101a348 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 101a274:	e0bffd17 	ldw	r2,-12(fp)
 101a278:	10800003 	ldbu	r2,0(r2)
 101a27c:	10803fcc 	andi	r2,r2,255
 101a280:	108000e0 	cmpeqi	r2,r2,3
 101a284:	1000031e 	bne	r2,zero,101a294 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 101a288:	00800044 	movi	r2,1
 101a28c:	e0bfff15 	stw	r2,-4(fp)
 101a290:	00002d06 	br	101a348 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a294:	0005303a 	rdctl	r2,status
 101a298:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a29c:	e0fff817 	ldw	r3,-32(fp)
 101a2a0:	00bfff84 	movi	r2,-2
 101a2a4:	1884703a 	and	r2,r3,r2
 101a2a8:	1001703a 	wrctl	status,r2
  
  return context;
 101a2ac:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 101a2b0:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 101a2b4:	e0bffd17 	ldw	r2,-12(fp)
 101a2b8:	10c00283 	ldbu	r3,10(r2)
 101a2bc:	e0bffe17 	ldw	r2,-8(fp)
 101a2c0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 101a2c4:	e0bffd17 	ldw	r2,-12(fp)
 101a2c8:	108002c4 	addi	r2,r2,11
 101a2cc:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 101a2d0:	e0bffe17 	ldw	r2,-8(fp)
 101a2d4:	10800084 	addi	r2,r2,2
 101a2d8:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101a2dc:	e03ffa05 	stb	zero,-24(fp)
 101a2e0:	00000d06 	br	101a318 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 101a2e4:	e0bffc17 	ldw	r2,-16(fp)
 101a2e8:	10c00003 	ldbu	r3,0(r2)
 101a2ec:	e0bffb17 	ldw	r2,-20(fp)
 101a2f0:	10c00005 	stb	r3,0(r2)
 101a2f4:	e0bffb17 	ldw	r2,-20(fp)
 101a2f8:	10800044 	addi	r2,r2,1
 101a2fc:	e0bffb15 	stw	r2,-20(fp)
 101a300:	e0bffc17 	ldw	r2,-16(fp)
 101a304:	10800044 	addi	r2,r2,1
 101a308:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101a30c:	e0bffa03 	ldbu	r2,-24(fp)
 101a310:	10800044 	addi	r2,r2,1
 101a314:	e0bffa05 	stb	r2,-24(fp)
 101a318:	e0bffa03 	ldbu	r2,-24(fp)
 101a31c:	108000f0 	cmpltui	r2,r2,3
 101a320:	103ff01e 	bne	r2,zero,101a2e4 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 101a324:	e0bffd17 	ldw	r2,-12(fp)
 101a328:	10c0020b 	ldhu	r3,8(r2)
 101a32c:	e0bffe17 	ldw	r2,-8(fp)
 101a330:	10c0000d 	sth	r3,0(r2)
 101a334:	e0bff917 	ldw	r2,-28(fp)
 101a338:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a33c:	e0bff717 	ldw	r2,-36(fp)
 101a340:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101a344:	e03fff15 	stw	zero,-4(fp)
 101a348:	e0bfff17 	ldw	r2,-4(fp)
}
 101a34c:	e037883a 	mov	sp,fp
 101a350:	df000017 	ldw	fp,0(sp)
 101a354:	dec00104 	addi	sp,sp,4
 101a358:	f800283a 	ret

0101a35c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 101a35c:	defff904 	addi	sp,sp,-28
 101a360:	df000615 	stw	fp,24(sp)
 101a364:	df000604 	addi	fp,sp,24
 101a368:	e13ffd15 	stw	r4,-12(fp)
 101a36c:	e1bfff15 	stw	r6,-4(fp)
 101a370:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101a374:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 101a378:	e0bfff17 	ldw	r2,-4(fp)
 101a37c:	1005003a 	cmpeq	r2,r2,zero
 101a380:	1000331e 	bne	r2,zero,101a450 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101a384:	e0bffd17 	ldw	r2,-12(fp)
 101a388:	1004c03a 	cmpne	r2,r2,zero
 101a38c:	1000041e 	bne	r2,zero,101a3a0 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 101a390:	e0ffff17 	ldw	r3,-4(fp)
 101a394:	00800104 	movi	r2,4
 101a398:	18800005 	stb	r2,0(r3)
        return;
 101a39c:	00002c06 	br	101a450 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101a3a0:	e0bffd17 	ldw	r2,-12(fp)
 101a3a4:	10800003 	ldbu	r2,0(r2)
 101a3a8:	10803fcc 	andi	r2,r2,255
 101a3ac:	108000e0 	cmpeqi	r2,r2,3
 101a3b0:	1000041e 	bne	r2,zero,101a3c4 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 101a3b4:	e0ffff17 	ldw	r3,-4(fp)
 101a3b8:	00800044 	movi	r2,1
 101a3bc:	18800005 	stb	r2,0(r3)
        return;
 101a3c0:	00002306 	br	101a450 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a3c4:	0005303a 	rdctl	r2,status
 101a3c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a3cc:	e0fffb17 	ldw	r3,-20(fp)
 101a3d0:	00bfff84 	movi	r2,-2
 101a3d4:	1884703a 	and	r2,r3,r2
 101a3d8:	1001703a 	wrctl	status,r2
  
  return context;
 101a3dc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 101a3e0:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 101a3e4:	e0bfff17 	ldw	r2,-4(fp)
 101a3e8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 101a3ec:	e0bffd17 	ldw	r2,-12(fp)
 101a3f0:	1080020b 	ldhu	r2,8(r2)
 101a3f4:	10bfffcc 	andi	r2,r2,65535
 101a3f8:	1005003a 	cmpeq	r2,r2,zero
 101a3fc:	1000041e 	bne	r2,zero,101a410 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 101a400:	e0fffd17 	ldw	r3,-12(fp)
 101a404:	e0bffe0b 	ldhu	r2,-8(fp)
 101a408:	1880020d 	sth	r2,8(r3)
 101a40c:	00000c06 	br	101a440 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 101a410:	e0bffd17 	ldw	r2,-12(fp)
 101a414:	10800283 	ldbu	r2,10(r2)
 101a418:	10803fcc 	andi	r2,r2,255
 101a41c:	1004c03a 	cmpne	r2,r2,zero
 101a420:	1000041e 	bne	r2,zero,101a434 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 101a424:	e0fffd17 	ldw	r3,-12(fp)
 101a428:	e0bffe0b 	ldhu	r2,-8(fp)
 101a42c:	1880020d 	sth	r2,8(r3)
 101a430:	00000306 	br	101a440 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 101a434:	e0ffff17 	ldw	r3,-4(fp)
 101a438:	00801244 	movi	r2,73
 101a43c:	18800005 	stb	r2,0(r3)
 101a440:	e0bffc17 	ldw	r2,-16(fp)
 101a444:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a448:	e0bffa17 	ldw	r2,-24(fp)
 101a44c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 101a450:	e037883a 	mov	sp,fp
 101a454:	df000017 	ldw	fp,0(sp)
 101a458:	dec00104 	addi	sp,sp,4
 101a45c:	f800283a 	ret

0101a460 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 101a460:	defff004 	addi	sp,sp,-64
 101a464:	dfc00f15 	stw	ra,60(sp)
 101a468:	df000e15 	stw	fp,56(sp)
 101a46c:	df000e04 	addi	fp,sp,56
 101a470:	e13ffd05 	stb	r4,-12(fp)
 101a474:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 101a478:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 101a47c:	e0bffd03 	ldbu	r2,-12(fp)
 101a480:	10800530 	cmpltui	r2,r2,20
 101a484:	1000061e 	bne	r2,zero,101a4a0 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 101a488:	e0bffd03 	ldbu	r2,-12(fp)
 101a48c:	10803fe0 	cmpeqi	r2,r2,255
 101a490:	1000031e 	bne	r2,zero,101a4a0 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 101a494:	00800a84 	movi	r2,42
 101a498:	e0bfff15 	stw	r2,-4(fp)
 101a49c:	00014706 	br	101a9bc <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 101a4a0:	e0bffe03 	ldbu	r2,-8(fp)
 101a4a4:	10800530 	cmpltui	r2,r2,20
 101a4a8:	1000031e 	bne	r2,zero,101a4b8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 101a4ac:	00800a84 	movi	r2,42
 101a4b0:	e0bfff15 	stw	r2,-4(fp)
 101a4b4:	00014106 	br	101a9bc <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a4b8:	0005303a 	rdctl	r2,status
 101a4bc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a4c0:	e0fff617 	ldw	r3,-40(fp)
 101a4c4:	00bfff84 	movi	r2,-2
 101a4c8:	1884703a 	and	r2,r3,r2
 101a4cc:	1001703a 	wrctl	status,r2
  
  return context;
 101a4d0:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101a4d4:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 101a4d8:	e0bffe03 	ldbu	r2,-8(fp)
 101a4dc:	00c040f4 	movhi	r3,259
 101a4e0:	18ea5804 	addi	r3,r3,-22176
 101a4e4:	1085883a 	add	r2,r2,r2
 101a4e8:	1085883a 	add	r2,r2,r2
 101a4ec:	10c5883a 	add	r2,r2,r3
 101a4f0:	10800017 	ldw	r2,0(r2)
 101a4f4:	1005003a 	cmpeq	r2,r2,zero
 101a4f8:	1000071e 	bne	r2,zero,101a518 <OSTaskChangePrio+0xb8>
 101a4fc:	e0bff717 	ldw	r2,-36(fp)
 101a500:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a504:	e0bff517 	ldw	r2,-44(fp)
 101a508:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 101a50c:	00800a04 	movi	r2,40
 101a510:	e0bfff15 	stw	r2,-4(fp)
 101a514:	00012906 	br	101a9bc <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 101a518:	e0bffd03 	ldbu	r2,-12(fp)
 101a51c:	10803fd8 	cmpnei	r2,r2,255
 101a520:	1000051e 	bne	r2,zero,101a538 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 101a524:	008040b4 	movhi	r2,258
 101a528:	108bce04 	addi	r2,r2,12088
 101a52c:	10800017 	ldw	r2,0(r2)
 101a530:	10800c83 	ldbu	r2,50(r2)
 101a534:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 101a538:	e0bffd03 	ldbu	r2,-12(fp)
 101a53c:	00c040f4 	movhi	r3,259
 101a540:	18ea5804 	addi	r3,r3,-22176
 101a544:	1085883a 	add	r2,r2,r2
 101a548:	1085883a 	add	r2,r2,r2
 101a54c:	10c5883a 	add	r2,r2,r3
 101a550:	10800017 	ldw	r2,0(r2)
 101a554:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 101a558:	e0bffa17 	ldw	r2,-24(fp)
 101a55c:	1004c03a 	cmpne	r2,r2,zero
 101a560:	1000071e 	bne	r2,zero,101a580 <OSTaskChangePrio+0x120>
 101a564:	e0bff717 	ldw	r2,-36(fp)
 101a568:	e0bff415 	stw	r2,-48(fp)
 101a56c:	e0bff417 	ldw	r2,-48(fp)
 101a570:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 101a574:	00800a44 	movi	r2,41
 101a578:	e0bfff15 	stw	r2,-4(fp)
 101a57c:	00010f06 	br	101a9bc <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 101a580:	e0bffa17 	ldw	r2,-24(fp)
 101a584:	10800058 	cmpnei	r2,r2,1
 101a588:	1000071e 	bne	r2,zero,101a5a8 <OSTaskChangePrio+0x148>
 101a58c:	e0bff717 	ldw	r2,-36(fp)
 101a590:	e0bff315 	stw	r2,-52(fp)
 101a594:	e0bff317 	ldw	r2,-52(fp)
 101a598:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 101a59c:	008010c4 	movi	r2,67
 101a5a0:	e0bfff15 	stw	r2,-4(fp)
 101a5a4:	00010506 	br	101a9bc <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 101a5a8:	e0bffe03 	ldbu	r2,-8(fp)
 101a5ac:	1004d0fa 	srli	r2,r2,3
 101a5b0:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 101a5b4:	e0bffe03 	ldbu	r2,-8(fp)
 101a5b8:	108001cc 	andi	r2,r2,7
 101a5bc:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 101a5c0:	e0fff983 	ldbu	r3,-26(fp)
 101a5c4:	00800044 	movi	r2,1
 101a5c8:	10c4983a 	sll	r2,r2,r3
 101a5cc:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 101a5d0:	e0fff943 	ldbu	r3,-27(fp)
 101a5d4:	00800044 	movi	r2,1
 101a5d8:	10c4983a 	sll	r2,r2,r3
 101a5dc:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 101a5e0:	e0bffd03 	ldbu	r2,-12(fp)
 101a5e4:	00c040f4 	movhi	r3,259
 101a5e8:	18ea5804 	addi	r3,r3,-22176
 101a5ec:	1085883a 	add	r2,r2,r2
 101a5f0:	1085883a 	add	r2,r2,r2
 101a5f4:	10c5883a 	add	r2,r2,r3
 101a5f8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 101a5fc:	e0bffe03 	ldbu	r2,-8(fp)
 101a600:	00c040f4 	movhi	r3,259
 101a604:	18ea5804 	addi	r3,r3,-22176
 101a608:	1085883a 	add	r2,r2,r2
 101a60c:	1085883a 	add	r2,r2,r2
 101a610:	10c7883a 	add	r3,r2,r3
 101a614:	e0bffa17 	ldw	r2,-24(fp)
 101a618:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 101a61c:	e0bffa17 	ldw	r2,-24(fp)
 101a620:	10800d03 	ldbu	r2,52(r2)
 101a624:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 101a628:	e0bffa17 	ldw	r2,-24(fp)
 101a62c:	10800d83 	ldbu	r2,54(r2)
 101a630:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 101a634:	e0bffa17 	ldw	r2,-24(fp)
 101a638:	10800d43 	ldbu	r2,53(r2)
 101a63c:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 101a640:	e0fff903 	ldbu	r3,-28(fp)
 101a644:	008040b4 	movhi	r2,258
 101a648:	108bcb44 	addi	r2,r2,12077
 101a64c:	10c5883a 	add	r2,r2,r3
 101a650:	10c00003 	ldbu	r3,0(r2)
 101a654:	e0bff803 	ldbu	r2,-32(fp)
 101a658:	1884703a 	and	r2,r3,r2
 101a65c:	10803fcc 	andi	r2,r2,255
 101a660:	1005003a 	cmpeq	r2,r2,zero
 101a664:	1000381e 	bne	r2,zero,101a748 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 101a668:	e13ff903 	ldbu	r4,-28(fp)
 101a66c:	e0fff903 	ldbu	r3,-28(fp)
 101a670:	008040b4 	movhi	r2,258
 101a674:	108bcb44 	addi	r2,r2,12077
 101a678:	10c5883a 	add	r2,r2,r3
 101a67c:	10800003 	ldbu	r2,0(r2)
 101a680:	1007883a 	mov	r3,r2
 101a684:	e0bff803 	ldbu	r2,-32(fp)
 101a688:	0084303a 	nor	r2,zero,r2
 101a68c:	1884703a 	and	r2,r3,r2
 101a690:	1007883a 	mov	r3,r2
 101a694:	008040b4 	movhi	r2,258
 101a698:	108bcb44 	addi	r2,r2,12077
 101a69c:	1105883a 	add	r2,r2,r4
 101a6a0:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 101a6a4:	e0fff903 	ldbu	r3,-28(fp)
 101a6a8:	008040b4 	movhi	r2,258
 101a6ac:	108bcb44 	addi	r2,r2,12077
 101a6b0:	10c5883a 	add	r2,r2,r3
 101a6b4:	10800003 	ldbu	r2,0(r2)
 101a6b8:	10803fcc 	andi	r2,r2,255
 101a6bc:	1004c03a 	cmpne	r2,r2,zero
 101a6c0:	10000b1e 	bne	r2,zero,101a6f0 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 101a6c4:	e0bff843 	ldbu	r2,-31(fp)
 101a6c8:	0084303a 	nor	r2,zero,r2
 101a6cc:	1007883a 	mov	r3,r2
 101a6d0:	008040b4 	movhi	r2,258
 101a6d4:	108bcb04 	addi	r2,r2,12076
 101a6d8:	10800003 	ldbu	r2,0(r2)
 101a6dc:	1884703a 	and	r2,r3,r2
 101a6e0:	1007883a 	mov	r3,r2
 101a6e4:	008040b4 	movhi	r2,258
 101a6e8:	108bcb04 	addi	r2,r2,12076
 101a6ec:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 101a6f0:	008040b4 	movhi	r2,258
 101a6f4:	108bcb04 	addi	r2,r2,12076
 101a6f8:	10c00003 	ldbu	r3,0(r2)
 101a6fc:	e0bff8c3 	ldbu	r2,-29(fp)
 101a700:	1884b03a 	or	r2,r3,r2
 101a704:	1007883a 	mov	r3,r2
 101a708:	008040b4 	movhi	r2,258
 101a70c:	108bcb04 	addi	r2,r2,12076
 101a710:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 101a714:	e13ff983 	ldbu	r4,-26(fp)
 101a718:	e0fff983 	ldbu	r3,-26(fp)
 101a71c:	008040b4 	movhi	r2,258
 101a720:	108bcb44 	addi	r2,r2,12077
 101a724:	10c5883a 	add	r2,r2,r3
 101a728:	10c00003 	ldbu	r3,0(r2)
 101a72c:	e0bff883 	ldbu	r2,-30(fp)
 101a730:	1884b03a 	or	r2,r3,r2
 101a734:	1007883a 	mov	r3,r2
 101a738:	008040b4 	movhi	r2,258
 101a73c:	108bcb44 	addi	r2,r2,12077
 101a740:	1105883a 	add	r2,r2,r4
 101a744:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 101a748:	e0bffa17 	ldw	r2,-24(fp)
 101a74c:	10800717 	ldw	r2,28(r2)
 101a750:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 101a754:	e0bffc17 	ldw	r2,-16(fp)
 101a758:	1005003a 	cmpeq	r2,r2,zero
 101a75c:	1000341e 	bne	r2,zero,101a830 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 101a760:	e13ff903 	ldbu	r4,-28(fp)
 101a764:	e0fff903 	ldbu	r3,-28(fp)
 101a768:	e0bffc17 	ldw	r2,-16(fp)
 101a76c:	1885883a 	add	r2,r3,r2
 101a770:	10800204 	addi	r2,r2,8
 101a774:	108000c3 	ldbu	r2,3(r2)
 101a778:	1007883a 	mov	r3,r2
 101a77c:	e0bff803 	ldbu	r2,-32(fp)
 101a780:	0084303a 	nor	r2,zero,r2
 101a784:	1884703a 	and	r2,r3,r2
 101a788:	1007883a 	mov	r3,r2
 101a78c:	e0bffc17 	ldw	r2,-16(fp)
 101a790:	2085883a 	add	r2,r4,r2
 101a794:	10800204 	addi	r2,r2,8
 101a798:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 101a79c:	e0fff903 	ldbu	r3,-28(fp)
 101a7a0:	e0bffc17 	ldw	r2,-16(fp)
 101a7a4:	1885883a 	add	r2,r3,r2
 101a7a8:	10800204 	addi	r2,r2,8
 101a7ac:	108000c3 	ldbu	r2,3(r2)
 101a7b0:	10803fcc 	andi	r2,r2,255
 101a7b4:	1004c03a 	cmpne	r2,r2,zero
 101a7b8:	1000091e 	bne	r2,zero,101a7e0 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 101a7bc:	e0bffc17 	ldw	r2,-16(fp)
 101a7c0:	10800283 	ldbu	r2,10(r2)
 101a7c4:	1007883a 	mov	r3,r2
 101a7c8:	e0bff843 	ldbu	r2,-31(fp)
 101a7cc:	0084303a 	nor	r2,zero,r2
 101a7d0:	1884703a 	and	r2,r3,r2
 101a7d4:	1007883a 	mov	r3,r2
 101a7d8:	e0bffc17 	ldw	r2,-16(fp)
 101a7dc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 101a7e0:	e0bffc17 	ldw	r2,-16(fp)
 101a7e4:	10c00283 	ldbu	r3,10(r2)
 101a7e8:	e0bff8c3 	ldbu	r2,-29(fp)
 101a7ec:	1884b03a 	or	r2,r3,r2
 101a7f0:	1007883a 	mov	r3,r2
 101a7f4:	e0bffc17 	ldw	r2,-16(fp)
 101a7f8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 101a7fc:	e13ff983 	ldbu	r4,-26(fp)
 101a800:	e0fff983 	ldbu	r3,-26(fp)
 101a804:	e0bffc17 	ldw	r2,-16(fp)
 101a808:	1885883a 	add	r2,r3,r2
 101a80c:	10800204 	addi	r2,r2,8
 101a810:	10c000c3 	ldbu	r3,3(r2)
 101a814:	e0bff883 	ldbu	r2,-30(fp)
 101a818:	1884b03a 	or	r2,r3,r2
 101a81c:	1007883a 	mov	r3,r2
 101a820:	e0bffc17 	ldw	r2,-16(fp)
 101a824:	2085883a 	add	r2,r4,r2
 101a828:	10800204 	addi	r2,r2,8
 101a82c:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 101a830:	e0bffa17 	ldw	r2,-24(fp)
 101a834:	10800817 	ldw	r2,32(r2)
 101a838:	1005003a 	cmpeq	r2,r2,zero
 101a83c:	1000441e 	bne	r2,zero,101a950 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 101a840:	e0bffa17 	ldw	r2,-24(fp)
 101a844:	10800817 	ldw	r2,32(r2)
 101a848:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 101a84c:	e0bffb17 	ldw	r2,-20(fp)
 101a850:	10800017 	ldw	r2,0(r2)
 101a854:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 101a858:	00003a06 	br	101a944 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 101a85c:	e13ff903 	ldbu	r4,-28(fp)
 101a860:	e0fff903 	ldbu	r3,-28(fp)
 101a864:	e0bffc17 	ldw	r2,-16(fp)
 101a868:	1885883a 	add	r2,r3,r2
 101a86c:	10800204 	addi	r2,r2,8
 101a870:	108000c3 	ldbu	r2,3(r2)
 101a874:	1007883a 	mov	r3,r2
 101a878:	e0bff803 	ldbu	r2,-32(fp)
 101a87c:	0084303a 	nor	r2,zero,r2
 101a880:	1884703a 	and	r2,r3,r2
 101a884:	1007883a 	mov	r3,r2
 101a888:	e0bffc17 	ldw	r2,-16(fp)
 101a88c:	2085883a 	add	r2,r4,r2
 101a890:	10800204 	addi	r2,r2,8
 101a894:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 101a898:	e0fff903 	ldbu	r3,-28(fp)
 101a89c:	e0bffc17 	ldw	r2,-16(fp)
 101a8a0:	1885883a 	add	r2,r3,r2
 101a8a4:	10800204 	addi	r2,r2,8
 101a8a8:	108000c3 	ldbu	r2,3(r2)
 101a8ac:	10803fcc 	andi	r2,r2,255
 101a8b0:	1004c03a 	cmpne	r2,r2,zero
 101a8b4:	1000091e 	bne	r2,zero,101a8dc <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 101a8b8:	e0bffc17 	ldw	r2,-16(fp)
 101a8bc:	10800283 	ldbu	r2,10(r2)
 101a8c0:	1007883a 	mov	r3,r2
 101a8c4:	e0bff843 	ldbu	r2,-31(fp)
 101a8c8:	0084303a 	nor	r2,zero,r2
 101a8cc:	1884703a 	and	r2,r3,r2
 101a8d0:	1007883a 	mov	r3,r2
 101a8d4:	e0bffc17 	ldw	r2,-16(fp)
 101a8d8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 101a8dc:	e0bffc17 	ldw	r2,-16(fp)
 101a8e0:	10c00283 	ldbu	r3,10(r2)
 101a8e4:	e0bff8c3 	ldbu	r2,-29(fp)
 101a8e8:	1884b03a 	or	r2,r3,r2
 101a8ec:	1007883a 	mov	r3,r2
 101a8f0:	e0bffc17 	ldw	r2,-16(fp)
 101a8f4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 101a8f8:	e13ff983 	ldbu	r4,-26(fp)
 101a8fc:	e0fff983 	ldbu	r3,-26(fp)
 101a900:	e0bffc17 	ldw	r2,-16(fp)
 101a904:	1885883a 	add	r2,r3,r2
 101a908:	10800204 	addi	r2,r2,8
 101a90c:	10c000c3 	ldbu	r3,3(r2)
 101a910:	e0bff883 	ldbu	r2,-30(fp)
 101a914:	1884b03a 	or	r2,r3,r2
 101a918:	1007883a 	mov	r3,r2
 101a91c:	e0bffc17 	ldw	r2,-16(fp)
 101a920:	2085883a 	add	r2,r4,r2
 101a924:	10800204 	addi	r2,r2,8
 101a928:	10c000c5 	stb	r3,3(r2)
            pevents++;
 101a92c:	e0bffb17 	ldw	r2,-20(fp)
 101a930:	10800104 	addi	r2,r2,4
 101a934:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 101a938:	e0bffb17 	ldw	r2,-20(fp)
 101a93c:	10800017 	ldw	r2,0(r2)
 101a940:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 101a944:	e0bffc17 	ldw	r2,-16(fp)
 101a948:	1004c03a 	cmpne	r2,r2,zero
 101a94c:	103fc31e 	bne	r2,zero,101a85c <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 101a950:	e0fffa17 	ldw	r3,-24(fp)
 101a954:	e0bffe03 	ldbu	r2,-8(fp)
 101a958:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 101a95c:	e0fffa17 	ldw	r3,-24(fp)
 101a960:	e0bff983 	ldbu	r2,-26(fp)
 101a964:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 101a968:	e0fffa17 	ldw	r3,-24(fp)
 101a96c:	e0bff943 	ldbu	r2,-27(fp)
 101a970:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 101a974:	e0fffa17 	ldw	r3,-24(fp)
 101a978:	e0bff8c3 	ldbu	r2,-29(fp)
 101a97c:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 101a980:	e0fffa17 	ldw	r3,-24(fp)
 101a984:	e0bff883 	ldbu	r2,-30(fp)
 101a988:	18800d45 	stb	r2,53(r3)
 101a98c:	e0bff717 	ldw	r2,-36(fp)
 101a990:	e0bff215 	stw	r2,-56(fp)
 101a994:	e0bff217 	ldw	r2,-56(fp)
 101a998:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 101a99c:	008040b4 	movhi	r2,258
 101a9a0:	108bbf44 	addi	r2,r2,12029
 101a9a4:	10800003 	ldbu	r2,0(r2)
 101a9a8:	10803fcc 	andi	r2,r2,255
 101a9ac:	10800058 	cmpnei	r2,r2,1
 101a9b0:	1000011e 	bne	r2,zero,101a9b8 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 101a9b4:	1015bac0 	call	1015bac <OS_Sched>
    }
    return (OS_ERR_NONE);
 101a9b8:	e03fff15 	stw	zero,-4(fp)
 101a9bc:	e0bfff17 	ldw	r2,-4(fp)
}
 101a9c0:	e037883a 	mov	sp,fp
 101a9c4:	dfc00117 	ldw	ra,4(sp)
 101a9c8:	df000017 	ldw	fp,0(sp)
 101a9cc:	dec00204 	addi	sp,sp,8
 101a9d0:	f800283a 	ret

0101a9d4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 101a9d4:	deffed04 	addi	sp,sp,-76
 101a9d8:	dfc01215 	stw	ra,72(sp)
 101a9dc:	df001115 	stw	fp,68(sp)
 101a9e0:	df001104 	addi	fp,sp,68
 101a9e4:	e13ffb15 	stw	r4,-20(fp)
 101a9e8:	e17ffc15 	stw	r5,-16(fp)
 101a9ec:	e1bffd15 	stw	r6,-12(fp)
 101a9f0:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 101a9f4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 101a9f8:	e0bffe03 	ldbu	r2,-8(fp)
 101a9fc:	10800570 	cmpltui	r2,r2,21
 101aa00:	1000031e 	bne	r2,zero,101aa10 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 101aa04:	00800a84 	movi	r2,42
 101aa08:	e0bfff15 	stw	r2,-4(fp)
 101aa0c:	00006006 	br	101ab90 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101aa10:	0005303a 	rdctl	r2,status
 101aa14:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101aa18:	e0fff717 	ldw	r3,-36(fp)
 101aa1c:	00bfff84 	movi	r2,-2
 101aa20:	1884703a 	and	r2,r3,r2
 101aa24:	1001703a 	wrctl	status,r2
  
  return context;
 101aa28:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101aa2c:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 101aa30:	008040b4 	movhi	r2,258
 101aa34:	108bcd04 	addi	r2,r2,12084
 101aa38:	10800003 	ldbu	r2,0(r2)
 101aa3c:	10803fcc 	andi	r2,r2,255
 101aa40:	1005003a 	cmpeq	r2,r2,zero
 101aa44:	1000071e 	bne	r2,zero,101aa64 <OSTaskCreate+0x90>
 101aa48:	e0bff817 	ldw	r2,-32(fp)
 101aa4c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101aa50:	e0bff617 	ldw	r2,-40(fp)
 101aa54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 101aa58:	00800f04 	movi	r2,60
 101aa5c:	e0bfff15 	stw	r2,-4(fp)
 101aa60:	00004b06 	br	101ab90 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 101aa64:	e0bffe03 	ldbu	r2,-8(fp)
 101aa68:	00c040f4 	movhi	r3,259
 101aa6c:	18ea5804 	addi	r3,r3,-22176
 101aa70:	1085883a 	add	r2,r2,r2
 101aa74:	1085883a 	add	r2,r2,r2
 101aa78:	10c5883a 	add	r2,r2,r3
 101aa7c:	10800017 	ldw	r2,0(r2)
 101aa80:	1004c03a 	cmpne	r2,r2,zero
 101aa84:	10003c1e 	bne	r2,zero,101ab78 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 101aa88:	e0bffe03 	ldbu	r2,-8(fp)
 101aa8c:	00c040f4 	movhi	r3,259
 101aa90:	18ea5804 	addi	r3,r3,-22176
 101aa94:	1085883a 	add	r2,r2,r2
 101aa98:	1085883a 	add	r2,r2,r2
 101aa9c:	10c7883a 	add	r3,r2,r3
 101aaa0:	00800044 	movi	r2,1
 101aaa4:	18800015 	stw	r2,0(r3)
 101aaa8:	e0bff817 	ldw	r2,-32(fp)
 101aaac:	e0bff515 	stw	r2,-44(fp)
 101aab0:	e0bff517 	ldw	r2,-44(fp)
 101aab4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 101aab8:	e13ffb17 	ldw	r4,-20(fp)
 101aabc:	e17ffc17 	ldw	r5,-16(fp)
 101aac0:	e1bffd17 	ldw	r6,-12(fp)
 101aac4:	000f883a 	mov	r7,zero
 101aac8:	101e0700 	call	101e070 <OSTaskStkInit>
 101aacc:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 101aad0:	e13ffe03 	ldbu	r4,-8(fp)
 101aad4:	d8000015 	stw	zero,0(sp)
 101aad8:	d8000115 	stw	zero,4(sp)
 101aadc:	d8000215 	stw	zero,8(sp)
 101aae0:	e17ffa17 	ldw	r5,-24(fp)
 101aae4:	000d883a 	mov	r6,zero
 101aae8:	000f883a 	mov	r7,zero
 101aaec:	1015fb40 	call	1015fb4 <OS_TCBInit>
 101aaf0:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 101aaf4:	e0bff903 	ldbu	r2,-28(fp)
 101aaf8:	1004c03a 	cmpne	r2,r2,zero
 101aafc:	1000081e 	bne	r2,zero,101ab20 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 101ab00:	008040b4 	movhi	r2,258
 101ab04:	108bbf44 	addi	r2,r2,12029
 101ab08:	10800003 	ldbu	r2,0(r2)
 101ab0c:	10803fcc 	andi	r2,r2,255
 101ab10:	10800058 	cmpnei	r2,r2,1
 101ab14:	1000151e 	bne	r2,zero,101ab6c <OSTaskCreate+0x198>
                OS_Sched();
 101ab18:	1015bac0 	call	1015bac <OS_Sched>
 101ab1c:	00001306 	br	101ab6c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ab20:	0005303a 	rdctl	r2,status
 101ab24:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ab28:	e0fff417 	ldw	r3,-48(fp)
 101ab2c:	00bfff84 	movi	r2,-2
 101ab30:	1884703a 	and	r2,r3,r2
 101ab34:	1001703a 	wrctl	status,r2
  
  return context;
 101ab38:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 101ab3c:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 101ab40:	e0bffe03 	ldbu	r2,-8(fp)
 101ab44:	00c040f4 	movhi	r3,259
 101ab48:	18ea5804 	addi	r3,r3,-22176
 101ab4c:	1085883a 	add	r2,r2,r2
 101ab50:	1085883a 	add	r2,r2,r2
 101ab54:	10c5883a 	add	r2,r2,r3
 101ab58:	10000015 	stw	zero,0(r2)
 101ab5c:	e0bff817 	ldw	r2,-32(fp)
 101ab60:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ab64:	e0bff317 	ldw	r2,-52(fp)
 101ab68:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 101ab6c:	e0bff903 	ldbu	r2,-28(fp)
 101ab70:	e0bfff15 	stw	r2,-4(fp)
 101ab74:	00000606 	br	101ab90 <OSTaskCreate+0x1bc>
 101ab78:	e0bff817 	ldw	r2,-32(fp)
 101ab7c:	e0bff215 	stw	r2,-56(fp)
 101ab80:	e0bff217 	ldw	r2,-56(fp)
 101ab84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 101ab88:	00800a04 	movi	r2,40
 101ab8c:	e0bfff15 	stw	r2,-4(fp)
 101ab90:	e0bfff17 	ldw	r2,-4(fp)
}
 101ab94:	e037883a 	mov	sp,fp
 101ab98:	dfc00117 	ldw	ra,4(sp)
 101ab9c:	df000017 	ldw	fp,0(sp)
 101aba0:	dec00204 	addi	sp,sp,8
 101aba4:	f800283a 	ret

0101aba8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 101aba8:	deffeb04 	addi	sp,sp,-84
 101abac:	dfc01415 	stw	ra,80(sp)
 101abb0:	df001315 	stw	fp,76(sp)
 101abb4:	df001304 	addi	fp,sp,76
 101abb8:	e13ff915 	stw	r4,-28(fp)
 101abbc:	e17ffa15 	stw	r5,-24(fp)
 101abc0:	e1bffb15 	stw	r6,-20(fp)
 101abc4:	e0800217 	ldw	r2,8(fp)
 101abc8:	e0c00617 	ldw	r3,24(fp)
 101abcc:	e1fffc05 	stb	r7,-16(fp)
 101abd0:	e0bffd0d 	sth	r2,-12(fp)
 101abd4:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 101abd8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 101abdc:	e0bffc03 	ldbu	r2,-16(fp)
 101abe0:	10800570 	cmpltui	r2,r2,21
 101abe4:	1000031e 	bne	r2,zero,101abf4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 101abe8:	00800a84 	movi	r2,42
 101abec:	e0bfff15 	stw	r2,-4(fp)
 101abf0:	00006706 	br	101ad90 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101abf4:	0005303a 	rdctl	r2,status
 101abf8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101abfc:	e0fff517 	ldw	r3,-44(fp)
 101ac00:	00bfff84 	movi	r2,-2
 101ac04:	1884703a 	and	r2,r3,r2
 101ac08:	1001703a 	wrctl	status,r2
  
  return context;
 101ac0c:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101ac10:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 101ac14:	008040b4 	movhi	r2,258
 101ac18:	108bcd04 	addi	r2,r2,12084
 101ac1c:	10800003 	ldbu	r2,0(r2)
 101ac20:	10803fcc 	andi	r2,r2,255
 101ac24:	1005003a 	cmpeq	r2,r2,zero
 101ac28:	1000071e 	bne	r2,zero,101ac48 <OSTaskCreateExt+0xa0>
 101ac2c:	e0bff617 	ldw	r2,-40(fp)
 101ac30:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ac34:	e0bff417 	ldw	r2,-48(fp)
 101ac38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 101ac3c:	00800f04 	movi	r2,60
 101ac40:	e0bfff15 	stw	r2,-4(fp)
 101ac44:	00005206 	br	101ad90 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 101ac48:	e0bffc03 	ldbu	r2,-16(fp)
 101ac4c:	00c040f4 	movhi	r3,259
 101ac50:	18ea5804 	addi	r3,r3,-22176
 101ac54:	1085883a 	add	r2,r2,r2
 101ac58:	1085883a 	add	r2,r2,r2
 101ac5c:	10c5883a 	add	r2,r2,r3
 101ac60:	10800017 	ldw	r2,0(r2)
 101ac64:	1004c03a 	cmpne	r2,r2,zero
 101ac68:	1000431e 	bne	r2,zero,101ad78 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 101ac6c:	e0bffc03 	ldbu	r2,-16(fp)
 101ac70:	00c040f4 	movhi	r3,259
 101ac74:	18ea5804 	addi	r3,r3,-22176
 101ac78:	1085883a 	add	r2,r2,r2
 101ac7c:	1085883a 	add	r2,r2,r2
 101ac80:	10c7883a 	add	r3,r2,r3
 101ac84:	00800044 	movi	r2,1
 101ac88:	18800015 	stw	r2,0(r3)
 101ac8c:	e0bff617 	ldw	r2,-40(fp)
 101ac90:	e0bff315 	stw	r2,-52(fp)
 101ac94:	e0bff317 	ldw	r2,-52(fp)
 101ac98:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 101ac9c:	e1bffe0b 	ldhu	r6,-8(fp)
 101aca0:	e1000317 	ldw	r4,12(fp)
 101aca4:	e1400417 	ldw	r5,16(fp)
 101aca8:	101be240 	call	101be24 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 101acac:	e1fffe0b 	ldhu	r7,-8(fp)
 101acb0:	e13ff917 	ldw	r4,-28(fp)
 101acb4:	e17ffa17 	ldw	r5,-24(fp)
 101acb8:	e1bffb17 	ldw	r6,-20(fp)
 101acbc:	101e0700 	call	101e070 <OSTaskStkInit>
 101acc0:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 101acc4:	e13ffc03 	ldbu	r4,-16(fp)
 101acc8:	e1fffd0b 	ldhu	r7,-12(fp)
 101accc:	e0fffe0b 	ldhu	r3,-8(fp)
 101acd0:	e0800417 	ldw	r2,16(fp)
 101acd4:	d8800015 	stw	r2,0(sp)
 101acd8:	e0800517 	ldw	r2,20(fp)
 101acdc:	d8800115 	stw	r2,4(sp)
 101ace0:	d8c00215 	stw	r3,8(sp)
 101ace4:	e17ff817 	ldw	r5,-32(fp)
 101ace8:	e1800317 	ldw	r6,12(fp)
 101acec:	1015fb40 	call	1015fb4 <OS_TCBInit>
 101acf0:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 101acf4:	e0bff703 	ldbu	r2,-36(fp)
 101acf8:	1004c03a 	cmpne	r2,r2,zero
 101acfc:	1000081e 	bne	r2,zero,101ad20 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 101ad00:	008040b4 	movhi	r2,258
 101ad04:	108bbf44 	addi	r2,r2,12029
 101ad08:	10800003 	ldbu	r2,0(r2)
 101ad0c:	10803fcc 	andi	r2,r2,255
 101ad10:	10800058 	cmpnei	r2,r2,1
 101ad14:	1000151e 	bne	r2,zero,101ad6c <OSTaskCreateExt+0x1c4>
                OS_Sched();
 101ad18:	1015bac0 	call	1015bac <OS_Sched>
 101ad1c:	00001306 	br	101ad6c <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ad20:	0005303a 	rdctl	r2,status
 101ad24:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ad28:	e0fff217 	ldw	r3,-56(fp)
 101ad2c:	00bfff84 	movi	r2,-2
 101ad30:	1884703a 	and	r2,r3,r2
 101ad34:	1001703a 	wrctl	status,r2
  
  return context;
 101ad38:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 101ad3c:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 101ad40:	e0bffc03 	ldbu	r2,-16(fp)
 101ad44:	00c040f4 	movhi	r3,259
 101ad48:	18ea5804 	addi	r3,r3,-22176
 101ad4c:	1085883a 	add	r2,r2,r2
 101ad50:	1085883a 	add	r2,r2,r2
 101ad54:	10c5883a 	add	r2,r2,r3
 101ad58:	10000015 	stw	zero,0(r2)
 101ad5c:	e0bff617 	ldw	r2,-40(fp)
 101ad60:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ad64:	e0bff117 	ldw	r2,-60(fp)
 101ad68:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 101ad6c:	e0bff703 	ldbu	r2,-36(fp)
 101ad70:	e0bfff15 	stw	r2,-4(fp)
 101ad74:	00000606 	br	101ad90 <OSTaskCreateExt+0x1e8>
 101ad78:	e0bff617 	ldw	r2,-40(fp)
 101ad7c:	e0bff015 	stw	r2,-64(fp)
 101ad80:	e0bff017 	ldw	r2,-64(fp)
 101ad84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 101ad88:	00800a04 	movi	r2,40
 101ad8c:	e0bfff15 	stw	r2,-4(fp)
 101ad90:	e0bfff17 	ldw	r2,-4(fp)
}
 101ad94:	e037883a 	mov	sp,fp
 101ad98:	dfc00117 	ldw	ra,4(sp)
 101ad9c:	df000017 	ldw	fp,0(sp)
 101ada0:	dec00204 	addi	sp,sp,8
 101ada4:	f800283a 	ret

0101ada8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 101ada8:	defff304 	addi	sp,sp,-52
 101adac:	dfc00c15 	stw	ra,48(sp)
 101adb0:	df000b15 	stw	fp,44(sp)
 101adb4:	df000b04 	addi	fp,sp,44
 101adb8:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 101adbc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 101adc0:	008040b4 	movhi	r2,258
 101adc4:	108bcd04 	addi	r2,r2,12084
 101adc8:	10800003 	ldbu	r2,0(r2)
 101adcc:	10803fcc 	andi	r2,r2,255
 101add0:	1005003a 	cmpeq	r2,r2,zero
 101add4:	1000031e 	bne	r2,zero,101ade4 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 101add8:	00801004 	movi	r2,64
 101addc:	e0bfff15 	stw	r2,-4(fp)
 101ade0:	0000ee06 	br	101b19c <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 101ade4:	e0bffe03 	ldbu	r2,-8(fp)
 101ade8:	10800518 	cmpnei	r2,r2,20
 101adec:	1000031e 	bne	r2,zero,101adfc <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 101adf0:	00800f84 	movi	r2,62
 101adf4:	e0bfff15 	stw	r2,-4(fp)
 101adf8:	0000e806 	br	101b19c <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 101adfc:	e0bffe03 	ldbu	r2,-8(fp)
 101ae00:	10800530 	cmpltui	r2,r2,20
 101ae04:	1000061e 	bne	r2,zero,101ae20 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 101ae08:	e0bffe03 	ldbu	r2,-8(fp)
 101ae0c:	10803fe0 	cmpeqi	r2,r2,255
 101ae10:	1000031e 	bne	r2,zero,101ae20 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 101ae14:	00800a84 	movi	r2,42
 101ae18:	e0bfff15 	stw	r2,-4(fp)
 101ae1c:	0000df06 	br	101b19c <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ae20:	0005303a 	rdctl	r2,status
 101ae24:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ae28:	e0fffa17 	ldw	r3,-24(fp)
 101ae2c:	00bfff84 	movi	r2,-2
 101ae30:	1884703a 	and	r2,r3,r2
 101ae34:	1001703a 	wrctl	status,r2
  
  return context;
 101ae38:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 101ae3c:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 101ae40:	e0bffe03 	ldbu	r2,-8(fp)
 101ae44:	10803fd8 	cmpnei	r2,r2,255
 101ae48:	1000051e 	bne	r2,zero,101ae60 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 101ae4c:	008040b4 	movhi	r2,258
 101ae50:	108bce04 	addi	r2,r2,12088
 101ae54:	10800017 	ldw	r2,0(r2)
 101ae58:	10800c83 	ldbu	r2,50(r2)
 101ae5c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101ae60:	e0bffe03 	ldbu	r2,-8(fp)
 101ae64:	00c040f4 	movhi	r3,259
 101ae68:	18ea5804 	addi	r3,r3,-22176
 101ae6c:	1085883a 	add	r2,r2,r2
 101ae70:	1085883a 	add	r2,r2,r2
 101ae74:	10c5883a 	add	r2,r2,r3
 101ae78:	10800017 	ldw	r2,0(r2)
 101ae7c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 101ae80:	e0bffc17 	ldw	r2,-16(fp)
 101ae84:	1004c03a 	cmpne	r2,r2,zero
 101ae88:	1000071e 	bne	r2,zero,101aea8 <OSTaskDel+0x100>
 101ae8c:	e0bffb17 	ldw	r2,-20(fp)
 101ae90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ae94:	e0bff917 	ldw	r2,-28(fp)
 101ae98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101ae9c:	008010c4 	movi	r2,67
 101aea0:	e0bfff15 	stw	r2,-4(fp)
 101aea4:	0000bd06 	br	101b19c <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 101aea8:	e0bffc17 	ldw	r2,-16(fp)
 101aeac:	10800058 	cmpnei	r2,r2,1
 101aeb0:	1000071e 	bne	r2,zero,101aed0 <OSTaskDel+0x128>
 101aeb4:	e0bffb17 	ldw	r2,-20(fp)
 101aeb8:	e0bff815 	stw	r2,-32(fp)
 101aebc:	e0bff817 	ldw	r2,-32(fp)
 101aec0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 101aec4:	00800f44 	movi	r2,61
 101aec8:	e0bfff15 	stw	r2,-4(fp)
 101aecc:	0000b306 	br	101b19c <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 101aed0:	e0bffc17 	ldw	r2,-16(fp)
 101aed4:	10800d03 	ldbu	r2,52(r2)
 101aed8:	11003fcc 	andi	r4,r2,255
 101aedc:	e0bffc17 	ldw	r2,-16(fp)
 101aee0:	10800d03 	ldbu	r2,52(r2)
 101aee4:	10c03fcc 	andi	r3,r2,255
 101aee8:	008040b4 	movhi	r2,258
 101aeec:	108bcb44 	addi	r2,r2,12077
 101aef0:	10c5883a 	add	r2,r2,r3
 101aef4:	10800003 	ldbu	r2,0(r2)
 101aef8:	1007883a 	mov	r3,r2
 101aefc:	e0bffc17 	ldw	r2,-16(fp)
 101af00:	10800d43 	ldbu	r2,53(r2)
 101af04:	0084303a 	nor	r2,zero,r2
 101af08:	1884703a 	and	r2,r3,r2
 101af0c:	1007883a 	mov	r3,r2
 101af10:	008040b4 	movhi	r2,258
 101af14:	108bcb44 	addi	r2,r2,12077
 101af18:	1105883a 	add	r2,r2,r4
 101af1c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 101af20:	e0bffc17 	ldw	r2,-16(fp)
 101af24:	10800d03 	ldbu	r2,52(r2)
 101af28:	10c03fcc 	andi	r3,r2,255
 101af2c:	008040b4 	movhi	r2,258
 101af30:	108bcb44 	addi	r2,r2,12077
 101af34:	10c5883a 	add	r2,r2,r3
 101af38:	10800003 	ldbu	r2,0(r2)
 101af3c:	10803fcc 	andi	r2,r2,255
 101af40:	1004c03a 	cmpne	r2,r2,zero
 101af44:	10000c1e 	bne	r2,zero,101af78 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 101af48:	e0bffc17 	ldw	r2,-16(fp)
 101af4c:	10800d83 	ldbu	r2,54(r2)
 101af50:	0084303a 	nor	r2,zero,r2
 101af54:	1007883a 	mov	r3,r2
 101af58:	008040b4 	movhi	r2,258
 101af5c:	108bcb04 	addi	r2,r2,12076
 101af60:	10800003 	ldbu	r2,0(r2)
 101af64:	1884703a 	and	r2,r3,r2
 101af68:	1007883a 	mov	r3,r2
 101af6c:	008040b4 	movhi	r2,258
 101af70:	108bcb04 	addi	r2,r2,12076
 101af74:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 101af78:	e0bffc17 	ldw	r2,-16(fp)
 101af7c:	10800717 	ldw	r2,28(r2)
 101af80:	1005003a 	cmpeq	r2,r2,zero
 101af84:	1000041e 	bne	r2,zero,101af98 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 101af88:	e0bffc17 	ldw	r2,-16(fp)
 101af8c:	11400717 	ldw	r5,28(r2)
 101af90:	e13ffc17 	ldw	r4,-16(fp)
 101af94:	10155640 	call	1015564 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 101af98:	e0bffc17 	ldw	r2,-16(fp)
 101af9c:	10800817 	ldw	r2,32(r2)
 101afa0:	1005003a 	cmpeq	r2,r2,zero
 101afa4:	1000041e 	bne	r2,zero,101afb8 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 101afa8:	e0bffc17 	ldw	r2,-16(fp)
 101afac:	11400817 	ldw	r5,32(r2)
 101afb0:	e13ffc17 	ldw	r4,-16(fp)
 101afb4:	101561c0 	call	101561c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 101afb8:	e0bffc17 	ldw	r2,-16(fp)
 101afbc:	10800a17 	ldw	r2,40(r2)
 101afc0:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 101afc4:	e0bffd17 	ldw	r2,-12(fp)
 101afc8:	1005003a 	cmpeq	r2,r2,zero
 101afcc:	1000021e 	bne	r2,zero,101afd8 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 101afd0:	e13ffd17 	ldw	r4,-12(fp)
 101afd4:	1017cb00 	call	1017cb0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 101afd8:	e0bffc17 	ldw	r2,-16(fp)
 101afdc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 101afe0:	e0bffc17 	ldw	r2,-16(fp)
 101afe4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 101afe8:	e0bffc17 	ldw	r2,-16(fp)
 101afec:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 101aff0:	008040b4 	movhi	r2,258
 101aff4:	108bbf04 	addi	r2,r2,12028
 101aff8:	10800003 	ldbu	r2,0(r2)
 101affc:	10803fcc 	andi	r2,r2,255
 101b000:	10803fe0 	cmpeqi	r2,r2,255
 101b004:	1000081e 	bne	r2,zero,101b028 <OSTaskDel+0x280>
        OSLockNesting++;
 101b008:	008040b4 	movhi	r2,258
 101b00c:	108bbf04 	addi	r2,r2,12028
 101b010:	10800003 	ldbu	r2,0(r2)
 101b014:	10800044 	addi	r2,r2,1
 101b018:	1007883a 	mov	r3,r2
 101b01c:	008040b4 	movhi	r2,258
 101b020:	108bbf04 	addi	r2,r2,12028
 101b024:	10c00005 	stb	r3,0(r2)
 101b028:	e0bffb17 	ldw	r2,-20(fp)
 101b02c:	e0bff715 	stw	r2,-36(fp)
 101b030:	e0bff717 	ldw	r2,-36(fp)
 101b034:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 101b038:	10151500 	call	1015150 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b03c:	0005303a 	rdctl	r2,status
 101b040:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b044:	e0fff617 	ldw	r3,-40(fp)
 101b048:	00bfff84 	movi	r2,-2
 101b04c:	1884703a 	and	r2,r3,r2
 101b050:	1001703a 	wrctl	status,r2
  
  return context;
 101b054:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 101b058:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 101b05c:	008040b4 	movhi	r2,258
 101b060:	108bbf04 	addi	r2,r2,12028
 101b064:	10800003 	ldbu	r2,0(r2)
 101b068:	10803fcc 	andi	r2,r2,255
 101b06c:	1005003a 	cmpeq	r2,r2,zero
 101b070:	1000081e 	bne	r2,zero,101b094 <OSTaskDel+0x2ec>
        OSLockNesting--;
 101b074:	008040b4 	movhi	r2,258
 101b078:	108bbf04 	addi	r2,r2,12028
 101b07c:	10800003 	ldbu	r2,0(r2)
 101b080:	10bfffc4 	addi	r2,r2,-1
 101b084:	1007883a 	mov	r3,r2
 101b088:	008040b4 	movhi	r2,258
 101b08c:	108bbf04 	addi	r2,r2,12028
 101b090:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 101b094:	e13ffc17 	ldw	r4,-16(fp)
 101b098:	101e3a00 	call	101e3a0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 101b09c:	008040b4 	movhi	r2,258
 101b0a0:	108bc744 	addi	r2,r2,12061
 101b0a4:	10800003 	ldbu	r2,0(r2)
 101b0a8:	10bfffc4 	addi	r2,r2,-1
 101b0ac:	1007883a 	mov	r3,r2
 101b0b0:	008040b4 	movhi	r2,258
 101b0b4:	108bc744 	addi	r2,r2,12061
 101b0b8:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 101b0bc:	e0bffe03 	ldbu	r2,-8(fp)
 101b0c0:	00c040f4 	movhi	r3,259
 101b0c4:	18ea5804 	addi	r3,r3,-22176
 101b0c8:	1085883a 	add	r2,r2,r2
 101b0cc:	1085883a 	add	r2,r2,r2
 101b0d0:	10c5883a 	add	r2,r2,r3
 101b0d4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 101b0d8:	e0bffc17 	ldw	r2,-16(fp)
 101b0dc:	10800617 	ldw	r2,24(r2)
 101b0e0:	1004c03a 	cmpne	r2,r2,zero
 101b0e4:	1000091e 	bne	r2,zero,101b10c <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 101b0e8:	e0bffc17 	ldw	r2,-16(fp)
 101b0ec:	10800517 	ldw	r2,20(r2)
 101b0f0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 101b0f4:	e0bffc17 	ldw	r2,-16(fp)
 101b0f8:	10c00517 	ldw	r3,20(r2)
 101b0fc:	008040b4 	movhi	r2,258
 101b100:	108bc204 	addi	r2,r2,12040
 101b104:	10c00015 	stw	r3,0(r2)
 101b108:	00000a06 	br	101b134 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 101b10c:	e0bffc17 	ldw	r2,-16(fp)
 101b110:	10c00617 	ldw	r3,24(r2)
 101b114:	e0bffc17 	ldw	r2,-16(fp)
 101b118:	10800517 	ldw	r2,20(r2)
 101b11c:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 101b120:	e0bffc17 	ldw	r2,-16(fp)
 101b124:	10c00517 	ldw	r3,20(r2)
 101b128:	e0bffc17 	ldw	r2,-16(fp)
 101b12c:	10800617 	ldw	r2,24(r2)
 101b130:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 101b134:	008040b4 	movhi	r2,258
 101b138:	108bc604 	addi	r2,r2,12056
 101b13c:	10c00017 	ldw	r3,0(r2)
 101b140:	e0bffc17 	ldw	r2,-16(fp)
 101b144:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 101b148:	00c040b4 	movhi	r3,258
 101b14c:	18cbc604 	addi	r3,r3,12056
 101b150:	e0bffc17 	ldw	r2,-16(fp)
 101b154:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 101b158:	e0fffc17 	ldw	r3,-16(fp)
 101b15c:	00800fc4 	movi	r2,63
 101b160:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 101b164:	e0bffc17 	ldw	r2,-16(fp)
 101b168:	10001345 	stb	zero,77(r2)
 101b16c:	e0bffb17 	ldw	r2,-20(fp)
 101b170:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b174:	e0bff517 	ldw	r2,-44(fp)
 101b178:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 101b17c:	008040b4 	movhi	r2,258
 101b180:	108bbf44 	addi	r2,r2,12029
 101b184:	10800003 	ldbu	r2,0(r2)
 101b188:	10803fcc 	andi	r2,r2,255
 101b18c:	10800058 	cmpnei	r2,r2,1
 101b190:	1000011e 	bne	r2,zero,101b198 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 101b194:	1015bac0 	call	1015bac <OS_Sched>
    }
    return (OS_ERR_NONE);
 101b198:	e03fff15 	stw	zero,-4(fp)
 101b19c:	e0bfff17 	ldw	r2,-4(fp)
}
 101b1a0:	e037883a 	mov	sp,fp
 101b1a4:	dfc00117 	ldw	ra,4(sp)
 101b1a8:	df000017 	ldw	fp,0(sp)
 101b1ac:	dec00204 	addi	sp,sp,8
 101b1b0:	f800283a 	ret

0101b1b4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 101b1b4:	defff404 	addi	sp,sp,-48
 101b1b8:	df000b15 	stw	fp,44(sp)
 101b1bc:	df000b04 	addi	fp,sp,44
 101b1c0:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101b1c4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 101b1c8:	e0bffe03 	ldbu	r2,-8(fp)
 101b1cc:	10800518 	cmpnei	r2,r2,20
 101b1d0:	1000031e 	bne	r2,zero,101b1e0 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 101b1d4:	00800f84 	movi	r2,62
 101b1d8:	e0bfff15 	stw	r2,-4(fp)
 101b1dc:	00004c06 	br	101b310 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 101b1e0:	e0bffe03 	ldbu	r2,-8(fp)
 101b1e4:	10800530 	cmpltui	r2,r2,20
 101b1e8:	1000061e 	bne	r2,zero,101b204 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 101b1ec:	e0bffe03 	ldbu	r2,-8(fp)
 101b1f0:	10803fe0 	cmpeqi	r2,r2,255
 101b1f4:	1000031e 	bne	r2,zero,101b204 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 101b1f8:	00800a84 	movi	r2,42
 101b1fc:	e0bfff15 	stw	r2,-4(fp)
 101b200:	00004306 	br	101b310 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 101b204:	e0bffe03 	ldbu	r2,-8(fp)
 101b208:	10803fd8 	cmpnei	r2,r2,255
 101b20c:	1000141e 	bne	r2,zero,101b260 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b210:	0005303a 	rdctl	r2,status
 101b214:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b218:	e0fffa17 	ldw	r3,-24(fp)
 101b21c:	00bfff84 	movi	r2,-2
 101b220:	1884703a 	and	r2,r3,r2
 101b224:	1001703a 	wrctl	status,r2
  
  return context;
 101b228:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 101b22c:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 101b230:	008040b4 	movhi	r2,258
 101b234:	108bce04 	addi	r2,r2,12088
 101b238:	10800017 	ldw	r2,0(r2)
 101b23c:	10800dc3 	ldbu	r2,55(r2)
 101b240:	e0bffd05 	stb	r2,-12(fp)
 101b244:	e0bffb17 	ldw	r2,-20(fp)
 101b248:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b24c:	e0bff917 	ldw	r2,-28(fp)
 101b250:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 101b254:	e0bffd03 	ldbu	r2,-12(fp)
 101b258:	e0bfff15 	stw	r2,-4(fp)
 101b25c:	00002c06 	br	101b310 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b260:	0005303a 	rdctl	r2,status
 101b264:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b268:	e0fff817 	ldw	r3,-32(fp)
 101b26c:	00bfff84 	movi	r2,-2
 101b270:	1884703a 	and	r2,r3,r2
 101b274:	1001703a 	wrctl	status,r2
  
  return context;
 101b278:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 101b27c:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 101b280:	e0bffe03 	ldbu	r2,-8(fp)
 101b284:	00c040f4 	movhi	r3,259
 101b288:	18ea5804 	addi	r3,r3,-22176
 101b28c:	1085883a 	add	r2,r2,r2
 101b290:	1085883a 	add	r2,r2,r2
 101b294:	10c5883a 	add	r2,r2,r3
 101b298:	10800017 	ldw	r2,0(r2)
 101b29c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 101b2a0:	e0bffc17 	ldw	r2,-16(fp)
 101b2a4:	1004c03a 	cmpne	r2,r2,zero
 101b2a8:	1000071e 	bne	r2,zero,101b2c8 <OSTaskDelReq+0x114>
 101b2ac:	e0bffb17 	ldw	r2,-20(fp)
 101b2b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b2b4:	e0bff717 	ldw	r2,-36(fp)
 101b2b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 101b2bc:	008010c4 	movi	r2,67
 101b2c0:	e0bfff15 	stw	r2,-4(fp)
 101b2c4:	00001206 	br	101b310 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 101b2c8:	e0bffc17 	ldw	r2,-16(fp)
 101b2cc:	10800058 	cmpnei	r2,r2,1
 101b2d0:	1000071e 	bne	r2,zero,101b2f0 <OSTaskDelReq+0x13c>
 101b2d4:	e0bffb17 	ldw	r2,-20(fp)
 101b2d8:	e0bff615 	stw	r2,-40(fp)
 101b2dc:	e0bff617 	ldw	r2,-40(fp)
 101b2e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 101b2e4:	00800f44 	movi	r2,61
 101b2e8:	e0bfff15 	stw	r2,-4(fp)
 101b2ec:	00000806 	br	101b310 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 101b2f0:	e0fffc17 	ldw	r3,-16(fp)
 101b2f4:	00800fc4 	movi	r2,63
 101b2f8:	18800dc5 	stb	r2,55(r3)
 101b2fc:	e0bffb17 	ldw	r2,-20(fp)
 101b300:	e0bff515 	stw	r2,-44(fp)
 101b304:	e0bff517 	ldw	r2,-44(fp)
 101b308:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101b30c:	e03fff15 	stw	zero,-4(fp)
 101b310:	e0bfff17 	ldw	r2,-4(fp)
}
 101b314:	e037883a 	mov	sp,fp
 101b318:	df000017 	ldw	fp,0(sp)
 101b31c:	dec00104 	addi	sp,sp,4
 101b320:	f800283a 	ret

0101b324 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 101b324:	defff304 	addi	sp,sp,-52
 101b328:	dfc00c15 	stw	ra,48(sp)
 101b32c:	df000b15 	stw	fp,44(sp)
 101b330:	df000b04 	addi	fp,sp,44
 101b334:	e17ffd15 	stw	r5,-12(fp)
 101b338:	e1bffe15 	stw	r6,-8(fp)
 101b33c:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 101b340:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 101b344:	e0bffe17 	ldw	r2,-8(fp)
 101b348:	1004c03a 	cmpne	r2,r2,zero
 101b34c:	1000021e 	bne	r2,zero,101b358 <OSTaskNameGet+0x34>
        return (0);
 101b350:	e03fff15 	stw	zero,-4(fp)
 101b354:	00005b06 	br	101b4c4 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 101b358:	e0bffc03 	ldbu	r2,-16(fp)
 101b35c:	10800570 	cmpltui	r2,r2,21
 101b360:	1000081e 	bne	r2,zero,101b384 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 101b364:	e0bffc03 	ldbu	r2,-16(fp)
 101b368:	10803fe0 	cmpeqi	r2,r2,255
 101b36c:	1000051e 	bne	r2,zero,101b384 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 101b370:	e0fffe17 	ldw	r3,-8(fp)
 101b374:	00800a84 	movi	r2,42
 101b378:	18800005 	stb	r2,0(r3)
            return (0);
 101b37c:	e03fff15 	stw	zero,-4(fp)
 101b380:	00005006 	br	101b4c4 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 101b384:	e0bffd17 	ldw	r2,-12(fp)
 101b388:	1004c03a 	cmpne	r2,r2,zero
 101b38c:	1000051e 	bne	r2,zero,101b3a4 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 101b390:	e0fffe17 	ldw	r3,-8(fp)
 101b394:	00800304 	movi	r2,12
 101b398:	18800005 	stb	r2,0(r3)
        return (0);
 101b39c:	e03fff15 	stw	zero,-4(fp)
 101b3a0:	00004806 	br	101b4c4 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 101b3a4:	008040b4 	movhi	r2,258
 101b3a8:	108bcd04 	addi	r2,r2,12084
 101b3ac:	10800003 	ldbu	r2,0(r2)
 101b3b0:	10803fcc 	andi	r2,r2,255
 101b3b4:	1005003a 	cmpeq	r2,r2,zero
 101b3b8:	1000051e 	bne	r2,zero,101b3d0 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 101b3bc:	e0fffe17 	ldw	r3,-8(fp)
 101b3c0:	00800444 	movi	r2,17
 101b3c4:	18800005 	stb	r2,0(r3)
        return (0);
 101b3c8:	e03fff15 	stw	zero,-4(fp)
 101b3cc:	00003d06 	br	101b4c4 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b3d0:	0005303a 	rdctl	r2,status
 101b3d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b3d8:	e0fff817 	ldw	r3,-32(fp)
 101b3dc:	00bfff84 	movi	r2,-2
 101b3e0:	1884703a 	and	r2,r3,r2
 101b3e4:	1001703a 	wrctl	status,r2
  
  return context;
 101b3e8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 101b3ec:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 101b3f0:	e0bffc03 	ldbu	r2,-16(fp)
 101b3f4:	10803fd8 	cmpnei	r2,r2,255
 101b3f8:	1000051e 	bne	r2,zero,101b410 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 101b3fc:	008040b4 	movhi	r2,258
 101b400:	108bce04 	addi	r2,r2,12088
 101b404:	10800017 	ldw	r2,0(r2)
 101b408:	10800c83 	ldbu	r2,50(r2)
 101b40c:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101b410:	e0bffc03 	ldbu	r2,-16(fp)
 101b414:	00c040f4 	movhi	r3,259
 101b418:	18ea5804 	addi	r3,r3,-22176
 101b41c:	1085883a 	add	r2,r2,r2
 101b420:	1085883a 	add	r2,r2,r2
 101b424:	10c5883a 	add	r2,r2,r3
 101b428:	10800017 	ldw	r2,0(r2)
 101b42c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 101b430:	e0bffb17 	ldw	r2,-20(fp)
 101b434:	1004c03a 	cmpne	r2,r2,zero
 101b438:	1000091e 	bne	r2,zero,101b460 <OSTaskNameGet+0x13c>
 101b43c:	e0bff917 	ldw	r2,-28(fp)
 101b440:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b444:	e0bff717 	ldw	r2,-36(fp)
 101b448:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 101b44c:	e0fffe17 	ldw	r3,-8(fp)
 101b450:	008010c4 	movi	r2,67
 101b454:	18800005 	stb	r2,0(r3)
        return (0);
 101b458:	e03fff15 	stw	zero,-4(fp)
 101b45c:	00001906 	br	101b4c4 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 101b460:	e0bffb17 	ldw	r2,-20(fp)
 101b464:	10800058 	cmpnei	r2,r2,1
 101b468:	1000091e 	bne	r2,zero,101b490 <OSTaskNameGet+0x16c>
 101b46c:	e0bff917 	ldw	r2,-28(fp)
 101b470:	e0bff615 	stw	r2,-40(fp)
 101b474:	e0bff617 	ldw	r2,-40(fp)
 101b478:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 101b47c:	e0fffe17 	ldw	r3,-8(fp)
 101b480:	008010c4 	movi	r2,67
 101b484:	18800005 	stb	r2,0(r3)
        return (0);
 101b488:	e03fff15 	stw	zero,-4(fp)
 101b48c:	00000d06 	br	101b4c4 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 101b490:	e0bffb17 	ldw	r2,-20(fp)
 101b494:	11401304 	addi	r5,r2,76
 101b498:	e13ffd17 	ldw	r4,-12(fp)
 101b49c:	1015cf00 	call	1015cf0 <OS_StrCopy>
 101b4a0:	e0bffa05 	stb	r2,-24(fp)
 101b4a4:	e0bff917 	ldw	r2,-28(fp)
 101b4a8:	e0bff515 	stw	r2,-44(fp)
 101b4ac:	e0bff517 	ldw	r2,-44(fp)
 101b4b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101b4b4:	e0bffe17 	ldw	r2,-8(fp)
 101b4b8:	10000005 	stb	zero,0(r2)
    return (len);
 101b4bc:	e0bffa03 	ldbu	r2,-24(fp)
 101b4c0:	e0bfff15 	stw	r2,-4(fp)
 101b4c4:	e0bfff17 	ldw	r2,-4(fp)
}
 101b4c8:	e037883a 	mov	sp,fp
 101b4cc:	dfc00117 	ldw	ra,4(sp)
 101b4d0:	df000017 	ldw	fp,0(sp)
 101b4d4:	dec00204 	addi	sp,sp,8
 101b4d8:	f800283a 	ret

0101b4dc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 101b4dc:	defff304 	addi	sp,sp,-52
 101b4e0:	dfc00c15 	stw	ra,48(sp)
 101b4e4:	df000b15 	stw	fp,44(sp)
 101b4e8:	df000b04 	addi	fp,sp,44
 101b4ec:	e17ffe15 	stw	r5,-8(fp)
 101b4f0:	e1bfff15 	stw	r6,-4(fp)
 101b4f4:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 101b4f8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 101b4fc:	e0bfff17 	ldw	r2,-4(fp)
 101b500:	1005003a 	cmpeq	r2,r2,zero
 101b504:	1000611e 	bne	r2,zero,101b68c <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 101b508:	e0bffd03 	ldbu	r2,-12(fp)
 101b50c:	10800570 	cmpltui	r2,r2,21
 101b510:	1000071e 	bne	r2,zero,101b530 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 101b514:	e0bffd03 	ldbu	r2,-12(fp)
 101b518:	10803fe0 	cmpeqi	r2,r2,255
 101b51c:	1000041e 	bne	r2,zero,101b530 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 101b520:	e0ffff17 	ldw	r3,-4(fp)
 101b524:	00800a84 	movi	r2,42
 101b528:	18800005 	stb	r2,0(r3)
            return;
 101b52c:	00005706 	br	101b68c <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 101b530:	e0bffe17 	ldw	r2,-8(fp)
 101b534:	1004c03a 	cmpne	r2,r2,zero
 101b538:	1000041e 	bne	r2,zero,101b54c <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 101b53c:	e0ffff17 	ldw	r3,-4(fp)
 101b540:	00800304 	movi	r2,12
 101b544:	18800005 	stb	r2,0(r3)
        return;
 101b548:	00005006 	br	101b68c <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 101b54c:	008040b4 	movhi	r2,258
 101b550:	108bcd04 	addi	r2,r2,12084
 101b554:	10800003 	ldbu	r2,0(r2)
 101b558:	10803fcc 	andi	r2,r2,255
 101b55c:	1005003a 	cmpeq	r2,r2,zero
 101b560:	1000041e 	bne	r2,zero,101b574 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 101b564:	e0ffff17 	ldw	r3,-4(fp)
 101b568:	00800484 	movi	r2,18
 101b56c:	18800005 	stb	r2,0(r3)
        return;
 101b570:	00004606 	br	101b68c <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b574:	0005303a 	rdctl	r2,status
 101b578:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b57c:	e0fff917 	ldw	r3,-28(fp)
 101b580:	00bfff84 	movi	r2,-2
 101b584:	1884703a 	and	r2,r3,r2
 101b588:	1001703a 	wrctl	status,r2
  
  return context;
 101b58c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101b590:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 101b594:	e0bffd03 	ldbu	r2,-12(fp)
 101b598:	10803fd8 	cmpnei	r2,r2,255
 101b59c:	1000051e 	bne	r2,zero,101b5b4 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 101b5a0:	008040b4 	movhi	r2,258
 101b5a4:	108bce04 	addi	r2,r2,12088
 101b5a8:	10800017 	ldw	r2,0(r2)
 101b5ac:	10800c83 	ldbu	r2,50(r2)
 101b5b0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101b5b4:	e0bffd03 	ldbu	r2,-12(fp)
 101b5b8:	00c040f4 	movhi	r3,259
 101b5bc:	18ea5804 	addi	r3,r3,-22176
 101b5c0:	1085883a 	add	r2,r2,r2
 101b5c4:	1085883a 	add	r2,r2,r2
 101b5c8:	10c5883a 	add	r2,r2,r3
 101b5cc:	10800017 	ldw	r2,0(r2)
 101b5d0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 101b5d4:	e0bffb17 	ldw	r2,-20(fp)
 101b5d8:	1004c03a 	cmpne	r2,r2,zero
 101b5dc:	1000081e 	bne	r2,zero,101b600 <OSTaskNameSet+0x124>
 101b5e0:	e0bffa17 	ldw	r2,-24(fp)
 101b5e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b5e8:	e0bff817 	ldw	r2,-32(fp)
 101b5ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 101b5f0:	e0ffff17 	ldw	r3,-4(fp)
 101b5f4:	008010c4 	movi	r2,67
 101b5f8:	18800005 	stb	r2,0(r3)
        return;
 101b5fc:	00002306 	br	101b68c <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 101b600:	e0bffb17 	ldw	r2,-20(fp)
 101b604:	10800058 	cmpnei	r2,r2,1
 101b608:	1000081e 	bne	r2,zero,101b62c <OSTaskNameSet+0x150>
 101b60c:	e0bffa17 	ldw	r2,-24(fp)
 101b610:	e0bff715 	stw	r2,-36(fp)
 101b614:	e0bff717 	ldw	r2,-36(fp)
 101b618:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 101b61c:	e0ffff17 	ldw	r3,-4(fp)
 101b620:	008010c4 	movi	r2,67
 101b624:	18800005 	stb	r2,0(r3)
        return;
 101b628:	00001806 	br	101b68c <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 101b62c:	e13ffe17 	ldw	r4,-8(fp)
 101b630:	1015d700 	call	1015d70 <OS_StrLen>
 101b634:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 101b638:	e0bffc03 	ldbu	r2,-16(fp)
 101b63c:	10800830 	cmpltui	r2,r2,32
 101b640:	1000081e 	bne	r2,zero,101b664 <OSTaskNameSet+0x188>
 101b644:	e0bffa17 	ldw	r2,-24(fp)
 101b648:	e0bff615 	stw	r2,-40(fp)
 101b64c:	e0bff617 	ldw	r2,-40(fp)
 101b650:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 101b654:	e0ffff17 	ldw	r3,-4(fp)
 101b658:	00801044 	movi	r2,65
 101b65c:	18800005 	stb	r2,0(r3)
        return;
 101b660:	00000a06 	br	101b68c <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 101b664:	e0bffb17 	ldw	r2,-20(fp)
 101b668:	11001304 	addi	r4,r2,76
 101b66c:	e17ffe17 	ldw	r5,-8(fp)
 101b670:	1015cf00 	call	1015cf0 <OS_StrCopy>
 101b674:	e0bffa17 	ldw	r2,-24(fp)
 101b678:	e0bff515 	stw	r2,-44(fp)
 101b67c:	e0bff517 	ldw	r2,-44(fp)
 101b680:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101b684:	e0bfff17 	ldw	r2,-4(fp)
 101b688:	10000005 	stb	zero,0(r2)
}
 101b68c:	e037883a 	mov	sp,fp
 101b690:	dfc00117 	ldw	ra,4(sp)
 101b694:	df000017 	ldw	fp,0(sp)
 101b698:	dec00204 	addi	sp,sp,8
 101b69c:	f800283a 	ret

0101b6a0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 101b6a0:	defff304 	addi	sp,sp,-52
 101b6a4:	dfc00c15 	stw	ra,48(sp)
 101b6a8:	df000b15 	stw	fp,44(sp)
 101b6ac:	df000b04 	addi	fp,sp,44
 101b6b0:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 101b6b4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 101b6b8:	e0bffe03 	ldbu	r2,-8(fp)
 101b6bc:	10800530 	cmpltui	r2,r2,20
 101b6c0:	1000031e 	bne	r2,zero,101b6d0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 101b6c4:	00800a84 	movi	r2,42
 101b6c8:	e0bfff15 	stw	r2,-4(fp)
 101b6cc:	00007406 	br	101b8a0 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b6d0:	0005303a 	rdctl	r2,status
 101b6d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b6d8:	e0fffb17 	ldw	r3,-20(fp)
 101b6dc:	00bfff84 	movi	r2,-2
 101b6e0:	1884703a 	and	r2,r3,r2
 101b6e4:	1001703a 	wrctl	status,r2
  
  return context;
 101b6e8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101b6ec:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 101b6f0:	e0bffe03 	ldbu	r2,-8(fp)
 101b6f4:	00c040f4 	movhi	r3,259
 101b6f8:	18ea5804 	addi	r3,r3,-22176
 101b6fc:	1085883a 	add	r2,r2,r2
 101b700:	1085883a 	add	r2,r2,r2
 101b704:	10c5883a 	add	r2,r2,r3
 101b708:	10800017 	ldw	r2,0(r2)
 101b70c:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 101b710:	e0bffd17 	ldw	r2,-12(fp)
 101b714:	1004c03a 	cmpne	r2,r2,zero
 101b718:	1000071e 	bne	r2,zero,101b738 <OSTaskResume+0x98>
 101b71c:	e0bffc17 	ldw	r2,-16(fp)
 101b720:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b724:	e0bffa17 	ldw	r2,-24(fp)
 101b728:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 101b72c:	00801184 	movi	r2,70
 101b730:	e0bfff15 	stw	r2,-4(fp)
 101b734:	00005a06 	br	101b8a0 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 101b738:	e0bffd17 	ldw	r2,-12(fp)
 101b73c:	10800058 	cmpnei	r2,r2,1
 101b740:	1000071e 	bne	r2,zero,101b760 <OSTaskResume+0xc0>
 101b744:	e0bffc17 	ldw	r2,-16(fp)
 101b748:	e0bff915 	stw	r2,-28(fp)
 101b74c:	e0bff917 	ldw	r2,-28(fp)
 101b750:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101b754:	008010c4 	movi	r2,67
 101b758:	e0bfff15 	stw	r2,-4(fp)
 101b75c:	00005006 	br	101b8a0 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 101b760:	e0bffd17 	ldw	r2,-12(fp)
 101b764:	10800c03 	ldbu	r2,48(r2)
 101b768:	10803fcc 	andi	r2,r2,255
 101b76c:	1080020c 	andi	r2,r2,8
 101b770:	1005003a 	cmpeq	r2,r2,zero
 101b774:	1000441e 	bne	r2,zero,101b888 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 101b778:	e0bffd17 	ldw	r2,-12(fp)
 101b77c:	10c00c03 	ldbu	r3,48(r2)
 101b780:	00bffdc4 	movi	r2,-9
 101b784:	1884703a 	and	r2,r3,r2
 101b788:	1007883a 	mov	r3,r2
 101b78c:	e0bffd17 	ldw	r2,-12(fp)
 101b790:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 101b794:	e0bffd17 	ldw	r2,-12(fp)
 101b798:	10800c03 	ldbu	r2,48(r2)
 101b79c:	10803fcc 	andi	r2,r2,255
 101b7a0:	1004c03a 	cmpne	r2,r2,zero
 101b7a4:	1000321e 	bne	r2,zero,101b870 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 101b7a8:	e0bffd17 	ldw	r2,-12(fp)
 101b7ac:	10800b8b 	ldhu	r2,46(r2)
 101b7b0:	10bfffcc 	andi	r2,r2,65535
 101b7b4:	1004c03a 	cmpne	r2,r2,zero
 101b7b8:	1000281e 	bne	r2,zero,101b85c <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 101b7bc:	e0bffd17 	ldw	r2,-12(fp)
 101b7c0:	10c00d83 	ldbu	r3,54(r2)
 101b7c4:	008040b4 	movhi	r2,258
 101b7c8:	108bcb04 	addi	r2,r2,12076
 101b7cc:	10800003 	ldbu	r2,0(r2)
 101b7d0:	1884b03a 	or	r2,r3,r2
 101b7d4:	1007883a 	mov	r3,r2
 101b7d8:	008040b4 	movhi	r2,258
 101b7dc:	108bcb04 	addi	r2,r2,12076
 101b7e0:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 101b7e4:	e0bffd17 	ldw	r2,-12(fp)
 101b7e8:	10800d03 	ldbu	r2,52(r2)
 101b7ec:	11003fcc 	andi	r4,r2,255
 101b7f0:	e0bffd17 	ldw	r2,-12(fp)
 101b7f4:	10800d03 	ldbu	r2,52(r2)
 101b7f8:	10c03fcc 	andi	r3,r2,255
 101b7fc:	008040b4 	movhi	r2,258
 101b800:	108bcb44 	addi	r2,r2,12077
 101b804:	10c5883a 	add	r2,r2,r3
 101b808:	10c00003 	ldbu	r3,0(r2)
 101b80c:	e0bffd17 	ldw	r2,-12(fp)
 101b810:	10800d43 	ldbu	r2,53(r2)
 101b814:	1884b03a 	or	r2,r3,r2
 101b818:	1007883a 	mov	r3,r2
 101b81c:	008040b4 	movhi	r2,258
 101b820:	108bcb44 	addi	r2,r2,12077
 101b824:	1105883a 	add	r2,r2,r4
 101b828:	10c00005 	stb	r3,0(r2)
 101b82c:	e0bffc17 	ldw	r2,-16(fp)
 101b830:	e0bff815 	stw	r2,-32(fp)
 101b834:	e0bff817 	ldw	r2,-32(fp)
 101b838:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 101b83c:	008040b4 	movhi	r2,258
 101b840:	108bbf44 	addi	r2,r2,12029
 101b844:	10800003 	ldbu	r2,0(r2)
 101b848:	10803fcc 	andi	r2,r2,255
 101b84c:	10800058 	cmpnei	r2,r2,1
 101b850:	10000b1e 	bne	r2,zero,101b880 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 101b854:	1015bac0 	call	1015bac <OS_Sched>
 101b858:	00000906 	br	101b880 <OSTaskResume+0x1e0>
 101b85c:	e0bffc17 	ldw	r2,-16(fp)
 101b860:	e0bff715 	stw	r2,-36(fp)
 101b864:	e0bff717 	ldw	r2,-36(fp)
 101b868:	1001703a 	wrctl	status,r2
 101b86c:	00000406 	br	101b880 <OSTaskResume+0x1e0>
 101b870:	e0bffc17 	ldw	r2,-16(fp)
 101b874:	e0bff615 	stw	r2,-40(fp)
 101b878:	e0bff617 	ldw	r2,-40(fp)
 101b87c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 101b880:	e03fff15 	stw	zero,-4(fp)
 101b884:	00000606 	br	101b8a0 <OSTaskResume+0x200>
 101b888:	e0bffc17 	ldw	r2,-16(fp)
 101b88c:	e0bff515 	stw	r2,-44(fp)
 101b890:	e0bff517 	ldw	r2,-44(fp)
 101b894:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 101b898:	00801104 	movi	r2,68
 101b89c:	e0bfff15 	stw	r2,-4(fp)
 101b8a0:	e0bfff17 	ldw	r2,-4(fp)
}
 101b8a4:	e037883a 	mov	sp,fp
 101b8a8:	dfc00117 	ldw	ra,4(sp)
 101b8ac:	df000017 	ldw	fp,0(sp)
 101b8b0:	dec00204 	addi	sp,sp,8
 101b8b4:	f800283a 	ret

0101b8b8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 101b8b8:	defff204 	addi	sp,sp,-56
 101b8bc:	df000d15 	stw	fp,52(sp)
 101b8c0:	df000d04 	addi	fp,sp,52
 101b8c4:	e17ffe15 	stw	r5,-8(fp)
 101b8c8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 101b8cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 101b8d0:	e0bffd03 	ldbu	r2,-12(fp)
 101b8d4:	10800570 	cmpltui	r2,r2,21
 101b8d8:	1000061e 	bne	r2,zero,101b8f4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 101b8dc:	e0bffd03 	ldbu	r2,-12(fp)
 101b8e0:	10803fe0 	cmpeqi	r2,r2,255
 101b8e4:	1000031e 	bne	r2,zero,101b8f4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 101b8e8:	00800a84 	movi	r2,42
 101b8ec:	e0bfff15 	stw	r2,-4(fp)
 101b8f0:	00006b06 	br	101baa0 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 101b8f4:	e0bffe17 	ldw	r2,-8(fp)
 101b8f8:	1004c03a 	cmpne	r2,r2,zero
 101b8fc:	1000031e 	bne	r2,zero,101b90c <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 101b900:	00800244 	movi	r2,9
 101b904:	e0bfff15 	stw	r2,-4(fp)
 101b908:	00006506 	br	101baa0 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 101b90c:	e0bffe17 	ldw	r2,-8(fp)
 101b910:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 101b914:	e0bffe17 	ldw	r2,-8(fp)
 101b918:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b91c:	0005303a 	rdctl	r2,status
 101b920:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b924:	e0fff717 	ldw	r3,-36(fp)
 101b928:	00bfff84 	movi	r2,-2
 101b92c:	1884703a 	and	r2,r3,r2
 101b930:	1001703a 	wrctl	status,r2
  
  return context;
 101b934:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 101b938:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 101b93c:	e0bffd03 	ldbu	r2,-12(fp)
 101b940:	10803fd8 	cmpnei	r2,r2,255
 101b944:	1000051e 	bne	r2,zero,101b95c <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 101b948:	008040b4 	movhi	r2,258
 101b94c:	108bce04 	addi	r2,r2,12088
 101b950:	10800017 	ldw	r2,0(r2)
 101b954:	10800c83 	ldbu	r2,50(r2)
 101b958:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101b95c:	e0bffd03 	ldbu	r2,-12(fp)
 101b960:	00c040f4 	movhi	r3,259
 101b964:	18ea5804 	addi	r3,r3,-22176
 101b968:	1085883a 	add	r2,r2,r2
 101b96c:	1085883a 	add	r2,r2,r2
 101b970:	10c5883a 	add	r2,r2,r3
 101b974:	10800017 	ldw	r2,0(r2)
 101b978:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 101b97c:	e0bffc17 	ldw	r2,-16(fp)
 101b980:	1004c03a 	cmpne	r2,r2,zero
 101b984:	1000071e 	bne	r2,zero,101b9a4 <OSTaskStkChk+0xec>
 101b988:	e0bff817 	ldw	r2,-32(fp)
 101b98c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b990:	e0bff617 	ldw	r2,-40(fp)
 101b994:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101b998:	008010c4 	movi	r2,67
 101b99c:	e0bfff15 	stw	r2,-4(fp)
 101b9a0:	00003f06 	br	101baa0 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 101b9a4:	e0bffc17 	ldw	r2,-16(fp)
 101b9a8:	10800058 	cmpnei	r2,r2,1
 101b9ac:	1000071e 	bne	r2,zero,101b9cc <OSTaskStkChk+0x114>
 101b9b0:	e0bff817 	ldw	r2,-32(fp)
 101b9b4:	e0bff515 	stw	r2,-44(fp)
 101b9b8:	e0bff517 	ldw	r2,-44(fp)
 101b9bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101b9c0:	008010c4 	movi	r2,67
 101b9c4:	e0bfff15 	stw	r2,-4(fp)
 101b9c8:	00003506 	br	101baa0 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 101b9cc:	e0bffc17 	ldw	r2,-16(fp)
 101b9d0:	1080040b 	ldhu	r2,16(r2)
 101b9d4:	10bfffcc 	andi	r2,r2,65535
 101b9d8:	1080004c 	andi	r2,r2,1
 101b9dc:	1004c03a 	cmpne	r2,r2,zero
 101b9e0:	1000071e 	bne	r2,zero,101ba00 <OSTaskStkChk+0x148>
 101b9e4:	e0bff817 	ldw	r2,-32(fp)
 101b9e8:	e0bff415 	stw	r2,-48(fp)
 101b9ec:	e0bff417 	ldw	r2,-48(fp)
 101b9f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 101b9f4:	00801144 	movi	r2,69
 101b9f8:	e0bfff15 	stw	r2,-4(fp)
 101b9fc:	00002806 	br	101baa0 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 101ba00:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 101ba04:	e0bffc17 	ldw	r2,-16(fp)
 101ba08:	10800317 	ldw	r2,12(r2)
 101ba0c:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 101ba10:	e0bffc17 	ldw	r2,-16(fp)
 101ba14:	10800217 	ldw	r2,8(r2)
 101ba18:	e0bffb15 	stw	r2,-20(fp)
 101ba1c:	e0bff817 	ldw	r2,-32(fp)
 101ba20:	e0bff315 	stw	r2,-52(fp)
 101ba24:	e0bff317 	ldw	r2,-52(fp)
 101ba28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 101ba2c:	00000306 	br	101ba3c <OSTaskStkChk+0x184>
        nfree++;
 101ba30:	e0bffa17 	ldw	r2,-24(fp)
 101ba34:	10800044 	addi	r2,r2,1
 101ba38:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 101ba3c:	e0bffb17 	ldw	r2,-20(fp)
 101ba40:	10800017 	ldw	r2,0(r2)
 101ba44:	1005003a 	cmpeq	r2,r2,zero
 101ba48:	1007883a 	mov	r3,r2
 101ba4c:	e0bffb17 	ldw	r2,-20(fp)
 101ba50:	10800104 	addi	r2,r2,4
 101ba54:	e0bffb15 	stw	r2,-20(fp)
 101ba58:	18803fcc 	andi	r2,r3,255
 101ba5c:	1004c03a 	cmpne	r2,r2,zero
 101ba60:	103ff31e 	bne	r2,zero,101ba30 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 101ba64:	e0bffa17 	ldw	r2,-24(fp)
 101ba68:	1085883a 	add	r2,r2,r2
 101ba6c:	1085883a 	add	r2,r2,r2
 101ba70:	1007883a 	mov	r3,r2
 101ba74:	e0bffe17 	ldw	r2,-8(fp)
 101ba78:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 101ba7c:	e0fff917 	ldw	r3,-28(fp)
 101ba80:	e0bffa17 	ldw	r2,-24(fp)
 101ba84:	1885c83a 	sub	r2,r3,r2
 101ba88:	1085883a 	add	r2,r2,r2
 101ba8c:	1085883a 	add	r2,r2,r2
 101ba90:	1007883a 	mov	r3,r2
 101ba94:	e0bffe17 	ldw	r2,-8(fp)
 101ba98:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 101ba9c:	e03fff15 	stw	zero,-4(fp)
 101baa0:	e0bfff17 	ldw	r2,-4(fp)
}
 101baa4:	e037883a 	mov	sp,fp
 101baa8:	df000017 	ldw	fp,0(sp)
 101baac:	dec00104 	addi	sp,sp,4
 101bab0:	f800283a 	ret

0101bab4 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 101bab4:	defff404 	addi	sp,sp,-48
 101bab8:	dfc00b15 	stw	ra,44(sp)
 101babc:	df000a15 	stw	fp,40(sp)
 101bac0:	df000a04 	addi	fp,sp,40
 101bac4:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101bac8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 101bacc:	e0bffe03 	ldbu	r2,-8(fp)
 101bad0:	10800518 	cmpnei	r2,r2,20
 101bad4:	1000031e 	bne	r2,zero,101bae4 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 101bad8:	008011c4 	movi	r2,71
 101badc:	e0bfff15 	stw	r2,-4(fp)
 101bae0:	00007906 	br	101bcc8 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 101bae4:	e0bffe03 	ldbu	r2,-8(fp)
 101bae8:	10800530 	cmpltui	r2,r2,20
 101baec:	1000061e 	bne	r2,zero,101bb08 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 101baf0:	e0bffe03 	ldbu	r2,-8(fp)
 101baf4:	10803fe0 	cmpeqi	r2,r2,255
 101baf8:	1000031e 	bne	r2,zero,101bb08 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 101bafc:	00800a84 	movi	r2,42
 101bb00:	e0bfff15 	stw	r2,-4(fp)
 101bb04:	00007006 	br	101bcc8 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101bb08:	0005303a 	rdctl	r2,status
 101bb0c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101bb10:	e0fff917 	ldw	r3,-28(fp)
 101bb14:	00bfff84 	movi	r2,-2
 101bb18:	1884703a 	and	r2,r3,r2
 101bb1c:	1001703a 	wrctl	status,r2
  
  return context;
 101bb20:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 101bb24:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 101bb28:	e0bffe03 	ldbu	r2,-8(fp)
 101bb2c:	10803fd8 	cmpnei	r2,r2,255
 101bb30:	1000081e 	bne	r2,zero,101bb54 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 101bb34:	008040b4 	movhi	r2,258
 101bb38:	108bce04 	addi	r2,r2,12088
 101bb3c:	10800017 	ldw	r2,0(r2)
 101bb40:	10800c83 	ldbu	r2,50(r2)
 101bb44:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 101bb48:	00800044 	movi	r2,1
 101bb4c:	e0bffd05 	stb	r2,-12(fp)
 101bb50:	00000b06 	br	101bb80 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 101bb54:	008040b4 	movhi	r2,258
 101bb58:	108bce04 	addi	r2,r2,12088
 101bb5c:	10800017 	ldw	r2,0(r2)
 101bb60:	10800c83 	ldbu	r2,50(r2)
 101bb64:	10c03fcc 	andi	r3,r2,255
 101bb68:	e0bffe03 	ldbu	r2,-8(fp)
 101bb6c:	1880031e 	bne	r3,r2,101bb7c <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 101bb70:	00800044 	movi	r2,1
 101bb74:	e0bffd05 	stb	r2,-12(fp)
 101bb78:	00000106 	br	101bb80 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 101bb7c:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101bb80:	e0bffe03 	ldbu	r2,-8(fp)
 101bb84:	00c040f4 	movhi	r3,259
 101bb88:	18ea5804 	addi	r3,r3,-22176
 101bb8c:	1085883a 	add	r2,r2,r2
 101bb90:	1085883a 	add	r2,r2,r2
 101bb94:	10c5883a 	add	r2,r2,r3
 101bb98:	10800017 	ldw	r2,0(r2)
 101bb9c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 101bba0:	e0bffc17 	ldw	r2,-16(fp)
 101bba4:	1004c03a 	cmpne	r2,r2,zero
 101bba8:	1000071e 	bne	r2,zero,101bbc8 <OSTaskSuspend+0x114>
 101bbac:	e0bffa17 	ldw	r2,-24(fp)
 101bbb0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101bbb4:	e0bff817 	ldw	r2,-32(fp)
 101bbb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 101bbbc:	00801204 	movi	r2,72
 101bbc0:	e0bfff15 	stw	r2,-4(fp)
 101bbc4:	00004006 	br	101bcc8 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 101bbc8:	e0bffc17 	ldw	r2,-16(fp)
 101bbcc:	10800058 	cmpnei	r2,r2,1
 101bbd0:	1000071e 	bne	r2,zero,101bbf0 <OSTaskSuspend+0x13c>
 101bbd4:	e0bffa17 	ldw	r2,-24(fp)
 101bbd8:	e0bff715 	stw	r2,-36(fp)
 101bbdc:	e0bff717 	ldw	r2,-36(fp)
 101bbe0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101bbe4:	008010c4 	movi	r2,67
 101bbe8:	e0bfff15 	stw	r2,-4(fp)
 101bbec:	00003606 	br	101bcc8 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 101bbf0:	e0bffc17 	ldw	r2,-16(fp)
 101bbf4:	10800d03 	ldbu	r2,52(r2)
 101bbf8:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 101bbfc:	e13ffb03 	ldbu	r4,-20(fp)
 101bc00:	e0fffb03 	ldbu	r3,-20(fp)
 101bc04:	008040b4 	movhi	r2,258
 101bc08:	108bcb44 	addi	r2,r2,12077
 101bc0c:	10c5883a 	add	r2,r2,r3
 101bc10:	10800003 	ldbu	r2,0(r2)
 101bc14:	1007883a 	mov	r3,r2
 101bc18:	e0bffc17 	ldw	r2,-16(fp)
 101bc1c:	10800d43 	ldbu	r2,53(r2)
 101bc20:	0084303a 	nor	r2,zero,r2
 101bc24:	1884703a 	and	r2,r3,r2
 101bc28:	1007883a 	mov	r3,r2
 101bc2c:	008040b4 	movhi	r2,258
 101bc30:	108bcb44 	addi	r2,r2,12077
 101bc34:	1105883a 	add	r2,r2,r4
 101bc38:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 101bc3c:	e0fffb03 	ldbu	r3,-20(fp)
 101bc40:	008040b4 	movhi	r2,258
 101bc44:	108bcb44 	addi	r2,r2,12077
 101bc48:	10c5883a 	add	r2,r2,r3
 101bc4c:	10800003 	ldbu	r2,0(r2)
 101bc50:	10803fcc 	andi	r2,r2,255
 101bc54:	1004c03a 	cmpne	r2,r2,zero
 101bc58:	10000c1e 	bne	r2,zero,101bc8c <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 101bc5c:	e0bffc17 	ldw	r2,-16(fp)
 101bc60:	10800d83 	ldbu	r2,54(r2)
 101bc64:	0084303a 	nor	r2,zero,r2
 101bc68:	1007883a 	mov	r3,r2
 101bc6c:	008040b4 	movhi	r2,258
 101bc70:	108bcb04 	addi	r2,r2,12076
 101bc74:	10800003 	ldbu	r2,0(r2)
 101bc78:	1884703a 	and	r2,r3,r2
 101bc7c:	1007883a 	mov	r3,r2
 101bc80:	008040b4 	movhi	r2,258
 101bc84:	108bcb04 	addi	r2,r2,12076
 101bc88:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 101bc8c:	e0bffc17 	ldw	r2,-16(fp)
 101bc90:	10800c03 	ldbu	r2,48(r2)
 101bc94:	10800214 	ori	r2,r2,8
 101bc98:	1007883a 	mov	r3,r2
 101bc9c:	e0bffc17 	ldw	r2,-16(fp)
 101bca0:	10c00c05 	stb	r3,48(r2)
 101bca4:	e0bffa17 	ldw	r2,-24(fp)
 101bca8:	e0bff615 	stw	r2,-40(fp)
 101bcac:	e0bff617 	ldw	r2,-40(fp)
 101bcb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 101bcb4:	e0bffd03 	ldbu	r2,-12(fp)
 101bcb8:	10800058 	cmpnei	r2,r2,1
 101bcbc:	1000011e 	bne	r2,zero,101bcc4 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 101bcc0:	1015bac0 	call	1015bac <OS_Sched>
    }
    return (OS_ERR_NONE);
 101bcc4:	e03fff15 	stw	zero,-4(fp)
 101bcc8:	e0bfff17 	ldw	r2,-4(fp)
}
 101bccc:	e037883a 	mov	sp,fp
 101bcd0:	dfc00117 	ldw	ra,4(sp)
 101bcd4:	df000017 	ldw	fp,0(sp)
 101bcd8:	dec00204 	addi	sp,sp,8
 101bcdc:	f800283a 	ret

0101bce0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 101bce0:	defff504 	addi	sp,sp,-44
 101bce4:	dfc00a15 	stw	ra,40(sp)
 101bce8:	df000915 	stw	fp,36(sp)
 101bcec:	df000904 	addi	fp,sp,36
 101bcf0:	e17ffe15 	stw	r5,-8(fp)
 101bcf4:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101bcf8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 101bcfc:	e0bffd03 	ldbu	r2,-12(fp)
 101bd00:	10800570 	cmpltui	r2,r2,21
 101bd04:	1000061e 	bne	r2,zero,101bd20 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 101bd08:	e0bffd03 	ldbu	r2,-12(fp)
 101bd0c:	10803fe0 	cmpeqi	r2,r2,255
 101bd10:	1000031e 	bne	r2,zero,101bd20 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 101bd14:	00800a84 	movi	r2,42
 101bd18:	e0bfff15 	stw	r2,-4(fp)
 101bd1c:	00003b06 	br	101be0c <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 101bd20:	e0bffe17 	ldw	r2,-8(fp)
 101bd24:	1004c03a 	cmpne	r2,r2,zero
 101bd28:	1000031e 	bne	r2,zero,101bd38 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 101bd2c:	00800244 	movi	r2,9
 101bd30:	e0bfff15 	stw	r2,-4(fp)
 101bd34:	00003506 	br	101be0c <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101bd38:	0005303a 	rdctl	r2,status
 101bd3c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101bd40:	e0fffa17 	ldw	r3,-24(fp)
 101bd44:	00bfff84 	movi	r2,-2
 101bd48:	1884703a 	and	r2,r3,r2
 101bd4c:	1001703a 	wrctl	status,r2
  
  return context;
 101bd50:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101bd54:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 101bd58:	e0bffd03 	ldbu	r2,-12(fp)
 101bd5c:	10803fd8 	cmpnei	r2,r2,255
 101bd60:	1000051e 	bne	r2,zero,101bd78 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 101bd64:	008040b4 	movhi	r2,258
 101bd68:	108bce04 	addi	r2,r2,12088
 101bd6c:	10800017 	ldw	r2,0(r2)
 101bd70:	10800c83 	ldbu	r2,50(r2)
 101bd74:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101bd78:	e0bffd03 	ldbu	r2,-12(fp)
 101bd7c:	00c040f4 	movhi	r3,259
 101bd80:	18ea5804 	addi	r3,r3,-22176
 101bd84:	1085883a 	add	r2,r2,r2
 101bd88:	1085883a 	add	r2,r2,r2
 101bd8c:	10c5883a 	add	r2,r2,r3
 101bd90:	10800017 	ldw	r2,0(r2)
 101bd94:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 101bd98:	e0bffc17 	ldw	r2,-16(fp)
 101bd9c:	1004c03a 	cmpne	r2,r2,zero
 101bda0:	1000071e 	bne	r2,zero,101bdc0 <OSTaskQuery+0xe0>
 101bda4:	e0bffb17 	ldw	r2,-20(fp)
 101bda8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101bdac:	e0bff917 	ldw	r2,-28(fp)
 101bdb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 101bdb4:	00800a44 	movi	r2,41
 101bdb8:	e0bfff15 	stw	r2,-4(fp)
 101bdbc:	00001306 	br	101be0c <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 101bdc0:	e0bffc17 	ldw	r2,-16(fp)
 101bdc4:	10800058 	cmpnei	r2,r2,1
 101bdc8:	1000071e 	bne	r2,zero,101bde8 <OSTaskQuery+0x108>
 101bdcc:	e0bffb17 	ldw	r2,-20(fp)
 101bdd0:	e0bff815 	stw	r2,-32(fp)
 101bdd4:	e0bff817 	ldw	r2,-32(fp)
 101bdd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101bddc:	008010c4 	movi	r2,67
 101bde0:	e0bfff15 	stw	r2,-4(fp)
 101bde4:	00000906 	br	101be0c <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 101bde8:	e13ffe17 	ldw	r4,-8(fp)
 101bdec:	e17ffc17 	ldw	r5,-16(fp)
 101bdf0:	01801b04 	movi	r6,108
 101bdf4:	1015b400 	call	1015b40 <OS_MemCopy>
 101bdf8:	e0bffb17 	ldw	r2,-20(fp)
 101bdfc:	e0bff715 	stw	r2,-36(fp)
 101be00:	e0bff717 	ldw	r2,-36(fp)
 101be04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101be08:	e03fff15 	stw	zero,-4(fp)
 101be0c:	e0bfff17 	ldw	r2,-4(fp)
}
 101be10:	e037883a 	mov	sp,fp
 101be14:	dfc00117 	ldw	ra,4(sp)
 101be18:	df000017 	ldw	fp,0(sp)
 101be1c:	dec00204 	addi	sp,sp,8
 101be20:	f800283a 	ret

0101be24 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 101be24:	defffc04 	addi	sp,sp,-16
 101be28:	df000315 	stw	fp,12(sp)
 101be2c:	df000304 	addi	fp,sp,12
 101be30:	e13ffd15 	stw	r4,-12(fp)
 101be34:	e17ffe15 	stw	r5,-8(fp)
 101be38:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 101be3c:	e0bfff0b 	ldhu	r2,-4(fp)
 101be40:	1080004c 	andi	r2,r2,1
 101be44:	10803fcc 	andi	r2,r2,255
 101be48:	1005003a 	cmpeq	r2,r2,zero
 101be4c:	1000101e 	bne	r2,zero,101be90 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 101be50:	e0bfff0b 	ldhu	r2,-4(fp)
 101be54:	1080008c 	andi	r2,r2,2
 101be58:	1005003a 	cmpeq	r2,r2,zero
 101be5c:	10000c1e 	bne	r2,zero,101be90 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 101be60:	00000806 	br	101be84 <OS_TaskStkClr+0x60>
                size--;
 101be64:	e0bffe17 	ldw	r2,-8(fp)
 101be68:	10bfffc4 	addi	r2,r2,-1
 101be6c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 101be70:	e0bffd17 	ldw	r2,-12(fp)
 101be74:	10000015 	stw	zero,0(r2)
 101be78:	e0bffd17 	ldw	r2,-12(fp)
 101be7c:	10800104 	addi	r2,r2,4
 101be80:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 101be84:	e0bffe17 	ldw	r2,-8(fp)
 101be88:	1004c03a 	cmpne	r2,r2,zero
 101be8c:	103ff51e 	bne	r2,zero,101be64 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 101be90:	e037883a 	mov	sp,fp
 101be94:	df000017 	ldw	fp,0(sp)
 101be98:	dec00104 	addi	sp,sp,4
 101be9c:	f800283a 	ret

0101bea0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 101bea0:	defff904 	addi	sp,sp,-28
 101bea4:	dfc00615 	stw	ra,24(sp)
 101bea8:	df000515 	stw	fp,20(sp)
 101beac:	df000504 	addi	fp,sp,20
 101beb0:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101beb4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 101beb8:	008040b4 	movhi	r2,258
 101bebc:	108bcd04 	addi	r2,r2,12084
 101bec0:	10800003 	ldbu	r2,0(r2)
 101bec4:	10803fcc 	andi	r2,r2,255
 101bec8:	1004c03a 	cmpne	r2,r2,zero
 101becc:	1000421e 	bne	r2,zero,101bfd8 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 101bed0:	e0bfff0b 	ldhu	r2,-4(fp)
 101bed4:	1005003a 	cmpeq	r2,r2,zero
 101bed8:	10003f1e 	bne	r2,zero,101bfd8 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101bedc:	0005303a 	rdctl	r2,status
 101bee0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101bee4:	e0fffc17 	ldw	r3,-16(fp)
 101bee8:	00bfff84 	movi	r2,-2
 101beec:	1884703a 	and	r2,r3,r2
 101bef0:	1001703a 	wrctl	status,r2
  
  return context;
 101bef4:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 101bef8:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 101befc:	008040b4 	movhi	r2,258
 101bf00:	108bce04 	addi	r2,r2,12088
 101bf04:	10800017 	ldw	r2,0(r2)
 101bf08:	10800d03 	ldbu	r2,52(r2)
 101bf0c:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 101bf10:	e13ffe03 	ldbu	r4,-8(fp)
 101bf14:	e0fffe03 	ldbu	r3,-8(fp)
 101bf18:	008040b4 	movhi	r2,258
 101bf1c:	108bcb44 	addi	r2,r2,12077
 101bf20:	10c5883a 	add	r2,r2,r3
 101bf24:	10800003 	ldbu	r2,0(r2)
 101bf28:	1007883a 	mov	r3,r2
 101bf2c:	008040b4 	movhi	r2,258
 101bf30:	108bce04 	addi	r2,r2,12088
 101bf34:	10800017 	ldw	r2,0(r2)
 101bf38:	10800d43 	ldbu	r2,53(r2)
 101bf3c:	0084303a 	nor	r2,zero,r2
 101bf40:	1884703a 	and	r2,r3,r2
 101bf44:	1007883a 	mov	r3,r2
 101bf48:	008040b4 	movhi	r2,258
 101bf4c:	108bcb44 	addi	r2,r2,12077
 101bf50:	1105883a 	add	r2,r2,r4
 101bf54:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 101bf58:	e0fffe03 	ldbu	r3,-8(fp)
 101bf5c:	008040b4 	movhi	r2,258
 101bf60:	108bcb44 	addi	r2,r2,12077
 101bf64:	10c5883a 	add	r2,r2,r3
 101bf68:	10800003 	ldbu	r2,0(r2)
 101bf6c:	10803fcc 	andi	r2,r2,255
 101bf70:	1004c03a 	cmpne	r2,r2,zero
 101bf74:	10000e1e 	bne	r2,zero,101bfb0 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 101bf78:	008040b4 	movhi	r2,258
 101bf7c:	108bce04 	addi	r2,r2,12088
 101bf80:	10800017 	ldw	r2,0(r2)
 101bf84:	10800d83 	ldbu	r2,54(r2)
 101bf88:	0084303a 	nor	r2,zero,r2
 101bf8c:	1007883a 	mov	r3,r2
 101bf90:	008040b4 	movhi	r2,258
 101bf94:	108bcb04 	addi	r2,r2,12076
 101bf98:	10800003 	ldbu	r2,0(r2)
 101bf9c:	1884703a 	and	r2,r3,r2
 101bfa0:	1007883a 	mov	r3,r2
 101bfa4:	008040b4 	movhi	r2,258
 101bfa8:	108bcb04 	addi	r2,r2,12076
 101bfac:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 101bfb0:	008040b4 	movhi	r2,258
 101bfb4:	108bce04 	addi	r2,r2,12088
 101bfb8:	10c00017 	ldw	r3,0(r2)
 101bfbc:	e0bfff0b 	ldhu	r2,-4(fp)
 101bfc0:	18800b8d 	sth	r2,46(r3)
 101bfc4:	e0bffd17 	ldw	r2,-12(fp)
 101bfc8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101bfcc:	e0bffb17 	ldw	r2,-20(fp)
 101bfd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 101bfd4:	1015bac0 	call	1015bac <OS_Sched>
    }
}
 101bfd8:	e037883a 	mov	sp,fp
 101bfdc:	dfc00117 	ldw	ra,4(sp)
 101bfe0:	df000017 	ldw	fp,0(sp)
 101bfe4:	dec00204 	addi	sp,sp,8
 101bfe8:	f800283a 	ret

0101bfec <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 101bfec:	defff604 	addi	sp,sp,-40
 101bff0:	dfc00915 	stw	ra,36(sp)
 101bff4:	df000815 	stw	fp,32(sp)
 101bff8:	dc000715 	stw	r16,28(sp)
 101bffc:	df000704 	addi	fp,sp,28
 101c000:	e13ffb05 	stb	r4,-20(fp)
 101c004:	e17ffc05 	stb	r5,-16(fp)
 101c008:	e1bffd05 	stb	r6,-12(fp)
 101c00c:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 101c010:	008040b4 	movhi	r2,258
 101c014:	108bcd04 	addi	r2,r2,12084
 101c018:	10800003 	ldbu	r2,0(r2)
 101c01c:	10803fcc 	andi	r2,r2,255
 101c020:	1005003a 	cmpeq	r2,r2,zero
 101c024:	1000031e 	bne	r2,zero,101c034 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 101c028:	00801544 	movi	r2,85
 101c02c:	e0bfff15 	stw	r2,-4(fp)
 101c030:	00004406 	br	101c144 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 101c034:	e0bffb03 	ldbu	r2,-20(fp)
 101c038:	1004c03a 	cmpne	r2,r2,zero
 101c03c:	10000c1e 	bne	r2,zero,101c070 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
 101c040:	e0bffc03 	ldbu	r2,-16(fp)
 101c044:	1004c03a 	cmpne	r2,r2,zero
 101c048:	1000091e 	bne	r2,zero,101c070 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
 101c04c:	e0bffd03 	ldbu	r2,-12(fp)
 101c050:	1004c03a 	cmpne	r2,r2,zero
 101c054:	1000061e 	bne	r2,zero,101c070 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
 101c058:	e0bffe0b 	ldhu	r2,-8(fp)
 101c05c:	1004c03a 	cmpne	r2,r2,zero
 101c060:	1000031e 	bne	r2,zero,101c070 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
 101c064:	00801504 	movi	r2,84
 101c068:	e0bfff15 	stw	r2,-4(fp)
 101c06c:	00003506 	br	101c144 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
 101c070:	e0bffc03 	ldbu	r2,-16(fp)
 101c074:	10800f30 	cmpltui	r2,r2,60
 101c078:	1000031e 	bne	r2,zero,101c088 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 101c07c:	00801444 	movi	r2,81
 101c080:	e0bfff15 	stw	r2,-4(fp)
 101c084:	00002f06 	br	101c144 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
 101c088:	e0bffd03 	ldbu	r2,-12(fp)
 101c08c:	10800f30 	cmpltui	r2,r2,60
 101c090:	1000031e 	bne	r2,zero,101c0a0 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
 101c094:	00801484 	movi	r2,82
 101c098:	e0bfff15 	stw	r2,-4(fp)
 101c09c:	00002906 	br	101c144 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
 101c0a0:	e0bffe0b 	ldhu	r2,-8(fp)
 101c0a4:	1080fa30 	cmpltui	r2,r2,1000
 101c0a8:	1000031e 	bne	r2,zero,101c0b8 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
 101c0ac:	008014c4 	movi	r2,83
 101c0b0:	e0bfff15 	stw	r2,-4(fp)
 101c0b4:	00002306 	br	101c144 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 101c0b8:	e0bffb03 	ldbu	r2,-20(fp)
 101c0bc:	10c38424 	muli	r3,r2,3600
 101c0c0:	e0bffc03 	ldbu	r2,-16(fp)
 101c0c4:	10800f24 	muli	r2,r2,60
 101c0c8:	1887883a 	add	r3,r3,r2
 101c0cc:	e0bffd03 	ldbu	r2,-12(fp)
 101c0d0:	1885883a 	add	r2,r3,r2
 101c0d4:	1400fa24 	muli	r16,r2,1000
 101c0d8:	e0bffe0b 	ldhu	r2,-8(fp)
 101c0dc:	1100fa24 	muli	r4,r2,1000
 101c0e0:	0140fa04 	movi	r5,1000
 101c0e4:	1012b280 	call	1012b28 <__udivsi3>
 101c0e8:	8085883a 	add	r2,r16,r2
 101c0ec:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 101c0f0:	e0bffa17 	ldw	r2,-24(fp)
 101c0f4:	1004d43a 	srli	r2,r2,16
 101c0f8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 101c0fc:	e0bffa17 	ldw	r2,-24(fp)
 101c100:	10bfffcc 	andi	r2,r2,65535
 101c104:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 101c108:	e0bffa17 	ldw	r2,-24(fp)
 101c10c:	113fffcc 	andi	r4,r2,65535
 101c110:	101bea00 	call	101bea0 <OSTimeDly>
    while (loops > 0) {
 101c114:	00000706 	br	101c134 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
 101c118:	01200014 	movui	r4,32768
 101c11c:	101bea00 	call	101bea0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 101c120:	01200014 	movui	r4,32768
 101c124:	101bea00 	call	101bea0 <OSTimeDly>
        loops--;
 101c128:	e0bff90b 	ldhu	r2,-28(fp)
 101c12c:	10bfffc4 	addi	r2,r2,-1
 101c130:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 101c134:	e0bff90b 	ldhu	r2,-28(fp)
 101c138:	1004c03a 	cmpne	r2,r2,zero
 101c13c:	103ff61e 	bne	r2,zero,101c118 <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 101c140:	e03fff15 	stw	zero,-4(fp)
 101c144:	e0bfff17 	ldw	r2,-4(fp)
}
 101c148:	e037883a 	mov	sp,fp
 101c14c:	dfc00217 	ldw	ra,8(sp)
 101c150:	df000117 	ldw	fp,4(sp)
 101c154:	dc000017 	ldw	r16,0(sp)
 101c158:	dec00304 	addi	sp,sp,12
 101c15c:	f800283a 	ret

0101c160 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 101c160:	defff404 	addi	sp,sp,-48
 101c164:	dfc00b15 	stw	ra,44(sp)
 101c168:	df000a15 	stw	fp,40(sp)
 101c16c:	df000a04 	addi	fp,sp,40
 101c170:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101c174:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 101c178:	e0bffe03 	ldbu	r2,-8(fp)
 101c17c:	10800530 	cmpltui	r2,r2,20
 101c180:	1000031e 	bne	r2,zero,101c190 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 101c184:	00800a84 	movi	r2,42
 101c188:	e0bfff15 	stw	r2,-4(fp)
 101c18c:	00007206 	br	101c358 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c190:	0005303a 	rdctl	r2,status
 101c194:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c198:	e0fffb17 	ldw	r3,-20(fp)
 101c19c:	00bfff84 	movi	r2,-2
 101c1a0:	1884703a 	and	r2,r3,r2
 101c1a4:	1001703a 	wrctl	status,r2
  
  return context;
 101c1a8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 101c1ac:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 101c1b0:	e0bffe03 	ldbu	r2,-8(fp)
 101c1b4:	00c040f4 	movhi	r3,259
 101c1b8:	18ea5804 	addi	r3,r3,-22176
 101c1bc:	1085883a 	add	r2,r2,r2
 101c1c0:	1085883a 	add	r2,r2,r2
 101c1c4:	10c5883a 	add	r2,r2,r3
 101c1c8:	10800017 	ldw	r2,0(r2)
 101c1cc:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 101c1d0:	e0bffd17 	ldw	r2,-12(fp)
 101c1d4:	1004c03a 	cmpne	r2,r2,zero
 101c1d8:	1000071e 	bne	r2,zero,101c1f8 <OSTimeDlyResume+0x98>
 101c1dc:	e0bffc17 	ldw	r2,-16(fp)
 101c1e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c1e4:	e0bffa17 	ldw	r2,-24(fp)
 101c1e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 101c1ec:	008010c4 	movi	r2,67
 101c1f0:	e0bfff15 	stw	r2,-4(fp)
 101c1f4:	00005806 	br	101c358 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 101c1f8:	e0bffd17 	ldw	r2,-12(fp)
 101c1fc:	10800058 	cmpnei	r2,r2,1
 101c200:	1000071e 	bne	r2,zero,101c220 <OSTimeDlyResume+0xc0>
 101c204:	e0bffc17 	ldw	r2,-16(fp)
 101c208:	e0bff915 	stw	r2,-28(fp)
 101c20c:	e0bff917 	ldw	r2,-28(fp)
 101c210:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 101c214:	008010c4 	movi	r2,67
 101c218:	e0bfff15 	stw	r2,-4(fp)
 101c21c:	00004e06 	br	101c358 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 101c220:	e0bffd17 	ldw	r2,-12(fp)
 101c224:	10800b8b 	ldhu	r2,46(r2)
 101c228:	10bfffcc 	andi	r2,r2,65535
 101c22c:	1004c03a 	cmpne	r2,r2,zero
 101c230:	1000071e 	bne	r2,zero,101c250 <OSTimeDlyResume+0xf0>
 101c234:	e0bffc17 	ldw	r2,-16(fp)
 101c238:	e0bff815 	stw	r2,-32(fp)
 101c23c:	e0bff817 	ldw	r2,-32(fp)
 101c240:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 101c244:	00801404 	movi	r2,80
 101c248:	e0bfff15 	stw	r2,-4(fp)
 101c24c:	00004206 	br	101c358 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 101c250:	e0bffd17 	ldw	r2,-12(fp)
 101c254:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 101c258:	e0bffd17 	ldw	r2,-12(fp)
 101c25c:	10800c03 	ldbu	r2,48(r2)
 101c260:	10803fcc 	andi	r2,r2,255
 101c264:	10800dcc 	andi	r2,r2,55
 101c268:	1005003a 	cmpeq	r2,r2,zero
 101c26c:	10000b1e 	bne	r2,zero,101c29c <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 101c270:	e0bffd17 	ldw	r2,-12(fp)
 101c274:	10c00c03 	ldbu	r3,48(r2)
 101c278:	00bff204 	movi	r2,-56
 101c27c:	1884703a 	and	r2,r3,r2
 101c280:	1007883a 	mov	r3,r2
 101c284:	e0bffd17 	ldw	r2,-12(fp)
 101c288:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 101c28c:	e0fffd17 	ldw	r3,-12(fp)
 101c290:	00800044 	movi	r2,1
 101c294:	18800c45 	stb	r2,49(r3)
 101c298:	00000206 	br	101c2a4 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 101c29c:	e0bffd17 	ldw	r2,-12(fp)
 101c2a0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 101c2a4:	e0bffd17 	ldw	r2,-12(fp)
 101c2a8:	10800c03 	ldbu	r2,48(r2)
 101c2ac:	10803fcc 	andi	r2,r2,255
 101c2b0:	1080020c 	andi	r2,r2,8
 101c2b4:	1004c03a 	cmpne	r2,r2,zero
 101c2b8:	1000221e 	bne	r2,zero,101c344 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 101c2bc:	e0bffd17 	ldw	r2,-12(fp)
 101c2c0:	10c00d83 	ldbu	r3,54(r2)
 101c2c4:	008040b4 	movhi	r2,258
 101c2c8:	108bcb04 	addi	r2,r2,12076
 101c2cc:	10800003 	ldbu	r2,0(r2)
 101c2d0:	1884b03a 	or	r2,r3,r2
 101c2d4:	1007883a 	mov	r3,r2
 101c2d8:	008040b4 	movhi	r2,258
 101c2dc:	108bcb04 	addi	r2,r2,12076
 101c2e0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 101c2e4:	e0bffd17 	ldw	r2,-12(fp)
 101c2e8:	10800d03 	ldbu	r2,52(r2)
 101c2ec:	11003fcc 	andi	r4,r2,255
 101c2f0:	e0bffd17 	ldw	r2,-12(fp)
 101c2f4:	10800d03 	ldbu	r2,52(r2)
 101c2f8:	10c03fcc 	andi	r3,r2,255
 101c2fc:	008040b4 	movhi	r2,258
 101c300:	108bcb44 	addi	r2,r2,12077
 101c304:	10c5883a 	add	r2,r2,r3
 101c308:	10c00003 	ldbu	r3,0(r2)
 101c30c:	e0bffd17 	ldw	r2,-12(fp)
 101c310:	10800d43 	ldbu	r2,53(r2)
 101c314:	1884b03a 	or	r2,r3,r2
 101c318:	1007883a 	mov	r3,r2
 101c31c:	008040b4 	movhi	r2,258
 101c320:	108bcb44 	addi	r2,r2,12077
 101c324:	1105883a 	add	r2,r2,r4
 101c328:	10c00005 	stb	r3,0(r2)
 101c32c:	e0bffc17 	ldw	r2,-16(fp)
 101c330:	e0bff715 	stw	r2,-36(fp)
 101c334:	e0bff717 	ldw	r2,-36(fp)
 101c338:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 101c33c:	1015bac0 	call	1015bac <OS_Sched>
 101c340:	00000406 	br	101c354 <OSTimeDlyResume+0x1f4>
 101c344:	e0bffc17 	ldw	r2,-16(fp)
 101c348:	e0bff615 	stw	r2,-40(fp)
 101c34c:	e0bff617 	ldw	r2,-40(fp)
 101c350:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 101c354:	e03fff15 	stw	zero,-4(fp)
 101c358:	e0bfff17 	ldw	r2,-4(fp)
}
 101c35c:	e037883a 	mov	sp,fp
 101c360:	dfc00117 	ldw	ra,4(sp)
 101c364:	df000017 	ldw	fp,0(sp)
 101c368:	dec00204 	addi	sp,sp,8
 101c36c:	f800283a 	ret

0101c370 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 101c370:	defffb04 	addi	sp,sp,-20
 101c374:	df000415 	stw	fp,16(sp)
 101c378:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101c37c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c380:	0005303a 	rdctl	r2,status
 101c384:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c388:	e0fffd17 	ldw	r3,-12(fp)
 101c38c:	00bfff84 	movi	r2,-2
 101c390:	1884703a 	and	r2,r3,r2
 101c394:	1001703a 	wrctl	status,r2
  
  return context;
 101c398:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 101c39c:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 101c3a0:	008040b4 	movhi	r2,258
 101c3a4:	108bcf04 	addi	r2,r2,12092
 101c3a8:	10800017 	ldw	r2,0(r2)
 101c3ac:	e0bfff15 	stw	r2,-4(fp)
 101c3b0:	e0bffe17 	ldw	r2,-8(fp)
 101c3b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c3b8:	e0bffc17 	ldw	r2,-16(fp)
 101c3bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 101c3c0:	e0bfff17 	ldw	r2,-4(fp)
}
 101c3c4:	e037883a 	mov	sp,fp
 101c3c8:	df000017 	ldw	fp,0(sp)
 101c3cc:	dec00104 	addi	sp,sp,4
 101c3d0:	f800283a 	ret

0101c3d4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 101c3d4:	defffb04 	addi	sp,sp,-20
 101c3d8:	df000415 	stw	fp,16(sp)
 101c3dc:	df000404 	addi	fp,sp,16
 101c3e0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101c3e4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c3e8:	0005303a 	rdctl	r2,status
 101c3ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c3f0:	e0fffd17 	ldw	r3,-12(fp)
 101c3f4:	00bfff84 	movi	r2,-2
 101c3f8:	1884703a 	and	r2,r3,r2
 101c3fc:	1001703a 	wrctl	status,r2
  
  return context;
 101c400:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 101c404:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 101c408:	00c040b4 	movhi	r3,258
 101c40c:	18cbcf04 	addi	r3,r3,12092
 101c410:	e0bfff17 	ldw	r2,-4(fp)
 101c414:	18800015 	stw	r2,0(r3)
 101c418:	e0bffe17 	ldw	r2,-8(fp)
 101c41c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c420:	e0bffc17 	ldw	r2,-16(fp)
 101c424:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 101c428:	e037883a 	mov	sp,fp
 101c42c:	df000017 	ldw	fp,0(sp)
 101c430:	dec00104 	addi	sp,sp,4
 101c434:	f800283a 	ret

0101c438 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 101c438:	defffd04 	addi	sp,sp,-12
 101c43c:	dfc00215 	stw	ra,8(sp)
 101c440:	df000115 	stw	fp,4(sp)
 101c444:	df000104 	addi	fp,sp,4
 101c448:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 101c44c:	101df800 	call	101df80 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 101c450:	00800044 	movi	r2,1
 101c454:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 101c458:	e037883a 	mov	sp,fp
 101c45c:	dfc00117 	ldw	ra,4(sp)
 101c460:	df000017 	ldw	fp,0(sp)
 101c464:	dec00204 	addi	sp,sp,8
 101c468:	f800283a 	ret

0101c46c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 101c46c:	defffe04 	addi	sp,sp,-8
 101c470:	dfc00115 	stw	ra,4(sp)
 101c474:	df000015 	stw	fp,0(sp)
 101c478:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 101c47c:	01008034 	movhi	r4,512
 101c480:	21041004 	addi	r4,r4,4160
 101c484:	000b883a 	mov	r5,zero
 101c488:	000d883a 	mov	r6,zero
 101c48c:	01c0fa04 	movi	r7,1000
 101c490:	101d2d80 	call	101d2d8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 101c494:	010040b4 	movhi	r4,258
 101c498:	21007d04 	addi	r4,r4,500
 101c49c:	000b883a 	mov	r5,zero
 101c4a0:	01800384 	movi	r6,14
 101c4a4:	101c6540 	call	101c654 <altera_avalon_jtag_uart_init>
 101c4a8:	010040b4 	movhi	r4,258
 101c4ac:	21007304 	addi	r4,r4,460
 101c4b0:	101c4d40 	call	101c4d4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_DE0_NANO_ADC_INIT ( ADC, adc);
 101c4b4:	010040b4 	movhi	r4,258
 101c4b8:	21048e04 	addi	r4,r4,4664
 101c4bc:	101c4d40 	call	101c4d4 <alt_dev_reg>
}
 101c4c0:	e037883a 	mov	sp,fp
 101c4c4:	dfc00117 	ldw	ra,4(sp)
 101c4c8:	df000017 	ldw	fp,0(sp)
 101c4cc:	dec00204 	addi	sp,sp,8
 101c4d0:	f800283a 	ret

0101c4d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 101c4d4:	defffd04 	addi	sp,sp,-12
 101c4d8:	dfc00215 	stw	ra,8(sp)
 101c4dc:	df000115 	stw	fp,4(sp)
 101c4e0:	df000104 	addi	fp,sp,4
 101c4e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 101c4e8:	e13fff17 	ldw	r4,-4(fp)
 101c4ec:	014040b4 	movhi	r5,258
 101c4f0:	2944af04 	addi	r5,r5,4796
 101c4f4:	101d5000 	call	101d500 <alt_dev_llist_insert>
}
 101c4f8:	e037883a 	mov	sp,fp
 101c4fc:	dfc00117 	ldw	ra,4(sp)
 101c500:	df000017 	ldw	fp,0(sp)
 101c504:	dec00204 	addi	sp,sp,8
 101c508:	f800283a 	ret

0101c50c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 101c50c:	defffa04 	addi	sp,sp,-24
 101c510:	dfc00515 	stw	ra,20(sp)
 101c514:	df000415 	stw	fp,16(sp)
 101c518:	df000404 	addi	fp,sp,16
 101c51c:	e13ffd15 	stw	r4,-12(fp)
 101c520:	e17ffe15 	stw	r5,-8(fp)
 101c524:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101c528:	e0bffd17 	ldw	r2,-12(fp)
 101c52c:	10800017 	ldw	r2,0(r2)
 101c530:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 101c534:	e0bffc17 	ldw	r2,-16(fp)
 101c538:	11000a04 	addi	r4,r2,40
 101c53c:	e0bffd17 	ldw	r2,-12(fp)
 101c540:	11c00217 	ldw	r7,8(r2)
 101c544:	e17ffe17 	ldw	r5,-8(fp)
 101c548:	e1bfff17 	ldw	r6,-4(fp)
 101c54c:	101cccc0 	call	101cccc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 101c550:	e037883a 	mov	sp,fp
 101c554:	dfc00117 	ldw	ra,4(sp)
 101c558:	df000017 	ldw	fp,0(sp)
 101c55c:	dec00204 	addi	sp,sp,8
 101c560:	f800283a 	ret

0101c564 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 101c564:	defffa04 	addi	sp,sp,-24
 101c568:	dfc00515 	stw	ra,20(sp)
 101c56c:	df000415 	stw	fp,16(sp)
 101c570:	df000404 	addi	fp,sp,16
 101c574:	e13ffd15 	stw	r4,-12(fp)
 101c578:	e17ffe15 	stw	r5,-8(fp)
 101c57c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101c580:	e0bffd17 	ldw	r2,-12(fp)
 101c584:	10800017 	ldw	r2,0(r2)
 101c588:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 101c58c:	e0bffc17 	ldw	r2,-16(fp)
 101c590:	11000a04 	addi	r4,r2,40
 101c594:	e0bffd17 	ldw	r2,-12(fp)
 101c598:	11c00217 	ldw	r7,8(r2)
 101c59c:	e17ffe17 	ldw	r5,-8(fp)
 101c5a0:	e1bfff17 	ldw	r6,-4(fp)
 101c5a4:	101cf8c0 	call	101cf8c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 101c5a8:	e037883a 	mov	sp,fp
 101c5ac:	dfc00117 	ldw	ra,4(sp)
 101c5b0:	df000017 	ldw	fp,0(sp)
 101c5b4:	dec00204 	addi	sp,sp,8
 101c5b8:	f800283a 	ret

0101c5bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 101c5bc:	defffc04 	addi	sp,sp,-16
 101c5c0:	dfc00315 	stw	ra,12(sp)
 101c5c4:	df000215 	stw	fp,8(sp)
 101c5c8:	df000204 	addi	fp,sp,8
 101c5cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101c5d0:	e0bfff17 	ldw	r2,-4(fp)
 101c5d4:	10800017 	ldw	r2,0(r2)
 101c5d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 101c5dc:	e0bffe17 	ldw	r2,-8(fp)
 101c5e0:	11000a04 	addi	r4,r2,40
 101c5e4:	e0bfff17 	ldw	r2,-4(fp)
 101c5e8:	11400217 	ldw	r5,8(r2)
 101c5ec:	101cb640 	call	101cb64 <altera_avalon_jtag_uart_close>
}
 101c5f0:	e037883a 	mov	sp,fp
 101c5f4:	dfc00117 	ldw	ra,4(sp)
 101c5f8:	df000017 	ldw	fp,0(sp)
 101c5fc:	dec00204 	addi	sp,sp,8
 101c600:	f800283a 	ret

0101c604 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 101c604:	defffa04 	addi	sp,sp,-24
 101c608:	dfc00515 	stw	ra,20(sp)
 101c60c:	df000415 	stw	fp,16(sp)
 101c610:	df000404 	addi	fp,sp,16
 101c614:	e13ffd15 	stw	r4,-12(fp)
 101c618:	e17ffe15 	stw	r5,-8(fp)
 101c61c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 101c620:	e0bffd17 	ldw	r2,-12(fp)
 101c624:	10800017 	ldw	r2,0(r2)
 101c628:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 101c62c:	e0bffc17 	ldw	r2,-16(fp)
 101c630:	11000a04 	addi	r4,r2,40
 101c634:	e17ffe17 	ldw	r5,-8(fp)
 101c638:	e1bfff17 	ldw	r6,-4(fp)
 101c63c:	101cbd80 	call	101cbd8 <altera_avalon_jtag_uart_ioctl>
}
 101c640:	e037883a 	mov	sp,fp
 101c644:	dfc00117 	ldw	ra,4(sp)
 101c648:	df000017 	ldw	fp,0(sp)
 101c64c:	dec00204 	addi	sp,sp,8
 101c650:	f800283a 	ret

0101c654 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 101c654:	defff404 	addi	sp,sp,-48
 101c658:	dfc00b15 	stw	ra,44(sp)
 101c65c:	df000a15 	stw	fp,40(sp)
 101c660:	df000a04 	addi	fp,sp,40
 101c664:	e13ffd15 	stw	r4,-12(fp)
 101c668:	e17ffe15 	stw	r5,-8(fp)
 101c66c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 101c670:	e0bffd17 	ldw	r2,-12(fp)
 101c674:	10800c04 	addi	r2,r2,48
 101c678:	e0bffb15 	stw	r2,-20(fp)
 101c67c:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 101c680:	e13ffc0b 	ldhu	r4,-16(fp)
 101c684:	e17ffc84 	addi	r5,fp,-14
 101c688:	10167540 	call	1016754 <OSFlagCreate>
 101c68c:	1007883a 	mov	r3,r2
 101c690:	e0bffb17 	ldw	r2,-20(fp)
 101c694:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 101c698:	e0bffd17 	ldw	r2,-12(fp)
 101c69c:	10800a04 	addi	r2,r2,40
 101c6a0:	e0bff915 	stw	r2,-28(fp)
 101c6a4:	00800044 	movi	r2,1
 101c6a8:	e0bffa0d 	sth	r2,-24(fp)
 101c6ac:	e13ffa0b 	ldhu	r4,-24(fp)
 101c6b0:	10199580 	call	1019958 <OSSemCreate>
 101c6b4:	1007883a 	mov	r3,r2
 101c6b8:	e0bff917 	ldw	r2,-28(fp)
 101c6bc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 101c6c0:	e0bffd17 	ldw	r2,-12(fp)
 101c6c4:	10800b04 	addi	r2,r2,44
 101c6c8:	e0bff715 	stw	r2,-36(fp)
 101c6cc:	00800044 	movi	r2,1
 101c6d0:	e0bff80d 	sth	r2,-32(fp)
 101c6d4:	e13ff80b 	ldhu	r4,-32(fp)
 101c6d8:	10199580 	call	1019958 <OSSemCreate>
 101c6dc:	1007883a 	mov	r3,r2
 101c6e0:	e0bff717 	ldw	r2,-36(fp)
 101c6e4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101c6e8:	e0fffd17 	ldw	r3,-12(fp)
 101c6ec:	00800044 	movi	r2,1
 101c6f0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 101c6f4:	e0bffd17 	ldw	r2,-12(fp)
 101c6f8:	10800017 	ldw	r2,0(r2)
 101c6fc:	11000104 	addi	r4,r2,4
 101c700:	e0bffd17 	ldw	r2,-12(fp)
 101c704:	10800817 	ldw	r2,32(r2)
 101c708:	1007883a 	mov	r3,r2
 101c70c:	2005883a 	mov	r2,r4
 101c710:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 101c714:	e13ffe17 	ldw	r4,-8(fp)
 101c718:	e17fff17 	ldw	r5,-4(fp)
 101c71c:	d8000015 	stw	zero,0(sp)
 101c720:	018040b4 	movhi	r6,258
 101c724:	31b1e304 	addi	r6,r6,-14452
 101c728:	e1fffd17 	ldw	r7,-12(fp)
 101c72c:	101d70c0 	call	101d70c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 101c730:	e0bffd17 	ldw	r2,-12(fp)
 101c734:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 101c738:	e0bffd17 	ldw	r2,-12(fp)
 101c73c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 101c740:	008040b4 	movhi	r2,258
 101c744:	108bd404 	addi	r2,r2,12112
 101c748:	10800017 	ldw	r2,0(r2)
 101c74c:	100b883a 	mov	r5,r2
 101c750:	018040b4 	movhi	r6,258
 101c754:	31b29404 	addi	r6,r6,-13744
 101c758:	e1fffd17 	ldw	r7,-12(fp)
 101c75c:	101d3680 	call	101d368 <alt_alarm_start>
 101c760:	1004403a 	cmpge	r2,r2,zero
 101c764:	1000041e 	bne	r2,zero,101c778 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 101c768:	e0fffd17 	ldw	r3,-12(fp)
 101c76c:	00a00034 	movhi	r2,32768
 101c770:	10bfffc4 	addi	r2,r2,-1
 101c774:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 101c778:	e037883a 	mov	sp,fp
 101c77c:	dfc00117 	ldw	ra,4(sp)
 101c780:	df000017 	ldw	fp,0(sp)
 101c784:	dec00204 	addi	sp,sp,8
 101c788:	f800283a 	ret

0101c78c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 101c78c:	defff204 	addi	sp,sp,-56
 101c790:	dfc00d15 	stw	ra,52(sp)
 101c794:	df000c15 	stw	fp,48(sp)
 101c798:	df000c04 	addi	fp,sp,48
 101c79c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 101c7a0:	e0bfff17 	ldw	r2,-4(fp)
 101c7a4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 101c7a8:	e0bffd17 	ldw	r2,-12(fp)
 101c7ac:	10800017 	ldw	r2,0(r2)
 101c7b0:	e0bffc15 	stw	r2,-16(fp)
 101c7b4:	00000006 	br	101c7b8 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101c7b8:	e0bffc17 	ldw	r2,-16(fp)
 101c7bc:	10800104 	addi	r2,r2,4
 101c7c0:	10800037 	ldwio	r2,0(r2)
 101c7c4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 101c7c8:	e0bffb17 	ldw	r2,-20(fp)
 101c7cc:	1080c00c 	andi	r2,r2,768
 101c7d0:	1005003a 	cmpeq	r2,r2,zero
 101c7d4:	1000991e 	bne	r2,zero,101ca3c <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 101c7d8:	e0bffb17 	ldw	r2,-20(fp)
 101c7dc:	1080400c 	andi	r2,r2,256
 101c7e0:	1005003a 	cmpeq	r2,r2,zero
 101c7e4:	1000481e 	bne	r2,zero,101c908 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 101c7e8:	00800074 	movhi	r2,1
 101c7ec:	e0bffa15 	stw	r2,-24(fp)
 101c7f0:	00000006 	br	101c7f4 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101c7f4:	e0bffd17 	ldw	r2,-12(fp)
 101c7f8:	10800d17 	ldw	r2,52(r2)
 101c7fc:	10800044 	addi	r2,r2,1
 101c800:	1081ffcc 	andi	r2,r2,2047
 101c804:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 101c808:	e0bffd17 	ldw	r2,-12(fp)
 101c80c:	10c00e17 	ldw	r3,56(r2)
 101c810:	e0bff917 	ldw	r2,-28(fp)
 101c814:	18802826 	beq	r3,r2,101c8b8 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 101c818:	e0bffc17 	ldw	r2,-16(fp)
 101c81c:	10800037 	ldwio	r2,0(r2)
 101c820:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 101c824:	e0bffa17 	ldw	r2,-24(fp)
 101c828:	10a0000c 	andi	r2,r2,32768
 101c82c:	1005003a 	cmpeq	r2,r2,zero
 101c830:	1000211e 	bne	r2,zero,101c8b8 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 101c834:	e0bffd17 	ldw	r2,-12(fp)
 101c838:	10c00d17 	ldw	r3,52(r2)
 101c83c:	e0bffa17 	ldw	r2,-24(fp)
 101c840:	1009883a 	mov	r4,r2
 101c844:	e0bffd17 	ldw	r2,-12(fp)
 101c848:	1885883a 	add	r2,r3,r2
 101c84c:	10801104 	addi	r2,r2,68
 101c850:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101c854:	e0bffd17 	ldw	r2,-12(fp)
 101c858:	10800d17 	ldw	r2,52(r2)
 101c85c:	10800044 	addi	r2,r2,1
 101c860:	10c1ffcc 	andi	r3,r2,2047
 101c864:	e0bffd17 	ldw	r2,-12(fp)
 101c868:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 101c86c:	e0bffd17 	ldw	r2,-12(fp)
 101c870:	10800c17 	ldw	r2,48(r2)
 101c874:	e0bff615 	stw	r2,-40(fp)
 101c878:	00800044 	movi	r2,1
 101c87c:	e0bff70d 	sth	r2,-36(fp)
 101c880:	00800044 	movi	r2,1
 101c884:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 101c888:	008040b4 	movhi	r2,258
 101c88c:	108bbf44 	addi	r2,r2,12029
 101c890:	10800003 	ldbu	r2,0(r2)
 101c894:	10803fcc 	andi	r2,r2,255
 101c898:	1005003a 	cmpeq	r2,r2,zero
 101c89c:	103fd51e 	bne	r2,zero,101c7f4 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
 101c8a0:	e17ff70b 	ldhu	r5,-36(fp)
 101c8a4:	e1bff783 	ldbu	r6,-34(fp)
 101c8a8:	e1fffe04 	addi	r7,fp,-8
 101c8ac:	e13ff617 	ldw	r4,-40(fp)
 101c8b0:	101747c0 	call	101747c <OSFlagPost>
    return err;
 101c8b4:	003fcf06 	br	101c7f4 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 101c8b8:	e0bffa17 	ldw	r2,-24(fp)
 101c8bc:	10bfffec 	andhi	r2,r2,65535
 101c8c0:	1005003a 	cmpeq	r2,r2,zero
 101c8c4:	1000101e 	bne	r2,zero,101c908 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101c8c8:	e0bffd17 	ldw	r2,-12(fp)
 101c8cc:	10c00817 	ldw	r3,32(r2)
 101c8d0:	00bfff84 	movi	r2,-2
 101c8d4:	1886703a 	and	r3,r3,r2
 101c8d8:	e0bffd17 	ldw	r2,-12(fp)
 101c8dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 101c8e0:	e0bffc17 	ldw	r2,-16(fp)
 101c8e4:	11000104 	addi	r4,r2,4
 101c8e8:	e0bffd17 	ldw	r2,-12(fp)
 101c8ec:	10800817 	ldw	r2,32(r2)
 101c8f0:	1007883a 	mov	r3,r2
 101c8f4:	2005883a 	mov	r2,r4
 101c8f8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101c8fc:	e0bffc17 	ldw	r2,-16(fp)
 101c900:	10800104 	addi	r2,r2,4
 101c904:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 101c908:	e0bffb17 	ldw	r2,-20(fp)
 101c90c:	1080800c 	andi	r2,r2,512
 101c910:	1005003a 	cmpeq	r2,r2,zero
 101c914:	103fa81e 	bne	r2,zero,101c7b8 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 101c918:	e0bffb17 	ldw	r2,-20(fp)
 101c91c:	10bfffec 	andhi	r2,r2,65535
 101c920:	1004d43a 	srli	r2,r2,16
 101c924:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 101c928:	00002706 	br	101c9c8 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 101c92c:	e13ffc17 	ldw	r4,-16(fp)
 101c930:	e0bffd17 	ldw	r2,-12(fp)
 101c934:	10c01017 	ldw	r3,64(r2)
 101c938:	e0bffd17 	ldw	r2,-12(fp)
 101c93c:	1885883a 	add	r2,r3,r2
 101c940:	10821104 	addi	r2,r2,2116
 101c944:	10800003 	ldbu	r2,0(r2)
 101c948:	10c03fcc 	andi	r3,r2,255
 101c94c:	18c0201c 	xori	r3,r3,128
 101c950:	18ffe004 	addi	r3,r3,-128
 101c954:	2005883a 	mov	r2,r4
 101c958:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101c95c:	e0bffd17 	ldw	r2,-12(fp)
 101c960:	10801017 	ldw	r2,64(r2)
 101c964:	10800044 	addi	r2,r2,1
 101c968:	10c1ffcc 	andi	r3,r2,2047
 101c96c:	e0bffd17 	ldw	r2,-12(fp)
 101c970:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 101c974:	e0bffd17 	ldw	r2,-12(fp)
 101c978:	10800c17 	ldw	r2,48(r2)
 101c97c:	e0bff415 	stw	r2,-48(fp)
 101c980:	00800084 	movi	r2,2
 101c984:	e0bff50d 	sth	r2,-44(fp)
 101c988:	00800044 	movi	r2,1
 101c98c:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 101c990:	008040b4 	movhi	r2,258
 101c994:	108bbf44 	addi	r2,r2,12029
 101c998:	10800003 	ldbu	r2,0(r2)
 101c99c:	10803fcc 	andi	r2,r2,255
 101c9a0:	1005003a 	cmpeq	r2,r2,zero
 101c9a4:	1000051e 	bne	r2,zero,101c9bc <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
 101c9a8:	e17ff50b 	ldhu	r5,-44(fp)
 101c9ac:	e1bff583 	ldbu	r6,-42(fp)
 101c9b0:	e1fffe44 	addi	r7,fp,-7
 101c9b4:	e13ff417 	ldw	r4,-48(fp)
 101c9b8:	101747c0 	call	101747c <OSFlagPost>

        space--;
 101c9bc:	e0bff817 	ldw	r2,-32(fp)
 101c9c0:	10bfffc4 	addi	r2,r2,-1
 101c9c4:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 101c9c8:	e0bff817 	ldw	r2,-32(fp)
 101c9cc:	1005003a 	cmpeq	r2,r2,zero
 101c9d0:	1000051e 	bne	r2,zero,101c9e8 <altera_avalon_jtag_uart_irq+0x25c>
 101c9d4:	e0bffd17 	ldw	r2,-12(fp)
 101c9d8:	10c01017 	ldw	r3,64(r2)
 101c9dc:	e0bffd17 	ldw	r2,-12(fp)
 101c9e0:	10800f17 	ldw	r2,60(r2)
 101c9e4:	18bfd11e 	bne	r3,r2,101c92c <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 101c9e8:	e0bff817 	ldw	r2,-32(fp)
 101c9ec:	1005003a 	cmpeq	r2,r2,zero
 101c9f0:	103f711e 	bne	r2,zero,101c7b8 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 101c9f4:	e0bffd17 	ldw	r2,-12(fp)
 101c9f8:	10c00817 	ldw	r3,32(r2)
 101c9fc:	00bfff44 	movi	r2,-3
 101ca00:	1886703a 	and	r3,r3,r2
 101ca04:	e0bffd17 	ldw	r2,-12(fp)
 101ca08:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101ca0c:	e0bffd17 	ldw	r2,-12(fp)
 101ca10:	10800017 	ldw	r2,0(r2)
 101ca14:	11000104 	addi	r4,r2,4
 101ca18:	e0bffd17 	ldw	r2,-12(fp)
 101ca1c:	10800817 	ldw	r2,32(r2)
 101ca20:	1007883a 	mov	r3,r2
 101ca24:	2005883a 	mov	r2,r4
 101ca28:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101ca2c:	e0bffc17 	ldw	r2,-16(fp)
 101ca30:	10800104 	addi	r2,r2,4
 101ca34:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 101ca38:	003f5f06 	br	101c7b8 <altera_avalon_jtag_uart_irq+0x2c>
}
 101ca3c:	e037883a 	mov	sp,fp
 101ca40:	dfc00117 	ldw	ra,4(sp)
 101ca44:	df000017 	ldw	fp,0(sp)
 101ca48:	dec00204 	addi	sp,sp,8
 101ca4c:	f800283a 	ret

0101ca50 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 101ca50:	defff804 	addi	sp,sp,-32
 101ca54:	dfc00715 	stw	ra,28(sp)
 101ca58:	df000615 	stw	fp,24(sp)
 101ca5c:	df000604 	addi	fp,sp,24
 101ca60:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 101ca64:	e0bfff17 	ldw	r2,-4(fp)
 101ca68:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 101ca6c:	e0bffd17 	ldw	r2,-12(fp)
 101ca70:	10800017 	ldw	r2,0(r2)
 101ca74:	10800104 	addi	r2,r2,4
 101ca78:	10800037 	ldwio	r2,0(r2)
 101ca7c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 101ca80:	e0bffc17 	ldw	r2,-16(fp)
 101ca84:	1081000c 	andi	r2,r2,1024
 101ca88:	1005003a 	cmpeq	r2,r2,zero
 101ca8c:	10000c1e 	bne	r2,zero,101cac0 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 101ca90:	e0bffd17 	ldw	r2,-12(fp)
 101ca94:	10800017 	ldw	r2,0(r2)
 101ca98:	11000104 	addi	r4,r2,4
 101ca9c:	e0bffd17 	ldw	r2,-12(fp)
 101caa0:	10800817 	ldw	r2,32(r2)
 101caa4:	10810014 	ori	r2,r2,1024
 101caa8:	1007883a 	mov	r3,r2
 101caac:	2005883a 	mov	r2,r4
 101cab0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 101cab4:	e0bffd17 	ldw	r2,-12(fp)
 101cab8:	10000915 	stw	zero,36(r2)
 101cabc:	00002106 	br	101cb44 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 101cac0:	e0bffd17 	ldw	r2,-12(fp)
 101cac4:	10c00917 	ldw	r3,36(r2)
 101cac8:	00a00034 	movhi	r2,32768
 101cacc:	10bfff04 	addi	r2,r2,-4
 101cad0:	10c01c36 	bltu	r2,r3,101cb44 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 101cad4:	e0bffd17 	ldw	r2,-12(fp)
 101cad8:	10800917 	ldw	r2,36(r2)
 101cadc:	10c00044 	addi	r3,r2,1
 101cae0:	e0bffd17 	ldw	r2,-12(fp)
 101cae4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 101cae8:	e0bffd17 	ldw	r2,-12(fp)
 101caec:	10c00917 	ldw	r3,36(r2)
 101caf0:	e0bffd17 	ldw	r2,-12(fp)
 101caf4:	10800117 	ldw	r2,4(r2)
 101caf8:	18801236 	bltu	r3,r2,101cb44 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 101cafc:	e0bffd17 	ldw	r2,-12(fp)
 101cb00:	10800c17 	ldw	r2,48(r2)
 101cb04:	e0bffa15 	stw	r2,-24(fp)
 101cb08:	00800104 	movi	r2,4
 101cb0c:	e0bffb0d 	sth	r2,-20(fp)
 101cb10:	00800044 	movi	r2,1
 101cb14:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 101cb18:	008040b4 	movhi	r2,258
 101cb1c:	108bbf44 	addi	r2,r2,12029
 101cb20:	10800003 	ldbu	r2,0(r2)
 101cb24:	10803fcc 	andi	r2,r2,255
 101cb28:	1005003a 	cmpeq	r2,r2,zero
 101cb2c:	1000051e 	bne	r2,zero,101cb44 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 101cb30:	e17ffb0b 	ldhu	r5,-20(fp)
 101cb34:	e1bffb83 	ldbu	r6,-18(fp)
 101cb38:	e1fffe04 	addi	r7,fp,-8
 101cb3c:	e13ffa17 	ldw	r4,-24(fp)
 101cb40:	101747c0 	call	101747c <OSFlagPost>
 101cb44:	008040b4 	movhi	r2,258
 101cb48:	108bd404 	addi	r2,r2,12112
 101cb4c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 101cb50:	e037883a 	mov	sp,fp
 101cb54:	dfc00117 	ldw	ra,4(sp)
 101cb58:	df000017 	ldw	fp,0(sp)
 101cb5c:	dec00204 	addi	sp,sp,8
 101cb60:	f800283a 	ret

0101cb64 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 101cb64:	defffc04 	addi	sp,sp,-16
 101cb68:	df000315 	stw	fp,12(sp)
 101cb6c:	df000304 	addi	fp,sp,12
 101cb70:	e13ffd15 	stw	r4,-12(fp)
 101cb74:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 101cb78:	00000706 	br	101cb98 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 101cb7c:	e0bffe17 	ldw	r2,-8(fp)
 101cb80:	1090000c 	andi	r2,r2,16384
 101cb84:	1005003a 	cmpeq	r2,r2,zero
 101cb88:	1000031e 	bne	r2,zero,101cb98 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 101cb8c:	00bffd44 	movi	r2,-11
 101cb90:	e0bfff15 	stw	r2,-4(fp)
 101cb94:	00000b06 	br	101cbc4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 101cb98:	e0bffd17 	ldw	r2,-12(fp)
 101cb9c:	10c01017 	ldw	r3,64(r2)
 101cba0:	e0bffd17 	ldw	r2,-12(fp)
 101cba4:	10800f17 	ldw	r2,60(r2)
 101cba8:	18800526 	beq	r3,r2,101cbc0 <altera_avalon_jtag_uart_close+0x5c>
 101cbac:	e0bffd17 	ldw	r2,-12(fp)
 101cbb0:	10c00917 	ldw	r3,36(r2)
 101cbb4:	e0bffd17 	ldw	r2,-12(fp)
 101cbb8:	10800117 	ldw	r2,4(r2)
 101cbbc:	18bfef36 	bltu	r3,r2,101cb7c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 101cbc0:	e03fff15 	stw	zero,-4(fp)
 101cbc4:	e0bfff17 	ldw	r2,-4(fp)
}
 101cbc8:	e037883a 	mov	sp,fp
 101cbcc:	df000017 	ldw	fp,0(sp)
 101cbd0:	dec00104 	addi	sp,sp,4
 101cbd4:	f800283a 	ret

0101cbd8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 101cbd8:	defff804 	addi	sp,sp,-32
 101cbdc:	df000715 	stw	fp,28(sp)
 101cbe0:	df000704 	addi	fp,sp,28
 101cbe4:	e13ffb15 	stw	r4,-20(fp)
 101cbe8:	e17ffc15 	stw	r5,-16(fp)
 101cbec:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 101cbf0:	00bff9c4 	movi	r2,-25
 101cbf4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 101cbf8:	e0bffc17 	ldw	r2,-16(fp)
 101cbfc:	e0bfff15 	stw	r2,-4(fp)
 101cc00:	e0ffff17 	ldw	r3,-4(fp)
 101cc04:	189a8060 	cmpeqi	r2,r3,27137
 101cc08:	1000041e 	bne	r2,zero,101cc1c <altera_avalon_jtag_uart_ioctl+0x44>
 101cc0c:	e0ffff17 	ldw	r3,-4(fp)
 101cc10:	189a80a0 	cmpeqi	r2,r3,27138
 101cc14:	10001b1e 	bne	r2,zero,101cc84 <altera_avalon_jtag_uart_ioctl+0xac>
 101cc18:	00002706 	br	101ccb8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 101cc1c:	e0bffb17 	ldw	r2,-20(fp)
 101cc20:	10c00117 	ldw	r3,4(r2)
 101cc24:	00a00034 	movhi	r2,32768
 101cc28:	10bfffc4 	addi	r2,r2,-1
 101cc2c:	18802226 	beq	r3,r2,101ccb8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 101cc30:	e0bffd17 	ldw	r2,-12(fp)
 101cc34:	10800017 	ldw	r2,0(r2)
 101cc38:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 101cc3c:	e0bff917 	ldw	r2,-28(fp)
 101cc40:	10800090 	cmplti	r2,r2,2
 101cc44:	1000071e 	bne	r2,zero,101cc64 <altera_avalon_jtag_uart_ioctl+0x8c>
 101cc48:	e0fff917 	ldw	r3,-28(fp)
 101cc4c:	00a00034 	movhi	r2,32768
 101cc50:	10bfffc4 	addi	r2,r2,-1
 101cc54:	18800326 	beq	r3,r2,101cc64 <altera_avalon_jtag_uart_ioctl+0x8c>
 101cc58:	e0bff917 	ldw	r2,-28(fp)
 101cc5c:	e0bffe15 	stw	r2,-8(fp)
 101cc60:	00000306 	br	101cc70 <altera_avalon_jtag_uart_ioctl+0x98>
 101cc64:	00e00034 	movhi	r3,32768
 101cc68:	18ffff84 	addi	r3,r3,-2
 101cc6c:	e0fffe15 	stw	r3,-8(fp)
 101cc70:	e0bffb17 	ldw	r2,-20(fp)
 101cc74:	e0fffe17 	ldw	r3,-8(fp)
 101cc78:	10c00115 	stw	r3,4(r2)
      rc = 0;
 101cc7c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 101cc80:	00000d06 	br	101ccb8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 101cc84:	e0bffb17 	ldw	r2,-20(fp)
 101cc88:	10c00117 	ldw	r3,4(r2)
 101cc8c:	00a00034 	movhi	r2,32768
 101cc90:	10bfffc4 	addi	r2,r2,-1
 101cc94:	18800826 	beq	r3,r2,101ccb8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 101cc98:	e13ffd17 	ldw	r4,-12(fp)
 101cc9c:	e0bffb17 	ldw	r2,-20(fp)
 101cca0:	10c00917 	ldw	r3,36(r2)
 101cca4:	e0bffb17 	ldw	r2,-20(fp)
 101cca8:	10800117 	ldw	r2,4(r2)
 101ccac:	1885803a 	cmpltu	r2,r3,r2
 101ccb0:	20800015 	stw	r2,0(r4)
      rc = 0;
 101ccb4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 101ccb8:	e0bffa17 	ldw	r2,-24(fp)
}
 101ccbc:	e037883a 	mov	sp,fp
 101ccc0:	df000017 	ldw	fp,0(sp)
 101ccc4:	dec00104 	addi	sp,sp,4
 101ccc8:	f800283a 	ret

0101cccc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 101cccc:	deffeb04 	addi	sp,sp,-84
 101ccd0:	dfc01415 	stw	ra,80(sp)
 101ccd4:	df001315 	stw	fp,76(sp)
 101ccd8:	df001304 	addi	fp,sp,76
 101ccdc:	e13ffb15 	stw	r4,-20(fp)
 101cce0:	e17ffc15 	stw	r5,-16(fp)
 101cce4:	e1bffd15 	stw	r6,-12(fp)
 101cce8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 101ccec:	e0bffc17 	ldw	r2,-16(fp)
 101ccf0:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 101ccf4:	e0bffb17 	ldw	r2,-20(fp)
 101ccf8:	10800a17 	ldw	r2,40(r2)
 101ccfc:	e0bff315 	stw	r2,-52(fp)
 101cd00:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 101cd04:	e17ff40b 	ldhu	r5,-48(fp)
 101cd08:	e1bffa44 	addi	r6,fp,-23
 101cd0c:	e13ff317 	ldw	r4,-52(fp)
 101cd10:	1019d0c0 	call	1019d0c <OSSemPend>

  while (space > 0)
 101cd14:	00006406 	br	101cea8 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 101cd18:	e0bffb17 	ldw	r2,-20(fp)
 101cd1c:	10800d17 	ldw	r2,52(r2)
 101cd20:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 101cd24:	e0bffb17 	ldw	r2,-20(fp)
 101cd28:	10800e17 	ldw	r2,56(r2)
 101cd2c:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 101cd30:	e0fff617 	ldw	r3,-40(fp)
 101cd34:	e0bff517 	ldw	r2,-44(fp)
 101cd38:	18800536 	bltu	r3,r2,101cd50 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 101cd3c:	e0bff617 	ldw	r2,-40(fp)
 101cd40:	e0fff517 	ldw	r3,-44(fp)
 101cd44:	10c5c83a 	sub	r2,r2,r3
 101cd48:	e0bff715 	stw	r2,-36(fp)
 101cd4c:	00000406 	br	101cd60 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 101cd50:	00820004 	movi	r2,2048
 101cd54:	e0fff517 	ldw	r3,-44(fp)
 101cd58:	10c5c83a 	sub	r2,r2,r3
 101cd5c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 101cd60:	e0bff717 	ldw	r2,-36(fp)
 101cd64:	1005003a 	cmpeq	r2,r2,zero
 101cd68:	10001f1e 	bne	r2,zero,101cde8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 101cd6c:	e0fffd17 	ldw	r3,-12(fp)
 101cd70:	e0bff717 	ldw	r2,-36(fp)
 101cd74:	1880022e 	bgeu	r3,r2,101cd80 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 101cd78:	e0bffd17 	ldw	r2,-12(fp)
 101cd7c:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 101cd80:	e0bffb17 	ldw	r2,-20(fp)
 101cd84:	10c01104 	addi	r3,r2,68
 101cd88:	e0bff517 	ldw	r2,-44(fp)
 101cd8c:	1887883a 	add	r3,r3,r2
 101cd90:	e0bff917 	ldw	r2,-28(fp)
 101cd94:	1009883a 	mov	r4,r2
 101cd98:	180b883a 	mov	r5,r3
 101cd9c:	e1bff717 	ldw	r6,-36(fp)
 101cda0:	1009fa80 	call	1009fa8 <memcpy>
      ptr   += n;
 101cda4:	e0fff717 	ldw	r3,-36(fp)
 101cda8:	e0bff917 	ldw	r2,-28(fp)
 101cdac:	10c5883a 	add	r2,r2,r3
 101cdb0:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 101cdb4:	e0fffd17 	ldw	r3,-12(fp)
 101cdb8:	e0bff717 	ldw	r2,-36(fp)
 101cdbc:	1885c83a 	sub	r2,r3,r2
 101cdc0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101cdc4:	e0fff517 	ldw	r3,-44(fp)
 101cdc8:	e0bff717 	ldw	r2,-36(fp)
 101cdcc:	1885883a 	add	r2,r3,r2
 101cdd0:	10c1ffcc 	andi	r3,r2,2047
 101cdd4:	e0bffb17 	ldw	r2,-20(fp)
 101cdd8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 101cddc:	e0bffd17 	ldw	r2,-12(fp)
 101cde0:	10800048 	cmpgei	r2,r2,1
 101cde4:	103fcc1e 	bne	r2,zero,101cd18 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 101cde8:	e0fff917 	ldw	r3,-28(fp)
 101cdec:	e0bffc17 	ldw	r2,-16(fp)
 101cdf0:	1880301e 	bne	r3,r2,101ceb4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 101cdf4:	e0bffe17 	ldw	r2,-8(fp)
 101cdf8:	1090000c 	andi	r2,r2,16384
 101cdfc:	1004c03a 	cmpne	r2,r2,zero
 101ce00:	10002c1e 	bne	r2,zero,101ceb4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 101ce04:	008040b4 	movhi	r2,258
 101ce08:	108bbf44 	addi	r2,r2,12029
 101ce0c:	10800003 	ldbu	r2,0(r2)
 101ce10:	10803fcc 	andi	r2,r2,255
 101ce14:	10800058 	cmpnei	r2,r2,1
 101ce18:	1000161e 	bne	r2,zero,101ce74 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 101ce1c:	e0bffb17 	ldw	r2,-20(fp)
 101ce20:	10800c17 	ldw	r2,48(r2)
 101ce24:	e0bff015 	stw	r2,-64(fp)
 101ce28:	00800144 	movi	r2,5
 101ce2c:	e0bff10d 	sth	r2,-60(fp)
 101ce30:	00bfe0c4 	movi	r2,-125
 101ce34:	e0bff185 	stb	r2,-58(fp)
 101ce38:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 101ce3c:	008040b4 	movhi	r2,258
 101ce40:	108bbf44 	addi	r2,r2,12029
 101ce44:	10800003 	ldbu	r2,0(r2)
 101ce48:	10803fcc 	andi	r2,r2,255
 101ce4c:	1005003a 	cmpeq	r2,r2,zero
 101ce50:	1000111e 	bne	r2,zero,101ce98 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 101ce54:	e17ff10b 	ldhu	r5,-60(fp)
 101ce58:	e1bff183 	ldbu	r6,-58(fp)
 101ce5c:	e1fff20b 	ldhu	r7,-56(fp)
 101ce60:	e0bffa04 	addi	r2,fp,-24
 101ce64:	d8800015 	stw	r2,0(sp)
 101ce68:	e13ff017 	ldw	r4,-64(fp)
 101ce6c:	1016dd00 	call	1016dd0 <OSFlagPend>
    return err;
 101ce70:	00000906 	br	101ce98 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 101ce74:	e0bffb17 	ldw	r2,-20(fp)
 101ce78:	10c00d17 	ldw	r3,52(r2)
 101ce7c:	e0bff617 	ldw	r2,-40(fp)
 101ce80:	1880051e 	bne	r3,r2,101ce98 <altera_avalon_jtag_uart_read+0x1cc>
 101ce84:	e0bffb17 	ldw	r2,-20(fp)
 101ce88:	10c00917 	ldw	r3,36(r2)
 101ce8c:	e0bffb17 	ldw	r2,-20(fp)
 101ce90:	10800117 	ldw	r2,4(r2)
 101ce94:	18bff736 	bltu	r3,r2,101ce74 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 101ce98:	e0bffb17 	ldw	r2,-20(fp)
 101ce9c:	10c00d17 	ldw	r3,52(r2)
 101cea0:	e0bff617 	ldw	r2,-40(fp)
 101cea4:	18800326 	beq	r3,r2,101ceb4 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 101cea8:	e0bffd17 	ldw	r2,-12(fp)
 101ceac:	10800048 	cmpgei	r2,r2,1
 101ceb0:	103f991e 	bne	r2,zero,101cd18 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 101ceb4:	e0bffb17 	ldw	r2,-20(fp)
 101ceb8:	11000a17 	ldw	r4,40(r2)
 101cebc:	101a1040 	call	101a104 <OSSemPost>

  if (ptr != buffer)
 101cec0:	e0fff917 	ldw	r3,-28(fp)
 101cec4:	e0bffc17 	ldw	r2,-16(fp)
 101cec8:	18801926 	beq	r3,r2,101cf30 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101cecc:	0005303a 	rdctl	r2,status
 101ced0:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ced4:	e0ffef17 	ldw	r3,-68(fp)
 101ced8:	00bfff84 	movi	r2,-2
 101cedc:	1884703a 	and	r2,r3,r2
 101cee0:	1001703a 	wrctl	status,r2
  
  return context;
 101cee4:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 101cee8:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101ceec:	e0bffb17 	ldw	r2,-20(fp)
 101cef0:	10800817 	ldw	r2,32(r2)
 101cef4:	10c00054 	ori	r3,r2,1
 101cef8:	e0bffb17 	ldw	r2,-20(fp)
 101cefc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101cf00:	e0bffb17 	ldw	r2,-20(fp)
 101cf04:	10800017 	ldw	r2,0(r2)
 101cf08:	11000104 	addi	r4,r2,4
 101cf0c:	e0bffb17 	ldw	r2,-20(fp)
 101cf10:	10800817 	ldw	r2,32(r2)
 101cf14:	1007883a 	mov	r3,r2
 101cf18:	2005883a 	mov	r2,r4
 101cf1c:	10c00035 	stwio	r3,0(r2)
 101cf20:	e0bff817 	ldw	r2,-32(fp)
 101cf24:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101cf28:	e0bfee17 	ldw	r2,-72(fp)
 101cf2c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 101cf30:	e0fff917 	ldw	r3,-28(fp)
 101cf34:	e0bffc17 	ldw	r2,-16(fp)
 101cf38:	18800526 	beq	r3,r2,101cf50 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 101cf3c:	e0fff917 	ldw	r3,-28(fp)
 101cf40:	e0bffc17 	ldw	r2,-16(fp)
 101cf44:	1887c83a 	sub	r3,r3,r2
 101cf48:	e0ffff15 	stw	r3,-4(fp)
 101cf4c:	00000906 	br	101cf74 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 101cf50:	e0bffe17 	ldw	r2,-8(fp)
 101cf54:	1090000c 	andi	r2,r2,16384
 101cf58:	1005003a 	cmpeq	r2,r2,zero
 101cf5c:	1000031e 	bne	r2,zero,101cf6c <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 101cf60:	00bffd44 	movi	r2,-11
 101cf64:	e0bfff15 	stw	r2,-4(fp)
 101cf68:	00000206 	br	101cf74 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 101cf6c:	00bffec4 	movi	r2,-5
 101cf70:	e0bfff15 	stw	r2,-4(fp)
 101cf74:	e0bfff17 	ldw	r2,-4(fp)
}
 101cf78:	e037883a 	mov	sp,fp
 101cf7c:	dfc00117 	ldw	ra,4(sp)
 101cf80:	df000017 	ldw	fp,0(sp)
 101cf84:	dec00204 	addi	sp,sp,8
 101cf88:	f800283a 	ret

0101cf8c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 101cf8c:	deffeb04 	addi	sp,sp,-84
 101cf90:	dfc01415 	stw	ra,80(sp)
 101cf94:	df001315 	stw	fp,76(sp)
 101cf98:	df001304 	addi	fp,sp,76
 101cf9c:	e13ffb15 	stw	r4,-20(fp)
 101cfa0:	e17ffc15 	stw	r5,-16(fp)
 101cfa4:	e1bffd15 	stw	r6,-12(fp)
 101cfa8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 101cfac:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 101cfb0:	e0bffc17 	ldw	r2,-16(fp)
 101cfb4:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 101cfb8:	e0bffb17 	ldw	r2,-20(fp)
 101cfbc:	10800b17 	ldw	r2,44(r2)
 101cfc0:	e0bff315 	stw	r2,-52(fp)
 101cfc4:	e03ff40d 	sth	zero,-48(fp)
 101cfc8:	e17ff40b 	ldhu	r5,-48(fp)
 101cfcc:	e1bffa04 	addi	r6,fp,-24
 101cfd0:	e13ff317 	ldw	r4,-52(fp)
 101cfd4:	1019d0c0 	call	1019d0c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 101cfd8:	00003a06 	br	101d0c4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 101cfdc:	e0bffb17 	ldw	r2,-20(fp)
 101cfe0:	10800f17 	ldw	r2,60(r2)
 101cfe4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 101cfe8:	e0bffb17 	ldw	r2,-20(fp)
 101cfec:	10801017 	ldw	r2,64(r2)
 101cff0:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 101cff4:	e0fff917 	ldw	r3,-28(fp)
 101cff8:	e0bff817 	ldw	r2,-32(fp)
 101cffc:	1880062e 	bgeu	r3,r2,101d018 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 101d000:	e0fff817 	ldw	r3,-32(fp)
 101d004:	e0bff917 	ldw	r2,-28(fp)
 101d008:	1885c83a 	sub	r2,r3,r2
 101d00c:	10bfffc4 	addi	r2,r2,-1
 101d010:	e0bff715 	stw	r2,-36(fp)
 101d014:	00000c06 	br	101d048 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 101d018:	e0bff817 	ldw	r2,-32(fp)
 101d01c:	1005003a 	cmpeq	r2,r2,zero
 101d020:	1000051e 	bne	r2,zero,101d038 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 101d024:	00820004 	movi	r2,2048
 101d028:	e0fff917 	ldw	r3,-28(fp)
 101d02c:	10c5c83a 	sub	r2,r2,r3
 101d030:	e0bff715 	stw	r2,-36(fp)
 101d034:	00000406 	br	101d048 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 101d038:	0081ffc4 	movi	r2,2047
 101d03c:	e0fff917 	ldw	r3,-28(fp)
 101d040:	10c5c83a 	sub	r2,r2,r3
 101d044:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 101d048:	e0bff717 	ldw	r2,-36(fp)
 101d04c:	1005003a 	cmpeq	r2,r2,zero
 101d050:	10001f1e 	bne	r2,zero,101d0d0 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 101d054:	e0fffd17 	ldw	r3,-12(fp)
 101d058:	e0bff717 	ldw	r2,-36(fp)
 101d05c:	1880022e 	bgeu	r3,r2,101d068 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 101d060:	e0bffd17 	ldw	r2,-12(fp)
 101d064:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 101d068:	e0bffb17 	ldw	r2,-20(fp)
 101d06c:	10c21104 	addi	r3,r2,2116
 101d070:	e0bff917 	ldw	r2,-28(fp)
 101d074:	1885883a 	add	r2,r3,r2
 101d078:	e0fffc17 	ldw	r3,-16(fp)
 101d07c:	1009883a 	mov	r4,r2
 101d080:	180b883a 	mov	r5,r3
 101d084:	e1bff717 	ldw	r6,-36(fp)
 101d088:	1009fa80 	call	1009fa8 <memcpy>
      ptr   += n;
 101d08c:	e0fff717 	ldw	r3,-36(fp)
 101d090:	e0bffc17 	ldw	r2,-16(fp)
 101d094:	10c5883a 	add	r2,r2,r3
 101d098:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 101d09c:	e0fffd17 	ldw	r3,-12(fp)
 101d0a0:	e0bff717 	ldw	r2,-36(fp)
 101d0a4:	1885c83a 	sub	r2,r3,r2
 101d0a8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101d0ac:	e0fff917 	ldw	r3,-28(fp)
 101d0b0:	e0bff717 	ldw	r2,-36(fp)
 101d0b4:	1885883a 	add	r2,r3,r2
 101d0b8:	10c1ffcc 	andi	r3,r2,2047
 101d0bc:	e0bffb17 	ldw	r2,-20(fp)
 101d0c0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 101d0c4:	e0bffd17 	ldw	r2,-12(fp)
 101d0c8:	10800048 	cmpgei	r2,r2,1
 101d0cc:	103fc31e 	bne	r2,zero,101cfdc <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d0d0:	0005303a 	rdctl	r2,status
 101d0d4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d0d8:	e0fff217 	ldw	r3,-56(fp)
 101d0dc:	00bfff84 	movi	r2,-2
 101d0e0:	1884703a 	and	r2,r3,r2
 101d0e4:	1001703a 	wrctl	status,r2
  
  return context;
 101d0e8:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 101d0ec:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 101d0f0:	e0bffb17 	ldw	r2,-20(fp)
 101d0f4:	10800817 	ldw	r2,32(r2)
 101d0f8:	10c00094 	ori	r3,r2,2
 101d0fc:	e0bffb17 	ldw	r2,-20(fp)
 101d100:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101d104:	e0bffb17 	ldw	r2,-20(fp)
 101d108:	10800017 	ldw	r2,0(r2)
 101d10c:	11000104 	addi	r4,r2,4
 101d110:	e0bffb17 	ldw	r2,-20(fp)
 101d114:	10800817 	ldw	r2,32(r2)
 101d118:	1007883a 	mov	r3,r2
 101d11c:	2005883a 	mov	r2,r4
 101d120:	10c00035 	stwio	r3,0(r2)
 101d124:	e0bff617 	ldw	r2,-40(fp)
 101d128:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d12c:	e0bff117 	ldw	r2,-60(fp)
 101d130:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 101d134:	e0bffd17 	ldw	r2,-12(fp)
 101d138:	10800050 	cmplti	r2,r2,1
 101d13c:	10002d1e 	bne	r2,zero,101d1f4 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 101d140:	e0bffe17 	ldw	r2,-8(fp)
 101d144:	1090000c 	andi	r2,r2,16384
 101d148:	1004c03a 	cmpne	r2,r2,zero
 101d14c:	10002c1e 	bne	r2,zero,101d200 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 101d150:	008040b4 	movhi	r2,258
 101d154:	108bbf44 	addi	r2,r2,12029
 101d158:	10800003 	ldbu	r2,0(r2)
 101d15c:	10803fcc 	andi	r2,r2,255
 101d160:	10800058 	cmpnei	r2,r2,1
 101d164:	1000161e 	bne	r2,zero,101d1c0 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
 101d168:	e0bffb17 	ldw	r2,-20(fp)
 101d16c:	10800c17 	ldw	r2,48(r2)
 101d170:	e0bfee15 	stw	r2,-72(fp)
 101d174:	00800184 	movi	r2,6
 101d178:	e0bfef0d 	sth	r2,-68(fp)
 101d17c:	00bfe0c4 	movi	r2,-125
 101d180:	e0bfef85 	stb	r2,-66(fp)
 101d184:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 101d188:	008040b4 	movhi	r2,258
 101d18c:	108bbf44 	addi	r2,r2,12029
 101d190:	10800003 	ldbu	r2,0(r2)
 101d194:	10803fcc 	andi	r2,r2,255
 101d198:	1005003a 	cmpeq	r2,r2,zero
 101d19c:	1000111e 	bne	r2,zero,101d1e4 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 101d1a0:	e17fef0b 	ldhu	r5,-68(fp)
 101d1a4:	e1bfef83 	ldbu	r6,-66(fp)
 101d1a8:	e1fff00b 	ldhu	r7,-64(fp)
 101d1ac:	e0bffa44 	addi	r2,fp,-23
 101d1b0:	d8800015 	stw	r2,0(sp)
 101d1b4:	e13fee17 	ldw	r4,-72(fp)
 101d1b8:	1016dd00 	call	1016dd0 <OSFlagPend>
    return err;
 101d1bc:	00000906 	br	101d1e4 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 101d1c0:	e0bffb17 	ldw	r2,-20(fp)
 101d1c4:	10c01017 	ldw	r3,64(r2)
 101d1c8:	e0bff817 	ldw	r2,-32(fp)
 101d1cc:	1880051e 	bne	r3,r2,101d1e4 <altera_avalon_jtag_uart_write+0x258>
 101d1d0:	e0bffb17 	ldw	r2,-20(fp)
 101d1d4:	10c00917 	ldw	r3,36(r2)
 101d1d8:	e0bffb17 	ldw	r2,-20(fp)
 101d1dc:	10800117 	ldw	r2,4(r2)
 101d1e0:	18bff736 	bltu	r3,r2,101d1c0 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 101d1e4:	e0bffb17 	ldw	r2,-20(fp)
 101d1e8:	10c01017 	ldw	r3,64(r2)
 101d1ec:	e0bff817 	ldw	r2,-32(fp)
 101d1f0:	18800326 	beq	r3,r2,101d200 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
 101d1f4:	e0bffd17 	ldw	r2,-12(fp)
 101d1f8:	10800048 	cmpgei	r2,r2,1
 101d1fc:	103fb11e 	bne	r2,zero,101d0c4 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 101d200:	e0bffb17 	ldw	r2,-20(fp)
 101d204:	11000b17 	ldw	r4,44(r2)
 101d208:	101a1040 	call	101a104 <OSSemPost>

  if (ptr != start)
 101d20c:	e0fffc17 	ldw	r3,-16(fp)
 101d210:	e0bff517 	ldw	r2,-44(fp)
 101d214:	18800526 	beq	r3,r2,101d22c <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 101d218:	e0fffc17 	ldw	r3,-16(fp)
 101d21c:	e0bff517 	ldw	r2,-44(fp)
 101d220:	1887c83a 	sub	r3,r3,r2
 101d224:	e0ffff15 	stw	r3,-4(fp)
 101d228:	00000906 	br	101d250 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 101d22c:	e0bffe17 	ldw	r2,-8(fp)
 101d230:	1090000c 	andi	r2,r2,16384
 101d234:	1005003a 	cmpeq	r2,r2,zero
 101d238:	1000031e 	bne	r2,zero,101d248 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 101d23c:	00bffd44 	movi	r2,-11
 101d240:	e0bfff15 	stw	r2,-4(fp)
 101d244:	00000206 	br	101d250 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
 101d248:	00bffec4 	movi	r2,-5
 101d24c:	e0bfff15 	stw	r2,-4(fp)
 101d250:	e0bfff17 	ldw	r2,-4(fp)
}
 101d254:	e037883a 	mov	sp,fp
 101d258:	dfc00117 	ldw	ra,4(sp)
 101d25c:	df000017 	ldw	fp,0(sp)
 101d260:	dec00204 	addi	sp,sp,8
 101d264:	f800283a 	ret

0101d268 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 101d268:	defffa04 	addi	sp,sp,-24
 101d26c:	dfc00515 	stw	ra,20(sp)
 101d270:	df000415 	stw	fp,16(sp)
 101d274:	df000404 	addi	fp,sp,16
 101d278:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 101d27c:	e0bfff17 	ldw	r2,-4(fp)
 101d280:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 101d284:	e0bfff17 	ldw	r2,-4(fp)
 101d288:	10800104 	addi	r2,r2,4
 101d28c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d290:	0005303a 	rdctl	r2,status
 101d294:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d298:	e0fffd17 	ldw	r3,-12(fp)
 101d29c:	00bfff84 	movi	r2,-2
 101d2a0:	1884703a 	and	r2,r3,r2
 101d2a4:	1001703a 	wrctl	status,r2
  
  return context;
 101d2a8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 101d2ac:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 101d2b0:	101de700 	call	101de70 <alt_tick>
 101d2b4:	e0bffe17 	ldw	r2,-8(fp)
 101d2b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d2bc:	e0bffc17 	ldw	r2,-16(fp)
 101d2c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 101d2c4:	e037883a 	mov	sp,fp
 101d2c8:	dfc00117 	ldw	ra,4(sp)
 101d2cc:	df000017 	ldw	fp,0(sp)
 101d2d0:	dec00204 	addi	sp,sp,8
 101d2d4:	f800283a 	ret

0101d2d8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 101d2d8:	defff804 	addi	sp,sp,-32
 101d2dc:	dfc00715 	stw	ra,28(sp)
 101d2e0:	df000615 	stw	fp,24(sp)
 101d2e4:	df000604 	addi	fp,sp,24
 101d2e8:	e13ffc15 	stw	r4,-16(fp)
 101d2ec:	e17ffd15 	stw	r5,-12(fp)
 101d2f0:	e1bffe15 	stw	r6,-8(fp)
 101d2f4:	e1ffff15 	stw	r7,-4(fp)
 101d2f8:	e0bfff17 	ldw	r2,-4(fp)
 101d2fc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 101d300:	008040b4 	movhi	r2,258
 101d304:	108bd404 	addi	r2,r2,12112
 101d308:	10800017 	ldw	r2,0(r2)
 101d30c:	1004c03a 	cmpne	r2,r2,zero
 101d310:	1000041e 	bne	r2,zero,101d324 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 101d314:	00c040b4 	movhi	r3,258
 101d318:	18cbd404 	addi	r3,r3,12112
 101d31c:	e0bffb17 	ldw	r2,-20(fp)
 101d320:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 101d324:	e0bffc17 	ldw	r2,-16(fp)
 101d328:	10800104 	addi	r2,r2,4
 101d32c:	1007883a 	mov	r3,r2
 101d330:	008001c4 	movi	r2,7
 101d334:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 101d338:	d8000015 	stw	zero,0(sp)
 101d33c:	e13ffd17 	ldw	r4,-12(fp)
 101d340:	e17ffe17 	ldw	r5,-8(fp)
 101d344:	018040b4 	movhi	r6,258
 101d348:	31b49a04 	addi	r6,r6,-11672
 101d34c:	e1fffc17 	ldw	r7,-16(fp)
 101d350:	101d70c0 	call	101d70c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 101d354:	e037883a 	mov	sp,fp
 101d358:	dfc00117 	ldw	ra,4(sp)
 101d35c:	df000017 	ldw	fp,0(sp)
 101d360:	dec00204 	addi	sp,sp,8
 101d364:	f800283a 	ret

0101d368 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 101d368:	defff404 	addi	sp,sp,-48
 101d36c:	df000b15 	stw	fp,44(sp)
 101d370:	df000b04 	addi	fp,sp,44
 101d374:	e13ffb15 	stw	r4,-20(fp)
 101d378:	e17ffc15 	stw	r5,-16(fp)
 101d37c:	e1bffd15 	stw	r6,-12(fp)
 101d380:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 101d384:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 101d388:	008040b4 	movhi	r2,258
 101d38c:	108bd404 	addi	r2,r2,12112
 101d390:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 101d394:	1005003a 	cmpeq	r2,r2,zero
 101d398:	1000411e 	bne	r2,zero,101d4a0 <alt_alarm_start+0x138>
  {
    if (alarm)
 101d39c:	e0bffb17 	ldw	r2,-20(fp)
 101d3a0:	1005003a 	cmpeq	r2,r2,zero
 101d3a4:	10003b1e 	bne	r2,zero,101d494 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 101d3a8:	e0fffb17 	ldw	r3,-20(fp)
 101d3ac:	e0bffd17 	ldw	r2,-12(fp)
 101d3b0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 101d3b4:	e0fffb17 	ldw	r3,-20(fp)
 101d3b8:	e0bffe17 	ldw	r2,-8(fp)
 101d3bc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d3c0:	0005303a 	rdctl	r2,status
 101d3c4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d3c8:	e0fff817 	ldw	r3,-32(fp)
 101d3cc:	00bfff84 	movi	r2,-2
 101d3d0:	1884703a 	and	r2,r3,r2
 101d3d4:	1001703a 	wrctl	status,r2
  
  return context;
 101d3d8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 101d3dc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 101d3e0:	008040b4 	movhi	r2,258
 101d3e4:	108bd504 	addi	r2,r2,12116
 101d3e8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 101d3ec:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 101d3f0:	e0fffc17 	ldw	r3,-16(fp)
 101d3f4:	e0bff917 	ldw	r2,-28(fp)
 101d3f8:	1885883a 	add	r2,r3,r2
 101d3fc:	10c00044 	addi	r3,r2,1
 101d400:	e0bffb17 	ldw	r2,-20(fp)
 101d404:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 101d408:	e0bffb17 	ldw	r2,-20(fp)
 101d40c:	10c00217 	ldw	r3,8(r2)
 101d410:	e0bff917 	ldw	r2,-28(fp)
 101d414:	1880042e 	bgeu	r3,r2,101d428 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 101d418:	e0fffb17 	ldw	r3,-20(fp)
 101d41c:	00800044 	movi	r2,1
 101d420:	18800405 	stb	r2,16(r3)
 101d424:	00000206 	br	101d430 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 101d428:	e0bffb17 	ldw	r2,-20(fp)
 101d42c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 101d430:	e0fffb17 	ldw	r3,-20(fp)
 101d434:	008040b4 	movhi	r2,258
 101d438:	1084d404 	addi	r2,r2,4944
 101d43c:	e0bff615 	stw	r2,-40(fp)
 101d440:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101d444:	e0fff717 	ldw	r3,-36(fp)
 101d448:	e0bff617 	ldw	r2,-40(fp)
 101d44c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 101d450:	e0bff617 	ldw	r2,-40(fp)
 101d454:	10c00017 	ldw	r3,0(r2)
 101d458:	e0bff717 	ldw	r2,-36(fp)
 101d45c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 101d460:	e0bff617 	ldw	r2,-40(fp)
 101d464:	10c00017 	ldw	r3,0(r2)
 101d468:	e0bff717 	ldw	r2,-36(fp)
 101d46c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 101d470:	e0fff617 	ldw	r3,-40(fp)
 101d474:	e0bff717 	ldw	r2,-36(fp)
 101d478:	18800015 	stw	r2,0(r3)
 101d47c:	e0bffa17 	ldw	r2,-24(fp)
 101d480:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d484:	e0bff517 	ldw	r2,-44(fp)
 101d488:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 101d48c:	e03fff15 	stw	zero,-4(fp)
 101d490:	00000506 	br	101d4a8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 101d494:	00bffa84 	movi	r2,-22
 101d498:	e0bfff15 	stw	r2,-4(fp)
 101d49c:	00000206 	br	101d4a8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 101d4a0:	00bfde84 	movi	r2,-134
 101d4a4:	e0bfff15 	stw	r2,-4(fp)
 101d4a8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 101d4ac:	e037883a 	mov	sp,fp
 101d4b0:	df000017 	ldw	fp,0(sp)
 101d4b4:	dec00104 	addi	sp,sp,4
 101d4b8:	f800283a 	ret

0101d4bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 101d4bc:	defffe04 	addi	sp,sp,-8
 101d4c0:	df000115 	stw	fp,4(sp)
 101d4c4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 101d4c8:	e03fff15 	stw	zero,-4(fp)
 101d4cc:	00000506 	br	101d4e4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 101d4d0:	e0bfff17 	ldw	r2,-4(fp)
 101d4d4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 101d4d8:	e0bfff17 	ldw	r2,-4(fp)
 101d4dc:	10800804 	addi	r2,r2,32
 101d4e0:	e0bfff15 	stw	r2,-4(fp)
 101d4e4:	e0bfff17 	ldw	r2,-4(fp)
 101d4e8:	10840030 	cmpltui	r2,r2,4096
 101d4ec:	103ff81e 	bne	r2,zero,101d4d0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 101d4f0:	e037883a 	mov	sp,fp
 101d4f4:	df000017 	ldw	fp,0(sp)
 101d4f8:	dec00104 	addi	sp,sp,4
 101d4fc:	f800283a 	ret

0101d500 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 101d500:	defff904 	addi	sp,sp,-28
 101d504:	dfc00615 	stw	ra,24(sp)
 101d508:	df000515 	stw	fp,20(sp)
 101d50c:	df000504 	addi	fp,sp,20
 101d510:	e13ffd15 	stw	r4,-12(fp)
 101d514:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 101d518:	e0bffd17 	ldw	r2,-12(fp)
 101d51c:	1005003a 	cmpeq	r2,r2,zero
 101d520:	1000041e 	bne	r2,zero,101d534 <alt_dev_llist_insert+0x34>
 101d524:	e0bffd17 	ldw	r2,-12(fp)
 101d528:	10800217 	ldw	r2,8(r2)
 101d52c:	1004c03a 	cmpne	r2,r2,zero
 101d530:	1000071e 	bne	r2,zero,101d550 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 101d534:	101d5b40 	call	101d5b4 <alt_get_errno>
 101d538:	1007883a 	mov	r3,r2
 101d53c:	00800584 	movi	r2,22
 101d540:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 101d544:	00bffa84 	movi	r2,-22
 101d548:	e0bfff15 	stw	r2,-4(fp)
 101d54c:	00001306 	br	101d59c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 101d550:	e0fffd17 	ldw	r3,-12(fp)
 101d554:	e0bffe17 	ldw	r2,-8(fp)
 101d558:	e0bffb15 	stw	r2,-20(fp)
 101d55c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101d560:	e0fffc17 	ldw	r3,-16(fp)
 101d564:	e0bffb17 	ldw	r2,-20(fp)
 101d568:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 101d56c:	e0bffb17 	ldw	r2,-20(fp)
 101d570:	10c00017 	ldw	r3,0(r2)
 101d574:	e0bffc17 	ldw	r2,-16(fp)
 101d578:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 101d57c:	e0bffb17 	ldw	r2,-20(fp)
 101d580:	10c00017 	ldw	r3,0(r2)
 101d584:	e0bffc17 	ldw	r2,-16(fp)
 101d588:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 101d58c:	e0fffb17 	ldw	r3,-20(fp)
 101d590:	e0bffc17 	ldw	r2,-16(fp)
 101d594:	18800015 	stw	r2,0(r3)

  return 0;  
 101d598:	e03fff15 	stw	zero,-4(fp)
 101d59c:	e0bfff17 	ldw	r2,-4(fp)
}
 101d5a0:	e037883a 	mov	sp,fp
 101d5a4:	dfc00117 	ldw	ra,4(sp)
 101d5a8:	df000017 	ldw	fp,0(sp)
 101d5ac:	dec00204 	addi	sp,sp,8
 101d5b0:	f800283a 	ret

0101d5b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101d5b4:	defffd04 	addi	sp,sp,-12
 101d5b8:	dfc00215 	stw	ra,8(sp)
 101d5bc:	df000115 	stw	fp,4(sp)
 101d5c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101d5c4:	008040b4 	movhi	r2,258
 101d5c8:	1084b204 	addi	r2,r2,4808
 101d5cc:	10800017 	ldw	r2,0(r2)
 101d5d0:	1005003a 	cmpeq	r2,r2,zero
 101d5d4:	1000061e 	bne	r2,zero,101d5f0 <alt_get_errno+0x3c>
 101d5d8:	008040b4 	movhi	r2,258
 101d5dc:	1084b204 	addi	r2,r2,4808
 101d5e0:	10800017 	ldw	r2,0(r2)
 101d5e4:	103ee83a 	callr	r2
 101d5e8:	e0bfff15 	stw	r2,-4(fp)
 101d5ec:	00000306 	br	101d5fc <alt_get_errno+0x48>
 101d5f0:	008040b4 	movhi	r2,258
 101d5f4:	108bb304 	addi	r2,r2,11980
 101d5f8:	e0bfff15 	stw	r2,-4(fp)
 101d5fc:	e0bfff17 	ldw	r2,-4(fp)
}
 101d600:	e037883a 	mov	sp,fp
 101d604:	dfc00117 	ldw	ra,4(sp)
 101d608:	df000017 	ldw	fp,0(sp)
 101d60c:	dec00204 	addi	sp,sp,8
 101d610:	f800283a 	ret

0101d614 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 101d614:	defffd04 	addi	sp,sp,-12
 101d618:	dfc00215 	stw	ra,8(sp)
 101d61c:	df000115 	stw	fp,4(sp)
 101d620:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 101d624:	00bfff04 	movi	r2,-4
 101d628:	00c040b4 	movhi	r3,258
 101d62c:	18fb6f04 	addi	r3,r3,-4676
 101d630:	1885883a 	add	r2,r3,r2
 101d634:	e0bfff15 	stw	r2,-4(fp)
 101d638:	00000606 	br	101d654 <_do_ctors+0x40>
        (*ctor) (); 
 101d63c:	e0bfff17 	ldw	r2,-4(fp)
 101d640:	10800017 	ldw	r2,0(r2)
 101d644:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 101d648:	e0bfff17 	ldw	r2,-4(fp)
 101d64c:	10bfff04 	addi	r2,r2,-4
 101d650:	e0bfff15 	stw	r2,-4(fp)
 101d654:	e0ffff17 	ldw	r3,-4(fp)
 101d658:	008040b4 	movhi	r2,258
 101d65c:	10bb6d04 	addi	r2,r2,-4684
 101d660:	18bff62e 	bgeu	r3,r2,101d63c <_do_ctors+0x28>
        (*ctor) (); 
}
 101d664:	e037883a 	mov	sp,fp
 101d668:	dfc00117 	ldw	ra,4(sp)
 101d66c:	df000017 	ldw	fp,0(sp)
 101d670:	dec00204 	addi	sp,sp,8
 101d674:	f800283a 	ret

0101d678 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 101d678:	defffd04 	addi	sp,sp,-12
 101d67c:	dfc00215 	stw	ra,8(sp)
 101d680:	df000115 	stw	fp,4(sp)
 101d684:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 101d688:	00bfff04 	movi	r2,-4
 101d68c:	00c040b4 	movhi	r3,258
 101d690:	18fb6f04 	addi	r3,r3,-4676
 101d694:	1885883a 	add	r2,r3,r2
 101d698:	e0bfff15 	stw	r2,-4(fp)
 101d69c:	00000606 	br	101d6b8 <_do_dtors+0x40>
        (*dtor) (); 
 101d6a0:	e0bfff17 	ldw	r2,-4(fp)
 101d6a4:	10800017 	ldw	r2,0(r2)
 101d6a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 101d6ac:	e0bfff17 	ldw	r2,-4(fp)
 101d6b0:	10bfff04 	addi	r2,r2,-4
 101d6b4:	e0bfff15 	stw	r2,-4(fp)
 101d6b8:	e0ffff17 	ldw	r3,-4(fp)
 101d6bc:	008040b4 	movhi	r2,258
 101d6c0:	10bb6f04 	addi	r2,r2,-4676
 101d6c4:	18bff62e 	bgeu	r3,r2,101d6a0 <_do_dtors+0x28>
        (*dtor) (); 
}
 101d6c8:	e037883a 	mov	sp,fp
 101d6cc:	dfc00117 	ldw	ra,4(sp)
 101d6d0:	df000017 	ldw	fp,0(sp)
 101d6d4:	dec00204 	addi	sp,sp,8
 101d6d8:	f800283a 	ret

0101d6dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 101d6dc:	defffe04 	addi	sp,sp,-8
 101d6e0:	dfc00115 	stw	ra,4(sp)
 101d6e4:	df000015 	stw	fp,0(sp)
 101d6e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 101d6ec:	0009883a 	mov	r4,zero
 101d6f0:	01480004 	movi	r5,8192
 101d6f4:	101e7300 	call	101e730 <alt_icache_flush>
#endif
}
 101d6f8:	e037883a 	mov	sp,fp
 101d6fc:	dfc00117 	ldw	ra,4(sp)
 101d700:	df000017 	ldw	fp,0(sp)
 101d704:	dec00204 	addi	sp,sp,8
 101d708:	f800283a 	ret

0101d70c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 101d70c:	defff904 	addi	sp,sp,-28
 101d710:	dfc00615 	stw	ra,24(sp)
 101d714:	df000515 	stw	fp,20(sp)
 101d718:	df000504 	addi	fp,sp,20
 101d71c:	e13ffc15 	stw	r4,-16(fp)
 101d720:	e17ffd15 	stw	r5,-12(fp)
 101d724:	e1bffe15 	stw	r6,-8(fp)
 101d728:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 101d72c:	e0800217 	ldw	r2,8(fp)
 101d730:	d8800015 	stw	r2,0(sp)
 101d734:	e13ffc17 	ldw	r4,-16(fp)
 101d738:	e17ffd17 	ldw	r5,-12(fp)
 101d73c:	e1bffe17 	ldw	r6,-8(fp)
 101d740:	e1ffff17 	ldw	r7,-4(fp)
 101d744:	101d8e00 	call	101d8e0 <alt_iic_isr_register>
}  
 101d748:	e037883a 	mov	sp,fp
 101d74c:	dfc00117 	ldw	ra,4(sp)
 101d750:	df000017 	ldw	fp,0(sp)
 101d754:	dec00204 	addi	sp,sp,8
 101d758:	f800283a 	ret

0101d75c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 101d75c:	defff904 	addi	sp,sp,-28
 101d760:	df000615 	stw	fp,24(sp)
 101d764:	df000604 	addi	fp,sp,24
 101d768:	e13ffe15 	stw	r4,-8(fp)
 101d76c:	e17fff15 	stw	r5,-4(fp)
 101d770:	e0bfff17 	ldw	r2,-4(fp)
 101d774:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d778:	0005303a 	rdctl	r2,status
 101d77c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d780:	e0fffb17 	ldw	r3,-20(fp)
 101d784:	00bfff84 	movi	r2,-2
 101d788:	1884703a 	and	r2,r3,r2
 101d78c:	1001703a 	wrctl	status,r2
  
  return context;
 101d790:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 101d794:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 101d798:	e0fffc17 	ldw	r3,-16(fp)
 101d79c:	00800044 	movi	r2,1
 101d7a0:	10c4983a 	sll	r2,r2,r3
 101d7a4:	1007883a 	mov	r3,r2
 101d7a8:	008040b4 	movhi	r2,258
 101d7ac:	108bd304 	addi	r2,r2,12108
 101d7b0:	10800017 	ldw	r2,0(r2)
 101d7b4:	1886b03a 	or	r3,r3,r2
 101d7b8:	008040b4 	movhi	r2,258
 101d7bc:	108bd304 	addi	r2,r2,12108
 101d7c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 101d7c4:	008040b4 	movhi	r2,258
 101d7c8:	108bd304 	addi	r2,r2,12108
 101d7cc:	10800017 	ldw	r2,0(r2)
 101d7d0:	100170fa 	wrctl	ienable,r2
 101d7d4:	e0bffd17 	ldw	r2,-12(fp)
 101d7d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d7dc:	e0bffa17 	ldw	r2,-24(fp)
 101d7e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 101d7e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 101d7e8:	e037883a 	mov	sp,fp
 101d7ec:	df000017 	ldw	fp,0(sp)
 101d7f0:	dec00104 	addi	sp,sp,4
 101d7f4:	f800283a 	ret

0101d7f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 101d7f8:	defff904 	addi	sp,sp,-28
 101d7fc:	df000615 	stw	fp,24(sp)
 101d800:	df000604 	addi	fp,sp,24
 101d804:	e13ffe15 	stw	r4,-8(fp)
 101d808:	e17fff15 	stw	r5,-4(fp)
 101d80c:	e0bfff17 	ldw	r2,-4(fp)
 101d810:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d814:	0005303a 	rdctl	r2,status
 101d818:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d81c:	e0fffb17 	ldw	r3,-20(fp)
 101d820:	00bfff84 	movi	r2,-2
 101d824:	1884703a 	and	r2,r3,r2
 101d828:	1001703a 	wrctl	status,r2
  
  return context;
 101d82c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 101d830:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 101d834:	e0fffc17 	ldw	r3,-16(fp)
 101d838:	00800044 	movi	r2,1
 101d83c:	10c4983a 	sll	r2,r2,r3
 101d840:	0084303a 	nor	r2,zero,r2
 101d844:	1007883a 	mov	r3,r2
 101d848:	008040b4 	movhi	r2,258
 101d84c:	108bd304 	addi	r2,r2,12108
 101d850:	10800017 	ldw	r2,0(r2)
 101d854:	1886703a 	and	r3,r3,r2
 101d858:	008040b4 	movhi	r2,258
 101d85c:	108bd304 	addi	r2,r2,12108
 101d860:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 101d864:	008040b4 	movhi	r2,258
 101d868:	108bd304 	addi	r2,r2,12108
 101d86c:	10800017 	ldw	r2,0(r2)
 101d870:	100170fa 	wrctl	ienable,r2
 101d874:	e0bffd17 	ldw	r2,-12(fp)
 101d878:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d87c:	e0bffa17 	ldw	r2,-24(fp)
 101d880:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 101d884:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 101d888:	e037883a 	mov	sp,fp
 101d88c:	df000017 	ldw	fp,0(sp)
 101d890:	dec00104 	addi	sp,sp,4
 101d894:	f800283a 	ret

0101d898 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 101d898:	defffc04 	addi	sp,sp,-16
 101d89c:	df000315 	stw	fp,12(sp)
 101d8a0:	df000304 	addi	fp,sp,12
 101d8a4:	e13ffe15 	stw	r4,-8(fp)
 101d8a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 101d8ac:	000530fa 	rdctl	r2,ienable
 101d8b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 101d8b4:	e0ffff17 	ldw	r3,-4(fp)
 101d8b8:	00800044 	movi	r2,1
 101d8bc:	10c4983a 	sll	r2,r2,r3
 101d8c0:	1007883a 	mov	r3,r2
 101d8c4:	e0bffd17 	ldw	r2,-12(fp)
 101d8c8:	1884703a 	and	r2,r3,r2
 101d8cc:	1004c03a 	cmpne	r2,r2,zero
}
 101d8d0:	e037883a 	mov	sp,fp
 101d8d4:	df000017 	ldw	fp,0(sp)
 101d8d8:	dec00104 	addi	sp,sp,4
 101d8dc:	f800283a 	ret

0101d8e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 101d8e0:	defff404 	addi	sp,sp,-48
 101d8e4:	dfc00b15 	stw	ra,44(sp)
 101d8e8:	df000a15 	stw	fp,40(sp)
 101d8ec:	df000a04 	addi	fp,sp,40
 101d8f0:	e13ffb15 	stw	r4,-20(fp)
 101d8f4:	e17ffc15 	stw	r5,-16(fp)
 101d8f8:	e1bffd15 	stw	r6,-12(fp)
 101d8fc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 101d900:	00bffa84 	movi	r2,-22
 101d904:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 101d908:	e0bffc17 	ldw	r2,-16(fp)
 101d90c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 101d910:	e0bff917 	ldw	r2,-28(fp)
 101d914:	10800808 	cmpgei	r2,r2,32
 101d918:	1000291e 	bne	r2,zero,101d9c0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d91c:	0005303a 	rdctl	r2,status
 101d920:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d924:	e0fff717 	ldw	r3,-36(fp)
 101d928:	00bfff84 	movi	r2,-2
 101d92c:	1884703a 	and	r2,r3,r2
 101d930:	1001703a 	wrctl	status,r2
  
  return context;
 101d934:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 101d938:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 101d93c:	e0bff917 	ldw	r2,-28(fp)
 101d940:	00c040f4 	movhi	r3,259
 101d944:	18ea6d04 	addi	r3,r3,-22092
 101d948:	100490fa 	slli	r2,r2,3
 101d94c:	10c7883a 	add	r3,r2,r3
 101d950:	e0bffd17 	ldw	r2,-12(fp)
 101d954:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 101d958:	e0bff917 	ldw	r2,-28(fp)
 101d95c:	00c040f4 	movhi	r3,259
 101d960:	18ea6d04 	addi	r3,r3,-22092
 101d964:	100490fa 	slli	r2,r2,3
 101d968:	10c5883a 	add	r2,r2,r3
 101d96c:	10c00104 	addi	r3,r2,4
 101d970:	e0bffe17 	ldw	r2,-8(fp)
 101d974:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 101d978:	e0bffd17 	ldw	r2,-12(fp)
 101d97c:	1005003a 	cmpeq	r2,r2,zero
 101d980:	1000051e 	bne	r2,zero,101d998 <alt_iic_isr_register+0xb8>
 101d984:	e17ff917 	ldw	r5,-28(fp)
 101d988:	e13ffb17 	ldw	r4,-20(fp)
 101d98c:	101d75c0 	call	101d75c <alt_ic_irq_enable>
 101d990:	e0bfff15 	stw	r2,-4(fp)
 101d994:	00000406 	br	101d9a8 <alt_iic_isr_register+0xc8>
 101d998:	e17ff917 	ldw	r5,-28(fp)
 101d99c:	e13ffb17 	ldw	r4,-20(fp)
 101d9a0:	101d7f80 	call	101d7f8 <alt_ic_irq_disable>
 101d9a4:	e0bfff15 	stw	r2,-4(fp)
 101d9a8:	e0bfff17 	ldw	r2,-4(fp)
 101d9ac:	e0bffa15 	stw	r2,-24(fp)
 101d9b0:	e0bff817 	ldw	r2,-32(fp)
 101d9b4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d9b8:	e0bff617 	ldw	r2,-40(fp)
 101d9bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 101d9c0:	e0bffa17 	ldw	r2,-24(fp)
}
 101d9c4:	e037883a 	mov	sp,fp
 101d9c8:	dfc00117 	ldw	ra,4(sp)
 101d9cc:	df000017 	ldw	fp,0(sp)
 101d9d0:	dec00204 	addi	sp,sp,8
 101d9d4:	f800283a 	ret

0101d9d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 101d9d8:	defff904 	addi	sp,sp,-28
 101d9dc:	dfc00615 	stw	ra,24(sp)
 101d9e0:	df000515 	stw	fp,20(sp)
 101d9e4:	df000504 	addi	fp,sp,20
 101d9e8:	e13ffc15 	stw	r4,-16(fp)
 101d9ec:	e17ffd15 	stw	r5,-12(fp)
 101d9f0:	e1bffe15 	stw	r6,-8(fp)
 101d9f4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 101d9f8:	e13ffd17 	ldw	r4,-12(fp)
 101d9fc:	e17ffe17 	ldw	r5,-8(fp)
 101da00:	e1bfff17 	ldw	r6,-4(fp)
 101da04:	101dbf00 	call	101dbf0 <open>
 101da08:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 101da0c:	e0bffb17 	ldw	r2,-20(fp)
 101da10:	1004803a 	cmplt	r2,r2,zero
 101da14:	10001c1e 	bne	r2,zero,101da88 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 101da18:	e0bffb17 	ldw	r2,-20(fp)
 101da1c:	00c040b4 	movhi	r3,258
 101da20:	18c01304 	addi	r3,r3,76
 101da24:	10800324 	muli	r2,r2,12
 101da28:	10c5883a 	add	r2,r2,r3
 101da2c:	10c00017 	ldw	r3,0(r2)
 101da30:	e0bffc17 	ldw	r2,-16(fp)
 101da34:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 101da38:	e0bffb17 	ldw	r2,-20(fp)
 101da3c:	00c040b4 	movhi	r3,258
 101da40:	18c01304 	addi	r3,r3,76
 101da44:	10800324 	muli	r2,r2,12
 101da48:	10c5883a 	add	r2,r2,r3
 101da4c:	10800104 	addi	r2,r2,4
 101da50:	10c00017 	ldw	r3,0(r2)
 101da54:	e0bffc17 	ldw	r2,-16(fp)
 101da58:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 101da5c:	e0bffb17 	ldw	r2,-20(fp)
 101da60:	00c040b4 	movhi	r3,258
 101da64:	18c01304 	addi	r3,r3,76
 101da68:	10800324 	muli	r2,r2,12
 101da6c:	10c5883a 	add	r2,r2,r3
 101da70:	10800204 	addi	r2,r2,8
 101da74:	10c00017 	ldw	r3,0(r2)
 101da78:	e0bffc17 	ldw	r2,-16(fp)
 101da7c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 101da80:	e13ffb17 	ldw	r4,-20(fp)
 101da84:	1013bf00 	call	1013bf0 <alt_release_fd>
  }
} 
 101da88:	e037883a 	mov	sp,fp
 101da8c:	dfc00117 	ldw	ra,4(sp)
 101da90:	df000017 	ldw	fp,0(sp)
 101da94:	dec00204 	addi	sp,sp,8
 101da98:	f800283a 	ret

0101da9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 101da9c:	defffb04 	addi	sp,sp,-20
 101daa0:	dfc00415 	stw	ra,16(sp)
 101daa4:	df000315 	stw	fp,12(sp)
 101daa8:	df000304 	addi	fp,sp,12
 101daac:	e13ffd15 	stw	r4,-12(fp)
 101dab0:	e17ffe15 	stw	r5,-8(fp)
 101dab4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 101dab8:	010040b4 	movhi	r4,258
 101dabc:	21001604 	addi	r4,r4,88
 101dac0:	e17ffd17 	ldw	r5,-12(fp)
 101dac4:	01800044 	movi	r6,1
 101dac8:	01c07fc4 	movi	r7,511
 101dacc:	101d9d80 	call	101d9d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 101dad0:	010040b4 	movhi	r4,258
 101dad4:	21001304 	addi	r4,r4,76
 101dad8:	e17ffe17 	ldw	r5,-8(fp)
 101dadc:	000d883a 	mov	r6,zero
 101dae0:	01c07fc4 	movi	r7,511
 101dae4:	101d9d80 	call	101d9d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 101dae8:	010040b4 	movhi	r4,258
 101daec:	21001904 	addi	r4,r4,100
 101daf0:	e17fff17 	ldw	r5,-4(fp)
 101daf4:	01800044 	movi	r6,1
 101daf8:	01c07fc4 	movi	r7,511
 101dafc:	101d9d80 	call	101d9d8 <alt_open_fd>
}  
 101db00:	e037883a 	mov	sp,fp
 101db04:	dfc00117 	ldw	ra,4(sp)
 101db08:	df000017 	ldw	fp,0(sp)
 101db0c:	dec00204 	addi	sp,sp,8
 101db10:	f800283a 	ret

0101db14 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 101db14:	defffc04 	addi	sp,sp,-16
 101db18:	df000315 	stw	fp,12(sp)
 101db1c:	df000304 	addi	fp,sp,12
 101db20:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 101db24:	e0bffe17 	ldw	r2,-8(fp)
 101db28:	10800217 	ldw	r2,8(r2)
 101db2c:	10d00034 	orhi	r3,r2,16384
 101db30:	e0bffe17 	ldw	r2,-8(fp)
 101db34:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101db38:	e03ffd15 	stw	zero,-12(fp)
 101db3c:	00002006 	br	101dbc0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 101db40:	e0bffd17 	ldw	r2,-12(fp)
 101db44:	00c040b4 	movhi	r3,258
 101db48:	18c01304 	addi	r3,r3,76
 101db4c:	10800324 	muli	r2,r2,12
 101db50:	10c5883a 	add	r2,r2,r3
 101db54:	10c00017 	ldw	r3,0(r2)
 101db58:	e0bffe17 	ldw	r2,-8(fp)
 101db5c:	10800017 	ldw	r2,0(r2)
 101db60:	1880141e 	bne	r3,r2,101dbb4 <alt_file_locked+0xa0>
 101db64:	e0bffd17 	ldw	r2,-12(fp)
 101db68:	00c040b4 	movhi	r3,258
 101db6c:	18c01304 	addi	r3,r3,76
 101db70:	10800324 	muli	r2,r2,12
 101db74:	10c5883a 	add	r2,r2,r3
 101db78:	10800204 	addi	r2,r2,8
 101db7c:	10800017 	ldw	r2,0(r2)
 101db80:	1004403a 	cmpge	r2,r2,zero
 101db84:	10000b1e 	bne	r2,zero,101dbb4 <alt_file_locked+0xa0>
 101db88:	e0bffd17 	ldw	r2,-12(fp)
 101db8c:	10800324 	muli	r2,r2,12
 101db90:	1007883a 	mov	r3,r2
 101db94:	008040b4 	movhi	r2,258
 101db98:	10801304 	addi	r2,r2,76
 101db9c:	1887883a 	add	r3,r3,r2
 101dba0:	e0bffe17 	ldw	r2,-8(fp)
 101dba4:	18800326 	beq	r3,r2,101dbb4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 101dba8:	00bffcc4 	movi	r2,-13
 101dbac:	e0bfff15 	stw	r2,-4(fp)
 101dbb0:	00000a06 	br	101dbdc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101dbb4:	e0bffd17 	ldw	r2,-12(fp)
 101dbb8:	10800044 	addi	r2,r2,1
 101dbbc:	e0bffd15 	stw	r2,-12(fp)
 101dbc0:	008040b4 	movhi	r2,258
 101dbc4:	1084b104 	addi	r2,r2,4804
 101dbc8:	10800017 	ldw	r2,0(r2)
 101dbcc:	1007883a 	mov	r3,r2
 101dbd0:	e0bffd17 	ldw	r2,-12(fp)
 101dbd4:	18bfda2e 	bgeu	r3,r2,101db40 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 101dbd8:	e03fff15 	stw	zero,-4(fp)
 101dbdc:	e0bfff17 	ldw	r2,-4(fp)
}
 101dbe0:	e037883a 	mov	sp,fp
 101dbe4:	df000017 	ldw	fp,0(sp)
 101dbe8:	dec00104 	addi	sp,sp,4
 101dbec:	f800283a 	ret

0101dbf0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 101dbf0:	defff404 	addi	sp,sp,-48
 101dbf4:	dfc00b15 	stw	ra,44(sp)
 101dbf8:	df000a15 	stw	fp,40(sp)
 101dbfc:	df000a04 	addi	fp,sp,40
 101dc00:	e13ffb15 	stw	r4,-20(fp)
 101dc04:	e17ffc15 	stw	r5,-16(fp)
 101dc08:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 101dc0c:	00bfffc4 	movi	r2,-1
 101dc10:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 101dc14:	00bffb44 	movi	r2,-19
 101dc18:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 101dc1c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 101dc20:	e13ffb17 	ldw	r4,-20(fp)
 101dc24:	014040b4 	movhi	r5,258
 101dc28:	2944af04 	addi	r5,r5,4796
 101dc2c:	101e4880 	call	101e488 <alt_find_dev>
 101dc30:	e0bffa15 	stw	r2,-24(fp)
 101dc34:	e0bffa17 	ldw	r2,-24(fp)
 101dc38:	1004c03a 	cmpne	r2,r2,zero
 101dc3c:	1000051e 	bne	r2,zero,101dc54 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 101dc40:	e13ffb17 	ldw	r4,-20(fp)
 101dc44:	101e51c0 	call	101e51c <alt_find_file>
 101dc48:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 101dc4c:	00800044 	movi	r2,1
 101dc50:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 101dc54:	e0bffa17 	ldw	r2,-24(fp)
 101dc58:	1005003a 	cmpeq	r2,r2,zero
 101dc5c:	1000301e 	bne	r2,zero,101dd20 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 101dc60:	e13ffa17 	ldw	r4,-24(fp)
 101dc64:	101e63c0 	call	101e63c <alt_get_fd>
 101dc68:	e0bff815 	stw	r2,-32(fp)
 101dc6c:	e0bff817 	ldw	r2,-32(fp)
 101dc70:	1004403a 	cmpge	r2,r2,zero
 101dc74:	1000031e 	bne	r2,zero,101dc84 <open+0x94>
    {
      status = index;
 101dc78:	e0bff817 	ldw	r2,-32(fp)
 101dc7c:	e0bff715 	stw	r2,-36(fp)
 101dc80:	00002906 	br	101dd28 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 101dc84:	e0bff817 	ldw	r2,-32(fp)
 101dc88:	10800324 	muli	r2,r2,12
 101dc8c:	1007883a 	mov	r3,r2
 101dc90:	008040b4 	movhi	r2,258
 101dc94:	10801304 	addi	r2,r2,76
 101dc98:	1885883a 	add	r2,r3,r2
 101dc9c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 101dca0:	e0fffc17 	ldw	r3,-16(fp)
 101dca4:	00900034 	movhi	r2,16384
 101dca8:	10bfffc4 	addi	r2,r2,-1
 101dcac:	1886703a 	and	r3,r3,r2
 101dcb0:	e0bff917 	ldw	r2,-28(fp)
 101dcb4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 101dcb8:	e0bff617 	ldw	r2,-40(fp)
 101dcbc:	1004c03a 	cmpne	r2,r2,zero
 101dcc0:	1000061e 	bne	r2,zero,101dcdc <open+0xec>
 101dcc4:	e13ff917 	ldw	r4,-28(fp)
 101dcc8:	101db140 	call	101db14 <alt_file_locked>
 101dccc:	e0bff715 	stw	r2,-36(fp)
 101dcd0:	e0bff717 	ldw	r2,-36(fp)
 101dcd4:	1004803a 	cmplt	r2,r2,zero
 101dcd8:	1000131e 	bne	r2,zero,101dd28 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 101dcdc:	e0bffa17 	ldw	r2,-24(fp)
 101dce0:	10800317 	ldw	r2,12(r2)
 101dce4:	1005003a 	cmpeq	r2,r2,zero
 101dce8:	1000091e 	bne	r2,zero,101dd10 <open+0x120>
 101dcec:	e0bffa17 	ldw	r2,-24(fp)
 101dcf0:	10800317 	ldw	r2,12(r2)
 101dcf4:	e13ff917 	ldw	r4,-28(fp)
 101dcf8:	e17ffb17 	ldw	r5,-20(fp)
 101dcfc:	e1bffc17 	ldw	r6,-16(fp)
 101dd00:	e1fffd17 	ldw	r7,-12(fp)
 101dd04:	103ee83a 	callr	r2
 101dd08:	e0bfff15 	stw	r2,-4(fp)
 101dd0c:	00000106 	br	101dd14 <open+0x124>
 101dd10:	e03fff15 	stw	zero,-4(fp)
 101dd14:	e0bfff17 	ldw	r2,-4(fp)
 101dd18:	e0bff715 	stw	r2,-36(fp)
 101dd1c:	00000206 	br	101dd28 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 101dd20:	00bffb44 	movi	r2,-19
 101dd24:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 101dd28:	e0bff717 	ldw	r2,-36(fp)
 101dd2c:	1004403a 	cmpge	r2,r2,zero
 101dd30:	1000091e 	bne	r2,zero,101dd58 <open+0x168>
  {
    alt_release_fd (index);  
 101dd34:	e13ff817 	ldw	r4,-32(fp)
 101dd38:	1013bf00 	call	1013bf0 <alt_release_fd>
    ALT_ERRNO = -status;
 101dd3c:	101dd780 	call	101dd78 <alt_get_errno>
 101dd40:	e0fff717 	ldw	r3,-36(fp)
 101dd44:	00c7c83a 	sub	r3,zero,r3
 101dd48:	10c00015 	stw	r3,0(r2)
    return -1;
 101dd4c:	00bfffc4 	movi	r2,-1
 101dd50:	e0bffe15 	stw	r2,-8(fp)
 101dd54:	00000206 	br	101dd60 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 101dd58:	e0bff817 	ldw	r2,-32(fp)
 101dd5c:	e0bffe15 	stw	r2,-8(fp)
 101dd60:	e0bffe17 	ldw	r2,-8(fp)
}
 101dd64:	e037883a 	mov	sp,fp
 101dd68:	dfc00117 	ldw	ra,4(sp)
 101dd6c:	df000017 	ldw	fp,0(sp)
 101dd70:	dec00204 	addi	sp,sp,8
 101dd74:	f800283a 	ret

0101dd78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101dd78:	defffd04 	addi	sp,sp,-12
 101dd7c:	dfc00215 	stw	ra,8(sp)
 101dd80:	df000115 	stw	fp,4(sp)
 101dd84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101dd88:	008040b4 	movhi	r2,258
 101dd8c:	1084b204 	addi	r2,r2,4808
 101dd90:	10800017 	ldw	r2,0(r2)
 101dd94:	1005003a 	cmpeq	r2,r2,zero
 101dd98:	1000061e 	bne	r2,zero,101ddb4 <alt_get_errno+0x3c>
 101dd9c:	008040b4 	movhi	r2,258
 101dda0:	1084b204 	addi	r2,r2,4808
 101dda4:	10800017 	ldw	r2,0(r2)
 101dda8:	103ee83a 	callr	r2
 101ddac:	e0bfff15 	stw	r2,-4(fp)
 101ddb0:	00000306 	br	101ddc0 <alt_get_errno+0x48>
 101ddb4:	008040b4 	movhi	r2,258
 101ddb8:	108bb304 	addi	r2,r2,11980
 101ddbc:	e0bfff15 	stw	r2,-4(fp)
 101ddc0:	e0bfff17 	ldw	r2,-4(fp)
}
 101ddc4:	e037883a 	mov	sp,fp
 101ddc8:	dfc00117 	ldw	ra,4(sp)
 101ddcc:	df000017 	ldw	fp,0(sp)
 101ddd0:	dec00204 	addi	sp,sp,8
 101ddd4:	f800283a 	ret

0101ddd8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 101ddd8:	defffa04 	addi	sp,sp,-24
 101dddc:	df000515 	stw	fp,20(sp)
 101dde0:	df000504 	addi	fp,sp,20
 101dde4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101dde8:	0005303a 	rdctl	r2,status
 101ddec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ddf0:	e0fffd17 	ldw	r3,-12(fp)
 101ddf4:	00bfff84 	movi	r2,-2
 101ddf8:	1884703a 	and	r2,r3,r2
 101ddfc:	1001703a 	wrctl	status,r2
  
  return context;
 101de00:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 101de04:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 101de08:	e0bfff17 	ldw	r2,-4(fp)
 101de0c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 101de10:	e0bffc17 	ldw	r2,-16(fp)
 101de14:	10c00017 	ldw	r3,0(r2)
 101de18:	e0bffc17 	ldw	r2,-16(fp)
 101de1c:	10800117 	ldw	r2,4(r2)
 101de20:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 101de24:	e0bffc17 	ldw	r2,-16(fp)
 101de28:	10c00117 	ldw	r3,4(r2)
 101de2c:	e0bffc17 	ldw	r2,-16(fp)
 101de30:	10800017 	ldw	r2,0(r2)
 101de34:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 101de38:	e0fffc17 	ldw	r3,-16(fp)
 101de3c:	e0bffc17 	ldw	r2,-16(fp)
 101de40:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 101de44:	e0fffc17 	ldw	r3,-16(fp)
 101de48:	e0bffc17 	ldw	r2,-16(fp)
 101de4c:	18800015 	stw	r2,0(r3)
 101de50:	e0bffe17 	ldw	r2,-8(fp)
 101de54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101de58:	e0bffb17 	ldw	r2,-20(fp)
 101de5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 101de60:	e037883a 	mov	sp,fp
 101de64:	df000017 	ldw	fp,0(sp)
 101de68:	dec00104 	addi	sp,sp,4
 101de6c:	f800283a 	ret

0101de70 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 101de70:	defffb04 	addi	sp,sp,-20
 101de74:	dfc00415 	stw	ra,16(sp)
 101de78:	df000315 	stw	fp,12(sp)
 101de7c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 101de80:	d0a03b17 	ldw	r2,-32532(gp)
 101de84:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 101de88:	d0a73c17 	ldw	r2,-25360(gp)
 101de8c:	10800044 	addi	r2,r2,1
 101de90:	d0a73c15 	stw	r2,-25360(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 101de94:	00003106 	br	101df5c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 101de98:	e0bffe17 	ldw	r2,-8(fp)
 101de9c:	10800017 	ldw	r2,0(r2)
 101dea0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 101dea4:	e0bffe17 	ldw	r2,-8(fp)
 101dea8:	10800403 	ldbu	r2,16(r2)
 101deac:	10803fcc 	andi	r2,r2,255
 101deb0:	1005003a 	cmpeq	r2,r2,zero
 101deb4:	1000051e 	bne	r2,zero,101decc <alt_tick+0x5c>
 101deb8:	d0a73c17 	ldw	r2,-25360(gp)
 101debc:	1004c03a 	cmpne	r2,r2,zero
 101dec0:	1000021e 	bne	r2,zero,101decc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 101dec4:	e0bffe17 	ldw	r2,-8(fp)
 101dec8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 101decc:	e0bffe17 	ldw	r2,-8(fp)
 101ded0:	10c00217 	ldw	r3,8(r2)
 101ded4:	d0a73c17 	ldw	r2,-25360(gp)
 101ded8:	10c01e36 	bltu	r2,r3,101df54 <alt_tick+0xe4>
 101dedc:	e0bffe17 	ldw	r2,-8(fp)
 101dee0:	10800403 	ldbu	r2,16(r2)
 101dee4:	10803fcc 	andi	r2,r2,255
 101dee8:	1004c03a 	cmpne	r2,r2,zero
 101deec:	1000191e 	bne	r2,zero,101df54 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 101def0:	e0bffe17 	ldw	r2,-8(fp)
 101def4:	10c00317 	ldw	r3,12(r2)
 101def8:	e0bffe17 	ldw	r2,-8(fp)
 101defc:	11000517 	ldw	r4,20(r2)
 101df00:	183ee83a 	callr	r3
 101df04:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 101df08:	e0bffd17 	ldw	r2,-12(fp)
 101df0c:	1004c03a 	cmpne	r2,r2,zero
 101df10:	1000031e 	bne	r2,zero,101df20 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 101df14:	e13ffe17 	ldw	r4,-8(fp)
 101df18:	101ddd80 	call	101ddd8 <alt_alarm_stop>
 101df1c:	00000d06 	br	101df54 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 101df20:	e0bffe17 	ldw	r2,-8(fp)
 101df24:	10c00217 	ldw	r3,8(r2)
 101df28:	e0bffd17 	ldw	r2,-12(fp)
 101df2c:	1887883a 	add	r3,r3,r2
 101df30:	e0bffe17 	ldw	r2,-8(fp)
 101df34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 101df38:	e0bffe17 	ldw	r2,-8(fp)
 101df3c:	10c00217 	ldw	r3,8(r2)
 101df40:	d0a73c17 	ldw	r2,-25360(gp)
 101df44:	1880032e 	bgeu	r3,r2,101df54 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 101df48:	e0fffe17 	ldw	r3,-8(fp)
 101df4c:	00800044 	movi	r2,1
 101df50:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 101df54:	e0bfff17 	ldw	r2,-4(fp)
 101df58:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 101df5c:	d0e03b04 	addi	r3,gp,-32532
 101df60:	e0bffe17 	ldw	r2,-8(fp)
 101df64:	10ffcc1e 	bne	r2,r3,101de98 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 101df68:	1014ef00 	call	1014ef0 <OSTimeTick>
}
 101df6c:	e037883a 	mov	sp,fp
 101df70:	dfc00117 	ldw	ra,4(sp)
 101df74:	df000017 	ldw	fp,0(sp)
 101df78:	dec00204 	addi	sp,sp,8
 101df7c:	f800283a 	ret

0101df80 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 101df80:	deffff04 	addi	sp,sp,-4
 101df84:	df000015 	stw	fp,0(sp)
 101df88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 101df8c:	000170fa 	wrctl	ienable,zero
}
 101df90:	e037883a 	mov	sp,fp
 101df94:	df000017 	ldw	fp,0(sp)
 101df98:	dec00104 	addi	sp,sp,4
 101df9c:	f800283a 	ret

0101dfa0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 101dfa0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 101dfa4:	d0e01017 	ldw	r3,-32704(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 101dfa8:	d1273517 	ldw	r4,-25388(gp)

      stw ra,  0(sp)
 101dfac:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 101dfb0:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 101dfb4:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 101dfb8:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 101dfbc:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 101dfc0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 101dfc4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 101dfc8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 101dfcc:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 101dfd0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 101dfd4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 101dfd8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 101dfdc:	101e3c00 	call	101e3c0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 101dfe0:	d1273017 	ldw	r4,-25408(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 101dfe4:	d1672807 	ldb	r5,-25440(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 101dfe8:	d1273515 	stw	r4,-25388(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 101dfec:	d1672845 	stb	r5,-25439(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 101dff0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 101dff4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 101dff8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 101dffc:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 101e000:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 101e004:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 101e008:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 101e00c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 101e010:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 101e014:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 101e018:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 101e01c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 101e020:	d0e01015 	stw	r3,-32704(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 101e024:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 101e028:	f800283a 	ret

0101e02c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 101e02c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 101e030:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 101e034:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 101e038:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 101e03c:	101e3c00 	call	101e3c0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 101e040:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 101e044:	d4a72645 	stb	r18,-25447(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 101e048:	003fe506 	br	101dfe0 <OSCtxSw+0x40>

0101e04c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 101e04c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 101e050:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 101e054:	10800054 	ori	r2,r2,1
      wrctl status, r2
 101e058:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 101e05c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 101e060:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 101e064:	dec00204 	addi	sp,sp,8

      callr r2
 101e068:	103ee83a 	callr	r2

      nop
 101e06c:	0001883a 	nop

0101e070 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 101e070:	defff704 	addi	sp,sp,-36
 101e074:	dfc00815 	stw	ra,32(sp)
 101e078:	df000715 	stw	fp,28(sp)
 101e07c:	df000704 	addi	fp,sp,28
 101e080:	e13ffc15 	stw	r4,-16(fp)
 101e084:	e17ffd15 	stw	r5,-12(fp)
 101e088:	e1bffe15 	stw	r6,-8(fp)
 101e08c:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 101e090:	e0bffe17 	ldw	r2,-8(fp)
 101e094:	1007883a 	mov	r3,r2
 101e098:	00bfff04 	movi	r2,-4
 101e09c:	1884703a 	and	r2,r3,r2
 101e0a0:	10bf0004 	addi	r2,r2,-1024
 101e0a4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 101e0a8:	e0bff917 	ldw	r2,-28(fp)
 101e0ac:	10000015 	stw	zero,0(r2)
 101e0b0:	e0bff917 	ldw	r2,-28(fp)
 101e0b4:	10c0bb04 	addi	r3,r2,748
 101e0b8:	e0bff917 	ldw	r2,-28(fp)
 101e0bc:	10c00115 	stw	r3,4(r2)
 101e0c0:	e0bff917 	ldw	r2,-28(fp)
 101e0c4:	1080bb04 	addi	r2,r2,748
 101e0c8:	10c01704 	addi	r3,r2,92
 101e0cc:	e0bff917 	ldw	r2,-28(fp)
 101e0d0:	10c00215 	stw	r3,8(r2)
 101e0d4:	e0bff917 	ldw	r2,-28(fp)
 101e0d8:	1080bb04 	addi	r2,r2,748
 101e0dc:	10c02e04 	addi	r3,r2,184
 101e0e0:	e0bff917 	ldw	r2,-28(fp)
 101e0e4:	10c00315 	stw	r3,12(r2)
 101e0e8:	e0bff917 	ldw	r2,-28(fp)
 101e0ec:	10000415 	stw	zero,16(r2)
 101e0f0:	e0bff917 	ldw	r2,-28(fp)
 101e0f4:	10800504 	addi	r2,r2,20
 101e0f8:	1009883a 	mov	r4,r2
 101e0fc:	01800644 	movi	r6,25
 101e100:	000b883a 	mov	r5,zero
 101e104:	100a1280 	call	100a128 <memset>
 101e108:	e0bff917 	ldw	r2,-28(fp)
 101e10c:	10000c15 	stw	zero,48(r2)
 101e110:	e0fff917 	ldw	r3,-28(fp)
 101e114:	008040b4 	movhi	r2,258
 101e118:	10be0304 	addi	r2,r2,-2036
 101e11c:	18800d15 	stw	r2,52(r3)
 101e120:	e0bff917 	ldw	r2,-28(fp)
 101e124:	10000e15 	stw	zero,56(r2)
 101e128:	e0bff917 	ldw	r2,-28(fp)
 101e12c:	10000f15 	stw	zero,60(r2)
 101e130:	e0bff917 	ldw	r2,-28(fp)
 101e134:	10001015 	stw	zero,64(r2)
 101e138:	e0bff917 	ldw	r2,-28(fp)
 101e13c:	10001115 	stw	zero,68(r2)
 101e140:	e0bff917 	ldw	r2,-28(fp)
 101e144:	10001215 	stw	zero,72(r2)
 101e148:	e0bff917 	ldw	r2,-28(fp)
 101e14c:	10001315 	stw	zero,76(r2)
 101e150:	e0bff917 	ldw	r2,-28(fp)
 101e154:	10001415 	stw	zero,80(r2)
 101e158:	e0bff917 	ldw	r2,-28(fp)
 101e15c:	10001515 	stw	zero,84(r2)
 101e160:	e0bff917 	ldw	r2,-28(fp)
 101e164:	10001615 	stw	zero,88(r2)
 101e168:	e0bff917 	ldw	r2,-28(fp)
 101e16c:	10001715 	stw	zero,92(r2)
 101e170:	e0bff917 	ldw	r2,-28(fp)
 101e174:	10001805 	stb	zero,96(r2)
 101e178:	e0bff917 	ldw	r2,-28(fp)
 101e17c:	10801f04 	addi	r2,r2,124
 101e180:	10000015 	stw	zero,0(r2)
 101e184:	10000115 	stw	zero,4(r2)
 101e188:	10000215 	stw	zero,8(r2)
 101e18c:	10000315 	stw	zero,12(r2)
 101e190:	10000415 	stw	zero,16(r2)
 101e194:	10000515 	stw	zero,20(r2)
 101e198:	10000615 	stw	zero,24(r2)
 101e19c:	10000715 	stw	zero,28(r2)
 101e1a0:	10000815 	stw	zero,32(r2)
 101e1a4:	e0bff917 	ldw	r2,-28(fp)
 101e1a8:	10002815 	stw	zero,160(r2)
 101e1ac:	e0fff917 	ldw	r3,-28(fp)
 101e1b0:	00800044 	movi	r2,1
 101e1b4:	18802915 	stw	r2,164(r3)
 101e1b8:	18002a15 	stw	zero,168(r3)
 101e1bc:	e0fff917 	ldw	r3,-28(fp)
 101e1c0:	008cc384 	movi	r2,13070
 101e1c4:	18802b0d 	sth	r2,172(r3)
 101e1c8:	e0fff917 	ldw	r3,-28(fp)
 101e1cc:	00aaf344 	movi	r2,-21555
 101e1d0:	18802b8d 	sth	r2,174(r3)
 101e1d4:	e0fff917 	ldw	r3,-28(fp)
 101e1d8:	00848d04 	movi	r2,4660
 101e1dc:	18802c0d 	sth	r2,176(r3)
 101e1e0:	e0fff917 	ldw	r3,-28(fp)
 101e1e4:	00b99b44 	movi	r2,-6547
 101e1e8:	18802c8d 	sth	r2,178(r3)
 101e1ec:	e0fff917 	ldw	r3,-28(fp)
 101e1f0:	00b7bb04 	movi	r2,-8468
 101e1f4:	18802d0d 	sth	r2,180(r3)
 101e1f8:	e0fff917 	ldw	r3,-28(fp)
 101e1fc:	00800144 	movi	r2,5
 101e200:	18802d8d 	sth	r2,182(r3)
 101e204:	e0fff917 	ldw	r3,-28(fp)
 101e208:	008002c4 	movi	r2,11
 101e20c:	18802e0d 	sth	r2,184(r3)
 101e210:	e0bff917 	ldw	r2,-28(fp)
 101e214:	10002f15 	stw	zero,188(r2)
 101e218:	e0bff917 	ldw	r2,-28(fp)
 101e21c:	10003015 	stw	zero,192(r2)
 101e220:	e0bff917 	ldw	r2,-28(fp)
 101e224:	10003115 	stw	zero,196(r2)
 101e228:	e0bff917 	ldw	r2,-28(fp)
 101e22c:	10003215 	stw	zero,200(r2)
 101e230:	e0bff917 	ldw	r2,-28(fp)
 101e234:	10003315 	stw	zero,204(r2)
 101e238:	e0bff917 	ldw	r2,-28(fp)
 101e23c:	10003415 	stw	zero,208(r2)
 101e240:	e0bff917 	ldw	r2,-28(fp)
 101e244:	10003e15 	stw	zero,248(r2)
 101e248:	e0bff917 	ldw	r2,-28(fp)
 101e24c:	10003f15 	stw	zero,252(r2)
 101e250:	e0bff917 	ldw	r2,-28(fp)
 101e254:	10004015 	stw	zero,256(r2)
 101e258:	e0bff917 	ldw	r2,-28(fp)
 101e25c:	10004115 	stw	zero,260(r2)
 101e260:	e0bff917 	ldw	r2,-28(fp)
 101e264:	10004215 	stw	zero,264(r2)
 101e268:	e0bff917 	ldw	r2,-28(fp)
 101e26c:	10004315 	stw	zero,268(r2)
 101e270:	e0bff917 	ldw	r2,-28(fp)
 101e274:	10004415 	stw	zero,272(r2)
 101e278:	e0bff917 	ldw	r2,-28(fp)
 101e27c:	10004515 	stw	zero,276(r2)
 101e280:	e0bff917 	ldw	r2,-28(fp)
 101e284:	10004615 	stw	zero,280(r2)
 101e288:	e0bff917 	ldw	r2,-28(fp)
 101e28c:	10004715 	stw	zero,284(r2)
 101e290:	e0bff917 	ldw	r2,-28(fp)
 101e294:	10003505 	stb	zero,212(r2)
 101e298:	e0bff917 	ldw	r2,-28(fp)
 101e29c:	10003705 	stb	zero,220(r2)
 101e2a0:	e0bff917 	ldw	r2,-28(fp)
 101e2a4:	10003d15 	stw	zero,244(r2)
 101e2a8:	e0bff917 	ldw	r2,-28(fp)
 101e2ac:	10005215 	stw	zero,328(r2)
 101e2b0:	e0bff917 	ldw	r2,-28(fp)
 101e2b4:	10005315 	stw	zero,332(r2)
 101e2b8:	e0bff917 	ldw	r2,-28(fp)
 101e2bc:	10005415 	stw	zero,336(r2)
 101e2c0:	e0bff917 	ldw	r2,-28(fp)
 101e2c4:	10005515 	stw	zero,340(r2)
 101e2c8:	e0bff917 	ldw	r2,-28(fp)
 101e2cc:	1000b515 	stw	zero,724(r2)
 101e2d0:	e0bff917 	ldw	r2,-28(fp)
 101e2d4:	10007515 	stw	zero,468(r2)
 101e2d8:	e0bff917 	ldw	r2,-28(fp)
 101e2dc:	1000b715 	stw	zero,732(r2)
 101e2e0:	e0bff917 	ldw	r2,-28(fp)
 101e2e4:	1000b815 	stw	zero,736(r2)
 101e2e8:	e0bff917 	ldw	r2,-28(fp)
 101e2ec:	1000b915 	stw	zero,740(r2)
 101e2f0:	e0bff917 	ldw	r2,-28(fp)
 101e2f4:	1000ba15 	stw	zero,744(r2)
 101e2f8:	e0bff917 	ldw	r2,-28(fp)
 101e2fc:	1080bb04 	addi	r2,r2,748
 101e300:	1009883a 	mov	r4,r2
 101e304:	01804504 	movi	r6,276
 101e308:	000b883a 	mov	r5,zero
 101e30c:	100a1280 	call	100a128 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 101e310:	e0bff917 	ldw	r2,-28(fp)
 101e314:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 101e318:	e0bffb17 	ldw	r2,-20(fp)
 101e31c:	10bff304 	addi	r2,r2,-52
 101e320:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 101e324:	e0bffa17 	ldw	r2,-24(fp)
 101e328:	10c00c04 	addi	r3,r2,48
 101e32c:	e0bffc17 	ldw	r2,-16(fp)
 101e330:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 101e334:	e0bffa17 	ldw	r2,-24(fp)
 101e338:	10c00b04 	addi	r3,r2,44
 101e33c:	e0bffd17 	ldw	r2,-12(fp)
 101e340:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 101e344:	e0bffa17 	ldw	r2,-24(fp)
 101e348:	10c00a04 	addi	r3,r2,40
 101e34c:	e0bff917 	ldw	r2,-28(fp)
 101e350:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 101e354:	008040b4 	movhi	r2,258
 101e358:	10b81304 	addi	r2,r2,-8116
 101e35c:	10c00104 	addi	r3,r2,4
 101e360:	e0bffa17 	ldw	r2,-24(fp)
 101e364:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 101e368:	e0bffa17 	ldw	r2,-24(fp)
}
 101e36c:	e037883a 	mov	sp,fp
 101e370:	dfc00117 	ldw	ra,4(sp)
 101e374:	df000017 	ldw	fp,0(sp)
 101e378:	dec00204 	addi	sp,sp,8
 101e37c:	f800283a 	ret

0101e380 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 101e380:	defffe04 	addi	sp,sp,-8
 101e384:	df000115 	stw	fp,4(sp)
 101e388:	df000104 	addi	fp,sp,4
 101e38c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 101e390:	e037883a 	mov	sp,fp
 101e394:	df000017 	ldw	fp,0(sp)
 101e398:	dec00104 	addi	sp,sp,4
 101e39c:	f800283a 	ret

0101e3a0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 101e3a0:	defffe04 	addi	sp,sp,-8
 101e3a4:	df000115 	stw	fp,4(sp)
 101e3a8:	df000104 	addi	fp,sp,4
 101e3ac:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 101e3b0:	e037883a 	mov	sp,fp
 101e3b4:	df000017 	ldw	fp,0(sp)
 101e3b8:	dec00104 	addi	sp,sp,4
 101e3bc:	f800283a 	ret

0101e3c0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 101e3c0:	deffff04 	addi	sp,sp,-4
 101e3c4:	df000015 	stw	fp,0(sp)
 101e3c8:	d839883a 	mov	fp,sp
}
 101e3cc:	e037883a 	mov	sp,fp
 101e3d0:	df000017 	ldw	fp,0(sp)
 101e3d4:	dec00104 	addi	sp,sp,4
 101e3d8:	f800283a 	ret

0101e3dc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 101e3dc:	deffff04 	addi	sp,sp,-4
 101e3e0:	df000015 	stw	fp,0(sp)
 101e3e4:	d839883a 	mov	fp,sp
}
 101e3e8:	e037883a 	mov	sp,fp
 101e3ec:	df000017 	ldw	fp,0(sp)
 101e3f0:	dec00104 	addi	sp,sp,4
 101e3f4:	f800283a 	ret

0101e3f8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 101e3f8:	deffff04 	addi	sp,sp,-4
 101e3fc:	df000015 	stw	fp,0(sp)
 101e400:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 101e404:	e037883a 	mov	sp,fp
 101e408:	df000017 	ldw	fp,0(sp)
 101e40c:	dec00104 	addi	sp,sp,4
 101e410:	f800283a 	ret

0101e414 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 101e414:	deffff04 	addi	sp,sp,-4
 101e418:	df000015 	stw	fp,0(sp)
 101e41c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 101e420:	e037883a 	mov	sp,fp
 101e424:	df000017 	ldw	fp,0(sp)
 101e428:	dec00104 	addi	sp,sp,4
 101e42c:	f800283a 	ret

0101e430 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 101e430:	deffff04 	addi	sp,sp,-4
 101e434:	df000015 	stw	fp,0(sp)
 101e438:	d839883a 	mov	fp,sp
}
 101e43c:	e037883a 	mov	sp,fp
 101e440:	df000017 	ldw	fp,0(sp)
 101e444:	dec00104 	addi	sp,sp,4
 101e448:	f800283a 	ret

0101e44c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 101e44c:	deffff04 	addi	sp,sp,-4
 101e450:	df000015 	stw	fp,0(sp)
 101e454:	d839883a 	mov	fp,sp
}
 101e458:	e037883a 	mov	sp,fp
 101e45c:	df000017 	ldw	fp,0(sp)
 101e460:	dec00104 	addi	sp,sp,4
 101e464:	f800283a 	ret

0101e468 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 101e468:	defffe04 	addi	sp,sp,-8
 101e46c:	df000115 	stw	fp,4(sp)
 101e470:	df000104 	addi	fp,sp,4
 101e474:	e13fff15 	stw	r4,-4(fp)
}
 101e478:	e037883a 	mov	sp,fp
 101e47c:	df000017 	ldw	fp,0(sp)
 101e480:	dec00104 	addi	sp,sp,4
 101e484:	f800283a 	ret

0101e488 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 101e488:	defff904 	addi	sp,sp,-28
 101e48c:	dfc00615 	stw	ra,24(sp)
 101e490:	df000515 	stw	fp,20(sp)
 101e494:	df000504 	addi	fp,sp,20
 101e498:	e13ffd15 	stw	r4,-12(fp)
 101e49c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 101e4a0:	e0bffe17 	ldw	r2,-8(fp)
 101e4a4:	10800017 	ldw	r2,0(r2)
 101e4a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 101e4ac:	e13ffd17 	ldw	r4,-12(fp)
 101e4b0:	100a5f80 	call	100a5f8 <strlen>
 101e4b4:	10800044 	addi	r2,r2,1
 101e4b8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 101e4bc:	00000d06 	br	101e4f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 101e4c0:	e0bffc17 	ldw	r2,-16(fp)
 101e4c4:	11000217 	ldw	r4,8(r2)
 101e4c8:	e1bffb17 	ldw	r6,-20(fp)
 101e4cc:	e17ffd17 	ldw	r5,-12(fp)
 101e4d0:	1009f340 	call	1009f34 <memcmp>
 101e4d4:	1004c03a 	cmpne	r2,r2,zero
 101e4d8:	1000031e 	bne	r2,zero,101e4e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 101e4dc:	e0bffc17 	ldw	r2,-16(fp)
 101e4e0:	e0bfff15 	stw	r2,-4(fp)
 101e4e4:	00000706 	br	101e504 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 101e4e8:	e0bffc17 	ldw	r2,-16(fp)
 101e4ec:	10800017 	ldw	r2,0(r2)
 101e4f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 101e4f4:	e0fffe17 	ldw	r3,-8(fp)
 101e4f8:	e0bffc17 	ldw	r2,-16(fp)
 101e4fc:	10fff01e 	bne	r2,r3,101e4c0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 101e500:	e03fff15 	stw	zero,-4(fp)
 101e504:	e0bfff17 	ldw	r2,-4(fp)
}
 101e508:	e037883a 	mov	sp,fp
 101e50c:	dfc00117 	ldw	ra,4(sp)
 101e510:	df000017 	ldw	fp,0(sp)
 101e514:	dec00204 	addi	sp,sp,8
 101e518:	f800283a 	ret

0101e51c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 101e51c:	defffa04 	addi	sp,sp,-24
 101e520:	dfc00515 	stw	ra,20(sp)
 101e524:	df000415 	stw	fp,16(sp)
 101e528:	df000404 	addi	fp,sp,16
 101e52c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 101e530:	008040b4 	movhi	r2,258
 101e534:	1084ad04 	addi	r2,r2,4788
 101e538:	10800017 	ldw	r2,0(r2)
 101e53c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 101e540:	00003306 	br	101e610 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 101e544:	e0bffd17 	ldw	r2,-12(fp)
 101e548:	11000217 	ldw	r4,8(r2)
 101e54c:	100a5f80 	call	100a5f8 <strlen>
 101e550:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 101e554:	e0bffd17 	ldw	r2,-12(fp)
 101e558:	10c00217 	ldw	r3,8(r2)
 101e55c:	e0bffc17 	ldw	r2,-16(fp)
 101e560:	1885883a 	add	r2,r3,r2
 101e564:	10bfffc4 	addi	r2,r2,-1
 101e568:	10800003 	ldbu	r2,0(r2)
 101e56c:	10803fcc 	andi	r2,r2,255
 101e570:	1080201c 	xori	r2,r2,128
 101e574:	10bfe004 	addi	r2,r2,-128
 101e578:	10800bd8 	cmpnei	r2,r2,47
 101e57c:	1000031e 	bne	r2,zero,101e58c <alt_find_file+0x70>
    {
      len -= 1;
 101e580:	e0bffc17 	ldw	r2,-16(fp)
 101e584:	10bfffc4 	addi	r2,r2,-1
 101e588:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 101e58c:	e0bffc17 	ldw	r2,-16(fp)
 101e590:	1007883a 	mov	r3,r2
 101e594:	e0bffe17 	ldw	r2,-8(fp)
 101e598:	1885883a 	add	r2,r3,r2
 101e59c:	10800003 	ldbu	r2,0(r2)
 101e5a0:	10803fcc 	andi	r2,r2,255
 101e5a4:	1080201c 	xori	r2,r2,128
 101e5a8:	10bfe004 	addi	r2,r2,-128
 101e5ac:	10800be0 	cmpeqi	r2,r2,47
 101e5b0:	10000a1e 	bne	r2,zero,101e5dc <alt_find_file+0xc0>
 101e5b4:	e0bffc17 	ldw	r2,-16(fp)
 101e5b8:	1007883a 	mov	r3,r2
 101e5bc:	e0bffe17 	ldw	r2,-8(fp)
 101e5c0:	1885883a 	add	r2,r3,r2
 101e5c4:	10800003 	ldbu	r2,0(r2)
 101e5c8:	10803fcc 	andi	r2,r2,255
 101e5cc:	1080201c 	xori	r2,r2,128
 101e5d0:	10bfe004 	addi	r2,r2,-128
 101e5d4:	1004c03a 	cmpne	r2,r2,zero
 101e5d8:	10000a1e 	bne	r2,zero,101e604 <alt_find_file+0xe8>
 101e5dc:	e0bffd17 	ldw	r2,-12(fp)
 101e5e0:	11000217 	ldw	r4,8(r2)
 101e5e4:	e1bffc17 	ldw	r6,-16(fp)
 101e5e8:	e17ffe17 	ldw	r5,-8(fp)
 101e5ec:	1009f340 	call	1009f34 <memcmp>
 101e5f0:	1004c03a 	cmpne	r2,r2,zero
 101e5f4:	1000031e 	bne	r2,zero,101e604 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 101e5f8:	e0bffd17 	ldw	r2,-12(fp)
 101e5fc:	e0bfff15 	stw	r2,-4(fp)
 101e600:	00000806 	br	101e624 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 101e604:	e0bffd17 	ldw	r2,-12(fp)
 101e608:	10800017 	ldw	r2,0(r2)
 101e60c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 101e610:	00c040b4 	movhi	r3,258
 101e614:	18c4ad04 	addi	r3,r3,4788
 101e618:	e0bffd17 	ldw	r2,-12(fp)
 101e61c:	10ffc91e 	bne	r2,r3,101e544 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 101e620:	e03fff15 	stw	zero,-4(fp)
 101e624:	e0bfff17 	ldw	r2,-4(fp)
}
 101e628:	e037883a 	mov	sp,fp
 101e62c:	dfc00117 	ldw	ra,4(sp)
 101e630:	df000017 	ldw	fp,0(sp)
 101e634:	dec00204 	addi	sp,sp,8
 101e638:	f800283a 	ret

0101e63c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 101e63c:	defff804 	addi	sp,sp,-32
 101e640:	dfc00715 	stw	ra,28(sp)
 101e644:	df000615 	stw	fp,24(sp)
 101e648:	df000604 	addi	fp,sp,24
 101e64c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 101e650:	00bffa04 	movi	r2,-24
 101e654:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 101e658:	008040b4 	movhi	r2,258
 101e65c:	108bb704 	addi	r2,r2,11996
 101e660:	10800017 	ldw	r2,0(r2)
 101e664:	e0bffa15 	stw	r2,-24(fp)
 101e668:	e03ffb0d 	sth	zero,-20(fp)
 101e66c:	e17ffb0b 	ldhu	r5,-20(fp)
 101e670:	e1bffe04 	addi	r6,fp,-8
 101e674:	e13ffa17 	ldw	r4,-24(fp)
 101e678:	1019d0c0 	call	1019d0c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 101e67c:	e03ffd15 	stw	zero,-12(fp)
 101e680:	00001e06 	br	101e6fc <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 101e684:	e0bffd17 	ldw	r2,-12(fp)
 101e688:	00c040b4 	movhi	r3,258
 101e68c:	18c01304 	addi	r3,r3,76
 101e690:	10800324 	muli	r2,r2,12
 101e694:	10c5883a 	add	r2,r2,r3
 101e698:	10800017 	ldw	r2,0(r2)
 101e69c:	1004c03a 	cmpne	r2,r2,zero
 101e6a0:	1000131e 	bne	r2,zero,101e6f0 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 101e6a4:	e0bffd17 	ldw	r2,-12(fp)
 101e6a8:	00c040b4 	movhi	r3,258
 101e6ac:	18c01304 	addi	r3,r3,76
 101e6b0:	10800324 	muli	r2,r2,12
 101e6b4:	10c7883a 	add	r3,r2,r3
 101e6b8:	e0bfff17 	ldw	r2,-4(fp)
 101e6bc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 101e6c0:	008040b4 	movhi	r2,258
 101e6c4:	1084b104 	addi	r2,r2,4804
 101e6c8:	10c00017 	ldw	r3,0(r2)
 101e6cc:	e0bffd17 	ldw	r2,-12(fp)
 101e6d0:	1880040e 	bge	r3,r2,101e6e4 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 101e6d4:	00c040b4 	movhi	r3,258
 101e6d8:	18c4b104 	addi	r3,r3,4804
 101e6dc:	e0bffd17 	ldw	r2,-12(fp)
 101e6e0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 101e6e4:	e0bffd17 	ldw	r2,-12(fp)
 101e6e8:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 101e6ec:	00000606 	br	101e708 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 101e6f0:	e0bffd17 	ldw	r2,-12(fp)
 101e6f4:	10800044 	addi	r2,r2,1
 101e6f8:	e0bffd15 	stw	r2,-12(fp)
 101e6fc:	e0bffd17 	ldw	r2,-12(fp)
 101e700:	10800810 	cmplti	r2,r2,32
 101e704:	103fdf1e 	bne	r2,zero,101e684 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 101e708:	008040b4 	movhi	r2,258
 101e70c:	108bb704 	addi	r2,r2,11996
 101e710:	11000017 	ldw	r4,0(r2)
 101e714:	101a1040 	call	101a104 <OSSemPost>

  return rc;
 101e718:	e0bffc17 	ldw	r2,-16(fp)
}
 101e71c:	e037883a 	mov	sp,fp
 101e720:	dfc00117 	ldw	ra,4(sp)
 101e724:	df000017 	ldw	fp,0(sp)
 101e728:	dec00204 	addi	sp,sp,8
 101e72c:	f800283a 	ret

0101e730 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 101e730:	defffb04 	addi	sp,sp,-20
 101e734:	df000415 	stw	fp,16(sp)
 101e738:	df000404 	addi	fp,sp,16
 101e73c:	e13ffe15 	stw	r4,-8(fp)
 101e740:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 101e744:	e0bfff17 	ldw	r2,-4(fp)
 101e748:	10880070 	cmpltui	r2,r2,8193
 101e74c:	1000021e 	bne	r2,zero,101e758 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 101e750:	00880004 	movi	r2,8192
 101e754:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 101e758:	e0fffe17 	ldw	r3,-8(fp)
 101e75c:	e0bfff17 	ldw	r2,-4(fp)
 101e760:	1885883a 	add	r2,r3,r2
 101e764:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 101e768:	e0bffe17 	ldw	r2,-8(fp)
 101e76c:	e0bffd15 	stw	r2,-12(fp)
 101e770:	00000506 	br	101e788 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 101e774:	e0bffd17 	ldw	r2,-12(fp)
 101e778:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 101e77c:	e0bffd17 	ldw	r2,-12(fp)
 101e780:	10800804 	addi	r2,r2,32
 101e784:	e0bffd15 	stw	r2,-12(fp)
 101e788:	e0fffd17 	ldw	r3,-12(fp)
 101e78c:	e0bffc17 	ldw	r2,-16(fp)
 101e790:	18bff836 	bltu	r3,r2,101e774 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 101e794:	e0bffe17 	ldw	r2,-8(fp)
 101e798:	108007cc 	andi	r2,r2,31
 101e79c:	1005003a 	cmpeq	r2,r2,zero
 101e7a0:	1000021e 	bne	r2,zero,101e7ac <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 101e7a4:	e0bffd17 	ldw	r2,-12(fp)
 101e7a8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 101e7ac:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 101e7b0:	e037883a 	mov	sp,fp
 101e7b4:	df000017 	ldw	fp,0(sp)
 101e7b8:	dec00104 	addi	sp,sp,4
 101e7bc:	f800283a 	ret

0101e7c0 <atexit>:
 101e7c0:	200b883a 	mov	r5,r4
 101e7c4:	000d883a 	mov	r6,zero
 101e7c8:	0009883a 	mov	r4,zero
 101e7cc:	000f883a 	mov	r7,zero
 101e7d0:	101e80c1 	jmpi	101e80c <__register_exitproc>

0101e7d4 <exit>:
 101e7d4:	defffe04 	addi	sp,sp,-8
 101e7d8:	000b883a 	mov	r5,zero
 101e7dc:	dc000015 	stw	r16,0(sp)
 101e7e0:	dfc00115 	stw	ra,4(sp)
 101e7e4:	2021883a 	mov	r16,r4
 101e7e8:	101e9440 	call	101e944 <__call_exitprocs>
 101e7ec:	008040b4 	movhi	r2,258
 101e7f0:	1084aa04 	addi	r2,r2,4776
 101e7f4:	11000017 	ldw	r4,0(r2)
 101e7f8:	20800f17 	ldw	r2,60(r4)
 101e7fc:	10000126 	beq	r2,zero,101e804 <exit+0x30>
 101e800:	103ee83a 	callr	r2
 101e804:	8009883a 	mov	r4,r16
 101e808:	101332c0 	call	101332c <_exit>

0101e80c <__register_exitproc>:
 101e80c:	defffa04 	addi	sp,sp,-24
 101e810:	008040b4 	movhi	r2,258
 101e814:	1084aa04 	addi	r2,r2,4776
 101e818:	dc000015 	stw	r16,0(sp)
 101e81c:	14000017 	ldw	r16,0(r2)
 101e820:	dd000415 	stw	r20,16(sp)
 101e824:	2829883a 	mov	r20,r5
 101e828:	81405217 	ldw	r5,328(r16)
 101e82c:	dcc00315 	stw	r19,12(sp)
 101e830:	dc800215 	stw	r18,8(sp)
 101e834:	dc400115 	stw	r17,4(sp)
 101e838:	dfc00515 	stw	ra,20(sp)
 101e83c:	2023883a 	mov	r17,r4
 101e840:	3027883a 	mov	r19,r6
 101e844:	3825883a 	mov	r18,r7
 101e848:	28002526 	beq	r5,zero,101e8e0 <__register_exitproc+0xd4>
 101e84c:	29000117 	ldw	r4,4(r5)
 101e850:	008007c4 	movi	r2,31
 101e854:	11002716 	blt	r2,r4,101e8f4 <__register_exitproc+0xe8>
 101e858:	8800101e 	bne	r17,zero,101e89c <__register_exitproc+0x90>
 101e85c:	2105883a 	add	r2,r4,r4
 101e860:	1085883a 	add	r2,r2,r2
 101e864:	20c00044 	addi	r3,r4,1
 101e868:	1145883a 	add	r2,r2,r5
 101e86c:	0009883a 	mov	r4,zero
 101e870:	15000215 	stw	r20,8(r2)
 101e874:	28c00115 	stw	r3,4(r5)
 101e878:	2005883a 	mov	r2,r4
 101e87c:	dfc00517 	ldw	ra,20(sp)
 101e880:	dd000417 	ldw	r20,16(sp)
 101e884:	dcc00317 	ldw	r19,12(sp)
 101e888:	dc800217 	ldw	r18,8(sp)
 101e88c:	dc400117 	ldw	r17,4(sp)
 101e890:	dc000017 	ldw	r16,0(sp)
 101e894:	dec00604 	addi	sp,sp,24
 101e898:	f800283a 	ret
 101e89c:	29802204 	addi	r6,r5,136
 101e8a0:	00800044 	movi	r2,1
 101e8a4:	110e983a 	sll	r7,r2,r4
 101e8a8:	30c04017 	ldw	r3,256(r6)
 101e8ac:	2105883a 	add	r2,r4,r4
 101e8b0:	1085883a 	add	r2,r2,r2
 101e8b4:	1185883a 	add	r2,r2,r6
 101e8b8:	19c6b03a 	or	r3,r3,r7
 101e8bc:	14802015 	stw	r18,128(r2)
 101e8c0:	14c00015 	stw	r19,0(r2)
 101e8c4:	00800084 	movi	r2,2
 101e8c8:	30c04015 	stw	r3,256(r6)
 101e8cc:	88bfe31e 	bne	r17,r2,101e85c <__register_exitproc+0x50>
 101e8d0:	30804117 	ldw	r2,260(r6)
 101e8d4:	11c4b03a 	or	r2,r2,r7
 101e8d8:	30804115 	stw	r2,260(r6)
 101e8dc:	003fdf06 	br	101e85c <__register_exitproc+0x50>
 101e8e0:	008040f4 	movhi	r2,259
 101e8e4:	10aaad04 	addi	r2,r2,-21836
 101e8e8:	100b883a 	mov	r5,r2
 101e8ec:	80805215 	stw	r2,328(r16)
 101e8f0:	003fd606 	br	101e84c <__register_exitproc+0x40>
 101e8f4:	00804074 	movhi	r2,257
 101e8f8:	10a5bf04 	addi	r2,r2,-26884
 101e8fc:	1000021e 	bne	r2,zero,101e908 <__register_exitproc+0xfc>
 101e900:	013fffc4 	movi	r4,-1
 101e904:	003fdc06 	br	101e878 <__register_exitproc+0x6c>
 101e908:	01006404 	movi	r4,400
 101e90c:	103ee83a 	callr	r2
 101e910:	1007883a 	mov	r3,r2
 101e914:	103ffa26 	beq	r2,zero,101e900 <__register_exitproc+0xf4>
 101e918:	80805217 	ldw	r2,328(r16)
 101e91c:	180b883a 	mov	r5,r3
 101e920:	18000115 	stw	zero,4(r3)
 101e924:	18800015 	stw	r2,0(r3)
 101e928:	80c05215 	stw	r3,328(r16)
 101e92c:	18006215 	stw	zero,392(r3)
 101e930:	18006315 	stw	zero,396(r3)
 101e934:	0009883a 	mov	r4,zero
 101e938:	883fc826 	beq	r17,zero,101e85c <__register_exitproc+0x50>
 101e93c:	003fd706 	br	101e89c <__register_exitproc+0x90>

0101e940 <register_fini>:
 101e940:	f800283a 	ret

0101e944 <__call_exitprocs>:
 101e944:	008040b4 	movhi	r2,258
 101e948:	1084aa04 	addi	r2,r2,4776
 101e94c:	10800017 	ldw	r2,0(r2)
 101e950:	defff304 	addi	sp,sp,-52
 101e954:	df000b15 	stw	fp,44(sp)
 101e958:	d8800115 	stw	r2,4(sp)
 101e95c:	00804074 	movhi	r2,257
 101e960:	10a5ba04 	addi	r2,r2,-26904
 101e964:	1005003a 	cmpeq	r2,r2,zero
 101e968:	d8800215 	stw	r2,8(sp)
 101e96c:	d8800117 	ldw	r2,4(sp)
 101e970:	dd400815 	stw	r21,32(sp)
 101e974:	dd000715 	stw	r20,28(sp)
 101e978:	10805204 	addi	r2,r2,328
 101e97c:	dfc00c15 	stw	ra,48(sp)
 101e980:	ddc00a15 	stw	r23,40(sp)
 101e984:	dd800915 	stw	r22,36(sp)
 101e988:	dcc00615 	stw	r19,24(sp)
 101e98c:	dc800515 	stw	r18,20(sp)
 101e990:	dc400415 	stw	r17,16(sp)
 101e994:	dc000315 	stw	r16,12(sp)
 101e998:	282b883a 	mov	r21,r5
 101e99c:	2039883a 	mov	fp,r4
 101e9a0:	d8800015 	stw	r2,0(sp)
 101e9a4:	2829003a 	cmpeq	r20,r5,zero
 101e9a8:	d8800117 	ldw	r2,4(sp)
 101e9ac:	14405217 	ldw	r17,328(r2)
 101e9b0:	88001026 	beq	r17,zero,101e9f4 <__call_exitprocs+0xb0>
 101e9b4:	ddc00017 	ldw	r23,0(sp)
 101e9b8:	88800117 	ldw	r2,4(r17)
 101e9bc:	8c802204 	addi	r18,r17,136
 101e9c0:	143fffc4 	addi	r16,r2,-1
 101e9c4:	80000916 	blt	r16,zero,101e9ec <__call_exitprocs+0xa8>
 101e9c8:	05bfffc4 	movi	r22,-1
 101e9cc:	a000151e 	bne	r20,zero,101ea24 <__call_exitprocs+0xe0>
 101e9d0:	8409883a 	add	r4,r16,r16
 101e9d4:	2105883a 	add	r2,r4,r4
 101e9d8:	1485883a 	add	r2,r2,r18
 101e9dc:	10c02017 	ldw	r3,128(r2)
 101e9e0:	a8c01126 	beq	r21,r3,101ea28 <__call_exitprocs+0xe4>
 101e9e4:	843fffc4 	addi	r16,r16,-1
 101e9e8:	85bff81e 	bne	r16,r22,101e9cc <__call_exitprocs+0x88>
 101e9ec:	d8800217 	ldw	r2,8(sp)
 101e9f0:	10003126 	beq	r2,zero,101eab8 <__call_exitprocs+0x174>
 101e9f4:	dfc00c17 	ldw	ra,48(sp)
 101e9f8:	df000b17 	ldw	fp,44(sp)
 101e9fc:	ddc00a17 	ldw	r23,40(sp)
 101ea00:	dd800917 	ldw	r22,36(sp)
 101ea04:	dd400817 	ldw	r21,32(sp)
 101ea08:	dd000717 	ldw	r20,28(sp)
 101ea0c:	dcc00617 	ldw	r19,24(sp)
 101ea10:	dc800517 	ldw	r18,20(sp)
 101ea14:	dc400417 	ldw	r17,16(sp)
 101ea18:	dc000317 	ldw	r16,12(sp)
 101ea1c:	dec00d04 	addi	sp,sp,52
 101ea20:	f800283a 	ret
 101ea24:	8409883a 	add	r4,r16,r16
 101ea28:	88c00117 	ldw	r3,4(r17)
 101ea2c:	2105883a 	add	r2,r4,r4
 101ea30:	1445883a 	add	r2,r2,r17
 101ea34:	18ffffc4 	addi	r3,r3,-1
 101ea38:	11800217 	ldw	r6,8(r2)
 101ea3c:	1c001526 	beq	r3,r16,101ea94 <__call_exitprocs+0x150>
 101ea40:	10000215 	stw	zero,8(r2)
 101ea44:	303fe726 	beq	r6,zero,101e9e4 <__call_exitprocs+0xa0>
 101ea48:	00c00044 	movi	r3,1
 101ea4c:	1c06983a 	sll	r3,r3,r16
 101ea50:	90804017 	ldw	r2,256(r18)
 101ea54:	8cc00117 	ldw	r19,4(r17)
 101ea58:	1884703a 	and	r2,r3,r2
 101ea5c:	10001426 	beq	r2,zero,101eab0 <__call_exitprocs+0x16c>
 101ea60:	90804117 	ldw	r2,260(r18)
 101ea64:	1884703a 	and	r2,r3,r2
 101ea68:	10000c1e 	bne	r2,zero,101ea9c <__call_exitprocs+0x158>
 101ea6c:	2105883a 	add	r2,r4,r4
 101ea70:	1485883a 	add	r2,r2,r18
 101ea74:	11400017 	ldw	r5,0(r2)
 101ea78:	e009883a 	mov	r4,fp
 101ea7c:	303ee83a 	callr	r6
 101ea80:	88800117 	ldw	r2,4(r17)
 101ea84:	98bfc81e 	bne	r19,r2,101e9a8 <__call_exitprocs+0x64>
 101ea88:	b8800017 	ldw	r2,0(r23)
 101ea8c:	147fd526 	beq	r2,r17,101e9e4 <__call_exitprocs+0xa0>
 101ea90:	003fc506 	br	101e9a8 <__call_exitprocs+0x64>
 101ea94:	8c000115 	stw	r16,4(r17)
 101ea98:	003fea06 	br	101ea44 <__call_exitprocs+0x100>
 101ea9c:	2105883a 	add	r2,r4,r4
 101eaa0:	1485883a 	add	r2,r2,r18
 101eaa4:	11000017 	ldw	r4,0(r2)
 101eaa8:	303ee83a 	callr	r6
 101eaac:	003ff406 	br	101ea80 <__call_exitprocs+0x13c>
 101eab0:	303ee83a 	callr	r6
 101eab4:	003ff206 	br	101ea80 <__call_exitprocs+0x13c>
 101eab8:	88800117 	ldw	r2,4(r17)
 101eabc:	1000081e 	bne	r2,zero,101eae0 <__call_exitprocs+0x19c>
 101eac0:	89000017 	ldw	r4,0(r17)
 101eac4:	20000726 	beq	r4,zero,101eae4 <__call_exitprocs+0x1a0>
 101eac8:	b9000015 	stw	r4,0(r23)
 101eacc:	8809883a 	mov	r4,r17
 101ead0:	10096e80 	call	10096e8 <free>
 101ead4:	bc400017 	ldw	r17,0(r23)
 101ead8:	883fb71e 	bne	r17,zero,101e9b8 <__call_exitprocs+0x74>
 101eadc:	003fc506 	br	101e9f4 <__call_exitprocs+0xb0>
 101eae0:	89000017 	ldw	r4,0(r17)
 101eae4:	882f883a 	mov	r23,r17
 101eae8:	2023883a 	mov	r17,r4
 101eaec:	883fb21e 	bne	r17,zero,101e9b8 <__call_exitprocs+0x74>
 101eaf0:	003fc006 	br	101e9f4 <__call_exitprocs+0xb0>
 101eaf4:	0401ffff 	0x401ffff
 101eaf8:	00010000 	call	1000 <OSCtxSw_SWITCH_PC+0xfc0>
 101eafc:	010d0bff 	0x10d0bff
 101eb00:	01030004 	movi	r4,3072
 101eb04:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb08:	0000007d 	0x7d
 101eb0c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eb10:	01110bff 	0x1110bff
 101eb14:	01030008 	cmpgei	r4,zero,3072
 101eb18:	03000203 	ldbu	r12,8(zero)
 101eb1c:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb20:	0000007d 	0x7d
 101eb24:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eb28:	01110bff 	0x1110bff
 101eb2c:	01030008 	cmpgei	r4,zero,3072
 101eb30:	03000203 	ldbu	r12,8(zero)
 101eb34:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb38:	0000007d 	0x7d
 101eb3c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eb40:	01110bff 	0x1110bff
 101eb44:	01030008 	cmpgei	r4,zero,3072
 101eb48:	03000203 	ldbu	r12,8(zero)
 101eb4c:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb50:	0000007d 	0x7d
 101eb54:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eb58:	01110bff 	0x1110bff
 101eb5c:	01030008 	cmpgei	r4,zero,3072
 101eb60:	03000203 	ldbu	r12,8(zero)
 101eb64:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb68:	0000007d 	0x7d
 101eb6c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eb70:	01110bff 	0x1110bff
 101eb74:	01030008 	cmpgei	r4,zero,3072
 101eb78:	03000203 	ldbu	r12,8(zero)
 101eb7c:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb80:	0000007d 	0x7d
 101eb84:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eb88:	01110bff 	0x1110bff
 101eb8c:	01030008 	cmpgei	r4,zero,3072
 101eb90:	03000203 	ldbu	r12,8(zero)
 101eb94:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101eb98:	0000007d 	0x7d
 101eb9c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eba0:	01110bff 	0x1110bff
 101eba4:	01030008 	cmpgei	r4,zero,3072
 101eba8:	03000203 	ldbu	r12,8(zero)
 101ebac:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101ebb0:	0000007d 	0x7d
 101ebb4:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ebb8:	01110bff 	0x1110bff
 101ebbc:	01030008 	cmpgei	r4,zero,3072
 101ebc0:	03000203 	ldbu	r12,8(zero)
 101ebc4:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101ebc8:	0000007d 	0x7d
 101ebcc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ebd0:	01110bff 	0x1110bff
 101ebd4:	01030008 	cmpgei	r4,zero,3072
 101ebd8:	03000203 	ldbu	r12,8(zero)
 101ebdc:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 101ebe0:	0000007d 	0x7d
 101ebe4:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ebe8:	01090bff 	0x1090bff
 101ebec:	7f030002 	0x7f030002
 101ebf0:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ebf4:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ebf8:	01090bff 	0x1090bff
 101ebfc:	7f030002 	0x7f030002
 101ec00:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec04:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec08:	01090bff 	0x1090bff
 101ec0c:	7f030002 	0x7f030002
 101ec10:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec14:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec18:	01090bff 	0x1090bff
 101ec1c:	7f030002 	0x7f030002
 101ec20:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec24:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec28:	01090bff 	0x1090bff
 101ec2c:	7f030002 	0x7f030002
 101ec30:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec34:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec38:	01090bff 	0x1090bff
 101ec3c:	7f030002 	0x7f030002
 101ec40:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec44:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ec48:	ff000002 	0xff000002
 101ec4c:	000201ff 	0x201ff
 101ec50:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ec54:	ff000002 	0xff000002
 101ec58:	000201ff 	0x201ff
 101ec5c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec60:	01090bff 	0x1090bff
 101ec64:	7f030002 	0x7f030002
 101ec68:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec6c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec70:	01090bff 	0x1090bff
 101ec74:	7f030002 	0x7f030002
 101ec78:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec7c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec80:	01090bff 	0x1090bff
 101ec84:	7f030002 	0x7f030002
 101ec88:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec8c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ec90:	01090bff 	0x1090bff
 101ec94:	7f030002 	0x7f030002
 101ec98:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ec9c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101eca0:	01090bff 	0x1090bff
 101eca4:	7f030002 	0x7f030002
 101eca8:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 101ecac:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ecb0:	01090bff 	0x1090bff
 101ecb4:	7f010002 	0x7f010002
 101ecb8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ecbc:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ecc0:	00000002 	0x2
 101ecc4:	01090bff 	0x1090bff
 101ecc8:	7f010002 	0x7f010002
 101eccc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ecd0:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ecd4:	ff000002 	0xff000002
 101ecd8:	000201ff 	0x201ff
 101ecdc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ece0:	01090bff 	0x1090bff
 101ece4:	01010004 	movi	r4,1024
 101ece8:	00007f00 	call	7f0 <OSCtxSw_SWITCH_PC+0x7b0>
 101ecec:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ecf0:	01090bff 	0x1090bff
 101ecf4:	01010004 	movi	r4,1024
 101ecf8:	00007f00 	call	7f0 <OSCtxSw_SWITCH_PC+0x7b0>
 101ecfc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ed00:	010d0bff 	0x10d0bff
 101ed04:	01010006 	br	101f108 <_ZTISt11logic_error+0xa8>
 101ed08:	7f000200 	call	7f00020 <__alt_data_end+0x5f00020>
 101ed0c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ed10:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ed14:	ff000002 	0xff000002
 101ed18:	000201ff 	0x201ff
 101ed1c:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ed20:	ff000002 	0xff000002
 101ed24:	000201ff 	0x201ff
 101ed28:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ed2c:	01000004 	movi	r4,0
 101ed30:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ed34:	01000004 	movi	r4,0
 101ed38:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ed3c:	01000004 	movi	r4,0
 101ed40:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 101ed44:	01000008 	cmpgei	r4,zero,0
 101ed48:	03000200 	call	300020 <OSCtxSw_SWITCH_PC+0x2fffe0>
 101ed4c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ed50:	010d0bff 	0x10d0bff
 101ed54:	01000004 	movi	r4,0
 101ed58:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 101ed5c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ed60:	010d0bff 	0x10d0bff
 101ed64:	01000004 	movi	r4,0
 101ed68:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 101ed6c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ed70:	010d0bff 	0x10d0bff
 101ed74:	01000004 	movi	r4,0
 101ed78:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 101ed7c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101ed80:	01090bff 	0x1090bff
 101ed84:	7f010002 	0x7f010002
	...
 101ed90:	01090bff 	0x1090bff
 101ed94:	7f010002 	0x7f010002
	...
 101eda0:	010d0bff 	0x10d0bff
 101eda4:	7f010002 	0x7f010002
 101eda8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 101edac:	0101f24c 	andi	r4,zero,1993
 101edb0:	00000001 	jmpi	0 <OSTCBStkPtr_OFFSET>
 101edb4:	010015c8 	cmpgei	r4,zero,87
 101edb8:	0101e940 	call	101e94 <OSCtxSw_SWITCH_PC+0x101e54>
