Network Communications

TCP

Rover > Server [> Players]
	::ih:
		Notifies server about an infrared hit event.
		Determines source rover using IP address.
		Server forwards infrared hit event to clients using WebSocket or similar.
		
Server > Rover
	::is:
		Sends out and infrared shoot event.
	::mmdsss:
	::m $m $d $sss:
		Controls the motors.
		$m one of {l, r}
		$d one of {f, b}
		$sss between 0 and 127
	
HTTP

Player > Server
	::infrared/shoot?p=$player:
		Sends out an infrared shoot event.
		$player the player whose rover the shoot will be forwarded to
	::motor/move?p=$player&m=$motor&d=$direction&s=$speed:
		Controls the motors.
		$player the player whose rover the move will be forwarded to
		$motor one of {l(eft), r(ight)}
		$direction one of {f(orward), b(ackward)}
		$speed between 0 and 127
		
Player > Server
	::index:
		Redirects to ::/play:
	::create:
		Creates a new game and returns the game details using JSON.
	::play[?g=$game[&p=$party]]:
		Joins an ARCap game.
		$game the id of the game to join
			If not set, this page displays a list of all the games.
			Only one game can have status "open" at a time.
			If there is no game with status "open", there is a "create game" option.
				Creates game through AJAX using ::create:
			If there is a game with status "open", that game has a "join" or "view" option.
				"join" if game is under capacity
				"view" if game is at capacity
				Both go to ::play?g=$game:
			[Closed games have no actions, only show final score.]
		$party the id of the client party
			If not set, this page generates a new party id and adds you to the game.
			If the game is under capacity, the client is added as a player.
			If the game is at capacity, the client is added as a viewer.
			We then redirect to ::/play?g=$game&p=$party:
		
	