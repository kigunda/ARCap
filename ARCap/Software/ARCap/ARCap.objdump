
ARCap.elf:     file format elf32-littlenios2
ARCap.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01000000

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00029000 memsz 0x0003adb4 flags rwx
    LOAD off    0x0002a020 vaddr 0x02004020 paddr 0x02004020 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags r-x
    LOAD off    0x0002b000 vaddr 0x02009000 paddr 0x02009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  02009000  02009000  0002b000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  02004020  02004020  0002a020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00025b0c  01000000  01000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000172c  01025b0c  01025b0c  00026b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001dc8  01027238  01027238  00028238  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00011db4  01029000  01029000  0002a000  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0002b000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001f88  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000b1ee  00000000  00000000  0002cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00079c5e  00000000  00000000  0003819e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000127cc  00000000  00000000  000b1dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00030bbf  00000000  00000000  000c45c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000068a8  00000000  00000000  000f5188  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000a086  00000000  00000000  000fba30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019763  00000000  00000000  00105ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0011f21c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003510  00000000  00000000  0011f230  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00130871  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00130877  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0013087a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0013087b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0013087c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00130880  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00130884  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00130888  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00130893  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0013089e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  001308a9  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000025  00000000  00000000  001308af  2**0
                  CONTENTS, READONLY
 29 .jdi          000046ad  00000000  00000000  001308d4  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00070139  00000000  00000000  00134f81  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02009000 l    d  .entry	00000000 .entry
02004020 l    d  .exceptions	00000000 .exceptions
01000000 l    d  .text	00000000 .text
01025b0c l    d  .rodata	00000000 .rodata
01027238 l    d  .rwdata	00000000 .rwdata
01029000 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 InfraredReceiver.cpp
00000000 l    df *ABS*	00000000 InfraredSender.cpp
00000000 l    df *ABS*	00000000 Listener.cpp
00000000 l    df *ABS*	00000000 MotorHandler.cpp
00000000 l    df *ABS*	00000000 NetworkReceiver.cpp
00000000 l    df *ABS*	00000000 NetworkSender.cpp
00000000 l    df *ABS*	00000000 WifiHandler.cpp
010041d8 l     F .text	00000030 _Z7inRangei
01004208 l     F .text	00000038 _Z12inRetryRangei
010042b4 l     F .text	00000078 _Z14stringEndsWithPciS_i
01028db8 l     O .rwdata	00000004 _ZZN11WifiHandler11tcpSendTestEvE5count
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 functexcept.cc
00000000 l    df *ABS*	00000000 ios_failure.cc
00000000 l    df *ABS*	00000000 stdexcept.cc
00000000 l    df *ABS*	00000000 allocator-inst.cc
00000000 l    df *ABS*	00000000 string-inst.cc
00000000 l    df *ABS*	00000000 atomicity.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 pointer_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 pbase_type_info.cc
00000000 l    df *ABS*	00000000 fundamental_type_info.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0100c934 l     F .text	00000030 _Z12read_uleb128PKhPj
0100c964 l     F .text	00000054 _Z12read_sleb128PKhPi
0100c9b8 l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
0100ca54 l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
0100cc28 l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
0100ccb8 l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0100cdb8 l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
0100ce3c l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
0100d904 l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 bad_typeid.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
010370d8 l     O .bss	00000800 emergency_buffer
01029020 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 bad_cast.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
01029024 l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0102902c l     O .bss	00000004 fc_static
0100dfec l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
0100e104 l     F .text	000000cc _Unwind_RaiseException_Phase2
0100e1d0 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strnlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100f9d0 l     F .text	00000058 __sprint_r
01026b76 l     O .rodata	00000010 blanks.3452
01026b66 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
01026c87 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
01011a4c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01013474 l     F .text	00000058 std
01013580 l     F .text	00000008 __fp_lock
01013588 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01027640 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
01028f50 l     O .rwdata	00000004 charset
01026e2c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mprec.c
01026f74 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
01016e88 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01017fb4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
010188b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01018918 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
01018944 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
01018a88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
01018bcc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
01018d6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
01018ec0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0101910c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01028f6c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
010193c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
01028f70 l     O .rwdata	00000004 lockid
0102905c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
01028f74 l     O .rwdata	00000004 lockid
01029064 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0101adfc l     F .text	00000044 OS_InitMisc
0101ae40 l     F .text	0000006c OS_InitRdyList
0101afa4 l     F .text	000000e0 OS_InitTCBList
0101ad20 l     F .text	000000dc OS_InitEventList
0101aeac l     F .text	0000007c OS_InitTaskIdle
0101af28 l     F .text	0000007c OS_InitTaskStat
0101b218 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0101d138 l     F .text	00000110 OS_FlagTaskRdy
0101ce90 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
01027bf4 l     O .rwdata	000000c8 epcs_flash_controller_0
01027cbc l     O .rwdata	0000106c jtag_uart_0
01028d28 l     O .rwdata	0000002c adc
01028d54 l     O .rwdata	0000002c uart_motor
01028d80 l     O .rwdata	0000002c uart_wifi
01021ab0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
01021b74 l     F .text	00000288 alt_epcs_flash_query
01021b3c l     F .text	00000038 alt_flash_device_register
01021dfc l     F .text	00000108 alt_epcs_flash_memcmp
01022284 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01022744 l     F .text	000002c8 altera_avalon_jtag_uart_irq
01022a0c l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01023224 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_de0_nano_adc.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 epcs_commands.c
01023990 l     F .text	00000038 epcs_await_wip_released
010239c8 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01024114 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
010243a0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
010246b0 l     F .text	000000f8 alt_file_locked
01024934 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01025620 l     F .text	00000004 register_fini
0100b0b0  w    F .text	0000005c _ZNSs2atEm
0100dbd8 g     F .text	00000040 __cxa_free_exception
01002118  w    F .text	00000030 _ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev
01009a4c  w    F .text	00000034 _ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
0100db88 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
01014828 g     F .text	00000094 _mprec_log10
01001b58  w    F .text	00000058 _ZN12MotorHandlerD0Ev
0100d614 g     F .text	00000018 _ZSt10unexpectedv
01028fc2 g     O .rwdata	00000002 OSTaskNameSize
01022184 g     F .text	00000090 alt_epcs_flash_get_info
01028e44  w    O .rwdata	00000008 _ZTIw
01005a8c g     F .text	00000034 _ZSt18__throw_bad_typeidv
010261e8  w    O .rodata	00000018 _ZTI18SemCreateException
01014914 g     F .text	00000088 __any_on
0101605c g     F .text	00000070 _isatty_r
01007cc4  w    F .text	00000004 _ZNSaIwEC1Ev
01026f4c g     O .rodata	00000028 __mprec_tinytens
01007328 g     F .text	00000030 _ZNSt14overflow_errorC1ERKSs
01028e3c  w    O .rwdata	00000008 _ZTIc
01018f20 g     F .text	000000c8 alt_main
010013b4 g     F .text	0000006c _ZN12MotorHandler5resetEv
01009570  w    F .text	00000040 _ZNKSs6substrEmm
0100efdc g     F .text	000000a0 _puts_r
0103ab24 g     O .bss	00000100 alt_irq
01028e34  w    O .rwdata	00000008 _ZTIa
01028dbc  w    O .rwdata	00000004 _ZNSs4nposE
01000628  w    F .text	00000058 _ZN16ADCOpenExceptionD0Ev
010160cc g     F .text	00000078 _lseek_r
01000788 g     F .text	0000005c _ZN14InfraredSender4testEv
0101da2c g     F .text	000000d4 OS_MemInit
01000bf8 g     F .text	000000ac _ZN8Listener6updateEv
0100df9c g     F .text	00000014 _Unwind_GetIPInfo
01002608  w    F .text	00000038 _ZNSt6vectorIP8os_eventSaIS1_EEC1ERKS2_
0102198c g     F .text	00000064 OSTimeSet
010179a8 g     F .text	00000088 __eqdf2
01026834  w    O .rodata	00000010 _ZTIPy
01028ef4  w    O .rwdata	00000002 _ZTSa
0100d81c g     F .text	00000074 __cxa_rethrow
01000410  w    F .text	00000028 _ZNK18QueuePostException4whatEv
01025ba4  w    O .rodata	00000018 _ZTI18QueuePostException
0100df3c g     F .text	0000000c _Unwind_SjLj_Unregister
01008bf4  w    F .text	00000018 _ZNKSs6rbeginEv
0100d534 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
010034d8  w    F .text	00000064 _ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP8os_eventEEPT_PKS5_S8_S6_
01019978 g     F .text	000006b4 OSEventPendMulti
01009964  w    F .text	000000b4 _ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag
010268c4  w    O .rodata	00000010 _ZTIPKi
010096d0  w    F .text	00000020 _ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_
0100bae0  w    F .text	00000024 _ZNSs7replaceEmmRKSs
0100df8c g     F .text	00000010 _Unwind_GetIP
0103adb4 g       *ABS*	00000000 __alt_heap_start
01024f3c g     F .text	00000020 OSTaskCreateHook
01028eb4  w    O .rwdata	00000003 _ZTSPj
01025d84  w    O .rodata	00000014 _ZTV18QueuePendException
01002cd4  w    F .text	00000028 _ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEEEvT_S9_11__true_type
010290c8 g     O .bss	00002000 task1_stk
010075a8 g     F .text	00000030 _ZNSt12length_errorC1ERKSs
0100f3dc g     F .text	00000074 _kill_r
0100b18c  w    F .text	00000038 _ZNSs5beginEv
0100bc94 g     F .text	00000010 _ZNSt9bad_allocD2Ev
0100ef64 g     F .text	00000044 printf
01028f9a g     O .rwdata	00000002 OSMboxEn
01003264  w    F .text	00000044 _ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_11__true_type
0101a080 g     F .text	0000007c OSIntEnter
0100da84 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
0100f31c g     F .text	000000a0 _signal_r
01028e90  w    O .rwdata	00000003 _ZTSPx
01026270  w    O .rodata	00000013 _ZTSSt14overflow_error
01015b14 g     F .text	00000068 __sseek
010134dc g     F .text	000000a4 __sinit
01028e9c  w    O .rwdata	00000003 _ZTSPm
01028faa g     O .rwdata	00000002 OSQEn
01002320  w    F .text	0000005c _ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_
0100a88c  w    F .text	000000f8 _ZNSs6assignEPKcm
01004a34 g     F .text	000000cc _ZN11WifiHandler10tcpConnectEv
01002424  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv
0100da74 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
010141e8 g     F .text	00000084 _setlocale_r
01026a74  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
010135dc g     F .text	0000009c __sfmoreglue
01003784  w    F .text	00000040 _ZNSt12_Vector_baseIcSaIcEE11_M_allocateEm
01003488  w    F .text	00000050 _ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
01019634 g     F .text	000000d0 __malloc_unlock
01000680  w    F .text	00000058 _ZN16ADCOpenExceptionD1Ev
01024f98 g     F .text	0000001c OSTaskStatHook
010080c4  w    F .text	00000018 _ZNSs7_M_moveEPcPKcm
010236d4 g     F .text	00000090 alt_up_rs232_read_fd
01002784  w    F .text	0000003c _ZNSt6vectorIP8os_eventSaIS1_EE3endEv
01004bbc g     F .text	000000bc _ZN11WifiHandler17tcpSendAndConfirmEPct
01025f20  w    O .rodata	0000000c _ZTI12MotorHandler
0100bef4 g     F .text	00000240 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
010028a8  w    F .text	0000003c _ZSt8_DestroyIPccEvT_S1_SaIT0_E
0102906c g     O .bss	00000001 OSLockNesting
0100bb34  w    F .text	00000064 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc
0100d634 g     F .text	00000020 _ZSt18uncaught_exceptionv
01026230  w    O .rodata	0000000c _ZTISt15underflow_error
01028fe8 g     O .rwdata	00000002 OSDataSize
0102906d g     O .bss	00000001 OSRunning
0100a4fc  w    F .text	000000bc _ZNSsD2Ev
01003fb4 g     F .text	00000050 _ZN13NetworkSenderC1EP11WifiHandler
0100a3b4  w    F .text	0000008c _ZNSspLEc
01009fa0  w    F .text	000000e0 _ZNSs6appendEmc
0100edec g     F .text	000000e0 memmove
01024fd0 g     F .text	0000001c OSInitHookBegin
01028eb8  w    O .rwdata	00000002 _ZTSj
01028fe0 g     O .rwdata	00000002 OSTmrSize
010001d8 g     F .text	00000090 _ZN16InfraredReceiverC1Ev
01003190  w    F .text	00000084 _ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES8_EET0_T_SA_S9_
0100bbe0 g     F .text	00000010 _ZNSt9exceptionD2Ev
010135cc g     F .text	00000010 _cleanup
01002e90  w    F .text	00000050 _ZNSt12_Vector_baseIP8os_eventSaIS1_EE13_M_deallocateEPS1_m
0100f450 g     F .text	000000bc snprintf
0101499c g     F .text	000000bc _Balloc
01026664  w    O .rodata	00000024 _ZTSN10__cxxabiv119__pointer_type_infoE
01000a80  w    F .text	00000058 _ZN14InfraredSenderD0Ev
01002664  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_
01009944  w    F .text	00000020 _ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_
0100bd80 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD1Ev
010262d4  w    O .rodata	00000011 _ZTSSt12out_of_range
01026af8  w    O .rodata	0000000c _ZTISt8bad_cast
010080dc  w    F .text	00000018 _ZNSs7_M_copyEPcPKcm
01029070 g     O .bss	00000004 OSIdleCtr
0100aa14  w    F .text	00000040 _ZNSsaSEPKc
0100bb98 g     F .text	00000014 _ZN9__gnu_cxx18__exchange_and_addEPVii
01000a30  w    F .text	00000050 _ZN8ListenerD2Ev
01005b5c g     F .text	00000108 _ZSt19__throw_ios_failurePKc
01017ab8 g     F .text	00000088 __gtdf2
0102659c  w    O .rodata	00000014 _ZTVSt13bad_exception
01024c08 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0101b54c g     F .text	000002e0 OS_TCBInit
01003214  w    F .text	00000050 _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_
01023898 g     F .text	000000f8 epcs_sector_erase
0100427c g     F .text	00000038 _ZN11WifiHandler7hasDataEv
01028f18  w    O .rwdata	00000002 _ZTSb
01006ab8  w    F .text	00000034 _ZNSt14overflow_errorD0Ev
01004d94 g     F .text	00000038 _ZN11WifiHandler4lockEv
02009000 g     F .entry	00000000 __reset
01002268  w    F .text	00000038 _ZNSaIP8os_eventEC2ERKS1_
01028dc4  w    O .rwdata	00000001 _ZNSs4_Rep11_S_terminalE
01023360 g     F .text	00000140 alt_up_de0_nano_adc_read
010008c4 g     F .text	0000004c _ZN14InfraredSenderC1Ev
0100888c  w    F .text	000000e0 _ZNKSs16find_last_not_ofEPKcmm
010007e4 g     F .text	00000028 _Z25infrared_sender_test_taskPv
01002fc8  w    F .text	00000048 _ZSt19__copy_backward_auxIPcS0_ET0_T_S2_S1_
0100dfcc g     F .text	00000008 _Unwind_GetRegionStart
01028ef8  w    O .rwdata	00000004 _ZTSPKc
01028f10  w    O .rwdata	00000004 _ZTSPKb
01028e80  w    O .rwdata	00000004 _ZTSPKy
01001c60  w    F .text	00000058 _ZN17UARTOpenExceptionD1Ev
01028fe6 g     O .rwdata	00000002 OSTmrWheelTblSize
01028f86 g     O .rwdata	00000002 OSEventSize
01029074 g     O .bss	00000001 OSPrioHighRdy
01015fe8 g     F .text	00000074 _fstat_r
01002640  w    F .text	00000024 _ZNKSt6vectorIcSaIcEE8max_sizeEv
010268e4  w    O .rodata	00000010 _ZTIPKt
01024f5c g     F .text	00000020 OSTaskDelHook
01028ef0  w    O .rwdata	00000003 _ZTSPa
01004f3c g     F .text	0000006c _ZN11WifiHandler10tcpReceiveEv
0100dda0 g     F .text	00000100 _Znwm
0100862c  w    F .text	00000064 _ZNSs4_Rep10_M_disposeERKSaIcE
0100237c  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_
0102903c g     O .bss	00000004 errno
01008d08  w    F .text	0000003c _ZNSsC2EmcRKSaIcE
01024be8 g       .text	00000000 OSStartHighRdy
01008a28  w    F .text	0000007c _ZNKSs7compareEPKc
01009a80  w    F .text	000000fc _ZNSsC1ERKSs
01028f1c  w    O .rwdata	00000004 _ZTSPKv
01020144 g     F .text	00000200 OSTaskCreateExt
0101c9ac g     F .text	00000068 OSFlagPendGetFlagsRdy
01028fc6 g     O .rwdata	00000002 OSTaskStatStkSize
0100e39c g     F .text	00000080 _Unwind_Backtrace
01005128 g     F .text	000000fc _ZN11WifiHandlerC1Ev
010269a4  w    O .rodata	00000010 _ZTIPKb
01009204  w    F .text	00000088 _ZNKSs4copyEPcmm
0101b9b8 g     F .text	00000334 OSFlagAccept
0101e168 g     F .text	000000c8 OSQFlush
0101db00 g     F .text	00000154 OSQAccept
01029054 g     O .bss	00000004 alt_argv
01003ab8  w    F .text	00000088 _ZNSt6vectorIcSaIcEE9push_backERKc
01030dac g       *ABS*	00000000 _gp
01025bec  w    O .rodata	00000011 _ZTS14ARCapException
01001cb8 g     F .text	00000128 _ZN15NetworkReceiver4postEPKc
0100d964 g     F .text	00000034 _ZNSt10bad_typeidD0Ev
01006aec  w    F .text	00000010 _ZNSt14overflow_errorD1Ev
0100c914 g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD1Ev
0101ff70 g     F .text	000001d4 OSTaskCreate
01001b18  w    F .text	00000040 _ZN17UARTOpenExceptionC1Ev
0101f9fc g     F .text	00000574 OSTaskChangePrio
0100dd4c g     F .text	00000034 _ZNSt8bad_castD0Ev
01007cb4  w    F .text	00000004 _ZNSaIwED1Ev
01029068 g     O .bss	00000004 alt_heapsem
01018ae8 g     F .text	00000020 getpid
0100ac48  w    F .text	00000038 _ZNSs6assignEmc
01007dcc  w    F .text	0000000c _ZNKSs4_Rep12_M_is_leakedEv
0101b82c g     F .text	0000018c OSDebugInit
0100cec0 g     F .text	00000180 __cxa_call_unexpected
01020344 g     F .text	0000040c OSTaskDel
0100d62c g     F .text	00000008 __cxa_get_exception_ptr
01025d54  w    O .rodata	00000018 _ZTI18QueuePendException
01028ea4  w    O .rwdata	00000004 _ZTSPKl
010080fc  w    F .text	0000000c _ZNKSsixEm
010046d0 g     F .text	00000068 _ZN11WifiHandler5readyEv
01027a74 g     O .rwdata	00000180 alt_fd_list
0100c85c g     F .text	00000034 _ZN10__cxxabiv117__pbase_type_infoD0Ev
01037900 g     O .bss	00000370 OSFlagTbl
01026894  w    O .rodata	00000010 _ZTIPl
010262e8  w    O .rodata	00000014 _ZTVSt12out_of_range
0100e34c g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
0101aafc g     F .text	000000b8 OS_EventTaskRemove
01023b9c g     F .text	00000064 epcs_write_status_register
01002b28  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS4_
0100df60 g     F .text	00000014 _Unwind_GetCFA
0100d520 g     F .text	00000014 _ZSt13set_terminatePFvvE
01028e1c  w    O .rwdata	00000008 _ZTIt
0102423c g     F .text	00000094 alt_find_dev
0100ed4c g     F .text	000000a0 memcpy
010083a8  w    F .text	00000010 _ZNSsC2Ev
01028f20  w    O .rwdata	00000003 _ZTSPv
01008298  w    F .text	0000000c _ZNKSs17find_first_not_ofERKSsm
01028fb0 g     O .rwdata	00000002 OSRdyTblSize
01008108  w    F .text	000000a4 _ZNKSs17find_first_not_ofEPKcmm
01025ff4  w    O .rodata	0000000c _ZTI13NetworkSender
0100353c  w    F .text	00000048 _ZSt10__copy_auxIPP8os_eventS2_ET0_T_S4_S3_
01009850  w    F .text	00000034 _ZNSsC1IPKcEET_S2_RKSaIcE
01000f1c  w    F .text	00000058 _ZN18QueuePendExceptionD1Ev
010135c0 g     F .text	0000000c _cleanup_r
01017c50 g     F .text	000000f8 __floatsidf
01024478 g     F .text	00000078 alt_io_redirect
01017bc8 g     F .text	00000088 __ltdf2
01004dcc g     F .text	000000ac _ZN11WifiHandler7httpGetEPc
010262b4  w    O .rodata	00000014 _ZTVSt11range_error
01007884 g     F .text	00000104 _ZNSt13runtime_errorD2Ev
010065c4 g     F .text	00000190 _ZSt21__throw_runtime_errorPKc
01025b0c g       *ABS*	00000000 __DTOR_END__
0100834c  w    F .text	00000050 _ZNKSs5rfindEPKcm
010029a0  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv
010269d4  w    O .rodata	00000010 _ZTIPv
0100c6b0 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
01007498 g     F .text	000000b0 _ZNSt11logic_errorC2ERKSs
01026354  w    O .rodata	00000014 _ZTVSt16invalid_argument
010083b8  w    F .text	00000010 _ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_
01023660 g     F .text	00000074 alt_up_rs232_read_data
0100f07c g     F .text	00000014 puts
01028e4c  w    O .rwdata	00000008 _ZTIb
010266e8  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
01026798  w    O .rodata	0000000c _ZTIN10__cxxabiv117__pbase_type_infoE
0100286c  w    F .text	0000003c _ZSt8_DestroyIPcEvT_S1_
0100b2dc  w    F .text	00000150 _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_
01007ca8  w    F .text	00000004 _ZNSaIcED2Ev
01019704 g     F .text	00000130 OSEventNameGet
01028f94 g     O .rwdata	00000002 OSFlagMax
010004a0  w    F .text	00000040 _ZN16ADCOpenExceptionC1Ev
01026218  w    O .rodata	00000014 _ZTV18SemCreateException
01004240 g     F .text	0000003c _ZN11WifiHandler14tcpReceiveTestEv
010073b8 g     F .text	00000030 _ZNSt11range_errorC2ERKSs
01026884  w    O .rodata	00000010 _ZTIPKl
01022318 g     F .text	0000011c alt_epcs_flash_write_block
01014778 g     F .text	000000b0 __ratio
0101a0fc g     F .text	00000100 OSIntExit
01009dec  w    F .text	00000004 _ZNSsaSERKSs
010262c8  w    O .rodata	0000000c _ZTISt12out_of_range
01008034  w    F .text	00000038 _ZNKSs15_M_check_lengthEmmPKc
01028fce g     O .rwdata	00000002 OSTCBSize
01008c0c  w    F .text	000000c0 _ZNSs12_S_constructEmcRKSaIcE
01007ca4  w    F .text	00000004 _ZNSaIcEC1Ev
0100bd4c g     F .text	00000034 _ZN10__cxxabiv119__pointer_type_infoD0Ev
01029075 g     O .bss	00000001 OSPrioCur
01022c88 g     F .text	000002c0 altera_avalon_jtag_uart_read
0100e4a0 g     F .text	00000014 malloc
0100efa8 g     F .text	00000034 _printf_r
010027c0  w    F .text	00000028 _ZNKSt6vectorIP8os_eventSaIS1_EE8max_sizeEv
02004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
010180f0 g     F .text	00000008 __udivsi3
01018b08 g     F .text	000000c4 isatty
0100f100 g     F .text	000000cc _raise_r
01028fb4 g     O .rwdata	00000002 OSStkWidth
01028ecc  w    O .rwdata	00000003 _ZTSPt
01026e5c g     O .rodata	000000c8 __mprec_tens
0100a7f0  w    F .text	0000009c _ZNSs15_M_replace_safeEmmPKcm
01028fa8 g     O .rwdata	00000002 OSPtrSize
01005f84 g     F .text	00000190 _ZSt22__throw_overflow_errorPKc
01007578 g     F .text	00000030 _ZNSt12out_of_rangeC2ERKSs
0100c8e0 g     F .text	00000034 _ZN10__cxxabiv123__fundamental_type_infoD0Ev
010141c4 g     F .text	00000008 __locale_charset
01028f88 g     O .rwdata	00000002 OSEventTblSize
01009df0  w    F .text	00000128 _ZNSs7reserveEm
01008e3c  w    F .text	000000c8 _ZNKSs7compareEmmPKc
01024b5c g       .text	00000000 OSCtxSw
01007d84  w    F .text	0000000c _ZNKSs4sizeEv
01029030 g     O .bss	00000004 __malloc_top_pad
0100a5b8  w    F .text	00000238 _ZNSs9_M_mutateEmmm
01005348  w    F .text	00000040 _ZN18SemCreateExceptionC1Ev
01025d98  w    O .rodata	00000010 _ZTIP20QueueCreateException
0100b6c0  w    F .text	000002e0 _ZNSs7replaceEmmPKcm
0100843c  w    F .text	00000058 _ZNKSs16find_last_not_ofEcm
01029078 g     O .bss	00000004 OSTCBList
0100f3d8 g     F .text	00000004 _getpid_r
010053e0  w    F .text	00000058 _ZN18SemCreateExceptionD1Ev
01001024 g     F .text	0000025c _ZN12MotorHandler4testEv
0102904c g     O .bss	00000004 alt_fd_list_lock
0100ba10  w    F .text	00000010 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcm
01003584  w    F .text	00000084 _ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_
01028f4c g     O .rwdata	00000004 __mb_cur_max
0100a18c  w    F .text	00000040 _ZNSs6appendEPKc
010141cc g     F .text	0000000c _localeconv_r
0100bdd4 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
01008494  w    F .text	00000064 _ZNKSs17find_first_not_ofEcm
0100280c  w    F .text	00000038 _ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEppEv
01015100 g     F .text	0000003c __i2b
01013ba8 g     F .text	0000049c __sfvwrite_r
0100c6d0 g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
01028e68  w    O .rwdata	00000004 _ZTSPKd
0100f254 g     F .text	000000b4 __sigtramp_r
01007d04  w    F .text	00000008 _ZNKSs9_M_ibeginEv
01007218 g     F .text	000000b0 _ZNSt13runtime_errorC2ERKSs
01037c70 g     O .bss	00000c30 OSMemTbl
0102907c g     O .bss	00000001 OSTickStepState
01002d74  w    F .text	00000038 _ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcm
01025c38  w    O .rodata	00000014 _ZTSP16ADCOpenException
0100494c g     F .text	000000e8 _ZN11WifiHandler6statusEv
0100f090 g     F .text	00000070 _sbrk_r
010032ec  w    F .text	00000044 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_cET0_T_S8_S7_SaIT1_E
01026aa8  w    O .rodata	00000020 _ZTVSt9type_info
0102633c  w    O .rodata	00000015 _ZTSSt16invalid_argument
01005af4 g     F .text	00000034 _ZSt17__throw_bad_allocv
01028fac g     O .rwdata	00000002 OSQMax
01003094  w    F .text	00000050 _ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_
010388a0 g     O .bss	00000800 OSTaskStatStk
0101d614 g     F .text	0000010c OSMemNameGet
01025fe4  w    O .rodata	00000010 _ZTS13NetworkSender
0100c890 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD1Ev
0102f0c8 g     O .bss	00002000 task4_stk
01007cd4  w    F .text	00000010 _ZNSt11char_traitsIcE2eqERKcS2_
01028f8c g     O .rwdata	00000002 OSFlagEn
01016144 g     F .text	00000078 _read_r
0100bbb0 g     F .text	00000010 _ZNKSt9exception4whatEv
01008814  w    F .text	00000068 _ZNKSs4findEcm
01007cb0  w    F .text	00000004 _ZNSaIwEC2Ev
01028fd2 g     O .rwdata	00000002 OSTimeTickHookEn
01028e98  w    O .rwdata	00000004 _ZTSPKm
0101d248 g     F .text	000000ac OS_FlagUnlink
0101e6cc g     F .text	00000180 OSQPost
01027a40 g     O .rwdata	0000000c __lc_ctype
01028f64 g     O .rwdata	00000004 alt_max_fd
010235c8 g     F .text	00000050 alt_up_rs232_check_parity
01008aa4  w    F .text	00000050 _ZNKSs16find_last_not_ofEPKcm
0101b0d8 g     F .text	0000006c OS_MemCopy
01025b7c  w    O .rodata	00000010 _ZTIP18QueuePostException
01000520  w    F .text	00000058 _ZN14ARCapExceptionD2Ev
01025c64  w    O .rodata	00000013 _ZTS16ADCOpenException
0101b144 g     F .text	000000d4 OS_Sched
010185b8 g     F .text	00000138 __unpack_d
010089d8  w    F .text	00000050 _ZNKSs4findEPKcm
01015ec4 g     F .text	00000110 _fclose_r
01008b44  w    F .text	00000050 _ZNKSs12find_last_ofEPKcm
0101d510 g     F .text	00000104 OSMemGet
010082a4  w    F .text	000000a8 _ZNKSs5rfindEPKcmm
01020a78 g     F .text	000001c4 OSTaskNameSet
01026618  w    O .rodata	0000000c _ZTISt9bad_alloc
01007cf8  w    F .text	0000000c _ZNKSs6_M_repEv
01013440 g     F .text	00000034 fflush
01026814  w    O .rodata	00000010 _ZTIPf
01029034 g     O .bss	00000004 __malloc_max_sbrked_mem
01029080 g     O .bss	00000004 OSCtxSwCtr
01024fb4 g     F .text	0000001c OSTimeTickHook
010244f0 g     F .text	000001c0 alt_irq_register
0100ad50  w    F .text	00000050 _ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE
01028f96 g     O .rwdata	00000002 OSFlagNameSize
0100b10c  w    F .text	00000044 _ZNSsixEm
01009c78  w    F .text	00000174 _ZNSs6assignERKSs
01026640  w    O .rodata	00000024 _ZTVN10__cxxabiv119__pointer_type_infoE
0101abb4 g     F .text	00000104 OS_EventTaskRemoveMulti
01017318 g     F .text	00000074 __adddf3
01000e84  w    F .text	00000040 _ZN18QueuePendExceptionC1Ev
01026a48  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0101a9a8 g     F .text	00000154 OS_EventTaskWaitMulti
01022214 g     F .text	00000070 alt_epcs_flash_erase_block
0100a440  w    F .text	000000bc _ZNSsD1Ev
01014658 g     F .text	00000120 __b2d
01028fae g     O .rwdata	00000002 OSQSize
0100dd80 g     F .text	00000010 _ZNSt8bad_castD1Ev
01016828 g     F .text	00000660 __umoddi3
01018dcc g     F .text	000000f4 lseek
0100b150  w    F .text	0000003c _ZNSs3endEv
0101f2a8 g     F .text	0000027c OSSemPend
0100c730 g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
010263e8  w    O .rodata	00000014 _ZTVSt11logic_error
0100d810 g     F .text	0000000c _ZdlPv
01006b84  w    F .text	00000034 _ZNSt12length_errorD0Ev
01028f48 g     O .rwdata	00000004 _global_impure_ptr
010050ec g     F .text	0000003c _Z27wifi_handler_tcp_start_taskPv
010000c8 g     F .text	0000008c _ZN16InfraredReceiver4postEPKc
0100bda0 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
01023eb4 g     F .text	00000058 epcs_exit_4_bytes_mode
010154a8 g     F .text	000005f4 _realloc_r
01028f98 g     O .rwdata	00000002 OSLowestPrio
0103adb4 g       *ABS*	00000000 __bss_end
01028e84  w    O .rwdata	00000003 _ZTSPy
01028ebc  w    O .rwdata	00000004 _ZTSPKi
01025024 g     F .text	00000020 OSTCBInitHook
01028fde g     O .rwdata	00000002 OSTmrCfgTicksPerSec
010269b4  w    O .rodata	00000010 _ZTIPb
01024a2c g     F .text	00000110 alt_tick
0100df2c g     F .text	00000010 _Unwind_SjLj_Register
010161bc g     F .text	0000066c __udivdi3
01002dfc  w    F .text	0000005c _ZNSt12_Vector_baseIcSaIcEED2Ev
01026284  w    O .rodata	00000014 _ZTVSt14overflow_error
010068e4 g     F .text	00000190 _ZSt20__throw_length_errorPKc
01028f80 g     O .rwdata	00000002 OSEventEn
01026f24 g     O .rodata	00000028 __mprec_bigtens
01015388 g     F .text	00000120 __s2b
01028fda g     O .rwdata	00000002 OSTmrCfgNameSize
0100e474 g     F .text	00000018 abort
01017e20 g     F .text	00000194 __floatunsidf
01007f78  w    F .text	000000bc _ZNSs4_Rep10_M_refcopyEv
01014578 g     F .text	00000060 __mcmp
01002cac  w    F .text	00000028 _ZNK9__gnu_cxx13new_allocatorIP8os_eventE8max_sizeEv
01000268 g     F .text	00000090 _ZN16InfraredReceiverC2Ev
01028dec  w    O .rwdata	00000008 _ZTIy
01028f40 g     O .rwdata	00000004 __ctype_ptr
01003f74 g     F .text	00000040 _ZN13NetworkSender5parseEPc
0100d654 g     F .text	000000a4 __cxa_end_catch
010135a8 g     F .text	00000018 __fp_lock_all
0100bc34 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
0100220c  w    F .text	00000024 _ZN9__gnu_cxx13new_allocatorIP8os_eventEC2ERKS3_
01026804  w    O .rodata	00000010 _ZTIPKf
0101d054 g     F .text	000000e4 OS_FlagInit
01024994 g     F .text	00000098 alt_alarm_stop
01007dd8  w    F .text	0000000c _ZNKSs4_Rep12_M_is_sharedEv
0100f9ac g     F .text	00000024 strtol
01028fbc g     O .rwdata	00000002 OSTaskIdleStkSize
010267f4  w    O .rodata	00000010 _ZTIPd
01007ce4  w    F .text	00000008 _ZNKSs7_M_dataEv
01009424  w    F .text	00000060 _ZNSsC2ERKSsmmRKSaIcE
01025c00  w    O .rodata	00000014 _ZTV18QueuePostException
01025df0  w    O .rodata	00000014 _ZTV20QueueCreateException
010290bc g     O .bss	00000004 alt_irq_active
0101ee34 g     F .text	000000c0 OSSemAccept
0100f724 g     F .text	00000038 strnlen
0100d5ec g     F .text	00000018 _ZSt9terminatev
0101d840 g     F .text	000000f0 OSMemPut
01028edc  w    O .rwdata	00000002 _ZTSs
0100b2d4  w    F .text	00000008 _ZNSs6resizeEm
01007cac  w    F .text	00000004 _ZNSaIcEC2ERKS_
0101d2f4 g     F .text	0000021c OSMemCreate
01006aa8  w    F .text	00000010 _ZNSt15underflow_errorD1Ev
01029084 g     O .bss	00000004 OSIdleCtrMax
01000bd0 g     F .text	00000028 _ZN8Listener8listenerEv
01006114 g     F .text	00000190 _ZSt24__throw_invalid_argumentPKc
01026750  w    O .rodata	00000024 _ZTVN10__cxxabiv117__pbase_type_infoE
020040ec g     F .exceptions	000000d4 alt_irq_handler
0100a984  w    F .text	00000040 _ZNSs6assignEPKc
010050a4 g     F .text	00000048 _Z26wifi_handler_tcp_test_taskPv
01027a4c g     O .rwdata	00000028 alt_dev_null
01003724  w    F .text	00000060 _ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv
01009100  w    F .text	00000104 _ZNSs4_Rep7_M_grabERKSaIcES2_
0100afd0  w    F .text	00000050 _ZNSs6insertEmRKSsmm
01028fd0 g     O .rwdata	00000002 OSTicksPerSec
01005388  w    F .text	00000058 _ZN18SemCreateExceptionD0Ev
01006c50 g     F .text	00000008 _ZNKSt8ios_base7failure4whatEv
010036e0  w    F .text	00000044 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E
01007b98 g     F .text	0000010c _ZNSt11logic_errorD0Ev
01028ec0  w    O .rwdata	00000003 _ZTSPi
01028e78  w    O .rwdata	00000003 _ZTSPf
01026984  w    O .rodata	00000010 _ZTIPKw
01004128  w    F .text	00000058 _ZN13NetworkSenderD0Ev
01028e6c  w    O .rwdata	00000003 _ZTSPd
01002cfc  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEEEvT_S9_
01008b94  w    F .text	00000050 _ZNKSs13find_first_ofEPKcm
01002dac  w    F .text	00000050 _ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm
01025c14  w    O .rodata	00000014 _ZTV14ARCapException
01024b5c g       .text	00000000 OSIntCtxSw
01026720  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
0100a20c  w    F .text	000000e8 _ZNSs6appendERKSsmm
01014444 g     F .text	00000070 __hi0bits
01028df4  w    O .rwdata	00000008 _ZTIx
01028f08  w    O .rwdata	00000003 _ZTSPw
01028dc8  w    O .rwdata	00000008 _ZTISt9exception
010023b0  w    F .text	00000038 _ZNSt6vectorIcSaIcEE5beginEv
01017d48 g     F .text	000000d8 __fixdfsi
01008be4  w    F .text	00000010 _ZNKSs4rendEv
0100828c  w    F .text	0000000c _ZNKSs4findERKSsm
01007000 g     F .text	0000010c _ZNSt8ios_base7failureD0Ev
01025ca4  w    O .rodata	00000011 _ZTS14InfraredSender
01003010  w    F .text	00000084 _ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES8_EET0_T_SA_S9_
01004790 g     F .text	00000040 _ZN11WifiHandler10configSendEPc
01028ea0  w    O .rwdata	00000002 _ZTSm
01004004 g     F .text	00000050 _ZN13NetworkSenderC2EP11WifiHandler
01007e14  w    F .text	0000014c _ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_
0100b020  w    F .text	0000000c _ZNSs6insertEmRKSs
01029088 g     O .bss	00000004 OSTCBFreeList
0101f524 g     F .text	0000017c OSSemPendAbort
01000e1c  w    F .text	00000028 _ZNK18QueuePendException4whatEv
010268d4  w    O .rodata	00000010 _ZTIPi
01004738 g     F .text	00000058 _ZN11WifiHandler12waitForReadyEv
0100dbb8 g     F .text	00000010 _ZNSt9type_infoD1Ev
01028f5c g     O .rwdata	00000008 alt_dev_list
0102901c g     O .bss	00000004 __new_handler
01026374  w    O .rodata	00000011 _ZTSSt12domain_error
010192a0 g     F .text	00000124 write
0100acc8  w    F .text	00000038 _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEmc
010097e8  w    F .text	00000034 _ZNSsC1EPKcmRKSaIcE
01028fd4 g     O .rwdata	00000002 OSVersionNbr
0100b1c4  w    F .text	0000004c _ZNSs4rendEv
0100dba8 g     F .text	00000010 _ZNSt9type_infoD0Ev
01007780 g     F .text	00000104 _ZNSt13runtime_errorD1Ev
010023e8  w    F .text	0000003c _ZNSt6vectorIcSaIcEE3endEv
01000b28  w    F .text	00000050 _ZN8ListenerD1Ev
010189b0 g     F .text	000000d8 fstat
01023764 g     F .text	00000094 alt_up_rs232_write_fd
01028de4  w    O .rwdata	00000008 _ZTIf
01007f70  w    F .text	00000008 _ZNSs12_Alloc_hiderC2EPcRKSaIcE
010261c0  w    O .rodata	00000010 _ZTIP18SemCreateException
01001e48 g     F .text	00000088 _ZN15NetworkReceiverC1EP11WifiHandler
01018c2c g     F .text	00000140 kill
010093c4  w    F .text	00000060 _ZNSsC1ERKSsmmRKSaIcE
01007698 g     F .text	00000030 _ZNSt12domain_errorC2ERKSs
01028ea8  w    O .rwdata	00000003 _ZTSPl
01007668 g     F .text	00000030 _ZNSt12domain_errorC1ERKSs
01025f80  w    O .rodata	00000014 _ZTV17UARTOpenException
01006c40  w    F .text	00000010 _ZNSt12domain_errorD1Ev
01009390  w    F .text	00000034 _ZNSsC2IPcEET_S1_RKSaIcE
01028f7c g     O .rwdata	00000004 OSEndiannessTest
010006d8  w    F .text	00000058 _ZN14ARCapExceptionD0Ev
01026914  w    O .rodata	00000010 _ZTIPs
01015268 g     F .text	00000120 __pow5mult
0100b574  w    F .text	0000014c _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_
01025fd0  w    O .rodata	00000014 _ZTV13NetworkSender
01029040 g     O .bss	00000004 __nlocale_changed
01006a74  w    F .text	00000034 _ZNSt15underflow_errorD0Ev
010180f8 g     F .text	00000008 __umodsi3
0100dba0 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
01025efc  w    O .rodata	00000014 _ZTV12MotorHandler
0100ba20  w    F .text	00000064 _ZNSs7replaceEmmPKc
01007cd0  w    F .text	00000004 _ZNSaIcED1Ev
01023d70 g     F .text	0000006c epcs_read_electronic_signature
01028e8c  w    O .rwdata	00000004 _ZTSPKx
01028f8e g     O .rwdata	00000002 OSFlagGrpSize
01001f58 g     F .text	00000050 _ZN15NetworkReceiver11addListenerEcP8os_event
0103adb4 g       *ABS*	00000000 end
0100bbac g     F .text	00000004 _ZN9__gnu_cxx12__atomic_addEPVii
01025dd8  w    O .rodata	00000017 _ZTS20QueueCreateException
010072f8 g     F .text	00000030 _ZNSt15underflow_errorC2ERKSs
0100ba84  w    F .text	0000005c _ZNSs7replaceEmmRKSsmm
01002c60  w    F .text	0000004c _ZNKSt6vectorIP8os_eventSaIS1_EE4sizeEv
01008240  w    F .text	00000030 _ZNKSs2atEm
01028f00  w    O .rwdata	00000002 _ZTSc
0100a9c4  w    F .text	00000050 _ZNSs6assignERKSsmm
0100218c  w    F .text	00000030 _ZNSaIP8os_eventEC1Ev
0100969c  w    F .text	00000034 _ZNSsC1IPcEET_S1_RKSaIcE
01007d0c  w    F .text	00000010 _ZNKSs7_M_iendEv
010261d0  w    O .rodata	00000016 _ZTSP18SemCreateException
0100e0ec g     F .text	00000018 _Unwind_DeleteException
01028eb0  w    O .rwdata	00000004 _ZTSPKj
01022614 g     F .text	00000130 altera_avalon_jtag_uart_init
0101b3bc g     F .text	000000c8 OS_TaskStat
01007d6c  w    F .text	00000008 _ZNKSs5beginEv
0100bde4 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
01025b08 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0100ab20  w    F .text	00000018 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_mc
010370c8  w    O .bss	00000010 _ZNSs4_Rep20_S_empty_rep_storageE
01026874  w    O .rodata	00000010 _ZTIPm
01023298 g     F .text	00000088 alt_avalon_timer_sc_init
0100710c g     F .text	00000008 _ZNKSt13runtime_error4whatEv
01018224 g     F .text	00000080 __clzsi2
0100f50c g     F .text	000000b4 _snprintf_r
01026410  w    O .rodata	0000000c _ZTISt13runtime_error
0100c5f0 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
01022f48 g     F .text	000002dc altera_avalon_jtag_uart_write
01000d4c g     F .text	000000a8 _ZN8ListenerC2Ev
010134cc g     F .text	00000004 __sfp_lock_acquire
010265c4  w    O .rodata	00000012 _ZTSSt13bad_exception
0100ebf4 g     F .text	000000e4 memchr
0101b084 g     F .text	00000054 OS_MemClr
01029000 g     O .bss	00000004 infraredIn
0100fa28 g     F .text	00001ec4 ___vfprintf_internal_r
0102631c  w    O .rodata	00000014 _ZTVSt12length_error
01024c2c g     F .text	00000310 OSTaskStkInit
01028ee8  w    O .rwdata	00000002 _ZTSh
01004cf8 g     F .text	0000009c _ZN11WifiHandler11tcpSendTestEv
01013894 g     F .text	00000314 _free_r
0100b9bc  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_
01008d44  w    F .text	00000034 _ZNSsC1ERKSaIcE
0101a704 g     F .text	00000194 OS_EventTaskRdy
01025624 g     F .text	000001b0 __call_exitprocs
01007df0  w    F .text	00000008 _ZNSs4_Rep15_M_set_sharableEv
0102908c g     O .bss	00000001 OSCPUUsage
01003658  w    F .text	00000044 _ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type
01028dc0  w    O .rwdata	00000004 _ZNSs4_Rep11_S_max_sizeE
0100148c g     F .text	00000040 _ZN12MotorHandler12getSpeedFromEPc
01001de0 g     F .text	00000068 _ZN15NetworkReceiver6updateEv
01029044 g     O .bss	00000004 __mlocale_changed
01006bb8  w    F .text	00000010 _ZNSt12length_errorD1Ev
010025d0  w    F .text	00000038 _ZNSt12_Vector_baseIP8os_eventSaIS1_EEC2ERKS2_
01028f3c g     O .rwdata	00000004 __malloc_sbrk_base
01000000 g     F .text	00000038 _start
0102642c  w    O .rodata	0000000c _ZTISt11logic_error
010002f8 g     F .text	000000e8 _Z29infrared_receiver_update_taskPv
01007da8  w    F .text	00000008 _ZNKSs4dataEv
010290c0 g     O .bss	00000004 _alt_tick_rate
01007cc8  w    F .text	00000004 _ZNSaIwED2Ev
0101e230 g     F .text	00000320 OSQPend
01001fa8 g     F .text	000000e8 _Z28network_receiver_update_taskPv
01026ac8  w    O .rodata	0000000d _ZTSSt9type_info
0100c8a0 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD2Ev
01000154 g     F .text	00000044 _ZN16InfraredReceiver5checkEj
01007d9c  w    F .text	0000000c _ZNKSs8capacityEv
01007cec  w    F .text	0000000c _ZNSs7_M_dataEPc
0102143c g     F .text	0000014c OSTimeDly
010072c8 g     F .text	00000030 _ZNSt15underflow_errorC1ERKSs
0100bca4 g     F .text	00000020 __cxa_pure_virtual
01014d60 g     F .text	0000014c __lshift
01007d1c  w    F .text	00000018 _ZNKSs8_M_limitEmm
01025044 g     F .text	00000238 alt_avalon_spi_command
010265f4  w    O .rodata	00000014 _ZTVSt9bad_alloc
010290c4 g     O .bss	00000004 _alt_nticks
0100f3bc g     F .text	0000001c signal
01002a64  w    F .text	00000024 _ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv
01018fe8 g     F .text	00000124 read
0100aa54  w    F .text	000000cc _ZNSs14_M_replace_auxEmmmc
01021a24 g     F .text	0000008c alt_sys_init
01028f14  w    O .rwdata	00000003 _ZTSPb
01009b7c  w    F .text	000000fc _ZNSsC2ERKSs
01026934  w    O .rodata	00000010 _ZTIPh
010005d0  w    F .text	00000058 _ZN18QueuePostExceptionD1Ev
01007db0  w    F .text	00000008 _ZNKSs13get_allocatorEv
01026994  w    O .rodata	00000010 _ZTIPw
01026a3c  w    O .rodata	0000000c _ZTISt10bad_typeid
010254ec g     F .text	00000134 __register_exitproc
01026608  w    O .rodata	0000000d _ZTSSt9bad_alloc
0102908d g     O .bss	00000001 OSTaskCtr
0100f634 g     F .text	000000f0 strncmp
01003bec  w    F .text	00000300 _ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
01023588 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
010081ac  w    F .text	00000094 _ZNKSs4findEPKcmm
01004c78 g     F .text	00000080 _ZN11WifiHandler7tcpSendEPct
01028e2c  w    O .rwdata	00000008 _ZTIh
0100ad00  w    F .text	00000050 _ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_
01004e78 g     F .text	00000064 _ZN11WifiHandler9httpStartEv
01021588 g     F .text	00000190 OSTimeDlyHMSM
01026844  w    O .rodata	00000010 _ZTIPKx
01014eac g     F .text	00000254 __multiply
01022b20 g     F .text	00000074 altera_avalon_jtag_uart_close
0100def4 g     F .text	00000038 __mulsi3
0100e254 g     F .text	000000f8 _Unwind_SjLj_RaiseException
01008978  w    F .text	00000060 _ZNKSs7compareERKSs
010378d8 g     O .bss	00000028 __malloc_current_mallinfo
01002be4  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv
0100e1f8 g     F .text	0000005c _Unwind_SjLj_Resume
01028f82 g     O .rwdata	00000002 OSEventMax
0100b09c  w    F .text	00000014 _ZNSs7_M_leakEv
01025f54  w    O .rodata	00000018 _ZTI17UARTOpenException
01014a58 g     F .text	0000017c __d2b
01028e0c  w    O .rwdata	00000008 _ZTIj
0101f6a0 g     F .text	00000128 OSSemPost
01025c90  w    O .rodata	00000014 _ZTV14InfraredSender
01028ddc  w    O .rwdata	00000008 _ZTId
0100dbc8 g     F .text	00000010 _ZNSt9type_infoD2Ev
01023838 g     F .text	00000060 epcs_read_status_register
010350c8 g     O .bss	00002000 task7_stk
0101a288 g     F .text	000000e4 OSSchedUnlock
0100d9b8 g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
01006bfc  w    F .text	00000010 _ZNSt16invalid_argumentD1Ev
01000438  w    F .text	00000028 _ZNK16ADCOpenException4whatEv
01007d74  w    F .text	00000010 _ZNKSs3endEv
010268a4  w    O .rodata	00000010 _ZTIPKj
010266c0  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
01002ba0  w    F .text	00000044 _ZNKSt6vectorIP8os_eventSaIS1_EE5beginEv
0100bcc4 g     F .text	00000008 _ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv
01008098  w    F .text	0000002c _ZNSs9_M_assignEPcmc
01002ee0  w    F .text	0000007c _ZNSt6vectorIcSaIcEED1Ev
01026a0c  w    O .rodata	0000000c _ZTIN10__cxxabiv123__fundamental_type_infoE
010224cc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0102539c g     F .text	00000104 alt_get_fd
010330c8 g     O .bss	00002000 task6_stk
01002a18  w    F .text	0000004c _ZNKSt6vectorIcSaIcEE4sizeEv
01029090 g     O .bss	00000004 OSMemFreeList
01000ec4  w    F .text	00000058 _ZN18QueuePendExceptionD0Ev
0101a3dc g     F .text	000000ac OSStatInit
010037c4  w    F .text	000002f4 _ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc
01002510  w    F .text	00000038 _ZNSt12_Vector_baseIcSaIcEEC2ERKS0_
010083c8  w    F .text	00000064 _ZNKSs5rfindEcm
01007ccc  w    F .text	00000004 _ZNSaIcEC2Ev
0101cdbc g     F .text	000000d4 OSFlagQuery
010186f0 g     F .text	000000c8 __fpcmp_parts_d
01002844  w    F .text	00000028 _ZSt13__destroy_auxIPcEvT_S1_11__true_type
0102623c  w    O .rodata	00000014 _ZTSSt15underflow_error
01001a1c g     F .text	000000d4 _Z25motor_handler_update_taskPv
01028fb8 g     O .rwdata	00000002 OSTaskCreateExtEn
0100887c  w    F .text	00000010 _ZNKSs13find_first_ofEcm
01015e54 g     F .text	00000070 _close_r
01001420 g     F .text	0000006c _ZN12MotorHandler9configureEv
01025d6c  w    O .rodata	00000015 _ZTS18QueuePendException
01028e74  w    O .rwdata	00000004 _ZTSPKf
01023ddc g     F .text	00000080 epcs_read_device_id
01005320  w    F .text	00000028 _ZNK18SemCreateException4whatEv
01028eec  w    O .rwdata	00000004 _ZTSPKa
0100ecd8 g     F .text	00000074 memcmp
0101a6e8 g     F .text	0000001c OS_Dummy
0102257c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0103adb4 g       *ABS*	00000000 __alt_stack_base
010225c4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
0100bc50 g     F .text	00000034 _ZNSt9bad_allocD0Ev
0102900c g     O .bss	00000004 wifi
0100da64 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
0100c924 g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD2Ev
01025f10  w    O .rodata	0000000f _ZTS12MotorHandler
01006b30  w    F .text	00000010 _ZNSt11range_errorD1Ev
010027e8  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv
01011910 g     F .text	0000013c __swsetup_r
010262a4  w    O .rodata	00000010 _ZTSSt11range_error
010390a0 g     O .bss	000001e0 OSQTbl
0100e41c g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
01017750 g     F .text	00000258 __divdf3
01013678 g     F .text	000000f0 __sfp
010148bc g     F .text	00000058 __copybits
01026368  w    O .rodata	0000000c _ZTISt12domain_error
01026aec  w    O .rodata	0000000c _ZTSSt8bad_cast
0100db80 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0100bd90 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD2Ev
0100b9a0  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_
0100080c g     F .text	00000058 _ZN14InfraredSender4sendEv
01026264  w    O .rodata	0000000c _ZTISt14overflow_error
01025b8c  w    O .rodata	00000016 _ZTSP18QueuePostException
01027238 g     O .rwdata	00000408 __malloc_av_
010134d8 g     F .text	00000004 __sinit_lock_release
01029094 g     O .bss	00000004 OSTCBHighRdy
0101738c g     F .text	000003c4 __muldf3
010044dc g     F .text	00000040 _ZN11WifiHandler15configReadStartEv
01015bf8 g     F .text	00000060 __sread
010265b0  w    O .rodata	00000014 _ZTVSt9exception
01029098 g     O .bss	00000004 OSQFreeList
010234f4 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0102527c g     F .text	00000120 alt_find_file
0100bb04  w    F .text	00000030 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs
0100c65c g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
01029010 g     O .bss	00000004 networkOut
01000730  w    F .text	00000058 _ZN14ARCapExceptionD1Ev
0100b02c  w    F .text	00000014 _ZNSs5clearEv
01024060 g     F .text	000000b4 alt_dev_llist_insert
0101952c g     F .text	00000108 __malloc_lock
010191e4 g     F .text	000000bc sbrk
01029014 g     O .bss	00000004 networkIn
010062a4 g     F .text	00000190 _ZSt20__throw_domain_errorPKc
01025cb8  w    O .rodata	0000000c _ZTI14InfraredSender
01005c64 g     F .text	00000190 _ZSt19__throw_logic_errorPKc
010266f4  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0100d890 g     F .text	00000074 __cxa_throw
01019834 g     F .text	00000144 OSEventNameSet
01013244 g     F .text	000001fc _fflush_r
0100dfb0 g     F .text	00000010 _Unwind_SetIP
01008780  w    F .text	00000088 _ZNKSs13find_first_ofEPKcmm
01015d8c g     F .text	000000c8 _calloc_r
0102909c g     O .bss	00000001 OSRdyGrp
01028e14  w    O .rwdata	00000008 _ZTIi
01028fec g     O .rwdata	00000008 alt_flash_dev_list
0100842c  w    F .text	00000010 _ZNKSs12find_last_ofEcm
010262fc  w    O .rodata	0000000c _ZTISt12length_error
01007de4  w    F .text	0000000c _ZNSs4_Rep13_M_set_leakedEv
01001280 g     F .text	00000028 _Z23motor_handler_test_taskPv
01026824  w    O .rodata	00000010 _ZTIPKy
0100981c  w    F .text	00000034 _ZNSsC2EPKcmRKSaIcE
01006434 g     F .text	00000190 _ZSt19__throw_range_errorPKc
01007608 g     F .text	00000030 _ZNSt16invalid_argumentC1ERKSs
0100272c  w    F .text	00000058 _ZNSt6vectorIP8os_eventSaIS1_EEixEm
010020b8  w    F .text	00000038 _ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv
01029000 g       *ABS*	00000000 __bss_start
01008808  w    F .text	0000000c _ZNKSs13find_first_ofERKSsm
01008fc4  w    F .text	000000a0 _ZNKSs7compareEmmRKSs
0100eecc g     F .text	00000098 memset
01000198 g     F .text	00000040 _ZN16InfraredReceiver6updateEv
01007df8  w    F .text	00000014 _ZNSs4_Rep26_M_set_length_and_sharableEm
01007d50  w    F .text	0000000c _ZNSs12_S_empty_repEv
01005438 g     F .text	00000654 main
01001c08  w    F .text	00000058 _ZN17UARTOpenExceptionD0Ev
01028e64  w    O .rwdata	00000002 _ZTSe
010263fc  w    O .rodata	00000012 _ZTSSt13runtime_error
01029058 g     O .bss	00000004 alt_envp
01029038 g     O .bss	00000004 __malloc_max_total_mem
010026d0  w    F .text	0000005c _ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEplERKl
01026a18  w    O .rodata	00000014 _ZTVSt10bad_typeid
01022524 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01025f6c  w    O .rodata	00000014 _ZTS17UARTOpenException
01028dd4  w    O .rwdata	00000008 _ZTIe
01005b28 g     F .text	00000034 _ZSt21__throw_bad_exceptionv
0100dee4 g     F .text	00000008 __cxa_get_globals_fast
010270b4 g     O .rodata	00000100 OSUnMapTbl
01025bd4  w    O .rodata	00000018 _ZTI14ARCapException
01002698  w    F .text	00000038 _ZNSt6vectorIP8os_eventSaIS1_EE5beginEv
01028fb2 g     O .rwdata	00000002 OSSemEn
010030e4  w    F .text	00000064 _ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIcEEPT_PKS3_S6_S4_
010263b0  w    O .rodata	00000016 _ZTSNSt8ios_base7failureE
0101ca14 g     F .text	000003a8 OSFlagPost
01002148  w    F .text	00000024 _ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv
01026ad8  w    O .rodata	00000014 _ZTVSt8bad_cast
01015b0c g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01002090  w    F .text	00000028 _ZnwmPv
01028e7c  w    O .rwdata	00000002 _ZTSf
010021bc  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorIP8os_eventED2Ev
01015fd4 g     F .text	00000014 fclose
0101a898 g     F .text	00000110 OS_EventTaskWait
0102b0c8 g     O .bss	00002000 task2_stk
0100f75c g     F .text	00000250 _strtol_r
0101b484 g     F .text	000000c8 OS_TaskStatStkChk
0103ac24 g     O .bss	00000190 _atexit0
01026964  w    O .rodata	00000010 _ZTIPKc
01020750 g     F .text	00000170 OSTaskDelReq
01006b74  w    F .text	00000010 _ZNSt12out_of_rangeD1Ev
0100216c  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev
01011c90 g     F .text	000015b4 _dtoa_r
0100e4b4 g     F .text	00000740 _malloc_r
010097b4  w    F .text	00000034 _ZNSsC2IPKcEET_S2_RKSaIcE
01026864  w    O .rodata	00000010 _ZTIPKm
01000038 g     F .text	00000030 _ZN16InfraredReceiver11setListenerEP8os_event
01008d78  w    F .text	00000034 _ZNSsC2ERKSaIcE
01028f68 g     O .rwdata	00000004 alt_errno
0100b9f4  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_
01004180  w    F .text	00000058 _ZN13NetworkSenderD1Ev
0101a36c g     F .text	00000070 OSStart
01007358 g     F .text	00000030 _ZNSt14overflow_errorC2ERKSs
0102d0c8 g     O .bss	00002000 task3_stk
01006afc  w    F .text	00000034 _ZNSt11range_errorD0Ev
0100f244 g     F .text	00000010 _init_signal
010194d0 g     F .text	0000005c __env_unlock
01026744  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
01029004 g     O .bss	00000004 infraredOut
0101410c g     F .text	000000b8 _fwalk
01020c3c g     F .text	00000218 OSTaskResume
0101d930 g     F .text	000000fc OSMemQuery
01028fc4 g     O .rwdata	00000002 OSTaskStatEn
01000460  w    F .text	00000040 _ZN14ARCapExceptionC2Ev
01028f9e g     O .rwdata	00000002 OSMemMax
01008690  w    F .text	000000e4 _ZNKSs12find_last_ofEPKcmm
0101e84c g     F .text	00000188 OSQPostFront
0100bc24 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
01018030 g     F .text	00000060 __divsi3
01001bb0  w    F .text	00000058 _ZN12MotorHandlerD1Ev
01025c78  w    O .rodata	00000014 _ZTV16ADCOpenException
0102909d g     O .bss	00000003 OSRdyTbl
01028f78 g     O .rwdata	00000002 OSDebugEn
01026f80 g     O .rodata	00000014 __thenan_df
010267c4  w    O .rodata	00000010 _ZTIPKe
01013768 g     F .text	0000012c _malloc_trim_r
01025b0c g       *ABS*	00000000 __CTOR_END__
01000b78  w    F .text	00000058 _ZN14InfraredSenderD1Ev
01028f90 g     O .rwdata	00000002 OSFlagNodeSize
0100a2f4  w    F .text	000000bc _ZNSs6appendERKSs
01028fd8 g     O .rwdata	00000002 OSTmrCfgMax
01009f18  w    F .text	00000088 _ZNSs9push_backEc
01021f04 g     F .text	00000280 alt_epcs_flash_write
01015c58 g     F .text	000000bc strcmp
01026904  w    O .rodata	00000010 _ZTIPKs
0100928c  w    F .text	00000020 _ZNSs13_S_copy_charsEPcPKcS1_
0101dc54 g     F .text	00000214 OSQCreate
01026974  w    O .rodata	00000010 _ZTIPc
010208c0 g     F .text	000001b8 OSTaskNameGet
0101e9d4 g     F .text	00000234 OSQPostOpt
0101a488 g     F .text	00000240 OSTimeTick
01002b5c  w    F .text	00000044 _ZNKSt6vectorIP8os_eventSaIS1_EE3endEv
01028fc0 g     O .rwdata	00000002 OSTaskMax
01006efc g     F .text	00000104 _ZNSt8ios_base7failureD2Ev
01025b0c g       *ABS*	00000000 __DTOR_LIST__
01006d5c g     F .text	000000d0 _ZNSt8ios_base7failureC1ERKSs
0101eef4 g     F .text	00000114 OSSemCreate
01028fe4 g     O .rwdata	00000002 OSTmrWheelSize
01001af0  w    F .text	00000028 _ZNK17UARTOpenException4whatEv
01025d2c  w    O .rodata	00000010 _ZTIP18QueuePendException
01003bac  w    F .text	00000040 _ZNSt12_Vector_baseIP8os_eventSaIS1_EE11_M_allocateEm
010237f8 g     F .text	00000040 alt_up_rs232_open_dev
01009884  w    F .text	00000060 _ZNSsC1EPKcRKSaIcE
01000fcc  w    F .text	00000058 _ZN20QueueCreateExceptionD1Ev
01004054 g     F .text	000000d4 _Z26network_sender_update_taskPv
01017a30 g     F .text	00000088 __nedf2
0100dd90 g     F .text	00000010 _ZNSt8bad_castD2Ev
01028fba g     O .rwdata	00000002 OSTaskDelEn
01028f0c  w    O .rwdata	00000002 _ZTSw
01028e60  w    O .rwdata	00000003 _ZTSPe
01007548 g     F .text	00000030 _ZNSt12out_of_rangeC1ERKSs
0101f7c8 g     F .text	00000130 OSSemQuery
0101de68 g     F .text	00000300 OSQDel
0101e550 g     F .text	0000017c OSQPendAbort
010219f0 g     F .text	00000034 alt_irq_init
01028efc  w    O .rwdata	00000003 _ZTSPc
01003404  w    F .text	00000084 _ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_
010092cc  w    F .text	000000c4 _ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag
0101916c g     F .text	00000078 alt_release_fd
01026200  w    O .rodata	00000015 _ZTS18SemCreateException
010024c0  w    F .text	00000050 _ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_
0100da30 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0100c7ac g     F .text	000000b0 _ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj
0100af80  w    F .text	00000050 _ZNSs6insertEmPKc
01028dac g     O .rwdata	00000004 _ZN16InfraredReceiver3HITE
0100095c g     F .text	000000d4 _Z27infrared_sender_update_taskPv
01026f94 g     O .rodata	00000100 __clz_tab
01007a94 g     F .text	00000104 _ZNSt11logic_errorD2Ev
0100b040  w    F .text	0000005c _ZNSs12_M_leak_hardEv
01029048 g     O .bss	00000004 _PathLocale
0102641c  w    O .rodata	00000010 _ZTSSt11logic_error
01025da8  w    O .rodata	00000018 _ZTSP20QueueCreateException
01007114 g     F .text	00000104 _ZNSt11logic_errorD1Ev
010254a0 g     F .text	00000014 atexit
01026298  w    O .rodata	0000000c _ZTISt11range_error
01007388 g     F .text	00000030 _ZNSt11range_errorC1ERKSs
01015d14 g     F .text	00000078 _write_r
010047d0 g     F .text	00000074 _ZN11WifiHandler18setDestinationPortE13WifiSetupType
01025f3c  w    O .rodata	00000015 _ZTSP17UARTOpenException
010021dc  w    F .text	00000030 _ZNSaIP8os_eventED1Ev
0101a1fc g     F .text	0000008c OSSchedLock
0101426c g     F .text	0000001c setlocale
01006b40  w    F .text	00000034 _ZNSt12out_of_rangeD0Ev
01005044 g     F .text	00000060 _ZN11WifiHandler8tcpStartEv
0100dfe4 g     F .text	00000008 _Unwind_GetTextRelBase
01026694  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0100dea0 g     F .text	00000044 __cxa_call_terminate
0101bcec g     F .text	0000013c OSFlagCreate
010033bc  w    F .text	00000048 _ZSt19__copy_backward_auxIPP8os_eventS2_ET0_T_S4_S3_
01028dfc  w    O .rwdata	00000008 _ZTIm
01004edc g     F .text	00000060 _Z27wifi_handler_http_test_taskPv
01028f44 g     O .rwdata	00000004 _impure_ptr
01029050 g     O .bss	00000004 alt_argc
010267a4  w    O .rodata	00000020 _ZTVN10__cxxabiv123__fundamental_type_infoE
0100295c  w    F .text	00000044 _ZNKSt6vectorIcSaIcEE5beginEv
010241d8 g     F .text	00000064 _do_dtors
01028f8a g     O .rwdata	00000002 OSEventMultiEn
01002230  w    F .text	00000038 _ZNSaIP8os_eventEC1ERKS1_
01028db0  w    O .rwdata	00000008 _ZTI8Listener
01000910 g     F .text	0000004c _ZN14InfraredSenderC2Ev
01025cc4  w    O .rodata	0000000a _ZTS8Listener
01005224 g     F .text	000000fc _ZN11WifiHandlerC2Ev
01002e58  w    F .text	00000038 _ZN9__gnu_cxx13new_allocatorIP8os_eventE10deallocateEPS2_m
0100b42c  w    F .text	00000114 _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_
0101be28 g     F .text	000002a8 OSFlagDel
010290a0 g     O .bss	00000004 OSEventFreeList
02004020 g       .exceptions	00000000 alt_irq_entry
0100806c  w    F .text	0000002c _ZNKSs8_M_checkEmPKc
01008af4  w    F .text	00000050 _ZNKSs17find_first_not_ofEPKcm
01003b40  w    F .text	0000006c _ZN9__gnu_cxx13new_allocatorIP8os_eventE8allocateEmPKv
01001898 g     F .text	00000184 _ZN12MotorHandlerC2Ev
01008270  w    F .text	00000010 _ZNKSs5emptyEv
010145d8 g     F .text	00000080 __ulp
01015a9c g     F .text	00000040 __isinfd
010022a0  w    F .text	00000024 _ZNSt12_Vector_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv
0100dfd4 g     F .text	00000008 _Unwind_FindEnclosingFunction
0101c368 g     F .text	00000644 OSFlagPend
01028fd6 g     O .rwdata	00000002 OSTmrEn
01007f60  w    F .text	00000010 _ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_
01013590 g     F .text	00000018 __fp_unlock_all
01026944  w    O .rodata	00000010 _ZTIPKa
01007cb8  w    F .text	00000004 _ZNSaIwEC1ERKS_
01000ca4 g     F .text	000000a8 _ZN8ListenerC1Ev
0100ada0  w    F .text	0000006c _ZNSs5eraseEmm
01028f54 g     O .rwdata	00000008 alt_fs_list
0100839c  w    F .text	0000000c _ZNKSs5rfindERKSsm
01004b3c g     F .text	00000034 _ZN11WifiHandler6unlockEv
010095b0  w    F .text	000000ec _ZNSsC2ERKSsmm
0100896c  w    F .text	0000000c _ZNKSs16find_last_not_ofERKSsm
0101b288 g     F .text	00000080 OS_StrCopy
010268b4  w    O .rodata	00000010 _ZTIPj
010234a0 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
01004844 g     F .text	00000108 _ZN11WifiHandler5setupE13WifiSetupType
0100dfc0 g     F .text	0000000c _Unwind_GetLanguageSpecificData
01025cd0  w    O .rodata	00000014 _ZTV8Listener
01006bc8  w    F .text	00000034 _ZNSt16invalid_argumentD0Ev
01001334 g     F .text	00000080 _ZN12MotorHandler4moveEccPKc
01023618 g     F .text	00000048 alt_up_rs232_write_data
0100d6f8 g     F .text	00000118 __cxa_begin_catch
01028ee0  w    O .rwdata	00000004 _ZTSPKh
01028fa0 g     O .rwdata	00000002 OSMemNameSize
0100c6c0 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0100d604 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
010269c4  w    O .rodata	00000010 _ZTIPKv
01028e5c  w    O .rwdata	00000004 _ZTSPKe
01024fec g     F .text	0000001c OSInitHookEnd
01004558 g     F .text	000000c8 _ZN11WifiHandler5writeEPc
01026308  w    O .rodata	00000011 _ZTSSt12length_error
01025d3c  w    O .rodata	00000016 _ZTSP18QueuePendException
01028fcc g     O .rwdata	00000002 OSTCBPrioTblMax
010141d8 g     F .text	00000010 localeconv
01028f24  w    O .rwdata	00000002 _ZTSv
01029008 g     O .bss	00000004 motor
01023a00 g     F .text	0000014c epcs_read_buffer
01001714 g     F .text	00000184 _ZN12MotorHandlerC1Ev
01005ac0 g     F .text	00000034 _ZSt16__throw_bad_castv
01028fc8 g     O .rwdata	00000002 OSTaskStatStkChkEn
0100bbf0 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
01002448  w    F .text	00000050 _ZN9__gnu_cxxneIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_
01021ae8 g     F .text	00000054 alt_epcs_flash_init
01028f28 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
010004e0  w    F .text	00000040 _ZN18QueuePostExceptionC1Ev
01028ed0  w    O .rwdata	00000002 _ZTSt
0100bccc g     F .text	00000080 _ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj
010268f4  w    O .rodata	00000010 _ZTIPt
01026250  w    O .rodata	00000014 _ZTVSt15underflow_error
01004b00 g     F .text	0000003c _ZN11WifiHandler8testUartEv
0100c134 g     F .text	000004bc _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
01028f9c g     O .rwdata	00000002 OSMemEn
0100dc18 g     F .text	00000134 __cxa_allocate_exception
010267e4  w    O .rodata	00000010 _ZTIPKd
01028fa6 g     O .rwdata	00000002 OSMutexEn
01026a9c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
01026924  w    O .rodata	00000010 _ZTIPKh
01025bbc  w    O .rodata	00000015 _ZTS18QueuePostException
0100bc44 g     F .text	0000000c _ZSt15set_new_handlerPFvvE
0100ac80  w    F .text	00000048 _ZNSsaSEc
01029000 g       *ABS*	00000000 _edata
01002d38  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES3_EvT_S9_SaIT0_E
01025f2c  w    O .rodata	00000010 _ZTIP17UARTOpenException
01003330  w    F .text	0000008c _ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIP8os_eventEEPT_PKS5_S8_S6_
0103adb4 g       *ABS*	00000000 _end
01028dd0 g     O .rwdata	00000001 _ZSt7nothrow
01007988 g     F .text	0000010c _ZNSt13runtime_errorD0Ev
010242d0 g     F .text	0000007c alt_flash_open_dev
010290a4 g     O .bss	00000001 OSIntNesting
0100d040 g     F .text	000004e0 __gxx_personality_sj0
01009064  w    F .text	0000009c _ZNSs4_Rep8_M_cloneERKSaIcEm
010022c4  w    F .text	0000005c _ZN9__gnu_cxx13new_allocatorIcE9constructEPcRKc
01000f74  w    F .text	00000058 _ZN20QueueCreateExceptionD0Ev
010012a8 g     F .text	0000008c _ZN12MotorHandler4sendEcPKc
01028ec4  w    O .rwdata	00000002 _ZTSi
01022b94 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01021718 g     F .text	00000210 OSTimeDlyResume
010032a8  w    F .text	00000044 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_
01003eec  w    F .text	00000088 _ZNSt6vectorIP8os_eventSaIS1_EE9push_backERKS1_
0101c214 g     F .text	00000154 OSFlagNameSet
01007cc0  w    F .text	00000004 _ZNSaIcEC1ERKS_
01028e88  w    O .rwdata	00000002 _ZTSy
0100c760 g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0100bbd0 g     F .text	00000010 _ZNSt9exceptionD1Ev
01020e54 g     F .text	000001fc OSTaskStkChk
01026774  w    O .rodata	00000022 _ZTSN10__cxxabiv117__pbase_type_infoE
01029018 g     O .bss	00000004 _ZN14__gnu_internal12atomic_mutexE
01023e5c g     F .text	00000058 epcs_enter_4_bytes_mode
01028fa2 g     O .rwdata	00000002 OSMemSize
010263c8  w    O .rodata	0000000c _ZTINSt8ios_base7failureE
01028eac  w    O .rwdata	00000002 _ZTSl
01015b7c g     F .text	0000007c __swrite
01028e54  w    O .rwdata	00000008 _ZTIv
01028f38 g     O .rwdata	00000004 __malloc_trim_threshold
01028ed8  w    O .rwdata	00000003 _ZTSPs
01024b3c g     F .text	00000020 altera_nios2_qsys_irq_init
010084f8  w    F .text	00000130 _ZNSs4_Rep9_S_createEmmRKSaIcE
010290a8 g     O .bss	00000004 OSTCBCur
010254b4 g     F .text	00000038 exit
0100df74 g     F .text	00000018 _Unwind_SetGR
0100a3b0  w    F .text	00000004 _ZNSspLERKSs
01028fa4 g     O .rwdata	00000002 OSMemTblSize
01014044 g     F .text	000000c8 _fwalk_reent
01026388  w    O .rodata	00000014 _ZTVSt12domain_error
01014bd4 g     F .text	0000018c __mdiff
0102434c g     F .text	00000054 alt_flash_close_dev
0100d548 g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
0100ab38  w    F .text	00000068 _ZNSs7replaceEmmmc
01002580  w    F .text	00000050 _ZNSt12_Vector_baseIP8os_eventSaIS1_EE12_Vector_implC1ERKS2_
01018090 g     F .text	00000060 __modsi3
0100bc84 g     F .text	00000010 _ZNSt9bad_allocD1Ev
02000000 g       *ABS*	00000000 __alt_data_end
01002548  w    F .text	00000038 _ZNSt6vectorIcSaIcEEC1ERKS0_
02004020 g     F .exceptions	00000000 alt_exception
01002ab0  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEEvT_S7_
010134d0 g     F .text	00000004 __sfp_lock_release
01028e70  w    O .rwdata	00000002 _ZTSd
01028e04  w    O .rwdata	00000008 _ZTIl
0100dab8 g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0101a02c g     F .text	00000054 OSInit
010265d8  w    O .rodata	0000000c _ZTISt13bad_exception
01000000 g       *ABS*	00000000 __alt_mem_sdram
0102127c g     F .text	00000144 OSTaskQuery
01003148  w    F .text	00000048 _ZSt10__copy_auxIPcS0_ET0_T_S2_S1_
0101ed88 g     F .text	000000ac OS_QInit
0101b308 g     F .text	00000058 OS_StrLen
0101d720 g     F .text	00000120 OSMemNameSet
01026b86 g     O .rodata	00000101 _ctype_
01002498  w    F .text	00000028 _ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEdeEv
01023320 g     F .text	00000040 alt_up_de0_nano_adc_open_dev
01006c0c  w    F .text	00000034 _ZNSt12domain_errorD0Ev
010020f0  w    F .text	00000028 _ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv
01028fbe g     O .rwdata	00000002 OSTaskProfileEn
0100c8b0  w    F .text	00000030 _ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj
010290ac g     O .bss	00000004 OSTime
010080f4  w    F .text	00000008 _ZNKSs5c_strEv
01002aec  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcEvT_S7_SaIT0_E
01000ad8  w    F .text	00000050 _ZN8ListenerD0Ev
01026854  w    O .rodata	00000010 _ZTIPx
01000578  w    F .text	00000058 _ZN18QueuePostExceptionD0Ev
01000e44  w    F .text	00000040 _ZN20QueueCreateExceptionC1Ev
0100bdf4 g     F .text	00000100 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
01039280 g     O .bss	00000800 OSTaskIdleStk
01015adc g     F .text	00000030 __isnand
01018984 g     F .text	0000002c _exit
01006e2c g     F .text	000000d0 _ZNSt8ios_base7failureC2ERKSs
01004490 g     F .text	0000004c _ZN11WifiHandler9readUntilEPc
01023f0c g     F .text	00000154 alt_alarm_start
0101c0d0 g     F .text	00000144 OSFlagNameGet
01006754 g     F .text	00000190 _ZSt20__throw_out_of_rangePKc
01008dac  w    F .text	00000090 _ZNKSs7compareEmmPKcm
0100aba0  w    F .text	00000060 _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc
01021928 g     F .text	00000064 OSTimeGet
0100432c g     F .text	00000164 _ZN11WifiHandler19readIntoBufferUntilEPcS0_
01018100 g     F .text	00000124 __muldi3
0100df48 g     F .text	00000018 _Unwind_GetGR
0100deec g     F .text	00000008 __cxa_get_globals
01002f5c  w    F .text	0000006c _ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIcEEPT_PKS3_S6_S4_
01014288 g     F .text	00000194 __smakebuf_r
01028f34 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0100a1cc  w    F .text	00000040 _ZNSspLEPKc
0100f5c0 g     F .text	00000074 strlen
01023b4c g     F .text	00000050 epcs_write_enable
01005df4 g     F .text	00000190 _ZSt23__throw_underflow_errorPKc
0100f1e0 g     F .text	00000064 _init_signal_r
01028f2c  w    O .rwdata	00000008 _ZTISt9type_info
01001ed0 g     F .text	00000088 _ZN15NetworkReceiverC2EP11WifiHandler
01024f7c g     F .text	0000001c OSTaskSwHook
010247a8 g     F .text	0000018c open
01004620 g     F .text	00000068 _ZN11WifiHandler11configEnterEv
010267d4  w    O .rodata	00000010 _ZTIPe
01007dc0  w    F .text	0000000c _ZNSs4_Rep12_S_empty_repEv
01007db8  w    F .text	00000008 _ZNSs12_Alloc_hiderC1EPcRKSaIcE
01039a80 g     O .bss	00000b40 OSEventTbl
01017b40 g     F .text	00000088 __gedf2
010265e4  w    O .rodata	0000000d _ZTSSt9exception
0103a5c0 g     O .bss	00000510 OSTCBTbl
010263d4  w    O .rodata	00000014 _ZTVSt13runtime_error
010014cc g     F .text	00000248 _ZN12MotorHandler5parseEPc
01003608  w    F .text	00000050 _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
0101f8f8 g     F .text	00000104 OSSemSet
01026a2c  w    O .rodata	0000000f _ZTSSt10bad_typeid
01008280  w    F .text	0000000c _ZNKSs6lengthEv
010092ac  w    F .text	00000020 _ZNSs13_S_copy_charsEPcS_S_
010076c8 g     F .text	00000008 _ZNKSt11logic_error4whatEv
010096f0  w    F .text	000000c4 _ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag
0100bbc0 g     F .text	00000010 _ZNSt9exceptionD0Ev
0100b264  w    F .text	00000070 _ZNSs6resizeEmc
01000df4  w    F .text	00000028 _ZNK20QueueCreateException4whatEv
0102639c  w    O .rodata	00000014 _ZTVNSt8ios_base7failureE
01028e94  w    O .rwdata	00000002 _ZTSx
01004688 g     F .text	00000048 _ZN11WifiHandler15configSendStartEPc
010028e4  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_
0100d998 g     F .text	00000010 _ZNSt10bad_typeidD1Ev
0100dfdc g     F .text	00000008 _Unwind_GetDataRelBase
0100b9d8  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_
01028ff4 g     O .rwdata	00000004 alt_priority_mask
0100ae0c  w    F .text	00000174 _ZNSs6insertEmPKcm
0101f008 g     F .text	000002a0 OSSemDel
01004b70 g     F .text	0000004c _ZN11WifiHandler8lockUpToEt
010290b0 g     O .bss	00000004 OSFlagFreeList
0100369c  w    F .text	00000044 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
01028e24  w    O .rwdata	00000008 _ZTIs
01028f84 g     O .rwdata	00000002 OSEventNameSize
010003e0  w    F .text	00000030 _ZNSt9exceptionC2Ev
01007cbc  w    F .text	00000004 _ZNSaIwEC2ERKS_
010118ec g     F .text	00000024 __vfprintf_internal
01007d90  w    F .text	0000000c _ZNKSs8max_sizeEv
010290b4 g     O .bss	00000001 OSStatRdy
0103aad0 g     O .bss	00000054 OSTCBPrioTbl
01019424 g     F .text	000000ac __env_lock
01002c08  w    F .text	00000058 _ZN9__gnu_cxxmiIPKP8os_eventS4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE
01026954  w    O .rodata	00000010 _ZTIPa
01028fca g     O .rwdata	00000002 OSTaskSwHookEn
01006c58 g     F .text	00000104 _ZNSt8ios_base7failureD1Ev
01028f04  w    O .rwdata	00000004 _ZTSPKw
0100d9a8 g     F .text	00000010 _ZNSt10bad_typeidD2Ev
01017298 g     F .text	00000080 __subdf3
01000864 g     F .text	00000060 _ZN14InfraredSender5parseEPc
01008628  w    F .text	00000004 _ZNSs4_Rep10_M_destroyERKSaIcE
01008f04  w    F .text	000000c0 _ZNKSs7compareEmmRKSsmm
01008774  w    F .text	0000000c _ZNKSs12find_last_ofERKSsm
010098e4  w    F .text	00000060 _ZNSsC2EPKcRKSaIcE
01022434 g     F .text	00000098 alt_epcs_flash_read
01002918  w    F .text	00000044 _ZNKSt6vectorIcSaIcEE3endEv
01007e0c  w    F .text	00000008 _ZNSs4_Rep10_M_refdataEv
01025dc0  w    O .rodata	00000018 _ZTI20QueueCreateException
010144b4 g     F .text	000000c4 __lo0bits
0100b210  w    F .text	00000054 _ZNSs6rbeginEv
0100ac00  w    F .text	00000048 _ZNSs6insertEmmc
01028ff8 g     O .rwdata	00000008 alt_alarm_list
010269e4  w    O .rodata	00000028 _ZTSN10__cxxabiv123__fundamental_type_infoE
01028f92 g     O .rwdata	00000002 OSFlagWidth
01024174 g     F .text	00000064 _do_ctors
0100f308 g     F .text	00000014 __sigtramp
01026330  w    O .rodata	0000000c _ZTISt16invalid_argument
01025c4c  w    O .rodata	00000018 _ZTI16ADCOpenException
01009a18  w    F .text	00000034 _ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
0102354c g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
010029c4  w    F .text	00000054 _ZN9__gnu_cxxmiIPKcS2_St6vectorIcSaIcEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS9_RKNS6_IT0_S8_EE
01002a88  w    F .text	00000028 _ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEEvT_S7_11__true_type
01007d34  w    F .text	0000001c _ZNKSs11_M_disjunctEPKc
01026688  w    O .rodata	0000000c _ZTIN10__cxxabiv119__pointer_type_infoE
010187b8 g     F .text	00000100 close
0100b540  w    F .text	00000034 _ZNSs4swapERSs
01028ee4  w    O .rwdata	00000003 _ZTSPh
010310c8 g     O .bss	00002000 task5_stk
01008ccc  w    F .text	0000003c _ZNSsC1EmcRKSaIcE
01029060 g     O .bss	00000004 alt_envsem
010290b8 g     O .bss	00000004 OSIdleCtrRun
0101a6c8 g     F .text	00000020 OSVersion
01028fdc g     O .rwdata	00000002 OSTmrCfgWheelSize
010073e8 g     F .text	000000b0 _ZNSt11logic_errorC1ERKSs
010213c0 g     F .text	0000007c OS_TaskStkClr
01025c28  w    O .rodata	00000010 _ZTIP16ADCOpenException
010182a4 g     F .text	00000314 __pack_d
01000068 g     F .text	00000060 _ZN16InfraredReceiver4readEi
01028fb6 g     O .rwdata	00000002 OSTaskCreateEn
01007d5c  w    F .text	00000010 _ZNSsC1Ev
0100db90 g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
01028ed4  w    O .rwdata	00000004 _ZTSPKs
0101acb8 g     F .text	00000068 OS_EventWaitListInit
0100f1cc g     F .text	00000014 raise
01025008 g     F .text	0000001c OSTaskIdleHook
01028ec8  w    O .rwdata	00000004 _ZTSPKt
01007638 g     F .text	00000030 _ZNSt16invalid_argumentC2ERKSs
0100451c g     F .text	0000003c _ZN11WifiHandler10configReadEv
0100e48c g     F .text	00000014 free
010134d4 g     F .text	00000004 __sinit_lock_acquire
01023c00 g     F .text	00000170 epcs_write_buffer
010075d8 g     F .text	00000030 _ZNSt12length_errorC2ERKSs
0101513c g     F .text	0000012c __multadd
0100c67c g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
01021050 g     F .text	0000022c OSTaskSuspend
0101441c g     F .text	00000028 _Bfree
01004fa8 g     F .text	0000009c _Z28wifi_handler_tcp_update_taskPv
0100a080  w    F .text	0000010c _ZNSs6appendEPKcm
0101b360 g     F .text	0000005c OS_TaskIdle
010076d0 g     F .text	000000b0 _ZNSt13runtime_errorC1ERKSs
01009484  w    F .text	000000ec _ZNSsC1ERKSsmm
01028fe2 g     O .rwdata	00000002 OSTmrTblSize
0101ec08 g     F .text	00000180 OSQQuery



Disassembly of section .exceptions:

02004020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2004020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2004024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2004040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2004044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2004064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2004070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200407c:	10000326 	beq	r2,zero,200408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2004080:	20000226 	beq	r4,zero,200408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2004084:	20040ec0 	call	20040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2004088:	00000306 	br	2004098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2004090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2004094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2004098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20040e8:	ef80083a 	eret

020040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20040ec:	defff904 	addi	sp,sp,-28
 20040f0:	dfc00615 	stw	ra,24(sp)
 20040f4:	df000515 	stw	fp,20(sp)
 20040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 20040fc:	101a0800 	call	101a080 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2004100:	0005313a 	rdctl	r2,ipending
 2004104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2004108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 2004110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2004114:	00800044 	movi	r2,1
 2004118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200411c:	e0ffff17 	ldw	r3,-4(fp)
 2004120:	e0bffe17 	ldw	r2,-8(fp)
 2004124:	1884703a 	and	r2,r3,r2
 2004128:	1005003a 	cmpeq	r2,r2,zero
 200412c:	1000171e 	bne	r2,zero,200418c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 2004130:	e0bffd17 	ldw	r2,-12(fp)
 2004134:	00c04134 	movhi	r3,260
 2004138:	18eac904 	addi	r3,r3,-21724
 200413c:	100490fa 	slli	r2,r2,3
 2004140:	10c5883a 	add	r2,r2,r3
 2004144:	11800017 	ldw	r6,0(r2)
 2004148:	e0bffd17 	ldw	r2,-12(fp)
 200414c:	00c04134 	movhi	r3,260
 2004150:	18eac904 	addi	r3,r3,-21724
 2004154:	100490fa 	slli	r2,r2,3
 2004158:	10c5883a 	add	r2,r2,r3
 200415c:	10800104 	addi	r2,r2,4
 2004160:	11000017 	ldw	r4,0(r2)
 2004164:	e17ffd17 	ldw	r5,-12(fp)
 2004168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200416c:	0005313a 	rdctl	r2,ipending
 2004170:	e0bffb15 	stw	r2,-20(fp)

  return active;
 2004174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2004178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 200417c:	e0bfff17 	ldw	r2,-4(fp)
 2004180:	1004c03a 	cmpne	r2,r2,zero
 2004184:	103fe21e 	bne	r2,zero,2004110 <alt_irq_handler+0x24>
 2004188:	00000706 	br	20041a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 200418c:	e0bffe17 	ldw	r2,-8(fp)
 2004190:	1085883a 	add	r2,r2,r2
 2004194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2004198:	e0bffd17 	ldw	r2,-12(fp)
 200419c:	10800044 	addi	r2,r2,1
 20041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20041a4:	003fdd06 	br	200411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20041a8:	101a0fc0 	call	101a0fc <OSIntExit>
}
 20041ac:	e037883a 	mov	sp,fp
 20041b0:	dfc00117 	ldw	ra,4(sp)
 20041b4:	df000017 	ldw	fp,0(sp)
 20041b8:	dec00204 	addi	sp,sp,8
 20041bc:	f800283a 	ret

Disassembly of section .text:

01000000 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1000000:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 1000004:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 1000008:	068040f4 	movhi	gp,259
    ori gp, gp, %lo(_gp)
 100000c:	d6836b14 	ori	gp,gp,3500
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1000010:	008040b4 	movhi	r2,258
    ori r2, r2, %lo(__bss_start)
 1000014:	10a40014 	ori	r2,r2,36864

    movhi r3, %hi(__bss_end)
 1000018:	00c040f4 	movhi	r3,259
    ori r3, r3, %lo(__bss_end)
 100001c:	18eb6d14 	ori	r3,r3,44468

    beq r2, r3, 1f
 1000020:	10c00326 	beq	r2,r3,1000030 <_start+0x30>

0:
    stw zero, (r2)
 1000024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1000028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 100002c:	10fffd36 	bltu	r2,r3,1000024 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000030:	1018f200 	call	1018f20 <alt_main>

01000034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000034:	003fff06 	br	1000034 <alt_after_alt_main>

01000038 <_ZN16InfraredReceiver11setListenerEP8os_event>:

/**
 * Sets the listener to which the infrared readings will be posted.
 * @param queue - the queue to set as the listener
 */
void InfraredReceiver::setListener(OS_EVENT *queue) {
 1000038:	defffd04 	addi	sp,sp,-12
 100003c:	df000215 	stw	fp,8(sp)
 1000040:	df000204 	addi	fp,sp,8
 1000044:	e13ffe15 	stw	r4,-8(fp)
 1000048:	e17fff15 	stw	r5,-4(fp)
	listener = queue;
 100004c:	e0fffe17 	ldw	r3,-8(fp)
 1000050:	e0bfff17 	ldw	r2,-4(fp)
 1000054:	18800115 	stw	r2,4(r3)
}
 1000058:	e037883a 	mov	sp,fp
 100005c:	df000017 	ldw	fp,0(sp)
 1000060:	dec00104 	addi	sp,sp,4
 1000064:	f800283a 	ret

01000068 <_ZN16InfraredReceiver4readEi>:
 * Reads the level of the given receive channel.
 * @param channel - the number of the ADC channel to read
 * @return the 12-bit level read from the channel, indicating the amount of infrared light
 * hitting the receivers
 * */
unsigned int InfraredReceiver::read(int channel) {
 1000068:	defffb04 	addi	sp,sp,-20
 100006c:	dfc00415 	stw	ra,16(sp)
 1000070:	df000315 	stw	fp,12(sp)
 1000074:	df000304 	addi	fp,sp,12
 1000078:	e13ffe15 	stw	r4,-8(fp)
 100007c:	e17fff15 	stw	r5,-4(fp)
	alt_up_de0_nano_adc_update(adc_dev);
 1000080:	e0bffe17 	ldw	r2,-8(fp)
 1000084:	10800017 	ldw	r2,0(r2)
 1000088:	10800a17 	ldw	r2,40(r2)
 100008c:	10000035 	stwio	zero,0(r2)
	unsigned int level = (alt_up_de0_nano_adc_read(adc_dev, channel) >> INFRARED_RECEIVER_ADC_READ_UNUSED) - INFRARED_RECEIVER_ADC_READ_BASE;
 1000090:	e0bffe17 	ldw	r2,-8(fp)
 1000094:	11000017 	ldw	r4,0(r2)
 1000098:	e17fff17 	ldw	r5,-4(fp)
 100009c:	10233600 	call	1023360 <alt_up_de0_nano_adc_read>
 10000a0:	1006d13a 	srli	r3,r2,4
 10000a4:	00bf8034 	movhi	r2,65024
 10000a8:	1885883a 	add	r2,r3,r2
 10000ac:	e0bffd15 	stw	r2,-12(fp)
	INFRAREDRECEIVER_LOG(printf("InfraredReceiver [channel: %d, level: %u]\n", channel, level));
	return level;
 10000b0:	e0bffd17 	ldw	r2,-12(fp)
}
 10000b4:	e037883a 	mov	sp,fp
 10000b8:	dfc00117 	ldw	ra,4(sp)
 10000bc:	df000017 	ldw	fp,0(sp)
 10000c0:	dec00204 	addi	sp,sp,8
 10000c4:	f800283a 	ret

010000c8 <_ZN16InfraredReceiver4postEPKc>:
/**
 * Posts an infrared receive event to the listener.
 * @param event - the name of the event, which must start with 'i' for infrared
 * @throw PostException if the event cannot be posted to the listener
 */
void InfraredReceiver::post(const char *event) {
 10000c8:	defffa04 	addi	sp,sp,-24
 10000cc:	dfc00515 	stw	ra,20(sp)
 10000d0:	df000415 	stw	fp,16(sp)
 10000d4:	dc000315 	stw	r16,12(sp)
 10000d8:	df000304 	addi	fp,sp,12
 10000dc:	e13ffe15 	stw	r4,-8(fp)
 10000e0:	e17fff15 	stw	r5,-4(fp)
	INT8U status;
	status = OSQPost(listener, (void *)event);
 10000e4:	e0bffe17 	ldw	r2,-8(fp)
 10000e8:	11000117 	ldw	r4,4(r2)
 10000ec:	e17fff17 	ldw	r5,-4(fp)
 10000f0:	101e6cc0 	call	101e6cc <OSQPost>
 10000f4:	e0bffd05 	stb	r2,-12(fp)
	if (status != OS_NO_ERR) {
 10000f8:	e0bffd03 	ldbu	r2,-12(fp)
 10000fc:	1005003a 	cmpeq	r2,r2,zero
 1000100:	10000e1e 	bne	r2,zero,100013c <_ZN16InfraredReceiver4postEPKc+0x74>
		throw new QueuePostException();
 1000104:	01000104 	movi	r4,4
 1000108:	100dda00 	call	100dda0 <_Znwm>
 100010c:	1021883a 	mov	r16,r2
 1000110:	8009883a 	mov	r4,r16
 1000114:	10004e00 	call	10004e0 <_ZN18QueuePostExceptionC1Ev>
 1000118:	01000104 	movi	r4,4
 100011c:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1000120:	1009883a 	mov	r4,r2
 1000124:	2005883a 	mov	r2,r4
 1000128:	14000015 	stw	r16,0(r2)
 100012c:	014040b4 	movhi	r5,258
 1000130:	2956df04 	addi	r5,r5,23420
 1000134:	000d883a 	mov	r6,zero
 1000138:	100d8900 	call	100d890 <__cxa_throw>
	}
}
 100013c:	e037883a 	mov	sp,fp
 1000140:	dfc00217 	ldw	ra,8(sp)
 1000144:	df000117 	ldw	fp,4(sp)
 1000148:	dc000017 	ldw	r16,0(sp)
 100014c:	dec00304 	addi	sp,sp,12
 1000150:	f800283a 	ret

01000154 <_ZN16InfraredReceiver5checkEj>:
 * Checks the given infrared reading level against the infrared hit threshold.
 * If the level exceeds the threshold, a hit event will be posted to the listener.
 * @param level - the level read by the infrared receivers
 * @throw PostException if the hit event cannot be posted to the listener
 */
void InfraredReceiver::check(unsigned int level) {
 1000154:	defffc04 	addi	sp,sp,-16
 1000158:	dfc00315 	stw	ra,12(sp)
 100015c:	df000215 	stw	fp,8(sp)
 1000160:	df000204 	addi	fp,sp,8
 1000164:	e13ffe15 	stw	r4,-8(fp)
 1000168:	e17fff15 	stw	r5,-4(fp)
	if (level > INFRARED_RECEIVER_HIT_THRESHOLD) {
 100016c:	e0bfff17 	ldw	r2,-4(fp)
 1000170:	10800cf0 	cmpltui	r2,r2,51
 1000174:	1000031e 	bne	r2,zero,1000184 <_ZN16InfraredReceiver5checkEj+0x30>
		INFRAREDRECEIVER_LOG(printf("InfraredReceiver [event: HIT]\n"));
		post(HIT);
 1000178:	d1600017 	ldw	r5,-32768(gp)
 100017c:	e13ffe17 	ldw	r4,-8(fp)
 1000180:	10000c80 	call	10000c8 <_ZN16InfraredReceiver4postEPKc>
	}
}
 1000184:	e037883a 	mov	sp,fp
 1000188:	dfc00117 	ldw	ra,4(sp)
 100018c:	df000017 	ldw	fp,0(sp)
 1000190:	dec00204 	addi	sp,sp,8
 1000194:	f800283a 	ret

01000198 <_ZN16InfraredReceiver6updateEv>:

/**
 * Updates this receiver. The receiver will read the ADC and post the readings to the listener.
 * @throw PostException if the reading cannot be posted to the listener
 */
void InfraredReceiver::update() {
 1000198:	defffd04 	addi	sp,sp,-12
 100019c:	dfc00215 	stw	ra,8(sp)
 10001a0:	df000115 	stw	fp,4(sp)
 10001a4:	df000104 	addi	fp,sp,4
 10001a8:	e13fff15 	stw	r4,-4(fp)
	check(read(1));
 10001ac:	e13fff17 	ldw	r4,-4(fp)
 10001b0:	01400044 	movi	r5,1
 10001b4:	10000680 	call	1000068 <_ZN16InfraredReceiver4readEi>
 10001b8:	100b883a 	mov	r5,r2
 10001bc:	e13fff17 	ldw	r4,-4(fp)
 10001c0:	10001540 	call	1000154 <_ZN16InfraredReceiver5checkEj>
}
 10001c4:	e037883a 	mov	sp,fp
 10001c8:	dfc00117 	ldw	ra,4(sp)
 10001cc:	df000017 	ldw	fp,0(sp)
 10001d0:	dec00204 	addi	sp,sp,8
 10001d4:	f800283a 	ret

010001d8 <_ZN16InfraredReceiverC1Ev>:

/**
 * Creates a new infrared receiver.
 * @throw ADCOpenException if the receiver cannot connect to the analog-to-digital converter
 */
InfraredReceiver::InfraredReceiver() {
 10001d8:	defffc04 	addi	sp,sp,-16
 10001dc:	dfc00315 	stw	ra,12(sp)
 10001e0:	df000215 	stw	fp,8(sp)
 10001e4:	dc000115 	stw	r16,4(sp)
 10001e8:	df000104 	addi	fp,sp,4
 10001ec:	e13fff15 	stw	r4,-4(fp)
	adc_dev = alt_up_de0_nano_adc_open_dev(ADC_NAME);
 10001f0:	010040b4 	movhi	r4,258
 10001f4:	2116db04 	addi	r4,r4,23404
 10001f8:	10233200 	call	1023320 <alt_up_de0_nano_adc_open_dev>
 10001fc:	1007883a 	mov	r3,r2
 1000200:	e0bfff17 	ldw	r2,-4(fp)
 1000204:	10c00015 	stw	r3,0(r2)
	if (adc_dev == NULL) {
 1000208:	e0bfff17 	ldw	r2,-4(fp)
 100020c:	10800017 	ldw	r2,0(r2)
 1000210:	1004c03a 	cmpne	r2,r2,zero
 1000214:	10000e1e 	bne	r2,zero,1000250 <_ZN16InfraredReceiverC1Ev+0x78>
		throw new ADCOpenException();
 1000218:	01000104 	movi	r4,4
 100021c:	100dda00 	call	100dda0 <_Znwm>
 1000220:	1021883a 	mov	r16,r2
 1000224:	8009883a 	mov	r4,r16
 1000228:	10004a00 	call	10004a0 <_ZN16ADCOpenExceptionC1Ev>
 100022c:	01000104 	movi	r4,4
 1000230:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1000234:	1009883a 	mov	r4,r2
 1000238:	2005883a 	mov	r2,r4
 100023c:	14000015 	stw	r16,0(r2)
 1000240:	014040b4 	movhi	r5,258
 1000244:	29570a04 	addi	r5,r5,23592
 1000248:	000d883a 	mov	r6,zero
 100024c:	100d8900 	call	100d890 <__cxa_throw>
	}
}
 1000250:	e037883a 	mov	sp,fp
 1000254:	dfc00217 	ldw	ra,8(sp)
 1000258:	df000117 	ldw	fp,4(sp)
 100025c:	dc000017 	ldw	r16,0(sp)
 1000260:	dec00304 	addi	sp,sp,12
 1000264:	f800283a 	ret

01000268 <_ZN16InfraredReceiverC2Ev>:

/**
 * Creates a new infrared receiver.
 * @throw ADCOpenException if the receiver cannot connect to the analog-to-digital converter
 */
InfraredReceiver::InfraredReceiver() {
 1000268:	defffc04 	addi	sp,sp,-16
 100026c:	dfc00315 	stw	ra,12(sp)
 1000270:	df000215 	stw	fp,8(sp)
 1000274:	dc000115 	stw	r16,4(sp)
 1000278:	df000104 	addi	fp,sp,4
 100027c:	e13fff15 	stw	r4,-4(fp)
	adc_dev = alt_up_de0_nano_adc_open_dev(ADC_NAME);
 1000280:	010040b4 	movhi	r4,258
 1000284:	2116db04 	addi	r4,r4,23404
 1000288:	10233200 	call	1023320 <alt_up_de0_nano_adc_open_dev>
 100028c:	1007883a 	mov	r3,r2
 1000290:	e0bfff17 	ldw	r2,-4(fp)
 1000294:	10c00015 	stw	r3,0(r2)
	if (adc_dev == NULL) {
 1000298:	e0bfff17 	ldw	r2,-4(fp)
 100029c:	10800017 	ldw	r2,0(r2)
 10002a0:	1004c03a 	cmpne	r2,r2,zero
 10002a4:	10000e1e 	bne	r2,zero,10002e0 <_ZN16InfraredReceiverC2Ev+0x78>
		throw new ADCOpenException();
 10002a8:	01000104 	movi	r4,4
 10002ac:	100dda00 	call	100dda0 <_Znwm>
 10002b0:	1021883a 	mov	r16,r2
 10002b4:	8009883a 	mov	r4,r16
 10002b8:	10004a00 	call	10004a0 <_ZN16ADCOpenExceptionC1Ev>
 10002bc:	01000104 	movi	r4,4
 10002c0:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 10002c4:	1009883a 	mov	r4,r2
 10002c8:	2005883a 	mov	r2,r4
 10002cc:	14000015 	stw	r16,0(r2)
 10002d0:	014040b4 	movhi	r5,258
 10002d4:	29570a04 	addi	r5,r5,23592
 10002d8:	000d883a 	mov	r6,zero
 10002dc:	100d8900 	call	100d890 <__cxa_throw>
	}
}
 10002e0:	e037883a 	mov	sp,fp
 10002e4:	dfc00217 	ldw	ra,8(sp)
 10002e8:	df000117 	ldw	fp,4(sp)
 10002ec:	dc000017 	ldw	r16,0(sp)
 10002f0:	dec00304 	addi	sp,sp,12
 10002f4:	f800283a 	ret

010002f8 <_Z29infrared_receiver_update_taskPv>:
// TASKS

extern InfraredReceiver *infraredIn;

/* Polls the infrared receivers. */
void infrared_receiver_update_task(void* pdata) {
 10002f8:	deffe604 	addi	sp,sp,-104
 10002fc:	dfc01915 	stw	ra,100(sp)
 1000300:	df001815 	stw	fp,96(sp)
 1000304:	ddc01715 	stw	r23,92(sp)
 1000308:	dd801615 	stw	r22,88(sp)
 100030c:	dd401515 	stw	r21,84(sp)
 1000310:	dd001415 	stw	r20,80(sp)
 1000314:	dcc01315 	stw	r19,76(sp)
 1000318:	dc801215 	stw	r18,72(sp)
 100031c:	dc401115 	stw	r17,68(sp)
 1000320:	dc001015 	stw	r16,64(sp)
 1000324:	df001004 	addi	fp,sp,64
 1000328:	e13ff115 	stw	r4,-60(fp)
 100032c:	00804074 	movhi	r2,257
 1000330:	10b41004 	addi	r2,r2,-12224
 1000334:	e0bff815 	stw	r2,-32(fp)
 1000338:	008040b4 	movhi	r2,258
 100033c:	1095f504 	addi	r2,r2,22484
 1000340:	e0bff915 	stw	r2,-28(fp)
 1000344:	e0bffa04 	addi	r2,fp,-24
 1000348:	e0fff004 	addi	r3,fp,-64
 100034c:	10c00015 	stw	r3,0(r2)
 1000350:	00c04034 	movhi	r3,256
 1000354:	18c0e104 	addi	r3,r3,900
 1000358:	10c00115 	stw	r3,4(r2)
 100035c:	16c00215 	stw	sp,8(r2)
 1000360:	e13ff204 	addi	r4,fp,-56
 1000364:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
	TASK_LOG(printf("InfraredReceiver [task: update, status: start]\n"));
	while (true) {
		try {
			// Update the infrared receiver.
			infraredIn->update();
 1000368:	008040f4 	movhi	r2,259
 100036c:	10a40004 	addi	r2,r2,-28672
 1000370:	11000017 	ldw	r4,0(r2)
 1000374:	00800044 	movi	r2,1
 1000378:	e0bff315 	stw	r2,-52(fp)
 100037c:	10001980 	call	1000198 <_ZN16InfraredReceiver6updateEv>
 1000380:	00000f06 	br	10003c0 <_Z29infrared_receiver_update_taskPv+0xc8>
 1000384:	e7001004 	addi	fp,fp,64
 1000388:	e0bff417 	ldw	r2,-48(fp)
 100038c:	e0bfff15 	stw	r2,-4(fp)
 1000390:	e0bff517 	ldw	r2,-44(fp)
 1000394:	10800060 	cmpeqi	r2,r2,1
 1000398:	1000041e 	bne	r2,zero,10003ac <_Z29infrared_receiver_update_taskPv+0xb4>
 100039c:	00bfffc4 	movi	r2,-1
 10003a0:	e0bff315 	stw	r2,-52(fp)
 10003a4:	e13fff17 	ldw	r4,-4(fp)
 10003a8:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
		} catch (ARCapException &e) {
 10003ac:	e13fff17 	ldw	r4,-4(fp)
 10003b0:	100d6f80 	call	100d6f8 <__cxa_begin_catch>
 10003b4:	e0bff015 	stw	r2,-64(fp)
 10003b8:	e03ff315 	stw	zero,-52(fp)
 10003bc:	100d6540 	call	100d654 <__cxa_end_catch>
			// Log exceptions.
			INFRAREDRECEIVER_LOG(printf("%s\n", e.what()));
		}
		// Wait.
		OSTimeDlyHMSM(0, 0, 0, INFRARED_RECEIVER_UPDATE_TIME_MILLIS);
 10003c0:	00bfffc4 	movi	r2,-1
 10003c4:	e0bff315 	stw	r2,-52(fp)
 10003c8:	0009883a 	mov	r4,zero
 10003cc:	000b883a 	mov	r5,zero
 10003d0:	000d883a 	mov	r6,zero
 10003d4:	01c03204 	movi	r7,200
 10003d8:	10215880 	call	1021588 <OSTimeDlyHMSM>
extern InfraredReceiver *infraredIn;

/* Polls the infrared receivers. */
void infrared_receiver_update_task(void* pdata) {
	TASK_LOG(printf("InfraredReceiver [task: update, status: start]\n"));
	while (true) {
 10003dc:	003fe206 	br	1000368 <_Z29infrared_receiver_update_taskPv+0x70>

010003e0 <_ZNSt9exceptionC2Ev>:
   *  throw non-class data (e.g., fundamental types).
   */
  class exception 
  {
  public:
    exception() throw() { }
 10003e0:	defffe04 	addi	sp,sp,-8
 10003e4:	df000115 	stw	fp,4(sp)
 10003e8:	df000104 	addi	fp,sp,4
 10003ec:	e13fff15 	stw	r4,-4(fp)
 10003f0:	00c040b4 	movhi	r3,258
 10003f4:	18d96e04 	addi	r3,r3,26040
 10003f8:	e0bfff17 	ldw	r2,-4(fp)
 10003fc:	10c00015 	stw	r3,0(r2)
 1000400:	e037883a 	mov	sp,fp
 1000404:	df000017 	ldw	fp,0(sp)
 1000408:	dec00104 	addi	sp,sp,4
 100040c:	f800283a 	ret

01000410 <_ZNK18QueuePostException4whatEv>:
	virtual const char *what() const throw() = 0;
};

class QueuePostException : ARCapException {
public:
	virtual const char *what() const throw() {
 1000410:	defffe04 	addi	sp,sp,-8
 1000414:	df000115 	stw	fp,4(sp)
 1000418:	df000104 	addi	fp,sp,4
 100041c:	e13fff15 	stw	r4,-4(fp)
		return "Failed to post to listener queue.";
 1000420:	008040b4 	movhi	r2,258
 1000424:	1096c304 	addi	r2,r2,23308
	}
 1000428:	e037883a 	mov	sp,fp
 100042c:	df000017 	ldw	fp,0(sp)
 1000430:	dec00104 	addi	sp,sp,4
 1000434:	f800283a 	ret

01000438 <_ZNK16ADCOpenException4whatEv>:

};

class ADCOpenException : ARCapException {
public:
	virtual const char *what() const throw() {
 1000438:	defffe04 	addi	sp,sp,-8
 100043c:	df000115 	stw	fp,4(sp)
 1000440:	df000104 	addi	fp,sp,4
 1000444:	e13fff15 	stw	r4,-4(fp)
		return "Failed to open connection to analog-to-digital converter.";
 1000448:	008040b4 	movhi	r2,258
 100044c:	1096cc04 	addi	r2,r2,23344
	}
 1000450:	e037883a 	mov	sp,fp
 1000454:	df000017 	ldw	fp,0(sp)
 1000458:	dec00104 	addi	sp,sp,4
 100045c:	f800283a 	ret

01000460 <_ZN14ARCapExceptionC2Ev>:
#define MESSAGE_OK			":ok"
#define MESSAGE_ERR			":err"
#define MESSAGE_OK_LENGTH	3
#define MESSAGE_ERR_LENGTH	4

class ARCapException : exception {
 1000460:	defffd04 	addi	sp,sp,-12
 1000464:	dfc00215 	stw	ra,8(sp)
 1000468:	df000115 	stw	fp,4(sp)
 100046c:	df000104 	addi	fp,sp,4
 1000470:	e13fff15 	stw	r4,-4(fp)
 1000474:	e13fff17 	ldw	r4,-4(fp)
 1000478:	10003e00 	call	10003e0 <_ZNSt9exceptionC2Ev>
 100047c:	00c040b4 	movhi	r3,258
 1000480:	18d70704 	addi	r3,r3,23580
 1000484:	e0bfff17 	ldw	r2,-4(fp)
 1000488:	10c00015 	stw	r3,0(r2)
 100048c:	e037883a 	mov	sp,fp
 1000490:	dfc00117 	ldw	ra,4(sp)
 1000494:	df000017 	ldw	fp,0(sp)
 1000498:	dec00204 	addi	sp,sp,8
 100049c:	f800283a 	ret

010004a0 <_ZN16ADCOpenExceptionC1Ev>:
	 */
	void post(const char *event);

};

class ADCOpenException : ARCapException {
 10004a0:	defffd04 	addi	sp,sp,-12
 10004a4:	dfc00215 	stw	ra,8(sp)
 10004a8:	df000115 	stw	fp,4(sp)
 10004ac:	df000104 	addi	fp,sp,4
 10004b0:	e13fff15 	stw	r4,-4(fp)
 10004b4:	e13fff17 	ldw	r4,-4(fp)
 10004b8:	10004600 	call	1000460 <_ZN14ARCapExceptionC2Ev>
 10004bc:	00c040b4 	movhi	r3,258
 10004c0:	18d72004 	addi	r3,r3,23680
 10004c4:	e0bfff17 	ldw	r2,-4(fp)
 10004c8:	10c00015 	stw	r3,0(r2)
 10004cc:	e037883a 	mov	sp,fp
 10004d0:	dfc00117 	ldw	ra,4(sp)
 10004d4:	df000017 	ldw	fp,0(sp)
 10004d8:	dec00204 	addi	sp,sp,8
 10004dc:	f800283a 	ret

010004e0 <_ZN18QueuePostExceptionC1Ev>:
public:
	virtual const char *what() const throw() = 0;
};

class QueuePostException : ARCapException {
 10004e0:	defffd04 	addi	sp,sp,-12
 10004e4:	dfc00215 	stw	ra,8(sp)
 10004e8:	df000115 	stw	fp,4(sp)
 10004ec:	df000104 	addi	fp,sp,4
 10004f0:	e13fff15 	stw	r4,-4(fp)
 10004f4:	e13fff17 	ldw	r4,-4(fp)
 10004f8:	10004600 	call	1000460 <_ZN14ARCapExceptionC2Ev>
 10004fc:	00c040b4 	movhi	r3,258
 1000500:	18d70204 	addi	r3,r3,23560
 1000504:	e0bfff17 	ldw	r2,-4(fp)
 1000508:	10c00015 	stw	r3,0(r2)
 100050c:	e037883a 	mov	sp,fp
 1000510:	dfc00117 	ldw	ra,4(sp)
 1000514:	df000017 	ldw	fp,0(sp)
 1000518:	dec00204 	addi	sp,sp,8
 100051c:	f800283a 	ret

01000520 <_ZN14ARCapExceptionD2Ev>:
#define MESSAGE_OK			":ok"
#define MESSAGE_ERR			":err"
#define MESSAGE_OK_LENGTH	3
#define MESSAGE_ERR_LENGTH	4

class ARCapException : exception {
 1000520:	defffd04 	addi	sp,sp,-12
 1000524:	dfc00215 	stw	ra,8(sp)
 1000528:	df000115 	stw	fp,4(sp)
 100052c:	df000104 	addi	fp,sp,4
 1000530:	e13fff15 	stw	r4,-4(fp)
 1000534:	00c040b4 	movhi	r3,258
 1000538:	18d70704 	addi	r3,r3,23580
 100053c:	e0bfff17 	ldw	r2,-4(fp)
 1000540:	10c00015 	stw	r3,0(r2)
 1000544:	e13fff17 	ldw	r4,-4(fp)
 1000548:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 100054c:	0005883a 	mov	r2,zero
 1000550:	10803fcc 	andi	r2,r2,255
 1000554:	1005003a 	cmpeq	r2,r2,zero
 1000558:	1000021e 	bne	r2,zero,1000564 <_ZN14ARCapExceptionD2Ev+0x44>
 100055c:	e13fff17 	ldw	r4,-4(fp)
 1000560:	100d8100 	call	100d810 <_ZdlPv>
 1000564:	e037883a 	mov	sp,fp
 1000568:	dfc00117 	ldw	ra,4(sp)
 100056c:	df000017 	ldw	fp,0(sp)
 1000570:	dec00204 	addi	sp,sp,8
 1000574:	f800283a 	ret

01000578 <_ZN18QueuePostExceptionD0Ev>:
public:
	virtual const char *what() const throw() = 0;
};

class QueuePostException : ARCapException {
 1000578:	defffd04 	addi	sp,sp,-12
 100057c:	dfc00215 	stw	ra,8(sp)
 1000580:	df000115 	stw	fp,4(sp)
 1000584:	df000104 	addi	fp,sp,4
 1000588:	e13fff15 	stw	r4,-4(fp)
 100058c:	00c040b4 	movhi	r3,258
 1000590:	18d70204 	addi	r3,r3,23560
 1000594:	e0bfff17 	ldw	r2,-4(fp)
 1000598:	10c00015 	stw	r3,0(r2)
 100059c:	e13fff17 	ldw	r4,-4(fp)
 10005a0:	10005200 	call	1000520 <_ZN14ARCapExceptionD2Ev>
 10005a4:	00800044 	movi	r2,1
 10005a8:	10803fcc 	andi	r2,r2,255
 10005ac:	1005003a 	cmpeq	r2,r2,zero
 10005b0:	1000021e 	bne	r2,zero,10005bc <_ZN18QueuePostExceptionD0Ev+0x44>
 10005b4:	e13fff17 	ldw	r4,-4(fp)
 10005b8:	100d8100 	call	100d810 <_ZdlPv>
 10005bc:	e037883a 	mov	sp,fp
 10005c0:	dfc00117 	ldw	ra,4(sp)
 10005c4:	df000017 	ldw	fp,0(sp)
 10005c8:	dec00204 	addi	sp,sp,8
 10005cc:	f800283a 	ret

010005d0 <_ZN18QueuePostExceptionD1Ev>:
 10005d0:	defffd04 	addi	sp,sp,-12
 10005d4:	dfc00215 	stw	ra,8(sp)
 10005d8:	df000115 	stw	fp,4(sp)
 10005dc:	df000104 	addi	fp,sp,4
 10005e0:	e13fff15 	stw	r4,-4(fp)
 10005e4:	00c040b4 	movhi	r3,258
 10005e8:	18d70204 	addi	r3,r3,23560
 10005ec:	e0bfff17 	ldw	r2,-4(fp)
 10005f0:	10c00015 	stw	r3,0(r2)
 10005f4:	e13fff17 	ldw	r4,-4(fp)
 10005f8:	10005200 	call	1000520 <_ZN14ARCapExceptionD2Ev>
 10005fc:	0005883a 	mov	r2,zero
 1000600:	10803fcc 	andi	r2,r2,255
 1000604:	1005003a 	cmpeq	r2,r2,zero
 1000608:	1000021e 	bne	r2,zero,1000614 <_ZN18QueuePostExceptionD1Ev+0x44>
 100060c:	e13fff17 	ldw	r4,-4(fp)
 1000610:	100d8100 	call	100d810 <_ZdlPv>
 1000614:	e037883a 	mov	sp,fp
 1000618:	dfc00117 	ldw	ra,4(sp)
 100061c:	df000017 	ldw	fp,0(sp)
 1000620:	dec00204 	addi	sp,sp,8
 1000624:	f800283a 	ret

01000628 <_ZN16ADCOpenExceptionD0Ev>:
 1000628:	defffd04 	addi	sp,sp,-12
 100062c:	dfc00215 	stw	ra,8(sp)
 1000630:	df000115 	stw	fp,4(sp)
 1000634:	df000104 	addi	fp,sp,4
 1000638:	e13fff15 	stw	r4,-4(fp)
 100063c:	00c040b4 	movhi	r3,258
 1000640:	18d72004 	addi	r3,r3,23680
 1000644:	e0bfff17 	ldw	r2,-4(fp)
 1000648:	10c00015 	stw	r3,0(r2)
 100064c:	e13fff17 	ldw	r4,-4(fp)
 1000650:	10005200 	call	1000520 <_ZN14ARCapExceptionD2Ev>
 1000654:	00800044 	movi	r2,1
 1000658:	10803fcc 	andi	r2,r2,255
 100065c:	1005003a 	cmpeq	r2,r2,zero
 1000660:	1000021e 	bne	r2,zero,100066c <_ZN16ADCOpenExceptionD0Ev+0x44>
 1000664:	e13fff17 	ldw	r4,-4(fp)
 1000668:	100d8100 	call	100d810 <_ZdlPv>
 100066c:	e037883a 	mov	sp,fp
 1000670:	dfc00117 	ldw	ra,4(sp)
 1000674:	df000017 	ldw	fp,0(sp)
 1000678:	dec00204 	addi	sp,sp,8
 100067c:	f800283a 	ret

01000680 <_ZN16ADCOpenExceptionD1Ev>:
 1000680:	defffd04 	addi	sp,sp,-12
 1000684:	dfc00215 	stw	ra,8(sp)
 1000688:	df000115 	stw	fp,4(sp)
 100068c:	df000104 	addi	fp,sp,4
 1000690:	e13fff15 	stw	r4,-4(fp)
 1000694:	00c040b4 	movhi	r3,258
 1000698:	18d72004 	addi	r3,r3,23680
 100069c:	e0bfff17 	ldw	r2,-4(fp)
 10006a0:	10c00015 	stw	r3,0(r2)
 10006a4:	e13fff17 	ldw	r4,-4(fp)
 10006a8:	10005200 	call	1000520 <_ZN14ARCapExceptionD2Ev>
 10006ac:	0005883a 	mov	r2,zero
 10006b0:	10803fcc 	andi	r2,r2,255
 10006b4:	1005003a 	cmpeq	r2,r2,zero
 10006b8:	1000021e 	bne	r2,zero,10006c4 <_ZN16ADCOpenExceptionD1Ev+0x44>
 10006bc:	e13fff17 	ldw	r4,-4(fp)
 10006c0:	100d8100 	call	100d810 <_ZdlPv>
 10006c4:	e037883a 	mov	sp,fp
 10006c8:	dfc00117 	ldw	ra,4(sp)
 10006cc:	df000017 	ldw	fp,0(sp)
 10006d0:	dec00204 	addi	sp,sp,8
 10006d4:	f800283a 	ret

010006d8 <_ZN14ARCapExceptionD0Ev>:
#define MESSAGE_OK			":ok"
#define MESSAGE_ERR			":err"
#define MESSAGE_OK_LENGTH	3
#define MESSAGE_ERR_LENGTH	4

class ARCapException : exception {
 10006d8:	defffd04 	addi	sp,sp,-12
 10006dc:	dfc00215 	stw	ra,8(sp)
 10006e0:	df000115 	stw	fp,4(sp)
 10006e4:	df000104 	addi	fp,sp,4
 10006e8:	e13fff15 	stw	r4,-4(fp)
 10006ec:	00c040b4 	movhi	r3,258
 10006f0:	18d70704 	addi	r3,r3,23580
 10006f4:	e0bfff17 	ldw	r2,-4(fp)
 10006f8:	10c00015 	stw	r3,0(r2)
 10006fc:	e13fff17 	ldw	r4,-4(fp)
 1000700:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1000704:	00800044 	movi	r2,1
 1000708:	10803fcc 	andi	r2,r2,255
 100070c:	1005003a 	cmpeq	r2,r2,zero
 1000710:	1000021e 	bne	r2,zero,100071c <_ZN14ARCapExceptionD0Ev+0x44>
 1000714:	e13fff17 	ldw	r4,-4(fp)
 1000718:	100d8100 	call	100d810 <_ZdlPv>
 100071c:	e037883a 	mov	sp,fp
 1000720:	dfc00117 	ldw	ra,4(sp)
 1000724:	df000017 	ldw	fp,0(sp)
 1000728:	dec00204 	addi	sp,sp,8
 100072c:	f800283a 	ret

01000730 <_ZN14ARCapExceptionD1Ev>:
 1000730:	defffd04 	addi	sp,sp,-12
 1000734:	dfc00215 	stw	ra,8(sp)
 1000738:	df000115 	stw	fp,4(sp)
 100073c:	df000104 	addi	fp,sp,4
 1000740:	e13fff15 	stw	r4,-4(fp)
 1000744:	00c040b4 	movhi	r3,258
 1000748:	18d70704 	addi	r3,r3,23580
 100074c:	e0bfff17 	ldw	r2,-4(fp)
 1000750:	10c00015 	stw	r3,0(r2)
 1000754:	e13fff17 	ldw	r4,-4(fp)
 1000758:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 100075c:	0005883a 	mov	r2,zero
 1000760:	10803fcc 	andi	r2,r2,255
 1000764:	1005003a 	cmpeq	r2,r2,zero
 1000768:	1000021e 	bne	r2,zero,1000774 <_ZN14ARCapExceptionD1Ev+0x44>
 100076c:	e13fff17 	ldw	r4,-4(fp)
 1000770:	100d8100 	call	100d810 <_ZdlPv>
 1000774:	e037883a 	mov	sp,fp
 1000778:	dfc00117 	ldw	ra,4(sp)
 100077c:	df000017 	ldw	fp,0(sp)
 1000780:	dec00204 	addi	sp,sp,8
 1000784:	f800283a 	ret

01000788 <_ZN14InfraredSender4testEv>:
// TESTING

/**
 * Tests the infrared emitters.
 */
void InfraredSender::test() {
 1000788:	defffd04 	addi	sp,sp,-12
 100078c:	dfc00215 	stw	ra,8(sp)
 1000790:	df000115 	stw	fp,4(sp)
 1000794:	df000104 	addi	fp,sp,4
 1000798:	e13fff15 	stw	r4,-4(fp)
	parse("is");
 100079c:	e0bfff17 	ldw	r2,-4(fp)
 10007a0:	10800017 	ldw	r2,0(r2)
 10007a4:	10800204 	addi	r2,r2,8
 10007a8:	10800017 	ldw	r2,0(r2)
 10007ac:	e13fff17 	ldw	r4,-4(fp)
 10007b0:	014040b4 	movhi	r5,258
 10007b4:	29572304 	addi	r5,r5,23692
 10007b8:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, INFRARED_SENDER_OFF_TIME_SECONDS, 0);
 10007bc:	0009883a 	mov	r4,zero
 10007c0:	000b883a 	mov	r5,zero
 10007c4:	01800044 	movi	r6,1
 10007c8:	000f883a 	mov	r7,zero
 10007cc:	10215880 	call	1021588 <OSTimeDlyHMSM>
}
 10007d0:	e037883a 	mov	sp,fp
 10007d4:	dfc00117 	ldw	ra,4(sp)
 10007d8:	df000017 	ldw	fp,0(sp)
 10007dc:	dec00204 	addi	sp,sp,8
 10007e0:	f800283a 	ret

010007e4 <_Z25infrared_sender_test_taskPv>:
		}
	}
}

/* @test Periodically sends an infrared signal. */
void infrared_sender_test_task(void *pdata) {
 10007e4:	defffd04 	addi	sp,sp,-12
 10007e8:	dfc00215 	stw	ra,8(sp)
 10007ec:	df000115 	stw	fp,4(sp)
 10007f0:	df000104 	addi	fp,sp,4
 10007f4:	e13fff15 	stw	r4,-4(fp)
	TASK_LOG(printf("InfraredSender [task: test, status: start]\n"));
	while (true) {
		infraredOut->test();
 10007f8:	008040f4 	movhi	r2,259
 10007fc:	10a40104 	addi	r2,r2,-28668
 1000800:	11000017 	ldw	r4,0(r2)
 1000804:	10007880 	call	1000788 <_ZN14InfraredSender4testEv>
}

/* @test Periodically sends an infrared signal. */
void infrared_sender_test_task(void *pdata) {
	TASK_LOG(printf("InfraredSender [task: test, status: start]\n"));
	while (true) {
 1000808:	003ffb06 	br	10007f8 <_Z25infrared_sender_test_taskPv+0x14>

0100080c <_ZN14InfraredSender4sendEv>:

/**
 * Sends a signal from the infrared emitters.
 * @return OK if the signal was sent successfully
 */
void InfraredSender::send() {
 100080c:	defffd04 	addi	sp,sp,-12
 1000810:	dfc00215 	stw	ra,8(sp)
 1000814:	df000115 	stw	fp,4(sp)
 1000818:	df000104 	addi	fp,sp,4
 100081c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, INFRARED_SENDER_ON);
 1000820:	00808074 	movhi	r2,513
 1000824:	10a82004 	addi	r2,r2,-24448
 1000828:	00c00044 	movi	r3,1
 100082c:	10c00035 	stwio	r3,0(r2)
	INFRAREDSENDER_LOG(printf("InfraredSender [emitter: on]\n"));
	OSTimeDlyHMSM(0, 0, INFRARED_SENDER_ON_TIME_SECONDS, 0);
 1000830:	0009883a 	mov	r4,zero
 1000834:	000b883a 	mov	r5,zero
 1000838:	01800044 	movi	r6,1
 100083c:	000f883a 	mov	r7,zero
 1000840:	10215880 	call	1021588 <OSTimeDlyHMSM>
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, INFRARED_SENDER_OFF);
 1000844:	00808074 	movhi	r2,513
 1000848:	10a82004 	addi	r2,r2,-24448
 100084c:	10000035 	stwio	zero,0(r2)
	INFRAREDSENDER_LOG(printf("InfraredSender [emitter: off]\n"));
}
 1000850:	e037883a 	mov	sp,fp
 1000854:	dfc00117 	ldw	ra,4(sp)
 1000858:	df000017 	ldw	fp,0(sp)
 100085c:	dec00204 	addi	sp,sp,8
 1000860:	f800283a 	ret

01000864 <_ZN14InfraredSender5parseEPc>:
 * Parses the given infrared command.
 * @command - the infrared command to parse.
 * If the command is a send command, this sender issues a signal to the emitters.
 * The command must be dynamically allocated, and will be freed at the end of this method.
 */
void InfraredSender::parse(char *command) {
 1000864:	defffc04 	addi	sp,sp,-16
 1000868:	dfc00315 	stw	ra,12(sp)
 100086c:	df000215 	stw	fp,8(sp)
 1000870:	df000204 	addi	fp,sp,8
 1000874:	e13ffe15 	stw	r4,-8(fp)
 1000878:	e17fff15 	stw	r5,-4(fp)
	INFRAREDSENDER_LOG(printf("InfraredSender [command: %s]\n", command));
	// First character is 'i' for infrared; second character gives subtype:
	switch (command[1]) {
 100087c:	e0bfff17 	ldw	r2,-4(fp)
 1000880:	10800044 	addi	r2,r2,1
 1000884:	10800003 	ldbu	r2,0(r2)
 1000888:	10803fcc 	andi	r2,r2,255
 100088c:	1080201c 	xori	r2,r2,128
 1000890:	10bfe004 	addi	r2,r2,-128
 1000894:	10801ce0 	cmpeqi	r2,r2,115
 1000898:	1000011e 	bne	r2,zero,10008a0 <_ZN14InfraredSender5parseEPc+0x3c>
 100089c:	00000206 	br	10008a8 <_ZN14InfraredSender5parseEPc+0x44>
	case 's':
		// Shoot.
		send();
 10008a0:	e13ffe17 	ldw	r4,-8(fp)
 10008a4:	100080c0 	call	100080c <_ZN14InfraredSender4sendEv>
		break;
	}
	free(command);
 10008a8:	e13fff17 	ldw	r4,-4(fp)
 10008ac:	100e48c0 	call	100e48c <free>
}
 10008b0:	e037883a 	mov	sp,fp
 10008b4:	dfc00117 	ldw	ra,4(sp)
 10008b8:	df000017 	ldw	fp,0(sp)
 10008bc:	dec00204 	addi	sp,sp,8
 10008c0:	f800283a 	ret

010008c4 <_ZN14InfraredSenderC1Ev>:

/**
 * Creates a new infrared sender.
 * Turns the emitters on for verification.
 */
InfraredSender::InfraredSender() {
 10008c4:	defffd04 	addi	sp,sp,-12
 10008c8:	dfc00215 	stw	ra,8(sp)
 10008cc:	df000115 	stw	fp,4(sp)
 10008d0:	df000104 	addi	fp,sp,4
 10008d4:	e13fff15 	stw	r4,-4(fp)
 10008d8:	e13fff17 	ldw	r4,-4(fp)
 10008dc:	1000d4c0 	call	1000d4c <_ZN8ListenerC2Ev>
 10008e0:	00c040b4 	movhi	r3,258
 10008e4:	18d72604 	addi	r3,r3,23704
 10008e8:	e0bfff17 	ldw	r2,-4(fp)
 10008ec:	10c00015 	stw	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, INFRARED_SENDER_OFF);
 10008f0:	00808074 	movhi	r2,513
 10008f4:	10a82004 	addi	r2,r2,-24448
 10008f8:	10000035 	stwio	zero,0(r2)
}
 10008fc:	e037883a 	mov	sp,fp
 1000900:	dfc00117 	ldw	ra,4(sp)
 1000904:	df000017 	ldw	fp,0(sp)
 1000908:	dec00204 	addi	sp,sp,8
 100090c:	f800283a 	ret

01000910 <_ZN14InfraredSenderC2Ev>:

/**
 * Creates a new infrared sender.
 * Turns the emitters on for verification.
 */
InfraredSender::InfraredSender() {
 1000910:	defffd04 	addi	sp,sp,-12
 1000914:	dfc00215 	stw	ra,8(sp)
 1000918:	df000115 	stw	fp,4(sp)
 100091c:	df000104 	addi	fp,sp,4
 1000920:	e13fff15 	stw	r4,-4(fp)
 1000924:	e13fff17 	ldw	r4,-4(fp)
 1000928:	1000d4c0 	call	1000d4c <_ZN8ListenerC2Ev>
 100092c:	00c040b4 	movhi	r3,258
 1000930:	18d72604 	addi	r3,r3,23704
 1000934:	e0bfff17 	ldw	r2,-4(fp)
 1000938:	10c00015 	stw	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, INFRARED_SENDER_OFF);
 100093c:	00808074 	movhi	r2,513
 1000940:	10a82004 	addi	r2,r2,-24448
 1000944:	10000035 	stwio	zero,0(r2)
}
 1000948:	e037883a 	mov	sp,fp
 100094c:	dfc00117 	ldw	ra,4(sp)
 1000950:	df000017 	ldw	fp,0(sp)
 1000954:	dec00204 	addi	sp,sp,8
 1000958:	f800283a 	ret

0100095c <_Z27infrared_sender_update_taskPv>:
// TASKS

extern InfraredSender *infraredOut;

/* Waits for infrared send commands and executes them as they arrive. */
void infrared_sender_update_task(void *pdata) {
 100095c:	deffe604 	addi	sp,sp,-104
 1000960:	dfc01915 	stw	ra,100(sp)
 1000964:	df001815 	stw	fp,96(sp)
 1000968:	ddc01715 	stw	r23,92(sp)
 100096c:	dd801615 	stw	r22,88(sp)
 1000970:	dd401515 	stw	r21,84(sp)
 1000974:	dd001415 	stw	r20,80(sp)
 1000978:	dcc01315 	stw	r19,76(sp)
 100097c:	dc801215 	stw	r18,72(sp)
 1000980:	dc401115 	stw	r17,68(sp)
 1000984:	dc001015 	stw	r16,64(sp)
 1000988:	df001004 	addi	fp,sp,64
 100098c:	e13ff115 	stw	r4,-60(fp)
 1000990:	00804074 	movhi	r2,257
 1000994:	10b41004 	addi	r2,r2,-12224
 1000998:	e0bff815 	stw	r2,-32(fp)
 100099c:	008040b4 	movhi	r2,258
 10009a0:	1095f904 	addi	r2,r2,22500
 10009a4:	e0bff915 	stw	r2,-28(fp)
 10009a8:	e0bffa04 	addi	r2,fp,-24
 10009ac:	e0fff004 	addi	r3,fp,-64
 10009b0:	10c00015 	stw	r3,0(r2)
 10009b4:	00c04034 	movhi	r3,256
 10009b8:	18c27c04 	addi	r3,r3,2544
 10009bc:	10c00115 	stw	r3,4(r2)
 10009c0:	16c00215 	stw	sp,8(r2)
 10009c4:	e13ff204 	addi	r4,fp,-56
 10009c8:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 10009cc:	00000006 	br	10009d0 <_Z27infrared_sender_update_taskPv+0x74>
	TASK_LOG(printf("InfraredSender [task: update, status: start]\n"));
	while (true) {
		try {
			// Update the infrared sender.
			infraredOut->update();
 10009d0:	008040f4 	movhi	r2,259
 10009d4:	10a40104 	addi	r2,r2,-28668
 10009d8:	10800017 	ldw	r2,0(r2)
 10009dc:	1009883a 	mov	r4,r2
 10009e0:	00800044 	movi	r2,1
 10009e4:	e0bff315 	stw	r2,-52(fp)
 10009e8:	1000bf80 	call	1000bf8 <_ZN8Listener6updateEv>
 10009ec:	003ff806 	br	10009d0 <_Z27infrared_sender_update_taskPv+0x74>
 10009f0:	e7001004 	addi	fp,fp,64
 10009f4:	e0bff417 	ldw	r2,-48(fp)
 10009f8:	e0bfff15 	stw	r2,-4(fp)
 10009fc:	e0bff517 	ldw	r2,-44(fp)
 1000a00:	10800060 	cmpeqi	r2,r2,1
 1000a04:	1000041e 	bne	r2,zero,1000a18 <_Z27infrared_sender_update_taskPv+0xbc>
 1000a08:	00bfffc4 	movi	r2,-1
 1000a0c:	e0bff315 	stw	r2,-52(fp)
 1000a10:	e13fff17 	ldw	r4,-4(fp)
 1000a14:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
		} catch (ARCapException &e) {
 1000a18:	e13fff17 	ldw	r4,-4(fp)
 1000a1c:	100d6f80 	call	100d6f8 <__cxa_begin_catch>
 1000a20:	e0bff015 	stw	r2,-64(fp)
 1000a24:	e03ff315 	stw	zero,-52(fp)
 1000a28:	100d6540 	call	100d654 <__cxa_end_catch>
extern InfraredSender *infraredOut;

/* Waits for infrared send commands and executes them as they arrive. */
void infrared_sender_update_task(void *pdata) {
	TASK_LOG(printf("InfraredSender [task: update, status: start]\n"));
	while (true) {
 1000a2c:	003fe806 	br	10009d0 <_Z27infrared_sender_update_taskPv+0x74>

01000a30 <_ZN8ListenerD2Ev>:
public:
	/**
	 * Creates a new listener.
	 */
	Listener();
	virtual ~Listener() {}
 1000a30:	defffd04 	addi	sp,sp,-12
 1000a34:	dfc00215 	stw	ra,8(sp)
 1000a38:	df000115 	stw	fp,4(sp)
 1000a3c:	df000104 	addi	fp,sp,4
 1000a40:	e13fff15 	stw	r4,-4(fp)
 1000a44:	00c040b4 	movhi	r3,258
 1000a48:	18d73604 	addi	r3,r3,23768
 1000a4c:	e0bfff17 	ldw	r2,-4(fp)
 1000a50:	10c00015 	stw	r3,0(r2)
 1000a54:	0005883a 	mov	r2,zero
 1000a58:	10803fcc 	andi	r2,r2,255
 1000a5c:	1005003a 	cmpeq	r2,r2,zero
 1000a60:	1000021e 	bne	r2,zero,1000a6c <_ZN8ListenerD2Ev+0x3c>
 1000a64:	e13fff17 	ldw	r4,-4(fp)
 1000a68:	100d8100 	call	100d810 <_ZdlPv>
 1000a6c:	e037883a 	mov	sp,fp
 1000a70:	dfc00117 	ldw	ra,4(sp)
 1000a74:	df000017 	ldw	fp,0(sp)
 1000a78:	dec00204 	addi	sp,sp,8
 1000a7c:	f800283a 	ret

01000a80 <_ZN14InfraredSenderD0Ev>:
void infrared_sender_test_task(void *pdata);

/**
 * Listens for send commands on a queue and applies them to the infrared emitters.
 */
class InfraredSender: public Listener {
 1000a80:	defffd04 	addi	sp,sp,-12
 1000a84:	dfc00215 	stw	ra,8(sp)
 1000a88:	df000115 	stw	fp,4(sp)
 1000a8c:	df000104 	addi	fp,sp,4
 1000a90:	e13fff15 	stw	r4,-4(fp)
 1000a94:	00c040b4 	movhi	r3,258
 1000a98:	18d72604 	addi	r3,r3,23704
 1000a9c:	e0bfff17 	ldw	r2,-4(fp)
 1000aa0:	10c00015 	stw	r3,0(r2)
 1000aa4:	e13fff17 	ldw	r4,-4(fp)
 1000aa8:	1000a300 	call	1000a30 <_ZN8ListenerD2Ev>
 1000aac:	00800044 	movi	r2,1
 1000ab0:	10803fcc 	andi	r2,r2,255
 1000ab4:	1005003a 	cmpeq	r2,r2,zero
 1000ab8:	1000021e 	bne	r2,zero,1000ac4 <_ZN14InfraredSenderD0Ev+0x44>
 1000abc:	e13fff17 	ldw	r4,-4(fp)
 1000ac0:	100d8100 	call	100d810 <_ZdlPv>
 1000ac4:	e037883a 	mov	sp,fp
 1000ac8:	dfc00117 	ldw	ra,4(sp)
 1000acc:	df000017 	ldw	fp,0(sp)
 1000ad0:	dec00204 	addi	sp,sp,8
 1000ad4:	f800283a 	ret

01000ad8 <_ZN8ListenerD0Ev>:
 1000ad8:	defffd04 	addi	sp,sp,-12
 1000adc:	dfc00215 	stw	ra,8(sp)
 1000ae0:	df000115 	stw	fp,4(sp)
 1000ae4:	df000104 	addi	fp,sp,4
 1000ae8:	e13fff15 	stw	r4,-4(fp)
 1000aec:	00c040b4 	movhi	r3,258
 1000af0:	18d73604 	addi	r3,r3,23768
 1000af4:	e0bfff17 	ldw	r2,-4(fp)
 1000af8:	10c00015 	stw	r3,0(r2)
 1000afc:	00800044 	movi	r2,1
 1000b00:	10803fcc 	andi	r2,r2,255
 1000b04:	1005003a 	cmpeq	r2,r2,zero
 1000b08:	1000021e 	bne	r2,zero,1000b14 <_ZN8ListenerD0Ev+0x3c>
 1000b0c:	e13fff17 	ldw	r4,-4(fp)
 1000b10:	100d8100 	call	100d810 <_ZdlPv>
 1000b14:	e037883a 	mov	sp,fp
 1000b18:	dfc00117 	ldw	ra,4(sp)
 1000b1c:	df000017 	ldw	fp,0(sp)
 1000b20:	dec00204 	addi	sp,sp,8
 1000b24:	f800283a 	ret

01000b28 <_ZN8ListenerD1Ev>:
 1000b28:	defffd04 	addi	sp,sp,-12
 1000b2c:	dfc00215 	stw	ra,8(sp)
 1000b30:	df000115 	stw	fp,4(sp)
 1000b34:	df000104 	addi	fp,sp,4
 1000b38:	e13fff15 	stw	r4,-4(fp)
 1000b3c:	00c040b4 	movhi	r3,258
 1000b40:	18d73604 	addi	r3,r3,23768
 1000b44:	e0bfff17 	ldw	r2,-4(fp)
 1000b48:	10c00015 	stw	r3,0(r2)
 1000b4c:	0005883a 	mov	r2,zero
 1000b50:	10803fcc 	andi	r2,r2,255
 1000b54:	1005003a 	cmpeq	r2,r2,zero
 1000b58:	1000021e 	bne	r2,zero,1000b64 <_ZN8ListenerD1Ev+0x3c>
 1000b5c:	e13fff17 	ldw	r4,-4(fp)
 1000b60:	100d8100 	call	100d810 <_ZdlPv>
 1000b64:	e037883a 	mov	sp,fp
 1000b68:	dfc00117 	ldw	ra,4(sp)
 1000b6c:	df000017 	ldw	fp,0(sp)
 1000b70:	dec00204 	addi	sp,sp,8
 1000b74:	f800283a 	ret

01000b78 <_ZN14InfraredSenderD1Ev>:
 1000b78:	defffd04 	addi	sp,sp,-12
 1000b7c:	dfc00215 	stw	ra,8(sp)
 1000b80:	df000115 	stw	fp,4(sp)
 1000b84:	df000104 	addi	fp,sp,4
 1000b88:	e13fff15 	stw	r4,-4(fp)
 1000b8c:	00c040b4 	movhi	r3,258
 1000b90:	18d72604 	addi	r3,r3,23704
 1000b94:	e0bfff17 	ldw	r2,-4(fp)
 1000b98:	10c00015 	stw	r3,0(r2)
 1000b9c:	e13fff17 	ldw	r4,-4(fp)
 1000ba0:	1000a300 	call	1000a30 <_ZN8ListenerD2Ev>
 1000ba4:	0005883a 	mov	r2,zero
 1000ba8:	10803fcc 	andi	r2,r2,255
 1000bac:	1005003a 	cmpeq	r2,r2,zero
 1000bb0:	1000021e 	bne	r2,zero,1000bbc <_ZN14InfraredSenderD1Ev+0x44>
 1000bb4:	e13fff17 	ldw	r4,-4(fp)
 1000bb8:	100d8100 	call	100d810 <_ZdlPv>
 1000bbc:	e037883a 	mov	sp,fp
 1000bc0:	dfc00117 	ldw	ra,4(sp)
 1000bc4:	df000017 	ldw	fp,0(sp)
 1000bc8:	dec00204 	addi	sp,sp,8
 1000bcc:	f800283a 	ret

01000bd0 <_ZN8Listener8listenerEv>:

/*
 * Gets the queue used to accept events.
 * @return the receive queue
 */
OS_EVENT *Listener::listener() {
 1000bd0:	defffe04 	addi	sp,sp,-8
 1000bd4:	df000115 	stw	fp,4(sp)
 1000bd8:	df000104 	addi	fp,sp,4
 1000bdc:	e13fff15 	stw	r4,-4(fp)
	return receiveQueue;
 1000be0:	e0bfff17 	ldw	r2,-4(fp)
 1000be4:	10800517 	ldw	r2,20(r2)
}
 1000be8:	e037883a 	mov	sp,fp
 1000bec:	df000017 	ldw	fp,0(sp)
 1000bf0:	dec00104 	addi	sp,sp,4
 1000bf4:	f800283a 	ret

01000bf8 <_ZN8Listener6updateEv>:
/**
 * Waits on the receive queue for event.
 * When events are received, they are forwarded to parse().
 * @throw QueuePendException if this listener cannot read the receive queue
 */
void Listener::update() {
 1000bf8:	defffa04 	addi	sp,sp,-24
 1000bfc:	dfc00515 	stw	ra,20(sp)
 1000c00:	df000415 	stw	fp,16(sp)
 1000c04:	dc000315 	stw	r16,12(sp)
 1000c08:	df000304 	addi	fp,sp,12
 1000c0c:	e13fff15 	stw	r4,-4(fp)
	INT8U status;
	char *event = (char *)OSQPend(receiveQueue, 0, &status);
 1000c10:	e0bfff17 	ldw	r2,-4(fp)
 1000c14:	11000517 	ldw	r4,20(r2)
 1000c18:	e1bffe04 	addi	r6,fp,-8
 1000c1c:	000b883a 	mov	r5,zero
 1000c20:	101e2300 	call	101e230 <OSQPend>
 1000c24:	e0bffd15 	stw	r2,-12(fp)
	if (status != OS_NO_ERR) {
 1000c28:	e0bffe03 	ldbu	r2,-8(fp)
 1000c2c:	10803fcc 	andi	r2,r2,255
 1000c30:	1005003a 	cmpeq	r2,r2,zero
 1000c34:	10000e1e 	bne	r2,zero,1000c70 <_ZN8Listener6updateEv+0x78>
		throw new QueuePendException();
 1000c38:	01000104 	movi	r4,4
 1000c3c:	100dda00 	call	100dda0 <_Znwm>
 1000c40:	1021883a 	mov	r16,r2
 1000c44:	8009883a 	mov	r4,r16
 1000c48:	1000e840 	call	1000e84 <_ZN18QueuePendExceptionC1Ev>
 1000c4c:	01000104 	movi	r4,4
 1000c50:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1000c54:	1009883a 	mov	r4,r2
 1000c58:	2005883a 	mov	r2,r4
 1000c5c:	14000015 	stw	r16,0(r2)
 1000c60:	014040b4 	movhi	r5,258
 1000c64:	29574b04 	addi	r5,r5,23852
 1000c68:	000d883a 	mov	r6,zero
 1000c6c:	100d8900 	call	100d890 <__cxa_throw>
	} else {
		parse(event);
 1000c70:	e0bfff17 	ldw	r2,-4(fp)
 1000c74:	10800017 	ldw	r2,0(r2)
 1000c78:	10800204 	addi	r2,r2,8
 1000c7c:	10800017 	ldw	r2,0(r2)
 1000c80:	e13fff17 	ldw	r4,-4(fp)
 1000c84:	e17ffd17 	ldw	r5,-12(fp)
 1000c88:	103ee83a 	callr	r2
	}
}
 1000c8c:	e037883a 	mov	sp,fp
 1000c90:	dfc00217 	ldw	ra,8(sp)
 1000c94:	df000117 	ldw	fp,4(sp)
 1000c98:	dc000017 	ldw	r16,0(sp)
 1000c9c:	dec00304 	addi	sp,sp,12
 1000ca0:	f800283a 	ret

01000ca4 <_ZN8ListenerC1Ev>:
// CONSTRUCTION

/**
 * Creates a new listener.
 */
Listener::Listener() {
 1000ca4:	defffc04 	addi	sp,sp,-16
 1000ca8:	dfc00315 	stw	ra,12(sp)
 1000cac:	df000215 	stw	fp,8(sp)
 1000cb0:	dc000115 	stw	r16,4(sp)
 1000cb4:	df000104 	addi	fp,sp,4
 1000cb8:	e13fff15 	stw	r4,-4(fp)
 1000cbc:	00c040b4 	movhi	r3,258
 1000cc0:	18d73604 	addi	r3,r3,23768
 1000cc4:	e0bfff17 	ldw	r2,-4(fp)
 1000cc8:	10c00015 	stw	r3,0(r2)
	/* Create the receive queue. */
	receiveQueue = OSQCreate((void**)&receiveBuffer, LISTENER_RECEIVE_QUEUE_SIZE);
 1000ccc:	e0bfff17 	ldw	r2,-4(fp)
 1000cd0:	10800104 	addi	r2,r2,4
 1000cd4:	1009883a 	mov	r4,r2
 1000cd8:	01400104 	movi	r5,4
 1000cdc:	101dc540 	call	101dc54 <OSQCreate>
 1000ce0:	1007883a 	mov	r3,r2
 1000ce4:	e0bfff17 	ldw	r2,-4(fp)
 1000ce8:	10c00515 	stw	r3,20(r2)
	if (receiveQueue == NULL) {
 1000cec:	e0bfff17 	ldw	r2,-4(fp)
 1000cf0:	10800517 	ldw	r2,20(r2)
 1000cf4:	1004c03a 	cmpne	r2,r2,zero
 1000cf8:	10000e1e 	bne	r2,zero,1000d34 <_ZN8ListenerC1Ev+0x90>
		throw new QueueCreateException();
 1000cfc:	01000104 	movi	r4,4
 1000d00:	100dda00 	call	100dda0 <_Znwm>
 1000d04:	1021883a 	mov	r16,r2
 1000d08:	8009883a 	mov	r4,r16
 1000d0c:	1000e440 	call	1000e44 <_ZN20QueueCreateExceptionC1Ev>
 1000d10:	01000104 	movi	r4,4
 1000d14:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1000d18:	1009883a 	mov	r4,r2
 1000d1c:	2005883a 	mov	r2,r4
 1000d20:	14000015 	stw	r16,0(r2)
 1000d24:	014040b4 	movhi	r5,258
 1000d28:	29576604 	addi	r5,r5,23960
 1000d2c:	000d883a 	mov	r6,zero
 1000d30:	100d8900 	call	100d890 <__cxa_throw>
	}
}
 1000d34:	e037883a 	mov	sp,fp
 1000d38:	dfc00217 	ldw	ra,8(sp)
 1000d3c:	df000117 	ldw	fp,4(sp)
 1000d40:	dc000017 	ldw	r16,0(sp)
 1000d44:	dec00304 	addi	sp,sp,12
 1000d48:	f800283a 	ret

01000d4c <_ZN8ListenerC2Ev>:
// CONSTRUCTION

/**
 * Creates a new listener.
 */
Listener::Listener() {
 1000d4c:	defffc04 	addi	sp,sp,-16
 1000d50:	dfc00315 	stw	ra,12(sp)
 1000d54:	df000215 	stw	fp,8(sp)
 1000d58:	dc000115 	stw	r16,4(sp)
 1000d5c:	df000104 	addi	fp,sp,4
 1000d60:	e13fff15 	stw	r4,-4(fp)
 1000d64:	00c040b4 	movhi	r3,258
 1000d68:	18d73604 	addi	r3,r3,23768
 1000d6c:	e0bfff17 	ldw	r2,-4(fp)
 1000d70:	10c00015 	stw	r3,0(r2)
	/* Create the receive queue. */
	receiveQueue = OSQCreate((void**)&receiveBuffer, LISTENER_RECEIVE_QUEUE_SIZE);
 1000d74:	e0bfff17 	ldw	r2,-4(fp)
 1000d78:	10800104 	addi	r2,r2,4
 1000d7c:	1009883a 	mov	r4,r2
 1000d80:	01400104 	movi	r5,4
 1000d84:	101dc540 	call	101dc54 <OSQCreate>
 1000d88:	1007883a 	mov	r3,r2
 1000d8c:	e0bfff17 	ldw	r2,-4(fp)
 1000d90:	10c00515 	stw	r3,20(r2)
	if (receiveQueue == NULL) {
 1000d94:	e0bfff17 	ldw	r2,-4(fp)
 1000d98:	10800517 	ldw	r2,20(r2)
 1000d9c:	1004c03a 	cmpne	r2,r2,zero
 1000da0:	10000e1e 	bne	r2,zero,1000ddc <_ZN8ListenerC2Ev+0x90>
		throw new QueueCreateException();
 1000da4:	01000104 	movi	r4,4
 1000da8:	100dda00 	call	100dda0 <_Znwm>
 1000dac:	1021883a 	mov	r16,r2
 1000db0:	8009883a 	mov	r4,r16
 1000db4:	1000e440 	call	1000e44 <_ZN20QueueCreateExceptionC1Ev>
 1000db8:	01000104 	movi	r4,4
 1000dbc:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1000dc0:	1009883a 	mov	r4,r2
 1000dc4:	2005883a 	mov	r2,r4
 1000dc8:	14000015 	stw	r16,0(r2)
 1000dcc:	014040b4 	movhi	r5,258
 1000dd0:	29576604 	addi	r5,r5,23960
 1000dd4:	000d883a 	mov	r6,zero
 1000dd8:	100d8900 	call	100d890 <__cxa_throw>
	}
}
 1000ddc:	e037883a 	mov	sp,fp
 1000de0:	dfc00217 	ldw	ra,8(sp)
 1000de4:	df000117 	ldw	fp,4(sp)
 1000de8:	dc000017 	ldw	r16,0(sp)
 1000dec:	dec00304 	addi	sp,sp,12
 1000df0:	f800283a 	ret

01000df4 <_ZNK20QueueCreateException4whatEv>:

};

class QueueCreateException : ARCapException {
public:
	virtual const char *what() const throw() {
 1000df4:	defffe04 	addi	sp,sp,-8
 1000df8:	df000115 	stw	fp,4(sp)
 1000dfc:	df000104 	addi	fp,sp,4
 1000e00:	e13fff15 	stw	r4,-4(fp)
		return "Failed to create listener queue.";
 1000e04:	008040b4 	movhi	r2,258
 1000e08:	10973904 	addi	r2,r2,23780
	}
 1000e0c:	e037883a 	mov	sp,fp
 1000e10:	df000017 	ldw	fp,0(sp)
 1000e14:	dec00104 	addi	sp,sp,4
 1000e18:	f800283a 	ret

01000e1c <_ZNK18QueuePendException4whatEv>:
};

class QueuePendException : ARCapException {
public:
	virtual const char *what() const throw() {
 1000e1c:	defffe04 	addi	sp,sp,-8
 1000e20:	df000115 	stw	fp,4(sp)
 1000e24:	df000104 	addi	fp,sp,4
 1000e28:	e13fff15 	stw	r4,-4(fp)
		return "Failed to pend on listener queue.";
 1000e2c:	008040b4 	movhi	r2,258
 1000e30:	10974204 	addi	r2,r2,23816
	}
 1000e34:	e037883a 	mov	sp,fp
 1000e38:	df000017 	ldw	fp,0(sp)
 1000e3c:	dec00104 	addi	sp,sp,4
 1000e40:	f800283a 	ret

01000e44 <_ZN20QueueCreateExceptionC1Ev>:
	 */
	virtual void parse(char *event) = 0;

};

class QueueCreateException : ARCapException {
 1000e44:	defffd04 	addi	sp,sp,-12
 1000e48:	dfc00215 	stw	ra,8(sp)
 1000e4c:	df000115 	stw	fp,4(sp)
 1000e50:	df000104 	addi	fp,sp,4
 1000e54:	e13fff15 	stw	r4,-4(fp)
 1000e58:	e13fff17 	ldw	r4,-4(fp)
 1000e5c:	10004600 	call	1000460 <_ZN14ARCapExceptionC2Ev>
 1000e60:	00c040b4 	movhi	r3,258
 1000e64:	18d77e04 	addi	r3,r3,24056
 1000e68:	e0bfff17 	ldw	r2,-4(fp)
 1000e6c:	10c00015 	stw	r3,0(r2)
 1000e70:	e037883a 	mov	sp,fp
 1000e74:	dfc00117 	ldw	ra,4(sp)
 1000e78:	df000017 	ldw	fp,0(sp)
 1000e7c:	dec00204 	addi	sp,sp,8
 1000e80:	f800283a 	ret

01000e84 <_ZN18QueuePendExceptionC1Ev>:
	virtual const char *what() const throw() {
		return "Failed to create listener queue.";
	}
};

class QueuePendException : ARCapException {
 1000e84:	defffd04 	addi	sp,sp,-12
 1000e88:	dfc00215 	stw	ra,8(sp)
 1000e8c:	df000115 	stw	fp,4(sp)
 1000e90:	df000104 	addi	fp,sp,4
 1000e94:	e13fff15 	stw	r4,-4(fp)
 1000e98:	e13fff17 	ldw	r4,-4(fp)
 1000e9c:	10004600 	call	1000460 <_ZN14ARCapExceptionC2Ev>
 1000ea0:	00c040b4 	movhi	r3,258
 1000ea4:	18d76304 	addi	r3,r3,23948
 1000ea8:	e0bfff17 	ldw	r2,-4(fp)
 1000eac:	10c00015 	stw	r3,0(r2)
 1000eb0:	e037883a 	mov	sp,fp
 1000eb4:	dfc00117 	ldw	ra,4(sp)
 1000eb8:	df000017 	ldw	fp,0(sp)
 1000ebc:	dec00204 	addi	sp,sp,8
 1000ec0:	f800283a 	ret

01000ec4 <_ZN18QueuePendExceptionD0Ev>:
 1000ec4:	defffd04 	addi	sp,sp,-12
 1000ec8:	dfc00215 	stw	ra,8(sp)
 1000ecc:	df000115 	stw	fp,4(sp)
 1000ed0:	df000104 	addi	fp,sp,4
 1000ed4:	e13fff15 	stw	r4,-4(fp)
 1000ed8:	00c040b4 	movhi	r3,258
 1000edc:	18d76304 	addi	r3,r3,23948
 1000ee0:	e0bfff17 	ldw	r2,-4(fp)
 1000ee4:	10c00015 	stw	r3,0(r2)
 1000ee8:	e13fff17 	ldw	r4,-4(fp)
 1000eec:	10005200 	call	1000520 <_ZN14ARCapExceptionD2Ev>
 1000ef0:	00800044 	movi	r2,1
 1000ef4:	10803fcc 	andi	r2,r2,255
 1000ef8:	1005003a 	cmpeq	r2,r2,zero
 1000efc:	1000021e 	bne	r2,zero,1000f08 <_ZN18QueuePendExceptionD0Ev+0x44>
 1000f00:	e13fff17 	ldw	r4,-4(fp)
 1000f04:	100d8100 	call	100d810 <_ZdlPv>
 1000f08:	e037883a 	mov	sp,fp
 1000f0c:	dfc00117 	ldw	ra,4(sp)
 1000f10:	df000017 	ldw	fp,0(sp)
 1000f14:	dec00204 	addi	sp,sp,8
 1000f18:	f800283a 	ret

01000f1c <_ZN18QueuePendExceptionD1Ev>:
 1000f1c:	defffd04 	addi	sp,sp,-12
 1000f20:	dfc00215 	stw	ra,8(sp)
 1000f24:	df000115 	stw	fp,4(sp)
 1000f28:	df000104 	addi	fp,sp,4
 1000f2c:	e13fff15 	stw	r4,-4(fp)
 1000f30:	00c040b4 	movhi	r3,258
 1000f34:	18d76304 	addi	r3,r3,23948
 1000f38:	e0bfff17 	ldw	r2,-4(fp)
 1000f3c:	10c00015 	stw	r3,0(r2)
 1000f40:	e13fff17 	ldw	r4,-4(fp)
 1000f44:	10005200 	call	1000520 <_ZN14ARCapExceptionD2Ev>
 1000f48:	0005883a 	mov	r2,zero
 1000f4c:	10803fcc 	andi	r2,r2,255
 1000f50:	1005003a 	cmpeq	r2,r2,zero
 1000f54:	1000021e 	bne	r2,zero,1000f60 <_ZN18QueuePendExceptionD1Ev+0x44>
 1000f58:	e13fff17 	ldw	r4,-4(fp)
 1000f5c:	100d8100 	call	100d810 <_ZdlPv>
 1000f60:	e037883a 	mov	sp,fp
 1000f64:	dfc00117 	ldw	ra,4(sp)
 1000f68:	df000017 	ldw	fp,0(sp)
 1000f6c:	dec00204 	addi	sp,sp,8
 1000f70:	f800283a 	ret

01000f74 <_ZN20QueueCreateExceptionD0Ev>:
	 */
	virtual void parse(char *event) = 0;

};

class QueueCreateException : ARCapException {
 1000f74:	defffd04 	addi	sp,sp,-12
 1000f78:	dfc00215 	stw	ra,8(sp)
 1000f7c:	df000115 	stw	fp,4(sp)
 1000f80:	df000104 	addi	fp,sp,4
 1000f84:	e13fff15 	stw	r4,-4(fp)
 1000f88:	00c040b4 	movhi	r3,258
 1000f8c:	18d77e04 	addi	r3,r3,24056
 1000f90:	e0bfff17 	ldw	r2,-4(fp)
 1000f94:	10c00015 	stw	r3,0(r2)
 1000f98:	e13fff17 	ldw	r4,-4(fp)
 1000f9c:	10005200 	call	1000520 <_ZN14ARCapExceptionD2Ev>
 1000fa0:	00800044 	movi	r2,1
 1000fa4:	10803fcc 	andi	r2,r2,255
 1000fa8:	1005003a 	cmpeq	r2,r2,zero
 1000fac:	1000021e 	bne	r2,zero,1000fb8 <_ZN20QueueCreateExceptionD0Ev+0x44>
 1000fb0:	e13fff17 	ldw	r4,-4(fp)
 1000fb4:	100d8100 	call	100d810 <_ZdlPv>
 1000fb8:	e037883a 	mov	sp,fp
 1000fbc:	dfc00117 	ldw	ra,4(sp)
 1000fc0:	df000017 	ldw	fp,0(sp)
 1000fc4:	dec00204 	addi	sp,sp,8
 1000fc8:	f800283a 	ret

01000fcc <_ZN20QueueCreateExceptionD1Ev>:
 1000fcc:	defffd04 	addi	sp,sp,-12
 1000fd0:	dfc00215 	stw	ra,8(sp)
 1000fd4:	df000115 	stw	fp,4(sp)
 1000fd8:	df000104 	addi	fp,sp,4
 1000fdc:	e13fff15 	stw	r4,-4(fp)
 1000fe0:	00c040b4 	movhi	r3,258
 1000fe4:	18d77e04 	addi	r3,r3,24056
 1000fe8:	e0bfff17 	ldw	r2,-4(fp)
 1000fec:	10c00015 	stw	r3,0(r2)
 1000ff0:	e13fff17 	ldw	r4,-4(fp)
 1000ff4:	10005200 	call	1000520 <_ZN14ARCapExceptionD2Ev>
 1000ff8:	0005883a 	mov	r2,zero
 1000ffc:	10803fcc 	andi	r2,r2,255
 1001000:	1005003a 	cmpeq	r2,r2,zero
 1001004:	1000021e 	bne	r2,zero,1001010 <_ZN20QueueCreateExceptionD1Ev+0x44>
 1001008:	e13fff17 	ldw	r4,-4(fp)
 100100c:	100d8100 	call	100d810 <_ZdlPv>
 1001010:	e037883a 	mov	sp,fp
 1001014:	dfc00117 	ldw	ra,4(sp)
 1001018:	df000017 	ldw	fp,0(sp)
 100101c:	dec00204 	addi	sp,sp,8
 1001020:	f800283a 	ret

01001024 <_ZN12MotorHandler4testEv>:

/**
 * Tests the motor controller.
 * Runs both motors forward, both backward, left forward and backward, right forward and backward.
 */
void MotorHandler::test() {
 1001024:	defffd04 	addi	sp,sp,-12
 1001028:	dfc00215 	stw	ra,8(sp)
 100102c:	df000115 	stw	fp,4(sp)
 1001030:	df000104 	addi	fp,sp,4
 1001034:	e13fff15 	stw	r4,-4(fp)
	OSTimeDlyHMSM(0, 0, 3, 0);
 1001038:	0009883a 	mov	r4,zero
 100103c:	000b883a 	mov	r5,zero
 1001040:	018000c4 	movi	r6,3
 1001044:	000f883a 	mov	r7,zero
 1001048:	10215880 	call	1021588 <OSTimeDlyHMSM>
	// Go forward.
	parse("mlf120");
 100104c:	e0bfff17 	ldw	r2,-4(fp)
 1001050:	10800017 	ldw	r2,0(r2)
 1001054:	10800204 	addi	r2,r2,8
 1001058:	10800017 	ldw	r2,0(r2)
 100105c:	e13fff17 	ldw	r4,-4(fp)
 1001060:	014040b4 	movhi	r5,258
 1001064:	29578a04 	addi	r5,r5,24104
 1001068:	103ee83a 	callr	r2
	parse("mrf120");
 100106c:	e0bfff17 	ldw	r2,-4(fp)
 1001070:	10800017 	ldw	r2,0(r2)
 1001074:	10800204 	addi	r2,r2,8
 1001078:	10800017 	ldw	r2,0(r2)
 100107c:	e13fff17 	ldw	r4,-4(fp)
 1001080:	014040b4 	movhi	r5,258
 1001084:	29578c04 	addi	r5,r5,24112
 1001088:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 2, 0);
 100108c:	0009883a 	mov	r4,zero
 1001090:	000b883a 	mov	r5,zero
 1001094:	01800084 	movi	r6,2
 1001098:	000f883a 	mov	r7,zero
 100109c:	10215880 	call	1021588 <OSTimeDlyHMSM>
	// Stop.
	parse("mlf0");
 10010a0:	e0bfff17 	ldw	r2,-4(fp)
 10010a4:	10800017 	ldw	r2,0(r2)
 10010a8:	10800204 	addi	r2,r2,8
 10010ac:	10800017 	ldw	r2,0(r2)
 10010b0:	e13fff17 	ldw	r4,-4(fp)
 10010b4:	014040b4 	movhi	r5,258
 10010b8:	29578e04 	addi	r5,r5,24120
 10010bc:	103ee83a 	callr	r2
	parse("mrf0");
 10010c0:	e0bfff17 	ldw	r2,-4(fp)
 10010c4:	10800017 	ldw	r2,0(r2)
 10010c8:	10800204 	addi	r2,r2,8
 10010cc:	10800017 	ldw	r2,0(r2)
 10010d0:	e13fff17 	ldw	r4,-4(fp)
 10010d4:	014040b4 	movhi	r5,258
 10010d8:	29579004 	addi	r5,r5,24128
 10010dc:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 5, 0);
 10010e0:	0009883a 	mov	r4,zero
 10010e4:	000b883a 	mov	r5,zero
 10010e8:	01800144 	movi	r6,5
 10010ec:	000f883a 	mov	r7,zero
 10010f0:	10215880 	call	1021588 <OSTimeDlyHMSM>
	// Go backward.
	parse("mlb120");
 10010f4:	e0bfff17 	ldw	r2,-4(fp)
 10010f8:	10800017 	ldw	r2,0(r2)
 10010fc:	10800204 	addi	r2,r2,8
 1001100:	10800017 	ldw	r2,0(r2)
 1001104:	e13fff17 	ldw	r4,-4(fp)
 1001108:	014040b4 	movhi	r5,258
 100110c:	29579204 	addi	r5,r5,24136
 1001110:	103ee83a 	callr	r2
	parse("mrb120");
 1001114:	e0bfff17 	ldw	r2,-4(fp)
 1001118:	10800017 	ldw	r2,0(r2)
 100111c:	10800204 	addi	r2,r2,8
 1001120:	10800017 	ldw	r2,0(r2)
 1001124:	e13fff17 	ldw	r4,-4(fp)
 1001128:	014040b4 	movhi	r5,258
 100112c:	29579404 	addi	r5,r5,24144
 1001130:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 2, 0);
 1001134:	0009883a 	mov	r4,zero
 1001138:	000b883a 	mov	r5,zero
 100113c:	01800084 	movi	r6,2
 1001140:	000f883a 	mov	r7,zero
 1001144:	10215880 	call	1021588 <OSTimeDlyHMSM>
	// Stop.
	parse("mlf0");
 1001148:	e0bfff17 	ldw	r2,-4(fp)
 100114c:	10800017 	ldw	r2,0(r2)
 1001150:	10800204 	addi	r2,r2,8
 1001154:	10800017 	ldw	r2,0(r2)
 1001158:	e13fff17 	ldw	r4,-4(fp)
 100115c:	014040b4 	movhi	r5,258
 1001160:	29578e04 	addi	r5,r5,24120
 1001164:	103ee83a 	callr	r2
	parse("mrf0");
 1001168:	e0bfff17 	ldw	r2,-4(fp)
 100116c:	10800017 	ldw	r2,0(r2)
 1001170:	10800204 	addi	r2,r2,8
 1001174:	10800017 	ldw	r2,0(r2)
 1001178:	e13fff17 	ldw	r4,-4(fp)
 100117c:	014040b4 	movhi	r5,258
 1001180:	29579004 	addi	r5,r5,24128
 1001184:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 5, 0);
 1001188:	0009883a 	mov	r4,zero
 100118c:	000b883a 	mov	r5,zero
 1001190:	01800144 	movi	r6,5
 1001194:	000f883a 	mov	r7,zero
 1001198:	10215880 	call	1021588 <OSTimeDlyHMSM>
	// Turn left.
	parse("mrf120");
 100119c:	e0bfff17 	ldw	r2,-4(fp)
 10011a0:	10800017 	ldw	r2,0(r2)
 10011a4:	10800204 	addi	r2,r2,8
 10011a8:	10800017 	ldw	r2,0(r2)
 10011ac:	e13fff17 	ldw	r4,-4(fp)
 10011b0:	014040b4 	movhi	r5,258
 10011b4:	29578c04 	addi	r5,r5,24112
 10011b8:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 2, 0);
 10011bc:	0009883a 	mov	r4,zero
 10011c0:	000b883a 	mov	r5,zero
 10011c4:	01800084 	movi	r6,2
 10011c8:	000f883a 	mov	r7,zero
 10011cc:	10215880 	call	1021588 <OSTimeDlyHMSM>
	// Stop.
	parse("mrf0");
 10011d0:	e0bfff17 	ldw	r2,-4(fp)
 10011d4:	10800017 	ldw	r2,0(r2)
 10011d8:	10800204 	addi	r2,r2,8
 10011dc:	10800017 	ldw	r2,0(r2)
 10011e0:	e13fff17 	ldw	r4,-4(fp)
 10011e4:	014040b4 	movhi	r5,258
 10011e8:	29579004 	addi	r5,r5,24128
 10011ec:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 5, 0);
 10011f0:	0009883a 	mov	r4,zero
 10011f4:	000b883a 	mov	r5,zero
 10011f8:	01800144 	movi	r6,5
 10011fc:	000f883a 	mov	r7,zero
 1001200:	10215880 	call	1021588 <OSTimeDlyHMSM>
	// Turn right.
	parse("mlf120");
 1001204:	e0bfff17 	ldw	r2,-4(fp)
 1001208:	10800017 	ldw	r2,0(r2)
 100120c:	10800204 	addi	r2,r2,8
 1001210:	10800017 	ldw	r2,0(r2)
 1001214:	e13fff17 	ldw	r4,-4(fp)
 1001218:	014040b4 	movhi	r5,258
 100121c:	29578a04 	addi	r5,r5,24104
 1001220:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 2, 0);
 1001224:	0009883a 	mov	r4,zero
 1001228:	000b883a 	mov	r5,zero
 100122c:	01800084 	movi	r6,2
 1001230:	000f883a 	mov	r7,zero
 1001234:	10215880 	call	1021588 <OSTimeDlyHMSM>
	// Stop.
	parse("mlf0");
 1001238:	e0bfff17 	ldw	r2,-4(fp)
 100123c:	10800017 	ldw	r2,0(r2)
 1001240:	10800204 	addi	r2,r2,8
 1001244:	10800017 	ldw	r2,0(r2)
 1001248:	e13fff17 	ldw	r4,-4(fp)
 100124c:	014040b4 	movhi	r5,258
 1001250:	29578e04 	addi	r5,r5,24120
 1001254:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 5, 0);
 1001258:	0009883a 	mov	r4,zero
 100125c:	000b883a 	mov	r5,zero
 1001260:	01800144 	movi	r6,5
 1001264:	000f883a 	mov	r7,zero
 1001268:	10215880 	call	1021588 <OSTimeDlyHMSM>
}
 100126c:	e037883a 	mov	sp,fp
 1001270:	dfc00117 	ldw	ra,4(sp)
 1001274:	df000017 	ldw	fp,0(sp)
 1001278:	dec00204 	addi	sp,sp,8
 100127c:	f800283a 	ret

01001280 <_Z23motor_handler_test_taskPv>:
		}
	}
}

/* @test Executes the motor handler test suite. */
void motor_handler_test_task(void *pdata) {
 1001280:	defffd04 	addi	sp,sp,-12
 1001284:	dfc00215 	stw	ra,8(sp)
 1001288:	df000115 	stw	fp,4(sp)
 100128c:	df000104 	addi	fp,sp,4
 1001290:	e13fff15 	stw	r4,-4(fp)
	TASK_LOG(printf("MotorHandler [task: test, status: start]\n"));
	while (true) {
		motor->test();
 1001294:	008040f4 	movhi	r2,259
 1001298:	10a40204 	addi	r2,r2,-28664
 100129c:	11000017 	ldw	r4,0(r2)
 10012a0:	10010240 	call	1001024 <_ZN12MotorHandler4testEv>
}

/* @test Executes the motor handler test suite. */
void motor_handler_test_task(void *pdata) {
	TASK_LOG(printf("MotorHandler [task: test, status: start]\n"));
	while (true) {
 10012a4:	003ffb06 	br	1001294 <_Z23motor_handler_test_taskPv+0x14>

010012a8 <_ZN12MotorHandler4sendEcPKc>:
/**
 * Sends a byte-length message to the motor controller.
 * @param message - the message to send
 * @param description - the string description of the message, for debugging
 */
void MotorHandler::send(char message, const char *description) {
 10012a8:	defff904 	addi	sp,sp,-28
 10012ac:	dfc00615 	stw	ra,24(sp)
 10012b0:	df000515 	stw	fp,20(sp)
 10012b4:	df000504 	addi	fp,sp,20
 10012b8:	e13ffd15 	stw	r4,-12(fp)
 10012bc:	e1bfff15 	stw	r6,-4(fp)
 10012c0:	e17ffe05 	stb	r5,-8(fp)
	alt_u32 write_space;
	// Check for write space.
	write_space = alt_up_rs232_get_available_space_in_write_FIFO(motor_dev);
 10012c4:	e0bffd17 	ldw	r2,-12(fp)
 10012c8:	11000617 	ldw	r4,24(r2)
 10012cc:	10235880 	call	1023588 <alt_up_rs232_get_available_space_in_write_FIFO>
 10012d0:	e0bffc15 	stw	r2,-16(fp)
	if (write_space >= WRITE_FIFO_EMPTY) {
 10012d4:	e0bffc17 	ldw	r2,-16(fp)
 10012d8:	10802030 	cmpltui	r2,r2,128
 10012dc:	1000071e 	bne	r2,zero,10012fc <_ZN12MotorHandler4sendEcPKc+0x54>
		// If space, write.
		int status = alt_up_rs232_write_data(motor_dev, message);
 10012e0:	e0bffd17 	ldw	r2,-12(fp)
 10012e4:	11000617 	ldw	r4,24(r2)
 10012e8:	e0bffe03 	ldbu	r2,-8(fp)
 10012ec:	11403fcc 	andi	r5,r2,255
 10012f0:	10236180 	call	1023618 <alt_up_rs232_write_data>
 10012f4:	e0bffb15 	stw	r2,-20(fp)
 10012f8:	00000906 	br	1001320 <_ZN12MotorHandler4sendEcPKc+0x78>
		// Log errors.
		if (status != OK) MOTORHANDLER_LOG(printf("MotorHandler [error: cannot write]\n"));
	} else {
		// If no space, wait and retry.
		MOTORHANDLER_LOG(printf("MotorHandler [message: 0x%02x, description: %s, error: no write space; retrying]\n", message, description));
		OSTimeDlyHMSM(0, 0, 0, 10);
 10012fc:	0009883a 	mov	r4,zero
 1001300:	000b883a 	mov	r5,zero
 1001304:	000d883a 	mov	r6,zero
 1001308:	01c00284 	movi	r7,10
 100130c:	10215880 	call	1021588 <OSTimeDlyHMSM>
		send(message, description);
 1001310:	e17ffe07 	ldb	r5,-8(fp)
 1001314:	e13ffd17 	ldw	r4,-12(fp)
 1001318:	e1bfff17 	ldw	r6,-4(fp)
 100131c:	10012a80 	call	10012a8 <_ZN12MotorHandler4sendEcPKc>
	}
}
 1001320:	e037883a 	mov	sp,fp
 1001324:	dfc00117 	ldw	ra,4(sp)
 1001328:	df000017 	ldw	fp,0(sp)
 100132c:	dec00204 	addi	sp,sp,8
 1001330:	f800283a 	ret

01001334 <_ZN12MotorHandler4moveEccPKc>:
 * Moves in the given direction at constant speed.
 * @param direction - the motor and direction to move in, e.g. MOTOR_MOTOR1_FORWARD
 * @param speed speed of the motor
 * @param description - the string description of the movement, for debugging
 */
void MotorHandler::move(char motorDirection, char speed, const char *description){
 1001334:	defffa04 	addi	sp,sp,-24
 1001338:	dfc00515 	stw	ra,20(sp)
 100133c:	df000415 	stw	fp,16(sp)
 1001340:	df000404 	addi	fp,sp,16
 1001344:	e13ffc15 	stw	r4,-16(fp)
 1001348:	e1ffff15 	stw	r7,-4(fp)
 100134c:	e17ffd05 	stb	r5,-12(fp)
 1001350:	e1bffe05 	stb	r6,-8(fp)
	send(MOTOR_START_BYTE, "start");
 1001354:	e13ffc17 	ldw	r4,-16(fp)
 1001358:	017fe004 	movi	r5,-128
 100135c:	018040b4 	movhi	r6,258
 1001360:	31979604 	addi	r6,r6,24152
 1001364:	10012a80 	call	10012a8 <_ZN12MotorHandler4sendEcPKc>
	send(MOTOR_DEVICE_TYPE, "device");
 1001368:	e13ffc17 	ldw	r4,-16(fp)
 100136c:	000b883a 	mov	r5,zero
 1001370:	018040b4 	movhi	r6,258
 1001374:	31979804 	addi	r6,r6,24160
 1001378:	10012a80 	call	10012a8 <_ZN12MotorHandler4sendEcPKc>
	send(motorDirection, description);
 100137c:	e17ffd07 	ldb	r5,-12(fp)
 1001380:	e13ffc17 	ldw	r4,-16(fp)
 1001384:	e1bfff17 	ldw	r6,-4(fp)
 1001388:	10012a80 	call	10012a8 <_ZN12MotorHandler4sendEcPKc>
	send(speed, "speed");
 100138c:	e17ffe07 	ldb	r5,-8(fp)
 1001390:	e13ffc17 	ldw	r4,-16(fp)
 1001394:	018040b4 	movhi	r6,258
 1001398:	31979a04 	addi	r6,r6,24168
 100139c:	10012a80 	call	10012a8 <_ZN12MotorHandler4sendEcPKc>
	MOTORHANDLER_LOG(printf("\n"));
}
 10013a0:	e037883a 	mov	sp,fp
 10013a4:	dfc00117 	ldw	ra,4(sp)
 10013a8:	df000017 	ldw	fp,0(sp)
 10013ac:	dec00204 	addi	sp,sp,8
 10013b0:	f800283a 	ret

010013b4 <_ZN12MotorHandler5resetEv>:
// MOTOR CONTROL

/**
 * Resets the motor controller.
 */
void MotorHandler::reset(){
 10013b4:	defffd04 	addi	sp,sp,-12
 10013b8:	dfc00215 	stw	ra,8(sp)
 10013bc:	df000115 	stw	fp,4(sp)
 10013c0:	df000104 	addi	fp,sp,4
 10013c4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MOTOR_RESET_N_BASE, MOTOR_RESET);
 10013c8:	00808074 	movhi	r2,513
 10013cc:	10a81c04 	addi	r2,r2,-24464
 10013d0:	10000035 	stwio	zero,0(r2)
	OSTimeDlyHMSM(0, 0, 0, 200);
 10013d4:	0009883a 	mov	r4,zero
 10013d8:	000b883a 	mov	r5,zero
 10013dc:	000d883a 	mov	r6,zero
 10013e0:	01c03204 	movi	r7,200
 10013e4:	10215880 	call	1021588 <OSTimeDlyHMSM>
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MOTOR_RESET_N_BASE, MOTOR_ENABLE);
 10013e8:	00c08074 	movhi	r3,513
 10013ec:	18e81c04 	addi	r3,r3,-24464
 10013f0:	00800044 	movi	r2,1
 10013f4:	18800035 	stwio	r2,0(r3)
	OSTimeDlyHMSM(0, 0, 0, 200);
 10013f8:	0009883a 	mov	r4,zero
 10013fc:	000b883a 	mov	r5,zero
 1001400:	000d883a 	mov	r6,zero
 1001404:	01c03204 	movi	r7,200
 1001408:	10215880 	call	1021588 <OSTimeDlyHMSM>
}
 100140c:	e037883a 	mov	sp,fp
 1001410:	dfc00117 	ldw	ra,4(sp)
 1001414:	df000017 	ldw	fp,0(sp)
 1001418:	dec00204 	addi	sp,sp,8
 100141c:	f800283a 	ret

01001420 <_ZN12MotorHandler9configureEv>:

/**
 * Configures the motor controller.
 */
void MotorHandler::configure(){
 1001420:	defffd04 	addi	sp,sp,-12
 1001424:	dfc00215 	stw	ra,8(sp)
 1001428:	df000115 	stw	fp,4(sp)
 100142c:	df000104 	addi	fp,sp,4
 1001430:	e13fff15 	stw	r4,-4(fp)
	reset();
 1001434:	e13fff17 	ldw	r4,-4(fp)
 1001438:	10013b40 	call	10013b4 <_ZN12MotorHandler5resetEv>
	send(MOTOR_START_BYTE, "start");
 100143c:	e13fff17 	ldw	r4,-4(fp)
 1001440:	017fe004 	movi	r5,-128
 1001444:	018040b4 	movhi	r6,258
 1001448:	31979604 	addi	r6,r6,24152
 100144c:	10012a80 	call	10012a8 <_ZN12MotorHandler4sendEcPKc>
	send(MOTOR_CHANGE_CONFIGURATION, "change configuration");
 1001450:	e13fff17 	ldw	r4,-4(fp)
 1001454:	01400084 	movi	r5,2
 1001458:	018040b4 	movhi	r6,258
 100145c:	31979c04 	addi	r6,r6,24176
 1001460:	10012a80 	call	10012a8 <_ZN12MotorHandler4sendEcPKc>
	send(0X01, "2 MOTOR CONFIG");
 1001464:	e13fff17 	ldw	r4,-4(fp)
 1001468:	01400044 	movi	r5,1
 100146c:	018040b4 	movhi	r6,258
 1001470:	3197a204 	addi	r6,r6,24200
 1001474:	10012a80 	call	10012a8 <_ZN12MotorHandler4sendEcPKc>
	MOTORHANDLER_LOG(printf("\n"));
}
 1001478:	e037883a 	mov	sp,fp
 100147c:	dfc00117 	ldw	ra,4(sp)
 1001480:	df000017 	ldw	fp,0(sp)
 1001484:	dec00204 	addi	sp,sp,8
 1001488:	f800283a 	ret

0100148c <_ZN12MotorHandler12getSpeedFromEPc>:
/**
 * Gets the speed from the given motor command.
 * The speed is the number following the motor and direction characters.
 * @return the speed
 */
int MotorHandler::getSpeedFrom(char *command) {
 100148c:	defffc04 	addi	sp,sp,-16
 1001490:	dfc00315 	stw	ra,12(sp)
 1001494:	df000215 	stw	fp,8(sp)
 1001498:	df000204 	addi	fp,sp,8
 100149c:	e13ffe15 	stw	r4,-8(fp)
 10014a0:	e17fff15 	stw	r5,-4(fp)
	return strtol(command + MOTOR_SPEED_INDEX, NULL, MOTOR_SPEED_BASE_AUTO);
 10014a4:	e0bfff17 	ldw	r2,-4(fp)
 10014a8:	110000c4 	addi	r4,r2,3
 10014ac:	000b883a 	mov	r5,zero
 10014b0:	000d883a 	mov	r6,zero
 10014b4:	100f9ac0 	call	100f9ac <strtol>
}
 10014b8:	e037883a 	mov	sp,fp
 10014bc:	dfc00117 	ldw	ra,4(sp)
 10014c0:	df000017 	ldw	fp,0(sp)
 10014c4:	dec00204 	addi	sp,sp,8
 10014c8:	f800283a 	ret

010014cc <_ZN12MotorHandler5parseEPc>:
 * $m - the motor to move, from {l, r} for "left" and "right"
 * $d - the direction to move in, from {f, b} for "forward" and "back"
 * $sss - the speed to move at, between 0 and 127
 * The command must be dynamically allocated, and will be freed at the end of this method.
 */
void MotorHandler::parse(char *command) {
 10014cc:	defffc04 	addi	sp,sp,-16
 10014d0:	dfc00315 	stw	ra,12(sp)
 10014d4:	df000215 	stw	fp,8(sp)
 10014d8:	df000204 	addi	fp,sp,8
 10014dc:	e13ffe15 	stw	r4,-8(fp)
 10014e0:	e17fff15 	stw	r5,-4(fp)
	MOTORHANDLER_LOG(printf("MotorHandler [command: %s]\n", command));
	if (command[MOTOR_MOTOR_INDEX] == MOTOR_BOTH) {
 10014e4:	e0bfff17 	ldw	r2,-4(fp)
 10014e8:	10800044 	addi	r2,r2,1
 10014ec:	10800003 	ldbu	r2,0(r2)
 10014f0:	10803fcc 	andi	r2,r2,255
 10014f4:	1080201c 	xori	r2,r2,128
 10014f8:	10bfe004 	addi	r2,r2,-128
 10014fc:	10801898 	cmpnei	r2,r2,98
 1001500:	1000361e 	bne	r2,zero,10015dc <_ZN12MotorHandler5parseEPc+0x110>
		if (command[MOTOR_DIRECTION_INDEX] == MOTOR_FORWARD) {
 1001504:	e0bfff17 	ldw	r2,-4(fp)
 1001508:	10800084 	addi	r2,r2,2
 100150c:	10800003 	ldbu	r2,0(r2)
 1001510:	10803fcc 	andi	r2,r2,255
 1001514:	1080201c 	xori	r2,r2,128
 1001518:	10bfe004 	addi	r2,r2,-128
 100151c:	10801998 	cmpnei	r2,r2,102
 1001520:	1000171e 	bne	r2,zero,1001580 <_ZN12MotorHandler5parseEPc+0xb4>
			move(MOTOR_RIGHT_FORWARD, getSpeedFrom(command), "motor right forward");
 1001524:	e13ffe17 	ldw	r4,-8(fp)
 1001528:	e17fff17 	ldw	r5,-4(fp)
 100152c:	100148c0 	call	100148c <_ZN12MotorHandler12getSpeedFromEPc>
 1001530:	11803fcc 	andi	r6,r2,255
 1001534:	3180201c 	xori	r6,r6,128
 1001538:	31bfe004 	addi	r6,r6,-128
 100153c:	e13ffe17 	ldw	r4,-8(fp)
 1001540:	014001c4 	movi	r5,7
 1001544:	01c040b4 	movhi	r7,258
 1001548:	39d7a604 	addi	r7,r7,24216
 100154c:	10013340 	call	1001334 <_ZN12MotorHandler4moveEccPKc>
			move(MOTOR_LEFT_FORWARD, getSpeedFrom(command), "motor left forward");
 1001550:	e13ffe17 	ldw	r4,-8(fp)
 1001554:	e17fff17 	ldw	r5,-4(fp)
 1001558:	100148c0 	call	100148c <_ZN12MotorHandler12getSpeedFromEPc>
 100155c:	11803fcc 	andi	r6,r2,255
 1001560:	3180201c 	xori	r6,r6,128
 1001564:	31bfe004 	addi	r6,r6,-128
 1001568:	e13ffe17 	ldw	r4,-8(fp)
 100156c:	01400144 	movi	r5,5
 1001570:	01c040b4 	movhi	r7,258
 1001574:	39d7ab04 	addi	r7,r7,24236
 1001578:	10013340 	call	1001334 <_ZN12MotorHandler4moveEccPKc>
 100157c:	00005e06 	br	10016f8 <_ZN12MotorHandler5parseEPc+0x22c>
		} else {
			move(MOTOR_LEFT_BACKWARD, getSpeedFrom(command), "motor left backward");
 1001580:	e13ffe17 	ldw	r4,-8(fp)
 1001584:	e17fff17 	ldw	r5,-4(fp)
 1001588:	100148c0 	call	100148c <_ZN12MotorHandler12getSpeedFromEPc>
 100158c:	11803fcc 	andi	r6,r2,255
 1001590:	3180201c 	xori	r6,r6,128
 1001594:	31bfe004 	addi	r6,r6,-128
 1001598:	e13ffe17 	ldw	r4,-8(fp)
 100159c:	01400104 	movi	r5,4
 10015a0:	01c040b4 	movhi	r7,258
 10015a4:	39d7b004 	addi	r7,r7,24256
 10015a8:	10013340 	call	1001334 <_ZN12MotorHandler4moveEccPKc>
			move(MOTOR_RIGHT_BACKWARD, getSpeedFrom(command), "motor right backward");
 10015ac:	e13ffe17 	ldw	r4,-8(fp)
 10015b0:	e17fff17 	ldw	r5,-4(fp)
 10015b4:	100148c0 	call	100148c <_ZN12MotorHandler12getSpeedFromEPc>
 10015b8:	11803fcc 	andi	r6,r2,255
 10015bc:	3180201c 	xori	r6,r6,128
 10015c0:	31bfe004 	addi	r6,r6,-128
 10015c4:	e13ffe17 	ldw	r4,-8(fp)
 10015c8:	01400184 	movi	r5,6
 10015cc:	01c040b4 	movhi	r7,258
 10015d0:	39d7b504 	addi	r7,r7,24276
 10015d4:	10013340 	call	1001334 <_ZN12MotorHandler4moveEccPKc>
 10015d8:	00004706 	br	10016f8 <_ZN12MotorHandler5parseEPc+0x22c>
		}
	} else if(command[MOTOR_MOTOR_INDEX] == MOTOR_LEFT) {
 10015dc:	e0bfff17 	ldw	r2,-4(fp)
 10015e0:	10800044 	addi	r2,r2,1
 10015e4:	10800003 	ldbu	r2,0(r2)
 10015e8:	10803fcc 	andi	r2,r2,255
 10015ec:	1080201c 	xori	r2,r2,128
 10015f0:	10bfe004 	addi	r2,r2,-128
 10015f4:	10801b18 	cmpnei	r2,r2,108
 10015f8:	1000201e 	bne	r2,zero,100167c <_ZN12MotorHandler5parseEPc+0x1b0>
		if (command[MOTOR_DIRECTION_INDEX] == MOTOR_FORWARD) {
 10015fc:	e0bfff17 	ldw	r2,-4(fp)
 1001600:	10800084 	addi	r2,r2,2
 1001604:	10800003 	ldbu	r2,0(r2)
 1001608:	10803fcc 	andi	r2,r2,255
 100160c:	1080201c 	xori	r2,r2,128
 1001610:	10bfe004 	addi	r2,r2,-128
 1001614:	10801998 	cmpnei	r2,r2,102
 1001618:	10000c1e 	bne	r2,zero,100164c <_ZN12MotorHandler5parseEPc+0x180>
			move(MOTOR_LEFT_FORWARD, getSpeedFrom(command), "motor left forward");
 100161c:	e13ffe17 	ldw	r4,-8(fp)
 1001620:	e17fff17 	ldw	r5,-4(fp)
 1001624:	100148c0 	call	100148c <_ZN12MotorHandler12getSpeedFromEPc>
 1001628:	11803fcc 	andi	r6,r2,255
 100162c:	3180201c 	xori	r6,r6,128
 1001630:	31bfe004 	addi	r6,r6,-128
 1001634:	e13ffe17 	ldw	r4,-8(fp)
 1001638:	01400144 	movi	r5,5
 100163c:	01c040b4 	movhi	r7,258
 1001640:	39d7ab04 	addi	r7,r7,24236
 1001644:	10013340 	call	1001334 <_ZN12MotorHandler4moveEccPKc>
 1001648:	00002b06 	br	10016f8 <_ZN12MotorHandler5parseEPc+0x22c>
		} else {
			move(MOTOR_LEFT_BACKWARD, getSpeedFrom(command), "motor left backward");
 100164c:	e13ffe17 	ldw	r4,-8(fp)
 1001650:	e17fff17 	ldw	r5,-4(fp)
 1001654:	100148c0 	call	100148c <_ZN12MotorHandler12getSpeedFromEPc>
 1001658:	11803fcc 	andi	r6,r2,255
 100165c:	3180201c 	xori	r6,r6,128
 1001660:	31bfe004 	addi	r6,r6,-128
 1001664:	e13ffe17 	ldw	r4,-8(fp)
 1001668:	01400104 	movi	r5,4
 100166c:	01c040b4 	movhi	r7,258
 1001670:	39d7b004 	addi	r7,r7,24256
 1001674:	10013340 	call	1001334 <_ZN12MotorHandler4moveEccPKc>
 1001678:	00001f06 	br	10016f8 <_ZN12MotorHandler5parseEPc+0x22c>
		}
	} else {
		if (command[MOTOR_DIRECTION_INDEX] == MOTOR_FORWARD) {
 100167c:	e0bfff17 	ldw	r2,-4(fp)
 1001680:	10800084 	addi	r2,r2,2
 1001684:	10800003 	ldbu	r2,0(r2)
 1001688:	10803fcc 	andi	r2,r2,255
 100168c:	1080201c 	xori	r2,r2,128
 1001690:	10bfe004 	addi	r2,r2,-128
 1001694:	10801998 	cmpnei	r2,r2,102
 1001698:	10000c1e 	bne	r2,zero,10016cc <_ZN12MotorHandler5parseEPc+0x200>
			move(MOTOR_RIGHT_FORWARD, getSpeedFrom(command), "motor right forward");
 100169c:	e13ffe17 	ldw	r4,-8(fp)
 10016a0:	e17fff17 	ldw	r5,-4(fp)
 10016a4:	100148c0 	call	100148c <_ZN12MotorHandler12getSpeedFromEPc>
 10016a8:	11803fcc 	andi	r6,r2,255
 10016ac:	3180201c 	xori	r6,r6,128
 10016b0:	31bfe004 	addi	r6,r6,-128
 10016b4:	e13ffe17 	ldw	r4,-8(fp)
 10016b8:	014001c4 	movi	r5,7
 10016bc:	01c040b4 	movhi	r7,258
 10016c0:	39d7a604 	addi	r7,r7,24216
 10016c4:	10013340 	call	1001334 <_ZN12MotorHandler4moveEccPKc>
 10016c8:	00000b06 	br	10016f8 <_ZN12MotorHandler5parseEPc+0x22c>
		} else {
			move(MOTOR_RIGHT_BACKWARD, getSpeedFrom(command), "motor right backward");
 10016cc:	e13ffe17 	ldw	r4,-8(fp)
 10016d0:	e17fff17 	ldw	r5,-4(fp)
 10016d4:	100148c0 	call	100148c <_ZN12MotorHandler12getSpeedFromEPc>
 10016d8:	11803fcc 	andi	r6,r2,255
 10016dc:	3180201c 	xori	r6,r6,128
 10016e0:	31bfe004 	addi	r6,r6,-128
 10016e4:	e13ffe17 	ldw	r4,-8(fp)
 10016e8:	01400184 	movi	r5,6
 10016ec:	01c040b4 	movhi	r7,258
 10016f0:	39d7b504 	addi	r7,r7,24276
 10016f4:	10013340 	call	1001334 <_ZN12MotorHandler4moveEccPKc>
		}
	}
	free(command);
 10016f8:	e13fff17 	ldw	r4,-4(fp)
 10016fc:	100e48c0 	call	100e48c <free>
}
 1001700:	e037883a 	mov	sp,fp
 1001704:	dfc00117 	ldw	ra,4(sp)
 1001708:	df000017 	ldw	fp,0(sp)
 100170c:	dec00204 	addi	sp,sp,8
 1001710:	f800283a 	ret

01001714 <_ZN12MotorHandlerC1Ev>:

/**
 * Creates a new motor handler.
 * @throw UARTOpenException if the handler cannot open the UART device used to talk to the motors
 */
MotorHandler::MotorHandler() {
 1001714:	deffe404 	addi	sp,sp,-112
 1001718:	dfc01b15 	stw	ra,108(sp)
 100171c:	df001a15 	stw	fp,104(sp)
 1001720:	ddc01915 	stw	r23,100(sp)
 1001724:	dd801815 	stw	r22,96(sp)
 1001728:	dd401715 	stw	r21,92(sp)
 100172c:	dd001615 	stw	r20,88(sp)
 1001730:	dcc01515 	stw	r19,84(sp)
 1001734:	dc801415 	stw	r18,80(sp)
 1001738:	dc401315 	stw	r17,76(sp)
 100173c:	dc001215 	stw	r16,72(sp)
 1001740:	df001204 	addi	fp,sp,72
 1001744:	e13fee15 	stw	r4,-72(fp)
 1001748:	00804074 	movhi	r2,257
 100174c:	10b41004 	addi	r2,r2,-12224
 1001750:	e0bff515 	stw	r2,-44(fp)
 1001754:	008040b4 	movhi	r2,258
 1001758:	1095fd04 	addi	r2,r2,22516
 100175c:	e0bff615 	stw	r2,-40(fp)
 1001760:	e0bff704 	addi	r2,fp,-36
 1001764:	e0ffee04 	addi	r3,fp,-72
 1001768:	10c00015 	stw	r3,0(r2)
 100176c:	00c04034 	movhi	r3,256
 1001770:	18c60a04 	addi	r3,r3,6184
 1001774:	10c00115 	stw	r3,4(r2)
 1001778:	16c00215 	stw	sp,8(r2)
 100177c:	e13fef04 	addi	r4,fp,-68
 1001780:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1001784:	e13fee17 	ldw	r4,-72(fp)
 1001788:	00bfffc4 	movi	r2,-1
 100178c:	e0bff015 	stw	r2,-64(fp)
 1001790:	1000d4c0 	call	1000d4c <_ZN8ListenerC2Ev>
 1001794:	00c040b4 	movhi	r3,258
 1001798:	18d7c104 	addi	r3,r3,24324
 100179c:	e0bfee17 	ldw	r2,-72(fp)
 10017a0:	10c00015 	stw	r3,0(r2)
	// Enable the motor controller.
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MOTOR_RESET_N_BASE, MOTOR_ENABLE);
 10017a4:	00c08074 	movhi	r3,513
 10017a8:	18e81c04 	addi	r3,r3,-24464
 10017ac:	00800044 	movi	r2,1
 10017b0:	18800035 	stwio	r2,0(r3)
	// Open the serial device to send commands to the motor controller.
	motor_dev = alt_up_rs232_open_dev(UART_MOTOR_NAME);
 10017b4:	00800044 	movi	r2,1
 10017b8:	e0bff015 	stw	r2,-64(fp)
 10017bc:	010040b4 	movhi	r4,258
 10017c0:	2117bb04 	addi	r4,r4,24300
 10017c4:	10237f80 	call	10237f8 <alt_up_rs232_open_dev>
 10017c8:	1007883a 	mov	r3,r2
 10017cc:	e0bfee17 	ldw	r2,-72(fp)
 10017d0:	10c00615 	stw	r3,24(r2)
	if (motor_dev == NULL) {
 10017d4:	e0bfee17 	ldw	r2,-72(fp)
 10017d8:	10800617 	ldw	r2,24(r2)
 10017dc:	1004c03a 	cmpne	r2,r2,zero
 10017e0:	10001e1e 	bne	r2,zero,100185c <_ZN12MotorHandlerC1Ev+0x148>
		throw new UARTOpenException();
 10017e4:	01000104 	movi	r4,4
 10017e8:	100dda00 	call	100dda0 <_Znwm>
 10017ec:	e0bffd15 	stw	r2,-12(fp)
 10017f0:	e13ffd17 	ldw	r4,-12(fp)
 10017f4:	1001b180 	call	1001b18 <_ZN17UARTOpenExceptionC1Ev>
 10017f8:	e0bffd17 	ldw	r2,-12(fp)
 10017fc:	e0bffe15 	stw	r2,-8(fp)
 1001800:	01000104 	movi	r4,4
 1001804:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1001808:	1009883a 	mov	r4,r2
 100180c:	2005883a 	mov	r2,r4
 1001810:	e0fffe17 	ldw	r3,-8(fp)
 1001814:	10c00015 	stw	r3,0(r2)
 1001818:	014040b4 	movhi	r5,258
 100181c:	2957cb04 	addi	r5,r5,24364
 1001820:	000d883a 	mov	r6,zero
 1001824:	100d8900 	call	100d890 <__cxa_throw>
 1001828:	e7001204 	addi	fp,fp,72
 100182c:	e0bff117 	ldw	r2,-60(fp)
 1001830:	e0bfff15 	stw	r2,-4(fp)
	}
}
 1001834:	e0ffff17 	ldw	r3,-4(fp)
 1001838:	e0fffc15 	stw	r3,-16(fp)
 100183c:	e13fee17 	ldw	r4,-72(fp)
 1001840:	1000a300 	call	1000a30 <_ZN8ListenerD2Ev>
 1001844:	e0bffc17 	ldw	r2,-16(fp)
 1001848:	e0bfff15 	stw	r2,-4(fp)
 100184c:	00bfffc4 	movi	r2,-1
 1001850:	e0bff015 	stw	r2,-64(fp)
 1001854:	e13fff17 	ldw	r4,-4(fp)
 1001858:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100185c:	e13fef04 	addi	r4,fp,-68
 1001860:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1001864:	e037883a 	mov	sp,fp
 1001868:	dfc00917 	ldw	ra,36(sp)
 100186c:	df000817 	ldw	fp,32(sp)
 1001870:	ddc00717 	ldw	r23,28(sp)
 1001874:	dd800617 	ldw	r22,24(sp)
 1001878:	dd400517 	ldw	r21,20(sp)
 100187c:	dd000417 	ldw	r20,16(sp)
 1001880:	dcc00317 	ldw	r19,12(sp)
 1001884:	dc800217 	ldw	r18,8(sp)
 1001888:	dc400117 	ldw	r17,4(sp)
 100188c:	dc000017 	ldw	r16,0(sp)
 1001890:	dec00a04 	addi	sp,sp,40
 1001894:	f800283a 	ret

01001898 <_ZN12MotorHandlerC2Ev>:

/**
 * Creates a new motor handler.
 * @throw UARTOpenException if the handler cannot open the UART device used to talk to the motors
 */
MotorHandler::MotorHandler() {
 1001898:	deffe404 	addi	sp,sp,-112
 100189c:	dfc01b15 	stw	ra,108(sp)
 10018a0:	df001a15 	stw	fp,104(sp)
 10018a4:	ddc01915 	stw	r23,100(sp)
 10018a8:	dd801815 	stw	r22,96(sp)
 10018ac:	dd401715 	stw	r21,92(sp)
 10018b0:	dd001615 	stw	r20,88(sp)
 10018b4:	dcc01515 	stw	r19,84(sp)
 10018b8:	dc801415 	stw	r18,80(sp)
 10018bc:	dc401315 	stw	r17,76(sp)
 10018c0:	dc001215 	stw	r16,72(sp)
 10018c4:	df001204 	addi	fp,sp,72
 10018c8:	e13fee15 	stw	r4,-72(fp)
 10018cc:	00804074 	movhi	r2,257
 10018d0:	10b41004 	addi	r2,r2,-12224
 10018d4:	e0bff515 	stw	r2,-44(fp)
 10018d8:	008040b4 	movhi	r2,258
 10018dc:	1095fe84 	addi	r2,r2,22522
 10018e0:	e0bff615 	stw	r2,-40(fp)
 10018e4:	e0bff704 	addi	r2,fp,-36
 10018e8:	e0ffee04 	addi	r3,fp,-72
 10018ec:	10c00015 	stw	r3,0(r2)
 10018f0:	00c04034 	movhi	r3,256
 10018f4:	18c66b04 	addi	r3,r3,6572
 10018f8:	10c00115 	stw	r3,4(r2)
 10018fc:	16c00215 	stw	sp,8(r2)
 1001900:	e13fef04 	addi	r4,fp,-68
 1001904:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1001908:	e13fee17 	ldw	r4,-72(fp)
 100190c:	00bfffc4 	movi	r2,-1
 1001910:	e0bff015 	stw	r2,-64(fp)
 1001914:	1000d4c0 	call	1000d4c <_ZN8ListenerC2Ev>
 1001918:	00c040b4 	movhi	r3,258
 100191c:	18d7c104 	addi	r3,r3,24324
 1001920:	e0bfee17 	ldw	r2,-72(fp)
 1001924:	10c00015 	stw	r3,0(r2)
	// Enable the motor controller.
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MOTOR_RESET_N_BASE, MOTOR_ENABLE);
 1001928:	00c08074 	movhi	r3,513
 100192c:	18e81c04 	addi	r3,r3,-24464
 1001930:	00800044 	movi	r2,1
 1001934:	18800035 	stwio	r2,0(r3)
	// Open the serial device to send commands to the motor controller.
	motor_dev = alt_up_rs232_open_dev(UART_MOTOR_NAME);
 1001938:	00800044 	movi	r2,1
 100193c:	e0bff015 	stw	r2,-64(fp)
 1001940:	010040b4 	movhi	r4,258
 1001944:	2117bb04 	addi	r4,r4,24300
 1001948:	10237f80 	call	10237f8 <alt_up_rs232_open_dev>
 100194c:	1007883a 	mov	r3,r2
 1001950:	e0bfee17 	ldw	r2,-72(fp)
 1001954:	10c00615 	stw	r3,24(r2)
	if (motor_dev == NULL) {
 1001958:	e0bfee17 	ldw	r2,-72(fp)
 100195c:	10800617 	ldw	r2,24(r2)
 1001960:	1004c03a 	cmpne	r2,r2,zero
 1001964:	10001e1e 	bne	r2,zero,10019e0 <_ZN12MotorHandlerC2Ev+0x148>
		throw new UARTOpenException();
 1001968:	01000104 	movi	r4,4
 100196c:	100dda00 	call	100dda0 <_Znwm>
 1001970:	e0bffd15 	stw	r2,-12(fp)
 1001974:	e13ffd17 	ldw	r4,-12(fp)
 1001978:	1001b180 	call	1001b18 <_ZN17UARTOpenExceptionC1Ev>
 100197c:	e0bffd17 	ldw	r2,-12(fp)
 1001980:	e0bffe15 	stw	r2,-8(fp)
 1001984:	01000104 	movi	r4,4
 1001988:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 100198c:	1009883a 	mov	r4,r2
 1001990:	2005883a 	mov	r2,r4
 1001994:	e0fffe17 	ldw	r3,-8(fp)
 1001998:	10c00015 	stw	r3,0(r2)
 100199c:	014040b4 	movhi	r5,258
 10019a0:	2957cb04 	addi	r5,r5,24364
 10019a4:	000d883a 	mov	r6,zero
 10019a8:	100d8900 	call	100d890 <__cxa_throw>
 10019ac:	e7001204 	addi	fp,fp,72
 10019b0:	e0bff117 	ldw	r2,-60(fp)
 10019b4:	e0bfff15 	stw	r2,-4(fp)
	}
}
 10019b8:	e0ffff17 	ldw	r3,-4(fp)
 10019bc:	e0fffc15 	stw	r3,-16(fp)
 10019c0:	e13fee17 	ldw	r4,-72(fp)
 10019c4:	1000a300 	call	1000a30 <_ZN8ListenerD2Ev>
 10019c8:	e0bffc17 	ldw	r2,-16(fp)
 10019cc:	e0bfff15 	stw	r2,-4(fp)
 10019d0:	00bfffc4 	movi	r2,-1
 10019d4:	e0bff015 	stw	r2,-64(fp)
 10019d8:	e13fff17 	ldw	r4,-4(fp)
 10019dc:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 10019e0:	e13fef04 	addi	r4,fp,-68
 10019e4:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 10019e8:	e037883a 	mov	sp,fp
 10019ec:	dfc00917 	ldw	ra,36(sp)
 10019f0:	df000817 	ldw	fp,32(sp)
 10019f4:	ddc00717 	ldw	r23,28(sp)
 10019f8:	dd800617 	ldw	r22,24(sp)
 10019fc:	dd400517 	ldw	r21,20(sp)
 1001a00:	dd000417 	ldw	r20,16(sp)
 1001a04:	dcc00317 	ldw	r19,12(sp)
 1001a08:	dc800217 	ldw	r18,8(sp)
 1001a0c:	dc400117 	ldw	r17,4(sp)
 1001a10:	dc000017 	ldw	r16,0(sp)
 1001a14:	dec00a04 	addi	sp,sp,40
 1001a18:	f800283a 	ret

01001a1c <_Z25motor_handler_update_taskPv>:
// TASKS

extern MotorHandler *motor;

/* Waits for motor commands and executes them as they arrive. */
void motor_handler_update_task(void *pdata) {
 1001a1c:	deffe604 	addi	sp,sp,-104
 1001a20:	dfc01915 	stw	ra,100(sp)
 1001a24:	df001815 	stw	fp,96(sp)
 1001a28:	ddc01715 	stw	r23,92(sp)
 1001a2c:	dd801615 	stw	r22,88(sp)
 1001a30:	dd401515 	stw	r21,84(sp)
 1001a34:	dd001415 	stw	r20,80(sp)
 1001a38:	dcc01315 	stw	r19,76(sp)
 1001a3c:	dc801215 	stw	r18,72(sp)
 1001a40:	dc401115 	stw	r17,68(sp)
 1001a44:	dc001015 	stw	r16,64(sp)
 1001a48:	df001004 	addi	fp,sp,64
 1001a4c:	e13ff115 	stw	r4,-60(fp)
 1001a50:	00804074 	movhi	r2,257
 1001a54:	10b41004 	addi	r2,r2,-12224
 1001a58:	e0bff815 	stw	r2,-32(fp)
 1001a5c:	008040b4 	movhi	r2,258
 1001a60:	10960004 	addi	r2,r2,22528
 1001a64:	e0bff915 	stw	r2,-28(fp)
 1001a68:	e0bffa04 	addi	r2,fp,-24
 1001a6c:	e0fff004 	addi	r3,fp,-64
 1001a70:	10c00015 	stw	r3,0(r2)
 1001a74:	00c04034 	movhi	r3,256
 1001a78:	18c6ac04 	addi	r3,r3,6832
 1001a7c:	10c00115 	stw	r3,4(r2)
 1001a80:	16c00215 	stw	sp,8(r2)
 1001a84:	e13ff204 	addi	r4,fp,-56
 1001a88:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1001a8c:	00000006 	br	1001a90 <_Z25motor_handler_update_taskPv+0x74>
	TASK_LOG(printf("MotorHandler [task: update, status: start]\n"));
	while (true) {
		try {
			// Update the motor handler.
			motor->update();
 1001a90:	008040f4 	movhi	r2,259
 1001a94:	10a40204 	addi	r2,r2,-28664
 1001a98:	10800017 	ldw	r2,0(r2)
 1001a9c:	1009883a 	mov	r4,r2
 1001aa0:	00800044 	movi	r2,1
 1001aa4:	e0bff315 	stw	r2,-52(fp)
 1001aa8:	1000bf80 	call	1000bf8 <_ZN8Listener6updateEv>
 1001aac:	003ff806 	br	1001a90 <_Z25motor_handler_update_taskPv+0x74>
 1001ab0:	e7001004 	addi	fp,fp,64
 1001ab4:	e0bff417 	ldw	r2,-48(fp)
 1001ab8:	e0bfff15 	stw	r2,-4(fp)
 1001abc:	e0bff517 	ldw	r2,-44(fp)
 1001ac0:	10800060 	cmpeqi	r2,r2,1
 1001ac4:	1000041e 	bne	r2,zero,1001ad8 <_Z25motor_handler_update_taskPv+0xbc>
 1001ac8:	00bfffc4 	movi	r2,-1
 1001acc:	e0bff315 	stw	r2,-52(fp)
 1001ad0:	e13fff17 	ldw	r4,-4(fp)
 1001ad4:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
		} catch (ARCapException &e) {
 1001ad8:	e13fff17 	ldw	r4,-4(fp)
 1001adc:	100d6f80 	call	100d6f8 <__cxa_begin_catch>
 1001ae0:	e0bff015 	stw	r2,-64(fp)
 1001ae4:	e03ff315 	stw	zero,-52(fp)
 1001ae8:	100d6540 	call	100d654 <__cxa_end_catch>
extern MotorHandler *motor;

/* Waits for motor commands and executes them as they arrive. */
void motor_handler_update_task(void *pdata) {
	TASK_LOG(printf("MotorHandler [task: update, status: start]\n"));
	while (true) {
 1001aec:	003fe806 	br	1001a90 <_Z25motor_handler_update_taskPv+0x74>

01001af0 <_ZNK17UARTOpenException4whatEv>:
	}
};

class UARTOpenException : ARCapException {
public:
	virtual const char *what() const throw() {
 1001af0:	defffe04 	addi	sp,sp,-8
 1001af4:	df000115 	stw	fp,4(sp)
 1001af8:	df000104 	addi	fp,sp,4
 1001afc:	e13fff15 	stw	r4,-4(fp)
		return "Failed to open connection to UART.";
 1001b00:	008040b4 	movhi	r2,258
 1001b04:	10978104 	addi	r2,r2,24068
	}
 1001b08:	e037883a 	mov	sp,fp
 1001b0c:	df000017 	ldw	fp,0(sp)
 1001b10:	dec00104 	addi	sp,sp,4
 1001b14:	f800283a 	ret

01001b18 <_ZN17UARTOpenExceptionC1Ev>:
	virtual const char *what() const throw() {
		return "Failed to post to listener queue.";
	}
};

class UARTOpenException : ARCapException {
 1001b18:	defffd04 	addi	sp,sp,-12
 1001b1c:	dfc00215 	stw	ra,8(sp)
 1001b20:	df000115 	stw	fp,4(sp)
 1001b24:	df000104 	addi	fp,sp,4
 1001b28:	e13fff15 	stw	r4,-4(fp)
 1001b2c:	e13fff17 	ldw	r4,-4(fp)
 1001b30:	10004600 	call	1000460 <_ZN14ARCapExceptionC2Ev>
 1001b34:	00c040b4 	movhi	r3,258
 1001b38:	18d7e204 	addi	r3,r3,24456
 1001b3c:	e0bfff17 	ldw	r2,-4(fp)
 1001b40:	10c00015 	stw	r3,0(r2)
 1001b44:	e037883a 	mov	sp,fp
 1001b48:	dfc00117 	ldw	ra,4(sp)
 1001b4c:	df000017 	ldw	fp,0(sp)
 1001b50:	dec00204 	addi	sp,sp,8
 1001b54:	f800283a 	ret

01001b58 <_ZN12MotorHandlerD0Ev>:
 * The command must specify:
 * (a) which motor to run {l(eft), r(ight)},
 * (b) the direction to run the motor in {(f)orward, (b)ackward}
 * (c) the speed to run the motor at [0 to 127].
 */
class MotorHandler: public Listener {
 1001b58:	defffd04 	addi	sp,sp,-12
 1001b5c:	dfc00215 	stw	ra,8(sp)
 1001b60:	df000115 	stw	fp,4(sp)
 1001b64:	df000104 	addi	fp,sp,4
 1001b68:	e13fff15 	stw	r4,-4(fp)
 1001b6c:	00c040b4 	movhi	r3,258
 1001b70:	18d7c104 	addi	r3,r3,24324
 1001b74:	e0bfff17 	ldw	r2,-4(fp)
 1001b78:	10c00015 	stw	r3,0(r2)
 1001b7c:	e13fff17 	ldw	r4,-4(fp)
 1001b80:	1000a300 	call	1000a30 <_ZN8ListenerD2Ev>
 1001b84:	00800044 	movi	r2,1
 1001b88:	10803fcc 	andi	r2,r2,255
 1001b8c:	1005003a 	cmpeq	r2,r2,zero
 1001b90:	1000021e 	bne	r2,zero,1001b9c <_ZN12MotorHandlerD0Ev+0x44>
 1001b94:	e13fff17 	ldw	r4,-4(fp)
 1001b98:	100d8100 	call	100d810 <_ZdlPv>
 1001b9c:	e037883a 	mov	sp,fp
 1001ba0:	dfc00117 	ldw	ra,4(sp)
 1001ba4:	df000017 	ldw	fp,0(sp)
 1001ba8:	dec00204 	addi	sp,sp,8
 1001bac:	f800283a 	ret

01001bb0 <_ZN12MotorHandlerD1Ev>:
 1001bb0:	defffd04 	addi	sp,sp,-12
 1001bb4:	dfc00215 	stw	ra,8(sp)
 1001bb8:	df000115 	stw	fp,4(sp)
 1001bbc:	df000104 	addi	fp,sp,4
 1001bc0:	e13fff15 	stw	r4,-4(fp)
 1001bc4:	00c040b4 	movhi	r3,258
 1001bc8:	18d7c104 	addi	r3,r3,24324
 1001bcc:	e0bfff17 	ldw	r2,-4(fp)
 1001bd0:	10c00015 	stw	r3,0(r2)
 1001bd4:	e13fff17 	ldw	r4,-4(fp)
 1001bd8:	1000a300 	call	1000a30 <_ZN8ListenerD2Ev>
 1001bdc:	0005883a 	mov	r2,zero
 1001be0:	10803fcc 	andi	r2,r2,255
 1001be4:	1005003a 	cmpeq	r2,r2,zero
 1001be8:	1000021e 	bne	r2,zero,1001bf4 <_ZN12MotorHandlerD1Ev+0x44>
 1001bec:	e13fff17 	ldw	r4,-4(fp)
 1001bf0:	100d8100 	call	100d810 <_ZdlPv>
 1001bf4:	e037883a 	mov	sp,fp
 1001bf8:	dfc00117 	ldw	ra,4(sp)
 1001bfc:	df000017 	ldw	fp,0(sp)
 1001c00:	dec00204 	addi	sp,sp,8
 1001c04:	f800283a 	ret

01001c08 <_ZN17UARTOpenExceptionD0Ev>:
 1001c08:	defffd04 	addi	sp,sp,-12
 1001c0c:	dfc00215 	stw	ra,8(sp)
 1001c10:	df000115 	stw	fp,4(sp)
 1001c14:	df000104 	addi	fp,sp,4
 1001c18:	e13fff15 	stw	r4,-4(fp)
 1001c1c:	00c040b4 	movhi	r3,258
 1001c20:	18d7e204 	addi	r3,r3,24456
 1001c24:	e0bfff17 	ldw	r2,-4(fp)
 1001c28:	10c00015 	stw	r3,0(r2)
 1001c2c:	e13fff17 	ldw	r4,-4(fp)
 1001c30:	10005200 	call	1000520 <_ZN14ARCapExceptionD2Ev>
 1001c34:	00800044 	movi	r2,1
 1001c38:	10803fcc 	andi	r2,r2,255
 1001c3c:	1005003a 	cmpeq	r2,r2,zero
 1001c40:	1000021e 	bne	r2,zero,1001c4c <_ZN17UARTOpenExceptionD0Ev+0x44>
 1001c44:	e13fff17 	ldw	r4,-4(fp)
 1001c48:	100d8100 	call	100d810 <_ZdlPv>
 1001c4c:	e037883a 	mov	sp,fp
 1001c50:	dfc00117 	ldw	ra,4(sp)
 1001c54:	df000017 	ldw	fp,0(sp)
 1001c58:	dec00204 	addi	sp,sp,8
 1001c5c:	f800283a 	ret

01001c60 <_ZN17UARTOpenExceptionD1Ev>:
 1001c60:	defffd04 	addi	sp,sp,-12
 1001c64:	dfc00215 	stw	ra,8(sp)
 1001c68:	df000115 	stw	fp,4(sp)
 1001c6c:	df000104 	addi	fp,sp,4
 1001c70:	e13fff15 	stw	r4,-4(fp)
 1001c74:	00c040b4 	movhi	r3,258
 1001c78:	18d7e204 	addi	r3,r3,24456
 1001c7c:	e0bfff17 	ldw	r2,-4(fp)
 1001c80:	10c00015 	stw	r3,0(r2)
 1001c84:	e13fff17 	ldw	r4,-4(fp)
 1001c88:	10005200 	call	1000520 <_ZN14ARCapExceptionD2Ev>
 1001c8c:	0005883a 	mov	r2,zero
 1001c90:	10803fcc 	andi	r2,r2,255
 1001c94:	1005003a 	cmpeq	r2,r2,zero
 1001c98:	1000021e 	bne	r2,zero,1001ca4 <_ZN17UARTOpenExceptionD1Ev+0x44>
 1001c9c:	e13fff17 	ldw	r4,-4(fp)
 1001ca0:	100d8100 	call	100d810 <_ZdlPv>
 1001ca4:	e037883a 	mov	sp,fp
 1001ca8:	dfc00117 	ldw	ra,4(sp)
 1001cac:	df000017 	ldw	fp,0(sp)
 1001cb0:	dec00204 	addi	sp,sp,8
 1001cb4:	f800283a 	ret

01001cb8 <_ZN15NetworkReceiver4postEPKc>:
 * Posts a network event to the matching listener.
 * @param event - the name and parameters of the event.
 * The event will be posted to the listener whose key matches the first character of the event.
 * @throw PostException if the event cannot be posted to the matching listener
 */
void NetworkReceiver::post(const char *event) {
 1001cb8:	defff604 	addi	sp,sp,-40
 1001cbc:	dfc00915 	stw	ra,36(sp)
 1001cc0:	df000815 	stw	fp,32(sp)
 1001cc4:	dc000715 	stw	r16,28(sp)
 1001cc8:	df000704 	addi	fp,sp,28
 1001ccc:	e13ffe15 	stw	r4,-8(fp)
 1001cd0:	e17fff15 	stw	r5,-4(fp)
	char key = event[0];
 1001cd4:	e0bfff17 	ldw	r2,-4(fp)
 1001cd8:	10800003 	ldbu	r2,0(r2)
 1001cdc:	e0bffb05 	stb	r2,-20(fp)
	int index = 0;
 1001ce0:	e03ffa15 	stw	zero,-24(fp)
	int status;
	for (vector<char>::iterator it = keys.begin(); it != keys.end(); ++it) {
 1001ce4:	e0bffe17 	ldw	r2,-8(fp)
 1001ce8:	11000104 	addi	r4,r2,4
 1001cec:	10023b00 	call	10023b0 <_ZNSt6vectorIcSaIcEE5beginEv>
 1001cf0:	e0bffd15 	stw	r2,-12(fp)
 1001cf4:	00002a06 	br	1001da0 <_ZN15NetworkReceiver4postEPKc+0xe8>
		// Look for a matching key.
		if (key == *it) {
 1001cf8:	e13ffd04 	addi	r4,fp,-12
 1001cfc:	10020f00 	call	10020f0 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 1001d00:	10800003 	ldbu	r2,0(r2)
 1001d04:	10c03fcc 	andi	r3,r2,255
 1001d08:	18c0201c 	xori	r3,r3,128
 1001d0c:	18ffe004 	addi	r3,r3,-128
 1001d10:	e0bffb07 	ldb	r2,-20(fp)
 1001d14:	1885003a 	cmpeq	r2,r3,r2
 1001d18:	10803fcc 	andi	r2,r2,255
 1001d1c:	1005003a 	cmpeq	r2,r2,zero
 1001d20:	10001a1e 	bne	r2,zero,1001d8c <_ZN15NetworkReceiver4postEPKc+0xd4>
			// Post to the matching listener.
			status = OSQPost(listeners[index], (void *)event);
 1001d24:	e0bffe17 	ldw	r2,-8(fp)
 1001d28:	11000404 	addi	r4,r2,16
 1001d2c:	e17ffa17 	ldw	r5,-24(fp)
 1001d30:	100272c0 	call	100272c <_ZNSt6vectorIP8os_eventSaIS1_EEixEm>
 1001d34:	11000017 	ldw	r4,0(r2)
 1001d38:	e17fff17 	ldw	r5,-4(fp)
 1001d3c:	101e6cc0 	call	101e6cc <OSQPost>
 1001d40:	10803fcc 	andi	r2,r2,255
 1001d44:	e0bff915 	stw	r2,-28(fp)
			if (status != OS_NO_ERR) {
 1001d48:	e0bff917 	ldw	r2,-28(fp)
 1001d4c:	1005003a 	cmpeq	r2,r2,zero
 1001d50:	10000e1e 	bne	r2,zero,1001d8c <_ZN15NetworkReceiver4postEPKc+0xd4>
				throw new QueuePostException();
 1001d54:	01000104 	movi	r4,4
 1001d58:	100dda00 	call	100dda0 <_Znwm>
 1001d5c:	1021883a 	mov	r16,r2
 1001d60:	8009883a 	mov	r4,r16
 1001d64:	10004e00 	call	10004e0 <_ZN18QueuePostExceptionC1Ev>
 1001d68:	01000104 	movi	r4,4
 1001d6c:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1001d70:	1009883a 	mov	r4,r2
 1001d74:	2005883a 	mov	r2,r4
 1001d78:	14000015 	stw	r16,0(r2)
 1001d7c:	014040b4 	movhi	r5,258
 1001d80:	2956df04 	addi	r5,r5,23420
 1001d84:	000d883a 	mov	r6,zero
 1001d88:	100d8900 	call	100d890 <__cxa_throw>
			}
		}
		// Go the next key.
		index++;
 1001d8c:	e0bffa17 	ldw	r2,-24(fp)
 1001d90:	10800044 	addi	r2,r2,1
 1001d94:	e0bffa15 	stw	r2,-24(fp)
 */
void NetworkReceiver::post(const char *event) {
	char key = event[0];
	int index = 0;
	int status;
	for (vector<char>::iterator it = keys.begin(); it != keys.end(); ++it) {
 1001d98:	e13ffd04 	addi	r4,fp,-12
 1001d9c:	10020b80 	call	10020b8 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
 1001da0:	e0bffe17 	ldw	r2,-8(fp)
 1001da4:	11000104 	addi	r4,r2,4
 1001da8:	10023e80 	call	10023e8 <_ZNSt6vectorIcSaIcEE3endEv>
 1001dac:	e0bffc15 	stw	r2,-16(fp)
 1001db0:	e13ffd04 	addi	r4,fp,-12
 1001db4:	e17ffc04 	addi	r5,fp,-16
 1001db8:	10024480 	call	1002448 <_ZN9__gnu_cxxneIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 1001dbc:	10803fcc 	andi	r2,r2,255
 1001dc0:	1004c03a 	cmpne	r2,r2,zero
 1001dc4:	103fcc1e 	bne	r2,zero,1001cf8 <_ZN15NetworkReceiver4postEPKc+0x40>
			}
		}
		// Go the next key.
		index++;
	}
}
 1001dc8:	e037883a 	mov	sp,fp
 1001dcc:	dfc00217 	ldw	ra,8(sp)
 1001dd0:	df000117 	ldw	fp,4(sp)
 1001dd4:	dc000017 	ldw	r16,0(sp)
 1001dd8:	dec00304 	addi	sp,sp,12
 1001ddc:	f800283a 	ret

01001de0 <_ZN15NetworkReceiver6updateEv>:
/**
 * Updates this receiver. The receiver will check the wifi handler for new TCP messages
 * and forward them to the corresponding listeners.
 * @throw PostException if a message cannot be posted to a listener
 */
void NetworkReceiver::update() {
 1001de0:	defffc04 	addi	sp,sp,-16
 1001de4:	dfc00315 	stw	ra,12(sp)
 1001de8:	df000215 	stw	fp,8(sp)
 1001dec:	df000204 	addi	fp,sp,8
 1001df0:	e13fff15 	stw	r4,-4(fp)
	if (wifi->hasData()) {
 1001df4:	e0bfff17 	ldw	r2,-4(fp)
 1001df8:	11000017 	ldw	r4,0(r2)
 1001dfc:	100427c0 	call	100427c <_ZN11WifiHandler7hasDataEv>
 1001e00:	10803fcc 	andi	r2,r2,255
 1001e04:	1005003a 	cmpeq	r2,r2,zero
 1001e08:	10000a1e 	bne	r2,zero,1001e34 <_ZN15NetworkReceiver6updateEv+0x54>
		char *message = wifi->tcpReceive();
 1001e0c:	e0bfff17 	ldw	r2,-4(fp)
 1001e10:	11000017 	ldw	r4,0(r2)
 1001e14:	1004f3c0 	call	1004f3c <_ZN11WifiHandler10tcpReceiveEv>
 1001e18:	e0bffe15 	stw	r2,-8(fp)
		if (message == NULL) {
 1001e1c:	e0bffe17 	ldw	r2,-8(fp)
 1001e20:	1005003a 	cmpeq	r2,r2,zero
 1001e24:	1000031e 	bne	r2,zero,1001e34 <_ZN15NetworkReceiver6updateEv+0x54>
			NETWORKRECEIVER_LOG(printf("[NetworkReceiver] error: wifi busy\n"));
		} else {
			NETWORKRECEIVER_LOG(printf("[NetworkReceiver] message: %s", message));
			post(message);
 1001e28:	e13fff17 	ldw	r4,-4(fp)
 1001e2c:	e17ffe17 	ldw	r5,-8(fp)
 1001e30:	1001cb80 	call	1001cb8 <_ZN15NetworkReceiver4postEPKc>
		}
	}
}
 1001e34:	e037883a 	mov	sp,fp
 1001e38:	dfc00117 	ldw	ra,4(sp)
 1001e3c:	df000017 	ldw	fp,0(sp)
 1001e40:	dec00204 	addi	sp,sp,8
 1001e44:	f800283a 	ret

01001e48 <_ZN15NetworkReceiverC1EP11WifiHandler>:

/**
 * Creates a new network receiver.
 * @param wifi - the wifi handler to use to receive messages from the server
 */
NetworkReceiver::NetworkReceiver(WifiHandler *wifiHandler) {
 1001e48:	defffa04 	addi	sp,sp,-24
 1001e4c:	dfc00515 	stw	ra,20(sp)
 1001e50:	df000415 	stw	fp,16(sp)
 1001e54:	dc000315 	stw	r16,12(sp)
 1001e58:	df000304 	addi	fp,sp,12
 1001e5c:	e13ffe15 	stw	r4,-8(fp)
 1001e60:	e17fff15 	stw	r5,-4(fp)
 1001e64:	e0bffe17 	ldw	r2,-8(fp)
 1001e68:	14000104 	addi	r16,r2,4
 1001e6c:	e13ffd44 	addi	r4,fp,-11
 1001e70:	1007ca40 	call	1007ca4 <_ZNSaIcEC1Ev>
 1001e74:	e17ffd44 	addi	r5,fp,-11
 1001e78:	8009883a 	mov	r4,r16
 1001e7c:	10025480 	call	1002548 <_ZNSt6vectorIcSaIcEEC1ERKS0_>
 1001e80:	e13ffd44 	addi	r4,fp,-11
 1001e84:	1007cd00 	call	1007cd0 <_ZNSaIcED1Ev>
 1001e88:	e0bffe17 	ldw	r2,-8(fp)
 1001e8c:	14000404 	addi	r16,r2,16
 1001e90:	e13ffd04 	addi	r4,fp,-12
 1001e94:	100218c0 	call	100218c <_ZNSaIP8os_eventEC1Ev>
 1001e98:	8009883a 	mov	r4,r16
 1001e9c:	e17ffd04 	addi	r5,fp,-12
 1001ea0:	10026080 	call	1002608 <_ZNSt6vectorIP8os_eventSaIS1_EEC1ERKS2_>
 1001ea4:	e13ffd04 	addi	r4,fp,-12
 1001ea8:	10021dc0 	call	10021dc <_ZNSaIP8os_eventED1Ev>
	wifi = wifiHandler;
 1001eac:	e0fffe17 	ldw	r3,-8(fp)
 1001eb0:	e0bfff17 	ldw	r2,-4(fp)
 1001eb4:	18800015 	stw	r2,0(r3)
}
 1001eb8:	e037883a 	mov	sp,fp
 1001ebc:	dfc00217 	ldw	ra,8(sp)
 1001ec0:	df000117 	ldw	fp,4(sp)
 1001ec4:	dc000017 	ldw	r16,0(sp)
 1001ec8:	dec00304 	addi	sp,sp,12
 1001ecc:	f800283a 	ret

01001ed0 <_ZN15NetworkReceiverC2EP11WifiHandler>:

/**
 * Creates a new network receiver.
 * @param wifi - the wifi handler to use to receive messages from the server
 */
NetworkReceiver::NetworkReceiver(WifiHandler *wifiHandler) {
 1001ed0:	defffa04 	addi	sp,sp,-24
 1001ed4:	dfc00515 	stw	ra,20(sp)
 1001ed8:	df000415 	stw	fp,16(sp)
 1001edc:	dc000315 	stw	r16,12(sp)
 1001ee0:	df000304 	addi	fp,sp,12
 1001ee4:	e13ffe15 	stw	r4,-8(fp)
 1001ee8:	e17fff15 	stw	r5,-4(fp)
 1001eec:	e0bffe17 	ldw	r2,-8(fp)
 1001ef0:	14000104 	addi	r16,r2,4
 1001ef4:	e13ffd44 	addi	r4,fp,-11
 1001ef8:	1007ca40 	call	1007ca4 <_ZNSaIcEC1Ev>
 1001efc:	e17ffd44 	addi	r5,fp,-11
 1001f00:	8009883a 	mov	r4,r16
 1001f04:	10025480 	call	1002548 <_ZNSt6vectorIcSaIcEEC1ERKS0_>
 1001f08:	e13ffd44 	addi	r4,fp,-11
 1001f0c:	1007cd00 	call	1007cd0 <_ZNSaIcED1Ev>
 1001f10:	e0bffe17 	ldw	r2,-8(fp)
 1001f14:	14000404 	addi	r16,r2,16
 1001f18:	e13ffd04 	addi	r4,fp,-12
 1001f1c:	100218c0 	call	100218c <_ZNSaIP8os_eventEC1Ev>
 1001f20:	8009883a 	mov	r4,r16
 1001f24:	e17ffd04 	addi	r5,fp,-12
 1001f28:	10026080 	call	1002608 <_ZNSt6vectorIP8os_eventSaIS1_EEC1ERKS2_>
 1001f2c:	e13ffd04 	addi	r4,fp,-12
 1001f30:	10021dc0 	call	10021dc <_ZNSaIP8os_eventED1Ev>
	wifi = wifiHandler;
 1001f34:	e0fffe17 	ldw	r3,-8(fp)
 1001f38:	e0bfff17 	ldw	r2,-4(fp)
 1001f3c:	18800015 	stw	r2,0(r3)
}
 1001f40:	e037883a 	mov	sp,fp
 1001f44:	dfc00217 	ldw	ra,8(sp)
 1001f48:	df000117 	ldw	fp,4(sp)
 1001f4c:	dc000017 	ldw	r16,0(sp)
 1001f50:	dec00304 	addi	sp,sp,12
 1001f54:	f800283a 	ret

01001f58 <_ZN15NetworkReceiver11addListenerEcP8os_event>:
 * Adds a listener queue to this network receiver.
 * The queue will receive network events which start with the listener's key.
 * @param key the first character of network events intended for the listener
 * @param queue - the queue to which matching network events will be forwarded
 */
void NetworkReceiver::addListener(char key, OS_EVENT *queue) {
 1001f58:	defffb04 	addi	sp,sp,-20
 1001f5c:	dfc00415 	stw	ra,16(sp)
 1001f60:	df000315 	stw	fp,12(sp)
 1001f64:	df000304 	addi	fp,sp,12
 1001f68:	e13ffd15 	stw	r4,-12(fp)
 1001f6c:	e1bfff15 	stw	r6,-4(fp)
 1001f70:	e17ffe05 	stb	r5,-8(fp)
	keys.push_back(key);
 1001f74:	e0bffd17 	ldw	r2,-12(fp)
 1001f78:	11000104 	addi	r4,r2,4
 1001f7c:	e17ffe04 	addi	r5,fp,-8
 1001f80:	1003ab80 	call	1003ab8 <_ZNSt6vectorIcSaIcEE9push_backERKc>
	listeners.push_back(queue);
 1001f84:	e0bffd17 	ldw	r2,-12(fp)
 1001f88:	11000404 	addi	r4,r2,16
 1001f8c:	e17fff04 	addi	r5,fp,-4
 1001f90:	1003eec0 	call	1003eec <_ZNSt6vectorIP8os_eventSaIS1_EE9push_backERKS1_>
}
 1001f94:	e037883a 	mov	sp,fp
 1001f98:	dfc00117 	ldw	ra,4(sp)
 1001f9c:	df000017 	ldw	fp,0(sp)
 1001fa0:	dec00204 	addi	sp,sp,8
 1001fa4:	f800283a 	ret

01001fa8 <_Z28network_receiver_update_taskPv>:
// TASKS

extern NetworkReceiver *networkIn;

/* Polls for server updates. */
void network_receiver_update_task(void* pdata) {
 1001fa8:	deffe604 	addi	sp,sp,-104
 1001fac:	dfc01915 	stw	ra,100(sp)
 1001fb0:	df001815 	stw	fp,96(sp)
 1001fb4:	ddc01715 	stw	r23,92(sp)
 1001fb8:	dd801615 	stw	r22,88(sp)
 1001fbc:	dd401515 	stw	r21,84(sp)
 1001fc0:	dd001415 	stw	r20,80(sp)
 1001fc4:	dcc01315 	stw	r19,76(sp)
 1001fc8:	dc801215 	stw	r18,72(sp)
 1001fcc:	dc401115 	stw	r17,68(sp)
 1001fd0:	dc001015 	stw	r16,64(sp)
 1001fd4:	df001004 	addi	fp,sp,64
 1001fd8:	e13ff115 	stw	r4,-60(fp)
 1001fdc:	00804074 	movhi	r2,257
 1001fe0:	10b41004 	addi	r2,r2,-12224
 1001fe4:	e0bff815 	stw	r2,-32(fp)
 1001fe8:	008040b4 	movhi	r2,258
 1001fec:	10960404 	addi	r2,r2,22544
 1001ff0:	e0bff915 	stw	r2,-28(fp)
 1001ff4:	e0bffa04 	addi	r2,fp,-24
 1001ff8:	e0fff004 	addi	r3,fp,-64
 1001ffc:	10c00015 	stw	r3,0(r2)
 1002000:	00c04034 	movhi	r3,256
 1002004:	18c80d04 	addi	r3,r3,8244
 1002008:	10c00115 	stw	r3,4(r2)
 100200c:	16c00215 	stw	sp,8(r2)
 1002010:	e13ff204 	addi	r4,fp,-56
 1002014:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
	TASK_LOG(printf("NetworkReceiver [task: update, status: start]\n"));
	while (true) {
		try {
			// Update the network receiver.
			networkIn->update();
 1002018:	008040f4 	movhi	r2,259
 100201c:	10a40504 	addi	r2,r2,-28652
 1002020:	11000017 	ldw	r4,0(r2)
 1002024:	00800044 	movi	r2,1
 1002028:	e0bff315 	stw	r2,-52(fp)
 100202c:	1001de00 	call	1001de0 <_ZN15NetworkReceiver6updateEv>
 1002030:	00000f06 	br	1002070 <_Z28network_receiver_update_taskPv+0xc8>
 1002034:	e7001004 	addi	fp,fp,64
 1002038:	e0bff417 	ldw	r2,-48(fp)
 100203c:	e0bfff15 	stw	r2,-4(fp)
 1002040:	e0bff517 	ldw	r2,-44(fp)
 1002044:	10800060 	cmpeqi	r2,r2,1
 1002048:	1000041e 	bne	r2,zero,100205c <_Z28network_receiver_update_taskPv+0xb4>
 100204c:	00bfffc4 	movi	r2,-1
 1002050:	e0bff315 	stw	r2,-52(fp)
 1002054:	e13fff17 	ldw	r4,-4(fp)
 1002058:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
		} catch (ARCapException &e) {
 100205c:	e13fff17 	ldw	r4,-4(fp)
 1002060:	100d6f80 	call	100d6f8 <__cxa_begin_catch>
 1002064:	e0bff015 	stw	r2,-64(fp)
 1002068:	e03ff315 	stw	zero,-52(fp)
 100206c:	100d6540 	call	100d654 <__cxa_end_catch>
			// Log exceptions.
			NETWORKRECEIVER_LOG(printf("%s\n", e.what()));
		}
		// Wait.
		OSTimeDlyHMSM(0, 0, 0, NETWORK_RECEIVER_UPDATE_TIME_MILLIS);
 1002070:	00bfffc4 	movi	r2,-1
 1002074:	e0bff315 	stw	r2,-52(fp)
 1002078:	0009883a 	mov	r4,zero
 100207c:	000b883a 	mov	r5,zero
 1002080:	000d883a 	mov	r6,zero
 1002084:	01c07d04 	movi	r7,500
 1002088:	10215880 	call	1021588 <OSTimeDlyHMSM>
extern NetworkReceiver *networkIn;

/* Polls for server updates. */
void network_receiver_update_task(void* pdata) {
	TASK_LOG(printf("NetworkReceiver [task: update, status: start]\n"));
	while (true) {
 100208c:	003fe206 	br	1002018 <_Z28network_receiver_update_taskPv+0x70>

01002090 <_ZnwmPv>:
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) throw() { return __p; }
 1002090:	defffd04 	addi	sp,sp,-12
 1002094:	df000215 	stw	fp,8(sp)
 1002098:	df000204 	addi	fp,sp,8
 100209c:	e13ffe15 	stw	r4,-8(fp)
 10020a0:	e17fff15 	stw	r5,-4(fp)
 10020a4:	e0bfff17 	ldw	r2,-4(fp)
 10020a8:	e037883a 	mov	sp,fp
 10020ac:	df000017 	ldw	fp,0(sp)
 10020b0:	dec00104 	addi	sp,sp,4
 10020b4:	f800283a 	ret

010020b8 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
 10020b8:	defffe04 	addi	sp,sp,-8
 10020bc:	df000115 	stw	fp,4(sp)
 10020c0:	df000104 	addi	fp,sp,4
 10020c4:	e13fff15 	stw	r4,-4(fp)
      {
	++_M_current;
 10020c8:	e0bfff17 	ldw	r2,-4(fp)
 10020cc:	10800017 	ldw	r2,0(r2)
 10020d0:	10c00044 	addi	r3,r2,1
 10020d4:	e0bfff17 	ldw	r2,-4(fp)
 10020d8:	10c00015 	stw	r3,0(r2)
	return *this;
 10020dc:	e0bfff17 	ldw	r2,-4(fp)
 10020e0:	e037883a 	mov	sp,fp
 10020e4:	df000017 	ldw	fp,0(sp)
 10020e8:	dec00104 	addi	sp,sp,4
 10020ec:	f800283a 	ret

010020f0 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>:
			  >::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
 10020f0:	defffe04 	addi	sp,sp,-8
 10020f4:	df000115 	stw	fp,4(sp)
 10020f8:	df000104 	addi	fp,sp,4
 10020fc:	e13fff15 	stw	r4,-4(fp)
      { return *_M_current; }
 1002100:	e0bfff17 	ldw	r2,-4(fp)
 1002104:	10800017 	ldw	r2,0(r2)
 1002108:	e037883a 	mov	sp,fp
 100210c:	df000017 	ldw	fp,0(sp)
 1002110:	dec00104 	addi	sp,sp,4
 1002114:	f800283a 	ret

01002118 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl 
      : public _Tp_alloc_type
      {
 1002118:	defffd04 	addi	sp,sp,-12
 100211c:	dfc00215 	stw	ra,8(sp)
 1002120:	df000115 	stw	fp,4(sp)
 1002124:	df000104 	addi	fp,sp,4
 1002128:	e13fff15 	stw	r4,-4(fp)
 100212c:	e13fff17 	ldw	r4,-4(fp)
 1002130:	1007ca80 	call	1007ca8 <_ZNSaIcED2Ev>
 1002134:	e037883a 	mov	sp,fp
 1002138:	dfc00117 	ldw	ra,4(sp)
 100213c:	df000017 	ldw	fp,0(sp)
 1002140:	dec00204 	addi	sp,sp,8
 1002144:	f800283a 	ret

01002148 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
 1002148:	defffe04 	addi	sp,sp,-8
 100214c:	df000115 	stw	fp,4(sp)
 1002150:	df000104 	addi	fp,sp,4
 1002154:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 1002158:	e0bfff17 	ldw	r2,-4(fp)
 100215c:	e037883a 	mov	sp,fp
 1002160:	df000017 	ldw	fp,0(sp)
 1002164:	dec00104 	addi	sp,sp,4
 1002168:	f800283a 	ret

0100216c <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }
 100216c:	defffe04 	addi	sp,sp,-8
 1002170:	df000115 	stw	fp,4(sp)
 1002174:	df000104 	addi	fp,sp,4
 1002178:	e13fff15 	stw	r4,-4(fp)
 100217c:	e037883a 	mov	sp,fp
 1002180:	df000017 	ldw	fp,0(sp)
 1002184:	dec00104 	addi	sp,sp,4
 1002188:	f800283a 	ret

0100218c <_ZNSaIP8os_eventEC1Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }
 100218c:	defffd04 	addi	sp,sp,-12
 1002190:	dfc00215 	stw	ra,8(sp)
 1002194:	df000115 	stw	fp,4(sp)
 1002198:	df000104 	addi	fp,sp,4
 100219c:	e13fff15 	stw	r4,-4(fp)
 10021a0:	e13fff17 	ldw	r4,-4(fp)
 10021a4:	100216c0 	call	100216c <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev>
 10021a8:	e037883a 	mov	sp,fp
 10021ac:	dfc00117 	ldw	ra,4(sp)
 10021b0:	df000017 	ldw	fp,0(sp)
 10021b4:	dec00204 	addi	sp,sp,8
 10021b8:	f800283a 	ret

010021bc <_ZN9__gnu_cxx13new_allocatorIP8os_eventED2Ev>:
      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }
 10021bc:	defffe04 	addi	sp,sp,-8
 10021c0:	df000115 	stw	fp,4(sp)
 10021c4:	df000104 	addi	fp,sp,4
 10021c8:	e13fff15 	stw	r4,-4(fp)
 10021cc:	e037883a 	mov	sp,fp
 10021d0:	df000017 	ldw	fp,0(sp)
 10021d4:	dec00104 	addi	sp,sp,4
 10021d8:	f800283a 	ret

010021dc <_ZNSaIP8os_eventED1Ev>:
      : __glibcxx_base_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 10021dc:	defffd04 	addi	sp,sp,-12
 10021e0:	dfc00215 	stw	ra,8(sp)
 10021e4:	df000115 	stw	fp,4(sp)
 10021e8:	df000104 	addi	fp,sp,4
 10021ec:	e13fff15 	stw	r4,-4(fp)
 10021f0:	e13fff17 	ldw	r4,-4(fp)
 10021f4:	10021bc0 	call	10021bc <_ZN9__gnu_cxx13new_allocatorIP8os_eventED2Ev>
 10021f8:	e037883a 	mov	sp,fp
 10021fc:	dfc00117 	ldw	ra,4(sp)
 1002200:	df000017 	ldw	fp,0(sp)
 1002204:	dec00204 	addi	sp,sp,8
 1002208:	f800283a 	ret

0100220c <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2ERKS3_>:
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }
 100220c:	defffd04 	addi	sp,sp,-12
 1002210:	df000215 	stw	fp,8(sp)
 1002214:	df000204 	addi	fp,sp,8
 1002218:	e13ffe15 	stw	r4,-8(fp)
 100221c:	e17fff15 	stw	r5,-4(fp)
 1002220:	e037883a 	mov	sp,fp
 1002224:	df000017 	ldw	fp,0(sp)
 1002228:	dec00104 	addi	sp,sp,4
 100222c:	f800283a 	ret

01002230 <_ZNSaIP8os_eventEC1ERKS1_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
 1002230:	defffc04 	addi	sp,sp,-16
 1002234:	dfc00315 	stw	ra,12(sp)
 1002238:	df000215 	stw	fp,8(sp)
 100223c:	df000204 	addi	fp,sp,8
 1002240:	e13ffe15 	stw	r4,-8(fp)
 1002244:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
 1002248:	e13ffe17 	ldw	r4,-8(fp)
 100224c:	e17fff17 	ldw	r5,-4(fp)
 1002250:	100220c0 	call	100220c <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2ERKS3_>
 1002254:	e037883a 	mov	sp,fp
 1002258:	dfc00117 	ldw	ra,4(sp)
 100225c:	df000017 	ldw	fp,0(sp)
 1002260:	dec00204 	addi	sp,sp,8
 1002264:	f800283a 	ret

01002268 <_ZNSaIP8os_eventEC2ERKS1_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
 1002268:	defffc04 	addi	sp,sp,-16
 100226c:	dfc00315 	stw	ra,12(sp)
 1002270:	df000215 	stw	fp,8(sp)
 1002274:	df000204 	addi	fp,sp,8
 1002278:	e13ffe15 	stw	r4,-8(fp)
 100227c:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
 1002280:	e13ffe17 	ldw	r4,-8(fp)
 1002284:	e17fff17 	ldw	r5,-4(fp)
 1002288:	100220c0 	call	100220c <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2ERKS3_>
 100228c:	e037883a 	mov	sp,fp
 1002290:	dfc00117 	ldw	ra,4(sp)
 1002294:	df000017 	ldw	fp,0(sp)
 1002298:	dec00204 	addi	sp,sp,8
 100229c:	f800283a 	ret

010022a0 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
 10022a0:	defffe04 	addi	sp,sp,-8
 10022a4:	df000115 	stw	fp,4(sp)
 10022a8:	df000104 	addi	fp,sp,4
 10022ac:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 10022b0:	e0bfff17 	ldw	r2,-4(fp)
 10022b4:	e037883a 	mov	sp,fp
 10022b8:	df000017 	ldw	fp,0(sp)
 10022bc:	dec00104 	addi	sp,sp,4
 10022c0:	f800283a 	ret

010022c4 <_ZN9__gnu_cxx13new_allocatorIcE9constructEPcRKc>:
      { return size_t(-1) / sizeof(_Tp); }

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
 10022c4:	defffa04 	addi	sp,sp,-24
 10022c8:	dfc00515 	stw	ra,20(sp)
 10022cc:	df000415 	stw	fp,16(sp)
 10022d0:	df000404 	addi	fp,sp,16
 10022d4:	e13ffc15 	stw	r4,-16(fp)
 10022d8:	e17ffd15 	stw	r5,-12(fp)
 10022dc:	e1bffe15 	stw	r6,-8(fp)
      { ::new(__p) _Tp(__val); }
 10022e0:	01000044 	movi	r4,1
 10022e4:	e17ffd17 	ldw	r5,-12(fp)
 10022e8:	10020900 	call	1002090 <_ZnwmPv>
 10022ec:	e0bfff15 	stw	r2,-4(fp)
 10022f0:	e0ffff17 	ldw	r3,-4(fp)
 10022f4:	1805003a 	cmpeq	r2,r3,zero
 10022f8:	1000041e 	bne	r2,zero,100230c <_ZN9__gnu_cxx13new_allocatorIcE9constructEPcRKc+0x48>
 10022fc:	e0bffe17 	ldw	r2,-8(fp)
 1002300:	10800003 	ldbu	r2,0(r2)
 1002304:	e0ffff17 	ldw	r3,-4(fp)
 1002308:	18800005 	stb	r2,0(r3)
 100230c:	e037883a 	mov	sp,fp
 1002310:	dfc00117 	ldw	ra,4(sp)
 1002314:	df000017 	ldw	fp,0(sp)
 1002318:	dec00204 	addi	sp,sp,8
 100231c:	f800283a 	ret

01002320 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_>:
      { return size_t(-1) / sizeof(_Tp); }

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
 1002320:	defffa04 	addi	sp,sp,-24
 1002324:	dfc00515 	stw	ra,20(sp)
 1002328:	df000415 	stw	fp,16(sp)
 100232c:	df000404 	addi	fp,sp,16
 1002330:	e13ffc15 	stw	r4,-16(fp)
 1002334:	e17ffd15 	stw	r5,-12(fp)
 1002338:	e1bffe15 	stw	r6,-8(fp)
      { ::new(__p) _Tp(__val); }
 100233c:	01000104 	movi	r4,4
 1002340:	e17ffd17 	ldw	r5,-12(fp)
 1002344:	10020900 	call	1002090 <_ZnwmPv>
 1002348:	e0bfff15 	stw	r2,-4(fp)
 100234c:	e0ffff17 	ldw	r3,-4(fp)
 1002350:	1805003a 	cmpeq	r2,r3,zero
 1002354:	1000041e 	bne	r2,zero,1002368 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_+0x48>
 1002358:	e0bffe17 	ldw	r2,-8(fp)
 100235c:	10800017 	ldw	r2,0(r2)
 1002360:	e0ffff17 	ldw	r3,-4(fp)
 1002364:	18800015 	stw	r2,0(r3)
 1002368:	e037883a 	mov	sp,fp
 100236c:	dfc00117 	ldw	ra,4(sp)
 1002370:	df000017 	ldw	fp,0(sp)
 1002374:	dec00204 	addi	sp,sp,8
 1002378:	f800283a 	ret

0100237c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 100237c:	defffd04 	addi	sp,sp,-12
 1002380:	df000215 	stw	fp,8(sp)
 1002384:	df000204 	addi	fp,sp,8
 1002388:	e13ffe15 	stw	r4,-8(fp)
 100238c:	e17fff15 	stw	r5,-4(fp)
 1002390:	e0bfff17 	ldw	r2,-4(fp)
 1002394:	10c00017 	ldw	r3,0(r2)
 1002398:	e0bffe17 	ldw	r2,-8(fp)
 100239c:	10c00015 	stw	r3,0(r2)
 10023a0:	e037883a 	mov	sp,fp
 10023a4:	df000017 	ldw	fp,0(sp)
 10023a8:	dec00104 	addi	sp,sp,4
 10023ac:	f800283a 	ret

010023b0 <_ZNSt6vectorIcSaIcEE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin()
 10023b0:	defffc04 	addi	sp,sp,-16
 10023b4:	dfc00315 	stw	ra,12(sp)
 10023b8:	df000215 	stw	fp,8(sp)
 10023bc:	df000204 	addi	fp,sp,8
 10023c0:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_start); }
 10023c4:	e17fff17 	ldw	r5,-4(fp)
 10023c8:	e13ffe04 	addi	r4,fp,-8
 10023cc:	100237c0 	call	100237c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 10023d0:	e0bffe17 	ldw	r2,-8(fp)
 10023d4:	e037883a 	mov	sp,fp
 10023d8:	dfc00117 	ldw	ra,4(sp)
 10023dc:	df000017 	ldw	fp,0(sp)
 10023e0:	dec00204 	addi	sp,sp,8
 10023e4:	f800283a 	ret

010023e8 <_ZNSt6vectorIcSaIcEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end()
 10023e8:	defffc04 	addi	sp,sp,-16
 10023ec:	dfc00315 	stw	ra,12(sp)
 10023f0:	df000215 	stw	fp,8(sp)
 10023f4:	df000204 	addi	fp,sp,8
 10023f8:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_finish); }
 10023fc:	e0bfff17 	ldw	r2,-4(fp)
 1002400:	11400104 	addi	r5,r2,4
 1002404:	e13ffe04 	addi	r4,fp,-8
 1002408:	100237c0 	call	100237c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 100240c:	e0bffe17 	ldw	r2,-8(fp)
 1002410:	e037883a 	mov	sp,fp
 1002414:	dfc00117 	ldw	ra,4(sp)
 1002418:	df000017 	ldw	fp,0(sp)
 100241c:	dec00204 	addi	sp,sp,8
 1002420:	f800283a 	ret

01002424 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
 1002424:	defffe04 	addi	sp,sp,-8
 1002428:	df000115 	stw	fp,4(sp)
 100242c:	df000104 	addi	fp,sp,4
 1002430:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
 1002434:	e0bfff17 	ldw	r2,-4(fp)
 1002438:	e037883a 	mov	sp,fp
 100243c:	df000017 	ldw	fp,0(sp)
 1002440:	dec00104 	addi	sp,sp,4
 1002444:	f800283a 	ret

01002448 <_ZN9__gnu_cxxneIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
 1002448:	defffb04 	addi	sp,sp,-20
 100244c:	dfc00415 	stw	ra,16(sp)
 1002450:	df000315 	stw	fp,12(sp)
 1002454:	dc000215 	stw	r16,8(sp)
 1002458:	df000204 	addi	fp,sp,8
 100245c:	e13ffe15 	stw	r4,-8(fp)
 1002460:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() != __rhs.base(); }
 1002464:	e13ffe17 	ldw	r4,-8(fp)
 1002468:	10024240 	call	1002424 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 100246c:	14000017 	ldw	r16,0(r2)
 1002470:	e13fff17 	ldw	r4,-4(fp)
 1002474:	10024240 	call	1002424 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1002478:	10800017 	ldw	r2,0(r2)
 100247c:	8084c03a 	cmpne	r2,r16,r2
 1002480:	e037883a 	mov	sp,fp
 1002484:	dfc00217 	ldw	ra,8(sp)
 1002488:	df000117 	ldw	fp,4(sp)
 100248c:	dc000017 	ldw	r16,0(sp)
 1002490:	dec00304 	addi	sp,sp,12
 1002494:	f800283a 	ret

01002498 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEdeEv>:
			  >::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
 1002498:	defffe04 	addi	sp,sp,-8
 100249c:	df000115 	stw	fp,4(sp)
 10024a0:	df000104 	addi	fp,sp,4
 10024a4:	e13fff15 	stw	r4,-4(fp)
      { return *_M_current; }
 10024a8:	e0bfff17 	ldw	r2,-4(fp)
 10024ac:	10800017 	ldw	r2,0(r2)
 10024b0:	e037883a 	mov	sp,fp
 10024b4:	df000017 	ldw	fp,0(sp)
 10024b8:	dec00104 	addi	sp,sp,4
 10024bc:	f800283a 	ret

010024c0 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
      : public _Tp_alloc_type
      {
	_Tp*           _M_start;
	_Tp*           _M_finish;
	_Tp*           _M_end_of_storage;
	_Vector_impl(_Tp_alloc_type const& __a)
 10024c0:	defffc04 	addi	sp,sp,-16
 10024c4:	dfc00315 	stw	ra,12(sp)
 10024c8:	df000215 	stw	fp,8(sp)
 10024cc:	df000204 	addi	fp,sp,8
 10024d0:	e13ffe15 	stw	r4,-8(fp)
 10024d4:	e17fff15 	stw	r5,-4(fp)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 10024d8:	e13ffe17 	ldw	r4,-8(fp)
 10024dc:	e17fff17 	ldw	r5,-4(fp)
 10024e0:	1007cac0 	call	1007cac <_ZNSaIcEC2ERKS_>
 10024e4:	e0bffe17 	ldw	r2,-8(fp)
 10024e8:	10000015 	stw	zero,0(r2)
 10024ec:	e0bffe17 	ldw	r2,-8(fp)
 10024f0:	10000115 	stw	zero,4(r2)
 10024f4:	e0bffe17 	ldw	r2,-8(fp)
 10024f8:	10000215 	stw	zero,8(r2)
	{ }
 10024fc:	e037883a 	mov	sp,fp
 1002500:	dfc00117 	ldw	ra,4(sp)
 1002504:	df000017 	ldw	fp,0(sp)
 1002508:	dec00204 	addi	sp,sp,8
 100250c:	f800283a 	ret

01002510 <_ZNSt12_Vector_baseIcSaIcEEC2ERKS0_>:

      allocator_type
      get_allocator() const
      { return _M_get_Tp_allocator(); }

      _Vector_base(const allocator_type& __a)
 1002510:	defffc04 	addi	sp,sp,-16
 1002514:	dfc00315 	stw	ra,12(sp)
 1002518:	df000215 	stw	fp,8(sp)
 100251c:	df000204 	addi	fp,sp,8
 1002520:	e13ffe15 	stw	r4,-8(fp)
 1002524:	e17fff15 	stw	r5,-4(fp)
      : _M_impl(__a)
 1002528:	e13ffe17 	ldw	r4,-8(fp)
 100252c:	e17fff17 	ldw	r5,-4(fp)
 1002530:	10024c00 	call	10024c0 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { }
 1002534:	e037883a 	mov	sp,fp
 1002538:	dfc00117 	ldw	ra,4(sp)
 100253c:	df000017 	ldw	fp,0(sp)
 1002540:	dec00204 	addi	sp,sp,8
 1002544:	f800283a 	ret

01002548 <_ZNSt6vectorIcSaIcEEC1ERKS0_>:
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      explicit
      vector(const allocator_type& __a = allocator_type())
 1002548:	defffc04 	addi	sp,sp,-16
 100254c:	dfc00315 	stw	ra,12(sp)
 1002550:	df000215 	stw	fp,8(sp)
 1002554:	df000204 	addi	fp,sp,8
 1002558:	e13ffe15 	stw	r4,-8(fp)
 100255c:	e17fff15 	stw	r5,-4(fp)
      : _Base(__a)
 1002560:	e13ffe17 	ldw	r4,-8(fp)
 1002564:	e17fff17 	ldw	r5,-4(fp)
 1002568:	10025100 	call	1002510 <_ZNSt12_Vector_baseIcSaIcEEC2ERKS0_>
      { }
 100256c:	e037883a 	mov	sp,fp
 1002570:	dfc00117 	ldw	ra,4(sp)
 1002574:	df000017 	ldw	fp,0(sp)
 1002578:	dec00204 	addi	sp,sp,8
 100257c:	f800283a 	ret

01002580 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE12_Vector_implC1ERKS2_>:
      : public _Tp_alloc_type
      {
	_Tp*           _M_start;
	_Tp*           _M_finish;
	_Tp*           _M_end_of_storage;
	_Vector_impl(_Tp_alloc_type const& __a)
 1002580:	defffc04 	addi	sp,sp,-16
 1002584:	dfc00315 	stw	ra,12(sp)
 1002588:	df000215 	stw	fp,8(sp)
 100258c:	df000204 	addi	fp,sp,8
 1002590:	e13ffe15 	stw	r4,-8(fp)
 1002594:	e17fff15 	stw	r5,-4(fp)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 1002598:	e13ffe17 	ldw	r4,-8(fp)
 100259c:	e17fff17 	ldw	r5,-4(fp)
 10025a0:	10022680 	call	1002268 <_ZNSaIP8os_eventEC2ERKS1_>
 10025a4:	e0bffe17 	ldw	r2,-8(fp)
 10025a8:	10000015 	stw	zero,0(r2)
 10025ac:	e0bffe17 	ldw	r2,-8(fp)
 10025b0:	10000115 	stw	zero,4(r2)
 10025b4:	e0bffe17 	ldw	r2,-8(fp)
 10025b8:	10000215 	stw	zero,8(r2)
	{ }
 10025bc:	e037883a 	mov	sp,fp
 10025c0:	dfc00117 	ldw	ra,4(sp)
 10025c4:	df000017 	ldw	fp,0(sp)
 10025c8:	dec00204 	addi	sp,sp,8
 10025cc:	f800283a 	ret

010025d0 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EEC2ERKS2_>:

      allocator_type
      get_allocator() const
      { return _M_get_Tp_allocator(); }

      _Vector_base(const allocator_type& __a)
 10025d0:	defffc04 	addi	sp,sp,-16
 10025d4:	dfc00315 	stw	ra,12(sp)
 10025d8:	df000215 	stw	fp,8(sp)
 10025dc:	df000204 	addi	fp,sp,8
 10025e0:	e13ffe15 	stw	r4,-8(fp)
 10025e4:	e17fff15 	stw	r5,-4(fp)
      : _M_impl(__a)
 10025e8:	e13ffe17 	ldw	r4,-8(fp)
 10025ec:	e17fff17 	ldw	r5,-4(fp)
 10025f0:	10025800 	call	1002580 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE12_Vector_implC1ERKS2_>
      { }
 10025f4:	e037883a 	mov	sp,fp
 10025f8:	dfc00117 	ldw	ra,4(sp)
 10025fc:	df000017 	ldw	fp,0(sp)
 1002600:	dec00204 	addi	sp,sp,8
 1002604:	f800283a 	ret

01002608 <_ZNSt6vectorIP8os_eventSaIS1_EEC1ERKS2_>:
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      explicit
      vector(const allocator_type& __a = allocator_type())
 1002608:	defffc04 	addi	sp,sp,-16
 100260c:	dfc00315 	stw	ra,12(sp)
 1002610:	df000215 	stw	fp,8(sp)
 1002614:	df000204 	addi	fp,sp,8
 1002618:	e13ffe15 	stw	r4,-8(fp)
 100261c:	e17fff15 	stw	r5,-4(fp)
      : _Base(__a)
 1002620:	e13ffe17 	ldw	r4,-8(fp)
 1002624:	e17fff17 	ldw	r5,-4(fp)
 1002628:	10025d00 	call	10025d0 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EEC2ERKS2_>
      { }
 100262c:	e037883a 	mov	sp,fp
 1002630:	dfc00117 	ldw	ra,4(sp)
 1002634:	df000017 	ldw	fp,0(sp)
 1002638:	dec00204 	addi	sp,sp,8
 100263c:	f800283a 	ret

01002640 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>:
      size() const
      { return size_type(end() - begin()); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const
 1002640:	defffe04 	addi	sp,sp,-8
 1002644:	df000115 	stw	fp,4(sp)
 1002648:	df000104 	addi	fp,sp,4
 100264c:	e13fff15 	stw	r4,-4(fp)
      { return size_type(-1) / sizeof(value_type); }
 1002650:	00bfffc4 	movi	r2,-1
 1002654:	e037883a 	mov	sp,fp
 1002658:	df000017 	ldw	fp,0(sp)
 100265c:	dec00104 	addi	sp,sp,4
 1002660:	f800283a 	ret

01002664 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 1002664:	defffd04 	addi	sp,sp,-12
 1002668:	df000215 	stw	fp,8(sp)
 100266c:	df000204 	addi	fp,sp,8
 1002670:	e13ffe15 	stw	r4,-8(fp)
 1002674:	e17fff15 	stw	r5,-4(fp)
 1002678:	e0bfff17 	ldw	r2,-4(fp)
 100267c:	10c00017 	ldw	r3,0(r2)
 1002680:	e0bffe17 	ldw	r2,-8(fp)
 1002684:	10c00015 	stw	r3,0(r2)
 1002688:	e037883a 	mov	sp,fp
 100268c:	df000017 	ldw	fp,0(sp)
 1002690:	dec00104 	addi	sp,sp,4
 1002694:	f800283a 	ret

01002698 <_ZNSt6vectorIP8os_eventSaIS1_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin()
 1002698:	defffc04 	addi	sp,sp,-16
 100269c:	dfc00315 	stw	ra,12(sp)
 10026a0:	df000215 	stw	fp,8(sp)
 10026a4:	df000204 	addi	fp,sp,8
 10026a8:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_start); }
 10026ac:	e17fff17 	ldw	r5,-4(fp)
 10026b0:	e13ffe04 	addi	r4,fp,-8
 10026b4:	10026640 	call	1002664 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 10026b8:	e0bffe17 	ldw	r2,-8(fp)
 10026bc:	e037883a 	mov	sp,fp
 10026c0:	dfc00117 	ldw	ra,4(sp)
 10026c4:	df000017 	ldw	fp,0(sp)
 10026c8:	dec00204 	addi	sp,sp,8
 10026cc:	f800283a 	ret

010026d0 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEplERKl>:
      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
 10026d0:	defffa04 	addi	sp,sp,-24
 10026d4:	dfc00515 	stw	ra,20(sp)
 10026d8:	df000415 	stw	fp,16(sp)
 10026dc:	df000404 	addi	fp,sp,16
 10026e0:	e13ffe15 	stw	r4,-8(fp)
 10026e4:	e17fff15 	stw	r5,-4(fp)
      { return __normal_iterator(_M_current + __n); }
 10026e8:	e0bffe17 	ldw	r2,-8(fp)
 10026ec:	10c00017 	ldw	r3,0(r2)
 10026f0:	e0bfff17 	ldw	r2,-4(fp)
 10026f4:	10800017 	ldw	r2,0(r2)
 10026f8:	1085883a 	add	r2,r2,r2
 10026fc:	1085883a 	add	r2,r2,r2
 1002700:	1885883a 	add	r2,r3,r2
 1002704:	e0bffc15 	stw	r2,-16(fp)
 1002708:	e13ffd04 	addi	r4,fp,-12
 100270c:	e17ffc04 	addi	r5,fp,-16
 1002710:	10026640 	call	1002664 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 1002714:	e0bffd17 	ldw	r2,-12(fp)
 1002718:	e037883a 	mov	sp,fp
 100271c:	dfc00117 	ldw	ra,4(sp)
 1002720:	df000017 	ldw	fp,0(sp)
 1002724:	dec00204 	addi	sp,sp,8
 1002728:	f800283a 	ret

0100272c <_ZNSt6vectorIP8os_eventSaIS1_EEixEm>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
 100272c:	defff904 	addi	sp,sp,-28
 1002730:	dfc00615 	stw	ra,24(sp)
 1002734:	df000515 	stw	fp,20(sp)
 1002738:	df000504 	addi	fp,sp,20
 100273c:	e13ffe15 	stw	r4,-8(fp)
 1002740:	e17fff15 	stw	r5,-4(fp)
      { return *(begin() + __n); }
 1002744:	e13ffe17 	ldw	r4,-8(fp)
 1002748:	10026980 	call	1002698 <_ZNSt6vectorIP8os_eventSaIS1_EE5beginEv>
 100274c:	e0bffc15 	stw	r2,-16(fp)
 1002750:	e0bfff17 	ldw	r2,-4(fp)
 1002754:	e0bffb15 	stw	r2,-20(fp)
 1002758:	e13ffc04 	addi	r4,fp,-16
 100275c:	e17ffb04 	addi	r5,fp,-20
 1002760:	10026d00 	call	10026d0 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEplERKl>
 1002764:	e0bffd15 	stw	r2,-12(fp)
 1002768:	e13ffd04 	addi	r4,fp,-12
 100276c:	10024980 	call	1002498 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEdeEv>
 1002770:	e037883a 	mov	sp,fp
 1002774:	dfc00117 	ldw	ra,4(sp)
 1002778:	df000017 	ldw	fp,0(sp)
 100277c:	dec00204 	addi	sp,sp,8
 1002780:	f800283a 	ret

01002784 <_ZNSt6vectorIP8os_eventSaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end()
 1002784:	defffc04 	addi	sp,sp,-16
 1002788:	dfc00315 	stw	ra,12(sp)
 100278c:	df000215 	stw	fp,8(sp)
 1002790:	df000204 	addi	fp,sp,8
 1002794:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_finish); }
 1002798:	e0bfff17 	ldw	r2,-4(fp)
 100279c:	11400104 	addi	r5,r2,4
 10027a0:	e13ffe04 	addi	r4,fp,-8
 10027a4:	10026640 	call	1002664 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 10027a8:	e0bffe17 	ldw	r2,-8(fp)
 10027ac:	e037883a 	mov	sp,fp
 10027b0:	dfc00117 	ldw	ra,4(sp)
 10027b4:	df000017 	ldw	fp,0(sp)
 10027b8:	dec00204 	addi	sp,sp,8
 10027bc:	f800283a 	ret

010027c0 <_ZNKSt6vectorIP8os_eventSaIS1_EE8max_sizeEv>:
      size() const
      { return size_type(end() - begin()); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const
 10027c0:	defffe04 	addi	sp,sp,-8
 10027c4:	df000115 	stw	fp,4(sp)
 10027c8:	df000104 	addi	fp,sp,4
 10027cc:	e13fff15 	stw	r4,-4(fp)
      { return size_type(-1) / sizeof(value_type); }
 10027d0:	00900034 	movhi	r2,16384
 10027d4:	10bfffc4 	addi	r2,r2,-1
 10027d8:	e037883a 	mov	sp,fp
 10027dc:	df000017 	ldw	fp,0(sp)
 10027e0:	dec00104 	addi	sp,sp,4
 10027e4:	f800283a 	ret

010027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
 10027e8:	defffe04 	addi	sp,sp,-8
 10027ec:	df000115 	stw	fp,4(sp)
 10027f0:	df000104 	addi	fp,sp,4
 10027f4:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
 10027f8:	e0bfff17 	ldw	r2,-4(fp)
 10027fc:	e037883a 	mov	sp,fp
 1002800:	df000017 	ldw	fp,0(sp)
 1002804:	dec00104 	addi	sp,sp,4
 1002808:	f800283a 	ret

0100280c <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
 100280c:	defffe04 	addi	sp,sp,-8
 1002810:	df000115 	stw	fp,4(sp)
 1002814:	df000104 	addi	fp,sp,4
 1002818:	e13fff15 	stw	r4,-4(fp)
      {
	++_M_current;
 100281c:	e0bfff17 	ldw	r2,-4(fp)
 1002820:	10800017 	ldw	r2,0(r2)
 1002824:	10c00104 	addi	r3,r2,4
 1002828:	e0bfff17 	ldw	r2,-4(fp)
 100282c:	10c00015 	stw	r3,0(r2)
	return *this;
 1002830:	e0bfff17 	ldw	r2,-4(fp)
 1002834:	e037883a 	mov	sp,fp
 1002838:	df000017 	ldw	fp,0(sp)
 100283c:	dec00104 	addi	sp,sp,4
 1002840:	f800283a 	ret

01002844 <_ZSt13__destroy_auxIPcEvT_S1_11__true_type>:
   * This is a helper function used only by _Destroy().
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
 1002844:	defffc04 	addi	sp,sp,-16
 1002848:	df000315 	stw	fp,12(sp)
 100284c:	df000304 	addi	fp,sp,12
 1002850:	e13ffd15 	stw	r4,-12(fp)
 1002854:	e17ffe15 	stw	r5,-8(fp)
 1002858:	e1bfff05 	stb	r6,-4(fp)
    { }
 100285c:	e037883a 	mov	sp,fp
 1002860:	df000017 	ldw	fp,0(sp)
 1002864:	dec00104 	addi	sp,sp,4
 1002868:	f800283a 	ret

0100286c <_ZSt8_DestroyIPcEvT_S1_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 100286c:	defffb04 	addi	sp,sp,-20
 1002870:	dfc00415 	stw	ra,16(sp)
 1002874:	df000315 	stw	fp,12(sp)
 1002878:	df000304 	addi	fp,sp,12
 100287c:	e13ffd15 	stw	r4,-12(fp)
 1002880:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
 1002884:	e13ffd17 	ldw	r4,-12(fp)
 1002888:	e17ffe17 	ldw	r5,-8(fp)
 100288c:	e1bfff03 	ldbu	r6,-4(fp)
 1002890:	10028440 	call	1002844 <_ZSt13__destroy_auxIPcEvT_S1_11__true_type>
 1002894:	e037883a 	mov	sp,fp
 1002898:	dfc00117 	ldw	ra,4(sp)
 100289c:	df000017 	ldw	fp,0(sp)
 10028a0:	dec00204 	addi	sp,sp,8
 10028a4:	f800283a 	ret

010028a8 <_ZSt8_DestroyIPccEvT_S1_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
 10028a8:	defffb04 	addi	sp,sp,-20
 10028ac:	dfc00415 	stw	ra,16(sp)
 10028b0:	df000315 	stw	fp,12(sp)
 10028b4:	df000304 	addi	fp,sp,12
 10028b8:	e13ffd15 	stw	r4,-12(fp)
 10028bc:	e17ffe15 	stw	r5,-8(fp)
 10028c0:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
 10028c4:	e13ffd17 	ldw	r4,-12(fp)
 10028c8:	e17ffe17 	ldw	r5,-8(fp)
 10028cc:	100286c0 	call	100286c <_ZSt8_DestroyIPcEvT_S1_>
 10028d0:	e037883a 	mov	sp,fp
 10028d4:	dfc00117 	ldw	ra,4(sp)
 10028d8:	df000017 	ldw	fp,0(sp)
 10028dc:	dec00204 	addi	sp,sp,8
 10028e0:	f800283a 	ret

010028e4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 10028e4:	defffd04 	addi	sp,sp,-12
 10028e8:	df000215 	stw	fp,8(sp)
 10028ec:	df000204 	addi	fp,sp,8
 10028f0:	e13ffe15 	stw	r4,-8(fp)
 10028f4:	e17fff15 	stw	r5,-4(fp)
 10028f8:	e0bfff17 	ldw	r2,-4(fp)
 10028fc:	10c00017 	ldw	r3,0(r2)
 1002900:	e0bffe17 	ldw	r2,-8(fp)
 1002904:	10c00015 	stw	r3,0(r2)
 1002908:	e037883a 	mov	sp,fp
 100290c:	df000017 	ldw	fp,0(sp)
 1002910:	dec00104 	addi	sp,sp,4
 1002914:	f800283a 	ret

01002918 <_ZNKSt6vectorIcSaIcEE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %vector.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const
 1002918:	defffb04 	addi	sp,sp,-20
 100291c:	dfc00415 	stw	ra,16(sp)
 1002920:	df000315 	stw	fp,12(sp)
 1002924:	df000304 	addi	fp,sp,12
 1002928:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_finish); }
 100292c:	e0bfff17 	ldw	r2,-4(fp)
 1002930:	10800117 	ldw	r2,4(r2)
 1002934:	e0bffd15 	stw	r2,-12(fp)
 1002938:	e13ffe04 	addi	r4,fp,-8
 100293c:	e17ffd04 	addi	r5,fp,-12
 1002940:	10028e40 	call	10028e4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 1002944:	e0bffe17 	ldw	r2,-8(fp)
 1002948:	e037883a 	mov	sp,fp
 100294c:	dfc00117 	ldw	ra,4(sp)
 1002950:	df000017 	ldw	fp,0(sp)
 1002954:	dec00204 	addi	sp,sp,8
 1002958:	f800283a 	ret

0100295c <_ZNKSt6vectorIcSaIcEE5beginEv>:
       *  Returns a read-only (constant) iterator that points to the
       *  first element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      begin() const
 100295c:	defffb04 	addi	sp,sp,-20
 1002960:	dfc00415 	stw	ra,16(sp)
 1002964:	df000315 	stw	fp,12(sp)
 1002968:	df000304 	addi	fp,sp,12
 100296c:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_start); }
 1002970:	e0bfff17 	ldw	r2,-4(fp)
 1002974:	10800017 	ldw	r2,0(r2)
 1002978:	e0bffd15 	stw	r2,-12(fp)
 100297c:	e13ffe04 	addi	r4,fp,-8
 1002980:	e17ffd04 	addi	r5,fp,-12
 1002984:	10028e40 	call	10028e4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 1002988:	e0bffe17 	ldw	r2,-8(fp)
 100298c:	e037883a 	mov	sp,fp
 1002990:	dfc00117 	ldw	ra,4(sp)
 1002994:	df000017 	ldw	fp,0(sp)
 1002998:	dec00204 	addi	sp,sp,8
 100299c:	f800283a 	ret

010029a0 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
 10029a0:	defffe04 	addi	sp,sp,-8
 10029a4:	df000115 	stw	fp,4(sp)
 10029a8:	df000104 	addi	fp,sp,4
 10029ac:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
 10029b0:	e0bfff17 	ldw	r2,-4(fp)
 10029b4:	e037883a 	mov	sp,fp
 10029b8:	df000017 	ldw	fp,0(sp)
 10029bc:	dec00104 	addi	sp,sp,4
 10029c0:	f800283a 	ret

010029c4 <_ZN9__gnu_cxxmiIPKcS2_St6vectorIcSaIcEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS9_RKNS6_IT0_S8_EE>:
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 10029c4:	defffb04 	addi	sp,sp,-20
 10029c8:	dfc00415 	stw	ra,16(sp)
 10029cc:	df000315 	stw	fp,12(sp)
 10029d0:	dc000215 	stw	r16,8(sp)
 10029d4:	df000204 	addi	fp,sp,8
 10029d8:	e13ffe15 	stw	r4,-8(fp)
 10029dc:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() - __rhs.base(); }
 10029e0:	e13ffe17 	ldw	r4,-8(fp)
 10029e4:	10029a00 	call	10029a0 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 10029e8:	10800017 	ldw	r2,0(r2)
 10029ec:	1021883a 	mov	r16,r2
 10029f0:	e13fff17 	ldw	r4,-4(fp)
 10029f4:	10029a00 	call	10029a0 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 10029f8:	10800017 	ldw	r2,0(r2)
 10029fc:	8085c83a 	sub	r2,r16,r2
 1002a00:	e037883a 	mov	sp,fp
 1002a04:	dfc00217 	ldw	ra,8(sp)
 1002a08:	df000117 	ldw	fp,4(sp)
 1002a0c:	dc000017 	ldw	r16,0(sp)
 1002a10:	dec00304 	addi	sp,sp,12
 1002a14:	f800283a 	ret

01002a18 <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const
 1002a18:	defffb04 	addi	sp,sp,-20
 1002a1c:	dfc00415 	stw	ra,16(sp)
 1002a20:	df000315 	stw	fp,12(sp)
 1002a24:	df000304 	addi	fp,sp,12
 1002a28:	e13fff15 	stw	r4,-4(fp)
      { return size_type(end() - begin()); }
 1002a2c:	e13fff17 	ldw	r4,-4(fp)
 1002a30:	10029180 	call	1002918 <_ZNKSt6vectorIcSaIcEE3endEv>
 1002a34:	e0bffe15 	stw	r2,-8(fp)
 1002a38:	e13fff17 	ldw	r4,-4(fp)
 1002a3c:	100295c0 	call	100295c <_ZNKSt6vectorIcSaIcEE5beginEv>
 1002a40:	e0bffd15 	stw	r2,-12(fp)
 1002a44:	e13ffe04 	addi	r4,fp,-8
 1002a48:	e17ffd04 	addi	r5,fp,-12
 1002a4c:	10029c40 	call	10029c4 <_ZN9__gnu_cxxmiIPKcS2_St6vectorIcSaIcEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS9_RKNS6_IT0_S8_EE>
 1002a50:	e037883a 	mov	sp,fp
 1002a54:	dfc00117 	ldw	ra,4(sp)
 1002a58:	df000017 	ldw	fp,0(sp)
 1002a5c:	dec00204 	addi	sp,sp,8
 1002a60:	f800283a 	ret

01002a64 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw() 
 1002a64:	defffe04 	addi	sp,sp,-8
 1002a68:	df000115 	stw	fp,4(sp)
 1002a6c:	df000104 	addi	fp,sp,4
 1002a70:	e13fff15 	stw	r4,-4(fp)
      { return size_t(-1) / sizeof(_Tp); }
 1002a74:	00bfffc4 	movi	r2,-1
 1002a78:	e037883a 	mov	sp,fp
 1002a7c:	df000017 	ldw	fp,0(sp)
 1002a80:	dec00104 	addi	sp,sp,4
 1002a84:	f800283a 	ret

01002a88 <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEEvT_S7_11__true_type>:
   * This is a helper function used only by _Destroy().
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
 1002a88:	defffc04 	addi	sp,sp,-16
 1002a8c:	df000315 	stw	fp,12(sp)
 1002a90:	df000304 	addi	fp,sp,12
 1002a94:	e13ffd15 	stw	r4,-12(fp)
 1002a98:	e17ffe15 	stw	r5,-8(fp)
 1002a9c:	e1bfff05 	stb	r6,-4(fp)
    { }
 1002aa0:	e037883a 	mov	sp,fp
 1002aa4:	df000017 	ldw	fp,0(sp)
 1002aa8:	dec00104 	addi	sp,sp,4
 1002aac:	f800283a 	ret

01002ab0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEEvT_S7_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 1002ab0:	defffb04 	addi	sp,sp,-20
 1002ab4:	dfc00415 	stw	ra,16(sp)
 1002ab8:	df000315 	stw	fp,12(sp)
 1002abc:	df000304 	addi	fp,sp,12
 1002ac0:	e13ffd15 	stw	r4,-12(fp)
 1002ac4:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
 1002ac8:	e13ffd17 	ldw	r4,-12(fp)
 1002acc:	e17ffe17 	ldw	r5,-8(fp)
 1002ad0:	e1bfff03 	ldbu	r6,-4(fp)
 1002ad4:	1002a880 	call	1002a88 <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEEvT_S7_11__true_type>
 1002ad8:	e037883a 	mov	sp,fp
 1002adc:	dfc00117 	ldw	ra,4(sp)
 1002ae0:	df000017 	ldw	fp,0(sp)
 1002ae4:	dec00204 	addi	sp,sp,8
 1002ae8:	f800283a 	ret

01002aec <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcEvT_S7_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
 1002aec:	defffb04 	addi	sp,sp,-20
 1002af0:	dfc00415 	stw	ra,16(sp)
 1002af4:	df000315 	stw	fp,12(sp)
 1002af8:	df000304 	addi	fp,sp,12
 1002afc:	e13ffd15 	stw	r4,-12(fp)
 1002b00:	e17ffe15 	stw	r5,-8(fp)
 1002b04:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
 1002b08:	e13ffd17 	ldw	r4,-12(fp)
 1002b0c:	e17ffe17 	ldw	r5,-8(fp)
 1002b10:	1002ab00 	call	1002ab0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEEvT_S7_>
 1002b14:	e037883a 	mov	sp,fp
 1002b18:	dfc00117 	ldw	ra,4(sp)
 1002b1c:	df000017 	ldw	fp,0(sp)
 1002b20:	dec00204 	addi	sp,sp,8
 1002b24:	f800283a 	ret

01002b28 <_ZN9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 1002b28:	defffd04 	addi	sp,sp,-12
 1002b2c:	df000215 	stw	fp,8(sp)
 1002b30:	df000204 	addi	fp,sp,8
 1002b34:	e13ffe15 	stw	r4,-8(fp)
 1002b38:	e17fff15 	stw	r5,-4(fp)
 1002b3c:	e0bfff17 	ldw	r2,-4(fp)
 1002b40:	10c00017 	ldw	r3,0(r2)
 1002b44:	e0bffe17 	ldw	r2,-8(fp)
 1002b48:	10c00015 	stw	r3,0(r2)
 1002b4c:	e037883a 	mov	sp,fp
 1002b50:	df000017 	ldw	fp,0(sp)
 1002b54:	dec00104 	addi	sp,sp,4
 1002b58:	f800283a 	ret

01002b5c <_ZNKSt6vectorIP8os_eventSaIS1_EE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %vector.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const
 1002b5c:	defffb04 	addi	sp,sp,-20
 1002b60:	dfc00415 	stw	ra,16(sp)
 1002b64:	df000315 	stw	fp,12(sp)
 1002b68:	df000304 	addi	fp,sp,12
 1002b6c:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_finish); }
 1002b70:	e0bfff17 	ldw	r2,-4(fp)
 1002b74:	10800117 	ldw	r2,4(r2)
 1002b78:	e0bffd15 	stw	r2,-12(fp)
 1002b7c:	e13ffe04 	addi	r4,fp,-8
 1002b80:	e17ffd04 	addi	r5,fp,-12
 1002b84:	1002b280 	call	1002b28 <_ZN9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 1002b88:	e0bffe17 	ldw	r2,-8(fp)
 1002b8c:	e037883a 	mov	sp,fp
 1002b90:	dfc00117 	ldw	ra,4(sp)
 1002b94:	df000017 	ldw	fp,0(sp)
 1002b98:	dec00204 	addi	sp,sp,8
 1002b9c:	f800283a 	ret

01002ba0 <_ZNKSt6vectorIP8os_eventSaIS1_EE5beginEv>:
       *  Returns a read-only (constant) iterator that points to the
       *  first element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      begin() const
 1002ba0:	defffb04 	addi	sp,sp,-20
 1002ba4:	dfc00415 	stw	ra,16(sp)
 1002ba8:	df000315 	stw	fp,12(sp)
 1002bac:	df000304 	addi	fp,sp,12
 1002bb0:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_start); }
 1002bb4:	e0bfff17 	ldw	r2,-4(fp)
 1002bb8:	10800017 	ldw	r2,0(r2)
 1002bbc:	e0bffd15 	stw	r2,-12(fp)
 1002bc0:	e13ffe04 	addi	r4,fp,-8
 1002bc4:	e17ffd04 	addi	r5,fp,-12
 1002bc8:	1002b280 	call	1002b28 <_ZN9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 1002bcc:	e0bffe17 	ldw	r2,-8(fp)
 1002bd0:	e037883a 	mov	sp,fp
 1002bd4:	dfc00117 	ldw	ra,4(sp)
 1002bd8:	df000017 	ldw	fp,0(sp)
 1002bdc:	dec00204 	addi	sp,sp,8
 1002be0:	f800283a 	ret

01002be4 <_ZNK9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
 1002be4:	defffe04 	addi	sp,sp,-8
 1002be8:	df000115 	stw	fp,4(sp)
 1002bec:	df000104 	addi	fp,sp,4
 1002bf0:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
 1002bf4:	e0bfff17 	ldw	r2,-4(fp)
 1002bf8:	e037883a 	mov	sp,fp
 1002bfc:	df000017 	ldw	fp,0(sp)
 1002c00:	dec00104 	addi	sp,sp,4
 1002c04:	f800283a 	ret

01002c08 <_ZN9__gnu_cxxmiIPKP8os_eventS4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE>:
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 1002c08:	defffb04 	addi	sp,sp,-20
 1002c0c:	dfc00415 	stw	ra,16(sp)
 1002c10:	df000315 	stw	fp,12(sp)
 1002c14:	dc000215 	stw	r16,8(sp)
 1002c18:	df000204 	addi	fp,sp,8
 1002c1c:	e13ffe15 	stw	r4,-8(fp)
 1002c20:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() - __rhs.base(); }
 1002c24:	e13ffe17 	ldw	r4,-8(fp)
 1002c28:	1002be40 	call	1002be4 <_ZNK9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1002c2c:	10800017 	ldw	r2,0(r2)
 1002c30:	1021883a 	mov	r16,r2
 1002c34:	e13fff17 	ldw	r4,-4(fp)
 1002c38:	1002be40 	call	1002be4 <_ZNK9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1002c3c:	10800017 	ldw	r2,0(r2)
 1002c40:	8085c83a 	sub	r2,r16,r2
 1002c44:	1005d0ba 	srai	r2,r2,2
 1002c48:	e037883a 	mov	sp,fp
 1002c4c:	dfc00217 	ldw	ra,8(sp)
 1002c50:	df000117 	ldw	fp,4(sp)
 1002c54:	dc000017 	ldw	r16,0(sp)
 1002c58:	dec00304 	addi	sp,sp,12
 1002c5c:	f800283a 	ret

01002c60 <_ZNKSt6vectorIP8os_eventSaIS1_EE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const
 1002c60:	defffb04 	addi	sp,sp,-20
 1002c64:	dfc00415 	stw	ra,16(sp)
 1002c68:	df000315 	stw	fp,12(sp)
 1002c6c:	df000304 	addi	fp,sp,12
 1002c70:	e13fff15 	stw	r4,-4(fp)
      { return size_type(end() - begin()); }
 1002c74:	e13fff17 	ldw	r4,-4(fp)
 1002c78:	1002b5c0 	call	1002b5c <_ZNKSt6vectorIP8os_eventSaIS1_EE3endEv>
 1002c7c:	e0bffe15 	stw	r2,-8(fp)
 1002c80:	e13fff17 	ldw	r4,-4(fp)
 1002c84:	1002ba00 	call	1002ba0 <_ZNKSt6vectorIP8os_eventSaIS1_EE5beginEv>
 1002c88:	e0bffd15 	stw	r2,-12(fp)
 1002c8c:	e13ffe04 	addi	r4,fp,-8
 1002c90:	e17ffd04 	addi	r5,fp,-12
 1002c94:	1002c080 	call	1002c08 <_ZN9__gnu_cxxmiIPKP8os_eventS4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE>
 1002c98:	e037883a 	mov	sp,fp
 1002c9c:	dfc00117 	ldw	ra,4(sp)
 1002ca0:	df000017 	ldw	fp,0(sp)
 1002ca4:	dec00204 	addi	sp,sp,8
 1002ca8:	f800283a 	ret

01002cac <_ZNK9__gnu_cxx13new_allocatorIP8os_eventE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw() 
 1002cac:	defffe04 	addi	sp,sp,-8
 1002cb0:	df000115 	stw	fp,4(sp)
 1002cb4:	df000104 	addi	fp,sp,4
 1002cb8:	e13fff15 	stw	r4,-4(fp)
      { return size_t(-1) / sizeof(_Tp); }
 1002cbc:	00900034 	movhi	r2,16384
 1002cc0:	10bfffc4 	addi	r2,r2,-1
 1002cc4:	e037883a 	mov	sp,fp
 1002cc8:	df000017 	ldw	fp,0(sp)
 1002ccc:	dec00104 	addi	sp,sp,4
 1002cd0:	f800283a 	ret

01002cd4 <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEEEvT_S9_11__true_type>:
   * This is a helper function used only by _Destroy().
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
 1002cd4:	defffc04 	addi	sp,sp,-16
 1002cd8:	df000315 	stw	fp,12(sp)
 1002cdc:	df000304 	addi	fp,sp,12
 1002ce0:	e13ffd15 	stw	r4,-12(fp)
 1002ce4:	e17ffe15 	stw	r5,-8(fp)
 1002ce8:	e1bfff05 	stb	r6,-4(fp)
    { }
 1002cec:	e037883a 	mov	sp,fp
 1002cf0:	df000017 	ldw	fp,0(sp)
 1002cf4:	dec00104 	addi	sp,sp,4
 1002cf8:	f800283a 	ret

01002cfc <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEEEvT_S9_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 1002cfc:	defffb04 	addi	sp,sp,-20
 1002d00:	dfc00415 	stw	ra,16(sp)
 1002d04:	df000315 	stw	fp,12(sp)
 1002d08:	df000304 	addi	fp,sp,12
 1002d0c:	e13ffd15 	stw	r4,-12(fp)
 1002d10:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
 1002d14:	e13ffd17 	ldw	r4,-12(fp)
 1002d18:	e17ffe17 	ldw	r5,-8(fp)
 1002d1c:	e1bfff03 	ldbu	r6,-4(fp)
 1002d20:	1002cd40 	call	1002cd4 <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEEEvT_S9_11__true_type>
 1002d24:	e037883a 	mov	sp,fp
 1002d28:	dfc00117 	ldw	ra,4(sp)
 1002d2c:	df000017 	ldw	fp,0(sp)
 1002d30:	dec00204 	addi	sp,sp,8
 1002d34:	f800283a 	ret

01002d38 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES3_EvT_S9_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
 1002d38:	defffb04 	addi	sp,sp,-20
 1002d3c:	dfc00415 	stw	ra,16(sp)
 1002d40:	df000315 	stw	fp,12(sp)
 1002d44:	df000304 	addi	fp,sp,12
 1002d48:	e13ffd15 	stw	r4,-12(fp)
 1002d4c:	e17ffe15 	stw	r5,-8(fp)
 1002d50:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
 1002d54:	e13ffd17 	ldw	r4,-12(fp)
 1002d58:	e17ffe17 	ldw	r5,-8(fp)
 1002d5c:	1002cfc0 	call	1002cfc <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEEEvT_S9_>
 1002d60:	e037883a 	mov	sp,fp
 1002d64:	dfc00117 	ldw	ra,4(sp)
 1002d68:	df000017 	ldw	fp,0(sp)
 1002d6c:	dec00204 	addi	sp,sp,8
 1002d70:	f800283a 	ret

01002d74 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcm>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 1002d74:	defffb04 	addi	sp,sp,-20
 1002d78:	dfc00415 	stw	ra,16(sp)
 1002d7c:	df000315 	stw	fp,12(sp)
 1002d80:	df000304 	addi	fp,sp,12
 1002d84:	e13ffd15 	stw	r4,-12(fp)
 1002d88:	e17ffe15 	stw	r5,-8(fp)
 1002d8c:	e1bfff15 	stw	r6,-4(fp)
      { ::operator delete(__p); }
 1002d90:	e13ffe17 	ldw	r4,-8(fp)
 1002d94:	100d8100 	call	100d810 <_ZdlPv>
 1002d98:	e037883a 	mov	sp,fp
 1002d9c:	dfc00117 	ldw	ra,4(sp)
 1002da0:	df000017 	ldw	fp,0(sp)
 1002da4:	dec00204 	addi	sp,sp,8
 1002da8:	f800283a 	ret

01002dac <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm>:
      _Tp*
      _M_allocate(size_t __n)
      { return _M_impl.allocate(__n); }

      void
      _M_deallocate(_Tp* __p, size_t __n)
 1002dac:	defffb04 	addi	sp,sp,-20
 1002db0:	dfc00415 	stw	ra,16(sp)
 1002db4:	df000315 	stw	fp,12(sp)
 1002db8:	df000304 	addi	fp,sp,12
 1002dbc:	e13ffd15 	stw	r4,-12(fp)
 1002dc0:	e17ffe15 	stw	r5,-8(fp)
 1002dc4:	e1bfff15 	stw	r6,-4(fp)
      {
	if (__p)
 1002dc8:	e0bffe17 	ldw	r2,-8(fp)
 1002dcc:	1005003a 	cmpeq	r2,r2,zero
 1002dd0:	1000051e 	bne	r2,zero,1002de8 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm+0x3c>
	  _M_impl.deallocate(__p, __n);
 1002dd4:	e0bffd17 	ldw	r2,-12(fp)
 1002dd8:	1009883a 	mov	r4,r2
 1002ddc:	e17ffe17 	ldw	r5,-8(fp)
 1002de0:	e1bfff17 	ldw	r6,-4(fp)
 1002de4:	1002d740 	call	1002d74 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcm>
 1002de8:	e037883a 	mov	sp,fp
 1002dec:	dfc00117 	ldw	ra,4(sp)
 1002df0:	df000017 	ldw	fp,0(sp)
 1002df4:	dec00204 	addi	sp,sp,8
 1002df8:	f800283a 	ret

01002dfc <_ZNSt12_Vector_baseIcSaIcEED2Ev>:
	this->_M_impl._M_start = this->_M_allocate(__n);
	this->_M_impl._M_finish = this->_M_impl._M_start;
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }

      ~_Vector_base()
 1002dfc:	defffd04 	addi	sp,sp,-12
 1002e00:	dfc00215 	stw	ra,8(sp)
 1002e04:	df000115 	stw	fp,4(sp)
 1002e08:	df000104 	addi	fp,sp,4
 1002e0c:	e13fff15 	stw	r4,-4(fp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 1002e10:	e0bfff17 	ldw	r2,-4(fp)
 1002e14:	11400017 	ldw	r5,0(r2)
 1002e18:	e0bfff17 	ldw	r2,-4(fp)
 1002e1c:	10800217 	ldw	r2,8(r2)
 1002e20:	1007883a 	mov	r3,r2
 1002e24:	e0bfff17 	ldw	r2,-4(fp)
 1002e28:	10800017 	ldw	r2,0(r2)
 1002e2c:	1885c83a 	sub	r2,r3,r2
 1002e30:	100d883a 	mov	r6,r2
 1002e34:	e13fff17 	ldw	r4,-4(fp)
 1002e38:	1002dac0 	call	1002dac <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm>
 1002e3c:	e13fff17 	ldw	r4,-4(fp)
 1002e40:	10021180 	call	1002118 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 1002e44:	e037883a 	mov	sp,fp
 1002e48:	dfc00117 	ldw	ra,4(sp)
 1002e4c:	df000017 	ldw	fp,0(sp)
 1002e50:	dec00204 	addi	sp,sp,8
 1002e54:	f800283a 	ret

01002e58 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE10deallocateEPS2_m>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 1002e58:	defffb04 	addi	sp,sp,-20
 1002e5c:	dfc00415 	stw	ra,16(sp)
 1002e60:	df000315 	stw	fp,12(sp)
 1002e64:	df000304 	addi	fp,sp,12
 1002e68:	e13ffd15 	stw	r4,-12(fp)
 1002e6c:	e17ffe15 	stw	r5,-8(fp)
 1002e70:	e1bfff15 	stw	r6,-4(fp)
      { ::operator delete(__p); }
 1002e74:	e13ffe17 	ldw	r4,-8(fp)
 1002e78:	100d8100 	call	100d810 <_ZdlPv>
 1002e7c:	e037883a 	mov	sp,fp
 1002e80:	dfc00117 	ldw	ra,4(sp)
 1002e84:	df000017 	ldw	fp,0(sp)
 1002e88:	dec00204 	addi	sp,sp,8
 1002e8c:	f800283a 	ret

01002e90 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE13_M_deallocateEPS1_m>:
      _Tp*
      _M_allocate(size_t __n)
      { return _M_impl.allocate(__n); }

      void
      _M_deallocate(_Tp* __p, size_t __n)
 1002e90:	defffb04 	addi	sp,sp,-20
 1002e94:	dfc00415 	stw	ra,16(sp)
 1002e98:	df000315 	stw	fp,12(sp)
 1002e9c:	df000304 	addi	fp,sp,12
 1002ea0:	e13ffd15 	stw	r4,-12(fp)
 1002ea4:	e17ffe15 	stw	r5,-8(fp)
 1002ea8:	e1bfff15 	stw	r6,-4(fp)
      {
	if (__p)
 1002eac:	e0bffe17 	ldw	r2,-8(fp)
 1002eb0:	1005003a 	cmpeq	r2,r2,zero
 1002eb4:	1000051e 	bne	r2,zero,1002ecc <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE13_M_deallocateEPS1_m+0x3c>
	  _M_impl.deallocate(__p, __n);
 1002eb8:	e0bffd17 	ldw	r2,-12(fp)
 1002ebc:	1009883a 	mov	r4,r2
 1002ec0:	e17ffe17 	ldw	r5,-8(fp)
 1002ec4:	e1bfff17 	ldw	r6,-4(fp)
 1002ec8:	1002e580 	call	1002e58 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE10deallocateEPS2_m>
 1002ecc:	e037883a 	mov	sp,fp
 1002ed0:	dfc00117 	ldw	ra,4(sp)
 1002ed4:	df000017 	ldw	fp,0(sp)
 1002ed8:	dec00204 	addi	sp,sp,8
 1002edc:	f800283a 	ret

01002ee0 <_ZNSt6vectorIcSaIcEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibilty.
       */
      ~vector()
 1002ee0:	defffa04 	addi	sp,sp,-24
 1002ee4:	dfc00515 	stw	ra,20(sp)
 1002ee8:	df000415 	stw	fp,16(sp)
 1002eec:	dc400315 	stw	r17,12(sp)
 1002ef0:	dc000215 	stw	r16,8(sp)
 1002ef4:	df000204 	addi	fp,sp,8
 1002ef8:	e13fff15 	stw	r4,-4(fp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 1002efc:	e0bfff17 	ldw	r2,-4(fp)
 1002f00:	14000017 	ldw	r16,0(r2)
 1002f04:	e0bfff17 	ldw	r2,-4(fp)
 1002f08:	14400117 	ldw	r17,4(r2)
 1002f0c:	e13fff17 	ldw	r4,-4(fp)
 1002f10:	10021480 	call	1002148 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 1002f14:	100b883a 	mov	r5,r2
 1002f18:	e13ffe04 	addi	r4,fp,-8
 1002f1c:	1007cc00 	call	1007cc0 <_ZNSaIcEC1ERKS_>
 1002f20:	8009883a 	mov	r4,r16
 1002f24:	880b883a 	mov	r5,r17
 1002f28:	e1bffe04 	addi	r6,fp,-8
 1002f2c:	10028a80 	call	10028a8 <_ZSt8_DestroyIPccEvT_S1_SaIT0_E>
 1002f30:	e13ffe04 	addi	r4,fp,-8
 1002f34:	1007cd00 	call	1007cd0 <_ZNSaIcED1Ev>
 1002f38:	e13fff17 	ldw	r4,-4(fp)
 1002f3c:	1002dfc0 	call	1002dfc <_ZNSt12_Vector_baseIcSaIcEED2Ev>
 1002f40:	e037883a 	mov	sp,fp
 1002f44:	dfc00317 	ldw	ra,12(sp)
 1002f48:	df000217 	ldw	fp,8(sp)
 1002f4c:	dc400117 	ldw	r17,4(sp)
 1002f50:	dc000017 	ldw	r16,0(sp)
 1002f54:	dec00404 	addi	sp,sp,16
 1002f58:	f800283a 	ret

01002f5c <_ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIcEEPT_PKS3_S6_S4_>:
  template<>
    struct __copy_backward<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 1002f5c:	defffa04 	addi	sp,sp,-24
 1002f60:	dfc00515 	stw	ra,20(sp)
 1002f64:	df000415 	stw	fp,16(sp)
 1002f68:	df000404 	addi	fp,sp,16
 1002f6c:	e13ffd15 	stw	r4,-12(fp)
 1002f70:	e17ffe15 	stw	r5,-8(fp)
 1002f74:	e1bfff15 	stw	r6,-4(fp)
        { 
	  const ptrdiff_t _Num = __last - __first;
 1002f78:	e0fffe17 	ldw	r3,-8(fp)
 1002f7c:	e0bffd17 	ldw	r2,-12(fp)
 1002f80:	1885c83a 	sub	r2,r3,r2
 1002f84:	e0bffc15 	stw	r2,-16(fp)
	  std::memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 1002f88:	e0bffc17 	ldw	r2,-16(fp)
 1002f8c:	1007883a 	mov	r3,r2
 1002f90:	e0bfff17 	ldw	r2,-4(fp)
 1002f94:	10c9c83a 	sub	r4,r2,r3
 1002f98:	e1bffc17 	ldw	r6,-16(fp)
 1002f9c:	e17ffd17 	ldw	r5,-12(fp)
 1002fa0:	100edec0 	call	100edec <memmove>
	  return __result - _Num;
 1002fa4:	e0bffc17 	ldw	r2,-16(fp)
 1002fa8:	1007883a 	mov	r3,r2
 1002fac:	e0bfff17 	ldw	r2,-4(fp)
 1002fb0:	10c5c83a 	sub	r2,r2,r3
 1002fb4:	e037883a 	mov	sp,fp
 1002fb8:	dfc00117 	ldw	ra,4(sp)
 1002fbc:	df000017 	ldw	fp,0(sp)
 1002fc0:	dec00204 	addi	sp,sp,8
 1002fc4:	f800283a 	ret

01002fc8 <_ZSt19__copy_backward_auxIPcS0_ET0_T_S2_S1_>:
	}
    };

  template<typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)
 1002fc8:	defffa04 	addi	sp,sp,-24
 1002fcc:	dfc00515 	stw	ra,20(sp)
 1002fd0:	df000415 	stw	fp,16(sp)
 1002fd4:	df000404 	addi	fp,sp,16
 1002fd8:	e13ffd15 	stw	r4,-12(fp)
 1002fdc:	e17ffe15 	stw	r5,-8(fp)
 1002fe0:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueType1>::__value
	                     && __is_pointer<_BI1>::__value
	                     && __is_pointer<_BI2>::__value
			     && __are_same<_ValueType1, _ValueType2>::__value);
 1002fe4:	00800044 	movi	r2,1
 1002fe8:	e0bffc05 	stb	r2,-16(fp)

      return std::__copy_backward<__simple, _Category>::copy_b(__first, __last,
							       __result);
 1002fec:	e13ffd17 	ldw	r4,-12(fp)
 1002ff0:	e17ffe17 	ldw	r5,-8(fp)
 1002ff4:	e1bfff17 	ldw	r6,-4(fp)
 1002ff8:	1002f5c0 	call	1002f5c <_ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIcEEPT_PKS3_S6_S4_>
 1002ffc:	e037883a 	mov	sp,fp
 1003000:	dfc00117 	ldw	ra,4(sp)
 1003004:	df000017 	ldw	fp,0(sp)
 1003008:	dec00204 	addi	sp,sp,8
 100300c:	f800283a 	ret

01003010 <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES8_EET0_T_SA_S9_>:
  template<>
    struct __copy_backward_normal<true, true>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)
 1003010:	defff704 	addi	sp,sp,-36
 1003014:	dfc00815 	stw	ra,32(sp)
 1003018:	df000715 	stw	fp,28(sp)
 100301c:	dc400615 	stw	r17,24(sp)
 1003020:	dc000515 	stw	r16,20(sp)
 1003024:	df000504 	addi	fp,sp,20
 1003028:	e13ffd15 	stw	r4,-12(fp)
 100302c:	e17ffe15 	stw	r5,-8(fp)
 1003030:	e1bfff15 	stw	r6,-4(fp)
        { return _BI2(std::__copy_backward_aux(__first.base(), __last.base(),
					       __result.base())); }
 1003034:	e13ffd04 	addi	r4,fp,-12
 1003038:	10024240 	call	1002424 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 100303c:	14400017 	ldw	r17,0(r2)
 1003040:	e13ffe04 	addi	r4,fp,-8
 1003044:	10024240 	call	1002424 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1003048:	14000017 	ldw	r16,0(r2)
 100304c:	e13fff04 	addi	r4,fp,-4
 1003050:	10024240 	call	1002424 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1003054:	11800017 	ldw	r6,0(r2)
 1003058:	8809883a 	mov	r4,r17
 100305c:	800b883a 	mov	r5,r16
 1003060:	1002fc80 	call	1002fc8 <_ZSt19__copy_backward_auxIPcS0_ET0_T_S2_S1_>
 1003064:	e0bffb15 	stw	r2,-20(fp)
 1003068:	e13ffc04 	addi	r4,fp,-16
 100306c:	e17ffb04 	addi	r5,fp,-20
 1003070:	100237c0 	call	100237c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 1003074:	e0bffc17 	ldw	r2,-16(fp)
 1003078:	e037883a 	mov	sp,fp
 100307c:	dfc00317 	ldw	ra,12(sp)
 1003080:	df000217 	ldw	fp,8(sp)
 1003084:	dc400117 	ldw	r17,4(sp)
 1003088:	dc000017 	ldw	r16,0(sp)
 100308c:	dec00404 	addi	sp,sp,16
 1003090:	f800283a 	ret

01003094 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>:
   *  Result may not be in the range [first,last).  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template <typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 1003094:	defffa04 	addi	sp,sp,-24
 1003098:	dfc00515 	stw	ra,20(sp)
 100309c:	df000415 	stw	fp,16(sp)
 10030a0:	df000404 	addi	fp,sp,16
 10030a4:	e13ffd15 	stw	r4,-12(fp)
 10030a8:	e17ffe15 	stw	r5,-8(fp)
 10030ac:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      const bool __bi1 = __is_normal_iterator<_BI1>::__value;
 10030b0:	00800044 	movi	r2,1
 10030b4:	e0bffc45 	stb	r2,-15(fp)
      const bool __bi2 = __is_normal_iterator<_BI2>::__value;
 10030b8:	00800044 	movi	r2,1
 10030bc:	e0bffc05 	stb	r2,-16(fp)
      return std::__copy_backward_normal<__bi1, __bi2>::copy_b_n(__first, __last,
								 __result);
 10030c0:	e13ffd17 	ldw	r4,-12(fp)
 10030c4:	e17ffe17 	ldw	r5,-8(fp)
 10030c8:	e1bfff17 	ldw	r6,-4(fp)
 10030cc:	10030100 	call	1003010 <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES8_EET0_T_SA_S9_>
 10030d0:	e037883a 	mov	sp,fp
 10030d4:	dfc00117 	ldw	ra,4(sp)
 10030d8:	df000017 	ldw	fp,0(sp)
 10030dc:	dec00204 	addi	sp,sp,8
 10030e0:	f800283a 	ret

010030e4 <_ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIcEEPT_PKS3_S6_S4_>:
  template<>
    struct __copy<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy(const _Tp* __first, const _Tp* __last, _Tp* __result)
 10030e4:	defffb04 	addi	sp,sp,-20
 10030e8:	dfc00415 	stw	ra,16(sp)
 10030ec:	df000315 	stw	fp,12(sp)
 10030f0:	df000304 	addi	fp,sp,12
 10030f4:	e13ffd15 	stw	r4,-12(fp)
 10030f8:	e17ffe15 	stw	r5,-8(fp)
 10030fc:	e1bfff15 	stw	r6,-4(fp)
        { 
	  std::memmove(__result, __first, sizeof(_Tp) * (__last - __first));
 1003100:	e0fffe17 	ldw	r3,-8(fp)
 1003104:	e0bffd17 	ldw	r2,-12(fp)
 1003108:	1885c83a 	sub	r2,r3,r2
 100310c:	100d883a 	mov	r6,r2
 1003110:	e13fff17 	ldw	r4,-4(fp)
 1003114:	e17ffd17 	ldw	r5,-12(fp)
 1003118:	100edec0 	call	100edec <memmove>
	  return __result + (__last - __first);
 100311c:	e0fffe17 	ldw	r3,-8(fp)
 1003120:	e0bffd17 	ldw	r2,-12(fp)
 1003124:	1885c83a 	sub	r2,r3,r2
 1003128:	1007883a 	mov	r3,r2
 100312c:	e0bfff17 	ldw	r2,-4(fp)
 1003130:	1885883a 	add	r2,r3,r2
 1003134:	e037883a 	mov	sp,fp
 1003138:	dfc00117 	ldw	ra,4(sp)
 100313c:	df000017 	ldw	fp,0(sp)
 1003140:	dec00204 	addi	sp,sp,8
 1003144:	f800283a 	ret

01003148 <_ZSt10__copy_auxIPcS0_ET0_T_S2_S1_>:
	}
    };

  template<typename _II, typename _OI>
    inline _OI
    __copy_aux(_II __first, _II __last, _OI __result)
 1003148:	defffa04 	addi	sp,sp,-24
 100314c:	dfc00515 	stw	ra,20(sp)
 1003150:	df000415 	stw	fp,16(sp)
 1003154:	df000404 	addi	fp,sp,16
 1003158:	e13ffd15 	stw	r4,-12(fp)
 100315c:	e17ffe15 	stw	r5,-8(fp)
 1003160:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueTypeI>::__value
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 1003164:	00800044 	movi	r2,1
 1003168:	e0bffc05 	stb	r2,-16(fp)

      return std::__copy<__simple, _Category>::copy(__first, __last, __result);
 100316c:	e13ffd17 	ldw	r4,-12(fp)
 1003170:	e17ffe17 	ldw	r5,-8(fp)
 1003174:	e1bfff17 	ldw	r6,-4(fp)
 1003178:	10030e40 	call	10030e4 <_ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIcEEPT_PKS3_S6_S4_>
 100317c:	e037883a 	mov	sp,fp
 1003180:	dfc00117 	ldw	ra,4(sp)
 1003184:	df000017 	ldw	fp,0(sp)
 1003188:	dec00204 	addi	sp,sp,8
 100318c:	f800283a 	ret

01003190 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES8_EET0_T_SA_S9_>:
  template<>
    struct __copy_normal<true, true>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
 1003190:	defff704 	addi	sp,sp,-36
 1003194:	dfc00815 	stw	ra,32(sp)
 1003198:	df000715 	stw	fp,28(sp)
 100319c:	dc400615 	stw	r17,24(sp)
 10031a0:	dc000515 	stw	r16,20(sp)
 10031a4:	df000504 	addi	fp,sp,20
 10031a8:	e13ffd15 	stw	r4,-12(fp)
 10031ac:	e17ffe15 	stw	r5,-8(fp)
 10031b0:	e1bfff15 	stw	r6,-4(fp)
        { return _OI(std::__copy_aux(__first.base(), __last.base(),
				     __result.base())); }
 10031b4:	e13ffd04 	addi	r4,fp,-12
 10031b8:	10024240 	call	1002424 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 10031bc:	14400017 	ldw	r17,0(r2)
 10031c0:	e13ffe04 	addi	r4,fp,-8
 10031c4:	10024240 	call	1002424 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 10031c8:	14000017 	ldw	r16,0(r2)
 10031cc:	e13fff04 	addi	r4,fp,-4
 10031d0:	10024240 	call	1002424 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 10031d4:	11800017 	ldw	r6,0(r2)
 10031d8:	8809883a 	mov	r4,r17
 10031dc:	800b883a 	mov	r5,r16
 10031e0:	10031480 	call	1003148 <_ZSt10__copy_auxIPcS0_ET0_T_S2_S1_>
 10031e4:	e0bffb15 	stw	r2,-20(fp)
 10031e8:	e13ffc04 	addi	r4,fp,-16
 10031ec:	e17ffb04 	addi	r5,fp,-20
 10031f0:	100237c0 	call	100237c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 10031f4:	e0bffc17 	ldw	r2,-16(fp)
 10031f8:	e037883a 	mov	sp,fp
 10031fc:	dfc00317 	ldw	ra,12(sp)
 1003200:	df000217 	ldw	fp,8(sp)
 1003204:	dc400117 	ldw	r17,4(sp)
 1003208:	dc000017 	ldw	r16,0(sp)
 100320c:	dec00404 	addi	sp,sp,16
 1003210:	f800283a 	ret

01003214 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
 1003214:	defffa04 	addi	sp,sp,-24
 1003218:	dfc00515 	stw	ra,20(sp)
 100321c:	df000415 	stw	fp,16(sp)
 1003220:	df000404 	addi	fp,sp,16
 1003224:	e13ffd15 	stw	r4,-12(fp)
 1003228:	e17ffe15 	stw	r5,-8(fp)
 100322c:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
 1003230:	00800044 	movi	r2,1
 1003234:	e0bffc45 	stb	r2,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
 1003238:	00800044 	movi	r2,1
 100323c:	e0bffc05 	stb	r2,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
 1003240:	e13ffd17 	ldw	r4,-12(fp)
 1003244:	e17ffe17 	ldw	r5,-8(fp)
 1003248:	e1bfff17 	ldw	r6,-4(fp)
 100324c:	10031900 	call	1003190 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES8_EET0_T_SA_S9_>
 1003250:	e037883a 	mov	sp,fp
 1003254:	dfc00117 	ldw	ra,4(sp)
 1003258:	df000017 	ldw	fp,0(sp)
 100325c:	dec00204 	addi	sp,sp,8
 1003260:	f800283a 	ret

01003264 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_11__true_type>:
  // uninitialized_copy
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __true_type)
 1003264:	defffa04 	addi	sp,sp,-24
 1003268:	dfc00515 	stw	ra,20(sp)
 100326c:	df000415 	stw	fp,16(sp)
 1003270:	df000404 	addi	fp,sp,16
 1003274:	e13ffc15 	stw	r4,-16(fp)
 1003278:	e17ffd15 	stw	r5,-12(fp)
 100327c:	e1bffe15 	stw	r6,-8(fp)
 1003280:	e1ffff05 	stb	r7,-4(fp)
    { return std::copy(__first, __last, __result); }
 1003284:	e13ffc17 	ldw	r4,-16(fp)
 1003288:	e17ffd17 	ldw	r5,-12(fp)
 100328c:	e1bffe17 	ldw	r6,-8(fp)
 1003290:	10032140 	call	1003214 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>
 1003294:	e037883a 	mov	sp,fp
 1003298:	dfc00117 	ldw	ra,4(sp)
 100329c:	df000017 	ldw	fp,0(sp)
 10032a0:	dec00204 	addi	sp,sp,8
 10032a4:	f800283a 	ret

010032a8 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
 10032a8:	defffa04 	addi	sp,sp,-24
 10032ac:	dfc00515 	stw	ra,20(sp)
 10032b0:	df000415 	stw	fp,16(sp)
 10032b4:	df000404 	addi	fp,sp,16
 10032b8:	e13ffc15 	stw	r4,-16(fp)
 10032bc:	e17ffd15 	stw	r5,-12(fp)
 10032c0:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
 10032c4:	e13ffc17 	ldw	r4,-16(fp)
 10032c8:	e17ffd17 	ldw	r5,-12(fp)
 10032cc:	e1bffe17 	ldw	r6,-8(fp)
 10032d0:	e1ffff03 	ldbu	r7,-4(fp)
 10032d4:	10032640 	call	1003264 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_11__true_type>
 10032d8:	e037883a 	mov	sp,fp
 10032dc:	dfc00117 	ldw	ra,4(sp)
 10032e0:	df000017 	ldw	fp,0(sp)
 10032e4:	dec00204 	addi	sp,sp,8
 10032e8:	f800283a 	ret

010032ec <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_cET0_T_S8_S7_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
 10032ec:	defffa04 	addi	sp,sp,-24
 10032f0:	dfc00515 	stw	ra,20(sp)
 10032f4:	df000415 	stw	fp,16(sp)
 10032f8:	df000404 	addi	fp,sp,16
 10032fc:	e13ffc15 	stw	r4,-16(fp)
 1003300:	e17ffd15 	stw	r5,-12(fp)
 1003304:	e1bffe15 	stw	r6,-8(fp)
 1003308:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
 100330c:	e13ffc17 	ldw	r4,-16(fp)
 1003310:	e17ffd17 	ldw	r5,-12(fp)
 1003314:	e1bffe17 	ldw	r6,-8(fp)
 1003318:	10032a80 	call	10032a8 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>
 100331c:	e037883a 	mov	sp,fp
 1003320:	dfc00117 	ldw	ra,4(sp)
 1003324:	df000017 	ldw	fp,0(sp)
 1003328:	dec00204 	addi	sp,sp,8
 100332c:	f800283a 	ret

01003330 <_ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIP8os_eventEEPT_PKS5_S8_S6_>:
  template<>
    struct __copy_backward<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 1003330:	defffa04 	addi	sp,sp,-24
 1003334:	dfc00515 	stw	ra,20(sp)
 1003338:	df000415 	stw	fp,16(sp)
 100333c:	df000404 	addi	fp,sp,16
 1003340:	e13ffd15 	stw	r4,-12(fp)
 1003344:	e17ffe15 	stw	r5,-8(fp)
 1003348:	e1bfff15 	stw	r6,-4(fp)
        { 
	  const ptrdiff_t _Num = __last - __first;
 100334c:	e0fffe17 	ldw	r3,-8(fp)
 1003350:	e0bffd17 	ldw	r2,-12(fp)
 1003354:	1885c83a 	sub	r2,r3,r2
 1003358:	1005d0ba 	srai	r2,r2,2
 100335c:	e0bffc15 	stw	r2,-16(fp)
	  std::memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 1003360:	e0bffc17 	ldw	r2,-16(fp)
 1003364:	1085883a 	add	r2,r2,r2
 1003368:	1085883a 	add	r2,r2,r2
 100336c:	1007883a 	mov	r3,r2
 1003370:	e0bfff17 	ldw	r2,-4(fp)
 1003374:	10c9c83a 	sub	r4,r2,r3
 1003378:	e0bffc17 	ldw	r2,-16(fp)
 100337c:	1085883a 	add	r2,r2,r2
 1003380:	1085883a 	add	r2,r2,r2
 1003384:	100d883a 	mov	r6,r2
 1003388:	e17ffd17 	ldw	r5,-12(fp)
 100338c:	100edec0 	call	100edec <memmove>
	  return __result - _Num;
 1003390:	e0bffc17 	ldw	r2,-16(fp)
 1003394:	1085883a 	add	r2,r2,r2
 1003398:	1085883a 	add	r2,r2,r2
 100339c:	1007883a 	mov	r3,r2
 10033a0:	e0bfff17 	ldw	r2,-4(fp)
 10033a4:	10c5c83a 	sub	r2,r2,r3
 10033a8:	e037883a 	mov	sp,fp
 10033ac:	dfc00117 	ldw	ra,4(sp)
 10033b0:	df000017 	ldw	fp,0(sp)
 10033b4:	dec00204 	addi	sp,sp,8
 10033b8:	f800283a 	ret

010033bc <_ZSt19__copy_backward_auxIPP8os_eventS2_ET0_T_S4_S3_>:
	}
    };

  template<typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)
 10033bc:	defffa04 	addi	sp,sp,-24
 10033c0:	dfc00515 	stw	ra,20(sp)
 10033c4:	df000415 	stw	fp,16(sp)
 10033c8:	df000404 	addi	fp,sp,16
 10033cc:	e13ffd15 	stw	r4,-12(fp)
 10033d0:	e17ffe15 	stw	r5,-8(fp)
 10033d4:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueType1>::__value
	                     && __is_pointer<_BI1>::__value
	                     && __is_pointer<_BI2>::__value
			     && __are_same<_ValueType1, _ValueType2>::__value);
 10033d8:	00800044 	movi	r2,1
 10033dc:	e0bffc05 	stb	r2,-16(fp)

      return std::__copy_backward<__simple, _Category>::copy_b(__first, __last,
							       __result);
 10033e0:	e13ffd17 	ldw	r4,-12(fp)
 10033e4:	e17ffe17 	ldw	r5,-8(fp)
 10033e8:	e1bfff17 	ldw	r6,-4(fp)
 10033ec:	10033300 	call	1003330 <_ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIP8os_eventEEPT_PKS5_S8_S6_>
 10033f0:	e037883a 	mov	sp,fp
 10033f4:	dfc00117 	ldw	ra,4(sp)
 10033f8:	df000017 	ldw	fp,0(sp)
 10033fc:	dec00204 	addi	sp,sp,8
 1003400:	f800283a 	ret

01003404 <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_>:
  template<>
    struct __copy_backward_normal<true, true>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)
 1003404:	defff704 	addi	sp,sp,-36
 1003408:	dfc00815 	stw	ra,32(sp)
 100340c:	df000715 	stw	fp,28(sp)
 1003410:	dc400615 	stw	r17,24(sp)
 1003414:	dc000515 	stw	r16,20(sp)
 1003418:	df000504 	addi	fp,sp,20
 100341c:	e13ffd15 	stw	r4,-12(fp)
 1003420:	e17ffe15 	stw	r5,-8(fp)
 1003424:	e1bfff15 	stw	r6,-4(fp)
        { return _BI2(std::__copy_backward_aux(__first.base(), __last.base(),
					       __result.base())); }
 1003428:	e13ffd04 	addi	r4,fp,-12
 100342c:	10027e80 	call	10027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1003430:	14400017 	ldw	r17,0(r2)
 1003434:	e13ffe04 	addi	r4,fp,-8
 1003438:	10027e80 	call	10027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 100343c:	14000017 	ldw	r16,0(r2)
 1003440:	e13fff04 	addi	r4,fp,-4
 1003444:	10027e80 	call	10027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1003448:	11800017 	ldw	r6,0(r2)
 100344c:	8809883a 	mov	r4,r17
 1003450:	800b883a 	mov	r5,r16
 1003454:	10033bc0 	call	10033bc <_ZSt19__copy_backward_auxIPP8os_eventS2_ET0_T_S4_S3_>
 1003458:	e0bffb15 	stw	r2,-20(fp)
 100345c:	e13ffc04 	addi	r4,fp,-16
 1003460:	e17ffb04 	addi	r5,fp,-20
 1003464:	10026640 	call	1002664 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 1003468:	e0bffc17 	ldw	r2,-16(fp)
 100346c:	e037883a 	mov	sp,fp
 1003470:	dfc00317 	ldw	ra,12(sp)
 1003474:	df000217 	ldw	fp,8(sp)
 1003478:	dc400117 	ldw	r17,4(sp)
 100347c:	dc000017 	ldw	r16,0(sp)
 1003480:	dec00404 	addi	sp,sp,16
 1003484:	f800283a 	ret

01003488 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
   *  Result may not be in the range [first,last).  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template <typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 1003488:	defffa04 	addi	sp,sp,-24
 100348c:	dfc00515 	stw	ra,20(sp)
 1003490:	df000415 	stw	fp,16(sp)
 1003494:	df000404 	addi	fp,sp,16
 1003498:	e13ffd15 	stw	r4,-12(fp)
 100349c:	e17ffe15 	stw	r5,-8(fp)
 10034a0:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      const bool __bi1 = __is_normal_iterator<_BI1>::__value;
 10034a4:	00800044 	movi	r2,1
 10034a8:	e0bffc45 	stb	r2,-15(fp)
      const bool __bi2 = __is_normal_iterator<_BI2>::__value;
 10034ac:	00800044 	movi	r2,1
 10034b0:	e0bffc05 	stb	r2,-16(fp)
      return std::__copy_backward_normal<__bi1, __bi2>::copy_b_n(__first, __last,
								 __result);
 10034b4:	e13ffd17 	ldw	r4,-12(fp)
 10034b8:	e17ffe17 	ldw	r5,-8(fp)
 10034bc:	e1bfff17 	ldw	r6,-4(fp)
 10034c0:	10034040 	call	1003404 <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_>
 10034c4:	e037883a 	mov	sp,fp
 10034c8:	dfc00117 	ldw	ra,4(sp)
 10034cc:	df000017 	ldw	fp,0(sp)
 10034d0:	dec00204 	addi	sp,sp,8
 10034d4:	f800283a 	ret

010034d8 <_ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP8os_eventEEPT_PKS5_S8_S6_>:
  template<>
    struct __copy<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy(const _Tp* __first, const _Tp* __last, _Tp* __result)
 10034d8:	defffb04 	addi	sp,sp,-20
 10034dc:	dfc00415 	stw	ra,16(sp)
 10034e0:	df000315 	stw	fp,12(sp)
 10034e4:	df000304 	addi	fp,sp,12
 10034e8:	e13ffd15 	stw	r4,-12(fp)
 10034ec:	e17ffe15 	stw	r5,-8(fp)
 10034f0:	e1bfff15 	stw	r6,-4(fp)
        { 
	  std::memmove(__result, __first, sizeof(_Tp) * (__last - __first));
 10034f4:	e0fffe17 	ldw	r3,-8(fp)
 10034f8:	e0bffd17 	ldw	r2,-12(fp)
 10034fc:	1885c83a 	sub	r2,r3,r2
 1003500:	100d883a 	mov	r6,r2
 1003504:	e13fff17 	ldw	r4,-4(fp)
 1003508:	e17ffd17 	ldw	r5,-12(fp)
 100350c:	100edec0 	call	100edec <memmove>
	  return __result + (__last - __first);
 1003510:	e0fffe17 	ldw	r3,-8(fp)
 1003514:	e0bffd17 	ldw	r2,-12(fp)
 1003518:	1885c83a 	sub	r2,r3,r2
 100351c:	1007883a 	mov	r3,r2
 1003520:	e0bfff17 	ldw	r2,-4(fp)
 1003524:	1885883a 	add	r2,r3,r2
 1003528:	e037883a 	mov	sp,fp
 100352c:	dfc00117 	ldw	ra,4(sp)
 1003530:	df000017 	ldw	fp,0(sp)
 1003534:	dec00204 	addi	sp,sp,8
 1003538:	f800283a 	ret

0100353c <_ZSt10__copy_auxIPP8os_eventS2_ET0_T_S4_S3_>:
	}
    };

  template<typename _II, typename _OI>
    inline _OI
    __copy_aux(_II __first, _II __last, _OI __result)
 100353c:	defffa04 	addi	sp,sp,-24
 1003540:	dfc00515 	stw	ra,20(sp)
 1003544:	df000415 	stw	fp,16(sp)
 1003548:	df000404 	addi	fp,sp,16
 100354c:	e13ffd15 	stw	r4,-12(fp)
 1003550:	e17ffe15 	stw	r5,-8(fp)
 1003554:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueTypeI>::__value
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 1003558:	00800044 	movi	r2,1
 100355c:	e0bffc05 	stb	r2,-16(fp)

      return std::__copy<__simple, _Category>::copy(__first, __last, __result);
 1003560:	e13ffd17 	ldw	r4,-12(fp)
 1003564:	e17ffe17 	ldw	r5,-8(fp)
 1003568:	e1bfff17 	ldw	r6,-4(fp)
 100356c:	10034d80 	call	10034d8 <_ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP8os_eventEEPT_PKS5_S8_S6_>
 1003570:	e037883a 	mov	sp,fp
 1003574:	dfc00117 	ldw	ra,4(sp)
 1003578:	df000017 	ldw	fp,0(sp)
 100357c:	dec00204 	addi	sp,sp,8
 1003580:	f800283a 	ret

01003584 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_>:
  template<>
    struct __copy_normal<true, true>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
 1003584:	defff704 	addi	sp,sp,-36
 1003588:	dfc00815 	stw	ra,32(sp)
 100358c:	df000715 	stw	fp,28(sp)
 1003590:	dc400615 	stw	r17,24(sp)
 1003594:	dc000515 	stw	r16,20(sp)
 1003598:	df000504 	addi	fp,sp,20
 100359c:	e13ffd15 	stw	r4,-12(fp)
 10035a0:	e17ffe15 	stw	r5,-8(fp)
 10035a4:	e1bfff15 	stw	r6,-4(fp)
        { return _OI(std::__copy_aux(__first.base(), __last.base(),
				     __result.base())); }
 10035a8:	e13ffd04 	addi	r4,fp,-12
 10035ac:	10027e80 	call	10027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 10035b0:	14400017 	ldw	r17,0(r2)
 10035b4:	e13ffe04 	addi	r4,fp,-8
 10035b8:	10027e80 	call	10027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 10035bc:	14000017 	ldw	r16,0(r2)
 10035c0:	e13fff04 	addi	r4,fp,-4
 10035c4:	10027e80 	call	10027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 10035c8:	11800017 	ldw	r6,0(r2)
 10035cc:	8809883a 	mov	r4,r17
 10035d0:	800b883a 	mov	r5,r16
 10035d4:	100353c0 	call	100353c <_ZSt10__copy_auxIPP8os_eventS2_ET0_T_S4_S3_>
 10035d8:	e0bffb15 	stw	r2,-20(fp)
 10035dc:	e13ffc04 	addi	r4,fp,-16
 10035e0:	e17ffb04 	addi	r5,fp,-20
 10035e4:	10026640 	call	1002664 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 10035e8:	e0bffc17 	ldw	r2,-16(fp)
 10035ec:	e037883a 	mov	sp,fp
 10035f0:	dfc00317 	ldw	ra,12(sp)
 10035f4:	df000217 	ldw	fp,8(sp)
 10035f8:	dc400117 	ldw	r17,4(sp)
 10035fc:	dc000017 	ldw	r16,0(sp)
 1003600:	dec00404 	addi	sp,sp,16
 1003604:	f800283a 	ret

01003608 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
 1003608:	defffa04 	addi	sp,sp,-24
 100360c:	dfc00515 	stw	ra,20(sp)
 1003610:	df000415 	stw	fp,16(sp)
 1003614:	df000404 	addi	fp,sp,16
 1003618:	e13ffd15 	stw	r4,-12(fp)
 100361c:	e17ffe15 	stw	r5,-8(fp)
 1003620:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
 1003624:	00800044 	movi	r2,1
 1003628:	e0bffc45 	stb	r2,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
 100362c:	00800044 	movi	r2,1
 1003630:	e0bffc05 	stb	r2,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
 1003634:	e13ffd17 	ldw	r4,-12(fp)
 1003638:	e17ffe17 	ldw	r5,-8(fp)
 100363c:	e1bfff17 	ldw	r6,-4(fp)
 1003640:	10035840 	call	1003584 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_>
 1003644:	e037883a 	mov	sp,fp
 1003648:	dfc00117 	ldw	ra,4(sp)
 100364c:	df000017 	ldw	fp,0(sp)
 1003650:	dec00204 	addi	sp,sp,8
 1003654:	f800283a 	ret

01003658 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type>:
  // uninitialized_copy
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __true_type)
 1003658:	defffa04 	addi	sp,sp,-24
 100365c:	dfc00515 	stw	ra,20(sp)
 1003660:	df000415 	stw	fp,16(sp)
 1003664:	df000404 	addi	fp,sp,16
 1003668:	e13ffc15 	stw	r4,-16(fp)
 100366c:	e17ffd15 	stw	r5,-12(fp)
 1003670:	e1bffe15 	stw	r6,-8(fp)
 1003674:	e1ffff05 	stb	r7,-4(fp)
    { return std::copy(__first, __last, __result); }
 1003678:	e13ffc17 	ldw	r4,-16(fp)
 100367c:	e17ffd17 	ldw	r5,-12(fp)
 1003680:	e1bffe17 	ldw	r6,-8(fp)
 1003684:	10036080 	call	1003608 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
 1003688:	e037883a 	mov	sp,fp
 100368c:	dfc00117 	ldw	ra,4(sp)
 1003690:	df000017 	ldw	fp,0(sp)
 1003694:	dec00204 	addi	sp,sp,8
 1003698:	f800283a 	ret

0100369c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
 100369c:	defffa04 	addi	sp,sp,-24
 10036a0:	dfc00515 	stw	ra,20(sp)
 10036a4:	df000415 	stw	fp,16(sp)
 10036a8:	df000404 	addi	fp,sp,16
 10036ac:	e13ffc15 	stw	r4,-16(fp)
 10036b0:	e17ffd15 	stw	r5,-12(fp)
 10036b4:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
 10036b8:	e13ffc17 	ldw	r4,-16(fp)
 10036bc:	e17ffd17 	ldw	r5,-12(fp)
 10036c0:	e1bffe17 	ldw	r6,-8(fp)
 10036c4:	e1ffff03 	ldbu	r7,-4(fp)
 10036c8:	10036580 	call	1003658 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type>
 10036cc:	e037883a 	mov	sp,fp
 10036d0:	dfc00117 	ldw	ra,4(sp)
 10036d4:	df000017 	ldw	fp,0(sp)
 10036d8:	dec00204 	addi	sp,sp,8
 10036dc:	f800283a 	ret

010036e0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
 10036e0:	defffa04 	addi	sp,sp,-24
 10036e4:	dfc00515 	stw	ra,20(sp)
 10036e8:	df000415 	stw	fp,16(sp)
 10036ec:	df000404 	addi	fp,sp,16
 10036f0:	e13ffc15 	stw	r4,-16(fp)
 10036f4:	e17ffd15 	stw	r5,-12(fp)
 10036f8:	e1bffe15 	stw	r6,-8(fp)
 10036fc:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
 1003700:	e13ffc17 	ldw	r4,-16(fp)
 1003704:	e17ffd17 	ldw	r5,-12(fp)
 1003708:	e1bffe17 	ldw	r6,-8(fp)
 100370c:	100369c0 	call	100369c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
 1003710:	e037883a 	mov	sp,fp
 1003714:	dfc00117 	ldw	ra,4(sp)
 1003718:	df000017 	ldw	fp,0(sp)
 100371c:	dec00204 	addi	sp,sp,8
 1003720:	f800283a 	ret

01003724 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv>:
      address(const_reference __x) const { return &__x; }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
 1003724:	defffb04 	addi	sp,sp,-20
 1003728:	dfc00415 	stw	ra,16(sp)
 100372c:	df000315 	stw	fp,12(sp)
 1003730:	df000304 	addi	fp,sp,12
 1003734:	e13ffd15 	stw	r4,-12(fp)
 1003738:	e17ffe15 	stw	r5,-8(fp)
 100373c:	e1bfff15 	stw	r6,-4(fp)
      { 
	if (__builtin_expect(__n > this->max_size(), false))
 1003740:	e13ffd17 	ldw	r4,-12(fp)
 1003744:	1002a640 	call	1002a64 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>
 1003748:	1007883a 	mov	r3,r2
 100374c:	e0bffe17 	ldw	r2,-8(fp)
 1003750:	1885803a 	cmpltu	r2,r3,r2
 1003754:	1004c03a 	cmpne	r2,r2,zero
 1003758:	10803fcc 	andi	r2,r2,255
 100375c:	1005003a 	cmpeq	r2,r2,zero
 1003760:	1000011e 	bne	r2,zero,1003768 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv+0x44>
	  std::__throw_bad_alloc();
 1003764:	1005af40 	call	1005af4 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 1003768:	e13ffe17 	ldw	r4,-8(fp)
 100376c:	100dda00 	call	100dda0 <_Znwm>
 1003770:	e037883a 	mov	sp,fp
 1003774:	dfc00117 	ldw	ra,4(sp)
 1003778:	df000017 	ldw	fp,0(sp)
 100377c:	dec00204 	addi	sp,sp,8
 1003780:	f800283a 	ret

01003784 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      _Tp*
      _M_allocate(size_t __n)
 1003784:	defffc04 	addi	sp,sp,-16
 1003788:	dfc00315 	stw	ra,12(sp)
 100378c:	df000215 	stw	fp,8(sp)
 1003790:	df000204 	addi	fp,sp,8
 1003794:	e13ffe15 	stw	r4,-8(fp)
 1003798:	e17fff15 	stw	r5,-4(fp)
      { return _M_impl.allocate(__n); }
 100379c:	e0bffe17 	ldw	r2,-8(fp)
 10037a0:	1009883a 	mov	r4,r2
 10037a4:	e17fff17 	ldw	r5,-4(fp)
 10037a8:	000d883a 	mov	r6,zero
 10037ac:	10037240 	call	1003724 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv>
 10037b0:	e037883a 	mov	sp,fp
 10037b4:	dfc00117 	ldw	ra,4(sp)
 10037b8:	df000017 	ldw	fp,0(sp)
 10037bc:	dec00204 	addi	sp,sp,8
 10037c0:	f800283a 	ret

010037c4 <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc>:
      }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)
 10037c4:	deffeb04 	addi	sp,sp,-84
 10037c8:	dfc01415 	stw	ra,80(sp)
 10037cc:	df001315 	stw	fp,76(sp)
 10037d0:	dc401215 	stw	r17,72(sp)
 10037d4:	dc001115 	stw	r16,68(sp)
 10037d8:	df001104 	addi	fp,sp,68
 10037dc:	e13ffc15 	stw	r4,-16(fp)
 10037e0:	e17ffd15 	stw	r5,-12(fp)
 10037e4:	e1bffe15 	stw	r6,-8(fp)
    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 10037e8:	e0bffc17 	ldw	r2,-16(fp)
 10037ec:	10c00117 	ldw	r3,4(r2)
 10037f0:	e0bffc17 	ldw	r2,-16(fp)
 10037f4:	10800217 	ldw	r2,8(r2)
 10037f8:	18802826 	beq	r3,r2,100389c <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc+0xd8>
	{
	  this->_M_impl.construct(this->_M_impl._M_finish,
 10037fc:	e0bffc17 	ldw	r2,-16(fp)
 1003800:	1009883a 	mov	r4,r2
 1003804:	e0bffc17 	ldw	r2,-16(fp)
 1003808:	11400117 	ldw	r5,4(r2)
 100380c:	e0bffc17 	ldw	r2,-16(fp)
 1003810:	10800117 	ldw	r2,4(r2)
 1003814:	11bfffc4 	addi	r6,r2,-1
 1003818:	10022c40 	call	10022c4 <_ZN9__gnu_cxx13new_allocatorIcE9constructEPcRKc>
				  *(this->_M_impl._M_finish - 1));
	  ++this->_M_impl._M_finish;
 100381c:	e0bffc17 	ldw	r2,-16(fp)
 1003820:	10800117 	ldw	r2,4(r2)
 1003824:	10c00044 	addi	r3,r2,1
 1003828:	e0bffc17 	ldw	r2,-16(fp)
 100382c:	10c00115 	stw	r3,4(r2)
	  _Tp __x_copy = __x;
 1003830:	e0bffe17 	ldw	r2,-8(fp)
 1003834:	10800003 	ldbu	r2,0(r2)
 1003838:	e0bff105 	stb	r2,-60(fp)
	  std::copy_backward(__position,
 100383c:	e0bffc17 	ldw	r2,-16(fp)
 1003840:	10800117 	ldw	r2,4(r2)
 1003844:	10bfff84 	addi	r2,r2,-2
 1003848:	e0bff815 	stw	r2,-32(fp)
 100384c:	e13ff904 	addi	r4,fp,-28
 1003850:	e17ff804 	addi	r5,fp,-32
 1003854:	100237c0 	call	100237c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 1003858:	e0bffc17 	ldw	r2,-16(fp)
 100385c:	10800117 	ldw	r2,4(r2)
 1003860:	10bfffc4 	addi	r2,r2,-1
 1003864:	e0bff615 	stw	r2,-40(fp)
 1003868:	e13ff704 	addi	r4,fp,-36
 100386c:	e17ff604 	addi	r5,fp,-40
 1003870:	100237c0 	call	100237c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 1003874:	e13ffd17 	ldw	r4,-12(fp)
 1003878:	e17ff917 	ldw	r5,-28(fp)
 100387c:	e1bff717 	ldw	r6,-36(fp)
 1003880:	10030940 	call	1003094 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>
			     iterator(this->_M_impl._M_finish-2),
			     iterator(this->_M_impl._M_finish-1));
	  *__position = __x_copy;
 1003884:	e13ffd04 	addi	r4,fp,-12
 1003888:	10020f00 	call	10020f0 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 100388c:	1007883a 	mov	r3,r2
 1003890:	e0bff103 	ldbu	r2,-60(fp)
 1003894:	18800005 	stb	r2,0(r3)
 1003898:	00008006 	br	1003a9c <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc+0x2d8>
	}
      else
	{
	  const size_type __old_size = size();
 100389c:	e13ffc17 	ldw	r4,-16(fp)
 10038a0:	1002a180 	call	1002a18 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 10038a4:	e0bff015 	stw	r2,-64(fp)
	  if (__old_size == this->max_size())
 10038a8:	e13ffc17 	ldw	r4,-16(fp)
 10038ac:	10026400 	call	1002640 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 10038b0:	1007883a 	mov	r3,r2
 10038b4:	e0bff017 	ldw	r2,-64(fp)
 10038b8:	1885003a 	cmpeq	r2,r3,r2
 10038bc:	10803fcc 	andi	r2,r2,255
 10038c0:	1005003a 	cmpeq	r2,r2,zero
 10038c4:	1000031e 	bne	r2,zero,10038d4 <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc+0x110>
	    __throw_length_error(__N("vector::_M_insert_aux"));
 10038c8:	010040b4 	movhi	r4,258
 10038cc:	2117ee04 	addi	r4,r4,24504
 10038d0:	10068e40 	call	10068e4 <_ZSt20__throw_length_errorPKc>

	  // When sizeof(value_type) == 1 and __old_size > size_type(-1)/2
	  // __len overflows: if we don't notice and _M_allocate doesn't
	  // throw we crash badly later.
	  size_type __len = __old_size != 0 ? 2 * __old_size : 1;	  
 10038d4:	e0bff017 	ldw	r2,-64(fp)
 10038d8:	1005003a 	cmpeq	r2,r2,zero
 10038dc:	1000041e 	bne	r2,zero,10038f0 <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc+0x12c>
 10038e0:	e0bff017 	ldw	r2,-64(fp)
 10038e4:	1085883a 	add	r2,r2,r2
 10038e8:	e0bfff15 	stw	r2,-4(fp)
 10038ec:	00000206 	br	10038f8 <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc+0x134>
 10038f0:	00800044 	movi	r2,1
 10038f4:	e0bfff15 	stw	r2,-4(fp)
 10038f8:	e0bfff17 	ldw	r2,-4(fp)
 10038fc:	e0bfef15 	stw	r2,-68(fp)
	  if (__len < __old_size)
 1003900:	e0ffef17 	ldw	r3,-68(fp)
 1003904:	e0bff017 	ldw	r2,-64(fp)
 1003908:	1880032e 	bgeu	r3,r2,1003918 <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc+0x154>
	    __len = this->max_size();
 100390c:	e13ffc17 	ldw	r4,-16(fp)
 1003910:	10026400 	call	1002640 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 1003914:	e0bfef15 	stw	r2,-68(fp)

	  iterator __new_start(this->_M_allocate(__len));
 1003918:	e13ffc17 	ldw	r4,-16(fp)
 100391c:	e17fef17 	ldw	r5,-68(fp)
 1003920:	10037840 	call	1003784 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEm>
 1003924:	e0bff515 	stw	r2,-44(fp)
 1003928:	e13ffa04 	addi	r4,fp,-24
 100392c:	e17ff504 	addi	r5,fp,-44
 1003930:	100237c0 	call	100237c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
	  iterator __new_finish(__new_start);
 1003934:	e0bffa17 	ldw	r2,-24(fp)
 1003938:	e0bffb15 	stw	r2,-20(fp)
	  try
	    {
	      __new_finish =
 100393c:	e17ffc17 	ldw	r5,-16(fp)
 1003940:	e13ff404 	addi	r4,fp,-48
 1003944:	100237c0 	call	100237c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 1003948:	e13ffc17 	ldw	r4,-16(fp)
 100394c:	10021480 	call	1002148 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 1003950:	100b883a 	mov	r5,r2
 1003954:	e13ff304 	addi	r4,fp,-52
 1003958:	1007cc00 	call	1007cc0 <_ZNSaIcEC1ERKS_>
 100395c:	e1fff304 	addi	r7,fp,-52
 1003960:	e13ff417 	ldw	r4,-48(fp)
 1003964:	e17ffd17 	ldw	r5,-12(fp)
 1003968:	e1bffa17 	ldw	r6,-24(fp)
 100396c:	10032ec0 	call	10032ec <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_cET0_T_S8_S7_SaIT1_E>
 1003970:	e0bffb15 	stw	r2,-20(fp)
 1003974:	e13ff304 	addi	r4,fp,-52
 1003978:	1007cd00 	call	1007cd0 <_ZNSaIcED1Ev>
		std::__uninitialized_copy_a(iterator(this->_M_impl._M_start),
					    __position,
					    __new_start,
					    _M_get_Tp_allocator());
	      this->_M_impl.construct(__new_finish.base(), __x);
 100397c:	e0bffc17 	ldw	r2,-16(fp)
 1003980:	1021883a 	mov	r16,r2
 1003984:	e13ffb04 	addi	r4,fp,-20
 1003988:	10024240 	call	1002424 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 100398c:	11400017 	ldw	r5,0(r2)
 1003990:	8009883a 	mov	r4,r16
 1003994:	e1bffe17 	ldw	r6,-8(fp)
 1003998:	10022c40 	call	10022c4 <_ZN9__gnu_cxx13new_allocatorIcE9constructEPcRKc>
	      ++__new_finish;
 100399c:	e13ffb04 	addi	r4,fp,-20
 10039a0:	10020b80 	call	10020b8 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	      __new_finish =
 10039a4:	e0bffc17 	ldw	r2,-16(fp)
 10039a8:	11400104 	addi	r5,r2,4
 10039ac:	e13ff204 	addi	r4,fp,-56
 10039b0:	100237c0 	call	100237c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 10039b4:	e13ffc17 	ldw	r4,-16(fp)
 10039b8:	10021480 	call	1002148 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 10039bc:	100b883a 	mov	r5,r2
 10039c0:	e13ff1c4 	addi	r4,fp,-57
 10039c4:	1007cc00 	call	1007cc0 <_ZNSaIcEC1ERKS_>
 10039c8:	e1fff1c4 	addi	r7,fp,-57
 10039cc:	e13ffd17 	ldw	r4,-12(fp)
 10039d0:	e17ff217 	ldw	r5,-56(fp)
 10039d4:	e1bffb17 	ldw	r6,-20(fp)
 10039d8:	10032ec0 	call	10032ec <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_cET0_T_S8_S7_SaIT1_E>
 10039dc:	e0bffb15 	stw	r2,-20(fp)
 10039e0:	e13ff1c4 	addi	r4,fp,-57
 10039e4:	1007cd00 	call	1007cd0 <_ZNSaIcED1Ev>
	    {
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	      _M_deallocate(__new_start.base(),__len);
	      __throw_exception_again;
	    }
	  std::_Destroy(begin(), end(), _M_get_Tp_allocator());
 10039e8:	e13ffc17 	ldw	r4,-16(fp)
 10039ec:	10023b00 	call	10023b0 <_ZNSt6vectorIcSaIcEE5beginEv>
 10039f0:	1021883a 	mov	r16,r2
 10039f4:	e13ffc17 	ldw	r4,-16(fp)
 10039f8:	10023e80 	call	10023e8 <_ZNSt6vectorIcSaIcEE3endEv>
 10039fc:	1023883a 	mov	r17,r2
 1003a00:	e13ffc17 	ldw	r4,-16(fp)
 1003a04:	10021480 	call	1002148 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 1003a08:	100b883a 	mov	r5,r2
 1003a0c:	e13ff144 	addi	r4,fp,-59
 1003a10:	1007cc00 	call	1007cc0 <_ZNSaIcEC1ERKS_>
 1003a14:	e1bff144 	addi	r6,fp,-59
 1003a18:	8009883a 	mov	r4,r16
 1003a1c:	880b883a 	mov	r5,r17
 1003a20:	1002aec0 	call	1002aec <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcEvT_S7_SaIT0_E>
 1003a24:	e13ff144 	addi	r4,fp,-59
 1003a28:	1007cd00 	call	1007cd0 <_ZNSaIcED1Ev>
	  _M_deallocate(this->_M_impl._M_start,
 1003a2c:	e13ffc17 	ldw	r4,-16(fp)
 1003a30:	e0bffc17 	ldw	r2,-16(fp)
 1003a34:	11400017 	ldw	r5,0(r2)
 1003a38:	e0bffc17 	ldw	r2,-16(fp)
 1003a3c:	10800217 	ldw	r2,8(r2)
 1003a40:	1007883a 	mov	r3,r2
 1003a44:	e0bffc17 	ldw	r2,-16(fp)
 1003a48:	10800017 	ldw	r2,0(r2)
 1003a4c:	1885c83a 	sub	r2,r3,r2
 1003a50:	100d883a 	mov	r6,r2
 1003a54:	1002dac0 	call	1002dac <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm>
			this->_M_impl._M_end_of_storage
			- this->_M_impl._M_start);
	  this->_M_impl._M_start = __new_start.base();
 1003a58:	e13ffa04 	addi	r4,fp,-24
 1003a5c:	10024240 	call	1002424 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1003a60:	10c00017 	ldw	r3,0(r2)
 1003a64:	e0bffc17 	ldw	r2,-16(fp)
 1003a68:	10c00015 	stw	r3,0(r2)
	  this->_M_impl._M_finish = __new_finish.base();
 1003a6c:	e13ffb04 	addi	r4,fp,-20
 1003a70:	10024240 	call	1002424 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1003a74:	10c00017 	ldw	r3,0(r2)
 1003a78:	e0bffc17 	ldw	r2,-16(fp)
 1003a7c:	10c00115 	stw	r3,4(r2)
	  this->_M_impl._M_end_of_storage = __new_start.base() + __len;
 1003a80:	e13ffa04 	addi	r4,fp,-24
 1003a84:	10024240 	call	1002424 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1003a88:	10c00017 	ldw	r3,0(r2)
 1003a8c:	e0bfef17 	ldw	r2,-68(fp)
 1003a90:	1887883a 	add	r3,r3,r2
 1003a94:	e0bffc17 	ldw	r2,-16(fp)
 1003a98:	10c00215 	stw	r3,8(r2)
 1003a9c:	e037883a 	mov	sp,fp
 1003aa0:	dfc00317 	ldw	ra,12(sp)
 1003aa4:	df000217 	ldw	fp,8(sp)
 1003aa8:	dc400117 	ldw	r17,4(sp)
 1003aac:	dc000017 	ldw	r16,0(sp)
 1003ab0:	dec00404 	addi	sp,sp,16
 1003ab4:	f800283a 	ret

01003ab8 <_ZNSt6vectorIcSaIcEE9push_backERKc>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 1003ab8:	defffc04 	addi	sp,sp,-16
 1003abc:	dfc00315 	stw	ra,12(sp)
 1003ac0:	df000215 	stw	fp,8(sp)
 1003ac4:	df000204 	addi	fp,sp,8
 1003ac8:	e13ffe15 	stw	r4,-8(fp)
 1003acc:	e17fff15 	stw	r5,-4(fp)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 1003ad0:	e0bffe17 	ldw	r2,-8(fp)
 1003ad4:	10c00117 	ldw	r3,4(r2)
 1003ad8:	e0bffe17 	ldw	r2,-8(fp)
 1003adc:	10800217 	ldw	r2,8(r2)
 1003ae0:	18800c26 	beq	r3,r2,1003b14 <_ZNSt6vectorIcSaIcEE9push_backERKc+0x5c>
	  {
	    this->_M_impl.construct(this->_M_impl._M_finish, __x);
 1003ae4:	e0bffe17 	ldw	r2,-8(fp)
 1003ae8:	1009883a 	mov	r4,r2
 1003aec:	e0bffe17 	ldw	r2,-8(fp)
 1003af0:	11400117 	ldw	r5,4(r2)
 1003af4:	e1bfff17 	ldw	r6,-4(fp)
 1003af8:	10022c40 	call	10022c4 <_ZN9__gnu_cxx13new_allocatorIcE9constructEPcRKc>
	    ++this->_M_impl._M_finish;
 1003afc:	e0bffe17 	ldw	r2,-8(fp)
 1003b00:	10800117 	ldw	r2,4(r2)
 1003b04:	10c00044 	addi	r3,r2,1
 1003b08:	e0bffe17 	ldw	r2,-8(fp)
 1003b0c:	10c00115 	stw	r3,4(r2)
 1003b10:	00000606 	br	1003b2c <_ZNSt6vectorIcSaIcEE9push_backERKc+0x74>
	  }
	else
	  _M_insert_aux(end(), __x);
 1003b14:	e13ffe17 	ldw	r4,-8(fp)
 1003b18:	10023e80 	call	10023e8 <_ZNSt6vectorIcSaIcEE3endEv>
 1003b1c:	100b883a 	mov	r5,r2
 1003b20:	e13ffe17 	ldw	r4,-8(fp)
 1003b24:	e1bfff17 	ldw	r6,-4(fp)
 1003b28:	10037c40 	call	10037c4 <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc>
 1003b2c:	e037883a 	mov	sp,fp
 1003b30:	dfc00117 	ldw	ra,4(sp)
 1003b34:	df000017 	ldw	fp,0(sp)
 1003b38:	dec00204 	addi	sp,sp,8
 1003b3c:	f800283a 	ret

01003b40 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE8allocateEmPKv>:
      address(const_reference __x) const { return &__x; }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
 1003b40:	defffb04 	addi	sp,sp,-20
 1003b44:	dfc00415 	stw	ra,16(sp)
 1003b48:	df000315 	stw	fp,12(sp)
 1003b4c:	df000304 	addi	fp,sp,12
 1003b50:	e13ffd15 	stw	r4,-12(fp)
 1003b54:	e17ffe15 	stw	r5,-8(fp)
 1003b58:	e1bfff15 	stw	r6,-4(fp)
      { 
	if (__builtin_expect(__n > this->max_size(), false))
 1003b5c:	e13ffd17 	ldw	r4,-12(fp)
 1003b60:	1002cac0 	call	1002cac <_ZNK9__gnu_cxx13new_allocatorIP8os_eventE8max_sizeEv>
 1003b64:	1007883a 	mov	r3,r2
 1003b68:	e0bffe17 	ldw	r2,-8(fp)
 1003b6c:	1885803a 	cmpltu	r2,r3,r2
 1003b70:	1004c03a 	cmpne	r2,r2,zero
 1003b74:	10803fcc 	andi	r2,r2,255
 1003b78:	1005003a 	cmpeq	r2,r2,zero
 1003b7c:	1000011e 	bne	r2,zero,1003b84 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE8allocateEmPKv+0x44>
	  std::__throw_bad_alloc();
 1003b80:	1005af40 	call	1005af4 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 1003b84:	e0bffe17 	ldw	r2,-8(fp)
 1003b88:	1085883a 	add	r2,r2,r2
 1003b8c:	1085883a 	add	r2,r2,r2
 1003b90:	1009883a 	mov	r4,r2
 1003b94:	100dda00 	call	100dda0 <_Znwm>
 1003b98:	e037883a 	mov	sp,fp
 1003b9c:	dfc00117 	ldw	ra,4(sp)
 1003ba0:	df000017 	ldw	fp,0(sp)
 1003ba4:	dec00204 	addi	sp,sp,8
 1003ba8:	f800283a 	ret

01003bac <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      _Tp*
      _M_allocate(size_t __n)
 1003bac:	defffc04 	addi	sp,sp,-16
 1003bb0:	dfc00315 	stw	ra,12(sp)
 1003bb4:	df000215 	stw	fp,8(sp)
 1003bb8:	df000204 	addi	fp,sp,8
 1003bbc:	e13ffe15 	stw	r4,-8(fp)
 1003bc0:	e17fff15 	stw	r5,-4(fp)
      { return _M_impl.allocate(__n); }
 1003bc4:	e0bffe17 	ldw	r2,-8(fp)
 1003bc8:	1009883a 	mov	r4,r2
 1003bcc:	e17fff17 	ldw	r5,-4(fp)
 1003bd0:	000d883a 	mov	r6,zero
 1003bd4:	1003b400 	call	1003b40 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE8allocateEmPKv>
 1003bd8:	e037883a 	mov	sp,fp
 1003bdc:	dfc00117 	ldw	ra,4(sp)
 1003be0:	df000017 	ldw	fp,0(sp)
 1003be4:	dec00204 	addi	sp,sp,8
 1003be8:	f800283a 	ret

01003bec <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_>:
      }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)
 1003bec:	deffea04 	addi	sp,sp,-88
 1003bf0:	dfc01515 	stw	ra,84(sp)
 1003bf4:	df001415 	stw	fp,80(sp)
 1003bf8:	dc401315 	stw	r17,76(sp)
 1003bfc:	dc001215 	stw	r16,72(sp)
 1003c00:	df001204 	addi	fp,sp,72
 1003c04:	e13ffc15 	stw	r4,-16(fp)
 1003c08:	e17ffd15 	stw	r5,-12(fp)
 1003c0c:	e1bffe15 	stw	r6,-8(fp)
    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 1003c10:	e0bffc17 	ldw	r2,-16(fp)
 1003c14:	10c00117 	ldw	r3,4(r2)
 1003c18:	e0bffc17 	ldw	r2,-16(fp)
 1003c1c:	10800217 	ldw	r2,8(r2)
 1003c20:	18802826 	beq	r3,r2,1003cc4 <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_+0xd8>
	{
	  this->_M_impl.construct(this->_M_impl._M_finish,
 1003c24:	e0bffc17 	ldw	r2,-16(fp)
 1003c28:	1009883a 	mov	r4,r2
 1003c2c:	e0bffc17 	ldw	r2,-16(fp)
 1003c30:	11400117 	ldw	r5,4(r2)
 1003c34:	e0bffc17 	ldw	r2,-16(fp)
 1003c38:	10800117 	ldw	r2,4(r2)
 1003c3c:	11bfff04 	addi	r6,r2,-4
 1003c40:	10023200 	call	1002320 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_>
				  *(this->_M_impl._M_finish - 1));
	  ++this->_M_impl._M_finish;
 1003c44:	e0bffc17 	ldw	r2,-16(fp)
 1003c48:	10800117 	ldw	r2,4(r2)
 1003c4c:	10c00104 	addi	r3,r2,4
 1003c50:	e0bffc17 	ldw	r2,-16(fp)
 1003c54:	10c00115 	stw	r3,4(r2)
	  _Tp __x_copy = __x;
 1003c58:	e0bffe17 	ldw	r2,-8(fp)
 1003c5c:	10800017 	ldw	r2,0(r2)
 1003c60:	e0bff015 	stw	r2,-64(fp)
	  std::copy_backward(__position,
 1003c64:	e0bffc17 	ldw	r2,-16(fp)
 1003c68:	10800117 	ldw	r2,4(r2)
 1003c6c:	10bffe04 	addi	r2,r2,-8
 1003c70:	e0bff815 	stw	r2,-32(fp)
 1003c74:	e13ff904 	addi	r4,fp,-28
 1003c78:	e17ff804 	addi	r5,fp,-32
 1003c7c:	10026640 	call	1002664 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 1003c80:	e0bffc17 	ldw	r2,-16(fp)
 1003c84:	10800117 	ldw	r2,4(r2)
 1003c88:	10bfff04 	addi	r2,r2,-4
 1003c8c:	e0bff615 	stw	r2,-40(fp)
 1003c90:	e13ff704 	addi	r4,fp,-36
 1003c94:	e17ff604 	addi	r5,fp,-40
 1003c98:	10026640 	call	1002664 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 1003c9c:	e13ffd17 	ldw	r4,-12(fp)
 1003ca0:	e17ff917 	ldw	r5,-28(fp)
 1003ca4:	e1bff717 	ldw	r6,-36(fp)
 1003ca8:	10034880 	call	1003488 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
			     iterator(this->_M_impl._M_finish-2),
			     iterator(this->_M_impl._M_finish-1));
	  *__position = __x_copy;
 1003cac:	e13ffd04 	addi	r4,fp,-12
 1003cb0:	10024980 	call	1002498 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEdeEv>
 1003cb4:	1007883a 	mov	r3,r2
 1003cb8:	e0bff017 	ldw	r2,-64(fp)
 1003cbc:	18800015 	stw	r2,0(r3)
 1003cc0:	00008306 	br	1003ed0 <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_+0x2e4>
	}
      else
	{
	  const size_type __old_size = size();
 1003cc4:	e13ffc17 	ldw	r4,-16(fp)
 1003cc8:	1002c600 	call	1002c60 <_ZNKSt6vectorIP8os_eventSaIS1_EE4sizeEv>
 1003ccc:	e0bfef15 	stw	r2,-68(fp)
	  if (__old_size == this->max_size())
 1003cd0:	e13ffc17 	ldw	r4,-16(fp)
 1003cd4:	10027c00 	call	10027c0 <_ZNKSt6vectorIP8os_eventSaIS1_EE8max_sizeEv>
 1003cd8:	1007883a 	mov	r3,r2
 1003cdc:	e0bfef17 	ldw	r2,-68(fp)
 1003ce0:	1885003a 	cmpeq	r2,r3,r2
 1003ce4:	10803fcc 	andi	r2,r2,255
 1003ce8:	1005003a 	cmpeq	r2,r2,zero
 1003cec:	1000031e 	bne	r2,zero,1003cfc <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_+0x110>
	    __throw_length_error(__N("vector::_M_insert_aux"));
 1003cf0:	010040b4 	movhi	r4,258
 1003cf4:	2117ee04 	addi	r4,r4,24504
 1003cf8:	10068e40 	call	10068e4 <_ZSt20__throw_length_errorPKc>

	  // When sizeof(value_type) == 1 and __old_size > size_type(-1)/2
	  // __len overflows: if we don't notice and _M_allocate doesn't
	  // throw we crash badly later.
	  size_type __len = __old_size != 0 ? 2 * __old_size : 1;	  
 1003cfc:	e0bfef17 	ldw	r2,-68(fp)
 1003d00:	1005003a 	cmpeq	r2,r2,zero
 1003d04:	1000041e 	bne	r2,zero,1003d18 <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_+0x12c>
 1003d08:	e0bfef17 	ldw	r2,-68(fp)
 1003d0c:	1085883a 	add	r2,r2,r2
 1003d10:	e0bfff15 	stw	r2,-4(fp)
 1003d14:	00000206 	br	1003d20 <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_+0x134>
 1003d18:	00800044 	movi	r2,1
 1003d1c:	e0bfff15 	stw	r2,-4(fp)
 1003d20:	e0bfff17 	ldw	r2,-4(fp)
 1003d24:	e0bfee15 	stw	r2,-72(fp)
	  if (__len < __old_size)
 1003d28:	e0ffee17 	ldw	r3,-72(fp)
 1003d2c:	e0bfef17 	ldw	r2,-68(fp)
 1003d30:	1880032e 	bgeu	r3,r2,1003d40 <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_+0x154>
	    __len = this->max_size();
 1003d34:	e13ffc17 	ldw	r4,-16(fp)
 1003d38:	10027c00 	call	10027c0 <_ZNKSt6vectorIP8os_eventSaIS1_EE8max_sizeEv>
 1003d3c:	e0bfee15 	stw	r2,-72(fp)

	  iterator __new_start(this->_M_allocate(__len));
 1003d40:	e13ffc17 	ldw	r4,-16(fp)
 1003d44:	e17fee17 	ldw	r5,-72(fp)
 1003d48:	1003bac0 	call	1003bac <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE11_M_allocateEm>
 1003d4c:	e0bff515 	stw	r2,-44(fp)
 1003d50:	e13ffa04 	addi	r4,fp,-24
 1003d54:	e17ff504 	addi	r5,fp,-44
 1003d58:	10026640 	call	1002664 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
	  iterator __new_finish(__new_start);
 1003d5c:	e0bffa17 	ldw	r2,-24(fp)
 1003d60:	e0bffb15 	stw	r2,-20(fp)
	  try
	    {
	      __new_finish =
 1003d64:	e17ffc17 	ldw	r5,-16(fp)
 1003d68:	e13ff404 	addi	r4,fp,-48
 1003d6c:	10026640 	call	1002664 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 1003d70:	e13ffc17 	ldw	r4,-16(fp)
 1003d74:	10022a00 	call	10022a0 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>
 1003d78:	100b883a 	mov	r5,r2
 1003d7c:	e13ff304 	addi	r4,fp,-52
 1003d80:	10022300 	call	1002230 <_ZNSaIP8os_eventEC1ERKS1_>
 1003d84:	e1fff304 	addi	r7,fp,-52
 1003d88:	e13ff417 	ldw	r4,-48(fp)
 1003d8c:	e17ffd17 	ldw	r5,-12(fp)
 1003d90:	e1bffa17 	ldw	r6,-24(fp)
 1003d94:	10036e00 	call	10036e0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E>
 1003d98:	e0bffb15 	stw	r2,-20(fp)
 1003d9c:	e13ff304 	addi	r4,fp,-52
 1003da0:	10021dc0 	call	10021dc <_ZNSaIP8os_eventED1Ev>
		std::__uninitialized_copy_a(iterator(this->_M_impl._M_start),
					    __position,
					    __new_start,
					    _M_get_Tp_allocator());
	      this->_M_impl.construct(__new_finish.base(), __x);
 1003da4:	e0bffc17 	ldw	r2,-16(fp)
 1003da8:	1021883a 	mov	r16,r2
 1003dac:	e13ffb04 	addi	r4,fp,-20
 1003db0:	10027e80 	call	10027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1003db4:	11400017 	ldw	r5,0(r2)
 1003db8:	8009883a 	mov	r4,r16
 1003dbc:	e1bffe17 	ldw	r6,-8(fp)
 1003dc0:	10023200 	call	1002320 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_>
	      ++__new_finish;
 1003dc4:	e13ffb04 	addi	r4,fp,-20
 1003dc8:	100280c0 	call	100280c <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEppEv>
	      __new_finish =
 1003dcc:	e0bffc17 	ldw	r2,-16(fp)
 1003dd0:	11400104 	addi	r5,r2,4
 1003dd4:	e13ff204 	addi	r4,fp,-56
 1003dd8:	10026640 	call	1002664 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 1003ddc:	e13ffc17 	ldw	r4,-16(fp)
 1003de0:	10022a00 	call	10022a0 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>
 1003de4:	100b883a 	mov	r5,r2
 1003de8:	e13ff184 	addi	r4,fp,-58
 1003dec:	10022300 	call	1002230 <_ZNSaIP8os_eventEC1ERKS1_>
 1003df0:	e1fff184 	addi	r7,fp,-58
 1003df4:	e13ffd17 	ldw	r4,-12(fp)
 1003df8:	e17ff217 	ldw	r5,-56(fp)
 1003dfc:	e1bffb17 	ldw	r6,-20(fp)
 1003e00:	10036e00 	call	10036e0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E>
 1003e04:	e0bffb15 	stw	r2,-20(fp)
 1003e08:	e13ff184 	addi	r4,fp,-58
 1003e0c:	10021dc0 	call	10021dc <_ZNSaIP8os_eventED1Ev>
	    {
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	      _M_deallocate(__new_start.base(),__len);
	      __throw_exception_again;
	    }
	  std::_Destroy(begin(), end(), _M_get_Tp_allocator());
 1003e10:	e13ffc17 	ldw	r4,-16(fp)
 1003e14:	10026980 	call	1002698 <_ZNSt6vectorIP8os_eventSaIS1_EE5beginEv>
 1003e18:	1021883a 	mov	r16,r2
 1003e1c:	e13ffc17 	ldw	r4,-16(fp)
 1003e20:	10027840 	call	1002784 <_ZNSt6vectorIP8os_eventSaIS1_EE3endEv>
 1003e24:	1023883a 	mov	r17,r2
 1003e28:	e13ffc17 	ldw	r4,-16(fp)
 1003e2c:	10022a00 	call	10022a0 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>
 1003e30:	100b883a 	mov	r5,r2
 1003e34:	e13ff104 	addi	r4,fp,-60
 1003e38:	10022300 	call	1002230 <_ZNSaIP8os_eventEC1ERKS1_>
 1003e3c:	e1bff104 	addi	r6,fp,-60
 1003e40:	8009883a 	mov	r4,r16
 1003e44:	880b883a 	mov	r5,r17
 1003e48:	1002d380 	call	1002d38 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES3_EvT_S9_SaIT0_E>
 1003e4c:	e13ff104 	addi	r4,fp,-60
 1003e50:	10021dc0 	call	10021dc <_ZNSaIP8os_eventED1Ev>
	  _M_deallocate(this->_M_impl._M_start,
 1003e54:	e13ffc17 	ldw	r4,-16(fp)
 1003e58:	e0bffc17 	ldw	r2,-16(fp)
 1003e5c:	11400017 	ldw	r5,0(r2)
 1003e60:	e0bffc17 	ldw	r2,-16(fp)
 1003e64:	10800217 	ldw	r2,8(r2)
 1003e68:	1007883a 	mov	r3,r2
 1003e6c:	e0bffc17 	ldw	r2,-16(fp)
 1003e70:	10800017 	ldw	r2,0(r2)
 1003e74:	1885c83a 	sub	r2,r3,r2
 1003e78:	1005d0ba 	srai	r2,r2,2
 1003e7c:	100d883a 	mov	r6,r2
 1003e80:	1002e900 	call	1002e90 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE13_M_deallocateEPS1_m>
			this->_M_impl._M_end_of_storage
			- this->_M_impl._M_start);
	  this->_M_impl._M_start = __new_start.base();
 1003e84:	e13ffa04 	addi	r4,fp,-24
 1003e88:	10027e80 	call	10027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1003e8c:	10c00017 	ldw	r3,0(r2)
 1003e90:	e0bffc17 	ldw	r2,-16(fp)
 1003e94:	10c00015 	stw	r3,0(r2)
	  this->_M_impl._M_finish = __new_finish.base();
 1003e98:	e13ffb04 	addi	r4,fp,-20
 1003e9c:	10027e80 	call	10027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1003ea0:	10c00017 	ldw	r3,0(r2)
 1003ea4:	e0bffc17 	ldw	r2,-16(fp)
 1003ea8:	10c00115 	stw	r3,4(r2)
	  this->_M_impl._M_end_of_storage = __new_start.base() + __len;
 1003eac:	e13ffa04 	addi	r4,fp,-24
 1003eb0:	10027e80 	call	10027e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1003eb4:	10c00017 	ldw	r3,0(r2)
 1003eb8:	e0bfee17 	ldw	r2,-72(fp)
 1003ebc:	1085883a 	add	r2,r2,r2
 1003ec0:	1085883a 	add	r2,r2,r2
 1003ec4:	1887883a 	add	r3,r3,r2
 1003ec8:	e0bffc17 	ldw	r2,-16(fp)
 1003ecc:	10c00215 	stw	r3,8(r2)
 1003ed0:	e037883a 	mov	sp,fp
 1003ed4:	dfc00317 	ldw	ra,12(sp)
 1003ed8:	df000217 	ldw	fp,8(sp)
 1003edc:	dc400117 	ldw	r17,4(sp)
 1003ee0:	dc000017 	ldw	r16,0(sp)
 1003ee4:	dec00404 	addi	sp,sp,16
 1003ee8:	f800283a 	ret

01003eec <_ZNSt6vectorIP8os_eventSaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 1003eec:	defffc04 	addi	sp,sp,-16
 1003ef0:	dfc00315 	stw	ra,12(sp)
 1003ef4:	df000215 	stw	fp,8(sp)
 1003ef8:	df000204 	addi	fp,sp,8
 1003efc:	e13ffe15 	stw	r4,-8(fp)
 1003f00:	e17fff15 	stw	r5,-4(fp)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 1003f04:	e0bffe17 	ldw	r2,-8(fp)
 1003f08:	10c00117 	ldw	r3,4(r2)
 1003f0c:	e0bffe17 	ldw	r2,-8(fp)
 1003f10:	10800217 	ldw	r2,8(r2)
 1003f14:	18800c26 	beq	r3,r2,1003f48 <_ZNSt6vectorIP8os_eventSaIS1_EE9push_backERKS1_+0x5c>
	  {
	    this->_M_impl.construct(this->_M_impl._M_finish, __x);
 1003f18:	e0bffe17 	ldw	r2,-8(fp)
 1003f1c:	1009883a 	mov	r4,r2
 1003f20:	e0bffe17 	ldw	r2,-8(fp)
 1003f24:	11400117 	ldw	r5,4(r2)
 1003f28:	e1bfff17 	ldw	r6,-4(fp)
 1003f2c:	10023200 	call	1002320 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_>
	    ++this->_M_impl._M_finish;
 1003f30:	e0bffe17 	ldw	r2,-8(fp)
 1003f34:	10800117 	ldw	r2,4(r2)
 1003f38:	10c00104 	addi	r3,r2,4
 1003f3c:	e0bffe17 	ldw	r2,-8(fp)
 1003f40:	10c00115 	stw	r3,4(r2)
 1003f44:	00000606 	br	1003f60 <_ZNSt6vectorIP8os_eventSaIS1_EE9push_backERKS1_+0x74>
	  }
	else
	  _M_insert_aux(end(), __x);
 1003f48:	e13ffe17 	ldw	r4,-8(fp)
 1003f4c:	10027840 	call	1002784 <_ZNSt6vectorIP8os_eventSaIS1_EE3endEv>
 1003f50:	100b883a 	mov	r5,r2
 1003f54:	e13ffe17 	ldw	r4,-8(fp)
 1003f58:	e1bfff17 	ldw	r6,-4(fp)
 1003f5c:	1003bec0 	call	1003bec <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_>
 1003f60:	e037883a 	mov	sp,fp
 1003f64:	dfc00117 	ldw	ra,4(sp)
 1003f68:	df000017 	ldw	fp,0(sp)
 1003f6c:	dec00204 	addi	sp,sp,8
 1003f70:	f800283a 	ret

01003f74 <_ZN13NetworkSender5parseEPc>:

/**
 * Forwards the given network command to the server.
 * @param command the command to forward
 */
void NetworkSender::parse(char *command) {
 1003f74:	defffc04 	addi	sp,sp,-16
 1003f78:	dfc00315 	stw	ra,12(sp)
 1003f7c:	df000215 	stw	fp,8(sp)
 1003f80:	df000204 	addi	fp,sp,8
 1003f84:	e13ffe15 	stw	r4,-8(fp)
 1003f88:	e17fff15 	stw	r5,-4(fp)
	NETWORKSENDER_LOG(printf("NetworkSender [command: %s]\n", command));
	wifi->tcpSendAndConfirm(command, WAIT_FOREVER);
 1003f8c:	e0bffe17 	ldw	r2,-8(fp)
 1003f90:	11000617 	ldw	r4,24(r2)
 1003f94:	e17fff17 	ldw	r5,-4(fp)
 1003f98:	000d883a 	mov	r6,zero
 1003f9c:	1004bbc0 	call	1004bbc <_ZN11WifiHandler17tcpSendAndConfirmEPct>
}
 1003fa0:	e037883a 	mov	sp,fp
 1003fa4:	dfc00117 	ldw	ra,4(sp)
 1003fa8:	df000017 	ldw	fp,0(sp)
 1003fac:	dec00204 	addi	sp,sp,8
 1003fb0:	f800283a 	ret

01003fb4 <_ZN13NetworkSenderC1EP11WifiHandler>:

/**
 * Creates a new network sender.
 * @param wifi - the wifi handler to use to send messages to the server
 */
NetworkSender::NetworkSender(WifiHandler *wifiHandler) {
 1003fb4:	defffc04 	addi	sp,sp,-16
 1003fb8:	dfc00315 	stw	ra,12(sp)
 1003fbc:	df000215 	stw	fp,8(sp)
 1003fc0:	df000204 	addi	fp,sp,8
 1003fc4:	e13ffe15 	stw	r4,-8(fp)
 1003fc8:	e17fff15 	stw	r5,-4(fp)
 1003fcc:	e13ffe17 	ldw	r4,-8(fp)
 1003fd0:	1000d4c0 	call	1000d4c <_ZN8ListenerC2Ev>
 1003fd4:	00c040b4 	movhi	r3,258
 1003fd8:	18d7f604 	addi	r3,r3,24536
 1003fdc:	e0bffe17 	ldw	r2,-8(fp)
 1003fe0:	10c00015 	stw	r3,0(r2)
	wifi = wifiHandler;
 1003fe4:	e0fffe17 	ldw	r3,-8(fp)
 1003fe8:	e0bfff17 	ldw	r2,-4(fp)
 1003fec:	18800615 	stw	r2,24(r3)
}
 1003ff0:	e037883a 	mov	sp,fp
 1003ff4:	dfc00117 	ldw	ra,4(sp)
 1003ff8:	df000017 	ldw	fp,0(sp)
 1003ffc:	dec00204 	addi	sp,sp,8
 1004000:	f800283a 	ret

01004004 <_ZN13NetworkSenderC2EP11WifiHandler>:

/**
 * Creates a new network sender.
 * @param wifi - the wifi handler to use to send messages to the server
 */
NetworkSender::NetworkSender(WifiHandler *wifiHandler) {
 1004004:	defffc04 	addi	sp,sp,-16
 1004008:	dfc00315 	stw	ra,12(sp)
 100400c:	df000215 	stw	fp,8(sp)
 1004010:	df000204 	addi	fp,sp,8
 1004014:	e13ffe15 	stw	r4,-8(fp)
 1004018:	e17fff15 	stw	r5,-4(fp)
 100401c:	e13ffe17 	ldw	r4,-8(fp)
 1004020:	1000d4c0 	call	1000d4c <_ZN8ListenerC2Ev>
 1004024:	00c040b4 	movhi	r3,258
 1004028:	18d7f604 	addi	r3,r3,24536
 100402c:	e0bffe17 	ldw	r2,-8(fp)
 1004030:	10c00015 	stw	r3,0(r2)
	wifi = wifiHandler;
 1004034:	e0fffe17 	ldw	r3,-8(fp)
 1004038:	e0bfff17 	ldw	r2,-4(fp)
 100403c:	18800615 	stw	r2,24(r3)
}
 1004040:	e037883a 	mov	sp,fp
 1004044:	dfc00117 	ldw	ra,4(sp)
 1004048:	df000017 	ldw	fp,0(sp)
 100404c:	dec00204 	addi	sp,sp,8
 1004050:	f800283a 	ret

01004054 <_Z26network_sender_update_taskPv>:
// TASKS

extern NetworkSender *networkOut;

/* Waits for outgoing network commands and forwards them as they arrive. */
void network_sender_update_task(void *pdata) {
 1004054:	deffe604 	addi	sp,sp,-104
 1004058:	dfc01915 	stw	ra,100(sp)
 100405c:	df001815 	stw	fp,96(sp)
 1004060:	ddc01715 	stw	r23,92(sp)
 1004064:	dd801615 	stw	r22,88(sp)
 1004068:	dd401515 	stw	r21,84(sp)
 100406c:	dd001415 	stw	r20,80(sp)
 1004070:	dcc01315 	stw	r19,76(sp)
 1004074:	dc801215 	stw	r18,72(sp)
 1004078:	dc401115 	stw	r17,68(sp)
 100407c:	dc001015 	stw	r16,64(sp)
 1004080:	df001004 	addi	fp,sp,64
 1004084:	e13ff115 	stw	r4,-60(fp)
 1004088:	00804074 	movhi	r2,257
 100408c:	10b41004 	addi	r2,r2,-12224
 1004090:	e0bff815 	stw	r2,-32(fp)
 1004094:	008040b4 	movhi	r2,258
 1004098:	10960804 	addi	r2,r2,22560
 100409c:	e0bff915 	stw	r2,-28(fp)
 10040a0:	e0bffa04 	addi	r2,fp,-24
 10040a4:	e0fff004 	addi	r3,fp,-64
 10040a8:	10c00015 	stw	r3,0(r2)
 10040ac:	00c04034 	movhi	r3,256
 10040b0:	18d03a04 	addi	r3,r3,16616
 10040b4:	10c00115 	stw	r3,4(r2)
 10040b8:	16c00215 	stw	sp,8(r2)
 10040bc:	e13ff204 	addi	r4,fp,-56
 10040c0:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 10040c4:	00000006 	br	10040c8 <_Z26network_sender_update_taskPv+0x74>
	TASK_LOG(printf("NetworkSender [task: update, status: start]\n"));
	while (true) {
		try {
			// Update the network sender.
			networkOut->update();
 10040c8:	008040f4 	movhi	r2,259
 10040cc:	10a40404 	addi	r2,r2,-28656
 10040d0:	10800017 	ldw	r2,0(r2)
 10040d4:	1009883a 	mov	r4,r2
 10040d8:	00800044 	movi	r2,1
 10040dc:	e0bff315 	stw	r2,-52(fp)
 10040e0:	1000bf80 	call	1000bf8 <_ZN8Listener6updateEv>
 10040e4:	003ff806 	br	10040c8 <_Z26network_sender_update_taskPv+0x74>
 10040e8:	e7001004 	addi	fp,fp,64
 10040ec:	e0bff417 	ldw	r2,-48(fp)
 10040f0:	e0bfff15 	stw	r2,-4(fp)
 10040f4:	e0bff517 	ldw	r2,-44(fp)
 10040f8:	10800060 	cmpeqi	r2,r2,1
 10040fc:	1000041e 	bne	r2,zero,1004110 <_Z26network_sender_update_taskPv+0xbc>
 1004100:	00bfffc4 	movi	r2,-1
 1004104:	e0bff315 	stw	r2,-52(fp)
 1004108:	e13fff17 	ldw	r4,-4(fp)
 100410c:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
		} catch (ARCapException &e) {
 1004110:	e13fff17 	ldw	r4,-4(fp)
 1004114:	100d6f80 	call	100d6f8 <__cxa_begin_catch>
 1004118:	e0bff015 	stw	r2,-64(fp)
 100411c:	e03ff315 	stw	zero,-52(fp)
 1004120:	100d6540 	call	100d654 <__cxa_end_catch>
extern NetworkSender *networkOut;

/* Waits for outgoing network commands and forwards them as they arrive. */
void network_sender_update_task(void *pdata) {
	TASK_LOG(printf("NetworkSender [task: update, status: start]\n"));
	while (true) {
 1004124:	003fe806 	br	10040c8 <_Z26network_sender_update_taskPv+0x74>

01004128 <_ZN13NetworkSenderD0Ev>:

/**
 * Listens for events from handlers on the rover and forwards them to the server
 * using a wifi handler.
 */
class NetworkSender: public Listener {
 1004128:	defffd04 	addi	sp,sp,-12
 100412c:	dfc00215 	stw	ra,8(sp)
 1004130:	df000115 	stw	fp,4(sp)
 1004134:	df000104 	addi	fp,sp,4
 1004138:	e13fff15 	stw	r4,-4(fp)
 100413c:	00c040b4 	movhi	r3,258
 1004140:	18d7f604 	addi	r3,r3,24536
 1004144:	e0bfff17 	ldw	r2,-4(fp)
 1004148:	10c00015 	stw	r3,0(r2)
 100414c:	e13fff17 	ldw	r4,-4(fp)
 1004150:	1000a300 	call	1000a30 <_ZN8ListenerD2Ev>
 1004154:	00800044 	movi	r2,1
 1004158:	10803fcc 	andi	r2,r2,255
 100415c:	1005003a 	cmpeq	r2,r2,zero
 1004160:	1000021e 	bne	r2,zero,100416c <_ZN13NetworkSenderD0Ev+0x44>
 1004164:	e13fff17 	ldw	r4,-4(fp)
 1004168:	100d8100 	call	100d810 <_ZdlPv>
 100416c:	e037883a 	mov	sp,fp
 1004170:	dfc00117 	ldw	ra,4(sp)
 1004174:	df000017 	ldw	fp,0(sp)
 1004178:	dec00204 	addi	sp,sp,8
 100417c:	f800283a 	ret

01004180 <_ZN13NetworkSenderD1Ev>:
 1004180:	defffd04 	addi	sp,sp,-12
 1004184:	dfc00215 	stw	ra,8(sp)
 1004188:	df000115 	stw	fp,4(sp)
 100418c:	df000104 	addi	fp,sp,4
 1004190:	e13fff15 	stw	r4,-4(fp)
 1004194:	00c040b4 	movhi	r3,258
 1004198:	18d7f604 	addi	r3,r3,24536
 100419c:	e0bfff17 	ldw	r2,-4(fp)
 10041a0:	10c00015 	stw	r3,0(r2)
 10041a4:	e13fff17 	ldw	r4,-4(fp)
 10041a8:	1000a300 	call	1000a30 <_ZN8ListenerD2Ev>
 10041ac:	0005883a 	mov	r2,zero
 10041b0:	10803fcc 	andi	r2,r2,255
 10041b4:	1005003a 	cmpeq	r2,r2,zero
 10041b8:	1000021e 	bne	r2,zero,10041c4 <_ZN13NetworkSenderD1Ev+0x44>
 10041bc:	e13fff17 	ldw	r4,-4(fp)
 10041c0:	100d8100 	call	100d810 <_ZdlPv>
 10041c4:	e037883a 	mov	sp,fp
 10041c8:	dfc00117 	ldw	ra,4(sp)
 10041cc:	df000017 	ldw	fp,0(sp)
 10041d0:	dec00204 	addi	sp,sp,8
 10041d4:	f800283a 	ret

010041d8 <_Z7inRangei>:
 * Indicates whether a message of the given length can fit in the read buffer.
 * @param messageLength - the length to test against the buffer size
 * @return true if the message length, plus one for the terminating null byte,
 * is less than the size of the buffer.
 */
static bool inRange(int messageLength) {
 10041d8:	defffd04 	addi	sp,sp,-12
 10041dc:	df000215 	stw	fp,8(sp)
 10041e0:	df000204 	addi	fp,sp,8
 10041e4:	e13fff15 	stw	r4,-4(fp)
	bool inRange = messageLength < WIFI_READ_MAX_SIZE - 1;
 10041e8:	e0bfff17 	ldw	r2,-4(fp)
 10041ec:	1080ffd0 	cmplti	r2,r2,1023
 10041f0:	e0bffe05 	stb	r2,-8(fp)
	WIFIHANDLER_READ_LOG(if (!inRange) printf("[WifiRead] error: out of buffer space\n"));
	return inRange;
 10041f4:	e0bffe03 	ldbu	r2,-8(fp)
}
 10041f8:	e037883a 	mov	sp,fp
 10041fc:	df000017 	ldw	fp,0(sp)
 1004200:	dec00104 	addi	sp,sp,4
 1004204:	f800283a 	ret

01004208 <_Z12inRetryRangei>:

/**
 * Indicates whether the given number of retries is under the maximum number of retries.
 * @return true if there is room for more retries
 */
static bool inRetryRange(int retryCount) {
 1004208:	defffd04 	addi	sp,sp,-12
 100420c:	df000215 	stw	fp,8(sp)
 1004210:	df000204 	addi	fp,sp,8
 1004214:	e13fff15 	stw	r4,-4(fp)
	bool inRetryRange = retryCount < WIFI_READ_AVAILABLE_RETRIES;
 1004218:	e0ffff17 	ldw	r3,-4(fp)
 100421c:	00800134 	movhi	r2,4
 1004220:	10bfffc4 	addi	r2,r2,-1
 1004224:	10c4403a 	cmpge	r2,r2,r3
 1004228:	e0bffe05 	stb	r2,-8(fp)
	WIFIHANDLER_READ_LOG(if (!inRetryRange) printf("[WifiRead] error: too many retries\n"));
	return inRetryRange;
 100422c:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004230:	e037883a 	mov	sp,fp
 1004234:	df000017 	ldw	fp,0(sp)
 1004238:	dec00104 	addi	sp,sp,4
 100423c:	f800283a 	ret

01004240 <_ZN11WifiHandler14tcpReceiveTestEv>:

/**
 * Test network communications from the server to the rover.
 * Listens on the socket for new messages and prints them out.
 */
void WifiHandler::tcpReceiveTest() {
 1004240:	defffd04 	addi	sp,sp,-12
 1004244:	dfc00215 	stw	ra,8(sp)
 1004248:	df000115 	stw	fp,4(sp)
 100424c:	df000104 	addi	fp,sp,4
 1004250:	e13fff15 	stw	r4,-4(fp)
	WIFIHANDLER_TCP_LOG(printf("[WifiHandler] receive: %s", tcpReceive()));
	OSTimeDlyHMSM(0, 0, 0, 100);
 1004254:	0009883a 	mov	r4,zero
 1004258:	000b883a 	mov	r5,zero
 100425c:	000d883a 	mov	r6,zero
 1004260:	01c01904 	movi	r7,100
 1004264:	10215880 	call	1021588 <OSTimeDlyHMSM>
}
 1004268:	e037883a 	mov	sp,fp
 100426c:	dfc00117 	ldw	ra,4(sp)
 1004270:	df000017 	ldw	fp,0(sp)
 1004274:	dec00204 	addi	sp,sp,8
 1004278:	f800283a 	ret

0100427c <_ZN11WifiHandler7hasDataEv>:

/**
 * Indicates whether there is data to read.
 * @return true if there is data in the read buffer
 */
bool WifiHandler::hasData() {
 100427c:	defffd04 	addi	sp,sp,-12
 1004280:	dfc00215 	stw	ra,8(sp)
 1004284:	df000115 	stw	fp,4(sp)
 1004288:	df000104 	addi	fp,sp,4
 100428c:	e13fff15 	stw	r4,-4(fp)
	return alt_up_rs232_get_used_space_in_read_FIFO(wifi_dev) > READ_FIFO_EMPTY;
 1004290:	e0bfff17 	ldw	r2,-4(fp)
 1004294:	11000017 	ldw	r4,0(r2)
 1004298:	102354c0 	call	102354c <alt_up_rs232_get_used_space_in_read_FIFO>
 100429c:	1004c03a 	cmpne	r2,r2,zero
}
 10042a0:	e037883a 	mov	sp,fp
 10042a4:	dfc00117 	ldw	ra,4(sp)
 10042a8:	df000017 	ldw	fp,0(sp)
 10042ac:	dec00204 	addi	sp,sp,8
 10042b0:	f800283a 	ret

010042b4 <_Z14stringEndsWithPciS_i>:
 * Indicates whether the string "whole", of length "wholeLength", ends with
 * the substring given by "end", of length "endLength".
 * @return true if the whole string is longer than the end string and the last
 * endLength characters of the whole string are the same as the end string.
 */
static bool stringEndsWith(char *whole, int wholeLength, char *end, int endLength) {
 10042b4:	defff904 	addi	sp,sp,-28
 10042b8:	dfc00615 	stw	ra,24(sp)
 10042bc:	df000515 	stw	fp,20(sp)
 10042c0:	df000504 	addi	fp,sp,20
 10042c4:	e13ffb15 	stw	r4,-20(fp)
 10042c8:	e17ffc15 	stw	r5,-16(fp)
 10042cc:	e1bffd15 	stw	r6,-12(fp)
 10042d0:	e1fffe15 	stw	r7,-8(fp)
	if (wholeLength < endLength) {
 10042d4:	e0fffc17 	ldw	r3,-16(fp)
 10042d8:	e0bffe17 	ldw	r2,-8(fp)
 10042dc:	1880020e 	bge	r3,r2,10042e8 <_Z14stringEndsWithPciS_i+0x34>
		return false;
 10042e0:	e03fff15 	stw	zero,-4(fp)
 10042e4:	00000b06 	br	1004314 <_Z14stringEndsWithPciS_i+0x60>
	} else {
		return strncmp(whole + wholeLength - endLength, end, endLength) == 0;
 10042e8:	e0bffc17 	ldw	r2,-16(fp)
 10042ec:	1007883a 	mov	r3,r2
 10042f0:	e0bffb17 	ldw	r2,-20(fp)
 10042f4:	1887883a 	add	r3,r3,r2
 10042f8:	e0bffe17 	ldw	r2,-8(fp)
 10042fc:	1889c83a 	sub	r4,r3,r2
 1004300:	e1bffe17 	ldw	r6,-8(fp)
 1004304:	e17ffd17 	ldw	r5,-12(fp)
 1004308:	100f6340 	call	100f634 <strncmp>
 100430c:	1005003a 	cmpeq	r2,r2,zero
 1004310:	e0bfff15 	stw	r2,-4(fp)
 1004314:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 1004318:	e037883a 	mov	sp,fp
 100431c:	dfc00117 	ldw	ra,4(sp)
 1004320:	df000017 	ldw	fp,0(sp)
 1004324:	dec00204 	addi	sp,sp,8
 1004328:	f800283a 	ret

0100432c <_ZN11WifiHandler19readIntoBufferUntilEPcS0_>:
/**
 * Listens on the wifi UART until a full message is received.
 * @param message - the buffer in which the message will be placed
 * @param stop - the string marking the end of the message
 */
void WifiHandler::readIntoBufferUntil(char *message, char *stop) {
 100432c:	defff404 	addi	sp,sp,-48
 1004330:	dfc00b15 	stw	ra,44(sp)
 1004334:	df000a15 	stw	fp,40(sp)
 1004338:	df000a04 	addi	fp,sp,40
 100433c:	e13ffc15 	stw	r4,-16(fp)
 1004340:	e17ffd15 	stw	r5,-12(fp)
 1004344:	e1bffe15 	stw	r6,-8(fp)
	alt_u8 data, parity;
	unsigned readAvailable;
	// Get the stop marker length.
	int stopLength = strnlen(stop, WIFI_READ_STOP_MARKER_MAX_SIZE);
 1004348:	e13ffe17 	ldw	r4,-8(fp)
 100434c:	01400804 	movi	r5,32
 1004350:	100f7240 	call	100f724 <strnlen>
 1004354:	e0bff915 	stw	r2,-28(fp)
	WIFIHANDLER_READ_LOG(printf("[WifiRead] stop: %s\n", stop));
	// Start with an empty message.
	int messageLength = 0;
 1004358:	e03ff815 	stw	zero,-32(fp)
	// Count the number of retries when there is no data available.
	int retryCount = 0;
 100435c:	e03ff715 	stw	zero,-36(fp)
	// Read until the message buffer matches the stop string, or we run out of space, or there are to many retries.
	while (inRange(messageLength) && inRetryRange(retryCount) &&
 1004360:	00002306 	br	10043f0 <_ZN11WifiHandler19readIntoBufferUntilEPcS0_+0xc4>
			!stringEndsWith(message, messageLength, stop, stopLength)) {
		// Check for next character.
		readAvailable = alt_up_rs232_get_used_space_in_read_FIFO(wifi_dev);
 1004364:	e0bffc17 	ldw	r2,-16(fp)
 1004368:	11000017 	ldw	r4,0(r2)
 100436c:	102354c0 	call	102354c <alt_up_rs232_get_used_space_in_read_FIFO>
 1004370:	e0bffa15 	stw	r2,-24(fp)
		WIFIHANDLER_READ_LOG(printf("[WifiRead] available: %u\n", readAvailable));
		// Is there data?
		if (readAvailable <= READ_FIFO_EMPTY) {
 1004374:	e0bffa17 	ldw	r2,-24(fp)
 1004378:	1004c03a 	cmpne	r2,r2,zero
 100437c:	1000041e 	bne	r2,zero,1004390 <_ZN11WifiHandler19readIntoBufferUntilEPcS0_+0x64>
			// No data; retry.
			retryCount++;
 1004380:	e0bff717 	ldw	r2,-36(fp)
 1004384:	10800044 	addi	r2,r2,1
 1004388:	e0bff715 	stw	r2,-36(fp)
 100438c:	00001806 	br	10043f0 <_ZN11WifiHandler19readIntoBufferUntilEPcS0_+0xc4>
		} else {
			// Reset the retry count.
			retryCount = 0;
 1004390:	e03ff715 	stw	zero,-36(fp)
			// Get the new data.
			while (readAvailable > READ_FIFO_EMPTY) {
 1004394:	00001306 	br	10043e4 <_ZN11WifiHandler19readIntoBufferUntilEPcS0_+0xb8>
				// Read next character.
				int status = alt_up_rs232_read_data(wifi_dev, &data, &parity);
 1004398:	e0bffc17 	ldw	r2,-16(fp)
 100439c:	11000017 	ldw	r4,0(r2)
 10043a0:	e17ffb04 	addi	r5,fp,-20
 10043a4:	e1bffb44 	addi	r6,fp,-19
 10043a8:	10236600 	call	1023660 <alt_up_rs232_read_data>
 10043ac:	e0bff615 	stw	r2,-40(fp)
				// Log errors.
				if (status != OK) WIFIHANDLER_READ_LOG(printf("[WifiRead] error: cannot read\n"));
				// Add character to the message buffer.
				WIFIHANDLER_READ_LOG(printf("[WifiRead] data: %c\n", data));
				message[messageLength] = (char)data;
 10043b0:	e0bff817 	ldw	r2,-32(fp)
 10043b4:	1007883a 	mov	r3,r2
 10043b8:	e0bffd17 	ldw	r2,-12(fp)
 10043bc:	1887883a 	add	r3,r3,r2
 10043c0:	e0bffb03 	ldbu	r2,-20(fp)
 10043c4:	18800005 	stb	r2,0(r3)
				messageLength++;
 10043c8:	e0bff817 	ldw	r2,-32(fp)
 10043cc:	10800044 	addi	r2,r2,1
 10043d0:	e0bff815 	stw	r2,-32(fp)
				// Check for next character.
				readAvailable = alt_up_rs232_get_used_space_in_read_FIFO(wifi_dev);
 10043d4:	e0bffc17 	ldw	r2,-16(fp)
 10043d8:	11000017 	ldw	r4,0(r2)
 10043dc:	102354c0 	call	102354c <alt_up_rs232_get_used_space_in_read_FIFO>
 10043e0:	e0bffa15 	stw	r2,-24(fp)
			retryCount++;
		} else {
			// Reset the retry count.
			retryCount = 0;
			// Get the new data.
			while (readAvailable > READ_FIFO_EMPTY) {
 10043e4:	e0bffa17 	ldw	r2,-24(fp)
 10043e8:	1004c03a 	cmpne	r2,r2,zero
 10043ec:	103fea1e 	bne	r2,zero,1004398 <_ZN11WifiHandler19readIntoBufferUntilEPcS0_+0x6c>
	// Start with an empty message.
	int messageLength = 0;
	// Count the number of retries when there is no data available.
	int retryCount = 0;
	// Read until the message buffer matches the stop string, or we run out of space, or there are to many retries.
	while (inRange(messageLength) && inRetryRange(retryCount) &&
 10043f0:	e13ff817 	ldw	r4,-32(fp)
 10043f4:	10041d80 	call	10041d8 <_Z7inRangei>
 10043f8:	1080005c 	xori	r2,r2,1
 10043fc:	10803fcc 	andi	r2,r2,255
 1004400:	1004c03a 	cmpne	r2,r2,zero
 1004404:	1000131e 	bne	r2,zero,1004454 <_ZN11WifiHandler19readIntoBufferUntilEPcS0_+0x128>
 1004408:	e13ff717 	ldw	r4,-36(fp)
 100440c:	10042080 	call	1004208 <_Z12inRetryRangei>
 1004410:	1080005c 	xori	r2,r2,1
 1004414:	10803fcc 	andi	r2,r2,255
 1004418:	1004c03a 	cmpne	r2,r2,zero
 100441c:	10000d1e 	bne	r2,zero,1004454 <_ZN11WifiHandler19readIntoBufferUntilEPcS0_+0x128>
 1004420:	e13ffd17 	ldw	r4,-12(fp)
 1004424:	e17ff817 	ldw	r5,-32(fp)
 1004428:	e1bffe17 	ldw	r6,-8(fp)
 100442c:	e1fff917 	ldw	r7,-28(fp)
 1004430:	10042b40 	call	10042b4 <_Z14stringEndsWithPciS_i>
 1004434:	1080005c 	xori	r2,r2,1
 1004438:	1080005c 	xori	r2,r2,1
 100443c:	10803fcc 	andi	r2,r2,255
 1004440:	1004c03a 	cmpne	r2,r2,zero
 1004444:	1000031e 	bne	r2,zero,1004454 <_ZN11WifiHandler19readIntoBufferUntilEPcS0_+0x128>
 1004448:	00800044 	movi	r2,1
 100444c:	e0bfff05 	stb	r2,-4(fp)
 1004450:	00000106 	br	1004458 <_ZN11WifiHandler19readIntoBufferUntilEPcS0_+0x12c>
 1004454:	e03fff05 	stb	zero,-4(fp)
 1004458:	e0bfff03 	ldbu	r2,-4(fp)
 100445c:	10803fcc 	andi	r2,r2,255
 1004460:	1004c03a 	cmpne	r2,r2,zero
 1004464:	103fbf1e 	bne	r2,zero,1004364 <_ZN11WifiHandler19readIntoBufferUntilEPcS0_+0x38>
				readAvailable = alt_up_rs232_get_used_space_in_read_FIFO(wifi_dev);
			} WIFIHANDLER_READ_LOG(printf("[WifiRead] length: %d\n", messageLength));
		}
	}
	// Add the null character.
	message[messageLength] = '\0';
 1004468:	e0bff817 	ldw	r2,-32(fp)
 100446c:	1007883a 	mov	r3,r2
 1004470:	e0bffd17 	ldw	r2,-12(fp)
 1004474:	1885883a 	add	r2,r3,r2
 1004478:	10000005 	stb	zero,0(r2)
}
 100447c:	e037883a 	mov	sp,fp
 1004480:	dfc00117 	ldw	ra,4(sp)
 1004484:	df000017 	ldw	fp,0(sp)
 1004488:	dec00204 	addi	sp,sp,8
 100448c:	f800283a 	ret

01004490 <_ZN11WifiHandler9readUntilEPc>:
/**
 * Listens on the wifi UART until a full message is received.
 * @param stop - the string marking the end of the message
 * @return the message that was received, which must be freed by the caller
 */
char *WifiHandler::readUntil(char *stop) {
 1004490:	defffb04 	addi	sp,sp,-20
 1004494:	dfc00415 	stw	ra,16(sp)
 1004498:	df000315 	stw	fp,12(sp)
 100449c:	df000304 	addi	fp,sp,12
 10044a0:	e13ffe15 	stw	r4,-8(fp)
 10044a4:	e17fff15 	stw	r5,-4(fp)
	char *message = (char *)malloc(WIFI_READ_MAX_SIZE);
 10044a8:	01010004 	movi	r4,1024
 10044ac:	100e4a00 	call	100e4a0 <malloc>
 10044b0:	e0bffd15 	stw	r2,-12(fp)
	readIntoBufferUntil(message, stop);
 10044b4:	e13ffe17 	ldw	r4,-8(fp)
 10044b8:	e17ffd17 	ldw	r5,-12(fp)
 10044bc:	e1bfff17 	ldw	r6,-4(fp)
 10044c0:	100432c0 	call	100432c <_ZN11WifiHandler19readIntoBufferUntilEPcS0_>
	return message;
 10044c4:	e0bffd17 	ldw	r2,-12(fp)
}
 10044c8:	e037883a 	mov	sp,fp
 10044cc:	dfc00117 	ldw	ra,4(sp)
 10044d0:	df000017 	ldw	fp,0(sp)
 10044d4:	dec00204 	addi	sp,sp,8
 10044d8:	f800283a 	ret

010044dc <_ZN11WifiHandler15configReadStartEv>:

/**
 * Reads the latest configuration response from the Xbee wifi module.
 * @return the message object containing the response
 */
char *WifiHandler::configReadStart() {
 10044dc:	defffc04 	addi	sp,sp,-16
 10044e0:	dfc00315 	stw	ra,12(sp)
 10044e4:	df000215 	stw	fp,8(sp)
 10044e8:	df000204 	addi	fp,sp,8
 10044ec:	e13fff15 	stw	r4,-4(fp)
	char *response = readUntil("\r");
 10044f0:	e13fff17 	ldw	r4,-4(fp)
 10044f4:	014040b4 	movhi	r5,258
 10044f8:	29581004 	addi	r5,r5,24640
 10044fc:	10044900 	call	1004490 <_ZN11WifiHandler9readUntilEPc>
 1004500:	e0bffe15 	stw	r2,-8(fp)
	WIFIHANDLER_CONFIG_LOG(printf("%s\n", response));
	return response;
 1004504:	e0bffe17 	ldw	r2,-8(fp)
}
 1004508:	e037883a 	mov	sp,fp
 100450c:	dfc00117 	ldw	ra,4(sp)
 1004510:	df000017 	ldw	fp,0(sp)
 1004514:	dec00204 	addi	sp,sp,8
 1004518:	f800283a 	ret

0100451c <_ZN11WifiHandler10configReadEv>:

/**
 * Reads the latest configuration response from the Xbee wifi module.
 */
void WifiHandler::configRead() {
 100451c:	defffc04 	addi	sp,sp,-16
 1004520:	dfc00315 	stw	ra,12(sp)
 1004524:	df000215 	stw	fp,8(sp)
 1004528:	df000204 	addi	fp,sp,8
 100452c:	e13fff15 	stw	r4,-4(fp)
	char *response = configReadStart();
 1004530:	e13fff17 	ldw	r4,-4(fp)
 1004534:	10044dc0 	call	10044dc <_ZN11WifiHandler15configReadStartEv>
 1004538:	e0bffe15 	stw	r2,-8(fp)
	free(response);
 100453c:	e13ffe17 	ldw	r4,-8(fp)
 1004540:	100e48c0 	call	100e48c <free>
}
 1004544:	e037883a 	mov	sp,fp
 1004548:	dfc00117 	ldw	ra,4(sp)
 100454c:	df000017 	ldw	fp,0(sp)
 1004550:	dec00204 	addi	sp,sp,8
 1004554:	f800283a 	ret

01004558 <_ZN11WifiHandler5writeEPc>:
 * The message will be used to configure the Xbee wifi module, if the device is in configuration mode,
 * or it will be forwarded through TCP to the remote server given by DL (the destination IP address)
 * and DE (the destination IP port).
 * @param message - the message to write
 */
void WifiHandler::write(char *message) {
 1004558:	defff804 	addi	sp,sp,-32
 100455c:	dfc00715 	stw	ra,28(sp)
 1004560:	df000615 	stw	fp,24(sp)
 1004564:	df000604 	addi	fp,sp,24
 1004568:	e13ffe15 	stw	r4,-8(fp)
 100456c:	e17fff15 	stw	r5,-4(fp)
	int i = 0;
 1004570:	e03ffd15 	stw	zero,-12(fp)
	alt_up_rs232_disable_read_interrupt(wifi_dev);
 1004574:	e0bffe17 	ldw	r2,-8(fp)
 1004578:	11000017 	ldw	r4,0(r2)
 100457c:	10234f40 	call	10234f4 <alt_up_rs232_disable_read_interrupt>
	char data = message[i];
 1004580:	e0bffd17 	ldw	r2,-12(fp)
 1004584:	1007883a 	mov	r3,r2
 1004588:	e0bfff17 	ldw	r2,-4(fp)
 100458c:	1885883a 	add	r2,r3,r2
 1004590:	10800003 	ldbu	r2,0(r2)
 1004594:	e0bffc05 	stb	r2,-16(fp)
	while (data != '\0') {
 1004598:	00001606 	br	10045f4 <_ZN11WifiHandler5writeEPc+0x9c>
		// Check for write space.
		unsigned writeAvailable = alt_up_rs232_get_available_space_in_write_FIFO(wifi_dev);
 100459c:	e0bffe17 	ldw	r2,-8(fp)
 10045a0:	11000017 	ldw	r4,0(r2)
 10045a4:	10235880 	call	1023588 <alt_up_rs232_get_available_space_in_write_FIFO>
 10045a8:	e0bffb15 	stw	r2,-20(fp)
		WIFIHANDLER_WRITE_LOG(printf("[WifiWrite] available: %u\n", writeAvailable));
		if (writeAvailable > WRITE_FIFO_EMPTY) {
 10045ac:	e0bffb17 	ldw	r2,-20(fp)
 10045b0:	10800870 	cmpltui	r2,r2,33
 10045b4:	10000f1e 	bne	r2,zero,10045f4 <_ZN11WifiHandler5writeEPc+0x9c>
			// If space, write the character.
			WIFIHANDLER_WRITE_LOG(printf("[WifiWrite] data: %c\n", data));
			int status = alt_up_rs232_write_data(wifi_dev, data);
 10045b8:	e0bffe17 	ldw	r2,-8(fp)
 10045bc:	11000017 	ldw	r4,0(r2)
 10045c0:	e0bffc03 	ldbu	r2,-16(fp)
 10045c4:	11403fcc 	andi	r5,r2,255
 10045c8:	10236180 	call	1023618 <alt_up_rs232_write_data>
 10045cc:	e0bffa15 	stw	r2,-24(fp)
			// Log errors.
			if (status != OK) WIFIHANDLER_WRITE_LOG(printf("[WifiWrite] error: cannot write\n"));
			// Go to next character.
			data = message[++i];
 10045d0:	e0bffd17 	ldw	r2,-12(fp)
 10045d4:	10800044 	addi	r2,r2,1
 10045d8:	e0bffd15 	stw	r2,-12(fp)
 10045dc:	e0bffd17 	ldw	r2,-12(fp)
 10045e0:	1007883a 	mov	r3,r2
 10045e4:	e0bfff17 	ldw	r2,-4(fp)
 10045e8:	1885883a 	add	r2,r3,r2
 10045ec:	10800003 	ldbu	r2,0(r2)
 10045f0:	e0bffc05 	stb	r2,-16(fp)
 */
void WifiHandler::write(char *message) {
	int i = 0;
	alt_up_rs232_disable_read_interrupt(wifi_dev);
	char data = message[i];
	while (data != '\0') {
 10045f4:	e0bffc07 	ldb	r2,-16(fp)
 10045f8:	1004c03a 	cmpne	r2,r2,zero
 10045fc:	103fe71e 	bne	r2,zero,100459c <_ZN11WifiHandler5writeEPc+0x44>
			// If no space, wait.
			WIFIHANDLER_WRITE_LOG(printf("[WifiWrite] waiting for space\n"));
			//			OSTimeDlyHMSM(0, 0, 0, 100);
		}
	}
	alt_up_rs232_enable_read_interrupt(wifi_dev);
 1004600:	e0bffe17 	ldw	r2,-8(fp)
 1004604:	11000017 	ldw	r4,0(r2)
 1004608:	10234a00 	call	10234a0 <alt_up_rs232_enable_read_interrupt>
}
 100460c:	e037883a 	mov	sp,fp
 1004610:	dfc00117 	ldw	ra,4(sp)
 1004614:	df000017 	ldw	fp,0(sp)
 1004618:	dec00204 	addi	sp,sp,8
 100461c:	f800283a 	ret

01004620 <_ZN11WifiHandler11configEnterEv>:
}

/**
 * Sends the sequence to enter configuration mode on the Xbee wifi module.
 */
void WifiHandler::configEnter() {
 1004620:	defffd04 	addi	sp,sp,-12
 1004624:	dfc00215 	stw	ra,8(sp)
 1004628:	df000115 	stw	fp,4(sp)
 100462c:	df000104 	addi	fp,sp,4
 1004630:	e13fff15 	stw	r4,-4(fp)
	OSTimeDlyHMSM(0, 0, 1, 0);
 1004634:	0009883a 	mov	r4,zero
 1004638:	000b883a 	mov	r5,zero
 100463c:	01800044 	movi	r6,1
 1004640:	000f883a 	mov	r7,zero
 1004644:	10215880 	call	1021588 <OSTimeDlyHMSM>
	write("+++");
 1004648:	e13fff17 	ldw	r4,-4(fp)
 100464c:	014040b4 	movhi	r5,258
 1004650:	29581104 	addi	r5,r5,24644
 1004654:	10045580 	call	1004558 <_ZN11WifiHandler5writeEPc>
	WIFIHANDLER_CONFIG_LOG(printf("+++ > "));
	OSTimeDlyHMSM(0, 0, 2, 0);
 1004658:	0009883a 	mov	r4,zero
 100465c:	000b883a 	mov	r5,zero
 1004660:	01800084 	movi	r6,2
 1004664:	000f883a 	mov	r7,zero
 1004668:	10215880 	call	1021588 <OSTimeDlyHMSM>
	configRead();
 100466c:	e13fff17 	ldw	r4,-4(fp)
 1004670:	100451c0 	call	100451c <_ZN11WifiHandler10configReadEv>
}
 1004674:	e037883a 	mov	sp,fp
 1004678:	dfc00117 	ldw	ra,4(sp)
 100467c:	df000017 	ldw	fp,0(sp)
 1004680:	dec00204 	addi	sp,sp,8
 1004684:	f800283a 	ret

01004688 <_ZN11WifiHandler15configSendStartEPc>:

/**
 * Sends a configuration command to the Xbee wifi module.
 * @param command - the command to send
 */
void WifiHandler::configSendStart(char *command) {
 1004688:	defffc04 	addi	sp,sp,-16
 100468c:	dfc00315 	stw	ra,12(sp)
 1004690:	df000215 	stw	fp,8(sp)
 1004694:	df000204 	addi	fp,sp,8
 1004698:	e13ffe15 	stw	r4,-8(fp)
 100469c:	e17fff15 	stw	r5,-4(fp)
	write(command);
 10046a0:	e13ffe17 	ldw	r4,-8(fp)
 10046a4:	e17fff17 	ldw	r5,-4(fp)
 10046a8:	10045580 	call	1004558 <_ZN11WifiHandler5writeEPc>
	write("\r");
 10046ac:	e13ffe17 	ldw	r4,-8(fp)
 10046b0:	014040b4 	movhi	r5,258
 10046b4:	29581004 	addi	r5,r5,24640
 10046b8:	10045580 	call	1004558 <_ZN11WifiHandler5writeEPc>
	WIFIHANDLER_CONFIG_LOG(printf("%s > ", command));
}
 10046bc:	e037883a 	mov	sp,fp
 10046c0:	dfc00117 	ldw	ra,4(sp)
 10046c4:	df000017 	ldw	fp,0(sp)
 10046c8:	dec00204 	addi	sp,sp,8
 10046cc:	f800283a 	ret

010046d0 <_ZN11WifiHandler5readyEv>:

/**
 * Indicates whether the wifi module has connected to the network.
 * @return true if the wifi module is connected
 */
bool WifiHandler::ready() {
 10046d0:	defffb04 	addi	sp,sp,-20
 10046d4:	dfc00415 	stw	ra,16(sp)
 10046d8:	df000315 	stw	fp,12(sp)
 10046dc:	df000304 	addi	fp,sp,12
 10046e0:	e13fff15 	stw	r4,-4(fp)
	configSendStart("ATAI");
 10046e4:	e13fff17 	ldw	r4,-4(fp)
 10046e8:	014040b4 	movhi	r5,258
 10046ec:	29581204 	addi	r5,r5,24648
 10046f0:	10046880 	call	1004688 <_ZN11WifiHandler15configSendStartEPc>
	char *response = configReadStart();
 10046f4:	e13fff17 	ldw	r4,-4(fp)
 10046f8:	10044dc0 	call	10044dc <_ZN11WifiHandler15configReadStartEv>
 10046fc:	e0bffe15 	stw	r2,-8(fp)
	long code = strtol(response, NULL, 16);
 1004700:	e13ffe17 	ldw	r4,-8(fp)
 1004704:	000b883a 	mov	r5,zero
 1004708:	01800404 	movi	r6,16
 100470c:	100f9ac0 	call	100f9ac <strtol>
 1004710:	e0bffd15 	stw	r2,-12(fp)
	free(response);
 1004714:	e13ffe17 	ldw	r4,-8(fp)
 1004718:	100e48c0 	call	100e48c <free>
	return code == 0;
 100471c:	e0bffd17 	ldw	r2,-12(fp)
 1004720:	1005003a 	cmpeq	r2,r2,zero
}
 1004724:	e037883a 	mov	sp,fp
 1004728:	dfc00117 	ldw	ra,4(sp)
 100472c:	df000017 	ldw	fp,0(sp)
 1004730:	dec00204 	addi	sp,sp,8
 1004734:	f800283a 	ret

01004738 <_ZN11WifiHandler12waitForReadyEv>:

/**
 * Blocks until the wifi module has connected to the network.
 */
void WifiHandler::waitForReady() {
 1004738:	defffd04 	addi	sp,sp,-12
 100473c:	dfc00215 	stw	ra,8(sp)
 1004740:	df000115 	stw	fp,4(sp)
 1004744:	df000104 	addi	fp,sp,4
 1004748:	e13fff15 	stw	r4,-4(fp)
	while (!ready()) {
 100474c:	00000506 	br	1004764 <_ZN11WifiHandler12waitForReadyEv+0x2c>
		OSTimeDlyHMSM(0, 0, 0, 100);
 1004750:	0009883a 	mov	r4,zero
 1004754:	000b883a 	mov	r5,zero
 1004758:	000d883a 	mov	r6,zero
 100475c:	01c01904 	movi	r7,100
 1004760:	10215880 	call	1021588 <OSTimeDlyHMSM>

/**
 * Blocks until the wifi module has connected to the network.
 */
void WifiHandler::waitForReady() {
	while (!ready()) {
 1004764:	e13fff17 	ldw	r4,-4(fp)
 1004768:	10046d00 	call	10046d0 <_ZN11WifiHandler5readyEv>
 100476c:	1080005c 	xori	r2,r2,1
 1004770:	10803fcc 	andi	r2,r2,255
 1004774:	1004c03a 	cmpne	r2,r2,zero
 1004778:	103ff51e 	bne	r2,zero,1004750 <_ZN11WifiHandler12waitForReadyEv+0x18>
		OSTimeDlyHMSM(0, 0, 0, 100);
	};
}
 100477c:	e037883a 	mov	sp,fp
 1004780:	dfc00117 	ldw	ra,4(sp)
 1004784:	df000017 	ldw	fp,0(sp)
 1004788:	dec00204 	addi	sp,sp,8
 100478c:	f800283a 	ret

01004790 <_ZN11WifiHandler10configSendEPc>:
/**
 * Sends a configuration command to the Xbee wifi module,
 * then waits for and prints the response.
 * @param command - the command to send
 */
void WifiHandler::configSend(char *command) {
 1004790:	defffc04 	addi	sp,sp,-16
 1004794:	dfc00315 	stw	ra,12(sp)
 1004798:	df000215 	stw	fp,8(sp)
 100479c:	df000204 	addi	fp,sp,8
 10047a0:	e13ffe15 	stw	r4,-8(fp)
 10047a4:	e17fff15 	stw	r5,-4(fp)
	configSendStart(command);
 10047a8:	e13ffe17 	ldw	r4,-8(fp)
 10047ac:	e17fff17 	ldw	r5,-4(fp)
 10047b0:	10046880 	call	1004688 <_ZN11WifiHandler15configSendStartEPc>
	configRead();
 10047b4:	e13ffe17 	ldw	r4,-8(fp)
 10047b8:	100451c0 	call	100451c <_ZN11WifiHandler10configReadEv>
}
 10047bc:	e037883a 	mov	sp,fp
 10047c0:	dfc00117 	ldw	ra,4(sp)
 10047c4:	df000017 	ldw	fp,0(sp)
 10047c8:	dec00204 	addi	sp,sp,8
 10047cc:	f800283a 	ret

010047d0 <_ZN11WifiHandler18setDestinationPortE13WifiSetupType>:
 * Sets the destination port based on the setup type.
 * @param type
 * WIFI_TCP - targets the socket at port 10000
 * WIFI_HTTP - targets the server at port 80
 */
void WifiHandler::setDestinationPort(WifiSetupType type) {
 10047d0:	defffb04 	addi	sp,sp,-20
 10047d4:	dfc00415 	stw	ra,16(sp)
 10047d8:	df000315 	stw	fp,12(sp)
 10047dc:	df000304 	addi	fp,sp,12
 10047e0:	e13ffd15 	stw	r4,-12(fp)
 10047e4:	e17ffe15 	stw	r5,-8(fp)
	switch (type) {
 10047e8:	e0bffe17 	ldw	r2,-8(fp)
 10047ec:	e0bfff15 	stw	r2,-4(fp)
 10047f0:	e0ffff17 	ldw	r3,-4(fp)
 10047f4:	1805003a 	cmpeq	r2,r3,zero
 10047f8:	1000041e 	bne	r2,zero,100480c <_ZN11WifiHandler18setDestinationPortE13WifiSetupType+0x3c>
 10047fc:	e0ffff17 	ldw	r3,-4(fp)
 1004800:	18800060 	cmpeqi	r2,r3,1
 1004804:	1000061e 	bne	r2,zero,1004820 <_ZN11WifiHandler18setDestinationPortE13WifiSetupType+0x50>
 1004808:	00000906 	br	1004830 <_ZN11WifiHandler18setDestinationPortE13WifiSetupType+0x60>
	case WIFI_TCP: configSend("ATDE2710"); break;	// port 10000 (0x2710)
 100480c:	e13ffd17 	ldw	r4,-12(fp)
 1004810:	014040b4 	movhi	r5,258
 1004814:	29581404 	addi	r5,r5,24656
 1004818:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
 100481c:	00000406 	br	1004830 <_ZN11WifiHandler18setDestinationPortE13WifiSetupType+0x60>
	case WIFI_HTTP: configSend("ATDE50"); break; 	// port 80 (0x50)
 1004820:	e13ffd17 	ldw	r4,-12(fp)
 1004824:	014040b4 	movhi	r5,258
 1004828:	29581704 	addi	r5,r5,24668
 100482c:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	}
}
 1004830:	e037883a 	mov	sp,fp
 1004834:	dfc00117 	ldw	ra,4(sp)
 1004838:	df000017 	ldw	fp,0(sp)
 100483c:	dec00204 	addi	sp,sp,8
 1004840:	f800283a 	ret

01004844 <_ZN11WifiHandler5setupE13WifiSetupType>:
 * The caller must call lock() before calling this method.
 * @param type
 * WIFI_TCP - used to send TCP messages to PHP socket at 192.168.0.100:10000; preferred for full duplex communication
 * WIFI_HTTP - used to send HTTP requests to HTTP server at 192.168.0.100:80; used in earlier testing
 */
void WifiHandler::setup(WifiSetupType type) {
 1004844:	defffc04 	addi	sp,sp,-16
 1004848:	dfc00315 	stw	ra,12(sp)
 100484c:	df000215 	stw	fp,8(sp)
 1004850:	df000204 	addi	fp,sp,8
 1004854:	e13ffe15 	stw	r4,-8(fp)
 1004858:	e17fff15 	stw	r5,-4(fp)
	WIFIHANDLER_CONFIG_LOG(printf("WifiHandler [startup: do setup]\n"));
	configEnter();
 100485c:	e13ffe17 	ldw	r4,-8(fp)
 1004860:	10046200 	call	1004620 <_ZN11WifiHandler11configEnterEv>
	configSend("ATVR");             	// Print firmware version.
 1004864:	e13ffe17 	ldw	r4,-8(fp)
 1004868:	014040b4 	movhi	r5,258
 100486c:	29581904 	addi	r5,r5,24676
 1004870:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATIDARCap");        	// Set the target SSID to ARCAP.
 1004874:	e13ffe17 	ldw	r4,-8(fp)
 1004878:	014040b4 	movhi	r5,258
 100487c:	29581b04 	addi	r5,r5,24684
 1004880:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATEE2");            	// Set the security type to WPA2.
 1004884:	e13ffe17 	ldw	r4,-8(fp)
 1004888:	014040b4 	movhi	r5,258
 100488c:	29581e04 	addi	r5,r5,24696
 1004890:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATPKplaythegame");  	// Set the security key.
 1004894:	e13ffe17 	ldw	r4,-8(fp)
 1004898:	014040b4 	movhi	r5,258
 100489c:	29582004 	addi	r5,r5,24704
 10048a0:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATAH2");            	// Set the network type to Infrastructure.
 10048a4:	e13ffe17 	ldw	r4,-8(fp)
 10048a8:	014040b4 	movhi	r5,258
 10048ac:	29582404 	addi	r5,r5,24720
 10048b0:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATIP1");            	// Set the IP protocol to TCP.
 10048b4:	e13ffe17 	ldw	r4,-8(fp)
 10048b8:	014040b4 	movhi	r5,258
 10048bc:	29582604 	addi	r5,r5,24728
 10048c0:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATTMff");				// Set the TCP timeout to 25,500 ms (0xff * 100 ms).
 10048c4:	e13ffe17 	ldw	r4,-8(fp)
 10048c8:	014040b4 	movhi	r5,258
 10048cc:	29582804 	addi	r5,r5,24736
 10048d0:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATMA0");            	// Set the IP addressing mode to DHCP.
 10048d4:	e13ffe17 	ldw	r4,-8(fp)
 10048d8:	014040b4 	movhi	r5,258
 10048dc:	29582a04 	addi	r5,r5,24744
 10048e0:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATDL192.168.0.100");	// Set the destination IP address to ...100 (reserved for server).
 10048e4:	e13ffe17 	ldw	r4,-8(fp)
 10048e8:	014040b4 	movhi	r5,258
 10048ec:	29582c04 	addi	r5,r5,24752
 10048f0:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	setDestinationPort(type);			// Sets the destination port based on the setup type.
 10048f4:	e13ffe17 	ldw	r4,-8(fp)
 10048f8:	e17fff17 	ldw	r5,-4(fp)
 10048fc:	10047d00 	call	10047d0 <_ZN11WifiHandler18setDestinationPortE13WifiSetupType>
	waitForReady();
 1004900:	e13ffe17 	ldw	r4,-8(fp)
 1004904:	10047380 	call	1004738 <_ZN11WifiHandler12waitForReadyEv>
	configSend("ATMY");             	// Print the IP address.
 1004908:	e13ffe17 	ldw	r4,-8(fp)
 100490c:	014040b4 	movhi	r5,258
 1004910:	29583104 	addi	r5,r5,24772
 1004914:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATWR");             	// Write the settings to non-volatile memory.
 1004918:	e13ffe17 	ldw	r4,-8(fp)
 100491c:	014040b4 	movhi	r5,258
 1004920:	29583304 	addi	r5,r5,24780
 1004924:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATCN");             	// Exit command mode.
 1004928:	e13ffe17 	ldw	r4,-8(fp)
 100492c:	014040b4 	movhi	r5,258
 1004930:	29583504 	addi	r5,r5,24788
 1004934:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
}
 1004938:	e037883a 	mov	sp,fp
 100493c:	dfc00117 	ldw	ra,4(sp)
 1004940:	df000017 	ldw	fp,0(sp)
 1004944:	dec00204 	addi	sp,sp,8
 1004948:	f800283a 	ret

0100494c <_ZN11WifiHandler6statusEv>:

/**
 * Prints the current status of the wifi module.
 * The caller must call lock() before calling this method.
 */
void WifiHandler::status() {
 100494c:	defffd04 	addi	sp,sp,-12
 1004950:	dfc00215 	stw	ra,8(sp)
 1004954:	df000115 	stw	fp,4(sp)
 1004958:	df000104 	addi	fp,sp,4
 100495c:	e13fff15 	stw	r4,-4(fp)
	WIFIHANDLER_CONFIG_LOG(printf("WifiHandler [startup: show status]\n"));
	configEnter();       	// Enter command mode.
 1004960:	e13fff17 	ldw	r4,-4(fp)
 1004964:	10046200 	call	1004620 <_ZN11WifiHandler11configEnterEv>
	configSend("ATVR");  	// Print firmware version.
 1004968:	e13fff17 	ldw	r4,-4(fp)
 100496c:	014040b4 	movhi	r5,258
 1004970:	29581904 	addi	r5,r5,24676
 1004974:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATID");  	// Print the target SSID.
 1004978:	e13fff17 	ldw	r4,-4(fp)
 100497c:	014040b4 	movhi	r5,258
 1004980:	29583704 	addi	r5,r5,24796
 1004984:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATEE");  	// Print the security type (0 = None, 1 = WPA, 2 = WPA2, 3 = WEP).
 1004988:	e13fff17 	ldw	r4,-4(fp)
 100498c:	014040b4 	movhi	r5,258
 1004990:	29583904 	addi	r5,r5,24804
 1004994:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATAH");  	// Print the network type (0 = Joiner, 1 = Creator, 2 = Infrastructure).
 1004998:	e13fff17 	ldw	r4,-4(fp)
 100499c:	014040b4 	movhi	r5,258
 10049a0:	29583b04 	addi	r5,r5,24812
 10049a4:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATIP");  	// Print the IP protocol (0 = UDP, 1 = TCP).
 10049a8:	e13fff17 	ldw	r4,-4(fp)
 10049ac:	014040b4 	movhi	r5,258
 10049b0:	29583d04 	addi	r5,r5,24820
 10049b4:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATTM");		// Read the TCP timeout (hex, multiply by 100 ms).
 10049b8:	e13fff17 	ldw	r4,-4(fp)
 10049bc:	014040b4 	movhi	r5,258
 10049c0:	29583f04 	addi	r5,r5,24828
 10049c4:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATMA");  	// Print the IP addressing mode (0 = DHCP, 1 = Static).
 10049c8:	e13fff17 	ldw	r4,-4(fp)
 10049cc:	014040b4 	movhi	r5,258
 10049d0:	29584104 	addi	r5,r5,24836
 10049d4:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATDL");  	// Print the destination IP address. (hex)
 10049d8:	e13fff17 	ldw	r4,-4(fp)
 10049dc:	014040b4 	movhi	r5,258
 10049e0:	29584304 	addi	r5,r5,24844
 10049e4:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATDE");  	// Print the destination port number. (hex)
 10049e8:	e13fff17 	ldw	r4,-4(fp)
 10049ec:	014040b4 	movhi	r5,258
 10049f0:	29584504 	addi	r5,r5,24852
 10049f4:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	waitForReady();
 10049f8:	e13fff17 	ldw	r4,-4(fp)
 10049fc:	10047380 	call	1004738 <_ZN11WifiHandler12waitForReadyEv>
	configSend("ATMY");  	// Print the IP address.
 1004a00:	e13fff17 	ldw	r4,-4(fp)
 1004a04:	014040b4 	movhi	r5,258
 1004a08:	29583104 	addi	r5,r5,24772
 1004a0c:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
	configSend("ATCN");  	// Exit command mode.
 1004a10:	e13fff17 	ldw	r4,-4(fp)
 1004a14:	014040b4 	movhi	r5,258
 1004a18:	29583504 	addi	r5,r5,24788
 1004a1c:	10047900 	call	1004790 <_ZN11WifiHandler10configSendEPc>
}
 1004a20:	e037883a 	mov	sp,fp
 1004a24:	dfc00117 	ldw	ra,4(sp)
 1004a28:	df000017 	ldw	fp,0(sp)
 1004a2c:	dec00204 	addi	sp,sp,8
 1004a30:	f800283a 	ret

01004a34 <_ZN11WifiHandler10tcpConnectEv>:
 * This method sends the rover identification command r(id), where (id) is ROVER_ID,
 * and waits until it receives MESSAGE_OK.
 * The caller must call lock() before calling this method.
 * @return true if connection was accepted
 */
bool WifiHandler::tcpConnect() {
 1004a34:	defffb04 	addi	sp,sp,-20
 1004a38:	dfc00415 	stw	ra,16(sp)
 1004a3c:	df000315 	stw	fp,12(sp)
 1004a40:	df000304 	addi	fp,sp,12
 1004a44:	e13fff15 	stw	r4,-4(fp)
	char *response = (char *)malloc(WIFI_READ_MAX_SIZE);
 1004a48:	01010004 	movi	r4,1024
 1004a4c:	100e4a00 	call	100e4a0 <malloc>
 1004a50:	e0bffe15 	stw	r2,-8(fp)
	bool retryCount = 0;
 1004a54:	e03ffd05 	stb	zero,-12(fp)
	// Loop until we receive MESSAGE_OK.
	do {
		// If retrying, wait.
		if (retryCount > 0) {
 1004a58:	e0bffd03 	ldbu	r2,-12(fp)
 1004a5c:	10800050 	cmplti	r2,r2,1
 1004a60:	1000081e 	bne	r2,zero,1004a84 <_ZN11WifiHandler10tcpConnectEv+0x50>
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, WIFI_LED_WAITING);
 1004a64:	00808074 	movhi	r2,513
 1004a68:	10a82004 	addi	r2,r2,-24448
 1004a6c:	10000035 	stwio	zero,0(r2)
			OSTimeDlyHMSM(0, 0, WIFI_CONNECT_RETRY_TIME_SECONDS, 0);
 1004a70:	0009883a 	mov	r4,zero
 1004a74:	000b883a 	mov	r5,zero
 1004a78:	01800044 	movi	r6,1
 1004a7c:	000f883a 	mov	r7,zero
 1004a80:	10215880 	call	1021588 <OSTimeDlyHMSM>
		}
		// Indicate the connection status.
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, WIFI_LED_DISCONNECTED);
 1004a84:	00c08074 	movhi	r3,513
 1004a88:	18e82004 	addi	r3,r3,-24448
 1004a8c:	00800044 	movi	r2,1
 1004a90:	18800035 	stwio	r2,0(r3)
		// Send the connection message.
		WIFIHANDLER_TCP_LOG(printf("WifiHandler [connect, send: %s%s]\n", WIFI_CONNECT_PREFIX, ROVER_ID));
		write(WIFI_CONNECT_PREFIX ROVER_ID WIFI_STOP_MARKER);
 1004a94:	e13fff17 	ldw	r4,-4(fp)
 1004a98:	014040b4 	movhi	r5,258
 1004a9c:	29584704 	addi	r5,r5,24860
 1004aa0:	10045580 	call	1004558 <_ZN11WifiHandler5writeEPc>
		// Read the connection response.
		readIntoBufferUntil(response, WIFI_STOP_MARKER);
 1004aa4:	e13fff17 	ldw	r4,-4(fp)
 1004aa8:	e17ffe17 	ldw	r5,-8(fp)
 1004aac:	018040b4 	movhi	r6,258
 1004ab0:	31984904 	addi	r6,r6,24868
 1004ab4:	100432c0 	call	100432c <_ZN11WifiHandler19readIntoBufferUntilEPcS0_>
		WIFIHANDLER_TCP_LOG(printf("[WifiHandler] receive: %s%s", response, WIFI_STOP_MARKER));
		// Update the retry count.
		retryCount++;
 1004ab8:	00800044 	movi	r2,1
 1004abc:	e0bffd05 	stb	r2,-12(fp)
 */
bool WifiHandler::tcpConnect() {
	char *response = (char *)malloc(WIFI_READ_MAX_SIZE);
	bool retryCount = 0;
	// Loop until we receive MESSAGE_OK.
	do {
 1004ac0:	e13ffe17 	ldw	r4,-8(fp)
 1004ac4:	014040b4 	movhi	r5,258
 1004ac8:	29584a04 	addi	r5,r5,24872
 1004acc:	018000c4 	movi	r6,3
 1004ad0:	100f6340 	call	100f634 <strncmp>
 1004ad4:	1004c03a 	cmpne	r2,r2,zero
 1004ad8:	103fdf1e 	bne	r2,zero,1004a58 <_ZN11WifiHandler10tcpConnectEv+0x24>
		WIFIHANDLER_TCP_LOG(printf("[WifiHandler] receive: %s%s", response, WIFI_STOP_MARKER));
		// Update the retry count.
		retryCount++;
	} while (strncmp(response, MESSAGE_OK, MESSAGE_OK_LENGTH) != 0);
	// Indicate the connection status.
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, WIFI_LED_CONNECTED);
 1004adc:	00808074 	movhi	r2,513
 1004ae0:	10a82004 	addi	r2,r2,-24448
 1004ae4:	10000035 	stwio	zero,0(r2)
	return true;
 1004ae8:	00800044 	movi	r2,1
}
 1004aec:	e037883a 	mov	sp,fp
 1004af0:	dfc00117 	ldw	ra,4(sp)
 1004af4:	df000017 	ldw	fp,0(sp)
 1004af8:	dec00204 	addi	sp,sp,8
 1004afc:	f800283a 	ret

01004b00 <_ZN11WifiHandler8testUartEv>:

/**
 * Tests the UART communications between the board and the wifi module.
 * Sends the configuration command "+++" and expects the response "OK\r".
 */
void WifiHandler::testUart() {
 1004b00:	defffd04 	addi	sp,sp,-12
 1004b04:	dfc00215 	stw	ra,8(sp)
 1004b08:	df000115 	stw	fp,4(sp)
 1004b0c:	df000104 	addi	fp,sp,4
 1004b10:	e13fff15 	stw	r4,-4(fp)
	printf("WifiHandler [test: UART]\n");
 1004b14:	010040b4 	movhi	r4,258
 1004b18:	21184b04 	addi	r4,r4,24876
 1004b1c:	100f07c0 	call	100f07c <puts>
	configEnter();
 1004b20:	e13fff17 	ldw	r4,-4(fp)
 1004b24:	10046200 	call	1004620 <_ZN11WifiHandler11configEnterEv>
}
 1004b28:	e037883a 	mov	sp,fp
 1004b2c:	dfc00117 	ldw	ra,4(sp)
 1004b30:	df000017 	ldw	fp,0(sp)
 1004b34:	dec00204 	addi	sp,sp,8
 1004b38:	f800283a 	ret

01004b3c <_ZN11WifiHandler6unlockEv>:

/**
 * Releases the lock on the wifi connection.
 * Must be called at the end of any method calling lock().
 */
void WifiHandler::unlock() {
 1004b3c:	defffd04 	addi	sp,sp,-12
 1004b40:	dfc00215 	stw	ra,8(sp)
 1004b44:	df000115 	stw	fp,4(sp)
 1004b48:	df000104 	addi	fp,sp,4
 1004b4c:	e13fff15 	stw	r4,-4(fp)
	OSSemPost(wifi_lock);
 1004b50:	e0bfff17 	ldw	r2,-4(fp)
 1004b54:	11000117 	ldw	r4,4(r2)
 1004b58:	101f6a00 	call	101f6a0 <OSSemPost>
}
 1004b5c:	e037883a 	mov	sp,fp
 1004b60:	dfc00117 	ldw	ra,4(sp)
 1004b64:	df000017 	ldw	fp,0(sp)
 1004b68:	dec00204 	addi	sp,sp,8
 1004b6c:	f800283a 	ret

01004b70 <_ZN11WifiHandler8lockUpToEt>:
 * Since we are using transparent mode, there can only be one connection at a time.
 * Methods calling write() or readUntil() must acquire this lock first.
 * @param timeout - the maximum number of ticks that the caller is willing to wait to acquire the lock
 * @return true if the lock was acquired
 */
bool WifiHandler::lockUpTo(INT16U timeout) {
 1004b70:	defffb04 	addi	sp,sp,-20
 1004b74:	dfc00415 	stw	ra,16(sp)
 1004b78:	df000315 	stw	fp,12(sp)
 1004b7c:	df000304 	addi	fp,sp,12
 1004b80:	e13ffe15 	stw	r4,-8(fp)
 1004b84:	e17fff0d 	sth	r5,-4(fp)
	INT8U status;
	OSSemPend(wifi_lock, timeout, &status);
 1004b88:	e0bffe17 	ldw	r2,-8(fp)
 1004b8c:	11000117 	ldw	r4,4(r2)
 1004b90:	e17fff0b 	ldhu	r5,-4(fp)
 1004b94:	e1bffd04 	addi	r6,fp,-12
 1004b98:	101f2a80 	call	101f2a8 <OSSemPend>
	return (status == OS_NO_ERR);
 1004b9c:	e0bffd03 	ldbu	r2,-12(fp)
 1004ba0:	10803fcc 	andi	r2,r2,255
 1004ba4:	1005003a 	cmpeq	r2,r2,zero
}
 1004ba8:	e037883a 	mov	sp,fp
 1004bac:	dfc00117 	ldw	ra,4(sp)
 1004bb0:	df000017 	ldw	fp,0(sp)
 1004bb4:	dec00204 	addi	sp,sp,8
 1004bb8:	f800283a 	ret

01004bbc <_ZN11WifiHandler17tcpSendAndConfirmEPct>:
 * @param message - the message to send
 * @param timeout - the number of ticks that the caller is willing to wait to use the connection
 * @return true if the message was sent successfully, or false if the message could not be sent
 * because the wifi connection is busy
 */
bool WifiHandler::tcpSendAndConfirm(char *message, INT16U timeout) {
 1004bbc:	defff904 	addi	sp,sp,-28
 1004bc0:	dfc00615 	stw	ra,24(sp)
 1004bc4:	df000515 	stw	fp,20(sp)
 1004bc8:	df000504 	addi	fp,sp,20
 1004bcc:	e13ffc15 	stw	r4,-16(fp)
 1004bd0:	e17ffd15 	stw	r5,-12(fp)
 1004bd4:	e1bffe0d 	sth	r6,-8(fp)
	if (lockUpTo(timeout)) {
 1004bd8:	e17ffe0b 	ldhu	r5,-8(fp)
 1004bdc:	e13ffc17 	ldw	r4,-16(fp)
 1004be0:	1004b700 	call	1004b70 <_ZN11WifiHandler8lockUpToEt>
 1004be4:	10803fcc 	andi	r2,r2,255
 1004be8:	1005003a 	cmpeq	r2,r2,zero
 1004bec:	10001b1e 	bne	r2,zero,1004c5c <_ZN11WifiHandler17tcpSendAndConfirmEPct+0xa0>
		char *response = (char *)malloc(WIFI_READ_MAX_SIZE);
 1004bf0:	01010004 	movi	r4,1024
 1004bf4:	100e4a00 	call	100e4a0 <malloc>
 1004bf8:	e0bffb15 	stw	r2,-20(fp)
		do {
			WIFIHANDLER_TCP_LOG(printf("[WifiHandler] send: %s%s", message, WIFI_STOP_MARKER));
			WIFIHANDLER_TCP_LOG(printf("[WifiHandler] expect: %s%s", MESSAGE_OK, WIFI_STOP_MARKER));
			write(message);
 1004bfc:	e13ffc17 	ldw	r4,-16(fp)
 1004c00:	e17ffd17 	ldw	r5,-12(fp)
 1004c04:	10045580 	call	1004558 <_ZN11WifiHandler5writeEPc>
			write(WIFI_STOP_MARKER);
 1004c08:	e13ffc17 	ldw	r4,-16(fp)
 1004c0c:	014040b4 	movhi	r5,258
 1004c10:	29584904 	addi	r5,r5,24868
 1004c14:	10045580 	call	1004558 <_ZN11WifiHandler5writeEPc>
			readIntoBufferUntil(response, WIFI_STOP_MARKER);
 1004c18:	e13ffc17 	ldw	r4,-16(fp)
 1004c1c:	e17ffb17 	ldw	r5,-20(fp)
 1004c20:	018040b4 	movhi	r6,258
 1004c24:	31984904 	addi	r6,r6,24868
 1004c28:	100432c0 	call	100432c <_ZN11WifiHandler19readIntoBufferUntilEPcS0_>
 * because the wifi connection is busy
 */
bool WifiHandler::tcpSendAndConfirm(char *message, INT16U timeout) {
	if (lockUpTo(timeout)) {
		char *response = (char *)malloc(WIFI_READ_MAX_SIZE);
		do {
 1004c2c:	e13ffb17 	ldw	r4,-20(fp)
 1004c30:	014040b4 	movhi	r5,258
 1004c34:	29584a04 	addi	r5,r5,24872
 1004c38:	018000c4 	movi	r6,3
 1004c3c:	100f6340 	call	100f634 <strncmp>
 1004c40:	1004c03a 	cmpne	r2,r2,zero
 1004c44:	103fed1e 	bne	r2,zero,1004bfc <_ZN11WifiHandler17tcpSendAndConfirmEPct+0x40>
			write(message);
			write(WIFI_STOP_MARKER);
			readIntoBufferUntil(response, WIFI_STOP_MARKER);
			WIFIHANDLER_TCP_LOG(printf("[WifiHandler] receive: %s%s", response, WIFI_STOP_MARKER));
		} while (strncmp(response, MESSAGE_OK, MESSAGE_OK_LENGTH) != 0);
		unlock();
 1004c48:	e13ffc17 	ldw	r4,-16(fp)
 1004c4c:	1004b3c0 	call	1004b3c <_ZN11WifiHandler6unlockEv>
		return true;
 1004c50:	00800044 	movi	r2,1
 1004c54:	e0bfff15 	stw	r2,-4(fp)
 1004c58:	00000106 	br	1004c60 <_ZN11WifiHandler17tcpSendAndConfirmEPct+0xa4>
	} else {
		WIFIHANDLER_TCP_LOG(printf("WifiHandler [error: failed to acquire lock]\n"));
		return false;
 1004c5c:	e03fff15 	stw	zero,-4(fp)
 1004c60:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 1004c64:	e037883a 	mov	sp,fp
 1004c68:	dfc00117 	ldw	ra,4(sp)
 1004c6c:	df000017 	ldw	fp,0(sp)
 1004c70:	dec00204 	addi	sp,sp,8
 1004c74:	f800283a 	ret

01004c78 <_ZN11WifiHandler7tcpSendEPct>:
 * @param message - the message to send
 * @param timeout - the number of ticks that the caller is willing to wait to use the connection
 * @return true if the message was sent successfully, or false if the message could not be sent
 * because the wifi connection is busy
 */
bool WifiHandler::tcpSend(char *message, INT16U timeout) {
 1004c78:	defffa04 	addi	sp,sp,-24
 1004c7c:	dfc00515 	stw	ra,20(sp)
 1004c80:	df000415 	stw	fp,16(sp)
 1004c84:	df000404 	addi	fp,sp,16
 1004c88:	e13ffc15 	stw	r4,-16(fp)
 1004c8c:	e17ffd15 	stw	r5,-12(fp)
 1004c90:	e1bffe0d 	sth	r6,-8(fp)
	if (lockUpTo(timeout)) {
 1004c94:	e17ffe0b 	ldhu	r5,-8(fp)
 1004c98:	e13ffc17 	ldw	r4,-16(fp)
 1004c9c:	1004b700 	call	1004b70 <_ZN11WifiHandler8lockUpToEt>
 1004ca0:	10803fcc 	andi	r2,r2,255
 1004ca4:	1005003a 	cmpeq	r2,r2,zero
 1004ca8:	10000c1e 	bne	r2,zero,1004cdc <_ZN11WifiHandler7tcpSendEPct+0x64>
		WIFIHANDLER_TCP_LOG(printf("[WifiHandler] send: %s%s", message, WIFI_STOP_MARKER));
		write(message);
 1004cac:	e13ffc17 	ldw	r4,-16(fp)
 1004cb0:	e17ffd17 	ldw	r5,-12(fp)
 1004cb4:	10045580 	call	1004558 <_ZN11WifiHandler5writeEPc>
		write(WIFI_STOP_MARKER);
 1004cb8:	e13ffc17 	ldw	r4,-16(fp)
 1004cbc:	014040b4 	movhi	r5,258
 1004cc0:	29584904 	addi	r5,r5,24868
 1004cc4:	10045580 	call	1004558 <_ZN11WifiHandler5writeEPc>
		unlock();
 1004cc8:	e13ffc17 	ldw	r4,-16(fp)
 1004ccc:	1004b3c0 	call	1004b3c <_ZN11WifiHandler6unlockEv>
		return true;
 1004cd0:	00800044 	movi	r2,1
 1004cd4:	e0bfff15 	stw	r2,-4(fp)
 1004cd8:	00000106 	br	1004ce0 <_ZN11WifiHandler7tcpSendEPct+0x68>
	} else {
		WIFIHANDLER_TCP_LOG(printf("WifiHandler [error: failed to acquire lock]\n"));
		return false;
 1004cdc:	e03fff15 	stw	zero,-4(fp)
 1004ce0:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 1004ce4:	e037883a 	mov	sp,fp
 1004ce8:	dfc00117 	ldw	ra,4(sp)
 1004cec:	df000017 	ldw	fp,0(sp)
 1004cf0:	dec00204 	addi	sp,sp,8
 1004cf4:	f800283a 	ret

01004cf8 <_ZN11WifiHandler11tcpSendTestEv>:

/**
 * Tests network communications from the rover to the server.
 * Sends a message to the PHP socket server, then prints the response.
 */
void WifiHandler::tcpSendTest() {
 1004cf8:	defffd04 	addi	sp,sp,-12
 1004cfc:	dfc00215 	stw	ra,8(sp)
 1004d00:	df000115 	stw	fp,4(sp)
 1004d04:	df000104 	addi	fp,sp,4
 1004d08:	e13fff15 	stw	r4,-4(fp)
	static int count = 1;
	// Send six commands.
	if (count <= 6) {
 1004d0c:	d0a00317 	ldw	r2,-32756(gp)
 1004d10:	108001c8 	cmpgei	r2,r2,7
 1004d14:	1000151e 	bne	r2,zero,1004d6c <_ZN11WifiHandler11tcpSendTestEv+0x74>
		if (count < 6) {
 1004d18:	d0a00317 	ldw	r2,-32756(gp)
 1004d1c:	10800188 	cmpgei	r2,r2,6
 1004d20:	1000081e 	bne	r2,zero,1004d44 <_ZN11WifiHandler11tcpSendTestEv+0x4c>
			// First five commands are infrared hit.
			wifi->tcpSendAndConfirm("ih", WIFI_DEFAULT_TIMEOUT);
 1004d24:	008040f4 	movhi	r2,259
 1004d28:	10a40304 	addi	r2,r2,-28660
 1004d2c:	11000017 	ldw	r4,0(r2)
 1004d30:	014040b4 	movhi	r5,258
 1004d34:	29585204 	addi	r5,r5,24904
 1004d38:	0180fa04 	movi	r6,1000
 1004d3c:	1004bbc0 	call	1004bbc <_ZN11WifiHandler17tcpSendAndConfirmEPct>
 1004d40:	00000706 	br	1004d60 <_ZN11WifiHandler11tcpSendTestEv+0x68>
		} else {
			// Last command is quit.
			wifi->tcpSend(":quit", WIFI_DEFAULT_TIMEOUT);
 1004d44:	008040f4 	movhi	r2,259
 1004d48:	10a40304 	addi	r2,r2,-28660
 1004d4c:	11000017 	ldw	r4,0(r2)
 1004d50:	014040b4 	movhi	r5,258
 1004d54:	29585304 	addi	r5,r5,24908
 1004d58:	0180fa04 	movi	r6,1000
 1004d5c:	1004c780 	call	1004c78 <_ZN11WifiHandler7tcpSendEPct>
		} count++;
 1004d60:	d0a00317 	ldw	r2,-32756(gp)
 1004d64:	10800044 	addi	r2,r2,1
 1004d68:	d0a00315 	stw	r2,-32756(gp)
	}
	// Wait for 6 seconds.
	OSTimeDlyHMSM(0, 0, 6, 0);
 1004d6c:	0009883a 	mov	r4,zero
 1004d70:	000b883a 	mov	r5,zero
 1004d74:	01800184 	movi	r6,6
 1004d78:	000f883a 	mov	r7,zero
 1004d7c:	10215880 	call	1021588 <OSTimeDlyHMSM>
}
 1004d80:	e037883a 	mov	sp,fp
 1004d84:	dfc00117 	ldw	ra,4(sp)
 1004d88:	df000017 	ldw	fp,0(sp)
 1004d8c:	dec00204 	addi	sp,sp,8
 1004d90:	f800283a 	ret

01004d94 <_ZN11WifiHandler4lockEv>:
 * Waits to acquire the lock on the wifi connection.
 * Since we are using transparent mode, there can only be one connection at a time.
 * Methods calling write() or readUntil() must acquire this lock first.
 * @return true if the lock was acquired
 */
bool WifiHandler::lock() {
 1004d94:	defffd04 	addi	sp,sp,-12
 1004d98:	dfc00215 	stw	ra,8(sp)
 1004d9c:	df000115 	stw	fp,4(sp)
 1004da0:	df000104 	addi	fp,sp,4
 1004da4:	e13fff15 	stw	r4,-4(fp)
	return lockUpTo(WIFI_DEFAULT_TIMEOUT);
 1004da8:	e13fff17 	ldw	r4,-4(fp)
 1004dac:	0140fa04 	movi	r5,1000
 1004db0:	1004b700 	call	1004b70 <_ZN11WifiHandler8lockUpToEt>
 1004db4:	10803fcc 	andi	r2,r2,255
}
 1004db8:	e037883a 	mov	sp,fp
 1004dbc:	dfc00117 	ldw	ra,4(sp)
 1004dc0:	df000017 	ldw	fp,0(sp)
 1004dc4:	dec00204 	addi	sp,sp,8
 1004dc8:	f800283a 	ret

01004dcc <_ZN11WifiHandler7httpGetEPc>:
/**
 * Sends an HTTP GET request for the given URL.
 * @param url - the URL specifying the resource to request
 * @return the response to the request
 */
char *WifiHandler::httpGet(char *url) {
 1004dcc:	deffd904 	addi	sp,sp,-156
 1004dd0:	dfc02615 	stw	ra,152(sp)
 1004dd4:	df002515 	stw	fp,148(sp)
 1004dd8:	df002504 	addi	fp,sp,148
 1004ddc:	e13ffd15 	stw	r4,-12(fp)
 1004de0:	e17ffe15 	stw	r5,-8(fp)
	if (lock()) {
 1004de4:	e13ffd17 	ldw	r4,-12(fp)
 1004de8:	1004d940 	call	1004d94 <_ZN11WifiHandler4lockEv>
 1004dec:	10803fcc 	andi	r2,r2,255
 1004df0:	1005003a 	cmpeq	r2,r2,zero
 1004df4:	1000131e 	bne	r2,zero,1004e44 <_ZN11WifiHandler7httpGetEPc+0x78>
		char request[WIFI_HTTP_REQUEST_MAX_LENGTH];
		snprintf(request, WIFI_HTTP_REQUEST_MAX_LENGTH,
				"GET %s HTTP/1.1\r\n"
				"Host: surface\r\n"
				"Content-Length: 0\r\n"
				"\r\n", url);
 1004df8:	e13fdd04 	addi	r4,fp,-140
 1004dfc:	01402004 	movi	r5,128
 1004e00:	018040b4 	movhi	r6,258
 1004e04:	31985504 	addi	r6,r6,24916
 1004e08:	e1fffe17 	ldw	r7,-8(fp)
 1004e0c:	100f4500 	call	100f450 <snprintf>
		write(request);
 1004e10:	e17fdd04 	addi	r5,fp,-140
 1004e14:	e13ffd17 	ldw	r4,-12(fp)
 1004e18:	10045580 	call	1004558 <_ZN11WifiHandler5writeEPc>
		WIFIHANDLER_HTTP_LOG(printf("\n%s", request));
		char *response = readUntil("</html>");
 1004e1c:	e13ffd17 	ldw	r4,-12(fp)
 1004e20:	014040b4 	movhi	r5,258
 1004e24:	29586304 	addi	r5,r5,24972
 1004e28:	10044900 	call	1004490 <_ZN11WifiHandler9readUntilEPc>
 1004e2c:	e0bfdc15 	stw	r2,-144(fp)
		WIFIHANDLER_HTTP_LOG(printf("%s", response));
		unlock();
 1004e30:	e13ffd17 	ldw	r4,-12(fp)
 1004e34:	1004b3c0 	call	1004b3c <_ZN11WifiHandler6unlockEv>
		return response;
 1004e38:	e0bfdc17 	ldw	r2,-144(fp)
 1004e3c:	e0bfff15 	stw	r2,-4(fp)
 1004e40:	00000706 	br	1004e60 <_ZN11WifiHandler7httpGetEPc+0x94>
	} else {
		WIFIHANDLER_HTTP_LOG(printf("WifiHandler [error: failed to acquire lock]\n"));
		// Return an empty message.
		char *response = (char *)malloc(sizeof(char));
 1004e44:	01000044 	movi	r4,1
 1004e48:	100e4a00 	call	100e4a0 <malloc>
 1004e4c:	e0bfdb15 	stw	r2,-148(fp)
		response[0] = '\0';
 1004e50:	e0bfdb17 	ldw	r2,-148(fp)
 1004e54:	10000005 	stb	zero,0(r2)
		return response;
 1004e58:	e0bfdb17 	ldw	r2,-148(fp)
 1004e5c:	e0bfff15 	stw	r2,-4(fp)
 1004e60:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 1004e64:	e037883a 	mov	sp,fp
 1004e68:	dfc00117 	ldw	ra,4(sp)
 1004e6c:	df000017 	ldw	fp,0(sp)
 1004e70:	dec00204 	addi	sp,sp,8
 1004e74:	f800283a 	ret

01004e78 <_ZN11WifiHandler9httpStartEv>:
 * Sets up the wifi module for HTTP communication with the server.
 * If the module is already configured for HTTP, prints the status of the module.
 * @return true if the connection was established
 * This method will also indicate the connection status by turning off the LED.
 */
bool WifiHandler::httpStart() {
 1004e78:	defffc04 	addi	sp,sp,-16
 1004e7c:	dfc00315 	stw	ra,12(sp)
 1004e80:	df000215 	stw	fp,8(sp)
 1004e84:	df000204 	addi	fp,sp,8
 1004e88:	e13ffe15 	stw	r4,-8(fp)
	if (lock()) {
 1004e8c:	e13ffe17 	ldw	r4,-8(fp)
 1004e90:	1004d940 	call	1004d94 <_ZN11WifiHandler4lockEv>
 1004e94:	10803fcc 	andi	r2,r2,255
 1004e98:	1005003a 	cmpeq	r2,r2,zero
 1004e9c:	1000081e 	bne	r2,zero,1004ec0 <_ZN11WifiHandler9httpStartEv+0x48>
		// Setup for HTTP or show the wifi status.
		WIFIHANDLER_CONFIG_LOG(setup(WIFI_HTTP));
		//	WIFIHANDLER_CONFIG_LOG(status());
		// Indicate the connection on the LED.
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, WIFI_LED_CONNECTED);
 1004ea0:	00808074 	movhi	r2,513
 1004ea4:	10a82004 	addi	r2,r2,-24448
 1004ea8:	10000035 	stwio	zero,0(r2)
		unlock();
 1004eac:	e13ffe17 	ldw	r4,-8(fp)
 1004eb0:	1004b3c0 	call	1004b3c <_ZN11WifiHandler6unlockEv>
		return true;
 1004eb4:	00800044 	movi	r2,1
 1004eb8:	e0bfff15 	stw	r2,-4(fp)
 1004ebc:	00000106 	br	1004ec4 <_ZN11WifiHandler9httpStartEv+0x4c>
	} else {
		WIFIHANDLER_HTTP_LOG(printf("WifiHandler [task: start, error: failed to acquire lock]\n"));
		return false;
 1004ec0:	e03fff15 	stw	zero,-4(fp)
 1004ec4:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 1004ec8:	e037883a 	mov	sp,fp
 1004ecc:	dfc00117 	ldw	ra,4(sp)
 1004ed0:	df000017 	ldw	fp,0(sp)
 1004ed4:	dec00204 	addi	sp,sp,8
 1004ed8:	f800283a 	ret

01004edc <_Z27wifi_handler_http_test_taskPv>:
 * This test sends a GET request to an HTTP server and prints the response.
 * Before running this, make sure the computer serving /arcap/infrared/hit.php
 * is connecting to the ARCap network.
 * To view output enable WIFIHANDLER_HTTP_DEBUG in Debug.h.
 */
void wifi_handler_http_test_task(void *pdata) {
 1004edc:	defffc04 	addi	sp,sp,-16
 1004ee0:	dfc00315 	stw	ra,12(sp)
 1004ee4:	df000215 	stw	fp,8(sp)
 1004ee8:	df000204 	addi	fp,sp,8
 1004eec:	e13fff15 	stw	r4,-4(fp)
	TASK_LOG(printf("WifiHandler [task: test, status: start]\n"));
	// Start HTTP communication.
	wifi->httpStart();
 1004ef0:	008040f4 	movhi	r2,259
 1004ef4:	10a40304 	addi	r2,r2,-28660
 1004ef8:	11000017 	ldw	r4,0(r2)
 1004efc:	1004e780 	call	1004e78 <_ZN11WifiHandler9httpStartEv>
	while (true) {
		// Get the test page.
		char *response = wifi->httpGet("/arcap/infrared/hit.php");
 1004f00:	008040f4 	movhi	r2,259
 1004f04:	10a40304 	addi	r2,r2,-28660
 1004f08:	11000017 	ldw	r4,0(r2)
 1004f0c:	014040b4 	movhi	r5,258
 1004f10:	29586504 	addi	r5,r5,24980
 1004f14:	1004dcc0 	call	1004dcc <_ZN11WifiHandler7httpGetEPc>
 1004f18:	e0bffe15 	stw	r2,-8(fp)
		free(response);
 1004f1c:	e13ffe17 	ldw	r4,-8(fp)
 1004f20:	100e48c0 	call	100e48c <free>
		OSTimeDlyHMSM(0, 0, 10, 0);
 1004f24:	0009883a 	mov	r4,zero
 1004f28:	000b883a 	mov	r5,zero
 1004f2c:	01800284 	movi	r6,10
 1004f30:	000f883a 	mov	r7,zero
 1004f34:	10215880 	call	1021588 <OSTimeDlyHMSM>
 */
void wifi_handler_http_test_task(void *pdata) {
	TASK_LOG(printf("WifiHandler [task: test, status: start]\n"));
	// Start HTTP communication.
	wifi->httpStart();
	while (true) {
 1004f38:	003ff106 	br	1004f00 <_Z27wifi_handler_http_test_taskPv+0x24>

01004f3c <_ZN11WifiHandler10tcpReceiveEv>:
/**
 * Waits for the next TCP message from the server.
 * The message is terminated by a newline '\n'.
 * @return the message received, or NULL if no message could be read because the wifi connection is busy
 */
char *WifiHandler::tcpReceive() {
 1004f3c:	defffb04 	addi	sp,sp,-20
 1004f40:	dfc00415 	stw	ra,16(sp)
 1004f44:	df000315 	stw	fp,12(sp)
 1004f48:	df000304 	addi	fp,sp,12
 1004f4c:	e13ffe15 	stw	r4,-8(fp)
	if (lock()) {
 1004f50:	e13ffe17 	ldw	r4,-8(fp)
 1004f54:	1004d940 	call	1004d94 <_ZN11WifiHandler4lockEv>
 1004f58:	10803fcc 	andi	r2,r2,255
 1004f5c:	1005003a 	cmpeq	r2,r2,zero
 1004f60:	10000a1e 	bne	r2,zero,1004f8c <_ZN11WifiHandler10tcpReceiveEv+0x50>
		char *message = readUntil(WIFI_STOP_MARKER);
 1004f64:	e13ffe17 	ldw	r4,-8(fp)
 1004f68:	014040b4 	movhi	r5,258
 1004f6c:	29584904 	addi	r5,r5,24868
 1004f70:	10044900 	call	1004490 <_ZN11WifiHandler9readUntilEPc>
 1004f74:	e0bffd15 	stw	r2,-12(fp)
		WIFIHANDLER_TCP_LOG(printf("[WifiHandler] receive: %s", message));
		unlock();
 1004f78:	e13ffe17 	ldw	r4,-8(fp)
 1004f7c:	1004b3c0 	call	1004b3c <_ZN11WifiHandler6unlockEv>
		return message;
 1004f80:	e0bffd17 	ldw	r2,-12(fp)
 1004f84:	e0bfff15 	stw	r2,-4(fp)
 1004f88:	00000106 	br	1004f90 <_ZN11WifiHandler10tcpReceiveEv+0x54>
	} else {
		WIFIHANDLER_TCP_LOG(printf("WifiHandler [error: failed to acquire lock]\n"));
		return NULL;
 1004f8c:	e03fff15 	stw	zero,-4(fp)
 1004f90:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 1004f94:	e037883a 	mov	sp,fp
 1004f98:	dfc00117 	ldw	ra,4(sp)
 1004f9c:	df000017 	ldw	fp,0(sp)
 1004fa0:	dec00204 	addi	sp,sp,8
 1004fa4:	f800283a 	ret

01004fa8 <_Z28wifi_handler_tcp_update_taskPv>:
}

/**
 * Pings the server to confirm the continued connection between the rover and the server.
 */
void wifi_handler_tcp_update_task(void *pdata) {
 1004fa8:	defffc04 	addi	sp,sp,-16
 1004fac:	dfc00315 	stw	ra,12(sp)
 1004fb0:	df000215 	stw	fp,8(sp)
 1004fb4:	df000204 	addi	fp,sp,8
 1004fb8:	e13fff15 	stw	r4,-4(fp)
 1004fbc:	00000006 	br	1004fc0 <_Z28wifi_handler_tcp_update_taskPv+0x18>
	TASK_LOG(printf("WifiHandler [task: update, status: start]\n"));
	while (true) {
		OSTimeDlyHMSM(0, 0, WIFI_HANDLER_UPDATE_TIME_SECONDS, 0);
 1004fc0:	0009883a 	mov	r4,zero
 1004fc4:	000b883a 	mov	r5,zero
 1004fc8:	01800184 	movi	r6,6
 1004fcc:	000f883a 	mov	r7,zero
 1004fd0:	10215880 	call	1021588 <OSTimeDlyHMSM>
		// Ping the server.
		wifi->tcpSend(WIFI_CONNECT_PREFIX ROVER_ID, WAIT_FOREVER);
 1004fd4:	008040f4 	movhi	r2,259
 1004fd8:	10a40304 	addi	r2,r2,-28660
 1004fdc:	11000017 	ldw	r4,0(r2)
 1004fe0:	014040b4 	movhi	r5,258
 1004fe4:	29586b04 	addi	r5,r5,25004
 1004fe8:	000d883a 	mov	r6,zero
 1004fec:	1004c780 	call	1004c78 <_ZN11WifiHandler7tcpSendEPct>
		char *response = wifi->tcpReceive();
 1004ff0:	008040f4 	movhi	r2,259
 1004ff4:	10a40304 	addi	r2,r2,-28660
 1004ff8:	11000017 	ldw	r4,0(r2)
 1004ffc:	1004f3c0 	call	1004f3c <_ZN11WifiHandler10tcpReceiveEv>
 1005000:	e0bffe15 	stw	r2,-8(fp)
		if (strncmp(response, MESSAGE_OK, MESSAGE_OK_LENGTH) == 0) {
 1005004:	e13ffe17 	ldw	r4,-8(fp)
 1005008:	014040b4 	movhi	r5,258
 100500c:	29584a04 	addi	r5,r5,24872
 1005010:	018000c4 	movi	r6,3
 1005014:	100f6340 	call	100f634 <strncmp>
 1005018:	1004c03a 	cmpne	r2,r2,zero
 100501c:	1000041e 	bne	r2,zero,1005030 <_Z28wifi_handler_tcp_update_taskPv+0x88>
			// Indicate success on the LED.
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, WIFI_LED_CONNECTED);
 1005020:	00808074 	movhi	r2,513
 1005024:	10a82004 	addi	r2,r2,-24448
 1005028:	10000035 	stwio	zero,0(r2)
 100502c:	003fe406 	br	1004fc0 <_Z28wifi_handler_tcp_update_taskPv+0x18>
		} else {
			// Indicate the failure on the LED.
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, WIFI_LED_DISCONNECTED);
 1005030:	00c08074 	movhi	r3,513
 1005034:	18e82004 	addi	r3,r3,-24448
 1005038:	00800044 	movi	r2,1
 100503c:	18800035 	stwio	r2,0(r3)
/**
 * Pings the server to confirm the continued connection between the rover and the server.
 */
void wifi_handler_tcp_update_task(void *pdata) {
	TASK_LOG(printf("WifiHandler [task: update, status: start]\n"));
	while (true) {
 1005040:	003fdf06 	br	1004fc0 <_Z28wifi_handler_tcp_update_taskPv+0x18>

01005044 <_ZN11WifiHandler8tcpStartEv>:
 * If the module is already configured for TCP, prints the status of the module.
 * After confirming the module status, calls tcpConnect() to establish a connection to the server socket.
 * @return true if the connection was established
 * This method will also indicate the connection status by turning off the LED.
 */
bool WifiHandler::tcpStart() {
 1005044:	defffc04 	addi	sp,sp,-16
 1005048:	dfc00315 	stw	ra,12(sp)
 100504c:	df000215 	stw	fp,8(sp)
 1005050:	df000204 	addi	fp,sp,8
 1005054:	e13ffe15 	stw	r4,-8(fp)
	if (lock()) {
 1005058:	e13ffe17 	ldw	r4,-8(fp)
 100505c:	1004d940 	call	1004d94 <_ZN11WifiHandler4lockEv>
 1005060:	10803fcc 	andi	r2,r2,255
 1005064:	1005003a 	cmpeq	r2,r2,zero
 1005068:	1000071e 	bne	r2,zero,1005088 <_ZN11WifiHandler8tcpStartEv+0x44>
		// Setup or show the wifi status.
//		WIFIHANDLER_CONFIG_LOG(setup(WIFI_TCP));
		WIFIHANDLER_CONFIG_LOG(status());
		// Connect to the server.
		tcpConnect();
 100506c:	e13ffe17 	ldw	r4,-8(fp)
 1005070:	1004a340 	call	1004a34 <_ZN11WifiHandler10tcpConnectEv>
		unlock();
 1005074:	e13ffe17 	ldw	r4,-8(fp)
 1005078:	1004b3c0 	call	1004b3c <_ZN11WifiHandler6unlockEv>
		return true;
 100507c:	00800044 	movi	r2,1
 1005080:	e0bfff15 	stw	r2,-4(fp)
 1005084:	00000106 	br	100508c <_ZN11WifiHandler8tcpStartEv+0x48>
	} else {
		WIFIHANDLER_TCP_LOG(printf("WifiHandler [task: start, error: failed to acquire lock]\n"));
		return false;
 1005088:	e03fff15 	stw	zero,-4(fp)
 100508c:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 1005090:	e037883a 	mov	sp,fp
 1005094:	dfc00117 	ldw	ra,4(sp)
 1005098:	df000017 	ldw	fp,0(sp)
 100509c:	dec00204 	addi	sp,sp,8
 10050a0:	f800283a 	ret

010050a4 <_Z26wifi_handler_tcp_test_taskPv>:
 * This test sends messages to a PHP echo server and prints the response.
 * Before running this, first start the echo server by visiting 192.168.0.100/arcap/socket.php
 * from a browser on the ARCap network.
 * To view output enable WIFIHANDLER_TCP_DEBUG in Debug.h.
 */
void wifi_handler_tcp_test_task(void *pdata) {
 10050a4:	defffd04 	addi	sp,sp,-12
 10050a8:	dfc00215 	stw	ra,8(sp)
 10050ac:	df000115 	stw	fp,4(sp)
 10050b0:	df000104 	addi	fp,sp,4
 10050b4:	e13fff15 	stw	r4,-4(fp)
	TASK_LOG(printf("WifiHandler [task: socket test, status: start]\n"));
	// Start TCP communications.
	wifi->tcpStart();
 10050b8:	008040f4 	movhi	r2,259
 10050bc:	10a40304 	addi	r2,r2,-28660
 10050c0:	11000017 	ldw	r4,0(r2)
 10050c4:	10050440 	call	1005044 <_ZN11WifiHandler8tcpStartEv>
	// Run the test.
	while (true) {
		wifi->tcpSendTest();
 10050c8:	008040f4 	movhi	r2,259
 10050cc:	10a40304 	addi	r2,r2,-28660
 10050d0:	11000017 	ldw	r4,0(r2)
 10050d4:	1004cf80 	call	1004cf8 <_ZN11WifiHandler11tcpSendTestEv>
		wifi->tcpReceiveTest();
 10050d8:	008040f4 	movhi	r2,259
 10050dc:	10a40304 	addi	r2,r2,-28660
 10050e0:	11000017 	ldw	r4,0(r2)
 10050e4:	10042400 	call	1004240 <_ZN11WifiHandler14tcpReceiveTestEv>
void wifi_handler_tcp_test_task(void *pdata) {
	TASK_LOG(printf("WifiHandler [task: socket test, status: start]\n"));
	// Start TCP communications.
	wifi->tcpStart();
	// Run the test.
	while (true) {
 10050e8:	003ff706 	br	10050c8 <_Z26wifi_handler_tcp_test_taskPv+0x24>

010050ec <_Z27wifi_handler_tcp_start_taskPv>:
/**
 * Starts network communications.
 * This task configures the wifi module and calls WifiHandler::tcpConnect.
 * All other tasks must wait for the connection to be confirmed before executing.
 */
void wifi_handler_tcp_start_task(void *pdata) {
 10050ec:	defffd04 	addi	sp,sp,-12
 10050f0:	dfc00215 	stw	ra,8(sp)
 10050f4:	df000115 	stw	fp,4(sp)
 10050f8:	df000104 	addi	fp,sp,4
 10050fc:	e13fff15 	stw	r4,-4(fp)
	TASK_LOG(printf("WifiHandler [task: start, status: start]\n"));
	// Start TCP communications.
	wifi->tcpStart();
 1005100:	008040f4 	movhi	r2,259
 1005104:	10a40304 	addi	r2,r2,-28660
 1005108:	11000017 	ldw	r4,0(r2)
 100510c:	10050440 	call	1005044 <_ZN11WifiHandler8tcpStartEv>
	TASK_LOG(printf("WifiHandler [task: start, status: finish]\n"));
	// Delay forever.
	while (true) {
		OSTimeDlyHMSM(1, 0, 0, 0);
 1005110:	01000044 	movi	r4,1
 1005114:	000b883a 	mov	r5,zero
 1005118:	000d883a 	mov	r6,zero
 100511c:	000f883a 	mov	r7,zero
 1005120:	10215880 	call	1021588 <OSTimeDlyHMSM>
	TASK_LOG(printf("WifiHandler [task: start, status: start]\n"));
	// Start TCP communications.
	wifi->tcpStart();
	TASK_LOG(printf("WifiHandler [task: start, status: finish]\n"));
	// Delay forever.
	while (true) {
 1005124:	003ffa06 	br	1005110 <_Z27wifi_handler_tcp_start_taskPv+0x24>

01005128 <_ZN11WifiHandlerC1Ev>:
/**
 * Creates a new wifi handler.
 * @throw UARTOpenException if the handler cannot open the UART device used to talk to the wifi module
 * @throw SemCreateException if the handler cannot create a semaphore used to control access to the wifi connection
 */
WifiHandler::WifiHandler() {
 1005128:	defffc04 	addi	sp,sp,-16
 100512c:	dfc00315 	stw	ra,12(sp)
 1005130:	df000215 	stw	fp,8(sp)
 1005134:	dc000115 	stw	r16,4(sp)
 1005138:	df000104 	addi	fp,sp,4
 100513c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_WIFI_RESET_N_BASE, WIFI_ENABLE);
 1005140:	00c08074 	movhi	r3,513
 1005144:	18e81804 	addi	r3,r3,-24480
 1005148:	00800044 	movi	r2,1
 100514c:	18800035 	stwio	r2,0(r3)
	wifi_dev = alt_up_rs232_open_dev(UART_WIFI_NAME);
 1005150:	010040b4 	movhi	r4,258
 1005154:	21186c04 	addi	r4,r4,25008
 1005158:	10237f80 	call	10237f8 <alt_up_rs232_open_dev>
 100515c:	1007883a 	mov	r3,r2
 1005160:	e0bfff17 	ldw	r2,-4(fp)
 1005164:	10c00015 	stw	r3,0(r2)
	wifi_lock = OSSemCreate(1);
 1005168:	01000044 	movi	r4,1
 100516c:	101eef40 	call	101eef4 <OSSemCreate>
 1005170:	1007883a 	mov	r3,r2
 1005174:	e0bfff17 	ldw	r2,-4(fp)
 1005178:	10c00115 	stw	r3,4(r2)
	if (wifi_dev == NULL) {
 100517c:	e0bfff17 	ldw	r2,-4(fp)
 1005180:	10800017 	ldw	r2,0(r2)
 1005184:	1004c03a 	cmpne	r2,r2,zero
 1005188:	10000e1e 	bne	r2,zero,10051c4 <_ZN11WifiHandlerC1Ev+0x9c>
		throw new UARTOpenException();
 100518c:	01000104 	movi	r4,4
 1005190:	100dda00 	call	100dda0 <_Znwm>
 1005194:	1021883a 	mov	r16,r2
 1005198:	8009883a 	mov	r4,r16
 100519c:	1001b180 	call	1001b18 <_ZN17UARTOpenExceptionC1Ev>
 10051a0:	01000104 	movi	r4,4
 10051a4:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 10051a8:	1009883a 	mov	r4,r2
 10051ac:	2005883a 	mov	r2,r4
 10051b0:	14000015 	stw	r16,0(r2)
 10051b4:	014040b4 	movhi	r5,258
 10051b8:	2957cb04 	addi	r5,r5,24364
 10051bc:	000d883a 	mov	r6,zero
 10051c0:	100d8900 	call	100d890 <__cxa_throw>
	} if (wifi_lock == NULL) {
 10051c4:	e0bfff17 	ldw	r2,-4(fp)
 10051c8:	10800117 	ldw	r2,4(r2)
 10051cc:	1004c03a 	cmpne	r2,r2,zero
 10051d0:	10000e1e 	bne	r2,zero,100520c <_ZN11WifiHandlerC1Ev+0xe4>
		throw new SemCreateException();
 10051d4:	01000104 	movi	r4,4
 10051d8:	100dda00 	call	100dda0 <_Znwm>
 10051dc:	1021883a 	mov	r16,r2
 10051e0:	8009883a 	mov	r4,r16
 10051e4:	10053480 	call	1005348 <_ZN18SemCreateExceptionC1Ev>
 10051e8:	01000104 	movi	r4,4
 10051ec:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 10051f0:	1009883a 	mov	r4,r2
 10051f4:	2005883a 	mov	r2,r4
 10051f8:	14000015 	stw	r16,0(r2)
 10051fc:	014040b4 	movhi	r5,258
 1005200:	29587004 	addi	r5,r5,25024
 1005204:	000d883a 	mov	r6,zero
 1005208:	100d8900 	call	100d890 <__cxa_throw>
	}
}
 100520c:	e037883a 	mov	sp,fp
 1005210:	dfc00217 	ldw	ra,8(sp)
 1005214:	df000117 	ldw	fp,4(sp)
 1005218:	dc000017 	ldw	r16,0(sp)
 100521c:	dec00304 	addi	sp,sp,12
 1005220:	f800283a 	ret

01005224 <_ZN11WifiHandlerC2Ev>:
/**
 * Creates a new wifi handler.
 * @throw UARTOpenException if the handler cannot open the UART device used to talk to the wifi module
 * @throw SemCreateException if the handler cannot create a semaphore used to control access to the wifi connection
 */
WifiHandler::WifiHandler() {
 1005224:	defffc04 	addi	sp,sp,-16
 1005228:	dfc00315 	stw	ra,12(sp)
 100522c:	df000215 	stw	fp,8(sp)
 1005230:	dc000115 	stw	r16,4(sp)
 1005234:	df000104 	addi	fp,sp,4
 1005238:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_WIFI_RESET_N_BASE, WIFI_ENABLE);
 100523c:	00c08074 	movhi	r3,513
 1005240:	18e81804 	addi	r3,r3,-24480
 1005244:	00800044 	movi	r2,1
 1005248:	18800035 	stwio	r2,0(r3)
	wifi_dev = alt_up_rs232_open_dev(UART_WIFI_NAME);
 100524c:	010040b4 	movhi	r4,258
 1005250:	21186c04 	addi	r4,r4,25008
 1005254:	10237f80 	call	10237f8 <alt_up_rs232_open_dev>
 1005258:	1007883a 	mov	r3,r2
 100525c:	e0bfff17 	ldw	r2,-4(fp)
 1005260:	10c00015 	stw	r3,0(r2)
	wifi_lock = OSSemCreate(1);
 1005264:	01000044 	movi	r4,1
 1005268:	101eef40 	call	101eef4 <OSSemCreate>
 100526c:	1007883a 	mov	r3,r2
 1005270:	e0bfff17 	ldw	r2,-4(fp)
 1005274:	10c00115 	stw	r3,4(r2)
	if (wifi_dev == NULL) {
 1005278:	e0bfff17 	ldw	r2,-4(fp)
 100527c:	10800017 	ldw	r2,0(r2)
 1005280:	1004c03a 	cmpne	r2,r2,zero
 1005284:	10000e1e 	bne	r2,zero,10052c0 <_ZN11WifiHandlerC2Ev+0x9c>
		throw new UARTOpenException();
 1005288:	01000104 	movi	r4,4
 100528c:	100dda00 	call	100dda0 <_Znwm>
 1005290:	1021883a 	mov	r16,r2
 1005294:	8009883a 	mov	r4,r16
 1005298:	1001b180 	call	1001b18 <_ZN17UARTOpenExceptionC1Ev>
 100529c:	01000104 	movi	r4,4
 10052a0:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 10052a4:	1009883a 	mov	r4,r2
 10052a8:	2005883a 	mov	r2,r4
 10052ac:	14000015 	stw	r16,0(r2)
 10052b0:	014040b4 	movhi	r5,258
 10052b4:	2957cb04 	addi	r5,r5,24364
 10052b8:	000d883a 	mov	r6,zero
 10052bc:	100d8900 	call	100d890 <__cxa_throw>
	} if (wifi_lock == NULL) {
 10052c0:	e0bfff17 	ldw	r2,-4(fp)
 10052c4:	10800117 	ldw	r2,4(r2)
 10052c8:	1004c03a 	cmpne	r2,r2,zero
 10052cc:	10000e1e 	bne	r2,zero,1005308 <_ZN11WifiHandlerC2Ev+0xe4>
		throw new SemCreateException();
 10052d0:	01000104 	movi	r4,4
 10052d4:	100dda00 	call	100dda0 <_Znwm>
 10052d8:	1021883a 	mov	r16,r2
 10052dc:	8009883a 	mov	r4,r16
 10052e0:	10053480 	call	1005348 <_ZN18SemCreateExceptionC1Ev>
 10052e4:	01000104 	movi	r4,4
 10052e8:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 10052ec:	1009883a 	mov	r4,r2
 10052f0:	2005883a 	mov	r2,r4
 10052f4:	14000015 	stw	r16,0(r2)
 10052f8:	014040b4 	movhi	r5,258
 10052fc:	29587004 	addi	r5,r5,25024
 1005300:	000d883a 	mov	r6,zero
 1005304:	100d8900 	call	100d890 <__cxa_throw>
	}
}
 1005308:	e037883a 	mov	sp,fp
 100530c:	dfc00217 	ldw	ra,8(sp)
 1005310:	df000117 	ldw	fp,4(sp)
 1005314:	dc000017 	ldw	r16,0(sp)
 1005318:	dec00304 	addi	sp,sp,12
 100531c:	f800283a 	ret

01005320 <_ZNK18SemCreateException4whatEv>:
	}
};

class SemCreateException : ARCapException {
public:
	virtual const char *what() const throw() {
 1005320:	defffe04 	addi	sp,sp,-8
 1005324:	df000115 	stw	fp,4(sp)
 1005328:	df000104 	addi	fp,sp,4
 100532c:	e13fff15 	stw	r4,-4(fp)
		return "Failed to create semaphore.";
 1005330:	008040b4 	movhi	r2,258
 1005334:	10980904 	addi	r2,r2,24612
	}
 1005338:	e037883a 	mov	sp,fp
 100533c:	df000017 	ldw	fp,0(sp)
 1005340:	dec00104 	addi	sp,sp,4
 1005344:	f800283a 	ret

01005348 <_ZN18SemCreateExceptionC1Ev>:
	virtual const char *what() const throw() {
		return "Failed to open connection to UART.";
	}
};

class SemCreateException : ARCapException {
 1005348:	defffd04 	addi	sp,sp,-12
 100534c:	dfc00215 	stw	ra,8(sp)
 1005350:	df000115 	stw	fp,4(sp)
 1005354:	df000104 	addi	fp,sp,4
 1005358:	e13fff15 	stw	r4,-4(fp)
 100535c:	e13fff17 	ldw	r4,-4(fp)
 1005360:	10004600 	call	1000460 <_ZN14ARCapExceptionC2Ev>
 1005364:	00c040b4 	movhi	r3,258
 1005368:	18d88804 	addi	r3,r3,25120
 100536c:	e0bfff17 	ldw	r2,-4(fp)
 1005370:	10c00015 	stw	r3,0(r2)
 1005374:	e037883a 	mov	sp,fp
 1005378:	dfc00117 	ldw	ra,4(sp)
 100537c:	df000017 	ldw	fp,0(sp)
 1005380:	dec00204 	addi	sp,sp,8
 1005384:	f800283a 	ret

01005388 <_ZN18SemCreateExceptionD0Ev>:
 1005388:	defffd04 	addi	sp,sp,-12
 100538c:	dfc00215 	stw	ra,8(sp)
 1005390:	df000115 	stw	fp,4(sp)
 1005394:	df000104 	addi	fp,sp,4
 1005398:	e13fff15 	stw	r4,-4(fp)
 100539c:	00c040b4 	movhi	r3,258
 10053a0:	18d88804 	addi	r3,r3,25120
 10053a4:	e0bfff17 	ldw	r2,-4(fp)
 10053a8:	10c00015 	stw	r3,0(r2)
 10053ac:	e13fff17 	ldw	r4,-4(fp)
 10053b0:	10005200 	call	1000520 <_ZN14ARCapExceptionD2Ev>
 10053b4:	00800044 	movi	r2,1
 10053b8:	10803fcc 	andi	r2,r2,255
 10053bc:	1005003a 	cmpeq	r2,r2,zero
 10053c0:	1000021e 	bne	r2,zero,10053cc <_ZN18SemCreateExceptionD0Ev+0x44>
 10053c4:	e13fff17 	ldw	r4,-4(fp)
 10053c8:	100d8100 	call	100d810 <_ZdlPv>
 10053cc:	e037883a 	mov	sp,fp
 10053d0:	dfc00117 	ldw	ra,4(sp)
 10053d4:	df000017 	ldw	fp,0(sp)
 10053d8:	dec00204 	addi	sp,sp,8
 10053dc:	f800283a 	ret

010053e0 <_ZN18SemCreateExceptionD1Ev>:
 10053e0:	defffd04 	addi	sp,sp,-12
 10053e4:	dfc00215 	stw	ra,8(sp)
 10053e8:	df000115 	stw	fp,4(sp)
 10053ec:	df000104 	addi	fp,sp,4
 10053f0:	e13fff15 	stw	r4,-4(fp)
 10053f4:	00c040b4 	movhi	r3,258
 10053f8:	18d88804 	addi	r3,r3,25120
 10053fc:	e0bfff17 	ldw	r2,-4(fp)
 1005400:	10c00015 	stw	r3,0(r2)
 1005404:	e13fff17 	ldw	r4,-4(fp)
 1005408:	10005200 	call	1000520 <_ZN14ARCapExceptionD2Ev>
 100540c:	0005883a 	mov	r2,zero
 1005410:	10803fcc 	andi	r2,r2,255
 1005414:	1005003a 	cmpeq	r2,r2,zero
 1005418:	1000021e 	bne	r2,zero,1005424 <_ZN18SemCreateExceptionD1Ev+0x44>
 100541c:	e13fff17 	ldw	r4,-4(fp)
 1005420:	100d8100 	call	100d810 <_ZdlPv>
 1005424:	e037883a 	mov	sp,fp
 1005428:	dfc00117 	ldw	ra,4(sp)
 100542c:	df000017 	ldw	fp,0(sp)
 1005430:	dec00204 	addi	sp,sp,8
 1005434:	f800283a 	ret

01005438 <main>:
WifiHandler *wifi;
NetworkSender *networkOut;
NetworkReceiver *networkIn;

/* The main function registers the infrared tasks and starts multi-tasking */
int main(void) {
 1005438:	deffc304 	addi	sp,sp,-244
 100543c:	dfc03c15 	stw	ra,240(sp)
 1005440:	df003b15 	stw	fp,236(sp)
 1005444:	ddc03a15 	stw	r23,232(sp)
 1005448:	dd803915 	stw	r22,228(sp)
 100544c:	dd403815 	stw	r21,224(sp)
 1005450:	dd003715 	stw	r20,220(sp)
 1005454:	dcc03615 	stw	r19,216(sp)
 1005458:	dc803515 	stw	r18,212(sp)
 100545c:	dc403415 	stw	r17,208(sp)
 1005460:	dc003315 	stw	r16,204(sp)
 1005464:	df003304 	addi	fp,sp,204
 1005468:	00804074 	movhi	r2,257
 100546c:	10b41004 	addi	r2,r2,-12224
 1005470:	e0bfd915 	stw	r2,-156(fp)
 1005474:	008040b4 	movhi	r2,258
 1005478:	10960c04 	addi	r2,r2,22576
 100547c:	e0bfda15 	stw	r2,-152(fp)
 1005480:	e0bfdb04 	addi	r2,fp,-148
 1005484:	e0ffd204 	addi	r3,fp,-184
 1005488:	10c00015 	stw	r3,0(r2)
 100548c:	00c04034 	movhi	r3,256
 1005490:	18d66b04 	addi	r3,r3,22956
 1005494:	10c00115 	stw	r3,4(r2)
 1005498:	16c00215 	stw	sp,8(r2)
 100549c:	e13fd304 	addi	r4,fp,-180
 10054a0:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
			TASK1_PRIORITY,
			TASK1_PRIORITY,
			task1_stk,
			TASK_STACKSIZE,
			0,
			0);
 10054a4:	00800044 	movi	r2,1
 10054a8:	d8800015 	stw	r2,0(sp)
 10054ac:	008040f4 	movhi	r2,259
 10054b0:	10a43204 	addi	r2,r2,-28472
 10054b4:	d8800115 	stw	r2,4(sp)
 10054b8:	00820004 	movi	r2,2048
 10054bc:	d8800215 	stw	r2,8(sp)
 10054c0:	d8000315 	stw	zero,12(sp)
 10054c4:	d8000415 	stw	zero,16(sp)
 10054c8:	00bfffc4 	movi	r2,-1
 10054cc:	e0bfd415 	stw	r2,-176(fp)
 10054d0:	01004034 	movhi	r4,256
 10054d4:	21143b04 	addi	r4,r4,20716
 10054d8:	000b883a 	mov	r5,zero
 10054dc:	018040f4 	movhi	r6,259
 10054e0:	31ac3104 	addi	r6,r6,-20284
 10054e4:	01c00044 	movi	r7,1
 10054e8:	10201440 	call	1020144 <OSTaskCreateExt>
			TASK2_PRIORITY,
			TASK2_PRIORITY,
			task2_stk,
			TASK_STACKSIZE,
			0,
			0);
 10054ec:	00800084 	movi	r2,2
 10054f0:	d8800015 	stw	r2,0(sp)
 10054f4:	008040f4 	movhi	r2,259
 10054f8:	10ac3204 	addi	r2,r2,-20280
 10054fc:	d8800115 	stw	r2,4(sp)
 1005500:	00820004 	movi	r2,2048
 1005504:	d8800215 	stw	r2,8(sp)
 1005508:	d8000315 	stw	zero,12(sp)
 100550c:	d8000415 	stw	zero,16(sp)
 1005510:	01004034 	movhi	r4,256
 1005514:	2113ea04 	addi	r4,r4,20392
 1005518:	000b883a 	mov	r5,zero
 100551c:	018040f4 	movhi	r6,259
 1005520:	31b43104 	addi	r6,r6,-12092
 1005524:	01c00084 	movi	r7,2
 1005528:	10201440 	call	1020144 <OSTaskCreateExt>
			TASK3_PRIORITY,
			TASK3_PRIORITY,
			task3_stk,
			TASK_STACKSIZE,
			0,
			0);
 100552c:	008000c4 	movi	r2,3
 1005530:	d8800015 	stw	r2,0(sp)
 1005534:	008040f4 	movhi	r2,259
 1005538:	10b43204 	addi	r2,r2,-12088
 100553c:	d8800115 	stw	r2,4(sp)
 1005540:	00820004 	movi	r2,2048
 1005544:	d8800215 	stw	r2,8(sp)
 1005548:	d8000315 	stw	zero,12(sp)
 100554c:	d8000415 	stw	zero,16(sp)
 1005550:	01004034 	movhi	r4,256
 1005554:	21101504 	addi	r4,r4,16468
 1005558:	000b883a 	mov	r5,zero
 100555c:	018040f4 	movhi	r6,259
 1005560:	31bc3104 	addi	r6,r6,-3900
 1005564:	01c000c4 	movi	r7,3
 1005568:	10201440 	call	1020144 <OSTaskCreateExt>
			TASK4_PRIORITY,
			TASK4_PRIORITY,
			task4_stk,
			TASK_STACKSIZE,
			0,
			0);
 100556c:	00800104 	movi	r2,4
 1005570:	d8800015 	stw	r2,0(sp)
 1005574:	008040f4 	movhi	r2,259
 1005578:	10bc3204 	addi	r2,r2,-3896
 100557c:	d8800115 	stw	r2,4(sp)
 1005580:	00820004 	movi	r2,2048
 1005584:	d8800215 	stw	r2,8(sp)
 1005588:	d8000315 	stw	zero,12(sp)
 100558c:	d8000415 	stw	zero,16(sp)
 1005590:	01004034 	movhi	r4,256
 1005594:	21025704 	addi	r4,r4,2396
 1005598:	000b883a 	mov	r5,zero
 100559c:	018040f4 	movhi	r6,259
 10055a0:	31843104 	addi	r6,r6,4292
 10055a4:	01c00104 	movi	r7,4
 10055a8:	10201440 	call	1020144 <OSTaskCreateExt>
			TASK5_PRIORITY,
			TASK5_PRIORITY,
			task5_stk,
			TASK_STACKSIZE,
			0,
			0);
 10055ac:	00800144 	movi	r2,5
 10055b0:	d8800015 	stw	r2,0(sp)
 10055b4:	008040f4 	movhi	r2,259
 10055b8:	10843204 	addi	r2,r2,4296
 10055bc:	d8800115 	stw	r2,4(sp)
 10055c0:	00820004 	movi	r2,2048
 10055c4:	d8800215 	stw	r2,8(sp)
 10055c8:	d8000315 	stw	zero,12(sp)
 10055cc:	d8000415 	stw	zero,16(sp)
 10055d0:	01004034 	movhi	r4,256
 10055d4:	21068704 	addi	r4,r4,6684
 10055d8:	000b883a 	mov	r5,zero
 10055dc:	018040f4 	movhi	r6,259
 10055e0:	318c3104 	addi	r6,r6,12484
 10055e4:	01c00144 	movi	r7,5
 10055e8:	10201440 	call	1020144 <OSTaskCreateExt>
			TASK6_PRIORITY,
			TASK6_PRIORITY,
			task6_stk,
			TASK_STACKSIZE,
			0,
			0);
 10055ec:	00800184 	movi	r2,6
 10055f0:	d8800015 	stw	r2,0(sp)
 10055f4:	008040f4 	movhi	r2,259
 10055f8:	108c3204 	addi	r2,r2,12488
 10055fc:	d8800115 	stw	r2,4(sp)
 1005600:	00820004 	movi	r2,2048
 1005604:	d8800215 	stw	r2,8(sp)
 1005608:	d8000315 	stw	zero,12(sp)
 100560c:	d8000415 	stw	zero,16(sp)
 1005610:	01004034 	movhi	r4,256
 1005614:	2107ea04 	addi	r4,r4,8104
 1005618:	000b883a 	mov	r5,zero
 100561c:	018040f4 	movhi	r6,259
 1005620:	31943104 	addi	r6,r6,20676
 1005624:	01c00184 	movi	r7,6
 1005628:	10201440 	call	1020144 <OSTaskCreateExt>
			TASK7_PRIORITY,
			TASK7_PRIORITY,
			task7_stk,
			TASK_STACKSIZE,
			NULL,
			0);
 100562c:	008001c4 	movi	r2,7
 1005630:	d8800015 	stw	r2,0(sp)
 1005634:	008040f4 	movhi	r2,259
 1005638:	10943204 	addi	r2,r2,20680
 100563c:	d8800115 	stw	r2,4(sp)
 1005640:	00820004 	movi	r2,2048
 1005644:	d8800215 	stw	r2,8(sp)
 1005648:	d8000315 	stw	zero,12(sp)
 100564c:	d8000415 	stw	zero,16(sp)
 1005650:	01004034 	movhi	r4,256
 1005654:	2100be04 	addi	r4,r4,760
 1005658:	000b883a 	mov	r5,zero
 100565c:	018040f4 	movhi	r6,259
 1005660:	319c3104 	addi	r6,r6,28868
 1005664:	01c001c4 	movi	r7,7
 1005668:	10201440 	call	1020144 <OSTaskCreateExt>

	try {
		// Create handlers.
		infraredIn = new InfraredReceiver();
 100566c:	00800204 	movi	r2,8
 1005670:	e0bfd415 	stw	r2,-176(fp)
 1005674:	01000204 	movi	r4,8
 1005678:	100dda00 	call	100dda0 <_Znwm>
 100567c:	e0bffb15 	stw	r2,-20(fp)
 1005680:	008001c4 	movi	r2,7
 1005684:	e0bfd415 	stw	r2,-176(fp)
 1005688:	e13ffb17 	ldw	r4,-20(fp)
 100568c:	10001d80 	call	10001d8 <_ZN16InfraredReceiverC1Ev>
 1005690:	e0bffb17 	ldw	r2,-20(fp)
 1005694:	d0a09515 	stw	r2,-32172(gp)
		infraredOut = new InfraredSender();
 1005698:	00800204 	movi	r2,8
 100569c:	e0bfd415 	stw	r2,-176(fp)
 10056a0:	01000604 	movi	r4,24
 10056a4:	100dda00 	call	100dda0 <_Znwm>
 10056a8:	e0bff915 	stw	r2,-28(fp)
 10056ac:	00000b06 	br	10056dc <main+0x2a4>
 10056b0:	e0fffd17 	ldw	r3,-12(fp)
 10056b4:	e0ffeb15 	stw	r3,-84(fp)
 10056b8:	e0bffe17 	ldw	r2,-8(fp)
 10056bc:	e0bfec15 	stw	r2,-80(fp)
			NULL,
			0);

	try {
		// Create handlers.
		infraredIn = new InfraredReceiver();
 10056c0:	e13ffb17 	ldw	r4,-20(fp)
 10056c4:	100d8100 	call	100d810 <_ZdlPv>
 10056c8:	e0ffec17 	ldw	r3,-80(fp)
 10056cc:	e0fffe15 	stw	r3,-8(fp)
 10056d0:	e0bfeb17 	ldw	r2,-84(fp)
 10056d4:	e0bffd15 	stw	r2,-12(fp)
 10056d8:	00009b06 	br	1005948 <main+0x510>
		infraredOut = new InfraredSender();
 10056dc:	e0fff917 	ldw	r3,-28(fp)
 10056e0:	e0fffa15 	stw	r3,-24(fp)
 10056e4:	00800184 	movi	r2,6
 10056e8:	e0bfd415 	stw	r2,-176(fp)
 10056ec:	e13ffa17 	ldw	r4,-24(fp)
 10056f0:	10008c40 	call	10008c4 <_ZN14InfraredSenderC1Ev>
 10056f4:	e0bffa17 	ldw	r2,-24(fp)
 10056f8:	d0a09615 	stw	r2,-32168(gp)
		motor = new MotorHandler();
 10056fc:	00800204 	movi	r2,8
 1005700:	e0bfd415 	stw	r2,-176(fp)
 1005704:	01000704 	movi	r4,28
 1005708:	100dda00 	call	100dda0 <_Znwm>
 100570c:	e0bff715 	stw	r2,-36(fp)
 1005710:	00000b06 	br	1005740 <main+0x308>
 1005714:	e0fffd17 	ldw	r3,-12(fp)
 1005718:	e0ffe915 	stw	r3,-92(fp)
 100571c:	e0bffe17 	ldw	r2,-8(fp)
 1005720:	e0bfea15 	stw	r2,-88(fp)
			0);

	try {
		// Create handlers.
		infraredIn = new InfraredReceiver();
		infraredOut = new InfraredSender();
 1005724:	e13ffa17 	ldw	r4,-24(fp)
 1005728:	100d8100 	call	100d810 <_ZdlPv>
 100572c:	e0ffea17 	ldw	r3,-88(fp)
 1005730:	e0fffe15 	stw	r3,-8(fp)
 1005734:	e0bfe917 	ldw	r2,-92(fp)
 1005738:	e0bffd15 	stw	r2,-12(fp)
 100573c:	00008206 	br	1005948 <main+0x510>
		motor = new MotorHandler();
 1005740:	e0fff717 	ldw	r3,-36(fp)
 1005744:	e0fff815 	stw	r3,-32(fp)
 1005748:	00800144 	movi	r2,5
 100574c:	e0bfd415 	stw	r2,-176(fp)
 1005750:	e13ff817 	ldw	r4,-32(fp)
 1005754:	10017140 	call	1001714 <_ZN12MotorHandlerC1Ev>
 1005758:	e0bff817 	ldw	r2,-32(fp)
 100575c:	d0a09715 	stw	r2,-32164(gp)
		wifi = new WifiHandler();
 1005760:	00800204 	movi	r2,8
 1005764:	e0bfd415 	stw	r2,-176(fp)
 1005768:	01000304 	movi	r4,12
 100576c:	100dda00 	call	100dda0 <_Znwm>
 1005770:	e0bff515 	stw	r2,-44(fp)
 1005774:	00000b06 	br	10057a4 <main+0x36c>
 1005778:	e0fffd17 	ldw	r3,-12(fp)
 100577c:	e0ffe715 	stw	r3,-100(fp)
 1005780:	e0bffe17 	ldw	r2,-8(fp)
 1005784:	e0bfe815 	stw	r2,-96(fp)

	try {
		// Create handlers.
		infraredIn = new InfraredReceiver();
		infraredOut = new InfraredSender();
		motor = new MotorHandler();
 1005788:	e13ff817 	ldw	r4,-32(fp)
 100578c:	100d8100 	call	100d810 <_ZdlPv>
 1005790:	e0ffe817 	ldw	r3,-96(fp)
 1005794:	e0fffe15 	stw	r3,-8(fp)
 1005798:	e0bfe717 	ldw	r2,-100(fp)
 100579c:	e0bffd15 	stw	r2,-12(fp)
 10057a0:	00006906 	br	1005948 <main+0x510>
		wifi = new WifiHandler();
 10057a4:	e0fff517 	ldw	r3,-44(fp)
 10057a8:	e0fff615 	stw	r3,-40(fp)
 10057ac:	00800104 	movi	r2,4
 10057b0:	e0bfd415 	stw	r2,-176(fp)
 10057b4:	e13ff617 	ldw	r4,-40(fp)
 10057b8:	10051280 	call	1005128 <_ZN11WifiHandlerC1Ev>
 10057bc:	e0bff617 	ldw	r2,-40(fp)
 10057c0:	d0a09815 	stw	r2,-32160(gp)
		networkOut = new NetworkSender(wifi);
 10057c4:	00800204 	movi	r2,8
 10057c8:	e0bfd415 	stw	r2,-176(fp)
 10057cc:	01000704 	movi	r4,28
 10057d0:	100dda00 	call	100dda0 <_Znwm>
 10057d4:	e0bff315 	stw	r2,-52(fp)
 10057d8:	00000b06 	br	1005808 <main+0x3d0>
 10057dc:	e0fffd17 	ldw	r3,-12(fp)
 10057e0:	e0ffe515 	stw	r3,-108(fp)
 10057e4:	e0bffe17 	ldw	r2,-8(fp)
 10057e8:	e0bfe615 	stw	r2,-104(fp)
	try {
		// Create handlers.
		infraredIn = new InfraredReceiver();
		infraredOut = new InfraredSender();
		motor = new MotorHandler();
		wifi = new WifiHandler();
 10057ec:	e13ff617 	ldw	r4,-40(fp)
 10057f0:	100d8100 	call	100d810 <_ZdlPv>
 10057f4:	e0ffe617 	ldw	r3,-104(fp)
 10057f8:	e0fffe15 	stw	r3,-8(fp)
 10057fc:	e0bfe517 	ldw	r2,-108(fp)
 1005800:	e0bffd15 	stw	r2,-12(fp)
 1005804:	00005006 	br	1005948 <main+0x510>
		networkOut = new NetworkSender(wifi);
 1005808:	e0fff317 	ldw	r3,-52(fp)
 100580c:	e0fff415 	stw	r3,-48(fp)
 1005810:	d1609817 	ldw	r5,-32160(gp)
 1005814:	008000c4 	movi	r2,3
 1005818:	e0bfd415 	stw	r2,-176(fp)
 100581c:	e13ff417 	ldw	r4,-48(fp)
 1005820:	1003fb40 	call	1003fb4 <_ZN13NetworkSenderC1EP11WifiHandler>
 1005824:	e0bff417 	ldw	r2,-48(fp)
 1005828:	d0a09915 	stw	r2,-32156(gp)
		networkIn = new NetworkReceiver(wifi);
 100582c:	00800204 	movi	r2,8
 1005830:	e0bfd415 	stw	r2,-176(fp)
 1005834:	01000704 	movi	r4,28
 1005838:	100dda00 	call	100dda0 <_Znwm>
 100583c:	e0bff115 	stw	r2,-60(fp)
 1005840:	00000b06 	br	1005870 <main+0x438>
 1005844:	e0fffd17 	ldw	r3,-12(fp)
 1005848:	e0ffe315 	stw	r3,-116(fp)
 100584c:	e0bffe17 	ldw	r2,-8(fp)
 1005850:	e0bfe415 	stw	r2,-112(fp)
		// Create handlers.
		infraredIn = new InfraredReceiver();
		infraredOut = new InfraredSender();
		motor = new MotorHandler();
		wifi = new WifiHandler();
		networkOut = new NetworkSender(wifi);
 1005854:	e13ff417 	ldw	r4,-48(fp)
 1005858:	100d8100 	call	100d810 <_ZdlPv>
 100585c:	e0ffe417 	ldw	r3,-112(fp)
 1005860:	e0fffe15 	stw	r3,-8(fp)
 1005864:	e0bfe317 	ldw	r2,-116(fp)
 1005868:	e0bffd15 	stw	r2,-12(fp)
 100586c:	00003606 	br	1005948 <main+0x510>
		networkIn = new NetworkReceiver(wifi);
 1005870:	e0fff117 	ldw	r3,-60(fp)
 1005874:	e0fff215 	stw	r3,-56(fp)
 1005878:	d1609817 	ldw	r5,-32160(gp)
 100587c:	00800084 	movi	r2,2
 1005880:	e0bfd415 	stw	r2,-176(fp)
 1005884:	e13ff217 	ldw	r4,-56(fp)
 1005888:	1001e480 	call	1001e48 <_ZN15NetworkReceiverC1EP11WifiHandler>
 100588c:	e0bff217 	ldw	r2,-56(fp)
 1005890:	d0a09a15 	stw	r2,-32152(gp)
		TASK_LOG(printf("Main [initialize, status: OK]\n"));

		// Create the communications chain.
		infraredIn->setListener(networkOut->listener());
 1005894:	d0e09517 	ldw	r3,-32172(gp)
 1005898:	e0fff015 	stw	r3,-64(fp)
 100589c:	d0a09917 	ldw	r2,-32156(gp)
 10058a0:	1009883a 	mov	r4,r2
 10058a4:	00800204 	movi	r2,8
 10058a8:	e0bfd415 	stw	r2,-176(fp)
 10058ac:	1000bd00 	call	1000bd0 <_ZN8Listener8listenerEv>
 10058b0:	e0bfef15 	stw	r2,-68(fp)
 10058b4:	00000b06 	br	10058e4 <main+0x4ac>
 10058b8:	e0bffd17 	ldw	r2,-12(fp)
 10058bc:	e0bfe115 	stw	r2,-124(fp)
 10058c0:	e0fffe17 	ldw	r3,-8(fp)
 10058c4:	e0ffe215 	stw	r3,-120(fp)
		infraredIn = new InfraredReceiver();
		infraredOut = new InfraredSender();
		motor = new MotorHandler();
		wifi = new WifiHandler();
		networkOut = new NetworkSender(wifi);
		networkIn = new NetworkReceiver(wifi);
 10058c8:	e13ff217 	ldw	r4,-56(fp)
 10058cc:	100d8100 	call	100d810 <_ZdlPv>
 10058d0:	e0bfe217 	ldw	r2,-120(fp)
 10058d4:	e0bffe15 	stw	r2,-8(fp)
 10058d8:	e0ffe117 	ldw	r3,-124(fp)
 10058dc:	e0fffd15 	stw	r3,-12(fp)
 10058e0:	00001906 	br	1005948 <main+0x510>
		TASK_LOG(printf("Main [initialize, status: OK]\n"));

		// Create the communications chain.
		infraredIn->setListener(networkOut->listener());
 10058e4:	00800204 	movi	r2,8
 10058e8:	e0bfd415 	stw	r2,-176(fp)
 10058ec:	e13ff017 	ldw	r4,-64(fp)
 10058f0:	e17fef17 	ldw	r5,-68(fp)
 10058f4:	10000380 	call	1000038 <_ZN16InfraredReceiver11setListenerEP8os_event>
		networkIn->addListener(INFRARED_SENDER_COMMAND, infraredOut->listener());
 10058f8:	d0a09a17 	ldw	r2,-32152(gp)
 10058fc:	e0bfee15 	stw	r2,-72(fp)
 1005900:	d0a09617 	ldw	r2,-32168(gp)
 1005904:	1009883a 	mov	r4,r2
 1005908:	1000bd00 	call	1000bd0 <_ZN8Listener8listenerEv>
 100590c:	100d883a 	mov	r6,r2
 1005910:	e13fee17 	ldw	r4,-72(fp)
 1005914:	01401a44 	movi	r5,105
 1005918:	1001f580 	call	1001f58 <_ZN15NetworkReceiver11addListenerEcP8os_event>
		networkIn->addListener(MOTOR_COMMAND, motor->listener());
 100591c:	d0e09a17 	ldw	r3,-32152(gp)
 1005920:	e0ffed15 	stw	r3,-76(fp)
 1005924:	d0a09717 	ldw	r2,-32164(gp)
 1005928:	1009883a 	mov	r4,r2
 100592c:	1000bd00 	call	1000bd0 <_ZN8Listener8listenerEv>
 1005930:	100d883a 	mov	r6,r2
 1005934:	e13fed17 	ldw	r4,-76(fp)
 1005938:	01401b44 	movi	r5,109
 100593c:	1001f580 	call	1001f58 <_ZN15NetworkReceiver11addListenerEcP8os_event>

		// Start.
		OSStart();
 1005940:	101a36c0 	call	101a36c <OSStart>
 1005944:	00003f06 	br	1005a44 <main+0x60c>
 1005948:	e0fffd17 	ldw	r3,-12(fp)
 100594c:	18800060 	cmpeqi	r2,r3,1
 1005950:	1000041e 	bne	r2,zero,1005964 <main+0x52c>
 1005954:	00bfffc4 	movi	r2,-1
 1005958:	e0bfd415 	stw	r2,-176(fp)
 100595c:	e13ffe17 	ldw	r4,-8(fp)
 1005960:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>

	} catch (ARCapException &e) {
 1005964:	e13ffe17 	ldw	r4,-8(fp)
 1005968:	100d6f80 	call	100d6f8 <__cxa_begin_catch>
 100596c:	e0bfd215 	stw	r2,-184(fp)
		printf("%s", e.what());
 1005970:	e0bfd217 	ldw	r2,-184(fp)
 1005974:	10800017 	ldw	r2,0(r2)
 1005978:	10800204 	addi	r2,r2,8
 100597c:	10800017 	ldw	r2,0(r2)
 1005980:	e13fd217 	ldw	r4,-184(fp)
 1005984:	103ee83a 	callr	r2
 1005988:	100b883a 	mov	r5,r2
 100598c:	00800044 	movi	r2,1
 1005990:	e0bfd415 	stw	r2,-176(fp)
 1005994:	010040b4 	movhi	r4,258
 1005998:	21188b04 	addi	r4,r4,25132
 100599c:	100ef640 	call	100ef64 <printf>
		networkIn->addListener(MOTOR_COMMAND, motor->listener());

		// Start.
		OSStart();

	} catch (ARCapException &e) {
 10059a0:	e03fd415 	stw	zero,-176(fp)
 10059a4:	100d6540 	call	100d654 <__cxa_end_catch>
 10059a8:	00002606 	br	1005a44 <main+0x60c>
 10059ac:	e7002e04 	addi	fp,fp,184
 10059b0:	e0bfd417 	ldw	r2,-176(fp)
 10059b4:	e0bfff15 	stw	r2,-4(fp)
 10059b8:	e0ffd517 	ldw	r3,-172(fp)
 10059bc:	e0fffe15 	stw	r3,-8(fp)
 10059c0:	e0bfd617 	ldw	r2,-168(fp)
 10059c4:	e0bffd15 	stw	r2,-12(fp)
 10059c8:	e0ffff17 	ldw	r3,-4(fp)
 10059cc:	18800060 	cmpeqi	r2,r3,1
 10059d0:	103fb91e 	bne	r2,zero,10058b8 <main+0x480>
 10059d4:	e0ffff17 	ldw	r3,-4(fp)
 10059d8:	188000a0 	cmpeqi	r2,r3,2
 10059dc:	103f991e 	bne	r2,zero,1005844 <main+0x40c>
 10059e0:	e0ffff17 	ldw	r3,-4(fp)
 10059e4:	188000e0 	cmpeqi	r2,r3,3
 10059e8:	103f7c1e 	bne	r2,zero,10057dc <main+0x3a4>
 10059ec:	e0ffff17 	ldw	r3,-4(fp)
 10059f0:	18800120 	cmpeqi	r2,r3,4
 10059f4:	103f601e 	bne	r2,zero,1005778 <main+0x340>
 10059f8:	e0ffff17 	ldw	r3,-4(fp)
 10059fc:	18800160 	cmpeqi	r2,r3,5
 1005a00:	103f441e 	bne	r2,zero,1005714 <main+0x2dc>
 1005a04:	e0ffff17 	ldw	r3,-4(fp)
 1005a08:	188001a0 	cmpeqi	r2,r3,6
 1005a0c:	103f281e 	bne	r2,zero,10056b0 <main+0x278>
 1005a10:	e0ffff17 	ldw	r3,-4(fp)
 1005a14:	188001e0 	cmpeqi	r2,r3,7
 1005a18:	103fcb1e 	bne	r2,zero,1005948 <main+0x510>
 1005a1c:	e0bffe17 	ldw	r2,-8(fp)
 1005a20:	e0bfe015 	stw	r2,-128(fp)
 1005a24:	e03fd415 	stw	zero,-176(fp)
 1005a28:	100d6540 	call	100d654 <__cxa_end_catch>
 1005a2c:	e0ffe017 	ldw	r3,-128(fp)
 1005a30:	e0fffe15 	stw	r3,-8(fp)
 1005a34:	00bfffc4 	movi	r2,-1
 1005a38:	e0bfd415 	stw	r2,-176(fp)
 1005a3c:	e13ffe17 	ldw	r4,-8(fp)
 1005a40:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
		printf("%s", e.what());
	}

	return 0;
 1005a44:	0005883a 	mov	r2,zero
 1005a48:	e0bffc15 	stw	r2,-16(fp)
 1005a4c:	e13fd304 	addi	r4,fp,-180
 1005a50:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
}
 1005a54:	e0bffc17 	ldw	r2,-16(fp)
 1005a58:	e037883a 	mov	sp,fp
 1005a5c:	dfc00917 	ldw	ra,36(sp)
 1005a60:	df000817 	ldw	fp,32(sp)
 1005a64:	ddc00717 	ldw	r23,28(sp)
 1005a68:	dd800617 	ldw	r22,24(sp)
 1005a6c:	dd400517 	ldw	r21,20(sp)
 1005a70:	dd000417 	ldw	r20,16(sp)
 1005a74:	dcc00317 	ldw	r19,12(sp)
 1005a78:	dc800217 	ldw	r18,8(sp)
 1005a7c:	dc400117 	ldw	r17,4(sp)
 1005a80:	dc000017 	ldw	r16,0(sp)
 1005a84:	dec00a04 	addi	sp,sp,40
 1005a88:	f800283a 	ret

01005a8c <_ZSt18__throw_bad_typeidv>:
 1005a8c:	deffff04 	addi	sp,sp,-4
 1005a90:	01000104 	movi	r4,4
 1005a94:	dfc00015 	stw	ra,0(sp)
 1005a98:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1005a9c:	1009883a 	mov	r4,r2
 1005aa0:	008040b4 	movhi	r2,258
 1005aa4:	109a8804 	addi	r2,r2,27168
 1005aa8:	20800015 	stw	r2,0(r4)
 1005aac:	014040b4 	movhi	r5,258
 1005ab0:	295a8f04 	addi	r5,r5,27196
 1005ab4:	01804074 	movhi	r6,257
 1005ab8:	31b66604 	addi	r6,r6,-9832
 1005abc:	100d8900 	call	100d890 <__cxa_throw>

01005ac0 <_ZSt16__throw_bad_castv>:
 1005ac0:	deffff04 	addi	sp,sp,-4
 1005ac4:	01000104 	movi	r4,4
 1005ac8:	dfc00015 	stw	ra,0(sp)
 1005acc:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1005ad0:	1009883a 	mov	r4,r2
 1005ad4:	008040b4 	movhi	r2,258
 1005ad8:	109ab804 	addi	r2,r2,27360
 1005adc:	20800015 	stw	r2,0(r4)
 1005ae0:	014040b4 	movhi	r5,258
 1005ae4:	295abe04 	addi	r5,r5,27384
 1005ae8:	01804074 	movhi	r6,257
 1005aec:	31b76004 	addi	r6,r6,-8832
 1005af0:	100d8900 	call	100d890 <__cxa_throw>

01005af4 <_ZSt17__throw_bad_allocv>:
 1005af4:	deffff04 	addi	sp,sp,-4
 1005af8:	01000104 	movi	r4,4
 1005afc:	dfc00015 	stw	ra,0(sp)
 1005b00:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1005b04:	1009883a 	mov	r4,r2
 1005b08:	008040b4 	movhi	r2,258
 1005b0c:	10997f04 	addi	r2,r2,26108
 1005b10:	20800015 	stw	r2,0(r4)
 1005b14:	014040b4 	movhi	r5,258
 1005b18:	29598604 	addi	r5,r5,26136
 1005b1c:	01804074 	movhi	r6,257
 1005b20:	31af2104 	addi	r6,r6,-17276
 1005b24:	100d8900 	call	100d890 <__cxa_throw>

01005b28 <_ZSt21__throw_bad_exceptionv>:
 1005b28:	deffff04 	addi	sp,sp,-4
 1005b2c:	01000104 	movi	r4,4
 1005b30:	dfc00015 	stw	ra,0(sp)
 1005b34:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1005b38:	1009883a 	mov	r4,r2
 1005b3c:	008040b4 	movhi	r2,258
 1005b40:	10996904 	addi	r2,r2,26020
 1005b44:	20800015 	stw	r2,0(r4)
 1005b48:	014040b4 	movhi	r5,258
 1005b4c:	29597604 	addi	r5,r5,26072
 1005b50:	01804074 	movhi	r6,257
 1005b54:	31af0904 	addi	r6,r6,-17372
 1005b58:	100d8900 	call	100d890 <__cxa_throw>

01005b5c <_ZSt19__throw_ios_failurePKc>:
 1005b5c:	deffeb04 	addi	sp,sp,-84
 1005b60:	00804074 	movhi	r2,257
 1005b64:	10b41004 	addi	r2,r2,-12224
 1005b68:	d8800815 	stw	r2,32(sp)
 1005b6c:	00c040b4 	movhi	r3,258
 1005b70:	18d61404 	addi	r3,r3,22608
 1005b74:	00804034 	movhi	r2,256
 1005b78:	10970e04 	addi	r2,r2,23608
 1005b7c:	d9001115 	stw	r4,68(sp)
 1005b80:	d9000204 	addi	r4,sp,8
 1005b84:	d8800b15 	stw	r2,44(sp)
 1005b88:	dfc01415 	stw	ra,80(sp)
 1005b8c:	df001315 	stw	fp,76(sp)
 1005b90:	ddc01215 	stw	r23,72(sp)
 1005b94:	d8c00915 	stw	r3,36(sp)
 1005b98:	dec00a15 	stw	sp,40(sp)
 1005b9c:	dec00c15 	stw	sp,48(sp)
 1005ba0:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1005ba4:	00800084 	movi	r2,2
 1005ba8:	d8800315 	stw	r2,12(sp)
 1005bac:	d9401117 	ldw	r5,68(sp)
 1005bb0:	d9000104 	addi	r4,sp,4
 1005bb4:	d9800044 	addi	r6,sp,1
 1005bb8:	10098840 	call	1009884 <_ZNSsC1EPKcRKSaIcE>
 1005bbc:	01000204 	movi	r4,8
 1005bc0:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1005bc4:	1009883a 	mov	r4,r2
 1005bc8:	d9400104 	addi	r5,sp,4
 1005bcc:	d8801015 	stw	r2,64(sp)
 1005bd0:	1006d5c0 	call	1006d5c <_ZNSt8ios_base7failureC1ERKSs>
 1005bd4:	d8800117 	ldw	r2,4(sp)
 1005bd8:	00c040f4 	movhi	r3,259
 1005bdc:	18dc3204 	addi	r3,r3,28872
 1005be0:	10bffd04 	addi	r2,r2,-12
 1005be4:	d8800f15 	stw	r2,60(sp)
 1005be8:	10c0081e 	bne	r2,r3,1005c0c <_ZSt19__throw_ios_failurePKc+0xb0>
 1005bec:	d9001017 	ldw	r4,64(sp)
 1005bf0:	00bfffc4 	movi	r2,-1
 1005bf4:	014040b4 	movhi	r5,258
 1005bf8:	2958f204 	addi	r5,r5,25544
 1005bfc:	01804034 	movhi	r6,256
 1005c00:	319b1604 	addi	r6,r6,27736
 1005c04:	d8800315 	stw	r2,12(sp)
 1005c08:	100d8900 	call	100d890 <__cxa_throw>
 1005c0c:	00800044 	movi	r2,1
 1005c10:	d8800315 	stw	r2,12(sp)
 1005c14:	d8800f17 	ldw	r2,60(sp)
 1005c18:	017fffc4 	movi	r5,-1
 1005c1c:	11000204 	addi	r4,r2,8
 1005c20:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005c24:	00bff116 	blt	zero,r2,1005bec <_ZSt19__throw_ios_failurePKc+0x90>
 1005c28:	d9000f17 	ldw	r4,60(sp)
 1005c2c:	d80b883a 	mov	r5,sp
 1005c30:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005c34:	003fed06 	br	1005bec <_ZSt19__throw_ios_failurePKc+0x90>
 1005c38:	d8c00317 	ldw	r3,12(sp)
 1005c3c:	00800044 	movi	r2,1
 1005c40:	d9000417 	ldw	r4,16(sp)
 1005c44:	d9400517 	ldw	r5,20(sp)
 1005c48:	18800226 	beq	r3,r2,1005c54 <_ZSt19__throw_ios_failurePKc+0xf8>
 1005c4c:	00bfffc4 	movi	r2,-1
 1005c50:	28800326 	beq	r5,r2,1005c60 <_ZSt19__throw_ios_failurePKc+0x104>
 1005c54:	00bfffc4 	movi	r2,-1
 1005c58:	d8800315 	stw	r2,12(sp)
 1005c5c:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1005c60:	100d5ec0 	call	100d5ec <_ZSt9terminatev>

01005c64 <_ZSt19__throw_logic_errorPKc>:
 1005c64:	deffe704 	addi	sp,sp,-100
 1005c68:	00804074 	movhi	r2,257
 1005c6c:	10b41004 	addi	r2,r2,-12224
 1005c70:	d8800815 	stw	r2,32(sp)
 1005c74:	00c040b4 	movhi	r3,258
 1005c78:	18d61904 	addi	r3,r3,22628
 1005c7c:	00804034 	movhi	r2,256
 1005c80:	10975404 	addi	r2,r2,23888
 1005c84:	d9001315 	stw	r4,76(sp)
 1005c88:	d9000204 	addi	r4,sp,8
 1005c8c:	d8800b15 	stw	r2,44(sp)
 1005c90:	dfc01815 	stw	ra,96(sp)
 1005c94:	df001715 	stw	fp,92(sp)
 1005c98:	ddc01615 	stw	r23,88(sp)
 1005c9c:	d8c00915 	stw	r3,36(sp)
 1005ca0:	dec00a15 	stw	sp,40(sp)
 1005ca4:	dec00c15 	stw	sp,48(sp)
 1005ca8:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1005cac:	00800104 	movi	r2,4
 1005cb0:	d8800315 	stw	r2,12(sp)
 1005cb4:	d885883a 	add	r2,sp,r2
 1005cb8:	d8801415 	stw	r2,80(sp)
 1005cbc:	d9401317 	ldw	r5,76(sp)
 1005cc0:	1009883a 	mov	r4,r2
 1005cc4:	d9800084 	addi	r6,sp,2
 1005cc8:	10098840 	call	1009884 <_ZNSsC1EPKcRKSaIcE>
 1005ccc:	01000204 	movi	r4,8
 1005cd0:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1005cd4:	d8801215 	stw	r2,72(sp)
 1005cd8:	008000c4 	movi	r2,3
 1005cdc:	d8800315 	stw	r2,12(sp)
 1005ce0:	d9401417 	ldw	r5,80(sp)
 1005ce4:	d9001217 	ldw	r4,72(sp)
 1005ce8:	10073e80 	call	10073e8 <_ZNSt11logic_errorC1ERKSs>
 1005cec:	d8800117 	ldw	r2,4(sp)
 1005cf0:	00c040f4 	movhi	r3,259
 1005cf4:	18dc3204 	addi	r3,r3,28872
 1005cf8:	10bffd04 	addi	r2,r2,-12
 1005cfc:	d8800f15 	stw	r2,60(sp)
 1005d00:	10c0081e 	bne	r2,r3,1005d24 <_ZSt19__throw_logic_errorPKc+0xc0>
 1005d04:	d9001217 	ldw	r4,72(sp)
 1005d08:	00bfffc4 	movi	r2,-1
 1005d0c:	014040b4 	movhi	r5,258
 1005d10:	29590b04 	addi	r5,r5,25644
 1005d14:	01804034 	movhi	r6,256
 1005d18:	319c4504 	addi	r6,r6,28948
 1005d1c:	d8800315 	stw	r2,12(sp)
 1005d20:	100d8900 	call	100d890 <__cxa_throw>
 1005d24:	00800044 	movi	r2,1
 1005d28:	d8800315 	stw	r2,12(sp)
 1005d2c:	d8800f17 	ldw	r2,60(sp)
 1005d30:	017fffc4 	movi	r5,-1
 1005d34:	11000204 	addi	r4,r2,8
 1005d38:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005d3c:	00bff116 	blt	zero,r2,1005d04 <_ZSt19__throw_logic_errorPKc+0xa0>
 1005d40:	d9000f17 	ldw	r4,60(sp)
 1005d44:	d80b883a 	mov	r5,sp
 1005d48:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005d4c:	003fed06 	br	1005d04 <_ZSt19__throw_logic_errorPKc+0xa0>
 1005d50:	d8800417 	ldw	r2,16(sp)
 1005d54:	d8c00317 	ldw	r3,12(sp)
 1005d58:	d9000517 	ldw	r4,20(sp)
 1005d5c:	d8801515 	stw	r2,84(sp)
 1005d60:	00800044 	movi	r2,1
 1005d64:	18800426 	beq	r3,r2,1005d78 <_ZSt19__throw_logic_errorPKc+0x114>
 1005d68:	00800084 	movi	r2,2
 1005d6c:	18800826 	beq	r3,r2,1005d90 <_ZSt19__throw_logic_errorPKc+0x12c>
 1005d70:	008000c4 	movi	r2,3
 1005d74:	18800226 	beq	r3,r2,1005d80 <_ZSt19__throw_logic_errorPKc+0x11c>
 1005d78:	00bfffc4 	movi	r2,-1
 1005d7c:	20801126 	beq	r4,r2,1005dc4 <_ZSt19__throw_logic_errorPKc+0x160>
 1005d80:	d9001517 	ldw	r4,84(sp)
 1005d84:	00bfffc4 	movi	r2,-1
 1005d88:	d8800315 	stw	r2,12(sp)
 1005d8c:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1005d90:	d9001217 	ldw	r4,72(sp)
 1005d94:	100dbd80 	call	100dbd8 <__cxa_free_exception>
 1005d98:	d8801517 	ldw	r2,84(sp)
 1005d9c:	00c040f4 	movhi	r3,259
 1005da0:	18dc3204 	addi	r3,r3,28872
 1005da4:	d8801115 	stw	r2,68(sp)
 1005da8:	d8800117 	ldw	r2,4(sp)
 1005dac:	10bffd04 	addi	r2,r2,-12
 1005db0:	d8801015 	stw	r2,64(sp)
 1005db4:	10c0041e 	bne	r2,r3,1005dc8 <_ZSt19__throw_logic_errorPKc+0x164>
 1005db8:	d8801117 	ldw	r2,68(sp)
 1005dbc:	d8801515 	stw	r2,84(sp)
 1005dc0:	003fef06 	br	1005d80 <_ZSt19__throw_logic_errorPKc+0x11c>
 1005dc4:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 1005dc8:	00800084 	movi	r2,2
 1005dcc:	d8800315 	stw	r2,12(sp)
 1005dd0:	d8801017 	ldw	r2,64(sp)
 1005dd4:	017fffc4 	movi	r5,-1
 1005dd8:	11000204 	addi	r4,r2,8
 1005ddc:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005de0:	00bff516 	blt	zero,r2,1005db8 <_ZSt19__throw_logic_errorPKc+0x154>
 1005de4:	d9001017 	ldw	r4,64(sp)
 1005de8:	d9400044 	addi	r5,sp,1
 1005dec:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005df0:	003ff106 	br	1005db8 <_ZSt19__throw_logic_errorPKc+0x154>

01005df4 <_ZSt23__throw_underflow_errorPKc>:
 1005df4:	deffe704 	addi	sp,sp,-100
 1005df8:	00804074 	movhi	r2,257
 1005dfc:	10b41004 	addi	r2,r2,-12224
 1005e00:	d8800815 	stw	r2,32(sp)
 1005e04:	00c040b4 	movhi	r3,258
 1005e08:	18d61f04 	addi	r3,r3,22652
 1005e0c:	00804034 	movhi	r2,256
 1005e10:	1097b804 	addi	r2,r2,24288
 1005e14:	d9001315 	stw	r4,76(sp)
 1005e18:	d9000204 	addi	r4,sp,8
 1005e1c:	d8800b15 	stw	r2,44(sp)
 1005e20:	dfc01815 	stw	ra,96(sp)
 1005e24:	df001715 	stw	fp,92(sp)
 1005e28:	ddc01615 	stw	r23,88(sp)
 1005e2c:	d8c00915 	stw	r3,36(sp)
 1005e30:	dec00a15 	stw	sp,40(sp)
 1005e34:	dec00c15 	stw	sp,48(sp)
 1005e38:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1005e3c:	00800104 	movi	r2,4
 1005e40:	d8800315 	stw	r2,12(sp)
 1005e44:	d885883a 	add	r2,sp,r2
 1005e48:	d8801415 	stw	r2,80(sp)
 1005e4c:	d9401317 	ldw	r5,76(sp)
 1005e50:	1009883a 	mov	r4,r2
 1005e54:	d9800084 	addi	r6,sp,2
 1005e58:	10098840 	call	1009884 <_ZNSsC1EPKcRKSaIcE>
 1005e5c:	01000204 	movi	r4,8
 1005e60:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1005e64:	d8801215 	stw	r2,72(sp)
 1005e68:	008000c4 	movi	r2,3
 1005e6c:	d8800315 	stw	r2,12(sp)
 1005e70:	d9401417 	ldw	r5,80(sp)
 1005e74:	d9001217 	ldw	r4,72(sp)
 1005e78:	10072c80 	call	10072c8 <_ZNSt15underflow_errorC1ERKSs>
 1005e7c:	d8800117 	ldw	r2,4(sp)
 1005e80:	00c040f4 	movhi	r3,259
 1005e84:	18dc3204 	addi	r3,r3,28872
 1005e88:	10bffd04 	addi	r2,r2,-12
 1005e8c:	d8800f15 	stw	r2,60(sp)
 1005e90:	10c0081e 	bne	r2,r3,1005eb4 <_ZSt23__throw_underflow_errorPKc+0xc0>
 1005e94:	d9001217 	ldw	r4,72(sp)
 1005e98:	00bfffc4 	movi	r2,-1
 1005e9c:	014040b4 	movhi	r5,258
 1005ea0:	29588c04 	addi	r5,r5,25136
 1005ea4:	01804034 	movhi	r6,256
 1005ea8:	319aaa04 	addi	r6,r6,27304
 1005eac:	d8800315 	stw	r2,12(sp)
 1005eb0:	100d8900 	call	100d890 <__cxa_throw>
 1005eb4:	00800044 	movi	r2,1
 1005eb8:	d8800315 	stw	r2,12(sp)
 1005ebc:	d8800f17 	ldw	r2,60(sp)
 1005ec0:	017fffc4 	movi	r5,-1
 1005ec4:	11000204 	addi	r4,r2,8
 1005ec8:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005ecc:	00bff116 	blt	zero,r2,1005e94 <_ZSt23__throw_underflow_errorPKc+0xa0>
 1005ed0:	d9000f17 	ldw	r4,60(sp)
 1005ed4:	d80b883a 	mov	r5,sp
 1005ed8:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005edc:	003fed06 	br	1005e94 <_ZSt23__throw_underflow_errorPKc+0xa0>
 1005ee0:	d8800417 	ldw	r2,16(sp)
 1005ee4:	d8c00317 	ldw	r3,12(sp)
 1005ee8:	d9000517 	ldw	r4,20(sp)
 1005eec:	d8801515 	stw	r2,84(sp)
 1005ef0:	00800044 	movi	r2,1
 1005ef4:	18800426 	beq	r3,r2,1005f08 <_ZSt23__throw_underflow_errorPKc+0x114>
 1005ef8:	00800084 	movi	r2,2
 1005efc:	18800826 	beq	r3,r2,1005f20 <_ZSt23__throw_underflow_errorPKc+0x12c>
 1005f00:	008000c4 	movi	r2,3
 1005f04:	18800226 	beq	r3,r2,1005f10 <_ZSt23__throw_underflow_errorPKc+0x11c>
 1005f08:	00bfffc4 	movi	r2,-1
 1005f0c:	20801126 	beq	r4,r2,1005f54 <_ZSt23__throw_underflow_errorPKc+0x160>
 1005f10:	d9001517 	ldw	r4,84(sp)
 1005f14:	00bfffc4 	movi	r2,-1
 1005f18:	d8800315 	stw	r2,12(sp)
 1005f1c:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1005f20:	d9001217 	ldw	r4,72(sp)
 1005f24:	100dbd80 	call	100dbd8 <__cxa_free_exception>
 1005f28:	d8801517 	ldw	r2,84(sp)
 1005f2c:	00c040f4 	movhi	r3,259
 1005f30:	18dc3204 	addi	r3,r3,28872
 1005f34:	d8801115 	stw	r2,68(sp)
 1005f38:	d8800117 	ldw	r2,4(sp)
 1005f3c:	10bffd04 	addi	r2,r2,-12
 1005f40:	d8801015 	stw	r2,64(sp)
 1005f44:	10c0041e 	bne	r2,r3,1005f58 <_ZSt23__throw_underflow_errorPKc+0x164>
 1005f48:	d8801117 	ldw	r2,68(sp)
 1005f4c:	d8801515 	stw	r2,84(sp)
 1005f50:	003fef06 	br	1005f10 <_ZSt23__throw_underflow_errorPKc+0x11c>
 1005f54:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 1005f58:	00800084 	movi	r2,2
 1005f5c:	d8800315 	stw	r2,12(sp)
 1005f60:	d8801017 	ldw	r2,64(sp)
 1005f64:	017fffc4 	movi	r5,-1
 1005f68:	11000204 	addi	r4,r2,8
 1005f6c:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005f70:	00bff516 	blt	zero,r2,1005f48 <_ZSt23__throw_underflow_errorPKc+0x154>
 1005f74:	d9001017 	ldw	r4,64(sp)
 1005f78:	d9400044 	addi	r5,sp,1
 1005f7c:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005f80:	003ff106 	br	1005f48 <_ZSt23__throw_underflow_errorPKc+0x154>

01005f84 <_ZSt22__throw_overflow_errorPKc>:
 1005f84:	deffe704 	addi	sp,sp,-100
 1005f88:	00804074 	movhi	r2,257
 1005f8c:	10b41004 	addi	r2,r2,-12224
 1005f90:	d8800815 	stw	r2,32(sp)
 1005f94:	00c040b4 	movhi	r3,258
 1005f98:	18d62504 	addi	r3,r3,22676
 1005f9c:	00804034 	movhi	r2,256
 1005fa0:	10981c04 	addi	r2,r2,24688
 1005fa4:	d9001315 	stw	r4,76(sp)
 1005fa8:	d9000204 	addi	r4,sp,8
 1005fac:	d8800b15 	stw	r2,44(sp)
 1005fb0:	dfc01815 	stw	ra,96(sp)
 1005fb4:	df001715 	stw	fp,92(sp)
 1005fb8:	ddc01615 	stw	r23,88(sp)
 1005fbc:	d8c00915 	stw	r3,36(sp)
 1005fc0:	dec00a15 	stw	sp,40(sp)
 1005fc4:	dec00c15 	stw	sp,48(sp)
 1005fc8:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1005fcc:	00800104 	movi	r2,4
 1005fd0:	d8800315 	stw	r2,12(sp)
 1005fd4:	d885883a 	add	r2,sp,r2
 1005fd8:	d8801415 	stw	r2,80(sp)
 1005fdc:	d9401317 	ldw	r5,76(sp)
 1005fe0:	1009883a 	mov	r4,r2
 1005fe4:	d9800084 	addi	r6,sp,2
 1005fe8:	10098840 	call	1009884 <_ZNSsC1EPKcRKSaIcE>
 1005fec:	01000204 	movi	r4,8
 1005ff0:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1005ff4:	d8801215 	stw	r2,72(sp)
 1005ff8:	008000c4 	movi	r2,3
 1005ffc:	d8800315 	stw	r2,12(sp)
 1006000:	d9401417 	ldw	r5,80(sp)
 1006004:	d9001217 	ldw	r4,72(sp)
 1006008:	10073280 	call	1007328 <_ZNSt14overflow_errorC1ERKSs>
 100600c:	d8800117 	ldw	r2,4(sp)
 1006010:	00c040f4 	movhi	r3,259
 1006014:	18dc3204 	addi	r3,r3,28872
 1006018:	10bffd04 	addi	r2,r2,-12
 100601c:	d8800f15 	stw	r2,60(sp)
 1006020:	10c0081e 	bne	r2,r3,1006044 <_ZSt22__throw_overflow_errorPKc+0xc0>
 1006024:	d9001217 	ldw	r4,72(sp)
 1006028:	00bfffc4 	movi	r2,-1
 100602c:	014040b4 	movhi	r5,258
 1006030:	29589904 	addi	r5,r5,25188
 1006034:	01804034 	movhi	r6,256
 1006038:	319abb04 	addi	r6,r6,27372
 100603c:	d8800315 	stw	r2,12(sp)
 1006040:	100d8900 	call	100d890 <__cxa_throw>
 1006044:	00800044 	movi	r2,1
 1006048:	d8800315 	stw	r2,12(sp)
 100604c:	d8800f17 	ldw	r2,60(sp)
 1006050:	017fffc4 	movi	r5,-1
 1006054:	11000204 	addi	r4,r2,8
 1006058:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100605c:	00bff116 	blt	zero,r2,1006024 <_ZSt22__throw_overflow_errorPKc+0xa0>
 1006060:	d9000f17 	ldw	r4,60(sp)
 1006064:	d80b883a 	mov	r5,sp
 1006068:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100606c:	003fed06 	br	1006024 <_ZSt22__throw_overflow_errorPKc+0xa0>
 1006070:	d8800417 	ldw	r2,16(sp)
 1006074:	d8c00317 	ldw	r3,12(sp)
 1006078:	d9000517 	ldw	r4,20(sp)
 100607c:	d8801515 	stw	r2,84(sp)
 1006080:	00800044 	movi	r2,1
 1006084:	18800426 	beq	r3,r2,1006098 <_ZSt22__throw_overflow_errorPKc+0x114>
 1006088:	00800084 	movi	r2,2
 100608c:	18800826 	beq	r3,r2,10060b0 <_ZSt22__throw_overflow_errorPKc+0x12c>
 1006090:	008000c4 	movi	r2,3
 1006094:	18800226 	beq	r3,r2,10060a0 <_ZSt22__throw_overflow_errorPKc+0x11c>
 1006098:	00bfffc4 	movi	r2,-1
 100609c:	20801126 	beq	r4,r2,10060e4 <_ZSt22__throw_overflow_errorPKc+0x160>
 10060a0:	d9001517 	ldw	r4,84(sp)
 10060a4:	00bfffc4 	movi	r2,-1
 10060a8:	d8800315 	stw	r2,12(sp)
 10060ac:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 10060b0:	d9001217 	ldw	r4,72(sp)
 10060b4:	100dbd80 	call	100dbd8 <__cxa_free_exception>
 10060b8:	d8801517 	ldw	r2,84(sp)
 10060bc:	00c040f4 	movhi	r3,259
 10060c0:	18dc3204 	addi	r3,r3,28872
 10060c4:	d8801115 	stw	r2,68(sp)
 10060c8:	d8800117 	ldw	r2,4(sp)
 10060cc:	10bffd04 	addi	r2,r2,-12
 10060d0:	d8801015 	stw	r2,64(sp)
 10060d4:	10c0041e 	bne	r2,r3,10060e8 <_ZSt22__throw_overflow_errorPKc+0x164>
 10060d8:	d8801117 	ldw	r2,68(sp)
 10060dc:	d8801515 	stw	r2,84(sp)
 10060e0:	003fef06 	br	10060a0 <_ZSt22__throw_overflow_errorPKc+0x11c>
 10060e4:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 10060e8:	00800084 	movi	r2,2
 10060ec:	d8800315 	stw	r2,12(sp)
 10060f0:	d8801017 	ldw	r2,64(sp)
 10060f4:	017fffc4 	movi	r5,-1
 10060f8:	11000204 	addi	r4,r2,8
 10060fc:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006100:	00bff516 	blt	zero,r2,10060d8 <_ZSt22__throw_overflow_errorPKc+0x154>
 1006104:	d9001017 	ldw	r4,64(sp)
 1006108:	d9400044 	addi	r5,sp,1
 100610c:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006110:	003ff106 	br	10060d8 <_ZSt22__throw_overflow_errorPKc+0x154>

01006114 <_ZSt24__throw_invalid_argumentPKc>:
 1006114:	deffe704 	addi	sp,sp,-100
 1006118:	00804074 	movhi	r2,257
 100611c:	10b41004 	addi	r2,r2,-12224
 1006120:	d8800815 	stw	r2,32(sp)
 1006124:	00c040b4 	movhi	r3,258
 1006128:	18d62b04 	addi	r3,r3,22700
 100612c:	00804034 	movhi	r2,256
 1006130:	10988004 	addi	r2,r2,25088
 1006134:	d9001315 	stw	r4,76(sp)
 1006138:	d9000204 	addi	r4,sp,8
 100613c:	d8800b15 	stw	r2,44(sp)
 1006140:	dfc01815 	stw	ra,96(sp)
 1006144:	df001715 	stw	fp,92(sp)
 1006148:	ddc01615 	stw	r23,88(sp)
 100614c:	d8c00915 	stw	r3,36(sp)
 1006150:	dec00a15 	stw	sp,40(sp)
 1006154:	dec00c15 	stw	sp,48(sp)
 1006158:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100615c:	00800104 	movi	r2,4
 1006160:	d8800315 	stw	r2,12(sp)
 1006164:	d885883a 	add	r2,sp,r2
 1006168:	d8801415 	stw	r2,80(sp)
 100616c:	d9401317 	ldw	r5,76(sp)
 1006170:	1009883a 	mov	r4,r2
 1006174:	d9800084 	addi	r6,sp,2
 1006178:	10098840 	call	1009884 <_ZNSsC1EPKcRKSaIcE>
 100617c:	01000204 	movi	r4,8
 1006180:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1006184:	d8801215 	stw	r2,72(sp)
 1006188:	008000c4 	movi	r2,3
 100618c:	d8800315 	stw	r2,12(sp)
 1006190:	d9401417 	ldw	r5,80(sp)
 1006194:	d9001217 	ldw	r4,72(sp)
 1006198:	10076080 	call	1007608 <_ZNSt16invalid_argumentC1ERKSs>
 100619c:	d8800117 	ldw	r2,4(sp)
 10061a0:	00c040f4 	movhi	r3,259
 10061a4:	18dc3204 	addi	r3,r3,28872
 10061a8:	10bffd04 	addi	r2,r2,-12
 10061ac:	d8800f15 	stw	r2,60(sp)
 10061b0:	10c0081e 	bne	r2,r3,10061d4 <_ZSt24__throw_invalid_argumentPKc+0xc0>
 10061b4:	d9001217 	ldw	r4,72(sp)
 10061b8:	00bfffc4 	movi	r2,-1
 10061bc:	014040b4 	movhi	r5,258
 10061c0:	2958cc04 	addi	r5,r5,25392
 10061c4:	01804034 	movhi	r6,256
 10061c8:	319aff04 	addi	r6,r6,27644
 10061cc:	d8800315 	stw	r2,12(sp)
 10061d0:	100d8900 	call	100d890 <__cxa_throw>
 10061d4:	00800044 	movi	r2,1
 10061d8:	d8800315 	stw	r2,12(sp)
 10061dc:	d8800f17 	ldw	r2,60(sp)
 10061e0:	017fffc4 	movi	r5,-1
 10061e4:	11000204 	addi	r4,r2,8
 10061e8:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10061ec:	00bff116 	blt	zero,r2,10061b4 <_ZSt24__throw_invalid_argumentPKc+0xa0>
 10061f0:	d9000f17 	ldw	r4,60(sp)
 10061f4:	d80b883a 	mov	r5,sp
 10061f8:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10061fc:	003fed06 	br	10061b4 <_ZSt24__throw_invalid_argumentPKc+0xa0>
 1006200:	d8800417 	ldw	r2,16(sp)
 1006204:	d8c00317 	ldw	r3,12(sp)
 1006208:	d9000517 	ldw	r4,20(sp)
 100620c:	d8801515 	stw	r2,84(sp)
 1006210:	00800044 	movi	r2,1
 1006214:	18800426 	beq	r3,r2,1006228 <_ZSt24__throw_invalid_argumentPKc+0x114>
 1006218:	00800084 	movi	r2,2
 100621c:	18800826 	beq	r3,r2,1006240 <_ZSt24__throw_invalid_argumentPKc+0x12c>
 1006220:	008000c4 	movi	r2,3
 1006224:	18800226 	beq	r3,r2,1006230 <_ZSt24__throw_invalid_argumentPKc+0x11c>
 1006228:	00bfffc4 	movi	r2,-1
 100622c:	20801126 	beq	r4,r2,1006274 <_ZSt24__throw_invalid_argumentPKc+0x160>
 1006230:	d9001517 	ldw	r4,84(sp)
 1006234:	00bfffc4 	movi	r2,-1
 1006238:	d8800315 	stw	r2,12(sp)
 100623c:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1006240:	d9001217 	ldw	r4,72(sp)
 1006244:	100dbd80 	call	100dbd8 <__cxa_free_exception>
 1006248:	d8801517 	ldw	r2,84(sp)
 100624c:	00c040f4 	movhi	r3,259
 1006250:	18dc3204 	addi	r3,r3,28872
 1006254:	d8801115 	stw	r2,68(sp)
 1006258:	d8800117 	ldw	r2,4(sp)
 100625c:	10bffd04 	addi	r2,r2,-12
 1006260:	d8801015 	stw	r2,64(sp)
 1006264:	10c0041e 	bne	r2,r3,1006278 <_ZSt24__throw_invalid_argumentPKc+0x164>
 1006268:	d8801117 	ldw	r2,68(sp)
 100626c:	d8801515 	stw	r2,84(sp)
 1006270:	003fef06 	br	1006230 <_ZSt24__throw_invalid_argumentPKc+0x11c>
 1006274:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 1006278:	00800084 	movi	r2,2
 100627c:	d8800315 	stw	r2,12(sp)
 1006280:	d8801017 	ldw	r2,64(sp)
 1006284:	017fffc4 	movi	r5,-1
 1006288:	11000204 	addi	r4,r2,8
 100628c:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006290:	00bff516 	blt	zero,r2,1006268 <_ZSt24__throw_invalid_argumentPKc+0x154>
 1006294:	d9001017 	ldw	r4,64(sp)
 1006298:	d9400044 	addi	r5,sp,1
 100629c:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10062a0:	003ff106 	br	1006268 <_ZSt24__throw_invalid_argumentPKc+0x154>

010062a4 <_ZSt20__throw_domain_errorPKc>:
 10062a4:	deffe704 	addi	sp,sp,-100
 10062a8:	00804074 	movhi	r2,257
 10062ac:	10b41004 	addi	r2,r2,-12224
 10062b0:	d8800815 	stw	r2,32(sp)
 10062b4:	00c040b4 	movhi	r3,258
 10062b8:	18d63104 	addi	r3,r3,22724
 10062bc:	00804034 	movhi	r2,256
 10062c0:	1098e404 	addi	r2,r2,25488
 10062c4:	d9001315 	stw	r4,76(sp)
 10062c8:	d9000204 	addi	r4,sp,8
 10062cc:	d8800b15 	stw	r2,44(sp)
 10062d0:	dfc01815 	stw	ra,96(sp)
 10062d4:	df001715 	stw	fp,92(sp)
 10062d8:	ddc01615 	stw	r23,88(sp)
 10062dc:	d8c00915 	stw	r3,36(sp)
 10062e0:	dec00a15 	stw	sp,40(sp)
 10062e4:	dec00c15 	stw	sp,48(sp)
 10062e8:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 10062ec:	00800104 	movi	r2,4
 10062f0:	d8800315 	stw	r2,12(sp)
 10062f4:	d885883a 	add	r2,sp,r2
 10062f8:	d8801415 	stw	r2,80(sp)
 10062fc:	d9401317 	ldw	r5,76(sp)
 1006300:	1009883a 	mov	r4,r2
 1006304:	d9800084 	addi	r6,sp,2
 1006308:	10098840 	call	1009884 <_ZNSsC1EPKcRKSaIcE>
 100630c:	01000204 	movi	r4,8
 1006310:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1006314:	d8801215 	stw	r2,72(sp)
 1006318:	008000c4 	movi	r2,3
 100631c:	d8800315 	stw	r2,12(sp)
 1006320:	d9401417 	ldw	r5,80(sp)
 1006324:	d9001217 	ldw	r4,72(sp)
 1006328:	10076680 	call	1007668 <_ZNSt12domain_errorC1ERKSs>
 100632c:	d8800117 	ldw	r2,4(sp)
 1006330:	00c040f4 	movhi	r3,259
 1006334:	18dc3204 	addi	r3,r3,28872
 1006338:	10bffd04 	addi	r2,r2,-12
 100633c:	d8800f15 	stw	r2,60(sp)
 1006340:	10c0081e 	bne	r2,r3,1006364 <_ZSt20__throw_domain_errorPKc+0xc0>
 1006344:	d9001217 	ldw	r4,72(sp)
 1006348:	00bfffc4 	movi	r2,-1
 100634c:	014040b4 	movhi	r5,258
 1006350:	2958da04 	addi	r5,r5,25448
 1006354:	01804034 	movhi	r6,256
 1006358:	319b1004 	addi	r6,r6,27712
 100635c:	d8800315 	stw	r2,12(sp)
 1006360:	100d8900 	call	100d890 <__cxa_throw>
 1006364:	00800044 	movi	r2,1
 1006368:	d8800315 	stw	r2,12(sp)
 100636c:	d8800f17 	ldw	r2,60(sp)
 1006370:	017fffc4 	movi	r5,-1
 1006374:	11000204 	addi	r4,r2,8
 1006378:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100637c:	00bff116 	blt	zero,r2,1006344 <_ZSt20__throw_domain_errorPKc+0xa0>
 1006380:	d9000f17 	ldw	r4,60(sp)
 1006384:	d80b883a 	mov	r5,sp
 1006388:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100638c:	003fed06 	br	1006344 <_ZSt20__throw_domain_errorPKc+0xa0>
 1006390:	d8800417 	ldw	r2,16(sp)
 1006394:	d8c00317 	ldw	r3,12(sp)
 1006398:	d9000517 	ldw	r4,20(sp)
 100639c:	d8801515 	stw	r2,84(sp)
 10063a0:	00800044 	movi	r2,1
 10063a4:	18800426 	beq	r3,r2,10063b8 <_ZSt20__throw_domain_errorPKc+0x114>
 10063a8:	00800084 	movi	r2,2
 10063ac:	18800826 	beq	r3,r2,10063d0 <_ZSt20__throw_domain_errorPKc+0x12c>
 10063b0:	008000c4 	movi	r2,3
 10063b4:	18800226 	beq	r3,r2,10063c0 <_ZSt20__throw_domain_errorPKc+0x11c>
 10063b8:	00bfffc4 	movi	r2,-1
 10063bc:	20801126 	beq	r4,r2,1006404 <_ZSt20__throw_domain_errorPKc+0x160>
 10063c0:	d9001517 	ldw	r4,84(sp)
 10063c4:	00bfffc4 	movi	r2,-1
 10063c8:	d8800315 	stw	r2,12(sp)
 10063cc:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 10063d0:	d9001217 	ldw	r4,72(sp)
 10063d4:	100dbd80 	call	100dbd8 <__cxa_free_exception>
 10063d8:	d8801517 	ldw	r2,84(sp)
 10063dc:	00c040f4 	movhi	r3,259
 10063e0:	18dc3204 	addi	r3,r3,28872
 10063e4:	d8801115 	stw	r2,68(sp)
 10063e8:	d8800117 	ldw	r2,4(sp)
 10063ec:	10bffd04 	addi	r2,r2,-12
 10063f0:	d8801015 	stw	r2,64(sp)
 10063f4:	10c0041e 	bne	r2,r3,1006408 <_ZSt20__throw_domain_errorPKc+0x164>
 10063f8:	d8801117 	ldw	r2,68(sp)
 10063fc:	d8801515 	stw	r2,84(sp)
 1006400:	003fef06 	br	10063c0 <_ZSt20__throw_domain_errorPKc+0x11c>
 1006404:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 1006408:	00800084 	movi	r2,2
 100640c:	d8800315 	stw	r2,12(sp)
 1006410:	d8801017 	ldw	r2,64(sp)
 1006414:	017fffc4 	movi	r5,-1
 1006418:	11000204 	addi	r4,r2,8
 100641c:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006420:	00bff516 	blt	zero,r2,10063f8 <_ZSt20__throw_domain_errorPKc+0x154>
 1006424:	d9001017 	ldw	r4,64(sp)
 1006428:	d9400044 	addi	r5,sp,1
 100642c:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006430:	003ff106 	br	10063f8 <_ZSt20__throw_domain_errorPKc+0x154>

01006434 <_ZSt19__throw_range_errorPKc>:
 1006434:	deffe704 	addi	sp,sp,-100
 1006438:	00804074 	movhi	r2,257
 100643c:	10b41004 	addi	r2,r2,-12224
 1006440:	d8800815 	stw	r2,32(sp)
 1006444:	00c040b4 	movhi	r3,258
 1006448:	18d63704 	addi	r3,r3,22748
 100644c:	00804034 	movhi	r2,256
 1006450:	10994804 	addi	r2,r2,25888
 1006454:	d9001315 	stw	r4,76(sp)
 1006458:	d9000204 	addi	r4,sp,8
 100645c:	d8800b15 	stw	r2,44(sp)
 1006460:	dfc01815 	stw	ra,96(sp)
 1006464:	df001715 	stw	fp,92(sp)
 1006468:	ddc01615 	stw	r23,88(sp)
 100646c:	d8c00915 	stw	r3,36(sp)
 1006470:	dec00a15 	stw	sp,40(sp)
 1006474:	dec00c15 	stw	sp,48(sp)
 1006478:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100647c:	00800104 	movi	r2,4
 1006480:	d8800315 	stw	r2,12(sp)
 1006484:	d885883a 	add	r2,sp,r2
 1006488:	d8801415 	stw	r2,80(sp)
 100648c:	d9401317 	ldw	r5,76(sp)
 1006490:	1009883a 	mov	r4,r2
 1006494:	d9800084 	addi	r6,sp,2
 1006498:	10098840 	call	1009884 <_ZNSsC1EPKcRKSaIcE>
 100649c:	01000204 	movi	r4,8
 10064a0:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 10064a4:	d8801215 	stw	r2,72(sp)
 10064a8:	008000c4 	movi	r2,3
 10064ac:	d8800315 	stw	r2,12(sp)
 10064b0:	d9401417 	ldw	r5,80(sp)
 10064b4:	d9001217 	ldw	r4,72(sp)
 10064b8:	10073880 	call	1007388 <_ZNSt11range_errorC1ERKSs>
 10064bc:	d8800117 	ldw	r2,4(sp)
 10064c0:	00c040f4 	movhi	r3,259
 10064c4:	18dc3204 	addi	r3,r3,28872
 10064c8:	10bffd04 	addi	r2,r2,-12
 10064cc:	d8800f15 	stw	r2,60(sp)
 10064d0:	10c0081e 	bne	r2,r3,10064f4 <_ZSt19__throw_range_errorPKc+0xc0>
 10064d4:	d9001217 	ldw	r4,72(sp)
 10064d8:	00bfffc4 	movi	r2,-1
 10064dc:	014040b4 	movhi	r5,258
 10064e0:	2958a604 	addi	r5,r5,25240
 10064e4:	01804034 	movhi	r6,256
 10064e8:	319acc04 	addi	r6,r6,27440
 10064ec:	d8800315 	stw	r2,12(sp)
 10064f0:	100d8900 	call	100d890 <__cxa_throw>
 10064f4:	00800044 	movi	r2,1
 10064f8:	d8800315 	stw	r2,12(sp)
 10064fc:	d8800f17 	ldw	r2,60(sp)
 1006500:	017fffc4 	movi	r5,-1
 1006504:	11000204 	addi	r4,r2,8
 1006508:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100650c:	00bff116 	blt	zero,r2,10064d4 <_ZSt19__throw_range_errorPKc+0xa0>
 1006510:	d9000f17 	ldw	r4,60(sp)
 1006514:	d80b883a 	mov	r5,sp
 1006518:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100651c:	003fed06 	br	10064d4 <_ZSt19__throw_range_errorPKc+0xa0>
 1006520:	d8800417 	ldw	r2,16(sp)
 1006524:	d8c00317 	ldw	r3,12(sp)
 1006528:	d9000517 	ldw	r4,20(sp)
 100652c:	d8801515 	stw	r2,84(sp)
 1006530:	00800044 	movi	r2,1
 1006534:	18800426 	beq	r3,r2,1006548 <_ZSt19__throw_range_errorPKc+0x114>
 1006538:	00800084 	movi	r2,2
 100653c:	18800826 	beq	r3,r2,1006560 <_ZSt19__throw_range_errorPKc+0x12c>
 1006540:	008000c4 	movi	r2,3
 1006544:	18800226 	beq	r3,r2,1006550 <_ZSt19__throw_range_errorPKc+0x11c>
 1006548:	00bfffc4 	movi	r2,-1
 100654c:	20801126 	beq	r4,r2,1006594 <_ZSt19__throw_range_errorPKc+0x160>
 1006550:	d9001517 	ldw	r4,84(sp)
 1006554:	00bfffc4 	movi	r2,-1
 1006558:	d8800315 	stw	r2,12(sp)
 100655c:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1006560:	d9001217 	ldw	r4,72(sp)
 1006564:	100dbd80 	call	100dbd8 <__cxa_free_exception>
 1006568:	d8801517 	ldw	r2,84(sp)
 100656c:	00c040f4 	movhi	r3,259
 1006570:	18dc3204 	addi	r3,r3,28872
 1006574:	d8801115 	stw	r2,68(sp)
 1006578:	d8800117 	ldw	r2,4(sp)
 100657c:	10bffd04 	addi	r2,r2,-12
 1006580:	d8801015 	stw	r2,64(sp)
 1006584:	10c0041e 	bne	r2,r3,1006598 <_ZSt19__throw_range_errorPKc+0x164>
 1006588:	d8801117 	ldw	r2,68(sp)
 100658c:	d8801515 	stw	r2,84(sp)
 1006590:	003fef06 	br	1006550 <_ZSt19__throw_range_errorPKc+0x11c>
 1006594:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 1006598:	00800084 	movi	r2,2
 100659c:	d8800315 	stw	r2,12(sp)
 10065a0:	d8801017 	ldw	r2,64(sp)
 10065a4:	017fffc4 	movi	r5,-1
 10065a8:	11000204 	addi	r4,r2,8
 10065ac:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10065b0:	00bff516 	blt	zero,r2,1006588 <_ZSt19__throw_range_errorPKc+0x154>
 10065b4:	d9001017 	ldw	r4,64(sp)
 10065b8:	d9400044 	addi	r5,sp,1
 10065bc:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10065c0:	003ff106 	br	1006588 <_ZSt19__throw_range_errorPKc+0x154>

010065c4 <_ZSt21__throw_runtime_errorPKc>:
 10065c4:	deffe704 	addi	sp,sp,-100
 10065c8:	00804074 	movhi	r2,257
 10065cc:	10b41004 	addi	r2,r2,-12224
 10065d0:	d8800815 	stw	r2,32(sp)
 10065d4:	00c040b4 	movhi	r3,258
 10065d8:	18d63d04 	addi	r3,r3,22772
 10065dc:	00804034 	movhi	r2,256
 10065e0:	1099ac04 	addi	r2,r2,26288
 10065e4:	d9001315 	stw	r4,76(sp)
 10065e8:	d9000204 	addi	r4,sp,8
 10065ec:	d8800b15 	stw	r2,44(sp)
 10065f0:	dfc01815 	stw	ra,96(sp)
 10065f4:	df001715 	stw	fp,92(sp)
 10065f8:	ddc01615 	stw	r23,88(sp)
 10065fc:	d8c00915 	stw	r3,36(sp)
 1006600:	dec00a15 	stw	sp,40(sp)
 1006604:	dec00c15 	stw	sp,48(sp)
 1006608:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100660c:	00800104 	movi	r2,4
 1006610:	d8800315 	stw	r2,12(sp)
 1006614:	d885883a 	add	r2,sp,r2
 1006618:	d8801415 	stw	r2,80(sp)
 100661c:	d9401317 	ldw	r5,76(sp)
 1006620:	1009883a 	mov	r4,r2
 1006624:	d9800084 	addi	r6,sp,2
 1006628:	10098840 	call	1009884 <_ZNSsC1EPKcRKSaIcE>
 100662c:	01000204 	movi	r4,8
 1006630:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1006634:	d8801215 	stw	r2,72(sp)
 1006638:	008000c4 	movi	r2,3
 100663c:	d8800315 	stw	r2,12(sp)
 1006640:	d9401417 	ldw	r5,80(sp)
 1006644:	d9001217 	ldw	r4,72(sp)
 1006648:	10076d00 	call	10076d0 <_ZNSt13runtime_errorC1ERKSs>
 100664c:	d8800117 	ldw	r2,4(sp)
 1006650:	00c040f4 	movhi	r3,259
 1006654:	18dc3204 	addi	r3,r3,28872
 1006658:	10bffd04 	addi	r2,r2,-12
 100665c:	d8800f15 	stw	r2,60(sp)
 1006660:	10c0081e 	bne	r2,r3,1006684 <_ZSt21__throw_runtime_errorPKc+0xc0>
 1006664:	d9001217 	ldw	r4,72(sp)
 1006668:	00bfffc4 	movi	r2,-1
 100666c:	014040b4 	movhi	r5,258
 1006670:	29590404 	addi	r5,r5,25616
 1006674:	01804034 	movhi	r6,256
 1006678:	319de004 	addi	r6,r6,30592
 100667c:	d8800315 	stw	r2,12(sp)
 1006680:	100d8900 	call	100d890 <__cxa_throw>
 1006684:	00800044 	movi	r2,1
 1006688:	d8800315 	stw	r2,12(sp)
 100668c:	d8800f17 	ldw	r2,60(sp)
 1006690:	017fffc4 	movi	r5,-1
 1006694:	11000204 	addi	r4,r2,8
 1006698:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100669c:	00bff116 	blt	zero,r2,1006664 <_ZSt21__throw_runtime_errorPKc+0xa0>
 10066a0:	d9000f17 	ldw	r4,60(sp)
 10066a4:	d80b883a 	mov	r5,sp
 10066a8:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10066ac:	003fed06 	br	1006664 <_ZSt21__throw_runtime_errorPKc+0xa0>
 10066b0:	d8800417 	ldw	r2,16(sp)
 10066b4:	d8c00317 	ldw	r3,12(sp)
 10066b8:	d9000517 	ldw	r4,20(sp)
 10066bc:	d8801515 	stw	r2,84(sp)
 10066c0:	00800044 	movi	r2,1
 10066c4:	18800426 	beq	r3,r2,10066d8 <_ZSt21__throw_runtime_errorPKc+0x114>
 10066c8:	00800084 	movi	r2,2
 10066cc:	18800826 	beq	r3,r2,10066f0 <_ZSt21__throw_runtime_errorPKc+0x12c>
 10066d0:	008000c4 	movi	r2,3
 10066d4:	18800226 	beq	r3,r2,10066e0 <_ZSt21__throw_runtime_errorPKc+0x11c>
 10066d8:	00bfffc4 	movi	r2,-1
 10066dc:	20801126 	beq	r4,r2,1006724 <_ZSt21__throw_runtime_errorPKc+0x160>
 10066e0:	d9001517 	ldw	r4,84(sp)
 10066e4:	00bfffc4 	movi	r2,-1
 10066e8:	d8800315 	stw	r2,12(sp)
 10066ec:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 10066f0:	d9001217 	ldw	r4,72(sp)
 10066f4:	100dbd80 	call	100dbd8 <__cxa_free_exception>
 10066f8:	d8801517 	ldw	r2,84(sp)
 10066fc:	00c040f4 	movhi	r3,259
 1006700:	18dc3204 	addi	r3,r3,28872
 1006704:	d8801115 	stw	r2,68(sp)
 1006708:	d8800117 	ldw	r2,4(sp)
 100670c:	10bffd04 	addi	r2,r2,-12
 1006710:	d8801015 	stw	r2,64(sp)
 1006714:	10c0041e 	bne	r2,r3,1006728 <_ZSt21__throw_runtime_errorPKc+0x164>
 1006718:	d8801117 	ldw	r2,68(sp)
 100671c:	d8801515 	stw	r2,84(sp)
 1006720:	003fef06 	br	10066e0 <_ZSt21__throw_runtime_errorPKc+0x11c>
 1006724:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 1006728:	00800084 	movi	r2,2
 100672c:	d8800315 	stw	r2,12(sp)
 1006730:	d8801017 	ldw	r2,64(sp)
 1006734:	017fffc4 	movi	r5,-1
 1006738:	11000204 	addi	r4,r2,8
 100673c:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006740:	00bff516 	blt	zero,r2,1006718 <_ZSt21__throw_runtime_errorPKc+0x154>
 1006744:	d9001017 	ldw	r4,64(sp)
 1006748:	d9400044 	addi	r5,sp,1
 100674c:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006750:	003ff106 	br	1006718 <_ZSt21__throw_runtime_errorPKc+0x154>

01006754 <_ZSt20__throw_out_of_rangePKc>:
 1006754:	deffe704 	addi	sp,sp,-100
 1006758:	00804074 	movhi	r2,257
 100675c:	10b41004 	addi	r2,r2,-12224
 1006760:	d8800815 	stw	r2,32(sp)
 1006764:	00c040b4 	movhi	r3,258
 1006768:	18d64304 	addi	r3,r3,22796
 100676c:	00804034 	movhi	r2,256
 1006770:	109a1004 	addi	r2,r2,26688
 1006774:	d9001315 	stw	r4,76(sp)
 1006778:	d9000204 	addi	r4,sp,8
 100677c:	d8800b15 	stw	r2,44(sp)
 1006780:	dfc01815 	stw	ra,96(sp)
 1006784:	df001715 	stw	fp,92(sp)
 1006788:	ddc01615 	stw	r23,88(sp)
 100678c:	d8c00915 	stw	r3,36(sp)
 1006790:	dec00a15 	stw	sp,40(sp)
 1006794:	dec00c15 	stw	sp,48(sp)
 1006798:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100679c:	00800104 	movi	r2,4
 10067a0:	d8800315 	stw	r2,12(sp)
 10067a4:	d885883a 	add	r2,sp,r2
 10067a8:	d8801415 	stw	r2,80(sp)
 10067ac:	d9401317 	ldw	r5,76(sp)
 10067b0:	1009883a 	mov	r4,r2
 10067b4:	d9800084 	addi	r6,sp,2
 10067b8:	10098840 	call	1009884 <_ZNSsC1EPKcRKSaIcE>
 10067bc:	01000204 	movi	r4,8
 10067c0:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 10067c4:	d8801215 	stw	r2,72(sp)
 10067c8:	008000c4 	movi	r2,3
 10067cc:	d8800315 	stw	r2,12(sp)
 10067d0:	d9401417 	ldw	r5,80(sp)
 10067d4:	d9001217 	ldw	r4,72(sp)
 10067d8:	10075480 	call	1007548 <_ZNSt12out_of_rangeC1ERKSs>
 10067dc:	d8800117 	ldw	r2,4(sp)
 10067e0:	00c040f4 	movhi	r3,259
 10067e4:	18dc3204 	addi	r3,r3,28872
 10067e8:	10bffd04 	addi	r2,r2,-12
 10067ec:	d8800f15 	stw	r2,60(sp)
 10067f0:	10c0081e 	bne	r2,r3,1006814 <_ZSt20__throw_out_of_rangePKc+0xc0>
 10067f4:	d9001217 	ldw	r4,72(sp)
 10067f8:	00bfffc4 	movi	r2,-1
 10067fc:	014040b4 	movhi	r5,258
 1006800:	2958b204 	addi	r5,r5,25288
 1006804:	01804034 	movhi	r6,256
 1006808:	319add04 	addi	r6,r6,27508
 100680c:	d8800315 	stw	r2,12(sp)
 1006810:	100d8900 	call	100d890 <__cxa_throw>
 1006814:	00800044 	movi	r2,1
 1006818:	d8800315 	stw	r2,12(sp)
 100681c:	d8800f17 	ldw	r2,60(sp)
 1006820:	017fffc4 	movi	r5,-1
 1006824:	11000204 	addi	r4,r2,8
 1006828:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100682c:	00bff116 	blt	zero,r2,10067f4 <_ZSt20__throw_out_of_rangePKc+0xa0>
 1006830:	d9000f17 	ldw	r4,60(sp)
 1006834:	d80b883a 	mov	r5,sp
 1006838:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100683c:	003fed06 	br	10067f4 <_ZSt20__throw_out_of_rangePKc+0xa0>
 1006840:	d8800417 	ldw	r2,16(sp)
 1006844:	d8c00317 	ldw	r3,12(sp)
 1006848:	d9000517 	ldw	r4,20(sp)
 100684c:	d8801515 	stw	r2,84(sp)
 1006850:	00800044 	movi	r2,1
 1006854:	18800426 	beq	r3,r2,1006868 <_ZSt20__throw_out_of_rangePKc+0x114>
 1006858:	00800084 	movi	r2,2
 100685c:	18800826 	beq	r3,r2,1006880 <_ZSt20__throw_out_of_rangePKc+0x12c>
 1006860:	008000c4 	movi	r2,3
 1006864:	18800226 	beq	r3,r2,1006870 <_ZSt20__throw_out_of_rangePKc+0x11c>
 1006868:	00bfffc4 	movi	r2,-1
 100686c:	20801126 	beq	r4,r2,10068b4 <_ZSt20__throw_out_of_rangePKc+0x160>
 1006870:	d9001517 	ldw	r4,84(sp)
 1006874:	00bfffc4 	movi	r2,-1
 1006878:	d8800315 	stw	r2,12(sp)
 100687c:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1006880:	d9001217 	ldw	r4,72(sp)
 1006884:	100dbd80 	call	100dbd8 <__cxa_free_exception>
 1006888:	d8801517 	ldw	r2,84(sp)
 100688c:	00c040f4 	movhi	r3,259
 1006890:	18dc3204 	addi	r3,r3,28872
 1006894:	d8801115 	stw	r2,68(sp)
 1006898:	d8800117 	ldw	r2,4(sp)
 100689c:	10bffd04 	addi	r2,r2,-12
 10068a0:	d8801015 	stw	r2,64(sp)
 10068a4:	10c0041e 	bne	r2,r3,10068b8 <_ZSt20__throw_out_of_rangePKc+0x164>
 10068a8:	d8801117 	ldw	r2,68(sp)
 10068ac:	d8801515 	stw	r2,84(sp)
 10068b0:	003fef06 	br	1006870 <_ZSt20__throw_out_of_rangePKc+0x11c>
 10068b4:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 10068b8:	00800084 	movi	r2,2
 10068bc:	d8800315 	stw	r2,12(sp)
 10068c0:	d8801017 	ldw	r2,64(sp)
 10068c4:	017fffc4 	movi	r5,-1
 10068c8:	11000204 	addi	r4,r2,8
 10068cc:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10068d0:	00bff516 	blt	zero,r2,10068a8 <_ZSt20__throw_out_of_rangePKc+0x154>
 10068d4:	d9001017 	ldw	r4,64(sp)
 10068d8:	d9400044 	addi	r5,sp,1
 10068dc:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10068e0:	003ff106 	br	10068a8 <_ZSt20__throw_out_of_rangePKc+0x154>

010068e4 <_ZSt20__throw_length_errorPKc>:
 10068e4:	deffe704 	addi	sp,sp,-100
 10068e8:	00804074 	movhi	r2,257
 10068ec:	10b41004 	addi	r2,r2,-12224
 10068f0:	d8800815 	stw	r2,32(sp)
 10068f4:	00c040b4 	movhi	r3,258
 10068f8:	18d64904 	addi	r3,r3,22820
 10068fc:	00804034 	movhi	r2,256
 1006900:	109a7404 	addi	r2,r2,27088
 1006904:	d9001315 	stw	r4,76(sp)
 1006908:	d9000204 	addi	r4,sp,8
 100690c:	d8800b15 	stw	r2,44(sp)
 1006910:	dfc01815 	stw	ra,96(sp)
 1006914:	df001715 	stw	fp,92(sp)
 1006918:	ddc01615 	stw	r23,88(sp)
 100691c:	d8c00915 	stw	r3,36(sp)
 1006920:	dec00a15 	stw	sp,40(sp)
 1006924:	dec00c15 	stw	sp,48(sp)
 1006928:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100692c:	00800104 	movi	r2,4
 1006930:	d8800315 	stw	r2,12(sp)
 1006934:	d885883a 	add	r2,sp,r2
 1006938:	d8801415 	stw	r2,80(sp)
 100693c:	d9401317 	ldw	r5,76(sp)
 1006940:	1009883a 	mov	r4,r2
 1006944:	d9800084 	addi	r6,sp,2
 1006948:	10098840 	call	1009884 <_ZNSsC1EPKcRKSaIcE>
 100694c:	01000204 	movi	r4,8
 1006950:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 1006954:	d8801215 	stw	r2,72(sp)
 1006958:	008000c4 	movi	r2,3
 100695c:	d8800315 	stw	r2,12(sp)
 1006960:	d9401417 	ldw	r5,80(sp)
 1006964:	d9001217 	ldw	r4,72(sp)
 1006968:	10075a80 	call	10075a8 <_ZNSt12length_errorC1ERKSs>
 100696c:	d8800117 	ldw	r2,4(sp)
 1006970:	00c040f4 	movhi	r3,259
 1006974:	18dc3204 	addi	r3,r3,28872
 1006978:	10bffd04 	addi	r2,r2,-12
 100697c:	d8800f15 	stw	r2,60(sp)
 1006980:	10c0081e 	bne	r2,r3,10069a4 <_ZSt20__throw_length_errorPKc+0xc0>
 1006984:	d9001217 	ldw	r4,72(sp)
 1006988:	00bfffc4 	movi	r2,-1
 100698c:	014040b4 	movhi	r5,258
 1006990:	2958bf04 	addi	r5,r5,25340
 1006994:	01804034 	movhi	r6,256
 1006998:	319aee04 	addi	r6,r6,27576
 100699c:	d8800315 	stw	r2,12(sp)
 10069a0:	100d8900 	call	100d890 <__cxa_throw>
 10069a4:	00800044 	movi	r2,1
 10069a8:	d8800315 	stw	r2,12(sp)
 10069ac:	d8800f17 	ldw	r2,60(sp)
 10069b0:	017fffc4 	movi	r5,-1
 10069b4:	11000204 	addi	r4,r2,8
 10069b8:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10069bc:	00bff116 	blt	zero,r2,1006984 <_ZSt20__throw_length_errorPKc+0xa0>
 10069c0:	d9000f17 	ldw	r4,60(sp)
 10069c4:	d80b883a 	mov	r5,sp
 10069c8:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10069cc:	003fed06 	br	1006984 <_ZSt20__throw_length_errorPKc+0xa0>
 10069d0:	d8800417 	ldw	r2,16(sp)
 10069d4:	d8c00317 	ldw	r3,12(sp)
 10069d8:	d9000517 	ldw	r4,20(sp)
 10069dc:	d8801515 	stw	r2,84(sp)
 10069e0:	00800044 	movi	r2,1
 10069e4:	18800426 	beq	r3,r2,10069f8 <_ZSt20__throw_length_errorPKc+0x114>
 10069e8:	00800084 	movi	r2,2
 10069ec:	18800826 	beq	r3,r2,1006a10 <_ZSt20__throw_length_errorPKc+0x12c>
 10069f0:	008000c4 	movi	r2,3
 10069f4:	18800226 	beq	r3,r2,1006a00 <_ZSt20__throw_length_errorPKc+0x11c>
 10069f8:	00bfffc4 	movi	r2,-1
 10069fc:	20801126 	beq	r4,r2,1006a44 <_ZSt20__throw_length_errorPKc+0x160>
 1006a00:	d9001517 	ldw	r4,84(sp)
 1006a04:	00bfffc4 	movi	r2,-1
 1006a08:	d8800315 	stw	r2,12(sp)
 1006a0c:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1006a10:	d9001217 	ldw	r4,72(sp)
 1006a14:	100dbd80 	call	100dbd8 <__cxa_free_exception>
 1006a18:	d8801517 	ldw	r2,84(sp)
 1006a1c:	00c040f4 	movhi	r3,259
 1006a20:	18dc3204 	addi	r3,r3,28872
 1006a24:	d8801115 	stw	r2,68(sp)
 1006a28:	d8800117 	ldw	r2,4(sp)
 1006a2c:	10bffd04 	addi	r2,r2,-12
 1006a30:	d8801015 	stw	r2,64(sp)
 1006a34:	10c0041e 	bne	r2,r3,1006a48 <_ZSt20__throw_length_errorPKc+0x164>
 1006a38:	d8801117 	ldw	r2,68(sp)
 1006a3c:	d8801515 	stw	r2,84(sp)
 1006a40:	003fef06 	br	1006a00 <_ZSt20__throw_length_errorPKc+0x11c>
 1006a44:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 1006a48:	00800084 	movi	r2,2
 1006a4c:	d8800315 	stw	r2,12(sp)
 1006a50:	d8801017 	ldw	r2,64(sp)
 1006a54:	017fffc4 	movi	r5,-1
 1006a58:	11000204 	addi	r4,r2,8
 1006a5c:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006a60:	00bff516 	blt	zero,r2,1006a38 <_ZSt20__throw_length_errorPKc+0x154>
 1006a64:	d9001017 	ldw	r4,64(sp)
 1006a68:	d9400044 	addi	r5,sp,1
 1006a6c:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006a70:	003ff106 	br	1006a38 <_ZSt20__throw_length_errorPKc+0x154>

01006a74 <_ZNSt15underflow_errorD0Ev>:
 1006a74:	defffe04 	addi	sp,sp,-8
 1006a78:	008040b4 	movhi	r2,258
 1006a7c:	10989604 	addi	r2,r2,25176
 1006a80:	dc400015 	stw	r17,0(sp)
 1006a84:	20800015 	stw	r2,0(r4)
 1006a88:	2023883a 	mov	r17,r4
 1006a8c:	dfc00115 	stw	ra,4(sp)
 1006a90:	10078840 	call	1007884 <_ZNSt13runtime_errorD2Ev>
 1006a94:	8809883a 	mov	r4,r17
 1006a98:	dfc00117 	ldw	ra,4(sp)
 1006a9c:	dc400017 	ldw	r17,0(sp)
 1006aa0:	dec00204 	addi	sp,sp,8
 1006aa4:	100d8101 	jmpi	100d810 <_ZdlPv>

01006aa8 <_ZNSt15underflow_errorD1Ev>:
 1006aa8:	008040b4 	movhi	r2,258
 1006aac:	10989604 	addi	r2,r2,25176
 1006ab0:	20800015 	stw	r2,0(r4)
 1006ab4:	10078841 	jmpi	1007884 <_ZNSt13runtime_errorD2Ev>

01006ab8 <_ZNSt14overflow_errorD0Ev>:
 1006ab8:	defffe04 	addi	sp,sp,-8
 1006abc:	008040b4 	movhi	r2,258
 1006ac0:	1098a304 	addi	r2,r2,25228
 1006ac4:	dc400015 	stw	r17,0(sp)
 1006ac8:	20800015 	stw	r2,0(r4)
 1006acc:	2023883a 	mov	r17,r4
 1006ad0:	dfc00115 	stw	ra,4(sp)
 1006ad4:	10078840 	call	1007884 <_ZNSt13runtime_errorD2Ev>
 1006ad8:	8809883a 	mov	r4,r17
 1006adc:	dfc00117 	ldw	ra,4(sp)
 1006ae0:	dc400017 	ldw	r17,0(sp)
 1006ae4:	dec00204 	addi	sp,sp,8
 1006ae8:	100d8101 	jmpi	100d810 <_ZdlPv>

01006aec <_ZNSt14overflow_errorD1Ev>:
 1006aec:	008040b4 	movhi	r2,258
 1006af0:	1098a304 	addi	r2,r2,25228
 1006af4:	20800015 	stw	r2,0(r4)
 1006af8:	10078841 	jmpi	1007884 <_ZNSt13runtime_errorD2Ev>

01006afc <_ZNSt11range_errorD0Ev>:
 1006afc:	defffe04 	addi	sp,sp,-8
 1006b00:	008040b4 	movhi	r2,258
 1006b04:	1098af04 	addi	r2,r2,25276
 1006b08:	dc400015 	stw	r17,0(sp)
 1006b0c:	20800015 	stw	r2,0(r4)
 1006b10:	2023883a 	mov	r17,r4
 1006b14:	dfc00115 	stw	ra,4(sp)
 1006b18:	10078840 	call	1007884 <_ZNSt13runtime_errorD2Ev>
 1006b1c:	8809883a 	mov	r4,r17
 1006b20:	dfc00117 	ldw	ra,4(sp)
 1006b24:	dc400017 	ldw	r17,0(sp)
 1006b28:	dec00204 	addi	sp,sp,8
 1006b2c:	100d8101 	jmpi	100d810 <_ZdlPv>

01006b30 <_ZNSt11range_errorD1Ev>:
 1006b30:	008040b4 	movhi	r2,258
 1006b34:	1098af04 	addi	r2,r2,25276
 1006b38:	20800015 	stw	r2,0(r4)
 1006b3c:	10078841 	jmpi	1007884 <_ZNSt13runtime_errorD2Ev>

01006b40 <_ZNSt12out_of_rangeD0Ev>:
 1006b40:	defffe04 	addi	sp,sp,-8
 1006b44:	008040b4 	movhi	r2,258
 1006b48:	1098bc04 	addi	r2,r2,25328
 1006b4c:	dc400015 	stw	r17,0(sp)
 1006b50:	20800015 	stw	r2,0(r4)
 1006b54:	2023883a 	mov	r17,r4
 1006b58:	dfc00115 	stw	ra,4(sp)
 1006b5c:	1007a940 	call	1007a94 <_ZNSt11logic_errorD2Ev>
 1006b60:	8809883a 	mov	r4,r17
 1006b64:	dfc00117 	ldw	ra,4(sp)
 1006b68:	dc400017 	ldw	r17,0(sp)
 1006b6c:	dec00204 	addi	sp,sp,8
 1006b70:	100d8101 	jmpi	100d810 <_ZdlPv>

01006b74 <_ZNSt12out_of_rangeD1Ev>:
 1006b74:	008040b4 	movhi	r2,258
 1006b78:	1098bc04 	addi	r2,r2,25328
 1006b7c:	20800015 	stw	r2,0(r4)
 1006b80:	1007a941 	jmpi	1007a94 <_ZNSt11logic_errorD2Ev>

01006b84 <_ZNSt12length_errorD0Ev>:
 1006b84:	defffe04 	addi	sp,sp,-8
 1006b88:	008040b4 	movhi	r2,258
 1006b8c:	1098c904 	addi	r2,r2,25380
 1006b90:	dc400015 	stw	r17,0(sp)
 1006b94:	20800015 	stw	r2,0(r4)
 1006b98:	2023883a 	mov	r17,r4
 1006b9c:	dfc00115 	stw	ra,4(sp)
 1006ba0:	1007a940 	call	1007a94 <_ZNSt11logic_errorD2Ev>
 1006ba4:	8809883a 	mov	r4,r17
 1006ba8:	dfc00117 	ldw	ra,4(sp)
 1006bac:	dc400017 	ldw	r17,0(sp)
 1006bb0:	dec00204 	addi	sp,sp,8
 1006bb4:	100d8101 	jmpi	100d810 <_ZdlPv>

01006bb8 <_ZNSt12length_errorD1Ev>:
 1006bb8:	008040b4 	movhi	r2,258
 1006bbc:	1098c904 	addi	r2,r2,25380
 1006bc0:	20800015 	stw	r2,0(r4)
 1006bc4:	1007a941 	jmpi	1007a94 <_ZNSt11logic_errorD2Ev>

01006bc8 <_ZNSt16invalid_argumentD0Ev>:
 1006bc8:	defffe04 	addi	sp,sp,-8
 1006bcc:	008040b4 	movhi	r2,258
 1006bd0:	1098d704 	addi	r2,r2,25436
 1006bd4:	dc400015 	stw	r17,0(sp)
 1006bd8:	20800015 	stw	r2,0(r4)
 1006bdc:	2023883a 	mov	r17,r4
 1006be0:	dfc00115 	stw	ra,4(sp)
 1006be4:	1007a940 	call	1007a94 <_ZNSt11logic_errorD2Ev>
 1006be8:	8809883a 	mov	r4,r17
 1006bec:	dfc00117 	ldw	ra,4(sp)
 1006bf0:	dc400017 	ldw	r17,0(sp)
 1006bf4:	dec00204 	addi	sp,sp,8
 1006bf8:	100d8101 	jmpi	100d810 <_ZdlPv>

01006bfc <_ZNSt16invalid_argumentD1Ev>:
 1006bfc:	008040b4 	movhi	r2,258
 1006c00:	1098d704 	addi	r2,r2,25436
 1006c04:	20800015 	stw	r2,0(r4)
 1006c08:	1007a941 	jmpi	1007a94 <_ZNSt11logic_errorD2Ev>

01006c0c <_ZNSt12domain_errorD0Ev>:
 1006c0c:	defffe04 	addi	sp,sp,-8
 1006c10:	008040b4 	movhi	r2,258
 1006c14:	1098e404 	addi	r2,r2,25488
 1006c18:	dc400015 	stw	r17,0(sp)
 1006c1c:	20800015 	stw	r2,0(r4)
 1006c20:	2023883a 	mov	r17,r4
 1006c24:	dfc00115 	stw	ra,4(sp)
 1006c28:	1007a940 	call	1007a94 <_ZNSt11logic_errorD2Ev>
 1006c2c:	8809883a 	mov	r4,r17
 1006c30:	dfc00117 	ldw	ra,4(sp)
 1006c34:	dc400017 	ldw	r17,0(sp)
 1006c38:	dec00204 	addi	sp,sp,8
 1006c3c:	100d8101 	jmpi	100d810 <_ZdlPv>

01006c40 <_ZNSt12domain_errorD1Ev>:
 1006c40:	008040b4 	movhi	r2,258
 1006c44:	1098e404 	addi	r2,r2,25488
 1006c48:	20800015 	stw	r2,0(r4)
 1006c4c:	1007a941 	jmpi	1007a94 <_ZNSt11logic_errorD2Ev>

01006c50 <_ZNKSt8ios_base7failure4whatEv>:
 1006c50:	20800117 	ldw	r2,4(r4)
 1006c54:	f800283a 	ret

01006c58 <_ZNSt8ios_base7failureD1Ev>:
 1006c58:	deffeb04 	addi	sp,sp,-84
 1006c5c:	00804074 	movhi	r2,257
 1006c60:	10b41004 	addi	r2,r2,-12224
 1006c64:	00c040b4 	movhi	r3,258
 1006c68:	18d64f04 	addi	r3,r3,22844
 1006c6c:	d8800715 	stw	r2,28(sp)
 1006c70:	d9001015 	stw	r4,64(sp)
 1006c74:	00804034 	movhi	r2,256
 1006c78:	109b4704 	addi	r2,r2,27932
 1006c7c:	d9000104 	addi	r4,sp,4
 1006c80:	d8c00815 	stw	r3,32(sp)
 1006c84:	d8800a15 	stw	r2,40(sp)
 1006c88:	dfc01415 	stw	ra,80(sp)
 1006c8c:	df001315 	stw	fp,76(sp)
 1006c90:	ddc01215 	stw	r23,72(sp)
 1006c94:	dec00915 	stw	sp,36(sp)
 1006c98:	dec00b15 	stw	sp,44(sp)
 1006c9c:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1006ca0:	d8c01017 	ldw	r3,64(sp)
 1006ca4:	18800117 	ldw	r2,4(r3)
 1006ca8:	00c040b4 	movhi	r3,258
 1006cac:	18d8e904 	addi	r3,r3,25508
 1006cb0:	10bffd04 	addi	r2,r2,-12
 1006cb4:	d8800e15 	stw	r2,56(sp)
 1006cb8:	d8801017 	ldw	r2,64(sp)
 1006cbc:	10c00015 	stw	r3,0(r2)
 1006cc0:	d8c00e17 	ldw	r3,56(sp)
 1006cc4:	008040f4 	movhi	r2,259
 1006cc8:	109c3204 	addi	r2,r2,28872
 1006ccc:	1880091e 	bne	r3,r2,1006cf4 <_ZNSt8ios_base7failureD1Ev+0x9c>
 1006cd0:	d9001017 	ldw	r4,64(sp)
 1006cd4:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1006cd8:	d9000104 	addi	r4,sp,4
 1006cdc:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1006ce0:	dfc01417 	ldw	ra,80(sp)
 1006ce4:	df001317 	ldw	fp,76(sp)
 1006ce8:	ddc01217 	ldw	r23,72(sp)
 1006cec:	dec01504 	addi	sp,sp,84
 1006cf0:	f800283a 	ret
 1006cf4:	00800044 	movi	r2,1
 1006cf8:	d8800215 	stw	r2,8(sp)
 1006cfc:	19000204 	addi	r4,r3,8
 1006d00:	017fffc4 	movi	r5,-1
 1006d04:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006d08:	00bff116 	blt	zero,r2,1006cd0 <_ZNSt8ios_base7failureD1Ev+0x78>
 1006d0c:	d9000e17 	ldw	r4,56(sp)
 1006d10:	d80b883a 	mov	r5,sp
 1006d14:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006d18:	003fed06 	br	1006cd0 <_ZNSt8ios_base7failureD1Ev+0x78>
 1006d1c:	d8800417 	ldw	r2,16(sp)
 1006d20:	d8c00317 	ldw	r3,12(sp)
 1006d24:	d9001017 	ldw	r4,64(sp)
 1006d28:	d8800f15 	stw	r2,60(sp)
 1006d2c:	d8c01115 	stw	r3,68(sp)
 1006d30:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1006d34:	d8c00f17 	ldw	r3,60(sp)
 1006d38:	00bfffc4 	movi	r2,-1
 1006d3c:	18800326 	beq	r3,r2,1006d4c <_ZNSt8ios_base7failureD1Ev+0xf4>
 1006d40:	d9001117 	ldw	r4,68(sp)
 1006d44:	d8800215 	stw	r2,8(sp)
 1006d48:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1006d4c:	d9001117 	ldw	r4,68(sp)
 1006d50:	00bfffc4 	movi	r2,-1
 1006d54:	d8800215 	stw	r2,8(sp)
 1006d58:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01006d5c <_ZNSt8ios_base7failureC1ERKSs>:
 1006d5c:	deffec04 	addi	sp,sp,-80
 1006d60:	00804074 	movhi	r2,257
 1006d64:	10b41004 	addi	r2,r2,-12224
 1006d68:	00c040b4 	movhi	r3,258
 1006d6c:	18d65304 	addi	r3,r3,22860
 1006d70:	d8800615 	stw	r2,24(sp)
 1006d74:	d9000d15 	stw	r4,52(sp)
 1006d78:	00804034 	movhi	r2,256
 1006d7c:	109b7b04 	addi	r2,r2,28140
 1006d80:	d809883a 	mov	r4,sp
 1006d84:	d8c00715 	stw	r3,28(sp)
 1006d88:	d8800915 	stw	r2,36(sp)
 1006d8c:	d9400e15 	stw	r5,56(sp)
 1006d90:	dfc01315 	stw	ra,76(sp)
 1006d94:	df001215 	stw	fp,72(sp)
 1006d98:	ddc01115 	stw	r23,68(sp)
 1006d9c:	dec00815 	stw	sp,32(sp)
 1006da0:	dec00a15 	stw	sp,40(sp)
 1006da4:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1006da8:	d8c00d17 	ldw	r3,52(sp)
 1006dac:	008040b4 	movhi	r2,258
 1006db0:	1098e904 	addi	r2,r2,25508
 1006db4:	d9400e17 	ldw	r5,56(sp)
 1006db8:	18800015 	stw	r2,0(r3)
 1006dbc:	d8800d17 	ldw	r2,52(sp)
 1006dc0:	00c00044 	movi	r3,1
 1006dc4:	d8c00115 	stw	r3,4(sp)
 1006dc8:	11000104 	addi	r4,r2,4
 1006dcc:	1009a800 	call	1009a80 <_ZNSsC1ERKSs>
 1006dd0:	d809883a 	mov	r4,sp
 1006dd4:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1006dd8:	dfc01317 	ldw	ra,76(sp)
 1006ddc:	df001217 	ldw	fp,72(sp)
 1006de0:	ddc01117 	ldw	r23,68(sp)
 1006de4:	dec01404 	addi	sp,sp,80
 1006de8:	f800283a 	ret
 1006dec:	d8c00317 	ldw	r3,12(sp)
 1006df0:	d8800217 	ldw	r2,8(sp)
 1006df4:	d9000d17 	ldw	r4,52(sp)
 1006df8:	d8c00f15 	stw	r3,60(sp)
 1006dfc:	d8801015 	stw	r2,64(sp)
 1006e00:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1006e04:	d8c00f17 	ldw	r3,60(sp)
 1006e08:	00bfffc4 	movi	r2,-1
 1006e0c:	18800326 	beq	r3,r2,1006e1c <_ZNSt8ios_base7failureC1ERKSs+0xc0>
 1006e10:	d9001017 	ldw	r4,64(sp)
 1006e14:	d8800115 	stw	r2,4(sp)
 1006e18:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1006e1c:	d9001017 	ldw	r4,64(sp)
 1006e20:	00bfffc4 	movi	r2,-1
 1006e24:	d8800115 	stw	r2,4(sp)
 1006e28:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01006e2c <_ZNSt8ios_base7failureC2ERKSs>:
 1006e2c:	deffec04 	addi	sp,sp,-80
 1006e30:	00804074 	movhi	r2,257
 1006e34:	10b41004 	addi	r2,r2,-12224
 1006e38:	00c040b4 	movhi	r3,258
 1006e3c:	18d65704 	addi	r3,r3,22876
 1006e40:	d8800615 	stw	r2,24(sp)
 1006e44:	d9000d15 	stw	r4,52(sp)
 1006e48:	00804034 	movhi	r2,256
 1006e4c:	109baf04 	addi	r2,r2,28348
 1006e50:	d809883a 	mov	r4,sp
 1006e54:	d8c00715 	stw	r3,28(sp)
 1006e58:	d8800915 	stw	r2,36(sp)
 1006e5c:	d9400e15 	stw	r5,56(sp)
 1006e60:	dfc01315 	stw	ra,76(sp)
 1006e64:	df001215 	stw	fp,72(sp)
 1006e68:	ddc01115 	stw	r23,68(sp)
 1006e6c:	dec00815 	stw	sp,32(sp)
 1006e70:	dec00a15 	stw	sp,40(sp)
 1006e74:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1006e78:	d8c00d17 	ldw	r3,52(sp)
 1006e7c:	008040b4 	movhi	r2,258
 1006e80:	1098e904 	addi	r2,r2,25508
 1006e84:	d9400e17 	ldw	r5,56(sp)
 1006e88:	18800015 	stw	r2,0(r3)
 1006e8c:	d8800d17 	ldw	r2,52(sp)
 1006e90:	00c00044 	movi	r3,1
 1006e94:	d8c00115 	stw	r3,4(sp)
 1006e98:	11000104 	addi	r4,r2,4
 1006e9c:	1009a800 	call	1009a80 <_ZNSsC1ERKSs>
 1006ea0:	d809883a 	mov	r4,sp
 1006ea4:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1006ea8:	dfc01317 	ldw	ra,76(sp)
 1006eac:	df001217 	ldw	fp,72(sp)
 1006eb0:	ddc01117 	ldw	r23,68(sp)
 1006eb4:	dec01404 	addi	sp,sp,80
 1006eb8:	f800283a 	ret
 1006ebc:	d8c00317 	ldw	r3,12(sp)
 1006ec0:	d8800217 	ldw	r2,8(sp)
 1006ec4:	d9000d17 	ldw	r4,52(sp)
 1006ec8:	d8c00f15 	stw	r3,60(sp)
 1006ecc:	d8801015 	stw	r2,64(sp)
 1006ed0:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1006ed4:	d8c00f17 	ldw	r3,60(sp)
 1006ed8:	00bfffc4 	movi	r2,-1
 1006edc:	18800326 	beq	r3,r2,1006eec <_ZNSt8ios_base7failureC2ERKSs+0xc0>
 1006ee0:	d9001017 	ldw	r4,64(sp)
 1006ee4:	d8800115 	stw	r2,4(sp)
 1006ee8:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1006eec:	d9001017 	ldw	r4,64(sp)
 1006ef0:	00bfffc4 	movi	r2,-1
 1006ef4:	d8800115 	stw	r2,4(sp)
 1006ef8:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01006efc <_ZNSt8ios_base7failureD2Ev>:
 1006efc:	deffeb04 	addi	sp,sp,-84
 1006f00:	00804074 	movhi	r2,257
 1006f04:	10b41004 	addi	r2,r2,-12224
 1006f08:	00c040b4 	movhi	r3,258
 1006f0c:	18d65b04 	addi	r3,r3,22892
 1006f10:	d8800715 	stw	r2,28(sp)
 1006f14:	d9001015 	stw	r4,64(sp)
 1006f18:	00804034 	movhi	r2,256
 1006f1c:	109bf004 	addi	r2,r2,28608
 1006f20:	d9000104 	addi	r4,sp,4
 1006f24:	d8c00815 	stw	r3,32(sp)
 1006f28:	d8800a15 	stw	r2,40(sp)
 1006f2c:	dfc01415 	stw	ra,80(sp)
 1006f30:	df001315 	stw	fp,76(sp)
 1006f34:	ddc01215 	stw	r23,72(sp)
 1006f38:	dec00915 	stw	sp,36(sp)
 1006f3c:	dec00b15 	stw	sp,44(sp)
 1006f40:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1006f44:	d8c01017 	ldw	r3,64(sp)
 1006f48:	18800117 	ldw	r2,4(r3)
 1006f4c:	00c040b4 	movhi	r3,258
 1006f50:	18d8e904 	addi	r3,r3,25508
 1006f54:	10bffd04 	addi	r2,r2,-12
 1006f58:	d8800e15 	stw	r2,56(sp)
 1006f5c:	d8801017 	ldw	r2,64(sp)
 1006f60:	10c00015 	stw	r3,0(r2)
 1006f64:	d8c00e17 	ldw	r3,56(sp)
 1006f68:	008040f4 	movhi	r2,259
 1006f6c:	109c3204 	addi	r2,r2,28872
 1006f70:	1880091e 	bne	r3,r2,1006f98 <_ZNSt8ios_base7failureD2Ev+0x9c>
 1006f74:	d9001017 	ldw	r4,64(sp)
 1006f78:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1006f7c:	d9000104 	addi	r4,sp,4
 1006f80:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1006f84:	dfc01417 	ldw	ra,80(sp)
 1006f88:	df001317 	ldw	fp,76(sp)
 1006f8c:	ddc01217 	ldw	r23,72(sp)
 1006f90:	dec01504 	addi	sp,sp,84
 1006f94:	f800283a 	ret
 1006f98:	00800044 	movi	r2,1
 1006f9c:	d8800215 	stw	r2,8(sp)
 1006fa0:	19000204 	addi	r4,r3,8
 1006fa4:	017fffc4 	movi	r5,-1
 1006fa8:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006fac:	00bff116 	blt	zero,r2,1006f74 <_ZNSt8ios_base7failureD2Ev+0x78>
 1006fb0:	d9000e17 	ldw	r4,56(sp)
 1006fb4:	d80b883a 	mov	r5,sp
 1006fb8:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006fbc:	003fed06 	br	1006f74 <_ZNSt8ios_base7failureD2Ev+0x78>
 1006fc0:	d8800417 	ldw	r2,16(sp)
 1006fc4:	d8c00317 	ldw	r3,12(sp)
 1006fc8:	d9001017 	ldw	r4,64(sp)
 1006fcc:	d8800f15 	stw	r2,60(sp)
 1006fd0:	d8c01115 	stw	r3,68(sp)
 1006fd4:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1006fd8:	d8c00f17 	ldw	r3,60(sp)
 1006fdc:	00bfffc4 	movi	r2,-1
 1006fe0:	18800326 	beq	r3,r2,1006ff0 <_ZNSt8ios_base7failureD2Ev+0xf4>
 1006fe4:	d9001117 	ldw	r4,68(sp)
 1006fe8:	d8800215 	stw	r2,8(sp)
 1006fec:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1006ff0:	d9001117 	ldw	r4,68(sp)
 1006ff4:	00bfffc4 	movi	r2,-1
 1006ff8:	d8800215 	stw	r2,8(sp)
 1006ffc:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01007000 <_ZNSt8ios_base7failureD0Ev>:
 1007000:	deffeb04 	addi	sp,sp,-84
 1007004:	00804074 	movhi	r2,257
 1007008:	10b41004 	addi	r2,r2,-12224
 100700c:	00c040b4 	movhi	r3,258
 1007010:	18d65f04 	addi	r3,r3,22908
 1007014:	d8800715 	stw	r2,28(sp)
 1007018:	d9001015 	stw	r4,64(sp)
 100701c:	00804034 	movhi	r2,256
 1007020:	109c3304 	addi	r2,r2,28876
 1007024:	d9000104 	addi	r4,sp,4
 1007028:	d8c00815 	stw	r3,32(sp)
 100702c:	d8800a15 	stw	r2,40(sp)
 1007030:	dfc01415 	stw	ra,80(sp)
 1007034:	df001315 	stw	fp,76(sp)
 1007038:	ddc01215 	stw	r23,72(sp)
 100703c:	dec00915 	stw	sp,36(sp)
 1007040:	dec00b15 	stw	sp,44(sp)
 1007044:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1007048:	d8c01017 	ldw	r3,64(sp)
 100704c:	18800117 	ldw	r2,4(r3)
 1007050:	00c040b4 	movhi	r3,258
 1007054:	18d8e904 	addi	r3,r3,25508
 1007058:	10bffd04 	addi	r2,r2,-12
 100705c:	d8800e15 	stw	r2,56(sp)
 1007060:	d8801017 	ldw	r2,64(sp)
 1007064:	10c00015 	stw	r3,0(r2)
 1007068:	d8c00e17 	ldw	r3,56(sp)
 100706c:	008040f4 	movhi	r2,259
 1007070:	109c3204 	addi	r2,r2,28872
 1007074:	18800b1e 	bne	r3,r2,10070a4 <_ZNSt8ios_base7failureD0Ev+0xa4>
 1007078:	d9001017 	ldw	r4,64(sp)
 100707c:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007080:	d9001017 	ldw	r4,64(sp)
 1007084:	100d8100 	call	100d810 <_ZdlPv>
 1007088:	d9000104 	addi	r4,sp,4
 100708c:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1007090:	dfc01417 	ldw	ra,80(sp)
 1007094:	df001317 	ldw	fp,76(sp)
 1007098:	ddc01217 	ldw	r23,72(sp)
 100709c:	dec01504 	addi	sp,sp,84
 10070a0:	f800283a 	ret
 10070a4:	00800044 	movi	r2,1
 10070a8:	d8800215 	stw	r2,8(sp)
 10070ac:	19000204 	addi	r4,r3,8
 10070b0:	017fffc4 	movi	r5,-1
 10070b4:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10070b8:	00bfef16 	blt	zero,r2,1007078 <_ZNSt8ios_base7failureD0Ev+0x78>
 10070bc:	d9000e17 	ldw	r4,56(sp)
 10070c0:	d80b883a 	mov	r5,sp
 10070c4:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10070c8:	003feb06 	br	1007078 <_ZNSt8ios_base7failureD0Ev+0x78>
 10070cc:	d8800417 	ldw	r2,16(sp)
 10070d0:	d8c00317 	ldw	r3,12(sp)
 10070d4:	d9001017 	ldw	r4,64(sp)
 10070d8:	d8800f15 	stw	r2,60(sp)
 10070dc:	d8c01115 	stw	r3,68(sp)
 10070e0:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 10070e4:	d8c00f17 	ldw	r3,60(sp)
 10070e8:	00bfffc4 	movi	r2,-1
 10070ec:	18800326 	beq	r3,r2,10070fc <_ZNSt8ios_base7failureD0Ev+0xfc>
 10070f0:	d9001117 	ldw	r4,68(sp)
 10070f4:	d8800215 	stw	r2,8(sp)
 10070f8:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 10070fc:	d9001117 	ldw	r4,68(sp)
 1007100:	00bfffc4 	movi	r2,-1
 1007104:	d8800215 	stw	r2,8(sp)
 1007108:	100cec00 	call	100cec0 <__cxa_call_unexpected>

0100710c <_ZNKSt13runtime_error4whatEv>:
 100710c:	20800117 	ldw	r2,4(r4)
 1007110:	f800283a 	ret

01007114 <_ZNSt11logic_errorD1Ev>:
 1007114:	deffeb04 	addi	sp,sp,-84
 1007118:	00804074 	movhi	r2,257
 100711c:	10b41004 	addi	r2,r2,-12224
 1007120:	00c040b4 	movhi	r3,258
 1007124:	18d66304 	addi	r3,r3,22924
 1007128:	d8800715 	stw	r2,28(sp)
 100712c:	d9001015 	stw	r4,64(sp)
 1007130:	00804034 	movhi	r2,256
 1007134:	109c7604 	addi	r2,r2,29144
 1007138:	d9000104 	addi	r4,sp,4
 100713c:	d8c00815 	stw	r3,32(sp)
 1007140:	d8800a15 	stw	r2,40(sp)
 1007144:	dfc01415 	stw	ra,80(sp)
 1007148:	df001315 	stw	fp,76(sp)
 100714c:	ddc01215 	stw	r23,72(sp)
 1007150:	dec00915 	stw	sp,36(sp)
 1007154:	dec00b15 	stw	sp,44(sp)
 1007158:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100715c:	d8c01017 	ldw	r3,64(sp)
 1007160:	18800117 	ldw	r2,4(r3)
 1007164:	00c040b4 	movhi	r3,258
 1007168:	18d8fc04 	addi	r3,r3,25584
 100716c:	10bffd04 	addi	r2,r2,-12
 1007170:	d8800e15 	stw	r2,56(sp)
 1007174:	d8801017 	ldw	r2,64(sp)
 1007178:	10c00015 	stw	r3,0(r2)
 100717c:	d8c00e17 	ldw	r3,56(sp)
 1007180:	008040f4 	movhi	r2,259
 1007184:	109c3204 	addi	r2,r2,28872
 1007188:	1880091e 	bne	r3,r2,10071b0 <_ZNSt11logic_errorD1Ev+0x9c>
 100718c:	d9001017 	ldw	r4,64(sp)
 1007190:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007194:	d9000104 	addi	r4,sp,4
 1007198:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100719c:	dfc01417 	ldw	ra,80(sp)
 10071a0:	df001317 	ldw	fp,76(sp)
 10071a4:	ddc01217 	ldw	r23,72(sp)
 10071a8:	dec01504 	addi	sp,sp,84
 10071ac:	f800283a 	ret
 10071b0:	00800044 	movi	r2,1
 10071b4:	d8800215 	stw	r2,8(sp)
 10071b8:	19000204 	addi	r4,r3,8
 10071bc:	017fffc4 	movi	r5,-1
 10071c0:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10071c4:	00bff116 	blt	zero,r2,100718c <_ZNSt11logic_errorD1Ev+0x78>
 10071c8:	d9000e17 	ldw	r4,56(sp)
 10071cc:	d80b883a 	mov	r5,sp
 10071d0:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10071d4:	003fed06 	br	100718c <_ZNSt11logic_errorD1Ev+0x78>
 10071d8:	d8800417 	ldw	r2,16(sp)
 10071dc:	d8c00317 	ldw	r3,12(sp)
 10071e0:	d9001017 	ldw	r4,64(sp)
 10071e4:	d8800f15 	stw	r2,60(sp)
 10071e8:	d8c01115 	stw	r3,68(sp)
 10071ec:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 10071f0:	d8c00f17 	ldw	r3,60(sp)
 10071f4:	00bfffc4 	movi	r2,-1
 10071f8:	18800326 	beq	r3,r2,1007208 <_ZNSt11logic_errorD1Ev+0xf4>
 10071fc:	d9001117 	ldw	r4,68(sp)
 1007200:	d8800215 	stw	r2,8(sp)
 1007204:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1007208:	d9001117 	ldw	r4,68(sp)
 100720c:	00bfffc4 	movi	r2,-1
 1007210:	d8800215 	stw	r2,8(sp)
 1007214:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01007218 <_ZNSt13runtime_errorC2ERKSs>:
 1007218:	deffed04 	addi	sp,sp,-76
 100721c:	00804074 	movhi	r2,257
 1007220:	10b41004 	addi	r2,r2,-12224
 1007224:	00c040b4 	movhi	r3,258
 1007228:	18d66644 	addi	r3,r3,22937
 100722c:	d8800615 	stw	r2,24(sp)
 1007230:	d9000d15 	stw	r4,52(sp)
 1007234:	00804034 	movhi	r2,256
 1007238:	109caa04 	addi	r2,r2,29352
 100723c:	d809883a 	mov	r4,sp
 1007240:	d8c00715 	stw	r3,28(sp)
 1007244:	d8800915 	stw	r2,36(sp)
 1007248:	d9400e15 	stw	r5,56(sp)
 100724c:	dfc01215 	stw	ra,72(sp)
 1007250:	df001115 	stw	fp,68(sp)
 1007254:	ddc01015 	stw	r23,64(sp)
 1007258:	dec00815 	stw	sp,32(sp)
 100725c:	dec00a15 	stw	sp,40(sp)
 1007260:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1007264:	d8c00d17 	ldw	r3,52(sp)
 1007268:	008040b4 	movhi	r2,258
 100726c:	1098f704 	addi	r2,r2,25564
 1007270:	d9400e17 	ldw	r5,56(sp)
 1007274:	18800015 	stw	r2,0(r3)
 1007278:	d8800d17 	ldw	r2,52(sp)
 100727c:	00c00044 	movi	r3,1
 1007280:	d8c00115 	stw	r3,4(sp)
 1007284:	11000104 	addi	r4,r2,4
 1007288:	1009a800 	call	1009a80 <_ZNSsC1ERKSs>
 100728c:	d809883a 	mov	r4,sp
 1007290:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1007294:	dfc01217 	ldw	ra,72(sp)
 1007298:	df001117 	ldw	fp,68(sp)
 100729c:	ddc01017 	ldw	r23,64(sp)
 10072a0:	dec01304 	addi	sp,sp,76
 10072a4:	f800283a 	ret
 10072a8:	d8c00217 	ldw	r3,8(sp)
 10072ac:	d9000d17 	ldw	r4,52(sp)
 10072b0:	d8c00f15 	stw	r3,60(sp)
 10072b4:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 10072b8:	d9000f17 	ldw	r4,60(sp)
 10072bc:	00bfffc4 	movi	r2,-1
 10072c0:	d8800115 	stw	r2,4(sp)
 10072c4:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>

010072c8 <_ZNSt15underflow_errorC1ERKSs>:
 10072c8:	defffe04 	addi	sp,sp,-8
 10072cc:	dc000015 	stw	r16,0(sp)
 10072d0:	dfc00115 	stw	ra,4(sp)
 10072d4:	2021883a 	mov	r16,r4
 10072d8:	10072180 	call	1007218 <_ZNSt13runtime_errorC2ERKSs>
 10072dc:	008040b4 	movhi	r2,258
 10072e0:	10989604 	addi	r2,r2,25176
 10072e4:	80800015 	stw	r2,0(r16)
 10072e8:	dfc00117 	ldw	ra,4(sp)
 10072ec:	dc000017 	ldw	r16,0(sp)
 10072f0:	dec00204 	addi	sp,sp,8
 10072f4:	f800283a 	ret

010072f8 <_ZNSt15underflow_errorC2ERKSs>:
 10072f8:	defffe04 	addi	sp,sp,-8
 10072fc:	dc000015 	stw	r16,0(sp)
 1007300:	dfc00115 	stw	ra,4(sp)
 1007304:	2021883a 	mov	r16,r4
 1007308:	10072180 	call	1007218 <_ZNSt13runtime_errorC2ERKSs>
 100730c:	008040b4 	movhi	r2,258
 1007310:	10989604 	addi	r2,r2,25176
 1007314:	80800015 	stw	r2,0(r16)
 1007318:	dfc00117 	ldw	ra,4(sp)
 100731c:	dc000017 	ldw	r16,0(sp)
 1007320:	dec00204 	addi	sp,sp,8
 1007324:	f800283a 	ret

01007328 <_ZNSt14overflow_errorC1ERKSs>:
 1007328:	defffe04 	addi	sp,sp,-8
 100732c:	dc000015 	stw	r16,0(sp)
 1007330:	dfc00115 	stw	ra,4(sp)
 1007334:	2021883a 	mov	r16,r4
 1007338:	10072180 	call	1007218 <_ZNSt13runtime_errorC2ERKSs>
 100733c:	008040b4 	movhi	r2,258
 1007340:	1098a304 	addi	r2,r2,25228
 1007344:	80800015 	stw	r2,0(r16)
 1007348:	dfc00117 	ldw	ra,4(sp)
 100734c:	dc000017 	ldw	r16,0(sp)
 1007350:	dec00204 	addi	sp,sp,8
 1007354:	f800283a 	ret

01007358 <_ZNSt14overflow_errorC2ERKSs>:
 1007358:	defffe04 	addi	sp,sp,-8
 100735c:	dc000015 	stw	r16,0(sp)
 1007360:	dfc00115 	stw	ra,4(sp)
 1007364:	2021883a 	mov	r16,r4
 1007368:	10072180 	call	1007218 <_ZNSt13runtime_errorC2ERKSs>
 100736c:	008040b4 	movhi	r2,258
 1007370:	1098a304 	addi	r2,r2,25228
 1007374:	80800015 	stw	r2,0(r16)
 1007378:	dfc00117 	ldw	ra,4(sp)
 100737c:	dc000017 	ldw	r16,0(sp)
 1007380:	dec00204 	addi	sp,sp,8
 1007384:	f800283a 	ret

01007388 <_ZNSt11range_errorC1ERKSs>:
 1007388:	defffe04 	addi	sp,sp,-8
 100738c:	dc000015 	stw	r16,0(sp)
 1007390:	dfc00115 	stw	ra,4(sp)
 1007394:	2021883a 	mov	r16,r4
 1007398:	10072180 	call	1007218 <_ZNSt13runtime_errorC2ERKSs>
 100739c:	008040b4 	movhi	r2,258
 10073a0:	1098af04 	addi	r2,r2,25276
 10073a4:	80800015 	stw	r2,0(r16)
 10073a8:	dfc00117 	ldw	ra,4(sp)
 10073ac:	dc000017 	ldw	r16,0(sp)
 10073b0:	dec00204 	addi	sp,sp,8
 10073b4:	f800283a 	ret

010073b8 <_ZNSt11range_errorC2ERKSs>:
 10073b8:	defffe04 	addi	sp,sp,-8
 10073bc:	dc000015 	stw	r16,0(sp)
 10073c0:	dfc00115 	stw	ra,4(sp)
 10073c4:	2021883a 	mov	r16,r4
 10073c8:	10072180 	call	1007218 <_ZNSt13runtime_errorC2ERKSs>
 10073cc:	008040b4 	movhi	r2,258
 10073d0:	1098af04 	addi	r2,r2,25276
 10073d4:	80800015 	stw	r2,0(r16)
 10073d8:	dfc00117 	ldw	ra,4(sp)
 10073dc:	dc000017 	ldw	r16,0(sp)
 10073e0:	dec00204 	addi	sp,sp,8
 10073e4:	f800283a 	ret

010073e8 <_ZNSt11logic_errorC1ERKSs>:
 10073e8:	deffed04 	addi	sp,sp,-76
 10073ec:	00804074 	movhi	r2,257
 10073f0:	10b41004 	addi	r2,r2,-12224
 10073f4:	00c040b4 	movhi	r3,258
 10073f8:	18d667c4 	addi	r3,r3,22943
 10073fc:	d8800615 	stw	r2,24(sp)
 1007400:	d9000d15 	stw	r4,52(sp)
 1007404:	00804034 	movhi	r2,256
 1007408:	109d1e04 	addi	r2,r2,29816
 100740c:	d809883a 	mov	r4,sp
 1007410:	d8c00715 	stw	r3,28(sp)
 1007414:	d8800915 	stw	r2,36(sp)
 1007418:	d9400e15 	stw	r5,56(sp)
 100741c:	dfc01215 	stw	ra,72(sp)
 1007420:	df001115 	stw	fp,68(sp)
 1007424:	ddc01015 	stw	r23,64(sp)
 1007428:	dec00815 	stw	sp,32(sp)
 100742c:	dec00a15 	stw	sp,40(sp)
 1007430:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1007434:	d8c00d17 	ldw	r3,52(sp)
 1007438:	008040b4 	movhi	r2,258
 100743c:	1098fc04 	addi	r2,r2,25584
 1007440:	d9400e17 	ldw	r5,56(sp)
 1007444:	18800015 	stw	r2,0(r3)
 1007448:	d8800d17 	ldw	r2,52(sp)
 100744c:	00c00044 	movi	r3,1
 1007450:	d8c00115 	stw	r3,4(sp)
 1007454:	11000104 	addi	r4,r2,4
 1007458:	1009a800 	call	1009a80 <_ZNSsC1ERKSs>
 100745c:	d809883a 	mov	r4,sp
 1007460:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1007464:	dfc01217 	ldw	ra,72(sp)
 1007468:	df001117 	ldw	fp,68(sp)
 100746c:	ddc01017 	ldw	r23,64(sp)
 1007470:	dec01304 	addi	sp,sp,76
 1007474:	f800283a 	ret
 1007478:	d8c00217 	ldw	r3,8(sp)
 100747c:	d9000d17 	ldw	r4,52(sp)
 1007480:	d8c00f15 	stw	r3,60(sp)
 1007484:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007488:	d9000f17 	ldw	r4,60(sp)
 100748c:	00bfffc4 	movi	r2,-1
 1007490:	d8800115 	stw	r2,4(sp)
 1007494:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>

01007498 <_ZNSt11logic_errorC2ERKSs>:
 1007498:	deffed04 	addi	sp,sp,-76
 100749c:	00804074 	movhi	r2,257
 10074a0:	10b41004 	addi	r2,r2,-12224
 10074a4:	00c040b4 	movhi	r3,258
 10074a8:	18d66944 	addi	r3,r3,22949
 10074ac:	d8800615 	stw	r2,24(sp)
 10074b0:	d9000d15 	stw	r4,52(sp)
 10074b4:	00804034 	movhi	r2,256
 10074b8:	109d4a04 	addi	r2,r2,29992
 10074bc:	d809883a 	mov	r4,sp
 10074c0:	d8c00715 	stw	r3,28(sp)
 10074c4:	d8800915 	stw	r2,36(sp)
 10074c8:	d9400e15 	stw	r5,56(sp)
 10074cc:	dfc01215 	stw	ra,72(sp)
 10074d0:	df001115 	stw	fp,68(sp)
 10074d4:	ddc01015 	stw	r23,64(sp)
 10074d8:	dec00815 	stw	sp,32(sp)
 10074dc:	dec00a15 	stw	sp,40(sp)
 10074e0:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 10074e4:	d8c00d17 	ldw	r3,52(sp)
 10074e8:	008040b4 	movhi	r2,258
 10074ec:	1098fc04 	addi	r2,r2,25584
 10074f0:	d9400e17 	ldw	r5,56(sp)
 10074f4:	18800015 	stw	r2,0(r3)
 10074f8:	d8800d17 	ldw	r2,52(sp)
 10074fc:	00c00044 	movi	r3,1
 1007500:	d8c00115 	stw	r3,4(sp)
 1007504:	11000104 	addi	r4,r2,4
 1007508:	1009a800 	call	1009a80 <_ZNSsC1ERKSs>
 100750c:	d809883a 	mov	r4,sp
 1007510:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1007514:	dfc01217 	ldw	ra,72(sp)
 1007518:	df001117 	ldw	fp,68(sp)
 100751c:	ddc01017 	ldw	r23,64(sp)
 1007520:	dec01304 	addi	sp,sp,76
 1007524:	f800283a 	ret
 1007528:	d8c00217 	ldw	r3,8(sp)
 100752c:	d9000d17 	ldw	r4,52(sp)
 1007530:	d8c00f15 	stw	r3,60(sp)
 1007534:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007538:	d9000f17 	ldw	r4,60(sp)
 100753c:	00bfffc4 	movi	r2,-1
 1007540:	d8800115 	stw	r2,4(sp)
 1007544:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>

01007548 <_ZNSt12out_of_rangeC1ERKSs>:
 1007548:	defffe04 	addi	sp,sp,-8
 100754c:	dc000015 	stw	r16,0(sp)
 1007550:	dfc00115 	stw	ra,4(sp)
 1007554:	2021883a 	mov	r16,r4
 1007558:	10074980 	call	1007498 <_ZNSt11logic_errorC2ERKSs>
 100755c:	008040b4 	movhi	r2,258
 1007560:	1098bc04 	addi	r2,r2,25328
 1007564:	80800015 	stw	r2,0(r16)
 1007568:	dfc00117 	ldw	ra,4(sp)
 100756c:	dc000017 	ldw	r16,0(sp)
 1007570:	dec00204 	addi	sp,sp,8
 1007574:	f800283a 	ret

01007578 <_ZNSt12out_of_rangeC2ERKSs>:
 1007578:	defffe04 	addi	sp,sp,-8
 100757c:	dc000015 	stw	r16,0(sp)
 1007580:	dfc00115 	stw	ra,4(sp)
 1007584:	2021883a 	mov	r16,r4
 1007588:	10074980 	call	1007498 <_ZNSt11logic_errorC2ERKSs>
 100758c:	008040b4 	movhi	r2,258
 1007590:	1098bc04 	addi	r2,r2,25328
 1007594:	80800015 	stw	r2,0(r16)
 1007598:	dfc00117 	ldw	ra,4(sp)
 100759c:	dc000017 	ldw	r16,0(sp)
 10075a0:	dec00204 	addi	sp,sp,8
 10075a4:	f800283a 	ret

010075a8 <_ZNSt12length_errorC1ERKSs>:
 10075a8:	defffe04 	addi	sp,sp,-8
 10075ac:	dc000015 	stw	r16,0(sp)
 10075b0:	dfc00115 	stw	ra,4(sp)
 10075b4:	2021883a 	mov	r16,r4
 10075b8:	10074980 	call	1007498 <_ZNSt11logic_errorC2ERKSs>
 10075bc:	008040b4 	movhi	r2,258
 10075c0:	1098c904 	addi	r2,r2,25380
 10075c4:	80800015 	stw	r2,0(r16)
 10075c8:	dfc00117 	ldw	ra,4(sp)
 10075cc:	dc000017 	ldw	r16,0(sp)
 10075d0:	dec00204 	addi	sp,sp,8
 10075d4:	f800283a 	ret

010075d8 <_ZNSt12length_errorC2ERKSs>:
 10075d8:	defffe04 	addi	sp,sp,-8
 10075dc:	dc000015 	stw	r16,0(sp)
 10075e0:	dfc00115 	stw	ra,4(sp)
 10075e4:	2021883a 	mov	r16,r4
 10075e8:	10074980 	call	1007498 <_ZNSt11logic_errorC2ERKSs>
 10075ec:	008040b4 	movhi	r2,258
 10075f0:	1098c904 	addi	r2,r2,25380
 10075f4:	80800015 	stw	r2,0(r16)
 10075f8:	dfc00117 	ldw	ra,4(sp)
 10075fc:	dc000017 	ldw	r16,0(sp)
 1007600:	dec00204 	addi	sp,sp,8
 1007604:	f800283a 	ret

01007608 <_ZNSt16invalid_argumentC1ERKSs>:
 1007608:	defffe04 	addi	sp,sp,-8
 100760c:	dc000015 	stw	r16,0(sp)
 1007610:	dfc00115 	stw	ra,4(sp)
 1007614:	2021883a 	mov	r16,r4
 1007618:	10074980 	call	1007498 <_ZNSt11logic_errorC2ERKSs>
 100761c:	008040b4 	movhi	r2,258
 1007620:	1098d704 	addi	r2,r2,25436
 1007624:	80800015 	stw	r2,0(r16)
 1007628:	dfc00117 	ldw	ra,4(sp)
 100762c:	dc000017 	ldw	r16,0(sp)
 1007630:	dec00204 	addi	sp,sp,8
 1007634:	f800283a 	ret

01007638 <_ZNSt16invalid_argumentC2ERKSs>:
 1007638:	defffe04 	addi	sp,sp,-8
 100763c:	dc000015 	stw	r16,0(sp)
 1007640:	dfc00115 	stw	ra,4(sp)
 1007644:	2021883a 	mov	r16,r4
 1007648:	10074980 	call	1007498 <_ZNSt11logic_errorC2ERKSs>
 100764c:	008040b4 	movhi	r2,258
 1007650:	1098d704 	addi	r2,r2,25436
 1007654:	80800015 	stw	r2,0(r16)
 1007658:	dfc00117 	ldw	ra,4(sp)
 100765c:	dc000017 	ldw	r16,0(sp)
 1007660:	dec00204 	addi	sp,sp,8
 1007664:	f800283a 	ret

01007668 <_ZNSt12domain_errorC1ERKSs>:
 1007668:	defffe04 	addi	sp,sp,-8
 100766c:	dc000015 	stw	r16,0(sp)
 1007670:	dfc00115 	stw	ra,4(sp)
 1007674:	2021883a 	mov	r16,r4
 1007678:	10074980 	call	1007498 <_ZNSt11logic_errorC2ERKSs>
 100767c:	008040b4 	movhi	r2,258
 1007680:	1098e404 	addi	r2,r2,25488
 1007684:	80800015 	stw	r2,0(r16)
 1007688:	dfc00117 	ldw	ra,4(sp)
 100768c:	dc000017 	ldw	r16,0(sp)
 1007690:	dec00204 	addi	sp,sp,8
 1007694:	f800283a 	ret

01007698 <_ZNSt12domain_errorC2ERKSs>:
 1007698:	defffe04 	addi	sp,sp,-8
 100769c:	dc000015 	stw	r16,0(sp)
 10076a0:	dfc00115 	stw	ra,4(sp)
 10076a4:	2021883a 	mov	r16,r4
 10076a8:	10074980 	call	1007498 <_ZNSt11logic_errorC2ERKSs>
 10076ac:	008040b4 	movhi	r2,258
 10076b0:	1098e404 	addi	r2,r2,25488
 10076b4:	80800015 	stw	r2,0(r16)
 10076b8:	dfc00117 	ldw	ra,4(sp)
 10076bc:	dc000017 	ldw	r16,0(sp)
 10076c0:	dec00204 	addi	sp,sp,8
 10076c4:	f800283a 	ret

010076c8 <_ZNKSt11logic_error4whatEv>:
 10076c8:	20800117 	ldw	r2,4(r4)
 10076cc:	f800283a 	ret

010076d0 <_ZNSt13runtime_errorC1ERKSs>:
 10076d0:	deffed04 	addi	sp,sp,-76
 10076d4:	00804074 	movhi	r2,257
 10076d8:	10b41004 	addi	r2,r2,-12224
 10076dc:	00c040b4 	movhi	r3,258
 10076e0:	18d66ac4 	addi	r3,r3,22955
 10076e4:	d8800615 	stw	r2,24(sp)
 10076e8:	d9000d15 	stw	r4,52(sp)
 10076ec:	00804034 	movhi	r2,256
 10076f0:	109dd804 	addi	r2,r2,30560
 10076f4:	d809883a 	mov	r4,sp
 10076f8:	d8c00715 	stw	r3,28(sp)
 10076fc:	d8800915 	stw	r2,36(sp)
 1007700:	d9400e15 	stw	r5,56(sp)
 1007704:	dfc01215 	stw	ra,72(sp)
 1007708:	df001115 	stw	fp,68(sp)
 100770c:	ddc01015 	stw	r23,64(sp)
 1007710:	dec00815 	stw	sp,32(sp)
 1007714:	dec00a15 	stw	sp,40(sp)
 1007718:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100771c:	d8c00d17 	ldw	r3,52(sp)
 1007720:	008040b4 	movhi	r2,258
 1007724:	1098f704 	addi	r2,r2,25564
 1007728:	d9400e17 	ldw	r5,56(sp)
 100772c:	18800015 	stw	r2,0(r3)
 1007730:	d8800d17 	ldw	r2,52(sp)
 1007734:	00c00044 	movi	r3,1
 1007738:	d8c00115 	stw	r3,4(sp)
 100773c:	11000104 	addi	r4,r2,4
 1007740:	1009a800 	call	1009a80 <_ZNSsC1ERKSs>
 1007744:	d809883a 	mov	r4,sp
 1007748:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100774c:	dfc01217 	ldw	ra,72(sp)
 1007750:	df001117 	ldw	fp,68(sp)
 1007754:	ddc01017 	ldw	r23,64(sp)
 1007758:	dec01304 	addi	sp,sp,76
 100775c:	f800283a 	ret
 1007760:	d8c00217 	ldw	r3,8(sp)
 1007764:	d9000d17 	ldw	r4,52(sp)
 1007768:	d8c00f15 	stw	r3,60(sp)
 100776c:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007770:	d9000f17 	ldw	r4,60(sp)
 1007774:	00bfffc4 	movi	r2,-1
 1007778:	d8800115 	stw	r2,4(sp)
 100777c:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>

01007780 <_ZNSt13runtime_errorD1Ev>:
 1007780:	deffeb04 	addi	sp,sp,-84
 1007784:	00804074 	movhi	r2,257
 1007788:	10b41004 	addi	r2,r2,-12224
 100778c:	00c040b4 	movhi	r3,258
 1007790:	18d66d04 	addi	r3,r3,22964
 1007794:	d8800715 	stw	r2,28(sp)
 1007798:	d9001015 	stw	r4,64(sp)
 100779c:	00804034 	movhi	r2,256
 10077a0:	109e1104 	addi	r2,r2,30788
 10077a4:	d9000104 	addi	r4,sp,4
 10077a8:	d8c00815 	stw	r3,32(sp)
 10077ac:	d8800a15 	stw	r2,40(sp)
 10077b0:	dfc01415 	stw	ra,80(sp)
 10077b4:	df001315 	stw	fp,76(sp)
 10077b8:	ddc01215 	stw	r23,72(sp)
 10077bc:	dec00915 	stw	sp,36(sp)
 10077c0:	dec00b15 	stw	sp,44(sp)
 10077c4:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 10077c8:	d8c01017 	ldw	r3,64(sp)
 10077cc:	18800117 	ldw	r2,4(r3)
 10077d0:	00c040b4 	movhi	r3,258
 10077d4:	18d8f704 	addi	r3,r3,25564
 10077d8:	10bffd04 	addi	r2,r2,-12
 10077dc:	d8800e15 	stw	r2,56(sp)
 10077e0:	d8801017 	ldw	r2,64(sp)
 10077e4:	10c00015 	stw	r3,0(r2)
 10077e8:	d8c00e17 	ldw	r3,56(sp)
 10077ec:	008040f4 	movhi	r2,259
 10077f0:	109c3204 	addi	r2,r2,28872
 10077f4:	1880091e 	bne	r3,r2,100781c <_ZNSt13runtime_errorD1Ev+0x9c>
 10077f8:	d9001017 	ldw	r4,64(sp)
 10077fc:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007800:	d9000104 	addi	r4,sp,4
 1007804:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1007808:	dfc01417 	ldw	ra,80(sp)
 100780c:	df001317 	ldw	fp,76(sp)
 1007810:	ddc01217 	ldw	r23,72(sp)
 1007814:	dec01504 	addi	sp,sp,84
 1007818:	f800283a 	ret
 100781c:	00800044 	movi	r2,1
 1007820:	d8800215 	stw	r2,8(sp)
 1007824:	19000204 	addi	r4,r3,8
 1007828:	017fffc4 	movi	r5,-1
 100782c:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007830:	00bff116 	blt	zero,r2,10077f8 <_ZNSt13runtime_errorD1Ev+0x78>
 1007834:	d9000e17 	ldw	r4,56(sp)
 1007838:	d80b883a 	mov	r5,sp
 100783c:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007840:	003fed06 	br	10077f8 <_ZNSt13runtime_errorD1Ev+0x78>
 1007844:	d8800417 	ldw	r2,16(sp)
 1007848:	d8c00317 	ldw	r3,12(sp)
 100784c:	d9001017 	ldw	r4,64(sp)
 1007850:	d8800f15 	stw	r2,60(sp)
 1007854:	d8c01115 	stw	r3,68(sp)
 1007858:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 100785c:	d8c00f17 	ldw	r3,60(sp)
 1007860:	00bfffc4 	movi	r2,-1
 1007864:	18800326 	beq	r3,r2,1007874 <_ZNSt13runtime_errorD1Ev+0xf4>
 1007868:	d9001117 	ldw	r4,68(sp)
 100786c:	d8800215 	stw	r2,8(sp)
 1007870:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1007874:	d9001117 	ldw	r4,68(sp)
 1007878:	00bfffc4 	movi	r2,-1
 100787c:	d8800215 	stw	r2,8(sp)
 1007880:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01007884 <_ZNSt13runtime_errorD2Ev>:
 1007884:	deffeb04 	addi	sp,sp,-84
 1007888:	00804074 	movhi	r2,257
 100788c:	10b41004 	addi	r2,r2,-12224
 1007890:	00c040b4 	movhi	r3,258
 1007894:	18d67104 	addi	r3,r3,22980
 1007898:	d8800715 	stw	r2,28(sp)
 100789c:	d9001015 	stw	r4,64(sp)
 10078a0:	00804034 	movhi	r2,256
 10078a4:	109e5204 	addi	r2,r2,31048
 10078a8:	d9000104 	addi	r4,sp,4
 10078ac:	d8c00815 	stw	r3,32(sp)
 10078b0:	d8800a15 	stw	r2,40(sp)
 10078b4:	dfc01415 	stw	ra,80(sp)
 10078b8:	df001315 	stw	fp,76(sp)
 10078bc:	ddc01215 	stw	r23,72(sp)
 10078c0:	dec00915 	stw	sp,36(sp)
 10078c4:	dec00b15 	stw	sp,44(sp)
 10078c8:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 10078cc:	d8c01017 	ldw	r3,64(sp)
 10078d0:	18800117 	ldw	r2,4(r3)
 10078d4:	00c040b4 	movhi	r3,258
 10078d8:	18d8f704 	addi	r3,r3,25564
 10078dc:	10bffd04 	addi	r2,r2,-12
 10078e0:	d8800e15 	stw	r2,56(sp)
 10078e4:	d8801017 	ldw	r2,64(sp)
 10078e8:	10c00015 	stw	r3,0(r2)
 10078ec:	d8c00e17 	ldw	r3,56(sp)
 10078f0:	008040f4 	movhi	r2,259
 10078f4:	109c3204 	addi	r2,r2,28872
 10078f8:	1880091e 	bne	r3,r2,1007920 <_ZNSt13runtime_errorD2Ev+0x9c>
 10078fc:	d9001017 	ldw	r4,64(sp)
 1007900:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007904:	d9000104 	addi	r4,sp,4
 1007908:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100790c:	dfc01417 	ldw	ra,80(sp)
 1007910:	df001317 	ldw	fp,76(sp)
 1007914:	ddc01217 	ldw	r23,72(sp)
 1007918:	dec01504 	addi	sp,sp,84
 100791c:	f800283a 	ret
 1007920:	00800044 	movi	r2,1
 1007924:	d8800215 	stw	r2,8(sp)
 1007928:	19000204 	addi	r4,r3,8
 100792c:	017fffc4 	movi	r5,-1
 1007930:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007934:	00bff116 	blt	zero,r2,10078fc <_ZNSt13runtime_errorD2Ev+0x78>
 1007938:	d9000e17 	ldw	r4,56(sp)
 100793c:	d80b883a 	mov	r5,sp
 1007940:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007944:	003fed06 	br	10078fc <_ZNSt13runtime_errorD2Ev+0x78>
 1007948:	d8800417 	ldw	r2,16(sp)
 100794c:	d8c00317 	ldw	r3,12(sp)
 1007950:	d9001017 	ldw	r4,64(sp)
 1007954:	d8800f15 	stw	r2,60(sp)
 1007958:	d8c01115 	stw	r3,68(sp)
 100795c:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007960:	d8c00f17 	ldw	r3,60(sp)
 1007964:	00bfffc4 	movi	r2,-1
 1007968:	18800326 	beq	r3,r2,1007978 <_ZNSt13runtime_errorD2Ev+0xf4>
 100796c:	d9001117 	ldw	r4,68(sp)
 1007970:	d8800215 	stw	r2,8(sp)
 1007974:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1007978:	d9001117 	ldw	r4,68(sp)
 100797c:	00bfffc4 	movi	r2,-1
 1007980:	d8800215 	stw	r2,8(sp)
 1007984:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01007988 <_ZNSt13runtime_errorD0Ev>:
 1007988:	deffeb04 	addi	sp,sp,-84
 100798c:	00804074 	movhi	r2,257
 1007990:	10b41004 	addi	r2,r2,-12224
 1007994:	00c040b4 	movhi	r3,258
 1007998:	18d67504 	addi	r3,r3,22996
 100799c:	d8800715 	stw	r2,28(sp)
 10079a0:	d9001015 	stw	r4,64(sp)
 10079a4:	00804034 	movhi	r2,256
 10079a8:	109e9504 	addi	r2,r2,31316
 10079ac:	d9000104 	addi	r4,sp,4
 10079b0:	d8c00815 	stw	r3,32(sp)
 10079b4:	d8800a15 	stw	r2,40(sp)
 10079b8:	dfc01415 	stw	ra,80(sp)
 10079bc:	df001315 	stw	fp,76(sp)
 10079c0:	ddc01215 	stw	r23,72(sp)
 10079c4:	dec00915 	stw	sp,36(sp)
 10079c8:	dec00b15 	stw	sp,44(sp)
 10079cc:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 10079d0:	d8c01017 	ldw	r3,64(sp)
 10079d4:	18800117 	ldw	r2,4(r3)
 10079d8:	00c040b4 	movhi	r3,258
 10079dc:	18d8f704 	addi	r3,r3,25564
 10079e0:	10bffd04 	addi	r2,r2,-12
 10079e4:	d8800e15 	stw	r2,56(sp)
 10079e8:	d8801017 	ldw	r2,64(sp)
 10079ec:	10c00015 	stw	r3,0(r2)
 10079f0:	d8c00e17 	ldw	r3,56(sp)
 10079f4:	008040f4 	movhi	r2,259
 10079f8:	109c3204 	addi	r2,r2,28872
 10079fc:	18800b1e 	bne	r3,r2,1007a2c <_ZNSt13runtime_errorD0Ev+0xa4>
 1007a00:	d9001017 	ldw	r4,64(sp)
 1007a04:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007a08:	d9001017 	ldw	r4,64(sp)
 1007a0c:	100d8100 	call	100d810 <_ZdlPv>
 1007a10:	d9000104 	addi	r4,sp,4
 1007a14:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1007a18:	dfc01417 	ldw	ra,80(sp)
 1007a1c:	df001317 	ldw	fp,76(sp)
 1007a20:	ddc01217 	ldw	r23,72(sp)
 1007a24:	dec01504 	addi	sp,sp,84
 1007a28:	f800283a 	ret
 1007a2c:	00800044 	movi	r2,1
 1007a30:	d8800215 	stw	r2,8(sp)
 1007a34:	19000204 	addi	r4,r3,8
 1007a38:	017fffc4 	movi	r5,-1
 1007a3c:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007a40:	00bfef16 	blt	zero,r2,1007a00 <_ZNSt13runtime_errorD0Ev+0x78>
 1007a44:	d9000e17 	ldw	r4,56(sp)
 1007a48:	d80b883a 	mov	r5,sp
 1007a4c:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007a50:	003feb06 	br	1007a00 <_ZNSt13runtime_errorD0Ev+0x78>
 1007a54:	d8800417 	ldw	r2,16(sp)
 1007a58:	d8c00317 	ldw	r3,12(sp)
 1007a5c:	d9001017 	ldw	r4,64(sp)
 1007a60:	d8800f15 	stw	r2,60(sp)
 1007a64:	d8c01115 	stw	r3,68(sp)
 1007a68:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007a6c:	d8c00f17 	ldw	r3,60(sp)
 1007a70:	00bfffc4 	movi	r2,-1
 1007a74:	18800326 	beq	r3,r2,1007a84 <_ZNSt13runtime_errorD0Ev+0xfc>
 1007a78:	d9001117 	ldw	r4,68(sp)
 1007a7c:	d8800215 	stw	r2,8(sp)
 1007a80:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1007a84:	d9001117 	ldw	r4,68(sp)
 1007a88:	00bfffc4 	movi	r2,-1
 1007a8c:	d8800215 	stw	r2,8(sp)
 1007a90:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01007a94 <_ZNSt11logic_errorD2Ev>:
 1007a94:	deffeb04 	addi	sp,sp,-84
 1007a98:	00804074 	movhi	r2,257
 1007a9c:	10b41004 	addi	r2,r2,-12224
 1007aa0:	00c040b4 	movhi	r3,258
 1007aa4:	18d67904 	addi	r3,r3,23012
 1007aa8:	d8800715 	stw	r2,28(sp)
 1007aac:	d9001015 	stw	r4,64(sp)
 1007ab0:	00804034 	movhi	r2,256
 1007ab4:	109ed604 	addi	r2,r2,31576
 1007ab8:	d9000104 	addi	r4,sp,4
 1007abc:	d8c00815 	stw	r3,32(sp)
 1007ac0:	d8800a15 	stw	r2,40(sp)
 1007ac4:	dfc01415 	stw	ra,80(sp)
 1007ac8:	df001315 	stw	fp,76(sp)
 1007acc:	ddc01215 	stw	r23,72(sp)
 1007ad0:	dec00915 	stw	sp,36(sp)
 1007ad4:	dec00b15 	stw	sp,44(sp)
 1007ad8:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1007adc:	d8c01017 	ldw	r3,64(sp)
 1007ae0:	18800117 	ldw	r2,4(r3)
 1007ae4:	00c040b4 	movhi	r3,258
 1007ae8:	18d8fc04 	addi	r3,r3,25584
 1007aec:	10bffd04 	addi	r2,r2,-12
 1007af0:	d8800e15 	stw	r2,56(sp)
 1007af4:	d8801017 	ldw	r2,64(sp)
 1007af8:	10c00015 	stw	r3,0(r2)
 1007afc:	d8c00e17 	ldw	r3,56(sp)
 1007b00:	008040f4 	movhi	r2,259
 1007b04:	109c3204 	addi	r2,r2,28872
 1007b08:	1880091e 	bne	r3,r2,1007b30 <_ZNSt11logic_errorD2Ev+0x9c>
 1007b0c:	d9001017 	ldw	r4,64(sp)
 1007b10:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007b14:	d9000104 	addi	r4,sp,4
 1007b18:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1007b1c:	dfc01417 	ldw	ra,80(sp)
 1007b20:	df001317 	ldw	fp,76(sp)
 1007b24:	ddc01217 	ldw	r23,72(sp)
 1007b28:	dec01504 	addi	sp,sp,84
 1007b2c:	f800283a 	ret
 1007b30:	00800044 	movi	r2,1
 1007b34:	d8800215 	stw	r2,8(sp)
 1007b38:	19000204 	addi	r4,r3,8
 1007b3c:	017fffc4 	movi	r5,-1
 1007b40:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007b44:	00bff116 	blt	zero,r2,1007b0c <_ZNSt11logic_errorD2Ev+0x78>
 1007b48:	d9000e17 	ldw	r4,56(sp)
 1007b4c:	d80b883a 	mov	r5,sp
 1007b50:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007b54:	003fed06 	br	1007b0c <_ZNSt11logic_errorD2Ev+0x78>
 1007b58:	d8800417 	ldw	r2,16(sp)
 1007b5c:	d8c00317 	ldw	r3,12(sp)
 1007b60:	d9001017 	ldw	r4,64(sp)
 1007b64:	d8800f15 	stw	r2,60(sp)
 1007b68:	d8c01115 	stw	r3,68(sp)
 1007b6c:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007b70:	d8c00f17 	ldw	r3,60(sp)
 1007b74:	00bfffc4 	movi	r2,-1
 1007b78:	18800326 	beq	r3,r2,1007b88 <_ZNSt11logic_errorD2Ev+0xf4>
 1007b7c:	d9001117 	ldw	r4,68(sp)
 1007b80:	d8800215 	stw	r2,8(sp)
 1007b84:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1007b88:	d9001117 	ldw	r4,68(sp)
 1007b8c:	00bfffc4 	movi	r2,-1
 1007b90:	d8800215 	stw	r2,8(sp)
 1007b94:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01007b98 <_ZNSt11logic_errorD0Ev>:
 1007b98:	deffeb04 	addi	sp,sp,-84
 1007b9c:	00804074 	movhi	r2,257
 1007ba0:	10b41004 	addi	r2,r2,-12224
 1007ba4:	00c040b4 	movhi	r3,258
 1007ba8:	18d67d04 	addi	r3,r3,23028
 1007bac:	d8800715 	stw	r2,28(sp)
 1007bb0:	d9001015 	stw	r4,64(sp)
 1007bb4:	00804034 	movhi	r2,256
 1007bb8:	109f1904 	addi	r2,r2,31844
 1007bbc:	d9000104 	addi	r4,sp,4
 1007bc0:	d8c00815 	stw	r3,32(sp)
 1007bc4:	d8800a15 	stw	r2,40(sp)
 1007bc8:	dfc01415 	stw	ra,80(sp)
 1007bcc:	df001315 	stw	fp,76(sp)
 1007bd0:	ddc01215 	stw	r23,72(sp)
 1007bd4:	dec00915 	stw	sp,36(sp)
 1007bd8:	dec00b15 	stw	sp,44(sp)
 1007bdc:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1007be0:	d8c01017 	ldw	r3,64(sp)
 1007be4:	18800117 	ldw	r2,4(r3)
 1007be8:	00c040b4 	movhi	r3,258
 1007bec:	18d8fc04 	addi	r3,r3,25584
 1007bf0:	10bffd04 	addi	r2,r2,-12
 1007bf4:	d8800e15 	stw	r2,56(sp)
 1007bf8:	d8801017 	ldw	r2,64(sp)
 1007bfc:	10c00015 	stw	r3,0(r2)
 1007c00:	d8c00e17 	ldw	r3,56(sp)
 1007c04:	008040f4 	movhi	r2,259
 1007c08:	109c3204 	addi	r2,r2,28872
 1007c0c:	18800b1e 	bne	r3,r2,1007c3c <_ZNSt11logic_errorD0Ev+0xa4>
 1007c10:	d9001017 	ldw	r4,64(sp)
 1007c14:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007c18:	d9001017 	ldw	r4,64(sp)
 1007c1c:	100d8100 	call	100d810 <_ZdlPv>
 1007c20:	d9000104 	addi	r4,sp,4
 1007c24:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1007c28:	dfc01417 	ldw	ra,80(sp)
 1007c2c:	df001317 	ldw	fp,76(sp)
 1007c30:	ddc01217 	ldw	r23,72(sp)
 1007c34:	dec01504 	addi	sp,sp,84
 1007c38:	f800283a 	ret
 1007c3c:	00800044 	movi	r2,1
 1007c40:	d8800215 	stw	r2,8(sp)
 1007c44:	19000204 	addi	r4,r3,8
 1007c48:	017fffc4 	movi	r5,-1
 1007c4c:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007c50:	00bfef16 	blt	zero,r2,1007c10 <_ZNSt11logic_errorD0Ev+0x78>
 1007c54:	d9000e17 	ldw	r4,56(sp)
 1007c58:	d80b883a 	mov	r5,sp
 1007c5c:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007c60:	003feb06 	br	1007c10 <_ZNSt11logic_errorD0Ev+0x78>
 1007c64:	d8800417 	ldw	r2,16(sp)
 1007c68:	d8c00317 	ldw	r3,12(sp)
 1007c6c:	d9001017 	ldw	r4,64(sp)
 1007c70:	d8800f15 	stw	r2,60(sp)
 1007c74:	d8c01115 	stw	r3,68(sp)
 1007c78:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 1007c7c:	d8c00f17 	ldw	r3,60(sp)
 1007c80:	00bfffc4 	movi	r2,-1
 1007c84:	18800326 	beq	r3,r2,1007c94 <_ZNSt11logic_errorD0Ev+0xfc>
 1007c88:	d9001117 	ldw	r4,68(sp)
 1007c8c:	d8800215 	stw	r2,8(sp)
 1007c90:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1007c94:	d9001117 	ldw	r4,68(sp)
 1007c98:	00bfffc4 	movi	r2,-1
 1007c9c:	d8800215 	stw	r2,8(sp)
 1007ca0:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01007ca4 <_ZNSaIcEC1Ev>:
 1007ca4:	f800283a 	ret

01007ca8 <_ZNSaIcED2Ev>:
 1007ca8:	f800283a 	ret

01007cac <_ZNSaIcEC2ERKS_>:
 1007cac:	f800283a 	ret

01007cb0 <_ZNSaIwEC2Ev>:
 1007cb0:	f800283a 	ret

01007cb4 <_ZNSaIwED1Ev>:
 1007cb4:	f800283a 	ret

01007cb8 <_ZNSaIwEC1ERKS_>:
 1007cb8:	f800283a 	ret

01007cbc <_ZNSaIwEC2ERKS_>:
 1007cbc:	f800283a 	ret

01007cc0 <_ZNSaIcEC1ERKS_>:
 1007cc0:	f800283a 	ret

01007cc4 <_ZNSaIwEC1Ev>:
 1007cc4:	f800283a 	ret

01007cc8 <_ZNSaIwED2Ev>:
 1007cc8:	f800283a 	ret

01007ccc <_ZNSaIcEC2Ev>:
 1007ccc:	f800283a 	ret

01007cd0 <_ZNSaIcED1Ev>:
 1007cd0:	f800283a 	ret

01007cd4 <_ZNSt11char_traitsIcE2eqERKcS2_>:
 1007cd4:	20c00007 	ldb	r3,0(r4)
 1007cd8:	28800007 	ldb	r2,0(r5)
 1007cdc:	1885003a 	cmpeq	r2,r3,r2
 1007ce0:	f800283a 	ret

01007ce4 <_ZNKSs7_M_dataEv>:
 1007ce4:	20800017 	ldw	r2,0(r4)
 1007ce8:	f800283a 	ret

01007cec <_ZNSs7_M_dataEPc>:
 1007cec:	2805883a 	mov	r2,r5
 1007cf0:	21400015 	stw	r5,0(r4)
 1007cf4:	f800283a 	ret

01007cf8 <_ZNKSs6_M_repEv>:
 1007cf8:	20800017 	ldw	r2,0(r4)
 1007cfc:	10bffd04 	addi	r2,r2,-12
 1007d00:	f800283a 	ret

01007d04 <_ZNKSs9_M_ibeginEv>:
 1007d04:	20800017 	ldw	r2,0(r4)
 1007d08:	f800283a 	ret

01007d0c <_ZNKSs7_M_iendEv>:
 1007d0c:	20c00017 	ldw	r3,0(r4)
 1007d10:	18bffd17 	ldw	r2,-12(r3)
 1007d14:	1885883a 	add	r2,r3,r2
 1007d18:	f800283a 	ret

01007d1c <_ZNKSs8_M_limitEmm>:
 1007d1c:	20c00017 	ldw	r3,0(r4)
 1007d20:	18bffd17 	ldw	r2,-12(r3)
 1007d24:	1145c83a 	sub	r2,r2,r5
 1007d28:	3080012e 	bgeu	r6,r2,1007d30 <_ZNKSs8_M_limitEmm+0x14>
 1007d2c:	3005883a 	mov	r2,r6
 1007d30:	f800283a 	ret

01007d34 <_ZNKSs11_M_disjunctEPKc>:
 1007d34:	21000017 	ldw	r4,0(r4)
 1007d38:	00800044 	movi	r2,1
 1007d3c:	29000336 	bltu	r5,r4,1007d4c <_ZNKSs11_M_disjunctEPKc+0x18>
 1007d40:	20bffd17 	ldw	r2,-12(r4)
 1007d44:	2085883a 	add	r2,r4,r2
 1007d48:	1145803a 	cmpltu	r2,r2,r5
 1007d4c:	f800283a 	ret

01007d50 <_ZNSs12_S_empty_repEv>:
 1007d50:	008040f4 	movhi	r2,259
 1007d54:	109c3204 	addi	r2,r2,28872
 1007d58:	f800283a 	ret

01007d5c <_ZNSsC1Ev>:
 1007d5c:	008040f4 	movhi	r2,259
 1007d60:	109c3504 	addi	r2,r2,28884
 1007d64:	20800015 	stw	r2,0(r4)
 1007d68:	f800283a 	ret

01007d6c <_ZNKSs5beginEv>:
 1007d6c:	20800017 	ldw	r2,0(r4)
 1007d70:	f800283a 	ret

01007d74 <_ZNKSs3endEv>:
 1007d74:	20c00017 	ldw	r3,0(r4)
 1007d78:	18bffd17 	ldw	r2,-12(r3)
 1007d7c:	1885883a 	add	r2,r3,r2
 1007d80:	f800283a 	ret

01007d84 <_ZNKSs4sizeEv>:
 1007d84:	20c00017 	ldw	r3,0(r4)
 1007d88:	18bffd17 	ldw	r2,-12(r3)
 1007d8c:	f800283a 	ret

01007d90 <_ZNKSs8max_sizeEv>:
 1007d90:	00900034 	movhi	r2,16384
 1007d94:	10bfff04 	addi	r2,r2,-4
 1007d98:	f800283a 	ret

01007d9c <_ZNKSs8capacityEv>:
 1007d9c:	20c00017 	ldw	r3,0(r4)
 1007da0:	18bffe17 	ldw	r2,-8(r3)
 1007da4:	f800283a 	ret

01007da8 <_ZNKSs4dataEv>:
 1007da8:	20800017 	ldw	r2,0(r4)
 1007dac:	f800283a 	ret

01007db0 <_ZNKSs13get_allocatorEv>:
 1007db0:	2005883a 	mov	r2,r4
 1007db4:	f800283a 	ret

01007db8 <_ZNSs12_Alloc_hiderC1EPcRKSaIcE>:
 1007db8:	21400015 	stw	r5,0(r4)
 1007dbc:	f800283a 	ret

01007dc0 <_ZNSs4_Rep12_S_empty_repEv>:
 1007dc0:	008040f4 	movhi	r2,259
 1007dc4:	109c3204 	addi	r2,r2,28872
 1007dc8:	f800283a 	ret

01007dcc <_ZNKSs4_Rep12_M_is_leakedEv>:
 1007dcc:	20800217 	ldw	r2,8(r4)
 1007dd0:	1004d7fa 	srli	r2,r2,31
 1007dd4:	f800283a 	ret

01007dd8 <_ZNKSs4_Rep12_M_is_sharedEv>:
 1007dd8:	20800217 	ldw	r2,8(r4)
 1007ddc:	0084803a 	cmplt	r2,zero,r2
 1007de0:	f800283a 	ret

01007de4 <_ZNSs4_Rep13_M_set_leakedEv>:
 1007de4:	00bfffc4 	movi	r2,-1
 1007de8:	20800215 	stw	r2,8(r4)
 1007dec:	f800283a 	ret

01007df0 <_ZNSs4_Rep15_M_set_sharableEv>:
 1007df0:	20000215 	stw	zero,8(r4)
 1007df4:	f800283a 	ret

01007df8 <_ZNSs4_Rep26_M_set_length_and_sharableEm>:
 1007df8:	2145883a 	add	r2,r4,r5
 1007dfc:	20000215 	stw	zero,8(r4)
 1007e00:	21400015 	stw	r5,0(r4)
 1007e04:	10000305 	stb	zero,12(r2)
 1007e08:	f800283a 	ret

01007e0c <_ZNSs4_Rep10_M_refdataEv>:
 1007e0c:	20800304 	addi	r2,r4,12
 1007e10:	f800283a 	ret

01007e14 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_>:
 1007e14:	defff504 	addi	sp,sp,-44
 1007e18:	dd400615 	stw	r21,24(sp)
 1007e1c:	dd000515 	stw	r20,20(sp)
 1007e20:	dcc00415 	stw	r19,16(sp)
 1007e24:	dc800315 	stw	r18,12(sp)
 1007e28:	dc400215 	stw	r17,8(sp)
 1007e2c:	dfc00a15 	stw	ra,40(sp)
 1007e30:	df000915 	stw	fp,36(sp)
 1007e34:	ddc00815 	stw	r23,32(sp)
 1007e38:	dd800715 	stw	r22,28(sp)
 1007e3c:	dc000115 	stw	r16,4(sp)
 1007e40:	2025883a 	mov	r18,r4
 1007e44:	2823883a 	mov	r17,r5
 1007e48:	3027883a 	mov	r19,r6
 1007e4c:	382b883a 	mov	r21,r7
 1007e50:	dd000b17 	ldw	r20,44(sp)
 1007e54:	21400d26 	beq	r4,r5,1007e8c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1007e58:	31c00c26 	beq	r6,r7,1007e8c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1007e5c:	30800044 	addi	r2,r6,1
 1007e60:	d8800015 	stw	r2,0(sp)
 1007e64:	38803226 	beq	r7,r2,1007f30 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x11c>
 1007e68:	9021883a 	mov	r16,r18
 1007e6c:	8009883a 	mov	r4,r16
 1007e70:	980b883a 	mov	r5,r19
 1007e74:	a03ee83a 	callr	r20
 1007e78:	10803fcc 	andi	r2,r2,255
 1007e7c:	1000101e 	bne	r2,zero,1007ec0 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xac>
 1007e80:	84000044 	addi	r16,r16,1
 1007e84:	847ff91e 	bne	r16,r17,1007e6c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x58>
 1007e88:	8825883a 	mov	r18,r17
 1007e8c:	9005883a 	mov	r2,r18
 1007e90:	dfc00a17 	ldw	ra,40(sp)
 1007e94:	df000917 	ldw	fp,36(sp)
 1007e98:	ddc00817 	ldw	r23,32(sp)
 1007e9c:	dd800717 	ldw	r22,28(sp)
 1007ea0:	dd400617 	ldw	r21,24(sp)
 1007ea4:	dd000517 	ldw	r20,20(sp)
 1007ea8:	dcc00417 	ldw	r19,16(sp)
 1007eac:	dc800317 	ldw	r18,12(sp)
 1007eb0:	dc400217 	ldw	r17,8(sp)
 1007eb4:	dc000117 	ldw	r16,4(sp)
 1007eb8:	dec00b04 	addi	sp,sp,44
 1007ebc:	f800283a 	ret
 1007ec0:	8c3ff126 	beq	r17,r16,1007e88 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x74>
 1007ec4:	8825883a 	mov	r18,r17
 1007ec8:	00000206 	br	1007ed4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xc0>
 1007ecc:	84000044 	addi	r16,r16,1
 1007ed0:	84bfed26 	beq	r16,r18,1007e88 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x74>
 1007ed4:	8009883a 	mov	r4,r16
 1007ed8:	980b883a 	mov	r5,r19
 1007edc:	a03ee83a 	callr	r20
 1007ee0:	10803fcc 	andi	r2,r2,255
 1007ee4:	103ff926 	beq	r2,zero,1007ecc <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xb8>
 1007ee8:	87000044 	addi	fp,r16,1
 1007eec:	8f001a26 	beq	r17,fp,1007f58 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x144>
 1007ef0:	dd800017 	ldw	r22,0(sp)
 1007ef4:	e02f883a 	mov	r23,fp
 1007ef8:	b809883a 	mov	r4,r23
 1007efc:	b00b883a 	mov	r5,r22
 1007f00:	a03ee83a 	callr	r20
 1007f04:	8c07c83a 	sub	r3,r17,r16
 1007f08:	10803fcc 	andi	r2,r2,255
 1007f0c:	98c7883a 	add	r3,r19,r3
 1007f10:	b5800044 	addi	r22,r22,1
 1007f14:	bdc00044 	addi	r23,r23,1
 1007f18:	e025883a 	mov	r18,fp
 1007f1c:	103fd226 	beq	r2,zero,1007e68 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x54>
 1007f20:	ad800b26 	beq	r21,r22,1007f50 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x13c>
 1007f24:	b0fff41e 	bne	r22,r3,1007ef8 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xe4>
 1007f28:	b825883a 	mov	r18,r23
 1007f2c:	003fd706 	br	1007e8c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1007f30:	2021883a 	mov	r16,r4
 1007f34:	8009883a 	mov	r4,r16
 1007f38:	980b883a 	mov	r5,r19
 1007f3c:	a03ee83a 	callr	r20
 1007f40:	10803fcc 	andi	r2,r2,255
 1007f44:	1000021e 	bne	r2,zero,1007f50 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x13c>
 1007f48:	84000044 	addi	r16,r16,1
 1007f4c:	8c3ff91e 	bne	r17,r16,1007f34 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x120>
 1007f50:	8025883a 	mov	r18,r16
 1007f54:	003fcd06 	br	1007e8c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1007f58:	e025883a 	mov	r18,fp
 1007f5c:	003fcb06 	br	1007e8c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>

01007f60 <_ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_>:
 1007f60:	20c00017 	ldw	r3,0(r4)
 1007f64:	28800017 	ldw	r2,0(r5)
 1007f68:	1885003a 	cmpeq	r2,r3,r2
 1007f6c:	f800283a 	ret

01007f70 <_ZNSs12_Alloc_hiderC2EPcRKSaIcE>:
 1007f70:	21400015 	stw	r5,0(r4)
 1007f74:	f800283a 	ret

01007f78 <_ZNSs4_Rep10_M_refcopyEv>:
 1007f78:	deffee04 	addi	sp,sp,-72
 1007f7c:	00804074 	movhi	r2,257
 1007f80:	10b41004 	addi	r2,r2,-12224
 1007f84:	00c040b4 	movhi	r3,258
 1007f88:	18d68104 	addi	r3,r3,23044
 1007f8c:	d8800615 	stw	r2,24(sp)
 1007f90:	d9000d15 	stw	r4,52(sp)
 1007f94:	00804074 	movhi	r2,257
 1007f98:	10a00404 	addi	r2,r2,-32752
 1007f9c:	d809883a 	mov	r4,sp
 1007fa0:	d8c00715 	stw	r3,28(sp)
 1007fa4:	d8800915 	stw	r2,36(sp)
 1007fa8:	dfc01115 	stw	ra,68(sp)
 1007fac:	df001015 	stw	fp,64(sp)
 1007fb0:	ddc00f15 	stw	r23,60(sp)
 1007fb4:	dec00815 	stw	sp,32(sp)
 1007fb8:	dec00a15 	stw	sp,40(sp)
 1007fbc:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1007fc0:	d8c00d17 	ldw	r3,52(sp)
 1007fc4:	008040f4 	movhi	r2,259
 1007fc8:	109c3204 	addi	r2,r2,28872
 1007fcc:	18800b1e 	bne	r3,r2,1007ffc <_ZNSs4_Rep10_M_refcopyEv+0x84>
 1007fd0:	d8800d17 	ldw	r2,52(sp)
 1007fd4:	d809883a 	mov	r4,sp
 1007fd8:	10800304 	addi	r2,r2,12
 1007fdc:	d8800e15 	stw	r2,56(sp)
 1007fe0:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1007fe4:	d8800e17 	ldw	r2,56(sp)
 1007fe8:	dfc01117 	ldw	ra,68(sp)
 1007fec:	df001017 	ldw	fp,64(sp)
 1007ff0:	ddc00f17 	ldw	r23,60(sp)
 1007ff4:	dec01204 	addi	sp,sp,72
 1007ff8:	f800283a 	ret
 1007ffc:	01400044 	movi	r5,1
 1008000:	d9400115 	stw	r5,4(sp)
 1008004:	19000204 	addi	r4,r3,8
 1008008:	100bbac0 	call	100bbac <_ZN9__gnu_cxx12__atomic_addEPVii>
 100800c:	003ff006 	br	1007fd0 <_ZNSs4_Rep10_M_refcopyEv+0x58>
 1008010:	d8800317 	ldw	r2,12(sp)
 1008014:	00ffffc4 	movi	r3,-1
 1008018:	d9000217 	ldw	r4,8(sp)
 100801c:	10c00226 	beq	r2,r3,1008028 <_ZNSs4_Rep10_M_refcopyEv+0xb0>
 1008020:	d8c00115 	stw	r3,4(sp)
 1008024:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1008028:	00bfffc4 	movi	r2,-1
 100802c:	d8800115 	stw	r2,4(sp)
 1008030:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01008034 <_ZNKSs15_M_check_lengthEmmPKc>:
 1008034:	20800017 	ldw	r2,0(r4)
 1008038:	deffff04 	addi	sp,sp,-4
 100803c:	dfc00015 	stw	ra,0(sp)
 1008040:	10fffd17 	ldw	r3,-12(r2)
 1008044:	00900034 	movhi	r2,16384
 1008048:	10bfff04 	addi	r2,r2,-4
 100804c:	1947c83a 	sub	r3,r3,r5
 1008050:	10c5c83a 	sub	r2,r2,r3
 1008054:	11800336 	bltu	r2,r6,1008064 <_ZNKSs15_M_check_lengthEmmPKc+0x30>
 1008058:	dfc00017 	ldw	ra,0(sp)
 100805c:	dec00104 	addi	sp,sp,4
 1008060:	f800283a 	ret
 1008064:	3809883a 	mov	r4,r7
 1008068:	10068e40 	call	10068e4 <_ZSt20__throw_length_errorPKc>

0100806c <_ZNKSs8_M_checkEmPKc>:
 100806c:	20c00017 	ldw	r3,0(r4)
 1008070:	deffff04 	addi	sp,sp,-4
 1008074:	dfc00015 	stw	ra,0(sp)
 1008078:	18bffd17 	ldw	r2,-12(r3)
 100807c:	11400436 	bltu	r2,r5,1008090 <_ZNKSs8_M_checkEmPKc+0x24>
 1008080:	2805883a 	mov	r2,r5
 1008084:	dfc00017 	ldw	ra,0(sp)
 1008088:	dec00104 	addi	sp,sp,4
 100808c:	f800283a 	ret
 1008090:	3009883a 	mov	r4,r6
 1008094:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

01008098 <_ZNSs9_M_assignEPcmc>:
 1008098:	3011883a 	mov	r8,r6
 100809c:	2807883a 	mov	r3,r5
 10080a0:	280d883a 	mov	r6,r5
 10080a4:	41403fcc 	andi	r5,r8,255
 10080a8:	2940201c 	xori	r5,r5,128
 10080ac:	01c00044 	movi	r7,1
 10080b0:	297fe004 	addi	r5,r5,-128
 10080b4:	19c00126 	beq	r3,r7,10080bc <_ZNSs9_M_assignEPcmc+0x24>
 10080b8:	100eecc1 	jmpi	100eecc <memset>
 10080bc:	22000005 	stb	r8,0(r4)
 10080c0:	f800283a 	ret

010080c4 <_ZNSs7_M_moveEPcPKcm>:
 10080c4:	00800044 	movi	r2,1
 10080c8:	30800126 	beq	r6,r2,10080d0 <_ZNSs7_M_moveEPcPKcm+0xc>
 10080cc:	100edec1 	jmpi	100edec <memmove>
 10080d0:	28800003 	ldbu	r2,0(r5)
 10080d4:	20800005 	stb	r2,0(r4)
 10080d8:	f800283a 	ret

010080dc <_ZNSs7_M_copyEPcPKcm>:
 10080dc:	00800044 	movi	r2,1
 10080e0:	30800126 	beq	r6,r2,10080e8 <_ZNSs7_M_copyEPcPKcm+0xc>
 10080e4:	100ed4c1 	jmpi	100ed4c <memcpy>
 10080e8:	28800003 	ldbu	r2,0(r5)
 10080ec:	20800005 	stb	r2,0(r4)
 10080f0:	f800283a 	ret

010080f4 <_ZNKSs5c_strEv>:
 10080f4:	20800017 	ldw	r2,0(r4)
 10080f8:	f800283a 	ret

010080fc <_ZNKSsixEm>:
 10080fc:	20800017 	ldw	r2,0(r4)
 1008100:	2885883a 	add	r2,r5,r2
 1008104:	f800283a 	ret

01008108 <_ZNKSs17find_first_not_ofEPKcmm>:
 1008108:	20c00017 	ldw	r3,0(r4)
 100810c:	defffb04 	addi	sp,sp,-20
 1008110:	dcc00315 	stw	r19,12(sp)
 1008114:	18bffd17 	ldw	r2,-12(r3)
 1008118:	dc800215 	stw	r18,8(sp)
 100811c:	dc400115 	stw	r17,4(sp)
 1008120:	dc000015 	stw	r16,0(sp)
 1008124:	dfc00415 	stw	ra,16(sp)
 1008128:	2027883a 	mov	r19,r4
 100812c:	3021883a 	mov	r16,r6
 1008130:	2825883a 	mov	r18,r5
 1008134:	3823883a 	mov	r17,r7
 1008138:	30800536 	bltu	r6,r2,1008150 <_ZNKSs17find_first_not_ofEPKcmm+0x48>
 100813c:	00001206 	br	1008188 <_ZNKSs17find_first_not_ofEPKcmm+0x80>
 1008140:	98c00017 	ldw	r3,0(r19)
 1008144:	84000044 	addi	r16,r16,1
 1008148:	18bffd17 	ldw	r2,-12(r3)
 100814c:	80800e2e 	bgeu	r16,r2,1008188 <_ZNKSs17find_first_not_ofEPKcmm+0x80>
 1008150:	1c05883a 	add	r2,r3,r16
 1008154:	11400007 	ldb	r5,0(r2)
 1008158:	9009883a 	mov	r4,r18
 100815c:	880d883a 	mov	r6,r17
 1008160:	100ebf40 	call	100ebf4 <memchr>
 1008164:	103ff61e 	bne	r2,zero,1008140 <_ZNKSs17find_first_not_ofEPKcmm+0x38>
 1008168:	8005883a 	mov	r2,r16
 100816c:	dfc00417 	ldw	ra,16(sp)
 1008170:	dcc00317 	ldw	r19,12(sp)
 1008174:	dc800217 	ldw	r18,8(sp)
 1008178:	dc400117 	ldw	r17,4(sp)
 100817c:	dc000017 	ldw	r16,0(sp)
 1008180:	dec00504 	addi	sp,sp,20
 1008184:	f800283a 	ret
 1008188:	043fffc4 	movi	r16,-1
 100818c:	8005883a 	mov	r2,r16
 1008190:	dfc00417 	ldw	ra,16(sp)
 1008194:	dcc00317 	ldw	r19,12(sp)
 1008198:	dc800217 	ldw	r18,8(sp)
 100819c:	dc400117 	ldw	r17,4(sp)
 10081a0:	dc000017 	ldw	r16,0(sp)
 10081a4:	dec00504 	addi	sp,sp,20
 10081a8:	f800283a 	ret

010081ac <_ZNKSs4findEPKcmm>:
 10081ac:	defffb04 	addi	sp,sp,-20
 10081b0:	dc000115 	stw	r16,4(sp)
 10081b4:	24000017 	ldw	r16,0(r4)
 10081b8:	31c7883a 	add	r3,r6,r7
 10081bc:	dc800315 	stw	r18,12(sp)
 10081c0:	823ffd17 	ldw	r8,-12(r16)
 10081c4:	8189883a 	add	r4,r16,r6
 10081c8:	280d883a 	mov	r6,r5
 10081cc:	8225883a 	add	r18,r16,r8
 10081d0:	dc400215 	stw	r17,8(sp)
 10081d4:	dfc00415 	stw	ra,16(sp)
 10081d8:	3823883a 	mov	r17,r7
 10081dc:	900b883a 	mov	r5,r18
 10081e0:	398f883a 	add	r7,r7,r6
 10081e4:	40c0082e 	bgeu	r8,r3,1008208 <_ZNKSs4findEPKcmm+0x5c>
 10081e8:	00ffffc4 	movi	r3,-1
 10081ec:	1805883a 	mov	r2,r3
 10081f0:	dfc00417 	ldw	ra,16(sp)
 10081f4:	dc800317 	ldw	r18,12(sp)
 10081f8:	dc400217 	ldw	r17,8(sp)
 10081fc:	dc000117 	ldw	r16,4(sp)
 1008200:	dec00504 	addi	sp,sp,20
 1008204:	f800283a 	ret
 1008208:	00804034 	movhi	r2,256
 100820c:	109f3504 	addi	r2,r2,31956
 1008210:	d8800015 	stw	r2,0(sp)
 1008214:	1007e140 	call	1007e14 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_>
 1008218:	1407c83a 	sub	r3,r2,r16
 100821c:	90bff31e 	bne	r18,r2,10081ec <_ZNKSs4findEPKcmm+0x40>
 1008220:	883ff11e 	bne	r17,zero,10081e8 <_ZNKSs4findEPKcmm+0x3c>
 1008224:	1805883a 	mov	r2,r3
 1008228:	dfc00417 	ldw	ra,16(sp)
 100822c:	dc800317 	ldw	r18,12(sp)
 1008230:	dc400217 	ldw	r17,8(sp)
 1008234:	dc000117 	ldw	r16,4(sp)
 1008238:	dec00504 	addi	sp,sp,20
 100823c:	f800283a 	ret

01008240 <_ZNKSs2atEm>:
 1008240:	21000017 	ldw	r4,0(r4)
 1008244:	deffff04 	addi	sp,sp,-4
 1008248:	dfc00015 	stw	ra,0(sp)
 100824c:	20bffd17 	ldw	r2,-12(r4)
 1008250:	2880042e 	bgeu	r5,r2,1008264 <_ZNKSs2atEm+0x24>
 1008254:	2145883a 	add	r2,r4,r5
 1008258:	dfc00017 	ldw	ra,0(sp)
 100825c:	dec00104 	addi	sp,sp,4
 1008260:	f800283a 	ret
 1008264:	010040b4 	movhi	r4,258
 1008268:	21190e04 	addi	r4,r4,25656
 100826c:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

01008270 <_ZNKSs5emptyEv>:
 1008270:	20c00017 	ldw	r3,0(r4)
 1008274:	18bffd17 	ldw	r2,-12(r3)
 1008278:	1005003a 	cmpeq	r2,r2,zero
 100827c:	f800283a 	ret

01008280 <_ZNKSs6lengthEv>:
 1008280:	20c00017 	ldw	r3,0(r4)
 1008284:	18bffd17 	ldw	r2,-12(r3)
 1008288:	f800283a 	ret

0100828c <_ZNKSs4findERKSsm>:
 100828c:	29400017 	ldw	r5,0(r5)
 1008290:	29fffd17 	ldw	r7,-12(r5)
 1008294:	10081ac1 	jmpi	10081ac <_ZNKSs4findEPKcmm>

01008298 <_ZNKSs17find_first_not_ofERKSsm>:
 1008298:	29400017 	ldw	r5,0(r5)
 100829c:	29fffd17 	ldw	r7,-12(r5)
 10082a0:	10081081 	jmpi	1008108 <_ZNKSs17find_first_not_ofEPKcmm>

010082a4 <_ZNKSs5rfindEPKcmm>:
 10082a4:	defff804 	addi	sp,sp,-32
 10082a8:	dc800415 	stw	r18,16(sp)
 10082ac:	24800017 	ldw	r18,0(r4)
 10082b0:	dcc00515 	stw	r19,20(sp)
 10082b4:	dc400315 	stw	r17,12(sp)
 10082b8:	90bffd17 	ldw	r2,-12(r18)
 10082bc:	dfc00715 	stw	ra,28(sp)
 10082c0:	dd000615 	stw	r20,24(sp)
 10082c4:	dc000215 	stw	r16,8(sp)
 10082c8:	3823883a 	mov	r17,r7
 10082cc:	2827883a 	mov	r19,r5
 10082d0:	d9800115 	stw	r6,4(sp)
 10082d4:	11c01136 	bltu	r2,r7,100831c <_ZNKSs5rfindEPKcmm+0x78>
 10082d8:	11c5c83a 	sub	r2,r2,r7
 10082dc:	d8800015 	stw	r2,0(sp)
 10082e0:	3080182e 	bgeu	r6,r2,1008344 <_ZNKSs5rfindEPKcmm+0xa0>
 10082e4:	d8800104 	addi	r2,sp,4
 10082e8:	10800017 	ldw	r2,0(r2)
 10082ec:	053fffc4 	movi	r20,-1
 10082f0:	d8800115 	stw	r2,4(sp)
 10082f4:	00000106 	br	10082fc <_ZNKSs5rfindEPKcmm+0x58>
 10082f8:	d8c00115 	stw	r3,4(sp)
 10082fc:	dc000117 	ldw	r16,4(sp)
 1008300:	980b883a 	mov	r5,r19
 1008304:	880d883a 	mov	r6,r17
 1008308:	9409883a 	add	r4,r18,r16
 100830c:	100ecd80 	call	100ecd8 <memcmp>
 1008310:	80ffffc4 	addi	r3,r16,-1
 1008314:	10000226 	beq	r2,zero,1008320 <_ZNKSs5rfindEPKcmm+0x7c>
 1008318:	1d3ff71e 	bne	r3,r20,10082f8 <_ZNKSs5rfindEPKcmm+0x54>
 100831c:	043fffc4 	movi	r16,-1
 1008320:	8005883a 	mov	r2,r16
 1008324:	dfc00717 	ldw	ra,28(sp)
 1008328:	dd000617 	ldw	r20,24(sp)
 100832c:	dcc00517 	ldw	r19,20(sp)
 1008330:	dc800417 	ldw	r18,16(sp)
 1008334:	dc400317 	ldw	r17,12(sp)
 1008338:	dc000217 	ldw	r16,8(sp)
 100833c:	dec00804 	addi	sp,sp,32
 1008340:	f800283a 	ret
 1008344:	d805883a 	mov	r2,sp
 1008348:	003fe706 	br	10082e8 <_ZNKSs5rfindEPKcmm+0x44>

0100834c <_ZNKSs5rfindEPKcm>:
 100834c:	defffc04 	addi	sp,sp,-16
 1008350:	dd400215 	stw	r21,8(sp)
 1008354:	dcc00115 	stw	r19,4(sp)
 1008358:	dc400015 	stw	r17,0(sp)
 100835c:	2027883a 	mov	r19,r4
 1008360:	dfc00315 	stw	ra,12(sp)
 1008364:	2809883a 	mov	r4,r5
 1008368:	2823883a 	mov	r17,r5
 100836c:	302b883a 	mov	r21,r6
 1008370:	100f5c00 	call	100f5c0 <strlen>
 1008374:	880b883a 	mov	r5,r17
 1008378:	9809883a 	mov	r4,r19
 100837c:	a80d883a 	mov	r6,r21
 1008380:	100f883a 	mov	r7,r2
 1008384:	dfc00317 	ldw	ra,12(sp)
 1008388:	dd400217 	ldw	r21,8(sp)
 100838c:	dcc00117 	ldw	r19,4(sp)
 1008390:	dc400017 	ldw	r17,0(sp)
 1008394:	dec00404 	addi	sp,sp,16
 1008398:	10082a41 	jmpi	10082a4 <_ZNKSs5rfindEPKcmm>

0100839c <_ZNKSs5rfindERKSsm>:
 100839c:	29400017 	ldw	r5,0(r5)
 10083a0:	29fffd17 	ldw	r7,-12(r5)
 10083a4:	10082a41 	jmpi	10082a4 <_ZNKSs5rfindEPKcmm>

010083a8 <_ZNSsC2Ev>:
 10083a8:	008040f4 	movhi	r2,259
 10083ac:	109c3504 	addi	r2,r2,28884
 10083b0:	20800015 	stw	r2,0(r4)
 10083b4:	f800283a 	ret

010083b8 <_ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_>:
 10083b8:	20c00017 	ldw	r3,0(r4)
 10083bc:	28800017 	ldw	r2,0(r5)
 10083c0:	1885003a 	cmpeq	r2,r3,r2
 10083c4:	f800283a 	ret

010083c8 <_ZNKSs5rfindEcm>:
 10083c8:	21000017 	ldw	r4,0(r4)
 10083cc:	3007883a 	mov	r3,r6
 10083d0:	20bffd17 	ldw	r2,-12(r4)
 10083d4:	10001226 	beq	r2,zero,1008420 <_ZNKSs5rfindEcm+0x58>
 10083d8:	11bfffc4 	addi	r6,r2,-1
 10083dc:	19800e36 	bltu	r3,r6,1008418 <_ZNKSs5rfindEcm+0x50>
 10083e0:	29403fcc 	andi	r5,r5,255
 10083e4:	2940201c 	xori	r5,r5,128
 10083e8:	2189883a 	add	r4,r4,r6
 10083ec:	297fe004 	addi	r5,r5,-128
 10083f0:	0007883a 	mov	r3,zero
 10083f4:	32000044 	addi	r8,r6,1
 10083f8:	30cfc83a 	sub	r7,r6,r3
 10083fc:	40c00826 	beq	r8,r3,1008420 <_ZNKSs5rfindEcm+0x58>
 1008400:	20800007 	ldb	r2,0(r4)
 1008404:	18c00044 	addi	r3,r3,1
 1008408:	213fffc4 	addi	r4,r4,-1
 100840c:	117ffa1e 	bne	r2,r5,10083f8 <_ZNKSs5rfindEcm+0x30>
 1008410:	3805883a 	mov	r2,r7
 1008414:	f800283a 	ret
 1008418:	180d883a 	mov	r6,r3
 100841c:	003ff006 	br	10083e0 <_ZNKSs5rfindEcm+0x18>
 1008420:	01ffffc4 	movi	r7,-1
 1008424:	3805883a 	mov	r2,r7
 1008428:	f800283a 	ret

0100842c <_ZNKSs12find_last_ofEcm>:
 100842c:	29403fcc 	andi	r5,r5,255
 1008430:	2940201c 	xori	r5,r5,128
 1008434:	297fe004 	addi	r5,r5,-128
 1008438:	10083c81 	jmpi	10083c8 <_ZNKSs5rfindEcm>

0100843c <_ZNKSs16find_last_not_ofEcm>:
 100843c:	21000017 	ldw	r4,0(r4)
 1008440:	20bffd17 	ldw	r2,-12(r4)
 1008444:	10001026 	beq	r2,zero,1008488 <_ZNKSs16find_last_not_ofEcm+0x4c>
 1008448:	10ffffc4 	addi	r3,r2,-1
 100844c:	30c00c36 	bltu	r6,r3,1008480 <_ZNKSs16find_last_not_ofEcm+0x44>
 1008450:	29403fcc 	andi	r5,r5,255
 1008454:	2940201c 	xori	r5,r5,128
 1008458:	20c9883a 	add	r4,r4,r3
 100845c:	297fe004 	addi	r5,r5,-128
 1008460:	01bfffc4 	movi	r6,-1
 1008464:	20800007 	ldb	r2,0(r4)
 1008468:	213fffc4 	addi	r4,r4,-1
 100846c:	1140021e 	bne	r2,r5,1008478 <_ZNKSs16find_last_not_ofEcm+0x3c>
 1008470:	18ffffc4 	addi	r3,r3,-1
 1008474:	19bffb1e 	bne	r3,r6,1008464 <_ZNKSs16find_last_not_ofEcm+0x28>
 1008478:	1805883a 	mov	r2,r3
 100847c:	f800283a 	ret
 1008480:	3007883a 	mov	r3,r6
 1008484:	003ff206 	br	1008450 <_ZNKSs16find_last_not_ofEcm+0x14>
 1008488:	00ffffc4 	movi	r3,-1
 100848c:	1805883a 	mov	r2,r3
 1008490:	f800283a 	ret

01008494 <_ZNKSs17find_first_not_ofEcm>:
 1008494:	21000017 	ldw	r4,0(r4)
 1008498:	3007883a 	mov	r3,r6
 100849c:	21bffd17 	ldw	r6,-12(r4)
 10084a0:	19800f2e 	bgeu	r3,r6,10084e0 <_ZNKSs17find_first_not_ofEcm+0x4c>
 10084a4:	20c9883a 	add	r4,r4,r3
 10084a8:	29403fcc 	andi	r5,r5,255
 10084ac:	20800007 	ldb	r2,0(r4)
 10084b0:	2940201c 	xori	r5,r5,128
 10084b4:	297fe004 	addi	r5,r5,-128
 10084b8:	28800a1e 	bne	r5,r2,10084e4 <_ZNKSs17find_first_not_ofEcm+0x50>
 10084bc:	30cfc83a 	sub	r7,r6,r3
 10084c0:	180d883a 	mov	r6,r3
 10084c4:	00000306 	br	10084d4 <_ZNKSs17find_first_not_ofEcm+0x40>
 10084c8:	20800047 	ldb	r2,1(r4)
 10084cc:	21000044 	addi	r4,r4,1
 10084d0:	1140061e 	bne	r2,r5,10084ec <_ZNKSs17find_first_not_ofEcm+0x58>
 10084d4:	31800044 	addi	r6,r6,1
 10084d8:	19c5883a 	add	r2,r3,r7
 10084dc:	11bffa1e 	bne	r2,r6,10084c8 <_ZNKSs17find_first_not_ofEcm+0x34>
 10084e0:	00ffffc4 	movi	r3,-1
 10084e4:	1805883a 	mov	r2,r3
 10084e8:	f800283a 	ret
 10084ec:	3007883a 	mov	r3,r6
 10084f0:	1805883a 	mov	r2,r3
 10084f4:	f800283a 	ret

010084f8 <_ZNSs4_Rep9_S_createEmmRKSaIcE>:
 10084f8:	deffed04 	addi	sp,sp,-76
 10084fc:	00804074 	movhi	r2,257
 1008500:	10b41004 	addi	r2,r2,-12224
 1008504:	00c040b4 	movhi	r3,258
 1008508:	18d68444 	addi	r3,r3,23057
 100850c:	d8800615 	stw	r2,24(sp)
 1008510:	d9000e15 	stw	r4,56(sp)
 1008514:	00804074 	movhi	r2,257
 1008518:	10a18604 	addi	r2,r2,-31208
 100851c:	d809883a 	mov	r4,sp
 1008520:	d8c00715 	stw	r3,28(sp)
 1008524:	d8800915 	stw	r2,36(sp)
 1008528:	dfc01215 	stw	ra,72(sp)
 100852c:	df001115 	stw	fp,68(sp)
 1008530:	ddc01015 	stw	r23,64(sp)
 1008534:	dec00815 	stw	sp,32(sp)
 1008538:	dec00a15 	stw	sp,40(sp)
 100853c:	d9400f15 	stw	r5,60(sp)
 1008540:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1008544:	d8c00e17 	ldw	r3,56(sp)
 1008548:	00900034 	movhi	r2,16384
 100854c:	10bfff04 	addi	r2,r2,-4
 1008550:	10c02c36 	bltu	r2,r3,1008604 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x10c>
 1008554:	d9800f17 	ldw	r6,60(sp)
 1008558:	d9c00e17 	ldw	r7,56(sp)
 100855c:	31c0032e 	bgeu	r6,r7,100856c <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x74>
 1008560:	3189883a 	add	r4,r6,r6
 1008564:	3900012e 	bgeu	r7,r4,100856c <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x74>
 1008568:	d9000e15 	stw	r4,56(sp)
 100856c:	d8800e17 	ldw	r2,56(sp)
 1008570:	01400344 	movi	r5,13
 1008574:	00c40004 	movi	r3,4096
 1008578:	1149883a 	add	r4,r2,r5
 100857c:	20800404 	addi	r2,r4,16
 1008580:	18800f36 	bltu	r3,r2,10085c0 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0xc8>
 1008584:	00800044 	movi	r2,1
 1008588:	d8800115 	stw	r2,4(sp)
 100858c:	100dda00 	call	100dda0 <_Znwm>
 1008590:	d8c00e17 	ldw	r3,56(sp)
 1008594:	10000215 	stw	zero,8(r2)
 1008598:	d809883a 	mov	r4,sp
 100859c:	10c00115 	stw	r3,4(r2)
 10085a0:	d8800d15 	stw	r2,52(sp)
 10085a4:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 10085a8:	d8800d17 	ldw	r2,52(sp)
 10085ac:	dfc01217 	ldw	ra,72(sp)
 10085b0:	df001117 	ldw	fp,68(sp)
 10085b4:	ddc01017 	ldw	r23,64(sp)
 10085b8:	dec01304 	addi	sp,sp,76
 10085bc:	f800283a 	ret
 10085c0:	d9800f17 	ldw	r6,60(sp)
 10085c4:	d9c00e17 	ldw	r7,56(sp)
 10085c8:	31ffee2e 	bgeu	r6,r7,1008584 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
 10085cc:	1083ffcc 	andi	r2,r2,4095
 10085d0:	1885c83a 	sub	r2,r3,r2
 10085d4:	388f883a 	add	r7,r7,r2
 10085d8:	01100034 	movhi	r4,16384
 10085dc:	213fff04 	addi	r4,r4,-4
 10085e0:	d9c00e15 	stw	r7,56(sp)
 10085e4:	21c00336 	bltu	r4,r7,10085f4 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0xfc>
 10085e8:	d8800e17 	ldw	r2,56(sp)
 10085ec:	1149883a 	add	r4,r2,r5
 10085f0:	003fe406 	br	1008584 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
 10085f4:	d9000e15 	stw	r4,56(sp)
 10085f8:	d8800e17 	ldw	r2,56(sp)
 10085fc:	1149883a 	add	r4,r2,r5
 1008600:	003fe006 	br	1008584 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
 1008604:	00bfffc4 	movi	r2,-1
 1008608:	010040b4 	movhi	r4,258
 100860c:	21191304 	addi	r4,r4,25676
 1008610:	d8800115 	stw	r2,4(sp)
 1008614:	10068e40 	call	10068e4 <_ZSt20__throw_length_errorPKc>
 1008618:	d9000217 	ldw	r4,8(sp)
 100861c:	00bfffc4 	movi	r2,-1
 1008620:	d8800115 	stw	r2,4(sp)
 1008624:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>

01008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 1008628:	100d8101 	jmpi	100d810 <_ZdlPv>

0100862c <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 100862c:	defffd04 	addi	sp,sp,-12
 1008630:	dc000015 	stw	r16,0(sp)
 1008634:	008040f4 	movhi	r2,259
 1008638:	109c3204 	addi	r2,r2,28872
 100863c:	2021883a 	mov	r16,r4
 1008640:	dc400115 	stw	r17,4(sp)
 1008644:	dfc00215 	stw	ra,8(sp)
 1008648:	2823883a 	mov	r17,r5
 100864c:	21000204 	addi	r4,r4,8
 1008650:	017fffc4 	movi	r5,-1
 1008654:	8080051e 	bne	r16,r2,100866c <_ZNSs4_Rep10_M_disposeERKSaIcE+0x40>
 1008658:	dfc00217 	ldw	ra,8(sp)
 100865c:	dc400117 	ldw	r17,4(sp)
 1008660:	dc000017 	ldw	r16,0(sp)
 1008664:	dec00304 	addi	sp,sp,12
 1008668:	f800283a 	ret
 100866c:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1008670:	8009883a 	mov	r4,r16
 1008674:	880b883a 	mov	r5,r17
 1008678:	00bff716 	blt	zero,r2,1008658 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x2c>
 100867c:	dfc00217 	ldw	ra,8(sp)
 1008680:	dc400117 	ldw	r17,4(sp)
 1008684:	dc000017 	ldw	r16,0(sp)
 1008688:	dec00304 	addi	sp,sp,12
 100868c:	10086281 	jmpi	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>

01008690 <_ZNKSs12find_last_ofEPKcmm>:
 1008690:	20800017 	ldw	r2,0(r4)
 1008694:	defffb04 	addi	sp,sp,-20
 1008698:	dcc00315 	stw	r19,12(sp)
 100869c:	10fffd17 	ldw	r3,-12(r2)
 10086a0:	dc800215 	stw	r18,8(sp)
 10086a4:	dc400115 	stw	r17,4(sp)
 10086a8:	dfc00415 	stw	ra,16(sp)
 10086ac:	dc000015 	stw	r16,0(sp)
 10086b0:	2027883a 	mov	r19,r4
 10086b4:	2825883a 	mov	r18,r5
 10086b8:	3823883a 	mov	r17,r7
 10086bc:	18002426 	beq	r3,zero,1008750 <_ZNKSs12find_last_ofEPKcmm+0xc0>
 10086c0:	38002326 	beq	r7,zero,1008750 <_ZNKSs12find_last_ofEPKcmm+0xc0>
 10086c4:	1c3fffc4 	addi	r16,r3,-1
 10086c8:	3400102e 	bgeu	r6,r16,100870c <_ZNKSs12find_last_ofEPKcmm+0x7c>
 10086cc:	3021883a 	mov	r16,r6
 10086d0:	1405883a 	add	r2,r2,r16
 10086d4:	11400007 	ldb	r5,0(r2)
 10086d8:	9009883a 	mov	r4,r18
 10086dc:	880d883a 	mov	r6,r17
 10086e0:	100ebf40 	call	100ebf4 <memchr>
 10086e4:	10000f26 	beq	r2,zero,1008724 <_ZNKSs12find_last_ofEPKcmm+0x94>
 10086e8:	8005883a 	mov	r2,r16
 10086ec:	dfc00417 	ldw	ra,16(sp)
 10086f0:	dcc00317 	ldw	r19,12(sp)
 10086f4:	dc800217 	ldw	r18,8(sp)
 10086f8:	dc400117 	ldw	r17,4(sp)
 10086fc:	dc000017 	ldw	r16,0(sp)
 1008700:	dec00504 	addi	sp,sp,20
 1008704:	f800283a 	ret
 1008708:	98800017 	ldw	r2,0(r19)
 100870c:	1405883a 	add	r2,r2,r16
 1008710:	11400007 	ldb	r5,0(r2)
 1008714:	9009883a 	mov	r4,r18
 1008718:	880d883a 	mov	r6,r17
 100871c:	100ebf40 	call	100ebf4 <memchr>
 1008720:	103ff11e 	bne	r2,zero,10086e8 <_ZNKSs12find_last_ofEPKcmm+0x58>
 1008724:	843fffc4 	addi	r16,r16,-1
 1008728:	00bfffc4 	movi	r2,-1
 100872c:	80bff61e 	bne	r16,r2,1008708 <_ZNKSs12find_last_ofEPKcmm+0x78>
 1008730:	8005883a 	mov	r2,r16
 1008734:	dfc00417 	ldw	ra,16(sp)
 1008738:	dcc00317 	ldw	r19,12(sp)
 100873c:	dc800217 	ldw	r18,8(sp)
 1008740:	dc400117 	ldw	r17,4(sp)
 1008744:	dc000017 	ldw	r16,0(sp)
 1008748:	dec00504 	addi	sp,sp,20
 100874c:	f800283a 	ret
 1008750:	043fffc4 	movi	r16,-1
 1008754:	8005883a 	mov	r2,r16
 1008758:	dfc00417 	ldw	ra,16(sp)
 100875c:	dcc00317 	ldw	r19,12(sp)
 1008760:	dc800217 	ldw	r18,8(sp)
 1008764:	dc400117 	ldw	r17,4(sp)
 1008768:	dc000017 	ldw	r16,0(sp)
 100876c:	dec00504 	addi	sp,sp,20
 1008770:	f800283a 	ret

01008774 <_ZNKSs12find_last_ofERKSsm>:
 1008774:	29400017 	ldw	r5,0(r5)
 1008778:	29fffd17 	ldw	r7,-12(r5)
 100877c:	10086901 	jmpi	1008690 <_ZNKSs12find_last_ofEPKcmm>

01008780 <_ZNKSs13find_first_ofEPKcmm>:
 1008780:	defffb04 	addi	sp,sp,-20
 1008784:	dcc00315 	stw	r19,12(sp)
 1008788:	dc800215 	stw	r18,8(sp)
 100878c:	dc400115 	stw	r17,4(sp)
 1008790:	dc000015 	stw	r16,0(sp)
 1008794:	dfc00415 	stw	ra,16(sp)
 1008798:	3823883a 	mov	r17,r7
 100879c:	2027883a 	mov	r19,r4
 10087a0:	2825883a 	mov	r18,r5
 10087a4:	3021883a 	mov	r16,r6
 10087a8:	3800091e 	bne	r7,zero,10087d0 <_ZNKSs13find_first_ofEPKcmm+0x50>
 10087ac:	043fffc4 	movi	r16,-1
 10087b0:	8005883a 	mov	r2,r16
 10087b4:	dfc00417 	ldw	ra,16(sp)
 10087b8:	dcc00317 	ldw	r19,12(sp)
 10087bc:	dc800217 	ldw	r18,8(sp)
 10087c0:	dc400117 	ldw	r17,4(sp)
 10087c4:	dc000017 	ldw	r16,0(sp)
 10087c8:	dec00504 	addi	sp,sp,20
 10087cc:	f800283a 	ret
 10087d0:	20c00017 	ldw	r3,0(r4)
 10087d4:	18bffd17 	ldw	r2,-12(r3)
 10087d8:	30bff42e 	bgeu	r6,r2,10087ac <_ZNKSs13find_first_ofEPKcmm+0x2c>
 10087dc:	80c5883a 	add	r2,r16,r3
 10087e0:	11400007 	ldb	r5,0(r2)
 10087e4:	9009883a 	mov	r4,r18
 10087e8:	880d883a 	mov	r6,r17
 10087ec:	100ebf40 	call	100ebf4 <memchr>
 10087f0:	103fef1e 	bne	r2,zero,10087b0 <_ZNKSs13find_first_ofEPKcmm+0x30>
 10087f4:	98c00017 	ldw	r3,0(r19)
 10087f8:	84000044 	addi	r16,r16,1
 10087fc:	18bffd17 	ldw	r2,-12(r3)
 1008800:	80bff636 	bltu	r16,r2,10087dc <_ZNKSs13find_first_ofEPKcmm+0x5c>
 1008804:	003fe906 	br	10087ac <_ZNKSs13find_first_ofEPKcmm+0x2c>

01008808 <_ZNKSs13find_first_ofERKSsm>:
 1008808:	29400017 	ldw	r5,0(r5)
 100880c:	29fffd17 	ldw	r7,-12(r5)
 1008810:	10087801 	jmpi	1008780 <_ZNKSs13find_first_ofEPKcmm>

01008814 <_ZNKSs4findEcm>:
 1008814:	defffe04 	addi	sp,sp,-8
 1008818:	dc000015 	stw	r16,0(sp)
 100881c:	24000017 	ldw	r16,0(r4)
 1008820:	29403fcc 	andi	r5,r5,255
 1008824:	3007883a 	mov	r3,r6
 1008828:	81fffd17 	ldw	r7,-12(r16)
 100882c:	2940201c 	xori	r5,r5,128
 1008830:	8189883a 	add	r4,r16,r6
 1008834:	dfc00115 	stw	ra,4(sp)
 1008838:	297fe004 	addi	r5,r5,-128
 100883c:	398dc83a 	sub	r6,r7,r6
 1008840:	19c0082e 	bgeu	r3,r7,1008864 <_ZNKSs4findEcm+0x50>
 1008844:	100ebf40 	call	100ebf4 <memchr>
 1008848:	1407c83a 	sub	r3,r2,r16
 100884c:	10000526 	beq	r2,zero,1008864 <_ZNKSs4findEcm+0x50>
 1008850:	1805883a 	mov	r2,r3
 1008854:	dfc00117 	ldw	ra,4(sp)
 1008858:	dc000017 	ldw	r16,0(sp)
 100885c:	dec00204 	addi	sp,sp,8
 1008860:	f800283a 	ret
 1008864:	00ffffc4 	movi	r3,-1
 1008868:	1805883a 	mov	r2,r3
 100886c:	dfc00117 	ldw	ra,4(sp)
 1008870:	dc000017 	ldw	r16,0(sp)
 1008874:	dec00204 	addi	sp,sp,8
 1008878:	f800283a 	ret

0100887c <_ZNKSs13find_first_ofEcm>:
 100887c:	29403fcc 	andi	r5,r5,255
 1008880:	2940201c 	xori	r5,r5,128
 1008884:	297fe004 	addi	r5,r5,-128
 1008888:	10088141 	jmpi	1008814 <_ZNKSs4findEcm>

0100888c <_ZNKSs16find_last_not_ofEPKcmm>:
 100888c:	20800017 	ldw	r2,0(r4)
 1008890:	defffb04 	addi	sp,sp,-20
 1008894:	dcc00315 	stw	r19,12(sp)
 1008898:	10fffd17 	ldw	r3,-12(r2)
 100889c:	dc800215 	stw	r18,8(sp)
 10088a0:	dc400115 	stw	r17,4(sp)
 10088a4:	dfc00415 	stw	ra,16(sp)
 10088a8:	dc000015 	stw	r16,0(sp)
 10088ac:	2027883a 	mov	r19,r4
 10088b0:	2825883a 	mov	r18,r5
 10088b4:	3823883a 	mov	r17,r7
 10088b8:	18002326 	beq	r3,zero,1008948 <_ZNKSs16find_last_not_ofEPKcmm+0xbc>
 10088bc:	1c3fffc4 	addi	r16,r3,-1
 10088c0:	3400102e 	bgeu	r6,r16,1008904 <_ZNKSs16find_last_not_ofEPKcmm+0x78>
 10088c4:	3021883a 	mov	r16,r6
 10088c8:	1405883a 	add	r2,r2,r16
 10088cc:	11400007 	ldb	r5,0(r2)
 10088d0:	9009883a 	mov	r4,r18
 10088d4:	880d883a 	mov	r6,r17
 10088d8:	100ebf40 	call	100ebf4 <memchr>
 10088dc:	10000f1e 	bne	r2,zero,100891c <_ZNKSs16find_last_not_ofEPKcmm+0x90>
 10088e0:	8005883a 	mov	r2,r16
 10088e4:	dfc00417 	ldw	ra,16(sp)
 10088e8:	dcc00317 	ldw	r19,12(sp)
 10088ec:	dc800217 	ldw	r18,8(sp)
 10088f0:	dc400117 	ldw	r17,4(sp)
 10088f4:	dc000017 	ldw	r16,0(sp)
 10088f8:	dec00504 	addi	sp,sp,20
 10088fc:	f800283a 	ret
 1008900:	98800017 	ldw	r2,0(r19)
 1008904:	1405883a 	add	r2,r2,r16
 1008908:	11400007 	ldb	r5,0(r2)
 100890c:	9009883a 	mov	r4,r18
 1008910:	880d883a 	mov	r6,r17
 1008914:	100ebf40 	call	100ebf4 <memchr>
 1008918:	103ff126 	beq	r2,zero,10088e0 <_ZNKSs16find_last_not_ofEPKcmm+0x54>
 100891c:	843fffc4 	addi	r16,r16,-1
 1008920:	00bfffc4 	movi	r2,-1
 1008924:	80bff61e 	bne	r16,r2,1008900 <_ZNKSs16find_last_not_ofEPKcmm+0x74>
 1008928:	8005883a 	mov	r2,r16
 100892c:	dfc00417 	ldw	ra,16(sp)
 1008930:	dcc00317 	ldw	r19,12(sp)
 1008934:	dc800217 	ldw	r18,8(sp)
 1008938:	dc400117 	ldw	r17,4(sp)
 100893c:	dc000017 	ldw	r16,0(sp)
 1008940:	dec00504 	addi	sp,sp,20
 1008944:	f800283a 	ret
 1008948:	043fffc4 	movi	r16,-1
 100894c:	8005883a 	mov	r2,r16
 1008950:	dfc00417 	ldw	ra,16(sp)
 1008954:	dcc00317 	ldw	r19,12(sp)
 1008958:	dc800217 	ldw	r18,8(sp)
 100895c:	dc400117 	ldw	r17,4(sp)
 1008960:	dc000017 	ldw	r16,0(sp)
 1008964:	dec00504 	addi	sp,sp,20
 1008968:	f800283a 	ret

0100896c <_ZNKSs16find_last_not_ofERKSsm>:
 100896c:	29400017 	ldw	r5,0(r5)
 1008970:	29fffd17 	ldw	r7,-12(r5)
 1008974:	100888c1 	jmpi	100888c <_ZNKSs16find_last_not_ofEPKcmm>

01008978 <_ZNKSs7compareERKSs>:
 1008978:	20800017 	ldw	r2,0(r4)
 100897c:	28c00017 	ldw	r3,0(r5)
 1008980:	defffb04 	addi	sp,sp,-20
 1008984:	dc400315 	stw	r17,12(sp)
 1008988:	dc000215 	stw	r16,8(sp)
 100898c:	147ffd17 	ldw	r17,-12(r2)
 1008990:	1c3ffd17 	ldw	r16,-12(r3)
 1008994:	dfc00415 	stw	ra,16(sp)
 1008998:	d80d883a 	mov	r6,sp
 100899c:	dc400015 	stw	r17,0(sp)
 10089a0:	dc000115 	stw	r16,4(sp)
 10089a4:	8440012e 	bgeu	r16,r17,10089ac <_ZNKSs7compareERKSs+0x34>
 10089a8:	d9800104 	addi	r6,sp,4
 10089ac:	21000017 	ldw	r4,0(r4)
 10089b0:	29400017 	ldw	r5,0(r5)
 10089b4:	31800017 	ldw	r6,0(r6)
 10089b8:	100ecd80 	call	100ecd8 <memcmp>
 10089bc:	1000011e 	bne	r2,zero,10089c4 <_ZNKSs7compareERKSs+0x4c>
 10089c0:	8c05c83a 	sub	r2,r17,r16
 10089c4:	dfc00417 	ldw	ra,16(sp)
 10089c8:	dc400317 	ldw	r17,12(sp)
 10089cc:	dc000217 	ldw	r16,8(sp)
 10089d0:	dec00504 	addi	sp,sp,20
 10089d4:	f800283a 	ret

010089d8 <_ZNKSs4findEPKcm>:
 10089d8:	defffc04 	addi	sp,sp,-16
 10089dc:	dd400215 	stw	r21,8(sp)
 10089e0:	dcc00115 	stw	r19,4(sp)
 10089e4:	dc400015 	stw	r17,0(sp)
 10089e8:	2027883a 	mov	r19,r4
 10089ec:	dfc00315 	stw	ra,12(sp)
 10089f0:	2809883a 	mov	r4,r5
 10089f4:	2823883a 	mov	r17,r5
 10089f8:	302b883a 	mov	r21,r6
 10089fc:	100f5c00 	call	100f5c0 <strlen>
 1008a00:	880b883a 	mov	r5,r17
 1008a04:	9809883a 	mov	r4,r19
 1008a08:	a80d883a 	mov	r6,r21
 1008a0c:	100f883a 	mov	r7,r2
 1008a10:	dfc00317 	ldw	ra,12(sp)
 1008a14:	dd400217 	ldw	r21,8(sp)
 1008a18:	dcc00117 	ldw	r19,4(sp)
 1008a1c:	dc400017 	ldw	r17,0(sp)
 1008a20:	dec00404 	addi	sp,sp,16
 1008a24:	10081ac1 	jmpi	10081ac <_ZNKSs4findEPKcmm>

01008a28 <_ZNKSs7compareEPKc>:
 1008a28:	20800017 	ldw	r2,0(r4)
 1008a2c:	defff904 	addi	sp,sp,-28
 1008a30:	dc400315 	stw	r17,12(sp)
 1008a34:	147ffd17 	ldw	r17,-12(r2)
 1008a38:	dcc00515 	stw	r19,20(sp)
 1008a3c:	dc800415 	stw	r18,16(sp)
 1008a40:	dc000215 	stw	r16,8(sp)
 1008a44:	dfc00615 	stw	ra,24(sp)
 1008a48:	2025883a 	mov	r18,r4
 1008a4c:	dc400015 	stw	r17,0(sp)
 1008a50:	2809883a 	mov	r4,r5
 1008a54:	2827883a 	mov	r19,r5
 1008a58:	100f5c00 	call	100f5c0 <strlen>
 1008a5c:	1021883a 	mov	r16,r2
 1008a60:	d80d883a 	mov	r6,sp
 1008a64:	d8800115 	stw	r2,4(sp)
 1008a68:	1440012e 	bgeu	r2,r17,1008a70 <_ZNKSs7compareEPKc+0x48>
 1008a6c:	d9800104 	addi	r6,sp,4
 1008a70:	91000017 	ldw	r4,0(r18)
 1008a74:	31800017 	ldw	r6,0(r6)
 1008a78:	980b883a 	mov	r5,r19
 1008a7c:	100ecd80 	call	100ecd8 <memcmp>
 1008a80:	1000011e 	bne	r2,zero,1008a88 <_ZNKSs7compareEPKc+0x60>
 1008a84:	8c05c83a 	sub	r2,r17,r16
 1008a88:	dfc00617 	ldw	ra,24(sp)
 1008a8c:	dcc00517 	ldw	r19,20(sp)
 1008a90:	dc800417 	ldw	r18,16(sp)
 1008a94:	dc400317 	ldw	r17,12(sp)
 1008a98:	dc000217 	ldw	r16,8(sp)
 1008a9c:	dec00704 	addi	sp,sp,28
 1008aa0:	f800283a 	ret

01008aa4 <_ZNKSs16find_last_not_ofEPKcm>:
 1008aa4:	defffc04 	addi	sp,sp,-16
 1008aa8:	dd400215 	stw	r21,8(sp)
 1008aac:	dcc00115 	stw	r19,4(sp)
 1008ab0:	dc400015 	stw	r17,0(sp)
 1008ab4:	2027883a 	mov	r19,r4
 1008ab8:	dfc00315 	stw	ra,12(sp)
 1008abc:	2809883a 	mov	r4,r5
 1008ac0:	2823883a 	mov	r17,r5
 1008ac4:	302b883a 	mov	r21,r6
 1008ac8:	100f5c00 	call	100f5c0 <strlen>
 1008acc:	880b883a 	mov	r5,r17
 1008ad0:	9809883a 	mov	r4,r19
 1008ad4:	a80d883a 	mov	r6,r21
 1008ad8:	100f883a 	mov	r7,r2
 1008adc:	dfc00317 	ldw	ra,12(sp)
 1008ae0:	dd400217 	ldw	r21,8(sp)
 1008ae4:	dcc00117 	ldw	r19,4(sp)
 1008ae8:	dc400017 	ldw	r17,0(sp)
 1008aec:	dec00404 	addi	sp,sp,16
 1008af0:	100888c1 	jmpi	100888c <_ZNKSs16find_last_not_ofEPKcmm>

01008af4 <_ZNKSs17find_first_not_ofEPKcm>:
 1008af4:	defffc04 	addi	sp,sp,-16
 1008af8:	dd400215 	stw	r21,8(sp)
 1008afc:	dcc00115 	stw	r19,4(sp)
 1008b00:	dc400015 	stw	r17,0(sp)
 1008b04:	2027883a 	mov	r19,r4
 1008b08:	dfc00315 	stw	ra,12(sp)
 1008b0c:	2809883a 	mov	r4,r5
 1008b10:	2823883a 	mov	r17,r5
 1008b14:	302b883a 	mov	r21,r6
 1008b18:	100f5c00 	call	100f5c0 <strlen>
 1008b1c:	880b883a 	mov	r5,r17
 1008b20:	9809883a 	mov	r4,r19
 1008b24:	a80d883a 	mov	r6,r21
 1008b28:	100f883a 	mov	r7,r2
 1008b2c:	dfc00317 	ldw	ra,12(sp)
 1008b30:	dd400217 	ldw	r21,8(sp)
 1008b34:	dcc00117 	ldw	r19,4(sp)
 1008b38:	dc400017 	ldw	r17,0(sp)
 1008b3c:	dec00404 	addi	sp,sp,16
 1008b40:	10081081 	jmpi	1008108 <_ZNKSs17find_first_not_ofEPKcmm>

01008b44 <_ZNKSs12find_last_ofEPKcm>:
 1008b44:	defffc04 	addi	sp,sp,-16
 1008b48:	dd400215 	stw	r21,8(sp)
 1008b4c:	dcc00115 	stw	r19,4(sp)
 1008b50:	dc400015 	stw	r17,0(sp)
 1008b54:	2027883a 	mov	r19,r4
 1008b58:	dfc00315 	stw	ra,12(sp)
 1008b5c:	2809883a 	mov	r4,r5
 1008b60:	2823883a 	mov	r17,r5
 1008b64:	302b883a 	mov	r21,r6
 1008b68:	100f5c00 	call	100f5c0 <strlen>
 1008b6c:	880b883a 	mov	r5,r17
 1008b70:	9809883a 	mov	r4,r19
 1008b74:	a80d883a 	mov	r6,r21
 1008b78:	100f883a 	mov	r7,r2
 1008b7c:	dfc00317 	ldw	ra,12(sp)
 1008b80:	dd400217 	ldw	r21,8(sp)
 1008b84:	dcc00117 	ldw	r19,4(sp)
 1008b88:	dc400017 	ldw	r17,0(sp)
 1008b8c:	dec00404 	addi	sp,sp,16
 1008b90:	10086901 	jmpi	1008690 <_ZNKSs12find_last_ofEPKcmm>

01008b94 <_ZNKSs13find_first_ofEPKcm>:
 1008b94:	defffc04 	addi	sp,sp,-16
 1008b98:	dd400215 	stw	r21,8(sp)
 1008b9c:	dcc00115 	stw	r19,4(sp)
 1008ba0:	dc400015 	stw	r17,0(sp)
 1008ba4:	2027883a 	mov	r19,r4
 1008ba8:	dfc00315 	stw	ra,12(sp)
 1008bac:	2809883a 	mov	r4,r5
 1008bb0:	2823883a 	mov	r17,r5
 1008bb4:	302b883a 	mov	r21,r6
 1008bb8:	100f5c00 	call	100f5c0 <strlen>
 1008bbc:	880b883a 	mov	r5,r17
 1008bc0:	9809883a 	mov	r4,r19
 1008bc4:	a80d883a 	mov	r6,r21
 1008bc8:	100f883a 	mov	r7,r2
 1008bcc:	dfc00317 	ldw	ra,12(sp)
 1008bd0:	dd400217 	ldw	r21,8(sp)
 1008bd4:	dcc00117 	ldw	r19,4(sp)
 1008bd8:	dc400017 	ldw	r17,0(sp)
 1008bdc:	dec00404 	addi	sp,sp,16
 1008be0:	10087801 	jmpi	1008780 <_ZNKSs13find_first_ofEPKcmm>

01008be4 <_ZNKSs4rendEv>:
 1008be4:	28c00017 	ldw	r3,0(r5)
 1008be8:	2005883a 	mov	r2,r4
 1008bec:	20c00015 	stw	r3,0(r4)
 1008bf0:	f800283a 	ret

01008bf4 <_ZNKSs6rbeginEv>:
 1008bf4:	28c00017 	ldw	r3,0(r5)
 1008bf8:	2005883a 	mov	r2,r4
 1008bfc:	197ffd17 	ldw	r5,-12(r3)
 1008c00:	1947883a 	add	r3,r3,r5
 1008c04:	20c00015 	stw	r3,0(r4)
 1008c08:	f800283a 	ret

01008c0c <_ZNSs12_S_constructEmcRKSaIcE>:
 1008c0c:	defffb04 	addi	sp,sp,-20
 1008c10:	dcc00315 	stw	r19,12(sp)
 1008c14:	dc400115 	stw	r17,4(sp)
 1008c18:	dc000015 	stw	r16,0(sp)
 1008c1c:	2823883a 	mov	r17,r5
 1008c20:	dfc00415 	stw	ra,16(sp)
 1008c24:	dc800215 	stw	r18,8(sp)
 1008c28:	2021883a 	mov	r16,r4
 1008c2c:	04c040f4 	movhi	r19,259
 1008c30:	9cdc3504 	addi	r19,r19,28884
 1008c34:	000b883a 	mov	r5,zero
 1008c38:	2000081e 	bne	r4,zero,1008c5c <_ZNSs12_S_constructEmcRKSaIcE+0x50>
 1008c3c:	9805883a 	mov	r2,r19
 1008c40:	dfc00417 	ldw	ra,16(sp)
 1008c44:	dcc00317 	ldw	r19,12(sp)
 1008c48:	dc800217 	ldw	r18,8(sp)
 1008c4c:	dc400117 	ldw	r17,4(sp)
 1008c50:	dc000017 	ldw	r16,0(sp)
 1008c54:	dec00504 	addi	sp,sp,20
 1008c58:	f800283a 	ret
 1008c5c:	10084f80 	call	10084f8 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1008c60:	88c03fcc 	andi	r3,r17,255
 1008c64:	18c0201c 	xori	r3,r3,128
 1008c68:	18ffe004 	addi	r3,r3,-128
 1008c6c:	19403fcc 	andi	r5,r3,255
 1008c70:	14c00304 	addi	r19,r2,12
 1008c74:	1025883a 	mov	r18,r2
 1008c78:	2940201c 	xori	r5,r5,128
 1008c7c:	00800044 	movi	r2,1
 1008c80:	800d883a 	mov	r6,r16
 1008c84:	9809883a 	mov	r4,r19
 1008c88:	297fe004 	addi	r5,r5,-128
 1008c8c:	80800d26 	beq	r16,r2,1008cc4 <_ZNSs12_S_constructEmcRKSaIcE+0xb8>
 1008c90:	100eecc0 	call	100eecc <memset>
 1008c94:	84c5883a 	add	r2,r16,r19
 1008c98:	94000015 	stw	r16,0(r18)
 1008c9c:	90000215 	stw	zero,8(r18)
 1008ca0:	10000005 	stb	zero,0(r2)
 1008ca4:	9805883a 	mov	r2,r19
 1008ca8:	dfc00417 	ldw	ra,16(sp)
 1008cac:	dcc00317 	ldw	r19,12(sp)
 1008cb0:	dc800217 	ldw	r18,8(sp)
 1008cb4:	dc400117 	ldw	r17,4(sp)
 1008cb8:	dc000017 	ldw	r16,0(sp)
 1008cbc:	dec00504 	addi	sp,sp,20
 1008cc0:	f800283a 	ret
 1008cc4:	98c00005 	stb	r3,0(r19)
 1008cc8:	003ff206 	br	1008c94 <_ZNSs12_S_constructEmcRKSaIcE+0x88>

01008ccc <_ZNSsC1EmcRKSaIcE>:
 1008ccc:	defffe04 	addi	sp,sp,-8
 1008cd0:	dc400015 	stw	r17,0(sp)
 1008cd4:	2023883a 	mov	r17,r4
 1008cd8:	2809883a 	mov	r4,r5
 1008cdc:	31403fcc 	andi	r5,r6,255
 1008ce0:	2940201c 	xori	r5,r5,128
 1008ce4:	297fe004 	addi	r5,r5,-128
 1008ce8:	380d883a 	mov	r6,r7
 1008cec:	dfc00115 	stw	ra,4(sp)
 1008cf0:	1008c0c0 	call	1008c0c <_ZNSs12_S_constructEmcRKSaIcE>
 1008cf4:	88800015 	stw	r2,0(r17)
 1008cf8:	dfc00117 	ldw	ra,4(sp)
 1008cfc:	dc400017 	ldw	r17,0(sp)
 1008d00:	dec00204 	addi	sp,sp,8
 1008d04:	f800283a 	ret

01008d08 <_ZNSsC2EmcRKSaIcE>:
 1008d08:	defffe04 	addi	sp,sp,-8
 1008d0c:	dc400015 	stw	r17,0(sp)
 1008d10:	2023883a 	mov	r17,r4
 1008d14:	2809883a 	mov	r4,r5
 1008d18:	31403fcc 	andi	r5,r6,255
 1008d1c:	2940201c 	xori	r5,r5,128
 1008d20:	297fe004 	addi	r5,r5,-128
 1008d24:	380d883a 	mov	r6,r7
 1008d28:	dfc00115 	stw	ra,4(sp)
 1008d2c:	1008c0c0 	call	1008c0c <_ZNSs12_S_constructEmcRKSaIcE>
 1008d30:	88800015 	stw	r2,0(r17)
 1008d34:	dfc00117 	ldw	ra,4(sp)
 1008d38:	dc400017 	ldw	r17,0(sp)
 1008d3c:	dec00204 	addi	sp,sp,8
 1008d40:	f800283a 	ret

01008d44 <_ZNSsC1ERKSaIcE>:
 1008d44:	defffe04 	addi	sp,sp,-8
 1008d48:	dc400015 	stw	r17,0(sp)
 1008d4c:	280d883a 	mov	r6,r5
 1008d50:	2023883a 	mov	r17,r4
 1008d54:	000b883a 	mov	r5,zero
 1008d58:	0009883a 	mov	r4,zero
 1008d5c:	dfc00115 	stw	ra,4(sp)
 1008d60:	1008c0c0 	call	1008c0c <_ZNSs12_S_constructEmcRKSaIcE>
 1008d64:	88800015 	stw	r2,0(r17)
 1008d68:	dfc00117 	ldw	ra,4(sp)
 1008d6c:	dc400017 	ldw	r17,0(sp)
 1008d70:	dec00204 	addi	sp,sp,8
 1008d74:	f800283a 	ret

01008d78 <_ZNSsC2ERKSaIcE>:
 1008d78:	defffe04 	addi	sp,sp,-8
 1008d7c:	dc400015 	stw	r17,0(sp)
 1008d80:	280d883a 	mov	r6,r5
 1008d84:	2023883a 	mov	r17,r4
 1008d88:	000b883a 	mov	r5,zero
 1008d8c:	0009883a 	mov	r4,zero
 1008d90:	dfc00115 	stw	ra,4(sp)
 1008d94:	1008c0c0 	call	1008c0c <_ZNSs12_S_constructEmcRKSaIcE>
 1008d98:	88800015 	stw	r2,0(r17)
 1008d9c:	dfc00117 	ldw	ra,4(sp)
 1008da0:	dc400017 	ldw	r17,0(sp)
 1008da4:	dec00204 	addi	sp,sp,8
 1008da8:	f800283a 	ret

01008dac <_ZNKSs7compareEmmPKcm>:
 1008dac:	21000017 	ldw	r4,0(r4)
 1008db0:	defffc04 	addi	sp,sp,-16
 1008db4:	d9800015 	stw	r6,0(sp)
 1008db8:	20bffd17 	ldw	r2,-12(r4)
 1008dbc:	dfc00315 	stw	ra,12(sp)
 1008dc0:	dc400215 	stw	r17,8(sp)
 1008dc4:	dc000115 	stw	r16,4(sp)
 1008dc8:	11401936 	bltu	r2,r5,1008e30 <_ZNKSs7compareEmmPKcm+0x84>
 1008dcc:	dc000017 	ldw	r16,0(sp)
 1008dd0:	1145c83a 	sub	r2,r2,r5
 1008dd4:	14001136 	bltu	r2,r16,1008e1c <_ZNKSs7compareEmmPKcm+0x70>
 1008dd8:	dc400417 	ldw	r17,16(sp)
 1008ddc:	dc000015 	stw	r16,0(sp)
 1008de0:	8c000c36 	bltu	r17,r16,1008e14 <_ZNKSs7compareEmmPKcm+0x68>
 1008de4:	d80d883a 	mov	r6,sp
 1008de8:	31800017 	ldw	r6,0(r6)
 1008dec:	2149883a 	add	r4,r4,r5
 1008df0:	380b883a 	mov	r5,r7
 1008df4:	100ecd80 	call	100ecd8 <memcmp>
 1008df8:	1000011e 	bne	r2,zero,1008e00 <_ZNKSs7compareEmmPKcm+0x54>
 1008dfc:	8445c83a 	sub	r2,r16,r17
 1008e00:	dfc00317 	ldw	ra,12(sp)
 1008e04:	dc400217 	ldw	r17,8(sp)
 1008e08:	dc000117 	ldw	r16,4(sp)
 1008e0c:	dec00404 	addi	sp,sp,16
 1008e10:	f800283a 	ret
 1008e14:	d9800404 	addi	r6,sp,16
 1008e18:	003ff306 	br	1008de8 <_ZNKSs7compareEmmPKcm+0x3c>
 1008e1c:	dc400417 	ldw	r17,16(sp)
 1008e20:	1021883a 	mov	r16,r2
 1008e24:	dc000015 	stw	r16,0(sp)
 1008e28:	8c3ffa36 	bltu	r17,r16,1008e14 <_ZNKSs7compareEmmPKcm+0x68>
 1008e2c:	003fed06 	br	1008de4 <_ZNKSs7compareEmmPKcm+0x38>
 1008e30:	010040b4 	movhi	r4,258
 1008e34:	21191904 	addi	r4,r4,25700
 1008e38:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

01008e3c <_ZNKSs7compareEmmPKc>:
 1008e3c:	defff804 	addi	sp,sp,-32
 1008e40:	dd000615 	stw	r20,24(sp)
 1008e44:	25000017 	ldw	r20,0(r4)
 1008e48:	d9800115 	stw	r6,4(sp)
 1008e4c:	dcc00515 	stw	r19,20(sp)
 1008e50:	a0bffd17 	ldw	r2,-12(r20)
 1008e54:	dc800415 	stw	r18,16(sp)
 1008e58:	dfc00715 	stw	ra,28(sp)
 1008e5c:	dc400315 	stw	r17,12(sp)
 1008e60:	dc000215 	stw	r16,8(sp)
 1008e64:	2825883a 	mov	r18,r5
 1008e68:	3827883a 	mov	r19,r7
 1008e6c:	11402236 	bltu	r2,r5,1008ef8 <_ZNKSs7compareEmmPKc+0xbc>
 1008e70:	1145c83a 	sub	r2,r2,r5
 1008e74:	3023883a 	mov	r17,r6
 1008e78:	11801736 	bltu	r2,r6,1008ed8 <_ZNKSs7compareEmmPKc+0x9c>
 1008e7c:	dc400115 	stw	r17,4(sp)
 1008e80:	9809883a 	mov	r4,r19
 1008e84:	100f5c00 	call	100f5c0 <strlen>
 1008e88:	1021883a 	mov	r16,r2
 1008e8c:	d8800015 	stw	r2,0(sp)
 1008e90:	14400f36 	bltu	r2,r17,1008ed0 <_ZNKSs7compareEmmPKc+0x94>
 1008e94:	d9800104 	addi	r6,sp,4
 1008e98:	31800017 	ldw	r6,0(r6)
 1008e9c:	a489883a 	add	r4,r20,r18
 1008ea0:	980b883a 	mov	r5,r19
 1008ea4:	100ecd80 	call	100ecd8 <memcmp>
 1008ea8:	1000011e 	bne	r2,zero,1008eb0 <_ZNKSs7compareEmmPKc+0x74>
 1008eac:	8c05c83a 	sub	r2,r17,r16
 1008eb0:	dfc00717 	ldw	ra,28(sp)
 1008eb4:	dd000617 	ldw	r20,24(sp)
 1008eb8:	dcc00517 	ldw	r19,20(sp)
 1008ebc:	dc800417 	ldw	r18,16(sp)
 1008ec0:	dc400317 	ldw	r17,12(sp)
 1008ec4:	dc000217 	ldw	r16,8(sp)
 1008ec8:	dec00804 	addi	sp,sp,32
 1008ecc:	f800283a 	ret
 1008ed0:	d80d883a 	mov	r6,sp
 1008ed4:	003ff006 	br	1008e98 <_ZNKSs7compareEmmPKc+0x5c>
 1008ed8:	1023883a 	mov	r17,r2
 1008edc:	dc400115 	stw	r17,4(sp)
 1008ee0:	9809883a 	mov	r4,r19
 1008ee4:	100f5c00 	call	100f5c0 <strlen>
 1008ee8:	1021883a 	mov	r16,r2
 1008eec:	d8800015 	stw	r2,0(sp)
 1008ef0:	147ff736 	bltu	r2,r17,1008ed0 <_ZNKSs7compareEmmPKc+0x94>
 1008ef4:	003fe706 	br	1008e94 <_ZNKSs7compareEmmPKc+0x58>
 1008ef8:	010040b4 	movhi	r4,258
 1008efc:	21191904 	addi	r4,r4,25700
 1008f00:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

01008f04 <_ZNKSs7compareEmmRKSsmm>:
 1008f04:	21000017 	ldw	r4,0(r4)
 1008f08:	defffc04 	addi	sp,sp,-16
 1008f0c:	d9800015 	stw	r6,0(sp)
 1008f10:	20bffd17 	ldw	r2,-12(r4)
 1008f14:	dfc00315 	stw	ra,12(sp)
 1008f18:	dc400215 	stw	r17,8(sp)
 1008f1c:	dc000115 	stw	r16,4(sp)
 1008f20:	da000417 	ldw	r8,16(sp)
 1008f24:	11402436 	bltu	r2,r5,1008fb8 <_ZNKSs7compareEmmRKSsmm+0xb4>
 1008f28:	39c00017 	ldw	r7,0(r7)
 1008f2c:	38fffd17 	ldw	r3,-12(r7)
 1008f30:	1a002136 	bltu	r3,r8,1008fb8 <_ZNKSs7compareEmmRKSsmm+0xb4>
 1008f34:	dc400017 	ldw	r17,0(sp)
 1008f38:	1145c83a 	sub	r2,r2,r5
 1008f3c:	14401836 	bltu	r2,r17,1008fa0 <_ZNKSs7compareEmmRKSsmm+0x9c>
 1008f40:	dc000517 	ldw	r16,20(sp)
 1008f44:	1a05c83a 	sub	r2,r3,r8
 1008f48:	dc400015 	stw	r17,0(sp)
 1008f4c:	14001036 	bltu	r2,r16,1008f90 <_ZNKSs7compareEmmRKSsmm+0x8c>
 1008f50:	dc000515 	stw	r16,20(sp)
 1008f54:	84400c36 	bltu	r16,r17,1008f88 <_ZNKSs7compareEmmRKSsmm+0x84>
 1008f58:	d80d883a 	mov	r6,sp
 1008f5c:	31800017 	ldw	r6,0(r6)
 1008f60:	2149883a 	add	r4,r4,r5
 1008f64:	3a0b883a 	add	r5,r7,r8
 1008f68:	100ecd80 	call	100ecd8 <memcmp>
 1008f6c:	1000011e 	bne	r2,zero,1008f74 <_ZNKSs7compareEmmRKSsmm+0x70>
 1008f70:	8c05c83a 	sub	r2,r17,r16
 1008f74:	dfc00317 	ldw	ra,12(sp)
 1008f78:	dc400217 	ldw	r17,8(sp)
 1008f7c:	dc000117 	ldw	r16,4(sp)
 1008f80:	dec00404 	addi	sp,sp,16
 1008f84:	f800283a 	ret
 1008f88:	d9800504 	addi	r6,sp,20
 1008f8c:	003ff306 	br	1008f5c <_ZNKSs7compareEmmRKSsmm+0x58>
 1008f90:	1021883a 	mov	r16,r2
 1008f94:	dc000515 	stw	r16,20(sp)
 1008f98:	847ffb36 	bltu	r16,r17,1008f88 <_ZNKSs7compareEmmRKSsmm+0x84>
 1008f9c:	003fee06 	br	1008f58 <_ZNKSs7compareEmmRKSsmm+0x54>
 1008fa0:	dc000517 	ldw	r16,20(sp)
 1008fa4:	1023883a 	mov	r17,r2
 1008fa8:	1a05c83a 	sub	r2,r3,r8
 1008fac:	dc400015 	stw	r17,0(sp)
 1008fb0:	143fe72e 	bgeu	r2,r16,1008f50 <_ZNKSs7compareEmmRKSsmm+0x4c>
 1008fb4:	003ff606 	br	1008f90 <_ZNKSs7compareEmmRKSsmm+0x8c>
 1008fb8:	010040b4 	movhi	r4,258
 1008fbc:	21191904 	addi	r4,r4,25700
 1008fc0:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

01008fc4 <_ZNKSs7compareEmmRKSs>:
 1008fc4:	21000017 	ldw	r4,0(r4)
 1008fc8:	defffb04 	addi	sp,sp,-20
 1008fcc:	d9800115 	stw	r6,4(sp)
 1008fd0:	20bffd17 	ldw	r2,-12(r4)
 1008fd4:	dfc00415 	stw	ra,16(sp)
 1008fd8:	dc400315 	stw	r17,12(sp)
 1008fdc:	dc000215 	stw	r16,8(sp)
 1008fe0:	11401d36 	bltu	r2,r5,1009058 <_ZNKSs7compareEmmRKSs+0x94>
 1008fe4:	1145c83a 	sub	r2,r2,r5
 1008fe8:	3021883a 	mov	r16,r6
 1008fec:	11801336 	bltu	r2,r6,100903c <_ZNKSs7compareEmmRKSs+0x78>
 1008ff0:	38800017 	ldw	r2,0(r7)
 1008ff4:	dc000115 	stw	r16,4(sp)
 1008ff8:	147ffd17 	ldw	r17,-12(r2)
 1008ffc:	dc400015 	stw	r17,0(sp)
 1009000:	8c000c36 	bltu	r17,r16,1009034 <_ZNKSs7compareEmmRKSs+0x70>
 1009004:	d9800104 	addi	r6,sp,4
 1009008:	31800017 	ldw	r6,0(r6)
 100900c:	2149883a 	add	r4,r4,r5
 1009010:	100b883a 	mov	r5,r2
 1009014:	100ecd80 	call	100ecd8 <memcmp>
 1009018:	1000011e 	bne	r2,zero,1009020 <_ZNKSs7compareEmmRKSs+0x5c>
 100901c:	8445c83a 	sub	r2,r16,r17
 1009020:	dfc00417 	ldw	ra,16(sp)
 1009024:	dc400317 	ldw	r17,12(sp)
 1009028:	dc000217 	ldw	r16,8(sp)
 100902c:	dec00504 	addi	sp,sp,20
 1009030:	f800283a 	ret
 1009034:	d80d883a 	mov	r6,sp
 1009038:	003ff306 	br	1009008 <_ZNKSs7compareEmmRKSs+0x44>
 100903c:	1021883a 	mov	r16,r2
 1009040:	38800017 	ldw	r2,0(r7)
 1009044:	dc000115 	stw	r16,4(sp)
 1009048:	147ffd17 	ldw	r17,-12(r2)
 100904c:	dc400015 	stw	r17,0(sp)
 1009050:	8c3ff836 	bltu	r17,r16,1009034 <_ZNKSs7compareEmmRKSs+0x70>
 1009054:	003feb06 	br	1009004 <_ZNKSs7compareEmmRKSs+0x40>
 1009058:	010040b4 	movhi	r4,258
 100905c:	21191904 	addi	r4,r4,25700
 1009060:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

01009064 <_ZNSs4_Rep8_M_cloneERKSaIcEm>:
 1009064:	defffc04 	addi	sp,sp,-16
 1009068:	dc000015 	stw	r16,0(sp)
 100906c:	2021883a 	mov	r16,r4
 1009070:	21000017 	ldw	r4,0(r4)
 1009074:	2807883a 	mov	r3,r5
 1009078:	81400117 	ldw	r5,4(r16)
 100907c:	3109883a 	add	r4,r6,r4
 1009080:	180d883a 	mov	r6,r3
 1009084:	dc800215 	stw	r18,8(sp)
 1009088:	dc400115 	stw	r17,4(sp)
 100908c:	dfc00315 	stw	ra,12(sp)
 1009090:	10084f80 	call	10084f8 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1009094:	80c00017 	ldw	r3,0(r16)
 1009098:	1023883a 	mov	r17,r2
 100909c:	14800304 	addi	r18,r2,12
 10090a0:	18000826 	beq	r3,zero,10090c4 <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x60>
 10090a4:	14800304 	addi	r18,r2,12
 10090a8:	00800044 	movi	r2,1
 10090ac:	180d883a 	mov	r6,r3
 10090b0:	9009883a 	mov	r4,r18
 10090b4:	81400304 	addi	r5,r16,12
 10090b8:	18800d26 	beq	r3,r2,10090f0 <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x8c>
 10090bc:	100ed4c0 	call	100ed4c <memcpy>
 10090c0:	80c00017 	ldw	r3,0(r16)
 10090c4:	88c00015 	stw	r3,0(r17)
 10090c8:	88000215 	stw	zero,8(r17)
 10090cc:	1c87883a 	add	r3,r3,r18
 10090d0:	9005883a 	mov	r2,r18
 10090d4:	18000005 	stb	zero,0(r3)
 10090d8:	dfc00317 	ldw	ra,12(sp)
 10090dc:	dc800217 	ldw	r18,8(sp)
 10090e0:	dc400117 	ldw	r17,4(sp)
 10090e4:	dc000017 	ldw	r16,0(sp)
 10090e8:	dec00404 	addi	sp,sp,16
 10090ec:	f800283a 	ret
 10090f0:	80800303 	ldbu	r2,12(r16)
 10090f4:	88800305 	stb	r2,12(r17)
 10090f8:	80c00017 	ldw	r3,0(r16)
 10090fc:	003ff106 	br	10090c4 <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x60>

01009100 <_ZNSs4_Rep7_M_grabERKSaIcES2_>:
 1009100:	deffed04 	addi	sp,sp,-76
 1009104:	00804074 	movhi	r2,257
 1009108:	10b41004 	addi	r2,r2,-12224
 100910c:	00c040b4 	movhi	r3,258
 1009110:	18d68604 	addi	r3,r3,23064
 1009114:	d8800615 	stw	r2,24(sp)
 1009118:	d9000e15 	stw	r4,56(sp)
 100911c:	00804074 	movhi	r2,257
 1009120:	10a47804 	addi	r2,r2,-28192
 1009124:	d809883a 	mov	r4,sp
 1009128:	d8c00715 	stw	r3,28(sp)
 100912c:	d8800915 	stw	r2,36(sp)
 1009130:	dfc01215 	stw	ra,72(sp)
 1009134:	df001115 	stw	fp,68(sp)
 1009138:	ddc01015 	stw	r23,64(sp)
 100913c:	dec00815 	stw	sp,32(sp)
 1009140:	dec00a15 	stw	sp,40(sp)
 1009144:	d9400f15 	stw	r5,60(sp)
 1009148:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100914c:	d8c00e17 	ldw	r3,56(sp)
 1009150:	18800217 	ldw	r2,8(r3)
 1009154:	10000e16 	blt	r2,zero,1009190 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0x90>
 1009158:	008040f4 	movhi	r2,259
 100915c:	109c3204 	addi	r2,r2,28872
 1009160:	18801a1e 	bne	r3,r2,10091cc <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xcc>
 1009164:	d8800e17 	ldw	r2,56(sp)
 1009168:	d809883a 	mov	r4,sp
 100916c:	10800304 	addi	r2,r2,12
 1009170:	d8800d15 	stw	r2,52(sp)
 1009174:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1009178:	d8800d17 	ldw	r2,52(sp)
 100917c:	dfc01217 	ldw	ra,72(sp)
 1009180:	df001117 	ldw	fp,68(sp)
 1009184:	ddc01017 	ldw	r23,64(sp)
 1009188:	dec01304 	addi	sp,sp,76
 100918c:	f800283a 	ret
 1009190:	d9000e17 	ldw	r4,56(sp)
 1009194:	d9400f17 	ldw	r5,60(sp)
 1009198:	000d883a 	mov	r6,zero
 100919c:	00bfffc4 	movi	r2,-1
 10091a0:	d8800115 	stw	r2,4(sp)
 10091a4:	10090640 	call	1009064 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 10091a8:	d809883a 	mov	r4,sp
 10091ac:	d8800d15 	stw	r2,52(sp)
 10091b0:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 10091b4:	d8800d17 	ldw	r2,52(sp)
 10091b8:	dfc01217 	ldw	ra,72(sp)
 10091bc:	df001117 	ldw	fp,68(sp)
 10091c0:	ddc01017 	ldw	r23,64(sp)
 10091c4:	dec01304 	addi	sp,sp,76
 10091c8:	f800283a 	ret
 10091cc:	01400044 	movi	r5,1
 10091d0:	d9400115 	stw	r5,4(sp)
 10091d4:	19000204 	addi	r4,r3,8
 10091d8:	100bbac0 	call	100bbac <_ZN9__gnu_cxx12__atomic_addEPVii>
 10091dc:	003fe106 	br	1009164 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0x64>
 10091e0:	d8800317 	ldw	r2,12(sp)
 10091e4:	00ffffc4 	movi	r3,-1
 10091e8:	d9000217 	ldw	r4,8(sp)
 10091ec:	10c00226 	beq	r2,r3,10091f8 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xf8>
 10091f0:	d8c00115 	stw	r3,4(sp)
 10091f4:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 10091f8:	00bfffc4 	movi	r2,-1
 10091fc:	d8800115 	stw	r2,4(sp)
 1009200:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01009204 <_ZNKSs4copyEPcmm>:
 1009204:	21000017 	ldw	r4,0(r4)
 1009208:	defffe04 	addi	sp,sp,-8
 100920c:	dfc00115 	stw	ra,4(sp)
 1009210:	20fffd17 	ldw	r3,-12(r4)
 1009214:	dc000015 	stw	r16,0(sp)
 1009218:	2811883a 	mov	r8,r5
 100921c:	19c01836 	bltu	r3,r7,1009280 <_ZNKSs4copyEPcmm+0x7c>
 1009220:	19c5c83a 	sub	r2,r3,r7
 1009224:	3021883a 	mov	r16,r6
 1009228:	11800c36 	bltu	r2,r6,100925c <_ZNKSs4copyEPcmm+0x58>
 100922c:	80000626 	beq	r16,zero,1009248 <_ZNKSs4copyEPcmm+0x44>
 1009230:	00800044 	movi	r2,1
 1009234:	21cb883a 	add	r5,r4,r7
 1009238:	80800a26 	beq	r16,r2,1009264 <_ZNKSs4copyEPcmm+0x60>
 100923c:	4009883a 	mov	r4,r8
 1009240:	800d883a 	mov	r6,r16
 1009244:	100ed4c0 	call	100ed4c <memcpy>
 1009248:	8005883a 	mov	r2,r16
 100924c:	dfc00117 	ldw	ra,4(sp)
 1009250:	dc000017 	ldw	r16,0(sp)
 1009254:	dec00204 	addi	sp,sp,8
 1009258:	f800283a 	ret
 100925c:	1021883a 	mov	r16,r2
 1009260:	003ff206 	br	100922c <_ZNKSs4copyEPcmm+0x28>
 1009264:	28800003 	ldbu	r2,0(r5)
 1009268:	40800005 	stb	r2,0(r8)
 100926c:	8005883a 	mov	r2,r16
 1009270:	dfc00117 	ldw	ra,4(sp)
 1009274:	dc000017 	ldw	r16,0(sp)
 1009278:	dec00204 	addi	sp,sp,8
 100927c:	f800283a 	ret
 1009280:	010040b4 	movhi	r4,258
 1009284:	21191f04 	addi	r4,r4,25724
 1009288:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

0100928c <_ZNSs13_S_copy_charsEPcPKcS1_>:
 100928c:	3147c83a 	sub	r3,r6,r5
 1009290:	00800044 	movi	r2,1
 1009294:	180d883a 	mov	r6,r3
 1009298:	18800126 	beq	r3,r2,10092a0 <_ZNSs13_S_copy_charsEPcPKcS1_+0x14>
 100929c:	100ed4c1 	jmpi	100ed4c <memcpy>
 10092a0:	28800003 	ldbu	r2,0(r5)
 10092a4:	20800005 	stb	r2,0(r4)
 10092a8:	f800283a 	ret

010092ac <_ZNSs13_S_copy_charsEPcS_S_>:
 10092ac:	3147c83a 	sub	r3,r6,r5
 10092b0:	00800044 	movi	r2,1
 10092b4:	180d883a 	mov	r6,r3
 10092b8:	18800126 	beq	r3,r2,10092c0 <_ZNSs13_S_copy_charsEPcS_S_+0x14>
 10092bc:	100ed4c1 	jmpi	100ed4c <memcpy>
 10092c0:	28800003 	ldbu	r2,0(r5)
 10092c4:	20800005 	stb	r2,0(r4)
 10092c8:	f800283a 	ret

010092cc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>:
 10092cc:	defffb04 	addi	sp,sp,-20
 10092d0:	dc000015 	stw	r16,0(sp)
 10092d4:	dfc00415 	stw	ra,16(sp)
 10092d8:	dcc00315 	stw	r19,12(sp)
 10092dc:	dc800215 	stw	r18,8(sp)
 10092e0:	dc400115 	stw	r17,4(sp)
 10092e4:	2021883a 	mov	r16,r4
 10092e8:	21401c26 	beq	r4,r5,100935c <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x90>
 10092ec:	20002526 	beq	r4,zero,1009384 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0xb8>
 10092f0:	2c25c83a 	sub	r18,r5,r16
 10092f4:	9009883a 	mov	r4,r18
 10092f8:	000b883a 	mov	r5,zero
 10092fc:	10084f80 	call	10084f8 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1009300:	1023883a 	mov	r17,r2
 1009304:	14c00304 	addi	r19,r2,12
 1009308:	00800044 	movi	r2,1
 100930c:	90801026 	beq	r18,r2,1009350 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x84>
 1009310:	800b883a 	mov	r5,r16
 1009314:	9809883a 	mov	r4,r19
 1009318:	900d883a 	mov	r6,r18
 100931c:	100ed4c0 	call	100ed4c <memcpy>
 1009320:	9c85883a 	add	r2,r19,r18
 1009324:	8c800015 	stw	r18,0(r17)
 1009328:	88000215 	stw	zero,8(r17)
 100932c:	10000005 	stb	zero,0(r2)
 1009330:	9805883a 	mov	r2,r19
 1009334:	dfc00417 	ldw	ra,16(sp)
 1009338:	dcc00317 	ldw	r19,12(sp)
 100933c:	dc800217 	ldw	r18,8(sp)
 1009340:	dc400117 	ldw	r17,4(sp)
 1009344:	dc000017 	ldw	r16,0(sp)
 1009348:	dec00504 	addi	sp,sp,20
 100934c:	f800283a 	ret
 1009350:	80800003 	ldbu	r2,0(r16)
 1009354:	88800305 	stb	r2,12(r17)
 1009358:	003ff106 	br	1009320 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x54>
 100935c:	04c040f4 	movhi	r19,259
 1009360:	9cdc3504 	addi	r19,r19,28884
 1009364:	9805883a 	mov	r2,r19
 1009368:	dfc00417 	ldw	ra,16(sp)
 100936c:	dcc00317 	ldw	r19,12(sp)
 1009370:	dc800217 	ldw	r18,8(sp)
 1009374:	dc400117 	ldw	r17,4(sp)
 1009378:	dc000017 	ldw	r16,0(sp)
 100937c:	dec00504 	addi	sp,sp,20
 1009380:	f800283a 	ret
 1009384:	010040b4 	movhi	r4,258
 1009388:	21192404 	addi	r4,r4,25744
 100938c:	1005c640 	call	1005c64 <_ZSt19__throw_logic_errorPKc>

01009390 <_ZNSsC2IPcEET_S1_RKSaIcE>:
 1009390:	defffe04 	addi	sp,sp,-8
 1009394:	dc400015 	stw	r17,0(sp)
 1009398:	2023883a 	mov	r17,r4
 100939c:	2809883a 	mov	r4,r5
 10093a0:	300b883a 	mov	r5,r6
 10093a4:	380d883a 	mov	r6,r7
 10093a8:	dfc00115 	stw	ra,4(sp)
 10093ac:	10092cc0 	call	10092cc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 10093b0:	88800015 	stw	r2,0(r17)
 10093b4:	dfc00117 	ldw	ra,4(sp)
 10093b8:	dc400017 	ldw	r17,0(sp)
 10093bc:	dec00204 	addi	sp,sp,8
 10093c0:	f800283a 	ret

010093c4 <_ZNSsC1ERKSsmmRKSaIcE>:
 10093c4:	29400017 	ldw	r5,0(r5)
 10093c8:	defffe04 	addi	sp,sp,-8
 10093cc:	dc000015 	stw	r16,0(sp)
 10093d0:	28bffd17 	ldw	r2,-12(r5)
 10093d4:	dfc00115 	stw	ra,4(sp)
 10093d8:	2021883a 	mov	r16,r4
 10093dc:	11800e36 	bltu	r2,r6,1009418 <_ZNSsC1ERKSsmmRKSaIcE+0x54>
 10093e0:	1185c83a 	sub	r2,r2,r6
 10093e4:	2989883a 	add	r4,r5,r6
 10093e8:	11c00936 	bltu	r2,r7,1009410 <_ZNSsC1ERKSsmmRKSaIcE+0x4c>
 10093ec:	29cb883a 	add	r5,r5,r7
 10093f0:	314b883a 	add	r5,r6,r5
 10093f4:	d9800217 	ldw	r6,8(sp)
 10093f8:	10092cc0 	call	10092cc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 10093fc:	80800015 	stw	r2,0(r16)
 1009400:	dfc00117 	ldw	ra,4(sp)
 1009404:	dc000017 	ldw	r16,0(sp)
 1009408:	dec00204 	addi	sp,sp,8
 100940c:	f800283a 	ret
 1009410:	100f883a 	mov	r7,r2
 1009414:	003ff506 	br	10093ec <_ZNSsC1ERKSsmmRKSaIcE+0x28>
 1009418:	010040b4 	movhi	r4,258
 100941c:	21192f04 	addi	r4,r4,25788
 1009420:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

01009424 <_ZNSsC2ERKSsmmRKSaIcE>:
 1009424:	29400017 	ldw	r5,0(r5)
 1009428:	defffe04 	addi	sp,sp,-8
 100942c:	dc000015 	stw	r16,0(sp)
 1009430:	28bffd17 	ldw	r2,-12(r5)
 1009434:	dfc00115 	stw	ra,4(sp)
 1009438:	2021883a 	mov	r16,r4
 100943c:	11800e36 	bltu	r2,r6,1009478 <_ZNSsC2ERKSsmmRKSaIcE+0x54>
 1009440:	1185c83a 	sub	r2,r2,r6
 1009444:	2989883a 	add	r4,r5,r6
 1009448:	11c00936 	bltu	r2,r7,1009470 <_ZNSsC2ERKSsmmRKSaIcE+0x4c>
 100944c:	29cb883a 	add	r5,r5,r7
 1009450:	314b883a 	add	r5,r6,r5
 1009454:	d9800217 	ldw	r6,8(sp)
 1009458:	10092cc0 	call	10092cc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 100945c:	80800015 	stw	r2,0(r16)
 1009460:	dfc00117 	ldw	ra,4(sp)
 1009464:	dc000017 	ldw	r16,0(sp)
 1009468:	dec00204 	addi	sp,sp,8
 100946c:	f800283a 	ret
 1009470:	100f883a 	mov	r7,r2
 1009474:	003ff506 	br	100944c <_ZNSsC2ERKSsmmRKSaIcE+0x28>
 1009478:	010040b4 	movhi	r4,258
 100947c:	21192f04 	addi	r4,r4,25788
 1009480:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

01009484 <_ZNSsC1ERKSsmm>:
 1009484:	deffea04 	addi	sp,sp,-88
 1009488:	00804074 	movhi	r2,257
 100948c:	10b41004 	addi	r2,r2,-12224
 1009490:	00c040b4 	movhi	r3,258
 1009494:	18d68944 	addi	r3,r3,23077
 1009498:	d8800715 	stw	r2,28(sp)
 100949c:	d9000f15 	stw	r4,60(sp)
 10094a0:	00804074 	movhi	r2,257
 10094a4:	10a55804 	addi	r2,r2,-27296
 10094a8:	d9000104 	addi	r4,sp,4
 10094ac:	d8c00815 	stw	r3,32(sp)
 10094b0:	d8800a15 	stw	r2,40(sp)
 10094b4:	d9401015 	stw	r5,64(sp)
 10094b8:	dfc01515 	stw	ra,84(sp)
 10094bc:	df001415 	stw	fp,80(sp)
 10094c0:	ddc01315 	stw	r23,76(sp)
 10094c4:	dec00915 	stw	sp,36(sp)
 10094c8:	dec00b15 	stw	sp,44(sp)
 10094cc:	d9801115 	stw	r6,68(sp)
 10094d0:	d9c01215 	stw	r7,72(sp)
 10094d4:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 10094d8:	d8801017 	ldw	r2,64(sp)
 10094dc:	d8c01117 	ldw	r3,68(sp)
 10094e0:	11400017 	ldw	r5,0(r2)
 10094e4:	28bffd17 	ldw	r2,-12(r5)
 10094e8:	10c01836 	bltu	r2,r3,100954c <_ZNSsC1ERKSsmm+0xc8>
 10094ec:	d8c01117 	ldw	r3,68(sp)
 10094f0:	d9c01217 	ldw	r7,72(sp)
 10094f4:	10c5c83a 	sub	r2,r2,r3
 10094f8:	28c9883a 	add	r4,r5,r3
 10094fc:	11c01136 	bltu	r2,r7,1009544 <_ZNSsC1ERKSsmm+0xc0>
 1009500:	00800044 	movi	r2,1
 1009504:	d8800215 	stw	r2,8(sp)
 1009508:	d8801117 	ldw	r2,68(sp)
 100950c:	29cb883a 	add	r5,r5,r7
 1009510:	d80d883a 	mov	r6,sp
 1009514:	114b883a 	add	r5,r2,r5
 1009518:	d9c00e03 	ldbu	r7,56(sp)
 100951c:	10092cc0 	call	10092cc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 1009520:	d8c00f17 	ldw	r3,60(sp)
 1009524:	d9000104 	addi	r4,sp,4
 1009528:	18800015 	stw	r2,0(r3)
 100952c:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1009530:	dfc01517 	ldw	ra,84(sp)
 1009534:	df001417 	ldw	fp,80(sp)
 1009538:	ddc01317 	ldw	r23,76(sp)
 100953c:	dec01604 	addi	sp,sp,88
 1009540:	f800283a 	ret
 1009544:	100f883a 	mov	r7,r2
 1009548:	003fed06 	br	1009500 <_ZNSsC1ERKSsmm+0x7c>
 100954c:	00bfffc4 	movi	r2,-1
 1009550:	010040b4 	movhi	r4,258
 1009554:	21192f04 	addi	r4,r4,25788
 1009558:	d8800215 	stw	r2,8(sp)
 100955c:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>
 1009560:	d9000317 	ldw	r4,12(sp)
 1009564:	00bfffc4 	movi	r2,-1
 1009568:	d8800215 	stw	r2,8(sp)
 100956c:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>

01009570 <_ZNKSs6substrEmm>:
 1009570:	28c00017 	ldw	r3,0(r5)
 1009574:	defffe04 	addi	sp,sp,-8
 1009578:	dc000015 	stw	r16,0(sp)
 100957c:	18bffd17 	ldw	r2,-12(r3)
 1009580:	dfc00115 	stw	ra,4(sp)
 1009584:	2021883a 	mov	r16,r4
 1009588:	11800636 	bltu	r2,r6,10095a4 <_ZNKSs6substrEmm+0x34>
 100958c:	10094840 	call	1009484 <_ZNSsC1ERKSsmm>
 1009590:	8005883a 	mov	r2,r16
 1009594:	dfc00117 	ldw	ra,4(sp)
 1009598:	dc000017 	ldw	r16,0(sp)
 100959c:	dec00204 	addi	sp,sp,8
 10095a0:	f800283a 	ret
 10095a4:	010040b4 	movhi	r4,258
 10095a8:	21193604 	addi	r4,r4,25816
 10095ac:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

010095b0 <_ZNSsC2ERKSsmm>:
 10095b0:	deffea04 	addi	sp,sp,-88
 10095b4:	00804074 	movhi	r2,257
 10095b8:	10b41004 	addi	r2,r2,-12224
 10095bc:	00c040b4 	movhi	r3,258
 10095c0:	18d68ac4 	addi	r3,r3,23083
 10095c4:	d8800715 	stw	r2,28(sp)
 10095c8:	d9000f15 	stw	r4,60(sp)
 10095cc:	00804074 	movhi	r2,257
 10095d0:	10a5a304 	addi	r2,r2,-26996
 10095d4:	d9000104 	addi	r4,sp,4
 10095d8:	d8c00815 	stw	r3,32(sp)
 10095dc:	d8800a15 	stw	r2,40(sp)
 10095e0:	d9401015 	stw	r5,64(sp)
 10095e4:	dfc01515 	stw	ra,84(sp)
 10095e8:	df001415 	stw	fp,80(sp)
 10095ec:	ddc01315 	stw	r23,76(sp)
 10095f0:	dec00915 	stw	sp,36(sp)
 10095f4:	dec00b15 	stw	sp,44(sp)
 10095f8:	d9801115 	stw	r6,68(sp)
 10095fc:	d9c01215 	stw	r7,72(sp)
 1009600:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1009604:	d8801017 	ldw	r2,64(sp)
 1009608:	d8c01117 	ldw	r3,68(sp)
 100960c:	11400017 	ldw	r5,0(r2)
 1009610:	28bffd17 	ldw	r2,-12(r5)
 1009614:	10c01836 	bltu	r2,r3,1009678 <_ZNSsC2ERKSsmm+0xc8>
 1009618:	d8c01117 	ldw	r3,68(sp)
 100961c:	d9c01217 	ldw	r7,72(sp)
 1009620:	10c5c83a 	sub	r2,r2,r3
 1009624:	28c9883a 	add	r4,r5,r3
 1009628:	11c01136 	bltu	r2,r7,1009670 <_ZNSsC2ERKSsmm+0xc0>
 100962c:	00800044 	movi	r2,1
 1009630:	d8800215 	stw	r2,8(sp)
 1009634:	d8801117 	ldw	r2,68(sp)
 1009638:	29cb883a 	add	r5,r5,r7
 100963c:	d80d883a 	mov	r6,sp
 1009640:	114b883a 	add	r5,r2,r5
 1009644:	d9c00e03 	ldbu	r7,56(sp)
 1009648:	10092cc0 	call	10092cc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 100964c:	d8c00f17 	ldw	r3,60(sp)
 1009650:	d9000104 	addi	r4,sp,4
 1009654:	18800015 	stw	r2,0(r3)
 1009658:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100965c:	dfc01517 	ldw	ra,84(sp)
 1009660:	df001417 	ldw	fp,80(sp)
 1009664:	ddc01317 	ldw	r23,76(sp)
 1009668:	dec01604 	addi	sp,sp,88
 100966c:	f800283a 	ret
 1009670:	100f883a 	mov	r7,r2
 1009674:	003fed06 	br	100962c <_ZNSsC2ERKSsmm+0x7c>
 1009678:	00bfffc4 	movi	r2,-1
 100967c:	010040b4 	movhi	r4,258
 1009680:	21192f04 	addi	r4,r4,25788
 1009684:	d8800215 	stw	r2,8(sp)
 1009688:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>
 100968c:	d9000317 	ldw	r4,12(sp)
 1009690:	00bfffc4 	movi	r2,-1
 1009694:	d8800215 	stw	r2,8(sp)
 1009698:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>

0100969c <_ZNSsC1IPcEET_S1_RKSaIcE>:
 100969c:	defffe04 	addi	sp,sp,-8
 10096a0:	dc400015 	stw	r17,0(sp)
 10096a4:	2023883a 	mov	r17,r4
 10096a8:	2809883a 	mov	r4,r5
 10096ac:	300b883a 	mov	r5,r6
 10096b0:	380d883a 	mov	r6,r7
 10096b4:	dfc00115 	stw	ra,4(sp)
 10096b8:	10092cc0 	call	10092cc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 10096bc:	88800015 	stw	r2,0(r17)
 10096c0:	dfc00117 	ldw	ra,4(sp)
 10096c4:	dc400017 	ldw	r17,0(sp)
 10096c8:	dec00204 	addi	sp,sp,8
 10096cc:	f800283a 	ret

010096d0 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_>:
 10096d0:	3147c83a 	sub	r3,r6,r5
 10096d4:	00800044 	movi	r2,1
 10096d8:	180d883a 	mov	r6,r3
 10096dc:	18800126 	beq	r3,r2,10096e4 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_+0x14>
 10096e0:	100ed4c1 	jmpi	100ed4c <memcpy>
 10096e4:	28800003 	ldbu	r2,0(r5)
 10096e8:	20800005 	stb	r2,0(r4)
 10096ec:	f800283a 	ret

010096f0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 10096f0:	defffb04 	addi	sp,sp,-20
 10096f4:	dc000015 	stw	r16,0(sp)
 10096f8:	dfc00415 	stw	ra,16(sp)
 10096fc:	dcc00315 	stw	r19,12(sp)
 1009700:	dc800215 	stw	r18,8(sp)
 1009704:	dc400115 	stw	r17,4(sp)
 1009708:	2021883a 	mov	r16,r4
 100970c:	21401c26 	beq	r4,r5,1009780 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x90>
 1009710:	20002526 	beq	r4,zero,10097a8 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xb8>
 1009714:	2c25c83a 	sub	r18,r5,r16
 1009718:	9009883a 	mov	r4,r18
 100971c:	000b883a 	mov	r5,zero
 1009720:	10084f80 	call	10084f8 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1009724:	1023883a 	mov	r17,r2
 1009728:	14c00304 	addi	r19,r2,12
 100972c:	00800044 	movi	r2,1
 1009730:	90801026 	beq	r18,r2,1009774 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x84>
 1009734:	800b883a 	mov	r5,r16
 1009738:	9809883a 	mov	r4,r19
 100973c:	900d883a 	mov	r6,r18
 1009740:	100ed4c0 	call	100ed4c <memcpy>
 1009744:	9c85883a 	add	r2,r19,r18
 1009748:	8c800015 	stw	r18,0(r17)
 100974c:	88000215 	stw	zero,8(r17)
 1009750:	10000005 	stb	zero,0(r2)
 1009754:	9805883a 	mov	r2,r19
 1009758:	dfc00417 	ldw	ra,16(sp)
 100975c:	dcc00317 	ldw	r19,12(sp)
 1009760:	dc800217 	ldw	r18,8(sp)
 1009764:	dc400117 	ldw	r17,4(sp)
 1009768:	dc000017 	ldw	r16,0(sp)
 100976c:	dec00504 	addi	sp,sp,20
 1009770:	f800283a 	ret
 1009774:	80800003 	ldbu	r2,0(r16)
 1009778:	88800305 	stb	r2,12(r17)
 100977c:	003ff106 	br	1009744 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x54>
 1009780:	04c040f4 	movhi	r19,259
 1009784:	9cdc3504 	addi	r19,r19,28884
 1009788:	9805883a 	mov	r2,r19
 100978c:	dfc00417 	ldw	ra,16(sp)
 1009790:	dcc00317 	ldw	r19,12(sp)
 1009794:	dc800217 	ldw	r18,8(sp)
 1009798:	dc400117 	ldw	r17,4(sp)
 100979c:	dc000017 	ldw	r16,0(sp)
 10097a0:	dec00504 	addi	sp,sp,20
 10097a4:	f800283a 	ret
 10097a8:	010040b4 	movhi	r4,258
 10097ac:	21192404 	addi	r4,r4,25744
 10097b0:	1005c640 	call	1005c64 <_ZSt19__throw_logic_errorPKc>

010097b4 <_ZNSsC2IPKcEET_S2_RKSaIcE>:
 10097b4:	defffe04 	addi	sp,sp,-8
 10097b8:	dc400015 	stw	r17,0(sp)
 10097bc:	2023883a 	mov	r17,r4
 10097c0:	2809883a 	mov	r4,r5
 10097c4:	300b883a 	mov	r5,r6
 10097c8:	380d883a 	mov	r6,r7
 10097cc:	dfc00115 	stw	ra,4(sp)
 10097d0:	10096f00 	call	10096f0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 10097d4:	88800015 	stw	r2,0(r17)
 10097d8:	dfc00117 	ldw	ra,4(sp)
 10097dc:	dc400017 	ldw	r17,0(sp)
 10097e0:	dec00204 	addi	sp,sp,8
 10097e4:	f800283a 	ret

010097e8 <_ZNSsC1EPKcmRKSaIcE>:
 10097e8:	defffe04 	addi	sp,sp,-8
 10097ec:	dc400015 	stw	r17,0(sp)
 10097f0:	2023883a 	mov	r17,r4
 10097f4:	2809883a 	mov	r4,r5
 10097f8:	314b883a 	add	r5,r6,r5
 10097fc:	380d883a 	mov	r6,r7
 1009800:	dfc00115 	stw	ra,4(sp)
 1009804:	10096f00 	call	10096f0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1009808:	88800015 	stw	r2,0(r17)
 100980c:	dfc00117 	ldw	ra,4(sp)
 1009810:	dc400017 	ldw	r17,0(sp)
 1009814:	dec00204 	addi	sp,sp,8
 1009818:	f800283a 	ret

0100981c <_ZNSsC2EPKcmRKSaIcE>:
 100981c:	defffe04 	addi	sp,sp,-8
 1009820:	dc400015 	stw	r17,0(sp)
 1009824:	2023883a 	mov	r17,r4
 1009828:	2809883a 	mov	r4,r5
 100982c:	314b883a 	add	r5,r6,r5
 1009830:	380d883a 	mov	r6,r7
 1009834:	dfc00115 	stw	ra,4(sp)
 1009838:	10096f00 	call	10096f0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 100983c:	88800015 	stw	r2,0(r17)
 1009840:	dfc00117 	ldw	ra,4(sp)
 1009844:	dc400017 	ldw	r17,0(sp)
 1009848:	dec00204 	addi	sp,sp,8
 100984c:	f800283a 	ret

01009850 <_ZNSsC1IPKcEET_S2_RKSaIcE>:
 1009850:	defffe04 	addi	sp,sp,-8
 1009854:	dc400015 	stw	r17,0(sp)
 1009858:	2023883a 	mov	r17,r4
 100985c:	2809883a 	mov	r4,r5
 1009860:	300b883a 	mov	r5,r6
 1009864:	380d883a 	mov	r6,r7
 1009868:	dfc00115 	stw	ra,4(sp)
 100986c:	10096f00 	call	10096f0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1009870:	88800015 	stw	r2,0(r17)
 1009874:	dfc00117 	ldw	ra,4(sp)
 1009878:	dc400017 	ldw	r17,0(sp)
 100987c:	dec00204 	addi	sp,sp,8
 1009880:	f800283a 	ret

01009884 <_ZNSsC1EPKcRKSaIcE>:
 1009884:	defffc04 	addi	sp,sp,-16
 1009888:	dc400215 	stw	r17,8(sp)
 100988c:	dc000115 	stw	r16,4(sp)
 1009890:	2023883a 	mov	r17,r4
 1009894:	dfc00315 	stw	ra,12(sp)
 1009898:	00bfffc4 	movi	r2,-1
 100989c:	2809883a 	mov	r4,r5
 10098a0:	3021883a 	mov	r16,r6
 10098a4:	28000426 	beq	r5,zero,10098b8 <_ZNSsC1EPKcRKSaIcE+0x34>
 10098a8:	d9400015 	stw	r5,0(sp)
 10098ac:	100f5c00 	call	100f5c0 <strlen>
 10098b0:	d9400017 	ldw	r5,0(sp)
 10098b4:	2885883a 	add	r2,r5,r2
 10098b8:	2809883a 	mov	r4,r5
 10098bc:	800d883a 	mov	r6,r16
 10098c0:	100b883a 	mov	r5,r2
 10098c4:	800f883a 	mov	r7,r16
 10098c8:	10096f00 	call	10096f0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 10098cc:	88800015 	stw	r2,0(r17)
 10098d0:	dfc00317 	ldw	ra,12(sp)
 10098d4:	dc400217 	ldw	r17,8(sp)
 10098d8:	dc000117 	ldw	r16,4(sp)
 10098dc:	dec00404 	addi	sp,sp,16
 10098e0:	f800283a 	ret

010098e4 <_ZNSsC2EPKcRKSaIcE>:
 10098e4:	defffc04 	addi	sp,sp,-16
 10098e8:	dc400215 	stw	r17,8(sp)
 10098ec:	dc000115 	stw	r16,4(sp)
 10098f0:	2023883a 	mov	r17,r4
 10098f4:	dfc00315 	stw	ra,12(sp)
 10098f8:	00bfffc4 	movi	r2,-1
 10098fc:	2809883a 	mov	r4,r5
 1009900:	3021883a 	mov	r16,r6
 1009904:	28000426 	beq	r5,zero,1009918 <_ZNSsC2EPKcRKSaIcE+0x34>
 1009908:	d9400015 	stw	r5,0(sp)
 100990c:	100f5c00 	call	100f5c0 <strlen>
 1009910:	d9400017 	ldw	r5,0(sp)
 1009914:	2885883a 	add	r2,r5,r2
 1009918:	2809883a 	mov	r4,r5
 100991c:	800d883a 	mov	r6,r16
 1009920:	100b883a 	mov	r5,r2
 1009924:	800f883a 	mov	r7,r16
 1009928:	10096f00 	call	10096f0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 100992c:	88800015 	stw	r2,0(r17)
 1009930:	dfc00317 	ldw	ra,12(sp)
 1009934:	dc400217 	ldw	r17,8(sp)
 1009938:	dc000117 	ldw	r16,4(sp)
 100993c:	dec00404 	addi	sp,sp,16
 1009940:	f800283a 	ret

01009944 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_>:
 1009944:	3147c83a 	sub	r3,r6,r5
 1009948:	00800044 	movi	r2,1
 100994c:	180d883a 	mov	r6,r3
 1009950:	18800126 	beq	r3,r2,1009958 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_+0x14>
 1009954:	100ed4c1 	jmpi	100ed4c <memcpy>
 1009958:	28800003 	ldbu	r2,0(r5)
 100995c:	20800005 	stb	r2,0(r4)
 1009960:	f800283a 	ret

01009964 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>:
 1009964:	defffb04 	addi	sp,sp,-20
 1009968:	dc000015 	stw	r16,0(sp)
 100996c:	dfc00415 	stw	ra,16(sp)
 1009970:	dcc00315 	stw	r19,12(sp)
 1009974:	dc800215 	stw	r18,8(sp)
 1009978:	dc400115 	stw	r17,4(sp)
 100997c:	2021883a 	mov	r16,r4
 1009980:	29000a1e 	bne	r5,r4,10099ac <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0x48>
 1009984:	04c040f4 	movhi	r19,259
 1009988:	9cdc3504 	addi	r19,r19,28884
 100998c:	9805883a 	mov	r2,r19
 1009990:	dfc00417 	ldw	ra,16(sp)
 1009994:	dcc00317 	ldw	r19,12(sp)
 1009998:	dc800217 	ldw	r18,8(sp)
 100999c:	dc400117 	ldw	r17,4(sp)
 10099a0:	dc000017 	ldw	r16,0(sp)
 10099a4:	dec00504 	addi	sp,sp,20
 10099a8:	f800283a 	ret
 10099ac:	2923c83a 	sub	r17,r5,r4
 10099b0:	8809883a 	mov	r4,r17
 10099b4:	000b883a 	mov	r5,zero
 10099b8:	10084f80 	call	10084f8 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 10099bc:	1025883a 	mov	r18,r2
 10099c0:	14c00304 	addi	r19,r2,12
 10099c4:	00800044 	movi	r2,1
 10099c8:	88801026 	beq	r17,r2,1009a0c <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0xa8>
 10099cc:	800b883a 	mov	r5,r16
 10099d0:	9809883a 	mov	r4,r19
 10099d4:	880d883a 	mov	r6,r17
 10099d8:	100ed4c0 	call	100ed4c <memcpy>
 10099dc:	9c45883a 	add	r2,r19,r17
 10099e0:	94400015 	stw	r17,0(r18)
 10099e4:	90000215 	stw	zero,8(r18)
 10099e8:	10000005 	stb	zero,0(r2)
 10099ec:	9805883a 	mov	r2,r19
 10099f0:	dfc00417 	ldw	ra,16(sp)
 10099f4:	dcc00317 	ldw	r19,12(sp)
 10099f8:	dc800217 	ldw	r18,8(sp)
 10099fc:	dc400117 	ldw	r17,4(sp)
 1009a00:	dc000017 	ldw	r16,0(sp)
 1009a04:	dec00504 	addi	sp,sp,20
 1009a08:	f800283a 	ret
 1009a0c:	80800003 	ldbu	r2,0(r16)
 1009a10:	98800005 	stb	r2,0(r19)
 1009a14:	003ff106 	br	10099dc <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0x78>

01009a18 <_ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE>:
 1009a18:	defffe04 	addi	sp,sp,-8
 1009a1c:	dc400015 	stw	r17,0(sp)
 1009a20:	2023883a 	mov	r17,r4
 1009a24:	2809883a 	mov	r4,r5
 1009a28:	300b883a 	mov	r5,r6
 1009a2c:	380d883a 	mov	r6,r7
 1009a30:	dfc00115 	stw	ra,4(sp)
 1009a34:	10099640 	call	1009964 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>
 1009a38:	88800015 	stw	r2,0(r17)
 1009a3c:	dfc00117 	ldw	ra,4(sp)
 1009a40:	dc400017 	ldw	r17,0(sp)
 1009a44:	dec00204 	addi	sp,sp,8
 1009a48:	f800283a 	ret

01009a4c <_ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE>:
 1009a4c:	defffe04 	addi	sp,sp,-8
 1009a50:	dc400015 	stw	r17,0(sp)
 1009a54:	2023883a 	mov	r17,r4
 1009a58:	2809883a 	mov	r4,r5
 1009a5c:	300b883a 	mov	r5,r6
 1009a60:	380d883a 	mov	r6,r7
 1009a64:	dfc00115 	stw	ra,4(sp)
 1009a68:	10099640 	call	1009964 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>
 1009a6c:	88800015 	stw	r2,0(r17)
 1009a70:	dfc00117 	ldw	ra,4(sp)
 1009a74:	dc400017 	ldw	r17,0(sp)
 1009a78:	dec00204 	addi	sp,sp,8
 1009a7c:	f800283a 	ret

01009a80 <_ZNSsC1ERKSs>:
 1009a80:	deffec04 	addi	sp,sp,-80
 1009a84:	00804074 	movhi	r2,257
 1009a88:	10b41004 	addi	r2,r2,-12224
 1009a8c:	d8800715 	stw	r2,28(sp)
 1009a90:	00c040b4 	movhi	r3,258
 1009a94:	18d68d04 	addi	r3,r3,23092
 1009a98:	00804074 	movhi	r2,257
 1009a9c:	10a6d104 	addi	r2,r2,-25788
 1009aa0:	d9000e15 	stw	r4,56(sp)
 1009aa4:	d9000104 	addi	r4,sp,4
 1009aa8:	d8800a15 	stw	r2,40(sp)
 1009aac:	dfc01315 	stw	ra,76(sp)
 1009ab0:	df001215 	stw	fp,72(sp)
 1009ab4:	ddc01115 	stw	r23,68(sp)
 1009ab8:	d8c00815 	stw	r3,32(sp)
 1009abc:	d9400f15 	stw	r5,60(sp)
 1009ac0:	dec00915 	stw	sp,36(sp)
 1009ac4:	dec00b15 	stw	sp,44(sp)
 1009ac8:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1009acc:	d8800f17 	ldw	r2,60(sp)
 1009ad0:	10800017 	ldw	r2,0(r2)
 1009ad4:	113ffd04 	addi	r4,r2,-12
 1009ad8:	d8801015 	stw	r2,64(sp)
 1009adc:	20800217 	ldw	r2,8(r4)
 1009ae0:	10000d16 	blt	r2,zero,1009b18 <_ZNSsC1ERKSs+0x98>
 1009ae4:	008040f4 	movhi	r2,259
 1009ae8:	109c3204 	addi	r2,r2,28872
 1009aec:	2080101e 	bne	r4,r2,1009b30 <_ZNSsC1ERKSs+0xb0>
 1009af0:	d8801017 	ldw	r2,64(sp)
 1009af4:	d8c00e17 	ldw	r3,56(sp)
 1009af8:	d9000104 	addi	r4,sp,4
 1009afc:	18800015 	stw	r2,0(r3)
 1009b00:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1009b04:	dfc01317 	ldw	ra,76(sp)
 1009b08:	df001217 	ldw	fp,72(sp)
 1009b0c:	ddc01117 	ldw	r23,68(sp)
 1009b10:	dec01404 	addi	sp,sp,80
 1009b14:	f800283a 	ret
 1009b18:	00800084 	movi	r2,2
 1009b1c:	d8800215 	stw	r2,8(sp)
 1009b20:	d80b883a 	mov	r5,sp
 1009b24:	000d883a 	mov	r6,zero
 1009b28:	10090640 	call	1009064 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1009b2c:	003ff106 	br	1009af4 <_ZNSsC1ERKSs+0x74>
 1009b30:	01400044 	movi	r5,1
 1009b34:	d9400215 	stw	r5,8(sp)
 1009b38:	21000204 	addi	r4,r4,8
 1009b3c:	100bbac0 	call	100bbac <_ZN9__gnu_cxx12__atomic_addEPVii>
 1009b40:	003feb06 	br	1009af0 <_ZNSsC1ERKSs+0x70>
 1009b44:	d8c00217 	ldw	r3,8(sp)
 1009b48:	00800044 	movi	r2,1
 1009b4c:	d9000317 	ldw	r4,12(sp)
 1009b50:	d9400417 	ldw	r5,16(sp)
 1009b54:	18800426 	beq	r3,r2,1009b68 <_ZNSsC1ERKSs+0xe8>
 1009b58:	00bfffc4 	movi	r2,-1
 1009b5c:	28800426 	beq	r5,r2,1009b70 <_ZNSsC1ERKSs+0xf0>
 1009b60:	d8800215 	stw	r2,8(sp)
 1009b64:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1009b68:	00bfffc4 	movi	r2,-1
 1009b6c:	003ffc06 	br	1009b60 <_ZNSsC1ERKSs+0xe0>
 1009b70:	00bfffc4 	movi	r2,-1
 1009b74:	d8800215 	stw	r2,8(sp)
 1009b78:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01009b7c <_ZNSsC2ERKSs>:
 1009b7c:	deffec04 	addi	sp,sp,-80
 1009b80:	00804074 	movhi	r2,257
 1009b84:	10b41004 	addi	r2,r2,-12224
 1009b88:	d8800715 	stw	r2,28(sp)
 1009b8c:	00c040b4 	movhi	r3,258
 1009b90:	18d69104 	addi	r3,r3,23108
 1009b94:	00804074 	movhi	r2,257
 1009b98:	10a71004 	addi	r2,r2,-25536
 1009b9c:	d9000e15 	stw	r4,56(sp)
 1009ba0:	d9000104 	addi	r4,sp,4
 1009ba4:	d8800a15 	stw	r2,40(sp)
 1009ba8:	dfc01315 	stw	ra,76(sp)
 1009bac:	df001215 	stw	fp,72(sp)
 1009bb0:	ddc01115 	stw	r23,68(sp)
 1009bb4:	d8c00815 	stw	r3,32(sp)
 1009bb8:	d9400f15 	stw	r5,60(sp)
 1009bbc:	dec00915 	stw	sp,36(sp)
 1009bc0:	dec00b15 	stw	sp,44(sp)
 1009bc4:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1009bc8:	d8800f17 	ldw	r2,60(sp)
 1009bcc:	10800017 	ldw	r2,0(r2)
 1009bd0:	113ffd04 	addi	r4,r2,-12
 1009bd4:	d8801015 	stw	r2,64(sp)
 1009bd8:	20800217 	ldw	r2,8(r4)
 1009bdc:	10000d16 	blt	r2,zero,1009c14 <_ZNSsC2ERKSs+0x98>
 1009be0:	008040f4 	movhi	r2,259
 1009be4:	109c3204 	addi	r2,r2,28872
 1009be8:	2080101e 	bne	r4,r2,1009c2c <_ZNSsC2ERKSs+0xb0>
 1009bec:	d8801017 	ldw	r2,64(sp)
 1009bf0:	d8c00e17 	ldw	r3,56(sp)
 1009bf4:	d9000104 	addi	r4,sp,4
 1009bf8:	18800015 	stw	r2,0(r3)
 1009bfc:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1009c00:	dfc01317 	ldw	ra,76(sp)
 1009c04:	df001217 	ldw	fp,72(sp)
 1009c08:	ddc01117 	ldw	r23,68(sp)
 1009c0c:	dec01404 	addi	sp,sp,80
 1009c10:	f800283a 	ret
 1009c14:	00800084 	movi	r2,2
 1009c18:	d8800215 	stw	r2,8(sp)
 1009c1c:	d80b883a 	mov	r5,sp
 1009c20:	000d883a 	mov	r6,zero
 1009c24:	10090640 	call	1009064 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1009c28:	003ff106 	br	1009bf0 <_ZNSsC2ERKSs+0x74>
 1009c2c:	01400044 	movi	r5,1
 1009c30:	d9400215 	stw	r5,8(sp)
 1009c34:	21000204 	addi	r4,r4,8
 1009c38:	100bbac0 	call	100bbac <_ZN9__gnu_cxx12__atomic_addEPVii>
 1009c3c:	003feb06 	br	1009bec <_ZNSsC2ERKSs+0x70>
 1009c40:	d8c00217 	ldw	r3,8(sp)
 1009c44:	00800044 	movi	r2,1
 1009c48:	d9000317 	ldw	r4,12(sp)
 1009c4c:	d9400417 	ldw	r5,16(sp)
 1009c50:	18800426 	beq	r3,r2,1009c64 <_ZNSsC2ERKSs+0xe8>
 1009c54:	00bfffc4 	movi	r2,-1
 1009c58:	28800426 	beq	r5,r2,1009c6c <_ZNSsC2ERKSs+0xf0>
 1009c5c:	d8800215 	stw	r2,8(sp)
 1009c60:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1009c64:	00bfffc4 	movi	r2,-1
 1009c68:	003ffc06 	br	1009c5c <_ZNSsC2ERKSs+0xe0>
 1009c6c:	00bfffc4 	movi	r2,-1
 1009c70:	d8800215 	stw	r2,8(sp)
 1009c74:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01009c78 <_ZNSs6assignERKSs>:
 1009c78:	deffea04 	addi	sp,sp,-88
 1009c7c:	00804074 	movhi	r2,257
 1009c80:	10b41004 	addi	r2,r2,-12224
 1009c84:	00c040b4 	movhi	r3,258
 1009c88:	18d69504 	addi	r3,r3,23124
 1009c8c:	d8800715 	stw	r2,28(sp)
 1009c90:	d9001015 	stw	r4,64(sp)
 1009c94:	00804074 	movhi	r2,257
 1009c98:	10a76b04 	addi	r2,r2,-25172
 1009c9c:	d9000104 	addi	r4,sp,4
 1009ca0:	d8c00815 	stw	r3,32(sp)
 1009ca4:	d8800a15 	stw	r2,40(sp)
 1009ca8:	d9401115 	stw	r5,68(sp)
 1009cac:	dfc01515 	stw	ra,84(sp)
 1009cb0:	df001415 	stw	fp,80(sp)
 1009cb4:	ddc01315 	stw	r23,76(sp)
 1009cb8:	dec00915 	stw	sp,36(sp)
 1009cbc:	dec00b15 	stw	sp,44(sp)
 1009cc0:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1009cc4:	d8801117 	ldw	r2,68(sp)
 1009cc8:	d8c01017 	ldw	r3,64(sp)
 1009ccc:	10800017 	ldw	r2,0(r2)
 1009cd0:	d8801215 	stw	r2,72(sp)
 1009cd4:	d9401217 	ldw	r5,72(sp)
 1009cd8:	18800017 	ldw	r2,0(r3)
 1009cdc:	00fffd04 	movi	r3,-12
 1009ce0:	28c9883a 	add	r4,r5,r3
 1009ce4:	10c5883a 	add	r2,r2,r3
 1009ce8:	11001126 	beq	r2,r4,1009d30 <_ZNSs6assignERKSs+0xb8>
 1009cec:	20800217 	ldw	r2,8(r4)
 1009cf0:	10001716 	blt	r2,zero,1009d50 <_ZNSs6assignERKSs+0xd8>
 1009cf4:	008040f4 	movhi	r2,259
 1009cf8:	109c3204 	addi	r2,r2,28872
 1009cfc:	2080261e 	bne	r4,r2,1009d98 <_ZNSs6assignERKSs+0x120>
 1009d00:	d8c01217 	ldw	r3,72(sp)
 1009d04:	d8c00f15 	stw	r3,60(sp)
 1009d08:	d9401017 	ldw	r5,64(sp)
 1009d0c:	00c040f4 	movhi	r3,259
 1009d10:	18dc3204 	addi	r3,r3,28872
 1009d14:	28800017 	ldw	r2,0(r5)
 1009d18:	10bffd04 	addi	r2,r2,-12
 1009d1c:	d8800e15 	stw	r2,56(sp)
 1009d20:	10c0121e 	bne	r2,r3,1009d6c <_ZNSs6assignERKSs+0xf4>
 1009d24:	d8c00f17 	ldw	r3,60(sp)
 1009d28:	d8801017 	ldw	r2,64(sp)
 1009d2c:	10c00015 	stw	r3,0(r2)
 1009d30:	d9000104 	addi	r4,sp,4
 1009d34:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1009d38:	d8801017 	ldw	r2,64(sp)
 1009d3c:	dfc01517 	ldw	ra,84(sp)
 1009d40:	df001417 	ldw	fp,80(sp)
 1009d44:	ddc01317 	ldw	r23,76(sp)
 1009d48:	dec01604 	addi	sp,sp,88
 1009d4c:	f800283a 	ret
 1009d50:	00800084 	movi	r2,2
 1009d54:	d8800215 	stw	r2,8(sp)
 1009d58:	d80b883a 	mov	r5,sp
 1009d5c:	000d883a 	mov	r6,zero
 1009d60:	10090640 	call	1009064 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1009d64:	d8800f15 	stw	r2,60(sp)
 1009d68:	003fe706 	br	1009d08 <_ZNSs6assignERKSs+0x90>
 1009d6c:	d9400e17 	ldw	r5,56(sp)
 1009d70:	008000c4 	movi	r2,3
 1009d74:	d8800215 	stw	r2,8(sp)
 1009d78:	29000204 	addi	r4,r5,8
 1009d7c:	017fffc4 	movi	r5,-1
 1009d80:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1009d84:	00bfe716 	blt	zero,r2,1009d24 <_ZNSs6assignERKSs+0xac>
 1009d88:	d9000e17 	ldw	r4,56(sp)
 1009d8c:	d80b883a 	mov	r5,sp
 1009d90:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1009d94:	003fe306 	br	1009d24 <_ZNSs6assignERKSs+0xac>
 1009d98:	01400044 	movi	r5,1
 1009d9c:	d9400215 	stw	r5,8(sp)
 1009da0:	21000204 	addi	r4,r4,8
 1009da4:	100bbac0 	call	100bbac <_ZN9__gnu_cxx12__atomic_addEPVii>
 1009da8:	003fd506 	br	1009d00 <_ZNSs6assignERKSs+0x88>
 1009dac:	d8c00217 	ldw	r3,8(sp)
 1009db0:	00800044 	movi	r2,1
 1009db4:	d9000317 	ldw	r4,12(sp)
 1009db8:	d9400417 	ldw	r5,16(sp)
 1009dbc:	18800626 	beq	r3,r2,1009dd8 <_ZNSs6assignERKSs+0x160>
 1009dc0:	00800084 	movi	r2,2
 1009dc4:	18800426 	beq	r3,r2,1009dd8 <_ZNSs6assignERKSs+0x160>
 1009dc8:	00bfffc4 	movi	r2,-1
 1009dcc:	28800426 	beq	r5,r2,1009de0 <_ZNSs6assignERKSs+0x168>
 1009dd0:	d8800215 	stw	r2,8(sp)
 1009dd4:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 1009dd8:	00bfffc4 	movi	r2,-1
 1009ddc:	003ffc06 	br	1009dd0 <_ZNSs6assignERKSs+0x158>
 1009de0:	00bfffc4 	movi	r2,-1
 1009de4:	d8800215 	stw	r2,8(sp)
 1009de8:	100cec00 	call	100cec0 <__cxa_call_unexpected>

01009dec <_ZNSsaSERKSs>:
 1009dec:	1009c781 	jmpi	1009c78 <_ZNSs6assignERKSs>

01009df0 <_ZNSs7reserveEm>:
 1009df0:	deffeb04 	addi	sp,sp,-84
 1009df4:	00804074 	movhi	r2,257
 1009df8:	10b41004 	addi	r2,r2,-12224
 1009dfc:	00c040b4 	movhi	r3,258
 1009e00:	18d69944 	addi	r3,r3,23141
 1009e04:	d8800715 	stw	r2,28(sp)
 1009e08:	d9001015 	stw	r4,64(sp)
 1009e0c:	00804074 	movhi	r2,257
 1009e10:	10a7c204 	addi	r2,r2,-24824
 1009e14:	d9000104 	addi	r4,sp,4
 1009e18:	d8c00815 	stw	r3,32(sp)
 1009e1c:	d8800a15 	stw	r2,40(sp)
 1009e20:	dfc01415 	stw	ra,80(sp)
 1009e24:	df001315 	stw	fp,76(sp)
 1009e28:	ddc01215 	stw	r23,72(sp)
 1009e2c:	dec00915 	stw	sp,36(sp)
 1009e30:	dec00b15 	stw	sp,44(sp)
 1009e34:	d9401115 	stw	r5,68(sp)
 1009e38:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 1009e3c:	d8801017 	ldw	r2,64(sp)
 1009e40:	10c00017 	ldw	r3,0(r2)
 1009e44:	193ffd04 	addi	r4,r3,-12
 1009e48:	20800117 	ldw	r2,4(r4)
 1009e4c:	d8c01117 	ldw	r3,68(sp)
 1009e50:	10c01c26 	beq	r2,r3,1009ec4 <_ZNSs7reserveEm+0xd4>
 1009e54:	20c00017 	ldw	r3,0(r4)
 1009e58:	d9401117 	ldw	r5,68(sp)
 1009e5c:	28c01736 	bltu	r5,r3,1009ebc <_ZNSs7reserveEm+0xcc>
 1009e60:	00800044 	movi	r2,1
 1009e64:	28cdc83a 	sub	r6,r5,r3
 1009e68:	d8800215 	stw	r2,8(sp)
 1009e6c:	d80b883a 	mov	r5,sp
 1009e70:	10090640 	call	1009064 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1009e74:	d8c01017 	ldw	r3,64(sp)
 1009e78:	d8800f15 	stw	r2,60(sp)
 1009e7c:	18800017 	ldw	r2,0(r3)
 1009e80:	00c040f4 	movhi	r3,259
 1009e84:	18dc3204 	addi	r3,r3,28872
 1009e88:	10bffd04 	addi	r2,r2,-12
 1009e8c:	d8800e15 	stw	r2,56(sp)
 1009e90:	10c0151e 	bne	r2,r3,1009ee8 <_ZNSs7reserveEm+0xf8>
 1009e94:	d8c00f17 	ldw	r3,60(sp)
 1009e98:	d8801017 	ldw	r2,64(sp)
 1009e9c:	d9000104 	addi	r4,sp,4
 1009ea0:	10c00015 	stw	r3,0(r2)
 1009ea4:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1009ea8:	dfc01417 	ldw	ra,80(sp)
 1009eac:	df001317 	ldw	fp,76(sp)
 1009eb0:	ddc01217 	ldw	r23,72(sp)
 1009eb4:	dec01504 	addi	sp,sp,84
 1009eb8:	f800283a 	ret
 1009ebc:	180b883a 	mov	r5,r3
 1009ec0:	003fe706 	br	1009e60 <_ZNSs7reserveEm+0x70>
 1009ec4:	20800217 	ldw	r2,8(r4)
 1009ec8:	00bfe216 	blt	zero,r2,1009e54 <_ZNSs7reserveEm+0x64>
 1009ecc:	d9000104 	addi	r4,sp,4
 1009ed0:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 1009ed4:	dfc01417 	ldw	ra,80(sp)
 1009ed8:	df001317 	ldw	fp,76(sp)
 1009edc:	ddc01217 	ldw	r23,72(sp)
 1009ee0:	dec01504 	addi	sp,sp,84
 1009ee4:	f800283a 	ret
 1009ee8:	11000204 	addi	r4,r2,8
 1009eec:	017fffc4 	movi	r5,-1
 1009ef0:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1009ef4:	00bfe716 	blt	zero,r2,1009e94 <_ZNSs7reserveEm+0xa4>
 1009ef8:	d9000e17 	ldw	r4,56(sp)
 1009efc:	d80b883a 	mov	r5,sp
 1009f00:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1009f04:	003fe306 	br	1009e94 <_ZNSs7reserveEm+0xa4>
 1009f08:	d9000317 	ldw	r4,12(sp)
 1009f0c:	00bfffc4 	movi	r2,-1
 1009f10:	d8800215 	stw	r2,8(sp)
 1009f14:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>

01009f18 <_ZNSs9push_backEc>:
 1009f18:	21800017 	ldw	r6,0(r4)
 1009f1c:	defffc04 	addi	sp,sp,-16
 1009f20:	dc000015 	stw	r16,0(sp)
 1009f24:	30bffd17 	ldw	r2,-12(r6)
 1009f28:	31fffd04 	addi	r7,r6,-12
 1009f2c:	38c00117 	ldw	r3,4(r7)
 1009f30:	14000044 	addi	r16,r2,1
 1009f34:	dc800215 	stw	r18,8(sp)
 1009f38:	dc400115 	stw	r17,4(sp)
 1009f3c:	2825883a 	mov	r18,r5
 1009f40:	dfc00315 	stw	ra,12(sp)
 1009f44:	2023883a 	mov	r17,r4
 1009f48:	800b883a 	mov	r5,r16
 1009f4c:	1c001136 	bltu	r3,r16,1009f94 <_ZNSs9push_backEc+0x7c>
 1009f50:	38800217 	ldw	r2,8(r7)
 1009f54:	00800f16 	blt	zero,r2,1009f94 <_ZNSs9push_backEc+0x7c>
 1009f58:	30bffd17 	ldw	r2,-12(r6)
 1009f5c:	3085883a 	add	r2,r6,r2
 1009f60:	14800005 	stb	r18,0(r2)
 1009f64:	88c00017 	ldw	r3,0(r17)
 1009f68:	18bffd04 	addi	r2,r3,-12
 1009f6c:	1c3ffd15 	stw	r16,-12(r3)
 1009f70:	1409883a 	add	r4,r2,r16
 1009f74:	10000215 	stw	zero,8(r2)
 1009f78:	20000305 	stb	zero,12(r4)
 1009f7c:	dfc00317 	ldw	ra,12(sp)
 1009f80:	dc800217 	ldw	r18,8(sp)
 1009f84:	dc400117 	ldw	r17,4(sp)
 1009f88:	dc000017 	ldw	r16,0(sp)
 1009f8c:	dec00404 	addi	sp,sp,16
 1009f90:	f800283a 	ret
 1009f94:	1009df00 	call	1009df0 <_ZNSs7reserveEm>
 1009f98:	89800017 	ldw	r6,0(r17)
 1009f9c:	003fee06 	br	1009f58 <_ZNSs9push_backEc+0x40>

01009fa0 <_ZNSs6appendEmc>:
 1009fa0:	defffb04 	addi	sp,sp,-20
 1009fa4:	dcc00315 	stw	r19,12(sp)
 1009fa8:	dc800215 	stw	r18,8(sp)
 1009fac:	dc000015 	stw	r16,0(sp)
 1009fb0:	dfc00415 	stw	ra,16(sp)
 1009fb4:	dc400115 	stw	r17,4(sp)
 1009fb8:	2821883a 	mov	r16,r5
 1009fbc:	3027883a 	mov	r19,r6
 1009fc0:	2025883a 	mov	r18,r4
 1009fc4:	28001d26 	beq	r5,zero,100a03c <_ZNSs6appendEmc+0x9c>
 1009fc8:	20c00017 	ldw	r3,0(r4)
 1009fcc:	00900034 	movhi	r2,16384
 1009fd0:	10bfff04 	addi	r2,r2,-4
 1009fd4:	197ffd17 	ldw	r5,-12(r3)
 1009fd8:	19bffd04 	addi	r6,r3,-12
 1009fdc:	1145c83a 	sub	r2,r2,r5
 1009fe0:	14002436 	bltu	r2,r16,100a074 <_ZNSs6appendEmc+0xd4>
 1009fe4:	30800117 	ldw	r2,4(r6)
 1009fe8:	8163883a 	add	r17,r16,r5
 1009fec:	14400236 	bltu	r2,r17,1009ff8 <_ZNSs6appendEmc+0x58>
 1009ff0:	30800217 	ldw	r2,8(r6)
 1009ff4:	0080030e 	bge	zero,r2,100a004 <_ZNSs6appendEmc+0x64>
 1009ff8:	880b883a 	mov	r5,r17
 1009ffc:	1009df00 	call	1009df0 <_ZNSs7reserveEm>
 100a000:	90c00017 	ldw	r3,0(r18)
 100a004:	18bffd17 	ldw	r2,-12(r3)
 100a008:	99803fcc 	andi	r6,r19,255
 100a00c:	3180201c 	xori	r6,r6,128
 100a010:	1889883a 	add	r4,r3,r2
 100a014:	00800044 	movi	r2,1
 100a018:	31bfe004 	addi	r6,r6,-128
 100a01c:	80800f1e 	bne	r16,r2,100a05c <_ZNSs6appendEmc+0xbc>
 100a020:	21800005 	stb	r6,0(r4)
 100a024:	90800017 	ldw	r2,0(r18)
 100a028:	10fffd04 	addi	r3,r2,-12
 100a02c:	147ffd15 	stw	r17,-12(r2)
 100a030:	1c49883a 	add	r4,r3,r17
 100a034:	18000215 	stw	zero,8(r3)
 100a038:	20000305 	stb	zero,12(r4)
 100a03c:	9005883a 	mov	r2,r18
 100a040:	dfc00417 	ldw	ra,16(sp)
 100a044:	dcc00317 	ldw	r19,12(sp)
 100a048:	dc800217 	ldw	r18,8(sp)
 100a04c:	dc400117 	ldw	r17,4(sp)
 100a050:	dc000017 	ldw	r16,0(sp)
 100a054:	dec00504 	addi	sp,sp,20
 100a058:	f800283a 	ret
 100a05c:	31403fcc 	andi	r5,r6,255
 100a060:	2940201c 	xori	r5,r5,128
 100a064:	297fe004 	addi	r5,r5,-128
 100a068:	800d883a 	mov	r6,r16
 100a06c:	100eecc0 	call	100eecc <memset>
 100a070:	003fec06 	br	100a024 <_ZNSs6appendEmc+0x84>
 100a074:	010040b4 	movhi	r4,258
 100a078:	21193c04 	addi	r4,r4,25840
 100a07c:	10068e40 	call	10068e4 <_ZSt20__throw_length_errorPKc>

0100a080 <_ZNSs6appendEPKcm>:
 100a080:	defffa04 	addi	sp,sp,-24
 100a084:	dd000415 	stw	r20,16(sp)
 100a088:	dcc00315 	stw	r19,12(sp)
 100a08c:	dc400115 	stw	r17,4(sp)
 100a090:	dfc00515 	stw	ra,20(sp)
 100a094:	dc800215 	stw	r18,8(sp)
 100a098:	dc000015 	stw	r16,0(sp)
 100a09c:	3023883a 	mov	r17,r6
 100a0a0:	2829883a 	mov	r20,r5
 100a0a4:	2027883a 	mov	r19,r4
 100a0a8:	30001c26 	beq	r6,zero,100a11c <_ZNSs6appendEPKcm+0x9c>
 100a0ac:	24000017 	ldw	r16,0(r4)
 100a0b0:	00900034 	movhi	r2,16384
 100a0b4:	10bfff04 	addi	r2,r2,-4
 100a0b8:	80fffd17 	ldw	r3,-12(r16)
 100a0bc:	817ffd04 	addi	r5,r16,-12
 100a0c0:	10c5c83a 	sub	r2,r2,r3
 100a0c4:	11802e36 	bltu	r2,r6,100a180 <_ZNSs6appendEPKcm+0x100>
 100a0c8:	28800117 	ldw	r2,4(r5)
 100a0cc:	30e5883a 	add	r18,r6,r3
 100a0d0:	14801b2e 	bgeu	r2,r18,100a140 <_ZNSs6appendEPKcm+0xc0>
 100a0d4:	a4000236 	bltu	r20,r16,100a0e0 <_ZNSs6appendEPKcm+0x60>
 100a0d8:	80c5883a 	add	r2,r16,r3
 100a0dc:	1500222e 	bgeu	r2,r20,100a168 <_ZNSs6appendEPKcm+0xe8>
 100a0e0:	900b883a 	mov	r5,r18
 100a0e4:	1009df00 	call	1009df0 <_ZNSs7reserveEm>
 100a0e8:	9c000017 	ldw	r16,0(r19)
 100a0ec:	80bffd17 	ldw	r2,-12(r16)
 100a0f0:	00c00044 	movi	r3,1
 100a0f4:	8089883a 	add	r4,r16,r2
 100a0f8:	88c0171e 	bne	r17,r3,100a158 <_ZNSs6appendEPKcm+0xd8>
 100a0fc:	a0800003 	ldbu	r2,0(r20)
 100a100:	20800005 	stb	r2,0(r4)
 100a104:	98800017 	ldw	r2,0(r19)
 100a108:	10fffd04 	addi	r3,r2,-12
 100a10c:	14bffd15 	stw	r18,-12(r2)
 100a110:	1c89883a 	add	r4,r3,r18
 100a114:	18000215 	stw	zero,8(r3)
 100a118:	20000305 	stb	zero,12(r4)
 100a11c:	9805883a 	mov	r2,r19
 100a120:	dfc00517 	ldw	ra,20(sp)
 100a124:	dd000417 	ldw	r20,16(sp)
 100a128:	dcc00317 	ldw	r19,12(sp)
 100a12c:	dc800217 	ldw	r18,8(sp)
 100a130:	dc400117 	ldw	r17,4(sp)
 100a134:	dc000017 	ldw	r16,0(sp)
 100a138:	dec00604 	addi	sp,sp,24
 100a13c:	f800283a 	ret
 100a140:	28800217 	ldw	r2,8(r5)
 100a144:	00bfe316 	blt	zero,r2,100a0d4 <_ZNSs6appendEPKcm+0x54>
 100a148:	80bffd17 	ldw	r2,-12(r16)
 100a14c:	00c00044 	movi	r3,1
 100a150:	8089883a 	add	r4,r16,r2
 100a154:	88ffe926 	beq	r17,r3,100a0fc <_ZNSs6appendEPKcm+0x7c>
 100a158:	a00b883a 	mov	r5,r20
 100a15c:	880d883a 	mov	r6,r17
 100a160:	100ed4c0 	call	100ed4c <memcpy>
 100a164:	003fe706 	br	100a104 <_ZNSs6appendEPKcm+0x84>
 100a168:	900b883a 	mov	r5,r18
 100a16c:	1009df00 	call	1009df0 <_ZNSs7reserveEm>
 100a170:	a405c83a 	sub	r2,r20,r16
 100a174:	9c000017 	ldw	r16,0(r19)
 100a178:	1429883a 	add	r20,r2,r16
 100a17c:	003fdb06 	br	100a0ec <_ZNSs6appendEPKcm+0x6c>
 100a180:	010040b4 	movhi	r4,258
 100a184:	21193c04 	addi	r4,r4,25840
 100a188:	10068e40 	call	10068e4 <_ZSt20__throw_length_errorPKc>

0100a18c <_ZNSs6appendEPKc>:
 100a18c:	defffd04 	addi	sp,sp,-12
 100a190:	dcc00115 	stw	r19,4(sp)
 100a194:	dc400015 	stw	r17,0(sp)
 100a198:	dfc00215 	stw	ra,8(sp)
 100a19c:	2023883a 	mov	r17,r4
 100a1a0:	2809883a 	mov	r4,r5
 100a1a4:	2827883a 	mov	r19,r5
 100a1a8:	100f5c00 	call	100f5c0 <strlen>
 100a1ac:	980b883a 	mov	r5,r19
 100a1b0:	8809883a 	mov	r4,r17
 100a1b4:	100d883a 	mov	r6,r2
 100a1b8:	dfc00217 	ldw	ra,8(sp)
 100a1bc:	dcc00117 	ldw	r19,4(sp)
 100a1c0:	dc400017 	ldw	r17,0(sp)
 100a1c4:	dec00304 	addi	sp,sp,12
 100a1c8:	100a0801 	jmpi	100a080 <_ZNSs6appendEPKcm>

0100a1cc <_ZNSspLEPKc>:
 100a1cc:	defffd04 	addi	sp,sp,-12
 100a1d0:	dcc00115 	stw	r19,4(sp)
 100a1d4:	dc400015 	stw	r17,0(sp)
 100a1d8:	dfc00215 	stw	ra,8(sp)
 100a1dc:	2023883a 	mov	r17,r4
 100a1e0:	2809883a 	mov	r4,r5
 100a1e4:	2827883a 	mov	r19,r5
 100a1e8:	100f5c00 	call	100f5c0 <strlen>
 100a1ec:	980b883a 	mov	r5,r19
 100a1f0:	8809883a 	mov	r4,r17
 100a1f4:	100d883a 	mov	r6,r2
 100a1f8:	dfc00217 	ldw	ra,8(sp)
 100a1fc:	dcc00117 	ldw	r19,4(sp)
 100a200:	dc400017 	ldw	r17,0(sp)
 100a204:	dec00304 	addi	sp,sp,12
 100a208:	100a0801 	jmpi	100a080 <_ZNSs6appendEPKcm>

0100a20c <_ZNSs6appendERKSsmm>:
 100a20c:	defffa04 	addi	sp,sp,-24
 100a210:	dcc00415 	stw	r19,16(sp)
 100a214:	2827883a 	mov	r19,r5
 100a218:	29400017 	ldw	r5,0(r5)
 100a21c:	dc800315 	stw	r18,12(sp)
 100a220:	dc000115 	stw	r16,4(sp)
 100a224:	28bffd17 	ldw	r2,-12(r5)
 100a228:	dfc00515 	stw	ra,20(sp)
 100a22c:	dc400215 	stw	r17,8(sp)
 100a230:	3021883a 	mov	r16,r6
 100a234:	2025883a 	mov	r18,r4
 100a238:	11802b36 	bltu	r2,r6,100a2e8 <_ZNSs6appendERKSsmm+0xdc>
 100a23c:	118dc83a 	sub	r6,r2,r6
 100a240:	31c02436 	bltu	r6,r7,100a2d4 <_ZNSs6appendERKSsmm+0xc8>
 100a244:	38001b26 	beq	r7,zero,100a2b4 <_ZNSs6appendERKSsmm+0xa8>
 100a248:	91800017 	ldw	r6,0(r18)
 100a24c:	323ffd04 	addi	r8,r6,-12
 100a250:	30bffd17 	ldw	r2,-12(r6)
 100a254:	40c00117 	ldw	r3,4(r8)
 100a258:	38a3883a 	add	r17,r7,r2
 100a25c:	1c400236 	bltu	r3,r17,100a268 <_ZNSs6appendERKSsmm+0x5c>
 100a260:	40800217 	ldw	r2,8(r8)
 100a264:	0080060e 	bge	zero,r2,100a280 <_ZNSs6appendERKSsmm+0x74>
 100a268:	880b883a 	mov	r5,r17
 100a26c:	d9c00015 	stw	r7,0(sp)
 100a270:	1009df00 	call	1009df0 <_ZNSs7reserveEm>
 100a274:	99400017 	ldw	r5,0(r19)
 100a278:	91800017 	ldw	r6,0(r18)
 100a27c:	d9c00017 	ldw	r7,0(sp)
 100a280:	30fffd17 	ldw	r3,-12(r6)
 100a284:	00800044 	movi	r2,1
 100a288:	814b883a 	add	r5,r16,r5
 100a28c:	30c9883a 	add	r4,r6,r3
 100a290:	3880121e 	bne	r7,r2,100a2dc <_ZNSs6appendERKSsmm+0xd0>
 100a294:	28800003 	ldbu	r2,0(r5)
 100a298:	20800005 	stb	r2,0(r4)
 100a29c:	90800017 	ldw	r2,0(r18)
 100a2a0:	10fffd04 	addi	r3,r2,-12
 100a2a4:	147ffd15 	stw	r17,-12(r2)
 100a2a8:	1c49883a 	add	r4,r3,r17
 100a2ac:	18000215 	stw	zero,8(r3)
 100a2b0:	20000305 	stb	zero,12(r4)
 100a2b4:	9005883a 	mov	r2,r18
 100a2b8:	dfc00517 	ldw	ra,20(sp)
 100a2bc:	dcc00417 	ldw	r19,16(sp)
 100a2c0:	dc800317 	ldw	r18,12(sp)
 100a2c4:	dc400217 	ldw	r17,8(sp)
 100a2c8:	dc000117 	ldw	r16,4(sp)
 100a2cc:	dec00604 	addi	sp,sp,24
 100a2d0:	f800283a 	ret
 100a2d4:	300f883a 	mov	r7,r6
 100a2d8:	003fda06 	br	100a244 <_ZNSs6appendERKSsmm+0x38>
 100a2dc:	380d883a 	mov	r6,r7
 100a2e0:	100ed4c0 	call	100ed4c <memcpy>
 100a2e4:	003fed06 	br	100a29c <_ZNSs6appendERKSsmm+0x90>
 100a2e8:	010040b4 	movhi	r4,258
 100a2ec:	21193c04 	addi	r4,r4,25840
 100a2f0:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

0100a2f4 <_ZNSs6appendERKSs>:
 100a2f4:	2a000017 	ldw	r8,0(r5)
 100a2f8:	defffb04 	addi	sp,sp,-20
 100a2fc:	dc000015 	stw	r16,0(sp)
 100a300:	443ffd17 	ldw	r16,-12(r8)
 100a304:	dcc00315 	stw	r19,12(sp)
 100a308:	dc800215 	stw	r18,8(sp)
 100a30c:	dfc00415 	stw	ra,16(sp)
 100a310:	dc400115 	stw	r17,4(sp)
 100a314:	2827883a 	mov	r19,r5
 100a318:	2025883a 	mov	r18,r4
 100a31c:	80001a26 	beq	r16,zero,100a388 <_ZNSs6appendERKSs+0x94>
 100a320:	21c00017 	ldw	r7,0(r4)
 100a324:	39bffd04 	addi	r6,r7,-12
 100a328:	38bffd17 	ldw	r2,-12(r7)
 100a32c:	30c00117 	ldw	r3,4(r6)
 100a330:	80a3883a 	add	r17,r16,r2
 100a334:	880b883a 	mov	r5,r17
 100a338:	1c400236 	bltu	r3,r17,100a344 <_ZNSs6appendERKSs+0x50>
 100a33c:	30800217 	ldw	r2,8(r6)
 100a340:	0080030e 	bge	zero,r2,100a350 <_ZNSs6appendERKSs+0x5c>
 100a344:	1009df00 	call	1009df0 <_ZNSs7reserveEm>
 100a348:	9a000017 	ldw	r8,0(r19)
 100a34c:	91c00017 	ldw	r7,0(r18)
 100a350:	38fffd17 	ldw	r3,-12(r7)
 100a354:	00800044 	movi	r2,1
 100a358:	400b883a 	mov	r5,r8
 100a35c:	800d883a 	mov	r6,r16
 100a360:	38c9883a 	add	r4,r7,r3
 100a364:	8080101e 	bne	r16,r2,100a3a8 <_ZNSs6appendERKSs+0xb4>
 100a368:	40800003 	ldbu	r2,0(r8)
 100a36c:	20800005 	stb	r2,0(r4)
 100a370:	90800017 	ldw	r2,0(r18)
 100a374:	10fffd04 	addi	r3,r2,-12
 100a378:	147ffd15 	stw	r17,-12(r2)
 100a37c:	1c49883a 	add	r4,r3,r17
 100a380:	18000215 	stw	zero,8(r3)
 100a384:	20000305 	stb	zero,12(r4)
 100a388:	9005883a 	mov	r2,r18
 100a38c:	dfc00417 	ldw	ra,16(sp)
 100a390:	dcc00317 	ldw	r19,12(sp)
 100a394:	dc800217 	ldw	r18,8(sp)
 100a398:	dc400117 	ldw	r17,4(sp)
 100a39c:	dc000017 	ldw	r16,0(sp)
 100a3a0:	dec00504 	addi	sp,sp,20
 100a3a4:	f800283a 	ret
 100a3a8:	100ed4c0 	call	100ed4c <memcpy>
 100a3ac:	003ff006 	br	100a370 <_ZNSs6appendERKSs+0x7c>

0100a3b0 <_ZNSspLERKSs>:
 100a3b0:	100a2f41 	jmpi	100a2f4 <_ZNSs6appendERKSs>

0100a3b4 <_ZNSspLEc>:
 100a3b4:	21800017 	ldw	r6,0(r4)
 100a3b8:	defffc04 	addi	sp,sp,-16
 100a3bc:	dc000015 	stw	r16,0(sp)
 100a3c0:	30bffd17 	ldw	r2,-12(r6)
 100a3c4:	31fffd04 	addi	r7,r6,-12
 100a3c8:	38c00117 	ldw	r3,4(r7)
 100a3cc:	14000044 	addi	r16,r2,1
 100a3d0:	dc800215 	stw	r18,8(sp)
 100a3d4:	dc400115 	stw	r17,4(sp)
 100a3d8:	2825883a 	mov	r18,r5
 100a3dc:	dfc00315 	stw	ra,12(sp)
 100a3e0:	2023883a 	mov	r17,r4
 100a3e4:	800b883a 	mov	r5,r16
 100a3e8:	1c001236 	bltu	r3,r16,100a434 <_ZNSspLEc+0x80>
 100a3ec:	38800217 	ldw	r2,8(r7)
 100a3f0:	00801016 	blt	zero,r2,100a434 <_ZNSspLEc+0x80>
 100a3f4:	30fffd17 	ldw	r3,-12(r6)
 100a3f8:	8805883a 	mov	r2,r17
 100a3fc:	30c7883a 	add	r3,r6,r3
 100a400:	1c800005 	stb	r18,0(r3)
 100a404:	89000017 	ldw	r4,0(r17)
 100a408:	20fffd04 	addi	r3,r4,-12
 100a40c:	243ffd15 	stw	r16,-12(r4)
 100a410:	1c0b883a 	add	r5,r3,r16
 100a414:	18000215 	stw	zero,8(r3)
 100a418:	28000305 	stb	zero,12(r5)
 100a41c:	dfc00317 	ldw	ra,12(sp)
 100a420:	dc800217 	ldw	r18,8(sp)
 100a424:	dc400117 	ldw	r17,4(sp)
 100a428:	dc000017 	ldw	r16,0(sp)
 100a42c:	dec00404 	addi	sp,sp,16
 100a430:	f800283a 	ret
 100a434:	1009df00 	call	1009df0 <_ZNSs7reserveEm>
 100a438:	89800017 	ldw	r6,0(r17)
 100a43c:	003fed06 	br	100a3f4 <_ZNSspLEc+0x40>

0100a440 <_ZNSsD1Ev>:
 100a440:	deffed04 	addi	sp,sp,-76
 100a444:	00804074 	movhi	r2,257
 100a448:	10b41004 	addi	r2,r2,-12224
 100a44c:	00c040b4 	movhi	r3,258
 100a450:	18d69ac4 	addi	r3,r3,23147
 100a454:	d8800715 	stw	r2,28(sp)
 100a458:	d9000f15 	stw	r4,60(sp)
 100a45c:	00804074 	movhi	r2,257
 100a460:	10a93b04 	addi	r2,r2,-23316
 100a464:	d9000104 	addi	r4,sp,4
 100a468:	d8c00815 	stw	r3,32(sp)
 100a46c:	d8800a15 	stw	r2,40(sp)
 100a470:	dfc01215 	stw	ra,72(sp)
 100a474:	df001115 	stw	fp,68(sp)
 100a478:	ddc01015 	stw	r23,64(sp)
 100a47c:	dec00915 	stw	sp,36(sp)
 100a480:	dec00b15 	stw	sp,44(sp)
 100a484:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100a488:	d8c00f17 	ldw	r3,60(sp)
 100a48c:	18800017 	ldw	r2,0(r3)
 100a490:	00c040f4 	movhi	r3,259
 100a494:	18dc3204 	addi	r3,r3,28872
 100a498:	10bffd04 	addi	r2,r2,-12
 100a49c:	d8800e15 	stw	r2,56(sp)
 100a4a0:	10c0071e 	bne	r2,r3,100a4c0 <_ZNSsD1Ev+0x80>
 100a4a4:	d9000104 	addi	r4,sp,4
 100a4a8:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100a4ac:	dfc01217 	ldw	ra,72(sp)
 100a4b0:	df001117 	ldw	fp,68(sp)
 100a4b4:	ddc01017 	ldw	r23,64(sp)
 100a4b8:	dec01304 	addi	sp,sp,76
 100a4bc:	f800283a 	ret
 100a4c0:	00800044 	movi	r2,1
 100a4c4:	d8800215 	stw	r2,8(sp)
 100a4c8:	d8800e17 	ldw	r2,56(sp)
 100a4cc:	017fffc4 	movi	r5,-1
 100a4d0:	11000204 	addi	r4,r2,8
 100a4d4:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100a4d8:	00bff216 	blt	zero,r2,100a4a4 <_ZNSsD1Ev+0x64>
 100a4dc:	d9000e17 	ldw	r4,56(sp)
 100a4e0:	d80b883a 	mov	r5,sp
 100a4e4:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100a4e8:	003fee06 	br	100a4a4 <_ZNSsD1Ev+0x64>
 100a4ec:	d9000317 	ldw	r4,12(sp)
 100a4f0:	00bfffc4 	movi	r2,-1
 100a4f4:	d8800215 	stw	r2,8(sp)
 100a4f8:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>

0100a4fc <_ZNSsD2Ev>:
 100a4fc:	deffed04 	addi	sp,sp,-76
 100a500:	00804074 	movhi	r2,257
 100a504:	10b41004 	addi	r2,r2,-12224
 100a508:	00c040b4 	movhi	r3,258
 100a50c:	18d69c44 	addi	r3,r3,23153
 100a510:	d8800715 	stw	r2,28(sp)
 100a514:	d9000f15 	stw	r4,60(sp)
 100a518:	00804074 	movhi	r2,257
 100a51c:	10a96a04 	addi	r2,r2,-23128
 100a520:	d9000104 	addi	r4,sp,4
 100a524:	d8c00815 	stw	r3,32(sp)
 100a528:	d8800a15 	stw	r2,40(sp)
 100a52c:	dfc01215 	stw	ra,72(sp)
 100a530:	df001115 	stw	fp,68(sp)
 100a534:	ddc01015 	stw	r23,64(sp)
 100a538:	dec00915 	stw	sp,36(sp)
 100a53c:	dec00b15 	stw	sp,44(sp)
 100a540:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100a544:	d8c00f17 	ldw	r3,60(sp)
 100a548:	18800017 	ldw	r2,0(r3)
 100a54c:	00c040f4 	movhi	r3,259
 100a550:	18dc3204 	addi	r3,r3,28872
 100a554:	10bffd04 	addi	r2,r2,-12
 100a558:	d8800e15 	stw	r2,56(sp)
 100a55c:	10c0071e 	bne	r2,r3,100a57c <_ZNSsD2Ev+0x80>
 100a560:	d9000104 	addi	r4,sp,4
 100a564:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100a568:	dfc01217 	ldw	ra,72(sp)
 100a56c:	df001117 	ldw	fp,68(sp)
 100a570:	ddc01017 	ldw	r23,64(sp)
 100a574:	dec01304 	addi	sp,sp,76
 100a578:	f800283a 	ret
 100a57c:	00800044 	movi	r2,1
 100a580:	d8800215 	stw	r2,8(sp)
 100a584:	d8800e17 	ldw	r2,56(sp)
 100a588:	017fffc4 	movi	r5,-1
 100a58c:	11000204 	addi	r4,r2,8
 100a590:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100a594:	00bff216 	blt	zero,r2,100a560 <_ZNSsD2Ev+0x64>
 100a598:	d9000e17 	ldw	r4,56(sp)
 100a59c:	d80b883a 	mov	r5,sp
 100a5a0:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100a5a4:	003fee06 	br	100a560 <_ZNSsD2Ev+0x64>
 100a5a8:	d9000317 	ldw	r4,12(sp)
 100a5ac:	00bfffc4 	movi	r2,-1
 100a5b0:	d8800215 	stw	r2,8(sp)
 100a5b4:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>

0100a5b8 <_ZNSs9_M_mutateEmmm>:
 100a5b8:	deffe704 	addi	sp,sp,-100
 100a5bc:	00804074 	movhi	r2,257
 100a5c0:	10b41004 	addi	r2,r2,-12224
 100a5c4:	00c040b4 	movhi	r3,258
 100a5c8:	18d69dc4 	addi	r3,r3,23159
 100a5cc:	d8800715 	stw	r2,28(sp)
 100a5d0:	d9001215 	stw	r4,72(sp)
 100a5d4:	00804074 	movhi	r2,257
 100a5d8:	10a9f804 	addi	r2,r2,-22560
 100a5dc:	d9000104 	addi	r4,sp,4
 100a5e0:	d8c00815 	stw	r3,32(sp)
 100a5e4:	d8800a15 	stw	r2,40(sp)
 100a5e8:	d9801415 	stw	r6,80(sp)
 100a5ec:	d9401315 	stw	r5,76(sp)
 100a5f0:	d9c01515 	stw	r7,84(sp)
 100a5f4:	dfc01815 	stw	ra,96(sp)
 100a5f8:	df001715 	stw	fp,92(sp)
 100a5fc:	ddc01615 	stw	r23,88(sp)
 100a600:	dec00915 	stw	sp,36(sp)
 100a604:	dec00b15 	stw	sp,44(sp)
 100a608:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100a60c:	d8801217 	ldw	r2,72(sp)
 100a610:	d9c01517 	ldw	r7,84(sp)
 100a614:	11800017 	ldw	r6,0(r2)
 100a618:	313ffd04 	addi	r4,r6,-12
 100a61c:	20800017 	ldw	r2,0(r4)
 100a620:	21400117 	ldw	r5,4(r4)
 100a624:	11c7883a 	add	r3,r2,r7
 100a628:	d9c01317 	ldw	r7,76(sp)
 100a62c:	11c5c83a 	sub	r2,r2,r7
 100a630:	d9c01417 	ldw	r7,80(sp)
 100a634:	19c7c83a 	sub	r3,r3,r7
 100a638:	11c5c83a 	sub	r2,r2,r7
 100a63c:	d8c01115 	stw	r3,68(sp)
 100a640:	d8801015 	stw	r2,64(sp)
 100a644:	28c00236 	bltu	r5,r3,100a650 <_ZNSs9_M_mutateEmmm+0x98>
 100a648:	20800217 	ldw	r2,8(r4)
 100a64c:	0080240e 	bge	zero,r2,100a6e0 <_ZNSs9_M_mutateEmmm+0x128>
 100a650:	00800044 	movi	r2,1
 100a654:	d8800215 	stw	r2,8(sp)
 100a658:	d9001117 	ldw	r4,68(sp)
 100a65c:	d80d883a 	mov	r6,sp
 100a660:	10084f80 	call	10084f8 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 100a664:	d8c01317 	ldw	r3,76(sp)
 100a668:	d8800f15 	stw	r2,60(sp)
 100a66c:	18003c1e 	bne	r3,zero,100a760 <_ZNSs9_M_mutateEmmm+0x1a8>
 100a670:	d8c01017 	ldw	r3,64(sp)
 100a674:	1800291e 	bne	r3,zero,100a71c <_ZNSs9_M_mutateEmmm+0x164>
 100a678:	d8c01217 	ldw	r3,72(sp)
 100a67c:	18800017 	ldw	r2,0(r3)
 100a680:	00c040f4 	movhi	r3,259
 100a684:	18dc3204 	addi	r3,r3,28872
 100a688:	10bffd04 	addi	r2,r2,-12
 100a68c:	d8800e15 	stw	r2,56(sp)
 100a690:	10c0481e 	bne	r2,r3,100a7b4 <_ZNSs9_M_mutateEmmm+0x1fc>
 100a694:	d9c00f17 	ldw	r7,60(sp)
 100a698:	d8c01217 	ldw	r3,72(sp)
 100a69c:	38800304 	addi	r2,r7,12
 100a6a0:	18800015 	stw	r2,0(r3)
 100a6a4:	d9401217 	ldw	r5,72(sp)
 100a6a8:	d9c01117 	ldw	r7,68(sp)
 100a6ac:	d9000104 	addi	r4,sp,4
 100a6b0:	28800017 	ldw	r2,0(r5)
 100a6b4:	10bffd04 	addi	r2,r2,-12
 100a6b8:	11c7883a 	add	r3,r2,r7
 100a6bc:	10000215 	stw	zero,8(r2)
 100a6c0:	11c00015 	stw	r7,0(r2)
 100a6c4:	18000305 	stb	zero,12(r3)
 100a6c8:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100a6cc:	dfc01817 	ldw	ra,96(sp)
 100a6d0:	df001717 	ldw	fp,92(sp)
 100a6d4:	ddc01617 	ldw	r23,88(sp)
 100a6d8:	dec01904 	addi	sp,sp,100
 100a6dc:	f800283a 	ret
 100a6e0:	d9001017 	ldw	r4,64(sp)
 100a6e4:	203fef26 	beq	r4,zero,100a6a4 <_ZNSs9_M_mutateEmmm+0xec>
 100a6e8:	d9001517 	ldw	r4,84(sp)
 100a6ec:	d9401417 	ldw	r5,80(sp)
 100a6f0:	217fec26 	beq	r4,r5,100a6a4 <_ZNSs9_M_mutateEmmm+0xec>
 100a6f4:	d9c01317 	ldw	r7,76(sp)
 100a6f8:	00800044 	movi	r2,1
 100a6fc:	31c7883a 	add	r3,r6,r7
 100a700:	194b883a 	add	r5,r3,r5
 100a704:	1909883a 	add	r4,r3,r4
 100a708:	d8c01017 	ldw	r3,64(sp)
 100a70c:	1880261e 	bne	r3,r2,100a7a8 <_ZNSs9_M_mutateEmmm+0x1f0>
 100a710:	28800003 	ldbu	r2,0(r5)
 100a714:	20800005 	stb	r2,0(r4)
 100a718:	003fe206 	br	100a6a4 <_ZNSs9_M_mutateEmmm+0xec>
 100a71c:	d9001217 	ldw	r4,72(sp)
 100a720:	d9400f17 	ldw	r5,60(sp)
 100a724:	d9c01317 	ldw	r7,76(sp)
 100a728:	20800017 	ldw	r2,0(r4)
 100a72c:	28c00304 	addi	r3,r5,12
 100a730:	19c7883a 	add	r3,r3,r7
 100a734:	3885883a 	add	r2,r7,r2
 100a738:	d9401517 	ldw	r5,84(sp)
 100a73c:	d9c01417 	ldw	r7,80(sp)
 100a740:	1949883a 	add	r4,r3,r5
 100a744:	11cb883a 	add	r5,r2,r7
 100a748:	d8801017 	ldw	r2,64(sp)
 100a74c:	00c00044 	movi	r3,1
 100a750:	10c00d26 	beq	r2,r3,100a788 <_ZNSs9_M_mutateEmmm+0x1d0>
 100a754:	d9801017 	ldw	r6,64(sp)
 100a758:	100ed4c0 	call	100ed4c <memcpy>
 100a75c:	003fc606 	br	100a678 <_ZNSs9_M_mutateEmmm+0xc0>
 100a760:	d9c01217 	ldw	r7,72(sp)
 100a764:	11000304 	addi	r4,r2,12
 100a768:	00800044 	movi	r2,1
 100a76c:	39400017 	ldw	r5,0(r7)
 100a770:	18800826 	beq	r3,r2,100a794 <_ZNSs9_M_mutateEmmm+0x1dc>
 100a774:	d9801317 	ldw	r6,76(sp)
 100a778:	100ed4c0 	call	100ed4c <memcpy>
 100a77c:	d8c01017 	ldw	r3,64(sp)
 100a780:	183fbd26 	beq	r3,zero,100a678 <_ZNSs9_M_mutateEmmm+0xc0>
 100a784:	003fe506 	br	100a71c <_ZNSs9_M_mutateEmmm+0x164>
 100a788:	28800003 	ldbu	r2,0(r5)
 100a78c:	20800005 	stb	r2,0(r4)
 100a790:	003fb906 	br	100a678 <_ZNSs9_M_mutateEmmm+0xc0>
 100a794:	28800003 	ldbu	r2,0(r5)
 100a798:	20800005 	stb	r2,0(r4)
 100a79c:	d8c01017 	ldw	r3,64(sp)
 100a7a0:	183fb526 	beq	r3,zero,100a678 <_ZNSs9_M_mutateEmmm+0xc0>
 100a7a4:	003fdd06 	br	100a71c <_ZNSs9_M_mutateEmmm+0x164>
 100a7a8:	d9801017 	ldw	r6,64(sp)
 100a7ac:	100edec0 	call	100edec <memmove>
 100a7b0:	003fbc06 	br	100a6a4 <_ZNSs9_M_mutateEmmm+0xec>
 100a7b4:	d9400e17 	ldw	r5,56(sp)
 100a7b8:	00800044 	movi	r2,1
 100a7bc:	d8800215 	stw	r2,8(sp)
 100a7c0:	29000204 	addi	r4,r5,8
 100a7c4:	017fffc4 	movi	r5,-1
 100a7c8:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100a7cc:	00bfb116 	blt	zero,r2,100a694 <_ZNSs9_M_mutateEmmm+0xdc>
 100a7d0:	d9000e17 	ldw	r4,56(sp)
 100a7d4:	d80b883a 	mov	r5,sp
 100a7d8:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100a7dc:	003fad06 	br	100a694 <_ZNSs9_M_mutateEmmm+0xdc>
 100a7e0:	d9000317 	ldw	r4,12(sp)
 100a7e4:	00bfffc4 	movi	r2,-1
 100a7e8:	d8800215 	stw	r2,8(sp)
 100a7ec:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>

0100a7f0 <_ZNSs15_M_replace_safeEmmPKcm>:
 100a7f0:	defffb04 	addi	sp,sp,-20
 100a7f4:	dc000015 	stw	r16,0(sp)
 100a7f8:	dc000517 	ldw	r16,20(sp)
 100a7fc:	dcc00315 	stw	r19,12(sp)
 100a800:	3827883a 	mov	r19,r7
 100a804:	800f883a 	mov	r7,r16
 100a808:	dc800215 	stw	r18,8(sp)
 100a80c:	dc400115 	stw	r17,4(sp)
 100a810:	dfc00415 	stw	ra,16(sp)
 100a814:	2025883a 	mov	r18,r4
 100a818:	2823883a 	mov	r17,r5
 100a81c:	100a5b80 	call	100a5b8 <_ZNSs9_M_mutateEmmm>
 100a820:	80000826 	beq	r16,zero,100a844 <_ZNSs15_M_replace_safeEmmPKcm+0x54>
 100a824:	90800017 	ldw	r2,0(r18)
 100a828:	980b883a 	mov	r5,r19
 100a82c:	800d883a 	mov	r6,r16
 100a830:	8887883a 	add	r3,r17,r2
 100a834:	00800044 	movi	r2,1
 100a838:	1809883a 	mov	r4,r3
 100a83c:	80800926 	beq	r16,r2,100a864 <_ZNSs15_M_replace_safeEmmPKcm+0x74>
 100a840:	100ed4c0 	call	100ed4c <memcpy>
 100a844:	9005883a 	mov	r2,r18
 100a848:	dfc00417 	ldw	ra,16(sp)
 100a84c:	dcc00317 	ldw	r19,12(sp)
 100a850:	dc800217 	ldw	r18,8(sp)
 100a854:	dc400117 	ldw	r17,4(sp)
 100a858:	dc000017 	ldw	r16,0(sp)
 100a85c:	dec00504 	addi	sp,sp,20
 100a860:	f800283a 	ret
 100a864:	98800003 	ldbu	r2,0(r19)
 100a868:	18800005 	stb	r2,0(r3)
 100a86c:	9005883a 	mov	r2,r18
 100a870:	dfc00417 	ldw	ra,16(sp)
 100a874:	dcc00317 	ldw	r19,12(sp)
 100a878:	dc800217 	ldw	r18,8(sp)
 100a87c:	dc400117 	ldw	r17,4(sp)
 100a880:	dc000017 	ldw	r16,0(sp)
 100a884:	dec00504 	addi	sp,sp,20
 100a888:	f800283a 	ret

0100a88c <_ZNSs6assignEPKcm>:
 100a88c:	defffc04 	addi	sp,sp,-16
 100a890:	00900034 	movhi	r2,16384
 100a894:	10bfff04 	addi	r2,r2,-4
 100a898:	dc400215 	stw	r17,8(sp)
 100a89c:	dc000115 	stw	r16,4(sp)
 100a8a0:	dfc00315 	stw	ra,12(sp)
 100a8a4:	3023883a 	mov	r17,r6
 100a8a8:	2021883a 	mov	r16,r4
 100a8ac:	280f883a 	mov	r7,r5
 100a8b0:	11803136 	bltu	r2,r6,100a978 <_ZNSs6assignEPKcm+0xec>
 100a8b4:	21000017 	ldw	r4,0(r4)
 100a8b8:	29000c2e 	bgeu	r5,r4,100a8ec <_ZNSs6assignEPKcm+0x60>
 100a8bc:	21bffd17 	ldw	r6,-12(r4)
 100a8c0:	000b883a 	mov	r5,zero
 100a8c4:	8009883a 	mov	r4,r16
 100a8c8:	dc400015 	stw	r17,0(sp)
 100a8cc:	100a7f00 	call	100a7f0 <_ZNSs15_M_replace_safeEmmPKcm>
 100a8d0:	1021883a 	mov	r16,r2
 100a8d4:	8005883a 	mov	r2,r16
 100a8d8:	dfc00317 	ldw	ra,12(sp)
 100a8dc:	dc400217 	ldw	r17,8(sp)
 100a8e0:	dc000117 	ldw	r16,4(sp)
 100a8e4:	dec00404 	addi	sp,sp,16
 100a8e8:	f800283a 	ret
 100a8ec:	20bffd17 	ldw	r2,-12(r4)
 100a8f0:	20fffd04 	addi	r3,r4,-12
 100a8f4:	2085883a 	add	r2,r4,r2
 100a8f8:	117ff036 	bltu	r2,r5,100a8bc <_ZNSs6assignEPKcm+0x30>
 100a8fc:	18800217 	ldw	r2,8(r3)
 100a900:	00bfee16 	blt	zero,r2,100a8bc <_ZNSs6assignEPKcm+0x30>
 100a904:	2905c83a 	sub	r2,r5,r4
 100a908:	11800f36 	bltu	r2,r6,100a948 <_ZNSs6assignEPKcm+0xbc>
 100a90c:	00800044 	movi	r2,1
 100a910:	88801526 	beq	r17,r2,100a968 <_ZNSs6assignEPKcm+0xdc>
 100a914:	100ed4c0 	call	100ed4c <memcpy>
 100a918:	81000017 	ldw	r4,0(r16)
 100a91c:	20bffd04 	addi	r2,r4,-12
 100a920:	1447883a 	add	r3,r2,r17
 100a924:	10000215 	stw	zero,8(r2)
 100a928:	247ffd15 	stw	r17,-12(r4)
 100a92c:	8005883a 	mov	r2,r16
 100a930:	18000305 	stb	zero,12(r3)
 100a934:	dfc00317 	ldw	ra,12(sp)
 100a938:	dc400217 	ldw	r17,8(sp)
 100a93c:	dc000117 	ldw	r16,4(sp)
 100a940:	dec00404 	addi	sp,sp,16
 100a944:	f800283a 	ret
 100a948:	103ff426 	beq	r2,zero,100a91c <_ZNSs6assignEPKcm+0x90>
 100a94c:	00800044 	movi	r2,1
 100a950:	88800526 	beq	r17,r2,100a968 <_ZNSs6assignEPKcm+0xdc>
 100a954:	380b883a 	mov	r5,r7
 100a958:	880d883a 	mov	r6,r17
 100a95c:	100edec0 	call	100edec <memmove>
 100a960:	81000017 	ldw	r4,0(r16)
 100a964:	003fed06 	br	100a91c <_ZNSs6assignEPKcm+0x90>
 100a968:	38800003 	ldbu	r2,0(r7)
 100a96c:	20800005 	stb	r2,0(r4)
 100a970:	81000017 	ldw	r4,0(r16)
 100a974:	003fe906 	br	100a91c <_ZNSs6assignEPKcm+0x90>
 100a978:	010040b4 	movhi	r4,258
 100a97c:	21194204 	addi	r4,r4,25864
 100a980:	10068e40 	call	10068e4 <_ZSt20__throw_length_errorPKc>

0100a984 <_ZNSs6assignEPKc>:
 100a984:	defffd04 	addi	sp,sp,-12
 100a988:	dcc00115 	stw	r19,4(sp)
 100a98c:	dc400015 	stw	r17,0(sp)
 100a990:	dfc00215 	stw	ra,8(sp)
 100a994:	2023883a 	mov	r17,r4
 100a998:	2809883a 	mov	r4,r5
 100a99c:	2827883a 	mov	r19,r5
 100a9a0:	100f5c00 	call	100f5c0 <strlen>
 100a9a4:	980b883a 	mov	r5,r19
 100a9a8:	8809883a 	mov	r4,r17
 100a9ac:	100d883a 	mov	r6,r2
 100a9b0:	dfc00217 	ldw	ra,8(sp)
 100a9b4:	dcc00117 	ldw	r19,4(sp)
 100a9b8:	dc400017 	ldw	r17,0(sp)
 100a9bc:	dec00304 	addi	sp,sp,12
 100a9c0:	100a88c1 	jmpi	100a88c <_ZNSs6assignEPKcm>

0100a9c4 <_ZNSs6assignERKSsmm>:
 100a9c4:	29400017 	ldw	r5,0(r5)
 100a9c8:	deffff04 	addi	sp,sp,-4
 100a9cc:	dfc00015 	stw	ra,0(sp)
 100a9d0:	28bffd17 	ldw	r2,-12(r5)
 100a9d4:	11800c36 	bltu	r2,r6,100aa08 <_ZNSs6assignERKSsmm+0x44>
 100a9d8:	1185c83a 	sub	r2,r2,r6
 100a9dc:	298b883a 	add	r5,r5,r6
 100a9e0:	11c00436 	bltu	r2,r7,100a9f4 <_ZNSs6assignERKSsmm+0x30>
 100a9e4:	380d883a 	mov	r6,r7
 100a9e8:	dfc00017 	ldw	ra,0(sp)
 100a9ec:	dec00104 	addi	sp,sp,4
 100a9f0:	100a88c1 	jmpi	100a88c <_ZNSs6assignEPKcm>
 100a9f4:	100f883a 	mov	r7,r2
 100a9f8:	380d883a 	mov	r6,r7
 100a9fc:	dfc00017 	ldw	ra,0(sp)
 100aa00:	dec00104 	addi	sp,sp,4
 100aa04:	100a88c1 	jmpi	100a88c <_ZNSs6assignEPKcm>
 100aa08:	010040b4 	movhi	r4,258
 100aa0c:	21194204 	addi	r4,r4,25864
 100aa10:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

0100aa14 <_ZNSsaSEPKc>:
 100aa14:	defffd04 	addi	sp,sp,-12
 100aa18:	dcc00115 	stw	r19,4(sp)
 100aa1c:	dc400015 	stw	r17,0(sp)
 100aa20:	dfc00215 	stw	ra,8(sp)
 100aa24:	2023883a 	mov	r17,r4
 100aa28:	2809883a 	mov	r4,r5
 100aa2c:	2827883a 	mov	r19,r5
 100aa30:	100f5c00 	call	100f5c0 <strlen>
 100aa34:	980b883a 	mov	r5,r19
 100aa38:	8809883a 	mov	r4,r17
 100aa3c:	100d883a 	mov	r6,r2
 100aa40:	dfc00217 	ldw	ra,8(sp)
 100aa44:	dcc00117 	ldw	r19,4(sp)
 100aa48:	dc400017 	ldw	r17,0(sp)
 100aa4c:	dec00304 	addi	sp,sp,12
 100aa50:	100a88c1 	jmpi	100a88c <_ZNSs6assignEPKcm>

0100aa54 <_ZNSs14_M_replace_auxEmmmc>:
 100aa54:	20800017 	ldw	r2,0(r4)
 100aa58:	defffb04 	addi	sp,sp,-20
 100aa5c:	dcc00315 	stw	r19,12(sp)
 100aa60:	10fffd17 	ldw	r3,-12(r2)
 100aa64:	00900034 	movhi	r2,16384
 100aa68:	10bfff04 	addi	r2,r2,-4
 100aa6c:	dc800215 	stw	r18,8(sp)
 100aa70:	1987c83a 	sub	r3,r3,r6
 100aa74:	10c5c83a 	sub	r2,r2,r3
 100aa78:	dc400115 	stw	r17,4(sp)
 100aa7c:	dc000015 	stw	r16,0(sp)
 100aa80:	dfc00415 	stw	ra,16(sp)
 100aa84:	2023883a 	mov	r17,r4
 100aa88:	3821883a 	mov	r16,r7
 100aa8c:	2827883a 	mov	r19,r5
 100aa90:	dc800503 	ldbu	r18,20(sp)
 100aa94:	11c01f36 	bltu	r2,r7,100ab14 <_ZNSs14_M_replace_auxEmmmc+0xc0>
 100aa98:	100a5b80 	call	100a5b8 <_ZNSs9_M_mutateEmmm>
 100aa9c:	80000c26 	beq	r16,zero,100aad0 <_ZNSs14_M_replace_auxEmmmc+0x7c>
 100aaa0:	88800017 	ldw	r2,0(r17)
 100aaa4:	90c03fcc 	andi	r3,r18,255
 100aaa8:	18c0201c 	xori	r3,r3,128
 100aaac:	9889883a 	add	r4,r19,r2
 100aab0:	00800044 	movi	r2,1
 100aab4:	18ffe004 	addi	r3,r3,-128
 100aab8:	80800d26 	beq	r16,r2,100aaf0 <_ZNSs14_M_replace_auxEmmmc+0x9c>
 100aabc:	19403fcc 	andi	r5,r3,255
 100aac0:	2940201c 	xori	r5,r5,128
 100aac4:	297fe004 	addi	r5,r5,-128
 100aac8:	800d883a 	mov	r6,r16
 100aacc:	100eecc0 	call	100eecc <memset>
 100aad0:	8805883a 	mov	r2,r17
 100aad4:	dfc00417 	ldw	ra,16(sp)
 100aad8:	dcc00317 	ldw	r19,12(sp)
 100aadc:	dc800217 	ldw	r18,8(sp)
 100aae0:	dc400117 	ldw	r17,4(sp)
 100aae4:	dc000017 	ldw	r16,0(sp)
 100aae8:	dec00504 	addi	sp,sp,20
 100aaec:	f800283a 	ret
 100aaf0:	8805883a 	mov	r2,r17
 100aaf4:	20c00005 	stb	r3,0(r4)
 100aaf8:	dfc00417 	ldw	ra,16(sp)
 100aafc:	dcc00317 	ldw	r19,12(sp)
 100ab00:	dc800217 	ldw	r18,8(sp)
 100ab04:	dc400117 	ldw	r17,4(sp)
 100ab08:	dc000017 	ldw	r16,0(sp)
 100ab0c:	dec00504 	addi	sp,sp,20
 100ab10:	f800283a 	ret
 100ab14:	010040b4 	movhi	r4,258
 100ab18:	21194804 	addi	r4,r4,25888
 100ab1c:	10068e40 	call	10068e4 <_ZSt20__throw_length_errorPKc>

0100ab20 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_mc>:
 100ab20:	20800017 	ldw	r2,0(r4)
 100ab24:	d8c00007 	ldb	r3,0(sp)
 100ab28:	314dc83a 	sub	r6,r6,r5
 100ab2c:	288bc83a 	sub	r5,r5,r2
 100ab30:	d8c00015 	stw	r3,0(sp)
 100ab34:	100aa541 	jmpi	100aa54 <_ZNSs14_M_replace_auxEmmmc>

0100ab38 <_ZNSs7replaceEmmmc>:
 100ab38:	20800017 	ldw	r2,0(r4)
 100ab3c:	deffff04 	addi	sp,sp,-4
 100ab40:	dfc00015 	stw	ra,0(sp)
 100ab44:	10fffd17 	ldw	r3,-12(r2)
 100ab48:	d8800103 	ldbu	r2,4(sp)
 100ab4c:	19401136 	bltu	r3,r5,100ab94 <_ZNSs7replaceEmmmc+0x5c>
 100ab50:	1947c83a 	sub	r3,r3,r5
 100ab54:	19800736 	bltu	r3,r6,100ab74 <_ZNSs7replaceEmmmc+0x3c>
 100ab58:	10803fcc 	andi	r2,r2,255
 100ab5c:	1080201c 	xori	r2,r2,128
 100ab60:	10bfe004 	addi	r2,r2,-128
 100ab64:	d8800115 	stw	r2,4(sp)
 100ab68:	dfc00017 	ldw	ra,0(sp)
 100ab6c:	dec00104 	addi	sp,sp,4
 100ab70:	100aa541 	jmpi	100aa54 <_ZNSs14_M_replace_auxEmmmc>
 100ab74:	10803fcc 	andi	r2,r2,255
 100ab78:	1080201c 	xori	r2,r2,128
 100ab7c:	10bfe004 	addi	r2,r2,-128
 100ab80:	180d883a 	mov	r6,r3
 100ab84:	d8800115 	stw	r2,4(sp)
 100ab88:	dfc00017 	ldw	ra,0(sp)
 100ab8c:	dec00104 	addi	sp,sp,4
 100ab90:	100aa541 	jmpi	100aa54 <_ZNSs14_M_replace_auxEmmmc>
 100ab94:	010040b4 	movhi	r4,258
 100ab98:	21195004 	addi	r4,r4,25920
 100ab9c:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

0100aba0 <_ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc>:
 100aba0:	20800017 	ldw	r2,0(r4)
 100aba4:	defffc04 	addi	sp,sp,-16
 100aba8:	30c03fcc 	andi	r3,r6,255
 100abac:	dc000115 	stw	r16,4(sp)
 100abb0:	18c0201c 	xori	r3,r3,128
 100abb4:	28a1c83a 	sub	r16,r5,r2
 100abb8:	dc400215 	stw	r17,8(sp)
 100abbc:	18ffe004 	addi	r3,r3,-128
 100abc0:	2023883a 	mov	r17,r4
 100abc4:	01c00044 	movi	r7,1
 100abc8:	800b883a 	mov	r5,r16
 100abcc:	000d883a 	mov	r6,zero
 100abd0:	d8c00015 	stw	r3,0(sp)
 100abd4:	dfc00315 	stw	ra,12(sp)
 100abd8:	100aa540 	call	100aa54 <_ZNSs14_M_replace_auxEmmmc>
 100abdc:	88800017 	ldw	r2,0(r17)
 100abe0:	00ffffc4 	movi	r3,-1
 100abe4:	10ffff15 	stw	r3,-4(r2)
 100abe8:	1405883a 	add	r2,r2,r16
 100abec:	dfc00317 	ldw	ra,12(sp)
 100abf0:	dc400217 	ldw	r17,8(sp)
 100abf4:	dc000117 	ldw	r16,4(sp)
 100abf8:	dec00404 	addi	sp,sp,16
 100abfc:	f800283a 	ret

0100ac00 <_ZNSs6insertEmmc>:
 100ac00:	20c00017 	ldw	r3,0(r4)
 100ac04:	defffe04 	addi	sp,sp,-8
 100ac08:	dfc00115 	stw	ra,4(sp)
 100ac0c:	18bffd17 	ldw	r2,-12(r3)
 100ac10:	11400a36 	bltu	r2,r5,100ac3c <_ZNSs6insertEmmc+0x3c>
 100ac14:	38803fcc 	andi	r2,r7,255
 100ac18:	1080201c 	xori	r2,r2,128
 100ac1c:	300f883a 	mov	r7,r6
 100ac20:	10bfe004 	addi	r2,r2,-128
 100ac24:	000d883a 	mov	r6,zero
 100ac28:	d8800015 	stw	r2,0(sp)
 100ac2c:	100aa540 	call	100aa54 <_ZNSs14_M_replace_auxEmmmc>
 100ac30:	dfc00117 	ldw	ra,4(sp)
 100ac34:	dec00204 	addi	sp,sp,8
 100ac38:	f800283a 	ret
 100ac3c:	010040b4 	movhi	r4,258
 100ac40:	21195604 	addi	r4,r4,25944
 100ac44:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

0100ac48 <_ZNSs6assignEmc>:
 100ac48:	20800017 	ldw	r2,0(r4)
 100ac4c:	30c03fcc 	andi	r3,r6,255
 100ac50:	18c0201c 	xori	r3,r3,128
 100ac54:	11bffd17 	ldw	r6,-12(r2)
 100ac58:	defffe04 	addi	sp,sp,-8
 100ac5c:	280f883a 	mov	r7,r5
 100ac60:	18ffe004 	addi	r3,r3,-128
 100ac64:	000b883a 	mov	r5,zero
 100ac68:	dfc00115 	stw	ra,4(sp)
 100ac6c:	d8c00015 	stw	r3,0(sp)
 100ac70:	100aa540 	call	100aa54 <_ZNSs14_M_replace_auxEmmmc>
 100ac74:	dfc00117 	ldw	ra,4(sp)
 100ac78:	dec00204 	addi	sp,sp,8
 100ac7c:	f800283a 	ret

0100ac80 <_ZNSsaSEc>:
 100ac80:	20800017 	ldw	r2,0(r4)
 100ac84:	28c03fcc 	andi	r3,r5,255
 100ac88:	18c0201c 	xori	r3,r3,128
 100ac8c:	11bffd17 	ldw	r6,-12(r2)
 100ac90:	defffd04 	addi	sp,sp,-12
 100ac94:	18ffe004 	addi	r3,r3,-128
 100ac98:	01c00044 	movi	r7,1
 100ac9c:	000b883a 	mov	r5,zero
 100aca0:	dc400115 	stw	r17,4(sp)
 100aca4:	dfc00215 	stw	ra,8(sp)
 100aca8:	2023883a 	mov	r17,r4
 100acac:	d8c00015 	stw	r3,0(sp)
 100acb0:	100aa540 	call	100aa54 <_ZNSs14_M_replace_auxEmmmc>
 100acb4:	8805883a 	mov	r2,r17
 100acb8:	dfc00217 	ldw	ra,8(sp)
 100acbc:	dc400117 	ldw	r17,4(sp)
 100acc0:	dec00304 	addi	sp,sp,12
 100acc4:	f800283a 	ret

0100acc8 <_ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEmc>:
 100acc8:	20800017 	ldw	r2,0(r4)
 100accc:	3a003fcc 	andi	r8,r7,255
 100acd0:	4200201c 	xori	r8,r8,128
 100acd4:	defffe04 	addi	sp,sp,-8
 100acd8:	423fe004 	addi	r8,r8,-128
 100acdc:	300f883a 	mov	r7,r6
 100ace0:	288bc83a 	sub	r5,r5,r2
 100ace4:	000d883a 	mov	r6,zero
 100ace8:	dfc00115 	stw	ra,4(sp)
 100acec:	da000015 	stw	r8,0(sp)
 100acf0:	100aa540 	call	100aa54 <_ZNSs14_M_replace_auxEmmmc>
 100acf4:	dfc00117 	ldw	ra,4(sp)
 100acf8:	dec00204 	addi	sp,sp,8
 100acfc:	f800283a 	ret

0100ad00 <_ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_>:
 100ad00:	20800017 	ldw	r2,0(r4)
 100ad04:	defffd04 	addi	sp,sp,-12
 100ad08:	dc400015 	stw	r17,0(sp)
 100ad0c:	28a3c83a 	sub	r17,r5,r2
 100ad10:	dc800115 	stw	r18,4(sp)
 100ad14:	314dc83a 	sub	r6,r6,r5
 100ad18:	2025883a 	mov	r18,r4
 100ad1c:	880b883a 	mov	r5,r17
 100ad20:	000f883a 	mov	r7,zero
 100ad24:	dfc00215 	stw	ra,8(sp)
 100ad28:	100a5b80 	call	100a5b8 <_ZNSs9_M_mutateEmmm>
 100ad2c:	90800017 	ldw	r2,0(r18)
 100ad30:	00ffffc4 	movi	r3,-1
 100ad34:	10ffff15 	stw	r3,-4(r2)
 100ad38:	1445883a 	add	r2,r2,r17
 100ad3c:	dfc00217 	ldw	ra,8(sp)
 100ad40:	dc800117 	ldw	r18,4(sp)
 100ad44:	dc400017 	ldw	r17,0(sp)
 100ad48:	dec00304 	addi	sp,sp,12
 100ad4c:	f800283a 	ret

0100ad50 <_ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE>:
 100ad50:	20800017 	ldw	r2,0(r4)
 100ad54:	defffd04 	addi	sp,sp,-12
 100ad58:	dc000015 	stw	r16,0(sp)
 100ad5c:	28a1c83a 	sub	r16,r5,r2
 100ad60:	dc400115 	stw	r17,4(sp)
 100ad64:	01800044 	movi	r6,1
 100ad68:	2023883a 	mov	r17,r4
 100ad6c:	000f883a 	mov	r7,zero
 100ad70:	800b883a 	mov	r5,r16
 100ad74:	dfc00215 	stw	ra,8(sp)
 100ad78:	100a5b80 	call	100a5b8 <_ZNSs9_M_mutateEmmm>
 100ad7c:	88800017 	ldw	r2,0(r17)
 100ad80:	00ffffc4 	movi	r3,-1
 100ad84:	10ffff15 	stw	r3,-4(r2)
 100ad88:	1405883a 	add	r2,r2,r16
 100ad8c:	dfc00217 	ldw	ra,8(sp)
 100ad90:	dc400117 	ldw	r17,4(sp)
 100ad94:	dc000017 	ldw	r16,0(sp)
 100ad98:	dec00304 	addi	sp,sp,12
 100ad9c:	f800283a 	ret

0100ada0 <_ZNSs5eraseEmm>:
 100ada0:	20800017 	ldw	r2,0(r4)
 100ada4:	defffe04 	addi	sp,sp,-8
 100ada8:	dc000015 	stw	r16,0(sp)
 100adac:	10bffd17 	ldw	r2,-12(r2)
 100adb0:	dfc00115 	stw	ra,4(sp)
 100adb4:	2021883a 	mov	r16,r4
 100adb8:	11401136 	bltu	r2,r5,100ae00 <_ZNSs5eraseEmm+0x60>
 100adbc:	1145c83a 	sub	r2,r2,r5
 100adc0:	11800736 	bltu	r2,r6,100ade0 <_ZNSs5eraseEmm+0x40>
 100adc4:	000f883a 	mov	r7,zero
 100adc8:	100a5b80 	call	100a5b8 <_ZNSs9_M_mutateEmmm>
 100adcc:	8005883a 	mov	r2,r16
 100add0:	dfc00117 	ldw	ra,4(sp)
 100add4:	dc000017 	ldw	r16,0(sp)
 100add8:	dec00204 	addi	sp,sp,8
 100addc:	f800283a 	ret
 100ade0:	100d883a 	mov	r6,r2
 100ade4:	000f883a 	mov	r7,zero
 100ade8:	100a5b80 	call	100a5b8 <_ZNSs9_M_mutateEmmm>
 100adec:	8005883a 	mov	r2,r16
 100adf0:	dfc00117 	ldw	ra,4(sp)
 100adf4:	dc000017 	ldw	r16,0(sp)
 100adf8:	dec00204 	addi	sp,sp,8
 100adfc:	f800283a 	ret
 100ae00:	010040b4 	movhi	r4,258
 100ae04:	21195c04 	addi	r4,r4,25968
 100ae08:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

0100ae0c <_ZNSs6insertEmPKcm>:
 100ae0c:	defff904 	addi	sp,sp,-28
 100ae10:	dc000115 	stw	r16,4(sp)
 100ae14:	24000017 	ldw	r16,0(r4)
 100ae18:	dd000515 	stw	r20,20(sp)
 100ae1c:	dcc00415 	stw	r19,16(sp)
 100ae20:	80fffd17 	ldw	r3,-12(r16)
 100ae24:	dc800315 	stw	r18,12(sp)
 100ae28:	dc400215 	stw	r17,8(sp)
 100ae2c:	dfc00615 	stw	ra,24(sp)
 100ae30:	3023883a 	mov	r17,r6
 100ae34:	2029883a 	mov	r20,r4
 100ae38:	2825883a 	mov	r18,r5
 100ae3c:	3827883a 	mov	r19,r7
 100ae40:	81bffd04 	addi	r6,r16,-12
 100ae44:	19403d36 	bltu	r3,r5,100af3c <_ZNSs6insertEmPKcm+0x130>
 100ae48:	00900034 	movhi	r2,16384
 100ae4c:	10bfff04 	addi	r2,r2,-4
 100ae50:	10c5c83a 	sub	r2,r2,r3
 100ae54:	11c03c36 	bltu	r2,r7,100af48 <_ZNSs6insertEmPKcm+0x13c>
 100ae58:	8c00102e 	bgeu	r17,r16,100ae9c <_ZNSs6insertEmPKcm+0x90>
 100ae5c:	a009883a 	mov	r4,r20
 100ae60:	900b883a 	mov	r5,r18
 100ae64:	880f883a 	mov	r7,r17
 100ae68:	000d883a 	mov	r6,zero
 100ae6c:	dcc00015 	stw	r19,0(sp)
 100ae70:	100a7f00 	call	100a7f0 <_ZNSs15_M_replace_safeEmmPKcm>
 100ae74:	1029883a 	mov	r20,r2
 100ae78:	a005883a 	mov	r2,r20
 100ae7c:	dfc00617 	ldw	ra,24(sp)
 100ae80:	dd000517 	ldw	r20,20(sp)
 100ae84:	dcc00417 	ldw	r19,16(sp)
 100ae88:	dc800317 	ldw	r18,12(sp)
 100ae8c:	dc400217 	ldw	r17,8(sp)
 100ae90:	dc000117 	ldw	r16,4(sp)
 100ae94:	dec00704 	addi	sp,sp,28
 100ae98:	f800283a 	ret
 100ae9c:	80c5883a 	add	r2,r16,r3
 100aea0:	147fee36 	bltu	r2,r17,100ae5c <_ZNSs6insertEmPKcm+0x50>
 100aea4:	30800217 	ldw	r2,8(r6)
 100aea8:	00bfec16 	blt	zero,r2,100ae5c <_ZNSs6insertEmPKcm+0x50>
 100aeac:	000d883a 	mov	r6,zero
 100aeb0:	100a5b80 	call	100a5b8 <_ZNSs9_M_mutateEmmm>
 100aeb4:	a0c00017 	ldw	r3,0(r20)
 100aeb8:	8c05c83a 	sub	r2,r17,r16
 100aebc:	188b883a 	add	r5,r3,r2
 100aec0:	1ca1883a 	add	r16,r3,r18
 100aec4:	2cc7883a 	add	r3,r5,r19
 100aec8:	80c0062e 	bgeu	r16,r3,100aee4 <_ZNSs6insertEmPKcm+0xd8>
 100aecc:	2c000e36 	bltu	r5,r16,100af08 <_ZNSs6insertEmPKcm+0xfc>
 100aed0:	00800044 	movi	r2,1
 100aed4:	98801f1e 	bne	r19,r2,100af54 <_ZNSs6insertEmPKcm+0x148>
 100aed8:	18800003 	ldbu	r2,0(r3)
 100aedc:	80800005 	stb	r2,0(r16)
 100aee0:	003fe506 	br	100ae78 <_ZNSs6insertEmPKcm+0x6c>
 100aee4:	00800044 	movi	r2,1
 100aee8:	9880031e 	bne	r19,r2,100aef8 <_ZNSs6insertEmPKcm+0xec>
 100aeec:	28800003 	ldbu	r2,0(r5)
 100aef0:	80800005 	stb	r2,0(r16)
 100aef4:	003fe006 	br	100ae78 <_ZNSs6insertEmPKcm+0x6c>
 100aef8:	8009883a 	mov	r4,r16
 100aefc:	980d883a 	mov	r6,r19
 100af00:	100ed4c0 	call	100ed4c <memcpy>
 100af04:	003fdc06 	br	100ae78 <_ZNSs6insertEmPKcm+0x6c>
 100af08:	8163c83a 	sub	r17,r16,r5
 100af0c:	00800044 	movi	r2,1
 100af10:	8880171e 	bne	r17,r2,100af70 <_ZNSs6insertEmPKcm+0x164>
 100af14:	28800003 	ldbu	r2,0(r5)
 100af18:	80800005 	stb	r2,0(r16)
 100af1c:	9c4dc83a 	sub	r6,r19,r17
 100af20:	00800044 	movi	r2,1
 100af24:	84cb883a 	add	r5,r16,r19
 100af28:	8449883a 	add	r4,r16,r17
 100af2c:	30800e1e 	bne	r6,r2,100af68 <_ZNSs6insertEmPKcm+0x15c>
 100af30:	28800003 	ldbu	r2,0(r5)
 100af34:	20800005 	stb	r2,0(r4)
 100af38:	003fcf06 	br	100ae78 <_ZNSs6insertEmPKcm+0x6c>
 100af3c:	010040b4 	movhi	r4,258
 100af40:	21195604 	addi	r4,r4,25944
 100af44:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>
 100af48:	010040b4 	movhi	r4,258
 100af4c:	21195604 	addi	r4,r4,25944
 100af50:	10068e40 	call	10068e4 <_ZSt20__throw_length_errorPKc>
 100af54:	8009883a 	mov	r4,r16
 100af58:	180b883a 	mov	r5,r3
 100af5c:	980d883a 	mov	r6,r19
 100af60:	100ed4c0 	call	100ed4c <memcpy>
 100af64:	003fc406 	br	100ae78 <_ZNSs6insertEmPKcm+0x6c>
 100af68:	100ed4c0 	call	100ed4c <memcpy>
 100af6c:	003fc206 	br	100ae78 <_ZNSs6insertEmPKcm+0x6c>
 100af70:	8009883a 	mov	r4,r16
 100af74:	880d883a 	mov	r6,r17
 100af78:	100ed4c0 	call	100ed4c <memcpy>
 100af7c:	003fe706 	br	100af1c <_ZNSs6insertEmPKcm+0x110>

0100af80 <_ZNSs6insertEmPKc>:
 100af80:	defffc04 	addi	sp,sp,-16
 100af84:	dd400215 	stw	r21,8(sp)
 100af88:	dcc00115 	stw	r19,4(sp)
 100af8c:	dc400015 	stw	r17,0(sp)
 100af90:	2027883a 	mov	r19,r4
 100af94:	dfc00315 	stw	ra,12(sp)
 100af98:	3009883a 	mov	r4,r6
 100af9c:	3023883a 	mov	r17,r6
 100afa0:	282b883a 	mov	r21,r5
 100afa4:	100f5c00 	call	100f5c0 <strlen>
 100afa8:	a80b883a 	mov	r5,r21
 100afac:	9809883a 	mov	r4,r19
 100afb0:	880d883a 	mov	r6,r17
 100afb4:	100f883a 	mov	r7,r2
 100afb8:	dfc00317 	ldw	ra,12(sp)
 100afbc:	dd400217 	ldw	r21,8(sp)
 100afc0:	dcc00117 	ldw	r19,4(sp)
 100afc4:	dc400017 	ldw	r17,0(sp)
 100afc8:	dec00404 	addi	sp,sp,16
 100afcc:	100ae0c1 	jmpi	100ae0c <_ZNSs6insertEmPKcm>

0100afd0 <_ZNSs6insertEmRKSsmm>:
 100afd0:	31800017 	ldw	r6,0(r6)
 100afd4:	deffff04 	addi	sp,sp,-4
 100afd8:	3805883a 	mov	r2,r7
 100afdc:	30fffd17 	ldw	r3,-12(r6)
 100afe0:	dfc00015 	stw	ra,0(sp)
 100afe4:	d9c00117 	ldw	r7,4(sp)
 100afe8:	18800a36 	bltu	r3,r2,100b014 <_ZNSs6insertEmRKSsmm+0x44>
 100afec:	1887c83a 	sub	r3,r3,r2
 100aff0:	308d883a 	add	r6,r6,r2
 100aff4:	19c00336 	bltu	r3,r7,100b004 <_ZNSs6insertEmRKSsmm+0x34>
 100aff8:	dfc00017 	ldw	ra,0(sp)
 100affc:	dec00104 	addi	sp,sp,4
 100b000:	100ae0c1 	jmpi	100ae0c <_ZNSs6insertEmPKcm>
 100b004:	180f883a 	mov	r7,r3
 100b008:	dfc00017 	ldw	ra,0(sp)
 100b00c:	dec00104 	addi	sp,sp,4
 100b010:	100ae0c1 	jmpi	100ae0c <_ZNSs6insertEmPKcm>
 100b014:	010040b4 	movhi	r4,258
 100b018:	21195604 	addi	r4,r4,25944
 100b01c:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

0100b020 <_ZNSs6insertEmRKSs>:
 100b020:	31800017 	ldw	r6,0(r6)
 100b024:	31fffd17 	ldw	r7,-12(r6)
 100b028:	100ae0c1 	jmpi	100ae0c <_ZNSs6insertEmPKcm>

0100b02c <_ZNSs5clearEv>:
 100b02c:	20800017 	ldw	r2,0(r4)
 100b030:	000b883a 	mov	r5,zero
 100b034:	000f883a 	mov	r7,zero
 100b038:	11bffd17 	ldw	r6,-12(r2)
 100b03c:	100a5b81 	jmpi	100a5b8 <_ZNSs9_M_mutateEmmm>

0100b040 <_ZNSs12_M_leak_hardEv>:
 100b040:	22000017 	ldw	r8,0(r4)
 100b044:	defffe04 	addi	sp,sp,-8
 100b048:	008040f4 	movhi	r2,259
 100b04c:	109c3204 	addi	r2,r2,28872
 100b050:	40fffd04 	addi	r3,r8,-12
 100b054:	dc000015 	stw	r16,0(sp)
 100b058:	dfc00115 	stw	ra,4(sp)
 100b05c:	2021883a 	mov	r16,r4
 100b060:	18800726 	beq	r3,r2,100b080 <_ZNSs12_M_leak_hardEv+0x40>
 100b064:	18800217 	ldw	r2,8(r3)
 100b068:	000b883a 	mov	r5,zero
 100b06c:	000d883a 	mov	r6,zero
 100b070:	000f883a 	mov	r7,zero
 100b074:	00800616 	blt	zero,r2,100b090 <_ZNSs12_M_leak_hardEv+0x50>
 100b078:	00bfffc4 	movi	r2,-1
 100b07c:	40bfff15 	stw	r2,-4(r8)
 100b080:	dfc00117 	ldw	ra,4(sp)
 100b084:	dc000017 	ldw	r16,0(sp)
 100b088:	dec00204 	addi	sp,sp,8
 100b08c:	f800283a 	ret
 100b090:	100a5b80 	call	100a5b8 <_ZNSs9_M_mutateEmmm>
 100b094:	82000017 	ldw	r8,0(r16)
 100b098:	003ff706 	br	100b078 <_ZNSs12_M_leak_hardEv+0x38>

0100b09c <_ZNSs7_M_leakEv>:
 100b09c:	20800017 	ldw	r2,0(r4)
 100b0a0:	10ffff17 	ldw	r3,-4(r2)
 100b0a4:	1800010e 	bge	r3,zero,100b0ac <_ZNSs7_M_leakEv+0x10>
 100b0a8:	f800283a 	ret
 100b0ac:	100b0401 	jmpi	100b040 <_ZNSs12_M_leak_hardEv>

0100b0b0 <_ZNSs2atEm>:
 100b0b0:	20c00017 	ldw	r3,0(r4)
 100b0b4:	defffd04 	addi	sp,sp,-12
 100b0b8:	dc000015 	stw	r16,0(sp)
 100b0bc:	18bffd17 	ldw	r2,-12(r3)
 100b0c0:	2821883a 	mov	r16,r5
 100b0c4:	dc400115 	stw	r17,4(sp)
 100b0c8:	dfc00215 	stw	ra,8(sp)
 100b0cc:	2023883a 	mov	r17,r4
 100b0d0:	197ffd04 	addi	r5,r3,-12
 100b0d4:	80800a2e 	bgeu	r16,r2,100b100 <_ZNSs2atEm+0x50>
 100b0d8:	28800217 	ldw	r2,8(r5)
 100b0dc:	10000216 	blt	r2,zero,100b0e8 <_ZNSs2atEm+0x38>
 100b0e0:	100b0400 	call	100b040 <_ZNSs12_M_leak_hardEv>
 100b0e4:	88c00017 	ldw	r3,0(r17)
 100b0e8:	80c5883a 	add	r2,r16,r3
 100b0ec:	dfc00217 	ldw	ra,8(sp)
 100b0f0:	dc400117 	ldw	r17,4(sp)
 100b0f4:	dc000017 	ldw	r16,0(sp)
 100b0f8:	dec00304 	addi	sp,sp,12
 100b0fc:	f800283a 	ret
 100b100:	010040b4 	movhi	r4,258
 100b104:	21190e04 	addi	r4,r4,25656
 100b108:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

0100b10c <_ZNSsixEm>:
 100b10c:	20c00017 	ldw	r3,0(r4)
 100b110:	defffd04 	addi	sp,sp,-12
 100b114:	dc400115 	stw	r17,4(sp)
 100b118:	18bfff17 	ldw	r2,-4(r3)
 100b11c:	dc000015 	stw	r16,0(sp)
 100b120:	dfc00215 	stw	ra,8(sp)
 100b124:	2021883a 	mov	r16,r4
 100b128:	2823883a 	mov	r17,r5
 100b12c:	10000216 	blt	r2,zero,100b138 <_ZNSsixEm+0x2c>
 100b130:	100b0400 	call	100b040 <_ZNSs12_M_leak_hardEv>
 100b134:	80c00017 	ldw	r3,0(r16)
 100b138:	88c5883a 	add	r2,r17,r3
 100b13c:	dfc00217 	ldw	ra,8(sp)
 100b140:	dc400117 	ldw	r17,4(sp)
 100b144:	dc000017 	ldw	r16,0(sp)
 100b148:	dec00304 	addi	sp,sp,12
 100b14c:	f800283a 	ret

0100b150 <_ZNSs3endEv>:
 100b150:	20c00017 	ldw	r3,0(r4)
 100b154:	defffe04 	addi	sp,sp,-8
 100b158:	dc000015 	stw	r16,0(sp)
 100b15c:	18bfff17 	ldw	r2,-4(r3)
 100b160:	dfc00115 	stw	ra,4(sp)
 100b164:	2021883a 	mov	r16,r4
 100b168:	10000216 	blt	r2,zero,100b174 <_ZNSs3endEv+0x24>
 100b16c:	100b0400 	call	100b040 <_ZNSs12_M_leak_hardEv>
 100b170:	80c00017 	ldw	r3,0(r16)
 100b174:	18bffd17 	ldw	r2,-12(r3)
 100b178:	1885883a 	add	r2,r3,r2
 100b17c:	dfc00117 	ldw	ra,4(sp)
 100b180:	dc000017 	ldw	r16,0(sp)
 100b184:	dec00204 	addi	sp,sp,8
 100b188:	f800283a 	ret

0100b18c <_ZNSs5beginEv>:
 100b18c:	20c00017 	ldw	r3,0(r4)
 100b190:	defffe04 	addi	sp,sp,-8
 100b194:	dc000015 	stw	r16,0(sp)
 100b198:	18bfff17 	ldw	r2,-4(r3)
 100b19c:	dfc00115 	stw	ra,4(sp)
 100b1a0:	2021883a 	mov	r16,r4
 100b1a4:	10000216 	blt	r2,zero,100b1b0 <_ZNSs5beginEv+0x24>
 100b1a8:	100b0400 	call	100b040 <_ZNSs12_M_leak_hardEv>
 100b1ac:	80c00017 	ldw	r3,0(r16)
 100b1b0:	1805883a 	mov	r2,r3
 100b1b4:	dfc00117 	ldw	ra,4(sp)
 100b1b8:	dc000017 	ldw	r16,0(sp)
 100b1bc:	dec00204 	addi	sp,sp,8
 100b1c0:	f800283a 	ret

0100b1c4 <_ZNSs4rendEv>:
 100b1c4:	28c00017 	ldw	r3,0(r5)
 100b1c8:	defffd04 	addi	sp,sp,-12
 100b1cc:	dc400115 	stw	r17,4(sp)
 100b1d0:	18bfff17 	ldw	r2,-4(r3)
 100b1d4:	dc000015 	stw	r16,0(sp)
 100b1d8:	2023883a 	mov	r17,r4
 100b1dc:	dfc00215 	stw	ra,8(sp)
 100b1e0:	2821883a 	mov	r16,r5
 100b1e4:	2809883a 	mov	r4,r5
 100b1e8:	10000216 	blt	r2,zero,100b1f4 <_ZNSs4rendEv+0x30>
 100b1ec:	100b0400 	call	100b040 <_ZNSs12_M_leak_hardEv>
 100b1f0:	80c00017 	ldw	r3,0(r16)
 100b1f4:	8805883a 	mov	r2,r17
 100b1f8:	88c00015 	stw	r3,0(r17)
 100b1fc:	dfc00217 	ldw	ra,8(sp)
 100b200:	dc400117 	ldw	r17,4(sp)
 100b204:	dc000017 	ldw	r16,0(sp)
 100b208:	dec00304 	addi	sp,sp,12
 100b20c:	f800283a 	ret

0100b210 <_ZNSs6rbeginEv>:
 100b210:	defffd04 	addi	sp,sp,-12
 100b214:	dc000015 	stw	r16,0(sp)
 100b218:	2821883a 	mov	r16,r5
 100b21c:	29400017 	ldw	r5,0(r5)
 100b220:	dc400115 	stw	r17,4(sp)
 100b224:	dfc00215 	stw	ra,8(sp)
 100b228:	28bfff17 	ldw	r2,-4(r5)
 100b22c:	2023883a 	mov	r17,r4
 100b230:	8009883a 	mov	r4,r16
 100b234:	10000216 	blt	r2,zero,100b240 <_ZNSs6rbeginEv+0x30>
 100b238:	100b0400 	call	100b040 <_ZNSs12_M_leak_hardEv>
 100b23c:	81400017 	ldw	r5,0(r16)
 100b240:	28fffd17 	ldw	r3,-12(r5)
 100b244:	8805883a 	mov	r2,r17
 100b248:	28c7883a 	add	r3,r5,r3
 100b24c:	88c00015 	stw	r3,0(r17)
 100b250:	dfc00217 	ldw	ra,8(sp)
 100b254:	dc400117 	ldw	r17,4(sp)
 100b258:	dc000017 	ldw	r16,0(sp)
 100b25c:	dec00304 	addi	sp,sp,12
 100b260:	f800283a 	ret

0100b264 <_ZNSs6resizeEmc>:
 100b264:	20c00017 	ldw	r3,0(r4)
 100b268:	deffff04 	addi	sp,sp,-4
 100b26c:	00900034 	movhi	r2,16384
 100b270:	10bfff04 	addi	r2,r2,-4
 100b274:	3011883a 	mov	r8,r6
 100b278:	dfc00015 	stw	ra,0(sp)
 100b27c:	19bffd17 	ldw	r6,-12(r3)
 100b280:	11401136 	bltu	r2,r5,100b2c8 <_ZNSs6resizeEmc+0x64>
 100b284:	31400936 	bltu	r6,r5,100b2ac <_ZNSs6resizeEmc+0x48>
 100b288:	29800336 	bltu	r5,r6,100b298 <_ZNSs6resizeEmc+0x34>
 100b28c:	dfc00017 	ldw	ra,0(sp)
 100b290:	dec00104 	addi	sp,sp,4
 100b294:	f800283a 	ret
 100b298:	314dc83a 	sub	r6,r6,r5
 100b29c:	000f883a 	mov	r7,zero
 100b2a0:	dfc00017 	ldw	ra,0(sp)
 100b2a4:	dec00104 	addi	sp,sp,4
 100b2a8:	100a5b81 	jmpi	100a5b8 <_ZNSs9_M_mutateEmmm>
 100b2ac:	298bc83a 	sub	r5,r5,r6
 100b2b0:	41803fcc 	andi	r6,r8,255
 100b2b4:	3180201c 	xori	r6,r6,128
 100b2b8:	31bfe004 	addi	r6,r6,-128
 100b2bc:	dfc00017 	ldw	ra,0(sp)
 100b2c0:	dec00104 	addi	sp,sp,4
 100b2c4:	1009fa01 	jmpi	1009fa0 <_ZNSs6appendEmc>
 100b2c8:	010040b4 	movhi	r4,258
 100b2cc:	21196104 	addi	r4,r4,25988
 100b2d0:	10068e40 	call	10068e4 <_ZSt20__throw_length_errorPKc>

0100b2d4 <_ZNSs6resizeEm>:
 100b2d4:	000d883a 	mov	r6,zero
 100b2d8:	100b2641 	jmpi	100b264 <_ZNSs6resizeEmc>

0100b2dc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_>:
 100b2dc:	deffe804 	addi	sp,sp,-96
 100b2e0:	00804074 	movhi	r2,257
 100b2e4:	10b41004 	addi	r2,r2,-12224
 100b2e8:	00c040b4 	movhi	r3,258
 100b2ec:	18d69f44 	addi	r3,r3,23165
 100b2f0:	d8800715 	stw	r2,28(sp)
 100b2f4:	d9001115 	stw	r4,68(sp)
 100b2f8:	00804074 	movhi	r2,257
 100b2fc:	10aced04 	addi	r2,r2,-19532
 100b300:	d9000104 	addi	r4,sp,4
 100b304:	d8c00815 	stw	r3,32(sp)
 100b308:	d9401215 	stw	r5,72(sp)
 100b30c:	dfc01715 	stw	ra,92(sp)
 100b310:	d8800a15 	stw	r2,40(sp)
 100b314:	d9801315 	stw	r6,76(sp)
 100b318:	df001615 	stw	fp,88(sp)
 100b31c:	ddc01515 	stw	r23,84(sp)
 100b320:	dec00915 	stw	sp,36(sp)
 100b324:	dec00b15 	stw	sp,44(sp)
 100b328:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100b32c:	d9001217 	ldw	r4,72(sp)
 100b330:	100f5c00 	call	100f5c0 <strlen>
 100b334:	00c040f4 	movhi	r3,259
 100b338:	18dc3204 	addi	r3,r3,28872
 100b33c:	d8801415 	stw	r2,80(sp)
 100b340:	18800304 	addi	r2,r3,12
 100b344:	d8c01117 	ldw	r3,68(sp)
 100b348:	d9001117 	ldw	r4,68(sp)
 100b34c:	18800015 	stw	r2,0(r3)
 100b350:	d8801317 	ldw	r2,76(sp)
 100b354:	10c00017 	ldw	r3,0(r2)
 100b358:	d8801117 	ldw	r2,68(sp)
 100b35c:	197ffd17 	ldw	r5,-12(r3)
 100b360:	d8c01417 	ldw	r3,80(sp)
 100b364:	d8800f15 	stw	r2,60(sp)
 100b368:	00800084 	movi	r2,2
 100b36c:	d8800215 	stw	r2,8(sp)
 100b370:	194b883a 	add	r5,r3,r5
 100b374:	1009df00 	call	1009df0 <_ZNSs7reserveEm>
 100b378:	d9001117 	ldw	r4,68(sp)
 100b37c:	d9401217 	ldw	r5,72(sp)
 100b380:	d9801417 	ldw	r6,80(sp)
 100b384:	100a0800 	call	100a080 <_ZNSs6appendEPKcm>
 100b388:	d9001117 	ldw	r4,68(sp)
 100b38c:	d9401317 	ldw	r5,76(sp)
 100b390:	100a2f40 	call	100a2f4 <_ZNSs6appendERKSs>
 100b394:	d9000104 	addi	r4,sp,4
 100b398:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100b39c:	d8801117 	ldw	r2,68(sp)
 100b3a0:	dfc01717 	ldw	ra,92(sp)
 100b3a4:	df001617 	ldw	fp,88(sp)
 100b3a8:	ddc01517 	ldw	r23,84(sp)
 100b3ac:	dec01804 	addi	sp,sp,96
 100b3b0:	f800283a 	ret
 100b3b4:	d8c00217 	ldw	r3,8(sp)
 100b3b8:	00800044 	movi	r2,1
 100b3bc:	d9000317 	ldw	r4,12(sp)
 100b3c0:	18800326 	beq	r3,r2,100b3d0 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0xf4>
 100b3c4:	00bfffc4 	movi	r2,-1
 100b3c8:	d8800215 	stw	r2,8(sp)
 100b3cc:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100b3d0:	d8c00f17 	ldw	r3,60(sp)
 100b3d4:	d9001015 	stw	r4,64(sp)
 100b3d8:	18800017 	ldw	r2,0(r3)
 100b3dc:	00c040f4 	movhi	r3,259
 100b3e0:	18dc3204 	addi	r3,r3,28872
 100b3e4:	10bffd04 	addi	r2,r2,-12
 100b3e8:	d8800e15 	stw	r2,56(sp)
 100b3ec:	1880041e 	bne	r3,r2,100b400 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x124>
 100b3f0:	d9001017 	ldw	r4,64(sp)
 100b3f4:	00bfffc4 	movi	r2,-1
 100b3f8:	d8800215 	stw	r2,8(sp)
 100b3fc:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100b400:	00800044 	movi	r2,1
 100b404:	d8800215 	stw	r2,8(sp)
 100b408:	d8800e17 	ldw	r2,56(sp)
 100b40c:	017fffc4 	movi	r5,-1
 100b410:	11000204 	addi	r4,r2,8
 100b414:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100b418:	00bff516 	blt	zero,r2,100b3f0 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x114>
 100b41c:	d9000e17 	ldw	r4,56(sp)
 100b420:	d80b883a 	mov	r5,sp
 100b424:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100b428:	003ff106 	br	100b3f0 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x114>

0100b42c <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>:
 100b42c:	deffe904 	addi	sp,sp,-92
 100b430:	00804074 	movhi	r2,257
 100b434:	10b41004 	addi	r2,r2,-12224
 100b438:	00c040b4 	movhi	r3,258
 100b43c:	18d6a144 	addi	r3,r3,23173
 100b440:	d8800715 	stw	r2,28(sp)
 100b444:	d9001115 	stw	r4,68(sp)
 100b448:	00804074 	movhi	r2,257
 100b44c:	10ad3304 	addi	r2,r2,-19252
 100b450:	d9000104 	addi	r4,sp,4
 100b454:	dfc01615 	stw	ra,88(sp)
 100b458:	d8c00815 	stw	r3,32(sp)
 100b45c:	d8800a15 	stw	r2,40(sp)
 100b460:	d9801315 	stw	r6,76(sp)
 100b464:	d9401215 	stw	r5,72(sp)
 100b468:	df001515 	stw	fp,84(sp)
 100b46c:	ddc01415 	stw	r23,80(sp)
 100b470:	dec00915 	stw	sp,36(sp)
 100b474:	dec00b15 	stw	sp,44(sp)
 100b478:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100b47c:	d9401217 	ldw	r5,72(sp)
 100b480:	d9001117 	ldw	r4,68(sp)
 100b484:	00bfffc4 	movi	r2,-1
 100b488:	d8800215 	stw	r2,8(sp)
 100b48c:	1009a800 	call	1009a80 <_ZNSsC1ERKSs>
 100b490:	00800084 	movi	r2,2
 100b494:	d8800215 	stw	r2,8(sp)
 100b498:	d8801117 	ldw	r2,68(sp)
 100b49c:	d9401317 	ldw	r5,76(sp)
 100b4a0:	d8801015 	stw	r2,64(sp)
 100b4a4:	1009883a 	mov	r4,r2
 100b4a8:	100a2f40 	call	100a2f4 <_ZNSs6appendERKSs>
 100b4ac:	d9000104 	addi	r4,sp,4
 100b4b0:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100b4b4:	d8801117 	ldw	r2,68(sp)
 100b4b8:	dfc01617 	ldw	ra,88(sp)
 100b4bc:	df001517 	ldw	fp,84(sp)
 100b4c0:	ddc01417 	ldw	r23,80(sp)
 100b4c4:	dec01704 	addi	sp,sp,92
 100b4c8:	f800283a 	ret
 100b4cc:	d8c00217 	ldw	r3,8(sp)
 100b4d0:	00800044 	movi	r2,1
 100b4d4:	d9000317 	ldw	r4,12(sp)
 100b4d8:	18800326 	beq	r3,r2,100b4e8 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xbc>
 100b4dc:	00bfffc4 	movi	r2,-1
 100b4e0:	d8800215 	stw	r2,8(sp)
 100b4e4:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100b4e8:	d8801017 	ldw	r2,64(sp)
 100b4ec:	d9000f15 	stw	r4,60(sp)
 100b4f0:	10c00017 	ldw	r3,0(r2)
 100b4f4:	008040f4 	movhi	r2,259
 100b4f8:	109c3204 	addi	r2,r2,28872
 100b4fc:	18fffd04 	addi	r3,r3,-12
 100b500:	d8c00e15 	stw	r3,56(sp)
 100b504:	1880041e 	bne	r3,r2,100b518 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xec>
 100b508:	d9000f17 	ldw	r4,60(sp)
 100b50c:	00bfffc4 	movi	r2,-1
 100b510:	d8800215 	stw	r2,8(sp)
 100b514:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100b518:	00800044 	movi	r2,1
 100b51c:	d8800215 	stw	r2,8(sp)
 100b520:	19000204 	addi	r4,r3,8
 100b524:	017fffc4 	movi	r5,-1
 100b528:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100b52c:	00bff616 	blt	zero,r2,100b508 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xdc>
 100b530:	d9000e17 	ldw	r4,56(sp)
 100b534:	d80b883a 	mov	r5,sp
 100b538:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100b53c:	003ff206 	br	100b508 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xdc>

0100b540 <_ZNSs4swapERSs>:
 100b540:	21c00017 	ldw	r7,0(r4)
 100b544:	38fffd04 	addi	r3,r7,-12
 100b548:	18800217 	ldw	r2,8(r3)
 100b54c:	1000010e 	bge	r2,zero,100b554 <_ZNSs4swapERSs+0x14>
 100b550:	18000215 	stw	zero,8(r3)
 100b554:	29800017 	ldw	r6,0(r5)
 100b558:	30fffd04 	addi	r3,r6,-12
 100b55c:	18800217 	ldw	r2,8(r3)
 100b560:	1000010e 	bge	r2,zero,100b568 <_ZNSs4swapERSs+0x28>
 100b564:	18000215 	stw	zero,8(r3)
 100b568:	21800015 	stw	r6,0(r4)
 100b56c:	29c00015 	stw	r7,0(r5)
 100b570:	f800283a 	ret

0100b574 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_>:
 100b574:	deffe904 	addi	sp,sp,-92
 100b578:	00804074 	movhi	r2,257
 100b57c:	10b41004 	addi	r2,r2,-12224
 100b580:	00c040b4 	movhi	r3,258
 100b584:	18d6a344 	addi	r3,r3,23181
 100b588:	d8800715 	stw	r2,28(sp)
 100b58c:	d9001115 	stw	r4,68(sp)
 100b590:	00804074 	movhi	r2,257
 100b594:	10ad9204 	addi	r2,r2,-18872
 100b598:	d9000104 	addi	r4,sp,4
 100b59c:	d8c00815 	stw	r3,32(sp)
 100b5a0:	d8800a15 	stw	r2,40(sp)
 100b5a4:	d9401205 	stb	r5,72(sp)
 100b5a8:	dfc01615 	stw	ra,88(sp)
 100b5ac:	df001515 	stw	fp,84(sp)
 100b5b0:	ddc01415 	stw	r23,80(sp)
 100b5b4:	dec00915 	stw	sp,36(sp)
 100b5b8:	dec00b15 	stw	sp,44(sp)
 100b5bc:	d9801315 	stw	r6,76(sp)
 100b5c0:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100b5c4:	00c040f4 	movhi	r3,259
 100b5c8:	18dc3204 	addi	r3,r3,28872
 100b5cc:	18800304 	addi	r2,r3,12
 100b5d0:	d8c01117 	ldw	r3,68(sp)
 100b5d4:	18800015 	stw	r2,0(r3)
 100b5d8:	d8801317 	ldw	r2,76(sp)
 100b5dc:	10c00017 	ldw	r3,0(r2)
 100b5e0:	00800084 	movi	r2,2
 100b5e4:	197ffd17 	ldw	r5,-12(r3)
 100b5e8:	d8c01117 	ldw	r3,68(sp)
 100b5ec:	d8800215 	stw	r2,8(sp)
 100b5f0:	29400044 	addi	r5,r5,1
 100b5f4:	d8c00f15 	stw	r3,60(sp)
 100b5f8:	1809883a 	mov	r4,r3
 100b5fc:	1009df00 	call	1009df0 <_ZNSs7reserveEm>
 100b600:	d8801203 	ldbu	r2,72(sp)
 100b604:	d9001117 	ldw	r4,68(sp)
 100b608:	01400044 	movi	r5,1
 100b60c:	11803fcc 	andi	r6,r2,255
 100b610:	3180201c 	xori	r6,r6,128
 100b614:	31bfe004 	addi	r6,r6,-128
 100b618:	1009fa00 	call	1009fa0 <_ZNSs6appendEmc>
 100b61c:	d9001117 	ldw	r4,68(sp)
 100b620:	d9401317 	ldw	r5,76(sp)
 100b624:	100a2f40 	call	100a2f4 <_ZNSs6appendERKSs>
 100b628:	d9000104 	addi	r4,sp,4
 100b62c:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100b630:	d8801117 	ldw	r2,68(sp)
 100b634:	dfc01617 	ldw	ra,88(sp)
 100b638:	df001517 	ldw	fp,84(sp)
 100b63c:	ddc01417 	ldw	r23,80(sp)
 100b640:	dec01704 	addi	sp,sp,92
 100b644:	f800283a 	ret
 100b648:	d8c00217 	ldw	r3,8(sp)
 100b64c:	00800044 	movi	r2,1
 100b650:	d9000317 	ldw	r4,12(sp)
 100b654:	18800326 	beq	r3,r2,100b664 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0xf0>
 100b658:	00bfffc4 	movi	r2,-1
 100b65c:	d8800215 	stw	r2,8(sp)
 100b660:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100b664:	d8c00f17 	ldw	r3,60(sp)
 100b668:	d9001015 	stw	r4,64(sp)
 100b66c:	18800017 	ldw	r2,0(r3)
 100b670:	00c040f4 	movhi	r3,259
 100b674:	18dc3204 	addi	r3,r3,28872
 100b678:	10bffd04 	addi	r2,r2,-12
 100b67c:	d8800e15 	stw	r2,56(sp)
 100b680:	1880041e 	bne	r3,r2,100b694 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x120>
 100b684:	d9001017 	ldw	r4,64(sp)
 100b688:	00bfffc4 	movi	r2,-1
 100b68c:	d8800215 	stw	r2,8(sp)
 100b690:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100b694:	00800044 	movi	r2,1
 100b698:	d8800215 	stw	r2,8(sp)
 100b69c:	d8800e17 	ldw	r2,56(sp)
 100b6a0:	017fffc4 	movi	r5,-1
 100b6a4:	11000204 	addi	r4,r2,8
 100b6a8:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100b6ac:	00bff516 	blt	zero,r2,100b684 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x110>
 100b6b0:	d9000e17 	ldw	r4,56(sp)
 100b6b4:	d80b883a 	mov	r5,sp
 100b6b8:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100b6bc:	003ff106 	br	100b684 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x110>

0100b6c0 <_ZNSs7replaceEmmPKcm>:
 100b6c0:	deffe304 	addi	sp,sp,-116
 100b6c4:	00804074 	movhi	r2,257
 100b6c8:	10ae4904 	addi	r2,r2,-18140
 100b6cc:	d8800c15 	stw	r2,48(sp)
 100b6d0:	d8800104 	addi	r2,sp,4
 100b6d4:	00c040b4 	movhi	r3,258
 100b6d8:	18d6a544 	addi	r3,r3,23189
 100b6dc:	d9001615 	stw	r4,88(sp)
 100b6e0:	d8800b15 	stw	r2,44(sp)
 100b6e4:	d9000304 	addi	r4,sp,12
 100b6e8:	00804074 	movhi	r2,257
 100b6ec:	10b41004 	addi	r2,r2,-12224
 100b6f0:	d8c00a15 	stw	r3,40(sp)
 100b6f4:	d9401715 	stw	r5,92(sp)
 100b6f8:	d9801815 	stw	r6,96(sp)
 100b6fc:	d9c01915 	stw	r7,100(sp)
 100b700:	dfc01c15 	stw	ra,112(sp)
 100b704:	df001b15 	stw	fp,108(sp)
 100b708:	ddc01a15 	stw	r23,104(sp)
 100b70c:	dec00d15 	stw	sp,52(sp)
 100b710:	d8800915 	stw	r2,36(sp)
 100b714:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100b718:	d8c01617 	ldw	r3,88(sp)
 100b71c:	d9801717 	ldw	r6,92(sp)
 100b720:	19400017 	ldw	r5,0(r3)
 100b724:	29fffd04 	addi	r7,r5,-12
 100b728:	39000017 	ldw	r4,0(r7)
 100b72c:	21807336 	bltu	r4,r6,100b8fc <_ZNSs7replaceEmmPKcm+0x23c>
 100b730:	d8c01717 	ldw	r3,92(sp)
 100b734:	d8801817 	ldw	r2,96(sp)
 100b738:	20cdc83a 	sub	r6,r4,r3
 100b73c:	d8801015 	stw	r2,64(sp)
 100b740:	30801b36 	bltu	r6,r2,100b7b0 <_ZNSs7replaceEmmPKcm+0xf0>
 100b744:	d9801017 	ldw	r6,64(sp)
 100b748:	00900034 	movhi	r2,16384
 100b74c:	10bfff04 	addi	r2,r2,-4
 100b750:	2187c83a 	sub	r3,r4,r6
 100b754:	10c5c83a 	sub	r2,r2,r3
 100b758:	d8c01d17 	ldw	r3,116(sp)
 100b75c:	10c06c36 	bltu	r2,r3,100b910 <_ZNSs7replaceEmmPKcm+0x250>
 100b760:	d9801917 	ldw	r6,100(sp)
 100b764:	3140142e 	bgeu	r6,r5,100b7b8 <_ZNSs7replaceEmmPKcm+0xf8>
 100b768:	d8801d17 	ldw	r2,116(sp)
 100b76c:	d9001617 	ldw	r4,88(sp)
 100b770:	d9401717 	ldw	r5,92(sp)
 100b774:	d9801017 	ldw	r6,64(sp)
 100b778:	d9c01917 	ldw	r7,100(sp)
 100b77c:	d8800015 	stw	r2,0(sp)
 100b780:	00bfffc4 	movi	r2,-1
 100b784:	d8800415 	stw	r2,16(sp)
 100b788:	100a7f00 	call	100a7f0 <_ZNSs15_M_replace_safeEmmPKcm>
 100b78c:	d8801615 	stw	r2,88(sp)
 100b790:	d9000304 	addi	r4,sp,12
 100b794:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100b798:	d8801617 	ldw	r2,88(sp)
 100b79c:	dfc01c17 	ldw	ra,112(sp)
 100b7a0:	df001b17 	ldw	fp,108(sp)
 100b7a4:	ddc01a17 	ldw	r23,104(sp)
 100b7a8:	dec01d04 	addi	sp,sp,116
 100b7ac:	f800283a 	ret
 100b7b0:	d9801015 	stw	r6,64(sp)
 100b7b4:	003fe306 	br	100b744 <_ZNSs7replaceEmmPKcm+0x84>
 100b7b8:	2905883a 	add	r2,r5,r4
 100b7bc:	11bfea36 	bltu	r2,r6,100b768 <_ZNSs7replaceEmmPKcm+0xa8>
 100b7c0:	38800217 	ldw	r2,8(r7)
 100b7c4:	00bfe816 	blt	zero,r2,100b768 <_ZNSs7replaceEmmPKcm+0xa8>
 100b7c8:	d8801717 	ldw	r2,92(sp)
 100b7cc:	d9001917 	ldw	r4,100(sp)
 100b7d0:	d9801d17 	ldw	r6,116(sp)
 100b7d4:	d8801515 	stw	r2,84(sp)
 100b7d8:	2887883a 	add	r3,r5,r2
 100b7dc:	2185883a 	add	r2,r4,r6
 100b7e0:	18801636 	bltu	r3,r2,100b83c <_ZNSs7replaceEmmPKcm+0x17c>
 100b7e4:	d8c01917 	ldw	r3,100(sp)
 100b7e8:	194bc83a 	sub	r5,r3,r5
 100b7ec:	d9401415 	stw	r5,80(sp)
 100b7f0:	d9401717 	ldw	r5,92(sp)
 100b7f4:	d9801017 	ldw	r6,64(sp)
 100b7f8:	d9001617 	ldw	r4,88(sp)
 100b7fc:	d9c01d17 	ldw	r7,116(sp)
 100b800:	00bfffc4 	movi	r2,-1
 100b804:	d8800415 	stw	r2,16(sp)
 100b808:	100a5b80 	call	100a5b8 <_ZNSs9_M_mutateEmmm>
 100b80c:	d9801617 	ldw	r6,88(sp)
 100b810:	d8801417 	ldw	r2,80(sp)
 100b814:	30c00017 	ldw	r3,0(r6)
 100b818:	d9801517 	ldw	r6,84(sp)
 100b81c:	188b883a 	add	r5,r3,r2
 100b820:	30c9883a 	add	r4,r6,r3
 100b824:	d8c01d17 	ldw	r3,116(sp)
 100b828:	00800044 	movi	r2,1
 100b82c:	18800d1e 	bne	r3,r2,100b864 <_ZNSs7replaceEmmPKcm+0x1a4>
 100b830:	28800003 	ldbu	r2,0(r5)
 100b834:	20800005 	stb	r2,0(r4)
 100b838:	003fd506 	br	100b790 <_ZNSs7replaceEmmPKcm+0xd0>
 100b83c:	d9001017 	ldw	r4,64(sp)
 100b840:	d9801917 	ldw	r6,100(sp)
 100b844:	1905883a 	add	r2,r3,r4
 100b848:	30800936 	bltu	r6,r2,100b870 <_ZNSs7replaceEmmPKcm+0x1b0>
 100b84c:	3147c83a 	sub	r3,r6,r5
 100b850:	d9401d17 	ldw	r5,116(sp)
 100b854:	2905c83a 	sub	r2,r5,r4
 100b858:	1887883a 	add	r3,r3,r2
 100b85c:	d8c01415 	stw	r3,80(sp)
 100b860:	003fe306 	br	100b7f0 <_ZNSs7replaceEmmPKcm+0x130>
 100b864:	d9801d17 	ldw	r6,116(sp)
 100b868:	100ed4c0 	call	100ed4c <memcpy>
 100b86c:	003fc806 	br	100b790 <_ZNSs7replaceEmmPKcm+0xd0>
 100b870:	01000104 	movi	r4,4
 100b874:	d905883a 	add	r2,sp,r4
 100b878:	d9000415 	stw	r4,16(sp)
 100b87c:	d9401917 	ldw	r5,100(sp)
 100b880:	1109883a 	add	r4,r2,r4
 100b884:	d9801d17 	ldw	r6,116(sp)
 100b888:	d9c00184 	addi	r7,sp,6
 100b88c:	10097e80 	call	10097e8 <_ZNSsC1EPKcmRKSaIcE>
 100b890:	d9001d17 	ldw	r4,116(sp)
 100b894:	008000c4 	movi	r2,3
 100b898:	d9c00217 	ldw	r7,8(sp)
 100b89c:	d9000015 	stw	r4,0(sp)
 100b8a0:	d8800415 	stw	r2,16(sp)
 100b8a4:	d9001617 	ldw	r4,88(sp)
 100b8a8:	d9401717 	ldw	r5,92(sp)
 100b8ac:	d9801017 	ldw	r6,64(sp)
 100b8b0:	100a7f00 	call	100a7f0 <_ZNSs15_M_replace_safeEmmPKcm>
 100b8b4:	d8801615 	stw	r2,88(sp)
 100b8b8:	d8800217 	ldw	r2,8(sp)
 100b8bc:	00c040f4 	movhi	r3,259
 100b8c0:	18dc3204 	addi	r3,r3,28872
 100b8c4:	10bffd04 	addi	r2,r2,-12
 100b8c8:	d8801215 	stw	r2,72(sp)
 100b8cc:	10ffb026 	beq	r2,r3,100b790 <_ZNSs7replaceEmmPKcm+0xd0>
 100b8d0:	d9401217 	ldw	r5,72(sp)
 100b8d4:	00800084 	movi	r2,2
 100b8d8:	d8800415 	stw	r2,16(sp)
 100b8dc:	29000204 	addi	r4,r5,8
 100b8e0:	017fffc4 	movi	r5,-1
 100b8e4:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100b8e8:	00bfa916 	blt	zero,r2,100b790 <_ZNSs7replaceEmmPKcm+0xd0>
 100b8ec:	d9001217 	ldw	r4,72(sp)
 100b8f0:	d9400144 	addi	r5,sp,5
 100b8f4:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100b8f8:	003fa506 	br	100b790 <_ZNSs7replaceEmmPKcm+0xd0>
 100b8fc:	00bfffc4 	movi	r2,-1
 100b900:	010040b4 	movhi	r4,258
 100b904:	21195004 	addi	r4,r4,25920
 100b908:	d8800415 	stw	r2,16(sp)
 100b90c:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>
 100b910:	00bfffc4 	movi	r2,-1
 100b914:	010040b4 	movhi	r4,258
 100b918:	21195004 	addi	r4,r4,25920
 100b91c:	d8800415 	stw	r2,16(sp)
 100b920:	10068e40 	call	10068e4 <_ZSt20__throw_length_errorPKc>
 100b924:	d8c00417 	ldw	r3,16(sp)
 100b928:	00800044 	movi	r2,1
 100b92c:	d9000517 	ldw	r4,20(sp)
 100b930:	18800226 	beq	r3,r2,100b93c <_ZNSs7replaceEmmPKcm+0x27c>
 100b934:	00800084 	movi	r2,2
 100b938:	18800326 	beq	r3,r2,100b948 <_ZNSs7replaceEmmPKcm+0x288>
 100b93c:	00bfffc4 	movi	r2,-1
 100b940:	d8800415 	stw	r2,16(sp)
 100b944:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100b948:	d8800217 	ldw	r2,8(sp)
 100b94c:	00c040f4 	movhi	r3,259
 100b950:	18dc3204 	addi	r3,r3,28872
 100b954:	d9001315 	stw	r4,76(sp)
 100b958:	10bffd04 	addi	r2,r2,-12
 100b95c:	d8801115 	stw	r2,68(sp)
 100b960:	10c0041e 	bne	r2,r3,100b974 <_ZNSs7replaceEmmPKcm+0x2b4>
 100b964:	d9001317 	ldw	r4,76(sp)
 100b968:	00bfffc4 	movi	r2,-1
 100b96c:	d8800415 	stw	r2,16(sp)
 100b970:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100b974:	d9801117 	ldw	r6,68(sp)
 100b978:	00800044 	movi	r2,1
 100b97c:	d8800415 	stw	r2,16(sp)
 100b980:	31000204 	addi	r4,r6,8
 100b984:	017fffc4 	movi	r5,-1
 100b988:	100bb980 	call	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100b98c:	00bff516 	blt	zero,r2,100b964 <_ZNSs7replaceEmmPKcm+0x2a4>
 100b990:	d9001117 	ldw	r4,68(sp)
 100b994:	d9400104 	addi	r5,sp,4
 100b998:	10086280 	call	1008628 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100b99c:	003ff106 	br	100b964 <_ZNSs7replaceEmmPKcm+0x2a4>

0100b9a0 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_>:
 100b9a0:	d8800017 	ldw	r2,0(sp)
 100b9a4:	20c00017 	ldw	r3,0(r4)
 100b9a8:	314dc83a 	sub	r6,r6,r5
 100b9ac:	11c5c83a 	sub	r2,r2,r7
 100b9b0:	28cbc83a 	sub	r5,r5,r3
 100b9b4:	d8800015 	stw	r2,0(sp)
 100b9b8:	100b6c01 	jmpi	100b6c0 <_ZNSs7replaceEmmPKcm>

0100b9bc <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_>:
 100b9bc:	d8800017 	ldw	r2,0(sp)
 100b9c0:	20c00017 	ldw	r3,0(r4)
 100b9c4:	314dc83a 	sub	r6,r6,r5
 100b9c8:	11c5c83a 	sub	r2,r2,r7
 100b9cc:	28cbc83a 	sub	r5,r5,r3
 100b9d0:	d8800015 	stw	r2,0(sp)
 100b9d4:	100b6c01 	jmpi	100b6c0 <_ZNSs7replaceEmmPKcm>

0100b9d8 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_>:
 100b9d8:	d8800017 	ldw	r2,0(sp)
 100b9dc:	20c00017 	ldw	r3,0(r4)
 100b9e0:	314dc83a 	sub	r6,r6,r5
 100b9e4:	11c5c83a 	sub	r2,r2,r7
 100b9e8:	28cbc83a 	sub	r5,r5,r3
 100b9ec:	d8800015 	stw	r2,0(sp)
 100b9f0:	100b6c01 	jmpi	100b6c0 <_ZNSs7replaceEmmPKcm>

0100b9f4 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_>:
 100b9f4:	d8800017 	ldw	r2,0(sp)
 100b9f8:	20c00017 	ldw	r3,0(r4)
 100b9fc:	314dc83a 	sub	r6,r6,r5
 100ba00:	11c5c83a 	sub	r2,r2,r7
 100ba04:	28cbc83a 	sub	r5,r5,r3
 100ba08:	d8800015 	stw	r2,0(sp)
 100ba0c:	100b6c01 	jmpi	100b6c0 <_ZNSs7replaceEmmPKcm>

0100ba10 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcm>:
 100ba10:	20800017 	ldw	r2,0(r4)
 100ba14:	314dc83a 	sub	r6,r6,r5
 100ba18:	288bc83a 	sub	r5,r5,r2
 100ba1c:	100b6c01 	jmpi	100b6c0 <_ZNSs7replaceEmmPKcm>

0100ba20 <_ZNSs7replaceEmmPKc>:
 100ba20:	defffa04 	addi	sp,sp,-24
 100ba24:	dfc00515 	stw	ra,20(sp)
 100ba28:	ddc00415 	stw	r23,16(sp)
 100ba2c:	dd400315 	stw	r21,12(sp)
 100ba30:	dcc00215 	stw	r19,8(sp)
 100ba34:	dc400115 	stw	r17,4(sp)
 100ba38:	202f883a 	mov	r23,r4
 100ba3c:	3809883a 	mov	r4,r7
 100ba40:	382b883a 	mov	r21,r7
 100ba44:	2823883a 	mov	r17,r5
 100ba48:	3027883a 	mov	r19,r6
 100ba4c:	100f5c00 	call	100f5c0 <strlen>
 100ba50:	880b883a 	mov	r5,r17
 100ba54:	b809883a 	mov	r4,r23
 100ba58:	980d883a 	mov	r6,r19
 100ba5c:	a80f883a 	mov	r7,r21
 100ba60:	d8800015 	stw	r2,0(sp)
 100ba64:	100b6c00 	call	100b6c0 <_ZNSs7replaceEmmPKcm>
 100ba68:	dfc00517 	ldw	ra,20(sp)
 100ba6c:	ddc00417 	ldw	r23,16(sp)
 100ba70:	dd400317 	ldw	r21,12(sp)
 100ba74:	dcc00217 	ldw	r19,8(sp)
 100ba78:	dc400117 	ldw	r17,4(sp)
 100ba7c:	dec00604 	addi	sp,sp,24
 100ba80:	f800283a 	ret

0100ba84 <_ZNSs7replaceEmmRKSsmm>:
 100ba84:	3a400017 	ldw	r9,0(r7)
 100ba88:	deffff04 	addi	sp,sp,-4
 100ba8c:	d9c00117 	ldw	r7,4(sp)
 100ba90:	48bffd17 	ldw	r2,-12(r9)
 100ba94:	dfc00015 	stw	ra,0(sp)
 100ba98:	da000217 	ldw	r8,8(sp)
 100ba9c:	11c00d36 	bltu	r2,r7,100bad4 <_ZNSs7replaceEmmRKSsmm+0x50>
 100baa0:	11c7c83a 	sub	r3,r2,r7
 100baa4:	4005883a 	mov	r2,r8
 100baa8:	49cf883a 	add	r7,r9,r7
 100baac:	1a000436 	bltu	r3,r8,100bac0 <_ZNSs7replaceEmmRKSsmm+0x3c>
 100bab0:	d8800115 	stw	r2,4(sp)
 100bab4:	dfc00017 	ldw	ra,0(sp)
 100bab8:	dec00104 	addi	sp,sp,4
 100babc:	100b6c01 	jmpi	100b6c0 <_ZNSs7replaceEmmPKcm>
 100bac0:	1805883a 	mov	r2,r3
 100bac4:	d8800115 	stw	r2,4(sp)
 100bac8:	dfc00017 	ldw	ra,0(sp)
 100bacc:	dec00104 	addi	sp,sp,4
 100bad0:	100b6c01 	jmpi	100b6c0 <_ZNSs7replaceEmmPKcm>
 100bad4:	010040b4 	movhi	r4,258
 100bad8:	21195004 	addi	r4,r4,25920
 100badc:	10067540 	call	1006754 <_ZSt20__throw_out_of_rangePKc>

0100bae0 <_ZNSs7replaceEmmRKSs>:
 100bae0:	39c00017 	ldw	r7,0(r7)
 100bae4:	defffe04 	addi	sp,sp,-8
 100bae8:	dfc00115 	stw	ra,4(sp)
 100baec:	38bffd17 	ldw	r2,-12(r7)
 100baf0:	d8800015 	stw	r2,0(sp)
 100baf4:	100b6c00 	call	100b6c0 <_ZNSs7replaceEmmPKcm>
 100baf8:	dfc00117 	ldw	ra,4(sp)
 100bafc:	dec00204 	addi	sp,sp,8
 100bb00:	f800283a 	ret

0100bb04 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs>:
 100bb04:	39c00017 	ldw	r7,0(r7)
 100bb08:	20800017 	ldw	r2,0(r4)
 100bb0c:	defffe04 	addi	sp,sp,-8
 100bb10:	38fffd17 	ldw	r3,-12(r7)
 100bb14:	314dc83a 	sub	r6,r6,r5
 100bb18:	288bc83a 	sub	r5,r5,r2
 100bb1c:	dfc00115 	stw	ra,4(sp)
 100bb20:	d8c00015 	stw	r3,0(sp)
 100bb24:	100b6c00 	call	100b6c0 <_ZNSs7replaceEmmPKcm>
 100bb28:	dfc00117 	ldw	ra,4(sp)
 100bb2c:	dec00204 	addi	sp,sp,8
 100bb30:	f800283a 	ret

0100bb34 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc>:
 100bb34:	20800017 	ldw	r2,0(r4)
 100bb38:	defffa04 	addi	sp,sp,-24
 100bb3c:	dc400215 	stw	r17,8(sp)
 100bb40:	3163c83a 	sub	r17,r6,r5
 100bb44:	288bc83a 	sub	r5,r5,r2
 100bb48:	dfc00515 	stw	ra,20(sp)
 100bb4c:	dd400415 	stw	r21,16(sp)
 100bb50:	dcc00315 	stw	r19,12(sp)
 100bb54:	d9400115 	stw	r5,4(sp)
 100bb58:	2027883a 	mov	r19,r4
 100bb5c:	3809883a 	mov	r4,r7
 100bb60:	382b883a 	mov	r21,r7
 100bb64:	100f5c00 	call	100f5c0 <strlen>
 100bb68:	d9400117 	ldw	r5,4(sp)
 100bb6c:	9809883a 	mov	r4,r19
 100bb70:	880d883a 	mov	r6,r17
 100bb74:	a80f883a 	mov	r7,r21
 100bb78:	d8800015 	stw	r2,0(sp)
 100bb7c:	100b6c00 	call	100b6c0 <_ZNSs7replaceEmmPKcm>
 100bb80:	dfc00517 	ldw	ra,20(sp)
 100bb84:	dd400417 	ldw	r21,16(sp)
 100bb88:	dcc00317 	ldw	r19,12(sp)
 100bb8c:	dc400217 	ldw	r17,8(sp)
 100bb90:	dec00604 	addi	sp,sp,24
 100bb94:	f800283a 	ret

0100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>:
 100bb98:	20800017 	ldw	r2,0(r4)
 100bb9c:	20c00017 	ldw	r3,0(r4)
 100bba0:	1947883a 	add	r3,r3,r5
 100bba4:	20c00015 	stw	r3,0(r4)
 100bba8:	f800283a 	ret

0100bbac <_ZN9__gnu_cxx12__atomic_addEPVii>:
 100bbac:	100bb981 	jmpi	100bb98 <_ZN9__gnu_cxx18__exchange_and_addEPVii>

0100bbb0 <_ZNKSt9exception4whatEv>:
 100bbb0:	20800017 	ldw	r2,0(r4)
 100bbb4:	10ffff17 	ldw	r3,-4(r2)
 100bbb8:	18800117 	ldw	r2,4(r3)
 100bbbc:	f800283a 	ret

0100bbc0 <_ZNSt9exceptionD0Ev>:
 100bbc0:	008040b4 	movhi	r2,258
 100bbc4:	10996e04 	addi	r2,r2,26040
 100bbc8:	20800015 	stw	r2,0(r4)
 100bbcc:	100d8101 	jmpi	100d810 <_ZdlPv>

0100bbd0 <_ZNSt9exceptionD1Ev>:
 100bbd0:	008040b4 	movhi	r2,258
 100bbd4:	10996e04 	addi	r2,r2,26040
 100bbd8:	20800015 	stw	r2,0(r4)
 100bbdc:	f800283a 	ret

0100bbe0 <_ZNSt9exceptionD2Ev>:
 100bbe0:	008040b4 	movhi	r2,258
 100bbe4:	10996e04 	addi	r2,r2,26040
 100bbe8:	20800015 	stw	r2,0(r4)
 100bbec:	f800283a 	ret

0100bbf0 <_ZNSt13bad_exceptionD0Ev>:
 100bbf0:	defffe04 	addi	sp,sp,-8
 100bbf4:	008040b4 	movhi	r2,258
 100bbf8:	10996904 	addi	r2,r2,26020
 100bbfc:	dc400015 	stw	r17,0(sp)
 100bc00:	20800015 	stw	r2,0(r4)
 100bc04:	2023883a 	mov	r17,r4
 100bc08:	dfc00115 	stw	ra,4(sp)
 100bc0c:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 100bc10:	8809883a 	mov	r4,r17
 100bc14:	dfc00117 	ldw	ra,4(sp)
 100bc18:	dc400017 	ldw	r17,0(sp)
 100bc1c:	dec00204 	addi	sp,sp,8
 100bc20:	100d8101 	jmpi	100d810 <_ZdlPv>

0100bc24 <_ZNSt13bad_exceptionD1Ev>:
 100bc24:	008040b4 	movhi	r2,258
 100bc28:	10996904 	addi	r2,r2,26020
 100bc2c:	20800015 	stw	r2,0(r4)
 100bc30:	100bbe01 	jmpi	100bbe0 <_ZNSt9exceptionD2Ev>

0100bc34 <_ZNSt13bad_exceptionD2Ev>:
 100bc34:	008040b4 	movhi	r2,258
 100bc38:	10996904 	addi	r2,r2,26020
 100bc3c:	20800015 	stw	r2,0(r4)
 100bc40:	100bbe01 	jmpi	100bbe0 <_ZNSt9exceptionD2Ev>

0100bc44 <_ZSt15set_new_handlerPFvvE>:
 100bc44:	d0a09c17 	ldw	r2,-32144(gp)
 100bc48:	d1209c15 	stw	r4,-32144(gp)
 100bc4c:	f800283a 	ret

0100bc50 <_ZNSt9bad_allocD0Ev>:
 100bc50:	defffe04 	addi	sp,sp,-8
 100bc54:	008040b4 	movhi	r2,258
 100bc58:	10997f04 	addi	r2,r2,26108
 100bc5c:	dc400015 	stw	r17,0(sp)
 100bc60:	20800015 	stw	r2,0(r4)
 100bc64:	2023883a 	mov	r17,r4
 100bc68:	dfc00115 	stw	ra,4(sp)
 100bc6c:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 100bc70:	8809883a 	mov	r4,r17
 100bc74:	dfc00117 	ldw	ra,4(sp)
 100bc78:	dc400017 	ldw	r17,0(sp)
 100bc7c:	dec00204 	addi	sp,sp,8
 100bc80:	100d8101 	jmpi	100d810 <_ZdlPv>

0100bc84 <_ZNSt9bad_allocD1Ev>:
 100bc84:	008040b4 	movhi	r2,258
 100bc88:	10997f04 	addi	r2,r2,26108
 100bc8c:	20800015 	stw	r2,0(r4)
 100bc90:	100bbe01 	jmpi	100bbe0 <_ZNSt9exceptionD2Ev>

0100bc94 <_ZNSt9bad_allocD2Ev>:
 100bc94:	008040b4 	movhi	r2,258
 100bc98:	10997f04 	addi	r2,r2,26108
 100bc9c:	20800015 	stw	r2,0(r4)
 100bca0:	100bbe01 	jmpi	100bbe0 <_ZNSt9exceptionD2Ev>

0100bca4 <__cxa_pure_virtual>:
 100bca4:	deffff04 	addi	sp,sp,-4
 100bca8:	01000084 	movi	r4,2
 100bcac:	014040b4 	movhi	r5,258
 100bcb0:	29598904 	addi	r5,r5,26148
 100bcb4:	018006c4 	movi	r6,27
 100bcb8:	dfc00015 	stw	ra,0(sp)
 100bcbc:	10192a00 	call	10192a0 <write>
 100bcc0:	100d5ec0 	call	100d5ec <_ZSt9terminatev>

0100bcc4 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 100bcc4:	00800044 	movi	r2,1
 100bcc8:	f800283a 	ret

0100bccc <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 100bccc:	deffff04 	addi	sp,sp,-4
 100bcd0:	3807883a 	mov	r3,r7
 100bcd4:	2005883a 	mov	r2,r4
 100bcd8:	01000044 	movi	r4,1
 100bcdc:	dfc00015 	stw	ra,0(sp)
 100bce0:	39c00084 	addi	r7,r7,2
 100bce4:	20c00a2e 	bgeu	r4,r3,100bd10 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>
 100bce8:	12000317 	ldw	r8,12(r2)
 100bcec:	40800017 	ldw	r2,0(r8)
 100bcf0:	29400317 	ldw	r5,12(r5)
 100bcf4:	4009883a 	mov	r4,r8
 100bcf8:	10c00417 	ldw	r3,16(r2)
 100bcfc:	183ee83a 	callr	r3
 100bd00:	10803fcc 	andi	r2,r2,255
 100bd04:	dfc00017 	ldw	ra,0(sp)
 100bd08:	dec00104 	addi	sp,sp,4
 100bd0c:	f800283a 	ret
 100bd10:	12000317 	ldw	r8,12(r2)
 100bd14:	008040f4 	movhi	r2,259
 100bd18:	10a39504 	addi	r2,r2,-29100
 100bd1c:	11000117 	ldw	r4,4(r2)
 100bd20:	40c00117 	ldw	r3,4(r8)
 100bd24:	193ff11e 	bne	r3,r4,100bcec <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x20>
 100bd28:	29000317 	ldw	r4,12(r5)
 100bd2c:	20800017 	ldw	r2,0(r4)
 100bd30:	10c00317 	ldw	r3,12(r2)
 100bd34:	183ee83a 	callr	r3
 100bd38:	1080005c 	xori	r2,r2,1
 100bd3c:	10803fcc 	andi	r2,r2,255
 100bd40:	dfc00017 	ldw	ra,0(sp)
 100bd44:	dec00104 	addi	sp,sp,4
 100bd48:	f800283a 	ret

0100bd4c <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 100bd4c:	defffe04 	addi	sp,sp,-8
 100bd50:	008040b4 	movhi	r2,258
 100bd54:	10999204 	addi	r2,r2,26184
 100bd58:	dc400015 	stw	r17,0(sp)
 100bd5c:	20800015 	stw	r2,0(r4)
 100bd60:	2023883a 	mov	r17,r4
 100bd64:	dfc00115 	stw	ra,4(sp)
 100bd68:	100c8a00 	call	100c8a0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
 100bd6c:	8809883a 	mov	r4,r17
 100bd70:	dfc00117 	ldw	ra,4(sp)
 100bd74:	dc400017 	ldw	r17,0(sp)
 100bd78:	dec00204 	addi	sp,sp,8
 100bd7c:	100d8101 	jmpi	100d810 <_ZdlPv>

0100bd80 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 100bd80:	008040b4 	movhi	r2,258
 100bd84:	10999204 	addi	r2,r2,26184
 100bd88:	20800015 	stw	r2,0(r4)
 100bd8c:	100c8a01 	jmpi	100c8a0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

0100bd90 <_ZN10__cxxabiv119__pointer_type_infoD2Ev>:
 100bd90:	008040b4 	movhi	r2,258
 100bd94:	10999204 	addi	r2,r2,26184
 100bd98:	20800015 	stw	r2,0(r4)
 100bd9c:	100c8a01 	jmpi	100c8a0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

0100bda0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 100bda0:	defffe04 	addi	sp,sp,-8
 100bda4:	008040b4 	movhi	r2,258
 100bda8:	1099a704 	addi	r2,r2,26268
 100bdac:	dc400015 	stw	r17,0(sp)
 100bdb0:	20800015 	stw	r2,0(r4)
 100bdb4:	2023883a 	mov	r17,r4
 100bdb8:	dfc00115 	stw	ra,4(sp)
 100bdbc:	100c6c00 	call	100c6c0 <_ZN10__cxxabiv117__class_type_infoD2Ev>
 100bdc0:	8809883a 	mov	r4,r17
 100bdc4:	dfc00117 	ldw	ra,4(sp)
 100bdc8:	dc400017 	ldw	r17,0(sp)
 100bdcc:	dec00204 	addi	sp,sp,8
 100bdd0:	100d8101 	jmpi	100d810 <_ZdlPv>

0100bdd4 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 100bdd4:	008040b4 	movhi	r2,258
 100bdd8:	1099a704 	addi	r2,r2,26268
 100bddc:	20800015 	stw	r2,0(r4)
 100bde0:	100c6c01 	jmpi	100c6c0 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0100bde4 <_ZN10__cxxabiv121__vmi_class_type_infoD2Ev>:
 100bde4:	008040b4 	movhi	r2,258
 100bde8:	1099a704 	addi	r2,r2,26268
 100bdec:	20800015 	stw	r2,0(r4)
 100bdf0:	100c6c01 	jmpi	100c6c0 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0100bdf4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
 100bdf4:	defff704 	addi	sp,sp,-36
 100bdf8:	dd800715 	stw	r22,28(sp)
 100bdfc:	dd800917 	ldw	r22,36(sp)
 100be00:	dd400615 	stw	r21,24(sp)
 100be04:	dd000515 	stw	r20,20(sp)
 100be08:	dcc00415 	stw	r19,16(sp)
 100be0c:	dc800315 	stw	r18,12(sp)
 100be10:	dfc00815 	stw	ra,32(sp)
 100be14:	dc400215 	stw	r17,8(sp)
 100be18:	dc000115 	stw	r16,4(sp)
 100be1c:	3027883a 	mov	r19,r6
 100be20:	2025883a 	mov	r18,r4
 100be24:	2829883a 	mov	r20,r5
 100be28:	382b883a 	mov	r21,r7
 100be2c:	35802c26 	beq	r6,r22,100bee0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xec>
 100be30:	94000317 	ldw	r16,12(r18)
 100be34:	843fffc4 	addi	r16,r16,-1
 100be38:	00bfffc4 	movi	r2,-1
 100be3c:	800690fa 	slli	r3,r16,3
 100be40:	80801b26 	beq	r16,r2,100beb0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xbc>
 100be44:	1c8d883a 	add	r6,r3,r18
 100be48:	31000517 	ldw	r4,20(r6)
 100be4c:	2080004c 	andi	r2,r4,1
 100be50:	20c0008c 	andi	r3,r4,2
 100be54:	1023003a 	cmpeq	r17,r2,zero
 100be58:	183ff626 	beq	r3,zero,100be34 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x40>
 100be5c:	a00b883a 	mov	r5,r20
 100be60:	a80f883a 	mov	r7,r21
 100be64:	2007d23a 	srai	r3,r4,8
 100be68:	8800051e 	bne	r17,zero,100be80 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x8c>
 100be6c:	00bfff44 	movi	r2,-3
 100be70:	a0bff026 	beq	r20,r2,100be34 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x40>
 100be74:	98800017 	ldw	r2,0(r19)
 100be78:	10c5883a 	add	r2,r2,r3
 100be7c:	10c00017 	ldw	r3,0(r2)
 100be80:	31000417 	ldw	r4,16(r6)
 100be84:	98cd883a 	add	r6,r19,r3
 100be88:	20800017 	ldw	r2,0(r4)
 100be8c:	dd800015 	stw	r22,0(sp)
 100be90:	10c00817 	ldw	r3,32(r2)
 100be94:	183ee83a 	callr	r3
 100be98:	1007883a 	mov	r3,r2
 100be9c:	008000c4 	movi	r2,3
 100bea0:	10ffe40e 	bge	r2,r3,100be34 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x40>
 100bea4:	8800031e 	bne	r17,zero,100beb4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc0>
 100bea8:	18c00054 	ori	r3,r3,1
 100beac:	00000106 	br	100beb4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc0>
 100beb0:	00c00044 	movi	r3,1
 100beb4:	1805883a 	mov	r2,r3
 100beb8:	dfc00817 	ldw	ra,32(sp)
 100bebc:	dd800717 	ldw	r22,28(sp)
 100bec0:	dd400617 	ldw	r21,24(sp)
 100bec4:	dd000517 	ldw	r20,20(sp)
 100bec8:	dcc00417 	ldw	r19,16(sp)
 100becc:	dc800317 	ldw	r18,12(sp)
 100bed0:	dc400217 	ldw	r17,8(sp)
 100bed4:	dc000117 	ldw	r16,4(sp)
 100bed8:	dec00904 	addi	sp,sp,36
 100bedc:	f800283a 	ret
 100bee0:	20c00117 	ldw	r3,4(r4)
 100bee4:	38800117 	ldw	r2,4(r7)
 100bee8:	18bfd11e 	bne	r3,r2,100be30 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x3c>
 100beec:	00c00184 	movi	r3,6
 100bef0:	003ff006 	br	100beb4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc0>

0100bef4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 100bef4:	defff204 	addi	sp,sp,-56
 100bef8:	df000c15 	stw	fp,48(sp)
 100befc:	dd800a15 	stw	r22,40(sp)
 100bf00:	dd400915 	stw	r21,36(sp)
 100bf04:	dd000815 	stw	r20,32(sp)
 100bf08:	dfc00d15 	stw	ra,52(sp)
 100bf0c:	ddc00b15 	stw	r23,44(sp)
 100bf10:	dcc00715 	stw	r19,28(sp)
 100bf14:	dc800615 	stw	r18,24(sp)
 100bf18:	dc400515 	stw	r17,20(sp)
 100bf1c:	dc000415 	stw	r16,16(sp)
 100bf20:	202b883a 	mov	r21,r4
 100bf24:	2839883a 	mov	fp,r5
 100bf28:	302d883a 	mov	r22,r6
 100bf2c:	3829883a 	mov	r20,r7
 100bf30:	100c7300 	call	100c730 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 100bf34:	10803fcc 	andi	r2,r2,255
 100bf38:	1000571e 	bne	r2,zero,100c098 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a4>
 100bf3c:	a5c00217 	ldw	r23,8(r20)
 100bf40:	b880040c 	andi	r2,r23,16
 100bf44:	1000741e 	bne	r2,zero,100c118 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x224>
 100bf48:	ac400317 	ldw	r17,12(r21)
 100bf4c:	8c7fffc4 	addi	r17,r17,-1
 100bf50:	00bfffc4 	movi	r2,-1
 100bf54:	88803726 	beq	r17,r2,100c034 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x140>
 100bf58:	880a90fa 	slli	r5,r17,3
 100bf5c:	d8000015 	stw	zero,0(sp)
 100bf60:	d8000115 	stw	zero,4(sp)
 100bf64:	2d45883a 	add	r2,r5,r21
 100bf68:	11000517 	ldw	r4,20(r2)
 100bf6c:	ddc00215 	stw	r23,8(sp)
 100bf70:	d8000315 	stw	zero,12(sp)
 100bf74:	2004d07a 	srli	r2,r4,1
 100bf78:	1480004c 	andi	r18,r2,1
 100bf7c:	9006c03a 	cmpne	r3,r18,zero
 100bf80:	1800031e 	bne	r3,zero,100bf90 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9c>
 100bf84:	b880004c 	andi	r2,r23,1
 100bf88:	1005003a 	cmpeq	r2,r2,zero
 100bf8c:	103fef1e 	bne	r2,zero,100bf4c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 100bf90:	24c0004c 	andi	r19,r4,1
 100bf94:	b0002a26 	beq	r22,zero,100c040 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x14c>
 100bf98:	200dd23a 	srai	r6,r4,8
 100bf9c:	98000326 	beq	r19,zero,100bfac <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb8>
 100bfa0:	b0800017 	ldw	r2,0(r22)
 100bfa4:	1185883a 	add	r2,r2,r6
 100bfa8:	11800017 	ldw	r6,0(r2)
 100bfac:	b18d883a 	add	r6,r22,r6
 100bfb0:	2d61883a 	add	r16,r5,r21
 100bfb4:	81000417 	ldw	r4,16(r16)
 100bfb8:	e00b883a 	mov	r5,fp
 100bfbc:	d80f883a 	mov	r7,sp
 100bfc0:	20800017 	ldw	r2,0(r4)
 100bfc4:	10c00617 	ldw	r3,24(r2)
 100bfc8:	183ee83a 	callr	r3
 100bfcc:	10803fcc 	andi	r2,r2,255
 100bfd0:	103fde26 	beq	r2,zero,100bf4c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 100bfd4:	d8c00317 	ldw	r3,12(sp)
 100bfd8:	00800204 	movi	r2,8
 100bfdc:	18801a26 	beq	r3,r2,100c048 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
 100bfe0:	d8c00117 	ldw	r3,4(sp)
 100bfe4:	008000c4 	movi	r2,3
 100bfe8:	10c0050e 	bge	r2,r3,100c000 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 100bfec:	9004c03a 	cmpne	r2,r18,zero
 100bff0:	1000031e 	bne	r2,zero,100c000 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 100bff4:	00bfff44 	movi	r2,-3
 100bff8:	1884703a 	and	r2,r3,r2
 100bffc:	d8800115 	stw	r2,4(sp)
 100c000:	a1000317 	ldw	r4,12(r20)
 100c004:	20001426 	beq	r4,zero,100c058 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x164>
 100c008:	a0c00017 	ldw	r3,0(r20)
 100c00c:	d8800017 	ldw	r2,0(sp)
 100c010:	1880431e 	bne	r3,r2,100c120 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x22c>
 100c014:	18002e26 	beq	r3,zero,100c0d0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1dc>
 100c018:	a0800117 	ldw	r2,4(r20)
 100c01c:	d8c00117 	ldw	r3,4(sp)
 100c020:	8c7fffc4 	addi	r17,r17,-1
 100c024:	10c4b03a 	or	r2,r2,r3
 100c028:	a0800115 	stw	r2,4(r20)
 100c02c:	00bfffc4 	movi	r2,-1
 100c030:	88bfc91e 	bne	r17,r2,100bf58 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x64>
 100c034:	a0800117 	ldw	r2,4(r20)
 100c038:	1006c03a 	cmpne	r3,r2,zero
 100c03c:	00001706 	br	100c09c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
 100c040:	000d883a 	mov	r6,zero
 100c044:	003fda06 	br	100bfb0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xbc>
 100c048:	983fe526 	beq	r19,zero,100bfe0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xec>
 100c04c:	80800417 	ldw	r2,16(r16)
 100c050:	d8800315 	stw	r2,12(sp)
 100c054:	003fe206 	br	100bfe0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xec>
 100c058:	d8800017 	ldw	r2,0(sp)
 100c05c:	d9400117 	ldw	r5,4(sp)
 100c060:	d8c00217 	ldw	r3,8(sp)
 100c064:	d9000317 	ldw	r4,12(sp)
 100c068:	a0800015 	stw	r2,0(r20)
 100c06c:	008000c4 	movi	r2,3
 100c070:	a0c00215 	stw	r3,8(r20)
 100c074:	a1000315 	stw	r4,12(r20)
 100c078:	a1400115 	stw	r5,4(r20)
 100c07c:	1140060e 	bge	r2,r5,100c098 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a4>
 100c080:	2880008c 	andi	r2,r5,2
 100c084:	10001d26 	beq	r2,zero,100c0fc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x208>
 100c088:	a8800217 	ldw	r2,8(r21)
 100c08c:	1080004c 	andi	r2,r2,1
 100c090:	1005003a 	cmpeq	r2,r2,zero
 100c094:	103fad26 	beq	r2,zero,100bf4c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 100c098:	00c00044 	movi	r3,1
 100c09c:	1805883a 	mov	r2,r3
 100c0a0:	dfc00d17 	ldw	ra,52(sp)
 100c0a4:	df000c17 	ldw	fp,48(sp)
 100c0a8:	ddc00b17 	ldw	r23,44(sp)
 100c0ac:	dd800a17 	ldw	r22,40(sp)
 100c0b0:	dd400917 	ldw	r21,36(sp)
 100c0b4:	dd000817 	ldw	r20,32(sp)
 100c0b8:	dcc00717 	ldw	r19,28(sp)
 100c0bc:	dc800617 	ldw	r18,24(sp)
 100c0c0:	dc400517 	ldw	r17,20(sp)
 100c0c4:	dc000417 	ldw	r16,16(sp)
 100c0c8:	dec00e04 	addi	sp,sp,56
 100c0cc:	f800283a 	ret
 100c0d0:	d8800317 	ldw	r2,12(sp)
 100c0d4:	00c00204 	movi	r3,8
 100c0d8:	10c00426 	beq	r2,r3,100c0ec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
 100c0dc:	20c00326 	beq	r4,r3,100c0ec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
 100c0e0:	10c00117 	ldw	r3,4(r2)
 100c0e4:	20800117 	ldw	r2,4(r4)
 100c0e8:	18bfcb26 	beq	r3,r2,100c018 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x124>
 100c0ec:	00800084 	movi	r2,2
 100c0f0:	00c00044 	movi	r3,1
 100c0f4:	a0800115 	stw	r2,4(r20)
 100c0f8:	003fe806 	br	100c09c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
 100c0fc:	2880004c 	andi	r2,r5,1
 100c100:	1005003a 	cmpeq	r2,r2,zero
 100c104:	103fe41e 	bne	r2,zero,100c098 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a4>
 100c108:	a8800217 	ldw	r2,8(r21)
 100c10c:	1080008c 	andi	r2,r2,2
 100c110:	103f8e1e 	bne	r2,zero,100bf4c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 100c114:	003fe006 	br	100c098 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a4>
 100c118:	adc00217 	ldw	r23,8(r21)
 100c11c:	003f8a06 	br	100bf48 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x54>
 100c120:	00800084 	movi	r2,2
 100c124:	00c00044 	movi	r3,1
 100c128:	a0800115 	stw	r2,4(r20)
 100c12c:	a0000015 	stw	zero,0(r20)
 100c130:	003fda06 	br	100c09c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>

0100c134 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 100c134:	deffeb04 	addi	sp,sp,-84
 100c138:	dcc00e15 	stw	r19,56(sp)
 100c13c:	dcc01817 	ldw	r19,96(sp)
 100c140:	df001315 	stw	fp,76(sp)
 100c144:	ddc01215 	stw	r23,72(sp)
 100c148:	98800417 	ldw	r2,16(r19)
 100c14c:	dd801115 	stw	r22,68(sp)
 100c150:	dfc01415 	stw	ra,80(sp)
 100c154:	1080040c 	andi	r2,r2,16
 100c158:	dd401015 	stw	r21,64(sp)
 100c15c:	dd000f15 	stw	r20,60(sp)
 100c160:	dc800d15 	stw	r18,52(sp)
 100c164:	dc400c15 	stw	r17,48(sp)
 100c168:	dc000b15 	stw	r16,44(sp)
 100c16c:	202d883a 	mov	r22,r4
 100c170:	282f883a 	mov	r23,r5
 100c174:	3039883a 	mov	fp,r6
 100c178:	d9c00a15 	stw	r7,40(sp)
 100c17c:	10000226 	beq	r2,zero,100c188 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 100c180:	21000217 	ldw	r4,8(r4)
 100c184:	99000415 	stw	r4,16(r19)
 100c188:	d8801517 	ldw	r2,84(sp)
 100c18c:	d8c01717 	ldw	r3,92(sp)
 100c190:	10c0d926 	beq	r2,r3,100c4f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
 100c194:	b0c00117 	ldw	r3,4(r22)
 100c198:	d9800a17 	ldw	r6,40(sp)
 100c19c:	30800117 	ldw	r2,4(r6)
 100c1a0:	18807626 	beq	r3,r2,100c37c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x248>
 100c1a4:	b5400317 	ldw	r21,12(r22)
 100c1a8:	d8000905 	stb	zero,36(sp)
 100c1ac:	ad7fffc4 	addi	r21,r21,-1
 100c1b0:	00bfffc4 	movi	r2,-1
 100c1b4:	a8805e26 	beq	r21,r2,100c330 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 100c1b8:	a80e90fa 	slli	r7,r21,3
 100c1bc:	99000417 	ldw	r4,16(r19)
 100c1c0:	d8000415 	stw	zero,16(sp)
 100c1c4:	3d85883a 	add	r2,r7,r22
 100c1c8:	10c00517 	ldw	r3,20(r2)
 100c1cc:	d8000515 	stw	zero,20(sp)
 100c1d0:	d8000615 	stw	zero,24(sp)
 100c1d4:	1880004c 	andi	r2,r3,1
 100c1d8:	d8000715 	stw	zero,28(sp)
 100c1dc:	d9000815 	stw	r4,32(sp)
 100c1e0:	180bd23a 	srai	r5,r3,8
 100c1e4:	10007c1e 	bne	r2,zero,100c3d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a4>
 100c1e8:	e00d883a 	mov	r6,fp
 100c1ec:	1880008c 	andi	r2,r3,2
 100c1f0:	1000041e 	bne	r2,zero,100c204 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
 100c1f4:	00bfff84 	movi	r2,-2
 100c1f8:	b8808126 	beq	r23,r2,100c400 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2cc>
 100c1fc:	00bfff44 	movi	r2,-3
 100c200:	308c703a 	and	r6,r6,r2
 100c204:	3d85883a 	add	r2,r7,r22
 100c208:	11000417 	ldw	r4,16(r2)
 100c20c:	d8801517 	ldw	r2,84(sp)
 100c210:	d9c00a17 	ldw	r7,40(sp)
 100c214:	1147883a 	add	r3,r2,r5
 100c218:	20800017 	ldw	r2,0(r4)
 100c21c:	d8c00015 	stw	r3,0(sp)
 100c220:	d8c01617 	ldw	r3,88(sp)
 100c224:	b80b883a 	mov	r5,r23
 100c228:	d8c00115 	stw	r3,4(sp)
 100c22c:	d8c01717 	ldw	r3,92(sp)
 100c230:	d8c00215 	stw	r3,8(sp)
 100c234:	d8c00404 	addi	r3,sp,16
 100c238:	d8c00315 	stw	r3,12(sp)
 100c23c:	10c00717 	ldw	r3,28(r2)
 100c240:	183ee83a 	callr	r3
 100c244:	100f883a 	mov	r7,r2
 100c248:	99000217 	ldw	r4,8(r19)
 100c24c:	d8800617 	ldw	r2,24(sp)
 100c250:	dc000717 	ldw	r16,28(sp)
 100c254:	2088b03a 	or	r4,r4,r2
 100c258:	00800184 	movi	r2,6
 100c25c:	99000215 	stw	r4,8(r19)
 100c260:	8080ac26 	beq	r16,r2,100c514 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e0>
 100c264:	00800084 	movi	r2,2
 100c268:	8080aa26 	beq	r16,r2,100c514 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e0>
 100c26c:	d9400903 	ldbu	r5,36(sp)
 100c270:	28005f1e 	bne	r5,zero,100c3f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2bc>
 100c274:	98c00017 	ldw	r3,0(r19)
 100c278:	180d883a 	mov	r6,r3
 100c27c:	18006b26 	beq	r3,zero,100c42c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
 100c280:	d8c00417 	ldw	r3,16(sp)
 100c284:	30c06126 	beq	r6,r3,100c40c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
 100c288:	30000126 	beq	r6,zero,100c290 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15c>
 100c28c:	1800071e 	bne	r3,zero,100c2ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x178>
 100c290:	3004c03a 	cmpne	r2,r6,zero
 100c294:	11c4703a 	and	r2,r2,r7
 100c298:	1000041e 	bne	r2,zero,100c2ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x178>
 100c29c:	1804c03a 	cmpne	r2,r3,zero
 100c2a0:	1144703a 	and	r2,r2,r5
 100c2a4:	1005003a 	cmpeq	r2,r2,zero
 100c2a8:	10001f1e 	bne	r2,zero,100c328 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f4>
 100c2ac:	008000c4 	movi	r2,3
 100c2b0:	9c800317 	ldw	r18,12(r19)
 100c2b4:	1100060e 	bge	r2,r4,100c2d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x19c>
 100c2b8:	2080004c 	andi	r2,r4,1
 100c2bc:	1005003a 	cmpeq	r2,r2,zero
 100c2c0:	10001d1e 	bne	r2,zero,100c338 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x204>
 100c2c4:	98800417 	ldw	r2,16(r19)
 100c2c8:	1080008c 	andi	r2,r2,2
 100c2cc:	10001a26 	beq	r2,zero,100c338 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x204>
 100c2d0:	9023883a 	mov	r17,r18
 100c2d4:	0480680e 	bge	zero,r18,100c478 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x344>
 100c2d8:	8029883a 	mov	r20,r16
 100c2dc:	04005e0e 	bge	zero,r16,100c458 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 100c2e0:	8d04f03a 	xor	r2,r17,r20
 100c2e4:	00c000c4 	movi	r3,3
 100c2e8:	18801c0e 	bge	r3,r2,100c35c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 100c2ec:	1d00070e 	bge	r3,r20,100c30c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d8>
 100c2f0:	d8c00417 	ldw	r3,16(sp)
 100c2f4:	d8800517 	ldw	r2,20(sp)
 100c2f8:	8025883a 	mov	r18,r16
 100c2fc:	98c00015 	stw	r3,0(r19)
 100c300:	98800115 	stw	r2,4(r19)
 100c304:	a023883a 	mov	r17,r20
 100c308:	d8000905 	stb	zero,36(sp)
 100c30c:	8880008c 	andi	r2,r17,2
 100c310:	9c800315 	stw	r18,12(r19)
 100c314:	1000881e 	bne	r2,zero,100c538 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x404>
 100c318:	8880004c 	andi	r2,r17,1
 100c31c:	1005003a 	cmpeq	r2,r2,zero
 100c320:	1000851e 	bne	r2,zero,100c538 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x404>
 100c324:	99000217 	ldw	r4,8(r19)
 100c328:	00800104 	movi	r2,4
 100c32c:	20bf9f1e 	bne	r4,r2,100c1ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 100c330:	d9000903 	ldbu	r4,36(sp)
 100c334:	00001b06 	br	100c3a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>
 100c338:	9000011e 	bne	r18,zero,100c340 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x20c>
 100c33c:	04800044 	movi	r18,1
 100c340:	8000371e 	bne	r16,zero,100c420 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2ec>
 100c344:	04000044 	movi	r16,1
 100c348:	9023883a 	mov	r17,r18
 100c34c:	8029883a 	mov	r20,r16
 100c350:	8d04f03a 	xor	r2,r17,r20
 100c354:	00c000c4 	movi	r3,3
 100c358:	18bfe416 	blt	r3,r2,100c2ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b8>
 100c35c:	8d04703a 	and	r2,r17,r20
 100c360:	18809e16 	blt	r3,r2,100c5dc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4a8>
 100c364:	99000217 	ldw	r4,8(r19)
 100c368:	00800044 	movi	r2,1
 100c36c:	d8800905 	stb	r2,36(sp)
 100c370:	98000015 	stw	zero,0(r19)
 100c374:	98800315 	stw	r2,12(r19)
 100c378:	003feb06 	br	100c328 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f4>
 100c37c:	9f000115 	stw	fp,4(r19)
 100c380:	d9801517 	ldw	r6,84(sp)
 100c384:	99800015 	stw	r6,0(r19)
 100c388:	b8006916 	blt	r23,zero,100c530 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
 100c38c:	d8c01717 	ldw	r3,92(sp)
 100c390:	35c5883a 	add	r2,r6,r23
 100c394:	18808626 	beq	r3,r2,100c5b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x47c>
 100c398:	00800044 	movi	r2,1
 100c39c:	0009883a 	mov	r4,zero
 100c3a0:	98800315 	stw	r2,12(r19)
 100c3a4:	2005883a 	mov	r2,r4
 100c3a8:	dfc01417 	ldw	ra,80(sp)
 100c3ac:	df001317 	ldw	fp,76(sp)
 100c3b0:	ddc01217 	ldw	r23,72(sp)
 100c3b4:	dd801117 	ldw	r22,68(sp)
 100c3b8:	dd401017 	ldw	r21,64(sp)
 100c3bc:	dd000f17 	ldw	r20,60(sp)
 100c3c0:	dcc00e17 	ldw	r19,56(sp)
 100c3c4:	dc800d17 	ldw	r18,52(sp)
 100c3c8:	dc400c17 	ldw	r17,48(sp)
 100c3cc:	dc000b17 	ldw	r16,44(sp)
 100c3d0:	dec01504 	addi	sp,sp,84
 100c3d4:	f800283a 	ret
 100c3d8:	d9801517 	ldw	r6,84(sp)
 100c3dc:	30800017 	ldw	r2,0(r6)
 100c3e0:	e1800054 	ori	r6,fp,1
 100c3e4:	1145883a 	add	r2,r2,r5
 100c3e8:	11400017 	ldw	r5,0(r2)
 100c3ec:	003f7f06 	br	100c1ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
 100c3f0:	99800017 	ldw	r6,0(r19)
 100c3f4:	303fa21e 	bne	r6,zero,100c280 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
 100c3f8:	d8c00417 	ldw	r3,16(sp)
 100c3fc:	003fa706 	br	100c29c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x168>
 100c400:	208000cc 	andi	r2,r4,3
 100c404:	103f6926 	beq	r2,zero,100c1ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 100c408:	003f7c06 	br	100c1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
 100c40c:	98800117 	ldw	r2,4(r19)
 100c410:	d8c00517 	ldw	r3,20(sp)
 100c414:	10c4b03a 	or	r2,r2,r3
 100c418:	98800115 	stw	r2,4(r19)
 100c41c:	003fc206 	br	100c328 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f4>
 100c420:	8029883a 	mov	r20,r16
 100c424:	9023883a 	mov	r17,r18
 100c428:	003fad06 	br	100c2e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 100c42c:	d8c00417 	ldw	r3,16(sp)
 100c430:	d8800517 	ldw	r2,20(sp)
 100c434:	98c00015 	stw	r3,0(r19)
 100c438:	98800115 	stw	r2,4(r19)
 100c43c:	18000426 	beq	r3,zero,100c450 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x31c>
 100c440:	20002b26 	beq	r4,zero,100c4f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 100c444:	b0800217 	ldw	r2,8(r22)
 100c448:	1080004c 	andi	r2,r2,1
 100c44c:	10006126 	beq	r2,zero,100c5d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4a0>
 100c450:	d9c00905 	stb	r7,36(sp)
 100c454:	003fb406 	br	100c328 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f4>
 100c458:	008000c4 	movi	r2,3
 100c45c:	14401c0e 	bge	r2,r17,100c4d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x39c>
 100c460:	8880004c 	andi	r2,r17,1
 100c464:	1005003a 	cmpeq	r2,r2,zero
 100c468:	10001626 	beq	r2,zero,100c4c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x390>
 100c46c:	04000044 	movi	r16,1
 100c470:	8029883a 	mov	r20,r16
 100c474:	003f9a06 	br	100c2e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 100c478:	008000c4 	movi	r2,3
 100c47c:	8029883a 	mov	r20,r16
 100c480:	1400090e 	bge	r2,r16,100c4a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x374>
 100c484:	8080004c 	andi	r2,r16,1
 100c488:	1005003a 	cmpeq	r2,r2,zero
 100c48c:	10000326 	beq	r2,zero,100c49c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x368>
 100c490:	04400044 	movi	r17,1
 100c494:	8825883a 	mov	r18,r17
 100c498:	003f9106 	br	100c2e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 100c49c:	b0800217 	ldw	r2,8(r22)
 100c4a0:	1080008c 	andi	r2,r2,2
 100c4a4:	103ffa26 	beq	r2,zero,100c490 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x35c>
 100c4a8:	b8003316 	blt	r23,zero,100c578 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x444>
 100c4ac:	d9001717 	ldw	r4,92(sp)
 100c4b0:	35c5883a 	add	r2,r6,r23
 100c4b4:	20804026 	beq	r4,r2,100c5b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x484>
 100c4b8:	04400044 	movi	r17,1
 100c4bc:	8825883a 	mov	r18,r17
 100c4c0:	003f8606 	br	100c2dc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a8>
 100c4c4:	b0800217 	ldw	r2,8(r22)
 100c4c8:	1080008c 	andi	r2,r2,2
 100c4cc:	103fe726 	beq	r2,zero,100c46c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x338>
 100c4d0:	d9800417 	ldw	r6,16(sp)
 100c4d4:	b8001a16 	blt	r23,zero,100c540 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40c>
 100c4d8:	35c5883a 	add	r2,r6,r23
 100c4dc:	d9801717 	ldw	r6,92(sp)
 100c4e0:	30bfe21e 	bne	r6,r2,100c46c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x338>
 100c4e4:	04000184 	movi	r16,6
 100c4e8:	8029883a 	mov	r20,r16
 100c4ec:	003f7c06 	br	100c2e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 100c4f0:	d9c00905 	stb	r7,36(sp)
 100c4f4:	003f2d06 	br	100c1ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 100c4f8:	d9001617 	ldw	r4,88(sp)
 100c4fc:	b0c00117 	ldw	r3,4(r22)
 100c500:	20800117 	ldw	r2,4(r4)
 100c504:	18bf241e 	bne	r3,r2,100c198 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 100c508:	0009883a 	mov	r4,zero
 100c50c:	9f000215 	stw	fp,8(r19)
 100c510:	003fa406 	br	100c3a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>
 100c514:	d8c00417 	ldw	r3,16(sp)
 100c518:	d8800517 	ldw	r2,20(sp)
 100c51c:	39003fcc 	andi	r4,r7,255
 100c520:	9c000315 	stw	r16,12(r19)
 100c524:	98c00015 	stw	r3,0(r19)
 100c528:	98800115 	stw	r2,4(r19)
 100c52c:	003f9d06 	br	100c3a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>
 100c530:	00bfff84 	movi	r2,-2
 100c534:	b8802326 	beq	r23,r2,100c5c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 100c538:	0009883a 	mov	r4,zero
 100c53c:	003f9906 	br	100c3a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>
 100c540:	00bfff84 	movi	r2,-2
 100c544:	b8bfc926 	beq	r23,r2,100c46c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x338>
 100c548:	d8c00a17 	ldw	r3,40(sp)
 100c54c:	d9001717 	ldw	r4,92(sp)
 100c550:	d9c01617 	ldw	r7,88(sp)
 100c554:	18800017 	ldw	r2,0(r3)
 100c558:	d9000015 	stw	r4,0(sp)
 100c55c:	d9000a17 	ldw	r4,40(sp)
 100c560:	10c00817 	ldw	r3,32(r2)
 100c564:	b80b883a 	mov	r5,r23
 100c568:	183ee83a 	callr	r3
 100c56c:	1021883a 	mov	r16,r2
 100c570:	1029883a 	mov	r20,r2
 100c574:	003f5a06 	br	100c2e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 100c578:	00bfff84 	movi	r2,-2
 100c57c:	b8bfce26 	beq	r23,r2,100c4b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x384>
 100c580:	d8c00a17 	ldw	r3,40(sp)
 100c584:	d9001717 	ldw	r4,92(sp)
 100c588:	d9c01617 	ldw	r7,88(sp)
 100c58c:	18800017 	ldw	r2,0(r3)
 100c590:	d9000015 	stw	r4,0(sp)
 100c594:	d9000a17 	ldw	r4,40(sp)
 100c598:	10c00817 	ldw	r3,32(r2)
 100c59c:	b80b883a 	mov	r5,r23
 100c5a0:	183ee83a 	callr	r3
 100c5a4:	1023883a 	mov	r17,r2
 100c5a8:	1025883a 	mov	r18,r2
 100c5ac:	003f4b06 	br	100c2dc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a8>
 100c5b0:	00800184 	movi	r2,6
 100c5b4:	003f7906 	br	100c39c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x268>
 100c5b8:	04400184 	movi	r17,6
 100c5bc:	8825883a 	mov	r18,r17
 100c5c0:	003f4606 	br	100c2dc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a8>
 100c5c4:	00800044 	movi	r2,1
 100c5c8:	0009883a 	mov	r4,zero
 100c5cc:	98800315 	stw	r2,12(r19)
 100c5d0:	003f7406 	br	100c3a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>
 100c5d4:	39003fcc 	andi	r4,r7,255
 100c5d8:	003f7206 	br	100c3a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>
 100c5dc:	00800084 	movi	r2,2
 100c5e0:	01000044 	movi	r4,1
 100c5e4:	98800315 	stw	r2,12(r19)
 100c5e8:	98000015 	stw	zero,0(r19)
 100c5ec:	003f6d06 	br	100c3a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>

0100c5f0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 100c5f0:	20c00017 	ldw	r3,0(r4)
 100c5f4:	defffa04 	addi	sp,sp,-24
 100c5f8:	dc000415 	stw	r16,16(sp)
 100c5fc:	1a000617 	ldw	r8,24(r3)
 100c600:	3021883a 	mov	r16,r6
 100c604:	31800017 	ldw	r6,0(r6)
 100c608:	00800404 	movi	r2,16
 100c60c:	dfc00515 	stw	ra,20(sp)
 100c610:	d8800215 	stw	r2,8(sp)
 100c614:	d8000015 	stw	zero,0(sp)
 100c618:	d8000115 	stw	zero,4(sp)
 100c61c:	d8000315 	stw	zero,12(sp)
 100c620:	d80f883a 	mov	r7,sp
 100c624:	403ee83a 	callr	r8
 100c628:	d8800117 	ldw	r2,4(sp)
 100c62c:	00c00184 	movi	r3,6
 100c630:	0009883a 	mov	r4,zero
 100c634:	1080018c 	andi	r2,r2,6
 100c638:	10c0031e 	bne	r2,r3,100c648 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
 100c63c:	d8800017 	ldw	r2,0(sp)
 100c640:	01000044 	movi	r4,1
 100c644:	80800015 	stw	r2,0(r16)
 100c648:	2005883a 	mov	r2,r4
 100c64c:	dfc00517 	ldw	ra,20(sp)
 100c650:	dc000417 	ldw	r16,16(sp)
 100c654:	dec00604 	addi	sp,sp,24
 100c658:	f800283a 	ret

0100c65c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
 100c65c:	d8800017 	ldw	r2,0(sp)
 100c660:	00c00184 	movi	r3,6
 100c664:	1180021e 	bne	r2,r6,100c670 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
 100c668:	1805883a 	mov	r2,r3
 100c66c:	f800283a 	ret
 100c670:	00c00044 	movi	r3,1
 100c674:	1805883a 	mov	r2,r3
 100c678:	f800283a 	ret

0100c67c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 100c67c:	defffe04 	addi	sp,sp,-8
 100c680:	008040b4 	movhi	r2,258
 100c684:	1099bf04 	addi	r2,r2,26364
 100c688:	dc400015 	stw	r17,0(sp)
 100c68c:	20800015 	stw	r2,0(r4)
 100c690:	2023883a 	mov	r17,r4
 100c694:	dfc00115 	stw	ra,4(sp)
 100c698:	100dbc80 	call	100dbc8 <_ZNSt9type_infoD2Ev>
 100c69c:	8809883a 	mov	r4,r17
 100c6a0:	dfc00117 	ldw	ra,4(sp)
 100c6a4:	dc400017 	ldw	r17,0(sp)
 100c6a8:	dec00204 	addi	sp,sp,8
 100c6ac:	100d8101 	jmpi	100d810 <_ZdlPv>

0100c6b0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 100c6b0:	008040b4 	movhi	r2,258
 100c6b4:	1099bf04 	addi	r2,r2,26364
 100c6b8:	20800015 	stw	r2,0(r4)
 100c6bc:	100dbc81 	jmpi	100dbc8 <_ZNSt9type_infoD2Ev>

0100c6c0 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
 100c6c0:	008040b4 	movhi	r2,258
 100c6c4:	1099bf04 	addi	r2,r2,26364
 100c6c8:	20800015 	stw	r2,0(r4)
 100c6cc:	100dbc81 	jmpi	100dbc8 <_ZNSt9type_infoD2Ev>

0100c6d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 100c6d0:	2811883a 	mov	r8,r5
 100c6d4:	20c00117 	ldw	r3,4(r4)
 100c6d8:	40800117 	ldw	r2,4(r8)
 100c6dc:	deffff04 	addi	sp,sp,-4
 100c6e0:	dfc00015 	stw	ra,0(sp)
 100c6e4:	200b883a 	mov	r5,r4
 100c6e8:	02400044 	movi	r9,1
 100c6ec:	18800426 	beq	r3,r2,100c700 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
 100c6f0:	008000c4 	movi	r2,3
 100c6f4:	4009883a 	mov	r4,r8
 100c6f8:	0013883a 	mov	r9,zero
 100c6fc:	11c0042e 	bgeu	r2,r7,100c710 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
 100c700:	4805883a 	mov	r2,r9
 100c704:	dfc00017 	ldw	ra,0(sp)
 100c708:	dec00104 	addi	sp,sp,4
 100c70c:	f800283a 	ret
 100c710:	40800017 	ldw	r2,0(r8)
 100c714:	10c00517 	ldw	r3,20(r2)
 100c718:	183ee83a 	callr	r3
 100c71c:	12403fcc 	andi	r9,r2,255
 100c720:	4805883a 	mov	r2,r9
 100c724:	dfc00017 	ldw	ra,0(sp)
 100c728:	dec00104 	addi	sp,sp,4
 100c72c:	f800283a 	ret

0100c730 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 100c730:	20c00117 	ldw	r3,4(r4)
 100c734:	28800117 	ldw	r2,4(r5)
 100c738:	0009883a 	mov	r4,zero
 100c73c:	1880061e 	bne	r3,r2,100c758 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
 100c740:	00800184 	movi	r2,6
 100c744:	38800115 	stw	r2,4(r7)
 100c748:	00800204 	movi	r2,8
 100c74c:	39800015 	stw	r6,0(r7)
 100c750:	38800315 	stw	r2,12(r7)
 100c754:	01000044 	movi	r4,1
 100c758:	2005883a 	mov	r2,r4
 100c75c:	f800283a 	ret

0100c760 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 100c760:	da000017 	ldw	r8,0(sp)
 100c764:	d8800217 	ldw	r2,8(sp)
 100c768:	d9400317 	ldw	r5,12(sp)
 100c76c:	40800926 	beq	r8,r2,100c794 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 100c770:	21000117 	ldw	r4,4(r4)
 100c774:	38800117 	ldw	r2,4(r7)
 100c778:	2080041e 	bne	r4,r2,100c78c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
 100c77c:	00800044 	movi	r2,1
 100c780:	28800315 	stw	r2,12(r5)
 100c784:	2a000015 	stw	r8,0(r5)
 100c788:	29800115 	stw	r6,4(r5)
 100c78c:	0005883a 	mov	r2,zero
 100c790:	f800283a 	ret
 100c794:	d8800117 	ldw	r2,4(sp)
 100c798:	21000117 	ldw	r4,4(r4)
 100c79c:	10c00117 	ldw	r3,4(r2)
 100c7a0:	20fff41e 	bne	r4,r3,100c774 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 100c7a4:	29800215 	stw	r6,8(r5)
 100c7a8:	003ff806 	br	100c78c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

0100c7ac <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 100c7ac:	20c00117 	ldw	r3,4(r4)
 100c7b0:	28800117 	ldw	r2,4(r5)
 100c7b4:	deffff04 	addi	sp,sp,-4
 100c7b8:	dfc00015 	stw	ra,0(sp)
 100c7bc:	02000044 	movi	r8,1
 100c7c0:	3819883a 	mov	r12,r7
 100c7c4:	18801526 	beq	r3,r2,100c81c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x70>
 100c7c8:	28800017 	ldw	r2,0(r5)
 100c7cc:	23400017 	ldw	r13,0(r4)
 100c7d0:	39c0004c 	andi	r7,r7,1
 100c7d4:	127fff17 	ldw	r9,-4(r2)
 100c7d8:	68ffff17 	ldw	r3,-4(r13)
 100c7dc:	380f003a 	cmpeq	r7,r7,zero
 100c7e0:	48800117 	ldw	r2,4(r9)
 100c7e4:	1a000117 	ldw	r8,4(r3)
 100c7e8:	4080101e 	bne	r8,r2,100c82c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 100c7ec:	38000f1e 	bne	r7,zero,100c82c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 100c7f0:	21c00217 	ldw	r7,8(r4)
 100c7f4:	28c00217 	ldw	r3,8(r5)
 100c7f8:	01c4303a 	nor	r2,zero,r7
 100c7fc:	10c4703a 	and	r2,r2,r3
 100c800:	39c0004c 	andi	r7,r7,1
 100c804:	1000091e 	bne	r2,zero,100c82c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 100c808:	38000d26 	beq	r7,zero,100c840 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x94>
 100c80c:	68c00617 	ldw	r3,24(r13)
 100c810:	600f883a 	mov	r7,r12
 100c814:	183ee83a 	callr	r3
 100c818:	12003fcc 	andi	r8,r2,255
 100c81c:	4005883a 	mov	r2,r8
 100c820:	dfc00017 	ldw	ra,0(sp)
 100c824:	dec00104 	addi	sp,sp,4
 100c828:	f800283a 	ret
 100c82c:	0011883a 	mov	r8,zero
 100c830:	4005883a 	mov	r2,r8
 100c834:	dfc00017 	ldw	ra,0(sp)
 100c838:	dec00104 	addi	sp,sp,4
 100c83c:	f800283a 	ret
 100c840:	00bfff84 	movi	r2,-2
 100c844:	68c00617 	ldw	r3,24(r13)
 100c848:	6098703a 	and	r12,r12,r2
 100c84c:	600f883a 	mov	r7,r12
 100c850:	183ee83a 	callr	r3
 100c854:	12003fcc 	andi	r8,r2,255
 100c858:	003ff006 	br	100c81c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x70>

0100c85c <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 100c85c:	defffe04 	addi	sp,sp,-8
 100c860:	008040b4 	movhi	r2,258
 100c864:	1099d604 	addi	r2,r2,26456
 100c868:	dc400015 	stw	r17,0(sp)
 100c86c:	20800015 	stw	r2,0(r4)
 100c870:	2023883a 	mov	r17,r4
 100c874:	dfc00115 	stw	ra,4(sp)
 100c878:	100dbc80 	call	100dbc8 <_ZNSt9type_infoD2Ev>
 100c87c:	8809883a 	mov	r4,r17
 100c880:	dfc00117 	ldw	ra,4(sp)
 100c884:	dc400017 	ldw	r17,0(sp)
 100c888:	dec00204 	addi	sp,sp,8
 100c88c:	100d8101 	jmpi	100d810 <_ZdlPv>

0100c890 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 100c890:	008040b4 	movhi	r2,258
 100c894:	1099d604 	addi	r2,r2,26456
 100c898:	20800015 	stw	r2,0(r4)
 100c89c:	100dbc81 	jmpi	100dbc8 <_ZNSt9type_infoD2Ev>

0100c8a0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>:
 100c8a0:	008040b4 	movhi	r2,258
 100c8a4:	1099d604 	addi	r2,r2,26456
 100c8a8:	20800015 	stw	r2,0(r4)
 100c8ac:	100dbc81 	jmpi	100dbc8 <_ZNSt9type_infoD2Ev>

0100c8b0 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 100c8b0:	21000317 	ldw	r4,12(r4)
 100c8b4:	29400317 	ldw	r5,12(r5)
 100c8b8:	deffff04 	addi	sp,sp,-4
 100c8bc:	20800017 	ldw	r2,0(r4)
 100c8c0:	dfc00015 	stw	ra,0(sp)
 100c8c4:	39c00084 	addi	r7,r7,2
 100c8c8:	10c00417 	ldw	r3,16(r2)
 100c8cc:	183ee83a 	callr	r3
 100c8d0:	10803fcc 	andi	r2,r2,255
 100c8d4:	dfc00017 	ldw	ra,0(sp)
 100c8d8:	dec00104 	addi	sp,sp,4
 100c8dc:	f800283a 	ret

0100c8e0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 100c8e0:	defffe04 	addi	sp,sp,-8
 100c8e4:	008040b4 	movhi	r2,258
 100c8e8:	1099eb04 	addi	r2,r2,26540
 100c8ec:	dc400015 	stw	r17,0(sp)
 100c8f0:	20800015 	stw	r2,0(r4)
 100c8f4:	2023883a 	mov	r17,r4
 100c8f8:	dfc00115 	stw	ra,4(sp)
 100c8fc:	100dbc80 	call	100dbc8 <_ZNSt9type_infoD2Ev>
 100c900:	8809883a 	mov	r4,r17
 100c904:	dfc00117 	ldw	ra,4(sp)
 100c908:	dc400017 	ldw	r17,0(sp)
 100c90c:	dec00204 	addi	sp,sp,8
 100c910:	100d8101 	jmpi	100d810 <_ZdlPv>

0100c914 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 100c914:	008040b4 	movhi	r2,258
 100c918:	1099eb04 	addi	r2,r2,26540
 100c91c:	20800015 	stw	r2,0(r4)
 100c920:	100dbc81 	jmpi	100dbc8 <_ZNSt9type_infoD2Ev>

0100c924 <_ZN10__cxxabiv123__fundamental_type_infoD2Ev>:
 100c924:	008040b4 	movhi	r2,258
 100c928:	1099eb04 	addi	r2,r2,26540
 100c92c:	20800015 	stw	r2,0(r4)
 100c930:	100dbc81 	jmpi	100dbc8 <_ZNSt9type_infoD2Ev>

0100c934 <_Z12read_uleb128PKhPj>:
 100c934:	000d883a 	mov	r6,zero
 100c938:	000f883a 	mov	r7,zero
 100c93c:	20c00007 	ldb	r3,0(r4)
 100c940:	21000044 	addi	r4,r4,1
 100c944:	18801fcc 	andi	r2,r3,127
 100c948:	1184983a 	sll	r2,r2,r6
 100c94c:	318001c4 	addi	r6,r6,7
 100c950:	388eb03a 	or	r7,r7,r2
 100c954:	183ff916 	blt	r3,zero,100c93c <_Z12read_uleb128PKhPj+0x8>
 100c958:	2005883a 	mov	r2,r4
 100c95c:	29c00015 	stw	r7,0(r5)
 100c960:	f800283a 	ret

0100c964 <_Z12read_sleb128PKhPi>:
 100c964:	000f883a 	mov	r7,zero
 100c968:	0011883a 	mov	r8,zero
 100c96c:	20c00007 	ldb	r3,0(r4)
 100c970:	21000044 	addi	r4,r4,1
 100c974:	19803fcc 	andi	r6,r3,255
 100c978:	30801fcc 	andi	r2,r6,127
 100c97c:	11c4983a 	sll	r2,r2,r7
 100c980:	39c001c4 	addi	r7,r7,7
 100c984:	4090b03a 	or	r8,r8,r2
 100c988:	183ff816 	blt	r3,zero,100c96c <_Z12read_sleb128PKhPi+0x8>
 100c98c:	008007c4 	movi	r2,31
 100c990:	11c00636 	bltu	r2,r7,100c9ac <_Z12read_sleb128PKhPi+0x48>
 100c994:	3080100c 	andi	r2,r6,64
 100c998:	10000426 	beq	r2,zero,100c9ac <_Z12read_sleb128PKhPi+0x48>
 100c99c:	00800044 	movi	r2,1
 100c9a0:	11c4983a 	sll	r2,r2,r7
 100c9a4:	0085c83a 	sub	r2,zero,r2
 100c9a8:	4090b03a 	or	r8,r8,r2
 100c9ac:	2005883a 	mov	r2,r4
 100c9b0:	2a000015 	stw	r8,0(r5)
 100c9b4:	f800283a 	ret

0100c9b8 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
 100c9b8:	28800017 	ldw	r2,0(r5)
 100c9bc:	defffb04 	addi	sp,sp,-20
 100c9c0:	30c00017 	ldw	r3,0(r6)
 100c9c4:	dc400215 	stw	r17,8(sp)
 100c9c8:	2823883a 	mov	r17,r5
 100c9cc:	11400217 	ldw	r5,8(r2)
 100c9d0:	dc800315 	stw	r18,12(sp)
 100c9d4:	dc000115 	stw	r16,4(sp)
 100c9d8:	dfc00415 	stw	ra,16(sp)
 100c9dc:	2021883a 	mov	r16,r4
 100c9e0:	d8c00015 	stw	r3,0(sp)
 100c9e4:	8809883a 	mov	r4,r17
 100c9e8:	3025883a 	mov	r18,r6
 100c9ec:	283ee83a 	callr	r5
 100c9f0:	10803fcc 	andi	r2,r2,255
 100c9f4:	880b883a 	mov	r5,r17
 100c9f8:	8009883a 	mov	r4,r16
 100c9fc:	d80d883a 	mov	r6,sp
 100ca00:	01c00044 	movi	r7,1
 100ca04:	10000326 	beq	r2,zero,100ca14 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
 100ca08:	d8800017 	ldw	r2,0(sp)
 100ca0c:	10c00017 	ldw	r3,0(r2)
 100ca10:	d8c00015 	stw	r3,0(sp)
 100ca14:	80800017 	ldw	r2,0(r16)
 100ca18:	10c00417 	ldw	r3,16(r2)
 100ca1c:	183ee83a 	callr	r3
 100ca20:	10803fcc 	andi	r2,r2,255
 100ca24:	0007883a 	mov	r3,zero
 100ca28:	10000326 	beq	r2,zero,100ca38 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
 100ca2c:	d8800017 	ldw	r2,0(sp)
 100ca30:	00c00044 	movi	r3,1
 100ca34:	90800015 	stw	r2,0(r18)
 100ca38:	1805883a 	mov	r2,r3
 100ca3c:	dfc00417 	ldw	ra,16(sp)
 100ca40:	dc800317 	ldw	r18,12(sp)
 100ca44:	dc400217 	ldw	r17,8(sp)
 100ca48:	dc000117 	ldw	r16,4(sp)
 100ca4c:	dec00504 	addi	sp,sp,20
 100ca50:	f800283a 	ret

0100ca54 <_Z28read_encoded_value_with_basehjPKhPj>:
 100ca54:	defff904 	addi	sp,sp,-28
 100ca58:	dc400215 	stw	r17,8(sp)
 100ca5c:	00801404 	movi	r2,80
 100ca60:	24403fcc 	andi	r17,r4,255
 100ca64:	dd000515 	stw	r20,20(sp)
 100ca68:	dcc00415 	stw	r19,16(sp)
 100ca6c:	dc800315 	stw	r18,12(sp)
 100ca70:	dc000115 	stw	r16,4(sp)
 100ca74:	dfc00615 	stw	ra,24(sp)
 100ca78:	2025883a 	mov	r18,r4
 100ca7c:	2829883a 	mov	r20,r5
 100ca80:	3021883a 	mov	r16,r6
 100ca84:	3827883a 	mov	r19,r7
 100ca88:	88801826 	beq	r17,r2,100caec <_Z28read_encoded_value_with_basehjPKhPj+0x98>
 100ca8c:	88c003cc 	andi	r3,r17,15
 100ca90:	00800304 	movi	r2,12
 100ca94:	10c0012e 	bgeu	r2,r3,100ca9c <_Z28read_encoded_value_with_basehjPKhPj+0x48>
 100ca98:	100e4740 	call	100e474 <abort>
 100ca9c:	18c5883a 	add	r2,r3,r3
 100caa0:	1085883a 	add	r2,r2,r2
 100caa4:	00c04074 	movhi	r3,257
 100caa8:	18f2ae04 	addi	r3,r3,-13640
 100caac:	10c5883a 	add	r2,r2,r3
 100cab0:	11000017 	ldw	r4,0(r2)
 100cab4:	2000683a 	jmp	r4
 100cab8:	0100cb28 	cmpgeui	r4,zero,812
 100cabc:	0100cc10 	cmplti	r4,zero,816
 100cac0:	0100cbbc 	xorhi	r4,zero,814
 100cac4:	0100cb28 	cmpgeui	r4,zero,812
 100cac8:	0100cb80 	call	100cb8 <OSCtxSw_SWITCH_PC+0x100c78>
 100cacc:	0100ca98 	cmpnei	r4,zero,810
 100cad0:	0100ca98 	cmpnei	r4,zero,810
 100cad4:	0100ca98 	cmpnei	r4,zero,810
 100cad8:	0100ca98 	cmpnei	r4,zero,810
 100cadc:	0100cbf8 	rdprs	r4,zero,815
 100cae0:	0100cbd4 	movui	r4,815
 100cae4:	0100cb28 	cmpgeui	r4,zero,812
 100cae8:	0100cb80 	call	100cb8 <OSCtxSw_SWITCH_PC+0x100c78>
 100caec:	308000c4 	addi	r2,r6,3
 100caf0:	00ffff04 	movi	r3,-4
 100caf4:	10c4703a 	and	r2,r2,r3
 100caf8:	11000017 	ldw	r4,0(r2)
 100cafc:	11400104 	addi	r5,r2,4
 100cb00:	2805883a 	mov	r2,r5
 100cb04:	99000015 	stw	r4,0(r19)
 100cb08:	dfc00617 	ldw	ra,24(sp)
 100cb0c:	dd000517 	ldw	r20,20(sp)
 100cb10:	dcc00417 	ldw	r19,16(sp)
 100cb14:	dc800317 	ldw	r18,12(sp)
 100cb18:	dc400217 	ldw	r17,8(sp)
 100cb1c:	dc000117 	ldw	r16,4(sp)
 100cb20:	dec00704 	addi	sp,sp,28
 100cb24:	f800283a 	ret
 100cb28:	30800043 	ldbu	r2,1(r6)
 100cb2c:	30c00083 	ldbu	r3,2(r6)
 100cb30:	310000c3 	ldbu	r4,3(r6)
 100cb34:	31400003 	ldbu	r5,0(r6)
 100cb38:	1004923a 	slli	r2,r2,8
 100cb3c:	1806943a 	slli	r3,r3,16
 100cb40:	2008963a 	slli	r4,r4,24
 100cb44:	1144b03a 	or	r2,r2,r5
 100cb48:	1886b03a 	or	r3,r3,r2
 100cb4c:	20c8b03a 	or	r4,r4,r3
 100cb50:	31400104 	addi	r5,r6,4
 100cb54:	203fea26 	beq	r4,zero,100cb00 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 100cb58:	88c01c0c 	andi	r3,r17,112
 100cb5c:	00800404 	movi	r2,16
 100cb60:	18801426 	beq	r3,r2,100cbb4 <_Z28read_encoded_value_with_basehjPKhPj+0x160>
 100cb64:	90803fcc 	andi	r2,r18,255
 100cb68:	1080201c 	xori	r2,r2,128
 100cb6c:	10bfe004 	addi	r2,r2,-128
 100cb70:	2509883a 	add	r4,r4,r20
 100cb74:	103fe20e 	bge	r2,zero,100cb00 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 100cb78:	21000017 	ldw	r4,0(r4)
 100cb7c:	003fe006 	br	100cb00 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 100cb80:	30800043 	ldbu	r2,1(r6)
 100cb84:	31800083 	ldbu	r6,2(r6)
 100cb88:	820000c3 	ldbu	r8,3(r16)
 100cb8c:	1004923a 	slli	r2,r2,8
 100cb90:	82400003 	ldbu	r9,0(r16)
 100cb94:	300c943a 	slli	r6,r6,16
 100cb98:	4010963a 	slli	r8,r8,24
 100cb9c:	1244b03a 	or	r2,r2,r9
 100cba0:	308cb03a 	or	r6,r6,r2
 100cba4:	4184b03a 	or	r2,r8,r6
 100cba8:	1009883a 	mov	r4,r2
 100cbac:	81400204 	addi	r5,r16,8
 100cbb0:	003fe806 	br	100cb54 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 100cbb4:	8029883a 	mov	r20,r16
 100cbb8:	003fea06 	br	100cb64 <_Z28read_encoded_value_with_basehjPKhPj+0x110>
 100cbbc:	30800043 	ldbu	r2,1(r6)
 100cbc0:	30c00003 	ldbu	r3,0(r6)
 100cbc4:	31400084 	addi	r5,r6,2
 100cbc8:	1004923a 	slli	r2,r2,8
 100cbcc:	10c8b03a 	or	r4,r2,r3
 100cbd0:	003fe006 	br	100cb54 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 100cbd4:	30800043 	ldbu	r2,1(r6)
 100cbd8:	30c00003 	ldbu	r3,0(r6)
 100cbdc:	31400084 	addi	r5,r6,2
 100cbe0:	1004923a 	slli	r2,r2,8
 100cbe4:	10c4b03a 	or	r2,r2,r3
 100cbe8:	113fffcc 	andi	r4,r2,65535
 100cbec:	2120001c 	xori	r4,r4,32768
 100cbf0:	21200004 	addi	r4,r4,-32768
 100cbf4:	003fd706 	br	100cb54 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 100cbf8:	3009883a 	mov	r4,r6
 100cbfc:	d80b883a 	mov	r5,sp
 100cc00:	100c9640 	call	100c964 <_Z12read_sleb128PKhPi>
 100cc04:	d9000017 	ldw	r4,0(sp)
 100cc08:	100b883a 	mov	r5,r2
 100cc0c:	003fd106 	br	100cb54 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 100cc10:	3009883a 	mov	r4,r6
 100cc14:	d80b883a 	mov	r5,sp
 100cc18:	100c9340 	call	100c934 <_Z12read_uleb128PKhPj>
 100cc1c:	d9000017 	ldw	r4,0(sp)
 100cc20:	100b883a 	mov	r5,r2
 100cc24:	003fcb06 	br	100cb54 <_Z28read_encoded_value_with_basehjPKhPj+0x100>

0100cc28 <_Z21base_of_encoded_valuehP15_Unwind_Context>:
 100cc28:	deffff04 	addi	sp,sp,-4
 100cc2c:	21003fcc 	andi	r4,r4,255
 100cc30:	00803fc4 	movi	r2,255
 100cc34:	dfc00015 	stw	ra,0(sp)
 100cc38:	20800c26 	beq	r4,r2,100cc6c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 100cc3c:	21001c0c 	andi	r4,r4,112
 100cc40:	00800804 	movi	r2,32
 100cc44:	20800d26 	beq	r4,r2,100cc7c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
 100cc48:	1100070e 	bge	r2,r4,100cc68 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
 100cc4c:	00801004 	movi	r2,64
 100cc50:	20801126 	beq	r4,r2,100cc98 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
 100cc54:	00801404 	movi	r2,80
 100cc58:	20800426 	beq	r4,r2,100cc6c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 100cc5c:	00800c04 	movi	r2,48
 100cc60:	20801126 	beq	r4,r2,100cca8 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
 100cc64:	100e4740 	call	100e474 <abort>
 100cc68:	2000081e 	bne	r4,zero,100cc8c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
 100cc6c:	0005883a 	mov	r2,zero
 100cc70:	dfc00017 	ldw	ra,0(sp)
 100cc74:	dec00104 	addi	sp,sp,4
 100cc78:	f800283a 	ret
 100cc7c:	2809883a 	mov	r4,r5
 100cc80:	dfc00017 	ldw	ra,0(sp)
 100cc84:	dec00104 	addi	sp,sp,4
 100cc88:	100dfe41 	jmpi	100dfe4 <_Unwind_GetTextRelBase>
 100cc8c:	00800404 	movi	r2,16
 100cc90:	20bff626 	beq	r4,r2,100cc6c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 100cc94:	100e4740 	call	100e474 <abort>
 100cc98:	2809883a 	mov	r4,r5
 100cc9c:	dfc00017 	ldw	ra,0(sp)
 100cca0:	dec00104 	addi	sp,sp,4
 100cca4:	100dfcc1 	jmpi	100dfcc <_Unwind_GetRegionStart>
 100cca8:	2809883a 	mov	r4,r5
 100ccac:	dfc00017 	ldw	ra,0(sp)
 100ccb0:	dec00104 	addi	sp,sp,4
 100ccb4:	100dfdc1 	jmpi	100dfdc <_Unwind_GetDataRelBase>

0100ccb8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 100ccb8:	defffa04 	addi	sp,sp,-24
 100ccbc:	dc800415 	stw	r18,16(sp)
 100ccc0:	dc400315 	stw	r17,12(sp)
 100ccc4:	dc000215 	stw	r16,8(sp)
 100ccc8:	dfc00515 	stw	ra,20(sp)
 100cccc:	2021883a 	mov	r16,r4
 100ccd0:	000f883a 	mov	r7,zero
 100ccd4:	3023883a 	mov	r17,r6
 100ccd8:	2825883a 	mov	r18,r5
 100ccdc:	20000226 	beq	r4,zero,100cce8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 100cce0:	100dfcc0 	call	100dfcc <_Unwind_GetRegionStart>
 100cce4:	100f883a 	mov	r7,r2
 100cce8:	89c00015 	stw	r7,0(r17)
 100ccec:	90c00003 	ldbu	r3,0(r18)
 100ccf0:	800b883a 	mov	r5,r16
 100ccf4:	00803fc4 	movi	r2,255
 100ccf8:	1c003fcc 	andi	r16,r3,255
 100ccfc:	91800044 	addi	r6,r18,1
 100cd00:	8009883a 	mov	r4,r16
 100cd04:	18802226 	beq	r3,r2,100cd90 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
 100cd08:	d9800115 	stw	r6,4(sp)
 100cd0c:	100cc280 	call	100cc28 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 100cd10:	d9800117 	ldw	r6,4(sp)
 100cd14:	8009883a 	mov	r4,r16
 100cd18:	100b883a 	mov	r5,r2
 100cd1c:	89c00104 	addi	r7,r17,4
 100cd20:	100ca540 	call	100ca54 <_Z28read_encoded_value_with_basehjPKhPj>
 100cd24:	100d883a 	mov	r6,r2
 100cd28:	30800003 	ldbu	r2,0(r6)
 100cd2c:	31c00044 	addi	r7,r6,1
 100cd30:	00c03fc4 	movi	r3,255
 100cd34:	d80b883a 	mov	r5,sp
 100cd38:	3809883a 	mov	r4,r7
 100cd3c:	88800505 	stb	r2,20(r17)
 100cd40:	10c01b26 	beq	r2,r3,100cdb0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
 100cd44:	100c9340 	call	100c934 <_Z12read_uleb128PKhPj>
 100cd48:	100f883a 	mov	r7,r2
 100cd4c:	d8800017 	ldw	r2,0(sp)
 100cd50:	3885883a 	add	r2,r7,r2
 100cd54:	88800315 	stw	r2,12(r17)
 100cd58:	38800003 	ldbu	r2,0(r7)
 100cd5c:	39000044 	addi	r4,r7,1
 100cd60:	d80b883a 	mov	r5,sp
 100cd64:	88800545 	stb	r2,21(r17)
 100cd68:	100c9340 	call	100c934 <_Z12read_uleb128PKhPj>
 100cd6c:	d8c00017 	ldw	r3,0(sp)
 100cd70:	10c9883a 	add	r4,r2,r3
 100cd74:	89000415 	stw	r4,16(r17)
 100cd78:	dfc00517 	ldw	ra,20(sp)
 100cd7c:	dc800417 	ldw	r18,16(sp)
 100cd80:	dc400317 	ldw	r17,12(sp)
 100cd84:	dc000217 	ldw	r16,8(sp)
 100cd88:	dec00604 	addi	sp,sp,24
 100cd8c:	f800283a 	ret
 100cd90:	89c00115 	stw	r7,4(r17)
 100cd94:	30800003 	ldbu	r2,0(r6)
 100cd98:	31c00044 	addi	r7,r6,1
 100cd9c:	00c03fc4 	movi	r3,255
 100cda0:	d80b883a 	mov	r5,sp
 100cda4:	3809883a 	mov	r4,r7
 100cda8:	88800505 	stb	r2,20(r17)
 100cdac:	10ffe51e 	bne	r2,r3,100cd44 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
 100cdb0:	88000315 	stw	zero,12(r17)
 100cdb4:	003fe806 	br	100cd58 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

0100cdb8 <_Z15get_ttype_entryP16lsda_header_infoj>:
 100cdb8:	defffe04 	addi	sp,sp,-8
 100cdbc:	dfc00115 	stw	ra,4(sp)
 100cdc0:	21c00503 	ldbu	r7,20(r4)
 100cdc4:	00803fc4 	movi	r2,255
 100cdc8:	38801a26 	beq	r7,r2,100ce34 <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
 100cdcc:	38c001cc 	andi	r3,r7,7
 100cdd0:	00800084 	movi	r2,2
 100cdd4:	18801326 	beq	r3,r2,100ce24 <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
 100cdd8:	10c0050e 	bge	r2,r3,100cdf0 <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
 100cddc:	008000c4 	movi	r2,3
 100cde0:	18800426 	beq	r3,r2,100cdf4 <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
 100cde4:	00800104 	movi	r2,4
 100cde8:	18801026 	beq	r3,r2,100ce2c <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
 100cdec:	100e4740 	call	100e474 <abort>
 100cdf0:	183ffe1e 	bne	r3,zero,100cdec <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
 100cdf4:	2945883a 	add	r2,r5,r5
 100cdf8:	1085883a 	add	r2,r2,r2
 100cdfc:	21800317 	ldw	r6,12(r4)
 100ce00:	21400217 	ldw	r5,8(r4)
 100ce04:	3809883a 	mov	r4,r7
 100ce08:	308dc83a 	sub	r6,r6,r2
 100ce0c:	d80f883a 	mov	r7,sp
 100ce10:	100ca540 	call	100ca54 <_Z28read_encoded_value_with_basehjPKhPj>
 100ce14:	d8800017 	ldw	r2,0(sp)
 100ce18:	dfc00117 	ldw	ra,4(sp)
 100ce1c:	dec00204 	addi	sp,sp,8
 100ce20:	f800283a 	ret
 100ce24:	2945883a 	add	r2,r5,r5
 100ce28:	003ff406 	br	100cdfc <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 100ce2c:	280490fa 	slli	r2,r5,3
 100ce30:	003ff206 	br	100cdfc <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 100ce34:	0005883a 	mov	r2,zero
 100ce38:	003ff006 	br	100cdfc <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

0100ce3c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
 100ce3c:	20800317 	ldw	r2,12(r4)
 100ce40:	defffa04 	addi	sp,sp,-24
 100ce44:	dc800415 	stw	r18,16(sp)
 100ce48:	11c5c83a 	sub	r2,r2,r7
 100ce4c:	dc400315 	stw	r17,12(sp)
 100ce50:	dc000215 	stw	r16,8(sp)
 100ce54:	dfc00515 	stw	ra,20(sp)
 100ce58:	2023883a 	mov	r17,r4
 100ce5c:	d9800115 	stw	r6,4(sp)
 100ce60:	2825883a 	mov	r18,r5
 100ce64:	143fffc4 	addi	r16,r2,-1
 100ce68:	8009883a 	mov	r4,r16
 100ce6c:	d80b883a 	mov	r5,sp
 100ce70:	100c9340 	call	100c934 <_Z12read_uleb128PKhPj>
 100ce74:	1021883a 	mov	r16,r2
 100ce78:	d8800017 	ldw	r2,0(sp)
 100ce7c:	8809883a 	mov	r4,r17
 100ce80:	100b883a 	mov	r5,r2
 100ce84:	10000826 	beq	r2,zero,100cea8 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
 100ce88:	100cdb80 	call	100cdb8 <_Z15get_ttype_entryP16lsda_header_infoj>
 100ce8c:	1009883a 	mov	r4,r2
 100ce90:	900b883a 	mov	r5,r18
 100ce94:	d9800104 	addi	r6,sp,4
 100ce98:	100c9b80 	call	100c9b8 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 100ce9c:	10803fcc 	andi	r2,r2,255
 100cea0:	103ff126 	beq	r2,zero,100ce68 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
 100cea4:	00800044 	movi	r2,1
 100cea8:	dfc00517 	ldw	ra,20(sp)
 100ceac:	dc800417 	ldw	r18,16(sp)
 100ceb0:	dc400317 	ldw	r17,12(sp)
 100ceb4:	dc000217 	ldw	r16,8(sp)
 100ceb8:	dec00604 	addi	sp,sp,24
 100cebc:	f800283a 	ret

0100cec0 <__cxa_call_unexpected>:
 100cec0:	deffe204 	addi	sp,sp,-120
 100cec4:	00804074 	movhi	r2,257
 100cec8:	10b41004 	addi	r2,r2,-12224
 100cecc:	00c040b4 	movhi	r3,258
 100ced0:	18d6a904 	addi	r3,r3,23204
 100ced4:	d8800c15 	stw	r2,48(sp)
 100ced8:	d9001815 	stw	r4,96(sp)
 100cedc:	00804074 	movhi	r2,257
 100cee0:	10b3d204 	addi	r2,r2,-12472
 100cee4:	d9000604 	addi	r4,sp,24
 100cee8:	d8c00d15 	stw	r3,52(sp)
 100ceec:	dfc01d15 	stw	ra,116(sp)
 100cef0:	d8800f15 	stw	r2,60(sp)
 100cef4:	df001c15 	stw	fp,112(sp)
 100cef8:	ddc01b15 	stw	r23,108(sp)
 100cefc:	dec00e15 	stw	sp,56(sp)
 100cf00:	dec01015 	stw	sp,64(sp)
 100cf04:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100cf08:	d9001817 	ldw	r4,96(sp)
 100cf0c:	100d6f80 	call	100d6f8 <__cxa_begin_catch>
 100cf10:	d8801817 	ldw	r2,96(sp)
 100cf14:	10fff504 	addi	r3,r2,-44
 100cf18:	18800917 	ldw	r2,36(r3)
 100cf1c:	19400617 	ldw	r5,24(r3)
 100cf20:	19000217 	ldw	r4,8(r3)
 100cf24:	d8800215 	stw	r2,8(sp)
 100cf28:	18800817 	ldw	r2,32(r3)
 100cf2c:	18c00317 	ldw	r3,12(r3)
 100cf30:	d9401615 	stw	r5,88(sp)
 100cf34:	d8801715 	stw	r2,92(sp)
 100cf38:	00800084 	movi	r2,2
 100cf3c:	d8c01515 	stw	r3,84(sp)
 100cf40:	d8800715 	stw	r2,28(sp)
 100cf44:	100d6040 	call	100d604 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 100cf48:	d8800717 	ldw	r2,28(sp)
 100cf4c:	d8c00817 	ldw	r3,32(sp)
 100cf50:	d8801a15 	stw	r2,104(sp)
 100cf54:	d9401a17 	ldw	r5,104(sp)
 100cf58:	00800044 	movi	r2,1
 100cf5c:	d8c01915 	stw	r3,100(sp)
 100cf60:	28800826 	beq	r5,r2,100cf84 <__cxa_call_unexpected+0xc4>
 100cf64:	d8000715 	stw	zero,28(sp)
 100cf68:	100d6540 	call	100d654 <__cxa_end_catch>
 100cf6c:	d8000715 	stw	zero,28(sp)
 100cf70:	100d6540 	call	100d654 <__cxa_end_catch>
 100cf74:	d9001917 	ldw	r4,100(sp)
 100cf78:	00bfffc4 	movi	r2,-1
 100cf7c:	d8800715 	stw	r2,28(sp)
 100cf80:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100cf84:	d9001917 	ldw	r4,100(sp)
 100cf88:	100d6f80 	call	100d6f8 <__cxa_begin_catch>
 100cf8c:	100dee40 	call	100dee4 <__cxa_get_globals_fast>
 100cf90:	10800017 	ldw	r2,0(r2)
 100cf94:	d8c01a17 	ldw	r3,104(sp)
 100cf98:	0009883a 	mov	r4,zero
 100cf9c:	11401004 	addi	r5,r2,64
 100cfa0:	d9401315 	stw	r5,76(sp)
 100cfa4:	d8801415 	stw	r2,80(sp)
 100cfa8:	d8c00715 	stw	r3,28(sp)
 100cfac:	d9401717 	ldw	r5,92(sp)
 100cfb0:	d80d883a 	mov	r6,sp
 100cfb4:	100ccb80 	call	100ccb8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 100cfb8:	d8801417 	ldw	r2,80(sp)
 100cfbc:	d809883a 	mov	r4,sp
 100cfc0:	d9801317 	ldw	r6,76(sp)
 100cfc4:	11400017 	ldw	r5,0(r2)
 100cfc8:	d9c01617 	ldw	r7,88(sp)
 100cfcc:	100ce3c0 	call	100ce3c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 100cfd0:	10803fcc 	andi	r2,r2,255
 100cfd4:	1000151e 	bne	r2,zero,100d02c <__cxa_call_unexpected+0x16c>
 100cfd8:	d8c01a17 	ldw	r3,104(sp)
 100cfdc:	d809883a 	mov	r4,sp
 100cfe0:	014040b4 	movhi	r5,258
 100cfe4:	29597604 	addi	r5,r5,26072
 100cfe8:	d8c00715 	stw	r3,28(sp)
 100cfec:	000d883a 	mov	r6,zero
 100cff0:	d9c01617 	ldw	r7,88(sp)
 100cff4:	100ce3c0 	call	100ce3c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 100cff8:	10803fcc 	andi	r2,r2,255
 100cffc:	10000c26 	beq	r2,zero,100d030 <__cxa_call_unexpected+0x170>
 100d000:	01000104 	movi	r4,4
 100d004:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 100d008:	1009883a 	mov	r4,r2
 100d00c:	008040b4 	movhi	r2,258
 100d010:	10996904 	addi	r2,r2,26020
 100d014:	20800015 	stw	r2,0(r4)
 100d018:	014040b4 	movhi	r5,258
 100d01c:	29597604 	addi	r5,r5,26072
 100d020:	01804074 	movhi	r6,257
 100d024:	31af0904 	addi	r6,r6,-17372
 100d028:	100d8900 	call	100d890 <__cxa_throw>
 100d02c:	100d81c0 	call	100d81c <__cxa_rethrow>
 100d030:	d9401a17 	ldw	r5,104(sp)
 100d034:	d9001517 	ldw	r4,84(sp)
 100d038:	d9400715 	stw	r5,28(sp)
 100d03c:	100d5480 	call	100d548 <_ZN10__cxxabiv111__terminateEPFvvE>

0100d040 <__gxx_personality_sj0>:
 100d040:	deffd304 	addi	sp,sp,-180
 100d044:	00804074 	movhi	r2,257
 100d048:	10b53704 	addi	r2,r2,-11044
 100d04c:	00c040b4 	movhi	r3,258
 100d050:	18d6ad04 	addi	r3,r3,23220
 100d054:	d8801315 	stw	r2,76(sp)
 100d058:	d9002315 	stw	r4,140(sp)
 100d05c:	00804074 	movhi	r2,257
 100d060:	10b41004 	addi	r2,r2,-12224
 100d064:	d9000a04 	addi	r4,sp,40
 100d068:	d8801015 	stw	r2,64(sp)
 100d06c:	d8c01115 	stw	r3,68(sp)
 100d070:	dfc02c15 	stw	ra,176(sp)
 100d074:	df002b15 	stw	fp,172(sp)
 100d078:	ddc02a15 	stw	r23,168(sp)
 100d07c:	dec01215 	stw	sp,72(sp)
 100d080:	dec01415 	stw	sp,80(sp)
 100d084:	d9802515 	stw	r6,148(sp)
 100d088:	d9402415 	stw	r5,144(sp)
 100d08c:	d9c02615 	stw	r7,152(sp)
 100d090:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100d094:	d8c02317 	ldw	r3,140(sp)
 100d098:	00800044 	movi	r2,1
 100d09c:	18800a26 	beq	r3,r2,100d0c8 <__gxx_personality_sj0+0x88>
 100d0a0:	010000c4 	movi	r4,3
 100d0a4:	d9002215 	stw	r4,136(sp)
 100d0a8:	d9000a04 	addi	r4,sp,40
 100d0ac:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100d0b0:	d8802217 	ldw	r2,136(sp)
 100d0b4:	dfc02c17 	ldw	ra,176(sp)
 100d0b8:	df002b17 	ldw	fp,172(sp)
 100d0bc:	ddc02a17 	ldw	r23,168(sp)
 100d0c0:	dec02d04 	addi	sp,sp,180
 100d0c4:	f800283a 	ret
 100d0c8:	d9402d17 	ldw	r5,180(sp)
 100d0cc:	d9002517 	ldw	r4,148(sp)
 100d0d0:	0007883a 	mov	r3,zero
 100d0d4:	28800504 	addi	r2,r5,20
 100d0d8:	d8800015 	stw	r2,0(sp)
 100d0dc:	28bff504 	addi	r2,r5,-44
 100d0e0:	d8801a15 	stw	r2,104(sp)
 100d0e4:	0090caf4 	movhi	r2,17195
 100d0e8:	108ac004 	addi	r2,r2,11008
 100d0ec:	2080ad26 	beq	r4,r2,100d3a4 <__gxx_personality_sj0+0x364>
 100d0f0:	d8c02105 	stb	r3,132(sp)
 100d0f4:	d8c02417 	ldw	r3,144(sp)
 100d0f8:	00800184 	movi	r2,6
 100d0fc:	1880281e 	bne	r3,r2,100d1a0 <__gxx_personality_sj0+0x160>
 100d100:	d8802103 	ldbu	r2,132(sp)
 100d104:	10002626 	beq	r2,zero,100d1a0 <__gxx_personality_sj0+0x160>
 100d108:	d9001a17 	ldw	r4,104(sp)
 100d10c:	d9401a17 	ldw	r5,104(sp)
 100d110:	d8801a17 	ldw	r2,104(sp)
 100d114:	21000917 	ldw	r4,36(r4)
 100d118:	29400617 	ldw	r5,24(r5)
 100d11c:	10800817 	ldw	r2,32(r2)
 100d120:	d9001d15 	stw	r4,116(sp)
 100d124:	d9401b15 	stw	r5,108(sp)
 100d128:	d8802015 	stw	r2,128(sp)
 100d12c:	2000ad1e 	bne	r4,zero,100d3e4 <__gxx_personality_sj0+0x3a4>
 100d130:	01000044 	movi	r4,1
 100d134:	00800044 	movi	r2,1
 100d138:	2080e126 	beq	r4,r2,100d4c0 <__gxx_personality_sj0+0x480>
 100d13c:	d8801b17 	ldw	r2,108(sp)
 100d140:	1000d316 	blt	r2,zero,100d490 <__gxx_personality_sj0+0x450>
 100d144:	d9802d17 	ldw	r6,180(sp)
 100d148:	d9002e17 	ldw	r4,184(sp)
 100d14c:	00bfffc4 	movi	r2,-1
 100d150:	000b883a 	mov	r5,zero
 100d154:	d8800b15 	stw	r2,44(sp)
 100d158:	100df740 	call	100df74 <_Unwind_SetGR>
 100d15c:	d9801b17 	ldw	r6,108(sp)
 100d160:	d9002e17 	ldw	r4,184(sp)
 100d164:	01400044 	movi	r5,1
 100d168:	100df740 	call	100df74 <_Unwind_SetGR>
 100d16c:	d9002e17 	ldw	r4,184(sp)
 100d170:	d9401d17 	ldw	r5,116(sp)
 100d174:	100dfb00 	call	100dfb0 <_Unwind_SetIP>
 100d178:	010001c4 	movi	r4,7
 100d17c:	d9002215 	stw	r4,136(sp)
 100d180:	d9000a04 	addi	r4,sp,40
 100d184:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100d188:	d8802217 	ldw	r2,136(sp)
 100d18c:	dfc02c17 	ldw	ra,176(sp)
 100d190:	df002b17 	ldw	fp,172(sp)
 100d194:	ddc02a17 	ldw	r23,168(sp)
 100d198:	dec02d04 	addi	sp,sp,180
 100d19c:	f800283a 	ret
 100d1a0:	d9002e17 	ldw	r4,184(sp)
 100d1a4:	00ffffc4 	movi	r3,-1
 100d1a8:	d8c00b15 	stw	r3,44(sp)
 100d1ac:	100dfc00 	call	100dfc0 <_Unwind_GetLanguageSpecificData>
 100d1b0:	10007226 	beq	r2,zero,100d37c <__gxx_personality_sj0+0x33c>
 100d1b4:	d9002e17 	ldw	r4,184(sp)
 100d1b8:	d9800404 	addi	r6,sp,16
 100d1bc:	100b883a 	mov	r5,r2
 100d1c0:	d8802015 	stw	r2,128(sp)
 100d1c4:	100ccb80 	call	100ccb8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 100d1c8:	d9000903 	ldbu	r4,36(sp)
 100d1cc:	d9402e17 	ldw	r5,184(sp)
 100d1d0:	d8801e15 	stw	r2,120(sp)
 100d1d4:	100cc280 	call	100cc28 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 100d1d8:	d9002e17 	ldw	r4,184(sp)
 100d1dc:	d8800615 	stw	r2,24(sp)
 100d1e0:	100df8c0 	call	100df8c <_Unwind_GetIP>
 100d1e4:	10bfffc4 	addi	r2,r2,-1
 100d1e8:	d8801c15 	stw	r2,112(sp)
 100d1ec:	10006316 	blt	r2,zero,100d37c <__gxx_personality_sj0+0x33c>
 100d1f0:	10001b1e 	bne	r2,zero,100d260 <__gxx_personality_sj0+0x220>
 100d1f4:	01000044 	movi	r4,1
 100d1f8:	d8001f15 	stw	zero,124(sp)
 100d1fc:	d8001d15 	stw	zero,116(sp)
 100d200:	d8001b15 	stw	zero,108(sp)
 100d204:	d9402417 	ldw	r5,144(sp)
 100d208:	00c00044 	movi	r3,1
 100d20c:	28c4703a 	and	r2,r5,r3
 100d210:	1005003a 	cmpeq	r2,r2,zero
 100d214:	10006a1e 	bne	r2,zero,100d3c0 <__gxx_personality_sj0+0x380>
 100d218:	00800084 	movi	r2,2
 100d21c:	20805726 	beq	r4,r2,100d37c <__gxx_personality_sj0+0x33c>
 100d220:	d8802103 	ldbu	r2,132(sp)
 100d224:	10008626 	beq	r2,zero,100d440 <__gxx_personality_sj0+0x400>
 100d228:	d9001a17 	ldw	r4,104(sp)
 100d22c:	d9401d17 	ldw	r5,116(sp)
 100d230:	d8801b17 	ldw	r2,108(sp)
 100d234:	00c00184 	movi	r3,6
 100d238:	d8c02215 	stw	r3,136(sp)
 100d23c:	21400915 	stw	r5,36(r4)
 100d240:	20800615 	stw	r2,24(r4)
 100d244:	d8c01f17 	ldw	r3,124(sp)
 100d248:	d9402017 	ldw	r5,128(sp)
 100d24c:	d8800017 	ldw	r2,0(sp)
 100d250:	20c00715 	stw	r3,28(r4)
 100d254:	21400815 	stw	r5,32(r4)
 100d258:	20800a15 	stw	r2,40(r4)
 100d25c:	003f9206 	br	100d0a8 <__gxx_personality_sj0+0x68>
 100d260:	d9001e17 	ldw	r4,120(sp)
 100d264:	d9400204 	addi	r5,sp,8
 100d268:	100c9340 	call	100c934 <_Z12read_uleb128PKhPj>
 100d26c:	d9401c17 	ldw	r5,112(sp)
 100d270:	1009883a 	mov	r4,r2
 100d274:	297fffc4 	addi	r5,r5,-1
 100d278:	d9401c15 	stw	r5,112(sp)
 100d27c:	d9400104 	addi	r5,sp,4
 100d280:	100c9340 	call	100c934 <_Z12read_uleb128PKhPj>
 100d284:	d8801e15 	stw	r2,120(sp)
 100d288:	d8801c17 	ldw	r2,112(sp)
 100d28c:	103ff41e 	bne	r2,zero,100d260 <__gxx_personality_sj0+0x220>
 100d290:	d8800217 	ldw	r2,8(sp)
 100d294:	d8c00117 	ldw	r3,4(sp)
 100d298:	01000044 	movi	r4,1
 100d29c:	1105883a 	add	r2,r2,r4
 100d2a0:	d8801d15 	stw	r2,116(sp)
 100d2a4:	1800541e 	bne	r3,zero,100d3f8 <__gxx_personality_sj0+0x3b8>
 100d2a8:	d8001f15 	stw	zero,124(sp)
 100d2ac:	d8c01d17 	ldw	r3,116(sp)
 100d2b0:	18003226 	beq	r3,zero,100d37c <__gxx_personality_sj0+0x33c>
 100d2b4:	d9001f17 	ldw	r4,124(sp)
 100d2b8:	20007226 	beq	r4,zero,100d484 <__gxx_personality_sj0+0x444>
 100d2bc:	d9402417 	ldw	r5,144(sp)
 100d2c0:	2880020c 	andi	r2,r5,8
 100d2c4:	10006a1e 	bne	r2,zero,100d470 <__gxx_personality_sj0+0x430>
 100d2c8:	d8802103 	ldbu	r2,132(sp)
 100d2cc:	10006826 	beq	r2,zero,100d470 <__gxx_personality_sj0+0x430>
 100d2d0:	d8801a17 	ldw	r2,104(sp)
 100d2d4:	10800017 	ldw	r2,0(r2)
 100d2d8:	d8801915 	stw	r2,100(sp)
 100d2dc:	d8c01917 	ldw	r3,100(sp)
 100d2e0:	d8001805 	stb	zero,96(sp)
 100d2e4:	1807003a 	cmpeq	r3,r3,zero
 100d2e8:	d8c02715 	stw	r3,156(sp)
 100d2ec:	00000706 	br	100d30c <__gxx_personality_sj0+0x2cc>
 100d2f0:	01000044 	movi	r4,1
 100d2f4:	d9001805 	stb	r4,96(sp)
 100d2f8:	d8800217 	ldw	r2,8(sp)
 100d2fc:	10005e26 	beq	r2,zero,100d478 <__gxx_personality_sj0+0x438>
 100d300:	d8c01717 	ldw	r3,92(sp)
 100d304:	1885883a 	add	r2,r3,r2
 100d308:	d8801f15 	stw	r2,124(sp)
 100d30c:	d9001f17 	ldw	r4,124(sp)
 100d310:	d9400104 	addi	r5,sp,4
 100d314:	100c9640 	call	100c964 <_Z12read_sleb128PKhPi>
 100d318:	1009883a 	mov	r4,r2
 100d31c:	d9400204 	addi	r5,sp,8
 100d320:	d8801715 	stw	r2,92(sp)
 100d324:	100c9640 	call	100c964 <_Z12read_sleb128PKhPi>
 100d328:	d8800117 	ldw	r2,4(sp)
 100d32c:	103ff026 	beq	r2,zero,100d2f0 <__gxx_personality_sj0+0x2b0>
 100d330:	0080360e 	bge	zero,r2,100d40c <__gxx_personality_sj0+0x3cc>
 100d334:	017fffc4 	movi	r5,-1
 100d338:	d9400b15 	stw	r5,44(sp)
 100d33c:	d9000404 	addi	r4,sp,16
 100d340:	100b883a 	mov	r5,r2
 100d344:	100cdb80 	call	100cdb8 <_Z15get_ttype_entryP16lsda_header_infoj>
 100d348:	10000826 	beq	r2,zero,100d36c <__gxx_personality_sj0+0x32c>
 100d34c:	d8c02717 	ldw	r3,156(sp)
 100d350:	183fe91e 	bne	r3,zero,100d2f8 <__gxx_personality_sj0+0x2b8>
 100d354:	d9401917 	ldw	r5,100(sp)
 100d358:	1009883a 	mov	r4,r2
 100d35c:	d80d883a 	mov	r6,sp
 100d360:	100c9b80 	call	100c9b8 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 100d364:	10803fcc 	andi	r2,r2,255
 100d368:	103fe326 	beq	r2,zero,100d2f8 <__gxx_personality_sj0+0x2b8>
 100d36c:	d9000117 	ldw	r4,4(sp)
 100d370:	d9001b15 	stw	r4,108(sp)
 100d374:	010000c4 	movi	r4,3
 100d378:	003fa206 	br	100d204 <__gxx_personality_sj0+0x1c4>
 100d37c:	01400204 	movi	r5,8
 100d380:	d9000a04 	addi	r4,sp,40
 100d384:	d9402215 	stw	r5,136(sp)
 100d388:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100d38c:	d8802217 	ldw	r2,136(sp)
 100d390:	dfc02c17 	ldw	ra,176(sp)
 100d394:	df002b17 	ldw	fp,172(sp)
 100d398:	ddc02a17 	ldw	r23,168(sp)
 100d39c:	dec02d04 	addi	sp,sp,180
 100d3a0:	f800283a 	ret
 100d3a4:	d9402617 	ldw	r5,152(sp)
 100d3a8:	0091d3b4 	movhi	r2,18254
 100d3ac:	109550c4 	addi	r2,r2,21827
 100d3b0:	28bf4f1e 	bne	r5,r2,100d0f0 <__gxx_personality_sj0+0xb0>
 100d3b4:	d8802317 	ldw	r2,140(sp)
 100d3b8:	1007883a 	mov	r3,r2
 100d3bc:	003f4c06 	br	100d0f0 <__gxx_personality_sj0+0xb0>
 100d3c0:	d9402417 	ldw	r5,144(sp)
 100d3c4:	2880020c 	andi	r2,r5,8
 100d3c8:	10000826 	beq	r2,zero,100d3ec <__gxx_personality_sj0+0x3ac>
 100d3cc:	20c04026 	beq	r4,r3,100d4d0 <__gxx_personality_sj0+0x490>
 100d3d0:	d8801b17 	ldw	r2,108(sp)
 100d3d4:	103f5b0e 	bge	r2,zero,100d144 <__gxx_personality_sj0+0x104>
 100d3d8:	00800084 	movi	r2,2
 100d3dc:	d8800b15 	stw	r2,44(sp)
 100d3e0:	100d6140 	call	100d614 <_ZSt10unexpectedv>
 100d3e4:	010000c4 	movi	r4,3
 100d3e8:	003f5206 	br	100d134 <__gxx_personality_sj0+0xf4>
 100d3ec:	d8802103 	ldbu	r2,132(sp)
 100d3f0:	103f501e 	bne	r2,zero,100d134 <__gxx_personality_sj0+0xf4>
 100d3f4:	003ff506 	br	100d3cc <__gxx_personality_sj0+0x38c>
 100d3f8:	d8800817 	ldw	r2,32(sp)
 100d3fc:	1885883a 	add	r2,r3,r2
 100d400:	1105c83a 	sub	r2,r2,r4
 100d404:	d8801f15 	stw	r2,124(sp)
 100d408:	003fa806 	br	100d2ac <__gxx_personality_sj0+0x26c>
 100d40c:	d9002717 	ldw	r4,156(sp)
 100d410:	20000e1e 	bne	r4,zero,100d44c <__gxx_personality_sj0+0x40c>
 100d414:	017fffc4 	movi	r5,-1
 100d418:	d9400b15 	stw	r5,44(sp)
 100d41c:	d9800017 	ldw	r6,0(sp)
 100d420:	d9401917 	ldw	r5,100(sp)
 100d424:	100f883a 	mov	r7,r2
 100d428:	d9000404 	addi	r4,sp,16
 100d42c:	100ce3c0 	call	100ce3c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 100d430:	1080005c 	xori	r2,r2,1
 100d434:	10803fcc 	andi	r2,r2,255
 100d438:	103faf26 	beq	r2,zero,100d2f8 <__gxx_personality_sj0+0x2b8>
 100d43c:	003fcb06 	br	100d36c <__gxx_personality_sj0+0x32c>
 100d440:	00800184 	movi	r2,6
 100d444:	d8802215 	stw	r2,136(sp)
 100d448:	003f1706 	br	100d0a8 <__gxx_personality_sj0+0x68>
 100d44c:	d9000717 	ldw	r4,28(sp)
 100d450:	d9400304 	addi	r5,sp,12
 100d454:	2089c83a 	sub	r4,r4,r2
 100d458:	213fffc4 	addi	r4,r4,-1
 100d45c:	100c9340 	call	100c934 <_Z12read_uleb128PKhPj>
 100d460:	d8c00317 	ldw	r3,12(sp)
 100d464:	1807003a 	cmpeq	r3,r3,zero
 100d468:	1805883a 	mov	r2,r3
 100d46c:	003ff106 	br	100d434 <__gxx_personality_sj0+0x3f4>
 100d470:	d8001915 	stw	zero,100(sp)
 100d474:	003f9906 	br	100d2dc <__gxx_personality_sj0+0x29c>
 100d478:	d8801803 	ldbu	r2,96(sp)
 100d47c:	1004c03a 	cmpne	r2,r2,zero
 100d480:	103fbe26 	beq	r2,zero,100d37c <__gxx_personality_sj0+0x33c>
 100d484:	01000084 	movi	r4,2
 100d488:	d8001b15 	stw	zero,108(sp)
 100d48c:	003f5d06 	br	100d204 <__gxx_personality_sj0+0x1c4>
 100d490:	d9402017 	ldw	r5,128(sp)
 100d494:	d9002e17 	ldw	r4,184(sp)
 100d498:	00bfffc4 	movi	r2,-1
 100d49c:	d9800404 	addi	r6,sp,16
 100d4a0:	d8800b15 	stw	r2,44(sp)
 100d4a4:	100ccb80 	call	100ccb8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 100d4a8:	d9000903 	ldbu	r4,36(sp)
 100d4ac:	d9402e17 	ldw	r5,184(sp)
 100d4b0:	100cc280 	call	100cc28 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 100d4b4:	d8c01a17 	ldw	r3,104(sp)
 100d4b8:	18800915 	stw	r2,36(r3)
 100d4bc:	003f2106 	br	100d144 <__gxx_personality_sj0+0x104>
 100d4c0:	d9002d17 	ldw	r4,180(sp)
 100d4c4:	00bfffc4 	movi	r2,-1
 100d4c8:	d8800b15 	stw	r2,44(sp)
 100d4cc:	100dea00 	call	100dea0 <__cxa_call_terminate>
 100d4d0:	00bfffc4 	movi	r2,-1
 100d4d4:	d8800b15 	stw	r2,44(sp)
 100d4d8:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 100d4dc:	d9000b17 	ldw	r4,44(sp)
 100d4e0:	d9400c17 	ldw	r5,48(sp)
 100d4e4:	00800044 	movi	r2,1
 100d4e8:	d9002915 	stw	r4,164(sp)
 100d4ec:	d9402815 	stw	r5,160(sp)
 100d4f0:	20800626 	beq	r4,r2,100d50c <__gxx_personality_sj0+0x4cc>
 100d4f4:	d8000b15 	stw	zero,44(sp)
 100d4f8:	100d6540 	call	100d654 <__cxa_end_catch>
 100d4fc:	d9002817 	ldw	r4,160(sp)
 100d500:	00bfffc4 	movi	r2,-1
 100d504:	d8800b15 	stw	r2,44(sp)
 100d508:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100d50c:	d9002817 	ldw	r4,160(sp)
 100d510:	100d6f80 	call	100d6f8 <__cxa_begin_catch>
 100d514:	d8c02917 	ldw	r3,164(sp)
 100d518:	d8c00b15 	stw	r3,44(sp)
 100d51c:	100d5ec0 	call	100d5ec <_ZSt9terminatev>

0100d520 <_ZSt13set_terminatePFvvE>:
 100d520:	00c040f4 	movhi	r3,259
 100d524:	18e3ca04 	addi	r3,r3,-28888
 100d528:	18800017 	ldw	r2,0(r3)
 100d52c:	19000015 	stw	r4,0(r3)
 100d530:	f800283a 	ret

0100d534 <_ZSt14set_unexpectedPFvvE>:
 100d534:	00c040f4 	movhi	r3,259
 100d538:	18e3cd04 	addi	r3,r3,-28876
 100d53c:	18800017 	ldw	r2,0(r3)
 100d540:	19000015 	stw	r4,0(r3)
 100d544:	f800283a 	ret

0100d548 <_ZN10__cxxabiv111__terminateEPFvvE>:
 100d548:	deffed04 	addi	sp,sp,-76
 100d54c:	00804074 	movhi	r2,257
 100d550:	10b41004 	addi	r2,r2,-12224
 100d554:	d8800615 	stw	r2,24(sp)
 100d558:	00c040b4 	movhi	r3,258
 100d55c:	18d6b104 	addi	r3,r3,23236
 100d560:	00804074 	movhi	r2,257
 100d564:	10b56904 	addi	r2,r2,-10844
 100d568:	d9000d15 	stw	r4,52(sp)
 100d56c:	d809883a 	mov	r4,sp
 100d570:	d8800915 	stw	r2,36(sp)
 100d574:	dfc01215 	stw	ra,72(sp)
 100d578:	df001115 	stw	fp,68(sp)
 100d57c:	ddc01015 	stw	r23,64(sp)
 100d580:	d8c00715 	stw	r3,28(sp)
 100d584:	dec00815 	stw	sp,32(sp)
 100d588:	dec00a15 	stw	sp,40(sp)
 100d58c:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100d590:	00800084 	movi	r2,2
 100d594:	d8800115 	stw	r2,4(sp)
 100d598:	d8800d17 	ldw	r2,52(sp)
 100d59c:	103ee83a 	callr	r2
 100d5a0:	100e4740 	call	100e474 <abort>
 100d5a4:	d8800117 	ldw	r2,4(sp)
 100d5a8:	d8c00217 	ldw	r3,8(sp)
 100d5ac:	d8800f15 	stw	r2,60(sp)
 100d5b0:	d8c00e15 	stw	r3,56(sp)
 100d5b4:	d8c00f17 	ldw	r3,60(sp)
 100d5b8:	00800044 	movi	r2,1
 100d5bc:	18800626 	beq	r3,r2,100d5d8 <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
 100d5c0:	d8000115 	stw	zero,4(sp)
 100d5c4:	100d6540 	call	100d654 <__cxa_end_catch>
 100d5c8:	d9000e17 	ldw	r4,56(sp)
 100d5cc:	00bfffc4 	movi	r2,-1
 100d5d0:	d8800115 	stw	r2,4(sp)
 100d5d4:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100d5d8:	d9000e17 	ldw	r4,56(sp)
 100d5dc:	100d6f80 	call	100d6f8 <__cxa_begin_catch>
 100d5e0:	d8c00f17 	ldw	r3,60(sp)
 100d5e4:	d8c00115 	stw	r3,4(sp)
 100d5e8:	100e4740 	call	100e474 <abort>

0100d5ec <_ZSt9terminatev>:
 100d5ec:	008040f4 	movhi	r2,259
 100d5f0:	10a3ca04 	addi	r2,r2,-28888
 100d5f4:	11000017 	ldw	r4,0(r2)
 100d5f8:	deffff04 	addi	sp,sp,-4
 100d5fc:	dfc00015 	stw	ra,0(sp)
 100d600:	100d5480 	call	100d548 <_ZN10__cxxabiv111__terminateEPFvvE>

0100d604 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 100d604:	deffff04 	addi	sp,sp,-4
 100d608:	dfc00015 	stw	ra,0(sp)
 100d60c:	203ee83a 	callr	r4
 100d610:	100d5ec0 	call	100d5ec <_ZSt9terminatev>

0100d614 <_ZSt10unexpectedv>:
 100d614:	008040f4 	movhi	r2,259
 100d618:	10a3cd04 	addi	r2,r2,-28876
 100d61c:	11000017 	ldw	r4,0(r2)
 100d620:	deffff04 	addi	sp,sp,-4
 100d624:	dfc00015 	stw	ra,0(sp)
 100d628:	100d6040 	call	100d604 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0100d62c <__cxa_get_exception_ptr>:
 100d62c:	20bfff17 	ldw	r2,-4(r4)
 100d630:	f800283a 	ret

0100d634 <_ZSt18uncaught_exceptionv>:
 100d634:	deffff04 	addi	sp,sp,-4
 100d638:	dfc00015 	stw	ra,0(sp)
 100d63c:	100deec0 	call	100deec <__cxa_get_globals>
 100d640:	10800117 	ldw	r2,4(r2)
 100d644:	1004c03a 	cmpne	r2,r2,zero
 100d648:	dfc00017 	ldw	ra,0(sp)
 100d64c:	dec00104 	addi	sp,sp,4
 100d650:	f800283a 	ret

0100d654 <__cxa_end_catch>:
 100d654:	deffff04 	addi	sp,sp,-4
 100d658:	dfc00015 	stw	ra,0(sp)
 100d65c:	100dee40 	call	100dee4 <__cxa_get_globals_fast>
 100d660:	11000017 	ldw	r4,0(r2)
 100d664:	1007883a 	mov	r3,r2
 100d668:	20001326 	beq	r4,zero,100d6b8 <__cxa_end_catch+0x64>
 100d66c:	21400b17 	ldw	r5,44(r4)
 100d670:	0090caf4 	movhi	r2,17195
 100d674:	108ac004 	addi	r2,r2,11008
 100d678:	21800c17 	ldw	r6,48(r4)
 100d67c:	28800526 	beq	r5,r2,100d694 <__cxa_end_catch+0x40>
 100d680:	21000b04 	addi	r4,r4,44
 100d684:	18000015 	stw	zero,0(r3)
 100d688:	dfc00017 	ldw	ra,0(sp)
 100d68c:	dec00104 	addi	sp,sp,4
 100d690:	100e0ec1 	jmpi	100e0ec <_Unwind_DeleteException>
 100d694:	0091d3b4 	movhi	r2,18254
 100d698:	109550c4 	addi	r2,r2,21827
 100d69c:	30bff81e 	bne	r6,r2,100d680 <__cxa_end_catch+0x2c>
 100d6a0:	20800517 	ldw	r2,20(r4)
 100d6a4:	10000e16 	blt	r2,zero,100d6e0 <__cxa_end_catch+0x8c>
 100d6a8:	117fffc4 	addi	r5,r2,-1
 100d6ac:	28000526 	beq	r5,zero,100d6c4 <__cxa_end_catch+0x70>
 100d6b0:	28000a16 	blt	r5,zero,100d6dc <__cxa_end_catch+0x88>
 100d6b4:	21400515 	stw	r5,20(r4)
 100d6b8:	dfc00017 	ldw	ra,0(sp)
 100d6bc:	dec00104 	addi	sp,sp,4
 100d6c0:	f800283a 	ret
 100d6c4:	20800417 	ldw	r2,16(r4)
 100d6c8:	21000b04 	addi	r4,r4,44
 100d6cc:	18800015 	stw	r2,0(r3)
 100d6d0:	dfc00017 	ldw	ra,0(sp)
 100d6d4:	dec00104 	addi	sp,sp,4
 100d6d8:	100e0ec1 	jmpi	100e0ec <_Unwind_DeleteException>
 100d6dc:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 100d6e0:	11400044 	addi	r5,r2,1
 100d6e4:	283ff31e 	bne	r5,zero,100d6b4 <__cxa_end_catch+0x60>
 100d6e8:	20800417 	ldw	r2,16(r4)
 100d6ec:	21400515 	stw	r5,20(r4)
 100d6f0:	18800015 	stw	r2,0(r3)
 100d6f4:	003ff006 	br	100d6b8 <__cxa_end_catch+0x64>

0100d6f8 <__cxa_begin_catch>:
 100d6f8:	deffee04 	addi	sp,sp,-72
 100d6fc:	00804074 	movhi	r2,257
 100d700:	10b41004 	addi	r2,r2,-12224
 100d704:	00c040b4 	movhi	r3,258
 100d708:	18d6b504 	addi	r3,r3,23252
 100d70c:	d8800615 	stw	r2,24(sp)
 100d710:	d9000e15 	stw	r4,56(sp)
 100d714:	00804074 	movhi	r2,257
 100d718:	10b5fb04 	addi	r2,r2,-10260
 100d71c:	d809883a 	mov	r4,sp
 100d720:	d8c00715 	stw	r3,28(sp)
 100d724:	dfc01115 	stw	ra,68(sp)
 100d728:	d8800915 	stw	r2,36(sp)
 100d72c:	df001015 	stw	fp,64(sp)
 100d730:	ddc00f15 	stw	r23,60(sp)
 100d734:	dec00815 	stw	sp,32(sp)
 100d738:	dec00a15 	stw	sp,40(sp)
 100d73c:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100d740:	100deec0 	call	100deec <__cxa_get_globals>
 100d744:	100d883a 	mov	r6,r2
 100d748:	d8800e17 	ldw	r2,56(sp)
 100d74c:	31c00017 	ldw	r7,0(r6)
 100d750:	117ff504 	addi	r5,r2,-44
 100d754:	28c00b17 	ldw	r3,44(r5)
 100d758:	0090caf4 	movhi	r2,17195
 100d75c:	108ac004 	addi	r2,r2,11008
 100d760:	29000c17 	ldw	r4,48(r5)
 100d764:	18800b26 	beq	r3,r2,100d794 <__cxa_begin_catch+0x9c>
 100d768:	38001d1e 	bne	r7,zero,100d7e0 <__cxa_begin_catch+0xe8>
 100d76c:	d8000d15 	stw	zero,52(sp)
 100d770:	31400015 	stw	r5,0(r6)
 100d774:	d809883a 	mov	r4,sp
 100d778:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100d77c:	d8800d17 	ldw	r2,52(sp)
 100d780:	dfc01117 	ldw	ra,68(sp)
 100d784:	df001017 	ldw	fp,64(sp)
 100d788:	ddc00f17 	ldw	r23,60(sp)
 100d78c:	dec01204 	addi	sp,sp,72
 100d790:	f800283a 	ret
 100d794:	0091d3b4 	movhi	r2,18254
 100d798:	109550c4 	addi	r2,r2,21827
 100d79c:	20bff21e 	bne	r4,r2,100d768 <__cxa_begin_catch+0x70>
 100d7a0:	28c00517 	ldw	r3,20(r5)
 100d7a4:	18000b16 	blt	r3,zero,100d7d4 <__cxa_begin_catch+0xdc>
 100d7a8:	18800044 	addi	r2,r3,1
 100d7ac:	28800515 	stw	r2,20(r5)
 100d7b0:	30800117 	ldw	r2,4(r6)
 100d7b4:	10bfffc4 	addi	r2,r2,-1
 100d7b8:	30800115 	stw	r2,4(r6)
 100d7bc:	39400226 	beq	r7,r5,100d7c8 <__cxa_begin_catch+0xd0>
 100d7c0:	29c00415 	stw	r7,16(r5)
 100d7c4:	31400015 	stw	r5,0(r6)
 100d7c8:	29400a17 	ldw	r5,40(r5)
 100d7cc:	d9400d15 	stw	r5,52(sp)
 100d7d0:	003fe806 	br	100d774 <__cxa_begin_catch+0x7c>
 100d7d4:	00800044 	movi	r2,1
 100d7d8:	10c5c83a 	sub	r2,r2,r3
 100d7dc:	003ff306 	br	100d7ac <__cxa_begin_catch+0xb4>
 100d7e0:	00800044 	movi	r2,1
 100d7e4:	d8800115 	stw	r2,4(sp)
 100d7e8:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 100d7ec:	d8800317 	ldw	r2,12(sp)
 100d7f0:	00ffffc4 	movi	r3,-1
 100d7f4:	d9000217 	ldw	r4,8(sp)
 100d7f8:	10c00226 	beq	r2,r3,100d804 <__cxa_begin_catch+0x10c>
 100d7fc:	d8c00115 	stw	r3,4(sp)
 100d800:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100d804:	00bfffc4 	movi	r2,-1
 100d808:	d8800115 	stw	r2,4(sp)
 100d80c:	100cec00 	call	100cec0 <__cxa_call_unexpected>

0100d810 <_ZdlPv>:
 100d810:	20000126 	beq	r4,zero,100d818 <_ZdlPv+0x8>
 100d814:	100e48c1 	jmpi	100e48c <free>
 100d818:	f800283a 	ret

0100d81c <__cxa_rethrow>:
 100d81c:	defffe04 	addi	sp,sp,-8
 100d820:	dc400015 	stw	r17,0(sp)
 100d824:	dfc00115 	stw	ra,4(sp)
 100d828:	100deec0 	call	100deec <__cxa_get_globals>
 100d82c:	100b883a 	mov	r5,r2
 100d830:	10800117 	ldw	r2,4(r2)
 100d834:	2c400017 	ldw	r17,0(r5)
 100d838:	10800044 	addi	r2,r2,1
 100d83c:	28800115 	stw	r2,4(r5)
 100d840:	88000b26 	beq	r17,zero,100d870 <__cxa_rethrow+0x54>
 100d844:	88c00b17 	ldw	r3,44(r17)
 100d848:	0090caf4 	movhi	r2,17195
 100d84c:	108ac004 	addi	r2,r2,11008
 100d850:	89000c17 	ldw	r4,48(r17)
 100d854:	18800726 	beq	r3,r2,100d874 <__cxa_rethrow+0x58>
 100d858:	28000015 	stw	zero,0(r5)
 100d85c:	8c400b04 	addi	r17,r17,44
 100d860:	8809883a 	mov	r4,r17
 100d864:	100e41c0 	call	100e41c <_Unwind_SjLj_Resume_or_Rethrow>
 100d868:	8809883a 	mov	r4,r17
 100d86c:	100d6f80 	call	100d6f8 <__cxa_begin_catch>
 100d870:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 100d874:	0091d3b4 	movhi	r2,18254
 100d878:	109550c4 	addi	r2,r2,21827
 100d87c:	20bff61e 	bne	r4,r2,100d858 <__cxa_rethrow+0x3c>
 100d880:	88800517 	ldw	r2,20(r17)
 100d884:	0085c83a 	sub	r2,zero,r2
 100d888:	88800515 	stw	r2,20(r17)
 100d88c:	003ff306 	br	100d85c <__cxa_rethrow+0x40>

0100d890 <__cxa_throw>:
 100d890:	008040f4 	movhi	r2,259
 100d894:	10a3cd04 	addi	r2,r2,-28876
 100d898:	00c040f4 	movhi	r3,259
 100d89c:	18e3ca04 	addi	r3,r3,-28888
 100d8a0:	12000017 	ldw	r8,0(r2)
 100d8a4:	19c00017 	ldw	r7,0(r3)
 100d8a8:	defffe04 	addi	sp,sp,-8
 100d8ac:	213ff004 	addi	r4,r4,-64
 100d8b0:	dfc00115 	stw	ra,4(sp)
 100d8b4:	dc400015 	stw	r17,0(sp)
 100d8b8:	0090caf4 	movhi	r2,17195
 100d8bc:	108ac004 	addi	r2,r2,11008
 100d8c0:	20800b15 	stw	r2,44(r4)
 100d8c4:	00d1d3b4 	movhi	r3,18254
 100d8c8:	18d550c4 	addi	r3,r3,21827
 100d8cc:	24400b04 	addi	r17,r4,44
 100d8d0:	00804074 	movhi	r2,257
 100d8d4:	10b64104 	addi	r2,r2,-9980
 100d8d8:	21400015 	stw	r5,0(r4)
 100d8dc:	21800115 	stw	r6,4(r4)
 100d8e0:	22000215 	stw	r8,8(r4)
 100d8e4:	21c00315 	stw	r7,12(r4)
 100d8e8:	20c00c15 	stw	r3,48(r4)
 100d8ec:	20800d15 	stw	r2,52(r4)
 100d8f0:	8809883a 	mov	r4,r17
 100d8f4:	100e2540 	call	100e254 <_Unwind_SjLj_RaiseException>
 100d8f8:	8809883a 	mov	r4,r17
 100d8fc:	100d6f80 	call	100d6f8 <__cxa_begin_catch>
 100d900:	100d5ec0 	call	100d5ec <_ZSt9terminatev>

0100d904 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 100d904:	defffe04 	addi	sp,sp,-8
 100d908:	00800044 	movi	r2,1
 100d90c:	dfc00115 	stw	ra,4(sp)
 100d910:	dc000015 	stw	r16,0(sp)
 100d914:	28fff504 	addi	r3,r5,-44
 100d918:	11001036 	bltu	r2,r4,100d95c <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
 100d91c:	18800117 	ldw	r2,4(r3)
 100d920:	10000826 	beq	r2,zero,100d944 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
 100d924:	2c000504 	addi	r16,r5,20
 100d928:	8009883a 	mov	r4,r16
 100d92c:	103ee83a 	callr	r2
 100d930:	8009883a 	mov	r4,r16
 100d934:	dfc00117 	ldw	ra,4(sp)
 100d938:	dc000017 	ldw	r16,0(sp)
 100d93c:	dec00204 	addi	sp,sp,8
 100d940:	100dbd81 	jmpi	100dbd8 <__cxa_free_exception>
 100d944:	2c000504 	addi	r16,r5,20
 100d948:	8009883a 	mov	r4,r16
 100d94c:	dfc00117 	ldw	ra,4(sp)
 100d950:	dc000017 	ldw	r16,0(sp)
 100d954:	dec00204 	addi	sp,sp,8
 100d958:	100dbd81 	jmpi	100dbd8 <__cxa_free_exception>
 100d95c:	19000317 	ldw	r4,12(r3)
 100d960:	100d5480 	call	100d548 <_ZN10__cxxabiv111__terminateEPFvvE>

0100d964 <_ZNSt10bad_typeidD0Ev>:
 100d964:	defffe04 	addi	sp,sp,-8
 100d968:	008040b4 	movhi	r2,258
 100d96c:	109a8804 	addi	r2,r2,27168
 100d970:	dc400015 	stw	r17,0(sp)
 100d974:	20800015 	stw	r2,0(r4)
 100d978:	2023883a 	mov	r17,r4
 100d97c:	dfc00115 	stw	ra,4(sp)
 100d980:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 100d984:	8809883a 	mov	r4,r17
 100d988:	dfc00117 	ldw	ra,4(sp)
 100d98c:	dc400017 	ldw	r17,0(sp)
 100d990:	dec00204 	addi	sp,sp,8
 100d994:	100d8101 	jmpi	100d810 <_ZdlPv>

0100d998 <_ZNSt10bad_typeidD1Ev>:
 100d998:	008040b4 	movhi	r2,258
 100d99c:	109a8804 	addi	r2,r2,27168
 100d9a0:	20800015 	stw	r2,0(r4)
 100d9a4:	100bbe01 	jmpi	100bbe0 <_ZNSt9exceptionD2Ev>

0100d9a8 <_ZNSt10bad_typeidD2Ev>:
 100d9a8:	008040b4 	movhi	r2,258
 100d9ac:	109a8804 	addi	r2,r2,27168
 100d9b0:	20800015 	stw	r2,0(r4)
 100d9b4:	100bbe01 	jmpi	100bbe0 <_ZNSt9exceptionD2Ev>

0100d9b8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 100d9b8:	defffb04 	addi	sp,sp,-20
 100d9bc:	dd400315 	stw	r21,12(sp)
 100d9c0:	dcc00215 	stw	r19,8(sp)
 100d9c4:	dc400115 	stw	r17,4(sp)
 100d9c8:	dc000015 	stw	r16,0(sp)
 100d9cc:	2823883a 	mov	r17,r5
 100d9d0:	3027883a 	mov	r19,r6
 100d9d4:	382b883a 	mov	r21,r7
 100d9d8:	dfc00415 	stw	ra,16(sp)
 100d9dc:	2021883a 	mov	r16,r4
 100d9e0:	100c7300 	call	100c730 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 100d9e4:	10803fcc 	andi	r2,r2,255
 100d9e8:	880b883a 	mov	r5,r17
 100d9ec:	980d883a 	mov	r6,r19
 100d9f0:	a80f883a 	mov	r7,r21
 100d9f4:	00c00044 	movi	r3,1
 100d9f8:	1000051e 	bne	r2,zero,100da10 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 100d9fc:	81000217 	ldw	r4,8(r16)
 100da00:	20800017 	ldw	r2,0(r4)
 100da04:	10c00617 	ldw	r3,24(r2)
 100da08:	183ee83a 	callr	r3
 100da0c:	10c03fcc 	andi	r3,r2,255
 100da10:	1805883a 	mov	r2,r3
 100da14:	dfc00417 	ldw	ra,16(sp)
 100da18:	dd400317 	ldw	r21,12(sp)
 100da1c:	dcc00217 	ldw	r19,8(sp)
 100da20:	dc400117 	ldw	r17,4(sp)
 100da24:	dc000017 	ldw	r16,0(sp)
 100da28:	dec00504 	addi	sp,sp,20
 100da2c:	f800283a 	ret

0100da30 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 100da30:	defffe04 	addi	sp,sp,-8
 100da34:	008040b4 	movhi	r2,258
 100da38:	109a9404 	addi	r2,r2,27216
 100da3c:	dc400015 	stw	r17,0(sp)
 100da40:	20800015 	stw	r2,0(r4)
 100da44:	2023883a 	mov	r17,r4
 100da48:	dfc00115 	stw	ra,4(sp)
 100da4c:	100c6c00 	call	100c6c0 <_ZN10__cxxabiv117__class_type_infoD2Ev>
 100da50:	8809883a 	mov	r4,r17
 100da54:	dfc00117 	ldw	ra,4(sp)
 100da58:	dc400017 	ldw	r17,0(sp)
 100da5c:	dec00204 	addi	sp,sp,8
 100da60:	100d8101 	jmpi	100d810 <_ZdlPv>

0100da64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 100da64:	008040b4 	movhi	r2,258
 100da68:	109a9404 	addi	r2,r2,27216
 100da6c:	20800015 	stw	r2,0(r4)
 100da70:	100c6c01 	jmpi	100c6c0 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0100da74 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
 100da74:	008040b4 	movhi	r2,258
 100da78:	109a9404 	addi	r2,r2,27216
 100da7c:	20800015 	stw	r2,0(r4)
 100da80:	100c6c01 	jmpi	100c6c0 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0100da84 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
 100da84:	da400017 	ldw	r9,0(sp)
 100da88:	2011883a 	mov	r8,r4
 100da8c:	49800526 	beq	r9,r6,100daa4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
 100da90:	41000217 	ldw	r4,8(r8)
 100da94:	20800017 	ldw	r2,0(r4)
 100da98:	da400015 	stw	r9,0(sp)
 100da9c:	10c00817 	ldw	r3,32(r2)
 100daa0:	1800683a 	jmp	r3
 100daa4:	39000117 	ldw	r4,4(r7)
 100daa8:	40c00117 	ldw	r3,4(r8)
 100daac:	00800184 	movi	r2,6
 100dab0:	193ff71e 	bne	r3,r4,100da90 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
 100dab4:	f800283a 	ret

0100dab8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 100dab8:	20c00117 	ldw	r3,4(r4)
 100dabc:	38800117 	ldw	r2,4(r7)
 100dac0:	defffb04 	addi	sp,sp,-20
 100dac4:	dfc00415 	stw	ra,16(sp)
 100dac8:	da000517 	ldw	r8,20(sp)
 100dacc:	dac00617 	ldw	r11,24(sp)
 100dad0:	da400717 	ldw	r9,28(sp)
 100dad4:	da800817 	ldw	r10,32(sp)
 100dad8:	18800c1e 	bne	r3,r2,100db0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 100dadc:	51800115 	stw	r6,4(r10)
 100dae0:	52000015 	stw	r8,0(r10)
 100dae4:	28001c16 	blt	r5,zero,100db58 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
 100dae8:	4145883a 	add	r2,r8,r5
 100daec:	48801e26 	beq	r9,r2,100db68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 100daf0:	00800044 	movi	r2,1
 100daf4:	0007883a 	mov	r3,zero
 100daf8:	50800315 	stw	r2,12(r10)
 100dafc:	1805883a 	mov	r2,r3
 100db00:	dfc00417 	ldw	ra,16(sp)
 100db04:	dec00504 	addi	sp,sp,20
 100db08:	f800283a 	ret
 100db0c:	42400d26 	beq	r8,r9,100db44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 100db10:	21000217 	ldw	r4,8(r4)
 100db14:	20800017 	ldw	r2,0(r4)
 100db18:	da000015 	stw	r8,0(sp)
 100db1c:	dac00115 	stw	r11,4(sp)
 100db20:	da400215 	stw	r9,8(sp)
 100db24:	da800315 	stw	r10,12(sp)
 100db28:	10c00717 	ldw	r3,28(r2)
 100db2c:	183ee83a 	callr	r3
 100db30:	10c03fcc 	andi	r3,r2,255
 100db34:	1805883a 	mov	r2,r3
 100db38:	dfc00417 	ldw	ra,16(sp)
 100db3c:	dec00504 	addi	sp,sp,20
 100db40:	f800283a 	ret
 100db44:	58800117 	ldw	r2,4(r11)
 100db48:	18bff11e 	bne	r3,r2,100db10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 100db4c:	0007883a 	mov	r3,zero
 100db50:	51800215 	stw	r6,8(r10)
 100db54:	003fe906 	br	100dafc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 100db58:	00bfff84 	movi	r2,-2
 100db5c:	28800426 	beq	r5,r2,100db70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
 100db60:	0007883a 	mov	r3,zero
 100db64:	003fe506 	br	100dafc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 100db68:	00800184 	movi	r2,6
 100db6c:	003fe106 	br	100daf4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 100db70:	00800044 	movi	r2,1
 100db74:	0007883a 	mov	r3,zero
 100db78:	50800315 	stw	r2,12(r10)
 100db7c:	003fdf06 	br	100dafc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

0100db80 <_ZNKSt9type_info14__is_pointer_pEv>:
 100db80:	0005883a 	mov	r2,zero
 100db84:	f800283a 	ret

0100db88 <_ZNKSt9type_info15__is_function_pEv>:
 100db88:	0005883a 	mov	r2,zero
 100db8c:	f800283a 	ret

0100db90 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 100db90:	20c00117 	ldw	r3,4(r4)
 100db94:	28800117 	ldw	r2,4(r5)
 100db98:	1885003a 	cmpeq	r2,r3,r2
 100db9c:	f800283a 	ret

0100dba0 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 100dba0:	0005883a 	mov	r2,zero
 100dba4:	f800283a 	ret

0100dba8 <_ZNSt9type_infoD0Ev>:
 100dba8:	008040b4 	movhi	r2,258
 100dbac:	109aac04 	addi	r2,r2,27312
 100dbb0:	20800015 	stw	r2,0(r4)
 100dbb4:	100d8101 	jmpi	100d810 <_ZdlPv>

0100dbb8 <_ZNSt9type_infoD1Ev>:
 100dbb8:	008040b4 	movhi	r2,258
 100dbbc:	109aac04 	addi	r2,r2,27312
 100dbc0:	20800015 	stw	r2,0(r4)
 100dbc4:	f800283a 	ret

0100dbc8 <_ZNSt9type_infoD2Ev>:
 100dbc8:	008040b4 	movhi	r2,258
 100dbcc:	109aac04 	addi	r2,r2,27312
 100dbd0:	20800015 	stw	r2,0(r4)
 100dbd4:	f800283a 	ret

0100dbd8 <__cxa_free_exception>:
 100dbd8:	2007883a 	mov	r3,r4
 100dbdc:	008040f4 	movhi	r2,259
 100dbe0:	109c3604 	addi	r2,r2,28888
 100dbe4:	213ff004 	addi	r4,r4,-64
 100dbe8:	11420004 	addi	r5,r2,2048
 100dbec:	18800336 	bltu	r3,r2,100dbfc <__cxa_free_exception+0x24>
 100dbf0:	1885c83a 	sub	r2,r3,r2
 100dbf4:	1004d27a 	srli	r2,r2,9
 100dbf8:	19400136 	bltu	r3,r5,100dc00 <__cxa_free_exception+0x28>
 100dbfc:	100e48c1 	jmpi	100e48c <free>
 100dc00:	00ffff84 	movi	r3,-2
 100dc04:	1886183a 	rol	r3,r3,r2
 100dc08:	d0a09d17 	ldw	r2,-32140(gp)
 100dc0c:	10c4703a 	and	r2,r2,r3
 100dc10:	d0a09d15 	stw	r2,-32140(gp)
 100dc14:	f800283a 	ret

0100dc18 <__cxa_allocate_exception>:
 100dc18:	deffed04 	addi	sp,sp,-76
 100dc1c:	00804074 	movhi	r2,257
 100dc20:	10b41004 	addi	r2,r2,-12224
 100dc24:	21001004 	addi	r4,r4,64
 100dc28:	00c040b4 	movhi	r3,258
 100dc2c:	18d6b904 	addi	r3,r3,23268
 100dc30:	d8800615 	stw	r2,24(sp)
 100dc34:	d9000d15 	stw	r4,52(sp)
 100dc38:	00804074 	movhi	r2,257
 100dc3c:	10b74a04 	addi	r2,r2,-8920
 100dc40:	d809883a 	mov	r4,sp
 100dc44:	dfc01215 	stw	ra,72(sp)
 100dc48:	d8c00715 	stw	r3,28(sp)
 100dc4c:	d8800915 	stw	r2,36(sp)
 100dc50:	df001115 	stw	fp,68(sp)
 100dc54:	ddc01015 	stw	r23,64(sp)
 100dc58:	dec00815 	stw	sp,32(sp)
 100dc5c:	dec00a15 	stw	sp,40(sp)
 100dc60:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100dc64:	d9000d17 	ldw	r4,52(sp)
 100dc68:	100e4a00 	call	100e4a0 <malloc>
 100dc6c:	d8800e15 	stw	r2,56(sp)
 100dc70:	1000171e 	bne	r2,zero,100dcd0 <__cxa_allocate_exception+0xb8>
 100dc74:	d8c00d17 	ldw	r3,52(sp)
 100dc78:	00808004 	movi	r2,512
 100dc7c:	d1e09d17 	ldw	r7,-32140(gp)
 100dc80:	10c02636 	bltu	r2,r3,100dd1c <__cxa_allocate_exception+0x104>
 100dc84:	3807883a 	mov	r3,r7
 100dc88:	01400044 	movi	r5,1
 100dc8c:	1944703a 	and	r2,r3,r5
 100dc90:	0009883a 	mov	r4,zero
 100dc94:	01800104 	movi	r6,4
 100dc98:	10000526 	beq	r2,zero,100dcb0 <__cxa_allocate_exception+0x98>
 100dc9c:	2149883a 	add	r4,r4,r5
 100dca0:	21801e26 	beq	r4,r6,100dd1c <__cxa_allocate_exception+0x104>
 100dca4:	1806d07a 	srli	r3,r3,1
 100dca8:	1944703a 	and	r2,r3,r5
 100dcac:	103ffb1e 	bne	r2,zero,100dc9c <__cxa_allocate_exception+0x84>
 100dcb0:	2904983a 	sll	r2,r5,r4
 100dcb4:	2008927a 	slli	r4,r4,9
 100dcb8:	00c040f4 	movhi	r3,259
 100dcbc:	18dc3604 	addi	r3,r3,28888
 100dcc0:	3884b03a 	or	r2,r7,r2
 100dcc4:	20c9883a 	add	r4,r4,r3
 100dcc8:	d9000e15 	stw	r4,56(sp)
 100dccc:	d0a09d15 	stw	r2,-32140(gp)
 100dcd0:	100deec0 	call	100deec <__cxa_get_globals>
 100dcd4:	10c00117 	ldw	r3,4(r2)
 100dcd8:	d9000e17 	ldw	r4,56(sp)
 100dcdc:	000b883a 	mov	r5,zero
 100dce0:	18c00044 	addi	r3,r3,1
 100dce4:	10c00115 	stw	r3,4(r2)
 100dce8:	01801004 	movi	r6,64
 100dcec:	100eecc0 	call	100eecc <memset>
 100dcf0:	d8800e17 	ldw	r2,56(sp)
 100dcf4:	d809883a 	mov	r4,sp
 100dcf8:	10801004 	addi	r2,r2,64
 100dcfc:	d8800f15 	stw	r2,60(sp)
 100dd00:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100dd04:	d8800f17 	ldw	r2,60(sp)
 100dd08:	dfc01217 	ldw	ra,72(sp)
 100dd0c:	df001117 	ldw	fp,68(sp)
 100dd10:	ddc01017 	ldw	r23,64(sp)
 100dd14:	dec01304 	addi	sp,sp,76
 100dd18:	f800283a 	ret
 100dd1c:	00800044 	movi	r2,1
 100dd20:	d8800115 	stw	r2,4(sp)
 100dd24:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 100dd28:	d8800317 	ldw	r2,12(sp)
 100dd2c:	00ffffc4 	movi	r3,-1
 100dd30:	d9000217 	ldw	r4,8(sp)
 100dd34:	10c00226 	beq	r2,r3,100dd40 <__cxa_allocate_exception+0x128>
 100dd38:	d8c00115 	stw	r3,4(sp)
 100dd3c:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100dd40:	00bfffc4 	movi	r2,-1
 100dd44:	d8800115 	stw	r2,4(sp)
 100dd48:	100cec00 	call	100cec0 <__cxa_call_unexpected>

0100dd4c <_ZNSt8bad_castD0Ev>:
 100dd4c:	defffe04 	addi	sp,sp,-8
 100dd50:	008040b4 	movhi	r2,258
 100dd54:	109ab804 	addi	r2,r2,27360
 100dd58:	dc400015 	stw	r17,0(sp)
 100dd5c:	20800015 	stw	r2,0(r4)
 100dd60:	2023883a 	mov	r17,r4
 100dd64:	dfc00115 	stw	ra,4(sp)
 100dd68:	100bbe00 	call	100bbe0 <_ZNSt9exceptionD2Ev>
 100dd6c:	8809883a 	mov	r4,r17
 100dd70:	dfc00117 	ldw	ra,4(sp)
 100dd74:	dc400017 	ldw	r17,0(sp)
 100dd78:	dec00204 	addi	sp,sp,8
 100dd7c:	100d8101 	jmpi	100d810 <_ZdlPv>

0100dd80 <_ZNSt8bad_castD1Ev>:
 100dd80:	008040b4 	movhi	r2,258
 100dd84:	109ab804 	addi	r2,r2,27360
 100dd88:	20800015 	stw	r2,0(r4)
 100dd8c:	100bbe01 	jmpi	100bbe0 <_ZNSt9exceptionD2Ev>

0100dd90 <_ZNSt8bad_castD2Ev>:
 100dd90:	008040b4 	movhi	r2,258
 100dd94:	109ab804 	addi	r2,r2,27360
 100dd98:	20800015 	stw	r2,0(r4)
 100dd9c:	100bbe01 	jmpi	100bbe0 <_ZNSt9exceptionD2Ev>

0100dda0 <_Znwm>:
 100dda0:	deffee04 	addi	sp,sp,-72
 100dda4:	00804074 	movhi	r2,257
 100dda8:	10b41004 	addi	r2,r2,-12224
 100ddac:	d8800615 	stw	r2,24(sp)
 100ddb0:	00c040b4 	movhi	r3,258
 100ddb4:	18d6bd04 	addi	r3,r3,23284
 100ddb8:	00804074 	movhi	r2,257
 100ddbc:	10b79f04 	addi	r2,r2,-8580
 100ddc0:	d9000e15 	stw	r4,56(sp)
 100ddc4:	d809883a 	mov	r4,sp
 100ddc8:	d8800915 	stw	r2,36(sp)
 100ddcc:	dfc01115 	stw	ra,68(sp)
 100ddd0:	df001015 	stw	fp,64(sp)
 100ddd4:	ddc00f15 	stw	r23,60(sp)
 100ddd8:	d8c00715 	stw	r3,28(sp)
 100dddc:	dec00815 	stw	sp,32(sp)
 100dde0:	dec00a15 	stw	sp,40(sp)
 100dde4:	100df2c0 	call	100df2c <_Unwind_SjLj_Register>
 100dde8:	d8800e17 	ldw	r2,56(sp)
 100ddec:	10000a1e 	bne	r2,zero,100de18 <_Znwm+0x78>
 100ddf0:	00800044 	movi	r2,1
 100ddf4:	d8800e15 	stw	r2,56(sp)
 100ddf8:	00000706 	br	100de18 <_Znwm+0x78>
 100ddfc:	008040f4 	movhi	r2,259
 100de00:	10a40704 	addi	r2,r2,-28644
 100de04:	10c00017 	ldw	r3,0(r2)
 100de08:	18000f26 	beq	r3,zero,100de48 <_Znwm+0xa8>
 100de0c:	00800044 	movi	r2,1
 100de10:	d8800115 	stw	r2,4(sp)
 100de14:	183ee83a 	callr	r3
 100de18:	d9000e17 	ldw	r4,56(sp)
 100de1c:	100e4a00 	call	100e4a0 <malloc>
 100de20:	d8800d15 	stw	r2,52(sp)
 100de24:	103ff526 	beq	r2,zero,100ddfc <_Znwm+0x5c>
 100de28:	d809883a 	mov	r4,sp
 100de2c:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100de30:	d8800d17 	ldw	r2,52(sp)
 100de34:	dfc01117 	ldw	ra,68(sp)
 100de38:	df001017 	ldw	fp,64(sp)
 100de3c:	ddc00f17 	ldw	r23,60(sp)
 100de40:	dec01204 	addi	sp,sp,72
 100de44:	f800283a 	ret
 100de48:	01000104 	movi	r4,4
 100de4c:	100dc180 	call	100dc18 <__cxa_allocate_exception>
 100de50:	1009883a 	mov	r4,r2
 100de54:	008040b4 	movhi	r2,258
 100de58:	10997f04 	addi	r2,r2,26108
 100de5c:	20800015 	stw	r2,0(r4)
 100de60:	00c00044 	movi	r3,1
 100de64:	d8c00115 	stw	r3,4(sp)
 100de68:	014040b4 	movhi	r5,258
 100de6c:	29598604 	addi	r5,r5,26136
 100de70:	01804074 	movhi	r6,257
 100de74:	31af2104 	addi	r6,r6,-17276
 100de78:	100d8900 	call	100d890 <__cxa_throw>
 100de7c:	d8800317 	ldw	r2,12(sp)
 100de80:	00ffffc4 	movi	r3,-1
 100de84:	d9000217 	ldw	r4,8(sp)
 100de88:	10c00226 	beq	r2,r3,100de94 <_Znwm+0xf4>
 100de8c:	d8c00115 	stw	r3,4(sp)
 100de90:	100e1f80 	call	100e1f8 <_Unwind_SjLj_Resume>
 100de94:	00bfffc4 	movi	r2,-1
 100de98:	d8800115 	stw	r2,4(sp)
 100de9c:	100cec00 	call	100cec0 <__cxa_call_unexpected>

0100dea0 <__cxa_call_terminate>:
 100dea0:	defffe04 	addi	sp,sp,-8
 100dea4:	dc000015 	stw	r16,0(sp)
 100dea8:	dfc00115 	stw	ra,4(sp)
 100deac:	2021883a 	mov	r16,r4
 100deb0:	20000626 	beq	r4,zero,100decc <__cxa_call_terminate+0x2c>
 100deb4:	100d6f80 	call	100d6f8 <__cxa_begin_catch>
 100deb8:	80c00017 	ldw	r3,0(r16)
 100debc:	0090caf4 	movhi	r2,17195
 100dec0:	108ac004 	addi	r2,r2,11008
 100dec4:	81000117 	ldw	r4,4(r16)
 100dec8:	18800126 	beq	r3,r2,100ded0 <__cxa_call_terminate+0x30>
 100decc:	100d5ec0 	call	100d5ec <_ZSt9terminatev>
 100ded0:	0091d3b4 	movhi	r2,18254
 100ded4:	109550c4 	addi	r2,r2,21827
 100ded8:	20bffc1e 	bne	r4,r2,100decc <__cxa_call_terminate+0x2c>
 100dedc:	813ff817 	ldw	r4,-32(r16)
 100dee0:	100d5480 	call	100d548 <_ZN10__cxxabiv111__terminateEPFvvE>

0100dee4 <__cxa_get_globals_fast>:
 100dee4:	d0a09e04 	addi	r2,gp,-32136
 100dee8:	f800283a 	ret

0100deec <__cxa_get_globals>:
 100deec:	d0a09e04 	addi	r2,gp,-32136
 100def0:	f800283a 	ret

0100def4 <__mulsi3>:
 100def4:	20000a26 	beq	r4,zero,100df20 <__mulsi3+0x2c>
 100def8:	0007883a 	mov	r3,zero
 100defc:	2080004c 	andi	r2,r4,1
 100df00:	1005003a 	cmpeq	r2,r2,zero
 100df04:	2008d07a 	srli	r4,r4,1
 100df08:	1000011e 	bne	r2,zero,100df10 <__mulsi3+0x1c>
 100df0c:	1947883a 	add	r3,r3,r5
 100df10:	294b883a 	add	r5,r5,r5
 100df14:	203ff91e 	bne	r4,zero,100defc <__mulsi3+0x8>
 100df18:	1805883a 	mov	r2,r3
 100df1c:	f800283a 	ret
 100df20:	0007883a 	mov	r3,zero
 100df24:	1805883a 	mov	r2,r3
 100df28:	f800283a 	ret

0100df2c <_Unwind_SjLj_Register>:
 100df2c:	d0a0a017 	ldw	r2,-32128(gp)
 100df30:	20800015 	stw	r2,0(r4)
 100df34:	d120a015 	stw	r4,-32128(gp)
 100df38:	f800283a 	ret

0100df3c <_Unwind_SjLj_Unregister>:
 100df3c:	20800017 	ldw	r2,0(r4)
 100df40:	d0a0a015 	stw	r2,-32128(gp)
 100df44:	f800283a 	ret

0100df48 <_Unwind_GetGR>:
 100df48:	20800017 	ldw	r2,0(r4)
 100df4c:	294b883a 	add	r5,r5,r5
 100df50:	294b883a 	add	r5,r5,r5
 100df54:	288b883a 	add	r5,r5,r2
 100df58:	28800217 	ldw	r2,8(r5)
 100df5c:	f800283a 	ret

0100df60 <_Unwind_GetCFA>:
 100df60:	21000017 	ldw	r4,0(r4)
 100df64:	0005883a 	mov	r2,zero
 100df68:	20000126 	beq	r4,zero,100df70 <_Unwind_GetCFA+0x10>
 100df6c:	20800a17 	ldw	r2,40(r4)
 100df70:	f800283a 	ret

0100df74 <_Unwind_SetGR>:
 100df74:	20800017 	ldw	r2,0(r4)
 100df78:	294b883a 	add	r5,r5,r5
 100df7c:	294b883a 	add	r5,r5,r5
 100df80:	288b883a 	add	r5,r5,r2
 100df84:	29800215 	stw	r6,8(r5)
 100df88:	f800283a 	ret

0100df8c <_Unwind_GetIP>:
 100df8c:	20c00017 	ldw	r3,0(r4)
 100df90:	18800117 	ldw	r2,4(r3)
 100df94:	10800044 	addi	r2,r2,1
 100df98:	f800283a 	ret

0100df9c <_Unwind_GetIPInfo>:
 100df9c:	20c00017 	ldw	r3,0(r4)
 100dfa0:	28000015 	stw	zero,0(r5)
 100dfa4:	18800117 	ldw	r2,4(r3)
 100dfa8:	10800044 	addi	r2,r2,1
 100dfac:	f800283a 	ret

0100dfb0 <_Unwind_SetIP>:
 100dfb0:	20800017 	ldw	r2,0(r4)
 100dfb4:	297fffc4 	addi	r5,r5,-1
 100dfb8:	11400115 	stw	r5,4(r2)
 100dfbc:	f800283a 	ret

0100dfc0 <_Unwind_GetLanguageSpecificData>:
 100dfc0:	20c00017 	ldw	r3,0(r4)
 100dfc4:	18800717 	ldw	r2,28(r3)
 100dfc8:	f800283a 	ret

0100dfcc <_Unwind_GetRegionStart>:
 100dfcc:	0005883a 	mov	r2,zero
 100dfd0:	f800283a 	ret

0100dfd4 <_Unwind_FindEnclosingFunction>:
 100dfd4:	0005883a 	mov	r2,zero
 100dfd8:	f800283a 	ret

0100dfdc <_Unwind_GetDataRelBase>:
 100dfdc:	0005883a 	mov	r2,zero
 100dfe0:	f800283a 	ret

0100dfe4 <_Unwind_GetTextRelBase>:
 100dfe4:	0005883a 	mov	r2,zero
 100dfe8:	f800283a 	ret

0100dfec <_Unwind_ForcedUnwind_Phase2>:
 100dfec:	defff604 	addi	sp,sp,-40
 100dff0:	dd400815 	stw	r21,32(sp)
 100dff4:	dd000715 	stw	r20,28(sp)
 100dff8:	25400317 	ldw	r21,12(r4)
 100dffc:	25000417 	ldw	r20,16(r4)
 100e000:	28800017 	ldw	r2,0(r5)
 100e004:	dc800515 	stw	r18,20(sp)
 100e008:	dc000315 	stw	r16,12(sp)
 100e00c:	2825883a 	mov	r18,r5
 100e010:	2021883a 	mov	r16,r4
 100e014:	dfc00915 	stw	ra,36(sp)
 100e018:	dcc00615 	stw	r19,24(sp)
 100e01c:	dc400415 	stw	r17,16(sp)
 100e020:	00001406 	br	100e074 <_Unwind_ForcedUnwind_Phase2+0x88>
 100e024:	00800144 	movi	r2,5
 100e028:	88802626 	beq	r17,r2,100e0c4 <_Unwind_ForcedUnwind_Phase2+0xd8>
 100e02c:	98000c26 	beq	r19,zero,100e060 <_Unwind_ForcedUnwind_Phase2+0x74>
 100e030:	82000017 	ldw	r8,0(r16)
 100e034:	dc000015 	stw	r16,0(sp)
 100e038:	dc800115 	stw	r18,4(sp)
 100e03c:	82400117 	ldw	r9,4(r16)
 100e040:	400d883a 	mov	r6,r8
 100e044:	480f883a 	mov	r7,r9
 100e048:	983ee83a 	callr	r19
 100e04c:	1023883a 	mov	r17,r2
 100e050:	008001c4 	movi	r2,7
 100e054:	88801b26 	beq	r17,r2,100e0c4 <_Unwind_ForcedUnwind_Phase2+0xd8>
 100e058:	00800204 	movi	r2,8
 100e05c:	8880181e 	bne	r17,r2,100e0c0 <_Unwind_ForcedUnwind_Phase2+0xd4>
 100e060:	91000017 	ldw	r4,0(r18)
 100e064:	100df3c0 	call	100df3c <_Unwind_SjLj_Unregister>
 100e068:	90800017 	ldw	r2,0(r18)
 100e06c:	10800017 	ldw	r2,0(r2)
 100e070:	90800015 	stw	r2,0(r18)
 100e074:	01400684 	movi	r5,26
 100e078:	04400144 	movi	r17,5
 100e07c:	0027883a 	mov	r19,zero
 100e080:	10000326 	beq	r2,zero,100e090 <_Unwind_ForcedUnwind_Phase2+0xa4>
 100e084:	14c00617 	ldw	r19,24(r2)
 100e088:	0023883a 	mov	r17,zero
 100e08c:	01400284 	movi	r5,10
 100e090:	dc000015 	stw	r16,0(sp)
 100e094:	dc800115 	stw	r18,4(sp)
 100e098:	80800017 	ldw	r2,0(r16)
 100e09c:	dd000215 	stw	r20,8(sp)
 100e0a0:	80c00117 	ldw	r3,4(r16)
 100e0a4:	01000044 	movi	r4,1
 100e0a8:	100d883a 	mov	r6,r2
 100e0ac:	180f883a 	mov	r7,r3
 100e0b0:	a83ee83a 	callr	r21
 100e0b4:	01400284 	movi	r5,10
 100e0b8:	01000044 	movi	r4,1
 100e0bc:	103fd926 	beq	r2,zero,100e024 <_Unwind_ForcedUnwind_Phase2+0x38>
 100e0c0:	04400084 	movi	r17,2
 100e0c4:	8805883a 	mov	r2,r17
 100e0c8:	dfc00917 	ldw	ra,36(sp)
 100e0cc:	dd400817 	ldw	r21,32(sp)
 100e0d0:	dd000717 	ldw	r20,28(sp)
 100e0d4:	dcc00617 	ldw	r19,24(sp)
 100e0d8:	dc800517 	ldw	r18,20(sp)
 100e0dc:	dc400417 	ldw	r17,16(sp)
 100e0e0:	dc000317 	ldw	r16,12(sp)
 100e0e4:	dec00a04 	addi	sp,sp,40
 100e0e8:	f800283a 	ret

0100e0ec <_Unwind_DeleteException>:
 100e0ec:	20800217 	ldw	r2,8(r4)
 100e0f0:	200b883a 	mov	r5,r4
 100e0f4:	01000044 	movi	r4,1
 100e0f8:	10000126 	beq	r2,zero,100e100 <_Unwind_DeleteException+0x14>
 100e0fc:	1000683a 	jmp	r2
 100e100:	f800283a 	ret

0100e104 <_Unwind_RaiseException_Phase2>:
 100e104:	defffa04 	addi	sp,sp,-24
 100e108:	dc800415 	stw	r18,16(sp)
 100e10c:	2825883a 	mov	r18,r5
 100e110:	29400017 	ldw	r5,0(r5)
 100e114:	dc400315 	stw	r17,12(sp)
 100e118:	dfc00515 	stw	ra,20(sp)
 100e11c:	dc000215 	stw	r16,8(sp)
 100e120:	2023883a 	mov	r17,r4
 100e124:	28001b26 	beq	r5,zero,100e194 <_Unwind_RaiseException_Phase2+0x90>
 100e128:	88800417 	ldw	r2,16(r17)
 100e12c:	0007883a 	mov	r3,zero
 100e130:	2a000617 	ldw	r8,24(r5)
 100e134:	28a1003a 	cmpeq	r16,r5,r2
 100e138:	802090ba 	slli	r16,r16,2
 100e13c:	18001b1e 	bne	r3,zero,100e1ac <_Unwind_RaiseException_Phase2+0xa8>
 100e140:	40000e26 	beq	r8,zero,100e17c <_Unwind_RaiseException_Phase2+0x78>
 100e144:	88800017 	ldw	r2,0(r17)
 100e148:	dc400015 	stw	r17,0(sp)
 100e14c:	dc800115 	stw	r18,4(sp)
 100e150:	88c00117 	ldw	r3,4(r17)
 100e154:	01000044 	movi	r4,1
 100e158:	81400094 	ori	r5,r16,2
 100e15c:	180f883a 	mov	r7,r3
 100e160:	100d883a 	mov	r6,r2
 100e164:	403ee83a 	callr	r8
 100e168:	1007883a 	mov	r3,r2
 100e16c:	008001c4 	movi	r2,7
 100e170:	18800f26 	beq	r3,r2,100e1b0 <_Unwind_RaiseException_Phase2+0xac>
 100e174:	00800204 	movi	r2,8
 100e178:	18800c1e 	bne	r3,r2,100e1ac <_Unwind_RaiseException_Phase2+0xa8>
 100e17c:	8000131e 	bne	r16,zero,100e1cc <_Unwind_RaiseException_Phase2+0xc8>
 100e180:	91400017 	ldw	r5,0(r18)
 100e184:	28800017 	ldw	r2,0(r5)
 100e188:	100b883a 	mov	r5,r2
 100e18c:	90800015 	stw	r2,0(r18)
 100e190:	283fe51e 	bne	r5,zero,100e128 <_Unwind_RaiseException_Phase2+0x24>
 100e194:	88800417 	ldw	r2,16(r17)
 100e198:	00c00144 	movi	r3,5
 100e19c:	0011883a 	mov	r8,zero
 100e1a0:	28a1003a 	cmpeq	r16,r5,r2
 100e1a4:	802090ba 	slli	r16,r16,2
 100e1a8:	183fe526 	beq	r3,zero,100e140 <_Unwind_RaiseException_Phase2+0x3c>
 100e1ac:	00c00084 	movi	r3,2
 100e1b0:	1805883a 	mov	r2,r3
 100e1b4:	dfc00517 	ldw	ra,20(sp)
 100e1b8:	dc800417 	ldw	r18,16(sp)
 100e1bc:	dc400317 	ldw	r17,12(sp)
 100e1c0:	dc000217 	ldw	r16,8(sp)
 100e1c4:	dec00604 	addi	sp,sp,24
 100e1c8:	f800283a 	ret
 100e1cc:	100e4740 	call	100e474 <abort>

0100e1d0 <uw_install_context>:
 100e1d0:	28800017 	ldw	r2,0(r5)
 100e1d4:	deffff04 	addi	sp,sp,-4
 100e1d8:	df000015 	stw	fp,0(sp)
 100e1dc:	10c00804 	addi	r3,r2,32
 100e1e0:	d839883a 	mov	fp,sp
 100e1e4:	d0a0a015 	stw	r2,-32128(gp)
 100e1e8:	19000117 	ldw	r4,4(r3)
 100e1ec:	1f000017 	ldw	fp,0(r3)
 100e1f0:	1ec00217 	ldw	sp,8(r3)
 100e1f4:	2000683a 	jmp	r4

0100e1f8 <_Unwind_SjLj_Resume>:
 100e1f8:	d0e0a017 	ldw	r3,-32128(gp)
 100e1fc:	20800317 	ldw	r2,12(r4)
 100e200:	defffc04 	addi	sp,sp,-16
 100e204:	dfc00315 	stw	ra,12(sp)
 100e208:	dc000215 	stw	r16,8(sp)
 100e20c:	d8c00015 	stw	r3,0(sp)
 100e210:	d8c00115 	stw	r3,4(sp)
 100e214:	1000071e 	bne	r2,zero,100e234 <_Unwind_SjLj_Resume+0x3c>
 100e218:	dc000104 	addi	r16,sp,4
 100e21c:	800b883a 	mov	r5,r16
 100e220:	100e1040 	call	100e104 <_Unwind_RaiseException_Phase2>
 100e224:	1007883a 	mov	r3,r2
 100e228:	008001c4 	movi	r2,7
 100e22c:	18800626 	beq	r3,r2,100e248 <_Unwind_SjLj_Resume+0x50>
 100e230:	100e4740 	call	100e474 <abort>
 100e234:	dc000104 	addi	r16,sp,4
 100e238:	800b883a 	mov	r5,r16
 100e23c:	100dfec0 	call	100dfec <_Unwind_ForcedUnwind_Phase2>
 100e240:	1007883a 	mov	r3,r2
 100e244:	003ff806 	br	100e228 <_Unwind_SjLj_Resume+0x30>
 100e248:	800b883a 	mov	r5,r16
 100e24c:	d809883a 	mov	r4,sp
 100e250:	100e1d00 	call	100e1d0 <uw_install_context>

0100e254 <_Unwind_SjLj_RaiseException>:
 100e254:	d0a0a017 	ldw	r2,-32128(gp)
 100e258:	defff804 	addi	sp,sp,-32
 100e25c:	dc000415 	stw	r16,16(sp)
 100e260:	dfc00715 	stw	ra,28(sp)
 100e264:	dc800615 	stw	r18,24(sp)
 100e268:	dc400515 	stw	r17,20(sp)
 100e26c:	2021883a 	mov	r16,r4
 100e270:	d8800215 	stw	r2,8(sp)
 100e274:	d8800315 	stw	r2,12(sp)
 100e278:	10001626 	beq	r2,zero,100e2d4 <_Unwind_SjLj_RaiseException+0x80>
 100e27c:	dc400304 	addi	r17,sp,12
 100e280:	04800184 	movi	r18,6
 100e284:	00000106 	br	100e28c <_Unwind_SjLj_RaiseException+0x38>
 100e288:	d8800315 	stw	r2,12(sp)
 100e28c:	12000617 	ldw	r8,24(r2)
 100e290:	40000d26 	beq	r8,zero,100e2c8 <_Unwind_SjLj_RaiseException+0x74>
 100e294:	80800017 	ldw	r2,0(r16)
 100e298:	dc000015 	stw	r16,0(sp)
 100e29c:	80c00117 	ldw	r3,4(r16)
 100e2a0:	01000044 	movi	r4,1
 100e2a4:	dc400115 	stw	r17,4(sp)
 100e2a8:	180f883a 	mov	r7,r3
 100e2ac:	200b883a 	mov	r5,r4
 100e2b0:	100d883a 	mov	r6,r2
 100e2b4:	403ee83a 	callr	r8
 100e2b8:	1007883a 	mov	r3,r2
 100e2bc:	14800d26 	beq	r2,r18,100e2f4 <_Unwind_SjLj_RaiseException+0xa0>
 100e2c0:	00800204 	movi	r2,8
 100e2c4:	1880191e 	bne	r3,r2,100e32c <_Unwind_SjLj_RaiseException+0xd8>
 100e2c8:	d8800317 	ldw	r2,12(sp)
 100e2cc:	10800017 	ldw	r2,0(r2)
 100e2d0:	103fed1e 	bne	r2,zero,100e288 <_Unwind_SjLj_RaiseException+0x34>
 100e2d4:	00c00144 	movi	r3,5
 100e2d8:	1805883a 	mov	r2,r3
 100e2dc:	dfc00717 	ldw	ra,28(sp)
 100e2e0:	dc800617 	ldw	r18,24(sp)
 100e2e4:	dc400517 	ldw	r17,20(sp)
 100e2e8:	dc000417 	ldw	r16,16(sp)
 100e2ec:	dec00804 	addi	sp,sp,32
 100e2f0:	f800283a 	ret
 100e2f4:	d8800317 	ldw	r2,12(sp)
 100e2f8:	80000315 	stw	zero,12(r16)
 100e2fc:	8009883a 	mov	r4,r16
 100e300:	80800415 	stw	r2,16(r16)
 100e304:	d8800217 	ldw	r2,8(sp)
 100e308:	880b883a 	mov	r5,r17
 100e30c:	d8800315 	stw	r2,12(sp)
 100e310:	100e1040 	call	100e104 <_Unwind_RaiseException_Phase2>
 100e314:	1007883a 	mov	r3,r2
 100e318:	008001c4 	movi	r2,7
 100e31c:	18bfee1e 	bne	r3,r2,100e2d8 <_Unwind_SjLj_RaiseException+0x84>
 100e320:	880b883a 	mov	r5,r17
 100e324:	d9000204 	addi	r4,sp,8
 100e328:	100e1d00 	call	100e1d0 <uw_install_context>
 100e32c:	00c000c4 	movi	r3,3
 100e330:	1805883a 	mov	r2,r3
 100e334:	dfc00717 	ldw	ra,28(sp)
 100e338:	dc800617 	ldw	r18,24(sp)
 100e33c:	dc400517 	ldw	r17,20(sp)
 100e340:	dc000417 	ldw	r16,16(sp)
 100e344:	dec00804 	addi	sp,sp,32
 100e348:	f800283a 	ret

0100e34c <_Unwind_SjLj_ForcedUnwind>:
 100e34c:	defffc04 	addi	sp,sp,-16
 100e350:	d0a0a017 	ldw	r2,-32128(gp)
 100e354:	dc000215 	stw	r16,8(sp)
 100e358:	dc000104 	addi	r16,sp,4
 100e35c:	21400315 	stw	r5,12(r4)
 100e360:	21800415 	stw	r6,16(r4)
 100e364:	800b883a 	mov	r5,r16
 100e368:	dfc00315 	stw	ra,12(sp)
 100e36c:	d8800015 	stw	r2,0(sp)
 100e370:	d8800115 	stw	r2,4(sp)
 100e374:	100dfec0 	call	100dfec <_Unwind_ForcedUnwind_Phase2>
 100e378:	00c001c4 	movi	r3,7
 100e37c:	10c00426 	beq	r2,r3,100e390 <_Unwind_SjLj_ForcedUnwind+0x44>
 100e380:	dfc00317 	ldw	ra,12(sp)
 100e384:	dc000217 	ldw	r16,8(sp)
 100e388:	dec00404 	addi	sp,sp,16
 100e38c:	f800283a 	ret
 100e390:	800b883a 	mov	r5,r16
 100e394:	d809883a 	mov	r4,sp
 100e398:	100e1d00 	call	100e1d0 <uw_install_context>

0100e39c <_Unwind_Backtrace>:
 100e39c:	d0a0a017 	ldw	r2,-32128(gp)
 100e3a0:	defffa04 	addi	sp,sp,-24
 100e3a4:	dcc00415 	stw	r19,16(sp)
 100e3a8:	dc800315 	stw	r18,12(sp)
 100e3ac:	dc400215 	stw	r17,8(sp)
 100e3b0:	2025883a 	mov	r18,r4
 100e3b4:	2823883a 	mov	r17,r5
 100e3b8:	04c00144 	movi	r19,5
 100e3bc:	dfc00515 	stw	ra,20(sp)
 100e3c0:	dc000115 	stw	r16,4(sp)
 100e3c4:	d8800015 	stw	r2,0(sp)
 100e3c8:	00000406 	br	100e3dc <_Unwind_Backtrace+0x40>
 100e3cc:	84c00b26 	beq	r16,r19,100e3fc <_Unwind_Backtrace+0x60>
 100e3d0:	d8800017 	ldw	r2,0(sp)
 100e3d4:	10800017 	ldw	r2,0(r2)
 100e3d8:	d8800015 	stw	r2,0(sp)
 100e3dc:	04000144 	movi	r16,5
 100e3e0:	10000126 	beq	r2,zero,100e3e8 <_Unwind_Backtrace+0x4c>
 100e3e4:	0021883a 	mov	r16,zero
 100e3e8:	d809883a 	mov	r4,sp
 100e3ec:	880b883a 	mov	r5,r17
 100e3f0:	903ee83a 	callr	r18
 100e3f4:	103ff526 	beq	r2,zero,100e3cc <_Unwind_Backtrace+0x30>
 100e3f8:	040000c4 	movi	r16,3
 100e3fc:	8005883a 	mov	r2,r16
 100e400:	dfc00517 	ldw	ra,20(sp)
 100e404:	dcc00417 	ldw	r19,16(sp)
 100e408:	dc800317 	ldw	r18,12(sp)
 100e40c:	dc400217 	ldw	r17,8(sp)
 100e410:	dc000117 	ldw	r16,4(sp)
 100e414:	dec00604 	addi	sp,sp,24
 100e418:	f800283a 	ret

0100e41c <_Unwind_SjLj_Resume_or_Rethrow>:
 100e41c:	20800317 	ldw	r2,12(r4)
 100e420:	defffc04 	addi	sp,sp,-16
 100e424:	dfc00315 	stw	ra,12(sp)
 100e428:	dc000215 	stw	r16,8(sp)
 100e42c:	10000926 	beq	r2,zero,100e454 <_Unwind_SjLj_Resume_or_Rethrow+0x38>
 100e430:	d0a0a017 	ldw	r2,-32128(gp)
 100e434:	dc000104 	addi	r16,sp,4
 100e438:	800b883a 	mov	r5,r16
 100e43c:	d8800015 	stw	r2,0(sp)
 100e440:	d8800115 	stw	r2,4(sp)
 100e444:	100dfec0 	call	100dfec <_Unwind_ForcedUnwind_Phase2>
 100e448:	00c001c4 	movi	r3,7
 100e44c:	10c00626 	beq	r2,r3,100e468 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
 100e450:	100e4740 	call	100e474 <abort>
 100e454:	100e2540 	call	100e254 <_Unwind_SjLj_RaiseException>
 100e458:	dfc00317 	ldw	ra,12(sp)
 100e45c:	dc000217 	ldw	r16,8(sp)
 100e460:	dec00404 	addi	sp,sp,16
 100e464:	f800283a 	ret
 100e468:	800b883a 	mov	r5,r16
 100e46c:	d809883a 	mov	r4,sp
 100e470:	100e1d00 	call	100e1d0 <uw_install_context>

0100e474 <abort>:
 100e474:	deffff04 	addi	sp,sp,-4
 100e478:	01000184 	movi	r4,6
 100e47c:	dfc00015 	stw	ra,0(sp)
 100e480:	100f1cc0 	call	100f1cc <raise>
 100e484:	01000044 	movi	r4,1
 100e488:	10189840 	call	1018984 <_exit>

0100e48c <free>:
 100e48c:	008040f4 	movhi	r2,259
 100e490:	10a3d104 	addi	r2,r2,-28860
 100e494:	200b883a 	mov	r5,r4
 100e498:	11000017 	ldw	r4,0(r2)
 100e49c:	10138941 	jmpi	1013894 <_free_r>

0100e4a0 <malloc>:
 100e4a0:	008040f4 	movhi	r2,259
 100e4a4:	10a3d104 	addi	r2,r2,-28860
 100e4a8:	200b883a 	mov	r5,r4
 100e4ac:	11000017 	ldw	r4,0(r2)
 100e4b0:	100e4b41 	jmpi	100e4b4 <_malloc_r>

0100e4b4 <_malloc_r>:
 100e4b4:	defff604 	addi	sp,sp,-40
 100e4b8:	28c002c4 	addi	r3,r5,11
 100e4bc:	00800584 	movi	r2,22
 100e4c0:	dc800215 	stw	r18,8(sp)
 100e4c4:	dfc00915 	stw	ra,36(sp)
 100e4c8:	df000815 	stw	fp,32(sp)
 100e4cc:	ddc00715 	stw	r23,28(sp)
 100e4d0:	dd800615 	stw	r22,24(sp)
 100e4d4:	dd400515 	stw	r21,20(sp)
 100e4d8:	dd000415 	stw	r20,16(sp)
 100e4dc:	dcc00315 	stw	r19,12(sp)
 100e4e0:	dc400115 	stw	r17,4(sp)
 100e4e4:	dc000015 	stw	r16,0(sp)
 100e4e8:	2025883a 	mov	r18,r4
 100e4ec:	10c01236 	bltu	r2,r3,100e538 <_malloc_r+0x84>
 100e4f0:	04400404 	movi	r17,16
 100e4f4:	8940142e 	bgeu	r17,r5,100e548 <_malloc_r+0x94>
 100e4f8:	00800304 	movi	r2,12
 100e4fc:	0007883a 	mov	r3,zero
 100e500:	90800015 	stw	r2,0(r18)
 100e504:	1805883a 	mov	r2,r3
 100e508:	dfc00917 	ldw	ra,36(sp)
 100e50c:	df000817 	ldw	fp,32(sp)
 100e510:	ddc00717 	ldw	r23,28(sp)
 100e514:	dd800617 	ldw	r22,24(sp)
 100e518:	dd400517 	ldw	r21,20(sp)
 100e51c:	dd000417 	ldw	r20,16(sp)
 100e520:	dcc00317 	ldw	r19,12(sp)
 100e524:	dc800217 	ldw	r18,8(sp)
 100e528:	dc400117 	ldw	r17,4(sp)
 100e52c:	dc000017 	ldw	r16,0(sp)
 100e530:	dec00a04 	addi	sp,sp,40
 100e534:	f800283a 	ret
 100e538:	00bffe04 	movi	r2,-8
 100e53c:	18a2703a 	and	r17,r3,r2
 100e540:	883fed16 	blt	r17,zero,100e4f8 <_malloc_r+0x44>
 100e544:	897fec36 	bltu	r17,r5,100e4f8 <_malloc_r+0x44>
 100e548:	9009883a 	mov	r4,r18
 100e54c:	101952c0 	call	101952c <__malloc_lock>
 100e550:	00807dc4 	movi	r2,503
 100e554:	14402b2e 	bgeu	r2,r17,100e604 <_malloc_r+0x150>
 100e558:	8806d27a 	srli	r3,r17,9
 100e55c:	18003f1e 	bne	r3,zero,100e65c <_malloc_r+0x1a8>
 100e560:	880cd0fa 	srli	r6,r17,3
 100e564:	300490fa 	slli	r2,r6,3
 100e568:	02c040b4 	movhi	r11,258
 100e56c:	5adc8e04 	addi	r11,r11,29240
 100e570:	12cb883a 	add	r5,r2,r11
 100e574:	2c000317 	ldw	r16,12(r5)
 100e578:	580f883a 	mov	r7,r11
 100e57c:	2c00041e 	bne	r5,r16,100e590 <_malloc_r+0xdc>
 100e580:	00000a06 	br	100e5ac <_malloc_r+0xf8>
 100e584:	1800860e 	bge	r3,zero,100e7a0 <_malloc_r+0x2ec>
 100e588:	84000317 	ldw	r16,12(r16)
 100e58c:	2c000726 	beq	r5,r16,100e5ac <_malloc_r+0xf8>
 100e590:	80800117 	ldw	r2,4(r16)
 100e594:	00ffff04 	movi	r3,-4
 100e598:	10c8703a 	and	r4,r2,r3
 100e59c:	2447c83a 	sub	r3,r4,r17
 100e5a0:	008003c4 	movi	r2,15
 100e5a4:	10fff70e 	bge	r2,r3,100e584 <_malloc_r+0xd0>
 100e5a8:	31bfffc4 	addi	r6,r6,-1
 100e5ac:	32400044 	addi	r9,r6,1
 100e5b0:	028040b4 	movhi	r10,258
 100e5b4:	529c9004 	addi	r10,r10,29248
 100e5b8:	54000217 	ldw	r16,8(r10)
 100e5bc:	8280a026 	beq	r16,r10,100e840 <_malloc_r+0x38c>
 100e5c0:	80800117 	ldw	r2,4(r16)
 100e5c4:	00ffff04 	movi	r3,-4
 100e5c8:	10ca703a 	and	r5,r2,r3
 100e5cc:	2c4dc83a 	sub	r6,r5,r17
 100e5d0:	008003c4 	movi	r2,15
 100e5d4:	11808316 	blt	r2,r6,100e7e4 <_malloc_r+0x330>
 100e5d8:	52800315 	stw	r10,12(r10)
 100e5dc:	52800215 	stw	r10,8(r10)
 100e5e0:	30002916 	blt	r6,zero,100e688 <_malloc_r+0x1d4>
 100e5e4:	8147883a 	add	r3,r16,r5
 100e5e8:	18800117 	ldw	r2,4(r3)
 100e5ec:	9009883a 	mov	r4,r18
 100e5f0:	10800054 	ori	r2,r2,1
 100e5f4:	18800115 	stw	r2,4(r3)
 100e5f8:	10196340 	call	1019634 <__malloc_unlock>
 100e5fc:	80c00204 	addi	r3,r16,8
 100e600:	003fc006 	br	100e504 <_malloc_r+0x50>
 100e604:	02c040b4 	movhi	r11,258
 100e608:	5adc8e04 	addi	r11,r11,29240
 100e60c:	8ac5883a 	add	r2,r17,r11
 100e610:	14000317 	ldw	r16,12(r2)
 100e614:	580f883a 	mov	r7,r11
 100e618:	8806d0fa 	srli	r3,r17,3
 100e61c:	14006c26 	beq	r2,r16,100e7d0 <_malloc_r+0x31c>
 100e620:	80c00117 	ldw	r3,4(r16)
 100e624:	00bfff04 	movi	r2,-4
 100e628:	81800317 	ldw	r6,12(r16)
 100e62c:	1886703a 	and	r3,r3,r2
 100e630:	80c7883a 	add	r3,r16,r3
 100e634:	18800117 	ldw	r2,4(r3)
 100e638:	81400217 	ldw	r5,8(r16)
 100e63c:	9009883a 	mov	r4,r18
 100e640:	10800054 	ori	r2,r2,1
 100e644:	18800115 	stw	r2,4(r3)
 100e648:	31400215 	stw	r5,8(r6)
 100e64c:	29800315 	stw	r6,12(r5)
 100e650:	10196340 	call	1019634 <__malloc_unlock>
 100e654:	80c00204 	addi	r3,r16,8
 100e658:	003faa06 	br	100e504 <_malloc_r+0x50>
 100e65c:	00800104 	movi	r2,4
 100e660:	10c0052e 	bgeu	r2,r3,100e678 <_malloc_r+0x1c4>
 100e664:	00800504 	movi	r2,20
 100e668:	10c07836 	bltu	r2,r3,100e84c <_malloc_r+0x398>
 100e66c:	198016c4 	addi	r6,r3,91
 100e670:	300490fa 	slli	r2,r6,3
 100e674:	003fbc06 	br	100e568 <_malloc_r+0xb4>
 100e678:	8804d1ba 	srli	r2,r17,6
 100e67c:	11800e04 	addi	r6,r2,56
 100e680:	300490fa 	slli	r2,r6,3
 100e684:	003fb806 	br	100e568 <_malloc_r+0xb4>
 100e688:	00807fc4 	movi	r2,511
 100e68c:	1140bb36 	bltu	r2,r5,100e97c <_malloc_r+0x4c8>
 100e690:	2806d0fa 	srli	r3,r5,3
 100e694:	573ffe04 	addi	fp,r10,-8
 100e698:	00800044 	movi	r2,1
 100e69c:	180890fa 	slli	r4,r3,3
 100e6a0:	1807d0ba 	srai	r3,r3,2
 100e6a4:	e1c00117 	ldw	r7,4(fp)
 100e6a8:	5909883a 	add	r4,r11,r4
 100e6ac:	21400217 	ldw	r5,8(r4)
 100e6b0:	10c4983a 	sll	r2,r2,r3
 100e6b4:	81000315 	stw	r4,12(r16)
 100e6b8:	81400215 	stw	r5,8(r16)
 100e6bc:	388eb03a 	or	r7,r7,r2
 100e6c0:	2c000315 	stw	r16,12(r5)
 100e6c4:	24000215 	stw	r16,8(r4)
 100e6c8:	e1c00115 	stw	r7,4(fp)
 100e6cc:	4807883a 	mov	r3,r9
 100e6d0:	4800cd16 	blt	r9,zero,100ea08 <_malloc_r+0x554>
 100e6d4:	1807d0ba 	srai	r3,r3,2
 100e6d8:	00800044 	movi	r2,1
 100e6dc:	10c8983a 	sll	r4,r2,r3
 100e6e0:	39004436 	bltu	r7,r4,100e7f4 <_malloc_r+0x340>
 100e6e4:	21c4703a 	and	r2,r4,r7
 100e6e8:	10000a1e 	bne	r2,zero,100e714 <_malloc_r+0x260>
 100e6ec:	2109883a 	add	r4,r4,r4
 100e6f0:	00bfff04 	movi	r2,-4
 100e6f4:	4884703a 	and	r2,r9,r2
 100e6f8:	3906703a 	and	r3,r7,r4
 100e6fc:	12400104 	addi	r9,r2,4
 100e700:	1800041e 	bne	r3,zero,100e714 <_malloc_r+0x260>
 100e704:	2109883a 	add	r4,r4,r4
 100e708:	3904703a 	and	r2,r7,r4
 100e70c:	4a400104 	addi	r9,r9,4
 100e710:	103ffc26 	beq	r2,zero,100e704 <_malloc_r+0x250>
 100e714:	480490fa 	slli	r2,r9,3
 100e718:	4819883a 	mov	r12,r9
 100e71c:	023fff04 	movi	r8,-4
 100e720:	589b883a 	add	r13,r11,r2
 100e724:	6807883a 	mov	r3,r13
 100e728:	014003c4 	movi	r5,15
 100e72c:	1c000317 	ldw	r16,12(r3)
 100e730:	1c00041e 	bne	r3,r16,100e744 <_malloc_r+0x290>
 100e734:	0000a706 	br	100e9d4 <_malloc_r+0x520>
 100e738:	3000ab0e 	bge	r6,zero,100e9e8 <_malloc_r+0x534>
 100e73c:	84000317 	ldw	r16,12(r16)
 100e740:	1c00a426 	beq	r3,r16,100e9d4 <_malloc_r+0x520>
 100e744:	80800117 	ldw	r2,4(r16)
 100e748:	1204703a 	and	r2,r2,r8
 100e74c:	144dc83a 	sub	r6,r2,r17
 100e750:	29bff90e 	bge	r5,r6,100e738 <_malloc_r+0x284>
 100e754:	81000317 	ldw	r4,12(r16)
 100e758:	80c00217 	ldw	r3,8(r16)
 100e75c:	89400054 	ori	r5,r17,1
 100e760:	8445883a 	add	r2,r16,r17
 100e764:	20c00215 	stw	r3,8(r4)
 100e768:	19000315 	stw	r4,12(r3)
 100e76c:	81400115 	stw	r5,4(r16)
 100e770:	1187883a 	add	r3,r2,r6
 100e774:	31000054 	ori	r4,r6,1
 100e778:	50800315 	stw	r2,12(r10)
 100e77c:	50800215 	stw	r2,8(r10)
 100e780:	19800015 	stw	r6,0(r3)
 100e784:	11000115 	stw	r4,4(r2)
 100e788:	12800215 	stw	r10,8(r2)
 100e78c:	12800315 	stw	r10,12(r2)
 100e790:	9009883a 	mov	r4,r18
 100e794:	10196340 	call	1019634 <__malloc_unlock>
 100e798:	80c00204 	addi	r3,r16,8
 100e79c:	003f5906 	br	100e504 <_malloc_r+0x50>
 100e7a0:	8109883a 	add	r4,r16,r4
 100e7a4:	20800117 	ldw	r2,4(r4)
 100e7a8:	80c00217 	ldw	r3,8(r16)
 100e7ac:	81400317 	ldw	r5,12(r16)
 100e7b0:	10800054 	ori	r2,r2,1
 100e7b4:	20800115 	stw	r2,4(r4)
 100e7b8:	28c00215 	stw	r3,8(r5)
 100e7bc:	19400315 	stw	r5,12(r3)
 100e7c0:	9009883a 	mov	r4,r18
 100e7c4:	10196340 	call	1019634 <__malloc_unlock>
 100e7c8:	80c00204 	addi	r3,r16,8
 100e7cc:	003f4d06 	br	100e504 <_malloc_r+0x50>
 100e7d0:	80800204 	addi	r2,r16,8
 100e7d4:	14000317 	ldw	r16,12(r2)
 100e7d8:	143f911e 	bne	r2,r16,100e620 <_malloc_r+0x16c>
 100e7dc:	1a400084 	addi	r9,r3,2
 100e7e0:	003f7306 	br	100e5b0 <_malloc_r+0xfc>
 100e7e4:	88c00054 	ori	r3,r17,1
 100e7e8:	8445883a 	add	r2,r16,r17
 100e7ec:	80c00115 	stw	r3,4(r16)
 100e7f0:	003fdf06 	br	100e770 <_malloc_r+0x2bc>
 100e7f4:	e4000217 	ldw	r16,8(fp)
 100e7f8:	00bfff04 	movi	r2,-4
 100e7fc:	80c00117 	ldw	r3,4(r16)
 100e800:	802d883a 	mov	r22,r16
 100e804:	18aa703a 	and	r21,r3,r2
 100e808:	ac401636 	bltu	r21,r17,100e864 <_malloc_r+0x3b0>
 100e80c:	ac49c83a 	sub	r4,r21,r17
 100e810:	008003c4 	movi	r2,15
 100e814:	1100130e 	bge	r2,r4,100e864 <_malloc_r+0x3b0>
 100e818:	88800054 	ori	r2,r17,1
 100e81c:	8447883a 	add	r3,r16,r17
 100e820:	80800115 	stw	r2,4(r16)
 100e824:	20800054 	ori	r2,r4,1
 100e828:	18800115 	stw	r2,4(r3)
 100e82c:	e0c00215 	stw	r3,8(fp)
 100e830:	9009883a 	mov	r4,r18
 100e834:	10196340 	call	1019634 <__malloc_unlock>
 100e838:	80c00204 	addi	r3,r16,8
 100e83c:	003f3106 	br	100e504 <_malloc_r+0x50>
 100e840:	39c00117 	ldw	r7,4(r7)
 100e844:	573ffe04 	addi	fp,r10,-8
 100e848:	003fa006 	br	100e6cc <_malloc_r+0x218>
 100e84c:	00801504 	movi	r2,84
 100e850:	10c06736 	bltu	r2,r3,100e9f0 <_malloc_r+0x53c>
 100e854:	8804d33a 	srli	r2,r17,12
 100e858:	11801b84 	addi	r6,r2,110
 100e85c:	300490fa 	slli	r2,r6,3
 100e860:	003f4106 	br	100e568 <_malloc_r+0xb4>
 100e864:	d0a0a117 	ldw	r2,-32124(gp)
 100e868:	d0e06417 	ldw	r3,-32368(gp)
 100e86c:	053fffc4 	movi	r20,-1
 100e870:	10800404 	addi	r2,r2,16
 100e874:	88a7883a 	add	r19,r17,r2
 100e878:	1d000326 	beq	r3,r20,100e888 <_malloc_r+0x3d4>
 100e87c:	98c3ffc4 	addi	r3,r19,4095
 100e880:	00bc0004 	movi	r2,-4096
 100e884:	18a6703a 	and	r19,r3,r2
 100e888:	9009883a 	mov	r4,r18
 100e88c:	980b883a 	mov	r5,r19
 100e890:	100f0900 	call	100f090 <_sbrk_r>
 100e894:	1009883a 	mov	r4,r2
 100e898:	15000426 	beq	r2,r20,100e8ac <_malloc_r+0x3f8>
 100e89c:	854b883a 	add	r5,r16,r21
 100e8a0:	1029883a 	mov	r20,r2
 100e8a4:	11405a2e 	bgeu	r2,r5,100ea10 <_malloc_r+0x55c>
 100e8a8:	87000c26 	beq	r16,fp,100e8dc <_malloc_r+0x428>
 100e8ac:	e4000217 	ldw	r16,8(fp)
 100e8b0:	80c00117 	ldw	r3,4(r16)
 100e8b4:	00bfff04 	movi	r2,-4
 100e8b8:	1884703a 	and	r2,r3,r2
 100e8bc:	14400336 	bltu	r2,r17,100e8cc <_malloc_r+0x418>
 100e8c0:	1449c83a 	sub	r4,r2,r17
 100e8c4:	008003c4 	movi	r2,15
 100e8c8:	113fd316 	blt	r2,r4,100e818 <_malloc_r+0x364>
 100e8cc:	9009883a 	mov	r4,r18
 100e8d0:	10196340 	call	1019634 <__malloc_unlock>
 100e8d4:	0007883a 	mov	r3,zero
 100e8d8:	003f0a06 	br	100e504 <_malloc_r+0x50>
 100e8dc:	05c040f4 	movhi	r23,259
 100e8e0:	bdde3604 	addi	r23,r23,30936
 100e8e4:	b8800017 	ldw	r2,0(r23)
 100e8e8:	988d883a 	add	r6,r19,r2
 100e8ec:	b9800015 	stw	r6,0(r23)
 100e8f0:	d0e06417 	ldw	r3,-32368(gp)
 100e8f4:	00bfffc4 	movi	r2,-1
 100e8f8:	18808e26 	beq	r3,r2,100eb34 <_malloc_r+0x680>
 100e8fc:	2145c83a 	sub	r2,r4,r5
 100e900:	3085883a 	add	r2,r6,r2
 100e904:	b8800015 	stw	r2,0(r23)
 100e908:	20c001cc 	andi	r3,r4,7
 100e90c:	18005f1e 	bne	r3,zero,100ea8c <_malloc_r+0x5d8>
 100e910:	000b883a 	mov	r5,zero
 100e914:	a4c5883a 	add	r2,r20,r19
 100e918:	1083ffcc 	andi	r2,r2,4095
 100e91c:	00c40004 	movi	r3,4096
 100e920:	1887c83a 	sub	r3,r3,r2
 100e924:	28e7883a 	add	r19,r5,r3
 100e928:	9009883a 	mov	r4,r18
 100e92c:	980b883a 	mov	r5,r19
 100e930:	100f0900 	call	100f090 <_sbrk_r>
 100e934:	1007883a 	mov	r3,r2
 100e938:	00bfffc4 	movi	r2,-1
 100e93c:	18807a26 	beq	r3,r2,100eb28 <_malloc_r+0x674>
 100e940:	1d05c83a 	sub	r2,r3,r20
 100e944:	9885883a 	add	r2,r19,r2
 100e948:	10c00054 	ori	r3,r2,1
 100e94c:	b8800017 	ldw	r2,0(r23)
 100e950:	a021883a 	mov	r16,r20
 100e954:	a0c00115 	stw	r3,4(r20)
 100e958:	9885883a 	add	r2,r19,r2
 100e95c:	b8800015 	stw	r2,0(r23)
 100e960:	e5000215 	stw	r20,8(fp)
 100e964:	b7003626 	beq	r22,fp,100ea40 <_malloc_r+0x58c>
 100e968:	018003c4 	movi	r6,15
 100e96c:	35404b36 	bltu	r6,r21,100ea9c <_malloc_r+0x5e8>
 100e970:	00800044 	movi	r2,1
 100e974:	a0800115 	stw	r2,4(r20)
 100e978:	003fcd06 	br	100e8b0 <_malloc_r+0x3fc>
 100e97c:	2808d27a 	srli	r4,r5,9
 100e980:	2000371e 	bne	r4,zero,100ea60 <_malloc_r+0x5ac>
 100e984:	2808d0fa 	srli	r4,r5,3
 100e988:	200690fa 	slli	r3,r4,3
 100e98c:	1ad1883a 	add	r8,r3,r11
 100e990:	41800217 	ldw	r6,8(r8)
 100e994:	41805b26 	beq	r8,r6,100eb04 <_malloc_r+0x650>
 100e998:	30800117 	ldw	r2,4(r6)
 100e99c:	00ffff04 	movi	r3,-4
 100e9a0:	10c4703a 	and	r2,r2,r3
 100e9a4:	2880022e 	bgeu	r5,r2,100e9b0 <_malloc_r+0x4fc>
 100e9a8:	31800217 	ldw	r6,8(r6)
 100e9ac:	41bffa1e 	bne	r8,r6,100e998 <_malloc_r+0x4e4>
 100e9b0:	32000317 	ldw	r8,12(r6)
 100e9b4:	39c00117 	ldw	r7,4(r7)
 100e9b8:	82000315 	stw	r8,12(r16)
 100e9bc:	81800215 	stw	r6,8(r16)
 100e9c0:	070040b4 	movhi	fp,258
 100e9c4:	e71c8e04 	addi	fp,fp,29240
 100e9c8:	34000315 	stw	r16,12(r6)
 100e9cc:	44000215 	stw	r16,8(r8)
 100e9d0:	003f3e06 	br	100e6cc <_malloc_r+0x218>
 100e9d4:	63000044 	addi	r12,r12,1
 100e9d8:	608000cc 	andi	r2,r12,3
 100e9dc:	10005d26 	beq	r2,zero,100eb54 <_malloc_r+0x6a0>
 100e9e0:	18c00204 	addi	r3,r3,8
 100e9e4:	003f5106 	br	100e72c <_malloc_r+0x278>
 100e9e8:	8089883a 	add	r4,r16,r2
 100e9ec:	003f6d06 	br	100e7a4 <_malloc_r+0x2f0>
 100e9f0:	00805504 	movi	r2,340
 100e9f4:	10c02036 	bltu	r2,r3,100ea78 <_malloc_r+0x5c4>
 100e9f8:	8804d3fa 	srli	r2,r17,15
 100e9fc:	11801dc4 	addi	r6,r2,119
 100ea00:	300490fa 	slli	r2,r6,3
 100ea04:	003ed806 	br	100e568 <_malloc_r+0xb4>
 100ea08:	48c000c4 	addi	r3,r9,3
 100ea0c:	003f3106 	br	100e6d4 <_malloc_r+0x220>
 100ea10:	05c040f4 	movhi	r23,259
 100ea14:	bdde3604 	addi	r23,r23,30936
 100ea18:	b8800017 	ldw	r2,0(r23)
 100ea1c:	988d883a 	add	r6,r19,r2
 100ea20:	b9800015 	stw	r6,0(r23)
 100ea24:	293fb21e 	bne	r5,r4,100e8f0 <_malloc_r+0x43c>
 100ea28:	2083ffcc 	andi	r2,r4,4095
 100ea2c:	103fb01e 	bne	r2,zero,100e8f0 <_malloc_r+0x43c>
 100ea30:	e4000217 	ldw	r16,8(fp)
 100ea34:	9d45883a 	add	r2,r19,r21
 100ea38:	10800054 	ori	r2,r2,1
 100ea3c:	80800115 	stw	r2,4(r16)
 100ea40:	b8c00017 	ldw	r3,0(r23)
 100ea44:	d0a0a217 	ldw	r2,-32120(gp)
 100ea48:	10c0012e 	bgeu	r2,r3,100ea50 <_malloc_r+0x59c>
 100ea4c:	d0e0a215 	stw	r3,-32120(gp)
 100ea50:	d0a0a317 	ldw	r2,-32116(gp)
 100ea54:	10ff962e 	bgeu	r2,r3,100e8b0 <_malloc_r+0x3fc>
 100ea58:	d0e0a315 	stw	r3,-32116(gp)
 100ea5c:	003f9406 	br	100e8b0 <_malloc_r+0x3fc>
 100ea60:	00800104 	movi	r2,4
 100ea64:	11001e36 	bltu	r2,r4,100eae0 <_malloc_r+0x62c>
 100ea68:	2804d1ba 	srli	r2,r5,6
 100ea6c:	11000e04 	addi	r4,r2,56
 100ea70:	200690fa 	slli	r3,r4,3
 100ea74:	003fc506 	br	100e98c <_malloc_r+0x4d8>
 100ea78:	00815504 	movi	r2,1364
 100ea7c:	10c01d2e 	bgeu	r2,r3,100eaf4 <_malloc_r+0x640>
 100ea80:	01801f84 	movi	r6,126
 100ea84:	0080fc04 	movi	r2,1008
 100ea88:	003eb706 	br	100e568 <_malloc_r+0xb4>
 100ea8c:	00800204 	movi	r2,8
 100ea90:	10cbc83a 	sub	r5,r2,r3
 100ea94:	2169883a 	add	r20,r4,r5
 100ea98:	003f9e06 	br	100e914 <_malloc_r+0x460>
 100ea9c:	00bffe04 	movi	r2,-8
 100eaa0:	a93ffd04 	addi	r4,r21,-12
 100eaa4:	2088703a 	and	r4,r4,r2
 100eaa8:	b10b883a 	add	r5,r22,r4
 100eaac:	00c00144 	movi	r3,5
 100eab0:	28c00215 	stw	r3,8(r5)
 100eab4:	28c00115 	stw	r3,4(r5)
 100eab8:	b0800117 	ldw	r2,4(r22)
 100eabc:	1080004c 	andi	r2,r2,1
 100eac0:	2084b03a 	or	r2,r4,r2
 100eac4:	b0800115 	stw	r2,4(r22)
 100eac8:	313fdd2e 	bgeu	r6,r4,100ea40 <_malloc_r+0x58c>
 100eacc:	b1400204 	addi	r5,r22,8
 100ead0:	9009883a 	mov	r4,r18
 100ead4:	10138940 	call	1013894 <_free_r>
 100ead8:	e4000217 	ldw	r16,8(fp)
 100eadc:	003fd806 	br	100ea40 <_malloc_r+0x58c>
 100eae0:	00800504 	movi	r2,20
 100eae4:	11001536 	bltu	r2,r4,100eb3c <_malloc_r+0x688>
 100eae8:	210016c4 	addi	r4,r4,91
 100eaec:	200690fa 	slli	r3,r4,3
 100eaf0:	003fa606 	br	100e98c <_malloc_r+0x4d8>
 100eaf4:	8804d4ba 	srli	r2,r17,18
 100eaf8:	11801f04 	addi	r6,r2,124
 100eafc:	300490fa 	slli	r2,r6,3
 100eb00:	003e9906 	br	100e568 <_malloc_r+0xb4>
 100eb04:	2009d0ba 	srai	r4,r4,2
 100eb08:	014040b4 	movhi	r5,258
 100eb0c:	295c8e04 	addi	r5,r5,29240
 100eb10:	00c00044 	movi	r3,1
 100eb14:	28800117 	ldw	r2,4(r5)
 100eb18:	1906983a 	sll	r3,r3,r4
 100eb1c:	10c4b03a 	or	r2,r2,r3
 100eb20:	28800115 	stw	r2,4(r5)
 100eb24:	003fa306 	br	100e9b4 <_malloc_r+0x500>
 100eb28:	0027883a 	mov	r19,zero
 100eb2c:	00c00044 	movi	r3,1
 100eb30:	003f8606 	br	100e94c <_malloc_r+0x498>
 100eb34:	d1206415 	stw	r4,-32368(gp)
 100eb38:	003f7306 	br	100e908 <_malloc_r+0x454>
 100eb3c:	00801504 	movi	r2,84
 100eb40:	11001936 	bltu	r2,r4,100eba8 <_malloc_r+0x6f4>
 100eb44:	2804d33a 	srli	r2,r5,12
 100eb48:	11001b84 	addi	r4,r2,110
 100eb4c:	200690fa 	slli	r3,r4,3
 100eb50:	003f8e06 	br	100e98c <_malloc_r+0x4d8>
 100eb54:	480b883a 	mov	r5,r9
 100eb58:	6807883a 	mov	r3,r13
 100eb5c:	288000cc 	andi	r2,r5,3
 100eb60:	18fffe04 	addi	r3,r3,-8
 100eb64:	297fffc4 	addi	r5,r5,-1
 100eb68:	10001526 	beq	r2,zero,100ebc0 <_malloc_r+0x70c>
 100eb6c:	18800217 	ldw	r2,8(r3)
 100eb70:	10fffa26 	beq	r2,r3,100eb5c <_malloc_r+0x6a8>
 100eb74:	2109883a 	add	r4,r4,r4
 100eb78:	393f1e36 	bltu	r7,r4,100e7f4 <_malloc_r+0x340>
 100eb7c:	203f1d26 	beq	r4,zero,100e7f4 <_malloc_r+0x340>
 100eb80:	21c4703a 	and	r2,r4,r7
 100eb84:	10000226 	beq	r2,zero,100eb90 <_malloc_r+0x6dc>
 100eb88:	6013883a 	mov	r9,r12
 100eb8c:	003ee106 	br	100e714 <_malloc_r+0x260>
 100eb90:	2109883a 	add	r4,r4,r4
 100eb94:	3904703a 	and	r2,r7,r4
 100eb98:	63000104 	addi	r12,r12,4
 100eb9c:	103ffc26 	beq	r2,zero,100eb90 <_malloc_r+0x6dc>
 100eba0:	6013883a 	mov	r9,r12
 100eba4:	003edb06 	br	100e714 <_malloc_r+0x260>
 100eba8:	00805504 	movi	r2,340
 100ebac:	11000836 	bltu	r2,r4,100ebd0 <_malloc_r+0x71c>
 100ebb0:	2804d3fa 	srli	r2,r5,15
 100ebb4:	11001dc4 	addi	r4,r2,119
 100ebb8:	200690fa 	slli	r3,r4,3
 100ebbc:	003f7306 	br	100e98c <_malloc_r+0x4d8>
 100ebc0:	0104303a 	nor	r2,zero,r4
 100ebc4:	388e703a 	and	r7,r7,r2
 100ebc8:	e1c00115 	stw	r7,4(fp)
 100ebcc:	003fe906 	br	100eb74 <_malloc_r+0x6c0>
 100ebd0:	00815504 	movi	r2,1364
 100ebd4:	1100032e 	bgeu	r2,r4,100ebe4 <_malloc_r+0x730>
 100ebd8:	01001f84 	movi	r4,126
 100ebdc:	00c0fc04 	movi	r3,1008
 100ebe0:	003f6a06 	br	100e98c <_malloc_r+0x4d8>
 100ebe4:	2804d4ba 	srli	r2,r5,18
 100ebe8:	11001f04 	addi	r4,r2,124
 100ebec:	200690fa 	slli	r3,r4,3
 100ebf0:	003f6606 	br	100e98c <_malloc_r+0x4d8>

0100ebf4 <memchr>:
 100ebf4:	008000c4 	movi	r2,3
 100ebf8:	29403fcc 	andi	r5,r5,255
 100ebfc:	2007883a 	mov	r3,r4
 100ec00:	1180022e 	bgeu	r2,r6,100ec0c <memchr+0x18>
 100ec04:	2084703a 	and	r2,r4,r2
 100ec08:	10000b26 	beq	r2,zero,100ec38 <memchr+0x44>
 100ec0c:	313fffc4 	addi	r4,r6,-1
 100ec10:	3000051e 	bne	r6,zero,100ec28 <memchr+0x34>
 100ec14:	00002c06 	br	100ecc8 <memchr+0xd4>
 100ec18:	213fffc4 	addi	r4,r4,-1
 100ec1c:	00bfffc4 	movi	r2,-1
 100ec20:	18c00044 	addi	r3,r3,1
 100ec24:	20802826 	beq	r4,r2,100ecc8 <memchr+0xd4>
 100ec28:	18800003 	ldbu	r2,0(r3)
 100ec2c:	28bffa1e 	bne	r5,r2,100ec18 <memchr+0x24>
 100ec30:	1805883a 	mov	r2,r3
 100ec34:	f800283a 	ret
 100ec38:	0011883a 	mov	r8,zero
 100ec3c:	0007883a 	mov	r3,zero
 100ec40:	01c00104 	movi	r7,4
 100ec44:	4004923a 	slli	r2,r8,8
 100ec48:	18c00044 	addi	r3,r3,1
 100ec4c:	1151883a 	add	r8,r2,r5
 100ec50:	19fffc1e 	bne	r3,r7,100ec44 <memchr+0x50>
 100ec54:	02bfbff4 	movhi	r10,65279
 100ec58:	52bfbfc4 	addi	r10,r10,-257
 100ec5c:	02602074 	movhi	r9,32897
 100ec60:	4a602004 	addi	r9,r9,-32640
 100ec64:	02c000c4 	movi	r11,3
 100ec68:	20800017 	ldw	r2,0(r4)
 100ec6c:	31bfff04 	addi	r6,r6,-4
 100ec70:	200f883a 	mov	r7,r4
 100ec74:	1204f03a 	xor	r2,r2,r8
 100ec78:	1287883a 	add	r3,r2,r10
 100ec7c:	1a46703a 	and	r3,r3,r9
 100ec80:	0084303a 	nor	r2,zero,r2
 100ec84:	10c4703a 	and	r2,r2,r3
 100ec88:	10000b26 	beq	r2,zero,100ecb8 <memchr+0xc4>
 100ec8c:	20800003 	ldbu	r2,0(r4)
 100ec90:	28800f26 	beq	r5,r2,100ecd0 <memchr+0xdc>
 100ec94:	20800043 	ldbu	r2,1(r4)
 100ec98:	21c00044 	addi	r7,r4,1
 100ec9c:	28800c26 	beq	r5,r2,100ecd0 <memchr+0xdc>
 100eca0:	20800083 	ldbu	r2,2(r4)
 100eca4:	21c00084 	addi	r7,r4,2
 100eca8:	28800926 	beq	r5,r2,100ecd0 <memchr+0xdc>
 100ecac:	208000c3 	ldbu	r2,3(r4)
 100ecb0:	21c000c4 	addi	r7,r4,3
 100ecb4:	28800626 	beq	r5,r2,100ecd0 <memchr+0xdc>
 100ecb8:	21000104 	addi	r4,r4,4
 100ecbc:	59bfea36 	bltu	r11,r6,100ec68 <memchr+0x74>
 100ecc0:	2007883a 	mov	r3,r4
 100ecc4:	003fd106 	br	100ec0c <memchr+0x18>
 100ecc8:	0005883a 	mov	r2,zero
 100eccc:	f800283a 	ret
 100ecd0:	3805883a 	mov	r2,r7
 100ecd4:	f800283a 	ret

0100ecd8 <memcmp>:
 100ecd8:	00c000c4 	movi	r3,3
 100ecdc:	1980032e 	bgeu	r3,r6,100ecec <memcmp+0x14>
 100ece0:	2144b03a 	or	r2,r4,r5
 100ece4:	10c4703a 	and	r2,r2,r3
 100ece8:	10000f26 	beq	r2,zero,100ed28 <memcmp+0x50>
 100ecec:	31ffffc4 	addi	r7,r6,-1
 100ecf0:	3000061e 	bne	r6,zero,100ed0c <memcmp+0x34>
 100ecf4:	00000a06 	br	100ed20 <memcmp+0x48>
 100ecf8:	39ffffc4 	addi	r7,r7,-1
 100ecfc:	00bfffc4 	movi	r2,-1
 100ed00:	21000044 	addi	r4,r4,1
 100ed04:	29400044 	addi	r5,r5,1
 100ed08:	38800526 	beq	r7,r2,100ed20 <memcmp+0x48>
 100ed0c:	20c00003 	ldbu	r3,0(r4)
 100ed10:	28800003 	ldbu	r2,0(r5)
 100ed14:	18bff826 	beq	r3,r2,100ecf8 <memcmp+0x20>
 100ed18:	1885c83a 	sub	r2,r3,r2
 100ed1c:	f800283a 	ret
 100ed20:	0005883a 	mov	r2,zero
 100ed24:	f800283a 	ret
 100ed28:	180f883a 	mov	r7,r3
 100ed2c:	20c00017 	ldw	r3,0(r4)
 100ed30:	28800017 	ldw	r2,0(r5)
 100ed34:	18bfed1e 	bne	r3,r2,100ecec <memcmp+0x14>
 100ed38:	31bfff04 	addi	r6,r6,-4
 100ed3c:	21000104 	addi	r4,r4,4
 100ed40:	29400104 	addi	r5,r5,4
 100ed44:	39bff936 	bltu	r7,r6,100ed2c <memcmp+0x54>
 100ed48:	003fe806 	br	100ecec <memcmp+0x14>

0100ed4c <memcpy>:
 100ed4c:	01c003c4 	movi	r7,15
 100ed50:	2007883a 	mov	r3,r4
 100ed54:	3980032e 	bgeu	r7,r6,100ed64 <memcpy+0x18>
 100ed58:	2904b03a 	or	r2,r5,r4
 100ed5c:	108000cc 	andi	r2,r2,3
 100ed60:	10000926 	beq	r2,zero,100ed88 <memcpy+0x3c>
 100ed64:	30000626 	beq	r6,zero,100ed80 <memcpy+0x34>
 100ed68:	30cd883a 	add	r6,r6,r3
 100ed6c:	28800003 	ldbu	r2,0(r5)
 100ed70:	29400044 	addi	r5,r5,1
 100ed74:	18800005 	stb	r2,0(r3)
 100ed78:	18c00044 	addi	r3,r3,1
 100ed7c:	30fffb1e 	bne	r6,r3,100ed6c <memcpy+0x20>
 100ed80:	2005883a 	mov	r2,r4
 100ed84:	f800283a 	ret
 100ed88:	3811883a 	mov	r8,r7
 100ed8c:	200f883a 	mov	r7,r4
 100ed90:	28c00017 	ldw	r3,0(r5)
 100ed94:	31bffc04 	addi	r6,r6,-16
 100ed98:	38c00015 	stw	r3,0(r7)
 100ed9c:	28800117 	ldw	r2,4(r5)
 100eda0:	38800115 	stw	r2,4(r7)
 100eda4:	28c00217 	ldw	r3,8(r5)
 100eda8:	38c00215 	stw	r3,8(r7)
 100edac:	28800317 	ldw	r2,12(r5)
 100edb0:	29400404 	addi	r5,r5,16
 100edb4:	38800315 	stw	r2,12(r7)
 100edb8:	39c00404 	addi	r7,r7,16
 100edbc:	41bff436 	bltu	r8,r6,100ed90 <memcpy+0x44>
 100edc0:	008000c4 	movi	r2,3
 100edc4:	1180072e 	bgeu	r2,r6,100ede4 <memcpy+0x98>
 100edc8:	1007883a 	mov	r3,r2
 100edcc:	28800017 	ldw	r2,0(r5)
 100edd0:	31bfff04 	addi	r6,r6,-4
 100edd4:	29400104 	addi	r5,r5,4
 100edd8:	38800015 	stw	r2,0(r7)
 100eddc:	39c00104 	addi	r7,r7,4
 100ede0:	19bffa36 	bltu	r3,r6,100edcc <memcpy+0x80>
 100ede4:	3807883a 	mov	r3,r7
 100ede8:	003fde06 	br	100ed64 <memcpy+0x18>

0100edec <memmove>:
 100edec:	2807883a 	mov	r3,r5
 100edf0:	2011883a 	mov	r8,r4
 100edf4:	29000c2e 	bgeu	r5,r4,100ee28 <memmove+0x3c>
 100edf8:	298f883a 	add	r7,r5,r6
 100edfc:	21c00a2e 	bgeu	r4,r7,100ee28 <memmove+0x3c>
 100ee00:	30000726 	beq	r6,zero,100ee20 <memmove+0x34>
 100ee04:	2187883a 	add	r3,r4,r6
 100ee08:	198dc83a 	sub	r6,r3,r6
 100ee0c:	39ffffc4 	addi	r7,r7,-1
 100ee10:	38800003 	ldbu	r2,0(r7)
 100ee14:	18ffffc4 	addi	r3,r3,-1
 100ee18:	18800005 	stb	r2,0(r3)
 100ee1c:	19bffb1e 	bne	r3,r6,100ee0c <memmove+0x20>
 100ee20:	2005883a 	mov	r2,r4
 100ee24:	f800283a 	ret
 100ee28:	01c003c4 	movi	r7,15
 100ee2c:	39800a36 	bltu	r7,r6,100ee58 <memmove+0x6c>
 100ee30:	303ffb26 	beq	r6,zero,100ee20 <memmove+0x34>
 100ee34:	400f883a 	mov	r7,r8
 100ee38:	320d883a 	add	r6,r6,r8
 100ee3c:	28800003 	ldbu	r2,0(r5)
 100ee40:	29400044 	addi	r5,r5,1
 100ee44:	38800005 	stb	r2,0(r7)
 100ee48:	39c00044 	addi	r7,r7,1
 100ee4c:	39bffb1e 	bne	r7,r6,100ee3c <memmove+0x50>
 100ee50:	2005883a 	mov	r2,r4
 100ee54:	f800283a 	ret
 100ee58:	1904b03a 	or	r2,r3,r4
 100ee5c:	108000cc 	andi	r2,r2,3
 100ee60:	103ff31e 	bne	r2,zero,100ee30 <memmove+0x44>
 100ee64:	3811883a 	mov	r8,r7
 100ee68:	180b883a 	mov	r5,r3
 100ee6c:	200f883a 	mov	r7,r4
 100ee70:	28c00017 	ldw	r3,0(r5)
 100ee74:	31bffc04 	addi	r6,r6,-16
 100ee78:	38c00015 	stw	r3,0(r7)
 100ee7c:	28800117 	ldw	r2,4(r5)
 100ee80:	38800115 	stw	r2,4(r7)
 100ee84:	28c00217 	ldw	r3,8(r5)
 100ee88:	38c00215 	stw	r3,8(r7)
 100ee8c:	28800317 	ldw	r2,12(r5)
 100ee90:	29400404 	addi	r5,r5,16
 100ee94:	38800315 	stw	r2,12(r7)
 100ee98:	39c00404 	addi	r7,r7,16
 100ee9c:	41bff436 	bltu	r8,r6,100ee70 <memmove+0x84>
 100eea0:	008000c4 	movi	r2,3
 100eea4:	1180072e 	bgeu	r2,r6,100eec4 <memmove+0xd8>
 100eea8:	1007883a 	mov	r3,r2
 100eeac:	28800017 	ldw	r2,0(r5)
 100eeb0:	31bfff04 	addi	r6,r6,-4
 100eeb4:	29400104 	addi	r5,r5,4
 100eeb8:	38800015 	stw	r2,0(r7)
 100eebc:	39c00104 	addi	r7,r7,4
 100eec0:	19bffa36 	bltu	r3,r6,100eeac <memmove+0xc0>
 100eec4:	3811883a 	mov	r8,r7
 100eec8:	003fd906 	br	100ee30 <memmove+0x44>

0100eecc <memset>:
 100eecc:	008000c4 	movi	r2,3
 100eed0:	29403fcc 	andi	r5,r5,255
 100eed4:	2007883a 	mov	r3,r4
 100eed8:	1180022e 	bgeu	r2,r6,100eee4 <memset+0x18>
 100eedc:	2084703a 	and	r2,r4,r2
 100eee0:	10000826 	beq	r2,zero,100ef04 <memset+0x38>
 100eee4:	30000526 	beq	r6,zero,100eefc <memset+0x30>
 100eee8:	2805883a 	mov	r2,r5
 100eeec:	30cd883a 	add	r6,r6,r3
 100eef0:	18800005 	stb	r2,0(r3)
 100eef4:	18c00044 	addi	r3,r3,1
 100eef8:	19bffd1e 	bne	r3,r6,100eef0 <memset+0x24>
 100eefc:	2005883a 	mov	r2,r4
 100ef00:	f800283a 	ret
 100ef04:	2804923a 	slli	r2,r5,8
 100ef08:	020003c4 	movi	r8,15
 100ef0c:	200f883a 	mov	r7,r4
 100ef10:	2884b03a 	or	r2,r5,r2
 100ef14:	1006943a 	slli	r3,r2,16
 100ef18:	10c6b03a 	or	r3,r2,r3
 100ef1c:	41800a2e 	bgeu	r8,r6,100ef48 <memset+0x7c>
 100ef20:	4005883a 	mov	r2,r8
 100ef24:	31bffc04 	addi	r6,r6,-16
 100ef28:	38c00015 	stw	r3,0(r7)
 100ef2c:	38c00115 	stw	r3,4(r7)
 100ef30:	38c00215 	stw	r3,8(r7)
 100ef34:	38c00315 	stw	r3,12(r7)
 100ef38:	39c00404 	addi	r7,r7,16
 100ef3c:	11bff936 	bltu	r2,r6,100ef24 <memset+0x58>
 100ef40:	008000c4 	movi	r2,3
 100ef44:	1180052e 	bgeu	r2,r6,100ef5c <memset+0x90>
 100ef48:	31bfff04 	addi	r6,r6,-4
 100ef4c:	008000c4 	movi	r2,3
 100ef50:	38c00015 	stw	r3,0(r7)
 100ef54:	39c00104 	addi	r7,r7,4
 100ef58:	11bffb36 	bltu	r2,r6,100ef48 <memset+0x7c>
 100ef5c:	3807883a 	mov	r3,r7
 100ef60:	003fe006 	br	100eee4 <memset+0x18>

0100ef64 <printf>:
 100ef64:	defffb04 	addi	sp,sp,-20
 100ef68:	dfc00115 	stw	ra,4(sp)
 100ef6c:	d9400215 	stw	r5,8(sp)
 100ef70:	d9800315 	stw	r6,12(sp)
 100ef74:	d9c00415 	stw	r7,16(sp)
 100ef78:	008040f4 	movhi	r2,259
 100ef7c:	10a3d104 	addi	r2,r2,-28860
 100ef80:	10c00017 	ldw	r3,0(r2)
 100ef84:	200b883a 	mov	r5,r4
 100ef88:	d8800204 	addi	r2,sp,8
 100ef8c:	19000217 	ldw	r4,8(r3)
 100ef90:	100d883a 	mov	r6,r2
 100ef94:	d8800015 	stw	r2,0(sp)
 100ef98:	10118ec0 	call	10118ec <__vfprintf_internal>
 100ef9c:	dfc00117 	ldw	ra,4(sp)
 100efa0:	dec00504 	addi	sp,sp,20
 100efa4:	f800283a 	ret

0100efa8 <_printf_r>:
 100efa8:	defffc04 	addi	sp,sp,-16
 100efac:	dfc00115 	stw	ra,4(sp)
 100efb0:	d9800215 	stw	r6,8(sp)
 100efb4:	d9c00315 	stw	r7,12(sp)
 100efb8:	280d883a 	mov	r6,r5
 100efbc:	21400217 	ldw	r5,8(r4)
 100efc0:	d8c00204 	addi	r3,sp,8
 100efc4:	180f883a 	mov	r7,r3
 100efc8:	d8c00015 	stw	r3,0(sp)
 100efcc:	100fa280 	call	100fa28 <___vfprintf_internal_r>
 100efd0:	dfc00117 	ldw	ra,4(sp)
 100efd4:	dec00404 	addi	sp,sp,16
 100efd8:	f800283a 	ret

0100efdc <_puts_r>:
 100efdc:	defff604 	addi	sp,sp,-40
 100efe0:	dc400715 	stw	r17,28(sp)
 100efe4:	2023883a 	mov	r17,r4
 100efe8:	2809883a 	mov	r4,r5
 100efec:	dfc00915 	stw	ra,36(sp)
 100eff0:	dcc00815 	stw	r19,32(sp)
 100eff4:	2827883a 	mov	r19,r5
 100eff8:	100f5c00 	call	100f5c0 <strlen>
 100effc:	89400217 	ldw	r5,8(r17)
 100f000:	00c040b4 	movhi	r3,258
 100f004:	18dac104 	addi	r3,r3,27396
 100f008:	01c00044 	movi	r7,1
 100f00c:	12000044 	addi	r8,r2,1
 100f010:	d8c00515 	stw	r3,20(sp)
 100f014:	d9c00615 	stw	r7,24(sp)
 100f018:	d8c00304 	addi	r3,sp,12
 100f01c:	01c00084 	movi	r7,2
 100f020:	8809883a 	mov	r4,r17
 100f024:	d80d883a 	mov	r6,sp
 100f028:	d8c00015 	stw	r3,0(sp)
 100f02c:	dcc00315 	stw	r19,12(sp)
 100f030:	da000215 	stw	r8,8(sp)
 100f034:	d9c00115 	stw	r7,4(sp)
 100f038:	d8800415 	stw	r2,16(sp)
 100f03c:	1013ba80 	call	1013ba8 <__sfvwrite_r>
 100f040:	00ffffc4 	movi	r3,-1
 100f044:	10000626 	beq	r2,zero,100f060 <_puts_r+0x84>
 100f048:	1805883a 	mov	r2,r3
 100f04c:	dfc00917 	ldw	ra,36(sp)
 100f050:	dcc00817 	ldw	r19,32(sp)
 100f054:	dc400717 	ldw	r17,28(sp)
 100f058:	dec00a04 	addi	sp,sp,40
 100f05c:	f800283a 	ret
 100f060:	00c00284 	movi	r3,10
 100f064:	1805883a 	mov	r2,r3
 100f068:	dfc00917 	ldw	ra,36(sp)
 100f06c:	dcc00817 	ldw	r19,32(sp)
 100f070:	dc400717 	ldw	r17,28(sp)
 100f074:	dec00a04 	addi	sp,sp,40
 100f078:	f800283a 	ret

0100f07c <puts>:
 100f07c:	008040f4 	movhi	r2,259
 100f080:	10a3d104 	addi	r2,r2,-28860
 100f084:	200b883a 	mov	r5,r4
 100f088:	11000017 	ldw	r4,0(r2)
 100f08c:	100efdc1 	jmpi	100efdc <_puts_r>

0100f090 <_sbrk_r>:
 100f090:	defffd04 	addi	sp,sp,-12
 100f094:	dc000015 	stw	r16,0(sp)
 100f098:	040040f4 	movhi	r16,259
 100f09c:	84240f04 	addi	r16,r16,-28612
 100f0a0:	dc400115 	stw	r17,4(sp)
 100f0a4:	80000015 	stw	zero,0(r16)
 100f0a8:	2023883a 	mov	r17,r4
 100f0ac:	2809883a 	mov	r4,r5
 100f0b0:	dfc00215 	stw	ra,8(sp)
 100f0b4:	10191e40 	call	10191e4 <sbrk>
 100f0b8:	1007883a 	mov	r3,r2
 100f0bc:	00bfffc4 	movi	r2,-1
 100f0c0:	18800626 	beq	r3,r2,100f0dc <_sbrk_r+0x4c>
 100f0c4:	1805883a 	mov	r2,r3
 100f0c8:	dfc00217 	ldw	ra,8(sp)
 100f0cc:	dc400117 	ldw	r17,4(sp)
 100f0d0:	dc000017 	ldw	r16,0(sp)
 100f0d4:	dec00304 	addi	sp,sp,12
 100f0d8:	f800283a 	ret
 100f0dc:	80800017 	ldw	r2,0(r16)
 100f0e0:	103ff826 	beq	r2,zero,100f0c4 <_sbrk_r+0x34>
 100f0e4:	88800015 	stw	r2,0(r17)
 100f0e8:	1805883a 	mov	r2,r3
 100f0ec:	dfc00217 	ldw	ra,8(sp)
 100f0f0:	dc400117 	ldw	r17,4(sp)
 100f0f4:	dc000017 	ldw	r16,0(sp)
 100f0f8:	dec00304 	addi	sp,sp,12
 100f0fc:	f800283a 	ret

0100f100 <_raise_r>:
 100f100:	defffd04 	addi	sp,sp,-12
 100f104:	008007c4 	movi	r2,31
 100f108:	dc400115 	stw	r17,4(sp)
 100f10c:	dc000015 	stw	r16,0(sp)
 100f110:	dfc00215 	stw	ra,8(sp)
 100f114:	2821883a 	mov	r16,r5
 100f118:	2023883a 	mov	r17,r4
 100f11c:	11402736 	bltu	r2,r5,100f1bc <_raise_r+0xbc>
 100f120:	20c0b717 	ldw	r3,732(r4)
 100f124:	18001326 	beq	r3,zero,100f174 <_raise_r+0x74>
 100f128:	2945883a 	add	r2,r5,r5
 100f12c:	1085883a 	add	r2,r2,r2
 100f130:	188b883a 	add	r5,r3,r2
 100f134:	28c00017 	ldw	r3,0(r5)
 100f138:	18000e26 	beq	r3,zero,100f174 <_raise_r+0x74>
 100f13c:	01000044 	movi	r4,1
 100f140:	19000526 	beq	r3,r4,100f158 <_raise_r+0x58>
 100f144:	00bfffc4 	movi	r2,-1
 100f148:	18801326 	beq	r3,r2,100f198 <_raise_r+0x98>
 100f14c:	28000015 	stw	zero,0(r5)
 100f150:	8009883a 	mov	r4,r16
 100f154:	183ee83a 	callr	r3
 100f158:	0007883a 	mov	r3,zero
 100f15c:	1805883a 	mov	r2,r3
 100f160:	dfc00217 	ldw	ra,8(sp)
 100f164:	dc400117 	ldw	r17,4(sp)
 100f168:	dc000017 	ldw	r16,0(sp)
 100f16c:	dec00304 	addi	sp,sp,12
 100f170:	f800283a 	ret
 100f174:	100f3d80 	call	100f3d8 <_getpid_r>
 100f178:	100b883a 	mov	r5,r2
 100f17c:	8809883a 	mov	r4,r17
 100f180:	800d883a 	mov	r6,r16
 100f184:	dfc00217 	ldw	ra,8(sp)
 100f188:	dc400117 	ldw	r17,4(sp)
 100f18c:	dc000017 	ldw	r16,0(sp)
 100f190:	dec00304 	addi	sp,sp,12
 100f194:	100f3dc1 	jmpi	100f3dc <_kill_r>
 100f198:	2007883a 	mov	r3,r4
 100f19c:	00800584 	movi	r2,22
 100f1a0:	88800015 	stw	r2,0(r17)
 100f1a4:	1805883a 	mov	r2,r3
 100f1a8:	dfc00217 	ldw	ra,8(sp)
 100f1ac:	dc400117 	ldw	r17,4(sp)
 100f1b0:	dc000017 	ldw	r16,0(sp)
 100f1b4:	dec00304 	addi	sp,sp,12
 100f1b8:	f800283a 	ret
 100f1bc:	00800584 	movi	r2,22
 100f1c0:	00ffffc4 	movi	r3,-1
 100f1c4:	20800015 	stw	r2,0(r4)
 100f1c8:	003fe406 	br	100f15c <_raise_r+0x5c>

0100f1cc <raise>:
 100f1cc:	008040f4 	movhi	r2,259
 100f1d0:	10a3d104 	addi	r2,r2,-28860
 100f1d4:	200b883a 	mov	r5,r4
 100f1d8:	11000017 	ldw	r4,0(r2)
 100f1dc:	100f1001 	jmpi	100f100 <_raise_r>

0100f1e0 <_init_signal_r>:
 100f1e0:	2080b717 	ldw	r2,732(r4)
 100f1e4:	defffe04 	addi	sp,sp,-8
 100f1e8:	dc000015 	stw	r16,0(sp)
 100f1ec:	dfc00115 	stw	ra,4(sp)
 100f1f0:	2021883a 	mov	r16,r4
 100f1f4:	10000526 	beq	r2,zero,100f20c <_init_signal_r+0x2c>
 100f1f8:	0005883a 	mov	r2,zero
 100f1fc:	dfc00117 	ldw	ra,4(sp)
 100f200:	dc000017 	ldw	r16,0(sp)
 100f204:	dec00204 	addi	sp,sp,8
 100f208:	f800283a 	ret
 100f20c:	01402004 	movi	r5,128
 100f210:	100e4b40 	call	100e4b4 <_malloc_r>
 100f214:	1009883a 	mov	r4,r2
 100f218:	8080b715 	stw	r2,732(r16)
 100f21c:	10000726 	beq	r2,zero,100f23c <_init_signal_r+0x5c>
 100f220:	0007883a 	mov	r3,zero
 100f224:	01402004 	movi	r5,128
 100f228:	20c5883a 	add	r2,r4,r3
 100f22c:	18c00104 	addi	r3,r3,4
 100f230:	10000015 	stw	zero,0(r2)
 100f234:	197ffc1e 	bne	r3,r5,100f228 <_init_signal_r+0x48>
 100f238:	003fef06 	br	100f1f8 <_init_signal_r+0x18>
 100f23c:	00bfffc4 	movi	r2,-1
 100f240:	003fee06 	br	100f1fc <_init_signal_r+0x1c>

0100f244 <_init_signal>:
 100f244:	008040f4 	movhi	r2,259
 100f248:	10a3d104 	addi	r2,r2,-28860
 100f24c:	11000017 	ldw	r4,0(r2)
 100f250:	100f1e01 	jmpi	100f1e0 <_init_signal_r>

0100f254 <__sigtramp_r>:
 100f254:	defffd04 	addi	sp,sp,-12
 100f258:	008007c4 	movi	r2,31
 100f25c:	dc000115 	stw	r16,4(sp)
 100f260:	dfc00215 	stw	ra,8(sp)
 100f264:	2021883a 	mov	r16,r4
 100f268:	11401336 	bltu	r2,r5,100f2b8 <__sigtramp_r+0x64>
 100f26c:	20c0b717 	ldw	r3,732(r4)
 100f270:	18001f26 	beq	r3,zero,100f2f0 <__sigtramp_r+0x9c>
 100f274:	2945883a 	add	r2,r5,r5
 100f278:	1085883a 	add	r2,r2,r2
 100f27c:	10c9883a 	add	r4,r2,r3
 100f280:	20c00017 	ldw	r3,0(r4)
 100f284:	18001626 	beq	r3,zero,100f2e0 <__sigtramp_r+0x8c>
 100f288:	00bfffc4 	movi	r2,-1
 100f28c:	18801626 	beq	r3,r2,100f2e8 <__sigtramp_r+0x94>
 100f290:	00800044 	movi	r2,1
 100f294:	18800d26 	beq	r3,r2,100f2cc <__sigtramp_r+0x78>
 100f298:	20000015 	stw	zero,0(r4)
 100f29c:	2809883a 	mov	r4,r5
 100f2a0:	183ee83a 	callr	r3
 100f2a4:	0005883a 	mov	r2,zero
 100f2a8:	dfc00217 	ldw	ra,8(sp)
 100f2ac:	dc000117 	ldw	r16,4(sp)
 100f2b0:	dec00304 	addi	sp,sp,12
 100f2b4:	f800283a 	ret
 100f2b8:	00bfffc4 	movi	r2,-1
 100f2bc:	dfc00217 	ldw	ra,8(sp)
 100f2c0:	dc000117 	ldw	r16,4(sp)
 100f2c4:	dec00304 	addi	sp,sp,12
 100f2c8:	f800283a 	ret
 100f2cc:	008000c4 	movi	r2,3
 100f2d0:	dfc00217 	ldw	ra,8(sp)
 100f2d4:	dc000117 	ldw	r16,4(sp)
 100f2d8:	dec00304 	addi	sp,sp,12
 100f2dc:	f800283a 	ret
 100f2e0:	00800044 	movi	r2,1
 100f2e4:	003ff006 	br	100f2a8 <__sigtramp_r+0x54>
 100f2e8:	00800084 	movi	r2,2
 100f2ec:	003fee06 	br	100f2a8 <__sigtramp_r+0x54>
 100f2f0:	d9400015 	stw	r5,0(sp)
 100f2f4:	100f1e00 	call	100f1e0 <_init_signal_r>
 100f2f8:	d9400017 	ldw	r5,0(sp)
 100f2fc:	103fee1e 	bne	r2,zero,100f2b8 <__sigtramp_r+0x64>
 100f300:	80c0b717 	ldw	r3,732(r16)
 100f304:	003fdb06 	br	100f274 <__sigtramp_r+0x20>

0100f308 <__sigtramp>:
 100f308:	008040f4 	movhi	r2,259
 100f30c:	10a3d104 	addi	r2,r2,-28860
 100f310:	200b883a 	mov	r5,r4
 100f314:	11000017 	ldw	r4,0(r2)
 100f318:	100f2541 	jmpi	100f254 <__sigtramp_r>

0100f31c <_signal_r>:
 100f31c:	defffc04 	addi	sp,sp,-16
 100f320:	008007c4 	movi	r2,31
 100f324:	dc800215 	stw	r18,8(sp)
 100f328:	dc400115 	stw	r17,4(sp)
 100f32c:	dc000015 	stw	r16,0(sp)
 100f330:	dfc00315 	stw	ra,12(sp)
 100f334:	2823883a 	mov	r17,r5
 100f338:	00ffffc4 	movi	r3,-1
 100f33c:	3025883a 	mov	r18,r6
 100f340:	2021883a 	mov	r16,r4
 100f344:	1140092e 	bgeu	r2,r5,100f36c <_signal_r+0x50>
 100f348:	00800584 	movi	r2,22
 100f34c:	20800015 	stw	r2,0(r4)
 100f350:	1805883a 	mov	r2,r3
 100f354:	dfc00317 	ldw	ra,12(sp)
 100f358:	dc800217 	ldw	r18,8(sp)
 100f35c:	dc400117 	ldw	r17,4(sp)
 100f360:	dc000017 	ldw	r16,0(sp)
 100f364:	dec00404 	addi	sp,sp,16
 100f368:	f800283a 	ret
 100f36c:	2140b717 	ldw	r5,732(r4)
 100f370:	28000c26 	beq	r5,zero,100f3a4 <_signal_r+0x88>
 100f374:	8c45883a 	add	r2,r17,r17
 100f378:	1085883a 	add	r2,r2,r2
 100f37c:	1145883a 	add	r2,r2,r5
 100f380:	10c00017 	ldw	r3,0(r2)
 100f384:	14800015 	stw	r18,0(r2)
 100f388:	1805883a 	mov	r2,r3
 100f38c:	dfc00317 	ldw	ra,12(sp)
 100f390:	dc800217 	ldw	r18,8(sp)
 100f394:	dc400117 	ldw	r17,4(sp)
 100f398:	dc000017 	ldw	r16,0(sp)
 100f39c:	dec00404 	addi	sp,sp,16
 100f3a0:	f800283a 	ret
 100f3a4:	100f1e00 	call	100f1e0 <_init_signal_r>
 100f3a8:	1000021e 	bne	r2,zero,100f3b4 <_signal_r+0x98>
 100f3ac:	8140b717 	ldw	r5,732(r16)
 100f3b0:	003ff006 	br	100f374 <_signal_r+0x58>
 100f3b4:	00ffffc4 	movi	r3,-1
 100f3b8:	003fe506 	br	100f350 <_signal_r+0x34>

0100f3bc <signal>:
 100f3bc:	018040f4 	movhi	r6,259
 100f3c0:	31a3d104 	addi	r6,r6,-28860
 100f3c4:	2007883a 	mov	r3,r4
 100f3c8:	31000017 	ldw	r4,0(r6)
 100f3cc:	280d883a 	mov	r6,r5
 100f3d0:	180b883a 	mov	r5,r3
 100f3d4:	100f31c1 	jmpi	100f31c <_signal_r>

0100f3d8 <_getpid_r>:
 100f3d8:	1018ae81 	jmpi	1018ae8 <getpid>

0100f3dc <_kill_r>:
 100f3dc:	defffd04 	addi	sp,sp,-12
 100f3e0:	dc000015 	stw	r16,0(sp)
 100f3e4:	040040f4 	movhi	r16,259
 100f3e8:	84240f04 	addi	r16,r16,-28612
 100f3ec:	dc400115 	stw	r17,4(sp)
 100f3f0:	80000015 	stw	zero,0(r16)
 100f3f4:	2023883a 	mov	r17,r4
 100f3f8:	2809883a 	mov	r4,r5
 100f3fc:	300b883a 	mov	r5,r6
 100f400:	dfc00215 	stw	ra,8(sp)
 100f404:	1018c2c0 	call	1018c2c <kill>
 100f408:	1007883a 	mov	r3,r2
 100f40c:	00bfffc4 	movi	r2,-1
 100f410:	18800626 	beq	r3,r2,100f42c <_kill_r+0x50>
 100f414:	1805883a 	mov	r2,r3
 100f418:	dfc00217 	ldw	ra,8(sp)
 100f41c:	dc400117 	ldw	r17,4(sp)
 100f420:	dc000017 	ldw	r16,0(sp)
 100f424:	dec00304 	addi	sp,sp,12
 100f428:	f800283a 	ret
 100f42c:	80800017 	ldw	r2,0(r16)
 100f430:	103ff826 	beq	r2,zero,100f414 <_kill_r+0x38>
 100f434:	88800015 	stw	r2,0(r17)
 100f438:	1805883a 	mov	r2,r3
 100f43c:	dfc00217 	ldw	ra,8(sp)
 100f440:	dc400117 	ldw	r17,4(sp)
 100f444:	dc000017 	ldw	r16,0(sp)
 100f448:	dec00304 	addi	sp,sp,12
 100f44c:	f800283a 	ret

0100f450 <snprintf>:
 100f450:	deffe404 	addi	sp,sp,-112
 100f454:	dc001815 	stw	r16,96(sp)
 100f458:	2011883a 	mov	r8,r4
 100f45c:	2821883a 	mov	r16,r5
 100f460:	dfc01a15 	stw	ra,104(sp)
 100f464:	dc401915 	stw	r17,100(sp)
 100f468:	d9c01b15 	stw	r7,108(sp)
 100f46c:	010040f4 	movhi	r4,259
 100f470:	2123d104 	addi	r4,r4,-28860
 100f474:	00ffffc4 	movi	r3,-1
 100f478:	24400017 	ldw	r17,0(r4)
 100f47c:	28002016 	blt	r5,zero,100f500 <snprintf+0xb0>
 100f480:	0007883a 	mov	r3,zero
 100f484:	28000126 	beq	r5,zero,100f48c <snprintf+0x3c>
 100f488:	28ffffc4 	addi	r3,r5,-1
 100f48c:	d8801b04 	addi	r2,sp,108
 100f490:	21000017 	ldw	r4,0(r4)
 100f494:	d8800015 	stw	r2,0(sp)
 100f498:	100f883a 	mov	r7,r2
 100f49c:	00808204 	movi	r2,520
 100f4a0:	d880040d 	sth	r2,16(sp)
 100f4a4:	d9400104 	addi	r5,sp,4
 100f4a8:	00bfffc4 	movi	r2,-1
 100f4ac:	d8c00615 	stw	r3,24(sp)
 100f4b0:	d8c00315 	stw	r3,12(sp)
 100f4b4:	da000515 	stw	r8,20(sp)
 100f4b8:	d880048d 	sth	r2,18(sp)
 100f4bc:	da000115 	stw	r8,4(sp)
 100f4c0:	100fa280 	call	100fa28 <___vfprintf_internal_r>
 100f4c4:	1007883a 	mov	r3,r2
 100f4c8:	00bfffc4 	movi	r2,-1
 100f4cc:	18800916 	blt	r3,r2,100f4f4 <snprintf+0xa4>
 100f4d0:	80000226 	beq	r16,zero,100f4dc <snprintf+0x8c>
 100f4d4:	d8800117 	ldw	r2,4(sp)
 100f4d8:	10000005 	stb	zero,0(r2)
 100f4dc:	1805883a 	mov	r2,r3
 100f4e0:	dfc01a17 	ldw	ra,104(sp)
 100f4e4:	dc401917 	ldw	r17,100(sp)
 100f4e8:	dc001817 	ldw	r16,96(sp)
 100f4ec:	dec01c04 	addi	sp,sp,112
 100f4f0:	f800283a 	ret
 100f4f4:	008022c4 	movi	r2,139
 100f4f8:	88800015 	stw	r2,0(r17)
 100f4fc:	003ff406 	br	100f4d0 <snprintf+0x80>
 100f500:	008022c4 	movi	r2,139
 100f504:	88800015 	stw	r2,0(r17)
 100f508:	003ff406 	br	100f4dc <snprintf+0x8c>

0100f50c <_snprintf_r>:
 100f50c:	deffe504 	addi	sp,sp,-108
 100f510:	dc401915 	stw	r17,100(sp)
 100f514:	dc001815 	stw	r16,96(sp)
 100f518:	dfc01a15 	stw	ra,104(sp)
 100f51c:	3021883a 	mov	r16,r6
 100f520:	00ffffc4 	movi	r3,-1
 100f524:	2023883a 	mov	r17,r4
 100f528:	2811883a 	mov	r8,r5
 100f52c:	30002116 	blt	r6,zero,100f5b4 <_snprintf_r+0xa8>
 100f530:	0007883a 	mov	r3,zero
 100f534:	30000126 	beq	r6,zero,100f53c <_snprintf_r+0x30>
 100f538:	30ffffc4 	addi	r3,r6,-1
 100f53c:	d8801b04 	addi	r2,sp,108
 100f540:	d8800015 	stw	r2,0(sp)
 100f544:	380d883a 	mov	r6,r7
 100f548:	100f883a 	mov	r7,r2
 100f54c:	00808204 	movi	r2,520
 100f550:	d880040d 	sth	r2,16(sp)
 100f554:	8809883a 	mov	r4,r17
 100f558:	00bfffc4 	movi	r2,-1
 100f55c:	d9400104 	addi	r5,sp,4
 100f560:	d8c00615 	stw	r3,24(sp)
 100f564:	d8c00315 	stw	r3,12(sp)
 100f568:	da000515 	stw	r8,20(sp)
 100f56c:	d880048d 	sth	r2,18(sp)
 100f570:	da000115 	stw	r8,4(sp)
 100f574:	100fa280 	call	100fa28 <___vfprintf_internal_r>
 100f578:	1007883a 	mov	r3,r2
 100f57c:	00bfffc4 	movi	r2,-1
 100f580:	18800916 	blt	r3,r2,100f5a8 <_snprintf_r+0x9c>
 100f584:	80000226 	beq	r16,zero,100f590 <_snprintf_r+0x84>
 100f588:	d8800117 	ldw	r2,4(sp)
 100f58c:	10000005 	stb	zero,0(r2)
 100f590:	1805883a 	mov	r2,r3
 100f594:	dfc01a17 	ldw	ra,104(sp)
 100f598:	dc401917 	ldw	r17,100(sp)
 100f59c:	dc001817 	ldw	r16,96(sp)
 100f5a0:	dec01b04 	addi	sp,sp,108
 100f5a4:	f800283a 	ret
 100f5a8:	008022c4 	movi	r2,139
 100f5ac:	88800015 	stw	r2,0(r17)
 100f5b0:	003ff406 	br	100f584 <_snprintf_r+0x78>
 100f5b4:	008022c4 	movi	r2,139
 100f5b8:	20800015 	stw	r2,0(r4)
 100f5bc:	003ff406 	br	100f590 <_snprintf_r+0x84>

0100f5c0 <strlen>:
 100f5c0:	208000cc 	andi	r2,r4,3
 100f5c4:	2011883a 	mov	r8,r4
 100f5c8:	1000161e 	bne	r2,zero,100f624 <strlen+0x64>
 100f5cc:	20c00017 	ldw	r3,0(r4)
 100f5d0:	017fbff4 	movhi	r5,65279
 100f5d4:	297fbfc4 	addi	r5,r5,-257
 100f5d8:	01e02074 	movhi	r7,32897
 100f5dc:	39e02004 	addi	r7,r7,-32640
 100f5e0:	1945883a 	add	r2,r3,r5
 100f5e4:	11c4703a 	and	r2,r2,r7
 100f5e8:	00c6303a 	nor	r3,zero,r3
 100f5ec:	1886703a 	and	r3,r3,r2
 100f5f0:	18000c1e 	bne	r3,zero,100f624 <strlen+0x64>
 100f5f4:	280d883a 	mov	r6,r5
 100f5f8:	380b883a 	mov	r5,r7
 100f5fc:	21000104 	addi	r4,r4,4
 100f600:	20800017 	ldw	r2,0(r4)
 100f604:	1187883a 	add	r3,r2,r6
 100f608:	1946703a 	and	r3,r3,r5
 100f60c:	0084303a 	nor	r2,zero,r2
 100f610:	10c4703a 	and	r2,r2,r3
 100f614:	103ff926 	beq	r2,zero,100f5fc <strlen+0x3c>
 100f618:	20800007 	ldb	r2,0(r4)
 100f61c:	10000326 	beq	r2,zero,100f62c <strlen+0x6c>
 100f620:	21000044 	addi	r4,r4,1
 100f624:	20800007 	ldb	r2,0(r4)
 100f628:	103ffd1e 	bne	r2,zero,100f620 <strlen+0x60>
 100f62c:	2205c83a 	sub	r2,r4,r8
 100f630:	f800283a 	ret

0100f634 <strncmp>:
 100f634:	30003926 	beq	r6,zero,100f71c <strncmp+0xe8>
 100f638:	2144b03a 	or	r2,r4,r5
 100f63c:	108000cc 	andi	r2,r2,3
 100f640:	028000c4 	movi	r10,3
 100f644:	1000241e 	bne	r2,zero,100f6d8 <strncmp+0xa4>
 100f648:	2011883a 	mov	r8,r4
 100f64c:	280f883a 	mov	r7,r5
 100f650:	51801f2e 	bgeu	r10,r6,100f6d0 <strncmp+0x9c>
 100f654:	21000017 	ldw	r4,0(r4)
 100f658:	28800017 	ldw	r2,0(r5)
 100f65c:	20801c1e 	bne	r4,r2,100f6d0 <strncmp+0x9c>
 100f660:	31bfff04 	addi	r6,r6,-4
 100f664:	30002d26 	beq	r6,zero,100f71c <strncmp+0xe8>
 100f668:	027fbff4 	movhi	r9,65279
 100f66c:	4a7fbfc4 	addi	r9,r9,-257
 100f670:	2247883a 	add	r3,r4,r9
 100f674:	01602074 	movhi	r5,32897
 100f678:	29602004 	addi	r5,r5,-32640
 100f67c:	1946703a 	and	r3,r3,r5
 100f680:	0104303a 	nor	r2,zero,r4
 100f684:	10c4703a 	and	r2,r2,r3
 100f688:	1000241e 	bne	r2,zero,100f71c <strncmp+0xe8>
 100f68c:	5017883a 	mov	r11,r10
 100f690:	4815883a 	mov	r10,r9
 100f694:	2813883a 	mov	r9,r5
 100f698:	00000a06 	br	100f6c4 <strncmp+0x90>
 100f69c:	41000017 	ldw	r4,0(r8)
 100f6a0:	39400017 	ldw	r5,0(r7)
 100f6a4:	2285883a 	add	r2,r4,r10
 100f6a8:	1244703a 	and	r2,r2,r9
 100f6ac:	0106303a 	nor	r3,zero,r4
 100f6b0:	1886703a 	and	r3,r3,r2
 100f6b4:	2140061e 	bne	r4,r5,100f6d0 <strncmp+0x9c>
 100f6b8:	31bfff04 	addi	r6,r6,-4
 100f6bc:	30001726 	beq	r6,zero,100f71c <strncmp+0xe8>
 100f6c0:	1800161e 	bne	r3,zero,100f71c <strncmp+0xe8>
 100f6c4:	42000104 	addi	r8,r8,4
 100f6c8:	39c00104 	addi	r7,r7,4
 100f6cc:	59bff336 	bltu	r11,r6,100f69c <strncmp+0x68>
 100f6d0:	4009883a 	mov	r4,r8
 100f6d4:	380b883a 	mov	r5,r7
 100f6d8:	31bfffc4 	addi	r6,r6,-1
 100f6dc:	01ffffc4 	movi	r7,-1
 100f6e0:	31c00a1e 	bne	r6,r7,100f70c <strncmp+0xd8>
 100f6e4:	20c00003 	ldbu	r3,0(r4)
 100f6e8:	28800003 	ldbu	r2,0(r5)
 100f6ec:	1885c83a 	sub	r2,r3,r2
 100f6f0:	f800283a 	ret
 100f6f4:	30000926 	beq	r6,zero,100f71c <strncmp+0xe8>
 100f6f8:	18000826 	beq	r3,zero,100f71c <strncmp+0xe8>
 100f6fc:	31bfffc4 	addi	r6,r6,-1
 100f700:	21000044 	addi	r4,r4,1
 100f704:	29400044 	addi	r5,r5,1
 100f708:	31fff626 	beq	r6,r7,100f6e4 <strncmp+0xb0>
 100f70c:	20c00007 	ldb	r3,0(r4)
 100f710:	28800007 	ldb	r2,0(r5)
 100f714:	18bff726 	beq	r3,r2,100f6f4 <strncmp+0xc0>
 100f718:	003ff206 	br	100f6e4 <strncmp+0xb0>
 100f71c:	0005883a 	mov	r2,zero
 100f720:	f800283a 	ret

0100f724 <strnlen>:
 100f724:	2007883a 	mov	r3,r4
 100f728:	28000a26 	beq	r5,zero,100f754 <strnlen+0x30>
 100f72c:	20800007 	ldb	r2,0(r4)
 100f730:	10000826 	beq	r2,zero,100f754 <strnlen+0x30>
 100f734:	214b883a 	add	r5,r4,r5
 100f738:	00000206 	br	100f744 <strnlen+0x20>
 100f73c:	20800007 	ldb	r2,0(r4)
 100f740:	10000226 	beq	r2,zero,100f74c <strnlen+0x28>
 100f744:	21000044 	addi	r4,r4,1
 100f748:	217ffc1e 	bne	r4,r5,100f73c <strnlen+0x18>
 100f74c:	20c5c83a 	sub	r2,r4,r3
 100f750:	f800283a 	ret
 100f754:	0005883a 	mov	r2,zero
 100f758:	f800283a 	ret

0100f75c <_strtol_r>:
 100f75c:	defff304 	addi	sp,sp,-52
 100f760:	008040f4 	movhi	r2,259
 100f764:	10a3d004 	addi	r2,r2,-28864
 100f768:	dd000715 	stw	r20,28(sp)
 100f76c:	15000017 	ldw	r20,0(r2)
 100f770:	ddc00a15 	stw	r23,40(sp)
 100f774:	dc800515 	stw	r18,20(sp)
 100f778:	dc400415 	stw	r17,16(sp)
 100f77c:	dfc00c15 	stw	ra,48(sp)
 100f780:	df000b15 	stw	fp,44(sp)
 100f784:	dd800915 	stw	r22,36(sp)
 100f788:	dd400815 	stw	r21,32(sp)
 100f78c:	dcc00615 	stw	r19,24(sp)
 100f790:	dc000315 	stw	r16,12(sp)
 100f794:	282f883a 	mov	r23,r5
 100f798:	d9000115 	stw	r4,4(sp)
 100f79c:	d9800215 	stw	r6,8(sp)
 100f7a0:	3825883a 	mov	r18,r7
 100f7a4:	2823883a 	mov	r17,r5
 100f7a8:	8c000007 	ldb	r16,0(r17)
 100f7ac:	8c400044 	addi	r17,r17,1
 100f7b0:	a407883a 	add	r3,r20,r16
 100f7b4:	18800003 	ldbu	r2,0(r3)
 100f7b8:	1080020c 	andi	r2,r2,8
 100f7bc:	103ffa1e 	bne	r2,zero,100f7a8 <_strtol_r+0x4c>
 100f7c0:	00800b44 	movi	r2,45
 100f7c4:	80805c26 	beq	r16,r2,100f938 <_strtol_r+0x1dc>
 100f7c8:	00800ac4 	movi	r2,43
 100f7cc:	80805726 	beq	r16,r2,100f92c <_strtol_r+0x1d0>
 100f7d0:	d8000015 	stw	zero,0(sp)
 100f7d4:	9007003a 	cmpeq	r3,r18,zero
 100f7d8:	1800431e 	bne	r3,zero,100f8e8 <_strtol_r+0x18c>
 100f7dc:	00800404 	movi	r2,16
 100f7e0:	90804126 	beq	r18,r2,100f8e8 <_strtol_r+0x18c>
 100f7e4:	902b883a 	mov	r21,r18
 100f7e8:	d8c00017 	ldw	r3,0(sp)
 100f7ec:	1838c03a 	cmpne	fp,r3,zero
 100f7f0:	e0004a1e 	bne	fp,zero,100f91c <_strtol_r+0x1c0>
 100f7f4:	04e00034 	movhi	r19,32768
 100f7f8:	9cffffc4 	addi	r19,r19,-1
 100f7fc:	9809883a 	mov	r4,r19
 100f800:	a80b883a 	mov	r5,r21
 100f804:	10180f80 	call	10180f8 <__umodsi3>
 100f808:	9809883a 	mov	r4,r19
 100f80c:	a80b883a 	mov	r5,r21
 100f810:	102d883a 	mov	r22,r2
 100f814:	10180f00 	call	10180f0 <__udivsi3>
 100f818:	1027883a 	mov	r19,r2
 100f81c:	a405883a 	add	r2,r20,r16
 100f820:	11400003 	ldbu	r5,0(r2)
 100f824:	0009883a 	mov	r4,zero
 100f828:	000d883a 	mov	r6,zero
 100f82c:	28c0010c 	andi	r3,r5,4
 100f830:	18000f26 	beq	r3,zero,100f870 <_strtol_r+0x114>
 100f834:	843ff404 	addi	r16,r16,-48
 100f838:	8480150e 	bge	r16,r18,100f890 <_strtol_r+0x134>
 100f83c:	30003216 	blt	r6,zero,100f908 <_strtol_r+0x1ac>
 100f840:	99003136 	bltu	r19,r4,100f908 <_strtol_r+0x1ac>
 100f844:	24c02f26 	beq	r4,r19,100f904 <_strtol_r+0x1a8>
 100f848:	a80b883a 	mov	r5,r21
 100f84c:	100def40 	call	100def4 <__mulsi3>
 100f850:	1409883a 	add	r4,r2,r16
 100f854:	01800044 	movi	r6,1
 100f858:	8c000007 	ldb	r16,0(r17)
 100f85c:	8c400044 	addi	r17,r17,1
 100f860:	a405883a 	add	r2,r20,r16
 100f864:	11400003 	ldbu	r5,0(r2)
 100f868:	28c0010c 	andi	r3,r5,4
 100f86c:	183ff11e 	bne	r3,zero,100f834 <_strtol_r+0xd8>
 100f870:	288000cc 	andi	r2,r5,3
 100f874:	10000626 	beq	r2,zero,100f890 <_strtol_r+0x134>
 100f878:	2880004c 	andi	r2,r5,1
 100f87c:	1005003a 	cmpeq	r2,r2,zero
 100f880:	1000231e 	bne	r2,zero,100f910 <_strtol_r+0x1b4>
 100f884:	00800dc4 	movi	r2,55
 100f888:	80a1c83a 	sub	r16,r16,r2
 100f88c:	84bfeb16 	blt	r16,r18,100f83c <_strtol_r+0xe0>
 100f890:	30002e16 	blt	r6,zero,100f94c <_strtol_r+0x1f0>
 100f894:	e000231e 	bne	fp,zero,100f924 <_strtol_r+0x1c8>
 100f898:	2007883a 	mov	r3,r4
 100f89c:	d8800217 	ldw	r2,8(sp)
 100f8a0:	10000426 	beq	r2,zero,100f8b4 <_strtol_r+0x158>
 100f8a4:	30000126 	beq	r6,zero,100f8ac <_strtol_r+0x150>
 100f8a8:	8dffffc4 	addi	r23,r17,-1
 100f8ac:	d9000217 	ldw	r4,8(sp)
 100f8b0:	25c00015 	stw	r23,0(r4)
 100f8b4:	1805883a 	mov	r2,r3
 100f8b8:	dfc00c17 	ldw	ra,48(sp)
 100f8bc:	df000b17 	ldw	fp,44(sp)
 100f8c0:	ddc00a17 	ldw	r23,40(sp)
 100f8c4:	dd800917 	ldw	r22,36(sp)
 100f8c8:	dd400817 	ldw	r21,32(sp)
 100f8cc:	dd000717 	ldw	r20,28(sp)
 100f8d0:	dcc00617 	ldw	r19,24(sp)
 100f8d4:	dc800517 	ldw	r18,20(sp)
 100f8d8:	dc400417 	ldw	r17,16(sp)
 100f8dc:	dc000317 	ldw	r16,12(sp)
 100f8e0:	dec00d04 	addi	sp,sp,52
 100f8e4:	f800283a 	ret
 100f8e8:	00800c04 	movi	r2,48
 100f8ec:	80801f26 	beq	r16,r2,100f96c <_strtol_r+0x210>
 100f8f0:	183fbc26 	beq	r3,zero,100f7e4 <_strtol_r+0x88>
 100f8f4:	00800c04 	movi	r2,48
 100f8f8:	80802926 	beq	r16,r2,100f9a0 <_strtol_r+0x244>
 100f8fc:	04800284 	movi	r18,10
 100f900:	003fb806 	br	100f7e4 <_strtol_r+0x88>
 100f904:	b43fd00e 	bge	r22,r16,100f848 <_strtol_r+0xec>
 100f908:	01bfffc4 	movi	r6,-1
 100f90c:	003fd206 	br	100f858 <_strtol_r+0xfc>
 100f910:	008015c4 	movi	r2,87
 100f914:	80a1c83a 	sub	r16,r16,r2
 100f918:	003fdc06 	br	100f88c <_strtol_r+0x130>
 100f91c:	04e00034 	movhi	r19,32768
 100f920:	003fb606 	br	100f7fc <_strtol_r+0xa0>
 100f924:	0107c83a 	sub	r3,zero,r4
 100f928:	003fdc06 	br	100f89c <_strtol_r+0x140>
 100f92c:	8c000007 	ldb	r16,0(r17)
 100f930:	8c400044 	addi	r17,r17,1
 100f934:	003fa606 	br	100f7d0 <_strtol_r+0x74>
 100f938:	8c000007 	ldb	r16,0(r17)
 100f93c:	00800044 	movi	r2,1
 100f940:	8c400044 	addi	r17,r17,1
 100f944:	d8800015 	stw	r2,0(sp)
 100f948:	003fa206 	br	100f7d4 <_strtol_r+0x78>
 100f94c:	d9000017 	ldw	r4,0(sp)
 100f950:	2005003a 	cmpeq	r2,r4,zero
 100f954:	10000f1e 	bne	r2,zero,100f994 <_strtol_r+0x238>
 100f958:	00e00034 	movhi	r3,32768
 100f95c:	d9000117 	ldw	r4,4(sp)
 100f960:	00800884 	movi	r2,34
 100f964:	20800015 	stw	r2,0(r4)
 100f968:	003fcc06 	br	100f89c <_strtol_r+0x140>
 100f96c:	89000007 	ldb	r4,0(r17)
 100f970:	00801e04 	movi	r2,120
 100f974:	20800226 	beq	r4,r2,100f980 <_strtol_r+0x224>
 100f978:	00801604 	movi	r2,88
 100f97c:	20bfdc1e 	bne	r4,r2,100f8f0 <_strtol_r+0x194>
 100f980:	8c000047 	ldb	r16,1(r17)
 100f984:	04800404 	movi	r18,16
 100f988:	8c400084 	addi	r17,r17,2
 100f98c:	902b883a 	mov	r21,r18
 100f990:	003f9506 	br	100f7e8 <_strtol_r+0x8c>
 100f994:	00e00034 	movhi	r3,32768
 100f998:	18ffffc4 	addi	r3,r3,-1
 100f99c:	003fef06 	br	100f95c <_strtol_r+0x200>
 100f9a0:	04800204 	movi	r18,8
 100f9a4:	902b883a 	mov	r21,r18
 100f9a8:	003f8f06 	br	100f7e8 <_strtol_r+0x8c>

0100f9ac <strtol>:
 100f9ac:	008040f4 	movhi	r2,259
 100f9b0:	10a3d104 	addi	r2,r2,-28860
 100f9b4:	2013883a 	mov	r9,r4
 100f9b8:	11000017 	ldw	r4,0(r2)
 100f9bc:	2805883a 	mov	r2,r5
 100f9c0:	300f883a 	mov	r7,r6
 100f9c4:	480b883a 	mov	r5,r9
 100f9c8:	100d883a 	mov	r6,r2
 100f9cc:	100f75c1 	jmpi	100f75c <_strtol_r>

0100f9d0 <__sprint_r>:
 100f9d0:	30800217 	ldw	r2,8(r6)
 100f9d4:	defffe04 	addi	sp,sp,-8
 100f9d8:	dc000015 	stw	r16,0(sp)
 100f9dc:	dfc00115 	stw	ra,4(sp)
 100f9e0:	3021883a 	mov	r16,r6
 100f9e4:	0007883a 	mov	r3,zero
 100f9e8:	1000061e 	bne	r2,zero,100fa04 <__sprint_r+0x34>
 100f9ec:	1805883a 	mov	r2,r3
 100f9f0:	30000115 	stw	zero,4(r6)
 100f9f4:	dfc00117 	ldw	ra,4(sp)
 100f9f8:	dc000017 	ldw	r16,0(sp)
 100f9fc:	dec00204 	addi	sp,sp,8
 100fa00:	f800283a 	ret
 100fa04:	1013ba80 	call	1013ba8 <__sfvwrite_r>
 100fa08:	1007883a 	mov	r3,r2
 100fa0c:	1805883a 	mov	r2,r3
 100fa10:	80000115 	stw	zero,4(r16)
 100fa14:	80000215 	stw	zero,8(r16)
 100fa18:	dfc00117 	ldw	ra,4(sp)
 100fa1c:	dc000017 	ldw	r16,0(sp)
 100fa20:	dec00204 	addi	sp,sp,8
 100fa24:	f800283a 	ret

0100fa28 <___vfprintf_internal_r>:
 100fa28:	defea404 	addi	sp,sp,-1392
 100fa2c:	dd815815 	stw	r22,1376(sp)
 100fa30:	dc015215 	stw	r16,1352(sp)
 100fa34:	d9c15115 	stw	r7,1348(sp)
 100fa38:	dfc15b15 	stw	ra,1388(sp)
 100fa3c:	df015a15 	stw	fp,1384(sp)
 100fa40:	ddc15915 	stw	r23,1380(sp)
 100fa44:	dd415715 	stw	r21,1372(sp)
 100fa48:	dd015615 	stw	r20,1368(sp)
 100fa4c:	dcc15515 	stw	r19,1364(sp)
 100fa50:	dc815415 	stw	r18,1360(sp)
 100fa54:	dc415315 	stw	r17,1356(sp)
 100fa58:	282d883a 	mov	r22,r5
 100fa5c:	3021883a 	mov	r16,r6
 100fa60:	d9014f15 	stw	r4,1340(sp)
 100fa64:	10141cc0 	call	10141cc <_localeconv_r>
 100fa68:	10800017 	ldw	r2,0(r2)
 100fa6c:	d9c15117 	ldw	r7,1348(sp)
 100fa70:	d8814915 	stw	r2,1316(sp)
 100fa74:	d8814f17 	ldw	r2,1340(sp)
 100fa78:	10000226 	beq	r2,zero,100fa84 <___vfprintf_internal_r+0x5c>
 100fa7c:	10800e17 	ldw	r2,56(r2)
 100fa80:	10020d26 	beq	r2,zero,10102b8 <___vfprintf_internal_r+0x890>
 100fa84:	b080030b 	ldhu	r2,12(r22)
 100fa88:	1080020c 	andi	r2,r2,8
 100fa8c:	10020e26 	beq	r2,zero,10102c8 <___vfprintf_internal_r+0x8a0>
 100fa90:	b0800417 	ldw	r2,16(r22)
 100fa94:	10020c26 	beq	r2,zero,10102c8 <___vfprintf_internal_r+0x8a0>
 100fa98:	b200030b 	ldhu	r8,12(r22)
 100fa9c:	00800284 	movi	r2,10
 100faa0:	40c0068c 	andi	r3,r8,26
 100faa4:	18802f1e 	bne	r3,r2,100fb64 <___vfprintf_internal_r+0x13c>
 100faa8:	b080038f 	ldh	r2,14(r22)
 100faac:	10002d16 	blt	r2,zero,100fb64 <___vfprintf_internal_r+0x13c>
 100fab0:	b240038b 	ldhu	r9,14(r22)
 100fab4:	b2800717 	ldw	r10,28(r22)
 100fab8:	b2c00917 	ldw	r11,36(r22)
 100fabc:	d9014f17 	ldw	r4,1340(sp)
 100fac0:	dc402904 	addi	r17,sp,164
 100fac4:	d8804004 	addi	r2,sp,256
 100fac8:	00c10004 	movi	r3,1024
 100facc:	423fff4c 	andi	r8,r8,65533
 100fad0:	800d883a 	mov	r6,r16
 100fad4:	880b883a 	mov	r5,r17
 100fad8:	da002c0d 	sth	r8,176(sp)
 100fadc:	da402c8d 	sth	r9,178(sp)
 100fae0:	da803015 	stw	r10,192(sp)
 100fae4:	dac03215 	stw	r11,200(sp)
 100fae8:	d8802d15 	stw	r2,180(sp)
 100faec:	d8c02e15 	stw	r3,184(sp)
 100faf0:	d8802915 	stw	r2,164(sp)
 100faf4:	d8c02b15 	stw	r3,172(sp)
 100faf8:	d8002f15 	stw	zero,188(sp)
 100fafc:	100fa280 	call	100fa28 <___vfprintf_internal_r>
 100fb00:	d8814b15 	stw	r2,1324(sp)
 100fb04:	10000416 	blt	r2,zero,100fb18 <___vfprintf_internal_r+0xf0>
 100fb08:	d9014f17 	ldw	r4,1340(sp)
 100fb0c:	880b883a 	mov	r5,r17
 100fb10:	10132440 	call	1013244 <_fflush_r>
 100fb14:	1002321e 	bne	r2,zero,10103e0 <___vfprintf_internal_r+0x9b8>
 100fb18:	d8802c0b 	ldhu	r2,176(sp)
 100fb1c:	1080100c 	andi	r2,r2,64
 100fb20:	10000326 	beq	r2,zero,100fb30 <___vfprintf_internal_r+0x108>
 100fb24:	b080030b 	ldhu	r2,12(r22)
 100fb28:	10801014 	ori	r2,r2,64
 100fb2c:	b080030d 	sth	r2,12(r22)
 100fb30:	d8814b17 	ldw	r2,1324(sp)
 100fb34:	dfc15b17 	ldw	ra,1388(sp)
 100fb38:	df015a17 	ldw	fp,1384(sp)
 100fb3c:	ddc15917 	ldw	r23,1380(sp)
 100fb40:	dd815817 	ldw	r22,1376(sp)
 100fb44:	dd415717 	ldw	r21,1372(sp)
 100fb48:	dd015617 	ldw	r20,1368(sp)
 100fb4c:	dcc15517 	ldw	r19,1364(sp)
 100fb50:	dc815417 	ldw	r18,1360(sp)
 100fb54:	dc415317 	ldw	r17,1356(sp)
 100fb58:	dc015217 	ldw	r16,1352(sp)
 100fb5c:	dec15c04 	addi	sp,sp,1392
 100fb60:	f800283a 	ret
 100fb64:	0005883a 	mov	r2,zero
 100fb68:	0007883a 	mov	r3,zero
 100fb6c:	dd401904 	addi	r21,sp,100
 100fb70:	d8814215 	stw	r2,1288(sp)
 100fb74:	802f883a 	mov	r23,r16
 100fb78:	d8c14315 	stw	r3,1292(sp)
 100fb7c:	d8014b15 	stw	zero,1324(sp)
 100fb80:	d8014815 	stw	zero,1312(sp)
 100fb84:	d8014415 	stw	zero,1296(sp)
 100fb88:	d8014715 	stw	zero,1308(sp)
 100fb8c:	dd400c15 	stw	r21,48(sp)
 100fb90:	d8000e15 	stw	zero,56(sp)
 100fb94:	d8000d15 	stw	zero,52(sp)
 100fb98:	b8800007 	ldb	r2,0(r23)
 100fb9c:	10001926 	beq	r2,zero,100fc04 <___vfprintf_internal_r+0x1dc>
 100fba0:	00c00944 	movi	r3,37
 100fba4:	10c01726 	beq	r2,r3,100fc04 <___vfprintf_internal_r+0x1dc>
 100fba8:	b821883a 	mov	r16,r23
 100fbac:	00000106 	br	100fbb4 <___vfprintf_internal_r+0x18c>
 100fbb0:	10c00326 	beq	r2,r3,100fbc0 <___vfprintf_internal_r+0x198>
 100fbb4:	84000044 	addi	r16,r16,1
 100fbb8:	80800007 	ldb	r2,0(r16)
 100fbbc:	103ffc1e 	bne	r2,zero,100fbb0 <___vfprintf_internal_r+0x188>
 100fbc0:	85e7c83a 	sub	r19,r16,r23
 100fbc4:	98000e26 	beq	r19,zero,100fc00 <___vfprintf_internal_r+0x1d8>
 100fbc8:	dc800e17 	ldw	r18,56(sp)
 100fbcc:	dc400d17 	ldw	r17,52(sp)
 100fbd0:	008001c4 	movi	r2,7
 100fbd4:	94e5883a 	add	r18,r18,r19
 100fbd8:	8c400044 	addi	r17,r17,1
 100fbdc:	adc00015 	stw	r23,0(r21)
 100fbe0:	dc800e15 	stw	r18,56(sp)
 100fbe4:	acc00115 	stw	r19,4(r21)
 100fbe8:	dc400d15 	stw	r17,52(sp)
 100fbec:	14428b16 	blt	r2,r17,101061c <___vfprintf_internal_r+0xbf4>
 100fbf0:	ad400204 	addi	r21,r21,8
 100fbf4:	d9014b17 	ldw	r4,1324(sp)
 100fbf8:	24c9883a 	add	r4,r4,r19
 100fbfc:	d9014b15 	stw	r4,1324(sp)
 100fc00:	802f883a 	mov	r23,r16
 100fc04:	b8800007 	ldb	r2,0(r23)
 100fc08:	10013c26 	beq	r2,zero,10100fc <___vfprintf_internal_r+0x6d4>
 100fc0c:	bdc00044 	addi	r23,r23,1
 100fc10:	d8000405 	stb	zero,16(sp)
 100fc14:	b8c00007 	ldb	r3,0(r23)
 100fc18:	04ffffc4 	movi	r19,-1
 100fc1c:	d8014c15 	stw	zero,1328(sp)
 100fc20:	d8014a15 	stw	zero,1320(sp)
 100fc24:	d8c14d15 	stw	r3,1332(sp)
 100fc28:	bdc00044 	addi	r23,r23,1
 100fc2c:	d9414d17 	ldw	r5,1332(sp)
 100fc30:	00801604 	movi	r2,88
 100fc34:	28fff804 	addi	r3,r5,-32
 100fc38:	10c06036 	bltu	r2,r3,100fdbc <___vfprintf_internal_r+0x394>
 100fc3c:	18c5883a 	add	r2,r3,r3
 100fc40:	1085883a 	add	r2,r2,r2
 100fc44:	00c04074 	movhi	r3,257
 100fc48:	18ff1604 	addi	r3,r3,-936
 100fc4c:	10c5883a 	add	r2,r2,r3
 100fc50:	11000017 	ldw	r4,0(r2)
 100fc54:	2000683a 	jmp	r4
 100fc58:	01010bcc 	andi	r4,zero,1071
 100fc5c:	0100fdbc 	xorhi	r4,zero,1014
 100fc60:	0100fdbc 	xorhi	r4,zero,1014
 100fc64:	01010bb8 	rdprs	r4,zero,1070
 100fc68:	0100fdbc 	xorhi	r4,zero,1014
 100fc6c:	0100fdbc 	xorhi	r4,zero,1014
 100fc70:	0100fdbc 	xorhi	r4,zero,1014
 100fc74:	0100fdbc 	xorhi	r4,zero,1014
 100fc78:	0100fdbc 	xorhi	r4,zero,1014
 100fc7c:	0100fdbc 	xorhi	r4,zero,1014
 100fc80:	01010998 	cmpnei	r4,zero,1062
 100fc84:	01010ba8 	cmpgeui	r4,zero,1070
 100fc88:	0100fdbc 	xorhi	r4,zero,1014
 100fc8c:	010109b0 	cmpltui	r4,zero,1062
 100fc90:	01010c50 	cmplti	r4,zero,1073
 100fc94:	0100fdbc 	xorhi	r4,zero,1014
 100fc98:	01010c3c 	xorhi	r4,zero,1072
 100fc9c:	01010bf8 	rdprs	r4,zero,1071
 100fca0:	01010bf8 	rdprs	r4,zero,1071
 100fca4:	01010bf8 	rdprs	r4,zero,1071
 100fca8:	01010bf8 	rdprs	r4,zero,1071
 100fcac:	01010bf8 	rdprs	r4,zero,1071
 100fcb0:	01010bf8 	rdprs	r4,zero,1071
 100fcb4:	01010bf8 	rdprs	r4,zero,1071
 100fcb8:	01010bf8 	rdprs	r4,zero,1071
 100fcbc:	01010bf8 	rdprs	r4,zero,1071
 100fcc0:	0100fdbc 	xorhi	r4,zero,1014
 100fcc4:	0100fdbc 	xorhi	r4,zero,1014
 100fcc8:	0100fdbc 	xorhi	r4,zero,1014
 100fccc:	0100fdbc 	xorhi	r4,zero,1014
 100fcd0:	0100fdbc 	xorhi	r4,zero,1014
 100fcd4:	0100fdbc 	xorhi	r4,zero,1014
 100fcd8:	0100fdbc 	xorhi	r4,zero,1014
 100fcdc:	0100fdbc 	xorhi	r4,zero,1014
 100fce0:	0100fdbc 	xorhi	r4,zero,1014
 100fce4:	0100fdbc 	xorhi	r4,zero,1014
 100fce8:	01010414 	movui	r4,1040
 100fcec:	01010a80 	call	1010a8 <OSCtxSw_SWITCH_PC+0x101068>
 100fcf0:	0100fdbc 	xorhi	r4,zero,1014
 100fcf4:	01010a80 	call	1010a8 <OSCtxSw_SWITCH_PC+0x101068>
 100fcf8:	0100fdbc 	xorhi	r4,zero,1014
 100fcfc:	0100fdbc 	xorhi	r4,zero,1014
 100fd00:	0100fdbc 	xorhi	r4,zero,1014
 100fd04:	0100fdbc 	xorhi	r4,zero,1014
 100fd08:	01010be4 	muli	r4,zero,1071
 100fd0c:	0100fdbc 	xorhi	r4,zero,1014
 100fd10:	0100fdbc 	xorhi	r4,zero,1014
 100fd14:	010104c8 	cmpgei	r4,zero,1043
 100fd18:	0100fdbc 	xorhi	r4,zero,1014
 100fd1c:	0100fdbc 	xorhi	r4,zero,1014
 100fd20:	0100fdbc 	xorhi	r4,zero,1014
 100fd24:	0100fdbc 	xorhi	r4,zero,1014
 100fd28:	0100fdbc 	xorhi	r4,zero,1014
 100fd2c:	01010514 	movui	r4,1044
 100fd30:	0100fdbc 	xorhi	r4,zero,1014
 100fd34:	0100fdbc 	xorhi	r4,zero,1014
 100fd38:	01010b34 	movhi	r4,1068
 100fd3c:	0100fdbc 	xorhi	r4,zero,1014
 100fd40:	0100fdbc 	xorhi	r4,zero,1014
 100fd44:	0100fdbc 	xorhi	r4,zero,1014
 100fd48:	0100fdbc 	xorhi	r4,zero,1014
 100fd4c:	0100fdbc 	xorhi	r4,zero,1014
 100fd50:	0100fdbc 	xorhi	r4,zero,1014
 100fd54:	0100fdbc 	xorhi	r4,zero,1014
 100fd58:	0100fdbc 	xorhi	r4,zero,1014
 100fd5c:	0100fdbc 	xorhi	r4,zero,1014
 100fd60:	0100fdbc 	xorhi	r4,zero,1014
 100fd64:	01010b08 	cmpgei	r4,zero,1068
 100fd68:	01010420 	cmpeqi	r4,zero,1040
 100fd6c:	01010a80 	call	1010a8 <OSCtxSw_SWITCH_PC+0x101068>
 100fd70:	01010a80 	call	1010a8 <OSCtxSw_SWITCH_PC+0x101068>
 100fd74:	01010a80 	call	1010a8 <OSCtxSw_SWITCH_PC+0x101068>
 100fd78:	01010a6c 	andhi	r4,zero,1065
 100fd7c:	01010420 	cmpeqi	r4,zero,1040
 100fd80:	0100fdbc 	xorhi	r4,zero,1014
 100fd84:	0100fdbc 	xorhi	r4,zero,1014
 100fd88:	010109f4 	movhi	r4,1063
 100fd8c:	0100fdbc 	xorhi	r4,zero,1014
 100fd90:	010109c4 	movi	r4,1063
 100fd94:	010104d4 	movui	r4,1043
 100fd98:	01010a24 	muli	r4,zero,1064
 100fd9c:	01010a10 	cmplti	r4,zero,1064
 100fda0:	0100fdbc 	xorhi	r4,zero,1014
 100fda4:	01010cb8 	rdprs	r4,zero,1074
 100fda8:	0100fdbc 	xorhi	r4,zero,1014
 100fdac:	01010520 	cmpeqi	r4,zero,1044
 100fdb0:	0100fdbc 	xorhi	r4,zero,1014
 100fdb4:	0100fdbc 	xorhi	r4,zero,1014
 100fdb8:	01010b98 	cmpnei	r4,zero,1070
 100fdbc:	d9014d17 	ldw	r4,1332(sp)
 100fdc0:	2000ce26 	beq	r4,zero,10100fc <___vfprintf_internal_r+0x6d4>
 100fdc4:	01400044 	movi	r5,1
 100fdc8:	d9800f04 	addi	r6,sp,60
 100fdcc:	d9c14015 	stw	r7,1280(sp)
 100fdd0:	d9414515 	stw	r5,1300(sp)
 100fdd4:	d9814115 	stw	r6,1284(sp)
 100fdd8:	280f883a 	mov	r7,r5
 100fddc:	d9000f05 	stb	r4,60(sp)
 100fde0:	d8000405 	stb	zero,16(sp)
 100fde4:	d8014615 	stw	zero,1304(sp)
 100fde8:	d8c14c17 	ldw	r3,1328(sp)
 100fdec:	1880008c 	andi	r2,r3,2
 100fdf0:	1005003a 	cmpeq	r2,r2,zero
 100fdf4:	d8815015 	stw	r2,1344(sp)
 100fdf8:	1000031e 	bne	r2,zero,100fe08 <___vfprintf_internal_r+0x3e0>
 100fdfc:	d9014517 	ldw	r4,1300(sp)
 100fe00:	21000084 	addi	r4,r4,2
 100fe04:	d9014515 	stw	r4,1300(sp)
 100fe08:	d9414c17 	ldw	r5,1328(sp)
 100fe0c:	2940210c 	andi	r5,r5,132
 100fe10:	d9414e15 	stw	r5,1336(sp)
 100fe14:	28002d1e 	bne	r5,zero,100fecc <___vfprintf_internal_r+0x4a4>
 100fe18:	d9814a17 	ldw	r6,1320(sp)
 100fe1c:	d8814517 	ldw	r2,1300(sp)
 100fe20:	30a1c83a 	sub	r16,r6,r2
 100fe24:	0400290e 	bge	zero,r16,100fecc <___vfprintf_internal_r+0x4a4>
 100fe28:	00800404 	movi	r2,16
 100fe2c:	14045e0e 	bge	r2,r16,1010fa8 <___vfprintf_internal_r+0x1580>
 100fe30:	dc800e17 	ldw	r18,56(sp)
 100fe34:	dc400d17 	ldw	r17,52(sp)
 100fe38:	1027883a 	mov	r19,r2
 100fe3c:	070040b4 	movhi	fp,258
 100fe40:	e71add84 	addi	fp,fp,27510
 100fe44:	050001c4 	movi	r20,7
 100fe48:	00000306 	br	100fe58 <___vfprintf_internal_r+0x430>
 100fe4c:	843ffc04 	addi	r16,r16,-16
 100fe50:	ad400204 	addi	r21,r21,8
 100fe54:	9c00130e 	bge	r19,r16,100fea4 <___vfprintf_internal_r+0x47c>
 100fe58:	94800404 	addi	r18,r18,16
 100fe5c:	8c400044 	addi	r17,r17,1
 100fe60:	af000015 	stw	fp,0(r21)
 100fe64:	acc00115 	stw	r19,4(r21)
 100fe68:	dc800e15 	stw	r18,56(sp)
 100fe6c:	dc400d15 	stw	r17,52(sp)
 100fe70:	a47ff60e 	bge	r20,r17,100fe4c <___vfprintf_internal_r+0x424>
 100fe74:	d9014f17 	ldw	r4,1340(sp)
 100fe78:	b00b883a 	mov	r5,r22
 100fe7c:	d9800c04 	addi	r6,sp,48
 100fe80:	d9c15115 	stw	r7,1348(sp)
 100fe84:	100f9d00 	call	100f9d0 <__sprint_r>
 100fe88:	d9c15117 	ldw	r7,1348(sp)
 100fe8c:	10009e1e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 100fe90:	843ffc04 	addi	r16,r16,-16
 100fe94:	dc800e17 	ldw	r18,56(sp)
 100fe98:	dc400d17 	ldw	r17,52(sp)
 100fe9c:	dd401904 	addi	r21,sp,100
 100fea0:	9c3fed16 	blt	r19,r16,100fe58 <___vfprintf_internal_r+0x430>
 100fea4:	9425883a 	add	r18,r18,r16
 100fea8:	8c400044 	addi	r17,r17,1
 100feac:	008001c4 	movi	r2,7
 100feb0:	af000015 	stw	fp,0(r21)
 100feb4:	ac000115 	stw	r16,4(r21)
 100feb8:	dc800e15 	stw	r18,56(sp)
 100febc:	dc400d15 	stw	r17,52(sp)
 100fec0:	1441f516 	blt	r2,r17,1010698 <___vfprintf_internal_r+0xc70>
 100fec4:	ad400204 	addi	r21,r21,8
 100fec8:	00000206 	br	100fed4 <___vfprintf_internal_r+0x4ac>
 100fecc:	dc800e17 	ldw	r18,56(sp)
 100fed0:	dc400d17 	ldw	r17,52(sp)
 100fed4:	d8800407 	ldb	r2,16(sp)
 100fed8:	10000b26 	beq	r2,zero,100ff08 <___vfprintf_internal_r+0x4e0>
 100fedc:	00800044 	movi	r2,1
 100fee0:	94800044 	addi	r18,r18,1
 100fee4:	8c400044 	addi	r17,r17,1
 100fee8:	a8800115 	stw	r2,4(r21)
 100feec:	d8c00404 	addi	r3,sp,16
 100fef0:	008001c4 	movi	r2,7
 100fef4:	a8c00015 	stw	r3,0(r21)
 100fef8:	dc800e15 	stw	r18,56(sp)
 100fefc:	dc400d15 	stw	r17,52(sp)
 100ff00:	1441da16 	blt	r2,r17,101066c <___vfprintf_internal_r+0xc44>
 100ff04:	ad400204 	addi	r21,r21,8
 100ff08:	d9015017 	ldw	r4,1344(sp)
 100ff0c:	20000b1e 	bne	r4,zero,100ff3c <___vfprintf_internal_r+0x514>
 100ff10:	d8800444 	addi	r2,sp,17
 100ff14:	94800084 	addi	r18,r18,2
 100ff18:	8c400044 	addi	r17,r17,1
 100ff1c:	a8800015 	stw	r2,0(r21)
 100ff20:	00c00084 	movi	r3,2
 100ff24:	008001c4 	movi	r2,7
 100ff28:	a8c00115 	stw	r3,4(r21)
 100ff2c:	dc800e15 	stw	r18,56(sp)
 100ff30:	dc400d15 	stw	r17,52(sp)
 100ff34:	1441c216 	blt	r2,r17,1010640 <___vfprintf_internal_r+0xc18>
 100ff38:	ad400204 	addi	r21,r21,8
 100ff3c:	d9414e17 	ldw	r5,1336(sp)
 100ff40:	00802004 	movi	r2,128
 100ff44:	2880b126 	beq	r5,r2,101020c <___vfprintf_internal_r+0x7e4>
 100ff48:	d8c14617 	ldw	r3,1304(sp)
 100ff4c:	19e1c83a 	sub	r16,r3,r7
 100ff50:	0400260e 	bge	zero,r16,100ffec <___vfprintf_internal_r+0x5c4>
 100ff54:	00800404 	movi	r2,16
 100ff58:	1403cf0e 	bge	r2,r16,1010e98 <___vfprintf_internal_r+0x1470>
 100ff5c:	1027883a 	mov	r19,r2
 100ff60:	070040b4 	movhi	fp,258
 100ff64:	e71ad984 	addi	fp,fp,27494
 100ff68:	050001c4 	movi	r20,7
 100ff6c:	00000306 	br	100ff7c <___vfprintf_internal_r+0x554>
 100ff70:	843ffc04 	addi	r16,r16,-16
 100ff74:	ad400204 	addi	r21,r21,8
 100ff78:	9c00130e 	bge	r19,r16,100ffc8 <___vfprintf_internal_r+0x5a0>
 100ff7c:	94800404 	addi	r18,r18,16
 100ff80:	8c400044 	addi	r17,r17,1
 100ff84:	af000015 	stw	fp,0(r21)
 100ff88:	acc00115 	stw	r19,4(r21)
 100ff8c:	dc800e15 	stw	r18,56(sp)
 100ff90:	dc400d15 	stw	r17,52(sp)
 100ff94:	a47ff60e 	bge	r20,r17,100ff70 <___vfprintf_internal_r+0x548>
 100ff98:	d9014f17 	ldw	r4,1340(sp)
 100ff9c:	b00b883a 	mov	r5,r22
 100ffa0:	d9800c04 	addi	r6,sp,48
 100ffa4:	d9c15115 	stw	r7,1348(sp)
 100ffa8:	100f9d00 	call	100f9d0 <__sprint_r>
 100ffac:	d9c15117 	ldw	r7,1348(sp)
 100ffb0:	1000551e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 100ffb4:	843ffc04 	addi	r16,r16,-16
 100ffb8:	dc800e17 	ldw	r18,56(sp)
 100ffbc:	dc400d17 	ldw	r17,52(sp)
 100ffc0:	dd401904 	addi	r21,sp,100
 100ffc4:	9c3fed16 	blt	r19,r16,100ff7c <___vfprintf_internal_r+0x554>
 100ffc8:	9425883a 	add	r18,r18,r16
 100ffcc:	8c400044 	addi	r17,r17,1
 100ffd0:	008001c4 	movi	r2,7
 100ffd4:	af000015 	stw	fp,0(r21)
 100ffd8:	ac000115 	stw	r16,4(r21)
 100ffdc:	dc800e15 	stw	r18,56(sp)
 100ffe0:	dc400d15 	stw	r17,52(sp)
 100ffe4:	14418216 	blt	r2,r17,10105f0 <___vfprintf_internal_r+0xbc8>
 100ffe8:	ad400204 	addi	r21,r21,8
 100ffec:	d9014c17 	ldw	r4,1328(sp)
 100fff0:	2080400c 	andi	r2,r4,256
 100fff4:	10004a1e 	bne	r2,zero,1010120 <___vfprintf_internal_r+0x6f8>
 100fff8:	d9414117 	ldw	r5,1284(sp)
 100fffc:	91e5883a 	add	r18,r18,r7
 1010000:	8c400044 	addi	r17,r17,1
 1010004:	008001c4 	movi	r2,7
 1010008:	a9400015 	stw	r5,0(r21)
 101000c:	a9c00115 	stw	r7,4(r21)
 1010010:	dc800e15 	stw	r18,56(sp)
 1010014:	dc400d15 	stw	r17,52(sp)
 1010018:	14416716 	blt	r2,r17,10105b8 <___vfprintf_internal_r+0xb90>
 101001c:	a8c00204 	addi	r3,r21,8
 1010020:	d9814c17 	ldw	r6,1328(sp)
 1010024:	3080010c 	andi	r2,r6,4
 1010028:	10002826 	beq	r2,zero,10100cc <___vfprintf_internal_r+0x6a4>
 101002c:	d8814a17 	ldw	r2,1320(sp)
 1010030:	d9014517 	ldw	r4,1300(sp)
 1010034:	1121c83a 	sub	r16,r2,r4
 1010038:	0400240e 	bge	zero,r16,10100cc <___vfprintf_internal_r+0x6a4>
 101003c:	00800404 	movi	r2,16
 1010040:	1404550e 	bge	r2,r16,1011198 <___vfprintf_internal_r+0x1770>
 1010044:	dc400d17 	ldw	r17,52(sp)
 1010048:	1027883a 	mov	r19,r2
 101004c:	070040b4 	movhi	fp,258
 1010050:	e71add84 	addi	fp,fp,27510
 1010054:	050001c4 	movi	r20,7
 1010058:	00000306 	br	1010068 <___vfprintf_internal_r+0x640>
 101005c:	843ffc04 	addi	r16,r16,-16
 1010060:	18c00204 	addi	r3,r3,8
 1010064:	9c00110e 	bge	r19,r16,10100ac <___vfprintf_internal_r+0x684>
 1010068:	94800404 	addi	r18,r18,16
 101006c:	8c400044 	addi	r17,r17,1
 1010070:	1f000015 	stw	fp,0(r3)
 1010074:	1cc00115 	stw	r19,4(r3)
 1010078:	dc800e15 	stw	r18,56(sp)
 101007c:	dc400d15 	stw	r17,52(sp)
 1010080:	a47ff60e 	bge	r20,r17,101005c <___vfprintf_internal_r+0x634>
 1010084:	d9014f17 	ldw	r4,1340(sp)
 1010088:	b00b883a 	mov	r5,r22
 101008c:	d9800c04 	addi	r6,sp,48
 1010090:	100f9d00 	call	100f9d0 <__sprint_r>
 1010094:	10001c1e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 1010098:	843ffc04 	addi	r16,r16,-16
 101009c:	dc800e17 	ldw	r18,56(sp)
 10100a0:	dc400d17 	ldw	r17,52(sp)
 10100a4:	d8c01904 	addi	r3,sp,100
 10100a8:	9c3fef16 	blt	r19,r16,1010068 <___vfprintf_internal_r+0x640>
 10100ac:	9425883a 	add	r18,r18,r16
 10100b0:	8c400044 	addi	r17,r17,1
 10100b4:	008001c4 	movi	r2,7
 10100b8:	1f000015 	stw	fp,0(r3)
 10100bc:	1c000115 	stw	r16,4(r3)
 10100c0:	dc800e15 	stw	r18,56(sp)
 10100c4:	dc400d15 	stw	r17,52(sp)
 10100c8:	1440cb16 	blt	r2,r17,10103f8 <___vfprintf_internal_r+0x9d0>
 10100cc:	d8814a17 	ldw	r2,1320(sp)
 10100d0:	d9414517 	ldw	r5,1300(sp)
 10100d4:	1140010e 	bge	r2,r5,10100dc <___vfprintf_internal_r+0x6b4>
 10100d8:	2805883a 	mov	r2,r5
 10100dc:	d9814b17 	ldw	r6,1324(sp)
 10100e0:	308d883a 	add	r6,r6,r2
 10100e4:	d9814b15 	stw	r6,1324(sp)
 10100e8:	90013b1e 	bne	r18,zero,10105d8 <___vfprintf_internal_r+0xbb0>
 10100ec:	d9c14017 	ldw	r7,1280(sp)
 10100f0:	dd401904 	addi	r21,sp,100
 10100f4:	d8000d15 	stw	zero,52(sp)
 10100f8:	003ea706 	br	100fb98 <___vfprintf_internal_r+0x170>
 10100fc:	d8800e17 	ldw	r2,56(sp)
 1010100:	1005451e 	bne	r2,zero,1011618 <___vfprintf_internal_r+0x1bf0>
 1010104:	d8000d15 	stw	zero,52(sp)
 1010108:	b080030b 	ldhu	r2,12(r22)
 101010c:	1080100c 	andi	r2,r2,64
 1010110:	103e8726 	beq	r2,zero,100fb30 <___vfprintf_internal_r+0x108>
 1010114:	00bfffc4 	movi	r2,-1
 1010118:	d8814b15 	stw	r2,1324(sp)
 101011c:	003e8406 	br	100fb30 <___vfprintf_internal_r+0x108>
 1010120:	d9814d17 	ldw	r6,1332(sp)
 1010124:	00801944 	movi	r2,101
 1010128:	11806e16 	blt	r2,r6,10102e4 <___vfprintf_internal_r+0x8bc>
 101012c:	d9414717 	ldw	r5,1308(sp)
 1010130:	00c00044 	movi	r3,1
 1010134:	1943490e 	bge	r3,r5,1010e5c <___vfprintf_internal_r+0x1434>
 1010138:	d8814117 	ldw	r2,1284(sp)
 101013c:	94800044 	addi	r18,r18,1
 1010140:	8c400044 	addi	r17,r17,1
 1010144:	a8800015 	stw	r2,0(r21)
 1010148:	008001c4 	movi	r2,7
 101014c:	a8c00115 	stw	r3,4(r21)
 1010150:	dc800e15 	stw	r18,56(sp)
 1010154:	dc400d15 	stw	r17,52(sp)
 1010158:	1441ca16 	blt	r2,r17,1010884 <___vfprintf_internal_r+0xe5c>
 101015c:	a8c00204 	addi	r3,r21,8
 1010160:	d9014917 	ldw	r4,1316(sp)
 1010164:	00800044 	movi	r2,1
 1010168:	94800044 	addi	r18,r18,1
 101016c:	8c400044 	addi	r17,r17,1
 1010170:	18800115 	stw	r2,4(r3)
 1010174:	008001c4 	movi	r2,7
 1010178:	19000015 	stw	r4,0(r3)
 101017c:	dc800e15 	stw	r18,56(sp)
 1010180:	dc400d15 	stw	r17,52(sp)
 1010184:	1441b616 	blt	r2,r17,1010860 <___vfprintf_internal_r+0xe38>
 1010188:	1cc00204 	addi	r19,r3,8
 101018c:	d9014217 	ldw	r4,1288(sp)
 1010190:	d9414317 	ldw	r5,1292(sp)
 1010194:	000d883a 	mov	r6,zero
 1010198:	000f883a 	mov	r7,zero
 101019c:	1017a300 	call	1017a30 <__nedf2>
 10101a0:	10017426 	beq	r2,zero,1010774 <___vfprintf_internal_r+0xd4c>
 10101a4:	d9414717 	ldw	r5,1308(sp)
 10101a8:	d9814117 	ldw	r6,1284(sp)
 10101ac:	8c400044 	addi	r17,r17,1
 10101b0:	2c85883a 	add	r2,r5,r18
 10101b4:	14bfffc4 	addi	r18,r2,-1
 10101b8:	28bfffc4 	addi	r2,r5,-1
 10101bc:	30c00044 	addi	r3,r6,1
 10101c0:	98800115 	stw	r2,4(r19)
 10101c4:	008001c4 	movi	r2,7
 10101c8:	98c00015 	stw	r3,0(r19)
 10101cc:	dc800e15 	stw	r18,56(sp)
 10101d0:	dc400d15 	stw	r17,52(sp)
 10101d4:	14418e16 	blt	r2,r17,1010810 <___vfprintf_internal_r+0xde8>
 10101d8:	9cc00204 	addi	r19,r19,8
 10101dc:	d9414817 	ldw	r5,1312(sp)
 10101e0:	d8800804 	addi	r2,sp,32
 10101e4:	8c400044 	addi	r17,r17,1
 10101e8:	9165883a 	add	r18,r18,r5
 10101ec:	98800015 	stw	r2,0(r19)
 10101f0:	008001c4 	movi	r2,7
 10101f4:	99400115 	stw	r5,4(r19)
 10101f8:	dc800e15 	stw	r18,56(sp)
 10101fc:	dc400d15 	stw	r17,52(sp)
 1010200:	1440ed16 	blt	r2,r17,10105b8 <___vfprintf_internal_r+0xb90>
 1010204:	98c00204 	addi	r3,r19,8
 1010208:	003f8506 	br	1010020 <___vfprintf_internal_r+0x5f8>
 101020c:	d9814a17 	ldw	r6,1320(sp)
 1010210:	d8814517 	ldw	r2,1300(sp)
 1010214:	30a1c83a 	sub	r16,r6,r2
 1010218:	043f4b0e 	bge	zero,r16,100ff48 <___vfprintf_internal_r+0x520>
 101021c:	00800404 	movi	r2,16
 1010220:	14043a0e 	bge	r2,r16,101130c <___vfprintf_internal_r+0x18e4>
 1010224:	1027883a 	mov	r19,r2
 1010228:	070040b4 	movhi	fp,258
 101022c:	e71ad984 	addi	fp,fp,27494
 1010230:	050001c4 	movi	r20,7
 1010234:	00000306 	br	1010244 <___vfprintf_internal_r+0x81c>
 1010238:	843ffc04 	addi	r16,r16,-16
 101023c:	ad400204 	addi	r21,r21,8
 1010240:	9c00130e 	bge	r19,r16,1010290 <___vfprintf_internal_r+0x868>
 1010244:	94800404 	addi	r18,r18,16
 1010248:	8c400044 	addi	r17,r17,1
 101024c:	af000015 	stw	fp,0(r21)
 1010250:	acc00115 	stw	r19,4(r21)
 1010254:	dc800e15 	stw	r18,56(sp)
 1010258:	dc400d15 	stw	r17,52(sp)
 101025c:	a47ff60e 	bge	r20,r17,1010238 <___vfprintf_internal_r+0x810>
 1010260:	d9014f17 	ldw	r4,1340(sp)
 1010264:	b00b883a 	mov	r5,r22
 1010268:	d9800c04 	addi	r6,sp,48
 101026c:	d9c15115 	stw	r7,1348(sp)
 1010270:	100f9d00 	call	100f9d0 <__sprint_r>
 1010274:	d9c15117 	ldw	r7,1348(sp)
 1010278:	103fa31e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 101027c:	843ffc04 	addi	r16,r16,-16
 1010280:	dc800e17 	ldw	r18,56(sp)
 1010284:	dc400d17 	ldw	r17,52(sp)
 1010288:	dd401904 	addi	r21,sp,100
 101028c:	9c3fed16 	blt	r19,r16,1010244 <___vfprintf_internal_r+0x81c>
 1010290:	9425883a 	add	r18,r18,r16
 1010294:	8c400044 	addi	r17,r17,1
 1010298:	008001c4 	movi	r2,7
 101029c:	af000015 	stw	fp,0(r21)
 10102a0:	ac000115 	stw	r16,4(r21)
 10102a4:	dc800e15 	stw	r18,56(sp)
 10102a8:	dc400d15 	stw	r17,52(sp)
 10102ac:	14416116 	blt	r2,r17,1010834 <___vfprintf_internal_r+0xe0c>
 10102b0:	ad400204 	addi	r21,r21,8
 10102b4:	003f2406 	br	100ff48 <___vfprintf_internal_r+0x520>
 10102b8:	d9014f17 	ldw	r4,1340(sp)
 10102bc:	10134dc0 	call	10134dc <__sinit>
 10102c0:	d9c15117 	ldw	r7,1348(sp)
 10102c4:	003def06 	br	100fa84 <___vfprintf_internal_r+0x5c>
 10102c8:	d9014f17 	ldw	r4,1340(sp)
 10102cc:	b00b883a 	mov	r5,r22
 10102d0:	d9c15115 	stw	r7,1348(sp)
 10102d4:	10119100 	call	1011910 <__swsetup_r>
 10102d8:	d9c15117 	ldw	r7,1348(sp)
 10102dc:	103dee26 	beq	r2,zero,100fa98 <___vfprintf_internal_r+0x70>
 10102e0:	003f8c06 	br	1010114 <___vfprintf_internal_r+0x6ec>
 10102e4:	d9014217 	ldw	r4,1288(sp)
 10102e8:	d9414317 	ldw	r5,1292(sp)
 10102ec:	000d883a 	mov	r6,zero
 10102f0:	000f883a 	mov	r7,zero
 10102f4:	10179a80 	call	10179a8 <__eqdf2>
 10102f8:	1000f21e 	bne	r2,zero,10106c4 <___vfprintf_internal_r+0xc9c>
 10102fc:	008040b4 	movhi	r2,258
 1010300:	109ad904 	addi	r2,r2,27492
 1010304:	94800044 	addi	r18,r18,1
 1010308:	8c400044 	addi	r17,r17,1
 101030c:	a8800015 	stw	r2,0(r21)
 1010310:	00c00044 	movi	r3,1
 1010314:	008001c4 	movi	r2,7
 1010318:	a8c00115 	stw	r3,4(r21)
 101031c:	dc800e15 	stw	r18,56(sp)
 1010320:	dc400d15 	stw	r17,52(sp)
 1010324:	14430016 	blt	r2,r17,1010f28 <___vfprintf_internal_r+0x1500>
 1010328:	a8c00204 	addi	r3,r21,8
 101032c:	d8800517 	ldw	r2,20(sp)
 1010330:	d9014717 	ldw	r4,1308(sp)
 1010334:	11015c0e 	bge	r2,r4,10108a8 <___vfprintf_internal_r+0xe80>
 1010338:	dc400d17 	ldw	r17,52(sp)
 101033c:	d9814917 	ldw	r6,1316(sp)
 1010340:	00800044 	movi	r2,1
 1010344:	94800044 	addi	r18,r18,1
 1010348:	8c400044 	addi	r17,r17,1
 101034c:	18800115 	stw	r2,4(r3)
 1010350:	008001c4 	movi	r2,7
 1010354:	19800015 	stw	r6,0(r3)
 1010358:	dc800e15 	stw	r18,56(sp)
 101035c:	dc400d15 	stw	r17,52(sp)
 1010360:	14431616 	blt	r2,r17,1010fbc <___vfprintf_internal_r+0x1594>
 1010364:	18c00204 	addi	r3,r3,8
 1010368:	d8814717 	ldw	r2,1308(sp)
 101036c:	143fffc4 	addi	r16,r2,-1
 1010370:	043f2b0e 	bge	zero,r16,1010020 <___vfprintf_internal_r+0x5f8>
 1010374:	00800404 	movi	r2,16
 1010378:	1402a80e 	bge	r2,r16,1010e1c <___vfprintf_internal_r+0x13f4>
 101037c:	dc400d17 	ldw	r17,52(sp)
 1010380:	1027883a 	mov	r19,r2
 1010384:	070040b4 	movhi	fp,258
 1010388:	e71ad984 	addi	fp,fp,27494
 101038c:	050001c4 	movi	r20,7
 1010390:	00000306 	br	10103a0 <___vfprintf_internal_r+0x978>
 1010394:	18c00204 	addi	r3,r3,8
 1010398:	843ffc04 	addi	r16,r16,-16
 101039c:	9c02a20e 	bge	r19,r16,1010e28 <___vfprintf_internal_r+0x1400>
 10103a0:	94800404 	addi	r18,r18,16
 10103a4:	8c400044 	addi	r17,r17,1
 10103a8:	1f000015 	stw	fp,0(r3)
 10103ac:	1cc00115 	stw	r19,4(r3)
 10103b0:	dc800e15 	stw	r18,56(sp)
 10103b4:	dc400d15 	stw	r17,52(sp)
 10103b8:	a47ff60e 	bge	r20,r17,1010394 <___vfprintf_internal_r+0x96c>
 10103bc:	d9014f17 	ldw	r4,1340(sp)
 10103c0:	b00b883a 	mov	r5,r22
 10103c4:	d9800c04 	addi	r6,sp,48
 10103c8:	100f9d00 	call	100f9d0 <__sprint_r>
 10103cc:	103f4e1e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 10103d0:	dc800e17 	ldw	r18,56(sp)
 10103d4:	dc400d17 	ldw	r17,52(sp)
 10103d8:	d8c01904 	addi	r3,sp,100
 10103dc:	003fee06 	br	1010398 <___vfprintf_internal_r+0x970>
 10103e0:	d8802c0b 	ldhu	r2,176(sp)
 10103e4:	00ffffc4 	movi	r3,-1
 10103e8:	d8c14b15 	stw	r3,1324(sp)
 10103ec:	1080100c 	andi	r2,r2,64
 10103f0:	103dcc1e 	bne	r2,zero,100fb24 <___vfprintf_internal_r+0xfc>
 10103f4:	003dce06 	br	100fb30 <___vfprintf_internal_r+0x108>
 10103f8:	d9014f17 	ldw	r4,1340(sp)
 10103fc:	b00b883a 	mov	r5,r22
 1010400:	d9800c04 	addi	r6,sp,48
 1010404:	100f9d00 	call	100f9d0 <__sprint_r>
 1010408:	103f3f1e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 101040c:	dc800e17 	ldw	r18,56(sp)
 1010410:	003f2e06 	br	10100cc <___vfprintf_internal_r+0x6a4>
 1010414:	d9414c17 	ldw	r5,1328(sp)
 1010418:	29400414 	ori	r5,r5,16
 101041c:	d9414c15 	stw	r5,1328(sp)
 1010420:	d9814c17 	ldw	r6,1328(sp)
 1010424:	3080080c 	andi	r2,r6,32
 1010428:	10014f1e 	bne	r2,zero,1010968 <___vfprintf_internal_r+0xf40>
 101042c:	d8c14c17 	ldw	r3,1328(sp)
 1010430:	1880040c 	andi	r2,r3,16
 1010434:	1002f01e 	bne	r2,zero,1010ff8 <___vfprintf_internal_r+0x15d0>
 1010438:	d9014c17 	ldw	r4,1328(sp)
 101043c:	2080100c 	andi	r2,r4,64
 1010440:	1002ed26 	beq	r2,zero,1010ff8 <___vfprintf_internal_r+0x15d0>
 1010444:	3880000f 	ldh	r2,0(r7)
 1010448:	39c00104 	addi	r7,r7,4
 101044c:	d9c14015 	stw	r7,1280(sp)
 1010450:	1023d7fa 	srai	r17,r2,31
 1010454:	1021883a 	mov	r16,r2
 1010458:	88037816 	blt	r17,zero,101123c <___vfprintf_internal_r+0x1814>
 101045c:	01000044 	movi	r4,1
 1010460:	98000416 	blt	r19,zero,1010474 <___vfprintf_internal_r+0xa4c>
 1010464:	d8c14c17 	ldw	r3,1328(sp)
 1010468:	00bfdfc4 	movi	r2,-129
 101046c:	1886703a 	and	r3,r3,r2
 1010470:	d8c14c15 	stw	r3,1328(sp)
 1010474:	8444b03a 	or	r2,r16,r17
 1010478:	10022c1e 	bne	r2,zero,1010d2c <___vfprintf_internal_r+0x1304>
 101047c:	98022b1e 	bne	r19,zero,1010d2c <___vfprintf_internal_r+0x1304>
 1010480:	20803fcc 	andi	r2,r4,255
 1010484:	1002a126 	beq	r2,zero,1010f0c <___vfprintf_internal_r+0x14e4>
 1010488:	d8c01904 	addi	r3,sp,100
 101048c:	dd000f04 	addi	r20,sp,60
 1010490:	d8c14115 	stw	r3,1284(sp)
 1010494:	d8c14117 	ldw	r3,1284(sp)
 1010498:	dcc14515 	stw	r19,1300(sp)
 101049c:	a0c5c83a 	sub	r2,r20,r3
 10104a0:	11c00a04 	addi	r7,r2,40
 10104a4:	99c0010e 	bge	r19,r7,10104ac <___vfprintf_internal_r+0xa84>
 10104a8:	d9c14515 	stw	r7,1300(sp)
 10104ac:	dcc14615 	stw	r19,1304(sp)
 10104b0:	d8800407 	ldb	r2,16(sp)
 10104b4:	103e4c26 	beq	r2,zero,100fde8 <___vfprintf_internal_r+0x3c0>
 10104b8:	d8814517 	ldw	r2,1300(sp)
 10104bc:	10800044 	addi	r2,r2,1
 10104c0:	d8814515 	stw	r2,1300(sp)
 10104c4:	003e4806 	br	100fde8 <___vfprintf_internal_r+0x3c0>
 10104c8:	d9814c17 	ldw	r6,1328(sp)
 10104cc:	31800414 	ori	r6,r6,16
 10104d0:	d9814c15 	stw	r6,1328(sp)
 10104d4:	d8c14c17 	ldw	r3,1328(sp)
 10104d8:	1880080c 	andi	r2,r3,32
 10104dc:	1001271e 	bne	r2,zero,101097c <___vfprintf_internal_r+0xf54>
 10104e0:	d9414c17 	ldw	r5,1328(sp)
 10104e4:	2880040c 	andi	r2,r5,16
 10104e8:	1002bc1e 	bne	r2,zero,1010fdc <___vfprintf_internal_r+0x15b4>
 10104ec:	d9814c17 	ldw	r6,1328(sp)
 10104f0:	3080100c 	andi	r2,r6,64
 10104f4:	1002b926 	beq	r2,zero,1010fdc <___vfprintf_internal_r+0x15b4>
 10104f8:	3c00000b 	ldhu	r16,0(r7)
 10104fc:	0009883a 	mov	r4,zero
 1010500:	39c00104 	addi	r7,r7,4
 1010504:	0023883a 	mov	r17,zero
 1010508:	d9c14015 	stw	r7,1280(sp)
 101050c:	d8000405 	stb	zero,16(sp)
 1010510:	003fd306 	br	1010460 <___vfprintf_internal_r+0xa38>
 1010514:	d9014c17 	ldw	r4,1328(sp)
 1010518:	21000414 	ori	r4,r4,16
 101051c:	d9014c15 	stw	r4,1328(sp)
 1010520:	d9414c17 	ldw	r5,1328(sp)
 1010524:	2880080c 	andi	r2,r5,32
 1010528:	1001081e 	bne	r2,zero,101094c <___vfprintf_internal_r+0xf24>
 101052c:	d8c14c17 	ldw	r3,1328(sp)
 1010530:	1880040c 	andi	r2,r3,16
 1010534:	1002b61e 	bne	r2,zero,1011010 <___vfprintf_internal_r+0x15e8>
 1010538:	d9014c17 	ldw	r4,1328(sp)
 101053c:	2080100c 	andi	r2,r4,64
 1010540:	1002b326 	beq	r2,zero,1011010 <___vfprintf_internal_r+0x15e8>
 1010544:	3c00000b 	ldhu	r16,0(r7)
 1010548:	01000044 	movi	r4,1
 101054c:	39c00104 	addi	r7,r7,4
 1010550:	0023883a 	mov	r17,zero
 1010554:	d9c14015 	stw	r7,1280(sp)
 1010558:	d8000405 	stb	zero,16(sp)
 101055c:	003fc006 	br	1010460 <___vfprintf_internal_r+0xa38>
 1010560:	d9014f17 	ldw	r4,1340(sp)
 1010564:	b00b883a 	mov	r5,r22
 1010568:	d9800c04 	addi	r6,sp,48
 101056c:	100f9d00 	call	100f9d0 <__sprint_r>
 1010570:	103ee51e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 1010574:	dc800e17 	ldw	r18,56(sp)
 1010578:	d8c01904 	addi	r3,sp,100
 101057c:	d9814c17 	ldw	r6,1328(sp)
 1010580:	3080004c 	andi	r2,r6,1
 1010584:	1005003a 	cmpeq	r2,r2,zero
 1010588:	103ea51e 	bne	r2,zero,1010020 <___vfprintf_internal_r+0x5f8>
 101058c:	00800044 	movi	r2,1
 1010590:	dc400d17 	ldw	r17,52(sp)
 1010594:	18800115 	stw	r2,4(r3)
 1010598:	d8814917 	ldw	r2,1316(sp)
 101059c:	94800044 	addi	r18,r18,1
 10105a0:	8c400044 	addi	r17,r17,1
 10105a4:	18800015 	stw	r2,0(r3)
 10105a8:	008001c4 	movi	r2,7
 10105ac:	dc800e15 	stw	r18,56(sp)
 10105b0:	dc400d15 	stw	r17,52(sp)
 10105b4:	1442240e 	bge	r2,r17,1010e48 <___vfprintf_internal_r+0x1420>
 10105b8:	d9014f17 	ldw	r4,1340(sp)
 10105bc:	b00b883a 	mov	r5,r22
 10105c0:	d9800c04 	addi	r6,sp,48
 10105c4:	100f9d00 	call	100f9d0 <__sprint_r>
 10105c8:	103ecf1e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 10105cc:	dc800e17 	ldw	r18,56(sp)
 10105d0:	d8c01904 	addi	r3,sp,100
 10105d4:	003e9206 	br	1010020 <___vfprintf_internal_r+0x5f8>
 10105d8:	d9014f17 	ldw	r4,1340(sp)
 10105dc:	b00b883a 	mov	r5,r22
 10105e0:	d9800c04 	addi	r6,sp,48
 10105e4:	100f9d00 	call	100f9d0 <__sprint_r>
 10105e8:	103ec026 	beq	r2,zero,10100ec <___vfprintf_internal_r+0x6c4>
 10105ec:	003ec606 	br	1010108 <___vfprintf_internal_r+0x6e0>
 10105f0:	d9014f17 	ldw	r4,1340(sp)
 10105f4:	b00b883a 	mov	r5,r22
 10105f8:	d9800c04 	addi	r6,sp,48
 10105fc:	d9c15115 	stw	r7,1348(sp)
 1010600:	100f9d00 	call	100f9d0 <__sprint_r>
 1010604:	d9c15117 	ldw	r7,1348(sp)
 1010608:	103ebf1e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 101060c:	dc800e17 	ldw	r18,56(sp)
 1010610:	dc400d17 	ldw	r17,52(sp)
 1010614:	dd401904 	addi	r21,sp,100
 1010618:	003e7406 	br	100ffec <___vfprintf_internal_r+0x5c4>
 101061c:	d9014f17 	ldw	r4,1340(sp)
 1010620:	b00b883a 	mov	r5,r22
 1010624:	d9800c04 	addi	r6,sp,48
 1010628:	d9c15115 	stw	r7,1348(sp)
 101062c:	100f9d00 	call	100f9d0 <__sprint_r>
 1010630:	d9c15117 	ldw	r7,1348(sp)
 1010634:	103eb41e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 1010638:	dd401904 	addi	r21,sp,100
 101063c:	003d6d06 	br	100fbf4 <___vfprintf_internal_r+0x1cc>
 1010640:	d9014f17 	ldw	r4,1340(sp)
 1010644:	b00b883a 	mov	r5,r22
 1010648:	d9800c04 	addi	r6,sp,48
 101064c:	d9c15115 	stw	r7,1348(sp)
 1010650:	100f9d00 	call	100f9d0 <__sprint_r>
 1010654:	d9c15117 	ldw	r7,1348(sp)
 1010658:	103eab1e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 101065c:	dc800e17 	ldw	r18,56(sp)
 1010660:	dc400d17 	ldw	r17,52(sp)
 1010664:	dd401904 	addi	r21,sp,100
 1010668:	003e3406 	br	100ff3c <___vfprintf_internal_r+0x514>
 101066c:	d9014f17 	ldw	r4,1340(sp)
 1010670:	b00b883a 	mov	r5,r22
 1010674:	d9800c04 	addi	r6,sp,48
 1010678:	d9c15115 	stw	r7,1348(sp)
 101067c:	100f9d00 	call	100f9d0 <__sprint_r>
 1010680:	d9c15117 	ldw	r7,1348(sp)
 1010684:	103ea01e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 1010688:	dc800e17 	ldw	r18,56(sp)
 101068c:	dc400d17 	ldw	r17,52(sp)
 1010690:	dd401904 	addi	r21,sp,100
 1010694:	003e1c06 	br	100ff08 <___vfprintf_internal_r+0x4e0>
 1010698:	d9014f17 	ldw	r4,1340(sp)
 101069c:	b00b883a 	mov	r5,r22
 10106a0:	d9800c04 	addi	r6,sp,48
 10106a4:	d9c15115 	stw	r7,1348(sp)
 10106a8:	100f9d00 	call	100f9d0 <__sprint_r>
 10106ac:	d9c15117 	ldw	r7,1348(sp)
 10106b0:	103e951e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 10106b4:	dc800e17 	ldw	r18,56(sp)
 10106b8:	dc400d17 	ldw	r17,52(sp)
 10106bc:	dd401904 	addi	r21,sp,100
 10106c0:	003e0406 	br	100fed4 <___vfprintf_internal_r+0x4ac>
 10106c4:	d9000517 	ldw	r4,20(sp)
 10106c8:	0102580e 	bge	zero,r4,101102c <___vfprintf_internal_r+0x1604>
 10106cc:	d9814717 	ldw	r6,1308(sp)
 10106d0:	21807a16 	blt	r4,r6,10108bc <___vfprintf_internal_r+0xe94>
 10106d4:	d8814117 	ldw	r2,1284(sp)
 10106d8:	91a5883a 	add	r18,r18,r6
 10106dc:	8c400044 	addi	r17,r17,1
 10106e0:	a8800015 	stw	r2,0(r21)
 10106e4:	008001c4 	movi	r2,7
 10106e8:	a9800115 	stw	r6,4(r21)
 10106ec:	dc800e15 	stw	r18,56(sp)
 10106f0:	dc400d15 	stw	r17,52(sp)
 10106f4:	1442fc16 	blt	r2,r17,10112e8 <___vfprintf_internal_r+0x18c0>
 10106f8:	a8c00204 	addi	r3,r21,8
 10106fc:	d9414717 	ldw	r5,1308(sp)
 1010700:	2161c83a 	sub	r16,r4,r5
 1010704:	043f9d0e 	bge	zero,r16,101057c <___vfprintf_internal_r+0xb54>
 1010708:	00800404 	movi	r2,16
 101070c:	1402190e 	bge	r2,r16,1010f74 <___vfprintf_internal_r+0x154c>
 1010710:	dc400d17 	ldw	r17,52(sp)
 1010714:	1027883a 	mov	r19,r2
 1010718:	070040b4 	movhi	fp,258
 101071c:	e71ad984 	addi	fp,fp,27494
 1010720:	050001c4 	movi	r20,7
 1010724:	00000306 	br	1010734 <___vfprintf_internal_r+0xd0c>
 1010728:	18c00204 	addi	r3,r3,8
 101072c:	843ffc04 	addi	r16,r16,-16
 1010730:	9c02130e 	bge	r19,r16,1010f80 <___vfprintf_internal_r+0x1558>
 1010734:	94800404 	addi	r18,r18,16
 1010738:	8c400044 	addi	r17,r17,1
 101073c:	1f000015 	stw	fp,0(r3)
 1010740:	1cc00115 	stw	r19,4(r3)
 1010744:	dc800e15 	stw	r18,56(sp)
 1010748:	dc400d15 	stw	r17,52(sp)
 101074c:	a47ff60e 	bge	r20,r17,1010728 <___vfprintf_internal_r+0xd00>
 1010750:	d9014f17 	ldw	r4,1340(sp)
 1010754:	b00b883a 	mov	r5,r22
 1010758:	d9800c04 	addi	r6,sp,48
 101075c:	100f9d00 	call	100f9d0 <__sprint_r>
 1010760:	103e691e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 1010764:	dc800e17 	ldw	r18,56(sp)
 1010768:	dc400d17 	ldw	r17,52(sp)
 101076c:	d8c01904 	addi	r3,sp,100
 1010770:	003fee06 	br	101072c <___vfprintf_internal_r+0xd04>
 1010774:	d8814717 	ldw	r2,1308(sp)
 1010778:	143fffc4 	addi	r16,r2,-1
 101077c:	043e970e 	bge	zero,r16,10101dc <___vfprintf_internal_r+0x7b4>
 1010780:	00800404 	movi	r2,16
 1010784:	1400180e 	bge	r2,r16,10107e8 <___vfprintf_internal_r+0xdc0>
 1010788:	1029883a 	mov	r20,r2
 101078c:	070040b4 	movhi	fp,258
 1010790:	e71ad984 	addi	fp,fp,27494
 1010794:	054001c4 	movi	r21,7
 1010798:	00000306 	br	10107a8 <___vfprintf_internal_r+0xd80>
 101079c:	9cc00204 	addi	r19,r19,8
 10107a0:	843ffc04 	addi	r16,r16,-16
 10107a4:	a400120e 	bge	r20,r16,10107f0 <___vfprintf_internal_r+0xdc8>
 10107a8:	94800404 	addi	r18,r18,16
 10107ac:	8c400044 	addi	r17,r17,1
 10107b0:	9f000015 	stw	fp,0(r19)
 10107b4:	9d000115 	stw	r20,4(r19)
 10107b8:	dc800e15 	stw	r18,56(sp)
 10107bc:	dc400d15 	stw	r17,52(sp)
 10107c0:	ac7ff60e 	bge	r21,r17,101079c <___vfprintf_internal_r+0xd74>
 10107c4:	d9014f17 	ldw	r4,1340(sp)
 10107c8:	b00b883a 	mov	r5,r22
 10107cc:	d9800c04 	addi	r6,sp,48
 10107d0:	100f9d00 	call	100f9d0 <__sprint_r>
 10107d4:	103e4c1e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 10107d8:	dc800e17 	ldw	r18,56(sp)
 10107dc:	dc400d17 	ldw	r17,52(sp)
 10107e0:	dcc01904 	addi	r19,sp,100
 10107e4:	003fee06 	br	10107a0 <___vfprintf_internal_r+0xd78>
 10107e8:	070040b4 	movhi	fp,258
 10107ec:	e71ad984 	addi	fp,fp,27494
 10107f0:	9425883a 	add	r18,r18,r16
 10107f4:	8c400044 	addi	r17,r17,1
 10107f8:	008001c4 	movi	r2,7
 10107fc:	9f000015 	stw	fp,0(r19)
 1010800:	9c000115 	stw	r16,4(r19)
 1010804:	dc800e15 	stw	r18,56(sp)
 1010808:	dc400d15 	stw	r17,52(sp)
 101080c:	147e720e 	bge	r2,r17,10101d8 <___vfprintf_internal_r+0x7b0>
 1010810:	d9014f17 	ldw	r4,1340(sp)
 1010814:	b00b883a 	mov	r5,r22
 1010818:	d9800c04 	addi	r6,sp,48
 101081c:	100f9d00 	call	100f9d0 <__sprint_r>
 1010820:	103e391e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 1010824:	dc800e17 	ldw	r18,56(sp)
 1010828:	dc400d17 	ldw	r17,52(sp)
 101082c:	dcc01904 	addi	r19,sp,100
 1010830:	003e6a06 	br	10101dc <___vfprintf_internal_r+0x7b4>
 1010834:	d9014f17 	ldw	r4,1340(sp)
 1010838:	b00b883a 	mov	r5,r22
 101083c:	d9800c04 	addi	r6,sp,48
 1010840:	d9c15115 	stw	r7,1348(sp)
 1010844:	100f9d00 	call	100f9d0 <__sprint_r>
 1010848:	d9c15117 	ldw	r7,1348(sp)
 101084c:	103e2e1e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 1010850:	dc800e17 	ldw	r18,56(sp)
 1010854:	dc400d17 	ldw	r17,52(sp)
 1010858:	dd401904 	addi	r21,sp,100
 101085c:	003dba06 	br	100ff48 <___vfprintf_internal_r+0x520>
 1010860:	d9014f17 	ldw	r4,1340(sp)
 1010864:	b00b883a 	mov	r5,r22
 1010868:	d9800c04 	addi	r6,sp,48
 101086c:	100f9d00 	call	100f9d0 <__sprint_r>
 1010870:	103e251e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 1010874:	dc800e17 	ldw	r18,56(sp)
 1010878:	dc400d17 	ldw	r17,52(sp)
 101087c:	dcc01904 	addi	r19,sp,100
 1010880:	003e4206 	br	101018c <___vfprintf_internal_r+0x764>
 1010884:	d9014f17 	ldw	r4,1340(sp)
 1010888:	b00b883a 	mov	r5,r22
 101088c:	d9800c04 	addi	r6,sp,48
 1010890:	100f9d00 	call	100f9d0 <__sprint_r>
 1010894:	103e1c1e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 1010898:	dc800e17 	ldw	r18,56(sp)
 101089c:	dc400d17 	ldw	r17,52(sp)
 10108a0:	d8c01904 	addi	r3,sp,100
 10108a4:	003e2e06 	br	1010160 <___vfprintf_internal_r+0x738>
 10108a8:	d9414c17 	ldw	r5,1328(sp)
 10108ac:	2880004c 	andi	r2,r5,1
 10108b0:	1005003a 	cmpeq	r2,r2,zero
 10108b4:	103dda1e 	bne	r2,zero,1010020 <___vfprintf_internal_r+0x5f8>
 10108b8:	003e9f06 	br	1010338 <___vfprintf_internal_r+0x910>
 10108bc:	d8c14117 	ldw	r3,1284(sp)
 10108c0:	9125883a 	add	r18,r18,r4
 10108c4:	8c400044 	addi	r17,r17,1
 10108c8:	008001c4 	movi	r2,7
 10108cc:	a8c00015 	stw	r3,0(r21)
 10108d0:	a9000115 	stw	r4,4(r21)
 10108d4:	dc800e15 	stw	r18,56(sp)
 10108d8:	dc400d15 	stw	r17,52(sp)
 10108dc:	14426c16 	blt	r2,r17,1011290 <___vfprintf_internal_r+0x1868>
 10108e0:	a8c00204 	addi	r3,r21,8
 10108e4:	d9414917 	ldw	r5,1316(sp)
 10108e8:	00800044 	movi	r2,1
 10108ec:	94800044 	addi	r18,r18,1
 10108f0:	8c400044 	addi	r17,r17,1
 10108f4:	18800115 	stw	r2,4(r3)
 10108f8:	008001c4 	movi	r2,7
 10108fc:	19400015 	stw	r5,0(r3)
 1010900:	dc800e15 	stw	r18,56(sp)
 1010904:	dc400d15 	stw	r17,52(sp)
 1010908:	2021883a 	mov	r16,r4
 101090c:	14425616 	blt	r2,r17,1011268 <___vfprintf_internal_r+0x1840>
 1010910:	19400204 	addi	r5,r3,8
 1010914:	d9814717 	ldw	r6,1308(sp)
 1010918:	8c400044 	addi	r17,r17,1
 101091c:	dc400d15 	stw	r17,52(sp)
 1010920:	3107c83a 	sub	r3,r6,r4
 1010924:	d9014117 	ldw	r4,1284(sp)
 1010928:	90e5883a 	add	r18,r18,r3
 101092c:	28c00115 	stw	r3,4(r5)
 1010930:	8105883a 	add	r2,r16,r4
 1010934:	28800015 	stw	r2,0(r5)
 1010938:	008001c4 	movi	r2,7
 101093c:	dc800e15 	stw	r18,56(sp)
 1010940:	147f1d16 	blt	r2,r17,10105b8 <___vfprintf_internal_r+0xb90>
 1010944:	28c00204 	addi	r3,r5,8
 1010948:	003db506 	br	1010020 <___vfprintf_internal_r+0x5f8>
 101094c:	3c000017 	ldw	r16,0(r7)
 1010950:	3c400117 	ldw	r17,4(r7)
 1010954:	39800204 	addi	r6,r7,8
 1010958:	01000044 	movi	r4,1
 101095c:	d9814015 	stw	r6,1280(sp)
 1010960:	d8000405 	stb	zero,16(sp)
 1010964:	003ebe06 	br	1010460 <___vfprintf_internal_r+0xa38>
 1010968:	3c000017 	ldw	r16,0(r7)
 101096c:	3c400117 	ldw	r17,4(r7)
 1010970:	38800204 	addi	r2,r7,8
 1010974:	d8814015 	stw	r2,1280(sp)
 1010978:	003eb706 	br	1010458 <___vfprintf_internal_r+0xa30>
 101097c:	3c000017 	ldw	r16,0(r7)
 1010980:	3c400117 	ldw	r17,4(r7)
 1010984:	39000204 	addi	r4,r7,8
 1010988:	d9014015 	stw	r4,1280(sp)
 101098c:	0009883a 	mov	r4,zero
 1010990:	d8000405 	stb	zero,16(sp)
 1010994:	003eb206 	br	1010460 <___vfprintf_internal_r+0xa38>
 1010998:	38c00017 	ldw	r3,0(r7)
 101099c:	39c00104 	addi	r7,r7,4
 10109a0:	d8c14a15 	stw	r3,1320(sp)
 10109a4:	1800d70e 	bge	r3,zero,1010d04 <___vfprintf_internal_r+0x12dc>
 10109a8:	00c7c83a 	sub	r3,zero,r3
 10109ac:	d8c14a15 	stw	r3,1320(sp)
 10109b0:	d9014c17 	ldw	r4,1328(sp)
 10109b4:	b8c00007 	ldb	r3,0(r23)
 10109b8:	21000114 	ori	r4,r4,4
 10109bc:	d9014c15 	stw	r4,1328(sp)
 10109c0:	003c9806 	br	100fc24 <___vfprintf_internal_r+0x1fc>
 10109c4:	d9814c17 	ldw	r6,1328(sp)
 10109c8:	3080080c 	andi	r2,r6,32
 10109cc:	1001f626 	beq	r2,zero,10111a8 <___vfprintf_internal_r+0x1780>
 10109d0:	d9014b17 	ldw	r4,1324(sp)
 10109d4:	38800017 	ldw	r2,0(r7)
 10109d8:	39c00104 	addi	r7,r7,4
 10109dc:	d9c14015 	stw	r7,1280(sp)
 10109e0:	2007d7fa 	srai	r3,r4,31
 10109e4:	d9c14017 	ldw	r7,1280(sp)
 10109e8:	11000015 	stw	r4,0(r2)
 10109ec:	10c00115 	stw	r3,4(r2)
 10109f0:	003c6906 	br	100fb98 <___vfprintf_internal_r+0x170>
 10109f4:	b8c00007 	ldb	r3,0(r23)
 10109f8:	00801b04 	movi	r2,108
 10109fc:	18825526 	beq	r3,r2,1011354 <___vfprintf_internal_r+0x192c>
 1010a00:	d9414c17 	ldw	r5,1328(sp)
 1010a04:	29400414 	ori	r5,r5,16
 1010a08:	d9414c15 	stw	r5,1328(sp)
 1010a0c:	003c8506 	br	100fc24 <___vfprintf_internal_r+0x1fc>
 1010a10:	d9814c17 	ldw	r6,1328(sp)
 1010a14:	b8c00007 	ldb	r3,0(r23)
 1010a18:	31800814 	ori	r6,r6,32
 1010a1c:	d9814c15 	stw	r6,1328(sp)
 1010a20:	003c8006 	br	100fc24 <___vfprintf_internal_r+0x1fc>
 1010a24:	d8814c17 	ldw	r2,1328(sp)
 1010a28:	3c000017 	ldw	r16,0(r7)
 1010a2c:	00c01e04 	movi	r3,120
 1010a30:	10800094 	ori	r2,r2,2
 1010a34:	d8814c15 	stw	r2,1328(sp)
 1010a38:	39c00104 	addi	r7,r7,4
 1010a3c:	014040b4 	movhi	r5,258
 1010a40:	295ac204 	addi	r5,r5,27400
 1010a44:	00800c04 	movi	r2,48
 1010a48:	0023883a 	mov	r17,zero
 1010a4c:	01000084 	movi	r4,2
 1010a50:	d9c14015 	stw	r7,1280(sp)
 1010a54:	d8c14d15 	stw	r3,1332(sp)
 1010a58:	d9414415 	stw	r5,1296(sp)
 1010a5c:	d8800445 	stb	r2,17(sp)
 1010a60:	d8c00485 	stb	r3,18(sp)
 1010a64:	d8000405 	stb	zero,16(sp)
 1010a68:	003e7d06 	br	1010460 <___vfprintf_internal_r+0xa38>
 1010a6c:	d8814c17 	ldw	r2,1328(sp)
 1010a70:	b8c00007 	ldb	r3,0(r23)
 1010a74:	10801014 	ori	r2,r2,64
 1010a78:	d8814c15 	stw	r2,1328(sp)
 1010a7c:	003c6906 	br	100fc24 <___vfprintf_internal_r+0x1fc>
 1010a80:	d9414c17 	ldw	r5,1328(sp)
 1010a84:	2880020c 	andi	r2,r5,8
 1010a88:	1001e526 	beq	r2,zero,1011220 <___vfprintf_internal_r+0x17f8>
 1010a8c:	39800017 	ldw	r6,0(r7)
 1010a90:	38800204 	addi	r2,r7,8
 1010a94:	d8814015 	stw	r2,1280(sp)
 1010a98:	d9814215 	stw	r6,1288(sp)
 1010a9c:	39c00117 	ldw	r7,4(r7)
 1010aa0:	d9c14315 	stw	r7,1292(sp)
 1010aa4:	d9014217 	ldw	r4,1288(sp)
 1010aa8:	d9414317 	ldw	r5,1292(sp)
 1010aac:	1015a9c0 	call	1015a9c <__isinfd>
 1010ab0:	10021d26 	beq	r2,zero,1011328 <___vfprintf_internal_r+0x1900>
 1010ab4:	d9014217 	ldw	r4,1288(sp)
 1010ab8:	d9414317 	ldw	r5,1292(sp)
 1010abc:	000d883a 	mov	r6,zero
 1010ac0:	000f883a 	mov	r7,zero
 1010ac4:	1017bc80 	call	1017bc8 <__ltdf2>
 1010ac8:	1002d016 	blt	r2,zero,101160c <___vfprintf_internal_r+0x1be4>
 1010acc:	d9414d17 	ldw	r5,1332(sp)
 1010ad0:	008011c4 	movi	r2,71
 1010ad4:	11421016 	blt	r2,r5,1011318 <___vfprintf_internal_r+0x18f0>
 1010ad8:	018040b4 	movhi	r6,258
 1010adc:	319ac704 	addi	r6,r6,27420
 1010ae0:	d9814115 	stw	r6,1284(sp)
 1010ae4:	d9014c17 	ldw	r4,1328(sp)
 1010ae8:	00c000c4 	movi	r3,3
 1010aec:	00bfdfc4 	movi	r2,-129
 1010af0:	2088703a 	and	r4,r4,r2
 1010af4:	180f883a 	mov	r7,r3
 1010af8:	d8c14515 	stw	r3,1300(sp)
 1010afc:	d9014c15 	stw	r4,1328(sp)
 1010b00:	d8014615 	stw	zero,1304(sp)
 1010b04:	003e6a06 	br	10104b0 <___vfprintf_internal_r+0xa88>
 1010b08:	38800017 	ldw	r2,0(r7)
 1010b0c:	00c00044 	movi	r3,1
 1010b10:	39c00104 	addi	r7,r7,4
 1010b14:	d9c14015 	stw	r7,1280(sp)
 1010b18:	d9000f04 	addi	r4,sp,60
 1010b1c:	180f883a 	mov	r7,r3
 1010b20:	d8c14515 	stw	r3,1300(sp)
 1010b24:	d9014115 	stw	r4,1284(sp)
 1010b28:	d8800f05 	stb	r2,60(sp)
 1010b2c:	d8000405 	stb	zero,16(sp)
 1010b30:	003cac06 	br	100fde4 <___vfprintf_internal_r+0x3bc>
 1010b34:	014040b4 	movhi	r5,258
 1010b38:	295acd04 	addi	r5,r5,27444
 1010b3c:	d9414415 	stw	r5,1296(sp)
 1010b40:	d9814c17 	ldw	r6,1328(sp)
 1010b44:	3080080c 	andi	r2,r6,32
 1010b48:	1000ff26 	beq	r2,zero,1010f48 <___vfprintf_internal_r+0x1520>
 1010b4c:	3c000017 	ldw	r16,0(r7)
 1010b50:	3c400117 	ldw	r17,4(r7)
 1010b54:	38800204 	addi	r2,r7,8
 1010b58:	d8814015 	stw	r2,1280(sp)
 1010b5c:	d9414c17 	ldw	r5,1328(sp)
 1010b60:	2880004c 	andi	r2,r5,1
 1010b64:	1005003a 	cmpeq	r2,r2,zero
 1010b68:	1000b91e 	bne	r2,zero,1010e50 <___vfprintf_internal_r+0x1428>
 1010b6c:	8444b03a 	or	r2,r16,r17
 1010b70:	1000b726 	beq	r2,zero,1010e50 <___vfprintf_internal_r+0x1428>
 1010b74:	d9814d17 	ldw	r6,1332(sp)
 1010b78:	29400094 	ori	r5,r5,2
 1010b7c:	00800c04 	movi	r2,48
 1010b80:	01000084 	movi	r4,2
 1010b84:	d9414c15 	stw	r5,1328(sp)
 1010b88:	d8800445 	stb	r2,17(sp)
 1010b8c:	d9800485 	stb	r6,18(sp)
 1010b90:	d8000405 	stb	zero,16(sp)
 1010b94:	003e3206 	br	1010460 <___vfprintf_internal_r+0xa38>
 1010b98:	018040b4 	movhi	r6,258
 1010b9c:	319ac204 	addi	r6,r6,27400
 1010ba0:	d9814415 	stw	r6,1296(sp)
 1010ba4:	003fe606 	br	1010b40 <___vfprintf_internal_r+0x1118>
 1010ba8:	00800ac4 	movi	r2,43
 1010bac:	d8800405 	stb	r2,16(sp)
 1010bb0:	b8c00007 	ldb	r3,0(r23)
 1010bb4:	003c1b06 	br	100fc24 <___vfprintf_internal_r+0x1fc>
 1010bb8:	d8814c17 	ldw	r2,1328(sp)
 1010bbc:	b8c00007 	ldb	r3,0(r23)
 1010bc0:	10800054 	ori	r2,r2,1
 1010bc4:	d8814c15 	stw	r2,1328(sp)
 1010bc8:	003c1606 	br	100fc24 <___vfprintf_internal_r+0x1fc>
 1010bcc:	d8800407 	ldb	r2,16(sp)
 1010bd0:	10004c1e 	bne	r2,zero,1010d04 <___vfprintf_internal_r+0x12dc>
 1010bd4:	00800804 	movi	r2,32
 1010bd8:	d8800405 	stb	r2,16(sp)
 1010bdc:	b8c00007 	ldb	r3,0(r23)
 1010be0:	003c1006 	br	100fc24 <___vfprintf_internal_r+0x1fc>
 1010be4:	d9814c17 	ldw	r6,1328(sp)
 1010be8:	b8c00007 	ldb	r3,0(r23)
 1010bec:	31800214 	ori	r6,r6,8
 1010bf0:	d9814c15 	stw	r6,1328(sp)
 1010bf4:	003c0b06 	br	100fc24 <___vfprintf_internal_r+0x1fc>
 1010bf8:	0009883a 	mov	r4,zero
 1010bfc:	04000244 	movi	r16,9
 1010c00:	01400284 	movi	r5,10
 1010c04:	d9c15115 	stw	r7,1348(sp)
 1010c08:	100def40 	call	100def4 <__mulsi3>
 1010c0c:	b9000007 	ldb	r4,0(r23)
 1010c10:	d8c14d17 	ldw	r3,1332(sp)
 1010c14:	bdc00044 	addi	r23,r23,1
 1010c18:	d9014d15 	stw	r4,1332(sp)
 1010c1c:	d9414d17 	ldw	r5,1332(sp)
 1010c20:	1885883a 	add	r2,r3,r2
 1010c24:	113ff404 	addi	r4,r2,-48
 1010c28:	28bff404 	addi	r2,r5,-48
 1010c2c:	d9c15117 	ldw	r7,1348(sp)
 1010c30:	80bff32e 	bgeu	r16,r2,1010c00 <___vfprintf_internal_r+0x11d8>
 1010c34:	d9014a15 	stw	r4,1320(sp)
 1010c38:	003bfc06 	br	100fc2c <___vfprintf_internal_r+0x204>
 1010c3c:	d8814c17 	ldw	r2,1328(sp)
 1010c40:	b8c00007 	ldb	r3,0(r23)
 1010c44:	10802014 	ori	r2,r2,128
 1010c48:	d8814c15 	stw	r2,1328(sp)
 1010c4c:	003bf506 	br	100fc24 <___vfprintf_internal_r+0x1fc>
 1010c50:	b8c00007 	ldb	r3,0(r23)
 1010c54:	00800a84 	movi	r2,42
 1010c58:	bdc00044 	addi	r23,r23,1
 1010c5c:	18831826 	beq	r3,r2,10118c0 <___vfprintf_internal_r+0x1e98>
 1010c60:	d8c14d15 	stw	r3,1332(sp)
 1010c64:	18bff404 	addi	r2,r3,-48
 1010c68:	00c00244 	movi	r3,9
 1010c6c:	18827b36 	bltu	r3,r2,101165c <___vfprintf_internal_r+0x1c34>
 1010c70:	1821883a 	mov	r16,r3
 1010c74:	0009883a 	mov	r4,zero
 1010c78:	01400284 	movi	r5,10
 1010c7c:	d9c15115 	stw	r7,1348(sp)
 1010c80:	100def40 	call	100def4 <__mulsi3>
 1010c84:	d9414d17 	ldw	r5,1332(sp)
 1010c88:	b9800007 	ldb	r6,0(r23)
 1010c8c:	d9c15117 	ldw	r7,1348(sp)
 1010c90:	1145883a 	add	r2,r2,r5
 1010c94:	113ff404 	addi	r4,r2,-48
 1010c98:	30bff404 	addi	r2,r6,-48
 1010c9c:	d9814d15 	stw	r6,1332(sp)
 1010ca0:	bdc00044 	addi	r23,r23,1
 1010ca4:	80bff42e 	bgeu	r16,r2,1010c78 <___vfprintf_internal_r+0x1250>
 1010ca8:	2027883a 	mov	r19,r4
 1010cac:	203bdf0e 	bge	r4,zero,100fc2c <___vfprintf_internal_r+0x204>
 1010cb0:	04ffffc4 	movi	r19,-1
 1010cb4:	003bdd06 	br	100fc2c <___vfprintf_internal_r+0x204>
 1010cb8:	d8000405 	stb	zero,16(sp)
 1010cbc:	39800017 	ldw	r6,0(r7)
 1010cc0:	39c00104 	addi	r7,r7,4
 1010cc4:	d9c14015 	stw	r7,1280(sp)
 1010cc8:	d9814115 	stw	r6,1284(sp)
 1010ccc:	3001c926 	beq	r6,zero,10113f4 <___vfprintf_internal_r+0x19cc>
 1010cd0:	98000e16 	blt	r19,zero,1010d0c <___vfprintf_internal_r+0x12e4>
 1010cd4:	d9014117 	ldw	r4,1284(sp)
 1010cd8:	000b883a 	mov	r5,zero
 1010cdc:	980d883a 	mov	r6,r19
 1010ce0:	100ebf40 	call	100ebf4 <memchr>
 1010ce4:	10025926 	beq	r2,zero,101164c <___vfprintf_internal_r+0x1c24>
 1010ce8:	d8c14117 	ldw	r3,1284(sp)
 1010cec:	10cfc83a 	sub	r7,r2,r3
 1010cf0:	99c19e16 	blt	r19,r7,101136c <___vfprintf_internal_r+0x1944>
 1010cf4:	d9c14515 	stw	r7,1300(sp)
 1010cf8:	38000916 	blt	r7,zero,1010d20 <___vfprintf_internal_r+0x12f8>
 1010cfc:	d8014615 	stw	zero,1304(sp)
 1010d00:	003deb06 	br	10104b0 <___vfprintf_internal_r+0xa88>
 1010d04:	b8c00007 	ldb	r3,0(r23)
 1010d08:	003bc606 	br	100fc24 <___vfprintf_internal_r+0x1fc>
 1010d0c:	d9014117 	ldw	r4,1284(sp)
 1010d10:	100f5c00 	call	100f5c0 <strlen>
 1010d14:	d8814515 	stw	r2,1300(sp)
 1010d18:	100f883a 	mov	r7,r2
 1010d1c:	103ff70e 	bge	r2,zero,1010cfc <___vfprintf_internal_r+0x12d4>
 1010d20:	d8014515 	stw	zero,1300(sp)
 1010d24:	d8014615 	stw	zero,1304(sp)
 1010d28:	003de106 	br	10104b0 <___vfprintf_internal_r+0xa88>
 1010d2c:	20c03fcc 	andi	r3,r4,255
 1010d30:	00800044 	movi	r2,1
 1010d34:	18802d26 	beq	r3,r2,1010dec <___vfprintf_internal_r+0x13c4>
 1010d38:	18800e36 	bltu	r3,r2,1010d74 <___vfprintf_internal_r+0x134c>
 1010d3c:	00800084 	movi	r2,2
 1010d40:	1880fa26 	beq	r3,r2,101112c <___vfprintf_internal_r+0x1704>
 1010d44:	010040b4 	movhi	r4,258
 1010d48:	211ad204 	addi	r4,r4,27464
 1010d4c:	100f5c00 	call	100f5c0 <strlen>
 1010d50:	100f883a 	mov	r7,r2
 1010d54:	dcc14515 	stw	r19,1300(sp)
 1010d58:	9880010e 	bge	r19,r2,1010d60 <___vfprintf_internal_r+0x1338>
 1010d5c:	d8814515 	stw	r2,1300(sp)
 1010d60:	008040b4 	movhi	r2,258
 1010d64:	109ad204 	addi	r2,r2,27464
 1010d68:	dcc14615 	stw	r19,1304(sp)
 1010d6c:	d8814115 	stw	r2,1284(sp)
 1010d70:	003dcf06 	br	10104b0 <___vfprintf_internal_r+0xa88>
 1010d74:	d9401904 	addi	r5,sp,100
 1010d78:	dd000f04 	addi	r20,sp,60
 1010d7c:	d9414115 	stw	r5,1284(sp)
 1010d80:	880a977a 	slli	r5,r17,29
 1010d84:	d9814117 	ldw	r6,1284(sp)
 1010d88:	8004d0fa 	srli	r2,r16,3
 1010d8c:	8806d0fa 	srli	r3,r17,3
 1010d90:	810001cc 	andi	r4,r16,7
 1010d94:	2884b03a 	or	r2,r5,r2
 1010d98:	31bfffc4 	addi	r6,r6,-1
 1010d9c:	21000c04 	addi	r4,r4,48
 1010da0:	d9814115 	stw	r6,1284(sp)
 1010da4:	10cab03a 	or	r5,r2,r3
 1010da8:	31000005 	stb	r4,0(r6)
 1010dac:	1021883a 	mov	r16,r2
 1010db0:	1823883a 	mov	r17,r3
 1010db4:	283ff21e 	bne	r5,zero,1010d80 <___vfprintf_internal_r+0x1358>
 1010db8:	d8c14c17 	ldw	r3,1328(sp)
 1010dbc:	1880004c 	andi	r2,r3,1
 1010dc0:	1005003a 	cmpeq	r2,r2,zero
 1010dc4:	103db31e 	bne	r2,zero,1010494 <___vfprintf_internal_r+0xa6c>
 1010dc8:	20803fcc 	andi	r2,r4,255
 1010dcc:	1080201c 	xori	r2,r2,128
 1010dd0:	10bfe004 	addi	r2,r2,-128
 1010dd4:	00c00c04 	movi	r3,48
 1010dd8:	10fdae26 	beq	r2,r3,1010494 <___vfprintf_internal_r+0xa6c>
 1010ddc:	31bfffc4 	addi	r6,r6,-1
 1010de0:	d9814115 	stw	r6,1284(sp)
 1010de4:	30c00005 	stb	r3,0(r6)
 1010de8:	003daa06 	br	1010494 <___vfprintf_internal_r+0xa6c>
 1010dec:	88800068 	cmpgeui	r2,r17,1
 1010df0:	10002c1e 	bne	r2,zero,1010ea4 <___vfprintf_internal_r+0x147c>
 1010df4:	8800021e 	bne	r17,zero,1010e00 <___vfprintf_internal_r+0x13d8>
 1010df8:	00800244 	movi	r2,9
 1010dfc:	14002936 	bltu	r2,r16,1010ea4 <___vfprintf_internal_r+0x147c>
 1010e00:	d90018c4 	addi	r4,sp,99
 1010e04:	dd000f04 	addi	r20,sp,60
 1010e08:	d9014115 	stw	r4,1284(sp)
 1010e0c:	d9014117 	ldw	r4,1284(sp)
 1010e10:	80800c04 	addi	r2,r16,48
 1010e14:	20800005 	stb	r2,0(r4)
 1010e18:	003d9e06 	br	1010494 <___vfprintf_internal_r+0xa6c>
 1010e1c:	dc400d17 	ldw	r17,52(sp)
 1010e20:	070040b4 	movhi	fp,258
 1010e24:	e71ad984 	addi	fp,fp,27494
 1010e28:	9425883a 	add	r18,r18,r16
 1010e2c:	8c400044 	addi	r17,r17,1
 1010e30:	008001c4 	movi	r2,7
 1010e34:	1f000015 	stw	fp,0(r3)
 1010e38:	1c000115 	stw	r16,4(r3)
 1010e3c:	dc800e15 	stw	r18,56(sp)
 1010e40:	dc400d15 	stw	r17,52(sp)
 1010e44:	147ddc16 	blt	r2,r17,10105b8 <___vfprintf_internal_r+0xb90>
 1010e48:	18c00204 	addi	r3,r3,8
 1010e4c:	003c7406 	br	1010020 <___vfprintf_internal_r+0x5f8>
 1010e50:	01000084 	movi	r4,2
 1010e54:	d8000405 	stb	zero,16(sp)
 1010e58:	003d8106 	br	1010460 <___vfprintf_internal_r+0xa38>
 1010e5c:	d9814c17 	ldw	r6,1328(sp)
 1010e60:	30c4703a 	and	r2,r6,r3
 1010e64:	1005003a 	cmpeq	r2,r2,zero
 1010e68:	103cb326 	beq	r2,zero,1010138 <___vfprintf_internal_r+0x710>
 1010e6c:	d9014117 	ldw	r4,1284(sp)
 1010e70:	94800044 	addi	r18,r18,1
 1010e74:	8c400044 	addi	r17,r17,1
 1010e78:	008001c4 	movi	r2,7
 1010e7c:	a9000015 	stw	r4,0(r21)
 1010e80:	a8c00115 	stw	r3,4(r21)
 1010e84:	dc800e15 	stw	r18,56(sp)
 1010e88:	dc400d15 	stw	r17,52(sp)
 1010e8c:	147e6016 	blt	r2,r17,1010810 <___vfprintf_internal_r+0xde8>
 1010e90:	acc00204 	addi	r19,r21,8
 1010e94:	003cd106 	br	10101dc <___vfprintf_internal_r+0x7b4>
 1010e98:	070040b4 	movhi	fp,258
 1010e9c:	e71ad984 	addi	fp,fp,27494
 1010ea0:	003c4906 	br	100ffc8 <___vfprintf_internal_r+0x5a0>
 1010ea4:	dd000f04 	addi	r20,sp,60
 1010ea8:	dc801904 	addi	r18,sp,100
 1010eac:	8009883a 	mov	r4,r16
 1010eb0:	880b883a 	mov	r5,r17
 1010eb4:	01800284 	movi	r6,10
 1010eb8:	000f883a 	mov	r7,zero
 1010ebc:	10168280 	call	1016828 <__umoddi3>
 1010ec0:	12000c04 	addi	r8,r2,48
 1010ec4:	94bfffc4 	addi	r18,r18,-1
 1010ec8:	8009883a 	mov	r4,r16
 1010ecc:	880b883a 	mov	r5,r17
 1010ed0:	01800284 	movi	r6,10
 1010ed4:	000f883a 	mov	r7,zero
 1010ed8:	92000005 	stb	r8,0(r18)
 1010edc:	10161bc0 	call	10161bc <__udivdi3>
 1010ee0:	1009883a 	mov	r4,r2
 1010ee4:	1021883a 	mov	r16,r2
 1010ee8:	18800068 	cmpgeui	r2,r3,1
 1010eec:	1823883a 	mov	r17,r3
 1010ef0:	103fee1e 	bne	r2,zero,1010eac <___vfprintf_internal_r+0x1484>
 1010ef4:	1800021e 	bne	r3,zero,1010f00 <___vfprintf_internal_r+0x14d8>
 1010ef8:	00800244 	movi	r2,9
 1010efc:	113feb36 	bltu	r2,r4,1010eac <___vfprintf_internal_r+0x1484>
 1010f00:	94bfffc4 	addi	r18,r18,-1
 1010f04:	dc814115 	stw	r18,1284(sp)
 1010f08:	003fc006 	br	1010e0c <___vfprintf_internal_r+0x13e4>
 1010f0c:	d9014c17 	ldw	r4,1328(sp)
 1010f10:	2080004c 	andi	r2,r4,1
 1010f14:	10009a1e 	bne	r2,zero,1011180 <___vfprintf_internal_r+0x1758>
 1010f18:	d9401904 	addi	r5,sp,100
 1010f1c:	dd000f04 	addi	r20,sp,60
 1010f20:	d9414115 	stw	r5,1284(sp)
 1010f24:	003d5b06 	br	1010494 <___vfprintf_internal_r+0xa6c>
 1010f28:	d9014f17 	ldw	r4,1340(sp)
 1010f2c:	b00b883a 	mov	r5,r22
 1010f30:	d9800c04 	addi	r6,sp,48
 1010f34:	100f9d00 	call	100f9d0 <__sprint_r>
 1010f38:	103c731e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 1010f3c:	dc800e17 	ldw	r18,56(sp)
 1010f40:	d8c01904 	addi	r3,sp,100
 1010f44:	003cf906 	br	101032c <___vfprintf_internal_r+0x904>
 1010f48:	d8c14c17 	ldw	r3,1328(sp)
 1010f4c:	1880040c 	andi	r2,r3,16
 1010f50:	1000711e 	bne	r2,zero,1011118 <___vfprintf_internal_r+0x16f0>
 1010f54:	d9014c17 	ldw	r4,1328(sp)
 1010f58:	2080100c 	andi	r2,r4,64
 1010f5c:	10006e26 	beq	r2,zero,1011118 <___vfprintf_internal_r+0x16f0>
 1010f60:	3c00000b 	ldhu	r16,0(r7)
 1010f64:	0023883a 	mov	r17,zero
 1010f68:	39c00104 	addi	r7,r7,4
 1010f6c:	d9c14015 	stw	r7,1280(sp)
 1010f70:	003efa06 	br	1010b5c <___vfprintf_internal_r+0x1134>
 1010f74:	dc400d17 	ldw	r17,52(sp)
 1010f78:	070040b4 	movhi	fp,258
 1010f7c:	e71ad984 	addi	fp,fp,27494
 1010f80:	9425883a 	add	r18,r18,r16
 1010f84:	8c400044 	addi	r17,r17,1
 1010f88:	008001c4 	movi	r2,7
 1010f8c:	1f000015 	stw	fp,0(r3)
 1010f90:	1c000115 	stw	r16,4(r3)
 1010f94:	dc800e15 	stw	r18,56(sp)
 1010f98:	dc400d15 	stw	r17,52(sp)
 1010f9c:	147d7016 	blt	r2,r17,1010560 <___vfprintf_internal_r+0xb38>
 1010fa0:	18c00204 	addi	r3,r3,8
 1010fa4:	003d7506 	br	101057c <___vfprintf_internal_r+0xb54>
 1010fa8:	dc800e17 	ldw	r18,56(sp)
 1010fac:	dc400d17 	ldw	r17,52(sp)
 1010fb0:	070040b4 	movhi	fp,258
 1010fb4:	e71add84 	addi	fp,fp,27510
 1010fb8:	003bba06 	br	100fea4 <___vfprintf_internal_r+0x47c>
 1010fbc:	d9014f17 	ldw	r4,1340(sp)
 1010fc0:	b00b883a 	mov	r5,r22
 1010fc4:	d9800c04 	addi	r6,sp,48
 1010fc8:	100f9d00 	call	100f9d0 <__sprint_r>
 1010fcc:	103c4e1e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 1010fd0:	dc800e17 	ldw	r18,56(sp)
 1010fd4:	d8c01904 	addi	r3,sp,100
 1010fd8:	003ce306 	br	1010368 <___vfprintf_internal_r+0x940>
 1010fdc:	3c000017 	ldw	r16,0(r7)
 1010fe0:	0009883a 	mov	r4,zero
 1010fe4:	39c00104 	addi	r7,r7,4
 1010fe8:	0023883a 	mov	r17,zero
 1010fec:	d9c14015 	stw	r7,1280(sp)
 1010ff0:	d8000405 	stb	zero,16(sp)
 1010ff4:	003d1a06 	br	1010460 <___vfprintf_internal_r+0xa38>
 1010ff8:	38800017 	ldw	r2,0(r7)
 1010ffc:	39c00104 	addi	r7,r7,4
 1011000:	d9c14015 	stw	r7,1280(sp)
 1011004:	1023d7fa 	srai	r17,r2,31
 1011008:	1021883a 	mov	r16,r2
 101100c:	003d1206 	br	1010458 <___vfprintf_internal_r+0xa30>
 1011010:	3c000017 	ldw	r16,0(r7)
 1011014:	01000044 	movi	r4,1
 1011018:	39c00104 	addi	r7,r7,4
 101101c:	0023883a 	mov	r17,zero
 1011020:	d9c14015 	stw	r7,1280(sp)
 1011024:	d8000405 	stb	zero,16(sp)
 1011028:	003d0d06 	br	1010460 <___vfprintf_internal_r+0xa38>
 101102c:	008040b4 	movhi	r2,258
 1011030:	109ad904 	addi	r2,r2,27492
 1011034:	94800044 	addi	r18,r18,1
 1011038:	8c400044 	addi	r17,r17,1
 101103c:	a8800015 	stw	r2,0(r21)
 1011040:	00c00044 	movi	r3,1
 1011044:	008001c4 	movi	r2,7
 1011048:	a8c00115 	stw	r3,4(r21)
 101104c:	dc800e15 	stw	r18,56(sp)
 1011050:	dc400d15 	stw	r17,52(sp)
 1011054:	1440ca16 	blt	r2,r17,1011380 <___vfprintf_internal_r+0x1958>
 1011058:	a8c00204 	addi	r3,r21,8
 101105c:	2000061e 	bne	r4,zero,1011078 <___vfprintf_internal_r+0x1650>
 1011060:	d9414717 	ldw	r5,1308(sp)
 1011064:	2800041e 	bne	r5,zero,1011078 <___vfprintf_internal_r+0x1650>
 1011068:	d9814c17 	ldw	r6,1328(sp)
 101106c:	3080004c 	andi	r2,r6,1
 1011070:	1005003a 	cmpeq	r2,r2,zero
 1011074:	103bea1e 	bne	r2,zero,1010020 <___vfprintf_internal_r+0x5f8>
 1011078:	00800044 	movi	r2,1
 101107c:	dc400d17 	ldw	r17,52(sp)
 1011080:	18800115 	stw	r2,4(r3)
 1011084:	d8814917 	ldw	r2,1316(sp)
 1011088:	94800044 	addi	r18,r18,1
 101108c:	8c400044 	addi	r17,r17,1
 1011090:	18800015 	stw	r2,0(r3)
 1011094:	008001c4 	movi	r2,7
 1011098:	dc800e15 	stw	r18,56(sp)
 101109c:	dc400d15 	stw	r17,52(sp)
 10110a0:	1440ca16 	blt	r2,r17,10113cc <___vfprintf_internal_r+0x19a4>
 10110a4:	18c00204 	addi	r3,r3,8
 10110a8:	0121c83a 	sub	r16,zero,r4
 10110ac:	0400500e 	bge	zero,r16,10111f0 <___vfprintf_internal_r+0x17c8>
 10110b0:	00800404 	movi	r2,16
 10110b4:	1400800e 	bge	r2,r16,10112b8 <___vfprintf_internal_r+0x1890>
 10110b8:	1027883a 	mov	r19,r2
 10110bc:	070040b4 	movhi	fp,258
 10110c0:	e71ad984 	addi	fp,fp,27494
 10110c4:	050001c4 	movi	r20,7
 10110c8:	00000306 	br	10110d8 <___vfprintf_internal_r+0x16b0>
 10110cc:	18c00204 	addi	r3,r3,8
 10110d0:	843ffc04 	addi	r16,r16,-16
 10110d4:	9c007a0e 	bge	r19,r16,10112c0 <___vfprintf_internal_r+0x1898>
 10110d8:	94800404 	addi	r18,r18,16
 10110dc:	8c400044 	addi	r17,r17,1
 10110e0:	1f000015 	stw	fp,0(r3)
 10110e4:	1cc00115 	stw	r19,4(r3)
 10110e8:	dc800e15 	stw	r18,56(sp)
 10110ec:	dc400d15 	stw	r17,52(sp)
 10110f0:	a47ff60e 	bge	r20,r17,10110cc <___vfprintf_internal_r+0x16a4>
 10110f4:	d9014f17 	ldw	r4,1340(sp)
 10110f8:	b00b883a 	mov	r5,r22
 10110fc:	d9800c04 	addi	r6,sp,48
 1011100:	100f9d00 	call	100f9d0 <__sprint_r>
 1011104:	103c001e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 1011108:	dc800e17 	ldw	r18,56(sp)
 101110c:	dc400d17 	ldw	r17,52(sp)
 1011110:	d8c01904 	addi	r3,sp,100
 1011114:	003fee06 	br	10110d0 <___vfprintf_internal_r+0x16a8>
 1011118:	3c000017 	ldw	r16,0(r7)
 101111c:	0023883a 	mov	r17,zero
 1011120:	39c00104 	addi	r7,r7,4
 1011124:	d9c14015 	stw	r7,1280(sp)
 1011128:	003e8c06 	br	1010b5c <___vfprintf_internal_r+0x1134>
 101112c:	d9401904 	addi	r5,sp,100
 1011130:	dd000f04 	addi	r20,sp,60
 1011134:	d9414115 	stw	r5,1284(sp)
 1011138:	d9814417 	ldw	r6,1296(sp)
 101113c:	880a973a 	slli	r5,r17,28
 1011140:	8004d13a 	srli	r2,r16,4
 1011144:	810003cc 	andi	r4,r16,15
 1011148:	3109883a 	add	r4,r6,r4
 101114c:	2884b03a 	or	r2,r5,r2
 1011150:	21400003 	ldbu	r5,0(r4)
 1011154:	d9014117 	ldw	r4,1284(sp)
 1011158:	8806d13a 	srli	r3,r17,4
 101115c:	1021883a 	mov	r16,r2
 1011160:	213fffc4 	addi	r4,r4,-1
 1011164:	d9014115 	stw	r4,1284(sp)
 1011168:	d9814117 	ldw	r6,1284(sp)
 101116c:	10c8b03a 	or	r4,r2,r3
 1011170:	1823883a 	mov	r17,r3
 1011174:	31400005 	stb	r5,0(r6)
 1011178:	203fef1e 	bne	r4,zero,1011138 <___vfprintf_internal_r+0x1710>
 101117c:	003cc506 	br	1010494 <___vfprintf_internal_r+0xa6c>
 1011180:	00800c04 	movi	r2,48
 1011184:	d98018c4 	addi	r6,sp,99
 1011188:	dd000f04 	addi	r20,sp,60
 101118c:	d88018c5 	stb	r2,99(sp)
 1011190:	d9814115 	stw	r6,1284(sp)
 1011194:	003cbf06 	br	1010494 <___vfprintf_internal_r+0xa6c>
 1011198:	dc400d17 	ldw	r17,52(sp)
 101119c:	070040b4 	movhi	fp,258
 10111a0:	e71add84 	addi	fp,fp,27510
 10111a4:	003bc106 	br	10100ac <___vfprintf_internal_r+0x684>
 10111a8:	d9414c17 	ldw	r5,1328(sp)
 10111ac:	2880040c 	andi	r2,r5,16
 10111b0:	10007c26 	beq	r2,zero,10113a4 <___vfprintf_internal_r+0x197c>
 10111b4:	38800017 	ldw	r2,0(r7)
 10111b8:	39c00104 	addi	r7,r7,4
 10111bc:	d9c14015 	stw	r7,1280(sp)
 10111c0:	d9814b17 	ldw	r6,1324(sp)
 10111c4:	d9c14017 	ldw	r7,1280(sp)
 10111c8:	11800015 	stw	r6,0(r2)
 10111cc:	003a7206 	br	100fb98 <___vfprintf_internal_r+0x170>
 10111d0:	d9014f17 	ldw	r4,1340(sp)
 10111d4:	b00b883a 	mov	r5,r22
 10111d8:	d9800c04 	addi	r6,sp,48
 10111dc:	100f9d00 	call	100f9d0 <__sprint_r>
 10111e0:	103bc91e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 10111e4:	dc800e17 	ldw	r18,56(sp)
 10111e8:	dc400d17 	ldw	r17,52(sp)
 10111ec:	d8c01904 	addi	r3,sp,100
 10111f0:	d9014717 	ldw	r4,1308(sp)
 10111f4:	d9414117 	ldw	r5,1284(sp)
 10111f8:	8c400044 	addi	r17,r17,1
 10111fc:	9125883a 	add	r18,r18,r4
 1011200:	008001c4 	movi	r2,7
 1011204:	19400015 	stw	r5,0(r3)
 1011208:	19000115 	stw	r4,4(r3)
 101120c:	dc800e15 	stw	r18,56(sp)
 1011210:	dc400d15 	stw	r17,52(sp)
 1011214:	147ce816 	blt	r2,r17,10105b8 <___vfprintf_internal_r+0xb90>
 1011218:	18c00204 	addi	r3,r3,8
 101121c:	003b8006 	br	1010020 <___vfprintf_internal_r+0x5f8>
 1011220:	38c00017 	ldw	r3,0(r7)
 1011224:	39000204 	addi	r4,r7,8
 1011228:	d9014015 	stw	r4,1280(sp)
 101122c:	d8c14215 	stw	r3,1288(sp)
 1011230:	39c00117 	ldw	r7,4(r7)
 1011234:	d9c14315 	stw	r7,1292(sp)
 1011238:	003e1a06 	br	1010aa4 <___vfprintf_internal_r+0x107c>
 101123c:	0005883a 	mov	r2,zero
 1011240:	1409c83a 	sub	r4,r2,r16
 1011244:	1105803a 	cmpltu	r2,r2,r4
 1011248:	044bc83a 	sub	r5,zero,r17
 101124c:	2885c83a 	sub	r2,r5,r2
 1011250:	2021883a 	mov	r16,r4
 1011254:	1023883a 	mov	r17,r2
 1011258:	01000044 	movi	r4,1
 101125c:	00800b44 	movi	r2,45
 1011260:	d8800405 	stb	r2,16(sp)
 1011264:	003c7e06 	br	1010460 <___vfprintf_internal_r+0xa38>
 1011268:	d9014f17 	ldw	r4,1340(sp)
 101126c:	b00b883a 	mov	r5,r22
 1011270:	d9800c04 	addi	r6,sp,48
 1011274:	100f9d00 	call	100f9d0 <__sprint_r>
 1011278:	103ba31e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 101127c:	dc800e17 	ldw	r18,56(sp)
 1011280:	dc400d17 	ldw	r17,52(sp)
 1011284:	d9000517 	ldw	r4,20(sp)
 1011288:	d9401904 	addi	r5,sp,100
 101128c:	003da106 	br	1010914 <___vfprintf_internal_r+0xeec>
 1011290:	d9014f17 	ldw	r4,1340(sp)
 1011294:	b00b883a 	mov	r5,r22
 1011298:	d9800c04 	addi	r6,sp,48
 101129c:	100f9d00 	call	100f9d0 <__sprint_r>
 10112a0:	103b991e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 10112a4:	dc800e17 	ldw	r18,56(sp)
 10112a8:	dc400d17 	ldw	r17,52(sp)
 10112ac:	d9000517 	ldw	r4,20(sp)
 10112b0:	d8c01904 	addi	r3,sp,100
 10112b4:	003d8b06 	br	10108e4 <___vfprintf_internal_r+0xebc>
 10112b8:	070040b4 	movhi	fp,258
 10112bc:	e71ad984 	addi	fp,fp,27494
 10112c0:	9425883a 	add	r18,r18,r16
 10112c4:	8c400044 	addi	r17,r17,1
 10112c8:	008001c4 	movi	r2,7
 10112cc:	1f000015 	stw	fp,0(r3)
 10112d0:	1c000115 	stw	r16,4(r3)
 10112d4:	dc800e15 	stw	r18,56(sp)
 10112d8:	dc400d15 	stw	r17,52(sp)
 10112dc:	147fbc16 	blt	r2,r17,10111d0 <___vfprintf_internal_r+0x17a8>
 10112e0:	18c00204 	addi	r3,r3,8
 10112e4:	003fc206 	br	10111f0 <___vfprintf_internal_r+0x17c8>
 10112e8:	d9014f17 	ldw	r4,1340(sp)
 10112ec:	b00b883a 	mov	r5,r22
 10112f0:	d9800c04 	addi	r6,sp,48
 10112f4:	100f9d00 	call	100f9d0 <__sprint_r>
 10112f8:	103b831e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 10112fc:	dc800e17 	ldw	r18,56(sp)
 1011300:	d9000517 	ldw	r4,20(sp)
 1011304:	d8c01904 	addi	r3,sp,100
 1011308:	003cfc06 	br	10106fc <___vfprintf_internal_r+0xcd4>
 101130c:	070040b4 	movhi	fp,258
 1011310:	e71ad984 	addi	fp,fp,27494
 1011314:	003bde06 	br	1010290 <___vfprintf_internal_r+0x868>
 1011318:	008040b4 	movhi	r2,258
 101131c:	109ac804 	addi	r2,r2,27424
 1011320:	d8814115 	stw	r2,1284(sp)
 1011324:	003def06 	br	1010ae4 <___vfprintf_internal_r+0x10bc>
 1011328:	d9014217 	ldw	r4,1288(sp)
 101132c:	d9414317 	ldw	r5,1292(sp)
 1011330:	1015adc0 	call	1015adc <__isnand>
 1011334:	10003926 	beq	r2,zero,101141c <___vfprintf_internal_r+0x19f4>
 1011338:	d9414d17 	ldw	r5,1332(sp)
 101133c:	008011c4 	movi	r2,71
 1011340:	1140ce16 	blt	r2,r5,101167c <___vfprintf_internal_r+0x1c54>
 1011344:	018040b4 	movhi	r6,258
 1011348:	319ac904 	addi	r6,r6,27428
 101134c:	d9814115 	stw	r6,1284(sp)
 1011350:	003de406 	br	1010ae4 <___vfprintf_internal_r+0x10bc>
 1011354:	d9014c17 	ldw	r4,1328(sp)
 1011358:	bdc00044 	addi	r23,r23,1
 101135c:	b8c00007 	ldb	r3,0(r23)
 1011360:	21000814 	ori	r4,r4,32
 1011364:	d9014c15 	stw	r4,1328(sp)
 1011368:	003a2e06 	br	100fc24 <___vfprintf_internal_r+0x1fc>
 101136c:	dcc14515 	stw	r19,1300(sp)
 1011370:	98011016 	blt	r19,zero,10117b4 <___vfprintf_internal_r+0x1d8c>
 1011374:	980f883a 	mov	r7,r19
 1011378:	d8014615 	stw	zero,1304(sp)
 101137c:	003c4c06 	br	10104b0 <___vfprintf_internal_r+0xa88>
 1011380:	d9014f17 	ldw	r4,1340(sp)
 1011384:	b00b883a 	mov	r5,r22
 1011388:	d9800c04 	addi	r6,sp,48
 101138c:	100f9d00 	call	100f9d0 <__sprint_r>
 1011390:	103b5d1e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 1011394:	dc800e17 	ldw	r18,56(sp)
 1011398:	d9000517 	ldw	r4,20(sp)
 101139c:	d8c01904 	addi	r3,sp,100
 10113a0:	003f2e06 	br	101105c <___vfprintf_internal_r+0x1634>
 10113a4:	d8c14c17 	ldw	r3,1328(sp)
 10113a8:	1880100c 	andi	r2,r3,64
 10113ac:	1000a026 	beq	r2,zero,1011630 <___vfprintf_internal_r+0x1c08>
 10113b0:	38800017 	ldw	r2,0(r7)
 10113b4:	39c00104 	addi	r7,r7,4
 10113b8:	d9c14015 	stw	r7,1280(sp)
 10113bc:	d9014b17 	ldw	r4,1324(sp)
 10113c0:	d9c14017 	ldw	r7,1280(sp)
 10113c4:	1100000d 	sth	r4,0(r2)
 10113c8:	0039f306 	br	100fb98 <___vfprintf_internal_r+0x170>
 10113cc:	d9014f17 	ldw	r4,1340(sp)
 10113d0:	b00b883a 	mov	r5,r22
 10113d4:	d9800c04 	addi	r6,sp,48
 10113d8:	100f9d00 	call	100f9d0 <__sprint_r>
 10113dc:	103b4a1e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 10113e0:	dc800e17 	ldw	r18,56(sp)
 10113e4:	dc400d17 	ldw	r17,52(sp)
 10113e8:	d9000517 	ldw	r4,20(sp)
 10113ec:	d8c01904 	addi	r3,sp,100
 10113f0:	003f2d06 	br	10110a8 <___vfprintf_internal_r+0x1680>
 10113f4:	00800184 	movi	r2,6
 10113f8:	14c09a36 	bltu	r2,r19,1011664 <___vfprintf_internal_r+0x1c3c>
 10113fc:	dcc14515 	stw	r19,1300(sp)
 1011400:	9800010e 	bge	r19,zero,1011408 <___vfprintf_internal_r+0x19e0>
 1011404:	d8014515 	stw	zero,1300(sp)
 1011408:	008040b4 	movhi	r2,258
 101140c:	109acb04 	addi	r2,r2,27436
 1011410:	980f883a 	mov	r7,r19
 1011414:	d8814115 	stw	r2,1284(sp)
 1011418:	003a7206 	br	100fde4 <___vfprintf_internal_r+0x3bc>
 101141c:	00bfffc4 	movi	r2,-1
 1011420:	9880e226 	beq	r19,r2,10117ac <___vfprintf_internal_r+0x1d84>
 1011424:	d9414d17 	ldw	r5,1332(sp)
 1011428:	008019c4 	movi	r2,103
 101142c:	2880dc26 	beq	r5,r2,10117a0 <___vfprintf_internal_r+0x1d78>
 1011430:	008011c4 	movi	r2,71
 1011434:	2880da26 	beq	r5,r2,10117a0 <___vfprintf_internal_r+0x1d78>
 1011438:	d9414c17 	ldw	r5,1328(sp)
 101143c:	d9014317 	ldw	r4,1292(sp)
 1011440:	d9814217 	ldw	r6,1288(sp)
 1011444:	29404014 	ori	r5,r5,256
 1011448:	d9414c15 	stw	r5,1328(sp)
 101144c:	2000cc16 	blt	r4,zero,1011780 <___vfprintf_internal_r+0x1d58>
 1011450:	3021883a 	mov	r16,r6
 1011454:	2023883a 	mov	r17,r4
 1011458:	0039883a 	mov	fp,zero
 101145c:	d9414d17 	ldw	r5,1332(sp)
 1011460:	00801984 	movi	r2,102
 1011464:	2880b726 	beq	r5,r2,1011744 <___vfprintf_internal_r+0x1d1c>
 1011468:	00801184 	movi	r2,70
 101146c:	2880b526 	beq	r5,r2,1011744 <___vfprintf_internal_r+0x1d1c>
 1011470:	00801944 	movi	r2,101
 1011474:	2880c826 	beq	r5,r2,1011798 <___vfprintf_internal_r+0x1d70>
 1011478:	00801144 	movi	r2,69
 101147c:	2880c626 	beq	r5,r2,1011798 <___vfprintf_internal_r+0x1d70>
 1011480:	9829883a 	mov	r20,r19
 1011484:	d9014f17 	ldw	r4,1340(sp)
 1011488:	d8800504 	addi	r2,sp,20
 101148c:	880d883a 	mov	r6,r17
 1011490:	d8800115 	stw	r2,4(sp)
 1011494:	d8c00604 	addi	r3,sp,24
 1011498:	d8800704 	addi	r2,sp,28
 101149c:	800b883a 	mov	r5,r16
 10114a0:	01c00084 	movi	r7,2
 10114a4:	d8c00215 	stw	r3,8(sp)
 10114a8:	d8800315 	stw	r2,12(sp)
 10114ac:	dd000015 	stw	r20,0(sp)
 10114b0:	1011c900 	call	1011c90 <_dtoa_r>
 10114b4:	d9814d17 	ldw	r6,1332(sp)
 10114b8:	d8814115 	stw	r2,1284(sp)
 10114bc:	008019c4 	movi	r2,103
 10114c0:	30809526 	beq	r6,r2,1011718 <___vfprintf_internal_r+0x1cf0>
 10114c4:	d8c14d17 	ldw	r3,1332(sp)
 10114c8:	008011c4 	movi	r2,71
 10114cc:	18809226 	beq	r3,r2,1011718 <___vfprintf_internal_r+0x1cf0>
 10114d0:	d9414117 	ldw	r5,1284(sp)
 10114d4:	d9814d17 	ldw	r6,1332(sp)
 10114d8:	00801984 	movi	r2,102
 10114dc:	2d25883a 	add	r18,r5,r20
 10114e0:	30808626 	beq	r6,r2,10116fc <___vfprintf_internal_r+0x1cd4>
 10114e4:	00801184 	movi	r2,70
 10114e8:	30808426 	beq	r6,r2,10116fc <___vfprintf_internal_r+0x1cd4>
 10114ec:	000d883a 	mov	r6,zero
 10114f0:	000f883a 	mov	r7,zero
 10114f4:	880b883a 	mov	r5,r17
 10114f8:	8009883a 	mov	r4,r16
 10114fc:	10179a80 	call	10179a8 <__eqdf2>
 1011500:	1000751e 	bne	r2,zero,10116d8 <___vfprintf_internal_r+0x1cb0>
 1011504:	9005883a 	mov	r2,r18
 1011508:	dc800715 	stw	r18,28(sp)
 101150c:	d9014117 	ldw	r4,1284(sp)
 1011510:	d9414d17 	ldw	r5,1332(sp)
 1011514:	00c019c4 	movi	r3,103
 1011518:	1125c83a 	sub	r18,r2,r4
 101151c:	28c06826 	beq	r5,r3,10116c0 <___vfprintf_internal_r+0x1c98>
 1011520:	008011c4 	movi	r2,71
 1011524:	28806626 	beq	r5,r2,10116c0 <___vfprintf_internal_r+0x1c98>
 1011528:	d9000517 	ldw	r4,20(sp)
 101152c:	d8c14d17 	ldw	r3,1332(sp)
 1011530:	00801944 	movi	r2,101
 1011534:	10c05516 	blt	r2,r3,101168c <___vfprintf_internal_r+0x1c64>
 1011538:	213fffc4 	addi	r4,r4,-1
 101153c:	d9000515 	stw	r4,20(sp)
 1011540:	d8c00805 	stb	r3,32(sp)
 1011544:	2021883a 	mov	r16,r4
 1011548:	2000c116 	blt	r4,zero,1011850 <___vfprintf_internal_r+0x1e28>
 101154c:	00800ac4 	movi	r2,43
 1011550:	d8800845 	stb	r2,33(sp)
 1011554:	00800244 	movi	r2,9
 1011558:	1400af0e 	bge	r2,r16,1011818 <___vfprintf_internal_r+0x1df0>
 101155c:	1027883a 	mov	r19,r2
 1011560:	dc400b84 	addi	r17,sp,46
 1011564:	8009883a 	mov	r4,r16
 1011568:	01400284 	movi	r5,10
 101156c:	10180900 	call	1018090 <__modsi3>
 1011570:	10800c04 	addi	r2,r2,48
 1011574:	8c7fffc4 	addi	r17,r17,-1
 1011578:	8009883a 	mov	r4,r16
 101157c:	01400284 	movi	r5,10
 1011580:	88800005 	stb	r2,0(r17)
 1011584:	10180300 	call	1018030 <__divsi3>
 1011588:	1021883a 	mov	r16,r2
 101158c:	98bff516 	blt	r19,r2,1011564 <___vfprintf_internal_r+0x1b3c>
 1011590:	10c00c04 	addi	r3,r2,48
 1011594:	d88009c4 	addi	r2,sp,39
 1011598:	108001c4 	addi	r2,r2,7
 101159c:	897fffc4 	addi	r5,r17,-1
 10115a0:	88ffffc5 	stb	r3,-1(r17)
 10115a4:	2880a72e 	bgeu	r5,r2,1011844 <___vfprintf_internal_r+0x1e1c>
 10115a8:	1009883a 	mov	r4,r2
 10115ac:	d9800804 	addi	r6,sp,32
 10115b0:	d8c00884 	addi	r3,sp,34
 10115b4:	28800003 	ldbu	r2,0(r5)
 10115b8:	29400044 	addi	r5,r5,1
 10115bc:	18800005 	stb	r2,0(r3)
 10115c0:	18c00044 	addi	r3,r3,1
 10115c4:	293ffb36 	bltu	r5,r4,10115b4 <___vfprintf_internal_r+0x1b8c>
 10115c8:	1987c83a 	sub	r3,r3,r6
 10115cc:	00800044 	movi	r2,1
 10115d0:	d8c14815 	stw	r3,1312(sp)
 10115d4:	90cf883a 	add	r7,r18,r3
 10115d8:	1480960e 	bge	r2,r18,1011834 <___vfprintf_internal_r+0x1e0c>
 10115dc:	39c00044 	addi	r7,r7,1
 10115e0:	d9c14515 	stw	r7,1300(sp)
 10115e4:	38003416 	blt	r7,zero,10116b8 <___vfprintf_internal_r+0x1c90>
 10115e8:	e0803fcc 	andi	r2,fp,255
 10115ec:	1080201c 	xori	r2,r2,128
 10115f0:	10bfe004 	addi	r2,r2,-128
 10115f4:	10004e26 	beq	r2,zero,1011730 <___vfprintf_internal_r+0x1d08>
 10115f8:	00800b44 	movi	r2,45
 10115fc:	dc814715 	stw	r18,1308(sp)
 1011600:	d8014615 	stw	zero,1304(sp)
 1011604:	d8800405 	stb	r2,16(sp)
 1011608:	003bab06 	br	10104b8 <___vfprintf_internal_r+0xa90>
 101160c:	00800b44 	movi	r2,45
 1011610:	d8800405 	stb	r2,16(sp)
 1011614:	003d2d06 	br	1010acc <___vfprintf_internal_r+0x10a4>
 1011618:	d9014f17 	ldw	r4,1340(sp)
 101161c:	b00b883a 	mov	r5,r22
 1011620:	d9800c04 	addi	r6,sp,48
 1011624:	100f9d00 	call	100f9d0 <__sprint_r>
 1011628:	103ab71e 	bne	r2,zero,1010108 <___vfprintf_internal_r+0x6e0>
 101162c:	003ab506 	br	1010104 <___vfprintf_internal_r+0x6dc>
 1011630:	38800017 	ldw	r2,0(r7)
 1011634:	39c00104 	addi	r7,r7,4
 1011638:	d9c14015 	stw	r7,1280(sp)
 101163c:	d9414b17 	ldw	r5,1324(sp)
 1011640:	d9c14017 	ldw	r7,1280(sp)
 1011644:	11400015 	stw	r5,0(r2)
 1011648:	00395306 	br	100fb98 <___vfprintf_internal_r+0x170>
 101164c:	980f883a 	mov	r7,r19
 1011650:	dcc14515 	stw	r19,1300(sp)
 1011654:	d8014615 	stw	zero,1304(sp)
 1011658:	003b9506 	br	10104b0 <___vfprintf_internal_r+0xa88>
 101165c:	0027883a 	mov	r19,zero
 1011660:	00397206 	br	100fc2c <___vfprintf_internal_r+0x204>
 1011664:	00c040b4 	movhi	r3,258
 1011668:	18dacb04 	addi	r3,r3,27436
 101166c:	100f883a 	mov	r7,r2
 1011670:	d8814515 	stw	r2,1300(sp)
 1011674:	d8c14115 	stw	r3,1284(sp)
 1011678:	0039da06 	br	100fde4 <___vfprintf_internal_r+0x3bc>
 101167c:	008040b4 	movhi	r2,258
 1011680:	109aca04 	addi	r2,r2,27432
 1011684:	d8814115 	stw	r2,1284(sp)
 1011688:	003d1606 	br	1010ae4 <___vfprintf_internal_r+0x10bc>
 101168c:	d9414d17 	ldw	r5,1332(sp)
 1011690:	00801984 	movi	r2,102
 1011694:	28804926 	beq	r5,r2,10117bc <___vfprintf_internal_r+0x1d94>
 1011698:	200f883a 	mov	r7,r4
 101169c:	24805716 	blt	r4,r18,10117fc <___vfprintf_internal_r+0x1dd4>
 10116a0:	d9414c17 	ldw	r5,1328(sp)
 10116a4:	2880004c 	andi	r2,r5,1
 10116a8:	10000126 	beq	r2,zero,10116b0 <___vfprintf_internal_r+0x1c88>
 10116ac:	21c00044 	addi	r7,r4,1
 10116b0:	d9c14515 	stw	r7,1300(sp)
 10116b4:	383fcc0e 	bge	r7,zero,10115e8 <___vfprintf_internal_r+0x1bc0>
 10116b8:	d8014515 	stw	zero,1300(sp)
 10116bc:	003fca06 	br	10115e8 <___vfprintf_internal_r+0x1bc0>
 10116c0:	d9000517 	ldw	r4,20(sp)
 10116c4:	00bfff04 	movi	r2,-4
 10116c8:	1100480e 	bge	r2,r4,10117ec <___vfprintf_internal_r+0x1dc4>
 10116cc:	99004716 	blt	r19,r4,10117ec <___vfprintf_internal_r+0x1dc4>
 10116d0:	d8c14d15 	stw	r3,1332(sp)
 10116d4:	003ff006 	br	1011698 <___vfprintf_internal_r+0x1c70>
 10116d8:	d8800717 	ldw	r2,28(sp)
 10116dc:	14bf8b2e 	bgeu	r2,r18,101150c <___vfprintf_internal_r+0x1ae4>
 10116e0:	9007883a 	mov	r3,r18
 10116e4:	01000c04 	movi	r4,48
 10116e8:	11000005 	stb	r4,0(r2)
 10116ec:	10800044 	addi	r2,r2,1
 10116f0:	d8800715 	stw	r2,28(sp)
 10116f4:	18bffc1e 	bne	r3,r2,10116e8 <___vfprintf_internal_r+0x1cc0>
 10116f8:	003f8406 	br	101150c <___vfprintf_internal_r+0x1ae4>
 10116fc:	d8814117 	ldw	r2,1284(sp)
 1011700:	10c00007 	ldb	r3,0(r2)
 1011704:	00800c04 	movi	r2,48
 1011708:	18805b26 	beq	r3,r2,1011878 <___vfprintf_internal_r+0x1e50>
 101170c:	d9000517 	ldw	r4,20(sp)
 1011710:	9125883a 	add	r18,r18,r4
 1011714:	003f7506 	br	10114ec <___vfprintf_internal_r+0x1ac4>
 1011718:	d9014c17 	ldw	r4,1328(sp)
 101171c:	2080004c 	andi	r2,r4,1
 1011720:	1005003a 	cmpeq	r2,r2,zero
 1011724:	103f6a26 	beq	r2,zero,10114d0 <___vfprintf_internal_r+0x1aa8>
 1011728:	d8800717 	ldw	r2,28(sp)
 101172c:	003f7706 	br	101150c <___vfprintf_internal_r+0x1ae4>
 1011730:	d9c14515 	stw	r7,1300(sp)
 1011734:	38004d16 	blt	r7,zero,101186c <___vfprintf_internal_r+0x1e44>
 1011738:	dc814715 	stw	r18,1308(sp)
 101173c:	d8014615 	stw	zero,1304(sp)
 1011740:	003b5b06 	br	10104b0 <___vfprintf_internal_r+0xa88>
 1011744:	d9014f17 	ldw	r4,1340(sp)
 1011748:	d8800504 	addi	r2,sp,20
 101174c:	d8800115 	stw	r2,4(sp)
 1011750:	d8c00604 	addi	r3,sp,24
 1011754:	d8800704 	addi	r2,sp,28
 1011758:	800b883a 	mov	r5,r16
 101175c:	880d883a 	mov	r6,r17
 1011760:	01c000c4 	movi	r7,3
 1011764:	d8c00215 	stw	r3,8(sp)
 1011768:	d8800315 	stw	r2,12(sp)
 101176c:	dcc00015 	stw	r19,0(sp)
 1011770:	9829883a 	mov	r20,r19
 1011774:	1011c900 	call	1011c90 <_dtoa_r>
 1011778:	d8814115 	stw	r2,1284(sp)
 101177c:	003f5106 	br	10114c4 <___vfprintf_internal_r+0x1a9c>
 1011780:	d8c14217 	ldw	r3,1288(sp)
 1011784:	d9014317 	ldw	r4,1292(sp)
 1011788:	07000b44 	movi	fp,45
 101178c:	1821883a 	mov	r16,r3
 1011790:	2460003c 	xorhi	r17,r4,32768
 1011794:	003f3106 	br	101145c <___vfprintf_internal_r+0x1a34>
 1011798:	9d000044 	addi	r20,r19,1
 101179c:	003f3906 	br	1011484 <___vfprintf_internal_r+0x1a5c>
 10117a0:	983f251e 	bne	r19,zero,1011438 <___vfprintf_internal_r+0x1a10>
 10117a4:	04c00044 	movi	r19,1
 10117a8:	003f2306 	br	1011438 <___vfprintf_internal_r+0x1a10>
 10117ac:	04c00184 	movi	r19,6
 10117b0:	003f2106 	br	1011438 <___vfprintf_internal_r+0x1a10>
 10117b4:	d8014515 	stw	zero,1300(sp)
 10117b8:	003eee06 	br	1011374 <___vfprintf_internal_r+0x194c>
 10117bc:	200f883a 	mov	r7,r4
 10117c0:	0100370e 	bge	zero,r4,10118a0 <___vfprintf_internal_r+0x1e78>
 10117c4:	9800031e 	bne	r19,zero,10117d4 <___vfprintf_internal_r+0x1dac>
 10117c8:	d9814c17 	ldw	r6,1328(sp)
 10117cc:	3080004c 	andi	r2,r6,1
 10117d0:	103fb726 	beq	r2,zero,10116b0 <___vfprintf_internal_r+0x1c88>
 10117d4:	20800044 	addi	r2,r4,1
 10117d8:	98a7883a 	add	r19,r19,r2
 10117dc:	dcc14515 	stw	r19,1300(sp)
 10117e0:	980f883a 	mov	r7,r19
 10117e4:	983f800e 	bge	r19,zero,10115e8 <___vfprintf_internal_r+0x1bc0>
 10117e8:	003fb306 	br	10116b8 <___vfprintf_internal_r+0x1c90>
 10117ec:	d9814d17 	ldw	r6,1332(sp)
 10117f0:	31bfff84 	addi	r6,r6,-2
 10117f4:	d9814d15 	stw	r6,1332(sp)
 10117f8:	003f4c06 	br	101152c <___vfprintf_internal_r+0x1b04>
 10117fc:	0100180e 	bge	zero,r4,1011860 <___vfprintf_internal_r+0x1e38>
 1011800:	00800044 	movi	r2,1
 1011804:	1485883a 	add	r2,r2,r18
 1011808:	d8814515 	stw	r2,1300(sp)
 101180c:	100f883a 	mov	r7,r2
 1011810:	103f750e 	bge	r2,zero,10115e8 <___vfprintf_internal_r+0x1bc0>
 1011814:	003fa806 	br	10116b8 <___vfprintf_internal_r+0x1c90>
 1011818:	80c00c04 	addi	r3,r16,48
 101181c:	00800c04 	movi	r2,48
 1011820:	d8c008c5 	stb	r3,35(sp)
 1011824:	d9800804 	addi	r6,sp,32
 1011828:	d8c00904 	addi	r3,sp,36
 101182c:	d8800885 	stb	r2,34(sp)
 1011830:	003f6506 	br	10115c8 <___vfprintf_internal_r+0x1ba0>
 1011834:	d9014c17 	ldw	r4,1328(sp)
 1011838:	2084703a 	and	r2,r4,r2
 101183c:	103f9c26 	beq	r2,zero,10116b0 <___vfprintf_internal_r+0x1c88>
 1011840:	003f6606 	br	10115dc <___vfprintf_internal_r+0x1bb4>
 1011844:	d9800804 	addi	r6,sp,32
 1011848:	d8c00884 	addi	r3,sp,34
 101184c:	003f5e06 	br	10115c8 <___vfprintf_internal_r+0x1ba0>
 1011850:	00800b44 	movi	r2,45
 1011854:	0121c83a 	sub	r16,zero,r4
 1011858:	d8800845 	stb	r2,33(sp)
 101185c:	003f3d06 	br	1011554 <___vfprintf_internal_r+0x1b2c>
 1011860:	00800084 	movi	r2,2
 1011864:	1105c83a 	sub	r2,r2,r4
 1011868:	003fe606 	br	1011804 <___vfprintf_internal_r+0x1ddc>
 101186c:	d8014515 	stw	zero,1300(sp)
 1011870:	dc814715 	stw	r18,1308(sp)
 1011874:	003fb106 	br	101173c <___vfprintf_internal_r+0x1d14>
 1011878:	000d883a 	mov	r6,zero
 101187c:	000f883a 	mov	r7,zero
 1011880:	8009883a 	mov	r4,r16
 1011884:	880b883a 	mov	r5,r17
 1011888:	1017a300 	call	1017a30 <__nedf2>
 101188c:	103f9f26 	beq	r2,zero,101170c <___vfprintf_internal_r+0x1ce4>
 1011890:	00800044 	movi	r2,1
 1011894:	1509c83a 	sub	r4,r2,r20
 1011898:	d9000515 	stw	r4,20(sp)
 101189c:	003f9b06 	br	101170c <___vfprintf_internal_r+0x1ce4>
 10118a0:	98000d1e 	bne	r19,zero,10118d8 <___vfprintf_internal_r+0x1eb0>
 10118a4:	d8c14c17 	ldw	r3,1328(sp)
 10118a8:	1880004c 	andi	r2,r3,1
 10118ac:	10000a1e 	bne	r2,zero,10118d8 <___vfprintf_internal_r+0x1eb0>
 10118b0:	01000044 	movi	r4,1
 10118b4:	200f883a 	mov	r7,r4
 10118b8:	d9014515 	stw	r4,1300(sp)
 10118bc:	003f4a06 	br	10115e8 <___vfprintf_internal_r+0x1bc0>
 10118c0:	3cc00017 	ldw	r19,0(r7)
 10118c4:	39c00104 	addi	r7,r7,4
 10118c8:	983d0e0e 	bge	r19,zero,1010d04 <___vfprintf_internal_r+0x12dc>
 10118cc:	b8c00007 	ldb	r3,0(r23)
 10118d0:	04ffffc4 	movi	r19,-1
 10118d4:	0038d306 	br	100fc24 <___vfprintf_internal_r+0x1fc>
 10118d8:	9cc00084 	addi	r19,r19,2
 10118dc:	dcc14515 	stw	r19,1300(sp)
 10118e0:	980f883a 	mov	r7,r19
 10118e4:	983f400e 	bge	r19,zero,10115e8 <___vfprintf_internal_r+0x1bc0>
 10118e8:	003f7306 	br	10116b8 <___vfprintf_internal_r+0x1c90>

010118ec <__vfprintf_internal>:
 10118ec:	008040f4 	movhi	r2,259
 10118f0:	10a3d104 	addi	r2,r2,-28860
 10118f4:	2013883a 	mov	r9,r4
 10118f8:	11000017 	ldw	r4,0(r2)
 10118fc:	2805883a 	mov	r2,r5
 1011900:	300f883a 	mov	r7,r6
 1011904:	480b883a 	mov	r5,r9
 1011908:	100d883a 	mov	r6,r2
 101190c:	100fa281 	jmpi	100fa28 <___vfprintf_internal_r>

01011910 <__swsetup_r>:
 1011910:	008040f4 	movhi	r2,259
 1011914:	10a3d104 	addi	r2,r2,-28860
 1011918:	10c00017 	ldw	r3,0(r2)
 101191c:	defffd04 	addi	sp,sp,-12
 1011920:	dc400115 	stw	r17,4(sp)
 1011924:	dc000015 	stw	r16,0(sp)
 1011928:	dfc00215 	stw	ra,8(sp)
 101192c:	2023883a 	mov	r17,r4
 1011930:	2821883a 	mov	r16,r5
 1011934:	18000226 	beq	r3,zero,1011940 <__swsetup_r+0x30>
 1011938:	18800e17 	ldw	r2,56(r3)
 101193c:	10001f26 	beq	r2,zero,10119bc <__swsetup_r+0xac>
 1011940:	8100030b 	ldhu	r4,12(r16)
 1011944:	2080020c 	andi	r2,r4,8
 1011948:	10002826 	beq	r2,zero,10119ec <__swsetup_r+0xdc>
 101194c:	81400417 	ldw	r5,16(r16)
 1011950:	28001d26 	beq	r5,zero,10119c8 <__swsetup_r+0xb8>
 1011954:	2080004c 	andi	r2,r4,1
 1011958:	1005003a 	cmpeq	r2,r2,zero
 101195c:	10000b26 	beq	r2,zero,101198c <__swsetup_r+0x7c>
 1011960:	2080008c 	andi	r2,r4,2
 1011964:	10001226 	beq	r2,zero,10119b0 <__swsetup_r+0xa0>
 1011968:	0005883a 	mov	r2,zero
 101196c:	80800215 	stw	r2,8(r16)
 1011970:	28000b26 	beq	r5,zero,10119a0 <__swsetup_r+0x90>
 1011974:	0005883a 	mov	r2,zero
 1011978:	dfc00217 	ldw	ra,8(sp)
 101197c:	dc400117 	ldw	r17,4(sp)
 1011980:	dc000017 	ldw	r16,0(sp)
 1011984:	dec00304 	addi	sp,sp,12
 1011988:	f800283a 	ret
 101198c:	80800517 	ldw	r2,20(r16)
 1011990:	80000215 	stw	zero,8(r16)
 1011994:	0085c83a 	sub	r2,zero,r2
 1011998:	80800615 	stw	r2,24(r16)
 101199c:	283ff51e 	bne	r5,zero,1011974 <__swsetup_r+0x64>
 10119a0:	2080200c 	andi	r2,r4,128
 10119a4:	103ff326 	beq	r2,zero,1011974 <__swsetup_r+0x64>
 10119a8:	00bfffc4 	movi	r2,-1
 10119ac:	003ff206 	br	1011978 <__swsetup_r+0x68>
 10119b0:	80800517 	ldw	r2,20(r16)
 10119b4:	80800215 	stw	r2,8(r16)
 10119b8:	003fed06 	br	1011970 <__swsetup_r+0x60>
 10119bc:	1809883a 	mov	r4,r3
 10119c0:	10134dc0 	call	10134dc <__sinit>
 10119c4:	003fde06 	br	1011940 <__swsetup_r+0x30>
 10119c8:	20c0a00c 	andi	r3,r4,640
 10119cc:	00808004 	movi	r2,512
 10119d0:	18bfe026 	beq	r3,r2,1011954 <__swsetup_r+0x44>
 10119d4:	8809883a 	mov	r4,r17
 10119d8:	800b883a 	mov	r5,r16
 10119dc:	10142880 	call	1014288 <__smakebuf_r>
 10119e0:	8100030b 	ldhu	r4,12(r16)
 10119e4:	81400417 	ldw	r5,16(r16)
 10119e8:	003fda06 	br	1011954 <__swsetup_r+0x44>
 10119ec:	2080040c 	andi	r2,r4,16
 10119f0:	103fed26 	beq	r2,zero,10119a8 <__swsetup_r+0x98>
 10119f4:	2080010c 	andi	r2,r4,4
 10119f8:	10001226 	beq	r2,zero,1011a44 <__swsetup_r+0x134>
 10119fc:	81400c17 	ldw	r5,48(r16)
 1011a00:	28000526 	beq	r5,zero,1011a18 <__swsetup_r+0x108>
 1011a04:	80801004 	addi	r2,r16,64
 1011a08:	28800226 	beq	r5,r2,1011a14 <__swsetup_r+0x104>
 1011a0c:	8809883a 	mov	r4,r17
 1011a10:	10138940 	call	1013894 <_free_r>
 1011a14:	80000c15 	stw	zero,48(r16)
 1011a18:	8080030b 	ldhu	r2,12(r16)
 1011a1c:	81400417 	ldw	r5,16(r16)
 1011a20:	80000115 	stw	zero,4(r16)
 1011a24:	10bff6cc 	andi	r2,r2,65499
 1011a28:	8080030d 	sth	r2,12(r16)
 1011a2c:	81400015 	stw	r5,0(r16)
 1011a30:	8080030b 	ldhu	r2,12(r16)
 1011a34:	10800214 	ori	r2,r2,8
 1011a38:	113fffcc 	andi	r4,r2,65535
 1011a3c:	8080030d 	sth	r2,12(r16)
 1011a40:	003fc306 	br	1011950 <__swsetup_r+0x40>
 1011a44:	81400417 	ldw	r5,16(r16)
 1011a48:	003ff906 	br	1011a30 <__swsetup_r+0x120>

01011a4c <quorem>:
 1011a4c:	28c00417 	ldw	r3,16(r5)
 1011a50:	20800417 	ldw	r2,16(r4)
 1011a54:	defff104 	addi	sp,sp,-60
 1011a58:	dfc00e15 	stw	ra,56(sp)
 1011a5c:	df000d15 	stw	fp,52(sp)
 1011a60:	ddc00c15 	stw	r23,48(sp)
 1011a64:	dd800b15 	stw	r22,44(sp)
 1011a68:	dd400a15 	stw	r21,40(sp)
 1011a6c:	dd000915 	stw	r20,36(sp)
 1011a70:	dcc00815 	stw	r19,32(sp)
 1011a74:	dc800715 	stw	r18,28(sp)
 1011a78:	dc400615 	stw	r17,24(sp)
 1011a7c:	dc000515 	stw	r16,20(sp)
 1011a80:	d9000315 	stw	r4,12(sp)
 1011a84:	d9400415 	stw	r5,16(sp)
 1011a88:	10c07f16 	blt	r2,r3,1011c88 <quorem+0x23c>
 1011a8c:	1d3fffc4 	addi	r20,r3,-1
 1011a90:	d8c00417 	ldw	r3,16(sp)
 1011a94:	d9000317 	ldw	r4,12(sp)
 1011a98:	a505883a 	add	r2,r20,r20
 1011a9c:	1085883a 	add	r2,r2,r2
 1011aa0:	1cc00504 	addi	r19,r3,20
 1011aa4:	25c00504 	addi	r23,r4,20
 1011aa8:	98ad883a 	add	r22,r19,r2
 1011aac:	15c7883a 	add	r3,r2,r23
 1011ab0:	b1400017 	ldw	r5,0(r22)
 1011ab4:	19000017 	ldw	r4,0(r3)
 1011ab8:	d8c00015 	stw	r3,0(sp)
 1011abc:	29400044 	addi	r5,r5,1
 1011ac0:	d9000215 	stw	r4,8(sp)
 1011ac4:	10180f00 	call	10180f0 <__udivsi3>
 1011ac8:	1039883a 	mov	fp,r2
 1011acc:	10003d1e 	bne	r2,zero,1011bc4 <quorem+0x178>
 1011ad0:	d9400417 	ldw	r5,16(sp)
 1011ad4:	d9000317 	ldw	r4,12(sp)
 1011ad8:	10145780 	call	1014578 <__mcmp>
 1011adc:	10002c16 	blt	r2,zero,1011b90 <quorem+0x144>
 1011ae0:	e7000044 	addi	fp,fp,1
 1011ae4:	b80f883a 	mov	r7,r23
 1011ae8:	0011883a 	mov	r8,zero
 1011aec:	0009883a 	mov	r4,zero
 1011af0:	99400017 	ldw	r5,0(r19)
 1011af4:	38c00017 	ldw	r3,0(r7)
 1011af8:	9cc00104 	addi	r19,r19,4
 1011afc:	28bfffcc 	andi	r2,r5,65535
 1011b00:	2085883a 	add	r2,r4,r2
 1011b04:	11bfffcc 	andi	r6,r2,65535
 1011b08:	193fffcc 	andi	r4,r3,65535
 1011b0c:	1004d43a 	srli	r2,r2,16
 1011b10:	280ad43a 	srli	r5,r5,16
 1011b14:	2189c83a 	sub	r4,r4,r6
 1011b18:	2209883a 	add	r4,r4,r8
 1011b1c:	1806d43a 	srli	r3,r3,16
 1011b20:	288b883a 	add	r5,r5,r2
 1011b24:	200dd43a 	srai	r6,r4,16
 1011b28:	28bfffcc 	andi	r2,r5,65535
 1011b2c:	1887c83a 	sub	r3,r3,r2
 1011b30:	1987883a 	add	r3,r3,r6
 1011b34:	3900000d 	sth	r4,0(r7)
 1011b38:	38c0008d 	sth	r3,2(r7)
 1011b3c:	2808d43a 	srli	r4,r5,16
 1011b40:	39c00104 	addi	r7,r7,4
 1011b44:	1811d43a 	srai	r8,r3,16
 1011b48:	b4ffe92e 	bgeu	r22,r19,1011af0 <quorem+0xa4>
 1011b4c:	a505883a 	add	r2,r20,r20
 1011b50:	1085883a 	add	r2,r2,r2
 1011b54:	b885883a 	add	r2,r23,r2
 1011b58:	10c00017 	ldw	r3,0(r2)
 1011b5c:	18000c1e 	bne	r3,zero,1011b90 <quorem+0x144>
 1011b60:	113fff04 	addi	r4,r2,-4
 1011b64:	b900082e 	bgeu	r23,r4,1011b88 <quorem+0x13c>
 1011b68:	10bfff17 	ldw	r2,-4(r2)
 1011b6c:	10000326 	beq	r2,zero,1011b7c <quorem+0x130>
 1011b70:	00000506 	br	1011b88 <quorem+0x13c>
 1011b74:	20800017 	ldw	r2,0(r4)
 1011b78:	1000031e 	bne	r2,zero,1011b88 <quorem+0x13c>
 1011b7c:	213fff04 	addi	r4,r4,-4
 1011b80:	a53fffc4 	addi	r20,r20,-1
 1011b84:	b93ffb36 	bltu	r23,r4,1011b74 <quorem+0x128>
 1011b88:	d9000317 	ldw	r4,12(sp)
 1011b8c:	25000415 	stw	r20,16(r4)
 1011b90:	e005883a 	mov	r2,fp
 1011b94:	dfc00e17 	ldw	ra,56(sp)
 1011b98:	df000d17 	ldw	fp,52(sp)
 1011b9c:	ddc00c17 	ldw	r23,48(sp)
 1011ba0:	dd800b17 	ldw	r22,44(sp)
 1011ba4:	dd400a17 	ldw	r21,40(sp)
 1011ba8:	dd000917 	ldw	r20,36(sp)
 1011bac:	dcc00817 	ldw	r19,32(sp)
 1011bb0:	dc800717 	ldw	r18,28(sp)
 1011bb4:	dc400617 	ldw	r17,24(sp)
 1011bb8:	dc000517 	ldw	r16,20(sp)
 1011bbc:	dec00f04 	addi	sp,sp,60
 1011bc0:	f800283a 	ret
 1011bc4:	b823883a 	mov	r17,r23
 1011bc8:	9825883a 	mov	r18,r19
 1011bcc:	d8000115 	stw	zero,4(sp)
 1011bd0:	002b883a 	mov	r21,zero
 1011bd4:	94000017 	ldw	r16,0(r18)
 1011bd8:	e009883a 	mov	r4,fp
 1011bdc:	94800104 	addi	r18,r18,4
 1011be0:	817fffcc 	andi	r5,r16,65535
 1011be4:	100def40 	call	100def4 <__mulsi3>
 1011be8:	800ad43a 	srli	r5,r16,16
 1011bec:	e009883a 	mov	r4,fp
 1011bf0:	a8a1883a 	add	r16,r21,r2
 1011bf4:	100def40 	call	100def4 <__mulsi3>
 1011bf8:	89000017 	ldw	r4,0(r17)
 1011bfc:	80ffffcc 	andi	r3,r16,65535
 1011c00:	8020d43a 	srli	r16,r16,16
 1011c04:	217fffcc 	andi	r5,r4,65535
 1011c08:	28cbc83a 	sub	r5,r5,r3
 1011c0c:	d8c00117 	ldw	r3,4(sp)
 1011c10:	2008d43a 	srli	r4,r4,16
 1011c14:	1405883a 	add	r2,r2,r16
 1011c18:	28cb883a 	add	r5,r5,r3
 1011c1c:	280dd43a 	srai	r6,r5,16
 1011c20:	10ffffcc 	andi	r3,r2,65535
 1011c24:	20c9c83a 	sub	r4,r4,r3
 1011c28:	2189883a 	add	r4,r4,r6
 1011c2c:	8900008d 	sth	r4,2(r17)
 1011c30:	2009d43a 	srai	r4,r4,16
 1011c34:	8940000d 	sth	r5,0(r17)
 1011c38:	102ad43a 	srli	r21,r2,16
 1011c3c:	8c400104 	addi	r17,r17,4
 1011c40:	d9000115 	stw	r4,4(sp)
 1011c44:	b4bfe32e 	bgeu	r22,r18,1011bd4 <quorem+0x188>
 1011c48:	d9000217 	ldw	r4,8(sp)
 1011c4c:	203fa01e 	bne	r4,zero,1011ad0 <quorem+0x84>
 1011c50:	d8800017 	ldw	r2,0(sp)
 1011c54:	10ffff04 	addi	r3,r2,-4
 1011c58:	b8c0082e 	bgeu	r23,r3,1011c7c <quorem+0x230>
 1011c5c:	10bfff17 	ldw	r2,-4(r2)
 1011c60:	10000326 	beq	r2,zero,1011c70 <quorem+0x224>
 1011c64:	00000506 	br	1011c7c <quorem+0x230>
 1011c68:	18800017 	ldw	r2,0(r3)
 1011c6c:	1000031e 	bne	r2,zero,1011c7c <quorem+0x230>
 1011c70:	18ffff04 	addi	r3,r3,-4
 1011c74:	a53fffc4 	addi	r20,r20,-1
 1011c78:	b8fffb36 	bltu	r23,r3,1011c68 <quorem+0x21c>
 1011c7c:	d8c00317 	ldw	r3,12(sp)
 1011c80:	1d000415 	stw	r20,16(r3)
 1011c84:	003f9206 	br	1011ad0 <quorem+0x84>
 1011c88:	0005883a 	mov	r2,zero
 1011c8c:	003fc106 	br	1011b94 <quorem+0x148>

01011c90 <_dtoa_r>:
 1011c90:	22001017 	ldw	r8,64(r4)
 1011c94:	deffda04 	addi	sp,sp,-152
 1011c98:	dd402115 	stw	r21,132(sp)
 1011c9c:	dd002015 	stw	r20,128(sp)
 1011ca0:	dc801e15 	stw	r18,120(sp)
 1011ca4:	dc401d15 	stw	r17,116(sp)
 1011ca8:	dfc02515 	stw	ra,148(sp)
 1011cac:	df002415 	stw	fp,144(sp)
 1011cb0:	ddc02315 	stw	r23,140(sp)
 1011cb4:	dd802215 	stw	r22,136(sp)
 1011cb8:	dcc01f15 	stw	r19,124(sp)
 1011cbc:	dc001c15 	stw	r16,112(sp)
 1011cc0:	d9001615 	stw	r4,88(sp)
 1011cc4:	3023883a 	mov	r17,r6
 1011cc8:	2829883a 	mov	r20,r5
 1011ccc:	d9c01715 	stw	r7,92(sp)
 1011cd0:	dc802817 	ldw	r18,160(sp)
 1011cd4:	302b883a 	mov	r21,r6
 1011cd8:	40000a26 	beq	r8,zero,1011d04 <_dtoa_r+0x74>
 1011cdc:	20801117 	ldw	r2,68(r4)
 1011ce0:	400b883a 	mov	r5,r8
 1011ce4:	40800115 	stw	r2,4(r8)
 1011ce8:	20c01117 	ldw	r3,68(r4)
 1011cec:	00800044 	movi	r2,1
 1011cf0:	10c4983a 	sll	r2,r2,r3
 1011cf4:	40800215 	stw	r2,8(r8)
 1011cf8:	101441c0 	call	101441c <_Bfree>
 1011cfc:	d8c01617 	ldw	r3,88(sp)
 1011d00:	18001015 	stw	zero,64(r3)
 1011d04:	8800a316 	blt	r17,zero,1011f94 <_dtoa_r+0x304>
 1011d08:	90000015 	stw	zero,0(r18)
 1011d0c:	a8dffc2c 	andhi	r3,r21,32752
 1011d10:	009ffc34 	movhi	r2,32752
 1011d14:	18809126 	beq	r3,r2,1011f5c <_dtoa_r+0x2cc>
 1011d18:	000d883a 	mov	r6,zero
 1011d1c:	000f883a 	mov	r7,zero
 1011d20:	a009883a 	mov	r4,r20
 1011d24:	a80b883a 	mov	r5,r21
 1011d28:	dd001215 	stw	r20,72(sp)
 1011d2c:	dd401315 	stw	r21,76(sp)
 1011d30:	1017a300 	call	1017a30 <__nedf2>
 1011d34:	1000171e 	bne	r2,zero,1011d94 <_dtoa_r+0x104>
 1011d38:	d9802717 	ldw	r6,156(sp)
 1011d3c:	00800044 	movi	r2,1
 1011d40:	30800015 	stw	r2,0(r6)
 1011d44:	d8802917 	ldw	r2,164(sp)
 1011d48:	10029b26 	beq	r2,zero,10127b8 <_dtoa_r+0xb28>
 1011d4c:	d9002917 	ldw	r4,164(sp)
 1011d50:	008040b4 	movhi	r2,258
 1011d54:	109ad944 	addi	r2,r2,27493
 1011d58:	10ffffc4 	addi	r3,r2,-1
 1011d5c:	20800015 	stw	r2,0(r4)
 1011d60:	1805883a 	mov	r2,r3
 1011d64:	dfc02517 	ldw	ra,148(sp)
 1011d68:	df002417 	ldw	fp,144(sp)
 1011d6c:	ddc02317 	ldw	r23,140(sp)
 1011d70:	dd802217 	ldw	r22,136(sp)
 1011d74:	dd402117 	ldw	r21,132(sp)
 1011d78:	dd002017 	ldw	r20,128(sp)
 1011d7c:	dcc01f17 	ldw	r19,124(sp)
 1011d80:	dc801e17 	ldw	r18,120(sp)
 1011d84:	dc401d17 	ldw	r17,116(sp)
 1011d88:	dc001c17 	ldw	r16,112(sp)
 1011d8c:	dec02604 	addi	sp,sp,152
 1011d90:	f800283a 	ret
 1011d94:	d9001617 	ldw	r4,88(sp)
 1011d98:	d9401217 	ldw	r5,72(sp)
 1011d9c:	d8800104 	addi	r2,sp,4
 1011da0:	a80d883a 	mov	r6,r21
 1011da4:	d9c00204 	addi	r7,sp,8
 1011da8:	d8800015 	stw	r2,0(sp)
 1011dac:	1014a580 	call	1014a58 <__d2b>
 1011db0:	d8800715 	stw	r2,28(sp)
 1011db4:	a804d53a 	srli	r2,r21,20
 1011db8:	1101ffcc 	andi	r4,r2,2047
 1011dbc:	20008626 	beq	r4,zero,1011fd8 <_dtoa_r+0x348>
 1011dc0:	d8c01217 	ldw	r3,72(sp)
 1011dc4:	00800434 	movhi	r2,16
 1011dc8:	10bfffc4 	addi	r2,r2,-1
 1011dcc:	ddc00117 	ldw	r23,4(sp)
 1011dd0:	a884703a 	and	r2,r21,r2
 1011dd4:	1811883a 	mov	r8,r3
 1011dd8:	124ffc34 	orhi	r9,r2,16368
 1011ddc:	25bf0044 	addi	r22,r4,-1023
 1011de0:	d8000815 	stw	zero,32(sp)
 1011de4:	0005883a 	mov	r2,zero
 1011de8:	00cffe34 	movhi	r3,16376
 1011dec:	480b883a 	mov	r5,r9
 1011df0:	4009883a 	mov	r4,r8
 1011df4:	180f883a 	mov	r7,r3
 1011df8:	100d883a 	mov	r6,r2
 1011dfc:	10172980 	call	1017298 <__subdf3>
 1011e00:	0218dbf4 	movhi	r8,25455
 1011e04:	4210d844 	addi	r8,r8,17249
 1011e08:	024ff4f4 	movhi	r9,16339
 1011e0c:	4a61e9c4 	addi	r9,r9,-30809
 1011e10:	480f883a 	mov	r7,r9
 1011e14:	400d883a 	mov	r6,r8
 1011e18:	180b883a 	mov	r5,r3
 1011e1c:	1009883a 	mov	r4,r2
 1011e20:	101738c0 	call	101738c <__muldf3>
 1011e24:	0222d874 	movhi	r8,35681
 1011e28:	42322cc4 	addi	r8,r8,-14157
 1011e2c:	024ff1f4 	movhi	r9,16327
 1011e30:	4a628a04 	addi	r9,r9,-30168
 1011e34:	480f883a 	mov	r7,r9
 1011e38:	400d883a 	mov	r6,r8
 1011e3c:	180b883a 	mov	r5,r3
 1011e40:	1009883a 	mov	r4,r2
 1011e44:	10173180 	call	1017318 <__adddf3>
 1011e48:	b009883a 	mov	r4,r22
 1011e4c:	1021883a 	mov	r16,r2
 1011e50:	1823883a 	mov	r17,r3
 1011e54:	1017c500 	call	1017c50 <__floatsidf>
 1011e58:	021427f4 	movhi	r8,20639
 1011e5c:	421e7ec4 	addi	r8,r8,31227
 1011e60:	024ff4f4 	movhi	r9,16339
 1011e64:	4a5104c4 	addi	r9,r9,17427
 1011e68:	480f883a 	mov	r7,r9
 1011e6c:	400d883a 	mov	r6,r8
 1011e70:	180b883a 	mov	r5,r3
 1011e74:	1009883a 	mov	r4,r2
 1011e78:	101738c0 	call	101738c <__muldf3>
 1011e7c:	180f883a 	mov	r7,r3
 1011e80:	880b883a 	mov	r5,r17
 1011e84:	100d883a 	mov	r6,r2
 1011e88:	8009883a 	mov	r4,r16
 1011e8c:	10173180 	call	1017318 <__adddf3>
 1011e90:	1009883a 	mov	r4,r2
 1011e94:	180b883a 	mov	r5,r3
 1011e98:	1021883a 	mov	r16,r2
 1011e9c:	1823883a 	mov	r17,r3
 1011ea0:	1017d480 	call	1017d48 <__fixdfsi>
 1011ea4:	000d883a 	mov	r6,zero
 1011ea8:	000f883a 	mov	r7,zero
 1011eac:	8009883a 	mov	r4,r16
 1011eb0:	880b883a 	mov	r5,r17
 1011eb4:	d8800d15 	stw	r2,52(sp)
 1011eb8:	1017bc80 	call	1017bc8 <__ltdf2>
 1011ebc:	10031716 	blt	r2,zero,1012b1c <_dtoa_r+0xe8c>
 1011ec0:	d8c00d17 	ldw	r3,52(sp)
 1011ec4:	00800584 	movi	r2,22
 1011ec8:	10c1482e 	bgeu	r2,r3,10123ec <_dtoa_r+0x75c>
 1011ecc:	01000044 	movi	r4,1
 1011ed0:	d9000c15 	stw	r4,48(sp)
 1011ed4:	bd85c83a 	sub	r2,r23,r22
 1011ed8:	11bfffc4 	addi	r6,r2,-1
 1011edc:	30030b16 	blt	r6,zero,1012b0c <_dtoa_r+0xe7c>
 1011ee0:	d9800a15 	stw	r6,40(sp)
 1011ee4:	d8001115 	stw	zero,68(sp)
 1011ee8:	d8c00d17 	ldw	r3,52(sp)
 1011eec:	1802ff16 	blt	r3,zero,1012aec <_dtoa_r+0xe5c>
 1011ef0:	d9000a17 	ldw	r4,40(sp)
 1011ef4:	d8c00915 	stw	r3,36(sp)
 1011ef8:	d8001015 	stw	zero,64(sp)
 1011efc:	20c9883a 	add	r4,r4,r3
 1011f00:	d9000a15 	stw	r4,40(sp)
 1011f04:	d9001717 	ldw	r4,92(sp)
 1011f08:	00800244 	movi	r2,9
 1011f0c:	11004636 	bltu	r2,r4,1012028 <_dtoa_r+0x398>
 1011f10:	00800144 	movi	r2,5
 1011f14:	11020416 	blt	r2,r4,1012728 <_dtoa_r+0xa98>
 1011f18:	04400044 	movi	r17,1
 1011f1c:	d8c01717 	ldw	r3,92(sp)
 1011f20:	00800144 	movi	r2,5
 1011f24:	10c1ed36 	bltu	r2,r3,10126dc <_dtoa_r+0xa4c>
 1011f28:	18c5883a 	add	r2,r3,r3
 1011f2c:	1085883a 	add	r2,r2,r2
 1011f30:	00c04074 	movhi	r3,257
 1011f34:	18c7d104 	addi	r3,r3,8004
 1011f38:	10c5883a 	add	r2,r2,r3
 1011f3c:	11000017 	ldw	r4,0(r2)
 1011f40:	2000683a 	jmp	r4
 1011f44:	01012030 	cmpltui	r4,zero,1152
 1011f48:	01012030 	cmpltui	r4,zero,1152
 1011f4c:	01012a30 	cmpltui	r4,zero,1192
 1011f50:	01012a08 	cmpgei	r4,zero,1192
 1011f54:	01012a4c 	andi	r4,zero,1193
 1011f58:	01012a58 	cmpnei	r4,zero,1193
 1011f5c:	d9002717 	ldw	r4,156(sp)
 1011f60:	0089c3c4 	movi	r2,9999
 1011f64:	20800015 	stw	r2,0(r4)
 1011f68:	a0001026 	beq	r20,zero,1011fac <_dtoa_r+0x31c>
 1011f6c:	00c040b4 	movhi	r3,258
 1011f70:	18db8504 	addi	r3,r3,28180
 1011f74:	d9802917 	ldw	r6,164(sp)
 1011f78:	303f7926 	beq	r6,zero,1011d60 <_dtoa_r+0xd0>
 1011f7c:	188000c7 	ldb	r2,3(r3)
 1011f80:	190000c4 	addi	r4,r3,3
 1011f84:	1000101e 	bne	r2,zero,1011fc8 <_dtoa_r+0x338>
 1011f88:	d8802917 	ldw	r2,164(sp)
 1011f8c:	11000015 	stw	r4,0(r2)
 1011f90:	003f7306 	br	1011d60 <_dtoa_r+0xd0>
 1011f94:	00a00034 	movhi	r2,32768
 1011f98:	10bfffc4 	addi	r2,r2,-1
 1011f9c:	00c00044 	movi	r3,1
 1011fa0:	88aa703a 	and	r21,r17,r2
 1011fa4:	90c00015 	stw	r3,0(r18)
 1011fa8:	003f5806 	br	1011d0c <_dtoa_r+0x7c>
 1011fac:	00800434 	movhi	r2,16
 1011fb0:	10bfffc4 	addi	r2,r2,-1
 1011fb4:	a884703a 	and	r2,r21,r2
 1011fb8:	103fec1e 	bne	r2,zero,1011f6c <_dtoa_r+0x2dc>
 1011fbc:	00c040b4 	movhi	r3,258
 1011fc0:	18db8204 	addi	r3,r3,28168
 1011fc4:	003feb06 	br	1011f74 <_dtoa_r+0x2e4>
 1011fc8:	d8802917 	ldw	r2,164(sp)
 1011fcc:	19000204 	addi	r4,r3,8
 1011fd0:	11000015 	stw	r4,0(r2)
 1011fd4:	003f6206 	br	1011d60 <_dtoa_r+0xd0>
 1011fd8:	ddc00117 	ldw	r23,4(sp)
 1011fdc:	d8800217 	ldw	r2,8(sp)
 1011fe0:	01000804 	movi	r4,32
 1011fe4:	b8c10c84 	addi	r3,r23,1074
 1011fe8:	18a3883a 	add	r17,r3,r2
 1011fec:	2441b80e 	bge	r4,r17,10126d0 <_dtoa_r+0xa40>
 1011ff0:	00c01004 	movi	r3,64
 1011ff4:	1c47c83a 	sub	r3,r3,r17
 1011ff8:	88bff804 	addi	r2,r17,-32
 1011ffc:	a8c6983a 	sll	r3,r21,r3
 1012000:	a084d83a 	srl	r2,r20,r2
 1012004:	1888b03a 	or	r4,r3,r2
 1012008:	1017e200 	call	1017e20 <__floatunsidf>
 101200c:	1011883a 	mov	r8,r2
 1012010:	00bf8434 	movhi	r2,65040
 1012014:	01000044 	movi	r4,1
 1012018:	10d3883a 	add	r9,r2,r3
 101201c:	8dbef344 	addi	r22,r17,-1075
 1012020:	d9000815 	stw	r4,32(sp)
 1012024:	003f6f06 	br	1011de4 <_dtoa_r+0x154>
 1012028:	d8001715 	stw	zero,92(sp)
 101202c:	04400044 	movi	r17,1
 1012030:	00bfffc4 	movi	r2,-1
 1012034:	00c00044 	movi	r3,1
 1012038:	d8800e15 	stw	r2,56(sp)
 101203c:	d8002615 	stw	zero,152(sp)
 1012040:	d8800f15 	stw	r2,60(sp)
 1012044:	d8c00b15 	stw	r3,44(sp)
 1012048:	1021883a 	mov	r16,r2
 101204c:	d8801617 	ldw	r2,88(sp)
 1012050:	10001115 	stw	zero,68(r2)
 1012054:	d8801617 	ldw	r2,88(sp)
 1012058:	11401117 	ldw	r5,68(r2)
 101205c:	1009883a 	mov	r4,r2
 1012060:	101499c0 	call	101499c <_Balloc>
 1012064:	d8c01617 	ldw	r3,88(sp)
 1012068:	d8800515 	stw	r2,20(sp)
 101206c:	18801015 	stw	r2,64(r3)
 1012070:	00800384 	movi	r2,14
 1012074:	14006836 	bltu	r2,r16,1012218 <_dtoa_r+0x588>
 1012078:	8805003a 	cmpeq	r2,r17,zero
 101207c:	1000661e 	bne	r2,zero,1012218 <_dtoa_r+0x588>
 1012080:	d9000d17 	ldw	r4,52(sp)
 1012084:	0102300e 	bge	zero,r4,1012948 <_dtoa_r+0xcb8>
 1012088:	208003cc 	andi	r2,r4,15
 101208c:	100490fa 	slli	r2,r2,3
 1012090:	2025d13a 	srai	r18,r4,4
 1012094:	00c040b4 	movhi	r3,258
 1012098:	18db9704 	addi	r3,r3,28252
 101209c:	10c5883a 	add	r2,r2,r3
 10120a0:	90c0040c 	andi	r3,r18,16
 10120a4:	14000017 	ldw	r16,0(r2)
 10120a8:	14400117 	ldw	r17,4(r2)
 10120ac:	18036a1e 	bne	r3,zero,1012e58 <_dtoa_r+0x11c8>
 10120b0:	05800084 	movi	r22,2
 10120b4:	90001026 	beq	r18,zero,10120f8 <_dtoa_r+0x468>
 10120b8:	04c040b4 	movhi	r19,258
 10120bc:	9cdbc904 	addi	r19,r19,28452
 10120c0:	9080004c 	andi	r2,r18,1
 10120c4:	1005003a 	cmpeq	r2,r2,zero
 10120c8:	1000081e 	bne	r2,zero,10120ec <_dtoa_r+0x45c>
 10120cc:	99800017 	ldw	r6,0(r19)
 10120d0:	99c00117 	ldw	r7,4(r19)
 10120d4:	880b883a 	mov	r5,r17
 10120d8:	8009883a 	mov	r4,r16
 10120dc:	101738c0 	call	101738c <__muldf3>
 10120e0:	1021883a 	mov	r16,r2
 10120e4:	b5800044 	addi	r22,r22,1
 10120e8:	1823883a 	mov	r17,r3
 10120ec:	9025d07a 	srai	r18,r18,1
 10120f0:	9cc00204 	addi	r19,r19,8
 10120f4:	903ff21e 	bne	r18,zero,10120c0 <_dtoa_r+0x430>
 10120f8:	a80b883a 	mov	r5,r21
 10120fc:	a009883a 	mov	r4,r20
 1012100:	880f883a 	mov	r7,r17
 1012104:	800d883a 	mov	r6,r16
 1012108:	10177500 	call	1017750 <__divdf3>
 101210c:	1029883a 	mov	r20,r2
 1012110:	182b883a 	mov	r21,r3
 1012114:	d8c00c17 	ldw	r3,48(sp)
 1012118:	1805003a 	cmpeq	r2,r3,zero
 101211c:	1000081e 	bne	r2,zero,1012140 <_dtoa_r+0x4b0>
 1012120:	0005883a 	mov	r2,zero
 1012124:	00cffc34 	movhi	r3,16368
 1012128:	180f883a 	mov	r7,r3
 101212c:	a009883a 	mov	r4,r20
 1012130:	a80b883a 	mov	r5,r21
 1012134:	100d883a 	mov	r6,r2
 1012138:	1017bc80 	call	1017bc8 <__ltdf2>
 101213c:	1003fe16 	blt	r2,zero,1013138 <_dtoa_r+0x14a8>
 1012140:	b009883a 	mov	r4,r22
 1012144:	1017c500 	call	1017c50 <__floatsidf>
 1012148:	180b883a 	mov	r5,r3
 101214c:	1009883a 	mov	r4,r2
 1012150:	a00d883a 	mov	r6,r20
 1012154:	a80f883a 	mov	r7,r21
 1012158:	101738c0 	call	101738c <__muldf3>
 101215c:	0011883a 	mov	r8,zero
 1012160:	02500734 	movhi	r9,16412
 1012164:	1009883a 	mov	r4,r2
 1012168:	180b883a 	mov	r5,r3
 101216c:	480f883a 	mov	r7,r9
 1012170:	400d883a 	mov	r6,r8
 1012174:	10173180 	call	1017318 <__adddf3>
 1012178:	d9000f17 	ldw	r4,60(sp)
 101217c:	102d883a 	mov	r22,r2
 1012180:	00bf3034 	movhi	r2,64704
 1012184:	18b9883a 	add	fp,r3,r2
 1012188:	e02f883a 	mov	r23,fp
 101218c:	20028f1e 	bne	r4,zero,1012bcc <_dtoa_r+0xf3c>
 1012190:	0005883a 	mov	r2,zero
 1012194:	00d00534 	movhi	r3,16404
 1012198:	a009883a 	mov	r4,r20
 101219c:	a80b883a 	mov	r5,r21
 10121a0:	180f883a 	mov	r7,r3
 10121a4:	100d883a 	mov	r6,r2
 10121a8:	10172980 	call	1017298 <__subdf3>
 10121ac:	1009883a 	mov	r4,r2
 10121b0:	e00f883a 	mov	r7,fp
 10121b4:	180b883a 	mov	r5,r3
 10121b8:	b00d883a 	mov	r6,r22
 10121bc:	1025883a 	mov	r18,r2
 10121c0:	1827883a 	mov	r19,r3
 10121c4:	1017ab80 	call	1017ab8 <__gtdf2>
 10121c8:	00834f16 	blt	zero,r2,1012f08 <_dtoa_r+0x1278>
 10121cc:	e0e0003c 	xorhi	r3,fp,32768
 10121d0:	9009883a 	mov	r4,r18
 10121d4:	980b883a 	mov	r5,r19
 10121d8:	180f883a 	mov	r7,r3
 10121dc:	b00d883a 	mov	r6,r22
 10121e0:	1017bc80 	call	1017bc8 <__ltdf2>
 10121e4:	1000080e 	bge	r2,zero,1012208 <_dtoa_r+0x578>
 10121e8:	0027883a 	mov	r19,zero
 10121ec:	0025883a 	mov	r18,zero
 10121f0:	d8802617 	ldw	r2,152(sp)
 10121f4:	df000517 	ldw	fp,20(sp)
 10121f8:	d8000615 	stw	zero,24(sp)
 10121fc:	0084303a 	nor	r2,zero,r2
 1012200:	d8800d15 	stw	r2,52(sp)
 1012204:	00019b06 	br	1012874 <_dtoa_r+0xbe4>
 1012208:	d9801217 	ldw	r6,72(sp)
 101220c:	d8801317 	ldw	r2,76(sp)
 1012210:	3029883a 	mov	r20,r6
 1012214:	102b883a 	mov	r21,r2
 1012218:	d8c00217 	ldw	r3,8(sp)
 101221c:	18008516 	blt	r3,zero,1012434 <_dtoa_r+0x7a4>
 1012220:	d9000d17 	ldw	r4,52(sp)
 1012224:	00800384 	movi	r2,14
 1012228:	11008216 	blt	r2,r4,1012434 <_dtoa_r+0x7a4>
 101222c:	200490fa 	slli	r2,r4,3
 1012230:	d9802617 	ldw	r6,152(sp)
 1012234:	00c040b4 	movhi	r3,258
 1012238:	18db9704 	addi	r3,r3,28252
 101223c:	10c5883a 	add	r2,r2,r3
 1012240:	14800017 	ldw	r18,0(r2)
 1012244:	14c00117 	ldw	r19,4(r2)
 1012248:	30031e16 	blt	r6,zero,1012ec4 <_dtoa_r+0x1234>
 101224c:	d9000517 	ldw	r4,20(sp)
 1012250:	d8c00f17 	ldw	r3,60(sp)
 1012254:	a823883a 	mov	r17,r21
 1012258:	a021883a 	mov	r16,r20
 101225c:	192b883a 	add	r21,r3,r4
 1012260:	2039883a 	mov	fp,r4
 1012264:	00000f06 	br	10122a4 <_dtoa_r+0x614>
 1012268:	0005883a 	mov	r2,zero
 101226c:	00d00934 	movhi	r3,16420
 1012270:	5009883a 	mov	r4,r10
 1012274:	580b883a 	mov	r5,r11
 1012278:	180f883a 	mov	r7,r3
 101227c:	100d883a 	mov	r6,r2
 1012280:	101738c0 	call	101738c <__muldf3>
 1012284:	180b883a 	mov	r5,r3
 1012288:	000d883a 	mov	r6,zero
 101228c:	000f883a 	mov	r7,zero
 1012290:	1009883a 	mov	r4,r2
 1012294:	1021883a 	mov	r16,r2
 1012298:	1823883a 	mov	r17,r3
 101229c:	1017a300 	call	1017a30 <__nedf2>
 10122a0:	10004526 	beq	r2,zero,10123b8 <_dtoa_r+0x728>
 10122a4:	900d883a 	mov	r6,r18
 10122a8:	980f883a 	mov	r7,r19
 10122ac:	8009883a 	mov	r4,r16
 10122b0:	880b883a 	mov	r5,r17
 10122b4:	10177500 	call	1017750 <__divdf3>
 10122b8:	180b883a 	mov	r5,r3
 10122bc:	1009883a 	mov	r4,r2
 10122c0:	1017d480 	call	1017d48 <__fixdfsi>
 10122c4:	1009883a 	mov	r4,r2
 10122c8:	1029883a 	mov	r20,r2
 10122cc:	1017c500 	call	1017c50 <__floatsidf>
 10122d0:	180f883a 	mov	r7,r3
 10122d4:	9009883a 	mov	r4,r18
 10122d8:	980b883a 	mov	r5,r19
 10122dc:	100d883a 	mov	r6,r2
 10122e0:	101738c0 	call	101738c <__muldf3>
 10122e4:	180f883a 	mov	r7,r3
 10122e8:	880b883a 	mov	r5,r17
 10122ec:	8009883a 	mov	r4,r16
 10122f0:	100d883a 	mov	r6,r2
 10122f4:	10172980 	call	1017298 <__subdf3>
 10122f8:	1015883a 	mov	r10,r2
 10122fc:	a0800c04 	addi	r2,r20,48
 1012300:	e0800005 	stb	r2,0(fp)
 1012304:	e7000044 	addi	fp,fp,1
 1012308:	1817883a 	mov	r11,r3
 101230c:	e57fd61e 	bne	fp,r21,1012268 <_dtoa_r+0x5d8>
 1012310:	500d883a 	mov	r6,r10
 1012314:	180f883a 	mov	r7,r3
 1012318:	5009883a 	mov	r4,r10
 101231c:	180b883a 	mov	r5,r3
 1012320:	10173180 	call	1017318 <__adddf3>
 1012324:	100d883a 	mov	r6,r2
 1012328:	9009883a 	mov	r4,r18
 101232c:	980b883a 	mov	r5,r19
 1012330:	180f883a 	mov	r7,r3
 1012334:	1021883a 	mov	r16,r2
 1012338:	1823883a 	mov	r17,r3
 101233c:	1017bc80 	call	1017bc8 <__ltdf2>
 1012340:	10000816 	blt	r2,zero,1012364 <_dtoa_r+0x6d4>
 1012344:	980b883a 	mov	r5,r19
 1012348:	800d883a 	mov	r6,r16
 101234c:	880f883a 	mov	r7,r17
 1012350:	9009883a 	mov	r4,r18
 1012354:	10179a80 	call	10179a8 <__eqdf2>
 1012358:	1000171e 	bne	r2,zero,10123b8 <_dtoa_r+0x728>
 101235c:	a080004c 	andi	r2,r20,1
 1012360:	10001526 	beq	r2,zero,10123b8 <_dtoa_r+0x728>
 1012364:	d8800d17 	ldw	r2,52(sp)
 1012368:	d8800415 	stw	r2,16(sp)
 101236c:	e009883a 	mov	r4,fp
 1012370:	213fffc4 	addi	r4,r4,-1
 1012374:	20c00007 	ldb	r3,0(r4)
 1012378:	00800e44 	movi	r2,57
 101237c:	1880081e 	bne	r3,r2,10123a0 <_dtoa_r+0x710>
 1012380:	d8800517 	ldw	r2,20(sp)
 1012384:	113ffa1e 	bne	r2,r4,1012370 <_dtoa_r+0x6e0>
 1012388:	d8c00417 	ldw	r3,16(sp)
 101238c:	d9800517 	ldw	r6,20(sp)
 1012390:	00800c04 	movi	r2,48
 1012394:	18c00044 	addi	r3,r3,1
 1012398:	d8c00415 	stw	r3,16(sp)
 101239c:	30800005 	stb	r2,0(r6)
 10123a0:	20800003 	ldbu	r2,0(r4)
 10123a4:	d8c00417 	ldw	r3,16(sp)
 10123a8:	27000044 	addi	fp,r4,1
 10123ac:	10800044 	addi	r2,r2,1
 10123b0:	d8c00d15 	stw	r3,52(sp)
 10123b4:	20800005 	stb	r2,0(r4)
 10123b8:	d9001617 	ldw	r4,88(sp)
 10123bc:	d9400717 	ldw	r5,28(sp)
 10123c0:	101441c0 	call	101441c <_Bfree>
 10123c4:	e0000005 	stb	zero,0(fp)
 10123c8:	d9800d17 	ldw	r6,52(sp)
 10123cc:	d8c02717 	ldw	r3,156(sp)
 10123d0:	d9002917 	ldw	r4,164(sp)
 10123d4:	30800044 	addi	r2,r6,1
 10123d8:	18800015 	stw	r2,0(r3)
 10123dc:	20029c26 	beq	r4,zero,1012e50 <_dtoa_r+0x11c0>
 10123e0:	d8c00517 	ldw	r3,20(sp)
 10123e4:	27000015 	stw	fp,0(r4)
 10123e8:	003e5d06 	br	1011d60 <_dtoa_r+0xd0>
 10123ec:	d9800d17 	ldw	r6,52(sp)
 10123f0:	00c040b4 	movhi	r3,258
 10123f4:	18db9704 	addi	r3,r3,28252
 10123f8:	d9001217 	ldw	r4,72(sp)
 10123fc:	300490fa 	slli	r2,r6,3
 1012400:	d9401317 	ldw	r5,76(sp)
 1012404:	10c5883a 	add	r2,r2,r3
 1012408:	12000017 	ldw	r8,0(r2)
 101240c:	12400117 	ldw	r9,4(r2)
 1012410:	400d883a 	mov	r6,r8
 1012414:	480f883a 	mov	r7,r9
 1012418:	1017bc80 	call	1017bc8 <__ltdf2>
 101241c:	1000030e 	bge	r2,zero,101242c <_dtoa_r+0x79c>
 1012420:	d8800d17 	ldw	r2,52(sp)
 1012424:	10bfffc4 	addi	r2,r2,-1
 1012428:	d8800d15 	stw	r2,52(sp)
 101242c:	d8000c15 	stw	zero,48(sp)
 1012430:	003ea806 	br	1011ed4 <_dtoa_r+0x244>
 1012434:	d9000b17 	ldw	r4,44(sp)
 1012438:	202cc03a 	cmpne	r22,r4,zero
 101243c:	b000c71e 	bne	r22,zero,101275c <_dtoa_r+0xacc>
 1012440:	dc001117 	ldw	r16,68(sp)
 1012444:	dc801017 	ldw	r18,64(sp)
 1012448:	0027883a 	mov	r19,zero
 101244c:	04000b0e 	bge	zero,r16,101247c <_dtoa_r+0x7ec>
 1012450:	d8c00a17 	ldw	r3,40(sp)
 1012454:	00c0090e 	bge	zero,r3,101247c <_dtoa_r+0x7ec>
 1012458:	8005883a 	mov	r2,r16
 101245c:	1c011316 	blt	r3,r16,10128ac <_dtoa_r+0xc1c>
 1012460:	d9000a17 	ldw	r4,40(sp)
 1012464:	d9801117 	ldw	r6,68(sp)
 1012468:	80a1c83a 	sub	r16,r16,r2
 101246c:	2089c83a 	sub	r4,r4,r2
 1012470:	308dc83a 	sub	r6,r6,r2
 1012474:	d9000a15 	stw	r4,40(sp)
 1012478:	d9801115 	stw	r6,68(sp)
 101247c:	d8801017 	ldw	r2,64(sp)
 1012480:	0080150e 	bge	zero,r2,10124d8 <_dtoa_r+0x848>
 1012484:	d8c00b17 	ldw	r3,44(sp)
 1012488:	1805003a 	cmpeq	r2,r3,zero
 101248c:	1001c91e 	bne	r2,zero,1012bb4 <_dtoa_r+0xf24>
 1012490:	04800e0e 	bge	zero,r18,10124cc <_dtoa_r+0x83c>
 1012494:	d9001617 	ldw	r4,88(sp)
 1012498:	980b883a 	mov	r5,r19
 101249c:	900d883a 	mov	r6,r18
 10124a0:	10152680 	call	1015268 <__pow5mult>
 10124a4:	d9001617 	ldw	r4,88(sp)
 10124a8:	d9800717 	ldw	r6,28(sp)
 10124ac:	100b883a 	mov	r5,r2
 10124b0:	1027883a 	mov	r19,r2
 10124b4:	1014eac0 	call	1014eac <__multiply>
 10124b8:	d9001617 	ldw	r4,88(sp)
 10124bc:	d9400717 	ldw	r5,28(sp)
 10124c0:	1023883a 	mov	r17,r2
 10124c4:	101441c0 	call	101441c <_Bfree>
 10124c8:	dc400715 	stw	r17,28(sp)
 10124cc:	d9001017 	ldw	r4,64(sp)
 10124d0:	248dc83a 	sub	r6,r4,r18
 10124d4:	30010e1e 	bne	r6,zero,1012910 <_dtoa_r+0xc80>
 10124d8:	d9001617 	ldw	r4,88(sp)
 10124dc:	04400044 	movi	r17,1
 10124e0:	880b883a 	mov	r5,r17
 10124e4:	10151000 	call	1015100 <__i2b>
 10124e8:	d9800917 	ldw	r6,36(sp)
 10124ec:	1025883a 	mov	r18,r2
 10124f0:	0180040e 	bge	zero,r6,1012504 <_dtoa_r+0x874>
 10124f4:	d9001617 	ldw	r4,88(sp)
 10124f8:	100b883a 	mov	r5,r2
 10124fc:	10152680 	call	1015268 <__pow5mult>
 1012500:	1025883a 	mov	r18,r2
 1012504:	d8801717 	ldw	r2,92(sp)
 1012508:	8880f30e 	bge	r17,r2,10128d8 <_dtoa_r+0xc48>
 101250c:	0023883a 	mov	r17,zero
 1012510:	d9800917 	ldw	r6,36(sp)
 1012514:	30019e1e 	bne	r6,zero,1012b90 <_dtoa_r+0xf00>
 1012518:	00c00044 	movi	r3,1
 101251c:	d9000a17 	ldw	r4,40(sp)
 1012520:	20c5883a 	add	r2,r4,r3
 1012524:	10c007cc 	andi	r3,r2,31
 1012528:	1800841e 	bne	r3,zero,101273c <_dtoa_r+0xaac>
 101252c:	00800704 	movi	r2,28
 1012530:	d9000a17 	ldw	r4,40(sp)
 1012534:	d9801117 	ldw	r6,68(sp)
 1012538:	80a1883a 	add	r16,r16,r2
 101253c:	2089883a 	add	r4,r4,r2
 1012540:	308d883a 	add	r6,r6,r2
 1012544:	d9000a15 	stw	r4,40(sp)
 1012548:	d9801115 	stw	r6,68(sp)
 101254c:	d8801117 	ldw	r2,68(sp)
 1012550:	0080050e 	bge	zero,r2,1012568 <_dtoa_r+0x8d8>
 1012554:	d9400717 	ldw	r5,28(sp)
 1012558:	d9001617 	ldw	r4,88(sp)
 101255c:	100d883a 	mov	r6,r2
 1012560:	1014d600 	call	1014d60 <__lshift>
 1012564:	d8800715 	stw	r2,28(sp)
 1012568:	d8c00a17 	ldw	r3,40(sp)
 101256c:	00c0050e 	bge	zero,r3,1012584 <_dtoa_r+0x8f4>
 1012570:	d9001617 	ldw	r4,88(sp)
 1012574:	900b883a 	mov	r5,r18
 1012578:	180d883a 	mov	r6,r3
 101257c:	1014d600 	call	1014d60 <__lshift>
 1012580:	1025883a 	mov	r18,r2
 1012584:	d9000c17 	ldw	r4,48(sp)
 1012588:	2005003a 	cmpeq	r2,r4,zero
 101258c:	10016f26 	beq	r2,zero,1012b4c <_dtoa_r+0xebc>
 1012590:	d9000f17 	ldw	r4,60(sp)
 1012594:	0102170e 	bge	zero,r4,1012df4 <_dtoa_r+0x1164>
 1012598:	d9800b17 	ldw	r6,44(sp)
 101259c:	3005003a 	cmpeq	r2,r6,zero
 10125a0:	1000881e 	bne	r2,zero,10127c4 <_dtoa_r+0xb34>
 10125a4:	0400050e 	bge	zero,r16,10125bc <_dtoa_r+0x92c>
 10125a8:	d9001617 	ldw	r4,88(sp)
 10125ac:	980b883a 	mov	r5,r19
 10125b0:	800d883a 	mov	r6,r16
 10125b4:	1014d600 	call	1014d60 <__lshift>
 10125b8:	1027883a 	mov	r19,r2
 10125bc:	8804c03a 	cmpne	r2,r17,zero
 10125c0:	1002541e 	bne	r2,zero,1012f14 <_dtoa_r+0x1284>
 10125c4:	980b883a 	mov	r5,r19
 10125c8:	dd800517 	ldw	r22,20(sp)
 10125cc:	dcc00615 	stw	r19,24(sp)
 10125d0:	a700004c 	andi	fp,r20,1
 10125d4:	2827883a 	mov	r19,r5
 10125d8:	d9000717 	ldw	r4,28(sp)
 10125dc:	900b883a 	mov	r5,r18
 10125e0:	1011a4c0 	call	1011a4c <quorem>
 10125e4:	d9000717 	ldw	r4,28(sp)
 10125e8:	d9400617 	ldw	r5,24(sp)
 10125ec:	1023883a 	mov	r17,r2
 10125f0:	8dc00c04 	addi	r23,r17,48
 10125f4:	10145780 	call	1014578 <__mcmp>
 10125f8:	d9001617 	ldw	r4,88(sp)
 10125fc:	900b883a 	mov	r5,r18
 1012600:	980d883a 	mov	r6,r19
 1012604:	1029883a 	mov	r20,r2
 1012608:	1014bd40 	call	1014bd4 <__mdiff>
 101260c:	102b883a 	mov	r21,r2
 1012610:	10800317 	ldw	r2,12(r2)
 1012614:	1001281e 	bne	r2,zero,1012ab8 <_dtoa_r+0xe28>
 1012618:	d9000717 	ldw	r4,28(sp)
 101261c:	a80b883a 	mov	r5,r21
 1012620:	10145780 	call	1014578 <__mcmp>
 1012624:	d9001617 	ldw	r4,88(sp)
 1012628:	1021883a 	mov	r16,r2
 101262c:	a80b883a 	mov	r5,r21
 1012630:	101441c0 	call	101441c <_Bfree>
 1012634:	8000041e 	bne	r16,zero,1012648 <_dtoa_r+0x9b8>
 1012638:	d8801717 	ldw	r2,92(sp)
 101263c:	1000021e 	bne	r2,zero,1012648 <_dtoa_r+0x9b8>
 1012640:	e004c03a 	cmpne	r2,fp,zero
 1012644:	10011726 	beq	r2,zero,1012aa4 <_dtoa_r+0xe14>
 1012648:	a0010616 	blt	r20,zero,1012a64 <_dtoa_r+0xdd4>
 101264c:	a000041e 	bne	r20,zero,1012660 <_dtoa_r+0x9d0>
 1012650:	d8c01717 	ldw	r3,92(sp)
 1012654:	1800021e 	bne	r3,zero,1012660 <_dtoa_r+0x9d0>
 1012658:	e004c03a 	cmpne	r2,fp,zero
 101265c:	10010126 	beq	r2,zero,1012a64 <_dtoa_r+0xdd4>
 1012660:	04023d16 	blt	zero,r16,1012f58 <_dtoa_r+0x12c8>
 1012664:	b5c00005 	stb	r23,0(r22)
 1012668:	d9800517 	ldw	r6,20(sp)
 101266c:	d9000f17 	ldw	r4,60(sp)
 1012670:	b5800044 	addi	r22,r22,1
 1012674:	3105883a 	add	r2,r6,r4
 1012678:	b0806526 	beq	r22,r2,1012810 <_dtoa_r+0xb80>
 101267c:	d9400717 	ldw	r5,28(sp)
 1012680:	d9001617 	ldw	r4,88(sp)
 1012684:	01800284 	movi	r6,10
 1012688:	000f883a 	mov	r7,zero
 101268c:	101513c0 	call	101513c <__multadd>
 1012690:	d8800715 	stw	r2,28(sp)
 1012694:	d8800617 	ldw	r2,24(sp)
 1012698:	14c10c26 	beq	r2,r19,1012acc <_dtoa_r+0xe3c>
 101269c:	d9400617 	ldw	r5,24(sp)
 10126a0:	d9001617 	ldw	r4,88(sp)
 10126a4:	01800284 	movi	r6,10
 10126a8:	000f883a 	mov	r7,zero
 10126ac:	101513c0 	call	101513c <__multadd>
 10126b0:	d9001617 	ldw	r4,88(sp)
 10126b4:	980b883a 	mov	r5,r19
 10126b8:	01800284 	movi	r6,10
 10126bc:	000f883a 	mov	r7,zero
 10126c0:	d8800615 	stw	r2,24(sp)
 10126c4:	101513c0 	call	101513c <__multadd>
 10126c8:	1027883a 	mov	r19,r2
 10126cc:	003fc206 	br	10125d8 <_dtoa_r+0x948>
 10126d0:	2445c83a 	sub	r2,r4,r17
 10126d4:	a088983a 	sll	r4,r20,r2
 10126d8:	003e4b06 	br	1012008 <_dtoa_r+0x378>
 10126dc:	01bfffc4 	movi	r6,-1
 10126e0:	00800044 	movi	r2,1
 10126e4:	d9800e15 	stw	r6,56(sp)
 10126e8:	d9800f15 	stw	r6,60(sp)
 10126ec:	d8800b15 	stw	r2,44(sp)
 10126f0:	d8c01617 	ldw	r3,88(sp)
 10126f4:	008005c4 	movi	r2,23
 10126f8:	18001115 	stw	zero,68(r3)
 10126fc:	1580082e 	bgeu	r2,r22,1012720 <_dtoa_r+0xa90>
 1012700:	00c00104 	movi	r3,4
 1012704:	0009883a 	mov	r4,zero
 1012708:	18c7883a 	add	r3,r3,r3
 101270c:	18800504 	addi	r2,r3,20
 1012710:	21000044 	addi	r4,r4,1
 1012714:	b0bffc2e 	bgeu	r22,r2,1012708 <_dtoa_r+0xa78>
 1012718:	d9801617 	ldw	r6,88(sp)
 101271c:	31001115 	stw	r4,68(r6)
 1012720:	dc000f17 	ldw	r16,60(sp)
 1012724:	003e4b06 	br	1012054 <_dtoa_r+0x3c4>
 1012728:	d9801717 	ldw	r6,92(sp)
 101272c:	0023883a 	mov	r17,zero
 1012730:	31bfff04 	addi	r6,r6,-4
 1012734:	d9801715 	stw	r6,92(sp)
 1012738:	003df806 	br	1011f1c <_dtoa_r+0x28c>
 101273c:	00800804 	movi	r2,32
 1012740:	10c9c83a 	sub	r4,r2,r3
 1012744:	00c00104 	movi	r3,4
 1012748:	19005a16 	blt	r3,r4,10128b4 <_dtoa_r+0xc24>
 101274c:	008000c4 	movi	r2,3
 1012750:	113f7e16 	blt	r2,r4,101254c <_dtoa_r+0x8bc>
 1012754:	20800704 	addi	r2,r4,28
 1012758:	003f7506 	br	1012530 <_dtoa_r+0x8a0>
 101275c:	d9801717 	ldw	r6,92(sp)
 1012760:	00800044 	movi	r2,1
 1012764:	1180a10e 	bge	r2,r6,10129ec <_dtoa_r+0xd5c>
 1012768:	d9800f17 	ldw	r6,60(sp)
 101276c:	d8c01017 	ldw	r3,64(sp)
 1012770:	30bfffc4 	addi	r2,r6,-1
 1012774:	1881c616 	blt	r3,r2,1012e90 <_dtoa_r+0x1200>
 1012778:	18a5c83a 	sub	r18,r3,r2
 101277c:	d8800f17 	ldw	r2,60(sp)
 1012780:	10026216 	blt	r2,zero,101310c <_dtoa_r+0x147c>
 1012784:	dc001117 	ldw	r16,68(sp)
 1012788:	1007883a 	mov	r3,r2
 101278c:	d9800a17 	ldw	r6,40(sp)
 1012790:	d8801117 	ldw	r2,68(sp)
 1012794:	d9001617 	ldw	r4,88(sp)
 1012798:	30cd883a 	add	r6,r6,r3
 101279c:	10c5883a 	add	r2,r2,r3
 10127a0:	01400044 	movi	r5,1
 10127a4:	d9800a15 	stw	r6,40(sp)
 10127a8:	d8801115 	stw	r2,68(sp)
 10127ac:	10151000 	call	1015100 <__i2b>
 10127b0:	1027883a 	mov	r19,r2
 10127b4:	003f2506 	br	101244c <_dtoa_r+0x7bc>
 10127b8:	00c040b4 	movhi	r3,258
 10127bc:	18dad904 	addi	r3,r3,27492
 10127c0:	003d6706 	br	1011d60 <_dtoa_r+0xd0>
 10127c4:	dd800517 	ldw	r22,20(sp)
 10127c8:	04000044 	movi	r16,1
 10127cc:	00000706 	br	10127ec <_dtoa_r+0xb5c>
 10127d0:	d9400717 	ldw	r5,28(sp)
 10127d4:	d9001617 	ldw	r4,88(sp)
 10127d8:	01800284 	movi	r6,10
 10127dc:	000f883a 	mov	r7,zero
 10127e0:	101513c0 	call	101513c <__multadd>
 10127e4:	d8800715 	stw	r2,28(sp)
 10127e8:	84000044 	addi	r16,r16,1
 10127ec:	d9000717 	ldw	r4,28(sp)
 10127f0:	900b883a 	mov	r5,r18
 10127f4:	1011a4c0 	call	1011a4c <quorem>
 10127f8:	15c00c04 	addi	r23,r2,48
 10127fc:	b5c00005 	stb	r23,0(r22)
 1012800:	d8c00f17 	ldw	r3,60(sp)
 1012804:	b5800044 	addi	r22,r22,1
 1012808:	80fff116 	blt	r16,r3,10127d0 <_dtoa_r+0xb40>
 101280c:	d8000615 	stw	zero,24(sp)
 1012810:	d9400717 	ldw	r5,28(sp)
 1012814:	d9001617 	ldw	r4,88(sp)
 1012818:	01800044 	movi	r6,1
 101281c:	1014d600 	call	1014d60 <__lshift>
 1012820:	1009883a 	mov	r4,r2
 1012824:	900b883a 	mov	r5,r18
 1012828:	d8800715 	stw	r2,28(sp)
 101282c:	10145780 	call	1014578 <__mcmp>
 1012830:	00803c0e 	bge	zero,r2,1012924 <_dtoa_r+0xc94>
 1012834:	b009883a 	mov	r4,r22
 1012838:	213fffc4 	addi	r4,r4,-1
 101283c:	21400003 	ldbu	r5,0(r4)
 1012840:	00800e44 	movi	r2,57
 1012844:	28c03fcc 	andi	r3,r5,255
 1012848:	18c0201c 	xori	r3,r3,128
 101284c:	18ffe004 	addi	r3,r3,-128
 1012850:	1881981e 	bne	r3,r2,1012eb4 <_dtoa_r+0x1224>
 1012854:	d9800517 	ldw	r6,20(sp)
 1012858:	21bff71e 	bne	r4,r6,1012838 <_dtoa_r+0xba8>
 101285c:	d8800d17 	ldw	r2,52(sp)
 1012860:	37000044 	addi	fp,r6,1
 1012864:	10800044 	addi	r2,r2,1
 1012868:	d8800d15 	stw	r2,52(sp)
 101286c:	00800c44 	movi	r2,49
 1012870:	30800005 	stb	r2,0(r6)
 1012874:	d9001617 	ldw	r4,88(sp)
 1012878:	900b883a 	mov	r5,r18
 101287c:	101441c0 	call	101441c <_Bfree>
 1012880:	983ecd26 	beq	r19,zero,10123b8 <_dtoa_r+0x728>
 1012884:	d8c00617 	ldw	r3,24(sp)
 1012888:	18000426 	beq	r3,zero,101289c <_dtoa_r+0xc0c>
 101288c:	1cc00326 	beq	r3,r19,101289c <_dtoa_r+0xc0c>
 1012890:	d9001617 	ldw	r4,88(sp)
 1012894:	180b883a 	mov	r5,r3
 1012898:	101441c0 	call	101441c <_Bfree>
 101289c:	d9001617 	ldw	r4,88(sp)
 10128a0:	980b883a 	mov	r5,r19
 10128a4:	101441c0 	call	101441c <_Bfree>
 10128a8:	003ec306 	br	10123b8 <_dtoa_r+0x728>
 10128ac:	1805883a 	mov	r2,r3
 10128b0:	003eeb06 	br	1012460 <_dtoa_r+0x7d0>
 10128b4:	d9800a17 	ldw	r6,40(sp)
 10128b8:	d8c01117 	ldw	r3,68(sp)
 10128bc:	20bfff04 	addi	r2,r4,-4
 10128c0:	308d883a 	add	r6,r6,r2
 10128c4:	1887883a 	add	r3,r3,r2
 10128c8:	80a1883a 	add	r16,r16,r2
 10128cc:	d9800a15 	stw	r6,40(sp)
 10128d0:	d8c01115 	stw	r3,68(sp)
 10128d4:	003f1d06 	br	101254c <_dtoa_r+0x8bc>
 10128d8:	a03f0c1e 	bne	r20,zero,101250c <_dtoa_r+0x87c>
 10128dc:	00800434 	movhi	r2,16
 10128e0:	10bfffc4 	addi	r2,r2,-1
 10128e4:	a884703a 	and	r2,r21,r2
 10128e8:	103f081e 	bne	r2,zero,101250c <_dtoa_r+0x87c>
 10128ec:	a89ffc2c 	andhi	r2,r21,32752
 10128f0:	103f0626 	beq	r2,zero,101250c <_dtoa_r+0x87c>
 10128f4:	d8c01117 	ldw	r3,68(sp)
 10128f8:	d9000a17 	ldw	r4,40(sp)
 10128fc:	18c00044 	addi	r3,r3,1
 1012900:	21000044 	addi	r4,r4,1
 1012904:	d8c01115 	stw	r3,68(sp)
 1012908:	d9000a15 	stw	r4,40(sp)
 101290c:	003f0006 	br	1012510 <_dtoa_r+0x880>
 1012910:	d9400717 	ldw	r5,28(sp)
 1012914:	d9001617 	ldw	r4,88(sp)
 1012918:	10152680 	call	1015268 <__pow5mult>
 101291c:	d8800715 	stw	r2,28(sp)
 1012920:	003eed06 	br	10124d8 <_dtoa_r+0x848>
 1012924:	1000021e 	bne	r2,zero,1012930 <_dtoa_r+0xca0>
 1012928:	b880004c 	andi	r2,r23,1
 101292c:	103fc11e 	bne	r2,zero,1012834 <_dtoa_r+0xba4>
 1012930:	b5bfffc4 	addi	r22,r22,-1
 1012934:	b0c00007 	ldb	r3,0(r22)
 1012938:	00800c04 	movi	r2,48
 101293c:	18bffc26 	beq	r3,r2,1012930 <_dtoa_r+0xca0>
 1012940:	b7000044 	addi	fp,r22,1
 1012944:	003fcb06 	br	1012874 <_dtoa_r+0xbe4>
 1012948:	d9800d17 	ldw	r6,52(sp)
 101294c:	018fc83a 	sub	r7,zero,r6
 1012950:	3801f726 	beq	r7,zero,1013130 <_dtoa_r+0x14a0>
 1012954:	398003cc 	andi	r6,r7,15
 1012958:	300c90fa 	slli	r6,r6,3
 101295c:	014040b4 	movhi	r5,258
 1012960:	295b9704 	addi	r5,r5,28252
 1012964:	d9001217 	ldw	r4,72(sp)
 1012968:	314d883a 	add	r6,r6,r5
 101296c:	30c00117 	ldw	r3,4(r6)
 1012970:	30800017 	ldw	r2,0(r6)
 1012974:	d9401317 	ldw	r5,76(sp)
 1012978:	3821d13a 	srai	r16,r7,4
 101297c:	100d883a 	mov	r6,r2
 1012980:	180f883a 	mov	r7,r3
 1012984:	101738c0 	call	101738c <__muldf3>
 1012988:	1011883a 	mov	r8,r2
 101298c:	1813883a 	mov	r9,r3
 1012990:	1029883a 	mov	r20,r2
 1012994:	182b883a 	mov	r21,r3
 1012998:	8001e526 	beq	r16,zero,1013130 <_dtoa_r+0x14a0>
 101299c:	05800084 	movi	r22,2
 10129a0:	044040b4 	movhi	r17,258
 10129a4:	8c5bc904 	addi	r17,r17,28452
 10129a8:	8080004c 	andi	r2,r16,1
 10129ac:	1005003a 	cmpeq	r2,r2,zero
 10129b0:	1000081e 	bne	r2,zero,10129d4 <_dtoa_r+0xd44>
 10129b4:	89800017 	ldw	r6,0(r17)
 10129b8:	89c00117 	ldw	r7,4(r17)
 10129bc:	480b883a 	mov	r5,r9
 10129c0:	4009883a 	mov	r4,r8
 10129c4:	101738c0 	call	101738c <__muldf3>
 10129c8:	1011883a 	mov	r8,r2
 10129cc:	b5800044 	addi	r22,r22,1
 10129d0:	1813883a 	mov	r9,r3
 10129d4:	8021d07a 	srai	r16,r16,1
 10129d8:	8c400204 	addi	r17,r17,8
 10129dc:	803ff21e 	bne	r16,zero,10129a8 <_dtoa_r+0xd18>
 10129e0:	4029883a 	mov	r20,r8
 10129e4:	482b883a 	mov	r21,r9
 10129e8:	003dca06 	br	1012114 <_dtoa_r+0x484>
 10129ec:	d9000817 	ldw	r4,32(sp)
 10129f0:	2005003a 	cmpeq	r2,r4,zero
 10129f4:	1001f61e 	bne	r2,zero,10131d0 <_dtoa_r+0x1540>
 10129f8:	dc001117 	ldw	r16,68(sp)
 10129fc:	dc801017 	ldw	r18,64(sp)
 1012a00:	18c10cc4 	addi	r3,r3,1075
 1012a04:	003f6106 	br	101278c <_dtoa_r+0xafc>
 1012a08:	d8000b15 	stw	zero,44(sp)
 1012a0c:	d9802617 	ldw	r6,152(sp)
 1012a10:	d8c00d17 	ldw	r3,52(sp)
 1012a14:	30800044 	addi	r2,r6,1
 1012a18:	18ad883a 	add	r22,r3,r2
 1012a1c:	b13fffc4 	addi	r4,r22,-1
 1012a20:	d9000e15 	stw	r4,56(sp)
 1012a24:	0581f60e 	bge	zero,r22,1013200 <_dtoa_r+0x1570>
 1012a28:	dd800f15 	stw	r22,60(sp)
 1012a2c:	003f3006 	br	10126f0 <_dtoa_r+0xa60>
 1012a30:	d8000b15 	stw	zero,44(sp)
 1012a34:	d9002617 	ldw	r4,152(sp)
 1012a38:	0101eb0e 	bge	zero,r4,10131e8 <_dtoa_r+0x1558>
 1012a3c:	202d883a 	mov	r22,r4
 1012a40:	d9000e15 	stw	r4,56(sp)
 1012a44:	d9000f15 	stw	r4,60(sp)
 1012a48:	003f2906 	br	10126f0 <_dtoa_r+0xa60>
 1012a4c:	01800044 	movi	r6,1
 1012a50:	d9800b15 	stw	r6,44(sp)
 1012a54:	003ff706 	br	1012a34 <_dtoa_r+0xda4>
 1012a58:	01000044 	movi	r4,1
 1012a5c:	d9000b15 	stw	r4,44(sp)
 1012a60:	003fea06 	br	1012a0c <_dtoa_r+0xd7c>
 1012a64:	04000c0e 	bge	zero,r16,1012a98 <_dtoa_r+0xe08>
 1012a68:	d9400717 	ldw	r5,28(sp)
 1012a6c:	d9001617 	ldw	r4,88(sp)
 1012a70:	01800044 	movi	r6,1
 1012a74:	1014d600 	call	1014d60 <__lshift>
 1012a78:	1009883a 	mov	r4,r2
 1012a7c:	900b883a 	mov	r5,r18
 1012a80:	d8800715 	stw	r2,28(sp)
 1012a84:	10145780 	call	1014578 <__mcmp>
 1012a88:	0081e00e 	bge	zero,r2,101320c <_dtoa_r+0x157c>
 1012a8c:	bdc00044 	addi	r23,r23,1
 1012a90:	00800e84 	movi	r2,58
 1012a94:	b881a226 	beq	r23,r2,1013120 <_dtoa_r+0x1490>
 1012a98:	b7000044 	addi	fp,r22,1
 1012a9c:	b5c00005 	stb	r23,0(r22)
 1012aa0:	003f7406 	br	1012874 <_dtoa_r+0xbe4>
 1012aa4:	00800e44 	movi	r2,57
 1012aa8:	b8819d26 	beq	r23,r2,1013120 <_dtoa_r+0x1490>
 1012aac:	053ffa0e 	bge	zero,r20,1012a98 <_dtoa_r+0xe08>
 1012ab0:	8dc00c44 	addi	r23,r17,49
 1012ab4:	003ff806 	br	1012a98 <_dtoa_r+0xe08>
 1012ab8:	d9001617 	ldw	r4,88(sp)
 1012abc:	a80b883a 	mov	r5,r21
 1012ac0:	04000044 	movi	r16,1
 1012ac4:	101441c0 	call	101441c <_Bfree>
 1012ac8:	003edf06 	br	1012648 <_dtoa_r+0x9b8>
 1012acc:	d9001617 	ldw	r4,88(sp)
 1012ad0:	980b883a 	mov	r5,r19
 1012ad4:	01800284 	movi	r6,10
 1012ad8:	000f883a 	mov	r7,zero
 1012adc:	101513c0 	call	101513c <__multadd>
 1012ae0:	1027883a 	mov	r19,r2
 1012ae4:	d8800615 	stw	r2,24(sp)
 1012ae8:	003ebb06 	br	10125d8 <_dtoa_r+0x948>
 1012aec:	d9801117 	ldw	r6,68(sp)
 1012af0:	d8800d17 	ldw	r2,52(sp)
 1012af4:	d8000915 	stw	zero,36(sp)
 1012af8:	308dc83a 	sub	r6,r6,r2
 1012afc:	0087c83a 	sub	r3,zero,r2
 1012b00:	d9801115 	stw	r6,68(sp)
 1012b04:	d8c01015 	stw	r3,64(sp)
 1012b08:	003cfe06 	br	1011f04 <_dtoa_r+0x274>
 1012b0c:	018dc83a 	sub	r6,zero,r6
 1012b10:	d9801115 	stw	r6,68(sp)
 1012b14:	d8000a15 	stw	zero,40(sp)
 1012b18:	003cf306 	br	1011ee8 <_dtoa_r+0x258>
 1012b1c:	d9000d17 	ldw	r4,52(sp)
 1012b20:	1017c500 	call	1017c50 <__floatsidf>
 1012b24:	880b883a 	mov	r5,r17
 1012b28:	8009883a 	mov	r4,r16
 1012b2c:	180f883a 	mov	r7,r3
 1012b30:	100d883a 	mov	r6,r2
 1012b34:	1017a300 	call	1017a30 <__nedf2>
 1012b38:	103ce126 	beq	r2,zero,1011ec0 <_dtoa_r+0x230>
 1012b3c:	d9800d17 	ldw	r6,52(sp)
 1012b40:	31bfffc4 	addi	r6,r6,-1
 1012b44:	d9800d15 	stw	r6,52(sp)
 1012b48:	003cdd06 	br	1011ec0 <_dtoa_r+0x230>
 1012b4c:	d9000717 	ldw	r4,28(sp)
 1012b50:	900b883a 	mov	r5,r18
 1012b54:	10145780 	call	1014578 <__mcmp>
 1012b58:	103e8d0e 	bge	r2,zero,1012590 <_dtoa_r+0x900>
 1012b5c:	d9400717 	ldw	r5,28(sp)
 1012b60:	d9001617 	ldw	r4,88(sp)
 1012b64:	01800284 	movi	r6,10
 1012b68:	000f883a 	mov	r7,zero
 1012b6c:	101513c0 	call	101513c <__multadd>
 1012b70:	d9800d17 	ldw	r6,52(sp)
 1012b74:	d8800715 	stw	r2,28(sp)
 1012b78:	31bfffc4 	addi	r6,r6,-1
 1012b7c:	d9800d15 	stw	r6,52(sp)
 1012b80:	b001a71e 	bne	r22,zero,1013220 <_dtoa_r+0x1590>
 1012b84:	d8800e17 	ldw	r2,56(sp)
 1012b88:	d8800f15 	stw	r2,60(sp)
 1012b8c:	003e8006 	br	1012590 <_dtoa_r+0x900>
 1012b90:	90800417 	ldw	r2,16(r18)
 1012b94:	1085883a 	add	r2,r2,r2
 1012b98:	1085883a 	add	r2,r2,r2
 1012b9c:	1485883a 	add	r2,r2,r18
 1012ba0:	11000417 	ldw	r4,16(r2)
 1012ba4:	10144440 	call	1014444 <__hi0bits>
 1012ba8:	00c00804 	movi	r3,32
 1012bac:	1887c83a 	sub	r3,r3,r2
 1012bb0:	003e5a06 	br	101251c <_dtoa_r+0x88c>
 1012bb4:	d9400717 	ldw	r5,28(sp)
 1012bb8:	d9801017 	ldw	r6,64(sp)
 1012bbc:	d9001617 	ldw	r4,88(sp)
 1012bc0:	10152680 	call	1015268 <__pow5mult>
 1012bc4:	d8800715 	stw	r2,28(sp)
 1012bc8:	003e4306 	br	10124d8 <_dtoa_r+0x848>
 1012bcc:	d9800f17 	ldw	r6,60(sp)
 1012bd0:	d8800d17 	ldw	r2,52(sp)
 1012bd4:	d9800315 	stw	r6,12(sp)
 1012bd8:	d8800415 	stw	r2,16(sp)
 1012bdc:	d8c00b17 	ldw	r3,44(sp)
 1012be0:	1805003a 	cmpeq	r2,r3,zero
 1012be4:	1000e21e 	bne	r2,zero,1012f70 <_dtoa_r+0x12e0>
 1012be8:	d9000317 	ldw	r4,12(sp)
 1012bec:	0005883a 	mov	r2,zero
 1012bf0:	00cff834 	movhi	r3,16352
 1012bf4:	200c90fa 	slli	r6,r4,3
 1012bf8:	010040b4 	movhi	r4,258
 1012bfc:	211b9704 	addi	r4,r4,28252
 1012c00:	180b883a 	mov	r5,r3
 1012c04:	310d883a 	add	r6,r6,r4
 1012c08:	327fff17 	ldw	r9,-4(r6)
 1012c0c:	323ffe17 	ldw	r8,-8(r6)
 1012c10:	1009883a 	mov	r4,r2
 1012c14:	480f883a 	mov	r7,r9
 1012c18:	400d883a 	mov	r6,r8
 1012c1c:	10177500 	call	1017750 <__divdf3>
 1012c20:	180b883a 	mov	r5,r3
 1012c24:	b00d883a 	mov	r6,r22
 1012c28:	b80f883a 	mov	r7,r23
 1012c2c:	1009883a 	mov	r4,r2
 1012c30:	10172980 	call	1017298 <__subdf3>
 1012c34:	a80b883a 	mov	r5,r21
 1012c38:	a009883a 	mov	r4,r20
 1012c3c:	d8c01915 	stw	r3,100(sp)
 1012c40:	d8801815 	stw	r2,96(sp)
 1012c44:	1017d480 	call	1017d48 <__fixdfsi>
 1012c48:	1009883a 	mov	r4,r2
 1012c4c:	1027883a 	mov	r19,r2
 1012c50:	1017c500 	call	1017c50 <__floatsidf>
 1012c54:	a80b883a 	mov	r5,r21
 1012c58:	a009883a 	mov	r4,r20
 1012c5c:	180f883a 	mov	r7,r3
 1012c60:	100d883a 	mov	r6,r2
 1012c64:	10172980 	call	1017298 <__subdf3>
 1012c68:	d9801817 	ldw	r6,96(sp)
 1012c6c:	1823883a 	mov	r17,r3
 1012c70:	d8801415 	stw	r2,80(sp)
 1012c74:	302d883a 	mov	r22,r6
 1012c78:	d9800517 	ldw	r6,20(sp)
 1012c7c:	9cc00c04 	addi	r19,r19,48
 1012c80:	dc401515 	stw	r17,84(sp)
 1012c84:	d8c01917 	ldw	r3,100(sp)
 1012c88:	34c00005 	stb	r19,0(r6)
 1012c8c:	d8800517 	ldw	r2,20(sp)
 1012c90:	d9401917 	ldw	r5,100(sp)
 1012c94:	d9801417 	ldw	r6,80(sp)
 1012c98:	b009883a 	mov	r4,r22
 1012c9c:	880f883a 	mov	r7,r17
 1012ca0:	182f883a 	mov	r23,r3
 1012ca4:	17000044 	addi	fp,r2,1
 1012ca8:	1017ab80 	call	1017ab8 <__gtdf2>
 1012cac:	00804e16 	blt	zero,r2,1012de8 <_dtoa_r+0x1158>
 1012cb0:	d9801417 	ldw	r6,80(sp)
 1012cb4:	0005883a 	mov	r2,zero
 1012cb8:	00cffc34 	movhi	r3,16368
 1012cbc:	180b883a 	mov	r5,r3
 1012cc0:	880f883a 	mov	r7,r17
 1012cc4:	1009883a 	mov	r4,r2
 1012cc8:	10172980 	call	1017298 <__subdf3>
 1012ccc:	d9401917 	ldw	r5,100(sp)
 1012cd0:	180f883a 	mov	r7,r3
 1012cd4:	b009883a 	mov	r4,r22
 1012cd8:	100d883a 	mov	r6,r2
 1012cdc:	1017ab80 	call	1017ab8 <__gtdf2>
 1012ce0:	00bda216 	blt	zero,r2,101236c <_dtoa_r+0x6dc>
 1012ce4:	d8c00317 	ldw	r3,12(sp)
 1012ce8:	00800044 	movi	r2,1
 1012cec:	10c01216 	blt	r2,r3,1012d38 <_dtoa_r+0x10a8>
 1012cf0:	003d4506 	br	1012208 <_dtoa_r+0x578>
 1012cf4:	d9801417 	ldw	r6,80(sp)
 1012cf8:	0005883a 	mov	r2,zero
 1012cfc:	00cffc34 	movhi	r3,16368
 1012d00:	180b883a 	mov	r5,r3
 1012d04:	880f883a 	mov	r7,r17
 1012d08:	1009883a 	mov	r4,r2
 1012d0c:	10172980 	call	1017298 <__subdf3>
 1012d10:	d9c01b17 	ldw	r7,108(sp)
 1012d14:	180b883a 	mov	r5,r3
 1012d18:	1009883a 	mov	r4,r2
 1012d1c:	b00d883a 	mov	r6,r22
 1012d20:	1017bc80 	call	1017bc8 <__ltdf2>
 1012d24:	103d9116 	blt	r2,zero,101236c <_dtoa_r+0x6dc>
 1012d28:	d9800517 	ldw	r6,20(sp)
 1012d2c:	d9000317 	ldw	r4,12(sp)
 1012d30:	3105883a 	add	r2,r6,r4
 1012d34:	e0bd3426 	beq	fp,r2,1012208 <_dtoa_r+0x578>
 1012d38:	04500934 	movhi	r17,16420
 1012d3c:	0021883a 	mov	r16,zero
 1012d40:	b80b883a 	mov	r5,r23
 1012d44:	b009883a 	mov	r4,r22
 1012d48:	800d883a 	mov	r6,r16
 1012d4c:	880f883a 	mov	r7,r17
 1012d50:	101738c0 	call	101738c <__muldf3>
 1012d54:	d9401517 	ldw	r5,84(sp)
 1012d58:	d9001417 	ldw	r4,80(sp)
 1012d5c:	880f883a 	mov	r7,r17
 1012d60:	000d883a 	mov	r6,zero
 1012d64:	d8801a15 	stw	r2,104(sp)
 1012d68:	d8c01b15 	stw	r3,108(sp)
 1012d6c:	101738c0 	call	101738c <__muldf3>
 1012d70:	180b883a 	mov	r5,r3
 1012d74:	1009883a 	mov	r4,r2
 1012d78:	1823883a 	mov	r17,r3
 1012d7c:	1021883a 	mov	r16,r2
 1012d80:	1017d480 	call	1017d48 <__fixdfsi>
 1012d84:	1009883a 	mov	r4,r2
 1012d88:	102b883a 	mov	r21,r2
 1012d8c:	1017c500 	call	1017c50 <__floatsidf>
 1012d90:	880b883a 	mov	r5,r17
 1012d94:	8009883a 	mov	r4,r16
 1012d98:	180f883a 	mov	r7,r3
 1012d9c:	100d883a 	mov	r6,r2
 1012da0:	10172980 	call	1017298 <__subdf3>
 1012da4:	1021883a 	mov	r16,r2
 1012da8:	d9001b17 	ldw	r4,108(sp)
 1012dac:	1823883a 	mov	r17,r3
 1012db0:	dc001415 	stw	r16,80(sp)
 1012db4:	ad400c04 	addi	r21,r21,48
 1012db8:	dc401515 	stw	r17,84(sp)
 1012dbc:	d8801a17 	ldw	r2,104(sp)
 1012dc0:	e5400005 	stb	r21,0(fp)
 1012dc4:	202f883a 	mov	r23,r4
 1012dc8:	d9c01b17 	ldw	r7,108(sp)
 1012dcc:	d9001417 	ldw	r4,80(sp)
 1012dd0:	880b883a 	mov	r5,r17
 1012dd4:	100d883a 	mov	r6,r2
 1012dd8:	102d883a 	mov	r22,r2
 1012ddc:	e7000044 	addi	fp,fp,1
 1012de0:	1017bc80 	call	1017bc8 <__ltdf2>
 1012de4:	103fc30e 	bge	r2,zero,1012cf4 <_dtoa_r+0x1064>
 1012de8:	d9000417 	ldw	r4,16(sp)
 1012dec:	d9000d15 	stw	r4,52(sp)
 1012df0:	003d7106 	br	10123b8 <_dtoa_r+0x728>
 1012df4:	d9801717 	ldw	r6,92(sp)
 1012df8:	00800084 	movi	r2,2
 1012dfc:	11bde60e 	bge	r2,r6,1012598 <_dtoa_r+0x908>
 1012e00:	203cfb1e 	bne	r4,zero,10121f0 <_dtoa_r+0x560>
 1012e04:	d9001617 	ldw	r4,88(sp)
 1012e08:	900b883a 	mov	r5,r18
 1012e0c:	01800144 	movi	r6,5
 1012e10:	000f883a 	mov	r7,zero
 1012e14:	101513c0 	call	101513c <__multadd>
 1012e18:	d9000717 	ldw	r4,28(sp)
 1012e1c:	100b883a 	mov	r5,r2
 1012e20:	1025883a 	mov	r18,r2
 1012e24:	10145780 	call	1014578 <__mcmp>
 1012e28:	00bcf10e 	bge	zero,r2,10121f0 <_dtoa_r+0x560>
 1012e2c:	d8c00d17 	ldw	r3,52(sp)
 1012e30:	d9000517 	ldw	r4,20(sp)
 1012e34:	d8000615 	stw	zero,24(sp)
 1012e38:	18c00044 	addi	r3,r3,1
 1012e3c:	d8c00d15 	stw	r3,52(sp)
 1012e40:	00800c44 	movi	r2,49
 1012e44:	27000044 	addi	fp,r4,1
 1012e48:	20800005 	stb	r2,0(r4)
 1012e4c:	003e8906 	br	1012874 <_dtoa_r+0xbe4>
 1012e50:	d8c00517 	ldw	r3,20(sp)
 1012e54:	003bc206 	br	1011d60 <_dtoa_r+0xd0>
 1012e58:	018040b4 	movhi	r6,258
 1012e5c:	319bc904 	addi	r6,r6,28452
 1012e60:	30c00917 	ldw	r3,36(r6)
 1012e64:	30800817 	ldw	r2,32(r6)
 1012e68:	d9001217 	ldw	r4,72(sp)
 1012e6c:	d9401317 	ldw	r5,76(sp)
 1012e70:	180f883a 	mov	r7,r3
 1012e74:	100d883a 	mov	r6,r2
 1012e78:	10177500 	call	1017750 <__divdf3>
 1012e7c:	948003cc 	andi	r18,r18,15
 1012e80:	058000c4 	movi	r22,3
 1012e84:	1029883a 	mov	r20,r2
 1012e88:	182b883a 	mov	r21,r3
 1012e8c:	003c8906 	br	10120b4 <_dtoa_r+0x424>
 1012e90:	d9001017 	ldw	r4,64(sp)
 1012e94:	d9800917 	ldw	r6,36(sp)
 1012e98:	0025883a 	mov	r18,zero
 1012e9c:	1105c83a 	sub	r2,r2,r4
 1012ea0:	2089883a 	add	r4,r4,r2
 1012ea4:	308d883a 	add	r6,r6,r2
 1012ea8:	d9001015 	stw	r4,64(sp)
 1012eac:	d9800915 	stw	r6,36(sp)
 1012eb0:	003e3206 	br	101277c <_dtoa_r+0xaec>
 1012eb4:	28800044 	addi	r2,r5,1
 1012eb8:	27000044 	addi	fp,r4,1
 1012ebc:	20800005 	stb	r2,0(r4)
 1012ec0:	003e6c06 	br	1012874 <_dtoa_r+0xbe4>
 1012ec4:	d8800f17 	ldw	r2,60(sp)
 1012ec8:	00bce016 	blt	zero,r2,101224c <_dtoa_r+0x5bc>
 1012ecc:	d9800f17 	ldw	r6,60(sp)
 1012ed0:	303cc51e 	bne	r6,zero,10121e8 <_dtoa_r+0x558>
 1012ed4:	0005883a 	mov	r2,zero
 1012ed8:	00d00534 	movhi	r3,16404
 1012edc:	980b883a 	mov	r5,r19
 1012ee0:	180f883a 	mov	r7,r3
 1012ee4:	9009883a 	mov	r4,r18
 1012ee8:	100d883a 	mov	r6,r2
 1012eec:	101738c0 	call	101738c <__muldf3>
 1012ef0:	180b883a 	mov	r5,r3
 1012ef4:	a80f883a 	mov	r7,r21
 1012ef8:	1009883a 	mov	r4,r2
 1012efc:	a00d883a 	mov	r6,r20
 1012f00:	1017b400 	call	1017b40 <__gedf2>
 1012f04:	103cb80e 	bge	r2,zero,10121e8 <_dtoa_r+0x558>
 1012f08:	0027883a 	mov	r19,zero
 1012f0c:	0025883a 	mov	r18,zero
 1012f10:	003fc606 	br	1012e2c <_dtoa_r+0x119c>
 1012f14:	99400117 	ldw	r5,4(r19)
 1012f18:	d9001617 	ldw	r4,88(sp)
 1012f1c:	101499c0 	call	101499c <_Balloc>
 1012f20:	99800417 	ldw	r6,16(r19)
 1012f24:	11000304 	addi	r4,r2,12
 1012f28:	99400304 	addi	r5,r19,12
 1012f2c:	318d883a 	add	r6,r6,r6
 1012f30:	318d883a 	add	r6,r6,r6
 1012f34:	31800204 	addi	r6,r6,8
 1012f38:	1023883a 	mov	r17,r2
 1012f3c:	100ed4c0 	call	100ed4c <memcpy>
 1012f40:	d9001617 	ldw	r4,88(sp)
 1012f44:	880b883a 	mov	r5,r17
 1012f48:	01800044 	movi	r6,1
 1012f4c:	1014d600 	call	1014d60 <__lshift>
 1012f50:	100b883a 	mov	r5,r2
 1012f54:	003d9c06 	br	10125c8 <_dtoa_r+0x938>
 1012f58:	00800e44 	movi	r2,57
 1012f5c:	b8807026 	beq	r23,r2,1013120 <_dtoa_r+0x1490>
 1012f60:	b8800044 	addi	r2,r23,1
 1012f64:	b7000044 	addi	fp,r22,1
 1012f68:	b0800005 	stb	r2,0(r22)
 1012f6c:	003e4106 	br	1012874 <_dtoa_r+0xbe4>
 1012f70:	d8800317 	ldw	r2,12(sp)
 1012f74:	018040b4 	movhi	r6,258
 1012f78:	319b9704 	addi	r6,r6,28252
 1012f7c:	b009883a 	mov	r4,r22
 1012f80:	100e90fa 	slli	r7,r2,3
 1012f84:	b80b883a 	mov	r5,r23
 1012f88:	398f883a 	add	r7,r7,r6
 1012f8c:	38bffe17 	ldw	r2,-8(r7)
 1012f90:	d9800517 	ldw	r6,20(sp)
 1012f94:	38ffff17 	ldw	r3,-4(r7)
 1012f98:	37000044 	addi	fp,r6,1
 1012f9c:	180f883a 	mov	r7,r3
 1012fa0:	100d883a 	mov	r6,r2
 1012fa4:	101738c0 	call	101738c <__muldf3>
 1012fa8:	a80b883a 	mov	r5,r21
 1012fac:	a009883a 	mov	r4,r20
 1012fb0:	182f883a 	mov	r23,r3
 1012fb4:	102d883a 	mov	r22,r2
 1012fb8:	1017d480 	call	1017d48 <__fixdfsi>
 1012fbc:	1009883a 	mov	r4,r2
 1012fc0:	1027883a 	mov	r19,r2
 1012fc4:	1017c500 	call	1017c50 <__floatsidf>
 1012fc8:	a80b883a 	mov	r5,r21
 1012fcc:	a009883a 	mov	r4,r20
 1012fd0:	180f883a 	mov	r7,r3
 1012fd4:	100d883a 	mov	r6,r2
 1012fd8:	10172980 	call	1017298 <__subdf3>
 1012fdc:	180b883a 	mov	r5,r3
 1012fe0:	d8c00517 	ldw	r3,20(sp)
 1012fe4:	9cc00c04 	addi	r19,r19,48
 1012fe8:	1009883a 	mov	r4,r2
 1012fec:	1cc00005 	stb	r19,0(r3)
 1012ff0:	2021883a 	mov	r16,r4
 1012ff4:	d9000317 	ldw	r4,12(sp)
 1012ff8:	00800044 	movi	r2,1
 1012ffc:	2823883a 	mov	r17,r5
 1013000:	20802226 	beq	r4,r2,101308c <_dtoa_r+0x13fc>
 1013004:	1029883a 	mov	r20,r2
 1013008:	0005883a 	mov	r2,zero
 101300c:	00d00934 	movhi	r3,16420
 1013010:	180f883a 	mov	r7,r3
 1013014:	100d883a 	mov	r6,r2
 1013018:	880b883a 	mov	r5,r17
 101301c:	8009883a 	mov	r4,r16
 1013020:	101738c0 	call	101738c <__muldf3>
 1013024:	180b883a 	mov	r5,r3
 1013028:	1009883a 	mov	r4,r2
 101302c:	1823883a 	mov	r17,r3
 1013030:	1021883a 	mov	r16,r2
 1013034:	1017d480 	call	1017d48 <__fixdfsi>
 1013038:	1009883a 	mov	r4,r2
 101303c:	102b883a 	mov	r21,r2
 1013040:	1017c500 	call	1017c50 <__floatsidf>
 1013044:	880b883a 	mov	r5,r17
 1013048:	8009883a 	mov	r4,r16
 101304c:	180f883a 	mov	r7,r3
 1013050:	100d883a 	mov	r6,r2
 1013054:	10172980 	call	1017298 <__subdf3>
 1013058:	180b883a 	mov	r5,r3
 101305c:	d8c00517 	ldw	r3,20(sp)
 1013060:	1009883a 	mov	r4,r2
 1013064:	ad400c04 	addi	r21,r21,48
 1013068:	1d05883a 	add	r2,r3,r20
 101306c:	15400005 	stb	r21,0(r2)
 1013070:	2021883a 	mov	r16,r4
 1013074:	d9000317 	ldw	r4,12(sp)
 1013078:	a5000044 	addi	r20,r20,1
 101307c:	2823883a 	mov	r17,r5
 1013080:	a13fe11e 	bne	r20,r4,1013008 <_dtoa_r+0x1378>
 1013084:	e505883a 	add	r2,fp,r20
 1013088:	173fffc4 	addi	fp,r2,-1
 101308c:	0025883a 	mov	r18,zero
 1013090:	04cff834 	movhi	r19,16352
 1013094:	b009883a 	mov	r4,r22
 1013098:	b80b883a 	mov	r5,r23
 101309c:	900d883a 	mov	r6,r18
 10130a0:	980f883a 	mov	r7,r19
 10130a4:	10173180 	call	1017318 <__adddf3>
 10130a8:	180b883a 	mov	r5,r3
 10130ac:	1009883a 	mov	r4,r2
 10130b0:	800d883a 	mov	r6,r16
 10130b4:	880f883a 	mov	r7,r17
 10130b8:	1017bc80 	call	1017bc8 <__ltdf2>
 10130bc:	103cab16 	blt	r2,zero,101236c <_dtoa_r+0x6dc>
 10130c0:	0009883a 	mov	r4,zero
 10130c4:	980b883a 	mov	r5,r19
 10130c8:	b80f883a 	mov	r7,r23
 10130cc:	b00d883a 	mov	r6,r22
 10130d0:	10172980 	call	1017298 <__subdf3>
 10130d4:	180b883a 	mov	r5,r3
 10130d8:	880f883a 	mov	r7,r17
 10130dc:	1009883a 	mov	r4,r2
 10130e0:	800d883a 	mov	r6,r16
 10130e4:	1017ab80 	call	1017ab8 <__gtdf2>
 10130e8:	00bc470e 	bge	zero,r2,1012208 <_dtoa_r+0x578>
 10130ec:	00c00c04 	movi	r3,48
 10130f0:	e73fffc4 	addi	fp,fp,-1
 10130f4:	e0800007 	ldb	r2,0(fp)
 10130f8:	10fffd26 	beq	r2,r3,10130f0 <_dtoa_r+0x1460>
 10130fc:	d9800417 	ldw	r6,16(sp)
 1013100:	e7000044 	addi	fp,fp,1
 1013104:	d9800d15 	stw	r6,52(sp)
 1013108:	003cab06 	br	10123b8 <_dtoa_r+0x728>
 101310c:	d8c00f17 	ldw	r3,60(sp)
 1013110:	d9001117 	ldw	r4,68(sp)
 1013114:	20e1c83a 	sub	r16,r4,r3
 1013118:	0007883a 	mov	r3,zero
 101311c:	003d9b06 	br	101278c <_dtoa_r+0xafc>
 1013120:	00800e44 	movi	r2,57
 1013124:	b0800005 	stb	r2,0(r22)
 1013128:	b5800044 	addi	r22,r22,1
 101312c:	003dc106 	br	1012834 <_dtoa_r+0xba4>
 1013130:	05800084 	movi	r22,2
 1013134:	003bf706 	br	1012114 <_dtoa_r+0x484>
 1013138:	d9000f17 	ldw	r4,60(sp)
 101313c:	013c000e 	bge	zero,r4,1012140 <_dtoa_r+0x4b0>
 1013140:	d9800e17 	ldw	r6,56(sp)
 1013144:	01bc300e 	bge	zero,r6,1012208 <_dtoa_r+0x578>
 1013148:	0005883a 	mov	r2,zero
 101314c:	00d00934 	movhi	r3,16420
 1013150:	a80b883a 	mov	r5,r21
 1013154:	180f883a 	mov	r7,r3
 1013158:	a009883a 	mov	r4,r20
 101315c:	100d883a 	mov	r6,r2
 1013160:	101738c0 	call	101738c <__muldf3>
 1013164:	b1000044 	addi	r4,r22,1
 1013168:	1021883a 	mov	r16,r2
 101316c:	1823883a 	mov	r17,r3
 1013170:	1017c500 	call	1017c50 <__floatsidf>
 1013174:	880b883a 	mov	r5,r17
 1013178:	8009883a 	mov	r4,r16
 101317c:	180f883a 	mov	r7,r3
 1013180:	100d883a 	mov	r6,r2
 1013184:	101738c0 	call	101738c <__muldf3>
 1013188:	0011883a 	mov	r8,zero
 101318c:	02500734 	movhi	r9,16412
 1013190:	180b883a 	mov	r5,r3
 1013194:	480f883a 	mov	r7,r9
 1013198:	1009883a 	mov	r4,r2
 101319c:	400d883a 	mov	r6,r8
 10131a0:	10173180 	call	1017318 <__adddf3>
 10131a4:	102d883a 	mov	r22,r2
 10131a8:	00bf3034 	movhi	r2,64704
 10131ac:	10ef883a 	add	r23,r2,r3
 10131b0:	d8800d17 	ldw	r2,52(sp)
 10131b4:	d8c00e17 	ldw	r3,56(sp)
 10131b8:	8029883a 	mov	r20,r16
 10131bc:	10bfffc4 	addi	r2,r2,-1
 10131c0:	882b883a 	mov	r21,r17
 10131c4:	d8800415 	stw	r2,16(sp)
 10131c8:	d8c00315 	stw	r3,12(sp)
 10131cc:	003e8306 	br	1012bdc <_dtoa_r+0xf4c>
 10131d0:	d8800117 	ldw	r2,4(sp)
 10131d4:	dc001117 	ldw	r16,68(sp)
 10131d8:	dc801017 	ldw	r18,64(sp)
 10131dc:	00c00d84 	movi	r3,54
 10131e0:	1887c83a 	sub	r3,r3,r2
 10131e4:	003d6906 	br	101278c <_dtoa_r+0xafc>
 10131e8:	01800044 	movi	r6,1
 10131ec:	3021883a 	mov	r16,r6
 10131f0:	d9800f15 	stw	r6,60(sp)
 10131f4:	d9802615 	stw	r6,152(sp)
 10131f8:	d9800e15 	stw	r6,56(sp)
 10131fc:	003b9306 	br	101204c <_dtoa_r+0x3bc>
 1013200:	b021883a 	mov	r16,r22
 1013204:	dd800f15 	stw	r22,60(sp)
 1013208:	003b9006 	br	101204c <_dtoa_r+0x3bc>
 101320c:	103e221e 	bne	r2,zero,1012a98 <_dtoa_r+0xe08>
 1013210:	b880004c 	andi	r2,r23,1
 1013214:	1005003a 	cmpeq	r2,r2,zero
 1013218:	103e1f1e 	bne	r2,zero,1012a98 <_dtoa_r+0xe08>
 101321c:	003e1b06 	br	1012a8c <_dtoa_r+0xdfc>
 1013220:	d9001617 	ldw	r4,88(sp)
 1013224:	980b883a 	mov	r5,r19
 1013228:	01800284 	movi	r6,10
 101322c:	000f883a 	mov	r7,zero
 1013230:	101513c0 	call	101513c <__multadd>
 1013234:	d8c00e17 	ldw	r3,56(sp)
 1013238:	1027883a 	mov	r19,r2
 101323c:	d8c00f15 	stw	r3,60(sp)
 1013240:	003cd306 	br	1012590 <_dtoa_r+0x900>

01013244 <_fflush_r>:
 1013244:	defffb04 	addi	sp,sp,-20
 1013248:	dcc00315 	stw	r19,12(sp)
 101324c:	dc800215 	stw	r18,8(sp)
 1013250:	dfc00415 	stw	ra,16(sp)
 1013254:	dc400115 	stw	r17,4(sp)
 1013258:	dc000015 	stw	r16,0(sp)
 101325c:	2027883a 	mov	r19,r4
 1013260:	2825883a 	mov	r18,r5
 1013264:	20000226 	beq	r4,zero,1013270 <_fflush_r+0x2c>
 1013268:	20800e17 	ldw	r2,56(r4)
 101326c:	10005626 	beq	r2,zero,10133c8 <_fflush_r+0x184>
 1013270:	9100030b 	ldhu	r4,12(r18)
 1013274:	20ffffcc 	andi	r3,r4,65535
 1013278:	18e0001c 	xori	r3,r3,32768
 101327c:	18e00004 	addi	r3,r3,-32768
 1013280:	1880020c 	andi	r2,r3,8
 1013284:	1000261e 	bne	r2,zero,1013320 <_fflush_r+0xdc>
 1013288:	90c00117 	ldw	r3,4(r18)
 101328c:	20820014 	ori	r2,r4,2048
 1013290:	9080030d 	sth	r2,12(r18)
 1013294:	1009883a 	mov	r4,r2
 1013298:	00c0400e 	bge	zero,r3,101339c <_fflush_r+0x158>
 101329c:	92000a17 	ldw	r8,40(r18)
 10132a0:	40004026 	beq	r8,zero,10133a4 <_fflush_r+0x160>
 10132a4:	2084000c 	andi	r2,r4,4096
 10132a8:	10005326 	beq	r2,zero,10133f8 <_fflush_r+0x1b4>
 10132ac:	94001417 	ldw	r16,80(r18)
 10132b0:	9080030b 	ldhu	r2,12(r18)
 10132b4:	1080010c 	andi	r2,r2,4
 10132b8:	1000481e 	bne	r2,zero,10133dc <_fflush_r+0x198>
 10132bc:	91400717 	ldw	r5,28(r18)
 10132c0:	9809883a 	mov	r4,r19
 10132c4:	800d883a 	mov	r6,r16
 10132c8:	000f883a 	mov	r7,zero
 10132cc:	403ee83a 	callr	r8
 10132d0:	8080261e 	bne	r16,r2,101336c <_fflush_r+0x128>
 10132d4:	9080030b 	ldhu	r2,12(r18)
 10132d8:	91000417 	ldw	r4,16(r18)
 10132dc:	90000115 	stw	zero,4(r18)
 10132e0:	10bdffcc 	andi	r2,r2,63487
 10132e4:	10ffffcc 	andi	r3,r2,65535
 10132e8:	18c4000c 	andi	r3,r3,4096
 10132ec:	9080030d 	sth	r2,12(r18)
 10132f0:	91000015 	stw	r4,0(r18)
 10132f4:	18002b26 	beq	r3,zero,10133a4 <_fflush_r+0x160>
 10132f8:	0007883a 	mov	r3,zero
 10132fc:	1805883a 	mov	r2,r3
 1013300:	94001415 	stw	r16,80(r18)
 1013304:	dfc00417 	ldw	ra,16(sp)
 1013308:	dcc00317 	ldw	r19,12(sp)
 101330c:	dc800217 	ldw	r18,8(sp)
 1013310:	dc400117 	ldw	r17,4(sp)
 1013314:	dc000017 	ldw	r16,0(sp)
 1013318:	dec00504 	addi	sp,sp,20
 101331c:	f800283a 	ret
 1013320:	94400417 	ldw	r17,16(r18)
 1013324:	88001f26 	beq	r17,zero,10133a4 <_fflush_r+0x160>
 1013328:	90800017 	ldw	r2,0(r18)
 101332c:	18c000cc 	andi	r3,r3,3
 1013330:	94400015 	stw	r17,0(r18)
 1013334:	1461c83a 	sub	r16,r2,r17
 1013338:	18002526 	beq	r3,zero,10133d0 <_fflush_r+0x18c>
 101333c:	0005883a 	mov	r2,zero
 1013340:	90800215 	stw	r2,8(r18)
 1013344:	0400170e 	bge	zero,r16,10133a4 <_fflush_r+0x160>
 1013348:	90c00917 	ldw	r3,36(r18)
 101334c:	91400717 	ldw	r5,28(r18)
 1013350:	880d883a 	mov	r6,r17
 1013354:	800f883a 	mov	r7,r16
 1013358:	9809883a 	mov	r4,r19
 101335c:	183ee83a 	callr	r3
 1013360:	88a3883a 	add	r17,r17,r2
 1013364:	80a1c83a 	sub	r16,r16,r2
 1013368:	00bff616 	blt	zero,r2,1013344 <_fflush_r+0x100>
 101336c:	9080030b 	ldhu	r2,12(r18)
 1013370:	00ffffc4 	movi	r3,-1
 1013374:	10801014 	ori	r2,r2,64
 1013378:	9080030d 	sth	r2,12(r18)
 101337c:	1805883a 	mov	r2,r3
 1013380:	dfc00417 	ldw	ra,16(sp)
 1013384:	dcc00317 	ldw	r19,12(sp)
 1013388:	dc800217 	ldw	r18,8(sp)
 101338c:	dc400117 	ldw	r17,4(sp)
 1013390:	dc000017 	ldw	r16,0(sp)
 1013394:	dec00504 	addi	sp,sp,20
 1013398:	f800283a 	ret
 101339c:	90800f17 	ldw	r2,60(r18)
 10133a0:	00bfbe16 	blt	zero,r2,101329c <_fflush_r+0x58>
 10133a4:	0007883a 	mov	r3,zero
 10133a8:	1805883a 	mov	r2,r3
 10133ac:	dfc00417 	ldw	ra,16(sp)
 10133b0:	dcc00317 	ldw	r19,12(sp)
 10133b4:	dc800217 	ldw	r18,8(sp)
 10133b8:	dc400117 	ldw	r17,4(sp)
 10133bc:	dc000017 	ldw	r16,0(sp)
 10133c0:	dec00504 	addi	sp,sp,20
 10133c4:	f800283a 	ret
 10133c8:	10134dc0 	call	10134dc <__sinit>
 10133cc:	003fa806 	br	1013270 <_fflush_r+0x2c>
 10133d0:	90800517 	ldw	r2,20(r18)
 10133d4:	90800215 	stw	r2,8(r18)
 10133d8:	003fda06 	br	1013344 <_fflush_r+0x100>
 10133dc:	90800117 	ldw	r2,4(r18)
 10133e0:	90c00c17 	ldw	r3,48(r18)
 10133e4:	80a1c83a 	sub	r16,r16,r2
 10133e8:	183fb426 	beq	r3,zero,10132bc <_fflush_r+0x78>
 10133ec:	90800f17 	ldw	r2,60(r18)
 10133f0:	80a1c83a 	sub	r16,r16,r2
 10133f4:	003fb106 	br	10132bc <_fflush_r+0x78>
 10133f8:	91400717 	ldw	r5,28(r18)
 10133fc:	9809883a 	mov	r4,r19
 1013400:	000d883a 	mov	r6,zero
 1013404:	01c00044 	movi	r7,1
 1013408:	403ee83a 	callr	r8
 101340c:	1021883a 	mov	r16,r2
 1013410:	00bfffc4 	movi	r2,-1
 1013414:	80800226 	beq	r16,r2,1013420 <_fflush_r+0x1dc>
 1013418:	92000a17 	ldw	r8,40(r18)
 101341c:	003fa406 	br	10132b0 <_fflush_r+0x6c>
 1013420:	98c00017 	ldw	r3,0(r19)
 1013424:	00800744 	movi	r2,29
 1013428:	18bfde26 	beq	r3,r2,10133a4 <_fflush_r+0x160>
 101342c:	9080030b 	ldhu	r2,12(r18)
 1013430:	8007883a 	mov	r3,r16
 1013434:	10801014 	ori	r2,r2,64
 1013438:	9080030d 	sth	r2,12(r18)
 101343c:	003fcf06 	br	101337c <_fflush_r+0x138>

01013440 <fflush>:
 1013440:	01404074 	movhi	r5,257
 1013444:	294c9104 	addi	r5,r5,12868
 1013448:	2007883a 	mov	r3,r4
 101344c:	20000526 	beq	r4,zero,1013464 <fflush+0x24>
 1013450:	008040f4 	movhi	r2,259
 1013454:	10a3d104 	addi	r2,r2,-28860
 1013458:	11000017 	ldw	r4,0(r2)
 101345c:	180b883a 	mov	r5,r3
 1013460:	10132441 	jmpi	1013244 <_fflush_r>
 1013464:	008040f4 	movhi	r2,259
 1013468:	10a3d204 	addi	r2,r2,-28856
 101346c:	11000017 	ldw	r4,0(r2)
 1013470:	10140441 	jmpi	1014044 <_fwalk_reent>

01013474 <std>:
 1013474:	00804074 	movhi	r2,257
 1013478:	1096c304 	addi	r2,r2,23308
 101347c:	20800b15 	stw	r2,44(r4)
 1013480:	00804074 	movhi	r2,257
 1013484:	1096fe04 	addi	r2,r2,23544
 1013488:	20800815 	stw	r2,32(r4)
 101348c:	00c04074 	movhi	r3,257
 1013490:	18d6df04 	addi	r3,r3,23420
 1013494:	00804074 	movhi	r2,257
 1013498:	1096c504 	addi	r2,r2,23316
 101349c:	2140030d 	sth	r5,12(r4)
 10134a0:	2180038d 	sth	r6,14(r4)
 10134a4:	20c00915 	stw	r3,36(r4)
 10134a8:	20800a15 	stw	r2,40(r4)
 10134ac:	20000015 	stw	zero,0(r4)
 10134b0:	20000115 	stw	zero,4(r4)
 10134b4:	20000215 	stw	zero,8(r4)
 10134b8:	20000415 	stw	zero,16(r4)
 10134bc:	20000515 	stw	zero,20(r4)
 10134c0:	20000615 	stw	zero,24(r4)
 10134c4:	21000715 	stw	r4,28(r4)
 10134c8:	f800283a 	ret

010134cc <__sfp_lock_acquire>:
 10134cc:	f800283a 	ret

010134d0 <__sfp_lock_release>:
 10134d0:	f800283a 	ret

010134d4 <__sinit_lock_acquire>:
 10134d4:	f800283a 	ret

010134d8 <__sinit_lock_release>:
 10134d8:	f800283a 	ret

010134dc <__sinit>:
 10134dc:	20800e17 	ldw	r2,56(r4)
 10134e0:	defffd04 	addi	sp,sp,-12
 10134e4:	dc400115 	stw	r17,4(sp)
 10134e8:	dc000015 	stw	r16,0(sp)
 10134ec:	dfc00215 	stw	ra,8(sp)
 10134f0:	04400044 	movi	r17,1
 10134f4:	01400104 	movi	r5,4
 10134f8:	000d883a 	mov	r6,zero
 10134fc:	2021883a 	mov	r16,r4
 1013500:	2200bb04 	addi	r8,r4,748
 1013504:	200f883a 	mov	r7,r4
 1013508:	10000526 	beq	r2,zero,1013520 <__sinit+0x44>
 101350c:	dfc00217 	ldw	ra,8(sp)
 1013510:	dc400117 	ldw	r17,4(sp)
 1013514:	dc000017 	ldw	r16,0(sp)
 1013518:	dec00304 	addi	sp,sp,12
 101351c:	f800283a 	ret
 1013520:	21000117 	ldw	r4,4(r4)
 1013524:	00804074 	movhi	r2,257
 1013528:	108d7004 	addi	r2,r2,13760
 101352c:	00c000c4 	movi	r3,3
 1013530:	80800f15 	stw	r2,60(r16)
 1013534:	80c0b915 	stw	r3,740(r16)
 1013538:	8200ba15 	stw	r8,744(r16)
 101353c:	84400e15 	stw	r17,56(r16)
 1013540:	8000b815 	stw	zero,736(r16)
 1013544:	10134740 	call	1013474 <std>
 1013548:	81000217 	ldw	r4,8(r16)
 101354c:	880d883a 	mov	r6,r17
 1013550:	800f883a 	mov	r7,r16
 1013554:	01400284 	movi	r5,10
 1013558:	10134740 	call	1013474 <std>
 101355c:	81000317 	ldw	r4,12(r16)
 1013560:	800f883a 	mov	r7,r16
 1013564:	01400484 	movi	r5,18
 1013568:	01800084 	movi	r6,2
 101356c:	dfc00217 	ldw	ra,8(sp)
 1013570:	dc400117 	ldw	r17,4(sp)
 1013574:	dc000017 	ldw	r16,0(sp)
 1013578:	dec00304 	addi	sp,sp,12
 101357c:	10134741 	jmpi	1013474 <std>

01013580 <__fp_lock>:
 1013580:	0005883a 	mov	r2,zero
 1013584:	f800283a 	ret

01013588 <__fp_unlock>:
 1013588:	0005883a 	mov	r2,zero
 101358c:	f800283a 	ret

01013590 <__fp_unlock_all>:
 1013590:	008040f4 	movhi	r2,259
 1013594:	10a3d104 	addi	r2,r2,-28860
 1013598:	11000017 	ldw	r4,0(r2)
 101359c:	01404074 	movhi	r5,257
 10135a0:	294d6204 	addi	r5,r5,13704
 10135a4:	101410c1 	jmpi	101410c <_fwalk>

010135a8 <__fp_lock_all>:
 10135a8:	008040f4 	movhi	r2,259
 10135ac:	10a3d104 	addi	r2,r2,-28860
 10135b0:	11000017 	ldw	r4,0(r2)
 10135b4:	01404074 	movhi	r5,257
 10135b8:	294d6004 	addi	r5,r5,13696
 10135bc:	101410c1 	jmpi	101410c <_fwalk>

010135c0 <_cleanup_r>:
 10135c0:	01404074 	movhi	r5,257
 10135c4:	2957f504 	addi	r5,r5,24532
 10135c8:	101410c1 	jmpi	101410c <_fwalk>

010135cc <_cleanup>:
 10135cc:	008040f4 	movhi	r2,259
 10135d0:	10a3d204 	addi	r2,r2,-28856
 10135d4:	11000017 	ldw	r4,0(r2)
 10135d8:	10135c01 	jmpi	10135c0 <_cleanup_r>

010135dc <__sfmoreglue>:
 10135dc:	defffc04 	addi	sp,sp,-16
 10135e0:	dc000015 	stw	r16,0(sp)
 10135e4:	2821883a 	mov	r16,r5
 10135e8:	dc400115 	stw	r17,4(sp)
 10135ec:	01401704 	movi	r5,92
 10135f0:	2023883a 	mov	r17,r4
 10135f4:	8009883a 	mov	r4,r16
 10135f8:	dfc00315 	stw	ra,12(sp)
 10135fc:	dcc00215 	stw	r19,8(sp)
 1013600:	100def40 	call	100def4 <__mulsi3>
 1013604:	11400304 	addi	r5,r2,12
 1013608:	8809883a 	mov	r4,r17
 101360c:	1027883a 	mov	r19,r2
 1013610:	100e4b40 	call	100e4b4 <_malloc_r>
 1013614:	10c00304 	addi	r3,r2,12
 1013618:	1023883a 	mov	r17,r2
 101361c:	1809883a 	mov	r4,r3
 1013620:	980d883a 	mov	r6,r19
 1013624:	000b883a 	mov	r5,zero
 1013628:	10000b26 	beq	r2,zero,1013658 <__sfmoreglue+0x7c>
 101362c:	14000115 	stw	r16,4(r2)
 1013630:	10c00215 	stw	r3,8(r2)
 1013634:	10000015 	stw	zero,0(r2)
 1013638:	100eecc0 	call	100eecc <memset>
 101363c:	8805883a 	mov	r2,r17
 1013640:	dfc00317 	ldw	ra,12(sp)
 1013644:	dcc00217 	ldw	r19,8(sp)
 1013648:	dc400117 	ldw	r17,4(sp)
 101364c:	dc000017 	ldw	r16,0(sp)
 1013650:	dec00404 	addi	sp,sp,16
 1013654:	f800283a 	ret
 1013658:	0023883a 	mov	r17,zero
 101365c:	8805883a 	mov	r2,r17
 1013660:	dfc00317 	ldw	ra,12(sp)
 1013664:	dcc00217 	ldw	r19,8(sp)
 1013668:	dc400117 	ldw	r17,4(sp)
 101366c:	dc000017 	ldw	r16,0(sp)
 1013670:	dec00404 	addi	sp,sp,16
 1013674:	f800283a 	ret

01013678 <__sfp>:
 1013678:	defffd04 	addi	sp,sp,-12
 101367c:	008040f4 	movhi	r2,259
 1013680:	10a3d204 	addi	r2,r2,-28856
 1013684:	dc000015 	stw	r16,0(sp)
 1013688:	14000017 	ldw	r16,0(r2)
 101368c:	dc400115 	stw	r17,4(sp)
 1013690:	dfc00215 	stw	ra,8(sp)
 1013694:	80800e17 	ldw	r2,56(r16)
 1013698:	2023883a 	mov	r17,r4
 101369c:	10002626 	beq	r2,zero,1013738 <__sfp+0xc0>
 10136a0:	8400b804 	addi	r16,r16,736
 10136a4:	80800117 	ldw	r2,4(r16)
 10136a8:	81000217 	ldw	r4,8(r16)
 10136ac:	10ffffc4 	addi	r3,r2,-1
 10136b0:	18000916 	blt	r3,zero,10136d8 <__sfp+0x60>
 10136b4:	2080030f 	ldh	r2,12(r4)
 10136b8:	10000b26 	beq	r2,zero,10136e8 <__sfp+0x70>
 10136bc:	017fffc4 	movi	r5,-1
 10136c0:	00000206 	br	10136cc <__sfp+0x54>
 10136c4:	2080030f 	ldh	r2,12(r4)
 10136c8:	10000726 	beq	r2,zero,10136e8 <__sfp+0x70>
 10136cc:	18ffffc4 	addi	r3,r3,-1
 10136d0:	21001704 	addi	r4,r4,92
 10136d4:	197ffb1e 	bne	r3,r5,10136c4 <__sfp+0x4c>
 10136d8:	80800017 	ldw	r2,0(r16)
 10136dc:	10001926 	beq	r2,zero,1013744 <__sfp+0xcc>
 10136e0:	1021883a 	mov	r16,r2
 10136e4:	003fef06 	br	10136a4 <__sfp+0x2c>
 10136e8:	00bfffc4 	movi	r2,-1
 10136ec:	00c00044 	movi	r3,1
 10136f0:	2080038d 	sth	r2,14(r4)
 10136f4:	20c0030d 	sth	r3,12(r4)
 10136f8:	20000015 	stw	zero,0(r4)
 10136fc:	20000215 	stw	zero,8(r4)
 1013700:	20000115 	stw	zero,4(r4)
 1013704:	20000415 	stw	zero,16(r4)
 1013708:	20000515 	stw	zero,20(r4)
 101370c:	20000615 	stw	zero,24(r4)
 1013710:	20000c15 	stw	zero,48(r4)
 1013714:	20000d15 	stw	zero,52(r4)
 1013718:	20001115 	stw	zero,68(r4)
 101371c:	20001215 	stw	zero,72(r4)
 1013720:	2005883a 	mov	r2,r4
 1013724:	dfc00217 	ldw	ra,8(sp)
 1013728:	dc400117 	ldw	r17,4(sp)
 101372c:	dc000017 	ldw	r16,0(sp)
 1013730:	dec00304 	addi	sp,sp,12
 1013734:	f800283a 	ret
 1013738:	8009883a 	mov	r4,r16
 101373c:	10134dc0 	call	10134dc <__sinit>
 1013740:	003fd706 	br	10136a0 <__sfp+0x28>
 1013744:	8809883a 	mov	r4,r17
 1013748:	01400104 	movi	r5,4
 101374c:	10135dc0 	call	10135dc <__sfmoreglue>
 1013750:	80800015 	stw	r2,0(r16)
 1013754:	103fe21e 	bne	r2,zero,10136e0 <__sfp+0x68>
 1013758:	00800304 	movi	r2,12
 101375c:	0009883a 	mov	r4,zero
 1013760:	88800015 	stw	r2,0(r17)
 1013764:	003fee06 	br	1013720 <__sfp+0xa8>

01013768 <_malloc_trim_r>:
 1013768:	defffb04 	addi	sp,sp,-20
 101376c:	dcc00315 	stw	r19,12(sp)
 1013770:	04c040b4 	movhi	r19,258
 1013774:	9cdc8e04 	addi	r19,r19,29240
 1013778:	dc800215 	stw	r18,8(sp)
 101377c:	dc400115 	stw	r17,4(sp)
 1013780:	dc000015 	stw	r16,0(sp)
 1013784:	2823883a 	mov	r17,r5
 1013788:	2025883a 	mov	r18,r4
 101378c:	dfc00415 	stw	ra,16(sp)
 1013790:	101952c0 	call	101952c <__malloc_lock>
 1013794:	98800217 	ldw	r2,8(r19)
 1013798:	9009883a 	mov	r4,r18
 101379c:	000b883a 	mov	r5,zero
 10137a0:	10c00117 	ldw	r3,4(r2)
 10137a4:	00bfff04 	movi	r2,-4
 10137a8:	18a0703a 	and	r16,r3,r2
 10137ac:	8463c83a 	sub	r17,r16,r17
 10137b0:	8c43fbc4 	addi	r17,r17,4079
 10137b4:	8822d33a 	srli	r17,r17,12
 10137b8:	0083ffc4 	movi	r2,4095
 10137bc:	8c7fffc4 	addi	r17,r17,-1
 10137c0:	8822933a 	slli	r17,r17,12
 10137c4:	1440060e 	bge	r2,r17,10137e0 <_malloc_trim_r+0x78>
 10137c8:	100f0900 	call	100f090 <_sbrk_r>
 10137cc:	98c00217 	ldw	r3,8(r19)
 10137d0:	9009883a 	mov	r4,r18
 10137d4:	044bc83a 	sub	r5,zero,r17
 10137d8:	80c7883a 	add	r3,r16,r3
 10137dc:	10c00926 	beq	r2,r3,1013804 <_malloc_trim_r+0x9c>
 10137e0:	10196340 	call	1019634 <__malloc_unlock>
 10137e4:	0005883a 	mov	r2,zero
 10137e8:	dfc00417 	ldw	ra,16(sp)
 10137ec:	dcc00317 	ldw	r19,12(sp)
 10137f0:	dc800217 	ldw	r18,8(sp)
 10137f4:	dc400117 	ldw	r17,4(sp)
 10137f8:	dc000017 	ldw	r16,0(sp)
 10137fc:	dec00504 	addi	sp,sp,20
 1013800:	f800283a 	ret
 1013804:	9009883a 	mov	r4,r18
 1013808:	100f0900 	call	100f090 <_sbrk_r>
 101380c:	844dc83a 	sub	r6,r16,r17
 1013810:	00ffffc4 	movi	r3,-1
 1013814:	9009883a 	mov	r4,r18
 1013818:	000b883a 	mov	r5,zero
 101381c:	01c040f4 	movhi	r7,259
 1013820:	39de3604 	addi	r7,r7,30936
 1013824:	31800054 	ori	r6,r6,1
 1013828:	10c00926 	beq	r2,r3,1013850 <_malloc_trim_r+0xe8>
 101382c:	38800017 	ldw	r2,0(r7)
 1013830:	98c00217 	ldw	r3,8(r19)
 1013834:	9009883a 	mov	r4,r18
 1013838:	1445c83a 	sub	r2,r2,r17
 101383c:	38800015 	stw	r2,0(r7)
 1013840:	19800115 	stw	r6,4(r3)
 1013844:	10196340 	call	1019634 <__malloc_unlock>
 1013848:	00800044 	movi	r2,1
 101384c:	003fe606 	br	10137e8 <_malloc_trim_r+0x80>
 1013850:	100f0900 	call	100f090 <_sbrk_r>
 1013854:	99800217 	ldw	r6,8(r19)
 1013858:	100f883a 	mov	r7,r2
 101385c:	9009883a 	mov	r4,r18
 1013860:	1187c83a 	sub	r3,r2,r6
 1013864:	008003c4 	movi	r2,15
 1013868:	19400054 	ori	r5,r3,1
 101386c:	10ffdc0e 	bge	r2,r3,10137e0 <_malloc_trim_r+0x78>
 1013870:	008040f4 	movhi	r2,259
 1013874:	10a3cf04 	addi	r2,r2,-28868
 1013878:	10c00017 	ldw	r3,0(r2)
 101387c:	008040f4 	movhi	r2,259
 1013880:	109e3604 	addi	r2,r2,30936
 1013884:	31400115 	stw	r5,4(r6)
 1013888:	38c7c83a 	sub	r3,r7,r3
 101388c:	10c00015 	stw	r3,0(r2)
 1013890:	003fd306 	br	10137e0 <_malloc_trim_r+0x78>

01013894 <_free_r>:
 1013894:	defffd04 	addi	sp,sp,-12
 1013898:	dc400115 	stw	r17,4(sp)
 101389c:	dc000015 	stw	r16,0(sp)
 10138a0:	dfc00215 	stw	ra,8(sp)
 10138a4:	2821883a 	mov	r16,r5
 10138a8:	2023883a 	mov	r17,r4
 10138ac:	28005a26 	beq	r5,zero,1013a18 <_free_r+0x184>
 10138b0:	101952c0 	call	101952c <__malloc_lock>
 10138b4:	823ffe04 	addi	r8,r16,-8
 10138b8:	41400117 	ldw	r5,4(r8)
 10138bc:	00bfff84 	movi	r2,-2
 10138c0:	028040b4 	movhi	r10,258
 10138c4:	529c8e04 	addi	r10,r10,29240
 10138c8:	288e703a 	and	r7,r5,r2
 10138cc:	41cd883a 	add	r6,r8,r7
 10138d0:	30c00117 	ldw	r3,4(r6)
 10138d4:	51000217 	ldw	r4,8(r10)
 10138d8:	00bfff04 	movi	r2,-4
 10138dc:	1892703a 	and	r9,r3,r2
 10138e0:	5017883a 	mov	r11,r10
 10138e4:	31006726 	beq	r6,r4,1013a84 <_free_r+0x1f0>
 10138e8:	2880004c 	andi	r2,r5,1
 10138ec:	1005003a 	cmpeq	r2,r2,zero
 10138f0:	32400115 	stw	r9,4(r6)
 10138f4:	10001a1e 	bne	r2,zero,1013960 <_free_r+0xcc>
 10138f8:	000b883a 	mov	r5,zero
 10138fc:	3247883a 	add	r3,r6,r9
 1013900:	18800117 	ldw	r2,4(r3)
 1013904:	1080004c 	andi	r2,r2,1
 1013908:	1000231e 	bne	r2,zero,1013998 <_free_r+0x104>
 101390c:	280ac03a 	cmpne	r5,r5,zero
 1013910:	3a4f883a 	add	r7,r7,r9
 1013914:	2800451e 	bne	r5,zero,1013a2c <_free_r+0x198>
 1013918:	31000217 	ldw	r4,8(r6)
 101391c:	008040b4 	movhi	r2,258
 1013920:	109c9004 	addi	r2,r2,29248
 1013924:	20807b26 	beq	r4,r2,1013b14 <_free_r+0x280>
 1013928:	30800317 	ldw	r2,12(r6)
 101392c:	3a07883a 	add	r3,r7,r8
 1013930:	19c00015 	stw	r7,0(r3)
 1013934:	11000215 	stw	r4,8(r2)
 1013938:	20800315 	stw	r2,12(r4)
 101393c:	38800054 	ori	r2,r7,1
 1013940:	40800115 	stw	r2,4(r8)
 1013944:	28001a26 	beq	r5,zero,10139b0 <_free_r+0x11c>
 1013948:	8809883a 	mov	r4,r17
 101394c:	dfc00217 	ldw	ra,8(sp)
 1013950:	dc400117 	ldw	r17,4(sp)
 1013954:	dc000017 	ldw	r16,0(sp)
 1013958:	dec00304 	addi	sp,sp,12
 101395c:	10196341 	jmpi	1019634 <__malloc_unlock>
 1013960:	80bffe17 	ldw	r2,-8(r16)
 1013964:	50c00204 	addi	r3,r10,8
 1013968:	4091c83a 	sub	r8,r8,r2
 101396c:	41000217 	ldw	r4,8(r8)
 1013970:	388f883a 	add	r7,r7,r2
 1013974:	20c06126 	beq	r4,r3,1013afc <_free_r+0x268>
 1013978:	40800317 	ldw	r2,12(r8)
 101397c:	3247883a 	add	r3,r6,r9
 1013980:	000b883a 	mov	r5,zero
 1013984:	11000215 	stw	r4,8(r2)
 1013988:	20800315 	stw	r2,12(r4)
 101398c:	18800117 	ldw	r2,4(r3)
 1013990:	1080004c 	andi	r2,r2,1
 1013994:	103fdd26 	beq	r2,zero,101390c <_free_r+0x78>
 1013998:	38800054 	ori	r2,r7,1
 101399c:	3a07883a 	add	r3,r7,r8
 10139a0:	280ac03a 	cmpne	r5,r5,zero
 10139a4:	40800115 	stw	r2,4(r8)
 10139a8:	19c00015 	stw	r7,0(r3)
 10139ac:	283fe61e 	bne	r5,zero,1013948 <_free_r+0xb4>
 10139b0:	00807fc4 	movi	r2,511
 10139b4:	11c01f2e 	bgeu	r2,r7,1013a34 <_free_r+0x1a0>
 10139b8:	3806d27a 	srli	r3,r7,9
 10139bc:	1800481e 	bne	r3,zero,1013ae0 <_free_r+0x24c>
 10139c0:	3804d0fa 	srli	r2,r7,3
 10139c4:	100690fa 	slli	r3,r2,3
 10139c8:	1acd883a 	add	r6,r3,r11
 10139cc:	31400217 	ldw	r5,8(r6)
 10139d0:	31405926 	beq	r6,r5,1013b38 <_free_r+0x2a4>
 10139d4:	28800117 	ldw	r2,4(r5)
 10139d8:	00ffff04 	movi	r3,-4
 10139dc:	10c4703a 	and	r2,r2,r3
 10139e0:	3880022e 	bgeu	r7,r2,10139ec <_free_r+0x158>
 10139e4:	29400217 	ldw	r5,8(r5)
 10139e8:	317ffa1e 	bne	r6,r5,10139d4 <_free_r+0x140>
 10139ec:	29800317 	ldw	r6,12(r5)
 10139f0:	41800315 	stw	r6,12(r8)
 10139f4:	41400215 	stw	r5,8(r8)
 10139f8:	8809883a 	mov	r4,r17
 10139fc:	2a000315 	stw	r8,12(r5)
 1013a00:	32000215 	stw	r8,8(r6)
 1013a04:	dfc00217 	ldw	ra,8(sp)
 1013a08:	dc400117 	ldw	r17,4(sp)
 1013a0c:	dc000017 	ldw	r16,0(sp)
 1013a10:	dec00304 	addi	sp,sp,12
 1013a14:	10196341 	jmpi	1019634 <__malloc_unlock>
 1013a18:	dfc00217 	ldw	ra,8(sp)
 1013a1c:	dc400117 	ldw	r17,4(sp)
 1013a20:	dc000017 	ldw	r16,0(sp)
 1013a24:	dec00304 	addi	sp,sp,12
 1013a28:	f800283a 	ret
 1013a2c:	31000217 	ldw	r4,8(r6)
 1013a30:	003fbd06 	br	1013928 <_free_r+0x94>
 1013a34:	3806d0fa 	srli	r3,r7,3
 1013a38:	00800044 	movi	r2,1
 1013a3c:	51400117 	ldw	r5,4(r10)
 1013a40:	180890fa 	slli	r4,r3,3
 1013a44:	1807d0ba 	srai	r3,r3,2
 1013a48:	22c9883a 	add	r4,r4,r11
 1013a4c:	21800217 	ldw	r6,8(r4)
 1013a50:	10c4983a 	sll	r2,r2,r3
 1013a54:	41000315 	stw	r4,12(r8)
 1013a58:	41800215 	stw	r6,8(r8)
 1013a5c:	288ab03a 	or	r5,r5,r2
 1013a60:	22000215 	stw	r8,8(r4)
 1013a64:	8809883a 	mov	r4,r17
 1013a68:	51400115 	stw	r5,4(r10)
 1013a6c:	32000315 	stw	r8,12(r6)
 1013a70:	dfc00217 	ldw	ra,8(sp)
 1013a74:	dc400117 	ldw	r17,4(sp)
 1013a78:	dc000017 	ldw	r16,0(sp)
 1013a7c:	dec00304 	addi	sp,sp,12
 1013a80:	10196341 	jmpi	1019634 <__malloc_unlock>
 1013a84:	2880004c 	andi	r2,r5,1
 1013a88:	3a4d883a 	add	r6,r7,r9
 1013a8c:	1000071e 	bne	r2,zero,1013aac <_free_r+0x218>
 1013a90:	80bffe17 	ldw	r2,-8(r16)
 1013a94:	4091c83a 	sub	r8,r8,r2
 1013a98:	41000317 	ldw	r4,12(r8)
 1013a9c:	40c00217 	ldw	r3,8(r8)
 1013aa0:	308d883a 	add	r6,r6,r2
 1013aa4:	20c00215 	stw	r3,8(r4)
 1013aa8:	19000315 	stw	r4,12(r3)
 1013aac:	008040f4 	movhi	r2,259
 1013ab0:	10a3ce04 	addi	r2,r2,-28872
 1013ab4:	11000017 	ldw	r4,0(r2)
 1013ab8:	30c00054 	ori	r3,r6,1
 1013abc:	52000215 	stw	r8,8(r10)
 1013ac0:	40c00115 	stw	r3,4(r8)
 1013ac4:	313fa036 	bltu	r6,r4,1013948 <_free_r+0xb4>
 1013ac8:	008040f4 	movhi	r2,259
 1013acc:	10a40c04 	addi	r2,r2,-28624
 1013ad0:	11400017 	ldw	r5,0(r2)
 1013ad4:	8809883a 	mov	r4,r17
 1013ad8:	10137680 	call	1013768 <_malloc_trim_r>
 1013adc:	003f9a06 	br	1013948 <_free_r+0xb4>
 1013ae0:	00800104 	movi	r2,4
 1013ae4:	10c0072e 	bgeu	r2,r3,1013b04 <_free_r+0x270>
 1013ae8:	00800504 	movi	r2,20
 1013aec:	10c01936 	bltu	r2,r3,1013b54 <_free_r+0x2c0>
 1013af0:	188016c4 	addi	r2,r3,91
 1013af4:	100690fa 	slli	r3,r2,3
 1013af8:	003fb306 	br	10139c8 <_free_r+0x134>
 1013afc:	01400044 	movi	r5,1
 1013b00:	003f7e06 	br	10138fc <_free_r+0x68>
 1013b04:	3804d1ba 	srli	r2,r7,6
 1013b08:	10800e04 	addi	r2,r2,56
 1013b0c:	100690fa 	slli	r3,r2,3
 1013b10:	003fad06 	br	10139c8 <_free_r+0x134>
 1013b14:	22000315 	stw	r8,12(r4)
 1013b18:	22000215 	stw	r8,8(r4)
 1013b1c:	3a05883a 	add	r2,r7,r8
 1013b20:	38c00054 	ori	r3,r7,1
 1013b24:	11c00015 	stw	r7,0(r2)
 1013b28:	41000215 	stw	r4,8(r8)
 1013b2c:	40c00115 	stw	r3,4(r8)
 1013b30:	41000315 	stw	r4,12(r8)
 1013b34:	003f8406 	br	1013948 <_free_r+0xb4>
 1013b38:	1005d0ba 	srai	r2,r2,2
 1013b3c:	00c00044 	movi	r3,1
 1013b40:	51000117 	ldw	r4,4(r10)
 1013b44:	1886983a 	sll	r3,r3,r2
 1013b48:	20c8b03a 	or	r4,r4,r3
 1013b4c:	51000115 	stw	r4,4(r10)
 1013b50:	003fa706 	br	10139f0 <_free_r+0x15c>
 1013b54:	00801504 	movi	r2,84
 1013b58:	10c00436 	bltu	r2,r3,1013b6c <_free_r+0x2d8>
 1013b5c:	3804d33a 	srli	r2,r7,12
 1013b60:	10801b84 	addi	r2,r2,110
 1013b64:	100690fa 	slli	r3,r2,3
 1013b68:	003f9706 	br	10139c8 <_free_r+0x134>
 1013b6c:	00805504 	movi	r2,340
 1013b70:	10c00436 	bltu	r2,r3,1013b84 <_free_r+0x2f0>
 1013b74:	3804d3fa 	srli	r2,r7,15
 1013b78:	10801dc4 	addi	r2,r2,119
 1013b7c:	100690fa 	slli	r3,r2,3
 1013b80:	003f9106 	br	10139c8 <_free_r+0x134>
 1013b84:	00815504 	movi	r2,1364
 1013b88:	10c0032e 	bgeu	r2,r3,1013b98 <_free_r+0x304>
 1013b8c:	00801f84 	movi	r2,126
 1013b90:	00c0fc04 	movi	r3,1008
 1013b94:	003f8c06 	br	10139c8 <_free_r+0x134>
 1013b98:	3804d4ba 	srli	r2,r7,18
 1013b9c:	10801f04 	addi	r2,r2,124
 1013ba0:	100690fa 	slli	r3,r2,3
 1013ba4:	003f8806 	br	10139c8 <_free_r+0x134>

01013ba8 <__sfvwrite_r>:
 1013ba8:	30800217 	ldw	r2,8(r6)
 1013bac:	defff504 	addi	sp,sp,-44
 1013bb0:	df000915 	stw	fp,36(sp)
 1013bb4:	dd800715 	stw	r22,28(sp)
 1013bb8:	dc800315 	stw	r18,12(sp)
 1013bbc:	dfc00a15 	stw	ra,40(sp)
 1013bc0:	ddc00815 	stw	r23,32(sp)
 1013bc4:	dd400615 	stw	r21,24(sp)
 1013bc8:	dd000515 	stw	r20,20(sp)
 1013bcc:	dcc00415 	stw	r19,16(sp)
 1013bd0:	dc400215 	stw	r17,8(sp)
 1013bd4:	dc000115 	stw	r16,4(sp)
 1013bd8:	302d883a 	mov	r22,r6
 1013bdc:	2039883a 	mov	fp,r4
 1013be0:	2825883a 	mov	r18,r5
 1013be4:	10001c26 	beq	r2,zero,1013c58 <__sfvwrite_r+0xb0>
 1013be8:	29c0030b 	ldhu	r7,12(r5)
 1013bec:	3880020c 	andi	r2,r7,8
 1013bf0:	10002726 	beq	r2,zero,1013c90 <__sfvwrite_r+0xe8>
 1013bf4:	28800417 	ldw	r2,16(r5)
 1013bf8:	10002526 	beq	r2,zero,1013c90 <__sfvwrite_r+0xe8>
 1013bfc:	3880008c 	andi	r2,r7,2
 1013c00:	b5400017 	ldw	r21,0(r22)
 1013c04:	10002826 	beq	r2,zero,1013ca8 <__sfvwrite_r+0x100>
 1013c08:	0021883a 	mov	r16,zero
 1013c0c:	0023883a 	mov	r17,zero
 1013c10:	880d883a 	mov	r6,r17
 1013c14:	e009883a 	mov	r4,fp
 1013c18:	00810004 	movi	r2,1024
 1013c1c:	80006e26 	beq	r16,zero,1013dd8 <__sfvwrite_r+0x230>
 1013c20:	800f883a 	mov	r7,r16
 1013c24:	91400717 	ldw	r5,28(r18)
 1013c28:	1400012e 	bgeu	r2,r16,1013c30 <__sfvwrite_r+0x88>
 1013c2c:	100f883a 	mov	r7,r2
 1013c30:	90c00917 	ldw	r3,36(r18)
 1013c34:	183ee83a 	callr	r3
 1013c38:	1007883a 	mov	r3,r2
 1013c3c:	80a1c83a 	sub	r16,r16,r2
 1013c40:	88a3883a 	add	r17,r17,r2
 1013c44:	00806d0e 	bge	zero,r2,1013dfc <__sfvwrite_r+0x254>
 1013c48:	b0800217 	ldw	r2,8(r22)
 1013c4c:	10c5c83a 	sub	r2,r2,r3
 1013c50:	b0800215 	stw	r2,8(r22)
 1013c54:	103fee1e 	bne	r2,zero,1013c10 <__sfvwrite_r+0x68>
 1013c58:	0009883a 	mov	r4,zero
 1013c5c:	2005883a 	mov	r2,r4
 1013c60:	dfc00a17 	ldw	ra,40(sp)
 1013c64:	df000917 	ldw	fp,36(sp)
 1013c68:	ddc00817 	ldw	r23,32(sp)
 1013c6c:	dd800717 	ldw	r22,28(sp)
 1013c70:	dd400617 	ldw	r21,24(sp)
 1013c74:	dd000517 	ldw	r20,20(sp)
 1013c78:	dcc00417 	ldw	r19,16(sp)
 1013c7c:	dc800317 	ldw	r18,12(sp)
 1013c80:	dc400217 	ldw	r17,8(sp)
 1013c84:	dc000117 	ldw	r16,4(sp)
 1013c88:	dec00b04 	addi	sp,sp,44
 1013c8c:	f800283a 	ret
 1013c90:	10119100 	call	1011910 <__swsetup_r>
 1013c94:	1000e41e 	bne	r2,zero,1014028 <__sfvwrite_r+0x480>
 1013c98:	91c0030b 	ldhu	r7,12(r18)
 1013c9c:	b5400017 	ldw	r21,0(r22)
 1013ca0:	3880008c 	andi	r2,r7,2
 1013ca4:	103fd81e 	bne	r2,zero,1013c08 <__sfvwrite_r+0x60>
 1013ca8:	3880004c 	andi	r2,r7,1
 1013cac:	1005003a 	cmpeq	r2,r2,zero
 1013cb0:	10005726 	beq	r2,zero,1013e10 <__sfvwrite_r+0x268>
 1013cb4:	0029883a 	mov	r20,zero
 1013cb8:	002f883a 	mov	r23,zero
 1013cbc:	a0004226 	beq	r20,zero,1013dc8 <__sfvwrite_r+0x220>
 1013cc0:	3880800c 	andi	r2,r7,512
 1013cc4:	94000217 	ldw	r16,8(r18)
 1013cc8:	10008b26 	beq	r2,zero,1013ef8 <__sfvwrite_r+0x350>
 1013ccc:	800d883a 	mov	r6,r16
 1013cd0:	a400a536 	bltu	r20,r16,1013f68 <__sfvwrite_r+0x3c0>
 1013cd4:	3881200c 	andi	r2,r7,1152
 1013cd8:	10002726 	beq	r2,zero,1013d78 <__sfvwrite_r+0x1d0>
 1013cdc:	90800517 	ldw	r2,20(r18)
 1013ce0:	92000417 	ldw	r8,16(r18)
 1013ce4:	91400017 	ldw	r5,0(r18)
 1013ce8:	1087883a 	add	r3,r2,r2
 1013cec:	1887883a 	add	r3,r3,r2
 1013cf0:	1808d7fa 	srli	r4,r3,31
 1013cf4:	2a21c83a 	sub	r16,r5,r8
 1013cf8:	80800044 	addi	r2,r16,1
 1013cfc:	20c9883a 	add	r4,r4,r3
 1013d00:	2027d07a 	srai	r19,r4,1
 1013d04:	a085883a 	add	r2,r20,r2
 1013d08:	980d883a 	mov	r6,r19
 1013d0c:	9880022e 	bgeu	r19,r2,1013d18 <__sfvwrite_r+0x170>
 1013d10:	1027883a 	mov	r19,r2
 1013d14:	100d883a 	mov	r6,r2
 1013d18:	3881000c 	andi	r2,r7,1024
 1013d1c:	1000b826 	beq	r2,zero,1014000 <__sfvwrite_r+0x458>
 1013d20:	300b883a 	mov	r5,r6
 1013d24:	e009883a 	mov	r4,fp
 1013d28:	100e4b40 	call	100e4b4 <_malloc_r>
 1013d2c:	10003126 	beq	r2,zero,1013df4 <__sfvwrite_r+0x24c>
 1013d30:	91400417 	ldw	r5,16(r18)
 1013d34:	1009883a 	mov	r4,r2
 1013d38:	800d883a 	mov	r6,r16
 1013d3c:	1023883a 	mov	r17,r2
 1013d40:	100ed4c0 	call	100ed4c <memcpy>
 1013d44:	90c0030b 	ldhu	r3,12(r18)
 1013d48:	00beffc4 	movi	r2,-1025
 1013d4c:	1886703a 	and	r3,r3,r2
 1013d50:	18c02014 	ori	r3,r3,128
 1013d54:	90c0030d 	sth	r3,12(r18)
 1013d58:	9c07c83a 	sub	r3,r19,r16
 1013d5c:	8c05883a 	add	r2,r17,r16
 1013d60:	a00d883a 	mov	r6,r20
 1013d64:	a021883a 	mov	r16,r20
 1013d68:	90800015 	stw	r2,0(r18)
 1013d6c:	90c00215 	stw	r3,8(r18)
 1013d70:	94400415 	stw	r17,16(r18)
 1013d74:	94c00515 	stw	r19,20(r18)
 1013d78:	91000017 	ldw	r4,0(r18)
 1013d7c:	b80b883a 	mov	r5,r23
 1013d80:	a023883a 	mov	r17,r20
 1013d84:	100edec0 	call	100edec <memmove>
 1013d88:	90c00217 	ldw	r3,8(r18)
 1013d8c:	90800017 	ldw	r2,0(r18)
 1013d90:	a027883a 	mov	r19,r20
 1013d94:	1c07c83a 	sub	r3,r3,r16
 1013d98:	1405883a 	add	r2,r2,r16
 1013d9c:	90c00215 	stw	r3,8(r18)
 1013da0:	a021883a 	mov	r16,r20
 1013da4:	90800015 	stw	r2,0(r18)
 1013da8:	b0800217 	ldw	r2,8(r22)
 1013dac:	1405c83a 	sub	r2,r2,r16
 1013db0:	b0800215 	stw	r2,8(r22)
 1013db4:	103fa826 	beq	r2,zero,1013c58 <__sfvwrite_r+0xb0>
 1013db8:	a469c83a 	sub	r20,r20,r17
 1013dbc:	91c0030b 	ldhu	r7,12(r18)
 1013dc0:	bcef883a 	add	r23,r23,r19
 1013dc4:	a03fbe1e 	bne	r20,zero,1013cc0 <__sfvwrite_r+0x118>
 1013dc8:	adc00017 	ldw	r23,0(r21)
 1013dcc:	ad000117 	ldw	r20,4(r21)
 1013dd0:	ad400204 	addi	r21,r21,8
 1013dd4:	003fb906 	br	1013cbc <__sfvwrite_r+0x114>
 1013dd8:	ac400017 	ldw	r17,0(r21)
 1013ddc:	ac000117 	ldw	r16,4(r21)
 1013de0:	ad400204 	addi	r21,r21,8
 1013de4:	003f8a06 	br	1013c10 <__sfvwrite_r+0x68>
 1013de8:	91400417 	ldw	r5,16(r18)
 1013dec:	e009883a 	mov	r4,fp
 1013df0:	10138940 	call	1013894 <_free_r>
 1013df4:	00800304 	movi	r2,12
 1013df8:	e0800015 	stw	r2,0(fp)
 1013dfc:	9080030b 	ldhu	r2,12(r18)
 1013e00:	013fffc4 	movi	r4,-1
 1013e04:	10801014 	ori	r2,r2,64
 1013e08:	9080030d 	sth	r2,12(r18)
 1013e0c:	003f9306 	br	1013c5c <__sfvwrite_r+0xb4>
 1013e10:	0027883a 	mov	r19,zero
 1013e14:	002f883a 	mov	r23,zero
 1013e18:	d8000015 	stw	zero,0(sp)
 1013e1c:	0029883a 	mov	r20,zero
 1013e20:	98001e26 	beq	r19,zero,1013e9c <__sfvwrite_r+0x2f4>
 1013e24:	d8c00017 	ldw	r3,0(sp)
 1013e28:	1804c03a 	cmpne	r2,r3,zero
 1013e2c:	10005e26 	beq	r2,zero,1013fa8 <__sfvwrite_r+0x400>
 1013e30:	9821883a 	mov	r16,r19
 1013e34:	a4c0012e 	bgeu	r20,r19,1013e3c <__sfvwrite_r+0x294>
 1013e38:	a021883a 	mov	r16,r20
 1013e3c:	91000017 	ldw	r4,0(r18)
 1013e40:	90800417 	ldw	r2,16(r18)
 1013e44:	91800217 	ldw	r6,8(r18)
 1013e48:	91c00517 	ldw	r7,20(r18)
 1013e4c:	1100022e 	bgeu	r2,r4,1013e58 <__sfvwrite_r+0x2b0>
 1013e50:	31e3883a 	add	r17,r6,r7
 1013e54:	8c001616 	blt	r17,r16,1013eb0 <__sfvwrite_r+0x308>
 1013e58:	81c03816 	blt	r16,r7,1013f3c <__sfvwrite_r+0x394>
 1013e5c:	90c00917 	ldw	r3,36(r18)
 1013e60:	91400717 	ldw	r5,28(r18)
 1013e64:	e009883a 	mov	r4,fp
 1013e68:	b80d883a 	mov	r6,r23
 1013e6c:	183ee83a 	callr	r3
 1013e70:	1023883a 	mov	r17,r2
 1013e74:	00bfe10e 	bge	zero,r2,1013dfc <__sfvwrite_r+0x254>
 1013e78:	a469c83a 	sub	r20,r20,r17
 1013e7c:	a0001826 	beq	r20,zero,1013ee0 <__sfvwrite_r+0x338>
 1013e80:	b0800217 	ldw	r2,8(r22)
 1013e84:	1445c83a 	sub	r2,r2,r17
 1013e88:	b0800215 	stw	r2,8(r22)
 1013e8c:	103f7226 	beq	r2,zero,1013c58 <__sfvwrite_r+0xb0>
 1013e90:	9c67c83a 	sub	r19,r19,r17
 1013e94:	bc6f883a 	add	r23,r23,r17
 1013e98:	983fe21e 	bne	r19,zero,1013e24 <__sfvwrite_r+0x27c>
 1013e9c:	adc00017 	ldw	r23,0(r21)
 1013ea0:	acc00117 	ldw	r19,4(r21)
 1013ea4:	ad400204 	addi	r21,r21,8
 1013ea8:	d8000015 	stw	zero,0(sp)
 1013eac:	003fdc06 	br	1013e20 <__sfvwrite_r+0x278>
 1013eb0:	b80b883a 	mov	r5,r23
 1013eb4:	880d883a 	mov	r6,r17
 1013eb8:	100edec0 	call	100edec <memmove>
 1013ebc:	90c00017 	ldw	r3,0(r18)
 1013ec0:	e009883a 	mov	r4,fp
 1013ec4:	900b883a 	mov	r5,r18
 1013ec8:	1c47883a 	add	r3,r3,r17
 1013ecc:	90c00015 	stw	r3,0(r18)
 1013ed0:	10132440 	call	1013244 <_fflush_r>
 1013ed4:	103fc91e 	bne	r2,zero,1013dfc <__sfvwrite_r+0x254>
 1013ed8:	a469c83a 	sub	r20,r20,r17
 1013edc:	a03fe81e 	bne	r20,zero,1013e80 <__sfvwrite_r+0x2d8>
 1013ee0:	e009883a 	mov	r4,fp
 1013ee4:	900b883a 	mov	r5,r18
 1013ee8:	10132440 	call	1013244 <_fflush_r>
 1013eec:	103fc31e 	bne	r2,zero,1013dfc <__sfvwrite_r+0x254>
 1013ef0:	d8000015 	stw	zero,0(sp)
 1013ef4:	003fe206 	br	1013e80 <__sfvwrite_r+0x2d8>
 1013ef8:	91000017 	ldw	r4,0(r18)
 1013efc:	90800417 	ldw	r2,16(r18)
 1013f00:	1100022e 	bgeu	r2,r4,1013f0c <__sfvwrite_r+0x364>
 1013f04:	8023883a 	mov	r17,r16
 1013f08:	85003136 	bltu	r16,r20,1013fd0 <__sfvwrite_r+0x428>
 1013f0c:	91c00517 	ldw	r7,20(r18)
 1013f10:	a1c01836 	bltu	r20,r7,1013f74 <__sfvwrite_r+0x3cc>
 1013f14:	90c00917 	ldw	r3,36(r18)
 1013f18:	91400717 	ldw	r5,28(r18)
 1013f1c:	e009883a 	mov	r4,fp
 1013f20:	b80d883a 	mov	r6,r23
 1013f24:	183ee83a 	callr	r3
 1013f28:	1021883a 	mov	r16,r2
 1013f2c:	00bfb30e 	bge	zero,r2,1013dfc <__sfvwrite_r+0x254>
 1013f30:	1023883a 	mov	r17,r2
 1013f34:	1027883a 	mov	r19,r2
 1013f38:	003f9b06 	br	1013da8 <__sfvwrite_r+0x200>
 1013f3c:	b80b883a 	mov	r5,r23
 1013f40:	800d883a 	mov	r6,r16
 1013f44:	100edec0 	call	100edec <memmove>
 1013f48:	90c00217 	ldw	r3,8(r18)
 1013f4c:	90800017 	ldw	r2,0(r18)
 1013f50:	8023883a 	mov	r17,r16
 1013f54:	1c07c83a 	sub	r3,r3,r16
 1013f58:	1405883a 	add	r2,r2,r16
 1013f5c:	90c00215 	stw	r3,8(r18)
 1013f60:	90800015 	stw	r2,0(r18)
 1013f64:	003fc406 	br	1013e78 <__sfvwrite_r+0x2d0>
 1013f68:	a00d883a 	mov	r6,r20
 1013f6c:	a021883a 	mov	r16,r20
 1013f70:	003f8106 	br	1013d78 <__sfvwrite_r+0x1d0>
 1013f74:	b80b883a 	mov	r5,r23
 1013f78:	a00d883a 	mov	r6,r20
 1013f7c:	100edec0 	call	100edec <memmove>
 1013f80:	90c00217 	ldw	r3,8(r18)
 1013f84:	90800017 	ldw	r2,0(r18)
 1013f88:	a021883a 	mov	r16,r20
 1013f8c:	1d07c83a 	sub	r3,r3,r20
 1013f90:	1505883a 	add	r2,r2,r20
 1013f94:	a023883a 	mov	r17,r20
 1013f98:	a027883a 	mov	r19,r20
 1013f9c:	90c00215 	stw	r3,8(r18)
 1013fa0:	90800015 	stw	r2,0(r18)
 1013fa4:	003f8006 	br	1013da8 <__sfvwrite_r+0x200>
 1013fa8:	b809883a 	mov	r4,r23
 1013fac:	01400284 	movi	r5,10
 1013fb0:	980d883a 	mov	r6,r19
 1013fb4:	100ebf40 	call	100ebf4 <memchr>
 1013fb8:	10001726 	beq	r2,zero,1014018 <__sfvwrite_r+0x470>
 1013fbc:	15c5c83a 	sub	r2,r2,r23
 1013fc0:	15000044 	addi	r20,r2,1
 1013fc4:	00800044 	movi	r2,1
 1013fc8:	d8800015 	stw	r2,0(sp)
 1013fcc:	003f9806 	br	1013e30 <__sfvwrite_r+0x288>
 1013fd0:	b80b883a 	mov	r5,r23
 1013fd4:	800d883a 	mov	r6,r16
 1013fd8:	100edec0 	call	100edec <memmove>
 1013fdc:	90c00017 	ldw	r3,0(r18)
 1013fe0:	e009883a 	mov	r4,fp
 1013fe4:	900b883a 	mov	r5,r18
 1013fe8:	1c07883a 	add	r3,r3,r16
 1013fec:	90c00015 	stw	r3,0(r18)
 1013ff0:	8027883a 	mov	r19,r16
 1013ff4:	10132440 	call	1013244 <_fflush_r>
 1013ff8:	103f6b26 	beq	r2,zero,1013da8 <__sfvwrite_r+0x200>
 1013ffc:	003f7f06 	br	1013dfc <__sfvwrite_r+0x254>
 1014000:	400b883a 	mov	r5,r8
 1014004:	e009883a 	mov	r4,fp
 1014008:	10154a80 	call	10154a8 <_realloc_r>
 101400c:	103f7626 	beq	r2,zero,1013de8 <__sfvwrite_r+0x240>
 1014010:	1023883a 	mov	r17,r2
 1014014:	003f5006 	br	1013d58 <__sfvwrite_r+0x1b0>
 1014018:	00c00044 	movi	r3,1
 101401c:	9d000044 	addi	r20,r19,1
 1014020:	d8c00015 	stw	r3,0(sp)
 1014024:	003f8206 	br	1013e30 <__sfvwrite_r+0x288>
 1014028:	9080030b 	ldhu	r2,12(r18)
 101402c:	00c00244 	movi	r3,9
 1014030:	013fffc4 	movi	r4,-1
 1014034:	10801014 	ori	r2,r2,64
 1014038:	9080030d 	sth	r2,12(r18)
 101403c:	e0c00015 	stw	r3,0(fp)
 1014040:	003f0606 	br	1013c5c <__sfvwrite_r+0xb4>

01014044 <_fwalk_reent>:
 1014044:	defff704 	addi	sp,sp,-36
 1014048:	dcc00315 	stw	r19,12(sp)
 101404c:	24c0b804 	addi	r19,r4,736
 1014050:	dd800615 	stw	r22,24(sp)
 1014054:	dd400515 	stw	r21,20(sp)
 1014058:	dfc00815 	stw	ra,32(sp)
 101405c:	ddc00715 	stw	r23,28(sp)
 1014060:	dd000415 	stw	r20,16(sp)
 1014064:	dc800215 	stw	r18,8(sp)
 1014068:	dc400115 	stw	r17,4(sp)
 101406c:	dc000015 	stw	r16,0(sp)
 1014070:	202b883a 	mov	r21,r4
 1014074:	282d883a 	mov	r22,r5
 1014078:	10134cc0 	call	10134cc <__sfp_lock_acquire>
 101407c:	98002126 	beq	r19,zero,1014104 <_fwalk_reent+0xc0>
 1014080:	002f883a 	mov	r23,zero
 1014084:	9c800117 	ldw	r18,4(r19)
 1014088:	9c000217 	ldw	r16,8(r19)
 101408c:	90bfffc4 	addi	r2,r18,-1
 1014090:	10000d16 	blt	r2,zero,10140c8 <_fwalk_reent+0x84>
 1014094:	0023883a 	mov	r17,zero
 1014098:	053fffc4 	movi	r20,-1
 101409c:	8080030f 	ldh	r2,12(r16)
 10140a0:	8c400044 	addi	r17,r17,1
 10140a4:	10000626 	beq	r2,zero,10140c0 <_fwalk_reent+0x7c>
 10140a8:	8080038f 	ldh	r2,14(r16)
 10140ac:	800b883a 	mov	r5,r16
 10140b0:	a809883a 	mov	r4,r21
 10140b4:	15000226 	beq	r2,r20,10140c0 <_fwalk_reent+0x7c>
 10140b8:	b03ee83a 	callr	r22
 10140bc:	b8aeb03a 	or	r23,r23,r2
 10140c0:	84001704 	addi	r16,r16,92
 10140c4:	947ff51e 	bne	r18,r17,101409c <_fwalk_reent+0x58>
 10140c8:	9cc00017 	ldw	r19,0(r19)
 10140cc:	983fed1e 	bne	r19,zero,1014084 <_fwalk_reent+0x40>
 10140d0:	10134d00 	call	10134d0 <__sfp_lock_release>
 10140d4:	b805883a 	mov	r2,r23
 10140d8:	dfc00817 	ldw	ra,32(sp)
 10140dc:	ddc00717 	ldw	r23,28(sp)
 10140e0:	dd800617 	ldw	r22,24(sp)
 10140e4:	dd400517 	ldw	r21,20(sp)
 10140e8:	dd000417 	ldw	r20,16(sp)
 10140ec:	dcc00317 	ldw	r19,12(sp)
 10140f0:	dc800217 	ldw	r18,8(sp)
 10140f4:	dc400117 	ldw	r17,4(sp)
 10140f8:	dc000017 	ldw	r16,0(sp)
 10140fc:	dec00904 	addi	sp,sp,36
 1014100:	f800283a 	ret
 1014104:	002f883a 	mov	r23,zero
 1014108:	003ff106 	br	10140d0 <_fwalk_reent+0x8c>

0101410c <_fwalk>:
 101410c:	defff804 	addi	sp,sp,-32
 1014110:	dcc00315 	stw	r19,12(sp)
 1014114:	24c0b804 	addi	r19,r4,736
 1014118:	dd400515 	stw	r21,20(sp)
 101411c:	dfc00715 	stw	ra,28(sp)
 1014120:	dd800615 	stw	r22,24(sp)
 1014124:	dd000415 	stw	r20,16(sp)
 1014128:	dc800215 	stw	r18,8(sp)
 101412c:	dc400115 	stw	r17,4(sp)
 1014130:	dc000015 	stw	r16,0(sp)
 1014134:	282b883a 	mov	r21,r5
 1014138:	10134cc0 	call	10134cc <__sfp_lock_acquire>
 101413c:	98001f26 	beq	r19,zero,10141bc <_fwalk+0xb0>
 1014140:	002d883a 	mov	r22,zero
 1014144:	9c800117 	ldw	r18,4(r19)
 1014148:	9c000217 	ldw	r16,8(r19)
 101414c:	90bfffc4 	addi	r2,r18,-1
 1014150:	10000c16 	blt	r2,zero,1014184 <_fwalk+0x78>
 1014154:	0023883a 	mov	r17,zero
 1014158:	053fffc4 	movi	r20,-1
 101415c:	8080030f 	ldh	r2,12(r16)
 1014160:	8c400044 	addi	r17,r17,1
 1014164:	10000526 	beq	r2,zero,101417c <_fwalk+0x70>
 1014168:	8080038f 	ldh	r2,14(r16)
 101416c:	8009883a 	mov	r4,r16
 1014170:	15000226 	beq	r2,r20,101417c <_fwalk+0x70>
 1014174:	a83ee83a 	callr	r21
 1014178:	b0acb03a 	or	r22,r22,r2
 101417c:	84001704 	addi	r16,r16,92
 1014180:	947ff61e 	bne	r18,r17,101415c <_fwalk+0x50>
 1014184:	9cc00017 	ldw	r19,0(r19)
 1014188:	983fee1e 	bne	r19,zero,1014144 <_fwalk+0x38>
 101418c:	10134d00 	call	10134d0 <__sfp_lock_release>
 1014190:	b005883a 	mov	r2,r22
 1014194:	dfc00717 	ldw	ra,28(sp)
 1014198:	dd800617 	ldw	r22,24(sp)
 101419c:	dd400517 	ldw	r21,20(sp)
 10141a0:	dd000417 	ldw	r20,16(sp)
 10141a4:	dcc00317 	ldw	r19,12(sp)
 10141a8:	dc800217 	ldw	r18,8(sp)
 10141ac:	dc400117 	ldw	r17,4(sp)
 10141b0:	dc000017 	ldw	r16,0(sp)
 10141b4:	dec00804 	addi	sp,sp,32
 10141b8:	f800283a 	ret
 10141bc:	002d883a 	mov	r22,zero
 10141c0:	003ff206 	br	101418c <_fwalk+0x80>

010141c4 <__locale_charset>:
 10141c4:	d0a06917 	ldw	r2,-32348(gp)
 10141c8:	f800283a 	ret

010141cc <_localeconv_r>:
 10141cc:	008040b4 	movhi	r2,258
 10141d0:	109b8b04 	addi	r2,r2,28204
 10141d4:	f800283a 	ret

010141d8 <localeconv>:
 10141d8:	008040f4 	movhi	r2,259
 10141dc:	10a3d104 	addi	r2,r2,-28860
 10141e0:	11000017 	ldw	r4,0(r2)
 10141e4:	10141cc1 	jmpi	10141cc <_localeconv_r>

010141e8 <_setlocale_r>:
 10141e8:	defffc04 	addi	sp,sp,-16
 10141ec:	00c040b4 	movhi	r3,258
 10141f0:	18db8604 	addi	r3,r3,28184
 10141f4:	dc800215 	stw	r18,8(sp)
 10141f8:	dc400115 	stw	r17,4(sp)
 10141fc:	dc000015 	stw	r16,0(sp)
 1014200:	2023883a 	mov	r17,r4
 1014204:	2825883a 	mov	r18,r5
 1014208:	dfc00315 	stw	ra,12(sp)
 101420c:	3021883a 	mov	r16,r6
 1014210:	3009883a 	mov	r4,r6
 1014214:	180b883a 	mov	r5,r3
 1014218:	30000926 	beq	r6,zero,1014240 <_setlocale_r+0x58>
 101421c:	1015c580 	call	1015c58 <strcmp>
 1014220:	8009883a 	mov	r4,r16
 1014224:	014040b4 	movhi	r5,258
 1014228:	295ad104 	addi	r5,r5,27460
 101422c:	10000b1e 	bne	r2,zero,101425c <_setlocale_r+0x74>
 1014230:	8c000d15 	stw	r16,52(r17)
 1014234:	8c800c15 	stw	r18,48(r17)
 1014238:	00c040b4 	movhi	r3,258
 101423c:	18db8604 	addi	r3,r3,28184
 1014240:	1805883a 	mov	r2,r3
 1014244:	dfc00317 	ldw	ra,12(sp)
 1014248:	dc800217 	ldw	r18,8(sp)
 101424c:	dc400117 	ldw	r17,4(sp)
 1014250:	dc000017 	ldw	r16,0(sp)
 1014254:	dec00404 	addi	sp,sp,16
 1014258:	f800283a 	ret
 101425c:	1015c580 	call	1015c58 <strcmp>
 1014260:	0007883a 	mov	r3,zero
 1014264:	103ff226 	beq	r2,zero,1014230 <_setlocale_r+0x48>
 1014268:	003ff506 	br	1014240 <_setlocale_r+0x58>

0101426c <setlocale>:
 101426c:	018040f4 	movhi	r6,259
 1014270:	31a3d104 	addi	r6,r6,-28860
 1014274:	2007883a 	mov	r3,r4
 1014278:	31000017 	ldw	r4,0(r6)
 101427c:	280d883a 	mov	r6,r5
 1014280:	180b883a 	mov	r5,r3
 1014284:	10141e81 	jmpi	10141e8 <_setlocale_r>

01014288 <__smakebuf_r>:
 1014288:	2880030b 	ldhu	r2,12(r5)
 101428c:	deffed04 	addi	sp,sp,-76
 1014290:	dc401015 	stw	r17,64(sp)
 1014294:	1080008c 	andi	r2,r2,2
 1014298:	dc000f15 	stw	r16,60(sp)
 101429c:	dfc01215 	stw	ra,72(sp)
 10142a0:	dc801115 	stw	r18,68(sp)
 10142a4:	2821883a 	mov	r16,r5
 10142a8:	2023883a 	mov	r17,r4
 10142ac:	10000b26 	beq	r2,zero,10142dc <__smakebuf_r+0x54>
 10142b0:	28c010c4 	addi	r3,r5,67
 10142b4:	00800044 	movi	r2,1
 10142b8:	28800515 	stw	r2,20(r5)
 10142bc:	28c00415 	stw	r3,16(r5)
 10142c0:	28c00015 	stw	r3,0(r5)
 10142c4:	dfc01217 	ldw	ra,72(sp)
 10142c8:	dc801117 	ldw	r18,68(sp)
 10142cc:	dc401017 	ldw	r17,64(sp)
 10142d0:	dc000f17 	ldw	r16,60(sp)
 10142d4:	dec01304 	addi	sp,sp,76
 10142d8:	f800283a 	ret
 10142dc:	2940038f 	ldh	r5,14(r5)
 10142e0:	28002116 	blt	r5,zero,1014368 <__smakebuf_r+0xe0>
 10142e4:	d80d883a 	mov	r6,sp
 10142e8:	1015fe80 	call	1015fe8 <_fstat_r>
 10142ec:	10001e16 	blt	r2,zero,1014368 <__smakebuf_r+0xe0>
 10142f0:	d8800117 	ldw	r2,4(sp)
 10142f4:	00e00014 	movui	r3,32768
 10142f8:	113c000c 	andi	r4,r2,61440
 10142fc:	20c03126 	beq	r4,r3,10143c4 <__smakebuf_r+0x13c>
 1014300:	8080030b 	ldhu	r2,12(r16)
 1014304:	00c80004 	movi	r3,8192
 1014308:	10820014 	ori	r2,r2,2048
 101430c:	8080030d 	sth	r2,12(r16)
 1014310:	20c01e26 	beq	r4,r3,101438c <__smakebuf_r+0x104>
 1014314:	04810004 	movi	r18,1024
 1014318:	8809883a 	mov	r4,r17
 101431c:	900b883a 	mov	r5,r18
 1014320:	100e4b40 	call	100e4b4 <_malloc_r>
 1014324:	1009883a 	mov	r4,r2
 1014328:	10003126 	beq	r2,zero,10143f0 <__smakebuf_r+0x168>
 101432c:	80c0030b 	ldhu	r3,12(r16)
 1014330:	00804074 	movhi	r2,257
 1014334:	108d7004 	addi	r2,r2,13760
 1014338:	88800f15 	stw	r2,60(r17)
 101433c:	18c02014 	ori	r3,r3,128
 1014340:	84800515 	stw	r18,20(r16)
 1014344:	80c0030d 	sth	r3,12(r16)
 1014348:	81000415 	stw	r4,16(r16)
 101434c:	81000015 	stw	r4,0(r16)
 1014350:	dfc01217 	ldw	ra,72(sp)
 1014354:	dc801117 	ldw	r18,68(sp)
 1014358:	dc401017 	ldw	r17,64(sp)
 101435c:	dc000f17 	ldw	r16,60(sp)
 1014360:	dec01304 	addi	sp,sp,76
 1014364:	f800283a 	ret
 1014368:	80c0030b 	ldhu	r3,12(r16)
 101436c:	1880200c 	andi	r2,r3,128
 1014370:	10000426 	beq	r2,zero,1014384 <__smakebuf_r+0xfc>
 1014374:	04801004 	movi	r18,64
 1014378:	18820014 	ori	r2,r3,2048
 101437c:	8080030d 	sth	r2,12(r16)
 1014380:	003fe506 	br	1014318 <__smakebuf_r+0x90>
 1014384:	04810004 	movi	r18,1024
 1014388:	003ffb06 	br	1014378 <__smakebuf_r+0xf0>
 101438c:	8140038f 	ldh	r5,14(r16)
 1014390:	8809883a 	mov	r4,r17
 1014394:	101605c0 	call	101605c <_isatty_r>
 1014398:	103fde26 	beq	r2,zero,1014314 <__smakebuf_r+0x8c>
 101439c:	8080030b 	ldhu	r2,12(r16)
 10143a0:	80c010c4 	addi	r3,r16,67
 10143a4:	04810004 	movi	r18,1024
 10143a8:	10800054 	ori	r2,r2,1
 10143ac:	8080030d 	sth	r2,12(r16)
 10143b0:	00800044 	movi	r2,1
 10143b4:	80c00415 	stw	r3,16(r16)
 10143b8:	80800515 	stw	r2,20(r16)
 10143bc:	80c00015 	stw	r3,0(r16)
 10143c0:	003fd506 	br	1014318 <__smakebuf_r+0x90>
 10143c4:	80c00a17 	ldw	r3,40(r16)
 10143c8:	00804074 	movhi	r2,257
 10143cc:	1096c504 	addi	r2,r2,23316
 10143d0:	18bfcb1e 	bne	r3,r2,1014300 <__smakebuf_r+0x78>
 10143d4:	8080030b 	ldhu	r2,12(r16)
 10143d8:	00c10004 	movi	r3,1024
 10143dc:	1825883a 	mov	r18,r3
 10143e0:	10c4b03a 	or	r2,r2,r3
 10143e4:	8080030d 	sth	r2,12(r16)
 10143e8:	80c01315 	stw	r3,76(r16)
 10143ec:	003fca06 	br	1014318 <__smakebuf_r+0x90>
 10143f0:	8100030b 	ldhu	r4,12(r16)
 10143f4:	2080800c 	andi	r2,r4,512
 10143f8:	103fb21e 	bne	r2,zero,10142c4 <__smakebuf_r+0x3c>
 10143fc:	80c010c4 	addi	r3,r16,67
 1014400:	21000094 	ori	r4,r4,2
 1014404:	00800044 	movi	r2,1
 1014408:	80800515 	stw	r2,20(r16)
 101440c:	8100030d 	sth	r4,12(r16)
 1014410:	80c00415 	stw	r3,16(r16)
 1014414:	80c00015 	stw	r3,0(r16)
 1014418:	003faa06 	br	10142c4 <__smakebuf_r+0x3c>

0101441c <_Bfree>:
 101441c:	28000826 	beq	r5,zero,1014440 <_Bfree+0x24>
 1014420:	28800117 	ldw	r2,4(r5)
 1014424:	21001317 	ldw	r4,76(r4)
 1014428:	1085883a 	add	r2,r2,r2
 101442c:	1085883a 	add	r2,r2,r2
 1014430:	1105883a 	add	r2,r2,r4
 1014434:	10c00017 	ldw	r3,0(r2)
 1014438:	28c00015 	stw	r3,0(r5)
 101443c:	11400015 	stw	r5,0(r2)
 1014440:	f800283a 	ret

01014444 <__hi0bits>:
 1014444:	20bfffec 	andhi	r2,r4,65535
 1014448:	10001426 	beq	r2,zero,101449c <__hi0bits+0x58>
 101444c:	0007883a 	mov	r3,zero
 1014450:	20bfc02c 	andhi	r2,r4,65280
 1014454:	1000021e 	bne	r2,zero,1014460 <__hi0bits+0x1c>
 1014458:	2008923a 	slli	r4,r4,8
 101445c:	18c00204 	addi	r3,r3,8
 1014460:	20bc002c 	andhi	r2,r4,61440
 1014464:	1000021e 	bne	r2,zero,1014470 <__hi0bits+0x2c>
 1014468:	2008913a 	slli	r4,r4,4
 101446c:	18c00104 	addi	r3,r3,4
 1014470:	20b0002c 	andhi	r2,r4,49152
 1014474:	1000031e 	bne	r2,zero,1014484 <__hi0bits+0x40>
 1014478:	2105883a 	add	r2,r4,r4
 101447c:	18c00084 	addi	r3,r3,2
 1014480:	1089883a 	add	r4,r2,r2
 1014484:	20000316 	blt	r4,zero,1014494 <__hi0bits+0x50>
 1014488:	2090002c 	andhi	r2,r4,16384
 101448c:	10000626 	beq	r2,zero,10144a8 <__hi0bits+0x64>
 1014490:	18c00044 	addi	r3,r3,1
 1014494:	1805883a 	mov	r2,r3
 1014498:	f800283a 	ret
 101449c:	2008943a 	slli	r4,r4,16
 10144a0:	00c00404 	movi	r3,16
 10144a4:	003fea06 	br	1014450 <__hi0bits+0xc>
 10144a8:	00c00804 	movi	r3,32
 10144ac:	1805883a 	mov	r2,r3
 10144b0:	f800283a 	ret

010144b4 <__lo0bits>:
 10144b4:	20c00017 	ldw	r3,0(r4)
 10144b8:	188001cc 	andi	r2,r3,7
 10144bc:	10000a26 	beq	r2,zero,10144e8 <__lo0bits+0x34>
 10144c0:	1880004c 	andi	r2,r3,1
 10144c4:	1005003a 	cmpeq	r2,r2,zero
 10144c8:	10002126 	beq	r2,zero,1014550 <__lo0bits+0x9c>
 10144cc:	1880008c 	andi	r2,r3,2
 10144d0:	1000251e 	bne	r2,zero,1014568 <__lo0bits+0xb4>
 10144d4:	1804d0ba 	srli	r2,r3,2
 10144d8:	01400084 	movi	r5,2
 10144dc:	20800015 	stw	r2,0(r4)
 10144e0:	2805883a 	mov	r2,r5
 10144e4:	f800283a 	ret
 10144e8:	18bfffcc 	andi	r2,r3,65535
 10144ec:	10001526 	beq	r2,zero,1014544 <__lo0bits+0x90>
 10144f0:	000b883a 	mov	r5,zero
 10144f4:	18803fcc 	andi	r2,r3,255
 10144f8:	1000021e 	bne	r2,zero,1014504 <__lo0bits+0x50>
 10144fc:	1806d23a 	srli	r3,r3,8
 1014500:	29400204 	addi	r5,r5,8
 1014504:	188003cc 	andi	r2,r3,15
 1014508:	1000021e 	bne	r2,zero,1014514 <__lo0bits+0x60>
 101450c:	1806d13a 	srli	r3,r3,4
 1014510:	29400104 	addi	r5,r5,4
 1014514:	188000cc 	andi	r2,r3,3
 1014518:	1000021e 	bne	r2,zero,1014524 <__lo0bits+0x70>
 101451c:	1806d0ba 	srli	r3,r3,2
 1014520:	29400084 	addi	r5,r5,2
 1014524:	1880004c 	andi	r2,r3,1
 1014528:	1000031e 	bne	r2,zero,1014538 <__lo0bits+0x84>
 101452c:	1806d07a 	srli	r3,r3,1
 1014530:	18000a26 	beq	r3,zero,101455c <__lo0bits+0xa8>
 1014534:	29400044 	addi	r5,r5,1
 1014538:	2805883a 	mov	r2,r5
 101453c:	20c00015 	stw	r3,0(r4)
 1014540:	f800283a 	ret
 1014544:	1806d43a 	srli	r3,r3,16
 1014548:	01400404 	movi	r5,16
 101454c:	003fe906 	br	10144f4 <__lo0bits+0x40>
 1014550:	000b883a 	mov	r5,zero
 1014554:	2805883a 	mov	r2,r5
 1014558:	f800283a 	ret
 101455c:	01400804 	movi	r5,32
 1014560:	2805883a 	mov	r2,r5
 1014564:	f800283a 	ret
 1014568:	1804d07a 	srli	r2,r3,1
 101456c:	01400044 	movi	r5,1
 1014570:	20800015 	stw	r2,0(r4)
 1014574:	003fda06 	br	10144e0 <__lo0bits+0x2c>

01014578 <__mcmp>:
 1014578:	20800417 	ldw	r2,16(r4)
 101457c:	28c00417 	ldw	r3,16(r5)
 1014580:	10cfc83a 	sub	r7,r2,r3
 1014584:	38000c1e 	bne	r7,zero,10145b8 <__mcmp+0x40>
 1014588:	18c5883a 	add	r2,r3,r3
 101458c:	1085883a 	add	r2,r2,r2
 1014590:	10c00504 	addi	r3,r2,20
 1014594:	21000504 	addi	r4,r4,20
 1014598:	28cb883a 	add	r5,r5,r3
 101459c:	2085883a 	add	r2,r4,r2
 10145a0:	10bfff04 	addi	r2,r2,-4
 10145a4:	297fff04 	addi	r5,r5,-4
 10145a8:	11800017 	ldw	r6,0(r2)
 10145ac:	28c00017 	ldw	r3,0(r5)
 10145b0:	30c0031e 	bne	r6,r3,10145c0 <__mcmp+0x48>
 10145b4:	20bffa36 	bltu	r4,r2,10145a0 <__mcmp+0x28>
 10145b8:	3805883a 	mov	r2,r7
 10145bc:	f800283a 	ret
 10145c0:	30c00336 	bltu	r6,r3,10145d0 <__mcmp+0x58>
 10145c4:	01c00044 	movi	r7,1
 10145c8:	3805883a 	mov	r2,r7
 10145cc:	f800283a 	ret
 10145d0:	01ffffc4 	movi	r7,-1
 10145d4:	003ff806 	br	10145b8 <__mcmp+0x40>

010145d8 <__ulp>:
 10145d8:	295ffc2c 	andhi	r5,r5,32752
 10145dc:	013f3034 	movhi	r4,64704
 10145e0:	290b883a 	add	r5,r5,r4
 10145e4:	0145c83a 	sub	r2,zero,r5
 10145e8:	1007d53a 	srai	r3,r2,20
 10145ec:	000d883a 	mov	r6,zero
 10145f0:	0140040e 	bge	zero,r5,1014604 <__ulp+0x2c>
 10145f4:	280f883a 	mov	r7,r5
 10145f8:	3807883a 	mov	r3,r7
 10145fc:	3005883a 	mov	r2,r6
 1014600:	f800283a 	ret
 1014604:	008004c4 	movi	r2,19
 1014608:	193ffb04 	addi	r4,r3,-20
 101460c:	10c00c0e 	bge	r2,r3,1014640 <__ulp+0x68>
 1014610:	008007c4 	movi	r2,31
 1014614:	1107c83a 	sub	r3,r2,r4
 1014618:	00800784 	movi	r2,30
 101461c:	01400044 	movi	r5,1
 1014620:	11000216 	blt	r2,r4,101462c <__ulp+0x54>
 1014624:	00800044 	movi	r2,1
 1014628:	10ca983a 	sll	r5,r2,r3
 101462c:	000f883a 	mov	r7,zero
 1014630:	280d883a 	mov	r6,r5
 1014634:	3807883a 	mov	r3,r7
 1014638:	3005883a 	mov	r2,r6
 101463c:	f800283a 	ret
 1014640:	00800234 	movhi	r2,8
 1014644:	10cfd83a 	sra	r7,r2,r3
 1014648:	000d883a 	mov	r6,zero
 101464c:	3005883a 	mov	r2,r6
 1014650:	3807883a 	mov	r3,r7
 1014654:	f800283a 	ret

01014658 <__b2d>:
 1014658:	20800417 	ldw	r2,16(r4)
 101465c:	defff904 	addi	sp,sp,-28
 1014660:	dd000415 	stw	r20,16(sp)
 1014664:	1085883a 	add	r2,r2,r2
 1014668:	25000504 	addi	r20,r4,20
 101466c:	1085883a 	add	r2,r2,r2
 1014670:	dc000015 	stw	r16,0(sp)
 1014674:	a0a1883a 	add	r16,r20,r2
 1014678:	dd400515 	stw	r21,20(sp)
 101467c:	857fff17 	ldw	r21,-4(r16)
 1014680:	dc400115 	stw	r17,4(sp)
 1014684:	dfc00615 	stw	ra,24(sp)
 1014688:	a809883a 	mov	r4,r21
 101468c:	2823883a 	mov	r17,r5
 1014690:	dcc00315 	stw	r19,12(sp)
 1014694:	dc800215 	stw	r18,8(sp)
 1014698:	10144440 	call	1014444 <__hi0bits>
 101469c:	100b883a 	mov	r5,r2
 10146a0:	00800804 	movi	r2,32
 10146a4:	1145c83a 	sub	r2,r2,r5
 10146a8:	88800015 	stw	r2,0(r17)
 10146ac:	00800284 	movi	r2,10
 10146b0:	80ffff04 	addi	r3,r16,-4
 10146b4:	11401416 	blt	r2,r5,1014708 <__b2d+0xb0>
 10146b8:	008002c4 	movi	r2,11
 10146bc:	1149c83a 	sub	r4,r2,r5
 10146c0:	a0c02736 	bltu	r20,r3,1014760 <__b2d+0x108>
 10146c4:	000d883a 	mov	r6,zero
 10146c8:	28800544 	addi	r2,r5,21
 10146cc:	a906d83a 	srl	r3,r21,r4
 10146d0:	a884983a 	sll	r2,r21,r2
 10146d4:	1ccffc34 	orhi	r19,r3,16368
 10146d8:	11a4b03a 	or	r18,r2,r6
 10146dc:	9005883a 	mov	r2,r18
 10146e0:	9807883a 	mov	r3,r19
 10146e4:	dfc00617 	ldw	ra,24(sp)
 10146e8:	dd400517 	ldw	r21,20(sp)
 10146ec:	dd000417 	ldw	r20,16(sp)
 10146f0:	dcc00317 	ldw	r19,12(sp)
 10146f4:	dc800217 	ldw	r18,8(sp)
 10146f8:	dc400117 	ldw	r17,4(sp)
 10146fc:	dc000017 	ldw	r16,0(sp)
 1014700:	dec00704 	addi	sp,sp,28
 1014704:	f800283a 	ret
 1014708:	a0c00e36 	bltu	r20,r3,1014744 <__b2d+0xec>
 101470c:	293ffd44 	addi	r4,r5,-11
 1014710:	000d883a 	mov	r6,zero
 1014714:	20000f26 	beq	r4,zero,1014754 <__b2d+0xfc>
 1014718:	00800804 	movi	r2,32
 101471c:	110bc83a 	sub	r5,r2,r4
 1014720:	a0c01236 	bltu	r20,r3,101476c <__b2d+0x114>
 1014724:	000f883a 	mov	r7,zero
 1014728:	a904983a 	sll	r2,r21,r4
 101472c:	3146d83a 	srl	r3,r6,r5
 1014730:	3108983a 	sll	r4,r6,r4
 1014734:	108ffc34 	orhi	r2,r2,16368
 1014738:	18a6b03a 	or	r19,r3,r2
 101473c:	3924b03a 	or	r18,r7,r4
 1014740:	003fe606 	br	10146dc <__b2d+0x84>
 1014744:	293ffd44 	addi	r4,r5,-11
 1014748:	81bffe17 	ldw	r6,-8(r16)
 101474c:	80fffe04 	addi	r3,r16,-8
 1014750:	203ff11e 	bne	r4,zero,1014718 <__b2d+0xc0>
 1014754:	accffc34 	orhi	r19,r21,16368
 1014758:	3025883a 	mov	r18,r6
 101475c:	003fdf06 	br	10146dc <__b2d+0x84>
 1014760:	18bfff17 	ldw	r2,-4(r3)
 1014764:	110cd83a 	srl	r6,r2,r4
 1014768:	003fd706 	br	10146c8 <__b2d+0x70>
 101476c:	18bfff17 	ldw	r2,-4(r3)
 1014770:	114ed83a 	srl	r7,r2,r5
 1014774:	003fec06 	br	1014728 <__b2d+0xd0>

01014778 <__ratio>:
 1014778:	defff904 	addi	sp,sp,-28
 101477c:	dc400215 	stw	r17,8(sp)
 1014780:	2823883a 	mov	r17,r5
 1014784:	d80b883a 	mov	r5,sp
 1014788:	dfc00615 	stw	ra,24(sp)
 101478c:	dd000515 	stw	r20,20(sp)
 1014790:	dcc00415 	stw	r19,16(sp)
 1014794:	dc800315 	stw	r18,12(sp)
 1014798:	2025883a 	mov	r18,r4
 101479c:	10146580 	call	1014658 <__b2d>
 10147a0:	8809883a 	mov	r4,r17
 10147a4:	d9400104 	addi	r5,sp,4
 10147a8:	1027883a 	mov	r19,r2
 10147ac:	1829883a 	mov	r20,r3
 10147b0:	10146580 	call	1014658 <__b2d>
 10147b4:	89000417 	ldw	r4,16(r17)
 10147b8:	91c00417 	ldw	r7,16(r18)
 10147bc:	d9800117 	ldw	r6,4(sp)
 10147c0:	180b883a 	mov	r5,r3
 10147c4:	390fc83a 	sub	r7,r7,r4
 10147c8:	1009883a 	mov	r4,r2
 10147cc:	d8800017 	ldw	r2,0(sp)
 10147d0:	380e917a 	slli	r7,r7,5
 10147d4:	2011883a 	mov	r8,r4
 10147d8:	1185c83a 	sub	r2,r2,r6
 10147dc:	11c5883a 	add	r2,r2,r7
 10147e0:	1006953a 	slli	r3,r2,20
 10147e4:	2813883a 	mov	r9,r5
 10147e8:	00800d0e 	bge	zero,r2,1014820 <__ratio+0xa8>
 10147ec:	1d29883a 	add	r20,r3,r20
 10147f0:	a00b883a 	mov	r5,r20
 10147f4:	480f883a 	mov	r7,r9
 10147f8:	9809883a 	mov	r4,r19
 10147fc:	400d883a 	mov	r6,r8
 1014800:	10177500 	call	1017750 <__divdf3>
 1014804:	dfc00617 	ldw	ra,24(sp)
 1014808:	dd000517 	ldw	r20,20(sp)
 101480c:	dcc00417 	ldw	r19,16(sp)
 1014810:	dc800317 	ldw	r18,12(sp)
 1014814:	dc400217 	ldw	r17,8(sp)
 1014818:	dec00704 	addi	sp,sp,28
 101481c:	f800283a 	ret
 1014820:	28d3c83a 	sub	r9,r5,r3
 1014824:	003ff206 	br	10147f0 <__ratio+0x78>

01014828 <_mprec_log10>:
 1014828:	defffe04 	addi	sp,sp,-8
 101482c:	008005c4 	movi	r2,23
 1014830:	dc000015 	stw	r16,0(sp)
 1014834:	dfc00115 	stw	ra,4(sp)
 1014838:	2021883a 	mov	r16,r4
 101483c:	11000c16 	blt	r2,r4,1014870 <_mprec_log10+0x48>
 1014840:	200490fa 	slli	r2,r4,3
 1014844:	00c040b4 	movhi	r3,258
 1014848:	18db9704 	addi	r3,r3,28252
 101484c:	10c5883a 	add	r2,r2,r3
 1014850:	12400117 	ldw	r9,4(r2)
 1014854:	12000017 	ldw	r8,0(r2)
 1014858:	4807883a 	mov	r3,r9
 101485c:	4005883a 	mov	r2,r8
 1014860:	dfc00117 	ldw	ra,4(sp)
 1014864:	dc000017 	ldw	r16,0(sp)
 1014868:	dec00204 	addi	sp,sp,8
 101486c:	f800283a 	ret
 1014870:	0011883a 	mov	r8,zero
 1014874:	024ffc34 	movhi	r9,16368
 1014878:	0005883a 	mov	r2,zero
 101487c:	00d00934 	movhi	r3,16420
 1014880:	480b883a 	mov	r5,r9
 1014884:	4009883a 	mov	r4,r8
 1014888:	180f883a 	mov	r7,r3
 101488c:	100d883a 	mov	r6,r2
 1014890:	101738c0 	call	101738c <__muldf3>
 1014894:	843fffc4 	addi	r16,r16,-1
 1014898:	1011883a 	mov	r8,r2
 101489c:	1813883a 	mov	r9,r3
 10148a0:	803ff51e 	bne	r16,zero,1014878 <_mprec_log10+0x50>
 10148a4:	4005883a 	mov	r2,r8
 10148a8:	4807883a 	mov	r3,r9
 10148ac:	dfc00117 	ldw	ra,4(sp)
 10148b0:	dc000017 	ldw	r16,0(sp)
 10148b4:	dec00204 	addi	sp,sp,8
 10148b8:	f800283a 	ret

010148bc <__copybits>:
 10148bc:	297fffc4 	addi	r5,r5,-1
 10148c0:	30800417 	ldw	r2,16(r6)
 10148c4:	280bd17a 	srai	r5,r5,5
 10148c8:	31800504 	addi	r6,r6,20
 10148cc:	1085883a 	add	r2,r2,r2
 10148d0:	294b883a 	add	r5,r5,r5
 10148d4:	294b883a 	add	r5,r5,r5
 10148d8:	1085883a 	add	r2,r2,r2
 10148dc:	290b883a 	add	r5,r5,r4
 10148e0:	3087883a 	add	r3,r6,r2
 10148e4:	29400104 	addi	r5,r5,4
 10148e8:	30c0052e 	bgeu	r6,r3,1014900 <__copybits+0x44>
 10148ec:	30800017 	ldw	r2,0(r6)
 10148f0:	31800104 	addi	r6,r6,4
 10148f4:	20800015 	stw	r2,0(r4)
 10148f8:	21000104 	addi	r4,r4,4
 10148fc:	30fffb36 	bltu	r6,r3,10148ec <__copybits+0x30>
 1014900:	2140032e 	bgeu	r4,r5,1014910 <__copybits+0x54>
 1014904:	20000015 	stw	zero,0(r4)
 1014908:	21000104 	addi	r4,r4,4
 101490c:	217ffd36 	bltu	r4,r5,1014904 <__copybits+0x48>
 1014910:	f800283a 	ret

01014914 <__any_on>:
 1014914:	20800417 	ldw	r2,16(r4)
 1014918:	2807d17a 	srai	r3,r5,5
 101491c:	21000504 	addi	r4,r4,20
 1014920:	10c00d0e 	bge	r2,r3,1014958 <__any_on+0x44>
 1014924:	1085883a 	add	r2,r2,r2
 1014928:	1085883a 	add	r2,r2,r2
 101492c:	208d883a 	add	r6,r4,r2
 1014930:	2180182e 	bgeu	r4,r6,1014994 <__any_on+0x80>
 1014934:	30bfff17 	ldw	r2,-4(r6)
 1014938:	30ffff04 	addi	r3,r6,-4
 101493c:	1000041e 	bne	r2,zero,1014950 <__any_on+0x3c>
 1014940:	20c0142e 	bgeu	r4,r3,1014994 <__any_on+0x80>
 1014944:	18ffff04 	addi	r3,r3,-4
 1014948:	18800017 	ldw	r2,0(r3)
 101494c:	103ffc26 	beq	r2,zero,1014940 <__any_on+0x2c>
 1014950:	00800044 	movi	r2,1
 1014954:	f800283a 	ret
 1014958:	18800a0e 	bge	r3,r2,1014984 <__any_on+0x70>
 101495c:	294007cc 	andi	r5,r5,31
 1014960:	28000826 	beq	r5,zero,1014984 <__any_on+0x70>
 1014964:	18c5883a 	add	r2,r3,r3
 1014968:	1085883a 	add	r2,r2,r2
 101496c:	208d883a 	add	r6,r4,r2
 1014970:	30c00017 	ldw	r3,0(r6)
 1014974:	1944d83a 	srl	r2,r3,r5
 1014978:	1144983a 	sll	r2,r2,r5
 101497c:	18bff41e 	bne	r3,r2,1014950 <__any_on+0x3c>
 1014980:	003feb06 	br	1014930 <__any_on+0x1c>
 1014984:	18c5883a 	add	r2,r3,r3
 1014988:	1085883a 	add	r2,r2,r2
 101498c:	208d883a 	add	r6,r4,r2
 1014990:	003fe706 	br	1014930 <__any_on+0x1c>
 1014994:	0005883a 	mov	r2,zero
 1014998:	f800283a 	ret

0101499c <_Balloc>:
 101499c:	20c01317 	ldw	r3,76(r4)
 10149a0:	defffb04 	addi	sp,sp,-20
 10149a4:	dcc00315 	stw	r19,12(sp)
 10149a8:	dc800215 	stw	r18,8(sp)
 10149ac:	dfc00415 	stw	ra,16(sp)
 10149b0:	2825883a 	mov	r18,r5
 10149b4:	dc400115 	stw	r17,4(sp)
 10149b8:	dc000015 	stw	r16,0(sp)
 10149bc:	2027883a 	mov	r19,r4
 10149c0:	01800404 	movi	r6,16
 10149c4:	01400104 	movi	r5,4
 10149c8:	18001726 	beq	r3,zero,1014a28 <_Balloc+0x8c>
 10149cc:	01400044 	movi	r5,1
 10149d0:	9485883a 	add	r2,r18,r18
 10149d4:	2ca2983a 	sll	r17,r5,r18
 10149d8:	1085883a 	add	r2,r2,r2
 10149dc:	10c7883a 	add	r3,r2,r3
 10149e0:	1c000017 	ldw	r16,0(r3)
 10149e4:	8c4d883a 	add	r6,r17,r17
 10149e8:	318d883a 	add	r6,r6,r6
 10149ec:	9809883a 	mov	r4,r19
 10149f0:	31800504 	addi	r6,r6,20
 10149f4:	80001226 	beq	r16,zero,1014a40 <_Balloc+0xa4>
 10149f8:	80800017 	ldw	r2,0(r16)
 10149fc:	18800015 	stw	r2,0(r3)
 1014a00:	80000415 	stw	zero,16(r16)
 1014a04:	80000315 	stw	zero,12(r16)
 1014a08:	8005883a 	mov	r2,r16
 1014a0c:	dfc00417 	ldw	ra,16(sp)
 1014a10:	dcc00317 	ldw	r19,12(sp)
 1014a14:	dc800217 	ldw	r18,8(sp)
 1014a18:	dc400117 	ldw	r17,4(sp)
 1014a1c:	dc000017 	ldw	r16,0(sp)
 1014a20:	dec00504 	addi	sp,sp,20
 1014a24:	f800283a 	ret
 1014a28:	1015d8c0 	call	1015d8c <_calloc_r>
 1014a2c:	1007883a 	mov	r3,r2
 1014a30:	0021883a 	mov	r16,zero
 1014a34:	98801315 	stw	r2,76(r19)
 1014a38:	103fe41e 	bne	r2,zero,10149cc <_Balloc+0x30>
 1014a3c:	003ff206 	br	1014a08 <_Balloc+0x6c>
 1014a40:	1015d8c0 	call	1015d8c <_calloc_r>
 1014a44:	103ff026 	beq	r2,zero,1014a08 <_Balloc+0x6c>
 1014a48:	1021883a 	mov	r16,r2
 1014a4c:	14800115 	stw	r18,4(r2)
 1014a50:	14400215 	stw	r17,8(r2)
 1014a54:	003fea06 	br	1014a00 <_Balloc+0x64>

01014a58 <__d2b>:
 1014a58:	defff504 	addi	sp,sp,-44
 1014a5c:	dcc00515 	stw	r19,20(sp)
 1014a60:	04c00044 	movi	r19,1
 1014a64:	dc000215 	stw	r16,8(sp)
 1014a68:	2821883a 	mov	r16,r5
 1014a6c:	980b883a 	mov	r5,r19
 1014a70:	ddc00915 	stw	r23,36(sp)
 1014a74:	dd800815 	stw	r22,32(sp)
 1014a78:	dd400715 	stw	r21,28(sp)
 1014a7c:	dd000615 	stw	r20,24(sp)
 1014a80:	dc800415 	stw	r18,16(sp)
 1014a84:	dc400315 	stw	r17,12(sp)
 1014a88:	dfc00a15 	stw	ra,40(sp)
 1014a8c:	3023883a 	mov	r17,r6
 1014a90:	382d883a 	mov	r22,r7
 1014a94:	ddc00b17 	ldw	r23,44(sp)
 1014a98:	101499c0 	call	101499c <_Balloc>
 1014a9c:	1025883a 	mov	r18,r2
 1014aa0:	00a00034 	movhi	r2,32768
 1014aa4:	10bfffc4 	addi	r2,r2,-1
 1014aa8:	8888703a 	and	r4,r17,r2
 1014aac:	202ad53a 	srli	r21,r4,20
 1014ab0:	00800434 	movhi	r2,16
 1014ab4:	10bfffc4 	addi	r2,r2,-1
 1014ab8:	8886703a 	and	r3,r17,r2
 1014abc:	a829003a 	cmpeq	r20,r21,zero
 1014ac0:	800b883a 	mov	r5,r16
 1014ac4:	d8c00115 	stw	r3,4(sp)
 1014ac8:	94000504 	addi	r16,r18,20
 1014acc:	a000021e 	bne	r20,zero,1014ad8 <__d2b+0x80>
 1014ad0:	18c00434 	orhi	r3,r3,16
 1014ad4:	d8c00115 	stw	r3,4(sp)
 1014ad8:	28002726 	beq	r5,zero,1014b78 <__d2b+0x120>
 1014adc:	d809883a 	mov	r4,sp
 1014ae0:	d9400015 	stw	r5,0(sp)
 1014ae4:	10144b40 	call	10144b4 <__lo0bits>
 1014ae8:	100d883a 	mov	r6,r2
 1014aec:	10003526 	beq	r2,zero,1014bc4 <__d2b+0x16c>
 1014af0:	d8c00117 	ldw	r3,4(sp)
 1014af4:	00800804 	movi	r2,32
 1014af8:	1185c83a 	sub	r2,r2,r6
 1014afc:	d9000017 	ldw	r4,0(sp)
 1014b00:	1886983a 	sll	r3,r3,r2
 1014b04:	1906b03a 	or	r3,r3,r4
 1014b08:	90c00515 	stw	r3,20(r18)
 1014b0c:	d8c00117 	ldw	r3,4(sp)
 1014b10:	1986d83a 	srl	r3,r3,r6
 1014b14:	d8c00115 	stw	r3,4(sp)
 1014b18:	180b003a 	cmpeq	r5,r3,zero
 1014b1c:	00800084 	movi	r2,2
 1014b20:	114bc83a 	sub	r5,r2,r5
 1014b24:	80c00115 	stw	r3,4(r16)
 1014b28:	91400415 	stw	r5,16(r18)
 1014b2c:	a0001a1e 	bne	r20,zero,1014b98 <__d2b+0x140>
 1014b30:	3545883a 	add	r2,r6,r21
 1014b34:	10bef344 	addi	r2,r2,-1075
 1014b38:	00c00d44 	movi	r3,53
 1014b3c:	b0800015 	stw	r2,0(r22)
 1014b40:	1987c83a 	sub	r3,r3,r6
 1014b44:	b8c00015 	stw	r3,0(r23)
 1014b48:	9005883a 	mov	r2,r18
 1014b4c:	dfc00a17 	ldw	ra,40(sp)
 1014b50:	ddc00917 	ldw	r23,36(sp)
 1014b54:	dd800817 	ldw	r22,32(sp)
 1014b58:	dd400717 	ldw	r21,28(sp)
 1014b5c:	dd000617 	ldw	r20,24(sp)
 1014b60:	dcc00517 	ldw	r19,20(sp)
 1014b64:	dc800417 	ldw	r18,16(sp)
 1014b68:	dc400317 	ldw	r17,12(sp)
 1014b6c:	dc000217 	ldw	r16,8(sp)
 1014b70:	dec00b04 	addi	sp,sp,44
 1014b74:	f800283a 	ret
 1014b78:	d9000104 	addi	r4,sp,4
 1014b7c:	10144b40 	call	10144b4 <__lo0bits>
 1014b80:	11800804 	addi	r6,r2,32
 1014b84:	d8800117 	ldw	r2,4(sp)
 1014b88:	94c00415 	stw	r19,16(r18)
 1014b8c:	980b883a 	mov	r5,r19
 1014b90:	90800515 	stw	r2,20(r18)
 1014b94:	a03fe626 	beq	r20,zero,1014b30 <__d2b+0xd8>
 1014b98:	2945883a 	add	r2,r5,r5
 1014b9c:	1085883a 	add	r2,r2,r2
 1014ba0:	1405883a 	add	r2,r2,r16
 1014ba4:	113fff17 	ldw	r4,-4(r2)
 1014ba8:	30fef384 	addi	r3,r6,-1074
 1014bac:	2820917a 	slli	r16,r5,5
 1014bb0:	b0c00015 	stw	r3,0(r22)
 1014bb4:	10144440 	call	1014444 <__hi0bits>
 1014bb8:	80a1c83a 	sub	r16,r16,r2
 1014bbc:	bc000015 	stw	r16,0(r23)
 1014bc0:	003fe106 	br	1014b48 <__d2b+0xf0>
 1014bc4:	d8800017 	ldw	r2,0(sp)
 1014bc8:	90800515 	stw	r2,20(r18)
 1014bcc:	d8c00117 	ldw	r3,4(sp)
 1014bd0:	003fd106 	br	1014b18 <__d2b+0xc0>

01014bd4 <__mdiff>:
 1014bd4:	defffb04 	addi	sp,sp,-20
 1014bd8:	dc000015 	stw	r16,0(sp)
 1014bdc:	2821883a 	mov	r16,r5
 1014be0:	dc800215 	stw	r18,8(sp)
 1014be4:	300b883a 	mov	r5,r6
 1014be8:	2025883a 	mov	r18,r4
 1014bec:	8009883a 	mov	r4,r16
 1014bf0:	dc400115 	stw	r17,4(sp)
 1014bf4:	dfc00415 	stw	ra,16(sp)
 1014bf8:	dcc00315 	stw	r19,12(sp)
 1014bfc:	3023883a 	mov	r17,r6
 1014c00:	10145780 	call	1014578 <__mcmp>
 1014c04:	10004226 	beq	r2,zero,1014d10 <__mdiff+0x13c>
 1014c08:	10005016 	blt	r2,zero,1014d4c <__mdiff+0x178>
 1014c0c:	0027883a 	mov	r19,zero
 1014c10:	81400117 	ldw	r5,4(r16)
 1014c14:	9009883a 	mov	r4,r18
 1014c18:	101499c0 	call	101499c <_Balloc>
 1014c1c:	1019883a 	mov	r12,r2
 1014c20:	82800417 	ldw	r10,16(r16)
 1014c24:	88800417 	ldw	r2,16(r17)
 1014c28:	81800504 	addi	r6,r16,20
 1014c2c:	5287883a 	add	r3,r10,r10
 1014c30:	1085883a 	add	r2,r2,r2
 1014c34:	18c7883a 	add	r3,r3,r3
 1014c38:	1085883a 	add	r2,r2,r2
 1014c3c:	8a000504 	addi	r8,r17,20
 1014c40:	64c00315 	stw	r19,12(r12)
 1014c44:	30db883a 	add	r13,r6,r3
 1014c48:	4097883a 	add	r11,r8,r2
 1014c4c:	61c00504 	addi	r7,r12,20
 1014c50:	0013883a 	mov	r9,zero
 1014c54:	31000017 	ldw	r4,0(r6)
 1014c58:	41400017 	ldw	r5,0(r8)
 1014c5c:	42000104 	addi	r8,r8,4
 1014c60:	20bfffcc 	andi	r2,r4,65535
 1014c64:	28ffffcc 	andi	r3,r5,65535
 1014c68:	10c5c83a 	sub	r2,r2,r3
 1014c6c:	1245883a 	add	r2,r2,r9
 1014c70:	2008d43a 	srli	r4,r4,16
 1014c74:	280ad43a 	srli	r5,r5,16
 1014c78:	1007d43a 	srai	r3,r2,16
 1014c7c:	3880000d 	sth	r2,0(r7)
 1014c80:	2149c83a 	sub	r4,r4,r5
 1014c84:	20c9883a 	add	r4,r4,r3
 1014c88:	3900008d 	sth	r4,2(r7)
 1014c8c:	31800104 	addi	r6,r6,4
 1014c90:	39c00104 	addi	r7,r7,4
 1014c94:	2013d43a 	srai	r9,r4,16
 1014c98:	42ffee36 	bltu	r8,r11,1014c54 <__mdiff+0x80>
 1014c9c:	33400c2e 	bgeu	r6,r13,1014cd0 <__mdiff+0xfc>
 1014ca0:	30800017 	ldw	r2,0(r6)
 1014ca4:	31800104 	addi	r6,r6,4
 1014ca8:	10ffffcc 	andi	r3,r2,65535
 1014cac:	1a47883a 	add	r3,r3,r9
 1014cb0:	1004d43a 	srli	r2,r2,16
 1014cb4:	1809d43a 	srai	r4,r3,16
 1014cb8:	38c0000d 	sth	r3,0(r7)
 1014cbc:	1105883a 	add	r2,r2,r4
 1014cc0:	3880008d 	sth	r2,2(r7)
 1014cc4:	1013d43a 	srai	r9,r2,16
 1014cc8:	39c00104 	addi	r7,r7,4
 1014ccc:	337ff436 	bltu	r6,r13,1014ca0 <__mdiff+0xcc>
 1014cd0:	38bfff17 	ldw	r2,-4(r7)
 1014cd4:	38ffff04 	addi	r3,r7,-4
 1014cd8:	1000041e 	bne	r2,zero,1014cec <__mdiff+0x118>
 1014cdc:	18ffff04 	addi	r3,r3,-4
 1014ce0:	18800017 	ldw	r2,0(r3)
 1014ce4:	52bfffc4 	addi	r10,r10,-1
 1014ce8:	103ffc26 	beq	r2,zero,1014cdc <__mdiff+0x108>
 1014cec:	6005883a 	mov	r2,r12
 1014cf0:	62800415 	stw	r10,16(r12)
 1014cf4:	dfc00417 	ldw	ra,16(sp)
 1014cf8:	dcc00317 	ldw	r19,12(sp)
 1014cfc:	dc800217 	ldw	r18,8(sp)
 1014d00:	dc400117 	ldw	r17,4(sp)
 1014d04:	dc000017 	ldw	r16,0(sp)
 1014d08:	dec00504 	addi	sp,sp,20
 1014d0c:	f800283a 	ret
 1014d10:	9009883a 	mov	r4,r18
 1014d14:	000b883a 	mov	r5,zero
 1014d18:	101499c0 	call	101499c <_Balloc>
 1014d1c:	1019883a 	mov	r12,r2
 1014d20:	00800044 	movi	r2,1
 1014d24:	60800415 	stw	r2,16(r12)
 1014d28:	6005883a 	mov	r2,r12
 1014d2c:	60000515 	stw	zero,20(r12)
 1014d30:	dfc00417 	ldw	ra,16(sp)
 1014d34:	dcc00317 	ldw	r19,12(sp)
 1014d38:	dc800217 	ldw	r18,8(sp)
 1014d3c:	dc400117 	ldw	r17,4(sp)
 1014d40:	dc000017 	ldw	r16,0(sp)
 1014d44:	dec00504 	addi	sp,sp,20
 1014d48:	f800283a 	ret
 1014d4c:	880d883a 	mov	r6,r17
 1014d50:	04c00044 	movi	r19,1
 1014d54:	8023883a 	mov	r17,r16
 1014d58:	3021883a 	mov	r16,r6
 1014d5c:	003fac06 	br	1014c10 <__mdiff+0x3c>

01014d60 <__lshift>:
 1014d60:	defff904 	addi	sp,sp,-28
 1014d64:	28800417 	ldw	r2,16(r5)
 1014d68:	dc000015 	stw	r16,0(sp)
 1014d6c:	3021d17a 	srai	r16,r6,5
 1014d70:	28c00217 	ldw	r3,8(r5)
 1014d74:	10800044 	addi	r2,r2,1
 1014d78:	dc400115 	stw	r17,4(sp)
 1014d7c:	80a3883a 	add	r17,r16,r2
 1014d80:	dd400515 	stw	r21,20(sp)
 1014d84:	dd000415 	stw	r20,16(sp)
 1014d88:	dc800215 	stw	r18,8(sp)
 1014d8c:	dfc00615 	stw	ra,24(sp)
 1014d90:	2825883a 	mov	r18,r5
 1014d94:	dcc00315 	stw	r19,12(sp)
 1014d98:	3029883a 	mov	r20,r6
 1014d9c:	202b883a 	mov	r21,r4
 1014da0:	29400117 	ldw	r5,4(r5)
 1014da4:	1c40030e 	bge	r3,r17,1014db4 <__lshift+0x54>
 1014da8:	18c7883a 	add	r3,r3,r3
 1014dac:	29400044 	addi	r5,r5,1
 1014db0:	1c7ffd16 	blt	r3,r17,1014da8 <__lshift+0x48>
 1014db4:	a809883a 	mov	r4,r21
 1014db8:	101499c0 	call	101499c <_Balloc>
 1014dbc:	1027883a 	mov	r19,r2
 1014dc0:	11400504 	addi	r5,r2,20
 1014dc4:	0400090e 	bge	zero,r16,1014dec <__lshift+0x8c>
 1014dc8:	2805883a 	mov	r2,r5
 1014dcc:	0007883a 	mov	r3,zero
 1014dd0:	18c00044 	addi	r3,r3,1
 1014dd4:	10000015 	stw	zero,0(r2)
 1014dd8:	10800104 	addi	r2,r2,4
 1014ddc:	80fffc1e 	bne	r16,r3,1014dd0 <__lshift+0x70>
 1014de0:	8405883a 	add	r2,r16,r16
 1014de4:	1085883a 	add	r2,r2,r2
 1014de8:	288b883a 	add	r5,r5,r2
 1014dec:	90800417 	ldw	r2,16(r18)
 1014df0:	91000504 	addi	r4,r18,20
 1014df4:	a18007cc 	andi	r6,r20,31
 1014df8:	1085883a 	add	r2,r2,r2
 1014dfc:	1085883a 	add	r2,r2,r2
 1014e00:	208f883a 	add	r7,r4,r2
 1014e04:	30001e26 	beq	r6,zero,1014e80 <__lshift+0x120>
 1014e08:	00800804 	movi	r2,32
 1014e0c:	1191c83a 	sub	r8,r2,r6
 1014e10:	0007883a 	mov	r3,zero
 1014e14:	20800017 	ldw	r2,0(r4)
 1014e18:	1184983a 	sll	r2,r2,r6
 1014e1c:	1884b03a 	or	r2,r3,r2
 1014e20:	28800015 	stw	r2,0(r5)
 1014e24:	20c00017 	ldw	r3,0(r4)
 1014e28:	21000104 	addi	r4,r4,4
 1014e2c:	29400104 	addi	r5,r5,4
 1014e30:	1a06d83a 	srl	r3,r3,r8
 1014e34:	21fff736 	bltu	r4,r7,1014e14 <__lshift+0xb4>
 1014e38:	28c00015 	stw	r3,0(r5)
 1014e3c:	18000126 	beq	r3,zero,1014e44 <__lshift+0xe4>
 1014e40:	8c400044 	addi	r17,r17,1
 1014e44:	88bfffc4 	addi	r2,r17,-1
 1014e48:	98800415 	stw	r2,16(r19)
 1014e4c:	a809883a 	mov	r4,r21
 1014e50:	900b883a 	mov	r5,r18
 1014e54:	101441c0 	call	101441c <_Bfree>
 1014e58:	9805883a 	mov	r2,r19
 1014e5c:	dfc00617 	ldw	ra,24(sp)
 1014e60:	dd400517 	ldw	r21,20(sp)
 1014e64:	dd000417 	ldw	r20,16(sp)
 1014e68:	dcc00317 	ldw	r19,12(sp)
 1014e6c:	dc800217 	ldw	r18,8(sp)
 1014e70:	dc400117 	ldw	r17,4(sp)
 1014e74:	dc000017 	ldw	r16,0(sp)
 1014e78:	dec00704 	addi	sp,sp,28
 1014e7c:	f800283a 	ret
 1014e80:	20800017 	ldw	r2,0(r4)
 1014e84:	21000104 	addi	r4,r4,4
 1014e88:	28800015 	stw	r2,0(r5)
 1014e8c:	29400104 	addi	r5,r5,4
 1014e90:	21ffec2e 	bgeu	r4,r7,1014e44 <__lshift+0xe4>
 1014e94:	20800017 	ldw	r2,0(r4)
 1014e98:	21000104 	addi	r4,r4,4
 1014e9c:	28800015 	stw	r2,0(r5)
 1014ea0:	29400104 	addi	r5,r5,4
 1014ea4:	21fff636 	bltu	r4,r7,1014e80 <__lshift+0x120>
 1014ea8:	003fe606 	br	1014e44 <__lshift+0xe4>

01014eac <__multiply>:
 1014eac:	defff004 	addi	sp,sp,-64
 1014eb0:	dc800815 	stw	r18,32(sp)
 1014eb4:	dc400715 	stw	r17,28(sp)
 1014eb8:	2c800417 	ldw	r18,16(r5)
 1014ebc:	34400417 	ldw	r17,16(r6)
 1014ec0:	dcc00915 	stw	r19,36(sp)
 1014ec4:	dc000615 	stw	r16,24(sp)
 1014ec8:	dfc00f15 	stw	ra,60(sp)
 1014ecc:	df000e15 	stw	fp,56(sp)
 1014ed0:	ddc00d15 	stw	r23,52(sp)
 1014ed4:	dd800c15 	stw	r22,48(sp)
 1014ed8:	dd400b15 	stw	r21,44(sp)
 1014edc:	dd000a15 	stw	r20,40(sp)
 1014ee0:	2821883a 	mov	r16,r5
 1014ee4:	3027883a 	mov	r19,r6
 1014ee8:	9440040e 	bge	r18,r17,1014efc <__multiply+0x50>
 1014eec:	8825883a 	mov	r18,r17
 1014ef0:	2c400417 	ldw	r17,16(r5)
 1014ef4:	2827883a 	mov	r19,r5
 1014ef8:	3021883a 	mov	r16,r6
 1014efc:	80800217 	ldw	r2,8(r16)
 1014f00:	9447883a 	add	r3,r18,r17
 1014f04:	d8c00415 	stw	r3,16(sp)
 1014f08:	81400117 	ldw	r5,4(r16)
 1014f0c:	10c0010e 	bge	r2,r3,1014f14 <__multiply+0x68>
 1014f10:	29400044 	addi	r5,r5,1
 1014f14:	101499c0 	call	101499c <_Balloc>
 1014f18:	d8800515 	stw	r2,20(sp)
 1014f1c:	d9000417 	ldw	r4,16(sp)
 1014f20:	d8c00517 	ldw	r3,20(sp)
 1014f24:	2105883a 	add	r2,r4,r4
 1014f28:	1085883a 	add	r2,r2,r2
 1014f2c:	19000504 	addi	r4,r3,20
 1014f30:	2085883a 	add	r2,r4,r2
 1014f34:	d8800315 	stw	r2,12(sp)
 1014f38:	2080052e 	bgeu	r4,r2,1014f50 <__multiply+0xa4>
 1014f3c:	2005883a 	mov	r2,r4
 1014f40:	d8c00317 	ldw	r3,12(sp)
 1014f44:	10000015 	stw	zero,0(r2)
 1014f48:	10800104 	addi	r2,r2,4
 1014f4c:	10fffc36 	bltu	r2,r3,1014f40 <__multiply+0x94>
 1014f50:	8c45883a 	add	r2,r17,r17
 1014f54:	9487883a 	add	r3,r18,r18
 1014f58:	9dc00504 	addi	r23,r19,20
 1014f5c:	1085883a 	add	r2,r2,r2
 1014f60:	84000504 	addi	r16,r16,20
 1014f64:	18c7883a 	add	r3,r3,r3
 1014f68:	b885883a 	add	r2,r23,r2
 1014f6c:	dc000015 	stw	r16,0(sp)
 1014f70:	d8800215 	stw	r2,8(sp)
 1014f74:	80f9883a 	add	fp,r16,r3
 1014f78:	b880432e 	bgeu	r23,r2,1015088 <__multiply+0x1dc>
 1014f7c:	d9000115 	stw	r4,4(sp)
 1014f80:	b9000017 	ldw	r4,0(r23)
 1014f84:	253fffcc 	andi	r20,r4,65535
 1014f88:	a0001a26 	beq	r20,zero,1014ff4 <__multiply+0x148>
 1014f8c:	dcc00017 	ldw	r19,0(sp)
 1014f90:	dc800117 	ldw	r18,4(sp)
 1014f94:	002b883a 	mov	r21,zero
 1014f98:	9c400017 	ldw	r17,0(r19)
 1014f9c:	94000017 	ldw	r16,0(r18)
 1014fa0:	a009883a 	mov	r4,r20
 1014fa4:	897fffcc 	andi	r5,r17,65535
 1014fa8:	100def40 	call	100def4 <__mulsi3>
 1014fac:	880ad43a 	srli	r5,r17,16
 1014fb0:	80ffffcc 	andi	r3,r16,65535
 1014fb4:	a8c7883a 	add	r3,r21,r3
 1014fb8:	a009883a 	mov	r4,r20
 1014fbc:	10e3883a 	add	r17,r2,r3
 1014fc0:	8020d43a 	srli	r16,r16,16
 1014fc4:	100def40 	call	100def4 <__mulsi3>
 1014fc8:	8806d43a 	srli	r3,r17,16
 1014fcc:	1405883a 	add	r2,r2,r16
 1014fd0:	9cc00104 	addi	r19,r19,4
 1014fd4:	1887883a 	add	r3,r3,r2
 1014fd8:	90c0008d 	sth	r3,2(r18)
 1014fdc:	9440000d 	sth	r17,0(r18)
 1014fe0:	182ad43a 	srli	r21,r3,16
 1014fe4:	94800104 	addi	r18,r18,4
 1014fe8:	9f3feb36 	bltu	r19,fp,1014f98 <__multiply+0xec>
 1014fec:	95400015 	stw	r21,0(r18)
 1014ff0:	b9000017 	ldw	r4,0(r23)
 1014ff4:	202ad43a 	srli	r21,r4,16
 1014ff8:	a8001c26 	beq	r21,zero,101506c <__multiply+0x1c0>
 1014ffc:	d9000117 	ldw	r4,4(sp)
 1015000:	dd000017 	ldw	r20,0(sp)
 1015004:	002d883a 	mov	r22,zero
 1015008:	24c00017 	ldw	r19,0(r4)
 101500c:	2025883a 	mov	r18,r4
 1015010:	9823883a 	mov	r17,r19
 1015014:	a4000017 	ldw	r16,0(r20)
 1015018:	a809883a 	mov	r4,r21
 101501c:	a5000104 	addi	r20,r20,4
 1015020:	817fffcc 	andi	r5,r16,65535
 1015024:	100def40 	call	100def4 <__mulsi3>
 1015028:	8806d43a 	srli	r3,r17,16
 101502c:	800ad43a 	srli	r5,r16,16
 1015030:	94c0000d 	sth	r19,0(r18)
 1015034:	b0c7883a 	add	r3,r22,r3
 1015038:	10e1883a 	add	r16,r2,r3
 101503c:	9400008d 	sth	r16,2(r18)
 1015040:	a809883a 	mov	r4,r21
 1015044:	94800104 	addi	r18,r18,4
 1015048:	100def40 	call	100def4 <__mulsi3>
 101504c:	94400017 	ldw	r17,0(r18)
 1015050:	8020d43a 	srli	r16,r16,16
 1015054:	88ffffcc 	andi	r3,r17,65535
 1015058:	10c5883a 	add	r2,r2,r3
 101505c:	80a7883a 	add	r19,r16,r2
 1015060:	982cd43a 	srli	r22,r19,16
 1015064:	a73feb36 	bltu	r20,fp,1015014 <__multiply+0x168>
 1015068:	94c00015 	stw	r19,0(r18)
 101506c:	d8800217 	ldw	r2,8(sp)
 1015070:	bdc00104 	addi	r23,r23,4
 1015074:	b880042e 	bgeu	r23,r2,1015088 <__multiply+0x1dc>
 1015078:	d8c00117 	ldw	r3,4(sp)
 101507c:	18c00104 	addi	r3,r3,4
 1015080:	d8c00115 	stw	r3,4(sp)
 1015084:	003fbe06 	br	1014f80 <__multiply+0xd4>
 1015088:	d9000417 	ldw	r4,16(sp)
 101508c:	01000c0e 	bge	zero,r4,10150c0 <__multiply+0x214>
 1015090:	d8c00317 	ldw	r3,12(sp)
 1015094:	18bfff17 	ldw	r2,-4(r3)
 1015098:	18ffff04 	addi	r3,r3,-4
 101509c:	10000326 	beq	r2,zero,10150ac <__multiply+0x200>
 10150a0:	00000706 	br	10150c0 <__multiply+0x214>
 10150a4:	18800017 	ldw	r2,0(r3)
 10150a8:	1000051e 	bne	r2,zero,10150c0 <__multiply+0x214>
 10150ac:	d9000417 	ldw	r4,16(sp)
 10150b0:	18ffff04 	addi	r3,r3,-4
 10150b4:	213fffc4 	addi	r4,r4,-1
 10150b8:	d9000415 	stw	r4,16(sp)
 10150bc:	203ff91e 	bne	r4,zero,10150a4 <__multiply+0x1f8>
 10150c0:	d8800417 	ldw	r2,16(sp)
 10150c4:	d8c00517 	ldw	r3,20(sp)
 10150c8:	18800415 	stw	r2,16(r3)
 10150cc:	1805883a 	mov	r2,r3
 10150d0:	dfc00f17 	ldw	ra,60(sp)
 10150d4:	df000e17 	ldw	fp,56(sp)
 10150d8:	ddc00d17 	ldw	r23,52(sp)
 10150dc:	dd800c17 	ldw	r22,48(sp)
 10150e0:	dd400b17 	ldw	r21,44(sp)
 10150e4:	dd000a17 	ldw	r20,40(sp)
 10150e8:	dcc00917 	ldw	r19,36(sp)
 10150ec:	dc800817 	ldw	r18,32(sp)
 10150f0:	dc400717 	ldw	r17,28(sp)
 10150f4:	dc000617 	ldw	r16,24(sp)
 10150f8:	dec01004 	addi	sp,sp,64
 10150fc:	f800283a 	ret

01015100 <__i2b>:
 1015100:	defffd04 	addi	sp,sp,-12
 1015104:	dc000015 	stw	r16,0(sp)
 1015108:	04000044 	movi	r16,1
 101510c:	dc800115 	stw	r18,4(sp)
 1015110:	2825883a 	mov	r18,r5
 1015114:	800b883a 	mov	r5,r16
 1015118:	dfc00215 	stw	ra,8(sp)
 101511c:	101499c0 	call	101499c <_Balloc>
 1015120:	14000415 	stw	r16,16(r2)
 1015124:	14800515 	stw	r18,20(r2)
 1015128:	dfc00217 	ldw	ra,8(sp)
 101512c:	dc800117 	ldw	r18,4(sp)
 1015130:	dc000017 	ldw	r16,0(sp)
 1015134:	dec00304 	addi	sp,sp,12
 1015138:	f800283a 	ret

0101513c <__multadd>:
 101513c:	defff604 	addi	sp,sp,-40
 1015140:	dd800615 	stw	r22,24(sp)
 1015144:	2d800417 	ldw	r22,16(r5)
 1015148:	df000815 	stw	fp,32(sp)
 101514c:	ddc00715 	stw	r23,28(sp)
 1015150:	dd400515 	stw	r21,20(sp)
 1015154:	dd000415 	stw	r20,16(sp)
 1015158:	dcc00315 	stw	r19,12(sp)
 101515c:	dc800215 	stw	r18,8(sp)
 1015160:	dfc00915 	stw	ra,36(sp)
 1015164:	dc400115 	stw	r17,4(sp)
 1015168:	dc000015 	stw	r16,0(sp)
 101516c:	282f883a 	mov	r23,r5
 1015170:	2039883a 	mov	fp,r4
 1015174:	302b883a 	mov	r21,r6
 1015178:	3829883a 	mov	r20,r7
 101517c:	2c800504 	addi	r18,r5,20
 1015180:	0027883a 	mov	r19,zero
 1015184:	94400017 	ldw	r17,0(r18)
 1015188:	a80b883a 	mov	r5,r21
 101518c:	9cc00044 	addi	r19,r19,1
 1015190:	893fffcc 	andi	r4,r17,65535
 1015194:	100def40 	call	100def4 <__mulsi3>
 1015198:	8808d43a 	srli	r4,r17,16
 101519c:	1521883a 	add	r16,r2,r20
 10151a0:	a80b883a 	mov	r5,r21
 10151a4:	100def40 	call	100def4 <__mulsi3>
 10151a8:	8008d43a 	srli	r4,r16,16
 10151ac:	843fffcc 	andi	r16,r16,65535
 10151b0:	1105883a 	add	r2,r2,r4
 10151b4:	1006943a 	slli	r3,r2,16
 10151b8:	1028d43a 	srli	r20,r2,16
 10151bc:	1c07883a 	add	r3,r3,r16
 10151c0:	90c00015 	stw	r3,0(r18)
 10151c4:	94800104 	addi	r18,r18,4
 10151c8:	9dbfee16 	blt	r19,r22,1015184 <__multadd+0x48>
 10151cc:	a0000826 	beq	r20,zero,10151f0 <__multadd+0xb4>
 10151d0:	b8800217 	ldw	r2,8(r23)
 10151d4:	b080130e 	bge	r22,r2,1015224 <__multadd+0xe8>
 10151d8:	b585883a 	add	r2,r22,r22
 10151dc:	1085883a 	add	r2,r2,r2
 10151e0:	15c5883a 	add	r2,r2,r23
 10151e4:	b0c00044 	addi	r3,r22,1
 10151e8:	15000515 	stw	r20,20(r2)
 10151ec:	b8c00415 	stw	r3,16(r23)
 10151f0:	b805883a 	mov	r2,r23
 10151f4:	dfc00917 	ldw	ra,36(sp)
 10151f8:	df000817 	ldw	fp,32(sp)
 10151fc:	ddc00717 	ldw	r23,28(sp)
 1015200:	dd800617 	ldw	r22,24(sp)
 1015204:	dd400517 	ldw	r21,20(sp)
 1015208:	dd000417 	ldw	r20,16(sp)
 101520c:	dcc00317 	ldw	r19,12(sp)
 1015210:	dc800217 	ldw	r18,8(sp)
 1015214:	dc400117 	ldw	r17,4(sp)
 1015218:	dc000017 	ldw	r16,0(sp)
 101521c:	dec00a04 	addi	sp,sp,40
 1015220:	f800283a 	ret
 1015224:	b9400117 	ldw	r5,4(r23)
 1015228:	e009883a 	mov	r4,fp
 101522c:	29400044 	addi	r5,r5,1
 1015230:	101499c0 	call	101499c <_Balloc>
 1015234:	b9800417 	ldw	r6,16(r23)
 1015238:	b9400304 	addi	r5,r23,12
 101523c:	11000304 	addi	r4,r2,12
 1015240:	318d883a 	add	r6,r6,r6
 1015244:	318d883a 	add	r6,r6,r6
 1015248:	31800204 	addi	r6,r6,8
 101524c:	1023883a 	mov	r17,r2
 1015250:	100ed4c0 	call	100ed4c <memcpy>
 1015254:	b80b883a 	mov	r5,r23
 1015258:	e009883a 	mov	r4,fp
 101525c:	101441c0 	call	101441c <_Bfree>
 1015260:	882f883a 	mov	r23,r17
 1015264:	003fdc06 	br	10151d8 <__multadd+0x9c>

01015268 <__pow5mult>:
 1015268:	defffa04 	addi	sp,sp,-24
 101526c:	308000cc 	andi	r2,r6,3
 1015270:	dd000415 	stw	r20,16(sp)
 1015274:	dcc00315 	stw	r19,12(sp)
 1015278:	dc000015 	stw	r16,0(sp)
 101527c:	dfc00515 	stw	ra,20(sp)
 1015280:	dc800215 	stw	r18,8(sp)
 1015284:	dc400115 	stw	r17,4(sp)
 1015288:	3021883a 	mov	r16,r6
 101528c:	2027883a 	mov	r19,r4
 1015290:	2829883a 	mov	r20,r5
 1015294:	10002b1e 	bne	r2,zero,1015344 <__pow5mult+0xdc>
 1015298:	8025d0ba 	srai	r18,r16,2
 101529c:	90001b26 	beq	r18,zero,101530c <__pow5mult+0xa4>
 10152a0:	9c001217 	ldw	r16,72(r19)
 10152a4:	8000081e 	bne	r16,zero,10152c8 <__pow5mult+0x60>
 10152a8:	00003006 	br	101536c <__pow5mult+0x104>
 10152ac:	800b883a 	mov	r5,r16
 10152b0:	800d883a 	mov	r6,r16
 10152b4:	9809883a 	mov	r4,r19
 10152b8:	90001426 	beq	r18,zero,101530c <__pow5mult+0xa4>
 10152bc:	80800017 	ldw	r2,0(r16)
 10152c0:	10001b26 	beq	r2,zero,1015330 <__pow5mult+0xc8>
 10152c4:	1021883a 	mov	r16,r2
 10152c8:	9080004c 	andi	r2,r18,1
 10152cc:	1005003a 	cmpeq	r2,r2,zero
 10152d0:	9025d07a 	srai	r18,r18,1
 10152d4:	800d883a 	mov	r6,r16
 10152d8:	9809883a 	mov	r4,r19
 10152dc:	a00b883a 	mov	r5,r20
 10152e0:	103ff21e 	bne	r2,zero,10152ac <__pow5mult+0x44>
 10152e4:	1014eac0 	call	1014eac <__multiply>
 10152e8:	a00b883a 	mov	r5,r20
 10152ec:	9809883a 	mov	r4,r19
 10152f0:	1023883a 	mov	r17,r2
 10152f4:	101441c0 	call	101441c <_Bfree>
 10152f8:	8829883a 	mov	r20,r17
 10152fc:	800b883a 	mov	r5,r16
 1015300:	800d883a 	mov	r6,r16
 1015304:	9809883a 	mov	r4,r19
 1015308:	903fec1e 	bne	r18,zero,10152bc <__pow5mult+0x54>
 101530c:	a005883a 	mov	r2,r20
 1015310:	dfc00517 	ldw	ra,20(sp)
 1015314:	dd000417 	ldw	r20,16(sp)
 1015318:	dcc00317 	ldw	r19,12(sp)
 101531c:	dc800217 	ldw	r18,8(sp)
 1015320:	dc400117 	ldw	r17,4(sp)
 1015324:	dc000017 	ldw	r16,0(sp)
 1015328:	dec00604 	addi	sp,sp,24
 101532c:	f800283a 	ret
 1015330:	1014eac0 	call	1014eac <__multiply>
 1015334:	80800015 	stw	r2,0(r16)
 1015338:	1021883a 	mov	r16,r2
 101533c:	10000015 	stw	zero,0(r2)
 1015340:	003fe106 	br	10152c8 <__pow5mult+0x60>
 1015344:	1085883a 	add	r2,r2,r2
 1015348:	00c040b4 	movhi	r3,258
 101534c:	18dbdd04 	addi	r3,r3,28532
 1015350:	1085883a 	add	r2,r2,r2
 1015354:	10c5883a 	add	r2,r2,r3
 1015358:	11bfff17 	ldw	r6,-4(r2)
 101535c:	000f883a 	mov	r7,zero
 1015360:	101513c0 	call	101513c <__multadd>
 1015364:	1029883a 	mov	r20,r2
 1015368:	003fcb06 	br	1015298 <__pow5mult+0x30>
 101536c:	9809883a 	mov	r4,r19
 1015370:	01409c44 	movi	r5,625
 1015374:	10151000 	call	1015100 <__i2b>
 1015378:	98801215 	stw	r2,72(r19)
 101537c:	1021883a 	mov	r16,r2
 1015380:	10000015 	stw	zero,0(r2)
 1015384:	003fd006 	br	10152c8 <__pow5mult+0x60>

01015388 <__s2b>:
 1015388:	defff904 	addi	sp,sp,-28
 101538c:	dcc00315 	stw	r19,12(sp)
 1015390:	dc800215 	stw	r18,8(sp)
 1015394:	2827883a 	mov	r19,r5
 1015398:	2025883a 	mov	r18,r4
 101539c:	01400244 	movi	r5,9
 10153a0:	39000204 	addi	r4,r7,8
 10153a4:	dd000415 	stw	r20,16(sp)
 10153a8:	dc400115 	stw	r17,4(sp)
 10153ac:	dfc00615 	stw	ra,24(sp)
 10153b0:	dd400515 	stw	r21,20(sp)
 10153b4:	dc000015 	stw	r16,0(sp)
 10153b8:	3829883a 	mov	r20,r7
 10153bc:	3023883a 	mov	r17,r6
 10153c0:	10180300 	call	1018030 <__divsi3>
 10153c4:	00c00044 	movi	r3,1
 10153c8:	1880350e 	bge	r3,r2,10154a0 <__s2b+0x118>
 10153cc:	000b883a 	mov	r5,zero
 10153d0:	18c7883a 	add	r3,r3,r3
 10153d4:	29400044 	addi	r5,r5,1
 10153d8:	18bffd16 	blt	r3,r2,10153d0 <__s2b+0x48>
 10153dc:	9009883a 	mov	r4,r18
 10153e0:	101499c0 	call	101499c <_Balloc>
 10153e4:	1011883a 	mov	r8,r2
 10153e8:	d8800717 	ldw	r2,28(sp)
 10153ec:	00c00044 	movi	r3,1
 10153f0:	01800244 	movi	r6,9
 10153f4:	40800515 	stw	r2,20(r8)
 10153f8:	40c00415 	stw	r3,16(r8)
 10153fc:	3440260e 	bge	r6,r17,1015498 <__s2b+0x110>
 1015400:	3021883a 	mov	r16,r6
 1015404:	99ab883a 	add	r21,r19,r6
 1015408:	9c05883a 	add	r2,r19,r16
 101540c:	11c00007 	ldb	r7,0(r2)
 1015410:	400b883a 	mov	r5,r8
 1015414:	9009883a 	mov	r4,r18
 1015418:	39fff404 	addi	r7,r7,-48
 101541c:	01800284 	movi	r6,10
 1015420:	101513c0 	call	101513c <__multadd>
 1015424:	84000044 	addi	r16,r16,1
 1015428:	1011883a 	mov	r8,r2
 101542c:	8c3ff61e 	bne	r17,r16,1015408 <__s2b+0x80>
 1015430:	ac45883a 	add	r2,r21,r17
 1015434:	117ffe04 	addi	r5,r2,-8
 1015438:	880d883a 	mov	r6,r17
 101543c:	35000c0e 	bge	r6,r20,1015470 <__s2b+0xe8>
 1015440:	a185c83a 	sub	r2,r20,r6
 1015444:	2821883a 	mov	r16,r5
 1015448:	28a3883a 	add	r17,r5,r2
 101544c:	81c00007 	ldb	r7,0(r16)
 1015450:	400b883a 	mov	r5,r8
 1015454:	9009883a 	mov	r4,r18
 1015458:	39fff404 	addi	r7,r7,-48
 101545c:	01800284 	movi	r6,10
 1015460:	101513c0 	call	101513c <__multadd>
 1015464:	84000044 	addi	r16,r16,1
 1015468:	1011883a 	mov	r8,r2
 101546c:	847ff71e 	bne	r16,r17,101544c <__s2b+0xc4>
 1015470:	4005883a 	mov	r2,r8
 1015474:	dfc00617 	ldw	ra,24(sp)
 1015478:	dd400517 	ldw	r21,20(sp)
 101547c:	dd000417 	ldw	r20,16(sp)
 1015480:	dcc00317 	ldw	r19,12(sp)
 1015484:	dc800217 	ldw	r18,8(sp)
 1015488:	dc400117 	ldw	r17,4(sp)
 101548c:	dc000017 	ldw	r16,0(sp)
 1015490:	dec00704 	addi	sp,sp,28
 1015494:	f800283a 	ret
 1015498:	99400284 	addi	r5,r19,10
 101549c:	003fe706 	br	101543c <__s2b+0xb4>
 10154a0:	000b883a 	mov	r5,zero
 10154a4:	003fcd06 	br	10153dc <__s2b+0x54>

010154a8 <_realloc_r>:
 10154a8:	defff404 	addi	sp,sp,-48
 10154ac:	dd800815 	stw	r22,32(sp)
 10154b0:	dc800415 	stw	r18,16(sp)
 10154b4:	dc400315 	stw	r17,12(sp)
 10154b8:	dfc00b15 	stw	ra,44(sp)
 10154bc:	df000a15 	stw	fp,40(sp)
 10154c0:	ddc00915 	stw	r23,36(sp)
 10154c4:	dd400715 	stw	r21,28(sp)
 10154c8:	dd000615 	stw	r20,24(sp)
 10154cc:	dcc00515 	stw	r19,20(sp)
 10154d0:	dc000215 	stw	r16,8(sp)
 10154d4:	2825883a 	mov	r18,r5
 10154d8:	3023883a 	mov	r17,r6
 10154dc:	202d883a 	mov	r22,r4
 10154e0:	2800c926 	beq	r5,zero,1015808 <_realloc_r+0x360>
 10154e4:	101952c0 	call	101952c <__malloc_lock>
 10154e8:	943ffe04 	addi	r16,r18,-8
 10154ec:	88c002c4 	addi	r3,r17,11
 10154f0:	00800584 	movi	r2,22
 10154f4:	82000117 	ldw	r8,4(r16)
 10154f8:	10c01b2e 	bgeu	r2,r3,1015568 <_realloc_r+0xc0>
 10154fc:	00bffe04 	movi	r2,-8
 1015500:	188e703a 	and	r7,r3,r2
 1015504:	3839883a 	mov	fp,r7
 1015508:	38001a16 	blt	r7,zero,1015574 <_realloc_r+0xcc>
 101550c:	e4401936 	bltu	fp,r17,1015574 <_realloc_r+0xcc>
 1015510:	013fff04 	movi	r4,-4
 1015514:	4126703a 	and	r19,r8,r4
 1015518:	99c02616 	blt	r19,r7,10155b4 <_realloc_r+0x10c>
 101551c:	802b883a 	mov	r21,r16
 1015520:	9829883a 	mov	r20,r19
 1015524:	84000204 	addi	r16,r16,8
 1015528:	a80f883a 	mov	r7,r21
 101552c:	a70dc83a 	sub	r6,r20,fp
 1015530:	008003c4 	movi	r2,15
 1015534:	1180c136 	bltu	r2,r6,101583c <_realloc_r+0x394>
 1015538:	38800117 	ldw	r2,4(r7)
 101553c:	a549883a 	add	r4,r20,r21
 1015540:	1080004c 	andi	r2,r2,1
 1015544:	a084b03a 	or	r2,r20,r2
 1015548:	38800115 	stw	r2,4(r7)
 101554c:	20c00117 	ldw	r3,4(r4)
 1015550:	18c00054 	ori	r3,r3,1
 1015554:	20c00115 	stw	r3,4(r4)
 1015558:	b009883a 	mov	r4,r22
 101555c:	10196340 	call	1019634 <__malloc_unlock>
 1015560:	8023883a 	mov	r17,r16
 1015564:	00000606 	br	1015580 <_realloc_r+0xd8>
 1015568:	01c00404 	movi	r7,16
 101556c:	3839883a 	mov	fp,r7
 1015570:	e47fe72e 	bgeu	fp,r17,1015510 <_realloc_r+0x68>
 1015574:	00800304 	movi	r2,12
 1015578:	0023883a 	mov	r17,zero
 101557c:	b0800015 	stw	r2,0(r22)
 1015580:	8805883a 	mov	r2,r17
 1015584:	dfc00b17 	ldw	ra,44(sp)
 1015588:	df000a17 	ldw	fp,40(sp)
 101558c:	ddc00917 	ldw	r23,36(sp)
 1015590:	dd800817 	ldw	r22,32(sp)
 1015594:	dd400717 	ldw	r21,28(sp)
 1015598:	dd000617 	ldw	r20,24(sp)
 101559c:	dcc00517 	ldw	r19,20(sp)
 10155a0:	dc800417 	ldw	r18,16(sp)
 10155a4:	dc400317 	ldw	r17,12(sp)
 10155a8:	dc000217 	ldw	r16,8(sp)
 10155ac:	dec00c04 	addi	sp,sp,48
 10155b0:	f800283a 	ret
 10155b4:	008040b4 	movhi	r2,258
 10155b8:	109c8e04 	addi	r2,r2,29240
 10155bc:	12400217 	ldw	r9,8(r2)
 10155c0:	84cd883a 	add	r6,r16,r19
 10155c4:	802b883a 	mov	r21,r16
 10155c8:	3240b926 	beq	r6,r9,10158b0 <_realloc_r+0x408>
 10155cc:	31400117 	ldw	r5,4(r6)
 10155d0:	00bfff84 	movi	r2,-2
 10155d4:	2884703a 	and	r2,r5,r2
 10155d8:	1185883a 	add	r2,r2,r6
 10155dc:	10c00117 	ldw	r3,4(r2)
 10155e0:	18c0004c 	andi	r3,r3,1
 10155e4:	1807003a 	cmpeq	r3,r3,zero
 10155e8:	1800a326 	beq	r3,zero,1015878 <_realloc_r+0x3d0>
 10155ec:	2908703a 	and	r4,r5,r4
 10155f0:	9929883a 	add	r20,r19,r4
 10155f4:	a1c0a30e 	bge	r20,r7,1015884 <_realloc_r+0x3dc>
 10155f8:	4080004c 	andi	r2,r8,1
 10155fc:	1000551e 	bne	r2,zero,1015754 <_realloc_r+0x2ac>
 1015600:	80800017 	ldw	r2,0(r16)
 1015604:	80afc83a 	sub	r23,r16,r2
 1015608:	b8c00117 	ldw	r3,4(r23)
 101560c:	00bfff04 	movi	r2,-4
 1015610:	1884703a 	and	r2,r3,r2
 1015614:	30002e26 	beq	r6,zero,10156d0 <_realloc_r+0x228>
 1015618:	3240b926 	beq	r6,r9,1015900 <_realloc_r+0x458>
 101561c:	98a9883a 	add	r20,r19,r2
 1015620:	2509883a 	add	r4,r4,r20
 1015624:	d9000015 	stw	r4,0(sp)
 1015628:	21c02a16 	blt	r4,r7,10156d4 <_realloc_r+0x22c>
 101562c:	30800317 	ldw	r2,12(r6)
 1015630:	30c00217 	ldw	r3,8(r6)
 1015634:	01400904 	movi	r5,36
 1015638:	99bfff04 	addi	r6,r19,-4
 101563c:	18800315 	stw	r2,12(r3)
 1015640:	10c00215 	stw	r3,8(r2)
 1015644:	b9000317 	ldw	r4,12(r23)
 1015648:	b8800217 	ldw	r2,8(r23)
 101564c:	b82b883a 	mov	r21,r23
 1015650:	bc000204 	addi	r16,r23,8
 1015654:	20800215 	stw	r2,8(r4)
 1015658:	11000315 	stw	r4,12(r2)
 101565c:	2980e436 	bltu	r5,r6,10159f0 <_realloc_r+0x548>
 1015660:	008004c4 	movi	r2,19
 1015664:	9009883a 	mov	r4,r18
 1015668:	8011883a 	mov	r8,r16
 101566c:	11800f2e 	bgeu	r2,r6,10156ac <_realloc_r+0x204>
 1015670:	90800017 	ldw	r2,0(r18)
 1015674:	ba000404 	addi	r8,r23,16
 1015678:	91000204 	addi	r4,r18,8
 101567c:	b8800215 	stw	r2,8(r23)
 1015680:	90c00117 	ldw	r3,4(r18)
 1015684:	008006c4 	movi	r2,27
 1015688:	b8c00315 	stw	r3,12(r23)
 101568c:	1180072e 	bgeu	r2,r6,10156ac <_realloc_r+0x204>
 1015690:	90c00217 	ldw	r3,8(r18)
 1015694:	ba000604 	addi	r8,r23,24
 1015698:	91000404 	addi	r4,r18,16
 101569c:	b8c00415 	stw	r3,16(r23)
 10156a0:	90800317 	ldw	r2,12(r18)
 10156a4:	b8800515 	stw	r2,20(r23)
 10156a8:	3140e726 	beq	r6,r5,1015a48 <_realloc_r+0x5a0>
 10156ac:	20800017 	ldw	r2,0(r4)
 10156b0:	dd000017 	ldw	r20,0(sp)
 10156b4:	b80f883a 	mov	r7,r23
 10156b8:	40800015 	stw	r2,0(r8)
 10156bc:	20c00117 	ldw	r3,4(r4)
 10156c0:	40c00115 	stw	r3,4(r8)
 10156c4:	20800217 	ldw	r2,8(r4)
 10156c8:	40800215 	stw	r2,8(r8)
 10156cc:	003f9706 	br	101552c <_realloc_r+0x84>
 10156d0:	98a9883a 	add	r20,r19,r2
 10156d4:	a1c01f16 	blt	r20,r7,1015754 <_realloc_r+0x2ac>
 10156d8:	b8c00317 	ldw	r3,12(r23)
 10156dc:	b8800217 	ldw	r2,8(r23)
 10156e0:	99bfff04 	addi	r6,r19,-4
 10156e4:	01400904 	movi	r5,36
 10156e8:	b82b883a 	mov	r21,r23
 10156ec:	18800215 	stw	r2,8(r3)
 10156f0:	10c00315 	stw	r3,12(r2)
 10156f4:	bc000204 	addi	r16,r23,8
 10156f8:	2980c336 	bltu	r5,r6,1015a08 <_realloc_r+0x560>
 10156fc:	008004c4 	movi	r2,19
 1015700:	9009883a 	mov	r4,r18
 1015704:	8011883a 	mov	r8,r16
 1015708:	11800f2e 	bgeu	r2,r6,1015748 <_realloc_r+0x2a0>
 101570c:	90800017 	ldw	r2,0(r18)
 1015710:	ba000404 	addi	r8,r23,16
 1015714:	91000204 	addi	r4,r18,8
 1015718:	b8800215 	stw	r2,8(r23)
 101571c:	90c00117 	ldw	r3,4(r18)
 1015720:	008006c4 	movi	r2,27
 1015724:	b8c00315 	stw	r3,12(r23)
 1015728:	1180072e 	bgeu	r2,r6,1015748 <_realloc_r+0x2a0>
 101572c:	90c00217 	ldw	r3,8(r18)
 1015730:	ba000604 	addi	r8,r23,24
 1015734:	91000404 	addi	r4,r18,16
 1015738:	b8c00415 	stw	r3,16(r23)
 101573c:	90800317 	ldw	r2,12(r18)
 1015740:	b8800515 	stw	r2,20(r23)
 1015744:	3140c726 	beq	r6,r5,1015a64 <_realloc_r+0x5bc>
 1015748:	20800017 	ldw	r2,0(r4)
 101574c:	b80f883a 	mov	r7,r23
 1015750:	003fd906 	br	10156b8 <_realloc_r+0x210>
 1015754:	880b883a 	mov	r5,r17
 1015758:	b009883a 	mov	r4,r22
 101575c:	100e4b40 	call	100e4b4 <_malloc_r>
 1015760:	1023883a 	mov	r17,r2
 1015764:	10002526 	beq	r2,zero,10157fc <_realloc_r+0x354>
 1015768:	80800117 	ldw	r2,4(r16)
 101576c:	00ffff84 	movi	r3,-2
 1015770:	893ffe04 	addi	r4,r17,-8
 1015774:	10c4703a 	and	r2,r2,r3
 1015778:	8085883a 	add	r2,r16,r2
 101577c:	20809526 	beq	r4,r2,10159d4 <_realloc_r+0x52c>
 1015780:	99bfff04 	addi	r6,r19,-4
 1015784:	01c00904 	movi	r7,36
 1015788:	39804536 	bltu	r7,r6,10158a0 <_realloc_r+0x3f8>
 101578c:	008004c4 	movi	r2,19
 1015790:	9009883a 	mov	r4,r18
 1015794:	880b883a 	mov	r5,r17
 1015798:	11800f2e 	bgeu	r2,r6,10157d8 <_realloc_r+0x330>
 101579c:	90800017 	ldw	r2,0(r18)
 10157a0:	89400204 	addi	r5,r17,8
 10157a4:	91000204 	addi	r4,r18,8
 10157a8:	88800015 	stw	r2,0(r17)
 10157ac:	90c00117 	ldw	r3,4(r18)
 10157b0:	008006c4 	movi	r2,27
 10157b4:	88c00115 	stw	r3,4(r17)
 10157b8:	1180072e 	bgeu	r2,r6,10157d8 <_realloc_r+0x330>
 10157bc:	90c00217 	ldw	r3,8(r18)
 10157c0:	89400404 	addi	r5,r17,16
 10157c4:	91000404 	addi	r4,r18,16
 10157c8:	88c00215 	stw	r3,8(r17)
 10157cc:	90800317 	ldw	r2,12(r18)
 10157d0:	88800315 	stw	r2,12(r17)
 10157d4:	31c09126 	beq	r6,r7,1015a1c <_realloc_r+0x574>
 10157d8:	20800017 	ldw	r2,0(r4)
 10157dc:	28800015 	stw	r2,0(r5)
 10157e0:	20c00117 	ldw	r3,4(r4)
 10157e4:	28c00115 	stw	r3,4(r5)
 10157e8:	20800217 	ldw	r2,8(r4)
 10157ec:	28800215 	stw	r2,8(r5)
 10157f0:	900b883a 	mov	r5,r18
 10157f4:	b009883a 	mov	r4,r22
 10157f8:	10138940 	call	1013894 <_free_r>
 10157fc:	b009883a 	mov	r4,r22
 1015800:	10196340 	call	1019634 <__malloc_unlock>
 1015804:	003f5e06 	br	1015580 <_realloc_r+0xd8>
 1015808:	300b883a 	mov	r5,r6
 101580c:	dfc00b17 	ldw	ra,44(sp)
 1015810:	df000a17 	ldw	fp,40(sp)
 1015814:	ddc00917 	ldw	r23,36(sp)
 1015818:	dd800817 	ldw	r22,32(sp)
 101581c:	dd400717 	ldw	r21,28(sp)
 1015820:	dd000617 	ldw	r20,24(sp)
 1015824:	dcc00517 	ldw	r19,20(sp)
 1015828:	dc800417 	ldw	r18,16(sp)
 101582c:	dc400317 	ldw	r17,12(sp)
 1015830:	dc000217 	ldw	r16,8(sp)
 1015834:	dec00c04 	addi	sp,sp,48
 1015838:	100e4b41 	jmpi	100e4b4 <_malloc_r>
 101583c:	38800117 	ldw	r2,4(r7)
 1015840:	e54b883a 	add	r5,fp,r21
 1015844:	31000054 	ori	r4,r6,1
 1015848:	1080004c 	andi	r2,r2,1
 101584c:	1704b03a 	or	r2,r2,fp
 1015850:	38800115 	stw	r2,4(r7)
 1015854:	29000115 	stw	r4,4(r5)
 1015858:	2987883a 	add	r3,r5,r6
 101585c:	18800117 	ldw	r2,4(r3)
 1015860:	29400204 	addi	r5,r5,8
 1015864:	b009883a 	mov	r4,r22
 1015868:	10800054 	ori	r2,r2,1
 101586c:	18800115 	stw	r2,4(r3)
 1015870:	10138940 	call	1013894 <_free_r>
 1015874:	003f3806 	br	1015558 <_realloc_r+0xb0>
 1015878:	000d883a 	mov	r6,zero
 101587c:	0009883a 	mov	r4,zero
 1015880:	003f5d06 	br	10155f8 <_realloc_r+0x150>
 1015884:	30c00217 	ldw	r3,8(r6)
 1015888:	30800317 	ldw	r2,12(r6)
 101588c:	800f883a 	mov	r7,r16
 1015890:	84000204 	addi	r16,r16,8
 1015894:	10c00215 	stw	r3,8(r2)
 1015898:	18800315 	stw	r2,12(r3)
 101589c:	003f2306 	br	101552c <_realloc_r+0x84>
 10158a0:	8809883a 	mov	r4,r17
 10158a4:	900b883a 	mov	r5,r18
 10158a8:	100edec0 	call	100edec <memmove>
 10158ac:	003fd006 	br	10157f0 <_realloc_r+0x348>
 10158b0:	30800117 	ldw	r2,4(r6)
 10158b4:	e0c00404 	addi	r3,fp,16
 10158b8:	1108703a 	and	r4,r2,r4
 10158bc:	9905883a 	add	r2,r19,r4
 10158c0:	10ff4d16 	blt	r2,r3,10155f8 <_realloc_r+0x150>
 10158c4:	1705c83a 	sub	r2,r2,fp
 10158c8:	870b883a 	add	r5,r16,fp
 10158cc:	10800054 	ori	r2,r2,1
 10158d0:	28800115 	stw	r2,4(r5)
 10158d4:	80c00117 	ldw	r3,4(r16)
 10158d8:	008040b4 	movhi	r2,258
 10158dc:	109c8e04 	addi	r2,r2,29240
 10158e0:	b009883a 	mov	r4,r22
 10158e4:	18c0004c 	andi	r3,r3,1
 10158e8:	e0c6b03a 	or	r3,fp,r3
 10158ec:	11400215 	stw	r5,8(r2)
 10158f0:	80c00115 	stw	r3,4(r16)
 10158f4:	10196340 	call	1019634 <__malloc_unlock>
 10158f8:	84400204 	addi	r17,r16,8
 10158fc:	003f2006 	br	1015580 <_realloc_r+0xd8>
 1015900:	98a9883a 	add	r20,r19,r2
 1015904:	2509883a 	add	r4,r4,r20
 1015908:	e0800404 	addi	r2,fp,16
 101590c:	d9000115 	stw	r4,4(sp)
 1015910:	20bf7016 	blt	r4,r2,10156d4 <_realloc_r+0x22c>
 1015914:	b8c00317 	ldw	r3,12(r23)
 1015918:	b8800217 	ldw	r2,8(r23)
 101591c:	99bfff04 	addi	r6,r19,-4
 1015920:	01400904 	movi	r5,36
 1015924:	18800215 	stw	r2,8(r3)
 1015928:	10c00315 	stw	r3,12(r2)
 101592c:	bc400204 	addi	r17,r23,8
 1015930:	29804136 	bltu	r5,r6,1015a38 <_realloc_r+0x590>
 1015934:	008004c4 	movi	r2,19
 1015938:	9009883a 	mov	r4,r18
 101593c:	880f883a 	mov	r7,r17
 1015940:	11800f2e 	bgeu	r2,r6,1015980 <_realloc_r+0x4d8>
 1015944:	90800017 	ldw	r2,0(r18)
 1015948:	b9c00404 	addi	r7,r23,16
 101594c:	91000204 	addi	r4,r18,8
 1015950:	b8800215 	stw	r2,8(r23)
 1015954:	90c00117 	ldw	r3,4(r18)
 1015958:	008006c4 	movi	r2,27
 101595c:	b8c00315 	stw	r3,12(r23)
 1015960:	1180072e 	bgeu	r2,r6,1015980 <_realloc_r+0x4d8>
 1015964:	90c00217 	ldw	r3,8(r18)
 1015968:	b9c00604 	addi	r7,r23,24
 101596c:	91000404 	addi	r4,r18,16
 1015970:	b8c00415 	stw	r3,16(r23)
 1015974:	90800317 	ldw	r2,12(r18)
 1015978:	b8800515 	stw	r2,20(r23)
 101597c:	31404026 	beq	r6,r5,1015a80 <_realloc_r+0x5d8>
 1015980:	20800017 	ldw	r2,0(r4)
 1015984:	38800015 	stw	r2,0(r7)
 1015988:	20c00117 	ldw	r3,4(r4)
 101598c:	38c00115 	stw	r3,4(r7)
 1015990:	20800217 	ldw	r2,8(r4)
 1015994:	38800215 	stw	r2,8(r7)
 1015998:	d8c00117 	ldw	r3,4(sp)
 101599c:	bf0b883a 	add	r5,r23,fp
 10159a0:	b009883a 	mov	r4,r22
 10159a4:	1f05c83a 	sub	r2,r3,fp
 10159a8:	10800054 	ori	r2,r2,1
 10159ac:	28800115 	stw	r2,4(r5)
 10159b0:	b8c00117 	ldw	r3,4(r23)
 10159b4:	008040b4 	movhi	r2,258
 10159b8:	109c8e04 	addi	r2,r2,29240
 10159bc:	11400215 	stw	r5,8(r2)
 10159c0:	18c0004c 	andi	r3,r3,1
 10159c4:	e0c6b03a 	or	r3,fp,r3
 10159c8:	b8c00115 	stw	r3,4(r23)
 10159cc:	10196340 	call	1019634 <__malloc_unlock>
 10159d0:	003eeb06 	br	1015580 <_realloc_r+0xd8>
 10159d4:	20800117 	ldw	r2,4(r4)
 10159d8:	00ffff04 	movi	r3,-4
 10159dc:	800f883a 	mov	r7,r16
 10159e0:	10c4703a 	and	r2,r2,r3
 10159e4:	98a9883a 	add	r20,r19,r2
 10159e8:	84000204 	addi	r16,r16,8
 10159ec:	003ecf06 	br	101552c <_realloc_r+0x84>
 10159f0:	900b883a 	mov	r5,r18
 10159f4:	8009883a 	mov	r4,r16
 10159f8:	100edec0 	call	100edec <memmove>
 10159fc:	dd000017 	ldw	r20,0(sp)
 1015a00:	b80f883a 	mov	r7,r23
 1015a04:	003ec906 	br	101552c <_realloc_r+0x84>
 1015a08:	900b883a 	mov	r5,r18
 1015a0c:	8009883a 	mov	r4,r16
 1015a10:	100edec0 	call	100edec <memmove>
 1015a14:	b80f883a 	mov	r7,r23
 1015a18:	003ec406 	br	101552c <_realloc_r+0x84>
 1015a1c:	90c00417 	ldw	r3,16(r18)
 1015a20:	89400604 	addi	r5,r17,24
 1015a24:	91000604 	addi	r4,r18,24
 1015a28:	88c00415 	stw	r3,16(r17)
 1015a2c:	90800517 	ldw	r2,20(r18)
 1015a30:	88800515 	stw	r2,20(r17)
 1015a34:	003f6806 	br	10157d8 <_realloc_r+0x330>
 1015a38:	900b883a 	mov	r5,r18
 1015a3c:	8809883a 	mov	r4,r17
 1015a40:	100edec0 	call	100edec <memmove>
 1015a44:	003fd406 	br	1015998 <_realloc_r+0x4f0>
 1015a48:	90c00417 	ldw	r3,16(r18)
 1015a4c:	91000604 	addi	r4,r18,24
 1015a50:	ba000804 	addi	r8,r23,32
 1015a54:	b8c00615 	stw	r3,24(r23)
 1015a58:	90800517 	ldw	r2,20(r18)
 1015a5c:	b8800715 	stw	r2,28(r23)
 1015a60:	003f1206 	br	10156ac <_realloc_r+0x204>
 1015a64:	90c00417 	ldw	r3,16(r18)
 1015a68:	91000604 	addi	r4,r18,24
 1015a6c:	ba000804 	addi	r8,r23,32
 1015a70:	b8c00615 	stw	r3,24(r23)
 1015a74:	90800517 	ldw	r2,20(r18)
 1015a78:	b8800715 	stw	r2,28(r23)
 1015a7c:	003f3206 	br	1015748 <_realloc_r+0x2a0>
 1015a80:	90c00417 	ldw	r3,16(r18)
 1015a84:	91000604 	addi	r4,r18,24
 1015a88:	b9c00804 	addi	r7,r23,32
 1015a8c:	b8c00615 	stw	r3,24(r23)
 1015a90:	90800517 	ldw	r2,20(r18)
 1015a94:	b8800715 	stw	r2,28(r23)
 1015a98:	003fb906 	br	1015980 <_realloc_r+0x4d8>

01015a9c <__isinfd>:
 1015a9c:	200d883a 	mov	r6,r4
 1015aa0:	0109c83a 	sub	r4,zero,r4
 1015aa4:	2188b03a 	or	r4,r4,r6
 1015aa8:	2008d7fa 	srli	r4,r4,31
 1015aac:	00a00034 	movhi	r2,32768
 1015ab0:	10bfffc4 	addi	r2,r2,-1
 1015ab4:	1144703a 	and	r2,r2,r5
 1015ab8:	2088b03a 	or	r4,r4,r2
 1015abc:	009ffc34 	movhi	r2,32752
 1015ac0:	1105c83a 	sub	r2,r2,r4
 1015ac4:	0087c83a 	sub	r3,zero,r2
 1015ac8:	10c4b03a 	or	r2,r2,r3
 1015acc:	1004d7fa 	srli	r2,r2,31
 1015ad0:	00c00044 	movi	r3,1
 1015ad4:	1885c83a 	sub	r2,r3,r2
 1015ad8:	f800283a 	ret

01015adc <__isnand>:
 1015adc:	200d883a 	mov	r6,r4
 1015ae0:	0109c83a 	sub	r4,zero,r4
 1015ae4:	2188b03a 	or	r4,r4,r6
 1015ae8:	2008d7fa 	srli	r4,r4,31
 1015aec:	00a00034 	movhi	r2,32768
 1015af0:	10bfffc4 	addi	r2,r2,-1
 1015af4:	1144703a 	and	r2,r2,r5
 1015af8:	2088b03a 	or	r4,r4,r2
 1015afc:	009ffc34 	movhi	r2,32752
 1015b00:	1105c83a 	sub	r2,r2,r4
 1015b04:	1004d7fa 	srli	r2,r2,31
 1015b08:	f800283a 	ret

01015b0c <__sclose>:
 1015b0c:	2940038f 	ldh	r5,14(r5)
 1015b10:	1015e541 	jmpi	1015e54 <_close_r>

01015b14 <__sseek>:
 1015b14:	defffe04 	addi	sp,sp,-8
 1015b18:	dc000015 	stw	r16,0(sp)
 1015b1c:	2821883a 	mov	r16,r5
 1015b20:	2940038f 	ldh	r5,14(r5)
 1015b24:	dfc00115 	stw	ra,4(sp)
 1015b28:	10160cc0 	call	10160cc <_lseek_r>
 1015b2c:	1007883a 	mov	r3,r2
 1015b30:	00bfffc4 	movi	r2,-1
 1015b34:	18800926 	beq	r3,r2,1015b5c <__sseek+0x48>
 1015b38:	8080030b 	ldhu	r2,12(r16)
 1015b3c:	80c01415 	stw	r3,80(r16)
 1015b40:	10840014 	ori	r2,r2,4096
 1015b44:	8080030d 	sth	r2,12(r16)
 1015b48:	1805883a 	mov	r2,r3
 1015b4c:	dfc00117 	ldw	ra,4(sp)
 1015b50:	dc000017 	ldw	r16,0(sp)
 1015b54:	dec00204 	addi	sp,sp,8
 1015b58:	f800283a 	ret
 1015b5c:	8080030b 	ldhu	r2,12(r16)
 1015b60:	10bbffcc 	andi	r2,r2,61439
 1015b64:	8080030d 	sth	r2,12(r16)
 1015b68:	1805883a 	mov	r2,r3
 1015b6c:	dfc00117 	ldw	ra,4(sp)
 1015b70:	dc000017 	ldw	r16,0(sp)
 1015b74:	dec00204 	addi	sp,sp,8
 1015b78:	f800283a 	ret

01015b7c <__swrite>:
 1015b7c:	2880030b 	ldhu	r2,12(r5)
 1015b80:	defffb04 	addi	sp,sp,-20
 1015b84:	dcc00315 	stw	r19,12(sp)
 1015b88:	1080400c 	andi	r2,r2,256
 1015b8c:	dc800215 	stw	r18,8(sp)
 1015b90:	dc400115 	stw	r17,4(sp)
 1015b94:	dc000015 	stw	r16,0(sp)
 1015b98:	3027883a 	mov	r19,r6
 1015b9c:	3825883a 	mov	r18,r7
 1015ba0:	dfc00415 	stw	ra,16(sp)
 1015ba4:	2821883a 	mov	r16,r5
 1015ba8:	000d883a 	mov	r6,zero
 1015bac:	01c00084 	movi	r7,2
 1015bb0:	2023883a 	mov	r17,r4
 1015bb4:	10000226 	beq	r2,zero,1015bc0 <__swrite+0x44>
 1015bb8:	2940038f 	ldh	r5,14(r5)
 1015bbc:	10160cc0 	call	10160cc <_lseek_r>
 1015bc0:	8080030b 	ldhu	r2,12(r16)
 1015bc4:	8140038f 	ldh	r5,14(r16)
 1015bc8:	8809883a 	mov	r4,r17
 1015bcc:	10bbffcc 	andi	r2,r2,61439
 1015bd0:	980d883a 	mov	r6,r19
 1015bd4:	900f883a 	mov	r7,r18
 1015bd8:	8080030d 	sth	r2,12(r16)
 1015bdc:	dfc00417 	ldw	ra,16(sp)
 1015be0:	dcc00317 	ldw	r19,12(sp)
 1015be4:	dc800217 	ldw	r18,8(sp)
 1015be8:	dc400117 	ldw	r17,4(sp)
 1015bec:	dc000017 	ldw	r16,0(sp)
 1015bf0:	dec00504 	addi	sp,sp,20
 1015bf4:	1015d141 	jmpi	1015d14 <_write_r>

01015bf8 <__sread>:
 1015bf8:	defffe04 	addi	sp,sp,-8
 1015bfc:	dc000015 	stw	r16,0(sp)
 1015c00:	2821883a 	mov	r16,r5
 1015c04:	2940038f 	ldh	r5,14(r5)
 1015c08:	dfc00115 	stw	ra,4(sp)
 1015c0c:	10161440 	call	1016144 <_read_r>
 1015c10:	1007883a 	mov	r3,r2
 1015c14:	10000816 	blt	r2,zero,1015c38 <__sread+0x40>
 1015c18:	80801417 	ldw	r2,80(r16)
 1015c1c:	10c5883a 	add	r2,r2,r3
 1015c20:	80801415 	stw	r2,80(r16)
 1015c24:	1805883a 	mov	r2,r3
 1015c28:	dfc00117 	ldw	ra,4(sp)
 1015c2c:	dc000017 	ldw	r16,0(sp)
 1015c30:	dec00204 	addi	sp,sp,8
 1015c34:	f800283a 	ret
 1015c38:	8080030b 	ldhu	r2,12(r16)
 1015c3c:	10bbffcc 	andi	r2,r2,61439
 1015c40:	8080030d 	sth	r2,12(r16)
 1015c44:	1805883a 	mov	r2,r3
 1015c48:	dfc00117 	ldw	ra,4(sp)
 1015c4c:	dc000017 	ldw	r16,0(sp)
 1015c50:	dec00204 	addi	sp,sp,8
 1015c54:	f800283a 	ret

01015c58 <strcmp>:
 1015c58:	2144b03a 	or	r2,r4,r5
 1015c5c:	108000cc 	andi	r2,r2,3
 1015c60:	10001d1e 	bne	r2,zero,1015cd8 <strcmp+0x80>
 1015c64:	200f883a 	mov	r7,r4
 1015c68:	28800017 	ldw	r2,0(r5)
 1015c6c:	21000017 	ldw	r4,0(r4)
 1015c70:	280d883a 	mov	r6,r5
 1015c74:	2080161e 	bne	r4,r2,1015cd0 <strcmp+0x78>
 1015c78:	023fbff4 	movhi	r8,65279
 1015c7c:	423fbfc4 	addi	r8,r8,-257
 1015c80:	2207883a 	add	r3,r4,r8
 1015c84:	01602074 	movhi	r5,32897
 1015c88:	29602004 	addi	r5,r5,-32640
 1015c8c:	1946703a 	and	r3,r3,r5
 1015c90:	0104303a 	nor	r2,zero,r4
 1015c94:	10c4703a 	and	r2,r2,r3
 1015c98:	10001c1e 	bne	r2,zero,1015d0c <strcmp+0xb4>
 1015c9c:	4013883a 	mov	r9,r8
 1015ca0:	2811883a 	mov	r8,r5
 1015ca4:	00000106 	br	1015cac <strcmp+0x54>
 1015ca8:	1800181e 	bne	r3,zero,1015d0c <strcmp+0xb4>
 1015cac:	39c00104 	addi	r7,r7,4
 1015cb0:	39000017 	ldw	r4,0(r7)
 1015cb4:	31800104 	addi	r6,r6,4
 1015cb8:	31400017 	ldw	r5,0(r6)
 1015cbc:	2245883a 	add	r2,r4,r9
 1015cc0:	1204703a 	and	r2,r2,r8
 1015cc4:	0106303a 	nor	r3,zero,r4
 1015cc8:	1886703a 	and	r3,r3,r2
 1015ccc:	217ff626 	beq	r4,r5,1015ca8 <strcmp+0x50>
 1015cd0:	3809883a 	mov	r4,r7
 1015cd4:	300b883a 	mov	r5,r6
 1015cd8:	20c00007 	ldb	r3,0(r4)
 1015cdc:	1800051e 	bne	r3,zero,1015cf4 <strcmp+0x9c>
 1015ce0:	00000606 	br	1015cfc <strcmp+0xa4>
 1015ce4:	21000044 	addi	r4,r4,1
 1015ce8:	20c00007 	ldb	r3,0(r4)
 1015cec:	29400044 	addi	r5,r5,1
 1015cf0:	18000226 	beq	r3,zero,1015cfc <strcmp+0xa4>
 1015cf4:	28800007 	ldb	r2,0(r5)
 1015cf8:	18bffa26 	beq	r3,r2,1015ce4 <strcmp+0x8c>
 1015cfc:	20c00003 	ldbu	r3,0(r4)
 1015d00:	28800003 	ldbu	r2,0(r5)
 1015d04:	1885c83a 	sub	r2,r3,r2
 1015d08:	f800283a 	ret
 1015d0c:	0005883a 	mov	r2,zero
 1015d10:	f800283a 	ret

01015d14 <_write_r>:
 1015d14:	defffd04 	addi	sp,sp,-12
 1015d18:	dc000015 	stw	r16,0(sp)
 1015d1c:	040040f4 	movhi	r16,259
 1015d20:	84240f04 	addi	r16,r16,-28612
 1015d24:	dc400115 	stw	r17,4(sp)
 1015d28:	80000015 	stw	zero,0(r16)
 1015d2c:	2023883a 	mov	r17,r4
 1015d30:	2809883a 	mov	r4,r5
 1015d34:	300b883a 	mov	r5,r6
 1015d38:	380d883a 	mov	r6,r7
 1015d3c:	dfc00215 	stw	ra,8(sp)
 1015d40:	10192a00 	call	10192a0 <write>
 1015d44:	1007883a 	mov	r3,r2
 1015d48:	00bfffc4 	movi	r2,-1
 1015d4c:	18800626 	beq	r3,r2,1015d68 <_write_r+0x54>
 1015d50:	1805883a 	mov	r2,r3
 1015d54:	dfc00217 	ldw	ra,8(sp)
 1015d58:	dc400117 	ldw	r17,4(sp)
 1015d5c:	dc000017 	ldw	r16,0(sp)
 1015d60:	dec00304 	addi	sp,sp,12
 1015d64:	f800283a 	ret
 1015d68:	80800017 	ldw	r2,0(r16)
 1015d6c:	103ff826 	beq	r2,zero,1015d50 <_write_r+0x3c>
 1015d70:	88800015 	stw	r2,0(r17)
 1015d74:	1805883a 	mov	r2,r3
 1015d78:	dfc00217 	ldw	ra,8(sp)
 1015d7c:	dc400117 	ldw	r17,4(sp)
 1015d80:	dc000017 	ldw	r16,0(sp)
 1015d84:	dec00304 	addi	sp,sp,12
 1015d88:	f800283a 	ret

01015d8c <_calloc_r>:
 1015d8c:	defffe04 	addi	sp,sp,-8
 1015d90:	dc400015 	stw	r17,0(sp)
 1015d94:	2023883a 	mov	r17,r4
 1015d98:	2809883a 	mov	r4,r5
 1015d9c:	300b883a 	mov	r5,r6
 1015da0:	dfc00115 	stw	ra,4(sp)
 1015da4:	100def40 	call	100def4 <__mulsi3>
 1015da8:	100b883a 	mov	r5,r2
 1015dac:	8809883a 	mov	r4,r17
 1015db0:	100e4b40 	call	100e4b4 <_malloc_r>
 1015db4:	1023883a 	mov	r17,r2
 1015db8:	01c00904 	movi	r7,36
 1015dbc:	10000d26 	beq	r2,zero,1015df4 <_calloc_r+0x68>
 1015dc0:	10ffff17 	ldw	r3,-4(r2)
 1015dc4:	1009883a 	mov	r4,r2
 1015dc8:	00bfff04 	movi	r2,-4
 1015dcc:	1886703a 	and	r3,r3,r2
 1015dd0:	1887883a 	add	r3,r3,r2
 1015dd4:	180d883a 	mov	r6,r3
 1015dd8:	000b883a 	mov	r5,zero
 1015ddc:	38c01736 	bltu	r7,r3,1015e3c <_calloc_r+0xb0>
 1015de0:	008004c4 	movi	r2,19
 1015de4:	10c00836 	bltu	r2,r3,1015e08 <_calloc_r+0x7c>
 1015de8:	20000215 	stw	zero,8(r4)
 1015dec:	20000015 	stw	zero,0(r4)
 1015df0:	20000115 	stw	zero,4(r4)
 1015df4:	8805883a 	mov	r2,r17
 1015df8:	dfc00117 	ldw	ra,4(sp)
 1015dfc:	dc400017 	ldw	r17,0(sp)
 1015e00:	dec00204 	addi	sp,sp,8
 1015e04:	f800283a 	ret
 1015e08:	008006c4 	movi	r2,27
 1015e0c:	88000015 	stw	zero,0(r17)
 1015e10:	88000115 	stw	zero,4(r17)
 1015e14:	89000204 	addi	r4,r17,8
 1015e18:	10fff32e 	bgeu	r2,r3,1015de8 <_calloc_r+0x5c>
 1015e1c:	88000215 	stw	zero,8(r17)
 1015e20:	88000315 	stw	zero,12(r17)
 1015e24:	89000404 	addi	r4,r17,16
 1015e28:	19ffef1e 	bne	r3,r7,1015de8 <_calloc_r+0x5c>
 1015e2c:	89000604 	addi	r4,r17,24
 1015e30:	88000415 	stw	zero,16(r17)
 1015e34:	88000515 	stw	zero,20(r17)
 1015e38:	003feb06 	br	1015de8 <_calloc_r+0x5c>
 1015e3c:	100eecc0 	call	100eecc <memset>
 1015e40:	8805883a 	mov	r2,r17
 1015e44:	dfc00117 	ldw	ra,4(sp)
 1015e48:	dc400017 	ldw	r17,0(sp)
 1015e4c:	dec00204 	addi	sp,sp,8
 1015e50:	f800283a 	ret

01015e54 <_close_r>:
 1015e54:	defffd04 	addi	sp,sp,-12
 1015e58:	dc000015 	stw	r16,0(sp)
 1015e5c:	040040f4 	movhi	r16,259
 1015e60:	84240f04 	addi	r16,r16,-28612
 1015e64:	dc400115 	stw	r17,4(sp)
 1015e68:	80000015 	stw	zero,0(r16)
 1015e6c:	2023883a 	mov	r17,r4
 1015e70:	2809883a 	mov	r4,r5
 1015e74:	dfc00215 	stw	ra,8(sp)
 1015e78:	10187b80 	call	10187b8 <close>
 1015e7c:	1007883a 	mov	r3,r2
 1015e80:	00bfffc4 	movi	r2,-1
 1015e84:	18800626 	beq	r3,r2,1015ea0 <_close_r+0x4c>
 1015e88:	1805883a 	mov	r2,r3
 1015e8c:	dfc00217 	ldw	ra,8(sp)
 1015e90:	dc400117 	ldw	r17,4(sp)
 1015e94:	dc000017 	ldw	r16,0(sp)
 1015e98:	dec00304 	addi	sp,sp,12
 1015e9c:	f800283a 	ret
 1015ea0:	80800017 	ldw	r2,0(r16)
 1015ea4:	103ff826 	beq	r2,zero,1015e88 <_close_r+0x34>
 1015ea8:	88800015 	stw	r2,0(r17)
 1015eac:	1805883a 	mov	r2,r3
 1015eb0:	dfc00217 	ldw	ra,8(sp)
 1015eb4:	dc400117 	ldw	r17,4(sp)
 1015eb8:	dc000017 	ldw	r16,0(sp)
 1015ebc:	dec00304 	addi	sp,sp,12
 1015ec0:	f800283a 	ret

01015ec4 <_fclose_r>:
 1015ec4:	defffc04 	addi	sp,sp,-16
 1015ec8:	dc400115 	stw	r17,4(sp)
 1015ecc:	dc000015 	stw	r16,0(sp)
 1015ed0:	dfc00315 	stw	ra,12(sp)
 1015ed4:	dc800215 	stw	r18,8(sp)
 1015ed8:	2821883a 	mov	r16,r5
 1015edc:	2023883a 	mov	r17,r4
 1015ee0:	28002926 	beq	r5,zero,1015f88 <_fclose_r+0xc4>
 1015ee4:	10134cc0 	call	10134cc <__sfp_lock_acquire>
 1015ee8:	88000226 	beq	r17,zero,1015ef4 <_fclose_r+0x30>
 1015eec:	88800e17 	ldw	r2,56(r17)
 1015ef0:	10002d26 	beq	r2,zero,1015fa8 <_fclose_r+0xe4>
 1015ef4:	8080030f 	ldh	r2,12(r16)
 1015ef8:	10002226 	beq	r2,zero,1015f84 <_fclose_r+0xc0>
 1015efc:	8809883a 	mov	r4,r17
 1015f00:	800b883a 	mov	r5,r16
 1015f04:	10132440 	call	1013244 <_fflush_r>
 1015f08:	1025883a 	mov	r18,r2
 1015f0c:	80800b17 	ldw	r2,44(r16)
 1015f10:	10000426 	beq	r2,zero,1015f24 <_fclose_r+0x60>
 1015f14:	81400717 	ldw	r5,28(r16)
 1015f18:	8809883a 	mov	r4,r17
 1015f1c:	103ee83a 	callr	r2
 1015f20:	10002a16 	blt	r2,zero,1015fcc <_fclose_r+0x108>
 1015f24:	8080030b 	ldhu	r2,12(r16)
 1015f28:	1080200c 	andi	r2,r2,128
 1015f2c:	1000231e 	bne	r2,zero,1015fbc <_fclose_r+0xf8>
 1015f30:	81400c17 	ldw	r5,48(r16)
 1015f34:	28000526 	beq	r5,zero,1015f4c <_fclose_r+0x88>
 1015f38:	80801004 	addi	r2,r16,64
 1015f3c:	28800226 	beq	r5,r2,1015f48 <_fclose_r+0x84>
 1015f40:	8809883a 	mov	r4,r17
 1015f44:	10138940 	call	1013894 <_free_r>
 1015f48:	80000c15 	stw	zero,48(r16)
 1015f4c:	81401117 	ldw	r5,68(r16)
 1015f50:	28000326 	beq	r5,zero,1015f60 <_fclose_r+0x9c>
 1015f54:	8809883a 	mov	r4,r17
 1015f58:	10138940 	call	1013894 <_free_r>
 1015f5c:	80001115 	stw	zero,68(r16)
 1015f60:	8000030d 	sth	zero,12(r16)
 1015f64:	10134d00 	call	10134d0 <__sfp_lock_release>
 1015f68:	9005883a 	mov	r2,r18
 1015f6c:	dfc00317 	ldw	ra,12(sp)
 1015f70:	dc800217 	ldw	r18,8(sp)
 1015f74:	dc400117 	ldw	r17,4(sp)
 1015f78:	dc000017 	ldw	r16,0(sp)
 1015f7c:	dec00404 	addi	sp,sp,16
 1015f80:	f800283a 	ret
 1015f84:	10134d00 	call	10134d0 <__sfp_lock_release>
 1015f88:	0025883a 	mov	r18,zero
 1015f8c:	9005883a 	mov	r2,r18
 1015f90:	dfc00317 	ldw	ra,12(sp)
 1015f94:	dc800217 	ldw	r18,8(sp)
 1015f98:	dc400117 	ldw	r17,4(sp)
 1015f9c:	dc000017 	ldw	r16,0(sp)
 1015fa0:	dec00404 	addi	sp,sp,16
 1015fa4:	f800283a 	ret
 1015fa8:	8809883a 	mov	r4,r17
 1015fac:	10134dc0 	call	10134dc <__sinit>
 1015fb0:	8080030f 	ldh	r2,12(r16)
 1015fb4:	103fd11e 	bne	r2,zero,1015efc <_fclose_r+0x38>
 1015fb8:	003ff206 	br	1015f84 <_fclose_r+0xc0>
 1015fbc:	81400417 	ldw	r5,16(r16)
 1015fc0:	8809883a 	mov	r4,r17
 1015fc4:	10138940 	call	1013894 <_free_r>
 1015fc8:	003fd906 	br	1015f30 <_fclose_r+0x6c>
 1015fcc:	04bfffc4 	movi	r18,-1
 1015fd0:	003fd406 	br	1015f24 <_fclose_r+0x60>

01015fd4 <fclose>:
 1015fd4:	008040f4 	movhi	r2,259
 1015fd8:	10a3d104 	addi	r2,r2,-28860
 1015fdc:	200b883a 	mov	r5,r4
 1015fe0:	11000017 	ldw	r4,0(r2)
 1015fe4:	1015ec41 	jmpi	1015ec4 <_fclose_r>

01015fe8 <_fstat_r>:
 1015fe8:	defffd04 	addi	sp,sp,-12
 1015fec:	dc000015 	stw	r16,0(sp)
 1015ff0:	040040f4 	movhi	r16,259
 1015ff4:	84240f04 	addi	r16,r16,-28612
 1015ff8:	dc400115 	stw	r17,4(sp)
 1015ffc:	80000015 	stw	zero,0(r16)
 1016000:	2023883a 	mov	r17,r4
 1016004:	2809883a 	mov	r4,r5
 1016008:	300b883a 	mov	r5,r6
 101600c:	dfc00215 	stw	ra,8(sp)
 1016010:	10189b00 	call	10189b0 <fstat>
 1016014:	1007883a 	mov	r3,r2
 1016018:	00bfffc4 	movi	r2,-1
 101601c:	18800626 	beq	r3,r2,1016038 <_fstat_r+0x50>
 1016020:	1805883a 	mov	r2,r3
 1016024:	dfc00217 	ldw	ra,8(sp)
 1016028:	dc400117 	ldw	r17,4(sp)
 101602c:	dc000017 	ldw	r16,0(sp)
 1016030:	dec00304 	addi	sp,sp,12
 1016034:	f800283a 	ret
 1016038:	80800017 	ldw	r2,0(r16)
 101603c:	103ff826 	beq	r2,zero,1016020 <_fstat_r+0x38>
 1016040:	88800015 	stw	r2,0(r17)
 1016044:	1805883a 	mov	r2,r3
 1016048:	dfc00217 	ldw	ra,8(sp)
 101604c:	dc400117 	ldw	r17,4(sp)
 1016050:	dc000017 	ldw	r16,0(sp)
 1016054:	dec00304 	addi	sp,sp,12
 1016058:	f800283a 	ret

0101605c <_isatty_r>:
 101605c:	defffd04 	addi	sp,sp,-12
 1016060:	dc000015 	stw	r16,0(sp)
 1016064:	040040f4 	movhi	r16,259
 1016068:	84240f04 	addi	r16,r16,-28612
 101606c:	dc400115 	stw	r17,4(sp)
 1016070:	80000015 	stw	zero,0(r16)
 1016074:	2023883a 	mov	r17,r4
 1016078:	2809883a 	mov	r4,r5
 101607c:	dfc00215 	stw	ra,8(sp)
 1016080:	1018b080 	call	1018b08 <isatty>
 1016084:	1007883a 	mov	r3,r2
 1016088:	00bfffc4 	movi	r2,-1
 101608c:	18800626 	beq	r3,r2,10160a8 <_isatty_r+0x4c>
 1016090:	1805883a 	mov	r2,r3
 1016094:	dfc00217 	ldw	ra,8(sp)
 1016098:	dc400117 	ldw	r17,4(sp)
 101609c:	dc000017 	ldw	r16,0(sp)
 10160a0:	dec00304 	addi	sp,sp,12
 10160a4:	f800283a 	ret
 10160a8:	80800017 	ldw	r2,0(r16)
 10160ac:	103ff826 	beq	r2,zero,1016090 <_isatty_r+0x34>
 10160b0:	88800015 	stw	r2,0(r17)
 10160b4:	1805883a 	mov	r2,r3
 10160b8:	dfc00217 	ldw	ra,8(sp)
 10160bc:	dc400117 	ldw	r17,4(sp)
 10160c0:	dc000017 	ldw	r16,0(sp)
 10160c4:	dec00304 	addi	sp,sp,12
 10160c8:	f800283a 	ret

010160cc <_lseek_r>:
 10160cc:	defffd04 	addi	sp,sp,-12
 10160d0:	dc000015 	stw	r16,0(sp)
 10160d4:	040040f4 	movhi	r16,259
 10160d8:	84240f04 	addi	r16,r16,-28612
 10160dc:	dc400115 	stw	r17,4(sp)
 10160e0:	80000015 	stw	zero,0(r16)
 10160e4:	2023883a 	mov	r17,r4
 10160e8:	2809883a 	mov	r4,r5
 10160ec:	300b883a 	mov	r5,r6
 10160f0:	380d883a 	mov	r6,r7
 10160f4:	dfc00215 	stw	ra,8(sp)
 10160f8:	1018dcc0 	call	1018dcc <lseek>
 10160fc:	1007883a 	mov	r3,r2
 1016100:	00bfffc4 	movi	r2,-1
 1016104:	18800626 	beq	r3,r2,1016120 <_lseek_r+0x54>
 1016108:	1805883a 	mov	r2,r3
 101610c:	dfc00217 	ldw	ra,8(sp)
 1016110:	dc400117 	ldw	r17,4(sp)
 1016114:	dc000017 	ldw	r16,0(sp)
 1016118:	dec00304 	addi	sp,sp,12
 101611c:	f800283a 	ret
 1016120:	80800017 	ldw	r2,0(r16)
 1016124:	103ff826 	beq	r2,zero,1016108 <_lseek_r+0x3c>
 1016128:	88800015 	stw	r2,0(r17)
 101612c:	1805883a 	mov	r2,r3
 1016130:	dfc00217 	ldw	ra,8(sp)
 1016134:	dc400117 	ldw	r17,4(sp)
 1016138:	dc000017 	ldw	r16,0(sp)
 101613c:	dec00304 	addi	sp,sp,12
 1016140:	f800283a 	ret

01016144 <_read_r>:
 1016144:	defffd04 	addi	sp,sp,-12
 1016148:	dc000015 	stw	r16,0(sp)
 101614c:	040040f4 	movhi	r16,259
 1016150:	84240f04 	addi	r16,r16,-28612
 1016154:	dc400115 	stw	r17,4(sp)
 1016158:	80000015 	stw	zero,0(r16)
 101615c:	2023883a 	mov	r17,r4
 1016160:	2809883a 	mov	r4,r5
 1016164:	300b883a 	mov	r5,r6
 1016168:	380d883a 	mov	r6,r7
 101616c:	dfc00215 	stw	ra,8(sp)
 1016170:	1018fe80 	call	1018fe8 <read>
 1016174:	1007883a 	mov	r3,r2
 1016178:	00bfffc4 	movi	r2,-1
 101617c:	18800626 	beq	r3,r2,1016198 <_read_r+0x54>
 1016180:	1805883a 	mov	r2,r3
 1016184:	dfc00217 	ldw	ra,8(sp)
 1016188:	dc400117 	ldw	r17,4(sp)
 101618c:	dc000017 	ldw	r16,0(sp)
 1016190:	dec00304 	addi	sp,sp,12
 1016194:	f800283a 	ret
 1016198:	80800017 	ldw	r2,0(r16)
 101619c:	103ff826 	beq	r2,zero,1016180 <_read_r+0x3c>
 10161a0:	88800015 	stw	r2,0(r17)
 10161a4:	1805883a 	mov	r2,r3
 10161a8:	dfc00217 	ldw	ra,8(sp)
 10161ac:	dc400117 	ldw	r17,4(sp)
 10161b0:	dc000017 	ldw	r16,0(sp)
 10161b4:	dec00304 	addi	sp,sp,12
 10161b8:	f800283a 	ret

010161bc <__udivdi3>:
 10161bc:	defff104 	addi	sp,sp,-60
 10161c0:	0015883a 	mov	r10,zero
 10161c4:	2005883a 	mov	r2,r4
 10161c8:	3011883a 	mov	r8,r6
 10161cc:	df000d15 	stw	fp,52(sp)
 10161d0:	dd400a15 	stw	r21,40(sp)
 10161d4:	dcc00815 	stw	r19,32(sp)
 10161d8:	dfc00e15 	stw	ra,56(sp)
 10161dc:	ddc00c15 	stw	r23,48(sp)
 10161e0:	dd800b15 	stw	r22,44(sp)
 10161e4:	dd000915 	stw	r20,36(sp)
 10161e8:	dc800715 	stw	r18,28(sp)
 10161ec:	dc400615 	stw	r17,24(sp)
 10161f0:	dc000515 	stw	r16,20(sp)
 10161f4:	da800315 	stw	r10,12(sp)
 10161f8:	4027883a 	mov	r19,r8
 10161fc:	1039883a 	mov	fp,r2
 1016200:	282b883a 	mov	r21,r5
 1016204:	da800415 	stw	r10,16(sp)
 1016208:	3800401e 	bne	r7,zero,101630c <__udivdi3+0x150>
 101620c:	2a006536 	bltu	r5,r8,10163a4 <__udivdi3+0x1e8>
 1016210:	4000b526 	beq	r8,zero,10164e8 <__udivdi3+0x32c>
 1016214:	00bfffd4 	movui	r2,65535
 1016218:	14c0ad36 	bltu	r2,r19,10164d0 <__udivdi3+0x314>
 101621c:	00803fc4 	movi	r2,255
 1016220:	14c15e36 	bltu	r2,r19,101679c <__udivdi3+0x5e0>
 1016224:	000b883a 	mov	r5,zero
 1016228:	0005883a 	mov	r2,zero
 101622c:	9884d83a 	srl	r2,r19,r2
 1016230:	010040b4 	movhi	r4,258
 1016234:	211be504 	addi	r4,r4,28564
 1016238:	01800804 	movi	r6,32
 101623c:	1105883a 	add	r2,r2,r4
 1016240:	10c00003 	ldbu	r3,0(r2)
 1016244:	28c7883a 	add	r3,r5,r3
 1016248:	30e9c83a 	sub	r20,r6,r3
 101624c:	a0010a1e 	bne	r20,zero,1016678 <__udivdi3+0x4bc>
 1016250:	982ed43a 	srli	r23,r19,16
 1016254:	acebc83a 	sub	r21,r21,r19
 1016258:	9dbfffcc 	andi	r22,r19,65535
 101625c:	05000044 	movi	r20,1
 1016260:	a809883a 	mov	r4,r21
 1016264:	b80b883a 	mov	r5,r23
 1016268:	10180f00 	call	10180f0 <__udivsi3>
 101626c:	100b883a 	mov	r5,r2
 1016270:	b009883a 	mov	r4,r22
 1016274:	1021883a 	mov	r16,r2
 1016278:	100def40 	call	100def4 <__mulsi3>
 101627c:	a809883a 	mov	r4,r21
 1016280:	b80b883a 	mov	r5,r23
 1016284:	1023883a 	mov	r17,r2
 1016288:	10180f80 	call	10180f8 <__umodsi3>
 101628c:	1004943a 	slli	r2,r2,16
 1016290:	e006d43a 	srli	r3,fp,16
 1016294:	10c4b03a 	or	r2,r2,r3
 1016298:	1440042e 	bgeu	r2,r17,10162ac <__udivdi3+0xf0>
 101629c:	14c5883a 	add	r2,r2,r19
 10162a0:	843fffc4 	addi	r16,r16,-1
 10162a4:	14c00136 	bltu	r2,r19,10162ac <__udivdi3+0xf0>
 10162a8:	14415c36 	bltu	r2,r17,101681c <__udivdi3+0x660>
 10162ac:	1463c83a 	sub	r17,r2,r17
 10162b0:	8809883a 	mov	r4,r17
 10162b4:	b80b883a 	mov	r5,r23
 10162b8:	10180f00 	call	10180f0 <__udivsi3>
 10162bc:	100b883a 	mov	r5,r2
 10162c0:	b009883a 	mov	r4,r22
 10162c4:	102b883a 	mov	r21,r2
 10162c8:	100def40 	call	100def4 <__mulsi3>
 10162cc:	8809883a 	mov	r4,r17
 10162d0:	b80b883a 	mov	r5,r23
 10162d4:	1025883a 	mov	r18,r2
 10162d8:	10180f80 	call	10180f8 <__umodsi3>
 10162dc:	1004943a 	slli	r2,r2,16
 10162e0:	e0ffffcc 	andi	r3,fp,65535
 10162e4:	10c4b03a 	or	r2,r2,r3
 10162e8:	1480042e 	bgeu	r2,r18,10162fc <__udivdi3+0x140>
 10162ec:	9885883a 	add	r2,r19,r2
 10162f0:	ad7fffc4 	addi	r21,r21,-1
 10162f4:	14c00136 	bltu	r2,r19,10162fc <__udivdi3+0x140>
 10162f8:	14813c36 	bltu	r2,r18,10167ec <__udivdi3+0x630>
 10162fc:	8004943a 	slli	r2,r16,16
 1016300:	a009883a 	mov	r4,r20
 1016304:	a884b03a 	or	r2,r21,r2
 1016308:	00001506 	br	1016360 <__udivdi3+0x1a4>
 101630c:	380d883a 	mov	r6,r7
 1016310:	29c06c36 	bltu	r5,r7,10164c4 <__udivdi3+0x308>
 1016314:	00bfffd4 	movui	r2,65535
 1016318:	11c06436 	bltu	r2,r7,10164ac <__udivdi3+0x2f0>
 101631c:	00803fc4 	movi	r2,255
 1016320:	11c11836 	bltu	r2,r7,1016784 <__udivdi3+0x5c8>
 1016324:	000b883a 	mov	r5,zero
 1016328:	0005883a 	mov	r2,zero
 101632c:	3084d83a 	srl	r2,r6,r2
 1016330:	010040b4 	movhi	r4,258
 1016334:	211be504 	addi	r4,r4,28564
 1016338:	01c00804 	movi	r7,32
 101633c:	1105883a 	add	r2,r2,r4
 1016340:	10c00003 	ldbu	r3,0(r2)
 1016344:	28c7883a 	add	r3,r5,r3
 1016348:	38edc83a 	sub	r22,r7,r3
 101634c:	b000731e 	bne	r22,zero,101651c <__udivdi3+0x360>
 1016350:	35400136 	bltu	r6,r21,1016358 <__udivdi3+0x19c>
 1016354:	e4c05b36 	bltu	fp,r19,10164c4 <__udivdi3+0x308>
 1016358:	00800044 	movi	r2,1
 101635c:	0009883a 	mov	r4,zero
 1016360:	d8800315 	stw	r2,12(sp)
 1016364:	d9400317 	ldw	r5,12(sp)
 1016368:	2007883a 	mov	r3,r4
 101636c:	d9000415 	stw	r4,16(sp)
 1016370:	2805883a 	mov	r2,r5
 1016374:	dfc00e17 	ldw	ra,56(sp)
 1016378:	df000d17 	ldw	fp,52(sp)
 101637c:	ddc00c17 	ldw	r23,48(sp)
 1016380:	dd800b17 	ldw	r22,44(sp)
 1016384:	dd400a17 	ldw	r21,40(sp)
 1016388:	dd000917 	ldw	r20,36(sp)
 101638c:	dcc00817 	ldw	r19,32(sp)
 1016390:	dc800717 	ldw	r18,28(sp)
 1016394:	dc400617 	ldw	r17,24(sp)
 1016398:	dc000517 	ldw	r16,20(sp)
 101639c:	dec00f04 	addi	sp,sp,60
 10163a0:	f800283a 	ret
 10163a4:	00bfffd4 	movui	r2,65535
 10163a8:	12005636 	bltu	r2,r8,1016504 <__udivdi3+0x348>
 10163ac:	00803fc4 	movi	r2,255
 10163b0:	12010036 	bltu	r2,r8,10167b4 <__udivdi3+0x5f8>
 10163b4:	000b883a 	mov	r5,zero
 10163b8:	0005883a 	mov	r2,zero
 10163bc:	9884d83a 	srl	r2,r19,r2
 10163c0:	010040b4 	movhi	r4,258
 10163c4:	211be504 	addi	r4,r4,28564
 10163c8:	01800804 	movi	r6,32
 10163cc:	1105883a 	add	r2,r2,r4
 10163d0:	10c00003 	ldbu	r3,0(r2)
 10163d4:	28c7883a 	add	r3,r5,r3
 10163d8:	30cbc83a 	sub	r5,r6,r3
 10163dc:	28000626 	beq	r5,zero,10163f8 <__udivdi3+0x23c>
 10163e0:	3145c83a 	sub	r2,r6,r5
 10163e4:	e084d83a 	srl	r2,fp,r2
 10163e8:	a946983a 	sll	r3,r21,r5
 10163ec:	e178983a 	sll	fp,fp,r5
 10163f0:	9966983a 	sll	r19,r19,r5
 10163f4:	18aab03a 	or	r21,r3,r2
 10163f8:	982ed43a 	srli	r23,r19,16
 10163fc:	a809883a 	mov	r4,r21
 1016400:	9cbfffcc 	andi	r18,r19,65535
 1016404:	b80b883a 	mov	r5,r23
 1016408:	10180f00 	call	10180f0 <__udivsi3>
 101640c:	100b883a 	mov	r5,r2
 1016410:	9009883a 	mov	r4,r18
 1016414:	1021883a 	mov	r16,r2
 1016418:	100def40 	call	100def4 <__mulsi3>
 101641c:	a809883a 	mov	r4,r21
 1016420:	b80b883a 	mov	r5,r23
 1016424:	1023883a 	mov	r17,r2
 1016428:	10180f80 	call	10180f8 <__umodsi3>
 101642c:	1004943a 	slli	r2,r2,16
 1016430:	e006d43a 	srli	r3,fp,16
 1016434:	10c4b03a 	or	r2,r2,r3
 1016438:	1440042e 	bgeu	r2,r17,101644c <__udivdi3+0x290>
 101643c:	14c5883a 	add	r2,r2,r19
 1016440:	843fffc4 	addi	r16,r16,-1
 1016444:	14c00136 	bltu	r2,r19,101644c <__udivdi3+0x290>
 1016448:	1440ea36 	bltu	r2,r17,10167f4 <__udivdi3+0x638>
 101644c:	1463c83a 	sub	r17,r2,r17
 1016450:	8809883a 	mov	r4,r17
 1016454:	b80b883a 	mov	r5,r23
 1016458:	10180f00 	call	10180f0 <__udivsi3>
 101645c:	100b883a 	mov	r5,r2
 1016460:	9009883a 	mov	r4,r18
 1016464:	102b883a 	mov	r21,r2
 1016468:	100def40 	call	100def4 <__mulsi3>
 101646c:	8809883a 	mov	r4,r17
 1016470:	b80b883a 	mov	r5,r23
 1016474:	1025883a 	mov	r18,r2
 1016478:	10180f80 	call	10180f8 <__umodsi3>
 101647c:	1004943a 	slli	r2,r2,16
 1016480:	e0ffffcc 	andi	r3,fp,65535
 1016484:	10c4b03a 	or	r2,r2,r3
 1016488:	1480042e 	bgeu	r2,r18,101649c <__udivdi3+0x2e0>
 101648c:	9885883a 	add	r2,r19,r2
 1016490:	ad7fffc4 	addi	r21,r21,-1
 1016494:	14c00136 	bltu	r2,r19,101649c <__udivdi3+0x2e0>
 1016498:	1480d936 	bltu	r2,r18,1016800 <__udivdi3+0x644>
 101649c:	8004943a 	slli	r2,r16,16
 10164a0:	0009883a 	mov	r4,zero
 10164a4:	a884b03a 	or	r2,r21,r2
 10164a8:	003fad06 	br	1016360 <__udivdi3+0x1a4>
 10164ac:	00804034 	movhi	r2,256
 10164b0:	10bfffc4 	addi	r2,r2,-1
 10164b4:	11c0b636 	bltu	r2,r7,1016790 <__udivdi3+0x5d4>
 10164b8:	01400404 	movi	r5,16
 10164bc:	2805883a 	mov	r2,r5
 10164c0:	003f9a06 	br	101632c <__udivdi3+0x170>
 10164c4:	0005883a 	mov	r2,zero
 10164c8:	0009883a 	mov	r4,zero
 10164cc:	003fa406 	br	1016360 <__udivdi3+0x1a4>
 10164d0:	00804034 	movhi	r2,256
 10164d4:	10bfffc4 	addi	r2,r2,-1
 10164d8:	14c0b336 	bltu	r2,r19,10167a8 <__udivdi3+0x5ec>
 10164dc:	01400404 	movi	r5,16
 10164e0:	2805883a 	mov	r2,r5
 10164e4:	003f5106 	br	101622c <__udivdi3+0x70>
 10164e8:	01000044 	movi	r4,1
 10164ec:	000b883a 	mov	r5,zero
 10164f0:	10180f00 	call	10180f0 <__udivsi3>
 10164f4:	1027883a 	mov	r19,r2
 10164f8:	00bfffd4 	movui	r2,65535
 10164fc:	14fff436 	bltu	r2,r19,10164d0 <__udivdi3+0x314>
 1016500:	003f4606 	br	101621c <__udivdi3+0x60>
 1016504:	00804034 	movhi	r2,256
 1016508:	10bfffc4 	addi	r2,r2,-1
 101650c:	1200ac36 	bltu	r2,r8,10167c0 <__udivdi3+0x604>
 1016510:	01400404 	movi	r5,16
 1016514:	2805883a 	mov	r2,r5
 1016518:	003fa806 	br	10163bc <__udivdi3+0x200>
 101651c:	3d85c83a 	sub	r2,r7,r22
 1016520:	3588983a 	sll	r4,r6,r22
 1016524:	9886d83a 	srl	r3,r19,r2
 1016528:	a8a2d83a 	srl	r17,r21,r2
 101652c:	e084d83a 	srl	r2,fp,r2
 1016530:	20eeb03a 	or	r23,r4,r3
 1016534:	b824d43a 	srli	r18,r23,16
 1016538:	ad86983a 	sll	r3,r21,r22
 101653c:	8809883a 	mov	r4,r17
 1016540:	900b883a 	mov	r5,r18
 1016544:	1886b03a 	or	r3,r3,r2
 1016548:	d8c00115 	stw	r3,4(sp)
 101654c:	bc3fffcc 	andi	r16,r23,65535
 1016550:	10180f00 	call	10180f0 <__udivsi3>
 1016554:	100b883a 	mov	r5,r2
 1016558:	8009883a 	mov	r4,r16
 101655c:	1029883a 	mov	r20,r2
 1016560:	100def40 	call	100def4 <__mulsi3>
 1016564:	900b883a 	mov	r5,r18
 1016568:	8809883a 	mov	r4,r17
 101656c:	102b883a 	mov	r21,r2
 1016570:	10180f80 	call	10180f8 <__umodsi3>
 1016574:	d9400117 	ldw	r5,4(sp)
 1016578:	1004943a 	slli	r2,r2,16
 101657c:	9da6983a 	sll	r19,r19,r22
 1016580:	2806d43a 	srli	r3,r5,16
 1016584:	10c4b03a 	or	r2,r2,r3
 1016588:	1540032e 	bgeu	r2,r21,1016598 <__udivdi3+0x3dc>
 101658c:	15c5883a 	add	r2,r2,r23
 1016590:	a53fffc4 	addi	r20,r20,-1
 1016594:	15c0912e 	bgeu	r2,r23,10167dc <__udivdi3+0x620>
 1016598:	1563c83a 	sub	r17,r2,r21
 101659c:	8809883a 	mov	r4,r17
 10165a0:	900b883a 	mov	r5,r18
 10165a4:	10180f00 	call	10180f0 <__udivsi3>
 10165a8:	100b883a 	mov	r5,r2
 10165ac:	8009883a 	mov	r4,r16
 10165b0:	102b883a 	mov	r21,r2
 10165b4:	100def40 	call	100def4 <__mulsi3>
 10165b8:	8809883a 	mov	r4,r17
 10165bc:	900b883a 	mov	r5,r18
 10165c0:	1021883a 	mov	r16,r2
 10165c4:	10180f80 	call	10180f8 <__umodsi3>
 10165c8:	da800117 	ldw	r10,4(sp)
 10165cc:	1004943a 	slli	r2,r2,16
 10165d0:	50ffffcc 	andi	r3,r10,65535
 10165d4:	10c6b03a 	or	r3,r2,r3
 10165d8:	1c00032e 	bgeu	r3,r16,10165e8 <__udivdi3+0x42c>
 10165dc:	1dc7883a 	add	r3,r3,r23
 10165e0:	ad7fffc4 	addi	r21,r21,-1
 10165e4:	1dc0792e 	bgeu	r3,r23,10167cc <__udivdi3+0x610>
 10165e8:	a004943a 	slli	r2,r20,16
 10165ec:	982ed43a 	srli	r23,r19,16
 10165f0:	9cffffcc 	andi	r19,r19,65535
 10165f4:	a8a4b03a 	or	r18,r21,r2
 10165f8:	947fffcc 	andi	r17,r18,65535
 10165fc:	902ad43a 	srli	r21,r18,16
 1016600:	8809883a 	mov	r4,r17
 1016604:	980b883a 	mov	r5,r19
 1016608:	1c21c83a 	sub	r16,r3,r16
 101660c:	100def40 	call	100def4 <__mulsi3>
 1016610:	8809883a 	mov	r4,r17
 1016614:	b80b883a 	mov	r5,r23
 1016618:	1029883a 	mov	r20,r2
 101661c:	100def40 	call	100def4 <__mulsi3>
 1016620:	980b883a 	mov	r5,r19
 1016624:	a809883a 	mov	r4,r21
 1016628:	1023883a 	mov	r17,r2
 101662c:	100def40 	call	100def4 <__mulsi3>
 1016630:	a809883a 	mov	r4,r21
 1016634:	b80b883a 	mov	r5,r23
 1016638:	1027883a 	mov	r19,r2
 101663c:	100def40 	call	100def4 <__mulsi3>
 1016640:	1009883a 	mov	r4,r2
 1016644:	a004d43a 	srli	r2,r20,16
 1016648:	8ce3883a 	add	r17,r17,r19
 101664c:	1447883a 	add	r3,r2,r17
 1016650:	1cc0022e 	bgeu	r3,r19,101665c <__udivdi3+0x4a0>
 1016654:	00800074 	movhi	r2,1
 1016658:	2089883a 	add	r4,r4,r2
 101665c:	1804d43a 	srli	r2,r3,16
 1016660:	2085883a 	add	r2,r4,r2
 1016664:	80804436 	bltu	r16,r2,1016778 <__udivdi3+0x5bc>
 1016668:	80803e26 	beq	r16,r2,1016764 <__udivdi3+0x5a8>
 101666c:	9005883a 	mov	r2,r18
 1016670:	0009883a 	mov	r4,zero
 1016674:	003f3a06 	br	1016360 <__udivdi3+0x1a4>
 1016678:	9d26983a 	sll	r19,r19,r20
 101667c:	3505c83a 	sub	r2,r6,r20
 1016680:	a8a2d83a 	srl	r17,r21,r2
 1016684:	982ed43a 	srli	r23,r19,16
 1016688:	e084d83a 	srl	r2,fp,r2
 101668c:	ad06983a 	sll	r3,r21,r20
 1016690:	8809883a 	mov	r4,r17
 1016694:	b80b883a 	mov	r5,r23
 1016698:	1886b03a 	or	r3,r3,r2
 101669c:	d8c00015 	stw	r3,0(sp)
 10166a0:	9dbfffcc 	andi	r22,r19,65535
 10166a4:	10180f00 	call	10180f0 <__udivsi3>
 10166a8:	100b883a 	mov	r5,r2
 10166ac:	b009883a 	mov	r4,r22
 10166b0:	d8800215 	stw	r2,8(sp)
 10166b4:	100def40 	call	100def4 <__mulsi3>
 10166b8:	8809883a 	mov	r4,r17
 10166bc:	b80b883a 	mov	r5,r23
 10166c0:	102b883a 	mov	r21,r2
 10166c4:	10180f80 	call	10180f8 <__umodsi3>
 10166c8:	d9000017 	ldw	r4,0(sp)
 10166cc:	1004943a 	slli	r2,r2,16
 10166d0:	2006d43a 	srli	r3,r4,16
 10166d4:	10c4b03a 	or	r2,r2,r3
 10166d8:	1540052e 	bgeu	r2,r21,10166f0 <__udivdi3+0x534>
 10166dc:	d9400217 	ldw	r5,8(sp)
 10166e0:	14c5883a 	add	r2,r2,r19
 10166e4:	297fffc4 	addi	r5,r5,-1
 10166e8:	d9400215 	stw	r5,8(sp)
 10166ec:	14c0462e 	bgeu	r2,r19,1016808 <__udivdi3+0x64c>
 10166f0:	1563c83a 	sub	r17,r2,r21
 10166f4:	8809883a 	mov	r4,r17
 10166f8:	b80b883a 	mov	r5,r23
 10166fc:	10180f00 	call	10180f0 <__udivsi3>
 1016700:	100b883a 	mov	r5,r2
 1016704:	b009883a 	mov	r4,r22
 1016708:	1025883a 	mov	r18,r2
 101670c:	100def40 	call	100def4 <__mulsi3>
 1016710:	8809883a 	mov	r4,r17
 1016714:	b80b883a 	mov	r5,r23
 1016718:	1021883a 	mov	r16,r2
 101671c:	10180f80 	call	10180f8 <__umodsi3>
 1016720:	da800017 	ldw	r10,0(sp)
 1016724:	1004943a 	slli	r2,r2,16
 1016728:	50ffffcc 	andi	r3,r10,65535
 101672c:	10c6b03a 	or	r3,r2,r3
 1016730:	1c00062e 	bgeu	r3,r16,101674c <__udivdi3+0x590>
 1016734:	1cc7883a 	add	r3,r3,r19
 1016738:	94bfffc4 	addi	r18,r18,-1
 101673c:	1cc00336 	bltu	r3,r19,101674c <__udivdi3+0x590>
 1016740:	1c00022e 	bgeu	r3,r16,101674c <__udivdi3+0x590>
 1016744:	94bfffc4 	addi	r18,r18,-1
 1016748:	1cc7883a 	add	r3,r3,r19
 101674c:	d9000217 	ldw	r4,8(sp)
 1016750:	e538983a 	sll	fp,fp,r20
 1016754:	1c2bc83a 	sub	r21,r3,r16
 1016758:	2004943a 	slli	r2,r4,16
 101675c:	90a8b03a 	or	r20,r18,r2
 1016760:	003ebf06 	br	1016260 <__udivdi3+0xa4>
 1016764:	1804943a 	slli	r2,r3,16
 1016768:	e588983a 	sll	r4,fp,r22
 101676c:	a0ffffcc 	andi	r3,r20,65535
 1016770:	10c5883a 	add	r2,r2,r3
 1016774:	20bfbd2e 	bgeu	r4,r2,101666c <__udivdi3+0x4b0>
 1016778:	90bfffc4 	addi	r2,r18,-1
 101677c:	0009883a 	mov	r4,zero
 1016780:	003ef706 	br	1016360 <__udivdi3+0x1a4>
 1016784:	01400204 	movi	r5,8
 1016788:	2805883a 	mov	r2,r5
 101678c:	003ee706 	br	101632c <__udivdi3+0x170>
 1016790:	01400604 	movi	r5,24
 1016794:	2805883a 	mov	r2,r5
 1016798:	003ee406 	br	101632c <__udivdi3+0x170>
 101679c:	01400204 	movi	r5,8
 10167a0:	2805883a 	mov	r2,r5
 10167a4:	003ea106 	br	101622c <__udivdi3+0x70>
 10167a8:	01400604 	movi	r5,24
 10167ac:	2805883a 	mov	r2,r5
 10167b0:	003e9e06 	br	101622c <__udivdi3+0x70>
 10167b4:	01400204 	movi	r5,8
 10167b8:	2805883a 	mov	r2,r5
 10167bc:	003eff06 	br	10163bc <__udivdi3+0x200>
 10167c0:	01400604 	movi	r5,24
 10167c4:	2805883a 	mov	r2,r5
 10167c8:	003efc06 	br	10163bc <__udivdi3+0x200>
 10167cc:	1c3f862e 	bgeu	r3,r16,10165e8 <__udivdi3+0x42c>
 10167d0:	1dc7883a 	add	r3,r3,r23
 10167d4:	ad7fffc4 	addi	r21,r21,-1
 10167d8:	003f8306 	br	10165e8 <__udivdi3+0x42c>
 10167dc:	157f6e2e 	bgeu	r2,r21,1016598 <__udivdi3+0x3dc>
 10167e0:	a53fffc4 	addi	r20,r20,-1
 10167e4:	15c5883a 	add	r2,r2,r23
 10167e8:	003f6b06 	br	1016598 <__udivdi3+0x3dc>
 10167ec:	ad7fffc4 	addi	r21,r21,-1
 10167f0:	003ec206 	br	10162fc <__udivdi3+0x140>
 10167f4:	843fffc4 	addi	r16,r16,-1
 10167f8:	14c5883a 	add	r2,r2,r19
 10167fc:	003f1306 	br	101644c <__udivdi3+0x290>
 1016800:	ad7fffc4 	addi	r21,r21,-1
 1016804:	003f2506 	br	101649c <__udivdi3+0x2e0>
 1016808:	157fb92e 	bgeu	r2,r21,10166f0 <__udivdi3+0x534>
 101680c:	297fffc4 	addi	r5,r5,-1
 1016810:	14c5883a 	add	r2,r2,r19
 1016814:	d9400215 	stw	r5,8(sp)
 1016818:	003fb506 	br	10166f0 <__udivdi3+0x534>
 101681c:	843fffc4 	addi	r16,r16,-1
 1016820:	14c5883a 	add	r2,r2,r19
 1016824:	003ea106 	br	10162ac <__udivdi3+0xf0>

01016828 <__umoddi3>:
 1016828:	defff004 	addi	sp,sp,-64
 101682c:	3011883a 	mov	r8,r6
 1016830:	000d883a 	mov	r6,zero
 1016834:	dd400b15 	stw	r21,44(sp)
 1016838:	dcc00915 	stw	r19,36(sp)
 101683c:	dc000615 	stw	r16,24(sp)
 1016840:	dfc00f15 	stw	ra,60(sp)
 1016844:	df000e15 	stw	fp,56(sp)
 1016848:	ddc00d15 	stw	r23,52(sp)
 101684c:	dd800c15 	stw	r22,48(sp)
 1016850:	dd000a15 	stw	r20,40(sp)
 1016854:	dc800815 	stw	r18,32(sp)
 1016858:	dc400715 	stw	r17,28(sp)
 101685c:	2817883a 	mov	r11,r5
 1016860:	d9800415 	stw	r6,16(sp)
 1016864:	4027883a 	mov	r19,r8
 1016868:	d9800515 	stw	r6,20(sp)
 101686c:	2021883a 	mov	r16,r4
 1016870:	282b883a 	mov	r21,r5
 1016874:	38002c1e 	bne	r7,zero,1016928 <__umoddi3+0x100>
 1016878:	2a005636 	bltu	r5,r8,10169d4 <__umoddi3+0x1ac>
 101687c:	40009a26 	beq	r8,zero,1016ae8 <__umoddi3+0x2c0>
 1016880:	00bfffd4 	movui	r2,65535
 1016884:	14c09236 	bltu	r2,r19,1016ad0 <__umoddi3+0x2a8>
 1016888:	00803fc4 	movi	r2,255
 101688c:	14c15c36 	bltu	r2,r19,1016e00 <__umoddi3+0x5d8>
 1016890:	000b883a 	mov	r5,zero
 1016894:	0005883a 	mov	r2,zero
 1016898:	9884d83a 	srl	r2,r19,r2
 101689c:	010040b4 	movhi	r4,258
 10168a0:	211be504 	addi	r4,r4,28564
 10168a4:	01800804 	movi	r6,32
 10168a8:	1105883a 	add	r2,r2,r4
 10168ac:	10c00003 	ldbu	r3,0(r2)
 10168b0:	28c7883a 	add	r3,r5,r3
 10168b4:	30e5c83a 	sub	r18,r6,r3
 10168b8:	9000a41e 	bne	r18,zero,1016b4c <__umoddi3+0x324>
 10168bc:	982ed43a 	srli	r23,r19,16
 10168c0:	acebc83a 	sub	r21,r21,r19
 10168c4:	9d3fffcc 	andi	r20,r19,65535
 10168c8:	002d883a 	mov	r22,zero
 10168cc:	a809883a 	mov	r4,r21
 10168d0:	b80b883a 	mov	r5,r23
 10168d4:	10180f00 	call	10180f0 <__udivsi3>
 10168d8:	100b883a 	mov	r5,r2
 10168dc:	a009883a 	mov	r4,r20
 10168e0:	100def40 	call	100def4 <__mulsi3>
 10168e4:	a809883a 	mov	r4,r21
 10168e8:	b80b883a 	mov	r5,r23
 10168ec:	1023883a 	mov	r17,r2
 10168f0:	10180f80 	call	10180f8 <__umodsi3>
 10168f4:	1004943a 	slli	r2,r2,16
 10168f8:	8006d43a 	srli	r3,r16,16
 10168fc:	10c4b03a 	or	r2,r2,r3
 1016900:	1440032e 	bgeu	r2,r17,1016910 <__umoddi3+0xe8>
 1016904:	14c5883a 	add	r2,r2,r19
 1016908:	14c00136 	bltu	r2,r19,1016910 <__umoddi3+0xe8>
 101690c:	14415836 	bltu	r2,r17,1016e70 <__umoddi3+0x648>
 1016910:	1463c83a 	sub	r17,r2,r17
 1016914:	8809883a 	mov	r4,r17
 1016918:	b80b883a 	mov	r5,r23
 101691c:	10180f00 	call	10180f0 <__udivsi3>
 1016920:	a009883a 	mov	r4,r20
 1016924:	00005306 	br	1016a74 <__umoddi3+0x24c>
 1016928:	380d883a 	mov	r6,r7
 101692c:	29c0132e 	bgeu	r5,r7,101697c <__umoddi3+0x154>
 1016930:	d9000415 	stw	r4,16(sp)
 1016934:	d9400515 	stw	r5,20(sp)
 1016938:	d9400417 	ldw	r5,16(sp)
 101693c:	5813883a 	mov	r9,r11
 1016940:	2811883a 	mov	r8,r5
 1016944:	4005883a 	mov	r2,r8
 1016948:	4807883a 	mov	r3,r9
 101694c:	dfc00f17 	ldw	ra,60(sp)
 1016950:	df000e17 	ldw	fp,56(sp)
 1016954:	ddc00d17 	ldw	r23,52(sp)
 1016958:	dd800c17 	ldw	r22,48(sp)
 101695c:	dd400b17 	ldw	r21,44(sp)
 1016960:	dd000a17 	ldw	r20,40(sp)
 1016964:	dcc00917 	ldw	r19,36(sp)
 1016968:	dc800817 	ldw	r18,32(sp)
 101696c:	dc400717 	ldw	r17,28(sp)
 1016970:	dc000617 	ldw	r16,24(sp)
 1016974:	dec01004 	addi	sp,sp,64
 1016978:	f800283a 	ret
 101697c:	00bfffd4 	movui	r2,65535
 1016980:	11c06636 	bltu	r2,r7,1016b1c <__umoddi3+0x2f4>
 1016984:	00803fc4 	movi	r2,255
 1016988:	11c12036 	bltu	r2,r7,1016e0c <__umoddi3+0x5e4>
 101698c:	000b883a 	mov	r5,zero
 1016990:	0005883a 	mov	r2,zero
 1016994:	3084d83a 	srl	r2,r6,r2
 1016998:	010040b4 	movhi	r4,258
 101699c:	211be504 	addi	r4,r4,28564
 10169a0:	01c00804 	movi	r7,32
 10169a4:	1105883a 	add	r2,r2,r4
 10169a8:	10c00003 	ldbu	r3,0(r2)
 10169ac:	28c7883a 	add	r3,r5,r3
 10169b0:	38e5c83a 	sub	r18,r7,r3
 10169b4:	9000941e 	bne	r18,zero,1016c08 <__umoddi3+0x3e0>
 10169b8:	35405e36 	bltu	r6,r21,1016b34 <__umoddi3+0x30c>
 10169bc:	84c05d2e 	bgeu	r16,r19,1016b34 <__umoddi3+0x30c>
 10169c0:	8011883a 	mov	r8,r16
 10169c4:	a813883a 	mov	r9,r21
 10169c8:	dc000415 	stw	r16,16(sp)
 10169cc:	dd400515 	stw	r21,20(sp)
 10169d0:	003fdc06 	br	1016944 <__umoddi3+0x11c>
 10169d4:	00bfffd4 	movui	r2,65535
 10169d8:	12004a36 	bltu	r2,r8,1016b04 <__umoddi3+0x2dc>
 10169dc:	00803fc4 	movi	r2,255
 10169e0:	12010d36 	bltu	r2,r8,1016e18 <__umoddi3+0x5f0>
 10169e4:	000b883a 	mov	r5,zero
 10169e8:	0005883a 	mov	r2,zero
 10169ec:	9884d83a 	srl	r2,r19,r2
 10169f0:	010040b4 	movhi	r4,258
 10169f4:	211be504 	addi	r4,r4,28564
 10169f8:	01800804 	movi	r6,32
 10169fc:	1105883a 	add	r2,r2,r4
 1016a00:	10c00003 	ldbu	r3,0(r2)
 1016a04:	28c7883a 	add	r3,r5,r3
 1016a08:	30c7c83a 	sub	r3,r6,r3
 1016a0c:	1800dc1e 	bne	r3,zero,1016d80 <__umoddi3+0x558>
 1016a10:	002d883a 	mov	r22,zero
 1016a14:	982ed43a 	srli	r23,r19,16
 1016a18:	a809883a 	mov	r4,r21
 1016a1c:	9cbfffcc 	andi	r18,r19,65535
 1016a20:	b80b883a 	mov	r5,r23
 1016a24:	10180f00 	call	10180f0 <__udivsi3>
 1016a28:	100b883a 	mov	r5,r2
 1016a2c:	9009883a 	mov	r4,r18
 1016a30:	100def40 	call	100def4 <__mulsi3>
 1016a34:	a809883a 	mov	r4,r21
 1016a38:	b80b883a 	mov	r5,r23
 1016a3c:	1023883a 	mov	r17,r2
 1016a40:	10180f80 	call	10180f8 <__umodsi3>
 1016a44:	1004943a 	slli	r2,r2,16
 1016a48:	8006d43a 	srli	r3,r16,16
 1016a4c:	10c4b03a 	or	r2,r2,r3
 1016a50:	1440032e 	bgeu	r2,r17,1016a60 <__umoddi3+0x238>
 1016a54:	14c5883a 	add	r2,r2,r19
 1016a58:	14c00136 	bltu	r2,r19,1016a60 <__umoddi3+0x238>
 1016a5c:	14410236 	bltu	r2,r17,1016e68 <__umoddi3+0x640>
 1016a60:	1463c83a 	sub	r17,r2,r17
 1016a64:	8809883a 	mov	r4,r17
 1016a68:	b80b883a 	mov	r5,r23
 1016a6c:	10180f00 	call	10180f0 <__udivsi3>
 1016a70:	9009883a 	mov	r4,r18
 1016a74:	100b883a 	mov	r5,r2
 1016a78:	100def40 	call	100def4 <__mulsi3>
 1016a7c:	8809883a 	mov	r4,r17
 1016a80:	b80b883a 	mov	r5,r23
 1016a84:	102b883a 	mov	r21,r2
 1016a88:	10180f80 	call	10180f8 <__umodsi3>
 1016a8c:	1004943a 	slli	r2,r2,16
 1016a90:	80ffffcc 	andi	r3,r16,65535
 1016a94:	10c4b03a 	or	r2,r2,r3
 1016a98:	1540042e 	bgeu	r2,r21,1016aac <__umoddi3+0x284>
 1016a9c:	14c5883a 	add	r2,r2,r19
 1016aa0:	14c00236 	bltu	r2,r19,1016aac <__umoddi3+0x284>
 1016aa4:	1540012e 	bgeu	r2,r21,1016aac <__umoddi3+0x284>
 1016aa8:	14c5883a 	add	r2,r2,r19
 1016aac:	1545c83a 	sub	r2,r2,r21
 1016ab0:	1584d83a 	srl	r2,r2,r22
 1016ab4:	0013883a 	mov	r9,zero
 1016ab8:	d8800415 	stw	r2,16(sp)
 1016abc:	d8c00417 	ldw	r3,16(sp)
 1016ac0:	0005883a 	mov	r2,zero
 1016ac4:	d8800515 	stw	r2,20(sp)
 1016ac8:	1811883a 	mov	r8,r3
 1016acc:	003f9d06 	br	1016944 <__umoddi3+0x11c>
 1016ad0:	00804034 	movhi	r2,256
 1016ad4:	10bfffc4 	addi	r2,r2,-1
 1016ad8:	14c0c636 	bltu	r2,r19,1016df4 <__umoddi3+0x5cc>
 1016adc:	01400404 	movi	r5,16
 1016ae0:	2805883a 	mov	r2,r5
 1016ae4:	003f6c06 	br	1016898 <__umoddi3+0x70>
 1016ae8:	01000044 	movi	r4,1
 1016aec:	000b883a 	mov	r5,zero
 1016af0:	10180f00 	call	10180f0 <__udivsi3>
 1016af4:	1027883a 	mov	r19,r2
 1016af8:	00bfffd4 	movui	r2,65535
 1016afc:	14fff436 	bltu	r2,r19,1016ad0 <__umoddi3+0x2a8>
 1016b00:	003f6106 	br	1016888 <__umoddi3+0x60>
 1016b04:	00804034 	movhi	r2,256
 1016b08:	10bfffc4 	addi	r2,r2,-1
 1016b0c:	1200c536 	bltu	r2,r8,1016e24 <__umoddi3+0x5fc>
 1016b10:	01400404 	movi	r5,16
 1016b14:	2805883a 	mov	r2,r5
 1016b18:	003fb406 	br	10169ec <__umoddi3+0x1c4>
 1016b1c:	00804034 	movhi	r2,256
 1016b20:	10bfffc4 	addi	r2,r2,-1
 1016b24:	11c0c236 	bltu	r2,r7,1016e30 <__umoddi3+0x608>
 1016b28:	01400404 	movi	r5,16
 1016b2c:	2805883a 	mov	r2,r5
 1016b30:	003f9806 	br	1016994 <__umoddi3+0x16c>
 1016b34:	84c9c83a 	sub	r4,r16,r19
 1016b38:	8105803a 	cmpltu	r2,r16,r4
 1016b3c:	a987c83a 	sub	r3,r21,r6
 1016b40:	18abc83a 	sub	r21,r3,r2
 1016b44:	2021883a 	mov	r16,r4
 1016b48:	003f9d06 	br	10169c0 <__umoddi3+0x198>
 1016b4c:	9ca6983a 	sll	r19,r19,r18
 1016b50:	3485c83a 	sub	r2,r6,r18
 1016b54:	a8a2d83a 	srl	r17,r21,r2
 1016b58:	982ed43a 	srli	r23,r19,16
 1016b5c:	ac86983a 	sll	r3,r21,r18
 1016b60:	8084d83a 	srl	r2,r16,r2
 1016b64:	8809883a 	mov	r4,r17
 1016b68:	b80b883a 	mov	r5,r23
 1016b6c:	18b8b03a 	or	fp,r3,r2
 1016b70:	9d3fffcc 	andi	r20,r19,65535
 1016b74:	10180f00 	call	10180f0 <__udivsi3>
 1016b78:	100b883a 	mov	r5,r2
 1016b7c:	a009883a 	mov	r4,r20
 1016b80:	100def40 	call	100def4 <__mulsi3>
 1016b84:	8809883a 	mov	r4,r17
 1016b88:	b80b883a 	mov	r5,r23
 1016b8c:	102b883a 	mov	r21,r2
 1016b90:	10180f80 	call	10180f8 <__umodsi3>
 1016b94:	1004943a 	slli	r2,r2,16
 1016b98:	e006d43a 	srli	r3,fp,16
 1016b9c:	902d883a 	mov	r22,r18
 1016ba0:	10c4b03a 	or	r2,r2,r3
 1016ba4:	1540022e 	bgeu	r2,r21,1016bb0 <__umoddi3+0x388>
 1016ba8:	14c5883a 	add	r2,r2,r19
 1016bac:	14c0ab2e 	bgeu	r2,r19,1016e5c <__umoddi3+0x634>
 1016bb0:	1563c83a 	sub	r17,r2,r21
 1016bb4:	8809883a 	mov	r4,r17
 1016bb8:	b80b883a 	mov	r5,r23
 1016bbc:	10180f00 	call	10180f0 <__udivsi3>
 1016bc0:	100b883a 	mov	r5,r2
 1016bc4:	a009883a 	mov	r4,r20
 1016bc8:	100def40 	call	100def4 <__mulsi3>
 1016bcc:	8809883a 	mov	r4,r17
 1016bd0:	b80b883a 	mov	r5,r23
 1016bd4:	102b883a 	mov	r21,r2
 1016bd8:	10180f80 	call	10180f8 <__umodsi3>
 1016bdc:	1004943a 	slli	r2,r2,16
 1016be0:	e0ffffcc 	andi	r3,fp,65535
 1016be4:	10c4b03a 	or	r2,r2,r3
 1016be8:	1540042e 	bgeu	r2,r21,1016bfc <__umoddi3+0x3d4>
 1016bec:	14c5883a 	add	r2,r2,r19
 1016bf0:	14c00236 	bltu	r2,r19,1016bfc <__umoddi3+0x3d4>
 1016bf4:	1540012e 	bgeu	r2,r21,1016bfc <__umoddi3+0x3d4>
 1016bf8:	14c5883a 	add	r2,r2,r19
 1016bfc:	84a0983a 	sll	r16,r16,r18
 1016c00:	156bc83a 	sub	r21,r2,r21
 1016c04:	003f3106 	br	10168cc <__umoddi3+0xa4>
 1016c08:	3c8fc83a 	sub	r7,r7,r18
 1016c0c:	3486983a 	sll	r3,r6,r18
 1016c10:	99c4d83a 	srl	r2,r19,r7
 1016c14:	a9e2d83a 	srl	r17,r21,r7
 1016c18:	ac8c983a 	sll	r6,r21,r18
 1016c1c:	18acb03a 	or	r22,r3,r2
 1016c20:	b02ed43a 	srli	r23,r22,16
 1016c24:	81c4d83a 	srl	r2,r16,r7
 1016c28:	8809883a 	mov	r4,r17
 1016c2c:	b80b883a 	mov	r5,r23
 1016c30:	308cb03a 	or	r6,r6,r2
 1016c34:	d9c00315 	stw	r7,12(sp)
 1016c38:	d9800215 	stw	r6,8(sp)
 1016c3c:	b53fffcc 	andi	r20,r22,65535
 1016c40:	10180f00 	call	10180f0 <__udivsi3>
 1016c44:	100b883a 	mov	r5,r2
 1016c48:	a009883a 	mov	r4,r20
 1016c4c:	1039883a 	mov	fp,r2
 1016c50:	100def40 	call	100def4 <__mulsi3>
 1016c54:	8809883a 	mov	r4,r17
 1016c58:	b80b883a 	mov	r5,r23
 1016c5c:	102b883a 	mov	r21,r2
 1016c60:	10180f80 	call	10180f8 <__umodsi3>
 1016c64:	d9000217 	ldw	r4,8(sp)
 1016c68:	1004943a 	slli	r2,r2,16
 1016c6c:	9ca6983a 	sll	r19,r19,r18
 1016c70:	2006d43a 	srli	r3,r4,16
 1016c74:	84a0983a 	sll	r16,r16,r18
 1016c78:	dcc00015 	stw	r19,0(sp)
 1016c7c:	10c4b03a 	or	r2,r2,r3
 1016c80:	dc000115 	stw	r16,4(sp)
 1016c84:	1540032e 	bgeu	r2,r21,1016c94 <__umoddi3+0x46c>
 1016c88:	1585883a 	add	r2,r2,r22
 1016c8c:	e73fffc4 	addi	fp,fp,-1
 1016c90:	15806e2e 	bgeu	r2,r22,1016e4c <__umoddi3+0x624>
 1016c94:	1563c83a 	sub	r17,r2,r21
 1016c98:	8809883a 	mov	r4,r17
 1016c9c:	b80b883a 	mov	r5,r23
 1016ca0:	10180f00 	call	10180f0 <__udivsi3>
 1016ca4:	100b883a 	mov	r5,r2
 1016ca8:	a009883a 	mov	r4,r20
 1016cac:	1021883a 	mov	r16,r2
 1016cb0:	100def40 	call	100def4 <__mulsi3>
 1016cb4:	b80b883a 	mov	r5,r23
 1016cb8:	8809883a 	mov	r4,r17
 1016cbc:	1029883a 	mov	r20,r2
 1016cc0:	10180f80 	call	10180f8 <__umodsi3>
 1016cc4:	d9400217 	ldw	r5,8(sp)
 1016cc8:	1004943a 	slli	r2,r2,16
 1016ccc:	28ffffcc 	andi	r3,r5,65535
 1016cd0:	10c4b03a 	or	r2,r2,r3
 1016cd4:	1500032e 	bgeu	r2,r20,1016ce4 <__umoddi3+0x4bc>
 1016cd8:	1585883a 	add	r2,r2,r22
 1016cdc:	843fffc4 	addi	r16,r16,-1
 1016ce0:	1580562e 	bgeu	r2,r22,1016e3c <__umoddi3+0x614>
 1016ce4:	d9800017 	ldw	r6,0(sp)
 1016ce8:	e022943a 	slli	r17,fp,16
 1016cec:	302ed43a 	srli	r23,r6,16
 1016cf0:	8462b03a 	or	r17,r16,r17
 1016cf4:	34ffffcc 	andi	r19,r6,65535
 1016cf8:	882ad43a 	srli	r21,r17,16
 1016cfc:	8c7fffcc 	andi	r17,r17,65535
 1016d00:	8809883a 	mov	r4,r17
 1016d04:	980b883a 	mov	r5,r19
 1016d08:	1521c83a 	sub	r16,r2,r20
 1016d0c:	100def40 	call	100def4 <__mulsi3>
 1016d10:	8809883a 	mov	r4,r17
 1016d14:	b80b883a 	mov	r5,r23
 1016d18:	1029883a 	mov	r20,r2
 1016d1c:	100def40 	call	100def4 <__mulsi3>
 1016d20:	980b883a 	mov	r5,r19
 1016d24:	a809883a 	mov	r4,r21
 1016d28:	1023883a 	mov	r17,r2
 1016d2c:	100def40 	call	100def4 <__mulsi3>
 1016d30:	a809883a 	mov	r4,r21
 1016d34:	b80b883a 	mov	r5,r23
 1016d38:	1027883a 	mov	r19,r2
 1016d3c:	100def40 	call	100def4 <__mulsi3>
 1016d40:	100b883a 	mov	r5,r2
 1016d44:	a004d43a 	srli	r2,r20,16
 1016d48:	8ce3883a 	add	r17,r17,r19
 1016d4c:	1449883a 	add	r4,r2,r17
 1016d50:	24c0022e 	bgeu	r4,r19,1016d5c <__umoddi3+0x534>
 1016d54:	00800074 	movhi	r2,1
 1016d58:	288b883a 	add	r5,r5,r2
 1016d5c:	2004d43a 	srli	r2,r4,16
 1016d60:	2008943a 	slli	r4,r4,16
 1016d64:	a0ffffcc 	andi	r3,r20,65535
 1016d68:	288d883a 	add	r6,r5,r2
 1016d6c:	20c9883a 	add	r4,r4,r3
 1016d70:	81800b36 	bltu	r16,r6,1016da0 <__umoddi3+0x578>
 1016d74:	81804026 	beq	r16,r6,1016e78 <__umoddi3+0x650>
 1016d78:	818dc83a 	sub	r6,r16,r6
 1016d7c:	00000f06 	br	1016dbc <__umoddi3+0x594>
 1016d80:	30c5c83a 	sub	r2,r6,r3
 1016d84:	182d883a 	mov	r22,r3
 1016d88:	8084d83a 	srl	r2,r16,r2
 1016d8c:	a8c6983a 	sll	r3,r21,r3
 1016d90:	9da6983a 	sll	r19,r19,r22
 1016d94:	85a0983a 	sll	r16,r16,r22
 1016d98:	18aab03a 	or	r21,r3,r2
 1016d9c:	003f1d06 	br	1016a14 <__umoddi3+0x1ec>
 1016da0:	d8c00017 	ldw	r3,0(sp)
 1016da4:	20c5c83a 	sub	r2,r4,r3
 1016da8:	2089803a 	cmpltu	r4,r4,r2
 1016dac:	3587c83a 	sub	r3,r6,r22
 1016db0:	1907c83a 	sub	r3,r3,r4
 1016db4:	80cdc83a 	sub	r6,r16,r3
 1016db8:	1009883a 	mov	r4,r2
 1016dbc:	d9400117 	ldw	r5,4(sp)
 1016dc0:	2905c83a 	sub	r2,r5,r4
 1016dc4:	2887803a 	cmpltu	r3,r5,r2
 1016dc8:	30c7c83a 	sub	r3,r6,r3
 1016dcc:	d9800317 	ldw	r6,12(sp)
 1016dd0:	1484d83a 	srl	r2,r2,r18
 1016dd4:	1988983a 	sll	r4,r3,r6
 1016dd8:	1c86d83a 	srl	r3,r3,r18
 1016ddc:	2088b03a 	or	r4,r4,r2
 1016de0:	2011883a 	mov	r8,r4
 1016de4:	1813883a 	mov	r9,r3
 1016de8:	d9000415 	stw	r4,16(sp)
 1016dec:	d8c00515 	stw	r3,20(sp)
 1016df0:	003ed406 	br	1016944 <__umoddi3+0x11c>
 1016df4:	01400604 	movi	r5,24
 1016df8:	2805883a 	mov	r2,r5
 1016dfc:	003ea606 	br	1016898 <__umoddi3+0x70>
 1016e00:	01400204 	movi	r5,8
 1016e04:	2805883a 	mov	r2,r5
 1016e08:	003ea306 	br	1016898 <__umoddi3+0x70>
 1016e0c:	01400204 	movi	r5,8
 1016e10:	2805883a 	mov	r2,r5
 1016e14:	003edf06 	br	1016994 <__umoddi3+0x16c>
 1016e18:	01400204 	movi	r5,8
 1016e1c:	2805883a 	mov	r2,r5
 1016e20:	003ef206 	br	10169ec <__umoddi3+0x1c4>
 1016e24:	01400604 	movi	r5,24
 1016e28:	2805883a 	mov	r2,r5
 1016e2c:	003eef06 	br	10169ec <__umoddi3+0x1c4>
 1016e30:	01400604 	movi	r5,24
 1016e34:	2805883a 	mov	r2,r5
 1016e38:	003ed606 	br	1016994 <__umoddi3+0x16c>
 1016e3c:	153fa92e 	bgeu	r2,r20,1016ce4 <__umoddi3+0x4bc>
 1016e40:	843fffc4 	addi	r16,r16,-1
 1016e44:	1585883a 	add	r2,r2,r22
 1016e48:	003fa606 	br	1016ce4 <__umoddi3+0x4bc>
 1016e4c:	157f912e 	bgeu	r2,r21,1016c94 <__umoddi3+0x46c>
 1016e50:	e73fffc4 	addi	fp,fp,-1
 1016e54:	1585883a 	add	r2,r2,r22
 1016e58:	003f8e06 	br	1016c94 <__umoddi3+0x46c>
 1016e5c:	157f542e 	bgeu	r2,r21,1016bb0 <__umoddi3+0x388>
 1016e60:	14c5883a 	add	r2,r2,r19
 1016e64:	003f5206 	br	1016bb0 <__umoddi3+0x388>
 1016e68:	14c5883a 	add	r2,r2,r19
 1016e6c:	003efc06 	br	1016a60 <__umoddi3+0x238>
 1016e70:	14c5883a 	add	r2,r2,r19
 1016e74:	003ea606 	br	1016910 <__umoddi3+0xe8>
 1016e78:	d8800117 	ldw	r2,4(sp)
 1016e7c:	113fc836 	bltu	r2,r4,1016da0 <__umoddi3+0x578>
 1016e80:	000d883a 	mov	r6,zero
 1016e84:	003fcd06 	br	1016dbc <__umoddi3+0x594>

01016e88 <_fpadd_parts>:
 1016e88:	defff804 	addi	sp,sp,-32
 1016e8c:	dcc00315 	stw	r19,12(sp)
 1016e90:	2027883a 	mov	r19,r4
 1016e94:	21000017 	ldw	r4,0(r4)
 1016e98:	00c00044 	movi	r3,1
 1016e9c:	dd400515 	stw	r21,20(sp)
 1016ea0:	dd000415 	stw	r20,16(sp)
 1016ea4:	ddc00715 	stw	r23,28(sp)
 1016ea8:	dd800615 	stw	r22,24(sp)
 1016eac:	dc800215 	stw	r18,8(sp)
 1016eb0:	dc400115 	stw	r17,4(sp)
 1016eb4:	dc000015 	stw	r16,0(sp)
 1016eb8:	282b883a 	mov	r21,r5
 1016ebc:	3029883a 	mov	r20,r6
 1016ec0:	1900632e 	bgeu	r3,r4,1017050 <_fpadd_parts+0x1c8>
 1016ec4:	28800017 	ldw	r2,0(r5)
 1016ec8:	1880812e 	bgeu	r3,r2,10170d0 <_fpadd_parts+0x248>
 1016ecc:	00c00104 	movi	r3,4
 1016ed0:	20c0dc26 	beq	r4,r3,1017244 <_fpadd_parts+0x3bc>
 1016ed4:	10c07e26 	beq	r2,r3,10170d0 <_fpadd_parts+0x248>
 1016ed8:	00c00084 	movi	r3,2
 1016edc:	10c06726 	beq	r2,r3,101707c <_fpadd_parts+0x1f4>
 1016ee0:	20c07b26 	beq	r4,r3,10170d0 <_fpadd_parts+0x248>
 1016ee4:	9dc00217 	ldw	r23,8(r19)
 1016ee8:	28c00217 	ldw	r3,8(r5)
 1016eec:	9c400317 	ldw	r17,12(r19)
 1016ef0:	2bc00317 	ldw	r15,12(r5)
 1016ef4:	b8cdc83a 	sub	r6,r23,r3
 1016ef8:	9c800417 	ldw	r18,16(r19)
 1016efc:	2c000417 	ldw	r16,16(r5)
 1016f00:	3009883a 	mov	r4,r6
 1016f04:	30009716 	blt	r6,zero,1017164 <_fpadd_parts+0x2dc>
 1016f08:	00800fc4 	movi	r2,63
 1016f0c:	11806b16 	blt	r2,r6,10170bc <_fpadd_parts+0x234>
 1016f10:	0100a40e 	bge	zero,r4,10171a4 <_fpadd_parts+0x31c>
 1016f14:	35bff804 	addi	r22,r6,-32
 1016f18:	b000bc16 	blt	r22,zero,101720c <_fpadd_parts+0x384>
 1016f1c:	8596d83a 	srl	r11,r16,r22
 1016f20:	0019883a 	mov	r12,zero
 1016f24:	0013883a 	mov	r9,zero
 1016f28:	01000044 	movi	r4,1
 1016f2c:	0015883a 	mov	r10,zero
 1016f30:	b000be16 	blt	r22,zero,101722c <_fpadd_parts+0x3a4>
 1016f34:	2590983a 	sll	r8,r4,r22
 1016f38:	000f883a 	mov	r7,zero
 1016f3c:	00bfffc4 	movi	r2,-1
 1016f40:	3889883a 	add	r4,r7,r2
 1016f44:	408b883a 	add	r5,r8,r2
 1016f48:	21cd803a 	cmpltu	r6,r4,r7
 1016f4c:	314b883a 	add	r5,r6,r5
 1016f50:	7904703a 	and	r2,r15,r4
 1016f54:	8146703a 	and	r3,r16,r5
 1016f58:	10c4b03a 	or	r2,r2,r3
 1016f5c:	10000226 	beq	r2,zero,1016f68 <_fpadd_parts+0xe0>
 1016f60:	02400044 	movi	r9,1
 1016f64:	0015883a 	mov	r10,zero
 1016f68:	5a5eb03a 	or	r15,r11,r9
 1016f6c:	62a0b03a 	or	r16,r12,r10
 1016f70:	99400117 	ldw	r5,4(r19)
 1016f74:	a8800117 	ldw	r2,4(r21)
 1016f78:	28806e26 	beq	r5,r2,1017134 <_fpadd_parts+0x2ac>
 1016f7c:	28006626 	beq	r5,zero,1017118 <_fpadd_parts+0x290>
 1016f80:	7c45c83a 	sub	r2,r15,r17
 1016f84:	7889803a 	cmpltu	r4,r15,r2
 1016f88:	8487c83a 	sub	r3,r16,r18
 1016f8c:	1909c83a 	sub	r4,r3,r4
 1016f90:	100d883a 	mov	r6,r2
 1016f94:	200f883a 	mov	r7,r4
 1016f98:	38007716 	blt	r7,zero,1017178 <_fpadd_parts+0x2f0>
 1016f9c:	a5c00215 	stw	r23,8(r20)
 1016fa0:	a1c00415 	stw	r7,16(r20)
 1016fa4:	a0000115 	stw	zero,4(r20)
 1016fa8:	a1800315 	stw	r6,12(r20)
 1016fac:	a2000317 	ldw	r8,12(r20)
 1016fb0:	a2400417 	ldw	r9,16(r20)
 1016fb4:	00bfffc4 	movi	r2,-1
 1016fb8:	408b883a 	add	r5,r8,r2
 1016fbc:	2a09803a 	cmpltu	r4,r5,r8
 1016fc0:	488d883a 	add	r6,r9,r2
 1016fc4:	01c40034 	movhi	r7,4096
 1016fc8:	39ffffc4 	addi	r7,r7,-1
 1016fcc:	218d883a 	add	r6,r4,r6
 1016fd0:	39801736 	bltu	r7,r6,1017030 <_fpadd_parts+0x1a8>
 1016fd4:	31c06526 	beq	r6,r7,101716c <_fpadd_parts+0x2e4>
 1016fd8:	a3000217 	ldw	r12,8(r20)
 1016fdc:	4209883a 	add	r4,r8,r8
 1016fe0:	00bfffc4 	movi	r2,-1
 1016fe4:	220f803a 	cmpltu	r7,r4,r8
 1016fe8:	4a4b883a 	add	r5,r9,r9
 1016fec:	394f883a 	add	r7,r7,r5
 1016ff0:	2095883a 	add	r10,r4,r2
 1016ff4:	3897883a 	add	r11,r7,r2
 1016ff8:	510d803a 	cmpltu	r6,r10,r4
 1016ffc:	6099883a 	add	r12,r12,r2
 1017000:	32d7883a 	add	r11,r6,r11
 1017004:	00840034 	movhi	r2,4096
 1017008:	10bfffc4 	addi	r2,r2,-1
 101700c:	2011883a 	mov	r8,r4
 1017010:	3813883a 	mov	r9,r7
 1017014:	a1000315 	stw	r4,12(r20)
 1017018:	a1c00415 	stw	r7,16(r20)
 101701c:	a3000215 	stw	r12,8(r20)
 1017020:	12c00336 	bltu	r2,r11,1017030 <_fpadd_parts+0x1a8>
 1017024:	58bfed1e 	bne	r11,r2,1016fdc <_fpadd_parts+0x154>
 1017028:	00bfff84 	movi	r2,-2
 101702c:	12bfeb2e 	bgeu	r2,r10,1016fdc <_fpadd_parts+0x154>
 1017030:	a2800417 	ldw	r10,16(r20)
 1017034:	008000c4 	movi	r2,3
 1017038:	00c80034 	movhi	r3,8192
 101703c:	18ffffc4 	addi	r3,r3,-1
 1017040:	a2400317 	ldw	r9,12(r20)
 1017044:	a0800015 	stw	r2,0(r20)
 1017048:	1a802336 	bltu	r3,r10,10170d8 <_fpadd_parts+0x250>
 101704c:	a027883a 	mov	r19,r20
 1017050:	9805883a 	mov	r2,r19
 1017054:	ddc00717 	ldw	r23,28(sp)
 1017058:	dd800617 	ldw	r22,24(sp)
 101705c:	dd400517 	ldw	r21,20(sp)
 1017060:	dd000417 	ldw	r20,16(sp)
 1017064:	dcc00317 	ldw	r19,12(sp)
 1017068:	dc800217 	ldw	r18,8(sp)
 101706c:	dc400117 	ldw	r17,4(sp)
 1017070:	dc000017 	ldw	r16,0(sp)
 1017074:	dec00804 	addi	sp,sp,32
 1017078:	f800283a 	ret
 101707c:	20fff41e 	bne	r4,r3,1017050 <_fpadd_parts+0x1c8>
 1017080:	31000015 	stw	r4,0(r6)
 1017084:	98800117 	ldw	r2,4(r19)
 1017088:	30800115 	stw	r2,4(r6)
 101708c:	98c00217 	ldw	r3,8(r19)
 1017090:	30c00215 	stw	r3,8(r6)
 1017094:	98800317 	ldw	r2,12(r19)
 1017098:	30800315 	stw	r2,12(r6)
 101709c:	98c00417 	ldw	r3,16(r19)
 10170a0:	30c00415 	stw	r3,16(r6)
 10170a4:	98800117 	ldw	r2,4(r19)
 10170a8:	28c00117 	ldw	r3,4(r5)
 10170ac:	3027883a 	mov	r19,r6
 10170b0:	10c4703a 	and	r2,r2,r3
 10170b4:	30800115 	stw	r2,4(r6)
 10170b8:	003fe506 	br	1017050 <_fpadd_parts+0x1c8>
 10170bc:	1dc02616 	blt	r3,r23,1017158 <_fpadd_parts+0x2d0>
 10170c0:	0023883a 	mov	r17,zero
 10170c4:	182f883a 	mov	r23,r3
 10170c8:	0025883a 	mov	r18,zero
 10170cc:	003fa806 	br	1016f70 <_fpadd_parts+0xe8>
 10170d0:	a827883a 	mov	r19,r21
 10170d4:	003fde06 	br	1017050 <_fpadd_parts+0x1c8>
 10170d8:	01800044 	movi	r6,1
 10170dc:	500497fa 	slli	r2,r10,31
 10170e0:	4808d07a 	srli	r4,r9,1
 10170e4:	518ad83a 	srl	r5,r10,r6
 10170e8:	a2000217 	ldw	r8,8(r20)
 10170ec:	1108b03a 	or	r4,r2,r4
 10170f0:	0007883a 	mov	r3,zero
 10170f4:	4984703a 	and	r2,r9,r6
 10170f8:	208cb03a 	or	r6,r4,r2
 10170fc:	28ceb03a 	or	r7,r5,r3
 1017100:	42000044 	addi	r8,r8,1
 1017104:	a027883a 	mov	r19,r20
 1017108:	a1c00415 	stw	r7,16(r20)
 101710c:	a2000215 	stw	r8,8(r20)
 1017110:	a1800315 	stw	r6,12(r20)
 1017114:	003fce06 	br	1017050 <_fpadd_parts+0x1c8>
 1017118:	8bc5c83a 	sub	r2,r17,r15
 101711c:	8889803a 	cmpltu	r4,r17,r2
 1017120:	9407c83a 	sub	r3,r18,r16
 1017124:	1909c83a 	sub	r4,r3,r4
 1017128:	100d883a 	mov	r6,r2
 101712c:	200f883a 	mov	r7,r4
 1017130:	003f9906 	br	1016f98 <_fpadd_parts+0x110>
 1017134:	7c45883a 	add	r2,r15,r17
 1017138:	13c9803a 	cmpltu	r4,r2,r15
 101713c:	8487883a 	add	r3,r16,r18
 1017140:	20c9883a 	add	r4,r4,r3
 1017144:	a1400115 	stw	r5,4(r20)
 1017148:	a5c00215 	stw	r23,8(r20)
 101714c:	a0800315 	stw	r2,12(r20)
 1017150:	a1000415 	stw	r4,16(r20)
 1017154:	003fb606 	br	1017030 <_fpadd_parts+0x1a8>
 1017158:	001f883a 	mov	r15,zero
 101715c:	0021883a 	mov	r16,zero
 1017160:	003f8306 	br	1016f70 <_fpadd_parts+0xe8>
 1017164:	018dc83a 	sub	r6,zero,r6
 1017168:	003f6706 	br	1016f08 <_fpadd_parts+0x80>
 101716c:	00bfff84 	movi	r2,-2
 1017170:	117faf36 	bltu	r2,r5,1017030 <_fpadd_parts+0x1a8>
 1017174:	003f9806 	br	1016fd8 <_fpadd_parts+0x150>
 1017178:	0005883a 	mov	r2,zero
 101717c:	1189c83a 	sub	r4,r2,r6
 1017180:	1105803a 	cmpltu	r2,r2,r4
 1017184:	01cbc83a 	sub	r5,zero,r7
 1017188:	2885c83a 	sub	r2,r5,r2
 101718c:	01800044 	movi	r6,1
 1017190:	a1800115 	stw	r6,4(r20)
 1017194:	a5c00215 	stw	r23,8(r20)
 1017198:	a1000315 	stw	r4,12(r20)
 101719c:	a0800415 	stw	r2,16(r20)
 10171a0:	003f8206 	br	1016fac <_fpadd_parts+0x124>
 10171a4:	203f7226 	beq	r4,zero,1016f70 <_fpadd_parts+0xe8>
 10171a8:	35bff804 	addi	r22,r6,-32
 10171ac:	b9af883a 	add	r23,r23,r6
 10171b0:	b0003116 	blt	r22,zero,1017278 <_fpadd_parts+0x3f0>
 10171b4:	959ad83a 	srl	r13,r18,r22
 10171b8:	001d883a 	mov	r14,zero
 10171bc:	000f883a 	mov	r7,zero
 10171c0:	01000044 	movi	r4,1
 10171c4:	0011883a 	mov	r8,zero
 10171c8:	b0002516 	blt	r22,zero,1017260 <_fpadd_parts+0x3d8>
 10171cc:	2594983a 	sll	r10,r4,r22
 10171d0:	0013883a 	mov	r9,zero
 10171d4:	00bfffc4 	movi	r2,-1
 10171d8:	4889883a 	add	r4,r9,r2
 10171dc:	508b883a 	add	r5,r10,r2
 10171e0:	224d803a 	cmpltu	r6,r4,r9
 10171e4:	314b883a 	add	r5,r6,r5
 10171e8:	8904703a 	and	r2,r17,r4
 10171ec:	9146703a 	and	r3,r18,r5
 10171f0:	10c4b03a 	or	r2,r2,r3
 10171f4:	10000226 	beq	r2,zero,1017200 <_fpadd_parts+0x378>
 10171f8:	01c00044 	movi	r7,1
 10171fc:	0011883a 	mov	r8,zero
 1017200:	69e2b03a 	or	r17,r13,r7
 1017204:	7224b03a 	or	r18,r14,r8
 1017208:	003f5906 	br	1016f70 <_fpadd_parts+0xe8>
 101720c:	8407883a 	add	r3,r16,r16
 1017210:	008007c4 	movi	r2,31
 1017214:	1185c83a 	sub	r2,r2,r6
 1017218:	1886983a 	sll	r3,r3,r2
 101721c:	7996d83a 	srl	r11,r15,r6
 1017220:	8198d83a 	srl	r12,r16,r6
 1017224:	1ad6b03a 	or	r11,r3,r11
 1017228:	003f3e06 	br	1016f24 <_fpadd_parts+0x9c>
 101722c:	2006d07a 	srli	r3,r4,1
 1017230:	008007c4 	movi	r2,31
 1017234:	1185c83a 	sub	r2,r2,r6
 1017238:	1890d83a 	srl	r8,r3,r2
 101723c:	218e983a 	sll	r7,r4,r6
 1017240:	003f3e06 	br	1016f3c <_fpadd_parts+0xb4>
 1017244:	113f821e 	bne	r2,r4,1017050 <_fpadd_parts+0x1c8>
 1017248:	28c00117 	ldw	r3,4(r5)
 101724c:	98800117 	ldw	r2,4(r19)
 1017250:	10ff7f26 	beq	r2,r3,1017050 <_fpadd_parts+0x1c8>
 1017254:	04c040b4 	movhi	r19,258
 1017258:	9cdbe004 	addi	r19,r19,28544
 101725c:	003f7c06 	br	1017050 <_fpadd_parts+0x1c8>
 1017260:	2006d07a 	srli	r3,r4,1
 1017264:	008007c4 	movi	r2,31
 1017268:	1185c83a 	sub	r2,r2,r6
 101726c:	1894d83a 	srl	r10,r3,r2
 1017270:	2192983a 	sll	r9,r4,r6
 1017274:	003fd706 	br	10171d4 <_fpadd_parts+0x34c>
 1017278:	9487883a 	add	r3,r18,r18
 101727c:	008007c4 	movi	r2,31
 1017280:	1185c83a 	sub	r2,r2,r6
 1017284:	1886983a 	sll	r3,r3,r2
 1017288:	899ad83a 	srl	r13,r17,r6
 101728c:	919cd83a 	srl	r14,r18,r6
 1017290:	1b5ab03a 	or	r13,r3,r13
 1017294:	003fc906 	br	10171bc <_fpadd_parts+0x334>

01017298 <__subdf3>:
 1017298:	deffea04 	addi	sp,sp,-88
 101729c:	dcc01415 	stw	r19,80(sp)
 10172a0:	dcc00404 	addi	r19,sp,16
 10172a4:	2011883a 	mov	r8,r4
 10172a8:	2813883a 	mov	r9,r5
 10172ac:	dc401315 	stw	r17,76(sp)
 10172b0:	d809883a 	mov	r4,sp
 10172b4:	980b883a 	mov	r5,r19
 10172b8:	dc400904 	addi	r17,sp,36
 10172bc:	dfc01515 	stw	ra,84(sp)
 10172c0:	da400115 	stw	r9,4(sp)
 10172c4:	d9c00315 	stw	r7,12(sp)
 10172c8:	da000015 	stw	r8,0(sp)
 10172cc:	d9800215 	stw	r6,8(sp)
 10172d0:	10185b80 	call	10185b8 <__unpack_d>
 10172d4:	d9000204 	addi	r4,sp,8
 10172d8:	880b883a 	mov	r5,r17
 10172dc:	10185b80 	call	10185b8 <__unpack_d>
 10172e0:	d8800a17 	ldw	r2,40(sp)
 10172e4:	880b883a 	mov	r5,r17
 10172e8:	9809883a 	mov	r4,r19
 10172ec:	d9800e04 	addi	r6,sp,56
 10172f0:	1080005c 	xori	r2,r2,1
 10172f4:	d8800a15 	stw	r2,40(sp)
 10172f8:	1016e880 	call	1016e88 <_fpadd_parts>
 10172fc:	1009883a 	mov	r4,r2
 1017300:	10182a40 	call	10182a4 <__pack_d>
 1017304:	dfc01517 	ldw	ra,84(sp)
 1017308:	dcc01417 	ldw	r19,80(sp)
 101730c:	dc401317 	ldw	r17,76(sp)
 1017310:	dec01604 	addi	sp,sp,88
 1017314:	f800283a 	ret

01017318 <__adddf3>:
 1017318:	deffea04 	addi	sp,sp,-88
 101731c:	dcc01415 	stw	r19,80(sp)
 1017320:	dcc00404 	addi	r19,sp,16
 1017324:	2011883a 	mov	r8,r4
 1017328:	2813883a 	mov	r9,r5
 101732c:	dc401315 	stw	r17,76(sp)
 1017330:	d809883a 	mov	r4,sp
 1017334:	980b883a 	mov	r5,r19
 1017338:	dc400904 	addi	r17,sp,36
 101733c:	dfc01515 	stw	ra,84(sp)
 1017340:	da400115 	stw	r9,4(sp)
 1017344:	d9c00315 	stw	r7,12(sp)
 1017348:	da000015 	stw	r8,0(sp)
 101734c:	d9800215 	stw	r6,8(sp)
 1017350:	10185b80 	call	10185b8 <__unpack_d>
 1017354:	d9000204 	addi	r4,sp,8
 1017358:	880b883a 	mov	r5,r17
 101735c:	10185b80 	call	10185b8 <__unpack_d>
 1017360:	d9800e04 	addi	r6,sp,56
 1017364:	9809883a 	mov	r4,r19
 1017368:	880b883a 	mov	r5,r17
 101736c:	1016e880 	call	1016e88 <_fpadd_parts>
 1017370:	1009883a 	mov	r4,r2
 1017374:	10182a40 	call	10182a4 <__pack_d>
 1017378:	dfc01517 	ldw	ra,84(sp)
 101737c:	dcc01417 	ldw	r19,80(sp)
 1017380:	dc401317 	ldw	r17,76(sp)
 1017384:	dec01604 	addi	sp,sp,88
 1017388:	f800283a 	ret

0101738c <__muldf3>:
 101738c:	deffe004 	addi	sp,sp,-128
 1017390:	dc401815 	stw	r17,96(sp)
 1017394:	dc400404 	addi	r17,sp,16
 1017398:	2011883a 	mov	r8,r4
 101739c:	2813883a 	mov	r9,r5
 10173a0:	dc001715 	stw	r16,92(sp)
 10173a4:	d809883a 	mov	r4,sp
 10173a8:	880b883a 	mov	r5,r17
 10173ac:	dc000904 	addi	r16,sp,36
 10173b0:	dfc01f15 	stw	ra,124(sp)
 10173b4:	da400115 	stw	r9,4(sp)
 10173b8:	d9c00315 	stw	r7,12(sp)
 10173bc:	da000015 	stw	r8,0(sp)
 10173c0:	d9800215 	stw	r6,8(sp)
 10173c4:	ddc01e15 	stw	r23,120(sp)
 10173c8:	dd801d15 	stw	r22,116(sp)
 10173cc:	dd401c15 	stw	r21,112(sp)
 10173d0:	dd001b15 	stw	r20,108(sp)
 10173d4:	dcc01a15 	stw	r19,104(sp)
 10173d8:	dc801915 	stw	r18,100(sp)
 10173dc:	10185b80 	call	10185b8 <__unpack_d>
 10173e0:	d9000204 	addi	r4,sp,8
 10173e4:	800b883a 	mov	r5,r16
 10173e8:	10185b80 	call	10185b8 <__unpack_d>
 10173ec:	d9000417 	ldw	r4,16(sp)
 10173f0:	00800044 	movi	r2,1
 10173f4:	1100102e 	bgeu	r2,r4,1017438 <__muldf3+0xac>
 10173f8:	d8c00917 	ldw	r3,36(sp)
 10173fc:	10c0062e 	bgeu	r2,r3,1017418 <__muldf3+0x8c>
 1017400:	00800104 	movi	r2,4
 1017404:	20800a26 	beq	r4,r2,1017430 <__muldf3+0xa4>
 1017408:	1880cc26 	beq	r3,r2,101773c <__muldf3+0x3b0>
 101740c:	00800084 	movi	r2,2
 1017410:	20800926 	beq	r4,r2,1017438 <__muldf3+0xac>
 1017414:	1880191e 	bne	r3,r2,101747c <__muldf3+0xf0>
 1017418:	d8c00a17 	ldw	r3,40(sp)
 101741c:	d8800517 	ldw	r2,20(sp)
 1017420:	8009883a 	mov	r4,r16
 1017424:	10c4c03a 	cmpne	r2,r2,r3
 1017428:	d8800a15 	stw	r2,40(sp)
 101742c:	00000706 	br	101744c <__muldf3+0xc0>
 1017430:	00800084 	movi	r2,2
 1017434:	1880c326 	beq	r3,r2,1017744 <__muldf3+0x3b8>
 1017438:	d8800517 	ldw	r2,20(sp)
 101743c:	d8c00a17 	ldw	r3,40(sp)
 1017440:	8809883a 	mov	r4,r17
 1017444:	10c4c03a 	cmpne	r2,r2,r3
 1017448:	d8800515 	stw	r2,20(sp)
 101744c:	10182a40 	call	10182a4 <__pack_d>
 1017450:	dfc01f17 	ldw	ra,124(sp)
 1017454:	ddc01e17 	ldw	r23,120(sp)
 1017458:	dd801d17 	ldw	r22,116(sp)
 101745c:	dd401c17 	ldw	r21,112(sp)
 1017460:	dd001b17 	ldw	r20,108(sp)
 1017464:	dcc01a17 	ldw	r19,104(sp)
 1017468:	dc801917 	ldw	r18,100(sp)
 101746c:	dc401817 	ldw	r17,96(sp)
 1017470:	dc001717 	ldw	r16,92(sp)
 1017474:	dec02004 	addi	sp,sp,128
 1017478:	f800283a 	ret
 101747c:	dd800717 	ldw	r22,28(sp)
 1017480:	dc800c17 	ldw	r18,48(sp)
 1017484:	002b883a 	mov	r21,zero
 1017488:	0023883a 	mov	r17,zero
 101748c:	a80b883a 	mov	r5,r21
 1017490:	b00d883a 	mov	r6,r22
 1017494:	880f883a 	mov	r7,r17
 1017498:	ddc00817 	ldw	r23,32(sp)
 101749c:	dcc00d17 	ldw	r19,52(sp)
 10174a0:	9009883a 	mov	r4,r18
 10174a4:	10181000 	call	1018100 <__muldi3>
 10174a8:	001b883a 	mov	r13,zero
 10174ac:	680f883a 	mov	r7,r13
 10174b0:	b009883a 	mov	r4,r22
 10174b4:	000b883a 	mov	r5,zero
 10174b8:	980d883a 	mov	r6,r19
 10174bc:	b82d883a 	mov	r22,r23
 10174c0:	002f883a 	mov	r23,zero
 10174c4:	db401615 	stw	r13,88(sp)
 10174c8:	d8801315 	stw	r2,76(sp)
 10174cc:	d8c01415 	stw	r3,80(sp)
 10174d0:	dcc01515 	stw	r19,84(sp)
 10174d4:	10181000 	call	1018100 <__muldi3>
 10174d8:	b00d883a 	mov	r6,r22
 10174dc:	000b883a 	mov	r5,zero
 10174e0:	9009883a 	mov	r4,r18
 10174e4:	b80f883a 	mov	r7,r23
 10174e8:	1021883a 	mov	r16,r2
 10174ec:	1823883a 	mov	r17,r3
 10174f0:	10181000 	call	1018100 <__muldi3>
 10174f4:	8085883a 	add	r2,r16,r2
 10174f8:	140d803a 	cmpltu	r6,r2,r16
 10174fc:	88c7883a 	add	r3,r17,r3
 1017500:	30cd883a 	add	r6,r6,r3
 1017504:	1029883a 	mov	r20,r2
 1017508:	302b883a 	mov	r21,r6
 101750c:	da801317 	ldw	r10,76(sp)
 1017510:	dac01417 	ldw	r11,80(sp)
 1017514:	db001517 	ldw	r12,84(sp)
 1017518:	db401617 	ldw	r13,88(sp)
 101751c:	3440612e 	bgeu	r6,r17,10176a4 <__muldf3+0x318>
 1017520:	0009883a 	mov	r4,zero
 1017524:	5105883a 	add	r2,r10,r4
 1017528:	128d803a 	cmpltu	r6,r2,r10
 101752c:	5d07883a 	add	r3,r11,r20
 1017530:	30cd883a 	add	r6,r6,r3
 1017534:	0021883a 	mov	r16,zero
 1017538:	04400044 	movi	r17,1
 101753c:	1025883a 	mov	r18,r2
 1017540:	3027883a 	mov	r19,r6
 1017544:	32c06236 	bltu	r6,r11,10176d0 <__muldf3+0x344>
 1017548:	59807a26 	beq	r11,r6,1017734 <__muldf3+0x3a8>
 101754c:	680b883a 	mov	r5,r13
 1017550:	b80f883a 	mov	r7,r23
 1017554:	6009883a 	mov	r4,r12
 1017558:	b00d883a 	mov	r6,r22
 101755c:	10181000 	call	1018100 <__muldi3>
 1017560:	1009883a 	mov	r4,r2
 1017564:	000f883a 	mov	r7,zero
 1017568:	1545883a 	add	r2,r2,r21
 101756c:	1111803a 	cmpltu	r8,r2,r4
 1017570:	19c7883a 	add	r3,r3,r7
 1017574:	40c7883a 	add	r3,r8,r3
 1017578:	88cb883a 	add	r5,r17,r3
 101757c:	d8c00617 	ldw	r3,24(sp)
 1017580:	8089883a 	add	r4,r16,r2
 1017584:	d8800b17 	ldw	r2,44(sp)
 1017588:	18c00104 	addi	r3,r3,4
 101758c:	240d803a 	cmpltu	r6,r4,r16
 1017590:	10c7883a 	add	r3,r2,r3
 1017594:	2013883a 	mov	r9,r4
 1017598:	d8800a17 	ldw	r2,40(sp)
 101759c:	d9000517 	ldw	r4,20(sp)
 10175a0:	314d883a 	add	r6,r6,r5
 10175a4:	3015883a 	mov	r10,r6
 10175a8:	2088c03a 	cmpne	r4,r4,r2
 10175ac:	00880034 	movhi	r2,8192
 10175b0:	10bfffc4 	addi	r2,r2,-1
 10175b4:	d9000f15 	stw	r4,60(sp)
 10175b8:	d8c01015 	stw	r3,64(sp)
 10175bc:	1180162e 	bgeu	r2,r6,1017618 <__muldf3+0x28c>
 10175c0:	1811883a 	mov	r8,r3
 10175c4:	101f883a 	mov	r15,r2
 10175c8:	980497fa 	slli	r2,r19,31
 10175cc:	9016d07a 	srli	r11,r18,1
 10175d0:	500697fa 	slli	r3,r10,31
 10175d4:	480cd07a 	srli	r6,r9,1
 10175d8:	500ed07a 	srli	r7,r10,1
 10175dc:	12d6b03a 	or	r11,r2,r11
 10175e0:	00800044 	movi	r2,1
 10175e4:	198cb03a 	or	r6,r3,r6
 10175e8:	4888703a 	and	r4,r9,r2
 10175ec:	9818d07a 	srli	r12,r19,1
 10175f0:	001b883a 	mov	r13,zero
 10175f4:	03a00034 	movhi	r14,32768
 10175f8:	3013883a 	mov	r9,r6
 10175fc:	3815883a 	mov	r10,r7
 1017600:	4091883a 	add	r8,r8,r2
 1017604:	20000226 	beq	r4,zero,1017610 <__muldf3+0x284>
 1017608:	5b64b03a 	or	r18,r11,r13
 101760c:	63a6b03a 	or	r19,r12,r14
 1017610:	7abfed36 	bltu	r15,r10,10175c8 <__muldf3+0x23c>
 1017614:	da001015 	stw	r8,64(sp)
 1017618:	00840034 	movhi	r2,4096
 101761c:	10bfffc4 	addi	r2,r2,-1
 1017620:	12801436 	bltu	r2,r10,1017674 <__muldf3+0x2e8>
 1017624:	da001017 	ldw	r8,64(sp)
 1017628:	101f883a 	mov	r15,r2
 101762c:	4a45883a 	add	r2,r9,r9
 1017630:	124d803a 	cmpltu	r6,r2,r9
 1017634:	5287883a 	add	r3,r10,r10
 1017638:	9497883a 	add	r11,r18,r18
 101763c:	5c8f803a 	cmpltu	r7,r11,r18
 1017640:	9cd9883a 	add	r12,r19,r19
 1017644:	01000044 	movi	r4,1
 1017648:	30cd883a 	add	r6,r6,r3
 101764c:	3b0f883a 	add	r7,r7,r12
 1017650:	423fffc4 	addi	r8,r8,-1
 1017654:	1013883a 	mov	r9,r2
 1017658:	3015883a 	mov	r10,r6
 101765c:	111ab03a 	or	r13,r2,r4
 1017660:	98003016 	blt	r19,zero,1017724 <__muldf3+0x398>
 1017664:	5825883a 	mov	r18,r11
 1017668:	3827883a 	mov	r19,r7
 101766c:	7abfef2e 	bgeu	r15,r10,101762c <__muldf3+0x2a0>
 1017670:	da001015 	stw	r8,64(sp)
 1017674:	00803fc4 	movi	r2,255
 1017678:	488e703a 	and	r7,r9,r2
 101767c:	00802004 	movi	r2,128
 1017680:	0007883a 	mov	r3,zero
 1017684:	0011883a 	mov	r8,zero
 1017688:	38801826 	beq	r7,r2,10176ec <__muldf3+0x360>
 101768c:	008000c4 	movi	r2,3
 1017690:	d9000e04 	addi	r4,sp,56
 1017694:	da801215 	stw	r10,72(sp)
 1017698:	d8800e15 	stw	r2,56(sp)
 101769c:	da401115 	stw	r9,68(sp)
 10176a0:	003f6a06 	br	101744c <__muldf3+0xc0>
 10176a4:	89802126 	beq	r17,r6,101772c <__muldf3+0x3a0>
 10176a8:	0009883a 	mov	r4,zero
 10176ac:	5105883a 	add	r2,r10,r4
 10176b0:	128d803a 	cmpltu	r6,r2,r10
 10176b4:	5d07883a 	add	r3,r11,r20
 10176b8:	30cd883a 	add	r6,r6,r3
 10176bc:	0021883a 	mov	r16,zero
 10176c0:	0023883a 	mov	r17,zero
 10176c4:	1025883a 	mov	r18,r2
 10176c8:	3027883a 	mov	r19,r6
 10176cc:	32ff9e2e 	bgeu	r6,r11,1017548 <__muldf3+0x1bc>
 10176d0:	00800044 	movi	r2,1
 10176d4:	8089883a 	add	r4,r16,r2
 10176d8:	240d803a 	cmpltu	r6,r4,r16
 10176dc:	344d883a 	add	r6,r6,r17
 10176e0:	2021883a 	mov	r16,r4
 10176e4:	3023883a 	mov	r17,r6
 10176e8:	003f9806 	br	101754c <__muldf3+0x1c0>
 10176ec:	403fe71e 	bne	r8,zero,101768c <__muldf3+0x300>
 10176f0:	01004004 	movi	r4,256
 10176f4:	4904703a 	and	r2,r9,r4
 10176f8:	10c4b03a 	or	r2,r2,r3
 10176fc:	103fe31e 	bne	r2,zero,101768c <__muldf3+0x300>
 1017700:	94c4b03a 	or	r2,r18,r19
 1017704:	103fe126 	beq	r2,zero,101768c <__muldf3+0x300>
 1017708:	49c5883a 	add	r2,r9,r7
 101770c:	1251803a 	cmpltu	r8,r2,r9
 1017710:	4291883a 	add	r8,r8,r10
 1017714:	013fc004 	movi	r4,-256
 1017718:	1112703a 	and	r9,r2,r4
 101771c:	4015883a 	mov	r10,r8
 1017720:	003fda06 	br	101768c <__muldf3+0x300>
 1017724:	6813883a 	mov	r9,r13
 1017728:	003fce06 	br	1017664 <__muldf3+0x2d8>
 101772c:	143f7c36 	bltu	r2,r16,1017520 <__muldf3+0x194>
 1017730:	003fdd06 	br	10176a8 <__muldf3+0x31c>
 1017734:	12bf852e 	bgeu	r2,r10,101754c <__muldf3+0x1c0>
 1017738:	003fe506 	br	10176d0 <__muldf3+0x344>
 101773c:	00800084 	movi	r2,2
 1017740:	20bf351e 	bne	r4,r2,1017418 <__muldf3+0x8c>
 1017744:	010040b4 	movhi	r4,258
 1017748:	211be004 	addi	r4,r4,28544
 101774c:	003f3f06 	br	101744c <__muldf3+0xc0>

01017750 <__divdf3>:
 1017750:	deffed04 	addi	sp,sp,-76
 1017754:	dcc01115 	stw	r19,68(sp)
 1017758:	dcc00404 	addi	r19,sp,16
 101775c:	2011883a 	mov	r8,r4
 1017760:	2813883a 	mov	r9,r5
 1017764:	dc000e15 	stw	r16,56(sp)
 1017768:	d809883a 	mov	r4,sp
 101776c:	980b883a 	mov	r5,r19
 1017770:	dc000904 	addi	r16,sp,36
 1017774:	dfc01215 	stw	ra,72(sp)
 1017778:	da400115 	stw	r9,4(sp)
 101777c:	d9c00315 	stw	r7,12(sp)
 1017780:	da000015 	stw	r8,0(sp)
 1017784:	d9800215 	stw	r6,8(sp)
 1017788:	dc801015 	stw	r18,64(sp)
 101778c:	dc400f15 	stw	r17,60(sp)
 1017790:	10185b80 	call	10185b8 <__unpack_d>
 1017794:	d9000204 	addi	r4,sp,8
 1017798:	800b883a 	mov	r5,r16
 101779c:	10185b80 	call	10185b8 <__unpack_d>
 10177a0:	d9000417 	ldw	r4,16(sp)
 10177a4:	00800044 	movi	r2,1
 10177a8:	11000b2e 	bgeu	r2,r4,10177d8 <__divdf3+0x88>
 10177ac:	d9400917 	ldw	r5,36(sp)
 10177b0:	1140762e 	bgeu	r2,r5,101798c <__divdf3+0x23c>
 10177b4:	d8800517 	ldw	r2,20(sp)
 10177b8:	d8c00a17 	ldw	r3,40(sp)
 10177bc:	01800104 	movi	r6,4
 10177c0:	10c4f03a 	xor	r2,r2,r3
 10177c4:	d8800515 	stw	r2,20(sp)
 10177c8:	21800226 	beq	r4,r6,10177d4 <__divdf3+0x84>
 10177cc:	00800084 	movi	r2,2
 10177d0:	2080141e 	bne	r4,r2,1017824 <__divdf3+0xd4>
 10177d4:	29000926 	beq	r5,r4,10177fc <__divdf3+0xac>
 10177d8:	9809883a 	mov	r4,r19
 10177dc:	10182a40 	call	10182a4 <__pack_d>
 10177e0:	dfc01217 	ldw	ra,72(sp)
 10177e4:	dcc01117 	ldw	r19,68(sp)
 10177e8:	dc801017 	ldw	r18,64(sp)
 10177ec:	dc400f17 	ldw	r17,60(sp)
 10177f0:	dc000e17 	ldw	r16,56(sp)
 10177f4:	dec01304 	addi	sp,sp,76
 10177f8:	f800283a 	ret
 10177fc:	010040b4 	movhi	r4,258
 1017800:	211be004 	addi	r4,r4,28544
 1017804:	10182a40 	call	10182a4 <__pack_d>
 1017808:	dfc01217 	ldw	ra,72(sp)
 101780c:	dcc01117 	ldw	r19,68(sp)
 1017810:	dc801017 	ldw	r18,64(sp)
 1017814:	dc400f17 	ldw	r17,60(sp)
 1017818:	dc000e17 	ldw	r16,56(sp)
 101781c:	dec01304 	addi	sp,sp,76
 1017820:	f800283a 	ret
 1017824:	29805b26 	beq	r5,r6,1017994 <__divdf3+0x244>
 1017828:	28802d26 	beq	r5,r2,10178e0 <__divdf3+0x190>
 101782c:	d8c00617 	ldw	r3,24(sp)
 1017830:	d8800b17 	ldw	r2,44(sp)
 1017834:	d9c00817 	ldw	r7,32(sp)
 1017838:	dc400d17 	ldw	r17,52(sp)
 101783c:	188bc83a 	sub	r5,r3,r2
 1017840:	d9800717 	ldw	r6,28(sp)
 1017844:	dc000c17 	ldw	r16,48(sp)
 1017848:	d9400615 	stw	r5,24(sp)
 101784c:	3c403836 	bltu	r7,r17,1017930 <__divdf3+0x1e0>
 1017850:	89c03626 	beq	r17,r7,101792c <__divdf3+0x1dc>
 1017854:	0015883a 	mov	r10,zero
 1017858:	001d883a 	mov	r14,zero
 101785c:	02c40034 	movhi	r11,4096
 1017860:	001f883a 	mov	r15,zero
 1017864:	003f883a 	mov	ra,zero
 1017868:	04800f44 	movi	r18,61
 101786c:	00000f06 	br	10178ac <__divdf3+0x15c>
 1017870:	601d883a 	mov	r14,r12
 1017874:	681f883a 	mov	r15,r13
 1017878:	400d883a 	mov	r6,r8
 101787c:	100f883a 	mov	r7,r2
 1017880:	3191883a 	add	r8,r6,r6
 1017884:	5808d07a 	srli	r4,r11,1
 1017888:	4185803a 	cmpltu	r2,r8,r6
 101788c:	39d3883a 	add	r9,r7,r7
 1017890:	28c6b03a 	or	r3,r5,r3
 1017894:	1245883a 	add	r2,r2,r9
 1017898:	1815883a 	mov	r10,r3
 101789c:	2017883a 	mov	r11,r4
 10178a0:	400d883a 	mov	r6,r8
 10178a4:	100f883a 	mov	r7,r2
 10178a8:	fc801726 	beq	ra,r18,1017908 <__divdf3+0x1b8>
 10178ac:	580a97fa 	slli	r5,r11,31
 10178b0:	5006d07a 	srli	r3,r10,1
 10178b4:	ffc00044 	addi	ra,ra,1
 10178b8:	3c7ff136 	bltu	r7,r17,1017880 <__divdf3+0x130>
 10178bc:	3411c83a 	sub	r8,r6,r16
 10178c0:	3205803a 	cmpltu	r2,r6,r8
 10178c4:	3c53c83a 	sub	r9,r7,r17
 10178c8:	7298b03a 	or	r12,r14,r10
 10178cc:	7adab03a 	or	r13,r15,r11
 10178d0:	4885c83a 	sub	r2,r9,r2
 10178d4:	89ffe61e 	bne	r17,r7,1017870 <__divdf3+0x120>
 10178d8:	343fe936 	bltu	r6,r16,1017880 <__divdf3+0x130>
 10178dc:	003fe406 	br	1017870 <__divdf3+0x120>
 10178e0:	9809883a 	mov	r4,r19
 10178e4:	d9800415 	stw	r6,16(sp)
 10178e8:	10182a40 	call	10182a4 <__pack_d>
 10178ec:	dfc01217 	ldw	ra,72(sp)
 10178f0:	dcc01117 	ldw	r19,68(sp)
 10178f4:	dc801017 	ldw	r18,64(sp)
 10178f8:	dc400f17 	ldw	r17,60(sp)
 10178fc:	dc000e17 	ldw	r16,56(sp)
 1017900:	dec01304 	addi	sp,sp,76
 1017904:	f800283a 	ret
 1017908:	00803fc4 	movi	r2,255
 101790c:	7090703a 	and	r8,r14,r2
 1017910:	00802004 	movi	r2,128
 1017914:	0007883a 	mov	r3,zero
 1017918:	0013883a 	mov	r9,zero
 101791c:	40800d26 	beq	r8,r2,1017954 <__divdf3+0x204>
 1017920:	dbc00815 	stw	r15,32(sp)
 1017924:	db800715 	stw	r14,28(sp)
 1017928:	003fab06 	br	10177d8 <__divdf3+0x88>
 101792c:	343fc92e 	bgeu	r6,r16,1017854 <__divdf3+0x104>
 1017930:	3185883a 	add	r2,r6,r6
 1017934:	1189803a 	cmpltu	r4,r2,r6
 1017938:	39c7883a 	add	r3,r7,r7
 101793c:	20c9883a 	add	r4,r4,r3
 1017940:	297fffc4 	addi	r5,r5,-1
 1017944:	100d883a 	mov	r6,r2
 1017948:	200f883a 	mov	r7,r4
 101794c:	d9400615 	stw	r5,24(sp)
 1017950:	003fc006 	br	1017854 <__divdf3+0x104>
 1017954:	483ff21e 	bne	r9,zero,1017920 <__divdf3+0x1d0>
 1017958:	01004004 	movi	r4,256
 101795c:	7104703a 	and	r2,r14,r4
 1017960:	10c4b03a 	or	r2,r2,r3
 1017964:	103fee1e 	bne	r2,zero,1017920 <__divdf3+0x1d0>
 1017968:	31c4b03a 	or	r2,r6,r7
 101796c:	103fec26 	beq	r2,zero,1017920 <__divdf3+0x1d0>
 1017970:	7205883a 	add	r2,r14,r8
 1017974:	1391803a 	cmpltu	r8,r2,r14
 1017978:	43d1883a 	add	r8,r8,r15
 101797c:	013fc004 	movi	r4,-256
 1017980:	111c703a 	and	r14,r2,r4
 1017984:	401f883a 	mov	r15,r8
 1017988:	003fe506 	br	1017920 <__divdf3+0x1d0>
 101798c:	8009883a 	mov	r4,r16
 1017990:	003f9206 	br	10177dc <__divdf3+0x8c>
 1017994:	9809883a 	mov	r4,r19
 1017998:	d8000715 	stw	zero,28(sp)
 101799c:	d8000815 	stw	zero,32(sp)
 10179a0:	d8000615 	stw	zero,24(sp)
 10179a4:	003f8d06 	br	10177dc <__divdf3+0x8c>

010179a8 <__eqdf2>:
 10179a8:	deffef04 	addi	sp,sp,-68
 10179ac:	dc400f15 	stw	r17,60(sp)
 10179b0:	dc400404 	addi	r17,sp,16
 10179b4:	2005883a 	mov	r2,r4
 10179b8:	2807883a 	mov	r3,r5
 10179bc:	dc000e15 	stw	r16,56(sp)
 10179c0:	d809883a 	mov	r4,sp
 10179c4:	880b883a 	mov	r5,r17
 10179c8:	dc000904 	addi	r16,sp,36
 10179cc:	d8c00115 	stw	r3,4(sp)
 10179d0:	d8800015 	stw	r2,0(sp)
 10179d4:	d9800215 	stw	r6,8(sp)
 10179d8:	dfc01015 	stw	ra,64(sp)
 10179dc:	d9c00315 	stw	r7,12(sp)
 10179e0:	10185b80 	call	10185b8 <__unpack_d>
 10179e4:	d9000204 	addi	r4,sp,8
 10179e8:	800b883a 	mov	r5,r16
 10179ec:	10185b80 	call	10185b8 <__unpack_d>
 10179f0:	d8800417 	ldw	r2,16(sp)
 10179f4:	00c00044 	movi	r3,1
 10179f8:	180d883a 	mov	r6,r3
 10179fc:	1880062e 	bgeu	r3,r2,1017a18 <__eqdf2+0x70>
 1017a00:	d8800917 	ldw	r2,36(sp)
 1017a04:	8809883a 	mov	r4,r17
 1017a08:	800b883a 	mov	r5,r16
 1017a0c:	1880022e 	bgeu	r3,r2,1017a18 <__eqdf2+0x70>
 1017a10:	10186f00 	call	10186f0 <__fpcmp_parts_d>
 1017a14:	100d883a 	mov	r6,r2
 1017a18:	3005883a 	mov	r2,r6
 1017a1c:	dfc01017 	ldw	ra,64(sp)
 1017a20:	dc400f17 	ldw	r17,60(sp)
 1017a24:	dc000e17 	ldw	r16,56(sp)
 1017a28:	dec01104 	addi	sp,sp,68
 1017a2c:	f800283a 	ret

01017a30 <__nedf2>:
 1017a30:	deffef04 	addi	sp,sp,-68
 1017a34:	dc400f15 	stw	r17,60(sp)
 1017a38:	dc400404 	addi	r17,sp,16
 1017a3c:	2005883a 	mov	r2,r4
 1017a40:	2807883a 	mov	r3,r5
 1017a44:	dc000e15 	stw	r16,56(sp)
 1017a48:	d809883a 	mov	r4,sp
 1017a4c:	880b883a 	mov	r5,r17
 1017a50:	dc000904 	addi	r16,sp,36
 1017a54:	d8c00115 	stw	r3,4(sp)
 1017a58:	d8800015 	stw	r2,0(sp)
 1017a5c:	d9800215 	stw	r6,8(sp)
 1017a60:	dfc01015 	stw	ra,64(sp)
 1017a64:	d9c00315 	stw	r7,12(sp)
 1017a68:	10185b80 	call	10185b8 <__unpack_d>
 1017a6c:	d9000204 	addi	r4,sp,8
 1017a70:	800b883a 	mov	r5,r16
 1017a74:	10185b80 	call	10185b8 <__unpack_d>
 1017a78:	d8800417 	ldw	r2,16(sp)
 1017a7c:	00c00044 	movi	r3,1
 1017a80:	180d883a 	mov	r6,r3
 1017a84:	1880062e 	bgeu	r3,r2,1017aa0 <__nedf2+0x70>
 1017a88:	d8800917 	ldw	r2,36(sp)
 1017a8c:	8809883a 	mov	r4,r17
 1017a90:	800b883a 	mov	r5,r16
 1017a94:	1880022e 	bgeu	r3,r2,1017aa0 <__nedf2+0x70>
 1017a98:	10186f00 	call	10186f0 <__fpcmp_parts_d>
 1017a9c:	100d883a 	mov	r6,r2
 1017aa0:	3005883a 	mov	r2,r6
 1017aa4:	dfc01017 	ldw	ra,64(sp)
 1017aa8:	dc400f17 	ldw	r17,60(sp)
 1017aac:	dc000e17 	ldw	r16,56(sp)
 1017ab0:	dec01104 	addi	sp,sp,68
 1017ab4:	f800283a 	ret

01017ab8 <__gtdf2>:
 1017ab8:	deffef04 	addi	sp,sp,-68
 1017abc:	dc400f15 	stw	r17,60(sp)
 1017ac0:	dc400404 	addi	r17,sp,16
 1017ac4:	2005883a 	mov	r2,r4
 1017ac8:	2807883a 	mov	r3,r5
 1017acc:	dc000e15 	stw	r16,56(sp)
 1017ad0:	d809883a 	mov	r4,sp
 1017ad4:	880b883a 	mov	r5,r17
 1017ad8:	dc000904 	addi	r16,sp,36
 1017adc:	d8c00115 	stw	r3,4(sp)
 1017ae0:	d8800015 	stw	r2,0(sp)
 1017ae4:	d9800215 	stw	r6,8(sp)
 1017ae8:	dfc01015 	stw	ra,64(sp)
 1017aec:	d9c00315 	stw	r7,12(sp)
 1017af0:	10185b80 	call	10185b8 <__unpack_d>
 1017af4:	d9000204 	addi	r4,sp,8
 1017af8:	800b883a 	mov	r5,r16
 1017afc:	10185b80 	call	10185b8 <__unpack_d>
 1017b00:	d8800417 	ldw	r2,16(sp)
 1017b04:	00c00044 	movi	r3,1
 1017b08:	01bfffc4 	movi	r6,-1
 1017b0c:	1880062e 	bgeu	r3,r2,1017b28 <__gtdf2+0x70>
 1017b10:	d8800917 	ldw	r2,36(sp)
 1017b14:	8809883a 	mov	r4,r17
 1017b18:	800b883a 	mov	r5,r16
 1017b1c:	1880022e 	bgeu	r3,r2,1017b28 <__gtdf2+0x70>
 1017b20:	10186f00 	call	10186f0 <__fpcmp_parts_d>
 1017b24:	100d883a 	mov	r6,r2
 1017b28:	3005883a 	mov	r2,r6
 1017b2c:	dfc01017 	ldw	ra,64(sp)
 1017b30:	dc400f17 	ldw	r17,60(sp)
 1017b34:	dc000e17 	ldw	r16,56(sp)
 1017b38:	dec01104 	addi	sp,sp,68
 1017b3c:	f800283a 	ret

01017b40 <__gedf2>:
 1017b40:	deffef04 	addi	sp,sp,-68
 1017b44:	dc400f15 	stw	r17,60(sp)
 1017b48:	dc400404 	addi	r17,sp,16
 1017b4c:	2005883a 	mov	r2,r4
 1017b50:	2807883a 	mov	r3,r5
 1017b54:	dc000e15 	stw	r16,56(sp)
 1017b58:	d809883a 	mov	r4,sp
 1017b5c:	880b883a 	mov	r5,r17
 1017b60:	dc000904 	addi	r16,sp,36
 1017b64:	d8c00115 	stw	r3,4(sp)
 1017b68:	d8800015 	stw	r2,0(sp)
 1017b6c:	d9800215 	stw	r6,8(sp)
 1017b70:	dfc01015 	stw	ra,64(sp)
 1017b74:	d9c00315 	stw	r7,12(sp)
 1017b78:	10185b80 	call	10185b8 <__unpack_d>
 1017b7c:	d9000204 	addi	r4,sp,8
 1017b80:	800b883a 	mov	r5,r16
 1017b84:	10185b80 	call	10185b8 <__unpack_d>
 1017b88:	d8800417 	ldw	r2,16(sp)
 1017b8c:	00c00044 	movi	r3,1
 1017b90:	01bfffc4 	movi	r6,-1
 1017b94:	1880062e 	bgeu	r3,r2,1017bb0 <__gedf2+0x70>
 1017b98:	d8800917 	ldw	r2,36(sp)
 1017b9c:	8809883a 	mov	r4,r17
 1017ba0:	800b883a 	mov	r5,r16
 1017ba4:	1880022e 	bgeu	r3,r2,1017bb0 <__gedf2+0x70>
 1017ba8:	10186f00 	call	10186f0 <__fpcmp_parts_d>
 1017bac:	100d883a 	mov	r6,r2
 1017bb0:	3005883a 	mov	r2,r6
 1017bb4:	dfc01017 	ldw	ra,64(sp)
 1017bb8:	dc400f17 	ldw	r17,60(sp)
 1017bbc:	dc000e17 	ldw	r16,56(sp)
 1017bc0:	dec01104 	addi	sp,sp,68
 1017bc4:	f800283a 	ret

01017bc8 <__ltdf2>:
 1017bc8:	deffef04 	addi	sp,sp,-68
 1017bcc:	dc400f15 	stw	r17,60(sp)
 1017bd0:	dc400404 	addi	r17,sp,16
 1017bd4:	2005883a 	mov	r2,r4
 1017bd8:	2807883a 	mov	r3,r5
 1017bdc:	dc000e15 	stw	r16,56(sp)
 1017be0:	d809883a 	mov	r4,sp
 1017be4:	880b883a 	mov	r5,r17
 1017be8:	dc000904 	addi	r16,sp,36
 1017bec:	d8c00115 	stw	r3,4(sp)
 1017bf0:	d8800015 	stw	r2,0(sp)
 1017bf4:	d9800215 	stw	r6,8(sp)
 1017bf8:	dfc01015 	stw	ra,64(sp)
 1017bfc:	d9c00315 	stw	r7,12(sp)
 1017c00:	10185b80 	call	10185b8 <__unpack_d>
 1017c04:	d9000204 	addi	r4,sp,8
 1017c08:	800b883a 	mov	r5,r16
 1017c0c:	10185b80 	call	10185b8 <__unpack_d>
 1017c10:	d8800417 	ldw	r2,16(sp)
 1017c14:	00c00044 	movi	r3,1
 1017c18:	180d883a 	mov	r6,r3
 1017c1c:	1880062e 	bgeu	r3,r2,1017c38 <__ltdf2+0x70>
 1017c20:	d8800917 	ldw	r2,36(sp)
 1017c24:	8809883a 	mov	r4,r17
 1017c28:	800b883a 	mov	r5,r16
 1017c2c:	1880022e 	bgeu	r3,r2,1017c38 <__ltdf2+0x70>
 1017c30:	10186f00 	call	10186f0 <__fpcmp_parts_d>
 1017c34:	100d883a 	mov	r6,r2
 1017c38:	3005883a 	mov	r2,r6
 1017c3c:	dfc01017 	ldw	ra,64(sp)
 1017c40:	dc400f17 	ldw	r17,60(sp)
 1017c44:	dc000e17 	ldw	r16,56(sp)
 1017c48:	dec01104 	addi	sp,sp,68
 1017c4c:	f800283a 	ret

01017c50 <__floatsidf>:
 1017c50:	2006d7fa 	srli	r3,r4,31
 1017c54:	defff604 	addi	sp,sp,-40
 1017c58:	008000c4 	movi	r2,3
 1017c5c:	dfc00915 	stw	ra,36(sp)
 1017c60:	dcc00815 	stw	r19,32(sp)
 1017c64:	dc800715 	stw	r18,28(sp)
 1017c68:	dc400615 	stw	r17,24(sp)
 1017c6c:	dc000515 	stw	r16,20(sp)
 1017c70:	d8800015 	stw	r2,0(sp)
 1017c74:	d8c00115 	stw	r3,4(sp)
 1017c78:	20000f1e 	bne	r4,zero,1017cb8 <__floatsidf+0x68>
 1017c7c:	00800084 	movi	r2,2
 1017c80:	d8800015 	stw	r2,0(sp)
 1017c84:	d809883a 	mov	r4,sp
 1017c88:	10182a40 	call	10182a4 <__pack_d>
 1017c8c:	1009883a 	mov	r4,r2
 1017c90:	180b883a 	mov	r5,r3
 1017c94:	2005883a 	mov	r2,r4
 1017c98:	2807883a 	mov	r3,r5
 1017c9c:	dfc00917 	ldw	ra,36(sp)
 1017ca0:	dcc00817 	ldw	r19,32(sp)
 1017ca4:	dc800717 	ldw	r18,28(sp)
 1017ca8:	dc400617 	ldw	r17,24(sp)
 1017cac:	dc000517 	ldw	r16,20(sp)
 1017cb0:	dec00a04 	addi	sp,sp,40
 1017cb4:	f800283a 	ret
 1017cb8:	00800f04 	movi	r2,60
 1017cbc:	1807003a 	cmpeq	r3,r3,zero
 1017cc0:	d8800215 	stw	r2,8(sp)
 1017cc4:	18001126 	beq	r3,zero,1017d0c <__floatsidf+0xbc>
 1017cc8:	0027883a 	mov	r19,zero
 1017ccc:	2025883a 	mov	r18,r4
 1017cd0:	d9000315 	stw	r4,12(sp)
 1017cd4:	dcc00415 	stw	r19,16(sp)
 1017cd8:	10182240 	call	1018224 <__clzsi2>
 1017cdc:	11000744 	addi	r4,r2,29
 1017ce0:	013fe80e 	bge	zero,r4,1017c84 <__floatsidf+0x34>
 1017ce4:	10bfff44 	addi	r2,r2,-3
 1017ce8:	10000c16 	blt	r2,zero,1017d1c <__floatsidf+0xcc>
 1017cec:	90a2983a 	sll	r17,r18,r2
 1017cf0:	0021883a 	mov	r16,zero
 1017cf4:	d8800217 	ldw	r2,8(sp)
 1017cf8:	dc400415 	stw	r17,16(sp)
 1017cfc:	dc000315 	stw	r16,12(sp)
 1017d00:	1105c83a 	sub	r2,r2,r4
 1017d04:	d8800215 	stw	r2,8(sp)
 1017d08:	003fde06 	br	1017c84 <__floatsidf+0x34>
 1017d0c:	00a00034 	movhi	r2,32768
 1017d10:	20800a26 	beq	r4,r2,1017d3c <__floatsidf+0xec>
 1017d14:	0109c83a 	sub	r4,zero,r4
 1017d18:	003feb06 	br	1017cc8 <__floatsidf+0x78>
 1017d1c:	9006d07a 	srli	r3,r18,1
 1017d20:	008007c4 	movi	r2,31
 1017d24:	1105c83a 	sub	r2,r2,r4
 1017d28:	1886d83a 	srl	r3,r3,r2
 1017d2c:	9922983a 	sll	r17,r19,r4
 1017d30:	9120983a 	sll	r16,r18,r4
 1017d34:	1c62b03a 	or	r17,r3,r17
 1017d38:	003fee06 	br	1017cf4 <__floatsidf+0xa4>
 1017d3c:	0009883a 	mov	r4,zero
 1017d40:	01707834 	movhi	r5,49632
 1017d44:	003fd306 	br	1017c94 <__floatsidf+0x44>

01017d48 <__fixdfsi>:
 1017d48:	defff804 	addi	sp,sp,-32
 1017d4c:	2005883a 	mov	r2,r4
 1017d50:	2807883a 	mov	r3,r5
 1017d54:	d809883a 	mov	r4,sp
 1017d58:	d9400204 	addi	r5,sp,8
 1017d5c:	d8c00115 	stw	r3,4(sp)
 1017d60:	d8800015 	stw	r2,0(sp)
 1017d64:	dfc00715 	stw	ra,28(sp)
 1017d68:	10185b80 	call	10185b8 <__unpack_d>
 1017d6c:	d8c00217 	ldw	r3,8(sp)
 1017d70:	00800084 	movi	r2,2
 1017d74:	1880051e 	bne	r3,r2,1017d8c <__fixdfsi+0x44>
 1017d78:	0007883a 	mov	r3,zero
 1017d7c:	1805883a 	mov	r2,r3
 1017d80:	dfc00717 	ldw	ra,28(sp)
 1017d84:	dec00804 	addi	sp,sp,32
 1017d88:	f800283a 	ret
 1017d8c:	00800044 	movi	r2,1
 1017d90:	10fff92e 	bgeu	r2,r3,1017d78 <__fixdfsi+0x30>
 1017d94:	00800104 	movi	r2,4
 1017d98:	18800426 	beq	r3,r2,1017dac <__fixdfsi+0x64>
 1017d9c:	d8c00417 	ldw	r3,16(sp)
 1017da0:	183ff516 	blt	r3,zero,1017d78 <__fixdfsi+0x30>
 1017da4:	00800784 	movi	r2,30
 1017da8:	10c0080e 	bge	r2,r3,1017dcc <__fixdfsi+0x84>
 1017dac:	d8800317 	ldw	r2,12(sp)
 1017db0:	1000121e 	bne	r2,zero,1017dfc <__fixdfsi+0xb4>
 1017db4:	00e00034 	movhi	r3,32768
 1017db8:	18ffffc4 	addi	r3,r3,-1
 1017dbc:	1805883a 	mov	r2,r3
 1017dc0:	dfc00717 	ldw	ra,28(sp)
 1017dc4:	dec00804 	addi	sp,sp,32
 1017dc8:	f800283a 	ret
 1017dcc:	00800f04 	movi	r2,60
 1017dd0:	10d1c83a 	sub	r8,r2,r3
 1017dd4:	40bff804 	addi	r2,r8,-32
 1017dd8:	d9800517 	ldw	r6,20(sp)
 1017ddc:	d9c00617 	ldw	r7,24(sp)
 1017de0:	10000816 	blt	r2,zero,1017e04 <__fixdfsi+0xbc>
 1017de4:	3888d83a 	srl	r4,r7,r2
 1017de8:	d8800317 	ldw	r2,12(sp)
 1017dec:	2007883a 	mov	r3,r4
 1017df0:	103fe226 	beq	r2,zero,1017d7c <__fixdfsi+0x34>
 1017df4:	0107c83a 	sub	r3,zero,r4
 1017df8:	003fe006 	br	1017d7c <__fixdfsi+0x34>
 1017dfc:	00e00034 	movhi	r3,32768
 1017e00:	003fde06 	br	1017d7c <__fixdfsi+0x34>
 1017e04:	39c7883a 	add	r3,r7,r7
 1017e08:	008007c4 	movi	r2,31
 1017e0c:	1205c83a 	sub	r2,r2,r8
 1017e10:	1886983a 	sll	r3,r3,r2
 1017e14:	3208d83a 	srl	r4,r6,r8
 1017e18:	1908b03a 	or	r4,r3,r4
 1017e1c:	003ff206 	br	1017de8 <__fixdfsi+0xa0>

01017e20 <__floatunsidf>:
 1017e20:	defff204 	addi	sp,sp,-56
 1017e24:	dfc00d15 	stw	ra,52(sp)
 1017e28:	ddc00c15 	stw	r23,48(sp)
 1017e2c:	dd800b15 	stw	r22,44(sp)
 1017e30:	dd400a15 	stw	r21,40(sp)
 1017e34:	dd000915 	stw	r20,36(sp)
 1017e38:	dcc00815 	stw	r19,32(sp)
 1017e3c:	dc800715 	stw	r18,28(sp)
 1017e40:	dc400615 	stw	r17,24(sp)
 1017e44:	dc000515 	stw	r16,20(sp)
 1017e48:	d8000115 	stw	zero,4(sp)
 1017e4c:	20000f1e 	bne	r4,zero,1017e8c <__floatunsidf+0x6c>
 1017e50:	00800084 	movi	r2,2
 1017e54:	d8800015 	stw	r2,0(sp)
 1017e58:	d809883a 	mov	r4,sp
 1017e5c:	10182a40 	call	10182a4 <__pack_d>
 1017e60:	dfc00d17 	ldw	ra,52(sp)
 1017e64:	ddc00c17 	ldw	r23,48(sp)
 1017e68:	dd800b17 	ldw	r22,44(sp)
 1017e6c:	dd400a17 	ldw	r21,40(sp)
 1017e70:	dd000917 	ldw	r20,36(sp)
 1017e74:	dcc00817 	ldw	r19,32(sp)
 1017e78:	dc800717 	ldw	r18,28(sp)
 1017e7c:	dc400617 	ldw	r17,24(sp)
 1017e80:	dc000517 	ldw	r16,20(sp)
 1017e84:	dec00e04 	addi	sp,sp,56
 1017e88:	f800283a 	ret
 1017e8c:	008000c4 	movi	r2,3
 1017e90:	00c00f04 	movi	r3,60
 1017e94:	002f883a 	mov	r23,zero
 1017e98:	202d883a 	mov	r22,r4
 1017e9c:	d8800015 	stw	r2,0(sp)
 1017ea0:	d8c00215 	stw	r3,8(sp)
 1017ea4:	d9000315 	stw	r4,12(sp)
 1017ea8:	ddc00415 	stw	r23,16(sp)
 1017eac:	10182240 	call	1018224 <__clzsi2>
 1017eb0:	12400744 	addi	r9,r2,29
 1017eb4:	48000b16 	blt	r9,zero,1017ee4 <__floatunsidf+0xc4>
 1017eb8:	483fe726 	beq	r9,zero,1017e58 <__floatunsidf+0x38>
 1017ebc:	10bfff44 	addi	r2,r2,-3
 1017ec0:	10002e16 	blt	r2,zero,1017f7c <__floatunsidf+0x15c>
 1017ec4:	b0a2983a 	sll	r17,r22,r2
 1017ec8:	0021883a 	mov	r16,zero
 1017ecc:	d8800217 	ldw	r2,8(sp)
 1017ed0:	dc400415 	stw	r17,16(sp)
 1017ed4:	dc000315 	stw	r16,12(sp)
 1017ed8:	1245c83a 	sub	r2,r2,r9
 1017edc:	d8800215 	stw	r2,8(sp)
 1017ee0:	003fdd06 	br	1017e58 <__floatunsidf+0x38>
 1017ee4:	0255c83a 	sub	r10,zero,r9
 1017ee8:	51bff804 	addi	r6,r10,-32
 1017eec:	30001b16 	blt	r6,zero,1017f5c <__floatunsidf+0x13c>
 1017ef0:	b9a8d83a 	srl	r20,r23,r6
 1017ef4:	002b883a 	mov	r21,zero
 1017ef8:	000f883a 	mov	r7,zero
 1017efc:	01000044 	movi	r4,1
 1017f00:	0011883a 	mov	r8,zero
 1017f04:	30002516 	blt	r6,zero,1017f9c <__floatunsidf+0x17c>
 1017f08:	21a6983a 	sll	r19,r4,r6
 1017f0c:	0025883a 	mov	r18,zero
 1017f10:	00bfffc4 	movi	r2,-1
 1017f14:	9089883a 	add	r4,r18,r2
 1017f18:	988b883a 	add	r5,r19,r2
 1017f1c:	248d803a 	cmpltu	r6,r4,r18
 1017f20:	314b883a 	add	r5,r6,r5
 1017f24:	b104703a 	and	r2,r22,r4
 1017f28:	b946703a 	and	r3,r23,r5
 1017f2c:	10c4b03a 	or	r2,r2,r3
 1017f30:	10000226 	beq	r2,zero,1017f3c <__floatunsidf+0x11c>
 1017f34:	01c00044 	movi	r7,1
 1017f38:	0011883a 	mov	r8,zero
 1017f3c:	d9000217 	ldw	r4,8(sp)
 1017f40:	a1c4b03a 	or	r2,r20,r7
 1017f44:	aa06b03a 	or	r3,r21,r8
 1017f48:	2249c83a 	sub	r4,r4,r9
 1017f4c:	d8c00415 	stw	r3,16(sp)
 1017f50:	d9000215 	stw	r4,8(sp)
 1017f54:	d8800315 	stw	r2,12(sp)
 1017f58:	003fbf06 	br	1017e58 <__floatunsidf+0x38>
 1017f5c:	bdc7883a 	add	r3,r23,r23
 1017f60:	008007c4 	movi	r2,31
 1017f64:	1285c83a 	sub	r2,r2,r10
 1017f68:	1886983a 	sll	r3,r3,r2
 1017f6c:	b2a8d83a 	srl	r20,r22,r10
 1017f70:	baaad83a 	srl	r21,r23,r10
 1017f74:	1d28b03a 	or	r20,r3,r20
 1017f78:	003fdf06 	br	1017ef8 <__floatunsidf+0xd8>
 1017f7c:	b006d07a 	srli	r3,r22,1
 1017f80:	008007c4 	movi	r2,31
 1017f84:	1245c83a 	sub	r2,r2,r9
 1017f88:	1886d83a 	srl	r3,r3,r2
 1017f8c:	ba62983a 	sll	r17,r23,r9
 1017f90:	b260983a 	sll	r16,r22,r9
 1017f94:	1c62b03a 	or	r17,r3,r17
 1017f98:	003fcc06 	br	1017ecc <__floatunsidf+0xac>
 1017f9c:	2006d07a 	srli	r3,r4,1
 1017fa0:	008007c4 	movi	r2,31
 1017fa4:	1285c83a 	sub	r2,r2,r10
 1017fa8:	18a6d83a 	srl	r19,r3,r2
 1017fac:	22a4983a 	sll	r18,r4,r10
 1017fb0:	003fd706 	br	1017f10 <__floatunsidf+0xf0>

01017fb4 <udivmodsi4>:
 1017fb4:	29001b2e 	bgeu	r5,r4,1018024 <udivmodsi4+0x70>
 1017fb8:	28001a16 	blt	r5,zero,1018024 <udivmodsi4+0x70>
 1017fbc:	00800044 	movi	r2,1
 1017fc0:	0007883a 	mov	r3,zero
 1017fc4:	01c007c4 	movi	r7,31
 1017fc8:	00000306 	br	1017fd8 <udivmodsi4+0x24>
 1017fcc:	19c01326 	beq	r3,r7,101801c <udivmodsi4+0x68>
 1017fd0:	18c00044 	addi	r3,r3,1
 1017fd4:	28000416 	blt	r5,zero,1017fe8 <udivmodsi4+0x34>
 1017fd8:	294b883a 	add	r5,r5,r5
 1017fdc:	1085883a 	add	r2,r2,r2
 1017fe0:	293ffa36 	bltu	r5,r4,1017fcc <udivmodsi4+0x18>
 1017fe4:	10000d26 	beq	r2,zero,101801c <udivmodsi4+0x68>
 1017fe8:	0007883a 	mov	r3,zero
 1017fec:	21400236 	bltu	r4,r5,1017ff8 <udivmodsi4+0x44>
 1017ff0:	2149c83a 	sub	r4,r4,r5
 1017ff4:	1886b03a 	or	r3,r3,r2
 1017ff8:	1004d07a 	srli	r2,r2,1
 1017ffc:	280ad07a 	srli	r5,r5,1
 1018000:	103ffa1e 	bne	r2,zero,1017fec <udivmodsi4+0x38>
 1018004:	30000226 	beq	r6,zero,1018010 <udivmodsi4+0x5c>
 1018008:	2005883a 	mov	r2,r4
 101800c:	f800283a 	ret
 1018010:	1809883a 	mov	r4,r3
 1018014:	2005883a 	mov	r2,r4
 1018018:	f800283a 	ret
 101801c:	0007883a 	mov	r3,zero
 1018020:	003ff806 	br	1018004 <udivmodsi4+0x50>
 1018024:	00800044 	movi	r2,1
 1018028:	0007883a 	mov	r3,zero
 101802c:	003fef06 	br	1017fec <udivmodsi4+0x38>

01018030 <__divsi3>:
 1018030:	defffe04 	addi	sp,sp,-8
 1018034:	dc000015 	stw	r16,0(sp)
 1018038:	dfc00115 	stw	ra,4(sp)
 101803c:	0021883a 	mov	r16,zero
 1018040:	20000c16 	blt	r4,zero,1018074 <__divsi3+0x44>
 1018044:	000d883a 	mov	r6,zero
 1018048:	28000e16 	blt	r5,zero,1018084 <__divsi3+0x54>
 101804c:	1017fb40 	call	1017fb4 <udivmodsi4>
 1018050:	1007883a 	mov	r3,r2
 1018054:	8005003a 	cmpeq	r2,r16,zero
 1018058:	1000011e 	bne	r2,zero,1018060 <__divsi3+0x30>
 101805c:	00c7c83a 	sub	r3,zero,r3
 1018060:	1805883a 	mov	r2,r3
 1018064:	dfc00117 	ldw	ra,4(sp)
 1018068:	dc000017 	ldw	r16,0(sp)
 101806c:	dec00204 	addi	sp,sp,8
 1018070:	f800283a 	ret
 1018074:	0109c83a 	sub	r4,zero,r4
 1018078:	04000044 	movi	r16,1
 101807c:	000d883a 	mov	r6,zero
 1018080:	283ff20e 	bge	r5,zero,101804c <__divsi3+0x1c>
 1018084:	014bc83a 	sub	r5,zero,r5
 1018088:	8021003a 	cmpeq	r16,r16,zero
 101808c:	003fef06 	br	101804c <__divsi3+0x1c>

01018090 <__modsi3>:
 1018090:	deffff04 	addi	sp,sp,-4
 1018094:	dfc00015 	stw	ra,0(sp)
 1018098:	01800044 	movi	r6,1
 101809c:	2807883a 	mov	r3,r5
 10180a0:	20000416 	blt	r4,zero,10180b4 <__modsi3+0x24>
 10180a4:	28000c16 	blt	r5,zero,10180d8 <__modsi3+0x48>
 10180a8:	dfc00017 	ldw	ra,0(sp)
 10180ac:	dec00104 	addi	sp,sp,4
 10180b0:	1017fb41 	jmpi	1017fb4 <udivmodsi4>
 10180b4:	0109c83a 	sub	r4,zero,r4
 10180b8:	28000b16 	blt	r5,zero,10180e8 <__modsi3+0x58>
 10180bc:	180b883a 	mov	r5,r3
 10180c0:	01800044 	movi	r6,1
 10180c4:	1017fb40 	call	1017fb4 <udivmodsi4>
 10180c8:	0085c83a 	sub	r2,zero,r2
 10180cc:	dfc00017 	ldw	ra,0(sp)
 10180d0:	dec00104 	addi	sp,sp,4
 10180d4:	f800283a 	ret
 10180d8:	014bc83a 	sub	r5,zero,r5
 10180dc:	dfc00017 	ldw	ra,0(sp)
 10180e0:	dec00104 	addi	sp,sp,4
 10180e4:	1017fb41 	jmpi	1017fb4 <udivmodsi4>
 10180e8:	0147c83a 	sub	r3,zero,r5
 10180ec:	003ff306 	br	10180bc <__modsi3+0x2c>

010180f0 <__udivsi3>:
 10180f0:	000d883a 	mov	r6,zero
 10180f4:	1017fb41 	jmpi	1017fb4 <udivmodsi4>

010180f8 <__umodsi3>:
 10180f8:	01800044 	movi	r6,1
 10180fc:	1017fb41 	jmpi	1017fb4 <udivmodsi4>

01018100 <__muldi3>:
 1018100:	defff204 	addi	sp,sp,-56
 1018104:	df000c15 	stw	fp,48(sp)
 1018108:	3038d43a 	srli	fp,r6,16
 101810c:	dd000815 	stw	r20,32(sp)
 1018110:	dc400515 	stw	r17,20(sp)
 1018114:	2028d43a 	srli	r20,r4,16
 1018118:	247fffcc 	andi	r17,r4,65535
 101811c:	dc000415 	stw	r16,16(sp)
 1018120:	343fffcc 	andi	r16,r6,65535
 1018124:	dcc00715 	stw	r19,28(sp)
 1018128:	d9000015 	stw	r4,0(sp)
 101812c:	2827883a 	mov	r19,r5
 1018130:	8809883a 	mov	r4,r17
 1018134:	d9400115 	stw	r5,4(sp)
 1018138:	800b883a 	mov	r5,r16
 101813c:	d9800215 	stw	r6,8(sp)
 1018140:	dfc00d15 	stw	ra,52(sp)
 1018144:	d9c00315 	stw	r7,12(sp)
 1018148:	dd800a15 	stw	r22,40(sp)
 101814c:	dd400915 	stw	r21,36(sp)
 1018150:	302d883a 	mov	r22,r6
 1018154:	ddc00b15 	stw	r23,44(sp)
 1018158:	dc800615 	stw	r18,24(sp)
 101815c:	100def40 	call	100def4 <__mulsi3>
 1018160:	8809883a 	mov	r4,r17
 1018164:	e00b883a 	mov	r5,fp
 1018168:	102b883a 	mov	r21,r2
 101816c:	100def40 	call	100def4 <__mulsi3>
 1018170:	800b883a 	mov	r5,r16
 1018174:	a009883a 	mov	r4,r20
 1018178:	1023883a 	mov	r17,r2
 101817c:	100def40 	call	100def4 <__mulsi3>
 1018180:	a009883a 	mov	r4,r20
 1018184:	e00b883a 	mov	r5,fp
 1018188:	1021883a 	mov	r16,r2
 101818c:	100def40 	call	100def4 <__mulsi3>
 1018190:	a8ffffcc 	andi	r3,r21,65535
 1018194:	a82ad43a 	srli	r21,r21,16
 1018198:	8c23883a 	add	r17,r17,r16
 101819c:	1011883a 	mov	r8,r2
 10181a0:	ac6b883a 	add	r21,r21,r17
 10181a4:	a804943a 	slli	r2,r21,16
 10181a8:	b009883a 	mov	r4,r22
 10181ac:	980b883a 	mov	r5,r19
 10181b0:	10c7883a 	add	r3,r2,r3
 10181b4:	a812d43a 	srli	r9,r21,16
 10181b8:	180d883a 	mov	r6,r3
 10181bc:	ac00022e 	bgeu	r21,r16,10181c8 <__muldi3+0xc8>
 10181c0:	00800074 	movhi	r2,1
 10181c4:	4091883a 	add	r8,r8,r2
 10181c8:	4267883a 	add	r19,r8,r9
 10181cc:	302d883a 	mov	r22,r6
 10181d0:	100def40 	call	100def4 <__mulsi3>
 10181d4:	d9400317 	ldw	r5,12(sp)
 10181d8:	d9000017 	ldw	r4,0(sp)
 10181dc:	1023883a 	mov	r17,r2
 10181e0:	100def40 	call	100def4 <__mulsi3>
 10181e4:	14cb883a 	add	r5,r2,r19
 10181e8:	894b883a 	add	r5,r17,r5
 10181ec:	b005883a 	mov	r2,r22
 10181f0:	2807883a 	mov	r3,r5
 10181f4:	dfc00d17 	ldw	ra,52(sp)
 10181f8:	df000c17 	ldw	fp,48(sp)
 10181fc:	ddc00b17 	ldw	r23,44(sp)
 1018200:	dd800a17 	ldw	r22,40(sp)
 1018204:	dd400917 	ldw	r21,36(sp)
 1018208:	dd000817 	ldw	r20,32(sp)
 101820c:	dcc00717 	ldw	r19,28(sp)
 1018210:	dc800617 	ldw	r18,24(sp)
 1018214:	dc400517 	ldw	r17,20(sp)
 1018218:	dc000417 	ldw	r16,16(sp)
 101821c:	dec00e04 	addi	sp,sp,56
 1018220:	f800283a 	ret

01018224 <__clzsi2>:
 1018224:	00bfffd4 	movui	r2,65535
 1018228:	11000e36 	bltu	r2,r4,1018264 <__clzsi2+0x40>
 101822c:	00803fc4 	movi	r2,255
 1018230:	01400204 	movi	r5,8
 1018234:	0007883a 	mov	r3,zero
 1018238:	11001036 	bltu	r2,r4,101827c <__clzsi2+0x58>
 101823c:	000b883a 	mov	r5,zero
 1018240:	20c6d83a 	srl	r3,r4,r3
 1018244:	008040b4 	movhi	r2,258
 1018248:	109be504 	addi	r2,r2,28564
 101824c:	1887883a 	add	r3,r3,r2
 1018250:	18800003 	ldbu	r2,0(r3)
 1018254:	00c00804 	movi	r3,32
 1018258:	2885883a 	add	r2,r5,r2
 101825c:	1885c83a 	sub	r2,r3,r2
 1018260:	f800283a 	ret
 1018264:	01400404 	movi	r5,16
 1018268:	00804034 	movhi	r2,256
 101826c:	10bfffc4 	addi	r2,r2,-1
 1018270:	2807883a 	mov	r3,r5
 1018274:	113ff22e 	bgeu	r2,r4,1018240 <__clzsi2+0x1c>
 1018278:	01400604 	movi	r5,24
 101827c:	2807883a 	mov	r3,r5
 1018280:	20c6d83a 	srl	r3,r4,r3
 1018284:	008040b4 	movhi	r2,258
 1018288:	109be504 	addi	r2,r2,28564
 101828c:	1887883a 	add	r3,r3,r2
 1018290:	18800003 	ldbu	r2,0(r3)
 1018294:	00c00804 	movi	r3,32
 1018298:	2885883a 	add	r2,r5,r2
 101829c:	1885c83a 	sub	r2,r3,r2
 10182a0:	f800283a 	ret

010182a4 <__pack_d>:
 10182a4:	20c00017 	ldw	r3,0(r4)
 10182a8:	defffd04 	addi	sp,sp,-12
 10182ac:	dc000015 	stw	r16,0(sp)
 10182b0:	dc800215 	stw	r18,8(sp)
 10182b4:	dc400115 	stw	r17,4(sp)
 10182b8:	00800044 	movi	r2,1
 10182bc:	22000317 	ldw	r8,12(r4)
 10182c0:	001f883a 	mov	r15,zero
 10182c4:	22400417 	ldw	r9,16(r4)
 10182c8:	24000117 	ldw	r16,4(r4)
 10182cc:	10c0552e 	bgeu	r2,r3,1018424 <__pack_d+0x180>
 10182d0:	00800104 	movi	r2,4
 10182d4:	18804f26 	beq	r3,r2,1018414 <__pack_d+0x170>
 10182d8:	00800084 	movi	r2,2
 10182dc:	18800226 	beq	r3,r2,10182e8 <__pack_d+0x44>
 10182e0:	4244b03a 	or	r2,r8,r9
 10182e4:	10001a1e 	bne	r2,zero,1018350 <__pack_d+0xac>
 10182e8:	000d883a 	mov	r6,zero
 10182ec:	000f883a 	mov	r7,zero
 10182f0:	0011883a 	mov	r8,zero
 10182f4:	00800434 	movhi	r2,16
 10182f8:	10bfffc4 	addi	r2,r2,-1
 10182fc:	301d883a 	mov	r14,r6
 1018300:	3884703a 	and	r2,r7,r2
 1018304:	400a953a 	slli	r5,r8,20
 1018308:	79bffc2c 	andhi	r6,r15,65520
 101830c:	308cb03a 	or	r6,r6,r2
 1018310:	00e00434 	movhi	r3,32784
 1018314:	18ffffc4 	addi	r3,r3,-1
 1018318:	800497fa 	slli	r2,r16,31
 101831c:	30c6703a 	and	r3,r6,r3
 1018320:	1946b03a 	or	r3,r3,r5
 1018324:	01600034 	movhi	r5,32768
 1018328:	297fffc4 	addi	r5,r5,-1
 101832c:	194a703a 	and	r5,r3,r5
 1018330:	288ab03a 	or	r5,r5,r2
 1018334:	2807883a 	mov	r3,r5
 1018338:	7005883a 	mov	r2,r14
 101833c:	dc800217 	ldw	r18,8(sp)
 1018340:	dc400117 	ldw	r17,4(sp)
 1018344:	dc000017 	ldw	r16,0(sp)
 1018348:	dec00304 	addi	sp,sp,12
 101834c:	f800283a 	ret
 1018350:	21000217 	ldw	r4,8(r4)
 1018354:	00bf0084 	movi	r2,-1022
 1018358:	20803f16 	blt	r4,r2,1018458 <__pack_d+0x1b4>
 101835c:	0080ffc4 	movi	r2,1023
 1018360:	11002c16 	blt	r2,r4,1018414 <__pack_d+0x170>
 1018364:	00803fc4 	movi	r2,255
 1018368:	408c703a 	and	r6,r8,r2
 101836c:	00802004 	movi	r2,128
 1018370:	0007883a 	mov	r3,zero
 1018374:	000f883a 	mov	r7,zero
 1018378:	2280ffc4 	addi	r10,r4,1023
 101837c:	30801e26 	beq	r6,r2,10183f8 <__pack_d+0x154>
 1018380:	00801fc4 	movi	r2,127
 1018384:	4089883a 	add	r4,r8,r2
 1018388:	220d803a 	cmpltu	r6,r4,r8
 101838c:	324d883a 	add	r6,r6,r9
 1018390:	2011883a 	mov	r8,r4
 1018394:	3013883a 	mov	r9,r6
 1018398:	00880034 	movhi	r2,8192
 101839c:	10bfffc4 	addi	r2,r2,-1
 10183a0:	12400d36 	bltu	r2,r9,10183d8 <__pack_d+0x134>
 10183a4:	4804963a 	slli	r2,r9,24
 10183a8:	400cd23a 	srli	r6,r8,8
 10183ac:	480ed23a 	srli	r7,r9,8
 10183b0:	013fffc4 	movi	r4,-1
 10183b4:	118cb03a 	or	r6,r2,r6
 10183b8:	01400434 	movhi	r5,16
 10183bc:	297fffc4 	addi	r5,r5,-1
 10183c0:	3104703a 	and	r2,r6,r4
 10183c4:	3946703a 	and	r3,r7,r5
 10183c8:	5201ffcc 	andi	r8,r10,2047
 10183cc:	100d883a 	mov	r6,r2
 10183d0:	180f883a 	mov	r7,r3
 10183d4:	003fc706 	br	10182f4 <__pack_d+0x50>
 10183d8:	480897fa 	slli	r4,r9,31
 10183dc:	4004d07a 	srli	r2,r8,1
 10183e0:	4806d07a 	srli	r3,r9,1
 10183e4:	52800044 	addi	r10,r10,1
 10183e8:	2084b03a 	or	r2,r4,r2
 10183ec:	1011883a 	mov	r8,r2
 10183f0:	1813883a 	mov	r9,r3
 10183f4:	003feb06 	br	10183a4 <__pack_d+0x100>
 10183f8:	383fe11e 	bne	r7,zero,1018380 <__pack_d+0xdc>
 10183fc:	01004004 	movi	r4,256
 1018400:	4104703a 	and	r2,r8,r4
 1018404:	10c4b03a 	or	r2,r2,r3
 1018408:	103fe326 	beq	r2,zero,1018398 <__pack_d+0xf4>
 101840c:	3005883a 	mov	r2,r6
 1018410:	003fdc06 	br	1018384 <__pack_d+0xe0>
 1018414:	000d883a 	mov	r6,zero
 1018418:	000f883a 	mov	r7,zero
 101841c:	0201ffc4 	movi	r8,2047
 1018420:	003fb406 	br	10182f4 <__pack_d+0x50>
 1018424:	0005883a 	mov	r2,zero
 1018428:	00c00234 	movhi	r3,8
 101842c:	408cb03a 	or	r6,r8,r2
 1018430:	48ceb03a 	or	r7,r9,r3
 1018434:	013fffc4 	movi	r4,-1
 1018438:	01400434 	movhi	r5,16
 101843c:	297fffc4 	addi	r5,r5,-1
 1018440:	3104703a 	and	r2,r6,r4
 1018444:	3946703a 	and	r3,r7,r5
 1018448:	100d883a 	mov	r6,r2
 101844c:	180f883a 	mov	r7,r3
 1018450:	0201ffc4 	movi	r8,2047
 1018454:	003fa706 	br	10182f4 <__pack_d+0x50>
 1018458:	1109c83a 	sub	r4,r2,r4
 101845c:	00800e04 	movi	r2,56
 1018460:	11004316 	blt	r2,r4,1018570 <__pack_d+0x2cc>
 1018464:	21fff804 	addi	r7,r4,-32
 1018468:	38004516 	blt	r7,zero,1018580 <__pack_d+0x2dc>
 101846c:	49d8d83a 	srl	r12,r9,r7
 1018470:	001b883a 	mov	r13,zero
 1018474:	0023883a 	mov	r17,zero
 1018478:	01400044 	movi	r5,1
 101847c:	0025883a 	mov	r18,zero
 1018480:	38004716 	blt	r7,zero,10185a0 <__pack_d+0x2fc>
 1018484:	29d6983a 	sll	r11,r5,r7
 1018488:	0015883a 	mov	r10,zero
 101848c:	00bfffc4 	movi	r2,-1
 1018490:	5089883a 	add	r4,r10,r2
 1018494:	588b883a 	add	r5,r11,r2
 1018498:	228d803a 	cmpltu	r6,r4,r10
 101849c:	314b883a 	add	r5,r6,r5
 10184a0:	4104703a 	and	r2,r8,r4
 10184a4:	4946703a 	and	r3,r9,r5
 10184a8:	10c4b03a 	or	r2,r2,r3
 10184ac:	10000226 	beq	r2,zero,10184b8 <__pack_d+0x214>
 10184b0:	04400044 	movi	r17,1
 10184b4:	0025883a 	mov	r18,zero
 10184b8:	00803fc4 	movi	r2,255
 10184bc:	644eb03a 	or	r7,r12,r17
 10184c0:	3892703a 	and	r9,r7,r2
 10184c4:	00802004 	movi	r2,128
 10184c8:	6c90b03a 	or	r8,r13,r18
 10184cc:	0015883a 	mov	r10,zero
 10184d0:	48801626 	beq	r9,r2,101852c <__pack_d+0x288>
 10184d4:	01001fc4 	movi	r4,127
 10184d8:	3905883a 	add	r2,r7,r4
 10184dc:	11cd803a 	cmpltu	r6,r2,r7
 10184e0:	320d883a 	add	r6,r6,r8
 10184e4:	100f883a 	mov	r7,r2
 10184e8:	00840034 	movhi	r2,4096
 10184ec:	10bfffc4 	addi	r2,r2,-1
 10184f0:	3011883a 	mov	r8,r6
 10184f4:	0007883a 	mov	r3,zero
 10184f8:	11801b36 	bltu	r2,r6,1018568 <__pack_d+0x2c4>
 10184fc:	4004963a 	slli	r2,r8,24
 1018500:	3808d23a 	srli	r4,r7,8
 1018504:	400ad23a 	srli	r5,r8,8
 1018508:	1813883a 	mov	r9,r3
 101850c:	1108b03a 	or	r4,r2,r4
 1018510:	00bfffc4 	movi	r2,-1
 1018514:	00c00434 	movhi	r3,16
 1018518:	18ffffc4 	addi	r3,r3,-1
 101851c:	208c703a 	and	r6,r4,r2
 1018520:	28ce703a 	and	r7,r5,r3
 1018524:	4a01ffcc 	andi	r8,r9,2047
 1018528:	003f7206 	br	10182f4 <__pack_d+0x50>
 101852c:	503fe91e 	bne	r10,zero,10184d4 <__pack_d+0x230>
 1018530:	01004004 	movi	r4,256
 1018534:	3904703a 	and	r2,r7,r4
 1018538:	0007883a 	mov	r3,zero
 101853c:	10c4b03a 	or	r2,r2,r3
 1018540:	10000626 	beq	r2,zero,101855c <__pack_d+0x2b8>
 1018544:	3a45883a 	add	r2,r7,r9
 1018548:	11cd803a 	cmpltu	r6,r2,r7
 101854c:	320d883a 	add	r6,r6,r8
 1018550:	100f883a 	mov	r7,r2
 1018554:	3011883a 	mov	r8,r6
 1018558:	0007883a 	mov	r3,zero
 101855c:	00840034 	movhi	r2,4096
 1018560:	10bfffc4 	addi	r2,r2,-1
 1018564:	123fe52e 	bgeu	r2,r8,10184fc <__pack_d+0x258>
 1018568:	00c00044 	movi	r3,1
 101856c:	003fe306 	br	10184fc <__pack_d+0x258>
 1018570:	0009883a 	mov	r4,zero
 1018574:	0013883a 	mov	r9,zero
 1018578:	000b883a 	mov	r5,zero
 101857c:	003fe406 	br	1018510 <__pack_d+0x26c>
 1018580:	4a47883a 	add	r3,r9,r9
 1018584:	008007c4 	movi	r2,31
 1018588:	1105c83a 	sub	r2,r2,r4
 101858c:	1886983a 	sll	r3,r3,r2
 1018590:	4118d83a 	srl	r12,r8,r4
 1018594:	491ad83a 	srl	r13,r9,r4
 1018598:	1b18b03a 	or	r12,r3,r12
 101859c:	003fb506 	br	1018474 <__pack_d+0x1d0>
 10185a0:	2806d07a 	srli	r3,r5,1
 10185a4:	008007c4 	movi	r2,31
 10185a8:	1105c83a 	sub	r2,r2,r4
 10185ac:	1896d83a 	srl	r11,r3,r2
 10185b0:	2914983a 	sll	r10,r5,r4
 10185b4:	003fb506 	br	101848c <__pack_d+0x1e8>

010185b8 <__unpack_d>:
 10185b8:	20c00117 	ldw	r3,4(r4)
 10185bc:	22400017 	ldw	r9,0(r4)
 10185c0:	00800434 	movhi	r2,16
 10185c4:	10bfffc4 	addi	r2,r2,-1
 10185c8:	1808d53a 	srli	r4,r3,20
 10185cc:	180cd7fa 	srli	r6,r3,31
 10185d0:	1894703a 	and	r10,r3,r2
 10185d4:	2201ffcc 	andi	r8,r4,2047
 10185d8:	281b883a 	mov	r13,r5
 10185dc:	4817883a 	mov	r11,r9
 10185e0:	29800115 	stw	r6,4(r5)
 10185e4:	5019883a 	mov	r12,r10
 10185e8:	40001e1e 	bne	r8,zero,1018664 <__unpack_d+0xac>
 10185ec:	4a84b03a 	or	r2,r9,r10
 10185f0:	10001926 	beq	r2,zero,1018658 <__unpack_d+0xa0>
 10185f4:	4804d63a 	srli	r2,r9,24
 10185f8:	500c923a 	slli	r6,r10,8
 10185fc:	013f0084 	movi	r4,-1022
 1018600:	00c40034 	movhi	r3,4096
 1018604:	18ffffc4 	addi	r3,r3,-1
 1018608:	118cb03a 	or	r6,r2,r6
 101860c:	008000c4 	movi	r2,3
 1018610:	480a923a 	slli	r5,r9,8
 1018614:	68800015 	stw	r2,0(r13)
 1018618:	69000215 	stw	r4,8(r13)
 101861c:	19800b36 	bltu	r3,r6,101864c <__unpack_d+0x94>
 1018620:	200f883a 	mov	r7,r4
 1018624:	1811883a 	mov	r8,r3
 1018628:	2945883a 	add	r2,r5,r5
 101862c:	1149803a 	cmpltu	r4,r2,r5
 1018630:	3187883a 	add	r3,r6,r6
 1018634:	20c9883a 	add	r4,r4,r3
 1018638:	100b883a 	mov	r5,r2
 101863c:	200d883a 	mov	r6,r4
 1018640:	39ffffc4 	addi	r7,r7,-1
 1018644:	413ff82e 	bgeu	r8,r4,1018628 <__unpack_d+0x70>
 1018648:	69c00215 	stw	r7,8(r13)
 101864c:	69800415 	stw	r6,16(r13)
 1018650:	69400315 	stw	r5,12(r13)
 1018654:	f800283a 	ret
 1018658:	00800084 	movi	r2,2
 101865c:	28800015 	stw	r2,0(r5)
 1018660:	f800283a 	ret
 1018664:	0081ffc4 	movi	r2,2047
 1018668:	40800f26 	beq	r8,r2,10186a8 <__unpack_d+0xf0>
 101866c:	480cd63a 	srli	r6,r9,24
 1018670:	5006923a 	slli	r3,r10,8
 1018674:	4804923a 	slli	r2,r9,8
 1018678:	0009883a 	mov	r4,zero
 101867c:	30c6b03a 	or	r3,r6,r3
 1018680:	01440034 	movhi	r5,4096
 1018684:	110cb03a 	or	r6,r2,r4
 1018688:	423f0044 	addi	r8,r8,-1023
 101868c:	194eb03a 	or	r7,r3,r5
 1018690:	008000c4 	movi	r2,3
 1018694:	69c00415 	stw	r7,16(r13)
 1018698:	6a000215 	stw	r8,8(r13)
 101869c:	68800015 	stw	r2,0(r13)
 10186a0:	69800315 	stw	r6,12(r13)
 10186a4:	f800283a 	ret
 10186a8:	4a84b03a 	or	r2,r9,r10
 10186ac:	1000031e 	bne	r2,zero,10186bc <__unpack_d+0x104>
 10186b0:	00800104 	movi	r2,4
 10186b4:	28800015 	stw	r2,0(r5)
 10186b8:	f800283a 	ret
 10186bc:	0009883a 	mov	r4,zero
 10186c0:	01400234 	movhi	r5,8
 10186c4:	4904703a 	and	r2,r9,r4
 10186c8:	5146703a 	and	r3,r10,r5
 10186cc:	10c4b03a 	or	r2,r2,r3
 10186d0:	10000526 	beq	r2,zero,10186e8 <__unpack_d+0x130>
 10186d4:	00800044 	movi	r2,1
 10186d8:	68800015 	stw	r2,0(r13)
 10186dc:	6b000415 	stw	r12,16(r13)
 10186e0:	6ac00315 	stw	r11,12(r13)
 10186e4:	f800283a 	ret
 10186e8:	68000015 	stw	zero,0(r13)
 10186ec:	003ffb06 	br	10186dc <__unpack_d+0x124>

010186f0 <__fpcmp_parts_d>:
 10186f0:	21800017 	ldw	r6,0(r4)
 10186f4:	00c00044 	movi	r3,1
 10186f8:	19800a2e 	bgeu	r3,r6,1018724 <__fpcmp_parts_d+0x34>
 10186fc:	28800017 	ldw	r2,0(r5)
 1018700:	1880082e 	bgeu	r3,r2,1018724 <__fpcmp_parts_d+0x34>
 1018704:	00c00104 	movi	r3,4
 1018708:	30c02626 	beq	r6,r3,10187a4 <__fpcmp_parts_d+0xb4>
 101870c:	10c02226 	beq	r2,r3,1018798 <__fpcmp_parts_d+0xa8>
 1018710:	00c00084 	movi	r3,2
 1018714:	30c00526 	beq	r6,r3,101872c <__fpcmp_parts_d+0x3c>
 1018718:	10c0071e 	bne	r2,r3,1018738 <__fpcmp_parts_d+0x48>
 101871c:	20800117 	ldw	r2,4(r4)
 1018720:	1000091e 	bne	r2,zero,1018748 <__fpcmp_parts_d+0x58>
 1018724:	00800044 	movi	r2,1
 1018728:	f800283a 	ret
 101872c:	10c01a1e 	bne	r2,r3,1018798 <__fpcmp_parts_d+0xa8>
 1018730:	0005883a 	mov	r2,zero
 1018734:	f800283a 	ret
 1018738:	22000117 	ldw	r8,4(r4)
 101873c:	28800117 	ldw	r2,4(r5)
 1018740:	40800326 	beq	r8,r2,1018750 <__fpcmp_parts_d+0x60>
 1018744:	403ff726 	beq	r8,zero,1018724 <__fpcmp_parts_d+0x34>
 1018748:	00bfffc4 	movi	r2,-1
 101874c:	f800283a 	ret
 1018750:	20c00217 	ldw	r3,8(r4)
 1018754:	28800217 	ldw	r2,8(r5)
 1018758:	10fffa16 	blt	r2,r3,1018744 <__fpcmp_parts_d+0x54>
 101875c:	18800916 	blt	r3,r2,1018784 <__fpcmp_parts_d+0x94>
 1018760:	21c00417 	ldw	r7,16(r4)
 1018764:	28c00417 	ldw	r3,16(r5)
 1018768:	21800317 	ldw	r6,12(r4)
 101876c:	28800317 	ldw	r2,12(r5)
 1018770:	19fff436 	bltu	r3,r7,1018744 <__fpcmp_parts_d+0x54>
 1018774:	38c00526 	beq	r7,r3,101878c <__fpcmp_parts_d+0x9c>
 1018778:	38c00236 	bltu	r7,r3,1018784 <__fpcmp_parts_d+0x94>
 101877c:	19ffec1e 	bne	r3,r7,1018730 <__fpcmp_parts_d+0x40>
 1018780:	30bfeb2e 	bgeu	r6,r2,1018730 <__fpcmp_parts_d+0x40>
 1018784:	403fe71e 	bne	r8,zero,1018724 <__fpcmp_parts_d+0x34>
 1018788:	003fef06 	br	1018748 <__fpcmp_parts_d+0x58>
 101878c:	11bffa2e 	bgeu	r2,r6,1018778 <__fpcmp_parts_d+0x88>
 1018790:	403fe426 	beq	r8,zero,1018724 <__fpcmp_parts_d+0x34>
 1018794:	003fec06 	br	1018748 <__fpcmp_parts_d+0x58>
 1018798:	28800117 	ldw	r2,4(r5)
 101879c:	103fe11e 	bne	r2,zero,1018724 <__fpcmp_parts_d+0x34>
 10187a0:	003fe906 	br	1018748 <__fpcmp_parts_d+0x58>
 10187a4:	11bfdd1e 	bne	r2,r6,101871c <__fpcmp_parts_d+0x2c>
 10187a8:	28c00117 	ldw	r3,4(r5)
 10187ac:	20800117 	ldw	r2,4(r4)
 10187b0:	1885c83a 	sub	r2,r3,r2
 10187b4:	f800283a 	ret

010187b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10187b8:	defff804 	addi	sp,sp,-32
 10187bc:	dfc00715 	stw	ra,28(sp)
 10187c0:	df000615 	stw	fp,24(sp)
 10187c4:	df000604 	addi	fp,sp,24
 10187c8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10187cc:	e0bffc17 	ldw	r2,-16(fp)
 10187d0:	1004803a 	cmplt	r2,r2,zero
 10187d4:	1000091e 	bne	r2,zero,10187fc <close+0x44>
 10187d8:	e13ffc17 	ldw	r4,-16(fp)
 10187dc:	01400304 	movi	r5,12
 10187e0:	100def40 	call	100def4 <__mulsi3>
 10187e4:	1007883a 	mov	r3,r2
 10187e8:	008040b4 	movhi	r2,258
 10187ec:	109e9d04 	addi	r2,r2,31348
 10187f0:	1887883a 	add	r3,r3,r2
 10187f4:	e0ffff15 	stw	r3,-4(fp)
 10187f8:	00000106 	br	1018800 <close+0x48>
 10187fc:	e03fff15 	stw	zero,-4(fp)
 1018800:	e0bfff17 	ldw	r2,-4(fp)
 1018804:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1018808:	e0bffb17 	ldw	r2,-20(fp)
 101880c:	1005003a 	cmpeq	r2,r2,zero
 1018810:	10001d1e 	bne	r2,zero,1018888 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1018814:	e0bffb17 	ldw	r2,-20(fp)
 1018818:	10800017 	ldw	r2,0(r2)
 101881c:	10800417 	ldw	r2,16(r2)
 1018820:	1005003a 	cmpeq	r2,r2,zero
 1018824:	1000071e 	bne	r2,zero,1018844 <close+0x8c>
 1018828:	e0bffb17 	ldw	r2,-20(fp)
 101882c:	10800017 	ldw	r2,0(r2)
 1018830:	10800417 	ldw	r2,16(r2)
 1018834:	e13ffb17 	ldw	r4,-20(fp)
 1018838:	103ee83a 	callr	r2
 101883c:	e0bffe15 	stw	r2,-8(fp)
 1018840:	00000106 	br	1018848 <close+0x90>
 1018844:	e03ffe15 	stw	zero,-8(fp)
 1018848:	e0bffe17 	ldw	r2,-8(fp)
 101884c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1018850:	e13ffc17 	ldw	r4,-16(fp)
 1018854:	101916c0 	call	101916c <alt_release_fd>
    if (rval < 0)
 1018858:	e0bffa17 	ldw	r2,-24(fp)
 101885c:	1004403a 	cmpge	r2,r2,zero
 1018860:	1000071e 	bne	r2,zero,1018880 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 1018864:	10188b80 	call	10188b8 <alt_get_errno>
 1018868:	e0fffa17 	ldw	r3,-24(fp)
 101886c:	00c7c83a 	sub	r3,zero,r3
 1018870:	10c00015 	stw	r3,0(r2)
      return -1;
 1018874:	00bfffc4 	movi	r2,-1
 1018878:	e0bffd15 	stw	r2,-12(fp)
 101887c:	00000806 	br	10188a0 <close+0xe8>
    }
    return 0;
 1018880:	e03ffd15 	stw	zero,-12(fp)
 1018884:	00000606 	br	10188a0 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1018888:	10188b80 	call	10188b8 <alt_get_errno>
 101888c:	1007883a 	mov	r3,r2
 1018890:	00801444 	movi	r2,81
 1018894:	18800015 	stw	r2,0(r3)
    return -1;
 1018898:	00bfffc4 	movi	r2,-1
 101889c:	e0bffd15 	stw	r2,-12(fp)
 10188a0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 10188a4:	e037883a 	mov	sp,fp
 10188a8:	dfc00117 	ldw	ra,4(sp)
 10188ac:	df000017 	ldw	fp,0(sp)
 10188b0:	dec00204 	addi	sp,sp,8
 10188b4:	f800283a 	ret

010188b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10188b8:	defffd04 	addi	sp,sp,-12
 10188bc:	dfc00215 	stw	ra,8(sp)
 10188c0:	df000115 	stw	fp,4(sp)
 10188c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10188c8:	008040f4 	movhi	r2,259
 10188cc:	10a3da04 	addi	r2,r2,-28824
 10188d0:	10800017 	ldw	r2,0(r2)
 10188d4:	1005003a 	cmpeq	r2,r2,zero
 10188d8:	1000061e 	bne	r2,zero,10188f4 <alt_get_errno+0x3c>
 10188dc:	008040f4 	movhi	r2,259
 10188e0:	10a3da04 	addi	r2,r2,-28824
 10188e4:	10800017 	ldw	r2,0(r2)
 10188e8:	103ee83a 	callr	r2
 10188ec:	e0bfff15 	stw	r2,-4(fp)
 10188f0:	00000306 	br	1018900 <alt_get_errno+0x48>
 10188f4:	008040f4 	movhi	r2,259
 10188f8:	10a40f04 	addi	r2,r2,-28612
 10188fc:	e0bfff15 	stw	r2,-4(fp)
 1018900:	e0bfff17 	ldw	r2,-4(fp)
}
 1018904:	e037883a 	mov	sp,fp
 1018908:	dfc00117 	ldw	ra,4(sp)
 101890c:	df000017 	ldw	fp,0(sp)
 1018910:	dec00204 	addi	sp,sp,8
 1018914:	f800283a 	ret

01018918 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1018918:	defffc04 	addi	sp,sp,-16
 101891c:	df000315 	stw	fp,12(sp)
 1018920:	df000304 	addi	fp,sp,12
 1018924:	e13ffd15 	stw	r4,-12(fp)
 1018928:	e17ffe15 	stw	r5,-8(fp)
 101892c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1018930:	e0bfff17 	ldw	r2,-4(fp)
}
 1018934:	e037883a 	mov	sp,fp
 1018938:	df000017 	ldw	fp,0(sp)
 101893c:	dec00104 	addi	sp,sp,4
 1018940:	f800283a 	ret

01018944 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1018944:	defffd04 	addi	sp,sp,-12
 1018948:	df000215 	stw	fp,8(sp)
 101894c:	df000204 	addi	fp,sp,8
 1018950:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1018954:	e0bfff17 	ldw	r2,-4(fp)
 1018958:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 101895c:	e0bffe17 	ldw	r2,-8(fp)
 1018960:	1005003a 	cmpeq	r2,r2,zero
 1018964:	1000021e 	bne	r2,zero,1018970 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1018968:	002af070 	cmpltui	zero,zero,43969
 101896c:	00000106 	br	1018974 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1018970:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1018974:	e037883a 	mov	sp,fp
 1018978:	df000017 	ldw	fp,0(sp)
 101897c:	dec00104 	addi	sp,sp,4
 1018980:	f800283a 	ret

01018984 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1018984:	defffd04 	addi	sp,sp,-12
 1018988:	dfc00215 	stw	ra,8(sp)
 101898c:	df000115 	stw	fp,4(sp)
 1018990:	df000104 	addi	fp,sp,4
 1018994:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1018998:	008040f4 	movhi	r2,259
 101899c:	10a41b44 	addi	r2,r2,-28563
 10189a0:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 10189a4:	e13fff17 	ldw	r4,-4(fp)
 10189a8:	10189440 	call	1018944 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10189ac:	003fff06 	br	10189ac <_exit+0x28>

010189b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 10189b0:	defff904 	addi	sp,sp,-28
 10189b4:	dfc00615 	stw	ra,24(sp)
 10189b8:	df000515 	stw	fp,20(sp)
 10189bc:	df000504 	addi	fp,sp,20
 10189c0:	e13ffc15 	stw	r4,-16(fp)
 10189c4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10189c8:	e0bffc17 	ldw	r2,-16(fp)
 10189cc:	1004803a 	cmplt	r2,r2,zero
 10189d0:	1000091e 	bne	r2,zero,10189f8 <fstat+0x48>
 10189d4:	e13ffc17 	ldw	r4,-16(fp)
 10189d8:	01400304 	movi	r5,12
 10189dc:	100def40 	call	100def4 <__mulsi3>
 10189e0:	1007883a 	mov	r3,r2
 10189e4:	008040b4 	movhi	r2,258
 10189e8:	109e9d04 	addi	r2,r2,31348
 10189ec:	1887883a 	add	r3,r3,r2
 10189f0:	e0ffff15 	stw	r3,-4(fp)
 10189f4:	00000106 	br	10189fc <fstat+0x4c>
 10189f8:	e03fff15 	stw	zero,-4(fp)
 10189fc:	e0bfff17 	ldw	r2,-4(fp)
 1018a00:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1018a04:	e0bffb17 	ldw	r2,-20(fp)
 1018a08:	1005003a 	cmpeq	r2,r2,zero
 1018a0c:	1000121e 	bne	r2,zero,1018a58 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1018a10:	e0bffb17 	ldw	r2,-20(fp)
 1018a14:	10800017 	ldw	r2,0(r2)
 1018a18:	10800817 	ldw	r2,32(r2)
 1018a1c:	1005003a 	cmpeq	r2,r2,zero
 1018a20:	1000081e 	bne	r2,zero,1018a44 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 1018a24:	e0bffb17 	ldw	r2,-20(fp)
 1018a28:	10800017 	ldw	r2,0(r2)
 1018a2c:	10800817 	ldw	r2,32(r2)
 1018a30:	e13ffb17 	ldw	r4,-20(fp)
 1018a34:	e17ffd17 	ldw	r5,-12(fp)
 1018a38:	103ee83a 	callr	r2
 1018a3c:	e0bffe15 	stw	r2,-8(fp)
 1018a40:	00000b06 	br	1018a70 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1018a44:	e0fffd17 	ldw	r3,-12(fp)
 1018a48:	00880004 	movi	r2,8192
 1018a4c:	18800115 	stw	r2,4(r3)
      return 0;
 1018a50:	e03ffe15 	stw	zero,-8(fp)
 1018a54:	00000606 	br	1018a70 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1018a58:	1018a880 	call	1018a88 <alt_get_errno>
 1018a5c:	1007883a 	mov	r3,r2
 1018a60:	00801444 	movi	r2,81
 1018a64:	18800015 	stw	r2,0(r3)
    return -1;
 1018a68:	00bfffc4 	movi	r2,-1
 1018a6c:	e0bffe15 	stw	r2,-8(fp)
 1018a70:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1018a74:	e037883a 	mov	sp,fp
 1018a78:	dfc00117 	ldw	ra,4(sp)
 1018a7c:	df000017 	ldw	fp,0(sp)
 1018a80:	dec00204 	addi	sp,sp,8
 1018a84:	f800283a 	ret

01018a88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018a88:	defffd04 	addi	sp,sp,-12
 1018a8c:	dfc00215 	stw	ra,8(sp)
 1018a90:	df000115 	stw	fp,4(sp)
 1018a94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018a98:	008040f4 	movhi	r2,259
 1018a9c:	10a3da04 	addi	r2,r2,-28824
 1018aa0:	10800017 	ldw	r2,0(r2)
 1018aa4:	1005003a 	cmpeq	r2,r2,zero
 1018aa8:	1000061e 	bne	r2,zero,1018ac4 <alt_get_errno+0x3c>
 1018aac:	008040f4 	movhi	r2,259
 1018ab0:	10a3da04 	addi	r2,r2,-28824
 1018ab4:	10800017 	ldw	r2,0(r2)
 1018ab8:	103ee83a 	callr	r2
 1018abc:	e0bfff15 	stw	r2,-4(fp)
 1018ac0:	00000306 	br	1018ad0 <alt_get_errno+0x48>
 1018ac4:	008040f4 	movhi	r2,259
 1018ac8:	10a40f04 	addi	r2,r2,-28612
 1018acc:	e0bfff15 	stw	r2,-4(fp)
 1018ad0:	e0bfff17 	ldw	r2,-4(fp)
}
 1018ad4:	e037883a 	mov	sp,fp
 1018ad8:	dfc00117 	ldw	ra,4(sp)
 1018adc:	df000017 	ldw	fp,0(sp)
 1018ae0:	dec00204 	addi	sp,sp,8
 1018ae4:	f800283a 	ret

01018ae8 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 1018ae8:	deffff04 	addi	sp,sp,-4
 1018aec:	df000015 	stw	fp,0(sp)
 1018af0:	d839883a 	mov	fp,sp
  return 0;
 1018af4:	0005883a 	mov	r2,zero
}
 1018af8:	e037883a 	mov	sp,fp
 1018afc:	df000017 	ldw	fp,0(sp)
 1018b00:	dec00104 	addi	sp,sp,4
 1018b04:	f800283a 	ret

01018b08 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1018b08:	deffeb04 	addi	sp,sp,-84
 1018b0c:	dfc01415 	stw	ra,80(sp)
 1018b10:	df001315 	stw	fp,76(sp)
 1018b14:	df001304 	addi	fp,sp,76
 1018b18:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1018b1c:	e0bffd17 	ldw	r2,-12(fp)
 1018b20:	1004803a 	cmplt	r2,r2,zero
 1018b24:	1000091e 	bne	r2,zero,1018b4c <isatty+0x44>
 1018b28:	e13ffd17 	ldw	r4,-12(fp)
 1018b2c:	01400304 	movi	r5,12
 1018b30:	100def40 	call	100def4 <__mulsi3>
 1018b34:	1007883a 	mov	r3,r2
 1018b38:	008040b4 	movhi	r2,258
 1018b3c:	109e9d04 	addi	r2,r2,31348
 1018b40:	1887883a 	add	r3,r3,r2
 1018b44:	e0ffff15 	stw	r3,-4(fp)
 1018b48:	00000106 	br	1018b50 <isatty+0x48>
 1018b4c:	e03fff15 	stw	zero,-4(fp)
 1018b50:	e0bfff17 	ldw	r2,-4(fp)
 1018b54:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1018b58:	e0bfed17 	ldw	r2,-76(fp)
 1018b5c:	1005003a 	cmpeq	r2,r2,zero
 1018b60:	10000f1e 	bne	r2,zero,1018ba0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1018b64:	e0bfed17 	ldw	r2,-76(fp)
 1018b68:	10800017 	ldw	r2,0(r2)
 1018b6c:	10800817 	ldw	r2,32(r2)
 1018b70:	1004c03a 	cmpne	r2,r2,zero
 1018b74:	1000031e 	bne	r2,zero,1018b84 <isatty+0x7c>
    {
      return 1;
 1018b78:	00800044 	movi	r2,1
 1018b7c:	e0bffe15 	stw	r2,-8(fp)
 1018b80:	00000c06 	br	1018bb4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1018b84:	e17fee04 	addi	r5,fp,-72
 1018b88:	e13ffd17 	ldw	r4,-12(fp)
 1018b8c:	10189b00 	call	10189b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1018b90:	e0bfef17 	ldw	r2,-68(fp)
 1018b94:	10880020 	cmpeqi	r2,r2,8192
 1018b98:	e0bffe15 	stw	r2,-8(fp)
 1018b9c:	00000506 	br	1018bb4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1018ba0:	1018bcc0 	call	1018bcc <alt_get_errno>
 1018ba4:	1007883a 	mov	r3,r2
 1018ba8:	00801444 	movi	r2,81
 1018bac:	18800015 	stw	r2,0(r3)
    return 0;
 1018bb0:	e03ffe15 	stw	zero,-8(fp)
 1018bb4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1018bb8:	e037883a 	mov	sp,fp
 1018bbc:	dfc00117 	ldw	ra,4(sp)
 1018bc0:	df000017 	ldw	fp,0(sp)
 1018bc4:	dec00204 	addi	sp,sp,8
 1018bc8:	f800283a 	ret

01018bcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018bcc:	defffd04 	addi	sp,sp,-12
 1018bd0:	dfc00215 	stw	ra,8(sp)
 1018bd4:	df000115 	stw	fp,4(sp)
 1018bd8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018bdc:	008040f4 	movhi	r2,259
 1018be0:	10a3da04 	addi	r2,r2,-28824
 1018be4:	10800017 	ldw	r2,0(r2)
 1018be8:	1005003a 	cmpeq	r2,r2,zero
 1018bec:	1000061e 	bne	r2,zero,1018c08 <alt_get_errno+0x3c>
 1018bf0:	008040f4 	movhi	r2,259
 1018bf4:	10a3da04 	addi	r2,r2,-28824
 1018bf8:	10800017 	ldw	r2,0(r2)
 1018bfc:	103ee83a 	callr	r2
 1018c00:	e0bfff15 	stw	r2,-4(fp)
 1018c04:	00000306 	br	1018c14 <alt_get_errno+0x48>
 1018c08:	008040f4 	movhi	r2,259
 1018c0c:	10a40f04 	addi	r2,r2,-28612
 1018c10:	e0bfff15 	stw	r2,-4(fp)
 1018c14:	e0bfff17 	ldw	r2,-4(fp)
}
 1018c18:	e037883a 	mov	sp,fp
 1018c1c:	dfc00117 	ldw	ra,4(sp)
 1018c20:	df000017 	ldw	fp,0(sp)
 1018c24:	dec00204 	addi	sp,sp,8
 1018c28:	f800283a 	ret

01018c2c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 1018c2c:	defffa04 	addi	sp,sp,-24
 1018c30:	dfc00515 	stw	ra,20(sp)
 1018c34:	df000415 	stw	fp,16(sp)
 1018c38:	df000404 	addi	fp,sp,16
 1018c3c:	e13ffd15 	stw	r4,-12(fp)
 1018c40:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 1018c44:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 1018c48:	e0bffd17 	ldw	r2,-12(fp)
 1018c4c:	10800048 	cmpgei	r2,r2,1
 1018c50:	1000301e 	bne	r2,zero,1018d14 <kill+0xe8>
  {
    switch (sig)
 1018c54:	e0bffe17 	ldw	r2,-8(fp)
 1018c58:	10800828 	cmpgeui	r2,r2,32
 1018c5c:	10002a1e 	bne	r2,zero,1018d08 <kill+0xdc>
 1018c60:	e0bffe17 	ldw	r2,-8(fp)
 1018c64:	1085883a 	add	r2,r2,r2
 1018c68:	1087883a 	add	r3,r2,r2
 1018c6c:	008040b4 	movhi	r2,258
 1018c70:	10a32004 	addi	r2,r2,-29568
 1018c74:	1885883a 	add	r2,r3,r2
 1018c78:	10800017 	ldw	r2,0(r2)
 1018c7c:	1000683a 	jmp	r2
 1018c80:	01018d28 	cmpgeui	r4,zero,1588
 1018c84:	01018d08 	cmpgei	r4,zero,1588
 1018c88:	01018d08 	cmpgei	r4,zero,1588
 1018c8c:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018c90:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018c94:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018c98:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018c9c:	01018d08 	cmpgei	r4,zero,1588
 1018ca0:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018ca4:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018ca8:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018cac:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018cb0:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018cb4:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018cb8:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018cbc:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018cc0:	01018d28 	cmpgeui	r4,zero,1588
 1018cc4:	01018d08 	cmpgei	r4,zero,1588
 1018cc8:	01018d08 	cmpgei	r4,zero,1588
 1018ccc:	01018d08 	cmpgei	r4,zero,1588
 1018cd0:	01018d28 	cmpgeui	r4,zero,1588
 1018cd4:	01018d08 	cmpgei	r4,zero,1588
 1018cd8:	01018d08 	cmpgei	r4,zero,1588
 1018cdc:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018ce0:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018ce4:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018ce8:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018cec:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018cf0:	01018d08 	cmpgei	r4,zero,1588
 1018cf4:	01018d08 	cmpgei	r4,zero,1588
 1018cf8:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
 1018cfc:	01018d00 	call	1018d0 <OSCtxSw_SWITCH_PC+0x101890>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 1018d00:	0009883a 	mov	r4,zero
 1018d04:	10189840 	call	1018984 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 1018d08:	00800584 	movi	r2,22
 1018d0c:	e0bffc15 	stw	r2,-16(fp)
 1018d10:	00000506 	br	1018d28 <kill+0xfc>
    }
  }

  else if (pid > 0)
 1018d14:	e0bffd17 	ldw	r2,-12(fp)
 1018d18:	10800050 	cmplti	r2,r2,1
 1018d1c:	1000021e 	bne	r2,zero,1018d28 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 1018d20:	008000c4 	movi	r2,3
 1018d24:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 1018d28:	e0bffc17 	ldw	r2,-16(fp)
 1018d2c:	1005003a 	cmpeq	r2,r2,zero
 1018d30:	1000071e 	bne	r2,zero,1018d50 <kill+0x124>
  {
    ALT_ERRNO = status;
 1018d34:	1018d6c0 	call	1018d6c <alt_get_errno>
 1018d38:	1007883a 	mov	r3,r2
 1018d3c:	e0bffc17 	ldw	r2,-16(fp)
 1018d40:	18800015 	stw	r2,0(r3)
    return -1;
 1018d44:	00bfffc4 	movi	r2,-1
 1018d48:	e0bfff15 	stw	r2,-4(fp)
 1018d4c:	00000106 	br	1018d54 <kill+0x128>
  }

  return 0;
 1018d50:	e03fff15 	stw	zero,-4(fp)
 1018d54:	e0bfff17 	ldw	r2,-4(fp)
}
 1018d58:	e037883a 	mov	sp,fp
 1018d5c:	dfc00117 	ldw	ra,4(sp)
 1018d60:	df000017 	ldw	fp,0(sp)
 1018d64:	dec00204 	addi	sp,sp,8
 1018d68:	f800283a 	ret

01018d6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018d6c:	defffd04 	addi	sp,sp,-12
 1018d70:	dfc00215 	stw	ra,8(sp)
 1018d74:	df000115 	stw	fp,4(sp)
 1018d78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018d7c:	008040f4 	movhi	r2,259
 1018d80:	10a3da04 	addi	r2,r2,-28824
 1018d84:	10800017 	ldw	r2,0(r2)
 1018d88:	1005003a 	cmpeq	r2,r2,zero
 1018d8c:	1000061e 	bne	r2,zero,1018da8 <alt_get_errno+0x3c>
 1018d90:	008040f4 	movhi	r2,259
 1018d94:	10a3da04 	addi	r2,r2,-28824
 1018d98:	10800017 	ldw	r2,0(r2)
 1018d9c:	103ee83a 	callr	r2
 1018da0:	e0bfff15 	stw	r2,-4(fp)
 1018da4:	00000306 	br	1018db4 <alt_get_errno+0x48>
 1018da8:	008040f4 	movhi	r2,259
 1018dac:	10a40f04 	addi	r2,r2,-28612
 1018db0:	e0bfff15 	stw	r2,-4(fp)
 1018db4:	e0bfff17 	ldw	r2,-4(fp)
}
 1018db8:	e037883a 	mov	sp,fp
 1018dbc:	dfc00117 	ldw	ra,4(sp)
 1018dc0:	df000017 	ldw	fp,0(sp)
 1018dc4:	dec00204 	addi	sp,sp,8
 1018dc8:	f800283a 	ret

01018dcc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1018dcc:	defff804 	addi	sp,sp,-32
 1018dd0:	dfc00715 	stw	ra,28(sp)
 1018dd4:	df000615 	stw	fp,24(sp)
 1018dd8:	df000604 	addi	fp,sp,24
 1018ddc:	e13ffc15 	stw	r4,-16(fp)
 1018de0:	e17ffd15 	stw	r5,-12(fp)
 1018de4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1018de8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1018dec:	e0bffc17 	ldw	r2,-16(fp)
 1018df0:	1004803a 	cmplt	r2,r2,zero
 1018df4:	1000091e 	bne	r2,zero,1018e1c <lseek+0x50>
 1018df8:	e13ffc17 	ldw	r4,-16(fp)
 1018dfc:	01400304 	movi	r5,12
 1018e00:	100def40 	call	100def4 <__mulsi3>
 1018e04:	1007883a 	mov	r3,r2
 1018e08:	008040b4 	movhi	r2,258
 1018e0c:	109e9d04 	addi	r2,r2,31348
 1018e10:	1887883a 	add	r3,r3,r2
 1018e14:	e0ffff15 	stw	r3,-4(fp)
 1018e18:	00000106 	br	1018e20 <lseek+0x54>
 1018e1c:	e03fff15 	stw	zero,-4(fp)
 1018e20:	e0bfff17 	ldw	r2,-4(fp)
 1018e24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1018e28:	e0bffb17 	ldw	r2,-20(fp)
 1018e2c:	1005003a 	cmpeq	r2,r2,zero
 1018e30:	1000111e 	bne	r2,zero,1018e78 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1018e34:	e0bffb17 	ldw	r2,-20(fp)
 1018e38:	10800017 	ldw	r2,0(r2)
 1018e3c:	10800717 	ldw	r2,28(r2)
 1018e40:	1005003a 	cmpeq	r2,r2,zero
 1018e44:	1000091e 	bne	r2,zero,1018e6c <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1018e48:	e0bffb17 	ldw	r2,-20(fp)
 1018e4c:	10800017 	ldw	r2,0(r2)
 1018e50:	10800717 	ldw	r2,28(r2)
 1018e54:	e13ffb17 	ldw	r4,-20(fp)
 1018e58:	e17ffd17 	ldw	r5,-12(fp)
 1018e5c:	e1bffe17 	ldw	r6,-8(fp)
 1018e60:	103ee83a 	callr	r2
 1018e64:	e0bffa15 	stw	r2,-24(fp)
 1018e68:	00000506 	br	1018e80 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1018e6c:	00bfde84 	movi	r2,-134
 1018e70:	e0bffa15 	stw	r2,-24(fp)
 1018e74:	00000206 	br	1018e80 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 1018e78:	00bfebc4 	movi	r2,-81
 1018e7c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1018e80:	e0bffa17 	ldw	r2,-24(fp)
 1018e84:	1004403a 	cmpge	r2,r2,zero
 1018e88:	1000071e 	bne	r2,zero,1018ea8 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 1018e8c:	1018ec00 	call	1018ec0 <alt_get_errno>
 1018e90:	1007883a 	mov	r3,r2
 1018e94:	e0bffa17 	ldw	r2,-24(fp)
 1018e98:	0085c83a 	sub	r2,zero,r2
 1018e9c:	18800015 	stw	r2,0(r3)
    rc = -1;
 1018ea0:	00bfffc4 	movi	r2,-1
 1018ea4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1018ea8:	e0bffa17 	ldw	r2,-24(fp)
}
 1018eac:	e037883a 	mov	sp,fp
 1018eb0:	dfc00117 	ldw	ra,4(sp)
 1018eb4:	df000017 	ldw	fp,0(sp)
 1018eb8:	dec00204 	addi	sp,sp,8
 1018ebc:	f800283a 	ret

01018ec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018ec0:	defffd04 	addi	sp,sp,-12
 1018ec4:	dfc00215 	stw	ra,8(sp)
 1018ec8:	df000115 	stw	fp,4(sp)
 1018ecc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018ed0:	008040f4 	movhi	r2,259
 1018ed4:	10a3da04 	addi	r2,r2,-28824
 1018ed8:	10800017 	ldw	r2,0(r2)
 1018edc:	1005003a 	cmpeq	r2,r2,zero
 1018ee0:	1000061e 	bne	r2,zero,1018efc <alt_get_errno+0x3c>
 1018ee4:	008040f4 	movhi	r2,259
 1018ee8:	10a3da04 	addi	r2,r2,-28824
 1018eec:	10800017 	ldw	r2,0(r2)
 1018ef0:	103ee83a 	callr	r2
 1018ef4:	e0bfff15 	stw	r2,-4(fp)
 1018ef8:	00000306 	br	1018f08 <alt_get_errno+0x48>
 1018efc:	008040f4 	movhi	r2,259
 1018f00:	10a40f04 	addi	r2,r2,-28612
 1018f04:	e0bfff15 	stw	r2,-4(fp)
 1018f08:	e0bfff17 	ldw	r2,-4(fp)
}
 1018f0c:	e037883a 	mov	sp,fp
 1018f10:	dfc00117 	ldw	ra,4(sp)
 1018f14:	df000017 	ldw	fp,0(sp)
 1018f18:	dec00204 	addi	sp,sp,8
 1018f1c:	f800283a 	ret

01018f20 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1018f20:	defffb04 	addi	sp,sp,-20
 1018f24:	dfc00415 	stw	ra,16(sp)
 1018f28:	df000315 	stw	fp,12(sp)
 1018f2c:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1018f30:	0009883a 	mov	r4,zero
 1018f34:	10219f00 	call	10219f0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1018f38:	101a02c0 	call	101a02c <OSInit>
 1018f3c:	01000044 	movi	r4,1
 1018f40:	101eef40 	call	101eef4 <OSSemCreate>
 1018f44:	1007883a 	mov	r3,r2
 1018f48:	008040f4 	movhi	r2,259
 1018f4c:	10a41804 	addi	r2,r2,-28576
 1018f50:	10c00015 	stw	r3,0(r2)
 1018f54:	01000044 	movi	r4,1
 1018f58:	101eef40 	call	101eef4 <OSSemCreate>
 1018f5c:	1007883a 	mov	r3,r2
 1018f60:	008040f4 	movhi	r2,259
 1018f64:	10a41a04 	addi	r2,r2,-28568
 1018f68:	10c00015 	stw	r3,0(r2)
 1018f6c:	008040f4 	movhi	r2,259
 1018f70:	10a41304 	addi	r2,r2,-28596
 1018f74:	e0bffd15 	stw	r2,-12(fp)
 1018f78:	00800044 	movi	r2,1
 1018f7c:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 1018f80:	e13ffe0b 	ldhu	r4,-8(fp)
 1018f84:	101eef40 	call	101eef4 <OSSemCreate>
 1018f88:	1007883a 	mov	r3,r2
 1018f8c:	e0bffd17 	ldw	r2,-12(fp)
 1018f90:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1018f94:	1021a240 	call	1021a24 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1018f98:	010040b4 	movhi	r4,258
 1018f9c:	211c2804 	addi	r4,r4,28832
 1018fa0:	014040b4 	movhi	r5,258
 1018fa4:	295c2804 	addi	r5,r5,28832
 1018fa8:	018040b4 	movhi	r6,258
 1018fac:	319c2804 	addi	r6,r6,28832
 1018fb0:	10244780 	call	1024478 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1018fb4:	10241740 	call	1024174 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1018fb8:	010040b4 	movhi	r4,258
 1018fbc:	21107604 	addi	r4,r4,16856
 1018fc0:	10254a00 	call	10254a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1018fc4:	d120a917 	ldw	r4,-32092(gp)
 1018fc8:	d160aa17 	ldw	r5,-32088(gp)
 1018fcc:	d1a0ab17 	ldw	r6,-32084(gp)
 1018fd0:	10054380 	call	1005438 <main>
 1018fd4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1018fd8:	01000044 	movi	r4,1
 1018fdc:	10187b80 	call	10187b8 <close>
  exit (result);
 1018fe0:	e13fff17 	ldw	r4,-4(fp)
 1018fe4:	10254b40 	call	10254b4 <exit>

01018fe8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1018fe8:	defff704 	addi	sp,sp,-36
 1018fec:	dfc00815 	stw	ra,32(sp)
 1018ff0:	df000715 	stw	fp,28(sp)
 1018ff4:	df000704 	addi	fp,sp,28
 1018ff8:	e13ffb15 	stw	r4,-20(fp)
 1018ffc:	e17ffc15 	stw	r5,-16(fp)
 1019000:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1019004:	e0bffb17 	ldw	r2,-20(fp)
 1019008:	1004803a 	cmplt	r2,r2,zero
 101900c:	1000091e 	bne	r2,zero,1019034 <read+0x4c>
 1019010:	e13ffb17 	ldw	r4,-20(fp)
 1019014:	01400304 	movi	r5,12
 1019018:	100def40 	call	100def4 <__mulsi3>
 101901c:	1007883a 	mov	r3,r2
 1019020:	008040b4 	movhi	r2,258
 1019024:	109e9d04 	addi	r2,r2,31348
 1019028:	1887883a 	add	r3,r3,r2
 101902c:	e0ffff15 	stw	r3,-4(fp)
 1019030:	00000106 	br	1019038 <read+0x50>
 1019034:	e03fff15 	stw	zero,-4(fp)
 1019038:	e0bfff17 	ldw	r2,-4(fp)
 101903c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1019040:	e0bffa17 	ldw	r2,-24(fp)
 1019044:	1005003a 	cmpeq	r2,r2,zero
 1019048:	1000241e 	bne	r2,zero,10190dc <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 101904c:	e0bffa17 	ldw	r2,-24(fp)
 1019050:	10800217 	ldw	r2,8(r2)
 1019054:	108000cc 	andi	r2,r2,3
 1019058:	10800060 	cmpeqi	r2,r2,1
 101905c:	10001a1e 	bne	r2,zero,10190c8 <read+0xe0>
 1019060:	e0bffa17 	ldw	r2,-24(fp)
 1019064:	10800017 	ldw	r2,0(r2)
 1019068:	10800517 	ldw	r2,20(r2)
 101906c:	1005003a 	cmpeq	r2,r2,zero
 1019070:	1000151e 	bne	r2,zero,10190c8 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1019074:	e0bffa17 	ldw	r2,-24(fp)
 1019078:	10800017 	ldw	r2,0(r2)
 101907c:	10800517 	ldw	r2,20(r2)
 1019080:	e17ffc17 	ldw	r5,-16(fp)
 1019084:	e1bffd17 	ldw	r6,-12(fp)
 1019088:	e13ffa17 	ldw	r4,-24(fp)
 101908c:	103ee83a 	callr	r2
 1019090:	e0bff915 	stw	r2,-28(fp)
 1019094:	e0bff917 	ldw	r2,-28(fp)
 1019098:	1004403a 	cmpge	r2,r2,zero
 101909c:	1000071e 	bne	r2,zero,10190bc <read+0xd4>
        {
          ALT_ERRNO = -rval;
 10190a0:	101910c0 	call	101910c <alt_get_errno>
 10190a4:	e0fff917 	ldw	r3,-28(fp)
 10190a8:	00c7c83a 	sub	r3,zero,r3
 10190ac:	10c00015 	stw	r3,0(r2)
          return -1;
 10190b0:	00bfffc4 	movi	r2,-1
 10190b4:	e0bffe15 	stw	r2,-8(fp)
 10190b8:	00000e06 	br	10190f4 <read+0x10c>
        }
        return rval;
 10190bc:	e0bff917 	ldw	r2,-28(fp)
 10190c0:	e0bffe15 	stw	r2,-8(fp)
 10190c4:	00000b06 	br	10190f4 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 10190c8:	101910c0 	call	101910c <alt_get_errno>
 10190cc:	1007883a 	mov	r3,r2
 10190d0:	00800344 	movi	r2,13
 10190d4:	18800015 	stw	r2,0(r3)
 10190d8:	00000406 	br	10190ec <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 10190dc:	101910c0 	call	101910c <alt_get_errno>
 10190e0:	1007883a 	mov	r3,r2
 10190e4:	00801444 	movi	r2,81
 10190e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10190ec:	00bfffc4 	movi	r2,-1
 10190f0:	e0bffe15 	stw	r2,-8(fp)
 10190f4:	e0bffe17 	ldw	r2,-8(fp)
}
 10190f8:	e037883a 	mov	sp,fp
 10190fc:	dfc00117 	ldw	ra,4(sp)
 1019100:	df000017 	ldw	fp,0(sp)
 1019104:	dec00204 	addi	sp,sp,8
 1019108:	f800283a 	ret

0101910c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101910c:	defffd04 	addi	sp,sp,-12
 1019110:	dfc00215 	stw	ra,8(sp)
 1019114:	df000115 	stw	fp,4(sp)
 1019118:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101911c:	008040f4 	movhi	r2,259
 1019120:	10a3da04 	addi	r2,r2,-28824
 1019124:	10800017 	ldw	r2,0(r2)
 1019128:	1005003a 	cmpeq	r2,r2,zero
 101912c:	1000061e 	bne	r2,zero,1019148 <alt_get_errno+0x3c>
 1019130:	008040f4 	movhi	r2,259
 1019134:	10a3da04 	addi	r2,r2,-28824
 1019138:	10800017 	ldw	r2,0(r2)
 101913c:	103ee83a 	callr	r2
 1019140:	e0bfff15 	stw	r2,-4(fp)
 1019144:	00000306 	br	1019154 <alt_get_errno+0x48>
 1019148:	008040f4 	movhi	r2,259
 101914c:	10a40f04 	addi	r2,r2,-28612
 1019150:	e0bfff15 	stw	r2,-4(fp)
 1019154:	e0bfff17 	ldw	r2,-4(fp)
}
 1019158:	e037883a 	mov	sp,fp
 101915c:	dfc00117 	ldw	ra,4(sp)
 1019160:	df000017 	ldw	fp,0(sp)
 1019164:	dec00204 	addi	sp,sp,8
 1019168:	f800283a 	ret

0101916c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 101916c:	defffc04 	addi	sp,sp,-16
 1019170:	dfc00315 	stw	ra,12(sp)
 1019174:	df000215 	stw	fp,8(sp)
 1019178:	dc000115 	stw	r16,4(sp)
 101917c:	df000104 	addi	fp,sp,4
 1019180:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1019184:	e0bfff17 	ldw	r2,-4(fp)
 1019188:	108000d0 	cmplti	r2,r2,3
 101918c:	10000f1e 	bne	r2,zero,10191cc <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 1019190:	e13fff17 	ldw	r4,-4(fp)
 1019194:	040040b4 	movhi	r16,258
 1019198:	841e9d04 	addi	r16,r16,31348
 101919c:	01400304 	movi	r5,12
 10191a0:	100def40 	call	100def4 <__mulsi3>
 10191a4:	1405883a 	add	r2,r2,r16
 10191a8:	10800204 	addi	r2,r2,8
 10191ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10191b0:	e13fff17 	ldw	r4,-4(fp)
 10191b4:	040040b4 	movhi	r16,258
 10191b8:	841e9d04 	addi	r16,r16,31348
 10191bc:	01400304 	movi	r5,12
 10191c0:	100def40 	call	100def4 <__mulsi3>
 10191c4:	1405883a 	add	r2,r2,r16
 10191c8:	10000015 	stw	zero,0(r2)
  }
}
 10191cc:	e037883a 	mov	sp,fp
 10191d0:	dfc00217 	ldw	ra,8(sp)
 10191d4:	df000117 	ldw	fp,4(sp)
 10191d8:	dc000017 	ldw	r16,0(sp)
 10191dc:	dec00304 	addi	sp,sp,12
 10191e0:	f800283a 	ret

010191e4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 10191e4:	defff804 	addi	sp,sp,-32
 10191e8:	df000715 	stw	fp,28(sp)
 10191ec:	df000704 	addi	fp,sp,28
 10191f0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10191f4:	0005303a 	rdctl	r2,status
 10191f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10191fc:	e0fffb17 	ldw	r3,-20(fp)
 1019200:	00bfff84 	movi	r2,-2
 1019204:	1884703a 	and	r2,r3,r2
 1019208:	1001703a 	wrctl	status,r2
  
  return context;
 101920c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1019210:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1019214:	d0a07017 	ldw	r2,-32320(gp)
 1019218:	10c000c4 	addi	r3,r2,3
 101921c:	00bfff04 	movi	r2,-4
 1019220:	1884703a 	and	r2,r3,r2
 1019224:	d0a07015 	stw	r2,-32320(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1019228:	d0e07017 	ldw	r3,-32320(gp)
 101922c:	e0bffe17 	ldw	r2,-8(fp)
 1019230:	1887883a 	add	r3,r3,r2
 1019234:	00808034 	movhi	r2,512
 1019238:	10800004 	addi	r2,r2,0
 101923c:	10c0072e 	bgeu	r2,r3,101925c <sbrk+0x78>
 1019240:	e0bffd17 	ldw	r2,-12(fp)
 1019244:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019248:	e0bffa17 	ldw	r2,-24(fp)
 101924c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1019250:	00bfffc4 	movi	r2,-1
 1019254:	e0bfff15 	stw	r2,-4(fp)
 1019258:	00000c06 	br	101928c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 101925c:	d0a07017 	ldw	r2,-32320(gp)
 1019260:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 1019264:	d0e07017 	ldw	r3,-32320(gp)
 1019268:	e0bffe17 	ldw	r2,-8(fp)
 101926c:	1885883a 	add	r2,r3,r2
 1019270:	d0a07015 	stw	r2,-32320(gp)
 1019274:	e0bffd17 	ldw	r2,-12(fp)
 1019278:	e0bff915 	stw	r2,-28(fp)
 101927c:	e0bff917 	ldw	r2,-28(fp)
 1019280:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1019284:	e0bffc17 	ldw	r2,-16(fp)
 1019288:	e0bfff15 	stw	r2,-4(fp)
 101928c:	e0bfff17 	ldw	r2,-4(fp)
} 
 1019290:	e037883a 	mov	sp,fp
 1019294:	df000017 	ldw	fp,0(sp)
 1019298:	dec00104 	addi	sp,sp,4
 101929c:	f800283a 	ret

010192a0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10192a0:	defff704 	addi	sp,sp,-36
 10192a4:	dfc00815 	stw	ra,32(sp)
 10192a8:	df000715 	stw	fp,28(sp)
 10192ac:	df000704 	addi	fp,sp,28
 10192b0:	e13ffb15 	stw	r4,-20(fp)
 10192b4:	e17ffc15 	stw	r5,-16(fp)
 10192b8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10192bc:	e0bffb17 	ldw	r2,-20(fp)
 10192c0:	1004803a 	cmplt	r2,r2,zero
 10192c4:	1000091e 	bne	r2,zero,10192ec <write+0x4c>
 10192c8:	e13ffb17 	ldw	r4,-20(fp)
 10192cc:	01400304 	movi	r5,12
 10192d0:	100def40 	call	100def4 <__mulsi3>
 10192d4:	1007883a 	mov	r3,r2
 10192d8:	008040b4 	movhi	r2,258
 10192dc:	109e9d04 	addi	r2,r2,31348
 10192e0:	1887883a 	add	r3,r3,r2
 10192e4:	e0ffff15 	stw	r3,-4(fp)
 10192e8:	00000106 	br	10192f0 <write+0x50>
 10192ec:	e03fff15 	stw	zero,-4(fp)
 10192f0:	e0bfff17 	ldw	r2,-4(fp)
 10192f4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 10192f8:	e0bffa17 	ldw	r2,-24(fp)
 10192fc:	1005003a 	cmpeq	r2,r2,zero
 1019300:	1000241e 	bne	r2,zero,1019394 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1019304:	e0bffa17 	ldw	r2,-24(fp)
 1019308:	10800217 	ldw	r2,8(r2)
 101930c:	108000cc 	andi	r2,r2,3
 1019310:	1005003a 	cmpeq	r2,r2,zero
 1019314:	10001a1e 	bne	r2,zero,1019380 <write+0xe0>
 1019318:	e0bffa17 	ldw	r2,-24(fp)
 101931c:	10800017 	ldw	r2,0(r2)
 1019320:	10800617 	ldw	r2,24(r2)
 1019324:	1005003a 	cmpeq	r2,r2,zero
 1019328:	1000151e 	bne	r2,zero,1019380 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 101932c:	e0bffa17 	ldw	r2,-24(fp)
 1019330:	10800017 	ldw	r2,0(r2)
 1019334:	10800617 	ldw	r2,24(r2)
 1019338:	e17ffc17 	ldw	r5,-16(fp)
 101933c:	e1bffd17 	ldw	r6,-12(fp)
 1019340:	e13ffa17 	ldw	r4,-24(fp)
 1019344:	103ee83a 	callr	r2
 1019348:	e0bff915 	stw	r2,-28(fp)
 101934c:	e0bff917 	ldw	r2,-28(fp)
 1019350:	1004403a 	cmpge	r2,r2,zero
 1019354:	1000071e 	bne	r2,zero,1019374 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 1019358:	10193c40 	call	10193c4 <alt_get_errno>
 101935c:	e0fff917 	ldw	r3,-28(fp)
 1019360:	00c7c83a 	sub	r3,zero,r3
 1019364:	10c00015 	stw	r3,0(r2)
        return -1;
 1019368:	00bfffc4 	movi	r2,-1
 101936c:	e0bffe15 	stw	r2,-8(fp)
 1019370:	00000e06 	br	10193ac <write+0x10c>
      }
      return rval;
 1019374:	e0bff917 	ldw	r2,-28(fp)
 1019378:	e0bffe15 	stw	r2,-8(fp)
 101937c:	00000b06 	br	10193ac <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1019380:	10193c40 	call	10193c4 <alt_get_errno>
 1019384:	1007883a 	mov	r3,r2
 1019388:	00800344 	movi	r2,13
 101938c:	18800015 	stw	r2,0(r3)
 1019390:	00000406 	br	10193a4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1019394:	10193c40 	call	10193c4 <alt_get_errno>
 1019398:	1007883a 	mov	r3,r2
 101939c:	00801444 	movi	r2,81
 10193a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10193a4:	00bfffc4 	movi	r2,-1
 10193a8:	e0bffe15 	stw	r2,-8(fp)
 10193ac:	e0bffe17 	ldw	r2,-8(fp)
}
 10193b0:	e037883a 	mov	sp,fp
 10193b4:	dfc00117 	ldw	ra,4(sp)
 10193b8:	df000017 	ldw	fp,0(sp)
 10193bc:	dec00204 	addi	sp,sp,8
 10193c0:	f800283a 	ret

010193c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10193c4:	defffd04 	addi	sp,sp,-12
 10193c8:	dfc00215 	stw	ra,8(sp)
 10193cc:	df000115 	stw	fp,4(sp)
 10193d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10193d4:	008040f4 	movhi	r2,259
 10193d8:	10a3da04 	addi	r2,r2,-28824
 10193dc:	10800017 	ldw	r2,0(r2)
 10193e0:	1005003a 	cmpeq	r2,r2,zero
 10193e4:	1000061e 	bne	r2,zero,1019400 <alt_get_errno+0x3c>
 10193e8:	008040f4 	movhi	r2,259
 10193ec:	10a3da04 	addi	r2,r2,-28824
 10193f0:	10800017 	ldw	r2,0(r2)
 10193f4:	103ee83a 	callr	r2
 10193f8:	e0bfff15 	stw	r2,-4(fp)
 10193fc:	00000306 	br	101940c <alt_get_errno+0x48>
 1019400:	008040f4 	movhi	r2,259
 1019404:	10a40f04 	addi	r2,r2,-28612
 1019408:	e0bfff15 	stw	r2,-4(fp)
 101940c:	e0bfff17 	ldw	r2,-4(fp)
}
 1019410:	e037883a 	mov	sp,fp
 1019414:	dfc00117 	ldw	ra,4(sp)
 1019418:	df000017 	ldw	fp,0(sp)
 101941c:	dec00204 	addi	sp,sp,8
 1019420:	f800283a 	ret

01019424 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 1019424:	deffdf04 	addi	sp,sp,-132
 1019428:	dfc02015 	stw	ra,128(sp)
 101942c:	df001f15 	stw	fp,124(sp)
 1019430:	df001f04 	addi	fp,sp,124
 1019434:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 1019438:	e17fe204 	addi	r5,fp,-120
 101943c:	01003fc4 	movi	r4,255
 1019440:	102127c0 	call	102127c <OSTaskQuery>
 1019444:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 1019448:	e0bffe83 	ldbu	r2,-6(fp)
 101944c:	10803fcc 	andi	r2,r2,255
 1019450:	1004c03a 	cmpne	r2,r2,zero
 1019454:	1000191e 	bne	r2,zero,10194bc <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 1019458:	e0bfee83 	ldbu	r2,-70(fp)
 101945c:	10803fcc 	andi	r2,r2,255
 1019460:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 1019464:	d120ad17 	ldw	r4,-32076(gp)
 1019468:	e17ffd04 	addi	r5,fp,-12
 101946c:	101f7c80 	call	101f7c8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 1019470:	e0bffe43 	ldbu	r2,-7(fp)
 1019474:	10803fcc 	andi	r2,r2,255
 1019478:	1005003a 	cmpeq	r2,r2,zero
 101947c:	1000071e 	bne	r2,zero,101949c <__env_lock+0x78>
 1019480:	d0e07117 	ldw	r3,-32316(gp)
 1019484:	e0bfe117 	ldw	r2,-124(fp)
 1019488:	10c0041e 	bne	r2,r3,101949c <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 101948c:	d0a0ac17 	ldw	r2,-32080(gp)
 1019490:	10800044 	addi	r2,r2,1
 1019494:	d0a0ac15 	stw	r2,-32080(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 1019498:	00000806 	br	10194bc <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 101949c:	d120ad17 	ldw	r4,-32076(gp)
 10194a0:	e1bffe84 	addi	r6,fp,-6
 10194a4:	000b883a 	mov	r5,zero
 10194a8:	101f2a80 	call	101f2a8 <OSSemPend>
    locks  = 1;
 10194ac:	00800044 	movi	r2,1
 10194b0:	d0a0ac15 	stw	r2,-32080(gp)
    lockid = id;
 10194b4:	e0bfe117 	ldw	r2,-124(fp)
 10194b8:	d0a07115 	stw	r2,-32316(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 10194bc:	e037883a 	mov	sp,fp
 10194c0:	dfc00117 	ldw	ra,4(sp)
 10194c4:	df000017 	ldw	fp,0(sp)
 10194c8:	dec00204 	addi	sp,sp,8
 10194cc:	f800283a 	ret

010194d0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 10194d0:	defffd04 	addi	sp,sp,-12
 10194d4:	dfc00215 	stw	ra,8(sp)
 10194d8:	df000115 	stw	fp,4(sp)
 10194dc:	df000104 	addi	fp,sp,4
 10194e0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 10194e4:	d0a0ac17 	ldw	r2,-32080(gp)
 10194e8:	1005003a 	cmpeq	r2,r2,zero
 10194ec:	10000a1e 	bne	r2,zero,1019518 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 10194f0:	d0a0ac17 	ldw	r2,-32080(gp)
 10194f4:	10bfffc4 	addi	r2,r2,-1
 10194f8:	d0a0ac15 	stw	r2,-32080(gp)
 10194fc:	d0a0ac17 	ldw	r2,-32080(gp)
 1019500:	1004c03a 	cmpne	r2,r2,zero
 1019504:	1000041e 	bne	r2,zero,1019518 <__env_unlock+0x48>
  {
    lockid = -1;
 1019508:	00bfffc4 	movi	r2,-1
 101950c:	d0a07115 	stw	r2,-32316(gp)
    OSSemPost( alt_envsem );
 1019510:	d120ad17 	ldw	r4,-32076(gp)
 1019514:	101f6a00 	call	101f6a0 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 1019518:	e037883a 	mov	sp,fp
 101951c:	dfc00117 	ldw	ra,4(sp)
 1019520:	df000017 	ldw	fp,0(sp)
 1019524:	dec00204 	addi	sp,sp,8
 1019528:	f800283a 	ret

0101952c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 101952c:	deffdb04 	addi	sp,sp,-148
 1019530:	dfc02415 	stw	ra,144(sp)
 1019534:	df002315 	stw	fp,140(sp)
 1019538:	df002304 	addi	fp,sp,140
 101953c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1019540:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 1019544:	008040f4 	movhi	r2,259
 1019548:	10a41b44 	addi	r2,r2,-28563
 101954c:	10800003 	ldbu	r2,0(r2)
 1019550:	10803fcc 	andi	r2,r2,255
 1019554:	10800058 	cmpnei	r2,r2,1
 1019558:	1000311e 	bne	r2,zero,1019620 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 101955c:	e17fe204 	addi	r5,fp,-120
 1019560:	01003fc4 	movi	r4,255
 1019564:	102127c0 	call	102127c <OSTaskQuery>
 1019568:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 101956c:	e0bffe83 	ldbu	r2,-6(fp)
 1019570:	10803fcc 	andi	r2,r2,255
 1019574:	1004c03a 	cmpne	r2,r2,zero
 1019578:	1000291e 	bne	r2,zero,1019620 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 101957c:	e0bfee83 	ldbu	r2,-70(fp)
 1019580:	10803fcc 	andi	r2,r2,255
 1019584:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 1019588:	d120af17 	ldw	r4,-32068(gp)
 101958c:	e17ffd04 	addi	r5,fp,-12
 1019590:	101f7c80 	call	101f7c8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019594:	0005303a 	rdctl	r2,status
 1019598:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101959c:	e0ffdf17 	ldw	r3,-132(fp)
 10195a0:	00bfff84 	movi	r2,-2
 10195a4:	1884703a 	and	r2,r3,r2
 10195a8:	1001703a 	wrctl	status,r2
  
  return context;
 10195ac:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 10195b0:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 10195b4:	e0bffd0b 	ldhu	r2,-12(fp)
 10195b8:	10bfffcc 	andi	r2,r2,65535
 10195bc:	1004c03a 	cmpne	r2,r2,zero
 10195c0:	10000b1e 	bne	r2,zero,10195f0 <__malloc_lock+0xc4>
 10195c4:	d0e07217 	ldw	r3,-32312(gp)
 10195c8:	e0bfe117 	ldw	r2,-124(fp)
 10195cc:	10c0081e 	bne	r2,r3,10195f0 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 10195d0:	d0a0ae17 	ldw	r2,-32072(gp)
 10195d4:	10800044 	addi	r2,r2,1
 10195d8:	d0a0ae15 	stw	r2,-32072(gp)
 10195dc:	e0bfe017 	ldw	r2,-128(fp)
 10195e0:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10195e4:	e0bfde17 	ldw	r2,-136(fp)
 10195e8:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 10195ec:	00000c06 	br	1019620 <__malloc_lock+0xf4>
 10195f0:	e0bfe017 	ldw	r2,-128(fp)
 10195f4:	e0bfdd15 	stw	r2,-140(fp)
 10195f8:	e0bfdd17 	ldw	r2,-140(fp)
 10195fc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 1019600:	d120af17 	ldw	r4,-32068(gp)
 1019604:	e1bffe84 	addi	r6,fp,-6
 1019608:	000b883a 	mov	r5,zero
 101960c:	101f2a80 	call	101f2a8 <OSSemPend>
    locks  = 1;
 1019610:	00800044 	movi	r2,1
 1019614:	d0a0ae15 	stw	r2,-32072(gp)
    lockid = id;
 1019618:	e0bfe117 	ldw	r2,-124(fp)
 101961c:	d0a07215 	stw	r2,-32312(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 1019620:	e037883a 	mov	sp,fp
 1019624:	dfc00117 	ldw	ra,4(sp)
 1019628:	df000017 	ldw	fp,0(sp)
 101962c:	dec00204 	addi	sp,sp,8
 1019630:	f800283a 	ret

01019634 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1019634:	defff804 	addi	sp,sp,-32
 1019638:	dfc00715 	stw	ra,28(sp)
 101963c:	df000615 	stw	fp,24(sp)
 1019640:	df000604 	addi	fp,sp,24
 1019644:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1019648:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 101964c:	008040f4 	movhi	r2,259
 1019650:	10a41b44 	addi	r2,r2,-28563
 1019654:	10800003 	ldbu	r2,0(r2)
 1019658:	10803fcc 	andi	r2,r2,255
 101965c:	10800058 	cmpnei	r2,r2,1
 1019660:	1000231e 	bne	r2,zero,10196f0 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019664:	0005303a 	rdctl	r2,status
 1019668:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101966c:	e0fffd17 	ldw	r3,-12(fp)
 1019670:	00bfff84 	movi	r2,-2
 1019674:	1884703a 	and	r2,r3,r2
 1019678:	1001703a 	wrctl	status,r2
  
  return context;
 101967c:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 1019680:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 1019684:	d0a0ae17 	ldw	r2,-32072(gp)
 1019688:	1004c03a 	cmpne	r2,r2,zero
 101968c:	1000051e 	bne	r2,zero,10196a4 <__malloc_unlock+0x70>
 1019690:	e0bffe17 	ldw	r2,-8(fp)
 1019694:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019698:	e0bffc17 	ldw	r2,-16(fp)
 101969c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 10196a0:	00001306 	br	10196f0 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 10196a4:	d0a0ae17 	ldw	r2,-32072(gp)
 10196a8:	10bfffc4 	addi	r2,r2,-1
 10196ac:	d0a0ae15 	stw	r2,-32072(gp)
 10196b0:	d0a0ae17 	ldw	r2,-32072(gp)
 10196b4:	1004c03a 	cmpne	r2,r2,zero
 10196b8:	1000091e 	bne	r2,zero,10196e0 <__malloc_unlock+0xac>
  {
    lockid = -1;
 10196bc:	00bfffc4 	movi	r2,-1
 10196c0:	d0a07215 	stw	r2,-32312(gp)
 10196c4:	e0bffe17 	ldw	r2,-8(fp)
 10196c8:	e0bffb15 	stw	r2,-20(fp)
 10196cc:	e0bffb17 	ldw	r2,-20(fp)
 10196d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 10196d4:	d120af17 	ldw	r4,-32068(gp)
 10196d8:	101f6a00 	call	101f6a0 <OSSemPost>
 10196dc:	00000406 	br	10196f0 <__malloc_unlock+0xbc>
 10196e0:	e0bffe17 	ldw	r2,-8(fp)
 10196e4:	e0bffa15 	stw	r2,-24(fp)
 10196e8:	e0bffa17 	ldw	r2,-24(fp)
 10196ec:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 10196f0:	e037883a 	mov	sp,fp
 10196f4:	dfc00117 	ldw	ra,4(sp)
 10196f8:	df000017 	ldw	fp,0(sp)
 10196fc:	dec00204 	addi	sp,sp,8
 1019700:	f800283a 	ret

01019704 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 1019704:	defff604 	addi	sp,sp,-40
 1019708:	dfc00915 	stw	ra,36(sp)
 101970c:	df000815 	stw	fp,32(sp)
 1019710:	df000804 	addi	fp,sp,32
 1019714:	e13ffc15 	stw	r4,-16(fp)
 1019718:	e17ffd15 	stw	r5,-12(fp)
 101971c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1019720:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1019724:	e0bffe17 	ldw	r2,-8(fp)
 1019728:	1004c03a 	cmpne	r2,r2,zero
 101972c:	1000021e 	bne	r2,zero,1019738 <OSEventNameGet+0x34>
        return (0);
 1019730:	e03fff15 	stw	zero,-4(fp)
 1019734:	00003906 	br	101981c <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 1019738:	e0bffc17 	ldw	r2,-16(fp)
 101973c:	1004c03a 	cmpne	r2,r2,zero
 1019740:	1000051e 	bne	r2,zero,1019758 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1019744:	e0fffe17 	ldw	r3,-8(fp)
 1019748:	00800104 	movi	r2,4
 101974c:	18800005 	stb	r2,0(r3)
        return (0);
 1019750:	e03fff15 	stw	zero,-4(fp)
 1019754:	00003106 	br	101981c <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1019758:	e0bffd17 	ldw	r2,-12(fp)
 101975c:	1004c03a 	cmpne	r2,r2,zero
 1019760:	1000051e 	bne	r2,zero,1019778 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 1019764:	e0fffe17 	ldw	r3,-8(fp)
 1019768:	00800304 	movi	r2,12
 101976c:	18800005 	stb	r2,0(r3)
        return (0);
 1019770:	e03fff15 	stw	zero,-4(fp)
 1019774:	00002906 	br	101981c <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1019778:	d0a0be03 	ldbu	r2,-32008(gp)
 101977c:	10803fcc 	andi	r2,r2,255
 1019780:	1005003a 	cmpeq	r2,r2,zero
 1019784:	1000051e 	bne	r2,zero,101979c <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 1019788:	e0fffe17 	ldw	r3,-8(fp)
 101978c:	00800444 	movi	r2,17
 1019790:	18800005 	stb	r2,0(r3)
        return (0);
 1019794:	e03fff15 	stw	zero,-4(fp)
 1019798:	00002006 	br	101981c <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 101979c:	e0bffc17 	ldw	r2,-16(fp)
 10197a0:	10800003 	ldbu	r2,0(r2)
 10197a4:	10803fcc 	andi	r2,r2,255
 10197a8:	10bfffc4 	addi	r2,r2,-1
 10197ac:	10800128 	cmpgeui	r2,r2,4
 10197b0:	1000161e 	bne	r2,zero,101980c <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10197b4:	0005303a 	rdctl	r2,status
 10197b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10197bc:	e0fff917 	ldw	r3,-28(fp)
 10197c0:	00bfff84 	movi	r2,-2
 10197c4:	1884703a 	and	r2,r3,r2
 10197c8:	1001703a 	wrctl	status,r2
  
  return context;
 10197cc:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 10197d0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 10197d4:	e0bffc17 	ldw	r2,-16(fp)
 10197d8:	11400384 	addi	r5,r2,14
 10197dc:	e13ffd17 	ldw	r4,-12(fp)
 10197e0:	101b2880 	call	101b288 <OS_StrCopy>
 10197e4:	e0bffb05 	stb	r2,-20(fp)
 10197e8:	e0bffa17 	ldw	r2,-24(fp)
 10197ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10197f0:	e0bff817 	ldw	r2,-32(fp)
 10197f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10197f8:	e0bffe17 	ldw	r2,-8(fp)
 10197fc:	10000005 	stb	zero,0(r2)
    return (len);
 1019800:	e0bffb03 	ldbu	r2,-20(fp)
 1019804:	e0bfff15 	stw	r2,-4(fp)
 1019808:	00000406 	br	101981c <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 101980c:	e0fffe17 	ldw	r3,-8(fp)
 1019810:	00800044 	movi	r2,1
 1019814:	18800005 	stb	r2,0(r3)
             return (0);
 1019818:	e03fff15 	stw	zero,-4(fp)
 101981c:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 1019820:	e037883a 	mov	sp,fp
 1019824:	dfc00117 	ldw	ra,4(sp)
 1019828:	df000017 	ldw	fp,0(sp)
 101982c:	dec00204 	addi	sp,sp,8
 1019830:	f800283a 	ret

01019834 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 1019834:	defff604 	addi	sp,sp,-40
 1019838:	dfc00915 	stw	ra,36(sp)
 101983c:	df000815 	stw	fp,32(sp)
 1019840:	df000804 	addi	fp,sp,32
 1019844:	e13ffd15 	stw	r4,-12(fp)
 1019848:	e17ffe15 	stw	r5,-8(fp)
 101984c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1019850:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1019854:	e0bfff17 	ldw	r2,-4(fp)
 1019858:	1005003a 	cmpeq	r2,r2,zero
 101985c:	1000411e 	bne	r2,zero,1019964 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 1019860:	e0bffd17 	ldw	r2,-12(fp)
 1019864:	1004c03a 	cmpne	r2,r2,zero
 1019868:	1000041e 	bne	r2,zero,101987c <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 101986c:	e0ffff17 	ldw	r3,-4(fp)
 1019870:	00800104 	movi	r2,4
 1019874:	18800005 	stb	r2,0(r3)
        return;
 1019878:	00003a06 	br	1019964 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 101987c:	e0bffe17 	ldw	r2,-8(fp)
 1019880:	1004c03a 	cmpne	r2,r2,zero
 1019884:	1000041e 	bne	r2,zero,1019898 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 1019888:	e0ffff17 	ldw	r3,-4(fp)
 101988c:	00800304 	movi	r2,12
 1019890:	18800005 	stb	r2,0(r3)
        return;
 1019894:	00003306 	br	1019964 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1019898:	d0a0be03 	ldbu	r2,-32008(gp)
 101989c:	10803fcc 	andi	r2,r2,255
 10198a0:	1005003a 	cmpeq	r2,r2,zero
 10198a4:	1000041e 	bne	r2,zero,10198b8 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 10198a8:	e0ffff17 	ldw	r3,-4(fp)
 10198ac:	00800484 	movi	r2,18
 10198b0:	18800005 	stb	r2,0(r3)
        return;
 10198b4:	00002b06 	br	1019964 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 10198b8:	e0bffd17 	ldw	r2,-12(fp)
 10198bc:	10800003 	ldbu	r2,0(r2)
 10198c0:	10803fcc 	andi	r2,r2,255
 10198c4:	10bfffc4 	addi	r2,r2,-1
 10198c8:	10800128 	cmpgeui	r2,r2,4
 10198cc:	10000f1e 	bne	r2,zero,101990c <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10198d0:	0005303a 	rdctl	r2,status
 10198d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10198d8:	e0fffa17 	ldw	r3,-24(fp)
 10198dc:	00bfff84 	movi	r2,-2
 10198e0:	1884703a 	and	r2,r3,r2
 10198e4:	1001703a 	wrctl	status,r2
  
  return context;
 10198e8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 10198ec:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 10198f0:	e13ffe17 	ldw	r4,-8(fp)
 10198f4:	101b3080 	call	101b308 <OS_StrLen>
 10198f8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 10198fc:	e0bffc03 	ldbu	r2,-16(fp)
 1019900:	10800828 	cmpgeui	r2,r2,32
 1019904:	1000051e 	bne	r2,zero,101991c <OSEventNameSet+0xe8>
 1019908:	00000c06 	br	101993c <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 101990c:	e0ffff17 	ldw	r3,-4(fp)
 1019910:	00800044 	movi	r2,1
 1019914:	18800005 	stb	r2,0(r3)
             return;
 1019918:	00001206 	br	1019964 <OSEventNameSet+0x130>
 101991c:	e0bffb17 	ldw	r2,-20(fp)
 1019920:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019924:	e0bff917 	ldw	r2,-28(fp)
 1019928:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 101992c:	e0ffff17 	ldw	r3,-4(fp)
 1019930:	008002c4 	movi	r2,11
 1019934:	18800005 	stb	r2,0(r3)
        return;
 1019938:	00000a06 	br	1019964 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 101993c:	e0bffd17 	ldw	r2,-12(fp)
 1019940:	11000384 	addi	r4,r2,14
 1019944:	e17ffe17 	ldw	r5,-8(fp)
 1019948:	101b2880 	call	101b288 <OS_StrCopy>
 101994c:	e0bffb17 	ldw	r2,-20(fp)
 1019950:	e0bff815 	stw	r2,-32(fp)
 1019954:	e0bff817 	ldw	r2,-32(fp)
 1019958:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101995c:	e0bfff17 	ldw	r2,-4(fp)
 1019960:	10000005 	stb	zero,0(r2)
}
 1019964:	e037883a 	mov	sp,fp
 1019968:	dfc00117 	ldw	ra,4(sp)
 101996c:	df000017 	ldw	fp,0(sp)
 1019970:	dec00204 	addi	sp,sp,8
 1019974:	f800283a 	ret

01019978 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 1019978:	deffe704 	addi	sp,sp,-100
 101997c:	dfc01815 	stw	ra,96(sp)
 1019980:	df001715 	stw	fp,92(sp)
 1019984:	df001704 	addi	fp,sp,92
 1019988:	e13ff615 	stw	r4,-40(fp)
 101998c:	e17ff715 	stw	r5,-36(fp)
 1019990:	e1bff815 	stw	r6,-32(fp)
 1019994:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 1019998:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 101999c:	e0800217 	ldw	r2,8(fp)
 10199a0:	1004c03a 	cmpne	r2,r2,zero
 10199a4:	1000021e 	bne	r2,zero,10199b0 <OSEventPendMulti+0x38>
        return (0);
 10199a8:	e03fff15 	stw	zero,-4(fp)
 10199ac:	00019906 	br	101a014 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 10199b0:	e0bff617 	ldw	r2,-40(fp)
 10199b4:	1004c03a 	cmpne	r2,r2,zero
 10199b8:	1000051e 	bne	r2,zero,10199d0 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 10199bc:	e0c00217 	ldw	r3,8(fp)
 10199c0:	00800104 	movi	r2,4
 10199c4:	18800005 	stb	r2,0(r3)
        return (0);
 10199c8:	e03fff15 	stw	zero,-4(fp)
 10199cc:	00019106 	br	101a014 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 10199d0:	e0bff717 	ldw	r2,-36(fp)
 10199d4:	1004c03a 	cmpne	r2,r2,zero
 10199d8:	1000051e 	bne	r2,zero,10199f0 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 10199dc:	e0c00217 	ldw	r3,8(fp)
 10199e0:	00800104 	movi	r2,4
 10199e4:	18800005 	stb	r2,0(r3)
        return (0);
 10199e8:	e03fff15 	stw	zero,-4(fp)
 10199ec:	00018906 	br	101a014 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 10199f0:	e0bff817 	ldw	r2,-32(fp)
 10199f4:	1004c03a 	cmpne	r2,r2,zero
 10199f8:	1000051e 	bne	r2,zero,1019a10 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 10199fc:	e0c00217 	ldw	r3,8(fp)
 1019a00:	00800104 	movi	r2,4
 1019a04:	18800005 	stb	r2,0(r3)
        return (0);
 1019a08:	e03fff15 	stw	zero,-4(fp)
 1019a0c:	00018106 	br	101a014 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 1019a10:	e0bff717 	ldw	r2,-36(fp)
 1019a14:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 1019a18:	e0bff617 	ldw	r2,-40(fp)
 1019a1c:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 1019a20:	e0bff517 	ldw	r2,-44(fp)
 1019a24:	10800017 	ldw	r2,0(r2)
 1019a28:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 1019a2c:	00001806 	br	1019a90 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 1019a30:	e0bff417 	ldw	r2,-48(fp)
 1019a34:	10800003 	ldbu	r2,0(r2)
 1019a38:	10803fcc 	andi	r2,r2,255
 1019a3c:	e0bffe15 	stw	r2,-8(fp)
 1019a40:	e0fffe17 	ldw	r3,-8(fp)
 1019a44:	188000a0 	cmpeqi	r2,r3,2
 1019a48:	10000b1e 	bne	r2,zero,1019a78 <OSEventPendMulti+0x100>
 1019a4c:	e0fffe17 	ldw	r3,-8(fp)
 1019a50:	188000e0 	cmpeqi	r2,r3,3
 1019a54:	1000081e 	bne	r2,zero,1019a78 <OSEventPendMulti+0x100>
 1019a58:	e0fffe17 	ldw	r3,-8(fp)
 1019a5c:	18800060 	cmpeqi	r2,r3,1
 1019a60:	1000051e 	bne	r2,zero,1019a78 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 1019a64:	e0c00217 	ldw	r3,8(fp)
 1019a68:	00800044 	movi	r2,1
 1019a6c:	18800005 	stb	r2,0(r3)
                 return (0);
 1019a70:	e03fff15 	stw	zero,-4(fp)
 1019a74:	00016706 	br	101a014 <OSEventPendMulti+0x69c>
        }
        pevents++;
 1019a78:	e0bff517 	ldw	r2,-44(fp)
 1019a7c:	10800104 	addi	r2,r2,4
 1019a80:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 1019a84:	e0bff517 	ldw	r2,-44(fp)
 1019a88:	10800017 	ldw	r2,0(r2)
 1019a8c:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 1019a90:	e0bff417 	ldw	r2,-48(fp)
 1019a94:	1004c03a 	cmpne	r2,r2,zero
 1019a98:	103fe51e 	bne	r2,zero,1019a30 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 1019a9c:	d0a0be03 	ldbu	r2,-32008(gp)
 1019aa0:	10803fcc 	andi	r2,r2,255
 1019aa4:	1005003a 	cmpeq	r2,r2,zero
 1019aa8:	1000051e 	bne	r2,zero,1019ac0 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 1019aac:	e0c00217 	ldw	r3,8(fp)
 1019ab0:	00800084 	movi	r2,2
 1019ab4:	18800005 	stb	r2,0(r3)
        return (0);
 1019ab8:	e03fff15 	stw	zero,-4(fp)
 1019abc:	00015506 	br	101a014 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 1019ac0:	d0a0b003 	ldbu	r2,-32064(gp)
 1019ac4:	10803fcc 	andi	r2,r2,255
 1019ac8:	1005003a 	cmpeq	r2,r2,zero
 1019acc:	1000051e 	bne	r2,zero,1019ae4 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 1019ad0:	e0c00217 	ldw	r3,8(fp)
 1019ad4:	00800344 	movi	r2,13
 1019ad8:	18800005 	stb	r2,0(r3)
        return (0);
 1019adc:	e03fff15 	stw	zero,-4(fp)
 1019ae0:	00014c06 	br	101a014 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019ae4:	0005303a 	rdctl	r2,status
 1019ae8:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019aec:	e0ffef17 	ldw	r3,-68(fp)
 1019af0:	00bfff84 	movi	r2,-2
 1019af4:	1884703a 	and	r2,r3,r2
 1019af8:	1001703a 	wrctl	status,r2
  
  return context;
 1019afc:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 1019b00:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 1019b04:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 1019b08:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 1019b0c:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 1019b10:	e0bff617 	ldw	r2,-40(fp)
 1019b14:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 1019b18:	e0bff517 	ldw	r2,-44(fp)
 1019b1c:	10800017 	ldw	r2,0(r2)
 1019b20:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 1019b24:	00008f06 	br	1019d64 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 1019b28:	e0bff417 	ldw	r2,-48(fp)
 1019b2c:	10800003 	ldbu	r2,0(r2)
 1019b30:	10803fcc 	andi	r2,r2,255
 1019b34:	e0bffd15 	stw	r2,-12(fp)
 1019b38:	e0fffd17 	ldw	r3,-12(fp)
 1019b3c:	188000a0 	cmpeqi	r2,r3,2
 1019b40:	1000441e 	bne	r2,zero,1019c54 <OSEventPendMulti+0x2dc>
 1019b44:	e0fffd17 	ldw	r3,-12(fp)
 1019b48:	188000e0 	cmpeqi	r2,r3,3
 1019b4c:	1000041e 	bne	r2,zero,1019b60 <OSEventPendMulti+0x1e8>
 1019b50:	e0fffd17 	ldw	r3,-12(fp)
 1019b54:	18800060 	cmpeqi	r2,r3,1
 1019b58:	1000211e 	bne	r2,zero,1019be0 <OSEventPendMulti+0x268>
 1019b5c:	00006f06 	br	1019d1c <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 1019b60:	e0bff417 	ldw	r2,-48(fp)
 1019b64:	1080020b 	ldhu	r2,8(r2)
 1019b68:	10bfffcc 	andi	r2,r2,65535
 1019b6c:	1005003a 	cmpeq	r2,r2,zero
 1019b70:	1000171e 	bne	r2,zero,1019bd0 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 1019b74:	e0bff417 	ldw	r2,-48(fp)
 1019b78:	1080020b 	ldhu	r2,8(r2)
 1019b7c:	10bfffc4 	addi	r2,r2,-1
 1019b80:	1007883a 	mov	r3,r2
 1019b84:	e0bff417 	ldw	r2,-48(fp)
 1019b88:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 1019b8c:	e0fff717 	ldw	r3,-36(fp)
 1019b90:	e0bff417 	ldw	r2,-48(fp)
 1019b94:	18800015 	stw	r2,0(r3)
 1019b98:	e0bff717 	ldw	r2,-36(fp)
 1019b9c:	10800104 	addi	r2,r2,4
 1019ba0:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 1019ba4:	00800044 	movi	r2,1
 1019ba8:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 1019bac:	e0bff817 	ldw	r2,-32(fp)
 1019bb0:	10000015 	stw	zero,0(r2)
 1019bb4:	e0bff817 	ldw	r2,-32(fp)
 1019bb8:	10800104 	addi	r2,r2,4
 1019bbc:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 1019bc0:	e0bff18b 	ldhu	r2,-58(fp)
 1019bc4:	10800044 	addi	r2,r2,1
 1019bc8:	e0bff18d 	sth	r2,-58(fp)
 1019bcc:	00005f06 	br	1019d4c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 1019bd0:	e0bff103 	ldbu	r2,-60(fp)
 1019bd4:	10800054 	ori	r2,r2,1
 1019bd8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 1019bdc:	00005b06 	br	1019d4c <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 1019be0:	e0bff417 	ldw	r2,-48(fp)
 1019be4:	10800117 	ldw	r2,4(r2)
 1019be8:	1005003a 	cmpeq	r2,r2,zero
 1019bec:	1000151e 	bne	r2,zero,1019c44 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 1019bf0:	e0bff417 	ldw	r2,-48(fp)
 1019bf4:	10c00117 	ldw	r3,4(r2)
 1019bf8:	e0bff817 	ldw	r2,-32(fp)
 1019bfc:	10c00015 	stw	r3,0(r2)
 1019c00:	e0bff817 	ldw	r2,-32(fp)
 1019c04:	10800104 	addi	r2,r2,4
 1019c08:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 1019c0c:	e0bff417 	ldw	r2,-48(fp)
 1019c10:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 1019c14:	e0fff717 	ldw	r3,-36(fp)
 1019c18:	e0bff417 	ldw	r2,-48(fp)
 1019c1c:	18800015 	stw	r2,0(r3)
 1019c20:	e0bff717 	ldw	r2,-36(fp)
 1019c24:	10800104 	addi	r2,r2,4
 1019c28:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 1019c2c:	00800044 	movi	r2,1
 1019c30:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 1019c34:	e0bff18b 	ldhu	r2,-58(fp)
 1019c38:	10800044 	addi	r2,r2,1
 1019c3c:	e0bff18d 	sth	r2,-58(fp)
 1019c40:	00004206 	br	1019d4c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 1019c44:	e0bff103 	ldbu	r2,-60(fp)
 1019c48:	10800094 	ori	r2,r2,2
 1019c4c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 1019c50:	00003e06 	br	1019d4c <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 1019c54:	e0bff417 	ldw	r2,-48(fp)
 1019c58:	10800117 	ldw	r2,4(r2)
 1019c5c:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 1019c60:	e0bff317 	ldw	r2,-52(fp)
 1019c64:	1080058b 	ldhu	r2,22(r2)
 1019c68:	10bfffcc 	andi	r2,r2,65535
 1019c6c:	1005003a 	cmpeq	r2,r2,zero
 1019c70:	1000261e 	bne	r2,zero,1019d0c <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 1019c74:	e0bff317 	ldw	r2,-52(fp)
 1019c78:	11000417 	ldw	r4,16(r2)
 1019c7c:	20c00017 	ldw	r3,0(r4)
 1019c80:	e0bff817 	ldw	r2,-32(fp)
 1019c84:	10c00015 	stw	r3,0(r2)
 1019c88:	e0bff817 	ldw	r2,-32(fp)
 1019c8c:	10800104 	addi	r2,r2,4
 1019c90:	e0bff815 	stw	r2,-32(fp)
 1019c94:	20c00104 	addi	r3,r4,4
 1019c98:	e0bff317 	ldw	r2,-52(fp)
 1019c9c:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 1019ca0:	e0bff317 	ldw	r2,-52(fp)
 1019ca4:	10c00417 	ldw	r3,16(r2)
 1019ca8:	e0bff317 	ldw	r2,-52(fp)
 1019cac:	10800217 	ldw	r2,8(r2)
 1019cb0:	1880041e 	bne	r3,r2,1019cc4 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 1019cb4:	e0bff317 	ldw	r2,-52(fp)
 1019cb8:	10c00117 	ldw	r3,4(r2)
 1019cbc:	e0bff317 	ldw	r2,-52(fp)
 1019cc0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 1019cc4:	e0bff317 	ldw	r2,-52(fp)
 1019cc8:	1080058b 	ldhu	r2,22(r2)
 1019ccc:	10bfffc4 	addi	r2,r2,-1
 1019cd0:	1007883a 	mov	r3,r2
 1019cd4:	e0bff317 	ldw	r2,-52(fp)
 1019cd8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 1019cdc:	e0fff717 	ldw	r3,-36(fp)
 1019ce0:	e0bff417 	ldw	r2,-48(fp)
 1019ce4:	18800015 	stw	r2,0(r3)
 1019ce8:	e0bff717 	ldw	r2,-36(fp)
 1019cec:	10800104 	addi	r2,r2,4
 1019cf0:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 1019cf4:	00800044 	movi	r2,1
 1019cf8:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 1019cfc:	e0bff18b 	ldhu	r2,-58(fp)
 1019d00:	10800044 	addi	r2,r2,1
 1019d04:	e0bff18d 	sth	r2,-58(fp)
 1019d08:	00001006 	br	1019d4c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 1019d0c:	e0bff103 	ldbu	r2,-60(fp)
 1019d10:	10800114 	ori	r2,r2,4
 1019d14:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 1019d18:	00000c06 	br	1019d4c <OSEventPendMulti+0x3d4>
 1019d1c:	e0bff017 	ldw	r2,-64(fp)
 1019d20:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019d24:	e0bfee17 	ldw	r2,-72(fp)
 1019d28:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 1019d2c:	e0bff717 	ldw	r2,-36(fp)
 1019d30:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 1019d34:	e0c00217 	ldw	r3,8(fp)
 1019d38:	00800044 	movi	r2,1
 1019d3c:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 1019d40:	e0bff18b 	ldhu	r2,-58(fp)
 1019d44:	e0bfff15 	stw	r2,-4(fp)
 1019d48:	0000b206 	br	101a014 <OSEventPendMulti+0x69c>
        }
        pevents++;
 1019d4c:	e0bff517 	ldw	r2,-44(fp)
 1019d50:	10800104 	addi	r2,r2,4
 1019d54:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 1019d58:	e0bff517 	ldw	r2,-44(fp)
 1019d5c:	10800017 	ldw	r2,0(r2)
 1019d60:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 1019d64:	e0bff417 	ldw	r2,-48(fp)
 1019d68:	1004c03a 	cmpne	r2,r2,zero
 1019d6c:	103f6e1e 	bne	r2,zero,1019b28 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 1019d70:	e0bff203 	ldbu	r2,-56(fp)
 1019d74:	10800058 	cmpnei	r2,r2,1
 1019d78:	10000b1e 	bne	r2,zero,1019da8 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 1019d7c:	e0bff717 	ldw	r2,-36(fp)
 1019d80:	10000015 	stw	zero,0(r2)
 1019d84:	e0bff017 	ldw	r2,-64(fp)
 1019d88:	e0bfed15 	stw	r2,-76(fp)
 1019d8c:	e0bfed17 	ldw	r2,-76(fp)
 1019d90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 1019d94:	e0800217 	ldw	r2,8(fp)
 1019d98:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 1019d9c:	e0fff18b 	ldhu	r3,-58(fp)
 1019da0:	e0ffff15 	stw	r3,-4(fp)
 1019da4:	00009b06 	br	101a014 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 1019da8:	d120bf17 	ldw	r4,-32004(gp)
 1019dac:	d0a0bf17 	ldw	r2,-32004(gp)
 1019db0:	10c00c03 	ldbu	r3,48(r2)
 1019db4:	e0bff103 	ldbu	r2,-60(fp)
 1019db8:	1884b03a 	or	r2,r3,r2
 1019dbc:	1007883a 	mov	r3,r2
 1019dc0:	00bfe004 	movi	r2,-128
 1019dc4:	1884b03a 	or	r2,r3,r2
 1019dc8:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1019dcc:	d0a0bf17 	ldw	r2,-32004(gp)
 1019dd0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 1019dd4:	d0e0bf17 	ldw	r3,-32004(gp)
 1019dd8:	e0bff90b 	ldhu	r2,-28(fp)
 1019ddc:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 1019de0:	e13ff617 	ldw	r4,-40(fp)
 1019de4:	101a9a80 	call	101a9a8 <OS_EventTaskWaitMulti>
 1019de8:	e0bff017 	ldw	r2,-64(fp)
 1019dec:	e0bfec15 	stw	r2,-80(fp)
 1019df0:	e0bfec17 	ldw	r2,-80(fp)
 1019df4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 1019df8:	101b1440 	call	101b144 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019dfc:	0005303a 	rdctl	r2,status
 1019e00:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019e04:	e0ffeb17 	ldw	r3,-84(fp)
 1019e08:	00bfff84 	movi	r2,-2
 1019e0c:	1884703a 	and	r2,r3,r2
 1019e10:	1001703a 	wrctl	status,r2
  
  return context;
 1019e14:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 1019e18:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 1019e1c:	d0a0bf17 	ldw	r2,-32004(gp)
 1019e20:	10800c43 	ldbu	r2,49(r2)
 1019e24:	10803fcc 	andi	r2,r2,255
 1019e28:	e0bffc15 	stw	r2,-16(fp)
 1019e2c:	e0fffc17 	ldw	r3,-16(fp)
 1019e30:	1805003a 	cmpeq	r2,r3,zero
 1019e34:	1000041e 	bne	r2,zero,1019e48 <OSEventPendMulti+0x4d0>
 1019e38:	e0fffc17 	ldw	r3,-16(fp)
 1019e3c:	188000a0 	cmpeqi	r2,r3,2
 1019e40:	1000011e 	bne	r2,zero,1019e48 <OSEventPendMulti+0x4d0>
 1019e44:	00001906 	br	1019eac <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 1019e48:	d0a0bf17 	ldw	r2,-32004(gp)
 1019e4c:	10800717 	ldw	r2,28(r2)
 1019e50:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 1019e54:	e0bff417 	ldw	r2,-48(fp)
 1019e58:	1005003a 	cmpeq	r2,r2,zero
 1019e5c:	10000c1e 	bne	r2,zero,1019e90 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 1019e60:	e0fff717 	ldw	r3,-36(fp)
 1019e64:	e0bff417 	ldw	r2,-48(fp)
 1019e68:	18800015 	stw	r2,0(r3)
 1019e6c:	e0bff717 	ldw	r2,-36(fp)
 1019e70:	10800104 	addi	r2,r2,4
 1019e74:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 1019e78:	e0bff717 	ldw	r2,-36(fp)
 1019e7c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 1019e80:	e0bff18b 	ldhu	r2,-58(fp)
 1019e84:	10800044 	addi	r2,r2,1
 1019e88:	e0bff18d 	sth	r2,-58(fp)
 1019e8c:	00000a06 	br	1019eb8 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 1019e90:	d0a0bf17 	ldw	r2,-32004(gp)
 1019e94:	00c00044 	movi	r3,1
 1019e98:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 1019e9c:	d120bf17 	ldw	r4,-32004(gp)
 1019ea0:	e17ff617 	ldw	r5,-40(fp)
 1019ea4:	101abb40 	call	101abb4 <OS_EventTaskRemoveMulti>
             }
			 break;
 1019ea8:	00000306 	br	1019eb8 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 1019eac:	d120bf17 	ldw	r4,-32004(gp)
 1019eb0:	e17ff617 	ldw	r5,-40(fp)
 1019eb4:	101abb40 	call	101abb4 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 1019eb8:	d0a0bf17 	ldw	r2,-32004(gp)
 1019ebc:	10800c43 	ldbu	r2,49(r2)
 1019ec0:	10803fcc 	andi	r2,r2,255
 1019ec4:	e0bffb15 	stw	r2,-20(fp)
 1019ec8:	e0fffb17 	ldw	r3,-20(fp)
 1019ecc:	1805003a 	cmpeq	r2,r3,zero
 1019ed0:	1000041e 	bne	r2,zero,1019ee4 <OSEventPendMulti+0x56c>
 1019ed4:	e0fffb17 	ldw	r3,-20(fp)
 1019ed8:	188000a0 	cmpeqi	r2,r3,2
 1019edc:	10002c1e 	bne	r2,zero,1019f90 <OSEventPendMulti+0x618>
 1019ee0:	00003406 	br	1019fb4 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 1019ee4:	e0bff417 	ldw	r2,-48(fp)
 1019ee8:	10800003 	ldbu	r2,0(r2)
 1019eec:	10803fcc 	andi	r2,r2,255
 1019ef0:	e0bffa15 	stw	r2,-24(fp)
 1019ef4:	e0fffa17 	ldw	r3,-24(fp)
 1019ef8:	18800050 	cmplti	r2,r3,1
 1019efc:	1000151e 	bne	r2,zero,1019f54 <OSEventPendMulti+0x5dc>
 1019f00:	e0fffa17 	ldw	r3,-24(fp)
 1019f04:	188000d0 	cmplti	r2,r3,3
 1019f08:	10000a1e 	bne	r2,zero,1019f34 <OSEventPendMulti+0x5bc>
 1019f0c:	e0fffa17 	ldw	r3,-24(fp)
 1019f10:	188000e0 	cmpeqi	r2,r3,3
 1019f14:	1000011e 	bne	r2,zero,1019f1c <OSEventPendMulti+0x5a4>
 1019f18:	00000e06 	br	1019f54 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 1019f1c:	e0bff817 	ldw	r2,-32(fp)
 1019f20:	10000015 	stw	zero,0(r2)
 1019f24:	e0bff817 	ldw	r2,-32(fp)
 1019f28:	10800104 	addi	r2,r2,4
 1019f2c:	e0bff815 	stw	r2,-32(fp)
                      break;
 1019f30:	00001406 	br	1019f84 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 1019f34:	d0a0bf17 	ldw	r2,-32004(gp)
 1019f38:	10c00917 	ldw	r3,36(r2)
 1019f3c:	e0bff817 	ldw	r2,-32(fp)
 1019f40:	10c00015 	stw	r3,0(r2)
 1019f44:	e0bff817 	ldw	r2,-32(fp)
 1019f48:	10800104 	addi	r2,r2,4
 1019f4c:	e0bff815 	stw	r2,-32(fp)
                      break;
 1019f50:	00000c06 	br	1019f84 <OSEventPendMulti+0x60c>
 1019f54:	e0bff017 	ldw	r2,-64(fp)
 1019f58:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019f5c:	e0bfea17 	ldw	r2,-88(fp)
 1019f60:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 1019f64:	e0bff717 	ldw	r2,-36(fp)
 1019f68:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 1019f6c:	e0c00217 	ldw	r3,8(fp)
 1019f70:	00800044 	movi	r2,1
 1019f74:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 1019f78:	e0bff18b 	ldhu	r2,-58(fp)
 1019f7c:	e0bfff15 	stw	r2,-4(fp)
 1019f80:	00002406 	br	101a014 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 1019f84:	e0800217 	ldw	r2,8(fp)
 1019f88:	10000005 	stb	zero,0(r2)
             break;
 1019f8c:	00001106 	br	1019fd4 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 1019f90:	e0bff817 	ldw	r2,-32(fp)
 1019f94:	10000015 	stw	zero,0(r2)
 1019f98:	e0bff817 	ldw	r2,-32(fp)
 1019f9c:	10800104 	addi	r2,r2,4
 1019fa0:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 1019fa4:	e0c00217 	ldw	r3,8(fp)
 1019fa8:	00800384 	movi	r2,14
 1019fac:	18800005 	stb	r2,0(r3)
             break;
 1019fb0:	00000806 	br	1019fd4 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 1019fb4:	e0bff817 	ldw	r2,-32(fp)
 1019fb8:	10000015 	stw	zero,0(r2)
 1019fbc:	e0bff817 	ldw	r2,-32(fp)
 1019fc0:	10800104 	addi	r2,r2,4
 1019fc4:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 1019fc8:	e0c00217 	ldw	r3,8(fp)
 1019fcc:	00800284 	movi	r2,10
 1019fd0:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 1019fd4:	d0a0bf17 	ldw	r2,-32004(gp)
 1019fd8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 1019fdc:	d0a0bf17 	ldw	r2,-32004(gp)
 1019fe0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 1019fe4:	d0a0bf17 	ldw	r2,-32004(gp)
 1019fe8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1019fec:	d0a0bf17 	ldw	r2,-32004(gp)
 1019ff0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 1019ff4:	d0a0bf17 	ldw	r2,-32004(gp)
 1019ff8:	10000915 	stw	zero,36(r2)
 1019ffc:	e0bff017 	ldw	r2,-64(fp)
 101a000:	e0bfe915 	stw	r2,-92(fp)
 101a004:	e0bfe917 	ldw	r2,-92(fp)
 101a008:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 101a00c:	e0fff18b 	ldhu	r3,-58(fp)
 101a010:	e0ffff15 	stw	r3,-4(fp)
 101a014:	e0bfff17 	ldw	r2,-4(fp)
}
 101a018:	e037883a 	mov	sp,fp
 101a01c:	dfc00117 	ldw	ra,4(sp)
 101a020:	df000017 	ldw	fp,0(sp)
 101a024:	dec00204 	addi	sp,sp,8
 101a028:	f800283a 	ret

0101a02c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 101a02c:	defffe04 	addi	sp,sp,-8
 101a030:	dfc00115 	stw	ra,4(sp)
 101a034:	df000015 	stw	fp,0(sp)
 101a038:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 101a03c:	1024fd00 	call	1024fd0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 101a040:	101adfc0 	call	101adfc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 101a044:	101ae400 	call	101ae40 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 101a048:	101afa40 	call	101afa4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 101a04c:	101ad200 	call	101ad20 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 101a050:	101d0540 	call	101d054 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 101a054:	101da2c0 	call	101da2c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 101a058:	101ed880 	call	101ed88 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 101a05c:	101aeac0 	call	101aeac <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 101a060:	101af280 	call	101af28 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 101a064:	1024fec0 	call	1024fec <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 101a068:	101b82c0 	call	101b82c <OSDebugInit>
#endif
}
 101a06c:	e037883a 	mov	sp,fp
 101a070:	dfc00117 	ldw	ra,4(sp)
 101a074:	df000017 	ldw	fp,0(sp)
 101a078:	dec00204 	addi	sp,sp,8
 101a07c:	f800283a 	ret

0101a080 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 101a080:	defffc04 	addi	sp,sp,-16
 101a084:	df000315 	stw	fp,12(sp)
 101a088:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101a08c:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 101a090:	d0a0b043 	ldbu	r2,-32063(gp)
 101a094:	10803fcc 	andi	r2,r2,255
 101a098:	10800058 	cmpnei	r2,r2,1
 101a09c:	1000131e 	bne	r2,zero,101a0ec <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a0a0:	0005303a 	rdctl	r2,status
 101a0a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a0a8:	e0fffe17 	ldw	r3,-8(fp)
 101a0ac:	00bfff84 	movi	r2,-2
 101a0b0:	1884703a 	and	r2,r3,r2
 101a0b4:	1001703a 	wrctl	status,r2
  
  return context;
 101a0b8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 101a0bc:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 101a0c0:	d0a0be03 	ldbu	r2,-32008(gp)
 101a0c4:	10803fcc 	andi	r2,r2,255
 101a0c8:	10803fe0 	cmpeqi	r2,r2,255
 101a0cc:	1000031e 	bne	r2,zero,101a0dc <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 101a0d0:	d0a0be03 	ldbu	r2,-32008(gp)
 101a0d4:	10800044 	addi	r2,r2,1
 101a0d8:	d0a0be05 	stb	r2,-32008(gp)
 101a0dc:	e0bfff17 	ldw	r2,-4(fp)
 101a0e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a0e4:	e0bffd17 	ldw	r2,-12(fp)
 101a0e8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 101a0ec:	e037883a 	mov	sp,fp
 101a0f0:	df000017 	ldw	fp,0(sp)
 101a0f4:	dec00104 	addi	sp,sp,4
 101a0f8:	f800283a 	ret

0101a0fc <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 101a0fc:	defffb04 	addi	sp,sp,-20
 101a100:	dfc00415 	stw	ra,16(sp)
 101a104:	df000315 	stw	fp,12(sp)
 101a108:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101a10c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 101a110:	d0a0b043 	ldbu	r2,-32063(gp)
 101a114:	10803fcc 	andi	r2,r2,255
 101a118:	10800058 	cmpnei	r2,r2,1
 101a11c:	1000321e 	bne	r2,zero,101a1e8 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a120:	0005303a 	rdctl	r2,status
 101a124:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a128:	e0fffe17 	ldw	r3,-8(fp)
 101a12c:	00bfff84 	movi	r2,-2
 101a130:	1884703a 	and	r2,r3,r2
 101a134:	1001703a 	wrctl	status,r2
  
  return context;
 101a138:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 101a13c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 101a140:	d0a0be03 	ldbu	r2,-32008(gp)
 101a144:	10803fcc 	andi	r2,r2,255
 101a148:	1005003a 	cmpeq	r2,r2,zero
 101a14c:	1000031e 	bne	r2,zero,101a15c <OSIntExit+0x60>
            OSIntNesting--;
 101a150:	d0a0be03 	ldbu	r2,-32008(gp)
 101a154:	10bfffc4 	addi	r2,r2,-1
 101a158:	d0a0be05 	stb	r2,-32008(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 101a15c:	d0a0be03 	ldbu	r2,-32008(gp)
 101a160:	10803fcc 	andi	r2,r2,255
 101a164:	1004c03a 	cmpne	r2,r2,zero
 101a168:	10001b1e 	bne	r2,zero,101a1d8 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 101a16c:	d0a0b003 	ldbu	r2,-32064(gp)
 101a170:	10803fcc 	andi	r2,r2,255
 101a174:	1004c03a 	cmpne	r2,r2,zero
 101a178:	1000171e 	bne	r2,zero,101a1d8 <OSIntExit+0xdc>
                OS_SchedNew();
 101a17c:	101b2180 	call	101b218 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 101a180:	d0a0b203 	ldbu	r2,-32056(gp)
 101a184:	d0e0b243 	ldbu	r3,-32055(gp)
 101a188:	11003fcc 	andi	r4,r2,255
 101a18c:	18803fcc 	andi	r2,r3,255
 101a190:	20801126 	beq	r4,r2,101a1d8 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 101a194:	d0a0b203 	ldbu	r2,-32056(gp)
 101a198:	10803fcc 	andi	r2,r2,255
 101a19c:	00c04134 	movhi	r3,260
 101a1a0:	18eab404 	addi	r3,r3,-21808
 101a1a4:	1085883a 	add	r2,r2,r2
 101a1a8:	1085883a 	add	r2,r2,r2
 101a1ac:	10c5883a 	add	r2,r2,r3
 101a1b0:	10800017 	ldw	r2,0(r2)
 101a1b4:	d0a0ba15 	stw	r2,-32024(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 101a1b8:	d0e0ba17 	ldw	r3,-32024(gp)
 101a1bc:	18800e17 	ldw	r2,56(r3)
 101a1c0:	10800044 	addi	r2,r2,1
 101a1c4:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 101a1c8:	d0a0b517 	ldw	r2,-32044(gp)
 101a1cc:	10800044 	addi	r2,r2,1
 101a1d0:	d0a0b515 	stw	r2,-32044(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 101a1d4:	1024b5c0 	call	1024b5c <OSCtxSw>
 101a1d8:	e0bfff17 	ldw	r2,-4(fp)
 101a1dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a1e0:	e0bffd17 	ldw	r2,-12(fp)
 101a1e4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 101a1e8:	e037883a 	mov	sp,fp
 101a1ec:	dfc00117 	ldw	ra,4(sp)
 101a1f0:	df000017 	ldw	fp,0(sp)
 101a1f4:	dec00204 	addi	sp,sp,8
 101a1f8:	f800283a 	ret

0101a1fc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 101a1fc:	defffc04 	addi	sp,sp,-16
 101a200:	df000315 	stw	fp,12(sp)
 101a204:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101a208:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 101a20c:	d0a0b043 	ldbu	r2,-32063(gp)
 101a210:	10803fcc 	andi	r2,r2,255
 101a214:	10800058 	cmpnei	r2,r2,1
 101a218:	1000171e 	bne	r2,zero,101a278 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a21c:	0005303a 	rdctl	r2,status
 101a220:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a224:	e0fffe17 	ldw	r3,-8(fp)
 101a228:	00bfff84 	movi	r2,-2
 101a22c:	1884703a 	and	r2,r3,r2
 101a230:	1001703a 	wrctl	status,r2
  
  return context;
 101a234:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 101a238:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 101a23c:	d0a0be03 	ldbu	r2,-32008(gp)
 101a240:	10803fcc 	andi	r2,r2,255
 101a244:	1004c03a 	cmpne	r2,r2,zero
 101a248:	1000071e 	bne	r2,zero,101a268 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 101a24c:	d0a0b003 	ldbu	r2,-32064(gp)
 101a250:	10803fcc 	andi	r2,r2,255
 101a254:	10803fe0 	cmpeqi	r2,r2,255
 101a258:	1000031e 	bne	r2,zero,101a268 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 101a25c:	d0a0b003 	ldbu	r2,-32064(gp)
 101a260:	10800044 	addi	r2,r2,1
 101a264:	d0a0b005 	stb	r2,-32064(gp)
 101a268:	e0bfff17 	ldw	r2,-4(fp)
 101a26c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a270:	e0bffd17 	ldw	r2,-12(fp)
 101a274:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 101a278:	e037883a 	mov	sp,fp
 101a27c:	df000017 	ldw	fp,0(sp)
 101a280:	dec00104 	addi	sp,sp,4
 101a284:	f800283a 	ret

0101a288 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 101a288:	defff804 	addi	sp,sp,-32
 101a28c:	dfc00715 	stw	ra,28(sp)
 101a290:	df000615 	stw	fp,24(sp)
 101a294:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101a298:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 101a29c:	d0a0b043 	ldbu	r2,-32063(gp)
 101a2a0:	10803fcc 	andi	r2,r2,255
 101a2a4:	10800058 	cmpnei	r2,r2,1
 101a2a8:	10002b1e 	bne	r2,zero,101a358 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a2ac:	0005303a 	rdctl	r2,status
 101a2b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a2b4:	e0fffe17 	ldw	r3,-8(fp)
 101a2b8:	00bfff84 	movi	r2,-2
 101a2bc:	1884703a 	and	r2,r3,r2
 101a2c0:	1001703a 	wrctl	status,r2
  
  return context;
 101a2c4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 101a2c8:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 101a2cc:	d0a0b003 	ldbu	r2,-32064(gp)
 101a2d0:	10803fcc 	andi	r2,r2,255
 101a2d4:	1005003a 	cmpeq	r2,r2,zero
 101a2d8:	10001b1e 	bne	r2,zero,101a348 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 101a2dc:	d0a0b003 	ldbu	r2,-32064(gp)
 101a2e0:	10bfffc4 	addi	r2,r2,-1
 101a2e4:	d0a0b005 	stb	r2,-32064(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 101a2e8:	d0a0b003 	ldbu	r2,-32064(gp)
 101a2ec:	10803fcc 	andi	r2,r2,255
 101a2f0:	1004c03a 	cmpne	r2,r2,zero
 101a2f4:	10000f1e 	bne	r2,zero,101a334 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 101a2f8:	d0a0be03 	ldbu	r2,-32008(gp)
 101a2fc:	10803fcc 	andi	r2,r2,255
 101a300:	1004c03a 	cmpne	r2,r2,zero
 101a304:	1000061e 	bne	r2,zero,101a320 <OSSchedUnlock+0x98>
 101a308:	e0bfff17 	ldw	r2,-4(fp)
 101a30c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a310:	e0bffd17 	ldw	r2,-12(fp)
 101a314:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 101a318:	101b1440 	call	101b144 <OS_Sched>
 101a31c:	00000e06 	br	101a358 <OSSchedUnlock+0xd0>
 101a320:	e0bfff17 	ldw	r2,-4(fp)
 101a324:	e0bffc15 	stw	r2,-16(fp)
 101a328:	e0bffc17 	ldw	r2,-16(fp)
 101a32c:	1001703a 	wrctl	status,r2
 101a330:	00000906 	br	101a358 <OSSchedUnlock+0xd0>
 101a334:	e0bfff17 	ldw	r2,-4(fp)
 101a338:	e0bffb15 	stw	r2,-20(fp)
 101a33c:	e0bffb17 	ldw	r2,-20(fp)
 101a340:	1001703a 	wrctl	status,r2
 101a344:	00000406 	br	101a358 <OSSchedUnlock+0xd0>
 101a348:	e0bfff17 	ldw	r2,-4(fp)
 101a34c:	e0bffa15 	stw	r2,-24(fp)
 101a350:	e0bffa17 	ldw	r2,-24(fp)
 101a354:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 101a358:	e037883a 	mov	sp,fp
 101a35c:	dfc00117 	ldw	ra,4(sp)
 101a360:	df000017 	ldw	fp,0(sp)
 101a364:	dec00204 	addi	sp,sp,8
 101a368:	f800283a 	ret

0101a36c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 101a36c:	defffe04 	addi	sp,sp,-8
 101a370:	dfc00115 	stw	ra,4(sp)
 101a374:	df000015 	stw	fp,0(sp)
 101a378:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 101a37c:	d0a0b043 	ldbu	r2,-32063(gp)
 101a380:	10803fcc 	andi	r2,r2,255
 101a384:	1004c03a 	cmpne	r2,r2,zero
 101a388:	10000f1e 	bne	r2,zero,101a3c8 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 101a38c:	101b2180 	call	101b218 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 101a390:	d0a0b203 	ldbu	r2,-32056(gp)
 101a394:	d0a0b245 	stb	r2,-32055(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 101a398:	d0a0b203 	ldbu	r2,-32056(gp)
 101a39c:	10803fcc 	andi	r2,r2,255
 101a3a0:	00c04134 	movhi	r3,260
 101a3a4:	18eab404 	addi	r3,r3,-21808
 101a3a8:	1085883a 	add	r2,r2,r2
 101a3ac:	1085883a 	add	r2,r2,r2
 101a3b0:	10c5883a 	add	r2,r2,r3
 101a3b4:	10800017 	ldw	r2,0(r2)
 101a3b8:	d0a0ba15 	stw	r2,-32024(gp)
        OSTCBCur      = OSTCBHighRdy;
 101a3bc:	d0a0ba17 	ldw	r2,-32024(gp)
 101a3c0:	d0a0bf15 	stw	r2,-32004(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 101a3c4:	1024be80 	call	1024be8 <OSStartHighRdy>
    }
}
 101a3c8:	e037883a 	mov	sp,fp
 101a3cc:	dfc00117 	ldw	ra,4(sp)
 101a3d0:	df000017 	ldw	fp,0(sp)
 101a3d4:	dec00204 	addi	sp,sp,8
 101a3d8:	f800283a 	ret

0101a3dc <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 101a3dc:	defff904 	addi	sp,sp,-28
 101a3e0:	dfc00615 	stw	ra,24(sp)
 101a3e4:	df000515 	stw	fp,20(sp)
 101a3e8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101a3ec:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 101a3f0:	01000084 	movi	r4,2
 101a3f4:	102143c0 	call	102143c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a3f8:	0005303a 	rdctl	r2,status
 101a3fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a400:	e0fffe17 	ldw	r3,-8(fp)
 101a404:	00bfff84 	movi	r2,-2
 101a408:	1884703a 	and	r2,r3,r2
 101a40c:	1001703a 	wrctl	status,r2
  
  return context;
 101a410:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 101a414:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 101a418:	d020b115 	stw	zero,-32060(gp)
 101a41c:	e0bfff17 	ldw	r2,-4(fp)
 101a420:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a424:	e0bffd17 	ldw	r2,-12(fp)
 101a428:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 101a42c:	01001904 	movi	r4,100
 101a430:	102143c0 	call	102143c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a434:	0005303a 	rdctl	r2,status
 101a438:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a43c:	e0fffc17 	ldw	r3,-16(fp)
 101a440:	00bfff84 	movi	r2,-2
 101a444:	1884703a 	and	r2,r3,r2
 101a448:	1001703a 	wrctl	status,r2
  
  return context;
 101a44c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 101a450:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 101a454:	d0a0b117 	ldw	r2,-32060(gp)
 101a458:	d0a0b615 	stw	r2,-32040(gp)
    OSStatRdy    = OS_TRUE;
 101a45c:	00800044 	movi	r2,1
 101a460:	d0a0c205 	stb	r2,-31992(gp)
 101a464:	e0bfff17 	ldw	r2,-4(fp)
 101a468:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a46c:	e0bffb17 	ldw	r2,-20(fp)
 101a470:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 101a474:	e037883a 	mov	sp,fp
 101a478:	dfc00117 	ldw	ra,4(sp)
 101a47c:	df000017 	ldw	fp,0(sp)
 101a480:	dec00204 	addi	sp,sp,8
 101a484:	f800283a 	ret

0101a488 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 101a488:	defff604 	addi	sp,sp,-40
 101a48c:	dfc00915 	stw	ra,36(sp)
 101a490:	df000815 	stw	fp,32(sp)
 101a494:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 101a498:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 101a49c:	1024fb40 	call	1024fb4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a4a0:	0005303a 	rdctl	r2,status
 101a4a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a4a8:	e0fffb17 	ldw	r3,-20(fp)
 101a4ac:	00bfff84 	movi	r2,-2
 101a4b0:	1884703a 	and	r2,r3,r2
 101a4b4:	1001703a 	wrctl	status,r2
  
  return context;
 101a4b8:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 101a4bc:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 101a4c0:	d0a0c017 	ldw	r2,-32000(gp)
 101a4c4:	10800044 	addi	r2,r2,1
 101a4c8:	d0a0c015 	stw	r2,-32000(gp)
 101a4cc:	e0bffc17 	ldw	r2,-16(fp)
 101a4d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a4d4:	e0bffa17 	ldw	r2,-24(fp)
 101a4d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 101a4dc:	d0a0b043 	ldbu	r2,-32063(gp)
 101a4e0:	10803fcc 	andi	r2,r2,255
 101a4e4:	10800058 	cmpnei	r2,r2,1
 101a4e8:	1000721e 	bne	r2,zero,101a6b4 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 101a4ec:	d0a0b403 	ldbu	r2,-32048(gp)
 101a4f0:	10803fcc 	andi	r2,r2,255
 101a4f4:	e0bfff15 	stw	r2,-4(fp)
 101a4f8:	e0ffff17 	ldw	r3,-4(fp)
 101a4fc:	18800060 	cmpeqi	r2,r3,1
 101a500:	10000a1e 	bne	r2,zero,101a52c <OSTimeTick+0xa4>
 101a504:	e0ffff17 	ldw	r3,-4(fp)
 101a508:	188000a0 	cmpeqi	r2,r3,2
 101a50c:	1000091e 	bne	r2,zero,101a534 <OSTimeTick+0xac>
 101a510:	e0ffff17 	ldw	r3,-4(fp)
 101a514:	1805003a 	cmpeq	r2,r3,zero
 101a518:	1000011e 	bne	r2,zero,101a520 <OSTimeTick+0x98>
 101a51c:	00000a06 	br	101a548 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 101a520:	00800044 	movi	r2,1
 101a524:	e0bffd05 	stb	r2,-12(fp)
                 break;
 101a528:	00000a06 	br	101a554 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 101a52c:	e03ffd05 	stb	zero,-12(fp)
                 break;
 101a530:	00000806 	br	101a554 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 101a534:	00800044 	movi	r2,1
 101a538:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 101a53c:	00800044 	movi	r2,1
 101a540:	d0a0b405 	stb	r2,-32048(gp)
                 break;
 101a544:	00000306 	br	101a554 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 101a548:	00800044 	movi	r2,1
 101a54c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 101a550:	d020b405 	stb	zero,-32048(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 101a554:	e0bffd03 	ldbu	r2,-12(fp)
 101a558:	1005003a 	cmpeq	r2,r2,zero
 101a55c:	1000551e 	bne	r2,zero,101a6b4 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 101a560:	d0a0b317 	ldw	r2,-32052(gp)
 101a564:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 101a568:	00004d06 	br	101a6a0 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a56c:	0005303a 	rdctl	r2,status
 101a570:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a574:	e0fff917 	ldw	r3,-28(fp)
 101a578:	00bfff84 	movi	r2,-2
 101a57c:	1884703a 	and	r2,r3,r2
 101a580:	1001703a 	wrctl	status,r2
  
  return context;
 101a584:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 101a588:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 101a58c:	e0bffe17 	ldw	r2,-8(fp)
 101a590:	10800b8b 	ldhu	r2,46(r2)
 101a594:	10bfffcc 	andi	r2,r2,65535
 101a598:	1005003a 	cmpeq	r2,r2,zero
 101a59c:	1000391e 	bne	r2,zero,101a684 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 101a5a0:	e0bffe17 	ldw	r2,-8(fp)
 101a5a4:	10800b8b 	ldhu	r2,46(r2)
 101a5a8:	10bfffc4 	addi	r2,r2,-1
 101a5ac:	1007883a 	mov	r3,r2
 101a5b0:	e0bffe17 	ldw	r2,-8(fp)
 101a5b4:	10c00b8d 	sth	r3,46(r2)
 101a5b8:	e0bffe17 	ldw	r2,-8(fp)
 101a5bc:	10800b8b 	ldhu	r2,46(r2)
 101a5c0:	10bfffcc 	andi	r2,r2,65535
 101a5c4:	1004c03a 	cmpne	r2,r2,zero
 101a5c8:	10002e1e 	bne	r2,zero,101a684 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 101a5cc:	e0bffe17 	ldw	r2,-8(fp)
 101a5d0:	10800c03 	ldbu	r2,48(r2)
 101a5d4:	10803fcc 	andi	r2,r2,255
 101a5d8:	10800dcc 	andi	r2,r2,55
 101a5dc:	1005003a 	cmpeq	r2,r2,zero
 101a5e0:	10000b1e 	bne	r2,zero,101a610 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 101a5e4:	e0bffe17 	ldw	r2,-8(fp)
 101a5e8:	10c00c03 	ldbu	r3,48(r2)
 101a5ec:	00bff204 	movi	r2,-56
 101a5f0:	1884703a 	and	r2,r3,r2
 101a5f4:	1007883a 	mov	r3,r2
 101a5f8:	e0bffe17 	ldw	r2,-8(fp)
 101a5fc:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 101a600:	e0fffe17 	ldw	r3,-8(fp)
 101a604:	00800044 	movi	r2,1
 101a608:	18800c45 	stb	r2,49(r3)
 101a60c:	00000206 	br	101a618 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 101a610:	e0bffe17 	ldw	r2,-8(fp)
 101a614:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 101a618:	e0bffe17 	ldw	r2,-8(fp)
 101a61c:	10800c03 	ldbu	r2,48(r2)
 101a620:	10803fcc 	andi	r2,r2,255
 101a624:	1080020c 	andi	r2,r2,8
 101a628:	1004c03a 	cmpne	r2,r2,zero
 101a62c:	1000151e 	bne	r2,zero,101a684 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 101a630:	e0bffe17 	ldw	r2,-8(fp)
 101a634:	10c00d83 	ldbu	r3,54(r2)
 101a638:	d0a0bc03 	ldbu	r2,-32016(gp)
 101a63c:	1884b03a 	or	r2,r3,r2
 101a640:	d0a0bc05 	stb	r2,-32016(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 101a644:	e0bffe17 	ldw	r2,-8(fp)
 101a648:	10800d03 	ldbu	r2,52(r2)
 101a64c:	11003fcc 	andi	r4,r2,255
 101a650:	e0bffe17 	ldw	r2,-8(fp)
 101a654:	10800d03 	ldbu	r2,52(r2)
 101a658:	10c03fcc 	andi	r3,r2,255
 101a65c:	d0a0bc44 	addi	r2,gp,-32015
 101a660:	1885883a 	add	r2,r3,r2
 101a664:	10c00003 	ldbu	r3,0(r2)
 101a668:	e0bffe17 	ldw	r2,-8(fp)
 101a66c:	10800d43 	ldbu	r2,53(r2)
 101a670:	1884b03a 	or	r2,r3,r2
 101a674:	1007883a 	mov	r3,r2
 101a678:	d0a0bc44 	addi	r2,gp,-32015
 101a67c:	2085883a 	add	r2,r4,r2
 101a680:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 101a684:	e0bffe17 	ldw	r2,-8(fp)
 101a688:	10800517 	ldw	r2,20(r2)
 101a68c:	e0bffe15 	stw	r2,-8(fp)
 101a690:	e0bffc17 	ldw	r2,-16(fp)
 101a694:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a698:	e0bff817 	ldw	r2,-32(fp)
 101a69c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 101a6a0:	e0bffe17 	ldw	r2,-8(fp)
 101a6a4:	10800c83 	ldbu	r2,50(r2)
 101a6a8:	10803fcc 	andi	r2,r2,255
 101a6ac:	10800518 	cmpnei	r2,r2,20
 101a6b0:	103fae1e 	bne	r2,zero,101a56c <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 101a6b4:	e037883a 	mov	sp,fp
 101a6b8:	dfc00117 	ldw	ra,4(sp)
 101a6bc:	df000017 	ldw	fp,0(sp)
 101a6c0:	dec00204 	addi	sp,sp,8
 101a6c4:	f800283a 	ret

0101a6c8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 101a6c8:	deffff04 	addi	sp,sp,-4
 101a6cc:	df000015 	stw	fp,0(sp)
 101a6d0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 101a6d4:	00804784 	movi	r2,286
}
 101a6d8:	e037883a 	mov	sp,fp
 101a6dc:	df000017 	ldw	fp,0(sp)
 101a6e0:	dec00104 	addi	sp,sp,4
 101a6e4:	f800283a 	ret

0101a6e8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 101a6e8:	deffff04 	addi	sp,sp,-4
 101a6ec:	df000015 	stw	fp,0(sp)
 101a6f0:	d839883a 	mov	fp,sp
}
 101a6f4:	e037883a 	mov	sp,fp
 101a6f8:	df000017 	ldw	fp,0(sp)
 101a6fc:	dec00104 	addi	sp,sp,4
 101a700:	f800283a 	ret

0101a704 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 101a704:	defff804 	addi	sp,sp,-32
 101a708:	dfc00715 	stw	ra,28(sp)
 101a70c:	df000615 	stw	fp,24(sp)
 101a710:	df000604 	addi	fp,sp,24
 101a714:	e13ffc15 	stw	r4,-16(fp)
 101a718:	e17ffd15 	stw	r5,-12(fp)
 101a71c:	e1bffe05 	stb	r6,-8(fp)
 101a720:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 101a724:	e0bffc17 	ldw	r2,-16(fp)
 101a728:	10800283 	ldbu	r2,10(r2)
 101a72c:	10c03fcc 	andi	r3,r2,255
 101a730:	008040b4 	movhi	r2,258
 101a734:	109c2d04 	addi	r2,r2,28852
 101a738:	10c5883a 	add	r2,r2,r3
 101a73c:	10800003 	ldbu	r2,0(r2)
 101a740:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 101a744:	e0fffa83 	ldbu	r3,-22(fp)
 101a748:	e0bffc17 	ldw	r2,-16(fp)
 101a74c:	1885883a 	add	r2,r3,r2
 101a750:	10800204 	addi	r2,r2,8
 101a754:	108000c3 	ldbu	r2,3(r2)
 101a758:	10c03fcc 	andi	r3,r2,255
 101a75c:	008040b4 	movhi	r2,258
 101a760:	109c2d04 	addi	r2,r2,28852
 101a764:	10c5883a 	add	r2,r2,r3
 101a768:	10800003 	ldbu	r2,0(r2)
 101a76c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 101a770:	e0bffa83 	ldbu	r2,-22(fp)
 101a774:	100490fa 	slli	r2,r2,3
 101a778:	1007883a 	mov	r3,r2
 101a77c:	e0bffa43 	ldbu	r2,-23(fp)
 101a780:	1885883a 	add	r2,r3,r2
 101a784:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 101a788:	e0bffa03 	ldbu	r2,-24(fp)
 101a78c:	00c04134 	movhi	r3,260
 101a790:	18eab404 	addi	r3,r3,-21808
 101a794:	1085883a 	add	r2,r2,r2
 101a798:	1085883a 	add	r2,r2,r2
 101a79c:	10c5883a 	add	r2,r2,r3
 101a7a0:	10800017 	ldw	r2,0(r2)
 101a7a4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 101a7a8:	e0bffb17 	ldw	r2,-20(fp)
 101a7ac:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 101a7b0:	e0fffb17 	ldw	r3,-20(fp)
 101a7b4:	e0bffd17 	ldw	r2,-12(fp)
 101a7b8:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 101a7bc:	e0bffb17 	ldw	r2,-20(fp)
 101a7c0:	10800c03 	ldbu	r2,48(r2)
 101a7c4:	1007883a 	mov	r3,r2
 101a7c8:	e0bffe03 	ldbu	r2,-8(fp)
 101a7cc:	0084303a 	nor	r2,zero,r2
 101a7d0:	1884703a 	and	r2,r3,r2
 101a7d4:	1007883a 	mov	r3,r2
 101a7d8:	e0bffb17 	ldw	r2,-20(fp)
 101a7dc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 101a7e0:	e0fffb17 	ldw	r3,-20(fp)
 101a7e4:	e0bfff03 	ldbu	r2,-4(fp)
 101a7e8:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 101a7ec:	e0bffb17 	ldw	r2,-20(fp)
 101a7f0:	10800c03 	ldbu	r2,48(r2)
 101a7f4:	10803fcc 	andi	r2,r2,255
 101a7f8:	1080020c 	andi	r2,r2,8
 101a7fc:	1004c03a 	cmpne	r2,r2,zero
 101a800:	1000111e 	bne	r2,zero,101a848 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 101a804:	e0bffb17 	ldw	r2,-20(fp)
 101a808:	10c00d83 	ldbu	r3,54(r2)
 101a80c:	d0a0bc03 	ldbu	r2,-32016(gp)
 101a810:	1884b03a 	or	r2,r3,r2
 101a814:	d0a0bc05 	stb	r2,-32016(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 101a818:	e13ffa83 	ldbu	r4,-22(fp)
 101a81c:	e0fffa83 	ldbu	r3,-22(fp)
 101a820:	d0a0bc44 	addi	r2,gp,-32015
 101a824:	1885883a 	add	r2,r3,r2
 101a828:	10c00003 	ldbu	r3,0(r2)
 101a82c:	e0bffb17 	ldw	r2,-20(fp)
 101a830:	10800d43 	ldbu	r2,53(r2)
 101a834:	1884b03a 	or	r2,r3,r2
 101a838:	1007883a 	mov	r3,r2
 101a83c:	d0a0bc44 	addi	r2,gp,-32015
 101a840:	2085883a 	add	r2,r4,r2
 101a844:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 101a848:	e13ffb17 	ldw	r4,-20(fp)
 101a84c:	e17ffc17 	ldw	r5,-16(fp)
 101a850:	101aafc0 	call	101aafc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 101a854:	e0bffb17 	ldw	r2,-20(fp)
 101a858:	10800817 	ldw	r2,32(r2)
 101a85c:	1005003a 	cmpeq	r2,r2,zero
 101a860:	1000071e 	bne	r2,zero,101a880 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 101a864:	e0bffb17 	ldw	r2,-20(fp)
 101a868:	11400817 	ldw	r5,32(r2)
 101a86c:	e13ffb17 	ldw	r4,-20(fp)
 101a870:	101abb40 	call	101abb4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 101a874:	e0fffb17 	ldw	r3,-20(fp)
 101a878:	e0bffc17 	ldw	r2,-16(fp)
 101a87c:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 101a880:	e0bffa03 	ldbu	r2,-24(fp)
}
 101a884:	e037883a 	mov	sp,fp
 101a888:	dfc00117 	ldw	ra,4(sp)
 101a88c:	df000017 	ldw	fp,0(sp)
 101a890:	dec00204 	addi	sp,sp,8
 101a894:	f800283a 	ret

0101a898 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 101a898:	defffd04 	addi	sp,sp,-12
 101a89c:	df000215 	stw	fp,8(sp)
 101a8a0:	df000204 	addi	fp,sp,8
 101a8a4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 101a8a8:	d0e0bf17 	ldw	r3,-32004(gp)
 101a8ac:	e0bfff17 	ldw	r2,-4(fp)
 101a8b0:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 101a8b4:	d0a0bf17 	ldw	r2,-32004(gp)
 101a8b8:	10800d03 	ldbu	r2,52(r2)
 101a8bc:	11003fcc 	andi	r4,r2,255
 101a8c0:	d0a0bf17 	ldw	r2,-32004(gp)
 101a8c4:	10800d03 	ldbu	r2,52(r2)
 101a8c8:	10c03fcc 	andi	r3,r2,255
 101a8cc:	e0bfff17 	ldw	r2,-4(fp)
 101a8d0:	1885883a 	add	r2,r3,r2
 101a8d4:	10800204 	addi	r2,r2,8
 101a8d8:	10c000c3 	ldbu	r3,3(r2)
 101a8dc:	d0a0bf17 	ldw	r2,-32004(gp)
 101a8e0:	10800d43 	ldbu	r2,53(r2)
 101a8e4:	1884b03a 	or	r2,r3,r2
 101a8e8:	1007883a 	mov	r3,r2
 101a8ec:	e0bfff17 	ldw	r2,-4(fp)
 101a8f0:	2085883a 	add	r2,r4,r2
 101a8f4:	10800204 	addi	r2,r2,8
 101a8f8:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 101a8fc:	e0bfff17 	ldw	r2,-4(fp)
 101a900:	10c00283 	ldbu	r3,10(r2)
 101a904:	d0a0bf17 	ldw	r2,-32004(gp)
 101a908:	10800d83 	ldbu	r2,54(r2)
 101a90c:	1884b03a 	or	r2,r3,r2
 101a910:	1007883a 	mov	r3,r2
 101a914:	e0bfff17 	ldw	r2,-4(fp)
 101a918:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 101a91c:	d0a0bf17 	ldw	r2,-32004(gp)
 101a920:	10800d03 	ldbu	r2,52(r2)
 101a924:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 101a928:	e13ffe03 	ldbu	r4,-8(fp)
 101a92c:	e0fffe03 	ldbu	r3,-8(fp)
 101a930:	d0a0bc44 	addi	r2,gp,-32015
 101a934:	1885883a 	add	r2,r3,r2
 101a938:	10800003 	ldbu	r2,0(r2)
 101a93c:	1007883a 	mov	r3,r2
 101a940:	d0a0bf17 	ldw	r2,-32004(gp)
 101a944:	10800d43 	ldbu	r2,53(r2)
 101a948:	0084303a 	nor	r2,zero,r2
 101a94c:	1884703a 	and	r2,r3,r2
 101a950:	1007883a 	mov	r3,r2
 101a954:	d0a0bc44 	addi	r2,gp,-32015
 101a958:	2085883a 	add	r2,r4,r2
 101a95c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 101a960:	e0fffe03 	ldbu	r3,-8(fp)
 101a964:	d0a0bc44 	addi	r2,gp,-32015
 101a968:	1885883a 	add	r2,r3,r2
 101a96c:	10800003 	ldbu	r2,0(r2)
 101a970:	10803fcc 	andi	r2,r2,255
 101a974:	1004c03a 	cmpne	r2,r2,zero
 101a978:	1000071e 	bne	r2,zero,101a998 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 101a97c:	d0a0bf17 	ldw	r2,-32004(gp)
 101a980:	10800d83 	ldbu	r2,54(r2)
 101a984:	0084303a 	nor	r2,zero,r2
 101a988:	1007883a 	mov	r3,r2
 101a98c:	d0a0bc03 	ldbu	r2,-32016(gp)
 101a990:	1884703a 	and	r2,r3,r2
 101a994:	d0a0bc05 	stb	r2,-32016(gp)
    }
}
 101a998:	e037883a 	mov	sp,fp
 101a99c:	df000017 	ldw	fp,0(sp)
 101a9a0:	dec00104 	addi	sp,sp,4
 101a9a4:	f800283a 	ret

0101a9a8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 101a9a8:	defffb04 	addi	sp,sp,-20
 101a9ac:	df000415 	stw	fp,16(sp)
 101a9b0:	df000404 	addi	fp,sp,16
 101a9b4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 101a9b8:	d0a0bf17 	ldw	r2,-32004(gp)
 101a9bc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 101a9c0:	d0e0bf17 	ldw	r3,-32004(gp)
 101a9c4:	e0bfff17 	ldw	r2,-4(fp)
 101a9c8:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 101a9cc:	e0bfff17 	ldw	r2,-4(fp)
 101a9d0:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 101a9d4:	e0bffe17 	ldw	r2,-8(fp)
 101a9d8:	10800017 	ldw	r2,0(r2)
 101a9dc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 101a9e0:	00002006 	br	101aa64 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 101a9e4:	d0a0bf17 	ldw	r2,-32004(gp)
 101a9e8:	10800d03 	ldbu	r2,52(r2)
 101a9ec:	11003fcc 	andi	r4,r2,255
 101a9f0:	d0a0bf17 	ldw	r2,-32004(gp)
 101a9f4:	10800d03 	ldbu	r2,52(r2)
 101a9f8:	10c03fcc 	andi	r3,r2,255
 101a9fc:	e0bffd17 	ldw	r2,-12(fp)
 101aa00:	1885883a 	add	r2,r3,r2
 101aa04:	10800204 	addi	r2,r2,8
 101aa08:	10c000c3 	ldbu	r3,3(r2)
 101aa0c:	d0a0bf17 	ldw	r2,-32004(gp)
 101aa10:	10800d43 	ldbu	r2,53(r2)
 101aa14:	1884b03a 	or	r2,r3,r2
 101aa18:	1007883a 	mov	r3,r2
 101aa1c:	e0bffd17 	ldw	r2,-12(fp)
 101aa20:	2085883a 	add	r2,r4,r2
 101aa24:	10800204 	addi	r2,r2,8
 101aa28:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 101aa2c:	e0bffd17 	ldw	r2,-12(fp)
 101aa30:	10c00283 	ldbu	r3,10(r2)
 101aa34:	d0a0bf17 	ldw	r2,-32004(gp)
 101aa38:	10800d83 	ldbu	r2,54(r2)
 101aa3c:	1884b03a 	or	r2,r3,r2
 101aa40:	1007883a 	mov	r3,r2
 101aa44:	e0bffd17 	ldw	r2,-12(fp)
 101aa48:	10c00285 	stb	r3,10(r2)
        pevents++;
 101aa4c:	e0bffe17 	ldw	r2,-8(fp)
 101aa50:	10800104 	addi	r2,r2,4
 101aa54:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 101aa58:	e0bffe17 	ldw	r2,-8(fp)
 101aa5c:	10800017 	ldw	r2,0(r2)
 101aa60:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 101aa64:	e0bffd17 	ldw	r2,-12(fp)
 101aa68:	1004c03a 	cmpne	r2,r2,zero
 101aa6c:	103fdd1e 	bne	r2,zero,101a9e4 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 101aa70:	d0a0bf17 	ldw	r2,-32004(gp)
 101aa74:	10800d03 	ldbu	r2,52(r2)
 101aa78:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 101aa7c:	e13ffc03 	ldbu	r4,-16(fp)
 101aa80:	e0fffc03 	ldbu	r3,-16(fp)
 101aa84:	d0a0bc44 	addi	r2,gp,-32015
 101aa88:	1885883a 	add	r2,r3,r2
 101aa8c:	10800003 	ldbu	r2,0(r2)
 101aa90:	1007883a 	mov	r3,r2
 101aa94:	d0a0bf17 	ldw	r2,-32004(gp)
 101aa98:	10800d43 	ldbu	r2,53(r2)
 101aa9c:	0084303a 	nor	r2,zero,r2
 101aaa0:	1884703a 	and	r2,r3,r2
 101aaa4:	1007883a 	mov	r3,r2
 101aaa8:	d0a0bc44 	addi	r2,gp,-32015
 101aaac:	2085883a 	add	r2,r4,r2
 101aab0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 101aab4:	e0fffc03 	ldbu	r3,-16(fp)
 101aab8:	d0a0bc44 	addi	r2,gp,-32015
 101aabc:	1885883a 	add	r2,r3,r2
 101aac0:	10800003 	ldbu	r2,0(r2)
 101aac4:	10803fcc 	andi	r2,r2,255
 101aac8:	1004c03a 	cmpne	r2,r2,zero
 101aacc:	1000071e 	bne	r2,zero,101aaec <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 101aad0:	d0a0bf17 	ldw	r2,-32004(gp)
 101aad4:	10800d83 	ldbu	r2,54(r2)
 101aad8:	0084303a 	nor	r2,zero,r2
 101aadc:	1007883a 	mov	r3,r2
 101aae0:	d0a0bc03 	ldbu	r2,-32016(gp)
 101aae4:	1884703a 	and	r2,r3,r2
 101aae8:	d0a0bc05 	stb	r2,-32016(gp)
    }
}
 101aaec:	e037883a 	mov	sp,fp
 101aaf0:	df000017 	ldw	fp,0(sp)
 101aaf4:	dec00104 	addi	sp,sp,4
 101aaf8:	f800283a 	ret

0101aafc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 101aafc:	defffc04 	addi	sp,sp,-16
 101ab00:	df000315 	stw	fp,12(sp)
 101ab04:	df000304 	addi	fp,sp,12
 101ab08:	e13ffe15 	stw	r4,-8(fp)
 101ab0c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 101ab10:	e0bffe17 	ldw	r2,-8(fp)
 101ab14:	10800d03 	ldbu	r2,52(r2)
 101ab18:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 101ab1c:	e13ffd03 	ldbu	r4,-12(fp)
 101ab20:	e0fffd03 	ldbu	r3,-12(fp)
 101ab24:	e0bfff17 	ldw	r2,-4(fp)
 101ab28:	1885883a 	add	r2,r3,r2
 101ab2c:	10800204 	addi	r2,r2,8
 101ab30:	108000c3 	ldbu	r2,3(r2)
 101ab34:	1007883a 	mov	r3,r2
 101ab38:	e0bffe17 	ldw	r2,-8(fp)
 101ab3c:	10800d43 	ldbu	r2,53(r2)
 101ab40:	0084303a 	nor	r2,zero,r2
 101ab44:	1884703a 	and	r2,r3,r2
 101ab48:	1007883a 	mov	r3,r2
 101ab4c:	e0bfff17 	ldw	r2,-4(fp)
 101ab50:	2085883a 	add	r2,r4,r2
 101ab54:	10800204 	addi	r2,r2,8
 101ab58:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 101ab5c:	e0fffd03 	ldbu	r3,-12(fp)
 101ab60:	e0bfff17 	ldw	r2,-4(fp)
 101ab64:	1885883a 	add	r2,r3,r2
 101ab68:	10800204 	addi	r2,r2,8
 101ab6c:	108000c3 	ldbu	r2,3(r2)
 101ab70:	10803fcc 	andi	r2,r2,255
 101ab74:	1004c03a 	cmpne	r2,r2,zero
 101ab78:	10000a1e 	bne	r2,zero,101aba4 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 101ab7c:	e0bfff17 	ldw	r2,-4(fp)
 101ab80:	10800283 	ldbu	r2,10(r2)
 101ab84:	1007883a 	mov	r3,r2
 101ab88:	e0bffe17 	ldw	r2,-8(fp)
 101ab8c:	10800d83 	ldbu	r2,54(r2)
 101ab90:	0084303a 	nor	r2,zero,r2
 101ab94:	1884703a 	and	r2,r3,r2
 101ab98:	1007883a 	mov	r3,r2
 101ab9c:	e0bfff17 	ldw	r2,-4(fp)
 101aba0:	10c00285 	stb	r3,10(r2)
    }
}
 101aba4:	e037883a 	mov	sp,fp
 101aba8:	df000017 	ldw	fp,0(sp)
 101abac:	dec00104 	addi	sp,sp,4
 101abb0:	f800283a 	ret

0101abb4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 101abb4:	defffa04 	addi	sp,sp,-24
 101abb8:	df000515 	stw	fp,20(sp)
 101abbc:	df000504 	addi	fp,sp,20
 101abc0:	e13ffe15 	stw	r4,-8(fp)
 101abc4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 101abc8:	e0bffe17 	ldw	r2,-8(fp)
 101abcc:	10800d03 	ldbu	r2,52(r2)
 101abd0:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 101abd4:	e0bffe17 	ldw	r2,-8(fp)
 101abd8:	10800d83 	ldbu	r2,54(r2)
 101abdc:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 101abe0:	e0bffe17 	ldw	r2,-8(fp)
 101abe4:	10800d43 	ldbu	r2,53(r2)
 101abe8:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 101abec:	e0bfff17 	ldw	r2,-4(fp)
 101abf0:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 101abf4:	e0bffd17 	ldw	r2,-12(fp)
 101abf8:	10800017 	ldw	r2,0(r2)
 101abfc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 101ac00:	00002606 	br	101ac9c <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 101ac04:	e13ffb83 	ldbu	r4,-18(fp)
 101ac08:	e0fffb83 	ldbu	r3,-18(fp)
 101ac0c:	e0bffc17 	ldw	r2,-16(fp)
 101ac10:	1885883a 	add	r2,r3,r2
 101ac14:	10800204 	addi	r2,r2,8
 101ac18:	108000c3 	ldbu	r2,3(r2)
 101ac1c:	1007883a 	mov	r3,r2
 101ac20:	e0bffb03 	ldbu	r2,-20(fp)
 101ac24:	0084303a 	nor	r2,zero,r2
 101ac28:	1884703a 	and	r2,r3,r2
 101ac2c:	1007883a 	mov	r3,r2
 101ac30:	e0bffc17 	ldw	r2,-16(fp)
 101ac34:	2085883a 	add	r2,r4,r2
 101ac38:	10800204 	addi	r2,r2,8
 101ac3c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 101ac40:	e0fffb83 	ldbu	r3,-18(fp)
 101ac44:	e0bffc17 	ldw	r2,-16(fp)
 101ac48:	1885883a 	add	r2,r3,r2
 101ac4c:	10800204 	addi	r2,r2,8
 101ac50:	108000c3 	ldbu	r2,3(r2)
 101ac54:	10803fcc 	andi	r2,r2,255
 101ac58:	1004c03a 	cmpne	r2,r2,zero
 101ac5c:	1000091e 	bne	r2,zero,101ac84 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 101ac60:	e0bffc17 	ldw	r2,-16(fp)
 101ac64:	10800283 	ldbu	r2,10(r2)
 101ac68:	1007883a 	mov	r3,r2
 101ac6c:	e0bffb43 	ldbu	r2,-19(fp)
 101ac70:	0084303a 	nor	r2,zero,r2
 101ac74:	1884703a 	and	r2,r3,r2
 101ac78:	1007883a 	mov	r3,r2
 101ac7c:	e0bffc17 	ldw	r2,-16(fp)
 101ac80:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 101ac84:	e0bffd17 	ldw	r2,-12(fp)
 101ac88:	10800104 	addi	r2,r2,4
 101ac8c:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 101ac90:	e0bffd17 	ldw	r2,-12(fp)
 101ac94:	10800017 	ldw	r2,0(r2)
 101ac98:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 101ac9c:	e0bffc17 	ldw	r2,-16(fp)
 101aca0:	1004c03a 	cmpne	r2,r2,zero
 101aca4:	103fd71e 	bne	r2,zero,101ac04 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 101aca8:	e037883a 	mov	sp,fp
 101acac:	df000017 	ldw	fp,0(sp)
 101acb0:	dec00104 	addi	sp,sp,4
 101acb4:	f800283a 	ret

0101acb8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 101acb8:	defffc04 	addi	sp,sp,-16
 101acbc:	df000315 	stw	fp,12(sp)
 101acc0:	df000304 	addi	fp,sp,12
 101acc4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 101acc8:	e0bfff17 	ldw	r2,-4(fp)
 101accc:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 101acd0:	e0bfff17 	ldw	r2,-4(fp)
 101acd4:	108002c4 	addi	r2,r2,11
 101acd8:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101acdc:	e03ffd05 	stb	zero,-12(fp)
 101ace0:	00000806 	br	101ad04 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 101ace4:	e0bffe17 	ldw	r2,-8(fp)
 101ace8:	10000005 	stb	zero,0(r2)
 101acec:	e0bffe17 	ldw	r2,-8(fp)
 101acf0:	10800044 	addi	r2,r2,1
 101acf4:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101acf8:	e0bffd03 	ldbu	r2,-12(fp)
 101acfc:	10800044 	addi	r2,r2,1
 101ad00:	e0bffd05 	stb	r2,-12(fp)
 101ad04:	e0bffd03 	ldbu	r2,-12(fp)
 101ad08:	108000f0 	cmpltui	r2,r2,3
 101ad0c:	103ff51e 	bne	r2,zero,101ace4 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 101ad10:	e037883a 	mov	sp,fp
 101ad14:	df000017 	ldw	fp,0(sp)
 101ad18:	dec00104 	addi	sp,sp,4
 101ad1c:	f800283a 	ret

0101ad20 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 101ad20:	defffb04 	addi	sp,sp,-20
 101ad24:	dfc00415 	stw	ra,16(sp)
 101ad28:	df000315 	stw	fp,12(sp)
 101ad2c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 101ad30:	01004134 	movhi	r4,260
 101ad34:	2126a004 	addi	r4,r4,-25984
 101ad38:	0142d004 	movi	r5,2880
 101ad3c:	101b0840 	call	101b084 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 101ad40:	00804134 	movhi	r2,260
 101ad44:	10a6a004 	addi	r2,r2,-25984
 101ad48:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 101ad4c:	00804134 	movhi	r2,260
 101ad50:	10a6ac04 	addi	r2,r2,-25936
 101ad54:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 101ad58:	e03fff0d 	sth	zero,-4(fp)
 101ad5c:	00001306 	br	101adac <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 101ad60:	e0bffe17 	ldw	r2,-8(fp)
 101ad64:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 101ad68:	e0fffe17 	ldw	r3,-8(fp)
 101ad6c:	e0bffd17 	ldw	r2,-12(fp)
 101ad70:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 101ad74:	e0fffe17 	ldw	r3,-8(fp)
 101ad78:	00800fc4 	movi	r2,63
 101ad7c:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 101ad80:	e0bffe17 	ldw	r2,-8(fp)
 101ad84:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 101ad88:	e0bffe17 	ldw	r2,-8(fp)
 101ad8c:	10800c04 	addi	r2,r2,48
 101ad90:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 101ad94:	e0bffd17 	ldw	r2,-12(fp)
 101ad98:	10800c04 	addi	r2,r2,48
 101ad9c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 101ada0:	e0bfff0b 	ldhu	r2,-4(fp)
 101ada4:	10800044 	addi	r2,r2,1
 101ada8:	e0bfff0d 	sth	r2,-4(fp)
 101adac:	e0bfff0b 	ldhu	r2,-4(fp)
 101adb0:	10800ef0 	cmpltui	r2,r2,59
 101adb4:	103fea1e 	bne	r2,zero,101ad60 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 101adb8:	e0bffe17 	ldw	r2,-8(fp)
 101adbc:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 101adc0:	e0bffe17 	ldw	r2,-8(fp)
 101adc4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 101adc8:	e0fffe17 	ldw	r3,-8(fp)
 101adcc:	00800fc4 	movi	r2,63
 101add0:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 101add4:	e0bffe17 	ldw	r2,-8(fp)
 101add8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 101addc:	00804134 	movhi	r2,260
 101ade0:	10a6a004 	addi	r2,r2,-25984
 101ade4:	d0a0bd15 	stw	r2,-32012(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 101ade8:	e037883a 	mov	sp,fp
 101adec:	dfc00117 	ldw	ra,4(sp)
 101adf0:	df000017 	ldw	fp,0(sp)
 101adf4:	dec00204 	addi	sp,sp,8
 101adf8:	f800283a 	ret

0101adfc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 101adfc:	deffff04 	addi	sp,sp,-4
 101ae00:	df000015 	stw	fp,0(sp)
 101ae04:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 101ae08:	d020c015 	stw	zero,-32000(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 101ae0c:	d020be05 	stb	zero,-32008(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 101ae10:	d020b005 	stb	zero,-32064(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 101ae14:	d020b845 	stb	zero,-32031(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 101ae18:	d020b045 	stb	zero,-32063(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 101ae1c:	d020b515 	stw	zero,-32044(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 101ae20:	d020b115 	stw	zero,-32060(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 101ae24:	d020c315 	stw	zero,-31988(gp)
    OSIdleCtrMax  = 0L;
 101ae28:	d020b615 	stw	zero,-32040(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 101ae2c:	d020c205 	stb	zero,-31992(gp)
#endif
}
 101ae30:	e037883a 	mov	sp,fp
 101ae34:	df000017 	ldw	fp,0(sp)
 101ae38:	dec00104 	addi	sp,sp,4
 101ae3c:	f800283a 	ret

0101ae40 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 101ae40:	defffd04 	addi	sp,sp,-12
 101ae44:	df000215 	stw	fp,8(sp)
 101ae48:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 101ae4c:	d020bc05 	stb	zero,-32016(gp)
    prdytbl       = &OSRdyTbl[0];
 101ae50:	d0a0bc44 	addi	r2,gp,-32015
 101ae54:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 101ae58:	e03fff05 	stb	zero,-4(fp)
 101ae5c:	00000806 	br	101ae80 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 101ae60:	e0bffe17 	ldw	r2,-8(fp)
 101ae64:	10000005 	stb	zero,0(r2)
 101ae68:	e0bffe17 	ldw	r2,-8(fp)
 101ae6c:	10800044 	addi	r2,r2,1
 101ae70:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 101ae74:	e0bfff03 	ldbu	r2,-4(fp)
 101ae78:	10800044 	addi	r2,r2,1
 101ae7c:	e0bfff05 	stb	r2,-4(fp)
 101ae80:	e0bfff03 	ldbu	r2,-4(fp)
 101ae84:	108000f0 	cmpltui	r2,r2,3
 101ae88:	103ff51e 	bne	r2,zero,101ae60 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 101ae8c:	d020b245 	stb	zero,-32055(gp)
    OSPrioHighRdy = 0;
 101ae90:	d020b205 	stb	zero,-32056(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 101ae94:	d020ba15 	stw	zero,-32024(gp)
    OSTCBCur      = (OS_TCB *)0;
 101ae98:	d020bf15 	stw	zero,-32004(gp)
}
 101ae9c:	e037883a 	mov	sp,fp
 101aea0:	df000017 	ldw	fp,0(sp)
 101aea4:	dec00104 	addi	sp,sp,4
 101aea8:	f800283a 	ret

0101aeac <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 101aeac:	defff804 	addi	sp,sp,-32
 101aeb0:	dfc00715 	stw	ra,28(sp)
 101aeb4:	df000615 	stw	fp,24(sp)
 101aeb8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 101aebc:	01804134 	movhi	r6,260
 101aec0:	31a69f04 	addi	r6,r6,-25988
 101aec4:	00bfffd4 	movui	r2,65535
 101aec8:	d8800015 	stw	r2,0(sp)
 101aecc:	00804134 	movhi	r2,260
 101aed0:	10a4a004 	addi	r2,r2,-28032
 101aed4:	d8800115 	stw	r2,4(sp)
 101aed8:	00808004 	movi	r2,512
 101aedc:	d8800215 	stw	r2,8(sp)
 101aee0:	d8000315 	stw	zero,12(sp)
 101aee4:	008000c4 	movi	r2,3
 101aee8:	d8800415 	stw	r2,16(sp)
 101aeec:	010040b4 	movhi	r4,258
 101aef0:	212cd804 	addi	r4,r4,-19616
 101aef4:	000b883a 	mov	r5,zero
 101aef8:	01c00504 	movi	r7,20
 101aefc:	10201440 	call	1020144 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 101af00:	014040b4 	movhi	r5,258
 101af04:	295c6d04 	addi	r5,r5,29108
 101af08:	01000504 	movi	r4,20
 101af0c:	e1bfff04 	addi	r6,fp,-4
 101af10:	1020a780 	call	1020a78 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 101af14:	e037883a 	mov	sp,fp
 101af18:	dfc00117 	ldw	ra,4(sp)
 101af1c:	df000017 	ldw	fp,0(sp)
 101af20:	dec00204 	addi	sp,sp,8
 101af24:	f800283a 	ret

0101af28 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 101af28:	defff804 	addi	sp,sp,-32
 101af2c:	dfc00715 	stw	ra,28(sp)
 101af30:	df000615 	stw	fp,24(sp)
 101af34:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 101af38:	01804134 	movhi	r6,260
 101af3c:	31a42704 	addi	r6,r6,-28516
 101af40:	00bfff94 	movui	r2,65534
 101af44:	d8800015 	stw	r2,0(sp)
 101af48:	00804134 	movhi	r2,260
 101af4c:	10a22804 	addi	r2,r2,-30560
 101af50:	d8800115 	stw	r2,4(sp)
 101af54:	00808004 	movi	r2,512
 101af58:	d8800215 	stw	r2,8(sp)
 101af5c:	d8000315 	stw	zero,12(sp)
 101af60:	008000c4 	movi	r2,3
 101af64:	d8800415 	stw	r2,16(sp)
 101af68:	010040b4 	movhi	r4,258
 101af6c:	212cef04 	addi	r4,r4,-19524
 101af70:	000b883a 	mov	r5,zero
 101af74:	01c004c4 	movi	r7,19
 101af78:	10201440 	call	1020144 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 101af7c:	014040b4 	movhi	r5,258
 101af80:	295c7104 	addi	r5,r5,29124
 101af84:	010004c4 	movi	r4,19
 101af88:	e1bfff04 	addi	r6,fp,-4
 101af8c:	1020a780 	call	1020a78 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 101af90:	e037883a 	mov	sp,fp
 101af94:	dfc00117 	ldw	ra,4(sp)
 101af98:	df000017 	ldw	fp,0(sp)
 101af9c:	dec00204 	addi	sp,sp,8
 101afa0:	f800283a 	ret

0101afa4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 101afa4:	defffb04 	addi	sp,sp,-20
 101afa8:	dfc00415 	stw	ra,16(sp)
 101afac:	df000315 	stw	fp,12(sp)
 101afb0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 101afb4:	01004134 	movhi	r4,260
 101afb8:	21297004 	addi	r4,r4,-23104
 101afbc:	01414404 	movi	r5,1296
 101afc0:	101b0840 	call	101b084 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 101afc4:	01004134 	movhi	r4,260
 101afc8:	212ab404 	addi	r4,r4,-21808
 101afcc:	01401504 	movi	r5,84
 101afd0:	101b0840 	call	101b084 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 101afd4:	00804134 	movhi	r2,260
 101afd8:	10a97004 	addi	r2,r2,-23104
 101afdc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 101afe0:	00804134 	movhi	r2,260
 101afe4:	10a98b04 	addi	r2,r2,-22996
 101afe8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 101afec:	e03fff05 	stb	zero,-4(fp)
 101aff0:	00001106 	br	101b038 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 101aff4:	e0fffe17 	ldw	r3,-8(fp)
 101aff8:	e0bffd17 	ldw	r2,-12(fp)
 101affc:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 101b000:	e0fffe17 	ldw	r3,-8(fp)
 101b004:	00800fc4 	movi	r2,63
 101b008:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 101b00c:	e0bffe17 	ldw	r2,-8(fp)
 101b010:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 101b014:	e0bffe17 	ldw	r2,-8(fp)
 101b018:	10801b04 	addi	r2,r2,108
 101b01c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 101b020:	e0bffd17 	ldw	r2,-12(fp)
 101b024:	10801b04 	addi	r2,r2,108
 101b028:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 101b02c:	e0bfff03 	ldbu	r2,-4(fp)
 101b030:	10800044 	addi	r2,r2,1
 101b034:	e0bfff05 	stb	r2,-4(fp)
 101b038:	e0bfff03 	ldbu	r2,-4(fp)
 101b03c:	108002f0 	cmpltui	r2,r2,11
 101b040:	103fec1e 	bne	r2,zero,101aff4 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 101b044:	e0bffe17 	ldw	r2,-8(fp)
 101b048:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 101b04c:	e0fffe17 	ldw	r3,-8(fp)
 101b050:	00800fc4 	movi	r2,63
 101b054:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 101b058:	e0bffe17 	ldw	r2,-8(fp)
 101b05c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 101b060:	d020b315 	stw	zero,-32052(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 101b064:	00804134 	movhi	r2,260
 101b068:	10a97004 	addi	r2,r2,-23104
 101b06c:	d0a0b715 	stw	r2,-32036(gp)
}
 101b070:	e037883a 	mov	sp,fp
 101b074:	dfc00117 	ldw	ra,4(sp)
 101b078:	df000017 	ldw	fp,0(sp)
 101b07c:	dec00204 	addi	sp,sp,8
 101b080:	f800283a 	ret

0101b084 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 101b084:	defffd04 	addi	sp,sp,-12
 101b088:	df000215 	stw	fp,8(sp)
 101b08c:	df000204 	addi	fp,sp,8
 101b090:	e13ffe15 	stw	r4,-8(fp)
 101b094:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 101b098:	00000806 	br	101b0bc <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 101b09c:	e0bffe17 	ldw	r2,-8(fp)
 101b0a0:	10000005 	stb	zero,0(r2)
 101b0a4:	e0bffe17 	ldw	r2,-8(fp)
 101b0a8:	10800044 	addi	r2,r2,1
 101b0ac:	e0bffe15 	stw	r2,-8(fp)
        size--;
 101b0b0:	e0bfff0b 	ldhu	r2,-4(fp)
 101b0b4:	10bfffc4 	addi	r2,r2,-1
 101b0b8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 101b0bc:	e0bfff0b 	ldhu	r2,-4(fp)
 101b0c0:	1004c03a 	cmpne	r2,r2,zero
 101b0c4:	103ff51e 	bne	r2,zero,101b09c <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 101b0c8:	e037883a 	mov	sp,fp
 101b0cc:	df000017 	ldw	fp,0(sp)
 101b0d0:	dec00104 	addi	sp,sp,4
 101b0d4:	f800283a 	ret

0101b0d8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 101b0d8:	defffc04 	addi	sp,sp,-16
 101b0dc:	df000315 	stw	fp,12(sp)
 101b0e0:	df000304 	addi	fp,sp,12
 101b0e4:	e13ffd15 	stw	r4,-12(fp)
 101b0e8:	e17ffe15 	stw	r5,-8(fp)
 101b0ec:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 101b0f0:	00000d06 	br	101b128 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 101b0f4:	e0bffe17 	ldw	r2,-8(fp)
 101b0f8:	10c00003 	ldbu	r3,0(r2)
 101b0fc:	e0bffd17 	ldw	r2,-12(fp)
 101b100:	10c00005 	stb	r3,0(r2)
 101b104:	e0bffd17 	ldw	r2,-12(fp)
 101b108:	10800044 	addi	r2,r2,1
 101b10c:	e0bffd15 	stw	r2,-12(fp)
 101b110:	e0bffe17 	ldw	r2,-8(fp)
 101b114:	10800044 	addi	r2,r2,1
 101b118:	e0bffe15 	stw	r2,-8(fp)
        size--;
 101b11c:	e0bfff0b 	ldhu	r2,-4(fp)
 101b120:	10bfffc4 	addi	r2,r2,-1
 101b124:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 101b128:	e0bfff0b 	ldhu	r2,-4(fp)
 101b12c:	1004c03a 	cmpne	r2,r2,zero
 101b130:	103ff01e 	bne	r2,zero,101b0f4 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 101b134:	e037883a 	mov	sp,fp
 101b138:	df000017 	ldw	fp,0(sp)
 101b13c:	dec00104 	addi	sp,sp,4
 101b140:	f800283a 	ret

0101b144 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 101b144:	defffb04 	addi	sp,sp,-20
 101b148:	dfc00415 	stw	ra,16(sp)
 101b14c:	df000315 	stw	fp,12(sp)
 101b150:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 101b154:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b158:	0005303a 	rdctl	r2,status
 101b15c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b160:	e0fffe17 	ldw	r3,-8(fp)
 101b164:	00bfff84 	movi	r2,-2
 101b168:	1884703a 	and	r2,r3,r2
 101b16c:	1001703a 	wrctl	status,r2
  
  return context;
 101b170:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 101b174:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 101b178:	d0a0be03 	ldbu	r2,-32008(gp)
 101b17c:	10803fcc 	andi	r2,r2,255
 101b180:	1004c03a 	cmpne	r2,r2,zero
 101b184:	10001b1e 	bne	r2,zero,101b1f4 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 101b188:	d0a0b003 	ldbu	r2,-32064(gp)
 101b18c:	10803fcc 	andi	r2,r2,255
 101b190:	1004c03a 	cmpne	r2,r2,zero
 101b194:	1000171e 	bne	r2,zero,101b1f4 <OS_Sched+0xb0>
            OS_SchedNew();
 101b198:	101b2180 	call	101b218 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 101b19c:	d0a0b203 	ldbu	r2,-32056(gp)
 101b1a0:	d0e0b243 	ldbu	r3,-32055(gp)
 101b1a4:	11003fcc 	andi	r4,r2,255
 101b1a8:	18803fcc 	andi	r2,r3,255
 101b1ac:	20801126 	beq	r4,r2,101b1f4 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 101b1b0:	d0a0b203 	ldbu	r2,-32056(gp)
 101b1b4:	10803fcc 	andi	r2,r2,255
 101b1b8:	00c04134 	movhi	r3,260
 101b1bc:	18eab404 	addi	r3,r3,-21808
 101b1c0:	1085883a 	add	r2,r2,r2
 101b1c4:	1085883a 	add	r2,r2,r2
 101b1c8:	10c5883a 	add	r2,r2,r3
 101b1cc:	10800017 	ldw	r2,0(r2)
 101b1d0:	d0a0ba15 	stw	r2,-32024(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 101b1d4:	d0e0ba17 	ldw	r3,-32024(gp)
 101b1d8:	18800e17 	ldw	r2,56(r3)
 101b1dc:	10800044 	addi	r2,r2,1
 101b1e0:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 101b1e4:	d0a0b517 	ldw	r2,-32044(gp)
 101b1e8:	10800044 	addi	r2,r2,1
 101b1ec:	d0a0b515 	stw	r2,-32044(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 101b1f0:	1024b5c0 	call	1024b5c <OSCtxSw>
 101b1f4:	e0bfff17 	ldw	r2,-4(fp)
 101b1f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b1fc:	e0bffd17 	ldw	r2,-12(fp)
 101b200:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 101b204:	e037883a 	mov	sp,fp
 101b208:	dfc00117 	ldw	ra,4(sp)
 101b20c:	df000017 	ldw	fp,0(sp)
 101b210:	dec00204 	addi	sp,sp,8
 101b214:	f800283a 	ret

0101b218 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 101b218:	defffe04 	addi	sp,sp,-8
 101b21c:	df000115 	stw	fp,4(sp)
 101b220:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 101b224:	d0a0bc03 	ldbu	r2,-32016(gp)
 101b228:	10c03fcc 	andi	r3,r2,255
 101b22c:	008040b4 	movhi	r2,258
 101b230:	109c2d04 	addi	r2,r2,28852
 101b234:	10c5883a 	add	r2,r2,r3
 101b238:	10800003 	ldbu	r2,0(r2)
 101b23c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 101b240:	e0bfff03 	ldbu	r2,-4(fp)
 101b244:	100490fa 	slli	r2,r2,3
 101b248:	1009883a 	mov	r4,r2
 101b24c:	e0ffff03 	ldbu	r3,-4(fp)
 101b250:	d0a0bc44 	addi	r2,gp,-32015
 101b254:	1885883a 	add	r2,r3,r2
 101b258:	10800003 	ldbu	r2,0(r2)
 101b25c:	10c03fcc 	andi	r3,r2,255
 101b260:	008040b4 	movhi	r2,258
 101b264:	109c2d04 	addi	r2,r2,28852
 101b268:	10c5883a 	add	r2,r2,r3
 101b26c:	10800003 	ldbu	r2,0(r2)
 101b270:	2085883a 	add	r2,r4,r2
 101b274:	d0a0b205 	stb	r2,-32056(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 101b278:	e037883a 	mov	sp,fp
 101b27c:	df000017 	ldw	fp,0(sp)
 101b280:	dec00104 	addi	sp,sp,4
 101b284:	f800283a 	ret

0101b288 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 101b288:	defffc04 	addi	sp,sp,-16
 101b28c:	df000315 	stw	fp,12(sp)
 101b290:	df000304 	addi	fp,sp,12
 101b294:	e13ffe15 	stw	r4,-8(fp)
 101b298:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 101b29c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 101b2a0:	00000d06 	br	101b2d8 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 101b2a4:	e0bfff17 	ldw	r2,-4(fp)
 101b2a8:	10c00003 	ldbu	r3,0(r2)
 101b2ac:	e0bffe17 	ldw	r2,-8(fp)
 101b2b0:	10c00005 	stb	r3,0(r2)
 101b2b4:	e0bffe17 	ldw	r2,-8(fp)
 101b2b8:	10800044 	addi	r2,r2,1
 101b2bc:	e0bffe15 	stw	r2,-8(fp)
 101b2c0:	e0bfff17 	ldw	r2,-4(fp)
 101b2c4:	10800044 	addi	r2,r2,1
 101b2c8:	e0bfff15 	stw	r2,-4(fp)
        len++;
 101b2cc:	e0bffd03 	ldbu	r2,-12(fp)
 101b2d0:	10800044 	addi	r2,r2,1
 101b2d4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 101b2d8:	e0bfff17 	ldw	r2,-4(fp)
 101b2dc:	10800003 	ldbu	r2,0(r2)
 101b2e0:	10803fcc 	andi	r2,r2,255
 101b2e4:	1004c03a 	cmpne	r2,r2,zero
 101b2e8:	103fee1e 	bne	r2,zero,101b2a4 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 101b2ec:	e0bffe17 	ldw	r2,-8(fp)
 101b2f0:	10000005 	stb	zero,0(r2)
    return (len);
 101b2f4:	e0bffd03 	ldbu	r2,-12(fp)
}
 101b2f8:	e037883a 	mov	sp,fp
 101b2fc:	df000017 	ldw	fp,0(sp)
 101b300:	dec00104 	addi	sp,sp,4
 101b304:	f800283a 	ret

0101b308 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 101b308:	defffd04 	addi	sp,sp,-12
 101b30c:	df000215 	stw	fp,8(sp)
 101b310:	df000204 	addi	fp,sp,8
 101b314:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 101b318:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 101b31c:	00000606 	br	101b338 <OS_StrLen+0x30>
        psrc++;
 101b320:	e0bfff17 	ldw	r2,-4(fp)
 101b324:	10800044 	addi	r2,r2,1
 101b328:	e0bfff15 	stw	r2,-4(fp)
        len++;
 101b32c:	e0bffe03 	ldbu	r2,-8(fp)
 101b330:	10800044 	addi	r2,r2,1
 101b334:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 101b338:	e0bfff17 	ldw	r2,-4(fp)
 101b33c:	10800003 	ldbu	r2,0(r2)
 101b340:	10803fcc 	andi	r2,r2,255
 101b344:	1004c03a 	cmpne	r2,r2,zero
 101b348:	103ff51e 	bne	r2,zero,101b320 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 101b34c:	e0bffe03 	ldbu	r2,-8(fp)
}
 101b350:	e037883a 	mov	sp,fp
 101b354:	df000017 	ldw	fp,0(sp)
 101b358:	dec00104 	addi	sp,sp,4
 101b35c:	f800283a 	ret

0101b360 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 101b360:	defffa04 	addi	sp,sp,-24
 101b364:	dfc00515 	stw	ra,20(sp)
 101b368:	df000415 	stw	fp,16(sp)
 101b36c:	df000404 	addi	fp,sp,16
 101b370:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101b374:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b378:	0005303a 	rdctl	r2,status
 101b37c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b380:	e0fffd17 	ldw	r3,-12(fp)
 101b384:	00bfff84 	movi	r2,-2
 101b388:	1884703a 	and	r2,r3,r2
 101b38c:	1001703a 	wrctl	status,r2
  
  return context;
 101b390:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 101b394:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 101b398:	d0a0b117 	ldw	r2,-32060(gp)
 101b39c:	10800044 	addi	r2,r2,1
 101b3a0:	d0a0b115 	stw	r2,-32060(gp)
 101b3a4:	e0bffe17 	ldw	r2,-8(fp)
 101b3a8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b3ac:	e0bffc17 	ldw	r2,-16(fp)
 101b3b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 101b3b4:	10250080 	call	1025008 <OSTaskIdleHook>
    }
 101b3b8:	003fef06 	br	101b378 <OS_TaskIdle+0x18>

0101b3bc <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 101b3bc:	defffa04 	addi	sp,sp,-24
 101b3c0:	dfc00515 	stw	ra,20(sp)
 101b3c4:	df000415 	stw	fp,16(sp)
 101b3c8:	df000404 	addi	fp,sp,16
 101b3cc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101b3d0:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 101b3d4:	00000206 	br	101b3e0 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 101b3d8:	01003204 	movi	r4,200
 101b3dc:	102143c0 	call	102143c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 101b3e0:	d0a0c203 	ldbu	r2,-31992(gp)
 101b3e4:	10803fcc 	andi	r2,r2,255
 101b3e8:	1005003a 	cmpeq	r2,r2,zero
 101b3ec:	103ffa1e 	bne	r2,zero,101b3d8 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 101b3f0:	d120b617 	ldw	r4,-32040(gp)
 101b3f4:	01401904 	movi	r5,100
 101b3f8:	10180f00 	call	10180f0 <__udivsi3>
 101b3fc:	d0a0b615 	stw	r2,-32040(gp)
    if (OSIdleCtrMax == 0L) {
 101b400:	d0a0b617 	ldw	r2,-32040(gp)
 101b404:	1004c03a 	cmpne	r2,r2,zero
 101b408:	1000031e 	bne	r2,zero,101b418 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 101b40c:	d020b805 	stb	zero,-32032(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 101b410:	01003fc4 	movi	r4,255
 101b414:	10210500 	call	1021050 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b418:	0005303a 	rdctl	r2,status
 101b41c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b420:	e0fffd17 	ldw	r3,-12(fp)
 101b424:	00bfff84 	movi	r2,-2
 101b428:	1884703a 	and	r2,r3,r2
 101b42c:	1001703a 	wrctl	status,r2
  
  return context;
 101b430:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 101b434:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 101b438:	d0a0b117 	ldw	r2,-32060(gp)
 101b43c:	d0a0c315 	stw	r2,-31988(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 101b440:	d020b115 	stw	zero,-32060(gp)
 101b444:	e0bffe17 	ldw	r2,-8(fp)
 101b448:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b44c:	e0bffc17 	ldw	r2,-16(fp)
 101b450:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 101b454:	d120c317 	ldw	r4,-31988(gp)
 101b458:	d160b617 	ldw	r5,-32040(gp)
 101b45c:	10180f00 	call	10180f0 <__udivsi3>
 101b460:	1007883a 	mov	r3,r2
 101b464:	00801904 	movi	r2,100
 101b468:	10c5c83a 	sub	r2,r2,r3
 101b46c:	d0a0b805 	stb	r2,-32032(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 101b470:	1024f980 	call	1024f98 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 101b474:	101b4840 	call	101b484 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 101b478:	01001904 	movi	r4,100
 101b47c:	102143c0 	call	102143c <OSTimeDly>
    }
 101b480:	003fe506 	br	101b418 <OS_TaskStat+0x5c>

0101b484 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 101b484:	defffa04 	addi	sp,sp,-24
 101b488:	dfc00515 	stw	ra,20(sp)
 101b48c:	df000415 	stw	fp,16(sp)
 101b490:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 101b494:	e03ffc05 	stb	zero,-16(fp)
 101b498:	00002406 	br	101b52c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 101b49c:	e13ffc03 	ldbu	r4,-16(fp)
 101b4a0:	e17ffe04 	addi	r5,fp,-8
 101b4a4:	1020e540 	call	1020e54 <OSTaskStkChk>
 101b4a8:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 101b4ac:	e0bffc43 	ldbu	r2,-15(fp)
 101b4b0:	1004c03a 	cmpne	r2,r2,zero
 101b4b4:	10001a1e 	bne	r2,zero,101b520 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 101b4b8:	e0bffc03 	ldbu	r2,-16(fp)
 101b4bc:	00c04134 	movhi	r3,260
 101b4c0:	18eab404 	addi	r3,r3,-21808
 101b4c4:	1085883a 	add	r2,r2,r2
 101b4c8:	1085883a 	add	r2,r2,r2
 101b4cc:	10c5883a 	add	r2,r2,r3
 101b4d0:	10800017 	ldw	r2,0(r2)
 101b4d4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 101b4d8:	e0bffd17 	ldw	r2,-12(fp)
 101b4dc:	1005003a 	cmpeq	r2,r2,zero
 101b4e0:	10000f1e 	bne	r2,zero,101b520 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 101b4e4:	e0bffd17 	ldw	r2,-12(fp)
 101b4e8:	10800060 	cmpeqi	r2,r2,1
 101b4ec:	10000c1e 	bne	r2,zero,101b520 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 101b4f0:	e0bffd17 	ldw	r2,-12(fp)
 101b4f4:	10c00217 	ldw	r3,8(r2)
 101b4f8:	e0bffd17 	ldw	r2,-12(fp)
 101b4fc:	10800317 	ldw	r2,12(r2)
 101b500:	1085883a 	add	r2,r2,r2
 101b504:	1085883a 	add	r2,r2,r2
 101b508:	1887883a 	add	r3,r3,r2
 101b50c:	e0bffd17 	ldw	r2,-12(fp)
 101b510:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 101b514:	e0ffff17 	ldw	r3,-4(fp)
 101b518:	e0bffd17 	ldw	r2,-12(fp)
 101b51c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 101b520:	e0bffc03 	ldbu	r2,-16(fp)
 101b524:	10800044 	addi	r2,r2,1
 101b528:	e0bffc05 	stb	r2,-16(fp)
 101b52c:	e0bffc03 	ldbu	r2,-16(fp)
 101b530:	10800570 	cmpltui	r2,r2,21
 101b534:	103fd91e 	bne	r2,zero,101b49c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 101b538:	e037883a 	mov	sp,fp
 101b53c:	dfc00117 	ldw	ra,4(sp)
 101b540:	df000017 	ldw	fp,0(sp)
 101b544:	dec00204 	addi	sp,sp,8
 101b548:	f800283a 	ret

0101b54c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 101b54c:	defff104 	addi	sp,sp,-60
 101b550:	dfc00e15 	stw	ra,56(sp)
 101b554:	df000d15 	stw	fp,52(sp)
 101b558:	df000d04 	addi	fp,sp,52
 101b55c:	e17ffb15 	stw	r5,-20(fp)
 101b560:	e1bffc15 	stw	r6,-16(fp)
 101b564:	e0800417 	ldw	r2,16(fp)
 101b568:	e13ffa05 	stb	r4,-24(fp)
 101b56c:	e1fffd0d 	sth	r7,-12(fp)
 101b570:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101b574:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b578:	0005303a 	rdctl	r2,status
 101b57c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b580:	e0fff717 	ldw	r3,-36(fp)
 101b584:	00bfff84 	movi	r2,-2
 101b588:	1884703a 	and	r2,r3,r2
 101b58c:	1001703a 	wrctl	status,r2
  
  return context;
 101b590:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 101b594:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 101b598:	d0a0b717 	ldw	r2,-32036(gp)
 101b59c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 101b5a0:	e0bff917 	ldw	r2,-28(fp)
 101b5a4:	1005003a 	cmpeq	r2,r2,zero
 101b5a8:	1000941e 	bne	r2,zero,101b7fc <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 101b5ac:	e0bff917 	ldw	r2,-28(fp)
 101b5b0:	10800517 	ldw	r2,20(r2)
 101b5b4:	d0a0b715 	stw	r2,-32036(gp)
 101b5b8:	e0bff817 	ldw	r2,-32(fp)
 101b5bc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b5c0:	e0bff617 	ldw	r2,-40(fp)
 101b5c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 101b5c8:	e0fff917 	ldw	r3,-28(fp)
 101b5cc:	e0bffb17 	ldw	r2,-20(fp)
 101b5d0:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 101b5d4:	e0fff917 	ldw	r3,-28(fp)
 101b5d8:	e0bffa03 	ldbu	r2,-24(fp)
 101b5dc:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 101b5e0:	e0bff917 	ldw	r2,-28(fp)
 101b5e4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 101b5e8:	e0bff917 	ldw	r2,-28(fp)
 101b5ec:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 101b5f0:	e0bff917 	ldw	r2,-28(fp)
 101b5f4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 101b5f8:	e0fff917 	ldw	r3,-28(fp)
 101b5fc:	e0800317 	ldw	r2,12(fp)
 101b600:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 101b604:	e0fff917 	ldw	r3,-28(fp)
 101b608:	e0800217 	ldw	r2,8(fp)
 101b60c:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 101b610:	e0fff917 	ldw	r3,-28(fp)
 101b614:	e0bffc17 	ldw	r2,-16(fp)
 101b618:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 101b61c:	e0fff917 	ldw	r3,-28(fp)
 101b620:	e0bffe0b 	ldhu	r2,-8(fp)
 101b624:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 101b628:	e0fff917 	ldw	r3,-28(fp)
 101b62c:	e0bffd0b 	ldhu	r2,-12(fp)
 101b630:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 101b634:	e0bff917 	ldw	r2,-28(fp)
 101b638:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 101b63c:	e0bffa03 	ldbu	r2,-24(fp)
 101b640:	1004d0fa 	srli	r2,r2,3
 101b644:	1007883a 	mov	r3,r2
 101b648:	e0bff917 	ldw	r2,-28(fp)
 101b64c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 101b650:	e0bffa03 	ldbu	r2,-24(fp)
 101b654:	108001cc 	andi	r2,r2,7
 101b658:	1007883a 	mov	r3,r2
 101b65c:	e0bff917 	ldw	r2,-28(fp)
 101b660:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 101b664:	e0bff917 	ldw	r2,-28(fp)
 101b668:	10800d03 	ldbu	r2,52(r2)
 101b66c:	10c03fcc 	andi	r3,r2,255
 101b670:	00800044 	movi	r2,1
 101b674:	10c4983a 	sll	r2,r2,r3
 101b678:	1007883a 	mov	r3,r2
 101b67c:	e0bff917 	ldw	r2,-28(fp)
 101b680:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 101b684:	e0bff917 	ldw	r2,-28(fp)
 101b688:	10800cc3 	ldbu	r2,51(r2)
 101b68c:	10c03fcc 	andi	r3,r2,255
 101b690:	00800044 	movi	r2,1
 101b694:	10c4983a 	sll	r2,r2,r3
 101b698:	1007883a 	mov	r3,r2
 101b69c:	e0bff917 	ldw	r2,-28(fp)
 101b6a0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 101b6a4:	e0bff917 	ldw	r2,-28(fp)
 101b6a8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 101b6ac:	e0bff917 	ldw	r2,-28(fp)
 101b6b0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 101b6b4:	e0bff917 	ldw	r2,-28(fp)
 101b6b8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 101b6bc:	e0bff917 	ldw	r2,-28(fp)
 101b6c0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 101b6c4:	e0bff917 	ldw	r2,-28(fp)
 101b6c8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 101b6cc:	e0bff917 	ldw	r2,-28(fp)
 101b6d0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 101b6d4:	e0bff917 	ldw	r2,-28(fp)
 101b6d8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 101b6dc:	e0bff917 	ldw	r2,-28(fp)
 101b6e0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 101b6e4:	e0bff917 	ldw	r2,-28(fp)
 101b6e8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 101b6ec:	e0fff917 	ldw	r3,-28(fp)
 101b6f0:	00800fc4 	movi	r2,63
 101b6f4:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 101b6f8:	e0bff917 	ldw	r2,-28(fp)
 101b6fc:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 101b700:	e13ff917 	ldw	r4,-28(fp)
 101b704:	10250240 	call	1025024 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 101b708:	e13ff917 	ldw	r4,-28(fp)
 101b70c:	1024f3c0 	call	1024f3c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b710:	0005303a 	rdctl	r2,status
 101b714:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b718:	e0fff517 	ldw	r3,-44(fp)
 101b71c:	00bfff84 	movi	r2,-2
 101b720:	1884703a 	and	r2,r3,r2
 101b724:	1001703a 	wrctl	status,r2
  
  return context;
 101b728:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 101b72c:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 101b730:	e0bffa03 	ldbu	r2,-24(fp)
 101b734:	00c04134 	movhi	r3,260
 101b738:	18eab404 	addi	r3,r3,-21808
 101b73c:	1085883a 	add	r2,r2,r2
 101b740:	1085883a 	add	r2,r2,r2
 101b744:	10c7883a 	add	r3,r2,r3
 101b748:	e0bff917 	ldw	r2,-28(fp)
 101b74c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 101b750:	d0e0b317 	ldw	r3,-32052(gp)
 101b754:	e0bff917 	ldw	r2,-28(fp)
 101b758:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 101b75c:	e0bff917 	ldw	r2,-28(fp)
 101b760:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 101b764:	d0a0b317 	ldw	r2,-32052(gp)
 101b768:	1005003a 	cmpeq	r2,r2,zero
 101b76c:	1000031e 	bne	r2,zero,101b77c <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 101b770:	d0e0b317 	ldw	r3,-32052(gp)
 101b774:	e0bff917 	ldw	r2,-28(fp)
 101b778:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 101b77c:	e0bff917 	ldw	r2,-28(fp)
 101b780:	d0a0b315 	stw	r2,-32052(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 101b784:	e0bff917 	ldw	r2,-28(fp)
 101b788:	10c00d83 	ldbu	r3,54(r2)
 101b78c:	d0a0bc03 	ldbu	r2,-32016(gp)
 101b790:	1884b03a 	or	r2,r3,r2
 101b794:	d0a0bc05 	stb	r2,-32016(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 101b798:	e0bff917 	ldw	r2,-28(fp)
 101b79c:	10800d03 	ldbu	r2,52(r2)
 101b7a0:	11003fcc 	andi	r4,r2,255
 101b7a4:	e0bff917 	ldw	r2,-28(fp)
 101b7a8:	10800d03 	ldbu	r2,52(r2)
 101b7ac:	10c03fcc 	andi	r3,r2,255
 101b7b0:	d0a0bc44 	addi	r2,gp,-32015
 101b7b4:	1885883a 	add	r2,r3,r2
 101b7b8:	10c00003 	ldbu	r3,0(r2)
 101b7bc:	e0bff917 	ldw	r2,-28(fp)
 101b7c0:	10800d43 	ldbu	r2,53(r2)
 101b7c4:	1884b03a 	or	r2,r3,r2
 101b7c8:	1007883a 	mov	r3,r2
 101b7cc:	d0a0bc44 	addi	r2,gp,-32015
 101b7d0:	2085883a 	add	r2,r4,r2
 101b7d4:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 101b7d8:	d0a0b843 	ldbu	r2,-32031(gp)
 101b7dc:	10800044 	addi	r2,r2,1
 101b7e0:	d0a0b845 	stb	r2,-32031(gp)
 101b7e4:	e0bff817 	ldw	r2,-32(fp)
 101b7e8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b7ec:	e0bff417 	ldw	r2,-48(fp)
 101b7f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 101b7f4:	e03fff15 	stw	zero,-4(fp)
 101b7f8:	00000606 	br	101b814 <OS_TCBInit+0x2c8>
 101b7fc:	e0bff817 	ldw	r2,-32(fp)
 101b800:	e0bff315 	stw	r2,-52(fp)
 101b804:	e0bff317 	ldw	r2,-52(fp)
 101b808:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 101b80c:	00801084 	movi	r2,66
 101b810:	e0bfff15 	stw	r2,-4(fp)
 101b814:	e0bfff17 	ldw	r2,-4(fp)
}
 101b818:	e037883a 	mov	sp,fp
 101b81c:	dfc00117 	ldw	ra,4(sp)
 101b820:	df000017 	ldw	fp,0(sp)
 101b824:	dec00204 	addi	sp,sp,8
 101b828:	f800283a 	ret

0101b82c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 101b82c:	defffe04 	addi	sp,sp,-8
 101b830:	df000115 	stw	fp,4(sp)
 101b834:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 101b838:	d0a07304 	addi	r2,gp,-32308
 101b83c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 101b840:	d0a07404 	addi	r2,gp,-32304
 101b844:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 101b848:	d0a07584 	addi	r2,gp,-32298
 101b84c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 101b850:	d0a07604 	addi	r2,gp,-32296
 101b854:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 101b858:	d0a07504 	addi	r2,gp,-32300
 101b85c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 101b860:	d0a07684 	addi	r2,gp,-32294
 101b864:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 101b868:	d0a07704 	addi	r2,gp,-32292
 101b86c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 101b870:	d0a07784 	addi	r2,gp,-32290
 101b874:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 101b878:	d0a07804 	addi	r2,gp,-32288
 101b87c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 101b880:	d0a07884 	addi	r2,gp,-32286
 101b884:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 101b888:	d0a07904 	addi	r2,gp,-32284
 101b88c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 101b890:	d0a07984 	addi	r2,gp,-32282
 101b894:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 101b898:	d0a07a04 	addi	r2,gp,-32280
 101b89c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 101b8a0:	d0a07a84 	addi	r2,gp,-32278
 101b8a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 101b8a8:	d0a07b04 	addi	r2,gp,-32276
 101b8ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 101b8b0:	d0a07b84 	addi	r2,gp,-32274
 101b8b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 101b8b8:	d0a07c04 	addi	r2,gp,-32272
 101b8bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 101b8c0:	d0a07c84 	addi	r2,gp,-32270
 101b8c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 101b8c8:	d0a07d04 	addi	r2,gp,-32268
 101b8cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 101b8d0:	d0a07d84 	addi	r2,gp,-32266
 101b8d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 101b8d8:	d0a07e04 	addi	r2,gp,-32264
 101b8dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 101b8e0:	d0a07e84 	addi	r2,gp,-32262
 101b8e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 101b8e8:	d0a07f04 	addi	r2,gp,-32260
 101b8ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 101b8f0:	d0a07f84 	addi	r2,gp,-32258
 101b8f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 101b8f8:	d0a08004 	addi	r2,gp,-32256
 101b8fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 101b900:	d0a08084 	addi	r2,gp,-32254
 101b904:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 101b908:	d0a08104 	addi	r2,gp,-32252
 101b90c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 101b910:	d0a08184 	addi	r2,gp,-32250
 101b914:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 101b918:	d0a08204 	addi	r2,gp,-32248
 101b91c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 101b920:	d0a08284 	addi	r2,gp,-32246
 101b924:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 101b928:	d0a08304 	addi	r2,gp,-32244
 101b92c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 101b930:	d0a08384 	addi	r2,gp,-32242
 101b934:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 101b938:	d0a08404 	addi	r2,gp,-32240
 101b93c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 101b940:	d0a08484 	addi	r2,gp,-32238
 101b944:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 101b948:	d0a08504 	addi	r2,gp,-32236
 101b94c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 101b950:	d0a08584 	addi	r2,gp,-32234
 101b954:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 101b958:	d0a08604 	addi	r2,gp,-32232
 101b95c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 101b960:	d0a08684 	addi	r2,gp,-32230
 101b964:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 101b968:	d0a08704 	addi	r2,gp,-32228
 101b96c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 101b970:	d0a08784 	addi	r2,gp,-32226
 101b974:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 101b978:	d0a08804 	addi	r2,gp,-32224
 101b97c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 101b980:	d0a08884 	addi	r2,gp,-32222
 101b984:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 101b988:	d0a08904 	addi	r2,gp,-32220
 101b98c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 101b990:	d0a08984 	addi	r2,gp,-32218
 101b994:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 101b998:	d0a08a04 	addi	r2,gp,-32216
 101b99c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 101b9a0:	d0a08f04 	addi	r2,gp,-32196
 101b9a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 101b9a8:	e037883a 	mov	sp,fp
 101b9ac:	df000017 	ldw	fp,0(sp)
 101b9b0:	dec00104 	addi	sp,sp,4
 101b9b4:	f800283a 	ret

0101b9b8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 101b9b8:	defff104 	addi	sp,sp,-60
 101b9bc:	df000e15 	stw	fp,56(sp)
 101b9c0:	df000e04 	addi	fp,sp,56
 101b9c4:	e13ffa15 	stw	r4,-24(fp)
 101b9c8:	e1fffd15 	stw	r7,-12(fp)
 101b9cc:	e17ffb0d 	sth	r5,-20(fp)
 101b9d0:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 101b9d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 101b9d8:	e0bffd17 	ldw	r2,-12(fp)
 101b9dc:	1004c03a 	cmpne	r2,r2,zero
 101b9e0:	1000021e 	bne	r2,zero,101b9ec <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 101b9e4:	e03fff15 	stw	zero,-4(fp)
 101b9e8:	0000bb06 	br	101bcd8 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 101b9ec:	e0bffa17 	ldw	r2,-24(fp)
 101b9f0:	1004c03a 	cmpne	r2,r2,zero
 101b9f4:	1000051e 	bne	r2,zero,101ba0c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101b9f8:	e0fffd17 	ldw	r3,-12(fp)
 101b9fc:	00801b84 	movi	r2,110
 101ba00:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101ba04:	e03fff15 	stw	zero,-4(fp)
 101ba08:	0000b306 	br	101bcd8 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 101ba0c:	e0bffa17 	ldw	r2,-24(fp)
 101ba10:	10800003 	ldbu	r2,0(r2)
 101ba14:	10803fcc 	andi	r2,r2,255
 101ba18:	10800160 	cmpeqi	r2,r2,5
 101ba1c:	1000051e 	bne	r2,zero,101ba34 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 101ba20:	e0fffd17 	ldw	r3,-12(fp)
 101ba24:	00800044 	movi	r2,1
 101ba28:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101ba2c:	e03fff15 	stw	zero,-4(fp)
 101ba30:	0000a906 	br	101bcd8 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 101ba34:	e0fffc03 	ldbu	r3,-16(fp)
 101ba38:	00bfe004 	movi	r2,-128
 101ba3c:	1884703a 	and	r2,r3,r2
 101ba40:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 101ba44:	e0bff943 	ldbu	r2,-27(fp)
 101ba48:	1005003a 	cmpeq	r2,r2,zero
 101ba4c:	1000061e 	bne	r2,zero,101ba68 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 101ba50:	e0bffc03 	ldbu	r2,-16(fp)
 101ba54:	10801fcc 	andi	r2,r2,127
 101ba58:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 101ba5c:	00800044 	movi	r2,1
 101ba60:	e0bff905 	stb	r2,-28(fp)
 101ba64:	00000106 	br	101ba6c <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 101ba68:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 101ba6c:	e0bffd17 	ldw	r2,-12(fp)
 101ba70:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ba74:	0005303a 	rdctl	r2,status
 101ba78:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ba7c:	e0fff717 	ldw	r3,-36(fp)
 101ba80:	00bfff84 	movi	r2,-2
 101ba84:	1884703a 	and	r2,r3,r2
 101ba88:	1001703a 	wrctl	status,r2
  
  return context;
 101ba8c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 101ba90:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 101ba94:	e0bffc03 	ldbu	r2,-16(fp)
 101ba98:	e0bffe15 	stw	r2,-8(fp)
 101ba9c:	e0fffe17 	ldw	r3,-8(fp)
 101baa0:	18800060 	cmpeqi	r2,r3,1
 101baa4:	1000651e 	bne	r2,zero,101bc3c <OSFlagAccept+0x284>
 101baa8:	e0fffe17 	ldw	r3,-8(fp)
 101baac:	18800088 	cmpgei	r2,r3,2
 101bab0:	1000041e 	bne	r2,zero,101bac4 <OSFlagAccept+0x10c>
 101bab4:	e0fffe17 	ldw	r3,-8(fp)
 101bab8:	1805003a 	cmpeq	r2,r3,zero
 101babc:	1000421e 	bne	r2,zero,101bbc8 <OSFlagAccept+0x210>
 101bac0:	00007b06 	br	101bcb0 <OSFlagAccept+0x2f8>
 101bac4:	e0fffe17 	ldw	r3,-8(fp)
 101bac8:	188000a0 	cmpeqi	r2,r3,2
 101bacc:	1000041e 	bne	r2,zero,101bae0 <OSFlagAccept+0x128>
 101bad0:	e0fffe17 	ldw	r3,-8(fp)
 101bad4:	188000e0 	cmpeqi	r2,r3,3
 101bad8:	10001e1e 	bne	r2,zero,101bb54 <OSFlagAccept+0x19c>
 101badc:	00007406 	br	101bcb0 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 101bae0:	e0bffa17 	ldw	r2,-24(fp)
 101bae4:	10c0020b 	ldhu	r3,8(r2)
 101bae8:	e0bffb0b 	ldhu	r2,-20(fp)
 101baec:	1884703a 	and	r2,r3,r2
 101baf0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 101baf4:	e0fff98b 	ldhu	r3,-26(fp)
 101baf8:	e0bffb0b 	ldhu	r2,-20(fp)
 101bafc:	18800d1e 	bne	r3,r2,101bb34 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101bb00:	e0bff903 	ldbu	r2,-28(fp)
 101bb04:	10800058 	cmpnei	r2,r2,1
 101bb08:	10000d1e 	bne	r2,zero,101bb40 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 101bb0c:	e0bffa17 	ldw	r2,-24(fp)
 101bb10:	1080020b 	ldhu	r2,8(r2)
 101bb14:	1007883a 	mov	r3,r2
 101bb18:	e0bff98b 	ldhu	r2,-26(fp)
 101bb1c:	0084303a 	nor	r2,zero,r2
 101bb20:	1884703a 	and	r2,r3,r2
 101bb24:	1007883a 	mov	r3,r2
 101bb28:	e0bffa17 	ldw	r2,-24(fp)
 101bb2c:	10c0020d 	sth	r3,8(r2)
 101bb30:	00000306 	br	101bb40 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 101bb34:	e0fffd17 	ldw	r3,-12(fp)
 101bb38:	00801c04 	movi	r2,112
 101bb3c:	18800005 	stb	r2,0(r3)
 101bb40:	e0bff817 	ldw	r2,-32(fp)
 101bb44:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101bb48:	e0bff617 	ldw	r2,-40(fp)
 101bb4c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 101bb50:	00005f06 	br	101bcd0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 101bb54:	e0bffa17 	ldw	r2,-24(fp)
 101bb58:	10c0020b 	ldhu	r3,8(r2)
 101bb5c:	e0bffb0b 	ldhu	r2,-20(fp)
 101bb60:	1884703a 	and	r2,r3,r2
 101bb64:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 101bb68:	e0bff98b 	ldhu	r2,-26(fp)
 101bb6c:	1005003a 	cmpeq	r2,r2,zero
 101bb70:	10000d1e 	bne	r2,zero,101bba8 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101bb74:	e0bff903 	ldbu	r2,-28(fp)
 101bb78:	10800058 	cmpnei	r2,r2,1
 101bb7c:	10000d1e 	bne	r2,zero,101bbb4 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 101bb80:	e0bffa17 	ldw	r2,-24(fp)
 101bb84:	1080020b 	ldhu	r2,8(r2)
 101bb88:	1007883a 	mov	r3,r2
 101bb8c:	e0bff98b 	ldhu	r2,-26(fp)
 101bb90:	0084303a 	nor	r2,zero,r2
 101bb94:	1884703a 	and	r2,r3,r2
 101bb98:	1007883a 	mov	r3,r2
 101bb9c:	e0bffa17 	ldw	r2,-24(fp)
 101bba0:	10c0020d 	sth	r3,8(r2)
 101bba4:	00000306 	br	101bbb4 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 101bba8:	e0fffd17 	ldw	r3,-12(fp)
 101bbac:	00801c04 	movi	r2,112
 101bbb0:	18800005 	stb	r2,0(r3)
 101bbb4:	e0bff817 	ldw	r2,-32(fp)
 101bbb8:	e0bff515 	stw	r2,-44(fp)
 101bbbc:	e0bff517 	ldw	r2,-44(fp)
 101bbc0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 101bbc4:	00004206 	br	101bcd0 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 101bbc8:	e0bffa17 	ldw	r2,-24(fp)
 101bbcc:	1080020b 	ldhu	r2,8(r2)
 101bbd0:	0084303a 	nor	r2,zero,r2
 101bbd4:	1007883a 	mov	r3,r2
 101bbd8:	e0bffb0b 	ldhu	r2,-20(fp)
 101bbdc:	1884703a 	and	r2,r3,r2
 101bbe0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 101bbe4:	e0fff98b 	ldhu	r3,-26(fp)
 101bbe8:	e0bffb0b 	ldhu	r2,-20(fp)
 101bbec:	18800b1e 	bne	r3,r2,101bc1c <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101bbf0:	e0bff903 	ldbu	r2,-28(fp)
 101bbf4:	10800058 	cmpnei	r2,r2,1
 101bbf8:	10000b1e 	bne	r2,zero,101bc28 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 101bbfc:	e0bffa17 	ldw	r2,-24(fp)
 101bc00:	10c0020b 	ldhu	r3,8(r2)
 101bc04:	e0bff98b 	ldhu	r2,-26(fp)
 101bc08:	1884b03a 	or	r2,r3,r2
 101bc0c:	1007883a 	mov	r3,r2
 101bc10:	e0bffa17 	ldw	r2,-24(fp)
 101bc14:	10c0020d 	sth	r3,8(r2)
 101bc18:	00000306 	br	101bc28 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 101bc1c:	e0fffd17 	ldw	r3,-12(fp)
 101bc20:	00801c04 	movi	r2,112
 101bc24:	18800005 	stb	r2,0(r3)
 101bc28:	e0bff817 	ldw	r2,-32(fp)
 101bc2c:	e0bff415 	stw	r2,-48(fp)
 101bc30:	e0bff417 	ldw	r2,-48(fp)
 101bc34:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 101bc38:	00002506 	br	101bcd0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 101bc3c:	e0bffa17 	ldw	r2,-24(fp)
 101bc40:	1080020b 	ldhu	r2,8(r2)
 101bc44:	0084303a 	nor	r2,zero,r2
 101bc48:	1007883a 	mov	r3,r2
 101bc4c:	e0bffb0b 	ldhu	r2,-20(fp)
 101bc50:	1884703a 	and	r2,r3,r2
 101bc54:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 101bc58:	e0bff98b 	ldhu	r2,-26(fp)
 101bc5c:	1005003a 	cmpeq	r2,r2,zero
 101bc60:	10000b1e 	bne	r2,zero,101bc90 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101bc64:	e0bff903 	ldbu	r2,-28(fp)
 101bc68:	10800058 	cmpnei	r2,r2,1
 101bc6c:	10000b1e 	bne	r2,zero,101bc9c <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 101bc70:	e0bffa17 	ldw	r2,-24(fp)
 101bc74:	10c0020b 	ldhu	r3,8(r2)
 101bc78:	e0bff98b 	ldhu	r2,-26(fp)
 101bc7c:	1884b03a 	or	r2,r3,r2
 101bc80:	1007883a 	mov	r3,r2
 101bc84:	e0bffa17 	ldw	r2,-24(fp)
 101bc88:	10c0020d 	sth	r3,8(r2)
 101bc8c:	00000306 	br	101bc9c <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 101bc90:	e0fffd17 	ldw	r3,-12(fp)
 101bc94:	00801c04 	movi	r2,112
 101bc98:	18800005 	stb	r2,0(r3)
 101bc9c:	e0bff817 	ldw	r2,-32(fp)
 101bca0:	e0bff315 	stw	r2,-52(fp)
 101bca4:	e0bff317 	ldw	r2,-52(fp)
 101bca8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 101bcac:	00000806 	br	101bcd0 <OSFlagAccept+0x318>
 101bcb0:	e0bff817 	ldw	r2,-32(fp)
 101bcb4:	e0bff215 	stw	r2,-56(fp)
 101bcb8:	e0bff217 	ldw	r2,-56(fp)
 101bcbc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 101bcc0:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 101bcc4:	e0fffd17 	ldw	r3,-12(fp)
 101bcc8:	00801bc4 	movi	r2,111
 101bccc:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 101bcd0:	e0bff98b 	ldhu	r2,-26(fp)
 101bcd4:	e0bfff15 	stw	r2,-4(fp)
 101bcd8:	e0bfff17 	ldw	r2,-4(fp)
}
 101bcdc:	e037883a 	mov	sp,fp
 101bce0:	df000017 	ldw	fp,0(sp)
 101bce4:	dec00104 	addi	sp,sp,4
 101bce8:	f800283a 	ret

0101bcec <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 101bcec:	defff704 	addi	sp,sp,-36
 101bcf0:	df000815 	stw	fp,32(sp)
 101bcf4:	df000804 	addi	fp,sp,32
 101bcf8:	e17ffe15 	stw	r5,-8(fp)
 101bcfc:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 101bd00:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 101bd04:	e0bffe17 	ldw	r2,-8(fp)
 101bd08:	1004c03a 	cmpne	r2,r2,zero
 101bd0c:	1000021e 	bne	r2,zero,101bd18 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 101bd10:	e03fff15 	stw	zero,-4(fp)
 101bd14:	00003f06 	br	101be14 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 101bd18:	008040f4 	movhi	r2,259
 101bd1c:	10a42904 	addi	r2,r2,-28508
 101bd20:	10800003 	ldbu	r2,0(r2)
 101bd24:	10803fcc 	andi	r2,r2,255
 101bd28:	1005003a 	cmpeq	r2,r2,zero
 101bd2c:	1000051e 	bne	r2,zero,101bd44 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 101bd30:	e0fffe17 	ldw	r3,-8(fp)
 101bd34:	00800404 	movi	r2,16
 101bd38:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 101bd3c:	e03fff15 	stw	zero,-4(fp)
 101bd40:	00003406 	br	101be14 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101bd44:	0005303a 	rdctl	r2,status
 101bd48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101bd4c:	e0fffa17 	ldw	r3,-24(fp)
 101bd50:	00bfff84 	movi	r2,-2
 101bd54:	1884703a 	and	r2,r3,r2
 101bd58:	1001703a 	wrctl	status,r2
  
  return context;
 101bd5c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101bd60:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 101bd64:	008040f4 	movhi	r2,259
 101bd68:	10a42c04 	addi	r2,r2,-28496
 101bd6c:	10800017 	ldw	r2,0(r2)
 101bd70:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 101bd74:	e0bffc17 	ldw	r2,-16(fp)
 101bd78:	1005003a 	cmpeq	r2,r2,zero
 101bd7c:	10001c1e 	bne	r2,zero,101bdf0 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 101bd80:	008040f4 	movhi	r2,259
 101bd84:	10a42c04 	addi	r2,r2,-28496
 101bd88:	10800017 	ldw	r2,0(r2)
 101bd8c:	10800117 	ldw	r2,4(r2)
 101bd90:	1007883a 	mov	r3,r2
 101bd94:	008040f4 	movhi	r2,259
 101bd98:	10a42c04 	addi	r2,r2,-28496
 101bd9c:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 101bda0:	e0fffc17 	ldw	r3,-16(fp)
 101bda4:	00800144 	movi	r2,5
 101bda8:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 101bdac:	e0fffc17 	ldw	r3,-16(fp)
 101bdb0:	e0bffd0b 	ldhu	r2,-12(fp)
 101bdb4:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 101bdb8:	e0bffc17 	ldw	r2,-16(fp)
 101bdbc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 101bdc0:	e0fffc17 	ldw	r3,-16(fp)
 101bdc4:	00800fc4 	movi	r2,63
 101bdc8:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 101bdcc:	e0bffc17 	ldw	r2,-16(fp)
 101bdd0:	100002c5 	stb	zero,11(r2)
 101bdd4:	e0bffb17 	ldw	r2,-20(fp)
 101bdd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101bddc:	e0bff917 	ldw	r2,-28(fp)
 101bde0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 101bde4:	e0bffe17 	ldw	r2,-8(fp)
 101bde8:	10000005 	stb	zero,0(r2)
 101bdec:	00000706 	br	101be0c <OSFlagCreate+0x120>
 101bdf0:	e0bffb17 	ldw	r2,-20(fp)
 101bdf4:	e0bff815 	stw	r2,-32(fp)
 101bdf8:	e0bff817 	ldw	r2,-32(fp)
 101bdfc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 101be00:	e0fffe17 	ldw	r3,-8(fp)
 101be04:	00801c84 	movi	r2,114
 101be08:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 101be0c:	e0bffc17 	ldw	r2,-16(fp)
 101be10:	e0bfff15 	stw	r2,-4(fp)
 101be14:	e0bfff17 	ldw	r2,-4(fp)
}
 101be18:	e037883a 	mov	sp,fp
 101be1c:	df000017 	ldw	fp,0(sp)
 101be20:	dec00104 	addi	sp,sp,4
 101be24:	f800283a 	ret

0101be28 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 101be28:	defff004 	addi	sp,sp,-64
 101be2c:	dfc00f15 	stw	ra,60(sp)
 101be30:	df000e15 	stw	fp,56(sp)
 101be34:	df000e04 	addi	fp,sp,56
 101be38:	e13ffb15 	stw	r4,-20(fp)
 101be3c:	e1bffd15 	stw	r6,-12(fp)
 101be40:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 101be44:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 101be48:	e0bffd17 	ldw	r2,-12(fp)
 101be4c:	1004c03a 	cmpne	r2,r2,zero
 101be50:	1000031e 	bne	r2,zero,101be60 <OSFlagDel+0x38>
        return (pgrp);
 101be54:	e0bffb17 	ldw	r2,-20(fp)
 101be58:	e0bfff15 	stw	r2,-4(fp)
 101be5c:	00009606 	br	101c0b8 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 101be60:	e0bffb17 	ldw	r2,-20(fp)
 101be64:	1004c03a 	cmpne	r2,r2,zero
 101be68:	1000061e 	bne	r2,zero,101be84 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101be6c:	e0fffd17 	ldw	r3,-12(fp)
 101be70:	00801b84 	movi	r2,110
 101be74:	18800005 	stb	r2,0(r3)
        return (pgrp);
 101be78:	e0fffb17 	ldw	r3,-20(fp)
 101be7c:	e0ffff15 	stw	r3,-4(fp)
 101be80:	00008d06 	br	101c0b8 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 101be84:	008040f4 	movhi	r2,259
 101be88:	10a42904 	addi	r2,r2,-28508
 101be8c:	10800003 	ldbu	r2,0(r2)
 101be90:	10803fcc 	andi	r2,r2,255
 101be94:	1005003a 	cmpeq	r2,r2,zero
 101be98:	1000061e 	bne	r2,zero,101beb4 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 101be9c:	e0fffd17 	ldw	r3,-12(fp)
 101bea0:	008003c4 	movi	r2,15
 101bea4:	18800005 	stb	r2,0(r3)
        return (pgrp);
 101bea8:	e0bffb17 	ldw	r2,-20(fp)
 101beac:	e0bfff15 	stw	r2,-4(fp)
 101beb0:	00008106 	br	101c0b8 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 101beb4:	e0bffb17 	ldw	r2,-20(fp)
 101beb8:	10800003 	ldbu	r2,0(r2)
 101bebc:	10803fcc 	andi	r2,r2,255
 101bec0:	10800160 	cmpeqi	r2,r2,5
 101bec4:	1000061e 	bne	r2,zero,101bee0 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 101bec8:	e0fffd17 	ldw	r3,-12(fp)
 101becc:	00800044 	movi	r2,1
 101bed0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 101bed4:	e0fffb17 	ldw	r3,-20(fp)
 101bed8:	e0ffff15 	stw	r3,-4(fp)
 101bedc:	00007606 	br	101c0b8 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101bee0:	0005303a 	rdctl	r2,status
 101bee4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101bee8:	e0fff617 	ldw	r3,-40(fp)
 101beec:	00bfff84 	movi	r2,-2
 101bef0:	1884703a 	and	r2,r3,r2
 101bef4:	1001703a 	wrctl	status,r2
  
  return context;
 101bef8:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 101befc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 101bf00:	e0bffb17 	ldw	r2,-20(fp)
 101bf04:	10800117 	ldw	r2,4(r2)
 101bf08:	1005003a 	cmpeq	r2,r2,zero
 101bf0c:	1000031e 	bne	r2,zero,101bf1c <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 101bf10:	00800044 	movi	r2,1
 101bf14:	e0bffa05 	stb	r2,-24(fp)
 101bf18:	00000106 	br	101bf20 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 101bf1c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 101bf20:	e0bffc03 	ldbu	r2,-16(fp)
 101bf24:	e0bffe15 	stw	r2,-8(fp)
 101bf28:	e0fffe17 	ldw	r3,-8(fp)
 101bf2c:	1805003a 	cmpeq	r2,r3,zero
 101bf30:	1000041e 	bne	r2,zero,101bf44 <OSFlagDel+0x11c>
 101bf34:	e0fffe17 	ldw	r3,-8(fp)
 101bf38:	18800060 	cmpeqi	r2,r3,1
 101bf3c:	1000281e 	bne	r2,zero,101bfe0 <OSFlagDel+0x1b8>
 101bf40:	00005206 	br	101c08c <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 101bf44:	e0bffa03 	ldbu	r2,-24(fp)
 101bf48:	1004c03a 	cmpne	r2,r2,zero
 101bf4c:	10001a1e 	bne	r2,zero,101bfb8 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 101bf50:	e0fffb17 	ldw	r3,-20(fp)
 101bf54:	00800fc4 	movi	r2,63
 101bf58:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 101bf5c:	e0bffb17 	ldw	r2,-20(fp)
 101bf60:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 101bf64:	e0bffb17 	ldw	r2,-20(fp)
 101bf68:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 101bf6c:	008040f4 	movhi	r2,259
 101bf70:	10a42c04 	addi	r2,r2,-28496
 101bf74:	10c00017 	ldw	r3,0(r2)
 101bf78:	e0bffb17 	ldw	r2,-20(fp)
 101bf7c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 101bf80:	e0bffb17 	ldw	r2,-20(fp)
 101bf84:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 101bf88:	00c040f4 	movhi	r3,259
 101bf8c:	18e42c04 	addi	r3,r3,-28496
 101bf90:	e0bffb17 	ldw	r2,-20(fp)
 101bf94:	18800015 	stw	r2,0(r3)
 101bf98:	e0bff717 	ldw	r2,-36(fp)
 101bf9c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101bfa0:	e0bff517 	ldw	r2,-44(fp)
 101bfa4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 101bfa8:	e0bffd17 	ldw	r2,-12(fp)
 101bfac:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 101bfb0:	e03ff815 	stw	zero,-32(fp)
 101bfb4:	00003e06 	br	101c0b0 <OSFlagDel+0x288>
 101bfb8:	e0bff717 	ldw	r2,-36(fp)
 101bfbc:	e0bff415 	stw	r2,-48(fp)
 101bfc0:	e0bff417 	ldw	r2,-48(fp)
 101bfc4:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 101bfc8:	e0fffd17 	ldw	r3,-12(fp)
 101bfcc:	00801244 	movi	r2,73
 101bfd0:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 101bfd4:	e0bffb17 	ldw	r2,-20(fp)
 101bfd8:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 101bfdc:	00003406 	br	101c0b0 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 101bfe0:	e0bffb17 	ldw	r2,-20(fp)
 101bfe4:	10800117 	ldw	r2,4(r2)
 101bfe8:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 101bfec:	00000606 	br	101c008 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 101bff0:	e13ff917 	ldw	r4,-28(fp)
 101bff4:	000b883a 	mov	r5,zero
 101bff8:	101d1380 	call	101d138 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 101bffc:	e0bff917 	ldw	r2,-28(fp)
 101c000:	10800017 	ldw	r2,0(r2)
 101c004:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 101c008:	e0bff917 	ldw	r2,-28(fp)
 101c00c:	1004c03a 	cmpne	r2,r2,zero
 101c010:	103ff71e 	bne	r2,zero,101bff0 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 101c014:	e0fffb17 	ldw	r3,-20(fp)
 101c018:	00800fc4 	movi	r2,63
 101c01c:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 101c020:	e0bffb17 	ldw	r2,-20(fp)
 101c024:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 101c028:	e0bffb17 	ldw	r2,-20(fp)
 101c02c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 101c030:	008040f4 	movhi	r2,259
 101c034:	10a42c04 	addi	r2,r2,-28496
 101c038:	10c00017 	ldw	r3,0(r2)
 101c03c:	e0bffb17 	ldw	r2,-20(fp)
 101c040:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 101c044:	e0bffb17 	ldw	r2,-20(fp)
 101c048:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 101c04c:	00c040f4 	movhi	r3,259
 101c050:	18e42c04 	addi	r3,r3,-28496
 101c054:	e0bffb17 	ldw	r2,-20(fp)
 101c058:	18800015 	stw	r2,0(r3)
 101c05c:	e0bff717 	ldw	r2,-36(fp)
 101c060:	e0bff315 	stw	r2,-52(fp)
 101c064:	e0bff317 	ldw	r2,-52(fp)
 101c068:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 101c06c:	e0bffa03 	ldbu	r2,-24(fp)
 101c070:	10800058 	cmpnei	r2,r2,1
 101c074:	1000011e 	bne	r2,zero,101c07c <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 101c078:	101b1440 	call	101b144 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 101c07c:	e0bffd17 	ldw	r2,-12(fp)
 101c080:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 101c084:	e03ff815 	stw	zero,-32(fp)
             break;
 101c088:	00000906 	br	101c0b0 <OSFlagDel+0x288>
 101c08c:	e0bff717 	ldw	r2,-36(fp)
 101c090:	e0bff215 	stw	r2,-56(fp)
 101c094:	e0bff217 	ldw	r2,-56(fp)
 101c098:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 101c09c:	e0fffd17 	ldw	r3,-12(fp)
 101c0a0:	008001c4 	movi	r2,7
 101c0a4:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 101c0a8:	e0bffb17 	ldw	r2,-20(fp)
 101c0ac:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 101c0b0:	e0bff817 	ldw	r2,-32(fp)
 101c0b4:	e0bfff15 	stw	r2,-4(fp)
 101c0b8:	e0bfff17 	ldw	r2,-4(fp)
}
 101c0bc:	e037883a 	mov	sp,fp
 101c0c0:	dfc00117 	ldw	ra,4(sp)
 101c0c4:	df000017 	ldw	fp,0(sp)
 101c0c8:	dec00204 	addi	sp,sp,8
 101c0cc:	f800283a 	ret

0101c0d0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 101c0d0:	defff504 	addi	sp,sp,-44
 101c0d4:	dfc00a15 	stw	ra,40(sp)
 101c0d8:	df000915 	stw	fp,36(sp)
 101c0dc:	df000904 	addi	fp,sp,36
 101c0e0:	e13ffc15 	stw	r4,-16(fp)
 101c0e4:	e17ffd15 	stw	r5,-12(fp)
 101c0e8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101c0ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101c0f0:	e0bffe17 	ldw	r2,-8(fp)
 101c0f4:	1004c03a 	cmpne	r2,r2,zero
 101c0f8:	1000021e 	bne	r2,zero,101c104 <OSFlagNameGet+0x34>
        return (0);
 101c0fc:	e03fff15 	stw	zero,-4(fp)
 101c100:	00003e06 	br	101c1fc <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 101c104:	e0bffc17 	ldw	r2,-16(fp)
 101c108:	1004c03a 	cmpne	r2,r2,zero
 101c10c:	1000051e 	bne	r2,zero,101c124 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101c110:	e0fffe17 	ldw	r3,-8(fp)
 101c114:	00801b84 	movi	r2,110
 101c118:	18800005 	stb	r2,0(r3)
        return (0);
 101c11c:	e03fff15 	stw	zero,-4(fp)
 101c120:	00003606 	br	101c1fc <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 101c124:	e0bffd17 	ldw	r2,-12(fp)
 101c128:	1004c03a 	cmpne	r2,r2,zero
 101c12c:	1000051e 	bne	r2,zero,101c144 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 101c130:	e0fffe17 	ldw	r3,-8(fp)
 101c134:	00800304 	movi	r2,12
 101c138:	18800005 	stb	r2,0(r3)
        return (0);
 101c13c:	e03fff15 	stw	zero,-4(fp)
 101c140:	00002e06 	br	101c1fc <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 101c144:	008040f4 	movhi	r2,259
 101c148:	10a42904 	addi	r2,r2,-28508
 101c14c:	10800003 	ldbu	r2,0(r2)
 101c150:	10803fcc 	andi	r2,r2,255
 101c154:	1005003a 	cmpeq	r2,r2,zero
 101c158:	1000051e 	bne	r2,zero,101c170 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 101c15c:	e0fffe17 	ldw	r3,-8(fp)
 101c160:	00800444 	movi	r2,17
 101c164:	18800005 	stb	r2,0(r3)
        return (0);
 101c168:	e03fff15 	stw	zero,-4(fp)
 101c16c:	00002306 	br	101c1fc <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c170:	0005303a 	rdctl	r2,status
 101c174:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c178:	e0fff917 	ldw	r3,-28(fp)
 101c17c:	00bfff84 	movi	r2,-2
 101c180:	1884703a 	and	r2,r3,r2
 101c184:	1001703a 	wrctl	status,r2
  
  return context;
 101c188:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101c18c:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 101c190:	e0bffc17 	ldw	r2,-16(fp)
 101c194:	10800003 	ldbu	r2,0(r2)
 101c198:	10803fcc 	andi	r2,r2,255
 101c19c:	10800160 	cmpeqi	r2,r2,5
 101c1a0:	1000091e 	bne	r2,zero,101c1c8 <OSFlagNameGet+0xf8>
 101c1a4:	e0bffa17 	ldw	r2,-24(fp)
 101c1a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c1ac:	e0bff817 	ldw	r2,-32(fp)
 101c1b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 101c1b4:	e0fffe17 	ldw	r3,-8(fp)
 101c1b8:	00800044 	movi	r2,1
 101c1bc:	18800005 	stb	r2,0(r3)
        return (0);
 101c1c0:	e03fff15 	stw	zero,-4(fp)
 101c1c4:	00000d06 	br	101c1fc <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 101c1c8:	e0bffc17 	ldw	r2,-16(fp)
 101c1cc:	11400284 	addi	r5,r2,10
 101c1d0:	e13ffd17 	ldw	r4,-12(fp)
 101c1d4:	101b2880 	call	101b288 <OS_StrCopy>
 101c1d8:	e0bffb05 	stb	r2,-20(fp)
 101c1dc:	e0bffa17 	ldw	r2,-24(fp)
 101c1e0:	e0bff715 	stw	r2,-36(fp)
 101c1e4:	e0bff717 	ldw	r2,-36(fp)
 101c1e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101c1ec:	e0bffe17 	ldw	r2,-8(fp)
 101c1f0:	10000005 	stb	zero,0(r2)
    return (len);
 101c1f4:	e0bffb03 	ldbu	r2,-20(fp)
 101c1f8:	e0bfff15 	stw	r2,-4(fp)
 101c1fc:	e0bfff17 	ldw	r2,-4(fp)
}
 101c200:	e037883a 	mov	sp,fp
 101c204:	dfc00117 	ldw	ra,4(sp)
 101c208:	df000017 	ldw	fp,0(sp)
 101c20c:	dec00204 	addi	sp,sp,8
 101c210:	f800283a 	ret

0101c214 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 101c214:	defff504 	addi	sp,sp,-44
 101c218:	dfc00a15 	stw	ra,40(sp)
 101c21c:	df000915 	stw	fp,36(sp)
 101c220:	df000904 	addi	fp,sp,36
 101c224:	e13ffd15 	stw	r4,-12(fp)
 101c228:	e17ffe15 	stw	r5,-8(fp)
 101c22c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101c230:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101c234:	e0bfff17 	ldw	r2,-4(fp)
 101c238:	1005003a 	cmpeq	r2,r2,zero
 101c23c:	1000451e 	bne	r2,zero,101c354 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 101c240:	e0bffd17 	ldw	r2,-12(fp)
 101c244:	1004c03a 	cmpne	r2,r2,zero
 101c248:	1000041e 	bne	r2,zero,101c25c <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101c24c:	e0ffff17 	ldw	r3,-4(fp)
 101c250:	00801b84 	movi	r2,110
 101c254:	18800005 	stb	r2,0(r3)
        return;
 101c258:	00003e06 	br	101c354 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 101c25c:	e0bffe17 	ldw	r2,-8(fp)
 101c260:	1004c03a 	cmpne	r2,r2,zero
 101c264:	1000041e 	bne	r2,zero,101c278 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 101c268:	e0ffff17 	ldw	r3,-4(fp)
 101c26c:	00800304 	movi	r2,12
 101c270:	18800005 	stb	r2,0(r3)
        return;
 101c274:	00003706 	br	101c354 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 101c278:	008040f4 	movhi	r2,259
 101c27c:	10a42904 	addi	r2,r2,-28508
 101c280:	10800003 	ldbu	r2,0(r2)
 101c284:	10803fcc 	andi	r2,r2,255
 101c288:	1005003a 	cmpeq	r2,r2,zero
 101c28c:	1000041e 	bne	r2,zero,101c2a0 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 101c290:	e0ffff17 	ldw	r3,-4(fp)
 101c294:	00800484 	movi	r2,18
 101c298:	18800005 	stb	r2,0(r3)
        return;
 101c29c:	00002d06 	br	101c354 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c2a0:	0005303a 	rdctl	r2,status
 101c2a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c2a8:	e0fffa17 	ldw	r3,-24(fp)
 101c2ac:	00bfff84 	movi	r2,-2
 101c2b0:	1884703a 	and	r2,r3,r2
 101c2b4:	1001703a 	wrctl	status,r2
  
  return context;
 101c2b8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101c2bc:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 101c2c0:	e0bffd17 	ldw	r2,-12(fp)
 101c2c4:	10800003 	ldbu	r2,0(r2)
 101c2c8:	10803fcc 	andi	r2,r2,255
 101c2cc:	10800160 	cmpeqi	r2,r2,5
 101c2d0:	1000081e 	bne	r2,zero,101c2f4 <OSFlagNameSet+0xe0>
 101c2d4:	e0bffb17 	ldw	r2,-20(fp)
 101c2d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c2dc:	e0bff917 	ldw	r2,-28(fp)
 101c2e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 101c2e4:	e0ffff17 	ldw	r3,-4(fp)
 101c2e8:	00800044 	movi	r2,1
 101c2ec:	18800005 	stb	r2,0(r3)
        return;
 101c2f0:	00001806 	br	101c354 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 101c2f4:	e13ffe17 	ldw	r4,-8(fp)
 101c2f8:	101b3080 	call	101b308 <OS_StrLen>
 101c2fc:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 101c300:	e0bffc03 	ldbu	r2,-16(fp)
 101c304:	10800830 	cmpltui	r2,r2,32
 101c308:	1000081e 	bne	r2,zero,101c32c <OSFlagNameSet+0x118>
 101c30c:	e0bffb17 	ldw	r2,-20(fp)
 101c310:	e0bff815 	stw	r2,-32(fp)
 101c314:	e0bff817 	ldw	r2,-32(fp)
 101c318:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 101c31c:	e0ffff17 	ldw	r3,-4(fp)
 101c320:	00801cc4 	movi	r2,115
 101c324:	18800005 	stb	r2,0(r3)
        return;
 101c328:	00000a06 	br	101c354 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 101c32c:	e0bffd17 	ldw	r2,-12(fp)
 101c330:	11000284 	addi	r4,r2,10
 101c334:	e17ffe17 	ldw	r5,-8(fp)
 101c338:	101b2880 	call	101b288 <OS_StrCopy>
 101c33c:	e0bffb17 	ldw	r2,-20(fp)
 101c340:	e0bff715 	stw	r2,-36(fp)
 101c344:	e0bff717 	ldw	r2,-36(fp)
 101c348:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101c34c:	e0bfff17 	ldw	r2,-4(fp)
 101c350:	10000005 	stb	zero,0(r2)
    return;
}
 101c354:	e037883a 	mov	sp,fp
 101c358:	dfc00117 	ldw	ra,4(sp)
 101c35c:	df000017 	ldw	fp,0(sp)
 101c360:	dec00204 	addi	sp,sp,8
 101c364:	f800283a 	ret

0101c368 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 101c368:	deffe004 	addi	sp,sp,-128
 101c36c:	dfc01f15 	stw	ra,124(sp)
 101c370:	df001e15 	stw	fp,120(sp)
 101c374:	df001e04 	addi	fp,sp,120
 101c378:	e13ff915 	stw	r4,-28(fp)
 101c37c:	e17ffa0d 	sth	r5,-24(fp)
 101c380:	e1bffb05 	stb	r6,-20(fp)
 101c384:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 101c388:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 101c38c:	e0800217 	ldw	r2,8(fp)
 101c390:	1004c03a 	cmpne	r2,r2,zero
 101c394:	1000021e 	bne	r2,zero,101c3a0 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 101c398:	e03fff15 	stw	zero,-4(fp)
 101c39c:	00017d06 	br	101c994 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 101c3a0:	e0bff917 	ldw	r2,-28(fp)
 101c3a4:	1004c03a 	cmpne	r2,r2,zero
 101c3a8:	1000051e 	bne	r2,zero,101c3c0 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101c3ac:	e0c00217 	ldw	r3,8(fp)
 101c3b0:	00801b84 	movi	r2,110
 101c3b4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101c3b8:	e03fff15 	stw	zero,-4(fp)
 101c3bc:	00017506 	br	101c994 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 101c3c0:	008040f4 	movhi	r2,259
 101c3c4:	10a42904 	addi	r2,r2,-28508
 101c3c8:	10800003 	ldbu	r2,0(r2)
 101c3cc:	10803fcc 	andi	r2,r2,255
 101c3d0:	1005003a 	cmpeq	r2,r2,zero
 101c3d4:	1000051e 	bne	r2,zero,101c3ec <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 101c3d8:	e0c00217 	ldw	r3,8(fp)
 101c3dc:	00800084 	movi	r2,2
 101c3e0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101c3e4:	e03fff15 	stw	zero,-4(fp)
 101c3e8:	00016a06 	br	101c994 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 101c3ec:	008040f4 	movhi	r2,259
 101c3f0:	10a41b04 	addi	r2,r2,-28564
 101c3f4:	10800003 	ldbu	r2,0(r2)
 101c3f8:	10803fcc 	andi	r2,r2,255
 101c3fc:	1005003a 	cmpeq	r2,r2,zero
 101c400:	1000051e 	bne	r2,zero,101c418 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 101c404:	e0c00217 	ldw	r3,8(fp)
 101c408:	00800344 	movi	r2,13
 101c40c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101c410:	e03fff15 	stw	zero,-4(fp)
 101c414:	00015f06 	br	101c994 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 101c418:	e0bff917 	ldw	r2,-28(fp)
 101c41c:	10800003 	ldbu	r2,0(r2)
 101c420:	10803fcc 	andi	r2,r2,255
 101c424:	10800160 	cmpeqi	r2,r2,5
 101c428:	1000051e 	bne	r2,zero,101c440 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 101c42c:	e0c00217 	ldw	r3,8(fp)
 101c430:	00800044 	movi	r2,1
 101c434:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101c438:	e03fff15 	stw	zero,-4(fp)
 101c43c:	00015506 	br	101c994 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 101c440:	e0fffb03 	ldbu	r3,-20(fp)
 101c444:	00bfe004 	movi	r2,-128
 101c448:	1884703a 	and	r2,r3,r2
 101c44c:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 101c450:	e0bff283 	ldbu	r2,-54(fp)
 101c454:	1005003a 	cmpeq	r2,r2,zero
 101c458:	1000071e 	bne	r2,zero,101c478 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 101c45c:	00c01fc4 	movi	r3,127
 101c460:	e0bffb03 	ldbu	r2,-20(fp)
 101c464:	10c4703a 	and	r2,r2,r3
 101c468:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 101c46c:	00800044 	movi	r2,1
 101c470:	e0bff205 	stb	r2,-56(fp)
 101c474:	00000106 	br	101c47c <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 101c478:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c47c:	0005303a 	rdctl	r2,status
 101c480:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c484:	e0fff017 	ldw	r3,-64(fp)
 101c488:	00bfff84 	movi	r2,-2
 101c48c:	1884703a 	and	r2,r3,r2
 101c490:	1001703a 	wrctl	status,r2
  
  return context;
 101c494:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 101c498:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 101c49c:	e0bffb03 	ldbu	r2,-20(fp)
 101c4a0:	e0bffe15 	stw	r2,-8(fp)
 101c4a4:	e0fffe17 	ldw	r3,-8(fp)
 101c4a8:	18800060 	cmpeqi	r2,r3,1
 101c4ac:	1000981e 	bne	r2,zero,101c710 <OSFlagPend+0x3a8>
 101c4b0:	e0fffe17 	ldw	r3,-8(fp)
 101c4b4:	18800088 	cmpgei	r2,r3,2
 101c4b8:	1000041e 	bne	r2,zero,101c4cc <OSFlagPend+0x164>
 101c4bc:	e0fffe17 	ldw	r3,-8(fp)
 101c4c0:	1805003a 	cmpeq	r2,r3,zero
 101c4c4:	1000641e 	bne	r2,zero,101c658 <OSFlagPend+0x2f0>
 101c4c8:	0000bf06 	br	101c7c8 <OSFlagPend+0x460>
 101c4cc:	e0fffe17 	ldw	r3,-8(fp)
 101c4d0:	188000a0 	cmpeqi	r2,r3,2
 101c4d4:	1000041e 	bne	r2,zero,101c4e8 <OSFlagPend+0x180>
 101c4d8:	e0fffe17 	ldw	r3,-8(fp)
 101c4dc:	188000e0 	cmpeqi	r2,r3,3
 101c4e0:	10002f1e 	bne	r2,zero,101c5a0 <OSFlagPend+0x238>
 101c4e4:	0000b806 	br	101c7c8 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 101c4e8:	e0bff917 	ldw	r2,-28(fp)
 101c4ec:	10c0020b 	ldhu	r3,8(r2)
 101c4f0:	e0bffa0b 	ldhu	r2,-24(fp)
 101c4f4:	1884703a 	and	r2,r3,r2
 101c4f8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 101c4fc:	e0fff30b 	ldhu	r3,-52(fp)
 101c500:	e0bffa0b 	ldhu	r2,-24(fp)
 101c504:	18801a1e 	bne	r3,r2,101c570 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101c508:	e0bff203 	ldbu	r2,-56(fp)
 101c50c:	10800058 	cmpnei	r2,r2,1
 101c510:	1000091e 	bne	r2,zero,101c538 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 101c514:	e0bff917 	ldw	r2,-28(fp)
 101c518:	1080020b 	ldhu	r2,8(r2)
 101c51c:	1007883a 	mov	r3,r2
 101c520:	e0bff30b 	ldhu	r2,-52(fp)
 101c524:	0084303a 	nor	r2,zero,r2
 101c528:	1884703a 	and	r2,r3,r2
 101c52c:	1007883a 	mov	r3,r2
 101c530:	e0bff917 	ldw	r2,-28(fp)
 101c534:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 101c538:	008040f4 	movhi	r2,259
 101c53c:	10a42a04 	addi	r2,r2,-28504
 101c540:	10c00017 	ldw	r3,0(r2)
 101c544:	e0bff30b 	ldhu	r2,-52(fp)
 101c548:	18800b0d 	sth	r2,44(r3)
 101c54c:	e0bff117 	ldw	r2,-60(fp)
 101c550:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c554:	e0bfef17 	ldw	r2,-68(fp)
 101c558:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 101c55c:	e0800217 	ldw	r2,8(fp)
 101c560:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 101c564:	e0bff30b 	ldhu	r2,-52(fp)
 101c568:	e0bfff15 	stw	r2,-4(fp)
 101c56c:	00010906 	br	101c994 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 101c570:	e1bffa0b 	ldhu	r6,-24(fp)
 101c574:	e1fffb03 	ldbu	r7,-20(fp)
 101c578:	e0bffc0b 	ldhu	r2,-16(fp)
 101c57c:	e17ff404 	addi	r5,fp,-48
 101c580:	d8800015 	stw	r2,0(sp)
 101c584:	e13ff917 	ldw	r4,-28(fp)
 101c588:	101ce900 	call	101ce90 <OS_FlagBlock>
 101c58c:	e0bff117 	ldw	r2,-60(fp)
 101c590:	e0bfee15 	stw	r2,-72(fp)
 101c594:	e0bfee17 	ldw	r2,-72(fp)
 101c598:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 101c59c:	00009506 	br	101c7f4 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 101c5a0:	e0bff917 	ldw	r2,-28(fp)
 101c5a4:	10c0020b 	ldhu	r3,8(r2)
 101c5a8:	e0bffa0b 	ldhu	r2,-24(fp)
 101c5ac:	1884703a 	and	r2,r3,r2
 101c5b0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 101c5b4:	e0bff30b 	ldhu	r2,-52(fp)
 101c5b8:	1005003a 	cmpeq	r2,r2,zero
 101c5bc:	10001a1e 	bne	r2,zero,101c628 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101c5c0:	e0bff203 	ldbu	r2,-56(fp)
 101c5c4:	10800058 	cmpnei	r2,r2,1
 101c5c8:	1000091e 	bne	r2,zero,101c5f0 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 101c5cc:	e0bff917 	ldw	r2,-28(fp)
 101c5d0:	1080020b 	ldhu	r2,8(r2)
 101c5d4:	1007883a 	mov	r3,r2
 101c5d8:	e0bff30b 	ldhu	r2,-52(fp)
 101c5dc:	0084303a 	nor	r2,zero,r2
 101c5e0:	1884703a 	and	r2,r3,r2
 101c5e4:	1007883a 	mov	r3,r2
 101c5e8:	e0bff917 	ldw	r2,-28(fp)
 101c5ec:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 101c5f0:	008040f4 	movhi	r2,259
 101c5f4:	10a42a04 	addi	r2,r2,-28504
 101c5f8:	10c00017 	ldw	r3,0(r2)
 101c5fc:	e0bff30b 	ldhu	r2,-52(fp)
 101c600:	18800b0d 	sth	r2,44(r3)
 101c604:	e0bff117 	ldw	r2,-60(fp)
 101c608:	e0bfed15 	stw	r2,-76(fp)
 101c60c:	e0bfed17 	ldw	r2,-76(fp)
 101c610:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 101c614:	e0800217 	ldw	r2,8(fp)
 101c618:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 101c61c:	e0fff30b 	ldhu	r3,-52(fp)
 101c620:	e0ffff15 	stw	r3,-4(fp)
 101c624:	0000db06 	br	101c994 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 101c628:	e1bffa0b 	ldhu	r6,-24(fp)
 101c62c:	e1fffb03 	ldbu	r7,-20(fp)
 101c630:	e0bffc0b 	ldhu	r2,-16(fp)
 101c634:	e17ff404 	addi	r5,fp,-48
 101c638:	d8800015 	stw	r2,0(sp)
 101c63c:	e13ff917 	ldw	r4,-28(fp)
 101c640:	101ce900 	call	101ce90 <OS_FlagBlock>
 101c644:	e0bff117 	ldw	r2,-60(fp)
 101c648:	e0bfec15 	stw	r2,-80(fp)
 101c64c:	e0bfec17 	ldw	r2,-80(fp)
 101c650:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 101c654:	00006706 	br	101c7f4 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 101c658:	e0bff917 	ldw	r2,-28(fp)
 101c65c:	1080020b 	ldhu	r2,8(r2)
 101c660:	0084303a 	nor	r2,zero,r2
 101c664:	1007883a 	mov	r3,r2
 101c668:	e0bffa0b 	ldhu	r2,-24(fp)
 101c66c:	1884703a 	and	r2,r3,r2
 101c670:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 101c674:	e0fff30b 	ldhu	r3,-52(fp)
 101c678:	e0bffa0b 	ldhu	r2,-24(fp)
 101c67c:	1880181e 	bne	r3,r2,101c6e0 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101c680:	e0bff203 	ldbu	r2,-56(fp)
 101c684:	10800058 	cmpnei	r2,r2,1
 101c688:	1000071e 	bne	r2,zero,101c6a8 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 101c68c:	e0bff917 	ldw	r2,-28(fp)
 101c690:	10c0020b 	ldhu	r3,8(r2)
 101c694:	e0bff30b 	ldhu	r2,-52(fp)
 101c698:	1884b03a 	or	r2,r3,r2
 101c69c:	1007883a 	mov	r3,r2
 101c6a0:	e0bff917 	ldw	r2,-28(fp)
 101c6a4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 101c6a8:	008040f4 	movhi	r2,259
 101c6ac:	10a42a04 	addi	r2,r2,-28504
 101c6b0:	10c00017 	ldw	r3,0(r2)
 101c6b4:	e0bff30b 	ldhu	r2,-52(fp)
 101c6b8:	18800b0d 	sth	r2,44(r3)
 101c6bc:	e0bff117 	ldw	r2,-60(fp)
 101c6c0:	e0bfeb15 	stw	r2,-84(fp)
 101c6c4:	e0bfeb17 	ldw	r2,-84(fp)
 101c6c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 101c6cc:	e0800217 	ldw	r2,8(fp)
 101c6d0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 101c6d4:	e0bff30b 	ldhu	r2,-52(fp)
 101c6d8:	e0bfff15 	stw	r2,-4(fp)
 101c6dc:	0000ad06 	br	101c994 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 101c6e0:	e1bffa0b 	ldhu	r6,-24(fp)
 101c6e4:	e1fffb03 	ldbu	r7,-20(fp)
 101c6e8:	e0bffc0b 	ldhu	r2,-16(fp)
 101c6ec:	e17ff404 	addi	r5,fp,-48
 101c6f0:	d8800015 	stw	r2,0(sp)
 101c6f4:	e13ff917 	ldw	r4,-28(fp)
 101c6f8:	101ce900 	call	101ce90 <OS_FlagBlock>
 101c6fc:	e0bff117 	ldw	r2,-60(fp)
 101c700:	e0bfea15 	stw	r2,-88(fp)
 101c704:	e0bfea17 	ldw	r2,-88(fp)
 101c708:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 101c70c:	00003906 	br	101c7f4 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 101c710:	e0bff917 	ldw	r2,-28(fp)
 101c714:	1080020b 	ldhu	r2,8(r2)
 101c718:	0084303a 	nor	r2,zero,r2
 101c71c:	1007883a 	mov	r3,r2
 101c720:	e0bffa0b 	ldhu	r2,-24(fp)
 101c724:	1884703a 	and	r2,r3,r2
 101c728:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 101c72c:	e0bff30b 	ldhu	r2,-52(fp)
 101c730:	1005003a 	cmpeq	r2,r2,zero
 101c734:	1000181e 	bne	r2,zero,101c798 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101c738:	e0bff203 	ldbu	r2,-56(fp)
 101c73c:	10800058 	cmpnei	r2,r2,1
 101c740:	1000071e 	bne	r2,zero,101c760 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 101c744:	e0bff917 	ldw	r2,-28(fp)
 101c748:	10c0020b 	ldhu	r3,8(r2)
 101c74c:	e0bff30b 	ldhu	r2,-52(fp)
 101c750:	1884b03a 	or	r2,r3,r2
 101c754:	1007883a 	mov	r3,r2
 101c758:	e0bff917 	ldw	r2,-28(fp)
 101c75c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 101c760:	008040f4 	movhi	r2,259
 101c764:	10a42a04 	addi	r2,r2,-28504
 101c768:	10c00017 	ldw	r3,0(r2)
 101c76c:	e0bff30b 	ldhu	r2,-52(fp)
 101c770:	18800b0d 	sth	r2,44(r3)
 101c774:	e0bff117 	ldw	r2,-60(fp)
 101c778:	e0bfe915 	stw	r2,-92(fp)
 101c77c:	e0bfe917 	ldw	r2,-92(fp)
 101c780:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 101c784:	e0800217 	ldw	r2,8(fp)
 101c788:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 101c78c:	e0fff30b 	ldhu	r3,-52(fp)
 101c790:	e0ffff15 	stw	r3,-4(fp)
 101c794:	00007f06 	br	101c994 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 101c798:	e1bffa0b 	ldhu	r6,-24(fp)
 101c79c:	e1fffb03 	ldbu	r7,-20(fp)
 101c7a0:	e0bffc0b 	ldhu	r2,-16(fp)
 101c7a4:	e17ff404 	addi	r5,fp,-48
 101c7a8:	d8800015 	stw	r2,0(sp)
 101c7ac:	e13ff917 	ldw	r4,-28(fp)
 101c7b0:	101ce900 	call	101ce90 <OS_FlagBlock>
 101c7b4:	e0bff117 	ldw	r2,-60(fp)
 101c7b8:	e0bfe815 	stw	r2,-96(fp)
 101c7bc:	e0bfe817 	ldw	r2,-96(fp)
 101c7c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 101c7c4:	00000b06 	br	101c7f4 <OSFlagPend+0x48c>
 101c7c8:	e0bff117 	ldw	r2,-60(fp)
 101c7cc:	e0bfe715 	stw	r2,-100(fp)
 101c7d0:	e0bfe717 	ldw	r2,-100(fp)
 101c7d4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 101c7d8:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 101c7dc:	e0c00217 	ldw	r3,8(fp)
 101c7e0:	00801bc4 	movi	r2,111
 101c7e4:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 101c7e8:	e0bff30b 	ldhu	r2,-52(fp)
 101c7ec:	e0bfff15 	stw	r2,-4(fp)
 101c7f0:	00006806 	br	101c994 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 101c7f4:	101b1440 	call	101b144 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c7f8:	0005303a 	rdctl	r2,status
 101c7fc:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c800:	e0ffe617 	ldw	r3,-104(fp)
 101c804:	00bfff84 	movi	r2,-2
 101c808:	1884703a 	and	r2,r3,r2
 101c80c:	1001703a 	wrctl	status,r2
  
  return context;
 101c810:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 101c814:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 101c818:	008040f4 	movhi	r2,259
 101c81c:	10a42a04 	addi	r2,r2,-28504
 101c820:	10800017 	ldw	r2,0(r2)
 101c824:	10800c43 	ldbu	r2,49(r2)
 101c828:	10803fcc 	andi	r2,r2,255
 101c82c:	1005003a 	cmpeq	r2,r2,zero
 101c830:	1000221e 	bne	r2,zero,101c8bc <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 101c834:	008040f4 	movhi	r2,259
 101c838:	10a42a04 	addi	r2,r2,-28504
 101c83c:	10800017 	ldw	r2,0(r2)
 101c840:	10800c43 	ldbu	r2,49(r2)
 101c844:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 101c848:	008040f4 	movhi	r2,259
 101c84c:	10a42a04 	addi	r2,r2,-28504
 101c850:	10800017 	ldw	r2,0(r2)
 101c854:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 101c858:	e13ff404 	addi	r4,fp,-48
 101c85c:	101d2480 	call	101d248 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 101c860:	008040f4 	movhi	r2,259
 101c864:	10a42a04 	addi	r2,r2,-28504
 101c868:	10800017 	ldw	r2,0(r2)
 101c86c:	10000c05 	stb	zero,48(r2)
 101c870:	e0bff117 	ldw	r2,-60(fp)
 101c874:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c878:	e0bfe517 	ldw	r2,-108(fp)
 101c87c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 101c880:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 101c884:	e0bff243 	ldbu	r2,-55(fp)
 101c888:	108000a0 	cmpeqi	r2,r2,2
 101c88c:	1000011e 	bne	r2,zero,101c894 <OSFlagPend+0x52c>
 101c890:	00000406 	br	101c8a4 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 101c894:	e0c00217 	ldw	r3,8(fp)
 101c898:	00800384 	movi	r2,14
 101c89c:	18800005 	stb	r2,0(r3)
                 break;
 101c8a0:	00000306 	br	101c8b0 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 101c8a4:	e0c00217 	ldw	r3,8(fp)
 101c8a8:	00800284 	movi	r2,10
 101c8ac:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 101c8b0:	e0fff30b 	ldhu	r3,-52(fp)
 101c8b4:	e0ffff15 	stw	r3,-4(fp)
 101c8b8:	00003606 	br	101c994 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 101c8bc:	008040f4 	movhi	r2,259
 101c8c0:	10a42a04 	addi	r2,r2,-28504
 101c8c4:	10800017 	ldw	r2,0(r2)
 101c8c8:	10800b0b 	ldhu	r2,44(r2)
 101c8cc:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 101c8d0:	e0bff203 	ldbu	r2,-56(fp)
 101c8d4:	10800058 	cmpnei	r2,r2,1
 101c8d8:	1000261e 	bne	r2,zero,101c974 <OSFlagPend+0x60c>
        switch (wait_type) {
 101c8dc:	e0bffb03 	ldbu	r2,-20(fp)
 101c8e0:	e0bffd15 	stw	r2,-12(fp)
 101c8e4:	e0fffd17 	ldw	r3,-12(fp)
 101c8e8:	1804803a 	cmplt	r2,r3,zero
 101c8ec:	1000181e 	bne	r2,zero,101c950 <OSFlagPend+0x5e8>
 101c8f0:	e0fffd17 	ldw	r3,-12(fp)
 101c8f4:	18800090 	cmplti	r2,r3,2
 101c8f8:	10000d1e 	bne	r2,zero,101c930 <OSFlagPend+0x5c8>
 101c8fc:	e0fffd17 	ldw	r3,-12(fp)
 101c900:	18800108 	cmpgei	r2,r3,4
 101c904:	1000121e 	bne	r2,zero,101c950 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 101c908:	e0bff917 	ldw	r2,-28(fp)
 101c90c:	1080020b 	ldhu	r2,8(r2)
 101c910:	1007883a 	mov	r3,r2
 101c914:	e0bff30b 	ldhu	r2,-52(fp)
 101c918:	0084303a 	nor	r2,zero,r2
 101c91c:	1884703a 	and	r2,r3,r2
 101c920:	1007883a 	mov	r3,r2
 101c924:	e0bff917 	ldw	r2,-28(fp)
 101c928:	10c0020d 	sth	r3,8(r2)
                 break;
 101c92c:	00001106 	br	101c974 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 101c930:	e0bff917 	ldw	r2,-28(fp)
 101c934:	10c0020b 	ldhu	r3,8(r2)
 101c938:	e0bff30b 	ldhu	r2,-52(fp)
 101c93c:	1884b03a 	or	r2,r3,r2
 101c940:	1007883a 	mov	r3,r2
 101c944:	e0bff917 	ldw	r2,-28(fp)
 101c948:	10c0020d 	sth	r3,8(r2)
                 break;
 101c94c:	00000906 	br	101c974 <OSFlagPend+0x60c>
 101c950:	e0bff117 	ldw	r2,-60(fp)
 101c954:	e0bfe415 	stw	r2,-112(fp)
 101c958:	e0bfe417 	ldw	r2,-112(fp)
 101c95c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 101c960:	e0c00217 	ldw	r3,8(fp)
 101c964:	00801bc4 	movi	r2,111
 101c968:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 101c96c:	e03fff15 	stw	zero,-4(fp)
 101c970:	00000806 	br	101c994 <OSFlagPend+0x62c>
 101c974:	e0bff117 	ldw	r2,-60(fp)
 101c978:	e0bfe315 	stw	r2,-116(fp)
 101c97c:	e0bfe317 	ldw	r2,-116(fp)
 101c980:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 101c984:	e0800217 	ldw	r2,8(fp)
 101c988:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 101c98c:	e0bff30b 	ldhu	r2,-52(fp)
 101c990:	e0bfff15 	stw	r2,-4(fp)
 101c994:	e0bfff17 	ldw	r2,-4(fp)
}
 101c998:	e037883a 	mov	sp,fp
 101c99c:	dfc00117 	ldw	ra,4(sp)
 101c9a0:	df000017 	ldw	fp,0(sp)
 101c9a4:	dec00204 	addi	sp,sp,8
 101c9a8:	f800283a 	ret

0101c9ac <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 101c9ac:	defffb04 	addi	sp,sp,-20
 101c9b0:	df000415 	stw	fp,16(sp)
 101c9b4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 101c9b8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c9bc:	0005303a 	rdctl	r2,status
 101c9c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c9c4:	e0fffd17 	ldw	r3,-12(fp)
 101c9c8:	00bfff84 	movi	r2,-2
 101c9cc:	1884703a 	and	r2,r3,r2
 101c9d0:	1001703a 	wrctl	status,r2
  
  return context;
 101c9d4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 101c9d8:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 101c9dc:	008040f4 	movhi	r2,259
 101c9e0:	10a42a04 	addi	r2,r2,-28504
 101c9e4:	10800017 	ldw	r2,0(r2)
 101c9e8:	10800b0b 	ldhu	r2,44(r2)
 101c9ec:	e0bfff0d 	sth	r2,-4(fp)
 101c9f0:	e0bffe17 	ldw	r2,-8(fp)
 101c9f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c9f8:	e0bffc17 	ldw	r2,-16(fp)
 101c9fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 101ca00:	e0bfff0b 	ldhu	r2,-4(fp)
}
 101ca04:	e037883a 	mov	sp,fp
 101ca08:	df000017 	ldw	fp,0(sp)
 101ca0c:	dec00104 	addi	sp,sp,4
 101ca10:	f800283a 	ret

0101ca14 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 101ca14:	deffed04 	addi	sp,sp,-76
 101ca18:	dfc01215 	stw	ra,72(sp)
 101ca1c:	df001115 	stw	fp,68(sp)
 101ca20:	df001104 	addi	fp,sp,68
 101ca24:	e13ff915 	stw	r4,-28(fp)
 101ca28:	e1fffc15 	stw	r7,-16(fp)
 101ca2c:	e17ffa0d 	sth	r5,-24(fp)
 101ca30:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 101ca34:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 101ca38:	e0bffc17 	ldw	r2,-16(fp)
 101ca3c:	1004c03a 	cmpne	r2,r2,zero
 101ca40:	1000021e 	bne	r2,zero,101ca4c <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 101ca44:	e03fff15 	stw	zero,-4(fp)
 101ca48:	0000d606 	br	101cda4 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 101ca4c:	e0bff917 	ldw	r2,-28(fp)
 101ca50:	1004c03a 	cmpne	r2,r2,zero
 101ca54:	1000051e 	bne	r2,zero,101ca6c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101ca58:	e0fffc17 	ldw	r3,-16(fp)
 101ca5c:	00801b84 	movi	r2,110
 101ca60:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101ca64:	e03fff15 	stw	zero,-4(fp)
 101ca68:	0000ce06 	br	101cda4 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 101ca6c:	e0bff917 	ldw	r2,-28(fp)
 101ca70:	10800003 	ldbu	r2,0(r2)
 101ca74:	10803fcc 	andi	r2,r2,255
 101ca78:	10800160 	cmpeqi	r2,r2,5
 101ca7c:	1000051e 	bne	r2,zero,101ca94 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 101ca80:	e0fffc17 	ldw	r3,-16(fp)
 101ca84:	00800044 	movi	r2,1
 101ca88:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101ca8c:	e03fff15 	stw	zero,-4(fp)
 101ca90:	0000c406 	br	101cda4 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ca94:	0005303a 	rdctl	r2,status
 101ca98:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ca9c:	e0fff417 	ldw	r3,-48(fp)
 101caa0:	00bfff84 	movi	r2,-2
 101caa4:	1884703a 	and	r2,r3,r2
 101caa8:	1001703a 	wrctl	status,r2
  
  return context;
 101caac:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 101cab0:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 101cab4:	e0bffb03 	ldbu	r2,-20(fp)
 101cab8:	e0bffe15 	stw	r2,-8(fp)
 101cabc:	e0fffe17 	ldw	r3,-8(fp)
 101cac0:	1805003a 	cmpeq	r2,r3,zero
 101cac4:	1000041e 	bne	r2,zero,101cad8 <OSFlagPost+0xc4>
 101cac8:	e0fffe17 	ldw	r3,-8(fp)
 101cacc:	18800060 	cmpeqi	r2,r3,1
 101cad0:	10000b1e 	bne	r2,zero,101cb00 <OSFlagPost+0xec>
 101cad4:	00001206 	br	101cb20 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 101cad8:	e0bff917 	ldw	r2,-28(fp)
 101cadc:	1080020b 	ldhu	r2,8(r2)
 101cae0:	1007883a 	mov	r3,r2
 101cae4:	e0bffa0b 	ldhu	r2,-24(fp)
 101cae8:	0084303a 	nor	r2,zero,r2
 101caec:	1884703a 	and	r2,r3,r2
 101caf0:	1007883a 	mov	r3,r2
 101caf4:	e0bff917 	ldw	r2,-28(fp)
 101caf8:	10c0020d 	sth	r3,8(r2)
             break;
 101cafc:	00001106 	br	101cb44 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 101cb00:	e0bff917 	ldw	r2,-28(fp)
 101cb04:	10c0020b 	ldhu	r3,8(r2)
 101cb08:	e0bffa0b 	ldhu	r2,-24(fp)
 101cb0c:	1884b03a 	or	r2,r3,r2
 101cb10:	1007883a 	mov	r3,r2
 101cb14:	e0bff917 	ldw	r2,-28(fp)
 101cb18:	10c0020d 	sth	r3,8(r2)
             break;
 101cb1c:	00000906 	br	101cb44 <OSFlagPost+0x130>
 101cb20:	e0bff517 	ldw	r2,-44(fp)
 101cb24:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101cb28:	e0bff317 	ldw	r2,-52(fp)
 101cb2c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 101cb30:	e0fffc17 	ldw	r3,-16(fp)
 101cb34:	00801c44 	movi	r2,113
 101cb38:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 101cb3c:	e03fff15 	stw	zero,-4(fp)
 101cb40:	00009806 	br	101cda4 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 101cb44:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 101cb48:	e0bff917 	ldw	r2,-28(fp)
 101cb4c:	10800117 	ldw	r2,4(r2)
 101cb50:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 101cb54:	00007506 	br	101cd2c <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 101cb58:	e0bff817 	ldw	r2,-32(fp)
 101cb5c:	10800483 	ldbu	r2,18(r2)
 101cb60:	10803fcc 	andi	r2,r2,255
 101cb64:	e0bffd15 	stw	r2,-12(fp)
 101cb68:	e0fffd17 	ldw	r3,-12(fp)
 101cb6c:	18800060 	cmpeqi	r2,r3,1
 101cb70:	10004d1e 	bne	r2,zero,101cca8 <OSFlagPost+0x294>
 101cb74:	e0fffd17 	ldw	r3,-12(fp)
 101cb78:	18800088 	cmpgei	r2,r3,2
 101cb7c:	1000041e 	bne	r2,zero,101cb90 <OSFlagPost+0x17c>
 101cb80:	e0fffd17 	ldw	r3,-12(fp)
 101cb84:	1805003a 	cmpeq	r2,r3,zero
 101cb88:	1000301e 	bne	r2,zero,101cc4c <OSFlagPost+0x238>
 101cb8c:	00005b06 	br	101ccfc <OSFlagPost+0x2e8>
 101cb90:	e0fffd17 	ldw	r3,-12(fp)
 101cb94:	188000a0 	cmpeqi	r2,r3,2
 101cb98:	1000041e 	bne	r2,zero,101cbac <OSFlagPost+0x198>
 101cb9c:	e0fffd17 	ldw	r3,-12(fp)
 101cba0:	188000e0 	cmpeqi	r2,r3,3
 101cba4:	1000161e 	bne	r2,zero,101cc00 <OSFlagPost+0x1ec>
 101cba8:	00005406 	br	101ccfc <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 101cbac:	e0bff917 	ldw	r2,-28(fp)
 101cbb0:	10c0020b 	ldhu	r3,8(r2)
 101cbb4:	e0bff817 	ldw	r2,-32(fp)
 101cbb8:	1080040b 	ldhu	r2,16(r2)
 101cbbc:	1884703a 	and	r2,r3,r2
 101cbc0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 101cbc4:	e0bff817 	ldw	r2,-32(fp)
 101cbc8:	1080040b 	ldhu	r2,16(r2)
 101cbcc:	10ffffcc 	andi	r3,r2,65535
 101cbd0:	e0bff68b 	ldhu	r2,-38(fp)
 101cbd4:	1880521e 	bne	r3,r2,101cd20 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 101cbd8:	e17ff68b 	ldhu	r5,-38(fp)
 101cbdc:	e13ff817 	ldw	r4,-32(fp)
 101cbe0:	101d1380 	call	101d138 <OS_FlagTaskRdy>
 101cbe4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 101cbe8:	e0bff603 	ldbu	r2,-40(fp)
 101cbec:	10800058 	cmpnei	r2,r2,1
 101cbf0:	10004b1e 	bne	r2,zero,101cd20 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 101cbf4:	00800044 	movi	r2,1
 101cbf8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 101cbfc:	00004806 	br	101cd20 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 101cc00:	e0bff917 	ldw	r2,-28(fp)
 101cc04:	10c0020b 	ldhu	r3,8(r2)
 101cc08:	e0bff817 	ldw	r2,-32(fp)
 101cc0c:	1080040b 	ldhu	r2,16(r2)
 101cc10:	1884703a 	and	r2,r3,r2
 101cc14:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 101cc18:	e0bff68b 	ldhu	r2,-38(fp)
 101cc1c:	1005003a 	cmpeq	r2,r2,zero
 101cc20:	10003f1e 	bne	r2,zero,101cd20 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 101cc24:	e17ff68b 	ldhu	r5,-38(fp)
 101cc28:	e13ff817 	ldw	r4,-32(fp)
 101cc2c:	101d1380 	call	101d138 <OS_FlagTaskRdy>
 101cc30:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 101cc34:	e0bff603 	ldbu	r2,-40(fp)
 101cc38:	10800058 	cmpnei	r2,r2,1
 101cc3c:	1000381e 	bne	r2,zero,101cd20 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 101cc40:	00800044 	movi	r2,1
 101cc44:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 101cc48:	00003506 	br	101cd20 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 101cc4c:	e0bff917 	ldw	r2,-28(fp)
 101cc50:	1080020b 	ldhu	r2,8(r2)
 101cc54:	0084303a 	nor	r2,zero,r2
 101cc58:	1007883a 	mov	r3,r2
 101cc5c:	e0bff817 	ldw	r2,-32(fp)
 101cc60:	1080040b 	ldhu	r2,16(r2)
 101cc64:	1884703a 	and	r2,r3,r2
 101cc68:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 101cc6c:	e0bff817 	ldw	r2,-32(fp)
 101cc70:	1080040b 	ldhu	r2,16(r2)
 101cc74:	10ffffcc 	andi	r3,r2,65535
 101cc78:	e0bff68b 	ldhu	r2,-38(fp)
 101cc7c:	1880281e 	bne	r3,r2,101cd20 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 101cc80:	e17ff68b 	ldhu	r5,-38(fp)
 101cc84:	e13ff817 	ldw	r4,-32(fp)
 101cc88:	101d1380 	call	101d138 <OS_FlagTaskRdy>
 101cc8c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 101cc90:	e0bff603 	ldbu	r2,-40(fp)
 101cc94:	10800058 	cmpnei	r2,r2,1
 101cc98:	1000211e 	bne	r2,zero,101cd20 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 101cc9c:	00800044 	movi	r2,1
 101cca0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 101cca4:	00001e06 	br	101cd20 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 101cca8:	e0bff917 	ldw	r2,-28(fp)
 101ccac:	1080020b 	ldhu	r2,8(r2)
 101ccb0:	0084303a 	nor	r2,zero,r2
 101ccb4:	1007883a 	mov	r3,r2
 101ccb8:	e0bff817 	ldw	r2,-32(fp)
 101ccbc:	1080040b 	ldhu	r2,16(r2)
 101ccc0:	1884703a 	and	r2,r3,r2
 101ccc4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 101ccc8:	e0bff68b 	ldhu	r2,-38(fp)
 101cccc:	1005003a 	cmpeq	r2,r2,zero
 101ccd0:	1000131e 	bne	r2,zero,101cd20 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 101ccd4:	e17ff68b 	ldhu	r5,-38(fp)
 101ccd8:	e13ff817 	ldw	r4,-32(fp)
 101ccdc:	101d1380 	call	101d138 <OS_FlagTaskRdy>
 101cce0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 101cce4:	e0bff603 	ldbu	r2,-40(fp)
 101cce8:	10800058 	cmpnei	r2,r2,1
 101ccec:	10000c1e 	bne	r2,zero,101cd20 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 101ccf0:	00800044 	movi	r2,1
 101ccf4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 101ccf8:	00000906 	br	101cd20 <OSFlagPost+0x30c>
 101ccfc:	e0bff517 	ldw	r2,-44(fp)
 101cd00:	e0bff215 	stw	r2,-56(fp)
 101cd04:	e0bff217 	ldw	r2,-56(fp)
 101cd08:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 101cd0c:	e0fffc17 	ldw	r3,-16(fp)
 101cd10:	00801bc4 	movi	r2,111
 101cd14:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 101cd18:	e03fff15 	stw	zero,-4(fp)
 101cd1c:	00002106 	br	101cda4 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 101cd20:	e0bff817 	ldw	r2,-32(fp)
 101cd24:	10800017 	ldw	r2,0(r2)
 101cd28:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 101cd2c:	e0bff817 	ldw	r2,-32(fp)
 101cd30:	1004c03a 	cmpne	r2,r2,zero
 101cd34:	103f881e 	bne	r2,zero,101cb58 <OSFlagPost+0x144>
 101cd38:	e0bff517 	ldw	r2,-44(fp)
 101cd3c:	e0bff115 	stw	r2,-60(fp)
 101cd40:	e0bff117 	ldw	r2,-60(fp)
 101cd44:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 101cd48:	e0bff783 	ldbu	r2,-34(fp)
 101cd4c:	10800058 	cmpnei	r2,r2,1
 101cd50:	1000011e 	bne	r2,zero,101cd58 <OSFlagPost+0x344>
        OS_Sched();
 101cd54:	101b1440 	call	101b144 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101cd58:	0005303a 	rdctl	r2,status
 101cd5c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101cd60:	e0fff017 	ldw	r3,-64(fp)
 101cd64:	00bfff84 	movi	r2,-2
 101cd68:	1884703a 	and	r2,r3,r2
 101cd6c:	1001703a 	wrctl	status,r2
  
  return context;
 101cd70:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 101cd74:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 101cd78:	e0bff917 	ldw	r2,-28(fp)
 101cd7c:	1080020b 	ldhu	r2,8(r2)
 101cd80:	e0bff70d 	sth	r2,-36(fp)
 101cd84:	e0bff517 	ldw	r2,-44(fp)
 101cd88:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101cd8c:	e0bfef17 	ldw	r2,-68(fp)
 101cd90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 101cd94:	e0bffc17 	ldw	r2,-16(fp)
 101cd98:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 101cd9c:	e0bff70b 	ldhu	r2,-36(fp)
 101cda0:	e0bfff15 	stw	r2,-4(fp)
 101cda4:	e0bfff17 	ldw	r2,-4(fp)
}
 101cda8:	e037883a 	mov	sp,fp
 101cdac:	dfc00117 	ldw	ra,4(sp)
 101cdb0:	df000017 	ldw	fp,0(sp)
 101cdb4:	dec00204 	addi	sp,sp,8
 101cdb8:	f800283a 	ret

0101cdbc <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 101cdbc:	defff804 	addi	sp,sp,-32
 101cdc0:	df000715 	stw	fp,28(sp)
 101cdc4:	df000704 	addi	fp,sp,28
 101cdc8:	e13ffd15 	stw	r4,-12(fp)
 101cdcc:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 101cdd0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 101cdd4:	e0bffe17 	ldw	r2,-8(fp)
 101cdd8:	1004c03a 	cmpne	r2,r2,zero
 101cddc:	1000021e 	bne	r2,zero,101cde8 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 101cde0:	e03fff15 	stw	zero,-4(fp)
 101cde4:	00002506 	br	101ce7c <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 101cde8:	e0bffd17 	ldw	r2,-12(fp)
 101cdec:	1004c03a 	cmpne	r2,r2,zero
 101cdf0:	1000051e 	bne	r2,zero,101ce08 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101cdf4:	e0fffe17 	ldw	r3,-8(fp)
 101cdf8:	00801b84 	movi	r2,110
 101cdfc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101ce00:	e03fff15 	stw	zero,-4(fp)
 101ce04:	00001d06 	br	101ce7c <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 101ce08:	e0bffd17 	ldw	r2,-12(fp)
 101ce0c:	10800003 	ldbu	r2,0(r2)
 101ce10:	10803fcc 	andi	r2,r2,255
 101ce14:	10800160 	cmpeqi	r2,r2,5
 101ce18:	1000051e 	bne	r2,zero,101ce30 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 101ce1c:	e0fffe17 	ldw	r3,-8(fp)
 101ce20:	00800044 	movi	r2,1
 101ce24:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101ce28:	e03fff15 	stw	zero,-4(fp)
 101ce2c:	00001306 	br	101ce7c <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ce30:	0005303a 	rdctl	r2,status
 101ce34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ce38:	e0fffa17 	ldw	r3,-24(fp)
 101ce3c:	00bfff84 	movi	r2,-2
 101ce40:	1884703a 	and	r2,r3,r2
 101ce44:	1001703a 	wrctl	status,r2
  
  return context;
 101ce48:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101ce4c:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 101ce50:	e0bffd17 	ldw	r2,-12(fp)
 101ce54:	1080020b 	ldhu	r2,8(r2)
 101ce58:	e0bffc0d 	sth	r2,-16(fp)
 101ce5c:	e0bffb17 	ldw	r2,-20(fp)
 101ce60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ce64:	e0bff917 	ldw	r2,-28(fp)
 101ce68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101ce6c:	e0bffe17 	ldw	r2,-8(fp)
 101ce70:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 101ce74:	e0bffc0b 	ldhu	r2,-16(fp)
 101ce78:	e0bfff15 	stw	r2,-4(fp)
 101ce7c:	e0bfff17 	ldw	r2,-4(fp)
}
 101ce80:	e037883a 	mov	sp,fp
 101ce84:	df000017 	ldw	fp,0(sp)
 101ce88:	dec00104 	addi	sp,sp,4
 101ce8c:	f800283a 	ret

0101ce90 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 101ce90:	defff804 	addi	sp,sp,-32
 101ce94:	df000715 	stw	fp,28(sp)
 101ce98:	df000704 	addi	fp,sp,28
 101ce9c:	e13ffb15 	stw	r4,-20(fp)
 101cea0:	e17ffc15 	stw	r5,-16(fp)
 101cea4:	e0800117 	ldw	r2,4(fp)
 101cea8:	e1bffd0d 	sth	r6,-12(fp)
 101ceac:	e1fffe05 	stb	r7,-8(fp)
 101ceb0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 101ceb4:	008040f4 	movhi	r2,259
 101ceb8:	10a42a04 	addi	r2,r2,-28504
 101cebc:	10c00017 	ldw	r3,0(r2)
 101cec0:	008040f4 	movhi	r2,259
 101cec4:	10a42a04 	addi	r2,r2,-28504
 101cec8:	10800017 	ldw	r2,0(r2)
 101cecc:	10800c03 	ldbu	r2,48(r2)
 101ced0:	10800814 	ori	r2,r2,32
 101ced4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 101ced8:	008040f4 	movhi	r2,259
 101cedc:	10a42a04 	addi	r2,r2,-28504
 101cee0:	10800017 	ldw	r2,0(r2)
 101cee4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 101cee8:	008040f4 	movhi	r2,259
 101ceec:	10a42a04 	addi	r2,r2,-28504
 101cef0:	10c00017 	ldw	r3,0(r2)
 101cef4:	e0bfff0b 	ldhu	r2,-4(fp)
 101cef8:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 101cefc:	008040f4 	movhi	r2,259
 101cf00:	10a42a04 	addi	r2,r2,-28504
 101cf04:	10c00017 	ldw	r3,0(r2)
 101cf08:	e0bffc17 	ldw	r2,-16(fp)
 101cf0c:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 101cf10:	e0fffc17 	ldw	r3,-16(fp)
 101cf14:	e0bffd0b 	ldhu	r2,-12(fp)
 101cf18:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 101cf1c:	e0fffc17 	ldw	r3,-16(fp)
 101cf20:	e0bffe03 	ldbu	r2,-8(fp)
 101cf24:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 101cf28:	008040f4 	movhi	r2,259
 101cf2c:	10a42a04 	addi	r2,r2,-28504
 101cf30:	10c00017 	ldw	r3,0(r2)
 101cf34:	e0bffc17 	ldw	r2,-16(fp)
 101cf38:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 101cf3c:	e0bffb17 	ldw	r2,-20(fp)
 101cf40:	10c00117 	ldw	r3,4(r2)
 101cf44:	e0bffc17 	ldw	r2,-16(fp)
 101cf48:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 101cf4c:	e0bffc17 	ldw	r2,-16(fp)
 101cf50:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 101cf54:	e0fffc17 	ldw	r3,-16(fp)
 101cf58:	e0bffb17 	ldw	r2,-20(fp)
 101cf5c:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 101cf60:	e0bffb17 	ldw	r2,-20(fp)
 101cf64:	10800117 	ldw	r2,4(r2)
 101cf68:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 101cf6c:	e0bffa17 	ldw	r2,-24(fp)
 101cf70:	1005003a 	cmpeq	r2,r2,zero
 101cf74:	1000031e 	bne	r2,zero,101cf84 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 101cf78:	e0fffa17 	ldw	r3,-24(fp)
 101cf7c:	e0bffc17 	ldw	r2,-16(fp)
 101cf80:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 101cf84:	e0fffb17 	ldw	r3,-20(fp)
 101cf88:	e0bffc17 	ldw	r2,-16(fp)
 101cf8c:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 101cf90:	008040f4 	movhi	r2,259
 101cf94:	10a42a04 	addi	r2,r2,-28504
 101cf98:	10800017 	ldw	r2,0(r2)
 101cf9c:	10800d03 	ldbu	r2,52(r2)
 101cfa0:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 101cfa4:	e13ff903 	ldbu	r4,-28(fp)
 101cfa8:	e0fff903 	ldbu	r3,-28(fp)
 101cfac:	008040f4 	movhi	r2,259
 101cfb0:	10a42744 	addi	r2,r2,-28515
 101cfb4:	10c5883a 	add	r2,r2,r3
 101cfb8:	10800003 	ldbu	r2,0(r2)
 101cfbc:	1007883a 	mov	r3,r2
 101cfc0:	008040f4 	movhi	r2,259
 101cfc4:	10a42a04 	addi	r2,r2,-28504
 101cfc8:	10800017 	ldw	r2,0(r2)
 101cfcc:	10800d43 	ldbu	r2,53(r2)
 101cfd0:	0084303a 	nor	r2,zero,r2
 101cfd4:	1884703a 	and	r2,r3,r2
 101cfd8:	1007883a 	mov	r3,r2
 101cfdc:	008040f4 	movhi	r2,259
 101cfe0:	10a42744 	addi	r2,r2,-28515
 101cfe4:	1105883a 	add	r2,r2,r4
 101cfe8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 101cfec:	e0fff903 	ldbu	r3,-28(fp)
 101cff0:	008040f4 	movhi	r2,259
 101cff4:	10a42744 	addi	r2,r2,-28515
 101cff8:	10c5883a 	add	r2,r2,r3
 101cffc:	10800003 	ldbu	r2,0(r2)
 101d000:	10803fcc 	andi	r2,r2,255
 101d004:	1004c03a 	cmpne	r2,r2,zero
 101d008:	10000e1e 	bne	r2,zero,101d044 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 101d00c:	008040f4 	movhi	r2,259
 101d010:	10a42a04 	addi	r2,r2,-28504
 101d014:	10800017 	ldw	r2,0(r2)
 101d018:	10800d83 	ldbu	r2,54(r2)
 101d01c:	0084303a 	nor	r2,zero,r2
 101d020:	1007883a 	mov	r3,r2
 101d024:	008040f4 	movhi	r2,259
 101d028:	10a42704 	addi	r2,r2,-28516
 101d02c:	10800003 	ldbu	r2,0(r2)
 101d030:	1884703a 	and	r2,r3,r2
 101d034:	1007883a 	mov	r3,r2
 101d038:	008040f4 	movhi	r2,259
 101d03c:	10a42704 	addi	r2,r2,-28516
 101d040:	10c00005 	stb	r3,0(r2)
    }
}
 101d044:	e037883a 	mov	sp,fp
 101d048:	df000017 	ldw	fp,0(sp)
 101d04c:	dec00104 	addi	sp,sp,4
 101d050:	f800283a 	ret

0101d054 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 101d054:	defffb04 	addi	sp,sp,-20
 101d058:	dfc00415 	stw	ra,16(sp)
 101d05c:	df000315 	stw	fp,12(sp)
 101d060:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 101d064:	010040f4 	movhi	r4,259
 101d068:	211e4004 	addi	r4,r4,30976
 101d06c:	0140dc04 	movi	r5,880
 101d070:	101b0840 	call	101b084 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 101d074:	008040f4 	movhi	r2,259
 101d078:	109e4004 	addi	r2,r2,30976
 101d07c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 101d080:	008040f4 	movhi	r2,259
 101d084:	109e4b04 	addi	r2,r2,31020
 101d088:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 101d08c:	e03fff0d 	sth	zero,-4(fp)
 101d090:	00001306 	br	101d0e0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 101d094:	e0bffe17 	ldw	r2,-8(fp)
 101d098:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 101d09c:	e0fffe17 	ldw	r3,-8(fp)
 101d0a0:	e0bffd17 	ldw	r2,-12(fp)
 101d0a4:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 101d0a8:	e0fffe17 	ldw	r3,-8(fp)
 101d0ac:	00800fc4 	movi	r2,63
 101d0b0:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 101d0b4:	e0bffe17 	ldw	r2,-8(fp)
 101d0b8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 101d0bc:	e0bffe17 	ldw	r2,-8(fp)
 101d0c0:	10800b04 	addi	r2,r2,44
 101d0c4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 101d0c8:	e0bffd17 	ldw	r2,-12(fp)
 101d0cc:	10800b04 	addi	r2,r2,44
 101d0d0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 101d0d4:	e0bfff0b 	ldhu	r2,-4(fp)
 101d0d8:	10800044 	addi	r2,r2,1
 101d0dc:	e0bfff0d 	sth	r2,-4(fp)
 101d0e0:	e0bfff0b 	ldhu	r2,-4(fp)
 101d0e4:	108004f0 	cmpltui	r2,r2,19
 101d0e8:	103fea1e 	bne	r2,zero,101d094 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 101d0ec:	e0bffe17 	ldw	r2,-8(fp)
 101d0f0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 101d0f4:	e0bffe17 	ldw	r2,-8(fp)
 101d0f8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 101d0fc:	e0fffe17 	ldw	r3,-8(fp)
 101d100:	00800fc4 	movi	r2,63
 101d104:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 101d108:	e0bffe17 	ldw	r2,-8(fp)
 101d10c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 101d110:	00c040f4 	movhi	r3,259
 101d114:	18e42c04 	addi	r3,r3,-28496
 101d118:	008040f4 	movhi	r2,259
 101d11c:	109e4004 	addi	r2,r2,30976
 101d120:	18800015 	stw	r2,0(r3)
#endif
}
 101d124:	e037883a 	mov	sp,fp
 101d128:	dfc00117 	ldw	ra,4(sp)
 101d12c:	df000017 	ldw	fp,0(sp)
 101d130:	dec00204 	addi	sp,sp,8
 101d134:	f800283a 	ret

0101d138 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 101d138:	defffa04 	addi	sp,sp,-24
 101d13c:	dfc00515 	stw	ra,20(sp)
 101d140:	df000415 	stw	fp,16(sp)
 101d144:	df000404 	addi	fp,sp,16
 101d148:	e13ffe15 	stw	r4,-8(fp)
 101d14c:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 101d150:	e0bffe17 	ldw	r2,-8(fp)
 101d154:	10800217 	ldw	r2,8(r2)
 101d158:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 101d15c:	e0bffd17 	ldw	r2,-12(fp)
 101d160:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 101d164:	e0fffd17 	ldw	r3,-12(fp)
 101d168:	e0bfff0b 	ldhu	r2,-4(fp)
 101d16c:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 101d170:	e0bffd17 	ldw	r2,-12(fp)
 101d174:	10c00c03 	ldbu	r3,48(r2)
 101d178:	00bff7c4 	movi	r2,-33
 101d17c:	1884703a 	and	r2,r3,r2
 101d180:	1007883a 	mov	r3,r2
 101d184:	e0bffd17 	ldw	r2,-12(fp)
 101d188:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 101d18c:	e0bffd17 	ldw	r2,-12(fp)
 101d190:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 101d194:	e0bffd17 	ldw	r2,-12(fp)
 101d198:	10800c03 	ldbu	r2,48(r2)
 101d19c:	10803fcc 	andi	r2,r2,255
 101d1a0:	1004c03a 	cmpne	r2,r2,zero
 101d1a4:	10001f1e 	bne	r2,zero,101d224 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 101d1a8:	e0bffd17 	ldw	r2,-12(fp)
 101d1ac:	10c00d83 	ldbu	r3,54(r2)
 101d1b0:	008040f4 	movhi	r2,259
 101d1b4:	10a42704 	addi	r2,r2,-28516
 101d1b8:	10800003 	ldbu	r2,0(r2)
 101d1bc:	1884b03a 	or	r2,r3,r2
 101d1c0:	1007883a 	mov	r3,r2
 101d1c4:	008040f4 	movhi	r2,259
 101d1c8:	10a42704 	addi	r2,r2,-28516
 101d1cc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 101d1d0:	e0bffd17 	ldw	r2,-12(fp)
 101d1d4:	10800d03 	ldbu	r2,52(r2)
 101d1d8:	11003fcc 	andi	r4,r2,255
 101d1dc:	e0bffd17 	ldw	r2,-12(fp)
 101d1e0:	10800d03 	ldbu	r2,52(r2)
 101d1e4:	10c03fcc 	andi	r3,r2,255
 101d1e8:	008040f4 	movhi	r2,259
 101d1ec:	10a42744 	addi	r2,r2,-28515
 101d1f0:	10c5883a 	add	r2,r2,r3
 101d1f4:	10c00003 	ldbu	r3,0(r2)
 101d1f8:	e0bffd17 	ldw	r2,-12(fp)
 101d1fc:	10800d43 	ldbu	r2,53(r2)
 101d200:	1884b03a 	or	r2,r3,r2
 101d204:	1007883a 	mov	r3,r2
 101d208:	008040f4 	movhi	r2,259
 101d20c:	10a42744 	addi	r2,r2,-28515
 101d210:	1105883a 	add	r2,r2,r4
 101d214:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 101d218:	00800044 	movi	r2,1
 101d21c:	e0bffc05 	stb	r2,-16(fp)
 101d220:	00000106 	br	101d228 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 101d224:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 101d228:	e13ffe17 	ldw	r4,-8(fp)
 101d22c:	101d2480 	call	101d248 <OS_FlagUnlink>
    return (sched);
 101d230:	e0bffc03 	ldbu	r2,-16(fp)
}
 101d234:	e037883a 	mov	sp,fp
 101d238:	dfc00117 	ldw	ra,4(sp)
 101d23c:	df000017 	ldw	fp,0(sp)
 101d240:	dec00204 	addi	sp,sp,8
 101d244:	f800283a 	ret

0101d248 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 101d248:	defffa04 	addi	sp,sp,-24
 101d24c:	df000515 	stw	fp,20(sp)
 101d250:	df000504 	addi	fp,sp,20
 101d254:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 101d258:	e0bfff17 	ldw	r2,-4(fp)
 101d25c:	10800117 	ldw	r2,4(r2)
 101d260:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 101d264:	e0bfff17 	ldw	r2,-4(fp)
 101d268:	10800017 	ldw	r2,0(r2)
 101d26c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 101d270:	e0bffc17 	ldw	r2,-16(fp)
 101d274:	1004c03a 	cmpne	r2,r2,zero
 101d278:	10000c1e 	bne	r2,zero,101d2ac <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 101d27c:	e0bfff17 	ldw	r2,-4(fp)
 101d280:	10800317 	ldw	r2,12(r2)
 101d284:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 101d288:	e0fffd17 	ldw	r3,-12(fp)
 101d28c:	e0bffb17 	ldw	r2,-20(fp)
 101d290:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 101d294:	e0bffb17 	ldw	r2,-20(fp)
 101d298:	1005003a 	cmpeq	r2,r2,zero
 101d29c:	10000c1e 	bne	r2,zero,101d2d0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 101d2a0:	e0bffb17 	ldw	r2,-20(fp)
 101d2a4:	10000115 	stw	zero,4(r2)
 101d2a8:	00000906 	br	101d2d0 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 101d2ac:	e0fffc17 	ldw	r3,-16(fp)
 101d2b0:	e0bffb17 	ldw	r2,-20(fp)
 101d2b4:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 101d2b8:	e0bffb17 	ldw	r2,-20(fp)
 101d2bc:	1005003a 	cmpeq	r2,r2,zero
 101d2c0:	1000031e 	bne	r2,zero,101d2d0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 101d2c4:	e0fffb17 	ldw	r3,-20(fp)
 101d2c8:	e0bffc17 	ldw	r2,-16(fp)
 101d2cc:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 101d2d0:	e0bfff17 	ldw	r2,-4(fp)
 101d2d4:	10800217 	ldw	r2,8(r2)
 101d2d8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 101d2dc:	e0bffe17 	ldw	r2,-8(fp)
 101d2e0:	10000a15 	stw	zero,40(r2)
#endif
}
 101d2e4:	e037883a 	mov	sp,fp
 101d2e8:	df000017 	ldw	fp,0(sp)
 101d2ec:	dec00104 	addi	sp,sp,4
 101d2f0:	f800283a 	ret

0101d2f4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 101d2f4:	defff304 	addi	sp,sp,-52
 101d2f8:	df000c15 	stw	fp,48(sp)
 101d2fc:	df000c04 	addi	fp,sp,48
 101d300:	e13ffb15 	stw	r4,-20(fp)
 101d304:	e17ffc15 	stw	r5,-16(fp)
 101d308:	e1bffd15 	stw	r6,-12(fp)
 101d30c:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101d310:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 101d314:	e0bffe17 	ldw	r2,-8(fp)
 101d318:	1004c03a 	cmpne	r2,r2,zero
 101d31c:	1000021e 	bne	r2,zero,101d328 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 101d320:	e03fff15 	stw	zero,-4(fp)
 101d324:	00007506 	br	101d4fc <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 101d328:	e0bffb17 	ldw	r2,-20(fp)
 101d32c:	1004c03a 	cmpne	r2,r2,zero
 101d330:	1000051e 	bne	r2,zero,101d348 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 101d334:	e0fffe17 	ldw	r3,-8(fp)
 101d338:	00801884 	movi	r2,98
 101d33c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 101d340:	e03fff15 	stw	zero,-4(fp)
 101d344:	00006d06 	br	101d4fc <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 101d348:	e0bffb17 	ldw	r2,-20(fp)
 101d34c:	108000cc 	andi	r2,r2,3
 101d350:	1005003a 	cmpeq	r2,r2,zero
 101d354:	1000051e 	bne	r2,zero,101d36c <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 101d358:	e0fffe17 	ldw	r3,-8(fp)
 101d35c:	00801884 	movi	r2,98
 101d360:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 101d364:	e03fff15 	stw	zero,-4(fp)
 101d368:	00006406 	br	101d4fc <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 101d36c:	e0bffc17 	ldw	r2,-16(fp)
 101d370:	108000a8 	cmpgeui	r2,r2,2
 101d374:	1000051e 	bne	r2,zero,101d38c <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 101d378:	e0fffe17 	ldw	r3,-8(fp)
 101d37c:	008016c4 	movi	r2,91
 101d380:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 101d384:	e03fff15 	stw	zero,-4(fp)
 101d388:	00005c06 	br	101d4fc <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 101d38c:	e0bffd17 	ldw	r2,-12(fp)
 101d390:	10800128 	cmpgeui	r2,r2,4
 101d394:	1000051e 	bne	r2,zero,101d3ac <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 101d398:	e0fffe17 	ldw	r3,-8(fp)
 101d39c:	00801704 	movi	r2,92
 101d3a0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 101d3a4:	e03fff15 	stw	zero,-4(fp)
 101d3a8:	00005406 	br	101d4fc <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d3ac:	0005303a 	rdctl	r2,status
 101d3b0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d3b4:	e0fff517 	ldw	r3,-44(fp)
 101d3b8:	00bfff84 	movi	r2,-2
 101d3bc:	1884703a 	and	r2,r3,r2
 101d3c0:	1001703a 	wrctl	status,r2
  
  return context;
 101d3c4:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101d3c8:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 101d3cc:	008040f4 	movhi	r2,259
 101d3d0:	10a42404 	addi	r2,r2,-28528
 101d3d4:	10800017 	ldw	r2,0(r2)
 101d3d8:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 101d3dc:	008040f4 	movhi	r2,259
 101d3e0:	10a42404 	addi	r2,r2,-28528
 101d3e4:	10800017 	ldw	r2,0(r2)
 101d3e8:	1005003a 	cmpeq	r2,r2,zero
 101d3ec:	1000081e 	bne	r2,zero,101d410 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 101d3f0:	008040f4 	movhi	r2,259
 101d3f4:	10a42404 	addi	r2,r2,-28528
 101d3f8:	10800017 	ldw	r2,0(r2)
 101d3fc:	10800117 	ldw	r2,4(r2)
 101d400:	1007883a 	mov	r3,r2
 101d404:	008040f4 	movhi	r2,259
 101d408:	10a42404 	addi	r2,r2,-28528
 101d40c:	10c00015 	stw	r3,0(r2)
 101d410:	e0bff617 	ldw	r2,-40(fp)
 101d414:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d418:	e0bff417 	ldw	r2,-48(fp)
 101d41c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 101d420:	e0bffa17 	ldw	r2,-24(fp)
 101d424:	1004c03a 	cmpne	r2,r2,zero
 101d428:	1000051e 	bne	r2,zero,101d440 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 101d42c:	e0fffe17 	ldw	r3,-8(fp)
 101d430:	00801684 	movi	r2,90
 101d434:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 101d438:	e03fff15 	stw	zero,-4(fp)
 101d43c:	00002f06 	br	101d4fc <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 101d440:	e0bffb17 	ldw	r2,-20(fp)
 101d444:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 101d448:	e0bffb17 	ldw	r2,-20(fp)
 101d44c:	1007883a 	mov	r3,r2
 101d450:	e0bffd17 	ldw	r2,-12(fp)
 101d454:	1885883a 	add	r2,r3,r2
 101d458:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 101d45c:	e03ff715 	stw	zero,-36(fp)
 101d460:	00000d06 	br	101d498 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 101d464:	e0fff817 	ldw	r3,-32(fp)
 101d468:	e0bff917 	ldw	r2,-28(fp)
 101d46c:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 101d470:	e0bff917 	ldw	r2,-28(fp)
 101d474:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 101d478:	e0bff917 	ldw	r2,-28(fp)
 101d47c:	1007883a 	mov	r3,r2
 101d480:	e0bffd17 	ldw	r2,-12(fp)
 101d484:	1885883a 	add	r2,r3,r2
 101d488:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 101d48c:	e0bff717 	ldw	r2,-36(fp)
 101d490:	10800044 	addi	r2,r2,1
 101d494:	e0bff715 	stw	r2,-36(fp)
 101d498:	e0bffc17 	ldw	r2,-16(fp)
 101d49c:	10ffffc4 	addi	r3,r2,-1
 101d4a0:	e0bff717 	ldw	r2,-36(fp)
 101d4a4:	10ffef36 	bltu	r2,r3,101d464 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 101d4a8:	e0bff817 	ldw	r2,-32(fp)
 101d4ac:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 101d4b0:	e0fffa17 	ldw	r3,-24(fp)
 101d4b4:	e0bffb17 	ldw	r2,-20(fp)
 101d4b8:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 101d4bc:	e0fffa17 	ldw	r3,-24(fp)
 101d4c0:	e0bffb17 	ldw	r2,-20(fp)
 101d4c4:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 101d4c8:	e0fffa17 	ldw	r3,-24(fp)
 101d4cc:	e0bffc17 	ldw	r2,-16(fp)
 101d4d0:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 101d4d4:	e0fffa17 	ldw	r3,-24(fp)
 101d4d8:	e0bffc17 	ldw	r2,-16(fp)
 101d4dc:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 101d4e0:	e0fffa17 	ldw	r3,-24(fp)
 101d4e4:	e0bffd17 	ldw	r2,-12(fp)
 101d4e8:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 101d4ec:	e0bffe17 	ldw	r2,-8(fp)
 101d4f0:	10000005 	stb	zero,0(r2)
    return (pmem);
 101d4f4:	e0bffa17 	ldw	r2,-24(fp)
 101d4f8:	e0bfff15 	stw	r2,-4(fp)
 101d4fc:	e0bfff17 	ldw	r2,-4(fp)
}
 101d500:	e037883a 	mov	sp,fp
 101d504:	df000017 	ldw	fp,0(sp)
 101d508:	dec00104 	addi	sp,sp,4
 101d50c:	f800283a 	ret

0101d510 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 101d510:	defff704 	addi	sp,sp,-36
 101d514:	df000815 	stw	fp,32(sp)
 101d518:	df000804 	addi	fp,sp,32
 101d51c:	e13ffd15 	stw	r4,-12(fp)
 101d520:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101d524:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 101d528:	e0bffe17 	ldw	r2,-8(fp)
 101d52c:	1004c03a 	cmpne	r2,r2,zero
 101d530:	1000021e 	bne	r2,zero,101d53c <OSMemGet+0x2c>
        return ((void *)0);
 101d534:	e03fff15 	stw	zero,-4(fp)
 101d538:	00003106 	br	101d600 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 101d53c:	e0bffd17 	ldw	r2,-12(fp)
 101d540:	1004c03a 	cmpne	r2,r2,zero
 101d544:	1000051e 	bne	r2,zero,101d55c <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 101d548:	e0fffe17 	ldw	r3,-8(fp)
 101d54c:	00801804 	movi	r2,96
 101d550:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101d554:	e03fff15 	stw	zero,-4(fp)
 101d558:	00002906 	br	101d600 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d55c:	0005303a 	rdctl	r2,status
 101d560:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d564:	e0fffa17 	ldw	r3,-24(fp)
 101d568:	00bfff84 	movi	r2,-2
 101d56c:	1884703a 	and	r2,r3,r2
 101d570:	1001703a 	wrctl	status,r2
  
  return context;
 101d574:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101d578:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 101d57c:	e0bffd17 	ldw	r2,-12(fp)
 101d580:	10800417 	ldw	r2,16(r2)
 101d584:	1005003a 	cmpeq	r2,r2,zero
 101d588:	1000151e 	bne	r2,zero,101d5e0 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 101d58c:	e0bffd17 	ldw	r2,-12(fp)
 101d590:	10800117 	ldw	r2,4(r2)
 101d594:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 101d598:	e0bffc17 	ldw	r2,-16(fp)
 101d59c:	10c00017 	ldw	r3,0(r2)
 101d5a0:	e0bffd17 	ldw	r2,-12(fp)
 101d5a4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 101d5a8:	e0bffd17 	ldw	r2,-12(fp)
 101d5ac:	10800417 	ldw	r2,16(r2)
 101d5b0:	10ffffc4 	addi	r3,r2,-1
 101d5b4:	e0bffd17 	ldw	r2,-12(fp)
 101d5b8:	10c00415 	stw	r3,16(r2)
 101d5bc:	e0bffb17 	ldw	r2,-20(fp)
 101d5c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d5c4:	e0bff917 	ldw	r2,-28(fp)
 101d5c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 101d5cc:	e0bffe17 	ldw	r2,-8(fp)
 101d5d0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 101d5d4:	e0bffc17 	ldw	r2,-16(fp)
 101d5d8:	e0bfff15 	stw	r2,-4(fp)
 101d5dc:	00000806 	br	101d600 <OSMemGet+0xf0>
 101d5e0:	e0bffb17 	ldw	r2,-20(fp)
 101d5e4:	e0bff815 	stw	r2,-32(fp)
 101d5e8:	e0bff817 	ldw	r2,-32(fp)
 101d5ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 101d5f0:	e0fffe17 	ldw	r3,-8(fp)
 101d5f4:	00801744 	movi	r2,93
 101d5f8:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 101d5fc:	e03fff15 	stw	zero,-4(fp)
 101d600:	e0bfff17 	ldw	r2,-4(fp)
}
 101d604:	e037883a 	mov	sp,fp
 101d608:	df000017 	ldw	fp,0(sp)
 101d60c:	dec00104 	addi	sp,sp,4
 101d610:	f800283a 	ret

0101d614 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 101d614:	defff604 	addi	sp,sp,-40
 101d618:	dfc00915 	stw	ra,36(sp)
 101d61c:	df000815 	stw	fp,32(sp)
 101d620:	df000804 	addi	fp,sp,32
 101d624:	e13ffc15 	stw	r4,-16(fp)
 101d628:	e17ffd15 	stw	r5,-12(fp)
 101d62c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101d630:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101d634:	e0bffe17 	ldw	r2,-8(fp)
 101d638:	1004c03a 	cmpne	r2,r2,zero
 101d63c:	1000021e 	bne	r2,zero,101d648 <OSMemNameGet+0x34>
        return (0);
 101d640:	e03fff15 	stw	zero,-4(fp)
 101d644:	00003006 	br	101d708 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 101d648:	e0bffc17 	ldw	r2,-16(fp)
 101d64c:	1004c03a 	cmpne	r2,r2,zero
 101d650:	1000051e 	bne	r2,zero,101d668 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 101d654:	e0fffe17 	ldw	r3,-8(fp)
 101d658:	00801804 	movi	r2,96
 101d65c:	18800005 	stb	r2,0(r3)
        return (0);
 101d660:	e03fff15 	stw	zero,-4(fp)
 101d664:	00002806 	br	101d708 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 101d668:	e0bffd17 	ldw	r2,-12(fp)
 101d66c:	1004c03a 	cmpne	r2,r2,zero
 101d670:	1000051e 	bne	r2,zero,101d688 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 101d674:	e0fffe17 	ldw	r3,-8(fp)
 101d678:	00800304 	movi	r2,12
 101d67c:	18800005 	stb	r2,0(r3)
        return (0);
 101d680:	e03fff15 	stw	zero,-4(fp)
 101d684:	00002006 	br	101d708 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 101d688:	008040f4 	movhi	r2,259
 101d68c:	10a42904 	addi	r2,r2,-28508
 101d690:	10800003 	ldbu	r2,0(r2)
 101d694:	10803fcc 	andi	r2,r2,255
 101d698:	1005003a 	cmpeq	r2,r2,zero
 101d69c:	1000051e 	bne	r2,zero,101d6b4 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 101d6a0:	e0fffe17 	ldw	r3,-8(fp)
 101d6a4:	00800444 	movi	r2,17
 101d6a8:	18800005 	stb	r2,0(r3)
        return (0);
 101d6ac:	e03fff15 	stw	zero,-4(fp)
 101d6b0:	00001506 	br	101d708 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d6b4:	0005303a 	rdctl	r2,status
 101d6b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d6bc:	e0fff917 	ldw	r3,-28(fp)
 101d6c0:	00bfff84 	movi	r2,-2
 101d6c4:	1884703a 	and	r2,r3,r2
 101d6c8:	1001703a 	wrctl	status,r2
  
  return context;
 101d6cc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101d6d0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 101d6d4:	e0bffc17 	ldw	r2,-16(fp)
 101d6d8:	11400504 	addi	r5,r2,20
 101d6dc:	e13ffd17 	ldw	r4,-12(fp)
 101d6e0:	101b2880 	call	101b288 <OS_StrCopy>
 101d6e4:	e0bffb05 	stb	r2,-20(fp)
 101d6e8:	e0bffa17 	ldw	r2,-24(fp)
 101d6ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d6f0:	e0bff817 	ldw	r2,-32(fp)
 101d6f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101d6f8:	e0bffe17 	ldw	r2,-8(fp)
 101d6fc:	10000005 	stb	zero,0(r2)
    return (len);
 101d700:	e0bffb03 	ldbu	r2,-20(fp)
 101d704:	e0bfff15 	stw	r2,-4(fp)
 101d708:	e0bfff17 	ldw	r2,-4(fp)
}
 101d70c:	e037883a 	mov	sp,fp
 101d710:	dfc00117 	ldw	ra,4(sp)
 101d714:	df000017 	ldw	fp,0(sp)
 101d718:	dec00204 	addi	sp,sp,8
 101d71c:	f800283a 	ret

0101d720 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 101d720:	defff604 	addi	sp,sp,-40
 101d724:	dfc00915 	stw	ra,36(sp)
 101d728:	df000815 	stw	fp,32(sp)
 101d72c:	df000804 	addi	fp,sp,32
 101d730:	e13ffd15 	stw	r4,-12(fp)
 101d734:	e17ffe15 	stw	r5,-8(fp)
 101d738:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101d73c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101d740:	e0bfff17 	ldw	r2,-4(fp)
 101d744:	1005003a 	cmpeq	r2,r2,zero
 101d748:	1000381e 	bne	r2,zero,101d82c <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 101d74c:	e0bffd17 	ldw	r2,-12(fp)
 101d750:	1004c03a 	cmpne	r2,r2,zero
 101d754:	1000041e 	bne	r2,zero,101d768 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 101d758:	e0ffff17 	ldw	r3,-4(fp)
 101d75c:	00801804 	movi	r2,96
 101d760:	18800005 	stb	r2,0(r3)
        return;
 101d764:	00003106 	br	101d82c <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 101d768:	e0bffe17 	ldw	r2,-8(fp)
 101d76c:	1004c03a 	cmpne	r2,r2,zero
 101d770:	1000041e 	bne	r2,zero,101d784 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 101d774:	e0ffff17 	ldw	r3,-4(fp)
 101d778:	00800304 	movi	r2,12
 101d77c:	18800005 	stb	r2,0(r3)
        return;
 101d780:	00002a06 	br	101d82c <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 101d784:	008040f4 	movhi	r2,259
 101d788:	10a42904 	addi	r2,r2,-28508
 101d78c:	10800003 	ldbu	r2,0(r2)
 101d790:	10803fcc 	andi	r2,r2,255
 101d794:	1005003a 	cmpeq	r2,r2,zero
 101d798:	1000041e 	bne	r2,zero,101d7ac <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 101d79c:	e0ffff17 	ldw	r3,-4(fp)
 101d7a0:	00800484 	movi	r2,18
 101d7a4:	18800005 	stb	r2,0(r3)
        return;
 101d7a8:	00002006 	br	101d82c <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d7ac:	0005303a 	rdctl	r2,status
 101d7b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d7b4:	e0fffa17 	ldw	r3,-24(fp)
 101d7b8:	00bfff84 	movi	r2,-2
 101d7bc:	1884703a 	and	r2,r3,r2
 101d7c0:	1001703a 	wrctl	status,r2
  
  return context;
 101d7c4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101d7c8:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 101d7cc:	e13ffe17 	ldw	r4,-8(fp)
 101d7d0:	101b3080 	call	101b308 <OS_StrLen>
 101d7d4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 101d7d8:	e0bffc03 	ldbu	r2,-16(fp)
 101d7dc:	10800830 	cmpltui	r2,r2,32
 101d7e0:	1000081e 	bne	r2,zero,101d804 <OSMemNameSet+0xe4>
 101d7e4:	e0bffb17 	ldw	r2,-20(fp)
 101d7e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d7ec:	e0bff917 	ldw	r2,-28(fp)
 101d7f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 101d7f4:	e0ffff17 	ldw	r3,-4(fp)
 101d7f8:	008018c4 	movi	r2,99
 101d7fc:	18800005 	stb	r2,0(r3)
        return;
 101d800:	00000a06 	br	101d82c <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 101d804:	e0bffd17 	ldw	r2,-12(fp)
 101d808:	11000504 	addi	r4,r2,20
 101d80c:	e17ffe17 	ldw	r5,-8(fp)
 101d810:	101b2880 	call	101b288 <OS_StrCopy>
 101d814:	e0bffb17 	ldw	r2,-20(fp)
 101d818:	e0bff815 	stw	r2,-32(fp)
 101d81c:	e0bff817 	ldw	r2,-32(fp)
 101d820:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101d824:	e0bfff17 	ldw	r2,-4(fp)
 101d828:	10000005 	stb	zero,0(r2)
}
 101d82c:	e037883a 	mov	sp,fp
 101d830:	dfc00117 	ldw	ra,4(sp)
 101d834:	df000017 	ldw	fp,0(sp)
 101d838:	dec00204 	addi	sp,sp,8
 101d83c:	f800283a 	ret

0101d840 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 101d840:	defff804 	addi	sp,sp,-32
 101d844:	df000715 	stw	fp,28(sp)
 101d848:	df000704 	addi	fp,sp,28
 101d84c:	e13ffd15 	stw	r4,-12(fp)
 101d850:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101d854:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 101d858:	e0bffd17 	ldw	r2,-12(fp)
 101d85c:	1004c03a 	cmpne	r2,r2,zero
 101d860:	1000031e 	bne	r2,zero,101d870 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 101d864:	00801804 	movi	r2,96
 101d868:	e0bfff15 	stw	r2,-4(fp)
 101d86c:	00002b06 	br	101d91c <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 101d870:	e0bffe17 	ldw	r2,-8(fp)
 101d874:	1004c03a 	cmpne	r2,r2,zero
 101d878:	1000031e 	bne	r2,zero,101d888 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 101d87c:	008017c4 	movi	r2,95
 101d880:	e0bfff15 	stw	r2,-4(fp)
 101d884:	00002506 	br	101d91c <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d888:	0005303a 	rdctl	r2,status
 101d88c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d890:	e0fffb17 	ldw	r3,-20(fp)
 101d894:	00bfff84 	movi	r2,-2
 101d898:	1884703a 	and	r2,r3,r2
 101d89c:	1001703a 	wrctl	status,r2
  
  return context;
 101d8a0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101d8a4:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 101d8a8:	e0bffd17 	ldw	r2,-12(fp)
 101d8ac:	10c00417 	ldw	r3,16(r2)
 101d8b0:	e0bffd17 	ldw	r2,-12(fp)
 101d8b4:	10800317 	ldw	r2,12(r2)
 101d8b8:	18800736 	bltu	r3,r2,101d8d8 <OSMemPut+0x98>
 101d8bc:	e0bffc17 	ldw	r2,-16(fp)
 101d8c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d8c4:	e0bffa17 	ldw	r2,-24(fp)
 101d8c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 101d8cc:	00801784 	movi	r2,94
 101d8d0:	e0bfff15 	stw	r2,-4(fp)
 101d8d4:	00001106 	br	101d91c <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 101d8d8:	e0fffe17 	ldw	r3,-8(fp)
 101d8dc:	e0bffd17 	ldw	r2,-12(fp)
 101d8e0:	10800117 	ldw	r2,4(r2)
 101d8e4:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 101d8e8:	e0fffd17 	ldw	r3,-12(fp)
 101d8ec:	e0bffe17 	ldw	r2,-8(fp)
 101d8f0:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 101d8f4:	e0bffd17 	ldw	r2,-12(fp)
 101d8f8:	10800417 	ldw	r2,16(r2)
 101d8fc:	10c00044 	addi	r3,r2,1
 101d900:	e0bffd17 	ldw	r2,-12(fp)
 101d904:	10c00415 	stw	r3,16(r2)
 101d908:	e0bffc17 	ldw	r2,-16(fp)
 101d90c:	e0bff915 	stw	r2,-28(fp)
 101d910:	e0bff917 	ldw	r2,-28(fp)
 101d914:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 101d918:	e03fff15 	stw	zero,-4(fp)
 101d91c:	e0bfff17 	ldw	r2,-4(fp)
}
 101d920:	e037883a 	mov	sp,fp
 101d924:	df000017 	ldw	fp,0(sp)
 101d928:	dec00104 	addi	sp,sp,4
 101d92c:	f800283a 	ret

0101d930 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 101d930:	defff904 	addi	sp,sp,-28
 101d934:	df000615 	stw	fp,24(sp)
 101d938:	df000604 	addi	fp,sp,24
 101d93c:	e13ffd15 	stw	r4,-12(fp)
 101d940:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101d944:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 101d948:	e0bffd17 	ldw	r2,-12(fp)
 101d94c:	1004c03a 	cmpne	r2,r2,zero
 101d950:	1000031e 	bne	r2,zero,101d960 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 101d954:	00801804 	movi	r2,96
 101d958:	e0bfff15 	stw	r2,-4(fp)
 101d95c:	00002e06 	br	101da18 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 101d960:	e0bffe17 	ldw	r2,-8(fp)
 101d964:	1004c03a 	cmpne	r2,r2,zero
 101d968:	1000031e 	bne	r2,zero,101d978 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 101d96c:	00801844 	movi	r2,97
 101d970:	e0bfff15 	stw	r2,-4(fp)
 101d974:	00002806 	br	101da18 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d978:	0005303a 	rdctl	r2,status
 101d97c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d980:	e0fffb17 	ldw	r3,-20(fp)
 101d984:	00bfff84 	movi	r2,-2
 101d988:	1884703a 	and	r2,r3,r2
 101d98c:	1001703a 	wrctl	status,r2
  
  return context;
 101d990:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101d994:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 101d998:	e0bffd17 	ldw	r2,-12(fp)
 101d99c:	10c00017 	ldw	r3,0(r2)
 101d9a0:	e0bffe17 	ldw	r2,-8(fp)
 101d9a4:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 101d9a8:	e0bffd17 	ldw	r2,-12(fp)
 101d9ac:	10c00117 	ldw	r3,4(r2)
 101d9b0:	e0bffe17 	ldw	r2,-8(fp)
 101d9b4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 101d9b8:	e0bffd17 	ldw	r2,-12(fp)
 101d9bc:	10c00217 	ldw	r3,8(r2)
 101d9c0:	e0bffe17 	ldw	r2,-8(fp)
 101d9c4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 101d9c8:	e0bffd17 	ldw	r2,-12(fp)
 101d9cc:	10c00317 	ldw	r3,12(r2)
 101d9d0:	e0bffe17 	ldw	r2,-8(fp)
 101d9d4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 101d9d8:	e0bffd17 	ldw	r2,-12(fp)
 101d9dc:	10c00417 	ldw	r3,16(r2)
 101d9e0:	e0bffe17 	ldw	r2,-8(fp)
 101d9e4:	10c00415 	stw	r3,16(r2)
 101d9e8:	e0bffc17 	ldw	r2,-16(fp)
 101d9ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d9f0:	e0bffa17 	ldw	r2,-24(fp)
 101d9f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 101d9f8:	e0bffe17 	ldw	r2,-8(fp)
 101d9fc:	10c00317 	ldw	r3,12(r2)
 101da00:	e0bffe17 	ldw	r2,-8(fp)
 101da04:	10800417 	ldw	r2,16(r2)
 101da08:	1887c83a 	sub	r3,r3,r2
 101da0c:	e0bffe17 	ldw	r2,-8(fp)
 101da10:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 101da14:	e03fff15 	stw	zero,-4(fp)
 101da18:	e0bfff17 	ldw	r2,-4(fp)
}
 101da1c:	e037883a 	mov	sp,fp
 101da20:	df000017 	ldw	fp,0(sp)
 101da24:	dec00104 	addi	sp,sp,4
 101da28:	f800283a 	ret

0101da2c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 101da2c:	defffc04 	addi	sp,sp,-16
 101da30:	dfc00315 	stw	ra,12(sp)
 101da34:	df000215 	stw	fp,8(sp)
 101da38:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 101da3c:	010040f4 	movhi	r4,259
 101da40:	211f1c04 	addi	r4,r4,31856
 101da44:	01430c04 	movi	r5,3120
 101da48:	101b0840 	call	101b084 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 101da4c:	008040f4 	movhi	r2,259
 101da50:	109f1c04 	addi	r2,r2,31856
 101da54:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 101da58:	e03ffe0d 	sth	zero,-8(fp)
 101da5c:	00001406 	br	101dab0 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 101da60:	e13ffe0b 	ldhu	r4,-8(fp)
 101da64:	01400d04 	movi	r5,52
 101da68:	100def40 	call	100def4 <__mulsi3>
 101da6c:	1007883a 	mov	r3,r2
 101da70:	008040f4 	movhi	r2,259
 101da74:	109f2904 	addi	r2,r2,31908
 101da78:	1887883a 	add	r3,r3,r2
 101da7c:	e0bfff17 	ldw	r2,-4(fp)
 101da80:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 101da84:	e0ffff17 	ldw	r3,-4(fp)
 101da88:	00800fc4 	movi	r2,63
 101da8c:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 101da90:	e0bfff17 	ldw	r2,-4(fp)
 101da94:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 101da98:	e0bfff17 	ldw	r2,-4(fp)
 101da9c:	10800d04 	addi	r2,r2,52
 101daa0:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 101daa4:	e0bffe0b 	ldhu	r2,-8(fp)
 101daa8:	10800044 	addi	r2,r2,1
 101daac:	e0bffe0d 	sth	r2,-8(fp)
 101dab0:	e0bffe0b 	ldhu	r2,-8(fp)
 101dab4:	10800ef0 	cmpltui	r2,r2,59
 101dab8:	103fe91e 	bne	r2,zero,101da60 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 101dabc:	e0bfff17 	ldw	r2,-4(fp)
 101dac0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 101dac4:	e0ffff17 	ldw	r3,-4(fp)
 101dac8:	00800fc4 	movi	r2,63
 101dacc:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 101dad0:	e0bfff17 	ldw	r2,-4(fp)
 101dad4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 101dad8:	00c040f4 	movhi	r3,259
 101dadc:	18e42404 	addi	r3,r3,-28528
 101dae0:	008040f4 	movhi	r2,259
 101dae4:	109f1c04 	addi	r2,r2,31856
 101dae8:	18800015 	stw	r2,0(r3)
#endif
}
 101daec:	e037883a 	mov	sp,fp
 101daf0:	dfc00117 	ldw	ra,4(sp)
 101daf4:	df000017 	ldw	fp,0(sp)
 101daf8:	dec00204 	addi	sp,sp,8
 101dafc:	f800283a 	ret

0101db00 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 101db00:	defff704 	addi	sp,sp,-36
 101db04:	df000815 	stw	fp,32(sp)
 101db08:	df000804 	addi	fp,sp,32
 101db0c:	e13ffd15 	stw	r4,-12(fp)
 101db10:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101db14:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101db18:	e0bffe17 	ldw	r2,-8(fp)
 101db1c:	1004c03a 	cmpne	r2,r2,zero
 101db20:	1000021e 	bne	r2,zero,101db2c <OSQAccept+0x2c>
        return ((void *)0);
 101db24:	e03fff15 	stw	zero,-4(fp)
 101db28:	00004506 	br	101dc40 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 101db2c:	e0bffd17 	ldw	r2,-12(fp)
 101db30:	1004c03a 	cmpne	r2,r2,zero
 101db34:	1000051e 	bne	r2,zero,101db4c <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 101db38:	e0fffe17 	ldw	r3,-8(fp)
 101db3c:	00800104 	movi	r2,4
 101db40:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101db44:	e03fff15 	stw	zero,-4(fp)
 101db48:	00003d06 	br	101dc40 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 101db4c:	e0bffd17 	ldw	r2,-12(fp)
 101db50:	10800003 	ldbu	r2,0(r2)
 101db54:	10803fcc 	andi	r2,r2,255
 101db58:	108000a0 	cmpeqi	r2,r2,2
 101db5c:	1000051e 	bne	r2,zero,101db74 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 101db60:	e0fffe17 	ldw	r3,-8(fp)
 101db64:	00800044 	movi	r2,1
 101db68:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101db6c:	e03fff15 	stw	zero,-4(fp)
 101db70:	00003306 	br	101dc40 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101db74:	0005303a 	rdctl	r2,status
 101db78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101db7c:	e0fff917 	ldw	r3,-28(fp)
 101db80:	00bfff84 	movi	r2,-2
 101db84:	1884703a 	and	r2,r3,r2
 101db88:	1001703a 	wrctl	status,r2
  
  return context;
 101db8c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101db90:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 101db94:	e0bffd17 	ldw	r2,-12(fp)
 101db98:	10800117 	ldw	r2,4(r2)
 101db9c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 101dba0:	e0bffb17 	ldw	r2,-20(fp)
 101dba4:	1080058b 	ldhu	r2,22(r2)
 101dba8:	10bfffcc 	andi	r2,r2,65535
 101dbac:	1005003a 	cmpeq	r2,r2,zero
 101dbb0:	1000191e 	bne	r2,zero,101dc18 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 101dbb4:	e0bffb17 	ldw	r2,-20(fp)
 101dbb8:	10c00417 	ldw	r3,16(r2)
 101dbbc:	18800017 	ldw	r2,0(r3)
 101dbc0:	e0bffc15 	stw	r2,-16(fp)
 101dbc4:	18c00104 	addi	r3,r3,4
 101dbc8:	e0bffb17 	ldw	r2,-20(fp)
 101dbcc:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 101dbd0:	e0bffb17 	ldw	r2,-20(fp)
 101dbd4:	1080058b 	ldhu	r2,22(r2)
 101dbd8:	10bfffc4 	addi	r2,r2,-1
 101dbdc:	1007883a 	mov	r3,r2
 101dbe0:	e0bffb17 	ldw	r2,-20(fp)
 101dbe4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 101dbe8:	e0bffb17 	ldw	r2,-20(fp)
 101dbec:	10c00417 	ldw	r3,16(r2)
 101dbf0:	e0bffb17 	ldw	r2,-20(fp)
 101dbf4:	10800217 	ldw	r2,8(r2)
 101dbf8:	1880041e 	bne	r3,r2,101dc0c <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 101dbfc:	e0bffb17 	ldw	r2,-20(fp)
 101dc00:	10c00117 	ldw	r3,4(r2)
 101dc04:	e0bffb17 	ldw	r2,-20(fp)
 101dc08:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 101dc0c:	e0bffe17 	ldw	r2,-8(fp)
 101dc10:	10000005 	stb	zero,0(r2)
 101dc14:	00000406 	br	101dc28 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 101dc18:	e0fffe17 	ldw	r3,-8(fp)
 101dc1c:	008007c4 	movi	r2,31
 101dc20:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 101dc24:	e03ffc15 	stw	zero,-16(fp)
 101dc28:	e0bffa17 	ldw	r2,-24(fp)
 101dc2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101dc30:	e0bff817 	ldw	r2,-32(fp)
 101dc34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 101dc38:	e0bffc17 	ldw	r2,-16(fp)
 101dc3c:	e0bfff15 	stw	r2,-4(fp)
 101dc40:	e0bfff17 	ldw	r2,-4(fp)
}
 101dc44:	e037883a 	mov	sp,fp
 101dc48:	df000017 	ldw	fp,0(sp)
 101dc4c:	dec00104 	addi	sp,sp,4
 101dc50:	f800283a 	ret

0101dc54 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 101dc54:	defff304 	addi	sp,sp,-52
 101dc58:	dfc00c15 	stw	ra,48(sp)
 101dc5c:	df000b15 	stw	fp,44(sp)
 101dc60:	df000b04 	addi	fp,sp,44
 101dc64:	e13ffd15 	stw	r4,-12(fp)
 101dc68:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101dc6c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 101dc70:	008040f4 	movhi	r2,259
 101dc74:	10a42904 	addi	r2,r2,-28508
 101dc78:	10800003 	ldbu	r2,0(r2)
 101dc7c:	10803fcc 	andi	r2,r2,255
 101dc80:	1005003a 	cmpeq	r2,r2,zero
 101dc84:	1000021e 	bne	r2,zero,101dc90 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 101dc88:	e03fff15 	stw	zero,-4(fp)
 101dc8c:	00007006 	br	101de50 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101dc90:	0005303a 	rdctl	r2,status
 101dc94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101dc98:	e0fff917 	ldw	r3,-28(fp)
 101dc9c:	00bfff84 	movi	r2,-2
 101dca0:	1884703a 	and	r2,r3,r2
 101dca4:	1001703a 	wrctl	status,r2
  
  return context;
 101dca8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101dcac:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 101dcb0:	008040f4 	movhi	r2,259
 101dcb4:	10a42804 	addi	r2,r2,-28512
 101dcb8:	10800017 	ldw	r2,0(r2)
 101dcbc:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 101dcc0:	008040f4 	movhi	r2,259
 101dcc4:	10a42804 	addi	r2,r2,-28512
 101dcc8:	10800017 	ldw	r2,0(r2)
 101dccc:	1005003a 	cmpeq	r2,r2,zero
 101dcd0:	1000081e 	bne	r2,zero,101dcf4 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 101dcd4:	008040f4 	movhi	r2,259
 101dcd8:	10a42804 	addi	r2,r2,-28512
 101dcdc:	10800017 	ldw	r2,0(r2)
 101dce0:	10800117 	ldw	r2,4(r2)
 101dce4:	1007883a 	mov	r3,r2
 101dce8:	008040f4 	movhi	r2,259
 101dcec:	10a42804 	addi	r2,r2,-28512
 101dcf0:	10c00015 	stw	r3,0(r2)
 101dcf4:	e0bffa17 	ldw	r2,-24(fp)
 101dcf8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101dcfc:	e0bff817 	ldw	r2,-32(fp)
 101dd00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 101dd04:	e0bffc17 	ldw	r2,-16(fp)
 101dd08:	1005003a 	cmpeq	r2,r2,zero
 101dd0c:	10004e1e 	bne	r2,zero,101de48 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101dd10:	0005303a 	rdctl	r2,status
 101dd14:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101dd18:	e0fff717 	ldw	r3,-36(fp)
 101dd1c:	00bfff84 	movi	r2,-2
 101dd20:	1884703a 	and	r2,r3,r2
 101dd24:	1001703a 	wrctl	status,r2
  
  return context;
 101dd28:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 101dd2c:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 101dd30:	008040f4 	movhi	r2,259
 101dd34:	10a42604 	addi	r2,r2,-28520
 101dd38:	10800017 	ldw	r2,0(r2)
 101dd3c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 101dd40:	e0bffb17 	ldw	r2,-20(fp)
 101dd44:	1005003a 	cmpeq	r2,r2,zero
 101dd48:	1000311e 	bne	r2,zero,101de10 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 101dd4c:	008040f4 	movhi	r2,259
 101dd50:	10a42604 	addi	r2,r2,-28520
 101dd54:	10800017 	ldw	r2,0(r2)
 101dd58:	10c00017 	ldw	r3,0(r2)
 101dd5c:	008040f4 	movhi	r2,259
 101dd60:	10a42604 	addi	r2,r2,-28520
 101dd64:	10c00015 	stw	r3,0(r2)
 101dd68:	e0bffa17 	ldw	r2,-24(fp)
 101dd6c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101dd70:	e0bff617 	ldw	r2,-40(fp)
 101dd74:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 101dd78:	e0fffb17 	ldw	r3,-20(fp)
 101dd7c:	e0bffd17 	ldw	r2,-12(fp)
 101dd80:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 101dd84:	e0bffe0b 	ldhu	r2,-8(fp)
 101dd88:	1085883a 	add	r2,r2,r2
 101dd8c:	1085883a 	add	r2,r2,r2
 101dd90:	1007883a 	mov	r3,r2
 101dd94:	e0bffd17 	ldw	r2,-12(fp)
 101dd98:	1887883a 	add	r3,r3,r2
 101dd9c:	e0bffb17 	ldw	r2,-20(fp)
 101dda0:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 101dda4:	e0fffb17 	ldw	r3,-20(fp)
 101dda8:	e0bffd17 	ldw	r2,-12(fp)
 101ddac:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 101ddb0:	e0fffb17 	ldw	r3,-20(fp)
 101ddb4:	e0bffd17 	ldw	r2,-12(fp)
 101ddb8:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 101ddbc:	e0fffb17 	ldw	r3,-20(fp)
 101ddc0:	e0bffe0b 	ldhu	r2,-8(fp)
 101ddc4:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 101ddc8:	e0bffb17 	ldw	r2,-20(fp)
 101ddcc:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 101ddd0:	e0fffc17 	ldw	r3,-16(fp)
 101ddd4:	00800084 	movi	r2,2
 101ddd8:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 101dddc:	e0bffc17 	ldw	r2,-16(fp)
 101dde0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 101dde4:	e0fffc17 	ldw	r3,-16(fp)
 101dde8:	e0bffb17 	ldw	r2,-20(fp)
 101ddec:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 101ddf0:	e0fffc17 	ldw	r3,-16(fp)
 101ddf4:	00800fc4 	movi	r2,63
 101ddf8:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 101ddfc:	e0bffc17 	ldw	r2,-16(fp)
 101de00:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 101de04:	e13ffc17 	ldw	r4,-16(fp)
 101de08:	101acb80 	call	101acb8 <OS_EventWaitListInit>
 101de0c:	00000e06 	br	101de48 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 101de10:	008040f4 	movhi	r2,259
 101de14:	10a42804 	addi	r2,r2,-28512
 101de18:	10c00017 	ldw	r3,0(r2)
 101de1c:	e0bffc17 	ldw	r2,-16(fp)
 101de20:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 101de24:	00c040f4 	movhi	r3,259
 101de28:	18e42804 	addi	r3,r3,-28512
 101de2c:	e0bffc17 	ldw	r2,-16(fp)
 101de30:	18800015 	stw	r2,0(r3)
 101de34:	e0bffa17 	ldw	r2,-24(fp)
 101de38:	e0bff515 	stw	r2,-44(fp)
 101de3c:	e0bff517 	ldw	r2,-44(fp)
 101de40:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 101de44:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 101de48:	e0bffc17 	ldw	r2,-16(fp)
 101de4c:	e0bfff15 	stw	r2,-4(fp)
 101de50:	e0bfff17 	ldw	r2,-4(fp)
}
 101de54:	e037883a 	mov	sp,fp
 101de58:	dfc00117 	ldw	ra,4(sp)
 101de5c:	df000017 	ldw	fp,0(sp)
 101de60:	dec00204 	addi	sp,sp,8
 101de64:	f800283a 	ret

0101de68 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 101de68:	defff004 	addi	sp,sp,-64
 101de6c:	dfc00f15 	stw	ra,60(sp)
 101de70:	df000e15 	stw	fp,56(sp)
 101de74:	df000e04 	addi	fp,sp,56
 101de78:	e13ffb15 	stw	r4,-20(fp)
 101de7c:	e1bffd15 	stw	r6,-12(fp)
 101de80:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101de84:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 101de88:	e0bffd17 	ldw	r2,-12(fp)
 101de8c:	1004c03a 	cmpne	r2,r2,zero
 101de90:	1000031e 	bne	r2,zero,101dea0 <OSQDel+0x38>
        return (pevent);
 101de94:	e0bffb17 	ldw	r2,-20(fp)
 101de98:	e0bfff15 	stw	r2,-4(fp)
 101de9c:	0000ac06 	br	101e150 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 101dea0:	e0bffb17 	ldw	r2,-20(fp)
 101dea4:	1004c03a 	cmpne	r2,r2,zero
 101dea8:	1000061e 	bne	r2,zero,101dec4 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 101deac:	e0fffd17 	ldw	r3,-12(fp)
 101deb0:	00800104 	movi	r2,4
 101deb4:	18800005 	stb	r2,0(r3)
        return (pevent);
 101deb8:	e0fffb17 	ldw	r3,-20(fp)
 101debc:	e0ffff15 	stw	r3,-4(fp)
 101dec0:	0000a306 	br	101e150 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 101dec4:	e0bffb17 	ldw	r2,-20(fp)
 101dec8:	10800003 	ldbu	r2,0(r2)
 101decc:	10803fcc 	andi	r2,r2,255
 101ded0:	108000a0 	cmpeqi	r2,r2,2
 101ded4:	1000061e 	bne	r2,zero,101def0 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 101ded8:	e0fffd17 	ldw	r3,-12(fp)
 101dedc:	00800044 	movi	r2,1
 101dee0:	18800005 	stb	r2,0(r3)
        return (pevent);
 101dee4:	e0bffb17 	ldw	r2,-20(fp)
 101dee8:	e0bfff15 	stw	r2,-4(fp)
 101deec:	00009806 	br	101e150 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 101def0:	008040f4 	movhi	r2,259
 101def4:	10a42904 	addi	r2,r2,-28508
 101def8:	10800003 	ldbu	r2,0(r2)
 101defc:	10803fcc 	andi	r2,r2,255
 101df00:	1005003a 	cmpeq	r2,r2,zero
 101df04:	1000061e 	bne	r2,zero,101df20 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 101df08:	e0fffd17 	ldw	r3,-12(fp)
 101df0c:	008003c4 	movi	r2,15
 101df10:	18800005 	stb	r2,0(r3)
        return (pevent);
 101df14:	e0fffb17 	ldw	r3,-20(fp)
 101df18:	e0ffff15 	stw	r3,-4(fp)
 101df1c:	00008c06 	br	101e150 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101df20:	0005303a 	rdctl	r2,status
 101df24:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101df28:	e0fff617 	ldw	r3,-40(fp)
 101df2c:	00bfff84 	movi	r2,-2
 101df30:	1884703a 	and	r2,r3,r2
 101df34:	1001703a 	wrctl	status,r2
  
  return context;
 101df38:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 101df3c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 101df40:	e0bffb17 	ldw	r2,-20(fp)
 101df44:	10800283 	ldbu	r2,10(r2)
 101df48:	10803fcc 	andi	r2,r2,255
 101df4c:	1005003a 	cmpeq	r2,r2,zero
 101df50:	1000031e 	bne	r2,zero,101df60 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 101df54:	00800044 	movi	r2,1
 101df58:	e0bffa05 	stb	r2,-24(fp)
 101df5c:	00000106 	br	101df64 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 101df60:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 101df64:	e0bffc03 	ldbu	r2,-16(fp)
 101df68:	e0bffe15 	stw	r2,-8(fp)
 101df6c:	e0fffe17 	ldw	r3,-8(fp)
 101df70:	1805003a 	cmpeq	r2,r3,zero
 101df74:	1000041e 	bne	r2,zero,101df88 <OSQDel+0x120>
 101df78:	e0fffe17 	ldw	r3,-8(fp)
 101df7c:	18800060 	cmpeqi	r2,r3,1
 101df80:	1000391e 	bne	r2,zero,101e068 <OSQDel+0x200>
 101df84:	00006706 	br	101e124 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 101df88:	e0bffa03 	ldbu	r2,-24(fp)
 101df8c:	1004c03a 	cmpne	r2,r2,zero
 101df90:	1000261e 	bne	r2,zero,101e02c <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 101df94:	e0fffb17 	ldw	r3,-20(fp)
 101df98:	00800fc4 	movi	r2,63
 101df9c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 101dfa0:	e0bffb17 	ldw	r2,-20(fp)
 101dfa4:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 101dfa8:	e0bffb17 	ldw	r2,-20(fp)
 101dfac:	10800117 	ldw	r2,4(r2)
 101dfb0:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 101dfb4:	008040f4 	movhi	r2,259
 101dfb8:	10a42604 	addi	r2,r2,-28520
 101dfbc:	10c00017 	ldw	r3,0(r2)
 101dfc0:	e0bff817 	ldw	r2,-32(fp)
 101dfc4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 101dfc8:	00c040f4 	movhi	r3,259
 101dfcc:	18e42604 	addi	r3,r3,-28520
 101dfd0:	e0bff817 	ldw	r2,-32(fp)
 101dfd4:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 101dfd8:	e0bffb17 	ldw	r2,-20(fp)
 101dfdc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 101dfe0:	008040f4 	movhi	r2,259
 101dfe4:	10a42804 	addi	r2,r2,-28512
 101dfe8:	10c00017 	ldw	r3,0(r2)
 101dfec:	e0bffb17 	ldw	r2,-20(fp)
 101dff0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 101dff4:	e0bffb17 	ldw	r2,-20(fp)
 101dff8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 101dffc:	00c040f4 	movhi	r3,259
 101e000:	18e42804 	addi	r3,r3,-28512
 101e004:	e0bffb17 	ldw	r2,-20(fp)
 101e008:	18800015 	stw	r2,0(r3)
 101e00c:	e0bff717 	ldw	r2,-36(fp)
 101e010:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e014:	e0bff517 	ldw	r2,-44(fp)
 101e018:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 101e01c:	e0bffd17 	ldw	r2,-12(fp)
 101e020:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 101e024:	e03ff915 	stw	zero,-28(fp)
 101e028:	00004706 	br	101e148 <OSQDel+0x2e0>
 101e02c:	e0bff717 	ldw	r2,-36(fp)
 101e030:	e0bff415 	stw	r2,-48(fp)
 101e034:	e0bff417 	ldw	r2,-48(fp)
 101e038:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 101e03c:	e0fffd17 	ldw	r3,-12(fp)
 101e040:	00801244 	movi	r2,73
 101e044:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 101e048:	e0bffb17 	ldw	r2,-20(fp)
 101e04c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 101e050:	00003d06 	br	101e148 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 101e054:	e13ffb17 	ldw	r4,-20(fp)
 101e058:	000b883a 	mov	r5,zero
 101e05c:	01800104 	movi	r6,4
 101e060:	000f883a 	mov	r7,zero
 101e064:	101a7040 	call	101a704 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 101e068:	e0bffb17 	ldw	r2,-20(fp)
 101e06c:	10800283 	ldbu	r2,10(r2)
 101e070:	10803fcc 	andi	r2,r2,255
 101e074:	1004c03a 	cmpne	r2,r2,zero
 101e078:	103ff61e 	bne	r2,zero,101e054 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 101e07c:	e0fffb17 	ldw	r3,-20(fp)
 101e080:	00800fc4 	movi	r2,63
 101e084:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 101e088:	e0bffb17 	ldw	r2,-20(fp)
 101e08c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 101e090:	e0bffb17 	ldw	r2,-20(fp)
 101e094:	10800117 	ldw	r2,4(r2)
 101e098:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 101e09c:	008040f4 	movhi	r2,259
 101e0a0:	10a42604 	addi	r2,r2,-28520
 101e0a4:	10c00017 	ldw	r3,0(r2)
 101e0a8:	e0bff817 	ldw	r2,-32(fp)
 101e0ac:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 101e0b0:	00c040f4 	movhi	r3,259
 101e0b4:	18e42604 	addi	r3,r3,-28520
 101e0b8:	e0bff817 	ldw	r2,-32(fp)
 101e0bc:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 101e0c0:	e0bffb17 	ldw	r2,-20(fp)
 101e0c4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 101e0c8:	008040f4 	movhi	r2,259
 101e0cc:	10a42804 	addi	r2,r2,-28512
 101e0d0:	10c00017 	ldw	r3,0(r2)
 101e0d4:	e0bffb17 	ldw	r2,-20(fp)
 101e0d8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 101e0dc:	e0bffb17 	ldw	r2,-20(fp)
 101e0e0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 101e0e4:	00c040f4 	movhi	r3,259
 101e0e8:	18e42804 	addi	r3,r3,-28512
 101e0ec:	e0bffb17 	ldw	r2,-20(fp)
 101e0f0:	18800015 	stw	r2,0(r3)
 101e0f4:	e0bff717 	ldw	r2,-36(fp)
 101e0f8:	e0bff315 	stw	r2,-52(fp)
 101e0fc:	e0bff317 	ldw	r2,-52(fp)
 101e100:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 101e104:	e0bffa03 	ldbu	r2,-24(fp)
 101e108:	10800058 	cmpnei	r2,r2,1
 101e10c:	1000011e 	bne	r2,zero,101e114 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 101e110:	101b1440 	call	101b144 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 101e114:	e0bffd17 	ldw	r2,-12(fp)
 101e118:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 101e11c:	e03ff915 	stw	zero,-28(fp)
             break;
 101e120:	00000906 	br	101e148 <OSQDel+0x2e0>
 101e124:	e0bff717 	ldw	r2,-36(fp)
 101e128:	e0bff215 	stw	r2,-56(fp)
 101e12c:	e0bff217 	ldw	r2,-56(fp)
 101e130:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 101e134:	e0fffd17 	ldw	r3,-12(fp)
 101e138:	008001c4 	movi	r2,7
 101e13c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 101e140:	e0bffb17 	ldw	r2,-20(fp)
 101e144:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 101e148:	e0bff917 	ldw	r2,-28(fp)
 101e14c:	e0bfff15 	stw	r2,-4(fp)
 101e150:	e0bfff17 	ldw	r2,-4(fp)
}
 101e154:	e037883a 	mov	sp,fp
 101e158:	dfc00117 	ldw	ra,4(sp)
 101e15c:	df000017 	ldw	fp,0(sp)
 101e160:	dec00204 	addi	sp,sp,8
 101e164:	f800283a 	ret

0101e168 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 101e168:	defff904 	addi	sp,sp,-28
 101e16c:	df000615 	stw	fp,24(sp)
 101e170:	df000604 	addi	fp,sp,24
 101e174:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101e178:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101e17c:	e0bffe17 	ldw	r2,-8(fp)
 101e180:	1004c03a 	cmpne	r2,r2,zero
 101e184:	1000031e 	bne	r2,zero,101e194 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 101e188:	00800104 	movi	r2,4
 101e18c:	e0bfff15 	stw	r2,-4(fp)
 101e190:	00002206 	br	101e21c <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 101e194:	e0bffe17 	ldw	r2,-8(fp)
 101e198:	10800003 	ldbu	r2,0(r2)
 101e19c:	10803fcc 	andi	r2,r2,255
 101e1a0:	108000a0 	cmpeqi	r2,r2,2
 101e1a4:	1000031e 	bne	r2,zero,101e1b4 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 101e1a8:	00800044 	movi	r2,1
 101e1ac:	e0bfff15 	stw	r2,-4(fp)
 101e1b0:	00001a06 	br	101e21c <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e1b4:	0005303a 	rdctl	r2,status
 101e1b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e1bc:	e0fffb17 	ldw	r3,-20(fp)
 101e1c0:	00bfff84 	movi	r2,-2
 101e1c4:	1884703a 	and	r2,r3,r2
 101e1c8:	1001703a 	wrctl	status,r2
  
  return context;
 101e1cc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101e1d0:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 101e1d4:	e0bffe17 	ldw	r2,-8(fp)
 101e1d8:	10800117 	ldw	r2,4(r2)
 101e1dc:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 101e1e0:	e0bffd17 	ldw	r2,-12(fp)
 101e1e4:	10c00117 	ldw	r3,4(r2)
 101e1e8:	e0bffd17 	ldw	r2,-12(fp)
 101e1ec:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 101e1f0:	e0bffd17 	ldw	r2,-12(fp)
 101e1f4:	10c00117 	ldw	r3,4(r2)
 101e1f8:	e0bffd17 	ldw	r2,-12(fp)
 101e1fc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 101e200:	e0bffd17 	ldw	r2,-12(fp)
 101e204:	1000058d 	sth	zero,22(r2)
 101e208:	e0bffc17 	ldw	r2,-16(fp)
 101e20c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e210:	e0bffa17 	ldw	r2,-24(fp)
 101e214:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101e218:	e03fff15 	stw	zero,-4(fp)
 101e21c:	e0bfff17 	ldw	r2,-4(fp)
}
 101e220:	e037883a 	mov	sp,fp
 101e224:	df000017 	ldw	fp,0(sp)
 101e228:	dec00104 	addi	sp,sp,4
 101e22c:	f800283a 	ret

0101e230 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 101e230:	defff104 	addi	sp,sp,-60
 101e234:	dfc00e15 	stw	ra,56(sp)
 101e238:	df000d15 	stw	fp,52(sp)
 101e23c:	df000d04 	addi	fp,sp,52
 101e240:	e13ffb15 	stw	r4,-20(fp)
 101e244:	e1bffd15 	stw	r6,-12(fp)
 101e248:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101e24c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101e250:	e0bffd17 	ldw	r2,-12(fp)
 101e254:	1004c03a 	cmpne	r2,r2,zero
 101e258:	1000021e 	bne	r2,zero,101e264 <OSQPend+0x34>
        return ((void *)0);
 101e25c:	e03fff15 	stw	zero,-4(fp)
 101e260:	0000b506 	br	101e538 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 101e264:	e0bffb17 	ldw	r2,-20(fp)
 101e268:	1004c03a 	cmpne	r2,r2,zero
 101e26c:	1000051e 	bne	r2,zero,101e284 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 101e270:	e0fffd17 	ldw	r3,-12(fp)
 101e274:	00800104 	movi	r2,4
 101e278:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101e27c:	e03fff15 	stw	zero,-4(fp)
 101e280:	0000ad06 	br	101e538 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 101e284:	e0bffb17 	ldw	r2,-20(fp)
 101e288:	10800003 	ldbu	r2,0(r2)
 101e28c:	10803fcc 	andi	r2,r2,255
 101e290:	108000a0 	cmpeqi	r2,r2,2
 101e294:	1000051e 	bne	r2,zero,101e2ac <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 101e298:	e0fffd17 	ldw	r3,-12(fp)
 101e29c:	00800044 	movi	r2,1
 101e2a0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101e2a4:	e03fff15 	stw	zero,-4(fp)
 101e2a8:	0000a306 	br	101e538 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 101e2ac:	008040f4 	movhi	r2,259
 101e2b0:	10a42904 	addi	r2,r2,-28508
 101e2b4:	10800003 	ldbu	r2,0(r2)
 101e2b8:	10803fcc 	andi	r2,r2,255
 101e2bc:	1005003a 	cmpeq	r2,r2,zero
 101e2c0:	1000051e 	bne	r2,zero,101e2d8 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 101e2c4:	e0fffd17 	ldw	r3,-12(fp)
 101e2c8:	00800084 	movi	r2,2
 101e2cc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101e2d0:	e03fff15 	stw	zero,-4(fp)
 101e2d4:	00009806 	br	101e538 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 101e2d8:	008040f4 	movhi	r2,259
 101e2dc:	10a41b04 	addi	r2,r2,-28564
 101e2e0:	10800003 	ldbu	r2,0(r2)
 101e2e4:	10803fcc 	andi	r2,r2,255
 101e2e8:	1005003a 	cmpeq	r2,r2,zero
 101e2ec:	1000051e 	bne	r2,zero,101e304 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 101e2f0:	e0fffd17 	ldw	r3,-12(fp)
 101e2f4:	00800344 	movi	r2,13
 101e2f8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101e2fc:	e03fff15 	stw	zero,-4(fp)
 101e300:	00008d06 	br	101e538 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e304:	0005303a 	rdctl	r2,status
 101e308:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e30c:	e0fff717 	ldw	r3,-36(fp)
 101e310:	00bfff84 	movi	r2,-2
 101e314:	1884703a 	and	r2,r3,r2
 101e318:	1001703a 	wrctl	status,r2
  
  return context;
 101e31c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 101e320:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 101e324:	e0bffb17 	ldw	r2,-20(fp)
 101e328:	10800117 	ldw	r2,4(r2)
 101e32c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 101e330:	e0bff917 	ldw	r2,-28(fp)
 101e334:	1080058b 	ldhu	r2,22(r2)
 101e338:	10bfffcc 	andi	r2,r2,65535
 101e33c:	1005003a 	cmpeq	r2,r2,zero
 101e340:	10001f1e 	bne	r2,zero,101e3c0 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 101e344:	e0bff917 	ldw	r2,-28(fp)
 101e348:	10c00417 	ldw	r3,16(r2)
 101e34c:	18800017 	ldw	r2,0(r3)
 101e350:	e0bffa15 	stw	r2,-24(fp)
 101e354:	18c00104 	addi	r3,r3,4
 101e358:	e0bff917 	ldw	r2,-28(fp)
 101e35c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 101e360:	e0bff917 	ldw	r2,-28(fp)
 101e364:	1080058b 	ldhu	r2,22(r2)
 101e368:	10bfffc4 	addi	r2,r2,-1
 101e36c:	1007883a 	mov	r3,r2
 101e370:	e0bff917 	ldw	r2,-28(fp)
 101e374:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 101e378:	e0bff917 	ldw	r2,-28(fp)
 101e37c:	10c00417 	ldw	r3,16(r2)
 101e380:	e0bff917 	ldw	r2,-28(fp)
 101e384:	10800217 	ldw	r2,8(r2)
 101e388:	1880041e 	bne	r3,r2,101e39c <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 101e38c:	e0bff917 	ldw	r2,-28(fp)
 101e390:	10c00117 	ldw	r3,4(r2)
 101e394:	e0bff917 	ldw	r2,-28(fp)
 101e398:	10c00415 	stw	r3,16(r2)
 101e39c:	e0bff817 	ldw	r2,-32(fp)
 101e3a0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e3a4:	e0bff617 	ldw	r2,-40(fp)
 101e3a8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 101e3ac:	e0bffd17 	ldw	r2,-12(fp)
 101e3b0:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 101e3b4:	e0bffa17 	ldw	r2,-24(fp)
 101e3b8:	e0bfff15 	stw	r2,-4(fp)
 101e3bc:	00005e06 	br	101e538 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 101e3c0:	008040f4 	movhi	r2,259
 101e3c4:	10a42a04 	addi	r2,r2,-28504
 101e3c8:	10c00017 	ldw	r3,0(r2)
 101e3cc:	008040f4 	movhi	r2,259
 101e3d0:	10a42a04 	addi	r2,r2,-28504
 101e3d4:	10800017 	ldw	r2,0(r2)
 101e3d8:	10800c03 	ldbu	r2,48(r2)
 101e3dc:	10800114 	ori	r2,r2,4
 101e3e0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 101e3e4:	008040f4 	movhi	r2,259
 101e3e8:	10a42a04 	addi	r2,r2,-28504
 101e3ec:	10800017 	ldw	r2,0(r2)
 101e3f0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 101e3f4:	008040f4 	movhi	r2,259
 101e3f8:	10a42a04 	addi	r2,r2,-28504
 101e3fc:	10c00017 	ldw	r3,0(r2)
 101e400:	e0bffc0b 	ldhu	r2,-16(fp)
 101e404:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 101e408:	e13ffb17 	ldw	r4,-20(fp)
 101e40c:	101a8980 	call	101a898 <OS_EventTaskWait>
 101e410:	e0bff817 	ldw	r2,-32(fp)
 101e414:	e0bff515 	stw	r2,-44(fp)
 101e418:	e0bff517 	ldw	r2,-44(fp)
 101e41c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 101e420:	101b1440 	call	101b144 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e424:	0005303a 	rdctl	r2,status
 101e428:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e42c:	e0fff417 	ldw	r3,-48(fp)
 101e430:	00bfff84 	movi	r2,-2
 101e434:	1884703a 	and	r2,r3,r2
 101e438:	1001703a 	wrctl	status,r2
  
  return context;
 101e43c:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 101e440:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 101e444:	008040f4 	movhi	r2,259
 101e448:	10a42a04 	addi	r2,r2,-28504
 101e44c:	10800017 	ldw	r2,0(r2)
 101e450:	10800c43 	ldbu	r2,49(r2)
 101e454:	10803fcc 	andi	r2,r2,255
 101e458:	e0bffe15 	stw	r2,-8(fp)
 101e45c:	e0fffe17 	ldw	r3,-8(fp)
 101e460:	1805003a 	cmpeq	r2,r3,zero
 101e464:	1000041e 	bne	r2,zero,101e478 <OSQPend+0x248>
 101e468:	e0fffe17 	ldw	r3,-8(fp)
 101e46c:	188000a0 	cmpeqi	r2,r3,2
 101e470:	1000091e 	bne	r2,zero,101e498 <OSQPend+0x268>
 101e474:	00000d06 	br	101e4ac <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 101e478:	008040f4 	movhi	r2,259
 101e47c:	10a42a04 	addi	r2,r2,-28504
 101e480:	10800017 	ldw	r2,0(r2)
 101e484:	10800917 	ldw	r2,36(r2)
 101e488:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 101e48c:	e0bffd17 	ldw	r2,-12(fp)
 101e490:	10000005 	stb	zero,0(r2)
             break;
 101e494:	00000e06 	br	101e4d0 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 101e498:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 101e49c:	e0fffd17 	ldw	r3,-12(fp)
 101e4a0:	00800384 	movi	r2,14
 101e4a4:	18800005 	stb	r2,0(r3)
             break;
 101e4a8:	00000906 	br	101e4d0 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 101e4ac:	008040f4 	movhi	r2,259
 101e4b0:	10a42a04 	addi	r2,r2,-28504
 101e4b4:	11000017 	ldw	r4,0(r2)
 101e4b8:	e17ffb17 	ldw	r5,-20(fp)
 101e4bc:	101aafc0 	call	101aafc <OS_EventTaskRemove>
             pmsg = (void *)0;
 101e4c0:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 101e4c4:	e0fffd17 	ldw	r3,-12(fp)
 101e4c8:	00800284 	movi	r2,10
 101e4cc:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 101e4d0:	008040f4 	movhi	r2,259
 101e4d4:	10a42a04 	addi	r2,r2,-28504
 101e4d8:	10800017 	ldw	r2,0(r2)
 101e4dc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 101e4e0:	008040f4 	movhi	r2,259
 101e4e4:	10a42a04 	addi	r2,r2,-28504
 101e4e8:	10800017 	ldw	r2,0(r2)
 101e4ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 101e4f0:	008040f4 	movhi	r2,259
 101e4f4:	10a42a04 	addi	r2,r2,-28504
 101e4f8:	10800017 	ldw	r2,0(r2)
 101e4fc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 101e500:	008040f4 	movhi	r2,259
 101e504:	10a42a04 	addi	r2,r2,-28504
 101e508:	10800017 	ldw	r2,0(r2)
 101e50c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 101e510:	008040f4 	movhi	r2,259
 101e514:	10a42a04 	addi	r2,r2,-28504
 101e518:	10800017 	ldw	r2,0(r2)
 101e51c:	10000915 	stw	zero,36(r2)
 101e520:	e0bff817 	ldw	r2,-32(fp)
 101e524:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e528:	e0bff317 	ldw	r2,-52(fp)
 101e52c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 101e530:	e0bffa17 	ldw	r2,-24(fp)
 101e534:	e0bfff15 	stw	r2,-4(fp)
 101e538:	e0bfff17 	ldw	r2,-4(fp)
}
 101e53c:	e037883a 	mov	sp,fp
 101e540:	dfc00117 	ldw	ra,4(sp)
 101e544:	df000017 	ldw	fp,0(sp)
 101e548:	dec00204 	addi	sp,sp,8
 101e54c:	f800283a 	ret

0101e550 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 101e550:	defff504 	addi	sp,sp,-44
 101e554:	dfc00a15 	stw	ra,40(sp)
 101e558:	df000915 	stw	fp,36(sp)
 101e55c:	df000904 	addi	fp,sp,36
 101e560:	e13ffc15 	stw	r4,-16(fp)
 101e564:	e1bffe15 	stw	r6,-8(fp)
 101e568:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101e56c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 101e570:	e0bffe17 	ldw	r2,-8(fp)
 101e574:	1004c03a 	cmpne	r2,r2,zero
 101e578:	1000021e 	bne	r2,zero,101e584 <OSQPendAbort+0x34>
        return (0);
 101e57c:	e03fff15 	stw	zero,-4(fp)
 101e580:	00004c06 	br	101e6b4 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 101e584:	e0bffc17 	ldw	r2,-16(fp)
 101e588:	1004c03a 	cmpne	r2,r2,zero
 101e58c:	1000051e 	bne	r2,zero,101e5a4 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 101e590:	e0fffe17 	ldw	r3,-8(fp)
 101e594:	00800104 	movi	r2,4
 101e598:	18800005 	stb	r2,0(r3)
        return (0);
 101e59c:	e03fff15 	stw	zero,-4(fp)
 101e5a0:	00004406 	br	101e6b4 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 101e5a4:	e0bffc17 	ldw	r2,-16(fp)
 101e5a8:	10800003 	ldbu	r2,0(r2)
 101e5ac:	10803fcc 	andi	r2,r2,255
 101e5b0:	108000a0 	cmpeqi	r2,r2,2
 101e5b4:	1000051e 	bne	r2,zero,101e5cc <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 101e5b8:	e0fffe17 	ldw	r3,-8(fp)
 101e5bc:	00800044 	movi	r2,1
 101e5c0:	18800005 	stb	r2,0(r3)
        return (0);
 101e5c4:	e03fff15 	stw	zero,-4(fp)
 101e5c8:	00003a06 	br	101e6b4 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e5cc:	0005303a 	rdctl	r2,status
 101e5d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e5d4:	e0fff917 	ldw	r3,-28(fp)
 101e5d8:	00bfff84 	movi	r2,-2
 101e5dc:	1884703a 	and	r2,r3,r2
 101e5e0:	1001703a 	wrctl	status,r2
  
  return context;
 101e5e4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101e5e8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 101e5ec:	e0bffc17 	ldw	r2,-16(fp)
 101e5f0:	10800283 	ldbu	r2,10(r2)
 101e5f4:	10803fcc 	andi	r2,r2,255
 101e5f8:	1005003a 	cmpeq	r2,r2,zero
 101e5fc:	1000261e 	bne	r2,zero,101e698 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 101e600:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 101e604:	e0bffd03 	ldbu	r2,-12(fp)
 101e608:	10800060 	cmpeqi	r2,r2,1
 101e60c:	1000091e 	bne	r2,zero,101e634 <OSQPendAbort+0xe4>
 101e610:	00000e06 	br	101e64c <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 101e614:	e13ffc17 	ldw	r4,-16(fp)
 101e618:	000b883a 	mov	r5,zero
 101e61c:	01800104 	movi	r6,4
 101e620:	01c00084 	movi	r7,2
 101e624:	101a7040 	call	101a704 <OS_EventTaskRdy>
                     nbr_tasks++;
 101e628:	e0bffb03 	ldbu	r2,-20(fp)
 101e62c:	10800044 	addi	r2,r2,1
 101e630:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 101e634:	e0bffc17 	ldw	r2,-16(fp)
 101e638:	10800283 	ldbu	r2,10(r2)
 101e63c:	10803fcc 	andi	r2,r2,255
 101e640:	1004c03a 	cmpne	r2,r2,zero
 101e644:	103ff31e 	bne	r2,zero,101e614 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 101e648:	00000806 	br	101e66c <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 101e64c:	e13ffc17 	ldw	r4,-16(fp)
 101e650:	000b883a 	mov	r5,zero
 101e654:	01800104 	movi	r6,4
 101e658:	01c00084 	movi	r7,2
 101e65c:	101a7040 	call	101a704 <OS_EventTaskRdy>
                 nbr_tasks++;
 101e660:	e0bffb03 	ldbu	r2,-20(fp)
 101e664:	10800044 	addi	r2,r2,1
 101e668:	e0bffb05 	stb	r2,-20(fp)
 101e66c:	e0bffa17 	ldw	r2,-24(fp)
 101e670:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e674:	e0bff817 	ldw	r2,-32(fp)
 101e678:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 101e67c:	101b1440 	call	101b144 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 101e680:	e0fffe17 	ldw	r3,-8(fp)
 101e684:	00800384 	movi	r2,14
 101e688:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 101e68c:	e0bffb03 	ldbu	r2,-20(fp)
 101e690:	e0bfff15 	stw	r2,-4(fp)
 101e694:	00000706 	br	101e6b4 <OSQPendAbort+0x164>
 101e698:	e0bffa17 	ldw	r2,-24(fp)
 101e69c:	e0bff715 	stw	r2,-36(fp)
 101e6a0:	e0bff717 	ldw	r2,-36(fp)
 101e6a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101e6a8:	e0bffe17 	ldw	r2,-8(fp)
 101e6ac:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 101e6b0:	e03fff15 	stw	zero,-4(fp)
 101e6b4:	e0bfff17 	ldw	r2,-4(fp)
}
 101e6b8:	e037883a 	mov	sp,fp
 101e6bc:	dfc00117 	ldw	ra,4(sp)
 101e6c0:	df000017 	ldw	fp,0(sp)
 101e6c4:	dec00204 	addi	sp,sp,8
 101e6c8:	f800283a 	ret

0101e6cc <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 101e6cc:	defff504 	addi	sp,sp,-44
 101e6d0:	dfc00a15 	stw	ra,40(sp)
 101e6d4:	df000915 	stw	fp,36(sp)
 101e6d8:	df000904 	addi	fp,sp,36
 101e6dc:	e13ffd15 	stw	r4,-12(fp)
 101e6e0:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 101e6e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 101e6e8:	e0bffd17 	ldw	r2,-12(fp)
 101e6ec:	1004c03a 	cmpne	r2,r2,zero
 101e6f0:	1000031e 	bne	r2,zero,101e700 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 101e6f4:	00800104 	movi	r2,4
 101e6f8:	e0bfff15 	stw	r2,-4(fp)
 101e6fc:	00004d06 	br	101e834 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 101e700:	e0bffd17 	ldw	r2,-12(fp)
 101e704:	10800003 	ldbu	r2,0(r2)
 101e708:	10803fcc 	andi	r2,r2,255
 101e70c:	108000a0 	cmpeqi	r2,r2,2
 101e710:	1000031e 	bne	r2,zero,101e720 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 101e714:	00800044 	movi	r2,1
 101e718:	e0bfff15 	stw	r2,-4(fp)
 101e71c:	00004506 	br	101e834 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e720:	0005303a 	rdctl	r2,status
 101e724:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e728:	e0fffa17 	ldw	r3,-24(fp)
 101e72c:	00bfff84 	movi	r2,-2
 101e730:	1884703a 	and	r2,r3,r2
 101e734:	1001703a 	wrctl	status,r2
  
  return context;
 101e738:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101e73c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 101e740:	e0bffd17 	ldw	r2,-12(fp)
 101e744:	10800283 	ldbu	r2,10(r2)
 101e748:	10803fcc 	andi	r2,r2,255
 101e74c:	1005003a 	cmpeq	r2,r2,zero
 101e750:	10000c1e 	bne	r2,zero,101e784 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 101e754:	e13ffd17 	ldw	r4,-12(fp)
 101e758:	e17ffe17 	ldw	r5,-8(fp)
 101e75c:	01800104 	movi	r6,4
 101e760:	000f883a 	mov	r7,zero
 101e764:	101a7040 	call	101a704 <OS_EventTaskRdy>
 101e768:	e0bffb17 	ldw	r2,-20(fp)
 101e76c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e770:	e0bff917 	ldw	r2,-28(fp)
 101e774:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 101e778:	101b1440 	call	101b144 <OS_Sched>
        return (OS_ERR_NONE);
 101e77c:	e03fff15 	stw	zero,-4(fp)
 101e780:	00002c06 	br	101e834 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 101e784:	e0bffd17 	ldw	r2,-12(fp)
 101e788:	10800117 	ldw	r2,4(r2)
 101e78c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 101e790:	e0bffc17 	ldw	r2,-16(fp)
 101e794:	10c0058b 	ldhu	r3,22(r2)
 101e798:	e0bffc17 	ldw	r2,-16(fp)
 101e79c:	1080050b 	ldhu	r2,20(r2)
 101e7a0:	18ffffcc 	andi	r3,r3,65535
 101e7a4:	10bfffcc 	andi	r2,r2,65535
 101e7a8:	18800736 	bltu	r3,r2,101e7c8 <OSQPost+0xfc>
 101e7ac:	e0bffb17 	ldw	r2,-20(fp)
 101e7b0:	e0bff815 	stw	r2,-32(fp)
 101e7b4:	e0bff817 	ldw	r2,-32(fp)
 101e7b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 101e7bc:	00800784 	movi	r2,30
 101e7c0:	e0bfff15 	stw	r2,-4(fp)
 101e7c4:	00001b06 	br	101e834 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 101e7c8:	e0bffc17 	ldw	r2,-16(fp)
 101e7cc:	10c00317 	ldw	r3,12(r2)
 101e7d0:	e0bffe17 	ldw	r2,-8(fp)
 101e7d4:	18800015 	stw	r2,0(r3)
 101e7d8:	18c00104 	addi	r3,r3,4
 101e7dc:	e0bffc17 	ldw	r2,-16(fp)
 101e7e0:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 101e7e4:	e0bffc17 	ldw	r2,-16(fp)
 101e7e8:	1080058b 	ldhu	r2,22(r2)
 101e7ec:	10800044 	addi	r2,r2,1
 101e7f0:	1007883a 	mov	r3,r2
 101e7f4:	e0bffc17 	ldw	r2,-16(fp)
 101e7f8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 101e7fc:	e0bffc17 	ldw	r2,-16(fp)
 101e800:	10c00317 	ldw	r3,12(r2)
 101e804:	e0bffc17 	ldw	r2,-16(fp)
 101e808:	10800217 	ldw	r2,8(r2)
 101e80c:	1880041e 	bne	r3,r2,101e820 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 101e810:	e0bffc17 	ldw	r2,-16(fp)
 101e814:	10c00117 	ldw	r3,4(r2)
 101e818:	e0bffc17 	ldw	r2,-16(fp)
 101e81c:	10c00315 	stw	r3,12(r2)
 101e820:	e0bffb17 	ldw	r2,-20(fp)
 101e824:	e0bff715 	stw	r2,-36(fp)
 101e828:	e0bff717 	ldw	r2,-36(fp)
 101e82c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101e830:	e03fff15 	stw	zero,-4(fp)
 101e834:	e0bfff17 	ldw	r2,-4(fp)
}
 101e838:	e037883a 	mov	sp,fp
 101e83c:	dfc00117 	ldw	ra,4(sp)
 101e840:	df000017 	ldw	fp,0(sp)
 101e844:	dec00204 	addi	sp,sp,8
 101e848:	f800283a 	ret

0101e84c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 101e84c:	defff504 	addi	sp,sp,-44
 101e850:	dfc00a15 	stw	ra,40(sp)
 101e854:	df000915 	stw	fp,36(sp)
 101e858:	df000904 	addi	fp,sp,36
 101e85c:	e13ffd15 	stw	r4,-12(fp)
 101e860:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101e864:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101e868:	e0bffd17 	ldw	r2,-12(fp)
 101e86c:	1004c03a 	cmpne	r2,r2,zero
 101e870:	1000031e 	bne	r2,zero,101e880 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 101e874:	00800104 	movi	r2,4
 101e878:	e0bfff15 	stw	r2,-4(fp)
 101e87c:	00004f06 	br	101e9bc <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 101e880:	e0bffd17 	ldw	r2,-12(fp)
 101e884:	10800003 	ldbu	r2,0(r2)
 101e888:	10803fcc 	andi	r2,r2,255
 101e88c:	108000a0 	cmpeqi	r2,r2,2
 101e890:	1000031e 	bne	r2,zero,101e8a0 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 101e894:	00800044 	movi	r2,1
 101e898:	e0bfff15 	stw	r2,-4(fp)
 101e89c:	00004706 	br	101e9bc <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e8a0:	0005303a 	rdctl	r2,status
 101e8a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e8a8:	e0fffa17 	ldw	r3,-24(fp)
 101e8ac:	00bfff84 	movi	r2,-2
 101e8b0:	1884703a 	and	r2,r3,r2
 101e8b4:	1001703a 	wrctl	status,r2
  
  return context;
 101e8b8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101e8bc:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 101e8c0:	e0bffd17 	ldw	r2,-12(fp)
 101e8c4:	10800283 	ldbu	r2,10(r2)
 101e8c8:	10803fcc 	andi	r2,r2,255
 101e8cc:	1005003a 	cmpeq	r2,r2,zero
 101e8d0:	10000c1e 	bne	r2,zero,101e904 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 101e8d4:	e13ffd17 	ldw	r4,-12(fp)
 101e8d8:	e17ffe17 	ldw	r5,-8(fp)
 101e8dc:	01800104 	movi	r6,4
 101e8e0:	000f883a 	mov	r7,zero
 101e8e4:	101a7040 	call	101a704 <OS_EventTaskRdy>
 101e8e8:	e0bffb17 	ldw	r2,-20(fp)
 101e8ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e8f0:	e0bff917 	ldw	r2,-28(fp)
 101e8f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 101e8f8:	101b1440 	call	101b144 <OS_Sched>
        return (OS_ERR_NONE);
 101e8fc:	e03fff15 	stw	zero,-4(fp)
 101e900:	00002e06 	br	101e9bc <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 101e904:	e0bffd17 	ldw	r2,-12(fp)
 101e908:	10800117 	ldw	r2,4(r2)
 101e90c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 101e910:	e0bffc17 	ldw	r2,-16(fp)
 101e914:	10c0058b 	ldhu	r3,22(r2)
 101e918:	e0bffc17 	ldw	r2,-16(fp)
 101e91c:	1080050b 	ldhu	r2,20(r2)
 101e920:	18ffffcc 	andi	r3,r3,65535
 101e924:	10bfffcc 	andi	r2,r2,65535
 101e928:	18800736 	bltu	r3,r2,101e948 <OSQPostFront+0xfc>
 101e92c:	e0bffb17 	ldw	r2,-20(fp)
 101e930:	e0bff815 	stw	r2,-32(fp)
 101e934:	e0bff817 	ldw	r2,-32(fp)
 101e938:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 101e93c:	00800784 	movi	r2,30
 101e940:	e0bfff15 	stw	r2,-4(fp)
 101e944:	00001d06 	br	101e9bc <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 101e948:	e0bffc17 	ldw	r2,-16(fp)
 101e94c:	10c00417 	ldw	r3,16(r2)
 101e950:	e0bffc17 	ldw	r2,-16(fp)
 101e954:	10800117 	ldw	r2,4(r2)
 101e958:	1880041e 	bne	r3,r2,101e96c <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 101e95c:	e0bffc17 	ldw	r2,-16(fp)
 101e960:	10c00217 	ldw	r3,8(r2)
 101e964:	e0bffc17 	ldw	r2,-16(fp)
 101e968:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 101e96c:	e0bffc17 	ldw	r2,-16(fp)
 101e970:	10800417 	ldw	r2,16(r2)
 101e974:	10ffff04 	addi	r3,r2,-4
 101e978:	e0bffc17 	ldw	r2,-16(fp)
 101e97c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 101e980:	e0bffc17 	ldw	r2,-16(fp)
 101e984:	10c00417 	ldw	r3,16(r2)
 101e988:	e0bffe17 	ldw	r2,-8(fp)
 101e98c:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 101e990:	e0bffc17 	ldw	r2,-16(fp)
 101e994:	1080058b 	ldhu	r2,22(r2)
 101e998:	10800044 	addi	r2,r2,1
 101e99c:	1007883a 	mov	r3,r2
 101e9a0:	e0bffc17 	ldw	r2,-16(fp)
 101e9a4:	10c0058d 	sth	r3,22(r2)
 101e9a8:	e0bffb17 	ldw	r2,-20(fp)
 101e9ac:	e0bff715 	stw	r2,-36(fp)
 101e9b0:	e0bff717 	ldw	r2,-36(fp)
 101e9b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101e9b8:	e03fff15 	stw	zero,-4(fp)
 101e9bc:	e0bfff17 	ldw	r2,-4(fp)
}
 101e9c0:	e037883a 	mov	sp,fp
 101e9c4:	dfc00117 	ldw	ra,4(sp)
 101e9c8:	df000017 	ldw	fp,0(sp)
 101e9cc:	dec00204 	addi	sp,sp,8
 101e9d0:	f800283a 	ret

0101e9d4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 101e9d4:	defff404 	addi	sp,sp,-48
 101e9d8:	dfc00b15 	stw	ra,44(sp)
 101e9dc:	df000a15 	stw	fp,40(sp)
 101e9e0:	df000a04 	addi	fp,sp,40
 101e9e4:	e13ffc15 	stw	r4,-16(fp)
 101e9e8:	e17ffd15 	stw	r5,-12(fp)
 101e9ec:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101e9f0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101e9f4:	e0bffc17 	ldw	r2,-16(fp)
 101e9f8:	1004c03a 	cmpne	r2,r2,zero
 101e9fc:	1000031e 	bne	r2,zero,101ea0c <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 101ea00:	00800104 	movi	r2,4
 101ea04:	e0bfff15 	stw	r2,-4(fp)
 101ea08:	00007906 	br	101ebf0 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 101ea0c:	e0bffc17 	ldw	r2,-16(fp)
 101ea10:	10800003 	ldbu	r2,0(r2)
 101ea14:	10803fcc 	andi	r2,r2,255
 101ea18:	108000a0 	cmpeqi	r2,r2,2
 101ea1c:	1000031e 	bne	r2,zero,101ea2c <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 101ea20:	00800044 	movi	r2,1
 101ea24:	e0bfff15 	stw	r2,-4(fp)
 101ea28:	00007106 	br	101ebf0 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ea2c:	0005303a 	rdctl	r2,status
 101ea30:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ea34:	e0fff917 	ldw	r3,-28(fp)
 101ea38:	00bfff84 	movi	r2,-2
 101ea3c:	1884703a 	and	r2,r3,r2
 101ea40:	1001703a 	wrctl	status,r2
  
  return context;
 101ea44:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101ea48:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 101ea4c:	e0bffc17 	ldw	r2,-16(fp)
 101ea50:	10800283 	ldbu	r2,10(r2)
 101ea54:	10803fcc 	andi	r2,r2,255
 101ea58:	1005003a 	cmpeq	r2,r2,zero
 101ea5c:	1000211e 	bne	r2,zero,101eae4 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 101ea60:	e0bffe03 	ldbu	r2,-8(fp)
 101ea64:	1080004c 	andi	r2,r2,1
 101ea68:	10803fcc 	andi	r2,r2,255
 101ea6c:	1005003a 	cmpeq	r2,r2,zero
 101ea70:	10000c1e 	bne	r2,zero,101eaa4 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 101ea74:	00000506 	br	101ea8c <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 101ea78:	e13ffc17 	ldw	r4,-16(fp)
 101ea7c:	e17ffd17 	ldw	r5,-12(fp)
 101ea80:	01800104 	movi	r6,4
 101ea84:	000f883a 	mov	r7,zero
 101ea88:	101a7040 	call	101a704 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 101ea8c:	e0bffc17 	ldw	r2,-16(fp)
 101ea90:	10800283 	ldbu	r2,10(r2)
 101ea94:	10803fcc 	andi	r2,r2,255
 101ea98:	1004c03a 	cmpne	r2,r2,zero
 101ea9c:	103ff61e 	bne	r2,zero,101ea78 <OSQPostOpt+0xa4>
 101eaa0:	00000506 	br	101eab8 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 101eaa4:	e13ffc17 	ldw	r4,-16(fp)
 101eaa8:	e17ffd17 	ldw	r5,-12(fp)
 101eaac:	01800104 	movi	r6,4
 101eab0:	000f883a 	mov	r7,zero
 101eab4:	101a7040 	call	101a704 <OS_EventTaskRdy>
 101eab8:	e0bffa17 	ldw	r2,-24(fp)
 101eabc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101eac0:	e0bff817 	ldw	r2,-32(fp)
 101eac4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 101eac8:	e0bffe03 	ldbu	r2,-8(fp)
 101eacc:	1080010c 	andi	r2,r2,4
 101ead0:	1004c03a 	cmpne	r2,r2,zero
 101ead4:	1000011e 	bne	r2,zero,101eadc <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 101ead8:	101b1440 	call	101b144 <OS_Sched>
        }
        return (OS_ERR_NONE);
 101eadc:	e03fff15 	stw	zero,-4(fp)
 101eae0:	00004306 	br	101ebf0 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 101eae4:	e0bffc17 	ldw	r2,-16(fp)
 101eae8:	10800117 	ldw	r2,4(r2)
 101eaec:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 101eaf0:	e0bffb17 	ldw	r2,-20(fp)
 101eaf4:	10c0058b 	ldhu	r3,22(r2)
 101eaf8:	e0bffb17 	ldw	r2,-20(fp)
 101eafc:	1080050b 	ldhu	r2,20(r2)
 101eb00:	18ffffcc 	andi	r3,r3,65535
 101eb04:	10bfffcc 	andi	r2,r2,65535
 101eb08:	18800736 	bltu	r3,r2,101eb28 <OSQPostOpt+0x154>
 101eb0c:	e0bffa17 	ldw	r2,-24(fp)
 101eb10:	e0bff715 	stw	r2,-36(fp)
 101eb14:	e0bff717 	ldw	r2,-36(fp)
 101eb18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 101eb1c:	00800784 	movi	r2,30
 101eb20:	e0bfff15 	stw	r2,-4(fp)
 101eb24:	00003206 	br	101ebf0 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 101eb28:	e0bffe03 	ldbu	r2,-8(fp)
 101eb2c:	1080008c 	andi	r2,r2,2
 101eb30:	1005003a 	cmpeq	r2,r2,zero
 101eb34:	1000131e 	bne	r2,zero,101eb84 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 101eb38:	e0bffb17 	ldw	r2,-20(fp)
 101eb3c:	10c00417 	ldw	r3,16(r2)
 101eb40:	e0bffb17 	ldw	r2,-20(fp)
 101eb44:	10800117 	ldw	r2,4(r2)
 101eb48:	1880041e 	bne	r3,r2,101eb5c <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 101eb4c:	e0bffb17 	ldw	r2,-20(fp)
 101eb50:	10c00217 	ldw	r3,8(r2)
 101eb54:	e0bffb17 	ldw	r2,-20(fp)
 101eb58:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 101eb5c:	e0bffb17 	ldw	r2,-20(fp)
 101eb60:	10800417 	ldw	r2,16(r2)
 101eb64:	10ffff04 	addi	r3,r2,-4
 101eb68:	e0bffb17 	ldw	r2,-20(fp)
 101eb6c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 101eb70:	e0bffb17 	ldw	r2,-20(fp)
 101eb74:	10c00417 	ldw	r3,16(r2)
 101eb78:	e0bffd17 	ldw	r2,-12(fp)
 101eb7c:	18800015 	stw	r2,0(r3)
 101eb80:	00001006 	br	101ebc4 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 101eb84:	e0bffb17 	ldw	r2,-20(fp)
 101eb88:	10c00317 	ldw	r3,12(r2)
 101eb8c:	e0bffd17 	ldw	r2,-12(fp)
 101eb90:	18800015 	stw	r2,0(r3)
 101eb94:	18c00104 	addi	r3,r3,4
 101eb98:	e0bffb17 	ldw	r2,-20(fp)
 101eb9c:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 101eba0:	e0bffb17 	ldw	r2,-20(fp)
 101eba4:	10c00317 	ldw	r3,12(r2)
 101eba8:	e0bffb17 	ldw	r2,-20(fp)
 101ebac:	10800217 	ldw	r2,8(r2)
 101ebb0:	1880041e 	bne	r3,r2,101ebc4 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 101ebb4:	e0bffb17 	ldw	r2,-20(fp)
 101ebb8:	10c00117 	ldw	r3,4(r2)
 101ebbc:	e0bffb17 	ldw	r2,-20(fp)
 101ebc0:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 101ebc4:	e0bffb17 	ldw	r2,-20(fp)
 101ebc8:	1080058b 	ldhu	r2,22(r2)
 101ebcc:	10800044 	addi	r2,r2,1
 101ebd0:	1007883a 	mov	r3,r2
 101ebd4:	e0bffb17 	ldw	r2,-20(fp)
 101ebd8:	10c0058d 	sth	r3,22(r2)
 101ebdc:	e0bffa17 	ldw	r2,-24(fp)
 101ebe0:	e0bff615 	stw	r2,-40(fp)
 101ebe4:	e0bff617 	ldw	r2,-40(fp)
 101ebe8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101ebec:	e03fff15 	stw	zero,-4(fp)
 101ebf0:	e0bfff17 	ldw	r2,-4(fp)
}
 101ebf4:	e037883a 	mov	sp,fp
 101ebf8:	dfc00117 	ldw	ra,4(sp)
 101ebfc:	df000017 	ldw	fp,0(sp)
 101ec00:	dec00204 	addi	sp,sp,8
 101ec04:	f800283a 	ret

0101ec08 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 101ec08:	defff504 	addi	sp,sp,-44
 101ec0c:	df000a15 	stw	fp,40(sp)
 101ec10:	df000a04 	addi	fp,sp,40
 101ec14:	e13ffd15 	stw	r4,-12(fp)
 101ec18:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 101ec1c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 101ec20:	e0bffd17 	ldw	r2,-12(fp)
 101ec24:	1004c03a 	cmpne	r2,r2,zero
 101ec28:	1000031e 	bne	r2,zero,101ec38 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 101ec2c:	00800104 	movi	r2,4
 101ec30:	e0bfff15 	stw	r2,-4(fp)
 101ec34:	00004f06 	br	101ed74 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 101ec38:	e0bffe17 	ldw	r2,-8(fp)
 101ec3c:	1004c03a 	cmpne	r2,r2,zero
 101ec40:	1000031e 	bne	r2,zero,101ec50 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 101ec44:	00800244 	movi	r2,9
 101ec48:	e0bfff15 	stw	r2,-4(fp)
 101ec4c:	00004906 	br	101ed74 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 101ec50:	e0bffd17 	ldw	r2,-12(fp)
 101ec54:	10800003 	ldbu	r2,0(r2)
 101ec58:	10803fcc 	andi	r2,r2,255
 101ec5c:	108000a0 	cmpeqi	r2,r2,2
 101ec60:	1000031e 	bne	r2,zero,101ec70 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 101ec64:	00800044 	movi	r2,1
 101ec68:	e0bfff15 	stw	r2,-4(fp)
 101ec6c:	00004106 	br	101ed74 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ec70:	0005303a 	rdctl	r2,status
 101ec74:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ec78:	e0fff717 	ldw	r3,-36(fp)
 101ec7c:	00bfff84 	movi	r2,-2
 101ec80:	1884703a 	and	r2,r3,r2
 101ec84:	1001703a 	wrctl	status,r2
  
  return context;
 101ec88:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 101ec8c:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 101ec90:	e0bffd17 	ldw	r2,-12(fp)
 101ec94:	10c00283 	ldbu	r3,10(r2)
 101ec98:	e0bffe17 	ldw	r2,-8(fp)
 101ec9c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 101eca0:	e0bffd17 	ldw	r2,-12(fp)
 101eca4:	108002c4 	addi	r2,r2,11
 101eca8:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 101ecac:	e0bffe17 	ldw	r2,-8(fp)
 101ecb0:	10800204 	addi	r2,r2,8
 101ecb4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101ecb8:	e03ffb05 	stb	zero,-20(fp)
 101ecbc:	00000d06 	br	101ecf4 <OSQQuery+0xec>
        *pdest++ = *psrc++;
 101ecc0:	e0bffa17 	ldw	r2,-24(fp)
 101ecc4:	10c00003 	ldbu	r3,0(r2)
 101ecc8:	e0bff917 	ldw	r2,-28(fp)
 101eccc:	10c00005 	stb	r3,0(r2)
 101ecd0:	e0bff917 	ldw	r2,-28(fp)
 101ecd4:	10800044 	addi	r2,r2,1
 101ecd8:	e0bff915 	stw	r2,-28(fp)
 101ecdc:	e0bffa17 	ldw	r2,-24(fp)
 101ece0:	10800044 	addi	r2,r2,1
 101ece4:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101ece8:	e0bffb03 	ldbu	r2,-20(fp)
 101ecec:	10800044 	addi	r2,r2,1
 101ecf0:	e0bffb05 	stb	r2,-20(fp)
 101ecf4:	e0bffb03 	ldbu	r2,-20(fp)
 101ecf8:	108000f0 	cmpltui	r2,r2,3
 101ecfc:	103ff01e 	bne	r2,zero,101ecc0 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 101ed00:	e0bffd17 	ldw	r2,-12(fp)
 101ed04:	10800117 	ldw	r2,4(r2)
 101ed08:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 101ed0c:	e0bffc17 	ldw	r2,-16(fp)
 101ed10:	1080058b 	ldhu	r2,22(r2)
 101ed14:	10bfffcc 	andi	r2,r2,65535
 101ed18:	1005003a 	cmpeq	r2,r2,zero
 101ed1c:	1000061e 	bne	r2,zero,101ed38 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 101ed20:	e0bffc17 	ldw	r2,-16(fp)
 101ed24:	10800417 	ldw	r2,16(r2)
 101ed28:	10c00017 	ldw	r3,0(r2)
 101ed2c:	e0bffe17 	ldw	r2,-8(fp)
 101ed30:	10c00015 	stw	r3,0(r2)
 101ed34:	00000206 	br	101ed40 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 101ed38:	e0bffe17 	ldw	r2,-8(fp)
 101ed3c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 101ed40:	e0bffc17 	ldw	r2,-16(fp)
 101ed44:	10c0058b 	ldhu	r3,22(r2)
 101ed48:	e0bffe17 	ldw	r2,-8(fp)
 101ed4c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 101ed50:	e0bffc17 	ldw	r2,-16(fp)
 101ed54:	10c0050b 	ldhu	r3,20(r2)
 101ed58:	e0bffe17 	ldw	r2,-8(fp)
 101ed5c:	10c0018d 	sth	r3,6(r2)
 101ed60:	e0bff817 	ldw	r2,-32(fp)
 101ed64:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ed68:	e0bff617 	ldw	r2,-40(fp)
 101ed6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101ed70:	e03fff15 	stw	zero,-4(fp)
 101ed74:	e0bfff17 	ldw	r2,-4(fp)
}
 101ed78:	e037883a 	mov	sp,fp
 101ed7c:	df000017 	ldw	fp,0(sp)
 101ed80:	dec00104 	addi	sp,sp,4
 101ed84:	f800283a 	ret

0101ed88 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 101ed88:	defffb04 	addi	sp,sp,-20
 101ed8c:	dfc00415 	stw	ra,16(sp)
 101ed90:	df000315 	stw	fp,12(sp)
 101ed94:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 101ed98:	01004134 	movhi	r4,260
 101ed9c:	21242804 	addi	r4,r4,-28512
 101eda0:	01407804 	movi	r5,480
 101eda4:	101b0840 	call	101b084 <OS_MemClr>
    pq1 = &OSQTbl[0];
 101eda8:	00804134 	movhi	r2,260
 101edac:	10a42804 	addi	r2,r2,-28512
 101edb0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 101edb4:	00804134 	movhi	r2,260
 101edb8:	10a42e04 	addi	r2,r2,-28488
 101edbc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 101edc0:	e03fff0d 	sth	zero,-4(fp)
 101edc4:	00000c06 	br	101edf8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 101edc8:	e0fffe17 	ldw	r3,-8(fp)
 101edcc:	e0bffd17 	ldw	r2,-12(fp)
 101edd0:	18800015 	stw	r2,0(r3)
        pq1++;
 101edd4:	e0bffe17 	ldw	r2,-8(fp)
 101edd8:	10800604 	addi	r2,r2,24
 101eddc:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 101ede0:	e0bffd17 	ldw	r2,-12(fp)
 101ede4:	10800604 	addi	r2,r2,24
 101ede8:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 101edec:	e0bfff0b 	ldhu	r2,-4(fp)
 101edf0:	10800044 	addi	r2,r2,1
 101edf4:	e0bfff0d 	sth	r2,-4(fp)
 101edf8:	e0bfff0b 	ldhu	r2,-4(fp)
 101edfc:	108004f0 	cmpltui	r2,r2,19
 101ee00:	103ff11e 	bne	r2,zero,101edc8 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 101ee04:	e0bffe17 	ldw	r2,-8(fp)
 101ee08:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 101ee0c:	00c040f4 	movhi	r3,259
 101ee10:	18e42604 	addi	r3,r3,-28520
 101ee14:	00804134 	movhi	r2,260
 101ee18:	10a42804 	addi	r2,r2,-28512
 101ee1c:	18800015 	stw	r2,0(r3)
#endif
}
 101ee20:	e037883a 	mov	sp,fp
 101ee24:	dfc00117 	ldw	ra,4(sp)
 101ee28:	df000017 	ldw	fp,0(sp)
 101ee2c:	dec00204 	addi	sp,sp,8
 101ee30:	f800283a 	ret

0101ee34 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 101ee34:	defff904 	addi	sp,sp,-28
 101ee38:	df000615 	stw	fp,24(sp)
 101ee3c:	df000604 	addi	fp,sp,24
 101ee40:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101ee44:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101ee48:	e0bffe17 	ldw	r2,-8(fp)
 101ee4c:	1004c03a 	cmpne	r2,r2,zero
 101ee50:	1000021e 	bne	r2,zero,101ee5c <OSSemAccept+0x28>
        return (0);
 101ee54:	e03fff15 	stw	zero,-4(fp)
 101ee58:	00002106 	br	101eee0 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101ee5c:	e0bffe17 	ldw	r2,-8(fp)
 101ee60:	10800003 	ldbu	r2,0(r2)
 101ee64:	10803fcc 	andi	r2,r2,255
 101ee68:	108000e0 	cmpeqi	r2,r2,3
 101ee6c:	1000021e 	bne	r2,zero,101ee78 <OSSemAccept+0x44>
        return (0);
 101ee70:	e03fff15 	stw	zero,-4(fp)
 101ee74:	00001a06 	br	101eee0 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ee78:	0005303a 	rdctl	r2,status
 101ee7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ee80:	e0fffb17 	ldw	r3,-20(fp)
 101ee84:	00bfff84 	movi	r2,-2
 101ee88:	1884703a 	and	r2,r3,r2
 101ee8c:	1001703a 	wrctl	status,r2
  
  return context;
 101ee90:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 101ee94:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 101ee98:	e0bffe17 	ldw	r2,-8(fp)
 101ee9c:	1080020b 	ldhu	r2,8(r2)
 101eea0:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 101eea4:	e0bffd0b 	ldhu	r2,-12(fp)
 101eea8:	1005003a 	cmpeq	r2,r2,zero
 101eeac:	1000061e 	bne	r2,zero,101eec8 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 101eeb0:	e0bffe17 	ldw	r2,-8(fp)
 101eeb4:	1080020b 	ldhu	r2,8(r2)
 101eeb8:	10bfffc4 	addi	r2,r2,-1
 101eebc:	1007883a 	mov	r3,r2
 101eec0:	e0bffe17 	ldw	r2,-8(fp)
 101eec4:	10c0020d 	sth	r3,8(r2)
 101eec8:	e0bffc17 	ldw	r2,-16(fp)
 101eecc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101eed0:	e0bffa17 	ldw	r2,-24(fp)
 101eed4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 101eed8:	e0bffd0b 	ldhu	r2,-12(fp)
 101eedc:	e0bfff15 	stw	r2,-4(fp)
 101eee0:	e0bfff17 	ldw	r2,-4(fp)
}
 101eee4:	e037883a 	mov	sp,fp
 101eee8:	df000017 	ldw	fp,0(sp)
 101eeec:	dec00104 	addi	sp,sp,4
 101eef0:	f800283a 	ret

0101eef4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 101eef4:	defff804 	addi	sp,sp,-32
 101eef8:	dfc00715 	stw	ra,28(sp)
 101eefc:	df000615 	stw	fp,24(sp)
 101ef00:	df000604 	addi	fp,sp,24
 101ef04:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101ef08:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 101ef0c:	008040f4 	movhi	r2,259
 101ef10:	10a42904 	addi	r2,r2,-28508
 101ef14:	10800003 	ldbu	r2,0(r2)
 101ef18:	10803fcc 	andi	r2,r2,255
 101ef1c:	1005003a 	cmpeq	r2,r2,zero
 101ef20:	1000021e 	bne	r2,zero,101ef2c <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 101ef24:	e03fff15 	stw	zero,-4(fp)
 101ef28:	00003106 	br	101eff0 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ef2c:	0005303a 	rdctl	r2,status
 101ef30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ef34:	e0fffb17 	ldw	r3,-20(fp)
 101ef38:	00bfff84 	movi	r2,-2
 101ef3c:	1884703a 	and	r2,r3,r2
 101ef40:	1001703a 	wrctl	status,r2
  
  return context;
 101ef44:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 101ef48:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 101ef4c:	008040f4 	movhi	r2,259
 101ef50:	10a42804 	addi	r2,r2,-28512
 101ef54:	10800017 	ldw	r2,0(r2)
 101ef58:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 101ef5c:	008040f4 	movhi	r2,259
 101ef60:	10a42804 	addi	r2,r2,-28512
 101ef64:	10800017 	ldw	r2,0(r2)
 101ef68:	1005003a 	cmpeq	r2,r2,zero
 101ef6c:	1000081e 	bne	r2,zero,101ef90 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 101ef70:	008040f4 	movhi	r2,259
 101ef74:	10a42804 	addi	r2,r2,-28512
 101ef78:	10800017 	ldw	r2,0(r2)
 101ef7c:	10800117 	ldw	r2,4(r2)
 101ef80:	1007883a 	mov	r3,r2
 101ef84:	008040f4 	movhi	r2,259
 101ef88:	10a42804 	addi	r2,r2,-28512
 101ef8c:	10c00015 	stw	r3,0(r2)
 101ef90:	e0bffc17 	ldw	r2,-16(fp)
 101ef94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ef98:	e0bffa17 	ldw	r2,-24(fp)
 101ef9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 101efa0:	e0bffd17 	ldw	r2,-12(fp)
 101efa4:	1005003a 	cmpeq	r2,r2,zero
 101efa8:	10000f1e 	bne	r2,zero,101efe8 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 101efac:	e0fffd17 	ldw	r3,-12(fp)
 101efb0:	008000c4 	movi	r2,3
 101efb4:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 101efb8:	e0fffd17 	ldw	r3,-12(fp)
 101efbc:	e0bffe0b 	ldhu	r2,-8(fp)
 101efc0:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 101efc4:	e0bffd17 	ldw	r2,-12(fp)
 101efc8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 101efcc:	e0fffd17 	ldw	r3,-12(fp)
 101efd0:	00800fc4 	movi	r2,63
 101efd4:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 101efd8:	e0bffd17 	ldw	r2,-12(fp)
 101efdc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 101efe0:	e13ffd17 	ldw	r4,-12(fp)
 101efe4:	101acb80 	call	101acb8 <OS_EventWaitListInit>
    }
    return (pevent);
 101efe8:	e0bffd17 	ldw	r2,-12(fp)
 101efec:	e0bfff15 	stw	r2,-4(fp)
 101eff0:	e0bfff17 	ldw	r2,-4(fp)
}
 101eff4:	e037883a 	mov	sp,fp
 101eff8:	dfc00117 	ldw	ra,4(sp)
 101effc:	df000017 	ldw	fp,0(sp)
 101f000:	dec00204 	addi	sp,sp,8
 101f004:	f800283a 	ret

0101f008 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 101f008:	defff104 	addi	sp,sp,-60
 101f00c:	dfc00e15 	stw	ra,56(sp)
 101f010:	df000d15 	stw	fp,52(sp)
 101f014:	df000d04 	addi	fp,sp,52
 101f018:	e13ffb15 	stw	r4,-20(fp)
 101f01c:	e1bffd15 	stw	r6,-12(fp)
 101f020:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101f024:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 101f028:	e0bffd17 	ldw	r2,-12(fp)
 101f02c:	1004c03a 	cmpne	r2,r2,zero
 101f030:	1000031e 	bne	r2,zero,101f040 <OSSemDel+0x38>
        return (pevent);
 101f034:	e0bffb17 	ldw	r2,-20(fp)
 101f038:	e0bfff15 	stw	r2,-4(fp)
 101f03c:	00009406 	br	101f290 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 101f040:	e0bffb17 	ldw	r2,-20(fp)
 101f044:	1004c03a 	cmpne	r2,r2,zero
 101f048:	1000061e 	bne	r2,zero,101f064 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 101f04c:	e0fffd17 	ldw	r3,-12(fp)
 101f050:	00800104 	movi	r2,4
 101f054:	18800005 	stb	r2,0(r3)
        return (pevent);
 101f058:	e0fffb17 	ldw	r3,-20(fp)
 101f05c:	e0ffff15 	stw	r3,-4(fp)
 101f060:	00008b06 	br	101f290 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 101f064:	e0bffb17 	ldw	r2,-20(fp)
 101f068:	10800003 	ldbu	r2,0(r2)
 101f06c:	10803fcc 	andi	r2,r2,255
 101f070:	108000e0 	cmpeqi	r2,r2,3
 101f074:	1000061e 	bne	r2,zero,101f090 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 101f078:	e0fffd17 	ldw	r3,-12(fp)
 101f07c:	00800044 	movi	r2,1
 101f080:	18800005 	stb	r2,0(r3)
        return (pevent);
 101f084:	e0bffb17 	ldw	r2,-20(fp)
 101f088:	e0bfff15 	stw	r2,-4(fp)
 101f08c:	00008006 	br	101f290 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 101f090:	008040f4 	movhi	r2,259
 101f094:	10a42904 	addi	r2,r2,-28508
 101f098:	10800003 	ldbu	r2,0(r2)
 101f09c:	10803fcc 	andi	r2,r2,255
 101f0a0:	1005003a 	cmpeq	r2,r2,zero
 101f0a4:	1000061e 	bne	r2,zero,101f0c0 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 101f0a8:	e0fffd17 	ldw	r3,-12(fp)
 101f0ac:	008003c4 	movi	r2,15
 101f0b0:	18800005 	stb	r2,0(r3)
        return (pevent);
 101f0b4:	e0fffb17 	ldw	r3,-20(fp)
 101f0b8:	e0ffff15 	stw	r3,-4(fp)
 101f0bc:	00007406 	br	101f290 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f0c0:	0005303a 	rdctl	r2,status
 101f0c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f0c8:	e0fff717 	ldw	r3,-36(fp)
 101f0cc:	00bfff84 	movi	r2,-2
 101f0d0:	1884703a 	and	r2,r3,r2
 101f0d4:	1001703a 	wrctl	status,r2
  
  return context;
 101f0d8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 101f0dc:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 101f0e0:	e0bffb17 	ldw	r2,-20(fp)
 101f0e4:	10800283 	ldbu	r2,10(r2)
 101f0e8:	10803fcc 	andi	r2,r2,255
 101f0ec:	1005003a 	cmpeq	r2,r2,zero
 101f0f0:	1000031e 	bne	r2,zero,101f100 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 101f0f4:	00800044 	movi	r2,1
 101f0f8:	e0bffa05 	stb	r2,-24(fp)
 101f0fc:	00000106 	br	101f104 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 101f100:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 101f104:	e0bffc03 	ldbu	r2,-16(fp)
 101f108:	e0bffe15 	stw	r2,-8(fp)
 101f10c:	e0fffe17 	ldw	r3,-8(fp)
 101f110:	1805003a 	cmpeq	r2,r3,zero
 101f114:	1000041e 	bne	r2,zero,101f128 <OSSemDel+0x120>
 101f118:	e0fffe17 	ldw	r3,-8(fp)
 101f11c:	18800060 	cmpeqi	r2,r3,1
 101f120:	10002d1e 	bne	r2,zero,101f1d8 <OSSemDel+0x1d0>
 101f124:	00004f06 	br	101f264 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 101f128:	e0bffa03 	ldbu	r2,-24(fp)
 101f12c:	1004c03a 	cmpne	r2,r2,zero
 101f130:	10001a1e 	bne	r2,zero,101f19c <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 101f134:	e0fffb17 	ldw	r3,-20(fp)
 101f138:	00800fc4 	movi	r2,63
 101f13c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 101f140:	e0bffb17 	ldw	r2,-20(fp)
 101f144:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 101f148:	e0bffb17 	ldw	r2,-20(fp)
 101f14c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 101f150:	008040f4 	movhi	r2,259
 101f154:	10a42804 	addi	r2,r2,-28512
 101f158:	10c00017 	ldw	r3,0(r2)
 101f15c:	e0bffb17 	ldw	r2,-20(fp)
 101f160:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 101f164:	e0bffb17 	ldw	r2,-20(fp)
 101f168:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 101f16c:	00c040f4 	movhi	r3,259
 101f170:	18e42804 	addi	r3,r3,-28512
 101f174:	e0bffb17 	ldw	r2,-20(fp)
 101f178:	18800015 	stw	r2,0(r3)
 101f17c:	e0bff817 	ldw	r2,-32(fp)
 101f180:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f184:	e0bff617 	ldw	r2,-40(fp)
 101f188:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 101f18c:	e0bffd17 	ldw	r2,-12(fp)
 101f190:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 101f194:	e03ff915 	stw	zero,-28(fp)
 101f198:	00003b06 	br	101f288 <OSSemDel+0x280>
 101f19c:	e0bff817 	ldw	r2,-32(fp)
 101f1a0:	e0bff515 	stw	r2,-44(fp)
 101f1a4:	e0bff517 	ldw	r2,-44(fp)
 101f1a8:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 101f1ac:	e0fffd17 	ldw	r3,-12(fp)
 101f1b0:	00801244 	movi	r2,73
 101f1b4:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 101f1b8:	e0bffb17 	ldw	r2,-20(fp)
 101f1bc:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 101f1c0:	00003106 	br	101f288 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 101f1c4:	e13ffb17 	ldw	r4,-20(fp)
 101f1c8:	000b883a 	mov	r5,zero
 101f1cc:	01800044 	movi	r6,1
 101f1d0:	000f883a 	mov	r7,zero
 101f1d4:	101a7040 	call	101a704 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 101f1d8:	e0bffb17 	ldw	r2,-20(fp)
 101f1dc:	10800283 	ldbu	r2,10(r2)
 101f1e0:	10803fcc 	andi	r2,r2,255
 101f1e4:	1004c03a 	cmpne	r2,r2,zero
 101f1e8:	103ff61e 	bne	r2,zero,101f1c4 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 101f1ec:	e0fffb17 	ldw	r3,-20(fp)
 101f1f0:	00800fc4 	movi	r2,63
 101f1f4:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 101f1f8:	e0bffb17 	ldw	r2,-20(fp)
 101f1fc:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 101f200:	e0bffb17 	ldw	r2,-20(fp)
 101f204:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 101f208:	008040f4 	movhi	r2,259
 101f20c:	10a42804 	addi	r2,r2,-28512
 101f210:	10c00017 	ldw	r3,0(r2)
 101f214:	e0bffb17 	ldw	r2,-20(fp)
 101f218:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 101f21c:	e0bffb17 	ldw	r2,-20(fp)
 101f220:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 101f224:	00c040f4 	movhi	r3,259
 101f228:	18e42804 	addi	r3,r3,-28512
 101f22c:	e0bffb17 	ldw	r2,-20(fp)
 101f230:	18800015 	stw	r2,0(r3)
 101f234:	e0bff817 	ldw	r2,-32(fp)
 101f238:	e0bff415 	stw	r2,-48(fp)
 101f23c:	e0bff417 	ldw	r2,-48(fp)
 101f240:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 101f244:	e0bffa03 	ldbu	r2,-24(fp)
 101f248:	10800058 	cmpnei	r2,r2,1
 101f24c:	1000011e 	bne	r2,zero,101f254 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 101f250:	101b1440 	call	101b144 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 101f254:	e0bffd17 	ldw	r2,-12(fp)
 101f258:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 101f25c:	e03ff915 	stw	zero,-28(fp)
             break;
 101f260:	00000906 	br	101f288 <OSSemDel+0x280>
 101f264:	e0bff817 	ldw	r2,-32(fp)
 101f268:	e0bff315 	stw	r2,-52(fp)
 101f26c:	e0bff317 	ldw	r2,-52(fp)
 101f270:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 101f274:	e0fffd17 	ldw	r3,-12(fp)
 101f278:	008001c4 	movi	r2,7
 101f27c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 101f280:	e0bffb17 	ldw	r2,-20(fp)
 101f284:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 101f288:	e0bff917 	ldw	r2,-28(fp)
 101f28c:	e0bfff15 	stw	r2,-4(fp)
 101f290:	e0bfff17 	ldw	r2,-4(fp)
}
 101f294:	e037883a 	mov	sp,fp
 101f298:	dfc00117 	ldw	ra,4(sp)
 101f29c:	df000017 	ldw	fp,0(sp)
 101f2a0:	dec00204 	addi	sp,sp,8
 101f2a4:	f800283a 	ret

0101f2a8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 101f2a8:	defff404 	addi	sp,sp,-48
 101f2ac:	dfc00b15 	stw	ra,44(sp)
 101f2b0:	df000a15 	stw	fp,40(sp)
 101f2b4:	df000a04 	addi	fp,sp,40
 101f2b8:	e13ffc15 	stw	r4,-16(fp)
 101f2bc:	e1bffe15 	stw	r6,-8(fp)
 101f2c0:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101f2c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 101f2c8:	e0bffe17 	ldw	r2,-8(fp)
 101f2cc:	1005003a 	cmpeq	r2,r2,zero
 101f2d0:	10008f1e 	bne	r2,zero,101f510 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101f2d4:	e0bffc17 	ldw	r2,-16(fp)
 101f2d8:	1004c03a 	cmpne	r2,r2,zero
 101f2dc:	1000041e 	bne	r2,zero,101f2f0 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 101f2e0:	e0fffe17 	ldw	r3,-8(fp)
 101f2e4:	00800104 	movi	r2,4
 101f2e8:	18800005 	stb	r2,0(r3)
        return;
 101f2ec:	00008806 	br	101f510 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101f2f0:	e0bffc17 	ldw	r2,-16(fp)
 101f2f4:	10800003 	ldbu	r2,0(r2)
 101f2f8:	10803fcc 	andi	r2,r2,255
 101f2fc:	108000e0 	cmpeqi	r2,r2,3
 101f300:	1000041e 	bne	r2,zero,101f314 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 101f304:	e0fffe17 	ldw	r3,-8(fp)
 101f308:	00800044 	movi	r2,1
 101f30c:	18800005 	stb	r2,0(r3)
        return;
 101f310:	00007f06 	br	101f510 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 101f314:	008040f4 	movhi	r2,259
 101f318:	10a42904 	addi	r2,r2,-28508
 101f31c:	10800003 	ldbu	r2,0(r2)
 101f320:	10803fcc 	andi	r2,r2,255
 101f324:	1005003a 	cmpeq	r2,r2,zero
 101f328:	1000041e 	bne	r2,zero,101f33c <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 101f32c:	e0fffe17 	ldw	r3,-8(fp)
 101f330:	00800084 	movi	r2,2
 101f334:	18800005 	stb	r2,0(r3)
        return;
 101f338:	00007506 	br	101f510 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 101f33c:	008040f4 	movhi	r2,259
 101f340:	10a41b04 	addi	r2,r2,-28564
 101f344:	10800003 	ldbu	r2,0(r2)
 101f348:	10803fcc 	andi	r2,r2,255
 101f34c:	1005003a 	cmpeq	r2,r2,zero
 101f350:	1000041e 	bne	r2,zero,101f364 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 101f354:	e0fffe17 	ldw	r3,-8(fp)
 101f358:	00800344 	movi	r2,13
 101f35c:	18800005 	stb	r2,0(r3)
        return;
 101f360:	00006b06 	br	101f510 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f364:	0005303a 	rdctl	r2,status
 101f368:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f36c:	e0fffa17 	ldw	r3,-24(fp)
 101f370:	00bfff84 	movi	r2,-2
 101f374:	1884703a 	and	r2,r3,r2
 101f378:	1001703a 	wrctl	status,r2
  
  return context;
 101f37c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101f380:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 101f384:	e0bffc17 	ldw	r2,-16(fp)
 101f388:	1080020b 	ldhu	r2,8(r2)
 101f38c:	10bfffcc 	andi	r2,r2,65535
 101f390:	1005003a 	cmpeq	r2,r2,zero
 101f394:	10000d1e 	bne	r2,zero,101f3cc <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 101f398:	e0bffc17 	ldw	r2,-16(fp)
 101f39c:	1080020b 	ldhu	r2,8(r2)
 101f3a0:	10bfffc4 	addi	r2,r2,-1
 101f3a4:	1007883a 	mov	r3,r2
 101f3a8:	e0bffc17 	ldw	r2,-16(fp)
 101f3ac:	10c0020d 	sth	r3,8(r2)
 101f3b0:	e0bffb17 	ldw	r2,-20(fp)
 101f3b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f3b8:	e0bff917 	ldw	r2,-28(fp)
 101f3bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 101f3c0:	e0bffe17 	ldw	r2,-8(fp)
 101f3c4:	10000005 	stb	zero,0(r2)
        return;
 101f3c8:	00005106 	br	101f510 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 101f3cc:	008040f4 	movhi	r2,259
 101f3d0:	10a42a04 	addi	r2,r2,-28504
 101f3d4:	10c00017 	ldw	r3,0(r2)
 101f3d8:	008040f4 	movhi	r2,259
 101f3dc:	10a42a04 	addi	r2,r2,-28504
 101f3e0:	10800017 	ldw	r2,0(r2)
 101f3e4:	10800c03 	ldbu	r2,48(r2)
 101f3e8:	10800054 	ori	r2,r2,1
 101f3ec:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 101f3f0:	008040f4 	movhi	r2,259
 101f3f4:	10a42a04 	addi	r2,r2,-28504
 101f3f8:	10800017 	ldw	r2,0(r2)
 101f3fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 101f400:	008040f4 	movhi	r2,259
 101f404:	10a42a04 	addi	r2,r2,-28504
 101f408:	10c00017 	ldw	r3,0(r2)
 101f40c:	e0bffd0b 	ldhu	r2,-12(fp)
 101f410:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 101f414:	e13ffc17 	ldw	r4,-16(fp)
 101f418:	101a8980 	call	101a898 <OS_EventTaskWait>
 101f41c:	e0bffb17 	ldw	r2,-20(fp)
 101f420:	e0bff815 	stw	r2,-32(fp)
 101f424:	e0bff817 	ldw	r2,-32(fp)
 101f428:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 101f42c:	101b1440 	call	101b144 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f430:	0005303a 	rdctl	r2,status
 101f434:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f438:	e0fff717 	ldw	r3,-36(fp)
 101f43c:	00bfff84 	movi	r2,-2
 101f440:	1884703a 	and	r2,r3,r2
 101f444:	1001703a 	wrctl	status,r2
  
  return context;
 101f448:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 101f44c:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 101f450:	008040f4 	movhi	r2,259
 101f454:	10a42a04 	addi	r2,r2,-28504
 101f458:	10800017 	ldw	r2,0(r2)
 101f45c:	10800c43 	ldbu	r2,49(r2)
 101f460:	10803fcc 	andi	r2,r2,255
 101f464:	e0bfff15 	stw	r2,-4(fp)
 101f468:	e0ffff17 	ldw	r3,-4(fp)
 101f46c:	1805003a 	cmpeq	r2,r3,zero
 101f470:	1000041e 	bne	r2,zero,101f484 <OSSemPend+0x1dc>
 101f474:	e0ffff17 	ldw	r3,-4(fp)
 101f478:	188000a0 	cmpeqi	r2,r3,2
 101f47c:	1000041e 	bne	r2,zero,101f490 <OSSemPend+0x1e8>
 101f480:	00000706 	br	101f4a0 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 101f484:	e0bffe17 	ldw	r2,-8(fp)
 101f488:	10000005 	stb	zero,0(r2)
             break;
 101f48c:	00000c06 	br	101f4c0 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 101f490:	e0fffe17 	ldw	r3,-8(fp)
 101f494:	00800384 	movi	r2,14
 101f498:	18800005 	stb	r2,0(r3)
             break;
 101f49c:	00000806 	br	101f4c0 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 101f4a0:	008040f4 	movhi	r2,259
 101f4a4:	10a42a04 	addi	r2,r2,-28504
 101f4a8:	11000017 	ldw	r4,0(r2)
 101f4ac:	e17ffc17 	ldw	r5,-16(fp)
 101f4b0:	101aafc0 	call	101aafc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 101f4b4:	e0fffe17 	ldw	r3,-8(fp)
 101f4b8:	00800284 	movi	r2,10
 101f4bc:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 101f4c0:	008040f4 	movhi	r2,259
 101f4c4:	10a42a04 	addi	r2,r2,-28504
 101f4c8:	10800017 	ldw	r2,0(r2)
 101f4cc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 101f4d0:	008040f4 	movhi	r2,259
 101f4d4:	10a42a04 	addi	r2,r2,-28504
 101f4d8:	10800017 	ldw	r2,0(r2)
 101f4dc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 101f4e0:	008040f4 	movhi	r2,259
 101f4e4:	10a42a04 	addi	r2,r2,-28504
 101f4e8:	10800017 	ldw	r2,0(r2)
 101f4ec:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 101f4f0:	008040f4 	movhi	r2,259
 101f4f4:	10a42a04 	addi	r2,r2,-28504
 101f4f8:	10800017 	ldw	r2,0(r2)
 101f4fc:	10000815 	stw	zero,32(r2)
 101f500:	e0bffb17 	ldw	r2,-20(fp)
 101f504:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f508:	e0bff617 	ldw	r2,-40(fp)
 101f50c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 101f510:	e037883a 	mov	sp,fp
 101f514:	dfc00117 	ldw	ra,4(sp)
 101f518:	df000017 	ldw	fp,0(sp)
 101f51c:	dec00204 	addi	sp,sp,8
 101f520:	f800283a 	ret

0101f524 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 101f524:	defff504 	addi	sp,sp,-44
 101f528:	dfc00a15 	stw	ra,40(sp)
 101f52c:	df000915 	stw	fp,36(sp)
 101f530:	df000904 	addi	fp,sp,36
 101f534:	e13ffc15 	stw	r4,-16(fp)
 101f538:	e1bffe15 	stw	r6,-8(fp)
 101f53c:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101f540:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 101f544:	e0bffe17 	ldw	r2,-8(fp)
 101f548:	1004c03a 	cmpne	r2,r2,zero
 101f54c:	1000021e 	bne	r2,zero,101f558 <OSSemPendAbort+0x34>
        return (0);
 101f550:	e03fff15 	stw	zero,-4(fp)
 101f554:	00004c06 	br	101f688 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101f558:	e0bffc17 	ldw	r2,-16(fp)
 101f55c:	1004c03a 	cmpne	r2,r2,zero
 101f560:	1000051e 	bne	r2,zero,101f578 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 101f564:	e0fffe17 	ldw	r3,-8(fp)
 101f568:	00800104 	movi	r2,4
 101f56c:	18800005 	stb	r2,0(r3)
        return (0);
 101f570:	e03fff15 	stw	zero,-4(fp)
 101f574:	00004406 	br	101f688 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101f578:	e0bffc17 	ldw	r2,-16(fp)
 101f57c:	10800003 	ldbu	r2,0(r2)
 101f580:	10803fcc 	andi	r2,r2,255
 101f584:	108000e0 	cmpeqi	r2,r2,3
 101f588:	1000051e 	bne	r2,zero,101f5a0 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 101f58c:	e0fffe17 	ldw	r3,-8(fp)
 101f590:	00800044 	movi	r2,1
 101f594:	18800005 	stb	r2,0(r3)
        return (0);
 101f598:	e03fff15 	stw	zero,-4(fp)
 101f59c:	00003a06 	br	101f688 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f5a0:	0005303a 	rdctl	r2,status
 101f5a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f5a8:	e0fff917 	ldw	r3,-28(fp)
 101f5ac:	00bfff84 	movi	r2,-2
 101f5b0:	1884703a 	and	r2,r3,r2
 101f5b4:	1001703a 	wrctl	status,r2
  
  return context;
 101f5b8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101f5bc:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 101f5c0:	e0bffc17 	ldw	r2,-16(fp)
 101f5c4:	10800283 	ldbu	r2,10(r2)
 101f5c8:	10803fcc 	andi	r2,r2,255
 101f5cc:	1005003a 	cmpeq	r2,r2,zero
 101f5d0:	1000261e 	bne	r2,zero,101f66c <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 101f5d4:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 101f5d8:	e0bffd03 	ldbu	r2,-12(fp)
 101f5dc:	10800060 	cmpeqi	r2,r2,1
 101f5e0:	1000091e 	bne	r2,zero,101f608 <OSSemPendAbort+0xe4>
 101f5e4:	00000e06 	br	101f620 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 101f5e8:	e13ffc17 	ldw	r4,-16(fp)
 101f5ec:	000b883a 	mov	r5,zero
 101f5f0:	01800044 	movi	r6,1
 101f5f4:	01c00084 	movi	r7,2
 101f5f8:	101a7040 	call	101a704 <OS_EventTaskRdy>
                     nbr_tasks++;
 101f5fc:	e0bffb03 	ldbu	r2,-20(fp)
 101f600:	10800044 	addi	r2,r2,1
 101f604:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 101f608:	e0bffc17 	ldw	r2,-16(fp)
 101f60c:	10800283 	ldbu	r2,10(r2)
 101f610:	10803fcc 	andi	r2,r2,255
 101f614:	1004c03a 	cmpne	r2,r2,zero
 101f618:	103ff31e 	bne	r2,zero,101f5e8 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 101f61c:	00000806 	br	101f640 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 101f620:	e13ffc17 	ldw	r4,-16(fp)
 101f624:	000b883a 	mov	r5,zero
 101f628:	01800044 	movi	r6,1
 101f62c:	01c00084 	movi	r7,2
 101f630:	101a7040 	call	101a704 <OS_EventTaskRdy>
                 nbr_tasks++;
 101f634:	e0bffb03 	ldbu	r2,-20(fp)
 101f638:	10800044 	addi	r2,r2,1
 101f63c:	e0bffb05 	stb	r2,-20(fp)
 101f640:	e0bffa17 	ldw	r2,-24(fp)
 101f644:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f648:	e0bff817 	ldw	r2,-32(fp)
 101f64c:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 101f650:	101b1440 	call	101b144 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 101f654:	e0fffe17 	ldw	r3,-8(fp)
 101f658:	00800384 	movi	r2,14
 101f65c:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 101f660:	e0bffb03 	ldbu	r2,-20(fp)
 101f664:	e0bfff15 	stw	r2,-4(fp)
 101f668:	00000706 	br	101f688 <OSSemPendAbort+0x164>
 101f66c:	e0bffa17 	ldw	r2,-24(fp)
 101f670:	e0bff715 	stw	r2,-36(fp)
 101f674:	e0bff717 	ldw	r2,-36(fp)
 101f678:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101f67c:	e0bffe17 	ldw	r2,-8(fp)
 101f680:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 101f684:	e03fff15 	stw	zero,-4(fp)
 101f688:	e0bfff17 	ldw	r2,-4(fp)
}
 101f68c:	e037883a 	mov	sp,fp
 101f690:	dfc00117 	ldw	ra,4(sp)
 101f694:	df000017 	ldw	fp,0(sp)
 101f698:	dec00204 	addi	sp,sp,8
 101f69c:	f800283a 	ret

0101f6a0 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 101f6a0:	defff704 	addi	sp,sp,-36
 101f6a4:	dfc00815 	stw	ra,32(sp)
 101f6a8:	df000715 	stw	fp,28(sp)
 101f6ac:	df000704 	addi	fp,sp,28
 101f6b0:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101f6b4:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101f6b8:	e0bffe17 	ldw	r2,-8(fp)
 101f6bc:	1004c03a 	cmpne	r2,r2,zero
 101f6c0:	1000031e 	bne	r2,zero,101f6d0 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 101f6c4:	00800104 	movi	r2,4
 101f6c8:	e0bfff15 	stw	r2,-4(fp)
 101f6cc:	00003806 	br	101f7b0 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101f6d0:	e0bffe17 	ldw	r2,-8(fp)
 101f6d4:	10800003 	ldbu	r2,0(r2)
 101f6d8:	10803fcc 	andi	r2,r2,255
 101f6dc:	108000e0 	cmpeqi	r2,r2,3
 101f6e0:	1000031e 	bne	r2,zero,101f6f0 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 101f6e4:	00800044 	movi	r2,1
 101f6e8:	e0bfff15 	stw	r2,-4(fp)
 101f6ec:	00003006 	br	101f7b0 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f6f0:	0005303a 	rdctl	r2,status
 101f6f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f6f8:	e0fffc17 	ldw	r3,-16(fp)
 101f6fc:	00bfff84 	movi	r2,-2
 101f700:	1884703a 	and	r2,r3,r2
 101f704:	1001703a 	wrctl	status,r2
  
  return context;
 101f708:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 101f70c:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 101f710:	e0bffe17 	ldw	r2,-8(fp)
 101f714:	10800283 	ldbu	r2,10(r2)
 101f718:	10803fcc 	andi	r2,r2,255
 101f71c:	1005003a 	cmpeq	r2,r2,zero
 101f720:	10000c1e 	bne	r2,zero,101f754 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 101f724:	e13ffe17 	ldw	r4,-8(fp)
 101f728:	000b883a 	mov	r5,zero
 101f72c:	01800044 	movi	r6,1
 101f730:	000f883a 	mov	r7,zero
 101f734:	101a7040 	call	101a704 <OS_EventTaskRdy>
 101f738:	e0bffd17 	ldw	r2,-12(fp)
 101f73c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f740:	e0bffb17 	ldw	r2,-20(fp)
 101f744:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 101f748:	101b1440 	call	101b144 <OS_Sched>
        return (OS_ERR_NONE);
 101f74c:	e03fff15 	stw	zero,-4(fp)
 101f750:	00001706 	br	101f7b0 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 101f754:	e0bffe17 	ldw	r2,-8(fp)
 101f758:	1080020b 	ldhu	r2,8(r2)
 101f75c:	10ffffcc 	andi	r3,r2,65535
 101f760:	00bfffd4 	movui	r2,65535
 101f764:	18800c26 	beq	r3,r2,101f798 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 101f768:	e0bffe17 	ldw	r2,-8(fp)
 101f76c:	1080020b 	ldhu	r2,8(r2)
 101f770:	10800044 	addi	r2,r2,1
 101f774:	1007883a 	mov	r3,r2
 101f778:	e0bffe17 	ldw	r2,-8(fp)
 101f77c:	10c0020d 	sth	r3,8(r2)
 101f780:	e0bffd17 	ldw	r2,-12(fp)
 101f784:	e0bffa15 	stw	r2,-24(fp)
 101f788:	e0bffa17 	ldw	r2,-24(fp)
 101f78c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 101f790:	e03fff15 	stw	zero,-4(fp)
 101f794:	00000606 	br	101f7b0 <OSSemPost+0x110>
 101f798:	e0bffd17 	ldw	r2,-12(fp)
 101f79c:	e0bff915 	stw	r2,-28(fp)
 101f7a0:	e0bff917 	ldw	r2,-28(fp)
 101f7a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 101f7a8:	00800c84 	movi	r2,50
 101f7ac:	e0bfff15 	stw	r2,-4(fp)
 101f7b0:	e0bfff17 	ldw	r2,-4(fp)
}
 101f7b4:	e037883a 	mov	sp,fp
 101f7b8:	dfc00117 	ldw	ra,4(sp)
 101f7bc:	df000017 	ldw	fp,0(sp)
 101f7c0:	dec00204 	addi	sp,sp,8
 101f7c4:	f800283a 	ret

0101f7c8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 101f7c8:	defff604 	addi	sp,sp,-40
 101f7cc:	df000915 	stw	fp,36(sp)
 101f7d0:	df000904 	addi	fp,sp,36
 101f7d4:	e13ffd15 	stw	r4,-12(fp)
 101f7d8:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101f7dc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 101f7e0:	e0bffd17 	ldw	r2,-12(fp)
 101f7e4:	1004c03a 	cmpne	r2,r2,zero
 101f7e8:	1000031e 	bne	r2,zero,101f7f8 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 101f7ec:	00800104 	movi	r2,4
 101f7f0:	e0bfff15 	stw	r2,-4(fp)
 101f7f4:	00003b06 	br	101f8e4 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 101f7f8:	e0bffe17 	ldw	r2,-8(fp)
 101f7fc:	1004c03a 	cmpne	r2,r2,zero
 101f800:	1000031e 	bne	r2,zero,101f810 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 101f804:	00800244 	movi	r2,9
 101f808:	e0bfff15 	stw	r2,-4(fp)
 101f80c:	00003506 	br	101f8e4 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 101f810:	e0bffd17 	ldw	r2,-12(fp)
 101f814:	10800003 	ldbu	r2,0(r2)
 101f818:	10803fcc 	andi	r2,r2,255
 101f81c:	108000e0 	cmpeqi	r2,r2,3
 101f820:	1000031e 	bne	r2,zero,101f830 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 101f824:	00800044 	movi	r2,1
 101f828:	e0bfff15 	stw	r2,-4(fp)
 101f82c:	00002d06 	br	101f8e4 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f830:	0005303a 	rdctl	r2,status
 101f834:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f838:	e0fff817 	ldw	r3,-32(fp)
 101f83c:	00bfff84 	movi	r2,-2
 101f840:	1884703a 	and	r2,r3,r2
 101f844:	1001703a 	wrctl	status,r2
  
  return context;
 101f848:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 101f84c:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 101f850:	e0bffd17 	ldw	r2,-12(fp)
 101f854:	10c00283 	ldbu	r3,10(r2)
 101f858:	e0bffe17 	ldw	r2,-8(fp)
 101f85c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 101f860:	e0bffd17 	ldw	r2,-12(fp)
 101f864:	108002c4 	addi	r2,r2,11
 101f868:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 101f86c:	e0bffe17 	ldw	r2,-8(fp)
 101f870:	10800084 	addi	r2,r2,2
 101f874:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101f878:	e03ffa05 	stb	zero,-24(fp)
 101f87c:	00000d06 	br	101f8b4 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 101f880:	e0bffc17 	ldw	r2,-16(fp)
 101f884:	10c00003 	ldbu	r3,0(r2)
 101f888:	e0bffb17 	ldw	r2,-20(fp)
 101f88c:	10c00005 	stb	r3,0(r2)
 101f890:	e0bffb17 	ldw	r2,-20(fp)
 101f894:	10800044 	addi	r2,r2,1
 101f898:	e0bffb15 	stw	r2,-20(fp)
 101f89c:	e0bffc17 	ldw	r2,-16(fp)
 101f8a0:	10800044 	addi	r2,r2,1
 101f8a4:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101f8a8:	e0bffa03 	ldbu	r2,-24(fp)
 101f8ac:	10800044 	addi	r2,r2,1
 101f8b0:	e0bffa05 	stb	r2,-24(fp)
 101f8b4:	e0bffa03 	ldbu	r2,-24(fp)
 101f8b8:	108000f0 	cmpltui	r2,r2,3
 101f8bc:	103ff01e 	bne	r2,zero,101f880 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 101f8c0:	e0bffd17 	ldw	r2,-12(fp)
 101f8c4:	10c0020b 	ldhu	r3,8(r2)
 101f8c8:	e0bffe17 	ldw	r2,-8(fp)
 101f8cc:	10c0000d 	sth	r3,0(r2)
 101f8d0:	e0bff917 	ldw	r2,-28(fp)
 101f8d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f8d8:	e0bff717 	ldw	r2,-36(fp)
 101f8dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101f8e0:	e03fff15 	stw	zero,-4(fp)
 101f8e4:	e0bfff17 	ldw	r2,-4(fp)
}
 101f8e8:	e037883a 	mov	sp,fp
 101f8ec:	df000017 	ldw	fp,0(sp)
 101f8f0:	dec00104 	addi	sp,sp,4
 101f8f4:	f800283a 	ret

0101f8f8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 101f8f8:	defff904 	addi	sp,sp,-28
 101f8fc:	df000615 	stw	fp,24(sp)
 101f900:	df000604 	addi	fp,sp,24
 101f904:	e13ffd15 	stw	r4,-12(fp)
 101f908:	e1bfff15 	stw	r6,-4(fp)
 101f90c:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101f910:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 101f914:	e0bfff17 	ldw	r2,-4(fp)
 101f918:	1005003a 	cmpeq	r2,r2,zero
 101f91c:	1000331e 	bne	r2,zero,101f9ec <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101f920:	e0bffd17 	ldw	r2,-12(fp)
 101f924:	1004c03a 	cmpne	r2,r2,zero
 101f928:	1000041e 	bne	r2,zero,101f93c <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 101f92c:	e0ffff17 	ldw	r3,-4(fp)
 101f930:	00800104 	movi	r2,4
 101f934:	18800005 	stb	r2,0(r3)
        return;
 101f938:	00002c06 	br	101f9ec <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101f93c:	e0bffd17 	ldw	r2,-12(fp)
 101f940:	10800003 	ldbu	r2,0(r2)
 101f944:	10803fcc 	andi	r2,r2,255
 101f948:	108000e0 	cmpeqi	r2,r2,3
 101f94c:	1000041e 	bne	r2,zero,101f960 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 101f950:	e0ffff17 	ldw	r3,-4(fp)
 101f954:	00800044 	movi	r2,1
 101f958:	18800005 	stb	r2,0(r3)
        return;
 101f95c:	00002306 	br	101f9ec <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f960:	0005303a 	rdctl	r2,status
 101f964:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f968:	e0fffb17 	ldw	r3,-20(fp)
 101f96c:	00bfff84 	movi	r2,-2
 101f970:	1884703a 	and	r2,r3,r2
 101f974:	1001703a 	wrctl	status,r2
  
  return context;
 101f978:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 101f97c:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 101f980:	e0bfff17 	ldw	r2,-4(fp)
 101f984:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 101f988:	e0bffd17 	ldw	r2,-12(fp)
 101f98c:	1080020b 	ldhu	r2,8(r2)
 101f990:	10bfffcc 	andi	r2,r2,65535
 101f994:	1005003a 	cmpeq	r2,r2,zero
 101f998:	1000041e 	bne	r2,zero,101f9ac <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 101f99c:	e0fffd17 	ldw	r3,-12(fp)
 101f9a0:	e0bffe0b 	ldhu	r2,-8(fp)
 101f9a4:	1880020d 	sth	r2,8(r3)
 101f9a8:	00000c06 	br	101f9dc <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 101f9ac:	e0bffd17 	ldw	r2,-12(fp)
 101f9b0:	10800283 	ldbu	r2,10(r2)
 101f9b4:	10803fcc 	andi	r2,r2,255
 101f9b8:	1004c03a 	cmpne	r2,r2,zero
 101f9bc:	1000041e 	bne	r2,zero,101f9d0 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 101f9c0:	e0fffd17 	ldw	r3,-12(fp)
 101f9c4:	e0bffe0b 	ldhu	r2,-8(fp)
 101f9c8:	1880020d 	sth	r2,8(r3)
 101f9cc:	00000306 	br	101f9dc <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 101f9d0:	e0ffff17 	ldw	r3,-4(fp)
 101f9d4:	00801244 	movi	r2,73
 101f9d8:	18800005 	stb	r2,0(r3)
 101f9dc:	e0bffc17 	ldw	r2,-16(fp)
 101f9e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f9e4:	e0bffa17 	ldw	r2,-24(fp)
 101f9e8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 101f9ec:	e037883a 	mov	sp,fp
 101f9f0:	df000017 	ldw	fp,0(sp)
 101f9f4:	dec00104 	addi	sp,sp,4
 101f9f8:	f800283a 	ret

0101f9fc <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 101f9fc:	defff004 	addi	sp,sp,-64
 101fa00:	dfc00f15 	stw	ra,60(sp)
 101fa04:	df000e15 	stw	fp,56(sp)
 101fa08:	df000e04 	addi	fp,sp,56
 101fa0c:	e13ffd05 	stb	r4,-12(fp)
 101fa10:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 101fa14:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 101fa18:	e0bffd03 	ldbu	r2,-12(fp)
 101fa1c:	10800530 	cmpltui	r2,r2,20
 101fa20:	1000061e 	bne	r2,zero,101fa3c <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 101fa24:	e0bffd03 	ldbu	r2,-12(fp)
 101fa28:	10803fe0 	cmpeqi	r2,r2,255
 101fa2c:	1000031e 	bne	r2,zero,101fa3c <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 101fa30:	00800a84 	movi	r2,42
 101fa34:	e0bfff15 	stw	r2,-4(fp)
 101fa38:	00014706 	br	101ff58 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 101fa3c:	e0bffe03 	ldbu	r2,-8(fp)
 101fa40:	10800530 	cmpltui	r2,r2,20
 101fa44:	1000031e 	bne	r2,zero,101fa54 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 101fa48:	00800a84 	movi	r2,42
 101fa4c:	e0bfff15 	stw	r2,-4(fp)
 101fa50:	00014106 	br	101ff58 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101fa54:	0005303a 	rdctl	r2,status
 101fa58:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101fa5c:	e0fff617 	ldw	r3,-40(fp)
 101fa60:	00bfff84 	movi	r2,-2
 101fa64:	1884703a 	and	r2,r3,r2
 101fa68:	1001703a 	wrctl	status,r2
  
  return context;
 101fa6c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101fa70:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 101fa74:	e0bffe03 	ldbu	r2,-8(fp)
 101fa78:	00c04134 	movhi	r3,260
 101fa7c:	18eab404 	addi	r3,r3,-21808
 101fa80:	1085883a 	add	r2,r2,r2
 101fa84:	1085883a 	add	r2,r2,r2
 101fa88:	10c5883a 	add	r2,r2,r3
 101fa8c:	10800017 	ldw	r2,0(r2)
 101fa90:	1005003a 	cmpeq	r2,r2,zero
 101fa94:	1000071e 	bne	r2,zero,101fab4 <OSTaskChangePrio+0xb8>
 101fa98:	e0bff717 	ldw	r2,-36(fp)
 101fa9c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101faa0:	e0bff517 	ldw	r2,-44(fp)
 101faa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 101faa8:	00800a04 	movi	r2,40
 101faac:	e0bfff15 	stw	r2,-4(fp)
 101fab0:	00012906 	br	101ff58 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 101fab4:	e0bffd03 	ldbu	r2,-12(fp)
 101fab8:	10803fd8 	cmpnei	r2,r2,255
 101fabc:	1000051e 	bne	r2,zero,101fad4 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 101fac0:	008040f4 	movhi	r2,259
 101fac4:	10a42a04 	addi	r2,r2,-28504
 101fac8:	10800017 	ldw	r2,0(r2)
 101facc:	10800c83 	ldbu	r2,50(r2)
 101fad0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 101fad4:	e0bffd03 	ldbu	r2,-12(fp)
 101fad8:	00c04134 	movhi	r3,260
 101fadc:	18eab404 	addi	r3,r3,-21808
 101fae0:	1085883a 	add	r2,r2,r2
 101fae4:	1085883a 	add	r2,r2,r2
 101fae8:	10c5883a 	add	r2,r2,r3
 101faec:	10800017 	ldw	r2,0(r2)
 101faf0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 101faf4:	e0bffa17 	ldw	r2,-24(fp)
 101faf8:	1004c03a 	cmpne	r2,r2,zero
 101fafc:	1000071e 	bne	r2,zero,101fb1c <OSTaskChangePrio+0x120>
 101fb00:	e0bff717 	ldw	r2,-36(fp)
 101fb04:	e0bff415 	stw	r2,-48(fp)
 101fb08:	e0bff417 	ldw	r2,-48(fp)
 101fb0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 101fb10:	00800a44 	movi	r2,41
 101fb14:	e0bfff15 	stw	r2,-4(fp)
 101fb18:	00010f06 	br	101ff58 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 101fb1c:	e0bffa17 	ldw	r2,-24(fp)
 101fb20:	10800058 	cmpnei	r2,r2,1
 101fb24:	1000071e 	bne	r2,zero,101fb44 <OSTaskChangePrio+0x148>
 101fb28:	e0bff717 	ldw	r2,-36(fp)
 101fb2c:	e0bff315 	stw	r2,-52(fp)
 101fb30:	e0bff317 	ldw	r2,-52(fp)
 101fb34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 101fb38:	008010c4 	movi	r2,67
 101fb3c:	e0bfff15 	stw	r2,-4(fp)
 101fb40:	00010506 	br	101ff58 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 101fb44:	e0bffe03 	ldbu	r2,-8(fp)
 101fb48:	1004d0fa 	srli	r2,r2,3
 101fb4c:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 101fb50:	e0bffe03 	ldbu	r2,-8(fp)
 101fb54:	108001cc 	andi	r2,r2,7
 101fb58:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 101fb5c:	e0fff983 	ldbu	r3,-26(fp)
 101fb60:	00800044 	movi	r2,1
 101fb64:	10c4983a 	sll	r2,r2,r3
 101fb68:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 101fb6c:	e0fff943 	ldbu	r3,-27(fp)
 101fb70:	00800044 	movi	r2,1
 101fb74:	10c4983a 	sll	r2,r2,r3
 101fb78:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 101fb7c:	e0bffd03 	ldbu	r2,-12(fp)
 101fb80:	00c04134 	movhi	r3,260
 101fb84:	18eab404 	addi	r3,r3,-21808
 101fb88:	1085883a 	add	r2,r2,r2
 101fb8c:	1085883a 	add	r2,r2,r2
 101fb90:	10c5883a 	add	r2,r2,r3
 101fb94:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 101fb98:	e0bffe03 	ldbu	r2,-8(fp)
 101fb9c:	00c04134 	movhi	r3,260
 101fba0:	18eab404 	addi	r3,r3,-21808
 101fba4:	1085883a 	add	r2,r2,r2
 101fba8:	1085883a 	add	r2,r2,r2
 101fbac:	10c7883a 	add	r3,r2,r3
 101fbb0:	e0bffa17 	ldw	r2,-24(fp)
 101fbb4:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 101fbb8:	e0bffa17 	ldw	r2,-24(fp)
 101fbbc:	10800d03 	ldbu	r2,52(r2)
 101fbc0:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 101fbc4:	e0bffa17 	ldw	r2,-24(fp)
 101fbc8:	10800d83 	ldbu	r2,54(r2)
 101fbcc:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 101fbd0:	e0bffa17 	ldw	r2,-24(fp)
 101fbd4:	10800d43 	ldbu	r2,53(r2)
 101fbd8:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 101fbdc:	e0fff903 	ldbu	r3,-28(fp)
 101fbe0:	008040f4 	movhi	r2,259
 101fbe4:	10a42744 	addi	r2,r2,-28515
 101fbe8:	10c5883a 	add	r2,r2,r3
 101fbec:	10c00003 	ldbu	r3,0(r2)
 101fbf0:	e0bff803 	ldbu	r2,-32(fp)
 101fbf4:	1884703a 	and	r2,r3,r2
 101fbf8:	10803fcc 	andi	r2,r2,255
 101fbfc:	1005003a 	cmpeq	r2,r2,zero
 101fc00:	1000381e 	bne	r2,zero,101fce4 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 101fc04:	e13ff903 	ldbu	r4,-28(fp)
 101fc08:	e0fff903 	ldbu	r3,-28(fp)
 101fc0c:	008040f4 	movhi	r2,259
 101fc10:	10a42744 	addi	r2,r2,-28515
 101fc14:	10c5883a 	add	r2,r2,r3
 101fc18:	10800003 	ldbu	r2,0(r2)
 101fc1c:	1007883a 	mov	r3,r2
 101fc20:	e0bff803 	ldbu	r2,-32(fp)
 101fc24:	0084303a 	nor	r2,zero,r2
 101fc28:	1884703a 	and	r2,r3,r2
 101fc2c:	1007883a 	mov	r3,r2
 101fc30:	008040f4 	movhi	r2,259
 101fc34:	10a42744 	addi	r2,r2,-28515
 101fc38:	1105883a 	add	r2,r2,r4
 101fc3c:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 101fc40:	e0fff903 	ldbu	r3,-28(fp)
 101fc44:	008040f4 	movhi	r2,259
 101fc48:	10a42744 	addi	r2,r2,-28515
 101fc4c:	10c5883a 	add	r2,r2,r3
 101fc50:	10800003 	ldbu	r2,0(r2)
 101fc54:	10803fcc 	andi	r2,r2,255
 101fc58:	1004c03a 	cmpne	r2,r2,zero
 101fc5c:	10000b1e 	bne	r2,zero,101fc8c <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 101fc60:	e0bff843 	ldbu	r2,-31(fp)
 101fc64:	0084303a 	nor	r2,zero,r2
 101fc68:	1007883a 	mov	r3,r2
 101fc6c:	008040f4 	movhi	r2,259
 101fc70:	10a42704 	addi	r2,r2,-28516
 101fc74:	10800003 	ldbu	r2,0(r2)
 101fc78:	1884703a 	and	r2,r3,r2
 101fc7c:	1007883a 	mov	r3,r2
 101fc80:	008040f4 	movhi	r2,259
 101fc84:	10a42704 	addi	r2,r2,-28516
 101fc88:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 101fc8c:	008040f4 	movhi	r2,259
 101fc90:	10a42704 	addi	r2,r2,-28516
 101fc94:	10c00003 	ldbu	r3,0(r2)
 101fc98:	e0bff8c3 	ldbu	r2,-29(fp)
 101fc9c:	1884b03a 	or	r2,r3,r2
 101fca0:	1007883a 	mov	r3,r2
 101fca4:	008040f4 	movhi	r2,259
 101fca8:	10a42704 	addi	r2,r2,-28516
 101fcac:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 101fcb0:	e13ff983 	ldbu	r4,-26(fp)
 101fcb4:	e0fff983 	ldbu	r3,-26(fp)
 101fcb8:	008040f4 	movhi	r2,259
 101fcbc:	10a42744 	addi	r2,r2,-28515
 101fcc0:	10c5883a 	add	r2,r2,r3
 101fcc4:	10c00003 	ldbu	r3,0(r2)
 101fcc8:	e0bff883 	ldbu	r2,-30(fp)
 101fccc:	1884b03a 	or	r2,r3,r2
 101fcd0:	1007883a 	mov	r3,r2
 101fcd4:	008040f4 	movhi	r2,259
 101fcd8:	10a42744 	addi	r2,r2,-28515
 101fcdc:	1105883a 	add	r2,r2,r4
 101fce0:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 101fce4:	e0bffa17 	ldw	r2,-24(fp)
 101fce8:	10800717 	ldw	r2,28(r2)
 101fcec:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 101fcf0:	e0bffc17 	ldw	r2,-16(fp)
 101fcf4:	1005003a 	cmpeq	r2,r2,zero
 101fcf8:	1000341e 	bne	r2,zero,101fdcc <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 101fcfc:	e13ff903 	ldbu	r4,-28(fp)
 101fd00:	e0fff903 	ldbu	r3,-28(fp)
 101fd04:	e0bffc17 	ldw	r2,-16(fp)
 101fd08:	1885883a 	add	r2,r3,r2
 101fd0c:	10800204 	addi	r2,r2,8
 101fd10:	108000c3 	ldbu	r2,3(r2)
 101fd14:	1007883a 	mov	r3,r2
 101fd18:	e0bff803 	ldbu	r2,-32(fp)
 101fd1c:	0084303a 	nor	r2,zero,r2
 101fd20:	1884703a 	and	r2,r3,r2
 101fd24:	1007883a 	mov	r3,r2
 101fd28:	e0bffc17 	ldw	r2,-16(fp)
 101fd2c:	2085883a 	add	r2,r4,r2
 101fd30:	10800204 	addi	r2,r2,8
 101fd34:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 101fd38:	e0fff903 	ldbu	r3,-28(fp)
 101fd3c:	e0bffc17 	ldw	r2,-16(fp)
 101fd40:	1885883a 	add	r2,r3,r2
 101fd44:	10800204 	addi	r2,r2,8
 101fd48:	108000c3 	ldbu	r2,3(r2)
 101fd4c:	10803fcc 	andi	r2,r2,255
 101fd50:	1004c03a 	cmpne	r2,r2,zero
 101fd54:	1000091e 	bne	r2,zero,101fd7c <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 101fd58:	e0bffc17 	ldw	r2,-16(fp)
 101fd5c:	10800283 	ldbu	r2,10(r2)
 101fd60:	1007883a 	mov	r3,r2
 101fd64:	e0bff843 	ldbu	r2,-31(fp)
 101fd68:	0084303a 	nor	r2,zero,r2
 101fd6c:	1884703a 	and	r2,r3,r2
 101fd70:	1007883a 	mov	r3,r2
 101fd74:	e0bffc17 	ldw	r2,-16(fp)
 101fd78:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 101fd7c:	e0bffc17 	ldw	r2,-16(fp)
 101fd80:	10c00283 	ldbu	r3,10(r2)
 101fd84:	e0bff8c3 	ldbu	r2,-29(fp)
 101fd88:	1884b03a 	or	r2,r3,r2
 101fd8c:	1007883a 	mov	r3,r2
 101fd90:	e0bffc17 	ldw	r2,-16(fp)
 101fd94:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 101fd98:	e13ff983 	ldbu	r4,-26(fp)
 101fd9c:	e0fff983 	ldbu	r3,-26(fp)
 101fda0:	e0bffc17 	ldw	r2,-16(fp)
 101fda4:	1885883a 	add	r2,r3,r2
 101fda8:	10800204 	addi	r2,r2,8
 101fdac:	10c000c3 	ldbu	r3,3(r2)
 101fdb0:	e0bff883 	ldbu	r2,-30(fp)
 101fdb4:	1884b03a 	or	r2,r3,r2
 101fdb8:	1007883a 	mov	r3,r2
 101fdbc:	e0bffc17 	ldw	r2,-16(fp)
 101fdc0:	2085883a 	add	r2,r4,r2
 101fdc4:	10800204 	addi	r2,r2,8
 101fdc8:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 101fdcc:	e0bffa17 	ldw	r2,-24(fp)
 101fdd0:	10800817 	ldw	r2,32(r2)
 101fdd4:	1005003a 	cmpeq	r2,r2,zero
 101fdd8:	1000441e 	bne	r2,zero,101feec <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 101fddc:	e0bffa17 	ldw	r2,-24(fp)
 101fde0:	10800817 	ldw	r2,32(r2)
 101fde4:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 101fde8:	e0bffb17 	ldw	r2,-20(fp)
 101fdec:	10800017 	ldw	r2,0(r2)
 101fdf0:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 101fdf4:	00003a06 	br	101fee0 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 101fdf8:	e13ff903 	ldbu	r4,-28(fp)
 101fdfc:	e0fff903 	ldbu	r3,-28(fp)
 101fe00:	e0bffc17 	ldw	r2,-16(fp)
 101fe04:	1885883a 	add	r2,r3,r2
 101fe08:	10800204 	addi	r2,r2,8
 101fe0c:	108000c3 	ldbu	r2,3(r2)
 101fe10:	1007883a 	mov	r3,r2
 101fe14:	e0bff803 	ldbu	r2,-32(fp)
 101fe18:	0084303a 	nor	r2,zero,r2
 101fe1c:	1884703a 	and	r2,r3,r2
 101fe20:	1007883a 	mov	r3,r2
 101fe24:	e0bffc17 	ldw	r2,-16(fp)
 101fe28:	2085883a 	add	r2,r4,r2
 101fe2c:	10800204 	addi	r2,r2,8
 101fe30:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 101fe34:	e0fff903 	ldbu	r3,-28(fp)
 101fe38:	e0bffc17 	ldw	r2,-16(fp)
 101fe3c:	1885883a 	add	r2,r3,r2
 101fe40:	10800204 	addi	r2,r2,8
 101fe44:	108000c3 	ldbu	r2,3(r2)
 101fe48:	10803fcc 	andi	r2,r2,255
 101fe4c:	1004c03a 	cmpne	r2,r2,zero
 101fe50:	1000091e 	bne	r2,zero,101fe78 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 101fe54:	e0bffc17 	ldw	r2,-16(fp)
 101fe58:	10800283 	ldbu	r2,10(r2)
 101fe5c:	1007883a 	mov	r3,r2
 101fe60:	e0bff843 	ldbu	r2,-31(fp)
 101fe64:	0084303a 	nor	r2,zero,r2
 101fe68:	1884703a 	and	r2,r3,r2
 101fe6c:	1007883a 	mov	r3,r2
 101fe70:	e0bffc17 	ldw	r2,-16(fp)
 101fe74:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 101fe78:	e0bffc17 	ldw	r2,-16(fp)
 101fe7c:	10c00283 	ldbu	r3,10(r2)
 101fe80:	e0bff8c3 	ldbu	r2,-29(fp)
 101fe84:	1884b03a 	or	r2,r3,r2
 101fe88:	1007883a 	mov	r3,r2
 101fe8c:	e0bffc17 	ldw	r2,-16(fp)
 101fe90:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 101fe94:	e13ff983 	ldbu	r4,-26(fp)
 101fe98:	e0fff983 	ldbu	r3,-26(fp)
 101fe9c:	e0bffc17 	ldw	r2,-16(fp)
 101fea0:	1885883a 	add	r2,r3,r2
 101fea4:	10800204 	addi	r2,r2,8
 101fea8:	10c000c3 	ldbu	r3,3(r2)
 101feac:	e0bff883 	ldbu	r2,-30(fp)
 101feb0:	1884b03a 	or	r2,r3,r2
 101feb4:	1007883a 	mov	r3,r2
 101feb8:	e0bffc17 	ldw	r2,-16(fp)
 101febc:	2085883a 	add	r2,r4,r2
 101fec0:	10800204 	addi	r2,r2,8
 101fec4:	10c000c5 	stb	r3,3(r2)
            pevents++;
 101fec8:	e0bffb17 	ldw	r2,-20(fp)
 101fecc:	10800104 	addi	r2,r2,4
 101fed0:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 101fed4:	e0bffb17 	ldw	r2,-20(fp)
 101fed8:	10800017 	ldw	r2,0(r2)
 101fedc:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 101fee0:	e0bffc17 	ldw	r2,-16(fp)
 101fee4:	1004c03a 	cmpne	r2,r2,zero
 101fee8:	103fc31e 	bne	r2,zero,101fdf8 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 101feec:	e0fffa17 	ldw	r3,-24(fp)
 101fef0:	e0bffe03 	ldbu	r2,-8(fp)
 101fef4:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 101fef8:	e0fffa17 	ldw	r3,-24(fp)
 101fefc:	e0bff983 	ldbu	r2,-26(fp)
 101ff00:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 101ff04:	e0fffa17 	ldw	r3,-24(fp)
 101ff08:	e0bff943 	ldbu	r2,-27(fp)
 101ff0c:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 101ff10:	e0fffa17 	ldw	r3,-24(fp)
 101ff14:	e0bff8c3 	ldbu	r2,-29(fp)
 101ff18:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 101ff1c:	e0fffa17 	ldw	r3,-24(fp)
 101ff20:	e0bff883 	ldbu	r2,-30(fp)
 101ff24:	18800d45 	stb	r2,53(r3)
 101ff28:	e0bff717 	ldw	r2,-36(fp)
 101ff2c:	e0bff215 	stw	r2,-56(fp)
 101ff30:	e0bff217 	ldw	r2,-56(fp)
 101ff34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 101ff38:	008040f4 	movhi	r2,259
 101ff3c:	10a41b44 	addi	r2,r2,-28563
 101ff40:	10800003 	ldbu	r2,0(r2)
 101ff44:	10803fcc 	andi	r2,r2,255
 101ff48:	10800058 	cmpnei	r2,r2,1
 101ff4c:	1000011e 	bne	r2,zero,101ff54 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 101ff50:	101b1440 	call	101b144 <OS_Sched>
    }
    return (OS_ERR_NONE);
 101ff54:	e03fff15 	stw	zero,-4(fp)
 101ff58:	e0bfff17 	ldw	r2,-4(fp)
}
 101ff5c:	e037883a 	mov	sp,fp
 101ff60:	dfc00117 	ldw	ra,4(sp)
 101ff64:	df000017 	ldw	fp,0(sp)
 101ff68:	dec00204 	addi	sp,sp,8
 101ff6c:	f800283a 	ret

0101ff70 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 101ff70:	deffed04 	addi	sp,sp,-76
 101ff74:	dfc01215 	stw	ra,72(sp)
 101ff78:	df001115 	stw	fp,68(sp)
 101ff7c:	df001104 	addi	fp,sp,68
 101ff80:	e13ffb15 	stw	r4,-20(fp)
 101ff84:	e17ffc15 	stw	r5,-16(fp)
 101ff88:	e1bffd15 	stw	r6,-12(fp)
 101ff8c:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 101ff90:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 101ff94:	e0bffe03 	ldbu	r2,-8(fp)
 101ff98:	10800570 	cmpltui	r2,r2,21
 101ff9c:	1000031e 	bne	r2,zero,101ffac <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 101ffa0:	00800a84 	movi	r2,42
 101ffa4:	e0bfff15 	stw	r2,-4(fp)
 101ffa8:	00006006 	br	102012c <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ffac:	0005303a 	rdctl	r2,status
 101ffb0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ffb4:	e0fff717 	ldw	r3,-36(fp)
 101ffb8:	00bfff84 	movi	r2,-2
 101ffbc:	1884703a 	and	r2,r3,r2
 101ffc0:	1001703a 	wrctl	status,r2
  
  return context;
 101ffc4:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101ffc8:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 101ffcc:	008040f4 	movhi	r2,259
 101ffd0:	10a42904 	addi	r2,r2,-28508
 101ffd4:	10800003 	ldbu	r2,0(r2)
 101ffd8:	10803fcc 	andi	r2,r2,255
 101ffdc:	1005003a 	cmpeq	r2,r2,zero
 101ffe0:	1000071e 	bne	r2,zero,1020000 <OSTaskCreate+0x90>
 101ffe4:	e0bff817 	ldw	r2,-32(fp)
 101ffe8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ffec:	e0bff617 	ldw	r2,-40(fp)
 101fff0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 101fff4:	00800f04 	movi	r2,60
 101fff8:	e0bfff15 	stw	r2,-4(fp)
 101fffc:	00004b06 	br	102012c <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 1020000:	e0bffe03 	ldbu	r2,-8(fp)
 1020004:	00c04134 	movhi	r3,260
 1020008:	18eab404 	addi	r3,r3,-21808
 102000c:	1085883a 	add	r2,r2,r2
 1020010:	1085883a 	add	r2,r2,r2
 1020014:	10c5883a 	add	r2,r2,r3
 1020018:	10800017 	ldw	r2,0(r2)
 102001c:	1004c03a 	cmpne	r2,r2,zero
 1020020:	10003c1e 	bne	r2,zero,1020114 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 1020024:	e0bffe03 	ldbu	r2,-8(fp)
 1020028:	00c04134 	movhi	r3,260
 102002c:	18eab404 	addi	r3,r3,-21808
 1020030:	1085883a 	add	r2,r2,r2
 1020034:	1085883a 	add	r2,r2,r2
 1020038:	10c7883a 	add	r3,r2,r3
 102003c:	00800044 	movi	r2,1
 1020040:	18800015 	stw	r2,0(r3)
 1020044:	e0bff817 	ldw	r2,-32(fp)
 1020048:	e0bff515 	stw	r2,-44(fp)
 102004c:	e0bff517 	ldw	r2,-44(fp)
 1020050:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 1020054:	e13ffb17 	ldw	r4,-20(fp)
 1020058:	e17ffc17 	ldw	r5,-16(fp)
 102005c:	e1bffd17 	ldw	r6,-12(fp)
 1020060:	000f883a 	mov	r7,zero
 1020064:	1024c2c0 	call	1024c2c <OSTaskStkInit>
 1020068:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 102006c:	e13ffe03 	ldbu	r4,-8(fp)
 1020070:	d8000015 	stw	zero,0(sp)
 1020074:	d8000115 	stw	zero,4(sp)
 1020078:	d8000215 	stw	zero,8(sp)
 102007c:	e17ffa17 	ldw	r5,-24(fp)
 1020080:	000d883a 	mov	r6,zero
 1020084:	000f883a 	mov	r7,zero
 1020088:	101b54c0 	call	101b54c <OS_TCBInit>
 102008c:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 1020090:	e0bff903 	ldbu	r2,-28(fp)
 1020094:	1004c03a 	cmpne	r2,r2,zero
 1020098:	1000081e 	bne	r2,zero,10200bc <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 102009c:	008040f4 	movhi	r2,259
 10200a0:	10a41b44 	addi	r2,r2,-28563
 10200a4:	10800003 	ldbu	r2,0(r2)
 10200a8:	10803fcc 	andi	r2,r2,255
 10200ac:	10800058 	cmpnei	r2,r2,1
 10200b0:	1000151e 	bne	r2,zero,1020108 <OSTaskCreate+0x198>
                OS_Sched();
 10200b4:	101b1440 	call	101b144 <OS_Sched>
 10200b8:	00001306 	br	1020108 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10200bc:	0005303a 	rdctl	r2,status
 10200c0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10200c4:	e0fff417 	ldw	r3,-48(fp)
 10200c8:	00bfff84 	movi	r2,-2
 10200cc:	1884703a 	and	r2,r3,r2
 10200d0:	1001703a 	wrctl	status,r2
  
  return context;
 10200d4:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 10200d8:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 10200dc:	e0bffe03 	ldbu	r2,-8(fp)
 10200e0:	00c04134 	movhi	r3,260
 10200e4:	18eab404 	addi	r3,r3,-21808
 10200e8:	1085883a 	add	r2,r2,r2
 10200ec:	1085883a 	add	r2,r2,r2
 10200f0:	10c5883a 	add	r2,r2,r3
 10200f4:	10000015 	stw	zero,0(r2)
 10200f8:	e0bff817 	ldw	r2,-32(fp)
 10200fc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020100:	e0bff317 	ldw	r2,-52(fp)
 1020104:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 1020108:	e0bff903 	ldbu	r2,-28(fp)
 102010c:	e0bfff15 	stw	r2,-4(fp)
 1020110:	00000606 	br	102012c <OSTaskCreate+0x1bc>
 1020114:	e0bff817 	ldw	r2,-32(fp)
 1020118:	e0bff215 	stw	r2,-56(fp)
 102011c:	e0bff217 	ldw	r2,-56(fp)
 1020120:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 1020124:	00800a04 	movi	r2,40
 1020128:	e0bfff15 	stw	r2,-4(fp)
 102012c:	e0bfff17 	ldw	r2,-4(fp)
}
 1020130:	e037883a 	mov	sp,fp
 1020134:	dfc00117 	ldw	ra,4(sp)
 1020138:	df000017 	ldw	fp,0(sp)
 102013c:	dec00204 	addi	sp,sp,8
 1020140:	f800283a 	ret

01020144 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 1020144:	deffeb04 	addi	sp,sp,-84
 1020148:	dfc01415 	stw	ra,80(sp)
 102014c:	df001315 	stw	fp,76(sp)
 1020150:	df001304 	addi	fp,sp,76
 1020154:	e13ff915 	stw	r4,-28(fp)
 1020158:	e17ffa15 	stw	r5,-24(fp)
 102015c:	e1bffb15 	stw	r6,-20(fp)
 1020160:	e0800217 	ldw	r2,8(fp)
 1020164:	e0c00617 	ldw	r3,24(fp)
 1020168:	e1fffc05 	stb	r7,-16(fp)
 102016c:	e0bffd0d 	sth	r2,-12(fp)
 1020170:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 1020174:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 1020178:	e0bffc03 	ldbu	r2,-16(fp)
 102017c:	10800570 	cmpltui	r2,r2,21
 1020180:	1000031e 	bne	r2,zero,1020190 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 1020184:	00800a84 	movi	r2,42
 1020188:	e0bfff15 	stw	r2,-4(fp)
 102018c:	00006706 	br	102032c <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1020190:	0005303a 	rdctl	r2,status
 1020194:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1020198:	e0fff517 	ldw	r3,-44(fp)
 102019c:	00bfff84 	movi	r2,-2
 10201a0:	1884703a 	and	r2,r3,r2
 10201a4:	1001703a 	wrctl	status,r2
  
  return context;
 10201a8:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10201ac:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 10201b0:	008040f4 	movhi	r2,259
 10201b4:	10a42904 	addi	r2,r2,-28508
 10201b8:	10800003 	ldbu	r2,0(r2)
 10201bc:	10803fcc 	andi	r2,r2,255
 10201c0:	1005003a 	cmpeq	r2,r2,zero
 10201c4:	1000071e 	bne	r2,zero,10201e4 <OSTaskCreateExt+0xa0>
 10201c8:	e0bff617 	ldw	r2,-40(fp)
 10201cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10201d0:	e0bff417 	ldw	r2,-48(fp)
 10201d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 10201d8:	00800f04 	movi	r2,60
 10201dc:	e0bfff15 	stw	r2,-4(fp)
 10201e0:	00005206 	br	102032c <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 10201e4:	e0bffc03 	ldbu	r2,-16(fp)
 10201e8:	00c04134 	movhi	r3,260
 10201ec:	18eab404 	addi	r3,r3,-21808
 10201f0:	1085883a 	add	r2,r2,r2
 10201f4:	1085883a 	add	r2,r2,r2
 10201f8:	10c5883a 	add	r2,r2,r3
 10201fc:	10800017 	ldw	r2,0(r2)
 1020200:	1004c03a 	cmpne	r2,r2,zero
 1020204:	1000431e 	bne	r2,zero,1020314 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 1020208:	e0bffc03 	ldbu	r2,-16(fp)
 102020c:	00c04134 	movhi	r3,260
 1020210:	18eab404 	addi	r3,r3,-21808
 1020214:	1085883a 	add	r2,r2,r2
 1020218:	1085883a 	add	r2,r2,r2
 102021c:	10c7883a 	add	r3,r2,r3
 1020220:	00800044 	movi	r2,1
 1020224:	18800015 	stw	r2,0(r3)
 1020228:	e0bff617 	ldw	r2,-40(fp)
 102022c:	e0bff315 	stw	r2,-52(fp)
 1020230:	e0bff317 	ldw	r2,-52(fp)
 1020234:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 1020238:	e1bffe0b 	ldhu	r6,-8(fp)
 102023c:	e1000317 	ldw	r4,12(fp)
 1020240:	e1400417 	ldw	r5,16(fp)
 1020244:	10213c00 	call	10213c0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 1020248:	e1fffe0b 	ldhu	r7,-8(fp)
 102024c:	e13ff917 	ldw	r4,-28(fp)
 1020250:	e17ffa17 	ldw	r5,-24(fp)
 1020254:	e1bffb17 	ldw	r6,-20(fp)
 1020258:	1024c2c0 	call	1024c2c <OSTaskStkInit>
 102025c:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 1020260:	e13ffc03 	ldbu	r4,-16(fp)
 1020264:	e1fffd0b 	ldhu	r7,-12(fp)
 1020268:	e0fffe0b 	ldhu	r3,-8(fp)
 102026c:	e0800417 	ldw	r2,16(fp)
 1020270:	d8800015 	stw	r2,0(sp)
 1020274:	e0800517 	ldw	r2,20(fp)
 1020278:	d8800115 	stw	r2,4(sp)
 102027c:	d8c00215 	stw	r3,8(sp)
 1020280:	e17ff817 	ldw	r5,-32(fp)
 1020284:	e1800317 	ldw	r6,12(fp)
 1020288:	101b54c0 	call	101b54c <OS_TCBInit>
 102028c:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 1020290:	e0bff703 	ldbu	r2,-36(fp)
 1020294:	1004c03a 	cmpne	r2,r2,zero
 1020298:	1000081e 	bne	r2,zero,10202bc <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 102029c:	008040f4 	movhi	r2,259
 10202a0:	10a41b44 	addi	r2,r2,-28563
 10202a4:	10800003 	ldbu	r2,0(r2)
 10202a8:	10803fcc 	andi	r2,r2,255
 10202ac:	10800058 	cmpnei	r2,r2,1
 10202b0:	1000151e 	bne	r2,zero,1020308 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 10202b4:	101b1440 	call	101b144 <OS_Sched>
 10202b8:	00001306 	br	1020308 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10202bc:	0005303a 	rdctl	r2,status
 10202c0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10202c4:	e0fff217 	ldw	r3,-56(fp)
 10202c8:	00bfff84 	movi	r2,-2
 10202cc:	1884703a 	and	r2,r3,r2
 10202d0:	1001703a 	wrctl	status,r2
  
  return context;
 10202d4:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 10202d8:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 10202dc:	e0bffc03 	ldbu	r2,-16(fp)
 10202e0:	00c04134 	movhi	r3,260
 10202e4:	18eab404 	addi	r3,r3,-21808
 10202e8:	1085883a 	add	r2,r2,r2
 10202ec:	1085883a 	add	r2,r2,r2
 10202f0:	10c5883a 	add	r2,r2,r3
 10202f4:	10000015 	stw	zero,0(r2)
 10202f8:	e0bff617 	ldw	r2,-40(fp)
 10202fc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020300:	e0bff117 	ldw	r2,-60(fp)
 1020304:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 1020308:	e0bff703 	ldbu	r2,-36(fp)
 102030c:	e0bfff15 	stw	r2,-4(fp)
 1020310:	00000606 	br	102032c <OSTaskCreateExt+0x1e8>
 1020314:	e0bff617 	ldw	r2,-40(fp)
 1020318:	e0bff015 	stw	r2,-64(fp)
 102031c:	e0bff017 	ldw	r2,-64(fp)
 1020320:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 1020324:	00800a04 	movi	r2,40
 1020328:	e0bfff15 	stw	r2,-4(fp)
 102032c:	e0bfff17 	ldw	r2,-4(fp)
}
 1020330:	e037883a 	mov	sp,fp
 1020334:	dfc00117 	ldw	ra,4(sp)
 1020338:	df000017 	ldw	fp,0(sp)
 102033c:	dec00204 	addi	sp,sp,8
 1020340:	f800283a 	ret

01020344 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 1020344:	defff304 	addi	sp,sp,-52
 1020348:	dfc00c15 	stw	ra,48(sp)
 102034c:	df000b15 	stw	fp,44(sp)
 1020350:	df000b04 	addi	fp,sp,44
 1020354:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 1020358:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 102035c:	008040f4 	movhi	r2,259
 1020360:	10a42904 	addi	r2,r2,-28508
 1020364:	10800003 	ldbu	r2,0(r2)
 1020368:	10803fcc 	andi	r2,r2,255
 102036c:	1005003a 	cmpeq	r2,r2,zero
 1020370:	1000031e 	bne	r2,zero,1020380 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 1020374:	00801004 	movi	r2,64
 1020378:	e0bfff15 	stw	r2,-4(fp)
 102037c:	0000ee06 	br	1020738 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 1020380:	e0bffe03 	ldbu	r2,-8(fp)
 1020384:	10800518 	cmpnei	r2,r2,20
 1020388:	1000031e 	bne	r2,zero,1020398 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 102038c:	00800f84 	movi	r2,62
 1020390:	e0bfff15 	stw	r2,-4(fp)
 1020394:	0000e806 	br	1020738 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 1020398:	e0bffe03 	ldbu	r2,-8(fp)
 102039c:	10800530 	cmpltui	r2,r2,20
 10203a0:	1000061e 	bne	r2,zero,10203bc <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 10203a4:	e0bffe03 	ldbu	r2,-8(fp)
 10203a8:	10803fe0 	cmpeqi	r2,r2,255
 10203ac:	1000031e 	bne	r2,zero,10203bc <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 10203b0:	00800a84 	movi	r2,42
 10203b4:	e0bfff15 	stw	r2,-4(fp)
 10203b8:	0000df06 	br	1020738 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10203bc:	0005303a 	rdctl	r2,status
 10203c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10203c4:	e0fffa17 	ldw	r3,-24(fp)
 10203c8:	00bfff84 	movi	r2,-2
 10203cc:	1884703a 	and	r2,r3,r2
 10203d0:	1001703a 	wrctl	status,r2
  
  return context;
 10203d4:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 10203d8:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 10203dc:	e0bffe03 	ldbu	r2,-8(fp)
 10203e0:	10803fd8 	cmpnei	r2,r2,255
 10203e4:	1000051e 	bne	r2,zero,10203fc <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 10203e8:	008040f4 	movhi	r2,259
 10203ec:	10a42a04 	addi	r2,r2,-28504
 10203f0:	10800017 	ldw	r2,0(r2)
 10203f4:	10800c83 	ldbu	r2,50(r2)
 10203f8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 10203fc:	e0bffe03 	ldbu	r2,-8(fp)
 1020400:	00c04134 	movhi	r3,260
 1020404:	18eab404 	addi	r3,r3,-21808
 1020408:	1085883a 	add	r2,r2,r2
 102040c:	1085883a 	add	r2,r2,r2
 1020410:	10c5883a 	add	r2,r2,r3
 1020414:	10800017 	ldw	r2,0(r2)
 1020418:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 102041c:	e0bffc17 	ldw	r2,-16(fp)
 1020420:	1004c03a 	cmpne	r2,r2,zero
 1020424:	1000071e 	bne	r2,zero,1020444 <OSTaskDel+0x100>
 1020428:	e0bffb17 	ldw	r2,-20(fp)
 102042c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020430:	e0bff917 	ldw	r2,-28(fp)
 1020434:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1020438:	008010c4 	movi	r2,67
 102043c:	e0bfff15 	stw	r2,-4(fp)
 1020440:	0000bd06 	br	1020738 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 1020444:	e0bffc17 	ldw	r2,-16(fp)
 1020448:	10800058 	cmpnei	r2,r2,1
 102044c:	1000071e 	bne	r2,zero,102046c <OSTaskDel+0x128>
 1020450:	e0bffb17 	ldw	r2,-20(fp)
 1020454:	e0bff815 	stw	r2,-32(fp)
 1020458:	e0bff817 	ldw	r2,-32(fp)
 102045c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 1020460:	00800f44 	movi	r2,61
 1020464:	e0bfff15 	stw	r2,-4(fp)
 1020468:	0000b306 	br	1020738 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 102046c:	e0bffc17 	ldw	r2,-16(fp)
 1020470:	10800d03 	ldbu	r2,52(r2)
 1020474:	11003fcc 	andi	r4,r2,255
 1020478:	e0bffc17 	ldw	r2,-16(fp)
 102047c:	10800d03 	ldbu	r2,52(r2)
 1020480:	10c03fcc 	andi	r3,r2,255
 1020484:	008040f4 	movhi	r2,259
 1020488:	10a42744 	addi	r2,r2,-28515
 102048c:	10c5883a 	add	r2,r2,r3
 1020490:	10800003 	ldbu	r2,0(r2)
 1020494:	1007883a 	mov	r3,r2
 1020498:	e0bffc17 	ldw	r2,-16(fp)
 102049c:	10800d43 	ldbu	r2,53(r2)
 10204a0:	0084303a 	nor	r2,zero,r2
 10204a4:	1884703a 	and	r2,r3,r2
 10204a8:	1007883a 	mov	r3,r2
 10204ac:	008040f4 	movhi	r2,259
 10204b0:	10a42744 	addi	r2,r2,-28515
 10204b4:	1105883a 	add	r2,r2,r4
 10204b8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 10204bc:	e0bffc17 	ldw	r2,-16(fp)
 10204c0:	10800d03 	ldbu	r2,52(r2)
 10204c4:	10c03fcc 	andi	r3,r2,255
 10204c8:	008040f4 	movhi	r2,259
 10204cc:	10a42744 	addi	r2,r2,-28515
 10204d0:	10c5883a 	add	r2,r2,r3
 10204d4:	10800003 	ldbu	r2,0(r2)
 10204d8:	10803fcc 	andi	r2,r2,255
 10204dc:	1004c03a 	cmpne	r2,r2,zero
 10204e0:	10000c1e 	bne	r2,zero,1020514 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 10204e4:	e0bffc17 	ldw	r2,-16(fp)
 10204e8:	10800d83 	ldbu	r2,54(r2)
 10204ec:	0084303a 	nor	r2,zero,r2
 10204f0:	1007883a 	mov	r3,r2
 10204f4:	008040f4 	movhi	r2,259
 10204f8:	10a42704 	addi	r2,r2,-28516
 10204fc:	10800003 	ldbu	r2,0(r2)
 1020500:	1884703a 	and	r2,r3,r2
 1020504:	1007883a 	mov	r3,r2
 1020508:	008040f4 	movhi	r2,259
 102050c:	10a42704 	addi	r2,r2,-28516
 1020510:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 1020514:	e0bffc17 	ldw	r2,-16(fp)
 1020518:	10800717 	ldw	r2,28(r2)
 102051c:	1005003a 	cmpeq	r2,r2,zero
 1020520:	1000041e 	bne	r2,zero,1020534 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 1020524:	e0bffc17 	ldw	r2,-16(fp)
 1020528:	11400717 	ldw	r5,28(r2)
 102052c:	e13ffc17 	ldw	r4,-16(fp)
 1020530:	101aafc0 	call	101aafc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 1020534:	e0bffc17 	ldw	r2,-16(fp)
 1020538:	10800817 	ldw	r2,32(r2)
 102053c:	1005003a 	cmpeq	r2,r2,zero
 1020540:	1000041e 	bne	r2,zero,1020554 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 1020544:	e0bffc17 	ldw	r2,-16(fp)
 1020548:	11400817 	ldw	r5,32(r2)
 102054c:	e13ffc17 	ldw	r4,-16(fp)
 1020550:	101abb40 	call	101abb4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 1020554:	e0bffc17 	ldw	r2,-16(fp)
 1020558:	10800a17 	ldw	r2,40(r2)
 102055c:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 1020560:	e0bffd17 	ldw	r2,-12(fp)
 1020564:	1005003a 	cmpeq	r2,r2,zero
 1020568:	1000021e 	bne	r2,zero,1020574 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 102056c:	e13ffd17 	ldw	r4,-12(fp)
 1020570:	101d2480 	call	101d248 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 1020574:	e0bffc17 	ldw	r2,-16(fp)
 1020578:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 102057c:	e0bffc17 	ldw	r2,-16(fp)
 1020580:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 1020584:	e0bffc17 	ldw	r2,-16(fp)
 1020588:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 102058c:	008040f4 	movhi	r2,259
 1020590:	10a41b04 	addi	r2,r2,-28564
 1020594:	10800003 	ldbu	r2,0(r2)
 1020598:	10803fcc 	andi	r2,r2,255
 102059c:	10803fe0 	cmpeqi	r2,r2,255
 10205a0:	1000081e 	bne	r2,zero,10205c4 <OSTaskDel+0x280>
        OSLockNesting++;
 10205a4:	008040f4 	movhi	r2,259
 10205a8:	10a41b04 	addi	r2,r2,-28564
 10205ac:	10800003 	ldbu	r2,0(r2)
 10205b0:	10800044 	addi	r2,r2,1
 10205b4:	1007883a 	mov	r3,r2
 10205b8:	008040f4 	movhi	r2,259
 10205bc:	10a41b04 	addi	r2,r2,-28564
 10205c0:	10c00005 	stb	r3,0(r2)
 10205c4:	e0bffb17 	ldw	r2,-20(fp)
 10205c8:	e0bff715 	stw	r2,-36(fp)
 10205cc:	e0bff717 	ldw	r2,-36(fp)
 10205d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 10205d4:	101a6e80 	call	101a6e8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10205d8:	0005303a 	rdctl	r2,status
 10205dc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10205e0:	e0fff617 	ldw	r3,-40(fp)
 10205e4:	00bfff84 	movi	r2,-2
 10205e8:	1884703a 	and	r2,r3,r2
 10205ec:	1001703a 	wrctl	status,r2
  
  return context;
 10205f0:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 10205f4:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 10205f8:	008040f4 	movhi	r2,259
 10205fc:	10a41b04 	addi	r2,r2,-28564
 1020600:	10800003 	ldbu	r2,0(r2)
 1020604:	10803fcc 	andi	r2,r2,255
 1020608:	1005003a 	cmpeq	r2,r2,zero
 102060c:	1000081e 	bne	r2,zero,1020630 <OSTaskDel+0x2ec>
        OSLockNesting--;
 1020610:	008040f4 	movhi	r2,259
 1020614:	10a41b04 	addi	r2,r2,-28564
 1020618:	10800003 	ldbu	r2,0(r2)
 102061c:	10bfffc4 	addi	r2,r2,-1
 1020620:	1007883a 	mov	r3,r2
 1020624:	008040f4 	movhi	r2,259
 1020628:	10a41b04 	addi	r2,r2,-28564
 102062c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 1020630:	e13ffc17 	ldw	r4,-16(fp)
 1020634:	1024f5c0 	call	1024f5c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 1020638:	008040f4 	movhi	r2,259
 102063c:	10a42344 	addi	r2,r2,-28531
 1020640:	10800003 	ldbu	r2,0(r2)
 1020644:	10bfffc4 	addi	r2,r2,-1
 1020648:	1007883a 	mov	r3,r2
 102064c:	008040f4 	movhi	r2,259
 1020650:	10a42344 	addi	r2,r2,-28531
 1020654:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 1020658:	e0bffe03 	ldbu	r2,-8(fp)
 102065c:	00c04134 	movhi	r3,260
 1020660:	18eab404 	addi	r3,r3,-21808
 1020664:	1085883a 	add	r2,r2,r2
 1020668:	1085883a 	add	r2,r2,r2
 102066c:	10c5883a 	add	r2,r2,r3
 1020670:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 1020674:	e0bffc17 	ldw	r2,-16(fp)
 1020678:	10800617 	ldw	r2,24(r2)
 102067c:	1004c03a 	cmpne	r2,r2,zero
 1020680:	1000091e 	bne	r2,zero,10206a8 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 1020684:	e0bffc17 	ldw	r2,-16(fp)
 1020688:	10800517 	ldw	r2,20(r2)
 102068c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 1020690:	e0bffc17 	ldw	r2,-16(fp)
 1020694:	10c00517 	ldw	r3,20(r2)
 1020698:	008040f4 	movhi	r2,259
 102069c:	10a41e04 	addi	r2,r2,-28552
 10206a0:	10c00015 	stw	r3,0(r2)
 10206a4:	00000a06 	br	10206d0 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 10206a8:	e0bffc17 	ldw	r2,-16(fp)
 10206ac:	10c00617 	ldw	r3,24(r2)
 10206b0:	e0bffc17 	ldw	r2,-16(fp)
 10206b4:	10800517 	ldw	r2,20(r2)
 10206b8:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 10206bc:	e0bffc17 	ldw	r2,-16(fp)
 10206c0:	10c00517 	ldw	r3,20(r2)
 10206c4:	e0bffc17 	ldw	r2,-16(fp)
 10206c8:	10800617 	ldw	r2,24(r2)
 10206cc:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 10206d0:	008040f4 	movhi	r2,259
 10206d4:	10a42204 	addi	r2,r2,-28536
 10206d8:	10c00017 	ldw	r3,0(r2)
 10206dc:	e0bffc17 	ldw	r2,-16(fp)
 10206e0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 10206e4:	00c040f4 	movhi	r3,259
 10206e8:	18e42204 	addi	r3,r3,-28536
 10206ec:	e0bffc17 	ldw	r2,-16(fp)
 10206f0:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 10206f4:	e0fffc17 	ldw	r3,-16(fp)
 10206f8:	00800fc4 	movi	r2,63
 10206fc:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 1020700:	e0bffc17 	ldw	r2,-16(fp)
 1020704:	10001345 	stb	zero,77(r2)
 1020708:	e0bffb17 	ldw	r2,-20(fp)
 102070c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020710:	e0bff517 	ldw	r2,-44(fp)
 1020714:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 1020718:	008040f4 	movhi	r2,259
 102071c:	10a41b44 	addi	r2,r2,-28563
 1020720:	10800003 	ldbu	r2,0(r2)
 1020724:	10803fcc 	andi	r2,r2,255
 1020728:	10800058 	cmpnei	r2,r2,1
 102072c:	1000011e 	bne	r2,zero,1020734 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 1020730:	101b1440 	call	101b144 <OS_Sched>
    }
    return (OS_ERR_NONE);
 1020734:	e03fff15 	stw	zero,-4(fp)
 1020738:	e0bfff17 	ldw	r2,-4(fp)
}
 102073c:	e037883a 	mov	sp,fp
 1020740:	dfc00117 	ldw	ra,4(sp)
 1020744:	df000017 	ldw	fp,0(sp)
 1020748:	dec00204 	addi	sp,sp,8
 102074c:	f800283a 	ret

01020750 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 1020750:	defff404 	addi	sp,sp,-48
 1020754:	df000b15 	stw	fp,44(sp)
 1020758:	df000b04 	addi	fp,sp,44
 102075c:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1020760:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 1020764:	e0bffe03 	ldbu	r2,-8(fp)
 1020768:	10800518 	cmpnei	r2,r2,20
 102076c:	1000031e 	bne	r2,zero,102077c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 1020770:	00800f84 	movi	r2,62
 1020774:	e0bfff15 	stw	r2,-4(fp)
 1020778:	00004c06 	br	10208ac <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 102077c:	e0bffe03 	ldbu	r2,-8(fp)
 1020780:	10800530 	cmpltui	r2,r2,20
 1020784:	1000061e 	bne	r2,zero,10207a0 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 1020788:	e0bffe03 	ldbu	r2,-8(fp)
 102078c:	10803fe0 	cmpeqi	r2,r2,255
 1020790:	1000031e 	bne	r2,zero,10207a0 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 1020794:	00800a84 	movi	r2,42
 1020798:	e0bfff15 	stw	r2,-4(fp)
 102079c:	00004306 	br	10208ac <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 10207a0:	e0bffe03 	ldbu	r2,-8(fp)
 10207a4:	10803fd8 	cmpnei	r2,r2,255
 10207a8:	1000141e 	bne	r2,zero,10207fc <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10207ac:	0005303a 	rdctl	r2,status
 10207b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10207b4:	e0fffa17 	ldw	r3,-24(fp)
 10207b8:	00bfff84 	movi	r2,-2
 10207bc:	1884703a 	and	r2,r3,r2
 10207c0:	1001703a 	wrctl	status,r2
  
  return context;
 10207c4:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 10207c8:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 10207cc:	008040f4 	movhi	r2,259
 10207d0:	10a42a04 	addi	r2,r2,-28504
 10207d4:	10800017 	ldw	r2,0(r2)
 10207d8:	10800dc3 	ldbu	r2,55(r2)
 10207dc:	e0bffd05 	stb	r2,-12(fp)
 10207e0:	e0bffb17 	ldw	r2,-20(fp)
 10207e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10207e8:	e0bff917 	ldw	r2,-28(fp)
 10207ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 10207f0:	e0bffd03 	ldbu	r2,-12(fp)
 10207f4:	e0bfff15 	stw	r2,-4(fp)
 10207f8:	00002c06 	br	10208ac <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10207fc:	0005303a 	rdctl	r2,status
 1020800:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1020804:	e0fff817 	ldw	r3,-32(fp)
 1020808:	00bfff84 	movi	r2,-2
 102080c:	1884703a 	and	r2,r3,r2
 1020810:	1001703a 	wrctl	status,r2
  
  return context;
 1020814:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 1020818:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 102081c:	e0bffe03 	ldbu	r2,-8(fp)
 1020820:	00c04134 	movhi	r3,260
 1020824:	18eab404 	addi	r3,r3,-21808
 1020828:	1085883a 	add	r2,r2,r2
 102082c:	1085883a 	add	r2,r2,r2
 1020830:	10c5883a 	add	r2,r2,r3
 1020834:	10800017 	ldw	r2,0(r2)
 1020838:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 102083c:	e0bffc17 	ldw	r2,-16(fp)
 1020840:	1004c03a 	cmpne	r2,r2,zero
 1020844:	1000071e 	bne	r2,zero,1020864 <OSTaskDelReq+0x114>
 1020848:	e0bffb17 	ldw	r2,-20(fp)
 102084c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020850:	e0bff717 	ldw	r2,-36(fp)
 1020854:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 1020858:	008010c4 	movi	r2,67
 102085c:	e0bfff15 	stw	r2,-4(fp)
 1020860:	00001206 	br	10208ac <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 1020864:	e0bffc17 	ldw	r2,-16(fp)
 1020868:	10800058 	cmpnei	r2,r2,1
 102086c:	1000071e 	bne	r2,zero,102088c <OSTaskDelReq+0x13c>
 1020870:	e0bffb17 	ldw	r2,-20(fp)
 1020874:	e0bff615 	stw	r2,-40(fp)
 1020878:	e0bff617 	ldw	r2,-40(fp)
 102087c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 1020880:	00800f44 	movi	r2,61
 1020884:	e0bfff15 	stw	r2,-4(fp)
 1020888:	00000806 	br	10208ac <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 102088c:	e0fffc17 	ldw	r3,-16(fp)
 1020890:	00800fc4 	movi	r2,63
 1020894:	18800dc5 	stb	r2,55(r3)
 1020898:	e0bffb17 	ldw	r2,-20(fp)
 102089c:	e0bff515 	stw	r2,-44(fp)
 10208a0:	e0bff517 	ldw	r2,-44(fp)
 10208a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10208a8:	e03fff15 	stw	zero,-4(fp)
 10208ac:	e0bfff17 	ldw	r2,-4(fp)
}
 10208b0:	e037883a 	mov	sp,fp
 10208b4:	df000017 	ldw	fp,0(sp)
 10208b8:	dec00104 	addi	sp,sp,4
 10208bc:	f800283a 	ret

010208c0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 10208c0:	defff304 	addi	sp,sp,-52
 10208c4:	dfc00c15 	stw	ra,48(sp)
 10208c8:	df000b15 	stw	fp,44(sp)
 10208cc:	df000b04 	addi	fp,sp,44
 10208d0:	e17ffd15 	stw	r5,-12(fp)
 10208d4:	e1bffe15 	stw	r6,-8(fp)
 10208d8:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 10208dc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 10208e0:	e0bffe17 	ldw	r2,-8(fp)
 10208e4:	1004c03a 	cmpne	r2,r2,zero
 10208e8:	1000021e 	bne	r2,zero,10208f4 <OSTaskNameGet+0x34>
        return (0);
 10208ec:	e03fff15 	stw	zero,-4(fp)
 10208f0:	00005b06 	br	1020a60 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 10208f4:	e0bffc03 	ldbu	r2,-16(fp)
 10208f8:	10800570 	cmpltui	r2,r2,21
 10208fc:	1000081e 	bne	r2,zero,1020920 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 1020900:	e0bffc03 	ldbu	r2,-16(fp)
 1020904:	10803fe0 	cmpeqi	r2,r2,255
 1020908:	1000051e 	bne	r2,zero,1020920 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 102090c:	e0fffe17 	ldw	r3,-8(fp)
 1020910:	00800a84 	movi	r2,42
 1020914:	18800005 	stb	r2,0(r3)
            return (0);
 1020918:	e03fff15 	stw	zero,-4(fp)
 102091c:	00005006 	br	1020a60 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 1020920:	e0bffd17 	ldw	r2,-12(fp)
 1020924:	1004c03a 	cmpne	r2,r2,zero
 1020928:	1000051e 	bne	r2,zero,1020940 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 102092c:	e0fffe17 	ldw	r3,-8(fp)
 1020930:	00800304 	movi	r2,12
 1020934:	18800005 	stb	r2,0(r3)
        return (0);
 1020938:	e03fff15 	stw	zero,-4(fp)
 102093c:	00004806 	br	1020a60 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 1020940:	008040f4 	movhi	r2,259
 1020944:	10a42904 	addi	r2,r2,-28508
 1020948:	10800003 	ldbu	r2,0(r2)
 102094c:	10803fcc 	andi	r2,r2,255
 1020950:	1005003a 	cmpeq	r2,r2,zero
 1020954:	1000051e 	bne	r2,zero,102096c <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 1020958:	e0fffe17 	ldw	r3,-8(fp)
 102095c:	00800444 	movi	r2,17
 1020960:	18800005 	stb	r2,0(r3)
        return (0);
 1020964:	e03fff15 	stw	zero,-4(fp)
 1020968:	00003d06 	br	1020a60 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102096c:	0005303a 	rdctl	r2,status
 1020970:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1020974:	e0fff817 	ldw	r3,-32(fp)
 1020978:	00bfff84 	movi	r2,-2
 102097c:	1884703a 	and	r2,r3,r2
 1020980:	1001703a 	wrctl	status,r2
  
  return context;
 1020984:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 1020988:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 102098c:	e0bffc03 	ldbu	r2,-16(fp)
 1020990:	10803fd8 	cmpnei	r2,r2,255
 1020994:	1000051e 	bne	r2,zero,10209ac <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 1020998:	008040f4 	movhi	r2,259
 102099c:	10a42a04 	addi	r2,r2,-28504
 10209a0:	10800017 	ldw	r2,0(r2)
 10209a4:	10800c83 	ldbu	r2,50(r2)
 10209a8:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 10209ac:	e0bffc03 	ldbu	r2,-16(fp)
 10209b0:	00c04134 	movhi	r3,260
 10209b4:	18eab404 	addi	r3,r3,-21808
 10209b8:	1085883a 	add	r2,r2,r2
 10209bc:	1085883a 	add	r2,r2,r2
 10209c0:	10c5883a 	add	r2,r2,r3
 10209c4:	10800017 	ldw	r2,0(r2)
 10209c8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 10209cc:	e0bffb17 	ldw	r2,-20(fp)
 10209d0:	1004c03a 	cmpne	r2,r2,zero
 10209d4:	1000091e 	bne	r2,zero,10209fc <OSTaskNameGet+0x13c>
 10209d8:	e0bff917 	ldw	r2,-28(fp)
 10209dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10209e0:	e0bff717 	ldw	r2,-36(fp)
 10209e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 10209e8:	e0fffe17 	ldw	r3,-8(fp)
 10209ec:	008010c4 	movi	r2,67
 10209f0:	18800005 	stb	r2,0(r3)
        return (0);
 10209f4:	e03fff15 	stw	zero,-4(fp)
 10209f8:	00001906 	br	1020a60 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 10209fc:	e0bffb17 	ldw	r2,-20(fp)
 1020a00:	10800058 	cmpnei	r2,r2,1
 1020a04:	1000091e 	bne	r2,zero,1020a2c <OSTaskNameGet+0x16c>
 1020a08:	e0bff917 	ldw	r2,-28(fp)
 1020a0c:	e0bff615 	stw	r2,-40(fp)
 1020a10:	e0bff617 	ldw	r2,-40(fp)
 1020a14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1020a18:	e0fffe17 	ldw	r3,-8(fp)
 1020a1c:	008010c4 	movi	r2,67
 1020a20:	18800005 	stb	r2,0(r3)
        return (0);
 1020a24:	e03fff15 	stw	zero,-4(fp)
 1020a28:	00000d06 	br	1020a60 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 1020a2c:	e0bffb17 	ldw	r2,-20(fp)
 1020a30:	11401304 	addi	r5,r2,76
 1020a34:	e13ffd17 	ldw	r4,-12(fp)
 1020a38:	101b2880 	call	101b288 <OS_StrCopy>
 1020a3c:	e0bffa05 	stb	r2,-24(fp)
 1020a40:	e0bff917 	ldw	r2,-28(fp)
 1020a44:	e0bff515 	stw	r2,-44(fp)
 1020a48:	e0bff517 	ldw	r2,-44(fp)
 1020a4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1020a50:	e0bffe17 	ldw	r2,-8(fp)
 1020a54:	10000005 	stb	zero,0(r2)
    return (len);
 1020a58:	e0bffa03 	ldbu	r2,-24(fp)
 1020a5c:	e0bfff15 	stw	r2,-4(fp)
 1020a60:	e0bfff17 	ldw	r2,-4(fp)
}
 1020a64:	e037883a 	mov	sp,fp
 1020a68:	dfc00117 	ldw	ra,4(sp)
 1020a6c:	df000017 	ldw	fp,0(sp)
 1020a70:	dec00204 	addi	sp,sp,8
 1020a74:	f800283a 	ret

01020a78 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 1020a78:	defff304 	addi	sp,sp,-52
 1020a7c:	dfc00c15 	stw	ra,48(sp)
 1020a80:	df000b15 	stw	fp,44(sp)
 1020a84:	df000b04 	addi	fp,sp,44
 1020a88:	e17ffe15 	stw	r5,-8(fp)
 1020a8c:	e1bfff15 	stw	r6,-4(fp)
 1020a90:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 1020a94:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 1020a98:	e0bfff17 	ldw	r2,-4(fp)
 1020a9c:	1005003a 	cmpeq	r2,r2,zero
 1020aa0:	1000611e 	bne	r2,zero,1020c28 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 1020aa4:	e0bffd03 	ldbu	r2,-12(fp)
 1020aa8:	10800570 	cmpltui	r2,r2,21
 1020aac:	1000071e 	bne	r2,zero,1020acc <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 1020ab0:	e0bffd03 	ldbu	r2,-12(fp)
 1020ab4:	10803fe0 	cmpeqi	r2,r2,255
 1020ab8:	1000041e 	bne	r2,zero,1020acc <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 1020abc:	e0ffff17 	ldw	r3,-4(fp)
 1020ac0:	00800a84 	movi	r2,42
 1020ac4:	18800005 	stb	r2,0(r3)
            return;
 1020ac8:	00005706 	br	1020c28 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 1020acc:	e0bffe17 	ldw	r2,-8(fp)
 1020ad0:	1004c03a 	cmpne	r2,r2,zero
 1020ad4:	1000041e 	bne	r2,zero,1020ae8 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 1020ad8:	e0ffff17 	ldw	r3,-4(fp)
 1020adc:	00800304 	movi	r2,12
 1020ae0:	18800005 	stb	r2,0(r3)
        return;
 1020ae4:	00005006 	br	1020c28 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 1020ae8:	008040f4 	movhi	r2,259
 1020aec:	10a42904 	addi	r2,r2,-28508
 1020af0:	10800003 	ldbu	r2,0(r2)
 1020af4:	10803fcc 	andi	r2,r2,255
 1020af8:	1005003a 	cmpeq	r2,r2,zero
 1020afc:	1000041e 	bne	r2,zero,1020b10 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 1020b00:	e0ffff17 	ldw	r3,-4(fp)
 1020b04:	00800484 	movi	r2,18
 1020b08:	18800005 	stb	r2,0(r3)
        return;
 1020b0c:	00004606 	br	1020c28 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1020b10:	0005303a 	rdctl	r2,status
 1020b14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1020b18:	e0fff917 	ldw	r3,-28(fp)
 1020b1c:	00bfff84 	movi	r2,-2
 1020b20:	1884703a 	and	r2,r3,r2
 1020b24:	1001703a 	wrctl	status,r2
  
  return context;
 1020b28:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1020b2c:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 1020b30:	e0bffd03 	ldbu	r2,-12(fp)
 1020b34:	10803fd8 	cmpnei	r2,r2,255
 1020b38:	1000051e 	bne	r2,zero,1020b50 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 1020b3c:	008040f4 	movhi	r2,259
 1020b40:	10a42a04 	addi	r2,r2,-28504
 1020b44:	10800017 	ldw	r2,0(r2)
 1020b48:	10800c83 	ldbu	r2,50(r2)
 1020b4c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1020b50:	e0bffd03 	ldbu	r2,-12(fp)
 1020b54:	00c04134 	movhi	r3,260
 1020b58:	18eab404 	addi	r3,r3,-21808
 1020b5c:	1085883a 	add	r2,r2,r2
 1020b60:	1085883a 	add	r2,r2,r2
 1020b64:	10c5883a 	add	r2,r2,r3
 1020b68:	10800017 	ldw	r2,0(r2)
 1020b6c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 1020b70:	e0bffb17 	ldw	r2,-20(fp)
 1020b74:	1004c03a 	cmpne	r2,r2,zero
 1020b78:	1000081e 	bne	r2,zero,1020b9c <OSTaskNameSet+0x124>
 1020b7c:	e0bffa17 	ldw	r2,-24(fp)
 1020b80:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020b84:	e0bff817 	ldw	r2,-32(fp)
 1020b88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1020b8c:	e0ffff17 	ldw	r3,-4(fp)
 1020b90:	008010c4 	movi	r2,67
 1020b94:	18800005 	stb	r2,0(r3)
        return;
 1020b98:	00002306 	br	1020c28 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 1020b9c:	e0bffb17 	ldw	r2,-20(fp)
 1020ba0:	10800058 	cmpnei	r2,r2,1
 1020ba4:	1000081e 	bne	r2,zero,1020bc8 <OSTaskNameSet+0x150>
 1020ba8:	e0bffa17 	ldw	r2,-24(fp)
 1020bac:	e0bff715 	stw	r2,-36(fp)
 1020bb0:	e0bff717 	ldw	r2,-36(fp)
 1020bb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1020bb8:	e0ffff17 	ldw	r3,-4(fp)
 1020bbc:	008010c4 	movi	r2,67
 1020bc0:	18800005 	stb	r2,0(r3)
        return;
 1020bc4:	00001806 	br	1020c28 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 1020bc8:	e13ffe17 	ldw	r4,-8(fp)
 1020bcc:	101b3080 	call	101b308 <OS_StrLen>
 1020bd0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 1020bd4:	e0bffc03 	ldbu	r2,-16(fp)
 1020bd8:	10800830 	cmpltui	r2,r2,32
 1020bdc:	1000081e 	bne	r2,zero,1020c00 <OSTaskNameSet+0x188>
 1020be0:	e0bffa17 	ldw	r2,-24(fp)
 1020be4:	e0bff615 	stw	r2,-40(fp)
 1020be8:	e0bff617 	ldw	r2,-40(fp)
 1020bec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 1020bf0:	e0ffff17 	ldw	r3,-4(fp)
 1020bf4:	00801044 	movi	r2,65
 1020bf8:	18800005 	stb	r2,0(r3)
        return;
 1020bfc:	00000a06 	br	1020c28 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 1020c00:	e0bffb17 	ldw	r2,-20(fp)
 1020c04:	11001304 	addi	r4,r2,76
 1020c08:	e17ffe17 	ldw	r5,-8(fp)
 1020c0c:	101b2880 	call	101b288 <OS_StrCopy>
 1020c10:	e0bffa17 	ldw	r2,-24(fp)
 1020c14:	e0bff515 	stw	r2,-44(fp)
 1020c18:	e0bff517 	ldw	r2,-44(fp)
 1020c1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1020c20:	e0bfff17 	ldw	r2,-4(fp)
 1020c24:	10000005 	stb	zero,0(r2)
}
 1020c28:	e037883a 	mov	sp,fp
 1020c2c:	dfc00117 	ldw	ra,4(sp)
 1020c30:	df000017 	ldw	fp,0(sp)
 1020c34:	dec00204 	addi	sp,sp,8
 1020c38:	f800283a 	ret

01020c3c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 1020c3c:	defff304 	addi	sp,sp,-52
 1020c40:	dfc00c15 	stw	ra,48(sp)
 1020c44:	df000b15 	stw	fp,44(sp)
 1020c48:	df000b04 	addi	fp,sp,44
 1020c4c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 1020c50:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 1020c54:	e0bffe03 	ldbu	r2,-8(fp)
 1020c58:	10800530 	cmpltui	r2,r2,20
 1020c5c:	1000031e 	bne	r2,zero,1020c6c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 1020c60:	00800a84 	movi	r2,42
 1020c64:	e0bfff15 	stw	r2,-4(fp)
 1020c68:	00007406 	br	1020e3c <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1020c6c:	0005303a 	rdctl	r2,status
 1020c70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1020c74:	e0fffb17 	ldw	r3,-20(fp)
 1020c78:	00bfff84 	movi	r2,-2
 1020c7c:	1884703a 	and	r2,r3,r2
 1020c80:	1001703a 	wrctl	status,r2
  
  return context;
 1020c84:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1020c88:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 1020c8c:	e0bffe03 	ldbu	r2,-8(fp)
 1020c90:	00c04134 	movhi	r3,260
 1020c94:	18eab404 	addi	r3,r3,-21808
 1020c98:	1085883a 	add	r2,r2,r2
 1020c9c:	1085883a 	add	r2,r2,r2
 1020ca0:	10c5883a 	add	r2,r2,r3
 1020ca4:	10800017 	ldw	r2,0(r2)
 1020ca8:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 1020cac:	e0bffd17 	ldw	r2,-12(fp)
 1020cb0:	1004c03a 	cmpne	r2,r2,zero
 1020cb4:	1000071e 	bne	r2,zero,1020cd4 <OSTaskResume+0x98>
 1020cb8:	e0bffc17 	ldw	r2,-16(fp)
 1020cbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020cc0:	e0bffa17 	ldw	r2,-24(fp)
 1020cc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 1020cc8:	00801184 	movi	r2,70
 1020ccc:	e0bfff15 	stw	r2,-4(fp)
 1020cd0:	00005a06 	br	1020e3c <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 1020cd4:	e0bffd17 	ldw	r2,-12(fp)
 1020cd8:	10800058 	cmpnei	r2,r2,1
 1020cdc:	1000071e 	bne	r2,zero,1020cfc <OSTaskResume+0xc0>
 1020ce0:	e0bffc17 	ldw	r2,-16(fp)
 1020ce4:	e0bff915 	stw	r2,-28(fp)
 1020ce8:	e0bff917 	ldw	r2,-28(fp)
 1020cec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1020cf0:	008010c4 	movi	r2,67
 1020cf4:	e0bfff15 	stw	r2,-4(fp)
 1020cf8:	00005006 	br	1020e3c <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 1020cfc:	e0bffd17 	ldw	r2,-12(fp)
 1020d00:	10800c03 	ldbu	r2,48(r2)
 1020d04:	10803fcc 	andi	r2,r2,255
 1020d08:	1080020c 	andi	r2,r2,8
 1020d0c:	1005003a 	cmpeq	r2,r2,zero
 1020d10:	1000441e 	bne	r2,zero,1020e24 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 1020d14:	e0bffd17 	ldw	r2,-12(fp)
 1020d18:	10c00c03 	ldbu	r3,48(r2)
 1020d1c:	00bffdc4 	movi	r2,-9
 1020d20:	1884703a 	and	r2,r3,r2
 1020d24:	1007883a 	mov	r3,r2
 1020d28:	e0bffd17 	ldw	r2,-12(fp)
 1020d2c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 1020d30:	e0bffd17 	ldw	r2,-12(fp)
 1020d34:	10800c03 	ldbu	r2,48(r2)
 1020d38:	10803fcc 	andi	r2,r2,255
 1020d3c:	1004c03a 	cmpne	r2,r2,zero
 1020d40:	1000321e 	bne	r2,zero,1020e0c <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 1020d44:	e0bffd17 	ldw	r2,-12(fp)
 1020d48:	10800b8b 	ldhu	r2,46(r2)
 1020d4c:	10bfffcc 	andi	r2,r2,65535
 1020d50:	1004c03a 	cmpne	r2,r2,zero
 1020d54:	1000281e 	bne	r2,zero,1020df8 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 1020d58:	e0bffd17 	ldw	r2,-12(fp)
 1020d5c:	10c00d83 	ldbu	r3,54(r2)
 1020d60:	008040f4 	movhi	r2,259
 1020d64:	10a42704 	addi	r2,r2,-28516
 1020d68:	10800003 	ldbu	r2,0(r2)
 1020d6c:	1884b03a 	or	r2,r3,r2
 1020d70:	1007883a 	mov	r3,r2
 1020d74:	008040f4 	movhi	r2,259
 1020d78:	10a42704 	addi	r2,r2,-28516
 1020d7c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1020d80:	e0bffd17 	ldw	r2,-12(fp)
 1020d84:	10800d03 	ldbu	r2,52(r2)
 1020d88:	11003fcc 	andi	r4,r2,255
 1020d8c:	e0bffd17 	ldw	r2,-12(fp)
 1020d90:	10800d03 	ldbu	r2,52(r2)
 1020d94:	10c03fcc 	andi	r3,r2,255
 1020d98:	008040f4 	movhi	r2,259
 1020d9c:	10a42744 	addi	r2,r2,-28515
 1020da0:	10c5883a 	add	r2,r2,r3
 1020da4:	10c00003 	ldbu	r3,0(r2)
 1020da8:	e0bffd17 	ldw	r2,-12(fp)
 1020dac:	10800d43 	ldbu	r2,53(r2)
 1020db0:	1884b03a 	or	r2,r3,r2
 1020db4:	1007883a 	mov	r3,r2
 1020db8:	008040f4 	movhi	r2,259
 1020dbc:	10a42744 	addi	r2,r2,-28515
 1020dc0:	1105883a 	add	r2,r2,r4
 1020dc4:	10c00005 	stb	r3,0(r2)
 1020dc8:	e0bffc17 	ldw	r2,-16(fp)
 1020dcc:	e0bff815 	stw	r2,-32(fp)
 1020dd0:	e0bff817 	ldw	r2,-32(fp)
 1020dd4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 1020dd8:	008040f4 	movhi	r2,259
 1020ddc:	10a41b44 	addi	r2,r2,-28563
 1020de0:	10800003 	ldbu	r2,0(r2)
 1020de4:	10803fcc 	andi	r2,r2,255
 1020de8:	10800058 	cmpnei	r2,r2,1
 1020dec:	10000b1e 	bne	r2,zero,1020e1c <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 1020df0:	101b1440 	call	101b144 <OS_Sched>
 1020df4:	00000906 	br	1020e1c <OSTaskResume+0x1e0>
 1020df8:	e0bffc17 	ldw	r2,-16(fp)
 1020dfc:	e0bff715 	stw	r2,-36(fp)
 1020e00:	e0bff717 	ldw	r2,-36(fp)
 1020e04:	1001703a 	wrctl	status,r2
 1020e08:	00000406 	br	1020e1c <OSTaskResume+0x1e0>
 1020e0c:	e0bffc17 	ldw	r2,-16(fp)
 1020e10:	e0bff615 	stw	r2,-40(fp)
 1020e14:	e0bff617 	ldw	r2,-40(fp)
 1020e18:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 1020e1c:	e03fff15 	stw	zero,-4(fp)
 1020e20:	00000606 	br	1020e3c <OSTaskResume+0x200>
 1020e24:	e0bffc17 	ldw	r2,-16(fp)
 1020e28:	e0bff515 	stw	r2,-44(fp)
 1020e2c:	e0bff517 	ldw	r2,-44(fp)
 1020e30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 1020e34:	00801104 	movi	r2,68
 1020e38:	e0bfff15 	stw	r2,-4(fp)
 1020e3c:	e0bfff17 	ldw	r2,-4(fp)
}
 1020e40:	e037883a 	mov	sp,fp
 1020e44:	dfc00117 	ldw	ra,4(sp)
 1020e48:	df000017 	ldw	fp,0(sp)
 1020e4c:	dec00204 	addi	sp,sp,8
 1020e50:	f800283a 	ret

01020e54 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 1020e54:	defff204 	addi	sp,sp,-56
 1020e58:	df000d15 	stw	fp,52(sp)
 1020e5c:	df000d04 	addi	fp,sp,52
 1020e60:	e17ffe15 	stw	r5,-8(fp)
 1020e64:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1020e68:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 1020e6c:	e0bffd03 	ldbu	r2,-12(fp)
 1020e70:	10800570 	cmpltui	r2,r2,21
 1020e74:	1000061e 	bne	r2,zero,1020e90 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 1020e78:	e0bffd03 	ldbu	r2,-12(fp)
 1020e7c:	10803fe0 	cmpeqi	r2,r2,255
 1020e80:	1000031e 	bne	r2,zero,1020e90 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 1020e84:	00800a84 	movi	r2,42
 1020e88:	e0bfff15 	stw	r2,-4(fp)
 1020e8c:	00006b06 	br	102103c <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 1020e90:	e0bffe17 	ldw	r2,-8(fp)
 1020e94:	1004c03a 	cmpne	r2,r2,zero
 1020e98:	1000031e 	bne	r2,zero,1020ea8 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 1020e9c:	00800244 	movi	r2,9
 1020ea0:	e0bfff15 	stw	r2,-4(fp)
 1020ea4:	00006506 	br	102103c <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 1020ea8:	e0bffe17 	ldw	r2,-8(fp)
 1020eac:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 1020eb0:	e0bffe17 	ldw	r2,-8(fp)
 1020eb4:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1020eb8:	0005303a 	rdctl	r2,status
 1020ebc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1020ec0:	e0fff717 	ldw	r3,-36(fp)
 1020ec4:	00bfff84 	movi	r2,-2
 1020ec8:	1884703a 	and	r2,r3,r2
 1020ecc:	1001703a 	wrctl	status,r2
  
  return context;
 1020ed0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 1020ed4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 1020ed8:	e0bffd03 	ldbu	r2,-12(fp)
 1020edc:	10803fd8 	cmpnei	r2,r2,255
 1020ee0:	1000051e 	bne	r2,zero,1020ef8 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 1020ee4:	008040f4 	movhi	r2,259
 1020ee8:	10a42a04 	addi	r2,r2,-28504
 1020eec:	10800017 	ldw	r2,0(r2)
 1020ef0:	10800c83 	ldbu	r2,50(r2)
 1020ef4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1020ef8:	e0bffd03 	ldbu	r2,-12(fp)
 1020efc:	00c04134 	movhi	r3,260
 1020f00:	18eab404 	addi	r3,r3,-21808
 1020f04:	1085883a 	add	r2,r2,r2
 1020f08:	1085883a 	add	r2,r2,r2
 1020f0c:	10c5883a 	add	r2,r2,r3
 1020f10:	10800017 	ldw	r2,0(r2)
 1020f14:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 1020f18:	e0bffc17 	ldw	r2,-16(fp)
 1020f1c:	1004c03a 	cmpne	r2,r2,zero
 1020f20:	1000071e 	bne	r2,zero,1020f40 <OSTaskStkChk+0xec>
 1020f24:	e0bff817 	ldw	r2,-32(fp)
 1020f28:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020f2c:	e0bff617 	ldw	r2,-40(fp)
 1020f30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1020f34:	008010c4 	movi	r2,67
 1020f38:	e0bfff15 	stw	r2,-4(fp)
 1020f3c:	00003f06 	br	102103c <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 1020f40:	e0bffc17 	ldw	r2,-16(fp)
 1020f44:	10800058 	cmpnei	r2,r2,1
 1020f48:	1000071e 	bne	r2,zero,1020f68 <OSTaskStkChk+0x114>
 1020f4c:	e0bff817 	ldw	r2,-32(fp)
 1020f50:	e0bff515 	stw	r2,-44(fp)
 1020f54:	e0bff517 	ldw	r2,-44(fp)
 1020f58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1020f5c:	008010c4 	movi	r2,67
 1020f60:	e0bfff15 	stw	r2,-4(fp)
 1020f64:	00003506 	br	102103c <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 1020f68:	e0bffc17 	ldw	r2,-16(fp)
 1020f6c:	1080040b 	ldhu	r2,16(r2)
 1020f70:	10bfffcc 	andi	r2,r2,65535
 1020f74:	1080004c 	andi	r2,r2,1
 1020f78:	1004c03a 	cmpne	r2,r2,zero
 1020f7c:	1000071e 	bne	r2,zero,1020f9c <OSTaskStkChk+0x148>
 1020f80:	e0bff817 	ldw	r2,-32(fp)
 1020f84:	e0bff415 	stw	r2,-48(fp)
 1020f88:	e0bff417 	ldw	r2,-48(fp)
 1020f8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 1020f90:	00801144 	movi	r2,69
 1020f94:	e0bfff15 	stw	r2,-4(fp)
 1020f98:	00002806 	br	102103c <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 1020f9c:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 1020fa0:	e0bffc17 	ldw	r2,-16(fp)
 1020fa4:	10800317 	ldw	r2,12(r2)
 1020fa8:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 1020fac:	e0bffc17 	ldw	r2,-16(fp)
 1020fb0:	10800217 	ldw	r2,8(r2)
 1020fb4:	e0bffb15 	stw	r2,-20(fp)
 1020fb8:	e0bff817 	ldw	r2,-32(fp)
 1020fbc:	e0bff315 	stw	r2,-52(fp)
 1020fc0:	e0bff317 	ldw	r2,-52(fp)
 1020fc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 1020fc8:	00000306 	br	1020fd8 <OSTaskStkChk+0x184>
        nfree++;
 1020fcc:	e0bffa17 	ldw	r2,-24(fp)
 1020fd0:	10800044 	addi	r2,r2,1
 1020fd4:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 1020fd8:	e0bffb17 	ldw	r2,-20(fp)
 1020fdc:	10800017 	ldw	r2,0(r2)
 1020fe0:	1005003a 	cmpeq	r2,r2,zero
 1020fe4:	1007883a 	mov	r3,r2
 1020fe8:	e0bffb17 	ldw	r2,-20(fp)
 1020fec:	10800104 	addi	r2,r2,4
 1020ff0:	e0bffb15 	stw	r2,-20(fp)
 1020ff4:	18803fcc 	andi	r2,r3,255
 1020ff8:	1004c03a 	cmpne	r2,r2,zero
 1020ffc:	103ff31e 	bne	r2,zero,1020fcc <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 1021000:	e0bffa17 	ldw	r2,-24(fp)
 1021004:	1085883a 	add	r2,r2,r2
 1021008:	1085883a 	add	r2,r2,r2
 102100c:	1007883a 	mov	r3,r2
 1021010:	e0bffe17 	ldw	r2,-8(fp)
 1021014:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 1021018:	e0fff917 	ldw	r3,-28(fp)
 102101c:	e0bffa17 	ldw	r2,-24(fp)
 1021020:	1885c83a 	sub	r2,r3,r2
 1021024:	1085883a 	add	r2,r2,r2
 1021028:	1085883a 	add	r2,r2,r2
 102102c:	1007883a 	mov	r3,r2
 1021030:	e0bffe17 	ldw	r2,-8(fp)
 1021034:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 1021038:	e03fff15 	stw	zero,-4(fp)
 102103c:	e0bfff17 	ldw	r2,-4(fp)
}
 1021040:	e037883a 	mov	sp,fp
 1021044:	df000017 	ldw	fp,0(sp)
 1021048:	dec00104 	addi	sp,sp,4
 102104c:	f800283a 	ret

01021050 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 1021050:	defff404 	addi	sp,sp,-48
 1021054:	dfc00b15 	stw	ra,44(sp)
 1021058:	df000a15 	stw	fp,40(sp)
 102105c:	df000a04 	addi	fp,sp,40
 1021060:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1021064:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 1021068:	e0bffe03 	ldbu	r2,-8(fp)
 102106c:	10800518 	cmpnei	r2,r2,20
 1021070:	1000031e 	bne	r2,zero,1021080 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 1021074:	008011c4 	movi	r2,71
 1021078:	e0bfff15 	stw	r2,-4(fp)
 102107c:	00007906 	br	1021264 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 1021080:	e0bffe03 	ldbu	r2,-8(fp)
 1021084:	10800530 	cmpltui	r2,r2,20
 1021088:	1000061e 	bne	r2,zero,10210a4 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 102108c:	e0bffe03 	ldbu	r2,-8(fp)
 1021090:	10803fe0 	cmpeqi	r2,r2,255
 1021094:	1000031e 	bne	r2,zero,10210a4 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 1021098:	00800a84 	movi	r2,42
 102109c:	e0bfff15 	stw	r2,-4(fp)
 10210a0:	00007006 	br	1021264 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10210a4:	0005303a 	rdctl	r2,status
 10210a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10210ac:	e0fff917 	ldw	r3,-28(fp)
 10210b0:	00bfff84 	movi	r2,-2
 10210b4:	1884703a 	and	r2,r3,r2
 10210b8:	1001703a 	wrctl	status,r2
  
  return context;
 10210bc:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 10210c0:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 10210c4:	e0bffe03 	ldbu	r2,-8(fp)
 10210c8:	10803fd8 	cmpnei	r2,r2,255
 10210cc:	1000081e 	bne	r2,zero,10210f0 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 10210d0:	008040f4 	movhi	r2,259
 10210d4:	10a42a04 	addi	r2,r2,-28504
 10210d8:	10800017 	ldw	r2,0(r2)
 10210dc:	10800c83 	ldbu	r2,50(r2)
 10210e0:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 10210e4:	00800044 	movi	r2,1
 10210e8:	e0bffd05 	stb	r2,-12(fp)
 10210ec:	00000b06 	br	102111c <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 10210f0:	008040f4 	movhi	r2,259
 10210f4:	10a42a04 	addi	r2,r2,-28504
 10210f8:	10800017 	ldw	r2,0(r2)
 10210fc:	10800c83 	ldbu	r2,50(r2)
 1021100:	10c03fcc 	andi	r3,r2,255
 1021104:	e0bffe03 	ldbu	r2,-8(fp)
 1021108:	1880031e 	bne	r3,r2,1021118 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 102110c:	00800044 	movi	r2,1
 1021110:	e0bffd05 	stb	r2,-12(fp)
 1021114:	00000106 	br	102111c <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 1021118:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 102111c:	e0bffe03 	ldbu	r2,-8(fp)
 1021120:	00c04134 	movhi	r3,260
 1021124:	18eab404 	addi	r3,r3,-21808
 1021128:	1085883a 	add	r2,r2,r2
 102112c:	1085883a 	add	r2,r2,r2
 1021130:	10c5883a 	add	r2,r2,r3
 1021134:	10800017 	ldw	r2,0(r2)
 1021138:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 102113c:	e0bffc17 	ldw	r2,-16(fp)
 1021140:	1004c03a 	cmpne	r2,r2,zero
 1021144:	1000071e 	bne	r2,zero,1021164 <OSTaskSuspend+0x114>
 1021148:	e0bffa17 	ldw	r2,-24(fp)
 102114c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1021150:	e0bff817 	ldw	r2,-32(fp)
 1021154:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 1021158:	00801204 	movi	r2,72
 102115c:	e0bfff15 	stw	r2,-4(fp)
 1021160:	00004006 	br	1021264 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 1021164:	e0bffc17 	ldw	r2,-16(fp)
 1021168:	10800058 	cmpnei	r2,r2,1
 102116c:	1000071e 	bne	r2,zero,102118c <OSTaskSuspend+0x13c>
 1021170:	e0bffa17 	ldw	r2,-24(fp)
 1021174:	e0bff715 	stw	r2,-36(fp)
 1021178:	e0bff717 	ldw	r2,-36(fp)
 102117c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1021180:	008010c4 	movi	r2,67
 1021184:	e0bfff15 	stw	r2,-4(fp)
 1021188:	00003606 	br	1021264 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 102118c:	e0bffc17 	ldw	r2,-16(fp)
 1021190:	10800d03 	ldbu	r2,52(r2)
 1021194:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 1021198:	e13ffb03 	ldbu	r4,-20(fp)
 102119c:	e0fffb03 	ldbu	r3,-20(fp)
 10211a0:	008040f4 	movhi	r2,259
 10211a4:	10a42744 	addi	r2,r2,-28515
 10211a8:	10c5883a 	add	r2,r2,r3
 10211ac:	10800003 	ldbu	r2,0(r2)
 10211b0:	1007883a 	mov	r3,r2
 10211b4:	e0bffc17 	ldw	r2,-16(fp)
 10211b8:	10800d43 	ldbu	r2,53(r2)
 10211bc:	0084303a 	nor	r2,zero,r2
 10211c0:	1884703a 	and	r2,r3,r2
 10211c4:	1007883a 	mov	r3,r2
 10211c8:	008040f4 	movhi	r2,259
 10211cc:	10a42744 	addi	r2,r2,-28515
 10211d0:	1105883a 	add	r2,r2,r4
 10211d4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 10211d8:	e0fffb03 	ldbu	r3,-20(fp)
 10211dc:	008040f4 	movhi	r2,259
 10211e0:	10a42744 	addi	r2,r2,-28515
 10211e4:	10c5883a 	add	r2,r2,r3
 10211e8:	10800003 	ldbu	r2,0(r2)
 10211ec:	10803fcc 	andi	r2,r2,255
 10211f0:	1004c03a 	cmpne	r2,r2,zero
 10211f4:	10000c1e 	bne	r2,zero,1021228 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 10211f8:	e0bffc17 	ldw	r2,-16(fp)
 10211fc:	10800d83 	ldbu	r2,54(r2)
 1021200:	0084303a 	nor	r2,zero,r2
 1021204:	1007883a 	mov	r3,r2
 1021208:	008040f4 	movhi	r2,259
 102120c:	10a42704 	addi	r2,r2,-28516
 1021210:	10800003 	ldbu	r2,0(r2)
 1021214:	1884703a 	and	r2,r3,r2
 1021218:	1007883a 	mov	r3,r2
 102121c:	008040f4 	movhi	r2,259
 1021220:	10a42704 	addi	r2,r2,-28516
 1021224:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 1021228:	e0bffc17 	ldw	r2,-16(fp)
 102122c:	10800c03 	ldbu	r2,48(r2)
 1021230:	10800214 	ori	r2,r2,8
 1021234:	1007883a 	mov	r3,r2
 1021238:	e0bffc17 	ldw	r2,-16(fp)
 102123c:	10c00c05 	stb	r3,48(r2)
 1021240:	e0bffa17 	ldw	r2,-24(fp)
 1021244:	e0bff615 	stw	r2,-40(fp)
 1021248:	e0bff617 	ldw	r2,-40(fp)
 102124c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 1021250:	e0bffd03 	ldbu	r2,-12(fp)
 1021254:	10800058 	cmpnei	r2,r2,1
 1021258:	1000011e 	bne	r2,zero,1021260 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 102125c:	101b1440 	call	101b144 <OS_Sched>
    }
    return (OS_ERR_NONE);
 1021260:	e03fff15 	stw	zero,-4(fp)
 1021264:	e0bfff17 	ldw	r2,-4(fp)
}
 1021268:	e037883a 	mov	sp,fp
 102126c:	dfc00117 	ldw	ra,4(sp)
 1021270:	df000017 	ldw	fp,0(sp)
 1021274:	dec00204 	addi	sp,sp,8
 1021278:	f800283a 	ret

0102127c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 102127c:	defff504 	addi	sp,sp,-44
 1021280:	dfc00a15 	stw	ra,40(sp)
 1021284:	df000915 	stw	fp,36(sp)
 1021288:	df000904 	addi	fp,sp,36
 102128c:	e17ffe15 	stw	r5,-8(fp)
 1021290:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1021294:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 1021298:	e0bffd03 	ldbu	r2,-12(fp)
 102129c:	10800570 	cmpltui	r2,r2,21
 10212a0:	1000061e 	bne	r2,zero,10212bc <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 10212a4:	e0bffd03 	ldbu	r2,-12(fp)
 10212a8:	10803fe0 	cmpeqi	r2,r2,255
 10212ac:	1000031e 	bne	r2,zero,10212bc <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 10212b0:	00800a84 	movi	r2,42
 10212b4:	e0bfff15 	stw	r2,-4(fp)
 10212b8:	00003b06 	br	10213a8 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 10212bc:	e0bffe17 	ldw	r2,-8(fp)
 10212c0:	1004c03a 	cmpne	r2,r2,zero
 10212c4:	1000031e 	bne	r2,zero,10212d4 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 10212c8:	00800244 	movi	r2,9
 10212cc:	e0bfff15 	stw	r2,-4(fp)
 10212d0:	00003506 	br	10213a8 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10212d4:	0005303a 	rdctl	r2,status
 10212d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10212dc:	e0fffa17 	ldw	r3,-24(fp)
 10212e0:	00bfff84 	movi	r2,-2
 10212e4:	1884703a 	and	r2,r3,r2
 10212e8:	1001703a 	wrctl	status,r2
  
  return context;
 10212ec:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10212f0:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 10212f4:	e0bffd03 	ldbu	r2,-12(fp)
 10212f8:	10803fd8 	cmpnei	r2,r2,255
 10212fc:	1000051e 	bne	r2,zero,1021314 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 1021300:	008040f4 	movhi	r2,259
 1021304:	10a42a04 	addi	r2,r2,-28504
 1021308:	10800017 	ldw	r2,0(r2)
 102130c:	10800c83 	ldbu	r2,50(r2)
 1021310:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1021314:	e0bffd03 	ldbu	r2,-12(fp)
 1021318:	00c04134 	movhi	r3,260
 102131c:	18eab404 	addi	r3,r3,-21808
 1021320:	1085883a 	add	r2,r2,r2
 1021324:	1085883a 	add	r2,r2,r2
 1021328:	10c5883a 	add	r2,r2,r3
 102132c:	10800017 	ldw	r2,0(r2)
 1021330:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 1021334:	e0bffc17 	ldw	r2,-16(fp)
 1021338:	1004c03a 	cmpne	r2,r2,zero
 102133c:	1000071e 	bne	r2,zero,102135c <OSTaskQuery+0xe0>
 1021340:	e0bffb17 	ldw	r2,-20(fp)
 1021344:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1021348:	e0bff917 	ldw	r2,-28(fp)
 102134c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 1021350:	00800a44 	movi	r2,41
 1021354:	e0bfff15 	stw	r2,-4(fp)
 1021358:	00001306 	br	10213a8 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 102135c:	e0bffc17 	ldw	r2,-16(fp)
 1021360:	10800058 	cmpnei	r2,r2,1
 1021364:	1000071e 	bne	r2,zero,1021384 <OSTaskQuery+0x108>
 1021368:	e0bffb17 	ldw	r2,-20(fp)
 102136c:	e0bff815 	stw	r2,-32(fp)
 1021370:	e0bff817 	ldw	r2,-32(fp)
 1021374:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1021378:	008010c4 	movi	r2,67
 102137c:	e0bfff15 	stw	r2,-4(fp)
 1021380:	00000906 	br	10213a8 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 1021384:	e13ffe17 	ldw	r4,-8(fp)
 1021388:	e17ffc17 	ldw	r5,-16(fp)
 102138c:	01801b04 	movi	r6,108
 1021390:	101b0d80 	call	101b0d8 <OS_MemCopy>
 1021394:	e0bffb17 	ldw	r2,-20(fp)
 1021398:	e0bff715 	stw	r2,-36(fp)
 102139c:	e0bff717 	ldw	r2,-36(fp)
 10213a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10213a4:	e03fff15 	stw	zero,-4(fp)
 10213a8:	e0bfff17 	ldw	r2,-4(fp)
}
 10213ac:	e037883a 	mov	sp,fp
 10213b0:	dfc00117 	ldw	ra,4(sp)
 10213b4:	df000017 	ldw	fp,0(sp)
 10213b8:	dec00204 	addi	sp,sp,8
 10213bc:	f800283a 	ret

010213c0 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 10213c0:	defffc04 	addi	sp,sp,-16
 10213c4:	df000315 	stw	fp,12(sp)
 10213c8:	df000304 	addi	fp,sp,12
 10213cc:	e13ffd15 	stw	r4,-12(fp)
 10213d0:	e17ffe15 	stw	r5,-8(fp)
 10213d4:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 10213d8:	e0bfff0b 	ldhu	r2,-4(fp)
 10213dc:	1080004c 	andi	r2,r2,1
 10213e0:	10803fcc 	andi	r2,r2,255
 10213e4:	1005003a 	cmpeq	r2,r2,zero
 10213e8:	1000101e 	bne	r2,zero,102142c <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 10213ec:	e0bfff0b 	ldhu	r2,-4(fp)
 10213f0:	1080008c 	andi	r2,r2,2
 10213f4:	1005003a 	cmpeq	r2,r2,zero
 10213f8:	10000c1e 	bne	r2,zero,102142c <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 10213fc:	00000806 	br	1021420 <OS_TaskStkClr+0x60>
                size--;
 1021400:	e0bffe17 	ldw	r2,-8(fp)
 1021404:	10bfffc4 	addi	r2,r2,-1
 1021408:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 102140c:	e0bffd17 	ldw	r2,-12(fp)
 1021410:	10000015 	stw	zero,0(r2)
 1021414:	e0bffd17 	ldw	r2,-12(fp)
 1021418:	10800104 	addi	r2,r2,4
 102141c:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 1021420:	e0bffe17 	ldw	r2,-8(fp)
 1021424:	1004c03a 	cmpne	r2,r2,zero
 1021428:	103ff51e 	bne	r2,zero,1021400 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 102142c:	e037883a 	mov	sp,fp
 1021430:	df000017 	ldw	fp,0(sp)
 1021434:	dec00104 	addi	sp,sp,4
 1021438:	f800283a 	ret

0102143c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 102143c:	defff904 	addi	sp,sp,-28
 1021440:	dfc00615 	stw	ra,24(sp)
 1021444:	df000515 	stw	fp,20(sp)
 1021448:	df000504 	addi	fp,sp,20
 102144c:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1021450:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1021454:	008040f4 	movhi	r2,259
 1021458:	10a42904 	addi	r2,r2,-28508
 102145c:	10800003 	ldbu	r2,0(r2)
 1021460:	10803fcc 	andi	r2,r2,255
 1021464:	1004c03a 	cmpne	r2,r2,zero
 1021468:	1000421e 	bne	r2,zero,1021574 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 102146c:	e0bfff0b 	ldhu	r2,-4(fp)
 1021470:	1005003a 	cmpeq	r2,r2,zero
 1021474:	10003f1e 	bne	r2,zero,1021574 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1021478:	0005303a 	rdctl	r2,status
 102147c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1021480:	e0fffc17 	ldw	r3,-16(fp)
 1021484:	00bfff84 	movi	r2,-2
 1021488:	1884703a 	and	r2,r3,r2
 102148c:	1001703a 	wrctl	status,r2
  
  return context;
 1021490:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 1021494:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 1021498:	008040f4 	movhi	r2,259
 102149c:	10a42a04 	addi	r2,r2,-28504
 10214a0:	10800017 	ldw	r2,0(r2)
 10214a4:	10800d03 	ldbu	r2,52(r2)
 10214a8:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 10214ac:	e13ffe03 	ldbu	r4,-8(fp)
 10214b0:	e0fffe03 	ldbu	r3,-8(fp)
 10214b4:	008040f4 	movhi	r2,259
 10214b8:	10a42744 	addi	r2,r2,-28515
 10214bc:	10c5883a 	add	r2,r2,r3
 10214c0:	10800003 	ldbu	r2,0(r2)
 10214c4:	1007883a 	mov	r3,r2
 10214c8:	008040f4 	movhi	r2,259
 10214cc:	10a42a04 	addi	r2,r2,-28504
 10214d0:	10800017 	ldw	r2,0(r2)
 10214d4:	10800d43 	ldbu	r2,53(r2)
 10214d8:	0084303a 	nor	r2,zero,r2
 10214dc:	1884703a 	and	r2,r3,r2
 10214e0:	1007883a 	mov	r3,r2
 10214e4:	008040f4 	movhi	r2,259
 10214e8:	10a42744 	addi	r2,r2,-28515
 10214ec:	1105883a 	add	r2,r2,r4
 10214f0:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 10214f4:	e0fffe03 	ldbu	r3,-8(fp)
 10214f8:	008040f4 	movhi	r2,259
 10214fc:	10a42744 	addi	r2,r2,-28515
 1021500:	10c5883a 	add	r2,r2,r3
 1021504:	10800003 	ldbu	r2,0(r2)
 1021508:	10803fcc 	andi	r2,r2,255
 102150c:	1004c03a 	cmpne	r2,r2,zero
 1021510:	10000e1e 	bne	r2,zero,102154c <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 1021514:	008040f4 	movhi	r2,259
 1021518:	10a42a04 	addi	r2,r2,-28504
 102151c:	10800017 	ldw	r2,0(r2)
 1021520:	10800d83 	ldbu	r2,54(r2)
 1021524:	0084303a 	nor	r2,zero,r2
 1021528:	1007883a 	mov	r3,r2
 102152c:	008040f4 	movhi	r2,259
 1021530:	10a42704 	addi	r2,r2,-28516
 1021534:	10800003 	ldbu	r2,0(r2)
 1021538:	1884703a 	and	r2,r3,r2
 102153c:	1007883a 	mov	r3,r2
 1021540:	008040f4 	movhi	r2,259
 1021544:	10a42704 	addi	r2,r2,-28516
 1021548:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 102154c:	008040f4 	movhi	r2,259
 1021550:	10a42a04 	addi	r2,r2,-28504
 1021554:	10c00017 	ldw	r3,0(r2)
 1021558:	e0bfff0b 	ldhu	r2,-4(fp)
 102155c:	18800b8d 	sth	r2,46(r3)
 1021560:	e0bffd17 	ldw	r2,-12(fp)
 1021564:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1021568:	e0bffb17 	ldw	r2,-20(fp)
 102156c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 1021570:	101b1440 	call	101b144 <OS_Sched>
    }
}
 1021574:	e037883a 	mov	sp,fp
 1021578:	dfc00117 	ldw	ra,4(sp)
 102157c:	df000017 	ldw	fp,0(sp)
 1021580:	dec00204 	addi	sp,sp,8
 1021584:	f800283a 	ret

01021588 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 1021588:	defff604 	addi	sp,sp,-40
 102158c:	dfc00915 	stw	ra,36(sp)
 1021590:	df000815 	stw	fp,32(sp)
 1021594:	dc000715 	stw	r16,28(sp)
 1021598:	df000704 	addi	fp,sp,28
 102159c:	e13ffb05 	stb	r4,-20(fp)
 10215a0:	e17ffc05 	stb	r5,-16(fp)
 10215a4:	e1bffd05 	stb	r6,-12(fp)
 10215a8:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10215ac:	008040f4 	movhi	r2,259
 10215b0:	10a42904 	addi	r2,r2,-28508
 10215b4:	10800003 	ldbu	r2,0(r2)
 10215b8:	10803fcc 	andi	r2,r2,255
 10215bc:	1005003a 	cmpeq	r2,r2,zero
 10215c0:	1000031e 	bne	r2,zero,10215d0 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 10215c4:	00801544 	movi	r2,85
 10215c8:	e0bfff15 	stw	r2,-4(fp)
 10215cc:	00004b06 	br	10216fc <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 10215d0:	e0bffb03 	ldbu	r2,-20(fp)
 10215d4:	1004c03a 	cmpne	r2,r2,zero
 10215d8:	10000c1e 	bne	r2,zero,102160c <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
 10215dc:	e0bffc03 	ldbu	r2,-16(fp)
 10215e0:	1004c03a 	cmpne	r2,r2,zero
 10215e4:	1000091e 	bne	r2,zero,102160c <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
 10215e8:	e0bffd03 	ldbu	r2,-12(fp)
 10215ec:	1004c03a 	cmpne	r2,r2,zero
 10215f0:	1000061e 	bne	r2,zero,102160c <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
 10215f4:	e0bffe0b 	ldhu	r2,-8(fp)
 10215f8:	1004c03a 	cmpne	r2,r2,zero
 10215fc:	1000031e 	bne	r2,zero,102160c <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
 1021600:	00801504 	movi	r2,84
 1021604:	e0bfff15 	stw	r2,-4(fp)
 1021608:	00003c06 	br	10216fc <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
 102160c:	e0bffc03 	ldbu	r2,-16(fp)
 1021610:	10800f30 	cmpltui	r2,r2,60
 1021614:	1000031e 	bne	r2,zero,1021624 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 1021618:	00801444 	movi	r2,81
 102161c:	e0bfff15 	stw	r2,-4(fp)
 1021620:	00003606 	br	10216fc <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
 1021624:	e0bffd03 	ldbu	r2,-12(fp)
 1021628:	10800f30 	cmpltui	r2,r2,60
 102162c:	1000031e 	bne	r2,zero,102163c <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
 1021630:	00801484 	movi	r2,82
 1021634:	e0bfff15 	stw	r2,-4(fp)
 1021638:	00003006 	br	10216fc <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
 102163c:	e0bffe0b 	ldhu	r2,-8(fp)
 1021640:	1080fa30 	cmpltui	r2,r2,1000
 1021644:	1000031e 	bne	r2,zero,1021654 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
 1021648:	008014c4 	movi	r2,83
 102164c:	e0bfff15 	stw	r2,-4(fp)
 1021650:	00002a06 	br	10216fc <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 1021654:	e13ffb03 	ldbu	r4,-20(fp)
 1021658:	01438404 	movi	r5,3600
 102165c:	100def40 	call	100def4 <__mulsi3>
 1021660:	1021883a 	mov	r16,r2
 1021664:	e13ffc03 	ldbu	r4,-16(fp)
 1021668:	01400f04 	movi	r5,60
 102166c:	100def40 	call	100def4 <__mulsi3>
 1021670:	8087883a 	add	r3,r16,r2
 1021674:	e0bffd03 	ldbu	r2,-12(fp)
 1021678:	1889883a 	add	r4,r3,r2
 102167c:	0140fa04 	movi	r5,1000
 1021680:	100def40 	call	100def4 <__mulsi3>
 1021684:	1021883a 	mov	r16,r2
 1021688:	e13ffe0b 	ldhu	r4,-8(fp)
 102168c:	0140fa04 	movi	r5,1000
 1021690:	100def40 	call	100def4 <__mulsi3>
 1021694:	1009883a 	mov	r4,r2
 1021698:	0140fa04 	movi	r5,1000
 102169c:	10180f00 	call	10180f0 <__udivsi3>
 10216a0:	8085883a 	add	r2,r16,r2
 10216a4:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 10216a8:	e0bffa17 	ldw	r2,-24(fp)
 10216ac:	1004d43a 	srli	r2,r2,16
 10216b0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 10216b4:	e0bffa17 	ldw	r2,-24(fp)
 10216b8:	10bfffcc 	andi	r2,r2,65535
 10216bc:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 10216c0:	e0bffa17 	ldw	r2,-24(fp)
 10216c4:	113fffcc 	andi	r4,r2,65535
 10216c8:	102143c0 	call	102143c <OSTimeDly>
    while (loops > 0) {
 10216cc:	00000706 	br	10216ec <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
 10216d0:	01200014 	movui	r4,32768
 10216d4:	102143c0 	call	102143c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 10216d8:	01200014 	movui	r4,32768
 10216dc:	102143c0 	call	102143c <OSTimeDly>
        loops--;
 10216e0:	e0bff90b 	ldhu	r2,-28(fp)
 10216e4:	10bfffc4 	addi	r2,r2,-1
 10216e8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 10216ec:	e0bff90b 	ldhu	r2,-28(fp)
 10216f0:	1004c03a 	cmpne	r2,r2,zero
 10216f4:	103ff61e 	bne	r2,zero,10216d0 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 10216f8:	e03fff15 	stw	zero,-4(fp)
 10216fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1021700:	e037883a 	mov	sp,fp
 1021704:	dfc00217 	ldw	ra,8(sp)
 1021708:	df000117 	ldw	fp,4(sp)
 102170c:	dc000017 	ldw	r16,0(sp)
 1021710:	dec00304 	addi	sp,sp,12
 1021714:	f800283a 	ret

01021718 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 1021718:	defff404 	addi	sp,sp,-48
 102171c:	dfc00b15 	stw	ra,44(sp)
 1021720:	df000a15 	stw	fp,40(sp)
 1021724:	df000a04 	addi	fp,sp,40
 1021728:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 102172c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 1021730:	e0bffe03 	ldbu	r2,-8(fp)
 1021734:	10800530 	cmpltui	r2,r2,20
 1021738:	1000031e 	bne	r2,zero,1021748 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 102173c:	00800a84 	movi	r2,42
 1021740:	e0bfff15 	stw	r2,-4(fp)
 1021744:	00007206 	br	1021910 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1021748:	0005303a 	rdctl	r2,status
 102174c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1021750:	e0fffb17 	ldw	r3,-20(fp)
 1021754:	00bfff84 	movi	r2,-2
 1021758:	1884703a 	and	r2,r3,r2
 102175c:	1001703a 	wrctl	status,r2
  
  return context;
 1021760:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1021764:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 1021768:	e0bffe03 	ldbu	r2,-8(fp)
 102176c:	00c04134 	movhi	r3,260
 1021770:	18eab404 	addi	r3,r3,-21808
 1021774:	1085883a 	add	r2,r2,r2
 1021778:	1085883a 	add	r2,r2,r2
 102177c:	10c5883a 	add	r2,r2,r3
 1021780:	10800017 	ldw	r2,0(r2)
 1021784:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 1021788:	e0bffd17 	ldw	r2,-12(fp)
 102178c:	1004c03a 	cmpne	r2,r2,zero
 1021790:	1000071e 	bne	r2,zero,10217b0 <OSTimeDlyResume+0x98>
 1021794:	e0bffc17 	ldw	r2,-16(fp)
 1021798:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102179c:	e0bffa17 	ldw	r2,-24(fp)
 10217a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 10217a4:	008010c4 	movi	r2,67
 10217a8:	e0bfff15 	stw	r2,-4(fp)
 10217ac:	00005806 	br	1021910 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 10217b0:	e0bffd17 	ldw	r2,-12(fp)
 10217b4:	10800058 	cmpnei	r2,r2,1
 10217b8:	1000071e 	bne	r2,zero,10217d8 <OSTimeDlyResume+0xc0>
 10217bc:	e0bffc17 	ldw	r2,-16(fp)
 10217c0:	e0bff915 	stw	r2,-28(fp)
 10217c4:	e0bff917 	ldw	r2,-28(fp)
 10217c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 10217cc:	008010c4 	movi	r2,67
 10217d0:	e0bfff15 	stw	r2,-4(fp)
 10217d4:	00004e06 	br	1021910 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 10217d8:	e0bffd17 	ldw	r2,-12(fp)
 10217dc:	10800b8b 	ldhu	r2,46(r2)
 10217e0:	10bfffcc 	andi	r2,r2,65535
 10217e4:	1004c03a 	cmpne	r2,r2,zero
 10217e8:	1000071e 	bne	r2,zero,1021808 <OSTimeDlyResume+0xf0>
 10217ec:	e0bffc17 	ldw	r2,-16(fp)
 10217f0:	e0bff815 	stw	r2,-32(fp)
 10217f4:	e0bff817 	ldw	r2,-32(fp)
 10217f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 10217fc:	00801404 	movi	r2,80
 1021800:	e0bfff15 	stw	r2,-4(fp)
 1021804:	00004206 	br	1021910 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 1021808:	e0bffd17 	ldw	r2,-12(fp)
 102180c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 1021810:	e0bffd17 	ldw	r2,-12(fp)
 1021814:	10800c03 	ldbu	r2,48(r2)
 1021818:	10803fcc 	andi	r2,r2,255
 102181c:	10800dcc 	andi	r2,r2,55
 1021820:	1005003a 	cmpeq	r2,r2,zero
 1021824:	10000b1e 	bne	r2,zero,1021854 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 1021828:	e0bffd17 	ldw	r2,-12(fp)
 102182c:	10c00c03 	ldbu	r3,48(r2)
 1021830:	00bff204 	movi	r2,-56
 1021834:	1884703a 	and	r2,r3,r2
 1021838:	1007883a 	mov	r3,r2
 102183c:	e0bffd17 	ldw	r2,-12(fp)
 1021840:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 1021844:	e0fffd17 	ldw	r3,-12(fp)
 1021848:	00800044 	movi	r2,1
 102184c:	18800c45 	stb	r2,49(r3)
 1021850:	00000206 	br	102185c <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 1021854:	e0bffd17 	ldw	r2,-12(fp)
 1021858:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 102185c:	e0bffd17 	ldw	r2,-12(fp)
 1021860:	10800c03 	ldbu	r2,48(r2)
 1021864:	10803fcc 	andi	r2,r2,255
 1021868:	1080020c 	andi	r2,r2,8
 102186c:	1004c03a 	cmpne	r2,r2,zero
 1021870:	1000221e 	bne	r2,zero,10218fc <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 1021874:	e0bffd17 	ldw	r2,-12(fp)
 1021878:	10c00d83 	ldbu	r3,54(r2)
 102187c:	008040f4 	movhi	r2,259
 1021880:	10a42704 	addi	r2,r2,-28516
 1021884:	10800003 	ldbu	r2,0(r2)
 1021888:	1884b03a 	or	r2,r3,r2
 102188c:	1007883a 	mov	r3,r2
 1021890:	008040f4 	movhi	r2,259
 1021894:	10a42704 	addi	r2,r2,-28516
 1021898:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 102189c:	e0bffd17 	ldw	r2,-12(fp)
 10218a0:	10800d03 	ldbu	r2,52(r2)
 10218a4:	11003fcc 	andi	r4,r2,255
 10218a8:	e0bffd17 	ldw	r2,-12(fp)
 10218ac:	10800d03 	ldbu	r2,52(r2)
 10218b0:	10c03fcc 	andi	r3,r2,255
 10218b4:	008040f4 	movhi	r2,259
 10218b8:	10a42744 	addi	r2,r2,-28515
 10218bc:	10c5883a 	add	r2,r2,r3
 10218c0:	10c00003 	ldbu	r3,0(r2)
 10218c4:	e0bffd17 	ldw	r2,-12(fp)
 10218c8:	10800d43 	ldbu	r2,53(r2)
 10218cc:	1884b03a 	or	r2,r3,r2
 10218d0:	1007883a 	mov	r3,r2
 10218d4:	008040f4 	movhi	r2,259
 10218d8:	10a42744 	addi	r2,r2,-28515
 10218dc:	1105883a 	add	r2,r2,r4
 10218e0:	10c00005 	stb	r3,0(r2)
 10218e4:	e0bffc17 	ldw	r2,-16(fp)
 10218e8:	e0bff715 	stw	r2,-36(fp)
 10218ec:	e0bff717 	ldw	r2,-36(fp)
 10218f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 10218f4:	101b1440 	call	101b144 <OS_Sched>
 10218f8:	00000406 	br	102190c <OSTimeDlyResume+0x1f4>
 10218fc:	e0bffc17 	ldw	r2,-16(fp)
 1021900:	e0bff615 	stw	r2,-40(fp)
 1021904:	e0bff617 	ldw	r2,-40(fp)
 1021908:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 102190c:	e03fff15 	stw	zero,-4(fp)
 1021910:	e0bfff17 	ldw	r2,-4(fp)
}
 1021914:	e037883a 	mov	sp,fp
 1021918:	dfc00117 	ldw	ra,4(sp)
 102191c:	df000017 	ldw	fp,0(sp)
 1021920:	dec00204 	addi	sp,sp,8
 1021924:	f800283a 	ret

01021928 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 1021928:	defffb04 	addi	sp,sp,-20
 102192c:	df000415 	stw	fp,16(sp)
 1021930:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1021934:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1021938:	0005303a 	rdctl	r2,status
 102193c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1021940:	e0fffd17 	ldw	r3,-12(fp)
 1021944:	00bfff84 	movi	r2,-2
 1021948:	1884703a 	and	r2,r3,r2
 102194c:	1001703a 	wrctl	status,r2
  
  return context;
 1021950:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 1021954:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 1021958:	008040f4 	movhi	r2,259
 102195c:	10a42b04 	addi	r2,r2,-28500
 1021960:	10800017 	ldw	r2,0(r2)
 1021964:	e0bfff15 	stw	r2,-4(fp)
 1021968:	e0bffe17 	ldw	r2,-8(fp)
 102196c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1021970:	e0bffc17 	ldw	r2,-16(fp)
 1021974:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 1021978:	e0bfff17 	ldw	r2,-4(fp)
}
 102197c:	e037883a 	mov	sp,fp
 1021980:	df000017 	ldw	fp,0(sp)
 1021984:	dec00104 	addi	sp,sp,4
 1021988:	f800283a 	ret

0102198c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 102198c:	defffb04 	addi	sp,sp,-20
 1021990:	df000415 	stw	fp,16(sp)
 1021994:	df000404 	addi	fp,sp,16
 1021998:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 102199c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10219a0:	0005303a 	rdctl	r2,status
 10219a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10219a8:	e0fffd17 	ldw	r3,-12(fp)
 10219ac:	00bfff84 	movi	r2,-2
 10219b0:	1884703a 	and	r2,r3,r2
 10219b4:	1001703a 	wrctl	status,r2
  
  return context;
 10219b8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 10219bc:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 10219c0:	00c040f4 	movhi	r3,259
 10219c4:	18e42b04 	addi	r3,r3,-28500
 10219c8:	e0bfff17 	ldw	r2,-4(fp)
 10219cc:	18800015 	stw	r2,0(r3)
 10219d0:	e0bffe17 	ldw	r2,-8(fp)
 10219d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10219d8:	e0bffc17 	ldw	r2,-16(fp)
 10219dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 10219e0:	e037883a 	mov	sp,fp
 10219e4:	df000017 	ldw	fp,0(sp)
 10219e8:	dec00104 	addi	sp,sp,4
 10219ec:	f800283a 	ret

010219f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 10219f0:	defffd04 	addi	sp,sp,-12
 10219f4:	dfc00215 	stw	ra,8(sp)
 10219f8:	df000115 	stw	fp,4(sp)
 10219fc:	df000104 	addi	fp,sp,4
 1021a00:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 1021a04:	1024b3c0 	call	1024b3c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1021a08:	00800044 	movi	r2,1
 1021a0c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1021a10:	e037883a 	mov	sp,fp
 1021a14:	dfc00117 	ldw	ra,4(sp)
 1021a18:	df000017 	ldw	fp,0(sp)
 1021a1c:	dec00204 	addi	sp,sp,8
 1021a20:	f800283a 	ret

01021a24 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1021a24:	defffe04 	addi	sp,sp,-8
 1021a28:	dfc00115 	stw	ra,4(sp)
 1021a2c:	df000015 	stw	fp,0(sp)
 1021a30:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 1021a34:	01008074 	movhi	r4,513
 1021a38:	21281004 	addi	r4,r4,-24512
 1021a3c:	000b883a 	mov	r5,zero
 1021a40:	000d883a 	mov	r6,zero
 1021a44:	01c0fa04 	movi	r7,1000
 1021a48:	10232980 	call	1023298 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
 1021a4c:	010040b4 	movhi	r4,258
 1021a50:	211efd04 	addi	r4,r4,31732
 1021a54:	1021ae80 	call	1021ae8 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1021a58:	010040b4 	movhi	r4,258
 1021a5c:	211f3904 	addi	r4,r4,31972
 1021a60:	000b883a 	mov	r5,zero
 1021a64:	01800044 	movi	r6,1
 1021a68:	10226140 	call	1022614 <altera_avalon_jtag_uart_init>
 1021a6c:	010040b4 	movhi	r4,258
 1021a70:	211f2f04 	addi	r4,r4,31932
 1021a74:	1021ab00 	call	1021ab0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_DE0_NANO_ADC_INIT ( ADC, adc);
 1021a78:	010040f4 	movhi	r4,259
 1021a7c:	21234a04 	addi	r4,r4,-29400
 1021a80:	1021ab00 	call	1021ab0 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( UART_MOTOR, uart_motor);
 1021a84:	010040f4 	movhi	r4,259
 1021a88:	21235504 	addi	r4,r4,-29356
 1021a8c:	1021ab00 	call	1021ab0 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( UART_WIFI, uart_wifi);
 1021a90:	010040f4 	movhi	r4,259
 1021a94:	21236004 	addi	r4,r4,-29312
 1021a98:	1021ab00 	call	1021ab0 <alt_dev_reg>
}
 1021a9c:	e037883a 	mov	sp,fp
 1021aa0:	dfc00117 	ldw	ra,4(sp)
 1021aa4:	df000017 	ldw	fp,0(sp)
 1021aa8:	dec00204 	addi	sp,sp,8
 1021aac:	f800283a 	ret

01021ab0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1021ab0:	defffd04 	addi	sp,sp,-12
 1021ab4:	dfc00215 	stw	ra,8(sp)
 1021ab8:	df000115 	stw	fp,4(sp)
 1021abc:	df000104 	addi	fp,sp,4
 1021ac0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1021ac4:	e13fff17 	ldw	r4,-4(fp)
 1021ac8:	014040f4 	movhi	r5,259
 1021acc:	2963d704 	addi	r5,r5,-28836
 1021ad0:	10240600 	call	1024060 <alt_dev_llist_insert>
}
 1021ad4:	e037883a 	mov	sp,fp
 1021ad8:	dfc00117 	ldw	ra,4(sp)
 1021adc:	df000017 	ldw	fp,0(sp)
 1021ae0:	dec00204 	addi	sp,sp,8
 1021ae4:	f800283a 	ret

01021ae8 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 1021ae8:	defffc04 	addi	sp,sp,-16
 1021aec:	dfc00315 	stw	ra,12(sp)
 1021af0:	df000215 	stw	fp,8(sp)
 1021af4:	df000204 	addi	fp,sp,8
 1021af8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 1021afc:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 1021b00:	e13fff17 	ldw	r4,-4(fp)
 1021b04:	1021b740 	call	1021b74 <alt_epcs_flash_query>
 1021b08:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 1021b0c:	e0bffe17 	ldw	r2,-8(fp)
 1021b10:	1004c03a 	cmpne	r2,r2,zero
 1021b14:	1000031e 	bne	r2,zero,1021b24 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 1021b18:	e13fff17 	ldw	r4,-4(fp)
 1021b1c:	1021b3c0 	call	1021b3c <alt_flash_device_register>
 1021b20:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 1021b24:	e0bffe17 	ldw	r2,-8(fp)
}
 1021b28:	e037883a 	mov	sp,fp
 1021b2c:	dfc00117 	ldw	ra,4(sp)
 1021b30:	df000017 	ldw	fp,0(sp)
 1021b34:	dec00204 	addi	sp,sp,8
 1021b38:	f800283a 	ret

01021b3c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 1021b3c:	defffd04 	addi	sp,sp,-12
 1021b40:	dfc00215 	stw	ra,8(sp)
 1021b44:	df000115 	stw	fp,4(sp)
 1021b48:	df000104 	addi	fp,sp,4
 1021b4c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 1021b50:	e13fff17 	ldw	r4,-4(fp)
 1021b54:	014040f4 	movhi	r5,259
 1021b58:	2963fb04 	addi	r5,r5,-28692
 1021b5c:	10240600 	call	1024060 <alt_dev_llist_insert>
}
 1021b60:	e037883a 	mov	sp,fp
 1021b64:	dfc00117 	ldw	ra,4(sp)
 1021b68:	df000017 	ldw	fp,0(sp)
 1021b6c:	dec00204 	addi	sp,sp,8
 1021b70:	f800283a 	ret

01021b74 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 1021b74:	defffc04 	addi	sp,sp,-16
 1021b78:	dfc00315 	stw	ra,12(sp)
 1021b7c:	df000215 	stw	fp,8(sp)
 1021b80:	df000204 	addi	fp,sp,8
 1021b84:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 1021b88:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 1021b8c:	e0bfff17 	ldw	r2,-4(fp)
 1021b90:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
 1021b94:	e0bfff17 	ldw	r2,-4(fp)
 1021b98:	11002d17 	ldw	r4,180(r2)
 1021b9c:	1023d700 	call	1023d70 <epcs_read_electronic_signature>
 1021ba0:	10c03fcc 	andi	r3,r2,255
 1021ba4:	e0bfff17 	ldw	r2,-4(fp)
 1021ba8:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 1021bac:	e0bfff17 	ldw	r2,-4(fp)
 1021bb0:	10802f17 	ldw	r2,188(r2)
 1021bb4:	10800598 	cmpnei	r2,r2,22
 1021bb8:	10000a1e 	bne	r2,zero,1021be4 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 1021bbc:	e0ffff17 	ldw	r3,-4(fp)
 1021bc0:	00802034 	movhi	r2,128
 1021bc4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 1021bc8:	e0ffff17 	ldw	r3,-4(fp)
 1021bcc:	00802004 	movi	r2,128
 1021bd0:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 1021bd4:	e0ffff17 	ldw	r3,-4(fp)
 1021bd8:	00800074 	movhi	r2,1
 1021bdc:	18801015 	stw	r2,64(r3)
 1021be0:	00007306 	br	1021db0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 1021be4:	e0bfff17 	ldw	r2,-4(fp)
 1021be8:	10802f17 	ldw	r2,188(r2)
 1021bec:	10800518 	cmpnei	r2,r2,20
 1021bf0:	10000a1e 	bne	r2,zero,1021c1c <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 1021bf4:	e0ffff17 	ldw	r3,-4(fp)
 1021bf8:	00800834 	movhi	r2,32
 1021bfc:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 1021c00:	e0ffff17 	ldw	r3,-4(fp)
 1021c04:	00800804 	movi	r2,32
 1021c08:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 1021c0c:	e0ffff17 	ldw	r3,-4(fp)
 1021c10:	00800074 	movhi	r2,1
 1021c14:	18801015 	stw	r2,64(r3)
 1021c18:	00006506 	br	1021db0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 1021c1c:	e0bfff17 	ldw	r2,-4(fp)
 1021c20:	10802f17 	ldw	r2,188(r2)
 1021c24:	108004d8 	cmpnei	r2,r2,19
 1021c28:	10000a1e 	bne	r2,zero,1021c54 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 1021c2c:	e0ffff17 	ldw	r3,-4(fp)
 1021c30:	00800434 	movhi	r2,16
 1021c34:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 1021c38:	e0ffff17 	ldw	r3,-4(fp)
 1021c3c:	00800404 	movi	r2,16
 1021c40:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 1021c44:	e0ffff17 	ldw	r3,-4(fp)
 1021c48:	00800074 	movhi	r2,1
 1021c4c:	18801015 	stw	r2,64(r3)
 1021c50:	00005706 	br	1021db0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 1021c54:	e0bfff17 	ldw	r2,-4(fp)
 1021c58:	10802f17 	ldw	r2,188(r2)
 1021c5c:	10800498 	cmpnei	r2,r2,18
 1021c60:	10000a1e 	bne	r2,zero,1021c8c <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 1021c64:	e0ffff17 	ldw	r3,-4(fp)
 1021c68:	00800234 	movhi	r2,8
 1021c6c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 1021c70:	e0ffff17 	ldw	r3,-4(fp)
 1021c74:	00800204 	movi	r2,8
 1021c78:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 1021c7c:	e0ffff17 	ldw	r3,-4(fp)
 1021c80:	00800074 	movhi	r2,1
 1021c84:	18801015 	stw	r2,64(r3)
 1021c88:	00004906 	br	1021db0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 1021c8c:	e0bfff17 	ldw	r2,-4(fp)
 1021c90:	10802f17 	ldw	r2,188(r2)
 1021c94:	10800418 	cmpnei	r2,r2,16
 1021c98:	10000a1e 	bne	r2,zero,1021cc4 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 1021c9c:	e0ffff17 	ldw	r3,-4(fp)
 1021ca0:	008000b4 	movhi	r2,2
 1021ca4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 1021ca8:	e0ffff17 	ldw	r3,-4(fp)
 1021cac:	00800104 	movi	r2,4
 1021cb0:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 1021cb4:	e0ffff17 	ldw	r3,-4(fp)
 1021cb8:	00a00014 	movui	r2,32768
 1021cbc:	18801015 	stw	r2,64(r3)
 1021cc0:	00003b06 	br	1021db0 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 1021cc4:	e0bfff17 	ldw	r2,-4(fp)
 1021cc8:	11002d17 	ldw	r4,180(r2)
 1021ccc:	1023ddc0 	call	1023ddc <epcs_read_device_id>
 1021cd0:	1007883a 	mov	r3,r2
 1021cd4:	e0bfff17 	ldw	r2,-4(fp)
 1021cd8:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 1021cdc:	e0bfff17 	ldw	r2,-4(fp)
 1021ce0:	10c02f17 	ldw	r3,188(r2)
 1021ce4:	00804034 	movhi	r2,256
 1021ce8:	10bfffc4 	addi	r2,r2,-1
 1021cec:	1886703a 	and	r3,r3,r2
 1021cf0:	00800874 	movhi	r2,33
 1021cf4:	10ae8604 	addi	r2,r2,-17896
 1021cf8:	18800a1e 	bne	r3,r2,1021d24 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 1021cfc:	e0ffff17 	ldw	r3,-4(fp)
 1021d00:	00804034 	movhi	r2,256
 1021d04:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 1021d08:	e0ffff17 	ldw	r3,-4(fp)
 1021d0c:	00804004 	movi	r2,256
 1021d10:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 1021d14:	e0ffff17 	ldw	r3,-4(fp)
 1021d18:	00800074 	movhi	r2,1
 1021d1c:	18801015 	stw	r2,64(r3)
 1021d20:	00002306 	br	1021db0 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 1021d24:	e0bfff17 	ldw	r2,-4(fp)
 1021d28:	10802f17 	ldw	r2,188(r2)
 1021d2c:	10803fcc 	andi	r2,r2,255
 1021d30:	10800618 	cmpnei	r2,r2,24
 1021d34:	10000a1e 	bne	r2,zero,1021d60 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 1021d38:	e0ffff17 	ldw	r3,-4(fp)
 1021d3c:	00804034 	movhi	r2,256
 1021d40:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 1021d44:	e0ffff17 	ldw	r3,-4(fp)
 1021d48:	00801004 	movi	r2,64
 1021d4c:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
 1021d50:	e0ffff17 	ldw	r3,-4(fp)
 1021d54:	00800134 	movhi	r2,4
 1021d58:	18801015 	stw	r2,64(r3)
 1021d5c:	00001406 	br	1021db0 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 1021d60:	e0bfff17 	ldw	r2,-4(fp)
 1021d64:	10802f17 	ldw	r2,188(r2)
 1021d68:	10803fcc 	andi	r2,r2,255
 1021d6c:	10800658 	cmpnei	r2,r2,25
 1021d70:	10000d1e 	bne	r2,zero,1021da8 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 1021d74:	e0ffff17 	ldw	r3,-4(fp)
 1021d78:	00808034 	movhi	r2,512
 1021d7c:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 1021d80:	e0ffff17 	ldw	r3,-4(fp)
 1021d84:	00808004 	movi	r2,512
 1021d88:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 1021d8c:	e0ffff17 	ldw	r3,-4(fp)
 1021d90:	00800074 	movhi	r2,1
 1021d94:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 1021d98:	e0ffff17 	ldw	r3,-4(fp)
 1021d9c:	00800044 	movi	r2,1
 1021da0:	18803115 	stw	r2,196(r3)
 1021da4:	00000206 	br	1021db0 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 1021da8:	00bffb44 	movi	r2,-19
 1021dac:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 1021db0:	e0bfff17 	ldw	r2,-4(fp)
 1021db4:	10800e17 	ldw	r2,56(r2)
 1021db8:	1007883a 	mov	r3,r2
 1021dbc:	e0bfff17 	ldw	r2,-4(fp)
 1021dc0:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 1021dc4:	e0ffff17 	ldw	r3,-4(fp)
 1021dc8:	00800044 	movi	r2,1
 1021dcc:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 1021dd0:	e0bfff17 	ldw	r2,-4(fp)
 1021dd4:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 1021dd8:	e0ffff17 	ldw	r3,-4(fp)
 1021ddc:	00804004 	movi	r2,256
 1021de0:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 1021de4:	e0bffe17 	ldw	r2,-8(fp)
}
 1021de8:	e037883a 	mov	sp,fp
 1021dec:	dfc00117 	ldw	ra,4(sp)
 1021df0:	df000017 	ldw	fp,0(sp)
 1021df4:	dec00204 	addi	sp,sp,8
 1021df8:	f800283a 	ret

01021dfc <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 1021dfc:	deffeb04 	addi	sp,sp,-84
 1021e00:	dfc01415 	stw	ra,80(sp)
 1021e04:	df001315 	stw	fp,76(sp)
 1021e08:	df001304 	addi	fp,sp,76
 1021e0c:	e13ff915 	stw	r4,-28(fp)
 1021e10:	e17ffa15 	stw	r5,-24(fp)
 1021e14:	e1bffb15 	stw	r6,-20(fp)
 1021e18:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 1021e1c:	00800804 	movi	r2,32
 1021e20:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 1021e24:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 1021e28:	00002c06 	br	1021edc <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 1021e2c:	e0bff017 	ldw	r2,-64(fp)
 1021e30:	e0bfff15 	stw	r2,-4(fp)
 1021e34:	e0fffc17 	ldw	r3,-16(fp)
 1021e38:	e0fffe15 	stw	r3,-8(fp)
 1021e3c:	e0bfff17 	ldw	r2,-4(fp)
 1021e40:	e0fffe17 	ldw	r3,-8(fp)
 1021e44:	10c0022e 	bgeu	r2,r3,1021e50 <alt_epcs_flash_memcmp+0x54>
 1021e48:	e0bfff17 	ldw	r2,-4(fp)
 1021e4c:	e0bffe15 	stw	r2,-8(fp)
 1021e50:	e0fffe17 	ldw	r3,-8(fp)
 1021e54:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 1021e58:	e0fffb17 	ldw	r3,-20(fp)
 1021e5c:	e0bfef17 	ldw	r2,-68(fp)
 1021e60:	188b883a 	add	r5,r3,r2
 1021e64:	e1bff104 	addi	r6,fp,-60
 1021e68:	e13ff917 	ldw	r4,-28(fp)
 1021e6c:	e1ffee17 	ldw	r7,-72(fp)
 1021e70:	10224340 	call	1022434 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 1021e74:	1004403a 	cmpge	r2,r2,zero
 1021e78:	1000031e 	bne	r2,zero,1021e88 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 1021e7c:	00bfffc4 	movi	r2,-1
 1021e80:	e0bffd15 	stw	r2,-12(fp)
 1021e84:	00001906 	br	1021eec <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 1021e88:	e0fffa17 	ldw	r3,-24(fp)
 1021e8c:	e0bfef17 	ldw	r2,-68(fp)
 1021e90:	1889883a 	add	r4,r3,r2
 1021e94:	e1bfee17 	ldw	r6,-72(fp)
 1021e98:	e17ff104 	addi	r5,fp,-60
 1021e9c:	100ecd80 	call	100ecd8 <memcmp>
 1021ea0:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 1021ea4:	e0bfed17 	ldw	r2,-76(fp)
 1021ea8:	1005003a 	cmpeq	r2,r2,zero
 1021eac:	1000031e 	bne	r2,zero,1021ebc <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 1021eb0:	e0ffed17 	ldw	r3,-76(fp)
 1021eb4:	e0fffd15 	stw	r3,-12(fp)
 1021eb8:	00000c06 	br	1021eec <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 1021ebc:	e0ffee17 	ldw	r3,-72(fp)
 1021ec0:	e0bffc17 	ldw	r2,-16(fp)
 1021ec4:	10c5c83a 	sub	r2,r2,r3
 1021ec8:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 1021ecc:	e0ffef17 	ldw	r3,-68(fp)
 1021ed0:	e0bfee17 	ldw	r2,-72(fp)
 1021ed4:	1885883a 	add	r2,r3,r2
 1021ed8:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 1021edc:	e0bffc17 	ldw	r2,-16(fp)
 1021ee0:	1004c03a 	cmpne	r2,r2,zero
 1021ee4:	103fd11e 	bne	r2,zero,1021e2c <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 1021ee8:	e03ffd15 	stw	zero,-12(fp)
 1021eec:	e0bffd17 	ldw	r2,-12(fp)
}
 1021ef0:	e037883a 	mov	sp,fp
 1021ef4:	dfc00117 	ldw	ra,4(sp)
 1021ef8:	df000017 	ldw	fp,0(sp)
 1021efc:	dec00204 	addi	sp,sp,8
 1021f00:	f800283a 	ret

01021f04 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 1021f04:	defff204 	addi	sp,sp,-56
 1021f08:	dfc00d15 	stw	ra,52(sp)
 1021f0c:	df000c15 	stw	fp,48(sp)
 1021f10:	df000c04 	addi	fp,sp,48
 1021f14:	e13ffa15 	stw	r4,-24(fp)
 1021f18:	e17ffb15 	stw	r5,-20(fp)
 1021f1c:	e1bffc15 	stw	r6,-16(fp)
 1021f20:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 1021f24:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 1021f28:	e03ff815 	stw	zero,-32(fp)
 1021f2c:	00008b06 	br	102215c <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 1021f30:	e0bff817 	ldw	r2,-32(fp)
 1021f34:	e0fffa17 	ldw	r3,-24(fp)
 1021f38:	1004913a 	slli	r2,r2,4
 1021f3c:	10c5883a 	add	r2,r2,r3
 1021f40:	10800d04 	addi	r2,r2,52
 1021f44:	10c00017 	ldw	r3,0(r2)
 1021f48:	e0bffb17 	ldw	r2,-20(fp)
 1021f4c:	10c08016 	blt	r2,r3,1022150 <alt_epcs_flash_write+0x24c>
 1021f50:	e0bff817 	ldw	r2,-32(fp)
 1021f54:	e0fffa17 	ldw	r3,-24(fp)
 1021f58:	1004913a 	slli	r2,r2,4
 1021f5c:	10c5883a 	add	r2,r2,r3
 1021f60:	10800d04 	addi	r2,r2,52
 1021f64:	11000017 	ldw	r4,0(r2)
 1021f68:	e0bff817 	ldw	r2,-32(fp)
 1021f6c:	e0fffa17 	ldw	r3,-24(fp)
 1021f70:	1004913a 	slli	r2,r2,4
 1021f74:	10c5883a 	add	r2,r2,r3
 1021f78:	10800e04 	addi	r2,r2,56
 1021f7c:	10800017 	ldw	r2,0(r2)
 1021f80:	2087883a 	add	r3,r4,r2
 1021f84:	e0bffb17 	ldw	r2,-20(fp)
 1021f88:	10c0710e 	bge	r2,r3,1022150 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 1021f8c:	e0bff817 	ldw	r2,-32(fp)
 1021f90:	e0fffa17 	ldw	r3,-24(fp)
 1021f94:	1004913a 	slli	r2,r2,4
 1021f98:	10c5883a 	add	r2,r2,r3
 1021f9c:	10800d04 	addi	r2,r2,52
 1021fa0:	10800017 	ldw	r2,0(r2)
 1021fa4:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 1021fa8:	e03ff715 	stw	zero,-36(fp)
 1021fac:	00006006 	br	1022130 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 1021fb0:	e0fffb17 	ldw	r3,-20(fp)
 1021fb4:	e0bff517 	ldw	r2,-44(fp)
 1021fb8:	18805116 	blt	r3,r2,1022100 <alt_epcs_flash_write+0x1fc>
 1021fbc:	e0bff817 	ldw	r2,-32(fp)
 1021fc0:	e0fffa17 	ldw	r3,-24(fp)
 1021fc4:	1004913a 	slli	r2,r2,4
 1021fc8:	10c5883a 	add	r2,r2,r3
 1021fcc:	10801004 	addi	r2,r2,64
 1021fd0:	10c00017 	ldw	r3,0(r2)
 1021fd4:	e0bff517 	ldw	r2,-44(fp)
 1021fd8:	1887883a 	add	r3,r3,r2
 1021fdc:	e0bffb17 	ldw	r2,-20(fp)
 1021fe0:	10c0470e 	bge	r2,r3,1022100 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 1021fe4:	e0bff817 	ldw	r2,-32(fp)
 1021fe8:	e0fffa17 	ldw	r3,-24(fp)
 1021fec:	1004913a 	slli	r2,r2,4
 1021ff0:	10c5883a 	add	r2,r2,r3
 1021ff4:	10801004 	addi	r2,r2,64
 1021ff8:	10c00017 	ldw	r3,0(r2)
 1021ffc:	e0bff517 	ldw	r2,-44(fp)
 1022000:	1887883a 	add	r3,r3,r2
 1022004:	e0bffb17 	ldw	r2,-20(fp)
 1022008:	1885c83a 	sub	r2,r3,r2
 102200c:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 1022010:	e0bff617 	ldw	r2,-40(fp)
 1022014:	e0bfff15 	stw	r2,-4(fp)
 1022018:	e0fffd17 	ldw	r3,-12(fp)
 102201c:	e0fffe15 	stw	r3,-8(fp)
 1022020:	e0bfff17 	ldw	r2,-4(fp)
 1022024:	e0fffe17 	ldw	r3,-8(fp)
 1022028:	10c0020e 	bge	r2,r3,1022034 <alt_epcs_flash_write+0x130>
 102202c:	e0bfff17 	ldw	r2,-4(fp)
 1022030:	e0bffe15 	stw	r2,-8(fp)
 1022034:	e0fffe17 	ldw	r3,-8(fp)
 1022038:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 102203c:	e1fff617 	ldw	r7,-40(fp)
 1022040:	e13ffa17 	ldw	r4,-24(fp)
 1022044:	e17ffc17 	ldw	r5,-16(fp)
 1022048:	e1bffb17 	ldw	r6,-20(fp)
 102204c:	1021dfc0 	call	1021dfc <alt_epcs_flash_memcmp>
 1022050:	1005003a 	cmpeq	r2,r2,zero
 1022054:	1000131e 	bne	r2,zero,10220a4 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 1022058:	e0bffa17 	ldw	r2,-24(fp)
 102205c:	10800817 	ldw	r2,32(r2)
 1022060:	e13ffa17 	ldw	r4,-24(fp)
 1022064:	e17ff517 	ldw	r5,-44(fp)
 1022068:	103ee83a 	callr	r2
 102206c:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 1022070:	e0bff917 	ldw	r2,-28(fp)
 1022074:	1004c03a 	cmpne	r2,r2,zero
 1022078:	10000a1e 	bne	r2,zero,10220a4 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 102207c:	e0bffa17 	ldw	r2,-24(fp)
 1022080:	10c00917 	ldw	r3,36(r2)
 1022084:	e0bff617 	ldw	r2,-40(fp)
 1022088:	d8800015 	stw	r2,0(sp)
 102208c:	e13ffa17 	ldw	r4,-24(fp)
 1022090:	e17ff517 	ldw	r5,-44(fp)
 1022094:	e1bffb17 	ldw	r6,-20(fp)
 1022098:	e1fffc17 	ldw	r7,-16(fp)
 102209c:	183ee83a 	callr	r3
 10220a0:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 10220a4:	e0fffd17 	ldw	r3,-12(fp)
 10220a8:	e0bff617 	ldw	r2,-40(fp)
 10220ac:	18802f26 	beq	r3,r2,102216c <alt_epcs_flash_write+0x268>
 10220b0:	e0bff917 	ldw	r2,-28(fp)
 10220b4:	1004c03a 	cmpne	r2,r2,zero
 10220b8:	10002c1e 	bne	r2,zero,102216c <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 10220bc:	e0fffd17 	ldw	r3,-12(fp)
 10220c0:	e0bff617 	ldw	r2,-40(fp)
 10220c4:	1885c83a 	sub	r2,r3,r2
 10220c8:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 10220cc:	e0bff817 	ldw	r2,-32(fp)
 10220d0:	e0fffa17 	ldw	r3,-24(fp)
 10220d4:	1004913a 	slli	r2,r2,4
 10220d8:	10c5883a 	add	r2,r2,r3
 10220dc:	10801004 	addi	r2,r2,64
 10220e0:	10c00017 	ldw	r3,0(r2)
 10220e4:	e0bff517 	ldw	r2,-44(fp)
 10220e8:	1885883a 	add	r2,r3,r2
 10220ec:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 10220f0:	e0fffc17 	ldw	r3,-16(fp)
 10220f4:	e0bff617 	ldw	r2,-40(fp)
 10220f8:	1885883a 	add	r2,r3,r2
 10220fc:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 1022100:	e0bff817 	ldw	r2,-32(fp)
 1022104:	e0fffa17 	ldw	r3,-24(fp)
 1022108:	1004913a 	slli	r2,r2,4
 102210c:	10c5883a 	add	r2,r2,r3
 1022110:	10801004 	addi	r2,r2,64
 1022114:	10c00017 	ldw	r3,0(r2)
 1022118:	e0bff517 	ldw	r2,-44(fp)
 102211c:	10c5883a 	add	r2,r2,r3
 1022120:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 1022124:	e0bff717 	ldw	r2,-36(fp)
 1022128:	10800044 	addi	r2,r2,1
 102212c:	e0bff715 	stw	r2,-36(fp)
 1022130:	e0bff817 	ldw	r2,-32(fp)
 1022134:	e0fffa17 	ldw	r3,-24(fp)
 1022138:	1004913a 	slli	r2,r2,4
 102213c:	10c5883a 	add	r2,r2,r3
 1022140:	10800f04 	addi	r2,r2,60
 1022144:	10c00017 	ldw	r3,0(r2)
 1022148:	e0bff717 	ldw	r2,-36(fp)
 102214c:	10ff9816 	blt	r2,r3,1021fb0 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 1022150:	e0bff817 	ldw	r2,-32(fp)
 1022154:	10800044 	addi	r2,r2,1
 1022158:	e0bff815 	stw	r2,-32(fp)
 102215c:	e0bffa17 	ldw	r2,-24(fp)
 1022160:	10c00c17 	ldw	r3,48(r2)
 1022164:	e0bff817 	ldw	r2,-32(fp)
 1022168:	10ff7116 	blt	r2,r3,1021f30 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 102216c:	e0bff917 	ldw	r2,-28(fp)
}
 1022170:	e037883a 	mov	sp,fp
 1022174:	dfc00117 	ldw	ra,4(sp)
 1022178:	df000017 	ldw	fp,0(sp)
 102217c:	dec00204 	addi	sp,sp,8
 1022180:	f800283a 	ret

01022184 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 1022184:	defffa04 	addi	sp,sp,-24
 1022188:	df000515 	stw	fp,20(sp)
 102218c:	df000504 	addi	fp,sp,20
 1022190:	e13ffd15 	stw	r4,-12(fp)
 1022194:	e17ffe15 	stw	r5,-8(fp)
 1022198:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 102219c:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 10221a0:	e0bffd17 	ldw	r2,-12(fp)
 10221a4:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 10221a8:	e0bffb17 	ldw	r2,-20(fp)
 10221ac:	10c00c17 	ldw	r3,48(r2)
 10221b0:	e0bfff17 	ldw	r2,-4(fp)
 10221b4:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 10221b8:	e0bffb17 	ldw	r2,-20(fp)
 10221bc:	10800c17 	ldw	r2,48(r2)
 10221c0:	1004c03a 	cmpne	r2,r2,zero
 10221c4:	1000031e 	bne	r2,zero,10221d4 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 10221c8:	00bffec4 	movi	r2,-5
 10221cc:	e0bffc15 	stw	r2,-16(fp)
 10221d0:	00000b06 	br	1022200 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 10221d4:	e0bffb17 	ldw	r2,-20(fp)
 10221d8:	10800c17 	ldw	r2,48(r2)
 10221dc:	10800250 	cmplti	r2,r2,9
 10221e0:	1000031e 	bne	r2,zero,10221f0 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 10221e4:	00bffd04 	movi	r2,-12
 10221e8:	e0bffc15 	stw	r2,-16(fp)
 10221ec:	00000406 	br	1022200 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 10221f0:	e0bffb17 	ldw	r2,-20(fp)
 10221f4:	10c00d04 	addi	r3,r2,52
 10221f8:	e0bffe17 	ldw	r2,-8(fp)
 10221fc:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 1022200:	e0bffc17 	ldw	r2,-16(fp)
}
 1022204:	e037883a 	mov	sp,fp
 1022208:	df000017 	ldw	fp,0(sp)
 102220c:	dec00104 	addi	sp,sp,4
 1022210:	f800283a 	ret

01022214 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 1022214:	defffa04 	addi	sp,sp,-24
 1022218:	dfc00515 	stw	ra,20(sp)
 102221c:	df000415 	stw	fp,16(sp)
 1022220:	df000404 	addi	fp,sp,16
 1022224:	e13ffe15 	stw	r4,-8(fp)
 1022228:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 102222c:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 1022230:	e0bffe17 	ldw	r2,-8(fp)
 1022234:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 1022238:	e13ffe17 	ldw	r4,-8(fp)
 102223c:	e17fff17 	ldw	r5,-4(fp)
 1022240:	10222840 	call	1022284 <alt_epcs_test_address>
 1022244:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 1022248:	e0bffd17 	ldw	r2,-12(fp)
 102224c:	1004803a 	cmplt	r2,r2,zero
 1022250:	1000061e 	bne	r2,zero,102226c <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 1022254:	e0bffc17 	ldw	r2,-16(fp)
 1022258:	11002d17 	ldw	r4,180(r2)
 102225c:	e17fff17 	ldw	r5,-4(fp)
 1022260:	e0bffc17 	ldw	r2,-16(fp)
 1022264:	11803117 	ldw	r6,196(r2)
 1022268:	10238980 	call	1023898 <epcs_sector_erase>
  }
  return ret_code;
 102226c:	e0bffd17 	ldw	r2,-12(fp)
}
 1022270:	e037883a 	mov	sp,fp
 1022274:	dfc00117 	ldw	ra,4(sp)
 1022278:	df000017 	ldw	fp,0(sp)
 102227c:	dec00204 	addi	sp,sp,8
 1022280:	f800283a 	ret

01022284 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 1022284:	defff904 	addi	sp,sp,-28
 1022288:	df000615 	stw	fp,24(sp)
 102228c:	df000604 	addi	fp,sp,24
 1022290:	e13ffe15 	stw	r4,-8(fp)
 1022294:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 1022298:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 102229c:	e0bffe17 	ldw	r2,-8(fp)
 10222a0:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 10222a4:	e0bffc17 	ldw	r2,-16(fp)
 10222a8:	10800c17 	ldw	r2,48(r2)
 10222ac:	10bfffc4 	addi	r2,r2,-1
 10222b0:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 10222b4:	e0bffb17 	ldw	r2,-20(fp)
 10222b8:	e0fffc17 	ldw	r3,-16(fp)
 10222bc:	1004913a 	slli	r2,r2,4
 10222c0:	10c5883a 	add	r2,r2,r3
 10222c4:	10800d04 	addi	r2,r2,52
 10222c8:	11000017 	ldw	r4,0(r2)
 10222cc:	e0bffb17 	ldw	r2,-20(fp)
 10222d0:	e0fffc17 	ldw	r3,-16(fp)
 10222d4:	1004913a 	slli	r2,r2,4
 10222d8:	10c5883a 	add	r2,r2,r3
 10222dc:	10800e04 	addi	r2,r2,56
 10222e0:	10800017 	ldw	r2,0(r2)
 10222e4:	2085883a 	add	r2,r4,r2
 10222e8:	10bfffc4 	addi	r2,r2,-1
 10222ec:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 10222f0:	e0ffff17 	ldw	r3,-4(fp)
 10222f4:	e0bffa17 	ldw	r2,-24(fp)
 10222f8:	10c0022e 	bgeu	r2,r3,1022304 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 10222fc:	00bffec4 	movi	r2,-5
 1022300:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 1022304:	e0bffd17 	ldw	r2,-12(fp)
}
 1022308:	e037883a 	mov	sp,fp
 102230c:	df000017 	ldw	fp,0(sp)
 1022310:	dec00104 	addi	sp,sp,4
 1022314:	f800283a 	ret

01022318 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 1022318:	defff204 	addi	sp,sp,-56
 102231c:	dfc00d15 	stw	ra,52(sp)
 1022320:	df000c15 	stw	fp,48(sp)
 1022324:	df000c04 	addi	fp,sp,48
 1022328:	e13ffa15 	stw	r4,-24(fp)
 102232c:	e17ffb15 	stw	r5,-20(fp)
 1022330:	e1bffc15 	stw	r6,-16(fp)
 1022334:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 1022338:	e0bffa17 	ldw	r2,-24(fp)
 102233c:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 1022340:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 1022344:	e13ffa17 	ldw	r4,-24(fp)
 1022348:	e17ffc17 	ldw	r5,-16(fp)
 102234c:	10222840 	call	1022284 <alt_epcs_test_address>
 1022350:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 1022354:	e0bff917 	ldw	r2,-28(fp)
 1022358:	1004803a 	cmplt	r2,r2,zero
 102235c:	10002f1e 	bne	r2,zero,102241c <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 1022360:	00002b06 	br	1022410 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 1022364:	e0bff817 	ldw	r2,-32(fp)
 1022368:	10c03017 	ldw	r3,192(r2)
 102236c:	e0bffc17 	ldw	r2,-16(fp)
 1022370:	1887883a 	add	r3,r3,r2
 1022374:	e0bff817 	ldw	r2,-32(fp)
 1022378:	10803017 	ldw	r2,192(r2)
 102237c:	0085c83a 	sub	r2,zero,r2
 1022380:	1884703a 	and	r2,r3,r2
 1022384:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 1022388:	e0fff517 	ldw	r3,-44(fp)
 102238c:	e0bffc17 	ldw	r2,-16(fp)
 1022390:	1885c83a 	sub	r2,r3,r2
 1022394:	e0c00217 	ldw	r3,8(fp)
 1022398:	e0ffff15 	stw	r3,-4(fp)
 102239c:	e0bffe15 	stw	r2,-8(fp)
 10223a0:	e0bfff17 	ldw	r2,-4(fp)
 10223a4:	e0fffe17 	ldw	r3,-8(fp)
 10223a8:	10c0020e 	bge	r2,r3,10223b4 <alt_epcs_flash_write_block+0x9c>
 10223ac:	e0bfff17 	ldw	r2,-4(fp)
 10223b0:	e0bffe15 	stw	r2,-8(fp)
 10223b4:	e0fffe17 	ldw	r3,-8(fp)
 10223b8:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 10223bc:	e0bff817 	ldw	r2,-32(fp)
 10223c0:	11002d17 	ldw	r4,180(r2)
 10223c4:	e0fffd17 	ldw	r3,-12(fp)
 10223c8:	e0bff717 	ldw	r2,-36(fp)
 10223cc:	188d883a 	add	r6,r3,r2
 10223d0:	e0bff817 	ldw	r2,-32(fp)
 10223d4:	10803117 	ldw	r2,196(r2)
 10223d8:	d8800015 	stw	r2,0(sp)
 10223dc:	e17ffc17 	ldw	r5,-16(fp)
 10223e0:	e1fff617 	ldw	r7,-40(fp)
 10223e4:	1023c000 	call	1023c00 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 10223e8:	e0c00217 	ldw	r3,8(fp)
 10223ec:	e0bff617 	ldw	r2,-40(fp)
 10223f0:	1885c83a 	sub	r2,r3,r2
 10223f4:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 10223f8:	e0fff717 	ldw	r3,-36(fp)
 10223fc:	e0bff617 	ldw	r2,-40(fp)
 1022400:	1885883a 	add	r2,r3,r2
 1022404:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 1022408:	e0bff517 	ldw	r2,-44(fp)
 102240c:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 1022410:	e0800217 	ldw	r2,8(fp)
 1022414:	1004c03a 	cmpne	r2,r2,zero
 1022418:	103fd21e 	bne	r2,zero,1022364 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 102241c:	e0bff917 	ldw	r2,-28(fp)
}
 1022420:	e037883a 	mov	sp,fp
 1022424:	dfc00117 	ldw	ra,4(sp)
 1022428:	df000017 	ldw	fp,0(sp)
 102242c:	dec00204 	addi	sp,sp,8
 1022430:	f800283a 	ret

01022434 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 1022434:	defff704 	addi	sp,sp,-36
 1022438:	dfc00815 	stw	ra,32(sp)
 102243c:	df000715 	stw	fp,28(sp)
 1022440:	df000704 	addi	fp,sp,28
 1022444:	e13ffc15 	stw	r4,-16(fp)
 1022448:	e17ffd15 	stw	r5,-12(fp)
 102244c:	e1bffe15 	stw	r6,-8(fp)
 1022450:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 1022454:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 1022458:	e0bffc17 	ldw	r2,-16(fp)
 102245c:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 1022460:	e13ffc17 	ldw	r4,-16(fp)
 1022464:	e17ffd17 	ldw	r5,-12(fp)
 1022468:	10222840 	call	1022284 <alt_epcs_test_address>
 102246c:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 1022470:	e0bffb17 	ldw	r2,-20(fp)
 1022474:	1004803a 	cmplt	r2,r2,zero
 1022478:	10000e1e 	bne	r2,zero,10224b4 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 102247c:	e0bffa17 	ldw	r2,-24(fp)
 1022480:	11002d17 	ldw	r4,180(r2)
 1022484:	e1bffe17 	ldw	r6,-8(fp)
 1022488:	e0bffa17 	ldw	r2,-24(fp)
 102248c:	10803117 	ldw	r2,196(r2)
 1022490:	d8800015 	stw	r2,0(sp)
 1022494:	e17ffd17 	ldw	r5,-12(fp)
 1022498:	e1ffff17 	ldw	r7,-4(fp)
 102249c:	1023a000 	call	1023a00 <epcs_read_buffer>
 10224a0:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 10224a4:	e0fffb17 	ldw	r3,-20(fp)
 10224a8:	e0bfff17 	ldw	r2,-4(fp)
 10224ac:	1880011e 	bne	r3,r2,10224b4 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 10224b0:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 10224b4:	e0bffb17 	ldw	r2,-20(fp)
}
 10224b8:	e037883a 	mov	sp,fp
 10224bc:	dfc00117 	ldw	ra,4(sp)
 10224c0:	df000017 	ldw	fp,0(sp)
 10224c4:	dec00204 	addi	sp,sp,8
 10224c8:	f800283a 	ret

010224cc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10224cc:	defffa04 	addi	sp,sp,-24
 10224d0:	dfc00515 	stw	ra,20(sp)
 10224d4:	df000415 	stw	fp,16(sp)
 10224d8:	df000404 	addi	fp,sp,16
 10224dc:	e13ffd15 	stw	r4,-12(fp)
 10224e0:	e17ffe15 	stw	r5,-8(fp)
 10224e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10224e8:	e0bffd17 	ldw	r2,-12(fp)
 10224ec:	10800017 	ldw	r2,0(r2)
 10224f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 10224f4:	e0bffc17 	ldw	r2,-16(fp)
 10224f8:	11000a04 	addi	r4,r2,40
 10224fc:	e0bffd17 	ldw	r2,-12(fp)
 1022500:	11c00217 	ldw	r7,8(r2)
 1022504:	e17ffe17 	ldw	r5,-8(fp)
 1022508:	e1bfff17 	ldw	r6,-4(fp)
 102250c:	1022c880 	call	1022c88 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1022510:	e037883a 	mov	sp,fp
 1022514:	dfc00117 	ldw	ra,4(sp)
 1022518:	df000017 	ldw	fp,0(sp)
 102251c:	dec00204 	addi	sp,sp,8
 1022520:	f800283a 	ret

01022524 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1022524:	defffa04 	addi	sp,sp,-24
 1022528:	dfc00515 	stw	ra,20(sp)
 102252c:	df000415 	stw	fp,16(sp)
 1022530:	df000404 	addi	fp,sp,16
 1022534:	e13ffd15 	stw	r4,-12(fp)
 1022538:	e17ffe15 	stw	r5,-8(fp)
 102253c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1022540:	e0bffd17 	ldw	r2,-12(fp)
 1022544:	10800017 	ldw	r2,0(r2)
 1022548:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 102254c:	e0bffc17 	ldw	r2,-16(fp)
 1022550:	11000a04 	addi	r4,r2,40
 1022554:	e0bffd17 	ldw	r2,-12(fp)
 1022558:	11c00217 	ldw	r7,8(r2)
 102255c:	e17ffe17 	ldw	r5,-8(fp)
 1022560:	e1bfff17 	ldw	r6,-4(fp)
 1022564:	1022f480 	call	1022f48 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1022568:	e037883a 	mov	sp,fp
 102256c:	dfc00117 	ldw	ra,4(sp)
 1022570:	df000017 	ldw	fp,0(sp)
 1022574:	dec00204 	addi	sp,sp,8
 1022578:	f800283a 	ret

0102257c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 102257c:	defffc04 	addi	sp,sp,-16
 1022580:	dfc00315 	stw	ra,12(sp)
 1022584:	df000215 	stw	fp,8(sp)
 1022588:	df000204 	addi	fp,sp,8
 102258c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1022590:	e0bfff17 	ldw	r2,-4(fp)
 1022594:	10800017 	ldw	r2,0(r2)
 1022598:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 102259c:	e0bffe17 	ldw	r2,-8(fp)
 10225a0:	11000a04 	addi	r4,r2,40
 10225a4:	e0bfff17 	ldw	r2,-4(fp)
 10225a8:	11400217 	ldw	r5,8(r2)
 10225ac:	1022b200 	call	1022b20 <altera_avalon_jtag_uart_close>
}
 10225b0:	e037883a 	mov	sp,fp
 10225b4:	dfc00117 	ldw	ra,4(sp)
 10225b8:	df000017 	ldw	fp,0(sp)
 10225bc:	dec00204 	addi	sp,sp,8
 10225c0:	f800283a 	ret

010225c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 10225c4:	defffa04 	addi	sp,sp,-24
 10225c8:	dfc00515 	stw	ra,20(sp)
 10225cc:	df000415 	stw	fp,16(sp)
 10225d0:	df000404 	addi	fp,sp,16
 10225d4:	e13ffd15 	stw	r4,-12(fp)
 10225d8:	e17ffe15 	stw	r5,-8(fp)
 10225dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 10225e0:	e0bffd17 	ldw	r2,-12(fp)
 10225e4:	10800017 	ldw	r2,0(r2)
 10225e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 10225ec:	e0bffc17 	ldw	r2,-16(fp)
 10225f0:	11000a04 	addi	r4,r2,40
 10225f4:	e17ffe17 	ldw	r5,-8(fp)
 10225f8:	e1bfff17 	ldw	r6,-4(fp)
 10225fc:	1022b940 	call	1022b94 <altera_avalon_jtag_uart_ioctl>
}
 1022600:	e037883a 	mov	sp,fp
 1022604:	dfc00117 	ldw	ra,4(sp)
 1022608:	df000017 	ldw	fp,0(sp)
 102260c:	dec00204 	addi	sp,sp,8
 1022610:	f800283a 	ret

01022614 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1022614:	defff504 	addi	sp,sp,-44
 1022618:	dfc00a15 	stw	ra,40(sp)
 102261c:	df000915 	stw	fp,36(sp)
 1022620:	df000904 	addi	fp,sp,36
 1022624:	e13ffd15 	stw	r4,-12(fp)
 1022628:	e17ffe15 	stw	r5,-8(fp)
 102262c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 1022630:	e0bffd17 	ldw	r2,-12(fp)
 1022634:	10800c04 	addi	r2,r2,48
 1022638:	e0bffb15 	stw	r2,-20(fp)
 102263c:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 1022640:	e13ffc0b 	ldhu	r4,-16(fp)
 1022644:	e17ffc84 	addi	r5,fp,-14
 1022648:	101bcec0 	call	101bcec <OSFlagCreate>
 102264c:	1007883a 	mov	r3,r2
 1022650:	e0bffb17 	ldw	r2,-20(fp)
 1022654:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 1022658:	e0bffd17 	ldw	r2,-12(fp)
 102265c:	10800a04 	addi	r2,r2,40
 1022660:	e0bff915 	stw	r2,-28(fp)
 1022664:	00800044 	movi	r2,1
 1022668:	e0bffa0d 	sth	r2,-24(fp)
 102266c:	e13ffa0b 	ldhu	r4,-24(fp)
 1022670:	101eef40 	call	101eef4 <OSSemCreate>
 1022674:	1007883a 	mov	r3,r2
 1022678:	e0bff917 	ldw	r2,-28(fp)
 102267c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 1022680:	e0bffd17 	ldw	r2,-12(fp)
 1022684:	10800b04 	addi	r2,r2,44
 1022688:	e0bff715 	stw	r2,-36(fp)
 102268c:	00800044 	movi	r2,1
 1022690:	e0bff80d 	sth	r2,-32(fp)
 1022694:	e13ff80b 	ldhu	r4,-32(fp)
 1022698:	101eef40 	call	101eef4 <OSSemCreate>
 102269c:	1007883a 	mov	r3,r2
 10226a0:	e0bff717 	ldw	r2,-36(fp)
 10226a4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10226a8:	e0fffd17 	ldw	r3,-12(fp)
 10226ac:	00800044 	movi	r2,1
 10226b0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 10226b4:	e0bffd17 	ldw	r2,-12(fp)
 10226b8:	10800017 	ldw	r2,0(r2)
 10226bc:	11000104 	addi	r4,r2,4
 10226c0:	e0bffd17 	ldw	r2,-12(fp)
 10226c4:	10800817 	ldw	r2,32(r2)
 10226c8:	1007883a 	mov	r3,r2
 10226cc:	2005883a 	mov	r2,r4
 10226d0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 10226d4:	e13fff17 	ldw	r4,-4(fp)
 10226d8:	e17ffd17 	ldw	r5,-12(fp)
 10226dc:	018040b4 	movhi	r6,258
 10226e0:	3189d104 	addi	r6,r6,10052
 10226e4:	10244f00 	call	10244f0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 10226e8:	e0bffd17 	ldw	r2,-12(fp)
 10226ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 10226f0:	e0bffd17 	ldw	r2,-12(fp)
 10226f4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10226f8:	008040f4 	movhi	r2,259
 10226fc:	10a43004 	addi	r2,r2,-28480
 1022700:	10800017 	ldw	r2,0(r2)
 1022704:	100b883a 	mov	r5,r2
 1022708:	018040b4 	movhi	r6,258
 102270c:	318a8304 	addi	r6,r6,10764
 1022710:	e1fffd17 	ldw	r7,-12(fp)
 1022714:	1023f0c0 	call	1023f0c <alt_alarm_start>
 1022718:	1004403a 	cmpge	r2,r2,zero
 102271c:	1000041e 	bne	r2,zero,1022730 <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1022720:	e0fffd17 	ldw	r3,-12(fp)
 1022724:	00a00034 	movhi	r2,32768
 1022728:	10bfffc4 	addi	r2,r2,-1
 102272c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1022730:	e037883a 	mov	sp,fp
 1022734:	dfc00117 	ldw	ra,4(sp)
 1022738:	df000017 	ldw	fp,0(sp)
 102273c:	dec00204 	addi	sp,sp,8
 1022740:	f800283a 	ret

01022744 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1022744:	defff104 	addi	sp,sp,-60
 1022748:	dfc00e15 	stw	ra,56(sp)
 102274c:	df000d15 	stw	fp,52(sp)
 1022750:	df000d04 	addi	fp,sp,52
 1022754:	e13ffe15 	stw	r4,-8(fp)
 1022758:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 102275c:	e0bffe17 	ldw	r2,-8(fp)
 1022760:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
 1022764:	e0bffc17 	ldw	r2,-16(fp)
 1022768:	10800017 	ldw	r2,0(r2)
 102276c:	e0bffb15 	stw	r2,-20(fp)
 1022770:	00000006 	br	1022774 <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1022774:	e0bffb17 	ldw	r2,-20(fp)
 1022778:	10800104 	addi	r2,r2,4
 102277c:	10800037 	ldwio	r2,0(r2)
 1022780:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1022784:	e0bffa17 	ldw	r2,-24(fp)
 1022788:	1080c00c 	andi	r2,r2,768
 102278c:	1005003a 	cmpeq	r2,r2,zero
 1022790:	1000991e 	bne	r2,zero,10229f8 <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1022794:	e0bffa17 	ldw	r2,-24(fp)
 1022798:	1080400c 	andi	r2,r2,256
 102279c:	1005003a 	cmpeq	r2,r2,zero
 10227a0:	1000481e 	bne	r2,zero,10228c4 <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 10227a4:	00800074 	movhi	r2,1
 10227a8:	e0bff915 	stw	r2,-28(fp)
 10227ac:	00000006 	br	10227b0 <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10227b0:	e0bffc17 	ldw	r2,-16(fp)
 10227b4:	10800d17 	ldw	r2,52(r2)
 10227b8:	10800044 	addi	r2,r2,1
 10227bc:	1081ffcc 	andi	r2,r2,2047
 10227c0:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
 10227c4:	e0bffc17 	ldw	r2,-16(fp)
 10227c8:	10c00e17 	ldw	r3,56(r2)
 10227cc:	e0bff817 	ldw	r2,-32(fp)
 10227d0:	18802826 	beq	r3,r2,1022874 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 10227d4:	e0bffb17 	ldw	r2,-20(fp)
 10227d8:	10800037 	ldwio	r2,0(r2)
 10227dc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 10227e0:	e0bff917 	ldw	r2,-28(fp)
 10227e4:	10a0000c 	andi	r2,r2,32768
 10227e8:	1005003a 	cmpeq	r2,r2,zero
 10227ec:	1000211e 	bne	r2,zero,1022874 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 10227f0:	e0bffc17 	ldw	r2,-16(fp)
 10227f4:	10c00d17 	ldw	r3,52(r2)
 10227f8:	e0bff917 	ldw	r2,-28(fp)
 10227fc:	1009883a 	mov	r4,r2
 1022800:	e0bffc17 	ldw	r2,-16(fp)
 1022804:	1885883a 	add	r2,r3,r2
 1022808:	10801104 	addi	r2,r2,68
 102280c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1022810:	e0bffc17 	ldw	r2,-16(fp)
 1022814:	10800d17 	ldw	r2,52(r2)
 1022818:	10800044 	addi	r2,r2,1
 102281c:	10c1ffcc 	andi	r3,r2,2047
 1022820:	e0bffc17 	ldw	r2,-16(fp)
 1022824:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 1022828:	e0bffc17 	ldw	r2,-16(fp)
 102282c:	10800c17 	ldw	r2,48(r2)
 1022830:	e0bff515 	stw	r2,-44(fp)
 1022834:	00800044 	movi	r2,1
 1022838:	e0bff60d 	sth	r2,-40(fp)
 102283c:	00800044 	movi	r2,1
 1022840:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 1022844:	008040f4 	movhi	r2,259
 1022848:	10a41b44 	addi	r2,r2,-28563
 102284c:	10800003 	ldbu	r2,0(r2)
 1022850:	10803fcc 	andi	r2,r2,255
 1022854:	1005003a 	cmpeq	r2,r2,zero
 1022858:	103fd51e 	bne	r2,zero,10227b0 <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
 102285c:	e17ff60b 	ldhu	r5,-40(fp)
 1022860:	e1bff683 	ldbu	r6,-38(fp)
 1022864:	e1fffd04 	addi	r7,fp,-12
 1022868:	e13ff517 	ldw	r4,-44(fp)
 102286c:	101ca140 	call	101ca14 <OSFlagPost>
    return err;
 1022870:	003fcf06 	br	10227b0 <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1022874:	e0bff917 	ldw	r2,-28(fp)
 1022878:	10bfffec 	andhi	r2,r2,65535
 102287c:	1005003a 	cmpeq	r2,r2,zero
 1022880:	1000101e 	bne	r2,zero,10228c4 <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1022884:	e0bffc17 	ldw	r2,-16(fp)
 1022888:	10c00817 	ldw	r3,32(r2)
 102288c:	00bfff84 	movi	r2,-2
 1022890:	1886703a 	and	r3,r3,r2
 1022894:	e0bffc17 	ldw	r2,-16(fp)
 1022898:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 102289c:	e0bffb17 	ldw	r2,-20(fp)
 10228a0:	11000104 	addi	r4,r2,4
 10228a4:	e0bffc17 	ldw	r2,-16(fp)
 10228a8:	10800817 	ldw	r2,32(r2)
 10228ac:	1007883a 	mov	r3,r2
 10228b0:	2005883a 	mov	r2,r4
 10228b4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10228b8:	e0bffb17 	ldw	r2,-20(fp)
 10228bc:	10800104 	addi	r2,r2,4
 10228c0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 10228c4:	e0bffa17 	ldw	r2,-24(fp)
 10228c8:	1080800c 	andi	r2,r2,512
 10228cc:	1005003a 	cmpeq	r2,r2,zero
 10228d0:	103fa81e 	bne	r2,zero,1022774 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 10228d4:	e0bffa17 	ldw	r2,-24(fp)
 10228d8:	10bfffec 	andhi	r2,r2,65535
 10228dc:	1004d43a 	srli	r2,r2,16
 10228e0:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 10228e4:	00002706 	br	1022984 <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 10228e8:	e13ffb17 	ldw	r4,-20(fp)
 10228ec:	e0bffc17 	ldw	r2,-16(fp)
 10228f0:	10c01017 	ldw	r3,64(r2)
 10228f4:	e0bffc17 	ldw	r2,-16(fp)
 10228f8:	1885883a 	add	r2,r3,r2
 10228fc:	10821104 	addi	r2,r2,2116
 1022900:	10800003 	ldbu	r2,0(r2)
 1022904:	10c03fcc 	andi	r3,r2,255
 1022908:	18c0201c 	xori	r3,r3,128
 102290c:	18ffe004 	addi	r3,r3,-128
 1022910:	2005883a 	mov	r2,r4
 1022914:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1022918:	e0bffc17 	ldw	r2,-16(fp)
 102291c:	10801017 	ldw	r2,64(r2)
 1022920:	10800044 	addi	r2,r2,1
 1022924:	10c1ffcc 	andi	r3,r2,2047
 1022928:	e0bffc17 	ldw	r2,-16(fp)
 102292c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 1022930:	e0bffc17 	ldw	r2,-16(fp)
 1022934:	10800c17 	ldw	r2,48(r2)
 1022938:	e0bff315 	stw	r2,-52(fp)
 102293c:	00800084 	movi	r2,2
 1022940:	e0bff40d 	sth	r2,-48(fp)
 1022944:	00800044 	movi	r2,1
 1022948:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 102294c:	008040f4 	movhi	r2,259
 1022950:	10a41b44 	addi	r2,r2,-28563
 1022954:	10800003 	ldbu	r2,0(r2)
 1022958:	10803fcc 	andi	r2,r2,255
 102295c:	1005003a 	cmpeq	r2,r2,zero
 1022960:	1000051e 	bne	r2,zero,1022978 <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
 1022964:	e17ff40b 	ldhu	r5,-48(fp)
 1022968:	e1bff483 	ldbu	r6,-46(fp)
 102296c:	e1fffd44 	addi	r7,fp,-11
 1022970:	e13ff317 	ldw	r4,-52(fp)
 1022974:	101ca140 	call	101ca14 <OSFlagPost>

        space--;
 1022978:	e0bff717 	ldw	r2,-36(fp)
 102297c:	10bfffc4 	addi	r2,r2,-1
 1022980:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1022984:	e0bff717 	ldw	r2,-36(fp)
 1022988:	1005003a 	cmpeq	r2,r2,zero
 102298c:	1000051e 	bne	r2,zero,10229a4 <altera_avalon_jtag_uart_irq+0x260>
 1022990:	e0bffc17 	ldw	r2,-16(fp)
 1022994:	10c01017 	ldw	r3,64(r2)
 1022998:	e0bffc17 	ldw	r2,-16(fp)
 102299c:	10800f17 	ldw	r2,60(r2)
 10229a0:	18bfd11e 	bne	r3,r2,10228e8 <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 10229a4:	e0bff717 	ldw	r2,-36(fp)
 10229a8:	1005003a 	cmpeq	r2,r2,zero
 10229ac:	103f711e 	bne	r2,zero,1022774 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10229b0:	e0bffc17 	ldw	r2,-16(fp)
 10229b4:	10c00817 	ldw	r3,32(r2)
 10229b8:	00bfff44 	movi	r2,-3
 10229bc:	1886703a 	and	r3,r3,r2
 10229c0:	e0bffc17 	ldw	r2,-16(fp)
 10229c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10229c8:	e0bffc17 	ldw	r2,-16(fp)
 10229cc:	10800017 	ldw	r2,0(r2)
 10229d0:	11000104 	addi	r4,r2,4
 10229d4:	e0bffc17 	ldw	r2,-16(fp)
 10229d8:	10800817 	ldw	r2,32(r2)
 10229dc:	1007883a 	mov	r3,r2
 10229e0:	2005883a 	mov	r2,r4
 10229e4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10229e8:	e0bffb17 	ldw	r2,-20(fp)
 10229ec:	10800104 	addi	r2,r2,4
 10229f0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 10229f4:	003f5f06 	br	1022774 <altera_avalon_jtag_uart_irq+0x30>
}
 10229f8:	e037883a 	mov	sp,fp
 10229fc:	dfc00117 	ldw	ra,4(sp)
 1022a00:	df000017 	ldw	fp,0(sp)
 1022a04:	dec00204 	addi	sp,sp,8
 1022a08:	f800283a 	ret

01022a0c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1022a0c:	defff804 	addi	sp,sp,-32
 1022a10:	dfc00715 	stw	ra,28(sp)
 1022a14:	df000615 	stw	fp,24(sp)
 1022a18:	df000604 	addi	fp,sp,24
 1022a1c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1022a20:	e0bfff17 	ldw	r2,-4(fp)
 1022a24:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1022a28:	e0bffd17 	ldw	r2,-12(fp)
 1022a2c:	10800017 	ldw	r2,0(r2)
 1022a30:	10800104 	addi	r2,r2,4
 1022a34:	10800037 	ldwio	r2,0(r2)
 1022a38:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1022a3c:	e0bffc17 	ldw	r2,-16(fp)
 1022a40:	1081000c 	andi	r2,r2,1024
 1022a44:	1005003a 	cmpeq	r2,r2,zero
 1022a48:	10000c1e 	bne	r2,zero,1022a7c <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1022a4c:	e0bffd17 	ldw	r2,-12(fp)
 1022a50:	10800017 	ldw	r2,0(r2)
 1022a54:	11000104 	addi	r4,r2,4
 1022a58:	e0bffd17 	ldw	r2,-12(fp)
 1022a5c:	10800817 	ldw	r2,32(r2)
 1022a60:	10810014 	ori	r2,r2,1024
 1022a64:	1007883a 	mov	r3,r2
 1022a68:	2005883a 	mov	r2,r4
 1022a6c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1022a70:	e0bffd17 	ldw	r2,-12(fp)
 1022a74:	10000915 	stw	zero,36(r2)
 1022a78:	00002106 	br	1022b00 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1022a7c:	e0bffd17 	ldw	r2,-12(fp)
 1022a80:	10c00917 	ldw	r3,36(r2)
 1022a84:	00a00034 	movhi	r2,32768
 1022a88:	10bfff04 	addi	r2,r2,-4
 1022a8c:	10c01c36 	bltu	r2,r3,1022b00 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 1022a90:	e0bffd17 	ldw	r2,-12(fp)
 1022a94:	10800917 	ldw	r2,36(r2)
 1022a98:	10c00044 	addi	r3,r2,1
 1022a9c:	e0bffd17 	ldw	r2,-12(fp)
 1022aa0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 1022aa4:	e0bffd17 	ldw	r2,-12(fp)
 1022aa8:	10c00917 	ldw	r3,36(r2)
 1022aac:	e0bffd17 	ldw	r2,-12(fp)
 1022ab0:	10800117 	ldw	r2,4(r2)
 1022ab4:	18801236 	bltu	r3,r2,1022b00 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 1022ab8:	e0bffd17 	ldw	r2,-12(fp)
 1022abc:	10800c17 	ldw	r2,48(r2)
 1022ac0:	e0bffa15 	stw	r2,-24(fp)
 1022ac4:	00800104 	movi	r2,4
 1022ac8:	e0bffb0d 	sth	r2,-20(fp)
 1022acc:	00800044 	movi	r2,1
 1022ad0:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 1022ad4:	008040f4 	movhi	r2,259
 1022ad8:	10a41b44 	addi	r2,r2,-28563
 1022adc:	10800003 	ldbu	r2,0(r2)
 1022ae0:	10803fcc 	andi	r2,r2,255
 1022ae4:	1005003a 	cmpeq	r2,r2,zero
 1022ae8:	1000051e 	bne	r2,zero,1022b00 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 1022aec:	e17ffb0b 	ldhu	r5,-20(fp)
 1022af0:	e1bffb83 	ldbu	r6,-18(fp)
 1022af4:	e1fffe04 	addi	r7,fp,-8
 1022af8:	e13ffa17 	ldw	r4,-24(fp)
 1022afc:	101ca140 	call	101ca14 <OSFlagPost>
 1022b00:	008040f4 	movhi	r2,259
 1022b04:	10a43004 	addi	r2,r2,-28480
 1022b08:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 1022b0c:	e037883a 	mov	sp,fp
 1022b10:	dfc00117 	ldw	ra,4(sp)
 1022b14:	df000017 	ldw	fp,0(sp)
 1022b18:	dec00204 	addi	sp,sp,8
 1022b1c:	f800283a 	ret

01022b20 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1022b20:	defffc04 	addi	sp,sp,-16
 1022b24:	df000315 	stw	fp,12(sp)
 1022b28:	df000304 	addi	fp,sp,12
 1022b2c:	e13ffd15 	stw	r4,-12(fp)
 1022b30:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1022b34:	00000706 	br	1022b54 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1022b38:	e0bffe17 	ldw	r2,-8(fp)
 1022b3c:	1090000c 	andi	r2,r2,16384
 1022b40:	1005003a 	cmpeq	r2,r2,zero
 1022b44:	1000031e 	bne	r2,zero,1022b54 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1022b48:	00bffd44 	movi	r2,-11
 1022b4c:	e0bfff15 	stw	r2,-4(fp)
 1022b50:	00000b06 	br	1022b80 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1022b54:	e0bffd17 	ldw	r2,-12(fp)
 1022b58:	10c01017 	ldw	r3,64(r2)
 1022b5c:	e0bffd17 	ldw	r2,-12(fp)
 1022b60:	10800f17 	ldw	r2,60(r2)
 1022b64:	18800526 	beq	r3,r2,1022b7c <altera_avalon_jtag_uart_close+0x5c>
 1022b68:	e0bffd17 	ldw	r2,-12(fp)
 1022b6c:	10c00917 	ldw	r3,36(r2)
 1022b70:	e0bffd17 	ldw	r2,-12(fp)
 1022b74:	10800117 	ldw	r2,4(r2)
 1022b78:	18bfef36 	bltu	r3,r2,1022b38 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1022b7c:	e03fff15 	stw	zero,-4(fp)
 1022b80:	e0bfff17 	ldw	r2,-4(fp)
}
 1022b84:	e037883a 	mov	sp,fp
 1022b88:	df000017 	ldw	fp,0(sp)
 1022b8c:	dec00104 	addi	sp,sp,4
 1022b90:	f800283a 	ret

01022b94 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1022b94:	defff804 	addi	sp,sp,-32
 1022b98:	df000715 	stw	fp,28(sp)
 1022b9c:	df000704 	addi	fp,sp,28
 1022ba0:	e13ffb15 	stw	r4,-20(fp)
 1022ba4:	e17ffc15 	stw	r5,-16(fp)
 1022ba8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1022bac:	00bff9c4 	movi	r2,-25
 1022bb0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1022bb4:	e0bffc17 	ldw	r2,-16(fp)
 1022bb8:	e0bfff15 	stw	r2,-4(fp)
 1022bbc:	e0ffff17 	ldw	r3,-4(fp)
 1022bc0:	189a8060 	cmpeqi	r2,r3,27137
 1022bc4:	1000041e 	bne	r2,zero,1022bd8 <altera_avalon_jtag_uart_ioctl+0x44>
 1022bc8:	e0ffff17 	ldw	r3,-4(fp)
 1022bcc:	189a80a0 	cmpeqi	r2,r3,27138
 1022bd0:	10001b1e 	bne	r2,zero,1022c40 <altera_avalon_jtag_uart_ioctl+0xac>
 1022bd4:	00002706 	br	1022c74 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1022bd8:	e0bffb17 	ldw	r2,-20(fp)
 1022bdc:	10c00117 	ldw	r3,4(r2)
 1022be0:	00a00034 	movhi	r2,32768
 1022be4:	10bfffc4 	addi	r2,r2,-1
 1022be8:	18802226 	beq	r3,r2,1022c74 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1022bec:	e0bffd17 	ldw	r2,-12(fp)
 1022bf0:	10800017 	ldw	r2,0(r2)
 1022bf4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1022bf8:	e0bff917 	ldw	r2,-28(fp)
 1022bfc:	10800090 	cmplti	r2,r2,2
 1022c00:	1000071e 	bne	r2,zero,1022c20 <altera_avalon_jtag_uart_ioctl+0x8c>
 1022c04:	e0fff917 	ldw	r3,-28(fp)
 1022c08:	00a00034 	movhi	r2,32768
 1022c0c:	10bfffc4 	addi	r2,r2,-1
 1022c10:	18800326 	beq	r3,r2,1022c20 <altera_avalon_jtag_uart_ioctl+0x8c>
 1022c14:	e0bff917 	ldw	r2,-28(fp)
 1022c18:	e0bffe15 	stw	r2,-8(fp)
 1022c1c:	00000306 	br	1022c2c <altera_avalon_jtag_uart_ioctl+0x98>
 1022c20:	00e00034 	movhi	r3,32768
 1022c24:	18ffff84 	addi	r3,r3,-2
 1022c28:	e0fffe15 	stw	r3,-8(fp)
 1022c2c:	e0bffb17 	ldw	r2,-20(fp)
 1022c30:	e0fffe17 	ldw	r3,-8(fp)
 1022c34:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1022c38:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1022c3c:	00000d06 	br	1022c74 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1022c40:	e0bffb17 	ldw	r2,-20(fp)
 1022c44:	10c00117 	ldw	r3,4(r2)
 1022c48:	00a00034 	movhi	r2,32768
 1022c4c:	10bfffc4 	addi	r2,r2,-1
 1022c50:	18800826 	beq	r3,r2,1022c74 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1022c54:	e13ffd17 	ldw	r4,-12(fp)
 1022c58:	e0bffb17 	ldw	r2,-20(fp)
 1022c5c:	10c00917 	ldw	r3,36(r2)
 1022c60:	e0bffb17 	ldw	r2,-20(fp)
 1022c64:	10800117 	ldw	r2,4(r2)
 1022c68:	1885803a 	cmpltu	r2,r3,r2
 1022c6c:	20800015 	stw	r2,0(r4)
      rc = 0;
 1022c70:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1022c74:	e0bffa17 	ldw	r2,-24(fp)
}
 1022c78:	e037883a 	mov	sp,fp
 1022c7c:	df000017 	ldw	fp,0(sp)
 1022c80:	dec00104 	addi	sp,sp,4
 1022c84:	f800283a 	ret

01022c88 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1022c88:	deffeb04 	addi	sp,sp,-84
 1022c8c:	dfc01415 	stw	ra,80(sp)
 1022c90:	df001315 	stw	fp,76(sp)
 1022c94:	df001304 	addi	fp,sp,76
 1022c98:	e13ffb15 	stw	r4,-20(fp)
 1022c9c:	e17ffc15 	stw	r5,-16(fp)
 1022ca0:	e1bffd15 	stw	r6,-12(fp)
 1022ca4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1022ca8:	e0bffc17 	ldw	r2,-16(fp)
 1022cac:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 1022cb0:	e0bffb17 	ldw	r2,-20(fp)
 1022cb4:	10800a17 	ldw	r2,40(r2)
 1022cb8:	e0bff315 	stw	r2,-52(fp)
 1022cbc:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 1022cc0:	e17ff40b 	ldhu	r5,-48(fp)
 1022cc4:	e1bffa44 	addi	r6,fp,-23
 1022cc8:	e13ff317 	ldw	r4,-52(fp)
 1022ccc:	101f2a80 	call	101f2a8 <OSSemPend>

  while (space > 0)
 1022cd0:	00006406 	br	1022e64 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1022cd4:	e0bffb17 	ldw	r2,-20(fp)
 1022cd8:	10800d17 	ldw	r2,52(r2)
 1022cdc:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 1022ce0:	e0bffb17 	ldw	r2,-20(fp)
 1022ce4:	10800e17 	ldw	r2,56(r2)
 1022ce8:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 1022cec:	e0fff617 	ldw	r3,-40(fp)
 1022cf0:	e0bff517 	ldw	r2,-44(fp)
 1022cf4:	18800536 	bltu	r3,r2,1022d0c <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 1022cf8:	e0bff617 	ldw	r2,-40(fp)
 1022cfc:	e0fff517 	ldw	r3,-44(fp)
 1022d00:	10c5c83a 	sub	r2,r2,r3
 1022d04:	e0bff715 	stw	r2,-36(fp)
 1022d08:	00000406 	br	1022d1c <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1022d0c:	00820004 	movi	r2,2048
 1022d10:	e0fff517 	ldw	r3,-44(fp)
 1022d14:	10c5c83a 	sub	r2,r2,r3
 1022d18:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 1022d1c:	e0bff717 	ldw	r2,-36(fp)
 1022d20:	1005003a 	cmpeq	r2,r2,zero
 1022d24:	10001f1e 	bne	r2,zero,1022da4 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 1022d28:	e0fffd17 	ldw	r3,-12(fp)
 1022d2c:	e0bff717 	ldw	r2,-36(fp)
 1022d30:	1880022e 	bgeu	r3,r2,1022d3c <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 1022d34:	e0bffd17 	ldw	r2,-12(fp)
 1022d38:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1022d3c:	e0bffb17 	ldw	r2,-20(fp)
 1022d40:	10c01104 	addi	r3,r2,68
 1022d44:	e0bff517 	ldw	r2,-44(fp)
 1022d48:	1887883a 	add	r3,r3,r2
 1022d4c:	e0bff917 	ldw	r2,-28(fp)
 1022d50:	1009883a 	mov	r4,r2
 1022d54:	180b883a 	mov	r5,r3
 1022d58:	e1bff717 	ldw	r6,-36(fp)
 1022d5c:	100ed4c0 	call	100ed4c <memcpy>
      ptr   += n;
 1022d60:	e0fff717 	ldw	r3,-36(fp)
 1022d64:	e0bff917 	ldw	r2,-28(fp)
 1022d68:	10c5883a 	add	r2,r2,r3
 1022d6c:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 1022d70:	e0fffd17 	ldw	r3,-12(fp)
 1022d74:	e0bff717 	ldw	r2,-36(fp)
 1022d78:	1885c83a 	sub	r2,r3,r2
 1022d7c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1022d80:	e0fff517 	ldw	r3,-44(fp)
 1022d84:	e0bff717 	ldw	r2,-36(fp)
 1022d88:	1885883a 	add	r2,r3,r2
 1022d8c:	10c1ffcc 	andi	r3,r2,2047
 1022d90:	e0bffb17 	ldw	r2,-20(fp)
 1022d94:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 1022d98:	e0bffd17 	ldw	r2,-12(fp)
 1022d9c:	10800048 	cmpgei	r2,r2,1
 1022da0:	103fcc1e 	bne	r2,zero,1022cd4 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1022da4:	e0fff917 	ldw	r3,-28(fp)
 1022da8:	e0bffc17 	ldw	r2,-16(fp)
 1022dac:	1880301e 	bne	r3,r2,1022e70 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1022db0:	e0bffe17 	ldw	r2,-8(fp)
 1022db4:	1090000c 	andi	r2,r2,16384
 1022db8:	1004c03a 	cmpne	r2,r2,zero
 1022dbc:	10002c1e 	bne	r2,zero,1022e70 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 1022dc0:	008040f4 	movhi	r2,259
 1022dc4:	10a41b44 	addi	r2,r2,-28563
 1022dc8:	10800003 	ldbu	r2,0(r2)
 1022dcc:	10803fcc 	andi	r2,r2,255
 1022dd0:	10800058 	cmpnei	r2,r2,1
 1022dd4:	1000161e 	bne	r2,zero,1022e30 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 1022dd8:	e0bffb17 	ldw	r2,-20(fp)
 1022ddc:	10800c17 	ldw	r2,48(r2)
 1022de0:	e0bff015 	stw	r2,-64(fp)
 1022de4:	00800144 	movi	r2,5
 1022de8:	e0bff10d 	sth	r2,-60(fp)
 1022dec:	00bfe0c4 	movi	r2,-125
 1022df0:	e0bff185 	stb	r2,-58(fp)
 1022df4:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 1022df8:	008040f4 	movhi	r2,259
 1022dfc:	10a41b44 	addi	r2,r2,-28563
 1022e00:	10800003 	ldbu	r2,0(r2)
 1022e04:	10803fcc 	andi	r2,r2,255
 1022e08:	1005003a 	cmpeq	r2,r2,zero
 1022e0c:	1000111e 	bne	r2,zero,1022e54 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 1022e10:	e17ff10b 	ldhu	r5,-60(fp)
 1022e14:	e1bff183 	ldbu	r6,-58(fp)
 1022e18:	e1fff20b 	ldhu	r7,-56(fp)
 1022e1c:	e0bffa04 	addi	r2,fp,-24
 1022e20:	d8800015 	stw	r2,0(sp)
 1022e24:	e13ff017 	ldw	r4,-64(fp)
 1022e28:	101c3680 	call	101c368 <OSFlagPend>
    return err;
 1022e2c:	00000906 	br	1022e54 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1022e30:	e0bffb17 	ldw	r2,-20(fp)
 1022e34:	10c00d17 	ldw	r3,52(r2)
 1022e38:	e0bff617 	ldw	r2,-40(fp)
 1022e3c:	1880051e 	bne	r3,r2,1022e54 <altera_avalon_jtag_uart_read+0x1cc>
 1022e40:	e0bffb17 	ldw	r2,-20(fp)
 1022e44:	10c00917 	ldw	r3,36(r2)
 1022e48:	e0bffb17 	ldw	r2,-20(fp)
 1022e4c:	10800117 	ldw	r2,4(r2)
 1022e50:	18bff736 	bltu	r3,r2,1022e30 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1022e54:	e0bffb17 	ldw	r2,-20(fp)
 1022e58:	10c00d17 	ldw	r3,52(r2)
 1022e5c:	e0bff617 	ldw	r2,-40(fp)
 1022e60:	18800326 	beq	r3,r2,1022e70 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1022e64:	e0bffd17 	ldw	r2,-12(fp)
 1022e68:	10800048 	cmpgei	r2,r2,1
 1022e6c:	103f991e 	bne	r2,zero,1022cd4 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 1022e70:	e0bffb17 	ldw	r2,-20(fp)
 1022e74:	11000a17 	ldw	r4,40(r2)
 1022e78:	101f6a00 	call	101f6a0 <OSSemPost>

  if (ptr != buffer)
 1022e7c:	e0fff917 	ldw	r3,-28(fp)
 1022e80:	e0bffc17 	ldw	r2,-16(fp)
 1022e84:	18801926 	beq	r3,r2,1022eec <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1022e88:	0005303a 	rdctl	r2,status
 1022e8c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1022e90:	e0ffef17 	ldw	r3,-68(fp)
 1022e94:	00bfff84 	movi	r2,-2
 1022e98:	1884703a 	and	r2,r3,r2
 1022e9c:	1001703a 	wrctl	status,r2
  
  return context;
 1022ea0:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1022ea4:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1022ea8:	e0bffb17 	ldw	r2,-20(fp)
 1022eac:	10800817 	ldw	r2,32(r2)
 1022eb0:	10c00054 	ori	r3,r2,1
 1022eb4:	e0bffb17 	ldw	r2,-20(fp)
 1022eb8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1022ebc:	e0bffb17 	ldw	r2,-20(fp)
 1022ec0:	10800017 	ldw	r2,0(r2)
 1022ec4:	11000104 	addi	r4,r2,4
 1022ec8:	e0bffb17 	ldw	r2,-20(fp)
 1022ecc:	10800817 	ldw	r2,32(r2)
 1022ed0:	1007883a 	mov	r3,r2
 1022ed4:	2005883a 	mov	r2,r4
 1022ed8:	10c00035 	stwio	r3,0(r2)
 1022edc:	e0bff817 	ldw	r2,-32(fp)
 1022ee0:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1022ee4:	e0bfee17 	ldw	r2,-72(fp)
 1022ee8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1022eec:	e0fff917 	ldw	r3,-28(fp)
 1022ef0:	e0bffc17 	ldw	r2,-16(fp)
 1022ef4:	18800526 	beq	r3,r2,1022f0c <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 1022ef8:	e0fff917 	ldw	r3,-28(fp)
 1022efc:	e0bffc17 	ldw	r2,-16(fp)
 1022f00:	1887c83a 	sub	r3,r3,r2
 1022f04:	e0ffff15 	stw	r3,-4(fp)
 1022f08:	00000906 	br	1022f30 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 1022f0c:	e0bffe17 	ldw	r2,-8(fp)
 1022f10:	1090000c 	andi	r2,r2,16384
 1022f14:	1005003a 	cmpeq	r2,r2,zero
 1022f18:	1000031e 	bne	r2,zero,1022f28 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 1022f1c:	00bffd44 	movi	r2,-11
 1022f20:	e0bfff15 	stw	r2,-4(fp)
 1022f24:	00000206 	br	1022f30 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 1022f28:	00bffec4 	movi	r2,-5
 1022f2c:	e0bfff15 	stw	r2,-4(fp)
 1022f30:	e0bfff17 	ldw	r2,-4(fp)
}
 1022f34:	e037883a 	mov	sp,fp
 1022f38:	dfc00117 	ldw	ra,4(sp)
 1022f3c:	df000017 	ldw	fp,0(sp)
 1022f40:	dec00204 	addi	sp,sp,8
 1022f44:	f800283a 	ret

01022f48 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1022f48:	deffeb04 	addi	sp,sp,-84
 1022f4c:	dfc01415 	stw	ra,80(sp)
 1022f50:	df001315 	stw	fp,76(sp)
 1022f54:	df001304 	addi	fp,sp,76
 1022f58:	e13ffb15 	stw	r4,-20(fp)
 1022f5c:	e17ffc15 	stw	r5,-16(fp)
 1022f60:	e1bffd15 	stw	r6,-12(fp)
 1022f64:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1022f68:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1022f6c:	e0bffc17 	ldw	r2,-16(fp)
 1022f70:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 1022f74:	e0bffb17 	ldw	r2,-20(fp)
 1022f78:	10800b17 	ldw	r2,44(r2)
 1022f7c:	e0bff315 	stw	r2,-52(fp)
 1022f80:	e03ff40d 	sth	zero,-48(fp)
 1022f84:	e17ff40b 	ldhu	r5,-48(fp)
 1022f88:	e1bffa04 	addi	r6,fp,-24
 1022f8c:	e13ff317 	ldw	r4,-52(fp)
 1022f90:	101f2a80 	call	101f2a8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1022f94:	00003a06 	br	1023080 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1022f98:	e0bffb17 	ldw	r2,-20(fp)
 1022f9c:	10800f17 	ldw	r2,60(r2)
 1022fa0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 1022fa4:	e0bffb17 	ldw	r2,-20(fp)
 1022fa8:	10801017 	ldw	r2,64(r2)
 1022fac:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 1022fb0:	e0fff917 	ldw	r3,-28(fp)
 1022fb4:	e0bff817 	ldw	r2,-32(fp)
 1022fb8:	1880062e 	bgeu	r3,r2,1022fd4 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 1022fbc:	e0fff817 	ldw	r3,-32(fp)
 1022fc0:	e0bff917 	ldw	r2,-28(fp)
 1022fc4:	1885c83a 	sub	r2,r3,r2
 1022fc8:	10bfffc4 	addi	r2,r2,-1
 1022fcc:	e0bff715 	stw	r2,-36(fp)
 1022fd0:	00000c06 	br	1023004 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 1022fd4:	e0bff817 	ldw	r2,-32(fp)
 1022fd8:	1005003a 	cmpeq	r2,r2,zero
 1022fdc:	1000051e 	bne	r2,zero,1022ff4 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1022fe0:	00820004 	movi	r2,2048
 1022fe4:	e0fff917 	ldw	r3,-28(fp)
 1022fe8:	10c5c83a 	sub	r2,r2,r3
 1022fec:	e0bff715 	stw	r2,-36(fp)
 1022ff0:	00000406 	br	1023004 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1022ff4:	0081ffc4 	movi	r2,2047
 1022ff8:	e0fff917 	ldw	r3,-28(fp)
 1022ffc:	10c5c83a 	sub	r2,r2,r3
 1023000:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 1023004:	e0bff717 	ldw	r2,-36(fp)
 1023008:	1005003a 	cmpeq	r2,r2,zero
 102300c:	10001f1e 	bne	r2,zero,102308c <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 1023010:	e0fffd17 	ldw	r3,-12(fp)
 1023014:	e0bff717 	ldw	r2,-36(fp)
 1023018:	1880022e 	bgeu	r3,r2,1023024 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 102301c:	e0bffd17 	ldw	r2,-12(fp)
 1023020:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1023024:	e0bffb17 	ldw	r2,-20(fp)
 1023028:	10c21104 	addi	r3,r2,2116
 102302c:	e0bff917 	ldw	r2,-28(fp)
 1023030:	1885883a 	add	r2,r3,r2
 1023034:	e0fffc17 	ldw	r3,-16(fp)
 1023038:	1009883a 	mov	r4,r2
 102303c:	180b883a 	mov	r5,r3
 1023040:	e1bff717 	ldw	r6,-36(fp)
 1023044:	100ed4c0 	call	100ed4c <memcpy>
      ptr   += n;
 1023048:	e0fff717 	ldw	r3,-36(fp)
 102304c:	e0bffc17 	ldw	r2,-16(fp)
 1023050:	10c5883a 	add	r2,r2,r3
 1023054:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1023058:	e0fffd17 	ldw	r3,-12(fp)
 102305c:	e0bff717 	ldw	r2,-36(fp)
 1023060:	1885c83a 	sub	r2,r3,r2
 1023064:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1023068:	e0fff917 	ldw	r3,-28(fp)
 102306c:	e0bff717 	ldw	r2,-36(fp)
 1023070:	1885883a 	add	r2,r3,r2
 1023074:	10c1ffcc 	andi	r3,r2,2047
 1023078:	e0bffb17 	ldw	r2,-20(fp)
 102307c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1023080:	e0bffd17 	ldw	r2,-12(fp)
 1023084:	10800048 	cmpgei	r2,r2,1
 1023088:	103fc31e 	bne	r2,zero,1022f98 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102308c:	0005303a 	rdctl	r2,status
 1023090:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1023094:	e0fff217 	ldw	r3,-56(fp)
 1023098:	00bfff84 	movi	r2,-2
 102309c:	1884703a 	and	r2,r3,r2
 10230a0:	1001703a 	wrctl	status,r2
  
  return context;
 10230a4:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10230a8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10230ac:	e0bffb17 	ldw	r2,-20(fp)
 10230b0:	10800817 	ldw	r2,32(r2)
 10230b4:	10c00094 	ori	r3,r2,2
 10230b8:	e0bffb17 	ldw	r2,-20(fp)
 10230bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10230c0:	e0bffb17 	ldw	r2,-20(fp)
 10230c4:	10800017 	ldw	r2,0(r2)
 10230c8:	11000104 	addi	r4,r2,4
 10230cc:	e0bffb17 	ldw	r2,-20(fp)
 10230d0:	10800817 	ldw	r2,32(r2)
 10230d4:	1007883a 	mov	r3,r2
 10230d8:	2005883a 	mov	r2,r4
 10230dc:	10c00035 	stwio	r3,0(r2)
 10230e0:	e0bff617 	ldw	r2,-40(fp)
 10230e4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10230e8:	e0bff117 	ldw	r2,-60(fp)
 10230ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 10230f0:	e0bffd17 	ldw	r2,-12(fp)
 10230f4:	10800050 	cmplti	r2,r2,1
 10230f8:	10002d1e 	bne	r2,zero,10231b0 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 10230fc:	e0bffe17 	ldw	r2,-8(fp)
 1023100:	1090000c 	andi	r2,r2,16384
 1023104:	1004c03a 	cmpne	r2,r2,zero
 1023108:	10002c1e 	bne	r2,zero,10231bc <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 102310c:	008040f4 	movhi	r2,259
 1023110:	10a41b44 	addi	r2,r2,-28563
 1023114:	10800003 	ldbu	r2,0(r2)
 1023118:	10803fcc 	andi	r2,r2,255
 102311c:	10800058 	cmpnei	r2,r2,1
 1023120:	1000161e 	bne	r2,zero,102317c <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
 1023124:	e0bffb17 	ldw	r2,-20(fp)
 1023128:	10800c17 	ldw	r2,48(r2)
 102312c:	e0bfee15 	stw	r2,-72(fp)
 1023130:	00800184 	movi	r2,6
 1023134:	e0bfef0d 	sth	r2,-68(fp)
 1023138:	00bfe0c4 	movi	r2,-125
 102313c:	e0bfef85 	stb	r2,-66(fp)
 1023140:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 1023144:	008040f4 	movhi	r2,259
 1023148:	10a41b44 	addi	r2,r2,-28563
 102314c:	10800003 	ldbu	r2,0(r2)
 1023150:	10803fcc 	andi	r2,r2,255
 1023154:	1005003a 	cmpeq	r2,r2,zero
 1023158:	1000111e 	bne	r2,zero,10231a0 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 102315c:	e17fef0b 	ldhu	r5,-68(fp)
 1023160:	e1bfef83 	ldbu	r6,-66(fp)
 1023164:	e1fff00b 	ldhu	r7,-64(fp)
 1023168:	e0bffa44 	addi	r2,fp,-23
 102316c:	d8800015 	stw	r2,0(sp)
 1023170:	e13fee17 	ldw	r4,-72(fp)
 1023174:	101c3680 	call	101c368 <OSFlagPend>
    return err;
 1023178:	00000906 	br	10231a0 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 102317c:	e0bffb17 	ldw	r2,-20(fp)
 1023180:	10c01017 	ldw	r3,64(r2)
 1023184:	e0bff817 	ldw	r2,-32(fp)
 1023188:	1880051e 	bne	r3,r2,10231a0 <altera_avalon_jtag_uart_write+0x258>
 102318c:	e0bffb17 	ldw	r2,-20(fp)
 1023190:	10c00917 	ldw	r3,36(r2)
 1023194:	e0bffb17 	ldw	r2,-20(fp)
 1023198:	10800117 	ldw	r2,4(r2)
 102319c:	18bff736 	bltu	r3,r2,102317c <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 10231a0:	e0bffb17 	ldw	r2,-20(fp)
 10231a4:	10c01017 	ldw	r3,64(r2)
 10231a8:	e0bff817 	ldw	r2,-32(fp)
 10231ac:	18800326 	beq	r3,r2,10231bc <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
 10231b0:	e0bffd17 	ldw	r2,-12(fp)
 10231b4:	10800048 	cmpgei	r2,r2,1
 10231b8:	103fb11e 	bne	r2,zero,1023080 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 10231bc:	e0bffb17 	ldw	r2,-20(fp)
 10231c0:	11000b17 	ldw	r4,44(r2)
 10231c4:	101f6a00 	call	101f6a0 <OSSemPost>

  if (ptr != start)
 10231c8:	e0fffc17 	ldw	r3,-16(fp)
 10231cc:	e0bff517 	ldw	r2,-44(fp)
 10231d0:	18800526 	beq	r3,r2,10231e8 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 10231d4:	e0fffc17 	ldw	r3,-16(fp)
 10231d8:	e0bff517 	ldw	r2,-44(fp)
 10231dc:	1887c83a 	sub	r3,r3,r2
 10231e0:	e0ffff15 	stw	r3,-4(fp)
 10231e4:	00000906 	br	102320c <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 10231e8:	e0bffe17 	ldw	r2,-8(fp)
 10231ec:	1090000c 	andi	r2,r2,16384
 10231f0:	1005003a 	cmpeq	r2,r2,zero
 10231f4:	1000031e 	bne	r2,zero,1023204 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 10231f8:	00bffd44 	movi	r2,-11
 10231fc:	e0bfff15 	stw	r2,-4(fp)
 1023200:	00000206 	br	102320c <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
 1023204:	00bffec4 	movi	r2,-5
 1023208:	e0bfff15 	stw	r2,-4(fp)
 102320c:	e0bfff17 	ldw	r2,-4(fp)
}
 1023210:	e037883a 	mov	sp,fp
 1023214:	dfc00117 	ldw	ra,4(sp)
 1023218:	df000017 	ldw	fp,0(sp)
 102321c:	dec00204 	addi	sp,sp,8
 1023220:	f800283a 	ret

01023224 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1023224:	defff904 	addi	sp,sp,-28
 1023228:	dfc00615 	stw	ra,24(sp)
 102322c:	df000515 	stw	fp,20(sp)
 1023230:	df000504 	addi	fp,sp,20
 1023234:	e13ffe15 	stw	r4,-8(fp)
 1023238:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 102323c:	e0bffe17 	ldw	r2,-8(fp)
 1023240:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1023244:	e0bffe17 	ldw	r2,-8(fp)
 1023248:	10800104 	addi	r2,r2,4
 102324c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1023250:	0005303a 	rdctl	r2,status
 1023254:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1023258:	e0fffc17 	ldw	r3,-16(fp)
 102325c:	00bfff84 	movi	r2,-2
 1023260:	1884703a 	and	r2,r3,r2
 1023264:	1001703a 	wrctl	status,r2
  
  return context;
 1023268:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 102326c:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 1023270:	1024a2c0 	call	1024a2c <alt_tick>
 1023274:	e0bffd17 	ldw	r2,-12(fp)
 1023278:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102327c:	e0bffb17 	ldw	r2,-20(fp)
 1023280:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1023284:	e037883a 	mov	sp,fp
 1023288:	dfc00117 	ldw	ra,4(sp)
 102328c:	df000017 	ldw	fp,0(sp)
 1023290:	dec00204 	addi	sp,sp,8
 1023294:	f800283a 	ret

01023298 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1023298:	defff904 	addi	sp,sp,-28
 102329c:	dfc00615 	stw	ra,24(sp)
 10232a0:	df000515 	stw	fp,20(sp)
 10232a4:	df000504 	addi	fp,sp,20
 10232a8:	e13ffc15 	stw	r4,-16(fp)
 10232ac:	e17ffd15 	stw	r5,-12(fp)
 10232b0:	e1bffe15 	stw	r6,-8(fp)
 10232b4:	e1ffff15 	stw	r7,-4(fp)
 10232b8:	e0bfff17 	ldw	r2,-4(fp)
 10232bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 10232c0:	008040f4 	movhi	r2,259
 10232c4:	10a43004 	addi	r2,r2,-28480
 10232c8:	10800017 	ldw	r2,0(r2)
 10232cc:	1004c03a 	cmpne	r2,r2,zero
 10232d0:	1000041e 	bne	r2,zero,10232e4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 10232d4:	00c040f4 	movhi	r3,259
 10232d8:	18e43004 	addi	r3,r3,-28480
 10232dc:	e0bffb17 	ldw	r2,-20(fp)
 10232e0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 10232e4:	e0bffc17 	ldw	r2,-16(fp)
 10232e8:	10800104 	addi	r2,r2,4
 10232ec:	1007883a 	mov	r3,r2
 10232f0:	008001c4 	movi	r2,7
 10232f4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 10232f8:	e13ffe17 	ldw	r4,-8(fp)
 10232fc:	e17ffc17 	ldw	r5,-16(fp)
 1023300:	018040b4 	movhi	r6,258
 1023304:	318c8904 	addi	r6,r6,12836
 1023308:	10244f00 	call	10244f0 <alt_irq_register>
#endif  
}
 102330c:	e037883a 	mov	sp,fp
 1023310:	dfc00117 	ldw	ra,4(sp)
 1023314:	df000017 	ldw	fp,0(sp)
 1023318:	dec00204 	addi	sp,sp,8
 102331c:	f800283a 	ret

01023320 <alt_up_de0_nano_adc_open_dev>:
#define read_ch4(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_4(((adc)->base))
#define read_ch5(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_5(((adc)->base))
#define read_ch6(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_6(((adc)->base))
#define read_ch7(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_7(((adc)->base))

alt_up_de0_nano_adc_dev* alt_up_de0_nano_adc_open_dev (const char* name){
 1023320:	defffc04 	addi	sp,sp,-16
 1023324:	dfc00315 	stw	ra,12(sp)
 1023328:	df000215 	stw	fp,8(sp)
 102332c:	df000204 	addi	fp,sp,8
 1023330:	e13fff15 	stw	r4,-4(fp)

	alt_up_de0_nano_adc_dev* dev = (alt_up_de0_nano_adc_dev*) alt_find_dev(name, &alt_dev_list);
 1023334:	e13fff17 	ldw	r4,-4(fp)
 1023338:	014040f4 	movhi	r5,259
 102333c:	2963d704 	addi	r5,r5,-28836
 1023340:	102423c0 	call	102423c <alt_find_dev>
 1023344:	e0bffe15 	stw	r2,-8(fp)
	
	return dev;
 1023348:	e0bffe17 	ldw	r2,-8(fp)
}
 102334c:	e037883a 	mov	sp,fp
 1023350:	dfc00117 	ldw	ra,4(sp)
 1023354:	df000017 	ldw	fp,0(sp)
 1023358:	dec00204 	addi	sp,sp,8
 102335c:	f800283a 	ret

01023360 <alt_up_de0_nano_adc_read>:

unsigned int alt_up_de0_nano_adc_read (alt_up_de0_nano_adc_dev * adc, unsigned channel){
 1023360:	defffb04 	addi	sp,sp,-20
 1023364:	df000415 	stw	fp,16(sp)
 1023368:	df000404 	addi	fp,sp,16
 102336c:	e13ffd15 	stw	r4,-12(fp)
 1023370:	e17ffe15 	stw	r5,-8(fp)

	unsigned int ch = channel % 8;
 1023374:	e0bffe17 	ldw	r2,-8(fp)
 1023378:	108001cc 	andi	r2,r2,7
 102337c:	e0bffc15 	stw	r2,-16(fp)
	
	switch (ch){
 1023380:	e0bffc17 	ldw	r2,-16(fp)
 1023384:	10800228 	cmpgeui	r2,r2,8
 1023388:	10003f1e 	bne	r2,zero,1023488 <alt_up_de0_nano_adc_read+0x128>
 102338c:	e0bffc17 	ldw	r2,-16(fp)
 1023390:	1085883a 	add	r2,r2,r2
 1023394:	1087883a 	add	r3,r2,r2
 1023398:	008040b4 	movhi	r2,258
 102339c:	108ceb04 	addi	r2,r2,13228
 10233a0:	1885883a 	add	r2,r3,r2
 10233a4:	10800017 	ldw	r2,0(r2)
 10233a8:	1000683a 	jmp	r2
 10233ac:	010233cc 	andi	r4,zero,2255
 10233b0:	010233e0 	cmpeqi	r4,zero,2255
 10233b4:	010233f8 	rdprs	r4,zero,2255
 10233b8:	01023410 	cmplti	r4,zero,2256
 10233bc:	01023428 	cmpgeui	r4,zero,2256
 10233c0:	01023440 	call	102344 <OSCtxSw_SWITCH_PC+0x102304>
 10233c4:	01023458 	cmpnei	r4,zero,2257
 10233c8:	01023470 	cmpltui	r4,zero,2257
		case 0:
			return read_ch0(adc);
 10233cc:	e0bffd17 	ldw	r2,-12(fp)
 10233d0:	10800a17 	ldw	r2,40(r2)
 10233d4:	10800037 	ldwio	r2,0(r2)
 10233d8:	e0bfff15 	stw	r2,-4(fp)
 10233dc:	00002b06 	br	102348c <alt_up_de0_nano_adc_read+0x12c>
		case 1:
			return read_ch1(adc);
 10233e0:	e0bffd17 	ldw	r2,-12(fp)
 10233e4:	10800a17 	ldw	r2,40(r2)
 10233e8:	10800104 	addi	r2,r2,4
 10233ec:	10800037 	ldwio	r2,0(r2)
 10233f0:	e0bfff15 	stw	r2,-4(fp)
 10233f4:	00002506 	br	102348c <alt_up_de0_nano_adc_read+0x12c>
		case 2:
			return read_ch2(adc);
 10233f8:	e0bffd17 	ldw	r2,-12(fp)
 10233fc:	10800a17 	ldw	r2,40(r2)
 1023400:	10800204 	addi	r2,r2,8
 1023404:	10800037 	ldwio	r2,0(r2)
 1023408:	e0bfff15 	stw	r2,-4(fp)
 102340c:	00001f06 	br	102348c <alt_up_de0_nano_adc_read+0x12c>
		case 3:
			return read_ch3(adc);
 1023410:	e0bffd17 	ldw	r2,-12(fp)
 1023414:	10800a17 	ldw	r2,40(r2)
 1023418:	10800304 	addi	r2,r2,12
 102341c:	10800037 	ldwio	r2,0(r2)
 1023420:	e0bfff15 	stw	r2,-4(fp)
 1023424:	00001906 	br	102348c <alt_up_de0_nano_adc_read+0x12c>
		case 4:
			return read_ch4(adc);
 1023428:	e0bffd17 	ldw	r2,-12(fp)
 102342c:	10800a17 	ldw	r2,40(r2)
 1023430:	10800404 	addi	r2,r2,16
 1023434:	10800037 	ldwio	r2,0(r2)
 1023438:	e0bfff15 	stw	r2,-4(fp)
 102343c:	00001306 	br	102348c <alt_up_de0_nano_adc_read+0x12c>
		case 5:
			return read_ch5(adc);
 1023440:	e0bffd17 	ldw	r2,-12(fp)
 1023444:	10800a17 	ldw	r2,40(r2)
 1023448:	10800504 	addi	r2,r2,20
 102344c:	10800037 	ldwio	r2,0(r2)
 1023450:	e0bfff15 	stw	r2,-4(fp)
 1023454:	00000d06 	br	102348c <alt_up_de0_nano_adc_read+0x12c>
		case 6:
			return read_ch6(adc);
 1023458:	e0bffd17 	ldw	r2,-12(fp)
 102345c:	10800a17 	ldw	r2,40(r2)
 1023460:	10800604 	addi	r2,r2,24
 1023464:	10800037 	ldwio	r2,0(r2)
 1023468:	e0bfff15 	stw	r2,-4(fp)
 102346c:	00000706 	br	102348c <alt_up_de0_nano_adc_read+0x12c>
		case 7:
			return read_ch7(adc);
 1023470:	e0bffd17 	ldw	r2,-12(fp)
 1023474:	10800a17 	ldw	r2,40(r2)
 1023478:	10800704 	addi	r2,r2,28
 102347c:	10800037 	ldwio	r2,0(r2)
 1023480:	e0bfff15 	stw	r2,-4(fp)
 1023484:	00000106 	br	102348c <alt_up_de0_nano_adc_read+0x12c>
		default:
			return 0;
 1023488:	e03fff15 	stw	zero,-4(fp)
 102348c:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 1023490:	e037883a 	mov	sp,fp
 1023494:	df000017 	ldw	fp,0(sp)
 1023498:	dec00104 	addi	sp,sp,4
 102349c:	f800283a 	ret

010234a0 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 10234a0:	defffd04 	addi	sp,sp,-12
 10234a4:	df000215 	stw	fp,8(sp)
 10234a8:	df000204 	addi	fp,sp,8
 10234ac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 10234b0:	e0bfff17 	ldw	r2,-4(fp)
 10234b4:	10800a17 	ldw	r2,40(r2)
 10234b8:	10800104 	addi	r2,r2,4
 10234bc:	10800037 	ldwio	r2,0(r2)
 10234c0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 10234c4:	e0bffe17 	ldw	r2,-8(fp)
 10234c8:	10800054 	ori	r2,r2,1
 10234cc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 10234d0:	e0bfff17 	ldw	r2,-4(fp)
 10234d4:	10800a17 	ldw	r2,40(r2)
 10234d8:	10800104 	addi	r2,r2,4
 10234dc:	e0fffe17 	ldw	r3,-8(fp)
 10234e0:	10c00035 	stwio	r3,0(r2)
}
 10234e4:	e037883a 	mov	sp,fp
 10234e8:	df000017 	ldw	fp,0(sp)
 10234ec:	dec00104 	addi	sp,sp,4
 10234f0:	f800283a 	ret

010234f4 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 10234f4:	defffd04 	addi	sp,sp,-12
 10234f8:	df000215 	stw	fp,8(sp)
 10234fc:	df000204 	addi	fp,sp,8
 1023500:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1023504:	e0bfff17 	ldw	r2,-4(fp)
 1023508:	10800a17 	ldw	r2,40(r2)
 102350c:	10800104 	addi	r2,r2,4
 1023510:	10800037 	ldwio	r2,0(r2)
 1023514:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 1023518:	e0fffe17 	ldw	r3,-8(fp)
 102351c:	00bfff84 	movi	r2,-2
 1023520:	1884703a 	and	r2,r3,r2
 1023524:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1023528:	e0bfff17 	ldw	r2,-4(fp)
 102352c:	10800a17 	ldw	r2,40(r2)
 1023530:	10800104 	addi	r2,r2,4
 1023534:	e0fffe17 	ldw	r3,-8(fp)
 1023538:	10c00035 	stwio	r3,0(r2)
}
 102353c:	e037883a 	mov	sp,fp
 1023540:	df000017 	ldw	fp,0(sp)
 1023544:	dec00104 	addi	sp,sp,4
 1023548:	f800283a 	ret

0102354c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 102354c:	defffd04 	addi	sp,sp,-12
 1023550:	df000215 	stw	fp,8(sp)
 1023554:	df000204 	addi	fp,sp,8
 1023558:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 102355c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 1023560:	e0bfff17 	ldw	r2,-4(fp)
 1023564:	10800a17 	ldw	r2,40(r2)
 1023568:	10800084 	addi	r2,r2,2
 102356c:	1080002b 	ldhuio	r2,0(r2)
 1023570:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 1023574:	e0bffe0b 	ldhu	r2,-8(fp)
}
 1023578:	e037883a 	mov	sp,fp
 102357c:	df000017 	ldw	fp,0(sp)
 1023580:	dec00104 	addi	sp,sp,4
 1023584:	f800283a 	ret

01023588 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 1023588:	defffd04 	addi	sp,sp,-12
 102358c:	df000215 	stw	fp,8(sp)
 1023590:	df000204 	addi	fp,sp,8
 1023594:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1023598:	e0bfff17 	ldw	r2,-4(fp)
 102359c:	10800a17 	ldw	r2,40(r2)
 10235a0:	10800104 	addi	r2,r2,4
 10235a4:	10800037 	ldwio	r2,0(r2)
 10235a8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 10235ac:	e0bffe17 	ldw	r2,-8(fp)
 10235b0:	10bfffec 	andhi	r2,r2,65535
 10235b4:	1004d43a 	srli	r2,r2,16
}
 10235b8:	e037883a 	mov	sp,fp
 10235bc:	df000017 	ldw	fp,0(sp)
 10235c0:	dec00104 	addi	sp,sp,4
 10235c4:	f800283a 	ret

010235c8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 10235c8:	defffc04 	addi	sp,sp,-16
 10235cc:	df000315 	stw	fp,12(sp)
 10235d0:	df000304 	addi	fp,sp,12
 10235d4:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 10235d8:	e0bffe17 	ldw	r2,-8(fp)
 10235dc:	1080800c 	andi	r2,r2,512
 10235e0:	1004d27a 	srli	r2,r2,9
 10235e4:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 10235e8:	e0bffd17 	ldw	r2,-12(fp)
 10235ec:	1005003a 	cmpeq	r2,r2,zero
 10235f0:	1000031e 	bne	r2,zero,1023600 <alt_up_rs232_check_parity+0x38>
 10235f4:	00bfffc4 	movi	r2,-1
 10235f8:	e0bfff15 	stw	r2,-4(fp)
 10235fc:	00000106 	br	1023604 <alt_up_rs232_check_parity+0x3c>
 1023600:	e03fff15 	stw	zero,-4(fp)
 1023604:	e0bfff17 	ldw	r2,-4(fp)
}
 1023608:	e037883a 	mov	sp,fp
 102360c:	df000017 	ldw	fp,0(sp)
 1023610:	dec00104 	addi	sp,sp,4
 1023614:	f800283a 	ret

01023618 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 1023618:	defffc04 	addi	sp,sp,-16
 102361c:	df000315 	stw	fp,12(sp)
 1023620:	df000304 	addi	fp,sp,12
 1023624:	e13ffe15 	stw	r4,-8(fp)
 1023628:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 102362c:	e0bffe17 	ldw	r2,-8(fp)
 1023630:	10800a17 	ldw	r2,40(r2)
 1023634:	10800037 	ldwio	r2,0(r2)
 1023638:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 102363c:	e0bffe17 	ldw	r2,-8(fp)
 1023640:	10800a17 	ldw	r2,40(r2)
 1023644:	e0ffff03 	ldbu	r3,-4(fp)
 1023648:	10c00035 	stwio	r3,0(r2)
	return 0;
 102364c:	0005883a 	mov	r2,zero
}
 1023650:	e037883a 	mov	sp,fp
 1023654:	df000017 	ldw	fp,0(sp)
 1023658:	dec00104 	addi	sp,sp,4
 102365c:	f800283a 	ret

01023660 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 1023660:	defffa04 	addi	sp,sp,-24
 1023664:	dfc00515 	stw	ra,20(sp)
 1023668:	df000415 	stw	fp,16(sp)
 102366c:	df000404 	addi	fp,sp,16
 1023670:	e13ffd15 	stw	r4,-12(fp)
 1023674:	e17ffe15 	stw	r5,-8(fp)
 1023678:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 102367c:	e0bffd17 	ldw	r2,-12(fp)
 1023680:	10800a17 	ldw	r2,40(r2)
 1023684:	10800037 	ldwio	r2,0(r2)
 1023688:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 102368c:	e0bffc17 	ldw	r2,-16(fp)
 1023690:	1007883a 	mov	r3,r2
 1023694:	e0bffe17 	ldw	r2,-8(fp)
 1023698:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 102369c:	e13ffc17 	ldw	r4,-16(fp)
 10236a0:	10235c80 	call	10235c8 <alt_up_rs232_check_parity>
 10236a4:	1007883a 	mov	r3,r2
 10236a8:	e0bfff17 	ldw	r2,-4(fp)
 10236ac:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 10236b0:	e0bffc17 	ldw	r2,-16(fp)
 10236b4:	10a0000c 	andi	r2,r2,32768
 10236b8:	1004d3fa 	srli	r2,r2,15
 10236bc:	10bfffc4 	addi	r2,r2,-1
}
 10236c0:	e037883a 	mov	sp,fp
 10236c4:	dfc00117 	ldw	ra,4(sp)
 10236c8:	df000017 	ldw	fp,0(sp)
 10236cc:	dec00204 	addi	sp,sp,8
 10236d0:	f800283a 	ret

010236d4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 10236d4:	defff804 	addi	sp,sp,-32
 10236d8:	dfc00715 	stw	ra,28(sp)
 10236dc:	df000615 	stw	fp,24(sp)
 10236e0:	df000604 	addi	fp,sp,24
 10236e4:	e13ffd15 	stw	r4,-12(fp)
 10236e8:	e17ffe15 	stw	r5,-8(fp)
 10236ec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 10236f0:	e0bffd17 	ldw	r2,-12(fp)
 10236f4:	10800017 	ldw	r2,0(r2)
 10236f8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 10236fc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 1023700:	00000c06 	br	1023734 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 1023704:	e17ffe17 	ldw	r5,-8(fp)
 1023708:	e0bffe17 	ldw	r2,-8(fp)
 102370c:	10800044 	addi	r2,r2,1
 1023710:	e0bffe15 	stw	r2,-8(fp)
 1023714:	e1bffc04 	addi	r6,fp,-16
 1023718:	e13ffb17 	ldw	r4,-20(fp)
 102371c:	10236600 	call	1023660 <alt_up_rs232_read_data>
 1023720:	1004c03a 	cmpne	r2,r2,zero
 1023724:	1000091e 	bne	r2,zero,102374c <alt_up_rs232_read_fd+0x78>
			count++;
 1023728:	e0bffa17 	ldw	r2,-24(fp)
 102372c:	10800044 	addi	r2,r2,1
 1023730:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 1023734:	e0bfff17 	ldw	r2,-4(fp)
 1023738:	10bfffc4 	addi	r2,r2,-1
 102373c:	e0bfff15 	stw	r2,-4(fp)
 1023740:	e0bfff17 	ldw	r2,-4(fp)
 1023744:	10bfffd8 	cmpnei	r2,r2,-1
 1023748:	103fee1e 	bne	r2,zero,1023704 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 102374c:	e0bffa17 	ldw	r2,-24(fp)
}
 1023750:	e037883a 	mov	sp,fp
 1023754:	dfc00117 	ldw	ra,4(sp)
 1023758:	df000017 	ldw	fp,0(sp)
 102375c:	dec00204 	addi	sp,sp,8
 1023760:	f800283a 	ret

01023764 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 1023764:	defff904 	addi	sp,sp,-28
 1023768:	dfc00615 	stw	ra,24(sp)
 102376c:	df000515 	stw	fp,20(sp)
 1023770:	df000504 	addi	fp,sp,20
 1023774:	e13ffd15 	stw	r4,-12(fp)
 1023778:	e17ffe15 	stw	r5,-8(fp)
 102377c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1023780:	e0bffd17 	ldw	r2,-12(fp)
 1023784:	10800017 	ldw	r2,0(r2)
 1023788:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 102378c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 1023790:	00000d06 	br	10237c8 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 1023794:	e0bffe17 	ldw	r2,-8(fp)
 1023798:	10800003 	ldbu	r2,0(r2)
 102379c:	11403fcc 	andi	r5,r2,255
 10237a0:	e13ffc17 	ldw	r4,-16(fp)
 10237a4:	10236180 	call	1023618 <alt_up_rs232_write_data>
 10237a8:	1004c03a 	cmpne	r2,r2,zero
 10237ac:	10000c1e 	bne	r2,zero,10237e0 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 10237b0:	e0bffb17 	ldw	r2,-20(fp)
 10237b4:	10800044 	addi	r2,r2,1
 10237b8:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 10237bc:	e0bffe17 	ldw	r2,-8(fp)
 10237c0:	10800044 	addi	r2,r2,1
 10237c4:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 10237c8:	e0bfff17 	ldw	r2,-4(fp)
 10237cc:	10bfffc4 	addi	r2,r2,-1
 10237d0:	e0bfff15 	stw	r2,-4(fp)
 10237d4:	e0bfff17 	ldw	r2,-4(fp)
 10237d8:	10bfffd8 	cmpnei	r2,r2,-1
 10237dc:	103fed1e 	bne	r2,zero,1023794 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 10237e0:	e0bffb17 	ldw	r2,-20(fp)
}
 10237e4:	e037883a 	mov	sp,fp
 10237e8:	dfc00117 	ldw	ra,4(sp)
 10237ec:	df000017 	ldw	fp,0(sp)
 10237f0:	dec00204 	addi	sp,sp,8
 10237f4:	f800283a 	ret

010237f8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 10237f8:	defffc04 	addi	sp,sp,-16
 10237fc:	dfc00315 	stw	ra,12(sp)
 1023800:	df000215 	stw	fp,8(sp)
 1023804:	df000204 	addi	fp,sp,8
 1023808:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 102380c:	e13fff17 	ldw	r4,-4(fp)
 1023810:	014040f4 	movhi	r5,259
 1023814:	2963d704 	addi	r5,r5,-28836
 1023818:	102423c0 	call	102423c <alt_find_dev>
 102381c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1023820:	e0bffe17 	ldw	r2,-8(fp)
}
 1023824:	e037883a 	mov	sp,fp
 1023828:	dfc00117 	ldw	ra,4(sp)
 102382c:	df000017 	ldw	fp,0(sp)
 1023830:	dec00204 	addi	sp,sp,8
 1023834:	f800283a 	ret

01023838 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 1023838:	defff904 	addi	sp,sp,-28
 102383c:	dfc00615 	stw	ra,24(sp)
 1023840:	df000515 	stw	fp,20(sp)
 1023844:	df000504 	addi	fp,sp,20
 1023848:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 102384c:	00800144 	movi	r2,5
 1023850:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 1023854:	00800044 	movi	r2,1
 1023858:	d8800015 	stw	r2,0(sp)
 102385c:	e0bffe44 	addi	r2,fp,-7
 1023860:	d8800115 	stw	r2,4(sp)
 1023864:	d8000215 	stw	zero,8(sp)
 1023868:	e13fff17 	ldw	r4,-4(fp)
 102386c:	000b883a 	mov	r5,zero
 1023870:	01800044 	movi	r6,1
 1023874:	e1fffe04 	addi	r7,fp,-8
 1023878:	10250440 	call	1025044 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 102387c:	e0bffe43 	ldbu	r2,-7(fp)
 1023880:	10803fcc 	andi	r2,r2,255
}
 1023884:	e037883a 	mov	sp,fp
 1023888:	dfc00117 	ldw	ra,4(sp)
 102388c:	df000017 	ldw	fp,0(sp)
 1023890:	dec00204 	addi	sp,sp,8
 1023894:	f800283a 	ret

01023898 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 1023898:	defff604 	addi	sp,sp,-40
 102389c:	dfc00915 	stw	ra,36(sp)
 10238a0:	df000815 	stw	fp,32(sp)
 10238a4:	df000804 	addi	fp,sp,32
 10238a8:	e13ffd15 	stw	r4,-12(fp)
 10238ac:	e17ffe15 	stw	r5,-8(fp)
 10238b0:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 10238b4:	e0bfff17 	ldw	r2,-4(fp)
 10238b8:	1005003a 	cmpeq	r2,r2,zero
 10238bc:	1000121e 	bne	r2,zero,1023908 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 10238c0:	00bff604 	movi	r2,-40
 10238c4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 10238c8:	e0bffe17 	ldw	r2,-8(fp)
 10238cc:	1004d63a 	srli	r2,r2,24
 10238d0:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 10238d4:	e0bffe17 	ldw	r2,-8(fp)
 10238d8:	1004d43a 	srli	r2,r2,16
 10238dc:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 10238e0:	e0bffe17 	ldw	r2,-8(fp)
 10238e4:	1004d23a 	srli	r2,r2,8
 10238e8:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 10238ec:	e0bffe17 	ldw	r2,-8(fp)
 10238f0:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 10238f4:	00800144 	movi	r2,5
 10238f8:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 10238fc:	e13ffd17 	ldw	r4,-12(fp)
 1023900:	1023e5c0 	call	1023e5c <epcs_enter_4_bytes_mode>
 1023904:	00000c06 	br	1023938 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
 1023908:	00bff604 	movi	r2,-40
 102390c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 1023910:	e0bffe17 	ldw	r2,-8(fp)
 1023914:	1004d43a 	srli	r2,r2,16
 1023918:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 102391c:	e0bffe17 	ldw	r2,-8(fp)
 1023920:	1004d23a 	srli	r2,r2,8
 1023924:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 1023928:	e0bffe17 	ldw	r2,-8(fp)
 102392c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 1023930:	00800104 	movi	r2,4
 1023934:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 1023938:	e13ffd17 	ldw	r4,-12(fp)
 102393c:	1023b4c0 	call	1023b4c <epcs_write_enable>

  alt_avalon_spi_command(
 1023940:	e1bffb03 	ldbu	r6,-20(fp)
 1023944:	e1fffb44 	addi	r7,fp,-19
 1023948:	d8000015 	stw	zero,0(sp)
 102394c:	d8000115 	stw	zero,4(sp)
 1023950:	d8000215 	stw	zero,8(sp)
 1023954:	e13ffd17 	ldw	r4,-12(fp)
 1023958:	000b883a 	mov	r5,zero
 102395c:	10250440 	call	1025044 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 1023960:	e13ffd17 	ldw	r4,-12(fp)
 1023964:	10239900 	call	1023990 <epcs_await_wip_released>

  if(four_bytes_mode)
 1023968:	e0bfff17 	ldw	r2,-4(fp)
 102396c:	1005003a 	cmpeq	r2,r2,zero
 1023970:	1000021e 	bne	r2,zero,102397c <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 1023974:	e13ffd17 	ldw	r4,-12(fp)
 1023978:	1023eb40 	call	1023eb4 <epcs_exit_4_bytes_mode>
  }
}
 102397c:	e037883a 	mov	sp,fp
 1023980:	dfc00117 	ldw	ra,4(sp)
 1023984:	df000017 	ldw	fp,0(sp)
 1023988:	dec00204 	addi	sp,sp,8
 102398c:	f800283a 	ret

01023990 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 1023990:	defffd04 	addi	sp,sp,-12
 1023994:	dfc00215 	stw	ra,8(sp)
 1023998:	df000115 	stw	fp,4(sp)
 102399c:	df000104 	addi	fp,sp,4
 10239a0:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 10239a4:	e13fff17 	ldw	r4,-4(fp)
 10239a8:	10239c80 	call	10239c8 <epcs_test_wip>
 10239ac:	1004c03a 	cmpne	r2,r2,zero
 10239b0:	103ffc1e 	bne	r2,zero,10239a4 <epcs_await_wip_released+0x14>
  {
  }
}
 10239b4:	e037883a 	mov	sp,fp
 10239b8:	dfc00117 	ldw	ra,4(sp)
 10239bc:	df000017 	ldw	fp,0(sp)
 10239c0:	dec00204 	addi	sp,sp,8
 10239c4:	f800283a 	ret

010239c8 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 10239c8:	defffd04 	addi	sp,sp,-12
 10239cc:	dfc00215 	stw	ra,8(sp)
 10239d0:	df000115 	stw	fp,4(sp)
 10239d4:	df000104 	addi	fp,sp,4
 10239d8:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 10239dc:	e13fff17 	ldw	r4,-4(fp)
 10239e0:	10238380 	call	1023838 <epcs_read_status_register>
 10239e4:	10803fcc 	andi	r2,r2,255
 10239e8:	1080004c 	andi	r2,r2,1
}
 10239ec:	e037883a 	mov	sp,fp
 10239f0:	dfc00117 	ldw	ra,4(sp)
 10239f4:	df000017 	ldw	fp,0(sp)
 10239f8:	dec00204 	addi	sp,sp,8
 10239fc:	f800283a 	ret

01023a00 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 1023a00:	defff404 	addi	sp,sp,-48
 1023a04:	dfc00b15 	stw	ra,44(sp)
 1023a08:	df000a15 	stw	fp,40(sp)
 1023a0c:	df000a04 	addi	fp,sp,40
 1023a10:	e13ffc15 	stw	r4,-16(fp)
 1023a14:	e17ffd15 	stw	r5,-12(fp)
 1023a18:	e1bffe15 	stw	r6,-8(fp)
 1023a1c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 1023a20:	008000c4 	movi	r2,3
 1023a24:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 1023a28:	e0800217 	ldw	r2,8(fp)
 1023a2c:	1005003a 	cmpeq	r2,r2,zero
 1023a30:	10001c1e 	bne	r2,zero,1023aa4 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 1023a34:	e0bffd17 	ldw	r2,-12(fp)
 1023a38:	1005d63a 	srai	r2,r2,24
 1023a3c:	1007883a 	mov	r3,r2
 1023a40:	00bfffc4 	movi	r2,-1
 1023a44:	1884703a 	and	r2,r3,r2
 1023a48:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 1023a4c:	e0bffd17 	ldw	r2,-12(fp)
 1023a50:	1005d43a 	srai	r2,r2,16
 1023a54:	1007883a 	mov	r3,r2
 1023a58:	00bfffc4 	movi	r2,-1
 1023a5c:	1884703a 	and	r2,r3,r2
 1023a60:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 1023a64:	e0bffd17 	ldw	r2,-12(fp)
 1023a68:	1005d23a 	srai	r2,r2,8
 1023a6c:	1007883a 	mov	r3,r2
 1023a70:	00bfffc4 	movi	r2,-1
 1023a74:	1884703a 	and	r2,r3,r2
 1023a78:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 1023a7c:	e0bffd17 	ldw	r2,-12(fp)
 1023a80:	1007883a 	mov	r3,r2
 1023a84:	00bfffc4 	movi	r2,-1
 1023a88:	1884703a 	and	r2,r3,r2
 1023a8c:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 1023a90:	00800144 	movi	r2,5
 1023a94:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 1023a98:	e13ffc17 	ldw	r4,-16(fp)
 1023a9c:	1023e5c0 	call	1023e5c <epcs_enter_4_bytes_mode>
 1023aa0:	00001306 	br	1023af0 <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 1023aa4:	e0bffd17 	ldw	r2,-12(fp)
 1023aa8:	1005d43a 	srai	r2,r2,16
 1023aac:	1007883a 	mov	r3,r2
 1023ab0:	00bfffc4 	movi	r2,-1
 1023ab4:	1884703a 	and	r2,r3,r2
 1023ab8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 1023abc:	e0bffd17 	ldw	r2,-12(fp)
 1023ac0:	1005d23a 	srai	r2,r2,8
 1023ac4:	1007883a 	mov	r3,r2
 1023ac8:	00bfffc4 	movi	r2,-1
 1023acc:	1884703a 	and	r2,r3,r2
 1023ad0:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 1023ad4:	e0bffd17 	ldw	r2,-12(fp)
 1023ad8:	1007883a 	mov	r3,r2
 1023adc:	00bfffc4 	movi	r2,-1
 1023ae0:	1884703a 	and	r2,r3,r2
 1023ae4:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 1023ae8:	00800104 	movi	r2,4
 1023aec:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 1023af0:	e13ffc17 	ldw	r4,-16(fp)
 1023af4:	10239900 	call	1023990 <epcs_await_wip_released>

  alt_avalon_spi_command(
 1023af8:	e0bfff17 	ldw	r2,-4(fp)
 1023afc:	e1fffa04 	addi	r7,fp,-24
 1023b00:	d8800015 	stw	r2,0(sp)
 1023b04:	e0bffe17 	ldw	r2,-8(fp)
 1023b08:	d8800115 	stw	r2,4(sp)
 1023b0c:	d8000215 	stw	zero,8(sp)
 1023b10:	e13ffc17 	ldw	r4,-16(fp)
 1023b14:	000b883a 	mov	r5,zero
 1023b18:	e1bff917 	ldw	r6,-28(fp)
 1023b1c:	10250440 	call	1025044 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 1023b20:	e0800217 	ldw	r2,8(fp)
 1023b24:	1005003a 	cmpeq	r2,r2,zero
 1023b28:	1000021e 	bne	r2,zero,1023b34 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
 1023b2c:	e13ffc17 	ldw	r4,-16(fp)
 1023b30:	1023eb40 	call	1023eb4 <epcs_exit_4_bytes_mode>
  }

  return length;
 1023b34:	e0bfff17 	ldw	r2,-4(fp)
}
 1023b38:	e037883a 	mov	sp,fp
 1023b3c:	dfc00117 	ldw	ra,4(sp)
 1023b40:	df000017 	ldw	fp,0(sp)
 1023b44:	dec00204 	addi	sp,sp,8
 1023b48:	f800283a 	ret

01023b4c <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 1023b4c:	defff904 	addi	sp,sp,-28
 1023b50:	dfc00615 	stw	ra,24(sp)
 1023b54:	df000515 	stw	fp,20(sp)
 1023b58:	df000504 	addi	fp,sp,20
 1023b5c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 1023b60:	00800184 	movi	r2,6
 1023b64:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 1023b68:	d8000015 	stw	zero,0(sp)
 1023b6c:	d8000115 	stw	zero,4(sp)
 1023b70:	d8000215 	stw	zero,8(sp)
 1023b74:	e13fff17 	ldw	r4,-4(fp)
 1023b78:	000b883a 	mov	r5,zero
 1023b7c:	01800044 	movi	r6,1
 1023b80:	e1fffe04 	addi	r7,fp,-8
 1023b84:	10250440 	call	1025044 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 1023b88:	e037883a 	mov	sp,fp
 1023b8c:	dfc00117 	ldw	ra,4(sp)
 1023b90:	df000017 	ldw	fp,0(sp)
 1023b94:	dec00204 	addi	sp,sp,8
 1023b98:	f800283a 	ret

01023b9c <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 1023b9c:	defff804 	addi	sp,sp,-32
 1023ba0:	dfc00715 	stw	ra,28(sp)
 1023ba4:	df000615 	stw	fp,24(sp)
 1023ba8:	df000604 	addi	fp,sp,24
 1023bac:	e13ffe15 	stw	r4,-8(fp)
 1023bb0:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 1023bb4:	00800044 	movi	r2,1
 1023bb8:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 1023bbc:	e0bfff03 	ldbu	r2,-4(fp)
 1023bc0:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 1023bc4:	d8000015 	stw	zero,0(sp)
 1023bc8:	d8000115 	stw	zero,4(sp)
 1023bcc:	d8000215 	stw	zero,8(sp)
 1023bd0:	e13ffe17 	ldw	r4,-8(fp)
 1023bd4:	000b883a 	mov	r5,zero
 1023bd8:	01800084 	movi	r6,2
 1023bdc:	e1fffd04 	addi	r7,fp,-12
 1023be0:	10250440 	call	1025044 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 1023be4:	e13ffe17 	ldw	r4,-8(fp)
 1023be8:	10239900 	call	1023990 <epcs_await_wip_released>
}
 1023bec:	e037883a 	mov	sp,fp
 1023bf0:	dfc00117 	ldw	ra,4(sp)
 1023bf4:	df000017 	ldw	fp,0(sp)
 1023bf8:	dec00204 	addi	sp,sp,8
 1023bfc:	f800283a 	ret

01023c00 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 1023c00:	defff404 	addi	sp,sp,-48
 1023c04:	dfc00b15 	stw	ra,44(sp)
 1023c08:	df000a15 	stw	fp,40(sp)
 1023c0c:	df000a04 	addi	fp,sp,40
 1023c10:	e13ffc15 	stw	r4,-16(fp)
 1023c14:	e17ffd15 	stw	r5,-12(fp)
 1023c18:	e1bffe15 	stw	r6,-8(fp)
 1023c1c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 1023c20:	00800084 	movi	r2,2
 1023c24:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 1023c28:	e0800217 	ldw	r2,8(fp)
 1023c2c:	1005003a 	cmpeq	r2,r2,zero
 1023c30:	10001c1e 	bne	r2,zero,1023ca4 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
 1023c34:	e0bffd17 	ldw	r2,-12(fp)
 1023c38:	1005d63a 	srai	r2,r2,24
 1023c3c:	1007883a 	mov	r3,r2
 1023c40:	00bfffc4 	movi	r2,-1
 1023c44:	1884703a 	and	r2,r3,r2
 1023c48:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 1023c4c:	e0bffd17 	ldw	r2,-12(fp)
 1023c50:	1005d43a 	srai	r2,r2,16
 1023c54:	1007883a 	mov	r3,r2
 1023c58:	00bfffc4 	movi	r2,-1
 1023c5c:	1884703a 	and	r2,r3,r2
 1023c60:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 1023c64:	e0bffd17 	ldw	r2,-12(fp)
 1023c68:	1005d23a 	srai	r2,r2,8
 1023c6c:	1007883a 	mov	r3,r2
 1023c70:	00bfffc4 	movi	r2,-1
 1023c74:	1884703a 	and	r2,r3,r2
 1023c78:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 1023c7c:	e0bffd17 	ldw	r2,-12(fp)
 1023c80:	1007883a 	mov	r3,r2
 1023c84:	00bfffc4 	movi	r2,-1
 1023c88:	1884703a 	and	r2,r3,r2
 1023c8c:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 1023c90:	00800144 	movi	r2,5
 1023c94:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 1023c98:	e13ffc17 	ldw	r4,-16(fp)
 1023c9c:	1023e5c0 	call	1023e5c <epcs_enter_4_bytes_mode>
 1023ca0:	00001306 	br	1023cf0 <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 1023ca4:	e0bffd17 	ldw	r2,-12(fp)
 1023ca8:	1005d43a 	srai	r2,r2,16
 1023cac:	1007883a 	mov	r3,r2
 1023cb0:	00bfffc4 	movi	r2,-1
 1023cb4:	1884703a 	and	r2,r3,r2
 1023cb8:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 1023cbc:	e0bffd17 	ldw	r2,-12(fp)
 1023cc0:	1005d23a 	srai	r2,r2,8
 1023cc4:	1007883a 	mov	r3,r2
 1023cc8:	00bfffc4 	movi	r2,-1
 1023ccc:	1884703a 	and	r2,r3,r2
 1023cd0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 1023cd4:	e0bffd17 	ldw	r2,-12(fp)
 1023cd8:	1007883a 	mov	r3,r2
 1023cdc:	00bfffc4 	movi	r2,-1
 1023ce0:	1884703a 	and	r2,r3,r2
 1023ce4:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 1023ce8:	00800104 	movi	r2,4
 1023cec:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 1023cf0:	e13ffc17 	ldw	r4,-16(fp)
 1023cf4:	1023b4c0 	call	1023b4c <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 1023cf8:	e1fffa04 	addi	r7,fp,-24
 1023cfc:	d8000015 	stw	zero,0(sp)
 1023d00:	d8000115 	stw	zero,4(sp)
 1023d04:	00800044 	movi	r2,1
 1023d08:	d8800215 	stw	r2,8(sp)
 1023d0c:	e13ffc17 	ldw	r4,-16(fp)
 1023d10:	000b883a 	mov	r5,zero
 1023d14:	e1bff917 	ldw	r6,-28(fp)
 1023d18:	10250440 	call	1025044 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 1023d1c:	e1bfff17 	ldw	r6,-4(fp)
 1023d20:	d8000015 	stw	zero,0(sp)
 1023d24:	d8000115 	stw	zero,4(sp)
 1023d28:	d8000215 	stw	zero,8(sp)
 1023d2c:	e13ffc17 	ldw	r4,-16(fp)
 1023d30:	000b883a 	mov	r5,zero
 1023d34:	e1fffe17 	ldw	r7,-8(fp)
 1023d38:	10250440 	call	1025044 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 1023d3c:	e13ffc17 	ldw	r4,-16(fp)
 1023d40:	10239900 	call	1023990 <epcs_await_wip_released>

  if(four_bytes_mode)
 1023d44:	e0800217 	ldw	r2,8(fp)
 1023d48:	1005003a 	cmpeq	r2,r2,zero
 1023d4c:	1000021e 	bne	r2,zero,1023d58 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
 1023d50:	e13ffc17 	ldw	r4,-16(fp)
 1023d54:	1023eb40 	call	1023eb4 <epcs_exit_4_bytes_mode>
  }

  return length;
 1023d58:	e0bfff17 	ldw	r2,-4(fp)
}
 1023d5c:	e037883a 	mov	sp,fp
 1023d60:	dfc00117 	ldw	ra,4(sp)
 1023d64:	df000017 	ldw	fp,0(sp)
 1023d68:	dec00204 	addi	sp,sp,8
 1023d6c:	f800283a 	ret

01023d70 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 1023d70:	defff804 	addi	sp,sp,-32
 1023d74:	dfc00715 	stw	ra,28(sp)
 1023d78:	df000615 	stw	fp,24(sp)
 1023d7c:	df000604 	addi	fp,sp,24
 1023d80:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 1023d84:	00bfeac4 	movi	r2,-85
 1023d88:	e0bffd05 	stb	r2,-12(fp)
 1023d8c:	e03ffd45 	stb	zero,-11(fp)
 1023d90:	e03ffd85 	stb	zero,-10(fp)
 1023d94:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 1023d98:	00800044 	movi	r2,1
 1023d9c:	d8800015 	stw	r2,0(sp)
 1023da0:	e0bffe04 	addi	r2,fp,-8
 1023da4:	d8800115 	stw	r2,4(sp)
 1023da8:	d8000215 	stw	zero,8(sp)
 1023dac:	e13fff17 	ldw	r4,-4(fp)
 1023db0:	000b883a 	mov	r5,zero
 1023db4:	01800104 	movi	r6,4
 1023db8:	e1fffd04 	addi	r7,fp,-12
 1023dbc:	10250440 	call	1025044 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 1023dc0:	e0bffe03 	ldbu	r2,-8(fp)
 1023dc4:	10803fcc 	andi	r2,r2,255
}
 1023dc8:	e037883a 	mov	sp,fp
 1023dcc:	dfc00117 	ldw	ra,4(sp)
 1023dd0:	df000017 	ldw	fp,0(sp)
 1023dd4:	dec00204 	addi	sp,sp,8
 1023dd8:	f800283a 	ret

01023ddc <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 1023ddc:	defff904 	addi	sp,sp,-28
 1023de0:	dfc00615 	stw	ra,24(sp)
 1023de4:	df000515 	stw	fp,20(sp)
 1023de8:	df000504 	addi	fp,sp,20
 1023dec:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 1023df0:	00bfe7c4 	movi	r2,-97
 1023df4:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 1023df8:	008000c4 	movi	r2,3
 1023dfc:	d8800015 	stw	r2,0(sp)
 1023e00:	e0bffe44 	addi	r2,fp,-7
 1023e04:	d8800115 	stw	r2,4(sp)
 1023e08:	d8000215 	stw	zero,8(sp)
 1023e0c:	e13fff17 	ldw	r4,-4(fp)
 1023e10:	000b883a 	mov	r5,zero
 1023e14:	01800044 	movi	r6,1
 1023e18:	e1fffe04 	addi	r7,fp,-8
 1023e1c:	10250440 	call	1025044 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 1023e20:	e0bffe43 	ldbu	r2,-7(fp)
 1023e24:	10803fcc 	andi	r2,r2,255
 1023e28:	1006943a 	slli	r3,r2,16
 1023e2c:	e0bffe83 	ldbu	r2,-6(fp)
 1023e30:	10803fcc 	andi	r2,r2,255
 1023e34:	1004923a 	slli	r2,r2,8
 1023e38:	1886b03a 	or	r3,r3,r2
 1023e3c:	e0bffec3 	ldbu	r2,-5(fp)
 1023e40:	10803fcc 	andi	r2,r2,255
 1023e44:	1884b03a 	or	r2,r3,r2
}
 1023e48:	e037883a 	mov	sp,fp
 1023e4c:	dfc00117 	ldw	ra,4(sp)
 1023e50:	df000017 	ldw	fp,0(sp)
 1023e54:	dec00204 	addi	sp,sp,8
 1023e58:	f800283a 	ret

01023e5c <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 1023e5c:	defff904 	addi	sp,sp,-28
 1023e60:	dfc00615 	stw	ra,24(sp)
 1023e64:	df000515 	stw	fp,20(sp)
 1023e68:	df000504 	addi	fp,sp,20
 1023e6c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 1023e70:	00bfedc4 	movi	r2,-73
 1023e74:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 1023e78:	e13fff17 	ldw	r4,-4(fp)
 1023e7c:	1023b4c0 	call	1023b4c <epcs_write_enable>

  alt_avalon_spi_command(
 1023e80:	d8000015 	stw	zero,0(sp)
 1023e84:	d8000115 	stw	zero,4(sp)
 1023e88:	d8000215 	stw	zero,8(sp)
 1023e8c:	e13fff17 	ldw	r4,-4(fp)
 1023e90:	000b883a 	mov	r5,zero
 1023e94:	01800044 	movi	r6,1
 1023e98:	e1fffe04 	addi	r7,fp,-8
 1023e9c:	10250440 	call	1025044 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 1023ea0:	e037883a 	mov	sp,fp
 1023ea4:	dfc00117 	ldw	ra,4(sp)
 1023ea8:	df000017 	ldw	fp,0(sp)
 1023eac:	dec00204 	addi	sp,sp,8
 1023eb0:	f800283a 	ret

01023eb4 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 1023eb4:	defff904 	addi	sp,sp,-28
 1023eb8:	dfc00615 	stw	ra,24(sp)
 1023ebc:	df000515 	stw	fp,20(sp)
 1023ec0:	df000504 	addi	fp,sp,20
 1023ec4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 1023ec8:	00bffa44 	movi	r2,-23
 1023ecc:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 1023ed0:	e13fff17 	ldw	r4,-4(fp)
 1023ed4:	1023b4c0 	call	1023b4c <epcs_write_enable>

  alt_avalon_spi_command(
 1023ed8:	d8000015 	stw	zero,0(sp)
 1023edc:	d8000115 	stw	zero,4(sp)
 1023ee0:	d8000215 	stw	zero,8(sp)
 1023ee4:	e13fff17 	ldw	r4,-4(fp)
 1023ee8:	000b883a 	mov	r5,zero
 1023eec:	01800044 	movi	r6,1
 1023ef0:	e1fffe04 	addi	r7,fp,-8
 1023ef4:	10250440 	call	1025044 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 1023ef8:	e037883a 	mov	sp,fp
 1023efc:	dfc00117 	ldw	ra,4(sp)
 1023f00:	df000017 	ldw	fp,0(sp)
 1023f04:	dec00204 	addi	sp,sp,8
 1023f08:	f800283a 	ret

01023f0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1023f0c:	defff404 	addi	sp,sp,-48
 1023f10:	df000b15 	stw	fp,44(sp)
 1023f14:	df000b04 	addi	fp,sp,44
 1023f18:	e13ffb15 	stw	r4,-20(fp)
 1023f1c:	e17ffc15 	stw	r5,-16(fp)
 1023f20:	e1bffd15 	stw	r6,-12(fp)
 1023f24:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1023f28:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1023f2c:	008040f4 	movhi	r2,259
 1023f30:	10a43004 	addi	r2,r2,-28480
 1023f34:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1023f38:	1005003a 	cmpeq	r2,r2,zero
 1023f3c:	1000411e 	bne	r2,zero,1024044 <alt_alarm_start+0x138>
  {
    if (alarm)
 1023f40:	e0bffb17 	ldw	r2,-20(fp)
 1023f44:	1005003a 	cmpeq	r2,r2,zero
 1023f48:	10003b1e 	bne	r2,zero,1024038 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1023f4c:	e0fffb17 	ldw	r3,-20(fp)
 1023f50:	e0bffd17 	ldw	r2,-12(fp)
 1023f54:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1023f58:	e0fffb17 	ldw	r3,-20(fp)
 1023f5c:	e0bffe17 	ldw	r2,-8(fp)
 1023f60:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1023f64:	0005303a 	rdctl	r2,status
 1023f68:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1023f6c:	e0fff817 	ldw	r3,-32(fp)
 1023f70:	00bfff84 	movi	r2,-2
 1023f74:	1884703a 	and	r2,r3,r2
 1023f78:	1001703a 	wrctl	status,r2
  
  return context;
 1023f7c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1023f80:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1023f84:	008040f4 	movhi	r2,259
 1023f88:	10a43104 	addi	r2,r2,-28476
 1023f8c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1023f90:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1023f94:	e0fffc17 	ldw	r3,-16(fp)
 1023f98:	e0bff917 	ldw	r2,-28(fp)
 1023f9c:	1885883a 	add	r2,r3,r2
 1023fa0:	10c00044 	addi	r3,r2,1
 1023fa4:	e0bffb17 	ldw	r2,-20(fp)
 1023fa8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1023fac:	e0bffb17 	ldw	r2,-20(fp)
 1023fb0:	10c00217 	ldw	r3,8(r2)
 1023fb4:	e0bff917 	ldw	r2,-28(fp)
 1023fb8:	1880042e 	bgeu	r3,r2,1023fcc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1023fbc:	e0fffb17 	ldw	r3,-20(fp)
 1023fc0:	00800044 	movi	r2,1
 1023fc4:	18800405 	stb	r2,16(r3)
 1023fc8:	00000206 	br	1023fd4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1023fcc:	e0bffb17 	ldw	r2,-20(fp)
 1023fd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1023fd4:	e0fffb17 	ldw	r3,-20(fp)
 1023fd8:	008040f4 	movhi	r2,259
 1023fdc:	10a3fe04 	addi	r2,r2,-28680
 1023fe0:	e0bff615 	stw	r2,-40(fp)
 1023fe4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1023fe8:	e0fff717 	ldw	r3,-36(fp)
 1023fec:	e0bff617 	ldw	r2,-40(fp)
 1023ff0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1023ff4:	e0bff617 	ldw	r2,-40(fp)
 1023ff8:	10c00017 	ldw	r3,0(r2)
 1023ffc:	e0bff717 	ldw	r2,-36(fp)
 1024000:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1024004:	e0bff617 	ldw	r2,-40(fp)
 1024008:	10c00017 	ldw	r3,0(r2)
 102400c:	e0bff717 	ldw	r2,-36(fp)
 1024010:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1024014:	e0fff617 	ldw	r3,-40(fp)
 1024018:	e0bff717 	ldw	r2,-36(fp)
 102401c:	18800015 	stw	r2,0(r3)
 1024020:	e0bffa17 	ldw	r2,-24(fp)
 1024024:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1024028:	e0bff517 	ldw	r2,-44(fp)
 102402c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1024030:	e03fff15 	stw	zero,-4(fp)
 1024034:	00000506 	br	102404c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1024038:	00bffa84 	movi	r2,-22
 102403c:	e0bfff15 	stw	r2,-4(fp)
 1024040:	00000206 	br	102404c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1024044:	00bfde84 	movi	r2,-134
 1024048:	e0bfff15 	stw	r2,-4(fp)
 102404c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1024050:	e037883a 	mov	sp,fp
 1024054:	df000017 	ldw	fp,0(sp)
 1024058:	dec00104 	addi	sp,sp,4
 102405c:	f800283a 	ret

01024060 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1024060:	defff904 	addi	sp,sp,-28
 1024064:	dfc00615 	stw	ra,24(sp)
 1024068:	df000515 	stw	fp,20(sp)
 102406c:	df000504 	addi	fp,sp,20
 1024070:	e13ffd15 	stw	r4,-12(fp)
 1024074:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1024078:	e0bffd17 	ldw	r2,-12(fp)
 102407c:	1005003a 	cmpeq	r2,r2,zero
 1024080:	1000041e 	bne	r2,zero,1024094 <alt_dev_llist_insert+0x34>
 1024084:	e0bffd17 	ldw	r2,-12(fp)
 1024088:	10800217 	ldw	r2,8(r2)
 102408c:	1004c03a 	cmpne	r2,r2,zero
 1024090:	1000071e 	bne	r2,zero,10240b0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1024094:	10241140 	call	1024114 <alt_get_errno>
 1024098:	1007883a 	mov	r3,r2
 102409c:	00800584 	movi	r2,22
 10240a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10240a4:	00bffa84 	movi	r2,-22
 10240a8:	e0bfff15 	stw	r2,-4(fp)
 10240ac:	00001306 	br	10240fc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10240b0:	e0fffd17 	ldw	r3,-12(fp)
 10240b4:	e0bffe17 	ldw	r2,-8(fp)
 10240b8:	e0bffb15 	stw	r2,-20(fp)
 10240bc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10240c0:	e0fffc17 	ldw	r3,-16(fp)
 10240c4:	e0bffb17 	ldw	r2,-20(fp)
 10240c8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10240cc:	e0bffb17 	ldw	r2,-20(fp)
 10240d0:	10c00017 	ldw	r3,0(r2)
 10240d4:	e0bffc17 	ldw	r2,-16(fp)
 10240d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10240dc:	e0bffb17 	ldw	r2,-20(fp)
 10240e0:	10c00017 	ldw	r3,0(r2)
 10240e4:	e0bffc17 	ldw	r2,-16(fp)
 10240e8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10240ec:	e0fffb17 	ldw	r3,-20(fp)
 10240f0:	e0bffc17 	ldw	r2,-16(fp)
 10240f4:	18800015 	stw	r2,0(r3)

  return 0;  
 10240f8:	e03fff15 	stw	zero,-4(fp)
 10240fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1024100:	e037883a 	mov	sp,fp
 1024104:	dfc00117 	ldw	ra,4(sp)
 1024108:	df000017 	ldw	fp,0(sp)
 102410c:	dec00204 	addi	sp,sp,8
 1024110:	f800283a 	ret

01024114 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1024114:	defffd04 	addi	sp,sp,-12
 1024118:	dfc00215 	stw	ra,8(sp)
 102411c:	df000115 	stw	fp,4(sp)
 1024120:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1024124:	008040f4 	movhi	r2,259
 1024128:	10a3da04 	addi	r2,r2,-28824
 102412c:	10800017 	ldw	r2,0(r2)
 1024130:	1005003a 	cmpeq	r2,r2,zero
 1024134:	1000061e 	bne	r2,zero,1024150 <alt_get_errno+0x3c>
 1024138:	008040f4 	movhi	r2,259
 102413c:	10a3da04 	addi	r2,r2,-28824
 1024140:	10800017 	ldw	r2,0(r2)
 1024144:	103ee83a 	callr	r2
 1024148:	e0bfff15 	stw	r2,-4(fp)
 102414c:	00000306 	br	102415c <alt_get_errno+0x48>
 1024150:	008040f4 	movhi	r2,259
 1024154:	10a40f04 	addi	r2,r2,-28612
 1024158:	e0bfff15 	stw	r2,-4(fp)
 102415c:	e0bfff17 	ldw	r2,-4(fp)
}
 1024160:	e037883a 	mov	sp,fp
 1024164:	dfc00117 	ldw	ra,4(sp)
 1024168:	df000017 	ldw	fp,0(sp)
 102416c:	dec00204 	addi	sp,sp,8
 1024170:	f800283a 	ret

01024174 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1024174:	defffd04 	addi	sp,sp,-12
 1024178:	dfc00215 	stw	ra,8(sp)
 102417c:	df000115 	stw	fp,4(sp)
 1024180:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1024184:	00bfff04 	movi	r2,-4
 1024188:	00c040b4 	movhi	r3,258
 102418c:	18d6c304 	addi	r3,r3,23308
 1024190:	1885883a 	add	r2,r3,r2
 1024194:	e0bfff15 	stw	r2,-4(fp)
 1024198:	00000606 	br	10241b4 <_do_ctors+0x40>
        (*ctor) (); 
 102419c:	e0bfff17 	ldw	r2,-4(fp)
 10241a0:	10800017 	ldw	r2,0(r2)
 10241a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10241a8:	e0bfff17 	ldw	r2,-4(fp)
 10241ac:	10bfff04 	addi	r2,r2,-4
 10241b0:	e0bfff15 	stw	r2,-4(fp)
 10241b4:	e0ffff17 	ldw	r3,-4(fp)
 10241b8:	008040b4 	movhi	r2,258
 10241bc:	1096c204 	addi	r2,r2,23304
 10241c0:	18bff62e 	bgeu	r3,r2,102419c <_do_ctors+0x28>
        (*ctor) (); 
}
 10241c4:	e037883a 	mov	sp,fp
 10241c8:	dfc00117 	ldw	ra,4(sp)
 10241cc:	df000017 	ldw	fp,0(sp)
 10241d0:	dec00204 	addi	sp,sp,8
 10241d4:	f800283a 	ret

010241d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 10241d8:	defffd04 	addi	sp,sp,-12
 10241dc:	dfc00215 	stw	ra,8(sp)
 10241e0:	df000115 	stw	fp,4(sp)
 10241e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10241e8:	00bfff04 	movi	r2,-4
 10241ec:	00c040b4 	movhi	r3,258
 10241f0:	18d6c304 	addi	r3,r3,23308
 10241f4:	1885883a 	add	r2,r3,r2
 10241f8:	e0bfff15 	stw	r2,-4(fp)
 10241fc:	00000606 	br	1024218 <_do_dtors+0x40>
        (*dtor) (); 
 1024200:	e0bfff17 	ldw	r2,-4(fp)
 1024204:	10800017 	ldw	r2,0(r2)
 1024208:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 102420c:	e0bfff17 	ldw	r2,-4(fp)
 1024210:	10bfff04 	addi	r2,r2,-4
 1024214:	e0bfff15 	stw	r2,-4(fp)
 1024218:	e0ffff17 	ldw	r3,-4(fp)
 102421c:	008040b4 	movhi	r2,258
 1024220:	1096c304 	addi	r2,r2,23308
 1024224:	18bff62e 	bgeu	r3,r2,1024200 <_do_dtors+0x28>
        (*dtor) (); 
}
 1024228:	e037883a 	mov	sp,fp
 102422c:	dfc00117 	ldw	ra,4(sp)
 1024230:	df000017 	ldw	fp,0(sp)
 1024234:	dec00204 	addi	sp,sp,8
 1024238:	f800283a 	ret

0102423c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 102423c:	defff904 	addi	sp,sp,-28
 1024240:	dfc00615 	stw	ra,24(sp)
 1024244:	df000515 	stw	fp,20(sp)
 1024248:	df000504 	addi	fp,sp,20
 102424c:	e13ffd15 	stw	r4,-12(fp)
 1024250:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1024254:	e0bffe17 	ldw	r2,-8(fp)
 1024258:	10800017 	ldw	r2,0(r2)
 102425c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1024260:	e13ffd17 	ldw	r4,-12(fp)
 1024264:	100f5c00 	call	100f5c0 <strlen>
 1024268:	10800044 	addi	r2,r2,1
 102426c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1024270:	00000d06 	br	10242a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1024274:	e0bffc17 	ldw	r2,-16(fp)
 1024278:	11000217 	ldw	r4,8(r2)
 102427c:	e1bffb17 	ldw	r6,-20(fp)
 1024280:	e17ffd17 	ldw	r5,-12(fp)
 1024284:	100ecd80 	call	100ecd8 <memcmp>
 1024288:	1004c03a 	cmpne	r2,r2,zero
 102428c:	1000031e 	bne	r2,zero,102429c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1024290:	e0bffc17 	ldw	r2,-16(fp)
 1024294:	e0bfff15 	stw	r2,-4(fp)
 1024298:	00000706 	br	10242b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 102429c:	e0bffc17 	ldw	r2,-16(fp)
 10242a0:	10800017 	ldw	r2,0(r2)
 10242a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10242a8:	e0fffe17 	ldw	r3,-8(fp)
 10242ac:	e0bffc17 	ldw	r2,-16(fp)
 10242b0:	10fff01e 	bne	r2,r3,1024274 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 10242b4:	e03fff15 	stw	zero,-4(fp)
 10242b8:	e0bfff17 	ldw	r2,-4(fp)
}
 10242bc:	e037883a 	mov	sp,fp
 10242c0:	dfc00117 	ldw	ra,4(sp)
 10242c4:	df000017 	ldw	fp,0(sp)
 10242c8:	dec00204 	addi	sp,sp,8
 10242cc:	f800283a 	ret

010242d0 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 10242d0:	defffb04 	addi	sp,sp,-20
 10242d4:	dfc00415 	stw	ra,16(sp)
 10242d8:	df000315 	stw	fp,12(sp)
 10242dc:	df000304 	addi	fp,sp,12
 10242e0:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 10242e4:	e13ffe17 	ldw	r4,-8(fp)
 10242e8:	d1609004 	addi	r5,gp,-32192
 10242ec:	102423c0 	call	102423c <alt_find_dev>
 10242f0:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 10242f4:	e0bffd17 	ldw	r2,-12(fp)
 10242f8:	1005003a 	cmpeq	r2,r2,zero
 10242fc:	10000b1e 	bne	r2,zero,102432c <alt_flash_open_dev+0x5c>
 1024300:	e0bffd17 	ldw	r2,-12(fp)
 1024304:	10800317 	ldw	r2,12(r2)
 1024308:	1005003a 	cmpeq	r2,r2,zero
 102430c:	1000071e 	bne	r2,zero,102432c <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 1024310:	e0bffd17 	ldw	r2,-12(fp)
 1024314:	10800317 	ldw	r2,12(r2)
 1024318:	e13ffd17 	ldw	r4,-12(fp)
 102431c:	e17ffe17 	ldw	r5,-8(fp)
 1024320:	103ee83a 	callr	r2
 1024324:	e0bfff15 	stw	r2,-4(fp)
 1024328:	00000206 	br	1024334 <alt_flash_open_dev+0x64>
  }

  return dev;
 102432c:	e0bffd17 	ldw	r2,-12(fp)
 1024330:	e0bfff15 	stw	r2,-4(fp)
 1024334:	e0bfff17 	ldw	r2,-4(fp)
}
 1024338:	e037883a 	mov	sp,fp
 102433c:	dfc00117 	ldw	ra,4(sp)
 1024340:	df000017 	ldw	fp,0(sp)
 1024344:	dec00204 	addi	sp,sp,8
 1024348:	f800283a 	ret

0102434c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 102434c:	defffd04 	addi	sp,sp,-12
 1024350:	dfc00215 	stw	ra,8(sp)
 1024354:	df000115 	stw	fp,4(sp)
 1024358:	df000104 	addi	fp,sp,4
 102435c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 1024360:	e0bfff17 	ldw	r2,-4(fp)
 1024364:	1005003a 	cmpeq	r2,r2,zero
 1024368:	1000081e 	bne	r2,zero,102438c <alt_flash_close_dev+0x40>
 102436c:	e0bfff17 	ldw	r2,-4(fp)
 1024370:	10800417 	ldw	r2,16(r2)
 1024374:	1005003a 	cmpeq	r2,r2,zero
 1024378:	1000041e 	bne	r2,zero,102438c <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 102437c:	e0bfff17 	ldw	r2,-4(fp)
 1024380:	10800417 	ldw	r2,16(r2)
 1024384:	e13fff17 	ldw	r4,-4(fp)
 1024388:	103ee83a 	callr	r2
  }
  return;
}
 102438c:	e037883a 	mov	sp,fp
 1024390:	dfc00117 	ldw	ra,4(sp)
 1024394:	df000017 	ldw	fp,0(sp)
 1024398:	dec00204 	addi	sp,sp,8
 102439c:	f800283a 	ret

010243a0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 10243a0:	defff804 	addi	sp,sp,-32
 10243a4:	dfc00715 	stw	ra,28(sp)
 10243a8:	df000615 	stw	fp,24(sp)
 10243ac:	dc000515 	stw	r16,20(sp)
 10243b0:	df000504 	addi	fp,sp,20
 10243b4:	e13ffc15 	stw	r4,-16(fp)
 10243b8:	e17ffd15 	stw	r5,-12(fp)
 10243bc:	e1bffe15 	stw	r6,-8(fp)
 10243c0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 10243c4:	e13ffd17 	ldw	r4,-12(fp)
 10243c8:	e17ffe17 	ldw	r5,-8(fp)
 10243cc:	e1bfff17 	ldw	r6,-4(fp)
 10243d0:	10247a80 	call	10247a8 <open>
 10243d4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 10243d8:	e0bffb17 	ldw	r2,-20(fp)
 10243dc:	1004803a 	cmplt	r2,r2,zero
 10243e0:	10001f1e 	bne	r2,zero,1024460 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 10243e4:	e13ffb17 	ldw	r4,-20(fp)
 10243e8:	040040b4 	movhi	r16,258
 10243ec:	841e9d04 	addi	r16,r16,31348
 10243f0:	01400304 	movi	r5,12
 10243f4:	100def40 	call	100def4 <__mulsi3>
 10243f8:	1405883a 	add	r2,r2,r16
 10243fc:	10c00017 	ldw	r3,0(r2)
 1024400:	e0bffc17 	ldw	r2,-16(fp)
 1024404:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1024408:	e13ffb17 	ldw	r4,-20(fp)
 102440c:	040040b4 	movhi	r16,258
 1024410:	841e9d04 	addi	r16,r16,31348
 1024414:	01400304 	movi	r5,12
 1024418:	100def40 	call	100def4 <__mulsi3>
 102441c:	1405883a 	add	r2,r2,r16
 1024420:	10800104 	addi	r2,r2,4
 1024424:	10c00017 	ldw	r3,0(r2)
 1024428:	e0bffc17 	ldw	r2,-16(fp)
 102442c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1024430:	e13ffb17 	ldw	r4,-20(fp)
 1024434:	040040b4 	movhi	r16,258
 1024438:	841e9d04 	addi	r16,r16,31348
 102443c:	01400304 	movi	r5,12
 1024440:	100def40 	call	100def4 <__mulsi3>
 1024444:	1405883a 	add	r2,r2,r16
 1024448:	10800204 	addi	r2,r2,8
 102444c:	10c00017 	ldw	r3,0(r2)
 1024450:	e0bffc17 	ldw	r2,-16(fp)
 1024454:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1024458:	e13ffb17 	ldw	r4,-20(fp)
 102445c:	101916c0 	call	101916c <alt_release_fd>
  }
} 
 1024460:	e037883a 	mov	sp,fp
 1024464:	dfc00217 	ldw	ra,8(sp)
 1024468:	df000117 	ldw	fp,4(sp)
 102446c:	dc000017 	ldw	r16,0(sp)
 1024470:	dec00304 	addi	sp,sp,12
 1024474:	f800283a 	ret

01024478 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1024478:	defffb04 	addi	sp,sp,-20
 102447c:	dfc00415 	stw	ra,16(sp)
 1024480:	df000315 	stw	fp,12(sp)
 1024484:	df000304 	addi	fp,sp,12
 1024488:	e13ffd15 	stw	r4,-12(fp)
 102448c:	e17ffe15 	stw	r5,-8(fp)
 1024490:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1024494:	010040b4 	movhi	r4,258
 1024498:	211ea004 	addi	r4,r4,31360
 102449c:	e17ffd17 	ldw	r5,-12(fp)
 10244a0:	01800044 	movi	r6,1
 10244a4:	01c07fc4 	movi	r7,511
 10244a8:	10243a00 	call	10243a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 10244ac:	010040b4 	movhi	r4,258
 10244b0:	211e9d04 	addi	r4,r4,31348
 10244b4:	e17ffe17 	ldw	r5,-8(fp)
 10244b8:	000d883a 	mov	r6,zero
 10244bc:	01c07fc4 	movi	r7,511
 10244c0:	10243a00 	call	10243a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 10244c4:	010040b4 	movhi	r4,258
 10244c8:	211ea304 	addi	r4,r4,31372
 10244cc:	e17fff17 	ldw	r5,-4(fp)
 10244d0:	01800044 	movi	r6,1
 10244d4:	01c07fc4 	movi	r7,511
 10244d8:	10243a00 	call	10243a0 <alt_open_fd>
}  
 10244dc:	e037883a 	mov	sp,fp
 10244e0:	dfc00117 	ldw	ra,4(sp)
 10244e4:	df000017 	ldw	fp,0(sp)
 10244e8:	dec00204 	addi	sp,sp,8
 10244ec:	f800283a 	ret

010244f0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 10244f0:	deffef04 	addi	sp,sp,-68
 10244f4:	df001015 	stw	fp,64(sp)
 10244f8:	df001004 	addi	fp,sp,64
 10244fc:	e13ffc15 	stw	r4,-16(fp)
 1024500:	e17ffd15 	stw	r5,-12(fp)
 1024504:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 1024508:	00bffa84 	movi	r2,-22
 102450c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1024510:	e0bffc17 	ldw	r2,-16(fp)
 1024514:	10800828 	cmpgeui	r2,r2,32
 1024518:	1000601e 	bne	r2,zero,102469c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102451c:	0005303a 	rdctl	r2,status
 1024520:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1024524:	e0fff917 	ldw	r3,-28(fp)
 1024528:	00bfff84 	movi	r2,-2
 102452c:	1884703a 	and	r2,r3,r2
 1024530:	1001703a 	wrctl	status,r2
  
  return context;
 1024534:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1024538:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 102453c:	e0bffc17 	ldw	r2,-16(fp)
 1024540:	00c04134 	movhi	r3,260
 1024544:	18eac904 	addi	r3,r3,-21724
 1024548:	100490fa 	slli	r2,r2,3
 102454c:	10c7883a 	add	r3,r2,r3
 1024550:	e0bffe17 	ldw	r2,-8(fp)
 1024554:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 1024558:	e0bffc17 	ldw	r2,-16(fp)
 102455c:	00c04134 	movhi	r3,260
 1024560:	18eac904 	addi	r3,r3,-21724
 1024564:	100490fa 	slli	r2,r2,3
 1024568:	10c5883a 	add	r2,r2,r3
 102456c:	10c00104 	addi	r3,r2,4
 1024570:	e0bffd17 	ldw	r2,-12(fp)
 1024574:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1024578:	e0bffe17 	ldw	r2,-8(fp)
 102457c:	1005003a 	cmpeq	r2,r2,zero
 1024580:	1000201e 	bne	r2,zero,1024604 <alt_irq_register+0x114>
 1024584:	e0bffc17 	ldw	r2,-16(fp)
 1024588:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102458c:	0005303a 	rdctl	r2,status
 1024590:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1024594:	e0fff617 	ldw	r3,-40(fp)
 1024598:	00bfff84 	movi	r2,-2
 102459c:	1884703a 	and	r2,r3,r2
 10245a0:	1001703a 	wrctl	status,r2
  
  return context;
 10245a4:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10245a8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 10245ac:	e0fff717 	ldw	r3,-36(fp)
 10245b0:	00800044 	movi	r2,1
 10245b4:	10c4983a 	sll	r2,r2,r3
 10245b8:	1007883a 	mov	r3,r2
 10245bc:	008040f4 	movhi	r2,259
 10245c0:	10a42f04 	addi	r2,r2,-28484
 10245c4:	10800017 	ldw	r2,0(r2)
 10245c8:	1886b03a 	or	r3,r3,r2
 10245cc:	008040f4 	movhi	r2,259
 10245d0:	10a42f04 	addi	r2,r2,-28484
 10245d4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10245d8:	008040f4 	movhi	r2,259
 10245dc:	10a42f04 	addi	r2,r2,-28484
 10245e0:	10800017 	ldw	r2,0(r2)
 10245e4:	100170fa 	wrctl	ienable,r2
 10245e8:	e0bff817 	ldw	r2,-32(fp)
 10245ec:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10245f0:	e0bff517 	ldw	r2,-44(fp)
 10245f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10245f8:	0005883a 	mov	r2,zero
 10245fc:	e0bfff15 	stw	r2,-4(fp)
 1024600:	00002006 	br	1024684 <alt_irq_register+0x194>
 1024604:	e0bffc17 	ldw	r2,-16(fp)
 1024608:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102460c:	0005303a 	rdctl	r2,status
 1024610:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1024614:	e0fff217 	ldw	r3,-56(fp)
 1024618:	00bfff84 	movi	r2,-2
 102461c:	1884703a 	and	r2,r3,r2
 1024620:	1001703a 	wrctl	status,r2
  
  return context;
 1024624:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1024628:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 102462c:	e0fff317 	ldw	r3,-52(fp)
 1024630:	00800044 	movi	r2,1
 1024634:	10c4983a 	sll	r2,r2,r3
 1024638:	0084303a 	nor	r2,zero,r2
 102463c:	1007883a 	mov	r3,r2
 1024640:	008040f4 	movhi	r2,259
 1024644:	10a42f04 	addi	r2,r2,-28484
 1024648:	10800017 	ldw	r2,0(r2)
 102464c:	1886703a 	and	r3,r3,r2
 1024650:	008040f4 	movhi	r2,259
 1024654:	10a42f04 	addi	r2,r2,-28484
 1024658:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 102465c:	008040f4 	movhi	r2,259
 1024660:	10a42f04 	addi	r2,r2,-28484
 1024664:	10800017 	ldw	r2,0(r2)
 1024668:	100170fa 	wrctl	ienable,r2
 102466c:	e0bff417 	ldw	r2,-48(fp)
 1024670:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1024674:	e0bff117 	ldw	r2,-60(fp)
 1024678:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 102467c:	0005883a 	mov	r2,zero
 1024680:	e0bfff15 	stw	r2,-4(fp)
 1024684:	e0bfff17 	ldw	r2,-4(fp)
 1024688:	e0bffb15 	stw	r2,-20(fp)
 102468c:	e0bffa17 	ldw	r2,-24(fp)
 1024690:	e0bff015 	stw	r2,-64(fp)
 1024694:	e0bff017 	ldw	r2,-64(fp)
 1024698:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 102469c:	e0bffb17 	ldw	r2,-20(fp)
}
 10246a0:	e037883a 	mov	sp,fp
 10246a4:	df000017 	ldw	fp,0(sp)
 10246a8:	dec00104 	addi	sp,sp,4
 10246ac:	f800283a 	ret

010246b0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 10246b0:	defffa04 	addi	sp,sp,-24
 10246b4:	dfc00515 	stw	ra,20(sp)
 10246b8:	df000415 	stw	fp,16(sp)
 10246bc:	dc000315 	stw	r16,12(sp)
 10246c0:	df000304 	addi	fp,sp,12
 10246c4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10246c8:	e0bffe17 	ldw	r2,-8(fp)
 10246cc:	10800217 	ldw	r2,8(r2)
 10246d0:	10d00034 	orhi	r3,r2,16384
 10246d4:	e0bffe17 	ldw	r2,-8(fp)
 10246d8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10246dc:	e03ffd15 	stw	zero,-12(fp)
 10246e0:	00002306 	br	1024770 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10246e4:	e13ffd17 	ldw	r4,-12(fp)
 10246e8:	040040b4 	movhi	r16,258
 10246ec:	841e9d04 	addi	r16,r16,31348
 10246f0:	01400304 	movi	r5,12
 10246f4:	100def40 	call	100def4 <__mulsi3>
 10246f8:	1405883a 	add	r2,r2,r16
 10246fc:	10c00017 	ldw	r3,0(r2)
 1024700:	e0bffe17 	ldw	r2,-8(fp)
 1024704:	10800017 	ldw	r2,0(r2)
 1024708:	1880161e 	bne	r3,r2,1024764 <alt_file_locked+0xb4>
 102470c:	e13ffd17 	ldw	r4,-12(fp)
 1024710:	040040b4 	movhi	r16,258
 1024714:	841e9d04 	addi	r16,r16,31348
 1024718:	01400304 	movi	r5,12
 102471c:	100def40 	call	100def4 <__mulsi3>
 1024720:	1405883a 	add	r2,r2,r16
 1024724:	10800204 	addi	r2,r2,8
 1024728:	10800017 	ldw	r2,0(r2)
 102472c:	1004403a 	cmpge	r2,r2,zero
 1024730:	10000c1e 	bne	r2,zero,1024764 <alt_file_locked+0xb4>
 1024734:	e13ffd17 	ldw	r4,-12(fp)
 1024738:	01400304 	movi	r5,12
 102473c:	100def40 	call	100def4 <__mulsi3>
 1024740:	1007883a 	mov	r3,r2
 1024744:	008040b4 	movhi	r2,258
 1024748:	109e9d04 	addi	r2,r2,31348
 102474c:	1887883a 	add	r3,r3,r2
 1024750:	e0bffe17 	ldw	r2,-8(fp)
 1024754:	18800326 	beq	r3,r2,1024764 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1024758:	00bffcc4 	movi	r2,-13
 102475c:	e0bfff15 	stw	r2,-4(fp)
 1024760:	00000a06 	br	102478c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1024764:	e0bffd17 	ldw	r2,-12(fp)
 1024768:	10800044 	addi	r2,r2,1
 102476c:	e0bffd15 	stw	r2,-12(fp)
 1024770:	008040f4 	movhi	r2,259
 1024774:	10a3d904 	addi	r2,r2,-28828
 1024778:	10800017 	ldw	r2,0(r2)
 102477c:	1007883a 	mov	r3,r2
 1024780:	e0bffd17 	ldw	r2,-12(fp)
 1024784:	18bfd72e 	bgeu	r3,r2,10246e4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1024788:	e03fff15 	stw	zero,-4(fp)
 102478c:	e0bfff17 	ldw	r2,-4(fp)
}
 1024790:	e037883a 	mov	sp,fp
 1024794:	dfc00217 	ldw	ra,8(sp)
 1024798:	df000117 	ldw	fp,4(sp)
 102479c:	dc000017 	ldw	r16,0(sp)
 10247a0:	dec00304 	addi	sp,sp,12
 10247a4:	f800283a 	ret

010247a8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 10247a8:	defff404 	addi	sp,sp,-48
 10247ac:	dfc00b15 	stw	ra,44(sp)
 10247b0:	df000a15 	stw	fp,40(sp)
 10247b4:	df000a04 	addi	fp,sp,40
 10247b8:	e13ffb15 	stw	r4,-20(fp)
 10247bc:	e17ffc15 	stw	r5,-16(fp)
 10247c0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 10247c4:	00bfffc4 	movi	r2,-1
 10247c8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 10247cc:	00bffb44 	movi	r2,-19
 10247d0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 10247d4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 10247d8:	e13ffb17 	ldw	r4,-20(fp)
 10247dc:	014040f4 	movhi	r5,259
 10247e0:	2963d704 	addi	r5,r5,-28836
 10247e4:	102423c0 	call	102423c <alt_find_dev>
 10247e8:	e0bffa15 	stw	r2,-24(fp)
 10247ec:	e0bffa17 	ldw	r2,-24(fp)
 10247f0:	1004c03a 	cmpne	r2,r2,zero
 10247f4:	1000051e 	bne	r2,zero,102480c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 10247f8:	e13ffb17 	ldw	r4,-20(fp)
 10247fc:	102527c0 	call	102527c <alt_find_file>
 1024800:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1024804:	00800044 	movi	r2,1
 1024808:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 102480c:	e0bffa17 	ldw	r2,-24(fp)
 1024810:	1005003a 	cmpeq	r2,r2,zero
 1024814:	1000311e 	bne	r2,zero,10248dc <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1024818:	e13ffa17 	ldw	r4,-24(fp)
 102481c:	102539c0 	call	102539c <alt_get_fd>
 1024820:	e0bff815 	stw	r2,-32(fp)
 1024824:	e0bff817 	ldw	r2,-32(fp)
 1024828:	1004403a 	cmpge	r2,r2,zero
 102482c:	1000031e 	bne	r2,zero,102483c <open+0x94>
    {
      status = index;
 1024830:	e0bff817 	ldw	r2,-32(fp)
 1024834:	e0bff715 	stw	r2,-36(fp)
 1024838:	00002a06 	br	10248e4 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 102483c:	e13ff817 	ldw	r4,-32(fp)
 1024840:	01400304 	movi	r5,12
 1024844:	100def40 	call	100def4 <__mulsi3>
 1024848:	1007883a 	mov	r3,r2
 102484c:	008040b4 	movhi	r2,258
 1024850:	109e9d04 	addi	r2,r2,31348
 1024854:	1885883a 	add	r2,r3,r2
 1024858:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 102485c:	e0fffc17 	ldw	r3,-16(fp)
 1024860:	00900034 	movhi	r2,16384
 1024864:	10bfffc4 	addi	r2,r2,-1
 1024868:	1886703a 	and	r3,r3,r2
 102486c:	e0bff917 	ldw	r2,-28(fp)
 1024870:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1024874:	e0bff617 	ldw	r2,-40(fp)
 1024878:	1004c03a 	cmpne	r2,r2,zero
 102487c:	1000061e 	bne	r2,zero,1024898 <open+0xf0>
 1024880:	e13ff917 	ldw	r4,-28(fp)
 1024884:	10246b00 	call	10246b0 <alt_file_locked>
 1024888:	e0bff715 	stw	r2,-36(fp)
 102488c:	e0bff717 	ldw	r2,-36(fp)
 1024890:	1004803a 	cmplt	r2,r2,zero
 1024894:	1000131e 	bne	r2,zero,10248e4 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1024898:	e0bffa17 	ldw	r2,-24(fp)
 102489c:	10800317 	ldw	r2,12(r2)
 10248a0:	1005003a 	cmpeq	r2,r2,zero
 10248a4:	1000091e 	bne	r2,zero,10248cc <open+0x124>
 10248a8:	e0bffa17 	ldw	r2,-24(fp)
 10248ac:	10800317 	ldw	r2,12(r2)
 10248b0:	e13ff917 	ldw	r4,-28(fp)
 10248b4:	e17ffb17 	ldw	r5,-20(fp)
 10248b8:	e1bffc17 	ldw	r6,-16(fp)
 10248bc:	e1fffd17 	ldw	r7,-12(fp)
 10248c0:	103ee83a 	callr	r2
 10248c4:	e0bfff15 	stw	r2,-4(fp)
 10248c8:	00000106 	br	10248d0 <open+0x128>
 10248cc:	e03fff15 	stw	zero,-4(fp)
 10248d0:	e0bfff17 	ldw	r2,-4(fp)
 10248d4:	e0bff715 	stw	r2,-36(fp)
 10248d8:	00000206 	br	10248e4 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 10248dc:	00bffb44 	movi	r2,-19
 10248e0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 10248e4:	e0bff717 	ldw	r2,-36(fp)
 10248e8:	1004403a 	cmpge	r2,r2,zero
 10248ec:	1000091e 	bne	r2,zero,1024914 <open+0x16c>
  {
    alt_release_fd (index);  
 10248f0:	e13ff817 	ldw	r4,-32(fp)
 10248f4:	101916c0 	call	101916c <alt_release_fd>
    ALT_ERRNO = -status;
 10248f8:	10249340 	call	1024934 <alt_get_errno>
 10248fc:	e0fff717 	ldw	r3,-36(fp)
 1024900:	00c7c83a 	sub	r3,zero,r3
 1024904:	10c00015 	stw	r3,0(r2)
    return -1;
 1024908:	00bfffc4 	movi	r2,-1
 102490c:	e0bffe15 	stw	r2,-8(fp)
 1024910:	00000206 	br	102491c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 1024914:	e0bff817 	ldw	r2,-32(fp)
 1024918:	e0bffe15 	stw	r2,-8(fp)
 102491c:	e0bffe17 	ldw	r2,-8(fp)
}
 1024920:	e037883a 	mov	sp,fp
 1024924:	dfc00117 	ldw	ra,4(sp)
 1024928:	df000017 	ldw	fp,0(sp)
 102492c:	dec00204 	addi	sp,sp,8
 1024930:	f800283a 	ret

01024934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1024934:	defffd04 	addi	sp,sp,-12
 1024938:	dfc00215 	stw	ra,8(sp)
 102493c:	df000115 	stw	fp,4(sp)
 1024940:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1024944:	008040f4 	movhi	r2,259
 1024948:	10a3da04 	addi	r2,r2,-28824
 102494c:	10800017 	ldw	r2,0(r2)
 1024950:	1005003a 	cmpeq	r2,r2,zero
 1024954:	1000061e 	bne	r2,zero,1024970 <alt_get_errno+0x3c>
 1024958:	008040f4 	movhi	r2,259
 102495c:	10a3da04 	addi	r2,r2,-28824
 1024960:	10800017 	ldw	r2,0(r2)
 1024964:	103ee83a 	callr	r2
 1024968:	e0bfff15 	stw	r2,-4(fp)
 102496c:	00000306 	br	102497c <alt_get_errno+0x48>
 1024970:	008040f4 	movhi	r2,259
 1024974:	10a40f04 	addi	r2,r2,-28612
 1024978:	e0bfff15 	stw	r2,-4(fp)
 102497c:	e0bfff17 	ldw	r2,-4(fp)
}
 1024980:	e037883a 	mov	sp,fp
 1024984:	dfc00117 	ldw	ra,4(sp)
 1024988:	df000017 	ldw	fp,0(sp)
 102498c:	dec00204 	addi	sp,sp,8
 1024990:	f800283a 	ret

01024994 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1024994:	defffa04 	addi	sp,sp,-24
 1024998:	df000515 	stw	fp,20(sp)
 102499c:	df000504 	addi	fp,sp,20
 10249a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10249a4:	0005303a 	rdctl	r2,status
 10249a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10249ac:	e0fffd17 	ldw	r3,-12(fp)
 10249b0:	00bfff84 	movi	r2,-2
 10249b4:	1884703a 	and	r2,r3,r2
 10249b8:	1001703a 	wrctl	status,r2
  
  return context;
 10249bc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 10249c0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 10249c4:	e0bfff17 	ldw	r2,-4(fp)
 10249c8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10249cc:	e0bffc17 	ldw	r2,-16(fp)
 10249d0:	10c00017 	ldw	r3,0(r2)
 10249d4:	e0bffc17 	ldw	r2,-16(fp)
 10249d8:	10800117 	ldw	r2,4(r2)
 10249dc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 10249e0:	e0bffc17 	ldw	r2,-16(fp)
 10249e4:	10c00117 	ldw	r3,4(r2)
 10249e8:	e0bffc17 	ldw	r2,-16(fp)
 10249ec:	10800017 	ldw	r2,0(r2)
 10249f0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 10249f4:	e0fffc17 	ldw	r3,-16(fp)
 10249f8:	e0bffc17 	ldw	r2,-16(fp)
 10249fc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1024a00:	e0fffc17 	ldw	r3,-16(fp)
 1024a04:	e0bffc17 	ldw	r2,-16(fp)
 1024a08:	18800015 	stw	r2,0(r3)
 1024a0c:	e0bffe17 	ldw	r2,-8(fp)
 1024a10:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1024a14:	e0bffb17 	ldw	r2,-20(fp)
 1024a18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1024a1c:	e037883a 	mov	sp,fp
 1024a20:	df000017 	ldw	fp,0(sp)
 1024a24:	dec00104 	addi	sp,sp,4
 1024a28:	f800283a 	ret

01024a2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1024a2c:	defffb04 	addi	sp,sp,-20
 1024a30:	dfc00415 	stw	ra,16(sp)
 1024a34:	df000315 	stw	fp,12(sp)
 1024a38:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1024a3c:	d0a09317 	ldw	r2,-32180(gp)
 1024a40:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1024a44:	d0a0c617 	ldw	r2,-31976(gp)
 1024a48:	10800044 	addi	r2,r2,1
 1024a4c:	d0a0c615 	stw	r2,-31976(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1024a50:	00003106 	br	1024b18 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1024a54:	e0bffe17 	ldw	r2,-8(fp)
 1024a58:	10800017 	ldw	r2,0(r2)
 1024a5c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1024a60:	e0bffe17 	ldw	r2,-8(fp)
 1024a64:	10800403 	ldbu	r2,16(r2)
 1024a68:	10803fcc 	andi	r2,r2,255
 1024a6c:	1005003a 	cmpeq	r2,r2,zero
 1024a70:	1000051e 	bne	r2,zero,1024a88 <alt_tick+0x5c>
 1024a74:	d0a0c617 	ldw	r2,-31976(gp)
 1024a78:	1004c03a 	cmpne	r2,r2,zero
 1024a7c:	1000021e 	bne	r2,zero,1024a88 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1024a80:	e0bffe17 	ldw	r2,-8(fp)
 1024a84:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1024a88:	e0bffe17 	ldw	r2,-8(fp)
 1024a8c:	10c00217 	ldw	r3,8(r2)
 1024a90:	d0a0c617 	ldw	r2,-31976(gp)
 1024a94:	10c01e36 	bltu	r2,r3,1024b10 <alt_tick+0xe4>
 1024a98:	e0bffe17 	ldw	r2,-8(fp)
 1024a9c:	10800403 	ldbu	r2,16(r2)
 1024aa0:	10803fcc 	andi	r2,r2,255
 1024aa4:	1004c03a 	cmpne	r2,r2,zero
 1024aa8:	1000191e 	bne	r2,zero,1024b10 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1024aac:	e0bffe17 	ldw	r2,-8(fp)
 1024ab0:	10c00317 	ldw	r3,12(r2)
 1024ab4:	e0bffe17 	ldw	r2,-8(fp)
 1024ab8:	11000517 	ldw	r4,20(r2)
 1024abc:	183ee83a 	callr	r3
 1024ac0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1024ac4:	e0bffd17 	ldw	r2,-12(fp)
 1024ac8:	1004c03a 	cmpne	r2,r2,zero
 1024acc:	1000031e 	bne	r2,zero,1024adc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1024ad0:	e13ffe17 	ldw	r4,-8(fp)
 1024ad4:	10249940 	call	1024994 <alt_alarm_stop>
 1024ad8:	00000d06 	br	1024b10 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1024adc:	e0bffe17 	ldw	r2,-8(fp)
 1024ae0:	10c00217 	ldw	r3,8(r2)
 1024ae4:	e0bffd17 	ldw	r2,-12(fp)
 1024ae8:	1887883a 	add	r3,r3,r2
 1024aec:	e0bffe17 	ldw	r2,-8(fp)
 1024af0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1024af4:	e0bffe17 	ldw	r2,-8(fp)
 1024af8:	10c00217 	ldw	r3,8(r2)
 1024afc:	d0a0c617 	ldw	r2,-31976(gp)
 1024b00:	1880032e 	bgeu	r3,r2,1024b10 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1024b04:	e0fffe17 	ldw	r3,-8(fp)
 1024b08:	00800044 	movi	r2,1
 1024b0c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1024b10:	e0bfff17 	ldw	r2,-4(fp)
 1024b14:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1024b18:	d0e09304 	addi	r3,gp,-32180
 1024b1c:	e0bffe17 	ldw	r2,-8(fp)
 1024b20:	10ffcc1e 	bne	r2,r3,1024a54 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1024b24:	101a4880 	call	101a488 <OSTimeTick>
}
 1024b28:	e037883a 	mov	sp,fp
 1024b2c:	dfc00117 	ldw	ra,4(sp)
 1024b30:	df000017 	ldw	fp,0(sp)
 1024b34:	dec00204 	addi	sp,sp,8
 1024b38:	f800283a 	ret

01024b3c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1024b3c:	deffff04 	addi	sp,sp,-4
 1024b40:	df000015 	stw	fp,0(sp)
 1024b44:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1024b48:	000170fa 	wrctl	ienable,zero
}
 1024b4c:	e037883a 	mov	sp,fp
 1024b50:	df000017 	ldw	fp,0(sp)
 1024b54:	dec00104 	addi	sp,sp,4
 1024b58:	f800283a 	ret

01024b5c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 1024b5c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 1024b60:	d0e06617 	ldw	r3,-32360(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 1024b64:	d120bf17 	ldw	r4,-32004(gp)

      stw ra,  0(sp)
 1024b68:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 1024b6c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 1024b70:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 1024b74:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 1024b78:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 1024b7c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 1024b80:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 1024b84:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 1024b88:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 1024b8c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 1024b90:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 1024b94:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 1024b98:	1024f7c0 	call	1024f7c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 1024b9c:	d120ba17 	ldw	r4,-32024(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 1024ba0:	d160b207 	ldb	r5,-32056(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 1024ba4:	d120bf15 	stw	r4,-32004(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 1024ba8:	d160b245 	stb	r5,-32055(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 1024bac:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 1024bb0:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 1024bb4:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 1024bb8:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 1024bbc:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 1024bc0:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 1024bc4:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 1024bc8:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 1024bcc:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 1024bd0:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 1024bd4:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 1024bd8:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 1024bdc:	d0e06615 	stw	r3,-32360(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 1024be0:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 1024be4:	f800283a 	ret

01024be8 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 1024be8:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 1024bec:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 1024bf0:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 1024bf4:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 1024bf8:	1024f7c0 	call	1024f7c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 1024bfc:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 1024c00:	d4a0b045 	stb	r18,-32063(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 1024c04:	003fe506 	br	1024b9c <OSCtxSw+0x40>

01024c08 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 1024c08:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 1024c0c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 1024c10:	10800054 	ori	r2,r2,1
      wrctl status, r2
 1024c14:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 1024c18:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 1024c1c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 1024c20:	dec00204 	addi	sp,sp,8

      callr r2
 1024c24:	103ee83a 	callr	r2

      nop
 1024c28:	0001883a 	nop

01024c2c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 1024c2c:	defff704 	addi	sp,sp,-36
 1024c30:	dfc00815 	stw	ra,32(sp)
 1024c34:	df000715 	stw	fp,28(sp)
 1024c38:	df000704 	addi	fp,sp,28
 1024c3c:	e13ffc15 	stw	r4,-16(fp)
 1024c40:	e17ffd15 	stw	r5,-12(fp)
 1024c44:	e1bffe15 	stw	r6,-8(fp)
 1024c48:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 1024c4c:	e0bffe17 	ldw	r2,-8(fp)
 1024c50:	1007883a 	mov	r3,r2
 1024c54:	00bfff04 	movi	r2,-4
 1024c58:	1884703a 	and	r2,r3,r2
 1024c5c:	10bf0004 	addi	r2,r2,-1024
 1024c60:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 1024c64:	e0bff917 	ldw	r2,-28(fp)
 1024c68:	10000015 	stw	zero,0(r2)
 1024c6c:	e0bff917 	ldw	r2,-28(fp)
 1024c70:	10c0bb04 	addi	r3,r2,748
 1024c74:	e0bff917 	ldw	r2,-28(fp)
 1024c78:	10c00115 	stw	r3,4(r2)
 1024c7c:	e0bff917 	ldw	r2,-28(fp)
 1024c80:	1080bb04 	addi	r2,r2,748
 1024c84:	10c01704 	addi	r3,r2,92
 1024c88:	e0bff917 	ldw	r2,-28(fp)
 1024c8c:	10c00215 	stw	r3,8(r2)
 1024c90:	e0bff917 	ldw	r2,-28(fp)
 1024c94:	1080bb04 	addi	r2,r2,748
 1024c98:	10c02e04 	addi	r3,r2,184
 1024c9c:	e0bff917 	ldw	r2,-28(fp)
 1024ca0:	10c00315 	stw	r3,12(r2)
 1024ca4:	e0bff917 	ldw	r2,-28(fp)
 1024ca8:	10000415 	stw	zero,16(r2)
 1024cac:	e0bff917 	ldw	r2,-28(fp)
 1024cb0:	10800504 	addi	r2,r2,20
 1024cb4:	1009883a 	mov	r4,r2
 1024cb8:	01800644 	movi	r6,25
 1024cbc:	000b883a 	mov	r5,zero
 1024cc0:	100eecc0 	call	100eecc <memset>
 1024cc4:	e0bff917 	ldw	r2,-28(fp)
 1024cc8:	10000c15 	stw	zero,48(r2)
 1024ccc:	e0fff917 	ldw	r3,-28(fp)
 1024cd0:	008040b4 	movhi	r2,258
 1024cd4:	109c8d04 	addi	r2,r2,29236
 1024cd8:	18800d15 	stw	r2,52(r3)
 1024cdc:	e0bff917 	ldw	r2,-28(fp)
 1024ce0:	10000e15 	stw	zero,56(r2)
 1024ce4:	e0bff917 	ldw	r2,-28(fp)
 1024ce8:	10000f15 	stw	zero,60(r2)
 1024cec:	e0bff917 	ldw	r2,-28(fp)
 1024cf0:	10001015 	stw	zero,64(r2)
 1024cf4:	e0bff917 	ldw	r2,-28(fp)
 1024cf8:	10001115 	stw	zero,68(r2)
 1024cfc:	e0bff917 	ldw	r2,-28(fp)
 1024d00:	10001215 	stw	zero,72(r2)
 1024d04:	e0bff917 	ldw	r2,-28(fp)
 1024d08:	10001315 	stw	zero,76(r2)
 1024d0c:	e0bff917 	ldw	r2,-28(fp)
 1024d10:	10001415 	stw	zero,80(r2)
 1024d14:	e0bff917 	ldw	r2,-28(fp)
 1024d18:	10001515 	stw	zero,84(r2)
 1024d1c:	e0bff917 	ldw	r2,-28(fp)
 1024d20:	10001615 	stw	zero,88(r2)
 1024d24:	e0bff917 	ldw	r2,-28(fp)
 1024d28:	10001715 	stw	zero,92(r2)
 1024d2c:	e0bff917 	ldw	r2,-28(fp)
 1024d30:	10001805 	stb	zero,96(r2)
 1024d34:	e0bff917 	ldw	r2,-28(fp)
 1024d38:	10801f04 	addi	r2,r2,124
 1024d3c:	10000015 	stw	zero,0(r2)
 1024d40:	10000115 	stw	zero,4(r2)
 1024d44:	10000215 	stw	zero,8(r2)
 1024d48:	10000315 	stw	zero,12(r2)
 1024d4c:	10000415 	stw	zero,16(r2)
 1024d50:	10000515 	stw	zero,20(r2)
 1024d54:	10000615 	stw	zero,24(r2)
 1024d58:	10000715 	stw	zero,28(r2)
 1024d5c:	10000815 	stw	zero,32(r2)
 1024d60:	e0bff917 	ldw	r2,-28(fp)
 1024d64:	10002815 	stw	zero,160(r2)
 1024d68:	e0fff917 	ldw	r3,-28(fp)
 1024d6c:	00800044 	movi	r2,1
 1024d70:	18802915 	stw	r2,164(r3)
 1024d74:	18002a15 	stw	zero,168(r3)
 1024d78:	e0fff917 	ldw	r3,-28(fp)
 1024d7c:	008cc384 	movi	r2,13070
 1024d80:	18802b0d 	sth	r2,172(r3)
 1024d84:	e0fff917 	ldw	r3,-28(fp)
 1024d88:	00aaf344 	movi	r2,-21555
 1024d8c:	18802b8d 	sth	r2,174(r3)
 1024d90:	e0fff917 	ldw	r3,-28(fp)
 1024d94:	00848d04 	movi	r2,4660
 1024d98:	18802c0d 	sth	r2,176(r3)
 1024d9c:	e0fff917 	ldw	r3,-28(fp)
 1024da0:	00b99b44 	movi	r2,-6547
 1024da4:	18802c8d 	sth	r2,178(r3)
 1024da8:	e0fff917 	ldw	r3,-28(fp)
 1024dac:	00b7bb04 	movi	r2,-8468
 1024db0:	18802d0d 	sth	r2,180(r3)
 1024db4:	e0fff917 	ldw	r3,-28(fp)
 1024db8:	00800144 	movi	r2,5
 1024dbc:	18802d8d 	sth	r2,182(r3)
 1024dc0:	e0fff917 	ldw	r3,-28(fp)
 1024dc4:	008002c4 	movi	r2,11
 1024dc8:	18802e0d 	sth	r2,184(r3)
 1024dcc:	e0bff917 	ldw	r2,-28(fp)
 1024dd0:	10002f15 	stw	zero,188(r2)
 1024dd4:	e0bff917 	ldw	r2,-28(fp)
 1024dd8:	10003015 	stw	zero,192(r2)
 1024ddc:	e0bff917 	ldw	r2,-28(fp)
 1024de0:	10003115 	stw	zero,196(r2)
 1024de4:	e0bff917 	ldw	r2,-28(fp)
 1024de8:	10003215 	stw	zero,200(r2)
 1024dec:	e0bff917 	ldw	r2,-28(fp)
 1024df0:	10003315 	stw	zero,204(r2)
 1024df4:	e0bff917 	ldw	r2,-28(fp)
 1024df8:	10003415 	stw	zero,208(r2)
 1024dfc:	e0bff917 	ldw	r2,-28(fp)
 1024e00:	10003e15 	stw	zero,248(r2)
 1024e04:	e0bff917 	ldw	r2,-28(fp)
 1024e08:	10003f15 	stw	zero,252(r2)
 1024e0c:	e0bff917 	ldw	r2,-28(fp)
 1024e10:	10004015 	stw	zero,256(r2)
 1024e14:	e0bff917 	ldw	r2,-28(fp)
 1024e18:	10004115 	stw	zero,260(r2)
 1024e1c:	e0bff917 	ldw	r2,-28(fp)
 1024e20:	10004215 	stw	zero,264(r2)
 1024e24:	e0bff917 	ldw	r2,-28(fp)
 1024e28:	10004315 	stw	zero,268(r2)
 1024e2c:	e0bff917 	ldw	r2,-28(fp)
 1024e30:	10004415 	stw	zero,272(r2)
 1024e34:	e0bff917 	ldw	r2,-28(fp)
 1024e38:	10004515 	stw	zero,276(r2)
 1024e3c:	e0bff917 	ldw	r2,-28(fp)
 1024e40:	10004615 	stw	zero,280(r2)
 1024e44:	e0bff917 	ldw	r2,-28(fp)
 1024e48:	10004715 	stw	zero,284(r2)
 1024e4c:	e0bff917 	ldw	r2,-28(fp)
 1024e50:	10003505 	stb	zero,212(r2)
 1024e54:	e0bff917 	ldw	r2,-28(fp)
 1024e58:	10003705 	stb	zero,220(r2)
 1024e5c:	e0bff917 	ldw	r2,-28(fp)
 1024e60:	10003d15 	stw	zero,244(r2)
 1024e64:	e0bff917 	ldw	r2,-28(fp)
 1024e68:	10005215 	stw	zero,328(r2)
 1024e6c:	e0bff917 	ldw	r2,-28(fp)
 1024e70:	10005315 	stw	zero,332(r2)
 1024e74:	e0bff917 	ldw	r2,-28(fp)
 1024e78:	10005415 	stw	zero,336(r2)
 1024e7c:	e0bff917 	ldw	r2,-28(fp)
 1024e80:	10005515 	stw	zero,340(r2)
 1024e84:	e0bff917 	ldw	r2,-28(fp)
 1024e88:	1000b515 	stw	zero,724(r2)
 1024e8c:	e0bff917 	ldw	r2,-28(fp)
 1024e90:	10007515 	stw	zero,468(r2)
 1024e94:	e0bff917 	ldw	r2,-28(fp)
 1024e98:	1000b715 	stw	zero,732(r2)
 1024e9c:	e0bff917 	ldw	r2,-28(fp)
 1024ea0:	1000b815 	stw	zero,736(r2)
 1024ea4:	e0bff917 	ldw	r2,-28(fp)
 1024ea8:	1000b915 	stw	zero,740(r2)
 1024eac:	e0bff917 	ldw	r2,-28(fp)
 1024eb0:	1000ba15 	stw	zero,744(r2)
 1024eb4:	e0bff917 	ldw	r2,-28(fp)
 1024eb8:	1080bb04 	addi	r2,r2,748
 1024ebc:	1009883a 	mov	r4,r2
 1024ec0:	01804504 	movi	r6,276
 1024ec4:	000b883a 	mov	r5,zero
 1024ec8:	100eecc0 	call	100eecc <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 1024ecc:	e0bff917 	ldw	r2,-28(fp)
 1024ed0:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 1024ed4:	e0bffb17 	ldw	r2,-20(fp)
 1024ed8:	10bff304 	addi	r2,r2,-52
 1024edc:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 1024ee0:	e0bffa17 	ldw	r2,-24(fp)
 1024ee4:	10c00c04 	addi	r3,r2,48
 1024ee8:	e0bffc17 	ldw	r2,-16(fp)
 1024eec:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 1024ef0:	e0bffa17 	ldw	r2,-24(fp)
 1024ef4:	10c00b04 	addi	r3,r2,44
 1024ef8:	e0bffd17 	ldw	r2,-12(fp)
 1024efc:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 1024f00:	e0bffa17 	ldw	r2,-24(fp)
 1024f04:	10c00a04 	addi	r3,r2,40
 1024f08:	e0bff917 	ldw	r2,-28(fp)
 1024f0c:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 1024f10:	008040b4 	movhi	r2,258
 1024f14:	10930204 	addi	r2,r2,19464
 1024f18:	10c00104 	addi	r3,r2,4
 1024f1c:	e0bffa17 	ldw	r2,-24(fp)
 1024f20:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 1024f24:	e0bffa17 	ldw	r2,-24(fp)
}
 1024f28:	e037883a 	mov	sp,fp
 1024f2c:	dfc00117 	ldw	ra,4(sp)
 1024f30:	df000017 	ldw	fp,0(sp)
 1024f34:	dec00204 	addi	sp,sp,8
 1024f38:	f800283a 	ret

01024f3c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 1024f3c:	defffe04 	addi	sp,sp,-8
 1024f40:	df000115 	stw	fp,4(sp)
 1024f44:	df000104 	addi	fp,sp,4
 1024f48:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 1024f4c:	e037883a 	mov	sp,fp
 1024f50:	df000017 	ldw	fp,0(sp)
 1024f54:	dec00104 	addi	sp,sp,4
 1024f58:	f800283a 	ret

01024f5c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 1024f5c:	defffe04 	addi	sp,sp,-8
 1024f60:	df000115 	stw	fp,4(sp)
 1024f64:	df000104 	addi	fp,sp,4
 1024f68:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 1024f6c:	e037883a 	mov	sp,fp
 1024f70:	df000017 	ldw	fp,0(sp)
 1024f74:	dec00104 	addi	sp,sp,4
 1024f78:	f800283a 	ret

01024f7c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 1024f7c:	deffff04 	addi	sp,sp,-4
 1024f80:	df000015 	stw	fp,0(sp)
 1024f84:	d839883a 	mov	fp,sp
}
 1024f88:	e037883a 	mov	sp,fp
 1024f8c:	df000017 	ldw	fp,0(sp)
 1024f90:	dec00104 	addi	sp,sp,4
 1024f94:	f800283a 	ret

01024f98 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 1024f98:	deffff04 	addi	sp,sp,-4
 1024f9c:	df000015 	stw	fp,0(sp)
 1024fa0:	d839883a 	mov	fp,sp
}
 1024fa4:	e037883a 	mov	sp,fp
 1024fa8:	df000017 	ldw	fp,0(sp)
 1024fac:	dec00104 	addi	sp,sp,4
 1024fb0:	f800283a 	ret

01024fb4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 1024fb4:	deffff04 	addi	sp,sp,-4
 1024fb8:	df000015 	stw	fp,0(sp)
 1024fbc:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 1024fc0:	e037883a 	mov	sp,fp
 1024fc4:	df000017 	ldw	fp,0(sp)
 1024fc8:	dec00104 	addi	sp,sp,4
 1024fcc:	f800283a 	ret

01024fd0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 1024fd0:	deffff04 	addi	sp,sp,-4
 1024fd4:	df000015 	stw	fp,0(sp)
 1024fd8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 1024fdc:	e037883a 	mov	sp,fp
 1024fe0:	df000017 	ldw	fp,0(sp)
 1024fe4:	dec00104 	addi	sp,sp,4
 1024fe8:	f800283a 	ret

01024fec <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 1024fec:	deffff04 	addi	sp,sp,-4
 1024ff0:	df000015 	stw	fp,0(sp)
 1024ff4:	d839883a 	mov	fp,sp
}
 1024ff8:	e037883a 	mov	sp,fp
 1024ffc:	df000017 	ldw	fp,0(sp)
 1025000:	dec00104 	addi	sp,sp,4
 1025004:	f800283a 	ret

01025008 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 1025008:	deffff04 	addi	sp,sp,-4
 102500c:	df000015 	stw	fp,0(sp)
 1025010:	d839883a 	mov	fp,sp
}
 1025014:	e037883a 	mov	sp,fp
 1025018:	df000017 	ldw	fp,0(sp)
 102501c:	dec00104 	addi	sp,sp,4
 1025020:	f800283a 	ret

01025024 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 1025024:	defffe04 	addi	sp,sp,-8
 1025028:	df000115 	stw	fp,4(sp)
 102502c:	df000104 	addi	fp,sp,4
 1025030:	e13fff15 	stw	r4,-4(fp)
}
 1025034:	e037883a 	mov	sp,fp
 1025038:	df000017 	ldw	fp,0(sp)
 102503c:	dec00104 	addi	sp,sp,4
 1025040:	f800283a 	ret

01025044 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 1025044:	defff404 	addi	sp,sp,-48
 1025048:	df000b15 	stw	fp,44(sp)
 102504c:	df000b04 	addi	fp,sp,44
 1025050:	e13ffc15 	stw	r4,-16(fp)
 1025054:	e17ffd15 	stw	r5,-12(fp)
 1025058:	e1bffe15 	stw	r6,-8(fp)
 102505c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 1025060:	e0fffe17 	ldw	r3,-8(fp)
 1025064:	e0bfff17 	ldw	r2,-4(fp)
 1025068:	10c5883a 	add	r2,r2,r3
 102506c:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 1025070:	e0c00117 	ldw	r3,4(fp)
 1025074:	e0800217 	ldw	r2,8(fp)
 1025078:	10c5883a 	add	r2,r2,r3
 102507c:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 1025080:	e0800117 	ldw	r2,4(fp)
 1025084:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 1025088:	e0bffe17 	ldw	r2,-8(fp)
 102508c:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 1025090:	00800044 	movi	r2,1
 1025094:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 1025098:	e0bffc17 	ldw	r2,-16(fp)
 102509c:	11000504 	addi	r4,r2,20
 10250a0:	e0fffd17 	ldw	r3,-12(fp)
 10250a4:	00800044 	movi	r2,1
 10250a8:	10c6983a 	sll	r3,r2,r3
 10250ac:	2005883a 	mov	r2,r4
 10250b0:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 10250b4:	e0800317 	ldw	r2,12(fp)
 10250b8:	1080008c 	andi	r2,r2,2
 10250bc:	1004c03a 	cmpne	r2,r2,zero
 10250c0:	1000051e 	bne	r2,zero,10250d8 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 10250c4:	e0bffc17 	ldw	r2,-16(fp)
 10250c8:	10800304 	addi	r2,r2,12
 10250cc:	1007883a 	mov	r3,r2
 10250d0:	00810004 	movi	r2,1024
 10250d4:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 10250d8:	e0bffc17 	ldw	r2,-16(fp)
 10250dc:	10800037 	ldwio	r2,0(r2)
 10250e0:	00000006 	br	10250e4 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 10250e4:	e0bffc17 	ldw	r2,-16(fp)
 10250e8:	10800204 	addi	r2,r2,8
 10250ec:	10800037 	ldwio	r2,0(r2)
 10250f0:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 10250f4:	e0bff717 	ldw	r2,-36(fp)
 10250f8:	1080100c 	andi	r2,r2,64
 10250fc:	1005003a 	cmpeq	r2,r2,zero
 1025100:	1000031e 	bne	r2,zero,1025110 <alt_avalon_spi_command+0xcc>
 1025104:	e0bff617 	ldw	r2,-40(fp)
 1025108:	1004c03a 	cmpne	r2,r2,zero
 102510c:	1000041e 	bne	r2,zero,1025120 <alt_avalon_spi_command+0xdc>
 1025110:	e0bff717 	ldw	r2,-36(fp)
 1025114:	1080200c 	andi	r2,r2,128
 1025118:	1005003a 	cmpeq	r2,r2,zero
 102511c:	103ff11e 	bne	r2,zero,10250e4 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 1025120:	e0bff717 	ldw	r2,-36(fp)
 1025124:	1080100c 	andi	r2,r2,64
 1025128:	1005003a 	cmpeq	r2,r2,zero
 102512c:	1000201e 	bne	r2,zero,10251b0 <alt_avalon_spi_command+0x16c>
 1025130:	e0bff617 	ldw	r2,-40(fp)
 1025134:	10800050 	cmplti	r2,r2,1
 1025138:	10001d1e 	bne	r2,zero,10251b0 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 102513c:	e0bff617 	ldw	r2,-40(fp)
 1025140:	10bfffc4 	addi	r2,r2,-1
 1025144:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 1025148:	e0ffff17 	ldw	r3,-4(fp)
 102514c:	e0bffb17 	ldw	r2,-20(fp)
 1025150:	18800b2e 	bgeu	r3,r2,1025180 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 1025154:	e0bffc17 	ldw	r2,-16(fp)
 1025158:	11000104 	addi	r4,r2,4
 102515c:	e0bfff17 	ldw	r2,-4(fp)
 1025160:	10800003 	ldbu	r2,0(r2)
 1025164:	10c03fcc 	andi	r3,r2,255
 1025168:	e0bfff17 	ldw	r2,-4(fp)
 102516c:	10800044 	addi	r2,r2,1
 1025170:	e0bfff15 	stw	r2,-4(fp)
 1025174:	2005883a 	mov	r2,r4
 1025178:	10c00035 	stwio	r3,0(r2)
 102517c:	00000c06 	br	10251b0 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 1025180:	e0bff917 	ldw	r2,-28(fp)
 1025184:	1005003a 	cmpeq	r2,r2,zero
 1025188:	1000071e 	bne	r2,zero,10251a8 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 102518c:	e0bff917 	ldw	r2,-28(fp)
 1025190:	10bfffc4 	addi	r2,r2,-1
 1025194:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 1025198:	e0bffc17 	ldw	r2,-16(fp)
 102519c:	10800104 	addi	r2,r2,4
 10251a0:	10000035 	stwio	zero,0(r2)
 10251a4:	00000206 	br	10251b0 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 10251a8:	00bf0004 	movi	r2,-1024
 10251ac:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 10251b0:	e0bff717 	ldw	r2,-36(fp)
 10251b4:	1080200c 	andi	r2,r2,128
 10251b8:	1005003a 	cmpeq	r2,r2,zero
 10251bc:	103fc91e 	bne	r2,zero,10250e4 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 10251c0:	e0bffc17 	ldw	r2,-16(fp)
 10251c4:	10800037 	ldwio	r2,0(r2)
 10251c8:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 10251cc:	e0bff817 	ldw	r2,-32(fp)
 10251d0:	1005003a 	cmpeq	r2,r2,zero
 10251d4:	1000041e 	bne	r2,zero,10251e8 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 10251d8:	e0bff817 	ldw	r2,-32(fp)
 10251dc:	10bfffc4 	addi	r2,r2,-1
 10251e0:	e0bff815 	stw	r2,-32(fp)
 10251e4:	00000706 	br	1025204 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 10251e8:	e0bff517 	ldw	r2,-44(fp)
 10251ec:	1007883a 	mov	r3,r2
 10251f0:	e0800217 	ldw	r2,8(fp)
 10251f4:	10c00005 	stb	r3,0(r2)
 10251f8:	e0800217 	ldw	r2,8(fp)
 10251fc:	10800044 	addi	r2,r2,1
 1025200:	e0800215 	stw	r2,8(fp)
      credits++;
 1025204:	e0bff617 	ldw	r2,-40(fp)
 1025208:	10800044 	addi	r2,r2,1
 102520c:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 1025210:	e0bff817 	ldw	r2,-32(fp)
 1025214:	1004c03a 	cmpne	r2,r2,zero
 1025218:	103fb21e 	bne	r2,zero,10250e4 <alt_avalon_spi_command+0xa0>
 102521c:	e0c00217 	ldw	r3,8(fp)
 1025220:	e0bffa17 	ldw	r2,-24(fp)
 1025224:	18800126 	beq	r3,r2,102522c <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 1025228:	003fae06 	br	10250e4 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 102522c:	e0bffc17 	ldw	r2,-16(fp)
 1025230:	10800204 	addi	r2,r2,8
 1025234:	10800037 	ldwio	r2,0(r2)
 1025238:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 102523c:	e0bff717 	ldw	r2,-36(fp)
 1025240:	1080080c 	andi	r2,r2,32
 1025244:	1005003a 	cmpeq	r2,r2,zero
 1025248:	103ff81e 	bne	r2,zero,102522c <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 102524c:	e0800317 	ldw	r2,12(fp)
 1025250:	1080004c 	andi	r2,r2,1
 1025254:	1004c03a 	cmpne	r2,r2,zero
 1025258:	1000031e 	bne	r2,zero,1025268 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 102525c:	e0bffc17 	ldw	r2,-16(fp)
 1025260:	10800304 	addi	r2,r2,12
 1025264:	10000035 	stwio	zero,0(r2)

  return read_length;
 1025268:	e0800117 	ldw	r2,4(fp)
}
 102526c:	e037883a 	mov	sp,fp
 1025270:	df000017 	ldw	fp,0(sp)
 1025274:	dec00104 	addi	sp,sp,4
 1025278:	f800283a 	ret

0102527c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 102527c:	defffa04 	addi	sp,sp,-24
 1025280:	dfc00515 	stw	ra,20(sp)
 1025284:	df000415 	stw	fp,16(sp)
 1025288:	df000404 	addi	fp,sp,16
 102528c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1025290:	008040f4 	movhi	r2,259
 1025294:	10a3d504 	addi	r2,r2,-28844
 1025298:	10800017 	ldw	r2,0(r2)
 102529c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10252a0:	00003306 	br	1025370 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 10252a4:	e0bffd17 	ldw	r2,-12(fp)
 10252a8:	11000217 	ldw	r4,8(r2)
 10252ac:	100f5c00 	call	100f5c0 <strlen>
 10252b0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 10252b4:	e0bffd17 	ldw	r2,-12(fp)
 10252b8:	10c00217 	ldw	r3,8(r2)
 10252bc:	e0bffc17 	ldw	r2,-16(fp)
 10252c0:	1885883a 	add	r2,r3,r2
 10252c4:	10bfffc4 	addi	r2,r2,-1
 10252c8:	10800003 	ldbu	r2,0(r2)
 10252cc:	10803fcc 	andi	r2,r2,255
 10252d0:	1080201c 	xori	r2,r2,128
 10252d4:	10bfe004 	addi	r2,r2,-128
 10252d8:	10800bd8 	cmpnei	r2,r2,47
 10252dc:	1000031e 	bne	r2,zero,10252ec <alt_find_file+0x70>
    {
      len -= 1;
 10252e0:	e0bffc17 	ldw	r2,-16(fp)
 10252e4:	10bfffc4 	addi	r2,r2,-1
 10252e8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10252ec:	e0bffc17 	ldw	r2,-16(fp)
 10252f0:	1007883a 	mov	r3,r2
 10252f4:	e0bffe17 	ldw	r2,-8(fp)
 10252f8:	1885883a 	add	r2,r3,r2
 10252fc:	10800003 	ldbu	r2,0(r2)
 1025300:	10803fcc 	andi	r2,r2,255
 1025304:	1080201c 	xori	r2,r2,128
 1025308:	10bfe004 	addi	r2,r2,-128
 102530c:	10800be0 	cmpeqi	r2,r2,47
 1025310:	10000a1e 	bne	r2,zero,102533c <alt_find_file+0xc0>
 1025314:	e0bffc17 	ldw	r2,-16(fp)
 1025318:	1007883a 	mov	r3,r2
 102531c:	e0bffe17 	ldw	r2,-8(fp)
 1025320:	1885883a 	add	r2,r3,r2
 1025324:	10800003 	ldbu	r2,0(r2)
 1025328:	10803fcc 	andi	r2,r2,255
 102532c:	1080201c 	xori	r2,r2,128
 1025330:	10bfe004 	addi	r2,r2,-128
 1025334:	1004c03a 	cmpne	r2,r2,zero
 1025338:	10000a1e 	bne	r2,zero,1025364 <alt_find_file+0xe8>
 102533c:	e0bffd17 	ldw	r2,-12(fp)
 1025340:	11000217 	ldw	r4,8(r2)
 1025344:	e1bffc17 	ldw	r6,-16(fp)
 1025348:	e17ffe17 	ldw	r5,-8(fp)
 102534c:	100ecd80 	call	100ecd8 <memcmp>
 1025350:	1004c03a 	cmpne	r2,r2,zero
 1025354:	1000031e 	bne	r2,zero,1025364 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1025358:	e0bffd17 	ldw	r2,-12(fp)
 102535c:	e0bfff15 	stw	r2,-4(fp)
 1025360:	00000806 	br	1025384 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1025364:	e0bffd17 	ldw	r2,-12(fp)
 1025368:	10800017 	ldw	r2,0(r2)
 102536c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1025370:	00c040f4 	movhi	r3,259
 1025374:	18e3d504 	addi	r3,r3,-28844
 1025378:	e0bffd17 	ldw	r2,-12(fp)
 102537c:	10ffc91e 	bne	r2,r3,10252a4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1025380:	e03fff15 	stw	zero,-4(fp)
 1025384:	e0bfff17 	ldw	r2,-4(fp)
}
 1025388:	e037883a 	mov	sp,fp
 102538c:	dfc00117 	ldw	ra,4(sp)
 1025390:	df000017 	ldw	fp,0(sp)
 1025394:	dec00204 	addi	sp,sp,8
 1025398:	f800283a 	ret

0102539c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 102539c:	defff704 	addi	sp,sp,-36
 10253a0:	dfc00815 	stw	ra,32(sp)
 10253a4:	df000715 	stw	fp,28(sp)
 10253a8:	dc000615 	stw	r16,24(sp)
 10253ac:	df000604 	addi	fp,sp,24
 10253b0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 10253b4:	00bffa04 	movi	r2,-24
 10253b8:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 10253bc:	008040f4 	movhi	r2,259
 10253c0:	10a41304 	addi	r2,r2,-28596
 10253c4:	10800017 	ldw	r2,0(r2)
 10253c8:	e0bffa15 	stw	r2,-24(fp)
 10253cc:	e03ffb0d 	sth	zero,-20(fp)
 10253d0:	e17ffb0b 	ldhu	r5,-20(fp)
 10253d4:	e1bffe04 	addi	r6,fp,-8
 10253d8:	e13ffa17 	ldw	r4,-24(fp)
 10253dc:	101f2a80 	call	101f2a8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10253e0:	e03ffd15 	stw	zero,-12(fp)
 10253e4:	00002006 	br	1025468 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
 10253e8:	e13ffd17 	ldw	r4,-12(fp)
 10253ec:	040040b4 	movhi	r16,258
 10253f0:	841e9d04 	addi	r16,r16,31348
 10253f4:	01400304 	movi	r5,12
 10253f8:	100def40 	call	100def4 <__mulsi3>
 10253fc:	1405883a 	add	r2,r2,r16
 1025400:	10800017 	ldw	r2,0(r2)
 1025404:	1004c03a 	cmpne	r2,r2,zero
 1025408:	1000141e 	bne	r2,zero,102545c <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
 102540c:	e13ffd17 	ldw	r4,-12(fp)
 1025410:	040040b4 	movhi	r16,258
 1025414:	841e9d04 	addi	r16,r16,31348
 1025418:	01400304 	movi	r5,12
 102541c:	100def40 	call	100def4 <__mulsi3>
 1025420:	1407883a 	add	r3,r2,r16
 1025424:	e0bfff17 	ldw	r2,-4(fp)
 1025428:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 102542c:	008040f4 	movhi	r2,259
 1025430:	10a3d904 	addi	r2,r2,-28828
 1025434:	10c00017 	ldw	r3,0(r2)
 1025438:	e0bffd17 	ldw	r2,-12(fp)
 102543c:	1880040e 	bge	r3,r2,1025450 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
 1025440:	00c040f4 	movhi	r3,259
 1025444:	18e3d904 	addi	r3,r3,-28828
 1025448:	e0bffd17 	ldw	r2,-12(fp)
 102544c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1025450:	e0bffd17 	ldw	r2,-12(fp)
 1025454:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 1025458:	00000606 	br	1025474 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 102545c:	e0bffd17 	ldw	r2,-12(fp)
 1025460:	10800044 	addi	r2,r2,1
 1025464:	e0bffd15 	stw	r2,-12(fp)
 1025468:	e0bffd17 	ldw	r2,-12(fp)
 102546c:	10800810 	cmplti	r2,r2,32
 1025470:	103fdd1e 	bne	r2,zero,10253e8 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 1025474:	008040f4 	movhi	r2,259
 1025478:	10a41304 	addi	r2,r2,-28596
 102547c:	11000017 	ldw	r4,0(r2)
 1025480:	101f6a00 	call	101f6a0 <OSSemPost>

  return rc;
 1025484:	e0bffc17 	ldw	r2,-16(fp)
}
 1025488:	e037883a 	mov	sp,fp
 102548c:	dfc00217 	ldw	ra,8(sp)
 1025490:	df000117 	ldw	fp,4(sp)
 1025494:	dc000017 	ldw	r16,0(sp)
 1025498:	dec00304 	addi	sp,sp,12
 102549c:	f800283a 	ret

010254a0 <atexit>:
 10254a0:	200b883a 	mov	r5,r4
 10254a4:	000d883a 	mov	r6,zero
 10254a8:	0009883a 	mov	r4,zero
 10254ac:	000f883a 	mov	r7,zero
 10254b0:	10254ec1 	jmpi	10254ec <__register_exitproc>

010254b4 <exit>:
 10254b4:	defffe04 	addi	sp,sp,-8
 10254b8:	000b883a 	mov	r5,zero
 10254bc:	dc000015 	stw	r16,0(sp)
 10254c0:	dfc00115 	stw	ra,4(sp)
 10254c4:	2021883a 	mov	r16,r4
 10254c8:	10256240 	call	1025624 <__call_exitprocs>
 10254cc:	008040f4 	movhi	r2,259
 10254d0:	10a3d204 	addi	r2,r2,-28856
 10254d4:	11000017 	ldw	r4,0(r2)
 10254d8:	20800f17 	ldw	r2,60(r4)
 10254dc:	10000126 	beq	r2,zero,10254e4 <exit+0x30>
 10254e0:	103ee83a 	callr	r2
 10254e4:	8009883a 	mov	r4,r16
 10254e8:	10189840 	call	1018984 <_exit>

010254ec <__register_exitproc>:
 10254ec:	defffa04 	addi	sp,sp,-24
 10254f0:	008040f4 	movhi	r2,259
 10254f4:	10a3d204 	addi	r2,r2,-28856
 10254f8:	dc000015 	stw	r16,0(sp)
 10254fc:	14000017 	ldw	r16,0(r2)
 1025500:	dd000415 	stw	r20,16(sp)
 1025504:	2829883a 	mov	r20,r5
 1025508:	81405217 	ldw	r5,328(r16)
 102550c:	dcc00315 	stw	r19,12(sp)
 1025510:	dc800215 	stw	r18,8(sp)
 1025514:	dc400115 	stw	r17,4(sp)
 1025518:	dfc00515 	stw	ra,20(sp)
 102551c:	2023883a 	mov	r17,r4
 1025520:	3027883a 	mov	r19,r6
 1025524:	3825883a 	mov	r18,r7
 1025528:	28002526 	beq	r5,zero,10255c0 <__register_exitproc+0xd4>
 102552c:	29000117 	ldw	r4,4(r5)
 1025530:	008007c4 	movi	r2,31
 1025534:	11002716 	blt	r2,r4,10255d4 <__register_exitproc+0xe8>
 1025538:	8800101e 	bne	r17,zero,102557c <__register_exitproc+0x90>
 102553c:	2105883a 	add	r2,r4,r4
 1025540:	1085883a 	add	r2,r2,r2
 1025544:	20c00044 	addi	r3,r4,1
 1025548:	1145883a 	add	r2,r2,r5
 102554c:	0009883a 	mov	r4,zero
 1025550:	15000215 	stw	r20,8(r2)
 1025554:	28c00115 	stw	r3,4(r5)
 1025558:	2005883a 	mov	r2,r4
 102555c:	dfc00517 	ldw	ra,20(sp)
 1025560:	dd000417 	ldw	r20,16(sp)
 1025564:	dcc00317 	ldw	r19,12(sp)
 1025568:	dc800217 	ldw	r18,8(sp)
 102556c:	dc400117 	ldw	r17,4(sp)
 1025570:	dc000017 	ldw	r16,0(sp)
 1025574:	dec00604 	addi	sp,sp,24
 1025578:	f800283a 	ret
 102557c:	29802204 	addi	r6,r5,136
 1025580:	00800044 	movi	r2,1
 1025584:	110e983a 	sll	r7,r2,r4
 1025588:	30c04017 	ldw	r3,256(r6)
 102558c:	2105883a 	add	r2,r4,r4
 1025590:	1085883a 	add	r2,r2,r2
 1025594:	1185883a 	add	r2,r2,r6
 1025598:	19c6b03a 	or	r3,r3,r7
 102559c:	14802015 	stw	r18,128(r2)
 10255a0:	14c00015 	stw	r19,0(r2)
 10255a4:	00800084 	movi	r2,2
 10255a8:	30c04015 	stw	r3,256(r6)
 10255ac:	88bfe31e 	bne	r17,r2,102553c <__register_exitproc+0x50>
 10255b0:	30804117 	ldw	r2,260(r6)
 10255b4:	11c4b03a 	or	r2,r2,r7
 10255b8:	30804115 	stw	r2,260(r6)
 10255bc:	003fdf06 	br	102553c <__register_exitproc+0x50>
 10255c0:	00804134 	movhi	r2,260
 10255c4:	10ab0904 	addi	r2,r2,-21468
 10255c8:	100b883a 	mov	r5,r2
 10255cc:	80805215 	stw	r2,328(r16)
 10255d0:	003fd606 	br	102552c <__register_exitproc+0x40>
 10255d4:	00804074 	movhi	r2,257
 10255d8:	10b92804 	addi	r2,r2,-7008
 10255dc:	1000021e 	bne	r2,zero,10255e8 <__register_exitproc+0xfc>
 10255e0:	013fffc4 	movi	r4,-1
 10255e4:	003fdc06 	br	1025558 <__register_exitproc+0x6c>
 10255e8:	01006404 	movi	r4,400
 10255ec:	103ee83a 	callr	r2
 10255f0:	1007883a 	mov	r3,r2
 10255f4:	103ffa26 	beq	r2,zero,10255e0 <__register_exitproc+0xf4>
 10255f8:	80805217 	ldw	r2,328(r16)
 10255fc:	180b883a 	mov	r5,r3
 1025600:	18000115 	stw	zero,4(r3)
 1025604:	18800015 	stw	r2,0(r3)
 1025608:	80c05215 	stw	r3,328(r16)
 102560c:	18006215 	stw	zero,392(r3)
 1025610:	18006315 	stw	zero,396(r3)
 1025614:	0009883a 	mov	r4,zero
 1025618:	883fc826 	beq	r17,zero,102553c <__register_exitproc+0x50>
 102561c:	003fd706 	br	102557c <__register_exitproc+0x90>

01025620 <register_fini>:
 1025620:	f800283a 	ret

01025624 <__call_exitprocs>:
 1025624:	008040f4 	movhi	r2,259
 1025628:	10a3d204 	addi	r2,r2,-28856
 102562c:	10800017 	ldw	r2,0(r2)
 1025630:	defff304 	addi	sp,sp,-52
 1025634:	df000b15 	stw	fp,44(sp)
 1025638:	d8800115 	stw	r2,4(sp)
 102563c:	00804074 	movhi	r2,257
 1025640:	10b92304 	addi	r2,r2,-7028
 1025644:	1005003a 	cmpeq	r2,r2,zero
 1025648:	d8800215 	stw	r2,8(sp)
 102564c:	d8800117 	ldw	r2,4(sp)
 1025650:	dd400815 	stw	r21,32(sp)
 1025654:	dd000715 	stw	r20,28(sp)
 1025658:	10805204 	addi	r2,r2,328
 102565c:	dfc00c15 	stw	ra,48(sp)
 1025660:	ddc00a15 	stw	r23,40(sp)
 1025664:	dd800915 	stw	r22,36(sp)
 1025668:	dcc00615 	stw	r19,24(sp)
 102566c:	dc800515 	stw	r18,20(sp)
 1025670:	dc400415 	stw	r17,16(sp)
 1025674:	dc000315 	stw	r16,12(sp)
 1025678:	282b883a 	mov	r21,r5
 102567c:	2039883a 	mov	fp,r4
 1025680:	d8800015 	stw	r2,0(sp)
 1025684:	2829003a 	cmpeq	r20,r5,zero
 1025688:	d8800117 	ldw	r2,4(sp)
 102568c:	14405217 	ldw	r17,328(r2)
 1025690:	88001026 	beq	r17,zero,10256d4 <__call_exitprocs+0xb0>
 1025694:	ddc00017 	ldw	r23,0(sp)
 1025698:	88800117 	ldw	r2,4(r17)
 102569c:	8c802204 	addi	r18,r17,136
 10256a0:	143fffc4 	addi	r16,r2,-1
 10256a4:	80000916 	blt	r16,zero,10256cc <__call_exitprocs+0xa8>
 10256a8:	05bfffc4 	movi	r22,-1
 10256ac:	a000151e 	bne	r20,zero,1025704 <__call_exitprocs+0xe0>
 10256b0:	8409883a 	add	r4,r16,r16
 10256b4:	2105883a 	add	r2,r4,r4
 10256b8:	1485883a 	add	r2,r2,r18
 10256bc:	10c02017 	ldw	r3,128(r2)
 10256c0:	a8c01126 	beq	r21,r3,1025708 <__call_exitprocs+0xe4>
 10256c4:	843fffc4 	addi	r16,r16,-1
 10256c8:	85bff81e 	bne	r16,r22,10256ac <__call_exitprocs+0x88>
 10256cc:	d8800217 	ldw	r2,8(sp)
 10256d0:	10003126 	beq	r2,zero,1025798 <__call_exitprocs+0x174>
 10256d4:	dfc00c17 	ldw	ra,48(sp)
 10256d8:	df000b17 	ldw	fp,44(sp)
 10256dc:	ddc00a17 	ldw	r23,40(sp)
 10256e0:	dd800917 	ldw	r22,36(sp)
 10256e4:	dd400817 	ldw	r21,32(sp)
 10256e8:	dd000717 	ldw	r20,28(sp)
 10256ec:	dcc00617 	ldw	r19,24(sp)
 10256f0:	dc800517 	ldw	r18,20(sp)
 10256f4:	dc400417 	ldw	r17,16(sp)
 10256f8:	dc000317 	ldw	r16,12(sp)
 10256fc:	dec00d04 	addi	sp,sp,52
 1025700:	f800283a 	ret
 1025704:	8409883a 	add	r4,r16,r16
 1025708:	88c00117 	ldw	r3,4(r17)
 102570c:	2105883a 	add	r2,r4,r4
 1025710:	1445883a 	add	r2,r2,r17
 1025714:	18ffffc4 	addi	r3,r3,-1
 1025718:	11800217 	ldw	r6,8(r2)
 102571c:	1c001526 	beq	r3,r16,1025774 <__call_exitprocs+0x150>
 1025720:	10000215 	stw	zero,8(r2)
 1025724:	303fe726 	beq	r6,zero,10256c4 <__call_exitprocs+0xa0>
 1025728:	00c00044 	movi	r3,1
 102572c:	1c06983a 	sll	r3,r3,r16
 1025730:	90804017 	ldw	r2,256(r18)
 1025734:	8cc00117 	ldw	r19,4(r17)
 1025738:	1884703a 	and	r2,r3,r2
 102573c:	10001426 	beq	r2,zero,1025790 <__call_exitprocs+0x16c>
 1025740:	90804117 	ldw	r2,260(r18)
 1025744:	1884703a 	and	r2,r3,r2
 1025748:	10000c1e 	bne	r2,zero,102577c <__call_exitprocs+0x158>
 102574c:	2105883a 	add	r2,r4,r4
 1025750:	1485883a 	add	r2,r2,r18
 1025754:	11400017 	ldw	r5,0(r2)
 1025758:	e009883a 	mov	r4,fp
 102575c:	303ee83a 	callr	r6
 1025760:	88800117 	ldw	r2,4(r17)
 1025764:	98bfc81e 	bne	r19,r2,1025688 <__call_exitprocs+0x64>
 1025768:	b8800017 	ldw	r2,0(r23)
 102576c:	147fd526 	beq	r2,r17,10256c4 <__call_exitprocs+0xa0>
 1025770:	003fc506 	br	1025688 <__call_exitprocs+0x64>
 1025774:	8c000115 	stw	r16,4(r17)
 1025778:	003fea06 	br	1025724 <__call_exitprocs+0x100>
 102577c:	2105883a 	add	r2,r4,r4
 1025780:	1485883a 	add	r2,r2,r18
 1025784:	11000017 	ldw	r4,0(r2)
 1025788:	303ee83a 	callr	r6
 102578c:	003ff406 	br	1025760 <__call_exitprocs+0x13c>
 1025790:	303ee83a 	callr	r6
 1025794:	003ff206 	br	1025760 <__call_exitprocs+0x13c>
 1025798:	88800117 	ldw	r2,4(r17)
 102579c:	1000081e 	bne	r2,zero,10257c0 <__call_exitprocs+0x19c>
 10257a0:	89000017 	ldw	r4,0(r17)
 10257a4:	20000726 	beq	r4,zero,10257c4 <__call_exitprocs+0x1a0>
 10257a8:	b9000015 	stw	r4,0(r23)
 10257ac:	8809883a 	mov	r4,r17
 10257b0:	100e48c0 	call	100e48c <free>
 10257b4:	bc400017 	ldw	r17,0(r23)
 10257b8:	883fb71e 	bne	r17,zero,1025698 <__call_exitprocs+0x74>
 10257bc:	003fc506 	br	10256d4 <__call_exitprocs+0xb0>
 10257c0:	89000017 	ldw	r4,0(r17)
 10257c4:	882f883a 	mov	r23,r17
 10257c8:	2023883a 	mov	r17,r4
 10257cc:	883fb21e 	bne	r17,zero,1025698 <__call_exitprocs+0x74>
 10257d0:	003fc006 	br	10256d4 <__call_exitprocs+0xb0>
 10257d4:	010d0bff 	0x10d0bff
 10257d8:	01010002 	0x1010002
 10257dc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10257e0:	01025bd4 	movui	r4,2415
 10257e4:	010d0bff 	0x10d0bff
 10257e8:	01010002 	0x1010002
 10257ec:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10257f0:	01025bd4 	movui	r4,2415
 10257f4:	0201ffff 	0x201ffff
 10257f8:	ffff0000 	call	ffff000 <__alt_mem_epcs_flash_controller_0+0xdff6000>
 10257fc:	00000201 	jmpi	20 <OSTCBNext_OFFSET+0xc>
 1025800:	010d0bff 	0x10d0bff
 1025804:	01010002 	0x1010002
 1025808:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102580c:	01025bd4 	movui	r4,2415
 1025810:	010d0bff 	0x10d0bff
 1025814:	01010002 	0x1010002
 1025818:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102581c:	01025bd4 	movui	r4,2415
 1025820:	010d0bff 	0x10d0bff
 1025824:	01010002 	0x1010002
 1025828:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102582c:	01025bd4 	movui	r4,2415
 1025830:	011d0bff 	0x11d0bff
 1025834:	01000010 	cmplti	r4,zero,0
 1025838:	03030203 	ldbu	r12,3080(zero)
 102583c:	05030403 	ldbu	r20,3088(zero)
 1025840:	07030603 	ldbu	fp,3096(zero)
 1025844:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 1025848:	0000007d 	0x7d
 102584c:	01025bd4 	movui	r4,2415
 1025850:	010d0bff 	0x10d0bff
 1025854:	01030004 	movi	r4,3072
 1025858:	7f000000 	call	7f00000 <__alt_mem_epcs_flash_controller_0+0x5ef7000>
 102585c:	0000007d 	0x7d
 1025860:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025864:	01110bff 	0x1110bff
 1025868:	01030008 	cmpgei	r4,zero,3072
 102586c:	03000203 	ldbu	r12,8(zero)
 1025870:	7f000000 	call	7f00000 <__alt_mem_epcs_flash_controller_0+0x5ef7000>
 1025874:	0000007d 	0x7d
 1025878:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102587c:	01110bff 	0x1110bff
 1025880:	01030008 	cmpgei	r4,zero,3072
 1025884:	03000203 	ldbu	r12,8(zero)
 1025888:	7f000000 	call	7f00000 <__alt_mem_epcs_flash_controller_0+0x5ef7000>
 102588c:	0000007d 	0x7d
 1025890:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025894:	01110bff 	0x1110bff
 1025898:	01030008 	cmpgei	r4,zero,3072
 102589c:	03000203 	ldbu	r12,8(zero)
 10258a0:	7f000000 	call	7f00000 <__alt_mem_epcs_flash_controller_0+0x5ef7000>
 10258a4:	0000007d 	0x7d
 10258a8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10258ac:	01110bff 	0x1110bff
 10258b0:	01030008 	cmpgei	r4,zero,3072
 10258b4:	03000203 	ldbu	r12,8(zero)
 10258b8:	7f000000 	call	7f00000 <__alt_mem_epcs_flash_controller_0+0x5ef7000>
 10258bc:	0000007d 	0x7d
 10258c0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10258c4:	01110bff 	0x1110bff
 10258c8:	01030008 	cmpgei	r4,zero,3072
 10258cc:	03000203 	ldbu	r12,8(zero)
 10258d0:	7f000000 	call	7f00000 <__alt_mem_epcs_flash_controller_0+0x5ef7000>
 10258d4:	0000007d 	0x7d
 10258d8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10258dc:	01110bff 	0x1110bff
 10258e0:	01030008 	cmpgei	r4,zero,3072
 10258e4:	03000203 	ldbu	r12,8(zero)
 10258e8:	7f000000 	call	7f00000 <__alt_mem_epcs_flash_controller_0+0x5ef7000>
 10258ec:	0000007d 	0x7d
 10258f0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10258f4:	01110bff 	0x1110bff
 10258f8:	01030008 	cmpgei	r4,zero,3072
 10258fc:	03000203 	ldbu	r12,8(zero)
 1025900:	7f000000 	call	7f00000 <__alt_mem_epcs_flash_controller_0+0x5ef7000>
 1025904:	0000007d 	0x7d
 1025908:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102590c:	01110bff 	0x1110bff
 1025910:	01030008 	cmpgei	r4,zero,3072
 1025914:	03000203 	ldbu	r12,8(zero)
 1025918:	7f000000 	call	7f00000 <__alt_mem_epcs_flash_controller_0+0x5ef7000>
 102591c:	0000007d 	0x7d
 1025920:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025924:	01110bff 	0x1110bff
 1025928:	01030008 	cmpgei	r4,zero,3072
 102592c:	03000203 	ldbu	r12,8(zero)
 1025930:	7f000000 	call	7f00000 <__alt_mem_epcs_flash_controller_0+0x5ef7000>
 1025934:	0000007d 	0x7d
 1025938:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102593c:	01090bff 	0x1090bff
 1025940:	7f030002 	0x7f030002
 1025944:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1025948:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102594c:	01090bff 	0x1090bff
 1025950:	7f030002 	0x7f030002
 1025954:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1025958:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102595c:	01090bff 	0x1090bff
 1025960:	7f030002 	0x7f030002
 1025964:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1025968:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102596c:	01090bff 	0x1090bff
 1025970:	7f030002 	0x7f030002
 1025974:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1025978:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102597c:	01090bff 	0x1090bff
 1025980:	7f030002 	0x7f030002
 1025984:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1025988:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102598c:	01090bff 	0x1090bff
 1025990:	7f030002 	0x7f030002
 1025994:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1025998:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 102599c:	ff000002 	0xff000002
 10259a0:	000201ff 	0x201ff
 10259a4:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 10259a8:	ff000002 	0xff000002
 10259ac:	000201ff 	0x201ff
 10259b0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10259b4:	01090bff 	0x1090bff
 10259b8:	7f030002 	0x7f030002
 10259bc:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 10259c0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10259c4:	01090bff 	0x1090bff
 10259c8:	7f030002 	0x7f030002
 10259cc:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 10259d0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10259d4:	01090bff 	0x1090bff
 10259d8:	7f030002 	0x7f030002
 10259dc:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 10259e0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10259e4:	01090bff 	0x1090bff
 10259e8:	7f030002 	0x7f030002
 10259ec:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 10259f0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10259f4:	01090bff 	0x1090bff
 10259f8:	7f030002 	0x7f030002
 10259fc:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1025a00:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025a04:	01090bff 	0x1090bff
 1025a08:	7f010002 	0x7f010002
 1025a0c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025a10:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1025a14:	00000002 	0x2
 1025a18:	01090bff 	0x1090bff
 1025a1c:	7f010002 	0x7f010002
 1025a20:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025a24:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1025a28:	ff000002 	0xff000002
 1025a2c:	000201ff 	0x201ff
 1025a30:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025a34:	01090bff 	0x1090bff
 1025a38:	01010004 	movi	r4,1024
 1025a3c:	00007f00 	call	7f0 <OSCtxSw_SWITCH_PC+0x7b0>
 1025a40:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025a44:	01090bff 	0x1090bff
 1025a48:	01010004 	movi	r4,1024
 1025a4c:	00007f00 	call	7f0 <OSCtxSw_SWITCH_PC+0x7b0>
 1025a50:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025a54:	010d0bff 	0x10d0bff
 1025a58:	01010006 	br	1025e5c <_ZTV20QueueCreateException+0x6c>
 1025a5c:	7f000200 	call	7f00020 <__alt_mem_epcs_flash_controller_0+0x5ef7020>
 1025a60:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025a64:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1025a68:	ff000002 	0xff000002
 1025a6c:	000201ff 	0x201ff
 1025a70:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1025a74:	ff000002 	0xff000002
 1025a78:	000201ff 	0x201ff
 1025a7c:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1025a80:	01000004 	movi	r4,0
 1025a84:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1025a88:	01000004 	movi	r4,0
 1025a8c:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1025a90:	01000004 	movi	r4,0
 1025a94:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1025a98:	01000008 	cmpgei	r4,zero,0
 1025a9c:	03000200 	call	300020 <OSCtxSw_SWITCH_PC+0x2fffe0>
 1025aa0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025aa4:	010d0bff 	0x10d0bff
 1025aa8:	01000004 	movi	r4,0
 1025aac:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 1025ab0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025ab4:	010d0bff 	0x10d0bff
 1025ab8:	01000004 	movi	r4,0
 1025abc:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 1025ac0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025ac4:	010d0bff 	0x10d0bff
 1025ac8:	01000004 	movi	r4,0
 1025acc:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 1025ad0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025ad4:	01090bff 	0x1090bff
 1025ad8:	7f010002 	0x7f010002
	...
 1025ae4:	01090bff 	0x1090bff
 1025ae8:	7f010002 	0x7f010002
	...
 1025af4:	010d0bff 	0x10d0bff
 1025af8:	7f010002 	0x7f010002
 1025afc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1025b00:	01026618 	cmpnei	r4,zero,2456
 1025b04:	00000001 	jmpi	0 <OSTCBStkPtr_OFFSET>
 1025b08:	01025620 	cmpeqi	r4,zero,2392
