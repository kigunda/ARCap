
ARCap.elf:     file format elf32-littlenios2
ARCap.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x000261cc memsz 0x000261cc flags r-x
    LOAD off    0x000271ec vaddr 0x010261ec paddr 0x01027ee0 align 2**12
         filesz 0x00001cf4 memsz 0x00001cf4 flags rw-
    LOAD off    0x00029bd4 vaddr 0x01029bd4 paddr 0x01029bd4 align 2**12
         filesz 0x00000000 memsz 0x0000ddb4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0002455c  010001c0  010001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001ad0  0102471c  0102471c  0002571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf4  010261ec  01027ee0  000271ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000ddb4  01029bd4  01029bd4  00029bd4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00028ee0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001fd8  00000000  00000000  00028f08  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000af45  00000000  00000000  0002aee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000798d8  00000000  00000000  00035e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00012810  00000000  00000000  000af6fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0003052c  00000000  00000000  000c1f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000065c0  00000000  00000000  000f243c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00009ee8  00000000  00000000  000f89fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000195c2  00000000  00000000  001028e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0011bea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000034e0  00000000  00000000  0011bed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0012d0ba  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0012d0c0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0012d0c3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0012d0c4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0012d0c5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0012d0c9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0012d0cd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0012d0d1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0012d0dc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0012d0e7  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0012d0f2  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000032  00000000  00000000  0012d0f8  2**0
                  CONTENTS, READONLY
 29 .jdi          000046ad  00000000  00000000  0012d12a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00063046  00000000  00000000  001317d7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001c0 l    d  .text	00000000 .text
0102471c l    d  .rodata	00000000 .rodata
010261ec l    d  .rwdata	00000000 .rwdata
01029bd4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 InfraredReceiver.cpp
00000000 l    df *ABS*	00000000 InfraredSender.cpp
00000000 l    df *ABS*	00000000 Listener.cpp
00000000 l    df *ABS*	00000000 MotorHandler.cpp
00000000 l    df *ABS*	00000000 NetworkReceiver.cpp
00000000 l    df *ABS*	00000000 NetworkSender.cpp
00000000 l    df *ABS*	00000000 WifiHandler.cpp
01004428 l     F .text	00000030 _Z7inRangei
01004458 l     F .text	00000038 _Z12inRetryRangei
01004490 l     F .text	00000078 _Z14stringEndsWithPciS_i
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 functexcept.cc
00000000 l    df *ABS*	00000000 ios_failure.cc
00000000 l    df *ABS*	00000000 stdexcept.cc
00000000 l    df *ABS*	00000000 allocator-inst.cc
00000000 l    df *ABS*	00000000 string-inst.cc
00000000 l    df *ABS*	00000000 atomicity.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 pointer_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 pbase_type_info.cc
00000000 l    df *ABS*	00000000 fundamental_type_info.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0100c78c l     F .text	00000030 _Z12read_uleb128PKhPj
0100c7bc l     F .text	00000054 _Z12read_sleb128PKhPi
0100c810 l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
0100c8ac l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
0100ca80 l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
0100cb10 l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0100cc10 l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
0100cc94 l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
0100d75c l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 bad_typeid.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
01033cac l     O .bss	00000800 emergency_buffer
01029bf4 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 bad_cast.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
01029bf8 l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 unwind-sjlj.c
01029c00 l     O .bss	00000004 fc_static
0100de0c l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
0100df24 l     F .text	000000cc _Unwind_RaiseException_Phase2
0100dff0 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strnlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100f808 l     F .text	00000058 __sprint_r
01025b4a l     O .rodata	00000010 blanks.3452
01025b3a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
01025c5b l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0101186c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01013268 l     F .text	00000058 std
01013374 l     F .text	00000008 __fp_lock
0101337c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
010265f4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
01027e38 l     O .rwdata	00000004 charset
01025e00 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mprec.c
01025f48 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
01016d94 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01017ec0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
01018734 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01018794 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
010187c0 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
01018900 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
01018a40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
01018be0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01018cc0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01018e1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
01019064 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01027e54 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
01019300 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
01027e58 l     O .rwdata	00000004 lockid
01029c30 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
01027e5c l     O .rwdata	00000004 lockid
01029c38 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0101ad38 l     F .text	00000044 OS_InitMisc
0101ad7c l     F .text	0000006c OS_InitRdyList
0101aee0 l     F .text	000000e0 OS_InitTCBList
0101ac5c l     F .text	000000dc OS_InitEventList
0101ade8 l     F .text	0000007c OS_InitTaskIdle
0101ae64 l     F .text	0000007c OS_InitTaskStat
0101b154 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0101d074 l     F .text	00000110 OS_FlagTaskRdy
0101cdcc l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
01026ba8 l     O .rwdata	0000106c jtag_uart_0
01027c14 l     O .rwdata	0000002c adc
01027c40 l     O .rwdata	0000002c uart_motor
01027c6c l     O .rwdata	0000002c uart_wifi
010219c0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01021c70 l     F .text	000002c8 altera_avalon_jtag_uart_irq
01021f38 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01022750 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_de0_nano_adc.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01022fb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0102319c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01023498 l     F .text	000000dc alt_file_locked
010236fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01024230 l     F .text	00000004 register_fini
0100af08  w    F .text	0000005c _ZNSs2atEm
0100da30 g     F .text	00000040 __cxa_free_exception
010022dc  w    F .text	00000030 _ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev
010098a4  w    F .text	00000034 _ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
0100edfc g     F .text	0000001c putchar
0100d9e0 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
010145e8 g     F .text	00000094 _mprec_log10
01001d30  w    F .text	00000058 _ZN12MotorHandlerD0Ev
0100d46c g     F .text	00000018 _ZSt10unexpectedv
01027eaa g     O .rwdata	00000002 OSTaskNameSize
01027d2c  w    O .rwdata	00000008 _ZTIw
010058e4 g     F .text	00000034 _ZSt18__throw_bad_typeidv
0102519c  w    O .rodata	00000018 _ZTI18SemCreateException
010146d4 g     F .text	00000088 __any_on
010160a8 g     F .text	00000070 _isatty_r
01007b1c  w    F .text	00000004 _ZNSaIwEC1Ev
01025f20 g     O .rodata	00000028 __mprec_tinytens
01007180 g     F .text	00000030 _ZNSt14overflow_errorC1ERKSs
01027d24  w    O .rwdata	00000008 _ZTIc
01018e7c g     F .text	000000c8 alt_main
010015f4 g     F .text	0000006c _ZN12MotorHandler5resetEv
010093c8  w    F .text	00000040 _ZNKSs6substrEmm
0100ee20 g     F .text	000000a0 _puts_r
010376f8 g     O .bss	00000100 alt_irq
01027d1c  w    O .rwdata	00000008 _ZTIa
01027ca4  w    O .rwdata	00000004 _ZNSs4nposE
0100088c  w    F .text	00000058 _ZN16ADCOpenExceptionD0Ev
01016118 g     F .text	00000078 _lseek_r
010009ec g     F .text	0000005c _ZN14InfraredSender4testEv
0101d968 g     F .text	000000d0 OS_MemInit
01000de4 g     F .text	000000ac _ZN8Listener6updateEv
0100ddbc g     F .text	00000014 _Unwind_GetIPInfo
010027cc  w    F .text	00000038 _ZNSt6vectorIP8os_eventSaIS1_EEC1ERKS2_
01027ee0 g       *ABS*	00000000 __flash_rwdata_start
010218a8 g     F .text	00000064 OSTimeSet
010178b4 g     F .text	00000088 __eqdf2
01025808  w    O .rodata	00000010 _ZTIPy
01027ddc  w    O .rwdata	00000002 _ZTSa
0100d674 g     F .text	00000074 __cxa_rethrow
01000674  w    F .text	00000028 _ZNK18QueuePostException4whatEv
01024810  w    O .rodata	00000018 _ZTI18QueuePostException
0100dd5c g     F .text	0000000c _Unwind_SjLj_Unregister
01008a4c  w    F .text	00000018 _ZNKSs6rbeginEv
0100d38c g     F .text	00000014 _ZSt14set_unexpectedPFvvE
0100369c  w    F .text	00000064 _ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP8os_eventEEPT_PKS5_S8_S6_
010198b4 g     F .text	000006b4 OSEventPendMulti
010097bc  w    F .text	000000b4 _ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag
01025898  w    O .rodata	00000010 _ZTIPKi
01009528  w    F .text	00000020 _ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_
0100b938  w    F .text	00000024 _ZNSs7replaceEmmRKSs
0100ddac g     F .text	00000010 _Unwind_GetIP
01037988 g       *ABS*	00000000 __alt_heap_start
01023d04 g     F .text	00000020 OSTaskCreateHook
01027d9c  w    O .rwdata	00000003 _ZTSPj
01024a4c  w    O .rodata	00000014 _ZTV18QueuePendException
01002e98  w    F .text	00000028 _ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEEEvT_S9_11__true_type
01029c9c g     O .bss	00002000 task1_stk
01007400 g     F .text	00000030 _ZNSt12length_errorC1ERKSs
0100f220 g     F .text	00000074 _kill_r
0100afe4  w    F .text	00000038 _ZNSs5beginEv
0100baec g     F .text	00000010 _ZNSt9bad_allocD2Ev
0100ed84 g     F .text	00000044 printf
01027e82 g     O .rwdata	00000002 OSMboxEn
01003428  w    F .text	00000044 _ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_11__true_type
01019fbc g     F .text	0000007c OSIntEnter
0100d8dc g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
0100f160 g     F .text	000000a0 _signal_r
01027d78  w    O .rwdata	00000003 _ZTSPx
01025244  w    O .rodata	00000013 _ZTSSt14overflow_error
01015a28 g     F .text	00000068 __sseek
010132d0 g     F .text	000000a4 __sinit
01027d84  w    O .rwdata	00000003 _ZTSPm
01015c28 g     F .text	00000130 __swbuf_r
01027e92 g     O .rwdata	00000002 OSQEn
010024e4  w    F .text	0000005c _ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_
0100a6e4  w    F .text	000000f8 _ZNSs6assignEPKcm
01004fd8 g     F .text	0000008c _ZN11WifiHandler10tcpConnectEv
010025e8  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv
0100d8cc g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
01013fa8 g     F .text	00000084 _setlocale_r
01025a48  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
010133d0 g     F .text	00000068 __sfmoreglue
01003948  w    F .text	00000040 _ZNSt12_Vector_baseIcSaIcEE11_M_allocateEm
0100364c  w    F .text	00000050 _ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
01019570 g     F .text	000000d0 __malloc_unlock
010008e4  w    F .text	00000058 _ZN16ADCOpenExceptionD1Ev
01023d60 g     F .text	0000001c OSTaskStatHook
01007f1c  w    F .text	00000018 _ZNSs7_M_moveEPcPKcm
01022c00 g     F .text	00000090 alt_up_rs232_read_fd
01002948  w    F .text	0000003c _ZNSt6vectorIP8os_eventSaIS1_EE3endEv
01024d08  w    O .rodata	0000000c _ZTI12MotorHandler
0100bd4c g     F .text	00000240 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
01002a6c  w    F .text	0000003c _ZSt8_DestroyIPccEvT_S1_SaIT0_E
01029c40 g     O .bss	00000001 OSLockNesting
0100b98c  w    F .text	00000064 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc
0100d48c g     F .text	00000020 _ZSt18uncaught_exceptionv
01025204  w    O .rodata	0000000c _ZTISt15underflow_error
01027ed0 g     O .rwdata	00000002 OSDataSize
01029c41 g     O .bss	00000001 OSRunning
0100a354  w    F .text	000000bc _ZNSsD2Ev
0100418c g     F .text	00000050 _ZN13NetworkSenderC1EP11WifiHandler
0100a20c  w    F .text	0000008c _ZNSspLEc
01009df8  w    F .text	000000e0 _ZNSs6appendEmc
0100ec0c g     F .text	000000e0 memmove
01023d98 g     F .text	0000001c OSInitHookBegin
01027da0  w    O .rwdata	00000002 _ZTSj
01027ec8 g     O .rwdata	00000002 OSTmrSize
010003c0 g     F .text	00000090 _ZN16InfraredReceiverC1Ev
01003354  w    F .text	00000084 _ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES8_EET0_T_SA_S9_
0100ba38 g     F .text	00000010 _ZNSt9exceptionD2Ev
010133c0 g     F .text	00000010 _cleanup
01003054  w    F .text	00000050 _ZNSt12_Vector_baseIP8os_eventSaIS1_EE13_M_deallocateEPS1_m
0100f294 g     F .text	000000bc snprintf
0101475c g     F .text	000000bc _Balloc
01025638  w    O .rodata	00000024 _ZTSN10__cxxabiv119__pointer_type_infoE
01000c6c  w    F .text	00000058 _ZN14InfraredSenderD0Ev
01002828  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_
0100979c  w    F .text	00000020 _ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_
0100bbd8 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD1Ev
010252a8  w    O .rodata	00000011 _ZTSSt12out_of_range
01025acc  w    O .rodata	0000000c _ZTISt8bad_cast
01007f34  w    F .text	00000018 _ZNSs7_M_copyEPcPKcm
01029c44 g     O .bss	00000004 OSIdleCtr
0100a86c  w    F .text	00000040 _ZNSsaSEPKc
0100b9f0 g     F .text	00000014 _ZN9__gnu_cxx18__exchange_and_addEPVii
01000c1c  w    F .text	00000050 _ZN8ListenerD2Ev
010059b4 g     F .text	00000108 _ZSt19__throw_ios_failurePKc
010179c4 g     F .text	00000088 __gtdf2
01025570  w    O .rodata	00000014 _ZTVSt13bad_exception
010239d0 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0101b488 g     F .text	000002e0 OS_TCBInit
010033d8  w    F .text	00000050 _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_
01027e00  w    O .rwdata	00000002 _ZTSb
01006910  w    F .text	00000034 _ZNSt14overflow_errorD0Ev
01004ca8 g     F .text	00000048 _ZN11WifiHandler4lockEv
01000000 g     F .entry	0000001c __reset
0100242c  w    F .text	00000038 _ZNSaIP8os_eventEC2ERKS1_
01027cac  w    O .rwdata	00000001 _ZNSs4_Rep11_S_terminalE
0102288c g     F .text	00000140 alt_up_de0_nano_adc_read
010058a4  w    F .text	00000040 _ZN14InfraredSenderC1Ev
010086e4  w    F .text	000000e0 _ZNKSs16find_last_not_ofEPKcmm
01000b00 g     F .text	00000034 _Z25infrared_sender_test_taskPv
0100318c  w    F .text	00000048 _ZSt19__copy_backward_auxIPcS0_ET0_T_S2_S1_
0100ddec g     F .text	00000008 _Unwind_GetRegionStart
01027de0  w    O .rwdata	00000004 _ZTSPKc
01027df8  w    O .rwdata	00000004 _ZTSPKb
01027d68  w    O .rwdata	00000004 _ZTSPKy
01001e38  w    F .text	00000058 _ZN17UARTOpenExceptionD1Ev
01027ece g     O .rwdata	00000002 OSTmrWheelTblSize
01000020 g       *ABS*	00000000 __flash_exceptions_start
01027e6e g     O .rwdata	00000002 OSEventSize
01029c48 g     O .bss	00000001 OSPrioHighRdy
01016034 g     F .text	00000074 _fstat_r
01002804  w    F .text	00000024 _ZNKSt6vectorIcSaIcEE8max_sizeEv
010258b8  w    O .rodata	00000010 _ZTIPKt
01023d24 g     F .text	00000020 OSTaskDelHook
01027dd8  w    O .rwdata	00000003 _ZTSPa
01004e38 g     F .text	000000a0 _ZN11WifiHandler10tcpReceiveEv
0100dbf8 g     F .text	00000100 _Znwm
01008484  w    F .text	00000064 _ZNSs4_Rep10_M_disposeERKSaIcE
01002540  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_
01029c10 g     O .bss	00000004 errno
01008b60  w    F .text	0000003c _ZNSsC2EmcRKSaIcE
010239b0 g       .text	00000000 OSStartHighRdy
01008880  w    F .text	0000007c _ZNKSs7compareEPKc
010098d8  w    F .text	000000fc _ZNSsC1ERKSs
01027e04  w    O .rwdata	00000004 _ZTSPKv
0102007c g     F .text	00000200 OSTaskCreateExt
0101c8e8 g     F .text	00000068 OSFlagPendGetFlagsRdy
01027eae g     O .rwdata	00000002 OSTaskStatStkSize
0100e1bc g     F .text	00000080 _Unwind_Backtrace
010050b8 g     F .text	000000fc _ZN11WifiHandlerC1Ev
01025978  w    O .rodata	00000010 _ZTIPKb
0100905c  w    F .text	00000088 _ZNKSs4copyEPcmm
0101b8f4 g     F .text	00000334 OSFlagAccept
0101e0a0 g     F .text	000000c8 OSQFlush
0101da38 g     F .text	00000154 OSQAccept
01029c28 g     O .bss	00000004 alt_argv
01003c7c  w    F .text	00000088 _ZNSt6vectorIcSaIcEE9push_backERKc
0102fc98 g       *ABS*	00000000 _gp
01024858  w    O .rodata	00000011 _ZTS14ARCapException
01001e90 g     F .text	00000128 _ZN15NetworkReceiver4postEPKc
0100d7bc g     F .text	00000034 _ZNSt10bad_typeidD0Ev
01006944  w    F .text	00000010 _ZNSt14overflow_errorD1Ev
0100c76c g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD1Ev
0101fea8 g     F .text	000001d4 OSTaskCreate
01001cf0  w    F .text	00000040 _ZN17UARTOpenExceptionC1Ev
0101f934 g     F .text	00000574 OSTaskChangePrio
0100dba4 g     F .text	00000034 _ZNSt8bad_castD0Ev
01007b0c  w    F .text	00000004 _ZNSaIwED1Ev
01029c3c g     O .bss	00000004 alt_heapsem
01018960 g     F .text	00000020 getpid
0100aaa0  w    F .text	00000038 _ZNSs6assignEmc
01007c24  w    F .text	0000000c _ZNKSs4_Rep12_M_is_leakedEv
0101b768 g     F .text	0000018c OSDebugInit
0100cd18 g     F .text	00000180 __cxa_call_unexpected
0102027c g     F .text	0000040c OSTaskDel
0100d484 g     F .text	00000008 __cxa_get_exception_ptr
01024a1c  w    O .rodata	00000018 _ZTI18QueuePendException
01027d8c  w    O .rwdata	00000004 _ZTSPKl
01007f54  w    F .text	0000000c _ZNKSsixEm
010048f8 g     F .text	00000068 _ZN11WifiHandler5readyEv
01026a28 g     O .rwdata	00000180 alt_fd_list
0100c6b4 g     F .text	00000034 _ZN10__cxxabiv117__pbase_type_infoD0Ev
010344d4 g     O .bss	00000370 OSFlagTbl
01025868  w    O .rodata	00000010 _ZTIPl
010252bc  w    O .rodata	00000014 _ZTVSt12out_of_range
0100ee18 g     F .text	00000008 _putchar_r
0100e16c g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
0101aa38 g     F .text	000000b8 OS_EventTaskRemove
01002cec  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS4_
0100dd80 g     F .text	00000014 _Unwind_GetCFA
0100d378 g     F .text	00000014 _ZSt13set_terminatePFvvE
01027d04  w    O .rwdata	00000008 _ZTIt
010230d8 g     F .text	00000094 alt_find_dev
0100eb6c g     F .text	000000a0 memcpy
01008200  w    F .text	00000010 _ZNSsC2Ev
01027e08  w    O .rwdata	00000003 _ZTSPv
010080f0  w    F .text	0000000c _ZNKSs17find_first_not_ofERKSsm
01027e98 g     O .rwdata	00000002 OSRdyTblSize
01007f60  w    F .text	000000a4 _ZNKSs17find_first_not_ofEPKcmm
01024e5c  w    O .rodata	0000000c _ZTI13NetworkSender
01003700  w    F .text	00000048 _ZSt10__copy_auxIPP8os_eventS2_ET0_T_S4_S3_
010096a8  w    F .text	00000034 _ZNSsC1IPKcEET_S2_RKSaIcE
01001108  w    F .text	00000058 _ZN18QueuePendExceptionD1Ev
010133b4 g     F .text	0000000c _cleanup_r
01017b5c g     F .text	000000f8 __floatsidf
01023260 g     F .text	00000078 alt_io_redirect
01017ad4 g     F .text	00000088 __ltdf2
01004cf0 g     F .text	000000d8 _ZN11WifiHandler7httpGetEPc
01025288  w    O .rodata	00000014 _ZTVSt11range_error
010076dc g     F .text	00000104 _ZNSt13runtime_errorD2Ev
0100641c g     F .text	00000190 _ZSt21__throw_runtime_errorPKc
0102471c g       *ABS*	00000000 __DTOR_END__
010081a4  w    F .text	00000050 _ZNKSs5rfindEPKcm
01002b64  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv
010259a8  w    O .rodata	00000010 _ZTIPv
0100c508 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
010072f0 g     F .text	000000b0 _ZNSt11logic_errorC2ERKSs
01025328  w    O .rodata	00000014 _ZTVSt16invalid_argument
01008210  w    F .text	00000010 _ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_
01022b8c g     F .text	00000074 alt_up_rs232_read_data
0100eec0 g     F .text	00000014 puts
01027d34  w    O .rwdata	00000008 _ZTIb
010256bc  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
0102576c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__pbase_type_infoE
01002a30  w    F .text	0000003c _ZSt8_DestroyIPcEvT_S1_
0100b134  w    F .text	00000150 _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_
01007b00  w    F .text	00000004 _ZNSaIcED2Ev
01019640 g     F .text	00000130 OSEventNameGet
01027e7c g     O .rwdata	00000002 OSFlagMax
01000704  w    F .text	00000040 _ZN16ADCOpenExceptionC1Ev
010251cc  w    O .rodata	00000014 _ZTV18SemCreateException
01007210 g     F .text	00000030 _ZNSt11range_errorC2ERKSs
01025858  w    O .rodata	00000010 _ZTIPKl
01014538 g     F .text	000000b0 __ratio
0101a038 g     F .text	00000100 OSIntExit
01009c44  w    F .text	00000004 _ZNSsaSERKSs
0102529c  w    O .rodata	0000000c _ZTISt12out_of_range
01007e8c  w    F .text	00000038 _ZNKSs15_M_check_lengthEmmPKc
01027eb6 g     O .rwdata	00000002 OSTCBSize
01008a64  w    F .text	000000c0 _ZNSs12_S_constructEmcRKSaIcE
01007afc  w    F .text	00000004 _ZNSaIcEC1Ev
0100bba4 g     F .text	00000034 _ZN10__cxxabiv119__pointer_type_infoD0Ev
01029c49 g     O .bss	00000001 OSPrioCur
010221b4 g     F .text	000002c0 altera_avalon_jtag_uart_read
0100e2c0 g     F .text	00000014 malloc
0100edc8 g     F .text	00000034 _printf_r
01002984  w    F .text	00000028 _ZNKSt6vectorIP8os_eventSaIS1_EE8max_sizeEv
01017ffc g     F .text	00000008 __udivsi3
01018980 g     F .text	000000c0 isatty
0100ef44 g     F .text	000000cc _raise_r
01027e9c g     O .rwdata	00000002 OSStkWidth
01027db4  w    O .rwdata	00000003 _ZTSPt
01025e30 g     O .rodata	000000c8 __mprec_tens
0100a648  w    F .text	0000009c _ZNSs15_M_replace_safeEmmPKcm
01027e90 g     O .rwdata	00000002 OSPtrSize
01005ddc g     F .text	00000190 _ZSt22__throw_overflow_errorPKc
010073d0 g     F .text	00000030 _ZNSt12out_of_rangeC2ERKSs
0100c738 g     F .text	00000034 _ZN10__cxxabiv123__fundamental_type_infoD0Ev
01013f84 g     F .text	00000008 __locale_charset
01027e70 g     O .rwdata	00000002 OSEventTblSize
01009c48  w    F .text	00000128 _ZNSs7reserveEm
01008c94  w    F .text	000000c8 _ZNKSs7compareEmmPKc
01023924 g       .text	00000000 OSCtxSw
01024020 g     F .text	00000090 alt_icache_flush
01007bdc  w    F .text	0000000c _ZNKSs4sizeEv
01029c04 g     O .bss	00000004 __malloc_top_pad
0100a410  w    F .text	00000238 _ZNSs9_M_mutateEmmm
010052d8  w    F .text	00000040 _ZN18SemCreateExceptionC1Ev
01024a60  w    O .rodata	00000010 _ZTIP20QueueCreateException
0100b518  w    F .text	000002e0 _ZNSs7replaceEmmPKcm
01008294  w    F .text	00000058 _ZNKSs16find_last_not_ofEcm
01029c4c g     O .bss	00000004 OSTCBList
0100f21c g     F .text	00000004 _getpid_r
01005370  w    F .text	00000058 _ZN18SemCreateExceptionD1Ev
01001210 g     F .text	0000025c _ZN12MotorHandler4testEv
01029c20 g     O .bss	00000004 alt_fd_list_lock
0100b868  w    F .text	00000010 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcm
01003748  w    F .text	00000084 _ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_
01027e34 g     O .rwdata	00000004 __mb_cur_max
01009fe4  w    F .text	00000040 _ZNSs6appendEPKc
01013f8c g     F .text	0000000c _localeconv_r
0100bc2c g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
010082ec  w    F .text	00000064 _ZNKSs17find_first_not_ofEcm
010029d0  w    F .text	00000038 _ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEppEv
01014e54 g     F .text	0000003c __i2b
01013968 g     F .text	0000049c __sfvwrite_r
0100c528 g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
01027d50  w    O .rwdata	00000004 _ZTSPKd
0100f098 g     F .text	000000b4 __sigtramp_r
01007b5c  w    F .text	00000008 _ZNKSs9_M_ibeginEv
01007070 g     F .text	000000b0 _ZNSt13runtime_errorC2ERKSs
01034844 g     O .bss	00000c30 OSMemTbl
01029c50 g     O .bss	00000001 OSTickStepState
01002f38  w    F .text	00000038 _ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcm
010248a4  w    O .rodata	00000014 _ZTSP16ADCOpenException
01004b80 g     F .text	000000f4 _ZN11WifiHandler6statusEv
0100eed4 g     F .text	00000070 _sbrk_r
010034b0  w    F .text	00000044 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_cET0_T_S8_S7_SaIT1_E
01025a7c  w    O .rodata	00000020 _ZTVSt9type_info
01025310  w    O .rodata	00000015 _ZTSSt16invalid_argument
0100594c g     F .text	00000034 _ZSt17__throw_bad_allocv
01027e94 g     O .rwdata	00000002 OSQMax
01003258  w    F .text	00000050 _ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_
01035474 g     O .bss	00000800 OSTaskStatStk
0101d550 g     F .text	0000010c OSMemNameGet
01024e4c  w    O .rodata	00000010 _ZTS13NetworkSender
0100c6e8 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD1Ev
0102fc9c g     O .bss	00002000 task4_stk
01007b2c  w    F .text	00000010 _ZNSt11char_traitsIcE2eqERKcS2_
01027e74 g     O .rwdata	00000002 OSFlagEn
01016190 g     F .text	00000078 _read_r
0100ba08 g     F .text	00000010 _ZNKSt9exception4whatEv
0100866c  w    F .text	00000068 _ZNKSs4findEcm
01007b08  w    F .text	00000004 _ZNSaIwEC2Ev
01027eba g     O .rwdata	00000002 OSTimeTickHookEn
01027d80  w    O .rwdata	00000004 _ZTSPKm
0101d184 g     F .text	000000ac OS_FlagUnlink
0101e604 g     F .text	00000180 OSQPost
010269f4 g     O .rwdata	0000000c __lc_ctype
01027e4c g     O .rwdata	00000004 alt_max_fd
01022af4 g     F .text	00000050 alt_up_rs232_check_parity
010088fc  w    F .text	00000050 _ZNKSs16find_last_not_ofEPKcm
0101b014 g     F .text	0000006c OS_MemCopy
010247e8  w    O .rodata	00000010 _ZTIP18QueuePostException
01000784  w    F .text	00000058 _ZN14ARCapExceptionD2Ev
010248d0  w    O .rodata	00000013 _ZTS16ADCOpenException
0101b080 g     F .text	000000d4 OS_Sched
01018438 g     F .text	00000138 __unpack_d
01008830  w    F .text	00000050 _ZNKSs4findEPKcm
01015f10 g     F .text	00000110 _fclose_r
0100899c  w    F .text	00000050 _ZNKSs12find_last_ofEPKcm
0101d44c g     F .text	00000104 OSMemGet
010080fc  w    F .text	000000a8 _ZNKSs5rfindEPKcmm
010209b0 g     F .text	000001c4 OSTaskNameSet
010255ec  w    O .rodata	0000000c _ZTISt9bad_alloc
01007b50  w    F .text	0000000c _ZNKSs6_M_repEv
01013234 g     F .text	00000034 fflush
010257e8  w    O .rodata	00000010 _ZTIPf
01029c08 g     O .bss	00000004 __malloc_max_sbrked_mem
01029c54 g     O .bss	00000004 OSCtxSwCtr
01023d7c g     F .text	0000001c OSTimeTickHook
010232d8 g     F .text	000001c0 alt_irq_register
0100aba8  w    F .text	00000050 _ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE
01027e7e g     O .rwdata	00000002 OSFlagNameSize
0100af64  w    F .text	00000044 _ZNSsixEm
01009ad0  w    F .text	00000174 _ZNSs6assignERKSs
01025614  w    O .rodata	00000024 _ZTVN10__cxxabiv119__pointer_type_infoE
0101aaf0 g     F .text	00000104 OS_EventTaskRemoveMulti
01017224 g     F .text	00000074 __adddf3
01001070  w    F .text	00000040 _ZN18QueuePendExceptionC1Ev
01025a1c  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0101a8e4 g     F .text	00000154 OS_EventTaskWaitMulti
0100a298  w    F .text	000000bc _ZNSsD1Ev
01014418 g     F .text	00000120 __b2d
01027e96 g     O .rwdata	00000002 OSQSize
0100dbd8 g     F .text	00000010 _ZNSt8bad_castD1Ev
010167e4 g     F .text	000005b0 __umoddi3
01018d2c g     F .text	000000f0 lseek
0100afa8  w    F .text	0000003c _ZNSs3endEv
0101f1e0 g     F .text	0000027c OSSemPend
0100c588 g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
010253bc  w    O .rodata	00000014 _ZTVSt11logic_error
0100d668 g     F .text	0000000c _ZdlPv
010069dc  w    F .text	00000034 _ZNSt12length_errorD0Ev
01027e30 g     O .rwdata	00000004 _global_impure_ptr
010002b0 g     F .text	0000008c _ZN16InfraredReceiver4postEPKc
0100bbf8 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
010153bc g     F .text	000005f4 _realloc_r
01027e80 g     O .rwdata	00000002 OSLowestPrio
01037988 g       *ABS*	00000000 __bss_end
01027d6c  w    O .rwdata	00000003 _ZTSPy
01027da4  w    O .rwdata	00000004 _ZTSPKi
01023dec g     F .text	00000020 OSTCBInitHook
01027ec6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
01025988  w    O .rodata	00000010 _ZTIPb
010237f4 g     F .text	00000110 alt_tick
0100dd4c g     F .text	00000010 _Unwind_SjLj_Register
01016208 g     F .text	000005dc __udivdi3
01002fc0  w    F .text	0000005c _ZNSt12_Vector_baseIcSaIcEED2Ev
01025258  w    O .rodata	00000014 _ZTVSt14overflow_error
0100673c g     F .text	00000190 _ZSt20__throw_length_errorPKc
01027e68 g     O .rwdata	00000002 OSEventEn
01025ef8 g     O .rodata	00000028 __mprec_bigtens
010150b0 g     F .text	00000120 __s2b
01027ec2 g     O .rwdata	00000002 OSTmrCfgNameSize
0100e294 g     F .text	00000018 abort
01017d2c g     F .text	00000194 __floatunsidf
01007dd0  w    F .text	000000bc _ZNSs4_Rep10_M_refcopyEv
01014338 g     F .text	00000060 __mcmp
01002e70  w    F .text	00000028 _ZNK9__gnu_cxx13new_allocatorIP8os_eventE8max_sizeEv
01000450 g     F .text	00000090 _ZN16InfraredReceiverC2Ev
01027cd4  w    O .rwdata	00000008 _ZTIy
01027e28 g     O .rwdata	00000004 __ctype_ptr
01004138 g     F .text	00000054 _ZN13NetworkSender5parseEPc
0100d4ac g     F .text	000000a4 __cxa_end_catch
0101339c g     F .text	00000018 __fp_lock_all
0100ba8c g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
010023d0  w    F .text	00000024 _ZN9__gnu_cxx13new_allocatorIP8os_eventEC2ERKS3_
010257d8  w    O .rodata	00000010 _ZTIPKf
0101cf90 g     F .text	000000e4 OS_FlagInit
0102375c g     F .text	00000098 alt_alarm_stop
01007c30  w    F .text	0000000c _ZNKSs4_Rep12_M_is_sharedEv
0100f7e4 g     F .text	00000024 strtol
01027ea4 g     O .rwdata	00000002 OSTaskIdleStkSize
010257c8  w    O .rodata	00000010 _ZTIPd
01007b3c  w    F .text	00000008 _ZNKSs7_M_dataEv
0100927c  w    F .text	00000060 _ZNSsC2ERKSsmmRKSaIcE
0102486c  w    O .rodata	00000014 _ZTV18QueuePostException
01024ab8  w    O .rodata	00000014 _ZTV20QueueCreateException
01029c90 g     O .bss	00000004 alt_irq_active
0101ed6c g     F .text	000000c0 OSSemAccept
0100f568 g     F .text	00000038 strnlen
0100d444 g     F .text	00000018 _ZSt9terminatev
0101d77c g     F .text	000000f0 OSMemPut
01027dc4  w    O .rwdata	00000002 _ZTSs
0100b12c  w    F .text	00000008 _ZNSs6resizeEm
01007b04  w    F .text	00000004 _ZNSaIcEC2ERKS_
0101d230 g     F .text	0000021c OSMemCreate
01006900  w    F .text	00000010 _ZNSt15underflow_errorD1Ev
01029c58 g     O .bss	00000004 OSIdleCtrMax
01000dbc g     F .text	00000028 _ZN8Listener8listenerEv
01005f6c g     F .text	00000190 _ZSt24__throw_invalid_argumentPKc
01025724  w    O .rodata	00000024 _ZTVN10__cxxabiv117__pbase_type_infoE
010000ec g     F .exceptions	000000d4 alt_irq_handler
0100a7dc  w    F .text	00000040 _ZNSs6assignEPKc
01005064 g     F .text	00000054 _Z26wifi_handler_tcp_test_taskPv
01026a00 g     O .rwdata	00000028 alt_dev_null
010038e8  w    F .text	00000060 _ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv
01008f58  w    F .text	00000104 _ZNSs4_Rep7_M_grabERKSaIcES2_
0100ae28  w    F .text	00000050 _ZNSs6insertEmRKSsmm
01027eb8 g     O .rwdata	00000002 OSTicksPerSec
01005318  w    F .text	00000058 _ZN18SemCreateExceptionD0Ev
01006aa8 g     F .text	00000008 _ZNKSt8ios_base7failure4whatEv
010038a4  w    F .text	00000044 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E
010079f0 g     F .text	0000010c _ZNSt11logic_errorD0Ev
01027da8  w    O .rwdata	00000003 _ZTSPi
01027d60  w    O .rwdata	00000003 _ZTSPf
01025958  w    O .rodata	00000010 _ZTIPKw
01004378  w    F .text	00000058 _ZN13NetworkSenderD0Ev
01027d54  w    O .rwdata	00000003 _ZTSPd
01002ec0  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEEEvT_S9_
010089ec  w    F .text	00000050 _ZNKSs13find_first_ofEPKcm
01002f70  w    F .text	00000050 _ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm
01024880  w    O .rodata	00000014 _ZTV14ARCapException
01023924 g       .text	00000000 OSIntCtxSw
010256f4  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
0100a064  w    F .text	000000e8 _ZNSs6appendERKSsmm
01022eb8 g     F .text	00000044 alt_dcache_flush_all
01014204 g     F .text	00000070 __hi0bits
01027cdc  w    O .rwdata	00000008 _ZTIx
01027df0  w    O .rwdata	00000003 _ZTSPw
01027cb0  w    O .rwdata	00000008 _ZTISt9exception
01002574  w    F .text	00000038 _ZNSt6vectorIcSaIcEE5beginEv
01017c54 g     F .text	000000d8 __fixdfsi
01008a3c  w    F .text	00000010 _ZNKSs4rendEv
010080e4  w    F .text	0000000c _ZNKSs4findERKSsm
01006e58 g     F .text	0000010c _ZNSt8ios_base7failureD0Ev
0102496c  w    O .rodata	00000011 _ZTS14InfraredSender
010031d4  w    F .text	00000084 _ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES8_EET0_T_SA_S9_
010049b8 g     F .text	00000040 _ZN11WifiHandler10configSendEPc
01027d88  w    O .rwdata	00000002 _ZTSm
010041dc g     F .text	00000050 _ZN13NetworkSenderC2EP11WifiHandler
01007c6c  w    F .text	0000014c _ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_
0100ae78  w    F .text	0000000c _ZNSs6insertEmRKSs
01029c5c g     O .bss	00000004 OSTCBFreeList
01027ee0 g       *ABS*	00000000 __ram_rwdata_end
0101f45c g     F .text	0000017c OSSemPendAbort
01001008  w    F .text	00000028 _ZNK18QueuePendException4whatEv
010258a8  w    O .rodata	00000010 _ZTIPi
01004960 g     F .text	00000058 _ZN11WifiHandler12waitForReadyEv
0100da10 g     F .text	00000010 _ZNSt9type_infoD1Ev
01027e44 g     O .rwdata	00000008 alt_dev_list
01029bf0 g     O .bss	00000004 __new_handler
01025348  w    O .rodata	00000011 _ZTSSt12domain_error
010191e0 g     F .text	00000120 write
0100ab20  w    F .text	00000038 _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEmc
010152d4 g     F .text	000000e8 _putc_r
01009640  w    F .text	00000034 _ZNSsC1EPKcmRKSaIcE
01027ebc g     O .rwdata	00000002 OSVersionNbr
0100b01c  w    F .text	0000004c _ZNSs4rendEv
0100da00 g     F .text	00000010 _ZNSt9type_infoD0Ev
010075d8 g     F .text	00000104 _ZNSt13runtime_errorD1Ev
010025ac  w    F .text	0000003c _ZNSt6vectorIcSaIcEE3endEv
010261ec g       *ABS*	00000000 __ram_rodata_end
01000d14  w    F .text	00000050 _ZN8ListenerD1Ev
0101882c g     F .text	000000d4 fstat
01022c90 g     F .text	00000094 alt_up_rs232_write_fd
01027ccc  w    O .rwdata	00000008 _ZTIf
01007dc8  w    F .text	00000008 _ZNSs12_Alloc_hiderC2EPcRKSaIcE
01025174  w    O .rodata	00000010 _ZTIP18SemCreateException
01001ff8 g     F .text	00000088 _ZN15NetworkReceiverC1EP11WifiHandler
01018aa0 g     F .text	00000140 kill
0100921c  w    F .text	00000060 _ZNSsC1ERKSsmmRKSaIcE
010074f0 g     F .text	00000030 _ZNSt12domain_errorC2ERKSs
01027d90  w    O .rwdata	00000003 _ZTSPl
010074c0 g     F .text	00000030 _ZNSt12domain_errorC1ERKSs
01024d68  w    O .rodata	00000014 _ZTV17UARTOpenException
01006a98  w    F .text	00000010 _ZNSt12domain_errorD1Ev
010091e8  w    F .text	00000034 _ZNSsC2IPcEET_S1_RKSaIcE
01027e64 g     O .rwdata	00000004 OSEndiannessTest
0100093c  w    F .text	00000058 _ZN14ARCapExceptionD0Ev
010258e8  w    O .rodata	00000010 _ZTIPs
01014f90 g     F .text	00000120 __pow5mult
0100b3cc  w    F .text	0000014c _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_
01024e38  w    O .rodata	00000014 _ZTV13NetworkSender
01029c14 g     O .bss	00000004 __nlocale_changed
010068cc  w    F .text	00000034 _ZNSt15underflow_errorD0Ev
01018004 g     F .text	00000008 __umodsi3
0100d9f8 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
01024ce4  w    O .rodata	00000014 _ZTV12MotorHandler
0100b878  w    F .text	00000064 _ZNSs7replaceEmmPKc
01007b28  w    F .text	00000004 _ZNSaIcED1Ev
01027d74  w    O .rwdata	00000004 _ZTSPKx
01027e76 g     O .rwdata	00000002 OSFlagGrpSize
01002108 g     F .text	00000050 _ZN15NetworkReceiver11addListenerEcP8os_event
01037988 g       *ABS*	00000000 end
0100ba04 g     F .text	00000004 _ZN9__gnu_cxx12__atomic_addEPVii
01024aa0  w    O .rodata	00000017 _ZTS20QueueCreateException
01007150 g     F .text	00000030 _ZNSt15underflow_errorC2ERKSs
0100b8dc  w    F .text	0000005c _ZNSs7replaceEmmRKSsmm
01002e24  w    F .text	0000004c _ZNKSt6vectorIP8os_eventSaIS1_EE4sizeEv
01008098  w    F .text	00000030 _ZNKSs2atEm
01027de8  w    O .rwdata	00000002 _ZTSc
0100a81c  w    F .text	00000050 _ZNSs6assignERKSsmm
01002350  w    F .text	00000030 _ZNSaIP8os_eventEC1Ev
010094f4  w    F .text	00000034 _ZNSsC1IPcEET_S1_RKSaIcE
01007b64  w    F .text	00000010 _ZNKSs7_M_iendEv
01025184  w    O .rodata	00000016 _ZTSP18SemCreateException
0100df0c g     F .text	00000018 _Unwind_DeleteException
01027d98  w    O .rwdata	00000004 _ZTSPKj
01021b40 g     F .text	00000130 altera_avalon_jtag_uart_init
0101b2f8 g     F .text	000000c8 OS_TaskStat
01007bc4  w    F .text	00000008 _ZNKSs5beginEv
0100bc3c g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
01024718 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0100a978  w    F .text	00000018 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_mc
01033c9c  w    O .bss	00000010 _ZNSs4_Rep20_S_empty_rep_storageE
01025848  w    O .rodata	00000010 _ZTIPm
010227c4 g     F .text	00000088 alt_avalon_timer_sc_init
01006f64 g     F .text	00000008 _ZNKSt13runtime_error4whatEv
010180a4 g     F .text	00000080 __clzsi2
0100f350 g     F .text	000000b4 _snprintf_r
010253e4  w    O .rodata	0000000c _ZTISt13runtime_error
0100c448 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
01022474 g     F .text	000002dc altera_avalon_jtag_uart_write
01000f38 g     F .text	000000a8 _ZN8ListenerC2Ev
010132c0 g     F .text	00000004 __sfp_lock_acquire
01025598  w    O .rodata	00000012 _ZTSSt13bad_exception
0100ea14 g     F .text	000000e4 memchr
0101afc0 g     F .text	00000054 OS_MemClr
01029bd4 g     O .bss	00000004 infraredIn
0100f860 g     F .text	00001eac ___vfprintf_internal_r
010252f0  w    O .rodata	00000014 _ZTVSt12length_error
010239f4 g     F .text	00000310 OSTaskStkInit
01027dd0  w    O .rwdata	00000002 _ZTSh
01013654 g     F .text	00000314 _free_r
0100b814  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_
01008b9c  w    F .text	00000034 _ZNSsC1ERKSaIcE
0101a640 g     F .text	00000194 OS_EventTaskRdy
01024234 g     F .text	000001b0 __call_exitprocs
01007c48  w    F .text	00000008 _ZNSs4_Rep15_M_set_sharableEv
01029c60 g     O .bss	00000001 OSCPUUsage
0100381c  w    F .text	00000044 _ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type
01027ca8  w    O .rwdata	00000004 _ZNSs4_Rep11_S_max_sizeE
010016d4 g     F .text	00000040 _ZN12MotorHandler12getSpeedFromEPc
01001fb8 g     F .text	00000040 _ZN15NetworkReceiver6updateEv
01029c18 g     O .bss	00000004 __mlocale_changed
01006a10  w    F .text	00000010 _ZNSt12length_errorD1Ev
01002794  w    F .text	00000038 _ZNSt12_Vector_baseIP8os_eventSaIS1_EEC2ERKS2_
01027e24 g     O .rwdata	00000004 __malloc_sbrk_base
010001c0 g     F .text	0000004c _start
01025400  w    O .rodata	0000000c _ZTISt11logic_error
010004e0 g     F .text	00000164 _Z29infrared_receiver_update_taskPv
01007c00  w    F .text	00000008 _ZNKSs4dataEv
01029c94 g     O .bss	00000004 _alt_tick_rate
01007b20  w    F .text	00000004 _ZNSaIwED2Ev
01004ed8 g     F .text	00000088 _ZN11WifiHandler7tcpSendEPcS0_
0101e168 g     F .text	00000320 OSQPend
01002158 g     F .text	000000fc _Z28network_receiver_update_taskPv
01025a9c  w    O .rodata	0000000d _ZTSSt9type_info
0100c6f8 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD2Ev
0100033c g     F .text	00000044 _ZN16InfraredReceiver5checkEj
01007bf4  w    F .text	0000000c _ZNKSs8capacityEv
01007b44  w    F .text	0000000c _ZNSs7_M_dataEPc
01021374 g     F .text	0000014c OSTimeDly
01007120 g     F .text	00000030 _ZNSt15underflow_errorC1ERKSs
0100bafc g     F .text	00000020 __cxa_pure_virtual
01014b20 g     F .text	0000014c __lshift
01007b74  w    F .text	00000018 _ZNKSs8_M_limitEmm
010255c8  w    O .rodata	00000014 _ZTVSt9bad_alloc
01029c98 g     O .bss	00000004 _alt_nticks
0100f200 g     F .text	0000001c signal
01002c28  w    F .text	00000024 _ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv
01018f44 g     F .text	00000120 read
0100a8ac  w    F .text	000000cc _ZNSs14_M_replace_auxEmmmc
01021940 g     F .text	00000080 alt_sys_init
01027dfc  w    O .rwdata	00000003 _ZTSPb
010099d4  w    F .text	000000fc _ZNSsC2ERKSs
01025908  w    O .rodata	00000010 _ZTIPh
01000834  w    F .text	00000058 _ZN18QueuePostExceptionD1Ev
01007c08  w    F .text	00000008 _ZNKSs13get_allocatorEv
01025968  w    O .rodata	00000010 _ZTIPw
01025a10  w    O .rodata	0000000c _ZTISt10bad_typeid
010240fc g     F .text	00000134 __register_exitproc
010255dc  w    O .rodata	0000000d _ZTSSt9bad_alloc
01029c61 g     O .bss	00000001 OSTaskCtr
0100f478 g     F .text	000000f0 strncmp
01003db0  w    F .text	00000300 _ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
01022ab4 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
01008004  w    F .text	00000094 _ZNKSs4findEPKcmm
01027d14  w    O .rwdata	00000008 _ZTIh
0100ab58  w    F .text	00000050 _ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_
010214c0 g     F .text	00000174 OSTimeDlyHMSM
01025818  w    O .rodata	00000010 _ZTIPKx
01014c6c g     F .text	000001e8 __multiply
0102204c g     F .text	00000074 altera_avalon_jtag_uart_close
010261ec g       *ABS*	00000000 __ram_rwdata_start
0100e074 g     F .text	000000f8 _Unwind_SjLj_RaiseException
0102471c g       *ABS*	00000000 __ram_rodata_start
010087d0  w    F .text	00000060 _ZNKSs7compareERKSs
010344ac g     O .bss	00000028 __malloc_current_mallinfo
01002da8  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv
0100e018 g     F .text	0000005c _Unwind_SjLj_Resume
01027e6a g     O .rwdata	00000002 OSEventMax
0100aef4  w    F .text	00000014 _ZNSs7_M_leakEv
01024d3c  w    O .rodata	00000018 _ZTI17UARTOpenException
01014818 g     F .text	0000017c __d2b
01027cf4  w    O .rwdata	00000008 _ZTIj
0101f5d8 g     F .text	00000128 OSSemPost
01024958  w    O .rodata	00000014 _ZTV14InfraredSender
01027cc4  w    O .rwdata	00000008 _ZTId
0100da20 g     F .text	00000010 _ZNSt9type_infoD2Ev
0101a1c4 g     F .text	000000e4 OSSchedUnlock
0100d810 g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
01006a54  w    F .text	00000010 _ZNSt16invalid_argumentD1Ev
0100069c  w    F .text	00000028 _ZNK16ADCOpenException4whatEv
01007bcc  w    F .text	00000010 _ZNKSs3endEv
01025878  w    O .rodata	00000010 _ZTIPKj
01025694  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
01002d64  w    F .text	00000044 _ZNKSt6vectorIP8os_eventSaIS1_EE5beginEv
0100bb1c g     F .text	00000008 _ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv
01007ef0  w    F .text	0000002c _ZNSs9_M_assignEPcmc
010030a4  w    F .text	0000007c _ZNSt6vectorIcSaIcEED1Ev
010259e0  w    O .rodata	0000000c _ZTIN10__cxxabiv123__fundamental_type_infoE
010219f8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01023f2c g     F .text	000000f4 alt_get_fd
01002bdc  w    F .text	0000004c _ZNKSt6vectorIcSaIcEE4sizeEv
01029c64 g     O .bss	00000004 OSMemFreeList
010010b0  w    F .text	00000058 _ZN18QueuePendExceptionD0Ev
0101a318 g     F .text	000000ac OSStatInit
01003988  w    F .text	000002f4 _ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc
010026d4  w    F .text	00000038 _ZNSt12_Vector_baseIcSaIcEEC2ERKS0_
01008220  w    F .text	00000064 _ZNKSs5rfindEcm
01007b24  w    F .text	00000004 _ZNSaIcEC2Ev
0101ccf8 g     F .text	000000d4 OSFlagQuery
01018570 g     F .text	000000c8 __fpcmp_parts_d
01002a08  w    F .text	00000028 _ZSt13__destroy_auxIPcEvT_S1_11__true_type
01025210  w    O .rodata	00000014 _ZTSSt15underflow_error
01001b7c g     F .text	0000014c _Z25motor_handler_update_taskPv
01027ea0 g     O .rwdata	00000002 OSTaskCreateExtEn
010086d4  w    F .text	00000010 _ZNKSs13find_first_ofEcm
01015ea0 g     F .text	00000070 _close_r
01001660 g     F .text	00000074 _ZN12MotorHandler9configureEv
01024a34  w    O .rodata	00000015 _ZTS18QueuePendException
01027d5c  w    O .rwdata	00000004 _ZTSPKf
010052b0  w    F .text	00000028 _ZNK18SemCreateException4whatEv
01027dd4  w    O .rwdata	00000004 _ZTSPKa
0100eaf8 g     F .text	00000074 memcmp
0101a624 g     F .text	0000001c OS_Dummy
01021aa8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01037988 g       *ABS*	00000000 __alt_stack_base
01021af0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0100baa8 g     F .text	00000034 _ZNSt9bad_allocD0Ev
01029be0 g     O .bss	00000004 wifi
0100d8bc g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
0100c77c g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD2Ev
01024cf8  w    O .rodata	0000000f _ZTS12MotorHandler
01006988  w    F .text	00000010 _ZNSt11range_errorD1Ev
010029ac  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv
01011730 g     F .text	0000013c __swsetup_r
01025278  w    O .rodata	00000010 _ZTSSt11range_error
01035c74 g     O .bss	000001e0 OSQTbl
0100e23c g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
0101765c g     F .text	00000258 __divdf3
01013438 g     F .text	000000f0 __sfp
0101467c g     F .text	00000058 __copybits
0102533c  w    O .rodata	0000000c _ZTISt12domain_error
01025ac0  w    O .rodata	0000000c _ZTSSt8bad_cast
0100d9d8 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0100bbe8 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD2Ev
0100b7f8  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_
01000a48 g     F .text	00000058 _ZN14InfraredSender4sendEv
01025238  w    O .rodata	0000000c _ZTISt14overflow_error
010247f8  w    O .rodata	00000016 _ZTSP18QueuePostException
010261ec g     O .rwdata	00000408 __malloc_av_
010132cc g     F .text	00000004 __sinit_lock_release
01029c68 g     O .bss	00000004 OSTCBHighRdy
01017298 g     F .text	000003c4 __muldf3
01004678 g     F .text	00000048 _ZN11WifiHandler15configReadStartEv
01015b0c g     F .text	00000060 __sread
01025584  w    O .rodata	00000014 _ZTVSt9exception
01029c6c g     O .bss	00000004 OSQFreeList
01022a20 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
01023e0c g     F .text	00000120 alt_find_file
0100b95c  w    F .text	00000030 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs
0100c4b4 g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
01029be4 g     O .bss	00000004 networkOut
01000994  w    F .text	00000058 _ZN14ARCapExceptionD1Ev
0100ae84  w    F .text	00000014 _ZNSs5clearEv
01022efc g     F .text	000000b4 alt_dev_llist_insert
01019468 g     F .text	00000108 __malloc_lock
01019124 g     F .text	000000bc sbrk
01029be8 g     O .bss	00000004 networkIn
010060fc g     F .text	00000190 _ZSt20__throw_domain_errorPKc
01024980  w    O .rodata	0000000c _ZTI14InfraredSender
01005abc g     F .text	00000190 _ZSt19__throw_logic_errorPKc
010256c8  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0100d6e8 g     F .text	00000074 __cxa_throw
01019770 g     F .text	00000144 OSEventNameSet
01013038 g     F .text	000001fc _fflush_r
0100ddd0 g     F .text	00000010 _Unwind_SetIP
010085d8  w    F .text	00000088 _ZNKSs13find_first_ofEPKcmm
01015dec g     F .text	000000b4 _calloc_r
01004f60 g     F .text	00000078 _ZN11WifiHandler7tcpTestEv
01029c70 g     O .bss	00000001 OSRdyGrp
01027cfc  w    O .rwdata	00000008 _ZTIi
01008284  w    F .text	00000010 _ZNKSs12find_last_ofEcm
010252d0  w    O .rodata	0000000c _ZTISt12length_error
01007c3c  w    F .text	0000000c _ZNSs4_Rep13_M_set_leakedEv
01001538 g     F .text	00000034 _Z23motor_handler_test_taskPv
010257f8  w    O .rodata	00000010 _ZTIPKy
01009674  w    F .text	00000034 _ZNSsC2EPKcmRKSaIcE
0100628c g     F .text	00000190 _ZSt19__throw_range_errorPKc
01007460 g     F .text	00000030 _ZNSt16invalid_argumentC1ERKSs
010028f0  w    F .text	00000058 _ZNSt6vectorIP8os_eventSaIS1_EEixEm
0100227c  w    F .text	00000038 _ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv
01029bd4 g       *ABS*	00000000 __bss_start
01008660  w    F .text	0000000c _ZNKSs13find_first_ofERKSsm
01008e1c  w    F .text	000000a0 _ZNKSs7compareEmmRKSs
0100ecec g     F .text	00000098 memset
01000380 g     F .text	00000040 _ZN16InfraredReceiver6updateEv
01007c50  w    F .text	00000014 _ZNSs4_Rep26_M_set_length_and_sharableEm
01007ba8  w    F .text	0000000c _ZNSs12_S_empty_repEv
010053c8 g     F .text	000004dc main
01001de0  w    F .text	00000058 _ZN17UARTOpenExceptionD0Ev
01027d4c  w    O .rwdata	00000002 _ZTSe
010253d0  w    O .rodata	00000012 _ZTSSt13runtime_error
01029c2c g     O .bss	00000004 alt_envp
01029c0c g     O .bss	00000004 __malloc_max_total_mem
01002894  w    F .text	0000005c _ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEplERKl
010259ec  w    O .rodata	00000014 _ZTVSt10bad_typeid
01021a50 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01024d54  w    O .rodata	00000014 _ZTS17UARTOpenException
01027cbc  w    O .rwdata	00000008 _ZTIe
01015d58 g     F .text	0000001c __swbuf
01005980 g     F .text	00000034 _ZSt21__throw_bad_exceptionv
0100dd3c g     F .text	00000008 __cxa_get_globals_fast
01026088 g     O .rodata	00000100 OSUnMapTbl
01024840  w    O .rodata	00000018 _ZTI14ARCapException
0100285c  w    F .text	00000038 _ZNSt6vectorIP8os_eventSaIS1_EE5beginEv
01027e9a g     O .rwdata	00000002 OSSemEn
010032a8  w    F .text	00000064 _ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIcEEPT_PKS3_S6_S4_
01025384  w    O .rodata	00000016 _ZTSNSt8ios_base7failureE
0101c950 g     F .text	000003a8 OSFlagPost
0100230c  w    F .text	00000024 _ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv
01025aac  w    O .rodata	00000014 _ZTVSt8bad_cast
01015a20 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01002254  w    F .text	00000028 _ZnwmPv
01027d64  w    O .rwdata	00000002 _ZTSf
01002380  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorIP8os_eventED2Ev
01016020 g     F .text	00000014 fclose
0101a7d4 g     F .text	00000110 OS_EventTaskWait
0102bc9c g     O .bss	00002000 task2_stk
0100f5a0 g     F .text	00000244 _strtol_r
0101b3c0 g     F .text	000000c8 OS_TaskStatStkChk
010377f8 g     O .bss	00000190 _atexit0
01025938  w    O .rodata	00000010 _ZTIPKc
01020688 g     F .text	00000170 OSTaskDelReq
010069cc  w    F .text	00000010 _ZNSt12out_of_rangeD1Ev
01002330  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev
01011a84 g     F .text	000015b4 _dtoa_r
0100e2d4 g     F .text	00000740 _malloc_r
0100960c  w    F .text	00000034 _ZNSsC2IPKcEET_S2_RKSaIcE
01025838  w    O .rodata	00000010 _ZTIPKm
0100020c g     F .text	00000030 _ZN16InfraredReceiver11setListenerEP8os_event
01008bd0  w    F .text	00000034 _ZNSsC2ERKSaIcE
01027e50 g     O .rwdata	00000004 alt_errno
0100b84c  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_
010043d0  w    F .text	00000058 _ZN13NetworkSenderD1Ev
0101a2a8 g     F .text	00000070 OSStart
010071b0 g     F .text	00000030 _ZNSt14overflow_errorC2ERKSs
0102dc9c g     O .bss	00002000 task3_stk
01006954  w    F .text	00000034 _ZNSt11range_errorD0Ev
0100f088 g     F .text	00000010 _init_signal
0101940c g     F .text	0000005c __env_unlock
01025718  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
01029bd8 g     O .bss	00000004 infraredOut
01013ecc g     F .text	000000b8 _fwalk
01020b74 g     F .text	00000218 OSTaskResume
0101d86c g     F .text	000000fc OSMemQuery
01027eac g     O .rwdata	00000002 OSTaskStatEn
010006c4  w    F .text	00000040 _ZN14ARCapExceptionC2Ev
01027e86 g     O .rwdata	00000002 OSMemMax
010084e8  w    F .text	000000e4 _ZNKSs12find_last_ofEPKcmm
0101e784 g     F .text	00000188 OSQPostFront
0100ba7c g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
010151d0 g     F .text	00000104 putc
01017f3c g     F .text	00000060 __divsi3
01001d88  w    F .text	00000058 _ZN12MotorHandlerD1Ev
010248e4  w    O .rodata	00000014 _ZTV16ADCOpenException
01029c71 g     O .bss	00000003 OSRdyTbl
01027e60 g     O .rwdata	00000002 OSDebugEn
01025f54 g     O .rodata	00000014 __thenan_df
01025798  w    O .rodata	00000010 _ZTIPKe
01013528 g     F .text	0000012c _malloc_trim_r
0102471c g       *ABS*	00000000 __CTOR_END__
01000d64  w    F .text	00000058 _ZN14InfraredSenderD1Ev
01027e78 g     O .rwdata	00000002 OSFlagNodeSize
0100a14c  w    F .text	000000bc _ZNSs6appendERKSs
01027ec0 g     O .rwdata	00000002 OSTmrCfgMax
01009d70  w    F .text	00000088 _ZNSs9push_backEc
01015b6c g     F .text	000000bc strcmp
010258d8  w    O .rodata	00000010 _ZTIPKs
010090e4  w    F .text	00000020 _ZNSs13_S_copy_charsEPcPKcS1_
0101db8c g     F .text	00000214 OSQCreate
01025948  w    O .rodata	00000010 _ZTIPc
010207f8 g     F .text	000001b8 OSTaskNameGet
0102471c g       *ABS*	00000000 __flash_rodata_start
0101e90c g     F .text	00000234 OSQPostOpt
0101a3c4 g     F .text	00000240 OSTimeTick
01002d20  w    F .text	00000044 _ZNKSt6vectorIP8os_eventSaIS1_EE3endEv
01027ea8 g     O .rwdata	00000002 OSTaskMax
01006d54 g     F .text	00000104 _ZNSt8ios_base7failureD2Ev
0102471c g       *ABS*	00000000 __DTOR_LIST__
01006bb4 g     F .text	000000d0 _ZNSt8ios_base7failureC1ERKSs
0101ee2c g     F .text	00000114 OSSemCreate
01027ecc g     O .rwdata	00000002 OSTmrWheelSize
01001cc8  w    F .text	00000028 _ZNK17UARTOpenException4whatEv
010249f4  w    O .rodata	00000010 _ZTIP18QueuePendException
01003d70  w    F .text	00000040 _ZNSt12_Vector_baseIP8os_eventSaIS1_EE11_M_allocateEm
01022d24 g     F .text	00000040 alt_up_rs232_open_dev
010096dc  w    F .text	00000060 _ZNSsC1EPKcRKSaIcE
010011b8  w    F .text	00000058 _ZN20QueueCreateExceptionD1Ev
0100422c g     F .text	0000014c _Z26network_sender_update_taskPv
0101793c g     F .text	00000088 __nedf2
0100dbe8 g     F .text	00000010 _ZNSt8bad_castD2Ev
01027ea2 g     O .rwdata	00000002 OSTaskDelEn
01027df4  w    O .rwdata	00000002 _ZTSw
01027d48  w    O .rwdata	00000003 _ZTSPe
010073a0 g     F .text	00000030 _ZNSt12out_of_rangeC1ERKSs
0101f700 g     F .text	00000130 OSSemQuery
0101dda0 g     F .text	00000300 OSQDel
0101e488 g     F .text	0000017c OSQPendAbort
0102190c g     F .text	00000034 alt_irq_init
01027de4  w    O .rwdata	00000003 _ZTSPc
010035c8  w    F .text	00000084 _ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_
01009124  w    F .text	000000c4 _ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag
010190c4 g     F .text	00000060 alt_release_fd
010251b4  w    O .rodata	00000015 _ZTS18SemCreateException
01002684  w    F .text	00000050 _ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_
0100d888 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0100c604 g     F .text	000000b0 _ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj
0100add8  w    F .text	00000050 _ZNSs6insertEmPKc
01027c98 g     O .rwdata	00000004 _ZN16InfraredReceiver3HITE
01000b34 g     F .text	000000e8 _Z27infrared_sender_update_taskPv
01025f68 g     O .rodata	00000100 __clz_tab
010078ec g     F .text	00000104 _ZNSt11logic_errorD2Ev
0100ae98  w    F .text	0000005c _ZNSs12_M_leak_hardEv
01029c1c g     O .bss	00000004 _PathLocale
010253f0  w    O .rodata	00000010 _ZTSSt11logic_error
01024a70  w    O .rodata	00000018 _ZTSP20QueueCreateException
01006f6c g     F .text	00000104 _ZNSt11logic_errorD1Ev
010240b0 g     F .text	00000014 atexit
0102526c  w    O .rodata	0000000c _ZTISt11range_error
010071e0 g     F .text	00000030 _ZNSt11range_errorC1ERKSs
01015d74 g     F .text	00000078 _write_r
010049f8 g     F .text	00000074 _ZN11WifiHandler18setDestinationPortE13WifiSetupType
01024d24  w    O .rodata	00000015 _ZTSP17UARTOpenException
010023a0  w    F .text	00000030 _ZNSaIP8os_eventED1Ev
0101a138 g     F .text	0000008c OSSchedLock
0101402c g     F .text	0000001c setlocale
01006998  w    F .text	00000034 _ZNSt12out_of_rangeD0Ev
0100de04 g     F .text	00000008 _Unwind_GetTextRelBase
01025668  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0100dcf8 g     F .text	00000044 __cxa_call_terminate
0101bc28 g     F .text	0000013c OSFlagCreate
01003580  w    F .text	00000048 _ZSt19__copy_backward_auxIPP8os_eventS2_ET0_T_S4_S3_
01027ce4  w    O .rwdata	00000008 _ZTIm
01004dc8 g     F .text	00000070 _Z27wifi_handler_http_test_taskPv
01027e2c g     O .rwdata	00000004 _impure_ptr
01029c24 g     O .bss	00000004 alt_argc
01025778  w    O .rodata	00000020 _ZTVN10__cxxabiv123__fundamental_type_infoE
01002b20  w    F .text	00000044 _ZNKSt6vectorIcSaIcEE5beginEv
01023074 g     F .text	00000064 _do_dtors
01027e72 g     O .rwdata	00000002 OSEventMultiEn
010023f4  w    F .text	00000038 _ZNSaIP8os_eventEC1ERKS1_
01027c9c  w    O .rwdata	00000008 _ZTI8Listener
0102498c  w    O .rodata	0000000a _ZTS8Listener
010051b4 g     F .text	000000fc _ZN11WifiHandlerC2Ev
0100301c  w    F .text	00000038 _ZN9__gnu_cxx13new_allocatorIP8os_eventE10deallocateEPS2_m
0100b284  w    F .text	00000114 _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_
0101bd64 g     F .text	000002a8 OSFlagDel
01029c74 g     O .bss	00000004 OSEventFreeList
01000020 g       .exceptions	00000000 alt_irq_entry
01007ec4  w    F .text	0000002c _ZNKSs8_M_checkEmPKc
0100894c  w    F .text	00000050 _ZNKSs17find_first_not_ofEPKcm
01003d04  w    F .text	0000006c _ZN9__gnu_cxx13new_allocatorIP8os_eventE8allocateEmPKv
010019f8 g     F .text	00000184 _ZN12MotorHandlerC2Ev
010080c8  w    F .text	00000010 _ZNKSs5emptyEv
01014398 g     F .text	00000080 __ulp
010159b0 g     F .text	00000040 __isinfd
01002464  w    F .text	00000024 _ZNSt12_Vector_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv
0100ddf4 g     F .text	00000008 _Unwind_FindEnclosingFunction
0101c2a4 g     F .text	00000644 OSFlagPend
01027ebe g     O .rwdata	00000002 OSTmrEn
01007db8  w    F .text	00000010 _ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_
01013384 g     F .text	00000018 __fp_unlock_all
01025918  w    O .rodata	00000010 _ZTIPKa
01007b10  w    F .text	00000004 _ZNSaIwEC1ERKS_
01000e90 g     F .text	000000a8 _ZN8ListenerC1Ev
0100abf8  w    F .text	0000006c _ZNSs5eraseEmm
01027e3c g     O .rwdata	00000008 alt_fs_list
010081f4  w    F .text	0000000c _ZNKSs5rfindERKSsm
01004c74 g     F .text	00000034 _ZN11WifiHandler6unlockEv
01009408  w    F .text	000000ec _ZNSsC2ERKSsmm
010087c4  w    F .text	0000000c _ZNKSs16find_last_not_ofERKSsm
0101b1c4 g     F .text	00000080 OS_StrCopy
01025888  w    O .rodata	00000010 _ZTIPj
010229cc g     F .text	00000054 alt_up_rs232_enable_read_interrupt
01004a6c g     F .text	00000114 _ZN11WifiHandler5setupE13WifiSetupType
0100dde0 g     F .text	0000000c _Unwind_GetLanguageSpecificData
01024998  w    O .rodata	00000014 _ZTV8Listener
01006a20  w    F .text	00000034 _ZNSt16invalid_argumentD0Ev
0100156c g     F .text	00000088 _ZN12MotorHandler4moveEccPKc
01022b44 g     F .text	00000048 alt_up_rs232_write_data
0100d550 g     F .text	00000118 __cxa_begin_catch
01027dc8  w    O .rwdata	00000004 _ZTSPKh
01027e88 g     O .rwdata	00000002 OSMemNameSize
0100c518 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0100d45c g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
01025998  w    O .rodata	00000010 _ZTIPKv
01027d44  w    O .rwdata	00000004 _ZTSPKe
01023db4 g     F .text	0000001c OSInitHookEnd
010046fc g     F .text	000000f4 _ZN11WifiHandler5writeEPc
010252dc  w    O .rodata	00000011 _ZTSSt12length_error
01000020 g       *ABS*	00000000 __ram_exceptions_start
01024a04  w    O .rodata	00000016 _ZTSP18QueuePendException
01027eb4 g     O .rwdata	00000002 OSTCBPrioTblMax
01013f98 g     F .text	00000010 localeconv
01027e0c  w    O .rwdata	00000002 _ZTSv
01029bdc g     O .bss	00000004 motor
01001874 g     F .text	00000184 _ZN12MotorHandlerC1Ev
01005918 g     F .text	00000034 _ZSt16__throw_bad_castv
01027eb0 g     O .rwdata	00000002 OSTaskStatStkChkEn
0100ba48 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
0100260c  w    F .text	00000050 _ZN9__gnu_cxxneIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_
01027e10 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
01000744  w    F .text	00000040 _ZN18QueuePostExceptionC1Ev
01027db8  w    O .rwdata	00000002 _ZTSt
0100bb24 g     F .text	00000080 _ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj
010258c8  w    O .rodata	00000010 _ZTIPt
01025224  w    O .rodata	00000014 _ZTVSt15underflow_error
01004864 g     F .text	0000003c _ZN11WifiHandler8testUartEv
0100bf8c g     F .text	000004bc _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
01027e84 g     O .rwdata	00000002 OSMemEn
0100da70 g     F .text	00000134 __cxa_allocate_exception
010257b8  w    O .rodata	00000010 _ZTIPKd
01027e8e g     O .rwdata	00000002 OSMutexEn
01025a70  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
010258f8  w    O .rodata	00000010 _ZTIPKh
01024828  w    O .rodata	00000015 _ZTS18QueuePostException
0100ba9c g     F .text	0000000c _ZSt15set_new_handlerPFvvE
0100aad8  w    F .text	00000048 _ZNSsaSEc
01027ee0 g       *ABS*	00000000 _edata
01002efc  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES3_EvT_S9_SaIT0_E
01024d14  w    O .rodata	00000010 _ZTIP17UARTOpenException
010034f4  w    F .text	0000008c _ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIP8os_eventEEPT_PKS5_S8_S6_
01037988 g       *ABS*	00000000 _end
01027cb8 g     O .rwdata	00000001 _ZSt7nothrow
010077e0 g     F .text	0000010c _ZNSt13runtime_errorD0Ev
01029c78 g     O .bss	00000001 OSIntNesting
0100ce98 g     F .text	000004e0 __gxx_personality_sj0
01008ebc  w    F .text	0000009c _ZNSs4_Rep8_M_cloneERKSaIcEm
01002488  w    F .text	0000005c _ZN9__gnu_cxx13new_allocatorIcE9constructEPcRKc
01001160  w    F .text	00000058 _ZN20QueueCreateExceptionD0Ev
0100146c g     F .text	000000cc _ZN12MotorHandler4sendEcPKc
010001c0 g       *ABS*	00000000 __ram_exceptions_end
01027dac  w    O .rwdata	00000002 _ZTSi
010220c0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01021634 g     F .text	00000210 OSTimeDlyResume
0100346c  w    F .text	00000044 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_
010040b0  w    F .text	00000088 _ZNSt6vectorIP8os_eventSaIS1_EE9push_backERKS1_
0101c150 g     F .text	00000154 OSFlagNameSet
01007b18  w    F .text	00000004 _ZNSaIcEC1ERKS_
01027d70  w    O .rwdata	00000002 _ZTSy
0100c5b8 g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0100ba28 g     F .text	00000010 _ZNSt9exceptionD1Ev
01020d8c g     F .text	000001fc OSTaskStkChk
01025748  w    O .rodata	00000022 _ZTSN10__cxxabiv117__pbase_type_infoE
01029bec g     O .bss	00000004 _ZN14__gnu_internal12atomic_mutexE
01027e8a g     O .rwdata	00000002 OSMemSize
0102539c  w    O .rodata	0000000c _ZTINSt8ios_base7failureE
01027d94  w    O .rwdata	00000002 _ZTSl
01015a90 g     F .text	0000007c __swrite
01027d3c  w    O .rwdata	00000008 _ZTIv
01027e20 g     O .rwdata	00000004 __malloc_trim_threshold
01027dc0  w    O .rwdata	00000003 _ZTSPs
01023904 g     F .text	00000020 altera_nios2_qsys_irq_init
01008350  w    F .text	00000130 _ZNSs4_Rep9_S_createEmmRKSaIcE
01029c7c g     O .bss	00000004 OSTCBCur
010240c4 g     F .text	00000038 exit
0100dd94 g     F .text	00000018 _Unwind_SetGR
0100a208  w    F .text	00000004 _ZNSspLERKSs
01027e8c g     O .rwdata	00000002 OSMemTblSize
01013e04 g     F .text	000000c8 _fwalk_reent
0102535c  w    O .rodata	00000014 _ZTVSt12domain_error
01014994 g     F .text	0000018c __mdiff
0100d3a0 g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
0100a990  w    F .text	00000068 _ZNSs7replaceEmmmc
01002744  w    F .text	00000050 _ZNSt12_Vector_baseIP8os_eventSaIS1_EE12_Vector_implC1ERKS2_
01017f9c g     F .text	00000060 __modsi3
0100badc g     F .text	00000010 _ZNSt9bad_allocD1Ev
02000000 g       *ABS*	00000000 __alt_data_end
0100270c  w    F .text	00000038 _ZNSt6vectorIcSaIcEEC1ERKS0_
01000020 g     F .exceptions	00000000 alt_exception
01002c74  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEEvT_S7_
010132c4 g     F .text	00000004 __sfp_lock_release
01027d58  w    O .rwdata	00000002 _ZTSd
01027cec  w    O .rwdata	00000008 _ZTIl
0100d910 g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
01019f68 g     F .text	00000054 OSInit
010255ac  w    O .rodata	0000000c _ZTISt13bad_exception
01000000 g       *ABS*	00000000 __alt_mem_sdram
010211b4 g     F .text	00000144 OSTaskQuery
0100330c  w    F .text	00000048 _ZSt10__copy_auxIPcS0_ET0_T_S2_S1_
0101ecc0 g     F .text	000000ac OS_QInit
0101b244 g     F .text	00000058 OS_StrLen
0101d65c g     F .text	00000120 OSMemNameSet
01025b5a g     O .rodata	00000101 _ctype_
0100265c  w    F .text	00000028 _ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEdeEv
0102284c g     F .text	00000040 alt_up_de0_nano_adc_open_dev
01006a64  w    F .text	00000034 _ZNSt12domain_errorD0Ev
010022b4  w    F .text	00000028 _ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv
01027ea6 g     O .rwdata	00000002 OSTaskProfileEn
0100c708  w    F .text	00000030 _ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj
01029c80 g     O .bss	00000004 OSTime
01007f4c  w    F .text	00000008 _ZNKSs5c_strEv
01002cb0  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcEvT_S7_SaIT0_E
01000cc4  w    F .text	00000050 _ZN8ListenerD0Ev
01025828  w    O .rodata	00000010 _ZTIPx
010007dc  w    F .text	00000058 _ZN18QueuePostExceptionD0Ev
01001030  w    F .text	00000040 _ZN20QueueCreateExceptionC1Ev
0100bc4c g     F .text	00000100 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
01035e54 g     O .bss	00000800 OSTaskIdleStk
010159f0 g     F .text	00000030 __isnand
01018800 g     F .text	0000002c _exit
01006c84 g     F .text	000000d0 _ZNSt8ios_base7failureC2ERKSs
01004508 g     F .text	00000170 _ZN11WifiHandler9readUntilEPc
01022d64 g     F .text	00000154 alt_alarm_start
0101c00c g     F .text	00000144 OSFlagNameGet
010065ac g     F .text	00000190 _ZSt20__throw_out_of_rangePKc
01008c04  w    F .text	00000090 _ZNKSs7compareEmmPKcm
0100a9f8  w    F .text	00000060 _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc
01021844 g     F .text	00000064 OSTimeGet
0101800c g     F .text	00000098 __muldi3
0100dd68 g     F .text	00000018 _Unwind_GetGR
0100dd44 g     F .text	00000008 __cxa_get_globals
01003120  w    F .text	0000006c _ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIcEEPT_PKS3_S6_S4_
01014048 g     F .text	00000194 __smakebuf_r
01027e1c g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0100a024  w    F .text	00000040 _ZNSspLEPKc
0100f404 g     F .text	00000074 strlen
01005c4c g     F .text	00000190 _ZSt23__throw_underflow_errorPKc
0100f024 g     F .text	00000064 _init_signal_r
01027e14  w    O .rwdata	00000008 _ZTISt9type_info
01002080 g     F .text	00000088 _ZN15NetworkReceiverC2EP11WifiHandler
01023d44 g     F .text	0000001c OSTaskSwHook
01023574 g     F .text	00000188 open
010047f0 g     F .text	00000074 _ZN11WifiHandler11configEnterEv
010257a8  w    O .rodata	00000010 _ZTIPe
01007c18  w    F .text	0000000c _ZNSs4_Rep12_S_empty_repEv
01007c10  w    F .text	00000008 _ZNSs12_Alloc_hiderC1EPcRKSaIcE
01036654 g     O .bss	00000b40 OSEventTbl
01017a4c g     F .text	00000088 __gedf2
010255b8  w    O .rodata	0000000d _ZTSSt9exception
01037194 g     O .bss	00000510 OSTCBTbl
010253a8  w    O .rodata	00000014 _ZTVSt13runtime_error
01001714 g     F .text	00000160 _ZN12MotorHandler5parseEPc
010037cc  w    F .text	00000050 _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
0101f830 g     F .text	00000104 OSSemSet
01025a00  w    O .rodata	0000000f _ZTSSt10bad_typeid
010080d8  w    F .text	0000000c _ZNKSs6lengthEv
01009104  w    F .text	00000020 _ZNSs13_S_copy_charsEPcS_S_
01007520 g     F .text	00000008 _ZNKSt11logic_error4whatEv
01009548  w    F .text	000000c4 _ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag
0100ba18 g     F .text	00000010 _ZNSt9exceptionD0Ev
0100b0bc  w    F .text	00000070 _ZNSs6resizeEmc
0102316c g     F .text	00000030 alt_icache_flush_all
01000fe0  w    F .text	00000028 _ZNK20QueueCreateException4whatEv
01025370  w    O .rodata	00000014 _ZTVNSt8ios_base7failureE
01027d7c  w    O .rwdata	00000002 _ZTSx
010048a0 g     F .text	00000058 _ZN11WifiHandler15configSendStartEPc
01002aa8  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_
0100d7f0 g     F .text	00000010 _ZNSt10bad_typeidD1Ev
0100ddfc g     F .text	00000008 _Unwind_GetDataRelBase
0100b830  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_
01027ed4 g     O .rwdata	00000004 alt_priority_mask
0100ac64  w    F .text	00000174 _ZNSs6insertEmPKcm
0101ef40 g     F .text	000002a0 OSSemDel
01029c84 g     O .bss	00000004 OSFlagFreeList
01003860  w    F .text	00000044 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
01027d0c  w    O .rwdata	00000008 _ZTIs
01027e6c g     O .rwdata	00000002 OSEventNameSize
01000644  w    F .text	00000030 _ZNSt9exceptionC2Ev
01007b14  w    F .text	00000004 _ZNSaIwEC2ERKS_
0101170c g     F .text	00000024 __vfprintf_internal
01007be8  w    F .text	0000000c _ZNKSs8max_sizeEv
01029c88 g     O .bss	00000001 OSStatRdy
010376a4 g     O .bss	00000054 OSTCBPrioTbl
01019360 g     F .text	000000ac __env_lock
01002dcc  w    F .text	00000058 _ZN9__gnu_cxxmiIPKP8os_eventS4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE
01025928  w    O .rodata	00000010 _ZTIPa
01027eb2 g     O .rwdata	00000002 OSTaskSwHookEn
01006ab0 g     F .text	00000104 _ZNSt8ios_base7failureD1Ev
01027dec  w    O .rwdata	00000004 _ZTSPKw
0100d800 g     F .text	00000010 _ZNSt10bad_typeidD2Ev
010171a4 g     F .text	00000080 __subdf3
01000aa0 g     F .text	00000060 _ZN14InfraredSender5parseEPc
01008480  w    F .text	00000004 _ZNSs4_Rep10_M_destroyERKSaIcE
01008d5c  w    F .text	000000c0 _ZNKSs7compareEmmRKSsmm
010085cc  w    F .text	0000000c _ZNKSs12find_last_ofERKSsm
0100973c  w    F .text	00000060 _ZNSsC2EPKcRKSaIcE
01002adc  w    F .text	00000044 _ZNKSt6vectorIcSaIcEE3endEv
01007c64  w    F .text	00000008 _ZNSs4_Rep10_M_refdataEv
01024a88  w    O .rodata	00000018 _ZTI20QueueCreateException
01014274 g     F .text	000000c4 __lo0bits
0100b068  w    F .text	00000054 _ZNSs6rbeginEv
0100aa58  w    F .text	00000048 _ZNSs6insertEmmc
01027ed8 g     O .rwdata	00000008 alt_alarm_list
010259b8  w    O .rodata	00000028 _ZTSN10__cxxabiv123__fundamental_type_infoE
01027e7a g     O .rwdata	00000002 OSFlagWidth
01023010 g     F .text	00000064 _do_ctors
0100f14c g     F .text	00000014 __sigtramp
01025304  w    O .rodata	0000000c _ZTISt16invalid_argument
010248b8  w    O .rodata	00000018 _ZTI16ADCOpenException
01009870  w    F .text	00000034 _ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
01022a78 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
01002b88  w    F .text	00000054 _ZN9__gnu_cxxmiIPKcS2_St6vectorIcSaIcEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS9_RKNS6_IT0_S8_EE
01002c4c  w    F .text	00000028 _ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEEvT_S7_11__true_type
01007b8c  w    F .text	0000001c _ZNKSs11_M_disjunctEPKc
0102565c  w    O .rodata	0000000c _ZTIN10__cxxabiv119__pointer_type_infoE
01018638 g     F .text	000000fc close
0100b398  w    F .text	00000034 _ZNSs4swapERSs
01027dcc  w    O .rwdata	00000003 _ZTSPh
01031c9c g     O .bss	00002000 task5_stk
01008b24  w    F .text	0000003c _ZNSsC1EmcRKSaIcE
01029c34 g     O .bss	00000004 alt_envsem
01029c8c g     O .bss	00000004 OSIdleCtrRun
0101a604 g     F .text	00000020 OSVersion
01027ec4 g     O .rwdata	00000002 OSTmrCfgWheelSize
01007240 g     F .text	000000b0 _ZNSt11logic_errorC1ERKSs
01018c40 g     F .text	00000080 alt_load
010212f8 g     F .text	0000007c OS_TaskStkClr
01024894  w    O .rodata	00000010 _ZTIP16ADCOpenException
01018124 g     F .text	00000314 __pack_d
0100023c g     F .text	00000074 _ZN16InfraredReceiver4readEi
01027e9e g     O .rwdata	00000002 OSTaskCreateEn
01007bb4  w    F .text	00000010 _ZNSsC1Ev
0100d9e8 g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
01027dbc  w    O .rwdata	00000004 _ZTSPKs
0101abf4 g     F .text	00000068 OS_EventWaitListInit
0100f010 g     F .text	00000014 raise
01023dd0 g     F .text	0000001c OSTaskIdleHook
01027db0  w    O .rwdata	00000004 _ZTSPKt
01007490 g     F .text	00000030 _ZNSt16invalid_argumentC2ERKSs
010046c0 g     F .text	0000003c _ZN11WifiHandler10configReadEv
0100e2ac g     F .text	00000014 free
010132c8 g     F .text	00000004 __sinit_lock_acquire
01007430 g     F .text	00000030 _ZNSt12length_errorC2ERKSs
01014e90 g     F .text	00000100 __multadd
0100c4d4 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
01020f88 g     F .text	0000022c OSTaskSuspend
010141dc g     F .text	00000028 _Bfree
01009ed8  w    F .text	0000010c _ZNSs6appendEPKcm
0101b29c g     F .text	0000005c OS_TaskIdle
01007528 g     F .text	000000b0 _ZNSt13runtime_errorC1ERKSs
010092dc  w    F .text	000000ec _ZNSsC1ERKSsmm
01027eca g     O .rwdata	00000002 OSTmrTblSize
0101eb40 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08407014 	ori	at,at,448
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10000fc:	1019fbc0 	call	1019fbc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000100:	0005313a 	rdctl	r2,ipending
 1000104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000114:	00800044 	movi	r2,1
 1000118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100011c:	e0ffff17 	ldw	r3,-4(fp)
 1000120:	e0bffe17 	ldw	r2,-8(fp)
 1000124:	1884703a 	and	r2,r3,r2
 1000128:	1005003a 	cmpeq	r2,r2,zero
 100012c:	1000171e 	bne	r2,zero,100018c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1000130:	e0bffd17 	ldw	r2,-12(fp)
 1000134:	00c040f4 	movhi	r3,259
 1000138:	18ddbe04 	addi	r3,r3,30456
 100013c:	100490fa 	slli	r2,r2,3
 1000140:	10c5883a 	add	r2,r2,r3
 1000144:	11800017 	ldw	r6,0(r2)
 1000148:	e0bffd17 	ldw	r2,-12(fp)
 100014c:	00c040f4 	movhi	r3,259
 1000150:	18ddbe04 	addi	r3,r3,30456
 1000154:	100490fa 	slli	r2,r2,3
 1000158:	10c5883a 	add	r2,r2,r3
 100015c:	10800104 	addi	r2,r2,4
 1000160:	11000017 	ldw	r4,0(r2)
 1000164:	e17ffd17 	ldw	r5,-12(fp)
 1000168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100016c:	0005313a 	rdctl	r2,ipending
 1000170:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 100017c:	e0bfff17 	ldw	r2,-4(fp)
 1000180:	1004c03a 	cmpne	r2,r2,zero
 1000184:	103fe21e 	bne	r2,zero,1000110 <alt_irq_handler+0x24>
 1000188:	00000706 	br	10001a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 100018c:	e0bffe17 	ldw	r2,-8(fp)
 1000190:	1085883a 	add	r2,r2,r2
 1000194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000198:	e0bffd17 	ldw	r2,-12(fp)
 100019c:	10800044 	addi	r2,r2,1
 10001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a4:	003fdd06 	br	100011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001a8:	101a0380 	call	101a038 <OSIntExit>
}
 10001ac:	e037883a 	mov	sp,fp
 10001b0:	dfc00117 	ldw	ra,4(sp)
 10001b4:	df000017 	ldw	fp,0(sp)
 10001b8:	dec00204 	addi	sp,sp,8
 10001bc:	f800283a 	ret

Disassembly of section .text:

010001c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001c0:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
 10001c4:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001cc:	00bffd16 	blt	zero,r2,10001c4 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001d0:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 10001d4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d8:	068040b4 	movhi	gp,258
    ori gp, gp, %lo(_gp)
 10001dc:	d6bf2614 	ori	gp,gp,64664
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001e0:	008040b4 	movhi	r2,258
    ori r2, r2, %lo(__bss_start)
 10001e4:	10a6f514 	ori	r2,r2,39892

    movhi r3, %hi(__bss_end)
 10001e8:	00c040f4 	movhi	r3,259
    ori r3, r3, %lo(__bss_end)
 10001ec:	18de6214 	ori	r3,r3,31112

    beq r2, r3, 1f
 10001f0:	10c00326 	beq	r2,r3,1000200 <_start+0x40>

0:
    stw zero, (r2)
 10001f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001fc:	10fffd36 	bltu	r2,r3,10001f4 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1000200:	1018c400 	call	1018c40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000204:	1018e7c0 	call	1018e7c <alt_main>

01000208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000208:	003fff06 	br	1000208 <alt_after_alt_main>

0100020c <_ZN16InfraredReceiver11setListenerEP8os_event>:

/**
 * Sets the listener to which the infrared readings will be posted.
 * @param queue - the queue to set as the listener
 */
void InfraredReceiver::setListener(OS_EVENT *queue) {
 100020c:	defffd04 	addi	sp,sp,-12
 1000210:	df000215 	stw	fp,8(sp)
 1000214:	df000204 	addi	fp,sp,8
 1000218:	e13ffe15 	stw	r4,-8(fp)
 100021c:	e17fff15 	stw	r5,-4(fp)
	listener = queue;
 1000220:	e0fffe17 	ldw	r3,-8(fp)
 1000224:	e0bfff17 	ldw	r2,-4(fp)
 1000228:	18800115 	stw	r2,4(r3)
}
 100022c:	e037883a 	mov	sp,fp
 1000230:	df000017 	ldw	fp,0(sp)
 1000234:	dec00104 	addi	sp,sp,4
 1000238:	f800283a 	ret

0100023c <_ZN16InfraredReceiver4readEi>:
 * Reads the level of the given receive channel.
 * @param channel - the number of the ADC channel to read
 * @return the 12-bit level read from the channel, indicating the amount of infrared light
 * hitting the receivers
 * */
unsigned int InfraredReceiver::read(int channel) {
 100023c:	defffb04 	addi	sp,sp,-20
 1000240:	dfc00415 	stw	ra,16(sp)
 1000244:	df000315 	stw	fp,12(sp)
 1000248:	df000304 	addi	fp,sp,12
 100024c:	e13ffe15 	stw	r4,-8(fp)
 1000250:	e17fff15 	stw	r5,-4(fp)
	alt_up_de0_nano_adc_update(adc_dev);
 1000254:	e0bffe17 	ldw	r2,-8(fp)
 1000258:	10800017 	ldw	r2,0(r2)
 100025c:	10800a17 	ldw	r2,40(r2)
 1000260:	10000035 	stwio	zero,0(r2)
	unsigned int level = (alt_up_de0_nano_adc_read(adc_dev, channel) >> INFRARED_RECEIVER_ADC_READ_UNUSED) - INFRARED_RECEIVER_ADC_READ_BASE;
 1000264:	e0bffe17 	ldw	r2,-8(fp)
 1000268:	11000017 	ldw	r4,0(r2)
 100026c:	e17fff17 	ldw	r5,-4(fp)
 1000270:	102288c0 	call	102288c <alt_up_de0_nano_adc_read>
 1000274:	1006d13a 	srli	r3,r2,4
 1000278:	00bf8034 	movhi	r2,65024
 100027c:	1885883a 	add	r2,r3,r2
 1000280:	e0bffd15 	stw	r2,-12(fp)
	INFRAREDRECEIVER_LOG(printf("InfraredReceiver [channel: %d, level: %u]\n", channel, level));
 1000284:	010040b4 	movhi	r4,258
 1000288:	2111df04 	addi	r4,r4,18300
 100028c:	e17fff17 	ldw	r5,-4(fp)
 1000290:	e1bffd17 	ldw	r6,-12(fp)
 1000294:	100ed840 	call	100ed84 <printf>
	return level;
 1000298:	e0bffd17 	ldw	r2,-12(fp)
}
 100029c:	e037883a 	mov	sp,fp
 10002a0:	dfc00117 	ldw	ra,4(sp)
 10002a4:	df000017 	ldw	fp,0(sp)
 10002a8:	dec00204 	addi	sp,sp,8
 10002ac:	f800283a 	ret

010002b0 <_ZN16InfraredReceiver4postEPKc>:
/**
 * Posts an infrared receive event to the listener.
 * @param event - the name of the event, which must start with 'i' for infrared
 * @throw PostException if the event cannot be posted to the listener
 */
void InfraredReceiver::post(const char *event) {
 10002b0:	defffa04 	addi	sp,sp,-24
 10002b4:	dfc00515 	stw	ra,20(sp)
 10002b8:	df000415 	stw	fp,16(sp)
 10002bc:	dc000315 	stw	r16,12(sp)
 10002c0:	df000304 	addi	fp,sp,12
 10002c4:	e13ffe15 	stw	r4,-8(fp)
 10002c8:	e17fff15 	stw	r5,-4(fp)
	INT8U status;
	status = OSQPost(listener, (void *)event);
 10002cc:	e0bffe17 	ldw	r2,-8(fp)
 10002d0:	11000117 	ldw	r4,4(r2)
 10002d4:	e17fff17 	ldw	r5,-4(fp)
 10002d8:	101e6040 	call	101e604 <OSQPost>
 10002dc:	e0bffd05 	stb	r2,-12(fp)
	if (status != OS_NO_ERR) {
 10002e0:	e0bffd03 	ldbu	r2,-12(fp)
 10002e4:	1005003a 	cmpeq	r2,r2,zero
 10002e8:	10000e1e 	bne	r2,zero,1000324 <_ZN16InfraredReceiver4postEPKc+0x74>
		throw new QueuePostException();
 10002ec:	01000104 	movi	r4,4
 10002f0:	100dbf80 	call	100dbf8 <_Znwm>
 10002f4:	1021883a 	mov	r16,r2
 10002f8:	8009883a 	mov	r4,r16
 10002fc:	10007440 	call	1000744 <_ZN18QueuePostExceptionC1Ev>
 1000300:	01000104 	movi	r4,4
 1000304:	100da700 	call	100da70 <__cxa_allocate_exception>
 1000308:	1009883a 	mov	r4,r2
 100030c:	2005883a 	mov	r2,r4
 1000310:	14000015 	stw	r16,0(r2)
 1000314:	014040b4 	movhi	r5,258
 1000318:	2951fa04 	addi	r5,r5,18408
 100031c:	000d883a 	mov	r6,zero
 1000320:	100d6e80 	call	100d6e8 <__cxa_throw>
	}
}
 1000324:	e037883a 	mov	sp,fp
 1000328:	dfc00217 	ldw	ra,8(sp)
 100032c:	df000117 	ldw	fp,4(sp)
 1000330:	dc000017 	ldw	r16,0(sp)
 1000334:	dec00304 	addi	sp,sp,12
 1000338:	f800283a 	ret

0100033c <_ZN16InfraredReceiver5checkEj>:
 * Checks the given infrared reading level against the infrared hit threshold.
 * If the level exceeds the threshold, a hit event will be posted to the listener.
 * @param level - the level read by the infrared receivers
 * @throw PostException if the hit event cannot be posted to the listener
 */
void InfraredReceiver::check(unsigned int level) {
 100033c:	defffc04 	addi	sp,sp,-16
 1000340:	dfc00315 	stw	ra,12(sp)
 1000344:	df000215 	stw	fp,8(sp)
 1000348:	df000204 	addi	fp,sp,8
 100034c:	e13ffe15 	stw	r4,-8(fp)
 1000350:	e17fff15 	stw	r5,-4(fp)
	if (level > INFRARED_RECEIVER_HIT_THRESHOLD) {
 1000354:	e0bfff17 	ldw	r2,-4(fp)
 1000358:	108016f0 	cmpltui	r2,r2,91
 100035c:	1000031e 	bne	r2,zero,100036c <_ZN16InfraredReceiver5checkEj+0x30>
		post(HIT);
 1000360:	d1600017 	ldw	r5,-32768(gp)
 1000364:	e13ffe17 	ldw	r4,-8(fp)
 1000368:	10002b00 	call	10002b0 <_ZN16InfraredReceiver4postEPKc>
	}
}
 100036c:	e037883a 	mov	sp,fp
 1000370:	dfc00117 	ldw	ra,4(sp)
 1000374:	df000017 	ldw	fp,0(sp)
 1000378:	dec00204 	addi	sp,sp,8
 100037c:	f800283a 	ret

01000380 <_ZN16InfraredReceiver6updateEv>:

/**
 * Updates this receiver. The receiver will read the ADC and post the readings to the listener.
 * @throw PostException if the reading cannot be posted to the listener
 */
void InfraredReceiver::update() {
 1000380:	defffd04 	addi	sp,sp,-12
 1000384:	dfc00215 	stw	ra,8(sp)
 1000388:	df000115 	stw	fp,4(sp)
 100038c:	df000104 	addi	fp,sp,4
 1000390:	e13fff15 	stw	r4,-4(fp)
	check(read(1));
 1000394:	e13fff17 	ldw	r4,-4(fp)
 1000398:	01400044 	movi	r5,1
 100039c:	100023c0 	call	100023c <_ZN16InfraredReceiver4readEi>
 10003a0:	100b883a 	mov	r5,r2
 10003a4:	e13fff17 	ldw	r4,-4(fp)
 10003a8:	100033c0 	call	100033c <_ZN16InfraredReceiver5checkEj>
}
 10003ac:	e037883a 	mov	sp,fp
 10003b0:	dfc00117 	ldw	ra,4(sp)
 10003b4:	df000017 	ldw	fp,0(sp)
 10003b8:	dec00204 	addi	sp,sp,8
 10003bc:	f800283a 	ret

010003c0 <_ZN16InfraredReceiverC1Ev>:

/**
 * Creates a new infrared receiver.
 * @throw ADCOpenException if the receiver cannot connect to the analog-to-digital converter
 */
InfraredReceiver::InfraredReceiver() {
 10003c0:	defffc04 	addi	sp,sp,-16
 10003c4:	dfc00315 	stw	ra,12(sp)
 10003c8:	df000215 	stw	fp,8(sp)
 10003cc:	dc000115 	stw	r16,4(sp)
 10003d0:	df000104 	addi	fp,sp,4
 10003d4:	e13fff15 	stw	r4,-4(fp)
	adc_dev = alt_up_de0_nano_adc_open_dev(ADC_NAME);
 10003d8:	010040b4 	movhi	r4,258
 10003dc:	2111ea04 	addi	r4,r4,18344
 10003e0:	102284c0 	call	102284c <alt_up_de0_nano_adc_open_dev>
 10003e4:	1007883a 	mov	r3,r2
 10003e8:	e0bfff17 	ldw	r2,-4(fp)
 10003ec:	10c00015 	stw	r3,0(r2)
	if (adc_dev == NULL) {
 10003f0:	e0bfff17 	ldw	r2,-4(fp)
 10003f4:	10800017 	ldw	r2,0(r2)
 10003f8:	1004c03a 	cmpne	r2,r2,zero
 10003fc:	10000e1e 	bne	r2,zero,1000438 <_ZN16InfraredReceiverC1Ev+0x78>
		throw new ADCOpenException();
 1000400:	01000104 	movi	r4,4
 1000404:	100dbf80 	call	100dbf8 <_Znwm>
 1000408:	1021883a 	mov	r16,r2
 100040c:	8009883a 	mov	r4,r16
 1000410:	10007040 	call	1000704 <_ZN16ADCOpenExceptionC1Ev>
 1000414:	01000104 	movi	r4,4
 1000418:	100da700 	call	100da70 <__cxa_allocate_exception>
 100041c:	1009883a 	mov	r4,r2
 1000420:	2005883a 	mov	r2,r4
 1000424:	14000015 	stw	r16,0(r2)
 1000428:	014040b4 	movhi	r5,258
 100042c:	29522504 	addi	r5,r5,18580
 1000430:	000d883a 	mov	r6,zero
 1000434:	100d6e80 	call	100d6e8 <__cxa_throw>
	}
}
 1000438:	e037883a 	mov	sp,fp
 100043c:	dfc00217 	ldw	ra,8(sp)
 1000440:	df000117 	ldw	fp,4(sp)
 1000444:	dc000017 	ldw	r16,0(sp)
 1000448:	dec00304 	addi	sp,sp,12
 100044c:	f800283a 	ret

01000450 <_ZN16InfraredReceiverC2Ev>:

/**
 * Creates a new infrared receiver.
 * @throw ADCOpenException if the receiver cannot connect to the analog-to-digital converter
 */
InfraredReceiver::InfraredReceiver() {
 1000450:	defffc04 	addi	sp,sp,-16
 1000454:	dfc00315 	stw	ra,12(sp)
 1000458:	df000215 	stw	fp,8(sp)
 100045c:	dc000115 	stw	r16,4(sp)
 1000460:	df000104 	addi	fp,sp,4
 1000464:	e13fff15 	stw	r4,-4(fp)
	adc_dev = alt_up_de0_nano_adc_open_dev(ADC_NAME);
 1000468:	010040b4 	movhi	r4,258
 100046c:	2111ea04 	addi	r4,r4,18344
 1000470:	102284c0 	call	102284c <alt_up_de0_nano_adc_open_dev>
 1000474:	1007883a 	mov	r3,r2
 1000478:	e0bfff17 	ldw	r2,-4(fp)
 100047c:	10c00015 	stw	r3,0(r2)
	if (adc_dev == NULL) {
 1000480:	e0bfff17 	ldw	r2,-4(fp)
 1000484:	10800017 	ldw	r2,0(r2)
 1000488:	1004c03a 	cmpne	r2,r2,zero
 100048c:	10000e1e 	bne	r2,zero,10004c8 <_ZN16InfraredReceiverC2Ev+0x78>
		throw new ADCOpenException();
 1000490:	01000104 	movi	r4,4
 1000494:	100dbf80 	call	100dbf8 <_Znwm>
 1000498:	1021883a 	mov	r16,r2
 100049c:	8009883a 	mov	r4,r16
 10004a0:	10007040 	call	1000704 <_ZN16ADCOpenExceptionC1Ev>
 10004a4:	01000104 	movi	r4,4
 10004a8:	100da700 	call	100da70 <__cxa_allocate_exception>
 10004ac:	1009883a 	mov	r4,r2
 10004b0:	2005883a 	mov	r2,r4
 10004b4:	14000015 	stw	r16,0(r2)
 10004b8:	014040b4 	movhi	r5,258
 10004bc:	29522504 	addi	r5,r5,18580
 10004c0:	000d883a 	mov	r6,zero
 10004c4:	100d6e80 	call	100d6e8 <__cxa_throw>
	}
}
 10004c8:	e037883a 	mov	sp,fp
 10004cc:	dfc00217 	ldw	ra,8(sp)
 10004d0:	df000117 	ldw	fp,4(sp)
 10004d4:	dc000017 	ldw	r16,0(sp)
 10004d8:	dec00304 	addi	sp,sp,12
 10004dc:	f800283a 	ret

010004e0 <_Z29infrared_receiver_update_taskPv>:
// TASKS

extern InfraredReceiver *infraredIn;

/* Polls the infrared receivers. */
void infrared_receiver_update_task(void* pdata) {
 10004e0:	deffe404 	addi	sp,sp,-112
 10004e4:	dfc01b15 	stw	ra,108(sp)
 10004e8:	df001a15 	stw	fp,104(sp)
 10004ec:	ddc01915 	stw	r23,100(sp)
 10004f0:	dd801815 	stw	r22,96(sp)
 10004f4:	dd401715 	stw	r21,92(sp)
 10004f8:	dd001615 	stw	r20,88(sp)
 10004fc:	dcc01515 	stw	r19,84(sp)
 1000500:	dc801415 	stw	r18,80(sp)
 1000504:	dc401315 	stw	r17,76(sp)
 1000508:	dc001215 	stw	r16,72(sp)
 100050c:	df001204 	addi	fp,sp,72
 1000510:	e13fef15 	stw	r4,-68(fp)
 1000514:	00804074 	movhi	r2,257
 1000518:	10b3a604 	addi	r2,r2,-12648
 100051c:	e0bff615 	stw	r2,-40(fp)
 1000520:	008040b4 	movhi	r2,258
 1000524:	1090f904 	addi	r2,r2,17380
 1000528:	e0bff715 	stw	r2,-36(fp)
 100052c:	e0bff804 	addi	r2,fp,-32
 1000530:	e0ffee04 	addi	r3,fp,-72
 1000534:	10c00015 	stw	r3,0(r2)
 1000538:	00c04034 	movhi	r3,256
 100053c:	18c17704 	addi	r3,r3,1500
 1000540:	10c00115 	stw	r3,4(r2)
 1000544:	16c00215 	stw	sp,8(r2)
 1000548:	e13ff004 	addi	r4,fp,-64
 100054c:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
	printf("InfraredReceiver [task: update, status: start]\n");
 1000550:	00bfffc4 	movi	r2,-1
 1000554:	e0bff115 	stw	r2,-60(fp)
 1000558:	010040b4 	movhi	r4,258
 100055c:	2111ed04 	addi	r4,r4,18356
 1000560:	100eec00 	call	100eec0 <puts>
	while (true) {
		try {
			// Update the infrared receiver.
			infraredIn->update();
 1000564:	008040f4 	movhi	r2,259
 1000568:	10a6f504 	addi	r2,r2,-25644
 100056c:	11000017 	ldw	r4,0(r2)
 1000570:	00800084 	movi	r2,2
 1000574:	e0bff115 	stw	r2,-60(fp)
 1000578:	10003800 	call	1000380 <_ZN16InfraredReceiver6updateEv>
 100057c:	00002906 	br	1000624 <_Z29infrared_receiver_update_taskPv+0x144>
 1000580:	e0ffff17 	ldw	r3,-4(fp)
 1000584:	18800060 	cmpeqi	r2,r3,1
 1000588:	1000041e 	bne	r2,zero,100059c <_Z29infrared_receiver_update_taskPv+0xbc>
 100058c:	00bfffc4 	movi	r2,-1
 1000590:	e0bff115 	stw	r2,-60(fp)
 1000594:	e13ffe17 	ldw	r4,-8(fp)
 1000598:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
		} catch (ARCapException &e) {
 100059c:	e13ffe17 	ldw	r4,-8(fp)
 10005a0:	100d5500 	call	100d550 <__cxa_begin_catch>
 10005a4:	e0bfee15 	stw	r2,-72(fp)
			// Log exceptions.
			INFRAREDRECEIVER_LOG(printf("%s\n", e.what()));
 10005a8:	e0bfee17 	ldw	r2,-72(fp)
 10005ac:	10800017 	ldw	r2,0(r2)
 10005b0:	10800204 	addi	r2,r2,8
 10005b4:	10800017 	ldw	r2,0(r2)
 10005b8:	e13fee17 	ldw	r4,-72(fp)
 10005bc:	103ee83a 	callr	r2
 10005c0:	1009883a 	mov	r4,r2
 10005c4:	00800044 	movi	r2,1
 10005c8:	e0bff115 	stw	r2,-60(fp)
 10005cc:	100eec00 	call	100eec0 <puts>
	printf("InfraredReceiver [task: update, status: start]\n");
	while (true) {
		try {
			// Update the infrared receiver.
			infraredIn->update();
		} catch (ARCapException &e) {
 10005d0:	e03ff115 	stw	zero,-60(fp)
 10005d4:	100d4ac0 	call	100d4ac <__cxa_end_catch>
 10005d8:	00001206 	br	1000624 <_Z29infrared_receiver_update_taskPv+0x144>
 10005dc:	e7001204 	addi	fp,fp,72
 10005e0:	e0bff117 	ldw	r2,-60(fp)
 10005e4:	e0fff217 	ldw	r3,-56(fp)
 10005e8:	e0fffe15 	stw	r3,-8(fp)
 10005ec:	e0fff317 	ldw	r3,-52(fp)
 10005f0:	e0ffff15 	stw	r3,-4(fp)
 10005f4:	10800060 	cmpeqi	r2,r2,1
 10005f8:	103fe11e 	bne	r2,zero,1000580 <_Z29infrared_receiver_update_taskPv+0xa0>
 10005fc:	e0bffe17 	ldw	r2,-8(fp)
 1000600:	e0bffd15 	stw	r2,-12(fp)
 1000604:	e03ff115 	stw	zero,-60(fp)
 1000608:	100d4ac0 	call	100d4ac <__cxa_end_catch>
 100060c:	e0fffd17 	ldw	r3,-12(fp)
 1000610:	e0fffe15 	stw	r3,-8(fp)
 1000614:	00bfffc4 	movi	r2,-1
 1000618:	e0bff115 	stw	r2,-60(fp)
 100061c:	e13ffe17 	ldw	r4,-8(fp)
 1000620:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
			// Log exceptions.
			INFRAREDRECEIVER_LOG(printf("%s\n", e.what()));
		}
		// Wait.
		OSTimeDlyHMSM(0, 0, 0, INFRARED_RECEIVER_UPDATE_TIME_MILLIS);
 1000624:	00bfffc4 	movi	r2,-1
 1000628:	e0bff115 	stw	r2,-60(fp)
 100062c:	0009883a 	mov	r4,zero
 1000630:	000b883a 	mov	r5,zero
 1000634:	000d883a 	mov	r6,zero
 1000638:	01c07d04 	movi	r7,500
 100063c:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
extern InfraredReceiver *infraredIn;

/* Polls the infrared receivers. */
void infrared_receiver_update_task(void* pdata) {
	printf("InfraredReceiver [task: update, status: start]\n");
	while (true) {
 1000640:	003fc806 	br	1000564 <_Z29infrared_receiver_update_taskPv+0x84>

01000644 <_ZNSt9exceptionC2Ev>:
   *  throw non-class data (e.g., fundamental types).
   */
  class exception 
  {
  public:
    exception() throw() { }
 1000644:	defffe04 	addi	sp,sp,-8
 1000648:	df000115 	stw	fp,4(sp)
 100064c:	df000104 	addi	fp,sp,4
 1000650:	e13fff15 	stw	r4,-4(fp)
 1000654:	00c040b4 	movhi	r3,258
 1000658:	18d56304 	addi	r3,r3,21900
 100065c:	e0bfff17 	ldw	r2,-4(fp)
 1000660:	10c00015 	stw	r3,0(r2)
 1000664:	e037883a 	mov	sp,fp
 1000668:	df000017 	ldw	fp,0(sp)
 100066c:	dec00104 	addi	sp,sp,4
 1000670:	f800283a 	ret

01000674 <_ZNK18QueuePostException4whatEv>:
	virtual const char *what() const throw() = 0;
};

class QueuePostException : ARCapException {
public:
	virtual const char *what() const throw() {
 1000674:	defffe04 	addi	sp,sp,-8
 1000678:	df000115 	stw	fp,4(sp)
 100067c:	df000104 	addi	fp,sp,4
 1000680:	e13fff15 	stw	r4,-4(fp)
		return "Failed to post to listener queue.";
 1000684:	008040b4 	movhi	r2,258
 1000688:	1091c704 	addi	r2,r2,18204
	}
 100068c:	e037883a 	mov	sp,fp
 1000690:	df000017 	ldw	fp,0(sp)
 1000694:	dec00104 	addi	sp,sp,4
 1000698:	f800283a 	ret

0100069c <_ZNK16ADCOpenException4whatEv>:

};

class ADCOpenException : ARCapException {
public:
	virtual const char *what() const throw() {
 100069c:	defffe04 	addi	sp,sp,-8
 10006a0:	df000115 	stw	fp,4(sp)
 10006a4:	df000104 	addi	fp,sp,4
 10006a8:	e13fff15 	stw	r4,-4(fp)
		return "Failed to open connection to analog-to-digital converter.";
 10006ac:	008040b4 	movhi	r2,258
 10006b0:	1091d004 	addi	r2,r2,18240
	}
 10006b4:	e037883a 	mov	sp,fp
 10006b8:	df000017 	ldw	fp,0(sp)
 10006bc:	dec00104 	addi	sp,sp,4
 10006c0:	f800283a 	ret

010006c4 <_ZN14ARCapExceptionC2Ev>:
#define MESSAGE_OK			"#ok"
#define MESSAGE_OK_LENGTH	3
#define MESSAGE_ERR			"#err"
#define MESSAGE_ERR_LENGTH	4

class ARCapException : exception {
 10006c4:	defffd04 	addi	sp,sp,-12
 10006c8:	dfc00215 	stw	ra,8(sp)
 10006cc:	df000115 	stw	fp,4(sp)
 10006d0:	df000104 	addi	fp,sp,4
 10006d4:	e13fff15 	stw	r4,-4(fp)
 10006d8:	e13fff17 	ldw	r4,-4(fp)
 10006dc:	10006440 	call	1000644 <_ZNSt9exceptionC2Ev>
 10006e0:	00c040b4 	movhi	r3,258
 10006e4:	18d22204 	addi	r3,r3,18568
 10006e8:	e0bfff17 	ldw	r2,-4(fp)
 10006ec:	10c00015 	stw	r3,0(r2)
 10006f0:	e037883a 	mov	sp,fp
 10006f4:	dfc00117 	ldw	ra,4(sp)
 10006f8:	df000017 	ldw	fp,0(sp)
 10006fc:	dec00204 	addi	sp,sp,8
 1000700:	f800283a 	ret

01000704 <_ZN16ADCOpenExceptionC1Ev>:
	 */
	void post(const char *event);

};

class ADCOpenException : ARCapException {
 1000704:	defffd04 	addi	sp,sp,-12
 1000708:	dfc00215 	stw	ra,8(sp)
 100070c:	df000115 	stw	fp,4(sp)
 1000710:	df000104 	addi	fp,sp,4
 1000714:	e13fff15 	stw	r4,-4(fp)
 1000718:	e13fff17 	ldw	r4,-4(fp)
 100071c:	10006c40 	call	10006c4 <_ZN14ARCapExceptionC2Ev>
 1000720:	00c040b4 	movhi	r3,258
 1000724:	18d23b04 	addi	r3,r3,18668
 1000728:	e0bfff17 	ldw	r2,-4(fp)
 100072c:	10c00015 	stw	r3,0(r2)
 1000730:	e037883a 	mov	sp,fp
 1000734:	dfc00117 	ldw	ra,4(sp)
 1000738:	df000017 	ldw	fp,0(sp)
 100073c:	dec00204 	addi	sp,sp,8
 1000740:	f800283a 	ret

01000744 <_ZN18QueuePostExceptionC1Ev>:
public:
	virtual const char *what() const throw() = 0;
};

class QueuePostException : ARCapException {
 1000744:	defffd04 	addi	sp,sp,-12
 1000748:	dfc00215 	stw	ra,8(sp)
 100074c:	df000115 	stw	fp,4(sp)
 1000750:	df000104 	addi	fp,sp,4
 1000754:	e13fff15 	stw	r4,-4(fp)
 1000758:	e13fff17 	ldw	r4,-4(fp)
 100075c:	10006c40 	call	10006c4 <_ZN14ARCapExceptionC2Ev>
 1000760:	00c040b4 	movhi	r3,258
 1000764:	18d21d04 	addi	r3,r3,18548
 1000768:	e0bfff17 	ldw	r2,-4(fp)
 100076c:	10c00015 	stw	r3,0(r2)
 1000770:	e037883a 	mov	sp,fp
 1000774:	dfc00117 	ldw	ra,4(sp)
 1000778:	df000017 	ldw	fp,0(sp)
 100077c:	dec00204 	addi	sp,sp,8
 1000780:	f800283a 	ret

01000784 <_ZN14ARCapExceptionD2Ev>:
#define MESSAGE_OK			"#ok"
#define MESSAGE_OK_LENGTH	3
#define MESSAGE_ERR			"#err"
#define MESSAGE_ERR_LENGTH	4

class ARCapException : exception {
 1000784:	defffd04 	addi	sp,sp,-12
 1000788:	dfc00215 	stw	ra,8(sp)
 100078c:	df000115 	stw	fp,4(sp)
 1000790:	df000104 	addi	fp,sp,4
 1000794:	e13fff15 	stw	r4,-4(fp)
 1000798:	00c040b4 	movhi	r3,258
 100079c:	18d22204 	addi	r3,r3,18568
 10007a0:	e0bfff17 	ldw	r2,-4(fp)
 10007a4:	10c00015 	stw	r3,0(r2)
 10007a8:	e13fff17 	ldw	r4,-4(fp)
 10007ac:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 10007b0:	0005883a 	mov	r2,zero
 10007b4:	10803fcc 	andi	r2,r2,255
 10007b8:	1005003a 	cmpeq	r2,r2,zero
 10007bc:	1000021e 	bne	r2,zero,10007c8 <_ZN14ARCapExceptionD2Ev+0x44>
 10007c0:	e13fff17 	ldw	r4,-4(fp)
 10007c4:	100d6680 	call	100d668 <_ZdlPv>
 10007c8:	e037883a 	mov	sp,fp
 10007cc:	dfc00117 	ldw	ra,4(sp)
 10007d0:	df000017 	ldw	fp,0(sp)
 10007d4:	dec00204 	addi	sp,sp,8
 10007d8:	f800283a 	ret

010007dc <_ZN18QueuePostExceptionD0Ev>:
public:
	virtual const char *what() const throw() = 0;
};

class QueuePostException : ARCapException {
 10007dc:	defffd04 	addi	sp,sp,-12
 10007e0:	dfc00215 	stw	ra,8(sp)
 10007e4:	df000115 	stw	fp,4(sp)
 10007e8:	df000104 	addi	fp,sp,4
 10007ec:	e13fff15 	stw	r4,-4(fp)
 10007f0:	00c040b4 	movhi	r3,258
 10007f4:	18d21d04 	addi	r3,r3,18548
 10007f8:	e0bfff17 	ldw	r2,-4(fp)
 10007fc:	10c00015 	stw	r3,0(r2)
 1000800:	e13fff17 	ldw	r4,-4(fp)
 1000804:	10007840 	call	1000784 <_ZN14ARCapExceptionD2Ev>
 1000808:	00800044 	movi	r2,1
 100080c:	10803fcc 	andi	r2,r2,255
 1000810:	1005003a 	cmpeq	r2,r2,zero
 1000814:	1000021e 	bne	r2,zero,1000820 <_ZN18QueuePostExceptionD0Ev+0x44>
 1000818:	e13fff17 	ldw	r4,-4(fp)
 100081c:	100d6680 	call	100d668 <_ZdlPv>
 1000820:	e037883a 	mov	sp,fp
 1000824:	dfc00117 	ldw	ra,4(sp)
 1000828:	df000017 	ldw	fp,0(sp)
 100082c:	dec00204 	addi	sp,sp,8
 1000830:	f800283a 	ret

01000834 <_ZN18QueuePostExceptionD1Ev>:
 1000834:	defffd04 	addi	sp,sp,-12
 1000838:	dfc00215 	stw	ra,8(sp)
 100083c:	df000115 	stw	fp,4(sp)
 1000840:	df000104 	addi	fp,sp,4
 1000844:	e13fff15 	stw	r4,-4(fp)
 1000848:	00c040b4 	movhi	r3,258
 100084c:	18d21d04 	addi	r3,r3,18548
 1000850:	e0bfff17 	ldw	r2,-4(fp)
 1000854:	10c00015 	stw	r3,0(r2)
 1000858:	e13fff17 	ldw	r4,-4(fp)
 100085c:	10007840 	call	1000784 <_ZN14ARCapExceptionD2Ev>
 1000860:	0005883a 	mov	r2,zero
 1000864:	10803fcc 	andi	r2,r2,255
 1000868:	1005003a 	cmpeq	r2,r2,zero
 100086c:	1000021e 	bne	r2,zero,1000878 <_ZN18QueuePostExceptionD1Ev+0x44>
 1000870:	e13fff17 	ldw	r4,-4(fp)
 1000874:	100d6680 	call	100d668 <_ZdlPv>
 1000878:	e037883a 	mov	sp,fp
 100087c:	dfc00117 	ldw	ra,4(sp)
 1000880:	df000017 	ldw	fp,0(sp)
 1000884:	dec00204 	addi	sp,sp,8
 1000888:	f800283a 	ret

0100088c <_ZN16ADCOpenExceptionD0Ev>:
 100088c:	defffd04 	addi	sp,sp,-12
 1000890:	dfc00215 	stw	ra,8(sp)
 1000894:	df000115 	stw	fp,4(sp)
 1000898:	df000104 	addi	fp,sp,4
 100089c:	e13fff15 	stw	r4,-4(fp)
 10008a0:	00c040b4 	movhi	r3,258
 10008a4:	18d23b04 	addi	r3,r3,18668
 10008a8:	e0bfff17 	ldw	r2,-4(fp)
 10008ac:	10c00015 	stw	r3,0(r2)
 10008b0:	e13fff17 	ldw	r4,-4(fp)
 10008b4:	10007840 	call	1000784 <_ZN14ARCapExceptionD2Ev>
 10008b8:	00800044 	movi	r2,1
 10008bc:	10803fcc 	andi	r2,r2,255
 10008c0:	1005003a 	cmpeq	r2,r2,zero
 10008c4:	1000021e 	bne	r2,zero,10008d0 <_ZN16ADCOpenExceptionD0Ev+0x44>
 10008c8:	e13fff17 	ldw	r4,-4(fp)
 10008cc:	100d6680 	call	100d668 <_ZdlPv>
 10008d0:	e037883a 	mov	sp,fp
 10008d4:	dfc00117 	ldw	ra,4(sp)
 10008d8:	df000017 	ldw	fp,0(sp)
 10008dc:	dec00204 	addi	sp,sp,8
 10008e0:	f800283a 	ret

010008e4 <_ZN16ADCOpenExceptionD1Ev>:
 10008e4:	defffd04 	addi	sp,sp,-12
 10008e8:	dfc00215 	stw	ra,8(sp)
 10008ec:	df000115 	stw	fp,4(sp)
 10008f0:	df000104 	addi	fp,sp,4
 10008f4:	e13fff15 	stw	r4,-4(fp)
 10008f8:	00c040b4 	movhi	r3,258
 10008fc:	18d23b04 	addi	r3,r3,18668
 1000900:	e0bfff17 	ldw	r2,-4(fp)
 1000904:	10c00015 	stw	r3,0(r2)
 1000908:	e13fff17 	ldw	r4,-4(fp)
 100090c:	10007840 	call	1000784 <_ZN14ARCapExceptionD2Ev>
 1000910:	0005883a 	mov	r2,zero
 1000914:	10803fcc 	andi	r2,r2,255
 1000918:	1005003a 	cmpeq	r2,r2,zero
 100091c:	1000021e 	bne	r2,zero,1000928 <_ZN16ADCOpenExceptionD1Ev+0x44>
 1000920:	e13fff17 	ldw	r4,-4(fp)
 1000924:	100d6680 	call	100d668 <_ZdlPv>
 1000928:	e037883a 	mov	sp,fp
 100092c:	dfc00117 	ldw	ra,4(sp)
 1000930:	df000017 	ldw	fp,0(sp)
 1000934:	dec00204 	addi	sp,sp,8
 1000938:	f800283a 	ret

0100093c <_ZN14ARCapExceptionD0Ev>:
#define MESSAGE_OK			"#ok"
#define MESSAGE_OK_LENGTH	3
#define MESSAGE_ERR			"#err"
#define MESSAGE_ERR_LENGTH	4

class ARCapException : exception {
 100093c:	defffd04 	addi	sp,sp,-12
 1000940:	dfc00215 	stw	ra,8(sp)
 1000944:	df000115 	stw	fp,4(sp)
 1000948:	df000104 	addi	fp,sp,4
 100094c:	e13fff15 	stw	r4,-4(fp)
 1000950:	00c040b4 	movhi	r3,258
 1000954:	18d22204 	addi	r3,r3,18568
 1000958:	e0bfff17 	ldw	r2,-4(fp)
 100095c:	10c00015 	stw	r3,0(r2)
 1000960:	e13fff17 	ldw	r4,-4(fp)
 1000964:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1000968:	00800044 	movi	r2,1
 100096c:	10803fcc 	andi	r2,r2,255
 1000970:	1005003a 	cmpeq	r2,r2,zero
 1000974:	1000021e 	bne	r2,zero,1000980 <_ZN14ARCapExceptionD0Ev+0x44>
 1000978:	e13fff17 	ldw	r4,-4(fp)
 100097c:	100d6680 	call	100d668 <_ZdlPv>
 1000980:	e037883a 	mov	sp,fp
 1000984:	dfc00117 	ldw	ra,4(sp)
 1000988:	df000017 	ldw	fp,0(sp)
 100098c:	dec00204 	addi	sp,sp,8
 1000990:	f800283a 	ret

01000994 <_ZN14ARCapExceptionD1Ev>:
 1000994:	defffd04 	addi	sp,sp,-12
 1000998:	dfc00215 	stw	ra,8(sp)
 100099c:	df000115 	stw	fp,4(sp)
 10009a0:	df000104 	addi	fp,sp,4
 10009a4:	e13fff15 	stw	r4,-4(fp)
 10009a8:	00c040b4 	movhi	r3,258
 10009ac:	18d22204 	addi	r3,r3,18568
 10009b0:	e0bfff17 	ldw	r2,-4(fp)
 10009b4:	10c00015 	stw	r3,0(r2)
 10009b8:	e13fff17 	ldw	r4,-4(fp)
 10009bc:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 10009c0:	0005883a 	mov	r2,zero
 10009c4:	10803fcc 	andi	r2,r2,255
 10009c8:	1005003a 	cmpeq	r2,r2,zero
 10009cc:	1000021e 	bne	r2,zero,10009d8 <_ZN14ARCapExceptionD1Ev+0x44>
 10009d0:	e13fff17 	ldw	r4,-4(fp)
 10009d4:	100d6680 	call	100d668 <_ZdlPv>
 10009d8:	e037883a 	mov	sp,fp
 10009dc:	dfc00117 	ldw	ra,4(sp)
 10009e0:	df000017 	ldw	fp,0(sp)
 10009e4:	dec00204 	addi	sp,sp,8
 10009e8:	f800283a 	ret

010009ec <_ZN14InfraredSender4testEv>:
// TESTING

/**
 * Tests the infrared emitters.
 */
void InfraredSender::test() {
 10009ec:	defffd04 	addi	sp,sp,-12
 10009f0:	dfc00215 	stw	ra,8(sp)
 10009f4:	df000115 	stw	fp,4(sp)
 10009f8:	df000104 	addi	fp,sp,4
 10009fc:	e13fff15 	stw	r4,-4(fp)
	parse("is");
 1000a00:	e0bfff17 	ldw	r2,-4(fp)
 1000a04:	10800017 	ldw	r2,0(r2)
 1000a08:	10800204 	addi	r2,r2,8
 1000a0c:	10800017 	ldw	r2,0(r2)
 1000a10:	e13fff17 	ldw	r4,-4(fp)
 1000a14:	014040b4 	movhi	r5,258
 1000a18:	29523e04 	addi	r5,r5,18680
 1000a1c:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, INFRARED_SENDER_OFF_TIME_SECONDS, 0);
 1000a20:	0009883a 	mov	r4,zero
 1000a24:	000b883a 	mov	r5,zero
 1000a28:	01800044 	movi	r6,1
 1000a2c:	000f883a 	mov	r7,zero
 1000a30:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
}
 1000a34:	e037883a 	mov	sp,fp
 1000a38:	dfc00117 	ldw	ra,4(sp)
 1000a3c:	df000017 	ldw	fp,0(sp)
 1000a40:	dec00204 	addi	sp,sp,8
 1000a44:	f800283a 	ret

01000a48 <_ZN14InfraredSender4sendEv>:

/**
 * Sends a signal from the infrared emitters.
 * @return OK if the signal was sent successfully
 */
void InfraredSender::send() {
 1000a48:	defffd04 	addi	sp,sp,-12
 1000a4c:	dfc00215 	stw	ra,8(sp)
 1000a50:	df000115 	stw	fp,4(sp)
 1000a54:	df000104 	addi	fp,sp,4
 1000a58:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, INFRARED_SENDER_ON);
 1000a5c:	00808034 	movhi	r2,512
 1000a60:	10842004 	addi	r2,r2,4224
 1000a64:	00c00044 	movi	r3,1
 1000a68:	10c00035 	stwio	r3,0(r2)
	INFRAREDSENDER_LOG(printf("InfraredSender [emitter: on]\n"));
	OSTimeDlyHMSM(0, 0, INFRARED_SENDER_ON_TIME_SECONDS, 0);
 1000a6c:	0009883a 	mov	r4,zero
 1000a70:	000b883a 	mov	r5,zero
 1000a74:	01800044 	movi	r6,1
 1000a78:	000f883a 	mov	r7,zero
 1000a7c:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, INFRARED_SENDER_OFF);
 1000a80:	00808034 	movhi	r2,512
 1000a84:	10842004 	addi	r2,r2,4224
 1000a88:	10000035 	stwio	zero,0(r2)
	INFRAREDSENDER_LOG(printf("InfraredSender [emitter: off]\n"));
}
 1000a8c:	e037883a 	mov	sp,fp
 1000a90:	dfc00117 	ldw	ra,4(sp)
 1000a94:	df000017 	ldw	fp,0(sp)
 1000a98:	dec00204 	addi	sp,sp,8
 1000a9c:	f800283a 	ret

01000aa0 <_ZN14InfraredSender5parseEPc>:
 * Parses the given infrared command.
 * @command - the infrared command to parse.
 * If the command is a send command, this sender issues a signal to the emitters.
 * The command must be dynamically allocated, and will be freed at the end of this method.
 */
void InfraredSender::parse(char *command) {
 1000aa0:	defffc04 	addi	sp,sp,-16
 1000aa4:	dfc00315 	stw	ra,12(sp)
 1000aa8:	df000215 	stw	fp,8(sp)
 1000aac:	df000204 	addi	fp,sp,8
 1000ab0:	e13ffe15 	stw	r4,-8(fp)
 1000ab4:	e17fff15 	stw	r5,-4(fp)
	INFRAREDSENDER_LOG(printf("InfraredSender [command: %s]\n", command));
	// First character is 'i' for infrared; second character gives subtype:
	switch (command[1]) {
 1000ab8:	e0bfff17 	ldw	r2,-4(fp)
 1000abc:	10800044 	addi	r2,r2,1
 1000ac0:	10800003 	ldbu	r2,0(r2)
 1000ac4:	10803fcc 	andi	r2,r2,255
 1000ac8:	1080201c 	xori	r2,r2,128
 1000acc:	10bfe004 	addi	r2,r2,-128
 1000ad0:	10801ce0 	cmpeqi	r2,r2,115
 1000ad4:	1000011e 	bne	r2,zero,1000adc <_ZN14InfraredSender5parseEPc+0x3c>
 1000ad8:	00000206 	br	1000ae4 <_ZN14InfraredSender5parseEPc+0x44>
	case 's':
		// Shoot.
		send();
 1000adc:	e13ffe17 	ldw	r4,-8(fp)
 1000ae0:	1000a480 	call	1000a48 <_ZN14InfraredSender4sendEv>
		break;
	}
	free(command);
 1000ae4:	e13fff17 	ldw	r4,-4(fp)
 1000ae8:	100e2ac0 	call	100e2ac <free>
}
 1000aec:	e037883a 	mov	sp,fp
 1000af0:	dfc00117 	ldw	ra,4(sp)
 1000af4:	df000017 	ldw	fp,0(sp)
 1000af8:	dec00204 	addi	sp,sp,8
 1000afc:	f800283a 	ret

01000b00 <_Z25infrared_sender_test_taskPv>:
		}
	}
}

/* @test Periodically sends an infrared signal. */
void infrared_sender_test_task(void *pdata) {
 1000b00:	defffd04 	addi	sp,sp,-12
 1000b04:	dfc00215 	stw	ra,8(sp)
 1000b08:	df000115 	stw	fp,4(sp)
 1000b0c:	df000104 	addi	fp,sp,4
 1000b10:	e13fff15 	stw	r4,-4(fp)
	printf("InfraredSender [task: test, status: start]\n");
 1000b14:	010040b4 	movhi	r4,258
 1000b18:	21123f04 	addi	r4,r4,18684
 1000b1c:	100eec00 	call	100eec0 <puts>
	while (true) {
		infraredOut->test();
 1000b20:	008040f4 	movhi	r2,259
 1000b24:	10a6f604 	addi	r2,r2,-25640
 1000b28:	11000017 	ldw	r4,0(r2)
 1000b2c:	10009ec0 	call	10009ec <_ZN14InfraredSender4testEv>
}

/* @test Periodically sends an infrared signal. */
void infrared_sender_test_task(void *pdata) {
	printf("InfraredSender [task: test, status: start]\n");
	while (true) {
 1000b30:	003ffb06 	br	1000b20 <_Z25infrared_sender_test_taskPv+0x20>

01000b34 <_Z27infrared_sender_update_taskPv>:
// TASKS

extern InfraredSender *infraredOut;

/* Waits for infrared send commands and executes them as they arrive. */
void infrared_sender_update_task(void *pdata) {
 1000b34:	deffe604 	addi	sp,sp,-104
 1000b38:	dfc01915 	stw	ra,100(sp)
 1000b3c:	df001815 	stw	fp,96(sp)
 1000b40:	ddc01715 	stw	r23,92(sp)
 1000b44:	dd801615 	stw	r22,88(sp)
 1000b48:	dd401515 	stw	r21,84(sp)
 1000b4c:	dd001415 	stw	r20,80(sp)
 1000b50:	dcc01315 	stw	r19,76(sp)
 1000b54:	dc801215 	stw	r18,72(sp)
 1000b58:	dc401115 	stw	r17,68(sp)
 1000b5c:	dc001015 	stw	r16,64(sp)
 1000b60:	df001004 	addi	fp,sp,64
 1000b64:	e13ff115 	stw	r4,-60(fp)
 1000b68:	00804074 	movhi	r2,257
 1000b6c:	10b3a604 	addi	r2,r2,-12648
 1000b70:	e0bff815 	stw	r2,-32(fp)
 1000b74:	008040b4 	movhi	r2,258
 1000b78:	1090fd04 	addi	r2,r2,17396
 1000b7c:	e0bff915 	stw	r2,-28(fp)
 1000b80:	e0bffa04 	addi	r2,fp,-24
 1000b84:	e0fff004 	addi	r3,fp,-64
 1000b88:	10c00015 	stw	r3,0(r2)
 1000b8c:	00c04034 	movhi	r3,256
 1000b90:	18c2f704 	addi	r3,r3,3036
 1000b94:	10c00115 	stw	r3,4(r2)
 1000b98:	16c00215 	stw	sp,8(r2)
 1000b9c:	e13ff204 	addi	r4,fp,-56
 1000ba0:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
	printf("InfraredSender [task: update, status: start]\n");
 1000ba4:	00bfffc4 	movi	r2,-1
 1000ba8:	e0bff315 	stw	r2,-52(fp)
 1000bac:	010040b4 	movhi	r4,258
 1000bb0:	21124a04 	addi	r4,r4,18728
 1000bb4:	100eec00 	call	100eec0 <puts>
 1000bb8:	00000006 	br	1000bbc <_Z27infrared_sender_update_taskPv+0x88>
	while (true) {
		try {
			// Update the infrared sender.
			infraredOut->update();
 1000bbc:	008040f4 	movhi	r2,259
 1000bc0:	10a6f604 	addi	r2,r2,-25640
 1000bc4:	10800017 	ldw	r2,0(r2)
 1000bc8:	1009883a 	mov	r4,r2
 1000bcc:	00800044 	movi	r2,1
 1000bd0:	e0bff315 	stw	r2,-52(fp)
 1000bd4:	1000de40 	call	1000de4 <_ZN8Listener6updateEv>
 1000bd8:	003ff806 	br	1000bbc <_Z27infrared_sender_update_taskPv+0x88>
 1000bdc:	e7001004 	addi	fp,fp,64
 1000be0:	e0bff417 	ldw	r2,-48(fp)
 1000be4:	e0bfff15 	stw	r2,-4(fp)
 1000be8:	e0bff517 	ldw	r2,-44(fp)
 1000bec:	10800060 	cmpeqi	r2,r2,1
 1000bf0:	1000041e 	bne	r2,zero,1000c04 <_Z27infrared_sender_update_taskPv+0xd0>
 1000bf4:	00bfffc4 	movi	r2,-1
 1000bf8:	e0bff315 	stw	r2,-52(fp)
 1000bfc:	e13fff17 	ldw	r4,-4(fp)
 1000c00:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
		} catch (ARCapException &e) {
 1000c04:	e13fff17 	ldw	r4,-4(fp)
 1000c08:	100d5500 	call	100d550 <__cxa_begin_catch>
 1000c0c:	e0bff015 	stw	r2,-64(fp)
 1000c10:	e03ff315 	stw	zero,-52(fp)
 1000c14:	100d4ac0 	call	100d4ac <__cxa_end_catch>
extern InfraredSender *infraredOut;

/* Waits for infrared send commands and executes them as they arrive. */
void infrared_sender_update_task(void *pdata) {
	printf("InfraredSender [task: update, status: start]\n");
	while (true) {
 1000c18:	003fe806 	br	1000bbc <_Z27infrared_sender_update_taskPv+0x88>

01000c1c <_ZN8ListenerD2Ev>:
public:
	/**
	 * Creates a new listener.
	 */
	Listener();
	virtual ~Listener() {}
 1000c1c:	defffd04 	addi	sp,sp,-12
 1000c20:	dfc00215 	stw	ra,8(sp)
 1000c24:	df000115 	stw	fp,4(sp)
 1000c28:	df000104 	addi	fp,sp,4
 1000c2c:	e13fff15 	stw	r4,-4(fp)
 1000c30:	00c040b4 	movhi	r3,258
 1000c34:	18d26804 	addi	r3,r3,18848
 1000c38:	e0bfff17 	ldw	r2,-4(fp)
 1000c3c:	10c00015 	stw	r3,0(r2)
 1000c40:	0005883a 	mov	r2,zero
 1000c44:	10803fcc 	andi	r2,r2,255
 1000c48:	1005003a 	cmpeq	r2,r2,zero
 1000c4c:	1000021e 	bne	r2,zero,1000c58 <_ZN8ListenerD2Ev+0x3c>
 1000c50:	e13fff17 	ldw	r4,-4(fp)
 1000c54:	100d6680 	call	100d668 <_ZdlPv>
 1000c58:	e037883a 	mov	sp,fp
 1000c5c:	dfc00117 	ldw	ra,4(sp)
 1000c60:	df000017 	ldw	fp,0(sp)
 1000c64:	dec00204 	addi	sp,sp,8
 1000c68:	f800283a 	ret

01000c6c <_ZN14InfraredSenderD0Ev>:
void infrared_sender_test_task(void *pdata);

/**
 * Listens for send commands on a queue and applies them to the infrared emitters.
 */
class InfraredSender: public Listener {
 1000c6c:	defffd04 	addi	sp,sp,-12
 1000c70:	dfc00215 	stw	ra,8(sp)
 1000c74:	df000115 	stw	fp,4(sp)
 1000c78:	df000104 	addi	fp,sp,4
 1000c7c:	e13fff15 	stw	r4,-4(fp)
 1000c80:	00c040b4 	movhi	r3,258
 1000c84:	18d25804 	addi	r3,r3,18784
 1000c88:	e0bfff17 	ldw	r2,-4(fp)
 1000c8c:	10c00015 	stw	r3,0(r2)
 1000c90:	e13fff17 	ldw	r4,-4(fp)
 1000c94:	1000c1c0 	call	1000c1c <_ZN8ListenerD2Ev>
 1000c98:	00800044 	movi	r2,1
 1000c9c:	10803fcc 	andi	r2,r2,255
 1000ca0:	1005003a 	cmpeq	r2,r2,zero
 1000ca4:	1000021e 	bne	r2,zero,1000cb0 <_ZN14InfraredSenderD0Ev+0x44>
 1000ca8:	e13fff17 	ldw	r4,-4(fp)
 1000cac:	100d6680 	call	100d668 <_ZdlPv>
 1000cb0:	e037883a 	mov	sp,fp
 1000cb4:	dfc00117 	ldw	ra,4(sp)
 1000cb8:	df000017 	ldw	fp,0(sp)
 1000cbc:	dec00204 	addi	sp,sp,8
 1000cc0:	f800283a 	ret

01000cc4 <_ZN8ListenerD0Ev>:
 1000cc4:	defffd04 	addi	sp,sp,-12
 1000cc8:	dfc00215 	stw	ra,8(sp)
 1000ccc:	df000115 	stw	fp,4(sp)
 1000cd0:	df000104 	addi	fp,sp,4
 1000cd4:	e13fff15 	stw	r4,-4(fp)
 1000cd8:	00c040b4 	movhi	r3,258
 1000cdc:	18d26804 	addi	r3,r3,18848
 1000ce0:	e0bfff17 	ldw	r2,-4(fp)
 1000ce4:	10c00015 	stw	r3,0(r2)
 1000ce8:	00800044 	movi	r2,1
 1000cec:	10803fcc 	andi	r2,r2,255
 1000cf0:	1005003a 	cmpeq	r2,r2,zero
 1000cf4:	1000021e 	bne	r2,zero,1000d00 <_ZN8ListenerD0Ev+0x3c>
 1000cf8:	e13fff17 	ldw	r4,-4(fp)
 1000cfc:	100d6680 	call	100d668 <_ZdlPv>
 1000d00:	e037883a 	mov	sp,fp
 1000d04:	dfc00117 	ldw	ra,4(sp)
 1000d08:	df000017 	ldw	fp,0(sp)
 1000d0c:	dec00204 	addi	sp,sp,8
 1000d10:	f800283a 	ret

01000d14 <_ZN8ListenerD1Ev>:
 1000d14:	defffd04 	addi	sp,sp,-12
 1000d18:	dfc00215 	stw	ra,8(sp)
 1000d1c:	df000115 	stw	fp,4(sp)
 1000d20:	df000104 	addi	fp,sp,4
 1000d24:	e13fff15 	stw	r4,-4(fp)
 1000d28:	00c040b4 	movhi	r3,258
 1000d2c:	18d26804 	addi	r3,r3,18848
 1000d30:	e0bfff17 	ldw	r2,-4(fp)
 1000d34:	10c00015 	stw	r3,0(r2)
 1000d38:	0005883a 	mov	r2,zero
 1000d3c:	10803fcc 	andi	r2,r2,255
 1000d40:	1005003a 	cmpeq	r2,r2,zero
 1000d44:	1000021e 	bne	r2,zero,1000d50 <_ZN8ListenerD1Ev+0x3c>
 1000d48:	e13fff17 	ldw	r4,-4(fp)
 1000d4c:	100d6680 	call	100d668 <_ZdlPv>
 1000d50:	e037883a 	mov	sp,fp
 1000d54:	dfc00117 	ldw	ra,4(sp)
 1000d58:	df000017 	ldw	fp,0(sp)
 1000d5c:	dec00204 	addi	sp,sp,8
 1000d60:	f800283a 	ret

01000d64 <_ZN14InfraredSenderD1Ev>:
 1000d64:	defffd04 	addi	sp,sp,-12
 1000d68:	dfc00215 	stw	ra,8(sp)
 1000d6c:	df000115 	stw	fp,4(sp)
 1000d70:	df000104 	addi	fp,sp,4
 1000d74:	e13fff15 	stw	r4,-4(fp)
 1000d78:	00c040b4 	movhi	r3,258
 1000d7c:	18d25804 	addi	r3,r3,18784
 1000d80:	e0bfff17 	ldw	r2,-4(fp)
 1000d84:	10c00015 	stw	r3,0(r2)
 1000d88:	e13fff17 	ldw	r4,-4(fp)
 1000d8c:	1000c1c0 	call	1000c1c <_ZN8ListenerD2Ev>
 1000d90:	0005883a 	mov	r2,zero
 1000d94:	10803fcc 	andi	r2,r2,255
 1000d98:	1005003a 	cmpeq	r2,r2,zero
 1000d9c:	1000021e 	bne	r2,zero,1000da8 <_ZN14InfraredSenderD1Ev+0x44>
 1000da0:	e13fff17 	ldw	r4,-4(fp)
 1000da4:	100d6680 	call	100d668 <_ZdlPv>
 1000da8:	e037883a 	mov	sp,fp
 1000dac:	dfc00117 	ldw	ra,4(sp)
 1000db0:	df000017 	ldw	fp,0(sp)
 1000db4:	dec00204 	addi	sp,sp,8
 1000db8:	f800283a 	ret

01000dbc <_ZN8Listener8listenerEv>:

/*
 * Gets the queue used to accept events.
 * @return the receive queue
 */
OS_EVENT *Listener::listener() {
 1000dbc:	defffe04 	addi	sp,sp,-8
 1000dc0:	df000115 	stw	fp,4(sp)
 1000dc4:	df000104 	addi	fp,sp,4
 1000dc8:	e13fff15 	stw	r4,-4(fp)
	return receiveQueue;
 1000dcc:	e0bfff17 	ldw	r2,-4(fp)
 1000dd0:	10800517 	ldw	r2,20(r2)
}
 1000dd4:	e037883a 	mov	sp,fp
 1000dd8:	df000017 	ldw	fp,0(sp)
 1000ddc:	dec00104 	addi	sp,sp,4
 1000de0:	f800283a 	ret

01000de4 <_ZN8Listener6updateEv>:
/**
 * Waits on the receive queue for event.
 * When events are received, they are forwarded to parse().
 * @throw QueuePendException if this listener cannot read the receive queue
 */
void Listener::update() {
 1000de4:	defffa04 	addi	sp,sp,-24
 1000de8:	dfc00515 	stw	ra,20(sp)
 1000dec:	df000415 	stw	fp,16(sp)
 1000df0:	dc000315 	stw	r16,12(sp)
 1000df4:	df000304 	addi	fp,sp,12
 1000df8:	e13fff15 	stw	r4,-4(fp)
	INT8U status;
	char *event = (char *)OSQPend(receiveQueue, 0, &status);
 1000dfc:	e0bfff17 	ldw	r2,-4(fp)
 1000e00:	11000517 	ldw	r4,20(r2)
 1000e04:	e1bffe04 	addi	r6,fp,-8
 1000e08:	000b883a 	mov	r5,zero
 1000e0c:	101e1680 	call	101e168 <OSQPend>
 1000e10:	e0bffd15 	stw	r2,-12(fp)
	if (status != OS_NO_ERR) {
 1000e14:	e0bffe03 	ldbu	r2,-8(fp)
 1000e18:	10803fcc 	andi	r2,r2,255
 1000e1c:	1005003a 	cmpeq	r2,r2,zero
 1000e20:	10000e1e 	bne	r2,zero,1000e5c <_ZN8Listener6updateEv+0x78>
		throw new QueuePendException();
 1000e24:	01000104 	movi	r4,4
 1000e28:	100dbf80 	call	100dbf8 <_Znwm>
 1000e2c:	1021883a 	mov	r16,r2
 1000e30:	8009883a 	mov	r4,r16
 1000e34:	10010700 	call	1001070 <_ZN18QueuePendExceptionC1Ev>
 1000e38:	01000104 	movi	r4,4
 1000e3c:	100da700 	call	100da70 <__cxa_allocate_exception>
 1000e40:	1009883a 	mov	r4,r2
 1000e44:	2005883a 	mov	r2,r4
 1000e48:	14000015 	stw	r16,0(r2)
 1000e4c:	014040b4 	movhi	r5,258
 1000e50:	29527d04 	addi	r5,r5,18932
 1000e54:	000d883a 	mov	r6,zero
 1000e58:	100d6e80 	call	100d6e8 <__cxa_throw>
	} else {
		parse(event);
 1000e5c:	e0bfff17 	ldw	r2,-4(fp)
 1000e60:	10800017 	ldw	r2,0(r2)
 1000e64:	10800204 	addi	r2,r2,8
 1000e68:	10800017 	ldw	r2,0(r2)
 1000e6c:	e13fff17 	ldw	r4,-4(fp)
 1000e70:	e17ffd17 	ldw	r5,-12(fp)
 1000e74:	103ee83a 	callr	r2
	}
}
 1000e78:	e037883a 	mov	sp,fp
 1000e7c:	dfc00217 	ldw	ra,8(sp)
 1000e80:	df000117 	ldw	fp,4(sp)
 1000e84:	dc000017 	ldw	r16,0(sp)
 1000e88:	dec00304 	addi	sp,sp,12
 1000e8c:	f800283a 	ret

01000e90 <_ZN8ListenerC1Ev>:
// CONSTRUCTION

/**
 * Creates a new listener.
 */
Listener::Listener() {
 1000e90:	defffc04 	addi	sp,sp,-16
 1000e94:	dfc00315 	stw	ra,12(sp)
 1000e98:	df000215 	stw	fp,8(sp)
 1000e9c:	dc000115 	stw	r16,4(sp)
 1000ea0:	df000104 	addi	fp,sp,4
 1000ea4:	e13fff15 	stw	r4,-4(fp)
 1000ea8:	00c040b4 	movhi	r3,258
 1000eac:	18d26804 	addi	r3,r3,18848
 1000eb0:	e0bfff17 	ldw	r2,-4(fp)
 1000eb4:	10c00015 	stw	r3,0(r2)
	/* Create the receive queue. */
	receiveQueue = OSQCreate((void**)&receiveBuffer, LISTENER_RECEIVE_QUEUE_SIZE);
 1000eb8:	e0bfff17 	ldw	r2,-4(fp)
 1000ebc:	10800104 	addi	r2,r2,4
 1000ec0:	1009883a 	mov	r4,r2
 1000ec4:	01400104 	movi	r5,4
 1000ec8:	101db8c0 	call	101db8c <OSQCreate>
 1000ecc:	1007883a 	mov	r3,r2
 1000ed0:	e0bfff17 	ldw	r2,-4(fp)
 1000ed4:	10c00515 	stw	r3,20(r2)
	if (receiveQueue == NULL) {
 1000ed8:	e0bfff17 	ldw	r2,-4(fp)
 1000edc:	10800517 	ldw	r2,20(r2)
 1000ee0:	1004c03a 	cmpne	r2,r2,zero
 1000ee4:	10000e1e 	bne	r2,zero,1000f20 <_ZN8ListenerC1Ev+0x90>
		throw new QueueCreateException();
 1000ee8:	01000104 	movi	r4,4
 1000eec:	100dbf80 	call	100dbf8 <_Znwm>
 1000ef0:	1021883a 	mov	r16,r2
 1000ef4:	8009883a 	mov	r4,r16
 1000ef8:	10010300 	call	1001030 <_ZN20QueueCreateExceptionC1Ev>
 1000efc:	01000104 	movi	r4,4
 1000f00:	100da700 	call	100da70 <__cxa_allocate_exception>
 1000f04:	1009883a 	mov	r4,r2
 1000f08:	2005883a 	mov	r2,r4
 1000f0c:	14000015 	stw	r16,0(r2)
 1000f10:	014040b4 	movhi	r5,258
 1000f14:	29529804 	addi	r5,r5,19040
 1000f18:	000d883a 	mov	r6,zero
 1000f1c:	100d6e80 	call	100d6e8 <__cxa_throw>
	}
}
 1000f20:	e037883a 	mov	sp,fp
 1000f24:	dfc00217 	ldw	ra,8(sp)
 1000f28:	df000117 	ldw	fp,4(sp)
 1000f2c:	dc000017 	ldw	r16,0(sp)
 1000f30:	dec00304 	addi	sp,sp,12
 1000f34:	f800283a 	ret

01000f38 <_ZN8ListenerC2Ev>:
// CONSTRUCTION

/**
 * Creates a new listener.
 */
Listener::Listener() {
 1000f38:	defffc04 	addi	sp,sp,-16
 1000f3c:	dfc00315 	stw	ra,12(sp)
 1000f40:	df000215 	stw	fp,8(sp)
 1000f44:	dc000115 	stw	r16,4(sp)
 1000f48:	df000104 	addi	fp,sp,4
 1000f4c:	e13fff15 	stw	r4,-4(fp)
 1000f50:	00c040b4 	movhi	r3,258
 1000f54:	18d26804 	addi	r3,r3,18848
 1000f58:	e0bfff17 	ldw	r2,-4(fp)
 1000f5c:	10c00015 	stw	r3,0(r2)
	/* Create the receive queue. */
	receiveQueue = OSQCreate((void**)&receiveBuffer, LISTENER_RECEIVE_QUEUE_SIZE);
 1000f60:	e0bfff17 	ldw	r2,-4(fp)
 1000f64:	10800104 	addi	r2,r2,4
 1000f68:	1009883a 	mov	r4,r2
 1000f6c:	01400104 	movi	r5,4
 1000f70:	101db8c0 	call	101db8c <OSQCreate>
 1000f74:	1007883a 	mov	r3,r2
 1000f78:	e0bfff17 	ldw	r2,-4(fp)
 1000f7c:	10c00515 	stw	r3,20(r2)
	if (receiveQueue == NULL) {
 1000f80:	e0bfff17 	ldw	r2,-4(fp)
 1000f84:	10800517 	ldw	r2,20(r2)
 1000f88:	1004c03a 	cmpne	r2,r2,zero
 1000f8c:	10000e1e 	bne	r2,zero,1000fc8 <_ZN8ListenerC2Ev+0x90>
		throw new QueueCreateException();
 1000f90:	01000104 	movi	r4,4
 1000f94:	100dbf80 	call	100dbf8 <_Znwm>
 1000f98:	1021883a 	mov	r16,r2
 1000f9c:	8009883a 	mov	r4,r16
 1000fa0:	10010300 	call	1001030 <_ZN20QueueCreateExceptionC1Ev>
 1000fa4:	01000104 	movi	r4,4
 1000fa8:	100da700 	call	100da70 <__cxa_allocate_exception>
 1000fac:	1009883a 	mov	r4,r2
 1000fb0:	2005883a 	mov	r2,r4
 1000fb4:	14000015 	stw	r16,0(r2)
 1000fb8:	014040b4 	movhi	r5,258
 1000fbc:	29529804 	addi	r5,r5,19040
 1000fc0:	000d883a 	mov	r6,zero
 1000fc4:	100d6e80 	call	100d6e8 <__cxa_throw>
	}
}
 1000fc8:	e037883a 	mov	sp,fp
 1000fcc:	dfc00217 	ldw	ra,8(sp)
 1000fd0:	df000117 	ldw	fp,4(sp)
 1000fd4:	dc000017 	ldw	r16,0(sp)
 1000fd8:	dec00304 	addi	sp,sp,12
 1000fdc:	f800283a 	ret

01000fe0 <_ZNK20QueueCreateException4whatEv>:

};

class QueueCreateException : ARCapException {
public:
	virtual const char *what() const throw() {
 1000fe0:	defffe04 	addi	sp,sp,-8
 1000fe4:	df000115 	stw	fp,4(sp)
 1000fe8:	df000104 	addi	fp,sp,4
 1000fec:	e13fff15 	stw	r4,-4(fp)
		return "Failed to create listener queue.";
 1000ff0:	008040b4 	movhi	r2,258
 1000ff4:	10926b04 	addi	r2,r2,18860
	}
 1000ff8:	e037883a 	mov	sp,fp
 1000ffc:	df000017 	ldw	fp,0(sp)
 1001000:	dec00104 	addi	sp,sp,4
 1001004:	f800283a 	ret

01001008 <_ZNK18QueuePendException4whatEv>:
};

class QueuePendException : ARCapException {
public:
	virtual const char *what() const throw() {
 1001008:	defffe04 	addi	sp,sp,-8
 100100c:	df000115 	stw	fp,4(sp)
 1001010:	df000104 	addi	fp,sp,4
 1001014:	e13fff15 	stw	r4,-4(fp)
		return "Failed to pend on listener queue.";
 1001018:	008040b4 	movhi	r2,258
 100101c:	10927404 	addi	r2,r2,18896
	}
 1001020:	e037883a 	mov	sp,fp
 1001024:	df000017 	ldw	fp,0(sp)
 1001028:	dec00104 	addi	sp,sp,4
 100102c:	f800283a 	ret

01001030 <_ZN20QueueCreateExceptionC1Ev>:
	 */
	virtual void parse(char *event) = 0;

};

class QueueCreateException : ARCapException {
 1001030:	defffd04 	addi	sp,sp,-12
 1001034:	dfc00215 	stw	ra,8(sp)
 1001038:	df000115 	stw	fp,4(sp)
 100103c:	df000104 	addi	fp,sp,4
 1001040:	e13fff15 	stw	r4,-4(fp)
 1001044:	e13fff17 	ldw	r4,-4(fp)
 1001048:	10006c40 	call	10006c4 <_ZN14ARCapExceptionC2Ev>
 100104c:	00c040b4 	movhi	r3,258
 1001050:	18d2b004 	addi	r3,r3,19136
 1001054:	e0bfff17 	ldw	r2,-4(fp)
 1001058:	10c00015 	stw	r3,0(r2)
 100105c:	e037883a 	mov	sp,fp
 1001060:	dfc00117 	ldw	ra,4(sp)
 1001064:	df000017 	ldw	fp,0(sp)
 1001068:	dec00204 	addi	sp,sp,8
 100106c:	f800283a 	ret

01001070 <_ZN18QueuePendExceptionC1Ev>:
	virtual const char *what() const throw() {
		return "Failed to create listener queue.";
	}
};

class QueuePendException : ARCapException {
 1001070:	defffd04 	addi	sp,sp,-12
 1001074:	dfc00215 	stw	ra,8(sp)
 1001078:	df000115 	stw	fp,4(sp)
 100107c:	df000104 	addi	fp,sp,4
 1001080:	e13fff15 	stw	r4,-4(fp)
 1001084:	e13fff17 	ldw	r4,-4(fp)
 1001088:	10006c40 	call	10006c4 <_ZN14ARCapExceptionC2Ev>
 100108c:	00c040b4 	movhi	r3,258
 1001090:	18d29504 	addi	r3,r3,19028
 1001094:	e0bfff17 	ldw	r2,-4(fp)
 1001098:	10c00015 	stw	r3,0(r2)
 100109c:	e037883a 	mov	sp,fp
 10010a0:	dfc00117 	ldw	ra,4(sp)
 10010a4:	df000017 	ldw	fp,0(sp)
 10010a8:	dec00204 	addi	sp,sp,8
 10010ac:	f800283a 	ret

010010b0 <_ZN18QueuePendExceptionD0Ev>:
 10010b0:	defffd04 	addi	sp,sp,-12
 10010b4:	dfc00215 	stw	ra,8(sp)
 10010b8:	df000115 	stw	fp,4(sp)
 10010bc:	df000104 	addi	fp,sp,4
 10010c0:	e13fff15 	stw	r4,-4(fp)
 10010c4:	00c040b4 	movhi	r3,258
 10010c8:	18d29504 	addi	r3,r3,19028
 10010cc:	e0bfff17 	ldw	r2,-4(fp)
 10010d0:	10c00015 	stw	r3,0(r2)
 10010d4:	e13fff17 	ldw	r4,-4(fp)
 10010d8:	10007840 	call	1000784 <_ZN14ARCapExceptionD2Ev>
 10010dc:	00800044 	movi	r2,1
 10010e0:	10803fcc 	andi	r2,r2,255
 10010e4:	1005003a 	cmpeq	r2,r2,zero
 10010e8:	1000021e 	bne	r2,zero,10010f4 <_ZN18QueuePendExceptionD0Ev+0x44>
 10010ec:	e13fff17 	ldw	r4,-4(fp)
 10010f0:	100d6680 	call	100d668 <_ZdlPv>
 10010f4:	e037883a 	mov	sp,fp
 10010f8:	dfc00117 	ldw	ra,4(sp)
 10010fc:	df000017 	ldw	fp,0(sp)
 1001100:	dec00204 	addi	sp,sp,8
 1001104:	f800283a 	ret

01001108 <_ZN18QueuePendExceptionD1Ev>:
 1001108:	defffd04 	addi	sp,sp,-12
 100110c:	dfc00215 	stw	ra,8(sp)
 1001110:	df000115 	stw	fp,4(sp)
 1001114:	df000104 	addi	fp,sp,4
 1001118:	e13fff15 	stw	r4,-4(fp)
 100111c:	00c040b4 	movhi	r3,258
 1001120:	18d29504 	addi	r3,r3,19028
 1001124:	e0bfff17 	ldw	r2,-4(fp)
 1001128:	10c00015 	stw	r3,0(r2)
 100112c:	e13fff17 	ldw	r4,-4(fp)
 1001130:	10007840 	call	1000784 <_ZN14ARCapExceptionD2Ev>
 1001134:	0005883a 	mov	r2,zero
 1001138:	10803fcc 	andi	r2,r2,255
 100113c:	1005003a 	cmpeq	r2,r2,zero
 1001140:	1000021e 	bne	r2,zero,100114c <_ZN18QueuePendExceptionD1Ev+0x44>
 1001144:	e13fff17 	ldw	r4,-4(fp)
 1001148:	100d6680 	call	100d668 <_ZdlPv>
 100114c:	e037883a 	mov	sp,fp
 1001150:	dfc00117 	ldw	ra,4(sp)
 1001154:	df000017 	ldw	fp,0(sp)
 1001158:	dec00204 	addi	sp,sp,8
 100115c:	f800283a 	ret

01001160 <_ZN20QueueCreateExceptionD0Ev>:
	 */
	virtual void parse(char *event) = 0;

};

class QueueCreateException : ARCapException {
 1001160:	defffd04 	addi	sp,sp,-12
 1001164:	dfc00215 	stw	ra,8(sp)
 1001168:	df000115 	stw	fp,4(sp)
 100116c:	df000104 	addi	fp,sp,4
 1001170:	e13fff15 	stw	r4,-4(fp)
 1001174:	00c040b4 	movhi	r3,258
 1001178:	18d2b004 	addi	r3,r3,19136
 100117c:	e0bfff17 	ldw	r2,-4(fp)
 1001180:	10c00015 	stw	r3,0(r2)
 1001184:	e13fff17 	ldw	r4,-4(fp)
 1001188:	10007840 	call	1000784 <_ZN14ARCapExceptionD2Ev>
 100118c:	00800044 	movi	r2,1
 1001190:	10803fcc 	andi	r2,r2,255
 1001194:	1005003a 	cmpeq	r2,r2,zero
 1001198:	1000021e 	bne	r2,zero,10011a4 <_ZN20QueueCreateExceptionD0Ev+0x44>
 100119c:	e13fff17 	ldw	r4,-4(fp)
 10011a0:	100d6680 	call	100d668 <_ZdlPv>
 10011a4:	e037883a 	mov	sp,fp
 10011a8:	dfc00117 	ldw	ra,4(sp)
 10011ac:	df000017 	ldw	fp,0(sp)
 10011b0:	dec00204 	addi	sp,sp,8
 10011b4:	f800283a 	ret

010011b8 <_ZN20QueueCreateExceptionD1Ev>:
 10011b8:	defffd04 	addi	sp,sp,-12
 10011bc:	dfc00215 	stw	ra,8(sp)
 10011c0:	df000115 	stw	fp,4(sp)
 10011c4:	df000104 	addi	fp,sp,4
 10011c8:	e13fff15 	stw	r4,-4(fp)
 10011cc:	00c040b4 	movhi	r3,258
 10011d0:	18d2b004 	addi	r3,r3,19136
 10011d4:	e0bfff17 	ldw	r2,-4(fp)
 10011d8:	10c00015 	stw	r3,0(r2)
 10011dc:	e13fff17 	ldw	r4,-4(fp)
 10011e0:	10007840 	call	1000784 <_ZN14ARCapExceptionD2Ev>
 10011e4:	0005883a 	mov	r2,zero
 10011e8:	10803fcc 	andi	r2,r2,255
 10011ec:	1005003a 	cmpeq	r2,r2,zero
 10011f0:	1000021e 	bne	r2,zero,10011fc <_ZN20QueueCreateExceptionD1Ev+0x44>
 10011f4:	e13fff17 	ldw	r4,-4(fp)
 10011f8:	100d6680 	call	100d668 <_ZdlPv>
 10011fc:	e037883a 	mov	sp,fp
 1001200:	dfc00117 	ldw	ra,4(sp)
 1001204:	df000017 	ldw	fp,0(sp)
 1001208:	dec00204 	addi	sp,sp,8
 100120c:	f800283a 	ret

01001210 <_ZN12MotorHandler4testEv>:

/**
 * Tests the motor controller.
 * Runs both motors forward, both backward, left forward and backward, right forward and backward.
 */
void MotorHandler::test() {
 1001210:	defffd04 	addi	sp,sp,-12
 1001214:	dfc00215 	stw	ra,8(sp)
 1001218:	df000115 	stw	fp,4(sp)
 100121c:	df000104 	addi	fp,sp,4
 1001220:	e13fff15 	stw	r4,-4(fp)
	OSTimeDlyHMSM(0, 0, 3, 0);
 1001224:	0009883a 	mov	r4,zero
 1001228:	000b883a 	mov	r5,zero
 100122c:	018000c4 	movi	r6,3
 1001230:	000f883a 	mov	r7,zero
 1001234:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
	// Go forward.
	parse("mlf120");
 1001238:	e0bfff17 	ldw	r2,-4(fp)
 100123c:	10800017 	ldw	r2,0(r2)
 1001240:	10800204 	addi	r2,r2,8
 1001244:	10800017 	ldw	r2,0(r2)
 1001248:	e13fff17 	ldw	r4,-4(fp)
 100124c:	014040b4 	movhi	r5,258
 1001250:	2952bc04 	addi	r5,r5,19184
 1001254:	103ee83a 	callr	r2
	parse("mrf120");
 1001258:	e0bfff17 	ldw	r2,-4(fp)
 100125c:	10800017 	ldw	r2,0(r2)
 1001260:	10800204 	addi	r2,r2,8
 1001264:	10800017 	ldw	r2,0(r2)
 1001268:	e13fff17 	ldw	r4,-4(fp)
 100126c:	014040b4 	movhi	r5,258
 1001270:	2952be04 	addi	r5,r5,19192
 1001274:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 2, 0);
 1001278:	0009883a 	mov	r4,zero
 100127c:	000b883a 	mov	r5,zero
 1001280:	01800084 	movi	r6,2
 1001284:	000f883a 	mov	r7,zero
 1001288:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
	// Stop.
	parse("mlf0");
 100128c:	e0bfff17 	ldw	r2,-4(fp)
 1001290:	10800017 	ldw	r2,0(r2)
 1001294:	10800204 	addi	r2,r2,8
 1001298:	10800017 	ldw	r2,0(r2)
 100129c:	e13fff17 	ldw	r4,-4(fp)
 10012a0:	014040b4 	movhi	r5,258
 10012a4:	2952c004 	addi	r5,r5,19200
 10012a8:	103ee83a 	callr	r2
	parse("mrf0");
 10012ac:	e0bfff17 	ldw	r2,-4(fp)
 10012b0:	10800017 	ldw	r2,0(r2)
 10012b4:	10800204 	addi	r2,r2,8
 10012b8:	10800017 	ldw	r2,0(r2)
 10012bc:	e13fff17 	ldw	r4,-4(fp)
 10012c0:	014040b4 	movhi	r5,258
 10012c4:	2952c204 	addi	r5,r5,19208
 10012c8:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 5, 0);
 10012cc:	0009883a 	mov	r4,zero
 10012d0:	000b883a 	mov	r5,zero
 10012d4:	01800144 	movi	r6,5
 10012d8:	000f883a 	mov	r7,zero
 10012dc:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
	// Go backward.
	parse("mlb120");
 10012e0:	e0bfff17 	ldw	r2,-4(fp)
 10012e4:	10800017 	ldw	r2,0(r2)
 10012e8:	10800204 	addi	r2,r2,8
 10012ec:	10800017 	ldw	r2,0(r2)
 10012f0:	e13fff17 	ldw	r4,-4(fp)
 10012f4:	014040b4 	movhi	r5,258
 10012f8:	2952c404 	addi	r5,r5,19216
 10012fc:	103ee83a 	callr	r2
	parse("mrb120");
 1001300:	e0bfff17 	ldw	r2,-4(fp)
 1001304:	10800017 	ldw	r2,0(r2)
 1001308:	10800204 	addi	r2,r2,8
 100130c:	10800017 	ldw	r2,0(r2)
 1001310:	e13fff17 	ldw	r4,-4(fp)
 1001314:	014040b4 	movhi	r5,258
 1001318:	2952c604 	addi	r5,r5,19224
 100131c:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 2, 0);
 1001320:	0009883a 	mov	r4,zero
 1001324:	000b883a 	mov	r5,zero
 1001328:	01800084 	movi	r6,2
 100132c:	000f883a 	mov	r7,zero
 1001330:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
	// Stop.
	parse("mlf0");
 1001334:	e0bfff17 	ldw	r2,-4(fp)
 1001338:	10800017 	ldw	r2,0(r2)
 100133c:	10800204 	addi	r2,r2,8
 1001340:	10800017 	ldw	r2,0(r2)
 1001344:	e13fff17 	ldw	r4,-4(fp)
 1001348:	014040b4 	movhi	r5,258
 100134c:	2952c004 	addi	r5,r5,19200
 1001350:	103ee83a 	callr	r2
	parse("mrf0");
 1001354:	e0bfff17 	ldw	r2,-4(fp)
 1001358:	10800017 	ldw	r2,0(r2)
 100135c:	10800204 	addi	r2,r2,8
 1001360:	10800017 	ldw	r2,0(r2)
 1001364:	e13fff17 	ldw	r4,-4(fp)
 1001368:	014040b4 	movhi	r5,258
 100136c:	2952c204 	addi	r5,r5,19208
 1001370:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 5, 0);
 1001374:	0009883a 	mov	r4,zero
 1001378:	000b883a 	mov	r5,zero
 100137c:	01800144 	movi	r6,5
 1001380:	000f883a 	mov	r7,zero
 1001384:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
	// Turn left.
	parse("mrf120");
 1001388:	e0bfff17 	ldw	r2,-4(fp)
 100138c:	10800017 	ldw	r2,0(r2)
 1001390:	10800204 	addi	r2,r2,8
 1001394:	10800017 	ldw	r2,0(r2)
 1001398:	e13fff17 	ldw	r4,-4(fp)
 100139c:	014040b4 	movhi	r5,258
 10013a0:	2952be04 	addi	r5,r5,19192
 10013a4:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 2, 0);
 10013a8:	0009883a 	mov	r4,zero
 10013ac:	000b883a 	mov	r5,zero
 10013b0:	01800084 	movi	r6,2
 10013b4:	000f883a 	mov	r7,zero
 10013b8:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
	// Stop.
	parse("mrf0");
 10013bc:	e0bfff17 	ldw	r2,-4(fp)
 10013c0:	10800017 	ldw	r2,0(r2)
 10013c4:	10800204 	addi	r2,r2,8
 10013c8:	10800017 	ldw	r2,0(r2)
 10013cc:	e13fff17 	ldw	r4,-4(fp)
 10013d0:	014040b4 	movhi	r5,258
 10013d4:	2952c204 	addi	r5,r5,19208
 10013d8:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 5, 0);
 10013dc:	0009883a 	mov	r4,zero
 10013e0:	000b883a 	mov	r5,zero
 10013e4:	01800144 	movi	r6,5
 10013e8:	000f883a 	mov	r7,zero
 10013ec:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
	// Turn right.
	parse("mlf120");
 10013f0:	e0bfff17 	ldw	r2,-4(fp)
 10013f4:	10800017 	ldw	r2,0(r2)
 10013f8:	10800204 	addi	r2,r2,8
 10013fc:	10800017 	ldw	r2,0(r2)
 1001400:	e13fff17 	ldw	r4,-4(fp)
 1001404:	014040b4 	movhi	r5,258
 1001408:	2952bc04 	addi	r5,r5,19184
 100140c:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 2, 0);
 1001410:	0009883a 	mov	r4,zero
 1001414:	000b883a 	mov	r5,zero
 1001418:	01800084 	movi	r6,2
 100141c:	000f883a 	mov	r7,zero
 1001420:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
	// Stop.
	parse("mlf0");
 1001424:	e0bfff17 	ldw	r2,-4(fp)
 1001428:	10800017 	ldw	r2,0(r2)
 100142c:	10800204 	addi	r2,r2,8
 1001430:	10800017 	ldw	r2,0(r2)
 1001434:	e13fff17 	ldw	r4,-4(fp)
 1001438:	014040b4 	movhi	r5,258
 100143c:	2952c004 	addi	r5,r5,19200
 1001440:	103ee83a 	callr	r2
	OSTimeDlyHMSM(0, 0, 5, 0);
 1001444:	0009883a 	mov	r4,zero
 1001448:	000b883a 	mov	r5,zero
 100144c:	01800144 	movi	r6,5
 1001450:	000f883a 	mov	r7,zero
 1001454:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
}
 1001458:	e037883a 	mov	sp,fp
 100145c:	dfc00117 	ldw	ra,4(sp)
 1001460:	df000017 	ldw	fp,0(sp)
 1001464:	dec00204 	addi	sp,sp,8
 1001468:	f800283a 	ret

0100146c <_ZN12MotorHandler4sendEcPKc>:
/**
 * Sends a byte-length message to the motor controller.
 * @param message - the message to send
 * @param description - the string description of the message, for debugging
 */
void MotorHandler::send(char message, const char *description) {
 100146c:	defff904 	addi	sp,sp,-28
 1001470:	dfc00615 	stw	ra,24(sp)
 1001474:	df000515 	stw	fp,20(sp)
 1001478:	df000504 	addi	fp,sp,20
 100147c:	e13ffd15 	stw	r4,-12(fp)
 1001480:	e1bfff15 	stw	r6,-4(fp)
 1001484:	e17ffe05 	stb	r5,-8(fp)
	alt_u32 write_space;
	// Check for write space.
	write_space = alt_up_rs232_get_available_space_in_write_FIFO(motor_dev);
 1001488:	e0bffd17 	ldw	r2,-12(fp)
 100148c:	11000617 	ldw	r4,24(r2)
 1001490:	1022ab40 	call	1022ab4 <alt_up_rs232_get_available_space_in_write_FIFO>
 1001494:	e0bffc15 	stw	r2,-16(fp)
	if (write_space >= WRITE_FIFO_EMPTY) {
 1001498:	e0bffc17 	ldw	r2,-16(fp)
 100149c:	10802030 	cmpltui	r2,r2,128
 10014a0:	1000121e 	bne	r2,zero,10014ec <_ZN12MotorHandler4sendEcPKc+0x80>
		// If space, write.
		int status = alt_up_rs232_write_data(motor_dev, message);
 10014a4:	e0bffd17 	ldw	r2,-12(fp)
 10014a8:	11000617 	ldw	r4,24(r2)
 10014ac:	e0bffe03 	ldbu	r2,-8(fp)
 10014b0:	11403fcc 	andi	r5,r2,255
 10014b4:	1022b440 	call	1022b44 <alt_up_rs232_write_data>
 10014b8:	e0bffb15 	stw	r2,-20(fp)
		MOTORHANDLER_LOG(printf("MotorHandler [message: 0x%02x, description: %s]\n", message, description));
 10014bc:	e17ffe07 	ldb	r5,-8(fp)
 10014c0:	010040b4 	movhi	r4,258
 10014c4:	2112c804 	addi	r4,r4,19232
 10014c8:	e1bfff17 	ldw	r6,-4(fp)
 10014cc:	100ed840 	call	100ed84 <printf>
		// Log errors.
		if (status != OK) MOTORHANDLER_LOG(printf("MotorHandler [error: cannot write]\n"));
 10014d0:	e0bffb17 	ldw	r2,-20(fp)
 10014d4:	1005003a 	cmpeq	r2,r2,zero
 10014d8:	1000121e 	bne	r2,zero,1001524 <_ZN12MotorHandler4sendEcPKc+0xb8>
 10014dc:	010040b4 	movhi	r4,258
 10014e0:	2112d504 	addi	r4,r4,19284
 10014e4:	100eec00 	call	100eec0 <puts>
 10014e8:	00000e06 	br	1001524 <_ZN12MotorHandler4sendEcPKc+0xb8>
	} else {
		// If no space, wait and retry.
		MOTORHANDLER_LOG(printf("MotorHandler [message: 0x%02x, description: %s, error: no write space; retrying]\n", message, description));
 10014ec:	e17ffe07 	ldb	r5,-8(fp)
 10014f0:	010040b4 	movhi	r4,258
 10014f4:	2112de04 	addi	r4,r4,19320
 10014f8:	e1bfff17 	ldw	r6,-4(fp)
 10014fc:	100ed840 	call	100ed84 <printf>
		OSTimeDlyHMSM(0, 0, 0, 10);
 1001500:	0009883a 	mov	r4,zero
 1001504:	000b883a 	mov	r5,zero
 1001508:	000d883a 	mov	r6,zero
 100150c:	01c00284 	movi	r7,10
 1001510:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
		send(message, description);
 1001514:	e17ffe07 	ldb	r5,-8(fp)
 1001518:	e13ffd17 	ldw	r4,-12(fp)
 100151c:	e1bfff17 	ldw	r6,-4(fp)
 1001520:	100146c0 	call	100146c <_ZN12MotorHandler4sendEcPKc>
	}
}
 1001524:	e037883a 	mov	sp,fp
 1001528:	dfc00117 	ldw	ra,4(sp)
 100152c:	df000017 	ldw	fp,0(sp)
 1001530:	dec00204 	addi	sp,sp,8
 1001534:	f800283a 	ret

01001538 <_Z23motor_handler_test_taskPv>:
		}
	}
}

/* @test Executes the motor handler test suite. */
void motor_handler_test_task(void *pdata) {
 1001538:	defffd04 	addi	sp,sp,-12
 100153c:	dfc00215 	stw	ra,8(sp)
 1001540:	df000115 	stw	fp,4(sp)
 1001544:	df000104 	addi	fp,sp,4
 1001548:	e13fff15 	stw	r4,-4(fp)
	printf("MotorHandler [task: test, status: start]\n");
 100154c:	010040b4 	movhi	r4,258
 1001550:	2112f304 	addi	r4,r4,19404
 1001554:	100eec00 	call	100eec0 <puts>
	while (true) {
		motor->test();
 1001558:	008040f4 	movhi	r2,259
 100155c:	10a6f704 	addi	r2,r2,-25636
 1001560:	11000017 	ldw	r4,0(r2)
 1001564:	10012100 	call	1001210 <_ZN12MotorHandler4testEv>
}

/* @test Executes the motor handler test suite. */
void motor_handler_test_task(void *pdata) {
	printf("MotorHandler [task: test, status: start]\n");
	while (true) {
 1001568:	003ffb06 	br	1001558 <_Z23motor_handler_test_taskPv+0x20>

0100156c <_ZN12MotorHandler4moveEccPKc>:
 * Moves in the given direction at constant speed.
 * @param direction - the motor and direction to move in, e.g. MOTOR_MOTOR1_FORWARD
 * @param speed speed of the motor
 * @param description - the string description of the movement, for debugging
 */
void MotorHandler::move(char motorDirection, char speed, const char *description){
 100156c:	defffa04 	addi	sp,sp,-24
 1001570:	dfc00515 	stw	ra,20(sp)
 1001574:	df000415 	stw	fp,16(sp)
 1001578:	df000404 	addi	fp,sp,16
 100157c:	e13ffc15 	stw	r4,-16(fp)
 1001580:	e1ffff15 	stw	r7,-4(fp)
 1001584:	e17ffd05 	stb	r5,-12(fp)
 1001588:	e1bffe05 	stb	r6,-8(fp)
	send(MOTOR_START_BYTE, "start");
 100158c:	e13ffc17 	ldw	r4,-16(fp)
 1001590:	017fe004 	movi	r5,-128
 1001594:	018040b4 	movhi	r6,258
 1001598:	3192fe04 	addi	r6,r6,19448
 100159c:	100146c0 	call	100146c <_ZN12MotorHandler4sendEcPKc>
	send(MOTOR_DEVICE_TYPE, "device");
 10015a0:	e13ffc17 	ldw	r4,-16(fp)
 10015a4:	000b883a 	mov	r5,zero
 10015a8:	018040b4 	movhi	r6,258
 10015ac:	31930004 	addi	r6,r6,19456
 10015b0:	100146c0 	call	100146c <_ZN12MotorHandler4sendEcPKc>
	send(motorDirection, description);
 10015b4:	e17ffd07 	ldb	r5,-12(fp)
 10015b8:	e13ffc17 	ldw	r4,-16(fp)
 10015bc:	e1bfff17 	ldw	r6,-4(fp)
 10015c0:	100146c0 	call	100146c <_ZN12MotorHandler4sendEcPKc>
	send(speed, "speed");
 10015c4:	e17ffe07 	ldb	r5,-8(fp)
 10015c8:	e13ffc17 	ldw	r4,-16(fp)
 10015cc:	018040b4 	movhi	r6,258
 10015d0:	31930204 	addi	r6,r6,19464
 10015d4:	100146c0 	call	100146c <_ZN12MotorHandler4sendEcPKc>
	MOTORHANDLER_LOG(printf("\n"));
 10015d8:	01000284 	movi	r4,10
 10015dc:	100edfc0 	call	100edfc <putchar>
}
 10015e0:	e037883a 	mov	sp,fp
 10015e4:	dfc00117 	ldw	ra,4(sp)
 10015e8:	df000017 	ldw	fp,0(sp)
 10015ec:	dec00204 	addi	sp,sp,8
 10015f0:	f800283a 	ret

010015f4 <_ZN12MotorHandler5resetEv>:
// MOTOR CONTROL

/**
 * Resets the motor controller.
 */
void MotorHandler::reset(){
 10015f4:	defffd04 	addi	sp,sp,-12
 10015f8:	dfc00215 	stw	ra,8(sp)
 10015fc:	df000115 	stw	fp,4(sp)
 1001600:	df000104 	addi	fp,sp,4
 1001604:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MOTOR_RESET_N_BASE, MOTOR_RESET);
 1001608:	00808034 	movhi	r2,512
 100160c:	10841c04 	addi	r2,r2,4208
 1001610:	10000035 	stwio	zero,0(r2)
	OSTimeDlyHMSM(0, 0, 0, 200);
 1001614:	0009883a 	mov	r4,zero
 1001618:	000b883a 	mov	r5,zero
 100161c:	000d883a 	mov	r6,zero
 1001620:	01c03204 	movi	r7,200
 1001624:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MOTOR_RESET_N_BASE, MOTOR_ENABLE);
 1001628:	00c08034 	movhi	r3,512
 100162c:	18c41c04 	addi	r3,r3,4208
 1001630:	00800044 	movi	r2,1
 1001634:	18800035 	stwio	r2,0(r3)
	OSTimeDlyHMSM(0, 0, 0, 200);
 1001638:	0009883a 	mov	r4,zero
 100163c:	000b883a 	mov	r5,zero
 1001640:	000d883a 	mov	r6,zero
 1001644:	01c03204 	movi	r7,200
 1001648:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
}
 100164c:	e037883a 	mov	sp,fp
 1001650:	dfc00117 	ldw	ra,4(sp)
 1001654:	df000017 	ldw	fp,0(sp)
 1001658:	dec00204 	addi	sp,sp,8
 100165c:	f800283a 	ret

01001660 <_ZN12MotorHandler9configureEv>:

/**
 * Configures the motor controller.
 */
void MotorHandler::configure(){
 1001660:	defffd04 	addi	sp,sp,-12
 1001664:	dfc00215 	stw	ra,8(sp)
 1001668:	df000115 	stw	fp,4(sp)
 100166c:	df000104 	addi	fp,sp,4
 1001670:	e13fff15 	stw	r4,-4(fp)
	reset();
 1001674:	e13fff17 	ldw	r4,-4(fp)
 1001678:	10015f40 	call	10015f4 <_ZN12MotorHandler5resetEv>
	send(MOTOR_START_BYTE, "start");
 100167c:	e13fff17 	ldw	r4,-4(fp)
 1001680:	017fe004 	movi	r5,-128
 1001684:	018040b4 	movhi	r6,258
 1001688:	3192fe04 	addi	r6,r6,19448
 100168c:	100146c0 	call	100146c <_ZN12MotorHandler4sendEcPKc>
	send(MOTOR_CHANGE_CONFIGURATION, "change configuration");
 1001690:	e13fff17 	ldw	r4,-4(fp)
 1001694:	01400084 	movi	r5,2
 1001698:	018040b4 	movhi	r6,258
 100169c:	31930404 	addi	r6,r6,19472
 10016a0:	100146c0 	call	100146c <_ZN12MotorHandler4sendEcPKc>
	send(0X01, "2 MOTOR CONFIG");
 10016a4:	e13fff17 	ldw	r4,-4(fp)
 10016a8:	01400044 	movi	r5,1
 10016ac:	018040b4 	movhi	r6,258
 10016b0:	31930a04 	addi	r6,r6,19496
 10016b4:	100146c0 	call	100146c <_ZN12MotorHandler4sendEcPKc>
	MOTORHANDLER_LOG(printf("\n"));
 10016b8:	01000284 	movi	r4,10
 10016bc:	100edfc0 	call	100edfc <putchar>
}
 10016c0:	e037883a 	mov	sp,fp
 10016c4:	dfc00117 	ldw	ra,4(sp)
 10016c8:	df000017 	ldw	fp,0(sp)
 10016cc:	dec00204 	addi	sp,sp,8
 10016d0:	f800283a 	ret

010016d4 <_ZN12MotorHandler12getSpeedFromEPc>:
/**
 * Gets the speed from the given motor command.
 * The speed is the number following the motor and direction characters.
 * @return the speed
 */
int MotorHandler::getSpeedFrom(char *command) {
 10016d4:	defffc04 	addi	sp,sp,-16
 10016d8:	dfc00315 	stw	ra,12(sp)
 10016dc:	df000215 	stw	fp,8(sp)
 10016e0:	df000204 	addi	fp,sp,8
 10016e4:	e13ffe15 	stw	r4,-8(fp)
 10016e8:	e17fff15 	stw	r5,-4(fp)
	return strtol(command + MOTOR_SPEED_INDEX, NULL, MOTOR_SPEED_BASE_AUTO);
 10016ec:	e0bfff17 	ldw	r2,-4(fp)
 10016f0:	110000c4 	addi	r4,r2,3
 10016f4:	000b883a 	mov	r5,zero
 10016f8:	000d883a 	mov	r6,zero
 10016fc:	100f7e40 	call	100f7e4 <strtol>
}
 1001700:	e037883a 	mov	sp,fp
 1001704:	dfc00117 	ldw	ra,4(sp)
 1001708:	df000017 	ldw	fp,0(sp)
 100170c:	dec00204 	addi	sp,sp,8
 1001710:	f800283a 	ret

01001714 <_ZN12MotorHandler5parseEPc>:
 * $m - the motor to move, from {l, r} for "left" and "right"
 * $d - the direction to move in, from {f, b} for "forward" and "back"
 * $sss - the speed to move at, between 0 and 127
 * The command must be dynamically allocated, and will be freed at the end of this method.
 */
void MotorHandler::parse(char *command) {
 1001714:	defffc04 	addi	sp,sp,-16
 1001718:	dfc00315 	stw	ra,12(sp)
 100171c:	df000215 	stw	fp,8(sp)
 1001720:	df000204 	addi	fp,sp,8
 1001724:	e13ffe15 	stw	r4,-8(fp)
 1001728:	e17fff15 	stw	r5,-4(fp)
	MOTORHANDLER_LOG(printf("MotorHandler [command: %s]\n", command));
 100172c:	010040b4 	movhi	r4,258
 1001730:	21130e04 	addi	r4,r4,19512
 1001734:	e17fff17 	ldw	r5,-4(fp)
 1001738:	100ed840 	call	100ed84 <printf>
	if(command[MOTOR_MOTOR_INDEX] == MOTOR_LEFT) {
 100173c:	e0bfff17 	ldw	r2,-4(fp)
 1001740:	10800044 	addi	r2,r2,1
 1001744:	10800003 	ldbu	r2,0(r2)
 1001748:	10803fcc 	andi	r2,r2,255
 100174c:	1080201c 	xori	r2,r2,128
 1001750:	10bfe004 	addi	r2,r2,-128
 1001754:	10801b18 	cmpnei	r2,r2,108
 1001758:	1000201e 	bne	r2,zero,10017dc <_ZN12MotorHandler5parseEPc+0xc8>
		if (command[MOTOR_DIRECTION_INDEX] == MOTOR_FORWARD) {
 100175c:	e0bfff17 	ldw	r2,-4(fp)
 1001760:	10800084 	addi	r2,r2,2
 1001764:	10800003 	ldbu	r2,0(r2)
 1001768:	10803fcc 	andi	r2,r2,255
 100176c:	1080201c 	xori	r2,r2,128
 1001770:	10bfe004 	addi	r2,r2,-128
 1001774:	10801998 	cmpnei	r2,r2,102
 1001778:	10000c1e 	bne	r2,zero,10017ac <_ZN12MotorHandler5parseEPc+0x98>
			move(MOTOR_LEFT_FORWARD, getSpeedFrom(command), "motor left forward");
 100177c:	e13ffe17 	ldw	r4,-8(fp)
 1001780:	e17fff17 	ldw	r5,-4(fp)
 1001784:	10016d40 	call	10016d4 <_ZN12MotorHandler12getSpeedFromEPc>
 1001788:	11803fcc 	andi	r6,r2,255
 100178c:	3180201c 	xori	r6,r6,128
 1001790:	31bfe004 	addi	r6,r6,-128
 1001794:	e13ffe17 	ldw	r4,-8(fp)
 1001798:	01400144 	movi	r5,5
 100179c:	01c040b4 	movhi	r7,258
 10017a0:	39d31504 	addi	r7,r7,19540
 10017a4:	100156c0 	call	100156c <_ZN12MotorHandler4moveEccPKc>
 10017a8:	00002b06 	br	1001858 <_ZN12MotorHandler5parseEPc+0x144>
		} else {
			move(MOTOR_LEFT_BACKWARD, getSpeedFrom(command), "motor left backward");
 10017ac:	e13ffe17 	ldw	r4,-8(fp)
 10017b0:	e17fff17 	ldw	r5,-4(fp)
 10017b4:	10016d40 	call	10016d4 <_ZN12MotorHandler12getSpeedFromEPc>
 10017b8:	11803fcc 	andi	r6,r2,255
 10017bc:	3180201c 	xori	r6,r6,128
 10017c0:	31bfe004 	addi	r6,r6,-128
 10017c4:	e13ffe17 	ldw	r4,-8(fp)
 10017c8:	01400104 	movi	r5,4
 10017cc:	01c040b4 	movhi	r7,258
 10017d0:	39d31a04 	addi	r7,r7,19560
 10017d4:	100156c0 	call	100156c <_ZN12MotorHandler4moveEccPKc>
 10017d8:	00001f06 	br	1001858 <_ZN12MotorHandler5parseEPc+0x144>
		}
	} else {
		if (command[MOTOR_DIRECTION_INDEX] == MOTOR_FORWARD) {
 10017dc:	e0bfff17 	ldw	r2,-4(fp)
 10017e0:	10800084 	addi	r2,r2,2
 10017e4:	10800003 	ldbu	r2,0(r2)
 10017e8:	10803fcc 	andi	r2,r2,255
 10017ec:	1080201c 	xori	r2,r2,128
 10017f0:	10bfe004 	addi	r2,r2,-128
 10017f4:	10801998 	cmpnei	r2,r2,102
 10017f8:	10000c1e 	bne	r2,zero,100182c <_ZN12MotorHandler5parseEPc+0x118>
			move(MOTOR_RIGHT_FORWARD, getSpeedFrom(command), "motor right forward");
 10017fc:	e13ffe17 	ldw	r4,-8(fp)
 1001800:	e17fff17 	ldw	r5,-4(fp)
 1001804:	10016d40 	call	10016d4 <_ZN12MotorHandler12getSpeedFromEPc>
 1001808:	11803fcc 	andi	r6,r2,255
 100180c:	3180201c 	xori	r6,r6,128
 1001810:	31bfe004 	addi	r6,r6,-128
 1001814:	e13ffe17 	ldw	r4,-8(fp)
 1001818:	014001c4 	movi	r5,7
 100181c:	01c040b4 	movhi	r7,258
 1001820:	39d31f04 	addi	r7,r7,19580
 1001824:	100156c0 	call	100156c <_ZN12MotorHandler4moveEccPKc>
 1001828:	00000b06 	br	1001858 <_ZN12MotorHandler5parseEPc+0x144>
		} else {
			move(MOTOR_RIGHT_BACKWARD, getSpeedFrom(command), "motor right backward");
 100182c:	e13ffe17 	ldw	r4,-8(fp)
 1001830:	e17fff17 	ldw	r5,-4(fp)
 1001834:	10016d40 	call	10016d4 <_ZN12MotorHandler12getSpeedFromEPc>
 1001838:	11803fcc 	andi	r6,r2,255
 100183c:	3180201c 	xori	r6,r6,128
 1001840:	31bfe004 	addi	r6,r6,-128
 1001844:	e13ffe17 	ldw	r4,-8(fp)
 1001848:	01400184 	movi	r5,6
 100184c:	01c040b4 	movhi	r7,258
 1001850:	39d32404 	addi	r7,r7,19600
 1001854:	100156c0 	call	100156c <_ZN12MotorHandler4moveEccPKc>
		}
	}
	free(command);
 1001858:	e13fff17 	ldw	r4,-4(fp)
 100185c:	100e2ac0 	call	100e2ac <free>
}
 1001860:	e037883a 	mov	sp,fp
 1001864:	dfc00117 	ldw	ra,4(sp)
 1001868:	df000017 	ldw	fp,0(sp)
 100186c:	dec00204 	addi	sp,sp,8
 1001870:	f800283a 	ret

01001874 <_ZN12MotorHandlerC1Ev>:

/**
 * Creates a new motor handler.
 * @throw UARTOpenException if the handler cannot open the UART device used to talk to the motors
 */
MotorHandler::MotorHandler() {
 1001874:	deffe404 	addi	sp,sp,-112
 1001878:	dfc01b15 	stw	ra,108(sp)
 100187c:	df001a15 	stw	fp,104(sp)
 1001880:	ddc01915 	stw	r23,100(sp)
 1001884:	dd801815 	stw	r22,96(sp)
 1001888:	dd401715 	stw	r21,92(sp)
 100188c:	dd001615 	stw	r20,88(sp)
 1001890:	dcc01515 	stw	r19,84(sp)
 1001894:	dc801415 	stw	r18,80(sp)
 1001898:	dc401315 	stw	r17,76(sp)
 100189c:	dc001215 	stw	r16,72(sp)
 10018a0:	df001204 	addi	fp,sp,72
 10018a4:	e13fee15 	stw	r4,-72(fp)
 10018a8:	00804074 	movhi	r2,257
 10018ac:	10b3a604 	addi	r2,r2,-12648
 10018b0:	e0bff515 	stw	r2,-44(fp)
 10018b4:	008040b4 	movhi	r2,258
 10018b8:	10910104 	addi	r2,r2,17412
 10018bc:	e0bff615 	stw	r2,-40(fp)
 10018c0:	e0bff704 	addi	r2,fp,-36
 10018c4:	e0ffee04 	addi	r3,fp,-72
 10018c8:	10c00015 	stw	r3,0(r2)
 10018cc:	00c04034 	movhi	r3,256
 10018d0:	18c66204 	addi	r3,r3,6536
 10018d4:	10c00115 	stw	r3,4(r2)
 10018d8:	16c00215 	stw	sp,8(r2)
 10018dc:	e13fef04 	addi	r4,fp,-68
 10018e0:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 10018e4:	e13fee17 	ldw	r4,-72(fp)
 10018e8:	00bfffc4 	movi	r2,-1
 10018ec:	e0bff015 	stw	r2,-64(fp)
 10018f0:	1000f380 	call	1000f38 <_ZN8ListenerC2Ev>
 10018f4:	00c040b4 	movhi	r3,258
 10018f8:	18d33b04 	addi	r3,r3,19692
 10018fc:	e0bfee17 	ldw	r2,-72(fp)
 1001900:	10c00015 	stw	r3,0(r2)
	// Enable the motor controller.
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MOTOR_RESET_N_BASE, MOTOR_ENABLE);
 1001904:	00c08034 	movhi	r3,512
 1001908:	18c41c04 	addi	r3,r3,4208
 100190c:	00800044 	movi	r2,1
 1001910:	18800035 	stwio	r2,0(r3)
	// Open the serial device to send commands to the motor controller.
	motor_dev = alt_up_rs232_open_dev(UART_MOTOR_NAME);
 1001914:	00800044 	movi	r2,1
 1001918:	e0bff015 	stw	r2,-64(fp)
 100191c:	010040b4 	movhi	r4,258
 1001920:	21132a04 	addi	r4,r4,19624
 1001924:	1022d240 	call	1022d24 <alt_up_rs232_open_dev>
 1001928:	1007883a 	mov	r3,r2
 100192c:	e0bfee17 	ldw	r2,-72(fp)
 1001930:	10c00615 	stw	r3,24(r2)
	if (motor_dev == NULL) {
 1001934:	e0bfee17 	ldw	r2,-72(fp)
 1001938:	10800617 	ldw	r2,24(r2)
 100193c:	1004c03a 	cmpne	r2,r2,zero
 1001940:	10001e1e 	bne	r2,zero,10019bc <_ZN12MotorHandlerC1Ev+0x148>
		throw new UARTOpenException();
 1001944:	01000104 	movi	r4,4
 1001948:	100dbf80 	call	100dbf8 <_Znwm>
 100194c:	e0bffd15 	stw	r2,-12(fp)
 1001950:	e13ffd17 	ldw	r4,-12(fp)
 1001954:	1001cf00 	call	1001cf0 <_ZN17UARTOpenExceptionC1Ev>
 1001958:	e0bffd17 	ldw	r2,-12(fp)
 100195c:	e0bffe15 	stw	r2,-8(fp)
 1001960:	01000104 	movi	r4,4
 1001964:	100da700 	call	100da70 <__cxa_allocate_exception>
 1001968:	1009883a 	mov	r4,r2
 100196c:	2005883a 	mov	r2,r4
 1001970:	e0fffe17 	ldw	r3,-8(fp)
 1001974:	10c00015 	stw	r3,0(r2)
 1001978:	014040b4 	movhi	r5,258
 100197c:	29534504 	addi	r5,r5,19732
 1001980:	000d883a 	mov	r6,zero
 1001984:	100d6e80 	call	100d6e8 <__cxa_throw>
 1001988:	e7001204 	addi	fp,fp,72
 100198c:	e0bff117 	ldw	r2,-60(fp)
 1001990:	e0bfff15 	stw	r2,-4(fp)
	}
}
 1001994:	e0ffff17 	ldw	r3,-4(fp)
 1001998:	e0fffc15 	stw	r3,-16(fp)
 100199c:	e13fee17 	ldw	r4,-72(fp)
 10019a0:	1000c1c0 	call	1000c1c <_ZN8ListenerD2Ev>
 10019a4:	e0bffc17 	ldw	r2,-16(fp)
 10019a8:	e0bfff15 	stw	r2,-4(fp)
 10019ac:	00bfffc4 	movi	r2,-1
 10019b0:	e0bff015 	stw	r2,-64(fp)
 10019b4:	e13fff17 	ldw	r4,-4(fp)
 10019b8:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 10019bc:	e13fef04 	addi	r4,fp,-68
 10019c0:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 10019c4:	e037883a 	mov	sp,fp
 10019c8:	dfc00917 	ldw	ra,36(sp)
 10019cc:	df000817 	ldw	fp,32(sp)
 10019d0:	ddc00717 	ldw	r23,28(sp)
 10019d4:	dd800617 	ldw	r22,24(sp)
 10019d8:	dd400517 	ldw	r21,20(sp)
 10019dc:	dd000417 	ldw	r20,16(sp)
 10019e0:	dcc00317 	ldw	r19,12(sp)
 10019e4:	dc800217 	ldw	r18,8(sp)
 10019e8:	dc400117 	ldw	r17,4(sp)
 10019ec:	dc000017 	ldw	r16,0(sp)
 10019f0:	dec00a04 	addi	sp,sp,40
 10019f4:	f800283a 	ret

010019f8 <_ZN12MotorHandlerC2Ev>:

/**
 * Creates a new motor handler.
 * @throw UARTOpenException if the handler cannot open the UART device used to talk to the motors
 */
MotorHandler::MotorHandler() {
 10019f8:	deffe404 	addi	sp,sp,-112
 10019fc:	dfc01b15 	stw	ra,108(sp)
 1001a00:	df001a15 	stw	fp,104(sp)
 1001a04:	ddc01915 	stw	r23,100(sp)
 1001a08:	dd801815 	stw	r22,96(sp)
 1001a0c:	dd401715 	stw	r21,92(sp)
 1001a10:	dd001615 	stw	r20,88(sp)
 1001a14:	dcc01515 	stw	r19,84(sp)
 1001a18:	dc801415 	stw	r18,80(sp)
 1001a1c:	dc401315 	stw	r17,76(sp)
 1001a20:	dc001215 	stw	r16,72(sp)
 1001a24:	df001204 	addi	fp,sp,72
 1001a28:	e13fee15 	stw	r4,-72(fp)
 1001a2c:	00804074 	movhi	r2,257
 1001a30:	10b3a604 	addi	r2,r2,-12648
 1001a34:	e0bff515 	stw	r2,-44(fp)
 1001a38:	008040b4 	movhi	r2,258
 1001a3c:	10910284 	addi	r2,r2,17418
 1001a40:	e0bff615 	stw	r2,-40(fp)
 1001a44:	e0bff704 	addi	r2,fp,-36
 1001a48:	e0ffee04 	addi	r3,fp,-72
 1001a4c:	10c00015 	stw	r3,0(r2)
 1001a50:	00c04034 	movhi	r3,256
 1001a54:	18c6c304 	addi	r3,r3,6924
 1001a58:	10c00115 	stw	r3,4(r2)
 1001a5c:	16c00215 	stw	sp,8(r2)
 1001a60:	e13fef04 	addi	r4,fp,-68
 1001a64:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1001a68:	e13fee17 	ldw	r4,-72(fp)
 1001a6c:	00bfffc4 	movi	r2,-1
 1001a70:	e0bff015 	stw	r2,-64(fp)
 1001a74:	1000f380 	call	1000f38 <_ZN8ListenerC2Ev>
 1001a78:	00c040b4 	movhi	r3,258
 1001a7c:	18d33b04 	addi	r3,r3,19692
 1001a80:	e0bfee17 	ldw	r2,-72(fp)
 1001a84:	10c00015 	stw	r3,0(r2)
	// Enable the motor controller.
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MOTOR_RESET_N_BASE, MOTOR_ENABLE);
 1001a88:	00c08034 	movhi	r3,512
 1001a8c:	18c41c04 	addi	r3,r3,4208
 1001a90:	00800044 	movi	r2,1
 1001a94:	18800035 	stwio	r2,0(r3)
	// Open the serial device to send commands to the motor controller.
	motor_dev = alt_up_rs232_open_dev(UART_MOTOR_NAME);
 1001a98:	00800044 	movi	r2,1
 1001a9c:	e0bff015 	stw	r2,-64(fp)
 1001aa0:	010040b4 	movhi	r4,258
 1001aa4:	21132a04 	addi	r4,r4,19624
 1001aa8:	1022d240 	call	1022d24 <alt_up_rs232_open_dev>
 1001aac:	1007883a 	mov	r3,r2
 1001ab0:	e0bfee17 	ldw	r2,-72(fp)
 1001ab4:	10c00615 	stw	r3,24(r2)
	if (motor_dev == NULL) {
 1001ab8:	e0bfee17 	ldw	r2,-72(fp)
 1001abc:	10800617 	ldw	r2,24(r2)
 1001ac0:	1004c03a 	cmpne	r2,r2,zero
 1001ac4:	10001e1e 	bne	r2,zero,1001b40 <_ZN12MotorHandlerC2Ev+0x148>
		throw new UARTOpenException();
 1001ac8:	01000104 	movi	r4,4
 1001acc:	100dbf80 	call	100dbf8 <_Znwm>
 1001ad0:	e0bffd15 	stw	r2,-12(fp)
 1001ad4:	e13ffd17 	ldw	r4,-12(fp)
 1001ad8:	1001cf00 	call	1001cf0 <_ZN17UARTOpenExceptionC1Ev>
 1001adc:	e0bffd17 	ldw	r2,-12(fp)
 1001ae0:	e0bffe15 	stw	r2,-8(fp)
 1001ae4:	01000104 	movi	r4,4
 1001ae8:	100da700 	call	100da70 <__cxa_allocate_exception>
 1001aec:	1009883a 	mov	r4,r2
 1001af0:	2005883a 	mov	r2,r4
 1001af4:	e0fffe17 	ldw	r3,-8(fp)
 1001af8:	10c00015 	stw	r3,0(r2)
 1001afc:	014040b4 	movhi	r5,258
 1001b00:	29534504 	addi	r5,r5,19732
 1001b04:	000d883a 	mov	r6,zero
 1001b08:	100d6e80 	call	100d6e8 <__cxa_throw>
 1001b0c:	e7001204 	addi	fp,fp,72
 1001b10:	e0bff117 	ldw	r2,-60(fp)
 1001b14:	e0bfff15 	stw	r2,-4(fp)
	}
}
 1001b18:	e0ffff17 	ldw	r3,-4(fp)
 1001b1c:	e0fffc15 	stw	r3,-16(fp)
 1001b20:	e13fee17 	ldw	r4,-72(fp)
 1001b24:	1000c1c0 	call	1000c1c <_ZN8ListenerD2Ev>
 1001b28:	e0bffc17 	ldw	r2,-16(fp)
 1001b2c:	e0bfff15 	stw	r2,-4(fp)
 1001b30:	00bfffc4 	movi	r2,-1
 1001b34:	e0bff015 	stw	r2,-64(fp)
 1001b38:	e13fff17 	ldw	r4,-4(fp)
 1001b3c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1001b40:	e13fef04 	addi	r4,fp,-68
 1001b44:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1001b48:	e037883a 	mov	sp,fp
 1001b4c:	dfc00917 	ldw	ra,36(sp)
 1001b50:	df000817 	ldw	fp,32(sp)
 1001b54:	ddc00717 	ldw	r23,28(sp)
 1001b58:	dd800617 	ldw	r22,24(sp)
 1001b5c:	dd400517 	ldw	r21,20(sp)
 1001b60:	dd000417 	ldw	r20,16(sp)
 1001b64:	dcc00317 	ldw	r19,12(sp)
 1001b68:	dc800217 	ldw	r18,8(sp)
 1001b6c:	dc400117 	ldw	r17,4(sp)
 1001b70:	dc000017 	ldw	r16,0(sp)
 1001b74:	dec00a04 	addi	sp,sp,40
 1001b78:	f800283a 	ret

01001b7c <_Z25motor_handler_update_taskPv>:
// TASKS

extern MotorHandler *motor;

/* Waits for motor commands and executes them as they arrive. */
void motor_handler_update_task(void *pdata) {
 1001b7c:	deffe404 	addi	sp,sp,-112
 1001b80:	dfc01b15 	stw	ra,108(sp)
 1001b84:	df001a15 	stw	fp,104(sp)
 1001b88:	ddc01915 	stw	r23,100(sp)
 1001b8c:	dd801815 	stw	r22,96(sp)
 1001b90:	dd401715 	stw	r21,92(sp)
 1001b94:	dd001615 	stw	r20,88(sp)
 1001b98:	dcc01515 	stw	r19,84(sp)
 1001b9c:	dc801415 	stw	r18,80(sp)
 1001ba0:	dc401315 	stw	r17,76(sp)
 1001ba4:	dc001215 	stw	r16,72(sp)
 1001ba8:	df001204 	addi	fp,sp,72
 1001bac:	e13fef15 	stw	r4,-68(fp)
 1001bb0:	00804074 	movhi	r2,257
 1001bb4:	10b3a604 	addi	r2,r2,-12648
 1001bb8:	e0bff615 	stw	r2,-40(fp)
 1001bbc:	008040b4 	movhi	r2,258
 1001bc0:	10910404 	addi	r2,r2,17424
 1001bc4:	e0bff715 	stw	r2,-36(fp)
 1001bc8:	e0bff804 	addi	r2,fp,-32
 1001bcc:	e0ffee04 	addi	r3,fp,-72
 1001bd0:	10c00015 	stw	r3,0(r2)
 1001bd4:	00c04034 	movhi	r3,256
 1001bd8:	18c72004 	addi	r3,r3,7296
 1001bdc:	10c00115 	stw	r3,4(r2)
 1001be0:	16c00215 	stw	sp,8(r2)
 1001be4:	e13ff004 	addi	r4,fp,-64
 1001be8:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
	printf("MotorHandler [task: update, status: start]\n");
 1001bec:	00bfffc4 	movi	r2,-1
 1001bf0:	e0bff115 	stw	r2,-60(fp)
 1001bf4:	010040b4 	movhi	r4,258
 1001bf8:	21132e04 	addi	r4,r4,19640
 1001bfc:	100eec00 	call	100eec0 <puts>
 1001c00:	00000006 	br	1001c04 <_Z25motor_handler_update_taskPv+0x88>
	while (true) {
		try {
			// Update the motor handler.
			motor->update();
 1001c04:	008040f4 	movhi	r2,259
 1001c08:	10a6f704 	addi	r2,r2,-25636
 1001c0c:	10800017 	ldw	r2,0(r2)
 1001c10:	1009883a 	mov	r4,r2
 1001c14:	00800084 	movi	r2,2
 1001c18:	e0bff115 	stw	r2,-60(fp)
 1001c1c:	1000de40 	call	1000de4 <_ZN8Listener6updateEv>
 1001c20:	003ff806 	br	1001c04 <_Z25motor_handler_update_taskPv+0x88>
 1001c24:	e0ffff17 	ldw	r3,-4(fp)
 1001c28:	18800060 	cmpeqi	r2,r3,1
 1001c2c:	1000041e 	bne	r2,zero,1001c40 <_Z25motor_handler_update_taskPv+0xc4>
 1001c30:	00bfffc4 	movi	r2,-1
 1001c34:	e0bff115 	stw	r2,-60(fp)
 1001c38:	e13ffe17 	ldw	r4,-8(fp)
 1001c3c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
		} catch (ARCapException &e) {
 1001c40:	e13ffe17 	ldw	r4,-8(fp)
 1001c44:	100d5500 	call	100d550 <__cxa_begin_catch>
 1001c48:	e0bfee15 	stw	r2,-72(fp)
			// Log exceptions.
			MOTORHANDLER_LOG(printf("%s\n", e.what()));
 1001c4c:	e0bfee17 	ldw	r2,-72(fp)
 1001c50:	10800017 	ldw	r2,0(r2)
 1001c54:	10800204 	addi	r2,r2,8
 1001c58:	10800017 	ldw	r2,0(r2)
 1001c5c:	e13fee17 	ldw	r4,-72(fp)
 1001c60:	103ee83a 	callr	r2
 1001c64:	1009883a 	mov	r4,r2
 1001c68:	00800044 	movi	r2,1
 1001c6c:	e0bff115 	stw	r2,-60(fp)
 1001c70:	100eec00 	call	100eec0 <puts>
	printf("MotorHandler [task: update, status: start]\n");
	while (true) {
		try {
			// Update the motor handler.
			motor->update();
		} catch (ARCapException &e) {
 1001c74:	e03ff115 	stw	zero,-60(fp)
 1001c78:	100d4ac0 	call	100d4ac <__cxa_end_catch>
 1001c7c:	003fe106 	br	1001c04 <_Z25motor_handler_update_taskPv+0x88>
 1001c80:	e7001204 	addi	fp,fp,72
 1001c84:	e0bff117 	ldw	r2,-60(fp)
 1001c88:	e0fff217 	ldw	r3,-56(fp)
 1001c8c:	e0fffe15 	stw	r3,-8(fp)
 1001c90:	e0fff317 	ldw	r3,-52(fp)
 1001c94:	e0ffff15 	stw	r3,-4(fp)
 1001c98:	10800060 	cmpeqi	r2,r2,1
 1001c9c:	103fe11e 	bne	r2,zero,1001c24 <_Z25motor_handler_update_taskPv+0xa8>
 1001ca0:	e0bffe17 	ldw	r2,-8(fp)
 1001ca4:	e0bffd15 	stw	r2,-12(fp)
 1001ca8:	e03ff115 	stw	zero,-60(fp)
 1001cac:	100d4ac0 	call	100d4ac <__cxa_end_catch>
 1001cb0:	e0fffd17 	ldw	r3,-12(fp)
 1001cb4:	e0fffe15 	stw	r3,-8(fp)
 1001cb8:	00bfffc4 	movi	r2,-1
 1001cbc:	e0bff115 	stw	r2,-60(fp)
 1001cc0:	e13ffe17 	ldw	r4,-8(fp)
 1001cc4:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

01001cc8 <_ZNK17UARTOpenException4whatEv>:
	}
};

class UARTOpenException : ARCapException {
public:
	virtual const char *what() const throw() {
 1001cc8:	defffe04 	addi	sp,sp,-8
 1001ccc:	df000115 	stw	fp,4(sp)
 1001cd0:	df000104 	addi	fp,sp,4
 1001cd4:	e13fff15 	stw	r4,-4(fp)
		return "Failed to open connection to UART.";
 1001cd8:	008040b4 	movhi	r2,258
 1001cdc:	1092b304 	addi	r2,r2,19148
	}
 1001ce0:	e037883a 	mov	sp,fp
 1001ce4:	df000017 	ldw	fp,0(sp)
 1001ce8:	dec00104 	addi	sp,sp,4
 1001cec:	f800283a 	ret

01001cf0 <_ZN17UARTOpenExceptionC1Ev>:
	virtual const char *what() const throw() {
		return "Failed to post to listener queue.";
	}
};

class UARTOpenException : ARCapException {
 1001cf0:	defffd04 	addi	sp,sp,-12
 1001cf4:	dfc00215 	stw	ra,8(sp)
 1001cf8:	df000115 	stw	fp,4(sp)
 1001cfc:	df000104 	addi	fp,sp,4
 1001d00:	e13fff15 	stw	r4,-4(fp)
 1001d04:	e13fff17 	ldw	r4,-4(fp)
 1001d08:	10006c40 	call	10006c4 <_ZN14ARCapExceptionC2Ev>
 1001d0c:	00c040b4 	movhi	r3,258
 1001d10:	18d35c04 	addi	r3,r3,19824
 1001d14:	e0bfff17 	ldw	r2,-4(fp)
 1001d18:	10c00015 	stw	r3,0(r2)
 1001d1c:	e037883a 	mov	sp,fp
 1001d20:	dfc00117 	ldw	ra,4(sp)
 1001d24:	df000017 	ldw	fp,0(sp)
 1001d28:	dec00204 	addi	sp,sp,8
 1001d2c:	f800283a 	ret

01001d30 <_ZN12MotorHandlerD0Ev>:
 * The command must specify:
 * (a) which motor to run {l(eft), r(ight)},
 * (b) the direction to run the motor in {(f)orward, (b)ackward}
 * (c) the speed to run the motor at [0 to 127].
 */
class MotorHandler: public Listener {
 1001d30:	defffd04 	addi	sp,sp,-12
 1001d34:	dfc00215 	stw	ra,8(sp)
 1001d38:	df000115 	stw	fp,4(sp)
 1001d3c:	df000104 	addi	fp,sp,4
 1001d40:	e13fff15 	stw	r4,-4(fp)
 1001d44:	00c040b4 	movhi	r3,258
 1001d48:	18d33b04 	addi	r3,r3,19692
 1001d4c:	e0bfff17 	ldw	r2,-4(fp)
 1001d50:	10c00015 	stw	r3,0(r2)
 1001d54:	e13fff17 	ldw	r4,-4(fp)
 1001d58:	1000c1c0 	call	1000c1c <_ZN8ListenerD2Ev>
 1001d5c:	00800044 	movi	r2,1
 1001d60:	10803fcc 	andi	r2,r2,255
 1001d64:	1005003a 	cmpeq	r2,r2,zero
 1001d68:	1000021e 	bne	r2,zero,1001d74 <_ZN12MotorHandlerD0Ev+0x44>
 1001d6c:	e13fff17 	ldw	r4,-4(fp)
 1001d70:	100d6680 	call	100d668 <_ZdlPv>
 1001d74:	e037883a 	mov	sp,fp
 1001d78:	dfc00117 	ldw	ra,4(sp)
 1001d7c:	df000017 	ldw	fp,0(sp)
 1001d80:	dec00204 	addi	sp,sp,8
 1001d84:	f800283a 	ret

01001d88 <_ZN12MotorHandlerD1Ev>:
 1001d88:	defffd04 	addi	sp,sp,-12
 1001d8c:	dfc00215 	stw	ra,8(sp)
 1001d90:	df000115 	stw	fp,4(sp)
 1001d94:	df000104 	addi	fp,sp,4
 1001d98:	e13fff15 	stw	r4,-4(fp)
 1001d9c:	00c040b4 	movhi	r3,258
 1001da0:	18d33b04 	addi	r3,r3,19692
 1001da4:	e0bfff17 	ldw	r2,-4(fp)
 1001da8:	10c00015 	stw	r3,0(r2)
 1001dac:	e13fff17 	ldw	r4,-4(fp)
 1001db0:	1000c1c0 	call	1000c1c <_ZN8ListenerD2Ev>
 1001db4:	0005883a 	mov	r2,zero
 1001db8:	10803fcc 	andi	r2,r2,255
 1001dbc:	1005003a 	cmpeq	r2,r2,zero
 1001dc0:	1000021e 	bne	r2,zero,1001dcc <_ZN12MotorHandlerD1Ev+0x44>
 1001dc4:	e13fff17 	ldw	r4,-4(fp)
 1001dc8:	100d6680 	call	100d668 <_ZdlPv>
 1001dcc:	e037883a 	mov	sp,fp
 1001dd0:	dfc00117 	ldw	ra,4(sp)
 1001dd4:	df000017 	ldw	fp,0(sp)
 1001dd8:	dec00204 	addi	sp,sp,8
 1001ddc:	f800283a 	ret

01001de0 <_ZN17UARTOpenExceptionD0Ev>:
 1001de0:	defffd04 	addi	sp,sp,-12
 1001de4:	dfc00215 	stw	ra,8(sp)
 1001de8:	df000115 	stw	fp,4(sp)
 1001dec:	df000104 	addi	fp,sp,4
 1001df0:	e13fff15 	stw	r4,-4(fp)
 1001df4:	00c040b4 	movhi	r3,258
 1001df8:	18d35c04 	addi	r3,r3,19824
 1001dfc:	e0bfff17 	ldw	r2,-4(fp)
 1001e00:	10c00015 	stw	r3,0(r2)
 1001e04:	e13fff17 	ldw	r4,-4(fp)
 1001e08:	10007840 	call	1000784 <_ZN14ARCapExceptionD2Ev>
 1001e0c:	00800044 	movi	r2,1
 1001e10:	10803fcc 	andi	r2,r2,255
 1001e14:	1005003a 	cmpeq	r2,r2,zero
 1001e18:	1000021e 	bne	r2,zero,1001e24 <_ZN17UARTOpenExceptionD0Ev+0x44>
 1001e1c:	e13fff17 	ldw	r4,-4(fp)
 1001e20:	100d6680 	call	100d668 <_ZdlPv>
 1001e24:	e037883a 	mov	sp,fp
 1001e28:	dfc00117 	ldw	ra,4(sp)
 1001e2c:	df000017 	ldw	fp,0(sp)
 1001e30:	dec00204 	addi	sp,sp,8
 1001e34:	f800283a 	ret

01001e38 <_ZN17UARTOpenExceptionD1Ev>:
 1001e38:	defffd04 	addi	sp,sp,-12
 1001e3c:	dfc00215 	stw	ra,8(sp)
 1001e40:	df000115 	stw	fp,4(sp)
 1001e44:	df000104 	addi	fp,sp,4
 1001e48:	e13fff15 	stw	r4,-4(fp)
 1001e4c:	00c040b4 	movhi	r3,258
 1001e50:	18d35c04 	addi	r3,r3,19824
 1001e54:	e0bfff17 	ldw	r2,-4(fp)
 1001e58:	10c00015 	stw	r3,0(r2)
 1001e5c:	e13fff17 	ldw	r4,-4(fp)
 1001e60:	10007840 	call	1000784 <_ZN14ARCapExceptionD2Ev>
 1001e64:	0005883a 	mov	r2,zero
 1001e68:	10803fcc 	andi	r2,r2,255
 1001e6c:	1005003a 	cmpeq	r2,r2,zero
 1001e70:	1000021e 	bne	r2,zero,1001e7c <_ZN17UARTOpenExceptionD1Ev+0x44>
 1001e74:	e13fff17 	ldw	r4,-4(fp)
 1001e78:	100d6680 	call	100d668 <_ZdlPv>
 1001e7c:	e037883a 	mov	sp,fp
 1001e80:	dfc00117 	ldw	ra,4(sp)
 1001e84:	df000017 	ldw	fp,0(sp)
 1001e88:	dec00204 	addi	sp,sp,8
 1001e8c:	f800283a 	ret

01001e90 <_ZN15NetworkReceiver4postEPKc>:
 * Posts a network event to the matching listener.
 * @param event - the name and parameters of the event.
 * The event will be posted to the listener whose key matches the first character of the event.
 * @throw PostException if the event cannot be posted to the matching listener
 */
void NetworkReceiver::post(const char *event) {
 1001e90:	defff604 	addi	sp,sp,-40
 1001e94:	dfc00915 	stw	ra,36(sp)
 1001e98:	df000815 	stw	fp,32(sp)
 1001e9c:	dc000715 	stw	r16,28(sp)
 1001ea0:	df000704 	addi	fp,sp,28
 1001ea4:	e13ffe15 	stw	r4,-8(fp)
 1001ea8:	e17fff15 	stw	r5,-4(fp)
	char key = event[0];
 1001eac:	e0bfff17 	ldw	r2,-4(fp)
 1001eb0:	10800003 	ldbu	r2,0(r2)
 1001eb4:	e0bffb05 	stb	r2,-20(fp)
	int index = 0;
 1001eb8:	e03ffa15 	stw	zero,-24(fp)
	int status;
	for (vector<char>::iterator it = keys.begin(); it != keys.end(); ++it) {
 1001ebc:	e0bffe17 	ldw	r2,-8(fp)
 1001ec0:	11000104 	addi	r4,r2,4
 1001ec4:	10025740 	call	1002574 <_ZNSt6vectorIcSaIcEE5beginEv>
 1001ec8:	e0bffd15 	stw	r2,-12(fp)
 1001ecc:	00002a06 	br	1001f78 <_ZN15NetworkReceiver4postEPKc+0xe8>
		// Look for a matching key.
		if (key == *it) {
 1001ed0:	e13ffd04 	addi	r4,fp,-12
 1001ed4:	10022b40 	call	10022b4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 1001ed8:	10800003 	ldbu	r2,0(r2)
 1001edc:	10c03fcc 	andi	r3,r2,255
 1001ee0:	18c0201c 	xori	r3,r3,128
 1001ee4:	18ffe004 	addi	r3,r3,-128
 1001ee8:	e0bffb07 	ldb	r2,-20(fp)
 1001eec:	1885003a 	cmpeq	r2,r3,r2
 1001ef0:	10803fcc 	andi	r2,r2,255
 1001ef4:	1005003a 	cmpeq	r2,r2,zero
 1001ef8:	10001a1e 	bne	r2,zero,1001f64 <_ZN15NetworkReceiver4postEPKc+0xd4>
			// Post to the matching listener.
			status = OSQPost(listeners[index], (void *)event);
 1001efc:	e0bffe17 	ldw	r2,-8(fp)
 1001f00:	11000404 	addi	r4,r2,16
 1001f04:	e17ffa17 	ldw	r5,-24(fp)
 1001f08:	10028f00 	call	10028f0 <_ZNSt6vectorIP8os_eventSaIS1_EEixEm>
 1001f0c:	11000017 	ldw	r4,0(r2)
 1001f10:	e17fff17 	ldw	r5,-4(fp)
 1001f14:	101e6040 	call	101e604 <OSQPost>
 1001f18:	10803fcc 	andi	r2,r2,255
 1001f1c:	e0bff915 	stw	r2,-28(fp)
			if (status != OS_NO_ERR) {
 1001f20:	e0bff917 	ldw	r2,-28(fp)
 1001f24:	1005003a 	cmpeq	r2,r2,zero
 1001f28:	10000e1e 	bne	r2,zero,1001f64 <_ZN15NetworkReceiver4postEPKc+0xd4>
				throw new QueuePostException();
 1001f2c:	01000104 	movi	r4,4
 1001f30:	100dbf80 	call	100dbf8 <_Znwm>
 1001f34:	1021883a 	mov	r16,r2
 1001f38:	8009883a 	mov	r4,r16
 1001f3c:	10007440 	call	1000744 <_ZN18QueuePostExceptionC1Ev>
 1001f40:	01000104 	movi	r4,4
 1001f44:	100da700 	call	100da70 <__cxa_allocate_exception>
 1001f48:	1009883a 	mov	r4,r2
 1001f4c:	2005883a 	mov	r2,r4
 1001f50:	14000015 	stw	r16,0(r2)
 1001f54:	014040b4 	movhi	r5,258
 1001f58:	2951fa04 	addi	r5,r5,18408
 1001f5c:	000d883a 	mov	r6,zero
 1001f60:	100d6e80 	call	100d6e8 <__cxa_throw>
			}
		}
		// Go the next key.
		index++;
 1001f64:	e0bffa17 	ldw	r2,-24(fp)
 1001f68:	10800044 	addi	r2,r2,1
 1001f6c:	e0bffa15 	stw	r2,-24(fp)
 */
void NetworkReceiver::post(const char *event) {
	char key = event[0];
	int index = 0;
	int status;
	for (vector<char>::iterator it = keys.begin(); it != keys.end(); ++it) {
 1001f70:	e13ffd04 	addi	r4,fp,-12
 1001f74:	100227c0 	call	100227c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
 1001f78:	e0bffe17 	ldw	r2,-8(fp)
 1001f7c:	11000104 	addi	r4,r2,4
 1001f80:	10025ac0 	call	10025ac <_ZNSt6vectorIcSaIcEE3endEv>
 1001f84:	e0bffc15 	stw	r2,-16(fp)
 1001f88:	e13ffd04 	addi	r4,fp,-12
 1001f8c:	e17ffc04 	addi	r5,fp,-16
 1001f90:	100260c0 	call	100260c <_ZN9__gnu_cxxneIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 1001f94:	10803fcc 	andi	r2,r2,255
 1001f98:	1004c03a 	cmpne	r2,r2,zero
 1001f9c:	103fcc1e 	bne	r2,zero,1001ed0 <_ZN15NetworkReceiver4postEPKc+0x40>
			}
		}
		// Go the next key.
		index++;
	}
}
 1001fa0:	e037883a 	mov	sp,fp
 1001fa4:	dfc00217 	ldw	ra,8(sp)
 1001fa8:	df000117 	ldw	fp,4(sp)
 1001fac:	dc000017 	ldw	r16,0(sp)
 1001fb0:	dec00304 	addi	sp,sp,12
 1001fb4:	f800283a 	ret

01001fb8 <_ZN15NetworkReceiver6updateEv>:
/**
 * Updates this receiver. The receiver will check the wifi handler for new TCP messages
 * and forward them to the corresponding listeners.
 * @throw PostException if a message cannot be posted to a listener
 */
void NetworkReceiver::update() {
 1001fb8:	defffd04 	addi	sp,sp,-12
 1001fbc:	dfc00215 	stw	ra,8(sp)
 1001fc0:	df000115 	stw	fp,4(sp)
 1001fc4:	df000104 	addi	fp,sp,4
 1001fc8:	e13fff15 	stw	r4,-4(fp)
	post(wifi->tcpReceive());
 1001fcc:	e0bfff17 	ldw	r2,-4(fp)
 1001fd0:	11000017 	ldw	r4,0(r2)
 1001fd4:	1004e380 	call	1004e38 <_ZN11WifiHandler10tcpReceiveEv>
 1001fd8:	100b883a 	mov	r5,r2
 1001fdc:	e13fff17 	ldw	r4,-4(fp)
 1001fe0:	1001e900 	call	1001e90 <_ZN15NetworkReceiver4postEPKc>
}
 1001fe4:	e037883a 	mov	sp,fp
 1001fe8:	dfc00117 	ldw	ra,4(sp)
 1001fec:	df000017 	ldw	fp,0(sp)
 1001ff0:	dec00204 	addi	sp,sp,8
 1001ff4:	f800283a 	ret

01001ff8 <_ZN15NetworkReceiverC1EP11WifiHandler>:

/**
 * Creates a new network receiver.
 * @param wifi - the wifi handler to use to receive messages from the server
 */
NetworkReceiver::NetworkReceiver(WifiHandler *wifiHandler) {
 1001ff8:	defffa04 	addi	sp,sp,-24
 1001ffc:	dfc00515 	stw	ra,20(sp)
 1002000:	df000415 	stw	fp,16(sp)
 1002004:	dc000315 	stw	r16,12(sp)
 1002008:	df000304 	addi	fp,sp,12
 100200c:	e13ffe15 	stw	r4,-8(fp)
 1002010:	e17fff15 	stw	r5,-4(fp)
 1002014:	e0bffe17 	ldw	r2,-8(fp)
 1002018:	14000104 	addi	r16,r2,4
 100201c:	e13ffd44 	addi	r4,fp,-11
 1002020:	1007afc0 	call	1007afc <_ZNSaIcEC1Ev>
 1002024:	e17ffd44 	addi	r5,fp,-11
 1002028:	8009883a 	mov	r4,r16
 100202c:	100270c0 	call	100270c <_ZNSt6vectorIcSaIcEEC1ERKS0_>
 1002030:	e13ffd44 	addi	r4,fp,-11
 1002034:	1007b280 	call	1007b28 <_ZNSaIcED1Ev>
 1002038:	e0bffe17 	ldw	r2,-8(fp)
 100203c:	14000404 	addi	r16,r2,16
 1002040:	e13ffd04 	addi	r4,fp,-12
 1002044:	10023500 	call	1002350 <_ZNSaIP8os_eventEC1Ev>
 1002048:	8009883a 	mov	r4,r16
 100204c:	e17ffd04 	addi	r5,fp,-12
 1002050:	10027cc0 	call	10027cc <_ZNSt6vectorIP8os_eventSaIS1_EEC1ERKS2_>
 1002054:	e13ffd04 	addi	r4,fp,-12
 1002058:	10023a00 	call	10023a0 <_ZNSaIP8os_eventED1Ev>
	wifi = wifiHandler;
 100205c:	e0fffe17 	ldw	r3,-8(fp)
 1002060:	e0bfff17 	ldw	r2,-4(fp)
 1002064:	18800015 	stw	r2,0(r3)
}
 1002068:	e037883a 	mov	sp,fp
 100206c:	dfc00217 	ldw	ra,8(sp)
 1002070:	df000117 	ldw	fp,4(sp)
 1002074:	dc000017 	ldw	r16,0(sp)
 1002078:	dec00304 	addi	sp,sp,12
 100207c:	f800283a 	ret

01002080 <_ZN15NetworkReceiverC2EP11WifiHandler>:

/**
 * Creates a new network receiver.
 * @param wifi - the wifi handler to use to receive messages from the server
 */
NetworkReceiver::NetworkReceiver(WifiHandler *wifiHandler) {
 1002080:	defffa04 	addi	sp,sp,-24
 1002084:	dfc00515 	stw	ra,20(sp)
 1002088:	df000415 	stw	fp,16(sp)
 100208c:	dc000315 	stw	r16,12(sp)
 1002090:	df000304 	addi	fp,sp,12
 1002094:	e13ffe15 	stw	r4,-8(fp)
 1002098:	e17fff15 	stw	r5,-4(fp)
 100209c:	e0bffe17 	ldw	r2,-8(fp)
 10020a0:	14000104 	addi	r16,r2,4
 10020a4:	e13ffd44 	addi	r4,fp,-11
 10020a8:	1007afc0 	call	1007afc <_ZNSaIcEC1Ev>
 10020ac:	e17ffd44 	addi	r5,fp,-11
 10020b0:	8009883a 	mov	r4,r16
 10020b4:	100270c0 	call	100270c <_ZNSt6vectorIcSaIcEEC1ERKS0_>
 10020b8:	e13ffd44 	addi	r4,fp,-11
 10020bc:	1007b280 	call	1007b28 <_ZNSaIcED1Ev>
 10020c0:	e0bffe17 	ldw	r2,-8(fp)
 10020c4:	14000404 	addi	r16,r2,16
 10020c8:	e13ffd04 	addi	r4,fp,-12
 10020cc:	10023500 	call	1002350 <_ZNSaIP8os_eventEC1Ev>
 10020d0:	8009883a 	mov	r4,r16
 10020d4:	e17ffd04 	addi	r5,fp,-12
 10020d8:	10027cc0 	call	10027cc <_ZNSt6vectorIP8os_eventSaIS1_EEC1ERKS2_>
 10020dc:	e13ffd04 	addi	r4,fp,-12
 10020e0:	10023a00 	call	10023a0 <_ZNSaIP8os_eventED1Ev>
	wifi = wifiHandler;
 10020e4:	e0fffe17 	ldw	r3,-8(fp)
 10020e8:	e0bfff17 	ldw	r2,-4(fp)
 10020ec:	18800015 	stw	r2,0(r3)
}
 10020f0:	e037883a 	mov	sp,fp
 10020f4:	dfc00217 	ldw	ra,8(sp)
 10020f8:	df000117 	ldw	fp,4(sp)
 10020fc:	dc000017 	ldw	r16,0(sp)
 1002100:	dec00304 	addi	sp,sp,12
 1002104:	f800283a 	ret

01002108 <_ZN15NetworkReceiver11addListenerEcP8os_event>:
 * Adds a listener queue to this network receiver.
 * The queue will receive network events which start with the listener's key.
 * @param key the first character of network events intended for the listener
 * @param queue - the queue to which matching network events will be forwarded
 */
void NetworkReceiver::addListener(char key, OS_EVENT *queue) {
 1002108:	defffb04 	addi	sp,sp,-20
 100210c:	dfc00415 	stw	ra,16(sp)
 1002110:	df000315 	stw	fp,12(sp)
 1002114:	df000304 	addi	fp,sp,12
 1002118:	e13ffd15 	stw	r4,-12(fp)
 100211c:	e1bfff15 	stw	r6,-4(fp)
 1002120:	e17ffe05 	stb	r5,-8(fp)
	keys.push_back(key);
 1002124:	e0bffd17 	ldw	r2,-12(fp)
 1002128:	11000104 	addi	r4,r2,4
 100212c:	e17ffe04 	addi	r5,fp,-8
 1002130:	1003c7c0 	call	1003c7c <_ZNSt6vectorIcSaIcEE9push_backERKc>
	listeners.push_back(queue);
 1002134:	e0bffd17 	ldw	r2,-12(fp)
 1002138:	11000404 	addi	r4,r2,16
 100213c:	e17fff04 	addi	r5,fp,-4
 1002140:	10040b00 	call	10040b0 <_ZNSt6vectorIP8os_eventSaIS1_EE9push_backERKS1_>
}
 1002144:	e037883a 	mov	sp,fp
 1002148:	dfc00117 	ldw	ra,4(sp)
 100214c:	df000017 	ldw	fp,0(sp)
 1002150:	dec00204 	addi	sp,sp,8
 1002154:	f800283a 	ret

01002158 <_Z28network_receiver_update_taskPv>:
// TASKS

extern NetworkReceiver *networkIn;

/* Polls for server updates. */
void network_receiver_update_task(void* pdata) {
 1002158:	deffe604 	addi	sp,sp,-104
 100215c:	dfc01915 	stw	ra,100(sp)
 1002160:	df001815 	stw	fp,96(sp)
 1002164:	ddc01715 	stw	r23,92(sp)
 1002168:	dd801615 	stw	r22,88(sp)
 100216c:	dd401515 	stw	r21,84(sp)
 1002170:	dd001415 	stw	r20,80(sp)
 1002174:	dcc01315 	stw	r19,76(sp)
 1002178:	dc801215 	stw	r18,72(sp)
 100217c:	dc401115 	stw	r17,68(sp)
 1002180:	dc001015 	stw	r16,64(sp)
 1002184:	df001004 	addi	fp,sp,64
 1002188:	e13ff115 	stw	r4,-60(fp)
 100218c:	00804074 	movhi	r2,257
 1002190:	10b3a604 	addi	r2,r2,-12648
 1002194:	e0bff815 	stw	r2,-32(fp)
 1002198:	008040b4 	movhi	r2,258
 100219c:	10910804 	addi	r2,r2,17440
 10021a0:	e0bff915 	stw	r2,-28(fp)
 10021a4:	e0bffa04 	addi	r2,fp,-24
 10021a8:	e0fff004 	addi	r3,fp,-64
 10021ac:	10c00015 	stw	r3,0(r2)
 10021b0:	00c04034 	movhi	r3,256
 10021b4:	18c87e04 	addi	r3,r3,8696
 10021b8:	10c00115 	stw	r3,4(r2)
 10021bc:	16c00215 	stw	sp,8(r2)
 10021c0:	e13ff204 	addi	r4,fp,-56
 10021c4:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
	printf("NetworkReceiver [task: update, status: start]\n");
 10021c8:	00bfffc4 	movi	r2,-1
 10021cc:	e0bff315 	stw	r2,-52(fp)
 10021d0:	010040b4 	movhi	r4,258
 10021d4:	21136e04 	addi	r4,r4,19896
 10021d8:	100eec00 	call	100eec0 <puts>
	while (true) {
		try {
			// Update the network receiver.
			networkIn->update();
 10021dc:	008040f4 	movhi	r2,259
 10021e0:	10a6fa04 	addi	r2,r2,-25624
 10021e4:	11000017 	ldw	r4,0(r2)
 10021e8:	00800044 	movi	r2,1
 10021ec:	e0bff315 	stw	r2,-52(fp)
 10021f0:	1001fb80 	call	1001fb8 <_ZN15NetworkReceiver6updateEv>
 10021f4:	00000f06 	br	1002234 <_Z28network_receiver_update_taskPv+0xdc>
 10021f8:	e7001004 	addi	fp,fp,64
 10021fc:	e0bff417 	ldw	r2,-48(fp)
 1002200:	e0bfff15 	stw	r2,-4(fp)
 1002204:	e0bff517 	ldw	r2,-44(fp)
 1002208:	10800060 	cmpeqi	r2,r2,1
 100220c:	1000041e 	bne	r2,zero,1002220 <_Z28network_receiver_update_taskPv+0xc8>
 1002210:	00bfffc4 	movi	r2,-1
 1002214:	e0bff315 	stw	r2,-52(fp)
 1002218:	e13fff17 	ldw	r4,-4(fp)
 100221c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
		} catch (ARCapException &e) {
 1002220:	e13fff17 	ldw	r4,-4(fp)
 1002224:	100d5500 	call	100d550 <__cxa_begin_catch>
 1002228:	e0bff015 	stw	r2,-64(fp)
 100222c:	e03ff315 	stw	zero,-52(fp)
 1002230:	100d4ac0 	call	100d4ac <__cxa_end_catch>
			// Log exceptions.
			NETWORKRECEIVER_LOG(printf("%s\n", e.what()));
		}
		// Wait.
		OSTimeDlyHMSM(0, 0, 0, NETWORK_RECEIVER_UPDATE_TIME_MILLIS);
 1002234:	00bfffc4 	movi	r2,-1
 1002238:	e0bff315 	stw	r2,-52(fp)
 100223c:	0009883a 	mov	r4,zero
 1002240:	000b883a 	mov	r5,zero
 1002244:	000d883a 	mov	r6,zero
 1002248:	01c01904 	movi	r7,100
 100224c:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
extern NetworkReceiver *networkIn;

/* Polls for server updates. */
void network_receiver_update_task(void* pdata) {
	printf("NetworkReceiver [task: update, status: start]\n");
	while (true) {
 1002250:	003fe206 	br	10021dc <_Z28network_receiver_update_taskPv+0x84>

01002254 <_ZnwmPv>:
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) throw() { return __p; }
 1002254:	defffd04 	addi	sp,sp,-12
 1002258:	df000215 	stw	fp,8(sp)
 100225c:	df000204 	addi	fp,sp,8
 1002260:	e13ffe15 	stw	r4,-8(fp)
 1002264:	e17fff15 	stw	r5,-4(fp)
 1002268:	e0bfff17 	ldw	r2,-4(fp)
 100226c:	e037883a 	mov	sp,fp
 1002270:	df000017 	ldw	fp,0(sp)
 1002274:	dec00104 	addi	sp,sp,4
 1002278:	f800283a 	ret

0100227c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
 100227c:	defffe04 	addi	sp,sp,-8
 1002280:	df000115 	stw	fp,4(sp)
 1002284:	df000104 	addi	fp,sp,4
 1002288:	e13fff15 	stw	r4,-4(fp)
      {
	++_M_current;
 100228c:	e0bfff17 	ldw	r2,-4(fp)
 1002290:	10800017 	ldw	r2,0(r2)
 1002294:	10c00044 	addi	r3,r2,1
 1002298:	e0bfff17 	ldw	r2,-4(fp)
 100229c:	10c00015 	stw	r3,0(r2)
	return *this;
 10022a0:	e0bfff17 	ldw	r2,-4(fp)
 10022a4:	e037883a 	mov	sp,fp
 10022a8:	df000017 	ldw	fp,0(sp)
 10022ac:	dec00104 	addi	sp,sp,4
 10022b0:	f800283a 	ret

010022b4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>:
			  >::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
 10022b4:	defffe04 	addi	sp,sp,-8
 10022b8:	df000115 	stw	fp,4(sp)
 10022bc:	df000104 	addi	fp,sp,4
 10022c0:	e13fff15 	stw	r4,-4(fp)
      { return *_M_current; }
 10022c4:	e0bfff17 	ldw	r2,-4(fp)
 10022c8:	10800017 	ldw	r2,0(r2)
 10022cc:	e037883a 	mov	sp,fp
 10022d0:	df000017 	ldw	fp,0(sp)
 10022d4:	dec00104 	addi	sp,sp,4
 10022d8:	f800283a 	ret

010022dc <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl 
      : public _Tp_alloc_type
      {
 10022dc:	defffd04 	addi	sp,sp,-12
 10022e0:	dfc00215 	stw	ra,8(sp)
 10022e4:	df000115 	stw	fp,4(sp)
 10022e8:	df000104 	addi	fp,sp,4
 10022ec:	e13fff15 	stw	r4,-4(fp)
 10022f0:	e13fff17 	ldw	r4,-4(fp)
 10022f4:	1007b000 	call	1007b00 <_ZNSaIcED2Ev>
 10022f8:	e037883a 	mov	sp,fp
 10022fc:	dfc00117 	ldw	ra,4(sp)
 1002300:	df000017 	ldw	fp,0(sp)
 1002304:	dec00204 	addi	sp,sp,8
 1002308:	f800283a 	ret

0100230c <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
 100230c:	defffe04 	addi	sp,sp,-8
 1002310:	df000115 	stw	fp,4(sp)
 1002314:	df000104 	addi	fp,sp,4
 1002318:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 100231c:	e0bfff17 	ldw	r2,-4(fp)
 1002320:	e037883a 	mov	sp,fp
 1002324:	df000017 	ldw	fp,0(sp)
 1002328:	dec00104 	addi	sp,sp,4
 100232c:	f800283a 	ret

01002330 <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }
 1002330:	defffe04 	addi	sp,sp,-8
 1002334:	df000115 	stw	fp,4(sp)
 1002338:	df000104 	addi	fp,sp,4
 100233c:	e13fff15 	stw	r4,-4(fp)
 1002340:	e037883a 	mov	sp,fp
 1002344:	df000017 	ldw	fp,0(sp)
 1002348:	dec00104 	addi	sp,sp,4
 100234c:	f800283a 	ret

01002350 <_ZNSaIP8os_eventEC1Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }
 1002350:	defffd04 	addi	sp,sp,-12
 1002354:	dfc00215 	stw	ra,8(sp)
 1002358:	df000115 	stw	fp,4(sp)
 100235c:	df000104 	addi	fp,sp,4
 1002360:	e13fff15 	stw	r4,-4(fp)
 1002364:	e13fff17 	ldw	r4,-4(fp)
 1002368:	10023300 	call	1002330 <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2Ev>
 100236c:	e037883a 	mov	sp,fp
 1002370:	dfc00117 	ldw	ra,4(sp)
 1002374:	df000017 	ldw	fp,0(sp)
 1002378:	dec00204 	addi	sp,sp,8
 100237c:	f800283a 	ret

01002380 <_ZN9__gnu_cxx13new_allocatorIP8os_eventED2Ev>:
      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }
 1002380:	defffe04 	addi	sp,sp,-8
 1002384:	df000115 	stw	fp,4(sp)
 1002388:	df000104 	addi	fp,sp,4
 100238c:	e13fff15 	stw	r4,-4(fp)
 1002390:	e037883a 	mov	sp,fp
 1002394:	df000017 	ldw	fp,0(sp)
 1002398:	dec00104 	addi	sp,sp,4
 100239c:	f800283a 	ret

010023a0 <_ZNSaIP8os_eventED1Ev>:
      : __glibcxx_base_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 10023a0:	defffd04 	addi	sp,sp,-12
 10023a4:	dfc00215 	stw	ra,8(sp)
 10023a8:	df000115 	stw	fp,4(sp)
 10023ac:	df000104 	addi	fp,sp,4
 10023b0:	e13fff15 	stw	r4,-4(fp)
 10023b4:	e13fff17 	ldw	r4,-4(fp)
 10023b8:	10023800 	call	1002380 <_ZN9__gnu_cxx13new_allocatorIP8os_eventED2Ev>
 10023bc:	e037883a 	mov	sp,fp
 10023c0:	dfc00117 	ldw	ra,4(sp)
 10023c4:	df000017 	ldw	fp,0(sp)
 10023c8:	dec00204 	addi	sp,sp,8
 10023cc:	f800283a 	ret

010023d0 <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2ERKS3_>:
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }
 10023d0:	defffd04 	addi	sp,sp,-12
 10023d4:	df000215 	stw	fp,8(sp)
 10023d8:	df000204 	addi	fp,sp,8
 10023dc:	e13ffe15 	stw	r4,-8(fp)
 10023e0:	e17fff15 	stw	r5,-4(fp)
 10023e4:	e037883a 	mov	sp,fp
 10023e8:	df000017 	ldw	fp,0(sp)
 10023ec:	dec00104 	addi	sp,sp,4
 10023f0:	f800283a 	ret

010023f4 <_ZNSaIP8os_eventEC1ERKS1_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
 10023f4:	defffc04 	addi	sp,sp,-16
 10023f8:	dfc00315 	stw	ra,12(sp)
 10023fc:	df000215 	stw	fp,8(sp)
 1002400:	df000204 	addi	fp,sp,8
 1002404:	e13ffe15 	stw	r4,-8(fp)
 1002408:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
 100240c:	e13ffe17 	ldw	r4,-8(fp)
 1002410:	e17fff17 	ldw	r5,-4(fp)
 1002414:	10023d00 	call	10023d0 <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2ERKS3_>
 1002418:	e037883a 	mov	sp,fp
 100241c:	dfc00117 	ldw	ra,4(sp)
 1002420:	df000017 	ldw	fp,0(sp)
 1002424:	dec00204 	addi	sp,sp,8
 1002428:	f800283a 	ret

0100242c <_ZNSaIP8os_eventEC2ERKS1_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
 100242c:	defffc04 	addi	sp,sp,-16
 1002430:	dfc00315 	stw	ra,12(sp)
 1002434:	df000215 	stw	fp,8(sp)
 1002438:	df000204 	addi	fp,sp,8
 100243c:	e13ffe15 	stw	r4,-8(fp)
 1002440:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
 1002444:	e13ffe17 	ldw	r4,-8(fp)
 1002448:	e17fff17 	ldw	r5,-4(fp)
 100244c:	10023d00 	call	10023d0 <_ZN9__gnu_cxx13new_allocatorIP8os_eventEC2ERKS3_>
 1002450:	e037883a 	mov	sp,fp
 1002454:	dfc00117 	ldw	ra,4(sp)
 1002458:	df000017 	ldw	fp,0(sp)
 100245c:	dec00204 	addi	sp,sp,8
 1002460:	f800283a 	ret

01002464 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
 1002464:	defffe04 	addi	sp,sp,-8
 1002468:	df000115 	stw	fp,4(sp)
 100246c:	df000104 	addi	fp,sp,4
 1002470:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 1002474:	e0bfff17 	ldw	r2,-4(fp)
 1002478:	e037883a 	mov	sp,fp
 100247c:	df000017 	ldw	fp,0(sp)
 1002480:	dec00104 	addi	sp,sp,4
 1002484:	f800283a 	ret

01002488 <_ZN9__gnu_cxx13new_allocatorIcE9constructEPcRKc>:
      { return size_t(-1) / sizeof(_Tp); }

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
 1002488:	defffa04 	addi	sp,sp,-24
 100248c:	dfc00515 	stw	ra,20(sp)
 1002490:	df000415 	stw	fp,16(sp)
 1002494:	df000404 	addi	fp,sp,16
 1002498:	e13ffc15 	stw	r4,-16(fp)
 100249c:	e17ffd15 	stw	r5,-12(fp)
 10024a0:	e1bffe15 	stw	r6,-8(fp)
      { ::new(__p) _Tp(__val); }
 10024a4:	01000044 	movi	r4,1
 10024a8:	e17ffd17 	ldw	r5,-12(fp)
 10024ac:	10022540 	call	1002254 <_ZnwmPv>
 10024b0:	e0bfff15 	stw	r2,-4(fp)
 10024b4:	e0ffff17 	ldw	r3,-4(fp)
 10024b8:	1805003a 	cmpeq	r2,r3,zero
 10024bc:	1000041e 	bne	r2,zero,10024d0 <_ZN9__gnu_cxx13new_allocatorIcE9constructEPcRKc+0x48>
 10024c0:	e0bffe17 	ldw	r2,-8(fp)
 10024c4:	10800003 	ldbu	r2,0(r2)
 10024c8:	e0ffff17 	ldw	r3,-4(fp)
 10024cc:	18800005 	stb	r2,0(r3)
 10024d0:	e037883a 	mov	sp,fp
 10024d4:	dfc00117 	ldw	ra,4(sp)
 10024d8:	df000017 	ldw	fp,0(sp)
 10024dc:	dec00204 	addi	sp,sp,8
 10024e0:	f800283a 	ret

010024e4 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_>:
      { return size_t(-1) / sizeof(_Tp); }

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
 10024e4:	defffa04 	addi	sp,sp,-24
 10024e8:	dfc00515 	stw	ra,20(sp)
 10024ec:	df000415 	stw	fp,16(sp)
 10024f0:	df000404 	addi	fp,sp,16
 10024f4:	e13ffc15 	stw	r4,-16(fp)
 10024f8:	e17ffd15 	stw	r5,-12(fp)
 10024fc:	e1bffe15 	stw	r6,-8(fp)
      { ::new(__p) _Tp(__val); }
 1002500:	01000104 	movi	r4,4
 1002504:	e17ffd17 	ldw	r5,-12(fp)
 1002508:	10022540 	call	1002254 <_ZnwmPv>
 100250c:	e0bfff15 	stw	r2,-4(fp)
 1002510:	e0ffff17 	ldw	r3,-4(fp)
 1002514:	1805003a 	cmpeq	r2,r3,zero
 1002518:	1000041e 	bne	r2,zero,100252c <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_+0x48>
 100251c:	e0bffe17 	ldw	r2,-8(fp)
 1002520:	10800017 	ldw	r2,0(r2)
 1002524:	e0ffff17 	ldw	r3,-4(fp)
 1002528:	18800015 	stw	r2,0(r3)
 100252c:	e037883a 	mov	sp,fp
 1002530:	dfc00117 	ldw	ra,4(sp)
 1002534:	df000017 	ldw	fp,0(sp)
 1002538:	dec00204 	addi	sp,sp,8
 100253c:	f800283a 	ret

01002540 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 1002540:	defffd04 	addi	sp,sp,-12
 1002544:	df000215 	stw	fp,8(sp)
 1002548:	df000204 	addi	fp,sp,8
 100254c:	e13ffe15 	stw	r4,-8(fp)
 1002550:	e17fff15 	stw	r5,-4(fp)
 1002554:	e0bfff17 	ldw	r2,-4(fp)
 1002558:	10c00017 	ldw	r3,0(r2)
 100255c:	e0bffe17 	ldw	r2,-8(fp)
 1002560:	10c00015 	stw	r3,0(r2)
 1002564:	e037883a 	mov	sp,fp
 1002568:	df000017 	ldw	fp,0(sp)
 100256c:	dec00104 	addi	sp,sp,4
 1002570:	f800283a 	ret

01002574 <_ZNSt6vectorIcSaIcEE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin()
 1002574:	defffc04 	addi	sp,sp,-16
 1002578:	dfc00315 	stw	ra,12(sp)
 100257c:	df000215 	stw	fp,8(sp)
 1002580:	df000204 	addi	fp,sp,8
 1002584:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_start); }
 1002588:	e17fff17 	ldw	r5,-4(fp)
 100258c:	e13ffe04 	addi	r4,fp,-8
 1002590:	10025400 	call	1002540 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 1002594:	e0bffe17 	ldw	r2,-8(fp)
 1002598:	e037883a 	mov	sp,fp
 100259c:	dfc00117 	ldw	ra,4(sp)
 10025a0:	df000017 	ldw	fp,0(sp)
 10025a4:	dec00204 	addi	sp,sp,8
 10025a8:	f800283a 	ret

010025ac <_ZNSt6vectorIcSaIcEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end()
 10025ac:	defffc04 	addi	sp,sp,-16
 10025b0:	dfc00315 	stw	ra,12(sp)
 10025b4:	df000215 	stw	fp,8(sp)
 10025b8:	df000204 	addi	fp,sp,8
 10025bc:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_finish); }
 10025c0:	e0bfff17 	ldw	r2,-4(fp)
 10025c4:	11400104 	addi	r5,r2,4
 10025c8:	e13ffe04 	addi	r4,fp,-8
 10025cc:	10025400 	call	1002540 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 10025d0:	e0bffe17 	ldw	r2,-8(fp)
 10025d4:	e037883a 	mov	sp,fp
 10025d8:	dfc00117 	ldw	ra,4(sp)
 10025dc:	df000017 	ldw	fp,0(sp)
 10025e0:	dec00204 	addi	sp,sp,8
 10025e4:	f800283a 	ret

010025e8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
 10025e8:	defffe04 	addi	sp,sp,-8
 10025ec:	df000115 	stw	fp,4(sp)
 10025f0:	df000104 	addi	fp,sp,4
 10025f4:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
 10025f8:	e0bfff17 	ldw	r2,-4(fp)
 10025fc:	e037883a 	mov	sp,fp
 1002600:	df000017 	ldw	fp,0(sp)
 1002604:	dec00104 	addi	sp,sp,4
 1002608:	f800283a 	ret

0100260c <_ZN9__gnu_cxxneIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
 100260c:	defffb04 	addi	sp,sp,-20
 1002610:	dfc00415 	stw	ra,16(sp)
 1002614:	df000315 	stw	fp,12(sp)
 1002618:	dc000215 	stw	r16,8(sp)
 100261c:	df000204 	addi	fp,sp,8
 1002620:	e13ffe15 	stw	r4,-8(fp)
 1002624:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() != __rhs.base(); }
 1002628:	e13ffe17 	ldw	r4,-8(fp)
 100262c:	10025e80 	call	10025e8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1002630:	14000017 	ldw	r16,0(r2)
 1002634:	e13fff17 	ldw	r4,-4(fp)
 1002638:	10025e80 	call	10025e8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 100263c:	10800017 	ldw	r2,0(r2)
 1002640:	8084c03a 	cmpne	r2,r16,r2
 1002644:	e037883a 	mov	sp,fp
 1002648:	dfc00217 	ldw	ra,8(sp)
 100264c:	df000117 	ldw	fp,4(sp)
 1002650:	dc000017 	ldw	r16,0(sp)
 1002654:	dec00304 	addi	sp,sp,12
 1002658:	f800283a 	ret

0100265c <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEdeEv>:
			  >::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
 100265c:	defffe04 	addi	sp,sp,-8
 1002660:	df000115 	stw	fp,4(sp)
 1002664:	df000104 	addi	fp,sp,4
 1002668:	e13fff15 	stw	r4,-4(fp)
      { return *_M_current; }
 100266c:	e0bfff17 	ldw	r2,-4(fp)
 1002670:	10800017 	ldw	r2,0(r2)
 1002674:	e037883a 	mov	sp,fp
 1002678:	df000017 	ldw	fp,0(sp)
 100267c:	dec00104 	addi	sp,sp,4
 1002680:	f800283a 	ret

01002684 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
      : public _Tp_alloc_type
      {
	_Tp*           _M_start;
	_Tp*           _M_finish;
	_Tp*           _M_end_of_storage;
	_Vector_impl(_Tp_alloc_type const& __a)
 1002684:	defffc04 	addi	sp,sp,-16
 1002688:	dfc00315 	stw	ra,12(sp)
 100268c:	df000215 	stw	fp,8(sp)
 1002690:	df000204 	addi	fp,sp,8
 1002694:	e13ffe15 	stw	r4,-8(fp)
 1002698:	e17fff15 	stw	r5,-4(fp)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 100269c:	e13ffe17 	ldw	r4,-8(fp)
 10026a0:	e17fff17 	ldw	r5,-4(fp)
 10026a4:	1007b040 	call	1007b04 <_ZNSaIcEC2ERKS_>
 10026a8:	e0bffe17 	ldw	r2,-8(fp)
 10026ac:	10000015 	stw	zero,0(r2)
 10026b0:	e0bffe17 	ldw	r2,-8(fp)
 10026b4:	10000115 	stw	zero,4(r2)
 10026b8:	e0bffe17 	ldw	r2,-8(fp)
 10026bc:	10000215 	stw	zero,8(r2)
	{ }
 10026c0:	e037883a 	mov	sp,fp
 10026c4:	dfc00117 	ldw	ra,4(sp)
 10026c8:	df000017 	ldw	fp,0(sp)
 10026cc:	dec00204 	addi	sp,sp,8
 10026d0:	f800283a 	ret

010026d4 <_ZNSt12_Vector_baseIcSaIcEEC2ERKS0_>:

      allocator_type
      get_allocator() const
      { return _M_get_Tp_allocator(); }

      _Vector_base(const allocator_type& __a)
 10026d4:	defffc04 	addi	sp,sp,-16
 10026d8:	dfc00315 	stw	ra,12(sp)
 10026dc:	df000215 	stw	fp,8(sp)
 10026e0:	df000204 	addi	fp,sp,8
 10026e4:	e13ffe15 	stw	r4,-8(fp)
 10026e8:	e17fff15 	stw	r5,-4(fp)
      : _M_impl(__a)
 10026ec:	e13ffe17 	ldw	r4,-8(fp)
 10026f0:	e17fff17 	ldw	r5,-4(fp)
 10026f4:	10026840 	call	1002684 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { }
 10026f8:	e037883a 	mov	sp,fp
 10026fc:	dfc00117 	ldw	ra,4(sp)
 1002700:	df000017 	ldw	fp,0(sp)
 1002704:	dec00204 	addi	sp,sp,8
 1002708:	f800283a 	ret

0100270c <_ZNSt6vectorIcSaIcEEC1ERKS0_>:
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      explicit
      vector(const allocator_type& __a = allocator_type())
 100270c:	defffc04 	addi	sp,sp,-16
 1002710:	dfc00315 	stw	ra,12(sp)
 1002714:	df000215 	stw	fp,8(sp)
 1002718:	df000204 	addi	fp,sp,8
 100271c:	e13ffe15 	stw	r4,-8(fp)
 1002720:	e17fff15 	stw	r5,-4(fp)
      : _Base(__a)
 1002724:	e13ffe17 	ldw	r4,-8(fp)
 1002728:	e17fff17 	ldw	r5,-4(fp)
 100272c:	10026d40 	call	10026d4 <_ZNSt12_Vector_baseIcSaIcEEC2ERKS0_>
      { }
 1002730:	e037883a 	mov	sp,fp
 1002734:	dfc00117 	ldw	ra,4(sp)
 1002738:	df000017 	ldw	fp,0(sp)
 100273c:	dec00204 	addi	sp,sp,8
 1002740:	f800283a 	ret

01002744 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE12_Vector_implC1ERKS2_>:
      : public _Tp_alloc_type
      {
	_Tp*           _M_start;
	_Tp*           _M_finish;
	_Tp*           _M_end_of_storage;
	_Vector_impl(_Tp_alloc_type const& __a)
 1002744:	defffc04 	addi	sp,sp,-16
 1002748:	dfc00315 	stw	ra,12(sp)
 100274c:	df000215 	stw	fp,8(sp)
 1002750:	df000204 	addi	fp,sp,8
 1002754:	e13ffe15 	stw	r4,-8(fp)
 1002758:	e17fff15 	stw	r5,-4(fp)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 100275c:	e13ffe17 	ldw	r4,-8(fp)
 1002760:	e17fff17 	ldw	r5,-4(fp)
 1002764:	100242c0 	call	100242c <_ZNSaIP8os_eventEC2ERKS1_>
 1002768:	e0bffe17 	ldw	r2,-8(fp)
 100276c:	10000015 	stw	zero,0(r2)
 1002770:	e0bffe17 	ldw	r2,-8(fp)
 1002774:	10000115 	stw	zero,4(r2)
 1002778:	e0bffe17 	ldw	r2,-8(fp)
 100277c:	10000215 	stw	zero,8(r2)
	{ }
 1002780:	e037883a 	mov	sp,fp
 1002784:	dfc00117 	ldw	ra,4(sp)
 1002788:	df000017 	ldw	fp,0(sp)
 100278c:	dec00204 	addi	sp,sp,8
 1002790:	f800283a 	ret

01002794 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EEC2ERKS2_>:

      allocator_type
      get_allocator() const
      { return _M_get_Tp_allocator(); }

      _Vector_base(const allocator_type& __a)
 1002794:	defffc04 	addi	sp,sp,-16
 1002798:	dfc00315 	stw	ra,12(sp)
 100279c:	df000215 	stw	fp,8(sp)
 10027a0:	df000204 	addi	fp,sp,8
 10027a4:	e13ffe15 	stw	r4,-8(fp)
 10027a8:	e17fff15 	stw	r5,-4(fp)
      : _M_impl(__a)
 10027ac:	e13ffe17 	ldw	r4,-8(fp)
 10027b0:	e17fff17 	ldw	r5,-4(fp)
 10027b4:	10027440 	call	1002744 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE12_Vector_implC1ERKS2_>
      { }
 10027b8:	e037883a 	mov	sp,fp
 10027bc:	dfc00117 	ldw	ra,4(sp)
 10027c0:	df000017 	ldw	fp,0(sp)
 10027c4:	dec00204 	addi	sp,sp,8
 10027c8:	f800283a 	ret

010027cc <_ZNSt6vectorIP8os_eventSaIS1_EEC1ERKS2_>:
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      explicit
      vector(const allocator_type& __a = allocator_type())
 10027cc:	defffc04 	addi	sp,sp,-16
 10027d0:	dfc00315 	stw	ra,12(sp)
 10027d4:	df000215 	stw	fp,8(sp)
 10027d8:	df000204 	addi	fp,sp,8
 10027dc:	e13ffe15 	stw	r4,-8(fp)
 10027e0:	e17fff15 	stw	r5,-4(fp)
      : _Base(__a)
 10027e4:	e13ffe17 	ldw	r4,-8(fp)
 10027e8:	e17fff17 	ldw	r5,-4(fp)
 10027ec:	10027940 	call	1002794 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EEC2ERKS2_>
      { }
 10027f0:	e037883a 	mov	sp,fp
 10027f4:	dfc00117 	ldw	ra,4(sp)
 10027f8:	df000017 	ldw	fp,0(sp)
 10027fc:	dec00204 	addi	sp,sp,8
 1002800:	f800283a 	ret

01002804 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>:
      size() const
      { return size_type(end() - begin()); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const
 1002804:	defffe04 	addi	sp,sp,-8
 1002808:	df000115 	stw	fp,4(sp)
 100280c:	df000104 	addi	fp,sp,4
 1002810:	e13fff15 	stw	r4,-4(fp)
      { return size_type(-1) / sizeof(value_type); }
 1002814:	00bfffc4 	movi	r2,-1
 1002818:	e037883a 	mov	sp,fp
 100281c:	df000017 	ldw	fp,0(sp)
 1002820:	dec00104 	addi	sp,sp,4
 1002824:	f800283a 	ret

01002828 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 1002828:	defffd04 	addi	sp,sp,-12
 100282c:	df000215 	stw	fp,8(sp)
 1002830:	df000204 	addi	fp,sp,8
 1002834:	e13ffe15 	stw	r4,-8(fp)
 1002838:	e17fff15 	stw	r5,-4(fp)
 100283c:	e0bfff17 	ldw	r2,-4(fp)
 1002840:	10c00017 	ldw	r3,0(r2)
 1002844:	e0bffe17 	ldw	r2,-8(fp)
 1002848:	10c00015 	stw	r3,0(r2)
 100284c:	e037883a 	mov	sp,fp
 1002850:	df000017 	ldw	fp,0(sp)
 1002854:	dec00104 	addi	sp,sp,4
 1002858:	f800283a 	ret

0100285c <_ZNSt6vectorIP8os_eventSaIS1_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin()
 100285c:	defffc04 	addi	sp,sp,-16
 1002860:	dfc00315 	stw	ra,12(sp)
 1002864:	df000215 	stw	fp,8(sp)
 1002868:	df000204 	addi	fp,sp,8
 100286c:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_start); }
 1002870:	e17fff17 	ldw	r5,-4(fp)
 1002874:	e13ffe04 	addi	r4,fp,-8
 1002878:	10028280 	call	1002828 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 100287c:	e0bffe17 	ldw	r2,-8(fp)
 1002880:	e037883a 	mov	sp,fp
 1002884:	dfc00117 	ldw	ra,4(sp)
 1002888:	df000017 	ldw	fp,0(sp)
 100288c:	dec00204 	addi	sp,sp,8
 1002890:	f800283a 	ret

01002894 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEplERKl>:
      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
 1002894:	defffa04 	addi	sp,sp,-24
 1002898:	dfc00515 	stw	ra,20(sp)
 100289c:	df000415 	stw	fp,16(sp)
 10028a0:	df000404 	addi	fp,sp,16
 10028a4:	e13ffe15 	stw	r4,-8(fp)
 10028a8:	e17fff15 	stw	r5,-4(fp)
      { return __normal_iterator(_M_current + __n); }
 10028ac:	e0bffe17 	ldw	r2,-8(fp)
 10028b0:	10c00017 	ldw	r3,0(r2)
 10028b4:	e0bfff17 	ldw	r2,-4(fp)
 10028b8:	10800017 	ldw	r2,0(r2)
 10028bc:	1085883a 	add	r2,r2,r2
 10028c0:	1085883a 	add	r2,r2,r2
 10028c4:	1885883a 	add	r2,r3,r2
 10028c8:	e0bffc15 	stw	r2,-16(fp)
 10028cc:	e13ffd04 	addi	r4,fp,-12
 10028d0:	e17ffc04 	addi	r5,fp,-16
 10028d4:	10028280 	call	1002828 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 10028d8:	e0bffd17 	ldw	r2,-12(fp)
 10028dc:	e037883a 	mov	sp,fp
 10028e0:	dfc00117 	ldw	ra,4(sp)
 10028e4:	df000017 	ldw	fp,0(sp)
 10028e8:	dec00204 	addi	sp,sp,8
 10028ec:	f800283a 	ret

010028f0 <_ZNSt6vectorIP8os_eventSaIS1_EEixEm>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
 10028f0:	defff904 	addi	sp,sp,-28
 10028f4:	dfc00615 	stw	ra,24(sp)
 10028f8:	df000515 	stw	fp,20(sp)
 10028fc:	df000504 	addi	fp,sp,20
 1002900:	e13ffe15 	stw	r4,-8(fp)
 1002904:	e17fff15 	stw	r5,-4(fp)
      { return *(begin() + __n); }
 1002908:	e13ffe17 	ldw	r4,-8(fp)
 100290c:	100285c0 	call	100285c <_ZNSt6vectorIP8os_eventSaIS1_EE5beginEv>
 1002910:	e0bffc15 	stw	r2,-16(fp)
 1002914:	e0bfff17 	ldw	r2,-4(fp)
 1002918:	e0bffb15 	stw	r2,-20(fp)
 100291c:	e13ffc04 	addi	r4,fp,-16
 1002920:	e17ffb04 	addi	r5,fp,-20
 1002924:	10028940 	call	1002894 <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEplERKl>
 1002928:	e0bffd15 	stw	r2,-12(fp)
 100292c:	e13ffd04 	addi	r4,fp,-12
 1002930:	100265c0 	call	100265c <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEdeEv>
 1002934:	e037883a 	mov	sp,fp
 1002938:	dfc00117 	ldw	ra,4(sp)
 100293c:	df000017 	ldw	fp,0(sp)
 1002940:	dec00204 	addi	sp,sp,8
 1002944:	f800283a 	ret

01002948 <_ZNSt6vectorIP8os_eventSaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end()
 1002948:	defffc04 	addi	sp,sp,-16
 100294c:	dfc00315 	stw	ra,12(sp)
 1002950:	df000215 	stw	fp,8(sp)
 1002954:	df000204 	addi	fp,sp,8
 1002958:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_finish); }
 100295c:	e0bfff17 	ldw	r2,-4(fp)
 1002960:	11400104 	addi	r5,r2,4
 1002964:	e13ffe04 	addi	r4,fp,-8
 1002968:	10028280 	call	1002828 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 100296c:	e0bffe17 	ldw	r2,-8(fp)
 1002970:	e037883a 	mov	sp,fp
 1002974:	dfc00117 	ldw	ra,4(sp)
 1002978:	df000017 	ldw	fp,0(sp)
 100297c:	dec00204 	addi	sp,sp,8
 1002980:	f800283a 	ret

01002984 <_ZNKSt6vectorIP8os_eventSaIS1_EE8max_sizeEv>:
      size() const
      { return size_type(end() - begin()); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const
 1002984:	defffe04 	addi	sp,sp,-8
 1002988:	df000115 	stw	fp,4(sp)
 100298c:	df000104 	addi	fp,sp,4
 1002990:	e13fff15 	stw	r4,-4(fp)
      { return size_type(-1) / sizeof(value_type); }
 1002994:	00900034 	movhi	r2,16384
 1002998:	10bfffc4 	addi	r2,r2,-1
 100299c:	e037883a 	mov	sp,fp
 10029a0:	df000017 	ldw	fp,0(sp)
 10029a4:	dec00104 	addi	sp,sp,4
 10029a8:	f800283a 	ret

010029ac <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
 10029ac:	defffe04 	addi	sp,sp,-8
 10029b0:	df000115 	stw	fp,4(sp)
 10029b4:	df000104 	addi	fp,sp,4
 10029b8:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
 10029bc:	e0bfff17 	ldw	r2,-4(fp)
 10029c0:	e037883a 	mov	sp,fp
 10029c4:	df000017 	ldw	fp,0(sp)
 10029c8:	dec00104 	addi	sp,sp,4
 10029cc:	f800283a 	ret

010029d0 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
 10029d0:	defffe04 	addi	sp,sp,-8
 10029d4:	df000115 	stw	fp,4(sp)
 10029d8:	df000104 	addi	fp,sp,4
 10029dc:	e13fff15 	stw	r4,-4(fp)
      {
	++_M_current;
 10029e0:	e0bfff17 	ldw	r2,-4(fp)
 10029e4:	10800017 	ldw	r2,0(r2)
 10029e8:	10c00104 	addi	r3,r2,4
 10029ec:	e0bfff17 	ldw	r2,-4(fp)
 10029f0:	10c00015 	stw	r3,0(r2)
	return *this;
 10029f4:	e0bfff17 	ldw	r2,-4(fp)
 10029f8:	e037883a 	mov	sp,fp
 10029fc:	df000017 	ldw	fp,0(sp)
 1002a00:	dec00104 	addi	sp,sp,4
 1002a04:	f800283a 	ret

01002a08 <_ZSt13__destroy_auxIPcEvT_S1_11__true_type>:
   * This is a helper function used only by _Destroy().
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
 1002a08:	defffc04 	addi	sp,sp,-16
 1002a0c:	df000315 	stw	fp,12(sp)
 1002a10:	df000304 	addi	fp,sp,12
 1002a14:	e13ffd15 	stw	r4,-12(fp)
 1002a18:	e17ffe15 	stw	r5,-8(fp)
 1002a1c:	e1bfff05 	stb	r6,-4(fp)
    { }
 1002a20:	e037883a 	mov	sp,fp
 1002a24:	df000017 	ldw	fp,0(sp)
 1002a28:	dec00104 	addi	sp,sp,4
 1002a2c:	f800283a 	ret

01002a30 <_ZSt8_DestroyIPcEvT_S1_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 1002a30:	defffb04 	addi	sp,sp,-20
 1002a34:	dfc00415 	stw	ra,16(sp)
 1002a38:	df000315 	stw	fp,12(sp)
 1002a3c:	df000304 	addi	fp,sp,12
 1002a40:	e13ffd15 	stw	r4,-12(fp)
 1002a44:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
 1002a48:	e13ffd17 	ldw	r4,-12(fp)
 1002a4c:	e17ffe17 	ldw	r5,-8(fp)
 1002a50:	e1bfff03 	ldbu	r6,-4(fp)
 1002a54:	1002a080 	call	1002a08 <_ZSt13__destroy_auxIPcEvT_S1_11__true_type>
 1002a58:	e037883a 	mov	sp,fp
 1002a5c:	dfc00117 	ldw	ra,4(sp)
 1002a60:	df000017 	ldw	fp,0(sp)
 1002a64:	dec00204 	addi	sp,sp,8
 1002a68:	f800283a 	ret

01002a6c <_ZSt8_DestroyIPccEvT_S1_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
 1002a6c:	defffb04 	addi	sp,sp,-20
 1002a70:	dfc00415 	stw	ra,16(sp)
 1002a74:	df000315 	stw	fp,12(sp)
 1002a78:	df000304 	addi	fp,sp,12
 1002a7c:	e13ffd15 	stw	r4,-12(fp)
 1002a80:	e17ffe15 	stw	r5,-8(fp)
 1002a84:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
 1002a88:	e13ffd17 	ldw	r4,-12(fp)
 1002a8c:	e17ffe17 	ldw	r5,-8(fp)
 1002a90:	1002a300 	call	1002a30 <_ZSt8_DestroyIPcEvT_S1_>
 1002a94:	e037883a 	mov	sp,fp
 1002a98:	dfc00117 	ldw	ra,4(sp)
 1002a9c:	df000017 	ldw	fp,0(sp)
 1002aa0:	dec00204 	addi	sp,sp,8
 1002aa4:	f800283a 	ret

01002aa8 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 1002aa8:	defffd04 	addi	sp,sp,-12
 1002aac:	df000215 	stw	fp,8(sp)
 1002ab0:	df000204 	addi	fp,sp,8
 1002ab4:	e13ffe15 	stw	r4,-8(fp)
 1002ab8:	e17fff15 	stw	r5,-4(fp)
 1002abc:	e0bfff17 	ldw	r2,-4(fp)
 1002ac0:	10c00017 	ldw	r3,0(r2)
 1002ac4:	e0bffe17 	ldw	r2,-8(fp)
 1002ac8:	10c00015 	stw	r3,0(r2)
 1002acc:	e037883a 	mov	sp,fp
 1002ad0:	df000017 	ldw	fp,0(sp)
 1002ad4:	dec00104 	addi	sp,sp,4
 1002ad8:	f800283a 	ret

01002adc <_ZNKSt6vectorIcSaIcEE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %vector.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const
 1002adc:	defffb04 	addi	sp,sp,-20
 1002ae0:	dfc00415 	stw	ra,16(sp)
 1002ae4:	df000315 	stw	fp,12(sp)
 1002ae8:	df000304 	addi	fp,sp,12
 1002aec:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_finish); }
 1002af0:	e0bfff17 	ldw	r2,-4(fp)
 1002af4:	10800117 	ldw	r2,4(r2)
 1002af8:	e0bffd15 	stw	r2,-12(fp)
 1002afc:	e13ffe04 	addi	r4,fp,-8
 1002b00:	e17ffd04 	addi	r5,fp,-12
 1002b04:	1002aa80 	call	1002aa8 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 1002b08:	e0bffe17 	ldw	r2,-8(fp)
 1002b0c:	e037883a 	mov	sp,fp
 1002b10:	dfc00117 	ldw	ra,4(sp)
 1002b14:	df000017 	ldw	fp,0(sp)
 1002b18:	dec00204 	addi	sp,sp,8
 1002b1c:	f800283a 	ret

01002b20 <_ZNKSt6vectorIcSaIcEE5beginEv>:
       *  Returns a read-only (constant) iterator that points to the
       *  first element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      begin() const
 1002b20:	defffb04 	addi	sp,sp,-20
 1002b24:	dfc00415 	stw	ra,16(sp)
 1002b28:	df000315 	stw	fp,12(sp)
 1002b2c:	df000304 	addi	fp,sp,12
 1002b30:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_start); }
 1002b34:	e0bfff17 	ldw	r2,-4(fp)
 1002b38:	10800017 	ldw	r2,0(r2)
 1002b3c:	e0bffd15 	stw	r2,-12(fp)
 1002b40:	e13ffe04 	addi	r4,fp,-8
 1002b44:	e17ffd04 	addi	r5,fp,-12
 1002b48:	1002aa80 	call	1002aa8 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 1002b4c:	e0bffe17 	ldw	r2,-8(fp)
 1002b50:	e037883a 	mov	sp,fp
 1002b54:	dfc00117 	ldw	ra,4(sp)
 1002b58:	df000017 	ldw	fp,0(sp)
 1002b5c:	dec00204 	addi	sp,sp,8
 1002b60:	f800283a 	ret

01002b64 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
 1002b64:	defffe04 	addi	sp,sp,-8
 1002b68:	df000115 	stw	fp,4(sp)
 1002b6c:	df000104 	addi	fp,sp,4
 1002b70:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
 1002b74:	e0bfff17 	ldw	r2,-4(fp)
 1002b78:	e037883a 	mov	sp,fp
 1002b7c:	df000017 	ldw	fp,0(sp)
 1002b80:	dec00104 	addi	sp,sp,4
 1002b84:	f800283a 	ret

01002b88 <_ZN9__gnu_cxxmiIPKcS2_St6vectorIcSaIcEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS9_RKNS6_IT0_S8_EE>:
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 1002b88:	defffb04 	addi	sp,sp,-20
 1002b8c:	dfc00415 	stw	ra,16(sp)
 1002b90:	df000315 	stw	fp,12(sp)
 1002b94:	dc000215 	stw	r16,8(sp)
 1002b98:	df000204 	addi	fp,sp,8
 1002b9c:	e13ffe15 	stw	r4,-8(fp)
 1002ba0:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() - __rhs.base(); }
 1002ba4:	e13ffe17 	ldw	r4,-8(fp)
 1002ba8:	1002b640 	call	1002b64 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 1002bac:	10800017 	ldw	r2,0(r2)
 1002bb0:	1021883a 	mov	r16,r2
 1002bb4:	e13fff17 	ldw	r4,-4(fp)
 1002bb8:	1002b640 	call	1002b64 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 1002bbc:	10800017 	ldw	r2,0(r2)
 1002bc0:	8085c83a 	sub	r2,r16,r2
 1002bc4:	e037883a 	mov	sp,fp
 1002bc8:	dfc00217 	ldw	ra,8(sp)
 1002bcc:	df000117 	ldw	fp,4(sp)
 1002bd0:	dc000017 	ldw	r16,0(sp)
 1002bd4:	dec00304 	addi	sp,sp,12
 1002bd8:	f800283a 	ret

01002bdc <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const
 1002bdc:	defffb04 	addi	sp,sp,-20
 1002be0:	dfc00415 	stw	ra,16(sp)
 1002be4:	df000315 	stw	fp,12(sp)
 1002be8:	df000304 	addi	fp,sp,12
 1002bec:	e13fff15 	stw	r4,-4(fp)
      { return size_type(end() - begin()); }
 1002bf0:	e13fff17 	ldw	r4,-4(fp)
 1002bf4:	1002adc0 	call	1002adc <_ZNKSt6vectorIcSaIcEE3endEv>
 1002bf8:	e0bffe15 	stw	r2,-8(fp)
 1002bfc:	e13fff17 	ldw	r4,-4(fp)
 1002c00:	1002b200 	call	1002b20 <_ZNKSt6vectorIcSaIcEE5beginEv>
 1002c04:	e0bffd15 	stw	r2,-12(fp)
 1002c08:	e13ffe04 	addi	r4,fp,-8
 1002c0c:	e17ffd04 	addi	r5,fp,-12
 1002c10:	1002b880 	call	1002b88 <_ZN9__gnu_cxxmiIPKcS2_St6vectorIcSaIcEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS9_RKNS6_IT0_S8_EE>
 1002c14:	e037883a 	mov	sp,fp
 1002c18:	dfc00117 	ldw	ra,4(sp)
 1002c1c:	df000017 	ldw	fp,0(sp)
 1002c20:	dec00204 	addi	sp,sp,8
 1002c24:	f800283a 	ret

01002c28 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw() 
 1002c28:	defffe04 	addi	sp,sp,-8
 1002c2c:	df000115 	stw	fp,4(sp)
 1002c30:	df000104 	addi	fp,sp,4
 1002c34:	e13fff15 	stw	r4,-4(fp)
      { return size_t(-1) / sizeof(_Tp); }
 1002c38:	00bfffc4 	movi	r2,-1
 1002c3c:	e037883a 	mov	sp,fp
 1002c40:	df000017 	ldw	fp,0(sp)
 1002c44:	dec00104 	addi	sp,sp,4
 1002c48:	f800283a 	ret

01002c4c <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEEvT_S7_11__true_type>:
   * This is a helper function used only by _Destroy().
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
 1002c4c:	defffc04 	addi	sp,sp,-16
 1002c50:	df000315 	stw	fp,12(sp)
 1002c54:	df000304 	addi	fp,sp,12
 1002c58:	e13ffd15 	stw	r4,-12(fp)
 1002c5c:	e17ffe15 	stw	r5,-8(fp)
 1002c60:	e1bfff05 	stb	r6,-4(fp)
    { }
 1002c64:	e037883a 	mov	sp,fp
 1002c68:	df000017 	ldw	fp,0(sp)
 1002c6c:	dec00104 	addi	sp,sp,4
 1002c70:	f800283a 	ret

01002c74 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEEvT_S7_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 1002c74:	defffb04 	addi	sp,sp,-20
 1002c78:	dfc00415 	stw	ra,16(sp)
 1002c7c:	df000315 	stw	fp,12(sp)
 1002c80:	df000304 	addi	fp,sp,12
 1002c84:	e13ffd15 	stw	r4,-12(fp)
 1002c88:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
 1002c8c:	e13ffd17 	ldw	r4,-12(fp)
 1002c90:	e17ffe17 	ldw	r5,-8(fp)
 1002c94:	e1bfff03 	ldbu	r6,-4(fp)
 1002c98:	1002c4c0 	call	1002c4c <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEEvT_S7_11__true_type>
 1002c9c:	e037883a 	mov	sp,fp
 1002ca0:	dfc00117 	ldw	ra,4(sp)
 1002ca4:	df000017 	ldw	fp,0(sp)
 1002ca8:	dec00204 	addi	sp,sp,8
 1002cac:	f800283a 	ret

01002cb0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcEvT_S7_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
 1002cb0:	defffb04 	addi	sp,sp,-20
 1002cb4:	dfc00415 	stw	ra,16(sp)
 1002cb8:	df000315 	stw	fp,12(sp)
 1002cbc:	df000304 	addi	fp,sp,12
 1002cc0:	e13ffd15 	stw	r4,-12(fp)
 1002cc4:	e17ffe15 	stw	r5,-8(fp)
 1002cc8:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
 1002ccc:	e13ffd17 	ldw	r4,-12(fp)
 1002cd0:	e17ffe17 	ldw	r5,-8(fp)
 1002cd4:	1002c740 	call	1002c74 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEEvT_S7_>
 1002cd8:	e037883a 	mov	sp,fp
 1002cdc:	dfc00117 	ldw	ra,4(sp)
 1002ce0:	df000017 	ldw	fp,0(sp)
 1002ce4:	dec00204 	addi	sp,sp,8
 1002ce8:	f800283a 	ret

01002cec <_ZN9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 1002cec:	defffd04 	addi	sp,sp,-12
 1002cf0:	df000215 	stw	fp,8(sp)
 1002cf4:	df000204 	addi	fp,sp,8
 1002cf8:	e13ffe15 	stw	r4,-8(fp)
 1002cfc:	e17fff15 	stw	r5,-4(fp)
 1002d00:	e0bfff17 	ldw	r2,-4(fp)
 1002d04:	10c00017 	ldw	r3,0(r2)
 1002d08:	e0bffe17 	ldw	r2,-8(fp)
 1002d0c:	10c00015 	stw	r3,0(r2)
 1002d10:	e037883a 	mov	sp,fp
 1002d14:	df000017 	ldw	fp,0(sp)
 1002d18:	dec00104 	addi	sp,sp,4
 1002d1c:	f800283a 	ret

01002d20 <_ZNKSt6vectorIP8os_eventSaIS1_EE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %vector.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const
 1002d20:	defffb04 	addi	sp,sp,-20
 1002d24:	dfc00415 	stw	ra,16(sp)
 1002d28:	df000315 	stw	fp,12(sp)
 1002d2c:	df000304 	addi	fp,sp,12
 1002d30:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_finish); }
 1002d34:	e0bfff17 	ldw	r2,-4(fp)
 1002d38:	10800117 	ldw	r2,4(r2)
 1002d3c:	e0bffd15 	stw	r2,-12(fp)
 1002d40:	e13ffe04 	addi	r4,fp,-8
 1002d44:	e17ffd04 	addi	r5,fp,-12
 1002d48:	1002cec0 	call	1002cec <_ZN9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 1002d4c:	e0bffe17 	ldw	r2,-8(fp)
 1002d50:	e037883a 	mov	sp,fp
 1002d54:	dfc00117 	ldw	ra,4(sp)
 1002d58:	df000017 	ldw	fp,0(sp)
 1002d5c:	dec00204 	addi	sp,sp,8
 1002d60:	f800283a 	ret

01002d64 <_ZNKSt6vectorIP8os_eventSaIS1_EE5beginEv>:
       *  Returns a read-only (constant) iterator that points to the
       *  first element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      begin() const
 1002d64:	defffb04 	addi	sp,sp,-20
 1002d68:	dfc00415 	stw	ra,16(sp)
 1002d6c:	df000315 	stw	fp,12(sp)
 1002d70:	df000304 	addi	fp,sp,12
 1002d74:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_start); }
 1002d78:	e0bfff17 	ldw	r2,-4(fp)
 1002d7c:	10800017 	ldw	r2,0(r2)
 1002d80:	e0bffd15 	stw	r2,-12(fp)
 1002d84:	e13ffe04 	addi	r4,fp,-8
 1002d88:	e17ffd04 	addi	r5,fp,-12
 1002d8c:	1002cec0 	call	1002cec <_ZN9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 1002d90:	e0bffe17 	ldw	r2,-8(fp)
 1002d94:	e037883a 	mov	sp,fp
 1002d98:	dfc00117 	ldw	ra,4(sp)
 1002d9c:	df000017 	ldw	fp,0(sp)
 1002da0:	dec00204 	addi	sp,sp,8
 1002da4:	f800283a 	ret

01002da8 <_ZNK9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
 1002da8:	defffe04 	addi	sp,sp,-8
 1002dac:	df000115 	stw	fp,4(sp)
 1002db0:	df000104 	addi	fp,sp,4
 1002db4:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
 1002db8:	e0bfff17 	ldw	r2,-4(fp)
 1002dbc:	e037883a 	mov	sp,fp
 1002dc0:	df000017 	ldw	fp,0(sp)
 1002dc4:	dec00104 	addi	sp,sp,4
 1002dc8:	f800283a 	ret

01002dcc <_ZN9__gnu_cxxmiIPKP8os_eventS4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE>:
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 1002dcc:	defffb04 	addi	sp,sp,-20
 1002dd0:	dfc00415 	stw	ra,16(sp)
 1002dd4:	df000315 	stw	fp,12(sp)
 1002dd8:	dc000215 	stw	r16,8(sp)
 1002ddc:	df000204 	addi	fp,sp,8
 1002de0:	e13ffe15 	stw	r4,-8(fp)
 1002de4:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() - __rhs.base(); }
 1002de8:	e13ffe17 	ldw	r4,-8(fp)
 1002dec:	1002da80 	call	1002da8 <_ZNK9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1002df0:	10800017 	ldw	r2,0(r2)
 1002df4:	1021883a 	mov	r16,r2
 1002df8:	e13fff17 	ldw	r4,-4(fp)
 1002dfc:	1002da80 	call	1002da8 <_ZNK9__gnu_cxx17__normal_iteratorIPKP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1002e00:	10800017 	ldw	r2,0(r2)
 1002e04:	8085c83a 	sub	r2,r16,r2
 1002e08:	1005d0ba 	srai	r2,r2,2
 1002e0c:	e037883a 	mov	sp,fp
 1002e10:	dfc00217 	ldw	ra,8(sp)
 1002e14:	df000117 	ldw	fp,4(sp)
 1002e18:	dc000017 	ldw	r16,0(sp)
 1002e1c:	dec00304 	addi	sp,sp,12
 1002e20:	f800283a 	ret

01002e24 <_ZNKSt6vectorIP8os_eventSaIS1_EE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const
 1002e24:	defffb04 	addi	sp,sp,-20
 1002e28:	dfc00415 	stw	ra,16(sp)
 1002e2c:	df000315 	stw	fp,12(sp)
 1002e30:	df000304 	addi	fp,sp,12
 1002e34:	e13fff15 	stw	r4,-4(fp)
      { return size_type(end() - begin()); }
 1002e38:	e13fff17 	ldw	r4,-4(fp)
 1002e3c:	1002d200 	call	1002d20 <_ZNKSt6vectorIP8os_eventSaIS1_EE3endEv>
 1002e40:	e0bffe15 	stw	r2,-8(fp)
 1002e44:	e13fff17 	ldw	r4,-4(fp)
 1002e48:	1002d640 	call	1002d64 <_ZNKSt6vectorIP8os_eventSaIS1_EE5beginEv>
 1002e4c:	e0bffd15 	stw	r2,-12(fp)
 1002e50:	e13ffe04 	addi	r4,fp,-8
 1002e54:	e17ffd04 	addi	r5,fp,-12
 1002e58:	1002dcc0 	call	1002dcc <_ZN9__gnu_cxxmiIPKP8os_eventS4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE>
 1002e5c:	e037883a 	mov	sp,fp
 1002e60:	dfc00117 	ldw	ra,4(sp)
 1002e64:	df000017 	ldw	fp,0(sp)
 1002e68:	dec00204 	addi	sp,sp,8
 1002e6c:	f800283a 	ret

01002e70 <_ZNK9__gnu_cxx13new_allocatorIP8os_eventE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw() 
 1002e70:	defffe04 	addi	sp,sp,-8
 1002e74:	df000115 	stw	fp,4(sp)
 1002e78:	df000104 	addi	fp,sp,4
 1002e7c:	e13fff15 	stw	r4,-4(fp)
      { return size_t(-1) / sizeof(_Tp); }
 1002e80:	00900034 	movhi	r2,16384
 1002e84:	10bfffc4 	addi	r2,r2,-1
 1002e88:	e037883a 	mov	sp,fp
 1002e8c:	df000017 	ldw	fp,0(sp)
 1002e90:	dec00104 	addi	sp,sp,4
 1002e94:	f800283a 	ret

01002e98 <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEEEvT_S9_11__true_type>:
   * This is a helper function used only by _Destroy().
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
 1002e98:	defffc04 	addi	sp,sp,-16
 1002e9c:	df000315 	stw	fp,12(sp)
 1002ea0:	df000304 	addi	fp,sp,12
 1002ea4:	e13ffd15 	stw	r4,-12(fp)
 1002ea8:	e17ffe15 	stw	r5,-8(fp)
 1002eac:	e1bfff05 	stb	r6,-4(fp)
    { }
 1002eb0:	e037883a 	mov	sp,fp
 1002eb4:	df000017 	ldw	fp,0(sp)
 1002eb8:	dec00104 	addi	sp,sp,4
 1002ebc:	f800283a 	ret

01002ec0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEEEvT_S9_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 1002ec0:	defffb04 	addi	sp,sp,-20
 1002ec4:	dfc00415 	stw	ra,16(sp)
 1002ec8:	df000315 	stw	fp,12(sp)
 1002ecc:	df000304 	addi	fp,sp,12
 1002ed0:	e13ffd15 	stw	r4,-12(fp)
 1002ed4:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
 1002ed8:	e13ffd17 	ldw	r4,-12(fp)
 1002edc:	e17ffe17 	ldw	r5,-8(fp)
 1002ee0:	e1bfff03 	ldbu	r6,-4(fp)
 1002ee4:	1002e980 	call	1002e98 <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEEEvT_S9_11__true_type>
 1002ee8:	e037883a 	mov	sp,fp
 1002eec:	dfc00117 	ldw	ra,4(sp)
 1002ef0:	df000017 	ldw	fp,0(sp)
 1002ef4:	dec00204 	addi	sp,sp,8
 1002ef8:	f800283a 	ret

01002efc <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES3_EvT_S9_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
 1002efc:	defffb04 	addi	sp,sp,-20
 1002f00:	dfc00415 	stw	ra,16(sp)
 1002f04:	df000315 	stw	fp,12(sp)
 1002f08:	df000304 	addi	fp,sp,12
 1002f0c:	e13ffd15 	stw	r4,-12(fp)
 1002f10:	e17ffe15 	stw	r5,-8(fp)
 1002f14:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
 1002f18:	e13ffd17 	ldw	r4,-12(fp)
 1002f1c:	e17ffe17 	ldw	r5,-8(fp)
 1002f20:	1002ec00 	call	1002ec0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEEEvT_S9_>
 1002f24:	e037883a 	mov	sp,fp
 1002f28:	dfc00117 	ldw	ra,4(sp)
 1002f2c:	df000017 	ldw	fp,0(sp)
 1002f30:	dec00204 	addi	sp,sp,8
 1002f34:	f800283a 	ret

01002f38 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcm>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 1002f38:	defffb04 	addi	sp,sp,-20
 1002f3c:	dfc00415 	stw	ra,16(sp)
 1002f40:	df000315 	stw	fp,12(sp)
 1002f44:	df000304 	addi	fp,sp,12
 1002f48:	e13ffd15 	stw	r4,-12(fp)
 1002f4c:	e17ffe15 	stw	r5,-8(fp)
 1002f50:	e1bfff15 	stw	r6,-4(fp)
      { ::operator delete(__p); }
 1002f54:	e13ffe17 	ldw	r4,-8(fp)
 1002f58:	100d6680 	call	100d668 <_ZdlPv>
 1002f5c:	e037883a 	mov	sp,fp
 1002f60:	dfc00117 	ldw	ra,4(sp)
 1002f64:	df000017 	ldw	fp,0(sp)
 1002f68:	dec00204 	addi	sp,sp,8
 1002f6c:	f800283a 	ret

01002f70 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm>:
      _Tp*
      _M_allocate(size_t __n)
      { return _M_impl.allocate(__n); }

      void
      _M_deallocate(_Tp* __p, size_t __n)
 1002f70:	defffb04 	addi	sp,sp,-20
 1002f74:	dfc00415 	stw	ra,16(sp)
 1002f78:	df000315 	stw	fp,12(sp)
 1002f7c:	df000304 	addi	fp,sp,12
 1002f80:	e13ffd15 	stw	r4,-12(fp)
 1002f84:	e17ffe15 	stw	r5,-8(fp)
 1002f88:	e1bfff15 	stw	r6,-4(fp)
      {
	if (__p)
 1002f8c:	e0bffe17 	ldw	r2,-8(fp)
 1002f90:	1005003a 	cmpeq	r2,r2,zero
 1002f94:	1000051e 	bne	r2,zero,1002fac <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm+0x3c>
	  _M_impl.deallocate(__p, __n);
 1002f98:	e0bffd17 	ldw	r2,-12(fp)
 1002f9c:	1009883a 	mov	r4,r2
 1002fa0:	e17ffe17 	ldw	r5,-8(fp)
 1002fa4:	e1bfff17 	ldw	r6,-4(fp)
 1002fa8:	1002f380 	call	1002f38 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcm>
 1002fac:	e037883a 	mov	sp,fp
 1002fb0:	dfc00117 	ldw	ra,4(sp)
 1002fb4:	df000017 	ldw	fp,0(sp)
 1002fb8:	dec00204 	addi	sp,sp,8
 1002fbc:	f800283a 	ret

01002fc0 <_ZNSt12_Vector_baseIcSaIcEED2Ev>:
	this->_M_impl._M_start = this->_M_allocate(__n);
	this->_M_impl._M_finish = this->_M_impl._M_start;
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }

      ~_Vector_base()
 1002fc0:	defffd04 	addi	sp,sp,-12
 1002fc4:	dfc00215 	stw	ra,8(sp)
 1002fc8:	df000115 	stw	fp,4(sp)
 1002fcc:	df000104 	addi	fp,sp,4
 1002fd0:	e13fff15 	stw	r4,-4(fp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 1002fd4:	e0bfff17 	ldw	r2,-4(fp)
 1002fd8:	11400017 	ldw	r5,0(r2)
 1002fdc:	e0bfff17 	ldw	r2,-4(fp)
 1002fe0:	10800217 	ldw	r2,8(r2)
 1002fe4:	1007883a 	mov	r3,r2
 1002fe8:	e0bfff17 	ldw	r2,-4(fp)
 1002fec:	10800017 	ldw	r2,0(r2)
 1002ff0:	1885c83a 	sub	r2,r3,r2
 1002ff4:	100d883a 	mov	r6,r2
 1002ff8:	e13fff17 	ldw	r4,-4(fp)
 1002ffc:	1002f700 	call	1002f70 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm>
 1003000:	e13fff17 	ldw	r4,-4(fp)
 1003004:	10022dc0 	call	10022dc <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 1003008:	e037883a 	mov	sp,fp
 100300c:	dfc00117 	ldw	ra,4(sp)
 1003010:	df000017 	ldw	fp,0(sp)
 1003014:	dec00204 	addi	sp,sp,8
 1003018:	f800283a 	ret

0100301c <_ZN9__gnu_cxx13new_allocatorIP8os_eventE10deallocateEPS2_m>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 100301c:	defffb04 	addi	sp,sp,-20
 1003020:	dfc00415 	stw	ra,16(sp)
 1003024:	df000315 	stw	fp,12(sp)
 1003028:	df000304 	addi	fp,sp,12
 100302c:	e13ffd15 	stw	r4,-12(fp)
 1003030:	e17ffe15 	stw	r5,-8(fp)
 1003034:	e1bfff15 	stw	r6,-4(fp)
      { ::operator delete(__p); }
 1003038:	e13ffe17 	ldw	r4,-8(fp)
 100303c:	100d6680 	call	100d668 <_ZdlPv>
 1003040:	e037883a 	mov	sp,fp
 1003044:	dfc00117 	ldw	ra,4(sp)
 1003048:	df000017 	ldw	fp,0(sp)
 100304c:	dec00204 	addi	sp,sp,8
 1003050:	f800283a 	ret

01003054 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE13_M_deallocateEPS1_m>:
      _Tp*
      _M_allocate(size_t __n)
      { return _M_impl.allocate(__n); }

      void
      _M_deallocate(_Tp* __p, size_t __n)
 1003054:	defffb04 	addi	sp,sp,-20
 1003058:	dfc00415 	stw	ra,16(sp)
 100305c:	df000315 	stw	fp,12(sp)
 1003060:	df000304 	addi	fp,sp,12
 1003064:	e13ffd15 	stw	r4,-12(fp)
 1003068:	e17ffe15 	stw	r5,-8(fp)
 100306c:	e1bfff15 	stw	r6,-4(fp)
      {
	if (__p)
 1003070:	e0bffe17 	ldw	r2,-8(fp)
 1003074:	1005003a 	cmpeq	r2,r2,zero
 1003078:	1000051e 	bne	r2,zero,1003090 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE13_M_deallocateEPS1_m+0x3c>
	  _M_impl.deallocate(__p, __n);
 100307c:	e0bffd17 	ldw	r2,-12(fp)
 1003080:	1009883a 	mov	r4,r2
 1003084:	e17ffe17 	ldw	r5,-8(fp)
 1003088:	e1bfff17 	ldw	r6,-4(fp)
 100308c:	100301c0 	call	100301c <_ZN9__gnu_cxx13new_allocatorIP8os_eventE10deallocateEPS2_m>
 1003090:	e037883a 	mov	sp,fp
 1003094:	dfc00117 	ldw	ra,4(sp)
 1003098:	df000017 	ldw	fp,0(sp)
 100309c:	dec00204 	addi	sp,sp,8
 10030a0:	f800283a 	ret

010030a4 <_ZNSt6vectorIcSaIcEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibilty.
       */
      ~vector()
 10030a4:	defffa04 	addi	sp,sp,-24
 10030a8:	dfc00515 	stw	ra,20(sp)
 10030ac:	df000415 	stw	fp,16(sp)
 10030b0:	dc400315 	stw	r17,12(sp)
 10030b4:	dc000215 	stw	r16,8(sp)
 10030b8:	df000204 	addi	fp,sp,8
 10030bc:	e13fff15 	stw	r4,-4(fp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 10030c0:	e0bfff17 	ldw	r2,-4(fp)
 10030c4:	14000017 	ldw	r16,0(r2)
 10030c8:	e0bfff17 	ldw	r2,-4(fp)
 10030cc:	14400117 	ldw	r17,4(r2)
 10030d0:	e13fff17 	ldw	r4,-4(fp)
 10030d4:	100230c0 	call	100230c <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 10030d8:	100b883a 	mov	r5,r2
 10030dc:	e13ffe04 	addi	r4,fp,-8
 10030e0:	1007b180 	call	1007b18 <_ZNSaIcEC1ERKS_>
 10030e4:	8009883a 	mov	r4,r16
 10030e8:	880b883a 	mov	r5,r17
 10030ec:	e1bffe04 	addi	r6,fp,-8
 10030f0:	1002a6c0 	call	1002a6c <_ZSt8_DestroyIPccEvT_S1_SaIT0_E>
 10030f4:	e13ffe04 	addi	r4,fp,-8
 10030f8:	1007b280 	call	1007b28 <_ZNSaIcED1Ev>
 10030fc:	e13fff17 	ldw	r4,-4(fp)
 1003100:	1002fc00 	call	1002fc0 <_ZNSt12_Vector_baseIcSaIcEED2Ev>
 1003104:	e037883a 	mov	sp,fp
 1003108:	dfc00317 	ldw	ra,12(sp)
 100310c:	df000217 	ldw	fp,8(sp)
 1003110:	dc400117 	ldw	r17,4(sp)
 1003114:	dc000017 	ldw	r16,0(sp)
 1003118:	dec00404 	addi	sp,sp,16
 100311c:	f800283a 	ret

01003120 <_ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIcEEPT_PKS3_S6_S4_>:
  template<>
    struct __copy_backward<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 1003120:	defffa04 	addi	sp,sp,-24
 1003124:	dfc00515 	stw	ra,20(sp)
 1003128:	df000415 	stw	fp,16(sp)
 100312c:	df000404 	addi	fp,sp,16
 1003130:	e13ffd15 	stw	r4,-12(fp)
 1003134:	e17ffe15 	stw	r5,-8(fp)
 1003138:	e1bfff15 	stw	r6,-4(fp)
        { 
	  const ptrdiff_t _Num = __last - __first;
 100313c:	e0fffe17 	ldw	r3,-8(fp)
 1003140:	e0bffd17 	ldw	r2,-12(fp)
 1003144:	1885c83a 	sub	r2,r3,r2
 1003148:	e0bffc15 	stw	r2,-16(fp)
	  std::memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 100314c:	e0bffc17 	ldw	r2,-16(fp)
 1003150:	1007883a 	mov	r3,r2
 1003154:	e0bfff17 	ldw	r2,-4(fp)
 1003158:	10c9c83a 	sub	r4,r2,r3
 100315c:	e1bffc17 	ldw	r6,-16(fp)
 1003160:	e17ffd17 	ldw	r5,-12(fp)
 1003164:	100ec0c0 	call	100ec0c <memmove>
	  return __result - _Num;
 1003168:	e0bffc17 	ldw	r2,-16(fp)
 100316c:	1007883a 	mov	r3,r2
 1003170:	e0bfff17 	ldw	r2,-4(fp)
 1003174:	10c5c83a 	sub	r2,r2,r3
 1003178:	e037883a 	mov	sp,fp
 100317c:	dfc00117 	ldw	ra,4(sp)
 1003180:	df000017 	ldw	fp,0(sp)
 1003184:	dec00204 	addi	sp,sp,8
 1003188:	f800283a 	ret

0100318c <_ZSt19__copy_backward_auxIPcS0_ET0_T_S2_S1_>:
	}
    };

  template<typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)
 100318c:	defffa04 	addi	sp,sp,-24
 1003190:	dfc00515 	stw	ra,20(sp)
 1003194:	df000415 	stw	fp,16(sp)
 1003198:	df000404 	addi	fp,sp,16
 100319c:	e13ffd15 	stw	r4,-12(fp)
 10031a0:	e17ffe15 	stw	r5,-8(fp)
 10031a4:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueType1>::__value
	                     && __is_pointer<_BI1>::__value
	                     && __is_pointer<_BI2>::__value
			     && __are_same<_ValueType1, _ValueType2>::__value);
 10031a8:	00800044 	movi	r2,1
 10031ac:	e0bffc05 	stb	r2,-16(fp)

      return std::__copy_backward<__simple, _Category>::copy_b(__first, __last,
							       __result);
 10031b0:	e13ffd17 	ldw	r4,-12(fp)
 10031b4:	e17ffe17 	ldw	r5,-8(fp)
 10031b8:	e1bfff17 	ldw	r6,-4(fp)
 10031bc:	10031200 	call	1003120 <_ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIcEEPT_PKS3_S6_S4_>
 10031c0:	e037883a 	mov	sp,fp
 10031c4:	dfc00117 	ldw	ra,4(sp)
 10031c8:	df000017 	ldw	fp,0(sp)
 10031cc:	dec00204 	addi	sp,sp,8
 10031d0:	f800283a 	ret

010031d4 <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES8_EET0_T_SA_S9_>:
  template<>
    struct __copy_backward_normal<true, true>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)
 10031d4:	defff704 	addi	sp,sp,-36
 10031d8:	dfc00815 	stw	ra,32(sp)
 10031dc:	df000715 	stw	fp,28(sp)
 10031e0:	dc400615 	stw	r17,24(sp)
 10031e4:	dc000515 	stw	r16,20(sp)
 10031e8:	df000504 	addi	fp,sp,20
 10031ec:	e13ffd15 	stw	r4,-12(fp)
 10031f0:	e17ffe15 	stw	r5,-8(fp)
 10031f4:	e1bfff15 	stw	r6,-4(fp)
        { return _BI2(std::__copy_backward_aux(__first.base(), __last.base(),
					       __result.base())); }
 10031f8:	e13ffd04 	addi	r4,fp,-12
 10031fc:	10025e80 	call	10025e8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1003200:	14400017 	ldw	r17,0(r2)
 1003204:	e13ffe04 	addi	r4,fp,-8
 1003208:	10025e80 	call	10025e8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 100320c:	14000017 	ldw	r16,0(r2)
 1003210:	e13fff04 	addi	r4,fp,-4
 1003214:	10025e80 	call	10025e8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1003218:	11800017 	ldw	r6,0(r2)
 100321c:	8809883a 	mov	r4,r17
 1003220:	800b883a 	mov	r5,r16
 1003224:	100318c0 	call	100318c <_ZSt19__copy_backward_auxIPcS0_ET0_T_S2_S1_>
 1003228:	e0bffb15 	stw	r2,-20(fp)
 100322c:	e13ffc04 	addi	r4,fp,-16
 1003230:	e17ffb04 	addi	r5,fp,-20
 1003234:	10025400 	call	1002540 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 1003238:	e0bffc17 	ldw	r2,-16(fp)
 100323c:	e037883a 	mov	sp,fp
 1003240:	dfc00317 	ldw	ra,12(sp)
 1003244:	df000217 	ldw	fp,8(sp)
 1003248:	dc400117 	ldw	r17,4(sp)
 100324c:	dc000017 	ldw	r16,0(sp)
 1003250:	dec00404 	addi	sp,sp,16
 1003254:	f800283a 	ret

01003258 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>:
   *  Result may not be in the range [first,last).  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template <typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 1003258:	defffa04 	addi	sp,sp,-24
 100325c:	dfc00515 	stw	ra,20(sp)
 1003260:	df000415 	stw	fp,16(sp)
 1003264:	df000404 	addi	fp,sp,16
 1003268:	e13ffd15 	stw	r4,-12(fp)
 100326c:	e17ffe15 	stw	r5,-8(fp)
 1003270:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      const bool __bi1 = __is_normal_iterator<_BI1>::__value;
 1003274:	00800044 	movi	r2,1
 1003278:	e0bffc45 	stb	r2,-15(fp)
      const bool __bi2 = __is_normal_iterator<_BI2>::__value;
 100327c:	00800044 	movi	r2,1
 1003280:	e0bffc05 	stb	r2,-16(fp)
      return std::__copy_backward_normal<__bi1, __bi2>::copy_b_n(__first, __last,
								 __result);
 1003284:	e13ffd17 	ldw	r4,-12(fp)
 1003288:	e17ffe17 	ldw	r5,-8(fp)
 100328c:	e1bfff17 	ldw	r6,-4(fp)
 1003290:	10031d40 	call	10031d4 <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES8_EET0_T_SA_S9_>
 1003294:	e037883a 	mov	sp,fp
 1003298:	dfc00117 	ldw	ra,4(sp)
 100329c:	df000017 	ldw	fp,0(sp)
 10032a0:	dec00204 	addi	sp,sp,8
 10032a4:	f800283a 	ret

010032a8 <_ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIcEEPT_PKS3_S6_S4_>:
  template<>
    struct __copy<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy(const _Tp* __first, const _Tp* __last, _Tp* __result)
 10032a8:	defffb04 	addi	sp,sp,-20
 10032ac:	dfc00415 	stw	ra,16(sp)
 10032b0:	df000315 	stw	fp,12(sp)
 10032b4:	df000304 	addi	fp,sp,12
 10032b8:	e13ffd15 	stw	r4,-12(fp)
 10032bc:	e17ffe15 	stw	r5,-8(fp)
 10032c0:	e1bfff15 	stw	r6,-4(fp)
        { 
	  std::memmove(__result, __first, sizeof(_Tp) * (__last - __first));
 10032c4:	e0fffe17 	ldw	r3,-8(fp)
 10032c8:	e0bffd17 	ldw	r2,-12(fp)
 10032cc:	1885c83a 	sub	r2,r3,r2
 10032d0:	100d883a 	mov	r6,r2
 10032d4:	e13fff17 	ldw	r4,-4(fp)
 10032d8:	e17ffd17 	ldw	r5,-12(fp)
 10032dc:	100ec0c0 	call	100ec0c <memmove>
	  return __result + (__last - __first);
 10032e0:	e0fffe17 	ldw	r3,-8(fp)
 10032e4:	e0bffd17 	ldw	r2,-12(fp)
 10032e8:	1885c83a 	sub	r2,r3,r2
 10032ec:	1007883a 	mov	r3,r2
 10032f0:	e0bfff17 	ldw	r2,-4(fp)
 10032f4:	1885883a 	add	r2,r3,r2
 10032f8:	e037883a 	mov	sp,fp
 10032fc:	dfc00117 	ldw	ra,4(sp)
 1003300:	df000017 	ldw	fp,0(sp)
 1003304:	dec00204 	addi	sp,sp,8
 1003308:	f800283a 	ret

0100330c <_ZSt10__copy_auxIPcS0_ET0_T_S2_S1_>:
	}
    };

  template<typename _II, typename _OI>
    inline _OI
    __copy_aux(_II __first, _II __last, _OI __result)
 100330c:	defffa04 	addi	sp,sp,-24
 1003310:	dfc00515 	stw	ra,20(sp)
 1003314:	df000415 	stw	fp,16(sp)
 1003318:	df000404 	addi	fp,sp,16
 100331c:	e13ffd15 	stw	r4,-12(fp)
 1003320:	e17ffe15 	stw	r5,-8(fp)
 1003324:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueTypeI>::__value
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 1003328:	00800044 	movi	r2,1
 100332c:	e0bffc05 	stb	r2,-16(fp)

      return std::__copy<__simple, _Category>::copy(__first, __last, __result);
 1003330:	e13ffd17 	ldw	r4,-12(fp)
 1003334:	e17ffe17 	ldw	r5,-8(fp)
 1003338:	e1bfff17 	ldw	r6,-4(fp)
 100333c:	10032a80 	call	10032a8 <_ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIcEEPT_PKS3_S6_S4_>
 1003340:	e037883a 	mov	sp,fp
 1003344:	dfc00117 	ldw	ra,4(sp)
 1003348:	df000017 	ldw	fp,0(sp)
 100334c:	dec00204 	addi	sp,sp,8
 1003350:	f800283a 	ret

01003354 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES8_EET0_T_SA_S9_>:
  template<>
    struct __copy_normal<true, true>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
 1003354:	defff704 	addi	sp,sp,-36
 1003358:	dfc00815 	stw	ra,32(sp)
 100335c:	df000715 	stw	fp,28(sp)
 1003360:	dc400615 	stw	r17,24(sp)
 1003364:	dc000515 	stw	r16,20(sp)
 1003368:	df000504 	addi	fp,sp,20
 100336c:	e13ffd15 	stw	r4,-12(fp)
 1003370:	e17ffe15 	stw	r5,-8(fp)
 1003374:	e1bfff15 	stw	r6,-4(fp)
        { return _OI(std::__copy_aux(__first.base(), __last.base(),
				     __result.base())); }
 1003378:	e13ffd04 	addi	r4,fp,-12
 100337c:	10025e80 	call	10025e8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1003380:	14400017 	ldw	r17,0(r2)
 1003384:	e13ffe04 	addi	r4,fp,-8
 1003388:	10025e80 	call	10025e8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 100338c:	14000017 	ldw	r16,0(r2)
 1003390:	e13fff04 	addi	r4,fp,-4
 1003394:	10025e80 	call	10025e8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1003398:	11800017 	ldw	r6,0(r2)
 100339c:	8809883a 	mov	r4,r17
 10033a0:	800b883a 	mov	r5,r16
 10033a4:	100330c0 	call	100330c <_ZSt10__copy_auxIPcS0_ET0_T_S2_S1_>
 10033a8:	e0bffb15 	stw	r2,-20(fp)
 10033ac:	e13ffc04 	addi	r4,fp,-16
 10033b0:	e17ffb04 	addi	r5,fp,-20
 10033b4:	10025400 	call	1002540 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 10033b8:	e0bffc17 	ldw	r2,-16(fp)
 10033bc:	e037883a 	mov	sp,fp
 10033c0:	dfc00317 	ldw	ra,12(sp)
 10033c4:	df000217 	ldw	fp,8(sp)
 10033c8:	dc400117 	ldw	r17,4(sp)
 10033cc:	dc000017 	ldw	r16,0(sp)
 10033d0:	dec00404 	addi	sp,sp,16
 10033d4:	f800283a 	ret

010033d8 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
 10033d8:	defffa04 	addi	sp,sp,-24
 10033dc:	dfc00515 	stw	ra,20(sp)
 10033e0:	df000415 	stw	fp,16(sp)
 10033e4:	df000404 	addi	fp,sp,16
 10033e8:	e13ffd15 	stw	r4,-12(fp)
 10033ec:	e17ffe15 	stw	r5,-8(fp)
 10033f0:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
 10033f4:	00800044 	movi	r2,1
 10033f8:	e0bffc45 	stb	r2,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
 10033fc:	00800044 	movi	r2,1
 1003400:	e0bffc05 	stb	r2,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
 1003404:	e13ffd17 	ldw	r4,-12(fp)
 1003408:	e17ffe17 	ldw	r5,-8(fp)
 100340c:	e1bfff17 	ldw	r6,-4(fp)
 1003410:	10033540 	call	1003354 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES8_EET0_T_SA_S9_>
 1003414:	e037883a 	mov	sp,fp
 1003418:	dfc00117 	ldw	ra,4(sp)
 100341c:	df000017 	ldw	fp,0(sp)
 1003420:	dec00204 	addi	sp,sp,8
 1003424:	f800283a 	ret

01003428 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_11__true_type>:
  // uninitialized_copy
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __true_type)
 1003428:	defffa04 	addi	sp,sp,-24
 100342c:	dfc00515 	stw	ra,20(sp)
 1003430:	df000415 	stw	fp,16(sp)
 1003434:	df000404 	addi	fp,sp,16
 1003438:	e13ffc15 	stw	r4,-16(fp)
 100343c:	e17ffd15 	stw	r5,-12(fp)
 1003440:	e1bffe15 	stw	r6,-8(fp)
 1003444:	e1ffff05 	stb	r7,-4(fp)
    { return std::copy(__first, __last, __result); }
 1003448:	e13ffc17 	ldw	r4,-16(fp)
 100344c:	e17ffd17 	ldw	r5,-12(fp)
 1003450:	e1bffe17 	ldw	r6,-8(fp)
 1003454:	10033d80 	call	10033d8 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>
 1003458:	e037883a 	mov	sp,fp
 100345c:	dfc00117 	ldw	ra,4(sp)
 1003460:	df000017 	ldw	fp,0(sp)
 1003464:	dec00204 	addi	sp,sp,8
 1003468:	f800283a 	ret

0100346c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
 100346c:	defffa04 	addi	sp,sp,-24
 1003470:	dfc00515 	stw	ra,20(sp)
 1003474:	df000415 	stw	fp,16(sp)
 1003478:	df000404 	addi	fp,sp,16
 100347c:	e13ffc15 	stw	r4,-16(fp)
 1003480:	e17ffd15 	stw	r5,-12(fp)
 1003484:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
 1003488:	e13ffc17 	ldw	r4,-16(fp)
 100348c:	e17ffd17 	ldw	r5,-12(fp)
 1003490:	e1bffe17 	ldw	r6,-8(fp)
 1003494:	e1ffff03 	ldbu	r7,-4(fp)
 1003498:	10034280 	call	1003428 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_11__true_type>
 100349c:	e037883a 	mov	sp,fp
 10034a0:	dfc00117 	ldw	ra,4(sp)
 10034a4:	df000017 	ldw	fp,0(sp)
 10034a8:	dec00204 	addi	sp,sp,8
 10034ac:	f800283a 	ret

010034b0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_cET0_T_S8_S7_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
 10034b0:	defffa04 	addi	sp,sp,-24
 10034b4:	dfc00515 	stw	ra,20(sp)
 10034b8:	df000415 	stw	fp,16(sp)
 10034bc:	df000404 	addi	fp,sp,16
 10034c0:	e13ffc15 	stw	r4,-16(fp)
 10034c4:	e17ffd15 	stw	r5,-12(fp)
 10034c8:	e1bffe15 	stw	r6,-8(fp)
 10034cc:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
 10034d0:	e13ffc17 	ldw	r4,-16(fp)
 10034d4:	e17ffd17 	ldw	r5,-12(fp)
 10034d8:	e1bffe17 	ldw	r6,-8(fp)
 10034dc:	100346c0 	call	100346c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>
 10034e0:	e037883a 	mov	sp,fp
 10034e4:	dfc00117 	ldw	ra,4(sp)
 10034e8:	df000017 	ldw	fp,0(sp)
 10034ec:	dec00204 	addi	sp,sp,8
 10034f0:	f800283a 	ret

010034f4 <_ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIP8os_eventEEPT_PKS5_S8_S6_>:
  template<>
    struct __copy_backward<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 10034f4:	defffa04 	addi	sp,sp,-24
 10034f8:	dfc00515 	stw	ra,20(sp)
 10034fc:	df000415 	stw	fp,16(sp)
 1003500:	df000404 	addi	fp,sp,16
 1003504:	e13ffd15 	stw	r4,-12(fp)
 1003508:	e17ffe15 	stw	r5,-8(fp)
 100350c:	e1bfff15 	stw	r6,-4(fp)
        { 
	  const ptrdiff_t _Num = __last - __first;
 1003510:	e0fffe17 	ldw	r3,-8(fp)
 1003514:	e0bffd17 	ldw	r2,-12(fp)
 1003518:	1885c83a 	sub	r2,r3,r2
 100351c:	1005d0ba 	srai	r2,r2,2
 1003520:	e0bffc15 	stw	r2,-16(fp)
	  std::memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 1003524:	e0bffc17 	ldw	r2,-16(fp)
 1003528:	1085883a 	add	r2,r2,r2
 100352c:	1085883a 	add	r2,r2,r2
 1003530:	1007883a 	mov	r3,r2
 1003534:	e0bfff17 	ldw	r2,-4(fp)
 1003538:	10c9c83a 	sub	r4,r2,r3
 100353c:	e0bffc17 	ldw	r2,-16(fp)
 1003540:	1085883a 	add	r2,r2,r2
 1003544:	1085883a 	add	r2,r2,r2
 1003548:	100d883a 	mov	r6,r2
 100354c:	e17ffd17 	ldw	r5,-12(fp)
 1003550:	100ec0c0 	call	100ec0c <memmove>
	  return __result - _Num;
 1003554:	e0bffc17 	ldw	r2,-16(fp)
 1003558:	1085883a 	add	r2,r2,r2
 100355c:	1085883a 	add	r2,r2,r2
 1003560:	1007883a 	mov	r3,r2
 1003564:	e0bfff17 	ldw	r2,-4(fp)
 1003568:	10c5c83a 	sub	r2,r2,r3
 100356c:	e037883a 	mov	sp,fp
 1003570:	dfc00117 	ldw	ra,4(sp)
 1003574:	df000017 	ldw	fp,0(sp)
 1003578:	dec00204 	addi	sp,sp,8
 100357c:	f800283a 	ret

01003580 <_ZSt19__copy_backward_auxIPP8os_eventS2_ET0_T_S4_S3_>:
	}
    };

  template<typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)
 1003580:	defffa04 	addi	sp,sp,-24
 1003584:	dfc00515 	stw	ra,20(sp)
 1003588:	df000415 	stw	fp,16(sp)
 100358c:	df000404 	addi	fp,sp,16
 1003590:	e13ffd15 	stw	r4,-12(fp)
 1003594:	e17ffe15 	stw	r5,-8(fp)
 1003598:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueType1>::__value
	                     && __is_pointer<_BI1>::__value
	                     && __is_pointer<_BI2>::__value
			     && __are_same<_ValueType1, _ValueType2>::__value);
 100359c:	00800044 	movi	r2,1
 10035a0:	e0bffc05 	stb	r2,-16(fp)

      return std::__copy_backward<__simple, _Category>::copy_b(__first, __last,
							       __result);
 10035a4:	e13ffd17 	ldw	r4,-12(fp)
 10035a8:	e17ffe17 	ldw	r5,-8(fp)
 10035ac:	e1bfff17 	ldw	r6,-4(fp)
 10035b0:	10034f40 	call	10034f4 <_ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIP8os_eventEEPT_PKS5_S8_S6_>
 10035b4:	e037883a 	mov	sp,fp
 10035b8:	dfc00117 	ldw	ra,4(sp)
 10035bc:	df000017 	ldw	fp,0(sp)
 10035c0:	dec00204 	addi	sp,sp,8
 10035c4:	f800283a 	ret

010035c8 <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_>:
  template<>
    struct __copy_backward_normal<true, true>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)
 10035c8:	defff704 	addi	sp,sp,-36
 10035cc:	dfc00815 	stw	ra,32(sp)
 10035d0:	df000715 	stw	fp,28(sp)
 10035d4:	dc400615 	stw	r17,24(sp)
 10035d8:	dc000515 	stw	r16,20(sp)
 10035dc:	df000504 	addi	fp,sp,20
 10035e0:	e13ffd15 	stw	r4,-12(fp)
 10035e4:	e17ffe15 	stw	r5,-8(fp)
 10035e8:	e1bfff15 	stw	r6,-4(fp)
        { return _BI2(std::__copy_backward_aux(__first.base(), __last.base(),
					       __result.base())); }
 10035ec:	e13ffd04 	addi	r4,fp,-12
 10035f0:	10029ac0 	call	10029ac <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 10035f4:	14400017 	ldw	r17,0(r2)
 10035f8:	e13ffe04 	addi	r4,fp,-8
 10035fc:	10029ac0 	call	10029ac <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1003600:	14000017 	ldw	r16,0(r2)
 1003604:	e13fff04 	addi	r4,fp,-4
 1003608:	10029ac0 	call	10029ac <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 100360c:	11800017 	ldw	r6,0(r2)
 1003610:	8809883a 	mov	r4,r17
 1003614:	800b883a 	mov	r5,r16
 1003618:	10035800 	call	1003580 <_ZSt19__copy_backward_auxIPP8os_eventS2_ET0_T_S4_S3_>
 100361c:	e0bffb15 	stw	r2,-20(fp)
 1003620:	e13ffc04 	addi	r4,fp,-16
 1003624:	e17ffb04 	addi	r5,fp,-20
 1003628:	10028280 	call	1002828 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 100362c:	e0bffc17 	ldw	r2,-16(fp)
 1003630:	e037883a 	mov	sp,fp
 1003634:	dfc00317 	ldw	ra,12(sp)
 1003638:	df000217 	ldw	fp,8(sp)
 100363c:	dc400117 	ldw	r17,4(sp)
 1003640:	dc000017 	ldw	r16,0(sp)
 1003644:	dec00404 	addi	sp,sp,16
 1003648:	f800283a 	ret

0100364c <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
   *  Result may not be in the range [first,last).  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template <typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 100364c:	defffa04 	addi	sp,sp,-24
 1003650:	dfc00515 	stw	ra,20(sp)
 1003654:	df000415 	stw	fp,16(sp)
 1003658:	df000404 	addi	fp,sp,16
 100365c:	e13ffd15 	stw	r4,-12(fp)
 1003660:	e17ffe15 	stw	r5,-8(fp)
 1003664:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      const bool __bi1 = __is_normal_iterator<_BI1>::__value;
 1003668:	00800044 	movi	r2,1
 100366c:	e0bffc45 	stb	r2,-15(fp)
      const bool __bi2 = __is_normal_iterator<_BI2>::__value;
 1003670:	00800044 	movi	r2,1
 1003674:	e0bffc05 	stb	r2,-16(fp)
      return std::__copy_backward_normal<__bi1, __bi2>::copy_b_n(__first, __last,
								 __result);
 1003678:	e13ffd17 	ldw	r4,-12(fp)
 100367c:	e17ffe17 	ldw	r5,-8(fp)
 1003680:	e1bfff17 	ldw	r6,-4(fp)
 1003684:	10035c80 	call	10035c8 <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_>
 1003688:	e037883a 	mov	sp,fp
 100368c:	dfc00117 	ldw	ra,4(sp)
 1003690:	df000017 	ldw	fp,0(sp)
 1003694:	dec00204 	addi	sp,sp,8
 1003698:	f800283a 	ret

0100369c <_ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP8os_eventEEPT_PKS5_S8_S6_>:
  template<>
    struct __copy<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy(const _Tp* __first, const _Tp* __last, _Tp* __result)
 100369c:	defffb04 	addi	sp,sp,-20
 10036a0:	dfc00415 	stw	ra,16(sp)
 10036a4:	df000315 	stw	fp,12(sp)
 10036a8:	df000304 	addi	fp,sp,12
 10036ac:	e13ffd15 	stw	r4,-12(fp)
 10036b0:	e17ffe15 	stw	r5,-8(fp)
 10036b4:	e1bfff15 	stw	r6,-4(fp)
        { 
	  std::memmove(__result, __first, sizeof(_Tp) * (__last - __first));
 10036b8:	e0fffe17 	ldw	r3,-8(fp)
 10036bc:	e0bffd17 	ldw	r2,-12(fp)
 10036c0:	1885c83a 	sub	r2,r3,r2
 10036c4:	100d883a 	mov	r6,r2
 10036c8:	e13fff17 	ldw	r4,-4(fp)
 10036cc:	e17ffd17 	ldw	r5,-12(fp)
 10036d0:	100ec0c0 	call	100ec0c <memmove>
	  return __result + (__last - __first);
 10036d4:	e0fffe17 	ldw	r3,-8(fp)
 10036d8:	e0bffd17 	ldw	r2,-12(fp)
 10036dc:	1885c83a 	sub	r2,r3,r2
 10036e0:	1007883a 	mov	r3,r2
 10036e4:	e0bfff17 	ldw	r2,-4(fp)
 10036e8:	1885883a 	add	r2,r3,r2
 10036ec:	e037883a 	mov	sp,fp
 10036f0:	dfc00117 	ldw	ra,4(sp)
 10036f4:	df000017 	ldw	fp,0(sp)
 10036f8:	dec00204 	addi	sp,sp,8
 10036fc:	f800283a 	ret

01003700 <_ZSt10__copy_auxIPP8os_eventS2_ET0_T_S4_S3_>:
	}
    };

  template<typename _II, typename _OI>
    inline _OI
    __copy_aux(_II __first, _II __last, _OI __result)
 1003700:	defffa04 	addi	sp,sp,-24
 1003704:	dfc00515 	stw	ra,20(sp)
 1003708:	df000415 	stw	fp,16(sp)
 100370c:	df000404 	addi	fp,sp,16
 1003710:	e13ffd15 	stw	r4,-12(fp)
 1003714:	e17ffe15 	stw	r5,-8(fp)
 1003718:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueTypeI>::__value
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 100371c:	00800044 	movi	r2,1
 1003720:	e0bffc05 	stb	r2,-16(fp)

      return std::__copy<__simple, _Category>::copy(__first, __last, __result);
 1003724:	e13ffd17 	ldw	r4,-12(fp)
 1003728:	e17ffe17 	ldw	r5,-8(fp)
 100372c:	e1bfff17 	ldw	r6,-4(fp)
 1003730:	100369c0 	call	100369c <_ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP8os_eventEEPT_PKS5_S8_S6_>
 1003734:	e037883a 	mov	sp,fp
 1003738:	dfc00117 	ldw	ra,4(sp)
 100373c:	df000017 	ldw	fp,0(sp)
 1003740:	dec00204 	addi	sp,sp,8
 1003744:	f800283a 	ret

01003748 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_>:
  template<>
    struct __copy_normal<true, true>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
 1003748:	defff704 	addi	sp,sp,-36
 100374c:	dfc00815 	stw	ra,32(sp)
 1003750:	df000715 	stw	fp,28(sp)
 1003754:	dc400615 	stw	r17,24(sp)
 1003758:	dc000515 	stw	r16,20(sp)
 100375c:	df000504 	addi	fp,sp,20
 1003760:	e13ffd15 	stw	r4,-12(fp)
 1003764:	e17ffe15 	stw	r5,-8(fp)
 1003768:	e1bfff15 	stw	r6,-4(fp)
        { return _OI(std::__copy_aux(__first.base(), __last.base(),
				     __result.base())); }
 100376c:	e13ffd04 	addi	r4,fp,-12
 1003770:	10029ac0 	call	10029ac <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1003774:	14400017 	ldw	r17,0(r2)
 1003778:	e13ffe04 	addi	r4,fp,-8
 100377c:	10029ac0 	call	10029ac <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1003780:	14000017 	ldw	r16,0(r2)
 1003784:	e13fff04 	addi	r4,fp,-4
 1003788:	10029ac0 	call	10029ac <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 100378c:	11800017 	ldw	r6,0(r2)
 1003790:	8809883a 	mov	r4,r17
 1003794:	800b883a 	mov	r5,r16
 1003798:	10037000 	call	1003700 <_ZSt10__copy_auxIPP8os_eventS2_ET0_T_S4_S3_>
 100379c:	e0bffb15 	stw	r2,-20(fp)
 10037a0:	e13ffc04 	addi	r4,fp,-16
 10037a4:	e17ffb04 	addi	r5,fp,-20
 10037a8:	10028280 	call	1002828 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 10037ac:	e0bffc17 	ldw	r2,-16(fp)
 10037b0:	e037883a 	mov	sp,fp
 10037b4:	dfc00317 	ldw	ra,12(sp)
 10037b8:	df000217 	ldw	fp,8(sp)
 10037bc:	dc400117 	ldw	r17,4(sp)
 10037c0:	dc000017 	ldw	r16,0(sp)
 10037c4:	dec00404 	addi	sp,sp,16
 10037c8:	f800283a 	ret

010037cc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
 10037cc:	defffa04 	addi	sp,sp,-24
 10037d0:	dfc00515 	stw	ra,20(sp)
 10037d4:	df000415 	stw	fp,16(sp)
 10037d8:	df000404 	addi	fp,sp,16
 10037dc:	e13ffd15 	stw	r4,-12(fp)
 10037e0:	e17ffe15 	stw	r5,-8(fp)
 10037e4:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
 10037e8:	00800044 	movi	r2,1
 10037ec:	e0bffc45 	stb	r2,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
 10037f0:	00800044 	movi	r2,1
 10037f4:	e0bffc05 	stb	r2,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
 10037f8:	e13ffd17 	ldw	r4,-12(fp)
 10037fc:	e17ffe17 	ldw	r5,-8(fp)
 1003800:	e1bfff17 	ldw	r6,-4(fp)
 1003804:	10037480 	call	1003748 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_>
 1003808:	e037883a 	mov	sp,fp
 100380c:	dfc00117 	ldw	ra,4(sp)
 1003810:	df000017 	ldw	fp,0(sp)
 1003814:	dec00204 	addi	sp,sp,8
 1003818:	f800283a 	ret

0100381c <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type>:
  // uninitialized_copy
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __true_type)
 100381c:	defffa04 	addi	sp,sp,-24
 1003820:	dfc00515 	stw	ra,20(sp)
 1003824:	df000415 	stw	fp,16(sp)
 1003828:	df000404 	addi	fp,sp,16
 100382c:	e13ffc15 	stw	r4,-16(fp)
 1003830:	e17ffd15 	stw	r5,-12(fp)
 1003834:	e1bffe15 	stw	r6,-8(fp)
 1003838:	e1ffff05 	stb	r7,-4(fp)
    { return std::copy(__first, __last, __result); }
 100383c:	e13ffc17 	ldw	r4,-16(fp)
 1003840:	e17ffd17 	ldw	r5,-12(fp)
 1003844:	e1bffe17 	ldw	r6,-8(fp)
 1003848:	10037cc0 	call	10037cc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
 100384c:	e037883a 	mov	sp,fp
 1003850:	dfc00117 	ldw	ra,4(sp)
 1003854:	df000017 	ldw	fp,0(sp)
 1003858:	dec00204 	addi	sp,sp,8
 100385c:	f800283a 	ret

01003860 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
 1003860:	defffa04 	addi	sp,sp,-24
 1003864:	dfc00515 	stw	ra,20(sp)
 1003868:	df000415 	stw	fp,16(sp)
 100386c:	df000404 	addi	fp,sp,16
 1003870:	e13ffc15 	stw	r4,-16(fp)
 1003874:	e17ffd15 	stw	r5,-12(fp)
 1003878:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
 100387c:	e13ffc17 	ldw	r4,-16(fp)
 1003880:	e17ffd17 	ldw	r5,-12(fp)
 1003884:	e1bffe17 	ldw	r6,-8(fp)
 1003888:	e1ffff03 	ldbu	r7,-4(fp)
 100388c:	100381c0 	call	100381c <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type>
 1003890:	e037883a 	mov	sp,fp
 1003894:	dfc00117 	ldw	ra,4(sp)
 1003898:	df000017 	ldw	fp,0(sp)
 100389c:	dec00204 	addi	sp,sp,8
 10038a0:	f800283a 	ret

010038a4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
 10038a4:	defffa04 	addi	sp,sp,-24
 10038a8:	dfc00515 	stw	ra,20(sp)
 10038ac:	df000415 	stw	fp,16(sp)
 10038b0:	df000404 	addi	fp,sp,16
 10038b4:	e13ffc15 	stw	r4,-16(fp)
 10038b8:	e17ffd15 	stw	r5,-12(fp)
 10038bc:	e1bffe15 	stw	r6,-8(fp)
 10038c0:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
 10038c4:	e13ffc17 	ldw	r4,-16(fp)
 10038c8:	e17ffd17 	ldw	r5,-12(fp)
 10038cc:	e1bffe17 	ldw	r6,-8(fp)
 10038d0:	10038600 	call	1003860 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
 10038d4:	e037883a 	mov	sp,fp
 10038d8:	dfc00117 	ldw	ra,4(sp)
 10038dc:	df000017 	ldw	fp,0(sp)
 10038e0:	dec00204 	addi	sp,sp,8
 10038e4:	f800283a 	ret

010038e8 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv>:
      address(const_reference __x) const { return &__x; }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
 10038e8:	defffb04 	addi	sp,sp,-20
 10038ec:	dfc00415 	stw	ra,16(sp)
 10038f0:	df000315 	stw	fp,12(sp)
 10038f4:	df000304 	addi	fp,sp,12
 10038f8:	e13ffd15 	stw	r4,-12(fp)
 10038fc:	e17ffe15 	stw	r5,-8(fp)
 1003900:	e1bfff15 	stw	r6,-4(fp)
      { 
	if (__builtin_expect(__n > this->max_size(), false))
 1003904:	e13ffd17 	ldw	r4,-12(fp)
 1003908:	1002c280 	call	1002c28 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>
 100390c:	1007883a 	mov	r3,r2
 1003910:	e0bffe17 	ldw	r2,-8(fp)
 1003914:	1885803a 	cmpltu	r2,r3,r2
 1003918:	1004c03a 	cmpne	r2,r2,zero
 100391c:	10803fcc 	andi	r2,r2,255
 1003920:	1005003a 	cmpeq	r2,r2,zero
 1003924:	1000011e 	bne	r2,zero,100392c <_ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv+0x44>
	  std::__throw_bad_alloc();
 1003928:	100594c0 	call	100594c <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 100392c:	e13ffe17 	ldw	r4,-8(fp)
 1003930:	100dbf80 	call	100dbf8 <_Znwm>
 1003934:	e037883a 	mov	sp,fp
 1003938:	dfc00117 	ldw	ra,4(sp)
 100393c:	df000017 	ldw	fp,0(sp)
 1003940:	dec00204 	addi	sp,sp,8
 1003944:	f800283a 	ret

01003948 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      _Tp*
      _M_allocate(size_t __n)
 1003948:	defffc04 	addi	sp,sp,-16
 100394c:	dfc00315 	stw	ra,12(sp)
 1003950:	df000215 	stw	fp,8(sp)
 1003954:	df000204 	addi	fp,sp,8
 1003958:	e13ffe15 	stw	r4,-8(fp)
 100395c:	e17fff15 	stw	r5,-4(fp)
      { return _M_impl.allocate(__n); }
 1003960:	e0bffe17 	ldw	r2,-8(fp)
 1003964:	1009883a 	mov	r4,r2
 1003968:	e17fff17 	ldw	r5,-4(fp)
 100396c:	000d883a 	mov	r6,zero
 1003970:	10038e80 	call	10038e8 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv>
 1003974:	e037883a 	mov	sp,fp
 1003978:	dfc00117 	ldw	ra,4(sp)
 100397c:	df000017 	ldw	fp,0(sp)
 1003980:	dec00204 	addi	sp,sp,8
 1003984:	f800283a 	ret

01003988 <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc>:
      }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)
 1003988:	deffeb04 	addi	sp,sp,-84
 100398c:	dfc01415 	stw	ra,80(sp)
 1003990:	df001315 	stw	fp,76(sp)
 1003994:	dc401215 	stw	r17,72(sp)
 1003998:	dc001115 	stw	r16,68(sp)
 100399c:	df001104 	addi	fp,sp,68
 10039a0:	e13ffc15 	stw	r4,-16(fp)
 10039a4:	e17ffd15 	stw	r5,-12(fp)
 10039a8:	e1bffe15 	stw	r6,-8(fp)
    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 10039ac:	e0bffc17 	ldw	r2,-16(fp)
 10039b0:	10c00117 	ldw	r3,4(r2)
 10039b4:	e0bffc17 	ldw	r2,-16(fp)
 10039b8:	10800217 	ldw	r2,8(r2)
 10039bc:	18802826 	beq	r3,r2,1003a60 <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc+0xd8>
	{
	  this->_M_impl.construct(this->_M_impl._M_finish,
 10039c0:	e0bffc17 	ldw	r2,-16(fp)
 10039c4:	1009883a 	mov	r4,r2
 10039c8:	e0bffc17 	ldw	r2,-16(fp)
 10039cc:	11400117 	ldw	r5,4(r2)
 10039d0:	e0bffc17 	ldw	r2,-16(fp)
 10039d4:	10800117 	ldw	r2,4(r2)
 10039d8:	11bfffc4 	addi	r6,r2,-1
 10039dc:	10024880 	call	1002488 <_ZN9__gnu_cxx13new_allocatorIcE9constructEPcRKc>
				  *(this->_M_impl._M_finish - 1));
	  ++this->_M_impl._M_finish;
 10039e0:	e0bffc17 	ldw	r2,-16(fp)
 10039e4:	10800117 	ldw	r2,4(r2)
 10039e8:	10c00044 	addi	r3,r2,1
 10039ec:	e0bffc17 	ldw	r2,-16(fp)
 10039f0:	10c00115 	stw	r3,4(r2)
	  _Tp __x_copy = __x;
 10039f4:	e0bffe17 	ldw	r2,-8(fp)
 10039f8:	10800003 	ldbu	r2,0(r2)
 10039fc:	e0bff105 	stb	r2,-60(fp)
	  std::copy_backward(__position,
 1003a00:	e0bffc17 	ldw	r2,-16(fp)
 1003a04:	10800117 	ldw	r2,4(r2)
 1003a08:	10bfff84 	addi	r2,r2,-2
 1003a0c:	e0bff815 	stw	r2,-32(fp)
 1003a10:	e13ff904 	addi	r4,fp,-28
 1003a14:	e17ff804 	addi	r5,fp,-32
 1003a18:	10025400 	call	1002540 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 1003a1c:	e0bffc17 	ldw	r2,-16(fp)
 1003a20:	10800117 	ldw	r2,4(r2)
 1003a24:	10bfffc4 	addi	r2,r2,-1
 1003a28:	e0bff615 	stw	r2,-40(fp)
 1003a2c:	e13ff704 	addi	r4,fp,-36
 1003a30:	e17ff604 	addi	r5,fp,-40
 1003a34:	10025400 	call	1002540 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 1003a38:	e13ffd17 	ldw	r4,-12(fp)
 1003a3c:	e17ff917 	ldw	r5,-28(fp)
 1003a40:	e1bff717 	ldw	r6,-36(fp)
 1003a44:	10032580 	call	1003258 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>
			     iterator(this->_M_impl._M_finish-2),
			     iterator(this->_M_impl._M_finish-1));
	  *__position = __x_copy;
 1003a48:	e13ffd04 	addi	r4,fp,-12
 1003a4c:	10022b40 	call	10022b4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 1003a50:	1007883a 	mov	r3,r2
 1003a54:	e0bff103 	ldbu	r2,-60(fp)
 1003a58:	18800005 	stb	r2,0(r3)
 1003a5c:	00008006 	br	1003c60 <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc+0x2d8>
	}
      else
	{
	  const size_type __old_size = size();
 1003a60:	e13ffc17 	ldw	r4,-16(fp)
 1003a64:	1002bdc0 	call	1002bdc <_ZNKSt6vectorIcSaIcEE4sizeEv>
 1003a68:	e0bff015 	stw	r2,-64(fp)
	  if (__old_size == this->max_size())
 1003a6c:	e13ffc17 	ldw	r4,-16(fp)
 1003a70:	10028040 	call	1002804 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 1003a74:	1007883a 	mov	r3,r2
 1003a78:	e0bff017 	ldw	r2,-64(fp)
 1003a7c:	1885003a 	cmpeq	r2,r3,r2
 1003a80:	10803fcc 	andi	r2,r2,255
 1003a84:	1005003a 	cmpeq	r2,r2,zero
 1003a88:	1000031e 	bne	r2,zero,1003a98 <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc+0x110>
	    __throw_length_error(__N("vector::_M_insert_aux"));
 1003a8c:	010040b4 	movhi	r4,258
 1003a90:	21136804 	addi	r4,r4,19872
 1003a94:	100673c0 	call	100673c <_ZSt20__throw_length_errorPKc>

	  // When sizeof(value_type) == 1 and __old_size > size_type(-1)/2
	  // __len overflows: if we don't notice and _M_allocate doesn't
	  // throw we crash badly later.
	  size_type __len = __old_size != 0 ? 2 * __old_size : 1;	  
 1003a98:	e0bff017 	ldw	r2,-64(fp)
 1003a9c:	1005003a 	cmpeq	r2,r2,zero
 1003aa0:	1000041e 	bne	r2,zero,1003ab4 <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc+0x12c>
 1003aa4:	e0bff017 	ldw	r2,-64(fp)
 1003aa8:	1085883a 	add	r2,r2,r2
 1003aac:	e0bfff15 	stw	r2,-4(fp)
 1003ab0:	00000206 	br	1003abc <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc+0x134>
 1003ab4:	00800044 	movi	r2,1
 1003ab8:	e0bfff15 	stw	r2,-4(fp)
 1003abc:	e0bfff17 	ldw	r2,-4(fp)
 1003ac0:	e0bfef15 	stw	r2,-68(fp)
	  if (__len < __old_size)
 1003ac4:	e0ffef17 	ldw	r3,-68(fp)
 1003ac8:	e0bff017 	ldw	r2,-64(fp)
 1003acc:	1880032e 	bgeu	r3,r2,1003adc <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc+0x154>
	    __len = this->max_size();
 1003ad0:	e13ffc17 	ldw	r4,-16(fp)
 1003ad4:	10028040 	call	1002804 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 1003ad8:	e0bfef15 	stw	r2,-68(fp)

	  iterator __new_start(this->_M_allocate(__len));
 1003adc:	e13ffc17 	ldw	r4,-16(fp)
 1003ae0:	e17fef17 	ldw	r5,-68(fp)
 1003ae4:	10039480 	call	1003948 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEm>
 1003ae8:	e0bff515 	stw	r2,-44(fp)
 1003aec:	e13ffa04 	addi	r4,fp,-24
 1003af0:	e17ff504 	addi	r5,fp,-44
 1003af4:	10025400 	call	1002540 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
	  iterator __new_finish(__new_start);
 1003af8:	e0bffa17 	ldw	r2,-24(fp)
 1003afc:	e0bffb15 	stw	r2,-20(fp)
	  try
	    {
	      __new_finish =
 1003b00:	e17ffc17 	ldw	r5,-16(fp)
 1003b04:	e13ff404 	addi	r4,fp,-48
 1003b08:	10025400 	call	1002540 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 1003b0c:	e13ffc17 	ldw	r4,-16(fp)
 1003b10:	100230c0 	call	100230c <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 1003b14:	100b883a 	mov	r5,r2
 1003b18:	e13ff304 	addi	r4,fp,-52
 1003b1c:	1007b180 	call	1007b18 <_ZNSaIcEC1ERKS_>
 1003b20:	e1fff304 	addi	r7,fp,-52
 1003b24:	e13ff417 	ldw	r4,-48(fp)
 1003b28:	e17ffd17 	ldw	r5,-12(fp)
 1003b2c:	e1bffa17 	ldw	r6,-24(fp)
 1003b30:	10034b00 	call	10034b0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_cET0_T_S8_S7_SaIT1_E>
 1003b34:	e0bffb15 	stw	r2,-20(fp)
 1003b38:	e13ff304 	addi	r4,fp,-52
 1003b3c:	1007b280 	call	1007b28 <_ZNSaIcED1Ev>
		std::__uninitialized_copy_a(iterator(this->_M_impl._M_start),
					    __position,
					    __new_start,
					    _M_get_Tp_allocator());
	      this->_M_impl.construct(__new_finish.base(), __x);
 1003b40:	e0bffc17 	ldw	r2,-16(fp)
 1003b44:	1021883a 	mov	r16,r2
 1003b48:	e13ffb04 	addi	r4,fp,-20
 1003b4c:	10025e80 	call	10025e8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1003b50:	11400017 	ldw	r5,0(r2)
 1003b54:	8009883a 	mov	r4,r16
 1003b58:	e1bffe17 	ldw	r6,-8(fp)
 1003b5c:	10024880 	call	1002488 <_ZN9__gnu_cxx13new_allocatorIcE9constructEPcRKc>
	      ++__new_finish;
 1003b60:	e13ffb04 	addi	r4,fp,-20
 1003b64:	100227c0 	call	100227c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	      __new_finish =
 1003b68:	e0bffc17 	ldw	r2,-16(fp)
 1003b6c:	11400104 	addi	r5,r2,4
 1003b70:	e13ff204 	addi	r4,fp,-56
 1003b74:	10025400 	call	1002540 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 1003b78:	e13ffc17 	ldw	r4,-16(fp)
 1003b7c:	100230c0 	call	100230c <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 1003b80:	100b883a 	mov	r5,r2
 1003b84:	e13ff1c4 	addi	r4,fp,-57
 1003b88:	1007b180 	call	1007b18 <_ZNSaIcEC1ERKS_>
 1003b8c:	e1fff1c4 	addi	r7,fp,-57
 1003b90:	e13ffd17 	ldw	r4,-12(fp)
 1003b94:	e17ff217 	ldw	r5,-56(fp)
 1003b98:	e1bffb17 	ldw	r6,-20(fp)
 1003b9c:	10034b00 	call	10034b0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_cET0_T_S8_S7_SaIT1_E>
 1003ba0:	e0bffb15 	stw	r2,-20(fp)
 1003ba4:	e13ff1c4 	addi	r4,fp,-57
 1003ba8:	1007b280 	call	1007b28 <_ZNSaIcED1Ev>
	    {
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	      _M_deallocate(__new_start.base(),__len);
	      __throw_exception_again;
	    }
	  std::_Destroy(begin(), end(), _M_get_Tp_allocator());
 1003bac:	e13ffc17 	ldw	r4,-16(fp)
 1003bb0:	10025740 	call	1002574 <_ZNSt6vectorIcSaIcEE5beginEv>
 1003bb4:	1021883a 	mov	r16,r2
 1003bb8:	e13ffc17 	ldw	r4,-16(fp)
 1003bbc:	10025ac0 	call	10025ac <_ZNSt6vectorIcSaIcEE3endEv>
 1003bc0:	1023883a 	mov	r17,r2
 1003bc4:	e13ffc17 	ldw	r4,-16(fp)
 1003bc8:	100230c0 	call	100230c <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 1003bcc:	100b883a 	mov	r5,r2
 1003bd0:	e13ff144 	addi	r4,fp,-59
 1003bd4:	1007b180 	call	1007b18 <_ZNSaIcEC1ERKS_>
 1003bd8:	e1bff144 	addi	r6,fp,-59
 1003bdc:	8009883a 	mov	r4,r16
 1003be0:	880b883a 	mov	r5,r17
 1003be4:	1002cb00 	call	1002cb0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcEvT_S7_SaIT0_E>
 1003be8:	e13ff144 	addi	r4,fp,-59
 1003bec:	1007b280 	call	1007b28 <_ZNSaIcED1Ev>
	  _M_deallocate(this->_M_impl._M_start,
 1003bf0:	e13ffc17 	ldw	r4,-16(fp)
 1003bf4:	e0bffc17 	ldw	r2,-16(fp)
 1003bf8:	11400017 	ldw	r5,0(r2)
 1003bfc:	e0bffc17 	ldw	r2,-16(fp)
 1003c00:	10800217 	ldw	r2,8(r2)
 1003c04:	1007883a 	mov	r3,r2
 1003c08:	e0bffc17 	ldw	r2,-16(fp)
 1003c0c:	10800017 	ldw	r2,0(r2)
 1003c10:	1885c83a 	sub	r2,r3,r2
 1003c14:	100d883a 	mov	r6,r2
 1003c18:	1002f700 	call	1002f70 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm>
			this->_M_impl._M_end_of_storage
			- this->_M_impl._M_start);
	  this->_M_impl._M_start = __new_start.base();
 1003c1c:	e13ffa04 	addi	r4,fp,-24
 1003c20:	10025e80 	call	10025e8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1003c24:	10c00017 	ldw	r3,0(r2)
 1003c28:	e0bffc17 	ldw	r2,-16(fp)
 1003c2c:	10c00015 	stw	r3,0(r2)
	  this->_M_impl._M_finish = __new_finish.base();
 1003c30:	e13ffb04 	addi	r4,fp,-20
 1003c34:	10025e80 	call	10025e8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1003c38:	10c00017 	ldw	r3,0(r2)
 1003c3c:	e0bffc17 	ldw	r2,-16(fp)
 1003c40:	10c00115 	stw	r3,4(r2)
	  this->_M_impl._M_end_of_storage = __new_start.base() + __len;
 1003c44:	e13ffa04 	addi	r4,fp,-24
 1003c48:	10025e80 	call	10025e8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 1003c4c:	10c00017 	ldw	r3,0(r2)
 1003c50:	e0bfef17 	ldw	r2,-68(fp)
 1003c54:	1887883a 	add	r3,r3,r2
 1003c58:	e0bffc17 	ldw	r2,-16(fp)
 1003c5c:	10c00215 	stw	r3,8(r2)
 1003c60:	e037883a 	mov	sp,fp
 1003c64:	dfc00317 	ldw	ra,12(sp)
 1003c68:	df000217 	ldw	fp,8(sp)
 1003c6c:	dc400117 	ldw	r17,4(sp)
 1003c70:	dc000017 	ldw	r16,0(sp)
 1003c74:	dec00404 	addi	sp,sp,16
 1003c78:	f800283a 	ret

01003c7c <_ZNSt6vectorIcSaIcEE9push_backERKc>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 1003c7c:	defffc04 	addi	sp,sp,-16
 1003c80:	dfc00315 	stw	ra,12(sp)
 1003c84:	df000215 	stw	fp,8(sp)
 1003c88:	df000204 	addi	fp,sp,8
 1003c8c:	e13ffe15 	stw	r4,-8(fp)
 1003c90:	e17fff15 	stw	r5,-4(fp)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 1003c94:	e0bffe17 	ldw	r2,-8(fp)
 1003c98:	10c00117 	ldw	r3,4(r2)
 1003c9c:	e0bffe17 	ldw	r2,-8(fp)
 1003ca0:	10800217 	ldw	r2,8(r2)
 1003ca4:	18800c26 	beq	r3,r2,1003cd8 <_ZNSt6vectorIcSaIcEE9push_backERKc+0x5c>
	  {
	    this->_M_impl.construct(this->_M_impl._M_finish, __x);
 1003ca8:	e0bffe17 	ldw	r2,-8(fp)
 1003cac:	1009883a 	mov	r4,r2
 1003cb0:	e0bffe17 	ldw	r2,-8(fp)
 1003cb4:	11400117 	ldw	r5,4(r2)
 1003cb8:	e1bfff17 	ldw	r6,-4(fp)
 1003cbc:	10024880 	call	1002488 <_ZN9__gnu_cxx13new_allocatorIcE9constructEPcRKc>
	    ++this->_M_impl._M_finish;
 1003cc0:	e0bffe17 	ldw	r2,-8(fp)
 1003cc4:	10800117 	ldw	r2,4(r2)
 1003cc8:	10c00044 	addi	r3,r2,1
 1003ccc:	e0bffe17 	ldw	r2,-8(fp)
 1003cd0:	10c00115 	stw	r3,4(r2)
 1003cd4:	00000606 	br	1003cf0 <_ZNSt6vectorIcSaIcEE9push_backERKc+0x74>
	  }
	else
	  _M_insert_aux(end(), __x);
 1003cd8:	e13ffe17 	ldw	r4,-8(fp)
 1003cdc:	10025ac0 	call	10025ac <_ZNSt6vectorIcSaIcEE3endEv>
 1003ce0:	100b883a 	mov	r5,r2
 1003ce4:	e13ffe17 	ldw	r4,-8(fp)
 1003ce8:	e1bfff17 	ldw	r6,-4(fp)
 1003cec:	10039880 	call	1003988 <_ZNSt6vectorIcSaIcEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPcS1_EERKc>
 1003cf0:	e037883a 	mov	sp,fp
 1003cf4:	dfc00117 	ldw	ra,4(sp)
 1003cf8:	df000017 	ldw	fp,0(sp)
 1003cfc:	dec00204 	addi	sp,sp,8
 1003d00:	f800283a 	ret

01003d04 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE8allocateEmPKv>:
      address(const_reference __x) const { return &__x; }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
 1003d04:	defffb04 	addi	sp,sp,-20
 1003d08:	dfc00415 	stw	ra,16(sp)
 1003d0c:	df000315 	stw	fp,12(sp)
 1003d10:	df000304 	addi	fp,sp,12
 1003d14:	e13ffd15 	stw	r4,-12(fp)
 1003d18:	e17ffe15 	stw	r5,-8(fp)
 1003d1c:	e1bfff15 	stw	r6,-4(fp)
      { 
	if (__builtin_expect(__n > this->max_size(), false))
 1003d20:	e13ffd17 	ldw	r4,-12(fp)
 1003d24:	1002e700 	call	1002e70 <_ZNK9__gnu_cxx13new_allocatorIP8os_eventE8max_sizeEv>
 1003d28:	1007883a 	mov	r3,r2
 1003d2c:	e0bffe17 	ldw	r2,-8(fp)
 1003d30:	1885803a 	cmpltu	r2,r3,r2
 1003d34:	1004c03a 	cmpne	r2,r2,zero
 1003d38:	10803fcc 	andi	r2,r2,255
 1003d3c:	1005003a 	cmpeq	r2,r2,zero
 1003d40:	1000011e 	bne	r2,zero,1003d48 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE8allocateEmPKv+0x44>
	  std::__throw_bad_alloc();
 1003d44:	100594c0 	call	100594c <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 1003d48:	e0bffe17 	ldw	r2,-8(fp)
 1003d4c:	1085883a 	add	r2,r2,r2
 1003d50:	1085883a 	add	r2,r2,r2
 1003d54:	1009883a 	mov	r4,r2
 1003d58:	100dbf80 	call	100dbf8 <_Znwm>
 1003d5c:	e037883a 	mov	sp,fp
 1003d60:	dfc00117 	ldw	ra,4(sp)
 1003d64:	df000017 	ldw	fp,0(sp)
 1003d68:	dec00204 	addi	sp,sp,8
 1003d6c:	f800283a 	ret

01003d70 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      _Tp*
      _M_allocate(size_t __n)
 1003d70:	defffc04 	addi	sp,sp,-16
 1003d74:	dfc00315 	stw	ra,12(sp)
 1003d78:	df000215 	stw	fp,8(sp)
 1003d7c:	df000204 	addi	fp,sp,8
 1003d80:	e13ffe15 	stw	r4,-8(fp)
 1003d84:	e17fff15 	stw	r5,-4(fp)
      { return _M_impl.allocate(__n); }
 1003d88:	e0bffe17 	ldw	r2,-8(fp)
 1003d8c:	1009883a 	mov	r4,r2
 1003d90:	e17fff17 	ldw	r5,-4(fp)
 1003d94:	000d883a 	mov	r6,zero
 1003d98:	1003d040 	call	1003d04 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE8allocateEmPKv>
 1003d9c:	e037883a 	mov	sp,fp
 1003da0:	dfc00117 	ldw	ra,4(sp)
 1003da4:	df000017 	ldw	fp,0(sp)
 1003da8:	dec00204 	addi	sp,sp,8
 1003dac:	f800283a 	ret

01003db0 <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_>:
      }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)
 1003db0:	deffea04 	addi	sp,sp,-88
 1003db4:	dfc01515 	stw	ra,84(sp)
 1003db8:	df001415 	stw	fp,80(sp)
 1003dbc:	dc401315 	stw	r17,76(sp)
 1003dc0:	dc001215 	stw	r16,72(sp)
 1003dc4:	df001204 	addi	fp,sp,72
 1003dc8:	e13ffc15 	stw	r4,-16(fp)
 1003dcc:	e17ffd15 	stw	r5,-12(fp)
 1003dd0:	e1bffe15 	stw	r6,-8(fp)
    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 1003dd4:	e0bffc17 	ldw	r2,-16(fp)
 1003dd8:	10c00117 	ldw	r3,4(r2)
 1003ddc:	e0bffc17 	ldw	r2,-16(fp)
 1003de0:	10800217 	ldw	r2,8(r2)
 1003de4:	18802826 	beq	r3,r2,1003e88 <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_+0xd8>
	{
	  this->_M_impl.construct(this->_M_impl._M_finish,
 1003de8:	e0bffc17 	ldw	r2,-16(fp)
 1003dec:	1009883a 	mov	r4,r2
 1003df0:	e0bffc17 	ldw	r2,-16(fp)
 1003df4:	11400117 	ldw	r5,4(r2)
 1003df8:	e0bffc17 	ldw	r2,-16(fp)
 1003dfc:	10800117 	ldw	r2,4(r2)
 1003e00:	11bfff04 	addi	r6,r2,-4
 1003e04:	10024e40 	call	10024e4 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_>
				  *(this->_M_impl._M_finish - 1));
	  ++this->_M_impl._M_finish;
 1003e08:	e0bffc17 	ldw	r2,-16(fp)
 1003e0c:	10800117 	ldw	r2,4(r2)
 1003e10:	10c00104 	addi	r3,r2,4
 1003e14:	e0bffc17 	ldw	r2,-16(fp)
 1003e18:	10c00115 	stw	r3,4(r2)
	  _Tp __x_copy = __x;
 1003e1c:	e0bffe17 	ldw	r2,-8(fp)
 1003e20:	10800017 	ldw	r2,0(r2)
 1003e24:	e0bff015 	stw	r2,-64(fp)
	  std::copy_backward(__position,
 1003e28:	e0bffc17 	ldw	r2,-16(fp)
 1003e2c:	10800117 	ldw	r2,4(r2)
 1003e30:	10bffe04 	addi	r2,r2,-8
 1003e34:	e0bff815 	stw	r2,-32(fp)
 1003e38:	e13ff904 	addi	r4,fp,-28
 1003e3c:	e17ff804 	addi	r5,fp,-32
 1003e40:	10028280 	call	1002828 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 1003e44:	e0bffc17 	ldw	r2,-16(fp)
 1003e48:	10800117 	ldw	r2,4(r2)
 1003e4c:	10bfff04 	addi	r2,r2,-4
 1003e50:	e0bff615 	stw	r2,-40(fp)
 1003e54:	e13ff704 	addi	r4,fp,-36
 1003e58:	e17ff604 	addi	r5,fp,-40
 1003e5c:	10028280 	call	1002828 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 1003e60:	e13ffd17 	ldw	r4,-12(fp)
 1003e64:	e17ff917 	ldw	r5,-28(fp)
 1003e68:	e1bff717 	ldw	r6,-36(fp)
 1003e6c:	100364c0 	call	100364c <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
			     iterator(this->_M_impl._M_finish-2),
			     iterator(this->_M_impl._M_finish-1));
	  *__position = __x_copy;
 1003e70:	e13ffd04 	addi	r4,fp,-12
 1003e74:	100265c0 	call	100265c <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEdeEv>
 1003e78:	1007883a 	mov	r3,r2
 1003e7c:	e0bff017 	ldw	r2,-64(fp)
 1003e80:	18800015 	stw	r2,0(r3)
 1003e84:	00008306 	br	1004094 <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_+0x2e4>
	}
      else
	{
	  const size_type __old_size = size();
 1003e88:	e13ffc17 	ldw	r4,-16(fp)
 1003e8c:	1002e240 	call	1002e24 <_ZNKSt6vectorIP8os_eventSaIS1_EE4sizeEv>
 1003e90:	e0bfef15 	stw	r2,-68(fp)
	  if (__old_size == this->max_size())
 1003e94:	e13ffc17 	ldw	r4,-16(fp)
 1003e98:	10029840 	call	1002984 <_ZNKSt6vectorIP8os_eventSaIS1_EE8max_sizeEv>
 1003e9c:	1007883a 	mov	r3,r2
 1003ea0:	e0bfef17 	ldw	r2,-68(fp)
 1003ea4:	1885003a 	cmpeq	r2,r3,r2
 1003ea8:	10803fcc 	andi	r2,r2,255
 1003eac:	1005003a 	cmpeq	r2,r2,zero
 1003eb0:	1000031e 	bne	r2,zero,1003ec0 <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_+0x110>
	    __throw_length_error(__N("vector::_M_insert_aux"));
 1003eb4:	010040b4 	movhi	r4,258
 1003eb8:	21136804 	addi	r4,r4,19872
 1003ebc:	100673c0 	call	100673c <_ZSt20__throw_length_errorPKc>

	  // When sizeof(value_type) == 1 and __old_size > size_type(-1)/2
	  // __len overflows: if we don't notice and _M_allocate doesn't
	  // throw we crash badly later.
	  size_type __len = __old_size != 0 ? 2 * __old_size : 1;	  
 1003ec0:	e0bfef17 	ldw	r2,-68(fp)
 1003ec4:	1005003a 	cmpeq	r2,r2,zero
 1003ec8:	1000041e 	bne	r2,zero,1003edc <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_+0x12c>
 1003ecc:	e0bfef17 	ldw	r2,-68(fp)
 1003ed0:	1085883a 	add	r2,r2,r2
 1003ed4:	e0bfff15 	stw	r2,-4(fp)
 1003ed8:	00000206 	br	1003ee4 <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_+0x134>
 1003edc:	00800044 	movi	r2,1
 1003ee0:	e0bfff15 	stw	r2,-4(fp)
 1003ee4:	e0bfff17 	ldw	r2,-4(fp)
 1003ee8:	e0bfee15 	stw	r2,-72(fp)
	  if (__len < __old_size)
 1003eec:	e0ffee17 	ldw	r3,-72(fp)
 1003ef0:	e0bfef17 	ldw	r2,-68(fp)
 1003ef4:	1880032e 	bgeu	r3,r2,1003f04 <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_+0x154>
	    __len = this->max_size();
 1003ef8:	e13ffc17 	ldw	r4,-16(fp)
 1003efc:	10029840 	call	1002984 <_ZNKSt6vectorIP8os_eventSaIS1_EE8max_sizeEv>
 1003f00:	e0bfee15 	stw	r2,-72(fp)

	  iterator __new_start(this->_M_allocate(__len));
 1003f04:	e13ffc17 	ldw	r4,-16(fp)
 1003f08:	e17fee17 	ldw	r5,-72(fp)
 1003f0c:	1003d700 	call	1003d70 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE11_M_allocateEm>
 1003f10:	e0bff515 	stw	r2,-44(fp)
 1003f14:	e13ffa04 	addi	r4,fp,-24
 1003f18:	e17ff504 	addi	r5,fp,-44
 1003f1c:	10028280 	call	1002828 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
	  iterator __new_finish(__new_start);
 1003f20:	e0bffa17 	ldw	r2,-24(fp)
 1003f24:	e0bffb15 	stw	r2,-20(fp)
	  try
	    {
	      __new_finish =
 1003f28:	e17ffc17 	ldw	r5,-16(fp)
 1003f2c:	e13ff404 	addi	r4,fp,-48
 1003f30:	10028280 	call	1002828 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 1003f34:	e13ffc17 	ldw	r4,-16(fp)
 1003f38:	10024640 	call	1002464 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>
 1003f3c:	100b883a 	mov	r5,r2
 1003f40:	e13ff304 	addi	r4,fp,-52
 1003f44:	10023f40 	call	10023f4 <_ZNSaIP8os_eventEC1ERKS1_>
 1003f48:	e1fff304 	addi	r7,fp,-52
 1003f4c:	e13ff417 	ldw	r4,-48(fp)
 1003f50:	e17ffd17 	ldw	r5,-12(fp)
 1003f54:	e1bffa17 	ldw	r6,-24(fp)
 1003f58:	10038a40 	call	10038a4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E>
 1003f5c:	e0bffb15 	stw	r2,-20(fp)
 1003f60:	e13ff304 	addi	r4,fp,-52
 1003f64:	10023a00 	call	10023a0 <_ZNSaIP8os_eventED1Ev>
		std::__uninitialized_copy_a(iterator(this->_M_impl._M_start),
					    __position,
					    __new_start,
					    _M_get_Tp_allocator());
	      this->_M_impl.construct(__new_finish.base(), __x);
 1003f68:	e0bffc17 	ldw	r2,-16(fp)
 1003f6c:	1021883a 	mov	r16,r2
 1003f70:	e13ffb04 	addi	r4,fp,-20
 1003f74:	10029ac0 	call	10029ac <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1003f78:	11400017 	ldw	r5,0(r2)
 1003f7c:	8009883a 	mov	r4,r16
 1003f80:	e1bffe17 	ldw	r6,-8(fp)
 1003f84:	10024e40 	call	10024e4 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_>
	      ++__new_finish;
 1003f88:	e13ffb04 	addi	r4,fp,-20
 1003f8c:	10029d00 	call	10029d0 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEppEv>
	      __new_finish =
 1003f90:	e0bffc17 	ldw	r2,-16(fp)
 1003f94:	11400104 	addi	r5,r2,4
 1003f98:	e13ff204 	addi	r4,fp,-56
 1003f9c:	10028280 	call	1002828 <_ZN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 1003fa0:	e13ffc17 	ldw	r4,-16(fp)
 1003fa4:	10024640 	call	1002464 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>
 1003fa8:	100b883a 	mov	r5,r2
 1003fac:	e13ff184 	addi	r4,fp,-58
 1003fb0:	10023f40 	call	10023f4 <_ZNSaIP8os_eventEC1ERKS1_>
 1003fb4:	e1fff184 	addi	r7,fp,-58
 1003fb8:	e13ffd17 	ldw	r4,-12(fp)
 1003fbc:	e17ff217 	ldw	r5,-56(fp)
 1003fc0:	e1bffb17 	ldw	r6,-20(fp)
 1003fc4:	10038a40 	call	10038a4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E>
 1003fc8:	e0bffb15 	stw	r2,-20(fp)
 1003fcc:	e13ff184 	addi	r4,fp,-58
 1003fd0:	10023a00 	call	10023a0 <_ZNSaIP8os_eventED1Ev>
	    {
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	      _M_deallocate(__new_start.base(),__len);
	      __throw_exception_again;
	    }
	  std::_Destroy(begin(), end(), _M_get_Tp_allocator());
 1003fd4:	e13ffc17 	ldw	r4,-16(fp)
 1003fd8:	100285c0 	call	100285c <_ZNSt6vectorIP8os_eventSaIS1_EE5beginEv>
 1003fdc:	1021883a 	mov	r16,r2
 1003fe0:	e13ffc17 	ldw	r4,-16(fp)
 1003fe4:	10029480 	call	1002948 <_ZNSt6vectorIP8os_eventSaIS1_EE3endEv>
 1003fe8:	1023883a 	mov	r17,r2
 1003fec:	e13ffc17 	ldw	r4,-16(fp)
 1003ff0:	10024640 	call	1002464 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE19_M_get_Tp_allocatorEv>
 1003ff4:	100b883a 	mov	r5,r2
 1003ff8:	e13ff104 	addi	r4,fp,-60
 1003ffc:	10023f40 	call	10023f4 <_ZNSaIP8os_eventEC1ERKS1_>
 1004000:	e1bff104 	addi	r6,fp,-60
 1004004:	8009883a 	mov	r4,r16
 1004008:	880b883a 	mov	r5,r17
 100400c:	1002efc0 	call	1002efc <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS3_SaIS3_EEEES3_EvT_S9_SaIT0_E>
 1004010:	e13ff104 	addi	r4,fp,-60
 1004014:	10023a00 	call	10023a0 <_ZNSaIP8os_eventED1Ev>
	  _M_deallocate(this->_M_impl._M_start,
 1004018:	e13ffc17 	ldw	r4,-16(fp)
 100401c:	e0bffc17 	ldw	r2,-16(fp)
 1004020:	11400017 	ldw	r5,0(r2)
 1004024:	e0bffc17 	ldw	r2,-16(fp)
 1004028:	10800217 	ldw	r2,8(r2)
 100402c:	1007883a 	mov	r3,r2
 1004030:	e0bffc17 	ldw	r2,-16(fp)
 1004034:	10800017 	ldw	r2,0(r2)
 1004038:	1885c83a 	sub	r2,r3,r2
 100403c:	1005d0ba 	srai	r2,r2,2
 1004040:	100d883a 	mov	r6,r2
 1004044:	10030540 	call	1003054 <_ZNSt12_Vector_baseIP8os_eventSaIS1_EE13_M_deallocateEPS1_m>
			this->_M_impl._M_end_of_storage
			- this->_M_impl._M_start);
	  this->_M_impl._M_start = __new_start.base();
 1004048:	e13ffa04 	addi	r4,fp,-24
 100404c:	10029ac0 	call	10029ac <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1004050:	10c00017 	ldw	r3,0(r2)
 1004054:	e0bffc17 	ldw	r2,-16(fp)
 1004058:	10c00015 	stw	r3,0(r2)
	  this->_M_impl._M_finish = __new_finish.base();
 100405c:	e13ffb04 	addi	r4,fp,-20
 1004060:	10029ac0 	call	10029ac <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1004064:	10c00017 	ldw	r3,0(r2)
 1004068:	e0bffc17 	ldw	r2,-16(fp)
 100406c:	10c00115 	stw	r3,4(r2)
	  this->_M_impl._M_end_of_storage = __new_start.base() + __len;
 1004070:	e13ffa04 	addi	r4,fp,-24
 1004074:	10029ac0 	call	10029ac <_ZNK9__gnu_cxx17__normal_iteratorIPP8os_eventSt6vectorIS2_SaIS2_EEE4baseEv>
 1004078:	10c00017 	ldw	r3,0(r2)
 100407c:	e0bfee17 	ldw	r2,-72(fp)
 1004080:	1085883a 	add	r2,r2,r2
 1004084:	1085883a 	add	r2,r2,r2
 1004088:	1887883a 	add	r3,r3,r2
 100408c:	e0bffc17 	ldw	r2,-16(fp)
 1004090:	10c00215 	stw	r3,8(r2)
 1004094:	e037883a 	mov	sp,fp
 1004098:	dfc00317 	ldw	ra,12(sp)
 100409c:	df000217 	ldw	fp,8(sp)
 10040a0:	dc400117 	ldw	r17,4(sp)
 10040a4:	dc000017 	ldw	r16,0(sp)
 10040a8:	dec00404 	addi	sp,sp,16
 10040ac:	f800283a 	ret

010040b0 <_ZNSt6vectorIP8os_eventSaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 10040b0:	defffc04 	addi	sp,sp,-16
 10040b4:	dfc00315 	stw	ra,12(sp)
 10040b8:	df000215 	stw	fp,8(sp)
 10040bc:	df000204 	addi	fp,sp,8
 10040c0:	e13ffe15 	stw	r4,-8(fp)
 10040c4:	e17fff15 	stw	r5,-4(fp)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 10040c8:	e0bffe17 	ldw	r2,-8(fp)
 10040cc:	10c00117 	ldw	r3,4(r2)
 10040d0:	e0bffe17 	ldw	r2,-8(fp)
 10040d4:	10800217 	ldw	r2,8(r2)
 10040d8:	18800c26 	beq	r3,r2,100410c <_ZNSt6vectorIP8os_eventSaIS1_EE9push_backERKS1_+0x5c>
	  {
	    this->_M_impl.construct(this->_M_impl._M_finish, __x);
 10040dc:	e0bffe17 	ldw	r2,-8(fp)
 10040e0:	1009883a 	mov	r4,r2
 10040e4:	e0bffe17 	ldw	r2,-8(fp)
 10040e8:	11400117 	ldw	r5,4(r2)
 10040ec:	e1bfff17 	ldw	r6,-4(fp)
 10040f0:	10024e40 	call	10024e4 <_ZN9__gnu_cxx13new_allocatorIP8os_eventE9constructEPS2_RKS2_>
	    ++this->_M_impl._M_finish;
 10040f4:	e0bffe17 	ldw	r2,-8(fp)
 10040f8:	10800117 	ldw	r2,4(r2)
 10040fc:	10c00104 	addi	r3,r2,4
 1004100:	e0bffe17 	ldw	r2,-8(fp)
 1004104:	10c00115 	stw	r3,4(r2)
 1004108:	00000606 	br	1004124 <_ZNSt6vectorIP8os_eventSaIS1_EE9push_backERKS1_+0x74>
	  }
	else
	  _M_insert_aux(end(), __x);
 100410c:	e13ffe17 	ldw	r4,-8(fp)
 1004110:	10029480 	call	1002948 <_ZNSt6vectorIP8os_eventSaIS1_EE3endEv>
 1004114:	100b883a 	mov	r5,r2
 1004118:	e13ffe17 	ldw	r4,-8(fp)
 100411c:	e1bfff17 	ldw	r6,-4(fp)
 1004120:	1003db00 	call	1003db0 <_ZNSt6vectorIP8os_eventSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_>
 1004124:	e037883a 	mov	sp,fp
 1004128:	dfc00117 	ldw	ra,4(sp)
 100412c:	df000017 	ldw	fp,0(sp)
 1004130:	dec00204 	addi	sp,sp,8
 1004134:	f800283a 	ret

01004138 <_ZN13NetworkSender5parseEPc>:

/**
 * Forwards the given network command to the server.
 * @param command the command to forward
 */
void NetworkSender::parse(char *command) {
 1004138:	defffc04 	addi	sp,sp,-16
 100413c:	dfc00315 	stw	ra,12(sp)
 1004140:	df000215 	stw	fp,8(sp)
 1004144:	df000204 	addi	fp,sp,8
 1004148:	e13ffe15 	stw	r4,-8(fp)
 100414c:	e17fff15 	stw	r5,-4(fp)
	NETWORKSENDER_LOG(printf("NetworkSender [command: %s]\n", command));
 1004150:	010040b4 	movhi	r4,258
 1004154:	21137a04 	addi	r4,r4,19944
 1004158:	e17fff17 	ldw	r5,-4(fp)
 100415c:	100ed840 	call	100ed84 <printf>
	wifi->tcpSend(command, "\n");
 1004160:	e0bffe17 	ldw	r2,-8(fp)
 1004164:	11000617 	ldw	r4,24(r2)
 1004168:	e17fff17 	ldw	r5,-4(fp)
 100416c:	018040b4 	movhi	r6,258
 1004170:	31938204 	addi	r6,r6,19976
 1004174:	1004ed80 	call	1004ed8 <_ZN11WifiHandler7tcpSendEPcS0_>
}
 1004178:	e037883a 	mov	sp,fp
 100417c:	dfc00117 	ldw	ra,4(sp)
 1004180:	df000017 	ldw	fp,0(sp)
 1004184:	dec00204 	addi	sp,sp,8
 1004188:	f800283a 	ret

0100418c <_ZN13NetworkSenderC1EP11WifiHandler>:

/**
 * Creates a new network sender.
 * @param wifi - the wifi handler to use to send messages to the server
 */
NetworkSender::NetworkSender(WifiHandler *wifiHandler) {
 100418c:	defffc04 	addi	sp,sp,-16
 1004190:	dfc00315 	stw	ra,12(sp)
 1004194:	df000215 	stw	fp,8(sp)
 1004198:	df000204 	addi	fp,sp,8
 100419c:	e13ffe15 	stw	r4,-8(fp)
 10041a0:	e17fff15 	stw	r5,-4(fp)
 10041a4:	e13ffe17 	ldw	r4,-8(fp)
 10041a8:	1000f380 	call	1000f38 <_ZN8ListenerC2Ev>
 10041ac:	00c040b4 	movhi	r3,258
 10041b0:	18d39004 	addi	r3,r3,20032
 10041b4:	e0bffe17 	ldw	r2,-8(fp)
 10041b8:	10c00015 	stw	r3,0(r2)
	wifi = wifiHandler;
 10041bc:	e0fffe17 	ldw	r3,-8(fp)
 10041c0:	e0bfff17 	ldw	r2,-4(fp)
 10041c4:	18800615 	stw	r2,24(r3)
}
 10041c8:	e037883a 	mov	sp,fp
 10041cc:	dfc00117 	ldw	ra,4(sp)
 10041d0:	df000017 	ldw	fp,0(sp)
 10041d4:	dec00204 	addi	sp,sp,8
 10041d8:	f800283a 	ret

010041dc <_ZN13NetworkSenderC2EP11WifiHandler>:

/**
 * Creates a new network sender.
 * @param wifi - the wifi handler to use to send messages to the server
 */
NetworkSender::NetworkSender(WifiHandler *wifiHandler) {
 10041dc:	defffc04 	addi	sp,sp,-16
 10041e0:	dfc00315 	stw	ra,12(sp)
 10041e4:	df000215 	stw	fp,8(sp)
 10041e8:	df000204 	addi	fp,sp,8
 10041ec:	e13ffe15 	stw	r4,-8(fp)
 10041f0:	e17fff15 	stw	r5,-4(fp)
 10041f4:	e13ffe17 	ldw	r4,-8(fp)
 10041f8:	1000f380 	call	1000f38 <_ZN8ListenerC2Ev>
 10041fc:	00c040b4 	movhi	r3,258
 1004200:	18d39004 	addi	r3,r3,20032
 1004204:	e0bffe17 	ldw	r2,-8(fp)
 1004208:	10c00015 	stw	r3,0(r2)
	wifi = wifiHandler;
 100420c:	e0fffe17 	ldw	r3,-8(fp)
 1004210:	e0bfff17 	ldw	r2,-4(fp)
 1004214:	18800615 	stw	r2,24(r3)
}
 1004218:	e037883a 	mov	sp,fp
 100421c:	dfc00117 	ldw	ra,4(sp)
 1004220:	df000017 	ldw	fp,0(sp)
 1004224:	dec00204 	addi	sp,sp,8
 1004228:	f800283a 	ret

0100422c <_Z26network_sender_update_taskPv>:
// TASKS

extern NetworkSender *networkOut;

/* Waits for outgoing network commands and forwards them as they arrive. */
void network_sender_update_task(void *pdata) {
 100422c:	deffe404 	addi	sp,sp,-112
 1004230:	dfc01b15 	stw	ra,108(sp)
 1004234:	df001a15 	stw	fp,104(sp)
 1004238:	ddc01915 	stw	r23,100(sp)
 100423c:	dd801815 	stw	r22,96(sp)
 1004240:	dd401715 	stw	r21,92(sp)
 1004244:	dd001615 	stw	r20,88(sp)
 1004248:	dcc01515 	stw	r19,84(sp)
 100424c:	dc801415 	stw	r18,80(sp)
 1004250:	dc401315 	stw	r17,76(sp)
 1004254:	dc001215 	stw	r16,72(sp)
 1004258:	df001204 	addi	fp,sp,72
 100425c:	e13fef15 	stw	r4,-68(fp)
 1004260:	00804074 	movhi	r2,257
 1004264:	10b3a604 	addi	r2,r2,-12648
 1004268:	e0bff615 	stw	r2,-40(fp)
 100426c:	008040b4 	movhi	r2,258
 1004270:	10910c04 	addi	r2,r2,17456
 1004274:	e0bff715 	stw	r2,-36(fp)
 1004278:	e0bff804 	addi	r2,fp,-32
 100427c:	e0ffee04 	addi	r3,fp,-72
 1004280:	10c00015 	stw	r3,0(r2)
 1004284:	00c04034 	movhi	r3,256
 1004288:	18d0cc04 	addi	r3,r3,17200
 100428c:	10c00115 	stw	r3,4(r2)
 1004290:	16c00215 	stw	sp,8(r2)
 1004294:	e13ff004 	addi	r4,fp,-64
 1004298:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
	printf("NetworkSender [task: update, status: start]\n");
 100429c:	00bfffc4 	movi	r2,-1
 10042a0:	e0bff115 	stw	r2,-60(fp)
 10042a4:	010040b4 	movhi	r4,258
 10042a8:	21138304 	addi	r4,r4,19980
 10042ac:	100eec00 	call	100eec0 <puts>
 10042b0:	00000006 	br	10042b4 <_Z26network_sender_update_taskPv+0x88>
	while (true) {
		try {
			// Update the network sender.
			networkOut->update();
 10042b4:	008040f4 	movhi	r2,259
 10042b8:	10a6f904 	addi	r2,r2,-25628
 10042bc:	10800017 	ldw	r2,0(r2)
 10042c0:	1009883a 	mov	r4,r2
 10042c4:	00800084 	movi	r2,2
 10042c8:	e0bff115 	stw	r2,-60(fp)
 10042cc:	1000de40 	call	1000de4 <_ZN8Listener6updateEv>
 10042d0:	003ff806 	br	10042b4 <_Z26network_sender_update_taskPv+0x88>
 10042d4:	e0ffff17 	ldw	r3,-4(fp)
 10042d8:	18800060 	cmpeqi	r2,r3,1
 10042dc:	1000041e 	bne	r2,zero,10042f0 <_Z26network_sender_update_taskPv+0xc4>
 10042e0:	00bfffc4 	movi	r2,-1
 10042e4:	e0bff115 	stw	r2,-60(fp)
 10042e8:	e13ffe17 	ldw	r4,-8(fp)
 10042ec:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
		} catch (ARCapException &e) {
 10042f0:	e13ffe17 	ldw	r4,-8(fp)
 10042f4:	100d5500 	call	100d550 <__cxa_begin_catch>
 10042f8:	e0bfee15 	stw	r2,-72(fp)
			// Log exceptions.
			NETWORKSENDER_LOG(printf("%s\n", e.what()));
 10042fc:	e0bfee17 	ldw	r2,-72(fp)
 1004300:	10800017 	ldw	r2,0(r2)
 1004304:	10800204 	addi	r2,r2,8
 1004308:	10800017 	ldw	r2,0(r2)
 100430c:	e13fee17 	ldw	r4,-72(fp)
 1004310:	103ee83a 	callr	r2
 1004314:	1009883a 	mov	r4,r2
 1004318:	00800044 	movi	r2,1
 100431c:	e0bff115 	stw	r2,-60(fp)
 1004320:	100eec00 	call	100eec0 <puts>
	printf("NetworkSender [task: update, status: start]\n");
	while (true) {
		try {
			// Update the network sender.
			networkOut->update();
		} catch (ARCapException &e) {
 1004324:	e03ff115 	stw	zero,-60(fp)
 1004328:	100d4ac0 	call	100d4ac <__cxa_end_catch>
 100432c:	003fe106 	br	10042b4 <_Z26network_sender_update_taskPv+0x88>
 1004330:	e7001204 	addi	fp,fp,72
 1004334:	e0bff117 	ldw	r2,-60(fp)
 1004338:	e0fff217 	ldw	r3,-56(fp)
 100433c:	e0fffe15 	stw	r3,-8(fp)
 1004340:	e0fff317 	ldw	r3,-52(fp)
 1004344:	e0ffff15 	stw	r3,-4(fp)
 1004348:	10800060 	cmpeqi	r2,r2,1
 100434c:	103fe11e 	bne	r2,zero,10042d4 <_Z26network_sender_update_taskPv+0xa8>
 1004350:	e0bffe17 	ldw	r2,-8(fp)
 1004354:	e0bffd15 	stw	r2,-12(fp)
 1004358:	e03ff115 	stw	zero,-60(fp)
 100435c:	100d4ac0 	call	100d4ac <__cxa_end_catch>
 1004360:	e0fffd17 	ldw	r3,-12(fp)
 1004364:	e0fffe15 	stw	r3,-8(fp)
 1004368:	00bfffc4 	movi	r2,-1
 100436c:	e0bff115 	stw	r2,-60(fp)
 1004370:	e13ffe17 	ldw	r4,-8(fp)
 1004374:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

01004378 <_ZN13NetworkSenderD0Ev>:

/**
 * Listens for events from handlers on the rover and forwards them to the server
 * using a wifi handler.
 */
class NetworkSender: public Listener {
 1004378:	defffd04 	addi	sp,sp,-12
 100437c:	dfc00215 	stw	ra,8(sp)
 1004380:	df000115 	stw	fp,4(sp)
 1004384:	df000104 	addi	fp,sp,4
 1004388:	e13fff15 	stw	r4,-4(fp)
 100438c:	00c040b4 	movhi	r3,258
 1004390:	18d39004 	addi	r3,r3,20032
 1004394:	e0bfff17 	ldw	r2,-4(fp)
 1004398:	10c00015 	stw	r3,0(r2)
 100439c:	e13fff17 	ldw	r4,-4(fp)
 10043a0:	1000c1c0 	call	1000c1c <_ZN8ListenerD2Ev>
 10043a4:	00800044 	movi	r2,1
 10043a8:	10803fcc 	andi	r2,r2,255
 10043ac:	1005003a 	cmpeq	r2,r2,zero
 10043b0:	1000021e 	bne	r2,zero,10043bc <_ZN13NetworkSenderD0Ev+0x44>
 10043b4:	e13fff17 	ldw	r4,-4(fp)
 10043b8:	100d6680 	call	100d668 <_ZdlPv>
 10043bc:	e037883a 	mov	sp,fp
 10043c0:	dfc00117 	ldw	ra,4(sp)
 10043c4:	df000017 	ldw	fp,0(sp)
 10043c8:	dec00204 	addi	sp,sp,8
 10043cc:	f800283a 	ret

010043d0 <_ZN13NetworkSenderD1Ev>:
 10043d0:	defffd04 	addi	sp,sp,-12
 10043d4:	dfc00215 	stw	ra,8(sp)
 10043d8:	df000115 	stw	fp,4(sp)
 10043dc:	df000104 	addi	fp,sp,4
 10043e0:	e13fff15 	stw	r4,-4(fp)
 10043e4:	00c040b4 	movhi	r3,258
 10043e8:	18d39004 	addi	r3,r3,20032
 10043ec:	e0bfff17 	ldw	r2,-4(fp)
 10043f0:	10c00015 	stw	r3,0(r2)
 10043f4:	e13fff17 	ldw	r4,-4(fp)
 10043f8:	1000c1c0 	call	1000c1c <_ZN8ListenerD2Ev>
 10043fc:	0005883a 	mov	r2,zero
 1004400:	10803fcc 	andi	r2,r2,255
 1004404:	1005003a 	cmpeq	r2,r2,zero
 1004408:	1000021e 	bne	r2,zero,1004414 <_ZN13NetworkSenderD1Ev+0x44>
 100440c:	e13fff17 	ldw	r4,-4(fp)
 1004410:	100d6680 	call	100d668 <_ZdlPv>
 1004414:	e037883a 	mov	sp,fp
 1004418:	dfc00117 	ldw	ra,4(sp)
 100441c:	df000017 	ldw	fp,0(sp)
 1004420:	dec00204 	addi	sp,sp,8
 1004424:	f800283a 	ret

01004428 <_Z7inRangei>:
 * Indicates whether a message of the given length can fit in the read buffer.
 * @param messageLength - the length to test against the buffer size
 * @return true if the message length, plus one for the terminating null byte,
 * is less than the size of the buffer.
 */
static bool inRange(int messageLength) {
 1004428:	defffd04 	addi	sp,sp,-12
 100442c:	df000215 	stw	fp,8(sp)
 1004430:	df000204 	addi	fp,sp,8
 1004434:	e13fff15 	stw	r4,-4(fp)
	bool inRange = messageLength < WIFI_READ_MAX_SIZE - 1;
 1004438:	e0bfff17 	ldw	r2,-4(fp)
 100443c:	1080ffd0 	cmplti	r2,r2,1023
 1004440:	e0bffe05 	stb	r2,-8(fp)
	WIFIHANDLER_READ_LOG(if (!inRange) printf("[WifiRead] error: out of buffer space\n"));
	return inRange;
 1004444:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004448:	e037883a 	mov	sp,fp
 100444c:	df000017 	ldw	fp,0(sp)
 1004450:	dec00104 	addi	sp,sp,4
 1004454:	f800283a 	ret

01004458 <_Z12inRetryRangei>:

/**
 * Indicates whether the given number of retries is under the maximum number of retries.
 * @return true if there is room for more retries
 */
static bool inRetryRange(int retryCount) {
 1004458:	defffd04 	addi	sp,sp,-12
 100445c:	df000215 	stw	fp,8(sp)
 1004460:	df000204 	addi	fp,sp,8
 1004464:	e13fff15 	stw	r4,-4(fp)
	bool inRetryRange = retryCount < WIFI_READ_AVAILABLE_RETRIES;
 1004468:	e0ffff17 	ldw	r3,-4(fp)
 100446c:	00801034 	movhi	r2,64
 1004470:	10bfffc4 	addi	r2,r2,-1
 1004474:	10c4403a 	cmpge	r2,r2,r3
 1004478:	e0bffe05 	stb	r2,-8(fp)
	WIFIHANDLER_READ_LOG(if (!inRetryRange) printf("[WifiRead] error: too many retries\n"));
	return inRetryRange;
 100447c:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004480:	e037883a 	mov	sp,fp
 1004484:	df000017 	ldw	fp,0(sp)
 1004488:	dec00104 	addi	sp,sp,4
 100448c:	f800283a 	ret

01004490 <_Z14stringEndsWithPciS_i>:
 * Indicates whether the string "whole", of length "wholeLength", ends with
 * the substring given by "end", of length "endLength".
 * @return true if the whole string is longer than the end string and the last
 * endLength characters of the whole string are the same as the end string.
 */
static bool stringEndsWith(char *whole, int wholeLength, char *end, int endLength) {
 1004490:	defff904 	addi	sp,sp,-28
 1004494:	dfc00615 	stw	ra,24(sp)
 1004498:	df000515 	stw	fp,20(sp)
 100449c:	df000504 	addi	fp,sp,20
 10044a0:	e13ffb15 	stw	r4,-20(fp)
 10044a4:	e17ffc15 	stw	r5,-16(fp)
 10044a8:	e1bffd15 	stw	r6,-12(fp)
 10044ac:	e1fffe15 	stw	r7,-8(fp)
	if (wholeLength < endLength) {
 10044b0:	e0fffc17 	ldw	r3,-16(fp)
 10044b4:	e0bffe17 	ldw	r2,-8(fp)
 10044b8:	1880020e 	bge	r3,r2,10044c4 <_Z14stringEndsWithPciS_i+0x34>
		return false;
 10044bc:	e03fff15 	stw	zero,-4(fp)
 10044c0:	00000b06 	br	10044f0 <_Z14stringEndsWithPciS_i+0x60>
	} else {
		return strncmp(whole + wholeLength - endLength, end, endLength) == 0;
 10044c4:	e0bffc17 	ldw	r2,-16(fp)
 10044c8:	1007883a 	mov	r3,r2
 10044cc:	e0bffb17 	ldw	r2,-20(fp)
 10044d0:	1887883a 	add	r3,r3,r2
 10044d4:	e0bffe17 	ldw	r2,-8(fp)
 10044d8:	1889c83a 	sub	r4,r3,r2
 10044dc:	e1bffe17 	ldw	r6,-8(fp)
 10044e0:	e17ffd17 	ldw	r5,-12(fp)
 10044e4:	100f4780 	call	100f478 <strncmp>
 10044e8:	1005003a 	cmpeq	r2,r2,zero
 10044ec:	e0bfff15 	stw	r2,-4(fp)
 10044f0:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 10044f4:	e037883a 	mov	sp,fp
 10044f8:	dfc00117 	ldw	ra,4(sp)
 10044fc:	df000017 	ldw	fp,0(sp)
 1004500:	dec00204 	addi	sp,sp,8
 1004504:	f800283a 	ret

01004508 <_ZN11WifiHandler9readUntilEPc>:
/**
 * Listens on the wifi UART until a full message is received.
 * @param stop - the string marking the end of the message
 * @return the message that was received, which must be freed by the caller
 */
char *WifiHandler::readUntil(char *stop) {
 1004508:	defff404 	addi	sp,sp,-48
 100450c:	dfc00b15 	stw	ra,44(sp)
 1004510:	df000a15 	stw	fp,40(sp)
 1004514:	df000a04 	addi	fp,sp,40
 1004518:	e13ffd15 	stw	r4,-12(fp)
 100451c:	e17ffe15 	stw	r5,-8(fp)
	alt_u8 data, parity;
	unsigned readAvailable;
	// Get the stop marker length.
	int stopLength = strnlen(stop, WIFI_READ_STOP_MARKER_MAX_SIZE);
 1004520:	e13ffe17 	ldw	r4,-8(fp)
 1004524:	01400804 	movi	r5,32
 1004528:	100f5680 	call	100f568 <strnlen>
 100452c:	e0bffa15 	stw	r2,-24(fp)
	WIFIHANDLER_READ_LOG(printf("[WifiRead] stop: %s\n", stop));
	// Create a new, empty message.
	char *message = (char *)malloc(WIFI_READ_MAX_SIZE);
 1004530:	01010004 	movi	r4,1024
 1004534:	100e2c00 	call	100e2c0 <malloc>
 1004538:	e0bff915 	stw	r2,-28(fp)
	int messageLength = 0;
 100453c:	e03ff815 	stw	zero,-32(fp)
	// Count the number of retries when there is no data available.
	int retryCount = 0;
 1004540:	e03ff715 	stw	zero,-36(fp)
	// Read until the message buffer matches the stop string, or we run out of space, or there are to many retries.
	while (inRange(messageLength) && inRetryRange(retryCount) &&
 1004544:	00002306 	br	10045d4 <_ZN11WifiHandler9readUntilEPc+0xcc>
			!stringEndsWith(message, messageLength, stop, stopLength)) {
		// Check for next character.
		readAvailable = alt_up_rs232_get_used_space_in_read_FIFO(wifi_dev);
 1004548:	e0bffd17 	ldw	r2,-12(fp)
 100454c:	11000017 	ldw	r4,0(r2)
 1004550:	1022a780 	call	1022a78 <alt_up_rs232_get_used_space_in_read_FIFO>
 1004554:	e0bffb15 	stw	r2,-20(fp)
		WIFIHANDLER_READ_LOG(printf("[WifiRead] available: %u\n", readAvailable));
		// Is there data?
		if (readAvailable <= READ_FIFO_EMPTY) {
 1004558:	e0bffb17 	ldw	r2,-20(fp)
 100455c:	1004c03a 	cmpne	r2,r2,zero
 1004560:	1000041e 	bne	r2,zero,1004574 <_ZN11WifiHandler9readUntilEPc+0x6c>
			// No data; retry.
			retryCount++;
 1004564:	e0bff717 	ldw	r2,-36(fp)
 1004568:	10800044 	addi	r2,r2,1
 100456c:	e0bff715 	stw	r2,-36(fp)
 1004570:	00001806 	br	10045d4 <_ZN11WifiHandler9readUntilEPc+0xcc>
		} else {
			// Reset the retry count.
			retryCount = 0;
 1004574:	e03ff715 	stw	zero,-36(fp)
			// Get the new data.
			while (readAvailable > READ_FIFO_EMPTY) {
 1004578:	00001306 	br	10045c8 <_ZN11WifiHandler9readUntilEPc+0xc0>
				// Read next character.
				int status = alt_up_rs232_read_data(wifi_dev, &data, &parity);
 100457c:	e0bffd17 	ldw	r2,-12(fp)
 1004580:	11000017 	ldw	r4,0(r2)
 1004584:	e17ffc04 	addi	r5,fp,-16
 1004588:	e1bffc44 	addi	r6,fp,-15
 100458c:	1022b8c0 	call	1022b8c <alt_up_rs232_read_data>
 1004590:	e0bff615 	stw	r2,-40(fp)
				// Log errors.
				if (status != OK) WIFIHANDLER_READ_LOG(printf("[WifiRead] error: cannot read\n"));
				// Add character to the message buffer.
				WIFIHANDLER_READ_LOG(printf("[WifiRead] data: %c\n", data));
				message[messageLength] = (char)data;
 1004594:	e0bff817 	ldw	r2,-32(fp)
 1004598:	1007883a 	mov	r3,r2
 100459c:	e0bff917 	ldw	r2,-28(fp)
 10045a0:	1887883a 	add	r3,r3,r2
 10045a4:	e0bffc03 	ldbu	r2,-16(fp)
 10045a8:	18800005 	stb	r2,0(r3)
				messageLength++;
 10045ac:	e0bff817 	ldw	r2,-32(fp)
 10045b0:	10800044 	addi	r2,r2,1
 10045b4:	e0bff815 	stw	r2,-32(fp)
				// Check for next character.
				readAvailable = alt_up_rs232_get_used_space_in_read_FIFO(wifi_dev);
 10045b8:	e0bffd17 	ldw	r2,-12(fp)
 10045bc:	11000017 	ldw	r4,0(r2)
 10045c0:	1022a780 	call	1022a78 <alt_up_rs232_get_used_space_in_read_FIFO>
 10045c4:	e0bffb15 	stw	r2,-20(fp)
			retryCount++;
		} else {
			// Reset the retry count.
			retryCount = 0;
			// Get the new data.
			while (readAvailable > READ_FIFO_EMPTY) {
 10045c8:	e0bffb17 	ldw	r2,-20(fp)
 10045cc:	1004c03a 	cmpne	r2,r2,zero
 10045d0:	103fea1e 	bne	r2,zero,100457c <_ZN11WifiHandler9readUntilEPc+0x74>
	char *message = (char *)malloc(WIFI_READ_MAX_SIZE);
	int messageLength = 0;
	// Count the number of retries when there is no data available.
	int retryCount = 0;
	// Read until the message buffer matches the stop string, or we run out of space, or there are to many retries.
	while (inRange(messageLength) && inRetryRange(retryCount) &&
 10045d4:	e13ff817 	ldw	r4,-32(fp)
 10045d8:	10044280 	call	1004428 <_Z7inRangei>
 10045dc:	1080005c 	xori	r2,r2,1
 10045e0:	10803fcc 	andi	r2,r2,255
 10045e4:	1004c03a 	cmpne	r2,r2,zero
 10045e8:	1000131e 	bne	r2,zero,1004638 <_ZN11WifiHandler9readUntilEPc+0x130>
 10045ec:	e13ff717 	ldw	r4,-36(fp)
 10045f0:	10044580 	call	1004458 <_Z12inRetryRangei>
 10045f4:	1080005c 	xori	r2,r2,1
 10045f8:	10803fcc 	andi	r2,r2,255
 10045fc:	1004c03a 	cmpne	r2,r2,zero
 1004600:	10000d1e 	bne	r2,zero,1004638 <_ZN11WifiHandler9readUntilEPc+0x130>
 1004604:	e13ff917 	ldw	r4,-28(fp)
 1004608:	e17ff817 	ldw	r5,-32(fp)
 100460c:	e1bffe17 	ldw	r6,-8(fp)
 1004610:	e1fffa17 	ldw	r7,-24(fp)
 1004614:	10044900 	call	1004490 <_Z14stringEndsWithPciS_i>
 1004618:	1080005c 	xori	r2,r2,1
 100461c:	1080005c 	xori	r2,r2,1
 1004620:	10803fcc 	andi	r2,r2,255
 1004624:	1004c03a 	cmpne	r2,r2,zero
 1004628:	1000031e 	bne	r2,zero,1004638 <_ZN11WifiHandler9readUntilEPc+0x130>
 100462c:	00800044 	movi	r2,1
 1004630:	e0bfff05 	stb	r2,-4(fp)
 1004634:	00000106 	br	100463c <_ZN11WifiHandler9readUntilEPc+0x134>
 1004638:	e03fff05 	stb	zero,-4(fp)
 100463c:	e0bfff03 	ldbu	r2,-4(fp)
 1004640:	10803fcc 	andi	r2,r2,255
 1004644:	1004c03a 	cmpne	r2,r2,zero
 1004648:	103fbf1e 	bne	r2,zero,1004548 <_ZN11WifiHandler9readUntilEPc+0x40>
				readAvailable = alt_up_rs232_get_used_space_in_read_FIFO(wifi_dev);
			} WIFIHANDLER_READ_LOG(printf("[WifiRead] length: %d\n", messageLength));
		}
	}
	// Add the null character and return the message.
	message[messageLength] = '\0';
 100464c:	e0bff817 	ldw	r2,-32(fp)
 1004650:	1007883a 	mov	r3,r2
 1004654:	e0bff917 	ldw	r2,-28(fp)
 1004658:	1885883a 	add	r2,r3,r2
 100465c:	10000005 	stb	zero,0(r2)
	return message;
 1004660:	e0bff917 	ldw	r2,-28(fp)
}
 1004664:	e037883a 	mov	sp,fp
 1004668:	dfc00117 	ldw	ra,4(sp)
 100466c:	df000017 	ldw	fp,0(sp)
 1004670:	dec00204 	addi	sp,sp,8
 1004674:	f800283a 	ret

01004678 <_ZN11WifiHandler15configReadStartEv>:

/**
 * Reads the latest configuration response from the Xbee wifi module.
 * @return the message object containing the response
 */
char *WifiHandler::configReadStart() {
 1004678:	defffc04 	addi	sp,sp,-16
 100467c:	dfc00315 	stw	ra,12(sp)
 1004680:	df000215 	stw	fp,8(sp)
 1004684:	df000204 	addi	fp,sp,8
 1004688:	e13fff15 	stw	r4,-4(fp)
	char *response = readUntil("\r");
 100468c:	e13fff17 	ldw	r4,-4(fp)
 1004690:	014040b4 	movhi	r5,258
 1004694:	2953aa04 	addi	r5,r5,20136
 1004698:	10045080 	call	1004508 <_ZN11WifiHandler9readUntilEPc>
 100469c:	e0bffe15 	stw	r2,-8(fp)
	printf("%s\n", response);
 10046a0:	e13ffe17 	ldw	r4,-8(fp)
 10046a4:	100eec00 	call	100eec0 <puts>
	return response;
 10046a8:	e0bffe17 	ldw	r2,-8(fp)
}
 10046ac:	e037883a 	mov	sp,fp
 10046b0:	dfc00117 	ldw	ra,4(sp)
 10046b4:	df000017 	ldw	fp,0(sp)
 10046b8:	dec00204 	addi	sp,sp,8
 10046bc:	f800283a 	ret

010046c0 <_ZN11WifiHandler10configReadEv>:

/**
 * Reads the latest configuration response from the Xbee wifi module.
 */
void WifiHandler::configRead() {
 10046c0:	defffc04 	addi	sp,sp,-16
 10046c4:	dfc00315 	stw	ra,12(sp)
 10046c8:	df000215 	stw	fp,8(sp)
 10046cc:	df000204 	addi	fp,sp,8
 10046d0:	e13fff15 	stw	r4,-4(fp)
	char *response = configReadStart();
 10046d4:	e13fff17 	ldw	r4,-4(fp)
 10046d8:	10046780 	call	1004678 <_ZN11WifiHandler15configReadStartEv>
 10046dc:	e0bffe15 	stw	r2,-8(fp)
	free(response);
 10046e0:	e13ffe17 	ldw	r4,-8(fp)
 10046e4:	100e2ac0 	call	100e2ac <free>
}
 10046e8:	e037883a 	mov	sp,fp
 10046ec:	dfc00117 	ldw	ra,4(sp)
 10046f0:	df000017 	ldw	fp,0(sp)
 10046f4:	dec00204 	addi	sp,sp,8
 10046f8:	f800283a 	ret

010046fc <_ZN11WifiHandler5writeEPc>:
 * The message will be used to configure the Xbee wifi module, if the device is in configuration mode,
 * or it will be forwarded through TCP to the remote server given by DL (the destination IP address)
 * and DE (the destination IP port).
 * @param message - the message to write
 */
void WifiHandler::write(char *message) {
 10046fc:	defff804 	addi	sp,sp,-32
 1004700:	dfc00715 	stw	ra,28(sp)
 1004704:	df000615 	stw	fp,24(sp)
 1004708:	df000604 	addi	fp,sp,24
 100470c:	e13ffe15 	stw	r4,-8(fp)
 1004710:	e17fff15 	stw	r5,-4(fp)
	int i = 0;
 1004714:	e03ffd15 	stw	zero,-12(fp)
	alt_up_rs232_disable_read_interrupt(wifi_dev);
 1004718:	e0bffe17 	ldw	r2,-8(fp)
 100471c:	11000017 	ldw	r4,0(r2)
 1004720:	1022a200 	call	1022a20 <alt_up_rs232_disable_read_interrupt>
	char data = message[i];
 1004724:	e0bffd17 	ldw	r2,-12(fp)
 1004728:	1007883a 	mov	r3,r2
 100472c:	e0bfff17 	ldw	r2,-4(fp)
 1004730:	1885883a 	add	r2,r3,r2
 1004734:	10800003 	ldbu	r2,0(r2)
 1004738:	e0bffc05 	stb	r2,-16(fp)
	while (data != '\0') {
 100473c:	00002106 	br	10047c4 <_ZN11WifiHandler5writeEPc+0xc8>
		// Check for write space.
		unsigned writeAvailable = alt_up_rs232_get_available_space_in_write_FIFO(wifi_dev);
 1004740:	e0bffe17 	ldw	r2,-8(fp)
 1004744:	11000017 	ldw	r4,0(r2)
 1004748:	1022ab40 	call	1022ab4 <alt_up_rs232_get_available_space_in_write_FIFO>
 100474c:	e0bffb15 	stw	r2,-20(fp)
		WIFIHANDLER_WRITE_LOG(printf("[WifiWrite] available: %u\n", writeAvailable));
		if (writeAvailable > WRITE_FIFO_EMPTY) {
 1004750:	e0bffb17 	ldw	r2,-20(fp)
 1004754:	10800870 	cmpltui	r2,r2,33
 1004758:	1000151e 	bne	r2,zero,10047b0 <_ZN11WifiHandler5writeEPc+0xb4>
			// If space, write the character.
			WIFIHANDLER_WRITE_LOG(printf("[WifiWrite] data: %c\n", data));
			int status = alt_up_rs232_write_data(wifi_dev, data);
 100475c:	e0bffe17 	ldw	r2,-8(fp)
 1004760:	11000017 	ldw	r4,0(r2)
 1004764:	e0bffc03 	ldbu	r2,-16(fp)
 1004768:	11403fcc 	andi	r5,r2,255
 100476c:	1022b440 	call	1022b44 <alt_up_rs232_write_data>
 1004770:	e0bffa15 	stw	r2,-24(fp)
			// Log errors.
			if (status != OK) WIFIHANDLER_WRITE_LOG(printf("[WifiWrite] error: cannot write\n"));
			// Go to next character.
			data = message[++i];
 1004774:	e0bffd17 	ldw	r2,-12(fp)
 1004778:	10800044 	addi	r2,r2,1
 100477c:	e0bffd15 	stw	r2,-12(fp)
 1004780:	e0bffd17 	ldw	r2,-12(fp)
 1004784:	1007883a 	mov	r3,r2
 1004788:	e0bfff17 	ldw	r2,-4(fp)
 100478c:	1885883a 	add	r2,r3,r2
 1004790:	10800003 	ldbu	r2,0(r2)
 1004794:	e0bffc05 	stb	r2,-16(fp)
			OSTimeDlyHMSM(0, 0, 0, 2); // TODO Check wifi write delay.
 1004798:	0009883a 	mov	r4,zero
 100479c:	000b883a 	mov	r5,zero
 10047a0:	000d883a 	mov	r6,zero
 10047a4:	01c00084 	movi	r7,2
 10047a8:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
 10047ac:	00000506 	br	10047c4 <_ZN11WifiHandler5writeEPc+0xc8>
		} else {
			// If no space, wait.
			WIFIHANDLER_WRITE_LOG(printf("[WifiWrite] waiting for space\n"));
			OSTimeDlyHMSM(0, 0, 0, 100);
 10047b0:	0009883a 	mov	r4,zero
 10047b4:	000b883a 	mov	r5,zero
 10047b8:	000d883a 	mov	r6,zero
 10047bc:	01c01904 	movi	r7,100
 10047c0:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
 */
void WifiHandler::write(char *message) {
	int i = 0;
	alt_up_rs232_disable_read_interrupt(wifi_dev);
	char data = message[i];
	while (data != '\0') {
 10047c4:	e0bffc07 	ldb	r2,-16(fp)
 10047c8:	1004c03a 	cmpne	r2,r2,zero
 10047cc:	103fdc1e 	bne	r2,zero,1004740 <_ZN11WifiHandler5writeEPc+0x44>
			// If no space, wait.
			WIFIHANDLER_WRITE_LOG(printf("[WifiWrite] waiting for space\n"));
			OSTimeDlyHMSM(0, 0, 0, 100);
		}
	}
	alt_up_rs232_enable_read_interrupt(wifi_dev);
 10047d0:	e0bffe17 	ldw	r2,-8(fp)
 10047d4:	11000017 	ldw	r4,0(r2)
 10047d8:	10229cc0 	call	10229cc <alt_up_rs232_enable_read_interrupt>
}
 10047dc:	e037883a 	mov	sp,fp
 10047e0:	dfc00117 	ldw	ra,4(sp)
 10047e4:	df000017 	ldw	fp,0(sp)
 10047e8:	dec00204 	addi	sp,sp,8
 10047ec:	f800283a 	ret

010047f0 <_ZN11WifiHandler11configEnterEv>:
}

/**
 * Sends the sequence to enter configuration mode on the Xbee wifi module.
 */
void WifiHandler::configEnter() {
 10047f0:	defffd04 	addi	sp,sp,-12
 10047f4:	dfc00215 	stw	ra,8(sp)
 10047f8:	df000115 	stw	fp,4(sp)
 10047fc:	df000104 	addi	fp,sp,4
 1004800:	e13fff15 	stw	r4,-4(fp)
	OSTimeDlyHMSM(0, 0, 1, 0);
 1004804:	0009883a 	mov	r4,zero
 1004808:	000b883a 	mov	r5,zero
 100480c:	01800044 	movi	r6,1
 1004810:	000f883a 	mov	r7,zero
 1004814:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
	write("+++");
 1004818:	e13fff17 	ldw	r4,-4(fp)
 100481c:	014040b4 	movhi	r5,258
 1004820:	2953ab04 	addi	r5,r5,20140
 1004824:	10046fc0 	call	10046fc <_ZN11WifiHandler5writeEPc>
	printf("+++ > ");
 1004828:	010040b4 	movhi	r4,258
 100482c:	2113ac04 	addi	r4,r4,20144
 1004830:	100ed840 	call	100ed84 <printf>
	OSTimeDlyHMSM(0, 0, 2, 0);
 1004834:	0009883a 	mov	r4,zero
 1004838:	000b883a 	mov	r5,zero
 100483c:	01800084 	movi	r6,2
 1004840:	000f883a 	mov	r7,zero
 1004844:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
	configRead();
 1004848:	e13fff17 	ldw	r4,-4(fp)
 100484c:	10046c00 	call	10046c0 <_ZN11WifiHandler10configReadEv>
}
 1004850:	e037883a 	mov	sp,fp
 1004854:	dfc00117 	ldw	ra,4(sp)
 1004858:	df000017 	ldw	fp,0(sp)
 100485c:	dec00204 	addi	sp,sp,8
 1004860:	f800283a 	ret

01004864 <_ZN11WifiHandler8testUartEv>:

/**
 * Tests the UART communications between the board and the wifi module.
 * Sends the configuration command "+++" and expects the response "OK\r".
 */
void WifiHandler::testUart() {
 1004864:	defffd04 	addi	sp,sp,-12
 1004868:	dfc00215 	stw	ra,8(sp)
 100486c:	df000115 	stw	fp,4(sp)
 1004870:	df000104 	addi	fp,sp,4
 1004874:	e13fff15 	stw	r4,-4(fp)
	printf("WifiHandler [test: UART]\n");
 1004878:	010040b4 	movhi	r4,258
 100487c:	2113ae04 	addi	r4,r4,20152
 1004880:	100eec00 	call	100eec0 <puts>
	configEnter();
 1004884:	e13fff17 	ldw	r4,-4(fp)
 1004888:	10047f00 	call	10047f0 <_ZN11WifiHandler11configEnterEv>
}
 100488c:	e037883a 	mov	sp,fp
 1004890:	dfc00117 	ldw	ra,4(sp)
 1004894:	df000017 	ldw	fp,0(sp)
 1004898:	dec00204 	addi	sp,sp,8
 100489c:	f800283a 	ret

010048a0 <_ZN11WifiHandler15configSendStartEPc>:

/**
 * Sends a configuration command to the Xbee wifi module.
 * @param command - the command to send
 */
void WifiHandler::configSendStart(char *command) {
 10048a0:	defffc04 	addi	sp,sp,-16
 10048a4:	dfc00315 	stw	ra,12(sp)
 10048a8:	df000215 	stw	fp,8(sp)
 10048ac:	df000204 	addi	fp,sp,8
 10048b0:	e13ffe15 	stw	r4,-8(fp)
 10048b4:	e17fff15 	stw	r5,-4(fp)
	write(command);
 10048b8:	e13ffe17 	ldw	r4,-8(fp)
 10048bc:	e17fff17 	ldw	r5,-4(fp)
 10048c0:	10046fc0 	call	10046fc <_ZN11WifiHandler5writeEPc>
	write("\r");
 10048c4:	e13ffe17 	ldw	r4,-8(fp)
 10048c8:	014040b4 	movhi	r5,258
 10048cc:	2953aa04 	addi	r5,r5,20136
 10048d0:	10046fc0 	call	10046fc <_ZN11WifiHandler5writeEPc>
	printf("%s > ", command);
 10048d4:	010040b4 	movhi	r4,258
 10048d8:	2113b504 	addi	r4,r4,20180
 10048dc:	e17fff17 	ldw	r5,-4(fp)
 10048e0:	100ed840 	call	100ed84 <printf>
}
 10048e4:	e037883a 	mov	sp,fp
 10048e8:	dfc00117 	ldw	ra,4(sp)
 10048ec:	df000017 	ldw	fp,0(sp)
 10048f0:	dec00204 	addi	sp,sp,8
 10048f4:	f800283a 	ret

010048f8 <_ZN11WifiHandler5readyEv>:

/**
 * Indicates whether the wifi module has connected to the network.
 * @return true if the wifi module is connected
 */
bool WifiHandler::ready() {
 10048f8:	defffb04 	addi	sp,sp,-20
 10048fc:	dfc00415 	stw	ra,16(sp)
 1004900:	df000315 	stw	fp,12(sp)
 1004904:	df000304 	addi	fp,sp,12
 1004908:	e13fff15 	stw	r4,-4(fp)
	configSendStart("ATAI");
 100490c:	e13fff17 	ldw	r4,-4(fp)
 1004910:	014040b4 	movhi	r5,258
 1004914:	2953b704 	addi	r5,r5,20188
 1004918:	10048a00 	call	10048a0 <_ZN11WifiHandler15configSendStartEPc>
	char *response = configReadStart();
 100491c:	e13fff17 	ldw	r4,-4(fp)
 1004920:	10046780 	call	1004678 <_ZN11WifiHandler15configReadStartEv>
 1004924:	e0bffe15 	stw	r2,-8(fp)
	long code = strtol(response, NULL, 16);
 1004928:	e13ffe17 	ldw	r4,-8(fp)
 100492c:	000b883a 	mov	r5,zero
 1004930:	01800404 	movi	r6,16
 1004934:	100f7e40 	call	100f7e4 <strtol>
 1004938:	e0bffd15 	stw	r2,-12(fp)
	free(response);
 100493c:	e13ffe17 	ldw	r4,-8(fp)
 1004940:	100e2ac0 	call	100e2ac <free>
	return code == 0;
 1004944:	e0bffd17 	ldw	r2,-12(fp)
 1004948:	1005003a 	cmpeq	r2,r2,zero
}
 100494c:	e037883a 	mov	sp,fp
 1004950:	dfc00117 	ldw	ra,4(sp)
 1004954:	df000017 	ldw	fp,0(sp)
 1004958:	dec00204 	addi	sp,sp,8
 100495c:	f800283a 	ret

01004960 <_ZN11WifiHandler12waitForReadyEv>:

/**
 * Blocks until the wifi module has connected to the network.
 */
void WifiHandler::waitForReady() {
 1004960:	defffd04 	addi	sp,sp,-12
 1004964:	dfc00215 	stw	ra,8(sp)
 1004968:	df000115 	stw	fp,4(sp)
 100496c:	df000104 	addi	fp,sp,4
 1004970:	e13fff15 	stw	r4,-4(fp)
	while (!ready()) {
 1004974:	00000506 	br	100498c <_ZN11WifiHandler12waitForReadyEv+0x2c>
		OSTimeDlyHMSM(0, 0, 0, 100);
 1004978:	0009883a 	mov	r4,zero
 100497c:	000b883a 	mov	r5,zero
 1004980:	000d883a 	mov	r6,zero
 1004984:	01c01904 	movi	r7,100
 1004988:	10214c00 	call	10214c0 <OSTimeDlyHMSM>

/**
 * Blocks until the wifi module has connected to the network.
 */
void WifiHandler::waitForReady() {
	while (!ready()) {
 100498c:	e13fff17 	ldw	r4,-4(fp)
 1004990:	10048f80 	call	10048f8 <_ZN11WifiHandler5readyEv>
 1004994:	1080005c 	xori	r2,r2,1
 1004998:	10803fcc 	andi	r2,r2,255
 100499c:	1004c03a 	cmpne	r2,r2,zero
 10049a0:	103ff51e 	bne	r2,zero,1004978 <_ZN11WifiHandler12waitForReadyEv+0x18>
		OSTimeDlyHMSM(0, 0, 0, 100);
	};
}
 10049a4:	e037883a 	mov	sp,fp
 10049a8:	dfc00117 	ldw	ra,4(sp)
 10049ac:	df000017 	ldw	fp,0(sp)
 10049b0:	dec00204 	addi	sp,sp,8
 10049b4:	f800283a 	ret

010049b8 <_ZN11WifiHandler10configSendEPc>:
/**
 * Sends a configuration command to the Xbee wifi module,
 * then waits for and prints the response.
 * @param command - the command to send
 */
void WifiHandler::configSend(char *command) {
 10049b8:	defffc04 	addi	sp,sp,-16
 10049bc:	dfc00315 	stw	ra,12(sp)
 10049c0:	df000215 	stw	fp,8(sp)
 10049c4:	df000204 	addi	fp,sp,8
 10049c8:	e13ffe15 	stw	r4,-8(fp)
 10049cc:	e17fff15 	stw	r5,-4(fp)
	configSendStart(command);
 10049d0:	e13ffe17 	ldw	r4,-8(fp)
 10049d4:	e17fff17 	ldw	r5,-4(fp)
 10049d8:	10048a00 	call	10048a0 <_ZN11WifiHandler15configSendStartEPc>
	configRead();
 10049dc:	e13ffe17 	ldw	r4,-8(fp)
 10049e0:	10046c00 	call	10046c0 <_ZN11WifiHandler10configReadEv>
}
 10049e4:	e037883a 	mov	sp,fp
 10049e8:	dfc00117 	ldw	ra,4(sp)
 10049ec:	df000017 	ldw	fp,0(sp)
 10049f0:	dec00204 	addi	sp,sp,8
 10049f4:	f800283a 	ret

010049f8 <_ZN11WifiHandler18setDestinationPortE13WifiSetupType>:
 * Sets the destination port based on the setup type.
 * @param type
 * WIFI_TCP - targets the socket at port 10000
 * WIFI_HTTP - targets the server at port 80
 */
void WifiHandler::setDestinationPort(WifiSetupType type) {
 10049f8:	defffb04 	addi	sp,sp,-20
 10049fc:	dfc00415 	stw	ra,16(sp)
 1004a00:	df000315 	stw	fp,12(sp)
 1004a04:	df000304 	addi	fp,sp,12
 1004a08:	e13ffd15 	stw	r4,-12(fp)
 1004a0c:	e17ffe15 	stw	r5,-8(fp)
	switch (type) {
 1004a10:	e0bffe17 	ldw	r2,-8(fp)
 1004a14:	e0bfff15 	stw	r2,-4(fp)
 1004a18:	e0ffff17 	ldw	r3,-4(fp)
 1004a1c:	1805003a 	cmpeq	r2,r3,zero
 1004a20:	1000041e 	bne	r2,zero,1004a34 <_ZN11WifiHandler18setDestinationPortE13WifiSetupType+0x3c>
 1004a24:	e0ffff17 	ldw	r3,-4(fp)
 1004a28:	18800060 	cmpeqi	r2,r3,1
 1004a2c:	1000061e 	bne	r2,zero,1004a48 <_ZN11WifiHandler18setDestinationPortE13WifiSetupType+0x50>
 1004a30:	00000906 	br	1004a58 <_ZN11WifiHandler18setDestinationPortE13WifiSetupType+0x60>
	case WIFI_TCP: configSend("ATDE2710"); break;	// port 10000 (0x2710)
 1004a34:	e13ffd17 	ldw	r4,-12(fp)
 1004a38:	014040b4 	movhi	r5,258
 1004a3c:	2953b904 	addi	r5,r5,20196
 1004a40:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
 1004a44:	00000406 	br	1004a58 <_ZN11WifiHandler18setDestinationPortE13WifiSetupType+0x60>
	case WIFI_HTTP: configSend("ATDE50"); break; 	// port 80 (0x50)
 1004a48:	e13ffd17 	ldw	r4,-12(fp)
 1004a4c:	014040b4 	movhi	r5,258
 1004a50:	2953bc04 	addi	r5,r5,20208
 1004a54:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	}
}
 1004a58:	e037883a 	mov	sp,fp
 1004a5c:	dfc00117 	ldw	ra,4(sp)
 1004a60:	df000017 	ldw	fp,0(sp)
 1004a64:	dec00204 	addi	sp,sp,8
 1004a68:	f800283a 	ret

01004a6c <_ZN11WifiHandler5setupE13WifiSetupType>:
}

/**
 * Sets the wifi module up to connect to the network.
 */
void WifiHandler::setup(WifiSetupType type) {
 1004a6c:	defffc04 	addi	sp,sp,-16
 1004a70:	dfc00315 	stw	ra,12(sp)
 1004a74:	df000215 	stw	fp,8(sp)
 1004a78:	df000204 	addi	fp,sp,8
 1004a7c:	e13ffe15 	stw	r4,-8(fp)
 1004a80:	e17fff15 	stw	r5,-4(fp)
	printf("WifiHandler [startup: do setup]\n");
 1004a84:	010040b4 	movhi	r4,258
 1004a88:	2113be04 	addi	r4,r4,20216
 1004a8c:	100eec00 	call	100eec0 <puts>
	configEnter();
 1004a90:	e13ffe17 	ldw	r4,-8(fp)
 1004a94:	10047f00 	call	10047f0 <_ZN11WifiHandler11configEnterEv>
	configSend("ATVR");             	// Print firmware version.
 1004a98:	e13ffe17 	ldw	r4,-8(fp)
 1004a9c:	014040b4 	movhi	r5,258
 1004aa0:	2953c604 	addi	r5,r5,20248
 1004aa4:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATIDARCap");        	// Set the target SSID to ARCAP.
 1004aa8:	e13ffe17 	ldw	r4,-8(fp)
 1004aac:	014040b4 	movhi	r5,258
 1004ab0:	2953c804 	addi	r5,r5,20256
 1004ab4:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATEE2");            	// Set the security type to WPA2.
 1004ab8:	e13ffe17 	ldw	r4,-8(fp)
 1004abc:	014040b4 	movhi	r5,258
 1004ac0:	2953cb04 	addi	r5,r5,20268
 1004ac4:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATPKplaythegame");  	// Set the security key.
 1004ac8:	e13ffe17 	ldw	r4,-8(fp)
 1004acc:	014040b4 	movhi	r5,258
 1004ad0:	2953cd04 	addi	r5,r5,20276
 1004ad4:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATAH2");            	// Set the network type to Infrastructure.
 1004ad8:	e13ffe17 	ldw	r4,-8(fp)
 1004adc:	014040b4 	movhi	r5,258
 1004ae0:	2953d104 	addi	r5,r5,20292
 1004ae4:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATIP1");            	// Set the IP protocol to TCP.
 1004ae8:	e13ffe17 	ldw	r4,-8(fp)
 1004aec:	014040b4 	movhi	r5,258
 1004af0:	2953d304 	addi	r5,r5,20300
 1004af4:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATTMff");				// Set the TCP timeout to 2500 ms (0xff * 100 ms).
 1004af8:	e13ffe17 	ldw	r4,-8(fp)
 1004afc:	014040b4 	movhi	r5,258
 1004b00:	2953d504 	addi	r5,r5,20308
 1004b04:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATMA0");            	// Set the IP addressing mode to DHCP.
 1004b08:	e13ffe17 	ldw	r4,-8(fp)
 1004b0c:	014040b4 	movhi	r5,258
 1004b10:	2953d704 	addi	r5,r5,20316
 1004b14:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATDL192.168.0.100");	// Set the destination IP address to ...100 (reserved for server).
 1004b18:	e13ffe17 	ldw	r4,-8(fp)
 1004b1c:	014040b4 	movhi	r5,258
 1004b20:	2953d904 	addi	r5,r5,20324
 1004b24:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	setDestinationPort(type);			// Sets the destination port based on the setup type.
 1004b28:	e13ffe17 	ldw	r4,-8(fp)
 1004b2c:	e17fff17 	ldw	r5,-4(fp)
 1004b30:	10049f80 	call	10049f8 <_ZN11WifiHandler18setDestinationPortE13WifiSetupType>
	waitForReady();
 1004b34:	e13ffe17 	ldw	r4,-8(fp)
 1004b38:	10049600 	call	1004960 <_ZN11WifiHandler12waitForReadyEv>
	configSend("ATMY");             	// Print the IP address.
 1004b3c:	e13ffe17 	ldw	r4,-8(fp)
 1004b40:	014040b4 	movhi	r5,258
 1004b44:	2953de04 	addi	r5,r5,20344
 1004b48:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATWR");             	// Write the settings to non-volatile memory.
 1004b4c:	e13ffe17 	ldw	r4,-8(fp)
 1004b50:	014040b4 	movhi	r5,258
 1004b54:	2953e004 	addi	r5,r5,20352
 1004b58:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATCN");             	// Exit command mode.
 1004b5c:	e13ffe17 	ldw	r4,-8(fp)
 1004b60:	014040b4 	movhi	r5,258
 1004b64:	2953e204 	addi	r5,r5,20360
 1004b68:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
}
 1004b6c:	e037883a 	mov	sp,fp
 1004b70:	dfc00117 	ldw	ra,4(sp)
 1004b74:	df000017 	ldw	fp,0(sp)
 1004b78:	dec00204 	addi	sp,sp,8
 1004b7c:	f800283a 	ret

01004b80 <_ZN11WifiHandler6statusEv>:
// STARTUP

/**
 * Prints the current status of the wifi module.
 */
void WifiHandler::status() {
 1004b80:	defffd04 	addi	sp,sp,-12
 1004b84:	dfc00215 	stw	ra,8(sp)
 1004b88:	df000115 	stw	fp,4(sp)
 1004b8c:	df000104 	addi	fp,sp,4
 1004b90:	e13fff15 	stw	r4,-4(fp)
	printf("WifiHandler [startup: show status]\n");
 1004b94:	010040b4 	movhi	r4,258
 1004b98:	2113e404 	addi	r4,r4,20368
 1004b9c:	100eec00 	call	100eec0 <puts>
	configEnter();       	// Enter command mode.
 1004ba0:	e13fff17 	ldw	r4,-4(fp)
 1004ba4:	10047f00 	call	10047f0 <_ZN11WifiHandler11configEnterEv>
	configSend("ATVR");  	// Print firmware version.
 1004ba8:	e13fff17 	ldw	r4,-4(fp)
 1004bac:	014040b4 	movhi	r5,258
 1004bb0:	2953c604 	addi	r5,r5,20248
 1004bb4:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATID");  	// Print the target SSID.
 1004bb8:	e13fff17 	ldw	r4,-4(fp)
 1004bbc:	014040b4 	movhi	r5,258
 1004bc0:	2953ed04 	addi	r5,r5,20404
 1004bc4:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATEE");  	// Print the security type (0 = None, 1 = WPA, 2 = WPA2, 3 = WEP).
 1004bc8:	e13fff17 	ldw	r4,-4(fp)
 1004bcc:	014040b4 	movhi	r5,258
 1004bd0:	2953ef04 	addi	r5,r5,20412
 1004bd4:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATAH");  	// Print the network type (0 = Joiner, 1 = Creator, 2 = Infrastructure).
 1004bd8:	e13fff17 	ldw	r4,-4(fp)
 1004bdc:	014040b4 	movhi	r5,258
 1004be0:	2953f104 	addi	r5,r5,20420
 1004be4:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATIP");  	// Print the IP protocol (0 = UDP, 1 = TCP).
 1004be8:	e13fff17 	ldw	r4,-4(fp)
 1004bec:	014040b4 	movhi	r5,258
 1004bf0:	2953f304 	addi	r5,r5,20428
 1004bf4:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATTM");		// Read the TCP timeout (hex, multiply by 100 ms).
 1004bf8:	e13fff17 	ldw	r4,-4(fp)
 1004bfc:	014040b4 	movhi	r5,258
 1004c00:	2953f504 	addi	r5,r5,20436
 1004c04:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATMA");  	// Print the IP addressing mode (0 = DHCP, 1 = Static).
 1004c08:	e13fff17 	ldw	r4,-4(fp)
 1004c0c:	014040b4 	movhi	r5,258
 1004c10:	2953f704 	addi	r5,r5,20444
 1004c14:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATDL");  	// Print the destination IP address. (hex)
 1004c18:	e13fff17 	ldw	r4,-4(fp)
 1004c1c:	014040b4 	movhi	r5,258
 1004c20:	2953f904 	addi	r5,r5,20452
 1004c24:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATDE");  	// Print the destination port number. (hex)
 1004c28:	e13fff17 	ldw	r4,-4(fp)
 1004c2c:	014040b4 	movhi	r5,258
 1004c30:	2953fb04 	addi	r5,r5,20460
 1004c34:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	waitForReady();
 1004c38:	e13fff17 	ldw	r4,-4(fp)
 1004c3c:	10049600 	call	1004960 <_ZN11WifiHandler12waitForReadyEv>
	configSend("ATMY");  	// Print the IP address.
 1004c40:	e13fff17 	ldw	r4,-4(fp)
 1004c44:	014040b4 	movhi	r5,258
 1004c48:	2953de04 	addi	r5,r5,20344
 1004c4c:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
	configSend("ATCN");  	// Exit command mode.
 1004c50:	e13fff17 	ldw	r4,-4(fp)
 1004c54:	014040b4 	movhi	r5,258
 1004c58:	2953e204 	addi	r5,r5,20360
 1004c5c:	10049b80 	call	10049b8 <_ZN11WifiHandler10configSendEPc>
}
 1004c60:	e037883a 	mov	sp,fp
 1004c64:	dfc00117 	ldw	ra,4(sp)
 1004c68:	df000017 	ldw	fp,0(sp)
 1004c6c:	dec00204 	addi	sp,sp,8
 1004c70:	f800283a 	ret

01004c74 <_ZN11WifiHandler6unlockEv>:

/**
 * Releases the lock on the wifi connection.
 * Must be called at the end of any method calling lock().
 */
void WifiHandler::unlock() {
 1004c74:	defffd04 	addi	sp,sp,-12
 1004c78:	dfc00215 	stw	ra,8(sp)
 1004c7c:	df000115 	stw	fp,4(sp)
 1004c80:	df000104 	addi	fp,sp,4
 1004c84:	e13fff15 	stw	r4,-4(fp)
	OSSemPost(wifi_lock);
 1004c88:	e0bfff17 	ldw	r2,-4(fp)
 1004c8c:	11000117 	ldw	r4,4(r2)
 1004c90:	101f5d80 	call	101f5d8 <OSSemPost>
}
 1004c94:	e037883a 	mov	sp,fp
 1004c98:	dfc00117 	ldw	ra,4(sp)
 1004c9c:	df000017 	ldw	fp,0(sp)
 1004ca0:	dec00204 	addi	sp,sp,8
 1004ca4:	f800283a 	ret

01004ca8 <_ZN11WifiHandler4lockEv>:
 * Waits to acquire the lock on the wifi connection.
 * Since we are using transparent mode, there can only be one connection at a time.
 * Methods calling write() or readUntil() must acquire this lock first.
 * @return true if the lock was acquired
 */
bool WifiHandler::lock() {
 1004ca8:	defffc04 	addi	sp,sp,-16
 1004cac:	dfc00315 	stw	ra,12(sp)
 1004cb0:	df000215 	stw	fp,8(sp)
 1004cb4:	df000204 	addi	fp,sp,8
 1004cb8:	e13fff15 	stw	r4,-4(fp)
	INT8U status;
	OSSemPend(wifi_lock, WIFI_HANDLER_LOCK_TIMEOUT_TICKS, &status);
 1004cbc:	e0bfff17 	ldw	r2,-4(fp)
 1004cc0:	11000117 	ldw	r4,4(r2)
 1004cc4:	0140fa04 	movi	r5,1000
 1004cc8:	e1bffe04 	addi	r6,fp,-8
 1004ccc:	101f1e00 	call	101f1e0 <OSSemPend>
	return (status == OS_NO_ERR);
 1004cd0:	e0bffe03 	ldbu	r2,-8(fp)
 1004cd4:	10803fcc 	andi	r2,r2,255
 1004cd8:	1005003a 	cmpeq	r2,r2,zero
}
 1004cdc:	e037883a 	mov	sp,fp
 1004ce0:	dfc00117 	ldw	ra,4(sp)
 1004ce4:	df000017 	ldw	fp,0(sp)
 1004ce8:	dec00204 	addi	sp,sp,8
 1004cec:	f800283a 	ret

01004cf0 <_ZN11WifiHandler7httpGetEPc>:
/**
 * Sends an HTTP GET request for the given URL.
 * @param url - the URL specifying the resource to request
 * @return the response to the request
 */
char *WifiHandler::httpGet(char *url) {
 1004cf0:	deffd904 	addi	sp,sp,-156
 1004cf4:	dfc02615 	stw	ra,152(sp)
 1004cf8:	df002515 	stw	fp,148(sp)
 1004cfc:	df002504 	addi	fp,sp,148
 1004d00:	e13ffd15 	stw	r4,-12(fp)
 1004d04:	e17ffe15 	stw	r5,-8(fp)
	if (lock()) {
 1004d08:	e13ffd17 	ldw	r4,-12(fp)
 1004d0c:	1004ca80 	call	1004ca8 <_ZN11WifiHandler4lockEv>
 1004d10:	10803fcc 	andi	r2,r2,255
 1004d14:	1005003a 	cmpeq	r2,r2,zero
 1004d18:	10001b1e 	bne	r2,zero,1004d88 <_ZN11WifiHandler7httpGetEPc+0x98>
		char request[WIFI_HTTP_REQUEST_MAX_LENGTH];
		snprintf(request, WIFI_HTTP_REQUEST_MAX_LENGTH,
				"GET %s HTTP/1.1\r\n"
				"Host: surface\r\n"
				"Content-Length: 0\r\n"
				"\r\n", url);
 1004d1c:	e13fdd04 	addi	r4,fp,-140
 1004d20:	01402004 	movi	r5,128
 1004d24:	018040b4 	movhi	r6,258
 1004d28:	3193fd04 	addi	r6,r6,20468
 1004d2c:	e1fffe17 	ldw	r7,-8(fp)
 1004d30:	100f2940 	call	100f294 <snprintf>
		write(request);
 1004d34:	e17fdd04 	addi	r5,fp,-140
 1004d38:	e13ffd17 	ldw	r4,-12(fp)
 1004d3c:	10046fc0 	call	10046fc <_ZN11WifiHandler5writeEPc>
		WIFIHANDLER_HTTP_LOG(printf("\n%s", request));
 1004d40:	e17fdd04 	addi	r5,fp,-140
 1004d44:	010040b4 	movhi	r4,258
 1004d48:	21140b04 	addi	r4,r4,20524
 1004d4c:	100ed840 	call	100ed84 <printf>
		char *response = readUntil("</html>");
 1004d50:	e13ffd17 	ldw	r4,-12(fp)
 1004d54:	014040b4 	movhi	r5,258
 1004d58:	29540c04 	addi	r5,r5,20528
 1004d5c:	10045080 	call	1004508 <_ZN11WifiHandler9readUntilEPc>
 1004d60:	e0bfdc15 	stw	r2,-144(fp)
		WIFIHANDLER_HTTP_LOG(printf("%s", response));
 1004d64:	010040b4 	movhi	r4,258
 1004d68:	21140e04 	addi	r4,r4,20536
 1004d6c:	e17fdc17 	ldw	r5,-144(fp)
 1004d70:	100ed840 	call	100ed84 <printf>
		unlock();
 1004d74:	e13ffd17 	ldw	r4,-12(fp)
 1004d78:	1004c740 	call	1004c74 <_ZN11WifiHandler6unlockEv>
		return response;
 1004d7c:	e0bfdc17 	ldw	r2,-144(fp)
 1004d80:	e0bfff15 	stw	r2,-4(fp)
 1004d84:	00000a06 	br	1004db0 <_ZN11WifiHandler7httpGetEPc+0xc0>
	} else {
		WIFIHANDLER_HTTP_LOG(printf("WifiHandler [error: failed to acquire lock]\n"));
 1004d88:	010040b4 	movhi	r4,258
 1004d8c:	21140f04 	addi	r4,r4,20540
 1004d90:	100eec00 	call	100eec0 <puts>
		// Return an empty message.
		char *response = (char *)malloc(sizeof(char));
 1004d94:	01000044 	movi	r4,1
 1004d98:	100e2c00 	call	100e2c0 <malloc>
 1004d9c:	e0bfdb15 	stw	r2,-148(fp)
		response[0] = '\0';
 1004da0:	e0bfdb17 	ldw	r2,-148(fp)
 1004da4:	10000005 	stb	zero,0(r2)
		return response;
 1004da8:	e0bfdb17 	ldw	r2,-148(fp)
 1004dac:	e0bfff15 	stw	r2,-4(fp)
 1004db0:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 1004db4:	e037883a 	mov	sp,fp
 1004db8:	dfc00117 	ldw	ra,4(sp)
 1004dbc:	df000017 	ldw	fp,0(sp)
 1004dc0:	dec00204 	addi	sp,sp,8
 1004dc4:	f800283a 	ret

01004dc8 <_Z27wifi_handler_http_test_taskPv>:
 * This test sends a GET request to an HTTP server and prints the response.
 * Before running this, make sure the computer serving /arcap/infrared/hit.php
 * is connecting to the ARCap network.
 * To view output enable WIFIHANDLER_HTTP_DEBUG in Debug.h.
 */
void wifi_handler_http_test_task(void *pdata) {
 1004dc8:	defffc04 	addi	sp,sp,-16
 1004dcc:	dfc00315 	stw	ra,12(sp)
 1004dd0:	df000215 	stw	fp,8(sp)
 1004dd4:	df000204 	addi	fp,sp,8
 1004dd8:	e13fff15 	stw	r4,-4(fp)
	printf("WifiHandler [task: test, status: start]\n");
 1004ddc:	010040b4 	movhi	r4,258
 1004de0:	21141a04 	addi	r4,r4,20584
 1004de4:	100eec00 	call	100eec0 <puts>
	wifi->setup(WIFI_HTTP);
 1004de8:	008040f4 	movhi	r2,259
 1004dec:	10a6f804 	addi	r2,r2,-25632
 1004df0:	11000017 	ldw	r4,0(r2)
 1004df4:	01400044 	movi	r5,1
 1004df8:	1004a6c0 	call	1004a6c <_ZN11WifiHandler5setupE13WifiSetupType>
	//	wifi->status();
	while (true) {
		char *response = wifi->httpGet("/arcap/infrared/hit.php");
 1004dfc:	008040f4 	movhi	r2,259
 1004e00:	10a6f804 	addi	r2,r2,-25632
 1004e04:	11000017 	ldw	r4,0(r2)
 1004e08:	014040b4 	movhi	r5,258
 1004e0c:	29542404 	addi	r5,r5,20624
 1004e10:	1004cf00 	call	1004cf0 <_ZN11WifiHandler7httpGetEPc>
 1004e14:	e0bffe15 	stw	r2,-8(fp)
		free(response);
 1004e18:	e13ffe17 	ldw	r4,-8(fp)
 1004e1c:	100e2ac0 	call	100e2ac <free>
		OSTimeDlyHMSM(0, 0, 10, 0);
 1004e20:	0009883a 	mov	r4,zero
 1004e24:	000b883a 	mov	r5,zero
 1004e28:	01800284 	movi	r6,10
 1004e2c:	000f883a 	mov	r7,zero
 1004e30:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
 */
void wifi_handler_http_test_task(void *pdata) {
	printf("WifiHandler [task: test, status: start]\n");
	wifi->setup(WIFI_HTTP);
	//	wifi->status();
	while (true) {
 1004e34:	003ff106 	br	1004dfc <_Z27wifi_handler_http_test_taskPv+0x34>

01004e38 <_ZN11WifiHandler10tcpReceiveEv>:
/**
 * Waits for the next TCP message from the server.
 * The message is terminated by a newline '\n'.
 * @return the message received
 */
char *WifiHandler::tcpReceive() {
 1004e38:	defffa04 	addi	sp,sp,-24
 1004e3c:	dfc00515 	stw	ra,20(sp)
 1004e40:	df000415 	stw	fp,16(sp)
 1004e44:	df000404 	addi	fp,sp,16
 1004e48:	e13ffe15 	stw	r4,-8(fp)
	if (lock()) {
 1004e4c:	e13ffe17 	ldw	r4,-8(fp)
 1004e50:	1004ca80 	call	1004ca8 <_ZN11WifiHandler4lockEv>
 1004e54:	10803fcc 	andi	r2,r2,255
 1004e58:	1005003a 	cmpeq	r2,r2,zero
 1004e5c:	10000e1e 	bne	r2,zero,1004e98 <_ZN11WifiHandler10tcpReceiveEv+0x60>
		char *message = readUntil("\n");
 1004e60:	e13ffe17 	ldw	r4,-8(fp)
 1004e64:	014040b4 	movhi	r5,258
 1004e68:	29542a04 	addi	r5,r5,20648
 1004e6c:	10045080 	call	1004508 <_ZN11WifiHandler9readUntilEPc>
 1004e70:	e0bffd15 	stw	r2,-12(fp)
		WIFIHANDLER_TCP_LOG(printf("[WifiHandler] receive: %s", message));
 1004e74:	010040b4 	movhi	r4,258
 1004e78:	21142b04 	addi	r4,r4,20652
 1004e7c:	e17ffd17 	ldw	r5,-12(fp)
 1004e80:	100ed840 	call	100ed84 <printf>
		unlock();
 1004e84:	e13ffe17 	ldw	r4,-8(fp)
 1004e88:	1004c740 	call	1004c74 <_ZN11WifiHandler6unlockEv>
		return message;
 1004e8c:	e0bffd17 	ldw	r2,-12(fp)
 1004e90:	e0bfff15 	stw	r2,-4(fp)
 1004e94:	00000a06 	br	1004ec0 <_ZN11WifiHandler10tcpReceiveEv+0x88>
	} else {
		WIFIHANDLER_TCP_LOG(printf("WifiHandler [error: failed to acquire lock]\n"));
 1004e98:	010040b4 	movhi	r4,258
 1004e9c:	21140f04 	addi	r4,r4,20540
 1004ea0:	100eec00 	call	100eec0 <puts>
		// Return an empty message.
		char *response = (char *)malloc(sizeof(char));
 1004ea4:	01000044 	movi	r4,1
 1004ea8:	100e2c00 	call	100e2c0 <malloc>
 1004eac:	e0bffc15 	stw	r2,-16(fp)
		response[0] = '\0';
 1004eb0:	e0bffc17 	ldw	r2,-16(fp)
 1004eb4:	10000005 	stb	zero,0(r2)
		return response;
 1004eb8:	e0bffc17 	ldw	r2,-16(fp)
 1004ebc:	e0bfff15 	stw	r2,-4(fp)
 1004ec0:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 1004ec4:	e037883a 	mov	sp,fp
 1004ec8:	dfc00117 	ldw	ra,4(sp)
 1004ecc:	df000017 	ldw	fp,0(sp)
 1004ed0:	dec00204 	addi	sp,sp,8
 1004ed4:	f800283a 	ret

01004ed8 <_ZN11WifiHandler7tcpSendEPcS0_>:
/**
 * Sends the given TCP message to the server.
 * @param message the message to send
 * @param stop the string marking the end of the message, such as a newline "\n"
 */
void WifiHandler::tcpSend(char *message, char *stop) {
 1004ed8:	defffb04 	addi	sp,sp,-20
 1004edc:	dfc00415 	stw	ra,16(sp)
 1004ee0:	df000315 	stw	fp,12(sp)
 1004ee4:	df000304 	addi	fp,sp,12
 1004ee8:	e13ffd15 	stw	r4,-12(fp)
 1004eec:	e17ffe15 	stw	r5,-8(fp)
 1004ef0:	e1bfff15 	stw	r6,-4(fp)
	if (lock()) {
 1004ef4:	e13ffd17 	ldw	r4,-12(fp)
 1004ef8:	1004ca80 	call	1004ca8 <_ZN11WifiHandler4lockEv>
 1004efc:	10803fcc 	andi	r2,r2,255
 1004f00:	1005003a 	cmpeq	r2,r2,zero
 1004f04:	10000e1e 	bne	r2,zero,1004f40 <_ZN11WifiHandler7tcpSendEPcS0_+0x68>
		WIFIHANDLER_TCP_LOG(printf("[WifiHandler] send: %s%s", message, stop));
 1004f08:	010040b4 	movhi	r4,258
 1004f0c:	21143204 	addi	r4,r4,20680
 1004f10:	e17ffe17 	ldw	r5,-8(fp)
 1004f14:	e1bfff17 	ldw	r6,-4(fp)
 1004f18:	100ed840 	call	100ed84 <printf>
		write(message);
 1004f1c:	e13ffd17 	ldw	r4,-12(fp)
 1004f20:	e17ffe17 	ldw	r5,-8(fp)
 1004f24:	10046fc0 	call	10046fc <_ZN11WifiHandler5writeEPc>
		write(stop);
 1004f28:	e13ffd17 	ldw	r4,-12(fp)
 1004f2c:	e17fff17 	ldw	r5,-4(fp)
 1004f30:	10046fc0 	call	10046fc <_ZN11WifiHandler5writeEPc>
		unlock();
 1004f34:	e13ffd17 	ldw	r4,-12(fp)
 1004f38:	1004c740 	call	1004c74 <_ZN11WifiHandler6unlockEv>
 1004f3c:	00000306 	br	1004f4c <_ZN11WifiHandler7tcpSendEPcS0_+0x74>
	} else {
		WIFIHANDLER_TCP_LOG(printf("WifiHandler [error: failed to acquire lock]\n"));
 1004f40:	010040b4 	movhi	r4,258
 1004f44:	21140f04 	addi	r4,r4,20540
 1004f48:	100eec00 	call	100eec0 <puts>
	}
}
 1004f4c:	e037883a 	mov	sp,fp
 1004f50:	dfc00117 	ldw	ra,4(sp)
 1004f54:	df000017 	ldw	fp,0(sp)
 1004f58:	dec00204 	addi	sp,sp,8
 1004f5c:	f800283a 	ret

01004f60 <_ZN11WifiHandler7tcpTestEv>:

/**
 * Tests network communications.
 * Sends a message to the PHP socket server, then prints the response.
 */
void WifiHandler::tcpTest() {
 1004f60:	defffc04 	addi	sp,sp,-16
 1004f64:	dfc00315 	stw	ra,12(sp)
 1004f68:	df000215 	stw	fp,8(sp)
 1004f6c:	df000204 	addi	fp,sp,8
 1004f70:	e13fff15 	stw	r4,-4(fp)
	wifi->tcpSend("ih", "\n");
 1004f74:	008040f4 	movhi	r2,259
 1004f78:	10a6f804 	addi	r2,r2,-25632
 1004f7c:	11000017 	ldw	r4,0(r2)
 1004f80:	014040b4 	movhi	r5,258
 1004f84:	29543904 	addi	r5,r5,20708
 1004f88:	018040b4 	movhi	r6,258
 1004f8c:	31942a04 	addi	r6,r6,20648
 1004f90:	1004ed80 	call	1004ed8 <_ZN11WifiHandler7tcpSendEPcS0_>
	char *response = wifi->tcpReceive();
 1004f94:	008040f4 	movhi	r2,259
 1004f98:	10a6f804 	addi	r2,r2,-25632
 1004f9c:	11000017 	ldw	r4,0(r2)
 1004fa0:	1004e380 	call	1004e38 <_ZN11WifiHandler10tcpReceiveEv>
 1004fa4:	e0bffe15 	stw	r2,-8(fp)
	free(response);
 1004fa8:	e13ffe17 	ldw	r4,-8(fp)
 1004fac:	100e2ac0 	call	100e2ac <free>
	OSTimeDlyHMSM(0, 0, 3, 0);
 1004fb0:	0009883a 	mov	r4,zero
 1004fb4:	000b883a 	mov	r5,zero
 1004fb8:	018000c4 	movi	r6,3
 1004fbc:	000f883a 	mov	r7,zero
 1004fc0:	10214c00 	call	10214c0 <OSTimeDlyHMSM>
}
 1004fc4:	e037883a 	mov	sp,fp
 1004fc8:	dfc00117 	ldw	ra,4(sp)
 1004fcc:	df000017 	ldw	fp,0(sp)
 1004fd0:	dec00204 	addi	sp,sp,8
 1004fd4:	f800283a 	ret

01004fd8 <_ZN11WifiHandler10tcpConnectEv>:
/**
 * Connects to the server socket.
 * This method sends the rover identification command r(id), where (id) is ROVER_ID,
 * and waits until it receives MESSAGE_OK.
 */
void WifiHandler::tcpConnect() {
 1004fd8:	defffc04 	addi	sp,sp,-16
 1004fdc:	dfc00315 	stw	ra,12(sp)
 1004fe0:	df000215 	stw	fp,8(sp)
 1004fe4:	df000204 	addi	fp,sp,8
 1004fe8:	e13fff15 	stw	r4,-4(fp)
	char *response;
	do {
		WIFIHANDLER_TCP_LOG(printf("WifiHandler [connect, id: %s]\n", ROVER_ID));
 1004fec:	010040b4 	movhi	r4,258
 1004ff0:	21143a04 	addi	r4,r4,20712
 1004ff4:	014040b4 	movhi	r5,258
 1004ff8:	29544204 	addi	r5,r5,20744
 1004ffc:	100ed840 	call	100ed84 <printf>
		tcpSend(ROVER_ID, "\n");
 1005000:	e13fff17 	ldw	r4,-4(fp)
 1005004:	014040b4 	movhi	r5,258
 1005008:	29544204 	addi	r5,r5,20744
 100500c:	018040b4 	movhi	r6,258
 1005010:	31942a04 	addi	r6,r6,20648
 1005014:	1004ed80 	call	1004ed8 <_ZN11WifiHandler7tcpSendEPcS0_>
		response = tcpReceive();
 1005018:	e13fff17 	ldw	r4,-4(fp)
 100501c:	1004e380 	call	1004e38 <_ZN11WifiHandler10tcpReceiveEv>
 1005020:	e0bffe15 	stw	r2,-8(fp)
		WIFIHANDLER_TCP_LOG(printf("WifiHandler [connect, status: %s]\n", response));
 1005024:	010040b4 	movhi	r4,258
 1005028:	21144304 	addi	r4,r4,20748
 100502c:	e17ffe17 	ldw	r5,-8(fp)
 1005030:	100ed840 	call	100ed84 <printf>
 * This method sends the rover identification command r(id), where (id) is ROVER_ID,
 * and waits until it receives MESSAGE_OK.
 */
void WifiHandler::tcpConnect() {
	char *response;
	do {
 1005034:	e13ffe17 	ldw	r4,-8(fp)
 1005038:	014040b4 	movhi	r5,258
 100503c:	29544c04 	addi	r5,r5,20784
 1005040:	018000c4 	movi	r6,3
 1005044:	100f4780 	call	100f478 <strncmp>
 1005048:	1004c03a 	cmpne	r2,r2,zero
 100504c:	103fe71e 	bne	r2,zero,1004fec <_ZN11WifiHandler10tcpConnectEv+0x14>
		WIFIHANDLER_TCP_LOG(printf("WifiHandler [connect, id: %s]\n", ROVER_ID));
		tcpSend(ROVER_ID, "\n");
		response = tcpReceive();
		WIFIHANDLER_TCP_LOG(printf("WifiHandler [connect, status: %s]\n", response));
	} while (strncmp(response, MESSAGE_OK, MESSAGE_OK_LENGTH) != 0);
}
 1005050:	e037883a 	mov	sp,fp
 1005054:	dfc00117 	ldw	ra,4(sp)
 1005058:	df000017 	ldw	fp,0(sp)
 100505c:	dec00204 	addi	sp,sp,8
 1005060:	f800283a 	ret

01005064 <_Z26wifi_handler_tcp_test_taskPv>:
 * This test sends messages to a PHP echo server and prints the response.
 * Before running this, first start the echo server by visiting 192.168.0.100/arcap/socket.php
 * from a browser on the ARCap network.
 * To view output enable WIFIHANDLER_TCP_DEBUG in Debug.h.
 */
void wifi_handler_tcp_test_task(void *pdata) {
 1005064:	defffd04 	addi	sp,sp,-12
 1005068:	dfc00215 	stw	ra,8(sp)
 100506c:	df000115 	stw	fp,4(sp)
 1005070:	df000104 	addi	fp,sp,4
 1005074:	e13fff15 	stw	r4,-4(fp)
	printf("WifiHandler [task: socket test, status: start]\n");
 1005078:	010040b4 	movhi	r4,258
 100507c:	21144d04 	addi	r4,r4,20788
 1005080:	100eec00 	call	100eec0 <puts>
	// Setup the wifi module for TCP.
	//	wifi->setup(WIFI_TCP);
	wifi->status();
 1005084:	008040f4 	movhi	r2,259
 1005088:	10a6f804 	addi	r2,r2,-25632
 100508c:	11000017 	ldw	r4,0(r2)
 1005090:	1004b800 	call	1004b80 <_ZN11WifiHandler6statusEv>
	// Connect to the remote server.
	wifi->tcpConnect();
 1005094:	008040f4 	movhi	r2,259
 1005098:	10a6f804 	addi	r2,r2,-25632
 100509c:	11000017 	ldw	r4,0(r2)
 10050a0:	1004fd80 	call	1004fd8 <_ZN11WifiHandler10tcpConnectEv>
	while (true) {
		wifi->tcpTest();
 10050a4:	008040f4 	movhi	r2,259
 10050a8:	10a6f804 	addi	r2,r2,-25632
 10050ac:	11000017 	ldw	r4,0(r2)
 10050b0:	1004f600 	call	1004f60 <_ZN11WifiHandler7tcpTestEv>
	// Setup the wifi module for TCP.
	//	wifi->setup(WIFI_TCP);
	wifi->status();
	// Connect to the remote server.
	wifi->tcpConnect();
	while (true) {
 10050b4:	003ffb06 	br	10050a4 <_Z26wifi_handler_tcp_test_taskPv+0x40>

010050b8 <_ZN11WifiHandlerC1Ev>:
/**
 * Creates a new wifi handler.
 * @throw UARTOpenException if the handler cannot open the UART device used to talk to the wifi module
 * @throw SemCreateException if the handler cannot create a semaphore used to control access to the wifi connection
 */
WifiHandler::WifiHandler() {
 10050b8:	defffc04 	addi	sp,sp,-16
 10050bc:	dfc00315 	stw	ra,12(sp)
 10050c0:	df000215 	stw	fp,8(sp)
 10050c4:	dc000115 	stw	r16,4(sp)
 10050c8:	df000104 	addi	fp,sp,4
 10050cc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_WIFI_RESET_N_BASE, 1);
 10050d0:	00c08034 	movhi	r3,512
 10050d4:	18c41804 	addi	r3,r3,4192
 10050d8:	00800044 	movi	r2,1
 10050dc:	18800035 	stwio	r2,0(r3)
	wifi_dev = alt_up_rs232_open_dev(UART_WIFI_NAME);
 10050e0:	010040b4 	movhi	r4,258
 10050e4:	21145904 	addi	r4,r4,20836
 10050e8:	1022d240 	call	1022d24 <alt_up_rs232_open_dev>
 10050ec:	1007883a 	mov	r3,r2
 10050f0:	e0bfff17 	ldw	r2,-4(fp)
 10050f4:	10c00015 	stw	r3,0(r2)
	wifi_lock = OSSemCreate(1);
 10050f8:	01000044 	movi	r4,1
 10050fc:	101ee2c0 	call	101ee2c <OSSemCreate>
 1005100:	1007883a 	mov	r3,r2
 1005104:	e0bfff17 	ldw	r2,-4(fp)
 1005108:	10c00115 	stw	r3,4(r2)
	if (wifi_dev == NULL) {
 100510c:	e0bfff17 	ldw	r2,-4(fp)
 1005110:	10800017 	ldw	r2,0(r2)
 1005114:	1004c03a 	cmpne	r2,r2,zero
 1005118:	10000e1e 	bne	r2,zero,1005154 <_ZN11WifiHandlerC1Ev+0x9c>
		throw new UARTOpenException();
 100511c:	01000104 	movi	r4,4
 1005120:	100dbf80 	call	100dbf8 <_Znwm>
 1005124:	1021883a 	mov	r16,r2
 1005128:	8009883a 	mov	r4,r16
 100512c:	1001cf00 	call	1001cf0 <_ZN17UARTOpenExceptionC1Ev>
 1005130:	01000104 	movi	r4,4
 1005134:	100da700 	call	100da70 <__cxa_allocate_exception>
 1005138:	1009883a 	mov	r4,r2
 100513c:	2005883a 	mov	r2,r4
 1005140:	14000015 	stw	r16,0(r2)
 1005144:	014040b4 	movhi	r5,258
 1005148:	29534504 	addi	r5,r5,19732
 100514c:	000d883a 	mov	r6,zero
 1005150:	100d6e80 	call	100d6e8 <__cxa_throw>
	} if (wifi_lock == NULL) {
 1005154:	e0bfff17 	ldw	r2,-4(fp)
 1005158:	10800117 	ldw	r2,4(r2)
 100515c:	1004c03a 	cmpne	r2,r2,zero
 1005160:	10000e1e 	bne	r2,zero,100519c <_ZN11WifiHandlerC1Ev+0xe4>
		throw new SemCreateException();
 1005164:	01000104 	movi	r4,4
 1005168:	100dbf80 	call	100dbf8 <_Znwm>
 100516c:	1021883a 	mov	r16,r2
 1005170:	8009883a 	mov	r4,r16
 1005174:	10052d80 	call	10052d8 <_ZN18SemCreateExceptionC1Ev>
 1005178:	01000104 	movi	r4,4
 100517c:	100da700 	call	100da70 <__cxa_allocate_exception>
 1005180:	1009883a 	mov	r4,r2
 1005184:	2005883a 	mov	r2,r4
 1005188:	14000015 	stw	r16,0(r2)
 100518c:	014040b4 	movhi	r5,258
 1005190:	29545d04 	addi	r5,r5,20852
 1005194:	000d883a 	mov	r6,zero
 1005198:	100d6e80 	call	100d6e8 <__cxa_throw>
	}
}
 100519c:	e037883a 	mov	sp,fp
 10051a0:	dfc00217 	ldw	ra,8(sp)
 10051a4:	df000117 	ldw	fp,4(sp)
 10051a8:	dc000017 	ldw	r16,0(sp)
 10051ac:	dec00304 	addi	sp,sp,12
 10051b0:	f800283a 	ret

010051b4 <_ZN11WifiHandlerC2Ev>:
/**
 * Creates a new wifi handler.
 * @throw UARTOpenException if the handler cannot open the UART device used to talk to the wifi module
 * @throw SemCreateException if the handler cannot create a semaphore used to control access to the wifi connection
 */
WifiHandler::WifiHandler() {
 10051b4:	defffc04 	addi	sp,sp,-16
 10051b8:	dfc00315 	stw	ra,12(sp)
 10051bc:	df000215 	stw	fp,8(sp)
 10051c0:	dc000115 	stw	r16,4(sp)
 10051c4:	df000104 	addi	fp,sp,4
 10051c8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_WIFI_RESET_N_BASE, 1);
 10051cc:	00c08034 	movhi	r3,512
 10051d0:	18c41804 	addi	r3,r3,4192
 10051d4:	00800044 	movi	r2,1
 10051d8:	18800035 	stwio	r2,0(r3)
	wifi_dev = alt_up_rs232_open_dev(UART_WIFI_NAME);
 10051dc:	010040b4 	movhi	r4,258
 10051e0:	21145904 	addi	r4,r4,20836
 10051e4:	1022d240 	call	1022d24 <alt_up_rs232_open_dev>
 10051e8:	1007883a 	mov	r3,r2
 10051ec:	e0bfff17 	ldw	r2,-4(fp)
 10051f0:	10c00015 	stw	r3,0(r2)
	wifi_lock = OSSemCreate(1);
 10051f4:	01000044 	movi	r4,1
 10051f8:	101ee2c0 	call	101ee2c <OSSemCreate>
 10051fc:	1007883a 	mov	r3,r2
 1005200:	e0bfff17 	ldw	r2,-4(fp)
 1005204:	10c00115 	stw	r3,4(r2)
	if (wifi_dev == NULL) {
 1005208:	e0bfff17 	ldw	r2,-4(fp)
 100520c:	10800017 	ldw	r2,0(r2)
 1005210:	1004c03a 	cmpne	r2,r2,zero
 1005214:	10000e1e 	bne	r2,zero,1005250 <_ZN11WifiHandlerC2Ev+0x9c>
		throw new UARTOpenException();
 1005218:	01000104 	movi	r4,4
 100521c:	100dbf80 	call	100dbf8 <_Znwm>
 1005220:	1021883a 	mov	r16,r2
 1005224:	8009883a 	mov	r4,r16
 1005228:	1001cf00 	call	1001cf0 <_ZN17UARTOpenExceptionC1Ev>
 100522c:	01000104 	movi	r4,4
 1005230:	100da700 	call	100da70 <__cxa_allocate_exception>
 1005234:	1009883a 	mov	r4,r2
 1005238:	2005883a 	mov	r2,r4
 100523c:	14000015 	stw	r16,0(r2)
 1005240:	014040b4 	movhi	r5,258
 1005244:	29534504 	addi	r5,r5,19732
 1005248:	000d883a 	mov	r6,zero
 100524c:	100d6e80 	call	100d6e8 <__cxa_throw>
	} if (wifi_lock == NULL) {
 1005250:	e0bfff17 	ldw	r2,-4(fp)
 1005254:	10800117 	ldw	r2,4(r2)
 1005258:	1004c03a 	cmpne	r2,r2,zero
 100525c:	10000e1e 	bne	r2,zero,1005298 <_ZN11WifiHandlerC2Ev+0xe4>
		throw new SemCreateException();
 1005260:	01000104 	movi	r4,4
 1005264:	100dbf80 	call	100dbf8 <_Znwm>
 1005268:	1021883a 	mov	r16,r2
 100526c:	8009883a 	mov	r4,r16
 1005270:	10052d80 	call	10052d8 <_ZN18SemCreateExceptionC1Ev>
 1005274:	01000104 	movi	r4,4
 1005278:	100da700 	call	100da70 <__cxa_allocate_exception>
 100527c:	1009883a 	mov	r4,r2
 1005280:	2005883a 	mov	r2,r4
 1005284:	14000015 	stw	r16,0(r2)
 1005288:	014040b4 	movhi	r5,258
 100528c:	29545d04 	addi	r5,r5,20852
 1005290:	000d883a 	mov	r6,zero
 1005294:	100d6e80 	call	100d6e8 <__cxa_throw>
	}
}
 1005298:	e037883a 	mov	sp,fp
 100529c:	dfc00217 	ldw	ra,8(sp)
 10052a0:	df000117 	ldw	fp,4(sp)
 10052a4:	dc000017 	ldw	r16,0(sp)
 10052a8:	dec00304 	addi	sp,sp,12
 10052ac:	f800283a 	ret

010052b0 <_ZNK18SemCreateException4whatEv>:
	}
};

class SemCreateException : ARCapException {
public:
	virtual const char *what() const throw() {
 10052b0:	defffe04 	addi	sp,sp,-8
 10052b4:	df000115 	stw	fp,4(sp)
 10052b8:	df000104 	addi	fp,sp,4
 10052bc:	e13fff15 	stw	r4,-4(fp)
		return "Failed to create semaphore.";
 10052c0:	008040b4 	movhi	r2,258
 10052c4:	1093a304 	addi	r2,r2,20108
	}
 10052c8:	e037883a 	mov	sp,fp
 10052cc:	df000017 	ldw	fp,0(sp)
 10052d0:	dec00104 	addi	sp,sp,4
 10052d4:	f800283a 	ret

010052d8 <_ZN18SemCreateExceptionC1Ev>:
	virtual const char *what() const throw() {
		return "Failed to open connection to UART.";
	}
};

class SemCreateException : ARCapException {
 10052d8:	defffd04 	addi	sp,sp,-12
 10052dc:	dfc00215 	stw	ra,8(sp)
 10052e0:	df000115 	stw	fp,4(sp)
 10052e4:	df000104 	addi	fp,sp,4
 10052e8:	e13fff15 	stw	r4,-4(fp)
 10052ec:	e13fff17 	ldw	r4,-4(fp)
 10052f0:	10006c40 	call	10006c4 <_ZN14ARCapExceptionC2Ev>
 10052f4:	00c040b4 	movhi	r3,258
 10052f8:	18d47504 	addi	r3,r3,20948
 10052fc:	e0bfff17 	ldw	r2,-4(fp)
 1005300:	10c00015 	stw	r3,0(r2)
 1005304:	e037883a 	mov	sp,fp
 1005308:	dfc00117 	ldw	ra,4(sp)
 100530c:	df000017 	ldw	fp,0(sp)
 1005310:	dec00204 	addi	sp,sp,8
 1005314:	f800283a 	ret

01005318 <_ZN18SemCreateExceptionD0Ev>:
 1005318:	defffd04 	addi	sp,sp,-12
 100531c:	dfc00215 	stw	ra,8(sp)
 1005320:	df000115 	stw	fp,4(sp)
 1005324:	df000104 	addi	fp,sp,4
 1005328:	e13fff15 	stw	r4,-4(fp)
 100532c:	00c040b4 	movhi	r3,258
 1005330:	18d47504 	addi	r3,r3,20948
 1005334:	e0bfff17 	ldw	r2,-4(fp)
 1005338:	10c00015 	stw	r3,0(r2)
 100533c:	e13fff17 	ldw	r4,-4(fp)
 1005340:	10007840 	call	1000784 <_ZN14ARCapExceptionD2Ev>
 1005344:	00800044 	movi	r2,1
 1005348:	10803fcc 	andi	r2,r2,255
 100534c:	1005003a 	cmpeq	r2,r2,zero
 1005350:	1000021e 	bne	r2,zero,100535c <_ZN18SemCreateExceptionD0Ev+0x44>
 1005354:	e13fff17 	ldw	r4,-4(fp)
 1005358:	100d6680 	call	100d668 <_ZdlPv>
 100535c:	e037883a 	mov	sp,fp
 1005360:	dfc00117 	ldw	ra,4(sp)
 1005364:	df000017 	ldw	fp,0(sp)
 1005368:	dec00204 	addi	sp,sp,8
 100536c:	f800283a 	ret

01005370 <_ZN18SemCreateExceptionD1Ev>:
 1005370:	defffd04 	addi	sp,sp,-12
 1005374:	dfc00215 	stw	ra,8(sp)
 1005378:	df000115 	stw	fp,4(sp)
 100537c:	df000104 	addi	fp,sp,4
 1005380:	e13fff15 	stw	r4,-4(fp)
 1005384:	00c040b4 	movhi	r3,258
 1005388:	18d47504 	addi	r3,r3,20948
 100538c:	e0bfff17 	ldw	r2,-4(fp)
 1005390:	10c00015 	stw	r3,0(r2)
 1005394:	e13fff17 	ldw	r4,-4(fp)
 1005398:	10007840 	call	1000784 <_ZN14ARCapExceptionD2Ev>
 100539c:	0005883a 	mov	r2,zero
 10053a0:	10803fcc 	andi	r2,r2,255
 10053a4:	1005003a 	cmpeq	r2,r2,zero
 10053a8:	1000021e 	bne	r2,zero,10053b4 <_ZN18SemCreateExceptionD1Ev+0x44>
 10053ac:	e13fff17 	ldw	r4,-4(fp)
 10053b0:	100d6680 	call	100d668 <_ZdlPv>
 10053b4:	e037883a 	mov	sp,fp
 10053b8:	dfc00117 	ldw	ra,4(sp)
 10053bc:	df000017 	ldw	fp,0(sp)
 10053c0:	dec00204 	addi	sp,sp,8
 10053c4:	f800283a 	ret

010053c8 <main>:
WifiHandler *wifi;
NetworkSender *networkOut;
NetworkReceiver *networkIn;

/* The main function registers the infrared tasks and starts multi-tasking */
int main(void) {
 10053c8:	deffc404 	addi	sp,sp,-240
 10053cc:	dfc03b15 	stw	ra,236(sp)
 10053d0:	df003a15 	stw	fp,232(sp)
 10053d4:	ddc03915 	stw	r23,228(sp)
 10053d8:	dd803815 	stw	r22,224(sp)
 10053dc:	dd403715 	stw	r21,220(sp)
 10053e0:	dd003615 	stw	r20,216(sp)
 10053e4:	dcc03515 	stw	r19,212(sp)
 10053e8:	dc803415 	stw	r18,208(sp)
 10053ec:	dc403315 	stw	r17,204(sp)
 10053f0:	dc003215 	stw	r16,200(sp)
 10053f4:	df003204 	addi	fp,sp,200
 10053f8:	00804074 	movhi	r2,257
 10053fc:	10b3a604 	addi	r2,r2,-12648
 1005400:	e0bfda15 	stw	r2,-152(fp)
 1005404:	008040b4 	movhi	r2,258
 1005408:	10911004 	addi	r2,r2,17472
 100540c:	e0bfdb15 	stw	r2,-148(fp)
 1005410:	e0bfdc04 	addi	r2,fp,-144
 1005414:	e0ffd304 	addi	r3,fp,-180
 1005418:	10c00015 	stw	r3,0(r2)
 100541c:	00c04034 	movhi	r3,256
 1005420:	18d5f104 	addi	r3,r3,22468
 1005424:	10c00115 	stw	r3,4(r2)
 1005428:	16c00215 	stw	sp,8(r2)
 100542c:	e13fd404 	addi	r4,fp,-176
 1005430:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
			TASK1_PRIORITY,
			TASK1_PRIORITY,
			task1_stk,
			TASK_STACKSIZE,
			0,
			0);
 1005434:	00800044 	movi	r2,1
 1005438:	d8800015 	stw	r2,0(sp)
 100543c:	008040f4 	movhi	r2,259
 1005440:	10a72704 	addi	r2,r2,-25444
 1005444:	d8800115 	stw	r2,4(sp)
 1005448:	00820004 	movi	r2,2048
 100544c:	d8800215 	stw	r2,8(sp)
 1005450:	d8000315 	stw	zero,12(sp)
 1005454:	d8000415 	stw	zero,16(sp)
 1005458:	00bfffc4 	movi	r2,-1
 100545c:	e0bfd515 	stw	r2,-172(fp)
 1005460:	01004034 	movhi	r4,256
 1005464:	21141904 	addi	r4,r4,20580
 1005468:	000b883a 	mov	r5,zero
 100546c:	018040f4 	movhi	r6,259
 1005470:	31af2604 	addi	r6,r6,-17256
 1005474:	01c00044 	movi	r7,1
 1005478:	102007c0 	call	102007c <OSTaskCreateExt>
	//			0,
	//			0);

	try {
		// Create handlers.
		infraredIn = new InfraredReceiver();
 100547c:	00800204 	movi	r2,8
 1005480:	e0bfd515 	stw	r2,-172(fp)
 1005484:	01000204 	movi	r4,8
 1005488:	100dbf80 	call	100dbf8 <_Znwm>
 100548c:	e0bffb15 	stw	r2,-20(fp)
 1005490:	008001c4 	movi	r2,7
 1005494:	e0bfd515 	stw	r2,-172(fp)
 1005498:	e13ffb17 	ldw	r4,-20(fp)
 100549c:	10003c00 	call	10003c0 <_ZN16InfraredReceiverC1Ev>
 10054a0:	e0bffb17 	ldw	r2,-20(fp)
 10054a4:	d0a7cf15 	stw	r2,-24772(gp)
		infraredOut = new InfraredSender();
 10054a8:	00800204 	movi	r2,8
 10054ac:	e0bfd515 	stw	r2,-172(fp)
 10054b0:	01000604 	movi	r4,24
 10054b4:	100dbf80 	call	100dbf8 <_Znwm>
 10054b8:	e0bff915 	stw	r2,-28(fp)
 10054bc:	00000b06 	br	10054ec <main+0x124>
 10054c0:	e0fffd17 	ldw	r3,-12(fp)
 10054c4:	e0ffec15 	stw	r3,-80(fp)
 10054c8:	e0bffe17 	ldw	r2,-8(fp)
 10054cc:	e0bfed15 	stw	r2,-76(fp)
	//			0,
	//			0);

	try {
		// Create handlers.
		infraredIn = new InfraredReceiver();
 10054d0:	e13ffb17 	ldw	r4,-20(fp)
 10054d4:	100d6680 	call	100d668 <_ZdlPv>
 10054d8:	e0ffed17 	ldw	r3,-76(fp)
 10054dc:	e0fffe15 	stw	r3,-8(fp)
 10054e0:	e0bfec17 	ldw	r2,-80(fp)
 10054e4:	e0bffd15 	stw	r2,-12(fp)
 10054e8:	00009d06 	br	1005760 <main+0x398>
		infraredOut = new InfraredSender();
 10054ec:	e0fff917 	ldw	r3,-28(fp)
 10054f0:	e0fffa15 	stw	r3,-24(fp)
 10054f4:	00800184 	movi	r2,6
 10054f8:	e0bfd515 	stw	r2,-172(fp)
 10054fc:	e13ffa17 	ldw	r4,-24(fp)
 1005500:	10058a40 	call	10058a4 <_ZN14InfraredSenderC1Ev>
 1005504:	e0bffa17 	ldw	r2,-24(fp)
 1005508:	d0a7d015 	stw	r2,-24768(gp)
		motor = new MotorHandler();
 100550c:	00800204 	movi	r2,8
 1005510:	e0bfd515 	stw	r2,-172(fp)
 1005514:	01000704 	movi	r4,28
 1005518:	100dbf80 	call	100dbf8 <_Znwm>
 100551c:	e0bff715 	stw	r2,-36(fp)
 1005520:	00000b06 	br	1005550 <main+0x188>
 1005524:	e0fffd17 	ldw	r3,-12(fp)
 1005528:	e0ffea15 	stw	r3,-88(fp)
 100552c:	e0bffe17 	ldw	r2,-8(fp)
 1005530:	e0bfeb15 	stw	r2,-84(fp)
	//			0);

	try {
		// Create handlers.
		infraredIn = new InfraredReceiver();
		infraredOut = new InfraredSender();
 1005534:	e13ffa17 	ldw	r4,-24(fp)
 1005538:	100d6680 	call	100d668 <_ZdlPv>
 100553c:	e0ffeb17 	ldw	r3,-84(fp)
 1005540:	e0fffe15 	stw	r3,-8(fp)
 1005544:	e0bfea17 	ldw	r2,-88(fp)
 1005548:	e0bffd15 	stw	r2,-12(fp)
 100554c:	00008406 	br	1005760 <main+0x398>
		motor = new MotorHandler();
 1005550:	e0fff717 	ldw	r3,-36(fp)
 1005554:	e0fff815 	stw	r3,-32(fp)
 1005558:	00800144 	movi	r2,5
 100555c:	e0bfd515 	stw	r2,-172(fp)
 1005560:	e13ff817 	ldw	r4,-32(fp)
 1005564:	10018740 	call	1001874 <_ZN12MotorHandlerC1Ev>
 1005568:	e0bff817 	ldw	r2,-32(fp)
 100556c:	d0a7d115 	stw	r2,-24764(gp)
		wifi = new WifiHandler();
 1005570:	00800204 	movi	r2,8
 1005574:	e0bfd515 	stw	r2,-172(fp)
 1005578:	01000204 	movi	r4,8
 100557c:	100dbf80 	call	100dbf8 <_Znwm>
 1005580:	e0bff515 	stw	r2,-44(fp)
 1005584:	00000b06 	br	10055b4 <main+0x1ec>
 1005588:	e0fffd17 	ldw	r3,-12(fp)
 100558c:	e0ffe815 	stw	r3,-96(fp)
 1005590:	e0bffe17 	ldw	r2,-8(fp)
 1005594:	e0bfe915 	stw	r2,-92(fp)

	try {
		// Create handlers.
		infraredIn = new InfraredReceiver();
		infraredOut = new InfraredSender();
		motor = new MotorHandler();
 1005598:	e13ff817 	ldw	r4,-32(fp)
 100559c:	100d6680 	call	100d668 <_ZdlPv>
 10055a0:	e0ffe917 	ldw	r3,-92(fp)
 10055a4:	e0fffe15 	stw	r3,-8(fp)
 10055a8:	e0bfe817 	ldw	r2,-96(fp)
 10055ac:	e0bffd15 	stw	r2,-12(fp)
 10055b0:	00006b06 	br	1005760 <main+0x398>
		wifi = new WifiHandler();
 10055b4:	e0fff517 	ldw	r3,-44(fp)
 10055b8:	e0fff615 	stw	r3,-40(fp)
 10055bc:	00800104 	movi	r2,4
 10055c0:	e0bfd515 	stw	r2,-172(fp)
 10055c4:	e13ff617 	ldw	r4,-40(fp)
 10055c8:	10050b80 	call	10050b8 <_ZN11WifiHandlerC1Ev>
 10055cc:	e0bff617 	ldw	r2,-40(fp)
 10055d0:	d0a7d215 	stw	r2,-24760(gp)
		networkOut = new NetworkSender(wifi);
 10055d4:	00800204 	movi	r2,8
 10055d8:	e0bfd515 	stw	r2,-172(fp)
 10055dc:	01000704 	movi	r4,28
 10055e0:	100dbf80 	call	100dbf8 <_Znwm>
 10055e4:	e0bff315 	stw	r2,-52(fp)
 10055e8:	00000b06 	br	1005618 <main+0x250>
 10055ec:	e0fffd17 	ldw	r3,-12(fp)
 10055f0:	e0ffe615 	stw	r3,-104(fp)
 10055f4:	e0bffe17 	ldw	r2,-8(fp)
 10055f8:	e0bfe715 	stw	r2,-100(fp)
	try {
		// Create handlers.
		infraredIn = new InfraredReceiver();
		infraredOut = new InfraredSender();
		motor = new MotorHandler();
		wifi = new WifiHandler();
 10055fc:	e13ff617 	ldw	r4,-40(fp)
 1005600:	100d6680 	call	100d668 <_ZdlPv>
 1005604:	e0ffe717 	ldw	r3,-100(fp)
 1005608:	e0fffe15 	stw	r3,-8(fp)
 100560c:	e0bfe617 	ldw	r2,-104(fp)
 1005610:	e0bffd15 	stw	r2,-12(fp)
 1005614:	00005206 	br	1005760 <main+0x398>
		networkOut = new NetworkSender(wifi);
 1005618:	e0fff317 	ldw	r3,-52(fp)
 100561c:	e0fff415 	stw	r3,-48(fp)
 1005620:	d167d217 	ldw	r5,-24760(gp)
 1005624:	008000c4 	movi	r2,3
 1005628:	e0bfd515 	stw	r2,-172(fp)
 100562c:	e13ff417 	ldw	r4,-48(fp)
 1005630:	100418c0 	call	100418c <_ZN13NetworkSenderC1EP11WifiHandler>
 1005634:	e0bff417 	ldw	r2,-48(fp)
 1005638:	d0a7d315 	stw	r2,-24756(gp)
		networkIn = new NetworkReceiver(wifi);
 100563c:	00800204 	movi	r2,8
 1005640:	e0bfd515 	stw	r2,-172(fp)
 1005644:	01000704 	movi	r4,28
 1005648:	100dbf80 	call	100dbf8 <_Znwm>
 100564c:	e0bff115 	stw	r2,-60(fp)
 1005650:	00000b06 	br	1005680 <main+0x2b8>
 1005654:	e0fffd17 	ldw	r3,-12(fp)
 1005658:	e0ffe415 	stw	r3,-112(fp)
 100565c:	e0bffe17 	ldw	r2,-8(fp)
 1005660:	e0bfe515 	stw	r2,-108(fp)
		// Create handlers.
		infraredIn = new InfraredReceiver();
		infraredOut = new InfraredSender();
		motor = new MotorHandler();
		wifi = new WifiHandler();
		networkOut = new NetworkSender(wifi);
 1005664:	e13ff417 	ldw	r4,-48(fp)
 1005668:	100d6680 	call	100d668 <_ZdlPv>
 100566c:	e0ffe517 	ldw	r3,-108(fp)
 1005670:	e0fffe15 	stw	r3,-8(fp)
 1005674:	e0bfe417 	ldw	r2,-112(fp)
 1005678:	e0bffd15 	stw	r2,-12(fp)
 100567c:	00003806 	br	1005760 <main+0x398>
		networkIn = new NetworkReceiver(wifi);
 1005680:	e0fff117 	ldw	r3,-60(fp)
 1005684:	e0fff215 	stw	r3,-56(fp)
 1005688:	d167d217 	ldw	r5,-24760(gp)
 100568c:	00800084 	movi	r2,2
 1005690:	e0bfd515 	stw	r2,-172(fp)
 1005694:	e13ff217 	ldw	r4,-56(fp)
 1005698:	1001ff80 	call	1001ff8 <_ZN15NetworkReceiverC1EP11WifiHandler>
 100569c:	e0bff217 	ldw	r2,-56(fp)
 10056a0:	d0a7d415 	stw	r2,-24752(gp)
		printf("Main [initialize, status: OK]\n");
 10056a4:	00800204 	movi	r2,8
 10056a8:	e0bfd515 	stw	r2,-172(fp)
 10056ac:	010040b4 	movhi	r4,258
 10056b0:	21147804 	addi	r4,r4,20960
 10056b4:	100eec00 	call	100eec0 <puts>
 10056b8:	00000b06 	br	10056e8 <main+0x320>
 10056bc:	e0fffd17 	ldw	r3,-12(fp)
 10056c0:	e0ffe215 	stw	r3,-120(fp)
 10056c4:	e0bffe17 	ldw	r2,-8(fp)
 10056c8:	e0bfe315 	stw	r2,-116(fp)
		infraredIn = new InfraredReceiver();
		infraredOut = new InfraredSender();
		motor = new MotorHandler();
		wifi = new WifiHandler();
		networkOut = new NetworkSender(wifi);
		networkIn = new NetworkReceiver(wifi);
 10056cc:	e13ff217 	ldw	r4,-56(fp)
 10056d0:	100d6680 	call	100d668 <_ZdlPv>
 10056d4:	e0ffe317 	ldw	r3,-116(fp)
 10056d8:	e0fffe15 	stw	r3,-8(fp)
 10056dc:	e0bfe217 	ldw	r2,-120(fp)
 10056e0:	e0bffd15 	stw	r2,-12(fp)
 10056e4:	00001e06 	br	1005760 <main+0x398>
		printf("Main [initialize, status: OK]\n");

		// Create the communications chain.
		infraredIn->setListener(networkOut->listener());
 10056e8:	d0e7cf17 	ldw	r3,-24772(gp)
 10056ec:	e0fff015 	stw	r3,-64(fp)
 10056f0:	d0a7d317 	ldw	r2,-24756(gp)
 10056f4:	1009883a 	mov	r4,r2
 10056f8:	00800204 	movi	r2,8
 10056fc:	e0bfd515 	stw	r2,-172(fp)
 1005700:	1000dbc0 	call	1000dbc <_ZN8Listener8listenerEv>
 1005704:	100b883a 	mov	r5,r2
 1005708:	e13ff017 	ldw	r4,-64(fp)
 100570c:	100020c0 	call	100020c <_ZN16InfraredReceiver11setListenerEP8os_event>
		networkIn->addListener(INFRARED_SENDER_COMMAND, infraredOut->listener());
 1005710:	d0a7d417 	ldw	r2,-24752(gp)
 1005714:	e0bfef15 	stw	r2,-68(fp)
 1005718:	d0a7d017 	ldw	r2,-24768(gp)
 100571c:	1009883a 	mov	r4,r2
 1005720:	1000dbc0 	call	1000dbc <_ZN8Listener8listenerEv>
 1005724:	100d883a 	mov	r6,r2
 1005728:	e13fef17 	ldw	r4,-68(fp)
 100572c:	01401a44 	movi	r5,105
 1005730:	10021080 	call	1002108 <_ZN15NetworkReceiver11addListenerEcP8os_event>
		networkIn->addListener(MOTOR_COMMAND, motor->listener());
 1005734:	d0e7d417 	ldw	r3,-24752(gp)
 1005738:	e0ffee15 	stw	r3,-72(fp)
 100573c:	d0a7d117 	ldw	r2,-24764(gp)
 1005740:	1009883a 	mov	r4,r2
 1005744:	1000dbc0 	call	1000dbc <_ZN8Listener8listenerEv>
 1005748:	100d883a 	mov	r6,r2
 100574c:	e13fee17 	ldw	r4,-72(fp)
 1005750:	01401b44 	movi	r5,109
 1005754:	10021080 	call	1002108 <_ZN15NetworkReceiver11addListenerEcP8os_event>

		// Start.
		OSStart();
 1005758:	101a2a80 	call	101a2a8 <OSStart>
 100575c:	00003f06 	br	100585c <main+0x494>
 1005760:	e0fffd17 	ldw	r3,-12(fp)
 1005764:	18800060 	cmpeqi	r2,r3,1
 1005768:	1000041e 	bne	r2,zero,100577c <main+0x3b4>
 100576c:	00bfffc4 	movi	r2,-1
 1005770:	e0bfd515 	stw	r2,-172(fp)
 1005774:	e13ffe17 	ldw	r4,-8(fp)
 1005778:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

	} catch (ARCapException &e) {
 100577c:	e13ffe17 	ldw	r4,-8(fp)
 1005780:	100d5500 	call	100d550 <__cxa_begin_catch>
 1005784:	e0bfd315 	stw	r2,-180(fp)
		printf("%s", e.what());
 1005788:	e0bfd317 	ldw	r2,-180(fp)
 100578c:	10800017 	ldw	r2,0(r2)
 1005790:	10800204 	addi	r2,r2,8
 1005794:	10800017 	ldw	r2,0(r2)
 1005798:	e13fd317 	ldw	r4,-180(fp)
 100579c:	103ee83a 	callr	r2
 10057a0:	100b883a 	mov	r5,r2
 10057a4:	00800044 	movi	r2,1
 10057a8:	e0bfd515 	stw	r2,-172(fp)
 10057ac:	010040b4 	movhi	r4,258
 10057b0:	21148004 	addi	r4,r4,20992
 10057b4:	100ed840 	call	100ed84 <printf>
		networkIn->addListener(MOTOR_COMMAND, motor->listener());

		// Start.
		OSStart();

	} catch (ARCapException &e) {
 10057b8:	e03fd515 	stw	zero,-172(fp)
 10057bc:	100d4ac0 	call	100d4ac <__cxa_end_catch>
 10057c0:	00002606 	br	100585c <main+0x494>
 10057c4:	e7002d04 	addi	fp,fp,180
 10057c8:	e0bfd517 	ldw	r2,-172(fp)
 10057cc:	e0bfff15 	stw	r2,-4(fp)
 10057d0:	e0ffd617 	ldw	r3,-168(fp)
 10057d4:	e0fffe15 	stw	r3,-8(fp)
 10057d8:	e0bfd717 	ldw	r2,-164(fp)
 10057dc:	e0bffd15 	stw	r2,-12(fp)
 10057e0:	e0ffff17 	ldw	r3,-4(fp)
 10057e4:	18800060 	cmpeqi	r2,r3,1
 10057e8:	103fb41e 	bne	r2,zero,10056bc <main+0x2f4>
 10057ec:	e0ffff17 	ldw	r3,-4(fp)
 10057f0:	188000a0 	cmpeqi	r2,r3,2
 10057f4:	103f971e 	bne	r2,zero,1005654 <main+0x28c>
 10057f8:	e0ffff17 	ldw	r3,-4(fp)
 10057fc:	188000e0 	cmpeqi	r2,r3,3
 1005800:	103f7a1e 	bne	r2,zero,10055ec <main+0x224>
 1005804:	e0ffff17 	ldw	r3,-4(fp)
 1005808:	18800120 	cmpeqi	r2,r3,4
 100580c:	103f5e1e 	bne	r2,zero,1005588 <main+0x1c0>
 1005810:	e0ffff17 	ldw	r3,-4(fp)
 1005814:	18800160 	cmpeqi	r2,r3,5
 1005818:	103f421e 	bne	r2,zero,1005524 <main+0x15c>
 100581c:	e0ffff17 	ldw	r3,-4(fp)
 1005820:	188001a0 	cmpeqi	r2,r3,6
 1005824:	103f261e 	bne	r2,zero,10054c0 <main+0xf8>
 1005828:	e0ffff17 	ldw	r3,-4(fp)
 100582c:	188001e0 	cmpeqi	r2,r3,7
 1005830:	103fcb1e 	bne	r2,zero,1005760 <main+0x398>
 1005834:	e0bffe17 	ldw	r2,-8(fp)
 1005838:	e0bfe115 	stw	r2,-124(fp)
 100583c:	e03fd515 	stw	zero,-172(fp)
 1005840:	100d4ac0 	call	100d4ac <__cxa_end_catch>
 1005844:	e0ffe117 	ldw	r3,-124(fp)
 1005848:	e0fffe15 	stw	r3,-8(fp)
 100584c:	00bfffc4 	movi	r2,-1
 1005850:	e0bfd515 	stw	r2,-172(fp)
 1005854:	e13ffe17 	ldw	r4,-8(fp)
 1005858:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
		printf("%s", e.what());
	}

	return 0;
 100585c:	0005883a 	mov	r2,zero
 1005860:	e0bffc15 	stw	r2,-16(fp)
 1005864:	e13fd404 	addi	r4,fp,-176
 1005868:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
}
 100586c:	e0bffc17 	ldw	r2,-16(fp)
 1005870:	e037883a 	mov	sp,fp
 1005874:	dfc00917 	ldw	ra,36(sp)
 1005878:	df000817 	ldw	fp,32(sp)
 100587c:	ddc00717 	ldw	r23,28(sp)
 1005880:	dd800617 	ldw	r22,24(sp)
 1005884:	dd400517 	ldw	r21,20(sp)
 1005888:	dd000417 	ldw	r20,16(sp)
 100588c:	dcc00317 	ldw	r19,12(sp)
 1005890:	dc800217 	ldw	r18,8(sp)
 1005894:	dc400117 	ldw	r17,4(sp)
 1005898:	dc000017 	ldw	r16,0(sp)
 100589c:	dec00a04 	addi	sp,sp,40
 10058a0:	f800283a 	ret

010058a4 <_ZN14InfraredSenderC1Ev>:
 10058a4:	defffd04 	addi	sp,sp,-12
 10058a8:	dfc00215 	stw	ra,8(sp)
 10058ac:	df000115 	stw	fp,4(sp)
 10058b0:	df000104 	addi	fp,sp,4
 10058b4:	e13fff15 	stw	r4,-4(fp)
 10058b8:	e13fff17 	ldw	r4,-4(fp)
 10058bc:	1000f380 	call	1000f38 <_ZN8ListenerC2Ev>
 10058c0:	00c040b4 	movhi	r3,258
 10058c4:	18d25804 	addi	r3,r3,18784
 10058c8:	e0bfff17 	ldw	r2,-4(fp)
 10058cc:	10c00015 	stw	r3,0(r2)
 10058d0:	e037883a 	mov	sp,fp
 10058d4:	dfc00117 	ldw	ra,4(sp)
 10058d8:	df000017 	ldw	fp,0(sp)
 10058dc:	dec00204 	addi	sp,sp,8
 10058e0:	f800283a 	ret

010058e4 <_ZSt18__throw_bad_typeidv>:
 10058e4:	deffff04 	addi	sp,sp,-4
 10058e8:	01000104 	movi	r4,4
 10058ec:	dfc00015 	stw	ra,0(sp)
 10058f0:	100da700 	call	100da70 <__cxa_allocate_exception>
 10058f4:	1009883a 	mov	r4,r2
 10058f8:	008040b4 	movhi	r2,258
 10058fc:	10967d04 	addi	r2,r2,23028
 1005900:	20800015 	stw	r2,0(r4)
 1005904:	014040b4 	movhi	r5,258
 1005908:	29568404 	addi	r5,r5,23056
 100590c:	01804074 	movhi	r6,257
 1005910:	31b5fc04 	addi	r6,r6,-10256
 1005914:	100d6e80 	call	100d6e8 <__cxa_throw>

01005918 <_ZSt16__throw_bad_castv>:
 1005918:	deffff04 	addi	sp,sp,-4
 100591c:	01000104 	movi	r4,4
 1005920:	dfc00015 	stw	ra,0(sp)
 1005924:	100da700 	call	100da70 <__cxa_allocate_exception>
 1005928:	1009883a 	mov	r4,r2
 100592c:	008040b4 	movhi	r2,258
 1005930:	1096ad04 	addi	r2,r2,23220
 1005934:	20800015 	stw	r2,0(r4)
 1005938:	014040b4 	movhi	r5,258
 100593c:	2956b304 	addi	r5,r5,23244
 1005940:	01804074 	movhi	r6,257
 1005944:	31b6f604 	addi	r6,r6,-9256
 1005948:	100d6e80 	call	100d6e8 <__cxa_throw>

0100594c <_ZSt17__throw_bad_allocv>:
 100594c:	deffff04 	addi	sp,sp,-4
 1005950:	01000104 	movi	r4,4
 1005954:	dfc00015 	stw	ra,0(sp)
 1005958:	100da700 	call	100da70 <__cxa_allocate_exception>
 100595c:	1009883a 	mov	r4,r2
 1005960:	008040b4 	movhi	r2,258
 1005964:	10957404 	addi	r2,r2,21968
 1005968:	20800015 	stw	r2,0(r4)
 100596c:	014040b4 	movhi	r5,258
 1005970:	29557b04 	addi	r5,r5,21996
 1005974:	01804074 	movhi	r6,257
 1005978:	31aeb704 	addi	r6,r6,-17700
 100597c:	100d6e80 	call	100d6e8 <__cxa_throw>

01005980 <_ZSt21__throw_bad_exceptionv>:
 1005980:	deffff04 	addi	sp,sp,-4
 1005984:	01000104 	movi	r4,4
 1005988:	dfc00015 	stw	ra,0(sp)
 100598c:	100da700 	call	100da70 <__cxa_allocate_exception>
 1005990:	1009883a 	mov	r4,r2
 1005994:	008040b4 	movhi	r2,258
 1005998:	10955e04 	addi	r2,r2,21880
 100599c:	20800015 	stw	r2,0(r4)
 10059a0:	014040b4 	movhi	r5,258
 10059a4:	29556b04 	addi	r5,r5,21932
 10059a8:	01804074 	movhi	r6,257
 10059ac:	31ae9f04 	addi	r6,r6,-17796
 10059b0:	100d6e80 	call	100d6e8 <__cxa_throw>

010059b4 <_ZSt19__throw_ios_failurePKc>:
 10059b4:	deffeb04 	addi	sp,sp,-84
 10059b8:	00804074 	movhi	r2,257
 10059bc:	10b3a604 	addi	r2,r2,-12648
 10059c0:	d8800815 	stw	r2,32(sp)
 10059c4:	00c040b4 	movhi	r3,258
 10059c8:	18d11804 	addi	r3,r3,17504
 10059cc:	00804034 	movhi	r2,256
 10059d0:	1096a404 	addi	r2,r2,23184
 10059d4:	d9001115 	stw	r4,68(sp)
 10059d8:	d9000204 	addi	r4,sp,8
 10059dc:	d8800b15 	stw	r2,44(sp)
 10059e0:	dfc01415 	stw	ra,80(sp)
 10059e4:	df001315 	stw	fp,76(sp)
 10059e8:	ddc01215 	stw	r23,72(sp)
 10059ec:	d8c00915 	stw	r3,36(sp)
 10059f0:	dec00a15 	stw	sp,40(sp)
 10059f4:	dec00c15 	stw	sp,48(sp)
 10059f8:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 10059fc:	00800084 	movi	r2,2
 1005a00:	d8800315 	stw	r2,12(sp)
 1005a04:	d9401117 	ldw	r5,68(sp)
 1005a08:	d9000104 	addi	r4,sp,4
 1005a0c:	d9800044 	addi	r6,sp,1
 1005a10:	10096dc0 	call	10096dc <_ZNSsC1EPKcRKSaIcE>
 1005a14:	01000204 	movi	r4,8
 1005a18:	100da700 	call	100da70 <__cxa_allocate_exception>
 1005a1c:	1009883a 	mov	r4,r2
 1005a20:	d9400104 	addi	r5,sp,4
 1005a24:	d8801015 	stw	r2,64(sp)
 1005a28:	1006bb40 	call	1006bb4 <_ZNSt8ios_base7failureC1ERKSs>
 1005a2c:	d8800117 	ldw	r2,4(sp)
 1005a30:	00c040f4 	movhi	r3,259
 1005a34:	18cf2704 	addi	r3,r3,15516
 1005a38:	10bffd04 	addi	r2,r2,-12
 1005a3c:	d8800f15 	stw	r2,60(sp)
 1005a40:	10c0081e 	bne	r2,r3,1005a64 <_ZSt19__throw_ios_failurePKc+0xb0>
 1005a44:	d9001017 	ldw	r4,64(sp)
 1005a48:	00bfffc4 	movi	r2,-1
 1005a4c:	014040b4 	movhi	r5,258
 1005a50:	2954e704 	addi	r5,r5,21404
 1005a54:	01804034 	movhi	r6,256
 1005a58:	319aac04 	addi	r6,r6,27312
 1005a5c:	d8800315 	stw	r2,12(sp)
 1005a60:	100d6e80 	call	100d6e8 <__cxa_throw>
 1005a64:	00800044 	movi	r2,1
 1005a68:	d8800315 	stw	r2,12(sp)
 1005a6c:	d8800f17 	ldw	r2,60(sp)
 1005a70:	017fffc4 	movi	r5,-1
 1005a74:	11000204 	addi	r4,r2,8
 1005a78:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005a7c:	00bff116 	blt	zero,r2,1005a44 <_ZSt19__throw_ios_failurePKc+0x90>
 1005a80:	d9000f17 	ldw	r4,60(sp)
 1005a84:	d80b883a 	mov	r5,sp
 1005a88:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005a8c:	003fed06 	br	1005a44 <_ZSt19__throw_ios_failurePKc+0x90>
 1005a90:	d8c00317 	ldw	r3,12(sp)
 1005a94:	00800044 	movi	r2,1
 1005a98:	d9000417 	ldw	r4,16(sp)
 1005a9c:	d9400517 	ldw	r5,20(sp)
 1005aa0:	18800226 	beq	r3,r2,1005aac <_ZSt19__throw_ios_failurePKc+0xf8>
 1005aa4:	00bfffc4 	movi	r2,-1
 1005aa8:	28800326 	beq	r5,r2,1005ab8 <_ZSt19__throw_ios_failurePKc+0x104>
 1005aac:	00bfffc4 	movi	r2,-1
 1005ab0:	d8800315 	stw	r2,12(sp)
 1005ab4:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1005ab8:	100d4440 	call	100d444 <_ZSt9terminatev>

01005abc <_ZSt19__throw_logic_errorPKc>:
 1005abc:	deffe704 	addi	sp,sp,-100
 1005ac0:	00804074 	movhi	r2,257
 1005ac4:	10b3a604 	addi	r2,r2,-12648
 1005ac8:	d8800815 	stw	r2,32(sp)
 1005acc:	00c040b4 	movhi	r3,258
 1005ad0:	18d11d04 	addi	r3,r3,17524
 1005ad4:	00804034 	movhi	r2,256
 1005ad8:	1096ea04 	addi	r2,r2,23464
 1005adc:	d9001315 	stw	r4,76(sp)
 1005ae0:	d9000204 	addi	r4,sp,8
 1005ae4:	d8800b15 	stw	r2,44(sp)
 1005ae8:	dfc01815 	stw	ra,96(sp)
 1005aec:	df001715 	stw	fp,92(sp)
 1005af0:	ddc01615 	stw	r23,88(sp)
 1005af4:	d8c00915 	stw	r3,36(sp)
 1005af8:	dec00a15 	stw	sp,40(sp)
 1005afc:	dec00c15 	stw	sp,48(sp)
 1005b00:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1005b04:	00800104 	movi	r2,4
 1005b08:	d8800315 	stw	r2,12(sp)
 1005b0c:	d885883a 	add	r2,sp,r2
 1005b10:	d8801415 	stw	r2,80(sp)
 1005b14:	d9401317 	ldw	r5,76(sp)
 1005b18:	1009883a 	mov	r4,r2
 1005b1c:	d9800084 	addi	r6,sp,2
 1005b20:	10096dc0 	call	10096dc <_ZNSsC1EPKcRKSaIcE>
 1005b24:	01000204 	movi	r4,8
 1005b28:	100da700 	call	100da70 <__cxa_allocate_exception>
 1005b2c:	d8801215 	stw	r2,72(sp)
 1005b30:	008000c4 	movi	r2,3
 1005b34:	d8800315 	stw	r2,12(sp)
 1005b38:	d9401417 	ldw	r5,80(sp)
 1005b3c:	d9001217 	ldw	r4,72(sp)
 1005b40:	10072400 	call	1007240 <_ZNSt11logic_errorC1ERKSs>
 1005b44:	d8800117 	ldw	r2,4(sp)
 1005b48:	00c040f4 	movhi	r3,259
 1005b4c:	18cf2704 	addi	r3,r3,15516
 1005b50:	10bffd04 	addi	r2,r2,-12
 1005b54:	d8800f15 	stw	r2,60(sp)
 1005b58:	10c0081e 	bne	r2,r3,1005b7c <_ZSt19__throw_logic_errorPKc+0xc0>
 1005b5c:	d9001217 	ldw	r4,72(sp)
 1005b60:	00bfffc4 	movi	r2,-1
 1005b64:	014040b4 	movhi	r5,258
 1005b68:	29550004 	addi	r5,r5,21504
 1005b6c:	01804034 	movhi	r6,256
 1005b70:	319bdb04 	addi	r6,r6,28524
 1005b74:	d8800315 	stw	r2,12(sp)
 1005b78:	100d6e80 	call	100d6e8 <__cxa_throw>
 1005b7c:	00800044 	movi	r2,1
 1005b80:	d8800315 	stw	r2,12(sp)
 1005b84:	d8800f17 	ldw	r2,60(sp)
 1005b88:	017fffc4 	movi	r5,-1
 1005b8c:	11000204 	addi	r4,r2,8
 1005b90:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005b94:	00bff116 	blt	zero,r2,1005b5c <_ZSt19__throw_logic_errorPKc+0xa0>
 1005b98:	d9000f17 	ldw	r4,60(sp)
 1005b9c:	d80b883a 	mov	r5,sp
 1005ba0:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005ba4:	003fed06 	br	1005b5c <_ZSt19__throw_logic_errorPKc+0xa0>
 1005ba8:	d8800417 	ldw	r2,16(sp)
 1005bac:	d8c00317 	ldw	r3,12(sp)
 1005bb0:	d9000517 	ldw	r4,20(sp)
 1005bb4:	d8801515 	stw	r2,84(sp)
 1005bb8:	00800044 	movi	r2,1
 1005bbc:	18800426 	beq	r3,r2,1005bd0 <_ZSt19__throw_logic_errorPKc+0x114>
 1005bc0:	00800084 	movi	r2,2
 1005bc4:	18800826 	beq	r3,r2,1005be8 <_ZSt19__throw_logic_errorPKc+0x12c>
 1005bc8:	008000c4 	movi	r2,3
 1005bcc:	18800226 	beq	r3,r2,1005bd8 <_ZSt19__throw_logic_errorPKc+0x11c>
 1005bd0:	00bfffc4 	movi	r2,-1
 1005bd4:	20801126 	beq	r4,r2,1005c1c <_ZSt19__throw_logic_errorPKc+0x160>
 1005bd8:	d9001517 	ldw	r4,84(sp)
 1005bdc:	00bfffc4 	movi	r2,-1
 1005be0:	d8800315 	stw	r2,12(sp)
 1005be4:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1005be8:	d9001217 	ldw	r4,72(sp)
 1005bec:	100da300 	call	100da30 <__cxa_free_exception>
 1005bf0:	d8801517 	ldw	r2,84(sp)
 1005bf4:	00c040f4 	movhi	r3,259
 1005bf8:	18cf2704 	addi	r3,r3,15516
 1005bfc:	d8801115 	stw	r2,68(sp)
 1005c00:	d8800117 	ldw	r2,4(sp)
 1005c04:	10bffd04 	addi	r2,r2,-12
 1005c08:	d8801015 	stw	r2,64(sp)
 1005c0c:	10c0041e 	bne	r2,r3,1005c20 <_ZSt19__throw_logic_errorPKc+0x164>
 1005c10:	d8801117 	ldw	r2,68(sp)
 1005c14:	d8801515 	stw	r2,84(sp)
 1005c18:	003fef06 	br	1005bd8 <_ZSt19__throw_logic_errorPKc+0x11c>
 1005c1c:	100d4440 	call	100d444 <_ZSt9terminatev>
 1005c20:	00800084 	movi	r2,2
 1005c24:	d8800315 	stw	r2,12(sp)
 1005c28:	d8801017 	ldw	r2,64(sp)
 1005c2c:	017fffc4 	movi	r5,-1
 1005c30:	11000204 	addi	r4,r2,8
 1005c34:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005c38:	00bff516 	blt	zero,r2,1005c10 <_ZSt19__throw_logic_errorPKc+0x154>
 1005c3c:	d9001017 	ldw	r4,64(sp)
 1005c40:	d9400044 	addi	r5,sp,1
 1005c44:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005c48:	003ff106 	br	1005c10 <_ZSt19__throw_logic_errorPKc+0x154>

01005c4c <_ZSt23__throw_underflow_errorPKc>:
 1005c4c:	deffe704 	addi	sp,sp,-100
 1005c50:	00804074 	movhi	r2,257
 1005c54:	10b3a604 	addi	r2,r2,-12648
 1005c58:	d8800815 	stw	r2,32(sp)
 1005c5c:	00c040b4 	movhi	r3,258
 1005c60:	18d12304 	addi	r3,r3,17548
 1005c64:	00804034 	movhi	r2,256
 1005c68:	10974e04 	addi	r2,r2,23864
 1005c6c:	d9001315 	stw	r4,76(sp)
 1005c70:	d9000204 	addi	r4,sp,8
 1005c74:	d8800b15 	stw	r2,44(sp)
 1005c78:	dfc01815 	stw	ra,96(sp)
 1005c7c:	df001715 	stw	fp,92(sp)
 1005c80:	ddc01615 	stw	r23,88(sp)
 1005c84:	d8c00915 	stw	r3,36(sp)
 1005c88:	dec00a15 	stw	sp,40(sp)
 1005c8c:	dec00c15 	stw	sp,48(sp)
 1005c90:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1005c94:	00800104 	movi	r2,4
 1005c98:	d8800315 	stw	r2,12(sp)
 1005c9c:	d885883a 	add	r2,sp,r2
 1005ca0:	d8801415 	stw	r2,80(sp)
 1005ca4:	d9401317 	ldw	r5,76(sp)
 1005ca8:	1009883a 	mov	r4,r2
 1005cac:	d9800084 	addi	r6,sp,2
 1005cb0:	10096dc0 	call	10096dc <_ZNSsC1EPKcRKSaIcE>
 1005cb4:	01000204 	movi	r4,8
 1005cb8:	100da700 	call	100da70 <__cxa_allocate_exception>
 1005cbc:	d8801215 	stw	r2,72(sp)
 1005cc0:	008000c4 	movi	r2,3
 1005cc4:	d8800315 	stw	r2,12(sp)
 1005cc8:	d9401417 	ldw	r5,80(sp)
 1005ccc:	d9001217 	ldw	r4,72(sp)
 1005cd0:	10071200 	call	1007120 <_ZNSt15underflow_errorC1ERKSs>
 1005cd4:	d8800117 	ldw	r2,4(sp)
 1005cd8:	00c040f4 	movhi	r3,259
 1005cdc:	18cf2704 	addi	r3,r3,15516
 1005ce0:	10bffd04 	addi	r2,r2,-12
 1005ce4:	d8800f15 	stw	r2,60(sp)
 1005ce8:	10c0081e 	bne	r2,r3,1005d0c <_ZSt23__throw_underflow_errorPKc+0xc0>
 1005cec:	d9001217 	ldw	r4,72(sp)
 1005cf0:	00bfffc4 	movi	r2,-1
 1005cf4:	014040b4 	movhi	r5,258
 1005cf8:	29548104 	addi	r5,r5,20996
 1005cfc:	01804034 	movhi	r6,256
 1005d00:	319a4004 	addi	r6,r6,26880
 1005d04:	d8800315 	stw	r2,12(sp)
 1005d08:	100d6e80 	call	100d6e8 <__cxa_throw>
 1005d0c:	00800044 	movi	r2,1
 1005d10:	d8800315 	stw	r2,12(sp)
 1005d14:	d8800f17 	ldw	r2,60(sp)
 1005d18:	017fffc4 	movi	r5,-1
 1005d1c:	11000204 	addi	r4,r2,8
 1005d20:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005d24:	00bff116 	blt	zero,r2,1005cec <_ZSt23__throw_underflow_errorPKc+0xa0>
 1005d28:	d9000f17 	ldw	r4,60(sp)
 1005d2c:	d80b883a 	mov	r5,sp
 1005d30:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005d34:	003fed06 	br	1005cec <_ZSt23__throw_underflow_errorPKc+0xa0>
 1005d38:	d8800417 	ldw	r2,16(sp)
 1005d3c:	d8c00317 	ldw	r3,12(sp)
 1005d40:	d9000517 	ldw	r4,20(sp)
 1005d44:	d8801515 	stw	r2,84(sp)
 1005d48:	00800044 	movi	r2,1
 1005d4c:	18800426 	beq	r3,r2,1005d60 <_ZSt23__throw_underflow_errorPKc+0x114>
 1005d50:	00800084 	movi	r2,2
 1005d54:	18800826 	beq	r3,r2,1005d78 <_ZSt23__throw_underflow_errorPKc+0x12c>
 1005d58:	008000c4 	movi	r2,3
 1005d5c:	18800226 	beq	r3,r2,1005d68 <_ZSt23__throw_underflow_errorPKc+0x11c>
 1005d60:	00bfffc4 	movi	r2,-1
 1005d64:	20801126 	beq	r4,r2,1005dac <_ZSt23__throw_underflow_errorPKc+0x160>
 1005d68:	d9001517 	ldw	r4,84(sp)
 1005d6c:	00bfffc4 	movi	r2,-1
 1005d70:	d8800315 	stw	r2,12(sp)
 1005d74:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1005d78:	d9001217 	ldw	r4,72(sp)
 1005d7c:	100da300 	call	100da30 <__cxa_free_exception>
 1005d80:	d8801517 	ldw	r2,84(sp)
 1005d84:	00c040f4 	movhi	r3,259
 1005d88:	18cf2704 	addi	r3,r3,15516
 1005d8c:	d8801115 	stw	r2,68(sp)
 1005d90:	d8800117 	ldw	r2,4(sp)
 1005d94:	10bffd04 	addi	r2,r2,-12
 1005d98:	d8801015 	stw	r2,64(sp)
 1005d9c:	10c0041e 	bne	r2,r3,1005db0 <_ZSt23__throw_underflow_errorPKc+0x164>
 1005da0:	d8801117 	ldw	r2,68(sp)
 1005da4:	d8801515 	stw	r2,84(sp)
 1005da8:	003fef06 	br	1005d68 <_ZSt23__throw_underflow_errorPKc+0x11c>
 1005dac:	100d4440 	call	100d444 <_ZSt9terminatev>
 1005db0:	00800084 	movi	r2,2
 1005db4:	d8800315 	stw	r2,12(sp)
 1005db8:	d8801017 	ldw	r2,64(sp)
 1005dbc:	017fffc4 	movi	r5,-1
 1005dc0:	11000204 	addi	r4,r2,8
 1005dc4:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005dc8:	00bff516 	blt	zero,r2,1005da0 <_ZSt23__throw_underflow_errorPKc+0x154>
 1005dcc:	d9001017 	ldw	r4,64(sp)
 1005dd0:	d9400044 	addi	r5,sp,1
 1005dd4:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005dd8:	003ff106 	br	1005da0 <_ZSt23__throw_underflow_errorPKc+0x154>

01005ddc <_ZSt22__throw_overflow_errorPKc>:
 1005ddc:	deffe704 	addi	sp,sp,-100
 1005de0:	00804074 	movhi	r2,257
 1005de4:	10b3a604 	addi	r2,r2,-12648
 1005de8:	d8800815 	stw	r2,32(sp)
 1005dec:	00c040b4 	movhi	r3,258
 1005df0:	18d12904 	addi	r3,r3,17572
 1005df4:	00804034 	movhi	r2,256
 1005df8:	1097b204 	addi	r2,r2,24264
 1005dfc:	d9001315 	stw	r4,76(sp)
 1005e00:	d9000204 	addi	r4,sp,8
 1005e04:	d8800b15 	stw	r2,44(sp)
 1005e08:	dfc01815 	stw	ra,96(sp)
 1005e0c:	df001715 	stw	fp,92(sp)
 1005e10:	ddc01615 	stw	r23,88(sp)
 1005e14:	d8c00915 	stw	r3,36(sp)
 1005e18:	dec00a15 	stw	sp,40(sp)
 1005e1c:	dec00c15 	stw	sp,48(sp)
 1005e20:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1005e24:	00800104 	movi	r2,4
 1005e28:	d8800315 	stw	r2,12(sp)
 1005e2c:	d885883a 	add	r2,sp,r2
 1005e30:	d8801415 	stw	r2,80(sp)
 1005e34:	d9401317 	ldw	r5,76(sp)
 1005e38:	1009883a 	mov	r4,r2
 1005e3c:	d9800084 	addi	r6,sp,2
 1005e40:	10096dc0 	call	10096dc <_ZNSsC1EPKcRKSaIcE>
 1005e44:	01000204 	movi	r4,8
 1005e48:	100da700 	call	100da70 <__cxa_allocate_exception>
 1005e4c:	d8801215 	stw	r2,72(sp)
 1005e50:	008000c4 	movi	r2,3
 1005e54:	d8800315 	stw	r2,12(sp)
 1005e58:	d9401417 	ldw	r5,80(sp)
 1005e5c:	d9001217 	ldw	r4,72(sp)
 1005e60:	10071800 	call	1007180 <_ZNSt14overflow_errorC1ERKSs>
 1005e64:	d8800117 	ldw	r2,4(sp)
 1005e68:	00c040f4 	movhi	r3,259
 1005e6c:	18cf2704 	addi	r3,r3,15516
 1005e70:	10bffd04 	addi	r2,r2,-12
 1005e74:	d8800f15 	stw	r2,60(sp)
 1005e78:	10c0081e 	bne	r2,r3,1005e9c <_ZSt22__throw_overflow_errorPKc+0xc0>
 1005e7c:	d9001217 	ldw	r4,72(sp)
 1005e80:	00bfffc4 	movi	r2,-1
 1005e84:	014040b4 	movhi	r5,258
 1005e88:	29548e04 	addi	r5,r5,21048
 1005e8c:	01804034 	movhi	r6,256
 1005e90:	319a5104 	addi	r6,r6,26948
 1005e94:	d8800315 	stw	r2,12(sp)
 1005e98:	100d6e80 	call	100d6e8 <__cxa_throw>
 1005e9c:	00800044 	movi	r2,1
 1005ea0:	d8800315 	stw	r2,12(sp)
 1005ea4:	d8800f17 	ldw	r2,60(sp)
 1005ea8:	017fffc4 	movi	r5,-1
 1005eac:	11000204 	addi	r4,r2,8
 1005eb0:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005eb4:	00bff116 	blt	zero,r2,1005e7c <_ZSt22__throw_overflow_errorPKc+0xa0>
 1005eb8:	d9000f17 	ldw	r4,60(sp)
 1005ebc:	d80b883a 	mov	r5,sp
 1005ec0:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005ec4:	003fed06 	br	1005e7c <_ZSt22__throw_overflow_errorPKc+0xa0>
 1005ec8:	d8800417 	ldw	r2,16(sp)
 1005ecc:	d8c00317 	ldw	r3,12(sp)
 1005ed0:	d9000517 	ldw	r4,20(sp)
 1005ed4:	d8801515 	stw	r2,84(sp)
 1005ed8:	00800044 	movi	r2,1
 1005edc:	18800426 	beq	r3,r2,1005ef0 <_ZSt22__throw_overflow_errorPKc+0x114>
 1005ee0:	00800084 	movi	r2,2
 1005ee4:	18800826 	beq	r3,r2,1005f08 <_ZSt22__throw_overflow_errorPKc+0x12c>
 1005ee8:	008000c4 	movi	r2,3
 1005eec:	18800226 	beq	r3,r2,1005ef8 <_ZSt22__throw_overflow_errorPKc+0x11c>
 1005ef0:	00bfffc4 	movi	r2,-1
 1005ef4:	20801126 	beq	r4,r2,1005f3c <_ZSt22__throw_overflow_errorPKc+0x160>
 1005ef8:	d9001517 	ldw	r4,84(sp)
 1005efc:	00bfffc4 	movi	r2,-1
 1005f00:	d8800315 	stw	r2,12(sp)
 1005f04:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1005f08:	d9001217 	ldw	r4,72(sp)
 1005f0c:	100da300 	call	100da30 <__cxa_free_exception>
 1005f10:	d8801517 	ldw	r2,84(sp)
 1005f14:	00c040f4 	movhi	r3,259
 1005f18:	18cf2704 	addi	r3,r3,15516
 1005f1c:	d8801115 	stw	r2,68(sp)
 1005f20:	d8800117 	ldw	r2,4(sp)
 1005f24:	10bffd04 	addi	r2,r2,-12
 1005f28:	d8801015 	stw	r2,64(sp)
 1005f2c:	10c0041e 	bne	r2,r3,1005f40 <_ZSt22__throw_overflow_errorPKc+0x164>
 1005f30:	d8801117 	ldw	r2,68(sp)
 1005f34:	d8801515 	stw	r2,84(sp)
 1005f38:	003fef06 	br	1005ef8 <_ZSt22__throw_overflow_errorPKc+0x11c>
 1005f3c:	100d4440 	call	100d444 <_ZSt9terminatev>
 1005f40:	00800084 	movi	r2,2
 1005f44:	d8800315 	stw	r2,12(sp)
 1005f48:	d8801017 	ldw	r2,64(sp)
 1005f4c:	017fffc4 	movi	r5,-1
 1005f50:	11000204 	addi	r4,r2,8
 1005f54:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1005f58:	00bff516 	blt	zero,r2,1005f30 <_ZSt22__throw_overflow_errorPKc+0x154>
 1005f5c:	d9001017 	ldw	r4,64(sp)
 1005f60:	d9400044 	addi	r5,sp,1
 1005f64:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1005f68:	003ff106 	br	1005f30 <_ZSt22__throw_overflow_errorPKc+0x154>

01005f6c <_ZSt24__throw_invalid_argumentPKc>:
 1005f6c:	deffe704 	addi	sp,sp,-100
 1005f70:	00804074 	movhi	r2,257
 1005f74:	10b3a604 	addi	r2,r2,-12648
 1005f78:	d8800815 	stw	r2,32(sp)
 1005f7c:	00c040b4 	movhi	r3,258
 1005f80:	18d12f04 	addi	r3,r3,17596
 1005f84:	00804034 	movhi	r2,256
 1005f88:	10981604 	addi	r2,r2,24664
 1005f8c:	d9001315 	stw	r4,76(sp)
 1005f90:	d9000204 	addi	r4,sp,8
 1005f94:	d8800b15 	stw	r2,44(sp)
 1005f98:	dfc01815 	stw	ra,96(sp)
 1005f9c:	df001715 	stw	fp,92(sp)
 1005fa0:	ddc01615 	stw	r23,88(sp)
 1005fa4:	d8c00915 	stw	r3,36(sp)
 1005fa8:	dec00a15 	stw	sp,40(sp)
 1005fac:	dec00c15 	stw	sp,48(sp)
 1005fb0:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1005fb4:	00800104 	movi	r2,4
 1005fb8:	d8800315 	stw	r2,12(sp)
 1005fbc:	d885883a 	add	r2,sp,r2
 1005fc0:	d8801415 	stw	r2,80(sp)
 1005fc4:	d9401317 	ldw	r5,76(sp)
 1005fc8:	1009883a 	mov	r4,r2
 1005fcc:	d9800084 	addi	r6,sp,2
 1005fd0:	10096dc0 	call	10096dc <_ZNSsC1EPKcRKSaIcE>
 1005fd4:	01000204 	movi	r4,8
 1005fd8:	100da700 	call	100da70 <__cxa_allocate_exception>
 1005fdc:	d8801215 	stw	r2,72(sp)
 1005fe0:	008000c4 	movi	r2,3
 1005fe4:	d8800315 	stw	r2,12(sp)
 1005fe8:	d9401417 	ldw	r5,80(sp)
 1005fec:	d9001217 	ldw	r4,72(sp)
 1005ff0:	10074600 	call	1007460 <_ZNSt16invalid_argumentC1ERKSs>
 1005ff4:	d8800117 	ldw	r2,4(sp)
 1005ff8:	00c040f4 	movhi	r3,259
 1005ffc:	18cf2704 	addi	r3,r3,15516
 1006000:	10bffd04 	addi	r2,r2,-12
 1006004:	d8800f15 	stw	r2,60(sp)
 1006008:	10c0081e 	bne	r2,r3,100602c <_ZSt24__throw_invalid_argumentPKc+0xc0>
 100600c:	d9001217 	ldw	r4,72(sp)
 1006010:	00bfffc4 	movi	r2,-1
 1006014:	014040b4 	movhi	r5,258
 1006018:	2954c104 	addi	r5,r5,21252
 100601c:	01804034 	movhi	r6,256
 1006020:	319a9504 	addi	r6,r6,27220
 1006024:	d8800315 	stw	r2,12(sp)
 1006028:	100d6e80 	call	100d6e8 <__cxa_throw>
 100602c:	00800044 	movi	r2,1
 1006030:	d8800315 	stw	r2,12(sp)
 1006034:	d8800f17 	ldw	r2,60(sp)
 1006038:	017fffc4 	movi	r5,-1
 100603c:	11000204 	addi	r4,r2,8
 1006040:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006044:	00bff116 	blt	zero,r2,100600c <_ZSt24__throw_invalid_argumentPKc+0xa0>
 1006048:	d9000f17 	ldw	r4,60(sp)
 100604c:	d80b883a 	mov	r5,sp
 1006050:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006054:	003fed06 	br	100600c <_ZSt24__throw_invalid_argumentPKc+0xa0>
 1006058:	d8800417 	ldw	r2,16(sp)
 100605c:	d8c00317 	ldw	r3,12(sp)
 1006060:	d9000517 	ldw	r4,20(sp)
 1006064:	d8801515 	stw	r2,84(sp)
 1006068:	00800044 	movi	r2,1
 100606c:	18800426 	beq	r3,r2,1006080 <_ZSt24__throw_invalid_argumentPKc+0x114>
 1006070:	00800084 	movi	r2,2
 1006074:	18800826 	beq	r3,r2,1006098 <_ZSt24__throw_invalid_argumentPKc+0x12c>
 1006078:	008000c4 	movi	r2,3
 100607c:	18800226 	beq	r3,r2,1006088 <_ZSt24__throw_invalid_argumentPKc+0x11c>
 1006080:	00bfffc4 	movi	r2,-1
 1006084:	20801126 	beq	r4,r2,10060cc <_ZSt24__throw_invalid_argumentPKc+0x160>
 1006088:	d9001517 	ldw	r4,84(sp)
 100608c:	00bfffc4 	movi	r2,-1
 1006090:	d8800315 	stw	r2,12(sp)
 1006094:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1006098:	d9001217 	ldw	r4,72(sp)
 100609c:	100da300 	call	100da30 <__cxa_free_exception>
 10060a0:	d8801517 	ldw	r2,84(sp)
 10060a4:	00c040f4 	movhi	r3,259
 10060a8:	18cf2704 	addi	r3,r3,15516
 10060ac:	d8801115 	stw	r2,68(sp)
 10060b0:	d8800117 	ldw	r2,4(sp)
 10060b4:	10bffd04 	addi	r2,r2,-12
 10060b8:	d8801015 	stw	r2,64(sp)
 10060bc:	10c0041e 	bne	r2,r3,10060d0 <_ZSt24__throw_invalid_argumentPKc+0x164>
 10060c0:	d8801117 	ldw	r2,68(sp)
 10060c4:	d8801515 	stw	r2,84(sp)
 10060c8:	003fef06 	br	1006088 <_ZSt24__throw_invalid_argumentPKc+0x11c>
 10060cc:	100d4440 	call	100d444 <_ZSt9terminatev>
 10060d0:	00800084 	movi	r2,2
 10060d4:	d8800315 	stw	r2,12(sp)
 10060d8:	d8801017 	ldw	r2,64(sp)
 10060dc:	017fffc4 	movi	r5,-1
 10060e0:	11000204 	addi	r4,r2,8
 10060e4:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10060e8:	00bff516 	blt	zero,r2,10060c0 <_ZSt24__throw_invalid_argumentPKc+0x154>
 10060ec:	d9001017 	ldw	r4,64(sp)
 10060f0:	d9400044 	addi	r5,sp,1
 10060f4:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10060f8:	003ff106 	br	10060c0 <_ZSt24__throw_invalid_argumentPKc+0x154>

010060fc <_ZSt20__throw_domain_errorPKc>:
 10060fc:	deffe704 	addi	sp,sp,-100
 1006100:	00804074 	movhi	r2,257
 1006104:	10b3a604 	addi	r2,r2,-12648
 1006108:	d8800815 	stw	r2,32(sp)
 100610c:	00c040b4 	movhi	r3,258
 1006110:	18d13504 	addi	r3,r3,17620
 1006114:	00804034 	movhi	r2,256
 1006118:	10987a04 	addi	r2,r2,25064
 100611c:	d9001315 	stw	r4,76(sp)
 1006120:	d9000204 	addi	r4,sp,8
 1006124:	d8800b15 	stw	r2,44(sp)
 1006128:	dfc01815 	stw	ra,96(sp)
 100612c:	df001715 	stw	fp,92(sp)
 1006130:	ddc01615 	stw	r23,88(sp)
 1006134:	d8c00915 	stw	r3,36(sp)
 1006138:	dec00a15 	stw	sp,40(sp)
 100613c:	dec00c15 	stw	sp,48(sp)
 1006140:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1006144:	00800104 	movi	r2,4
 1006148:	d8800315 	stw	r2,12(sp)
 100614c:	d885883a 	add	r2,sp,r2
 1006150:	d8801415 	stw	r2,80(sp)
 1006154:	d9401317 	ldw	r5,76(sp)
 1006158:	1009883a 	mov	r4,r2
 100615c:	d9800084 	addi	r6,sp,2
 1006160:	10096dc0 	call	10096dc <_ZNSsC1EPKcRKSaIcE>
 1006164:	01000204 	movi	r4,8
 1006168:	100da700 	call	100da70 <__cxa_allocate_exception>
 100616c:	d8801215 	stw	r2,72(sp)
 1006170:	008000c4 	movi	r2,3
 1006174:	d8800315 	stw	r2,12(sp)
 1006178:	d9401417 	ldw	r5,80(sp)
 100617c:	d9001217 	ldw	r4,72(sp)
 1006180:	10074c00 	call	10074c0 <_ZNSt12domain_errorC1ERKSs>
 1006184:	d8800117 	ldw	r2,4(sp)
 1006188:	00c040f4 	movhi	r3,259
 100618c:	18cf2704 	addi	r3,r3,15516
 1006190:	10bffd04 	addi	r2,r2,-12
 1006194:	d8800f15 	stw	r2,60(sp)
 1006198:	10c0081e 	bne	r2,r3,10061bc <_ZSt20__throw_domain_errorPKc+0xc0>
 100619c:	d9001217 	ldw	r4,72(sp)
 10061a0:	00bfffc4 	movi	r2,-1
 10061a4:	014040b4 	movhi	r5,258
 10061a8:	2954cf04 	addi	r5,r5,21308
 10061ac:	01804034 	movhi	r6,256
 10061b0:	319aa604 	addi	r6,r6,27288
 10061b4:	d8800315 	stw	r2,12(sp)
 10061b8:	100d6e80 	call	100d6e8 <__cxa_throw>
 10061bc:	00800044 	movi	r2,1
 10061c0:	d8800315 	stw	r2,12(sp)
 10061c4:	d8800f17 	ldw	r2,60(sp)
 10061c8:	017fffc4 	movi	r5,-1
 10061cc:	11000204 	addi	r4,r2,8
 10061d0:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10061d4:	00bff116 	blt	zero,r2,100619c <_ZSt20__throw_domain_errorPKc+0xa0>
 10061d8:	d9000f17 	ldw	r4,60(sp)
 10061dc:	d80b883a 	mov	r5,sp
 10061e0:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10061e4:	003fed06 	br	100619c <_ZSt20__throw_domain_errorPKc+0xa0>
 10061e8:	d8800417 	ldw	r2,16(sp)
 10061ec:	d8c00317 	ldw	r3,12(sp)
 10061f0:	d9000517 	ldw	r4,20(sp)
 10061f4:	d8801515 	stw	r2,84(sp)
 10061f8:	00800044 	movi	r2,1
 10061fc:	18800426 	beq	r3,r2,1006210 <_ZSt20__throw_domain_errorPKc+0x114>
 1006200:	00800084 	movi	r2,2
 1006204:	18800826 	beq	r3,r2,1006228 <_ZSt20__throw_domain_errorPKc+0x12c>
 1006208:	008000c4 	movi	r2,3
 100620c:	18800226 	beq	r3,r2,1006218 <_ZSt20__throw_domain_errorPKc+0x11c>
 1006210:	00bfffc4 	movi	r2,-1
 1006214:	20801126 	beq	r4,r2,100625c <_ZSt20__throw_domain_errorPKc+0x160>
 1006218:	d9001517 	ldw	r4,84(sp)
 100621c:	00bfffc4 	movi	r2,-1
 1006220:	d8800315 	stw	r2,12(sp)
 1006224:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1006228:	d9001217 	ldw	r4,72(sp)
 100622c:	100da300 	call	100da30 <__cxa_free_exception>
 1006230:	d8801517 	ldw	r2,84(sp)
 1006234:	00c040f4 	movhi	r3,259
 1006238:	18cf2704 	addi	r3,r3,15516
 100623c:	d8801115 	stw	r2,68(sp)
 1006240:	d8800117 	ldw	r2,4(sp)
 1006244:	10bffd04 	addi	r2,r2,-12
 1006248:	d8801015 	stw	r2,64(sp)
 100624c:	10c0041e 	bne	r2,r3,1006260 <_ZSt20__throw_domain_errorPKc+0x164>
 1006250:	d8801117 	ldw	r2,68(sp)
 1006254:	d8801515 	stw	r2,84(sp)
 1006258:	003fef06 	br	1006218 <_ZSt20__throw_domain_errorPKc+0x11c>
 100625c:	100d4440 	call	100d444 <_ZSt9terminatev>
 1006260:	00800084 	movi	r2,2
 1006264:	d8800315 	stw	r2,12(sp)
 1006268:	d8801017 	ldw	r2,64(sp)
 100626c:	017fffc4 	movi	r5,-1
 1006270:	11000204 	addi	r4,r2,8
 1006274:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006278:	00bff516 	blt	zero,r2,1006250 <_ZSt20__throw_domain_errorPKc+0x154>
 100627c:	d9001017 	ldw	r4,64(sp)
 1006280:	d9400044 	addi	r5,sp,1
 1006284:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006288:	003ff106 	br	1006250 <_ZSt20__throw_domain_errorPKc+0x154>

0100628c <_ZSt19__throw_range_errorPKc>:
 100628c:	deffe704 	addi	sp,sp,-100
 1006290:	00804074 	movhi	r2,257
 1006294:	10b3a604 	addi	r2,r2,-12648
 1006298:	d8800815 	stw	r2,32(sp)
 100629c:	00c040b4 	movhi	r3,258
 10062a0:	18d13b04 	addi	r3,r3,17644
 10062a4:	00804034 	movhi	r2,256
 10062a8:	1098de04 	addi	r2,r2,25464
 10062ac:	d9001315 	stw	r4,76(sp)
 10062b0:	d9000204 	addi	r4,sp,8
 10062b4:	d8800b15 	stw	r2,44(sp)
 10062b8:	dfc01815 	stw	ra,96(sp)
 10062bc:	df001715 	stw	fp,92(sp)
 10062c0:	ddc01615 	stw	r23,88(sp)
 10062c4:	d8c00915 	stw	r3,36(sp)
 10062c8:	dec00a15 	stw	sp,40(sp)
 10062cc:	dec00c15 	stw	sp,48(sp)
 10062d0:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 10062d4:	00800104 	movi	r2,4
 10062d8:	d8800315 	stw	r2,12(sp)
 10062dc:	d885883a 	add	r2,sp,r2
 10062e0:	d8801415 	stw	r2,80(sp)
 10062e4:	d9401317 	ldw	r5,76(sp)
 10062e8:	1009883a 	mov	r4,r2
 10062ec:	d9800084 	addi	r6,sp,2
 10062f0:	10096dc0 	call	10096dc <_ZNSsC1EPKcRKSaIcE>
 10062f4:	01000204 	movi	r4,8
 10062f8:	100da700 	call	100da70 <__cxa_allocate_exception>
 10062fc:	d8801215 	stw	r2,72(sp)
 1006300:	008000c4 	movi	r2,3
 1006304:	d8800315 	stw	r2,12(sp)
 1006308:	d9401417 	ldw	r5,80(sp)
 100630c:	d9001217 	ldw	r4,72(sp)
 1006310:	10071e00 	call	10071e0 <_ZNSt11range_errorC1ERKSs>
 1006314:	d8800117 	ldw	r2,4(sp)
 1006318:	00c040f4 	movhi	r3,259
 100631c:	18cf2704 	addi	r3,r3,15516
 1006320:	10bffd04 	addi	r2,r2,-12
 1006324:	d8800f15 	stw	r2,60(sp)
 1006328:	10c0081e 	bne	r2,r3,100634c <_ZSt19__throw_range_errorPKc+0xc0>
 100632c:	d9001217 	ldw	r4,72(sp)
 1006330:	00bfffc4 	movi	r2,-1
 1006334:	014040b4 	movhi	r5,258
 1006338:	29549b04 	addi	r5,r5,21100
 100633c:	01804034 	movhi	r6,256
 1006340:	319a6204 	addi	r6,r6,27016
 1006344:	d8800315 	stw	r2,12(sp)
 1006348:	100d6e80 	call	100d6e8 <__cxa_throw>
 100634c:	00800044 	movi	r2,1
 1006350:	d8800315 	stw	r2,12(sp)
 1006354:	d8800f17 	ldw	r2,60(sp)
 1006358:	017fffc4 	movi	r5,-1
 100635c:	11000204 	addi	r4,r2,8
 1006360:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006364:	00bff116 	blt	zero,r2,100632c <_ZSt19__throw_range_errorPKc+0xa0>
 1006368:	d9000f17 	ldw	r4,60(sp)
 100636c:	d80b883a 	mov	r5,sp
 1006370:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006374:	003fed06 	br	100632c <_ZSt19__throw_range_errorPKc+0xa0>
 1006378:	d8800417 	ldw	r2,16(sp)
 100637c:	d8c00317 	ldw	r3,12(sp)
 1006380:	d9000517 	ldw	r4,20(sp)
 1006384:	d8801515 	stw	r2,84(sp)
 1006388:	00800044 	movi	r2,1
 100638c:	18800426 	beq	r3,r2,10063a0 <_ZSt19__throw_range_errorPKc+0x114>
 1006390:	00800084 	movi	r2,2
 1006394:	18800826 	beq	r3,r2,10063b8 <_ZSt19__throw_range_errorPKc+0x12c>
 1006398:	008000c4 	movi	r2,3
 100639c:	18800226 	beq	r3,r2,10063a8 <_ZSt19__throw_range_errorPKc+0x11c>
 10063a0:	00bfffc4 	movi	r2,-1
 10063a4:	20801126 	beq	r4,r2,10063ec <_ZSt19__throw_range_errorPKc+0x160>
 10063a8:	d9001517 	ldw	r4,84(sp)
 10063ac:	00bfffc4 	movi	r2,-1
 10063b0:	d8800315 	stw	r2,12(sp)
 10063b4:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 10063b8:	d9001217 	ldw	r4,72(sp)
 10063bc:	100da300 	call	100da30 <__cxa_free_exception>
 10063c0:	d8801517 	ldw	r2,84(sp)
 10063c4:	00c040f4 	movhi	r3,259
 10063c8:	18cf2704 	addi	r3,r3,15516
 10063cc:	d8801115 	stw	r2,68(sp)
 10063d0:	d8800117 	ldw	r2,4(sp)
 10063d4:	10bffd04 	addi	r2,r2,-12
 10063d8:	d8801015 	stw	r2,64(sp)
 10063dc:	10c0041e 	bne	r2,r3,10063f0 <_ZSt19__throw_range_errorPKc+0x164>
 10063e0:	d8801117 	ldw	r2,68(sp)
 10063e4:	d8801515 	stw	r2,84(sp)
 10063e8:	003fef06 	br	10063a8 <_ZSt19__throw_range_errorPKc+0x11c>
 10063ec:	100d4440 	call	100d444 <_ZSt9terminatev>
 10063f0:	00800084 	movi	r2,2
 10063f4:	d8800315 	stw	r2,12(sp)
 10063f8:	d8801017 	ldw	r2,64(sp)
 10063fc:	017fffc4 	movi	r5,-1
 1006400:	11000204 	addi	r4,r2,8
 1006404:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006408:	00bff516 	blt	zero,r2,10063e0 <_ZSt19__throw_range_errorPKc+0x154>
 100640c:	d9001017 	ldw	r4,64(sp)
 1006410:	d9400044 	addi	r5,sp,1
 1006414:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006418:	003ff106 	br	10063e0 <_ZSt19__throw_range_errorPKc+0x154>

0100641c <_ZSt21__throw_runtime_errorPKc>:
 100641c:	deffe704 	addi	sp,sp,-100
 1006420:	00804074 	movhi	r2,257
 1006424:	10b3a604 	addi	r2,r2,-12648
 1006428:	d8800815 	stw	r2,32(sp)
 100642c:	00c040b4 	movhi	r3,258
 1006430:	18d14104 	addi	r3,r3,17668
 1006434:	00804034 	movhi	r2,256
 1006438:	10994204 	addi	r2,r2,25864
 100643c:	d9001315 	stw	r4,76(sp)
 1006440:	d9000204 	addi	r4,sp,8
 1006444:	d8800b15 	stw	r2,44(sp)
 1006448:	dfc01815 	stw	ra,96(sp)
 100644c:	df001715 	stw	fp,92(sp)
 1006450:	ddc01615 	stw	r23,88(sp)
 1006454:	d8c00915 	stw	r3,36(sp)
 1006458:	dec00a15 	stw	sp,40(sp)
 100645c:	dec00c15 	stw	sp,48(sp)
 1006460:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1006464:	00800104 	movi	r2,4
 1006468:	d8800315 	stw	r2,12(sp)
 100646c:	d885883a 	add	r2,sp,r2
 1006470:	d8801415 	stw	r2,80(sp)
 1006474:	d9401317 	ldw	r5,76(sp)
 1006478:	1009883a 	mov	r4,r2
 100647c:	d9800084 	addi	r6,sp,2
 1006480:	10096dc0 	call	10096dc <_ZNSsC1EPKcRKSaIcE>
 1006484:	01000204 	movi	r4,8
 1006488:	100da700 	call	100da70 <__cxa_allocate_exception>
 100648c:	d8801215 	stw	r2,72(sp)
 1006490:	008000c4 	movi	r2,3
 1006494:	d8800315 	stw	r2,12(sp)
 1006498:	d9401417 	ldw	r5,80(sp)
 100649c:	d9001217 	ldw	r4,72(sp)
 10064a0:	10075280 	call	1007528 <_ZNSt13runtime_errorC1ERKSs>
 10064a4:	d8800117 	ldw	r2,4(sp)
 10064a8:	00c040f4 	movhi	r3,259
 10064ac:	18cf2704 	addi	r3,r3,15516
 10064b0:	10bffd04 	addi	r2,r2,-12
 10064b4:	d8800f15 	stw	r2,60(sp)
 10064b8:	10c0081e 	bne	r2,r3,10064dc <_ZSt21__throw_runtime_errorPKc+0xc0>
 10064bc:	d9001217 	ldw	r4,72(sp)
 10064c0:	00bfffc4 	movi	r2,-1
 10064c4:	014040b4 	movhi	r5,258
 10064c8:	2954f904 	addi	r5,r5,21476
 10064cc:	01804034 	movhi	r6,256
 10064d0:	319d7604 	addi	r6,r6,30168
 10064d4:	d8800315 	stw	r2,12(sp)
 10064d8:	100d6e80 	call	100d6e8 <__cxa_throw>
 10064dc:	00800044 	movi	r2,1
 10064e0:	d8800315 	stw	r2,12(sp)
 10064e4:	d8800f17 	ldw	r2,60(sp)
 10064e8:	017fffc4 	movi	r5,-1
 10064ec:	11000204 	addi	r4,r2,8
 10064f0:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10064f4:	00bff116 	blt	zero,r2,10064bc <_ZSt21__throw_runtime_errorPKc+0xa0>
 10064f8:	d9000f17 	ldw	r4,60(sp)
 10064fc:	d80b883a 	mov	r5,sp
 1006500:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006504:	003fed06 	br	10064bc <_ZSt21__throw_runtime_errorPKc+0xa0>
 1006508:	d8800417 	ldw	r2,16(sp)
 100650c:	d8c00317 	ldw	r3,12(sp)
 1006510:	d9000517 	ldw	r4,20(sp)
 1006514:	d8801515 	stw	r2,84(sp)
 1006518:	00800044 	movi	r2,1
 100651c:	18800426 	beq	r3,r2,1006530 <_ZSt21__throw_runtime_errorPKc+0x114>
 1006520:	00800084 	movi	r2,2
 1006524:	18800826 	beq	r3,r2,1006548 <_ZSt21__throw_runtime_errorPKc+0x12c>
 1006528:	008000c4 	movi	r2,3
 100652c:	18800226 	beq	r3,r2,1006538 <_ZSt21__throw_runtime_errorPKc+0x11c>
 1006530:	00bfffc4 	movi	r2,-1
 1006534:	20801126 	beq	r4,r2,100657c <_ZSt21__throw_runtime_errorPKc+0x160>
 1006538:	d9001517 	ldw	r4,84(sp)
 100653c:	00bfffc4 	movi	r2,-1
 1006540:	d8800315 	stw	r2,12(sp)
 1006544:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1006548:	d9001217 	ldw	r4,72(sp)
 100654c:	100da300 	call	100da30 <__cxa_free_exception>
 1006550:	d8801517 	ldw	r2,84(sp)
 1006554:	00c040f4 	movhi	r3,259
 1006558:	18cf2704 	addi	r3,r3,15516
 100655c:	d8801115 	stw	r2,68(sp)
 1006560:	d8800117 	ldw	r2,4(sp)
 1006564:	10bffd04 	addi	r2,r2,-12
 1006568:	d8801015 	stw	r2,64(sp)
 100656c:	10c0041e 	bne	r2,r3,1006580 <_ZSt21__throw_runtime_errorPKc+0x164>
 1006570:	d8801117 	ldw	r2,68(sp)
 1006574:	d8801515 	stw	r2,84(sp)
 1006578:	003fef06 	br	1006538 <_ZSt21__throw_runtime_errorPKc+0x11c>
 100657c:	100d4440 	call	100d444 <_ZSt9terminatev>
 1006580:	00800084 	movi	r2,2
 1006584:	d8800315 	stw	r2,12(sp)
 1006588:	d8801017 	ldw	r2,64(sp)
 100658c:	017fffc4 	movi	r5,-1
 1006590:	11000204 	addi	r4,r2,8
 1006594:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006598:	00bff516 	blt	zero,r2,1006570 <_ZSt21__throw_runtime_errorPKc+0x154>
 100659c:	d9001017 	ldw	r4,64(sp)
 10065a0:	d9400044 	addi	r5,sp,1
 10065a4:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10065a8:	003ff106 	br	1006570 <_ZSt21__throw_runtime_errorPKc+0x154>

010065ac <_ZSt20__throw_out_of_rangePKc>:
 10065ac:	deffe704 	addi	sp,sp,-100
 10065b0:	00804074 	movhi	r2,257
 10065b4:	10b3a604 	addi	r2,r2,-12648
 10065b8:	d8800815 	stw	r2,32(sp)
 10065bc:	00c040b4 	movhi	r3,258
 10065c0:	18d14704 	addi	r3,r3,17692
 10065c4:	00804034 	movhi	r2,256
 10065c8:	1099a604 	addi	r2,r2,26264
 10065cc:	d9001315 	stw	r4,76(sp)
 10065d0:	d9000204 	addi	r4,sp,8
 10065d4:	d8800b15 	stw	r2,44(sp)
 10065d8:	dfc01815 	stw	ra,96(sp)
 10065dc:	df001715 	stw	fp,92(sp)
 10065e0:	ddc01615 	stw	r23,88(sp)
 10065e4:	d8c00915 	stw	r3,36(sp)
 10065e8:	dec00a15 	stw	sp,40(sp)
 10065ec:	dec00c15 	stw	sp,48(sp)
 10065f0:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 10065f4:	00800104 	movi	r2,4
 10065f8:	d8800315 	stw	r2,12(sp)
 10065fc:	d885883a 	add	r2,sp,r2
 1006600:	d8801415 	stw	r2,80(sp)
 1006604:	d9401317 	ldw	r5,76(sp)
 1006608:	1009883a 	mov	r4,r2
 100660c:	d9800084 	addi	r6,sp,2
 1006610:	10096dc0 	call	10096dc <_ZNSsC1EPKcRKSaIcE>
 1006614:	01000204 	movi	r4,8
 1006618:	100da700 	call	100da70 <__cxa_allocate_exception>
 100661c:	d8801215 	stw	r2,72(sp)
 1006620:	008000c4 	movi	r2,3
 1006624:	d8800315 	stw	r2,12(sp)
 1006628:	d9401417 	ldw	r5,80(sp)
 100662c:	d9001217 	ldw	r4,72(sp)
 1006630:	10073a00 	call	10073a0 <_ZNSt12out_of_rangeC1ERKSs>
 1006634:	d8800117 	ldw	r2,4(sp)
 1006638:	00c040f4 	movhi	r3,259
 100663c:	18cf2704 	addi	r3,r3,15516
 1006640:	10bffd04 	addi	r2,r2,-12
 1006644:	d8800f15 	stw	r2,60(sp)
 1006648:	10c0081e 	bne	r2,r3,100666c <_ZSt20__throw_out_of_rangePKc+0xc0>
 100664c:	d9001217 	ldw	r4,72(sp)
 1006650:	00bfffc4 	movi	r2,-1
 1006654:	014040b4 	movhi	r5,258
 1006658:	2954a704 	addi	r5,r5,21148
 100665c:	01804034 	movhi	r6,256
 1006660:	319a7304 	addi	r6,r6,27084
 1006664:	d8800315 	stw	r2,12(sp)
 1006668:	100d6e80 	call	100d6e8 <__cxa_throw>
 100666c:	00800044 	movi	r2,1
 1006670:	d8800315 	stw	r2,12(sp)
 1006674:	d8800f17 	ldw	r2,60(sp)
 1006678:	017fffc4 	movi	r5,-1
 100667c:	11000204 	addi	r4,r2,8
 1006680:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006684:	00bff116 	blt	zero,r2,100664c <_ZSt20__throw_out_of_rangePKc+0xa0>
 1006688:	d9000f17 	ldw	r4,60(sp)
 100668c:	d80b883a 	mov	r5,sp
 1006690:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006694:	003fed06 	br	100664c <_ZSt20__throw_out_of_rangePKc+0xa0>
 1006698:	d8800417 	ldw	r2,16(sp)
 100669c:	d8c00317 	ldw	r3,12(sp)
 10066a0:	d9000517 	ldw	r4,20(sp)
 10066a4:	d8801515 	stw	r2,84(sp)
 10066a8:	00800044 	movi	r2,1
 10066ac:	18800426 	beq	r3,r2,10066c0 <_ZSt20__throw_out_of_rangePKc+0x114>
 10066b0:	00800084 	movi	r2,2
 10066b4:	18800826 	beq	r3,r2,10066d8 <_ZSt20__throw_out_of_rangePKc+0x12c>
 10066b8:	008000c4 	movi	r2,3
 10066bc:	18800226 	beq	r3,r2,10066c8 <_ZSt20__throw_out_of_rangePKc+0x11c>
 10066c0:	00bfffc4 	movi	r2,-1
 10066c4:	20801126 	beq	r4,r2,100670c <_ZSt20__throw_out_of_rangePKc+0x160>
 10066c8:	d9001517 	ldw	r4,84(sp)
 10066cc:	00bfffc4 	movi	r2,-1
 10066d0:	d8800315 	stw	r2,12(sp)
 10066d4:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 10066d8:	d9001217 	ldw	r4,72(sp)
 10066dc:	100da300 	call	100da30 <__cxa_free_exception>
 10066e0:	d8801517 	ldw	r2,84(sp)
 10066e4:	00c040f4 	movhi	r3,259
 10066e8:	18cf2704 	addi	r3,r3,15516
 10066ec:	d8801115 	stw	r2,68(sp)
 10066f0:	d8800117 	ldw	r2,4(sp)
 10066f4:	10bffd04 	addi	r2,r2,-12
 10066f8:	d8801015 	stw	r2,64(sp)
 10066fc:	10c0041e 	bne	r2,r3,1006710 <_ZSt20__throw_out_of_rangePKc+0x164>
 1006700:	d8801117 	ldw	r2,68(sp)
 1006704:	d8801515 	stw	r2,84(sp)
 1006708:	003fef06 	br	10066c8 <_ZSt20__throw_out_of_rangePKc+0x11c>
 100670c:	100d4440 	call	100d444 <_ZSt9terminatev>
 1006710:	00800084 	movi	r2,2
 1006714:	d8800315 	stw	r2,12(sp)
 1006718:	d8801017 	ldw	r2,64(sp)
 100671c:	017fffc4 	movi	r5,-1
 1006720:	11000204 	addi	r4,r2,8
 1006724:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006728:	00bff516 	blt	zero,r2,1006700 <_ZSt20__throw_out_of_rangePKc+0x154>
 100672c:	d9001017 	ldw	r4,64(sp)
 1006730:	d9400044 	addi	r5,sp,1
 1006734:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006738:	003ff106 	br	1006700 <_ZSt20__throw_out_of_rangePKc+0x154>

0100673c <_ZSt20__throw_length_errorPKc>:
 100673c:	deffe704 	addi	sp,sp,-100
 1006740:	00804074 	movhi	r2,257
 1006744:	10b3a604 	addi	r2,r2,-12648
 1006748:	d8800815 	stw	r2,32(sp)
 100674c:	00c040b4 	movhi	r3,258
 1006750:	18d14d04 	addi	r3,r3,17716
 1006754:	00804034 	movhi	r2,256
 1006758:	109a0a04 	addi	r2,r2,26664
 100675c:	d9001315 	stw	r4,76(sp)
 1006760:	d9000204 	addi	r4,sp,8
 1006764:	d8800b15 	stw	r2,44(sp)
 1006768:	dfc01815 	stw	ra,96(sp)
 100676c:	df001715 	stw	fp,92(sp)
 1006770:	ddc01615 	stw	r23,88(sp)
 1006774:	d8c00915 	stw	r3,36(sp)
 1006778:	dec00a15 	stw	sp,40(sp)
 100677c:	dec00c15 	stw	sp,48(sp)
 1006780:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1006784:	00800104 	movi	r2,4
 1006788:	d8800315 	stw	r2,12(sp)
 100678c:	d885883a 	add	r2,sp,r2
 1006790:	d8801415 	stw	r2,80(sp)
 1006794:	d9401317 	ldw	r5,76(sp)
 1006798:	1009883a 	mov	r4,r2
 100679c:	d9800084 	addi	r6,sp,2
 10067a0:	10096dc0 	call	10096dc <_ZNSsC1EPKcRKSaIcE>
 10067a4:	01000204 	movi	r4,8
 10067a8:	100da700 	call	100da70 <__cxa_allocate_exception>
 10067ac:	d8801215 	stw	r2,72(sp)
 10067b0:	008000c4 	movi	r2,3
 10067b4:	d8800315 	stw	r2,12(sp)
 10067b8:	d9401417 	ldw	r5,80(sp)
 10067bc:	d9001217 	ldw	r4,72(sp)
 10067c0:	10074000 	call	1007400 <_ZNSt12length_errorC1ERKSs>
 10067c4:	d8800117 	ldw	r2,4(sp)
 10067c8:	00c040f4 	movhi	r3,259
 10067cc:	18cf2704 	addi	r3,r3,15516
 10067d0:	10bffd04 	addi	r2,r2,-12
 10067d4:	d8800f15 	stw	r2,60(sp)
 10067d8:	10c0081e 	bne	r2,r3,10067fc <_ZSt20__throw_length_errorPKc+0xc0>
 10067dc:	d9001217 	ldw	r4,72(sp)
 10067e0:	00bfffc4 	movi	r2,-1
 10067e4:	014040b4 	movhi	r5,258
 10067e8:	2954b404 	addi	r5,r5,21200
 10067ec:	01804034 	movhi	r6,256
 10067f0:	319a8404 	addi	r6,r6,27152
 10067f4:	d8800315 	stw	r2,12(sp)
 10067f8:	100d6e80 	call	100d6e8 <__cxa_throw>
 10067fc:	00800044 	movi	r2,1
 1006800:	d8800315 	stw	r2,12(sp)
 1006804:	d8800f17 	ldw	r2,60(sp)
 1006808:	017fffc4 	movi	r5,-1
 100680c:	11000204 	addi	r4,r2,8
 1006810:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006814:	00bff116 	blt	zero,r2,10067dc <_ZSt20__throw_length_errorPKc+0xa0>
 1006818:	d9000f17 	ldw	r4,60(sp)
 100681c:	d80b883a 	mov	r5,sp
 1006820:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006824:	003fed06 	br	10067dc <_ZSt20__throw_length_errorPKc+0xa0>
 1006828:	d8800417 	ldw	r2,16(sp)
 100682c:	d8c00317 	ldw	r3,12(sp)
 1006830:	d9000517 	ldw	r4,20(sp)
 1006834:	d8801515 	stw	r2,84(sp)
 1006838:	00800044 	movi	r2,1
 100683c:	18800426 	beq	r3,r2,1006850 <_ZSt20__throw_length_errorPKc+0x114>
 1006840:	00800084 	movi	r2,2
 1006844:	18800826 	beq	r3,r2,1006868 <_ZSt20__throw_length_errorPKc+0x12c>
 1006848:	008000c4 	movi	r2,3
 100684c:	18800226 	beq	r3,r2,1006858 <_ZSt20__throw_length_errorPKc+0x11c>
 1006850:	00bfffc4 	movi	r2,-1
 1006854:	20801126 	beq	r4,r2,100689c <_ZSt20__throw_length_errorPKc+0x160>
 1006858:	d9001517 	ldw	r4,84(sp)
 100685c:	00bfffc4 	movi	r2,-1
 1006860:	d8800315 	stw	r2,12(sp)
 1006864:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1006868:	d9001217 	ldw	r4,72(sp)
 100686c:	100da300 	call	100da30 <__cxa_free_exception>
 1006870:	d8801517 	ldw	r2,84(sp)
 1006874:	00c040f4 	movhi	r3,259
 1006878:	18cf2704 	addi	r3,r3,15516
 100687c:	d8801115 	stw	r2,68(sp)
 1006880:	d8800117 	ldw	r2,4(sp)
 1006884:	10bffd04 	addi	r2,r2,-12
 1006888:	d8801015 	stw	r2,64(sp)
 100688c:	10c0041e 	bne	r2,r3,10068a0 <_ZSt20__throw_length_errorPKc+0x164>
 1006890:	d8801117 	ldw	r2,68(sp)
 1006894:	d8801515 	stw	r2,84(sp)
 1006898:	003fef06 	br	1006858 <_ZSt20__throw_length_errorPKc+0x11c>
 100689c:	100d4440 	call	100d444 <_ZSt9terminatev>
 10068a0:	00800084 	movi	r2,2
 10068a4:	d8800315 	stw	r2,12(sp)
 10068a8:	d8801017 	ldw	r2,64(sp)
 10068ac:	017fffc4 	movi	r5,-1
 10068b0:	11000204 	addi	r4,r2,8
 10068b4:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10068b8:	00bff516 	blt	zero,r2,1006890 <_ZSt20__throw_length_errorPKc+0x154>
 10068bc:	d9001017 	ldw	r4,64(sp)
 10068c0:	d9400044 	addi	r5,sp,1
 10068c4:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10068c8:	003ff106 	br	1006890 <_ZSt20__throw_length_errorPKc+0x154>

010068cc <_ZNSt15underflow_errorD0Ev>:
 10068cc:	defffe04 	addi	sp,sp,-8
 10068d0:	008040b4 	movhi	r2,258
 10068d4:	10948b04 	addi	r2,r2,21036
 10068d8:	dc400015 	stw	r17,0(sp)
 10068dc:	20800015 	stw	r2,0(r4)
 10068e0:	2023883a 	mov	r17,r4
 10068e4:	dfc00115 	stw	ra,4(sp)
 10068e8:	10076dc0 	call	10076dc <_ZNSt13runtime_errorD2Ev>
 10068ec:	8809883a 	mov	r4,r17
 10068f0:	dfc00117 	ldw	ra,4(sp)
 10068f4:	dc400017 	ldw	r17,0(sp)
 10068f8:	dec00204 	addi	sp,sp,8
 10068fc:	100d6681 	jmpi	100d668 <_ZdlPv>

01006900 <_ZNSt15underflow_errorD1Ev>:
 1006900:	008040b4 	movhi	r2,258
 1006904:	10948b04 	addi	r2,r2,21036
 1006908:	20800015 	stw	r2,0(r4)
 100690c:	10076dc1 	jmpi	10076dc <_ZNSt13runtime_errorD2Ev>

01006910 <_ZNSt14overflow_errorD0Ev>:
 1006910:	defffe04 	addi	sp,sp,-8
 1006914:	008040b4 	movhi	r2,258
 1006918:	10949804 	addi	r2,r2,21088
 100691c:	dc400015 	stw	r17,0(sp)
 1006920:	20800015 	stw	r2,0(r4)
 1006924:	2023883a 	mov	r17,r4
 1006928:	dfc00115 	stw	ra,4(sp)
 100692c:	10076dc0 	call	10076dc <_ZNSt13runtime_errorD2Ev>
 1006930:	8809883a 	mov	r4,r17
 1006934:	dfc00117 	ldw	ra,4(sp)
 1006938:	dc400017 	ldw	r17,0(sp)
 100693c:	dec00204 	addi	sp,sp,8
 1006940:	100d6681 	jmpi	100d668 <_ZdlPv>

01006944 <_ZNSt14overflow_errorD1Ev>:
 1006944:	008040b4 	movhi	r2,258
 1006948:	10949804 	addi	r2,r2,21088
 100694c:	20800015 	stw	r2,0(r4)
 1006950:	10076dc1 	jmpi	10076dc <_ZNSt13runtime_errorD2Ev>

01006954 <_ZNSt11range_errorD0Ev>:
 1006954:	defffe04 	addi	sp,sp,-8
 1006958:	008040b4 	movhi	r2,258
 100695c:	1094a404 	addi	r2,r2,21136
 1006960:	dc400015 	stw	r17,0(sp)
 1006964:	20800015 	stw	r2,0(r4)
 1006968:	2023883a 	mov	r17,r4
 100696c:	dfc00115 	stw	ra,4(sp)
 1006970:	10076dc0 	call	10076dc <_ZNSt13runtime_errorD2Ev>
 1006974:	8809883a 	mov	r4,r17
 1006978:	dfc00117 	ldw	ra,4(sp)
 100697c:	dc400017 	ldw	r17,0(sp)
 1006980:	dec00204 	addi	sp,sp,8
 1006984:	100d6681 	jmpi	100d668 <_ZdlPv>

01006988 <_ZNSt11range_errorD1Ev>:
 1006988:	008040b4 	movhi	r2,258
 100698c:	1094a404 	addi	r2,r2,21136
 1006990:	20800015 	stw	r2,0(r4)
 1006994:	10076dc1 	jmpi	10076dc <_ZNSt13runtime_errorD2Ev>

01006998 <_ZNSt12out_of_rangeD0Ev>:
 1006998:	defffe04 	addi	sp,sp,-8
 100699c:	008040b4 	movhi	r2,258
 10069a0:	1094b104 	addi	r2,r2,21188
 10069a4:	dc400015 	stw	r17,0(sp)
 10069a8:	20800015 	stw	r2,0(r4)
 10069ac:	2023883a 	mov	r17,r4
 10069b0:	dfc00115 	stw	ra,4(sp)
 10069b4:	10078ec0 	call	10078ec <_ZNSt11logic_errorD2Ev>
 10069b8:	8809883a 	mov	r4,r17
 10069bc:	dfc00117 	ldw	ra,4(sp)
 10069c0:	dc400017 	ldw	r17,0(sp)
 10069c4:	dec00204 	addi	sp,sp,8
 10069c8:	100d6681 	jmpi	100d668 <_ZdlPv>

010069cc <_ZNSt12out_of_rangeD1Ev>:
 10069cc:	008040b4 	movhi	r2,258
 10069d0:	1094b104 	addi	r2,r2,21188
 10069d4:	20800015 	stw	r2,0(r4)
 10069d8:	10078ec1 	jmpi	10078ec <_ZNSt11logic_errorD2Ev>

010069dc <_ZNSt12length_errorD0Ev>:
 10069dc:	defffe04 	addi	sp,sp,-8
 10069e0:	008040b4 	movhi	r2,258
 10069e4:	1094be04 	addi	r2,r2,21240
 10069e8:	dc400015 	stw	r17,0(sp)
 10069ec:	20800015 	stw	r2,0(r4)
 10069f0:	2023883a 	mov	r17,r4
 10069f4:	dfc00115 	stw	ra,4(sp)
 10069f8:	10078ec0 	call	10078ec <_ZNSt11logic_errorD2Ev>
 10069fc:	8809883a 	mov	r4,r17
 1006a00:	dfc00117 	ldw	ra,4(sp)
 1006a04:	dc400017 	ldw	r17,0(sp)
 1006a08:	dec00204 	addi	sp,sp,8
 1006a0c:	100d6681 	jmpi	100d668 <_ZdlPv>

01006a10 <_ZNSt12length_errorD1Ev>:
 1006a10:	008040b4 	movhi	r2,258
 1006a14:	1094be04 	addi	r2,r2,21240
 1006a18:	20800015 	stw	r2,0(r4)
 1006a1c:	10078ec1 	jmpi	10078ec <_ZNSt11logic_errorD2Ev>

01006a20 <_ZNSt16invalid_argumentD0Ev>:
 1006a20:	defffe04 	addi	sp,sp,-8
 1006a24:	008040b4 	movhi	r2,258
 1006a28:	1094cc04 	addi	r2,r2,21296
 1006a2c:	dc400015 	stw	r17,0(sp)
 1006a30:	20800015 	stw	r2,0(r4)
 1006a34:	2023883a 	mov	r17,r4
 1006a38:	dfc00115 	stw	ra,4(sp)
 1006a3c:	10078ec0 	call	10078ec <_ZNSt11logic_errorD2Ev>
 1006a40:	8809883a 	mov	r4,r17
 1006a44:	dfc00117 	ldw	ra,4(sp)
 1006a48:	dc400017 	ldw	r17,0(sp)
 1006a4c:	dec00204 	addi	sp,sp,8
 1006a50:	100d6681 	jmpi	100d668 <_ZdlPv>

01006a54 <_ZNSt16invalid_argumentD1Ev>:
 1006a54:	008040b4 	movhi	r2,258
 1006a58:	1094cc04 	addi	r2,r2,21296
 1006a5c:	20800015 	stw	r2,0(r4)
 1006a60:	10078ec1 	jmpi	10078ec <_ZNSt11logic_errorD2Ev>

01006a64 <_ZNSt12domain_errorD0Ev>:
 1006a64:	defffe04 	addi	sp,sp,-8
 1006a68:	008040b4 	movhi	r2,258
 1006a6c:	1094d904 	addi	r2,r2,21348
 1006a70:	dc400015 	stw	r17,0(sp)
 1006a74:	20800015 	stw	r2,0(r4)
 1006a78:	2023883a 	mov	r17,r4
 1006a7c:	dfc00115 	stw	ra,4(sp)
 1006a80:	10078ec0 	call	10078ec <_ZNSt11logic_errorD2Ev>
 1006a84:	8809883a 	mov	r4,r17
 1006a88:	dfc00117 	ldw	ra,4(sp)
 1006a8c:	dc400017 	ldw	r17,0(sp)
 1006a90:	dec00204 	addi	sp,sp,8
 1006a94:	100d6681 	jmpi	100d668 <_ZdlPv>

01006a98 <_ZNSt12domain_errorD1Ev>:
 1006a98:	008040b4 	movhi	r2,258
 1006a9c:	1094d904 	addi	r2,r2,21348
 1006aa0:	20800015 	stw	r2,0(r4)
 1006aa4:	10078ec1 	jmpi	10078ec <_ZNSt11logic_errorD2Ev>

01006aa8 <_ZNKSt8ios_base7failure4whatEv>:
 1006aa8:	20800117 	ldw	r2,4(r4)
 1006aac:	f800283a 	ret

01006ab0 <_ZNSt8ios_base7failureD1Ev>:
 1006ab0:	deffeb04 	addi	sp,sp,-84
 1006ab4:	00804074 	movhi	r2,257
 1006ab8:	10b3a604 	addi	r2,r2,-12648
 1006abc:	00c040b4 	movhi	r3,258
 1006ac0:	18d15304 	addi	r3,r3,17740
 1006ac4:	d8800715 	stw	r2,28(sp)
 1006ac8:	d9001015 	stw	r4,64(sp)
 1006acc:	00804034 	movhi	r2,256
 1006ad0:	109add04 	addi	r2,r2,27508
 1006ad4:	d9000104 	addi	r4,sp,4
 1006ad8:	d8c00815 	stw	r3,32(sp)
 1006adc:	d8800a15 	stw	r2,40(sp)
 1006ae0:	dfc01415 	stw	ra,80(sp)
 1006ae4:	df001315 	stw	fp,76(sp)
 1006ae8:	ddc01215 	stw	r23,72(sp)
 1006aec:	dec00915 	stw	sp,36(sp)
 1006af0:	dec00b15 	stw	sp,44(sp)
 1006af4:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1006af8:	d8c01017 	ldw	r3,64(sp)
 1006afc:	18800117 	ldw	r2,4(r3)
 1006b00:	00c040b4 	movhi	r3,258
 1006b04:	18d4de04 	addi	r3,r3,21368
 1006b08:	10bffd04 	addi	r2,r2,-12
 1006b0c:	d8800e15 	stw	r2,56(sp)
 1006b10:	d8801017 	ldw	r2,64(sp)
 1006b14:	10c00015 	stw	r3,0(r2)
 1006b18:	d8c00e17 	ldw	r3,56(sp)
 1006b1c:	008040f4 	movhi	r2,259
 1006b20:	108f2704 	addi	r2,r2,15516
 1006b24:	1880091e 	bne	r3,r2,1006b4c <_ZNSt8ios_base7failureD1Ev+0x9c>
 1006b28:	d9001017 	ldw	r4,64(sp)
 1006b2c:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1006b30:	d9000104 	addi	r4,sp,4
 1006b34:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1006b38:	dfc01417 	ldw	ra,80(sp)
 1006b3c:	df001317 	ldw	fp,76(sp)
 1006b40:	ddc01217 	ldw	r23,72(sp)
 1006b44:	dec01504 	addi	sp,sp,84
 1006b48:	f800283a 	ret
 1006b4c:	00800044 	movi	r2,1
 1006b50:	d8800215 	stw	r2,8(sp)
 1006b54:	19000204 	addi	r4,r3,8
 1006b58:	017fffc4 	movi	r5,-1
 1006b5c:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006b60:	00bff116 	blt	zero,r2,1006b28 <_ZNSt8ios_base7failureD1Ev+0x78>
 1006b64:	d9000e17 	ldw	r4,56(sp)
 1006b68:	d80b883a 	mov	r5,sp
 1006b6c:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006b70:	003fed06 	br	1006b28 <_ZNSt8ios_base7failureD1Ev+0x78>
 1006b74:	d8800417 	ldw	r2,16(sp)
 1006b78:	d8c00317 	ldw	r3,12(sp)
 1006b7c:	d9001017 	ldw	r4,64(sp)
 1006b80:	d8800f15 	stw	r2,60(sp)
 1006b84:	d8c01115 	stw	r3,68(sp)
 1006b88:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1006b8c:	d8c00f17 	ldw	r3,60(sp)
 1006b90:	00bfffc4 	movi	r2,-1
 1006b94:	18800326 	beq	r3,r2,1006ba4 <_ZNSt8ios_base7failureD1Ev+0xf4>
 1006b98:	d9001117 	ldw	r4,68(sp)
 1006b9c:	d8800215 	stw	r2,8(sp)
 1006ba0:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1006ba4:	d9001117 	ldw	r4,68(sp)
 1006ba8:	00bfffc4 	movi	r2,-1
 1006bac:	d8800215 	stw	r2,8(sp)
 1006bb0:	100cd180 	call	100cd18 <__cxa_call_unexpected>

01006bb4 <_ZNSt8ios_base7failureC1ERKSs>:
 1006bb4:	deffec04 	addi	sp,sp,-80
 1006bb8:	00804074 	movhi	r2,257
 1006bbc:	10b3a604 	addi	r2,r2,-12648
 1006bc0:	00c040b4 	movhi	r3,258
 1006bc4:	18d15704 	addi	r3,r3,17756
 1006bc8:	d8800615 	stw	r2,24(sp)
 1006bcc:	d9000d15 	stw	r4,52(sp)
 1006bd0:	00804034 	movhi	r2,256
 1006bd4:	109b1104 	addi	r2,r2,27716
 1006bd8:	d809883a 	mov	r4,sp
 1006bdc:	d8c00715 	stw	r3,28(sp)
 1006be0:	d8800915 	stw	r2,36(sp)
 1006be4:	d9400e15 	stw	r5,56(sp)
 1006be8:	dfc01315 	stw	ra,76(sp)
 1006bec:	df001215 	stw	fp,72(sp)
 1006bf0:	ddc01115 	stw	r23,68(sp)
 1006bf4:	dec00815 	stw	sp,32(sp)
 1006bf8:	dec00a15 	stw	sp,40(sp)
 1006bfc:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1006c00:	d8c00d17 	ldw	r3,52(sp)
 1006c04:	008040b4 	movhi	r2,258
 1006c08:	1094de04 	addi	r2,r2,21368
 1006c0c:	d9400e17 	ldw	r5,56(sp)
 1006c10:	18800015 	stw	r2,0(r3)
 1006c14:	d8800d17 	ldw	r2,52(sp)
 1006c18:	00c00044 	movi	r3,1
 1006c1c:	d8c00115 	stw	r3,4(sp)
 1006c20:	11000104 	addi	r4,r2,4
 1006c24:	10098d80 	call	10098d8 <_ZNSsC1ERKSs>
 1006c28:	d809883a 	mov	r4,sp
 1006c2c:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1006c30:	dfc01317 	ldw	ra,76(sp)
 1006c34:	df001217 	ldw	fp,72(sp)
 1006c38:	ddc01117 	ldw	r23,68(sp)
 1006c3c:	dec01404 	addi	sp,sp,80
 1006c40:	f800283a 	ret
 1006c44:	d8c00317 	ldw	r3,12(sp)
 1006c48:	d8800217 	ldw	r2,8(sp)
 1006c4c:	d9000d17 	ldw	r4,52(sp)
 1006c50:	d8c00f15 	stw	r3,60(sp)
 1006c54:	d8801015 	stw	r2,64(sp)
 1006c58:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1006c5c:	d8c00f17 	ldw	r3,60(sp)
 1006c60:	00bfffc4 	movi	r2,-1
 1006c64:	18800326 	beq	r3,r2,1006c74 <_ZNSt8ios_base7failureC1ERKSs+0xc0>
 1006c68:	d9001017 	ldw	r4,64(sp)
 1006c6c:	d8800115 	stw	r2,4(sp)
 1006c70:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1006c74:	d9001017 	ldw	r4,64(sp)
 1006c78:	00bfffc4 	movi	r2,-1
 1006c7c:	d8800115 	stw	r2,4(sp)
 1006c80:	100cd180 	call	100cd18 <__cxa_call_unexpected>

01006c84 <_ZNSt8ios_base7failureC2ERKSs>:
 1006c84:	deffec04 	addi	sp,sp,-80
 1006c88:	00804074 	movhi	r2,257
 1006c8c:	10b3a604 	addi	r2,r2,-12648
 1006c90:	00c040b4 	movhi	r3,258
 1006c94:	18d15b04 	addi	r3,r3,17772
 1006c98:	d8800615 	stw	r2,24(sp)
 1006c9c:	d9000d15 	stw	r4,52(sp)
 1006ca0:	00804034 	movhi	r2,256
 1006ca4:	109b4504 	addi	r2,r2,27924
 1006ca8:	d809883a 	mov	r4,sp
 1006cac:	d8c00715 	stw	r3,28(sp)
 1006cb0:	d8800915 	stw	r2,36(sp)
 1006cb4:	d9400e15 	stw	r5,56(sp)
 1006cb8:	dfc01315 	stw	ra,76(sp)
 1006cbc:	df001215 	stw	fp,72(sp)
 1006cc0:	ddc01115 	stw	r23,68(sp)
 1006cc4:	dec00815 	stw	sp,32(sp)
 1006cc8:	dec00a15 	stw	sp,40(sp)
 1006ccc:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1006cd0:	d8c00d17 	ldw	r3,52(sp)
 1006cd4:	008040b4 	movhi	r2,258
 1006cd8:	1094de04 	addi	r2,r2,21368
 1006cdc:	d9400e17 	ldw	r5,56(sp)
 1006ce0:	18800015 	stw	r2,0(r3)
 1006ce4:	d8800d17 	ldw	r2,52(sp)
 1006ce8:	00c00044 	movi	r3,1
 1006cec:	d8c00115 	stw	r3,4(sp)
 1006cf0:	11000104 	addi	r4,r2,4
 1006cf4:	10098d80 	call	10098d8 <_ZNSsC1ERKSs>
 1006cf8:	d809883a 	mov	r4,sp
 1006cfc:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1006d00:	dfc01317 	ldw	ra,76(sp)
 1006d04:	df001217 	ldw	fp,72(sp)
 1006d08:	ddc01117 	ldw	r23,68(sp)
 1006d0c:	dec01404 	addi	sp,sp,80
 1006d10:	f800283a 	ret
 1006d14:	d8c00317 	ldw	r3,12(sp)
 1006d18:	d8800217 	ldw	r2,8(sp)
 1006d1c:	d9000d17 	ldw	r4,52(sp)
 1006d20:	d8c00f15 	stw	r3,60(sp)
 1006d24:	d8801015 	stw	r2,64(sp)
 1006d28:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1006d2c:	d8c00f17 	ldw	r3,60(sp)
 1006d30:	00bfffc4 	movi	r2,-1
 1006d34:	18800326 	beq	r3,r2,1006d44 <_ZNSt8ios_base7failureC2ERKSs+0xc0>
 1006d38:	d9001017 	ldw	r4,64(sp)
 1006d3c:	d8800115 	stw	r2,4(sp)
 1006d40:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1006d44:	d9001017 	ldw	r4,64(sp)
 1006d48:	00bfffc4 	movi	r2,-1
 1006d4c:	d8800115 	stw	r2,4(sp)
 1006d50:	100cd180 	call	100cd18 <__cxa_call_unexpected>

01006d54 <_ZNSt8ios_base7failureD2Ev>:
 1006d54:	deffeb04 	addi	sp,sp,-84
 1006d58:	00804074 	movhi	r2,257
 1006d5c:	10b3a604 	addi	r2,r2,-12648
 1006d60:	00c040b4 	movhi	r3,258
 1006d64:	18d15f04 	addi	r3,r3,17788
 1006d68:	d8800715 	stw	r2,28(sp)
 1006d6c:	d9001015 	stw	r4,64(sp)
 1006d70:	00804034 	movhi	r2,256
 1006d74:	109b8604 	addi	r2,r2,28184
 1006d78:	d9000104 	addi	r4,sp,4
 1006d7c:	d8c00815 	stw	r3,32(sp)
 1006d80:	d8800a15 	stw	r2,40(sp)
 1006d84:	dfc01415 	stw	ra,80(sp)
 1006d88:	df001315 	stw	fp,76(sp)
 1006d8c:	ddc01215 	stw	r23,72(sp)
 1006d90:	dec00915 	stw	sp,36(sp)
 1006d94:	dec00b15 	stw	sp,44(sp)
 1006d98:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1006d9c:	d8c01017 	ldw	r3,64(sp)
 1006da0:	18800117 	ldw	r2,4(r3)
 1006da4:	00c040b4 	movhi	r3,258
 1006da8:	18d4de04 	addi	r3,r3,21368
 1006dac:	10bffd04 	addi	r2,r2,-12
 1006db0:	d8800e15 	stw	r2,56(sp)
 1006db4:	d8801017 	ldw	r2,64(sp)
 1006db8:	10c00015 	stw	r3,0(r2)
 1006dbc:	d8c00e17 	ldw	r3,56(sp)
 1006dc0:	008040f4 	movhi	r2,259
 1006dc4:	108f2704 	addi	r2,r2,15516
 1006dc8:	1880091e 	bne	r3,r2,1006df0 <_ZNSt8ios_base7failureD2Ev+0x9c>
 1006dcc:	d9001017 	ldw	r4,64(sp)
 1006dd0:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1006dd4:	d9000104 	addi	r4,sp,4
 1006dd8:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1006ddc:	dfc01417 	ldw	ra,80(sp)
 1006de0:	df001317 	ldw	fp,76(sp)
 1006de4:	ddc01217 	ldw	r23,72(sp)
 1006de8:	dec01504 	addi	sp,sp,84
 1006dec:	f800283a 	ret
 1006df0:	00800044 	movi	r2,1
 1006df4:	d8800215 	stw	r2,8(sp)
 1006df8:	19000204 	addi	r4,r3,8
 1006dfc:	017fffc4 	movi	r5,-1
 1006e00:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006e04:	00bff116 	blt	zero,r2,1006dcc <_ZNSt8ios_base7failureD2Ev+0x78>
 1006e08:	d9000e17 	ldw	r4,56(sp)
 1006e0c:	d80b883a 	mov	r5,sp
 1006e10:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006e14:	003fed06 	br	1006dcc <_ZNSt8ios_base7failureD2Ev+0x78>
 1006e18:	d8800417 	ldw	r2,16(sp)
 1006e1c:	d8c00317 	ldw	r3,12(sp)
 1006e20:	d9001017 	ldw	r4,64(sp)
 1006e24:	d8800f15 	stw	r2,60(sp)
 1006e28:	d8c01115 	stw	r3,68(sp)
 1006e2c:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1006e30:	d8c00f17 	ldw	r3,60(sp)
 1006e34:	00bfffc4 	movi	r2,-1
 1006e38:	18800326 	beq	r3,r2,1006e48 <_ZNSt8ios_base7failureD2Ev+0xf4>
 1006e3c:	d9001117 	ldw	r4,68(sp)
 1006e40:	d8800215 	stw	r2,8(sp)
 1006e44:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1006e48:	d9001117 	ldw	r4,68(sp)
 1006e4c:	00bfffc4 	movi	r2,-1
 1006e50:	d8800215 	stw	r2,8(sp)
 1006e54:	100cd180 	call	100cd18 <__cxa_call_unexpected>

01006e58 <_ZNSt8ios_base7failureD0Ev>:
 1006e58:	deffeb04 	addi	sp,sp,-84
 1006e5c:	00804074 	movhi	r2,257
 1006e60:	10b3a604 	addi	r2,r2,-12648
 1006e64:	00c040b4 	movhi	r3,258
 1006e68:	18d16304 	addi	r3,r3,17804
 1006e6c:	d8800715 	stw	r2,28(sp)
 1006e70:	d9001015 	stw	r4,64(sp)
 1006e74:	00804034 	movhi	r2,256
 1006e78:	109bc904 	addi	r2,r2,28452
 1006e7c:	d9000104 	addi	r4,sp,4
 1006e80:	d8c00815 	stw	r3,32(sp)
 1006e84:	d8800a15 	stw	r2,40(sp)
 1006e88:	dfc01415 	stw	ra,80(sp)
 1006e8c:	df001315 	stw	fp,76(sp)
 1006e90:	ddc01215 	stw	r23,72(sp)
 1006e94:	dec00915 	stw	sp,36(sp)
 1006e98:	dec00b15 	stw	sp,44(sp)
 1006e9c:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1006ea0:	d8c01017 	ldw	r3,64(sp)
 1006ea4:	18800117 	ldw	r2,4(r3)
 1006ea8:	00c040b4 	movhi	r3,258
 1006eac:	18d4de04 	addi	r3,r3,21368
 1006eb0:	10bffd04 	addi	r2,r2,-12
 1006eb4:	d8800e15 	stw	r2,56(sp)
 1006eb8:	d8801017 	ldw	r2,64(sp)
 1006ebc:	10c00015 	stw	r3,0(r2)
 1006ec0:	d8c00e17 	ldw	r3,56(sp)
 1006ec4:	008040f4 	movhi	r2,259
 1006ec8:	108f2704 	addi	r2,r2,15516
 1006ecc:	18800b1e 	bne	r3,r2,1006efc <_ZNSt8ios_base7failureD0Ev+0xa4>
 1006ed0:	d9001017 	ldw	r4,64(sp)
 1006ed4:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1006ed8:	d9001017 	ldw	r4,64(sp)
 1006edc:	100d6680 	call	100d668 <_ZdlPv>
 1006ee0:	d9000104 	addi	r4,sp,4
 1006ee4:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1006ee8:	dfc01417 	ldw	ra,80(sp)
 1006eec:	df001317 	ldw	fp,76(sp)
 1006ef0:	ddc01217 	ldw	r23,72(sp)
 1006ef4:	dec01504 	addi	sp,sp,84
 1006ef8:	f800283a 	ret
 1006efc:	00800044 	movi	r2,1
 1006f00:	d8800215 	stw	r2,8(sp)
 1006f04:	19000204 	addi	r4,r3,8
 1006f08:	017fffc4 	movi	r5,-1
 1006f0c:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1006f10:	00bfef16 	blt	zero,r2,1006ed0 <_ZNSt8ios_base7failureD0Ev+0x78>
 1006f14:	d9000e17 	ldw	r4,56(sp)
 1006f18:	d80b883a 	mov	r5,sp
 1006f1c:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1006f20:	003feb06 	br	1006ed0 <_ZNSt8ios_base7failureD0Ev+0x78>
 1006f24:	d8800417 	ldw	r2,16(sp)
 1006f28:	d8c00317 	ldw	r3,12(sp)
 1006f2c:	d9001017 	ldw	r4,64(sp)
 1006f30:	d8800f15 	stw	r2,60(sp)
 1006f34:	d8c01115 	stw	r3,68(sp)
 1006f38:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1006f3c:	d8c00f17 	ldw	r3,60(sp)
 1006f40:	00bfffc4 	movi	r2,-1
 1006f44:	18800326 	beq	r3,r2,1006f54 <_ZNSt8ios_base7failureD0Ev+0xfc>
 1006f48:	d9001117 	ldw	r4,68(sp)
 1006f4c:	d8800215 	stw	r2,8(sp)
 1006f50:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1006f54:	d9001117 	ldw	r4,68(sp)
 1006f58:	00bfffc4 	movi	r2,-1
 1006f5c:	d8800215 	stw	r2,8(sp)
 1006f60:	100cd180 	call	100cd18 <__cxa_call_unexpected>

01006f64 <_ZNKSt13runtime_error4whatEv>:
 1006f64:	20800117 	ldw	r2,4(r4)
 1006f68:	f800283a 	ret

01006f6c <_ZNSt11logic_errorD1Ev>:
 1006f6c:	deffeb04 	addi	sp,sp,-84
 1006f70:	00804074 	movhi	r2,257
 1006f74:	10b3a604 	addi	r2,r2,-12648
 1006f78:	00c040b4 	movhi	r3,258
 1006f7c:	18d16704 	addi	r3,r3,17820
 1006f80:	d8800715 	stw	r2,28(sp)
 1006f84:	d9001015 	stw	r4,64(sp)
 1006f88:	00804034 	movhi	r2,256
 1006f8c:	109c0c04 	addi	r2,r2,28720
 1006f90:	d9000104 	addi	r4,sp,4
 1006f94:	d8c00815 	stw	r3,32(sp)
 1006f98:	d8800a15 	stw	r2,40(sp)
 1006f9c:	dfc01415 	stw	ra,80(sp)
 1006fa0:	df001315 	stw	fp,76(sp)
 1006fa4:	ddc01215 	stw	r23,72(sp)
 1006fa8:	dec00915 	stw	sp,36(sp)
 1006fac:	dec00b15 	stw	sp,44(sp)
 1006fb0:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1006fb4:	d8c01017 	ldw	r3,64(sp)
 1006fb8:	18800117 	ldw	r2,4(r3)
 1006fbc:	00c040b4 	movhi	r3,258
 1006fc0:	18d4f104 	addi	r3,r3,21444
 1006fc4:	10bffd04 	addi	r2,r2,-12
 1006fc8:	d8800e15 	stw	r2,56(sp)
 1006fcc:	d8801017 	ldw	r2,64(sp)
 1006fd0:	10c00015 	stw	r3,0(r2)
 1006fd4:	d8c00e17 	ldw	r3,56(sp)
 1006fd8:	008040f4 	movhi	r2,259
 1006fdc:	108f2704 	addi	r2,r2,15516
 1006fe0:	1880091e 	bne	r3,r2,1007008 <_ZNSt11logic_errorD1Ev+0x9c>
 1006fe4:	d9001017 	ldw	r4,64(sp)
 1006fe8:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1006fec:	d9000104 	addi	r4,sp,4
 1006ff0:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1006ff4:	dfc01417 	ldw	ra,80(sp)
 1006ff8:	df001317 	ldw	fp,76(sp)
 1006ffc:	ddc01217 	ldw	r23,72(sp)
 1007000:	dec01504 	addi	sp,sp,84
 1007004:	f800283a 	ret
 1007008:	00800044 	movi	r2,1
 100700c:	d8800215 	stw	r2,8(sp)
 1007010:	19000204 	addi	r4,r3,8
 1007014:	017fffc4 	movi	r5,-1
 1007018:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100701c:	00bff116 	blt	zero,r2,1006fe4 <_ZNSt11logic_errorD1Ev+0x78>
 1007020:	d9000e17 	ldw	r4,56(sp)
 1007024:	d80b883a 	mov	r5,sp
 1007028:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100702c:	003fed06 	br	1006fe4 <_ZNSt11logic_errorD1Ev+0x78>
 1007030:	d8800417 	ldw	r2,16(sp)
 1007034:	d8c00317 	ldw	r3,12(sp)
 1007038:	d9001017 	ldw	r4,64(sp)
 100703c:	d8800f15 	stw	r2,60(sp)
 1007040:	d8c01115 	stw	r3,68(sp)
 1007044:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1007048:	d8c00f17 	ldw	r3,60(sp)
 100704c:	00bfffc4 	movi	r2,-1
 1007050:	18800326 	beq	r3,r2,1007060 <_ZNSt11logic_errorD1Ev+0xf4>
 1007054:	d9001117 	ldw	r4,68(sp)
 1007058:	d8800215 	stw	r2,8(sp)
 100705c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1007060:	d9001117 	ldw	r4,68(sp)
 1007064:	00bfffc4 	movi	r2,-1
 1007068:	d8800215 	stw	r2,8(sp)
 100706c:	100cd180 	call	100cd18 <__cxa_call_unexpected>

01007070 <_ZNSt13runtime_errorC2ERKSs>:
 1007070:	deffed04 	addi	sp,sp,-76
 1007074:	00804074 	movhi	r2,257
 1007078:	10b3a604 	addi	r2,r2,-12648
 100707c:	00c040b4 	movhi	r3,258
 1007080:	18d16a44 	addi	r3,r3,17833
 1007084:	d8800615 	stw	r2,24(sp)
 1007088:	d9000d15 	stw	r4,52(sp)
 100708c:	00804034 	movhi	r2,256
 1007090:	109c4004 	addi	r2,r2,28928
 1007094:	d809883a 	mov	r4,sp
 1007098:	d8c00715 	stw	r3,28(sp)
 100709c:	d8800915 	stw	r2,36(sp)
 10070a0:	d9400e15 	stw	r5,56(sp)
 10070a4:	dfc01215 	stw	ra,72(sp)
 10070a8:	df001115 	stw	fp,68(sp)
 10070ac:	ddc01015 	stw	r23,64(sp)
 10070b0:	dec00815 	stw	sp,32(sp)
 10070b4:	dec00a15 	stw	sp,40(sp)
 10070b8:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 10070bc:	d8c00d17 	ldw	r3,52(sp)
 10070c0:	008040b4 	movhi	r2,258
 10070c4:	1094ec04 	addi	r2,r2,21424
 10070c8:	d9400e17 	ldw	r5,56(sp)
 10070cc:	18800015 	stw	r2,0(r3)
 10070d0:	d8800d17 	ldw	r2,52(sp)
 10070d4:	00c00044 	movi	r3,1
 10070d8:	d8c00115 	stw	r3,4(sp)
 10070dc:	11000104 	addi	r4,r2,4
 10070e0:	10098d80 	call	10098d8 <_ZNSsC1ERKSs>
 10070e4:	d809883a 	mov	r4,sp
 10070e8:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 10070ec:	dfc01217 	ldw	ra,72(sp)
 10070f0:	df001117 	ldw	fp,68(sp)
 10070f4:	ddc01017 	ldw	r23,64(sp)
 10070f8:	dec01304 	addi	sp,sp,76
 10070fc:	f800283a 	ret
 1007100:	d8c00217 	ldw	r3,8(sp)
 1007104:	d9000d17 	ldw	r4,52(sp)
 1007108:	d8c00f15 	stw	r3,60(sp)
 100710c:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1007110:	d9000f17 	ldw	r4,60(sp)
 1007114:	00bfffc4 	movi	r2,-1
 1007118:	d8800115 	stw	r2,4(sp)
 100711c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

01007120 <_ZNSt15underflow_errorC1ERKSs>:
 1007120:	defffe04 	addi	sp,sp,-8
 1007124:	dc000015 	stw	r16,0(sp)
 1007128:	dfc00115 	stw	ra,4(sp)
 100712c:	2021883a 	mov	r16,r4
 1007130:	10070700 	call	1007070 <_ZNSt13runtime_errorC2ERKSs>
 1007134:	008040b4 	movhi	r2,258
 1007138:	10948b04 	addi	r2,r2,21036
 100713c:	80800015 	stw	r2,0(r16)
 1007140:	dfc00117 	ldw	ra,4(sp)
 1007144:	dc000017 	ldw	r16,0(sp)
 1007148:	dec00204 	addi	sp,sp,8
 100714c:	f800283a 	ret

01007150 <_ZNSt15underflow_errorC2ERKSs>:
 1007150:	defffe04 	addi	sp,sp,-8
 1007154:	dc000015 	stw	r16,0(sp)
 1007158:	dfc00115 	stw	ra,4(sp)
 100715c:	2021883a 	mov	r16,r4
 1007160:	10070700 	call	1007070 <_ZNSt13runtime_errorC2ERKSs>
 1007164:	008040b4 	movhi	r2,258
 1007168:	10948b04 	addi	r2,r2,21036
 100716c:	80800015 	stw	r2,0(r16)
 1007170:	dfc00117 	ldw	ra,4(sp)
 1007174:	dc000017 	ldw	r16,0(sp)
 1007178:	dec00204 	addi	sp,sp,8
 100717c:	f800283a 	ret

01007180 <_ZNSt14overflow_errorC1ERKSs>:
 1007180:	defffe04 	addi	sp,sp,-8
 1007184:	dc000015 	stw	r16,0(sp)
 1007188:	dfc00115 	stw	ra,4(sp)
 100718c:	2021883a 	mov	r16,r4
 1007190:	10070700 	call	1007070 <_ZNSt13runtime_errorC2ERKSs>
 1007194:	008040b4 	movhi	r2,258
 1007198:	10949804 	addi	r2,r2,21088
 100719c:	80800015 	stw	r2,0(r16)
 10071a0:	dfc00117 	ldw	ra,4(sp)
 10071a4:	dc000017 	ldw	r16,0(sp)
 10071a8:	dec00204 	addi	sp,sp,8
 10071ac:	f800283a 	ret

010071b0 <_ZNSt14overflow_errorC2ERKSs>:
 10071b0:	defffe04 	addi	sp,sp,-8
 10071b4:	dc000015 	stw	r16,0(sp)
 10071b8:	dfc00115 	stw	ra,4(sp)
 10071bc:	2021883a 	mov	r16,r4
 10071c0:	10070700 	call	1007070 <_ZNSt13runtime_errorC2ERKSs>
 10071c4:	008040b4 	movhi	r2,258
 10071c8:	10949804 	addi	r2,r2,21088
 10071cc:	80800015 	stw	r2,0(r16)
 10071d0:	dfc00117 	ldw	ra,4(sp)
 10071d4:	dc000017 	ldw	r16,0(sp)
 10071d8:	dec00204 	addi	sp,sp,8
 10071dc:	f800283a 	ret

010071e0 <_ZNSt11range_errorC1ERKSs>:
 10071e0:	defffe04 	addi	sp,sp,-8
 10071e4:	dc000015 	stw	r16,0(sp)
 10071e8:	dfc00115 	stw	ra,4(sp)
 10071ec:	2021883a 	mov	r16,r4
 10071f0:	10070700 	call	1007070 <_ZNSt13runtime_errorC2ERKSs>
 10071f4:	008040b4 	movhi	r2,258
 10071f8:	1094a404 	addi	r2,r2,21136
 10071fc:	80800015 	stw	r2,0(r16)
 1007200:	dfc00117 	ldw	ra,4(sp)
 1007204:	dc000017 	ldw	r16,0(sp)
 1007208:	dec00204 	addi	sp,sp,8
 100720c:	f800283a 	ret

01007210 <_ZNSt11range_errorC2ERKSs>:
 1007210:	defffe04 	addi	sp,sp,-8
 1007214:	dc000015 	stw	r16,0(sp)
 1007218:	dfc00115 	stw	ra,4(sp)
 100721c:	2021883a 	mov	r16,r4
 1007220:	10070700 	call	1007070 <_ZNSt13runtime_errorC2ERKSs>
 1007224:	008040b4 	movhi	r2,258
 1007228:	1094a404 	addi	r2,r2,21136
 100722c:	80800015 	stw	r2,0(r16)
 1007230:	dfc00117 	ldw	ra,4(sp)
 1007234:	dc000017 	ldw	r16,0(sp)
 1007238:	dec00204 	addi	sp,sp,8
 100723c:	f800283a 	ret

01007240 <_ZNSt11logic_errorC1ERKSs>:
 1007240:	deffed04 	addi	sp,sp,-76
 1007244:	00804074 	movhi	r2,257
 1007248:	10b3a604 	addi	r2,r2,-12648
 100724c:	00c040b4 	movhi	r3,258
 1007250:	18d16bc4 	addi	r3,r3,17839
 1007254:	d8800615 	stw	r2,24(sp)
 1007258:	d9000d15 	stw	r4,52(sp)
 100725c:	00804034 	movhi	r2,256
 1007260:	109cb404 	addi	r2,r2,29392
 1007264:	d809883a 	mov	r4,sp
 1007268:	d8c00715 	stw	r3,28(sp)
 100726c:	d8800915 	stw	r2,36(sp)
 1007270:	d9400e15 	stw	r5,56(sp)
 1007274:	dfc01215 	stw	ra,72(sp)
 1007278:	df001115 	stw	fp,68(sp)
 100727c:	ddc01015 	stw	r23,64(sp)
 1007280:	dec00815 	stw	sp,32(sp)
 1007284:	dec00a15 	stw	sp,40(sp)
 1007288:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100728c:	d8c00d17 	ldw	r3,52(sp)
 1007290:	008040b4 	movhi	r2,258
 1007294:	1094f104 	addi	r2,r2,21444
 1007298:	d9400e17 	ldw	r5,56(sp)
 100729c:	18800015 	stw	r2,0(r3)
 10072a0:	d8800d17 	ldw	r2,52(sp)
 10072a4:	00c00044 	movi	r3,1
 10072a8:	d8c00115 	stw	r3,4(sp)
 10072ac:	11000104 	addi	r4,r2,4
 10072b0:	10098d80 	call	10098d8 <_ZNSsC1ERKSs>
 10072b4:	d809883a 	mov	r4,sp
 10072b8:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 10072bc:	dfc01217 	ldw	ra,72(sp)
 10072c0:	df001117 	ldw	fp,68(sp)
 10072c4:	ddc01017 	ldw	r23,64(sp)
 10072c8:	dec01304 	addi	sp,sp,76
 10072cc:	f800283a 	ret
 10072d0:	d8c00217 	ldw	r3,8(sp)
 10072d4:	d9000d17 	ldw	r4,52(sp)
 10072d8:	d8c00f15 	stw	r3,60(sp)
 10072dc:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 10072e0:	d9000f17 	ldw	r4,60(sp)
 10072e4:	00bfffc4 	movi	r2,-1
 10072e8:	d8800115 	stw	r2,4(sp)
 10072ec:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

010072f0 <_ZNSt11logic_errorC2ERKSs>:
 10072f0:	deffed04 	addi	sp,sp,-76
 10072f4:	00804074 	movhi	r2,257
 10072f8:	10b3a604 	addi	r2,r2,-12648
 10072fc:	00c040b4 	movhi	r3,258
 1007300:	18d16d44 	addi	r3,r3,17845
 1007304:	d8800615 	stw	r2,24(sp)
 1007308:	d9000d15 	stw	r4,52(sp)
 100730c:	00804034 	movhi	r2,256
 1007310:	109ce004 	addi	r2,r2,29568
 1007314:	d809883a 	mov	r4,sp
 1007318:	d8c00715 	stw	r3,28(sp)
 100731c:	d8800915 	stw	r2,36(sp)
 1007320:	d9400e15 	stw	r5,56(sp)
 1007324:	dfc01215 	stw	ra,72(sp)
 1007328:	df001115 	stw	fp,68(sp)
 100732c:	ddc01015 	stw	r23,64(sp)
 1007330:	dec00815 	stw	sp,32(sp)
 1007334:	dec00a15 	stw	sp,40(sp)
 1007338:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100733c:	d8c00d17 	ldw	r3,52(sp)
 1007340:	008040b4 	movhi	r2,258
 1007344:	1094f104 	addi	r2,r2,21444
 1007348:	d9400e17 	ldw	r5,56(sp)
 100734c:	18800015 	stw	r2,0(r3)
 1007350:	d8800d17 	ldw	r2,52(sp)
 1007354:	00c00044 	movi	r3,1
 1007358:	d8c00115 	stw	r3,4(sp)
 100735c:	11000104 	addi	r4,r2,4
 1007360:	10098d80 	call	10098d8 <_ZNSsC1ERKSs>
 1007364:	d809883a 	mov	r4,sp
 1007368:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100736c:	dfc01217 	ldw	ra,72(sp)
 1007370:	df001117 	ldw	fp,68(sp)
 1007374:	ddc01017 	ldw	r23,64(sp)
 1007378:	dec01304 	addi	sp,sp,76
 100737c:	f800283a 	ret
 1007380:	d8c00217 	ldw	r3,8(sp)
 1007384:	d9000d17 	ldw	r4,52(sp)
 1007388:	d8c00f15 	stw	r3,60(sp)
 100738c:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1007390:	d9000f17 	ldw	r4,60(sp)
 1007394:	00bfffc4 	movi	r2,-1
 1007398:	d8800115 	stw	r2,4(sp)
 100739c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

010073a0 <_ZNSt12out_of_rangeC1ERKSs>:
 10073a0:	defffe04 	addi	sp,sp,-8
 10073a4:	dc000015 	stw	r16,0(sp)
 10073a8:	dfc00115 	stw	ra,4(sp)
 10073ac:	2021883a 	mov	r16,r4
 10073b0:	10072f00 	call	10072f0 <_ZNSt11logic_errorC2ERKSs>
 10073b4:	008040b4 	movhi	r2,258
 10073b8:	1094b104 	addi	r2,r2,21188
 10073bc:	80800015 	stw	r2,0(r16)
 10073c0:	dfc00117 	ldw	ra,4(sp)
 10073c4:	dc000017 	ldw	r16,0(sp)
 10073c8:	dec00204 	addi	sp,sp,8
 10073cc:	f800283a 	ret

010073d0 <_ZNSt12out_of_rangeC2ERKSs>:
 10073d0:	defffe04 	addi	sp,sp,-8
 10073d4:	dc000015 	stw	r16,0(sp)
 10073d8:	dfc00115 	stw	ra,4(sp)
 10073dc:	2021883a 	mov	r16,r4
 10073e0:	10072f00 	call	10072f0 <_ZNSt11logic_errorC2ERKSs>
 10073e4:	008040b4 	movhi	r2,258
 10073e8:	1094b104 	addi	r2,r2,21188
 10073ec:	80800015 	stw	r2,0(r16)
 10073f0:	dfc00117 	ldw	ra,4(sp)
 10073f4:	dc000017 	ldw	r16,0(sp)
 10073f8:	dec00204 	addi	sp,sp,8
 10073fc:	f800283a 	ret

01007400 <_ZNSt12length_errorC1ERKSs>:
 1007400:	defffe04 	addi	sp,sp,-8
 1007404:	dc000015 	stw	r16,0(sp)
 1007408:	dfc00115 	stw	ra,4(sp)
 100740c:	2021883a 	mov	r16,r4
 1007410:	10072f00 	call	10072f0 <_ZNSt11logic_errorC2ERKSs>
 1007414:	008040b4 	movhi	r2,258
 1007418:	1094be04 	addi	r2,r2,21240
 100741c:	80800015 	stw	r2,0(r16)
 1007420:	dfc00117 	ldw	ra,4(sp)
 1007424:	dc000017 	ldw	r16,0(sp)
 1007428:	dec00204 	addi	sp,sp,8
 100742c:	f800283a 	ret

01007430 <_ZNSt12length_errorC2ERKSs>:
 1007430:	defffe04 	addi	sp,sp,-8
 1007434:	dc000015 	stw	r16,0(sp)
 1007438:	dfc00115 	stw	ra,4(sp)
 100743c:	2021883a 	mov	r16,r4
 1007440:	10072f00 	call	10072f0 <_ZNSt11logic_errorC2ERKSs>
 1007444:	008040b4 	movhi	r2,258
 1007448:	1094be04 	addi	r2,r2,21240
 100744c:	80800015 	stw	r2,0(r16)
 1007450:	dfc00117 	ldw	ra,4(sp)
 1007454:	dc000017 	ldw	r16,0(sp)
 1007458:	dec00204 	addi	sp,sp,8
 100745c:	f800283a 	ret

01007460 <_ZNSt16invalid_argumentC1ERKSs>:
 1007460:	defffe04 	addi	sp,sp,-8
 1007464:	dc000015 	stw	r16,0(sp)
 1007468:	dfc00115 	stw	ra,4(sp)
 100746c:	2021883a 	mov	r16,r4
 1007470:	10072f00 	call	10072f0 <_ZNSt11logic_errorC2ERKSs>
 1007474:	008040b4 	movhi	r2,258
 1007478:	1094cc04 	addi	r2,r2,21296
 100747c:	80800015 	stw	r2,0(r16)
 1007480:	dfc00117 	ldw	ra,4(sp)
 1007484:	dc000017 	ldw	r16,0(sp)
 1007488:	dec00204 	addi	sp,sp,8
 100748c:	f800283a 	ret

01007490 <_ZNSt16invalid_argumentC2ERKSs>:
 1007490:	defffe04 	addi	sp,sp,-8
 1007494:	dc000015 	stw	r16,0(sp)
 1007498:	dfc00115 	stw	ra,4(sp)
 100749c:	2021883a 	mov	r16,r4
 10074a0:	10072f00 	call	10072f0 <_ZNSt11logic_errorC2ERKSs>
 10074a4:	008040b4 	movhi	r2,258
 10074a8:	1094cc04 	addi	r2,r2,21296
 10074ac:	80800015 	stw	r2,0(r16)
 10074b0:	dfc00117 	ldw	ra,4(sp)
 10074b4:	dc000017 	ldw	r16,0(sp)
 10074b8:	dec00204 	addi	sp,sp,8
 10074bc:	f800283a 	ret

010074c0 <_ZNSt12domain_errorC1ERKSs>:
 10074c0:	defffe04 	addi	sp,sp,-8
 10074c4:	dc000015 	stw	r16,0(sp)
 10074c8:	dfc00115 	stw	ra,4(sp)
 10074cc:	2021883a 	mov	r16,r4
 10074d0:	10072f00 	call	10072f0 <_ZNSt11logic_errorC2ERKSs>
 10074d4:	008040b4 	movhi	r2,258
 10074d8:	1094d904 	addi	r2,r2,21348
 10074dc:	80800015 	stw	r2,0(r16)
 10074e0:	dfc00117 	ldw	ra,4(sp)
 10074e4:	dc000017 	ldw	r16,0(sp)
 10074e8:	dec00204 	addi	sp,sp,8
 10074ec:	f800283a 	ret

010074f0 <_ZNSt12domain_errorC2ERKSs>:
 10074f0:	defffe04 	addi	sp,sp,-8
 10074f4:	dc000015 	stw	r16,0(sp)
 10074f8:	dfc00115 	stw	ra,4(sp)
 10074fc:	2021883a 	mov	r16,r4
 1007500:	10072f00 	call	10072f0 <_ZNSt11logic_errorC2ERKSs>
 1007504:	008040b4 	movhi	r2,258
 1007508:	1094d904 	addi	r2,r2,21348
 100750c:	80800015 	stw	r2,0(r16)
 1007510:	dfc00117 	ldw	ra,4(sp)
 1007514:	dc000017 	ldw	r16,0(sp)
 1007518:	dec00204 	addi	sp,sp,8
 100751c:	f800283a 	ret

01007520 <_ZNKSt11logic_error4whatEv>:
 1007520:	20800117 	ldw	r2,4(r4)
 1007524:	f800283a 	ret

01007528 <_ZNSt13runtime_errorC1ERKSs>:
 1007528:	deffed04 	addi	sp,sp,-76
 100752c:	00804074 	movhi	r2,257
 1007530:	10b3a604 	addi	r2,r2,-12648
 1007534:	00c040b4 	movhi	r3,258
 1007538:	18d16ec4 	addi	r3,r3,17851
 100753c:	d8800615 	stw	r2,24(sp)
 1007540:	d9000d15 	stw	r4,52(sp)
 1007544:	00804034 	movhi	r2,256
 1007548:	109d6e04 	addi	r2,r2,30136
 100754c:	d809883a 	mov	r4,sp
 1007550:	d8c00715 	stw	r3,28(sp)
 1007554:	d8800915 	stw	r2,36(sp)
 1007558:	d9400e15 	stw	r5,56(sp)
 100755c:	dfc01215 	stw	ra,72(sp)
 1007560:	df001115 	stw	fp,68(sp)
 1007564:	ddc01015 	stw	r23,64(sp)
 1007568:	dec00815 	stw	sp,32(sp)
 100756c:	dec00a15 	stw	sp,40(sp)
 1007570:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1007574:	d8c00d17 	ldw	r3,52(sp)
 1007578:	008040b4 	movhi	r2,258
 100757c:	1094ec04 	addi	r2,r2,21424
 1007580:	d9400e17 	ldw	r5,56(sp)
 1007584:	18800015 	stw	r2,0(r3)
 1007588:	d8800d17 	ldw	r2,52(sp)
 100758c:	00c00044 	movi	r3,1
 1007590:	d8c00115 	stw	r3,4(sp)
 1007594:	11000104 	addi	r4,r2,4
 1007598:	10098d80 	call	10098d8 <_ZNSsC1ERKSs>
 100759c:	d809883a 	mov	r4,sp
 10075a0:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 10075a4:	dfc01217 	ldw	ra,72(sp)
 10075a8:	df001117 	ldw	fp,68(sp)
 10075ac:	ddc01017 	ldw	r23,64(sp)
 10075b0:	dec01304 	addi	sp,sp,76
 10075b4:	f800283a 	ret
 10075b8:	d8c00217 	ldw	r3,8(sp)
 10075bc:	d9000d17 	ldw	r4,52(sp)
 10075c0:	d8c00f15 	stw	r3,60(sp)
 10075c4:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 10075c8:	d9000f17 	ldw	r4,60(sp)
 10075cc:	00bfffc4 	movi	r2,-1
 10075d0:	d8800115 	stw	r2,4(sp)
 10075d4:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

010075d8 <_ZNSt13runtime_errorD1Ev>:
 10075d8:	deffeb04 	addi	sp,sp,-84
 10075dc:	00804074 	movhi	r2,257
 10075e0:	10b3a604 	addi	r2,r2,-12648
 10075e4:	00c040b4 	movhi	r3,258
 10075e8:	18d17104 	addi	r3,r3,17860
 10075ec:	d8800715 	stw	r2,28(sp)
 10075f0:	d9001015 	stw	r4,64(sp)
 10075f4:	00804034 	movhi	r2,256
 10075f8:	109da704 	addi	r2,r2,30364
 10075fc:	d9000104 	addi	r4,sp,4
 1007600:	d8c00815 	stw	r3,32(sp)
 1007604:	d8800a15 	stw	r2,40(sp)
 1007608:	dfc01415 	stw	ra,80(sp)
 100760c:	df001315 	stw	fp,76(sp)
 1007610:	ddc01215 	stw	r23,72(sp)
 1007614:	dec00915 	stw	sp,36(sp)
 1007618:	dec00b15 	stw	sp,44(sp)
 100761c:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1007620:	d8c01017 	ldw	r3,64(sp)
 1007624:	18800117 	ldw	r2,4(r3)
 1007628:	00c040b4 	movhi	r3,258
 100762c:	18d4ec04 	addi	r3,r3,21424
 1007630:	10bffd04 	addi	r2,r2,-12
 1007634:	d8800e15 	stw	r2,56(sp)
 1007638:	d8801017 	ldw	r2,64(sp)
 100763c:	10c00015 	stw	r3,0(r2)
 1007640:	d8c00e17 	ldw	r3,56(sp)
 1007644:	008040f4 	movhi	r2,259
 1007648:	108f2704 	addi	r2,r2,15516
 100764c:	1880091e 	bne	r3,r2,1007674 <_ZNSt13runtime_errorD1Ev+0x9c>
 1007650:	d9001017 	ldw	r4,64(sp)
 1007654:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1007658:	d9000104 	addi	r4,sp,4
 100765c:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1007660:	dfc01417 	ldw	ra,80(sp)
 1007664:	df001317 	ldw	fp,76(sp)
 1007668:	ddc01217 	ldw	r23,72(sp)
 100766c:	dec01504 	addi	sp,sp,84
 1007670:	f800283a 	ret
 1007674:	00800044 	movi	r2,1
 1007678:	d8800215 	stw	r2,8(sp)
 100767c:	19000204 	addi	r4,r3,8
 1007680:	017fffc4 	movi	r5,-1
 1007684:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007688:	00bff116 	blt	zero,r2,1007650 <_ZNSt13runtime_errorD1Ev+0x78>
 100768c:	d9000e17 	ldw	r4,56(sp)
 1007690:	d80b883a 	mov	r5,sp
 1007694:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007698:	003fed06 	br	1007650 <_ZNSt13runtime_errorD1Ev+0x78>
 100769c:	d8800417 	ldw	r2,16(sp)
 10076a0:	d8c00317 	ldw	r3,12(sp)
 10076a4:	d9001017 	ldw	r4,64(sp)
 10076a8:	d8800f15 	stw	r2,60(sp)
 10076ac:	d8c01115 	stw	r3,68(sp)
 10076b0:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 10076b4:	d8c00f17 	ldw	r3,60(sp)
 10076b8:	00bfffc4 	movi	r2,-1
 10076bc:	18800326 	beq	r3,r2,10076cc <_ZNSt13runtime_errorD1Ev+0xf4>
 10076c0:	d9001117 	ldw	r4,68(sp)
 10076c4:	d8800215 	stw	r2,8(sp)
 10076c8:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 10076cc:	d9001117 	ldw	r4,68(sp)
 10076d0:	00bfffc4 	movi	r2,-1
 10076d4:	d8800215 	stw	r2,8(sp)
 10076d8:	100cd180 	call	100cd18 <__cxa_call_unexpected>

010076dc <_ZNSt13runtime_errorD2Ev>:
 10076dc:	deffeb04 	addi	sp,sp,-84
 10076e0:	00804074 	movhi	r2,257
 10076e4:	10b3a604 	addi	r2,r2,-12648
 10076e8:	00c040b4 	movhi	r3,258
 10076ec:	18d17504 	addi	r3,r3,17876
 10076f0:	d8800715 	stw	r2,28(sp)
 10076f4:	d9001015 	stw	r4,64(sp)
 10076f8:	00804034 	movhi	r2,256
 10076fc:	109de804 	addi	r2,r2,30624
 1007700:	d9000104 	addi	r4,sp,4
 1007704:	d8c00815 	stw	r3,32(sp)
 1007708:	d8800a15 	stw	r2,40(sp)
 100770c:	dfc01415 	stw	ra,80(sp)
 1007710:	df001315 	stw	fp,76(sp)
 1007714:	ddc01215 	stw	r23,72(sp)
 1007718:	dec00915 	stw	sp,36(sp)
 100771c:	dec00b15 	stw	sp,44(sp)
 1007720:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1007724:	d8c01017 	ldw	r3,64(sp)
 1007728:	18800117 	ldw	r2,4(r3)
 100772c:	00c040b4 	movhi	r3,258
 1007730:	18d4ec04 	addi	r3,r3,21424
 1007734:	10bffd04 	addi	r2,r2,-12
 1007738:	d8800e15 	stw	r2,56(sp)
 100773c:	d8801017 	ldw	r2,64(sp)
 1007740:	10c00015 	stw	r3,0(r2)
 1007744:	d8c00e17 	ldw	r3,56(sp)
 1007748:	008040f4 	movhi	r2,259
 100774c:	108f2704 	addi	r2,r2,15516
 1007750:	1880091e 	bne	r3,r2,1007778 <_ZNSt13runtime_errorD2Ev+0x9c>
 1007754:	d9001017 	ldw	r4,64(sp)
 1007758:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 100775c:	d9000104 	addi	r4,sp,4
 1007760:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1007764:	dfc01417 	ldw	ra,80(sp)
 1007768:	df001317 	ldw	fp,76(sp)
 100776c:	ddc01217 	ldw	r23,72(sp)
 1007770:	dec01504 	addi	sp,sp,84
 1007774:	f800283a 	ret
 1007778:	00800044 	movi	r2,1
 100777c:	d8800215 	stw	r2,8(sp)
 1007780:	19000204 	addi	r4,r3,8
 1007784:	017fffc4 	movi	r5,-1
 1007788:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100778c:	00bff116 	blt	zero,r2,1007754 <_ZNSt13runtime_errorD2Ev+0x78>
 1007790:	d9000e17 	ldw	r4,56(sp)
 1007794:	d80b883a 	mov	r5,sp
 1007798:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100779c:	003fed06 	br	1007754 <_ZNSt13runtime_errorD2Ev+0x78>
 10077a0:	d8800417 	ldw	r2,16(sp)
 10077a4:	d8c00317 	ldw	r3,12(sp)
 10077a8:	d9001017 	ldw	r4,64(sp)
 10077ac:	d8800f15 	stw	r2,60(sp)
 10077b0:	d8c01115 	stw	r3,68(sp)
 10077b4:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 10077b8:	d8c00f17 	ldw	r3,60(sp)
 10077bc:	00bfffc4 	movi	r2,-1
 10077c0:	18800326 	beq	r3,r2,10077d0 <_ZNSt13runtime_errorD2Ev+0xf4>
 10077c4:	d9001117 	ldw	r4,68(sp)
 10077c8:	d8800215 	stw	r2,8(sp)
 10077cc:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 10077d0:	d9001117 	ldw	r4,68(sp)
 10077d4:	00bfffc4 	movi	r2,-1
 10077d8:	d8800215 	stw	r2,8(sp)
 10077dc:	100cd180 	call	100cd18 <__cxa_call_unexpected>

010077e0 <_ZNSt13runtime_errorD0Ev>:
 10077e0:	deffeb04 	addi	sp,sp,-84
 10077e4:	00804074 	movhi	r2,257
 10077e8:	10b3a604 	addi	r2,r2,-12648
 10077ec:	00c040b4 	movhi	r3,258
 10077f0:	18d17904 	addi	r3,r3,17892
 10077f4:	d8800715 	stw	r2,28(sp)
 10077f8:	d9001015 	stw	r4,64(sp)
 10077fc:	00804034 	movhi	r2,256
 1007800:	109e2b04 	addi	r2,r2,30892
 1007804:	d9000104 	addi	r4,sp,4
 1007808:	d8c00815 	stw	r3,32(sp)
 100780c:	d8800a15 	stw	r2,40(sp)
 1007810:	dfc01415 	stw	ra,80(sp)
 1007814:	df001315 	stw	fp,76(sp)
 1007818:	ddc01215 	stw	r23,72(sp)
 100781c:	dec00915 	stw	sp,36(sp)
 1007820:	dec00b15 	stw	sp,44(sp)
 1007824:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1007828:	d8c01017 	ldw	r3,64(sp)
 100782c:	18800117 	ldw	r2,4(r3)
 1007830:	00c040b4 	movhi	r3,258
 1007834:	18d4ec04 	addi	r3,r3,21424
 1007838:	10bffd04 	addi	r2,r2,-12
 100783c:	d8800e15 	stw	r2,56(sp)
 1007840:	d8801017 	ldw	r2,64(sp)
 1007844:	10c00015 	stw	r3,0(r2)
 1007848:	d8c00e17 	ldw	r3,56(sp)
 100784c:	008040f4 	movhi	r2,259
 1007850:	108f2704 	addi	r2,r2,15516
 1007854:	18800b1e 	bne	r3,r2,1007884 <_ZNSt13runtime_errorD0Ev+0xa4>
 1007858:	d9001017 	ldw	r4,64(sp)
 100785c:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1007860:	d9001017 	ldw	r4,64(sp)
 1007864:	100d6680 	call	100d668 <_ZdlPv>
 1007868:	d9000104 	addi	r4,sp,4
 100786c:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1007870:	dfc01417 	ldw	ra,80(sp)
 1007874:	df001317 	ldw	fp,76(sp)
 1007878:	ddc01217 	ldw	r23,72(sp)
 100787c:	dec01504 	addi	sp,sp,84
 1007880:	f800283a 	ret
 1007884:	00800044 	movi	r2,1
 1007888:	d8800215 	stw	r2,8(sp)
 100788c:	19000204 	addi	r4,r3,8
 1007890:	017fffc4 	movi	r5,-1
 1007894:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007898:	00bfef16 	blt	zero,r2,1007858 <_ZNSt13runtime_errorD0Ev+0x78>
 100789c:	d9000e17 	ldw	r4,56(sp)
 10078a0:	d80b883a 	mov	r5,sp
 10078a4:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10078a8:	003feb06 	br	1007858 <_ZNSt13runtime_errorD0Ev+0x78>
 10078ac:	d8800417 	ldw	r2,16(sp)
 10078b0:	d8c00317 	ldw	r3,12(sp)
 10078b4:	d9001017 	ldw	r4,64(sp)
 10078b8:	d8800f15 	stw	r2,60(sp)
 10078bc:	d8c01115 	stw	r3,68(sp)
 10078c0:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 10078c4:	d8c00f17 	ldw	r3,60(sp)
 10078c8:	00bfffc4 	movi	r2,-1
 10078cc:	18800326 	beq	r3,r2,10078dc <_ZNSt13runtime_errorD0Ev+0xfc>
 10078d0:	d9001117 	ldw	r4,68(sp)
 10078d4:	d8800215 	stw	r2,8(sp)
 10078d8:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 10078dc:	d9001117 	ldw	r4,68(sp)
 10078e0:	00bfffc4 	movi	r2,-1
 10078e4:	d8800215 	stw	r2,8(sp)
 10078e8:	100cd180 	call	100cd18 <__cxa_call_unexpected>

010078ec <_ZNSt11logic_errorD2Ev>:
 10078ec:	deffeb04 	addi	sp,sp,-84
 10078f0:	00804074 	movhi	r2,257
 10078f4:	10b3a604 	addi	r2,r2,-12648
 10078f8:	00c040b4 	movhi	r3,258
 10078fc:	18d17d04 	addi	r3,r3,17908
 1007900:	d8800715 	stw	r2,28(sp)
 1007904:	d9001015 	stw	r4,64(sp)
 1007908:	00804034 	movhi	r2,256
 100790c:	109e6c04 	addi	r2,r2,31152
 1007910:	d9000104 	addi	r4,sp,4
 1007914:	d8c00815 	stw	r3,32(sp)
 1007918:	d8800a15 	stw	r2,40(sp)
 100791c:	dfc01415 	stw	ra,80(sp)
 1007920:	df001315 	stw	fp,76(sp)
 1007924:	ddc01215 	stw	r23,72(sp)
 1007928:	dec00915 	stw	sp,36(sp)
 100792c:	dec00b15 	stw	sp,44(sp)
 1007930:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1007934:	d8c01017 	ldw	r3,64(sp)
 1007938:	18800117 	ldw	r2,4(r3)
 100793c:	00c040b4 	movhi	r3,258
 1007940:	18d4f104 	addi	r3,r3,21444
 1007944:	10bffd04 	addi	r2,r2,-12
 1007948:	d8800e15 	stw	r2,56(sp)
 100794c:	d8801017 	ldw	r2,64(sp)
 1007950:	10c00015 	stw	r3,0(r2)
 1007954:	d8c00e17 	ldw	r3,56(sp)
 1007958:	008040f4 	movhi	r2,259
 100795c:	108f2704 	addi	r2,r2,15516
 1007960:	1880091e 	bne	r3,r2,1007988 <_ZNSt11logic_errorD2Ev+0x9c>
 1007964:	d9001017 	ldw	r4,64(sp)
 1007968:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 100796c:	d9000104 	addi	r4,sp,4
 1007970:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1007974:	dfc01417 	ldw	ra,80(sp)
 1007978:	df001317 	ldw	fp,76(sp)
 100797c:	ddc01217 	ldw	r23,72(sp)
 1007980:	dec01504 	addi	sp,sp,84
 1007984:	f800283a 	ret
 1007988:	00800044 	movi	r2,1
 100798c:	d8800215 	stw	r2,8(sp)
 1007990:	19000204 	addi	r4,r3,8
 1007994:	017fffc4 	movi	r5,-1
 1007998:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100799c:	00bff116 	blt	zero,r2,1007964 <_ZNSt11logic_errorD2Ev+0x78>
 10079a0:	d9000e17 	ldw	r4,56(sp)
 10079a4:	d80b883a 	mov	r5,sp
 10079a8:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 10079ac:	003fed06 	br	1007964 <_ZNSt11logic_errorD2Ev+0x78>
 10079b0:	d8800417 	ldw	r2,16(sp)
 10079b4:	d8c00317 	ldw	r3,12(sp)
 10079b8:	d9001017 	ldw	r4,64(sp)
 10079bc:	d8800f15 	stw	r2,60(sp)
 10079c0:	d8c01115 	stw	r3,68(sp)
 10079c4:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 10079c8:	d8c00f17 	ldw	r3,60(sp)
 10079cc:	00bfffc4 	movi	r2,-1
 10079d0:	18800326 	beq	r3,r2,10079e0 <_ZNSt11logic_errorD2Ev+0xf4>
 10079d4:	d9001117 	ldw	r4,68(sp)
 10079d8:	d8800215 	stw	r2,8(sp)
 10079dc:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 10079e0:	d9001117 	ldw	r4,68(sp)
 10079e4:	00bfffc4 	movi	r2,-1
 10079e8:	d8800215 	stw	r2,8(sp)
 10079ec:	100cd180 	call	100cd18 <__cxa_call_unexpected>

010079f0 <_ZNSt11logic_errorD0Ev>:
 10079f0:	deffeb04 	addi	sp,sp,-84
 10079f4:	00804074 	movhi	r2,257
 10079f8:	10b3a604 	addi	r2,r2,-12648
 10079fc:	00c040b4 	movhi	r3,258
 1007a00:	18d18104 	addi	r3,r3,17924
 1007a04:	d8800715 	stw	r2,28(sp)
 1007a08:	d9001015 	stw	r4,64(sp)
 1007a0c:	00804034 	movhi	r2,256
 1007a10:	109eaf04 	addi	r2,r2,31420
 1007a14:	d9000104 	addi	r4,sp,4
 1007a18:	d8c00815 	stw	r3,32(sp)
 1007a1c:	d8800a15 	stw	r2,40(sp)
 1007a20:	dfc01415 	stw	ra,80(sp)
 1007a24:	df001315 	stw	fp,76(sp)
 1007a28:	ddc01215 	stw	r23,72(sp)
 1007a2c:	dec00915 	stw	sp,36(sp)
 1007a30:	dec00b15 	stw	sp,44(sp)
 1007a34:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1007a38:	d8c01017 	ldw	r3,64(sp)
 1007a3c:	18800117 	ldw	r2,4(r3)
 1007a40:	00c040b4 	movhi	r3,258
 1007a44:	18d4f104 	addi	r3,r3,21444
 1007a48:	10bffd04 	addi	r2,r2,-12
 1007a4c:	d8800e15 	stw	r2,56(sp)
 1007a50:	d8801017 	ldw	r2,64(sp)
 1007a54:	10c00015 	stw	r3,0(r2)
 1007a58:	d8c00e17 	ldw	r3,56(sp)
 1007a5c:	008040f4 	movhi	r2,259
 1007a60:	108f2704 	addi	r2,r2,15516
 1007a64:	18800b1e 	bne	r3,r2,1007a94 <_ZNSt11logic_errorD0Ev+0xa4>
 1007a68:	d9001017 	ldw	r4,64(sp)
 1007a6c:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1007a70:	d9001017 	ldw	r4,64(sp)
 1007a74:	100d6680 	call	100d668 <_ZdlPv>
 1007a78:	d9000104 	addi	r4,sp,4
 1007a7c:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1007a80:	dfc01417 	ldw	ra,80(sp)
 1007a84:	df001317 	ldw	fp,76(sp)
 1007a88:	ddc01217 	ldw	r23,72(sp)
 1007a8c:	dec01504 	addi	sp,sp,84
 1007a90:	f800283a 	ret
 1007a94:	00800044 	movi	r2,1
 1007a98:	d8800215 	stw	r2,8(sp)
 1007a9c:	19000204 	addi	r4,r3,8
 1007aa0:	017fffc4 	movi	r5,-1
 1007aa4:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1007aa8:	00bfef16 	blt	zero,r2,1007a68 <_ZNSt11logic_errorD0Ev+0x78>
 1007aac:	d9000e17 	ldw	r4,56(sp)
 1007ab0:	d80b883a 	mov	r5,sp
 1007ab4:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1007ab8:	003feb06 	br	1007a68 <_ZNSt11logic_errorD0Ev+0x78>
 1007abc:	d8800417 	ldw	r2,16(sp)
 1007ac0:	d8c00317 	ldw	r3,12(sp)
 1007ac4:	d9001017 	ldw	r4,64(sp)
 1007ac8:	d8800f15 	stw	r2,60(sp)
 1007acc:	d8c01115 	stw	r3,68(sp)
 1007ad0:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 1007ad4:	d8c00f17 	ldw	r3,60(sp)
 1007ad8:	00bfffc4 	movi	r2,-1
 1007adc:	18800326 	beq	r3,r2,1007aec <_ZNSt11logic_errorD0Ev+0xfc>
 1007ae0:	d9001117 	ldw	r4,68(sp)
 1007ae4:	d8800215 	stw	r2,8(sp)
 1007ae8:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1007aec:	d9001117 	ldw	r4,68(sp)
 1007af0:	00bfffc4 	movi	r2,-1
 1007af4:	d8800215 	stw	r2,8(sp)
 1007af8:	100cd180 	call	100cd18 <__cxa_call_unexpected>

01007afc <_ZNSaIcEC1Ev>:
 1007afc:	f800283a 	ret

01007b00 <_ZNSaIcED2Ev>:
 1007b00:	f800283a 	ret

01007b04 <_ZNSaIcEC2ERKS_>:
 1007b04:	f800283a 	ret

01007b08 <_ZNSaIwEC2Ev>:
 1007b08:	f800283a 	ret

01007b0c <_ZNSaIwED1Ev>:
 1007b0c:	f800283a 	ret

01007b10 <_ZNSaIwEC1ERKS_>:
 1007b10:	f800283a 	ret

01007b14 <_ZNSaIwEC2ERKS_>:
 1007b14:	f800283a 	ret

01007b18 <_ZNSaIcEC1ERKS_>:
 1007b18:	f800283a 	ret

01007b1c <_ZNSaIwEC1Ev>:
 1007b1c:	f800283a 	ret

01007b20 <_ZNSaIwED2Ev>:
 1007b20:	f800283a 	ret

01007b24 <_ZNSaIcEC2Ev>:
 1007b24:	f800283a 	ret

01007b28 <_ZNSaIcED1Ev>:
 1007b28:	f800283a 	ret

01007b2c <_ZNSt11char_traitsIcE2eqERKcS2_>:
 1007b2c:	20c00007 	ldb	r3,0(r4)
 1007b30:	28800007 	ldb	r2,0(r5)
 1007b34:	1885003a 	cmpeq	r2,r3,r2
 1007b38:	f800283a 	ret

01007b3c <_ZNKSs7_M_dataEv>:
 1007b3c:	20800017 	ldw	r2,0(r4)
 1007b40:	f800283a 	ret

01007b44 <_ZNSs7_M_dataEPc>:
 1007b44:	2805883a 	mov	r2,r5
 1007b48:	21400015 	stw	r5,0(r4)
 1007b4c:	f800283a 	ret

01007b50 <_ZNKSs6_M_repEv>:
 1007b50:	20800017 	ldw	r2,0(r4)
 1007b54:	10bffd04 	addi	r2,r2,-12
 1007b58:	f800283a 	ret

01007b5c <_ZNKSs9_M_ibeginEv>:
 1007b5c:	20800017 	ldw	r2,0(r4)
 1007b60:	f800283a 	ret

01007b64 <_ZNKSs7_M_iendEv>:
 1007b64:	20c00017 	ldw	r3,0(r4)
 1007b68:	18bffd17 	ldw	r2,-12(r3)
 1007b6c:	1885883a 	add	r2,r3,r2
 1007b70:	f800283a 	ret

01007b74 <_ZNKSs8_M_limitEmm>:
 1007b74:	20c00017 	ldw	r3,0(r4)
 1007b78:	18bffd17 	ldw	r2,-12(r3)
 1007b7c:	1145c83a 	sub	r2,r2,r5
 1007b80:	3080012e 	bgeu	r6,r2,1007b88 <_ZNKSs8_M_limitEmm+0x14>
 1007b84:	3005883a 	mov	r2,r6
 1007b88:	f800283a 	ret

01007b8c <_ZNKSs11_M_disjunctEPKc>:
 1007b8c:	21000017 	ldw	r4,0(r4)
 1007b90:	00800044 	movi	r2,1
 1007b94:	29000336 	bltu	r5,r4,1007ba4 <_ZNKSs11_M_disjunctEPKc+0x18>
 1007b98:	20bffd17 	ldw	r2,-12(r4)
 1007b9c:	2085883a 	add	r2,r4,r2
 1007ba0:	1145803a 	cmpltu	r2,r2,r5
 1007ba4:	f800283a 	ret

01007ba8 <_ZNSs12_S_empty_repEv>:
 1007ba8:	008040f4 	movhi	r2,259
 1007bac:	108f2704 	addi	r2,r2,15516
 1007bb0:	f800283a 	ret

01007bb4 <_ZNSsC1Ev>:
 1007bb4:	008040f4 	movhi	r2,259
 1007bb8:	108f2a04 	addi	r2,r2,15528
 1007bbc:	20800015 	stw	r2,0(r4)
 1007bc0:	f800283a 	ret

01007bc4 <_ZNKSs5beginEv>:
 1007bc4:	20800017 	ldw	r2,0(r4)
 1007bc8:	f800283a 	ret

01007bcc <_ZNKSs3endEv>:
 1007bcc:	20c00017 	ldw	r3,0(r4)
 1007bd0:	18bffd17 	ldw	r2,-12(r3)
 1007bd4:	1885883a 	add	r2,r3,r2
 1007bd8:	f800283a 	ret

01007bdc <_ZNKSs4sizeEv>:
 1007bdc:	20c00017 	ldw	r3,0(r4)
 1007be0:	18bffd17 	ldw	r2,-12(r3)
 1007be4:	f800283a 	ret

01007be8 <_ZNKSs8max_sizeEv>:
 1007be8:	00900034 	movhi	r2,16384
 1007bec:	10bfff04 	addi	r2,r2,-4
 1007bf0:	f800283a 	ret

01007bf4 <_ZNKSs8capacityEv>:
 1007bf4:	20c00017 	ldw	r3,0(r4)
 1007bf8:	18bffe17 	ldw	r2,-8(r3)
 1007bfc:	f800283a 	ret

01007c00 <_ZNKSs4dataEv>:
 1007c00:	20800017 	ldw	r2,0(r4)
 1007c04:	f800283a 	ret

01007c08 <_ZNKSs13get_allocatorEv>:
 1007c08:	2005883a 	mov	r2,r4
 1007c0c:	f800283a 	ret

01007c10 <_ZNSs12_Alloc_hiderC1EPcRKSaIcE>:
 1007c10:	21400015 	stw	r5,0(r4)
 1007c14:	f800283a 	ret

01007c18 <_ZNSs4_Rep12_S_empty_repEv>:
 1007c18:	008040f4 	movhi	r2,259
 1007c1c:	108f2704 	addi	r2,r2,15516
 1007c20:	f800283a 	ret

01007c24 <_ZNKSs4_Rep12_M_is_leakedEv>:
 1007c24:	20800217 	ldw	r2,8(r4)
 1007c28:	1004d7fa 	srli	r2,r2,31
 1007c2c:	f800283a 	ret

01007c30 <_ZNKSs4_Rep12_M_is_sharedEv>:
 1007c30:	20800217 	ldw	r2,8(r4)
 1007c34:	0084803a 	cmplt	r2,zero,r2
 1007c38:	f800283a 	ret

01007c3c <_ZNSs4_Rep13_M_set_leakedEv>:
 1007c3c:	00bfffc4 	movi	r2,-1
 1007c40:	20800215 	stw	r2,8(r4)
 1007c44:	f800283a 	ret

01007c48 <_ZNSs4_Rep15_M_set_sharableEv>:
 1007c48:	20000215 	stw	zero,8(r4)
 1007c4c:	f800283a 	ret

01007c50 <_ZNSs4_Rep26_M_set_length_and_sharableEm>:
 1007c50:	2145883a 	add	r2,r4,r5
 1007c54:	20000215 	stw	zero,8(r4)
 1007c58:	21400015 	stw	r5,0(r4)
 1007c5c:	10000305 	stb	zero,12(r2)
 1007c60:	f800283a 	ret

01007c64 <_ZNSs4_Rep10_M_refdataEv>:
 1007c64:	20800304 	addi	r2,r4,12
 1007c68:	f800283a 	ret

01007c6c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_>:
 1007c6c:	defff504 	addi	sp,sp,-44
 1007c70:	dd400615 	stw	r21,24(sp)
 1007c74:	dd000515 	stw	r20,20(sp)
 1007c78:	dcc00415 	stw	r19,16(sp)
 1007c7c:	dc800315 	stw	r18,12(sp)
 1007c80:	dc400215 	stw	r17,8(sp)
 1007c84:	dfc00a15 	stw	ra,40(sp)
 1007c88:	df000915 	stw	fp,36(sp)
 1007c8c:	ddc00815 	stw	r23,32(sp)
 1007c90:	dd800715 	stw	r22,28(sp)
 1007c94:	dc000115 	stw	r16,4(sp)
 1007c98:	2025883a 	mov	r18,r4
 1007c9c:	2823883a 	mov	r17,r5
 1007ca0:	3027883a 	mov	r19,r6
 1007ca4:	382b883a 	mov	r21,r7
 1007ca8:	dd000b17 	ldw	r20,44(sp)
 1007cac:	21400d26 	beq	r4,r5,1007ce4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1007cb0:	31c00c26 	beq	r6,r7,1007ce4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1007cb4:	30800044 	addi	r2,r6,1
 1007cb8:	d8800015 	stw	r2,0(sp)
 1007cbc:	38803226 	beq	r7,r2,1007d88 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x11c>
 1007cc0:	9021883a 	mov	r16,r18
 1007cc4:	8009883a 	mov	r4,r16
 1007cc8:	980b883a 	mov	r5,r19
 1007ccc:	a03ee83a 	callr	r20
 1007cd0:	10803fcc 	andi	r2,r2,255
 1007cd4:	1000101e 	bne	r2,zero,1007d18 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xac>
 1007cd8:	84000044 	addi	r16,r16,1
 1007cdc:	847ff91e 	bne	r16,r17,1007cc4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x58>
 1007ce0:	8825883a 	mov	r18,r17
 1007ce4:	9005883a 	mov	r2,r18
 1007ce8:	dfc00a17 	ldw	ra,40(sp)
 1007cec:	df000917 	ldw	fp,36(sp)
 1007cf0:	ddc00817 	ldw	r23,32(sp)
 1007cf4:	dd800717 	ldw	r22,28(sp)
 1007cf8:	dd400617 	ldw	r21,24(sp)
 1007cfc:	dd000517 	ldw	r20,20(sp)
 1007d00:	dcc00417 	ldw	r19,16(sp)
 1007d04:	dc800317 	ldw	r18,12(sp)
 1007d08:	dc400217 	ldw	r17,8(sp)
 1007d0c:	dc000117 	ldw	r16,4(sp)
 1007d10:	dec00b04 	addi	sp,sp,44
 1007d14:	f800283a 	ret
 1007d18:	8c3ff126 	beq	r17,r16,1007ce0 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x74>
 1007d1c:	8825883a 	mov	r18,r17
 1007d20:	00000206 	br	1007d2c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xc0>
 1007d24:	84000044 	addi	r16,r16,1
 1007d28:	84bfed26 	beq	r16,r18,1007ce0 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x74>
 1007d2c:	8009883a 	mov	r4,r16
 1007d30:	980b883a 	mov	r5,r19
 1007d34:	a03ee83a 	callr	r20
 1007d38:	10803fcc 	andi	r2,r2,255
 1007d3c:	103ff926 	beq	r2,zero,1007d24 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xb8>
 1007d40:	87000044 	addi	fp,r16,1
 1007d44:	8f001a26 	beq	r17,fp,1007db0 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x144>
 1007d48:	dd800017 	ldw	r22,0(sp)
 1007d4c:	e02f883a 	mov	r23,fp
 1007d50:	b809883a 	mov	r4,r23
 1007d54:	b00b883a 	mov	r5,r22
 1007d58:	a03ee83a 	callr	r20
 1007d5c:	8c07c83a 	sub	r3,r17,r16
 1007d60:	10803fcc 	andi	r2,r2,255
 1007d64:	98c7883a 	add	r3,r19,r3
 1007d68:	b5800044 	addi	r22,r22,1
 1007d6c:	bdc00044 	addi	r23,r23,1
 1007d70:	e025883a 	mov	r18,fp
 1007d74:	103fd226 	beq	r2,zero,1007cc0 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x54>
 1007d78:	ad800b26 	beq	r21,r22,1007da8 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x13c>
 1007d7c:	b0fff41e 	bne	r22,r3,1007d50 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xe4>
 1007d80:	b825883a 	mov	r18,r23
 1007d84:	003fd706 	br	1007ce4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1007d88:	2021883a 	mov	r16,r4
 1007d8c:	8009883a 	mov	r4,r16
 1007d90:	980b883a 	mov	r5,r19
 1007d94:	a03ee83a 	callr	r20
 1007d98:	10803fcc 	andi	r2,r2,255
 1007d9c:	1000021e 	bne	r2,zero,1007da8 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x13c>
 1007da0:	84000044 	addi	r16,r16,1
 1007da4:	8c3ff91e 	bne	r17,r16,1007d8c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x120>
 1007da8:	8025883a 	mov	r18,r16
 1007dac:	003fcd06 	br	1007ce4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
 1007db0:	e025883a 	mov	r18,fp
 1007db4:	003fcb06 	br	1007ce4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>

01007db8 <_ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_>:
 1007db8:	20c00017 	ldw	r3,0(r4)
 1007dbc:	28800017 	ldw	r2,0(r5)
 1007dc0:	1885003a 	cmpeq	r2,r3,r2
 1007dc4:	f800283a 	ret

01007dc8 <_ZNSs12_Alloc_hiderC2EPcRKSaIcE>:
 1007dc8:	21400015 	stw	r5,0(r4)
 1007dcc:	f800283a 	ret

01007dd0 <_ZNSs4_Rep10_M_refcopyEv>:
 1007dd0:	deffee04 	addi	sp,sp,-72
 1007dd4:	00804074 	movhi	r2,257
 1007dd8:	10b3a604 	addi	r2,r2,-12648
 1007ddc:	00c040b4 	movhi	r3,258
 1007de0:	18d18504 	addi	r3,r3,17940
 1007de4:	d8800615 	stw	r2,24(sp)
 1007de8:	d9000d15 	stw	r4,52(sp)
 1007dec:	00804034 	movhi	r2,256
 1007df0:	109f9a04 	addi	r2,r2,32360
 1007df4:	d809883a 	mov	r4,sp
 1007df8:	d8c00715 	stw	r3,28(sp)
 1007dfc:	d8800915 	stw	r2,36(sp)
 1007e00:	dfc01115 	stw	ra,68(sp)
 1007e04:	df001015 	stw	fp,64(sp)
 1007e08:	ddc00f15 	stw	r23,60(sp)
 1007e0c:	dec00815 	stw	sp,32(sp)
 1007e10:	dec00a15 	stw	sp,40(sp)
 1007e14:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1007e18:	d8c00d17 	ldw	r3,52(sp)
 1007e1c:	008040f4 	movhi	r2,259
 1007e20:	108f2704 	addi	r2,r2,15516
 1007e24:	18800b1e 	bne	r3,r2,1007e54 <_ZNSs4_Rep10_M_refcopyEv+0x84>
 1007e28:	d8800d17 	ldw	r2,52(sp)
 1007e2c:	d809883a 	mov	r4,sp
 1007e30:	10800304 	addi	r2,r2,12
 1007e34:	d8800e15 	stw	r2,56(sp)
 1007e38:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1007e3c:	d8800e17 	ldw	r2,56(sp)
 1007e40:	dfc01117 	ldw	ra,68(sp)
 1007e44:	df001017 	ldw	fp,64(sp)
 1007e48:	ddc00f17 	ldw	r23,60(sp)
 1007e4c:	dec01204 	addi	sp,sp,72
 1007e50:	f800283a 	ret
 1007e54:	01400044 	movi	r5,1
 1007e58:	d9400115 	stw	r5,4(sp)
 1007e5c:	19000204 	addi	r4,r3,8
 1007e60:	100ba040 	call	100ba04 <_ZN9__gnu_cxx12__atomic_addEPVii>
 1007e64:	003ff006 	br	1007e28 <_ZNSs4_Rep10_M_refcopyEv+0x58>
 1007e68:	d8800317 	ldw	r2,12(sp)
 1007e6c:	00ffffc4 	movi	r3,-1
 1007e70:	d9000217 	ldw	r4,8(sp)
 1007e74:	10c00226 	beq	r2,r3,1007e80 <_ZNSs4_Rep10_M_refcopyEv+0xb0>
 1007e78:	d8c00115 	stw	r3,4(sp)
 1007e7c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1007e80:	00bfffc4 	movi	r2,-1
 1007e84:	d8800115 	stw	r2,4(sp)
 1007e88:	100cd180 	call	100cd18 <__cxa_call_unexpected>

01007e8c <_ZNKSs15_M_check_lengthEmmPKc>:
 1007e8c:	20800017 	ldw	r2,0(r4)
 1007e90:	deffff04 	addi	sp,sp,-4
 1007e94:	dfc00015 	stw	ra,0(sp)
 1007e98:	10fffd17 	ldw	r3,-12(r2)
 1007e9c:	00900034 	movhi	r2,16384
 1007ea0:	10bfff04 	addi	r2,r2,-4
 1007ea4:	1947c83a 	sub	r3,r3,r5
 1007ea8:	10c5c83a 	sub	r2,r2,r3
 1007eac:	11800336 	bltu	r2,r6,1007ebc <_ZNKSs15_M_check_lengthEmmPKc+0x30>
 1007eb0:	dfc00017 	ldw	ra,0(sp)
 1007eb4:	dec00104 	addi	sp,sp,4
 1007eb8:	f800283a 	ret
 1007ebc:	3809883a 	mov	r4,r7
 1007ec0:	100673c0 	call	100673c <_ZSt20__throw_length_errorPKc>

01007ec4 <_ZNKSs8_M_checkEmPKc>:
 1007ec4:	20c00017 	ldw	r3,0(r4)
 1007ec8:	deffff04 	addi	sp,sp,-4
 1007ecc:	dfc00015 	stw	ra,0(sp)
 1007ed0:	18bffd17 	ldw	r2,-12(r3)
 1007ed4:	11400436 	bltu	r2,r5,1007ee8 <_ZNKSs8_M_checkEmPKc+0x24>
 1007ed8:	2805883a 	mov	r2,r5
 1007edc:	dfc00017 	ldw	ra,0(sp)
 1007ee0:	dec00104 	addi	sp,sp,4
 1007ee4:	f800283a 	ret
 1007ee8:	3009883a 	mov	r4,r6
 1007eec:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

01007ef0 <_ZNSs9_M_assignEPcmc>:
 1007ef0:	3011883a 	mov	r8,r6
 1007ef4:	2807883a 	mov	r3,r5
 1007ef8:	280d883a 	mov	r6,r5
 1007efc:	41403fcc 	andi	r5,r8,255
 1007f00:	2940201c 	xori	r5,r5,128
 1007f04:	01c00044 	movi	r7,1
 1007f08:	297fe004 	addi	r5,r5,-128
 1007f0c:	19c00126 	beq	r3,r7,1007f14 <_ZNSs9_M_assignEPcmc+0x24>
 1007f10:	100ecec1 	jmpi	100ecec <memset>
 1007f14:	22000005 	stb	r8,0(r4)
 1007f18:	f800283a 	ret

01007f1c <_ZNSs7_M_moveEPcPKcm>:
 1007f1c:	00800044 	movi	r2,1
 1007f20:	30800126 	beq	r6,r2,1007f28 <_ZNSs7_M_moveEPcPKcm+0xc>
 1007f24:	100ec0c1 	jmpi	100ec0c <memmove>
 1007f28:	28800003 	ldbu	r2,0(r5)
 1007f2c:	20800005 	stb	r2,0(r4)
 1007f30:	f800283a 	ret

01007f34 <_ZNSs7_M_copyEPcPKcm>:
 1007f34:	00800044 	movi	r2,1
 1007f38:	30800126 	beq	r6,r2,1007f40 <_ZNSs7_M_copyEPcPKcm+0xc>
 1007f3c:	100eb6c1 	jmpi	100eb6c <memcpy>
 1007f40:	28800003 	ldbu	r2,0(r5)
 1007f44:	20800005 	stb	r2,0(r4)
 1007f48:	f800283a 	ret

01007f4c <_ZNKSs5c_strEv>:
 1007f4c:	20800017 	ldw	r2,0(r4)
 1007f50:	f800283a 	ret

01007f54 <_ZNKSsixEm>:
 1007f54:	20800017 	ldw	r2,0(r4)
 1007f58:	2885883a 	add	r2,r5,r2
 1007f5c:	f800283a 	ret

01007f60 <_ZNKSs17find_first_not_ofEPKcmm>:
 1007f60:	20c00017 	ldw	r3,0(r4)
 1007f64:	defffb04 	addi	sp,sp,-20
 1007f68:	dcc00315 	stw	r19,12(sp)
 1007f6c:	18bffd17 	ldw	r2,-12(r3)
 1007f70:	dc800215 	stw	r18,8(sp)
 1007f74:	dc400115 	stw	r17,4(sp)
 1007f78:	dc000015 	stw	r16,0(sp)
 1007f7c:	dfc00415 	stw	ra,16(sp)
 1007f80:	2027883a 	mov	r19,r4
 1007f84:	3021883a 	mov	r16,r6
 1007f88:	2825883a 	mov	r18,r5
 1007f8c:	3823883a 	mov	r17,r7
 1007f90:	30800536 	bltu	r6,r2,1007fa8 <_ZNKSs17find_first_not_ofEPKcmm+0x48>
 1007f94:	00001206 	br	1007fe0 <_ZNKSs17find_first_not_ofEPKcmm+0x80>
 1007f98:	98c00017 	ldw	r3,0(r19)
 1007f9c:	84000044 	addi	r16,r16,1
 1007fa0:	18bffd17 	ldw	r2,-12(r3)
 1007fa4:	80800e2e 	bgeu	r16,r2,1007fe0 <_ZNKSs17find_first_not_ofEPKcmm+0x80>
 1007fa8:	1c05883a 	add	r2,r3,r16
 1007fac:	11400007 	ldb	r5,0(r2)
 1007fb0:	9009883a 	mov	r4,r18
 1007fb4:	880d883a 	mov	r6,r17
 1007fb8:	100ea140 	call	100ea14 <memchr>
 1007fbc:	103ff61e 	bne	r2,zero,1007f98 <_ZNKSs17find_first_not_ofEPKcmm+0x38>
 1007fc0:	8005883a 	mov	r2,r16
 1007fc4:	dfc00417 	ldw	ra,16(sp)
 1007fc8:	dcc00317 	ldw	r19,12(sp)
 1007fcc:	dc800217 	ldw	r18,8(sp)
 1007fd0:	dc400117 	ldw	r17,4(sp)
 1007fd4:	dc000017 	ldw	r16,0(sp)
 1007fd8:	dec00504 	addi	sp,sp,20
 1007fdc:	f800283a 	ret
 1007fe0:	043fffc4 	movi	r16,-1
 1007fe4:	8005883a 	mov	r2,r16
 1007fe8:	dfc00417 	ldw	ra,16(sp)
 1007fec:	dcc00317 	ldw	r19,12(sp)
 1007ff0:	dc800217 	ldw	r18,8(sp)
 1007ff4:	dc400117 	ldw	r17,4(sp)
 1007ff8:	dc000017 	ldw	r16,0(sp)
 1007ffc:	dec00504 	addi	sp,sp,20
 1008000:	f800283a 	ret

01008004 <_ZNKSs4findEPKcmm>:
 1008004:	defffb04 	addi	sp,sp,-20
 1008008:	dc000115 	stw	r16,4(sp)
 100800c:	24000017 	ldw	r16,0(r4)
 1008010:	31c7883a 	add	r3,r6,r7
 1008014:	dc800315 	stw	r18,12(sp)
 1008018:	823ffd17 	ldw	r8,-12(r16)
 100801c:	8189883a 	add	r4,r16,r6
 1008020:	280d883a 	mov	r6,r5
 1008024:	8225883a 	add	r18,r16,r8
 1008028:	dc400215 	stw	r17,8(sp)
 100802c:	dfc00415 	stw	ra,16(sp)
 1008030:	3823883a 	mov	r17,r7
 1008034:	900b883a 	mov	r5,r18
 1008038:	398f883a 	add	r7,r7,r6
 100803c:	40c0082e 	bgeu	r8,r3,1008060 <_ZNKSs4findEPKcmm+0x5c>
 1008040:	00ffffc4 	movi	r3,-1
 1008044:	1805883a 	mov	r2,r3
 1008048:	dfc00417 	ldw	ra,16(sp)
 100804c:	dc800317 	ldw	r18,12(sp)
 1008050:	dc400217 	ldw	r17,8(sp)
 1008054:	dc000117 	ldw	r16,4(sp)
 1008058:	dec00504 	addi	sp,sp,20
 100805c:	f800283a 	ret
 1008060:	00804034 	movhi	r2,256
 1008064:	109ecb04 	addi	r2,r2,31532
 1008068:	d8800015 	stw	r2,0(sp)
 100806c:	1007c6c0 	call	1007c6c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_>
 1008070:	1407c83a 	sub	r3,r2,r16
 1008074:	90bff31e 	bne	r18,r2,1008044 <_ZNKSs4findEPKcmm+0x40>
 1008078:	883ff11e 	bne	r17,zero,1008040 <_ZNKSs4findEPKcmm+0x3c>
 100807c:	1805883a 	mov	r2,r3
 1008080:	dfc00417 	ldw	ra,16(sp)
 1008084:	dc800317 	ldw	r18,12(sp)
 1008088:	dc400217 	ldw	r17,8(sp)
 100808c:	dc000117 	ldw	r16,4(sp)
 1008090:	dec00504 	addi	sp,sp,20
 1008094:	f800283a 	ret

01008098 <_ZNKSs2atEm>:
 1008098:	21000017 	ldw	r4,0(r4)
 100809c:	deffff04 	addi	sp,sp,-4
 10080a0:	dfc00015 	stw	ra,0(sp)
 10080a4:	20bffd17 	ldw	r2,-12(r4)
 10080a8:	2880042e 	bgeu	r5,r2,10080bc <_ZNKSs2atEm+0x24>
 10080ac:	2145883a 	add	r2,r4,r5
 10080b0:	dfc00017 	ldw	ra,0(sp)
 10080b4:	dec00104 	addi	sp,sp,4
 10080b8:	f800283a 	ret
 10080bc:	010040b4 	movhi	r4,258
 10080c0:	21150304 	addi	r4,r4,21516
 10080c4:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

010080c8 <_ZNKSs5emptyEv>:
 10080c8:	20c00017 	ldw	r3,0(r4)
 10080cc:	18bffd17 	ldw	r2,-12(r3)
 10080d0:	1005003a 	cmpeq	r2,r2,zero
 10080d4:	f800283a 	ret

010080d8 <_ZNKSs6lengthEv>:
 10080d8:	20c00017 	ldw	r3,0(r4)
 10080dc:	18bffd17 	ldw	r2,-12(r3)
 10080e0:	f800283a 	ret

010080e4 <_ZNKSs4findERKSsm>:
 10080e4:	29400017 	ldw	r5,0(r5)
 10080e8:	29fffd17 	ldw	r7,-12(r5)
 10080ec:	10080041 	jmpi	1008004 <_ZNKSs4findEPKcmm>

010080f0 <_ZNKSs17find_first_not_ofERKSsm>:
 10080f0:	29400017 	ldw	r5,0(r5)
 10080f4:	29fffd17 	ldw	r7,-12(r5)
 10080f8:	1007f601 	jmpi	1007f60 <_ZNKSs17find_first_not_ofEPKcmm>

010080fc <_ZNKSs5rfindEPKcmm>:
 10080fc:	defff804 	addi	sp,sp,-32
 1008100:	dc800415 	stw	r18,16(sp)
 1008104:	24800017 	ldw	r18,0(r4)
 1008108:	dcc00515 	stw	r19,20(sp)
 100810c:	dc400315 	stw	r17,12(sp)
 1008110:	90bffd17 	ldw	r2,-12(r18)
 1008114:	dfc00715 	stw	ra,28(sp)
 1008118:	dd000615 	stw	r20,24(sp)
 100811c:	dc000215 	stw	r16,8(sp)
 1008120:	3823883a 	mov	r17,r7
 1008124:	2827883a 	mov	r19,r5
 1008128:	d9800115 	stw	r6,4(sp)
 100812c:	11c01136 	bltu	r2,r7,1008174 <_ZNKSs5rfindEPKcmm+0x78>
 1008130:	11c5c83a 	sub	r2,r2,r7
 1008134:	d8800015 	stw	r2,0(sp)
 1008138:	3080182e 	bgeu	r6,r2,100819c <_ZNKSs5rfindEPKcmm+0xa0>
 100813c:	d8800104 	addi	r2,sp,4
 1008140:	10800017 	ldw	r2,0(r2)
 1008144:	053fffc4 	movi	r20,-1
 1008148:	d8800115 	stw	r2,4(sp)
 100814c:	00000106 	br	1008154 <_ZNKSs5rfindEPKcmm+0x58>
 1008150:	d8c00115 	stw	r3,4(sp)
 1008154:	dc000117 	ldw	r16,4(sp)
 1008158:	980b883a 	mov	r5,r19
 100815c:	880d883a 	mov	r6,r17
 1008160:	9409883a 	add	r4,r18,r16
 1008164:	100eaf80 	call	100eaf8 <memcmp>
 1008168:	80ffffc4 	addi	r3,r16,-1
 100816c:	10000226 	beq	r2,zero,1008178 <_ZNKSs5rfindEPKcmm+0x7c>
 1008170:	1d3ff71e 	bne	r3,r20,1008150 <_ZNKSs5rfindEPKcmm+0x54>
 1008174:	043fffc4 	movi	r16,-1
 1008178:	8005883a 	mov	r2,r16
 100817c:	dfc00717 	ldw	ra,28(sp)
 1008180:	dd000617 	ldw	r20,24(sp)
 1008184:	dcc00517 	ldw	r19,20(sp)
 1008188:	dc800417 	ldw	r18,16(sp)
 100818c:	dc400317 	ldw	r17,12(sp)
 1008190:	dc000217 	ldw	r16,8(sp)
 1008194:	dec00804 	addi	sp,sp,32
 1008198:	f800283a 	ret
 100819c:	d805883a 	mov	r2,sp
 10081a0:	003fe706 	br	1008140 <_ZNKSs5rfindEPKcmm+0x44>

010081a4 <_ZNKSs5rfindEPKcm>:
 10081a4:	defffc04 	addi	sp,sp,-16
 10081a8:	dd400215 	stw	r21,8(sp)
 10081ac:	dcc00115 	stw	r19,4(sp)
 10081b0:	dc400015 	stw	r17,0(sp)
 10081b4:	2027883a 	mov	r19,r4
 10081b8:	dfc00315 	stw	ra,12(sp)
 10081bc:	2809883a 	mov	r4,r5
 10081c0:	2823883a 	mov	r17,r5
 10081c4:	302b883a 	mov	r21,r6
 10081c8:	100f4040 	call	100f404 <strlen>
 10081cc:	880b883a 	mov	r5,r17
 10081d0:	9809883a 	mov	r4,r19
 10081d4:	a80d883a 	mov	r6,r21
 10081d8:	100f883a 	mov	r7,r2
 10081dc:	dfc00317 	ldw	ra,12(sp)
 10081e0:	dd400217 	ldw	r21,8(sp)
 10081e4:	dcc00117 	ldw	r19,4(sp)
 10081e8:	dc400017 	ldw	r17,0(sp)
 10081ec:	dec00404 	addi	sp,sp,16
 10081f0:	10080fc1 	jmpi	10080fc <_ZNKSs5rfindEPKcmm>

010081f4 <_ZNKSs5rfindERKSsm>:
 10081f4:	29400017 	ldw	r5,0(r5)
 10081f8:	29fffd17 	ldw	r7,-12(r5)
 10081fc:	10080fc1 	jmpi	10080fc <_ZNKSs5rfindEPKcmm>

01008200 <_ZNSsC2Ev>:
 1008200:	008040f4 	movhi	r2,259
 1008204:	108f2a04 	addi	r2,r2,15528
 1008208:	20800015 	stw	r2,0(r4)
 100820c:	f800283a 	ret

01008210 <_ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_>:
 1008210:	20c00017 	ldw	r3,0(r4)
 1008214:	28800017 	ldw	r2,0(r5)
 1008218:	1885003a 	cmpeq	r2,r3,r2
 100821c:	f800283a 	ret

01008220 <_ZNKSs5rfindEcm>:
 1008220:	21000017 	ldw	r4,0(r4)
 1008224:	3007883a 	mov	r3,r6
 1008228:	20bffd17 	ldw	r2,-12(r4)
 100822c:	10001226 	beq	r2,zero,1008278 <_ZNKSs5rfindEcm+0x58>
 1008230:	11bfffc4 	addi	r6,r2,-1
 1008234:	19800e36 	bltu	r3,r6,1008270 <_ZNKSs5rfindEcm+0x50>
 1008238:	29403fcc 	andi	r5,r5,255
 100823c:	2940201c 	xori	r5,r5,128
 1008240:	2189883a 	add	r4,r4,r6
 1008244:	297fe004 	addi	r5,r5,-128
 1008248:	0007883a 	mov	r3,zero
 100824c:	32000044 	addi	r8,r6,1
 1008250:	30cfc83a 	sub	r7,r6,r3
 1008254:	40c00826 	beq	r8,r3,1008278 <_ZNKSs5rfindEcm+0x58>
 1008258:	20800007 	ldb	r2,0(r4)
 100825c:	18c00044 	addi	r3,r3,1
 1008260:	213fffc4 	addi	r4,r4,-1
 1008264:	117ffa1e 	bne	r2,r5,1008250 <_ZNKSs5rfindEcm+0x30>
 1008268:	3805883a 	mov	r2,r7
 100826c:	f800283a 	ret
 1008270:	180d883a 	mov	r6,r3
 1008274:	003ff006 	br	1008238 <_ZNKSs5rfindEcm+0x18>
 1008278:	01ffffc4 	movi	r7,-1
 100827c:	3805883a 	mov	r2,r7
 1008280:	f800283a 	ret

01008284 <_ZNKSs12find_last_ofEcm>:
 1008284:	29403fcc 	andi	r5,r5,255
 1008288:	2940201c 	xori	r5,r5,128
 100828c:	297fe004 	addi	r5,r5,-128
 1008290:	10082201 	jmpi	1008220 <_ZNKSs5rfindEcm>

01008294 <_ZNKSs16find_last_not_ofEcm>:
 1008294:	21000017 	ldw	r4,0(r4)
 1008298:	20bffd17 	ldw	r2,-12(r4)
 100829c:	10001026 	beq	r2,zero,10082e0 <_ZNKSs16find_last_not_ofEcm+0x4c>
 10082a0:	10ffffc4 	addi	r3,r2,-1
 10082a4:	30c00c36 	bltu	r6,r3,10082d8 <_ZNKSs16find_last_not_ofEcm+0x44>
 10082a8:	29403fcc 	andi	r5,r5,255
 10082ac:	2940201c 	xori	r5,r5,128
 10082b0:	20c9883a 	add	r4,r4,r3
 10082b4:	297fe004 	addi	r5,r5,-128
 10082b8:	01bfffc4 	movi	r6,-1
 10082bc:	20800007 	ldb	r2,0(r4)
 10082c0:	213fffc4 	addi	r4,r4,-1
 10082c4:	1140021e 	bne	r2,r5,10082d0 <_ZNKSs16find_last_not_ofEcm+0x3c>
 10082c8:	18ffffc4 	addi	r3,r3,-1
 10082cc:	19bffb1e 	bne	r3,r6,10082bc <_ZNKSs16find_last_not_ofEcm+0x28>
 10082d0:	1805883a 	mov	r2,r3
 10082d4:	f800283a 	ret
 10082d8:	3007883a 	mov	r3,r6
 10082dc:	003ff206 	br	10082a8 <_ZNKSs16find_last_not_ofEcm+0x14>
 10082e0:	00ffffc4 	movi	r3,-1
 10082e4:	1805883a 	mov	r2,r3
 10082e8:	f800283a 	ret

010082ec <_ZNKSs17find_first_not_ofEcm>:
 10082ec:	21000017 	ldw	r4,0(r4)
 10082f0:	3007883a 	mov	r3,r6
 10082f4:	21bffd17 	ldw	r6,-12(r4)
 10082f8:	19800f2e 	bgeu	r3,r6,1008338 <_ZNKSs17find_first_not_ofEcm+0x4c>
 10082fc:	20c9883a 	add	r4,r4,r3
 1008300:	29403fcc 	andi	r5,r5,255
 1008304:	20800007 	ldb	r2,0(r4)
 1008308:	2940201c 	xori	r5,r5,128
 100830c:	297fe004 	addi	r5,r5,-128
 1008310:	28800a1e 	bne	r5,r2,100833c <_ZNKSs17find_first_not_ofEcm+0x50>
 1008314:	30cfc83a 	sub	r7,r6,r3
 1008318:	180d883a 	mov	r6,r3
 100831c:	00000306 	br	100832c <_ZNKSs17find_first_not_ofEcm+0x40>
 1008320:	20800047 	ldb	r2,1(r4)
 1008324:	21000044 	addi	r4,r4,1
 1008328:	1140061e 	bne	r2,r5,1008344 <_ZNKSs17find_first_not_ofEcm+0x58>
 100832c:	31800044 	addi	r6,r6,1
 1008330:	19c5883a 	add	r2,r3,r7
 1008334:	11bffa1e 	bne	r2,r6,1008320 <_ZNKSs17find_first_not_ofEcm+0x34>
 1008338:	00ffffc4 	movi	r3,-1
 100833c:	1805883a 	mov	r2,r3
 1008340:	f800283a 	ret
 1008344:	3007883a 	mov	r3,r6
 1008348:	1805883a 	mov	r2,r3
 100834c:	f800283a 	ret

01008350 <_ZNSs4_Rep9_S_createEmmRKSaIcE>:
 1008350:	deffed04 	addi	sp,sp,-76
 1008354:	00804074 	movhi	r2,257
 1008358:	10b3a604 	addi	r2,r2,-12648
 100835c:	00c040b4 	movhi	r3,258
 1008360:	18d18844 	addi	r3,r3,17953
 1008364:	d8800615 	stw	r2,24(sp)
 1008368:	d9000e15 	stw	r4,56(sp)
 100836c:	00804074 	movhi	r2,257
 1008370:	10a11c04 	addi	r2,r2,-31632
 1008374:	d809883a 	mov	r4,sp
 1008378:	d8c00715 	stw	r3,28(sp)
 100837c:	d8800915 	stw	r2,36(sp)
 1008380:	dfc01215 	stw	ra,72(sp)
 1008384:	df001115 	stw	fp,68(sp)
 1008388:	ddc01015 	stw	r23,64(sp)
 100838c:	dec00815 	stw	sp,32(sp)
 1008390:	dec00a15 	stw	sp,40(sp)
 1008394:	d9400f15 	stw	r5,60(sp)
 1008398:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100839c:	d8c00e17 	ldw	r3,56(sp)
 10083a0:	00900034 	movhi	r2,16384
 10083a4:	10bfff04 	addi	r2,r2,-4
 10083a8:	10c02c36 	bltu	r2,r3,100845c <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x10c>
 10083ac:	d9800f17 	ldw	r6,60(sp)
 10083b0:	d9c00e17 	ldw	r7,56(sp)
 10083b4:	31c0032e 	bgeu	r6,r7,10083c4 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x74>
 10083b8:	3189883a 	add	r4,r6,r6
 10083bc:	3900012e 	bgeu	r7,r4,10083c4 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x74>
 10083c0:	d9000e15 	stw	r4,56(sp)
 10083c4:	d8800e17 	ldw	r2,56(sp)
 10083c8:	01400344 	movi	r5,13
 10083cc:	00c40004 	movi	r3,4096
 10083d0:	1149883a 	add	r4,r2,r5
 10083d4:	20800404 	addi	r2,r4,16
 10083d8:	18800f36 	bltu	r3,r2,1008418 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0xc8>
 10083dc:	00800044 	movi	r2,1
 10083e0:	d8800115 	stw	r2,4(sp)
 10083e4:	100dbf80 	call	100dbf8 <_Znwm>
 10083e8:	d8c00e17 	ldw	r3,56(sp)
 10083ec:	10000215 	stw	zero,8(r2)
 10083f0:	d809883a 	mov	r4,sp
 10083f4:	10c00115 	stw	r3,4(r2)
 10083f8:	d8800d15 	stw	r2,52(sp)
 10083fc:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1008400:	d8800d17 	ldw	r2,52(sp)
 1008404:	dfc01217 	ldw	ra,72(sp)
 1008408:	df001117 	ldw	fp,68(sp)
 100840c:	ddc01017 	ldw	r23,64(sp)
 1008410:	dec01304 	addi	sp,sp,76
 1008414:	f800283a 	ret
 1008418:	d9800f17 	ldw	r6,60(sp)
 100841c:	d9c00e17 	ldw	r7,56(sp)
 1008420:	31ffee2e 	bgeu	r6,r7,10083dc <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
 1008424:	1083ffcc 	andi	r2,r2,4095
 1008428:	1885c83a 	sub	r2,r3,r2
 100842c:	388f883a 	add	r7,r7,r2
 1008430:	01100034 	movhi	r4,16384
 1008434:	213fff04 	addi	r4,r4,-4
 1008438:	d9c00e15 	stw	r7,56(sp)
 100843c:	21c00336 	bltu	r4,r7,100844c <_ZNSs4_Rep9_S_createEmmRKSaIcE+0xfc>
 1008440:	d8800e17 	ldw	r2,56(sp)
 1008444:	1149883a 	add	r4,r2,r5
 1008448:	003fe406 	br	10083dc <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
 100844c:	d9000e15 	stw	r4,56(sp)
 1008450:	d8800e17 	ldw	r2,56(sp)
 1008454:	1149883a 	add	r4,r2,r5
 1008458:	003fe006 	br	10083dc <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
 100845c:	00bfffc4 	movi	r2,-1
 1008460:	010040b4 	movhi	r4,258
 1008464:	21150804 	addi	r4,r4,21536
 1008468:	d8800115 	stw	r2,4(sp)
 100846c:	100673c0 	call	100673c <_ZSt20__throw_length_errorPKc>
 1008470:	d9000217 	ldw	r4,8(sp)
 1008474:	00bfffc4 	movi	r2,-1
 1008478:	d8800115 	stw	r2,4(sp)
 100847c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

01008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 1008480:	100d6681 	jmpi	100d668 <_ZdlPv>

01008484 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 1008484:	defffd04 	addi	sp,sp,-12
 1008488:	dc000015 	stw	r16,0(sp)
 100848c:	008040f4 	movhi	r2,259
 1008490:	108f2704 	addi	r2,r2,15516
 1008494:	2021883a 	mov	r16,r4
 1008498:	dc400115 	stw	r17,4(sp)
 100849c:	dfc00215 	stw	ra,8(sp)
 10084a0:	2823883a 	mov	r17,r5
 10084a4:	21000204 	addi	r4,r4,8
 10084a8:	017fffc4 	movi	r5,-1
 10084ac:	8080051e 	bne	r16,r2,10084c4 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x40>
 10084b0:	dfc00217 	ldw	ra,8(sp)
 10084b4:	dc400117 	ldw	r17,4(sp)
 10084b8:	dc000017 	ldw	r16,0(sp)
 10084bc:	dec00304 	addi	sp,sp,12
 10084c0:	f800283a 	ret
 10084c4:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 10084c8:	8009883a 	mov	r4,r16
 10084cc:	880b883a 	mov	r5,r17
 10084d0:	00bff716 	blt	zero,r2,10084b0 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x2c>
 10084d4:	dfc00217 	ldw	ra,8(sp)
 10084d8:	dc400117 	ldw	r17,4(sp)
 10084dc:	dc000017 	ldw	r16,0(sp)
 10084e0:	dec00304 	addi	sp,sp,12
 10084e4:	10084801 	jmpi	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>

010084e8 <_ZNKSs12find_last_ofEPKcmm>:
 10084e8:	20800017 	ldw	r2,0(r4)
 10084ec:	defffb04 	addi	sp,sp,-20
 10084f0:	dcc00315 	stw	r19,12(sp)
 10084f4:	10fffd17 	ldw	r3,-12(r2)
 10084f8:	dc800215 	stw	r18,8(sp)
 10084fc:	dc400115 	stw	r17,4(sp)
 1008500:	dfc00415 	stw	ra,16(sp)
 1008504:	dc000015 	stw	r16,0(sp)
 1008508:	2027883a 	mov	r19,r4
 100850c:	2825883a 	mov	r18,r5
 1008510:	3823883a 	mov	r17,r7
 1008514:	18002426 	beq	r3,zero,10085a8 <_ZNKSs12find_last_ofEPKcmm+0xc0>
 1008518:	38002326 	beq	r7,zero,10085a8 <_ZNKSs12find_last_ofEPKcmm+0xc0>
 100851c:	1c3fffc4 	addi	r16,r3,-1
 1008520:	3400102e 	bgeu	r6,r16,1008564 <_ZNKSs12find_last_ofEPKcmm+0x7c>
 1008524:	3021883a 	mov	r16,r6
 1008528:	1405883a 	add	r2,r2,r16
 100852c:	11400007 	ldb	r5,0(r2)
 1008530:	9009883a 	mov	r4,r18
 1008534:	880d883a 	mov	r6,r17
 1008538:	100ea140 	call	100ea14 <memchr>
 100853c:	10000f26 	beq	r2,zero,100857c <_ZNKSs12find_last_ofEPKcmm+0x94>
 1008540:	8005883a 	mov	r2,r16
 1008544:	dfc00417 	ldw	ra,16(sp)
 1008548:	dcc00317 	ldw	r19,12(sp)
 100854c:	dc800217 	ldw	r18,8(sp)
 1008550:	dc400117 	ldw	r17,4(sp)
 1008554:	dc000017 	ldw	r16,0(sp)
 1008558:	dec00504 	addi	sp,sp,20
 100855c:	f800283a 	ret
 1008560:	98800017 	ldw	r2,0(r19)
 1008564:	1405883a 	add	r2,r2,r16
 1008568:	11400007 	ldb	r5,0(r2)
 100856c:	9009883a 	mov	r4,r18
 1008570:	880d883a 	mov	r6,r17
 1008574:	100ea140 	call	100ea14 <memchr>
 1008578:	103ff11e 	bne	r2,zero,1008540 <_ZNKSs12find_last_ofEPKcmm+0x58>
 100857c:	843fffc4 	addi	r16,r16,-1
 1008580:	00bfffc4 	movi	r2,-1
 1008584:	80bff61e 	bne	r16,r2,1008560 <_ZNKSs12find_last_ofEPKcmm+0x78>
 1008588:	8005883a 	mov	r2,r16
 100858c:	dfc00417 	ldw	ra,16(sp)
 1008590:	dcc00317 	ldw	r19,12(sp)
 1008594:	dc800217 	ldw	r18,8(sp)
 1008598:	dc400117 	ldw	r17,4(sp)
 100859c:	dc000017 	ldw	r16,0(sp)
 10085a0:	dec00504 	addi	sp,sp,20
 10085a4:	f800283a 	ret
 10085a8:	043fffc4 	movi	r16,-1
 10085ac:	8005883a 	mov	r2,r16
 10085b0:	dfc00417 	ldw	ra,16(sp)
 10085b4:	dcc00317 	ldw	r19,12(sp)
 10085b8:	dc800217 	ldw	r18,8(sp)
 10085bc:	dc400117 	ldw	r17,4(sp)
 10085c0:	dc000017 	ldw	r16,0(sp)
 10085c4:	dec00504 	addi	sp,sp,20
 10085c8:	f800283a 	ret

010085cc <_ZNKSs12find_last_ofERKSsm>:
 10085cc:	29400017 	ldw	r5,0(r5)
 10085d0:	29fffd17 	ldw	r7,-12(r5)
 10085d4:	10084e81 	jmpi	10084e8 <_ZNKSs12find_last_ofEPKcmm>

010085d8 <_ZNKSs13find_first_ofEPKcmm>:
 10085d8:	defffb04 	addi	sp,sp,-20
 10085dc:	dcc00315 	stw	r19,12(sp)
 10085e0:	dc800215 	stw	r18,8(sp)
 10085e4:	dc400115 	stw	r17,4(sp)
 10085e8:	dc000015 	stw	r16,0(sp)
 10085ec:	dfc00415 	stw	ra,16(sp)
 10085f0:	3823883a 	mov	r17,r7
 10085f4:	2027883a 	mov	r19,r4
 10085f8:	2825883a 	mov	r18,r5
 10085fc:	3021883a 	mov	r16,r6
 1008600:	3800091e 	bne	r7,zero,1008628 <_ZNKSs13find_first_ofEPKcmm+0x50>
 1008604:	043fffc4 	movi	r16,-1
 1008608:	8005883a 	mov	r2,r16
 100860c:	dfc00417 	ldw	ra,16(sp)
 1008610:	dcc00317 	ldw	r19,12(sp)
 1008614:	dc800217 	ldw	r18,8(sp)
 1008618:	dc400117 	ldw	r17,4(sp)
 100861c:	dc000017 	ldw	r16,0(sp)
 1008620:	dec00504 	addi	sp,sp,20
 1008624:	f800283a 	ret
 1008628:	20c00017 	ldw	r3,0(r4)
 100862c:	18bffd17 	ldw	r2,-12(r3)
 1008630:	30bff42e 	bgeu	r6,r2,1008604 <_ZNKSs13find_first_ofEPKcmm+0x2c>
 1008634:	80c5883a 	add	r2,r16,r3
 1008638:	11400007 	ldb	r5,0(r2)
 100863c:	9009883a 	mov	r4,r18
 1008640:	880d883a 	mov	r6,r17
 1008644:	100ea140 	call	100ea14 <memchr>
 1008648:	103fef1e 	bne	r2,zero,1008608 <_ZNKSs13find_first_ofEPKcmm+0x30>
 100864c:	98c00017 	ldw	r3,0(r19)
 1008650:	84000044 	addi	r16,r16,1
 1008654:	18bffd17 	ldw	r2,-12(r3)
 1008658:	80bff636 	bltu	r16,r2,1008634 <_ZNKSs13find_first_ofEPKcmm+0x5c>
 100865c:	003fe906 	br	1008604 <_ZNKSs13find_first_ofEPKcmm+0x2c>

01008660 <_ZNKSs13find_first_ofERKSsm>:
 1008660:	29400017 	ldw	r5,0(r5)
 1008664:	29fffd17 	ldw	r7,-12(r5)
 1008668:	10085d81 	jmpi	10085d8 <_ZNKSs13find_first_ofEPKcmm>

0100866c <_ZNKSs4findEcm>:
 100866c:	defffe04 	addi	sp,sp,-8
 1008670:	dc000015 	stw	r16,0(sp)
 1008674:	24000017 	ldw	r16,0(r4)
 1008678:	29403fcc 	andi	r5,r5,255
 100867c:	3007883a 	mov	r3,r6
 1008680:	81fffd17 	ldw	r7,-12(r16)
 1008684:	2940201c 	xori	r5,r5,128
 1008688:	8189883a 	add	r4,r16,r6
 100868c:	dfc00115 	stw	ra,4(sp)
 1008690:	297fe004 	addi	r5,r5,-128
 1008694:	398dc83a 	sub	r6,r7,r6
 1008698:	19c0082e 	bgeu	r3,r7,10086bc <_ZNKSs4findEcm+0x50>
 100869c:	100ea140 	call	100ea14 <memchr>
 10086a0:	1407c83a 	sub	r3,r2,r16
 10086a4:	10000526 	beq	r2,zero,10086bc <_ZNKSs4findEcm+0x50>
 10086a8:	1805883a 	mov	r2,r3
 10086ac:	dfc00117 	ldw	ra,4(sp)
 10086b0:	dc000017 	ldw	r16,0(sp)
 10086b4:	dec00204 	addi	sp,sp,8
 10086b8:	f800283a 	ret
 10086bc:	00ffffc4 	movi	r3,-1
 10086c0:	1805883a 	mov	r2,r3
 10086c4:	dfc00117 	ldw	ra,4(sp)
 10086c8:	dc000017 	ldw	r16,0(sp)
 10086cc:	dec00204 	addi	sp,sp,8
 10086d0:	f800283a 	ret

010086d4 <_ZNKSs13find_first_ofEcm>:
 10086d4:	29403fcc 	andi	r5,r5,255
 10086d8:	2940201c 	xori	r5,r5,128
 10086dc:	297fe004 	addi	r5,r5,-128
 10086e0:	100866c1 	jmpi	100866c <_ZNKSs4findEcm>

010086e4 <_ZNKSs16find_last_not_ofEPKcmm>:
 10086e4:	20800017 	ldw	r2,0(r4)
 10086e8:	defffb04 	addi	sp,sp,-20
 10086ec:	dcc00315 	stw	r19,12(sp)
 10086f0:	10fffd17 	ldw	r3,-12(r2)
 10086f4:	dc800215 	stw	r18,8(sp)
 10086f8:	dc400115 	stw	r17,4(sp)
 10086fc:	dfc00415 	stw	ra,16(sp)
 1008700:	dc000015 	stw	r16,0(sp)
 1008704:	2027883a 	mov	r19,r4
 1008708:	2825883a 	mov	r18,r5
 100870c:	3823883a 	mov	r17,r7
 1008710:	18002326 	beq	r3,zero,10087a0 <_ZNKSs16find_last_not_ofEPKcmm+0xbc>
 1008714:	1c3fffc4 	addi	r16,r3,-1
 1008718:	3400102e 	bgeu	r6,r16,100875c <_ZNKSs16find_last_not_ofEPKcmm+0x78>
 100871c:	3021883a 	mov	r16,r6
 1008720:	1405883a 	add	r2,r2,r16
 1008724:	11400007 	ldb	r5,0(r2)
 1008728:	9009883a 	mov	r4,r18
 100872c:	880d883a 	mov	r6,r17
 1008730:	100ea140 	call	100ea14 <memchr>
 1008734:	10000f1e 	bne	r2,zero,1008774 <_ZNKSs16find_last_not_ofEPKcmm+0x90>
 1008738:	8005883a 	mov	r2,r16
 100873c:	dfc00417 	ldw	ra,16(sp)
 1008740:	dcc00317 	ldw	r19,12(sp)
 1008744:	dc800217 	ldw	r18,8(sp)
 1008748:	dc400117 	ldw	r17,4(sp)
 100874c:	dc000017 	ldw	r16,0(sp)
 1008750:	dec00504 	addi	sp,sp,20
 1008754:	f800283a 	ret
 1008758:	98800017 	ldw	r2,0(r19)
 100875c:	1405883a 	add	r2,r2,r16
 1008760:	11400007 	ldb	r5,0(r2)
 1008764:	9009883a 	mov	r4,r18
 1008768:	880d883a 	mov	r6,r17
 100876c:	100ea140 	call	100ea14 <memchr>
 1008770:	103ff126 	beq	r2,zero,1008738 <_ZNKSs16find_last_not_ofEPKcmm+0x54>
 1008774:	843fffc4 	addi	r16,r16,-1
 1008778:	00bfffc4 	movi	r2,-1
 100877c:	80bff61e 	bne	r16,r2,1008758 <_ZNKSs16find_last_not_ofEPKcmm+0x74>
 1008780:	8005883a 	mov	r2,r16
 1008784:	dfc00417 	ldw	ra,16(sp)
 1008788:	dcc00317 	ldw	r19,12(sp)
 100878c:	dc800217 	ldw	r18,8(sp)
 1008790:	dc400117 	ldw	r17,4(sp)
 1008794:	dc000017 	ldw	r16,0(sp)
 1008798:	dec00504 	addi	sp,sp,20
 100879c:	f800283a 	ret
 10087a0:	043fffc4 	movi	r16,-1
 10087a4:	8005883a 	mov	r2,r16
 10087a8:	dfc00417 	ldw	ra,16(sp)
 10087ac:	dcc00317 	ldw	r19,12(sp)
 10087b0:	dc800217 	ldw	r18,8(sp)
 10087b4:	dc400117 	ldw	r17,4(sp)
 10087b8:	dc000017 	ldw	r16,0(sp)
 10087bc:	dec00504 	addi	sp,sp,20
 10087c0:	f800283a 	ret

010087c4 <_ZNKSs16find_last_not_ofERKSsm>:
 10087c4:	29400017 	ldw	r5,0(r5)
 10087c8:	29fffd17 	ldw	r7,-12(r5)
 10087cc:	10086e41 	jmpi	10086e4 <_ZNKSs16find_last_not_ofEPKcmm>

010087d0 <_ZNKSs7compareERKSs>:
 10087d0:	20800017 	ldw	r2,0(r4)
 10087d4:	28c00017 	ldw	r3,0(r5)
 10087d8:	defffb04 	addi	sp,sp,-20
 10087dc:	dc400315 	stw	r17,12(sp)
 10087e0:	dc000215 	stw	r16,8(sp)
 10087e4:	147ffd17 	ldw	r17,-12(r2)
 10087e8:	1c3ffd17 	ldw	r16,-12(r3)
 10087ec:	dfc00415 	stw	ra,16(sp)
 10087f0:	d80d883a 	mov	r6,sp
 10087f4:	dc400015 	stw	r17,0(sp)
 10087f8:	dc000115 	stw	r16,4(sp)
 10087fc:	8440012e 	bgeu	r16,r17,1008804 <_ZNKSs7compareERKSs+0x34>
 1008800:	d9800104 	addi	r6,sp,4
 1008804:	21000017 	ldw	r4,0(r4)
 1008808:	29400017 	ldw	r5,0(r5)
 100880c:	31800017 	ldw	r6,0(r6)
 1008810:	100eaf80 	call	100eaf8 <memcmp>
 1008814:	1000011e 	bne	r2,zero,100881c <_ZNKSs7compareERKSs+0x4c>
 1008818:	8c05c83a 	sub	r2,r17,r16
 100881c:	dfc00417 	ldw	ra,16(sp)
 1008820:	dc400317 	ldw	r17,12(sp)
 1008824:	dc000217 	ldw	r16,8(sp)
 1008828:	dec00504 	addi	sp,sp,20
 100882c:	f800283a 	ret

01008830 <_ZNKSs4findEPKcm>:
 1008830:	defffc04 	addi	sp,sp,-16
 1008834:	dd400215 	stw	r21,8(sp)
 1008838:	dcc00115 	stw	r19,4(sp)
 100883c:	dc400015 	stw	r17,0(sp)
 1008840:	2027883a 	mov	r19,r4
 1008844:	dfc00315 	stw	ra,12(sp)
 1008848:	2809883a 	mov	r4,r5
 100884c:	2823883a 	mov	r17,r5
 1008850:	302b883a 	mov	r21,r6
 1008854:	100f4040 	call	100f404 <strlen>
 1008858:	880b883a 	mov	r5,r17
 100885c:	9809883a 	mov	r4,r19
 1008860:	a80d883a 	mov	r6,r21
 1008864:	100f883a 	mov	r7,r2
 1008868:	dfc00317 	ldw	ra,12(sp)
 100886c:	dd400217 	ldw	r21,8(sp)
 1008870:	dcc00117 	ldw	r19,4(sp)
 1008874:	dc400017 	ldw	r17,0(sp)
 1008878:	dec00404 	addi	sp,sp,16
 100887c:	10080041 	jmpi	1008004 <_ZNKSs4findEPKcmm>

01008880 <_ZNKSs7compareEPKc>:
 1008880:	20800017 	ldw	r2,0(r4)
 1008884:	defff904 	addi	sp,sp,-28
 1008888:	dc400315 	stw	r17,12(sp)
 100888c:	147ffd17 	ldw	r17,-12(r2)
 1008890:	dcc00515 	stw	r19,20(sp)
 1008894:	dc800415 	stw	r18,16(sp)
 1008898:	dc000215 	stw	r16,8(sp)
 100889c:	dfc00615 	stw	ra,24(sp)
 10088a0:	2025883a 	mov	r18,r4
 10088a4:	dc400015 	stw	r17,0(sp)
 10088a8:	2809883a 	mov	r4,r5
 10088ac:	2827883a 	mov	r19,r5
 10088b0:	100f4040 	call	100f404 <strlen>
 10088b4:	1021883a 	mov	r16,r2
 10088b8:	d80d883a 	mov	r6,sp
 10088bc:	d8800115 	stw	r2,4(sp)
 10088c0:	1440012e 	bgeu	r2,r17,10088c8 <_ZNKSs7compareEPKc+0x48>
 10088c4:	d9800104 	addi	r6,sp,4
 10088c8:	91000017 	ldw	r4,0(r18)
 10088cc:	31800017 	ldw	r6,0(r6)
 10088d0:	980b883a 	mov	r5,r19
 10088d4:	100eaf80 	call	100eaf8 <memcmp>
 10088d8:	1000011e 	bne	r2,zero,10088e0 <_ZNKSs7compareEPKc+0x60>
 10088dc:	8c05c83a 	sub	r2,r17,r16
 10088e0:	dfc00617 	ldw	ra,24(sp)
 10088e4:	dcc00517 	ldw	r19,20(sp)
 10088e8:	dc800417 	ldw	r18,16(sp)
 10088ec:	dc400317 	ldw	r17,12(sp)
 10088f0:	dc000217 	ldw	r16,8(sp)
 10088f4:	dec00704 	addi	sp,sp,28
 10088f8:	f800283a 	ret

010088fc <_ZNKSs16find_last_not_ofEPKcm>:
 10088fc:	defffc04 	addi	sp,sp,-16
 1008900:	dd400215 	stw	r21,8(sp)
 1008904:	dcc00115 	stw	r19,4(sp)
 1008908:	dc400015 	stw	r17,0(sp)
 100890c:	2027883a 	mov	r19,r4
 1008910:	dfc00315 	stw	ra,12(sp)
 1008914:	2809883a 	mov	r4,r5
 1008918:	2823883a 	mov	r17,r5
 100891c:	302b883a 	mov	r21,r6
 1008920:	100f4040 	call	100f404 <strlen>
 1008924:	880b883a 	mov	r5,r17
 1008928:	9809883a 	mov	r4,r19
 100892c:	a80d883a 	mov	r6,r21
 1008930:	100f883a 	mov	r7,r2
 1008934:	dfc00317 	ldw	ra,12(sp)
 1008938:	dd400217 	ldw	r21,8(sp)
 100893c:	dcc00117 	ldw	r19,4(sp)
 1008940:	dc400017 	ldw	r17,0(sp)
 1008944:	dec00404 	addi	sp,sp,16
 1008948:	10086e41 	jmpi	10086e4 <_ZNKSs16find_last_not_ofEPKcmm>

0100894c <_ZNKSs17find_first_not_ofEPKcm>:
 100894c:	defffc04 	addi	sp,sp,-16
 1008950:	dd400215 	stw	r21,8(sp)
 1008954:	dcc00115 	stw	r19,4(sp)
 1008958:	dc400015 	stw	r17,0(sp)
 100895c:	2027883a 	mov	r19,r4
 1008960:	dfc00315 	stw	ra,12(sp)
 1008964:	2809883a 	mov	r4,r5
 1008968:	2823883a 	mov	r17,r5
 100896c:	302b883a 	mov	r21,r6
 1008970:	100f4040 	call	100f404 <strlen>
 1008974:	880b883a 	mov	r5,r17
 1008978:	9809883a 	mov	r4,r19
 100897c:	a80d883a 	mov	r6,r21
 1008980:	100f883a 	mov	r7,r2
 1008984:	dfc00317 	ldw	ra,12(sp)
 1008988:	dd400217 	ldw	r21,8(sp)
 100898c:	dcc00117 	ldw	r19,4(sp)
 1008990:	dc400017 	ldw	r17,0(sp)
 1008994:	dec00404 	addi	sp,sp,16
 1008998:	1007f601 	jmpi	1007f60 <_ZNKSs17find_first_not_ofEPKcmm>

0100899c <_ZNKSs12find_last_ofEPKcm>:
 100899c:	defffc04 	addi	sp,sp,-16
 10089a0:	dd400215 	stw	r21,8(sp)
 10089a4:	dcc00115 	stw	r19,4(sp)
 10089a8:	dc400015 	stw	r17,0(sp)
 10089ac:	2027883a 	mov	r19,r4
 10089b0:	dfc00315 	stw	ra,12(sp)
 10089b4:	2809883a 	mov	r4,r5
 10089b8:	2823883a 	mov	r17,r5
 10089bc:	302b883a 	mov	r21,r6
 10089c0:	100f4040 	call	100f404 <strlen>
 10089c4:	880b883a 	mov	r5,r17
 10089c8:	9809883a 	mov	r4,r19
 10089cc:	a80d883a 	mov	r6,r21
 10089d0:	100f883a 	mov	r7,r2
 10089d4:	dfc00317 	ldw	ra,12(sp)
 10089d8:	dd400217 	ldw	r21,8(sp)
 10089dc:	dcc00117 	ldw	r19,4(sp)
 10089e0:	dc400017 	ldw	r17,0(sp)
 10089e4:	dec00404 	addi	sp,sp,16
 10089e8:	10084e81 	jmpi	10084e8 <_ZNKSs12find_last_ofEPKcmm>

010089ec <_ZNKSs13find_first_ofEPKcm>:
 10089ec:	defffc04 	addi	sp,sp,-16
 10089f0:	dd400215 	stw	r21,8(sp)
 10089f4:	dcc00115 	stw	r19,4(sp)
 10089f8:	dc400015 	stw	r17,0(sp)
 10089fc:	2027883a 	mov	r19,r4
 1008a00:	dfc00315 	stw	ra,12(sp)
 1008a04:	2809883a 	mov	r4,r5
 1008a08:	2823883a 	mov	r17,r5
 1008a0c:	302b883a 	mov	r21,r6
 1008a10:	100f4040 	call	100f404 <strlen>
 1008a14:	880b883a 	mov	r5,r17
 1008a18:	9809883a 	mov	r4,r19
 1008a1c:	a80d883a 	mov	r6,r21
 1008a20:	100f883a 	mov	r7,r2
 1008a24:	dfc00317 	ldw	ra,12(sp)
 1008a28:	dd400217 	ldw	r21,8(sp)
 1008a2c:	dcc00117 	ldw	r19,4(sp)
 1008a30:	dc400017 	ldw	r17,0(sp)
 1008a34:	dec00404 	addi	sp,sp,16
 1008a38:	10085d81 	jmpi	10085d8 <_ZNKSs13find_first_ofEPKcmm>

01008a3c <_ZNKSs4rendEv>:
 1008a3c:	28c00017 	ldw	r3,0(r5)
 1008a40:	2005883a 	mov	r2,r4
 1008a44:	20c00015 	stw	r3,0(r4)
 1008a48:	f800283a 	ret

01008a4c <_ZNKSs6rbeginEv>:
 1008a4c:	28c00017 	ldw	r3,0(r5)
 1008a50:	2005883a 	mov	r2,r4
 1008a54:	197ffd17 	ldw	r5,-12(r3)
 1008a58:	1947883a 	add	r3,r3,r5
 1008a5c:	20c00015 	stw	r3,0(r4)
 1008a60:	f800283a 	ret

01008a64 <_ZNSs12_S_constructEmcRKSaIcE>:
 1008a64:	defffb04 	addi	sp,sp,-20
 1008a68:	dcc00315 	stw	r19,12(sp)
 1008a6c:	dc400115 	stw	r17,4(sp)
 1008a70:	dc000015 	stw	r16,0(sp)
 1008a74:	2823883a 	mov	r17,r5
 1008a78:	dfc00415 	stw	ra,16(sp)
 1008a7c:	dc800215 	stw	r18,8(sp)
 1008a80:	2021883a 	mov	r16,r4
 1008a84:	04c040f4 	movhi	r19,259
 1008a88:	9ccf2a04 	addi	r19,r19,15528
 1008a8c:	000b883a 	mov	r5,zero
 1008a90:	2000081e 	bne	r4,zero,1008ab4 <_ZNSs12_S_constructEmcRKSaIcE+0x50>
 1008a94:	9805883a 	mov	r2,r19
 1008a98:	dfc00417 	ldw	ra,16(sp)
 1008a9c:	dcc00317 	ldw	r19,12(sp)
 1008aa0:	dc800217 	ldw	r18,8(sp)
 1008aa4:	dc400117 	ldw	r17,4(sp)
 1008aa8:	dc000017 	ldw	r16,0(sp)
 1008aac:	dec00504 	addi	sp,sp,20
 1008ab0:	f800283a 	ret
 1008ab4:	10083500 	call	1008350 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1008ab8:	88c03fcc 	andi	r3,r17,255
 1008abc:	18c0201c 	xori	r3,r3,128
 1008ac0:	18ffe004 	addi	r3,r3,-128
 1008ac4:	19403fcc 	andi	r5,r3,255
 1008ac8:	14c00304 	addi	r19,r2,12
 1008acc:	1025883a 	mov	r18,r2
 1008ad0:	2940201c 	xori	r5,r5,128
 1008ad4:	00800044 	movi	r2,1
 1008ad8:	800d883a 	mov	r6,r16
 1008adc:	9809883a 	mov	r4,r19
 1008ae0:	297fe004 	addi	r5,r5,-128
 1008ae4:	80800d26 	beq	r16,r2,1008b1c <_ZNSs12_S_constructEmcRKSaIcE+0xb8>
 1008ae8:	100ecec0 	call	100ecec <memset>
 1008aec:	84c5883a 	add	r2,r16,r19
 1008af0:	94000015 	stw	r16,0(r18)
 1008af4:	90000215 	stw	zero,8(r18)
 1008af8:	10000005 	stb	zero,0(r2)
 1008afc:	9805883a 	mov	r2,r19
 1008b00:	dfc00417 	ldw	ra,16(sp)
 1008b04:	dcc00317 	ldw	r19,12(sp)
 1008b08:	dc800217 	ldw	r18,8(sp)
 1008b0c:	dc400117 	ldw	r17,4(sp)
 1008b10:	dc000017 	ldw	r16,0(sp)
 1008b14:	dec00504 	addi	sp,sp,20
 1008b18:	f800283a 	ret
 1008b1c:	98c00005 	stb	r3,0(r19)
 1008b20:	003ff206 	br	1008aec <_ZNSs12_S_constructEmcRKSaIcE+0x88>

01008b24 <_ZNSsC1EmcRKSaIcE>:
 1008b24:	defffe04 	addi	sp,sp,-8
 1008b28:	dc400015 	stw	r17,0(sp)
 1008b2c:	2023883a 	mov	r17,r4
 1008b30:	2809883a 	mov	r4,r5
 1008b34:	31403fcc 	andi	r5,r6,255
 1008b38:	2940201c 	xori	r5,r5,128
 1008b3c:	297fe004 	addi	r5,r5,-128
 1008b40:	380d883a 	mov	r6,r7
 1008b44:	dfc00115 	stw	ra,4(sp)
 1008b48:	1008a640 	call	1008a64 <_ZNSs12_S_constructEmcRKSaIcE>
 1008b4c:	88800015 	stw	r2,0(r17)
 1008b50:	dfc00117 	ldw	ra,4(sp)
 1008b54:	dc400017 	ldw	r17,0(sp)
 1008b58:	dec00204 	addi	sp,sp,8
 1008b5c:	f800283a 	ret

01008b60 <_ZNSsC2EmcRKSaIcE>:
 1008b60:	defffe04 	addi	sp,sp,-8
 1008b64:	dc400015 	stw	r17,0(sp)
 1008b68:	2023883a 	mov	r17,r4
 1008b6c:	2809883a 	mov	r4,r5
 1008b70:	31403fcc 	andi	r5,r6,255
 1008b74:	2940201c 	xori	r5,r5,128
 1008b78:	297fe004 	addi	r5,r5,-128
 1008b7c:	380d883a 	mov	r6,r7
 1008b80:	dfc00115 	stw	ra,4(sp)
 1008b84:	1008a640 	call	1008a64 <_ZNSs12_S_constructEmcRKSaIcE>
 1008b88:	88800015 	stw	r2,0(r17)
 1008b8c:	dfc00117 	ldw	ra,4(sp)
 1008b90:	dc400017 	ldw	r17,0(sp)
 1008b94:	dec00204 	addi	sp,sp,8
 1008b98:	f800283a 	ret

01008b9c <_ZNSsC1ERKSaIcE>:
 1008b9c:	defffe04 	addi	sp,sp,-8
 1008ba0:	dc400015 	stw	r17,0(sp)
 1008ba4:	280d883a 	mov	r6,r5
 1008ba8:	2023883a 	mov	r17,r4
 1008bac:	000b883a 	mov	r5,zero
 1008bb0:	0009883a 	mov	r4,zero
 1008bb4:	dfc00115 	stw	ra,4(sp)
 1008bb8:	1008a640 	call	1008a64 <_ZNSs12_S_constructEmcRKSaIcE>
 1008bbc:	88800015 	stw	r2,0(r17)
 1008bc0:	dfc00117 	ldw	ra,4(sp)
 1008bc4:	dc400017 	ldw	r17,0(sp)
 1008bc8:	dec00204 	addi	sp,sp,8
 1008bcc:	f800283a 	ret

01008bd0 <_ZNSsC2ERKSaIcE>:
 1008bd0:	defffe04 	addi	sp,sp,-8
 1008bd4:	dc400015 	stw	r17,0(sp)
 1008bd8:	280d883a 	mov	r6,r5
 1008bdc:	2023883a 	mov	r17,r4
 1008be0:	000b883a 	mov	r5,zero
 1008be4:	0009883a 	mov	r4,zero
 1008be8:	dfc00115 	stw	ra,4(sp)
 1008bec:	1008a640 	call	1008a64 <_ZNSs12_S_constructEmcRKSaIcE>
 1008bf0:	88800015 	stw	r2,0(r17)
 1008bf4:	dfc00117 	ldw	ra,4(sp)
 1008bf8:	dc400017 	ldw	r17,0(sp)
 1008bfc:	dec00204 	addi	sp,sp,8
 1008c00:	f800283a 	ret

01008c04 <_ZNKSs7compareEmmPKcm>:
 1008c04:	21000017 	ldw	r4,0(r4)
 1008c08:	defffc04 	addi	sp,sp,-16
 1008c0c:	d9800015 	stw	r6,0(sp)
 1008c10:	20bffd17 	ldw	r2,-12(r4)
 1008c14:	dfc00315 	stw	ra,12(sp)
 1008c18:	dc400215 	stw	r17,8(sp)
 1008c1c:	dc000115 	stw	r16,4(sp)
 1008c20:	11401936 	bltu	r2,r5,1008c88 <_ZNKSs7compareEmmPKcm+0x84>
 1008c24:	dc000017 	ldw	r16,0(sp)
 1008c28:	1145c83a 	sub	r2,r2,r5
 1008c2c:	14001136 	bltu	r2,r16,1008c74 <_ZNKSs7compareEmmPKcm+0x70>
 1008c30:	dc400417 	ldw	r17,16(sp)
 1008c34:	dc000015 	stw	r16,0(sp)
 1008c38:	8c000c36 	bltu	r17,r16,1008c6c <_ZNKSs7compareEmmPKcm+0x68>
 1008c3c:	d80d883a 	mov	r6,sp
 1008c40:	31800017 	ldw	r6,0(r6)
 1008c44:	2149883a 	add	r4,r4,r5
 1008c48:	380b883a 	mov	r5,r7
 1008c4c:	100eaf80 	call	100eaf8 <memcmp>
 1008c50:	1000011e 	bne	r2,zero,1008c58 <_ZNKSs7compareEmmPKcm+0x54>
 1008c54:	8445c83a 	sub	r2,r16,r17
 1008c58:	dfc00317 	ldw	ra,12(sp)
 1008c5c:	dc400217 	ldw	r17,8(sp)
 1008c60:	dc000117 	ldw	r16,4(sp)
 1008c64:	dec00404 	addi	sp,sp,16
 1008c68:	f800283a 	ret
 1008c6c:	d9800404 	addi	r6,sp,16
 1008c70:	003ff306 	br	1008c40 <_ZNKSs7compareEmmPKcm+0x3c>
 1008c74:	dc400417 	ldw	r17,16(sp)
 1008c78:	1021883a 	mov	r16,r2
 1008c7c:	dc000015 	stw	r16,0(sp)
 1008c80:	8c3ffa36 	bltu	r17,r16,1008c6c <_ZNKSs7compareEmmPKcm+0x68>
 1008c84:	003fed06 	br	1008c3c <_ZNKSs7compareEmmPKcm+0x38>
 1008c88:	010040b4 	movhi	r4,258
 1008c8c:	21150e04 	addi	r4,r4,21560
 1008c90:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

01008c94 <_ZNKSs7compareEmmPKc>:
 1008c94:	defff804 	addi	sp,sp,-32
 1008c98:	dd000615 	stw	r20,24(sp)
 1008c9c:	25000017 	ldw	r20,0(r4)
 1008ca0:	d9800115 	stw	r6,4(sp)
 1008ca4:	dcc00515 	stw	r19,20(sp)
 1008ca8:	a0bffd17 	ldw	r2,-12(r20)
 1008cac:	dc800415 	stw	r18,16(sp)
 1008cb0:	dfc00715 	stw	ra,28(sp)
 1008cb4:	dc400315 	stw	r17,12(sp)
 1008cb8:	dc000215 	stw	r16,8(sp)
 1008cbc:	2825883a 	mov	r18,r5
 1008cc0:	3827883a 	mov	r19,r7
 1008cc4:	11402236 	bltu	r2,r5,1008d50 <_ZNKSs7compareEmmPKc+0xbc>
 1008cc8:	1145c83a 	sub	r2,r2,r5
 1008ccc:	3023883a 	mov	r17,r6
 1008cd0:	11801736 	bltu	r2,r6,1008d30 <_ZNKSs7compareEmmPKc+0x9c>
 1008cd4:	dc400115 	stw	r17,4(sp)
 1008cd8:	9809883a 	mov	r4,r19
 1008cdc:	100f4040 	call	100f404 <strlen>
 1008ce0:	1021883a 	mov	r16,r2
 1008ce4:	d8800015 	stw	r2,0(sp)
 1008ce8:	14400f36 	bltu	r2,r17,1008d28 <_ZNKSs7compareEmmPKc+0x94>
 1008cec:	d9800104 	addi	r6,sp,4
 1008cf0:	31800017 	ldw	r6,0(r6)
 1008cf4:	a489883a 	add	r4,r20,r18
 1008cf8:	980b883a 	mov	r5,r19
 1008cfc:	100eaf80 	call	100eaf8 <memcmp>
 1008d00:	1000011e 	bne	r2,zero,1008d08 <_ZNKSs7compareEmmPKc+0x74>
 1008d04:	8c05c83a 	sub	r2,r17,r16
 1008d08:	dfc00717 	ldw	ra,28(sp)
 1008d0c:	dd000617 	ldw	r20,24(sp)
 1008d10:	dcc00517 	ldw	r19,20(sp)
 1008d14:	dc800417 	ldw	r18,16(sp)
 1008d18:	dc400317 	ldw	r17,12(sp)
 1008d1c:	dc000217 	ldw	r16,8(sp)
 1008d20:	dec00804 	addi	sp,sp,32
 1008d24:	f800283a 	ret
 1008d28:	d80d883a 	mov	r6,sp
 1008d2c:	003ff006 	br	1008cf0 <_ZNKSs7compareEmmPKc+0x5c>
 1008d30:	1023883a 	mov	r17,r2
 1008d34:	dc400115 	stw	r17,4(sp)
 1008d38:	9809883a 	mov	r4,r19
 1008d3c:	100f4040 	call	100f404 <strlen>
 1008d40:	1021883a 	mov	r16,r2
 1008d44:	d8800015 	stw	r2,0(sp)
 1008d48:	147ff736 	bltu	r2,r17,1008d28 <_ZNKSs7compareEmmPKc+0x94>
 1008d4c:	003fe706 	br	1008cec <_ZNKSs7compareEmmPKc+0x58>
 1008d50:	010040b4 	movhi	r4,258
 1008d54:	21150e04 	addi	r4,r4,21560
 1008d58:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

01008d5c <_ZNKSs7compareEmmRKSsmm>:
 1008d5c:	21000017 	ldw	r4,0(r4)
 1008d60:	defffc04 	addi	sp,sp,-16
 1008d64:	d9800015 	stw	r6,0(sp)
 1008d68:	20bffd17 	ldw	r2,-12(r4)
 1008d6c:	dfc00315 	stw	ra,12(sp)
 1008d70:	dc400215 	stw	r17,8(sp)
 1008d74:	dc000115 	stw	r16,4(sp)
 1008d78:	da000417 	ldw	r8,16(sp)
 1008d7c:	11402436 	bltu	r2,r5,1008e10 <_ZNKSs7compareEmmRKSsmm+0xb4>
 1008d80:	39c00017 	ldw	r7,0(r7)
 1008d84:	38fffd17 	ldw	r3,-12(r7)
 1008d88:	1a002136 	bltu	r3,r8,1008e10 <_ZNKSs7compareEmmRKSsmm+0xb4>
 1008d8c:	dc400017 	ldw	r17,0(sp)
 1008d90:	1145c83a 	sub	r2,r2,r5
 1008d94:	14401836 	bltu	r2,r17,1008df8 <_ZNKSs7compareEmmRKSsmm+0x9c>
 1008d98:	dc000517 	ldw	r16,20(sp)
 1008d9c:	1a05c83a 	sub	r2,r3,r8
 1008da0:	dc400015 	stw	r17,0(sp)
 1008da4:	14001036 	bltu	r2,r16,1008de8 <_ZNKSs7compareEmmRKSsmm+0x8c>
 1008da8:	dc000515 	stw	r16,20(sp)
 1008dac:	84400c36 	bltu	r16,r17,1008de0 <_ZNKSs7compareEmmRKSsmm+0x84>
 1008db0:	d80d883a 	mov	r6,sp
 1008db4:	31800017 	ldw	r6,0(r6)
 1008db8:	2149883a 	add	r4,r4,r5
 1008dbc:	3a0b883a 	add	r5,r7,r8
 1008dc0:	100eaf80 	call	100eaf8 <memcmp>
 1008dc4:	1000011e 	bne	r2,zero,1008dcc <_ZNKSs7compareEmmRKSsmm+0x70>
 1008dc8:	8c05c83a 	sub	r2,r17,r16
 1008dcc:	dfc00317 	ldw	ra,12(sp)
 1008dd0:	dc400217 	ldw	r17,8(sp)
 1008dd4:	dc000117 	ldw	r16,4(sp)
 1008dd8:	dec00404 	addi	sp,sp,16
 1008ddc:	f800283a 	ret
 1008de0:	d9800504 	addi	r6,sp,20
 1008de4:	003ff306 	br	1008db4 <_ZNKSs7compareEmmRKSsmm+0x58>
 1008de8:	1021883a 	mov	r16,r2
 1008dec:	dc000515 	stw	r16,20(sp)
 1008df0:	847ffb36 	bltu	r16,r17,1008de0 <_ZNKSs7compareEmmRKSsmm+0x84>
 1008df4:	003fee06 	br	1008db0 <_ZNKSs7compareEmmRKSsmm+0x54>
 1008df8:	dc000517 	ldw	r16,20(sp)
 1008dfc:	1023883a 	mov	r17,r2
 1008e00:	1a05c83a 	sub	r2,r3,r8
 1008e04:	dc400015 	stw	r17,0(sp)
 1008e08:	143fe72e 	bgeu	r2,r16,1008da8 <_ZNKSs7compareEmmRKSsmm+0x4c>
 1008e0c:	003ff606 	br	1008de8 <_ZNKSs7compareEmmRKSsmm+0x8c>
 1008e10:	010040b4 	movhi	r4,258
 1008e14:	21150e04 	addi	r4,r4,21560
 1008e18:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

01008e1c <_ZNKSs7compareEmmRKSs>:
 1008e1c:	21000017 	ldw	r4,0(r4)
 1008e20:	defffb04 	addi	sp,sp,-20
 1008e24:	d9800115 	stw	r6,4(sp)
 1008e28:	20bffd17 	ldw	r2,-12(r4)
 1008e2c:	dfc00415 	stw	ra,16(sp)
 1008e30:	dc400315 	stw	r17,12(sp)
 1008e34:	dc000215 	stw	r16,8(sp)
 1008e38:	11401d36 	bltu	r2,r5,1008eb0 <_ZNKSs7compareEmmRKSs+0x94>
 1008e3c:	1145c83a 	sub	r2,r2,r5
 1008e40:	3021883a 	mov	r16,r6
 1008e44:	11801336 	bltu	r2,r6,1008e94 <_ZNKSs7compareEmmRKSs+0x78>
 1008e48:	38800017 	ldw	r2,0(r7)
 1008e4c:	dc000115 	stw	r16,4(sp)
 1008e50:	147ffd17 	ldw	r17,-12(r2)
 1008e54:	dc400015 	stw	r17,0(sp)
 1008e58:	8c000c36 	bltu	r17,r16,1008e8c <_ZNKSs7compareEmmRKSs+0x70>
 1008e5c:	d9800104 	addi	r6,sp,4
 1008e60:	31800017 	ldw	r6,0(r6)
 1008e64:	2149883a 	add	r4,r4,r5
 1008e68:	100b883a 	mov	r5,r2
 1008e6c:	100eaf80 	call	100eaf8 <memcmp>
 1008e70:	1000011e 	bne	r2,zero,1008e78 <_ZNKSs7compareEmmRKSs+0x5c>
 1008e74:	8445c83a 	sub	r2,r16,r17
 1008e78:	dfc00417 	ldw	ra,16(sp)
 1008e7c:	dc400317 	ldw	r17,12(sp)
 1008e80:	dc000217 	ldw	r16,8(sp)
 1008e84:	dec00504 	addi	sp,sp,20
 1008e88:	f800283a 	ret
 1008e8c:	d80d883a 	mov	r6,sp
 1008e90:	003ff306 	br	1008e60 <_ZNKSs7compareEmmRKSs+0x44>
 1008e94:	1021883a 	mov	r16,r2
 1008e98:	38800017 	ldw	r2,0(r7)
 1008e9c:	dc000115 	stw	r16,4(sp)
 1008ea0:	147ffd17 	ldw	r17,-12(r2)
 1008ea4:	dc400015 	stw	r17,0(sp)
 1008ea8:	8c3ff836 	bltu	r17,r16,1008e8c <_ZNKSs7compareEmmRKSs+0x70>
 1008eac:	003feb06 	br	1008e5c <_ZNKSs7compareEmmRKSs+0x40>
 1008eb0:	010040b4 	movhi	r4,258
 1008eb4:	21150e04 	addi	r4,r4,21560
 1008eb8:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

01008ebc <_ZNSs4_Rep8_M_cloneERKSaIcEm>:
 1008ebc:	defffc04 	addi	sp,sp,-16
 1008ec0:	dc000015 	stw	r16,0(sp)
 1008ec4:	2021883a 	mov	r16,r4
 1008ec8:	21000017 	ldw	r4,0(r4)
 1008ecc:	2807883a 	mov	r3,r5
 1008ed0:	81400117 	ldw	r5,4(r16)
 1008ed4:	3109883a 	add	r4,r6,r4
 1008ed8:	180d883a 	mov	r6,r3
 1008edc:	dc800215 	stw	r18,8(sp)
 1008ee0:	dc400115 	stw	r17,4(sp)
 1008ee4:	dfc00315 	stw	ra,12(sp)
 1008ee8:	10083500 	call	1008350 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1008eec:	80c00017 	ldw	r3,0(r16)
 1008ef0:	1023883a 	mov	r17,r2
 1008ef4:	14800304 	addi	r18,r2,12
 1008ef8:	18000826 	beq	r3,zero,1008f1c <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x60>
 1008efc:	14800304 	addi	r18,r2,12
 1008f00:	00800044 	movi	r2,1
 1008f04:	180d883a 	mov	r6,r3
 1008f08:	9009883a 	mov	r4,r18
 1008f0c:	81400304 	addi	r5,r16,12
 1008f10:	18800d26 	beq	r3,r2,1008f48 <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x8c>
 1008f14:	100eb6c0 	call	100eb6c <memcpy>
 1008f18:	80c00017 	ldw	r3,0(r16)
 1008f1c:	88c00015 	stw	r3,0(r17)
 1008f20:	88000215 	stw	zero,8(r17)
 1008f24:	1c87883a 	add	r3,r3,r18
 1008f28:	9005883a 	mov	r2,r18
 1008f2c:	18000005 	stb	zero,0(r3)
 1008f30:	dfc00317 	ldw	ra,12(sp)
 1008f34:	dc800217 	ldw	r18,8(sp)
 1008f38:	dc400117 	ldw	r17,4(sp)
 1008f3c:	dc000017 	ldw	r16,0(sp)
 1008f40:	dec00404 	addi	sp,sp,16
 1008f44:	f800283a 	ret
 1008f48:	80800303 	ldbu	r2,12(r16)
 1008f4c:	88800305 	stb	r2,12(r17)
 1008f50:	80c00017 	ldw	r3,0(r16)
 1008f54:	003ff106 	br	1008f1c <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x60>

01008f58 <_ZNSs4_Rep7_M_grabERKSaIcES2_>:
 1008f58:	deffed04 	addi	sp,sp,-76
 1008f5c:	00804074 	movhi	r2,257
 1008f60:	10b3a604 	addi	r2,r2,-12648
 1008f64:	00c040b4 	movhi	r3,258
 1008f68:	18d18a04 	addi	r3,r3,17960
 1008f6c:	d8800615 	stw	r2,24(sp)
 1008f70:	d9000e15 	stw	r4,56(sp)
 1008f74:	00804074 	movhi	r2,257
 1008f78:	10a40e04 	addi	r2,r2,-28616
 1008f7c:	d809883a 	mov	r4,sp
 1008f80:	d8c00715 	stw	r3,28(sp)
 1008f84:	d8800915 	stw	r2,36(sp)
 1008f88:	dfc01215 	stw	ra,72(sp)
 1008f8c:	df001115 	stw	fp,68(sp)
 1008f90:	ddc01015 	stw	r23,64(sp)
 1008f94:	dec00815 	stw	sp,32(sp)
 1008f98:	dec00a15 	stw	sp,40(sp)
 1008f9c:	d9400f15 	stw	r5,60(sp)
 1008fa0:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1008fa4:	d8c00e17 	ldw	r3,56(sp)
 1008fa8:	18800217 	ldw	r2,8(r3)
 1008fac:	10000e16 	blt	r2,zero,1008fe8 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0x90>
 1008fb0:	008040f4 	movhi	r2,259
 1008fb4:	108f2704 	addi	r2,r2,15516
 1008fb8:	18801a1e 	bne	r3,r2,1009024 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xcc>
 1008fbc:	d8800e17 	ldw	r2,56(sp)
 1008fc0:	d809883a 	mov	r4,sp
 1008fc4:	10800304 	addi	r2,r2,12
 1008fc8:	d8800d15 	stw	r2,52(sp)
 1008fcc:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1008fd0:	d8800d17 	ldw	r2,52(sp)
 1008fd4:	dfc01217 	ldw	ra,72(sp)
 1008fd8:	df001117 	ldw	fp,68(sp)
 1008fdc:	ddc01017 	ldw	r23,64(sp)
 1008fe0:	dec01304 	addi	sp,sp,76
 1008fe4:	f800283a 	ret
 1008fe8:	d9000e17 	ldw	r4,56(sp)
 1008fec:	d9400f17 	ldw	r5,60(sp)
 1008ff0:	000d883a 	mov	r6,zero
 1008ff4:	00bfffc4 	movi	r2,-1
 1008ff8:	d8800115 	stw	r2,4(sp)
 1008ffc:	1008ebc0 	call	1008ebc <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1009000:	d809883a 	mov	r4,sp
 1009004:	d8800d15 	stw	r2,52(sp)
 1009008:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100900c:	d8800d17 	ldw	r2,52(sp)
 1009010:	dfc01217 	ldw	ra,72(sp)
 1009014:	df001117 	ldw	fp,68(sp)
 1009018:	ddc01017 	ldw	r23,64(sp)
 100901c:	dec01304 	addi	sp,sp,76
 1009020:	f800283a 	ret
 1009024:	01400044 	movi	r5,1
 1009028:	d9400115 	stw	r5,4(sp)
 100902c:	19000204 	addi	r4,r3,8
 1009030:	100ba040 	call	100ba04 <_ZN9__gnu_cxx12__atomic_addEPVii>
 1009034:	003fe106 	br	1008fbc <_ZNSs4_Rep7_M_grabERKSaIcES2_+0x64>
 1009038:	d8800317 	ldw	r2,12(sp)
 100903c:	00ffffc4 	movi	r3,-1
 1009040:	d9000217 	ldw	r4,8(sp)
 1009044:	10c00226 	beq	r2,r3,1009050 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xf8>
 1009048:	d8c00115 	stw	r3,4(sp)
 100904c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1009050:	00bfffc4 	movi	r2,-1
 1009054:	d8800115 	stw	r2,4(sp)
 1009058:	100cd180 	call	100cd18 <__cxa_call_unexpected>

0100905c <_ZNKSs4copyEPcmm>:
 100905c:	21000017 	ldw	r4,0(r4)
 1009060:	defffe04 	addi	sp,sp,-8
 1009064:	dfc00115 	stw	ra,4(sp)
 1009068:	20fffd17 	ldw	r3,-12(r4)
 100906c:	dc000015 	stw	r16,0(sp)
 1009070:	2811883a 	mov	r8,r5
 1009074:	19c01836 	bltu	r3,r7,10090d8 <_ZNKSs4copyEPcmm+0x7c>
 1009078:	19c5c83a 	sub	r2,r3,r7
 100907c:	3021883a 	mov	r16,r6
 1009080:	11800c36 	bltu	r2,r6,10090b4 <_ZNKSs4copyEPcmm+0x58>
 1009084:	80000626 	beq	r16,zero,10090a0 <_ZNKSs4copyEPcmm+0x44>
 1009088:	00800044 	movi	r2,1
 100908c:	21cb883a 	add	r5,r4,r7
 1009090:	80800a26 	beq	r16,r2,10090bc <_ZNKSs4copyEPcmm+0x60>
 1009094:	4009883a 	mov	r4,r8
 1009098:	800d883a 	mov	r6,r16
 100909c:	100eb6c0 	call	100eb6c <memcpy>
 10090a0:	8005883a 	mov	r2,r16
 10090a4:	dfc00117 	ldw	ra,4(sp)
 10090a8:	dc000017 	ldw	r16,0(sp)
 10090ac:	dec00204 	addi	sp,sp,8
 10090b0:	f800283a 	ret
 10090b4:	1021883a 	mov	r16,r2
 10090b8:	003ff206 	br	1009084 <_ZNKSs4copyEPcmm+0x28>
 10090bc:	28800003 	ldbu	r2,0(r5)
 10090c0:	40800005 	stb	r2,0(r8)
 10090c4:	8005883a 	mov	r2,r16
 10090c8:	dfc00117 	ldw	ra,4(sp)
 10090cc:	dc000017 	ldw	r16,0(sp)
 10090d0:	dec00204 	addi	sp,sp,8
 10090d4:	f800283a 	ret
 10090d8:	010040b4 	movhi	r4,258
 10090dc:	21151404 	addi	r4,r4,21584
 10090e0:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

010090e4 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 10090e4:	3147c83a 	sub	r3,r6,r5
 10090e8:	00800044 	movi	r2,1
 10090ec:	180d883a 	mov	r6,r3
 10090f0:	18800126 	beq	r3,r2,10090f8 <_ZNSs13_S_copy_charsEPcPKcS1_+0x14>
 10090f4:	100eb6c1 	jmpi	100eb6c <memcpy>
 10090f8:	28800003 	ldbu	r2,0(r5)
 10090fc:	20800005 	stb	r2,0(r4)
 1009100:	f800283a 	ret

01009104 <_ZNSs13_S_copy_charsEPcS_S_>:
 1009104:	3147c83a 	sub	r3,r6,r5
 1009108:	00800044 	movi	r2,1
 100910c:	180d883a 	mov	r6,r3
 1009110:	18800126 	beq	r3,r2,1009118 <_ZNSs13_S_copy_charsEPcS_S_+0x14>
 1009114:	100eb6c1 	jmpi	100eb6c <memcpy>
 1009118:	28800003 	ldbu	r2,0(r5)
 100911c:	20800005 	stb	r2,0(r4)
 1009120:	f800283a 	ret

01009124 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>:
 1009124:	defffb04 	addi	sp,sp,-20
 1009128:	dc000015 	stw	r16,0(sp)
 100912c:	dfc00415 	stw	ra,16(sp)
 1009130:	dcc00315 	stw	r19,12(sp)
 1009134:	dc800215 	stw	r18,8(sp)
 1009138:	dc400115 	stw	r17,4(sp)
 100913c:	2021883a 	mov	r16,r4
 1009140:	21401c26 	beq	r4,r5,10091b4 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x90>
 1009144:	20002526 	beq	r4,zero,10091dc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0xb8>
 1009148:	2c25c83a 	sub	r18,r5,r16
 100914c:	9009883a 	mov	r4,r18
 1009150:	000b883a 	mov	r5,zero
 1009154:	10083500 	call	1008350 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1009158:	1023883a 	mov	r17,r2
 100915c:	14c00304 	addi	r19,r2,12
 1009160:	00800044 	movi	r2,1
 1009164:	90801026 	beq	r18,r2,10091a8 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x84>
 1009168:	800b883a 	mov	r5,r16
 100916c:	9809883a 	mov	r4,r19
 1009170:	900d883a 	mov	r6,r18
 1009174:	100eb6c0 	call	100eb6c <memcpy>
 1009178:	9c85883a 	add	r2,r19,r18
 100917c:	8c800015 	stw	r18,0(r17)
 1009180:	88000215 	stw	zero,8(r17)
 1009184:	10000005 	stb	zero,0(r2)
 1009188:	9805883a 	mov	r2,r19
 100918c:	dfc00417 	ldw	ra,16(sp)
 1009190:	dcc00317 	ldw	r19,12(sp)
 1009194:	dc800217 	ldw	r18,8(sp)
 1009198:	dc400117 	ldw	r17,4(sp)
 100919c:	dc000017 	ldw	r16,0(sp)
 10091a0:	dec00504 	addi	sp,sp,20
 10091a4:	f800283a 	ret
 10091a8:	80800003 	ldbu	r2,0(r16)
 10091ac:	88800305 	stb	r2,12(r17)
 10091b0:	003ff106 	br	1009178 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x54>
 10091b4:	04c040f4 	movhi	r19,259
 10091b8:	9ccf2a04 	addi	r19,r19,15528
 10091bc:	9805883a 	mov	r2,r19
 10091c0:	dfc00417 	ldw	ra,16(sp)
 10091c4:	dcc00317 	ldw	r19,12(sp)
 10091c8:	dc800217 	ldw	r18,8(sp)
 10091cc:	dc400117 	ldw	r17,4(sp)
 10091d0:	dc000017 	ldw	r16,0(sp)
 10091d4:	dec00504 	addi	sp,sp,20
 10091d8:	f800283a 	ret
 10091dc:	010040b4 	movhi	r4,258
 10091e0:	21151904 	addi	r4,r4,21604
 10091e4:	1005abc0 	call	1005abc <_ZSt19__throw_logic_errorPKc>

010091e8 <_ZNSsC2IPcEET_S1_RKSaIcE>:
 10091e8:	defffe04 	addi	sp,sp,-8
 10091ec:	dc400015 	stw	r17,0(sp)
 10091f0:	2023883a 	mov	r17,r4
 10091f4:	2809883a 	mov	r4,r5
 10091f8:	300b883a 	mov	r5,r6
 10091fc:	380d883a 	mov	r6,r7
 1009200:	dfc00115 	stw	ra,4(sp)
 1009204:	10091240 	call	1009124 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 1009208:	88800015 	stw	r2,0(r17)
 100920c:	dfc00117 	ldw	ra,4(sp)
 1009210:	dc400017 	ldw	r17,0(sp)
 1009214:	dec00204 	addi	sp,sp,8
 1009218:	f800283a 	ret

0100921c <_ZNSsC1ERKSsmmRKSaIcE>:
 100921c:	29400017 	ldw	r5,0(r5)
 1009220:	defffe04 	addi	sp,sp,-8
 1009224:	dc000015 	stw	r16,0(sp)
 1009228:	28bffd17 	ldw	r2,-12(r5)
 100922c:	dfc00115 	stw	ra,4(sp)
 1009230:	2021883a 	mov	r16,r4
 1009234:	11800e36 	bltu	r2,r6,1009270 <_ZNSsC1ERKSsmmRKSaIcE+0x54>
 1009238:	1185c83a 	sub	r2,r2,r6
 100923c:	2989883a 	add	r4,r5,r6
 1009240:	11c00936 	bltu	r2,r7,1009268 <_ZNSsC1ERKSsmmRKSaIcE+0x4c>
 1009244:	29cb883a 	add	r5,r5,r7
 1009248:	314b883a 	add	r5,r6,r5
 100924c:	d9800217 	ldw	r6,8(sp)
 1009250:	10091240 	call	1009124 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 1009254:	80800015 	stw	r2,0(r16)
 1009258:	dfc00117 	ldw	ra,4(sp)
 100925c:	dc000017 	ldw	r16,0(sp)
 1009260:	dec00204 	addi	sp,sp,8
 1009264:	f800283a 	ret
 1009268:	100f883a 	mov	r7,r2
 100926c:	003ff506 	br	1009244 <_ZNSsC1ERKSsmmRKSaIcE+0x28>
 1009270:	010040b4 	movhi	r4,258
 1009274:	21152404 	addi	r4,r4,21648
 1009278:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

0100927c <_ZNSsC2ERKSsmmRKSaIcE>:
 100927c:	29400017 	ldw	r5,0(r5)
 1009280:	defffe04 	addi	sp,sp,-8
 1009284:	dc000015 	stw	r16,0(sp)
 1009288:	28bffd17 	ldw	r2,-12(r5)
 100928c:	dfc00115 	stw	ra,4(sp)
 1009290:	2021883a 	mov	r16,r4
 1009294:	11800e36 	bltu	r2,r6,10092d0 <_ZNSsC2ERKSsmmRKSaIcE+0x54>
 1009298:	1185c83a 	sub	r2,r2,r6
 100929c:	2989883a 	add	r4,r5,r6
 10092a0:	11c00936 	bltu	r2,r7,10092c8 <_ZNSsC2ERKSsmmRKSaIcE+0x4c>
 10092a4:	29cb883a 	add	r5,r5,r7
 10092a8:	314b883a 	add	r5,r6,r5
 10092ac:	d9800217 	ldw	r6,8(sp)
 10092b0:	10091240 	call	1009124 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 10092b4:	80800015 	stw	r2,0(r16)
 10092b8:	dfc00117 	ldw	ra,4(sp)
 10092bc:	dc000017 	ldw	r16,0(sp)
 10092c0:	dec00204 	addi	sp,sp,8
 10092c4:	f800283a 	ret
 10092c8:	100f883a 	mov	r7,r2
 10092cc:	003ff506 	br	10092a4 <_ZNSsC2ERKSsmmRKSaIcE+0x28>
 10092d0:	010040b4 	movhi	r4,258
 10092d4:	21152404 	addi	r4,r4,21648
 10092d8:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

010092dc <_ZNSsC1ERKSsmm>:
 10092dc:	deffea04 	addi	sp,sp,-88
 10092e0:	00804074 	movhi	r2,257
 10092e4:	10b3a604 	addi	r2,r2,-12648
 10092e8:	00c040b4 	movhi	r3,258
 10092ec:	18d18d44 	addi	r3,r3,17973
 10092f0:	d8800715 	stw	r2,28(sp)
 10092f4:	d9000f15 	stw	r4,60(sp)
 10092f8:	00804074 	movhi	r2,257
 10092fc:	10a4ee04 	addi	r2,r2,-27720
 1009300:	d9000104 	addi	r4,sp,4
 1009304:	d8c00815 	stw	r3,32(sp)
 1009308:	d8800a15 	stw	r2,40(sp)
 100930c:	d9401015 	stw	r5,64(sp)
 1009310:	dfc01515 	stw	ra,84(sp)
 1009314:	df001415 	stw	fp,80(sp)
 1009318:	ddc01315 	stw	r23,76(sp)
 100931c:	dec00915 	stw	sp,36(sp)
 1009320:	dec00b15 	stw	sp,44(sp)
 1009324:	d9801115 	stw	r6,68(sp)
 1009328:	d9c01215 	stw	r7,72(sp)
 100932c:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1009330:	d8801017 	ldw	r2,64(sp)
 1009334:	d8c01117 	ldw	r3,68(sp)
 1009338:	11400017 	ldw	r5,0(r2)
 100933c:	28bffd17 	ldw	r2,-12(r5)
 1009340:	10c01836 	bltu	r2,r3,10093a4 <_ZNSsC1ERKSsmm+0xc8>
 1009344:	d8c01117 	ldw	r3,68(sp)
 1009348:	d9c01217 	ldw	r7,72(sp)
 100934c:	10c5c83a 	sub	r2,r2,r3
 1009350:	28c9883a 	add	r4,r5,r3
 1009354:	11c01136 	bltu	r2,r7,100939c <_ZNSsC1ERKSsmm+0xc0>
 1009358:	00800044 	movi	r2,1
 100935c:	d8800215 	stw	r2,8(sp)
 1009360:	d8801117 	ldw	r2,68(sp)
 1009364:	29cb883a 	add	r5,r5,r7
 1009368:	d80d883a 	mov	r6,sp
 100936c:	114b883a 	add	r5,r2,r5
 1009370:	d9c00e03 	ldbu	r7,56(sp)
 1009374:	10091240 	call	1009124 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 1009378:	d8c00f17 	ldw	r3,60(sp)
 100937c:	d9000104 	addi	r4,sp,4
 1009380:	18800015 	stw	r2,0(r3)
 1009384:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1009388:	dfc01517 	ldw	ra,84(sp)
 100938c:	df001417 	ldw	fp,80(sp)
 1009390:	ddc01317 	ldw	r23,76(sp)
 1009394:	dec01604 	addi	sp,sp,88
 1009398:	f800283a 	ret
 100939c:	100f883a 	mov	r7,r2
 10093a0:	003fed06 	br	1009358 <_ZNSsC1ERKSsmm+0x7c>
 10093a4:	00bfffc4 	movi	r2,-1
 10093a8:	010040b4 	movhi	r4,258
 10093ac:	21152404 	addi	r4,r4,21648
 10093b0:	d8800215 	stw	r2,8(sp)
 10093b4:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>
 10093b8:	d9000317 	ldw	r4,12(sp)
 10093bc:	00bfffc4 	movi	r2,-1
 10093c0:	d8800215 	stw	r2,8(sp)
 10093c4:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

010093c8 <_ZNKSs6substrEmm>:
 10093c8:	28c00017 	ldw	r3,0(r5)
 10093cc:	defffe04 	addi	sp,sp,-8
 10093d0:	dc000015 	stw	r16,0(sp)
 10093d4:	18bffd17 	ldw	r2,-12(r3)
 10093d8:	dfc00115 	stw	ra,4(sp)
 10093dc:	2021883a 	mov	r16,r4
 10093e0:	11800636 	bltu	r2,r6,10093fc <_ZNKSs6substrEmm+0x34>
 10093e4:	10092dc0 	call	10092dc <_ZNSsC1ERKSsmm>
 10093e8:	8005883a 	mov	r2,r16
 10093ec:	dfc00117 	ldw	ra,4(sp)
 10093f0:	dc000017 	ldw	r16,0(sp)
 10093f4:	dec00204 	addi	sp,sp,8
 10093f8:	f800283a 	ret
 10093fc:	010040b4 	movhi	r4,258
 1009400:	21152b04 	addi	r4,r4,21676
 1009404:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

01009408 <_ZNSsC2ERKSsmm>:
 1009408:	deffea04 	addi	sp,sp,-88
 100940c:	00804074 	movhi	r2,257
 1009410:	10b3a604 	addi	r2,r2,-12648
 1009414:	00c040b4 	movhi	r3,258
 1009418:	18d18ec4 	addi	r3,r3,17979
 100941c:	d8800715 	stw	r2,28(sp)
 1009420:	d9000f15 	stw	r4,60(sp)
 1009424:	00804074 	movhi	r2,257
 1009428:	10a53904 	addi	r2,r2,-27420
 100942c:	d9000104 	addi	r4,sp,4
 1009430:	d8c00815 	stw	r3,32(sp)
 1009434:	d8800a15 	stw	r2,40(sp)
 1009438:	d9401015 	stw	r5,64(sp)
 100943c:	dfc01515 	stw	ra,84(sp)
 1009440:	df001415 	stw	fp,80(sp)
 1009444:	ddc01315 	stw	r23,76(sp)
 1009448:	dec00915 	stw	sp,36(sp)
 100944c:	dec00b15 	stw	sp,44(sp)
 1009450:	d9801115 	stw	r6,68(sp)
 1009454:	d9c01215 	stw	r7,72(sp)
 1009458:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100945c:	d8801017 	ldw	r2,64(sp)
 1009460:	d8c01117 	ldw	r3,68(sp)
 1009464:	11400017 	ldw	r5,0(r2)
 1009468:	28bffd17 	ldw	r2,-12(r5)
 100946c:	10c01836 	bltu	r2,r3,10094d0 <_ZNSsC2ERKSsmm+0xc8>
 1009470:	d8c01117 	ldw	r3,68(sp)
 1009474:	d9c01217 	ldw	r7,72(sp)
 1009478:	10c5c83a 	sub	r2,r2,r3
 100947c:	28c9883a 	add	r4,r5,r3
 1009480:	11c01136 	bltu	r2,r7,10094c8 <_ZNSsC2ERKSsmm+0xc0>
 1009484:	00800044 	movi	r2,1
 1009488:	d8800215 	stw	r2,8(sp)
 100948c:	d8801117 	ldw	r2,68(sp)
 1009490:	29cb883a 	add	r5,r5,r7
 1009494:	d80d883a 	mov	r6,sp
 1009498:	114b883a 	add	r5,r2,r5
 100949c:	d9c00e03 	ldbu	r7,56(sp)
 10094a0:	10091240 	call	1009124 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 10094a4:	d8c00f17 	ldw	r3,60(sp)
 10094a8:	d9000104 	addi	r4,sp,4
 10094ac:	18800015 	stw	r2,0(r3)
 10094b0:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 10094b4:	dfc01517 	ldw	ra,84(sp)
 10094b8:	df001417 	ldw	fp,80(sp)
 10094bc:	ddc01317 	ldw	r23,76(sp)
 10094c0:	dec01604 	addi	sp,sp,88
 10094c4:	f800283a 	ret
 10094c8:	100f883a 	mov	r7,r2
 10094cc:	003fed06 	br	1009484 <_ZNSsC2ERKSsmm+0x7c>
 10094d0:	00bfffc4 	movi	r2,-1
 10094d4:	010040b4 	movhi	r4,258
 10094d8:	21152404 	addi	r4,r4,21648
 10094dc:	d8800215 	stw	r2,8(sp)
 10094e0:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>
 10094e4:	d9000317 	ldw	r4,12(sp)
 10094e8:	00bfffc4 	movi	r2,-1
 10094ec:	d8800215 	stw	r2,8(sp)
 10094f0:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

010094f4 <_ZNSsC1IPcEET_S1_RKSaIcE>:
 10094f4:	defffe04 	addi	sp,sp,-8
 10094f8:	dc400015 	stw	r17,0(sp)
 10094fc:	2023883a 	mov	r17,r4
 1009500:	2809883a 	mov	r4,r5
 1009504:	300b883a 	mov	r5,r6
 1009508:	380d883a 	mov	r6,r7
 100950c:	dfc00115 	stw	ra,4(sp)
 1009510:	10091240 	call	1009124 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
 1009514:	88800015 	stw	r2,0(r17)
 1009518:	dfc00117 	ldw	ra,4(sp)
 100951c:	dc400017 	ldw	r17,0(sp)
 1009520:	dec00204 	addi	sp,sp,8
 1009524:	f800283a 	ret

01009528 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_>:
 1009528:	3147c83a 	sub	r3,r6,r5
 100952c:	00800044 	movi	r2,1
 1009530:	180d883a 	mov	r6,r3
 1009534:	18800126 	beq	r3,r2,100953c <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_+0x14>
 1009538:	100eb6c1 	jmpi	100eb6c <memcpy>
 100953c:	28800003 	ldbu	r2,0(r5)
 1009540:	20800005 	stb	r2,0(r4)
 1009544:	f800283a 	ret

01009548 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 1009548:	defffb04 	addi	sp,sp,-20
 100954c:	dc000015 	stw	r16,0(sp)
 1009550:	dfc00415 	stw	ra,16(sp)
 1009554:	dcc00315 	stw	r19,12(sp)
 1009558:	dc800215 	stw	r18,8(sp)
 100955c:	dc400115 	stw	r17,4(sp)
 1009560:	2021883a 	mov	r16,r4
 1009564:	21401c26 	beq	r4,r5,10095d8 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x90>
 1009568:	20002526 	beq	r4,zero,1009600 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xb8>
 100956c:	2c25c83a 	sub	r18,r5,r16
 1009570:	9009883a 	mov	r4,r18
 1009574:	000b883a 	mov	r5,zero
 1009578:	10083500 	call	1008350 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 100957c:	1023883a 	mov	r17,r2
 1009580:	14c00304 	addi	r19,r2,12
 1009584:	00800044 	movi	r2,1
 1009588:	90801026 	beq	r18,r2,10095cc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x84>
 100958c:	800b883a 	mov	r5,r16
 1009590:	9809883a 	mov	r4,r19
 1009594:	900d883a 	mov	r6,r18
 1009598:	100eb6c0 	call	100eb6c <memcpy>
 100959c:	9c85883a 	add	r2,r19,r18
 10095a0:	8c800015 	stw	r18,0(r17)
 10095a4:	88000215 	stw	zero,8(r17)
 10095a8:	10000005 	stb	zero,0(r2)
 10095ac:	9805883a 	mov	r2,r19
 10095b0:	dfc00417 	ldw	ra,16(sp)
 10095b4:	dcc00317 	ldw	r19,12(sp)
 10095b8:	dc800217 	ldw	r18,8(sp)
 10095bc:	dc400117 	ldw	r17,4(sp)
 10095c0:	dc000017 	ldw	r16,0(sp)
 10095c4:	dec00504 	addi	sp,sp,20
 10095c8:	f800283a 	ret
 10095cc:	80800003 	ldbu	r2,0(r16)
 10095d0:	88800305 	stb	r2,12(r17)
 10095d4:	003ff106 	br	100959c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x54>
 10095d8:	04c040f4 	movhi	r19,259
 10095dc:	9ccf2a04 	addi	r19,r19,15528
 10095e0:	9805883a 	mov	r2,r19
 10095e4:	dfc00417 	ldw	ra,16(sp)
 10095e8:	dcc00317 	ldw	r19,12(sp)
 10095ec:	dc800217 	ldw	r18,8(sp)
 10095f0:	dc400117 	ldw	r17,4(sp)
 10095f4:	dc000017 	ldw	r16,0(sp)
 10095f8:	dec00504 	addi	sp,sp,20
 10095fc:	f800283a 	ret
 1009600:	010040b4 	movhi	r4,258
 1009604:	21151904 	addi	r4,r4,21604
 1009608:	1005abc0 	call	1005abc <_ZSt19__throw_logic_errorPKc>

0100960c <_ZNSsC2IPKcEET_S2_RKSaIcE>:
 100960c:	defffe04 	addi	sp,sp,-8
 1009610:	dc400015 	stw	r17,0(sp)
 1009614:	2023883a 	mov	r17,r4
 1009618:	2809883a 	mov	r4,r5
 100961c:	300b883a 	mov	r5,r6
 1009620:	380d883a 	mov	r6,r7
 1009624:	dfc00115 	stw	ra,4(sp)
 1009628:	10095480 	call	1009548 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 100962c:	88800015 	stw	r2,0(r17)
 1009630:	dfc00117 	ldw	ra,4(sp)
 1009634:	dc400017 	ldw	r17,0(sp)
 1009638:	dec00204 	addi	sp,sp,8
 100963c:	f800283a 	ret

01009640 <_ZNSsC1EPKcmRKSaIcE>:
 1009640:	defffe04 	addi	sp,sp,-8
 1009644:	dc400015 	stw	r17,0(sp)
 1009648:	2023883a 	mov	r17,r4
 100964c:	2809883a 	mov	r4,r5
 1009650:	314b883a 	add	r5,r6,r5
 1009654:	380d883a 	mov	r6,r7
 1009658:	dfc00115 	stw	ra,4(sp)
 100965c:	10095480 	call	1009548 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1009660:	88800015 	stw	r2,0(r17)
 1009664:	dfc00117 	ldw	ra,4(sp)
 1009668:	dc400017 	ldw	r17,0(sp)
 100966c:	dec00204 	addi	sp,sp,8
 1009670:	f800283a 	ret

01009674 <_ZNSsC2EPKcmRKSaIcE>:
 1009674:	defffe04 	addi	sp,sp,-8
 1009678:	dc400015 	stw	r17,0(sp)
 100967c:	2023883a 	mov	r17,r4
 1009680:	2809883a 	mov	r4,r5
 1009684:	314b883a 	add	r5,r6,r5
 1009688:	380d883a 	mov	r6,r7
 100968c:	dfc00115 	stw	ra,4(sp)
 1009690:	10095480 	call	1009548 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1009694:	88800015 	stw	r2,0(r17)
 1009698:	dfc00117 	ldw	ra,4(sp)
 100969c:	dc400017 	ldw	r17,0(sp)
 10096a0:	dec00204 	addi	sp,sp,8
 10096a4:	f800283a 	ret

010096a8 <_ZNSsC1IPKcEET_S2_RKSaIcE>:
 10096a8:	defffe04 	addi	sp,sp,-8
 10096ac:	dc400015 	stw	r17,0(sp)
 10096b0:	2023883a 	mov	r17,r4
 10096b4:	2809883a 	mov	r4,r5
 10096b8:	300b883a 	mov	r5,r6
 10096bc:	380d883a 	mov	r6,r7
 10096c0:	dfc00115 	stw	ra,4(sp)
 10096c4:	10095480 	call	1009548 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 10096c8:	88800015 	stw	r2,0(r17)
 10096cc:	dfc00117 	ldw	ra,4(sp)
 10096d0:	dc400017 	ldw	r17,0(sp)
 10096d4:	dec00204 	addi	sp,sp,8
 10096d8:	f800283a 	ret

010096dc <_ZNSsC1EPKcRKSaIcE>:
 10096dc:	defffc04 	addi	sp,sp,-16
 10096e0:	dc400215 	stw	r17,8(sp)
 10096e4:	dc000115 	stw	r16,4(sp)
 10096e8:	2023883a 	mov	r17,r4
 10096ec:	dfc00315 	stw	ra,12(sp)
 10096f0:	00bfffc4 	movi	r2,-1
 10096f4:	2809883a 	mov	r4,r5
 10096f8:	3021883a 	mov	r16,r6
 10096fc:	28000426 	beq	r5,zero,1009710 <_ZNSsC1EPKcRKSaIcE+0x34>
 1009700:	d9400015 	stw	r5,0(sp)
 1009704:	100f4040 	call	100f404 <strlen>
 1009708:	d9400017 	ldw	r5,0(sp)
 100970c:	2885883a 	add	r2,r5,r2
 1009710:	2809883a 	mov	r4,r5
 1009714:	800d883a 	mov	r6,r16
 1009718:	100b883a 	mov	r5,r2
 100971c:	800f883a 	mov	r7,r16
 1009720:	10095480 	call	1009548 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1009724:	88800015 	stw	r2,0(r17)
 1009728:	dfc00317 	ldw	ra,12(sp)
 100972c:	dc400217 	ldw	r17,8(sp)
 1009730:	dc000117 	ldw	r16,4(sp)
 1009734:	dec00404 	addi	sp,sp,16
 1009738:	f800283a 	ret

0100973c <_ZNSsC2EPKcRKSaIcE>:
 100973c:	defffc04 	addi	sp,sp,-16
 1009740:	dc400215 	stw	r17,8(sp)
 1009744:	dc000115 	stw	r16,4(sp)
 1009748:	2023883a 	mov	r17,r4
 100974c:	dfc00315 	stw	ra,12(sp)
 1009750:	00bfffc4 	movi	r2,-1
 1009754:	2809883a 	mov	r4,r5
 1009758:	3021883a 	mov	r16,r6
 100975c:	28000426 	beq	r5,zero,1009770 <_ZNSsC2EPKcRKSaIcE+0x34>
 1009760:	d9400015 	stw	r5,0(sp)
 1009764:	100f4040 	call	100f404 <strlen>
 1009768:	d9400017 	ldw	r5,0(sp)
 100976c:	2885883a 	add	r2,r5,r2
 1009770:	2809883a 	mov	r4,r5
 1009774:	800d883a 	mov	r6,r16
 1009778:	100b883a 	mov	r5,r2
 100977c:	800f883a 	mov	r7,r16
 1009780:	10095480 	call	1009548 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 1009784:	88800015 	stw	r2,0(r17)
 1009788:	dfc00317 	ldw	ra,12(sp)
 100978c:	dc400217 	ldw	r17,8(sp)
 1009790:	dc000117 	ldw	r16,4(sp)
 1009794:	dec00404 	addi	sp,sp,16
 1009798:	f800283a 	ret

0100979c <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_>:
 100979c:	3147c83a 	sub	r3,r6,r5
 10097a0:	00800044 	movi	r2,1
 10097a4:	180d883a 	mov	r6,r3
 10097a8:	18800126 	beq	r3,r2,10097b0 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_+0x14>
 10097ac:	100eb6c1 	jmpi	100eb6c <memcpy>
 10097b0:	28800003 	ldbu	r2,0(r5)
 10097b4:	20800005 	stb	r2,0(r4)
 10097b8:	f800283a 	ret

010097bc <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>:
 10097bc:	defffb04 	addi	sp,sp,-20
 10097c0:	dc000015 	stw	r16,0(sp)
 10097c4:	dfc00415 	stw	ra,16(sp)
 10097c8:	dcc00315 	stw	r19,12(sp)
 10097cc:	dc800215 	stw	r18,8(sp)
 10097d0:	dc400115 	stw	r17,4(sp)
 10097d4:	2021883a 	mov	r16,r4
 10097d8:	29000a1e 	bne	r5,r4,1009804 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0x48>
 10097dc:	04c040f4 	movhi	r19,259
 10097e0:	9ccf2a04 	addi	r19,r19,15528
 10097e4:	9805883a 	mov	r2,r19
 10097e8:	dfc00417 	ldw	ra,16(sp)
 10097ec:	dcc00317 	ldw	r19,12(sp)
 10097f0:	dc800217 	ldw	r18,8(sp)
 10097f4:	dc400117 	ldw	r17,4(sp)
 10097f8:	dc000017 	ldw	r16,0(sp)
 10097fc:	dec00504 	addi	sp,sp,20
 1009800:	f800283a 	ret
 1009804:	2923c83a 	sub	r17,r5,r4
 1009808:	8809883a 	mov	r4,r17
 100980c:	000b883a 	mov	r5,zero
 1009810:	10083500 	call	1008350 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 1009814:	1025883a 	mov	r18,r2
 1009818:	14c00304 	addi	r19,r2,12
 100981c:	00800044 	movi	r2,1
 1009820:	88801026 	beq	r17,r2,1009864 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0xa8>
 1009824:	800b883a 	mov	r5,r16
 1009828:	9809883a 	mov	r4,r19
 100982c:	880d883a 	mov	r6,r17
 1009830:	100eb6c0 	call	100eb6c <memcpy>
 1009834:	9c45883a 	add	r2,r19,r17
 1009838:	94400015 	stw	r17,0(r18)
 100983c:	90000215 	stw	zero,8(r18)
 1009840:	10000005 	stb	zero,0(r2)
 1009844:	9805883a 	mov	r2,r19
 1009848:	dfc00417 	ldw	ra,16(sp)
 100984c:	dcc00317 	ldw	r19,12(sp)
 1009850:	dc800217 	ldw	r18,8(sp)
 1009854:	dc400117 	ldw	r17,4(sp)
 1009858:	dc000017 	ldw	r16,0(sp)
 100985c:	dec00504 	addi	sp,sp,20
 1009860:	f800283a 	ret
 1009864:	80800003 	ldbu	r2,0(r16)
 1009868:	98800005 	stb	r2,0(r19)
 100986c:	003ff106 	br	1009834 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0x78>

01009870 <_ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE>:
 1009870:	defffe04 	addi	sp,sp,-8
 1009874:	dc400015 	stw	r17,0(sp)
 1009878:	2023883a 	mov	r17,r4
 100987c:	2809883a 	mov	r4,r5
 1009880:	300b883a 	mov	r5,r6
 1009884:	380d883a 	mov	r6,r7
 1009888:	dfc00115 	stw	ra,4(sp)
 100988c:	10097bc0 	call	10097bc <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>
 1009890:	88800015 	stw	r2,0(r17)
 1009894:	dfc00117 	ldw	ra,4(sp)
 1009898:	dc400017 	ldw	r17,0(sp)
 100989c:	dec00204 	addi	sp,sp,8
 10098a0:	f800283a 	ret

010098a4 <_ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE>:
 10098a4:	defffe04 	addi	sp,sp,-8
 10098a8:	dc400015 	stw	r17,0(sp)
 10098ac:	2023883a 	mov	r17,r4
 10098b0:	2809883a 	mov	r4,r5
 10098b4:	300b883a 	mov	r5,r6
 10098b8:	380d883a 	mov	r6,r7
 10098bc:	dfc00115 	stw	ra,4(sp)
 10098c0:	10097bc0 	call	10097bc <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>
 10098c4:	88800015 	stw	r2,0(r17)
 10098c8:	dfc00117 	ldw	ra,4(sp)
 10098cc:	dc400017 	ldw	r17,0(sp)
 10098d0:	dec00204 	addi	sp,sp,8
 10098d4:	f800283a 	ret

010098d8 <_ZNSsC1ERKSs>:
 10098d8:	deffec04 	addi	sp,sp,-80
 10098dc:	00804074 	movhi	r2,257
 10098e0:	10b3a604 	addi	r2,r2,-12648
 10098e4:	d8800715 	stw	r2,28(sp)
 10098e8:	00c040b4 	movhi	r3,258
 10098ec:	18d19104 	addi	r3,r3,17988
 10098f0:	00804074 	movhi	r2,257
 10098f4:	10a66704 	addi	r2,r2,-26212
 10098f8:	d9000e15 	stw	r4,56(sp)
 10098fc:	d9000104 	addi	r4,sp,4
 1009900:	d8800a15 	stw	r2,40(sp)
 1009904:	dfc01315 	stw	ra,76(sp)
 1009908:	df001215 	stw	fp,72(sp)
 100990c:	ddc01115 	stw	r23,68(sp)
 1009910:	d8c00815 	stw	r3,32(sp)
 1009914:	d9400f15 	stw	r5,60(sp)
 1009918:	dec00915 	stw	sp,36(sp)
 100991c:	dec00b15 	stw	sp,44(sp)
 1009920:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1009924:	d8800f17 	ldw	r2,60(sp)
 1009928:	10800017 	ldw	r2,0(r2)
 100992c:	113ffd04 	addi	r4,r2,-12
 1009930:	d8801015 	stw	r2,64(sp)
 1009934:	20800217 	ldw	r2,8(r4)
 1009938:	10000d16 	blt	r2,zero,1009970 <_ZNSsC1ERKSs+0x98>
 100993c:	008040f4 	movhi	r2,259
 1009940:	108f2704 	addi	r2,r2,15516
 1009944:	2080101e 	bne	r4,r2,1009988 <_ZNSsC1ERKSs+0xb0>
 1009948:	d8801017 	ldw	r2,64(sp)
 100994c:	d8c00e17 	ldw	r3,56(sp)
 1009950:	d9000104 	addi	r4,sp,4
 1009954:	18800015 	stw	r2,0(r3)
 1009958:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100995c:	dfc01317 	ldw	ra,76(sp)
 1009960:	df001217 	ldw	fp,72(sp)
 1009964:	ddc01117 	ldw	r23,68(sp)
 1009968:	dec01404 	addi	sp,sp,80
 100996c:	f800283a 	ret
 1009970:	00800084 	movi	r2,2
 1009974:	d8800215 	stw	r2,8(sp)
 1009978:	d80b883a 	mov	r5,sp
 100997c:	000d883a 	mov	r6,zero
 1009980:	1008ebc0 	call	1008ebc <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1009984:	003ff106 	br	100994c <_ZNSsC1ERKSs+0x74>
 1009988:	01400044 	movi	r5,1
 100998c:	d9400215 	stw	r5,8(sp)
 1009990:	21000204 	addi	r4,r4,8
 1009994:	100ba040 	call	100ba04 <_ZN9__gnu_cxx12__atomic_addEPVii>
 1009998:	003feb06 	br	1009948 <_ZNSsC1ERKSs+0x70>
 100999c:	d8c00217 	ldw	r3,8(sp)
 10099a0:	00800044 	movi	r2,1
 10099a4:	d9000317 	ldw	r4,12(sp)
 10099a8:	d9400417 	ldw	r5,16(sp)
 10099ac:	18800426 	beq	r3,r2,10099c0 <_ZNSsC1ERKSs+0xe8>
 10099b0:	00bfffc4 	movi	r2,-1
 10099b4:	28800426 	beq	r5,r2,10099c8 <_ZNSsC1ERKSs+0xf0>
 10099b8:	d8800215 	stw	r2,8(sp)
 10099bc:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 10099c0:	00bfffc4 	movi	r2,-1
 10099c4:	003ffc06 	br	10099b8 <_ZNSsC1ERKSs+0xe0>
 10099c8:	00bfffc4 	movi	r2,-1
 10099cc:	d8800215 	stw	r2,8(sp)
 10099d0:	100cd180 	call	100cd18 <__cxa_call_unexpected>

010099d4 <_ZNSsC2ERKSs>:
 10099d4:	deffec04 	addi	sp,sp,-80
 10099d8:	00804074 	movhi	r2,257
 10099dc:	10b3a604 	addi	r2,r2,-12648
 10099e0:	d8800715 	stw	r2,28(sp)
 10099e4:	00c040b4 	movhi	r3,258
 10099e8:	18d19504 	addi	r3,r3,18004
 10099ec:	00804074 	movhi	r2,257
 10099f0:	10a6a604 	addi	r2,r2,-25960
 10099f4:	d9000e15 	stw	r4,56(sp)
 10099f8:	d9000104 	addi	r4,sp,4
 10099fc:	d8800a15 	stw	r2,40(sp)
 1009a00:	dfc01315 	stw	ra,76(sp)
 1009a04:	df001215 	stw	fp,72(sp)
 1009a08:	ddc01115 	stw	r23,68(sp)
 1009a0c:	d8c00815 	stw	r3,32(sp)
 1009a10:	d9400f15 	stw	r5,60(sp)
 1009a14:	dec00915 	stw	sp,36(sp)
 1009a18:	dec00b15 	stw	sp,44(sp)
 1009a1c:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1009a20:	d8800f17 	ldw	r2,60(sp)
 1009a24:	10800017 	ldw	r2,0(r2)
 1009a28:	113ffd04 	addi	r4,r2,-12
 1009a2c:	d8801015 	stw	r2,64(sp)
 1009a30:	20800217 	ldw	r2,8(r4)
 1009a34:	10000d16 	blt	r2,zero,1009a6c <_ZNSsC2ERKSs+0x98>
 1009a38:	008040f4 	movhi	r2,259
 1009a3c:	108f2704 	addi	r2,r2,15516
 1009a40:	2080101e 	bne	r4,r2,1009a84 <_ZNSsC2ERKSs+0xb0>
 1009a44:	d8801017 	ldw	r2,64(sp)
 1009a48:	d8c00e17 	ldw	r3,56(sp)
 1009a4c:	d9000104 	addi	r4,sp,4
 1009a50:	18800015 	stw	r2,0(r3)
 1009a54:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1009a58:	dfc01317 	ldw	ra,76(sp)
 1009a5c:	df001217 	ldw	fp,72(sp)
 1009a60:	ddc01117 	ldw	r23,68(sp)
 1009a64:	dec01404 	addi	sp,sp,80
 1009a68:	f800283a 	ret
 1009a6c:	00800084 	movi	r2,2
 1009a70:	d8800215 	stw	r2,8(sp)
 1009a74:	d80b883a 	mov	r5,sp
 1009a78:	000d883a 	mov	r6,zero
 1009a7c:	1008ebc0 	call	1008ebc <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1009a80:	003ff106 	br	1009a48 <_ZNSsC2ERKSs+0x74>
 1009a84:	01400044 	movi	r5,1
 1009a88:	d9400215 	stw	r5,8(sp)
 1009a8c:	21000204 	addi	r4,r4,8
 1009a90:	100ba040 	call	100ba04 <_ZN9__gnu_cxx12__atomic_addEPVii>
 1009a94:	003feb06 	br	1009a44 <_ZNSsC2ERKSs+0x70>
 1009a98:	d8c00217 	ldw	r3,8(sp)
 1009a9c:	00800044 	movi	r2,1
 1009aa0:	d9000317 	ldw	r4,12(sp)
 1009aa4:	d9400417 	ldw	r5,16(sp)
 1009aa8:	18800426 	beq	r3,r2,1009abc <_ZNSsC2ERKSs+0xe8>
 1009aac:	00bfffc4 	movi	r2,-1
 1009ab0:	28800426 	beq	r5,r2,1009ac4 <_ZNSsC2ERKSs+0xf0>
 1009ab4:	d8800215 	stw	r2,8(sp)
 1009ab8:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1009abc:	00bfffc4 	movi	r2,-1
 1009ac0:	003ffc06 	br	1009ab4 <_ZNSsC2ERKSs+0xe0>
 1009ac4:	00bfffc4 	movi	r2,-1
 1009ac8:	d8800215 	stw	r2,8(sp)
 1009acc:	100cd180 	call	100cd18 <__cxa_call_unexpected>

01009ad0 <_ZNSs6assignERKSs>:
 1009ad0:	deffea04 	addi	sp,sp,-88
 1009ad4:	00804074 	movhi	r2,257
 1009ad8:	10b3a604 	addi	r2,r2,-12648
 1009adc:	00c040b4 	movhi	r3,258
 1009ae0:	18d19904 	addi	r3,r3,18020
 1009ae4:	d8800715 	stw	r2,28(sp)
 1009ae8:	d9001015 	stw	r4,64(sp)
 1009aec:	00804074 	movhi	r2,257
 1009af0:	10a70104 	addi	r2,r2,-25596
 1009af4:	d9000104 	addi	r4,sp,4
 1009af8:	d8c00815 	stw	r3,32(sp)
 1009afc:	d8800a15 	stw	r2,40(sp)
 1009b00:	d9401115 	stw	r5,68(sp)
 1009b04:	dfc01515 	stw	ra,84(sp)
 1009b08:	df001415 	stw	fp,80(sp)
 1009b0c:	ddc01315 	stw	r23,76(sp)
 1009b10:	dec00915 	stw	sp,36(sp)
 1009b14:	dec00b15 	stw	sp,44(sp)
 1009b18:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1009b1c:	d8801117 	ldw	r2,68(sp)
 1009b20:	d8c01017 	ldw	r3,64(sp)
 1009b24:	10800017 	ldw	r2,0(r2)
 1009b28:	d8801215 	stw	r2,72(sp)
 1009b2c:	d9401217 	ldw	r5,72(sp)
 1009b30:	18800017 	ldw	r2,0(r3)
 1009b34:	00fffd04 	movi	r3,-12
 1009b38:	28c9883a 	add	r4,r5,r3
 1009b3c:	10c5883a 	add	r2,r2,r3
 1009b40:	11001126 	beq	r2,r4,1009b88 <_ZNSs6assignERKSs+0xb8>
 1009b44:	20800217 	ldw	r2,8(r4)
 1009b48:	10001716 	blt	r2,zero,1009ba8 <_ZNSs6assignERKSs+0xd8>
 1009b4c:	008040f4 	movhi	r2,259
 1009b50:	108f2704 	addi	r2,r2,15516
 1009b54:	2080261e 	bne	r4,r2,1009bf0 <_ZNSs6assignERKSs+0x120>
 1009b58:	d8c01217 	ldw	r3,72(sp)
 1009b5c:	d8c00f15 	stw	r3,60(sp)
 1009b60:	d9401017 	ldw	r5,64(sp)
 1009b64:	00c040f4 	movhi	r3,259
 1009b68:	18cf2704 	addi	r3,r3,15516
 1009b6c:	28800017 	ldw	r2,0(r5)
 1009b70:	10bffd04 	addi	r2,r2,-12
 1009b74:	d8800e15 	stw	r2,56(sp)
 1009b78:	10c0121e 	bne	r2,r3,1009bc4 <_ZNSs6assignERKSs+0xf4>
 1009b7c:	d8c00f17 	ldw	r3,60(sp)
 1009b80:	d8801017 	ldw	r2,64(sp)
 1009b84:	10c00015 	stw	r3,0(r2)
 1009b88:	d9000104 	addi	r4,sp,4
 1009b8c:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1009b90:	d8801017 	ldw	r2,64(sp)
 1009b94:	dfc01517 	ldw	ra,84(sp)
 1009b98:	df001417 	ldw	fp,80(sp)
 1009b9c:	ddc01317 	ldw	r23,76(sp)
 1009ba0:	dec01604 	addi	sp,sp,88
 1009ba4:	f800283a 	ret
 1009ba8:	00800084 	movi	r2,2
 1009bac:	d8800215 	stw	r2,8(sp)
 1009bb0:	d80b883a 	mov	r5,sp
 1009bb4:	000d883a 	mov	r6,zero
 1009bb8:	1008ebc0 	call	1008ebc <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1009bbc:	d8800f15 	stw	r2,60(sp)
 1009bc0:	003fe706 	br	1009b60 <_ZNSs6assignERKSs+0x90>
 1009bc4:	d9400e17 	ldw	r5,56(sp)
 1009bc8:	008000c4 	movi	r2,3
 1009bcc:	d8800215 	stw	r2,8(sp)
 1009bd0:	29000204 	addi	r4,r5,8
 1009bd4:	017fffc4 	movi	r5,-1
 1009bd8:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1009bdc:	00bfe716 	blt	zero,r2,1009b7c <_ZNSs6assignERKSs+0xac>
 1009be0:	d9000e17 	ldw	r4,56(sp)
 1009be4:	d80b883a 	mov	r5,sp
 1009be8:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1009bec:	003fe306 	br	1009b7c <_ZNSs6assignERKSs+0xac>
 1009bf0:	01400044 	movi	r5,1
 1009bf4:	d9400215 	stw	r5,8(sp)
 1009bf8:	21000204 	addi	r4,r4,8
 1009bfc:	100ba040 	call	100ba04 <_ZN9__gnu_cxx12__atomic_addEPVii>
 1009c00:	003fd506 	br	1009b58 <_ZNSs6assignERKSs+0x88>
 1009c04:	d8c00217 	ldw	r3,8(sp)
 1009c08:	00800044 	movi	r2,1
 1009c0c:	d9000317 	ldw	r4,12(sp)
 1009c10:	d9400417 	ldw	r5,16(sp)
 1009c14:	18800626 	beq	r3,r2,1009c30 <_ZNSs6assignERKSs+0x160>
 1009c18:	00800084 	movi	r2,2
 1009c1c:	18800426 	beq	r3,r2,1009c30 <_ZNSs6assignERKSs+0x160>
 1009c20:	00bfffc4 	movi	r2,-1
 1009c24:	28800426 	beq	r5,r2,1009c38 <_ZNSs6assignERKSs+0x168>
 1009c28:	d8800215 	stw	r2,8(sp)
 1009c2c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 1009c30:	00bfffc4 	movi	r2,-1
 1009c34:	003ffc06 	br	1009c28 <_ZNSs6assignERKSs+0x158>
 1009c38:	00bfffc4 	movi	r2,-1
 1009c3c:	d8800215 	stw	r2,8(sp)
 1009c40:	100cd180 	call	100cd18 <__cxa_call_unexpected>

01009c44 <_ZNSsaSERKSs>:
 1009c44:	1009ad01 	jmpi	1009ad0 <_ZNSs6assignERKSs>

01009c48 <_ZNSs7reserveEm>:
 1009c48:	deffeb04 	addi	sp,sp,-84
 1009c4c:	00804074 	movhi	r2,257
 1009c50:	10b3a604 	addi	r2,r2,-12648
 1009c54:	00c040b4 	movhi	r3,258
 1009c58:	18d19d44 	addi	r3,r3,18037
 1009c5c:	d8800715 	stw	r2,28(sp)
 1009c60:	d9001015 	stw	r4,64(sp)
 1009c64:	00804074 	movhi	r2,257
 1009c68:	10a75804 	addi	r2,r2,-25248
 1009c6c:	d9000104 	addi	r4,sp,4
 1009c70:	d8c00815 	stw	r3,32(sp)
 1009c74:	d8800a15 	stw	r2,40(sp)
 1009c78:	dfc01415 	stw	ra,80(sp)
 1009c7c:	df001315 	stw	fp,76(sp)
 1009c80:	ddc01215 	stw	r23,72(sp)
 1009c84:	dec00915 	stw	sp,36(sp)
 1009c88:	dec00b15 	stw	sp,44(sp)
 1009c8c:	d9401115 	stw	r5,68(sp)
 1009c90:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 1009c94:	d8801017 	ldw	r2,64(sp)
 1009c98:	10c00017 	ldw	r3,0(r2)
 1009c9c:	193ffd04 	addi	r4,r3,-12
 1009ca0:	20800117 	ldw	r2,4(r4)
 1009ca4:	d8c01117 	ldw	r3,68(sp)
 1009ca8:	10c01c26 	beq	r2,r3,1009d1c <_ZNSs7reserveEm+0xd4>
 1009cac:	20c00017 	ldw	r3,0(r4)
 1009cb0:	d9401117 	ldw	r5,68(sp)
 1009cb4:	28c01736 	bltu	r5,r3,1009d14 <_ZNSs7reserveEm+0xcc>
 1009cb8:	00800044 	movi	r2,1
 1009cbc:	28cdc83a 	sub	r6,r5,r3
 1009cc0:	d8800215 	stw	r2,8(sp)
 1009cc4:	d80b883a 	mov	r5,sp
 1009cc8:	1008ebc0 	call	1008ebc <_ZNSs4_Rep8_M_cloneERKSaIcEm>
 1009ccc:	d8c01017 	ldw	r3,64(sp)
 1009cd0:	d8800f15 	stw	r2,60(sp)
 1009cd4:	18800017 	ldw	r2,0(r3)
 1009cd8:	00c040f4 	movhi	r3,259
 1009cdc:	18cf2704 	addi	r3,r3,15516
 1009ce0:	10bffd04 	addi	r2,r2,-12
 1009ce4:	d8800e15 	stw	r2,56(sp)
 1009ce8:	10c0151e 	bne	r2,r3,1009d40 <_ZNSs7reserveEm+0xf8>
 1009cec:	d8c00f17 	ldw	r3,60(sp)
 1009cf0:	d8801017 	ldw	r2,64(sp)
 1009cf4:	d9000104 	addi	r4,sp,4
 1009cf8:	10c00015 	stw	r3,0(r2)
 1009cfc:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1009d00:	dfc01417 	ldw	ra,80(sp)
 1009d04:	df001317 	ldw	fp,76(sp)
 1009d08:	ddc01217 	ldw	r23,72(sp)
 1009d0c:	dec01504 	addi	sp,sp,84
 1009d10:	f800283a 	ret
 1009d14:	180b883a 	mov	r5,r3
 1009d18:	003fe706 	br	1009cb8 <_ZNSs7reserveEm+0x70>
 1009d1c:	20800217 	ldw	r2,8(r4)
 1009d20:	00bfe216 	blt	zero,r2,1009cac <_ZNSs7reserveEm+0x64>
 1009d24:	d9000104 	addi	r4,sp,4
 1009d28:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 1009d2c:	dfc01417 	ldw	ra,80(sp)
 1009d30:	df001317 	ldw	fp,76(sp)
 1009d34:	ddc01217 	ldw	r23,72(sp)
 1009d38:	dec01504 	addi	sp,sp,84
 1009d3c:	f800283a 	ret
 1009d40:	11000204 	addi	r4,r2,8
 1009d44:	017fffc4 	movi	r5,-1
 1009d48:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 1009d4c:	00bfe716 	blt	zero,r2,1009cec <_ZNSs7reserveEm+0xa4>
 1009d50:	d9000e17 	ldw	r4,56(sp)
 1009d54:	d80b883a 	mov	r5,sp
 1009d58:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 1009d5c:	003fe306 	br	1009cec <_ZNSs7reserveEm+0xa4>
 1009d60:	d9000317 	ldw	r4,12(sp)
 1009d64:	00bfffc4 	movi	r2,-1
 1009d68:	d8800215 	stw	r2,8(sp)
 1009d6c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

01009d70 <_ZNSs9push_backEc>:
 1009d70:	21800017 	ldw	r6,0(r4)
 1009d74:	defffc04 	addi	sp,sp,-16
 1009d78:	dc000015 	stw	r16,0(sp)
 1009d7c:	30bffd17 	ldw	r2,-12(r6)
 1009d80:	31fffd04 	addi	r7,r6,-12
 1009d84:	38c00117 	ldw	r3,4(r7)
 1009d88:	14000044 	addi	r16,r2,1
 1009d8c:	dc800215 	stw	r18,8(sp)
 1009d90:	dc400115 	stw	r17,4(sp)
 1009d94:	2825883a 	mov	r18,r5
 1009d98:	dfc00315 	stw	ra,12(sp)
 1009d9c:	2023883a 	mov	r17,r4
 1009da0:	800b883a 	mov	r5,r16
 1009da4:	1c001136 	bltu	r3,r16,1009dec <_ZNSs9push_backEc+0x7c>
 1009da8:	38800217 	ldw	r2,8(r7)
 1009dac:	00800f16 	blt	zero,r2,1009dec <_ZNSs9push_backEc+0x7c>
 1009db0:	30bffd17 	ldw	r2,-12(r6)
 1009db4:	3085883a 	add	r2,r6,r2
 1009db8:	14800005 	stb	r18,0(r2)
 1009dbc:	88c00017 	ldw	r3,0(r17)
 1009dc0:	18bffd04 	addi	r2,r3,-12
 1009dc4:	1c3ffd15 	stw	r16,-12(r3)
 1009dc8:	1409883a 	add	r4,r2,r16
 1009dcc:	10000215 	stw	zero,8(r2)
 1009dd0:	20000305 	stb	zero,12(r4)
 1009dd4:	dfc00317 	ldw	ra,12(sp)
 1009dd8:	dc800217 	ldw	r18,8(sp)
 1009ddc:	dc400117 	ldw	r17,4(sp)
 1009de0:	dc000017 	ldw	r16,0(sp)
 1009de4:	dec00404 	addi	sp,sp,16
 1009de8:	f800283a 	ret
 1009dec:	1009c480 	call	1009c48 <_ZNSs7reserveEm>
 1009df0:	89800017 	ldw	r6,0(r17)
 1009df4:	003fee06 	br	1009db0 <_ZNSs9push_backEc+0x40>

01009df8 <_ZNSs6appendEmc>:
 1009df8:	defffb04 	addi	sp,sp,-20
 1009dfc:	dcc00315 	stw	r19,12(sp)
 1009e00:	dc800215 	stw	r18,8(sp)
 1009e04:	dc000015 	stw	r16,0(sp)
 1009e08:	dfc00415 	stw	ra,16(sp)
 1009e0c:	dc400115 	stw	r17,4(sp)
 1009e10:	2821883a 	mov	r16,r5
 1009e14:	3027883a 	mov	r19,r6
 1009e18:	2025883a 	mov	r18,r4
 1009e1c:	28001d26 	beq	r5,zero,1009e94 <_ZNSs6appendEmc+0x9c>
 1009e20:	20c00017 	ldw	r3,0(r4)
 1009e24:	00900034 	movhi	r2,16384
 1009e28:	10bfff04 	addi	r2,r2,-4
 1009e2c:	197ffd17 	ldw	r5,-12(r3)
 1009e30:	19bffd04 	addi	r6,r3,-12
 1009e34:	1145c83a 	sub	r2,r2,r5
 1009e38:	14002436 	bltu	r2,r16,1009ecc <_ZNSs6appendEmc+0xd4>
 1009e3c:	30800117 	ldw	r2,4(r6)
 1009e40:	8163883a 	add	r17,r16,r5
 1009e44:	14400236 	bltu	r2,r17,1009e50 <_ZNSs6appendEmc+0x58>
 1009e48:	30800217 	ldw	r2,8(r6)
 1009e4c:	0080030e 	bge	zero,r2,1009e5c <_ZNSs6appendEmc+0x64>
 1009e50:	880b883a 	mov	r5,r17
 1009e54:	1009c480 	call	1009c48 <_ZNSs7reserveEm>
 1009e58:	90c00017 	ldw	r3,0(r18)
 1009e5c:	18bffd17 	ldw	r2,-12(r3)
 1009e60:	99803fcc 	andi	r6,r19,255
 1009e64:	3180201c 	xori	r6,r6,128
 1009e68:	1889883a 	add	r4,r3,r2
 1009e6c:	00800044 	movi	r2,1
 1009e70:	31bfe004 	addi	r6,r6,-128
 1009e74:	80800f1e 	bne	r16,r2,1009eb4 <_ZNSs6appendEmc+0xbc>
 1009e78:	21800005 	stb	r6,0(r4)
 1009e7c:	90800017 	ldw	r2,0(r18)
 1009e80:	10fffd04 	addi	r3,r2,-12
 1009e84:	147ffd15 	stw	r17,-12(r2)
 1009e88:	1c49883a 	add	r4,r3,r17
 1009e8c:	18000215 	stw	zero,8(r3)
 1009e90:	20000305 	stb	zero,12(r4)
 1009e94:	9005883a 	mov	r2,r18
 1009e98:	dfc00417 	ldw	ra,16(sp)
 1009e9c:	dcc00317 	ldw	r19,12(sp)
 1009ea0:	dc800217 	ldw	r18,8(sp)
 1009ea4:	dc400117 	ldw	r17,4(sp)
 1009ea8:	dc000017 	ldw	r16,0(sp)
 1009eac:	dec00504 	addi	sp,sp,20
 1009eb0:	f800283a 	ret
 1009eb4:	31403fcc 	andi	r5,r6,255
 1009eb8:	2940201c 	xori	r5,r5,128
 1009ebc:	297fe004 	addi	r5,r5,-128
 1009ec0:	800d883a 	mov	r6,r16
 1009ec4:	100ecec0 	call	100ecec <memset>
 1009ec8:	003fec06 	br	1009e7c <_ZNSs6appendEmc+0x84>
 1009ecc:	010040b4 	movhi	r4,258
 1009ed0:	21153104 	addi	r4,r4,21700
 1009ed4:	100673c0 	call	100673c <_ZSt20__throw_length_errorPKc>

01009ed8 <_ZNSs6appendEPKcm>:
 1009ed8:	defffa04 	addi	sp,sp,-24
 1009edc:	dd000415 	stw	r20,16(sp)
 1009ee0:	dcc00315 	stw	r19,12(sp)
 1009ee4:	dc400115 	stw	r17,4(sp)
 1009ee8:	dfc00515 	stw	ra,20(sp)
 1009eec:	dc800215 	stw	r18,8(sp)
 1009ef0:	dc000015 	stw	r16,0(sp)
 1009ef4:	3023883a 	mov	r17,r6
 1009ef8:	2829883a 	mov	r20,r5
 1009efc:	2027883a 	mov	r19,r4
 1009f00:	30001c26 	beq	r6,zero,1009f74 <_ZNSs6appendEPKcm+0x9c>
 1009f04:	24000017 	ldw	r16,0(r4)
 1009f08:	00900034 	movhi	r2,16384
 1009f0c:	10bfff04 	addi	r2,r2,-4
 1009f10:	80fffd17 	ldw	r3,-12(r16)
 1009f14:	817ffd04 	addi	r5,r16,-12
 1009f18:	10c5c83a 	sub	r2,r2,r3
 1009f1c:	11802e36 	bltu	r2,r6,1009fd8 <_ZNSs6appendEPKcm+0x100>
 1009f20:	28800117 	ldw	r2,4(r5)
 1009f24:	30e5883a 	add	r18,r6,r3
 1009f28:	14801b2e 	bgeu	r2,r18,1009f98 <_ZNSs6appendEPKcm+0xc0>
 1009f2c:	a4000236 	bltu	r20,r16,1009f38 <_ZNSs6appendEPKcm+0x60>
 1009f30:	80c5883a 	add	r2,r16,r3
 1009f34:	1500222e 	bgeu	r2,r20,1009fc0 <_ZNSs6appendEPKcm+0xe8>
 1009f38:	900b883a 	mov	r5,r18
 1009f3c:	1009c480 	call	1009c48 <_ZNSs7reserveEm>
 1009f40:	9c000017 	ldw	r16,0(r19)
 1009f44:	80bffd17 	ldw	r2,-12(r16)
 1009f48:	00c00044 	movi	r3,1
 1009f4c:	8089883a 	add	r4,r16,r2
 1009f50:	88c0171e 	bne	r17,r3,1009fb0 <_ZNSs6appendEPKcm+0xd8>
 1009f54:	a0800003 	ldbu	r2,0(r20)
 1009f58:	20800005 	stb	r2,0(r4)
 1009f5c:	98800017 	ldw	r2,0(r19)
 1009f60:	10fffd04 	addi	r3,r2,-12
 1009f64:	14bffd15 	stw	r18,-12(r2)
 1009f68:	1c89883a 	add	r4,r3,r18
 1009f6c:	18000215 	stw	zero,8(r3)
 1009f70:	20000305 	stb	zero,12(r4)
 1009f74:	9805883a 	mov	r2,r19
 1009f78:	dfc00517 	ldw	ra,20(sp)
 1009f7c:	dd000417 	ldw	r20,16(sp)
 1009f80:	dcc00317 	ldw	r19,12(sp)
 1009f84:	dc800217 	ldw	r18,8(sp)
 1009f88:	dc400117 	ldw	r17,4(sp)
 1009f8c:	dc000017 	ldw	r16,0(sp)
 1009f90:	dec00604 	addi	sp,sp,24
 1009f94:	f800283a 	ret
 1009f98:	28800217 	ldw	r2,8(r5)
 1009f9c:	00bfe316 	blt	zero,r2,1009f2c <_ZNSs6appendEPKcm+0x54>
 1009fa0:	80bffd17 	ldw	r2,-12(r16)
 1009fa4:	00c00044 	movi	r3,1
 1009fa8:	8089883a 	add	r4,r16,r2
 1009fac:	88ffe926 	beq	r17,r3,1009f54 <_ZNSs6appendEPKcm+0x7c>
 1009fb0:	a00b883a 	mov	r5,r20
 1009fb4:	880d883a 	mov	r6,r17
 1009fb8:	100eb6c0 	call	100eb6c <memcpy>
 1009fbc:	003fe706 	br	1009f5c <_ZNSs6appendEPKcm+0x84>
 1009fc0:	900b883a 	mov	r5,r18
 1009fc4:	1009c480 	call	1009c48 <_ZNSs7reserveEm>
 1009fc8:	a405c83a 	sub	r2,r20,r16
 1009fcc:	9c000017 	ldw	r16,0(r19)
 1009fd0:	1429883a 	add	r20,r2,r16
 1009fd4:	003fdb06 	br	1009f44 <_ZNSs6appendEPKcm+0x6c>
 1009fd8:	010040b4 	movhi	r4,258
 1009fdc:	21153104 	addi	r4,r4,21700
 1009fe0:	100673c0 	call	100673c <_ZSt20__throw_length_errorPKc>

01009fe4 <_ZNSs6appendEPKc>:
 1009fe4:	defffd04 	addi	sp,sp,-12
 1009fe8:	dcc00115 	stw	r19,4(sp)
 1009fec:	dc400015 	stw	r17,0(sp)
 1009ff0:	dfc00215 	stw	ra,8(sp)
 1009ff4:	2023883a 	mov	r17,r4
 1009ff8:	2809883a 	mov	r4,r5
 1009ffc:	2827883a 	mov	r19,r5
 100a000:	100f4040 	call	100f404 <strlen>
 100a004:	980b883a 	mov	r5,r19
 100a008:	8809883a 	mov	r4,r17
 100a00c:	100d883a 	mov	r6,r2
 100a010:	dfc00217 	ldw	ra,8(sp)
 100a014:	dcc00117 	ldw	r19,4(sp)
 100a018:	dc400017 	ldw	r17,0(sp)
 100a01c:	dec00304 	addi	sp,sp,12
 100a020:	1009ed81 	jmpi	1009ed8 <_ZNSs6appendEPKcm>

0100a024 <_ZNSspLEPKc>:
 100a024:	defffd04 	addi	sp,sp,-12
 100a028:	dcc00115 	stw	r19,4(sp)
 100a02c:	dc400015 	stw	r17,0(sp)
 100a030:	dfc00215 	stw	ra,8(sp)
 100a034:	2023883a 	mov	r17,r4
 100a038:	2809883a 	mov	r4,r5
 100a03c:	2827883a 	mov	r19,r5
 100a040:	100f4040 	call	100f404 <strlen>
 100a044:	980b883a 	mov	r5,r19
 100a048:	8809883a 	mov	r4,r17
 100a04c:	100d883a 	mov	r6,r2
 100a050:	dfc00217 	ldw	ra,8(sp)
 100a054:	dcc00117 	ldw	r19,4(sp)
 100a058:	dc400017 	ldw	r17,0(sp)
 100a05c:	dec00304 	addi	sp,sp,12
 100a060:	1009ed81 	jmpi	1009ed8 <_ZNSs6appendEPKcm>

0100a064 <_ZNSs6appendERKSsmm>:
 100a064:	defffa04 	addi	sp,sp,-24
 100a068:	dcc00415 	stw	r19,16(sp)
 100a06c:	2827883a 	mov	r19,r5
 100a070:	29400017 	ldw	r5,0(r5)
 100a074:	dc800315 	stw	r18,12(sp)
 100a078:	dc000115 	stw	r16,4(sp)
 100a07c:	28bffd17 	ldw	r2,-12(r5)
 100a080:	dfc00515 	stw	ra,20(sp)
 100a084:	dc400215 	stw	r17,8(sp)
 100a088:	3021883a 	mov	r16,r6
 100a08c:	2025883a 	mov	r18,r4
 100a090:	11802b36 	bltu	r2,r6,100a140 <_ZNSs6appendERKSsmm+0xdc>
 100a094:	118dc83a 	sub	r6,r2,r6
 100a098:	31c02436 	bltu	r6,r7,100a12c <_ZNSs6appendERKSsmm+0xc8>
 100a09c:	38001b26 	beq	r7,zero,100a10c <_ZNSs6appendERKSsmm+0xa8>
 100a0a0:	91800017 	ldw	r6,0(r18)
 100a0a4:	323ffd04 	addi	r8,r6,-12
 100a0a8:	30bffd17 	ldw	r2,-12(r6)
 100a0ac:	40c00117 	ldw	r3,4(r8)
 100a0b0:	38a3883a 	add	r17,r7,r2
 100a0b4:	1c400236 	bltu	r3,r17,100a0c0 <_ZNSs6appendERKSsmm+0x5c>
 100a0b8:	40800217 	ldw	r2,8(r8)
 100a0bc:	0080060e 	bge	zero,r2,100a0d8 <_ZNSs6appendERKSsmm+0x74>
 100a0c0:	880b883a 	mov	r5,r17
 100a0c4:	d9c00015 	stw	r7,0(sp)
 100a0c8:	1009c480 	call	1009c48 <_ZNSs7reserveEm>
 100a0cc:	99400017 	ldw	r5,0(r19)
 100a0d0:	91800017 	ldw	r6,0(r18)
 100a0d4:	d9c00017 	ldw	r7,0(sp)
 100a0d8:	30fffd17 	ldw	r3,-12(r6)
 100a0dc:	00800044 	movi	r2,1
 100a0e0:	814b883a 	add	r5,r16,r5
 100a0e4:	30c9883a 	add	r4,r6,r3
 100a0e8:	3880121e 	bne	r7,r2,100a134 <_ZNSs6appendERKSsmm+0xd0>
 100a0ec:	28800003 	ldbu	r2,0(r5)
 100a0f0:	20800005 	stb	r2,0(r4)
 100a0f4:	90800017 	ldw	r2,0(r18)
 100a0f8:	10fffd04 	addi	r3,r2,-12
 100a0fc:	147ffd15 	stw	r17,-12(r2)
 100a100:	1c49883a 	add	r4,r3,r17
 100a104:	18000215 	stw	zero,8(r3)
 100a108:	20000305 	stb	zero,12(r4)
 100a10c:	9005883a 	mov	r2,r18
 100a110:	dfc00517 	ldw	ra,20(sp)
 100a114:	dcc00417 	ldw	r19,16(sp)
 100a118:	dc800317 	ldw	r18,12(sp)
 100a11c:	dc400217 	ldw	r17,8(sp)
 100a120:	dc000117 	ldw	r16,4(sp)
 100a124:	dec00604 	addi	sp,sp,24
 100a128:	f800283a 	ret
 100a12c:	300f883a 	mov	r7,r6
 100a130:	003fda06 	br	100a09c <_ZNSs6appendERKSsmm+0x38>
 100a134:	380d883a 	mov	r6,r7
 100a138:	100eb6c0 	call	100eb6c <memcpy>
 100a13c:	003fed06 	br	100a0f4 <_ZNSs6appendERKSsmm+0x90>
 100a140:	010040b4 	movhi	r4,258
 100a144:	21153104 	addi	r4,r4,21700
 100a148:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

0100a14c <_ZNSs6appendERKSs>:
 100a14c:	2a000017 	ldw	r8,0(r5)
 100a150:	defffb04 	addi	sp,sp,-20
 100a154:	dc000015 	stw	r16,0(sp)
 100a158:	443ffd17 	ldw	r16,-12(r8)
 100a15c:	dcc00315 	stw	r19,12(sp)
 100a160:	dc800215 	stw	r18,8(sp)
 100a164:	dfc00415 	stw	ra,16(sp)
 100a168:	dc400115 	stw	r17,4(sp)
 100a16c:	2827883a 	mov	r19,r5
 100a170:	2025883a 	mov	r18,r4
 100a174:	80001a26 	beq	r16,zero,100a1e0 <_ZNSs6appendERKSs+0x94>
 100a178:	21c00017 	ldw	r7,0(r4)
 100a17c:	39bffd04 	addi	r6,r7,-12
 100a180:	38bffd17 	ldw	r2,-12(r7)
 100a184:	30c00117 	ldw	r3,4(r6)
 100a188:	80a3883a 	add	r17,r16,r2
 100a18c:	880b883a 	mov	r5,r17
 100a190:	1c400236 	bltu	r3,r17,100a19c <_ZNSs6appendERKSs+0x50>
 100a194:	30800217 	ldw	r2,8(r6)
 100a198:	0080030e 	bge	zero,r2,100a1a8 <_ZNSs6appendERKSs+0x5c>
 100a19c:	1009c480 	call	1009c48 <_ZNSs7reserveEm>
 100a1a0:	9a000017 	ldw	r8,0(r19)
 100a1a4:	91c00017 	ldw	r7,0(r18)
 100a1a8:	38fffd17 	ldw	r3,-12(r7)
 100a1ac:	00800044 	movi	r2,1
 100a1b0:	400b883a 	mov	r5,r8
 100a1b4:	800d883a 	mov	r6,r16
 100a1b8:	38c9883a 	add	r4,r7,r3
 100a1bc:	8080101e 	bne	r16,r2,100a200 <_ZNSs6appendERKSs+0xb4>
 100a1c0:	40800003 	ldbu	r2,0(r8)
 100a1c4:	20800005 	stb	r2,0(r4)
 100a1c8:	90800017 	ldw	r2,0(r18)
 100a1cc:	10fffd04 	addi	r3,r2,-12
 100a1d0:	147ffd15 	stw	r17,-12(r2)
 100a1d4:	1c49883a 	add	r4,r3,r17
 100a1d8:	18000215 	stw	zero,8(r3)
 100a1dc:	20000305 	stb	zero,12(r4)
 100a1e0:	9005883a 	mov	r2,r18
 100a1e4:	dfc00417 	ldw	ra,16(sp)
 100a1e8:	dcc00317 	ldw	r19,12(sp)
 100a1ec:	dc800217 	ldw	r18,8(sp)
 100a1f0:	dc400117 	ldw	r17,4(sp)
 100a1f4:	dc000017 	ldw	r16,0(sp)
 100a1f8:	dec00504 	addi	sp,sp,20
 100a1fc:	f800283a 	ret
 100a200:	100eb6c0 	call	100eb6c <memcpy>
 100a204:	003ff006 	br	100a1c8 <_ZNSs6appendERKSs+0x7c>

0100a208 <_ZNSspLERKSs>:
 100a208:	100a14c1 	jmpi	100a14c <_ZNSs6appendERKSs>

0100a20c <_ZNSspLEc>:
 100a20c:	21800017 	ldw	r6,0(r4)
 100a210:	defffc04 	addi	sp,sp,-16
 100a214:	dc000015 	stw	r16,0(sp)
 100a218:	30bffd17 	ldw	r2,-12(r6)
 100a21c:	31fffd04 	addi	r7,r6,-12
 100a220:	38c00117 	ldw	r3,4(r7)
 100a224:	14000044 	addi	r16,r2,1
 100a228:	dc800215 	stw	r18,8(sp)
 100a22c:	dc400115 	stw	r17,4(sp)
 100a230:	2825883a 	mov	r18,r5
 100a234:	dfc00315 	stw	ra,12(sp)
 100a238:	2023883a 	mov	r17,r4
 100a23c:	800b883a 	mov	r5,r16
 100a240:	1c001236 	bltu	r3,r16,100a28c <_ZNSspLEc+0x80>
 100a244:	38800217 	ldw	r2,8(r7)
 100a248:	00801016 	blt	zero,r2,100a28c <_ZNSspLEc+0x80>
 100a24c:	30fffd17 	ldw	r3,-12(r6)
 100a250:	8805883a 	mov	r2,r17
 100a254:	30c7883a 	add	r3,r6,r3
 100a258:	1c800005 	stb	r18,0(r3)
 100a25c:	89000017 	ldw	r4,0(r17)
 100a260:	20fffd04 	addi	r3,r4,-12
 100a264:	243ffd15 	stw	r16,-12(r4)
 100a268:	1c0b883a 	add	r5,r3,r16
 100a26c:	18000215 	stw	zero,8(r3)
 100a270:	28000305 	stb	zero,12(r5)
 100a274:	dfc00317 	ldw	ra,12(sp)
 100a278:	dc800217 	ldw	r18,8(sp)
 100a27c:	dc400117 	ldw	r17,4(sp)
 100a280:	dc000017 	ldw	r16,0(sp)
 100a284:	dec00404 	addi	sp,sp,16
 100a288:	f800283a 	ret
 100a28c:	1009c480 	call	1009c48 <_ZNSs7reserveEm>
 100a290:	89800017 	ldw	r6,0(r17)
 100a294:	003fed06 	br	100a24c <_ZNSspLEc+0x40>

0100a298 <_ZNSsD1Ev>:
 100a298:	deffed04 	addi	sp,sp,-76
 100a29c:	00804074 	movhi	r2,257
 100a2a0:	10b3a604 	addi	r2,r2,-12648
 100a2a4:	00c040b4 	movhi	r3,258
 100a2a8:	18d19ec4 	addi	r3,r3,18043
 100a2ac:	d8800715 	stw	r2,28(sp)
 100a2b0:	d9000f15 	stw	r4,60(sp)
 100a2b4:	00804074 	movhi	r2,257
 100a2b8:	10a8d104 	addi	r2,r2,-23740
 100a2bc:	d9000104 	addi	r4,sp,4
 100a2c0:	d8c00815 	stw	r3,32(sp)
 100a2c4:	d8800a15 	stw	r2,40(sp)
 100a2c8:	dfc01215 	stw	ra,72(sp)
 100a2cc:	df001115 	stw	fp,68(sp)
 100a2d0:	ddc01015 	stw	r23,64(sp)
 100a2d4:	dec00915 	stw	sp,36(sp)
 100a2d8:	dec00b15 	stw	sp,44(sp)
 100a2dc:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100a2e0:	d8c00f17 	ldw	r3,60(sp)
 100a2e4:	18800017 	ldw	r2,0(r3)
 100a2e8:	00c040f4 	movhi	r3,259
 100a2ec:	18cf2704 	addi	r3,r3,15516
 100a2f0:	10bffd04 	addi	r2,r2,-12
 100a2f4:	d8800e15 	stw	r2,56(sp)
 100a2f8:	10c0071e 	bne	r2,r3,100a318 <_ZNSsD1Ev+0x80>
 100a2fc:	d9000104 	addi	r4,sp,4
 100a300:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100a304:	dfc01217 	ldw	ra,72(sp)
 100a308:	df001117 	ldw	fp,68(sp)
 100a30c:	ddc01017 	ldw	r23,64(sp)
 100a310:	dec01304 	addi	sp,sp,76
 100a314:	f800283a 	ret
 100a318:	00800044 	movi	r2,1
 100a31c:	d8800215 	stw	r2,8(sp)
 100a320:	d8800e17 	ldw	r2,56(sp)
 100a324:	017fffc4 	movi	r5,-1
 100a328:	11000204 	addi	r4,r2,8
 100a32c:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100a330:	00bff216 	blt	zero,r2,100a2fc <_ZNSsD1Ev+0x64>
 100a334:	d9000e17 	ldw	r4,56(sp)
 100a338:	d80b883a 	mov	r5,sp
 100a33c:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100a340:	003fee06 	br	100a2fc <_ZNSsD1Ev+0x64>
 100a344:	d9000317 	ldw	r4,12(sp)
 100a348:	00bfffc4 	movi	r2,-1
 100a34c:	d8800215 	stw	r2,8(sp)
 100a350:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

0100a354 <_ZNSsD2Ev>:
 100a354:	deffed04 	addi	sp,sp,-76
 100a358:	00804074 	movhi	r2,257
 100a35c:	10b3a604 	addi	r2,r2,-12648
 100a360:	00c040b4 	movhi	r3,258
 100a364:	18d1a044 	addi	r3,r3,18049
 100a368:	d8800715 	stw	r2,28(sp)
 100a36c:	d9000f15 	stw	r4,60(sp)
 100a370:	00804074 	movhi	r2,257
 100a374:	10a90004 	addi	r2,r2,-23552
 100a378:	d9000104 	addi	r4,sp,4
 100a37c:	d8c00815 	stw	r3,32(sp)
 100a380:	d8800a15 	stw	r2,40(sp)
 100a384:	dfc01215 	stw	ra,72(sp)
 100a388:	df001115 	stw	fp,68(sp)
 100a38c:	ddc01015 	stw	r23,64(sp)
 100a390:	dec00915 	stw	sp,36(sp)
 100a394:	dec00b15 	stw	sp,44(sp)
 100a398:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100a39c:	d8c00f17 	ldw	r3,60(sp)
 100a3a0:	18800017 	ldw	r2,0(r3)
 100a3a4:	00c040f4 	movhi	r3,259
 100a3a8:	18cf2704 	addi	r3,r3,15516
 100a3ac:	10bffd04 	addi	r2,r2,-12
 100a3b0:	d8800e15 	stw	r2,56(sp)
 100a3b4:	10c0071e 	bne	r2,r3,100a3d4 <_ZNSsD2Ev+0x80>
 100a3b8:	d9000104 	addi	r4,sp,4
 100a3bc:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100a3c0:	dfc01217 	ldw	ra,72(sp)
 100a3c4:	df001117 	ldw	fp,68(sp)
 100a3c8:	ddc01017 	ldw	r23,64(sp)
 100a3cc:	dec01304 	addi	sp,sp,76
 100a3d0:	f800283a 	ret
 100a3d4:	00800044 	movi	r2,1
 100a3d8:	d8800215 	stw	r2,8(sp)
 100a3dc:	d8800e17 	ldw	r2,56(sp)
 100a3e0:	017fffc4 	movi	r5,-1
 100a3e4:	11000204 	addi	r4,r2,8
 100a3e8:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100a3ec:	00bff216 	blt	zero,r2,100a3b8 <_ZNSsD2Ev+0x64>
 100a3f0:	d9000e17 	ldw	r4,56(sp)
 100a3f4:	d80b883a 	mov	r5,sp
 100a3f8:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100a3fc:	003fee06 	br	100a3b8 <_ZNSsD2Ev+0x64>
 100a400:	d9000317 	ldw	r4,12(sp)
 100a404:	00bfffc4 	movi	r2,-1
 100a408:	d8800215 	stw	r2,8(sp)
 100a40c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

0100a410 <_ZNSs9_M_mutateEmmm>:
 100a410:	deffe704 	addi	sp,sp,-100
 100a414:	00804074 	movhi	r2,257
 100a418:	10b3a604 	addi	r2,r2,-12648
 100a41c:	00c040b4 	movhi	r3,258
 100a420:	18d1a1c4 	addi	r3,r3,18055
 100a424:	d8800715 	stw	r2,28(sp)
 100a428:	d9001215 	stw	r4,72(sp)
 100a42c:	00804074 	movhi	r2,257
 100a430:	10a98e04 	addi	r2,r2,-22984
 100a434:	d9000104 	addi	r4,sp,4
 100a438:	d8c00815 	stw	r3,32(sp)
 100a43c:	d8800a15 	stw	r2,40(sp)
 100a440:	d9801415 	stw	r6,80(sp)
 100a444:	d9401315 	stw	r5,76(sp)
 100a448:	d9c01515 	stw	r7,84(sp)
 100a44c:	dfc01815 	stw	ra,96(sp)
 100a450:	df001715 	stw	fp,92(sp)
 100a454:	ddc01615 	stw	r23,88(sp)
 100a458:	dec00915 	stw	sp,36(sp)
 100a45c:	dec00b15 	stw	sp,44(sp)
 100a460:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100a464:	d8801217 	ldw	r2,72(sp)
 100a468:	d9c01517 	ldw	r7,84(sp)
 100a46c:	11800017 	ldw	r6,0(r2)
 100a470:	313ffd04 	addi	r4,r6,-12
 100a474:	20800017 	ldw	r2,0(r4)
 100a478:	21400117 	ldw	r5,4(r4)
 100a47c:	11c7883a 	add	r3,r2,r7
 100a480:	d9c01317 	ldw	r7,76(sp)
 100a484:	11c5c83a 	sub	r2,r2,r7
 100a488:	d9c01417 	ldw	r7,80(sp)
 100a48c:	19c7c83a 	sub	r3,r3,r7
 100a490:	11c5c83a 	sub	r2,r2,r7
 100a494:	d8c01115 	stw	r3,68(sp)
 100a498:	d8801015 	stw	r2,64(sp)
 100a49c:	28c00236 	bltu	r5,r3,100a4a8 <_ZNSs9_M_mutateEmmm+0x98>
 100a4a0:	20800217 	ldw	r2,8(r4)
 100a4a4:	0080240e 	bge	zero,r2,100a538 <_ZNSs9_M_mutateEmmm+0x128>
 100a4a8:	00800044 	movi	r2,1
 100a4ac:	d8800215 	stw	r2,8(sp)
 100a4b0:	d9001117 	ldw	r4,68(sp)
 100a4b4:	d80d883a 	mov	r6,sp
 100a4b8:	10083500 	call	1008350 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
 100a4bc:	d8c01317 	ldw	r3,76(sp)
 100a4c0:	d8800f15 	stw	r2,60(sp)
 100a4c4:	18003c1e 	bne	r3,zero,100a5b8 <_ZNSs9_M_mutateEmmm+0x1a8>
 100a4c8:	d8c01017 	ldw	r3,64(sp)
 100a4cc:	1800291e 	bne	r3,zero,100a574 <_ZNSs9_M_mutateEmmm+0x164>
 100a4d0:	d8c01217 	ldw	r3,72(sp)
 100a4d4:	18800017 	ldw	r2,0(r3)
 100a4d8:	00c040f4 	movhi	r3,259
 100a4dc:	18cf2704 	addi	r3,r3,15516
 100a4e0:	10bffd04 	addi	r2,r2,-12
 100a4e4:	d8800e15 	stw	r2,56(sp)
 100a4e8:	10c0481e 	bne	r2,r3,100a60c <_ZNSs9_M_mutateEmmm+0x1fc>
 100a4ec:	d9c00f17 	ldw	r7,60(sp)
 100a4f0:	d8c01217 	ldw	r3,72(sp)
 100a4f4:	38800304 	addi	r2,r7,12
 100a4f8:	18800015 	stw	r2,0(r3)
 100a4fc:	d9401217 	ldw	r5,72(sp)
 100a500:	d9c01117 	ldw	r7,68(sp)
 100a504:	d9000104 	addi	r4,sp,4
 100a508:	28800017 	ldw	r2,0(r5)
 100a50c:	10bffd04 	addi	r2,r2,-12
 100a510:	11c7883a 	add	r3,r2,r7
 100a514:	10000215 	stw	zero,8(r2)
 100a518:	11c00015 	stw	r7,0(r2)
 100a51c:	18000305 	stb	zero,12(r3)
 100a520:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100a524:	dfc01817 	ldw	ra,96(sp)
 100a528:	df001717 	ldw	fp,92(sp)
 100a52c:	ddc01617 	ldw	r23,88(sp)
 100a530:	dec01904 	addi	sp,sp,100
 100a534:	f800283a 	ret
 100a538:	d9001017 	ldw	r4,64(sp)
 100a53c:	203fef26 	beq	r4,zero,100a4fc <_ZNSs9_M_mutateEmmm+0xec>
 100a540:	d9001517 	ldw	r4,84(sp)
 100a544:	d9401417 	ldw	r5,80(sp)
 100a548:	217fec26 	beq	r4,r5,100a4fc <_ZNSs9_M_mutateEmmm+0xec>
 100a54c:	d9c01317 	ldw	r7,76(sp)
 100a550:	00800044 	movi	r2,1
 100a554:	31c7883a 	add	r3,r6,r7
 100a558:	194b883a 	add	r5,r3,r5
 100a55c:	1909883a 	add	r4,r3,r4
 100a560:	d8c01017 	ldw	r3,64(sp)
 100a564:	1880261e 	bne	r3,r2,100a600 <_ZNSs9_M_mutateEmmm+0x1f0>
 100a568:	28800003 	ldbu	r2,0(r5)
 100a56c:	20800005 	stb	r2,0(r4)
 100a570:	003fe206 	br	100a4fc <_ZNSs9_M_mutateEmmm+0xec>
 100a574:	d9001217 	ldw	r4,72(sp)
 100a578:	d9400f17 	ldw	r5,60(sp)
 100a57c:	d9c01317 	ldw	r7,76(sp)
 100a580:	20800017 	ldw	r2,0(r4)
 100a584:	28c00304 	addi	r3,r5,12
 100a588:	19c7883a 	add	r3,r3,r7
 100a58c:	3885883a 	add	r2,r7,r2
 100a590:	d9401517 	ldw	r5,84(sp)
 100a594:	d9c01417 	ldw	r7,80(sp)
 100a598:	1949883a 	add	r4,r3,r5
 100a59c:	11cb883a 	add	r5,r2,r7
 100a5a0:	d8801017 	ldw	r2,64(sp)
 100a5a4:	00c00044 	movi	r3,1
 100a5a8:	10c00d26 	beq	r2,r3,100a5e0 <_ZNSs9_M_mutateEmmm+0x1d0>
 100a5ac:	d9801017 	ldw	r6,64(sp)
 100a5b0:	100eb6c0 	call	100eb6c <memcpy>
 100a5b4:	003fc606 	br	100a4d0 <_ZNSs9_M_mutateEmmm+0xc0>
 100a5b8:	d9c01217 	ldw	r7,72(sp)
 100a5bc:	11000304 	addi	r4,r2,12
 100a5c0:	00800044 	movi	r2,1
 100a5c4:	39400017 	ldw	r5,0(r7)
 100a5c8:	18800826 	beq	r3,r2,100a5ec <_ZNSs9_M_mutateEmmm+0x1dc>
 100a5cc:	d9801317 	ldw	r6,76(sp)
 100a5d0:	100eb6c0 	call	100eb6c <memcpy>
 100a5d4:	d8c01017 	ldw	r3,64(sp)
 100a5d8:	183fbd26 	beq	r3,zero,100a4d0 <_ZNSs9_M_mutateEmmm+0xc0>
 100a5dc:	003fe506 	br	100a574 <_ZNSs9_M_mutateEmmm+0x164>
 100a5e0:	28800003 	ldbu	r2,0(r5)
 100a5e4:	20800005 	stb	r2,0(r4)
 100a5e8:	003fb906 	br	100a4d0 <_ZNSs9_M_mutateEmmm+0xc0>
 100a5ec:	28800003 	ldbu	r2,0(r5)
 100a5f0:	20800005 	stb	r2,0(r4)
 100a5f4:	d8c01017 	ldw	r3,64(sp)
 100a5f8:	183fb526 	beq	r3,zero,100a4d0 <_ZNSs9_M_mutateEmmm+0xc0>
 100a5fc:	003fdd06 	br	100a574 <_ZNSs9_M_mutateEmmm+0x164>
 100a600:	d9801017 	ldw	r6,64(sp)
 100a604:	100ec0c0 	call	100ec0c <memmove>
 100a608:	003fbc06 	br	100a4fc <_ZNSs9_M_mutateEmmm+0xec>
 100a60c:	d9400e17 	ldw	r5,56(sp)
 100a610:	00800044 	movi	r2,1
 100a614:	d8800215 	stw	r2,8(sp)
 100a618:	29000204 	addi	r4,r5,8
 100a61c:	017fffc4 	movi	r5,-1
 100a620:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100a624:	00bfb116 	blt	zero,r2,100a4ec <_ZNSs9_M_mutateEmmm+0xdc>
 100a628:	d9000e17 	ldw	r4,56(sp)
 100a62c:	d80b883a 	mov	r5,sp
 100a630:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100a634:	003fad06 	br	100a4ec <_ZNSs9_M_mutateEmmm+0xdc>
 100a638:	d9000317 	ldw	r4,12(sp)
 100a63c:	00bfffc4 	movi	r2,-1
 100a640:	d8800215 	stw	r2,8(sp)
 100a644:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>

0100a648 <_ZNSs15_M_replace_safeEmmPKcm>:
 100a648:	defffb04 	addi	sp,sp,-20
 100a64c:	dc000015 	stw	r16,0(sp)
 100a650:	dc000517 	ldw	r16,20(sp)
 100a654:	dcc00315 	stw	r19,12(sp)
 100a658:	3827883a 	mov	r19,r7
 100a65c:	800f883a 	mov	r7,r16
 100a660:	dc800215 	stw	r18,8(sp)
 100a664:	dc400115 	stw	r17,4(sp)
 100a668:	dfc00415 	stw	ra,16(sp)
 100a66c:	2025883a 	mov	r18,r4
 100a670:	2823883a 	mov	r17,r5
 100a674:	100a4100 	call	100a410 <_ZNSs9_M_mutateEmmm>
 100a678:	80000826 	beq	r16,zero,100a69c <_ZNSs15_M_replace_safeEmmPKcm+0x54>
 100a67c:	90800017 	ldw	r2,0(r18)
 100a680:	980b883a 	mov	r5,r19
 100a684:	800d883a 	mov	r6,r16
 100a688:	8887883a 	add	r3,r17,r2
 100a68c:	00800044 	movi	r2,1
 100a690:	1809883a 	mov	r4,r3
 100a694:	80800926 	beq	r16,r2,100a6bc <_ZNSs15_M_replace_safeEmmPKcm+0x74>
 100a698:	100eb6c0 	call	100eb6c <memcpy>
 100a69c:	9005883a 	mov	r2,r18
 100a6a0:	dfc00417 	ldw	ra,16(sp)
 100a6a4:	dcc00317 	ldw	r19,12(sp)
 100a6a8:	dc800217 	ldw	r18,8(sp)
 100a6ac:	dc400117 	ldw	r17,4(sp)
 100a6b0:	dc000017 	ldw	r16,0(sp)
 100a6b4:	dec00504 	addi	sp,sp,20
 100a6b8:	f800283a 	ret
 100a6bc:	98800003 	ldbu	r2,0(r19)
 100a6c0:	18800005 	stb	r2,0(r3)
 100a6c4:	9005883a 	mov	r2,r18
 100a6c8:	dfc00417 	ldw	ra,16(sp)
 100a6cc:	dcc00317 	ldw	r19,12(sp)
 100a6d0:	dc800217 	ldw	r18,8(sp)
 100a6d4:	dc400117 	ldw	r17,4(sp)
 100a6d8:	dc000017 	ldw	r16,0(sp)
 100a6dc:	dec00504 	addi	sp,sp,20
 100a6e0:	f800283a 	ret

0100a6e4 <_ZNSs6assignEPKcm>:
 100a6e4:	defffc04 	addi	sp,sp,-16
 100a6e8:	00900034 	movhi	r2,16384
 100a6ec:	10bfff04 	addi	r2,r2,-4
 100a6f0:	dc400215 	stw	r17,8(sp)
 100a6f4:	dc000115 	stw	r16,4(sp)
 100a6f8:	dfc00315 	stw	ra,12(sp)
 100a6fc:	3023883a 	mov	r17,r6
 100a700:	2021883a 	mov	r16,r4
 100a704:	280f883a 	mov	r7,r5
 100a708:	11803136 	bltu	r2,r6,100a7d0 <_ZNSs6assignEPKcm+0xec>
 100a70c:	21000017 	ldw	r4,0(r4)
 100a710:	29000c2e 	bgeu	r5,r4,100a744 <_ZNSs6assignEPKcm+0x60>
 100a714:	21bffd17 	ldw	r6,-12(r4)
 100a718:	000b883a 	mov	r5,zero
 100a71c:	8009883a 	mov	r4,r16
 100a720:	dc400015 	stw	r17,0(sp)
 100a724:	100a6480 	call	100a648 <_ZNSs15_M_replace_safeEmmPKcm>
 100a728:	1021883a 	mov	r16,r2
 100a72c:	8005883a 	mov	r2,r16
 100a730:	dfc00317 	ldw	ra,12(sp)
 100a734:	dc400217 	ldw	r17,8(sp)
 100a738:	dc000117 	ldw	r16,4(sp)
 100a73c:	dec00404 	addi	sp,sp,16
 100a740:	f800283a 	ret
 100a744:	20bffd17 	ldw	r2,-12(r4)
 100a748:	20fffd04 	addi	r3,r4,-12
 100a74c:	2085883a 	add	r2,r4,r2
 100a750:	117ff036 	bltu	r2,r5,100a714 <_ZNSs6assignEPKcm+0x30>
 100a754:	18800217 	ldw	r2,8(r3)
 100a758:	00bfee16 	blt	zero,r2,100a714 <_ZNSs6assignEPKcm+0x30>
 100a75c:	2905c83a 	sub	r2,r5,r4
 100a760:	11800f36 	bltu	r2,r6,100a7a0 <_ZNSs6assignEPKcm+0xbc>
 100a764:	00800044 	movi	r2,1
 100a768:	88801526 	beq	r17,r2,100a7c0 <_ZNSs6assignEPKcm+0xdc>
 100a76c:	100eb6c0 	call	100eb6c <memcpy>
 100a770:	81000017 	ldw	r4,0(r16)
 100a774:	20bffd04 	addi	r2,r4,-12
 100a778:	1447883a 	add	r3,r2,r17
 100a77c:	10000215 	stw	zero,8(r2)
 100a780:	247ffd15 	stw	r17,-12(r4)
 100a784:	8005883a 	mov	r2,r16
 100a788:	18000305 	stb	zero,12(r3)
 100a78c:	dfc00317 	ldw	ra,12(sp)
 100a790:	dc400217 	ldw	r17,8(sp)
 100a794:	dc000117 	ldw	r16,4(sp)
 100a798:	dec00404 	addi	sp,sp,16
 100a79c:	f800283a 	ret
 100a7a0:	103ff426 	beq	r2,zero,100a774 <_ZNSs6assignEPKcm+0x90>
 100a7a4:	00800044 	movi	r2,1
 100a7a8:	88800526 	beq	r17,r2,100a7c0 <_ZNSs6assignEPKcm+0xdc>
 100a7ac:	380b883a 	mov	r5,r7
 100a7b0:	880d883a 	mov	r6,r17
 100a7b4:	100ec0c0 	call	100ec0c <memmove>
 100a7b8:	81000017 	ldw	r4,0(r16)
 100a7bc:	003fed06 	br	100a774 <_ZNSs6assignEPKcm+0x90>
 100a7c0:	38800003 	ldbu	r2,0(r7)
 100a7c4:	20800005 	stb	r2,0(r4)
 100a7c8:	81000017 	ldw	r4,0(r16)
 100a7cc:	003fe906 	br	100a774 <_ZNSs6assignEPKcm+0x90>
 100a7d0:	010040b4 	movhi	r4,258
 100a7d4:	21153704 	addi	r4,r4,21724
 100a7d8:	100673c0 	call	100673c <_ZSt20__throw_length_errorPKc>

0100a7dc <_ZNSs6assignEPKc>:
 100a7dc:	defffd04 	addi	sp,sp,-12
 100a7e0:	dcc00115 	stw	r19,4(sp)
 100a7e4:	dc400015 	stw	r17,0(sp)
 100a7e8:	dfc00215 	stw	ra,8(sp)
 100a7ec:	2023883a 	mov	r17,r4
 100a7f0:	2809883a 	mov	r4,r5
 100a7f4:	2827883a 	mov	r19,r5
 100a7f8:	100f4040 	call	100f404 <strlen>
 100a7fc:	980b883a 	mov	r5,r19
 100a800:	8809883a 	mov	r4,r17
 100a804:	100d883a 	mov	r6,r2
 100a808:	dfc00217 	ldw	ra,8(sp)
 100a80c:	dcc00117 	ldw	r19,4(sp)
 100a810:	dc400017 	ldw	r17,0(sp)
 100a814:	dec00304 	addi	sp,sp,12
 100a818:	100a6e41 	jmpi	100a6e4 <_ZNSs6assignEPKcm>

0100a81c <_ZNSs6assignERKSsmm>:
 100a81c:	29400017 	ldw	r5,0(r5)
 100a820:	deffff04 	addi	sp,sp,-4
 100a824:	dfc00015 	stw	ra,0(sp)
 100a828:	28bffd17 	ldw	r2,-12(r5)
 100a82c:	11800c36 	bltu	r2,r6,100a860 <_ZNSs6assignERKSsmm+0x44>
 100a830:	1185c83a 	sub	r2,r2,r6
 100a834:	298b883a 	add	r5,r5,r6
 100a838:	11c00436 	bltu	r2,r7,100a84c <_ZNSs6assignERKSsmm+0x30>
 100a83c:	380d883a 	mov	r6,r7
 100a840:	dfc00017 	ldw	ra,0(sp)
 100a844:	dec00104 	addi	sp,sp,4
 100a848:	100a6e41 	jmpi	100a6e4 <_ZNSs6assignEPKcm>
 100a84c:	100f883a 	mov	r7,r2
 100a850:	380d883a 	mov	r6,r7
 100a854:	dfc00017 	ldw	ra,0(sp)
 100a858:	dec00104 	addi	sp,sp,4
 100a85c:	100a6e41 	jmpi	100a6e4 <_ZNSs6assignEPKcm>
 100a860:	010040b4 	movhi	r4,258
 100a864:	21153704 	addi	r4,r4,21724
 100a868:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

0100a86c <_ZNSsaSEPKc>:
 100a86c:	defffd04 	addi	sp,sp,-12
 100a870:	dcc00115 	stw	r19,4(sp)
 100a874:	dc400015 	stw	r17,0(sp)
 100a878:	dfc00215 	stw	ra,8(sp)
 100a87c:	2023883a 	mov	r17,r4
 100a880:	2809883a 	mov	r4,r5
 100a884:	2827883a 	mov	r19,r5
 100a888:	100f4040 	call	100f404 <strlen>
 100a88c:	980b883a 	mov	r5,r19
 100a890:	8809883a 	mov	r4,r17
 100a894:	100d883a 	mov	r6,r2
 100a898:	dfc00217 	ldw	ra,8(sp)
 100a89c:	dcc00117 	ldw	r19,4(sp)
 100a8a0:	dc400017 	ldw	r17,0(sp)
 100a8a4:	dec00304 	addi	sp,sp,12
 100a8a8:	100a6e41 	jmpi	100a6e4 <_ZNSs6assignEPKcm>

0100a8ac <_ZNSs14_M_replace_auxEmmmc>:
 100a8ac:	20800017 	ldw	r2,0(r4)
 100a8b0:	defffb04 	addi	sp,sp,-20
 100a8b4:	dcc00315 	stw	r19,12(sp)
 100a8b8:	10fffd17 	ldw	r3,-12(r2)
 100a8bc:	00900034 	movhi	r2,16384
 100a8c0:	10bfff04 	addi	r2,r2,-4
 100a8c4:	dc800215 	stw	r18,8(sp)
 100a8c8:	1987c83a 	sub	r3,r3,r6
 100a8cc:	10c5c83a 	sub	r2,r2,r3
 100a8d0:	dc400115 	stw	r17,4(sp)
 100a8d4:	dc000015 	stw	r16,0(sp)
 100a8d8:	dfc00415 	stw	ra,16(sp)
 100a8dc:	2023883a 	mov	r17,r4
 100a8e0:	3821883a 	mov	r16,r7
 100a8e4:	2827883a 	mov	r19,r5
 100a8e8:	dc800503 	ldbu	r18,20(sp)
 100a8ec:	11c01f36 	bltu	r2,r7,100a96c <_ZNSs14_M_replace_auxEmmmc+0xc0>
 100a8f0:	100a4100 	call	100a410 <_ZNSs9_M_mutateEmmm>
 100a8f4:	80000c26 	beq	r16,zero,100a928 <_ZNSs14_M_replace_auxEmmmc+0x7c>
 100a8f8:	88800017 	ldw	r2,0(r17)
 100a8fc:	90c03fcc 	andi	r3,r18,255
 100a900:	18c0201c 	xori	r3,r3,128
 100a904:	9889883a 	add	r4,r19,r2
 100a908:	00800044 	movi	r2,1
 100a90c:	18ffe004 	addi	r3,r3,-128
 100a910:	80800d26 	beq	r16,r2,100a948 <_ZNSs14_M_replace_auxEmmmc+0x9c>
 100a914:	19403fcc 	andi	r5,r3,255
 100a918:	2940201c 	xori	r5,r5,128
 100a91c:	297fe004 	addi	r5,r5,-128
 100a920:	800d883a 	mov	r6,r16
 100a924:	100ecec0 	call	100ecec <memset>
 100a928:	8805883a 	mov	r2,r17
 100a92c:	dfc00417 	ldw	ra,16(sp)
 100a930:	dcc00317 	ldw	r19,12(sp)
 100a934:	dc800217 	ldw	r18,8(sp)
 100a938:	dc400117 	ldw	r17,4(sp)
 100a93c:	dc000017 	ldw	r16,0(sp)
 100a940:	dec00504 	addi	sp,sp,20
 100a944:	f800283a 	ret
 100a948:	8805883a 	mov	r2,r17
 100a94c:	20c00005 	stb	r3,0(r4)
 100a950:	dfc00417 	ldw	ra,16(sp)
 100a954:	dcc00317 	ldw	r19,12(sp)
 100a958:	dc800217 	ldw	r18,8(sp)
 100a95c:	dc400117 	ldw	r17,4(sp)
 100a960:	dc000017 	ldw	r16,0(sp)
 100a964:	dec00504 	addi	sp,sp,20
 100a968:	f800283a 	ret
 100a96c:	010040b4 	movhi	r4,258
 100a970:	21153d04 	addi	r4,r4,21748
 100a974:	100673c0 	call	100673c <_ZSt20__throw_length_errorPKc>

0100a978 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_mc>:
 100a978:	20800017 	ldw	r2,0(r4)
 100a97c:	d8c00007 	ldb	r3,0(sp)
 100a980:	314dc83a 	sub	r6,r6,r5
 100a984:	288bc83a 	sub	r5,r5,r2
 100a988:	d8c00015 	stw	r3,0(sp)
 100a98c:	100a8ac1 	jmpi	100a8ac <_ZNSs14_M_replace_auxEmmmc>

0100a990 <_ZNSs7replaceEmmmc>:
 100a990:	20800017 	ldw	r2,0(r4)
 100a994:	deffff04 	addi	sp,sp,-4
 100a998:	dfc00015 	stw	ra,0(sp)
 100a99c:	10fffd17 	ldw	r3,-12(r2)
 100a9a0:	d8800103 	ldbu	r2,4(sp)
 100a9a4:	19401136 	bltu	r3,r5,100a9ec <_ZNSs7replaceEmmmc+0x5c>
 100a9a8:	1947c83a 	sub	r3,r3,r5
 100a9ac:	19800736 	bltu	r3,r6,100a9cc <_ZNSs7replaceEmmmc+0x3c>
 100a9b0:	10803fcc 	andi	r2,r2,255
 100a9b4:	1080201c 	xori	r2,r2,128
 100a9b8:	10bfe004 	addi	r2,r2,-128
 100a9bc:	d8800115 	stw	r2,4(sp)
 100a9c0:	dfc00017 	ldw	ra,0(sp)
 100a9c4:	dec00104 	addi	sp,sp,4
 100a9c8:	100a8ac1 	jmpi	100a8ac <_ZNSs14_M_replace_auxEmmmc>
 100a9cc:	10803fcc 	andi	r2,r2,255
 100a9d0:	1080201c 	xori	r2,r2,128
 100a9d4:	10bfe004 	addi	r2,r2,-128
 100a9d8:	180d883a 	mov	r6,r3
 100a9dc:	d8800115 	stw	r2,4(sp)
 100a9e0:	dfc00017 	ldw	ra,0(sp)
 100a9e4:	dec00104 	addi	sp,sp,4
 100a9e8:	100a8ac1 	jmpi	100a8ac <_ZNSs14_M_replace_auxEmmmc>
 100a9ec:	010040b4 	movhi	r4,258
 100a9f0:	21154504 	addi	r4,r4,21780
 100a9f4:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

0100a9f8 <_ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc>:
 100a9f8:	20800017 	ldw	r2,0(r4)
 100a9fc:	defffc04 	addi	sp,sp,-16
 100aa00:	30c03fcc 	andi	r3,r6,255
 100aa04:	dc000115 	stw	r16,4(sp)
 100aa08:	18c0201c 	xori	r3,r3,128
 100aa0c:	28a1c83a 	sub	r16,r5,r2
 100aa10:	dc400215 	stw	r17,8(sp)
 100aa14:	18ffe004 	addi	r3,r3,-128
 100aa18:	2023883a 	mov	r17,r4
 100aa1c:	01c00044 	movi	r7,1
 100aa20:	800b883a 	mov	r5,r16
 100aa24:	000d883a 	mov	r6,zero
 100aa28:	d8c00015 	stw	r3,0(sp)
 100aa2c:	dfc00315 	stw	ra,12(sp)
 100aa30:	100a8ac0 	call	100a8ac <_ZNSs14_M_replace_auxEmmmc>
 100aa34:	88800017 	ldw	r2,0(r17)
 100aa38:	00ffffc4 	movi	r3,-1
 100aa3c:	10ffff15 	stw	r3,-4(r2)
 100aa40:	1405883a 	add	r2,r2,r16
 100aa44:	dfc00317 	ldw	ra,12(sp)
 100aa48:	dc400217 	ldw	r17,8(sp)
 100aa4c:	dc000117 	ldw	r16,4(sp)
 100aa50:	dec00404 	addi	sp,sp,16
 100aa54:	f800283a 	ret

0100aa58 <_ZNSs6insertEmmc>:
 100aa58:	20c00017 	ldw	r3,0(r4)
 100aa5c:	defffe04 	addi	sp,sp,-8
 100aa60:	dfc00115 	stw	ra,4(sp)
 100aa64:	18bffd17 	ldw	r2,-12(r3)
 100aa68:	11400a36 	bltu	r2,r5,100aa94 <_ZNSs6insertEmmc+0x3c>
 100aa6c:	38803fcc 	andi	r2,r7,255
 100aa70:	1080201c 	xori	r2,r2,128
 100aa74:	300f883a 	mov	r7,r6
 100aa78:	10bfe004 	addi	r2,r2,-128
 100aa7c:	000d883a 	mov	r6,zero
 100aa80:	d8800015 	stw	r2,0(sp)
 100aa84:	100a8ac0 	call	100a8ac <_ZNSs14_M_replace_auxEmmmc>
 100aa88:	dfc00117 	ldw	ra,4(sp)
 100aa8c:	dec00204 	addi	sp,sp,8
 100aa90:	f800283a 	ret
 100aa94:	010040b4 	movhi	r4,258
 100aa98:	21154b04 	addi	r4,r4,21804
 100aa9c:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

0100aaa0 <_ZNSs6assignEmc>:
 100aaa0:	20800017 	ldw	r2,0(r4)
 100aaa4:	30c03fcc 	andi	r3,r6,255
 100aaa8:	18c0201c 	xori	r3,r3,128
 100aaac:	11bffd17 	ldw	r6,-12(r2)
 100aab0:	defffe04 	addi	sp,sp,-8
 100aab4:	280f883a 	mov	r7,r5
 100aab8:	18ffe004 	addi	r3,r3,-128
 100aabc:	000b883a 	mov	r5,zero
 100aac0:	dfc00115 	stw	ra,4(sp)
 100aac4:	d8c00015 	stw	r3,0(sp)
 100aac8:	100a8ac0 	call	100a8ac <_ZNSs14_M_replace_auxEmmmc>
 100aacc:	dfc00117 	ldw	ra,4(sp)
 100aad0:	dec00204 	addi	sp,sp,8
 100aad4:	f800283a 	ret

0100aad8 <_ZNSsaSEc>:
 100aad8:	20800017 	ldw	r2,0(r4)
 100aadc:	28c03fcc 	andi	r3,r5,255
 100aae0:	18c0201c 	xori	r3,r3,128
 100aae4:	11bffd17 	ldw	r6,-12(r2)
 100aae8:	defffd04 	addi	sp,sp,-12
 100aaec:	18ffe004 	addi	r3,r3,-128
 100aaf0:	01c00044 	movi	r7,1
 100aaf4:	000b883a 	mov	r5,zero
 100aaf8:	dc400115 	stw	r17,4(sp)
 100aafc:	dfc00215 	stw	ra,8(sp)
 100ab00:	2023883a 	mov	r17,r4
 100ab04:	d8c00015 	stw	r3,0(sp)
 100ab08:	100a8ac0 	call	100a8ac <_ZNSs14_M_replace_auxEmmmc>
 100ab0c:	8805883a 	mov	r2,r17
 100ab10:	dfc00217 	ldw	ra,8(sp)
 100ab14:	dc400117 	ldw	r17,4(sp)
 100ab18:	dec00304 	addi	sp,sp,12
 100ab1c:	f800283a 	ret

0100ab20 <_ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEmc>:
 100ab20:	20800017 	ldw	r2,0(r4)
 100ab24:	3a003fcc 	andi	r8,r7,255
 100ab28:	4200201c 	xori	r8,r8,128
 100ab2c:	defffe04 	addi	sp,sp,-8
 100ab30:	423fe004 	addi	r8,r8,-128
 100ab34:	300f883a 	mov	r7,r6
 100ab38:	288bc83a 	sub	r5,r5,r2
 100ab3c:	000d883a 	mov	r6,zero
 100ab40:	dfc00115 	stw	ra,4(sp)
 100ab44:	da000015 	stw	r8,0(sp)
 100ab48:	100a8ac0 	call	100a8ac <_ZNSs14_M_replace_auxEmmmc>
 100ab4c:	dfc00117 	ldw	ra,4(sp)
 100ab50:	dec00204 	addi	sp,sp,8
 100ab54:	f800283a 	ret

0100ab58 <_ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_>:
 100ab58:	20800017 	ldw	r2,0(r4)
 100ab5c:	defffd04 	addi	sp,sp,-12
 100ab60:	dc400015 	stw	r17,0(sp)
 100ab64:	28a3c83a 	sub	r17,r5,r2
 100ab68:	dc800115 	stw	r18,4(sp)
 100ab6c:	314dc83a 	sub	r6,r6,r5
 100ab70:	2025883a 	mov	r18,r4
 100ab74:	880b883a 	mov	r5,r17
 100ab78:	000f883a 	mov	r7,zero
 100ab7c:	dfc00215 	stw	ra,8(sp)
 100ab80:	100a4100 	call	100a410 <_ZNSs9_M_mutateEmmm>
 100ab84:	90800017 	ldw	r2,0(r18)
 100ab88:	00ffffc4 	movi	r3,-1
 100ab8c:	10ffff15 	stw	r3,-4(r2)
 100ab90:	1445883a 	add	r2,r2,r17
 100ab94:	dfc00217 	ldw	ra,8(sp)
 100ab98:	dc800117 	ldw	r18,4(sp)
 100ab9c:	dc400017 	ldw	r17,0(sp)
 100aba0:	dec00304 	addi	sp,sp,12
 100aba4:	f800283a 	ret

0100aba8 <_ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE>:
 100aba8:	20800017 	ldw	r2,0(r4)
 100abac:	defffd04 	addi	sp,sp,-12
 100abb0:	dc000015 	stw	r16,0(sp)
 100abb4:	28a1c83a 	sub	r16,r5,r2
 100abb8:	dc400115 	stw	r17,4(sp)
 100abbc:	01800044 	movi	r6,1
 100abc0:	2023883a 	mov	r17,r4
 100abc4:	000f883a 	mov	r7,zero
 100abc8:	800b883a 	mov	r5,r16
 100abcc:	dfc00215 	stw	ra,8(sp)
 100abd0:	100a4100 	call	100a410 <_ZNSs9_M_mutateEmmm>
 100abd4:	88800017 	ldw	r2,0(r17)
 100abd8:	00ffffc4 	movi	r3,-1
 100abdc:	10ffff15 	stw	r3,-4(r2)
 100abe0:	1405883a 	add	r2,r2,r16
 100abe4:	dfc00217 	ldw	ra,8(sp)
 100abe8:	dc400117 	ldw	r17,4(sp)
 100abec:	dc000017 	ldw	r16,0(sp)
 100abf0:	dec00304 	addi	sp,sp,12
 100abf4:	f800283a 	ret

0100abf8 <_ZNSs5eraseEmm>:
 100abf8:	20800017 	ldw	r2,0(r4)
 100abfc:	defffe04 	addi	sp,sp,-8
 100ac00:	dc000015 	stw	r16,0(sp)
 100ac04:	10bffd17 	ldw	r2,-12(r2)
 100ac08:	dfc00115 	stw	ra,4(sp)
 100ac0c:	2021883a 	mov	r16,r4
 100ac10:	11401136 	bltu	r2,r5,100ac58 <_ZNSs5eraseEmm+0x60>
 100ac14:	1145c83a 	sub	r2,r2,r5
 100ac18:	11800736 	bltu	r2,r6,100ac38 <_ZNSs5eraseEmm+0x40>
 100ac1c:	000f883a 	mov	r7,zero
 100ac20:	100a4100 	call	100a410 <_ZNSs9_M_mutateEmmm>
 100ac24:	8005883a 	mov	r2,r16
 100ac28:	dfc00117 	ldw	ra,4(sp)
 100ac2c:	dc000017 	ldw	r16,0(sp)
 100ac30:	dec00204 	addi	sp,sp,8
 100ac34:	f800283a 	ret
 100ac38:	100d883a 	mov	r6,r2
 100ac3c:	000f883a 	mov	r7,zero
 100ac40:	100a4100 	call	100a410 <_ZNSs9_M_mutateEmmm>
 100ac44:	8005883a 	mov	r2,r16
 100ac48:	dfc00117 	ldw	ra,4(sp)
 100ac4c:	dc000017 	ldw	r16,0(sp)
 100ac50:	dec00204 	addi	sp,sp,8
 100ac54:	f800283a 	ret
 100ac58:	010040b4 	movhi	r4,258
 100ac5c:	21155104 	addi	r4,r4,21828
 100ac60:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

0100ac64 <_ZNSs6insertEmPKcm>:
 100ac64:	defff904 	addi	sp,sp,-28
 100ac68:	dc000115 	stw	r16,4(sp)
 100ac6c:	24000017 	ldw	r16,0(r4)
 100ac70:	dd000515 	stw	r20,20(sp)
 100ac74:	dcc00415 	stw	r19,16(sp)
 100ac78:	80fffd17 	ldw	r3,-12(r16)
 100ac7c:	dc800315 	stw	r18,12(sp)
 100ac80:	dc400215 	stw	r17,8(sp)
 100ac84:	dfc00615 	stw	ra,24(sp)
 100ac88:	3023883a 	mov	r17,r6
 100ac8c:	2029883a 	mov	r20,r4
 100ac90:	2825883a 	mov	r18,r5
 100ac94:	3827883a 	mov	r19,r7
 100ac98:	81bffd04 	addi	r6,r16,-12
 100ac9c:	19403d36 	bltu	r3,r5,100ad94 <_ZNSs6insertEmPKcm+0x130>
 100aca0:	00900034 	movhi	r2,16384
 100aca4:	10bfff04 	addi	r2,r2,-4
 100aca8:	10c5c83a 	sub	r2,r2,r3
 100acac:	11c03c36 	bltu	r2,r7,100ada0 <_ZNSs6insertEmPKcm+0x13c>
 100acb0:	8c00102e 	bgeu	r17,r16,100acf4 <_ZNSs6insertEmPKcm+0x90>
 100acb4:	a009883a 	mov	r4,r20
 100acb8:	900b883a 	mov	r5,r18
 100acbc:	880f883a 	mov	r7,r17
 100acc0:	000d883a 	mov	r6,zero
 100acc4:	dcc00015 	stw	r19,0(sp)
 100acc8:	100a6480 	call	100a648 <_ZNSs15_M_replace_safeEmmPKcm>
 100accc:	1029883a 	mov	r20,r2
 100acd0:	a005883a 	mov	r2,r20
 100acd4:	dfc00617 	ldw	ra,24(sp)
 100acd8:	dd000517 	ldw	r20,20(sp)
 100acdc:	dcc00417 	ldw	r19,16(sp)
 100ace0:	dc800317 	ldw	r18,12(sp)
 100ace4:	dc400217 	ldw	r17,8(sp)
 100ace8:	dc000117 	ldw	r16,4(sp)
 100acec:	dec00704 	addi	sp,sp,28
 100acf0:	f800283a 	ret
 100acf4:	80c5883a 	add	r2,r16,r3
 100acf8:	147fee36 	bltu	r2,r17,100acb4 <_ZNSs6insertEmPKcm+0x50>
 100acfc:	30800217 	ldw	r2,8(r6)
 100ad00:	00bfec16 	blt	zero,r2,100acb4 <_ZNSs6insertEmPKcm+0x50>
 100ad04:	000d883a 	mov	r6,zero
 100ad08:	100a4100 	call	100a410 <_ZNSs9_M_mutateEmmm>
 100ad0c:	a0c00017 	ldw	r3,0(r20)
 100ad10:	8c05c83a 	sub	r2,r17,r16
 100ad14:	188b883a 	add	r5,r3,r2
 100ad18:	1ca1883a 	add	r16,r3,r18
 100ad1c:	2cc7883a 	add	r3,r5,r19
 100ad20:	80c0062e 	bgeu	r16,r3,100ad3c <_ZNSs6insertEmPKcm+0xd8>
 100ad24:	2c000e36 	bltu	r5,r16,100ad60 <_ZNSs6insertEmPKcm+0xfc>
 100ad28:	00800044 	movi	r2,1
 100ad2c:	98801f1e 	bne	r19,r2,100adac <_ZNSs6insertEmPKcm+0x148>
 100ad30:	18800003 	ldbu	r2,0(r3)
 100ad34:	80800005 	stb	r2,0(r16)
 100ad38:	003fe506 	br	100acd0 <_ZNSs6insertEmPKcm+0x6c>
 100ad3c:	00800044 	movi	r2,1
 100ad40:	9880031e 	bne	r19,r2,100ad50 <_ZNSs6insertEmPKcm+0xec>
 100ad44:	28800003 	ldbu	r2,0(r5)
 100ad48:	80800005 	stb	r2,0(r16)
 100ad4c:	003fe006 	br	100acd0 <_ZNSs6insertEmPKcm+0x6c>
 100ad50:	8009883a 	mov	r4,r16
 100ad54:	980d883a 	mov	r6,r19
 100ad58:	100eb6c0 	call	100eb6c <memcpy>
 100ad5c:	003fdc06 	br	100acd0 <_ZNSs6insertEmPKcm+0x6c>
 100ad60:	8163c83a 	sub	r17,r16,r5
 100ad64:	00800044 	movi	r2,1
 100ad68:	8880171e 	bne	r17,r2,100adc8 <_ZNSs6insertEmPKcm+0x164>
 100ad6c:	28800003 	ldbu	r2,0(r5)
 100ad70:	80800005 	stb	r2,0(r16)
 100ad74:	9c4dc83a 	sub	r6,r19,r17
 100ad78:	00800044 	movi	r2,1
 100ad7c:	84cb883a 	add	r5,r16,r19
 100ad80:	8449883a 	add	r4,r16,r17
 100ad84:	30800e1e 	bne	r6,r2,100adc0 <_ZNSs6insertEmPKcm+0x15c>
 100ad88:	28800003 	ldbu	r2,0(r5)
 100ad8c:	20800005 	stb	r2,0(r4)
 100ad90:	003fcf06 	br	100acd0 <_ZNSs6insertEmPKcm+0x6c>
 100ad94:	010040b4 	movhi	r4,258
 100ad98:	21154b04 	addi	r4,r4,21804
 100ad9c:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>
 100ada0:	010040b4 	movhi	r4,258
 100ada4:	21154b04 	addi	r4,r4,21804
 100ada8:	100673c0 	call	100673c <_ZSt20__throw_length_errorPKc>
 100adac:	8009883a 	mov	r4,r16
 100adb0:	180b883a 	mov	r5,r3
 100adb4:	980d883a 	mov	r6,r19
 100adb8:	100eb6c0 	call	100eb6c <memcpy>
 100adbc:	003fc406 	br	100acd0 <_ZNSs6insertEmPKcm+0x6c>
 100adc0:	100eb6c0 	call	100eb6c <memcpy>
 100adc4:	003fc206 	br	100acd0 <_ZNSs6insertEmPKcm+0x6c>
 100adc8:	8009883a 	mov	r4,r16
 100adcc:	880d883a 	mov	r6,r17
 100add0:	100eb6c0 	call	100eb6c <memcpy>
 100add4:	003fe706 	br	100ad74 <_ZNSs6insertEmPKcm+0x110>

0100add8 <_ZNSs6insertEmPKc>:
 100add8:	defffc04 	addi	sp,sp,-16
 100addc:	dd400215 	stw	r21,8(sp)
 100ade0:	dcc00115 	stw	r19,4(sp)
 100ade4:	dc400015 	stw	r17,0(sp)
 100ade8:	2027883a 	mov	r19,r4
 100adec:	dfc00315 	stw	ra,12(sp)
 100adf0:	3009883a 	mov	r4,r6
 100adf4:	3023883a 	mov	r17,r6
 100adf8:	282b883a 	mov	r21,r5
 100adfc:	100f4040 	call	100f404 <strlen>
 100ae00:	a80b883a 	mov	r5,r21
 100ae04:	9809883a 	mov	r4,r19
 100ae08:	880d883a 	mov	r6,r17
 100ae0c:	100f883a 	mov	r7,r2
 100ae10:	dfc00317 	ldw	ra,12(sp)
 100ae14:	dd400217 	ldw	r21,8(sp)
 100ae18:	dcc00117 	ldw	r19,4(sp)
 100ae1c:	dc400017 	ldw	r17,0(sp)
 100ae20:	dec00404 	addi	sp,sp,16
 100ae24:	100ac641 	jmpi	100ac64 <_ZNSs6insertEmPKcm>

0100ae28 <_ZNSs6insertEmRKSsmm>:
 100ae28:	31800017 	ldw	r6,0(r6)
 100ae2c:	deffff04 	addi	sp,sp,-4
 100ae30:	3805883a 	mov	r2,r7
 100ae34:	30fffd17 	ldw	r3,-12(r6)
 100ae38:	dfc00015 	stw	ra,0(sp)
 100ae3c:	d9c00117 	ldw	r7,4(sp)
 100ae40:	18800a36 	bltu	r3,r2,100ae6c <_ZNSs6insertEmRKSsmm+0x44>
 100ae44:	1887c83a 	sub	r3,r3,r2
 100ae48:	308d883a 	add	r6,r6,r2
 100ae4c:	19c00336 	bltu	r3,r7,100ae5c <_ZNSs6insertEmRKSsmm+0x34>
 100ae50:	dfc00017 	ldw	ra,0(sp)
 100ae54:	dec00104 	addi	sp,sp,4
 100ae58:	100ac641 	jmpi	100ac64 <_ZNSs6insertEmPKcm>
 100ae5c:	180f883a 	mov	r7,r3
 100ae60:	dfc00017 	ldw	ra,0(sp)
 100ae64:	dec00104 	addi	sp,sp,4
 100ae68:	100ac641 	jmpi	100ac64 <_ZNSs6insertEmPKcm>
 100ae6c:	010040b4 	movhi	r4,258
 100ae70:	21154b04 	addi	r4,r4,21804
 100ae74:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

0100ae78 <_ZNSs6insertEmRKSs>:
 100ae78:	31800017 	ldw	r6,0(r6)
 100ae7c:	31fffd17 	ldw	r7,-12(r6)
 100ae80:	100ac641 	jmpi	100ac64 <_ZNSs6insertEmPKcm>

0100ae84 <_ZNSs5clearEv>:
 100ae84:	20800017 	ldw	r2,0(r4)
 100ae88:	000b883a 	mov	r5,zero
 100ae8c:	000f883a 	mov	r7,zero
 100ae90:	11bffd17 	ldw	r6,-12(r2)
 100ae94:	100a4101 	jmpi	100a410 <_ZNSs9_M_mutateEmmm>

0100ae98 <_ZNSs12_M_leak_hardEv>:
 100ae98:	22000017 	ldw	r8,0(r4)
 100ae9c:	defffe04 	addi	sp,sp,-8
 100aea0:	008040f4 	movhi	r2,259
 100aea4:	108f2704 	addi	r2,r2,15516
 100aea8:	40fffd04 	addi	r3,r8,-12
 100aeac:	dc000015 	stw	r16,0(sp)
 100aeb0:	dfc00115 	stw	ra,4(sp)
 100aeb4:	2021883a 	mov	r16,r4
 100aeb8:	18800726 	beq	r3,r2,100aed8 <_ZNSs12_M_leak_hardEv+0x40>
 100aebc:	18800217 	ldw	r2,8(r3)
 100aec0:	000b883a 	mov	r5,zero
 100aec4:	000d883a 	mov	r6,zero
 100aec8:	000f883a 	mov	r7,zero
 100aecc:	00800616 	blt	zero,r2,100aee8 <_ZNSs12_M_leak_hardEv+0x50>
 100aed0:	00bfffc4 	movi	r2,-1
 100aed4:	40bfff15 	stw	r2,-4(r8)
 100aed8:	dfc00117 	ldw	ra,4(sp)
 100aedc:	dc000017 	ldw	r16,0(sp)
 100aee0:	dec00204 	addi	sp,sp,8
 100aee4:	f800283a 	ret
 100aee8:	100a4100 	call	100a410 <_ZNSs9_M_mutateEmmm>
 100aeec:	82000017 	ldw	r8,0(r16)
 100aef0:	003ff706 	br	100aed0 <_ZNSs12_M_leak_hardEv+0x38>

0100aef4 <_ZNSs7_M_leakEv>:
 100aef4:	20800017 	ldw	r2,0(r4)
 100aef8:	10ffff17 	ldw	r3,-4(r2)
 100aefc:	1800010e 	bge	r3,zero,100af04 <_ZNSs7_M_leakEv+0x10>
 100af00:	f800283a 	ret
 100af04:	100ae981 	jmpi	100ae98 <_ZNSs12_M_leak_hardEv>

0100af08 <_ZNSs2atEm>:
 100af08:	20c00017 	ldw	r3,0(r4)
 100af0c:	defffd04 	addi	sp,sp,-12
 100af10:	dc000015 	stw	r16,0(sp)
 100af14:	18bffd17 	ldw	r2,-12(r3)
 100af18:	2821883a 	mov	r16,r5
 100af1c:	dc400115 	stw	r17,4(sp)
 100af20:	dfc00215 	stw	ra,8(sp)
 100af24:	2023883a 	mov	r17,r4
 100af28:	197ffd04 	addi	r5,r3,-12
 100af2c:	80800a2e 	bgeu	r16,r2,100af58 <_ZNSs2atEm+0x50>
 100af30:	28800217 	ldw	r2,8(r5)
 100af34:	10000216 	blt	r2,zero,100af40 <_ZNSs2atEm+0x38>
 100af38:	100ae980 	call	100ae98 <_ZNSs12_M_leak_hardEv>
 100af3c:	88c00017 	ldw	r3,0(r17)
 100af40:	80c5883a 	add	r2,r16,r3
 100af44:	dfc00217 	ldw	ra,8(sp)
 100af48:	dc400117 	ldw	r17,4(sp)
 100af4c:	dc000017 	ldw	r16,0(sp)
 100af50:	dec00304 	addi	sp,sp,12
 100af54:	f800283a 	ret
 100af58:	010040b4 	movhi	r4,258
 100af5c:	21150304 	addi	r4,r4,21516
 100af60:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

0100af64 <_ZNSsixEm>:
 100af64:	20c00017 	ldw	r3,0(r4)
 100af68:	defffd04 	addi	sp,sp,-12
 100af6c:	dc400115 	stw	r17,4(sp)
 100af70:	18bfff17 	ldw	r2,-4(r3)
 100af74:	dc000015 	stw	r16,0(sp)
 100af78:	dfc00215 	stw	ra,8(sp)
 100af7c:	2021883a 	mov	r16,r4
 100af80:	2823883a 	mov	r17,r5
 100af84:	10000216 	blt	r2,zero,100af90 <_ZNSsixEm+0x2c>
 100af88:	100ae980 	call	100ae98 <_ZNSs12_M_leak_hardEv>
 100af8c:	80c00017 	ldw	r3,0(r16)
 100af90:	88c5883a 	add	r2,r17,r3
 100af94:	dfc00217 	ldw	ra,8(sp)
 100af98:	dc400117 	ldw	r17,4(sp)
 100af9c:	dc000017 	ldw	r16,0(sp)
 100afa0:	dec00304 	addi	sp,sp,12
 100afa4:	f800283a 	ret

0100afa8 <_ZNSs3endEv>:
 100afa8:	20c00017 	ldw	r3,0(r4)
 100afac:	defffe04 	addi	sp,sp,-8
 100afb0:	dc000015 	stw	r16,0(sp)
 100afb4:	18bfff17 	ldw	r2,-4(r3)
 100afb8:	dfc00115 	stw	ra,4(sp)
 100afbc:	2021883a 	mov	r16,r4
 100afc0:	10000216 	blt	r2,zero,100afcc <_ZNSs3endEv+0x24>
 100afc4:	100ae980 	call	100ae98 <_ZNSs12_M_leak_hardEv>
 100afc8:	80c00017 	ldw	r3,0(r16)
 100afcc:	18bffd17 	ldw	r2,-12(r3)
 100afd0:	1885883a 	add	r2,r3,r2
 100afd4:	dfc00117 	ldw	ra,4(sp)
 100afd8:	dc000017 	ldw	r16,0(sp)
 100afdc:	dec00204 	addi	sp,sp,8
 100afe0:	f800283a 	ret

0100afe4 <_ZNSs5beginEv>:
 100afe4:	20c00017 	ldw	r3,0(r4)
 100afe8:	defffe04 	addi	sp,sp,-8
 100afec:	dc000015 	stw	r16,0(sp)
 100aff0:	18bfff17 	ldw	r2,-4(r3)
 100aff4:	dfc00115 	stw	ra,4(sp)
 100aff8:	2021883a 	mov	r16,r4
 100affc:	10000216 	blt	r2,zero,100b008 <_ZNSs5beginEv+0x24>
 100b000:	100ae980 	call	100ae98 <_ZNSs12_M_leak_hardEv>
 100b004:	80c00017 	ldw	r3,0(r16)
 100b008:	1805883a 	mov	r2,r3
 100b00c:	dfc00117 	ldw	ra,4(sp)
 100b010:	dc000017 	ldw	r16,0(sp)
 100b014:	dec00204 	addi	sp,sp,8
 100b018:	f800283a 	ret

0100b01c <_ZNSs4rendEv>:
 100b01c:	28c00017 	ldw	r3,0(r5)
 100b020:	defffd04 	addi	sp,sp,-12
 100b024:	dc400115 	stw	r17,4(sp)
 100b028:	18bfff17 	ldw	r2,-4(r3)
 100b02c:	dc000015 	stw	r16,0(sp)
 100b030:	2023883a 	mov	r17,r4
 100b034:	dfc00215 	stw	ra,8(sp)
 100b038:	2821883a 	mov	r16,r5
 100b03c:	2809883a 	mov	r4,r5
 100b040:	10000216 	blt	r2,zero,100b04c <_ZNSs4rendEv+0x30>
 100b044:	100ae980 	call	100ae98 <_ZNSs12_M_leak_hardEv>
 100b048:	80c00017 	ldw	r3,0(r16)
 100b04c:	8805883a 	mov	r2,r17
 100b050:	88c00015 	stw	r3,0(r17)
 100b054:	dfc00217 	ldw	ra,8(sp)
 100b058:	dc400117 	ldw	r17,4(sp)
 100b05c:	dc000017 	ldw	r16,0(sp)
 100b060:	dec00304 	addi	sp,sp,12
 100b064:	f800283a 	ret

0100b068 <_ZNSs6rbeginEv>:
 100b068:	defffd04 	addi	sp,sp,-12
 100b06c:	dc000015 	stw	r16,0(sp)
 100b070:	2821883a 	mov	r16,r5
 100b074:	29400017 	ldw	r5,0(r5)
 100b078:	dc400115 	stw	r17,4(sp)
 100b07c:	dfc00215 	stw	ra,8(sp)
 100b080:	28bfff17 	ldw	r2,-4(r5)
 100b084:	2023883a 	mov	r17,r4
 100b088:	8009883a 	mov	r4,r16
 100b08c:	10000216 	blt	r2,zero,100b098 <_ZNSs6rbeginEv+0x30>
 100b090:	100ae980 	call	100ae98 <_ZNSs12_M_leak_hardEv>
 100b094:	81400017 	ldw	r5,0(r16)
 100b098:	28fffd17 	ldw	r3,-12(r5)
 100b09c:	8805883a 	mov	r2,r17
 100b0a0:	28c7883a 	add	r3,r5,r3
 100b0a4:	88c00015 	stw	r3,0(r17)
 100b0a8:	dfc00217 	ldw	ra,8(sp)
 100b0ac:	dc400117 	ldw	r17,4(sp)
 100b0b0:	dc000017 	ldw	r16,0(sp)
 100b0b4:	dec00304 	addi	sp,sp,12
 100b0b8:	f800283a 	ret

0100b0bc <_ZNSs6resizeEmc>:
 100b0bc:	20c00017 	ldw	r3,0(r4)
 100b0c0:	deffff04 	addi	sp,sp,-4
 100b0c4:	00900034 	movhi	r2,16384
 100b0c8:	10bfff04 	addi	r2,r2,-4
 100b0cc:	3011883a 	mov	r8,r6
 100b0d0:	dfc00015 	stw	ra,0(sp)
 100b0d4:	19bffd17 	ldw	r6,-12(r3)
 100b0d8:	11401136 	bltu	r2,r5,100b120 <_ZNSs6resizeEmc+0x64>
 100b0dc:	31400936 	bltu	r6,r5,100b104 <_ZNSs6resizeEmc+0x48>
 100b0e0:	29800336 	bltu	r5,r6,100b0f0 <_ZNSs6resizeEmc+0x34>
 100b0e4:	dfc00017 	ldw	ra,0(sp)
 100b0e8:	dec00104 	addi	sp,sp,4
 100b0ec:	f800283a 	ret
 100b0f0:	314dc83a 	sub	r6,r6,r5
 100b0f4:	000f883a 	mov	r7,zero
 100b0f8:	dfc00017 	ldw	ra,0(sp)
 100b0fc:	dec00104 	addi	sp,sp,4
 100b100:	100a4101 	jmpi	100a410 <_ZNSs9_M_mutateEmmm>
 100b104:	298bc83a 	sub	r5,r5,r6
 100b108:	41803fcc 	andi	r6,r8,255
 100b10c:	3180201c 	xori	r6,r6,128
 100b110:	31bfe004 	addi	r6,r6,-128
 100b114:	dfc00017 	ldw	ra,0(sp)
 100b118:	dec00104 	addi	sp,sp,4
 100b11c:	1009df81 	jmpi	1009df8 <_ZNSs6appendEmc>
 100b120:	010040b4 	movhi	r4,258
 100b124:	21155604 	addi	r4,r4,21848
 100b128:	100673c0 	call	100673c <_ZSt20__throw_length_errorPKc>

0100b12c <_ZNSs6resizeEm>:
 100b12c:	000d883a 	mov	r6,zero
 100b130:	100b0bc1 	jmpi	100b0bc <_ZNSs6resizeEmc>

0100b134 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_>:
 100b134:	deffe804 	addi	sp,sp,-96
 100b138:	00804074 	movhi	r2,257
 100b13c:	10b3a604 	addi	r2,r2,-12648
 100b140:	00c040b4 	movhi	r3,258
 100b144:	18d1a344 	addi	r3,r3,18061
 100b148:	d8800715 	stw	r2,28(sp)
 100b14c:	d9001115 	stw	r4,68(sp)
 100b150:	00804074 	movhi	r2,257
 100b154:	10ac8304 	addi	r2,r2,-19956
 100b158:	d9000104 	addi	r4,sp,4
 100b15c:	d8c00815 	stw	r3,32(sp)
 100b160:	d9401215 	stw	r5,72(sp)
 100b164:	dfc01715 	stw	ra,92(sp)
 100b168:	d8800a15 	stw	r2,40(sp)
 100b16c:	d9801315 	stw	r6,76(sp)
 100b170:	df001615 	stw	fp,88(sp)
 100b174:	ddc01515 	stw	r23,84(sp)
 100b178:	dec00915 	stw	sp,36(sp)
 100b17c:	dec00b15 	stw	sp,44(sp)
 100b180:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100b184:	d9001217 	ldw	r4,72(sp)
 100b188:	100f4040 	call	100f404 <strlen>
 100b18c:	00c040f4 	movhi	r3,259
 100b190:	18cf2704 	addi	r3,r3,15516
 100b194:	d8801415 	stw	r2,80(sp)
 100b198:	18800304 	addi	r2,r3,12
 100b19c:	d8c01117 	ldw	r3,68(sp)
 100b1a0:	d9001117 	ldw	r4,68(sp)
 100b1a4:	18800015 	stw	r2,0(r3)
 100b1a8:	d8801317 	ldw	r2,76(sp)
 100b1ac:	10c00017 	ldw	r3,0(r2)
 100b1b0:	d8801117 	ldw	r2,68(sp)
 100b1b4:	197ffd17 	ldw	r5,-12(r3)
 100b1b8:	d8c01417 	ldw	r3,80(sp)
 100b1bc:	d8800f15 	stw	r2,60(sp)
 100b1c0:	00800084 	movi	r2,2
 100b1c4:	d8800215 	stw	r2,8(sp)
 100b1c8:	194b883a 	add	r5,r3,r5
 100b1cc:	1009c480 	call	1009c48 <_ZNSs7reserveEm>
 100b1d0:	d9001117 	ldw	r4,68(sp)
 100b1d4:	d9401217 	ldw	r5,72(sp)
 100b1d8:	d9801417 	ldw	r6,80(sp)
 100b1dc:	1009ed80 	call	1009ed8 <_ZNSs6appendEPKcm>
 100b1e0:	d9001117 	ldw	r4,68(sp)
 100b1e4:	d9401317 	ldw	r5,76(sp)
 100b1e8:	100a14c0 	call	100a14c <_ZNSs6appendERKSs>
 100b1ec:	d9000104 	addi	r4,sp,4
 100b1f0:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100b1f4:	d8801117 	ldw	r2,68(sp)
 100b1f8:	dfc01717 	ldw	ra,92(sp)
 100b1fc:	df001617 	ldw	fp,88(sp)
 100b200:	ddc01517 	ldw	r23,84(sp)
 100b204:	dec01804 	addi	sp,sp,96
 100b208:	f800283a 	ret
 100b20c:	d8c00217 	ldw	r3,8(sp)
 100b210:	00800044 	movi	r2,1
 100b214:	d9000317 	ldw	r4,12(sp)
 100b218:	18800326 	beq	r3,r2,100b228 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0xf4>
 100b21c:	00bfffc4 	movi	r2,-1
 100b220:	d8800215 	stw	r2,8(sp)
 100b224:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100b228:	d8c00f17 	ldw	r3,60(sp)
 100b22c:	d9001015 	stw	r4,64(sp)
 100b230:	18800017 	ldw	r2,0(r3)
 100b234:	00c040f4 	movhi	r3,259
 100b238:	18cf2704 	addi	r3,r3,15516
 100b23c:	10bffd04 	addi	r2,r2,-12
 100b240:	d8800e15 	stw	r2,56(sp)
 100b244:	1880041e 	bne	r3,r2,100b258 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x124>
 100b248:	d9001017 	ldw	r4,64(sp)
 100b24c:	00bfffc4 	movi	r2,-1
 100b250:	d8800215 	stw	r2,8(sp)
 100b254:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100b258:	00800044 	movi	r2,1
 100b25c:	d8800215 	stw	r2,8(sp)
 100b260:	d8800e17 	ldw	r2,56(sp)
 100b264:	017fffc4 	movi	r5,-1
 100b268:	11000204 	addi	r4,r2,8
 100b26c:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100b270:	00bff516 	blt	zero,r2,100b248 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x114>
 100b274:	d9000e17 	ldw	r4,56(sp)
 100b278:	d80b883a 	mov	r5,sp
 100b27c:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100b280:	003ff106 	br	100b248 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x114>

0100b284 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>:
 100b284:	deffe904 	addi	sp,sp,-92
 100b288:	00804074 	movhi	r2,257
 100b28c:	10b3a604 	addi	r2,r2,-12648
 100b290:	00c040b4 	movhi	r3,258
 100b294:	18d1a544 	addi	r3,r3,18069
 100b298:	d8800715 	stw	r2,28(sp)
 100b29c:	d9001115 	stw	r4,68(sp)
 100b2a0:	00804074 	movhi	r2,257
 100b2a4:	10acc904 	addi	r2,r2,-19676
 100b2a8:	d9000104 	addi	r4,sp,4
 100b2ac:	dfc01615 	stw	ra,88(sp)
 100b2b0:	d8c00815 	stw	r3,32(sp)
 100b2b4:	d8800a15 	stw	r2,40(sp)
 100b2b8:	d9801315 	stw	r6,76(sp)
 100b2bc:	d9401215 	stw	r5,72(sp)
 100b2c0:	df001515 	stw	fp,84(sp)
 100b2c4:	ddc01415 	stw	r23,80(sp)
 100b2c8:	dec00915 	stw	sp,36(sp)
 100b2cc:	dec00b15 	stw	sp,44(sp)
 100b2d0:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100b2d4:	d9401217 	ldw	r5,72(sp)
 100b2d8:	d9001117 	ldw	r4,68(sp)
 100b2dc:	00bfffc4 	movi	r2,-1
 100b2e0:	d8800215 	stw	r2,8(sp)
 100b2e4:	10098d80 	call	10098d8 <_ZNSsC1ERKSs>
 100b2e8:	00800084 	movi	r2,2
 100b2ec:	d8800215 	stw	r2,8(sp)
 100b2f0:	d8801117 	ldw	r2,68(sp)
 100b2f4:	d9401317 	ldw	r5,76(sp)
 100b2f8:	d8801015 	stw	r2,64(sp)
 100b2fc:	1009883a 	mov	r4,r2
 100b300:	100a14c0 	call	100a14c <_ZNSs6appendERKSs>
 100b304:	d9000104 	addi	r4,sp,4
 100b308:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100b30c:	d8801117 	ldw	r2,68(sp)
 100b310:	dfc01617 	ldw	ra,88(sp)
 100b314:	df001517 	ldw	fp,84(sp)
 100b318:	ddc01417 	ldw	r23,80(sp)
 100b31c:	dec01704 	addi	sp,sp,92
 100b320:	f800283a 	ret
 100b324:	d8c00217 	ldw	r3,8(sp)
 100b328:	00800044 	movi	r2,1
 100b32c:	d9000317 	ldw	r4,12(sp)
 100b330:	18800326 	beq	r3,r2,100b340 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xbc>
 100b334:	00bfffc4 	movi	r2,-1
 100b338:	d8800215 	stw	r2,8(sp)
 100b33c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100b340:	d8801017 	ldw	r2,64(sp)
 100b344:	d9000f15 	stw	r4,60(sp)
 100b348:	10c00017 	ldw	r3,0(r2)
 100b34c:	008040f4 	movhi	r2,259
 100b350:	108f2704 	addi	r2,r2,15516
 100b354:	18fffd04 	addi	r3,r3,-12
 100b358:	d8c00e15 	stw	r3,56(sp)
 100b35c:	1880041e 	bne	r3,r2,100b370 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xec>
 100b360:	d9000f17 	ldw	r4,60(sp)
 100b364:	00bfffc4 	movi	r2,-1
 100b368:	d8800215 	stw	r2,8(sp)
 100b36c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100b370:	00800044 	movi	r2,1
 100b374:	d8800215 	stw	r2,8(sp)
 100b378:	19000204 	addi	r4,r3,8
 100b37c:	017fffc4 	movi	r5,-1
 100b380:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100b384:	00bff616 	blt	zero,r2,100b360 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xdc>
 100b388:	d9000e17 	ldw	r4,56(sp)
 100b38c:	d80b883a 	mov	r5,sp
 100b390:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100b394:	003ff206 	br	100b360 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xdc>

0100b398 <_ZNSs4swapERSs>:
 100b398:	21c00017 	ldw	r7,0(r4)
 100b39c:	38fffd04 	addi	r3,r7,-12
 100b3a0:	18800217 	ldw	r2,8(r3)
 100b3a4:	1000010e 	bge	r2,zero,100b3ac <_ZNSs4swapERSs+0x14>
 100b3a8:	18000215 	stw	zero,8(r3)
 100b3ac:	29800017 	ldw	r6,0(r5)
 100b3b0:	30fffd04 	addi	r3,r6,-12
 100b3b4:	18800217 	ldw	r2,8(r3)
 100b3b8:	1000010e 	bge	r2,zero,100b3c0 <_ZNSs4swapERSs+0x28>
 100b3bc:	18000215 	stw	zero,8(r3)
 100b3c0:	21800015 	stw	r6,0(r4)
 100b3c4:	29c00015 	stw	r7,0(r5)
 100b3c8:	f800283a 	ret

0100b3cc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_>:
 100b3cc:	deffe904 	addi	sp,sp,-92
 100b3d0:	00804074 	movhi	r2,257
 100b3d4:	10b3a604 	addi	r2,r2,-12648
 100b3d8:	00c040b4 	movhi	r3,258
 100b3dc:	18d1a744 	addi	r3,r3,18077
 100b3e0:	d8800715 	stw	r2,28(sp)
 100b3e4:	d9001115 	stw	r4,68(sp)
 100b3e8:	00804074 	movhi	r2,257
 100b3ec:	10ad2804 	addi	r2,r2,-19296
 100b3f0:	d9000104 	addi	r4,sp,4
 100b3f4:	d8c00815 	stw	r3,32(sp)
 100b3f8:	d8800a15 	stw	r2,40(sp)
 100b3fc:	d9401205 	stb	r5,72(sp)
 100b400:	dfc01615 	stw	ra,88(sp)
 100b404:	df001515 	stw	fp,84(sp)
 100b408:	ddc01415 	stw	r23,80(sp)
 100b40c:	dec00915 	stw	sp,36(sp)
 100b410:	dec00b15 	stw	sp,44(sp)
 100b414:	d9801315 	stw	r6,76(sp)
 100b418:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100b41c:	00c040f4 	movhi	r3,259
 100b420:	18cf2704 	addi	r3,r3,15516
 100b424:	18800304 	addi	r2,r3,12
 100b428:	d8c01117 	ldw	r3,68(sp)
 100b42c:	18800015 	stw	r2,0(r3)
 100b430:	d8801317 	ldw	r2,76(sp)
 100b434:	10c00017 	ldw	r3,0(r2)
 100b438:	00800084 	movi	r2,2
 100b43c:	197ffd17 	ldw	r5,-12(r3)
 100b440:	d8c01117 	ldw	r3,68(sp)
 100b444:	d8800215 	stw	r2,8(sp)
 100b448:	29400044 	addi	r5,r5,1
 100b44c:	d8c00f15 	stw	r3,60(sp)
 100b450:	1809883a 	mov	r4,r3
 100b454:	1009c480 	call	1009c48 <_ZNSs7reserveEm>
 100b458:	d8801203 	ldbu	r2,72(sp)
 100b45c:	d9001117 	ldw	r4,68(sp)
 100b460:	01400044 	movi	r5,1
 100b464:	11803fcc 	andi	r6,r2,255
 100b468:	3180201c 	xori	r6,r6,128
 100b46c:	31bfe004 	addi	r6,r6,-128
 100b470:	1009df80 	call	1009df8 <_ZNSs6appendEmc>
 100b474:	d9001117 	ldw	r4,68(sp)
 100b478:	d9401317 	ldw	r5,76(sp)
 100b47c:	100a14c0 	call	100a14c <_ZNSs6appendERKSs>
 100b480:	d9000104 	addi	r4,sp,4
 100b484:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100b488:	d8801117 	ldw	r2,68(sp)
 100b48c:	dfc01617 	ldw	ra,88(sp)
 100b490:	df001517 	ldw	fp,84(sp)
 100b494:	ddc01417 	ldw	r23,80(sp)
 100b498:	dec01704 	addi	sp,sp,92
 100b49c:	f800283a 	ret
 100b4a0:	d8c00217 	ldw	r3,8(sp)
 100b4a4:	00800044 	movi	r2,1
 100b4a8:	d9000317 	ldw	r4,12(sp)
 100b4ac:	18800326 	beq	r3,r2,100b4bc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0xf0>
 100b4b0:	00bfffc4 	movi	r2,-1
 100b4b4:	d8800215 	stw	r2,8(sp)
 100b4b8:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100b4bc:	d8c00f17 	ldw	r3,60(sp)
 100b4c0:	d9001015 	stw	r4,64(sp)
 100b4c4:	18800017 	ldw	r2,0(r3)
 100b4c8:	00c040f4 	movhi	r3,259
 100b4cc:	18cf2704 	addi	r3,r3,15516
 100b4d0:	10bffd04 	addi	r2,r2,-12
 100b4d4:	d8800e15 	stw	r2,56(sp)
 100b4d8:	1880041e 	bne	r3,r2,100b4ec <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x120>
 100b4dc:	d9001017 	ldw	r4,64(sp)
 100b4e0:	00bfffc4 	movi	r2,-1
 100b4e4:	d8800215 	stw	r2,8(sp)
 100b4e8:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100b4ec:	00800044 	movi	r2,1
 100b4f0:	d8800215 	stw	r2,8(sp)
 100b4f4:	d8800e17 	ldw	r2,56(sp)
 100b4f8:	017fffc4 	movi	r5,-1
 100b4fc:	11000204 	addi	r4,r2,8
 100b500:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100b504:	00bff516 	blt	zero,r2,100b4dc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x110>
 100b508:	d9000e17 	ldw	r4,56(sp)
 100b50c:	d80b883a 	mov	r5,sp
 100b510:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100b514:	003ff106 	br	100b4dc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x110>

0100b518 <_ZNSs7replaceEmmPKcm>:
 100b518:	deffe304 	addi	sp,sp,-116
 100b51c:	00804074 	movhi	r2,257
 100b520:	10addf04 	addi	r2,r2,-18564
 100b524:	d8800c15 	stw	r2,48(sp)
 100b528:	d8800104 	addi	r2,sp,4
 100b52c:	00c040b4 	movhi	r3,258
 100b530:	18d1a944 	addi	r3,r3,18085
 100b534:	d9001615 	stw	r4,88(sp)
 100b538:	d8800b15 	stw	r2,44(sp)
 100b53c:	d9000304 	addi	r4,sp,12
 100b540:	00804074 	movhi	r2,257
 100b544:	10b3a604 	addi	r2,r2,-12648
 100b548:	d8c00a15 	stw	r3,40(sp)
 100b54c:	d9401715 	stw	r5,92(sp)
 100b550:	d9801815 	stw	r6,96(sp)
 100b554:	d9c01915 	stw	r7,100(sp)
 100b558:	dfc01c15 	stw	ra,112(sp)
 100b55c:	df001b15 	stw	fp,108(sp)
 100b560:	ddc01a15 	stw	r23,104(sp)
 100b564:	dec00d15 	stw	sp,52(sp)
 100b568:	d8800915 	stw	r2,36(sp)
 100b56c:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100b570:	d8c01617 	ldw	r3,88(sp)
 100b574:	d9801717 	ldw	r6,92(sp)
 100b578:	19400017 	ldw	r5,0(r3)
 100b57c:	29fffd04 	addi	r7,r5,-12
 100b580:	39000017 	ldw	r4,0(r7)
 100b584:	21807336 	bltu	r4,r6,100b754 <_ZNSs7replaceEmmPKcm+0x23c>
 100b588:	d8c01717 	ldw	r3,92(sp)
 100b58c:	d8801817 	ldw	r2,96(sp)
 100b590:	20cdc83a 	sub	r6,r4,r3
 100b594:	d8801015 	stw	r2,64(sp)
 100b598:	30801b36 	bltu	r6,r2,100b608 <_ZNSs7replaceEmmPKcm+0xf0>
 100b59c:	d9801017 	ldw	r6,64(sp)
 100b5a0:	00900034 	movhi	r2,16384
 100b5a4:	10bfff04 	addi	r2,r2,-4
 100b5a8:	2187c83a 	sub	r3,r4,r6
 100b5ac:	10c5c83a 	sub	r2,r2,r3
 100b5b0:	d8c01d17 	ldw	r3,116(sp)
 100b5b4:	10c06c36 	bltu	r2,r3,100b768 <_ZNSs7replaceEmmPKcm+0x250>
 100b5b8:	d9801917 	ldw	r6,100(sp)
 100b5bc:	3140142e 	bgeu	r6,r5,100b610 <_ZNSs7replaceEmmPKcm+0xf8>
 100b5c0:	d8801d17 	ldw	r2,116(sp)
 100b5c4:	d9001617 	ldw	r4,88(sp)
 100b5c8:	d9401717 	ldw	r5,92(sp)
 100b5cc:	d9801017 	ldw	r6,64(sp)
 100b5d0:	d9c01917 	ldw	r7,100(sp)
 100b5d4:	d8800015 	stw	r2,0(sp)
 100b5d8:	00bfffc4 	movi	r2,-1
 100b5dc:	d8800415 	stw	r2,16(sp)
 100b5e0:	100a6480 	call	100a648 <_ZNSs15_M_replace_safeEmmPKcm>
 100b5e4:	d8801615 	stw	r2,88(sp)
 100b5e8:	d9000304 	addi	r4,sp,12
 100b5ec:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100b5f0:	d8801617 	ldw	r2,88(sp)
 100b5f4:	dfc01c17 	ldw	ra,112(sp)
 100b5f8:	df001b17 	ldw	fp,108(sp)
 100b5fc:	ddc01a17 	ldw	r23,104(sp)
 100b600:	dec01d04 	addi	sp,sp,116
 100b604:	f800283a 	ret
 100b608:	d9801015 	stw	r6,64(sp)
 100b60c:	003fe306 	br	100b59c <_ZNSs7replaceEmmPKcm+0x84>
 100b610:	2905883a 	add	r2,r5,r4
 100b614:	11bfea36 	bltu	r2,r6,100b5c0 <_ZNSs7replaceEmmPKcm+0xa8>
 100b618:	38800217 	ldw	r2,8(r7)
 100b61c:	00bfe816 	blt	zero,r2,100b5c0 <_ZNSs7replaceEmmPKcm+0xa8>
 100b620:	d8801717 	ldw	r2,92(sp)
 100b624:	d9001917 	ldw	r4,100(sp)
 100b628:	d9801d17 	ldw	r6,116(sp)
 100b62c:	d8801515 	stw	r2,84(sp)
 100b630:	2887883a 	add	r3,r5,r2
 100b634:	2185883a 	add	r2,r4,r6
 100b638:	18801636 	bltu	r3,r2,100b694 <_ZNSs7replaceEmmPKcm+0x17c>
 100b63c:	d8c01917 	ldw	r3,100(sp)
 100b640:	194bc83a 	sub	r5,r3,r5
 100b644:	d9401415 	stw	r5,80(sp)
 100b648:	d9401717 	ldw	r5,92(sp)
 100b64c:	d9801017 	ldw	r6,64(sp)
 100b650:	d9001617 	ldw	r4,88(sp)
 100b654:	d9c01d17 	ldw	r7,116(sp)
 100b658:	00bfffc4 	movi	r2,-1
 100b65c:	d8800415 	stw	r2,16(sp)
 100b660:	100a4100 	call	100a410 <_ZNSs9_M_mutateEmmm>
 100b664:	d9801617 	ldw	r6,88(sp)
 100b668:	d8801417 	ldw	r2,80(sp)
 100b66c:	30c00017 	ldw	r3,0(r6)
 100b670:	d9801517 	ldw	r6,84(sp)
 100b674:	188b883a 	add	r5,r3,r2
 100b678:	30c9883a 	add	r4,r6,r3
 100b67c:	d8c01d17 	ldw	r3,116(sp)
 100b680:	00800044 	movi	r2,1
 100b684:	18800d1e 	bne	r3,r2,100b6bc <_ZNSs7replaceEmmPKcm+0x1a4>
 100b688:	28800003 	ldbu	r2,0(r5)
 100b68c:	20800005 	stb	r2,0(r4)
 100b690:	003fd506 	br	100b5e8 <_ZNSs7replaceEmmPKcm+0xd0>
 100b694:	d9001017 	ldw	r4,64(sp)
 100b698:	d9801917 	ldw	r6,100(sp)
 100b69c:	1905883a 	add	r2,r3,r4
 100b6a0:	30800936 	bltu	r6,r2,100b6c8 <_ZNSs7replaceEmmPKcm+0x1b0>
 100b6a4:	3147c83a 	sub	r3,r6,r5
 100b6a8:	d9401d17 	ldw	r5,116(sp)
 100b6ac:	2905c83a 	sub	r2,r5,r4
 100b6b0:	1887883a 	add	r3,r3,r2
 100b6b4:	d8c01415 	stw	r3,80(sp)
 100b6b8:	003fe306 	br	100b648 <_ZNSs7replaceEmmPKcm+0x130>
 100b6bc:	d9801d17 	ldw	r6,116(sp)
 100b6c0:	100eb6c0 	call	100eb6c <memcpy>
 100b6c4:	003fc806 	br	100b5e8 <_ZNSs7replaceEmmPKcm+0xd0>
 100b6c8:	01000104 	movi	r4,4
 100b6cc:	d905883a 	add	r2,sp,r4
 100b6d0:	d9000415 	stw	r4,16(sp)
 100b6d4:	d9401917 	ldw	r5,100(sp)
 100b6d8:	1109883a 	add	r4,r2,r4
 100b6dc:	d9801d17 	ldw	r6,116(sp)
 100b6e0:	d9c00184 	addi	r7,sp,6
 100b6e4:	10096400 	call	1009640 <_ZNSsC1EPKcmRKSaIcE>
 100b6e8:	d9001d17 	ldw	r4,116(sp)
 100b6ec:	008000c4 	movi	r2,3
 100b6f0:	d9c00217 	ldw	r7,8(sp)
 100b6f4:	d9000015 	stw	r4,0(sp)
 100b6f8:	d8800415 	stw	r2,16(sp)
 100b6fc:	d9001617 	ldw	r4,88(sp)
 100b700:	d9401717 	ldw	r5,92(sp)
 100b704:	d9801017 	ldw	r6,64(sp)
 100b708:	100a6480 	call	100a648 <_ZNSs15_M_replace_safeEmmPKcm>
 100b70c:	d8801615 	stw	r2,88(sp)
 100b710:	d8800217 	ldw	r2,8(sp)
 100b714:	00c040f4 	movhi	r3,259
 100b718:	18cf2704 	addi	r3,r3,15516
 100b71c:	10bffd04 	addi	r2,r2,-12
 100b720:	d8801215 	stw	r2,72(sp)
 100b724:	10ffb026 	beq	r2,r3,100b5e8 <_ZNSs7replaceEmmPKcm+0xd0>
 100b728:	d9401217 	ldw	r5,72(sp)
 100b72c:	00800084 	movi	r2,2
 100b730:	d8800415 	stw	r2,16(sp)
 100b734:	29000204 	addi	r4,r5,8
 100b738:	017fffc4 	movi	r5,-1
 100b73c:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100b740:	00bfa916 	blt	zero,r2,100b5e8 <_ZNSs7replaceEmmPKcm+0xd0>
 100b744:	d9001217 	ldw	r4,72(sp)
 100b748:	d9400144 	addi	r5,sp,5
 100b74c:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100b750:	003fa506 	br	100b5e8 <_ZNSs7replaceEmmPKcm+0xd0>
 100b754:	00bfffc4 	movi	r2,-1
 100b758:	010040b4 	movhi	r4,258
 100b75c:	21154504 	addi	r4,r4,21780
 100b760:	d8800415 	stw	r2,16(sp)
 100b764:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>
 100b768:	00bfffc4 	movi	r2,-1
 100b76c:	010040b4 	movhi	r4,258
 100b770:	21154504 	addi	r4,r4,21780
 100b774:	d8800415 	stw	r2,16(sp)
 100b778:	100673c0 	call	100673c <_ZSt20__throw_length_errorPKc>
 100b77c:	d8c00417 	ldw	r3,16(sp)
 100b780:	00800044 	movi	r2,1
 100b784:	d9000517 	ldw	r4,20(sp)
 100b788:	18800226 	beq	r3,r2,100b794 <_ZNSs7replaceEmmPKcm+0x27c>
 100b78c:	00800084 	movi	r2,2
 100b790:	18800326 	beq	r3,r2,100b7a0 <_ZNSs7replaceEmmPKcm+0x288>
 100b794:	00bfffc4 	movi	r2,-1
 100b798:	d8800415 	stw	r2,16(sp)
 100b79c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100b7a0:	d8800217 	ldw	r2,8(sp)
 100b7a4:	00c040f4 	movhi	r3,259
 100b7a8:	18cf2704 	addi	r3,r3,15516
 100b7ac:	d9001315 	stw	r4,76(sp)
 100b7b0:	10bffd04 	addi	r2,r2,-12
 100b7b4:	d8801115 	stw	r2,68(sp)
 100b7b8:	10c0041e 	bne	r2,r3,100b7cc <_ZNSs7replaceEmmPKcm+0x2b4>
 100b7bc:	d9001317 	ldw	r4,76(sp)
 100b7c0:	00bfffc4 	movi	r2,-1
 100b7c4:	d8800415 	stw	r2,16(sp)
 100b7c8:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100b7cc:	d9801117 	ldw	r6,68(sp)
 100b7d0:	00800044 	movi	r2,1
 100b7d4:	d8800415 	stw	r2,16(sp)
 100b7d8:	31000204 	addi	r4,r6,8
 100b7dc:	017fffc4 	movi	r5,-1
 100b7e0:	100b9f00 	call	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
 100b7e4:	00bff516 	blt	zero,r2,100b7bc <_ZNSs7replaceEmmPKcm+0x2a4>
 100b7e8:	d9001117 	ldw	r4,68(sp)
 100b7ec:	d9400104 	addi	r5,sp,4
 100b7f0:	10084800 	call	1008480 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 100b7f4:	003ff106 	br	100b7bc <_ZNSs7replaceEmmPKcm+0x2a4>

0100b7f8 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_>:
 100b7f8:	d8800017 	ldw	r2,0(sp)
 100b7fc:	20c00017 	ldw	r3,0(r4)
 100b800:	314dc83a 	sub	r6,r6,r5
 100b804:	11c5c83a 	sub	r2,r2,r7
 100b808:	28cbc83a 	sub	r5,r5,r3
 100b80c:	d8800015 	stw	r2,0(sp)
 100b810:	100b5181 	jmpi	100b518 <_ZNSs7replaceEmmPKcm>

0100b814 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_>:
 100b814:	d8800017 	ldw	r2,0(sp)
 100b818:	20c00017 	ldw	r3,0(r4)
 100b81c:	314dc83a 	sub	r6,r6,r5
 100b820:	11c5c83a 	sub	r2,r2,r7
 100b824:	28cbc83a 	sub	r5,r5,r3
 100b828:	d8800015 	stw	r2,0(sp)
 100b82c:	100b5181 	jmpi	100b518 <_ZNSs7replaceEmmPKcm>

0100b830 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_>:
 100b830:	d8800017 	ldw	r2,0(sp)
 100b834:	20c00017 	ldw	r3,0(r4)
 100b838:	314dc83a 	sub	r6,r6,r5
 100b83c:	11c5c83a 	sub	r2,r2,r7
 100b840:	28cbc83a 	sub	r5,r5,r3
 100b844:	d8800015 	stw	r2,0(sp)
 100b848:	100b5181 	jmpi	100b518 <_ZNSs7replaceEmmPKcm>

0100b84c <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_>:
 100b84c:	d8800017 	ldw	r2,0(sp)
 100b850:	20c00017 	ldw	r3,0(r4)
 100b854:	314dc83a 	sub	r6,r6,r5
 100b858:	11c5c83a 	sub	r2,r2,r7
 100b85c:	28cbc83a 	sub	r5,r5,r3
 100b860:	d8800015 	stw	r2,0(sp)
 100b864:	100b5181 	jmpi	100b518 <_ZNSs7replaceEmmPKcm>

0100b868 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcm>:
 100b868:	20800017 	ldw	r2,0(r4)
 100b86c:	314dc83a 	sub	r6,r6,r5
 100b870:	288bc83a 	sub	r5,r5,r2
 100b874:	100b5181 	jmpi	100b518 <_ZNSs7replaceEmmPKcm>

0100b878 <_ZNSs7replaceEmmPKc>:
 100b878:	defffa04 	addi	sp,sp,-24
 100b87c:	dfc00515 	stw	ra,20(sp)
 100b880:	ddc00415 	stw	r23,16(sp)
 100b884:	dd400315 	stw	r21,12(sp)
 100b888:	dcc00215 	stw	r19,8(sp)
 100b88c:	dc400115 	stw	r17,4(sp)
 100b890:	202f883a 	mov	r23,r4
 100b894:	3809883a 	mov	r4,r7
 100b898:	382b883a 	mov	r21,r7
 100b89c:	2823883a 	mov	r17,r5
 100b8a0:	3027883a 	mov	r19,r6
 100b8a4:	100f4040 	call	100f404 <strlen>
 100b8a8:	880b883a 	mov	r5,r17
 100b8ac:	b809883a 	mov	r4,r23
 100b8b0:	980d883a 	mov	r6,r19
 100b8b4:	a80f883a 	mov	r7,r21
 100b8b8:	d8800015 	stw	r2,0(sp)
 100b8bc:	100b5180 	call	100b518 <_ZNSs7replaceEmmPKcm>
 100b8c0:	dfc00517 	ldw	ra,20(sp)
 100b8c4:	ddc00417 	ldw	r23,16(sp)
 100b8c8:	dd400317 	ldw	r21,12(sp)
 100b8cc:	dcc00217 	ldw	r19,8(sp)
 100b8d0:	dc400117 	ldw	r17,4(sp)
 100b8d4:	dec00604 	addi	sp,sp,24
 100b8d8:	f800283a 	ret

0100b8dc <_ZNSs7replaceEmmRKSsmm>:
 100b8dc:	3a400017 	ldw	r9,0(r7)
 100b8e0:	deffff04 	addi	sp,sp,-4
 100b8e4:	d9c00117 	ldw	r7,4(sp)
 100b8e8:	48bffd17 	ldw	r2,-12(r9)
 100b8ec:	dfc00015 	stw	ra,0(sp)
 100b8f0:	da000217 	ldw	r8,8(sp)
 100b8f4:	11c00d36 	bltu	r2,r7,100b92c <_ZNSs7replaceEmmRKSsmm+0x50>
 100b8f8:	11c7c83a 	sub	r3,r2,r7
 100b8fc:	4005883a 	mov	r2,r8
 100b900:	49cf883a 	add	r7,r9,r7
 100b904:	1a000436 	bltu	r3,r8,100b918 <_ZNSs7replaceEmmRKSsmm+0x3c>
 100b908:	d8800115 	stw	r2,4(sp)
 100b90c:	dfc00017 	ldw	ra,0(sp)
 100b910:	dec00104 	addi	sp,sp,4
 100b914:	100b5181 	jmpi	100b518 <_ZNSs7replaceEmmPKcm>
 100b918:	1805883a 	mov	r2,r3
 100b91c:	d8800115 	stw	r2,4(sp)
 100b920:	dfc00017 	ldw	ra,0(sp)
 100b924:	dec00104 	addi	sp,sp,4
 100b928:	100b5181 	jmpi	100b518 <_ZNSs7replaceEmmPKcm>
 100b92c:	010040b4 	movhi	r4,258
 100b930:	21154504 	addi	r4,r4,21780
 100b934:	10065ac0 	call	10065ac <_ZSt20__throw_out_of_rangePKc>

0100b938 <_ZNSs7replaceEmmRKSs>:
 100b938:	39c00017 	ldw	r7,0(r7)
 100b93c:	defffe04 	addi	sp,sp,-8
 100b940:	dfc00115 	stw	ra,4(sp)
 100b944:	38bffd17 	ldw	r2,-12(r7)
 100b948:	d8800015 	stw	r2,0(sp)
 100b94c:	100b5180 	call	100b518 <_ZNSs7replaceEmmPKcm>
 100b950:	dfc00117 	ldw	ra,4(sp)
 100b954:	dec00204 	addi	sp,sp,8
 100b958:	f800283a 	ret

0100b95c <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs>:
 100b95c:	39c00017 	ldw	r7,0(r7)
 100b960:	20800017 	ldw	r2,0(r4)
 100b964:	defffe04 	addi	sp,sp,-8
 100b968:	38fffd17 	ldw	r3,-12(r7)
 100b96c:	314dc83a 	sub	r6,r6,r5
 100b970:	288bc83a 	sub	r5,r5,r2
 100b974:	dfc00115 	stw	ra,4(sp)
 100b978:	d8c00015 	stw	r3,0(sp)
 100b97c:	100b5180 	call	100b518 <_ZNSs7replaceEmmPKcm>
 100b980:	dfc00117 	ldw	ra,4(sp)
 100b984:	dec00204 	addi	sp,sp,8
 100b988:	f800283a 	ret

0100b98c <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc>:
 100b98c:	20800017 	ldw	r2,0(r4)
 100b990:	defffa04 	addi	sp,sp,-24
 100b994:	dc400215 	stw	r17,8(sp)
 100b998:	3163c83a 	sub	r17,r6,r5
 100b99c:	288bc83a 	sub	r5,r5,r2
 100b9a0:	dfc00515 	stw	ra,20(sp)
 100b9a4:	dd400415 	stw	r21,16(sp)
 100b9a8:	dcc00315 	stw	r19,12(sp)
 100b9ac:	d9400115 	stw	r5,4(sp)
 100b9b0:	2027883a 	mov	r19,r4
 100b9b4:	3809883a 	mov	r4,r7
 100b9b8:	382b883a 	mov	r21,r7
 100b9bc:	100f4040 	call	100f404 <strlen>
 100b9c0:	d9400117 	ldw	r5,4(sp)
 100b9c4:	9809883a 	mov	r4,r19
 100b9c8:	880d883a 	mov	r6,r17
 100b9cc:	a80f883a 	mov	r7,r21
 100b9d0:	d8800015 	stw	r2,0(sp)
 100b9d4:	100b5180 	call	100b518 <_ZNSs7replaceEmmPKcm>
 100b9d8:	dfc00517 	ldw	ra,20(sp)
 100b9dc:	dd400417 	ldw	r21,16(sp)
 100b9e0:	dcc00317 	ldw	r19,12(sp)
 100b9e4:	dc400217 	ldw	r17,8(sp)
 100b9e8:	dec00604 	addi	sp,sp,24
 100b9ec:	f800283a 	ret

0100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>:
 100b9f0:	20800017 	ldw	r2,0(r4)
 100b9f4:	20c00017 	ldw	r3,0(r4)
 100b9f8:	1947883a 	add	r3,r3,r5
 100b9fc:	20c00015 	stw	r3,0(r4)
 100ba00:	f800283a 	ret

0100ba04 <_ZN9__gnu_cxx12__atomic_addEPVii>:
 100ba04:	100b9f01 	jmpi	100b9f0 <_ZN9__gnu_cxx18__exchange_and_addEPVii>

0100ba08 <_ZNKSt9exception4whatEv>:
 100ba08:	20800017 	ldw	r2,0(r4)
 100ba0c:	10ffff17 	ldw	r3,-4(r2)
 100ba10:	18800117 	ldw	r2,4(r3)
 100ba14:	f800283a 	ret

0100ba18 <_ZNSt9exceptionD0Ev>:
 100ba18:	008040b4 	movhi	r2,258
 100ba1c:	10956304 	addi	r2,r2,21900
 100ba20:	20800015 	stw	r2,0(r4)
 100ba24:	100d6681 	jmpi	100d668 <_ZdlPv>

0100ba28 <_ZNSt9exceptionD1Ev>:
 100ba28:	008040b4 	movhi	r2,258
 100ba2c:	10956304 	addi	r2,r2,21900
 100ba30:	20800015 	stw	r2,0(r4)
 100ba34:	f800283a 	ret

0100ba38 <_ZNSt9exceptionD2Ev>:
 100ba38:	008040b4 	movhi	r2,258
 100ba3c:	10956304 	addi	r2,r2,21900
 100ba40:	20800015 	stw	r2,0(r4)
 100ba44:	f800283a 	ret

0100ba48 <_ZNSt13bad_exceptionD0Ev>:
 100ba48:	defffe04 	addi	sp,sp,-8
 100ba4c:	008040b4 	movhi	r2,258
 100ba50:	10955e04 	addi	r2,r2,21880
 100ba54:	dc400015 	stw	r17,0(sp)
 100ba58:	20800015 	stw	r2,0(r4)
 100ba5c:	2023883a 	mov	r17,r4
 100ba60:	dfc00115 	stw	ra,4(sp)
 100ba64:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 100ba68:	8809883a 	mov	r4,r17
 100ba6c:	dfc00117 	ldw	ra,4(sp)
 100ba70:	dc400017 	ldw	r17,0(sp)
 100ba74:	dec00204 	addi	sp,sp,8
 100ba78:	100d6681 	jmpi	100d668 <_ZdlPv>

0100ba7c <_ZNSt13bad_exceptionD1Ev>:
 100ba7c:	008040b4 	movhi	r2,258
 100ba80:	10955e04 	addi	r2,r2,21880
 100ba84:	20800015 	stw	r2,0(r4)
 100ba88:	100ba381 	jmpi	100ba38 <_ZNSt9exceptionD2Ev>

0100ba8c <_ZNSt13bad_exceptionD2Ev>:
 100ba8c:	008040b4 	movhi	r2,258
 100ba90:	10955e04 	addi	r2,r2,21880
 100ba94:	20800015 	stw	r2,0(r4)
 100ba98:	100ba381 	jmpi	100ba38 <_ZNSt9exceptionD2Ev>

0100ba9c <_ZSt15set_new_handlerPFvvE>:
 100ba9c:	d0a7d617 	ldw	r2,-24744(gp)
 100baa0:	d127d615 	stw	r4,-24744(gp)
 100baa4:	f800283a 	ret

0100baa8 <_ZNSt9bad_allocD0Ev>:
 100baa8:	defffe04 	addi	sp,sp,-8
 100baac:	008040b4 	movhi	r2,258
 100bab0:	10957404 	addi	r2,r2,21968
 100bab4:	dc400015 	stw	r17,0(sp)
 100bab8:	20800015 	stw	r2,0(r4)
 100babc:	2023883a 	mov	r17,r4
 100bac0:	dfc00115 	stw	ra,4(sp)
 100bac4:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 100bac8:	8809883a 	mov	r4,r17
 100bacc:	dfc00117 	ldw	ra,4(sp)
 100bad0:	dc400017 	ldw	r17,0(sp)
 100bad4:	dec00204 	addi	sp,sp,8
 100bad8:	100d6681 	jmpi	100d668 <_ZdlPv>

0100badc <_ZNSt9bad_allocD1Ev>:
 100badc:	008040b4 	movhi	r2,258
 100bae0:	10957404 	addi	r2,r2,21968
 100bae4:	20800015 	stw	r2,0(r4)
 100bae8:	100ba381 	jmpi	100ba38 <_ZNSt9exceptionD2Ev>

0100baec <_ZNSt9bad_allocD2Ev>:
 100baec:	008040b4 	movhi	r2,258
 100baf0:	10957404 	addi	r2,r2,21968
 100baf4:	20800015 	stw	r2,0(r4)
 100baf8:	100ba381 	jmpi	100ba38 <_ZNSt9exceptionD2Ev>

0100bafc <__cxa_pure_virtual>:
 100bafc:	deffff04 	addi	sp,sp,-4
 100bb00:	01000084 	movi	r4,2
 100bb04:	014040b4 	movhi	r5,258
 100bb08:	29557e04 	addi	r5,r5,22008
 100bb0c:	018006c4 	movi	r6,27
 100bb10:	dfc00015 	stw	ra,0(sp)
 100bb14:	10191e00 	call	10191e0 <write>
 100bb18:	100d4440 	call	100d444 <_ZSt9terminatev>

0100bb1c <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 100bb1c:	00800044 	movi	r2,1
 100bb20:	f800283a 	ret

0100bb24 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 100bb24:	deffff04 	addi	sp,sp,-4
 100bb28:	3807883a 	mov	r3,r7
 100bb2c:	2005883a 	mov	r2,r4
 100bb30:	01000044 	movi	r4,1
 100bb34:	dfc00015 	stw	ra,0(sp)
 100bb38:	39c00084 	addi	r7,r7,2
 100bb3c:	20c00a2e 	bgeu	r4,r3,100bb68 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>
 100bb40:	12000317 	ldw	r8,12(r2)
 100bb44:	40800017 	ldw	r2,0(r8)
 100bb48:	29400317 	ldw	r5,12(r5)
 100bb4c:	4009883a 	mov	r4,r8
 100bb50:	10c00417 	ldw	r3,16(r2)
 100bb54:	183ee83a 	callr	r3
 100bb58:	10803fcc 	andi	r2,r2,255
 100bb5c:	dfc00017 	ldw	ra,0(sp)
 100bb60:	dec00104 	addi	sp,sp,4
 100bb64:	f800283a 	ret
 100bb68:	12000317 	ldw	r8,12(r2)
 100bb6c:	008040b4 	movhi	r2,258
 100bb70:	109f4f04 	addi	r2,r2,32060
 100bb74:	11000117 	ldw	r4,4(r2)
 100bb78:	40c00117 	ldw	r3,4(r8)
 100bb7c:	193ff11e 	bne	r3,r4,100bb44 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x20>
 100bb80:	29000317 	ldw	r4,12(r5)
 100bb84:	20800017 	ldw	r2,0(r4)
 100bb88:	10c00317 	ldw	r3,12(r2)
 100bb8c:	183ee83a 	callr	r3
 100bb90:	1080005c 	xori	r2,r2,1
 100bb94:	10803fcc 	andi	r2,r2,255
 100bb98:	dfc00017 	ldw	ra,0(sp)
 100bb9c:	dec00104 	addi	sp,sp,4
 100bba0:	f800283a 	ret

0100bba4 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 100bba4:	defffe04 	addi	sp,sp,-8
 100bba8:	008040b4 	movhi	r2,258
 100bbac:	10958704 	addi	r2,r2,22044
 100bbb0:	dc400015 	stw	r17,0(sp)
 100bbb4:	20800015 	stw	r2,0(r4)
 100bbb8:	2023883a 	mov	r17,r4
 100bbbc:	dfc00115 	stw	ra,4(sp)
 100bbc0:	100c6f80 	call	100c6f8 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
 100bbc4:	8809883a 	mov	r4,r17
 100bbc8:	dfc00117 	ldw	ra,4(sp)
 100bbcc:	dc400017 	ldw	r17,0(sp)
 100bbd0:	dec00204 	addi	sp,sp,8
 100bbd4:	100d6681 	jmpi	100d668 <_ZdlPv>

0100bbd8 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 100bbd8:	008040b4 	movhi	r2,258
 100bbdc:	10958704 	addi	r2,r2,22044
 100bbe0:	20800015 	stw	r2,0(r4)
 100bbe4:	100c6f81 	jmpi	100c6f8 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

0100bbe8 <_ZN10__cxxabiv119__pointer_type_infoD2Ev>:
 100bbe8:	008040b4 	movhi	r2,258
 100bbec:	10958704 	addi	r2,r2,22044
 100bbf0:	20800015 	stw	r2,0(r4)
 100bbf4:	100c6f81 	jmpi	100c6f8 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

0100bbf8 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 100bbf8:	defffe04 	addi	sp,sp,-8
 100bbfc:	008040b4 	movhi	r2,258
 100bc00:	10959c04 	addi	r2,r2,22128
 100bc04:	dc400015 	stw	r17,0(sp)
 100bc08:	20800015 	stw	r2,0(r4)
 100bc0c:	2023883a 	mov	r17,r4
 100bc10:	dfc00115 	stw	ra,4(sp)
 100bc14:	100c5180 	call	100c518 <_ZN10__cxxabiv117__class_type_infoD2Ev>
 100bc18:	8809883a 	mov	r4,r17
 100bc1c:	dfc00117 	ldw	ra,4(sp)
 100bc20:	dc400017 	ldw	r17,0(sp)
 100bc24:	dec00204 	addi	sp,sp,8
 100bc28:	100d6681 	jmpi	100d668 <_ZdlPv>

0100bc2c <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 100bc2c:	008040b4 	movhi	r2,258
 100bc30:	10959c04 	addi	r2,r2,22128
 100bc34:	20800015 	stw	r2,0(r4)
 100bc38:	100c5181 	jmpi	100c518 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0100bc3c <_ZN10__cxxabiv121__vmi_class_type_infoD2Ev>:
 100bc3c:	008040b4 	movhi	r2,258
 100bc40:	10959c04 	addi	r2,r2,22128
 100bc44:	20800015 	stw	r2,0(r4)
 100bc48:	100c5181 	jmpi	100c518 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0100bc4c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
 100bc4c:	defff704 	addi	sp,sp,-36
 100bc50:	dd800715 	stw	r22,28(sp)
 100bc54:	dd800917 	ldw	r22,36(sp)
 100bc58:	dd400615 	stw	r21,24(sp)
 100bc5c:	dd000515 	stw	r20,20(sp)
 100bc60:	dcc00415 	stw	r19,16(sp)
 100bc64:	dc800315 	stw	r18,12(sp)
 100bc68:	dfc00815 	stw	ra,32(sp)
 100bc6c:	dc400215 	stw	r17,8(sp)
 100bc70:	dc000115 	stw	r16,4(sp)
 100bc74:	3027883a 	mov	r19,r6
 100bc78:	2025883a 	mov	r18,r4
 100bc7c:	2829883a 	mov	r20,r5
 100bc80:	382b883a 	mov	r21,r7
 100bc84:	35802c26 	beq	r6,r22,100bd38 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xec>
 100bc88:	94000317 	ldw	r16,12(r18)
 100bc8c:	843fffc4 	addi	r16,r16,-1
 100bc90:	00bfffc4 	movi	r2,-1
 100bc94:	800690fa 	slli	r3,r16,3
 100bc98:	80801b26 	beq	r16,r2,100bd08 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xbc>
 100bc9c:	1c8d883a 	add	r6,r3,r18
 100bca0:	31000517 	ldw	r4,20(r6)
 100bca4:	2080004c 	andi	r2,r4,1
 100bca8:	20c0008c 	andi	r3,r4,2
 100bcac:	1023003a 	cmpeq	r17,r2,zero
 100bcb0:	183ff626 	beq	r3,zero,100bc8c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x40>
 100bcb4:	a00b883a 	mov	r5,r20
 100bcb8:	a80f883a 	mov	r7,r21
 100bcbc:	2007d23a 	srai	r3,r4,8
 100bcc0:	8800051e 	bne	r17,zero,100bcd8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x8c>
 100bcc4:	00bfff44 	movi	r2,-3
 100bcc8:	a0bff026 	beq	r20,r2,100bc8c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x40>
 100bccc:	98800017 	ldw	r2,0(r19)
 100bcd0:	10c5883a 	add	r2,r2,r3
 100bcd4:	10c00017 	ldw	r3,0(r2)
 100bcd8:	31000417 	ldw	r4,16(r6)
 100bcdc:	98cd883a 	add	r6,r19,r3
 100bce0:	20800017 	ldw	r2,0(r4)
 100bce4:	dd800015 	stw	r22,0(sp)
 100bce8:	10c00817 	ldw	r3,32(r2)
 100bcec:	183ee83a 	callr	r3
 100bcf0:	1007883a 	mov	r3,r2
 100bcf4:	008000c4 	movi	r2,3
 100bcf8:	10ffe40e 	bge	r2,r3,100bc8c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x40>
 100bcfc:	8800031e 	bne	r17,zero,100bd0c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc0>
 100bd00:	18c00054 	ori	r3,r3,1
 100bd04:	00000106 	br	100bd0c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc0>
 100bd08:	00c00044 	movi	r3,1
 100bd0c:	1805883a 	mov	r2,r3
 100bd10:	dfc00817 	ldw	ra,32(sp)
 100bd14:	dd800717 	ldw	r22,28(sp)
 100bd18:	dd400617 	ldw	r21,24(sp)
 100bd1c:	dd000517 	ldw	r20,20(sp)
 100bd20:	dcc00417 	ldw	r19,16(sp)
 100bd24:	dc800317 	ldw	r18,12(sp)
 100bd28:	dc400217 	ldw	r17,8(sp)
 100bd2c:	dc000117 	ldw	r16,4(sp)
 100bd30:	dec00904 	addi	sp,sp,36
 100bd34:	f800283a 	ret
 100bd38:	20c00117 	ldw	r3,4(r4)
 100bd3c:	38800117 	ldw	r2,4(r7)
 100bd40:	18bfd11e 	bne	r3,r2,100bc88 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x3c>
 100bd44:	00c00184 	movi	r3,6
 100bd48:	003ff006 	br	100bd0c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc0>

0100bd4c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 100bd4c:	defff204 	addi	sp,sp,-56
 100bd50:	df000c15 	stw	fp,48(sp)
 100bd54:	dd800a15 	stw	r22,40(sp)
 100bd58:	dd400915 	stw	r21,36(sp)
 100bd5c:	dd000815 	stw	r20,32(sp)
 100bd60:	dfc00d15 	stw	ra,52(sp)
 100bd64:	ddc00b15 	stw	r23,44(sp)
 100bd68:	dcc00715 	stw	r19,28(sp)
 100bd6c:	dc800615 	stw	r18,24(sp)
 100bd70:	dc400515 	stw	r17,20(sp)
 100bd74:	dc000415 	stw	r16,16(sp)
 100bd78:	202b883a 	mov	r21,r4
 100bd7c:	2839883a 	mov	fp,r5
 100bd80:	302d883a 	mov	r22,r6
 100bd84:	3829883a 	mov	r20,r7
 100bd88:	100c5880 	call	100c588 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 100bd8c:	10803fcc 	andi	r2,r2,255
 100bd90:	1000571e 	bne	r2,zero,100bef0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a4>
 100bd94:	a5c00217 	ldw	r23,8(r20)
 100bd98:	b880040c 	andi	r2,r23,16
 100bd9c:	1000741e 	bne	r2,zero,100bf70 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x224>
 100bda0:	ac400317 	ldw	r17,12(r21)
 100bda4:	8c7fffc4 	addi	r17,r17,-1
 100bda8:	00bfffc4 	movi	r2,-1
 100bdac:	88803726 	beq	r17,r2,100be8c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x140>
 100bdb0:	880a90fa 	slli	r5,r17,3
 100bdb4:	d8000015 	stw	zero,0(sp)
 100bdb8:	d8000115 	stw	zero,4(sp)
 100bdbc:	2d45883a 	add	r2,r5,r21
 100bdc0:	11000517 	ldw	r4,20(r2)
 100bdc4:	ddc00215 	stw	r23,8(sp)
 100bdc8:	d8000315 	stw	zero,12(sp)
 100bdcc:	2004d07a 	srli	r2,r4,1
 100bdd0:	1480004c 	andi	r18,r2,1
 100bdd4:	9006c03a 	cmpne	r3,r18,zero
 100bdd8:	1800031e 	bne	r3,zero,100bde8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x9c>
 100bddc:	b880004c 	andi	r2,r23,1
 100bde0:	1005003a 	cmpeq	r2,r2,zero
 100bde4:	103fef1e 	bne	r2,zero,100bda4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 100bde8:	24c0004c 	andi	r19,r4,1
 100bdec:	b0002a26 	beq	r22,zero,100be98 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x14c>
 100bdf0:	200dd23a 	srai	r6,r4,8
 100bdf4:	98000326 	beq	r19,zero,100be04 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb8>
 100bdf8:	b0800017 	ldw	r2,0(r22)
 100bdfc:	1185883a 	add	r2,r2,r6
 100be00:	11800017 	ldw	r6,0(r2)
 100be04:	b18d883a 	add	r6,r22,r6
 100be08:	2d61883a 	add	r16,r5,r21
 100be0c:	81000417 	ldw	r4,16(r16)
 100be10:	e00b883a 	mov	r5,fp
 100be14:	d80f883a 	mov	r7,sp
 100be18:	20800017 	ldw	r2,0(r4)
 100be1c:	10c00617 	ldw	r3,24(r2)
 100be20:	183ee83a 	callr	r3
 100be24:	10803fcc 	andi	r2,r2,255
 100be28:	103fde26 	beq	r2,zero,100bda4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 100be2c:	d8c00317 	ldw	r3,12(sp)
 100be30:	00800204 	movi	r2,8
 100be34:	18801a26 	beq	r3,r2,100bea0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
 100be38:	d8c00117 	ldw	r3,4(sp)
 100be3c:	008000c4 	movi	r2,3
 100be40:	10c0050e 	bge	r2,r3,100be58 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 100be44:	9004c03a 	cmpne	r2,r18,zero
 100be48:	1000031e 	bne	r2,zero,100be58 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 100be4c:	00bfff44 	movi	r2,-3
 100be50:	1884703a 	and	r2,r3,r2
 100be54:	d8800115 	stw	r2,4(sp)
 100be58:	a1000317 	ldw	r4,12(r20)
 100be5c:	20001426 	beq	r4,zero,100beb0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x164>
 100be60:	a0c00017 	ldw	r3,0(r20)
 100be64:	d8800017 	ldw	r2,0(sp)
 100be68:	1880431e 	bne	r3,r2,100bf78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x22c>
 100be6c:	18002e26 	beq	r3,zero,100bf28 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1dc>
 100be70:	a0800117 	ldw	r2,4(r20)
 100be74:	d8c00117 	ldw	r3,4(sp)
 100be78:	8c7fffc4 	addi	r17,r17,-1
 100be7c:	10c4b03a 	or	r2,r2,r3
 100be80:	a0800115 	stw	r2,4(r20)
 100be84:	00bfffc4 	movi	r2,-1
 100be88:	88bfc91e 	bne	r17,r2,100bdb0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x64>
 100be8c:	a0800117 	ldw	r2,4(r20)
 100be90:	1006c03a 	cmpne	r3,r2,zero
 100be94:	00001706 	br	100bef4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
 100be98:	000d883a 	mov	r6,zero
 100be9c:	003fda06 	br	100be08 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xbc>
 100bea0:	983fe526 	beq	r19,zero,100be38 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xec>
 100bea4:	80800417 	ldw	r2,16(r16)
 100bea8:	d8800315 	stw	r2,12(sp)
 100beac:	003fe206 	br	100be38 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xec>
 100beb0:	d8800017 	ldw	r2,0(sp)
 100beb4:	d9400117 	ldw	r5,4(sp)
 100beb8:	d8c00217 	ldw	r3,8(sp)
 100bebc:	d9000317 	ldw	r4,12(sp)
 100bec0:	a0800015 	stw	r2,0(r20)
 100bec4:	008000c4 	movi	r2,3
 100bec8:	a0c00215 	stw	r3,8(r20)
 100becc:	a1000315 	stw	r4,12(r20)
 100bed0:	a1400115 	stw	r5,4(r20)
 100bed4:	1140060e 	bge	r2,r5,100bef0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a4>
 100bed8:	2880008c 	andi	r2,r5,2
 100bedc:	10001d26 	beq	r2,zero,100bf54 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x208>
 100bee0:	a8800217 	ldw	r2,8(r21)
 100bee4:	1080004c 	andi	r2,r2,1
 100bee8:	1005003a 	cmpeq	r2,r2,zero
 100beec:	103fad26 	beq	r2,zero,100bda4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 100bef0:	00c00044 	movi	r3,1
 100bef4:	1805883a 	mov	r2,r3
 100bef8:	dfc00d17 	ldw	ra,52(sp)
 100befc:	df000c17 	ldw	fp,48(sp)
 100bf00:	ddc00b17 	ldw	r23,44(sp)
 100bf04:	dd800a17 	ldw	r22,40(sp)
 100bf08:	dd400917 	ldw	r21,36(sp)
 100bf0c:	dd000817 	ldw	r20,32(sp)
 100bf10:	dcc00717 	ldw	r19,28(sp)
 100bf14:	dc800617 	ldw	r18,24(sp)
 100bf18:	dc400517 	ldw	r17,20(sp)
 100bf1c:	dc000417 	ldw	r16,16(sp)
 100bf20:	dec00e04 	addi	sp,sp,56
 100bf24:	f800283a 	ret
 100bf28:	d8800317 	ldw	r2,12(sp)
 100bf2c:	00c00204 	movi	r3,8
 100bf30:	10c00426 	beq	r2,r3,100bf44 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
 100bf34:	20c00326 	beq	r4,r3,100bf44 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
 100bf38:	10c00117 	ldw	r3,4(r2)
 100bf3c:	20800117 	ldw	r2,4(r4)
 100bf40:	18bfcb26 	beq	r3,r2,100be70 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x124>
 100bf44:	00800084 	movi	r2,2
 100bf48:	00c00044 	movi	r3,1
 100bf4c:	a0800115 	stw	r2,4(r20)
 100bf50:	003fe806 	br	100bef4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
 100bf54:	2880004c 	andi	r2,r5,1
 100bf58:	1005003a 	cmpeq	r2,r2,zero
 100bf5c:	103fe41e 	bne	r2,zero,100bef0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a4>
 100bf60:	a8800217 	ldw	r2,8(r21)
 100bf64:	1080008c 	andi	r2,r2,2
 100bf68:	103f8e1e 	bne	r2,zero,100bda4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 100bf6c:	003fe006 	br	100bef0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a4>
 100bf70:	adc00217 	ldw	r23,8(r21)
 100bf74:	003f8a06 	br	100bda0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x54>
 100bf78:	00800084 	movi	r2,2
 100bf7c:	00c00044 	movi	r3,1
 100bf80:	a0800115 	stw	r2,4(r20)
 100bf84:	a0000015 	stw	zero,0(r20)
 100bf88:	003fda06 	br	100bef4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>

0100bf8c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 100bf8c:	deffeb04 	addi	sp,sp,-84
 100bf90:	dcc00e15 	stw	r19,56(sp)
 100bf94:	dcc01817 	ldw	r19,96(sp)
 100bf98:	df001315 	stw	fp,76(sp)
 100bf9c:	ddc01215 	stw	r23,72(sp)
 100bfa0:	98800417 	ldw	r2,16(r19)
 100bfa4:	dd801115 	stw	r22,68(sp)
 100bfa8:	dfc01415 	stw	ra,80(sp)
 100bfac:	1080040c 	andi	r2,r2,16
 100bfb0:	dd401015 	stw	r21,64(sp)
 100bfb4:	dd000f15 	stw	r20,60(sp)
 100bfb8:	dc800d15 	stw	r18,52(sp)
 100bfbc:	dc400c15 	stw	r17,48(sp)
 100bfc0:	dc000b15 	stw	r16,44(sp)
 100bfc4:	202d883a 	mov	r22,r4
 100bfc8:	282f883a 	mov	r23,r5
 100bfcc:	3039883a 	mov	fp,r6
 100bfd0:	d9c00a15 	stw	r7,40(sp)
 100bfd4:	10000226 	beq	r2,zero,100bfe0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 100bfd8:	21000217 	ldw	r4,8(r4)
 100bfdc:	99000415 	stw	r4,16(r19)
 100bfe0:	d8801517 	ldw	r2,84(sp)
 100bfe4:	d8c01717 	ldw	r3,92(sp)
 100bfe8:	10c0d926 	beq	r2,r3,100c350 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
 100bfec:	b0c00117 	ldw	r3,4(r22)
 100bff0:	d9800a17 	ldw	r6,40(sp)
 100bff4:	30800117 	ldw	r2,4(r6)
 100bff8:	18807626 	beq	r3,r2,100c1d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x248>
 100bffc:	b5400317 	ldw	r21,12(r22)
 100c000:	d8000905 	stb	zero,36(sp)
 100c004:	ad7fffc4 	addi	r21,r21,-1
 100c008:	00bfffc4 	movi	r2,-1
 100c00c:	a8805e26 	beq	r21,r2,100c188 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 100c010:	a80e90fa 	slli	r7,r21,3
 100c014:	99000417 	ldw	r4,16(r19)
 100c018:	d8000415 	stw	zero,16(sp)
 100c01c:	3d85883a 	add	r2,r7,r22
 100c020:	10c00517 	ldw	r3,20(r2)
 100c024:	d8000515 	stw	zero,20(sp)
 100c028:	d8000615 	stw	zero,24(sp)
 100c02c:	1880004c 	andi	r2,r3,1
 100c030:	d8000715 	stw	zero,28(sp)
 100c034:	d9000815 	stw	r4,32(sp)
 100c038:	180bd23a 	srai	r5,r3,8
 100c03c:	10007c1e 	bne	r2,zero,100c230 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a4>
 100c040:	e00d883a 	mov	r6,fp
 100c044:	1880008c 	andi	r2,r3,2
 100c048:	1000041e 	bne	r2,zero,100c05c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
 100c04c:	00bfff84 	movi	r2,-2
 100c050:	b8808126 	beq	r23,r2,100c258 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2cc>
 100c054:	00bfff44 	movi	r2,-3
 100c058:	308c703a 	and	r6,r6,r2
 100c05c:	3d85883a 	add	r2,r7,r22
 100c060:	11000417 	ldw	r4,16(r2)
 100c064:	d8801517 	ldw	r2,84(sp)
 100c068:	d9c00a17 	ldw	r7,40(sp)
 100c06c:	1147883a 	add	r3,r2,r5
 100c070:	20800017 	ldw	r2,0(r4)
 100c074:	d8c00015 	stw	r3,0(sp)
 100c078:	d8c01617 	ldw	r3,88(sp)
 100c07c:	b80b883a 	mov	r5,r23
 100c080:	d8c00115 	stw	r3,4(sp)
 100c084:	d8c01717 	ldw	r3,92(sp)
 100c088:	d8c00215 	stw	r3,8(sp)
 100c08c:	d8c00404 	addi	r3,sp,16
 100c090:	d8c00315 	stw	r3,12(sp)
 100c094:	10c00717 	ldw	r3,28(r2)
 100c098:	183ee83a 	callr	r3
 100c09c:	100f883a 	mov	r7,r2
 100c0a0:	99000217 	ldw	r4,8(r19)
 100c0a4:	d8800617 	ldw	r2,24(sp)
 100c0a8:	dc000717 	ldw	r16,28(sp)
 100c0ac:	2088b03a 	or	r4,r4,r2
 100c0b0:	00800184 	movi	r2,6
 100c0b4:	99000215 	stw	r4,8(r19)
 100c0b8:	8080ac26 	beq	r16,r2,100c36c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e0>
 100c0bc:	00800084 	movi	r2,2
 100c0c0:	8080aa26 	beq	r16,r2,100c36c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e0>
 100c0c4:	d9400903 	ldbu	r5,36(sp)
 100c0c8:	28005f1e 	bne	r5,zero,100c248 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2bc>
 100c0cc:	98c00017 	ldw	r3,0(r19)
 100c0d0:	180d883a 	mov	r6,r3
 100c0d4:	18006b26 	beq	r3,zero,100c284 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
 100c0d8:	d8c00417 	ldw	r3,16(sp)
 100c0dc:	30c06126 	beq	r6,r3,100c264 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
 100c0e0:	30000126 	beq	r6,zero,100c0e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15c>
 100c0e4:	1800071e 	bne	r3,zero,100c104 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x178>
 100c0e8:	3004c03a 	cmpne	r2,r6,zero
 100c0ec:	11c4703a 	and	r2,r2,r7
 100c0f0:	1000041e 	bne	r2,zero,100c104 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x178>
 100c0f4:	1804c03a 	cmpne	r2,r3,zero
 100c0f8:	1144703a 	and	r2,r2,r5
 100c0fc:	1005003a 	cmpeq	r2,r2,zero
 100c100:	10001f1e 	bne	r2,zero,100c180 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f4>
 100c104:	008000c4 	movi	r2,3
 100c108:	9c800317 	ldw	r18,12(r19)
 100c10c:	1100060e 	bge	r2,r4,100c128 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x19c>
 100c110:	2080004c 	andi	r2,r4,1
 100c114:	1005003a 	cmpeq	r2,r2,zero
 100c118:	10001d1e 	bne	r2,zero,100c190 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x204>
 100c11c:	98800417 	ldw	r2,16(r19)
 100c120:	1080008c 	andi	r2,r2,2
 100c124:	10001a26 	beq	r2,zero,100c190 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x204>
 100c128:	9023883a 	mov	r17,r18
 100c12c:	0480680e 	bge	zero,r18,100c2d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x344>
 100c130:	8029883a 	mov	r20,r16
 100c134:	04005e0e 	bge	zero,r16,100c2b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 100c138:	8d04f03a 	xor	r2,r17,r20
 100c13c:	00c000c4 	movi	r3,3
 100c140:	18801c0e 	bge	r3,r2,100c1b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 100c144:	1d00070e 	bge	r3,r20,100c164 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d8>
 100c148:	d8c00417 	ldw	r3,16(sp)
 100c14c:	d8800517 	ldw	r2,20(sp)
 100c150:	8025883a 	mov	r18,r16
 100c154:	98c00015 	stw	r3,0(r19)
 100c158:	98800115 	stw	r2,4(r19)
 100c15c:	a023883a 	mov	r17,r20
 100c160:	d8000905 	stb	zero,36(sp)
 100c164:	8880008c 	andi	r2,r17,2
 100c168:	9c800315 	stw	r18,12(r19)
 100c16c:	1000881e 	bne	r2,zero,100c390 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x404>
 100c170:	8880004c 	andi	r2,r17,1
 100c174:	1005003a 	cmpeq	r2,r2,zero
 100c178:	1000851e 	bne	r2,zero,100c390 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x404>
 100c17c:	99000217 	ldw	r4,8(r19)
 100c180:	00800104 	movi	r2,4
 100c184:	20bf9f1e 	bne	r4,r2,100c004 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 100c188:	d9000903 	ldbu	r4,36(sp)
 100c18c:	00001b06 	br	100c1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>
 100c190:	9000011e 	bne	r18,zero,100c198 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x20c>
 100c194:	04800044 	movi	r18,1
 100c198:	8000371e 	bne	r16,zero,100c278 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2ec>
 100c19c:	04000044 	movi	r16,1
 100c1a0:	9023883a 	mov	r17,r18
 100c1a4:	8029883a 	mov	r20,r16
 100c1a8:	8d04f03a 	xor	r2,r17,r20
 100c1ac:	00c000c4 	movi	r3,3
 100c1b0:	18bfe416 	blt	r3,r2,100c144 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b8>
 100c1b4:	8d04703a 	and	r2,r17,r20
 100c1b8:	18809e16 	blt	r3,r2,100c434 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4a8>
 100c1bc:	99000217 	ldw	r4,8(r19)
 100c1c0:	00800044 	movi	r2,1
 100c1c4:	d8800905 	stb	r2,36(sp)
 100c1c8:	98000015 	stw	zero,0(r19)
 100c1cc:	98800315 	stw	r2,12(r19)
 100c1d0:	003feb06 	br	100c180 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f4>
 100c1d4:	9f000115 	stw	fp,4(r19)
 100c1d8:	d9801517 	ldw	r6,84(sp)
 100c1dc:	99800015 	stw	r6,0(r19)
 100c1e0:	b8006916 	blt	r23,zero,100c388 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
 100c1e4:	d8c01717 	ldw	r3,92(sp)
 100c1e8:	35c5883a 	add	r2,r6,r23
 100c1ec:	18808626 	beq	r3,r2,100c408 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x47c>
 100c1f0:	00800044 	movi	r2,1
 100c1f4:	0009883a 	mov	r4,zero
 100c1f8:	98800315 	stw	r2,12(r19)
 100c1fc:	2005883a 	mov	r2,r4
 100c200:	dfc01417 	ldw	ra,80(sp)
 100c204:	df001317 	ldw	fp,76(sp)
 100c208:	ddc01217 	ldw	r23,72(sp)
 100c20c:	dd801117 	ldw	r22,68(sp)
 100c210:	dd401017 	ldw	r21,64(sp)
 100c214:	dd000f17 	ldw	r20,60(sp)
 100c218:	dcc00e17 	ldw	r19,56(sp)
 100c21c:	dc800d17 	ldw	r18,52(sp)
 100c220:	dc400c17 	ldw	r17,48(sp)
 100c224:	dc000b17 	ldw	r16,44(sp)
 100c228:	dec01504 	addi	sp,sp,84
 100c22c:	f800283a 	ret
 100c230:	d9801517 	ldw	r6,84(sp)
 100c234:	30800017 	ldw	r2,0(r6)
 100c238:	e1800054 	ori	r6,fp,1
 100c23c:	1145883a 	add	r2,r2,r5
 100c240:	11400017 	ldw	r5,0(r2)
 100c244:	003f7f06 	br	100c044 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
 100c248:	99800017 	ldw	r6,0(r19)
 100c24c:	303fa21e 	bne	r6,zero,100c0d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
 100c250:	d8c00417 	ldw	r3,16(sp)
 100c254:	003fa706 	br	100c0f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x168>
 100c258:	208000cc 	andi	r2,r4,3
 100c25c:	103f6926 	beq	r2,zero,100c004 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 100c260:	003f7c06 	br	100c054 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
 100c264:	98800117 	ldw	r2,4(r19)
 100c268:	d8c00517 	ldw	r3,20(sp)
 100c26c:	10c4b03a 	or	r2,r2,r3
 100c270:	98800115 	stw	r2,4(r19)
 100c274:	003fc206 	br	100c180 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f4>
 100c278:	8029883a 	mov	r20,r16
 100c27c:	9023883a 	mov	r17,r18
 100c280:	003fad06 	br	100c138 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 100c284:	d8c00417 	ldw	r3,16(sp)
 100c288:	d8800517 	ldw	r2,20(sp)
 100c28c:	98c00015 	stw	r3,0(r19)
 100c290:	98800115 	stw	r2,4(r19)
 100c294:	18000426 	beq	r3,zero,100c2a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x31c>
 100c298:	20002b26 	beq	r4,zero,100c348 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 100c29c:	b0800217 	ldw	r2,8(r22)
 100c2a0:	1080004c 	andi	r2,r2,1
 100c2a4:	10006126 	beq	r2,zero,100c42c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4a0>
 100c2a8:	d9c00905 	stb	r7,36(sp)
 100c2ac:	003fb406 	br	100c180 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f4>
 100c2b0:	008000c4 	movi	r2,3
 100c2b4:	14401c0e 	bge	r2,r17,100c328 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x39c>
 100c2b8:	8880004c 	andi	r2,r17,1
 100c2bc:	1005003a 	cmpeq	r2,r2,zero
 100c2c0:	10001626 	beq	r2,zero,100c31c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x390>
 100c2c4:	04000044 	movi	r16,1
 100c2c8:	8029883a 	mov	r20,r16
 100c2cc:	003f9a06 	br	100c138 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 100c2d0:	008000c4 	movi	r2,3
 100c2d4:	8029883a 	mov	r20,r16
 100c2d8:	1400090e 	bge	r2,r16,100c300 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x374>
 100c2dc:	8080004c 	andi	r2,r16,1
 100c2e0:	1005003a 	cmpeq	r2,r2,zero
 100c2e4:	10000326 	beq	r2,zero,100c2f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x368>
 100c2e8:	04400044 	movi	r17,1
 100c2ec:	8825883a 	mov	r18,r17
 100c2f0:	003f9106 	br	100c138 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 100c2f4:	b0800217 	ldw	r2,8(r22)
 100c2f8:	1080008c 	andi	r2,r2,2
 100c2fc:	103ffa26 	beq	r2,zero,100c2e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x35c>
 100c300:	b8003316 	blt	r23,zero,100c3d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x444>
 100c304:	d9001717 	ldw	r4,92(sp)
 100c308:	35c5883a 	add	r2,r6,r23
 100c30c:	20804026 	beq	r4,r2,100c410 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x484>
 100c310:	04400044 	movi	r17,1
 100c314:	8825883a 	mov	r18,r17
 100c318:	003f8606 	br	100c134 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a8>
 100c31c:	b0800217 	ldw	r2,8(r22)
 100c320:	1080008c 	andi	r2,r2,2
 100c324:	103fe726 	beq	r2,zero,100c2c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x338>
 100c328:	d9800417 	ldw	r6,16(sp)
 100c32c:	b8001a16 	blt	r23,zero,100c398 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40c>
 100c330:	35c5883a 	add	r2,r6,r23
 100c334:	d9801717 	ldw	r6,92(sp)
 100c338:	30bfe21e 	bne	r6,r2,100c2c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x338>
 100c33c:	04000184 	movi	r16,6
 100c340:	8029883a 	mov	r20,r16
 100c344:	003f7c06 	br	100c138 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 100c348:	d9c00905 	stb	r7,36(sp)
 100c34c:	003f2d06 	br	100c004 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 100c350:	d9001617 	ldw	r4,88(sp)
 100c354:	b0c00117 	ldw	r3,4(r22)
 100c358:	20800117 	ldw	r2,4(r4)
 100c35c:	18bf241e 	bne	r3,r2,100bff0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 100c360:	0009883a 	mov	r4,zero
 100c364:	9f000215 	stw	fp,8(r19)
 100c368:	003fa406 	br	100c1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>
 100c36c:	d8c00417 	ldw	r3,16(sp)
 100c370:	d8800517 	ldw	r2,20(sp)
 100c374:	39003fcc 	andi	r4,r7,255
 100c378:	9c000315 	stw	r16,12(r19)
 100c37c:	98c00015 	stw	r3,0(r19)
 100c380:	98800115 	stw	r2,4(r19)
 100c384:	003f9d06 	br	100c1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>
 100c388:	00bfff84 	movi	r2,-2
 100c38c:	b8802326 	beq	r23,r2,100c41c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 100c390:	0009883a 	mov	r4,zero
 100c394:	003f9906 	br	100c1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>
 100c398:	00bfff84 	movi	r2,-2
 100c39c:	b8bfc926 	beq	r23,r2,100c2c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x338>
 100c3a0:	d8c00a17 	ldw	r3,40(sp)
 100c3a4:	d9001717 	ldw	r4,92(sp)
 100c3a8:	d9c01617 	ldw	r7,88(sp)
 100c3ac:	18800017 	ldw	r2,0(r3)
 100c3b0:	d9000015 	stw	r4,0(sp)
 100c3b4:	d9000a17 	ldw	r4,40(sp)
 100c3b8:	10c00817 	ldw	r3,32(r2)
 100c3bc:	b80b883a 	mov	r5,r23
 100c3c0:	183ee83a 	callr	r3
 100c3c4:	1021883a 	mov	r16,r2
 100c3c8:	1029883a 	mov	r20,r2
 100c3cc:	003f5a06 	br	100c138 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 100c3d0:	00bfff84 	movi	r2,-2
 100c3d4:	b8bfce26 	beq	r23,r2,100c310 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x384>
 100c3d8:	d8c00a17 	ldw	r3,40(sp)
 100c3dc:	d9001717 	ldw	r4,92(sp)
 100c3e0:	d9c01617 	ldw	r7,88(sp)
 100c3e4:	18800017 	ldw	r2,0(r3)
 100c3e8:	d9000015 	stw	r4,0(sp)
 100c3ec:	d9000a17 	ldw	r4,40(sp)
 100c3f0:	10c00817 	ldw	r3,32(r2)
 100c3f4:	b80b883a 	mov	r5,r23
 100c3f8:	183ee83a 	callr	r3
 100c3fc:	1023883a 	mov	r17,r2
 100c400:	1025883a 	mov	r18,r2
 100c404:	003f4b06 	br	100c134 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a8>
 100c408:	00800184 	movi	r2,6
 100c40c:	003f7906 	br	100c1f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x268>
 100c410:	04400184 	movi	r17,6
 100c414:	8825883a 	mov	r18,r17
 100c418:	003f4606 	br	100c134 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a8>
 100c41c:	00800044 	movi	r2,1
 100c420:	0009883a 	mov	r4,zero
 100c424:	98800315 	stw	r2,12(r19)
 100c428:	003f7406 	br	100c1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>
 100c42c:	39003fcc 	andi	r4,r7,255
 100c430:	003f7206 	br	100c1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>
 100c434:	00800084 	movi	r2,2
 100c438:	01000044 	movi	r4,1
 100c43c:	98800315 	stw	r2,12(r19)
 100c440:	98000015 	stw	zero,0(r19)
 100c444:	003f6d06 	br	100c1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>

0100c448 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 100c448:	20c00017 	ldw	r3,0(r4)
 100c44c:	defffa04 	addi	sp,sp,-24
 100c450:	dc000415 	stw	r16,16(sp)
 100c454:	1a000617 	ldw	r8,24(r3)
 100c458:	3021883a 	mov	r16,r6
 100c45c:	31800017 	ldw	r6,0(r6)
 100c460:	00800404 	movi	r2,16
 100c464:	dfc00515 	stw	ra,20(sp)
 100c468:	d8800215 	stw	r2,8(sp)
 100c46c:	d8000015 	stw	zero,0(sp)
 100c470:	d8000115 	stw	zero,4(sp)
 100c474:	d8000315 	stw	zero,12(sp)
 100c478:	d80f883a 	mov	r7,sp
 100c47c:	403ee83a 	callr	r8
 100c480:	d8800117 	ldw	r2,4(sp)
 100c484:	00c00184 	movi	r3,6
 100c488:	0009883a 	mov	r4,zero
 100c48c:	1080018c 	andi	r2,r2,6
 100c490:	10c0031e 	bne	r2,r3,100c4a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
 100c494:	d8800017 	ldw	r2,0(sp)
 100c498:	01000044 	movi	r4,1
 100c49c:	80800015 	stw	r2,0(r16)
 100c4a0:	2005883a 	mov	r2,r4
 100c4a4:	dfc00517 	ldw	ra,20(sp)
 100c4a8:	dc000417 	ldw	r16,16(sp)
 100c4ac:	dec00604 	addi	sp,sp,24
 100c4b0:	f800283a 	ret

0100c4b4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
 100c4b4:	d8800017 	ldw	r2,0(sp)
 100c4b8:	00c00184 	movi	r3,6
 100c4bc:	1180021e 	bne	r2,r6,100c4c8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
 100c4c0:	1805883a 	mov	r2,r3
 100c4c4:	f800283a 	ret
 100c4c8:	00c00044 	movi	r3,1
 100c4cc:	1805883a 	mov	r2,r3
 100c4d0:	f800283a 	ret

0100c4d4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 100c4d4:	defffe04 	addi	sp,sp,-8
 100c4d8:	008040b4 	movhi	r2,258
 100c4dc:	1095b404 	addi	r2,r2,22224
 100c4e0:	dc400015 	stw	r17,0(sp)
 100c4e4:	20800015 	stw	r2,0(r4)
 100c4e8:	2023883a 	mov	r17,r4
 100c4ec:	dfc00115 	stw	ra,4(sp)
 100c4f0:	100da200 	call	100da20 <_ZNSt9type_infoD2Ev>
 100c4f4:	8809883a 	mov	r4,r17
 100c4f8:	dfc00117 	ldw	ra,4(sp)
 100c4fc:	dc400017 	ldw	r17,0(sp)
 100c500:	dec00204 	addi	sp,sp,8
 100c504:	100d6681 	jmpi	100d668 <_ZdlPv>

0100c508 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 100c508:	008040b4 	movhi	r2,258
 100c50c:	1095b404 	addi	r2,r2,22224
 100c510:	20800015 	stw	r2,0(r4)
 100c514:	100da201 	jmpi	100da20 <_ZNSt9type_infoD2Ev>

0100c518 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
 100c518:	008040b4 	movhi	r2,258
 100c51c:	1095b404 	addi	r2,r2,22224
 100c520:	20800015 	stw	r2,0(r4)
 100c524:	100da201 	jmpi	100da20 <_ZNSt9type_infoD2Ev>

0100c528 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 100c528:	2811883a 	mov	r8,r5
 100c52c:	20c00117 	ldw	r3,4(r4)
 100c530:	40800117 	ldw	r2,4(r8)
 100c534:	deffff04 	addi	sp,sp,-4
 100c538:	dfc00015 	stw	ra,0(sp)
 100c53c:	200b883a 	mov	r5,r4
 100c540:	02400044 	movi	r9,1
 100c544:	18800426 	beq	r3,r2,100c558 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
 100c548:	008000c4 	movi	r2,3
 100c54c:	4009883a 	mov	r4,r8
 100c550:	0013883a 	mov	r9,zero
 100c554:	11c0042e 	bgeu	r2,r7,100c568 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
 100c558:	4805883a 	mov	r2,r9
 100c55c:	dfc00017 	ldw	ra,0(sp)
 100c560:	dec00104 	addi	sp,sp,4
 100c564:	f800283a 	ret
 100c568:	40800017 	ldw	r2,0(r8)
 100c56c:	10c00517 	ldw	r3,20(r2)
 100c570:	183ee83a 	callr	r3
 100c574:	12403fcc 	andi	r9,r2,255
 100c578:	4805883a 	mov	r2,r9
 100c57c:	dfc00017 	ldw	ra,0(sp)
 100c580:	dec00104 	addi	sp,sp,4
 100c584:	f800283a 	ret

0100c588 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 100c588:	20c00117 	ldw	r3,4(r4)
 100c58c:	28800117 	ldw	r2,4(r5)
 100c590:	0009883a 	mov	r4,zero
 100c594:	1880061e 	bne	r3,r2,100c5b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
 100c598:	00800184 	movi	r2,6
 100c59c:	38800115 	stw	r2,4(r7)
 100c5a0:	00800204 	movi	r2,8
 100c5a4:	39800015 	stw	r6,0(r7)
 100c5a8:	38800315 	stw	r2,12(r7)
 100c5ac:	01000044 	movi	r4,1
 100c5b0:	2005883a 	mov	r2,r4
 100c5b4:	f800283a 	ret

0100c5b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 100c5b8:	da000017 	ldw	r8,0(sp)
 100c5bc:	d8800217 	ldw	r2,8(sp)
 100c5c0:	d9400317 	ldw	r5,12(sp)
 100c5c4:	40800926 	beq	r8,r2,100c5ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 100c5c8:	21000117 	ldw	r4,4(r4)
 100c5cc:	38800117 	ldw	r2,4(r7)
 100c5d0:	2080041e 	bne	r4,r2,100c5e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
 100c5d4:	00800044 	movi	r2,1
 100c5d8:	28800315 	stw	r2,12(r5)
 100c5dc:	2a000015 	stw	r8,0(r5)
 100c5e0:	29800115 	stw	r6,4(r5)
 100c5e4:	0005883a 	mov	r2,zero
 100c5e8:	f800283a 	ret
 100c5ec:	d8800117 	ldw	r2,4(sp)
 100c5f0:	21000117 	ldw	r4,4(r4)
 100c5f4:	10c00117 	ldw	r3,4(r2)
 100c5f8:	20fff41e 	bne	r4,r3,100c5cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 100c5fc:	29800215 	stw	r6,8(r5)
 100c600:	003ff806 	br	100c5e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

0100c604 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 100c604:	20c00117 	ldw	r3,4(r4)
 100c608:	28800117 	ldw	r2,4(r5)
 100c60c:	deffff04 	addi	sp,sp,-4
 100c610:	dfc00015 	stw	ra,0(sp)
 100c614:	02000044 	movi	r8,1
 100c618:	3819883a 	mov	r12,r7
 100c61c:	18801526 	beq	r3,r2,100c674 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x70>
 100c620:	28800017 	ldw	r2,0(r5)
 100c624:	23400017 	ldw	r13,0(r4)
 100c628:	39c0004c 	andi	r7,r7,1
 100c62c:	127fff17 	ldw	r9,-4(r2)
 100c630:	68ffff17 	ldw	r3,-4(r13)
 100c634:	380f003a 	cmpeq	r7,r7,zero
 100c638:	48800117 	ldw	r2,4(r9)
 100c63c:	1a000117 	ldw	r8,4(r3)
 100c640:	4080101e 	bne	r8,r2,100c684 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 100c644:	38000f1e 	bne	r7,zero,100c684 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 100c648:	21c00217 	ldw	r7,8(r4)
 100c64c:	28c00217 	ldw	r3,8(r5)
 100c650:	01c4303a 	nor	r2,zero,r7
 100c654:	10c4703a 	and	r2,r2,r3
 100c658:	39c0004c 	andi	r7,r7,1
 100c65c:	1000091e 	bne	r2,zero,100c684 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 100c660:	38000d26 	beq	r7,zero,100c698 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x94>
 100c664:	68c00617 	ldw	r3,24(r13)
 100c668:	600f883a 	mov	r7,r12
 100c66c:	183ee83a 	callr	r3
 100c670:	12003fcc 	andi	r8,r2,255
 100c674:	4005883a 	mov	r2,r8
 100c678:	dfc00017 	ldw	ra,0(sp)
 100c67c:	dec00104 	addi	sp,sp,4
 100c680:	f800283a 	ret
 100c684:	0011883a 	mov	r8,zero
 100c688:	4005883a 	mov	r2,r8
 100c68c:	dfc00017 	ldw	ra,0(sp)
 100c690:	dec00104 	addi	sp,sp,4
 100c694:	f800283a 	ret
 100c698:	00bfff84 	movi	r2,-2
 100c69c:	68c00617 	ldw	r3,24(r13)
 100c6a0:	6098703a 	and	r12,r12,r2
 100c6a4:	600f883a 	mov	r7,r12
 100c6a8:	183ee83a 	callr	r3
 100c6ac:	12003fcc 	andi	r8,r2,255
 100c6b0:	003ff006 	br	100c674 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x70>

0100c6b4 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 100c6b4:	defffe04 	addi	sp,sp,-8
 100c6b8:	008040b4 	movhi	r2,258
 100c6bc:	1095cb04 	addi	r2,r2,22316
 100c6c0:	dc400015 	stw	r17,0(sp)
 100c6c4:	20800015 	stw	r2,0(r4)
 100c6c8:	2023883a 	mov	r17,r4
 100c6cc:	dfc00115 	stw	ra,4(sp)
 100c6d0:	100da200 	call	100da20 <_ZNSt9type_infoD2Ev>
 100c6d4:	8809883a 	mov	r4,r17
 100c6d8:	dfc00117 	ldw	ra,4(sp)
 100c6dc:	dc400017 	ldw	r17,0(sp)
 100c6e0:	dec00204 	addi	sp,sp,8
 100c6e4:	100d6681 	jmpi	100d668 <_ZdlPv>

0100c6e8 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 100c6e8:	008040b4 	movhi	r2,258
 100c6ec:	1095cb04 	addi	r2,r2,22316
 100c6f0:	20800015 	stw	r2,0(r4)
 100c6f4:	100da201 	jmpi	100da20 <_ZNSt9type_infoD2Ev>

0100c6f8 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>:
 100c6f8:	008040b4 	movhi	r2,258
 100c6fc:	1095cb04 	addi	r2,r2,22316
 100c700:	20800015 	stw	r2,0(r4)
 100c704:	100da201 	jmpi	100da20 <_ZNSt9type_infoD2Ev>

0100c708 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 100c708:	21000317 	ldw	r4,12(r4)
 100c70c:	29400317 	ldw	r5,12(r5)
 100c710:	deffff04 	addi	sp,sp,-4
 100c714:	20800017 	ldw	r2,0(r4)
 100c718:	dfc00015 	stw	ra,0(sp)
 100c71c:	39c00084 	addi	r7,r7,2
 100c720:	10c00417 	ldw	r3,16(r2)
 100c724:	183ee83a 	callr	r3
 100c728:	10803fcc 	andi	r2,r2,255
 100c72c:	dfc00017 	ldw	ra,0(sp)
 100c730:	dec00104 	addi	sp,sp,4
 100c734:	f800283a 	ret

0100c738 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 100c738:	defffe04 	addi	sp,sp,-8
 100c73c:	008040b4 	movhi	r2,258
 100c740:	1095e004 	addi	r2,r2,22400
 100c744:	dc400015 	stw	r17,0(sp)
 100c748:	20800015 	stw	r2,0(r4)
 100c74c:	2023883a 	mov	r17,r4
 100c750:	dfc00115 	stw	ra,4(sp)
 100c754:	100da200 	call	100da20 <_ZNSt9type_infoD2Ev>
 100c758:	8809883a 	mov	r4,r17
 100c75c:	dfc00117 	ldw	ra,4(sp)
 100c760:	dc400017 	ldw	r17,0(sp)
 100c764:	dec00204 	addi	sp,sp,8
 100c768:	100d6681 	jmpi	100d668 <_ZdlPv>

0100c76c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 100c76c:	008040b4 	movhi	r2,258
 100c770:	1095e004 	addi	r2,r2,22400
 100c774:	20800015 	stw	r2,0(r4)
 100c778:	100da201 	jmpi	100da20 <_ZNSt9type_infoD2Ev>

0100c77c <_ZN10__cxxabiv123__fundamental_type_infoD2Ev>:
 100c77c:	008040b4 	movhi	r2,258
 100c780:	1095e004 	addi	r2,r2,22400
 100c784:	20800015 	stw	r2,0(r4)
 100c788:	100da201 	jmpi	100da20 <_ZNSt9type_infoD2Ev>

0100c78c <_Z12read_uleb128PKhPj>:
 100c78c:	000d883a 	mov	r6,zero
 100c790:	000f883a 	mov	r7,zero
 100c794:	20c00007 	ldb	r3,0(r4)
 100c798:	21000044 	addi	r4,r4,1
 100c79c:	18801fcc 	andi	r2,r3,127
 100c7a0:	1184983a 	sll	r2,r2,r6
 100c7a4:	318001c4 	addi	r6,r6,7
 100c7a8:	388eb03a 	or	r7,r7,r2
 100c7ac:	183ff916 	blt	r3,zero,100c794 <_Z12read_uleb128PKhPj+0x8>
 100c7b0:	2005883a 	mov	r2,r4
 100c7b4:	29c00015 	stw	r7,0(r5)
 100c7b8:	f800283a 	ret

0100c7bc <_Z12read_sleb128PKhPi>:
 100c7bc:	000f883a 	mov	r7,zero
 100c7c0:	0011883a 	mov	r8,zero
 100c7c4:	20c00007 	ldb	r3,0(r4)
 100c7c8:	21000044 	addi	r4,r4,1
 100c7cc:	19803fcc 	andi	r6,r3,255
 100c7d0:	30801fcc 	andi	r2,r6,127
 100c7d4:	11c4983a 	sll	r2,r2,r7
 100c7d8:	39c001c4 	addi	r7,r7,7
 100c7dc:	4090b03a 	or	r8,r8,r2
 100c7e0:	183ff816 	blt	r3,zero,100c7c4 <_Z12read_sleb128PKhPi+0x8>
 100c7e4:	008007c4 	movi	r2,31
 100c7e8:	11c00636 	bltu	r2,r7,100c804 <_Z12read_sleb128PKhPi+0x48>
 100c7ec:	3080100c 	andi	r2,r6,64
 100c7f0:	10000426 	beq	r2,zero,100c804 <_Z12read_sleb128PKhPi+0x48>
 100c7f4:	00800044 	movi	r2,1
 100c7f8:	11c4983a 	sll	r2,r2,r7
 100c7fc:	0085c83a 	sub	r2,zero,r2
 100c800:	4090b03a 	or	r8,r8,r2
 100c804:	2005883a 	mov	r2,r4
 100c808:	2a000015 	stw	r8,0(r5)
 100c80c:	f800283a 	ret

0100c810 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
 100c810:	28800017 	ldw	r2,0(r5)
 100c814:	defffb04 	addi	sp,sp,-20
 100c818:	30c00017 	ldw	r3,0(r6)
 100c81c:	dc400215 	stw	r17,8(sp)
 100c820:	2823883a 	mov	r17,r5
 100c824:	11400217 	ldw	r5,8(r2)
 100c828:	dc800315 	stw	r18,12(sp)
 100c82c:	dc000115 	stw	r16,4(sp)
 100c830:	dfc00415 	stw	ra,16(sp)
 100c834:	2021883a 	mov	r16,r4
 100c838:	d8c00015 	stw	r3,0(sp)
 100c83c:	8809883a 	mov	r4,r17
 100c840:	3025883a 	mov	r18,r6
 100c844:	283ee83a 	callr	r5
 100c848:	10803fcc 	andi	r2,r2,255
 100c84c:	880b883a 	mov	r5,r17
 100c850:	8009883a 	mov	r4,r16
 100c854:	d80d883a 	mov	r6,sp
 100c858:	01c00044 	movi	r7,1
 100c85c:	10000326 	beq	r2,zero,100c86c <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
 100c860:	d8800017 	ldw	r2,0(sp)
 100c864:	10c00017 	ldw	r3,0(r2)
 100c868:	d8c00015 	stw	r3,0(sp)
 100c86c:	80800017 	ldw	r2,0(r16)
 100c870:	10c00417 	ldw	r3,16(r2)
 100c874:	183ee83a 	callr	r3
 100c878:	10803fcc 	andi	r2,r2,255
 100c87c:	0007883a 	mov	r3,zero
 100c880:	10000326 	beq	r2,zero,100c890 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
 100c884:	d8800017 	ldw	r2,0(sp)
 100c888:	00c00044 	movi	r3,1
 100c88c:	90800015 	stw	r2,0(r18)
 100c890:	1805883a 	mov	r2,r3
 100c894:	dfc00417 	ldw	ra,16(sp)
 100c898:	dc800317 	ldw	r18,12(sp)
 100c89c:	dc400217 	ldw	r17,8(sp)
 100c8a0:	dc000117 	ldw	r16,4(sp)
 100c8a4:	dec00504 	addi	sp,sp,20
 100c8a8:	f800283a 	ret

0100c8ac <_Z28read_encoded_value_with_basehjPKhPj>:
 100c8ac:	defff904 	addi	sp,sp,-28
 100c8b0:	dc400215 	stw	r17,8(sp)
 100c8b4:	00801404 	movi	r2,80
 100c8b8:	24403fcc 	andi	r17,r4,255
 100c8bc:	dd000515 	stw	r20,20(sp)
 100c8c0:	dcc00415 	stw	r19,16(sp)
 100c8c4:	dc800315 	stw	r18,12(sp)
 100c8c8:	dc000115 	stw	r16,4(sp)
 100c8cc:	dfc00615 	stw	ra,24(sp)
 100c8d0:	2025883a 	mov	r18,r4
 100c8d4:	2829883a 	mov	r20,r5
 100c8d8:	3021883a 	mov	r16,r6
 100c8dc:	3827883a 	mov	r19,r7
 100c8e0:	88801826 	beq	r17,r2,100c944 <_Z28read_encoded_value_with_basehjPKhPj+0x98>
 100c8e4:	88c003cc 	andi	r3,r17,15
 100c8e8:	00800304 	movi	r2,12
 100c8ec:	10c0012e 	bgeu	r2,r3,100c8f4 <_Z28read_encoded_value_with_basehjPKhPj+0x48>
 100c8f0:	100e2940 	call	100e294 <abort>
 100c8f4:	18c5883a 	add	r2,r3,r3
 100c8f8:	1085883a 	add	r2,r2,r2
 100c8fc:	00c04074 	movhi	r3,257
 100c900:	18f24404 	addi	r3,r3,-14064
 100c904:	10c5883a 	add	r2,r2,r3
 100c908:	11000017 	ldw	r4,0(r2)
 100c90c:	2000683a 	jmp	r4
 100c910:	0100c980 	call	100c98 <OSCtxSw_SWITCH_PC+0x100c58>
 100c914:	0100ca68 	cmpgeui	r4,zero,809
 100c918:	0100ca14 	movui	r4,808
 100c91c:	0100c980 	call	100c98 <OSCtxSw_SWITCH_PC+0x100c58>
 100c920:	0100c9d8 	cmpnei	r4,zero,807
 100c924:	0100c8f0 	cmpltui	r4,zero,803
 100c928:	0100c8f0 	cmpltui	r4,zero,803
 100c92c:	0100c8f0 	cmpltui	r4,zero,803
 100c930:	0100c8f0 	cmpltui	r4,zero,803
 100c934:	0100ca50 	cmplti	r4,zero,809
 100c938:	0100ca2c 	andhi	r4,zero,808
 100c93c:	0100c980 	call	100c98 <OSCtxSw_SWITCH_PC+0x100c58>
 100c940:	0100c9d8 	cmpnei	r4,zero,807
 100c944:	308000c4 	addi	r2,r6,3
 100c948:	00ffff04 	movi	r3,-4
 100c94c:	10c4703a 	and	r2,r2,r3
 100c950:	11000017 	ldw	r4,0(r2)
 100c954:	11400104 	addi	r5,r2,4
 100c958:	2805883a 	mov	r2,r5
 100c95c:	99000015 	stw	r4,0(r19)
 100c960:	dfc00617 	ldw	ra,24(sp)
 100c964:	dd000517 	ldw	r20,20(sp)
 100c968:	dcc00417 	ldw	r19,16(sp)
 100c96c:	dc800317 	ldw	r18,12(sp)
 100c970:	dc400217 	ldw	r17,8(sp)
 100c974:	dc000117 	ldw	r16,4(sp)
 100c978:	dec00704 	addi	sp,sp,28
 100c97c:	f800283a 	ret
 100c980:	30800043 	ldbu	r2,1(r6)
 100c984:	30c00083 	ldbu	r3,2(r6)
 100c988:	310000c3 	ldbu	r4,3(r6)
 100c98c:	31400003 	ldbu	r5,0(r6)
 100c990:	1004923a 	slli	r2,r2,8
 100c994:	1806943a 	slli	r3,r3,16
 100c998:	2008963a 	slli	r4,r4,24
 100c99c:	1144b03a 	or	r2,r2,r5
 100c9a0:	1886b03a 	or	r3,r3,r2
 100c9a4:	20c8b03a 	or	r4,r4,r3
 100c9a8:	31400104 	addi	r5,r6,4
 100c9ac:	203fea26 	beq	r4,zero,100c958 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 100c9b0:	88c01c0c 	andi	r3,r17,112
 100c9b4:	00800404 	movi	r2,16
 100c9b8:	18801426 	beq	r3,r2,100ca0c <_Z28read_encoded_value_with_basehjPKhPj+0x160>
 100c9bc:	90803fcc 	andi	r2,r18,255
 100c9c0:	1080201c 	xori	r2,r2,128
 100c9c4:	10bfe004 	addi	r2,r2,-128
 100c9c8:	2509883a 	add	r4,r4,r20
 100c9cc:	103fe20e 	bge	r2,zero,100c958 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 100c9d0:	21000017 	ldw	r4,0(r4)
 100c9d4:	003fe006 	br	100c958 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 100c9d8:	30800043 	ldbu	r2,1(r6)
 100c9dc:	31800083 	ldbu	r6,2(r6)
 100c9e0:	820000c3 	ldbu	r8,3(r16)
 100c9e4:	1004923a 	slli	r2,r2,8
 100c9e8:	82400003 	ldbu	r9,0(r16)
 100c9ec:	300c943a 	slli	r6,r6,16
 100c9f0:	4010963a 	slli	r8,r8,24
 100c9f4:	1244b03a 	or	r2,r2,r9
 100c9f8:	308cb03a 	or	r6,r6,r2
 100c9fc:	4184b03a 	or	r2,r8,r6
 100ca00:	1009883a 	mov	r4,r2
 100ca04:	81400204 	addi	r5,r16,8
 100ca08:	003fe806 	br	100c9ac <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 100ca0c:	8029883a 	mov	r20,r16
 100ca10:	003fea06 	br	100c9bc <_Z28read_encoded_value_with_basehjPKhPj+0x110>
 100ca14:	30800043 	ldbu	r2,1(r6)
 100ca18:	30c00003 	ldbu	r3,0(r6)
 100ca1c:	31400084 	addi	r5,r6,2
 100ca20:	1004923a 	slli	r2,r2,8
 100ca24:	10c8b03a 	or	r4,r2,r3
 100ca28:	003fe006 	br	100c9ac <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 100ca2c:	30800043 	ldbu	r2,1(r6)
 100ca30:	30c00003 	ldbu	r3,0(r6)
 100ca34:	31400084 	addi	r5,r6,2
 100ca38:	1004923a 	slli	r2,r2,8
 100ca3c:	10c4b03a 	or	r2,r2,r3
 100ca40:	113fffcc 	andi	r4,r2,65535
 100ca44:	2120001c 	xori	r4,r4,32768
 100ca48:	21200004 	addi	r4,r4,-32768
 100ca4c:	003fd706 	br	100c9ac <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 100ca50:	3009883a 	mov	r4,r6
 100ca54:	d80b883a 	mov	r5,sp
 100ca58:	100c7bc0 	call	100c7bc <_Z12read_sleb128PKhPi>
 100ca5c:	d9000017 	ldw	r4,0(sp)
 100ca60:	100b883a 	mov	r5,r2
 100ca64:	003fd106 	br	100c9ac <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 100ca68:	3009883a 	mov	r4,r6
 100ca6c:	d80b883a 	mov	r5,sp
 100ca70:	100c78c0 	call	100c78c <_Z12read_uleb128PKhPj>
 100ca74:	d9000017 	ldw	r4,0(sp)
 100ca78:	100b883a 	mov	r5,r2
 100ca7c:	003fcb06 	br	100c9ac <_Z28read_encoded_value_with_basehjPKhPj+0x100>

0100ca80 <_Z21base_of_encoded_valuehP15_Unwind_Context>:
 100ca80:	deffff04 	addi	sp,sp,-4
 100ca84:	21003fcc 	andi	r4,r4,255
 100ca88:	00803fc4 	movi	r2,255
 100ca8c:	dfc00015 	stw	ra,0(sp)
 100ca90:	20800c26 	beq	r4,r2,100cac4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 100ca94:	21001c0c 	andi	r4,r4,112
 100ca98:	00800804 	movi	r2,32
 100ca9c:	20800d26 	beq	r4,r2,100cad4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
 100caa0:	1100070e 	bge	r2,r4,100cac0 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
 100caa4:	00801004 	movi	r2,64
 100caa8:	20801126 	beq	r4,r2,100caf0 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
 100caac:	00801404 	movi	r2,80
 100cab0:	20800426 	beq	r4,r2,100cac4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 100cab4:	00800c04 	movi	r2,48
 100cab8:	20801126 	beq	r4,r2,100cb00 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
 100cabc:	100e2940 	call	100e294 <abort>
 100cac0:	2000081e 	bne	r4,zero,100cae4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
 100cac4:	0005883a 	mov	r2,zero
 100cac8:	dfc00017 	ldw	ra,0(sp)
 100cacc:	dec00104 	addi	sp,sp,4
 100cad0:	f800283a 	ret
 100cad4:	2809883a 	mov	r4,r5
 100cad8:	dfc00017 	ldw	ra,0(sp)
 100cadc:	dec00104 	addi	sp,sp,4
 100cae0:	100de041 	jmpi	100de04 <_Unwind_GetTextRelBase>
 100cae4:	00800404 	movi	r2,16
 100cae8:	20bff626 	beq	r4,r2,100cac4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 100caec:	100e2940 	call	100e294 <abort>
 100caf0:	2809883a 	mov	r4,r5
 100caf4:	dfc00017 	ldw	ra,0(sp)
 100caf8:	dec00104 	addi	sp,sp,4
 100cafc:	100ddec1 	jmpi	100ddec <_Unwind_GetRegionStart>
 100cb00:	2809883a 	mov	r4,r5
 100cb04:	dfc00017 	ldw	ra,0(sp)
 100cb08:	dec00104 	addi	sp,sp,4
 100cb0c:	100ddfc1 	jmpi	100ddfc <_Unwind_GetDataRelBase>

0100cb10 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 100cb10:	defffa04 	addi	sp,sp,-24
 100cb14:	dc800415 	stw	r18,16(sp)
 100cb18:	dc400315 	stw	r17,12(sp)
 100cb1c:	dc000215 	stw	r16,8(sp)
 100cb20:	dfc00515 	stw	ra,20(sp)
 100cb24:	2021883a 	mov	r16,r4
 100cb28:	000f883a 	mov	r7,zero
 100cb2c:	3023883a 	mov	r17,r6
 100cb30:	2825883a 	mov	r18,r5
 100cb34:	20000226 	beq	r4,zero,100cb40 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 100cb38:	100ddec0 	call	100ddec <_Unwind_GetRegionStart>
 100cb3c:	100f883a 	mov	r7,r2
 100cb40:	89c00015 	stw	r7,0(r17)
 100cb44:	90c00003 	ldbu	r3,0(r18)
 100cb48:	800b883a 	mov	r5,r16
 100cb4c:	00803fc4 	movi	r2,255
 100cb50:	1c003fcc 	andi	r16,r3,255
 100cb54:	91800044 	addi	r6,r18,1
 100cb58:	8009883a 	mov	r4,r16
 100cb5c:	18802226 	beq	r3,r2,100cbe8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
 100cb60:	d9800115 	stw	r6,4(sp)
 100cb64:	100ca800 	call	100ca80 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 100cb68:	d9800117 	ldw	r6,4(sp)
 100cb6c:	8009883a 	mov	r4,r16
 100cb70:	100b883a 	mov	r5,r2
 100cb74:	89c00104 	addi	r7,r17,4
 100cb78:	100c8ac0 	call	100c8ac <_Z28read_encoded_value_with_basehjPKhPj>
 100cb7c:	100d883a 	mov	r6,r2
 100cb80:	30800003 	ldbu	r2,0(r6)
 100cb84:	31c00044 	addi	r7,r6,1
 100cb88:	00c03fc4 	movi	r3,255
 100cb8c:	d80b883a 	mov	r5,sp
 100cb90:	3809883a 	mov	r4,r7
 100cb94:	88800505 	stb	r2,20(r17)
 100cb98:	10c01b26 	beq	r2,r3,100cc08 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
 100cb9c:	100c78c0 	call	100c78c <_Z12read_uleb128PKhPj>
 100cba0:	100f883a 	mov	r7,r2
 100cba4:	d8800017 	ldw	r2,0(sp)
 100cba8:	3885883a 	add	r2,r7,r2
 100cbac:	88800315 	stw	r2,12(r17)
 100cbb0:	38800003 	ldbu	r2,0(r7)
 100cbb4:	39000044 	addi	r4,r7,1
 100cbb8:	d80b883a 	mov	r5,sp
 100cbbc:	88800545 	stb	r2,21(r17)
 100cbc0:	100c78c0 	call	100c78c <_Z12read_uleb128PKhPj>
 100cbc4:	d8c00017 	ldw	r3,0(sp)
 100cbc8:	10c9883a 	add	r4,r2,r3
 100cbcc:	89000415 	stw	r4,16(r17)
 100cbd0:	dfc00517 	ldw	ra,20(sp)
 100cbd4:	dc800417 	ldw	r18,16(sp)
 100cbd8:	dc400317 	ldw	r17,12(sp)
 100cbdc:	dc000217 	ldw	r16,8(sp)
 100cbe0:	dec00604 	addi	sp,sp,24
 100cbe4:	f800283a 	ret
 100cbe8:	89c00115 	stw	r7,4(r17)
 100cbec:	30800003 	ldbu	r2,0(r6)
 100cbf0:	31c00044 	addi	r7,r6,1
 100cbf4:	00c03fc4 	movi	r3,255
 100cbf8:	d80b883a 	mov	r5,sp
 100cbfc:	3809883a 	mov	r4,r7
 100cc00:	88800505 	stb	r2,20(r17)
 100cc04:	10ffe51e 	bne	r2,r3,100cb9c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
 100cc08:	88000315 	stw	zero,12(r17)
 100cc0c:	003fe806 	br	100cbb0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

0100cc10 <_Z15get_ttype_entryP16lsda_header_infoj>:
 100cc10:	defffe04 	addi	sp,sp,-8
 100cc14:	dfc00115 	stw	ra,4(sp)
 100cc18:	21c00503 	ldbu	r7,20(r4)
 100cc1c:	00803fc4 	movi	r2,255
 100cc20:	38801a26 	beq	r7,r2,100cc8c <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
 100cc24:	38c001cc 	andi	r3,r7,7
 100cc28:	00800084 	movi	r2,2
 100cc2c:	18801326 	beq	r3,r2,100cc7c <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
 100cc30:	10c0050e 	bge	r2,r3,100cc48 <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
 100cc34:	008000c4 	movi	r2,3
 100cc38:	18800426 	beq	r3,r2,100cc4c <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
 100cc3c:	00800104 	movi	r2,4
 100cc40:	18801026 	beq	r3,r2,100cc84 <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
 100cc44:	100e2940 	call	100e294 <abort>
 100cc48:	183ffe1e 	bne	r3,zero,100cc44 <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
 100cc4c:	2945883a 	add	r2,r5,r5
 100cc50:	1085883a 	add	r2,r2,r2
 100cc54:	21800317 	ldw	r6,12(r4)
 100cc58:	21400217 	ldw	r5,8(r4)
 100cc5c:	3809883a 	mov	r4,r7
 100cc60:	308dc83a 	sub	r6,r6,r2
 100cc64:	d80f883a 	mov	r7,sp
 100cc68:	100c8ac0 	call	100c8ac <_Z28read_encoded_value_with_basehjPKhPj>
 100cc6c:	d8800017 	ldw	r2,0(sp)
 100cc70:	dfc00117 	ldw	ra,4(sp)
 100cc74:	dec00204 	addi	sp,sp,8
 100cc78:	f800283a 	ret
 100cc7c:	2945883a 	add	r2,r5,r5
 100cc80:	003ff406 	br	100cc54 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 100cc84:	280490fa 	slli	r2,r5,3
 100cc88:	003ff206 	br	100cc54 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 100cc8c:	0005883a 	mov	r2,zero
 100cc90:	003ff006 	br	100cc54 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

0100cc94 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
 100cc94:	20800317 	ldw	r2,12(r4)
 100cc98:	defffa04 	addi	sp,sp,-24
 100cc9c:	dc800415 	stw	r18,16(sp)
 100cca0:	11c5c83a 	sub	r2,r2,r7
 100cca4:	dc400315 	stw	r17,12(sp)
 100cca8:	dc000215 	stw	r16,8(sp)
 100ccac:	dfc00515 	stw	ra,20(sp)
 100ccb0:	2023883a 	mov	r17,r4
 100ccb4:	d9800115 	stw	r6,4(sp)
 100ccb8:	2825883a 	mov	r18,r5
 100ccbc:	143fffc4 	addi	r16,r2,-1
 100ccc0:	8009883a 	mov	r4,r16
 100ccc4:	d80b883a 	mov	r5,sp
 100ccc8:	100c78c0 	call	100c78c <_Z12read_uleb128PKhPj>
 100cccc:	1021883a 	mov	r16,r2
 100ccd0:	d8800017 	ldw	r2,0(sp)
 100ccd4:	8809883a 	mov	r4,r17
 100ccd8:	100b883a 	mov	r5,r2
 100ccdc:	10000826 	beq	r2,zero,100cd00 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
 100cce0:	100cc100 	call	100cc10 <_Z15get_ttype_entryP16lsda_header_infoj>
 100cce4:	1009883a 	mov	r4,r2
 100cce8:	900b883a 	mov	r5,r18
 100ccec:	d9800104 	addi	r6,sp,4
 100ccf0:	100c8100 	call	100c810 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 100ccf4:	10803fcc 	andi	r2,r2,255
 100ccf8:	103ff126 	beq	r2,zero,100ccc0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
 100ccfc:	00800044 	movi	r2,1
 100cd00:	dfc00517 	ldw	ra,20(sp)
 100cd04:	dc800417 	ldw	r18,16(sp)
 100cd08:	dc400317 	ldw	r17,12(sp)
 100cd0c:	dc000217 	ldw	r16,8(sp)
 100cd10:	dec00604 	addi	sp,sp,24
 100cd14:	f800283a 	ret

0100cd18 <__cxa_call_unexpected>:
 100cd18:	deffe204 	addi	sp,sp,-120
 100cd1c:	00804074 	movhi	r2,257
 100cd20:	10b3a604 	addi	r2,r2,-12648
 100cd24:	00c040b4 	movhi	r3,258
 100cd28:	18d1ad04 	addi	r3,r3,18100
 100cd2c:	d8800c15 	stw	r2,48(sp)
 100cd30:	d9001815 	stw	r4,96(sp)
 100cd34:	00804074 	movhi	r2,257
 100cd38:	10b36804 	addi	r2,r2,-12896
 100cd3c:	d9000604 	addi	r4,sp,24
 100cd40:	d8c00d15 	stw	r3,52(sp)
 100cd44:	dfc01d15 	stw	ra,116(sp)
 100cd48:	d8800f15 	stw	r2,60(sp)
 100cd4c:	df001c15 	stw	fp,112(sp)
 100cd50:	ddc01b15 	stw	r23,108(sp)
 100cd54:	dec00e15 	stw	sp,56(sp)
 100cd58:	dec01015 	stw	sp,64(sp)
 100cd5c:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100cd60:	d9001817 	ldw	r4,96(sp)
 100cd64:	100d5500 	call	100d550 <__cxa_begin_catch>
 100cd68:	d8801817 	ldw	r2,96(sp)
 100cd6c:	10fff504 	addi	r3,r2,-44
 100cd70:	18800917 	ldw	r2,36(r3)
 100cd74:	19400617 	ldw	r5,24(r3)
 100cd78:	19000217 	ldw	r4,8(r3)
 100cd7c:	d8800215 	stw	r2,8(sp)
 100cd80:	18800817 	ldw	r2,32(r3)
 100cd84:	18c00317 	ldw	r3,12(r3)
 100cd88:	d9401615 	stw	r5,88(sp)
 100cd8c:	d8801715 	stw	r2,92(sp)
 100cd90:	00800084 	movi	r2,2
 100cd94:	d8c01515 	stw	r3,84(sp)
 100cd98:	d8800715 	stw	r2,28(sp)
 100cd9c:	100d45c0 	call	100d45c <_ZN10__cxxabiv112__unexpectedEPFvvE>
 100cda0:	d8800717 	ldw	r2,28(sp)
 100cda4:	d8c00817 	ldw	r3,32(sp)
 100cda8:	d8801a15 	stw	r2,104(sp)
 100cdac:	d9401a17 	ldw	r5,104(sp)
 100cdb0:	00800044 	movi	r2,1
 100cdb4:	d8c01915 	stw	r3,100(sp)
 100cdb8:	28800826 	beq	r5,r2,100cddc <__cxa_call_unexpected+0xc4>
 100cdbc:	d8000715 	stw	zero,28(sp)
 100cdc0:	100d4ac0 	call	100d4ac <__cxa_end_catch>
 100cdc4:	d8000715 	stw	zero,28(sp)
 100cdc8:	100d4ac0 	call	100d4ac <__cxa_end_catch>
 100cdcc:	d9001917 	ldw	r4,100(sp)
 100cdd0:	00bfffc4 	movi	r2,-1
 100cdd4:	d8800715 	stw	r2,28(sp)
 100cdd8:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100cddc:	d9001917 	ldw	r4,100(sp)
 100cde0:	100d5500 	call	100d550 <__cxa_begin_catch>
 100cde4:	100dd3c0 	call	100dd3c <__cxa_get_globals_fast>
 100cde8:	10800017 	ldw	r2,0(r2)
 100cdec:	d8c01a17 	ldw	r3,104(sp)
 100cdf0:	0009883a 	mov	r4,zero
 100cdf4:	11401004 	addi	r5,r2,64
 100cdf8:	d9401315 	stw	r5,76(sp)
 100cdfc:	d8801415 	stw	r2,80(sp)
 100ce00:	d8c00715 	stw	r3,28(sp)
 100ce04:	d9401717 	ldw	r5,92(sp)
 100ce08:	d80d883a 	mov	r6,sp
 100ce0c:	100cb100 	call	100cb10 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 100ce10:	d8801417 	ldw	r2,80(sp)
 100ce14:	d809883a 	mov	r4,sp
 100ce18:	d9801317 	ldw	r6,76(sp)
 100ce1c:	11400017 	ldw	r5,0(r2)
 100ce20:	d9c01617 	ldw	r7,88(sp)
 100ce24:	100cc940 	call	100cc94 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 100ce28:	10803fcc 	andi	r2,r2,255
 100ce2c:	1000151e 	bne	r2,zero,100ce84 <__cxa_call_unexpected+0x16c>
 100ce30:	d8c01a17 	ldw	r3,104(sp)
 100ce34:	d809883a 	mov	r4,sp
 100ce38:	014040b4 	movhi	r5,258
 100ce3c:	29556b04 	addi	r5,r5,21932
 100ce40:	d8c00715 	stw	r3,28(sp)
 100ce44:	000d883a 	mov	r6,zero
 100ce48:	d9c01617 	ldw	r7,88(sp)
 100ce4c:	100cc940 	call	100cc94 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 100ce50:	10803fcc 	andi	r2,r2,255
 100ce54:	10000c26 	beq	r2,zero,100ce88 <__cxa_call_unexpected+0x170>
 100ce58:	01000104 	movi	r4,4
 100ce5c:	100da700 	call	100da70 <__cxa_allocate_exception>
 100ce60:	1009883a 	mov	r4,r2
 100ce64:	008040b4 	movhi	r2,258
 100ce68:	10955e04 	addi	r2,r2,21880
 100ce6c:	20800015 	stw	r2,0(r4)
 100ce70:	014040b4 	movhi	r5,258
 100ce74:	29556b04 	addi	r5,r5,21932
 100ce78:	01804074 	movhi	r6,257
 100ce7c:	31ae9f04 	addi	r6,r6,-17796
 100ce80:	100d6e80 	call	100d6e8 <__cxa_throw>
 100ce84:	100d6740 	call	100d674 <__cxa_rethrow>
 100ce88:	d9401a17 	ldw	r5,104(sp)
 100ce8c:	d9001517 	ldw	r4,84(sp)
 100ce90:	d9400715 	stw	r5,28(sp)
 100ce94:	100d3a00 	call	100d3a0 <_ZN10__cxxabiv111__terminateEPFvvE>

0100ce98 <__gxx_personality_sj0>:
 100ce98:	deffd304 	addi	sp,sp,-180
 100ce9c:	00804074 	movhi	r2,257
 100cea0:	10b4cd04 	addi	r2,r2,-11468
 100cea4:	00c040b4 	movhi	r3,258
 100cea8:	18d1b104 	addi	r3,r3,18116
 100ceac:	d8801315 	stw	r2,76(sp)
 100ceb0:	d9002315 	stw	r4,140(sp)
 100ceb4:	00804074 	movhi	r2,257
 100ceb8:	10b3a604 	addi	r2,r2,-12648
 100cebc:	d9000a04 	addi	r4,sp,40
 100cec0:	d8801015 	stw	r2,64(sp)
 100cec4:	d8c01115 	stw	r3,68(sp)
 100cec8:	dfc02c15 	stw	ra,176(sp)
 100cecc:	df002b15 	stw	fp,172(sp)
 100ced0:	ddc02a15 	stw	r23,168(sp)
 100ced4:	dec01215 	stw	sp,72(sp)
 100ced8:	dec01415 	stw	sp,80(sp)
 100cedc:	d9802515 	stw	r6,148(sp)
 100cee0:	d9402415 	stw	r5,144(sp)
 100cee4:	d9c02615 	stw	r7,152(sp)
 100cee8:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100ceec:	d8c02317 	ldw	r3,140(sp)
 100cef0:	00800044 	movi	r2,1
 100cef4:	18800a26 	beq	r3,r2,100cf20 <__gxx_personality_sj0+0x88>
 100cef8:	010000c4 	movi	r4,3
 100cefc:	d9002215 	stw	r4,136(sp)
 100cf00:	d9000a04 	addi	r4,sp,40
 100cf04:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100cf08:	d8802217 	ldw	r2,136(sp)
 100cf0c:	dfc02c17 	ldw	ra,176(sp)
 100cf10:	df002b17 	ldw	fp,172(sp)
 100cf14:	ddc02a17 	ldw	r23,168(sp)
 100cf18:	dec02d04 	addi	sp,sp,180
 100cf1c:	f800283a 	ret
 100cf20:	d9402d17 	ldw	r5,180(sp)
 100cf24:	d9002517 	ldw	r4,148(sp)
 100cf28:	0007883a 	mov	r3,zero
 100cf2c:	28800504 	addi	r2,r5,20
 100cf30:	d8800015 	stw	r2,0(sp)
 100cf34:	28bff504 	addi	r2,r5,-44
 100cf38:	d8801a15 	stw	r2,104(sp)
 100cf3c:	0090caf4 	movhi	r2,17195
 100cf40:	108ac004 	addi	r2,r2,11008
 100cf44:	2080ad26 	beq	r4,r2,100d1fc <__gxx_personality_sj0+0x364>
 100cf48:	d8c02105 	stb	r3,132(sp)
 100cf4c:	d8c02417 	ldw	r3,144(sp)
 100cf50:	00800184 	movi	r2,6
 100cf54:	1880281e 	bne	r3,r2,100cff8 <__gxx_personality_sj0+0x160>
 100cf58:	d8802103 	ldbu	r2,132(sp)
 100cf5c:	10002626 	beq	r2,zero,100cff8 <__gxx_personality_sj0+0x160>
 100cf60:	d9001a17 	ldw	r4,104(sp)
 100cf64:	d9401a17 	ldw	r5,104(sp)
 100cf68:	d8801a17 	ldw	r2,104(sp)
 100cf6c:	21000917 	ldw	r4,36(r4)
 100cf70:	29400617 	ldw	r5,24(r5)
 100cf74:	10800817 	ldw	r2,32(r2)
 100cf78:	d9001d15 	stw	r4,116(sp)
 100cf7c:	d9401b15 	stw	r5,108(sp)
 100cf80:	d8802015 	stw	r2,128(sp)
 100cf84:	2000ad1e 	bne	r4,zero,100d23c <__gxx_personality_sj0+0x3a4>
 100cf88:	01000044 	movi	r4,1
 100cf8c:	00800044 	movi	r2,1
 100cf90:	2080e126 	beq	r4,r2,100d318 <__gxx_personality_sj0+0x480>
 100cf94:	d8801b17 	ldw	r2,108(sp)
 100cf98:	1000d316 	blt	r2,zero,100d2e8 <__gxx_personality_sj0+0x450>
 100cf9c:	d9802d17 	ldw	r6,180(sp)
 100cfa0:	d9002e17 	ldw	r4,184(sp)
 100cfa4:	00bfffc4 	movi	r2,-1
 100cfa8:	000b883a 	mov	r5,zero
 100cfac:	d8800b15 	stw	r2,44(sp)
 100cfb0:	100dd940 	call	100dd94 <_Unwind_SetGR>
 100cfb4:	d9801b17 	ldw	r6,108(sp)
 100cfb8:	d9002e17 	ldw	r4,184(sp)
 100cfbc:	01400044 	movi	r5,1
 100cfc0:	100dd940 	call	100dd94 <_Unwind_SetGR>
 100cfc4:	d9002e17 	ldw	r4,184(sp)
 100cfc8:	d9401d17 	ldw	r5,116(sp)
 100cfcc:	100ddd00 	call	100ddd0 <_Unwind_SetIP>
 100cfd0:	010001c4 	movi	r4,7
 100cfd4:	d9002215 	stw	r4,136(sp)
 100cfd8:	d9000a04 	addi	r4,sp,40
 100cfdc:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100cfe0:	d8802217 	ldw	r2,136(sp)
 100cfe4:	dfc02c17 	ldw	ra,176(sp)
 100cfe8:	df002b17 	ldw	fp,172(sp)
 100cfec:	ddc02a17 	ldw	r23,168(sp)
 100cff0:	dec02d04 	addi	sp,sp,180
 100cff4:	f800283a 	ret
 100cff8:	d9002e17 	ldw	r4,184(sp)
 100cffc:	00ffffc4 	movi	r3,-1
 100d000:	d8c00b15 	stw	r3,44(sp)
 100d004:	100dde00 	call	100dde0 <_Unwind_GetLanguageSpecificData>
 100d008:	10007226 	beq	r2,zero,100d1d4 <__gxx_personality_sj0+0x33c>
 100d00c:	d9002e17 	ldw	r4,184(sp)
 100d010:	d9800404 	addi	r6,sp,16
 100d014:	100b883a 	mov	r5,r2
 100d018:	d8802015 	stw	r2,128(sp)
 100d01c:	100cb100 	call	100cb10 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 100d020:	d9000903 	ldbu	r4,36(sp)
 100d024:	d9402e17 	ldw	r5,184(sp)
 100d028:	d8801e15 	stw	r2,120(sp)
 100d02c:	100ca800 	call	100ca80 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 100d030:	d9002e17 	ldw	r4,184(sp)
 100d034:	d8800615 	stw	r2,24(sp)
 100d038:	100ddac0 	call	100ddac <_Unwind_GetIP>
 100d03c:	10bfffc4 	addi	r2,r2,-1
 100d040:	d8801c15 	stw	r2,112(sp)
 100d044:	10006316 	blt	r2,zero,100d1d4 <__gxx_personality_sj0+0x33c>
 100d048:	10001b1e 	bne	r2,zero,100d0b8 <__gxx_personality_sj0+0x220>
 100d04c:	01000044 	movi	r4,1
 100d050:	d8001f15 	stw	zero,124(sp)
 100d054:	d8001d15 	stw	zero,116(sp)
 100d058:	d8001b15 	stw	zero,108(sp)
 100d05c:	d9402417 	ldw	r5,144(sp)
 100d060:	00c00044 	movi	r3,1
 100d064:	28c4703a 	and	r2,r5,r3
 100d068:	1005003a 	cmpeq	r2,r2,zero
 100d06c:	10006a1e 	bne	r2,zero,100d218 <__gxx_personality_sj0+0x380>
 100d070:	00800084 	movi	r2,2
 100d074:	20805726 	beq	r4,r2,100d1d4 <__gxx_personality_sj0+0x33c>
 100d078:	d8802103 	ldbu	r2,132(sp)
 100d07c:	10008626 	beq	r2,zero,100d298 <__gxx_personality_sj0+0x400>
 100d080:	d9001a17 	ldw	r4,104(sp)
 100d084:	d9401d17 	ldw	r5,116(sp)
 100d088:	d8801b17 	ldw	r2,108(sp)
 100d08c:	00c00184 	movi	r3,6
 100d090:	d8c02215 	stw	r3,136(sp)
 100d094:	21400915 	stw	r5,36(r4)
 100d098:	20800615 	stw	r2,24(r4)
 100d09c:	d8c01f17 	ldw	r3,124(sp)
 100d0a0:	d9402017 	ldw	r5,128(sp)
 100d0a4:	d8800017 	ldw	r2,0(sp)
 100d0a8:	20c00715 	stw	r3,28(r4)
 100d0ac:	21400815 	stw	r5,32(r4)
 100d0b0:	20800a15 	stw	r2,40(r4)
 100d0b4:	003f9206 	br	100cf00 <__gxx_personality_sj0+0x68>
 100d0b8:	d9001e17 	ldw	r4,120(sp)
 100d0bc:	d9400204 	addi	r5,sp,8
 100d0c0:	100c78c0 	call	100c78c <_Z12read_uleb128PKhPj>
 100d0c4:	d9401c17 	ldw	r5,112(sp)
 100d0c8:	1009883a 	mov	r4,r2
 100d0cc:	297fffc4 	addi	r5,r5,-1
 100d0d0:	d9401c15 	stw	r5,112(sp)
 100d0d4:	d9400104 	addi	r5,sp,4
 100d0d8:	100c78c0 	call	100c78c <_Z12read_uleb128PKhPj>
 100d0dc:	d8801e15 	stw	r2,120(sp)
 100d0e0:	d8801c17 	ldw	r2,112(sp)
 100d0e4:	103ff41e 	bne	r2,zero,100d0b8 <__gxx_personality_sj0+0x220>
 100d0e8:	d8800217 	ldw	r2,8(sp)
 100d0ec:	d8c00117 	ldw	r3,4(sp)
 100d0f0:	01000044 	movi	r4,1
 100d0f4:	1105883a 	add	r2,r2,r4
 100d0f8:	d8801d15 	stw	r2,116(sp)
 100d0fc:	1800541e 	bne	r3,zero,100d250 <__gxx_personality_sj0+0x3b8>
 100d100:	d8001f15 	stw	zero,124(sp)
 100d104:	d8c01d17 	ldw	r3,116(sp)
 100d108:	18003226 	beq	r3,zero,100d1d4 <__gxx_personality_sj0+0x33c>
 100d10c:	d9001f17 	ldw	r4,124(sp)
 100d110:	20007226 	beq	r4,zero,100d2dc <__gxx_personality_sj0+0x444>
 100d114:	d9402417 	ldw	r5,144(sp)
 100d118:	2880020c 	andi	r2,r5,8
 100d11c:	10006a1e 	bne	r2,zero,100d2c8 <__gxx_personality_sj0+0x430>
 100d120:	d8802103 	ldbu	r2,132(sp)
 100d124:	10006826 	beq	r2,zero,100d2c8 <__gxx_personality_sj0+0x430>
 100d128:	d8801a17 	ldw	r2,104(sp)
 100d12c:	10800017 	ldw	r2,0(r2)
 100d130:	d8801915 	stw	r2,100(sp)
 100d134:	d8c01917 	ldw	r3,100(sp)
 100d138:	d8001805 	stb	zero,96(sp)
 100d13c:	1807003a 	cmpeq	r3,r3,zero
 100d140:	d8c02715 	stw	r3,156(sp)
 100d144:	00000706 	br	100d164 <__gxx_personality_sj0+0x2cc>
 100d148:	01000044 	movi	r4,1
 100d14c:	d9001805 	stb	r4,96(sp)
 100d150:	d8800217 	ldw	r2,8(sp)
 100d154:	10005e26 	beq	r2,zero,100d2d0 <__gxx_personality_sj0+0x438>
 100d158:	d8c01717 	ldw	r3,92(sp)
 100d15c:	1885883a 	add	r2,r3,r2
 100d160:	d8801f15 	stw	r2,124(sp)
 100d164:	d9001f17 	ldw	r4,124(sp)
 100d168:	d9400104 	addi	r5,sp,4
 100d16c:	100c7bc0 	call	100c7bc <_Z12read_sleb128PKhPi>
 100d170:	1009883a 	mov	r4,r2
 100d174:	d9400204 	addi	r5,sp,8
 100d178:	d8801715 	stw	r2,92(sp)
 100d17c:	100c7bc0 	call	100c7bc <_Z12read_sleb128PKhPi>
 100d180:	d8800117 	ldw	r2,4(sp)
 100d184:	103ff026 	beq	r2,zero,100d148 <__gxx_personality_sj0+0x2b0>
 100d188:	0080360e 	bge	zero,r2,100d264 <__gxx_personality_sj0+0x3cc>
 100d18c:	017fffc4 	movi	r5,-1
 100d190:	d9400b15 	stw	r5,44(sp)
 100d194:	d9000404 	addi	r4,sp,16
 100d198:	100b883a 	mov	r5,r2
 100d19c:	100cc100 	call	100cc10 <_Z15get_ttype_entryP16lsda_header_infoj>
 100d1a0:	10000826 	beq	r2,zero,100d1c4 <__gxx_personality_sj0+0x32c>
 100d1a4:	d8c02717 	ldw	r3,156(sp)
 100d1a8:	183fe91e 	bne	r3,zero,100d150 <__gxx_personality_sj0+0x2b8>
 100d1ac:	d9401917 	ldw	r5,100(sp)
 100d1b0:	1009883a 	mov	r4,r2
 100d1b4:	d80d883a 	mov	r6,sp
 100d1b8:	100c8100 	call	100c810 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 100d1bc:	10803fcc 	andi	r2,r2,255
 100d1c0:	103fe326 	beq	r2,zero,100d150 <__gxx_personality_sj0+0x2b8>
 100d1c4:	d9000117 	ldw	r4,4(sp)
 100d1c8:	d9001b15 	stw	r4,108(sp)
 100d1cc:	010000c4 	movi	r4,3
 100d1d0:	003fa206 	br	100d05c <__gxx_personality_sj0+0x1c4>
 100d1d4:	01400204 	movi	r5,8
 100d1d8:	d9000a04 	addi	r4,sp,40
 100d1dc:	d9402215 	stw	r5,136(sp)
 100d1e0:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100d1e4:	d8802217 	ldw	r2,136(sp)
 100d1e8:	dfc02c17 	ldw	ra,176(sp)
 100d1ec:	df002b17 	ldw	fp,172(sp)
 100d1f0:	ddc02a17 	ldw	r23,168(sp)
 100d1f4:	dec02d04 	addi	sp,sp,180
 100d1f8:	f800283a 	ret
 100d1fc:	d9402617 	ldw	r5,152(sp)
 100d200:	0091d3b4 	movhi	r2,18254
 100d204:	109550c4 	addi	r2,r2,21827
 100d208:	28bf4f1e 	bne	r5,r2,100cf48 <__gxx_personality_sj0+0xb0>
 100d20c:	d8802317 	ldw	r2,140(sp)
 100d210:	1007883a 	mov	r3,r2
 100d214:	003f4c06 	br	100cf48 <__gxx_personality_sj0+0xb0>
 100d218:	d9402417 	ldw	r5,144(sp)
 100d21c:	2880020c 	andi	r2,r5,8
 100d220:	10000826 	beq	r2,zero,100d244 <__gxx_personality_sj0+0x3ac>
 100d224:	20c04026 	beq	r4,r3,100d328 <__gxx_personality_sj0+0x490>
 100d228:	d8801b17 	ldw	r2,108(sp)
 100d22c:	103f5b0e 	bge	r2,zero,100cf9c <__gxx_personality_sj0+0x104>
 100d230:	00800084 	movi	r2,2
 100d234:	d8800b15 	stw	r2,44(sp)
 100d238:	100d46c0 	call	100d46c <_ZSt10unexpectedv>
 100d23c:	010000c4 	movi	r4,3
 100d240:	003f5206 	br	100cf8c <__gxx_personality_sj0+0xf4>
 100d244:	d8802103 	ldbu	r2,132(sp)
 100d248:	103f501e 	bne	r2,zero,100cf8c <__gxx_personality_sj0+0xf4>
 100d24c:	003ff506 	br	100d224 <__gxx_personality_sj0+0x38c>
 100d250:	d8800817 	ldw	r2,32(sp)
 100d254:	1885883a 	add	r2,r3,r2
 100d258:	1105c83a 	sub	r2,r2,r4
 100d25c:	d8801f15 	stw	r2,124(sp)
 100d260:	003fa806 	br	100d104 <__gxx_personality_sj0+0x26c>
 100d264:	d9002717 	ldw	r4,156(sp)
 100d268:	20000e1e 	bne	r4,zero,100d2a4 <__gxx_personality_sj0+0x40c>
 100d26c:	017fffc4 	movi	r5,-1
 100d270:	d9400b15 	stw	r5,44(sp)
 100d274:	d9800017 	ldw	r6,0(sp)
 100d278:	d9401917 	ldw	r5,100(sp)
 100d27c:	100f883a 	mov	r7,r2
 100d280:	d9000404 	addi	r4,sp,16
 100d284:	100cc940 	call	100cc94 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 100d288:	1080005c 	xori	r2,r2,1
 100d28c:	10803fcc 	andi	r2,r2,255
 100d290:	103faf26 	beq	r2,zero,100d150 <__gxx_personality_sj0+0x2b8>
 100d294:	003fcb06 	br	100d1c4 <__gxx_personality_sj0+0x32c>
 100d298:	00800184 	movi	r2,6
 100d29c:	d8802215 	stw	r2,136(sp)
 100d2a0:	003f1706 	br	100cf00 <__gxx_personality_sj0+0x68>
 100d2a4:	d9000717 	ldw	r4,28(sp)
 100d2a8:	d9400304 	addi	r5,sp,12
 100d2ac:	2089c83a 	sub	r4,r4,r2
 100d2b0:	213fffc4 	addi	r4,r4,-1
 100d2b4:	100c78c0 	call	100c78c <_Z12read_uleb128PKhPj>
 100d2b8:	d8c00317 	ldw	r3,12(sp)
 100d2bc:	1807003a 	cmpeq	r3,r3,zero
 100d2c0:	1805883a 	mov	r2,r3
 100d2c4:	003ff106 	br	100d28c <__gxx_personality_sj0+0x3f4>
 100d2c8:	d8001915 	stw	zero,100(sp)
 100d2cc:	003f9906 	br	100d134 <__gxx_personality_sj0+0x29c>
 100d2d0:	d8801803 	ldbu	r2,96(sp)
 100d2d4:	1004c03a 	cmpne	r2,r2,zero
 100d2d8:	103fbe26 	beq	r2,zero,100d1d4 <__gxx_personality_sj0+0x33c>
 100d2dc:	01000084 	movi	r4,2
 100d2e0:	d8001b15 	stw	zero,108(sp)
 100d2e4:	003f5d06 	br	100d05c <__gxx_personality_sj0+0x1c4>
 100d2e8:	d9402017 	ldw	r5,128(sp)
 100d2ec:	d9002e17 	ldw	r4,184(sp)
 100d2f0:	00bfffc4 	movi	r2,-1
 100d2f4:	d9800404 	addi	r6,sp,16
 100d2f8:	d8800b15 	stw	r2,44(sp)
 100d2fc:	100cb100 	call	100cb10 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 100d300:	d9000903 	ldbu	r4,36(sp)
 100d304:	d9402e17 	ldw	r5,184(sp)
 100d308:	100ca800 	call	100ca80 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 100d30c:	d8c01a17 	ldw	r3,104(sp)
 100d310:	18800915 	stw	r2,36(r3)
 100d314:	003f2106 	br	100cf9c <__gxx_personality_sj0+0x104>
 100d318:	d9002d17 	ldw	r4,180(sp)
 100d31c:	00bfffc4 	movi	r2,-1
 100d320:	d8800b15 	stw	r2,44(sp)
 100d324:	100dcf80 	call	100dcf8 <__cxa_call_terminate>
 100d328:	00bfffc4 	movi	r2,-1
 100d32c:	d8800b15 	stw	r2,44(sp)
 100d330:	100d4440 	call	100d444 <_ZSt9terminatev>
 100d334:	d9000b17 	ldw	r4,44(sp)
 100d338:	d9400c17 	ldw	r5,48(sp)
 100d33c:	00800044 	movi	r2,1
 100d340:	d9002915 	stw	r4,164(sp)
 100d344:	d9402815 	stw	r5,160(sp)
 100d348:	20800626 	beq	r4,r2,100d364 <__gxx_personality_sj0+0x4cc>
 100d34c:	d8000b15 	stw	zero,44(sp)
 100d350:	100d4ac0 	call	100d4ac <__cxa_end_catch>
 100d354:	d9002817 	ldw	r4,160(sp)
 100d358:	00bfffc4 	movi	r2,-1
 100d35c:	d8800b15 	stw	r2,44(sp)
 100d360:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100d364:	d9002817 	ldw	r4,160(sp)
 100d368:	100d5500 	call	100d550 <__cxa_begin_catch>
 100d36c:	d8c02917 	ldw	r3,164(sp)
 100d370:	d8c00b15 	stw	r3,44(sp)
 100d374:	100d4440 	call	100d444 <_ZSt9terminatev>

0100d378 <_ZSt13set_terminatePFvvE>:
 100d378:	00c040b4 	movhi	r3,258
 100d37c:	18df8404 	addi	r3,r3,32272
 100d380:	18800017 	ldw	r2,0(r3)
 100d384:	19000015 	stw	r4,0(r3)
 100d388:	f800283a 	ret

0100d38c <_ZSt14set_unexpectedPFvvE>:
 100d38c:	00c040b4 	movhi	r3,258
 100d390:	18df8704 	addi	r3,r3,32284
 100d394:	18800017 	ldw	r2,0(r3)
 100d398:	19000015 	stw	r4,0(r3)
 100d39c:	f800283a 	ret

0100d3a0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 100d3a0:	deffed04 	addi	sp,sp,-76
 100d3a4:	00804074 	movhi	r2,257
 100d3a8:	10b3a604 	addi	r2,r2,-12648
 100d3ac:	d8800615 	stw	r2,24(sp)
 100d3b0:	00c040b4 	movhi	r3,258
 100d3b4:	18d1b504 	addi	r3,r3,18132
 100d3b8:	00804074 	movhi	r2,257
 100d3bc:	10b4ff04 	addi	r2,r2,-11268
 100d3c0:	d9000d15 	stw	r4,52(sp)
 100d3c4:	d809883a 	mov	r4,sp
 100d3c8:	d8800915 	stw	r2,36(sp)
 100d3cc:	dfc01215 	stw	ra,72(sp)
 100d3d0:	df001115 	stw	fp,68(sp)
 100d3d4:	ddc01015 	stw	r23,64(sp)
 100d3d8:	d8c00715 	stw	r3,28(sp)
 100d3dc:	dec00815 	stw	sp,32(sp)
 100d3e0:	dec00a15 	stw	sp,40(sp)
 100d3e4:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100d3e8:	00800084 	movi	r2,2
 100d3ec:	d8800115 	stw	r2,4(sp)
 100d3f0:	d8800d17 	ldw	r2,52(sp)
 100d3f4:	103ee83a 	callr	r2
 100d3f8:	100e2940 	call	100e294 <abort>
 100d3fc:	d8800117 	ldw	r2,4(sp)
 100d400:	d8c00217 	ldw	r3,8(sp)
 100d404:	d8800f15 	stw	r2,60(sp)
 100d408:	d8c00e15 	stw	r3,56(sp)
 100d40c:	d8c00f17 	ldw	r3,60(sp)
 100d410:	00800044 	movi	r2,1
 100d414:	18800626 	beq	r3,r2,100d430 <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
 100d418:	d8000115 	stw	zero,4(sp)
 100d41c:	100d4ac0 	call	100d4ac <__cxa_end_catch>
 100d420:	d9000e17 	ldw	r4,56(sp)
 100d424:	00bfffc4 	movi	r2,-1
 100d428:	d8800115 	stw	r2,4(sp)
 100d42c:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100d430:	d9000e17 	ldw	r4,56(sp)
 100d434:	100d5500 	call	100d550 <__cxa_begin_catch>
 100d438:	d8c00f17 	ldw	r3,60(sp)
 100d43c:	d8c00115 	stw	r3,4(sp)
 100d440:	100e2940 	call	100e294 <abort>

0100d444 <_ZSt9terminatev>:
 100d444:	008040b4 	movhi	r2,258
 100d448:	109f8404 	addi	r2,r2,32272
 100d44c:	11000017 	ldw	r4,0(r2)
 100d450:	deffff04 	addi	sp,sp,-4
 100d454:	dfc00015 	stw	ra,0(sp)
 100d458:	100d3a00 	call	100d3a0 <_ZN10__cxxabiv111__terminateEPFvvE>

0100d45c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 100d45c:	deffff04 	addi	sp,sp,-4
 100d460:	dfc00015 	stw	ra,0(sp)
 100d464:	203ee83a 	callr	r4
 100d468:	100d4440 	call	100d444 <_ZSt9terminatev>

0100d46c <_ZSt10unexpectedv>:
 100d46c:	008040b4 	movhi	r2,258
 100d470:	109f8704 	addi	r2,r2,32284
 100d474:	11000017 	ldw	r4,0(r2)
 100d478:	deffff04 	addi	sp,sp,-4
 100d47c:	dfc00015 	stw	ra,0(sp)
 100d480:	100d45c0 	call	100d45c <_ZN10__cxxabiv112__unexpectedEPFvvE>

0100d484 <__cxa_get_exception_ptr>:
 100d484:	20bfff17 	ldw	r2,-4(r4)
 100d488:	f800283a 	ret

0100d48c <_ZSt18uncaught_exceptionv>:
 100d48c:	deffff04 	addi	sp,sp,-4
 100d490:	dfc00015 	stw	ra,0(sp)
 100d494:	100dd440 	call	100dd44 <__cxa_get_globals>
 100d498:	10800117 	ldw	r2,4(r2)
 100d49c:	1004c03a 	cmpne	r2,r2,zero
 100d4a0:	dfc00017 	ldw	ra,0(sp)
 100d4a4:	dec00104 	addi	sp,sp,4
 100d4a8:	f800283a 	ret

0100d4ac <__cxa_end_catch>:
 100d4ac:	deffff04 	addi	sp,sp,-4
 100d4b0:	dfc00015 	stw	ra,0(sp)
 100d4b4:	100dd3c0 	call	100dd3c <__cxa_get_globals_fast>
 100d4b8:	11000017 	ldw	r4,0(r2)
 100d4bc:	1007883a 	mov	r3,r2
 100d4c0:	20001326 	beq	r4,zero,100d510 <__cxa_end_catch+0x64>
 100d4c4:	21400b17 	ldw	r5,44(r4)
 100d4c8:	0090caf4 	movhi	r2,17195
 100d4cc:	108ac004 	addi	r2,r2,11008
 100d4d0:	21800c17 	ldw	r6,48(r4)
 100d4d4:	28800526 	beq	r5,r2,100d4ec <__cxa_end_catch+0x40>
 100d4d8:	21000b04 	addi	r4,r4,44
 100d4dc:	18000015 	stw	zero,0(r3)
 100d4e0:	dfc00017 	ldw	ra,0(sp)
 100d4e4:	dec00104 	addi	sp,sp,4
 100d4e8:	100df0c1 	jmpi	100df0c <_Unwind_DeleteException>
 100d4ec:	0091d3b4 	movhi	r2,18254
 100d4f0:	109550c4 	addi	r2,r2,21827
 100d4f4:	30bff81e 	bne	r6,r2,100d4d8 <__cxa_end_catch+0x2c>
 100d4f8:	20800517 	ldw	r2,20(r4)
 100d4fc:	10000e16 	blt	r2,zero,100d538 <__cxa_end_catch+0x8c>
 100d500:	117fffc4 	addi	r5,r2,-1
 100d504:	28000526 	beq	r5,zero,100d51c <__cxa_end_catch+0x70>
 100d508:	28000a16 	blt	r5,zero,100d534 <__cxa_end_catch+0x88>
 100d50c:	21400515 	stw	r5,20(r4)
 100d510:	dfc00017 	ldw	ra,0(sp)
 100d514:	dec00104 	addi	sp,sp,4
 100d518:	f800283a 	ret
 100d51c:	20800417 	ldw	r2,16(r4)
 100d520:	21000b04 	addi	r4,r4,44
 100d524:	18800015 	stw	r2,0(r3)
 100d528:	dfc00017 	ldw	ra,0(sp)
 100d52c:	dec00104 	addi	sp,sp,4
 100d530:	100df0c1 	jmpi	100df0c <_Unwind_DeleteException>
 100d534:	100d4440 	call	100d444 <_ZSt9terminatev>
 100d538:	11400044 	addi	r5,r2,1
 100d53c:	283ff31e 	bne	r5,zero,100d50c <__cxa_end_catch+0x60>
 100d540:	20800417 	ldw	r2,16(r4)
 100d544:	21400515 	stw	r5,20(r4)
 100d548:	18800015 	stw	r2,0(r3)
 100d54c:	003ff006 	br	100d510 <__cxa_end_catch+0x64>

0100d550 <__cxa_begin_catch>:
 100d550:	deffee04 	addi	sp,sp,-72
 100d554:	00804074 	movhi	r2,257
 100d558:	10b3a604 	addi	r2,r2,-12648
 100d55c:	00c040b4 	movhi	r3,258
 100d560:	18d1b904 	addi	r3,r3,18148
 100d564:	d8800615 	stw	r2,24(sp)
 100d568:	d9000e15 	stw	r4,56(sp)
 100d56c:	00804074 	movhi	r2,257
 100d570:	10b59104 	addi	r2,r2,-10684
 100d574:	d809883a 	mov	r4,sp
 100d578:	d8c00715 	stw	r3,28(sp)
 100d57c:	dfc01115 	stw	ra,68(sp)
 100d580:	d8800915 	stw	r2,36(sp)
 100d584:	df001015 	stw	fp,64(sp)
 100d588:	ddc00f15 	stw	r23,60(sp)
 100d58c:	dec00815 	stw	sp,32(sp)
 100d590:	dec00a15 	stw	sp,40(sp)
 100d594:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100d598:	100dd440 	call	100dd44 <__cxa_get_globals>
 100d59c:	100d883a 	mov	r6,r2
 100d5a0:	d8800e17 	ldw	r2,56(sp)
 100d5a4:	31c00017 	ldw	r7,0(r6)
 100d5a8:	117ff504 	addi	r5,r2,-44
 100d5ac:	28c00b17 	ldw	r3,44(r5)
 100d5b0:	0090caf4 	movhi	r2,17195
 100d5b4:	108ac004 	addi	r2,r2,11008
 100d5b8:	29000c17 	ldw	r4,48(r5)
 100d5bc:	18800b26 	beq	r3,r2,100d5ec <__cxa_begin_catch+0x9c>
 100d5c0:	38001d1e 	bne	r7,zero,100d638 <__cxa_begin_catch+0xe8>
 100d5c4:	d8000d15 	stw	zero,52(sp)
 100d5c8:	31400015 	stw	r5,0(r6)
 100d5cc:	d809883a 	mov	r4,sp
 100d5d0:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100d5d4:	d8800d17 	ldw	r2,52(sp)
 100d5d8:	dfc01117 	ldw	ra,68(sp)
 100d5dc:	df001017 	ldw	fp,64(sp)
 100d5e0:	ddc00f17 	ldw	r23,60(sp)
 100d5e4:	dec01204 	addi	sp,sp,72
 100d5e8:	f800283a 	ret
 100d5ec:	0091d3b4 	movhi	r2,18254
 100d5f0:	109550c4 	addi	r2,r2,21827
 100d5f4:	20bff21e 	bne	r4,r2,100d5c0 <__cxa_begin_catch+0x70>
 100d5f8:	28c00517 	ldw	r3,20(r5)
 100d5fc:	18000b16 	blt	r3,zero,100d62c <__cxa_begin_catch+0xdc>
 100d600:	18800044 	addi	r2,r3,1
 100d604:	28800515 	stw	r2,20(r5)
 100d608:	30800117 	ldw	r2,4(r6)
 100d60c:	10bfffc4 	addi	r2,r2,-1
 100d610:	30800115 	stw	r2,4(r6)
 100d614:	39400226 	beq	r7,r5,100d620 <__cxa_begin_catch+0xd0>
 100d618:	29c00415 	stw	r7,16(r5)
 100d61c:	31400015 	stw	r5,0(r6)
 100d620:	29400a17 	ldw	r5,40(r5)
 100d624:	d9400d15 	stw	r5,52(sp)
 100d628:	003fe806 	br	100d5cc <__cxa_begin_catch+0x7c>
 100d62c:	00800044 	movi	r2,1
 100d630:	10c5c83a 	sub	r2,r2,r3
 100d634:	003ff306 	br	100d604 <__cxa_begin_catch+0xb4>
 100d638:	00800044 	movi	r2,1
 100d63c:	d8800115 	stw	r2,4(sp)
 100d640:	100d4440 	call	100d444 <_ZSt9terminatev>
 100d644:	d8800317 	ldw	r2,12(sp)
 100d648:	00ffffc4 	movi	r3,-1
 100d64c:	d9000217 	ldw	r4,8(sp)
 100d650:	10c00226 	beq	r2,r3,100d65c <__cxa_begin_catch+0x10c>
 100d654:	d8c00115 	stw	r3,4(sp)
 100d658:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100d65c:	00bfffc4 	movi	r2,-1
 100d660:	d8800115 	stw	r2,4(sp)
 100d664:	100cd180 	call	100cd18 <__cxa_call_unexpected>

0100d668 <_ZdlPv>:
 100d668:	20000126 	beq	r4,zero,100d670 <_ZdlPv+0x8>
 100d66c:	100e2ac1 	jmpi	100e2ac <free>
 100d670:	f800283a 	ret

0100d674 <__cxa_rethrow>:
 100d674:	defffe04 	addi	sp,sp,-8
 100d678:	dc400015 	stw	r17,0(sp)
 100d67c:	dfc00115 	stw	ra,4(sp)
 100d680:	100dd440 	call	100dd44 <__cxa_get_globals>
 100d684:	100b883a 	mov	r5,r2
 100d688:	10800117 	ldw	r2,4(r2)
 100d68c:	2c400017 	ldw	r17,0(r5)
 100d690:	10800044 	addi	r2,r2,1
 100d694:	28800115 	stw	r2,4(r5)
 100d698:	88000b26 	beq	r17,zero,100d6c8 <__cxa_rethrow+0x54>
 100d69c:	88c00b17 	ldw	r3,44(r17)
 100d6a0:	0090caf4 	movhi	r2,17195
 100d6a4:	108ac004 	addi	r2,r2,11008
 100d6a8:	89000c17 	ldw	r4,48(r17)
 100d6ac:	18800726 	beq	r3,r2,100d6cc <__cxa_rethrow+0x58>
 100d6b0:	28000015 	stw	zero,0(r5)
 100d6b4:	8c400b04 	addi	r17,r17,44
 100d6b8:	8809883a 	mov	r4,r17
 100d6bc:	100e23c0 	call	100e23c <_Unwind_SjLj_Resume_or_Rethrow>
 100d6c0:	8809883a 	mov	r4,r17
 100d6c4:	100d5500 	call	100d550 <__cxa_begin_catch>
 100d6c8:	100d4440 	call	100d444 <_ZSt9terminatev>
 100d6cc:	0091d3b4 	movhi	r2,18254
 100d6d0:	109550c4 	addi	r2,r2,21827
 100d6d4:	20bff61e 	bne	r4,r2,100d6b0 <__cxa_rethrow+0x3c>
 100d6d8:	88800517 	ldw	r2,20(r17)
 100d6dc:	0085c83a 	sub	r2,zero,r2
 100d6e0:	88800515 	stw	r2,20(r17)
 100d6e4:	003ff306 	br	100d6b4 <__cxa_rethrow+0x40>

0100d6e8 <__cxa_throw>:
 100d6e8:	008040b4 	movhi	r2,258
 100d6ec:	109f8704 	addi	r2,r2,32284
 100d6f0:	00c040b4 	movhi	r3,258
 100d6f4:	18df8404 	addi	r3,r3,32272
 100d6f8:	12000017 	ldw	r8,0(r2)
 100d6fc:	19c00017 	ldw	r7,0(r3)
 100d700:	defffe04 	addi	sp,sp,-8
 100d704:	213ff004 	addi	r4,r4,-64
 100d708:	dfc00115 	stw	ra,4(sp)
 100d70c:	dc400015 	stw	r17,0(sp)
 100d710:	0090caf4 	movhi	r2,17195
 100d714:	108ac004 	addi	r2,r2,11008
 100d718:	20800b15 	stw	r2,44(r4)
 100d71c:	00d1d3b4 	movhi	r3,18254
 100d720:	18d550c4 	addi	r3,r3,21827
 100d724:	24400b04 	addi	r17,r4,44
 100d728:	00804074 	movhi	r2,257
 100d72c:	10b5d704 	addi	r2,r2,-10404
 100d730:	21400015 	stw	r5,0(r4)
 100d734:	21800115 	stw	r6,4(r4)
 100d738:	22000215 	stw	r8,8(r4)
 100d73c:	21c00315 	stw	r7,12(r4)
 100d740:	20c00c15 	stw	r3,48(r4)
 100d744:	20800d15 	stw	r2,52(r4)
 100d748:	8809883a 	mov	r4,r17
 100d74c:	100e0740 	call	100e074 <_Unwind_SjLj_RaiseException>
 100d750:	8809883a 	mov	r4,r17
 100d754:	100d5500 	call	100d550 <__cxa_begin_catch>
 100d758:	100d4440 	call	100d444 <_ZSt9terminatev>

0100d75c <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 100d75c:	defffe04 	addi	sp,sp,-8
 100d760:	00800044 	movi	r2,1
 100d764:	dfc00115 	stw	ra,4(sp)
 100d768:	dc000015 	stw	r16,0(sp)
 100d76c:	28fff504 	addi	r3,r5,-44
 100d770:	11001036 	bltu	r2,r4,100d7b4 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
 100d774:	18800117 	ldw	r2,4(r3)
 100d778:	10000826 	beq	r2,zero,100d79c <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
 100d77c:	2c000504 	addi	r16,r5,20
 100d780:	8009883a 	mov	r4,r16
 100d784:	103ee83a 	callr	r2
 100d788:	8009883a 	mov	r4,r16
 100d78c:	dfc00117 	ldw	ra,4(sp)
 100d790:	dc000017 	ldw	r16,0(sp)
 100d794:	dec00204 	addi	sp,sp,8
 100d798:	100da301 	jmpi	100da30 <__cxa_free_exception>
 100d79c:	2c000504 	addi	r16,r5,20
 100d7a0:	8009883a 	mov	r4,r16
 100d7a4:	dfc00117 	ldw	ra,4(sp)
 100d7a8:	dc000017 	ldw	r16,0(sp)
 100d7ac:	dec00204 	addi	sp,sp,8
 100d7b0:	100da301 	jmpi	100da30 <__cxa_free_exception>
 100d7b4:	19000317 	ldw	r4,12(r3)
 100d7b8:	100d3a00 	call	100d3a0 <_ZN10__cxxabiv111__terminateEPFvvE>

0100d7bc <_ZNSt10bad_typeidD0Ev>:
 100d7bc:	defffe04 	addi	sp,sp,-8
 100d7c0:	008040b4 	movhi	r2,258
 100d7c4:	10967d04 	addi	r2,r2,23028
 100d7c8:	dc400015 	stw	r17,0(sp)
 100d7cc:	20800015 	stw	r2,0(r4)
 100d7d0:	2023883a 	mov	r17,r4
 100d7d4:	dfc00115 	stw	ra,4(sp)
 100d7d8:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 100d7dc:	8809883a 	mov	r4,r17
 100d7e0:	dfc00117 	ldw	ra,4(sp)
 100d7e4:	dc400017 	ldw	r17,0(sp)
 100d7e8:	dec00204 	addi	sp,sp,8
 100d7ec:	100d6681 	jmpi	100d668 <_ZdlPv>

0100d7f0 <_ZNSt10bad_typeidD1Ev>:
 100d7f0:	008040b4 	movhi	r2,258
 100d7f4:	10967d04 	addi	r2,r2,23028
 100d7f8:	20800015 	stw	r2,0(r4)
 100d7fc:	100ba381 	jmpi	100ba38 <_ZNSt9exceptionD2Ev>

0100d800 <_ZNSt10bad_typeidD2Ev>:
 100d800:	008040b4 	movhi	r2,258
 100d804:	10967d04 	addi	r2,r2,23028
 100d808:	20800015 	stw	r2,0(r4)
 100d80c:	100ba381 	jmpi	100ba38 <_ZNSt9exceptionD2Ev>

0100d810 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 100d810:	defffb04 	addi	sp,sp,-20
 100d814:	dd400315 	stw	r21,12(sp)
 100d818:	dcc00215 	stw	r19,8(sp)
 100d81c:	dc400115 	stw	r17,4(sp)
 100d820:	dc000015 	stw	r16,0(sp)
 100d824:	2823883a 	mov	r17,r5
 100d828:	3027883a 	mov	r19,r6
 100d82c:	382b883a 	mov	r21,r7
 100d830:	dfc00415 	stw	ra,16(sp)
 100d834:	2021883a 	mov	r16,r4
 100d838:	100c5880 	call	100c588 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 100d83c:	10803fcc 	andi	r2,r2,255
 100d840:	880b883a 	mov	r5,r17
 100d844:	980d883a 	mov	r6,r19
 100d848:	a80f883a 	mov	r7,r21
 100d84c:	00c00044 	movi	r3,1
 100d850:	1000051e 	bne	r2,zero,100d868 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 100d854:	81000217 	ldw	r4,8(r16)
 100d858:	20800017 	ldw	r2,0(r4)
 100d85c:	10c00617 	ldw	r3,24(r2)
 100d860:	183ee83a 	callr	r3
 100d864:	10c03fcc 	andi	r3,r2,255
 100d868:	1805883a 	mov	r2,r3
 100d86c:	dfc00417 	ldw	ra,16(sp)
 100d870:	dd400317 	ldw	r21,12(sp)
 100d874:	dcc00217 	ldw	r19,8(sp)
 100d878:	dc400117 	ldw	r17,4(sp)
 100d87c:	dc000017 	ldw	r16,0(sp)
 100d880:	dec00504 	addi	sp,sp,20
 100d884:	f800283a 	ret

0100d888 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 100d888:	defffe04 	addi	sp,sp,-8
 100d88c:	008040b4 	movhi	r2,258
 100d890:	10968904 	addi	r2,r2,23076
 100d894:	dc400015 	stw	r17,0(sp)
 100d898:	20800015 	stw	r2,0(r4)
 100d89c:	2023883a 	mov	r17,r4
 100d8a0:	dfc00115 	stw	ra,4(sp)
 100d8a4:	100c5180 	call	100c518 <_ZN10__cxxabiv117__class_type_infoD2Ev>
 100d8a8:	8809883a 	mov	r4,r17
 100d8ac:	dfc00117 	ldw	ra,4(sp)
 100d8b0:	dc400017 	ldw	r17,0(sp)
 100d8b4:	dec00204 	addi	sp,sp,8
 100d8b8:	100d6681 	jmpi	100d668 <_ZdlPv>

0100d8bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 100d8bc:	008040b4 	movhi	r2,258
 100d8c0:	10968904 	addi	r2,r2,23076
 100d8c4:	20800015 	stw	r2,0(r4)
 100d8c8:	100c5181 	jmpi	100c518 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0100d8cc <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
 100d8cc:	008040b4 	movhi	r2,258
 100d8d0:	10968904 	addi	r2,r2,23076
 100d8d4:	20800015 	stw	r2,0(r4)
 100d8d8:	100c5181 	jmpi	100c518 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0100d8dc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
 100d8dc:	da400017 	ldw	r9,0(sp)
 100d8e0:	2011883a 	mov	r8,r4
 100d8e4:	49800526 	beq	r9,r6,100d8fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
 100d8e8:	41000217 	ldw	r4,8(r8)
 100d8ec:	20800017 	ldw	r2,0(r4)
 100d8f0:	da400015 	stw	r9,0(sp)
 100d8f4:	10c00817 	ldw	r3,32(r2)
 100d8f8:	1800683a 	jmp	r3
 100d8fc:	39000117 	ldw	r4,4(r7)
 100d900:	40c00117 	ldw	r3,4(r8)
 100d904:	00800184 	movi	r2,6
 100d908:	193ff71e 	bne	r3,r4,100d8e8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
 100d90c:	f800283a 	ret

0100d910 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 100d910:	20c00117 	ldw	r3,4(r4)
 100d914:	38800117 	ldw	r2,4(r7)
 100d918:	defffb04 	addi	sp,sp,-20
 100d91c:	dfc00415 	stw	ra,16(sp)
 100d920:	da000517 	ldw	r8,20(sp)
 100d924:	dac00617 	ldw	r11,24(sp)
 100d928:	da400717 	ldw	r9,28(sp)
 100d92c:	da800817 	ldw	r10,32(sp)
 100d930:	18800c1e 	bne	r3,r2,100d964 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 100d934:	51800115 	stw	r6,4(r10)
 100d938:	52000015 	stw	r8,0(r10)
 100d93c:	28001c16 	blt	r5,zero,100d9b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
 100d940:	4145883a 	add	r2,r8,r5
 100d944:	48801e26 	beq	r9,r2,100d9c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 100d948:	00800044 	movi	r2,1
 100d94c:	0007883a 	mov	r3,zero
 100d950:	50800315 	stw	r2,12(r10)
 100d954:	1805883a 	mov	r2,r3
 100d958:	dfc00417 	ldw	ra,16(sp)
 100d95c:	dec00504 	addi	sp,sp,20
 100d960:	f800283a 	ret
 100d964:	42400d26 	beq	r8,r9,100d99c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 100d968:	21000217 	ldw	r4,8(r4)
 100d96c:	20800017 	ldw	r2,0(r4)
 100d970:	da000015 	stw	r8,0(sp)
 100d974:	dac00115 	stw	r11,4(sp)
 100d978:	da400215 	stw	r9,8(sp)
 100d97c:	da800315 	stw	r10,12(sp)
 100d980:	10c00717 	ldw	r3,28(r2)
 100d984:	183ee83a 	callr	r3
 100d988:	10c03fcc 	andi	r3,r2,255
 100d98c:	1805883a 	mov	r2,r3
 100d990:	dfc00417 	ldw	ra,16(sp)
 100d994:	dec00504 	addi	sp,sp,20
 100d998:	f800283a 	ret
 100d99c:	58800117 	ldw	r2,4(r11)
 100d9a0:	18bff11e 	bne	r3,r2,100d968 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 100d9a4:	0007883a 	mov	r3,zero
 100d9a8:	51800215 	stw	r6,8(r10)
 100d9ac:	003fe906 	br	100d954 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 100d9b0:	00bfff84 	movi	r2,-2
 100d9b4:	28800426 	beq	r5,r2,100d9c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
 100d9b8:	0007883a 	mov	r3,zero
 100d9bc:	003fe506 	br	100d954 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 100d9c0:	00800184 	movi	r2,6
 100d9c4:	003fe106 	br	100d94c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 100d9c8:	00800044 	movi	r2,1
 100d9cc:	0007883a 	mov	r3,zero
 100d9d0:	50800315 	stw	r2,12(r10)
 100d9d4:	003fdf06 	br	100d954 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

0100d9d8 <_ZNKSt9type_info14__is_pointer_pEv>:
 100d9d8:	0005883a 	mov	r2,zero
 100d9dc:	f800283a 	ret

0100d9e0 <_ZNKSt9type_info15__is_function_pEv>:
 100d9e0:	0005883a 	mov	r2,zero
 100d9e4:	f800283a 	ret

0100d9e8 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 100d9e8:	20c00117 	ldw	r3,4(r4)
 100d9ec:	28800117 	ldw	r2,4(r5)
 100d9f0:	1885003a 	cmpeq	r2,r3,r2
 100d9f4:	f800283a 	ret

0100d9f8 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 100d9f8:	0005883a 	mov	r2,zero
 100d9fc:	f800283a 	ret

0100da00 <_ZNSt9type_infoD0Ev>:
 100da00:	008040b4 	movhi	r2,258
 100da04:	1096a104 	addi	r2,r2,23172
 100da08:	20800015 	stw	r2,0(r4)
 100da0c:	100d6681 	jmpi	100d668 <_ZdlPv>

0100da10 <_ZNSt9type_infoD1Ev>:
 100da10:	008040b4 	movhi	r2,258
 100da14:	1096a104 	addi	r2,r2,23172
 100da18:	20800015 	stw	r2,0(r4)
 100da1c:	f800283a 	ret

0100da20 <_ZNSt9type_infoD2Ev>:
 100da20:	008040b4 	movhi	r2,258
 100da24:	1096a104 	addi	r2,r2,23172
 100da28:	20800015 	stw	r2,0(r4)
 100da2c:	f800283a 	ret

0100da30 <__cxa_free_exception>:
 100da30:	2007883a 	mov	r3,r4
 100da34:	008040f4 	movhi	r2,259
 100da38:	108f2b04 	addi	r2,r2,15532
 100da3c:	213ff004 	addi	r4,r4,-64
 100da40:	11420004 	addi	r5,r2,2048
 100da44:	18800336 	bltu	r3,r2,100da54 <__cxa_free_exception+0x24>
 100da48:	1885c83a 	sub	r2,r3,r2
 100da4c:	1004d27a 	srli	r2,r2,9
 100da50:	19400136 	bltu	r3,r5,100da58 <__cxa_free_exception+0x28>
 100da54:	100e2ac1 	jmpi	100e2ac <free>
 100da58:	00ffff84 	movi	r3,-2
 100da5c:	1886183a 	rol	r3,r3,r2
 100da60:	d0a7d717 	ldw	r2,-24740(gp)
 100da64:	10c4703a 	and	r2,r2,r3
 100da68:	d0a7d715 	stw	r2,-24740(gp)
 100da6c:	f800283a 	ret

0100da70 <__cxa_allocate_exception>:
 100da70:	deffed04 	addi	sp,sp,-76
 100da74:	00804074 	movhi	r2,257
 100da78:	10b3a604 	addi	r2,r2,-12648
 100da7c:	21001004 	addi	r4,r4,64
 100da80:	00c040b4 	movhi	r3,258
 100da84:	18d1bd04 	addi	r3,r3,18164
 100da88:	d8800615 	stw	r2,24(sp)
 100da8c:	d9000d15 	stw	r4,52(sp)
 100da90:	00804074 	movhi	r2,257
 100da94:	10b6e004 	addi	r2,r2,-9344
 100da98:	d809883a 	mov	r4,sp
 100da9c:	dfc01215 	stw	ra,72(sp)
 100daa0:	d8c00715 	stw	r3,28(sp)
 100daa4:	d8800915 	stw	r2,36(sp)
 100daa8:	df001115 	stw	fp,68(sp)
 100daac:	ddc01015 	stw	r23,64(sp)
 100dab0:	dec00815 	stw	sp,32(sp)
 100dab4:	dec00a15 	stw	sp,40(sp)
 100dab8:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100dabc:	d9000d17 	ldw	r4,52(sp)
 100dac0:	100e2c00 	call	100e2c0 <malloc>
 100dac4:	d8800e15 	stw	r2,56(sp)
 100dac8:	1000171e 	bne	r2,zero,100db28 <__cxa_allocate_exception+0xb8>
 100dacc:	d8c00d17 	ldw	r3,52(sp)
 100dad0:	00808004 	movi	r2,512
 100dad4:	d1e7d717 	ldw	r7,-24740(gp)
 100dad8:	10c02636 	bltu	r2,r3,100db74 <__cxa_allocate_exception+0x104>
 100dadc:	3807883a 	mov	r3,r7
 100dae0:	01400044 	movi	r5,1
 100dae4:	1944703a 	and	r2,r3,r5
 100dae8:	0009883a 	mov	r4,zero
 100daec:	01800104 	movi	r6,4
 100daf0:	10000526 	beq	r2,zero,100db08 <__cxa_allocate_exception+0x98>
 100daf4:	2149883a 	add	r4,r4,r5
 100daf8:	21801e26 	beq	r4,r6,100db74 <__cxa_allocate_exception+0x104>
 100dafc:	1806d07a 	srli	r3,r3,1
 100db00:	1944703a 	and	r2,r3,r5
 100db04:	103ffb1e 	bne	r2,zero,100daf4 <__cxa_allocate_exception+0x84>
 100db08:	2904983a 	sll	r2,r5,r4
 100db0c:	2008927a 	slli	r4,r4,9
 100db10:	00c040f4 	movhi	r3,259
 100db14:	18cf2b04 	addi	r3,r3,15532
 100db18:	3884b03a 	or	r2,r7,r2
 100db1c:	20c9883a 	add	r4,r4,r3
 100db20:	d9000e15 	stw	r4,56(sp)
 100db24:	d0a7d715 	stw	r2,-24740(gp)
 100db28:	100dd440 	call	100dd44 <__cxa_get_globals>
 100db2c:	10c00117 	ldw	r3,4(r2)
 100db30:	d9000e17 	ldw	r4,56(sp)
 100db34:	000b883a 	mov	r5,zero
 100db38:	18c00044 	addi	r3,r3,1
 100db3c:	10c00115 	stw	r3,4(r2)
 100db40:	01801004 	movi	r6,64
 100db44:	100ecec0 	call	100ecec <memset>
 100db48:	d8800e17 	ldw	r2,56(sp)
 100db4c:	d809883a 	mov	r4,sp
 100db50:	10801004 	addi	r2,r2,64
 100db54:	d8800f15 	stw	r2,60(sp)
 100db58:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100db5c:	d8800f17 	ldw	r2,60(sp)
 100db60:	dfc01217 	ldw	ra,72(sp)
 100db64:	df001117 	ldw	fp,68(sp)
 100db68:	ddc01017 	ldw	r23,64(sp)
 100db6c:	dec01304 	addi	sp,sp,76
 100db70:	f800283a 	ret
 100db74:	00800044 	movi	r2,1
 100db78:	d8800115 	stw	r2,4(sp)
 100db7c:	100d4440 	call	100d444 <_ZSt9terminatev>
 100db80:	d8800317 	ldw	r2,12(sp)
 100db84:	00ffffc4 	movi	r3,-1
 100db88:	d9000217 	ldw	r4,8(sp)
 100db8c:	10c00226 	beq	r2,r3,100db98 <__cxa_allocate_exception+0x128>
 100db90:	d8c00115 	stw	r3,4(sp)
 100db94:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100db98:	00bfffc4 	movi	r2,-1
 100db9c:	d8800115 	stw	r2,4(sp)
 100dba0:	100cd180 	call	100cd18 <__cxa_call_unexpected>

0100dba4 <_ZNSt8bad_castD0Ev>:
 100dba4:	defffe04 	addi	sp,sp,-8
 100dba8:	008040b4 	movhi	r2,258
 100dbac:	1096ad04 	addi	r2,r2,23220
 100dbb0:	dc400015 	stw	r17,0(sp)
 100dbb4:	20800015 	stw	r2,0(r4)
 100dbb8:	2023883a 	mov	r17,r4
 100dbbc:	dfc00115 	stw	ra,4(sp)
 100dbc0:	100ba380 	call	100ba38 <_ZNSt9exceptionD2Ev>
 100dbc4:	8809883a 	mov	r4,r17
 100dbc8:	dfc00117 	ldw	ra,4(sp)
 100dbcc:	dc400017 	ldw	r17,0(sp)
 100dbd0:	dec00204 	addi	sp,sp,8
 100dbd4:	100d6681 	jmpi	100d668 <_ZdlPv>

0100dbd8 <_ZNSt8bad_castD1Ev>:
 100dbd8:	008040b4 	movhi	r2,258
 100dbdc:	1096ad04 	addi	r2,r2,23220
 100dbe0:	20800015 	stw	r2,0(r4)
 100dbe4:	100ba381 	jmpi	100ba38 <_ZNSt9exceptionD2Ev>

0100dbe8 <_ZNSt8bad_castD2Ev>:
 100dbe8:	008040b4 	movhi	r2,258
 100dbec:	1096ad04 	addi	r2,r2,23220
 100dbf0:	20800015 	stw	r2,0(r4)
 100dbf4:	100ba381 	jmpi	100ba38 <_ZNSt9exceptionD2Ev>

0100dbf8 <_Znwm>:
 100dbf8:	deffee04 	addi	sp,sp,-72
 100dbfc:	00804074 	movhi	r2,257
 100dc00:	10b3a604 	addi	r2,r2,-12648
 100dc04:	d8800615 	stw	r2,24(sp)
 100dc08:	00c040b4 	movhi	r3,258
 100dc0c:	18d1c104 	addi	r3,r3,18180
 100dc10:	00804074 	movhi	r2,257
 100dc14:	10b73504 	addi	r2,r2,-9004
 100dc18:	d9000e15 	stw	r4,56(sp)
 100dc1c:	d809883a 	mov	r4,sp
 100dc20:	d8800915 	stw	r2,36(sp)
 100dc24:	dfc01115 	stw	ra,68(sp)
 100dc28:	df001015 	stw	fp,64(sp)
 100dc2c:	ddc00f15 	stw	r23,60(sp)
 100dc30:	d8c00715 	stw	r3,28(sp)
 100dc34:	dec00815 	stw	sp,32(sp)
 100dc38:	dec00a15 	stw	sp,40(sp)
 100dc3c:	100dd4c0 	call	100dd4c <_Unwind_SjLj_Register>
 100dc40:	d8800e17 	ldw	r2,56(sp)
 100dc44:	10000a1e 	bne	r2,zero,100dc70 <_Znwm+0x78>
 100dc48:	00800044 	movi	r2,1
 100dc4c:	d8800e15 	stw	r2,56(sp)
 100dc50:	00000706 	br	100dc70 <_Znwm+0x78>
 100dc54:	008040f4 	movhi	r2,259
 100dc58:	10a6fc04 	addi	r2,r2,-25616
 100dc5c:	10c00017 	ldw	r3,0(r2)
 100dc60:	18000f26 	beq	r3,zero,100dca0 <_Znwm+0xa8>
 100dc64:	00800044 	movi	r2,1
 100dc68:	d8800115 	stw	r2,4(sp)
 100dc6c:	183ee83a 	callr	r3
 100dc70:	d9000e17 	ldw	r4,56(sp)
 100dc74:	100e2c00 	call	100e2c0 <malloc>
 100dc78:	d8800d15 	stw	r2,52(sp)
 100dc7c:	103ff526 	beq	r2,zero,100dc54 <_Znwm+0x5c>
 100dc80:	d809883a 	mov	r4,sp
 100dc84:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100dc88:	d8800d17 	ldw	r2,52(sp)
 100dc8c:	dfc01117 	ldw	ra,68(sp)
 100dc90:	df001017 	ldw	fp,64(sp)
 100dc94:	ddc00f17 	ldw	r23,60(sp)
 100dc98:	dec01204 	addi	sp,sp,72
 100dc9c:	f800283a 	ret
 100dca0:	01000104 	movi	r4,4
 100dca4:	100da700 	call	100da70 <__cxa_allocate_exception>
 100dca8:	1009883a 	mov	r4,r2
 100dcac:	008040b4 	movhi	r2,258
 100dcb0:	10957404 	addi	r2,r2,21968
 100dcb4:	20800015 	stw	r2,0(r4)
 100dcb8:	00c00044 	movi	r3,1
 100dcbc:	d8c00115 	stw	r3,4(sp)
 100dcc0:	014040b4 	movhi	r5,258
 100dcc4:	29557b04 	addi	r5,r5,21996
 100dcc8:	01804074 	movhi	r6,257
 100dccc:	31aeb704 	addi	r6,r6,-17700
 100dcd0:	100d6e80 	call	100d6e8 <__cxa_throw>
 100dcd4:	d8800317 	ldw	r2,12(sp)
 100dcd8:	00ffffc4 	movi	r3,-1
 100dcdc:	d9000217 	ldw	r4,8(sp)
 100dce0:	10c00226 	beq	r2,r3,100dcec <_Znwm+0xf4>
 100dce4:	d8c00115 	stw	r3,4(sp)
 100dce8:	100e0180 	call	100e018 <_Unwind_SjLj_Resume>
 100dcec:	00bfffc4 	movi	r2,-1
 100dcf0:	d8800115 	stw	r2,4(sp)
 100dcf4:	100cd180 	call	100cd18 <__cxa_call_unexpected>

0100dcf8 <__cxa_call_terminate>:
 100dcf8:	defffe04 	addi	sp,sp,-8
 100dcfc:	dc000015 	stw	r16,0(sp)
 100dd00:	dfc00115 	stw	ra,4(sp)
 100dd04:	2021883a 	mov	r16,r4
 100dd08:	20000626 	beq	r4,zero,100dd24 <__cxa_call_terminate+0x2c>
 100dd0c:	100d5500 	call	100d550 <__cxa_begin_catch>
 100dd10:	80c00017 	ldw	r3,0(r16)
 100dd14:	0090caf4 	movhi	r2,17195
 100dd18:	108ac004 	addi	r2,r2,11008
 100dd1c:	81000117 	ldw	r4,4(r16)
 100dd20:	18800126 	beq	r3,r2,100dd28 <__cxa_call_terminate+0x30>
 100dd24:	100d4440 	call	100d444 <_ZSt9terminatev>
 100dd28:	0091d3b4 	movhi	r2,18254
 100dd2c:	109550c4 	addi	r2,r2,21827
 100dd30:	20bffc1e 	bne	r4,r2,100dd24 <__cxa_call_terminate+0x2c>
 100dd34:	813ff817 	ldw	r4,-32(r16)
 100dd38:	100d3a00 	call	100d3a0 <_ZN10__cxxabiv111__terminateEPFvvE>

0100dd3c <__cxa_get_globals_fast>:
 100dd3c:	d0a7d804 	addi	r2,gp,-24736
 100dd40:	f800283a 	ret

0100dd44 <__cxa_get_globals>:
 100dd44:	d0a7d804 	addi	r2,gp,-24736
 100dd48:	f800283a 	ret

0100dd4c <_Unwind_SjLj_Register>:
 100dd4c:	d0a7da17 	ldw	r2,-24728(gp)
 100dd50:	20800015 	stw	r2,0(r4)
 100dd54:	d127da15 	stw	r4,-24728(gp)
 100dd58:	f800283a 	ret

0100dd5c <_Unwind_SjLj_Unregister>:
 100dd5c:	20800017 	ldw	r2,0(r4)
 100dd60:	d0a7da15 	stw	r2,-24728(gp)
 100dd64:	f800283a 	ret

0100dd68 <_Unwind_GetGR>:
 100dd68:	20800017 	ldw	r2,0(r4)
 100dd6c:	294b883a 	add	r5,r5,r5
 100dd70:	294b883a 	add	r5,r5,r5
 100dd74:	288b883a 	add	r5,r5,r2
 100dd78:	28800217 	ldw	r2,8(r5)
 100dd7c:	f800283a 	ret

0100dd80 <_Unwind_GetCFA>:
 100dd80:	21000017 	ldw	r4,0(r4)
 100dd84:	0005883a 	mov	r2,zero
 100dd88:	20000126 	beq	r4,zero,100dd90 <_Unwind_GetCFA+0x10>
 100dd8c:	20800a17 	ldw	r2,40(r4)
 100dd90:	f800283a 	ret

0100dd94 <_Unwind_SetGR>:
 100dd94:	20800017 	ldw	r2,0(r4)
 100dd98:	294b883a 	add	r5,r5,r5
 100dd9c:	294b883a 	add	r5,r5,r5
 100dda0:	288b883a 	add	r5,r5,r2
 100dda4:	29800215 	stw	r6,8(r5)
 100dda8:	f800283a 	ret

0100ddac <_Unwind_GetIP>:
 100ddac:	20c00017 	ldw	r3,0(r4)
 100ddb0:	18800117 	ldw	r2,4(r3)
 100ddb4:	10800044 	addi	r2,r2,1
 100ddb8:	f800283a 	ret

0100ddbc <_Unwind_GetIPInfo>:
 100ddbc:	20c00017 	ldw	r3,0(r4)
 100ddc0:	28000015 	stw	zero,0(r5)
 100ddc4:	18800117 	ldw	r2,4(r3)
 100ddc8:	10800044 	addi	r2,r2,1
 100ddcc:	f800283a 	ret

0100ddd0 <_Unwind_SetIP>:
 100ddd0:	20800017 	ldw	r2,0(r4)
 100ddd4:	297fffc4 	addi	r5,r5,-1
 100ddd8:	11400115 	stw	r5,4(r2)
 100dddc:	f800283a 	ret

0100dde0 <_Unwind_GetLanguageSpecificData>:
 100dde0:	20c00017 	ldw	r3,0(r4)
 100dde4:	18800717 	ldw	r2,28(r3)
 100dde8:	f800283a 	ret

0100ddec <_Unwind_GetRegionStart>:
 100ddec:	0005883a 	mov	r2,zero
 100ddf0:	f800283a 	ret

0100ddf4 <_Unwind_FindEnclosingFunction>:
 100ddf4:	0005883a 	mov	r2,zero
 100ddf8:	f800283a 	ret

0100ddfc <_Unwind_GetDataRelBase>:
 100ddfc:	0005883a 	mov	r2,zero
 100de00:	f800283a 	ret

0100de04 <_Unwind_GetTextRelBase>:
 100de04:	0005883a 	mov	r2,zero
 100de08:	f800283a 	ret

0100de0c <_Unwind_ForcedUnwind_Phase2>:
 100de0c:	defff604 	addi	sp,sp,-40
 100de10:	dd400815 	stw	r21,32(sp)
 100de14:	dd000715 	stw	r20,28(sp)
 100de18:	25400317 	ldw	r21,12(r4)
 100de1c:	25000417 	ldw	r20,16(r4)
 100de20:	28800017 	ldw	r2,0(r5)
 100de24:	dc800515 	stw	r18,20(sp)
 100de28:	dc000315 	stw	r16,12(sp)
 100de2c:	2825883a 	mov	r18,r5
 100de30:	2021883a 	mov	r16,r4
 100de34:	dfc00915 	stw	ra,36(sp)
 100de38:	dcc00615 	stw	r19,24(sp)
 100de3c:	dc400415 	stw	r17,16(sp)
 100de40:	00001406 	br	100de94 <_Unwind_ForcedUnwind_Phase2+0x88>
 100de44:	00800144 	movi	r2,5
 100de48:	88802626 	beq	r17,r2,100dee4 <_Unwind_ForcedUnwind_Phase2+0xd8>
 100de4c:	98000c26 	beq	r19,zero,100de80 <_Unwind_ForcedUnwind_Phase2+0x74>
 100de50:	82000017 	ldw	r8,0(r16)
 100de54:	dc000015 	stw	r16,0(sp)
 100de58:	dc800115 	stw	r18,4(sp)
 100de5c:	82400117 	ldw	r9,4(r16)
 100de60:	400d883a 	mov	r6,r8
 100de64:	480f883a 	mov	r7,r9
 100de68:	983ee83a 	callr	r19
 100de6c:	1023883a 	mov	r17,r2
 100de70:	008001c4 	movi	r2,7
 100de74:	88801b26 	beq	r17,r2,100dee4 <_Unwind_ForcedUnwind_Phase2+0xd8>
 100de78:	00800204 	movi	r2,8
 100de7c:	8880181e 	bne	r17,r2,100dee0 <_Unwind_ForcedUnwind_Phase2+0xd4>
 100de80:	91000017 	ldw	r4,0(r18)
 100de84:	100dd5c0 	call	100dd5c <_Unwind_SjLj_Unregister>
 100de88:	90800017 	ldw	r2,0(r18)
 100de8c:	10800017 	ldw	r2,0(r2)
 100de90:	90800015 	stw	r2,0(r18)
 100de94:	01400684 	movi	r5,26
 100de98:	04400144 	movi	r17,5
 100de9c:	0027883a 	mov	r19,zero
 100dea0:	10000326 	beq	r2,zero,100deb0 <_Unwind_ForcedUnwind_Phase2+0xa4>
 100dea4:	14c00617 	ldw	r19,24(r2)
 100dea8:	0023883a 	mov	r17,zero
 100deac:	01400284 	movi	r5,10
 100deb0:	dc000015 	stw	r16,0(sp)
 100deb4:	dc800115 	stw	r18,4(sp)
 100deb8:	80800017 	ldw	r2,0(r16)
 100debc:	dd000215 	stw	r20,8(sp)
 100dec0:	80c00117 	ldw	r3,4(r16)
 100dec4:	01000044 	movi	r4,1
 100dec8:	100d883a 	mov	r6,r2
 100decc:	180f883a 	mov	r7,r3
 100ded0:	a83ee83a 	callr	r21
 100ded4:	01400284 	movi	r5,10
 100ded8:	01000044 	movi	r4,1
 100dedc:	103fd926 	beq	r2,zero,100de44 <_Unwind_ForcedUnwind_Phase2+0x38>
 100dee0:	04400084 	movi	r17,2
 100dee4:	8805883a 	mov	r2,r17
 100dee8:	dfc00917 	ldw	ra,36(sp)
 100deec:	dd400817 	ldw	r21,32(sp)
 100def0:	dd000717 	ldw	r20,28(sp)
 100def4:	dcc00617 	ldw	r19,24(sp)
 100def8:	dc800517 	ldw	r18,20(sp)
 100defc:	dc400417 	ldw	r17,16(sp)
 100df00:	dc000317 	ldw	r16,12(sp)
 100df04:	dec00a04 	addi	sp,sp,40
 100df08:	f800283a 	ret

0100df0c <_Unwind_DeleteException>:
 100df0c:	20800217 	ldw	r2,8(r4)
 100df10:	200b883a 	mov	r5,r4
 100df14:	01000044 	movi	r4,1
 100df18:	10000126 	beq	r2,zero,100df20 <_Unwind_DeleteException+0x14>
 100df1c:	1000683a 	jmp	r2
 100df20:	f800283a 	ret

0100df24 <_Unwind_RaiseException_Phase2>:
 100df24:	defffa04 	addi	sp,sp,-24
 100df28:	dc800415 	stw	r18,16(sp)
 100df2c:	2825883a 	mov	r18,r5
 100df30:	29400017 	ldw	r5,0(r5)
 100df34:	dc400315 	stw	r17,12(sp)
 100df38:	dfc00515 	stw	ra,20(sp)
 100df3c:	dc000215 	stw	r16,8(sp)
 100df40:	2023883a 	mov	r17,r4
 100df44:	28001b26 	beq	r5,zero,100dfb4 <_Unwind_RaiseException_Phase2+0x90>
 100df48:	88800417 	ldw	r2,16(r17)
 100df4c:	0007883a 	mov	r3,zero
 100df50:	2a000617 	ldw	r8,24(r5)
 100df54:	28a1003a 	cmpeq	r16,r5,r2
 100df58:	802090ba 	slli	r16,r16,2
 100df5c:	18001b1e 	bne	r3,zero,100dfcc <_Unwind_RaiseException_Phase2+0xa8>
 100df60:	40000e26 	beq	r8,zero,100df9c <_Unwind_RaiseException_Phase2+0x78>
 100df64:	88800017 	ldw	r2,0(r17)
 100df68:	dc400015 	stw	r17,0(sp)
 100df6c:	dc800115 	stw	r18,4(sp)
 100df70:	88c00117 	ldw	r3,4(r17)
 100df74:	01000044 	movi	r4,1
 100df78:	81400094 	ori	r5,r16,2
 100df7c:	180f883a 	mov	r7,r3
 100df80:	100d883a 	mov	r6,r2
 100df84:	403ee83a 	callr	r8
 100df88:	1007883a 	mov	r3,r2
 100df8c:	008001c4 	movi	r2,7
 100df90:	18800f26 	beq	r3,r2,100dfd0 <_Unwind_RaiseException_Phase2+0xac>
 100df94:	00800204 	movi	r2,8
 100df98:	18800c1e 	bne	r3,r2,100dfcc <_Unwind_RaiseException_Phase2+0xa8>
 100df9c:	8000131e 	bne	r16,zero,100dfec <_Unwind_RaiseException_Phase2+0xc8>
 100dfa0:	91400017 	ldw	r5,0(r18)
 100dfa4:	28800017 	ldw	r2,0(r5)
 100dfa8:	100b883a 	mov	r5,r2
 100dfac:	90800015 	stw	r2,0(r18)
 100dfb0:	283fe51e 	bne	r5,zero,100df48 <_Unwind_RaiseException_Phase2+0x24>
 100dfb4:	88800417 	ldw	r2,16(r17)
 100dfb8:	00c00144 	movi	r3,5
 100dfbc:	0011883a 	mov	r8,zero
 100dfc0:	28a1003a 	cmpeq	r16,r5,r2
 100dfc4:	802090ba 	slli	r16,r16,2
 100dfc8:	183fe526 	beq	r3,zero,100df60 <_Unwind_RaiseException_Phase2+0x3c>
 100dfcc:	00c00084 	movi	r3,2
 100dfd0:	1805883a 	mov	r2,r3
 100dfd4:	dfc00517 	ldw	ra,20(sp)
 100dfd8:	dc800417 	ldw	r18,16(sp)
 100dfdc:	dc400317 	ldw	r17,12(sp)
 100dfe0:	dc000217 	ldw	r16,8(sp)
 100dfe4:	dec00604 	addi	sp,sp,24
 100dfe8:	f800283a 	ret
 100dfec:	100e2940 	call	100e294 <abort>

0100dff0 <uw_install_context>:
 100dff0:	28800017 	ldw	r2,0(r5)
 100dff4:	deffff04 	addi	sp,sp,-4
 100dff8:	df000015 	stw	fp,0(sp)
 100dffc:	10c00804 	addi	r3,r2,32
 100e000:	d839883a 	mov	fp,sp
 100e004:	d0a7da15 	stw	r2,-24728(gp)
 100e008:	19000117 	ldw	r4,4(r3)
 100e00c:	1f000017 	ldw	fp,0(r3)
 100e010:	1ec00217 	ldw	sp,8(r3)
 100e014:	2000683a 	jmp	r4

0100e018 <_Unwind_SjLj_Resume>:
 100e018:	d0e7da17 	ldw	r3,-24728(gp)
 100e01c:	20800317 	ldw	r2,12(r4)
 100e020:	defffc04 	addi	sp,sp,-16
 100e024:	dfc00315 	stw	ra,12(sp)
 100e028:	dc000215 	stw	r16,8(sp)
 100e02c:	d8c00015 	stw	r3,0(sp)
 100e030:	d8c00115 	stw	r3,4(sp)
 100e034:	1000071e 	bne	r2,zero,100e054 <_Unwind_SjLj_Resume+0x3c>
 100e038:	dc000104 	addi	r16,sp,4
 100e03c:	800b883a 	mov	r5,r16
 100e040:	100df240 	call	100df24 <_Unwind_RaiseException_Phase2>
 100e044:	1007883a 	mov	r3,r2
 100e048:	008001c4 	movi	r2,7
 100e04c:	18800626 	beq	r3,r2,100e068 <_Unwind_SjLj_Resume+0x50>
 100e050:	100e2940 	call	100e294 <abort>
 100e054:	dc000104 	addi	r16,sp,4
 100e058:	800b883a 	mov	r5,r16
 100e05c:	100de0c0 	call	100de0c <_Unwind_ForcedUnwind_Phase2>
 100e060:	1007883a 	mov	r3,r2
 100e064:	003ff806 	br	100e048 <_Unwind_SjLj_Resume+0x30>
 100e068:	800b883a 	mov	r5,r16
 100e06c:	d809883a 	mov	r4,sp
 100e070:	100dff00 	call	100dff0 <uw_install_context>

0100e074 <_Unwind_SjLj_RaiseException>:
 100e074:	d0a7da17 	ldw	r2,-24728(gp)
 100e078:	defff804 	addi	sp,sp,-32
 100e07c:	dc000415 	stw	r16,16(sp)
 100e080:	dfc00715 	stw	ra,28(sp)
 100e084:	dc800615 	stw	r18,24(sp)
 100e088:	dc400515 	stw	r17,20(sp)
 100e08c:	2021883a 	mov	r16,r4
 100e090:	d8800215 	stw	r2,8(sp)
 100e094:	d8800315 	stw	r2,12(sp)
 100e098:	10001626 	beq	r2,zero,100e0f4 <_Unwind_SjLj_RaiseException+0x80>
 100e09c:	dc400304 	addi	r17,sp,12
 100e0a0:	04800184 	movi	r18,6
 100e0a4:	00000106 	br	100e0ac <_Unwind_SjLj_RaiseException+0x38>
 100e0a8:	d8800315 	stw	r2,12(sp)
 100e0ac:	12000617 	ldw	r8,24(r2)
 100e0b0:	40000d26 	beq	r8,zero,100e0e8 <_Unwind_SjLj_RaiseException+0x74>
 100e0b4:	80800017 	ldw	r2,0(r16)
 100e0b8:	dc000015 	stw	r16,0(sp)
 100e0bc:	80c00117 	ldw	r3,4(r16)
 100e0c0:	01000044 	movi	r4,1
 100e0c4:	dc400115 	stw	r17,4(sp)
 100e0c8:	180f883a 	mov	r7,r3
 100e0cc:	200b883a 	mov	r5,r4
 100e0d0:	100d883a 	mov	r6,r2
 100e0d4:	403ee83a 	callr	r8
 100e0d8:	1007883a 	mov	r3,r2
 100e0dc:	14800d26 	beq	r2,r18,100e114 <_Unwind_SjLj_RaiseException+0xa0>
 100e0e0:	00800204 	movi	r2,8
 100e0e4:	1880191e 	bne	r3,r2,100e14c <_Unwind_SjLj_RaiseException+0xd8>
 100e0e8:	d8800317 	ldw	r2,12(sp)
 100e0ec:	10800017 	ldw	r2,0(r2)
 100e0f0:	103fed1e 	bne	r2,zero,100e0a8 <_Unwind_SjLj_RaiseException+0x34>
 100e0f4:	00c00144 	movi	r3,5
 100e0f8:	1805883a 	mov	r2,r3
 100e0fc:	dfc00717 	ldw	ra,28(sp)
 100e100:	dc800617 	ldw	r18,24(sp)
 100e104:	dc400517 	ldw	r17,20(sp)
 100e108:	dc000417 	ldw	r16,16(sp)
 100e10c:	dec00804 	addi	sp,sp,32
 100e110:	f800283a 	ret
 100e114:	d8800317 	ldw	r2,12(sp)
 100e118:	80000315 	stw	zero,12(r16)
 100e11c:	8009883a 	mov	r4,r16
 100e120:	80800415 	stw	r2,16(r16)
 100e124:	d8800217 	ldw	r2,8(sp)
 100e128:	880b883a 	mov	r5,r17
 100e12c:	d8800315 	stw	r2,12(sp)
 100e130:	100df240 	call	100df24 <_Unwind_RaiseException_Phase2>
 100e134:	1007883a 	mov	r3,r2
 100e138:	008001c4 	movi	r2,7
 100e13c:	18bfee1e 	bne	r3,r2,100e0f8 <_Unwind_SjLj_RaiseException+0x84>
 100e140:	880b883a 	mov	r5,r17
 100e144:	d9000204 	addi	r4,sp,8
 100e148:	100dff00 	call	100dff0 <uw_install_context>
 100e14c:	00c000c4 	movi	r3,3
 100e150:	1805883a 	mov	r2,r3
 100e154:	dfc00717 	ldw	ra,28(sp)
 100e158:	dc800617 	ldw	r18,24(sp)
 100e15c:	dc400517 	ldw	r17,20(sp)
 100e160:	dc000417 	ldw	r16,16(sp)
 100e164:	dec00804 	addi	sp,sp,32
 100e168:	f800283a 	ret

0100e16c <_Unwind_SjLj_ForcedUnwind>:
 100e16c:	defffc04 	addi	sp,sp,-16
 100e170:	d0a7da17 	ldw	r2,-24728(gp)
 100e174:	dc000215 	stw	r16,8(sp)
 100e178:	dc000104 	addi	r16,sp,4
 100e17c:	21400315 	stw	r5,12(r4)
 100e180:	21800415 	stw	r6,16(r4)
 100e184:	800b883a 	mov	r5,r16
 100e188:	dfc00315 	stw	ra,12(sp)
 100e18c:	d8800015 	stw	r2,0(sp)
 100e190:	d8800115 	stw	r2,4(sp)
 100e194:	100de0c0 	call	100de0c <_Unwind_ForcedUnwind_Phase2>
 100e198:	00c001c4 	movi	r3,7
 100e19c:	10c00426 	beq	r2,r3,100e1b0 <_Unwind_SjLj_ForcedUnwind+0x44>
 100e1a0:	dfc00317 	ldw	ra,12(sp)
 100e1a4:	dc000217 	ldw	r16,8(sp)
 100e1a8:	dec00404 	addi	sp,sp,16
 100e1ac:	f800283a 	ret
 100e1b0:	800b883a 	mov	r5,r16
 100e1b4:	d809883a 	mov	r4,sp
 100e1b8:	100dff00 	call	100dff0 <uw_install_context>

0100e1bc <_Unwind_Backtrace>:
 100e1bc:	d0a7da17 	ldw	r2,-24728(gp)
 100e1c0:	defffa04 	addi	sp,sp,-24
 100e1c4:	dcc00415 	stw	r19,16(sp)
 100e1c8:	dc800315 	stw	r18,12(sp)
 100e1cc:	dc400215 	stw	r17,8(sp)
 100e1d0:	2025883a 	mov	r18,r4
 100e1d4:	2823883a 	mov	r17,r5
 100e1d8:	04c00144 	movi	r19,5
 100e1dc:	dfc00515 	stw	ra,20(sp)
 100e1e0:	dc000115 	stw	r16,4(sp)
 100e1e4:	d8800015 	stw	r2,0(sp)
 100e1e8:	00000406 	br	100e1fc <_Unwind_Backtrace+0x40>
 100e1ec:	84c00b26 	beq	r16,r19,100e21c <_Unwind_Backtrace+0x60>
 100e1f0:	d8800017 	ldw	r2,0(sp)
 100e1f4:	10800017 	ldw	r2,0(r2)
 100e1f8:	d8800015 	stw	r2,0(sp)
 100e1fc:	04000144 	movi	r16,5
 100e200:	10000126 	beq	r2,zero,100e208 <_Unwind_Backtrace+0x4c>
 100e204:	0021883a 	mov	r16,zero
 100e208:	d809883a 	mov	r4,sp
 100e20c:	880b883a 	mov	r5,r17
 100e210:	903ee83a 	callr	r18
 100e214:	103ff526 	beq	r2,zero,100e1ec <_Unwind_Backtrace+0x30>
 100e218:	040000c4 	movi	r16,3
 100e21c:	8005883a 	mov	r2,r16
 100e220:	dfc00517 	ldw	ra,20(sp)
 100e224:	dcc00417 	ldw	r19,16(sp)
 100e228:	dc800317 	ldw	r18,12(sp)
 100e22c:	dc400217 	ldw	r17,8(sp)
 100e230:	dc000117 	ldw	r16,4(sp)
 100e234:	dec00604 	addi	sp,sp,24
 100e238:	f800283a 	ret

0100e23c <_Unwind_SjLj_Resume_or_Rethrow>:
 100e23c:	20800317 	ldw	r2,12(r4)
 100e240:	defffc04 	addi	sp,sp,-16
 100e244:	dfc00315 	stw	ra,12(sp)
 100e248:	dc000215 	stw	r16,8(sp)
 100e24c:	10000926 	beq	r2,zero,100e274 <_Unwind_SjLj_Resume_or_Rethrow+0x38>
 100e250:	d0a7da17 	ldw	r2,-24728(gp)
 100e254:	dc000104 	addi	r16,sp,4
 100e258:	800b883a 	mov	r5,r16
 100e25c:	d8800015 	stw	r2,0(sp)
 100e260:	d8800115 	stw	r2,4(sp)
 100e264:	100de0c0 	call	100de0c <_Unwind_ForcedUnwind_Phase2>
 100e268:	00c001c4 	movi	r3,7
 100e26c:	10c00626 	beq	r2,r3,100e288 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
 100e270:	100e2940 	call	100e294 <abort>
 100e274:	100e0740 	call	100e074 <_Unwind_SjLj_RaiseException>
 100e278:	dfc00317 	ldw	ra,12(sp)
 100e27c:	dc000217 	ldw	r16,8(sp)
 100e280:	dec00404 	addi	sp,sp,16
 100e284:	f800283a 	ret
 100e288:	800b883a 	mov	r5,r16
 100e28c:	d809883a 	mov	r4,sp
 100e290:	100dff00 	call	100dff0 <uw_install_context>

0100e294 <abort>:
 100e294:	deffff04 	addi	sp,sp,-4
 100e298:	01000184 	movi	r4,6
 100e29c:	dfc00015 	stw	ra,0(sp)
 100e2a0:	100f0100 	call	100f010 <raise>
 100e2a4:	01000044 	movi	r4,1
 100e2a8:	10188000 	call	1018800 <_exit>

0100e2ac <free>:
 100e2ac:	008040b4 	movhi	r2,258
 100e2b0:	109f8b04 	addi	r2,r2,32300
 100e2b4:	200b883a 	mov	r5,r4
 100e2b8:	11000017 	ldw	r4,0(r2)
 100e2bc:	10136541 	jmpi	1013654 <_free_r>

0100e2c0 <malloc>:
 100e2c0:	008040b4 	movhi	r2,258
 100e2c4:	109f8b04 	addi	r2,r2,32300
 100e2c8:	200b883a 	mov	r5,r4
 100e2cc:	11000017 	ldw	r4,0(r2)
 100e2d0:	100e2d41 	jmpi	100e2d4 <_malloc_r>

0100e2d4 <_malloc_r>:
 100e2d4:	defff604 	addi	sp,sp,-40
 100e2d8:	28c002c4 	addi	r3,r5,11
 100e2dc:	00800584 	movi	r2,22
 100e2e0:	dc800215 	stw	r18,8(sp)
 100e2e4:	dfc00915 	stw	ra,36(sp)
 100e2e8:	df000815 	stw	fp,32(sp)
 100e2ec:	ddc00715 	stw	r23,28(sp)
 100e2f0:	dd800615 	stw	r22,24(sp)
 100e2f4:	dd400515 	stw	r21,20(sp)
 100e2f8:	dd000415 	stw	r20,16(sp)
 100e2fc:	dcc00315 	stw	r19,12(sp)
 100e300:	dc400115 	stw	r17,4(sp)
 100e304:	dc000015 	stw	r16,0(sp)
 100e308:	2025883a 	mov	r18,r4
 100e30c:	10c01236 	bltu	r2,r3,100e358 <_malloc_r+0x84>
 100e310:	04400404 	movi	r17,16
 100e314:	8940142e 	bgeu	r17,r5,100e368 <_malloc_r+0x94>
 100e318:	00800304 	movi	r2,12
 100e31c:	0007883a 	mov	r3,zero
 100e320:	90800015 	stw	r2,0(r18)
 100e324:	1805883a 	mov	r2,r3
 100e328:	dfc00917 	ldw	ra,36(sp)
 100e32c:	df000817 	ldw	fp,32(sp)
 100e330:	ddc00717 	ldw	r23,28(sp)
 100e334:	dd800617 	ldw	r22,24(sp)
 100e338:	dd400517 	ldw	r21,20(sp)
 100e33c:	dd000417 	ldw	r20,16(sp)
 100e340:	dcc00317 	ldw	r19,12(sp)
 100e344:	dc800217 	ldw	r18,8(sp)
 100e348:	dc400117 	ldw	r17,4(sp)
 100e34c:	dc000017 	ldw	r16,0(sp)
 100e350:	dec00a04 	addi	sp,sp,40
 100e354:	f800283a 	ret
 100e358:	00bffe04 	movi	r2,-8
 100e35c:	18a2703a 	and	r17,r3,r2
 100e360:	883fed16 	blt	r17,zero,100e318 <_malloc_r+0x44>
 100e364:	897fec36 	bltu	r17,r5,100e318 <_malloc_r+0x44>
 100e368:	9009883a 	mov	r4,r18
 100e36c:	10194680 	call	1019468 <__malloc_lock>
 100e370:	00807dc4 	movi	r2,503
 100e374:	14402b2e 	bgeu	r2,r17,100e424 <_malloc_r+0x150>
 100e378:	8806d27a 	srli	r3,r17,9
 100e37c:	18003f1e 	bne	r3,zero,100e47c <_malloc_r+0x1a8>
 100e380:	880cd0fa 	srli	r6,r17,3
 100e384:	300490fa 	slli	r2,r6,3
 100e388:	02c040b4 	movhi	r11,258
 100e38c:	5ad87b04 	addi	r11,r11,25068
 100e390:	12cb883a 	add	r5,r2,r11
 100e394:	2c000317 	ldw	r16,12(r5)
 100e398:	580f883a 	mov	r7,r11
 100e39c:	2c00041e 	bne	r5,r16,100e3b0 <_malloc_r+0xdc>
 100e3a0:	00000a06 	br	100e3cc <_malloc_r+0xf8>
 100e3a4:	1800860e 	bge	r3,zero,100e5c0 <_malloc_r+0x2ec>
 100e3a8:	84000317 	ldw	r16,12(r16)
 100e3ac:	2c000726 	beq	r5,r16,100e3cc <_malloc_r+0xf8>
 100e3b0:	80800117 	ldw	r2,4(r16)
 100e3b4:	00ffff04 	movi	r3,-4
 100e3b8:	10c8703a 	and	r4,r2,r3
 100e3bc:	2447c83a 	sub	r3,r4,r17
 100e3c0:	008003c4 	movi	r2,15
 100e3c4:	10fff70e 	bge	r2,r3,100e3a4 <_malloc_r+0xd0>
 100e3c8:	31bfffc4 	addi	r6,r6,-1
 100e3cc:	32400044 	addi	r9,r6,1
 100e3d0:	028040b4 	movhi	r10,258
 100e3d4:	52987d04 	addi	r10,r10,25076
 100e3d8:	54000217 	ldw	r16,8(r10)
 100e3dc:	8280a026 	beq	r16,r10,100e660 <_malloc_r+0x38c>
 100e3e0:	80800117 	ldw	r2,4(r16)
 100e3e4:	00ffff04 	movi	r3,-4
 100e3e8:	10ca703a 	and	r5,r2,r3
 100e3ec:	2c4dc83a 	sub	r6,r5,r17
 100e3f0:	008003c4 	movi	r2,15
 100e3f4:	11808316 	blt	r2,r6,100e604 <_malloc_r+0x330>
 100e3f8:	52800315 	stw	r10,12(r10)
 100e3fc:	52800215 	stw	r10,8(r10)
 100e400:	30002916 	blt	r6,zero,100e4a8 <_malloc_r+0x1d4>
 100e404:	8147883a 	add	r3,r16,r5
 100e408:	18800117 	ldw	r2,4(r3)
 100e40c:	9009883a 	mov	r4,r18
 100e410:	10800054 	ori	r2,r2,1
 100e414:	18800115 	stw	r2,4(r3)
 100e418:	10195700 	call	1019570 <__malloc_unlock>
 100e41c:	80c00204 	addi	r3,r16,8
 100e420:	003fc006 	br	100e324 <_malloc_r+0x50>
 100e424:	02c040b4 	movhi	r11,258
 100e428:	5ad87b04 	addi	r11,r11,25068
 100e42c:	8ac5883a 	add	r2,r17,r11
 100e430:	14000317 	ldw	r16,12(r2)
 100e434:	580f883a 	mov	r7,r11
 100e438:	8806d0fa 	srli	r3,r17,3
 100e43c:	14006c26 	beq	r2,r16,100e5f0 <_malloc_r+0x31c>
 100e440:	80c00117 	ldw	r3,4(r16)
 100e444:	00bfff04 	movi	r2,-4
 100e448:	81800317 	ldw	r6,12(r16)
 100e44c:	1886703a 	and	r3,r3,r2
 100e450:	80c7883a 	add	r3,r16,r3
 100e454:	18800117 	ldw	r2,4(r3)
 100e458:	81400217 	ldw	r5,8(r16)
 100e45c:	9009883a 	mov	r4,r18
 100e460:	10800054 	ori	r2,r2,1
 100e464:	18800115 	stw	r2,4(r3)
 100e468:	31400215 	stw	r5,8(r6)
 100e46c:	29800315 	stw	r6,12(r5)
 100e470:	10195700 	call	1019570 <__malloc_unlock>
 100e474:	80c00204 	addi	r3,r16,8
 100e478:	003faa06 	br	100e324 <_malloc_r+0x50>
 100e47c:	00800104 	movi	r2,4
 100e480:	10c0052e 	bgeu	r2,r3,100e498 <_malloc_r+0x1c4>
 100e484:	00800504 	movi	r2,20
 100e488:	10c07836 	bltu	r2,r3,100e66c <_malloc_r+0x398>
 100e48c:	198016c4 	addi	r6,r3,91
 100e490:	300490fa 	slli	r2,r6,3
 100e494:	003fbc06 	br	100e388 <_malloc_r+0xb4>
 100e498:	8804d1ba 	srli	r2,r17,6
 100e49c:	11800e04 	addi	r6,r2,56
 100e4a0:	300490fa 	slli	r2,r6,3
 100e4a4:	003fb806 	br	100e388 <_malloc_r+0xb4>
 100e4a8:	00807fc4 	movi	r2,511
 100e4ac:	1140bb36 	bltu	r2,r5,100e79c <_malloc_r+0x4c8>
 100e4b0:	2806d0fa 	srli	r3,r5,3
 100e4b4:	573ffe04 	addi	fp,r10,-8
 100e4b8:	00800044 	movi	r2,1
 100e4bc:	180890fa 	slli	r4,r3,3
 100e4c0:	1807d0ba 	srai	r3,r3,2
 100e4c4:	e1c00117 	ldw	r7,4(fp)
 100e4c8:	5909883a 	add	r4,r11,r4
 100e4cc:	21400217 	ldw	r5,8(r4)
 100e4d0:	10c4983a 	sll	r2,r2,r3
 100e4d4:	81000315 	stw	r4,12(r16)
 100e4d8:	81400215 	stw	r5,8(r16)
 100e4dc:	388eb03a 	or	r7,r7,r2
 100e4e0:	2c000315 	stw	r16,12(r5)
 100e4e4:	24000215 	stw	r16,8(r4)
 100e4e8:	e1c00115 	stw	r7,4(fp)
 100e4ec:	4807883a 	mov	r3,r9
 100e4f0:	4800cd16 	blt	r9,zero,100e828 <_malloc_r+0x554>
 100e4f4:	1807d0ba 	srai	r3,r3,2
 100e4f8:	00800044 	movi	r2,1
 100e4fc:	10c8983a 	sll	r4,r2,r3
 100e500:	39004436 	bltu	r7,r4,100e614 <_malloc_r+0x340>
 100e504:	21c4703a 	and	r2,r4,r7
 100e508:	10000a1e 	bne	r2,zero,100e534 <_malloc_r+0x260>
 100e50c:	2109883a 	add	r4,r4,r4
 100e510:	00bfff04 	movi	r2,-4
 100e514:	4884703a 	and	r2,r9,r2
 100e518:	3906703a 	and	r3,r7,r4
 100e51c:	12400104 	addi	r9,r2,4
 100e520:	1800041e 	bne	r3,zero,100e534 <_malloc_r+0x260>
 100e524:	2109883a 	add	r4,r4,r4
 100e528:	3904703a 	and	r2,r7,r4
 100e52c:	4a400104 	addi	r9,r9,4
 100e530:	103ffc26 	beq	r2,zero,100e524 <_malloc_r+0x250>
 100e534:	480490fa 	slli	r2,r9,3
 100e538:	4819883a 	mov	r12,r9
 100e53c:	023fff04 	movi	r8,-4
 100e540:	589b883a 	add	r13,r11,r2
 100e544:	6807883a 	mov	r3,r13
 100e548:	014003c4 	movi	r5,15
 100e54c:	1c000317 	ldw	r16,12(r3)
 100e550:	1c00041e 	bne	r3,r16,100e564 <_malloc_r+0x290>
 100e554:	0000a706 	br	100e7f4 <_malloc_r+0x520>
 100e558:	3000ab0e 	bge	r6,zero,100e808 <_malloc_r+0x534>
 100e55c:	84000317 	ldw	r16,12(r16)
 100e560:	1c00a426 	beq	r3,r16,100e7f4 <_malloc_r+0x520>
 100e564:	80800117 	ldw	r2,4(r16)
 100e568:	1204703a 	and	r2,r2,r8
 100e56c:	144dc83a 	sub	r6,r2,r17
 100e570:	29bff90e 	bge	r5,r6,100e558 <_malloc_r+0x284>
 100e574:	81000317 	ldw	r4,12(r16)
 100e578:	80c00217 	ldw	r3,8(r16)
 100e57c:	89400054 	ori	r5,r17,1
 100e580:	8445883a 	add	r2,r16,r17
 100e584:	20c00215 	stw	r3,8(r4)
 100e588:	19000315 	stw	r4,12(r3)
 100e58c:	81400115 	stw	r5,4(r16)
 100e590:	1187883a 	add	r3,r2,r6
 100e594:	31000054 	ori	r4,r6,1
 100e598:	50800315 	stw	r2,12(r10)
 100e59c:	50800215 	stw	r2,8(r10)
 100e5a0:	19800015 	stw	r6,0(r3)
 100e5a4:	11000115 	stw	r4,4(r2)
 100e5a8:	12800215 	stw	r10,8(r2)
 100e5ac:	12800315 	stw	r10,12(r2)
 100e5b0:	9009883a 	mov	r4,r18
 100e5b4:	10195700 	call	1019570 <__malloc_unlock>
 100e5b8:	80c00204 	addi	r3,r16,8
 100e5bc:	003f5906 	br	100e324 <_malloc_r+0x50>
 100e5c0:	8109883a 	add	r4,r16,r4
 100e5c4:	20800117 	ldw	r2,4(r4)
 100e5c8:	80c00217 	ldw	r3,8(r16)
 100e5cc:	81400317 	ldw	r5,12(r16)
 100e5d0:	10800054 	ori	r2,r2,1
 100e5d4:	20800115 	stw	r2,4(r4)
 100e5d8:	28c00215 	stw	r3,8(r5)
 100e5dc:	19400315 	stw	r5,12(r3)
 100e5e0:	9009883a 	mov	r4,r18
 100e5e4:	10195700 	call	1019570 <__malloc_unlock>
 100e5e8:	80c00204 	addi	r3,r16,8
 100e5ec:	003f4d06 	br	100e324 <_malloc_r+0x50>
 100e5f0:	80800204 	addi	r2,r16,8
 100e5f4:	14000317 	ldw	r16,12(r2)
 100e5f8:	143f911e 	bne	r2,r16,100e440 <_malloc_r+0x16c>
 100e5fc:	1a400084 	addi	r9,r3,2
 100e600:	003f7306 	br	100e3d0 <_malloc_r+0xfc>
 100e604:	88c00054 	ori	r3,r17,1
 100e608:	8445883a 	add	r2,r16,r17
 100e60c:	80c00115 	stw	r3,4(r16)
 100e610:	003fdf06 	br	100e590 <_malloc_r+0x2bc>
 100e614:	e4000217 	ldw	r16,8(fp)
 100e618:	00bfff04 	movi	r2,-4
 100e61c:	80c00117 	ldw	r3,4(r16)
 100e620:	802d883a 	mov	r22,r16
 100e624:	18aa703a 	and	r21,r3,r2
 100e628:	ac401636 	bltu	r21,r17,100e684 <_malloc_r+0x3b0>
 100e62c:	ac49c83a 	sub	r4,r21,r17
 100e630:	008003c4 	movi	r2,15
 100e634:	1100130e 	bge	r2,r4,100e684 <_malloc_r+0x3b0>
 100e638:	88800054 	ori	r2,r17,1
 100e63c:	8447883a 	add	r3,r16,r17
 100e640:	80800115 	stw	r2,4(r16)
 100e644:	20800054 	ori	r2,r4,1
 100e648:	18800115 	stw	r2,4(r3)
 100e64c:	e0c00215 	stw	r3,8(fp)
 100e650:	9009883a 	mov	r4,r18
 100e654:	10195700 	call	1019570 <__malloc_unlock>
 100e658:	80c00204 	addi	r3,r16,8
 100e65c:	003f3106 	br	100e324 <_malloc_r+0x50>
 100e660:	39c00117 	ldw	r7,4(r7)
 100e664:	573ffe04 	addi	fp,r10,-8
 100e668:	003fa006 	br	100e4ec <_malloc_r+0x218>
 100e66c:	00801504 	movi	r2,84
 100e670:	10c06736 	bltu	r2,r3,100e810 <_malloc_r+0x53c>
 100e674:	8804d33a 	srli	r2,r17,12
 100e678:	11801b84 	addi	r6,r2,110
 100e67c:	300490fa 	slli	r2,r6,3
 100e680:	003f4106 	br	100e388 <_malloc_r+0xb4>
 100e684:	d0a7db17 	ldw	r2,-24724(gp)
 100e688:	d0e06317 	ldw	r3,-32372(gp)
 100e68c:	053fffc4 	movi	r20,-1
 100e690:	10800404 	addi	r2,r2,16
 100e694:	88a7883a 	add	r19,r17,r2
 100e698:	1d000326 	beq	r3,r20,100e6a8 <_malloc_r+0x3d4>
 100e69c:	98c3ffc4 	addi	r3,r19,4095
 100e6a0:	00bc0004 	movi	r2,-4096
 100e6a4:	18a6703a 	and	r19,r3,r2
 100e6a8:	9009883a 	mov	r4,r18
 100e6ac:	980b883a 	mov	r5,r19
 100e6b0:	100eed40 	call	100eed4 <_sbrk_r>
 100e6b4:	1009883a 	mov	r4,r2
 100e6b8:	15000426 	beq	r2,r20,100e6cc <_malloc_r+0x3f8>
 100e6bc:	854b883a 	add	r5,r16,r21
 100e6c0:	1029883a 	mov	r20,r2
 100e6c4:	11405a2e 	bgeu	r2,r5,100e830 <_malloc_r+0x55c>
 100e6c8:	87000c26 	beq	r16,fp,100e6fc <_malloc_r+0x428>
 100e6cc:	e4000217 	ldw	r16,8(fp)
 100e6d0:	80c00117 	ldw	r3,4(r16)
 100e6d4:	00bfff04 	movi	r2,-4
 100e6d8:	1884703a 	and	r2,r3,r2
 100e6dc:	14400336 	bltu	r2,r17,100e6ec <_malloc_r+0x418>
 100e6e0:	1449c83a 	sub	r4,r2,r17
 100e6e4:	008003c4 	movi	r2,15
 100e6e8:	113fd316 	blt	r2,r4,100e638 <_malloc_r+0x364>
 100e6ec:	9009883a 	mov	r4,r18
 100e6f0:	10195700 	call	1019570 <__malloc_unlock>
 100e6f4:	0007883a 	mov	r3,zero
 100e6f8:	003f0a06 	br	100e324 <_malloc_r+0x50>
 100e6fc:	05c040f4 	movhi	r23,259
 100e700:	bdd12b04 	addi	r23,r23,17580
 100e704:	b8800017 	ldw	r2,0(r23)
 100e708:	988d883a 	add	r6,r19,r2
 100e70c:	b9800015 	stw	r6,0(r23)
 100e710:	d0e06317 	ldw	r3,-32372(gp)
 100e714:	00bfffc4 	movi	r2,-1
 100e718:	18808e26 	beq	r3,r2,100e954 <_malloc_r+0x680>
 100e71c:	2145c83a 	sub	r2,r4,r5
 100e720:	3085883a 	add	r2,r6,r2
 100e724:	b8800015 	stw	r2,0(r23)
 100e728:	20c001cc 	andi	r3,r4,7
 100e72c:	18005f1e 	bne	r3,zero,100e8ac <_malloc_r+0x5d8>
 100e730:	000b883a 	mov	r5,zero
 100e734:	a4c5883a 	add	r2,r20,r19
 100e738:	1083ffcc 	andi	r2,r2,4095
 100e73c:	00c40004 	movi	r3,4096
 100e740:	1887c83a 	sub	r3,r3,r2
 100e744:	28e7883a 	add	r19,r5,r3
 100e748:	9009883a 	mov	r4,r18
 100e74c:	980b883a 	mov	r5,r19
 100e750:	100eed40 	call	100eed4 <_sbrk_r>
 100e754:	1007883a 	mov	r3,r2
 100e758:	00bfffc4 	movi	r2,-1
 100e75c:	18807a26 	beq	r3,r2,100e948 <_malloc_r+0x674>
 100e760:	1d05c83a 	sub	r2,r3,r20
 100e764:	9885883a 	add	r2,r19,r2
 100e768:	10c00054 	ori	r3,r2,1
 100e76c:	b8800017 	ldw	r2,0(r23)
 100e770:	a021883a 	mov	r16,r20
 100e774:	a0c00115 	stw	r3,4(r20)
 100e778:	9885883a 	add	r2,r19,r2
 100e77c:	b8800015 	stw	r2,0(r23)
 100e780:	e5000215 	stw	r20,8(fp)
 100e784:	b7003626 	beq	r22,fp,100e860 <_malloc_r+0x58c>
 100e788:	018003c4 	movi	r6,15
 100e78c:	35404b36 	bltu	r6,r21,100e8bc <_malloc_r+0x5e8>
 100e790:	00800044 	movi	r2,1
 100e794:	a0800115 	stw	r2,4(r20)
 100e798:	003fcd06 	br	100e6d0 <_malloc_r+0x3fc>
 100e79c:	2808d27a 	srli	r4,r5,9
 100e7a0:	2000371e 	bne	r4,zero,100e880 <_malloc_r+0x5ac>
 100e7a4:	2808d0fa 	srli	r4,r5,3
 100e7a8:	200690fa 	slli	r3,r4,3
 100e7ac:	1ad1883a 	add	r8,r3,r11
 100e7b0:	41800217 	ldw	r6,8(r8)
 100e7b4:	41805b26 	beq	r8,r6,100e924 <_malloc_r+0x650>
 100e7b8:	30800117 	ldw	r2,4(r6)
 100e7bc:	00ffff04 	movi	r3,-4
 100e7c0:	10c4703a 	and	r2,r2,r3
 100e7c4:	2880022e 	bgeu	r5,r2,100e7d0 <_malloc_r+0x4fc>
 100e7c8:	31800217 	ldw	r6,8(r6)
 100e7cc:	41bffa1e 	bne	r8,r6,100e7b8 <_malloc_r+0x4e4>
 100e7d0:	32000317 	ldw	r8,12(r6)
 100e7d4:	39c00117 	ldw	r7,4(r7)
 100e7d8:	82000315 	stw	r8,12(r16)
 100e7dc:	81800215 	stw	r6,8(r16)
 100e7e0:	070040b4 	movhi	fp,258
 100e7e4:	e7187b04 	addi	fp,fp,25068
 100e7e8:	34000315 	stw	r16,12(r6)
 100e7ec:	44000215 	stw	r16,8(r8)
 100e7f0:	003f3e06 	br	100e4ec <_malloc_r+0x218>
 100e7f4:	63000044 	addi	r12,r12,1
 100e7f8:	608000cc 	andi	r2,r12,3
 100e7fc:	10005d26 	beq	r2,zero,100e974 <_malloc_r+0x6a0>
 100e800:	18c00204 	addi	r3,r3,8
 100e804:	003f5106 	br	100e54c <_malloc_r+0x278>
 100e808:	8089883a 	add	r4,r16,r2
 100e80c:	003f6d06 	br	100e5c4 <_malloc_r+0x2f0>
 100e810:	00805504 	movi	r2,340
 100e814:	10c02036 	bltu	r2,r3,100e898 <_malloc_r+0x5c4>
 100e818:	8804d3fa 	srli	r2,r17,15
 100e81c:	11801dc4 	addi	r6,r2,119
 100e820:	300490fa 	slli	r2,r6,3
 100e824:	003ed806 	br	100e388 <_malloc_r+0xb4>
 100e828:	48c000c4 	addi	r3,r9,3
 100e82c:	003f3106 	br	100e4f4 <_malloc_r+0x220>
 100e830:	05c040f4 	movhi	r23,259
 100e834:	bdd12b04 	addi	r23,r23,17580
 100e838:	b8800017 	ldw	r2,0(r23)
 100e83c:	988d883a 	add	r6,r19,r2
 100e840:	b9800015 	stw	r6,0(r23)
 100e844:	293fb21e 	bne	r5,r4,100e710 <_malloc_r+0x43c>
 100e848:	2083ffcc 	andi	r2,r4,4095
 100e84c:	103fb01e 	bne	r2,zero,100e710 <_malloc_r+0x43c>
 100e850:	e4000217 	ldw	r16,8(fp)
 100e854:	9d45883a 	add	r2,r19,r21
 100e858:	10800054 	ori	r2,r2,1
 100e85c:	80800115 	stw	r2,4(r16)
 100e860:	b8c00017 	ldw	r3,0(r23)
 100e864:	d0a7dc17 	ldw	r2,-24720(gp)
 100e868:	10c0012e 	bgeu	r2,r3,100e870 <_malloc_r+0x59c>
 100e86c:	d0e7dc15 	stw	r3,-24720(gp)
 100e870:	d0a7dd17 	ldw	r2,-24716(gp)
 100e874:	10ff962e 	bgeu	r2,r3,100e6d0 <_malloc_r+0x3fc>
 100e878:	d0e7dd15 	stw	r3,-24716(gp)
 100e87c:	003f9406 	br	100e6d0 <_malloc_r+0x3fc>
 100e880:	00800104 	movi	r2,4
 100e884:	11001e36 	bltu	r2,r4,100e900 <_malloc_r+0x62c>
 100e888:	2804d1ba 	srli	r2,r5,6
 100e88c:	11000e04 	addi	r4,r2,56
 100e890:	200690fa 	slli	r3,r4,3
 100e894:	003fc506 	br	100e7ac <_malloc_r+0x4d8>
 100e898:	00815504 	movi	r2,1364
 100e89c:	10c01d2e 	bgeu	r2,r3,100e914 <_malloc_r+0x640>
 100e8a0:	01801f84 	movi	r6,126
 100e8a4:	0080fc04 	movi	r2,1008
 100e8a8:	003eb706 	br	100e388 <_malloc_r+0xb4>
 100e8ac:	00800204 	movi	r2,8
 100e8b0:	10cbc83a 	sub	r5,r2,r3
 100e8b4:	2169883a 	add	r20,r4,r5
 100e8b8:	003f9e06 	br	100e734 <_malloc_r+0x460>
 100e8bc:	00bffe04 	movi	r2,-8
 100e8c0:	a93ffd04 	addi	r4,r21,-12
 100e8c4:	2088703a 	and	r4,r4,r2
 100e8c8:	b10b883a 	add	r5,r22,r4
 100e8cc:	00c00144 	movi	r3,5
 100e8d0:	28c00215 	stw	r3,8(r5)
 100e8d4:	28c00115 	stw	r3,4(r5)
 100e8d8:	b0800117 	ldw	r2,4(r22)
 100e8dc:	1080004c 	andi	r2,r2,1
 100e8e0:	2084b03a 	or	r2,r4,r2
 100e8e4:	b0800115 	stw	r2,4(r22)
 100e8e8:	313fdd2e 	bgeu	r6,r4,100e860 <_malloc_r+0x58c>
 100e8ec:	b1400204 	addi	r5,r22,8
 100e8f0:	9009883a 	mov	r4,r18
 100e8f4:	10136540 	call	1013654 <_free_r>
 100e8f8:	e4000217 	ldw	r16,8(fp)
 100e8fc:	003fd806 	br	100e860 <_malloc_r+0x58c>
 100e900:	00800504 	movi	r2,20
 100e904:	11001536 	bltu	r2,r4,100e95c <_malloc_r+0x688>
 100e908:	210016c4 	addi	r4,r4,91
 100e90c:	200690fa 	slli	r3,r4,3
 100e910:	003fa606 	br	100e7ac <_malloc_r+0x4d8>
 100e914:	8804d4ba 	srli	r2,r17,18
 100e918:	11801f04 	addi	r6,r2,124
 100e91c:	300490fa 	slli	r2,r6,3
 100e920:	003e9906 	br	100e388 <_malloc_r+0xb4>
 100e924:	2009d0ba 	srai	r4,r4,2
 100e928:	014040b4 	movhi	r5,258
 100e92c:	29587b04 	addi	r5,r5,25068
 100e930:	00c00044 	movi	r3,1
 100e934:	28800117 	ldw	r2,4(r5)
 100e938:	1906983a 	sll	r3,r3,r4
 100e93c:	10c4b03a 	or	r2,r2,r3
 100e940:	28800115 	stw	r2,4(r5)
 100e944:	003fa306 	br	100e7d4 <_malloc_r+0x500>
 100e948:	0027883a 	mov	r19,zero
 100e94c:	00c00044 	movi	r3,1
 100e950:	003f8606 	br	100e76c <_malloc_r+0x498>
 100e954:	d1206315 	stw	r4,-32372(gp)
 100e958:	003f7306 	br	100e728 <_malloc_r+0x454>
 100e95c:	00801504 	movi	r2,84
 100e960:	11001936 	bltu	r2,r4,100e9c8 <_malloc_r+0x6f4>
 100e964:	2804d33a 	srli	r2,r5,12
 100e968:	11001b84 	addi	r4,r2,110
 100e96c:	200690fa 	slli	r3,r4,3
 100e970:	003f8e06 	br	100e7ac <_malloc_r+0x4d8>
 100e974:	480b883a 	mov	r5,r9
 100e978:	6807883a 	mov	r3,r13
 100e97c:	288000cc 	andi	r2,r5,3
 100e980:	18fffe04 	addi	r3,r3,-8
 100e984:	297fffc4 	addi	r5,r5,-1
 100e988:	10001526 	beq	r2,zero,100e9e0 <_malloc_r+0x70c>
 100e98c:	18800217 	ldw	r2,8(r3)
 100e990:	10fffa26 	beq	r2,r3,100e97c <_malloc_r+0x6a8>
 100e994:	2109883a 	add	r4,r4,r4
 100e998:	393f1e36 	bltu	r7,r4,100e614 <_malloc_r+0x340>
 100e99c:	203f1d26 	beq	r4,zero,100e614 <_malloc_r+0x340>
 100e9a0:	21c4703a 	and	r2,r4,r7
 100e9a4:	10000226 	beq	r2,zero,100e9b0 <_malloc_r+0x6dc>
 100e9a8:	6013883a 	mov	r9,r12
 100e9ac:	003ee106 	br	100e534 <_malloc_r+0x260>
 100e9b0:	2109883a 	add	r4,r4,r4
 100e9b4:	3904703a 	and	r2,r7,r4
 100e9b8:	63000104 	addi	r12,r12,4
 100e9bc:	103ffc26 	beq	r2,zero,100e9b0 <_malloc_r+0x6dc>
 100e9c0:	6013883a 	mov	r9,r12
 100e9c4:	003edb06 	br	100e534 <_malloc_r+0x260>
 100e9c8:	00805504 	movi	r2,340
 100e9cc:	11000836 	bltu	r2,r4,100e9f0 <_malloc_r+0x71c>
 100e9d0:	2804d3fa 	srli	r2,r5,15
 100e9d4:	11001dc4 	addi	r4,r2,119
 100e9d8:	200690fa 	slli	r3,r4,3
 100e9dc:	003f7306 	br	100e7ac <_malloc_r+0x4d8>
 100e9e0:	0104303a 	nor	r2,zero,r4
 100e9e4:	388e703a 	and	r7,r7,r2
 100e9e8:	e1c00115 	stw	r7,4(fp)
 100e9ec:	003fe906 	br	100e994 <_malloc_r+0x6c0>
 100e9f0:	00815504 	movi	r2,1364
 100e9f4:	1100032e 	bgeu	r2,r4,100ea04 <_malloc_r+0x730>
 100e9f8:	01001f84 	movi	r4,126
 100e9fc:	00c0fc04 	movi	r3,1008
 100ea00:	003f6a06 	br	100e7ac <_malloc_r+0x4d8>
 100ea04:	2804d4ba 	srli	r2,r5,18
 100ea08:	11001f04 	addi	r4,r2,124
 100ea0c:	200690fa 	slli	r3,r4,3
 100ea10:	003f6606 	br	100e7ac <_malloc_r+0x4d8>

0100ea14 <memchr>:
 100ea14:	008000c4 	movi	r2,3
 100ea18:	29403fcc 	andi	r5,r5,255
 100ea1c:	2007883a 	mov	r3,r4
 100ea20:	1180022e 	bgeu	r2,r6,100ea2c <memchr+0x18>
 100ea24:	2084703a 	and	r2,r4,r2
 100ea28:	10000b26 	beq	r2,zero,100ea58 <memchr+0x44>
 100ea2c:	313fffc4 	addi	r4,r6,-1
 100ea30:	3000051e 	bne	r6,zero,100ea48 <memchr+0x34>
 100ea34:	00002c06 	br	100eae8 <memchr+0xd4>
 100ea38:	213fffc4 	addi	r4,r4,-1
 100ea3c:	00bfffc4 	movi	r2,-1
 100ea40:	18c00044 	addi	r3,r3,1
 100ea44:	20802826 	beq	r4,r2,100eae8 <memchr+0xd4>
 100ea48:	18800003 	ldbu	r2,0(r3)
 100ea4c:	28bffa1e 	bne	r5,r2,100ea38 <memchr+0x24>
 100ea50:	1805883a 	mov	r2,r3
 100ea54:	f800283a 	ret
 100ea58:	0011883a 	mov	r8,zero
 100ea5c:	0007883a 	mov	r3,zero
 100ea60:	01c00104 	movi	r7,4
 100ea64:	4004923a 	slli	r2,r8,8
 100ea68:	18c00044 	addi	r3,r3,1
 100ea6c:	1151883a 	add	r8,r2,r5
 100ea70:	19fffc1e 	bne	r3,r7,100ea64 <memchr+0x50>
 100ea74:	02bfbff4 	movhi	r10,65279
 100ea78:	52bfbfc4 	addi	r10,r10,-257
 100ea7c:	02602074 	movhi	r9,32897
 100ea80:	4a602004 	addi	r9,r9,-32640
 100ea84:	02c000c4 	movi	r11,3
 100ea88:	20800017 	ldw	r2,0(r4)
 100ea8c:	31bfff04 	addi	r6,r6,-4
 100ea90:	200f883a 	mov	r7,r4
 100ea94:	1204f03a 	xor	r2,r2,r8
 100ea98:	1287883a 	add	r3,r2,r10
 100ea9c:	1a46703a 	and	r3,r3,r9
 100eaa0:	0084303a 	nor	r2,zero,r2
 100eaa4:	10c4703a 	and	r2,r2,r3
 100eaa8:	10000b26 	beq	r2,zero,100ead8 <memchr+0xc4>
 100eaac:	20800003 	ldbu	r2,0(r4)
 100eab0:	28800f26 	beq	r5,r2,100eaf0 <memchr+0xdc>
 100eab4:	20800043 	ldbu	r2,1(r4)
 100eab8:	21c00044 	addi	r7,r4,1
 100eabc:	28800c26 	beq	r5,r2,100eaf0 <memchr+0xdc>
 100eac0:	20800083 	ldbu	r2,2(r4)
 100eac4:	21c00084 	addi	r7,r4,2
 100eac8:	28800926 	beq	r5,r2,100eaf0 <memchr+0xdc>
 100eacc:	208000c3 	ldbu	r2,3(r4)
 100ead0:	21c000c4 	addi	r7,r4,3
 100ead4:	28800626 	beq	r5,r2,100eaf0 <memchr+0xdc>
 100ead8:	21000104 	addi	r4,r4,4
 100eadc:	59bfea36 	bltu	r11,r6,100ea88 <memchr+0x74>
 100eae0:	2007883a 	mov	r3,r4
 100eae4:	003fd106 	br	100ea2c <memchr+0x18>
 100eae8:	0005883a 	mov	r2,zero
 100eaec:	f800283a 	ret
 100eaf0:	3805883a 	mov	r2,r7
 100eaf4:	f800283a 	ret

0100eaf8 <memcmp>:
 100eaf8:	00c000c4 	movi	r3,3
 100eafc:	1980032e 	bgeu	r3,r6,100eb0c <memcmp+0x14>
 100eb00:	2144b03a 	or	r2,r4,r5
 100eb04:	10c4703a 	and	r2,r2,r3
 100eb08:	10000f26 	beq	r2,zero,100eb48 <memcmp+0x50>
 100eb0c:	31ffffc4 	addi	r7,r6,-1
 100eb10:	3000061e 	bne	r6,zero,100eb2c <memcmp+0x34>
 100eb14:	00000a06 	br	100eb40 <memcmp+0x48>
 100eb18:	39ffffc4 	addi	r7,r7,-1
 100eb1c:	00bfffc4 	movi	r2,-1
 100eb20:	21000044 	addi	r4,r4,1
 100eb24:	29400044 	addi	r5,r5,1
 100eb28:	38800526 	beq	r7,r2,100eb40 <memcmp+0x48>
 100eb2c:	20c00003 	ldbu	r3,0(r4)
 100eb30:	28800003 	ldbu	r2,0(r5)
 100eb34:	18bff826 	beq	r3,r2,100eb18 <memcmp+0x20>
 100eb38:	1885c83a 	sub	r2,r3,r2
 100eb3c:	f800283a 	ret
 100eb40:	0005883a 	mov	r2,zero
 100eb44:	f800283a 	ret
 100eb48:	180f883a 	mov	r7,r3
 100eb4c:	20c00017 	ldw	r3,0(r4)
 100eb50:	28800017 	ldw	r2,0(r5)
 100eb54:	18bfed1e 	bne	r3,r2,100eb0c <memcmp+0x14>
 100eb58:	31bfff04 	addi	r6,r6,-4
 100eb5c:	21000104 	addi	r4,r4,4
 100eb60:	29400104 	addi	r5,r5,4
 100eb64:	39bff936 	bltu	r7,r6,100eb4c <memcmp+0x54>
 100eb68:	003fe806 	br	100eb0c <memcmp+0x14>

0100eb6c <memcpy>:
 100eb6c:	01c003c4 	movi	r7,15
 100eb70:	2007883a 	mov	r3,r4
 100eb74:	3980032e 	bgeu	r7,r6,100eb84 <memcpy+0x18>
 100eb78:	2904b03a 	or	r2,r5,r4
 100eb7c:	108000cc 	andi	r2,r2,3
 100eb80:	10000926 	beq	r2,zero,100eba8 <memcpy+0x3c>
 100eb84:	30000626 	beq	r6,zero,100eba0 <memcpy+0x34>
 100eb88:	30cd883a 	add	r6,r6,r3
 100eb8c:	28800003 	ldbu	r2,0(r5)
 100eb90:	29400044 	addi	r5,r5,1
 100eb94:	18800005 	stb	r2,0(r3)
 100eb98:	18c00044 	addi	r3,r3,1
 100eb9c:	30fffb1e 	bne	r6,r3,100eb8c <memcpy+0x20>
 100eba0:	2005883a 	mov	r2,r4
 100eba4:	f800283a 	ret
 100eba8:	3811883a 	mov	r8,r7
 100ebac:	200f883a 	mov	r7,r4
 100ebb0:	28c00017 	ldw	r3,0(r5)
 100ebb4:	31bffc04 	addi	r6,r6,-16
 100ebb8:	38c00015 	stw	r3,0(r7)
 100ebbc:	28800117 	ldw	r2,4(r5)
 100ebc0:	38800115 	stw	r2,4(r7)
 100ebc4:	28c00217 	ldw	r3,8(r5)
 100ebc8:	38c00215 	stw	r3,8(r7)
 100ebcc:	28800317 	ldw	r2,12(r5)
 100ebd0:	29400404 	addi	r5,r5,16
 100ebd4:	38800315 	stw	r2,12(r7)
 100ebd8:	39c00404 	addi	r7,r7,16
 100ebdc:	41bff436 	bltu	r8,r6,100ebb0 <memcpy+0x44>
 100ebe0:	008000c4 	movi	r2,3
 100ebe4:	1180072e 	bgeu	r2,r6,100ec04 <memcpy+0x98>
 100ebe8:	1007883a 	mov	r3,r2
 100ebec:	28800017 	ldw	r2,0(r5)
 100ebf0:	31bfff04 	addi	r6,r6,-4
 100ebf4:	29400104 	addi	r5,r5,4
 100ebf8:	38800015 	stw	r2,0(r7)
 100ebfc:	39c00104 	addi	r7,r7,4
 100ec00:	19bffa36 	bltu	r3,r6,100ebec <memcpy+0x80>
 100ec04:	3807883a 	mov	r3,r7
 100ec08:	003fde06 	br	100eb84 <memcpy+0x18>

0100ec0c <memmove>:
 100ec0c:	2807883a 	mov	r3,r5
 100ec10:	2011883a 	mov	r8,r4
 100ec14:	29000c2e 	bgeu	r5,r4,100ec48 <memmove+0x3c>
 100ec18:	298f883a 	add	r7,r5,r6
 100ec1c:	21c00a2e 	bgeu	r4,r7,100ec48 <memmove+0x3c>
 100ec20:	30000726 	beq	r6,zero,100ec40 <memmove+0x34>
 100ec24:	2187883a 	add	r3,r4,r6
 100ec28:	198dc83a 	sub	r6,r3,r6
 100ec2c:	39ffffc4 	addi	r7,r7,-1
 100ec30:	38800003 	ldbu	r2,0(r7)
 100ec34:	18ffffc4 	addi	r3,r3,-1
 100ec38:	18800005 	stb	r2,0(r3)
 100ec3c:	19bffb1e 	bne	r3,r6,100ec2c <memmove+0x20>
 100ec40:	2005883a 	mov	r2,r4
 100ec44:	f800283a 	ret
 100ec48:	01c003c4 	movi	r7,15
 100ec4c:	39800a36 	bltu	r7,r6,100ec78 <memmove+0x6c>
 100ec50:	303ffb26 	beq	r6,zero,100ec40 <memmove+0x34>
 100ec54:	400f883a 	mov	r7,r8
 100ec58:	320d883a 	add	r6,r6,r8
 100ec5c:	28800003 	ldbu	r2,0(r5)
 100ec60:	29400044 	addi	r5,r5,1
 100ec64:	38800005 	stb	r2,0(r7)
 100ec68:	39c00044 	addi	r7,r7,1
 100ec6c:	39bffb1e 	bne	r7,r6,100ec5c <memmove+0x50>
 100ec70:	2005883a 	mov	r2,r4
 100ec74:	f800283a 	ret
 100ec78:	1904b03a 	or	r2,r3,r4
 100ec7c:	108000cc 	andi	r2,r2,3
 100ec80:	103ff31e 	bne	r2,zero,100ec50 <memmove+0x44>
 100ec84:	3811883a 	mov	r8,r7
 100ec88:	180b883a 	mov	r5,r3
 100ec8c:	200f883a 	mov	r7,r4
 100ec90:	28c00017 	ldw	r3,0(r5)
 100ec94:	31bffc04 	addi	r6,r6,-16
 100ec98:	38c00015 	stw	r3,0(r7)
 100ec9c:	28800117 	ldw	r2,4(r5)
 100eca0:	38800115 	stw	r2,4(r7)
 100eca4:	28c00217 	ldw	r3,8(r5)
 100eca8:	38c00215 	stw	r3,8(r7)
 100ecac:	28800317 	ldw	r2,12(r5)
 100ecb0:	29400404 	addi	r5,r5,16
 100ecb4:	38800315 	stw	r2,12(r7)
 100ecb8:	39c00404 	addi	r7,r7,16
 100ecbc:	41bff436 	bltu	r8,r6,100ec90 <memmove+0x84>
 100ecc0:	008000c4 	movi	r2,3
 100ecc4:	1180072e 	bgeu	r2,r6,100ece4 <memmove+0xd8>
 100ecc8:	1007883a 	mov	r3,r2
 100eccc:	28800017 	ldw	r2,0(r5)
 100ecd0:	31bfff04 	addi	r6,r6,-4
 100ecd4:	29400104 	addi	r5,r5,4
 100ecd8:	38800015 	stw	r2,0(r7)
 100ecdc:	39c00104 	addi	r7,r7,4
 100ece0:	19bffa36 	bltu	r3,r6,100eccc <memmove+0xc0>
 100ece4:	3811883a 	mov	r8,r7
 100ece8:	003fd906 	br	100ec50 <memmove+0x44>

0100ecec <memset>:
 100ecec:	008000c4 	movi	r2,3
 100ecf0:	29403fcc 	andi	r5,r5,255
 100ecf4:	2007883a 	mov	r3,r4
 100ecf8:	1180022e 	bgeu	r2,r6,100ed04 <memset+0x18>
 100ecfc:	2084703a 	and	r2,r4,r2
 100ed00:	10000826 	beq	r2,zero,100ed24 <memset+0x38>
 100ed04:	30000526 	beq	r6,zero,100ed1c <memset+0x30>
 100ed08:	2805883a 	mov	r2,r5
 100ed0c:	30cd883a 	add	r6,r6,r3
 100ed10:	18800005 	stb	r2,0(r3)
 100ed14:	18c00044 	addi	r3,r3,1
 100ed18:	19bffd1e 	bne	r3,r6,100ed10 <memset+0x24>
 100ed1c:	2005883a 	mov	r2,r4
 100ed20:	f800283a 	ret
 100ed24:	2804923a 	slli	r2,r5,8
 100ed28:	020003c4 	movi	r8,15
 100ed2c:	200f883a 	mov	r7,r4
 100ed30:	2884b03a 	or	r2,r5,r2
 100ed34:	1006943a 	slli	r3,r2,16
 100ed38:	10c6b03a 	or	r3,r2,r3
 100ed3c:	41800a2e 	bgeu	r8,r6,100ed68 <memset+0x7c>
 100ed40:	4005883a 	mov	r2,r8
 100ed44:	31bffc04 	addi	r6,r6,-16
 100ed48:	38c00015 	stw	r3,0(r7)
 100ed4c:	38c00115 	stw	r3,4(r7)
 100ed50:	38c00215 	stw	r3,8(r7)
 100ed54:	38c00315 	stw	r3,12(r7)
 100ed58:	39c00404 	addi	r7,r7,16
 100ed5c:	11bff936 	bltu	r2,r6,100ed44 <memset+0x58>
 100ed60:	008000c4 	movi	r2,3
 100ed64:	1180052e 	bgeu	r2,r6,100ed7c <memset+0x90>
 100ed68:	31bfff04 	addi	r6,r6,-4
 100ed6c:	008000c4 	movi	r2,3
 100ed70:	38c00015 	stw	r3,0(r7)
 100ed74:	39c00104 	addi	r7,r7,4
 100ed78:	11bffb36 	bltu	r2,r6,100ed68 <memset+0x7c>
 100ed7c:	3807883a 	mov	r3,r7
 100ed80:	003fe006 	br	100ed04 <memset+0x18>

0100ed84 <printf>:
 100ed84:	defffb04 	addi	sp,sp,-20
 100ed88:	dfc00115 	stw	ra,4(sp)
 100ed8c:	d9400215 	stw	r5,8(sp)
 100ed90:	d9800315 	stw	r6,12(sp)
 100ed94:	d9c00415 	stw	r7,16(sp)
 100ed98:	008040b4 	movhi	r2,258
 100ed9c:	109f8b04 	addi	r2,r2,32300
 100eda0:	10c00017 	ldw	r3,0(r2)
 100eda4:	200b883a 	mov	r5,r4
 100eda8:	d8800204 	addi	r2,sp,8
 100edac:	19000217 	ldw	r4,8(r3)
 100edb0:	100d883a 	mov	r6,r2
 100edb4:	d8800015 	stw	r2,0(sp)
 100edb8:	101170c0 	call	101170c <__vfprintf_internal>
 100edbc:	dfc00117 	ldw	ra,4(sp)
 100edc0:	dec00504 	addi	sp,sp,20
 100edc4:	f800283a 	ret

0100edc8 <_printf_r>:
 100edc8:	defffc04 	addi	sp,sp,-16
 100edcc:	dfc00115 	stw	ra,4(sp)
 100edd0:	d9800215 	stw	r6,8(sp)
 100edd4:	d9c00315 	stw	r7,12(sp)
 100edd8:	280d883a 	mov	r6,r5
 100eddc:	21400217 	ldw	r5,8(r4)
 100ede0:	d8c00204 	addi	r3,sp,8
 100ede4:	180f883a 	mov	r7,r3
 100ede8:	d8c00015 	stw	r3,0(sp)
 100edec:	100f8600 	call	100f860 <___vfprintf_internal_r>
 100edf0:	dfc00117 	ldw	ra,4(sp)
 100edf4:	dec00404 	addi	sp,sp,16
 100edf8:	f800283a 	ret

0100edfc <putchar>:
 100edfc:	008040b4 	movhi	r2,258
 100ee00:	109f8b04 	addi	r2,r2,32300
 100ee04:	11800017 	ldw	r6,0(r2)
 100ee08:	200b883a 	mov	r5,r4
 100ee0c:	3009883a 	mov	r4,r6
 100ee10:	31800217 	ldw	r6,8(r6)
 100ee14:	10152d41 	jmpi	10152d4 <_putc_r>

0100ee18 <_putchar_r>:
 100ee18:	21800217 	ldw	r6,8(r4)
 100ee1c:	10152d41 	jmpi	10152d4 <_putc_r>

0100ee20 <_puts_r>:
 100ee20:	defff604 	addi	sp,sp,-40
 100ee24:	dc400715 	stw	r17,28(sp)
 100ee28:	2023883a 	mov	r17,r4
 100ee2c:	2809883a 	mov	r4,r5
 100ee30:	dfc00915 	stw	ra,36(sp)
 100ee34:	dcc00815 	stw	r19,32(sp)
 100ee38:	2827883a 	mov	r19,r5
 100ee3c:	100f4040 	call	100f404 <strlen>
 100ee40:	89400217 	ldw	r5,8(r17)
 100ee44:	00c040b4 	movhi	r3,258
 100ee48:	18d6b604 	addi	r3,r3,23256
 100ee4c:	01c00044 	movi	r7,1
 100ee50:	12000044 	addi	r8,r2,1
 100ee54:	d8c00515 	stw	r3,20(sp)
 100ee58:	d9c00615 	stw	r7,24(sp)
 100ee5c:	d8c00304 	addi	r3,sp,12
 100ee60:	01c00084 	movi	r7,2
 100ee64:	8809883a 	mov	r4,r17
 100ee68:	d80d883a 	mov	r6,sp
 100ee6c:	d8c00015 	stw	r3,0(sp)
 100ee70:	dcc00315 	stw	r19,12(sp)
 100ee74:	da000215 	stw	r8,8(sp)
 100ee78:	d9c00115 	stw	r7,4(sp)
 100ee7c:	d8800415 	stw	r2,16(sp)
 100ee80:	10139680 	call	1013968 <__sfvwrite_r>
 100ee84:	00ffffc4 	movi	r3,-1
 100ee88:	10000626 	beq	r2,zero,100eea4 <_puts_r+0x84>
 100ee8c:	1805883a 	mov	r2,r3
 100ee90:	dfc00917 	ldw	ra,36(sp)
 100ee94:	dcc00817 	ldw	r19,32(sp)
 100ee98:	dc400717 	ldw	r17,28(sp)
 100ee9c:	dec00a04 	addi	sp,sp,40
 100eea0:	f800283a 	ret
 100eea4:	00c00284 	movi	r3,10
 100eea8:	1805883a 	mov	r2,r3
 100eeac:	dfc00917 	ldw	ra,36(sp)
 100eeb0:	dcc00817 	ldw	r19,32(sp)
 100eeb4:	dc400717 	ldw	r17,28(sp)
 100eeb8:	dec00a04 	addi	sp,sp,40
 100eebc:	f800283a 	ret

0100eec0 <puts>:
 100eec0:	008040b4 	movhi	r2,258
 100eec4:	109f8b04 	addi	r2,r2,32300
 100eec8:	200b883a 	mov	r5,r4
 100eecc:	11000017 	ldw	r4,0(r2)
 100eed0:	100ee201 	jmpi	100ee20 <_puts_r>

0100eed4 <_sbrk_r>:
 100eed4:	defffd04 	addi	sp,sp,-12
 100eed8:	dc000015 	stw	r16,0(sp)
 100eedc:	040040f4 	movhi	r16,259
 100eee0:	84270404 	addi	r16,r16,-25584
 100eee4:	dc400115 	stw	r17,4(sp)
 100eee8:	80000015 	stw	zero,0(r16)
 100eeec:	2023883a 	mov	r17,r4
 100eef0:	2809883a 	mov	r4,r5
 100eef4:	dfc00215 	stw	ra,8(sp)
 100eef8:	10191240 	call	1019124 <sbrk>
 100eefc:	1007883a 	mov	r3,r2
 100ef00:	00bfffc4 	movi	r2,-1
 100ef04:	18800626 	beq	r3,r2,100ef20 <_sbrk_r+0x4c>
 100ef08:	1805883a 	mov	r2,r3
 100ef0c:	dfc00217 	ldw	ra,8(sp)
 100ef10:	dc400117 	ldw	r17,4(sp)
 100ef14:	dc000017 	ldw	r16,0(sp)
 100ef18:	dec00304 	addi	sp,sp,12
 100ef1c:	f800283a 	ret
 100ef20:	80800017 	ldw	r2,0(r16)
 100ef24:	103ff826 	beq	r2,zero,100ef08 <_sbrk_r+0x34>
 100ef28:	88800015 	stw	r2,0(r17)
 100ef2c:	1805883a 	mov	r2,r3
 100ef30:	dfc00217 	ldw	ra,8(sp)
 100ef34:	dc400117 	ldw	r17,4(sp)
 100ef38:	dc000017 	ldw	r16,0(sp)
 100ef3c:	dec00304 	addi	sp,sp,12
 100ef40:	f800283a 	ret

0100ef44 <_raise_r>:
 100ef44:	defffd04 	addi	sp,sp,-12
 100ef48:	008007c4 	movi	r2,31
 100ef4c:	dc400115 	stw	r17,4(sp)
 100ef50:	dc000015 	stw	r16,0(sp)
 100ef54:	dfc00215 	stw	ra,8(sp)
 100ef58:	2821883a 	mov	r16,r5
 100ef5c:	2023883a 	mov	r17,r4
 100ef60:	11402736 	bltu	r2,r5,100f000 <_raise_r+0xbc>
 100ef64:	20c0b717 	ldw	r3,732(r4)
 100ef68:	18001326 	beq	r3,zero,100efb8 <_raise_r+0x74>
 100ef6c:	2945883a 	add	r2,r5,r5
 100ef70:	1085883a 	add	r2,r2,r2
 100ef74:	188b883a 	add	r5,r3,r2
 100ef78:	28c00017 	ldw	r3,0(r5)
 100ef7c:	18000e26 	beq	r3,zero,100efb8 <_raise_r+0x74>
 100ef80:	01000044 	movi	r4,1
 100ef84:	19000526 	beq	r3,r4,100ef9c <_raise_r+0x58>
 100ef88:	00bfffc4 	movi	r2,-1
 100ef8c:	18801326 	beq	r3,r2,100efdc <_raise_r+0x98>
 100ef90:	28000015 	stw	zero,0(r5)
 100ef94:	8009883a 	mov	r4,r16
 100ef98:	183ee83a 	callr	r3
 100ef9c:	0007883a 	mov	r3,zero
 100efa0:	1805883a 	mov	r2,r3
 100efa4:	dfc00217 	ldw	ra,8(sp)
 100efa8:	dc400117 	ldw	r17,4(sp)
 100efac:	dc000017 	ldw	r16,0(sp)
 100efb0:	dec00304 	addi	sp,sp,12
 100efb4:	f800283a 	ret
 100efb8:	100f21c0 	call	100f21c <_getpid_r>
 100efbc:	100b883a 	mov	r5,r2
 100efc0:	8809883a 	mov	r4,r17
 100efc4:	800d883a 	mov	r6,r16
 100efc8:	dfc00217 	ldw	ra,8(sp)
 100efcc:	dc400117 	ldw	r17,4(sp)
 100efd0:	dc000017 	ldw	r16,0(sp)
 100efd4:	dec00304 	addi	sp,sp,12
 100efd8:	100f2201 	jmpi	100f220 <_kill_r>
 100efdc:	2007883a 	mov	r3,r4
 100efe0:	00800584 	movi	r2,22
 100efe4:	88800015 	stw	r2,0(r17)
 100efe8:	1805883a 	mov	r2,r3
 100efec:	dfc00217 	ldw	ra,8(sp)
 100eff0:	dc400117 	ldw	r17,4(sp)
 100eff4:	dc000017 	ldw	r16,0(sp)
 100eff8:	dec00304 	addi	sp,sp,12
 100effc:	f800283a 	ret
 100f000:	00800584 	movi	r2,22
 100f004:	00ffffc4 	movi	r3,-1
 100f008:	20800015 	stw	r2,0(r4)
 100f00c:	003fe406 	br	100efa0 <_raise_r+0x5c>

0100f010 <raise>:
 100f010:	008040b4 	movhi	r2,258
 100f014:	109f8b04 	addi	r2,r2,32300
 100f018:	200b883a 	mov	r5,r4
 100f01c:	11000017 	ldw	r4,0(r2)
 100f020:	100ef441 	jmpi	100ef44 <_raise_r>

0100f024 <_init_signal_r>:
 100f024:	2080b717 	ldw	r2,732(r4)
 100f028:	defffe04 	addi	sp,sp,-8
 100f02c:	dc000015 	stw	r16,0(sp)
 100f030:	dfc00115 	stw	ra,4(sp)
 100f034:	2021883a 	mov	r16,r4
 100f038:	10000526 	beq	r2,zero,100f050 <_init_signal_r+0x2c>
 100f03c:	0005883a 	mov	r2,zero
 100f040:	dfc00117 	ldw	ra,4(sp)
 100f044:	dc000017 	ldw	r16,0(sp)
 100f048:	dec00204 	addi	sp,sp,8
 100f04c:	f800283a 	ret
 100f050:	01402004 	movi	r5,128
 100f054:	100e2d40 	call	100e2d4 <_malloc_r>
 100f058:	1009883a 	mov	r4,r2
 100f05c:	8080b715 	stw	r2,732(r16)
 100f060:	10000726 	beq	r2,zero,100f080 <_init_signal_r+0x5c>
 100f064:	0007883a 	mov	r3,zero
 100f068:	01402004 	movi	r5,128
 100f06c:	20c5883a 	add	r2,r4,r3
 100f070:	18c00104 	addi	r3,r3,4
 100f074:	10000015 	stw	zero,0(r2)
 100f078:	197ffc1e 	bne	r3,r5,100f06c <_init_signal_r+0x48>
 100f07c:	003fef06 	br	100f03c <_init_signal_r+0x18>
 100f080:	00bfffc4 	movi	r2,-1
 100f084:	003fee06 	br	100f040 <_init_signal_r+0x1c>

0100f088 <_init_signal>:
 100f088:	008040b4 	movhi	r2,258
 100f08c:	109f8b04 	addi	r2,r2,32300
 100f090:	11000017 	ldw	r4,0(r2)
 100f094:	100f0241 	jmpi	100f024 <_init_signal_r>

0100f098 <__sigtramp_r>:
 100f098:	defffd04 	addi	sp,sp,-12
 100f09c:	008007c4 	movi	r2,31
 100f0a0:	dc000115 	stw	r16,4(sp)
 100f0a4:	dfc00215 	stw	ra,8(sp)
 100f0a8:	2021883a 	mov	r16,r4
 100f0ac:	11401336 	bltu	r2,r5,100f0fc <__sigtramp_r+0x64>
 100f0b0:	20c0b717 	ldw	r3,732(r4)
 100f0b4:	18001f26 	beq	r3,zero,100f134 <__sigtramp_r+0x9c>
 100f0b8:	2945883a 	add	r2,r5,r5
 100f0bc:	1085883a 	add	r2,r2,r2
 100f0c0:	10c9883a 	add	r4,r2,r3
 100f0c4:	20c00017 	ldw	r3,0(r4)
 100f0c8:	18001626 	beq	r3,zero,100f124 <__sigtramp_r+0x8c>
 100f0cc:	00bfffc4 	movi	r2,-1
 100f0d0:	18801626 	beq	r3,r2,100f12c <__sigtramp_r+0x94>
 100f0d4:	00800044 	movi	r2,1
 100f0d8:	18800d26 	beq	r3,r2,100f110 <__sigtramp_r+0x78>
 100f0dc:	20000015 	stw	zero,0(r4)
 100f0e0:	2809883a 	mov	r4,r5
 100f0e4:	183ee83a 	callr	r3
 100f0e8:	0005883a 	mov	r2,zero
 100f0ec:	dfc00217 	ldw	ra,8(sp)
 100f0f0:	dc000117 	ldw	r16,4(sp)
 100f0f4:	dec00304 	addi	sp,sp,12
 100f0f8:	f800283a 	ret
 100f0fc:	00bfffc4 	movi	r2,-1
 100f100:	dfc00217 	ldw	ra,8(sp)
 100f104:	dc000117 	ldw	r16,4(sp)
 100f108:	dec00304 	addi	sp,sp,12
 100f10c:	f800283a 	ret
 100f110:	008000c4 	movi	r2,3
 100f114:	dfc00217 	ldw	ra,8(sp)
 100f118:	dc000117 	ldw	r16,4(sp)
 100f11c:	dec00304 	addi	sp,sp,12
 100f120:	f800283a 	ret
 100f124:	00800044 	movi	r2,1
 100f128:	003ff006 	br	100f0ec <__sigtramp_r+0x54>
 100f12c:	00800084 	movi	r2,2
 100f130:	003fee06 	br	100f0ec <__sigtramp_r+0x54>
 100f134:	d9400015 	stw	r5,0(sp)
 100f138:	100f0240 	call	100f024 <_init_signal_r>
 100f13c:	d9400017 	ldw	r5,0(sp)
 100f140:	103fee1e 	bne	r2,zero,100f0fc <__sigtramp_r+0x64>
 100f144:	80c0b717 	ldw	r3,732(r16)
 100f148:	003fdb06 	br	100f0b8 <__sigtramp_r+0x20>

0100f14c <__sigtramp>:
 100f14c:	008040b4 	movhi	r2,258
 100f150:	109f8b04 	addi	r2,r2,32300
 100f154:	200b883a 	mov	r5,r4
 100f158:	11000017 	ldw	r4,0(r2)
 100f15c:	100f0981 	jmpi	100f098 <__sigtramp_r>

0100f160 <_signal_r>:
 100f160:	defffc04 	addi	sp,sp,-16
 100f164:	008007c4 	movi	r2,31
 100f168:	dc800215 	stw	r18,8(sp)
 100f16c:	dc400115 	stw	r17,4(sp)
 100f170:	dc000015 	stw	r16,0(sp)
 100f174:	dfc00315 	stw	ra,12(sp)
 100f178:	2823883a 	mov	r17,r5
 100f17c:	00ffffc4 	movi	r3,-1
 100f180:	3025883a 	mov	r18,r6
 100f184:	2021883a 	mov	r16,r4
 100f188:	1140092e 	bgeu	r2,r5,100f1b0 <_signal_r+0x50>
 100f18c:	00800584 	movi	r2,22
 100f190:	20800015 	stw	r2,0(r4)
 100f194:	1805883a 	mov	r2,r3
 100f198:	dfc00317 	ldw	ra,12(sp)
 100f19c:	dc800217 	ldw	r18,8(sp)
 100f1a0:	dc400117 	ldw	r17,4(sp)
 100f1a4:	dc000017 	ldw	r16,0(sp)
 100f1a8:	dec00404 	addi	sp,sp,16
 100f1ac:	f800283a 	ret
 100f1b0:	2140b717 	ldw	r5,732(r4)
 100f1b4:	28000c26 	beq	r5,zero,100f1e8 <_signal_r+0x88>
 100f1b8:	8c45883a 	add	r2,r17,r17
 100f1bc:	1085883a 	add	r2,r2,r2
 100f1c0:	1145883a 	add	r2,r2,r5
 100f1c4:	10c00017 	ldw	r3,0(r2)
 100f1c8:	14800015 	stw	r18,0(r2)
 100f1cc:	1805883a 	mov	r2,r3
 100f1d0:	dfc00317 	ldw	ra,12(sp)
 100f1d4:	dc800217 	ldw	r18,8(sp)
 100f1d8:	dc400117 	ldw	r17,4(sp)
 100f1dc:	dc000017 	ldw	r16,0(sp)
 100f1e0:	dec00404 	addi	sp,sp,16
 100f1e4:	f800283a 	ret
 100f1e8:	100f0240 	call	100f024 <_init_signal_r>
 100f1ec:	1000021e 	bne	r2,zero,100f1f8 <_signal_r+0x98>
 100f1f0:	8140b717 	ldw	r5,732(r16)
 100f1f4:	003ff006 	br	100f1b8 <_signal_r+0x58>
 100f1f8:	00ffffc4 	movi	r3,-1
 100f1fc:	003fe506 	br	100f194 <_signal_r+0x34>

0100f200 <signal>:
 100f200:	018040b4 	movhi	r6,258
 100f204:	319f8b04 	addi	r6,r6,32300
 100f208:	2007883a 	mov	r3,r4
 100f20c:	31000017 	ldw	r4,0(r6)
 100f210:	280d883a 	mov	r6,r5
 100f214:	180b883a 	mov	r5,r3
 100f218:	100f1601 	jmpi	100f160 <_signal_r>

0100f21c <_getpid_r>:
 100f21c:	10189601 	jmpi	1018960 <getpid>

0100f220 <_kill_r>:
 100f220:	defffd04 	addi	sp,sp,-12
 100f224:	dc000015 	stw	r16,0(sp)
 100f228:	040040f4 	movhi	r16,259
 100f22c:	84270404 	addi	r16,r16,-25584
 100f230:	dc400115 	stw	r17,4(sp)
 100f234:	80000015 	stw	zero,0(r16)
 100f238:	2023883a 	mov	r17,r4
 100f23c:	2809883a 	mov	r4,r5
 100f240:	300b883a 	mov	r5,r6
 100f244:	dfc00215 	stw	ra,8(sp)
 100f248:	1018aa00 	call	1018aa0 <kill>
 100f24c:	1007883a 	mov	r3,r2
 100f250:	00bfffc4 	movi	r2,-1
 100f254:	18800626 	beq	r3,r2,100f270 <_kill_r+0x50>
 100f258:	1805883a 	mov	r2,r3
 100f25c:	dfc00217 	ldw	ra,8(sp)
 100f260:	dc400117 	ldw	r17,4(sp)
 100f264:	dc000017 	ldw	r16,0(sp)
 100f268:	dec00304 	addi	sp,sp,12
 100f26c:	f800283a 	ret
 100f270:	80800017 	ldw	r2,0(r16)
 100f274:	103ff826 	beq	r2,zero,100f258 <_kill_r+0x38>
 100f278:	88800015 	stw	r2,0(r17)
 100f27c:	1805883a 	mov	r2,r3
 100f280:	dfc00217 	ldw	ra,8(sp)
 100f284:	dc400117 	ldw	r17,4(sp)
 100f288:	dc000017 	ldw	r16,0(sp)
 100f28c:	dec00304 	addi	sp,sp,12
 100f290:	f800283a 	ret

0100f294 <snprintf>:
 100f294:	deffe404 	addi	sp,sp,-112
 100f298:	dc001815 	stw	r16,96(sp)
 100f29c:	2011883a 	mov	r8,r4
 100f2a0:	2821883a 	mov	r16,r5
 100f2a4:	dfc01a15 	stw	ra,104(sp)
 100f2a8:	dc401915 	stw	r17,100(sp)
 100f2ac:	d9c01b15 	stw	r7,108(sp)
 100f2b0:	010040b4 	movhi	r4,258
 100f2b4:	211f8b04 	addi	r4,r4,32300
 100f2b8:	00ffffc4 	movi	r3,-1
 100f2bc:	24400017 	ldw	r17,0(r4)
 100f2c0:	28002016 	blt	r5,zero,100f344 <snprintf+0xb0>
 100f2c4:	0007883a 	mov	r3,zero
 100f2c8:	28000126 	beq	r5,zero,100f2d0 <snprintf+0x3c>
 100f2cc:	28ffffc4 	addi	r3,r5,-1
 100f2d0:	d8801b04 	addi	r2,sp,108
 100f2d4:	21000017 	ldw	r4,0(r4)
 100f2d8:	d8800015 	stw	r2,0(sp)
 100f2dc:	100f883a 	mov	r7,r2
 100f2e0:	00808204 	movi	r2,520
 100f2e4:	d880040d 	sth	r2,16(sp)
 100f2e8:	d9400104 	addi	r5,sp,4
 100f2ec:	00bfffc4 	movi	r2,-1
 100f2f0:	d8c00615 	stw	r3,24(sp)
 100f2f4:	d8c00315 	stw	r3,12(sp)
 100f2f8:	da000515 	stw	r8,20(sp)
 100f2fc:	d880048d 	sth	r2,18(sp)
 100f300:	da000115 	stw	r8,4(sp)
 100f304:	100f8600 	call	100f860 <___vfprintf_internal_r>
 100f308:	1007883a 	mov	r3,r2
 100f30c:	00bfffc4 	movi	r2,-1
 100f310:	18800916 	blt	r3,r2,100f338 <snprintf+0xa4>
 100f314:	80000226 	beq	r16,zero,100f320 <snprintf+0x8c>
 100f318:	d8800117 	ldw	r2,4(sp)
 100f31c:	10000005 	stb	zero,0(r2)
 100f320:	1805883a 	mov	r2,r3
 100f324:	dfc01a17 	ldw	ra,104(sp)
 100f328:	dc401917 	ldw	r17,100(sp)
 100f32c:	dc001817 	ldw	r16,96(sp)
 100f330:	dec01c04 	addi	sp,sp,112
 100f334:	f800283a 	ret
 100f338:	008022c4 	movi	r2,139
 100f33c:	88800015 	stw	r2,0(r17)
 100f340:	003ff406 	br	100f314 <snprintf+0x80>
 100f344:	008022c4 	movi	r2,139
 100f348:	88800015 	stw	r2,0(r17)
 100f34c:	003ff406 	br	100f320 <snprintf+0x8c>

0100f350 <_snprintf_r>:
 100f350:	deffe504 	addi	sp,sp,-108
 100f354:	dc401915 	stw	r17,100(sp)
 100f358:	dc001815 	stw	r16,96(sp)
 100f35c:	dfc01a15 	stw	ra,104(sp)
 100f360:	3021883a 	mov	r16,r6
 100f364:	00ffffc4 	movi	r3,-1
 100f368:	2023883a 	mov	r17,r4
 100f36c:	2811883a 	mov	r8,r5
 100f370:	30002116 	blt	r6,zero,100f3f8 <_snprintf_r+0xa8>
 100f374:	0007883a 	mov	r3,zero
 100f378:	30000126 	beq	r6,zero,100f380 <_snprintf_r+0x30>
 100f37c:	30ffffc4 	addi	r3,r6,-1
 100f380:	d8801b04 	addi	r2,sp,108
 100f384:	d8800015 	stw	r2,0(sp)
 100f388:	380d883a 	mov	r6,r7
 100f38c:	100f883a 	mov	r7,r2
 100f390:	00808204 	movi	r2,520
 100f394:	d880040d 	sth	r2,16(sp)
 100f398:	8809883a 	mov	r4,r17
 100f39c:	00bfffc4 	movi	r2,-1
 100f3a0:	d9400104 	addi	r5,sp,4
 100f3a4:	d8c00615 	stw	r3,24(sp)
 100f3a8:	d8c00315 	stw	r3,12(sp)
 100f3ac:	da000515 	stw	r8,20(sp)
 100f3b0:	d880048d 	sth	r2,18(sp)
 100f3b4:	da000115 	stw	r8,4(sp)
 100f3b8:	100f8600 	call	100f860 <___vfprintf_internal_r>
 100f3bc:	1007883a 	mov	r3,r2
 100f3c0:	00bfffc4 	movi	r2,-1
 100f3c4:	18800916 	blt	r3,r2,100f3ec <_snprintf_r+0x9c>
 100f3c8:	80000226 	beq	r16,zero,100f3d4 <_snprintf_r+0x84>
 100f3cc:	d8800117 	ldw	r2,4(sp)
 100f3d0:	10000005 	stb	zero,0(r2)
 100f3d4:	1805883a 	mov	r2,r3
 100f3d8:	dfc01a17 	ldw	ra,104(sp)
 100f3dc:	dc401917 	ldw	r17,100(sp)
 100f3e0:	dc001817 	ldw	r16,96(sp)
 100f3e4:	dec01b04 	addi	sp,sp,108
 100f3e8:	f800283a 	ret
 100f3ec:	008022c4 	movi	r2,139
 100f3f0:	88800015 	stw	r2,0(r17)
 100f3f4:	003ff406 	br	100f3c8 <_snprintf_r+0x78>
 100f3f8:	008022c4 	movi	r2,139
 100f3fc:	20800015 	stw	r2,0(r4)
 100f400:	003ff406 	br	100f3d4 <_snprintf_r+0x84>

0100f404 <strlen>:
 100f404:	208000cc 	andi	r2,r4,3
 100f408:	2011883a 	mov	r8,r4
 100f40c:	1000161e 	bne	r2,zero,100f468 <strlen+0x64>
 100f410:	20c00017 	ldw	r3,0(r4)
 100f414:	017fbff4 	movhi	r5,65279
 100f418:	297fbfc4 	addi	r5,r5,-257
 100f41c:	01e02074 	movhi	r7,32897
 100f420:	39e02004 	addi	r7,r7,-32640
 100f424:	1945883a 	add	r2,r3,r5
 100f428:	11c4703a 	and	r2,r2,r7
 100f42c:	00c6303a 	nor	r3,zero,r3
 100f430:	1886703a 	and	r3,r3,r2
 100f434:	18000c1e 	bne	r3,zero,100f468 <strlen+0x64>
 100f438:	280d883a 	mov	r6,r5
 100f43c:	380b883a 	mov	r5,r7
 100f440:	21000104 	addi	r4,r4,4
 100f444:	20800017 	ldw	r2,0(r4)
 100f448:	1187883a 	add	r3,r2,r6
 100f44c:	1946703a 	and	r3,r3,r5
 100f450:	0084303a 	nor	r2,zero,r2
 100f454:	10c4703a 	and	r2,r2,r3
 100f458:	103ff926 	beq	r2,zero,100f440 <strlen+0x3c>
 100f45c:	20800007 	ldb	r2,0(r4)
 100f460:	10000326 	beq	r2,zero,100f470 <strlen+0x6c>
 100f464:	21000044 	addi	r4,r4,1
 100f468:	20800007 	ldb	r2,0(r4)
 100f46c:	103ffd1e 	bne	r2,zero,100f464 <strlen+0x60>
 100f470:	2205c83a 	sub	r2,r4,r8
 100f474:	f800283a 	ret

0100f478 <strncmp>:
 100f478:	30003926 	beq	r6,zero,100f560 <strncmp+0xe8>
 100f47c:	2144b03a 	or	r2,r4,r5
 100f480:	108000cc 	andi	r2,r2,3
 100f484:	028000c4 	movi	r10,3
 100f488:	1000241e 	bne	r2,zero,100f51c <strncmp+0xa4>
 100f48c:	2011883a 	mov	r8,r4
 100f490:	280f883a 	mov	r7,r5
 100f494:	51801f2e 	bgeu	r10,r6,100f514 <strncmp+0x9c>
 100f498:	21000017 	ldw	r4,0(r4)
 100f49c:	28800017 	ldw	r2,0(r5)
 100f4a0:	20801c1e 	bne	r4,r2,100f514 <strncmp+0x9c>
 100f4a4:	31bfff04 	addi	r6,r6,-4
 100f4a8:	30002d26 	beq	r6,zero,100f560 <strncmp+0xe8>
 100f4ac:	027fbff4 	movhi	r9,65279
 100f4b0:	4a7fbfc4 	addi	r9,r9,-257
 100f4b4:	2247883a 	add	r3,r4,r9
 100f4b8:	01602074 	movhi	r5,32897
 100f4bc:	29602004 	addi	r5,r5,-32640
 100f4c0:	1946703a 	and	r3,r3,r5
 100f4c4:	0104303a 	nor	r2,zero,r4
 100f4c8:	10c4703a 	and	r2,r2,r3
 100f4cc:	1000241e 	bne	r2,zero,100f560 <strncmp+0xe8>
 100f4d0:	5017883a 	mov	r11,r10
 100f4d4:	4815883a 	mov	r10,r9
 100f4d8:	2813883a 	mov	r9,r5
 100f4dc:	00000a06 	br	100f508 <strncmp+0x90>
 100f4e0:	41000017 	ldw	r4,0(r8)
 100f4e4:	39400017 	ldw	r5,0(r7)
 100f4e8:	2285883a 	add	r2,r4,r10
 100f4ec:	1244703a 	and	r2,r2,r9
 100f4f0:	0106303a 	nor	r3,zero,r4
 100f4f4:	1886703a 	and	r3,r3,r2
 100f4f8:	2140061e 	bne	r4,r5,100f514 <strncmp+0x9c>
 100f4fc:	31bfff04 	addi	r6,r6,-4
 100f500:	30001726 	beq	r6,zero,100f560 <strncmp+0xe8>
 100f504:	1800161e 	bne	r3,zero,100f560 <strncmp+0xe8>
 100f508:	42000104 	addi	r8,r8,4
 100f50c:	39c00104 	addi	r7,r7,4
 100f510:	59bff336 	bltu	r11,r6,100f4e0 <strncmp+0x68>
 100f514:	4009883a 	mov	r4,r8
 100f518:	380b883a 	mov	r5,r7
 100f51c:	31bfffc4 	addi	r6,r6,-1
 100f520:	01ffffc4 	movi	r7,-1
 100f524:	31c00a1e 	bne	r6,r7,100f550 <strncmp+0xd8>
 100f528:	20c00003 	ldbu	r3,0(r4)
 100f52c:	28800003 	ldbu	r2,0(r5)
 100f530:	1885c83a 	sub	r2,r3,r2
 100f534:	f800283a 	ret
 100f538:	30000926 	beq	r6,zero,100f560 <strncmp+0xe8>
 100f53c:	18000826 	beq	r3,zero,100f560 <strncmp+0xe8>
 100f540:	31bfffc4 	addi	r6,r6,-1
 100f544:	21000044 	addi	r4,r4,1
 100f548:	29400044 	addi	r5,r5,1
 100f54c:	31fff626 	beq	r6,r7,100f528 <strncmp+0xb0>
 100f550:	20c00007 	ldb	r3,0(r4)
 100f554:	28800007 	ldb	r2,0(r5)
 100f558:	18bff726 	beq	r3,r2,100f538 <strncmp+0xc0>
 100f55c:	003ff206 	br	100f528 <strncmp+0xb0>
 100f560:	0005883a 	mov	r2,zero
 100f564:	f800283a 	ret

0100f568 <strnlen>:
 100f568:	2007883a 	mov	r3,r4
 100f56c:	28000a26 	beq	r5,zero,100f598 <strnlen+0x30>
 100f570:	20800007 	ldb	r2,0(r4)
 100f574:	10000826 	beq	r2,zero,100f598 <strnlen+0x30>
 100f578:	214b883a 	add	r5,r4,r5
 100f57c:	00000206 	br	100f588 <strnlen+0x20>
 100f580:	20800007 	ldb	r2,0(r4)
 100f584:	10000226 	beq	r2,zero,100f590 <strnlen+0x28>
 100f588:	21000044 	addi	r4,r4,1
 100f58c:	217ffc1e 	bne	r4,r5,100f580 <strnlen+0x18>
 100f590:	20c5c83a 	sub	r2,r4,r3
 100f594:	f800283a 	ret
 100f598:	0005883a 	mov	r2,zero
 100f59c:	f800283a 	ret

0100f5a0 <_strtol_r>:
 100f5a0:	defff304 	addi	sp,sp,-52
 100f5a4:	008040b4 	movhi	r2,258
 100f5a8:	109f8a04 	addi	r2,r2,32296
 100f5ac:	dcc00615 	stw	r19,24(sp)
 100f5b0:	14c00017 	ldw	r19,0(r2)
 100f5b4:	ddc00a15 	stw	r23,40(sp)
 100f5b8:	dc000315 	stw	r16,12(sp)
 100f5bc:	dfc00c15 	stw	ra,48(sp)
 100f5c0:	df000b15 	stw	fp,44(sp)
 100f5c4:	dd800915 	stw	r22,36(sp)
 100f5c8:	dd400815 	stw	r21,32(sp)
 100f5cc:	dd000715 	stw	r20,28(sp)
 100f5d0:	dc800515 	stw	r18,20(sp)
 100f5d4:	dc400415 	stw	r17,16(sp)
 100f5d8:	282f883a 	mov	r23,r5
 100f5dc:	d9000015 	stw	r4,0(sp)
 100f5e0:	d9800115 	stw	r6,4(sp)
 100f5e4:	2821883a 	mov	r16,r5
 100f5e8:	84400007 	ldb	r17,0(r16)
 100f5ec:	84000044 	addi	r16,r16,1
 100f5f0:	9c47883a 	add	r3,r19,r17
 100f5f4:	18800003 	ldbu	r2,0(r3)
 100f5f8:	1080020c 	andi	r2,r2,8
 100f5fc:	103ffa1e 	bne	r2,zero,100f5e8 <_strtol_r+0x48>
 100f600:	00800b44 	movi	r2,45
 100f604:	88805c26 	beq	r17,r2,100f778 <_strtol_r+0x1d8>
 100f608:	00800ac4 	movi	r2,43
 100f60c:	88805726 	beq	r17,r2,100f76c <_strtol_r+0x1cc>
 100f610:	0039883a 	mov	fp,zero
 100f614:	3807003a 	cmpeq	r3,r7,zero
 100f618:	1800431e 	bne	r3,zero,100f728 <_strtol_r+0x188>
 100f61c:	00800404 	movi	r2,16
 100f620:	38804126 	beq	r7,r2,100f728 <_strtol_r+0x188>
 100f624:	3829883a 	mov	r20,r7
 100f628:	e02cc03a 	cmpne	r22,fp,zero
 100f62c:	b0004b1e 	bne	r22,zero,100f75c <_strtol_r+0x1bc>
 100f630:	04a00034 	movhi	r18,32768
 100f634:	94bfffc4 	addi	r18,r18,-1
 100f638:	9009883a 	mov	r4,r18
 100f63c:	a00b883a 	mov	r5,r20
 100f640:	d9c00215 	stw	r7,8(sp)
 100f644:	10180040 	call	1018004 <__umodsi3>
 100f648:	9009883a 	mov	r4,r18
 100f64c:	a00b883a 	mov	r5,r20
 100f650:	102b883a 	mov	r21,r2
 100f654:	1017ffc0 	call	1017ffc <__udivsi3>
 100f658:	1011883a 	mov	r8,r2
 100f65c:	9c45883a 	add	r2,r19,r17
 100f660:	11000003 	ldbu	r4,0(r2)
 100f664:	000b883a 	mov	r5,zero
 100f668:	000d883a 	mov	r6,zero
 100f66c:	20c0010c 	andi	r3,r4,4
 100f670:	d9c00217 	ldw	r7,8(sp)
 100f674:	18000e26 	beq	r3,zero,100f6b0 <_strtol_r+0x110>
 100f678:	88fff404 	addi	r3,r17,-48
 100f67c:	19c0140e 	bge	r3,r7,100f6d0 <_strtol_r+0x130>
 100f680:	30003116 	blt	r6,zero,100f748 <_strtol_r+0x1a8>
 100f684:	41403036 	bltu	r8,r5,100f748 <_strtol_r+0x1a8>
 100f688:	2a002e26 	beq	r5,r8,100f744 <_strtol_r+0x1a4>
 100f68c:	2d05383a 	mul	r2,r5,r20
 100f690:	01800044 	movi	r6,1
 100f694:	10cb883a 	add	r5,r2,r3
 100f698:	84400007 	ldb	r17,0(r16)
 100f69c:	84000044 	addi	r16,r16,1
 100f6a0:	9c45883a 	add	r2,r19,r17
 100f6a4:	11000003 	ldbu	r4,0(r2)
 100f6a8:	20c0010c 	andi	r3,r4,4
 100f6ac:	183ff21e 	bne	r3,zero,100f678 <_strtol_r+0xd8>
 100f6b0:	208000cc 	andi	r2,r4,3
 100f6b4:	10000626 	beq	r2,zero,100f6d0 <_strtol_r+0x130>
 100f6b8:	2080004c 	andi	r2,r4,1
 100f6bc:	1005003a 	cmpeq	r2,r2,zero
 100f6c0:	1000231e 	bne	r2,zero,100f750 <_strtol_r+0x1b0>
 100f6c4:	00800dc4 	movi	r2,55
 100f6c8:	8887c83a 	sub	r3,r17,r2
 100f6cc:	19ffec16 	blt	r3,r7,100f680 <_strtol_r+0xe0>
 100f6d0:	30002d16 	blt	r6,zero,100f788 <_strtol_r+0x1e8>
 100f6d4:	b000231e 	bne	r22,zero,100f764 <_strtol_r+0x1c4>
 100f6d8:	2807883a 	mov	r3,r5
 100f6dc:	d8800117 	ldw	r2,4(sp)
 100f6e0:	10000426 	beq	r2,zero,100f6f4 <_strtol_r+0x154>
 100f6e4:	30000126 	beq	r6,zero,100f6ec <_strtol_r+0x14c>
 100f6e8:	85ffffc4 	addi	r23,r16,-1
 100f6ec:	d9000117 	ldw	r4,4(sp)
 100f6f0:	25c00015 	stw	r23,0(r4)
 100f6f4:	1805883a 	mov	r2,r3
 100f6f8:	dfc00c17 	ldw	ra,48(sp)
 100f6fc:	df000b17 	ldw	fp,44(sp)
 100f700:	ddc00a17 	ldw	r23,40(sp)
 100f704:	dd800917 	ldw	r22,36(sp)
 100f708:	dd400817 	ldw	r21,32(sp)
 100f70c:	dd000717 	ldw	r20,28(sp)
 100f710:	dcc00617 	ldw	r19,24(sp)
 100f714:	dc800517 	ldw	r18,20(sp)
 100f718:	dc400417 	ldw	r17,16(sp)
 100f71c:	dc000317 	ldw	r16,12(sp)
 100f720:	dec00d04 	addi	sp,sp,52
 100f724:	f800283a 	ret
 100f728:	00800c04 	movi	r2,48
 100f72c:	88801d26 	beq	r17,r2,100f7a4 <_strtol_r+0x204>
 100f730:	183fbc26 	beq	r3,zero,100f624 <_strtol_r+0x84>
 100f734:	00800c04 	movi	r2,48
 100f738:	88802726 	beq	r17,r2,100f7d8 <_strtol_r+0x238>
 100f73c:	01c00284 	movi	r7,10
 100f740:	003fb806 	br	100f624 <_strtol_r+0x84>
 100f744:	a8ffd10e 	bge	r21,r3,100f68c <_strtol_r+0xec>
 100f748:	01bfffc4 	movi	r6,-1
 100f74c:	003fd206 	br	100f698 <_strtol_r+0xf8>
 100f750:	008015c4 	movi	r2,87
 100f754:	8887c83a 	sub	r3,r17,r2
 100f758:	003fdc06 	br	100f6cc <_strtol_r+0x12c>
 100f75c:	04a00034 	movhi	r18,32768
 100f760:	003fb506 	br	100f638 <_strtol_r+0x98>
 100f764:	0147c83a 	sub	r3,zero,r5
 100f768:	003fdc06 	br	100f6dc <_strtol_r+0x13c>
 100f76c:	84400007 	ldb	r17,0(r16)
 100f770:	84000044 	addi	r16,r16,1
 100f774:	003fa606 	br	100f610 <_strtol_r+0x70>
 100f778:	84400007 	ldb	r17,0(r16)
 100f77c:	07000044 	movi	fp,1
 100f780:	84000044 	addi	r16,r16,1
 100f784:	003fa306 	br	100f614 <_strtol_r+0x74>
 100f788:	e005003a 	cmpeq	r2,fp,zero
 100f78c:	10000f1e 	bne	r2,zero,100f7cc <_strtol_r+0x22c>
 100f790:	00e00034 	movhi	r3,32768
 100f794:	d9000017 	ldw	r4,0(sp)
 100f798:	00800884 	movi	r2,34
 100f79c:	20800015 	stw	r2,0(r4)
 100f7a0:	003fce06 	br	100f6dc <_strtol_r+0x13c>
 100f7a4:	81000007 	ldb	r4,0(r16)
 100f7a8:	00801e04 	movi	r2,120
 100f7ac:	20800226 	beq	r4,r2,100f7b8 <_strtol_r+0x218>
 100f7b0:	00801604 	movi	r2,88
 100f7b4:	20bfde1e 	bne	r4,r2,100f730 <_strtol_r+0x190>
 100f7b8:	84400047 	ldb	r17,1(r16)
 100f7bc:	01c00404 	movi	r7,16
 100f7c0:	84000084 	addi	r16,r16,2
 100f7c4:	3829883a 	mov	r20,r7
 100f7c8:	003f9706 	br	100f628 <_strtol_r+0x88>
 100f7cc:	00e00034 	movhi	r3,32768
 100f7d0:	18ffffc4 	addi	r3,r3,-1
 100f7d4:	003fef06 	br	100f794 <_strtol_r+0x1f4>
 100f7d8:	01c00204 	movi	r7,8
 100f7dc:	3829883a 	mov	r20,r7
 100f7e0:	003f9106 	br	100f628 <_strtol_r+0x88>

0100f7e4 <strtol>:
 100f7e4:	008040b4 	movhi	r2,258
 100f7e8:	109f8b04 	addi	r2,r2,32300
 100f7ec:	2013883a 	mov	r9,r4
 100f7f0:	11000017 	ldw	r4,0(r2)
 100f7f4:	2805883a 	mov	r2,r5
 100f7f8:	300f883a 	mov	r7,r6
 100f7fc:	480b883a 	mov	r5,r9
 100f800:	100d883a 	mov	r6,r2
 100f804:	100f5a01 	jmpi	100f5a0 <_strtol_r>

0100f808 <__sprint_r>:
 100f808:	30800217 	ldw	r2,8(r6)
 100f80c:	defffe04 	addi	sp,sp,-8
 100f810:	dc000015 	stw	r16,0(sp)
 100f814:	dfc00115 	stw	ra,4(sp)
 100f818:	3021883a 	mov	r16,r6
 100f81c:	0007883a 	mov	r3,zero
 100f820:	1000061e 	bne	r2,zero,100f83c <__sprint_r+0x34>
 100f824:	1805883a 	mov	r2,r3
 100f828:	30000115 	stw	zero,4(r6)
 100f82c:	dfc00117 	ldw	ra,4(sp)
 100f830:	dc000017 	ldw	r16,0(sp)
 100f834:	dec00204 	addi	sp,sp,8
 100f838:	f800283a 	ret
 100f83c:	10139680 	call	1013968 <__sfvwrite_r>
 100f840:	1007883a 	mov	r3,r2
 100f844:	1805883a 	mov	r2,r3
 100f848:	80000115 	stw	zero,4(r16)
 100f84c:	80000215 	stw	zero,8(r16)
 100f850:	dfc00117 	ldw	ra,4(sp)
 100f854:	dc000017 	ldw	r16,0(sp)
 100f858:	dec00204 	addi	sp,sp,8
 100f85c:	f800283a 	ret

0100f860 <___vfprintf_internal_r>:
 100f860:	defea404 	addi	sp,sp,-1392
 100f864:	dd815815 	stw	r22,1376(sp)
 100f868:	dc015215 	stw	r16,1352(sp)
 100f86c:	d9c15115 	stw	r7,1348(sp)
 100f870:	dfc15b15 	stw	ra,1388(sp)
 100f874:	df015a15 	stw	fp,1384(sp)
 100f878:	ddc15915 	stw	r23,1380(sp)
 100f87c:	dd415715 	stw	r21,1372(sp)
 100f880:	dd015615 	stw	r20,1368(sp)
 100f884:	dcc15515 	stw	r19,1364(sp)
 100f888:	dc815415 	stw	r18,1360(sp)
 100f88c:	dc415315 	stw	r17,1356(sp)
 100f890:	282d883a 	mov	r22,r5
 100f894:	3021883a 	mov	r16,r6
 100f898:	d9014f15 	stw	r4,1340(sp)
 100f89c:	1013f8c0 	call	1013f8c <_localeconv_r>
 100f8a0:	10800017 	ldw	r2,0(r2)
 100f8a4:	d9c15117 	ldw	r7,1348(sp)
 100f8a8:	d8814915 	stw	r2,1316(sp)
 100f8ac:	d8814f17 	ldw	r2,1340(sp)
 100f8b0:	10000226 	beq	r2,zero,100f8bc <___vfprintf_internal_r+0x5c>
 100f8b4:	10800e17 	ldw	r2,56(r2)
 100f8b8:	10020d26 	beq	r2,zero,10100f0 <___vfprintf_internal_r+0x890>
 100f8bc:	b080030b 	ldhu	r2,12(r22)
 100f8c0:	1080020c 	andi	r2,r2,8
 100f8c4:	10020e26 	beq	r2,zero,1010100 <___vfprintf_internal_r+0x8a0>
 100f8c8:	b0800417 	ldw	r2,16(r22)
 100f8cc:	10020c26 	beq	r2,zero,1010100 <___vfprintf_internal_r+0x8a0>
 100f8d0:	b200030b 	ldhu	r8,12(r22)
 100f8d4:	00800284 	movi	r2,10
 100f8d8:	40c0068c 	andi	r3,r8,26
 100f8dc:	18802f1e 	bne	r3,r2,100f99c <___vfprintf_internal_r+0x13c>
 100f8e0:	b080038f 	ldh	r2,14(r22)
 100f8e4:	10002d16 	blt	r2,zero,100f99c <___vfprintf_internal_r+0x13c>
 100f8e8:	b240038b 	ldhu	r9,14(r22)
 100f8ec:	b2800717 	ldw	r10,28(r22)
 100f8f0:	b2c00917 	ldw	r11,36(r22)
 100f8f4:	d9014f17 	ldw	r4,1340(sp)
 100f8f8:	dc402904 	addi	r17,sp,164
 100f8fc:	d8804004 	addi	r2,sp,256
 100f900:	00c10004 	movi	r3,1024
 100f904:	423fff4c 	andi	r8,r8,65533
 100f908:	800d883a 	mov	r6,r16
 100f90c:	880b883a 	mov	r5,r17
 100f910:	da002c0d 	sth	r8,176(sp)
 100f914:	da402c8d 	sth	r9,178(sp)
 100f918:	da803015 	stw	r10,192(sp)
 100f91c:	dac03215 	stw	r11,200(sp)
 100f920:	d8802d15 	stw	r2,180(sp)
 100f924:	d8c02e15 	stw	r3,184(sp)
 100f928:	d8802915 	stw	r2,164(sp)
 100f92c:	d8c02b15 	stw	r3,172(sp)
 100f930:	d8002f15 	stw	zero,188(sp)
 100f934:	100f8600 	call	100f860 <___vfprintf_internal_r>
 100f938:	d8814b15 	stw	r2,1324(sp)
 100f93c:	10000416 	blt	r2,zero,100f950 <___vfprintf_internal_r+0xf0>
 100f940:	d9014f17 	ldw	r4,1340(sp)
 100f944:	880b883a 	mov	r5,r17
 100f948:	10130380 	call	1013038 <_fflush_r>
 100f94c:	1002321e 	bne	r2,zero,1010218 <___vfprintf_internal_r+0x9b8>
 100f950:	d8802c0b 	ldhu	r2,176(sp)
 100f954:	1080100c 	andi	r2,r2,64
 100f958:	10000326 	beq	r2,zero,100f968 <___vfprintf_internal_r+0x108>
 100f95c:	b080030b 	ldhu	r2,12(r22)
 100f960:	10801014 	ori	r2,r2,64
 100f964:	b080030d 	sth	r2,12(r22)
 100f968:	d8814b17 	ldw	r2,1324(sp)
 100f96c:	dfc15b17 	ldw	ra,1388(sp)
 100f970:	df015a17 	ldw	fp,1384(sp)
 100f974:	ddc15917 	ldw	r23,1380(sp)
 100f978:	dd815817 	ldw	r22,1376(sp)
 100f97c:	dd415717 	ldw	r21,1372(sp)
 100f980:	dd015617 	ldw	r20,1368(sp)
 100f984:	dcc15517 	ldw	r19,1364(sp)
 100f988:	dc815417 	ldw	r18,1360(sp)
 100f98c:	dc415317 	ldw	r17,1356(sp)
 100f990:	dc015217 	ldw	r16,1352(sp)
 100f994:	dec15c04 	addi	sp,sp,1392
 100f998:	f800283a 	ret
 100f99c:	0005883a 	mov	r2,zero
 100f9a0:	0007883a 	mov	r3,zero
 100f9a4:	dd401904 	addi	r21,sp,100
 100f9a8:	d8814215 	stw	r2,1288(sp)
 100f9ac:	802f883a 	mov	r23,r16
 100f9b0:	d8c14315 	stw	r3,1292(sp)
 100f9b4:	d8014b15 	stw	zero,1324(sp)
 100f9b8:	d8014815 	stw	zero,1312(sp)
 100f9bc:	d8014415 	stw	zero,1296(sp)
 100f9c0:	d8014715 	stw	zero,1308(sp)
 100f9c4:	dd400c15 	stw	r21,48(sp)
 100f9c8:	d8000e15 	stw	zero,56(sp)
 100f9cc:	d8000d15 	stw	zero,52(sp)
 100f9d0:	b8800007 	ldb	r2,0(r23)
 100f9d4:	10001926 	beq	r2,zero,100fa3c <___vfprintf_internal_r+0x1dc>
 100f9d8:	00c00944 	movi	r3,37
 100f9dc:	10c01726 	beq	r2,r3,100fa3c <___vfprintf_internal_r+0x1dc>
 100f9e0:	b821883a 	mov	r16,r23
 100f9e4:	00000106 	br	100f9ec <___vfprintf_internal_r+0x18c>
 100f9e8:	10c00326 	beq	r2,r3,100f9f8 <___vfprintf_internal_r+0x198>
 100f9ec:	84000044 	addi	r16,r16,1
 100f9f0:	80800007 	ldb	r2,0(r16)
 100f9f4:	103ffc1e 	bne	r2,zero,100f9e8 <___vfprintf_internal_r+0x188>
 100f9f8:	85e7c83a 	sub	r19,r16,r23
 100f9fc:	98000e26 	beq	r19,zero,100fa38 <___vfprintf_internal_r+0x1d8>
 100fa00:	dc800e17 	ldw	r18,56(sp)
 100fa04:	dc400d17 	ldw	r17,52(sp)
 100fa08:	008001c4 	movi	r2,7
 100fa0c:	94e5883a 	add	r18,r18,r19
 100fa10:	8c400044 	addi	r17,r17,1
 100fa14:	adc00015 	stw	r23,0(r21)
 100fa18:	dc800e15 	stw	r18,56(sp)
 100fa1c:	acc00115 	stw	r19,4(r21)
 100fa20:	dc400d15 	stw	r17,52(sp)
 100fa24:	14428b16 	blt	r2,r17,1010454 <___vfprintf_internal_r+0xbf4>
 100fa28:	ad400204 	addi	r21,r21,8
 100fa2c:	d9014b17 	ldw	r4,1324(sp)
 100fa30:	24c9883a 	add	r4,r4,r19
 100fa34:	d9014b15 	stw	r4,1324(sp)
 100fa38:	802f883a 	mov	r23,r16
 100fa3c:	b8800007 	ldb	r2,0(r23)
 100fa40:	10013c26 	beq	r2,zero,100ff34 <___vfprintf_internal_r+0x6d4>
 100fa44:	bdc00044 	addi	r23,r23,1
 100fa48:	d8000405 	stb	zero,16(sp)
 100fa4c:	b8c00007 	ldb	r3,0(r23)
 100fa50:	04ffffc4 	movi	r19,-1
 100fa54:	d8014c15 	stw	zero,1328(sp)
 100fa58:	d8014a15 	stw	zero,1320(sp)
 100fa5c:	d8c14d15 	stw	r3,1332(sp)
 100fa60:	bdc00044 	addi	r23,r23,1
 100fa64:	d9414d17 	ldw	r5,1332(sp)
 100fa68:	00801604 	movi	r2,88
 100fa6c:	28fff804 	addi	r3,r5,-32
 100fa70:	10c06036 	bltu	r2,r3,100fbf4 <___vfprintf_internal_r+0x394>
 100fa74:	18c5883a 	add	r2,r3,r3
 100fa78:	1085883a 	add	r2,r2,r2
 100fa7c:	00c04074 	movhi	r3,257
 100fa80:	18fea404 	addi	r3,r3,-1392
 100fa84:	10c5883a 	add	r2,r2,r3
 100fa88:	11000017 	ldw	r4,0(r2)
 100fa8c:	2000683a 	jmp	r4
 100fa90:	01010a04 	movi	r4,1064
 100fa94:	0100fbf4 	movhi	r4,1007
 100fa98:	0100fbf4 	movhi	r4,1007
 100fa9c:	010109f0 	cmpltui	r4,zero,1063
 100faa0:	0100fbf4 	movhi	r4,1007
 100faa4:	0100fbf4 	movhi	r4,1007
 100faa8:	0100fbf4 	movhi	r4,1007
 100faac:	0100fbf4 	movhi	r4,1007
 100fab0:	0100fbf4 	movhi	r4,1007
 100fab4:	0100fbf4 	movhi	r4,1007
 100fab8:	010107d0 	cmplti	r4,zero,1055
 100fabc:	010109e0 	cmpeqi	r4,zero,1063
 100fac0:	0100fbf4 	movhi	r4,1007
 100fac4:	010107e8 	cmpgeui	r4,zero,1055
 100fac8:	01010a7c 	xorhi	r4,zero,1065
 100facc:	0100fbf4 	movhi	r4,1007
 100fad0:	01010a68 	cmpgeui	r4,zero,1065
 100fad4:	01010a30 	cmpltui	r4,zero,1064
 100fad8:	01010a30 	cmpltui	r4,zero,1064
 100fadc:	01010a30 	cmpltui	r4,zero,1064
 100fae0:	01010a30 	cmpltui	r4,zero,1064
 100fae4:	01010a30 	cmpltui	r4,zero,1064
 100fae8:	01010a30 	cmpltui	r4,zero,1064
 100faec:	01010a30 	cmpltui	r4,zero,1064
 100faf0:	01010a30 	cmpltui	r4,zero,1064
 100faf4:	01010a30 	cmpltui	r4,zero,1064
 100faf8:	0100fbf4 	movhi	r4,1007
 100fafc:	0100fbf4 	movhi	r4,1007
 100fb00:	0100fbf4 	movhi	r4,1007
 100fb04:	0100fbf4 	movhi	r4,1007
 100fb08:	0100fbf4 	movhi	r4,1007
 100fb0c:	0100fbf4 	movhi	r4,1007
 100fb10:	0100fbf4 	movhi	r4,1007
 100fb14:	0100fbf4 	movhi	r4,1007
 100fb18:	0100fbf4 	movhi	r4,1007
 100fb1c:	0100fbf4 	movhi	r4,1007
 100fb20:	0101024c 	andi	r4,zero,1033
 100fb24:	010108b8 	rdprs	r4,zero,1058
 100fb28:	0100fbf4 	movhi	r4,1007
 100fb2c:	010108b8 	rdprs	r4,zero,1058
 100fb30:	0100fbf4 	movhi	r4,1007
 100fb34:	0100fbf4 	movhi	r4,1007
 100fb38:	0100fbf4 	movhi	r4,1007
 100fb3c:	0100fbf4 	movhi	r4,1007
 100fb40:	01010a1c 	xori	r4,zero,1064
 100fb44:	0100fbf4 	movhi	r4,1007
 100fb48:	0100fbf4 	movhi	r4,1007
 100fb4c:	01010300 	call	101030 <OSCtxSw_SWITCH_PC+0x100ff0>
 100fb50:	0100fbf4 	movhi	r4,1007
 100fb54:	0100fbf4 	movhi	r4,1007
 100fb58:	0100fbf4 	movhi	r4,1007
 100fb5c:	0100fbf4 	movhi	r4,1007
 100fb60:	0100fbf4 	movhi	r4,1007
 100fb64:	0101034c 	andi	r4,zero,1037
 100fb68:	0100fbf4 	movhi	r4,1007
 100fb6c:	0100fbf4 	movhi	r4,1007
 100fb70:	0101096c 	andhi	r4,zero,1061
 100fb74:	0100fbf4 	movhi	r4,1007
 100fb78:	0100fbf4 	movhi	r4,1007
 100fb7c:	0100fbf4 	movhi	r4,1007
 100fb80:	0100fbf4 	movhi	r4,1007
 100fb84:	0100fbf4 	movhi	r4,1007
 100fb88:	0100fbf4 	movhi	r4,1007
 100fb8c:	0100fbf4 	movhi	r4,1007
 100fb90:	0100fbf4 	movhi	r4,1007
 100fb94:	0100fbf4 	movhi	r4,1007
 100fb98:	0100fbf4 	movhi	r4,1007
 100fb9c:	01010940 	call	101094 <OSCtxSw_SWITCH_PC+0x101054>
 100fba0:	01010258 	cmpnei	r4,zero,1033
 100fba4:	010108b8 	rdprs	r4,zero,1058
 100fba8:	010108b8 	rdprs	r4,zero,1058
 100fbac:	010108b8 	rdprs	r4,zero,1058
 100fbb0:	010108a4 	muli	r4,zero,1058
 100fbb4:	01010258 	cmpnei	r4,zero,1033
 100fbb8:	0100fbf4 	movhi	r4,1007
 100fbbc:	0100fbf4 	movhi	r4,1007
 100fbc0:	0101082c 	andhi	r4,zero,1056
 100fbc4:	0100fbf4 	movhi	r4,1007
 100fbc8:	010107fc 	xorhi	r4,zero,1055
 100fbcc:	0101030c 	andi	r4,zero,1036
 100fbd0:	0101085c 	xori	r4,zero,1057
 100fbd4:	01010848 	cmpgei	r4,zero,1057
 100fbd8:	0100fbf4 	movhi	r4,1007
 100fbdc:	01010ad8 	cmpnei	r4,zero,1067
 100fbe0:	0100fbf4 	movhi	r4,1007
 100fbe4:	01010358 	cmpnei	r4,zero,1037
 100fbe8:	0100fbf4 	movhi	r4,1007
 100fbec:	0100fbf4 	movhi	r4,1007
 100fbf0:	010109d0 	cmplti	r4,zero,1063
 100fbf4:	d9014d17 	ldw	r4,1332(sp)
 100fbf8:	2000ce26 	beq	r4,zero,100ff34 <___vfprintf_internal_r+0x6d4>
 100fbfc:	01400044 	movi	r5,1
 100fc00:	d9800f04 	addi	r6,sp,60
 100fc04:	d9c14015 	stw	r7,1280(sp)
 100fc08:	d9414515 	stw	r5,1300(sp)
 100fc0c:	d9814115 	stw	r6,1284(sp)
 100fc10:	280f883a 	mov	r7,r5
 100fc14:	d9000f05 	stb	r4,60(sp)
 100fc18:	d8000405 	stb	zero,16(sp)
 100fc1c:	d8014615 	stw	zero,1304(sp)
 100fc20:	d8c14c17 	ldw	r3,1328(sp)
 100fc24:	1880008c 	andi	r2,r3,2
 100fc28:	1005003a 	cmpeq	r2,r2,zero
 100fc2c:	d8815015 	stw	r2,1344(sp)
 100fc30:	1000031e 	bne	r2,zero,100fc40 <___vfprintf_internal_r+0x3e0>
 100fc34:	d9014517 	ldw	r4,1300(sp)
 100fc38:	21000084 	addi	r4,r4,2
 100fc3c:	d9014515 	stw	r4,1300(sp)
 100fc40:	d9414c17 	ldw	r5,1328(sp)
 100fc44:	2940210c 	andi	r5,r5,132
 100fc48:	d9414e15 	stw	r5,1336(sp)
 100fc4c:	28002d1e 	bne	r5,zero,100fd04 <___vfprintf_internal_r+0x4a4>
 100fc50:	d9814a17 	ldw	r6,1320(sp)
 100fc54:	d8814517 	ldw	r2,1300(sp)
 100fc58:	30a1c83a 	sub	r16,r6,r2
 100fc5c:	0400290e 	bge	zero,r16,100fd04 <___vfprintf_internal_r+0x4a4>
 100fc60:	00800404 	movi	r2,16
 100fc64:	1404580e 	bge	r2,r16,1010dc8 <___vfprintf_internal_r+0x1568>
 100fc68:	dc800e17 	ldw	r18,56(sp)
 100fc6c:	dc400d17 	ldw	r17,52(sp)
 100fc70:	1027883a 	mov	r19,r2
 100fc74:	070040b4 	movhi	fp,258
 100fc78:	e716d284 	addi	fp,fp,23370
 100fc7c:	050001c4 	movi	r20,7
 100fc80:	00000306 	br	100fc90 <___vfprintf_internal_r+0x430>
 100fc84:	843ffc04 	addi	r16,r16,-16
 100fc88:	ad400204 	addi	r21,r21,8
 100fc8c:	9c00130e 	bge	r19,r16,100fcdc <___vfprintf_internal_r+0x47c>
 100fc90:	94800404 	addi	r18,r18,16
 100fc94:	8c400044 	addi	r17,r17,1
 100fc98:	af000015 	stw	fp,0(r21)
 100fc9c:	acc00115 	stw	r19,4(r21)
 100fca0:	dc800e15 	stw	r18,56(sp)
 100fca4:	dc400d15 	stw	r17,52(sp)
 100fca8:	a47ff60e 	bge	r20,r17,100fc84 <___vfprintf_internal_r+0x424>
 100fcac:	d9014f17 	ldw	r4,1340(sp)
 100fcb0:	b00b883a 	mov	r5,r22
 100fcb4:	d9800c04 	addi	r6,sp,48
 100fcb8:	d9c15115 	stw	r7,1348(sp)
 100fcbc:	100f8080 	call	100f808 <__sprint_r>
 100fcc0:	d9c15117 	ldw	r7,1348(sp)
 100fcc4:	10009e1e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 100fcc8:	843ffc04 	addi	r16,r16,-16
 100fccc:	dc800e17 	ldw	r18,56(sp)
 100fcd0:	dc400d17 	ldw	r17,52(sp)
 100fcd4:	dd401904 	addi	r21,sp,100
 100fcd8:	9c3fed16 	blt	r19,r16,100fc90 <___vfprintf_internal_r+0x430>
 100fcdc:	9425883a 	add	r18,r18,r16
 100fce0:	8c400044 	addi	r17,r17,1
 100fce4:	008001c4 	movi	r2,7
 100fce8:	af000015 	stw	fp,0(r21)
 100fcec:	ac000115 	stw	r16,4(r21)
 100fcf0:	dc800e15 	stw	r18,56(sp)
 100fcf4:	dc400d15 	stw	r17,52(sp)
 100fcf8:	1441f516 	blt	r2,r17,10104d0 <___vfprintf_internal_r+0xc70>
 100fcfc:	ad400204 	addi	r21,r21,8
 100fd00:	00000206 	br	100fd0c <___vfprintf_internal_r+0x4ac>
 100fd04:	dc800e17 	ldw	r18,56(sp)
 100fd08:	dc400d17 	ldw	r17,52(sp)
 100fd0c:	d8800407 	ldb	r2,16(sp)
 100fd10:	10000b26 	beq	r2,zero,100fd40 <___vfprintf_internal_r+0x4e0>
 100fd14:	00800044 	movi	r2,1
 100fd18:	94800044 	addi	r18,r18,1
 100fd1c:	8c400044 	addi	r17,r17,1
 100fd20:	a8800115 	stw	r2,4(r21)
 100fd24:	d8c00404 	addi	r3,sp,16
 100fd28:	008001c4 	movi	r2,7
 100fd2c:	a8c00015 	stw	r3,0(r21)
 100fd30:	dc800e15 	stw	r18,56(sp)
 100fd34:	dc400d15 	stw	r17,52(sp)
 100fd38:	1441da16 	blt	r2,r17,10104a4 <___vfprintf_internal_r+0xc44>
 100fd3c:	ad400204 	addi	r21,r21,8
 100fd40:	d9015017 	ldw	r4,1344(sp)
 100fd44:	20000b1e 	bne	r4,zero,100fd74 <___vfprintf_internal_r+0x514>
 100fd48:	d8800444 	addi	r2,sp,17
 100fd4c:	94800084 	addi	r18,r18,2
 100fd50:	8c400044 	addi	r17,r17,1
 100fd54:	a8800015 	stw	r2,0(r21)
 100fd58:	00c00084 	movi	r3,2
 100fd5c:	008001c4 	movi	r2,7
 100fd60:	a8c00115 	stw	r3,4(r21)
 100fd64:	dc800e15 	stw	r18,56(sp)
 100fd68:	dc400d15 	stw	r17,52(sp)
 100fd6c:	1441c216 	blt	r2,r17,1010478 <___vfprintf_internal_r+0xc18>
 100fd70:	ad400204 	addi	r21,r21,8
 100fd74:	d9414e17 	ldw	r5,1336(sp)
 100fd78:	00802004 	movi	r2,128
 100fd7c:	2880b126 	beq	r5,r2,1010044 <___vfprintf_internal_r+0x7e4>
 100fd80:	d8c14617 	ldw	r3,1304(sp)
 100fd84:	19e1c83a 	sub	r16,r3,r7
 100fd88:	0400260e 	bge	zero,r16,100fe24 <___vfprintf_internal_r+0x5c4>
 100fd8c:	00800404 	movi	r2,16
 100fd90:	1403c90e 	bge	r2,r16,1010cb8 <___vfprintf_internal_r+0x1458>
 100fd94:	1027883a 	mov	r19,r2
 100fd98:	070040b4 	movhi	fp,258
 100fd9c:	e716ce84 	addi	fp,fp,23354
 100fda0:	050001c4 	movi	r20,7
 100fda4:	00000306 	br	100fdb4 <___vfprintf_internal_r+0x554>
 100fda8:	843ffc04 	addi	r16,r16,-16
 100fdac:	ad400204 	addi	r21,r21,8
 100fdb0:	9c00130e 	bge	r19,r16,100fe00 <___vfprintf_internal_r+0x5a0>
 100fdb4:	94800404 	addi	r18,r18,16
 100fdb8:	8c400044 	addi	r17,r17,1
 100fdbc:	af000015 	stw	fp,0(r21)
 100fdc0:	acc00115 	stw	r19,4(r21)
 100fdc4:	dc800e15 	stw	r18,56(sp)
 100fdc8:	dc400d15 	stw	r17,52(sp)
 100fdcc:	a47ff60e 	bge	r20,r17,100fda8 <___vfprintf_internal_r+0x548>
 100fdd0:	d9014f17 	ldw	r4,1340(sp)
 100fdd4:	b00b883a 	mov	r5,r22
 100fdd8:	d9800c04 	addi	r6,sp,48
 100fddc:	d9c15115 	stw	r7,1348(sp)
 100fde0:	100f8080 	call	100f808 <__sprint_r>
 100fde4:	d9c15117 	ldw	r7,1348(sp)
 100fde8:	1000551e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 100fdec:	843ffc04 	addi	r16,r16,-16
 100fdf0:	dc800e17 	ldw	r18,56(sp)
 100fdf4:	dc400d17 	ldw	r17,52(sp)
 100fdf8:	dd401904 	addi	r21,sp,100
 100fdfc:	9c3fed16 	blt	r19,r16,100fdb4 <___vfprintf_internal_r+0x554>
 100fe00:	9425883a 	add	r18,r18,r16
 100fe04:	8c400044 	addi	r17,r17,1
 100fe08:	008001c4 	movi	r2,7
 100fe0c:	af000015 	stw	fp,0(r21)
 100fe10:	ac000115 	stw	r16,4(r21)
 100fe14:	dc800e15 	stw	r18,56(sp)
 100fe18:	dc400d15 	stw	r17,52(sp)
 100fe1c:	14418216 	blt	r2,r17,1010428 <___vfprintf_internal_r+0xbc8>
 100fe20:	ad400204 	addi	r21,r21,8
 100fe24:	d9014c17 	ldw	r4,1328(sp)
 100fe28:	2080400c 	andi	r2,r4,256
 100fe2c:	10004a1e 	bne	r2,zero,100ff58 <___vfprintf_internal_r+0x6f8>
 100fe30:	d9414117 	ldw	r5,1284(sp)
 100fe34:	91e5883a 	add	r18,r18,r7
 100fe38:	8c400044 	addi	r17,r17,1
 100fe3c:	008001c4 	movi	r2,7
 100fe40:	a9400015 	stw	r5,0(r21)
 100fe44:	a9c00115 	stw	r7,4(r21)
 100fe48:	dc800e15 	stw	r18,56(sp)
 100fe4c:	dc400d15 	stw	r17,52(sp)
 100fe50:	14416716 	blt	r2,r17,10103f0 <___vfprintf_internal_r+0xb90>
 100fe54:	a8c00204 	addi	r3,r21,8
 100fe58:	d9814c17 	ldw	r6,1328(sp)
 100fe5c:	3080010c 	andi	r2,r6,4
 100fe60:	10002826 	beq	r2,zero,100ff04 <___vfprintf_internal_r+0x6a4>
 100fe64:	d8814a17 	ldw	r2,1320(sp)
 100fe68:	d9014517 	ldw	r4,1300(sp)
 100fe6c:	1121c83a 	sub	r16,r2,r4
 100fe70:	0400240e 	bge	zero,r16,100ff04 <___vfprintf_internal_r+0x6a4>
 100fe74:	00800404 	movi	r2,16
 100fe78:	14044f0e 	bge	r2,r16,1010fb8 <___vfprintf_internal_r+0x1758>
 100fe7c:	dc400d17 	ldw	r17,52(sp)
 100fe80:	1027883a 	mov	r19,r2
 100fe84:	070040b4 	movhi	fp,258
 100fe88:	e716d284 	addi	fp,fp,23370
 100fe8c:	050001c4 	movi	r20,7
 100fe90:	00000306 	br	100fea0 <___vfprintf_internal_r+0x640>
 100fe94:	843ffc04 	addi	r16,r16,-16
 100fe98:	18c00204 	addi	r3,r3,8
 100fe9c:	9c00110e 	bge	r19,r16,100fee4 <___vfprintf_internal_r+0x684>
 100fea0:	94800404 	addi	r18,r18,16
 100fea4:	8c400044 	addi	r17,r17,1
 100fea8:	1f000015 	stw	fp,0(r3)
 100feac:	1cc00115 	stw	r19,4(r3)
 100feb0:	dc800e15 	stw	r18,56(sp)
 100feb4:	dc400d15 	stw	r17,52(sp)
 100feb8:	a47ff60e 	bge	r20,r17,100fe94 <___vfprintf_internal_r+0x634>
 100febc:	d9014f17 	ldw	r4,1340(sp)
 100fec0:	b00b883a 	mov	r5,r22
 100fec4:	d9800c04 	addi	r6,sp,48
 100fec8:	100f8080 	call	100f808 <__sprint_r>
 100fecc:	10001c1e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 100fed0:	843ffc04 	addi	r16,r16,-16
 100fed4:	dc800e17 	ldw	r18,56(sp)
 100fed8:	dc400d17 	ldw	r17,52(sp)
 100fedc:	d8c01904 	addi	r3,sp,100
 100fee0:	9c3fef16 	blt	r19,r16,100fea0 <___vfprintf_internal_r+0x640>
 100fee4:	9425883a 	add	r18,r18,r16
 100fee8:	8c400044 	addi	r17,r17,1
 100feec:	008001c4 	movi	r2,7
 100fef0:	1f000015 	stw	fp,0(r3)
 100fef4:	1c000115 	stw	r16,4(r3)
 100fef8:	dc800e15 	stw	r18,56(sp)
 100fefc:	dc400d15 	stw	r17,52(sp)
 100ff00:	1440cb16 	blt	r2,r17,1010230 <___vfprintf_internal_r+0x9d0>
 100ff04:	d8814a17 	ldw	r2,1320(sp)
 100ff08:	d9414517 	ldw	r5,1300(sp)
 100ff0c:	1140010e 	bge	r2,r5,100ff14 <___vfprintf_internal_r+0x6b4>
 100ff10:	2805883a 	mov	r2,r5
 100ff14:	d9814b17 	ldw	r6,1324(sp)
 100ff18:	308d883a 	add	r6,r6,r2
 100ff1c:	d9814b15 	stw	r6,1324(sp)
 100ff20:	90013b1e 	bne	r18,zero,1010410 <___vfprintf_internal_r+0xbb0>
 100ff24:	d9c14017 	ldw	r7,1280(sp)
 100ff28:	dd401904 	addi	r21,sp,100
 100ff2c:	d8000d15 	stw	zero,52(sp)
 100ff30:	003ea706 	br	100f9d0 <___vfprintf_internal_r+0x170>
 100ff34:	d8800e17 	ldw	r2,56(sp)
 100ff38:	10053f1e 	bne	r2,zero,1011438 <___vfprintf_internal_r+0x1bd8>
 100ff3c:	d8000d15 	stw	zero,52(sp)
 100ff40:	b080030b 	ldhu	r2,12(r22)
 100ff44:	1080100c 	andi	r2,r2,64
 100ff48:	103e8726 	beq	r2,zero,100f968 <___vfprintf_internal_r+0x108>
 100ff4c:	00bfffc4 	movi	r2,-1
 100ff50:	d8814b15 	stw	r2,1324(sp)
 100ff54:	003e8406 	br	100f968 <___vfprintf_internal_r+0x108>
 100ff58:	d9814d17 	ldw	r6,1332(sp)
 100ff5c:	00801944 	movi	r2,101
 100ff60:	11806e16 	blt	r2,r6,101011c <___vfprintf_internal_r+0x8bc>
 100ff64:	d9414717 	ldw	r5,1308(sp)
 100ff68:	00c00044 	movi	r3,1
 100ff6c:	1943430e 	bge	r3,r5,1010c7c <___vfprintf_internal_r+0x141c>
 100ff70:	d8814117 	ldw	r2,1284(sp)
 100ff74:	94800044 	addi	r18,r18,1
 100ff78:	8c400044 	addi	r17,r17,1
 100ff7c:	a8800015 	stw	r2,0(r21)
 100ff80:	008001c4 	movi	r2,7
 100ff84:	a8c00115 	stw	r3,4(r21)
 100ff88:	dc800e15 	stw	r18,56(sp)
 100ff8c:	dc400d15 	stw	r17,52(sp)
 100ff90:	1441ca16 	blt	r2,r17,10106bc <___vfprintf_internal_r+0xe5c>
 100ff94:	a8c00204 	addi	r3,r21,8
 100ff98:	d9014917 	ldw	r4,1316(sp)
 100ff9c:	00800044 	movi	r2,1
 100ffa0:	94800044 	addi	r18,r18,1
 100ffa4:	8c400044 	addi	r17,r17,1
 100ffa8:	18800115 	stw	r2,4(r3)
 100ffac:	008001c4 	movi	r2,7
 100ffb0:	19000015 	stw	r4,0(r3)
 100ffb4:	dc800e15 	stw	r18,56(sp)
 100ffb8:	dc400d15 	stw	r17,52(sp)
 100ffbc:	1441b616 	blt	r2,r17,1010698 <___vfprintf_internal_r+0xe38>
 100ffc0:	1cc00204 	addi	r19,r3,8
 100ffc4:	d9014217 	ldw	r4,1288(sp)
 100ffc8:	d9414317 	ldw	r5,1292(sp)
 100ffcc:	000d883a 	mov	r6,zero
 100ffd0:	000f883a 	mov	r7,zero
 100ffd4:	101793c0 	call	101793c <__nedf2>
 100ffd8:	10017426 	beq	r2,zero,10105ac <___vfprintf_internal_r+0xd4c>
 100ffdc:	d9414717 	ldw	r5,1308(sp)
 100ffe0:	d9814117 	ldw	r6,1284(sp)
 100ffe4:	8c400044 	addi	r17,r17,1
 100ffe8:	2c85883a 	add	r2,r5,r18
 100ffec:	14bfffc4 	addi	r18,r2,-1
 100fff0:	28bfffc4 	addi	r2,r5,-1
 100fff4:	30c00044 	addi	r3,r6,1
 100fff8:	98800115 	stw	r2,4(r19)
 100fffc:	008001c4 	movi	r2,7
 1010000:	98c00015 	stw	r3,0(r19)
 1010004:	dc800e15 	stw	r18,56(sp)
 1010008:	dc400d15 	stw	r17,52(sp)
 101000c:	14418e16 	blt	r2,r17,1010648 <___vfprintf_internal_r+0xde8>
 1010010:	9cc00204 	addi	r19,r19,8
 1010014:	d9414817 	ldw	r5,1312(sp)
 1010018:	d8800804 	addi	r2,sp,32
 101001c:	8c400044 	addi	r17,r17,1
 1010020:	9165883a 	add	r18,r18,r5
 1010024:	98800015 	stw	r2,0(r19)
 1010028:	008001c4 	movi	r2,7
 101002c:	99400115 	stw	r5,4(r19)
 1010030:	dc800e15 	stw	r18,56(sp)
 1010034:	dc400d15 	stw	r17,52(sp)
 1010038:	1440ed16 	blt	r2,r17,10103f0 <___vfprintf_internal_r+0xb90>
 101003c:	98c00204 	addi	r3,r19,8
 1010040:	003f8506 	br	100fe58 <___vfprintf_internal_r+0x5f8>
 1010044:	d9814a17 	ldw	r6,1320(sp)
 1010048:	d8814517 	ldw	r2,1300(sp)
 101004c:	30a1c83a 	sub	r16,r6,r2
 1010050:	043f4b0e 	bge	zero,r16,100fd80 <___vfprintf_internal_r+0x520>
 1010054:	00800404 	movi	r2,16
 1010058:	1404340e 	bge	r2,r16,101112c <___vfprintf_internal_r+0x18cc>
 101005c:	1027883a 	mov	r19,r2
 1010060:	070040b4 	movhi	fp,258
 1010064:	e716ce84 	addi	fp,fp,23354
 1010068:	050001c4 	movi	r20,7
 101006c:	00000306 	br	101007c <___vfprintf_internal_r+0x81c>
 1010070:	843ffc04 	addi	r16,r16,-16
 1010074:	ad400204 	addi	r21,r21,8
 1010078:	9c00130e 	bge	r19,r16,10100c8 <___vfprintf_internal_r+0x868>
 101007c:	94800404 	addi	r18,r18,16
 1010080:	8c400044 	addi	r17,r17,1
 1010084:	af000015 	stw	fp,0(r21)
 1010088:	acc00115 	stw	r19,4(r21)
 101008c:	dc800e15 	stw	r18,56(sp)
 1010090:	dc400d15 	stw	r17,52(sp)
 1010094:	a47ff60e 	bge	r20,r17,1010070 <___vfprintf_internal_r+0x810>
 1010098:	d9014f17 	ldw	r4,1340(sp)
 101009c:	b00b883a 	mov	r5,r22
 10100a0:	d9800c04 	addi	r6,sp,48
 10100a4:	d9c15115 	stw	r7,1348(sp)
 10100a8:	100f8080 	call	100f808 <__sprint_r>
 10100ac:	d9c15117 	ldw	r7,1348(sp)
 10100b0:	103fa31e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 10100b4:	843ffc04 	addi	r16,r16,-16
 10100b8:	dc800e17 	ldw	r18,56(sp)
 10100bc:	dc400d17 	ldw	r17,52(sp)
 10100c0:	dd401904 	addi	r21,sp,100
 10100c4:	9c3fed16 	blt	r19,r16,101007c <___vfprintf_internal_r+0x81c>
 10100c8:	9425883a 	add	r18,r18,r16
 10100cc:	8c400044 	addi	r17,r17,1
 10100d0:	008001c4 	movi	r2,7
 10100d4:	af000015 	stw	fp,0(r21)
 10100d8:	ac000115 	stw	r16,4(r21)
 10100dc:	dc800e15 	stw	r18,56(sp)
 10100e0:	dc400d15 	stw	r17,52(sp)
 10100e4:	14416116 	blt	r2,r17,101066c <___vfprintf_internal_r+0xe0c>
 10100e8:	ad400204 	addi	r21,r21,8
 10100ec:	003f2406 	br	100fd80 <___vfprintf_internal_r+0x520>
 10100f0:	d9014f17 	ldw	r4,1340(sp)
 10100f4:	10132d00 	call	10132d0 <__sinit>
 10100f8:	d9c15117 	ldw	r7,1348(sp)
 10100fc:	003def06 	br	100f8bc <___vfprintf_internal_r+0x5c>
 1010100:	d9014f17 	ldw	r4,1340(sp)
 1010104:	b00b883a 	mov	r5,r22
 1010108:	d9c15115 	stw	r7,1348(sp)
 101010c:	10117300 	call	1011730 <__swsetup_r>
 1010110:	d9c15117 	ldw	r7,1348(sp)
 1010114:	103dee26 	beq	r2,zero,100f8d0 <___vfprintf_internal_r+0x70>
 1010118:	003f8c06 	br	100ff4c <___vfprintf_internal_r+0x6ec>
 101011c:	d9014217 	ldw	r4,1288(sp)
 1010120:	d9414317 	ldw	r5,1292(sp)
 1010124:	000d883a 	mov	r6,zero
 1010128:	000f883a 	mov	r7,zero
 101012c:	10178b40 	call	10178b4 <__eqdf2>
 1010130:	1000f21e 	bne	r2,zero,10104fc <___vfprintf_internal_r+0xc9c>
 1010134:	008040b4 	movhi	r2,258
 1010138:	1096ce04 	addi	r2,r2,23352
 101013c:	94800044 	addi	r18,r18,1
 1010140:	8c400044 	addi	r17,r17,1
 1010144:	a8800015 	stw	r2,0(r21)
 1010148:	00c00044 	movi	r3,1
 101014c:	008001c4 	movi	r2,7
 1010150:	a8c00115 	stw	r3,4(r21)
 1010154:	dc800e15 	stw	r18,56(sp)
 1010158:	dc400d15 	stw	r17,52(sp)
 101015c:	1442fa16 	blt	r2,r17,1010d48 <___vfprintf_internal_r+0x14e8>
 1010160:	a8c00204 	addi	r3,r21,8
 1010164:	d8800517 	ldw	r2,20(sp)
 1010168:	d9014717 	ldw	r4,1308(sp)
 101016c:	11015c0e 	bge	r2,r4,10106e0 <___vfprintf_internal_r+0xe80>
 1010170:	dc400d17 	ldw	r17,52(sp)
 1010174:	d9814917 	ldw	r6,1316(sp)
 1010178:	00800044 	movi	r2,1
 101017c:	94800044 	addi	r18,r18,1
 1010180:	8c400044 	addi	r17,r17,1
 1010184:	18800115 	stw	r2,4(r3)
 1010188:	008001c4 	movi	r2,7
 101018c:	19800015 	stw	r6,0(r3)
 1010190:	dc800e15 	stw	r18,56(sp)
 1010194:	dc400d15 	stw	r17,52(sp)
 1010198:	14431016 	blt	r2,r17,1010ddc <___vfprintf_internal_r+0x157c>
 101019c:	18c00204 	addi	r3,r3,8
 10101a0:	d8814717 	ldw	r2,1308(sp)
 10101a4:	143fffc4 	addi	r16,r2,-1
 10101a8:	043f2b0e 	bge	zero,r16,100fe58 <___vfprintf_internal_r+0x5f8>
 10101ac:	00800404 	movi	r2,16
 10101b0:	1402a20e 	bge	r2,r16,1010c3c <___vfprintf_internal_r+0x13dc>
 10101b4:	dc400d17 	ldw	r17,52(sp)
 10101b8:	1027883a 	mov	r19,r2
 10101bc:	070040b4 	movhi	fp,258
 10101c0:	e716ce84 	addi	fp,fp,23354
 10101c4:	050001c4 	movi	r20,7
 10101c8:	00000306 	br	10101d8 <___vfprintf_internal_r+0x978>
 10101cc:	18c00204 	addi	r3,r3,8
 10101d0:	843ffc04 	addi	r16,r16,-16
 10101d4:	9c029c0e 	bge	r19,r16,1010c48 <___vfprintf_internal_r+0x13e8>
 10101d8:	94800404 	addi	r18,r18,16
 10101dc:	8c400044 	addi	r17,r17,1
 10101e0:	1f000015 	stw	fp,0(r3)
 10101e4:	1cc00115 	stw	r19,4(r3)
 10101e8:	dc800e15 	stw	r18,56(sp)
 10101ec:	dc400d15 	stw	r17,52(sp)
 10101f0:	a47ff60e 	bge	r20,r17,10101cc <___vfprintf_internal_r+0x96c>
 10101f4:	d9014f17 	ldw	r4,1340(sp)
 10101f8:	b00b883a 	mov	r5,r22
 10101fc:	d9800c04 	addi	r6,sp,48
 1010200:	100f8080 	call	100f808 <__sprint_r>
 1010204:	103f4e1e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 1010208:	dc800e17 	ldw	r18,56(sp)
 101020c:	dc400d17 	ldw	r17,52(sp)
 1010210:	d8c01904 	addi	r3,sp,100
 1010214:	003fee06 	br	10101d0 <___vfprintf_internal_r+0x970>
 1010218:	d8802c0b 	ldhu	r2,176(sp)
 101021c:	00ffffc4 	movi	r3,-1
 1010220:	d8c14b15 	stw	r3,1324(sp)
 1010224:	1080100c 	andi	r2,r2,64
 1010228:	103dcc1e 	bne	r2,zero,100f95c <___vfprintf_internal_r+0xfc>
 101022c:	003dce06 	br	100f968 <___vfprintf_internal_r+0x108>
 1010230:	d9014f17 	ldw	r4,1340(sp)
 1010234:	b00b883a 	mov	r5,r22
 1010238:	d9800c04 	addi	r6,sp,48
 101023c:	100f8080 	call	100f808 <__sprint_r>
 1010240:	103f3f1e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 1010244:	dc800e17 	ldw	r18,56(sp)
 1010248:	003f2e06 	br	100ff04 <___vfprintf_internal_r+0x6a4>
 101024c:	d9414c17 	ldw	r5,1328(sp)
 1010250:	29400414 	ori	r5,r5,16
 1010254:	d9414c15 	stw	r5,1328(sp)
 1010258:	d9814c17 	ldw	r6,1328(sp)
 101025c:	3080080c 	andi	r2,r6,32
 1010260:	10014f1e 	bne	r2,zero,10107a0 <___vfprintf_internal_r+0xf40>
 1010264:	d8c14c17 	ldw	r3,1328(sp)
 1010268:	1880040c 	andi	r2,r3,16
 101026c:	1002ea1e 	bne	r2,zero,1010e18 <___vfprintf_internal_r+0x15b8>
 1010270:	d9014c17 	ldw	r4,1328(sp)
 1010274:	2080100c 	andi	r2,r4,64
 1010278:	1002e726 	beq	r2,zero,1010e18 <___vfprintf_internal_r+0x15b8>
 101027c:	3880000f 	ldh	r2,0(r7)
 1010280:	39c00104 	addi	r7,r7,4
 1010284:	d9c14015 	stw	r7,1280(sp)
 1010288:	1023d7fa 	srai	r17,r2,31
 101028c:	1021883a 	mov	r16,r2
 1010290:	88037216 	blt	r17,zero,101105c <___vfprintf_internal_r+0x17fc>
 1010294:	01000044 	movi	r4,1
 1010298:	98000416 	blt	r19,zero,10102ac <___vfprintf_internal_r+0xa4c>
 101029c:	d8c14c17 	ldw	r3,1328(sp)
 10102a0:	00bfdfc4 	movi	r2,-129
 10102a4:	1886703a 	and	r3,r3,r2
 10102a8:	d8c14c15 	stw	r3,1328(sp)
 10102ac:	8444b03a 	or	r2,r16,r17
 10102b0:	1002261e 	bne	r2,zero,1010b4c <___vfprintf_internal_r+0x12ec>
 10102b4:	9802251e 	bne	r19,zero,1010b4c <___vfprintf_internal_r+0x12ec>
 10102b8:	20803fcc 	andi	r2,r4,255
 10102bc:	10029b26 	beq	r2,zero,1010d2c <___vfprintf_internal_r+0x14cc>
 10102c0:	d8c01904 	addi	r3,sp,100
 10102c4:	dd000f04 	addi	r20,sp,60
 10102c8:	d8c14115 	stw	r3,1284(sp)
 10102cc:	d8c14117 	ldw	r3,1284(sp)
 10102d0:	dcc14515 	stw	r19,1300(sp)
 10102d4:	a0c5c83a 	sub	r2,r20,r3
 10102d8:	11c00a04 	addi	r7,r2,40
 10102dc:	99c0010e 	bge	r19,r7,10102e4 <___vfprintf_internal_r+0xa84>
 10102e0:	d9c14515 	stw	r7,1300(sp)
 10102e4:	dcc14615 	stw	r19,1304(sp)
 10102e8:	d8800407 	ldb	r2,16(sp)
 10102ec:	103e4c26 	beq	r2,zero,100fc20 <___vfprintf_internal_r+0x3c0>
 10102f0:	d8814517 	ldw	r2,1300(sp)
 10102f4:	10800044 	addi	r2,r2,1
 10102f8:	d8814515 	stw	r2,1300(sp)
 10102fc:	003e4806 	br	100fc20 <___vfprintf_internal_r+0x3c0>
 1010300:	d9814c17 	ldw	r6,1328(sp)
 1010304:	31800414 	ori	r6,r6,16
 1010308:	d9814c15 	stw	r6,1328(sp)
 101030c:	d8c14c17 	ldw	r3,1328(sp)
 1010310:	1880080c 	andi	r2,r3,32
 1010314:	1001271e 	bne	r2,zero,10107b4 <___vfprintf_internal_r+0xf54>
 1010318:	d9414c17 	ldw	r5,1328(sp)
 101031c:	2880040c 	andi	r2,r5,16
 1010320:	1002b61e 	bne	r2,zero,1010dfc <___vfprintf_internal_r+0x159c>
 1010324:	d9814c17 	ldw	r6,1328(sp)
 1010328:	3080100c 	andi	r2,r6,64
 101032c:	1002b326 	beq	r2,zero,1010dfc <___vfprintf_internal_r+0x159c>
 1010330:	3c00000b 	ldhu	r16,0(r7)
 1010334:	0009883a 	mov	r4,zero
 1010338:	39c00104 	addi	r7,r7,4
 101033c:	0023883a 	mov	r17,zero
 1010340:	d9c14015 	stw	r7,1280(sp)
 1010344:	d8000405 	stb	zero,16(sp)
 1010348:	003fd306 	br	1010298 <___vfprintf_internal_r+0xa38>
 101034c:	d9014c17 	ldw	r4,1328(sp)
 1010350:	21000414 	ori	r4,r4,16
 1010354:	d9014c15 	stw	r4,1328(sp)
 1010358:	d9414c17 	ldw	r5,1328(sp)
 101035c:	2880080c 	andi	r2,r5,32
 1010360:	1001081e 	bne	r2,zero,1010784 <___vfprintf_internal_r+0xf24>
 1010364:	d8c14c17 	ldw	r3,1328(sp)
 1010368:	1880040c 	andi	r2,r3,16
 101036c:	1002b01e 	bne	r2,zero,1010e30 <___vfprintf_internal_r+0x15d0>
 1010370:	d9014c17 	ldw	r4,1328(sp)
 1010374:	2080100c 	andi	r2,r4,64
 1010378:	1002ad26 	beq	r2,zero,1010e30 <___vfprintf_internal_r+0x15d0>
 101037c:	3c00000b 	ldhu	r16,0(r7)
 1010380:	01000044 	movi	r4,1
 1010384:	39c00104 	addi	r7,r7,4
 1010388:	0023883a 	mov	r17,zero
 101038c:	d9c14015 	stw	r7,1280(sp)
 1010390:	d8000405 	stb	zero,16(sp)
 1010394:	003fc006 	br	1010298 <___vfprintf_internal_r+0xa38>
 1010398:	d9014f17 	ldw	r4,1340(sp)
 101039c:	b00b883a 	mov	r5,r22
 10103a0:	d9800c04 	addi	r6,sp,48
 10103a4:	100f8080 	call	100f808 <__sprint_r>
 10103a8:	103ee51e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 10103ac:	dc800e17 	ldw	r18,56(sp)
 10103b0:	d8c01904 	addi	r3,sp,100
 10103b4:	d9814c17 	ldw	r6,1328(sp)
 10103b8:	3080004c 	andi	r2,r6,1
 10103bc:	1005003a 	cmpeq	r2,r2,zero
 10103c0:	103ea51e 	bne	r2,zero,100fe58 <___vfprintf_internal_r+0x5f8>
 10103c4:	00800044 	movi	r2,1
 10103c8:	dc400d17 	ldw	r17,52(sp)
 10103cc:	18800115 	stw	r2,4(r3)
 10103d0:	d8814917 	ldw	r2,1316(sp)
 10103d4:	94800044 	addi	r18,r18,1
 10103d8:	8c400044 	addi	r17,r17,1
 10103dc:	18800015 	stw	r2,0(r3)
 10103e0:	008001c4 	movi	r2,7
 10103e4:	dc800e15 	stw	r18,56(sp)
 10103e8:	dc400d15 	stw	r17,52(sp)
 10103ec:	14421e0e 	bge	r2,r17,1010c68 <___vfprintf_internal_r+0x1408>
 10103f0:	d9014f17 	ldw	r4,1340(sp)
 10103f4:	b00b883a 	mov	r5,r22
 10103f8:	d9800c04 	addi	r6,sp,48
 10103fc:	100f8080 	call	100f808 <__sprint_r>
 1010400:	103ecf1e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 1010404:	dc800e17 	ldw	r18,56(sp)
 1010408:	d8c01904 	addi	r3,sp,100
 101040c:	003e9206 	br	100fe58 <___vfprintf_internal_r+0x5f8>
 1010410:	d9014f17 	ldw	r4,1340(sp)
 1010414:	b00b883a 	mov	r5,r22
 1010418:	d9800c04 	addi	r6,sp,48
 101041c:	100f8080 	call	100f808 <__sprint_r>
 1010420:	103ec026 	beq	r2,zero,100ff24 <___vfprintf_internal_r+0x6c4>
 1010424:	003ec606 	br	100ff40 <___vfprintf_internal_r+0x6e0>
 1010428:	d9014f17 	ldw	r4,1340(sp)
 101042c:	b00b883a 	mov	r5,r22
 1010430:	d9800c04 	addi	r6,sp,48
 1010434:	d9c15115 	stw	r7,1348(sp)
 1010438:	100f8080 	call	100f808 <__sprint_r>
 101043c:	d9c15117 	ldw	r7,1348(sp)
 1010440:	103ebf1e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 1010444:	dc800e17 	ldw	r18,56(sp)
 1010448:	dc400d17 	ldw	r17,52(sp)
 101044c:	dd401904 	addi	r21,sp,100
 1010450:	003e7406 	br	100fe24 <___vfprintf_internal_r+0x5c4>
 1010454:	d9014f17 	ldw	r4,1340(sp)
 1010458:	b00b883a 	mov	r5,r22
 101045c:	d9800c04 	addi	r6,sp,48
 1010460:	d9c15115 	stw	r7,1348(sp)
 1010464:	100f8080 	call	100f808 <__sprint_r>
 1010468:	d9c15117 	ldw	r7,1348(sp)
 101046c:	103eb41e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 1010470:	dd401904 	addi	r21,sp,100
 1010474:	003d6d06 	br	100fa2c <___vfprintf_internal_r+0x1cc>
 1010478:	d9014f17 	ldw	r4,1340(sp)
 101047c:	b00b883a 	mov	r5,r22
 1010480:	d9800c04 	addi	r6,sp,48
 1010484:	d9c15115 	stw	r7,1348(sp)
 1010488:	100f8080 	call	100f808 <__sprint_r>
 101048c:	d9c15117 	ldw	r7,1348(sp)
 1010490:	103eab1e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 1010494:	dc800e17 	ldw	r18,56(sp)
 1010498:	dc400d17 	ldw	r17,52(sp)
 101049c:	dd401904 	addi	r21,sp,100
 10104a0:	003e3406 	br	100fd74 <___vfprintf_internal_r+0x514>
 10104a4:	d9014f17 	ldw	r4,1340(sp)
 10104a8:	b00b883a 	mov	r5,r22
 10104ac:	d9800c04 	addi	r6,sp,48
 10104b0:	d9c15115 	stw	r7,1348(sp)
 10104b4:	100f8080 	call	100f808 <__sprint_r>
 10104b8:	d9c15117 	ldw	r7,1348(sp)
 10104bc:	103ea01e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 10104c0:	dc800e17 	ldw	r18,56(sp)
 10104c4:	dc400d17 	ldw	r17,52(sp)
 10104c8:	dd401904 	addi	r21,sp,100
 10104cc:	003e1c06 	br	100fd40 <___vfprintf_internal_r+0x4e0>
 10104d0:	d9014f17 	ldw	r4,1340(sp)
 10104d4:	b00b883a 	mov	r5,r22
 10104d8:	d9800c04 	addi	r6,sp,48
 10104dc:	d9c15115 	stw	r7,1348(sp)
 10104e0:	100f8080 	call	100f808 <__sprint_r>
 10104e4:	d9c15117 	ldw	r7,1348(sp)
 10104e8:	103e951e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 10104ec:	dc800e17 	ldw	r18,56(sp)
 10104f0:	dc400d17 	ldw	r17,52(sp)
 10104f4:	dd401904 	addi	r21,sp,100
 10104f8:	003e0406 	br	100fd0c <___vfprintf_internal_r+0x4ac>
 10104fc:	d9000517 	ldw	r4,20(sp)
 1010500:	0102520e 	bge	zero,r4,1010e4c <___vfprintf_internal_r+0x15ec>
 1010504:	d9814717 	ldw	r6,1308(sp)
 1010508:	21807a16 	blt	r4,r6,10106f4 <___vfprintf_internal_r+0xe94>
 101050c:	d8814117 	ldw	r2,1284(sp)
 1010510:	91a5883a 	add	r18,r18,r6
 1010514:	8c400044 	addi	r17,r17,1
 1010518:	a8800015 	stw	r2,0(r21)
 101051c:	008001c4 	movi	r2,7
 1010520:	a9800115 	stw	r6,4(r21)
 1010524:	dc800e15 	stw	r18,56(sp)
 1010528:	dc400d15 	stw	r17,52(sp)
 101052c:	1442f616 	blt	r2,r17,1011108 <___vfprintf_internal_r+0x18a8>
 1010530:	a8c00204 	addi	r3,r21,8
 1010534:	d9414717 	ldw	r5,1308(sp)
 1010538:	2161c83a 	sub	r16,r4,r5
 101053c:	043f9d0e 	bge	zero,r16,10103b4 <___vfprintf_internal_r+0xb54>
 1010540:	00800404 	movi	r2,16
 1010544:	1402130e 	bge	r2,r16,1010d94 <___vfprintf_internal_r+0x1534>
 1010548:	dc400d17 	ldw	r17,52(sp)
 101054c:	1027883a 	mov	r19,r2
 1010550:	070040b4 	movhi	fp,258
 1010554:	e716ce84 	addi	fp,fp,23354
 1010558:	050001c4 	movi	r20,7
 101055c:	00000306 	br	101056c <___vfprintf_internal_r+0xd0c>
 1010560:	18c00204 	addi	r3,r3,8
 1010564:	843ffc04 	addi	r16,r16,-16
 1010568:	9c020d0e 	bge	r19,r16,1010da0 <___vfprintf_internal_r+0x1540>
 101056c:	94800404 	addi	r18,r18,16
 1010570:	8c400044 	addi	r17,r17,1
 1010574:	1f000015 	stw	fp,0(r3)
 1010578:	1cc00115 	stw	r19,4(r3)
 101057c:	dc800e15 	stw	r18,56(sp)
 1010580:	dc400d15 	stw	r17,52(sp)
 1010584:	a47ff60e 	bge	r20,r17,1010560 <___vfprintf_internal_r+0xd00>
 1010588:	d9014f17 	ldw	r4,1340(sp)
 101058c:	b00b883a 	mov	r5,r22
 1010590:	d9800c04 	addi	r6,sp,48
 1010594:	100f8080 	call	100f808 <__sprint_r>
 1010598:	103e691e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 101059c:	dc800e17 	ldw	r18,56(sp)
 10105a0:	dc400d17 	ldw	r17,52(sp)
 10105a4:	d8c01904 	addi	r3,sp,100
 10105a8:	003fee06 	br	1010564 <___vfprintf_internal_r+0xd04>
 10105ac:	d8814717 	ldw	r2,1308(sp)
 10105b0:	143fffc4 	addi	r16,r2,-1
 10105b4:	043e970e 	bge	zero,r16,1010014 <___vfprintf_internal_r+0x7b4>
 10105b8:	00800404 	movi	r2,16
 10105bc:	1400180e 	bge	r2,r16,1010620 <___vfprintf_internal_r+0xdc0>
 10105c0:	1029883a 	mov	r20,r2
 10105c4:	070040b4 	movhi	fp,258
 10105c8:	e716ce84 	addi	fp,fp,23354
 10105cc:	054001c4 	movi	r21,7
 10105d0:	00000306 	br	10105e0 <___vfprintf_internal_r+0xd80>
 10105d4:	9cc00204 	addi	r19,r19,8
 10105d8:	843ffc04 	addi	r16,r16,-16
 10105dc:	a400120e 	bge	r20,r16,1010628 <___vfprintf_internal_r+0xdc8>
 10105e0:	94800404 	addi	r18,r18,16
 10105e4:	8c400044 	addi	r17,r17,1
 10105e8:	9f000015 	stw	fp,0(r19)
 10105ec:	9d000115 	stw	r20,4(r19)
 10105f0:	dc800e15 	stw	r18,56(sp)
 10105f4:	dc400d15 	stw	r17,52(sp)
 10105f8:	ac7ff60e 	bge	r21,r17,10105d4 <___vfprintf_internal_r+0xd74>
 10105fc:	d9014f17 	ldw	r4,1340(sp)
 1010600:	b00b883a 	mov	r5,r22
 1010604:	d9800c04 	addi	r6,sp,48
 1010608:	100f8080 	call	100f808 <__sprint_r>
 101060c:	103e4c1e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 1010610:	dc800e17 	ldw	r18,56(sp)
 1010614:	dc400d17 	ldw	r17,52(sp)
 1010618:	dcc01904 	addi	r19,sp,100
 101061c:	003fee06 	br	10105d8 <___vfprintf_internal_r+0xd78>
 1010620:	070040b4 	movhi	fp,258
 1010624:	e716ce84 	addi	fp,fp,23354
 1010628:	9425883a 	add	r18,r18,r16
 101062c:	8c400044 	addi	r17,r17,1
 1010630:	008001c4 	movi	r2,7
 1010634:	9f000015 	stw	fp,0(r19)
 1010638:	9c000115 	stw	r16,4(r19)
 101063c:	dc800e15 	stw	r18,56(sp)
 1010640:	dc400d15 	stw	r17,52(sp)
 1010644:	147e720e 	bge	r2,r17,1010010 <___vfprintf_internal_r+0x7b0>
 1010648:	d9014f17 	ldw	r4,1340(sp)
 101064c:	b00b883a 	mov	r5,r22
 1010650:	d9800c04 	addi	r6,sp,48
 1010654:	100f8080 	call	100f808 <__sprint_r>
 1010658:	103e391e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 101065c:	dc800e17 	ldw	r18,56(sp)
 1010660:	dc400d17 	ldw	r17,52(sp)
 1010664:	dcc01904 	addi	r19,sp,100
 1010668:	003e6a06 	br	1010014 <___vfprintf_internal_r+0x7b4>
 101066c:	d9014f17 	ldw	r4,1340(sp)
 1010670:	b00b883a 	mov	r5,r22
 1010674:	d9800c04 	addi	r6,sp,48
 1010678:	d9c15115 	stw	r7,1348(sp)
 101067c:	100f8080 	call	100f808 <__sprint_r>
 1010680:	d9c15117 	ldw	r7,1348(sp)
 1010684:	103e2e1e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 1010688:	dc800e17 	ldw	r18,56(sp)
 101068c:	dc400d17 	ldw	r17,52(sp)
 1010690:	dd401904 	addi	r21,sp,100
 1010694:	003dba06 	br	100fd80 <___vfprintf_internal_r+0x520>
 1010698:	d9014f17 	ldw	r4,1340(sp)
 101069c:	b00b883a 	mov	r5,r22
 10106a0:	d9800c04 	addi	r6,sp,48
 10106a4:	100f8080 	call	100f808 <__sprint_r>
 10106a8:	103e251e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 10106ac:	dc800e17 	ldw	r18,56(sp)
 10106b0:	dc400d17 	ldw	r17,52(sp)
 10106b4:	dcc01904 	addi	r19,sp,100
 10106b8:	003e4206 	br	100ffc4 <___vfprintf_internal_r+0x764>
 10106bc:	d9014f17 	ldw	r4,1340(sp)
 10106c0:	b00b883a 	mov	r5,r22
 10106c4:	d9800c04 	addi	r6,sp,48
 10106c8:	100f8080 	call	100f808 <__sprint_r>
 10106cc:	103e1c1e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 10106d0:	dc800e17 	ldw	r18,56(sp)
 10106d4:	dc400d17 	ldw	r17,52(sp)
 10106d8:	d8c01904 	addi	r3,sp,100
 10106dc:	003e2e06 	br	100ff98 <___vfprintf_internal_r+0x738>
 10106e0:	d9414c17 	ldw	r5,1328(sp)
 10106e4:	2880004c 	andi	r2,r5,1
 10106e8:	1005003a 	cmpeq	r2,r2,zero
 10106ec:	103dda1e 	bne	r2,zero,100fe58 <___vfprintf_internal_r+0x5f8>
 10106f0:	003e9f06 	br	1010170 <___vfprintf_internal_r+0x910>
 10106f4:	d8c14117 	ldw	r3,1284(sp)
 10106f8:	9125883a 	add	r18,r18,r4
 10106fc:	8c400044 	addi	r17,r17,1
 1010700:	008001c4 	movi	r2,7
 1010704:	a8c00015 	stw	r3,0(r21)
 1010708:	a9000115 	stw	r4,4(r21)
 101070c:	dc800e15 	stw	r18,56(sp)
 1010710:	dc400d15 	stw	r17,52(sp)
 1010714:	14426616 	blt	r2,r17,10110b0 <___vfprintf_internal_r+0x1850>
 1010718:	a8c00204 	addi	r3,r21,8
 101071c:	d9414917 	ldw	r5,1316(sp)
 1010720:	00800044 	movi	r2,1
 1010724:	94800044 	addi	r18,r18,1
 1010728:	8c400044 	addi	r17,r17,1
 101072c:	18800115 	stw	r2,4(r3)
 1010730:	008001c4 	movi	r2,7
 1010734:	19400015 	stw	r5,0(r3)
 1010738:	dc800e15 	stw	r18,56(sp)
 101073c:	dc400d15 	stw	r17,52(sp)
 1010740:	2021883a 	mov	r16,r4
 1010744:	14425016 	blt	r2,r17,1011088 <___vfprintf_internal_r+0x1828>
 1010748:	19400204 	addi	r5,r3,8
 101074c:	d9814717 	ldw	r6,1308(sp)
 1010750:	8c400044 	addi	r17,r17,1
 1010754:	dc400d15 	stw	r17,52(sp)
 1010758:	3107c83a 	sub	r3,r6,r4
 101075c:	d9014117 	ldw	r4,1284(sp)
 1010760:	90e5883a 	add	r18,r18,r3
 1010764:	28c00115 	stw	r3,4(r5)
 1010768:	8105883a 	add	r2,r16,r4
 101076c:	28800015 	stw	r2,0(r5)
 1010770:	008001c4 	movi	r2,7
 1010774:	dc800e15 	stw	r18,56(sp)
 1010778:	147f1d16 	blt	r2,r17,10103f0 <___vfprintf_internal_r+0xb90>
 101077c:	28c00204 	addi	r3,r5,8
 1010780:	003db506 	br	100fe58 <___vfprintf_internal_r+0x5f8>
 1010784:	3c000017 	ldw	r16,0(r7)
 1010788:	3c400117 	ldw	r17,4(r7)
 101078c:	39800204 	addi	r6,r7,8
 1010790:	01000044 	movi	r4,1
 1010794:	d9814015 	stw	r6,1280(sp)
 1010798:	d8000405 	stb	zero,16(sp)
 101079c:	003ebe06 	br	1010298 <___vfprintf_internal_r+0xa38>
 10107a0:	3c000017 	ldw	r16,0(r7)
 10107a4:	3c400117 	ldw	r17,4(r7)
 10107a8:	38800204 	addi	r2,r7,8
 10107ac:	d8814015 	stw	r2,1280(sp)
 10107b0:	003eb706 	br	1010290 <___vfprintf_internal_r+0xa30>
 10107b4:	3c000017 	ldw	r16,0(r7)
 10107b8:	3c400117 	ldw	r17,4(r7)
 10107bc:	39000204 	addi	r4,r7,8
 10107c0:	d9014015 	stw	r4,1280(sp)
 10107c4:	0009883a 	mov	r4,zero
 10107c8:	d8000405 	stb	zero,16(sp)
 10107cc:	003eb206 	br	1010298 <___vfprintf_internal_r+0xa38>
 10107d0:	38c00017 	ldw	r3,0(r7)
 10107d4:	39c00104 	addi	r7,r7,4
 10107d8:	d8c14a15 	stw	r3,1320(sp)
 10107dc:	1800d10e 	bge	r3,zero,1010b24 <___vfprintf_internal_r+0x12c4>
 10107e0:	00c7c83a 	sub	r3,zero,r3
 10107e4:	d8c14a15 	stw	r3,1320(sp)
 10107e8:	d9014c17 	ldw	r4,1328(sp)
 10107ec:	b8c00007 	ldb	r3,0(r23)
 10107f0:	21000114 	ori	r4,r4,4
 10107f4:	d9014c15 	stw	r4,1328(sp)
 10107f8:	003c9806 	br	100fa5c <___vfprintf_internal_r+0x1fc>
 10107fc:	d9814c17 	ldw	r6,1328(sp)
 1010800:	3080080c 	andi	r2,r6,32
 1010804:	1001f026 	beq	r2,zero,1010fc8 <___vfprintf_internal_r+0x1768>
 1010808:	d9014b17 	ldw	r4,1324(sp)
 101080c:	38800017 	ldw	r2,0(r7)
 1010810:	39c00104 	addi	r7,r7,4
 1010814:	d9c14015 	stw	r7,1280(sp)
 1010818:	2007d7fa 	srai	r3,r4,31
 101081c:	d9c14017 	ldw	r7,1280(sp)
 1010820:	11000015 	stw	r4,0(r2)
 1010824:	10c00115 	stw	r3,4(r2)
 1010828:	003c6906 	br	100f9d0 <___vfprintf_internal_r+0x170>
 101082c:	b8c00007 	ldb	r3,0(r23)
 1010830:	00801b04 	movi	r2,108
 1010834:	18824f26 	beq	r3,r2,1011174 <___vfprintf_internal_r+0x1914>
 1010838:	d9414c17 	ldw	r5,1328(sp)
 101083c:	29400414 	ori	r5,r5,16
 1010840:	d9414c15 	stw	r5,1328(sp)
 1010844:	003c8506 	br	100fa5c <___vfprintf_internal_r+0x1fc>
 1010848:	d9814c17 	ldw	r6,1328(sp)
 101084c:	b8c00007 	ldb	r3,0(r23)
 1010850:	31800814 	ori	r6,r6,32
 1010854:	d9814c15 	stw	r6,1328(sp)
 1010858:	003c8006 	br	100fa5c <___vfprintf_internal_r+0x1fc>
 101085c:	d8814c17 	ldw	r2,1328(sp)
 1010860:	3c000017 	ldw	r16,0(r7)
 1010864:	00c01e04 	movi	r3,120
 1010868:	10800094 	ori	r2,r2,2
 101086c:	d8814c15 	stw	r2,1328(sp)
 1010870:	39c00104 	addi	r7,r7,4
 1010874:	014040b4 	movhi	r5,258
 1010878:	2956b704 	addi	r5,r5,23260
 101087c:	00800c04 	movi	r2,48
 1010880:	0023883a 	mov	r17,zero
 1010884:	01000084 	movi	r4,2
 1010888:	d9c14015 	stw	r7,1280(sp)
 101088c:	d8c14d15 	stw	r3,1332(sp)
 1010890:	d9414415 	stw	r5,1296(sp)
 1010894:	d8800445 	stb	r2,17(sp)
 1010898:	d8c00485 	stb	r3,18(sp)
 101089c:	d8000405 	stb	zero,16(sp)
 10108a0:	003e7d06 	br	1010298 <___vfprintf_internal_r+0xa38>
 10108a4:	d8814c17 	ldw	r2,1328(sp)
 10108a8:	b8c00007 	ldb	r3,0(r23)
 10108ac:	10801014 	ori	r2,r2,64
 10108b0:	d8814c15 	stw	r2,1328(sp)
 10108b4:	003c6906 	br	100fa5c <___vfprintf_internal_r+0x1fc>
 10108b8:	d9414c17 	ldw	r5,1328(sp)
 10108bc:	2880020c 	andi	r2,r5,8
 10108c0:	1001df26 	beq	r2,zero,1011040 <___vfprintf_internal_r+0x17e0>
 10108c4:	39800017 	ldw	r6,0(r7)
 10108c8:	38800204 	addi	r2,r7,8
 10108cc:	d8814015 	stw	r2,1280(sp)
 10108d0:	d9814215 	stw	r6,1288(sp)
 10108d4:	39c00117 	ldw	r7,4(r7)
 10108d8:	d9c14315 	stw	r7,1292(sp)
 10108dc:	d9014217 	ldw	r4,1288(sp)
 10108e0:	d9414317 	ldw	r5,1292(sp)
 10108e4:	10159b00 	call	10159b0 <__isinfd>
 10108e8:	10021726 	beq	r2,zero,1011148 <___vfprintf_internal_r+0x18e8>
 10108ec:	d9014217 	ldw	r4,1288(sp)
 10108f0:	d9414317 	ldw	r5,1292(sp)
 10108f4:	000d883a 	mov	r6,zero
 10108f8:	000f883a 	mov	r7,zero
 10108fc:	1017ad40 	call	1017ad4 <__ltdf2>
 1010900:	1002ca16 	blt	r2,zero,101142c <___vfprintf_internal_r+0x1bcc>
 1010904:	d9414d17 	ldw	r5,1332(sp)
 1010908:	008011c4 	movi	r2,71
 101090c:	11420a16 	blt	r2,r5,1011138 <___vfprintf_internal_r+0x18d8>
 1010910:	018040b4 	movhi	r6,258
 1010914:	3196bc04 	addi	r6,r6,23280
 1010918:	d9814115 	stw	r6,1284(sp)
 101091c:	d9014c17 	ldw	r4,1328(sp)
 1010920:	00c000c4 	movi	r3,3
 1010924:	00bfdfc4 	movi	r2,-129
 1010928:	2088703a 	and	r4,r4,r2
 101092c:	180f883a 	mov	r7,r3
 1010930:	d8c14515 	stw	r3,1300(sp)
 1010934:	d9014c15 	stw	r4,1328(sp)
 1010938:	d8014615 	stw	zero,1304(sp)
 101093c:	003e6a06 	br	10102e8 <___vfprintf_internal_r+0xa88>
 1010940:	38800017 	ldw	r2,0(r7)
 1010944:	00c00044 	movi	r3,1
 1010948:	39c00104 	addi	r7,r7,4
 101094c:	d9c14015 	stw	r7,1280(sp)
 1010950:	d9000f04 	addi	r4,sp,60
 1010954:	180f883a 	mov	r7,r3
 1010958:	d8c14515 	stw	r3,1300(sp)
 101095c:	d9014115 	stw	r4,1284(sp)
 1010960:	d8800f05 	stb	r2,60(sp)
 1010964:	d8000405 	stb	zero,16(sp)
 1010968:	003cac06 	br	100fc1c <___vfprintf_internal_r+0x3bc>
 101096c:	014040b4 	movhi	r5,258
 1010970:	2956c204 	addi	r5,r5,23304
 1010974:	d9414415 	stw	r5,1296(sp)
 1010978:	d9814c17 	ldw	r6,1328(sp)
 101097c:	3080080c 	andi	r2,r6,32
 1010980:	1000f926 	beq	r2,zero,1010d68 <___vfprintf_internal_r+0x1508>
 1010984:	3c000017 	ldw	r16,0(r7)
 1010988:	3c400117 	ldw	r17,4(r7)
 101098c:	38800204 	addi	r2,r7,8
 1010990:	d8814015 	stw	r2,1280(sp)
 1010994:	d9414c17 	ldw	r5,1328(sp)
 1010998:	2880004c 	andi	r2,r5,1
 101099c:	1005003a 	cmpeq	r2,r2,zero
 10109a0:	1000b31e 	bne	r2,zero,1010c70 <___vfprintf_internal_r+0x1410>
 10109a4:	8444b03a 	or	r2,r16,r17
 10109a8:	1000b126 	beq	r2,zero,1010c70 <___vfprintf_internal_r+0x1410>
 10109ac:	d9814d17 	ldw	r6,1332(sp)
 10109b0:	29400094 	ori	r5,r5,2
 10109b4:	00800c04 	movi	r2,48
 10109b8:	01000084 	movi	r4,2
 10109bc:	d9414c15 	stw	r5,1328(sp)
 10109c0:	d8800445 	stb	r2,17(sp)
 10109c4:	d9800485 	stb	r6,18(sp)
 10109c8:	d8000405 	stb	zero,16(sp)
 10109cc:	003e3206 	br	1010298 <___vfprintf_internal_r+0xa38>
 10109d0:	018040b4 	movhi	r6,258
 10109d4:	3196b704 	addi	r6,r6,23260
 10109d8:	d9814415 	stw	r6,1296(sp)
 10109dc:	003fe606 	br	1010978 <___vfprintf_internal_r+0x1118>
 10109e0:	00800ac4 	movi	r2,43
 10109e4:	d8800405 	stb	r2,16(sp)
 10109e8:	b8c00007 	ldb	r3,0(r23)
 10109ec:	003c1b06 	br	100fa5c <___vfprintf_internal_r+0x1fc>
 10109f0:	d8814c17 	ldw	r2,1328(sp)
 10109f4:	b8c00007 	ldb	r3,0(r23)
 10109f8:	10800054 	ori	r2,r2,1
 10109fc:	d8814c15 	stw	r2,1328(sp)
 1010a00:	003c1606 	br	100fa5c <___vfprintf_internal_r+0x1fc>
 1010a04:	d8800407 	ldb	r2,16(sp)
 1010a08:	1000461e 	bne	r2,zero,1010b24 <___vfprintf_internal_r+0x12c4>
 1010a0c:	00800804 	movi	r2,32
 1010a10:	d8800405 	stb	r2,16(sp)
 1010a14:	b8c00007 	ldb	r3,0(r23)
 1010a18:	003c1006 	br	100fa5c <___vfprintf_internal_r+0x1fc>
 1010a1c:	d9814c17 	ldw	r6,1328(sp)
 1010a20:	b8c00007 	ldb	r3,0(r23)
 1010a24:	31800214 	ori	r6,r6,8
 1010a28:	d9814c15 	stw	r6,1328(sp)
 1010a2c:	003c0b06 	br	100fa5c <___vfprintf_internal_r+0x1fc>
 1010a30:	0007883a 	mov	r3,zero
 1010a34:	01000244 	movi	r4,9
 1010a38:	188002a4 	muli	r2,r3,10
 1010a3c:	b8c00007 	ldb	r3,0(r23)
 1010a40:	d9814d17 	ldw	r6,1332(sp)
 1010a44:	bdc00044 	addi	r23,r23,1
 1010a48:	d8c14d15 	stw	r3,1332(sp)
 1010a4c:	d9414d17 	ldw	r5,1332(sp)
 1010a50:	3085883a 	add	r2,r6,r2
 1010a54:	10fff404 	addi	r3,r2,-48
 1010a58:	28bff404 	addi	r2,r5,-48
 1010a5c:	20bff62e 	bgeu	r4,r2,1010a38 <___vfprintf_internal_r+0x11d8>
 1010a60:	d8c14a15 	stw	r3,1320(sp)
 1010a64:	003bff06 	br	100fa64 <___vfprintf_internal_r+0x204>
 1010a68:	d9414c17 	ldw	r5,1328(sp)
 1010a6c:	b8c00007 	ldb	r3,0(r23)
 1010a70:	29402014 	ori	r5,r5,128
 1010a74:	d9414c15 	stw	r5,1328(sp)
 1010a78:	003bf806 	br	100fa5c <___vfprintf_internal_r+0x1fc>
 1010a7c:	b8c00007 	ldb	r3,0(r23)
 1010a80:	00800a84 	movi	r2,42
 1010a84:	bdc00044 	addi	r23,r23,1
 1010a88:	18831526 	beq	r3,r2,10116e0 <___vfprintf_internal_r+0x1e80>
 1010a8c:	d8c14d15 	stw	r3,1332(sp)
 1010a90:	18bff404 	addi	r2,r3,-48
 1010a94:	00c00244 	movi	r3,9
 1010a98:	18827836 	bltu	r3,r2,101147c <___vfprintf_internal_r+0x1c1c>
 1010a9c:	000d883a 	mov	r6,zero
 1010aa0:	308002a4 	muli	r2,r6,10
 1010aa4:	b9800007 	ldb	r6,0(r23)
 1010aa8:	d9414d17 	ldw	r5,1332(sp)
 1010aac:	bdc00044 	addi	r23,r23,1
 1010ab0:	d9814d15 	stw	r6,1332(sp)
 1010ab4:	d9014d17 	ldw	r4,1332(sp)
 1010ab8:	1145883a 	add	r2,r2,r5
 1010abc:	11bff404 	addi	r6,r2,-48
 1010ac0:	20bff404 	addi	r2,r4,-48
 1010ac4:	18bff62e 	bgeu	r3,r2,1010aa0 <___vfprintf_internal_r+0x1240>
 1010ac8:	3027883a 	mov	r19,r6
 1010acc:	303be50e 	bge	r6,zero,100fa64 <___vfprintf_internal_r+0x204>
 1010ad0:	04ffffc4 	movi	r19,-1
 1010ad4:	003be306 	br	100fa64 <___vfprintf_internal_r+0x204>
 1010ad8:	d8000405 	stb	zero,16(sp)
 1010adc:	39800017 	ldw	r6,0(r7)
 1010ae0:	39c00104 	addi	r7,r7,4
 1010ae4:	d9c14015 	stw	r7,1280(sp)
 1010ae8:	d9814115 	stw	r6,1284(sp)
 1010aec:	3001c926 	beq	r6,zero,1011214 <___vfprintf_internal_r+0x19b4>
 1010af0:	98000e16 	blt	r19,zero,1010b2c <___vfprintf_internal_r+0x12cc>
 1010af4:	d9014117 	ldw	r4,1284(sp)
 1010af8:	000b883a 	mov	r5,zero
 1010afc:	980d883a 	mov	r6,r19
 1010b00:	100ea140 	call	100ea14 <memchr>
 1010b04:	10025926 	beq	r2,zero,101146c <___vfprintf_internal_r+0x1c0c>
 1010b08:	d8c14117 	ldw	r3,1284(sp)
 1010b0c:	10cfc83a 	sub	r7,r2,r3
 1010b10:	99c19e16 	blt	r19,r7,101118c <___vfprintf_internal_r+0x192c>
 1010b14:	d9c14515 	stw	r7,1300(sp)
 1010b18:	38000916 	blt	r7,zero,1010b40 <___vfprintf_internal_r+0x12e0>
 1010b1c:	d8014615 	stw	zero,1304(sp)
 1010b20:	003df106 	br	10102e8 <___vfprintf_internal_r+0xa88>
 1010b24:	b8c00007 	ldb	r3,0(r23)
 1010b28:	003bcc06 	br	100fa5c <___vfprintf_internal_r+0x1fc>
 1010b2c:	d9014117 	ldw	r4,1284(sp)
 1010b30:	100f4040 	call	100f404 <strlen>
 1010b34:	d8814515 	stw	r2,1300(sp)
 1010b38:	100f883a 	mov	r7,r2
 1010b3c:	103ff70e 	bge	r2,zero,1010b1c <___vfprintf_internal_r+0x12bc>
 1010b40:	d8014515 	stw	zero,1300(sp)
 1010b44:	d8014615 	stw	zero,1304(sp)
 1010b48:	003de706 	br	10102e8 <___vfprintf_internal_r+0xa88>
 1010b4c:	20c03fcc 	andi	r3,r4,255
 1010b50:	00800044 	movi	r2,1
 1010b54:	18802d26 	beq	r3,r2,1010c0c <___vfprintf_internal_r+0x13ac>
 1010b58:	18800e36 	bltu	r3,r2,1010b94 <___vfprintf_internal_r+0x1334>
 1010b5c:	00800084 	movi	r2,2
 1010b60:	1880fa26 	beq	r3,r2,1010f4c <___vfprintf_internal_r+0x16ec>
 1010b64:	010040b4 	movhi	r4,258
 1010b68:	2116c704 	addi	r4,r4,23324
 1010b6c:	100f4040 	call	100f404 <strlen>
 1010b70:	100f883a 	mov	r7,r2
 1010b74:	dcc14515 	stw	r19,1300(sp)
 1010b78:	9880010e 	bge	r19,r2,1010b80 <___vfprintf_internal_r+0x1320>
 1010b7c:	d8814515 	stw	r2,1300(sp)
 1010b80:	008040b4 	movhi	r2,258
 1010b84:	1096c704 	addi	r2,r2,23324
 1010b88:	dcc14615 	stw	r19,1304(sp)
 1010b8c:	d8814115 	stw	r2,1284(sp)
 1010b90:	003dd506 	br	10102e8 <___vfprintf_internal_r+0xa88>
 1010b94:	d9401904 	addi	r5,sp,100
 1010b98:	dd000f04 	addi	r20,sp,60
 1010b9c:	d9414115 	stw	r5,1284(sp)
 1010ba0:	880a977a 	slli	r5,r17,29
 1010ba4:	d9814117 	ldw	r6,1284(sp)
 1010ba8:	8004d0fa 	srli	r2,r16,3
 1010bac:	8806d0fa 	srli	r3,r17,3
 1010bb0:	810001cc 	andi	r4,r16,7
 1010bb4:	2884b03a 	or	r2,r5,r2
 1010bb8:	31bfffc4 	addi	r6,r6,-1
 1010bbc:	21000c04 	addi	r4,r4,48
 1010bc0:	d9814115 	stw	r6,1284(sp)
 1010bc4:	10cab03a 	or	r5,r2,r3
 1010bc8:	31000005 	stb	r4,0(r6)
 1010bcc:	1021883a 	mov	r16,r2
 1010bd0:	1823883a 	mov	r17,r3
 1010bd4:	283ff21e 	bne	r5,zero,1010ba0 <___vfprintf_internal_r+0x1340>
 1010bd8:	d8c14c17 	ldw	r3,1328(sp)
 1010bdc:	1880004c 	andi	r2,r3,1
 1010be0:	1005003a 	cmpeq	r2,r2,zero
 1010be4:	103db91e 	bne	r2,zero,10102cc <___vfprintf_internal_r+0xa6c>
 1010be8:	20803fcc 	andi	r2,r4,255
 1010bec:	1080201c 	xori	r2,r2,128
 1010bf0:	10bfe004 	addi	r2,r2,-128
 1010bf4:	00c00c04 	movi	r3,48
 1010bf8:	10fdb426 	beq	r2,r3,10102cc <___vfprintf_internal_r+0xa6c>
 1010bfc:	31bfffc4 	addi	r6,r6,-1
 1010c00:	d9814115 	stw	r6,1284(sp)
 1010c04:	30c00005 	stb	r3,0(r6)
 1010c08:	003db006 	br	10102cc <___vfprintf_internal_r+0xa6c>
 1010c0c:	88800068 	cmpgeui	r2,r17,1
 1010c10:	10002c1e 	bne	r2,zero,1010cc4 <___vfprintf_internal_r+0x1464>
 1010c14:	8800021e 	bne	r17,zero,1010c20 <___vfprintf_internal_r+0x13c0>
 1010c18:	00800244 	movi	r2,9
 1010c1c:	14002936 	bltu	r2,r16,1010cc4 <___vfprintf_internal_r+0x1464>
 1010c20:	d90018c4 	addi	r4,sp,99
 1010c24:	dd000f04 	addi	r20,sp,60
 1010c28:	d9014115 	stw	r4,1284(sp)
 1010c2c:	d9014117 	ldw	r4,1284(sp)
 1010c30:	80800c04 	addi	r2,r16,48
 1010c34:	20800005 	stb	r2,0(r4)
 1010c38:	003da406 	br	10102cc <___vfprintf_internal_r+0xa6c>
 1010c3c:	dc400d17 	ldw	r17,52(sp)
 1010c40:	070040b4 	movhi	fp,258
 1010c44:	e716ce84 	addi	fp,fp,23354
 1010c48:	9425883a 	add	r18,r18,r16
 1010c4c:	8c400044 	addi	r17,r17,1
 1010c50:	008001c4 	movi	r2,7
 1010c54:	1f000015 	stw	fp,0(r3)
 1010c58:	1c000115 	stw	r16,4(r3)
 1010c5c:	dc800e15 	stw	r18,56(sp)
 1010c60:	dc400d15 	stw	r17,52(sp)
 1010c64:	147de216 	blt	r2,r17,10103f0 <___vfprintf_internal_r+0xb90>
 1010c68:	18c00204 	addi	r3,r3,8
 1010c6c:	003c7a06 	br	100fe58 <___vfprintf_internal_r+0x5f8>
 1010c70:	01000084 	movi	r4,2
 1010c74:	d8000405 	stb	zero,16(sp)
 1010c78:	003d8706 	br	1010298 <___vfprintf_internal_r+0xa38>
 1010c7c:	d9814c17 	ldw	r6,1328(sp)
 1010c80:	30c4703a 	and	r2,r6,r3
 1010c84:	1005003a 	cmpeq	r2,r2,zero
 1010c88:	103cb926 	beq	r2,zero,100ff70 <___vfprintf_internal_r+0x710>
 1010c8c:	d9014117 	ldw	r4,1284(sp)
 1010c90:	94800044 	addi	r18,r18,1
 1010c94:	8c400044 	addi	r17,r17,1
 1010c98:	008001c4 	movi	r2,7
 1010c9c:	a9000015 	stw	r4,0(r21)
 1010ca0:	a8c00115 	stw	r3,4(r21)
 1010ca4:	dc800e15 	stw	r18,56(sp)
 1010ca8:	dc400d15 	stw	r17,52(sp)
 1010cac:	147e6616 	blt	r2,r17,1010648 <___vfprintf_internal_r+0xde8>
 1010cb0:	acc00204 	addi	r19,r21,8
 1010cb4:	003cd706 	br	1010014 <___vfprintf_internal_r+0x7b4>
 1010cb8:	070040b4 	movhi	fp,258
 1010cbc:	e716ce84 	addi	fp,fp,23354
 1010cc0:	003c4f06 	br	100fe00 <___vfprintf_internal_r+0x5a0>
 1010cc4:	dd000f04 	addi	r20,sp,60
 1010cc8:	dc801904 	addi	r18,sp,100
 1010ccc:	8009883a 	mov	r4,r16
 1010cd0:	880b883a 	mov	r5,r17
 1010cd4:	01800284 	movi	r6,10
 1010cd8:	000f883a 	mov	r7,zero
 1010cdc:	10167e40 	call	10167e4 <__umoddi3>
 1010ce0:	12000c04 	addi	r8,r2,48
 1010ce4:	94bfffc4 	addi	r18,r18,-1
 1010ce8:	8009883a 	mov	r4,r16
 1010cec:	880b883a 	mov	r5,r17
 1010cf0:	01800284 	movi	r6,10
 1010cf4:	000f883a 	mov	r7,zero
 1010cf8:	92000005 	stb	r8,0(r18)
 1010cfc:	10162080 	call	1016208 <__udivdi3>
 1010d00:	1009883a 	mov	r4,r2
 1010d04:	1021883a 	mov	r16,r2
 1010d08:	18800068 	cmpgeui	r2,r3,1
 1010d0c:	1823883a 	mov	r17,r3
 1010d10:	103fee1e 	bne	r2,zero,1010ccc <___vfprintf_internal_r+0x146c>
 1010d14:	1800021e 	bne	r3,zero,1010d20 <___vfprintf_internal_r+0x14c0>
 1010d18:	00800244 	movi	r2,9
 1010d1c:	113feb36 	bltu	r2,r4,1010ccc <___vfprintf_internal_r+0x146c>
 1010d20:	94bfffc4 	addi	r18,r18,-1
 1010d24:	dc814115 	stw	r18,1284(sp)
 1010d28:	003fc006 	br	1010c2c <___vfprintf_internal_r+0x13cc>
 1010d2c:	d9014c17 	ldw	r4,1328(sp)
 1010d30:	2080004c 	andi	r2,r4,1
 1010d34:	10009a1e 	bne	r2,zero,1010fa0 <___vfprintf_internal_r+0x1740>
 1010d38:	d9401904 	addi	r5,sp,100
 1010d3c:	dd000f04 	addi	r20,sp,60
 1010d40:	d9414115 	stw	r5,1284(sp)
 1010d44:	003d6106 	br	10102cc <___vfprintf_internal_r+0xa6c>
 1010d48:	d9014f17 	ldw	r4,1340(sp)
 1010d4c:	b00b883a 	mov	r5,r22
 1010d50:	d9800c04 	addi	r6,sp,48
 1010d54:	100f8080 	call	100f808 <__sprint_r>
 1010d58:	103c791e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 1010d5c:	dc800e17 	ldw	r18,56(sp)
 1010d60:	d8c01904 	addi	r3,sp,100
 1010d64:	003cff06 	br	1010164 <___vfprintf_internal_r+0x904>
 1010d68:	d8c14c17 	ldw	r3,1328(sp)
 1010d6c:	1880040c 	andi	r2,r3,16
 1010d70:	1000711e 	bne	r2,zero,1010f38 <___vfprintf_internal_r+0x16d8>
 1010d74:	d9014c17 	ldw	r4,1328(sp)
 1010d78:	2080100c 	andi	r2,r4,64
 1010d7c:	10006e26 	beq	r2,zero,1010f38 <___vfprintf_internal_r+0x16d8>
 1010d80:	3c00000b 	ldhu	r16,0(r7)
 1010d84:	0023883a 	mov	r17,zero
 1010d88:	39c00104 	addi	r7,r7,4
 1010d8c:	d9c14015 	stw	r7,1280(sp)
 1010d90:	003f0006 	br	1010994 <___vfprintf_internal_r+0x1134>
 1010d94:	dc400d17 	ldw	r17,52(sp)
 1010d98:	070040b4 	movhi	fp,258
 1010d9c:	e716ce84 	addi	fp,fp,23354
 1010da0:	9425883a 	add	r18,r18,r16
 1010da4:	8c400044 	addi	r17,r17,1
 1010da8:	008001c4 	movi	r2,7
 1010dac:	1f000015 	stw	fp,0(r3)
 1010db0:	1c000115 	stw	r16,4(r3)
 1010db4:	dc800e15 	stw	r18,56(sp)
 1010db8:	dc400d15 	stw	r17,52(sp)
 1010dbc:	147d7616 	blt	r2,r17,1010398 <___vfprintf_internal_r+0xb38>
 1010dc0:	18c00204 	addi	r3,r3,8
 1010dc4:	003d7b06 	br	10103b4 <___vfprintf_internal_r+0xb54>
 1010dc8:	dc800e17 	ldw	r18,56(sp)
 1010dcc:	dc400d17 	ldw	r17,52(sp)
 1010dd0:	070040b4 	movhi	fp,258
 1010dd4:	e716d284 	addi	fp,fp,23370
 1010dd8:	003bc006 	br	100fcdc <___vfprintf_internal_r+0x47c>
 1010ddc:	d9014f17 	ldw	r4,1340(sp)
 1010de0:	b00b883a 	mov	r5,r22
 1010de4:	d9800c04 	addi	r6,sp,48
 1010de8:	100f8080 	call	100f808 <__sprint_r>
 1010dec:	103c541e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 1010df0:	dc800e17 	ldw	r18,56(sp)
 1010df4:	d8c01904 	addi	r3,sp,100
 1010df8:	003ce906 	br	10101a0 <___vfprintf_internal_r+0x940>
 1010dfc:	3c000017 	ldw	r16,0(r7)
 1010e00:	0009883a 	mov	r4,zero
 1010e04:	39c00104 	addi	r7,r7,4
 1010e08:	0023883a 	mov	r17,zero
 1010e0c:	d9c14015 	stw	r7,1280(sp)
 1010e10:	d8000405 	stb	zero,16(sp)
 1010e14:	003d2006 	br	1010298 <___vfprintf_internal_r+0xa38>
 1010e18:	38800017 	ldw	r2,0(r7)
 1010e1c:	39c00104 	addi	r7,r7,4
 1010e20:	d9c14015 	stw	r7,1280(sp)
 1010e24:	1023d7fa 	srai	r17,r2,31
 1010e28:	1021883a 	mov	r16,r2
 1010e2c:	003d1806 	br	1010290 <___vfprintf_internal_r+0xa30>
 1010e30:	3c000017 	ldw	r16,0(r7)
 1010e34:	01000044 	movi	r4,1
 1010e38:	39c00104 	addi	r7,r7,4
 1010e3c:	0023883a 	mov	r17,zero
 1010e40:	d9c14015 	stw	r7,1280(sp)
 1010e44:	d8000405 	stb	zero,16(sp)
 1010e48:	003d1306 	br	1010298 <___vfprintf_internal_r+0xa38>
 1010e4c:	008040b4 	movhi	r2,258
 1010e50:	1096ce04 	addi	r2,r2,23352
 1010e54:	94800044 	addi	r18,r18,1
 1010e58:	8c400044 	addi	r17,r17,1
 1010e5c:	a8800015 	stw	r2,0(r21)
 1010e60:	00c00044 	movi	r3,1
 1010e64:	008001c4 	movi	r2,7
 1010e68:	a8c00115 	stw	r3,4(r21)
 1010e6c:	dc800e15 	stw	r18,56(sp)
 1010e70:	dc400d15 	stw	r17,52(sp)
 1010e74:	1440ca16 	blt	r2,r17,10111a0 <___vfprintf_internal_r+0x1940>
 1010e78:	a8c00204 	addi	r3,r21,8
 1010e7c:	2000061e 	bne	r4,zero,1010e98 <___vfprintf_internal_r+0x1638>
 1010e80:	d9414717 	ldw	r5,1308(sp)
 1010e84:	2800041e 	bne	r5,zero,1010e98 <___vfprintf_internal_r+0x1638>
 1010e88:	d9814c17 	ldw	r6,1328(sp)
 1010e8c:	3080004c 	andi	r2,r6,1
 1010e90:	1005003a 	cmpeq	r2,r2,zero
 1010e94:	103bf01e 	bne	r2,zero,100fe58 <___vfprintf_internal_r+0x5f8>
 1010e98:	00800044 	movi	r2,1
 1010e9c:	dc400d17 	ldw	r17,52(sp)
 1010ea0:	18800115 	stw	r2,4(r3)
 1010ea4:	d8814917 	ldw	r2,1316(sp)
 1010ea8:	94800044 	addi	r18,r18,1
 1010eac:	8c400044 	addi	r17,r17,1
 1010eb0:	18800015 	stw	r2,0(r3)
 1010eb4:	008001c4 	movi	r2,7
 1010eb8:	dc800e15 	stw	r18,56(sp)
 1010ebc:	dc400d15 	stw	r17,52(sp)
 1010ec0:	1440ca16 	blt	r2,r17,10111ec <___vfprintf_internal_r+0x198c>
 1010ec4:	18c00204 	addi	r3,r3,8
 1010ec8:	0121c83a 	sub	r16,zero,r4
 1010ecc:	0400500e 	bge	zero,r16,1011010 <___vfprintf_internal_r+0x17b0>
 1010ed0:	00800404 	movi	r2,16
 1010ed4:	1400800e 	bge	r2,r16,10110d8 <___vfprintf_internal_r+0x1878>
 1010ed8:	1027883a 	mov	r19,r2
 1010edc:	070040b4 	movhi	fp,258
 1010ee0:	e716ce84 	addi	fp,fp,23354
 1010ee4:	050001c4 	movi	r20,7
 1010ee8:	00000306 	br	1010ef8 <___vfprintf_internal_r+0x1698>
 1010eec:	18c00204 	addi	r3,r3,8
 1010ef0:	843ffc04 	addi	r16,r16,-16
 1010ef4:	9c007a0e 	bge	r19,r16,10110e0 <___vfprintf_internal_r+0x1880>
 1010ef8:	94800404 	addi	r18,r18,16
 1010efc:	8c400044 	addi	r17,r17,1
 1010f00:	1f000015 	stw	fp,0(r3)
 1010f04:	1cc00115 	stw	r19,4(r3)
 1010f08:	dc800e15 	stw	r18,56(sp)
 1010f0c:	dc400d15 	stw	r17,52(sp)
 1010f10:	a47ff60e 	bge	r20,r17,1010eec <___vfprintf_internal_r+0x168c>
 1010f14:	d9014f17 	ldw	r4,1340(sp)
 1010f18:	b00b883a 	mov	r5,r22
 1010f1c:	d9800c04 	addi	r6,sp,48
 1010f20:	100f8080 	call	100f808 <__sprint_r>
 1010f24:	103c061e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 1010f28:	dc800e17 	ldw	r18,56(sp)
 1010f2c:	dc400d17 	ldw	r17,52(sp)
 1010f30:	d8c01904 	addi	r3,sp,100
 1010f34:	003fee06 	br	1010ef0 <___vfprintf_internal_r+0x1690>
 1010f38:	3c000017 	ldw	r16,0(r7)
 1010f3c:	0023883a 	mov	r17,zero
 1010f40:	39c00104 	addi	r7,r7,4
 1010f44:	d9c14015 	stw	r7,1280(sp)
 1010f48:	003e9206 	br	1010994 <___vfprintf_internal_r+0x1134>
 1010f4c:	d9401904 	addi	r5,sp,100
 1010f50:	dd000f04 	addi	r20,sp,60
 1010f54:	d9414115 	stw	r5,1284(sp)
 1010f58:	d9814417 	ldw	r6,1296(sp)
 1010f5c:	880a973a 	slli	r5,r17,28
 1010f60:	8004d13a 	srli	r2,r16,4
 1010f64:	810003cc 	andi	r4,r16,15
 1010f68:	3109883a 	add	r4,r6,r4
 1010f6c:	2884b03a 	or	r2,r5,r2
 1010f70:	21400003 	ldbu	r5,0(r4)
 1010f74:	d9014117 	ldw	r4,1284(sp)
 1010f78:	8806d13a 	srli	r3,r17,4
 1010f7c:	1021883a 	mov	r16,r2
 1010f80:	213fffc4 	addi	r4,r4,-1
 1010f84:	d9014115 	stw	r4,1284(sp)
 1010f88:	d9814117 	ldw	r6,1284(sp)
 1010f8c:	10c8b03a 	or	r4,r2,r3
 1010f90:	1823883a 	mov	r17,r3
 1010f94:	31400005 	stb	r5,0(r6)
 1010f98:	203fef1e 	bne	r4,zero,1010f58 <___vfprintf_internal_r+0x16f8>
 1010f9c:	003ccb06 	br	10102cc <___vfprintf_internal_r+0xa6c>
 1010fa0:	00800c04 	movi	r2,48
 1010fa4:	d98018c4 	addi	r6,sp,99
 1010fa8:	dd000f04 	addi	r20,sp,60
 1010fac:	d88018c5 	stb	r2,99(sp)
 1010fb0:	d9814115 	stw	r6,1284(sp)
 1010fb4:	003cc506 	br	10102cc <___vfprintf_internal_r+0xa6c>
 1010fb8:	dc400d17 	ldw	r17,52(sp)
 1010fbc:	070040b4 	movhi	fp,258
 1010fc0:	e716d284 	addi	fp,fp,23370
 1010fc4:	003bc706 	br	100fee4 <___vfprintf_internal_r+0x684>
 1010fc8:	d9414c17 	ldw	r5,1328(sp)
 1010fcc:	2880040c 	andi	r2,r5,16
 1010fd0:	10007c26 	beq	r2,zero,10111c4 <___vfprintf_internal_r+0x1964>
 1010fd4:	38800017 	ldw	r2,0(r7)
 1010fd8:	39c00104 	addi	r7,r7,4
 1010fdc:	d9c14015 	stw	r7,1280(sp)
 1010fe0:	d9814b17 	ldw	r6,1324(sp)
 1010fe4:	d9c14017 	ldw	r7,1280(sp)
 1010fe8:	11800015 	stw	r6,0(r2)
 1010fec:	003a7806 	br	100f9d0 <___vfprintf_internal_r+0x170>
 1010ff0:	d9014f17 	ldw	r4,1340(sp)
 1010ff4:	b00b883a 	mov	r5,r22
 1010ff8:	d9800c04 	addi	r6,sp,48
 1010ffc:	100f8080 	call	100f808 <__sprint_r>
 1011000:	103bcf1e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 1011004:	dc800e17 	ldw	r18,56(sp)
 1011008:	dc400d17 	ldw	r17,52(sp)
 101100c:	d8c01904 	addi	r3,sp,100
 1011010:	d9014717 	ldw	r4,1308(sp)
 1011014:	d9414117 	ldw	r5,1284(sp)
 1011018:	8c400044 	addi	r17,r17,1
 101101c:	9125883a 	add	r18,r18,r4
 1011020:	008001c4 	movi	r2,7
 1011024:	19400015 	stw	r5,0(r3)
 1011028:	19000115 	stw	r4,4(r3)
 101102c:	dc800e15 	stw	r18,56(sp)
 1011030:	dc400d15 	stw	r17,52(sp)
 1011034:	147cee16 	blt	r2,r17,10103f0 <___vfprintf_internal_r+0xb90>
 1011038:	18c00204 	addi	r3,r3,8
 101103c:	003b8606 	br	100fe58 <___vfprintf_internal_r+0x5f8>
 1011040:	38c00017 	ldw	r3,0(r7)
 1011044:	39000204 	addi	r4,r7,8
 1011048:	d9014015 	stw	r4,1280(sp)
 101104c:	d8c14215 	stw	r3,1288(sp)
 1011050:	39c00117 	ldw	r7,4(r7)
 1011054:	d9c14315 	stw	r7,1292(sp)
 1011058:	003e2006 	br	10108dc <___vfprintf_internal_r+0x107c>
 101105c:	0005883a 	mov	r2,zero
 1011060:	1409c83a 	sub	r4,r2,r16
 1011064:	1105803a 	cmpltu	r2,r2,r4
 1011068:	044bc83a 	sub	r5,zero,r17
 101106c:	2885c83a 	sub	r2,r5,r2
 1011070:	2021883a 	mov	r16,r4
 1011074:	1023883a 	mov	r17,r2
 1011078:	01000044 	movi	r4,1
 101107c:	00800b44 	movi	r2,45
 1011080:	d8800405 	stb	r2,16(sp)
 1011084:	003c8406 	br	1010298 <___vfprintf_internal_r+0xa38>
 1011088:	d9014f17 	ldw	r4,1340(sp)
 101108c:	b00b883a 	mov	r5,r22
 1011090:	d9800c04 	addi	r6,sp,48
 1011094:	100f8080 	call	100f808 <__sprint_r>
 1011098:	103ba91e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 101109c:	dc800e17 	ldw	r18,56(sp)
 10110a0:	dc400d17 	ldw	r17,52(sp)
 10110a4:	d9000517 	ldw	r4,20(sp)
 10110a8:	d9401904 	addi	r5,sp,100
 10110ac:	003da706 	br	101074c <___vfprintf_internal_r+0xeec>
 10110b0:	d9014f17 	ldw	r4,1340(sp)
 10110b4:	b00b883a 	mov	r5,r22
 10110b8:	d9800c04 	addi	r6,sp,48
 10110bc:	100f8080 	call	100f808 <__sprint_r>
 10110c0:	103b9f1e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 10110c4:	dc800e17 	ldw	r18,56(sp)
 10110c8:	dc400d17 	ldw	r17,52(sp)
 10110cc:	d9000517 	ldw	r4,20(sp)
 10110d0:	d8c01904 	addi	r3,sp,100
 10110d4:	003d9106 	br	101071c <___vfprintf_internal_r+0xebc>
 10110d8:	070040b4 	movhi	fp,258
 10110dc:	e716ce84 	addi	fp,fp,23354
 10110e0:	9425883a 	add	r18,r18,r16
 10110e4:	8c400044 	addi	r17,r17,1
 10110e8:	008001c4 	movi	r2,7
 10110ec:	1f000015 	stw	fp,0(r3)
 10110f0:	1c000115 	stw	r16,4(r3)
 10110f4:	dc800e15 	stw	r18,56(sp)
 10110f8:	dc400d15 	stw	r17,52(sp)
 10110fc:	147fbc16 	blt	r2,r17,1010ff0 <___vfprintf_internal_r+0x1790>
 1011100:	18c00204 	addi	r3,r3,8
 1011104:	003fc206 	br	1011010 <___vfprintf_internal_r+0x17b0>
 1011108:	d9014f17 	ldw	r4,1340(sp)
 101110c:	b00b883a 	mov	r5,r22
 1011110:	d9800c04 	addi	r6,sp,48
 1011114:	100f8080 	call	100f808 <__sprint_r>
 1011118:	103b891e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 101111c:	dc800e17 	ldw	r18,56(sp)
 1011120:	d9000517 	ldw	r4,20(sp)
 1011124:	d8c01904 	addi	r3,sp,100
 1011128:	003d0206 	br	1010534 <___vfprintf_internal_r+0xcd4>
 101112c:	070040b4 	movhi	fp,258
 1011130:	e716ce84 	addi	fp,fp,23354
 1011134:	003be406 	br	10100c8 <___vfprintf_internal_r+0x868>
 1011138:	008040b4 	movhi	r2,258
 101113c:	1096bd04 	addi	r2,r2,23284
 1011140:	d8814115 	stw	r2,1284(sp)
 1011144:	003df506 	br	101091c <___vfprintf_internal_r+0x10bc>
 1011148:	d9014217 	ldw	r4,1288(sp)
 101114c:	d9414317 	ldw	r5,1292(sp)
 1011150:	10159f00 	call	10159f0 <__isnand>
 1011154:	10003926 	beq	r2,zero,101123c <___vfprintf_internal_r+0x19dc>
 1011158:	d9414d17 	ldw	r5,1332(sp)
 101115c:	008011c4 	movi	r2,71
 1011160:	1140ce16 	blt	r2,r5,101149c <___vfprintf_internal_r+0x1c3c>
 1011164:	018040b4 	movhi	r6,258
 1011168:	3196be04 	addi	r6,r6,23288
 101116c:	d9814115 	stw	r6,1284(sp)
 1011170:	003dea06 	br	101091c <___vfprintf_internal_r+0x10bc>
 1011174:	d9014c17 	ldw	r4,1328(sp)
 1011178:	bdc00044 	addi	r23,r23,1
 101117c:	b8c00007 	ldb	r3,0(r23)
 1011180:	21000814 	ori	r4,r4,32
 1011184:	d9014c15 	stw	r4,1328(sp)
 1011188:	003a3406 	br	100fa5c <___vfprintf_internal_r+0x1fc>
 101118c:	dcc14515 	stw	r19,1300(sp)
 1011190:	98011016 	blt	r19,zero,10115d4 <___vfprintf_internal_r+0x1d74>
 1011194:	980f883a 	mov	r7,r19
 1011198:	d8014615 	stw	zero,1304(sp)
 101119c:	003c5206 	br	10102e8 <___vfprintf_internal_r+0xa88>
 10111a0:	d9014f17 	ldw	r4,1340(sp)
 10111a4:	b00b883a 	mov	r5,r22
 10111a8:	d9800c04 	addi	r6,sp,48
 10111ac:	100f8080 	call	100f808 <__sprint_r>
 10111b0:	103b631e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 10111b4:	dc800e17 	ldw	r18,56(sp)
 10111b8:	d9000517 	ldw	r4,20(sp)
 10111bc:	d8c01904 	addi	r3,sp,100
 10111c0:	003f2e06 	br	1010e7c <___vfprintf_internal_r+0x161c>
 10111c4:	d8c14c17 	ldw	r3,1328(sp)
 10111c8:	1880100c 	andi	r2,r3,64
 10111cc:	1000a026 	beq	r2,zero,1011450 <___vfprintf_internal_r+0x1bf0>
 10111d0:	38800017 	ldw	r2,0(r7)
 10111d4:	39c00104 	addi	r7,r7,4
 10111d8:	d9c14015 	stw	r7,1280(sp)
 10111dc:	d9014b17 	ldw	r4,1324(sp)
 10111e0:	d9c14017 	ldw	r7,1280(sp)
 10111e4:	1100000d 	sth	r4,0(r2)
 10111e8:	0039f906 	br	100f9d0 <___vfprintf_internal_r+0x170>
 10111ec:	d9014f17 	ldw	r4,1340(sp)
 10111f0:	b00b883a 	mov	r5,r22
 10111f4:	d9800c04 	addi	r6,sp,48
 10111f8:	100f8080 	call	100f808 <__sprint_r>
 10111fc:	103b501e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 1011200:	dc800e17 	ldw	r18,56(sp)
 1011204:	dc400d17 	ldw	r17,52(sp)
 1011208:	d9000517 	ldw	r4,20(sp)
 101120c:	d8c01904 	addi	r3,sp,100
 1011210:	003f2d06 	br	1010ec8 <___vfprintf_internal_r+0x1668>
 1011214:	00800184 	movi	r2,6
 1011218:	14c09a36 	bltu	r2,r19,1011484 <___vfprintf_internal_r+0x1c24>
 101121c:	dcc14515 	stw	r19,1300(sp)
 1011220:	9800010e 	bge	r19,zero,1011228 <___vfprintf_internal_r+0x19c8>
 1011224:	d8014515 	stw	zero,1300(sp)
 1011228:	008040b4 	movhi	r2,258
 101122c:	1096c004 	addi	r2,r2,23296
 1011230:	980f883a 	mov	r7,r19
 1011234:	d8814115 	stw	r2,1284(sp)
 1011238:	003a7806 	br	100fc1c <___vfprintf_internal_r+0x3bc>
 101123c:	00bfffc4 	movi	r2,-1
 1011240:	9880e226 	beq	r19,r2,10115cc <___vfprintf_internal_r+0x1d6c>
 1011244:	d9414d17 	ldw	r5,1332(sp)
 1011248:	008019c4 	movi	r2,103
 101124c:	2880dc26 	beq	r5,r2,10115c0 <___vfprintf_internal_r+0x1d60>
 1011250:	008011c4 	movi	r2,71
 1011254:	2880da26 	beq	r5,r2,10115c0 <___vfprintf_internal_r+0x1d60>
 1011258:	d9414c17 	ldw	r5,1328(sp)
 101125c:	d9014317 	ldw	r4,1292(sp)
 1011260:	d9814217 	ldw	r6,1288(sp)
 1011264:	29404014 	ori	r5,r5,256
 1011268:	d9414c15 	stw	r5,1328(sp)
 101126c:	2000cc16 	blt	r4,zero,10115a0 <___vfprintf_internal_r+0x1d40>
 1011270:	3021883a 	mov	r16,r6
 1011274:	2023883a 	mov	r17,r4
 1011278:	0039883a 	mov	fp,zero
 101127c:	d9414d17 	ldw	r5,1332(sp)
 1011280:	00801984 	movi	r2,102
 1011284:	2880b726 	beq	r5,r2,1011564 <___vfprintf_internal_r+0x1d04>
 1011288:	00801184 	movi	r2,70
 101128c:	2880b526 	beq	r5,r2,1011564 <___vfprintf_internal_r+0x1d04>
 1011290:	00801944 	movi	r2,101
 1011294:	2880c826 	beq	r5,r2,10115b8 <___vfprintf_internal_r+0x1d58>
 1011298:	00801144 	movi	r2,69
 101129c:	2880c626 	beq	r5,r2,10115b8 <___vfprintf_internal_r+0x1d58>
 10112a0:	9829883a 	mov	r20,r19
 10112a4:	d9014f17 	ldw	r4,1340(sp)
 10112a8:	d8800504 	addi	r2,sp,20
 10112ac:	880d883a 	mov	r6,r17
 10112b0:	d8800115 	stw	r2,4(sp)
 10112b4:	d8c00604 	addi	r3,sp,24
 10112b8:	d8800704 	addi	r2,sp,28
 10112bc:	800b883a 	mov	r5,r16
 10112c0:	01c00084 	movi	r7,2
 10112c4:	d8c00215 	stw	r3,8(sp)
 10112c8:	d8800315 	stw	r2,12(sp)
 10112cc:	dd000015 	stw	r20,0(sp)
 10112d0:	1011a840 	call	1011a84 <_dtoa_r>
 10112d4:	d9814d17 	ldw	r6,1332(sp)
 10112d8:	d8814115 	stw	r2,1284(sp)
 10112dc:	008019c4 	movi	r2,103
 10112e0:	30809526 	beq	r6,r2,1011538 <___vfprintf_internal_r+0x1cd8>
 10112e4:	d8c14d17 	ldw	r3,1332(sp)
 10112e8:	008011c4 	movi	r2,71
 10112ec:	18809226 	beq	r3,r2,1011538 <___vfprintf_internal_r+0x1cd8>
 10112f0:	d9414117 	ldw	r5,1284(sp)
 10112f4:	d9814d17 	ldw	r6,1332(sp)
 10112f8:	00801984 	movi	r2,102
 10112fc:	2d25883a 	add	r18,r5,r20
 1011300:	30808626 	beq	r6,r2,101151c <___vfprintf_internal_r+0x1cbc>
 1011304:	00801184 	movi	r2,70
 1011308:	30808426 	beq	r6,r2,101151c <___vfprintf_internal_r+0x1cbc>
 101130c:	000d883a 	mov	r6,zero
 1011310:	000f883a 	mov	r7,zero
 1011314:	880b883a 	mov	r5,r17
 1011318:	8009883a 	mov	r4,r16
 101131c:	10178b40 	call	10178b4 <__eqdf2>
 1011320:	1000751e 	bne	r2,zero,10114f8 <___vfprintf_internal_r+0x1c98>
 1011324:	9005883a 	mov	r2,r18
 1011328:	dc800715 	stw	r18,28(sp)
 101132c:	d9014117 	ldw	r4,1284(sp)
 1011330:	d9414d17 	ldw	r5,1332(sp)
 1011334:	00c019c4 	movi	r3,103
 1011338:	1125c83a 	sub	r18,r2,r4
 101133c:	28c06826 	beq	r5,r3,10114e0 <___vfprintf_internal_r+0x1c80>
 1011340:	008011c4 	movi	r2,71
 1011344:	28806626 	beq	r5,r2,10114e0 <___vfprintf_internal_r+0x1c80>
 1011348:	d9000517 	ldw	r4,20(sp)
 101134c:	d8c14d17 	ldw	r3,1332(sp)
 1011350:	00801944 	movi	r2,101
 1011354:	10c05516 	blt	r2,r3,10114ac <___vfprintf_internal_r+0x1c4c>
 1011358:	213fffc4 	addi	r4,r4,-1
 101135c:	d9000515 	stw	r4,20(sp)
 1011360:	d8c00805 	stb	r3,32(sp)
 1011364:	2021883a 	mov	r16,r4
 1011368:	2000c116 	blt	r4,zero,1011670 <___vfprintf_internal_r+0x1e10>
 101136c:	00800ac4 	movi	r2,43
 1011370:	d8800845 	stb	r2,33(sp)
 1011374:	00800244 	movi	r2,9
 1011378:	1400af0e 	bge	r2,r16,1011638 <___vfprintf_internal_r+0x1dd8>
 101137c:	1027883a 	mov	r19,r2
 1011380:	dc400b84 	addi	r17,sp,46
 1011384:	8009883a 	mov	r4,r16
 1011388:	01400284 	movi	r5,10
 101138c:	1017f9c0 	call	1017f9c <__modsi3>
 1011390:	10800c04 	addi	r2,r2,48
 1011394:	8c7fffc4 	addi	r17,r17,-1
 1011398:	8009883a 	mov	r4,r16
 101139c:	01400284 	movi	r5,10
 10113a0:	88800005 	stb	r2,0(r17)
 10113a4:	1017f3c0 	call	1017f3c <__divsi3>
 10113a8:	1021883a 	mov	r16,r2
 10113ac:	98bff516 	blt	r19,r2,1011384 <___vfprintf_internal_r+0x1b24>
 10113b0:	10c00c04 	addi	r3,r2,48
 10113b4:	d88009c4 	addi	r2,sp,39
 10113b8:	108001c4 	addi	r2,r2,7
 10113bc:	897fffc4 	addi	r5,r17,-1
 10113c0:	88ffffc5 	stb	r3,-1(r17)
 10113c4:	2880a72e 	bgeu	r5,r2,1011664 <___vfprintf_internal_r+0x1e04>
 10113c8:	1009883a 	mov	r4,r2
 10113cc:	d9800804 	addi	r6,sp,32
 10113d0:	d8c00884 	addi	r3,sp,34
 10113d4:	28800003 	ldbu	r2,0(r5)
 10113d8:	29400044 	addi	r5,r5,1
 10113dc:	18800005 	stb	r2,0(r3)
 10113e0:	18c00044 	addi	r3,r3,1
 10113e4:	293ffb36 	bltu	r5,r4,10113d4 <___vfprintf_internal_r+0x1b74>
 10113e8:	1987c83a 	sub	r3,r3,r6
 10113ec:	00800044 	movi	r2,1
 10113f0:	d8c14815 	stw	r3,1312(sp)
 10113f4:	90cf883a 	add	r7,r18,r3
 10113f8:	1480960e 	bge	r2,r18,1011654 <___vfprintf_internal_r+0x1df4>
 10113fc:	39c00044 	addi	r7,r7,1
 1011400:	d9c14515 	stw	r7,1300(sp)
 1011404:	38003416 	blt	r7,zero,10114d8 <___vfprintf_internal_r+0x1c78>
 1011408:	e0803fcc 	andi	r2,fp,255
 101140c:	1080201c 	xori	r2,r2,128
 1011410:	10bfe004 	addi	r2,r2,-128
 1011414:	10004e26 	beq	r2,zero,1011550 <___vfprintf_internal_r+0x1cf0>
 1011418:	00800b44 	movi	r2,45
 101141c:	dc814715 	stw	r18,1308(sp)
 1011420:	d8014615 	stw	zero,1304(sp)
 1011424:	d8800405 	stb	r2,16(sp)
 1011428:	003bb106 	br	10102f0 <___vfprintf_internal_r+0xa90>
 101142c:	00800b44 	movi	r2,45
 1011430:	d8800405 	stb	r2,16(sp)
 1011434:	003d3306 	br	1010904 <___vfprintf_internal_r+0x10a4>
 1011438:	d9014f17 	ldw	r4,1340(sp)
 101143c:	b00b883a 	mov	r5,r22
 1011440:	d9800c04 	addi	r6,sp,48
 1011444:	100f8080 	call	100f808 <__sprint_r>
 1011448:	103abd1e 	bne	r2,zero,100ff40 <___vfprintf_internal_r+0x6e0>
 101144c:	003abb06 	br	100ff3c <___vfprintf_internal_r+0x6dc>
 1011450:	38800017 	ldw	r2,0(r7)
 1011454:	39c00104 	addi	r7,r7,4
 1011458:	d9c14015 	stw	r7,1280(sp)
 101145c:	d9414b17 	ldw	r5,1324(sp)
 1011460:	d9c14017 	ldw	r7,1280(sp)
 1011464:	11400015 	stw	r5,0(r2)
 1011468:	00395906 	br	100f9d0 <___vfprintf_internal_r+0x170>
 101146c:	980f883a 	mov	r7,r19
 1011470:	dcc14515 	stw	r19,1300(sp)
 1011474:	d8014615 	stw	zero,1304(sp)
 1011478:	003b9b06 	br	10102e8 <___vfprintf_internal_r+0xa88>
 101147c:	0027883a 	mov	r19,zero
 1011480:	00397806 	br	100fa64 <___vfprintf_internal_r+0x204>
 1011484:	00c040b4 	movhi	r3,258
 1011488:	18d6c004 	addi	r3,r3,23296
 101148c:	100f883a 	mov	r7,r2
 1011490:	d8814515 	stw	r2,1300(sp)
 1011494:	d8c14115 	stw	r3,1284(sp)
 1011498:	0039e006 	br	100fc1c <___vfprintf_internal_r+0x3bc>
 101149c:	008040b4 	movhi	r2,258
 10114a0:	1096bf04 	addi	r2,r2,23292
 10114a4:	d8814115 	stw	r2,1284(sp)
 10114a8:	003d1c06 	br	101091c <___vfprintf_internal_r+0x10bc>
 10114ac:	d9414d17 	ldw	r5,1332(sp)
 10114b0:	00801984 	movi	r2,102
 10114b4:	28804926 	beq	r5,r2,10115dc <___vfprintf_internal_r+0x1d7c>
 10114b8:	200f883a 	mov	r7,r4
 10114bc:	24805716 	blt	r4,r18,101161c <___vfprintf_internal_r+0x1dbc>
 10114c0:	d9414c17 	ldw	r5,1328(sp)
 10114c4:	2880004c 	andi	r2,r5,1
 10114c8:	10000126 	beq	r2,zero,10114d0 <___vfprintf_internal_r+0x1c70>
 10114cc:	21c00044 	addi	r7,r4,1
 10114d0:	d9c14515 	stw	r7,1300(sp)
 10114d4:	383fcc0e 	bge	r7,zero,1011408 <___vfprintf_internal_r+0x1ba8>
 10114d8:	d8014515 	stw	zero,1300(sp)
 10114dc:	003fca06 	br	1011408 <___vfprintf_internal_r+0x1ba8>
 10114e0:	d9000517 	ldw	r4,20(sp)
 10114e4:	00bfff04 	movi	r2,-4
 10114e8:	1100480e 	bge	r2,r4,101160c <___vfprintf_internal_r+0x1dac>
 10114ec:	99004716 	blt	r19,r4,101160c <___vfprintf_internal_r+0x1dac>
 10114f0:	d8c14d15 	stw	r3,1332(sp)
 10114f4:	003ff006 	br	10114b8 <___vfprintf_internal_r+0x1c58>
 10114f8:	d8800717 	ldw	r2,28(sp)
 10114fc:	14bf8b2e 	bgeu	r2,r18,101132c <___vfprintf_internal_r+0x1acc>
 1011500:	9007883a 	mov	r3,r18
 1011504:	01000c04 	movi	r4,48
 1011508:	11000005 	stb	r4,0(r2)
 101150c:	10800044 	addi	r2,r2,1
 1011510:	d8800715 	stw	r2,28(sp)
 1011514:	18bffc1e 	bne	r3,r2,1011508 <___vfprintf_internal_r+0x1ca8>
 1011518:	003f8406 	br	101132c <___vfprintf_internal_r+0x1acc>
 101151c:	d8814117 	ldw	r2,1284(sp)
 1011520:	10c00007 	ldb	r3,0(r2)
 1011524:	00800c04 	movi	r2,48
 1011528:	18805b26 	beq	r3,r2,1011698 <___vfprintf_internal_r+0x1e38>
 101152c:	d9000517 	ldw	r4,20(sp)
 1011530:	9125883a 	add	r18,r18,r4
 1011534:	003f7506 	br	101130c <___vfprintf_internal_r+0x1aac>
 1011538:	d9014c17 	ldw	r4,1328(sp)
 101153c:	2080004c 	andi	r2,r4,1
 1011540:	1005003a 	cmpeq	r2,r2,zero
 1011544:	103f6a26 	beq	r2,zero,10112f0 <___vfprintf_internal_r+0x1a90>
 1011548:	d8800717 	ldw	r2,28(sp)
 101154c:	003f7706 	br	101132c <___vfprintf_internal_r+0x1acc>
 1011550:	d9c14515 	stw	r7,1300(sp)
 1011554:	38004d16 	blt	r7,zero,101168c <___vfprintf_internal_r+0x1e2c>
 1011558:	dc814715 	stw	r18,1308(sp)
 101155c:	d8014615 	stw	zero,1304(sp)
 1011560:	003b6106 	br	10102e8 <___vfprintf_internal_r+0xa88>
 1011564:	d9014f17 	ldw	r4,1340(sp)
 1011568:	d8800504 	addi	r2,sp,20
 101156c:	d8800115 	stw	r2,4(sp)
 1011570:	d8c00604 	addi	r3,sp,24
 1011574:	d8800704 	addi	r2,sp,28
 1011578:	800b883a 	mov	r5,r16
 101157c:	880d883a 	mov	r6,r17
 1011580:	01c000c4 	movi	r7,3
 1011584:	d8c00215 	stw	r3,8(sp)
 1011588:	d8800315 	stw	r2,12(sp)
 101158c:	dcc00015 	stw	r19,0(sp)
 1011590:	9829883a 	mov	r20,r19
 1011594:	1011a840 	call	1011a84 <_dtoa_r>
 1011598:	d8814115 	stw	r2,1284(sp)
 101159c:	003f5106 	br	10112e4 <___vfprintf_internal_r+0x1a84>
 10115a0:	d8c14217 	ldw	r3,1288(sp)
 10115a4:	d9014317 	ldw	r4,1292(sp)
 10115a8:	07000b44 	movi	fp,45
 10115ac:	1821883a 	mov	r16,r3
 10115b0:	2460003c 	xorhi	r17,r4,32768
 10115b4:	003f3106 	br	101127c <___vfprintf_internal_r+0x1a1c>
 10115b8:	9d000044 	addi	r20,r19,1
 10115bc:	003f3906 	br	10112a4 <___vfprintf_internal_r+0x1a44>
 10115c0:	983f251e 	bne	r19,zero,1011258 <___vfprintf_internal_r+0x19f8>
 10115c4:	04c00044 	movi	r19,1
 10115c8:	003f2306 	br	1011258 <___vfprintf_internal_r+0x19f8>
 10115cc:	04c00184 	movi	r19,6
 10115d0:	003f2106 	br	1011258 <___vfprintf_internal_r+0x19f8>
 10115d4:	d8014515 	stw	zero,1300(sp)
 10115d8:	003eee06 	br	1011194 <___vfprintf_internal_r+0x1934>
 10115dc:	200f883a 	mov	r7,r4
 10115e0:	0100370e 	bge	zero,r4,10116c0 <___vfprintf_internal_r+0x1e60>
 10115e4:	9800031e 	bne	r19,zero,10115f4 <___vfprintf_internal_r+0x1d94>
 10115e8:	d9814c17 	ldw	r6,1328(sp)
 10115ec:	3080004c 	andi	r2,r6,1
 10115f0:	103fb726 	beq	r2,zero,10114d0 <___vfprintf_internal_r+0x1c70>
 10115f4:	20800044 	addi	r2,r4,1
 10115f8:	98a7883a 	add	r19,r19,r2
 10115fc:	dcc14515 	stw	r19,1300(sp)
 1011600:	980f883a 	mov	r7,r19
 1011604:	983f800e 	bge	r19,zero,1011408 <___vfprintf_internal_r+0x1ba8>
 1011608:	003fb306 	br	10114d8 <___vfprintf_internal_r+0x1c78>
 101160c:	d9814d17 	ldw	r6,1332(sp)
 1011610:	31bfff84 	addi	r6,r6,-2
 1011614:	d9814d15 	stw	r6,1332(sp)
 1011618:	003f4c06 	br	101134c <___vfprintf_internal_r+0x1aec>
 101161c:	0100180e 	bge	zero,r4,1011680 <___vfprintf_internal_r+0x1e20>
 1011620:	00800044 	movi	r2,1
 1011624:	1485883a 	add	r2,r2,r18
 1011628:	d8814515 	stw	r2,1300(sp)
 101162c:	100f883a 	mov	r7,r2
 1011630:	103f750e 	bge	r2,zero,1011408 <___vfprintf_internal_r+0x1ba8>
 1011634:	003fa806 	br	10114d8 <___vfprintf_internal_r+0x1c78>
 1011638:	80c00c04 	addi	r3,r16,48
 101163c:	00800c04 	movi	r2,48
 1011640:	d8c008c5 	stb	r3,35(sp)
 1011644:	d9800804 	addi	r6,sp,32
 1011648:	d8c00904 	addi	r3,sp,36
 101164c:	d8800885 	stb	r2,34(sp)
 1011650:	003f6506 	br	10113e8 <___vfprintf_internal_r+0x1b88>
 1011654:	d9014c17 	ldw	r4,1328(sp)
 1011658:	2084703a 	and	r2,r4,r2
 101165c:	103f9c26 	beq	r2,zero,10114d0 <___vfprintf_internal_r+0x1c70>
 1011660:	003f6606 	br	10113fc <___vfprintf_internal_r+0x1b9c>
 1011664:	d9800804 	addi	r6,sp,32
 1011668:	d8c00884 	addi	r3,sp,34
 101166c:	003f5e06 	br	10113e8 <___vfprintf_internal_r+0x1b88>
 1011670:	00800b44 	movi	r2,45
 1011674:	0121c83a 	sub	r16,zero,r4
 1011678:	d8800845 	stb	r2,33(sp)
 101167c:	003f3d06 	br	1011374 <___vfprintf_internal_r+0x1b14>
 1011680:	00800084 	movi	r2,2
 1011684:	1105c83a 	sub	r2,r2,r4
 1011688:	003fe606 	br	1011624 <___vfprintf_internal_r+0x1dc4>
 101168c:	d8014515 	stw	zero,1300(sp)
 1011690:	dc814715 	stw	r18,1308(sp)
 1011694:	003fb106 	br	101155c <___vfprintf_internal_r+0x1cfc>
 1011698:	000d883a 	mov	r6,zero
 101169c:	000f883a 	mov	r7,zero
 10116a0:	8009883a 	mov	r4,r16
 10116a4:	880b883a 	mov	r5,r17
 10116a8:	101793c0 	call	101793c <__nedf2>
 10116ac:	103f9f26 	beq	r2,zero,101152c <___vfprintf_internal_r+0x1ccc>
 10116b0:	00800044 	movi	r2,1
 10116b4:	1509c83a 	sub	r4,r2,r20
 10116b8:	d9000515 	stw	r4,20(sp)
 10116bc:	003f9b06 	br	101152c <___vfprintf_internal_r+0x1ccc>
 10116c0:	98000d1e 	bne	r19,zero,10116f8 <___vfprintf_internal_r+0x1e98>
 10116c4:	d8c14c17 	ldw	r3,1328(sp)
 10116c8:	1880004c 	andi	r2,r3,1
 10116cc:	10000a1e 	bne	r2,zero,10116f8 <___vfprintf_internal_r+0x1e98>
 10116d0:	01000044 	movi	r4,1
 10116d4:	200f883a 	mov	r7,r4
 10116d8:	d9014515 	stw	r4,1300(sp)
 10116dc:	003f4a06 	br	1011408 <___vfprintf_internal_r+0x1ba8>
 10116e0:	3cc00017 	ldw	r19,0(r7)
 10116e4:	39c00104 	addi	r7,r7,4
 10116e8:	983d0e0e 	bge	r19,zero,1010b24 <___vfprintf_internal_r+0x12c4>
 10116ec:	b8c00007 	ldb	r3,0(r23)
 10116f0:	04ffffc4 	movi	r19,-1
 10116f4:	0038d906 	br	100fa5c <___vfprintf_internal_r+0x1fc>
 10116f8:	9cc00084 	addi	r19,r19,2
 10116fc:	dcc14515 	stw	r19,1300(sp)
 1011700:	980f883a 	mov	r7,r19
 1011704:	983f400e 	bge	r19,zero,1011408 <___vfprintf_internal_r+0x1ba8>
 1011708:	003f7306 	br	10114d8 <___vfprintf_internal_r+0x1c78>

0101170c <__vfprintf_internal>:
 101170c:	008040b4 	movhi	r2,258
 1011710:	109f8b04 	addi	r2,r2,32300
 1011714:	2013883a 	mov	r9,r4
 1011718:	11000017 	ldw	r4,0(r2)
 101171c:	2805883a 	mov	r2,r5
 1011720:	300f883a 	mov	r7,r6
 1011724:	480b883a 	mov	r5,r9
 1011728:	100d883a 	mov	r6,r2
 101172c:	100f8601 	jmpi	100f860 <___vfprintf_internal_r>

01011730 <__swsetup_r>:
 1011730:	008040b4 	movhi	r2,258
 1011734:	109f8b04 	addi	r2,r2,32300
 1011738:	10c00017 	ldw	r3,0(r2)
 101173c:	defffd04 	addi	sp,sp,-12
 1011740:	dc400115 	stw	r17,4(sp)
 1011744:	dc000015 	stw	r16,0(sp)
 1011748:	dfc00215 	stw	ra,8(sp)
 101174c:	2023883a 	mov	r17,r4
 1011750:	2821883a 	mov	r16,r5
 1011754:	18000226 	beq	r3,zero,1011760 <__swsetup_r+0x30>
 1011758:	18800e17 	ldw	r2,56(r3)
 101175c:	10001f26 	beq	r2,zero,10117dc <__swsetup_r+0xac>
 1011760:	8100030b 	ldhu	r4,12(r16)
 1011764:	2080020c 	andi	r2,r4,8
 1011768:	10002826 	beq	r2,zero,101180c <__swsetup_r+0xdc>
 101176c:	81400417 	ldw	r5,16(r16)
 1011770:	28001d26 	beq	r5,zero,10117e8 <__swsetup_r+0xb8>
 1011774:	2080004c 	andi	r2,r4,1
 1011778:	1005003a 	cmpeq	r2,r2,zero
 101177c:	10000b26 	beq	r2,zero,10117ac <__swsetup_r+0x7c>
 1011780:	2080008c 	andi	r2,r4,2
 1011784:	10001226 	beq	r2,zero,10117d0 <__swsetup_r+0xa0>
 1011788:	0005883a 	mov	r2,zero
 101178c:	80800215 	stw	r2,8(r16)
 1011790:	28000b26 	beq	r5,zero,10117c0 <__swsetup_r+0x90>
 1011794:	0005883a 	mov	r2,zero
 1011798:	dfc00217 	ldw	ra,8(sp)
 101179c:	dc400117 	ldw	r17,4(sp)
 10117a0:	dc000017 	ldw	r16,0(sp)
 10117a4:	dec00304 	addi	sp,sp,12
 10117a8:	f800283a 	ret
 10117ac:	80800517 	ldw	r2,20(r16)
 10117b0:	80000215 	stw	zero,8(r16)
 10117b4:	0085c83a 	sub	r2,zero,r2
 10117b8:	80800615 	stw	r2,24(r16)
 10117bc:	283ff51e 	bne	r5,zero,1011794 <__swsetup_r+0x64>
 10117c0:	2080200c 	andi	r2,r4,128
 10117c4:	103ff326 	beq	r2,zero,1011794 <__swsetup_r+0x64>
 10117c8:	00bfffc4 	movi	r2,-1
 10117cc:	003ff206 	br	1011798 <__swsetup_r+0x68>
 10117d0:	80800517 	ldw	r2,20(r16)
 10117d4:	80800215 	stw	r2,8(r16)
 10117d8:	003fed06 	br	1011790 <__swsetup_r+0x60>
 10117dc:	1809883a 	mov	r4,r3
 10117e0:	10132d00 	call	10132d0 <__sinit>
 10117e4:	003fde06 	br	1011760 <__swsetup_r+0x30>
 10117e8:	20c0a00c 	andi	r3,r4,640
 10117ec:	00808004 	movi	r2,512
 10117f0:	18bfe026 	beq	r3,r2,1011774 <__swsetup_r+0x44>
 10117f4:	8809883a 	mov	r4,r17
 10117f8:	800b883a 	mov	r5,r16
 10117fc:	10140480 	call	1014048 <__smakebuf_r>
 1011800:	8100030b 	ldhu	r4,12(r16)
 1011804:	81400417 	ldw	r5,16(r16)
 1011808:	003fda06 	br	1011774 <__swsetup_r+0x44>
 101180c:	2080040c 	andi	r2,r4,16
 1011810:	103fed26 	beq	r2,zero,10117c8 <__swsetup_r+0x98>
 1011814:	2080010c 	andi	r2,r4,4
 1011818:	10001226 	beq	r2,zero,1011864 <__swsetup_r+0x134>
 101181c:	81400c17 	ldw	r5,48(r16)
 1011820:	28000526 	beq	r5,zero,1011838 <__swsetup_r+0x108>
 1011824:	80801004 	addi	r2,r16,64
 1011828:	28800226 	beq	r5,r2,1011834 <__swsetup_r+0x104>
 101182c:	8809883a 	mov	r4,r17
 1011830:	10136540 	call	1013654 <_free_r>
 1011834:	80000c15 	stw	zero,48(r16)
 1011838:	8080030b 	ldhu	r2,12(r16)
 101183c:	81400417 	ldw	r5,16(r16)
 1011840:	80000115 	stw	zero,4(r16)
 1011844:	10bff6cc 	andi	r2,r2,65499
 1011848:	8080030d 	sth	r2,12(r16)
 101184c:	81400015 	stw	r5,0(r16)
 1011850:	8080030b 	ldhu	r2,12(r16)
 1011854:	10800214 	ori	r2,r2,8
 1011858:	113fffcc 	andi	r4,r2,65535
 101185c:	8080030d 	sth	r2,12(r16)
 1011860:	003fc306 	br	1011770 <__swsetup_r+0x40>
 1011864:	81400417 	ldw	r5,16(r16)
 1011868:	003ff906 	br	1011850 <__swsetup_r+0x120>

0101186c <quorem>:
 101186c:	28c00417 	ldw	r3,16(r5)
 1011870:	20800417 	ldw	r2,16(r4)
 1011874:	defff604 	addi	sp,sp,-40
 1011878:	ddc00715 	stw	r23,28(sp)
 101187c:	dd400515 	stw	r21,20(sp)
 1011880:	dfc00915 	stw	ra,36(sp)
 1011884:	df000815 	stw	fp,32(sp)
 1011888:	dd800615 	stw	r22,24(sp)
 101188c:	dd000415 	stw	r20,16(sp)
 1011890:	dcc00315 	stw	r19,12(sp)
 1011894:	dc800215 	stw	r18,8(sp)
 1011898:	dc400115 	stw	r17,4(sp)
 101189c:	dc000015 	stw	r16,0(sp)
 10118a0:	202f883a 	mov	r23,r4
 10118a4:	282b883a 	mov	r21,r5
 10118a8:	10c07416 	blt	r2,r3,1011a7c <quorem+0x210>
 10118ac:	1c7fffc4 	addi	r17,r3,-1
 10118b0:	8c45883a 	add	r2,r17,r17
 10118b4:	1085883a 	add	r2,r2,r2
 10118b8:	2c000504 	addi	r16,r5,20
 10118bc:	24c00504 	addi	r19,r4,20
 10118c0:	14ed883a 	add	r22,r2,r19
 10118c4:	80a5883a 	add	r18,r16,r2
 10118c8:	b7000017 	ldw	fp,0(r22)
 10118cc:	91400017 	ldw	r5,0(r18)
 10118d0:	e009883a 	mov	r4,fp
 10118d4:	29400044 	addi	r5,r5,1
 10118d8:	1017ffc0 	call	1017ffc <__udivsi3>
 10118dc:	1029883a 	mov	r20,r2
 10118e0:	10003c1e 	bne	r2,zero,10119d4 <quorem+0x168>
 10118e4:	a80b883a 	mov	r5,r21
 10118e8:	b809883a 	mov	r4,r23
 10118ec:	10143380 	call	1014338 <__mcmp>
 10118f0:	10002b16 	blt	r2,zero,10119a0 <quorem+0x134>
 10118f4:	a5000044 	addi	r20,r20,1
 10118f8:	980f883a 	mov	r7,r19
 10118fc:	0011883a 	mov	r8,zero
 1011900:	0009883a 	mov	r4,zero
 1011904:	81400017 	ldw	r5,0(r16)
 1011908:	38c00017 	ldw	r3,0(r7)
 101190c:	84000104 	addi	r16,r16,4
 1011910:	28bfffcc 	andi	r2,r5,65535
 1011914:	2085883a 	add	r2,r4,r2
 1011918:	11bfffcc 	andi	r6,r2,65535
 101191c:	193fffcc 	andi	r4,r3,65535
 1011920:	1004d43a 	srli	r2,r2,16
 1011924:	280ad43a 	srli	r5,r5,16
 1011928:	2189c83a 	sub	r4,r4,r6
 101192c:	2209883a 	add	r4,r4,r8
 1011930:	1806d43a 	srli	r3,r3,16
 1011934:	288b883a 	add	r5,r5,r2
 1011938:	200dd43a 	srai	r6,r4,16
 101193c:	28bfffcc 	andi	r2,r5,65535
 1011940:	1887c83a 	sub	r3,r3,r2
 1011944:	1987883a 	add	r3,r3,r6
 1011948:	3900000d 	sth	r4,0(r7)
 101194c:	38c0008d 	sth	r3,2(r7)
 1011950:	2808d43a 	srli	r4,r5,16
 1011954:	39c00104 	addi	r7,r7,4
 1011958:	1811d43a 	srai	r8,r3,16
 101195c:	943fe92e 	bgeu	r18,r16,1011904 <quorem+0x98>
 1011960:	8c45883a 	add	r2,r17,r17
 1011964:	1085883a 	add	r2,r2,r2
 1011968:	9885883a 	add	r2,r19,r2
 101196c:	10c00017 	ldw	r3,0(r2)
 1011970:	18000b1e 	bne	r3,zero,10119a0 <quorem+0x134>
 1011974:	113fff04 	addi	r4,r2,-4
 1011978:	9900082e 	bgeu	r19,r4,101199c <quorem+0x130>
 101197c:	10bfff17 	ldw	r2,-4(r2)
 1011980:	10000326 	beq	r2,zero,1011990 <quorem+0x124>
 1011984:	00000506 	br	101199c <quorem+0x130>
 1011988:	20800017 	ldw	r2,0(r4)
 101198c:	1000031e 	bne	r2,zero,101199c <quorem+0x130>
 1011990:	213fff04 	addi	r4,r4,-4
 1011994:	8c7fffc4 	addi	r17,r17,-1
 1011998:	993ffb36 	bltu	r19,r4,1011988 <quorem+0x11c>
 101199c:	bc400415 	stw	r17,16(r23)
 10119a0:	a005883a 	mov	r2,r20
 10119a4:	dfc00917 	ldw	ra,36(sp)
 10119a8:	df000817 	ldw	fp,32(sp)
 10119ac:	ddc00717 	ldw	r23,28(sp)
 10119b0:	dd800617 	ldw	r22,24(sp)
 10119b4:	dd400517 	ldw	r21,20(sp)
 10119b8:	dd000417 	ldw	r20,16(sp)
 10119bc:	dcc00317 	ldw	r19,12(sp)
 10119c0:	dc800217 	ldw	r18,8(sp)
 10119c4:	dc400117 	ldw	r17,4(sp)
 10119c8:	dc000017 	ldw	r16,0(sp)
 10119cc:	dec00a04 	addi	sp,sp,40
 10119d0:	f800283a 	ret
 10119d4:	980f883a 	mov	r7,r19
 10119d8:	8011883a 	mov	r8,r16
 10119dc:	0013883a 	mov	r9,zero
 10119e0:	000d883a 	mov	r6,zero
 10119e4:	40c00017 	ldw	r3,0(r8)
 10119e8:	39000017 	ldw	r4,0(r7)
 10119ec:	42000104 	addi	r8,r8,4
 10119f0:	18bfffcc 	andi	r2,r3,65535
 10119f4:	a085383a 	mul	r2,r20,r2
 10119f8:	1806d43a 	srli	r3,r3,16
 10119fc:	217fffcc 	andi	r5,r4,65535
 1011a00:	3085883a 	add	r2,r6,r2
 1011a04:	11bfffcc 	andi	r6,r2,65535
 1011a08:	a0c7383a 	mul	r3,r20,r3
 1011a0c:	1004d43a 	srli	r2,r2,16
 1011a10:	298bc83a 	sub	r5,r5,r6
 1011a14:	2a4b883a 	add	r5,r5,r9
 1011a18:	2008d43a 	srli	r4,r4,16
 1011a1c:	1887883a 	add	r3,r3,r2
 1011a20:	280dd43a 	srai	r6,r5,16
 1011a24:	18bfffcc 	andi	r2,r3,65535
 1011a28:	2089c83a 	sub	r4,r4,r2
 1011a2c:	2189883a 	add	r4,r4,r6
 1011a30:	3900008d 	sth	r4,2(r7)
 1011a34:	3940000d 	sth	r5,0(r7)
 1011a38:	180cd43a 	srli	r6,r3,16
 1011a3c:	39c00104 	addi	r7,r7,4
 1011a40:	2013d43a 	srai	r9,r4,16
 1011a44:	923fe72e 	bgeu	r18,r8,10119e4 <quorem+0x178>
 1011a48:	e03fa61e 	bne	fp,zero,10118e4 <quorem+0x78>
 1011a4c:	b0ffff04 	addi	r3,r22,-4
 1011a50:	98c0082e 	bgeu	r19,r3,1011a74 <quorem+0x208>
 1011a54:	b0bfff17 	ldw	r2,-4(r22)
 1011a58:	10000326 	beq	r2,zero,1011a68 <quorem+0x1fc>
 1011a5c:	00000506 	br	1011a74 <quorem+0x208>
 1011a60:	18800017 	ldw	r2,0(r3)
 1011a64:	1000031e 	bne	r2,zero,1011a74 <quorem+0x208>
 1011a68:	18ffff04 	addi	r3,r3,-4
 1011a6c:	8c7fffc4 	addi	r17,r17,-1
 1011a70:	98fffb36 	bltu	r19,r3,1011a60 <quorem+0x1f4>
 1011a74:	bc400415 	stw	r17,16(r23)
 1011a78:	003f9a06 	br	10118e4 <quorem+0x78>
 1011a7c:	0005883a 	mov	r2,zero
 1011a80:	003fc806 	br	10119a4 <quorem+0x138>

01011a84 <_dtoa_r>:
 1011a84:	22001017 	ldw	r8,64(r4)
 1011a88:	deffda04 	addi	sp,sp,-152
 1011a8c:	dd402115 	stw	r21,132(sp)
 1011a90:	dd002015 	stw	r20,128(sp)
 1011a94:	dc801e15 	stw	r18,120(sp)
 1011a98:	dc401d15 	stw	r17,116(sp)
 1011a9c:	dfc02515 	stw	ra,148(sp)
 1011aa0:	df002415 	stw	fp,144(sp)
 1011aa4:	ddc02315 	stw	r23,140(sp)
 1011aa8:	dd802215 	stw	r22,136(sp)
 1011aac:	dcc01f15 	stw	r19,124(sp)
 1011ab0:	dc001c15 	stw	r16,112(sp)
 1011ab4:	d9001615 	stw	r4,88(sp)
 1011ab8:	3023883a 	mov	r17,r6
 1011abc:	2829883a 	mov	r20,r5
 1011ac0:	d9c01715 	stw	r7,92(sp)
 1011ac4:	dc802817 	ldw	r18,160(sp)
 1011ac8:	302b883a 	mov	r21,r6
 1011acc:	40000a26 	beq	r8,zero,1011af8 <_dtoa_r+0x74>
 1011ad0:	20801117 	ldw	r2,68(r4)
 1011ad4:	400b883a 	mov	r5,r8
 1011ad8:	40800115 	stw	r2,4(r8)
 1011adc:	20c01117 	ldw	r3,68(r4)
 1011ae0:	00800044 	movi	r2,1
 1011ae4:	10c4983a 	sll	r2,r2,r3
 1011ae8:	40800215 	stw	r2,8(r8)
 1011aec:	10141dc0 	call	10141dc <_Bfree>
 1011af0:	d8c01617 	ldw	r3,88(sp)
 1011af4:	18001015 	stw	zero,64(r3)
 1011af8:	8800a316 	blt	r17,zero,1011d88 <_dtoa_r+0x304>
 1011afc:	90000015 	stw	zero,0(r18)
 1011b00:	a8dffc2c 	andhi	r3,r21,32752
 1011b04:	009ffc34 	movhi	r2,32752
 1011b08:	18809126 	beq	r3,r2,1011d50 <_dtoa_r+0x2cc>
 1011b0c:	000d883a 	mov	r6,zero
 1011b10:	000f883a 	mov	r7,zero
 1011b14:	a009883a 	mov	r4,r20
 1011b18:	a80b883a 	mov	r5,r21
 1011b1c:	dd001215 	stw	r20,72(sp)
 1011b20:	dd401315 	stw	r21,76(sp)
 1011b24:	101793c0 	call	101793c <__nedf2>
 1011b28:	1000171e 	bne	r2,zero,1011b88 <_dtoa_r+0x104>
 1011b2c:	d9802717 	ldw	r6,156(sp)
 1011b30:	00800044 	movi	r2,1
 1011b34:	30800015 	stw	r2,0(r6)
 1011b38:	d8802917 	ldw	r2,164(sp)
 1011b3c:	10029b26 	beq	r2,zero,10125ac <_dtoa_r+0xb28>
 1011b40:	d9002917 	ldw	r4,164(sp)
 1011b44:	008040b4 	movhi	r2,258
 1011b48:	1096ce44 	addi	r2,r2,23353
 1011b4c:	10ffffc4 	addi	r3,r2,-1
 1011b50:	20800015 	stw	r2,0(r4)
 1011b54:	1805883a 	mov	r2,r3
 1011b58:	dfc02517 	ldw	ra,148(sp)
 1011b5c:	df002417 	ldw	fp,144(sp)
 1011b60:	ddc02317 	ldw	r23,140(sp)
 1011b64:	dd802217 	ldw	r22,136(sp)
 1011b68:	dd402117 	ldw	r21,132(sp)
 1011b6c:	dd002017 	ldw	r20,128(sp)
 1011b70:	dcc01f17 	ldw	r19,124(sp)
 1011b74:	dc801e17 	ldw	r18,120(sp)
 1011b78:	dc401d17 	ldw	r17,116(sp)
 1011b7c:	dc001c17 	ldw	r16,112(sp)
 1011b80:	dec02604 	addi	sp,sp,152
 1011b84:	f800283a 	ret
 1011b88:	d9001617 	ldw	r4,88(sp)
 1011b8c:	d9401217 	ldw	r5,72(sp)
 1011b90:	d8800104 	addi	r2,sp,4
 1011b94:	a80d883a 	mov	r6,r21
 1011b98:	d9c00204 	addi	r7,sp,8
 1011b9c:	d8800015 	stw	r2,0(sp)
 1011ba0:	10148180 	call	1014818 <__d2b>
 1011ba4:	d8800715 	stw	r2,28(sp)
 1011ba8:	a804d53a 	srli	r2,r21,20
 1011bac:	1101ffcc 	andi	r4,r2,2047
 1011bb0:	20008626 	beq	r4,zero,1011dcc <_dtoa_r+0x348>
 1011bb4:	d8c01217 	ldw	r3,72(sp)
 1011bb8:	00800434 	movhi	r2,16
 1011bbc:	10bfffc4 	addi	r2,r2,-1
 1011bc0:	ddc00117 	ldw	r23,4(sp)
 1011bc4:	a884703a 	and	r2,r21,r2
 1011bc8:	1811883a 	mov	r8,r3
 1011bcc:	124ffc34 	orhi	r9,r2,16368
 1011bd0:	25bf0044 	addi	r22,r4,-1023
 1011bd4:	d8000815 	stw	zero,32(sp)
 1011bd8:	0005883a 	mov	r2,zero
 1011bdc:	00cffe34 	movhi	r3,16376
 1011be0:	480b883a 	mov	r5,r9
 1011be4:	4009883a 	mov	r4,r8
 1011be8:	180f883a 	mov	r7,r3
 1011bec:	100d883a 	mov	r6,r2
 1011bf0:	10171a40 	call	10171a4 <__subdf3>
 1011bf4:	0218dbf4 	movhi	r8,25455
 1011bf8:	4210d844 	addi	r8,r8,17249
 1011bfc:	024ff4f4 	movhi	r9,16339
 1011c00:	4a61e9c4 	addi	r9,r9,-30809
 1011c04:	480f883a 	mov	r7,r9
 1011c08:	400d883a 	mov	r6,r8
 1011c0c:	180b883a 	mov	r5,r3
 1011c10:	1009883a 	mov	r4,r2
 1011c14:	10172980 	call	1017298 <__muldf3>
 1011c18:	0222d874 	movhi	r8,35681
 1011c1c:	42322cc4 	addi	r8,r8,-14157
 1011c20:	024ff1f4 	movhi	r9,16327
 1011c24:	4a628a04 	addi	r9,r9,-30168
 1011c28:	480f883a 	mov	r7,r9
 1011c2c:	400d883a 	mov	r6,r8
 1011c30:	180b883a 	mov	r5,r3
 1011c34:	1009883a 	mov	r4,r2
 1011c38:	10172240 	call	1017224 <__adddf3>
 1011c3c:	b009883a 	mov	r4,r22
 1011c40:	1021883a 	mov	r16,r2
 1011c44:	1823883a 	mov	r17,r3
 1011c48:	1017b5c0 	call	1017b5c <__floatsidf>
 1011c4c:	021427f4 	movhi	r8,20639
 1011c50:	421e7ec4 	addi	r8,r8,31227
 1011c54:	024ff4f4 	movhi	r9,16339
 1011c58:	4a5104c4 	addi	r9,r9,17427
 1011c5c:	480f883a 	mov	r7,r9
 1011c60:	400d883a 	mov	r6,r8
 1011c64:	180b883a 	mov	r5,r3
 1011c68:	1009883a 	mov	r4,r2
 1011c6c:	10172980 	call	1017298 <__muldf3>
 1011c70:	180f883a 	mov	r7,r3
 1011c74:	880b883a 	mov	r5,r17
 1011c78:	100d883a 	mov	r6,r2
 1011c7c:	8009883a 	mov	r4,r16
 1011c80:	10172240 	call	1017224 <__adddf3>
 1011c84:	1009883a 	mov	r4,r2
 1011c88:	180b883a 	mov	r5,r3
 1011c8c:	1021883a 	mov	r16,r2
 1011c90:	1823883a 	mov	r17,r3
 1011c94:	1017c540 	call	1017c54 <__fixdfsi>
 1011c98:	000d883a 	mov	r6,zero
 1011c9c:	000f883a 	mov	r7,zero
 1011ca0:	8009883a 	mov	r4,r16
 1011ca4:	880b883a 	mov	r5,r17
 1011ca8:	d8800d15 	stw	r2,52(sp)
 1011cac:	1017ad40 	call	1017ad4 <__ltdf2>
 1011cb0:	10031716 	blt	r2,zero,1012910 <_dtoa_r+0xe8c>
 1011cb4:	d8c00d17 	ldw	r3,52(sp)
 1011cb8:	00800584 	movi	r2,22
 1011cbc:	10c1482e 	bgeu	r2,r3,10121e0 <_dtoa_r+0x75c>
 1011cc0:	01000044 	movi	r4,1
 1011cc4:	d9000c15 	stw	r4,48(sp)
 1011cc8:	bd85c83a 	sub	r2,r23,r22
 1011ccc:	11bfffc4 	addi	r6,r2,-1
 1011cd0:	30030b16 	blt	r6,zero,1012900 <_dtoa_r+0xe7c>
 1011cd4:	d9800a15 	stw	r6,40(sp)
 1011cd8:	d8001115 	stw	zero,68(sp)
 1011cdc:	d8c00d17 	ldw	r3,52(sp)
 1011ce0:	1802ff16 	blt	r3,zero,10128e0 <_dtoa_r+0xe5c>
 1011ce4:	d9000a17 	ldw	r4,40(sp)
 1011ce8:	d8c00915 	stw	r3,36(sp)
 1011cec:	d8001015 	stw	zero,64(sp)
 1011cf0:	20c9883a 	add	r4,r4,r3
 1011cf4:	d9000a15 	stw	r4,40(sp)
 1011cf8:	d9001717 	ldw	r4,92(sp)
 1011cfc:	00800244 	movi	r2,9
 1011d00:	11004636 	bltu	r2,r4,1011e1c <_dtoa_r+0x398>
 1011d04:	00800144 	movi	r2,5
 1011d08:	11020416 	blt	r2,r4,101251c <_dtoa_r+0xa98>
 1011d0c:	04400044 	movi	r17,1
 1011d10:	d8c01717 	ldw	r3,92(sp)
 1011d14:	00800144 	movi	r2,5
 1011d18:	10c1ed36 	bltu	r2,r3,10124d0 <_dtoa_r+0xa4c>
 1011d1c:	18c5883a 	add	r2,r3,r3
 1011d20:	1085883a 	add	r2,r2,r2
 1011d24:	00c04074 	movhi	r3,257
 1011d28:	18c74e04 	addi	r3,r3,7480
 1011d2c:	10c5883a 	add	r2,r2,r3
 1011d30:	11000017 	ldw	r4,0(r2)
 1011d34:	2000683a 	jmp	r4
 1011d38:	01011e24 	muli	r4,zero,1144
 1011d3c:	01011e24 	muli	r4,zero,1144
 1011d40:	01012824 	muli	r4,zero,1184
 1011d44:	010127fc 	xorhi	r4,zero,1183
 1011d48:	01012840 	call	101284 <OSCtxSw_SWITCH_PC+0x101244>
 1011d4c:	0101284c 	andi	r4,zero,1185
 1011d50:	d9002717 	ldw	r4,156(sp)
 1011d54:	0089c3c4 	movi	r2,9999
 1011d58:	20800015 	stw	r2,0(r4)
 1011d5c:	a0001026 	beq	r20,zero,1011da0 <_dtoa_r+0x31c>
 1011d60:	00c040b4 	movhi	r3,258
 1011d64:	18d77a04 	addi	r3,r3,24040
 1011d68:	d9802917 	ldw	r6,164(sp)
 1011d6c:	303f7926 	beq	r6,zero,1011b54 <_dtoa_r+0xd0>
 1011d70:	188000c7 	ldb	r2,3(r3)
 1011d74:	190000c4 	addi	r4,r3,3
 1011d78:	1000101e 	bne	r2,zero,1011dbc <_dtoa_r+0x338>
 1011d7c:	d8802917 	ldw	r2,164(sp)
 1011d80:	11000015 	stw	r4,0(r2)
 1011d84:	003f7306 	br	1011b54 <_dtoa_r+0xd0>
 1011d88:	00a00034 	movhi	r2,32768
 1011d8c:	10bfffc4 	addi	r2,r2,-1
 1011d90:	00c00044 	movi	r3,1
 1011d94:	88aa703a 	and	r21,r17,r2
 1011d98:	90c00015 	stw	r3,0(r18)
 1011d9c:	003f5806 	br	1011b00 <_dtoa_r+0x7c>
 1011da0:	00800434 	movhi	r2,16
 1011da4:	10bfffc4 	addi	r2,r2,-1
 1011da8:	a884703a 	and	r2,r21,r2
 1011dac:	103fec1e 	bne	r2,zero,1011d60 <_dtoa_r+0x2dc>
 1011db0:	00c040b4 	movhi	r3,258
 1011db4:	18d77704 	addi	r3,r3,24028
 1011db8:	003feb06 	br	1011d68 <_dtoa_r+0x2e4>
 1011dbc:	d8802917 	ldw	r2,164(sp)
 1011dc0:	19000204 	addi	r4,r3,8
 1011dc4:	11000015 	stw	r4,0(r2)
 1011dc8:	003f6206 	br	1011b54 <_dtoa_r+0xd0>
 1011dcc:	ddc00117 	ldw	r23,4(sp)
 1011dd0:	d8800217 	ldw	r2,8(sp)
 1011dd4:	01000804 	movi	r4,32
 1011dd8:	b8c10c84 	addi	r3,r23,1074
 1011ddc:	18a3883a 	add	r17,r3,r2
 1011de0:	2441b80e 	bge	r4,r17,10124c4 <_dtoa_r+0xa40>
 1011de4:	00c01004 	movi	r3,64
 1011de8:	1c47c83a 	sub	r3,r3,r17
 1011dec:	88bff804 	addi	r2,r17,-32
 1011df0:	a8c6983a 	sll	r3,r21,r3
 1011df4:	a084d83a 	srl	r2,r20,r2
 1011df8:	1888b03a 	or	r4,r3,r2
 1011dfc:	1017d2c0 	call	1017d2c <__floatunsidf>
 1011e00:	1011883a 	mov	r8,r2
 1011e04:	00bf8434 	movhi	r2,65040
 1011e08:	01000044 	movi	r4,1
 1011e0c:	10d3883a 	add	r9,r2,r3
 1011e10:	8dbef344 	addi	r22,r17,-1075
 1011e14:	d9000815 	stw	r4,32(sp)
 1011e18:	003f6f06 	br	1011bd8 <_dtoa_r+0x154>
 1011e1c:	d8001715 	stw	zero,92(sp)
 1011e20:	04400044 	movi	r17,1
 1011e24:	00bfffc4 	movi	r2,-1
 1011e28:	00c00044 	movi	r3,1
 1011e2c:	d8800e15 	stw	r2,56(sp)
 1011e30:	d8002615 	stw	zero,152(sp)
 1011e34:	d8800f15 	stw	r2,60(sp)
 1011e38:	d8c00b15 	stw	r3,44(sp)
 1011e3c:	1021883a 	mov	r16,r2
 1011e40:	d8801617 	ldw	r2,88(sp)
 1011e44:	10001115 	stw	zero,68(r2)
 1011e48:	d8801617 	ldw	r2,88(sp)
 1011e4c:	11401117 	ldw	r5,68(r2)
 1011e50:	1009883a 	mov	r4,r2
 1011e54:	101475c0 	call	101475c <_Balloc>
 1011e58:	d8c01617 	ldw	r3,88(sp)
 1011e5c:	d8800515 	stw	r2,20(sp)
 1011e60:	18801015 	stw	r2,64(r3)
 1011e64:	00800384 	movi	r2,14
 1011e68:	14006836 	bltu	r2,r16,101200c <_dtoa_r+0x588>
 1011e6c:	8805003a 	cmpeq	r2,r17,zero
 1011e70:	1000661e 	bne	r2,zero,101200c <_dtoa_r+0x588>
 1011e74:	d9000d17 	ldw	r4,52(sp)
 1011e78:	0102300e 	bge	zero,r4,101273c <_dtoa_r+0xcb8>
 1011e7c:	208003cc 	andi	r2,r4,15
 1011e80:	100490fa 	slli	r2,r2,3
 1011e84:	2025d13a 	srai	r18,r4,4
 1011e88:	00c040b4 	movhi	r3,258
 1011e8c:	18d78c04 	addi	r3,r3,24112
 1011e90:	10c5883a 	add	r2,r2,r3
 1011e94:	90c0040c 	andi	r3,r18,16
 1011e98:	14000017 	ldw	r16,0(r2)
 1011e9c:	14400117 	ldw	r17,4(r2)
 1011ea0:	18036a1e 	bne	r3,zero,1012c4c <_dtoa_r+0x11c8>
 1011ea4:	05800084 	movi	r22,2
 1011ea8:	90001026 	beq	r18,zero,1011eec <_dtoa_r+0x468>
 1011eac:	04c040b4 	movhi	r19,258
 1011eb0:	9cd7be04 	addi	r19,r19,24312
 1011eb4:	9080004c 	andi	r2,r18,1
 1011eb8:	1005003a 	cmpeq	r2,r2,zero
 1011ebc:	1000081e 	bne	r2,zero,1011ee0 <_dtoa_r+0x45c>
 1011ec0:	99800017 	ldw	r6,0(r19)
 1011ec4:	99c00117 	ldw	r7,4(r19)
 1011ec8:	880b883a 	mov	r5,r17
 1011ecc:	8009883a 	mov	r4,r16
 1011ed0:	10172980 	call	1017298 <__muldf3>
 1011ed4:	1021883a 	mov	r16,r2
 1011ed8:	b5800044 	addi	r22,r22,1
 1011edc:	1823883a 	mov	r17,r3
 1011ee0:	9025d07a 	srai	r18,r18,1
 1011ee4:	9cc00204 	addi	r19,r19,8
 1011ee8:	903ff21e 	bne	r18,zero,1011eb4 <_dtoa_r+0x430>
 1011eec:	a80b883a 	mov	r5,r21
 1011ef0:	a009883a 	mov	r4,r20
 1011ef4:	880f883a 	mov	r7,r17
 1011ef8:	800d883a 	mov	r6,r16
 1011efc:	101765c0 	call	101765c <__divdf3>
 1011f00:	1029883a 	mov	r20,r2
 1011f04:	182b883a 	mov	r21,r3
 1011f08:	d8c00c17 	ldw	r3,48(sp)
 1011f0c:	1805003a 	cmpeq	r2,r3,zero
 1011f10:	1000081e 	bne	r2,zero,1011f34 <_dtoa_r+0x4b0>
 1011f14:	0005883a 	mov	r2,zero
 1011f18:	00cffc34 	movhi	r3,16368
 1011f1c:	180f883a 	mov	r7,r3
 1011f20:	a009883a 	mov	r4,r20
 1011f24:	a80b883a 	mov	r5,r21
 1011f28:	100d883a 	mov	r6,r2
 1011f2c:	1017ad40 	call	1017ad4 <__ltdf2>
 1011f30:	1003fe16 	blt	r2,zero,1012f2c <_dtoa_r+0x14a8>
 1011f34:	b009883a 	mov	r4,r22
 1011f38:	1017b5c0 	call	1017b5c <__floatsidf>
 1011f3c:	180b883a 	mov	r5,r3
 1011f40:	1009883a 	mov	r4,r2
 1011f44:	a00d883a 	mov	r6,r20
 1011f48:	a80f883a 	mov	r7,r21
 1011f4c:	10172980 	call	1017298 <__muldf3>
 1011f50:	0011883a 	mov	r8,zero
 1011f54:	02500734 	movhi	r9,16412
 1011f58:	1009883a 	mov	r4,r2
 1011f5c:	180b883a 	mov	r5,r3
 1011f60:	480f883a 	mov	r7,r9
 1011f64:	400d883a 	mov	r6,r8
 1011f68:	10172240 	call	1017224 <__adddf3>
 1011f6c:	d9000f17 	ldw	r4,60(sp)
 1011f70:	102d883a 	mov	r22,r2
 1011f74:	00bf3034 	movhi	r2,64704
 1011f78:	18b9883a 	add	fp,r3,r2
 1011f7c:	e02f883a 	mov	r23,fp
 1011f80:	20028f1e 	bne	r4,zero,10129c0 <_dtoa_r+0xf3c>
 1011f84:	0005883a 	mov	r2,zero
 1011f88:	00d00534 	movhi	r3,16404
 1011f8c:	a009883a 	mov	r4,r20
 1011f90:	a80b883a 	mov	r5,r21
 1011f94:	180f883a 	mov	r7,r3
 1011f98:	100d883a 	mov	r6,r2
 1011f9c:	10171a40 	call	10171a4 <__subdf3>
 1011fa0:	1009883a 	mov	r4,r2
 1011fa4:	e00f883a 	mov	r7,fp
 1011fa8:	180b883a 	mov	r5,r3
 1011fac:	b00d883a 	mov	r6,r22
 1011fb0:	1025883a 	mov	r18,r2
 1011fb4:	1827883a 	mov	r19,r3
 1011fb8:	10179c40 	call	10179c4 <__gtdf2>
 1011fbc:	00834f16 	blt	zero,r2,1012cfc <_dtoa_r+0x1278>
 1011fc0:	e0e0003c 	xorhi	r3,fp,32768
 1011fc4:	9009883a 	mov	r4,r18
 1011fc8:	980b883a 	mov	r5,r19
 1011fcc:	180f883a 	mov	r7,r3
 1011fd0:	b00d883a 	mov	r6,r22
 1011fd4:	1017ad40 	call	1017ad4 <__ltdf2>
 1011fd8:	1000080e 	bge	r2,zero,1011ffc <_dtoa_r+0x578>
 1011fdc:	0027883a 	mov	r19,zero
 1011fe0:	0025883a 	mov	r18,zero
 1011fe4:	d8802617 	ldw	r2,152(sp)
 1011fe8:	df000517 	ldw	fp,20(sp)
 1011fec:	d8000615 	stw	zero,24(sp)
 1011ff0:	0084303a 	nor	r2,zero,r2
 1011ff4:	d8800d15 	stw	r2,52(sp)
 1011ff8:	00019b06 	br	1012668 <_dtoa_r+0xbe4>
 1011ffc:	d9801217 	ldw	r6,72(sp)
 1012000:	d8801317 	ldw	r2,76(sp)
 1012004:	3029883a 	mov	r20,r6
 1012008:	102b883a 	mov	r21,r2
 101200c:	d8c00217 	ldw	r3,8(sp)
 1012010:	18008516 	blt	r3,zero,1012228 <_dtoa_r+0x7a4>
 1012014:	d9000d17 	ldw	r4,52(sp)
 1012018:	00800384 	movi	r2,14
 101201c:	11008216 	blt	r2,r4,1012228 <_dtoa_r+0x7a4>
 1012020:	200490fa 	slli	r2,r4,3
 1012024:	d9802617 	ldw	r6,152(sp)
 1012028:	00c040b4 	movhi	r3,258
 101202c:	18d78c04 	addi	r3,r3,24112
 1012030:	10c5883a 	add	r2,r2,r3
 1012034:	14800017 	ldw	r18,0(r2)
 1012038:	14c00117 	ldw	r19,4(r2)
 101203c:	30031e16 	blt	r6,zero,1012cb8 <_dtoa_r+0x1234>
 1012040:	d9000517 	ldw	r4,20(sp)
 1012044:	d8c00f17 	ldw	r3,60(sp)
 1012048:	a823883a 	mov	r17,r21
 101204c:	a021883a 	mov	r16,r20
 1012050:	192b883a 	add	r21,r3,r4
 1012054:	2039883a 	mov	fp,r4
 1012058:	00000f06 	br	1012098 <_dtoa_r+0x614>
 101205c:	0005883a 	mov	r2,zero
 1012060:	00d00934 	movhi	r3,16420
 1012064:	5009883a 	mov	r4,r10
 1012068:	580b883a 	mov	r5,r11
 101206c:	180f883a 	mov	r7,r3
 1012070:	100d883a 	mov	r6,r2
 1012074:	10172980 	call	1017298 <__muldf3>
 1012078:	180b883a 	mov	r5,r3
 101207c:	000d883a 	mov	r6,zero
 1012080:	000f883a 	mov	r7,zero
 1012084:	1009883a 	mov	r4,r2
 1012088:	1021883a 	mov	r16,r2
 101208c:	1823883a 	mov	r17,r3
 1012090:	101793c0 	call	101793c <__nedf2>
 1012094:	10004526 	beq	r2,zero,10121ac <_dtoa_r+0x728>
 1012098:	900d883a 	mov	r6,r18
 101209c:	980f883a 	mov	r7,r19
 10120a0:	8009883a 	mov	r4,r16
 10120a4:	880b883a 	mov	r5,r17
 10120a8:	101765c0 	call	101765c <__divdf3>
 10120ac:	180b883a 	mov	r5,r3
 10120b0:	1009883a 	mov	r4,r2
 10120b4:	1017c540 	call	1017c54 <__fixdfsi>
 10120b8:	1009883a 	mov	r4,r2
 10120bc:	1029883a 	mov	r20,r2
 10120c0:	1017b5c0 	call	1017b5c <__floatsidf>
 10120c4:	180f883a 	mov	r7,r3
 10120c8:	9009883a 	mov	r4,r18
 10120cc:	980b883a 	mov	r5,r19
 10120d0:	100d883a 	mov	r6,r2
 10120d4:	10172980 	call	1017298 <__muldf3>
 10120d8:	180f883a 	mov	r7,r3
 10120dc:	880b883a 	mov	r5,r17
 10120e0:	8009883a 	mov	r4,r16
 10120e4:	100d883a 	mov	r6,r2
 10120e8:	10171a40 	call	10171a4 <__subdf3>
 10120ec:	1015883a 	mov	r10,r2
 10120f0:	a0800c04 	addi	r2,r20,48
 10120f4:	e0800005 	stb	r2,0(fp)
 10120f8:	e7000044 	addi	fp,fp,1
 10120fc:	1817883a 	mov	r11,r3
 1012100:	e57fd61e 	bne	fp,r21,101205c <_dtoa_r+0x5d8>
 1012104:	500d883a 	mov	r6,r10
 1012108:	180f883a 	mov	r7,r3
 101210c:	5009883a 	mov	r4,r10
 1012110:	180b883a 	mov	r5,r3
 1012114:	10172240 	call	1017224 <__adddf3>
 1012118:	100d883a 	mov	r6,r2
 101211c:	9009883a 	mov	r4,r18
 1012120:	980b883a 	mov	r5,r19
 1012124:	180f883a 	mov	r7,r3
 1012128:	1021883a 	mov	r16,r2
 101212c:	1823883a 	mov	r17,r3
 1012130:	1017ad40 	call	1017ad4 <__ltdf2>
 1012134:	10000816 	blt	r2,zero,1012158 <_dtoa_r+0x6d4>
 1012138:	980b883a 	mov	r5,r19
 101213c:	800d883a 	mov	r6,r16
 1012140:	880f883a 	mov	r7,r17
 1012144:	9009883a 	mov	r4,r18
 1012148:	10178b40 	call	10178b4 <__eqdf2>
 101214c:	1000171e 	bne	r2,zero,10121ac <_dtoa_r+0x728>
 1012150:	a080004c 	andi	r2,r20,1
 1012154:	10001526 	beq	r2,zero,10121ac <_dtoa_r+0x728>
 1012158:	d8800d17 	ldw	r2,52(sp)
 101215c:	d8800415 	stw	r2,16(sp)
 1012160:	e009883a 	mov	r4,fp
 1012164:	213fffc4 	addi	r4,r4,-1
 1012168:	20c00007 	ldb	r3,0(r4)
 101216c:	00800e44 	movi	r2,57
 1012170:	1880081e 	bne	r3,r2,1012194 <_dtoa_r+0x710>
 1012174:	d8800517 	ldw	r2,20(sp)
 1012178:	113ffa1e 	bne	r2,r4,1012164 <_dtoa_r+0x6e0>
 101217c:	d8c00417 	ldw	r3,16(sp)
 1012180:	d9800517 	ldw	r6,20(sp)
 1012184:	00800c04 	movi	r2,48
 1012188:	18c00044 	addi	r3,r3,1
 101218c:	d8c00415 	stw	r3,16(sp)
 1012190:	30800005 	stb	r2,0(r6)
 1012194:	20800003 	ldbu	r2,0(r4)
 1012198:	d8c00417 	ldw	r3,16(sp)
 101219c:	27000044 	addi	fp,r4,1
 10121a0:	10800044 	addi	r2,r2,1
 10121a4:	d8c00d15 	stw	r3,52(sp)
 10121a8:	20800005 	stb	r2,0(r4)
 10121ac:	d9001617 	ldw	r4,88(sp)
 10121b0:	d9400717 	ldw	r5,28(sp)
 10121b4:	10141dc0 	call	10141dc <_Bfree>
 10121b8:	e0000005 	stb	zero,0(fp)
 10121bc:	d9800d17 	ldw	r6,52(sp)
 10121c0:	d8c02717 	ldw	r3,156(sp)
 10121c4:	d9002917 	ldw	r4,164(sp)
 10121c8:	30800044 	addi	r2,r6,1
 10121cc:	18800015 	stw	r2,0(r3)
 10121d0:	20029c26 	beq	r4,zero,1012c44 <_dtoa_r+0x11c0>
 10121d4:	d8c00517 	ldw	r3,20(sp)
 10121d8:	27000015 	stw	fp,0(r4)
 10121dc:	003e5d06 	br	1011b54 <_dtoa_r+0xd0>
 10121e0:	d9800d17 	ldw	r6,52(sp)
 10121e4:	00c040b4 	movhi	r3,258
 10121e8:	18d78c04 	addi	r3,r3,24112
 10121ec:	d9001217 	ldw	r4,72(sp)
 10121f0:	300490fa 	slli	r2,r6,3
 10121f4:	d9401317 	ldw	r5,76(sp)
 10121f8:	10c5883a 	add	r2,r2,r3
 10121fc:	12000017 	ldw	r8,0(r2)
 1012200:	12400117 	ldw	r9,4(r2)
 1012204:	400d883a 	mov	r6,r8
 1012208:	480f883a 	mov	r7,r9
 101220c:	1017ad40 	call	1017ad4 <__ltdf2>
 1012210:	1000030e 	bge	r2,zero,1012220 <_dtoa_r+0x79c>
 1012214:	d8800d17 	ldw	r2,52(sp)
 1012218:	10bfffc4 	addi	r2,r2,-1
 101221c:	d8800d15 	stw	r2,52(sp)
 1012220:	d8000c15 	stw	zero,48(sp)
 1012224:	003ea806 	br	1011cc8 <_dtoa_r+0x244>
 1012228:	d9000b17 	ldw	r4,44(sp)
 101222c:	202cc03a 	cmpne	r22,r4,zero
 1012230:	b000c71e 	bne	r22,zero,1012550 <_dtoa_r+0xacc>
 1012234:	dc001117 	ldw	r16,68(sp)
 1012238:	dc801017 	ldw	r18,64(sp)
 101223c:	0027883a 	mov	r19,zero
 1012240:	04000b0e 	bge	zero,r16,1012270 <_dtoa_r+0x7ec>
 1012244:	d8c00a17 	ldw	r3,40(sp)
 1012248:	00c0090e 	bge	zero,r3,1012270 <_dtoa_r+0x7ec>
 101224c:	8005883a 	mov	r2,r16
 1012250:	1c011316 	blt	r3,r16,10126a0 <_dtoa_r+0xc1c>
 1012254:	d9000a17 	ldw	r4,40(sp)
 1012258:	d9801117 	ldw	r6,68(sp)
 101225c:	80a1c83a 	sub	r16,r16,r2
 1012260:	2089c83a 	sub	r4,r4,r2
 1012264:	308dc83a 	sub	r6,r6,r2
 1012268:	d9000a15 	stw	r4,40(sp)
 101226c:	d9801115 	stw	r6,68(sp)
 1012270:	d8801017 	ldw	r2,64(sp)
 1012274:	0080150e 	bge	zero,r2,10122cc <_dtoa_r+0x848>
 1012278:	d8c00b17 	ldw	r3,44(sp)
 101227c:	1805003a 	cmpeq	r2,r3,zero
 1012280:	1001c91e 	bne	r2,zero,10129a8 <_dtoa_r+0xf24>
 1012284:	04800e0e 	bge	zero,r18,10122c0 <_dtoa_r+0x83c>
 1012288:	d9001617 	ldw	r4,88(sp)
 101228c:	980b883a 	mov	r5,r19
 1012290:	900d883a 	mov	r6,r18
 1012294:	1014f900 	call	1014f90 <__pow5mult>
 1012298:	d9001617 	ldw	r4,88(sp)
 101229c:	d9800717 	ldw	r6,28(sp)
 10122a0:	100b883a 	mov	r5,r2
 10122a4:	1027883a 	mov	r19,r2
 10122a8:	1014c6c0 	call	1014c6c <__multiply>
 10122ac:	d9001617 	ldw	r4,88(sp)
 10122b0:	d9400717 	ldw	r5,28(sp)
 10122b4:	1023883a 	mov	r17,r2
 10122b8:	10141dc0 	call	10141dc <_Bfree>
 10122bc:	dc400715 	stw	r17,28(sp)
 10122c0:	d9001017 	ldw	r4,64(sp)
 10122c4:	248dc83a 	sub	r6,r4,r18
 10122c8:	30010e1e 	bne	r6,zero,1012704 <_dtoa_r+0xc80>
 10122cc:	d9001617 	ldw	r4,88(sp)
 10122d0:	04400044 	movi	r17,1
 10122d4:	880b883a 	mov	r5,r17
 10122d8:	1014e540 	call	1014e54 <__i2b>
 10122dc:	d9800917 	ldw	r6,36(sp)
 10122e0:	1025883a 	mov	r18,r2
 10122e4:	0180040e 	bge	zero,r6,10122f8 <_dtoa_r+0x874>
 10122e8:	d9001617 	ldw	r4,88(sp)
 10122ec:	100b883a 	mov	r5,r2
 10122f0:	1014f900 	call	1014f90 <__pow5mult>
 10122f4:	1025883a 	mov	r18,r2
 10122f8:	d8801717 	ldw	r2,92(sp)
 10122fc:	8880f30e 	bge	r17,r2,10126cc <_dtoa_r+0xc48>
 1012300:	0023883a 	mov	r17,zero
 1012304:	d9800917 	ldw	r6,36(sp)
 1012308:	30019e1e 	bne	r6,zero,1012984 <_dtoa_r+0xf00>
 101230c:	00c00044 	movi	r3,1
 1012310:	d9000a17 	ldw	r4,40(sp)
 1012314:	20c5883a 	add	r2,r4,r3
 1012318:	10c007cc 	andi	r3,r2,31
 101231c:	1800841e 	bne	r3,zero,1012530 <_dtoa_r+0xaac>
 1012320:	00800704 	movi	r2,28
 1012324:	d9000a17 	ldw	r4,40(sp)
 1012328:	d9801117 	ldw	r6,68(sp)
 101232c:	80a1883a 	add	r16,r16,r2
 1012330:	2089883a 	add	r4,r4,r2
 1012334:	308d883a 	add	r6,r6,r2
 1012338:	d9000a15 	stw	r4,40(sp)
 101233c:	d9801115 	stw	r6,68(sp)
 1012340:	d8801117 	ldw	r2,68(sp)
 1012344:	0080050e 	bge	zero,r2,101235c <_dtoa_r+0x8d8>
 1012348:	d9400717 	ldw	r5,28(sp)
 101234c:	d9001617 	ldw	r4,88(sp)
 1012350:	100d883a 	mov	r6,r2
 1012354:	1014b200 	call	1014b20 <__lshift>
 1012358:	d8800715 	stw	r2,28(sp)
 101235c:	d8c00a17 	ldw	r3,40(sp)
 1012360:	00c0050e 	bge	zero,r3,1012378 <_dtoa_r+0x8f4>
 1012364:	d9001617 	ldw	r4,88(sp)
 1012368:	900b883a 	mov	r5,r18
 101236c:	180d883a 	mov	r6,r3
 1012370:	1014b200 	call	1014b20 <__lshift>
 1012374:	1025883a 	mov	r18,r2
 1012378:	d9000c17 	ldw	r4,48(sp)
 101237c:	2005003a 	cmpeq	r2,r4,zero
 1012380:	10016f26 	beq	r2,zero,1012940 <_dtoa_r+0xebc>
 1012384:	d9000f17 	ldw	r4,60(sp)
 1012388:	0102170e 	bge	zero,r4,1012be8 <_dtoa_r+0x1164>
 101238c:	d9800b17 	ldw	r6,44(sp)
 1012390:	3005003a 	cmpeq	r2,r6,zero
 1012394:	1000881e 	bne	r2,zero,10125b8 <_dtoa_r+0xb34>
 1012398:	0400050e 	bge	zero,r16,10123b0 <_dtoa_r+0x92c>
 101239c:	d9001617 	ldw	r4,88(sp)
 10123a0:	980b883a 	mov	r5,r19
 10123a4:	800d883a 	mov	r6,r16
 10123a8:	1014b200 	call	1014b20 <__lshift>
 10123ac:	1027883a 	mov	r19,r2
 10123b0:	8804c03a 	cmpne	r2,r17,zero
 10123b4:	1002541e 	bne	r2,zero,1012d08 <_dtoa_r+0x1284>
 10123b8:	980b883a 	mov	r5,r19
 10123bc:	dd800517 	ldw	r22,20(sp)
 10123c0:	dcc00615 	stw	r19,24(sp)
 10123c4:	a700004c 	andi	fp,r20,1
 10123c8:	2827883a 	mov	r19,r5
 10123cc:	d9000717 	ldw	r4,28(sp)
 10123d0:	900b883a 	mov	r5,r18
 10123d4:	101186c0 	call	101186c <quorem>
 10123d8:	d9000717 	ldw	r4,28(sp)
 10123dc:	d9400617 	ldw	r5,24(sp)
 10123e0:	1023883a 	mov	r17,r2
 10123e4:	8dc00c04 	addi	r23,r17,48
 10123e8:	10143380 	call	1014338 <__mcmp>
 10123ec:	d9001617 	ldw	r4,88(sp)
 10123f0:	900b883a 	mov	r5,r18
 10123f4:	980d883a 	mov	r6,r19
 10123f8:	1029883a 	mov	r20,r2
 10123fc:	10149940 	call	1014994 <__mdiff>
 1012400:	102b883a 	mov	r21,r2
 1012404:	10800317 	ldw	r2,12(r2)
 1012408:	1001281e 	bne	r2,zero,10128ac <_dtoa_r+0xe28>
 101240c:	d9000717 	ldw	r4,28(sp)
 1012410:	a80b883a 	mov	r5,r21
 1012414:	10143380 	call	1014338 <__mcmp>
 1012418:	d9001617 	ldw	r4,88(sp)
 101241c:	1021883a 	mov	r16,r2
 1012420:	a80b883a 	mov	r5,r21
 1012424:	10141dc0 	call	10141dc <_Bfree>
 1012428:	8000041e 	bne	r16,zero,101243c <_dtoa_r+0x9b8>
 101242c:	d8801717 	ldw	r2,92(sp)
 1012430:	1000021e 	bne	r2,zero,101243c <_dtoa_r+0x9b8>
 1012434:	e004c03a 	cmpne	r2,fp,zero
 1012438:	10011726 	beq	r2,zero,1012898 <_dtoa_r+0xe14>
 101243c:	a0010616 	blt	r20,zero,1012858 <_dtoa_r+0xdd4>
 1012440:	a000041e 	bne	r20,zero,1012454 <_dtoa_r+0x9d0>
 1012444:	d8c01717 	ldw	r3,92(sp)
 1012448:	1800021e 	bne	r3,zero,1012454 <_dtoa_r+0x9d0>
 101244c:	e004c03a 	cmpne	r2,fp,zero
 1012450:	10010126 	beq	r2,zero,1012858 <_dtoa_r+0xdd4>
 1012454:	04023d16 	blt	zero,r16,1012d4c <_dtoa_r+0x12c8>
 1012458:	b5c00005 	stb	r23,0(r22)
 101245c:	d9800517 	ldw	r6,20(sp)
 1012460:	d9000f17 	ldw	r4,60(sp)
 1012464:	b5800044 	addi	r22,r22,1
 1012468:	3105883a 	add	r2,r6,r4
 101246c:	b0806526 	beq	r22,r2,1012604 <_dtoa_r+0xb80>
 1012470:	d9400717 	ldw	r5,28(sp)
 1012474:	d9001617 	ldw	r4,88(sp)
 1012478:	01800284 	movi	r6,10
 101247c:	000f883a 	mov	r7,zero
 1012480:	1014e900 	call	1014e90 <__multadd>
 1012484:	d8800715 	stw	r2,28(sp)
 1012488:	d8800617 	ldw	r2,24(sp)
 101248c:	14c10c26 	beq	r2,r19,10128c0 <_dtoa_r+0xe3c>
 1012490:	d9400617 	ldw	r5,24(sp)
 1012494:	d9001617 	ldw	r4,88(sp)
 1012498:	01800284 	movi	r6,10
 101249c:	000f883a 	mov	r7,zero
 10124a0:	1014e900 	call	1014e90 <__multadd>
 10124a4:	d9001617 	ldw	r4,88(sp)
 10124a8:	980b883a 	mov	r5,r19
 10124ac:	01800284 	movi	r6,10
 10124b0:	000f883a 	mov	r7,zero
 10124b4:	d8800615 	stw	r2,24(sp)
 10124b8:	1014e900 	call	1014e90 <__multadd>
 10124bc:	1027883a 	mov	r19,r2
 10124c0:	003fc206 	br	10123cc <_dtoa_r+0x948>
 10124c4:	2445c83a 	sub	r2,r4,r17
 10124c8:	a088983a 	sll	r4,r20,r2
 10124cc:	003e4b06 	br	1011dfc <_dtoa_r+0x378>
 10124d0:	01bfffc4 	movi	r6,-1
 10124d4:	00800044 	movi	r2,1
 10124d8:	d9800e15 	stw	r6,56(sp)
 10124dc:	d9800f15 	stw	r6,60(sp)
 10124e0:	d8800b15 	stw	r2,44(sp)
 10124e4:	d8c01617 	ldw	r3,88(sp)
 10124e8:	008005c4 	movi	r2,23
 10124ec:	18001115 	stw	zero,68(r3)
 10124f0:	1580082e 	bgeu	r2,r22,1012514 <_dtoa_r+0xa90>
 10124f4:	00c00104 	movi	r3,4
 10124f8:	0009883a 	mov	r4,zero
 10124fc:	18c7883a 	add	r3,r3,r3
 1012500:	18800504 	addi	r2,r3,20
 1012504:	21000044 	addi	r4,r4,1
 1012508:	b0bffc2e 	bgeu	r22,r2,10124fc <_dtoa_r+0xa78>
 101250c:	d9801617 	ldw	r6,88(sp)
 1012510:	31001115 	stw	r4,68(r6)
 1012514:	dc000f17 	ldw	r16,60(sp)
 1012518:	003e4b06 	br	1011e48 <_dtoa_r+0x3c4>
 101251c:	d9801717 	ldw	r6,92(sp)
 1012520:	0023883a 	mov	r17,zero
 1012524:	31bfff04 	addi	r6,r6,-4
 1012528:	d9801715 	stw	r6,92(sp)
 101252c:	003df806 	br	1011d10 <_dtoa_r+0x28c>
 1012530:	00800804 	movi	r2,32
 1012534:	10c9c83a 	sub	r4,r2,r3
 1012538:	00c00104 	movi	r3,4
 101253c:	19005a16 	blt	r3,r4,10126a8 <_dtoa_r+0xc24>
 1012540:	008000c4 	movi	r2,3
 1012544:	113f7e16 	blt	r2,r4,1012340 <_dtoa_r+0x8bc>
 1012548:	20800704 	addi	r2,r4,28
 101254c:	003f7506 	br	1012324 <_dtoa_r+0x8a0>
 1012550:	d9801717 	ldw	r6,92(sp)
 1012554:	00800044 	movi	r2,1
 1012558:	1180a10e 	bge	r2,r6,10127e0 <_dtoa_r+0xd5c>
 101255c:	d9800f17 	ldw	r6,60(sp)
 1012560:	d8c01017 	ldw	r3,64(sp)
 1012564:	30bfffc4 	addi	r2,r6,-1
 1012568:	1881c616 	blt	r3,r2,1012c84 <_dtoa_r+0x1200>
 101256c:	18a5c83a 	sub	r18,r3,r2
 1012570:	d8800f17 	ldw	r2,60(sp)
 1012574:	10026216 	blt	r2,zero,1012f00 <_dtoa_r+0x147c>
 1012578:	dc001117 	ldw	r16,68(sp)
 101257c:	1007883a 	mov	r3,r2
 1012580:	d9800a17 	ldw	r6,40(sp)
 1012584:	d8801117 	ldw	r2,68(sp)
 1012588:	d9001617 	ldw	r4,88(sp)
 101258c:	30cd883a 	add	r6,r6,r3
 1012590:	10c5883a 	add	r2,r2,r3
 1012594:	01400044 	movi	r5,1
 1012598:	d9800a15 	stw	r6,40(sp)
 101259c:	d8801115 	stw	r2,68(sp)
 10125a0:	1014e540 	call	1014e54 <__i2b>
 10125a4:	1027883a 	mov	r19,r2
 10125a8:	003f2506 	br	1012240 <_dtoa_r+0x7bc>
 10125ac:	00c040b4 	movhi	r3,258
 10125b0:	18d6ce04 	addi	r3,r3,23352
 10125b4:	003d6706 	br	1011b54 <_dtoa_r+0xd0>
 10125b8:	dd800517 	ldw	r22,20(sp)
 10125bc:	04000044 	movi	r16,1
 10125c0:	00000706 	br	10125e0 <_dtoa_r+0xb5c>
 10125c4:	d9400717 	ldw	r5,28(sp)
 10125c8:	d9001617 	ldw	r4,88(sp)
 10125cc:	01800284 	movi	r6,10
 10125d0:	000f883a 	mov	r7,zero
 10125d4:	1014e900 	call	1014e90 <__multadd>
 10125d8:	d8800715 	stw	r2,28(sp)
 10125dc:	84000044 	addi	r16,r16,1
 10125e0:	d9000717 	ldw	r4,28(sp)
 10125e4:	900b883a 	mov	r5,r18
 10125e8:	101186c0 	call	101186c <quorem>
 10125ec:	15c00c04 	addi	r23,r2,48
 10125f0:	b5c00005 	stb	r23,0(r22)
 10125f4:	d8c00f17 	ldw	r3,60(sp)
 10125f8:	b5800044 	addi	r22,r22,1
 10125fc:	80fff116 	blt	r16,r3,10125c4 <_dtoa_r+0xb40>
 1012600:	d8000615 	stw	zero,24(sp)
 1012604:	d9400717 	ldw	r5,28(sp)
 1012608:	d9001617 	ldw	r4,88(sp)
 101260c:	01800044 	movi	r6,1
 1012610:	1014b200 	call	1014b20 <__lshift>
 1012614:	1009883a 	mov	r4,r2
 1012618:	900b883a 	mov	r5,r18
 101261c:	d8800715 	stw	r2,28(sp)
 1012620:	10143380 	call	1014338 <__mcmp>
 1012624:	00803c0e 	bge	zero,r2,1012718 <_dtoa_r+0xc94>
 1012628:	b009883a 	mov	r4,r22
 101262c:	213fffc4 	addi	r4,r4,-1
 1012630:	21400003 	ldbu	r5,0(r4)
 1012634:	00800e44 	movi	r2,57
 1012638:	28c03fcc 	andi	r3,r5,255
 101263c:	18c0201c 	xori	r3,r3,128
 1012640:	18ffe004 	addi	r3,r3,-128
 1012644:	1881981e 	bne	r3,r2,1012ca8 <_dtoa_r+0x1224>
 1012648:	d9800517 	ldw	r6,20(sp)
 101264c:	21bff71e 	bne	r4,r6,101262c <_dtoa_r+0xba8>
 1012650:	d8800d17 	ldw	r2,52(sp)
 1012654:	37000044 	addi	fp,r6,1
 1012658:	10800044 	addi	r2,r2,1
 101265c:	d8800d15 	stw	r2,52(sp)
 1012660:	00800c44 	movi	r2,49
 1012664:	30800005 	stb	r2,0(r6)
 1012668:	d9001617 	ldw	r4,88(sp)
 101266c:	900b883a 	mov	r5,r18
 1012670:	10141dc0 	call	10141dc <_Bfree>
 1012674:	983ecd26 	beq	r19,zero,10121ac <_dtoa_r+0x728>
 1012678:	d8c00617 	ldw	r3,24(sp)
 101267c:	18000426 	beq	r3,zero,1012690 <_dtoa_r+0xc0c>
 1012680:	1cc00326 	beq	r3,r19,1012690 <_dtoa_r+0xc0c>
 1012684:	d9001617 	ldw	r4,88(sp)
 1012688:	180b883a 	mov	r5,r3
 101268c:	10141dc0 	call	10141dc <_Bfree>
 1012690:	d9001617 	ldw	r4,88(sp)
 1012694:	980b883a 	mov	r5,r19
 1012698:	10141dc0 	call	10141dc <_Bfree>
 101269c:	003ec306 	br	10121ac <_dtoa_r+0x728>
 10126a0:	1805883a 	mov	r2,r3
 10126a4:	003eeb06 	br	1012254 <_dtoa_r+0x7d0>
 10126a8:	d9800a17 	ldw	r6,40(sp)
 10126ac:	d8c01117 	ldw	r3,68(sp)
 10126b0:	20bfff04 	addi	r2,r4,-4
 10126b4:	308d883a 	add	r6,r6,r2
 10126b8:	1887883a 	add	r3,r3,r2
 10126bc:	80a1883a 	add	r16,r16,r2
 10126c0:	d9800a15 	stw	r6,40(sp)
 10126c4:	d8c01115 	stw	r3,68(sp)
 10126c8:	003f1d06 	br	1012340 <_dtoa_r+0x8bc>
 10126cc:	a03f0c1e 	bne	r20,zero,1012300 <_dtoa_r+0x87c>
 10126d0:	00800434 	movhi	r2,16
 10126d4:	10bfffc4 	addi	r2,r2,-1
 10126d8:	a884703a 	and	r2,r21,r2
 10126dc:	103f081e 	bne	r2,zero,1012300 <_dtoa_r+0x87c>
 10126e0:	a89ffc2c 	andhi	r2,r21,32752
 10126e4:	103f0626 	beq	r2,zero,1012300 <_dtoa_r+0x87c>
 10126e8:	d8c01117 	ldw	r3,68(sp)
 10126ec:	d9000a17 	ldw	r4,40(sp)
 10126f0:	18c00044 	addi	r3,r3,1
 10126f4:	21000044 	addi	r4,r4,1
 10126f8:	d8c01115 	stw	r3,68(sp)
 10126fc:	d9000a15 	stw	r4,40(sp)
 1012700:	003f0006 	br	1012304 <_dtoa_r+0x880>
 1012704:	d9400717 	ldw	r5,28(sp)
 1012708:	d9001617 	ldw	r4,88(sp)
 101270c:	1014f900 	call	1014f90 <__pow5mult>
 1012710:	d8800715 	stw	r2,28(sp)
 1012714:	003eed06 	br	10122cc <_dtoa_r+0x848>
 1012718:	1000021e 	bne	r2,zero,1012724 <_dtoa_r+0xca0>
 101271c:	b880004c 	andi	r2,r23,1
 1012720:	103fc11e 	bne	r2,zero,1012628 <_dtoa_r+0xba4>
 1012724:	b5bfffc4 	addi	r22,r22,-1
 1012728:	b0c00007 	ldb	r3,0(r22)
 101272c:	00800c04 	movi	r2,48
 1012730:	18bffc26 	beq	r3,r2,1012724 <_dtoa_r+0xca0>
 1012734:	b7000044 	addi	fp,r22,1
 1012738:	003fcb06 	br	1012668 <_dtoa_r+0xbe4>
 101273c:	d9800d17 	ldw	r6,52(sp)
 1012740:	018fc83a 	sub	r7,zero,r6
 1012744:	3801f726 	beq	r7,zero,1012f24 <_dtoa_r+0x14a0>
 1012748:	398003cc 	andi	r6,r7,15
 101274c:	300c90fa 	slli	r6,r6,3
 1012750:	014040b4 	movhi	r5,258
 1012754:	29578c04 	addi	r5,r5,24112
 1012758:	d9001217 	ldw	r4,72(sp)
 101275c:	314d883a 	add	r6,r6,r5
 1012760:	30c00117 	ldw	r3,4(r6)
 1012764:	30800017 	ldw	r2,0(r6)
 1012768:	d9401317 	ldw	r5,76(sp)
 101276c:	3821d13a 	srai	r16,r7,4
 1012770:	100d883a 	mov	r6,r2
 1012774:	180f883a 	mov	r7,r3
 1012778:	10172980 	call	1017298 <__muldf3>
 101277c:	1011883a 	mov	r8,r2
 1012780:	1813883a 	mov	r9,r3
 1012784:	1029883a 	mov	r20,r2
 1012788:	182b883a 	mov	r21,r3
 101278c:	8001e526 	beq	r16,zero,1012f24 <_dtoa_r+0x14a0>
 1012790:	05800084 	movi	r22,2
 1012794:	044040b4 	movhi	r17,258
 1012798:	8c57be04 	addi	r17,r17,24312
 101279c:	8080004c 	andi	r2,r16,1
 10127a0:	1005003a 	cmpeq	r2,r2,zero
 10127a4:	1000081e 	bne	r2,zero,10127c8 <_dtoa_r+0xd44>
 10127a8:	89800017 	ldw	r6,0(r17)
 10127ac:	89c00117 	ldw	r7,4(r17)
 10127b0:	480b883a 	mov	r5,r9
 10127b4:	4009883a 	mov	r4,r8
 10127b8:	10172980 	call	1017298 <__muldf3>
 10127bc:	1011883a 	mov	r8,r2
 10127c0:	b5800044 	addi	r22,r22,1
 10127c4:	1813883a 	mov	r9,r3
 10127c8:	8021d07a 	srai	r16,r16,1
 10127cc:	8c400204 	addi	r17,r17,8
 10127d0:	803ff21e 	bne	r16,zero,101279c <_dtoa_r+0xd18>
 10127d4:	4029883a 	mov	r20,r8
 10127d8:	482b883a 	mov	r21,r9
 10127dc:	003dca06 	br	1011f08 <_dtoa_r+0x484>
 10127e0:	d9000817 	ldw	r4,32(sp)
 10127e4:	2005003a 	cmpeq	r2,r4,zero
 10127e8:	1001f61e 	bne	r2,zero,1012fc4 <_dtoa_r+0x1540>
 10127ec:	dc001117 	ldw	r16,68(sp)
 10127f0:	dc801017 	ldw	r18,64(sp)
 10127f4:	18c10cc4 	addi	r3,r3,1075
 10127f8:	003f6106 	br	1012580 <_dtoa_r+0xafc>
 10127fc:	d8000b15 	stw	zero,44(sp)
 1012800:	d9802617 	ldw	r6,152(sp)
 1012804:	d8c00d17 	ldw	r3,52(sp)
 1012808:	30800044 	addi	r2,r6,1
 101280c:	18ad883a 	add	r22,r3,r2
 1012810:	b13fffc4 	addi	r4,r22,-1
 1012814:	d9000e15 	stw	r4,56(sp)
 1012818:	0581f60e 	bge	zero,r22,1012ff4 <_dtoa_r+0x1570>
 101281c:	dd800f15 	stw	r22,60(sp)
 1012820:	003f3006 	br	10124e4 <_dtoa_r+0xa60>
 1012824:	d8000b15 	stw	zero,44(sp)
 1012828:	d9002617 	ldw	r4,152(sp)
 101282c:	0101eb0e 	bge	zero,r4,1012fdc <_dtoa_r+0x1558>
 1012830:	202d883a 	mov	r22,r4
 1012834:	d9000e15 	stw	r4,56(sp)
 1012838:	d9000f15 	stw	r4,60(sp)
 101283c:	003f2906 	br	10124e4 <_dtoa_r+0xa60>
 1012840:	01800044 	movi	r6,1
 1012844:	d9800b15 	stw	r6,44(sp)
 1012848:	003ff706 	br	1012828 <_dtoa_r+0xda4>
 101284c:	01000044 	movi	r4,1
 1012850:	d9000b15 	stw	r4,44(sp)
 1012854:	003fea06 	br	1012800 <_dtoa_r+0xd7c>
 1012858:	04000c0e 	bge	zero,r16,101288c <_dtoa_r+0xe08>
 101285c:	d9400717 	ldw	r5,28(sp)
 1012860:	d9001617 	ldw	r4,88(sp)
 1012864:	01800044 	movi	r6,1
 1012868:	1014b200 	call	1014b20 <__lshift>
 101286c:	1009883a 	mov	r4,r2
 1012870:	900b883a 	mov	r5,r18
 1012874:	d8800715 	stw	r2,28(sp)
 1012878:	10143380 	call	1014338 <__mcmp>
 101287c:	0081e00e 	bge	zero,r2,1013000 <_dtoa_r+0x157c>
 1012880:	bdc00044 	addi	r23,r23,1
 1012884:	00800e84 	movi	r2,58
 1012888:	b881a226 	beq	r23,r2,1012f14 <_dtoa_r+0x1490>
 101288c:	b7000044 	addi	fp,r22,1
 1012890:	b5c00005 	stb	r23,0(r22)
 1012894:	003f7406 	br	1012668 <_dtoa_r+0xbe4>
 1012898:	00800e44 	movi	r2,57
 101289c:	b8819d26 	beq	r23,r2,1012f14 <_dtoa_r+0x1490>
 10128a0:	053ffa0e 	bge	zero,r20,101288c <_dtoa_r+0xe08>
 10128a4:	8dc00c44 	addi	r23,r17,49
 10128a8:	003ff806 	br	101288c <_dtoa_r+0xe08>
 10128ac:	d9001617 	ldw	r4,88(sp)
 10128b0:	a80b883a 	mov	r5,r21
 10128b4:	04000044 	movi	r16,1
 10128b8:	10141dc0 	call	10141dc <_Bfree>
 10128bc:	003edf06 	br	101243c <_dtoa_r+0x9b8>
 10128c0:	d9001617 	ldw	r4,88(sp)
 10128c4:	980b883a 	mov	r5,r19
 10128c8:	01800284 	movi	r6,10
 10128cc:	000f883a 	mov	r7,zero
 10128d0:	1014e900 	call	1014e90 <__multadd>
 10128d4:	1027883a 	mov	r19,r2
 10128d8:	d8800615 	stw	r2,24(sp)
 10128dc:	003ebb06 	br	10123cc <_dtoa_r+0x948>
 10128e0:	d9801117 	ldw	r6,68(sp)
 10128e4:	d8800d17 	ldw	r2,52(sp)
 10128e8:	d8000915 	stw	zero,36(sp)
 10128ec:	308dc83a 	sub	r6,r6,r2
 10128f0:	0087c83a 	sub	r3,zero,r2
 10128f4:	d9801115 	stw	r6,68(sp)
 10128f8:	d8c01015 	stw	r3,64(sp)
 10128fc:	003cfe06 	br	1011cf8 <_dtoa_r+0x274>
 1012900:	018dc83a 	sub	r6,zero,r6
 1012904:	d9801115 	stw	r6,68(sp)
 1012908:	d8000a15 	stw	zero,40(sp)
 101290c:	003cf306 	br	1011cdc <_dtoa_r+0x258>
 1012910:	d9000d17 	ldw	r4,52(sp)
 1012914:	1017b5c0 	call	1017b5c <__floatsidf>
 1012918:	880b883a 	mov	r5,r17
 101291c:	8009883a 	mov	r4,r16
 1012920:	180f883a 	mov	r7,r3
 1012924:	100d883a 	mov	r6,r2
 1012928:	101793c0 	call	101793c <__nedf2>
 101292c:	103ce126 	beq	r2,zero,1011cb4 <_dtoa_r+0x230>
 1012930:	d9800d17 	ldw	r6,52(sp)
 1012934:	31bfffc4 	addi	r6,r6,-1
 1012938:	d9800d15 	stw	r6,52(sp)
 101293c:	003cdd06 	br	1011cb4 <_dtoa_r+0x230>
 1012940:	d9000717 	ldw	r4,28(sp)
 1012944:	900b883a 	mov	r5,r18
 1012948:	10143380 	call	1014338 <__mcmp>
 101294c:	103e8d0e 	bge	r2,zero,1012384 <_dtoa_r+0x900>
 1012950:	d9400717 	ldw	r5,28(sp)
 1012954:	d9001617 	ldw	r4,88(sp)
 1012958:	01800284 	movi	r6,10
 101295c:	000f883a 	mov	r7,zero
 1012960:	1014e900 	call	1014e90 <__multadd>
 1012964:	d9800d17 	ldw	r6,52(sp)
 1012968:	d8800715 	stw	r2,28(sp)
 101296c:	31bfffc4 	addi	r6,r6,-1
 1012970:	d9800d15 	stw	r6,52(sp)
 1012974:	b001a71e 	bne	r22,zero,1013014 <_dtoa_r+0x1590>
 1012978:	d8800e17 	ldw	r2,56(sp)
 101297c:	d8800f15 	stw	r2,60(sp)
 1012980:	003e8006 	br	1012384 <_dtoa_r+0x900>
 1012984:	90800417 	ldw	r2,16(r18)
 1012988:	1085883a 	add	r2,r2,r2
 101298c:	1085883a 	add	r2,r2,r2
 1012990:	1485883a 	add	r2,r2,r18
 1012994:	11000417 	ldw	r4,16(r2)
 1012998:	10142040 	call	1014204 <__hi0bits>
 101299c:	00c00804 	movi	r3,32
 10129a0:	1887c83a 	sub	r3,r3,r2
 10129a4:	003e5a06 	br	1012310 <_dtoa_r+0x88c>
 10129a8:	d9400717 	ldw	r5,28(sp)
 10129ac:	d9801017 	ldw	r6,64(sp)
 10129b0:	d9001617 	ldw	r4,88(sp)
 10129b4:	1014f900 	call	1014f90 <__pow5mult>
 10129b8:	d8800715 	stw	r2,28(sp)
 10129bc:	003e4306 	br	10122cc <_dtoa_r+0x848>
 10129c0:	d9800f17 	ldw	r6,60(sp)
 10129c4:	d8800d17 	ldw	r2,52(sp)
 10129c8:	d9800315 	stw	r6,12(sp)
 10129cc:	d8800415 	stw	r2,16(sp)
 10129d0:	d8c00b17 	ldw	r3,44(sp)
 10129d4:	1805003a 	cmpeq	r2,r3,zero
 10129d8:	1000e21e 	bne	r2,zero,1012d64 <_dtoa_r+0x12e0>
 10129dc:	d9000317 	ldw	r4,12(sp)
 10129e0:	0005883a 	mov	r2,zero
 10129e4:	00cff834 	movhi	r3,16352
 10129e8:	200c90fa 	slli	r6,r4,3
 10129ec:	010040b4 	movhi	r4,258
 10129f0:	21178c04 	addi	r4,r4,24112
 10129f4:	180b883a 	mov	r5,r3
 10129f8:	310d883a 	add	r6,r6,r4
 10129fc:	327fff17 	ldw	r9,-4(r6)
 1012a00:	323ffe17 	ldw	r8,-8(r6)
 1012a04:	1009883a 	mov	r4,r2
 1012a08:	480f883a 	mov	r7,r9
 1012a0c:	400d883a 	mov	r6,r8
 1012a10:	101765c0 	call	101765c <__divdf3>
 1012a14:	180b883a 	mov	r5,r3
 1012a18:	b00d883a 	mov	r6,r22
 1012a1c:	b80f883a 	mov	r7,r23
 1012a20:	1009883a 	mov	r4,r2
 1012a24:	10171a40 	call	10171a4 <__subdf3>
 1012a28:	a80b883a 	mov	r5,r21
 1012a2c:	a009883a 	mov	r4,r20
 1012a30:	d8c01915 	stw	r3,100(sp)
 1012a34:	d8801815 	stw	r2,96(sp)
 1012a38:	1017c540 	call	1017c54 <__fixdfsi>
 1012a3c:	1009883a 	mov	r4,r2
 1012a40:	1027883a 	mov	r19,r2
 1012a44:	1017b5c0 	call	1017b5c <__floatsidf>
 1012a48:	a80b883a 	mov	r5,r21
 1012a4c:	a009883a 	mov	r4,r20
 1012a50:	180f883a 	mov	r7,r3
 1012a54:	100d883a 	mov	r6,r2
 1012a58:	10171a40 	call	10171a4 <__subdf3>
 1012a5c:	d9801817 	ldw	r6,96(sp)
 1012a60:	1823883a 	mov	r17,r3
 1012a64:	d8801415 	stw	r2,80(sp)
 1012a68:	302d883a 	mov	r22,r6
 1012a6c:	d9800517 	ldw	r6,20(sp)
 1012a70:	9cc00c04 	addi	r19,r19,48
 1012a74:	dc401515 	stw	r17,84(sp)
 1012a78:	d8c01917 	ldw	r3,100(sp)
 1012a7c:	34c00005 	stb	r19,0(r6)
 1012a80:	d8800517 	ldw	r2,20(sp)
 1012a84:	d9401917 	ldw	r5,100(sp)
 1012a88:	d9801417 	ldw	r6,80(sp)
 1012a8c:	b009883a 	mov	r4,r22
 1012a90:	880f883a 	mov	r7,r17
 1012a94:	182f883a 	mov	r23,r3
 1012a98:	17000044 	addi	fp,r2,1
 1012a9c:	10179c40 	call	10179c4 <__gtdf2>
 1012aa0:	00804e16 	blt	zero,r2,1012bdc <_dtoa_r+0x1158>
 1012aa4:	d9801417 	ldw	r6,80(sp)
 1012aa8:	0005883a 	mov	r2,zero
 1012aac:	00cffc34 	movhi	r3,16368
 1012ab0:	180b883a 	mov	r5,r3
 1012ab4:	880f883a 	mov	r7,r17
 1012ab8:	1009883a 	mov	r4,r2
 1012abc:	10171a40 	call	10171a4 <__subdf3>
 1012ac0:	d9401917 	ldw	r5,100(sp)
 1012ac4:	180f883a 	mov	r7,r3
 1012ac8:	b009883a 	mov	r4,r22
 1012acc:	100d883a 	mov	r6,r2
 1012ad0:	10179c40 	call	10179c4 <__gtdf2>
 1012ad4:	00bda216 	blt	zero,r2,1012160 <_dtoa_r+0x6dc>
 1012ad8:	d8c00317 	ldw	r3,12(sp)
 1012adc:	00800044 	movi	r2,1
 1012ae0:	10c01216 	blt	r2,r3,1012b2c <_dtoa_r+0x10a8>
 1012ae4:	003d4506 	br	1011ffc <_dtoa_r+0x578>
 1012ae8:	d9801417 	ldw	r6,80(sp)
 1012aec:	0005883a 	mov	r2,zero
 1012af0:	00cffc34 	movhi	r3,16368
 1012af4:	180b883a 	mov	r5,r3
 1012af8:	880f883a 	mov	r7,r17
 1012afc:	1009883a 	mov	r4,r2
 1012b00:	10171a40 	call	10171a4 <__subdf3>
 1012b04:	d9c01b17 	ldw	r7,108(sp)
 1012b08:	180b883a 	mov	r5,r3
 1012b0c:	1009883a 	mov	r4,r2
 1012b10:	b00d883a 	mov	r6,r22
 1012b14:	1017ad40 	call	1017ad4 <__ltdf2>
 1012b18:	103d9116 	blt	r2,zero,1012160 <_dtoa_r+0x6dc>
 1012b1c:	d9800517 	ldw	r6,20(sp)
 1012b20:	d9000317 	ldw	r4,12(sp)
 1012b24:	3105883a 	add	r2,r6,r4
 1012b28:	e0bd3426 	beq	fp,r2,1011ffc <_dtoa_r+0x578>
 1012b2c:	04500934 	movhi	r17,16420
 1012b30:	0021883a 	mov	r16,zero
 1012b34:	b80b883a 	mov	r5,r23
 1012b38:	b009883a 	mov	r4,r22
 1012b3c:	800d883a 	mov	r6,r16
 1012b40:	880f883a 	mov	r7,r17
 1012b44:	10172980 	call	1017298 <__muldf3>
 1012b48:	d9401517 	ldw	r5,84(sp)
 1012b4c:	d9001417 	ldw	r4,80(sp)
 1012b50:	880f883a 	mov	r7,r17
 1012b54:	000d883a 	mov	r6,zero
 1012b58:	d8801a15 	stw	r2,104(sp)
 1012b5c:	d8c01b15 	stw	r3,108(sp)
 1012b60:	10172980 	call	1017298 <__muldf3>
 1012b64:	180b883a 	mov	r5,r3
 1012b68:	1009883a 	mov	r4,r2
 1012b6c:	1823883a 	mov	r17,r3
 1012b70:	1021883a 	mov	r16,r2
 1012b74:	1017c540 	call	1017c54 <__fixdfsi>
 1012b78:	1009883a 	mov	r4,r2
 1012b7c:	102b883a 	mov	r21,r2
 1012b80:	1017b5c0 	call	1017b5c <__floatsidf>
 1012b84:	880b883a 	mov	r5,r17
 1012b88:	8009883a 	mov	r4,r16
 1012b8c:	180f883a 	mov	r7,r3
 1012b90:	100d883a 	mov	r6,r2
 1012b94:	10171a40 	call	10171a4 <__subdf3>
 1012b98:	1021883a 	mov	r16,r2
 1012b9c:	d9001b17 	ldw	r4,108(sp)
 1012ba0:	1823883a 	mov	r17,r3
 1012ba4:	dc001415 	stw	r16,80(sp)
 1012ba8:	ad400c04 	addi	r21,r21,48
 1012bac:	dc401515 	stw	r17,84(sp)
 1012bb0:	d8801a17 	ldw	r2,104(sp)
 1012bb4:	e5400005 	stb	r21,0(fp)
 1012bb8:	202f883a 	mov	r23,r4
 1012bbc:	d9c01b17 	ldw	r7,108(sp)
 1012bc0:	d9001417 	ldw	r4,80(sp)
 1012bc4:	880b883a 	mov	r5,r17
 1012bc8:	100d883a 	mov	r6,r2
 1012bcc:	102d883a 	mov	r22,r2
 1012bd0:	e7000044 	addi	fp,fp,1
 1012bd4:	1017ad40 	call	1017ad4 <__ltdf2>
 1012bd8:	103fc30e 	bge	r2,zero,1012ae8 <_dtoa_r+0x1064>
 1012bdc:	d9000417 	ldw	r4,16(sp)
 1012be0:	d9000d15 	stw	r4,52(sp)
 1012be4:	003d7106 	br	10121ac <_dtoa_r+0x728>
 1012be8:	d9801717 	ldw	r6,92(sp)
 1012bec:	00800084 	movi	r2,2
 1012bf0:	11bde60e 	bge	r2,r6,101238c <_dtoa_r+0x908>
 1012bf4:	203cfb1e 	bne	r4,zero,1011fe4 <_dtoa_r+0x560>
 1012bf8:	d9001617 	ldw	r4,88(sp)
 1012bfc:	900b883a 	mov	r5,r18
 1012c00:	01800144 	movi	r6,5
 1012c04:	000f883a 	mov	r7,zero
 1012c08:	1014e900 	call	1014e90 <__multadd>
 1012c0c:	d9000717 	ldw	r4,28(sp)
 1012c10:	100b883a 	mov	r5,r2
 1012c14:	1025883a 	mov	r18,r2
 1012c18:	10143380 	call	1014338 <__mcmp>
 1012c1c:	00bcf10e 	bge	zero,r2,1011fe4 <_dtoa_r+0x560>
 1012c20:	d8c00d17 	ldw	r3,52(sp)
 1012c24:	d9000517 	ldw	r4,20(sp)
 1012c28:	d8000615 	stw	zero,24(sp)
 1012c2c:	18c00044 	addi	r3,r3,1
 1012c30:	d8c00d15 	stw	r3,52(sp)
 1012c34:	00800c44 	movi	r2,49
 1012c38:	27000044 	addi	fp,r4,1
 1012c3c:	20800005 	stb	r2,0(r4)
 1012c40:	003e8906 	br	1012668 <_dtoa_r+0xbe4>
 1012c44:	d8c00517 	ldw	r3,20(sp)
 1012c48:	003bc206 	br	1011b54 <_dtoa_r+0xd0>
 1012c4c:	018040b4 	movhi	r6,258
 1012c50:	3197be04 	addi	r6,r6,24312
 1012c54:	30c00917 	ldw	r3,36(r6)
 1012c58:	30800817 	ldw	r2,32(r6)
 1012c5c:	d9001217 	ldw	r4,72(sp)
 1012c60:	d9401317 	ldw	r5,76(sp)
 1012c64:	180f883a 	mov	r7,r3
 1012c68:	100d883a 	mov	r6,r2
 1012c6c:	101765c0 	call	101765c <__divdf3>
 1012c70:	948003cc 	andi	r18,r18,15
 1012c74:	058000c4 	movi	r22,3
 1012c78:	1029883a 	mov	r20,r2
 1012c7c:	182b883a 	mov	r21,r3
 1012c80:	003c8906 	br	1011ea8 <_dtoa_r+0x424>
 1012c84:	d9001017 	ldw	r4,64(sp)
 1012c88:	d9800917 	ldw	r6,36(sp)
 1012c8c:	0025883a 	mov	r18,zero
 1012c90:	1105c83a 	sub	r2,r2,r4
 1012c94:	2089883a 	add	r4,r4,r2
 1012c98:	308d883a 	add	r6,r6,r2
 1012c9c:	d9001015 	stw	r4,64(sp)
 1012ca0:	d9800915 	stw	r6,36(sp)
 1012ca4:	003e3206 	br	1012570 <_dtoa_r+0xaec>
 1012ca8:	28800044 	addi	r2,r5,1
 1012cac:	27000044 	addi	fp,r4,1
 1012cb0:	20800005 	stb	r2,0(r4)
 1012cb4:	003e6c06 	br	1012668 <_dtoa_r+0xbe4>
 1012cb8:	d8800f17 	ldw	r2,60(sp)
 1012cbc:	00bce016 	blt	zero,r2,1012040 <_dtoa_r+0x5bc>
 1012cc0:	d9800f17 	ldw	r6,60(sp)
 1012cc4:	303cc51e 	bne	r6,zero,1011fdc <_dtoa_r+0x558>
 1012cc8:	0005883a 	mov	r2,zero
 1012ccc:	00d00534 	movhi	r3,16404
 1012cd0:	980b883a 	mov	r5,r19
 1012cd4:	180f883a 	mov	r7,r3
 1012cd8:	9009883a 	mov	r4,r18
 1012cdc:	100d883a 	mov	r6,r2
 1012ce0:	10172980 	call	1017298 <__muldf3>
 1012ce4:	180b883a 	mov	r5,r3
 1012ce8:	a80f883a 	mov	r7,r21
 1012cec:	1009883a 	mov	r4,r2
 1012cf0:	a00d883a 	mov	r6,r20
 1012cf4:	1017a4c0 	call	1017a4c <__gedf2>
 1012cf8:	103cb80e 	bge	r2,zero,1011fdc <_dtoa_r+0x558>
 1012cfc:	0027883a 	mov	r19,zero
 1012d00:	0025883a 	mov	r18,zero
 1012d04:	003fc606 	br	1012c20 <_dtoa_r+0x119c>
 1012d08:	99400117 	ldw	r5,4(r19)
 1012d0c:	d9001617 	ldw	r4,88(sp)
 1012d10:	101475c0 	call	101475c <_Balloc>
 1012d14:	99800417 	ldw	r6,16(r19)
 1012d18:	11000304 	addi	r4,r2,12
 1012d1c:	99400304 	addi	r5,r19,12
 1012d20:	318d883a 	add	r6,r6,r6
 1012d24:	318d883a 	add	r6,r6,r6
 1012d28:	31800204 	addi	r6,r6,8
 1012d2c:	1023883a 	mov	r17,r2
 1012d30:	100eb6c0 	call	100eb6c <memcpy>
 1012d34:	d9001617 	ldw	r4,88(sp)
 1012d38:	880b883a 	mov	r5,r17
 1012d3c:	01800044 	movi	r6,1
 1012d40:	1014b200 	call	1014b20 <__lshift>
 1012d44:	100b883a 	mov	r5,r2
 1012d48:	003d9c06 	br	10123bc <_dtoa_r+0x938>
 1012d4c:	00800e44 	movi	r2,57
 1012d50:	b8807026 	beq	r23,r2,1012f14 <_dtoa_r+0x1490>
 1012d54:	b8800044 	addi	r2,r23,1
 1012d58:	b7000044 	addi	fp,r22,1
 1012d5c:	b0800005 	stb	r2,0(r22)
 1012d60:	003e4106 	br	1012668 <_dtoa_r+0xbe4>
 1012d64:	d8800317 	ldw	r2,12(sp)
 1012d68:	018040b4 	movhi	r6,258
 1012d6c:	31978c04 	addi	r6,r6,24112
 1012d70:	b009883a 	mov	r4,r22
 1012d74:	100e90fa 	slli	r7,r2,3
 1012d78:	b80b883a 	mov	r5,r23
 1012d7c:	398f883a 	add	r7,r7,r6
 1012d80:	38bffe17 	ldw	r2,-8(r7)
 1012d84:	d9800517 	ldw	r6,20(sp)
 1012d88:	38ffff17 	ldw	r3,-4(r7)
 1012d8c:	37000044 	addi	fp,r6,1
 1012d90:	180f883a 	mov	r7,r3
 1012d94:	100d883a 	mov	r6,r2
 1012d98:	10172980 	call	1017298 <__muldf3>
 1012d9c:	a80b883a 	mov	r5,r21
 1012da0:	a009883a 	mov	r4,r20
 1012da4:	182f883a 	mov	r23,r3
 1012da8:	102d883a 	mov	r22,r2
 1012dac:	1017c540 	call	1017c54 <__fixdfsi>
 1012db0:	1009883a 	mov	r4,r2
 1012db4:	1027883a 	mov	r19,r2
 1012db8:	1017b5c0 	call	1017b5c <__floatsidf>
 1012dbc:	a80b883a 	mov	r5,r21
 1012dc0:	a009883a 	mov	r4,r20
 1012dc4:	180f883a 	mov	r7,r3
 1012dc8:	100d883a 	mov	r6,r2
 1012dcc:	10171a40 	call	10171a4 <__subdf3>
 1012dd0:	180b883a 	mov	r5,r3
 1012dd4:	d8c00517 	ldw	r3,20(sp)
 1012dd8:	9cc00c04 	addi	r19,r19,48
 1012ddc:	1009883a 	mov	r4,r2
 1012de0:	1cc00005 	stb	r19,0(r3)
 1012de4:	2021883a 	mov	r16,r4
 1012de8:	d9000317 	ldw	r4,12(sp)
 1012dec:	00800044 	movi	r2,1
 1012df0:	2823883a 	mov	r17,r5
 1012df4:	20802226 	beq	r4,r2,1012e80 <_dtoa_r+0x13fc>
 1012df8:	1029883a 	mov	r20,r2
 1012dfc:	0005883a 	mov	r2,zero
 1012e00:	00d00934 	movhi	r3,16420
 1012e04:	180f883a 	mov	r7,r3
 1012e08:	100d883a 	mov	r6,r2
 1012e0c:	880b883a 	mov	r5,r17
 1012e10:	8009883a 	mov	r4,r16
 1012e14:	10172980 	call	1017298 <__muldf3>
 1012e18:	180b883a 	mov	r5,r3
 1012e1c:	1009883a 	mov	r4,r2
 1012e20:	1823883a 	mov	r17,r3
 1012e24:	1021883a 	mov	r16,r2
 1012e28:	1017c540 	call	1017c54 <__fixdfsi>
 1012e2c:	1009883a 	mov	r4,r2
 1012e30:	102b883a 	mov	r21,r2
 1012e34:	1017b5c0 	call	1017b5c <__floatsidf>
 1012e38:	880b883a 	mov	r5,r17
 1012e3c:	8009883a 	mov	r4,r16
 1012e40:	180f883a 	mov	r7,r3
 1012e44:	100d883a 	mov	r6,r2
 1012e48:	10171a40 	call	10171a4 <__subdf3>
 1012e4c:	180b883a 	mov	r5,r3
 1012e50:	d8c00517 	ldw	r3,20(sp)
 1012e54:	1009883a 	mov	r4,r2
 1012e58:	ad400c04 	addi	r21,r21,48
 1012e5c:	1d05883a 	add	r2,r3,r20
 1012e60:	15400005 	stb	r21,0(r2)
 1012e64:	2021883a 	mov	r16,r4
 1012e68:	d9000317 	ldw	r4,12(sp)
 1012e6c:	a5000044 	addi	r20,r20,1
 1012e70:	2823883a 	mov	r17,r5
 1012e74:	a13fe11e 	bne	r20,r4,1012dfc <_dtoa_r+0x1378>
 1012e78:	e505883a 	add	r2,fp,r20
 1012e7c:	173fffc4 	addi	fp,r2,-1
 1012e80:	0025883a 	mov	r18,zero
 1012e84:	04cff834 	movhi	r19,16352
 1012e88:	b009883a 	mov	r4,r22
 1012e8c:	b80b883a 	mov	r5,r23
 1012e90:	900d883a 	mov	r6,r18
 1012e94:	980f883a 	mov	r7,r19
 1012e98:	10172240 	call	1017224 <__adddf3>
 1012e9c:	180b883a 	mov	r5,r3
 1012ea0:	1009883a 	mov	r4,r2
 1012ea4:	800d883a 	mov	r6,r16
 1012ea8:	880f883a 	mov	r7,r17
 1012eac:	1017ad40 	call	1017ad4 <__ltdf2>
 1012eb0:	103cab16 	blt	r2,zero,1012160 <_dtoa_r+0x6dc>
 1012eb4:	0009883a 	mov	r4,zero
 1012eb8:	980b883a 	mov	r5,r19
 1012ebc:	b80f883a 	mov	r7,r23
 1012ec0:	b00d883a 	mov	r6,r22
 1012ec4:	10171a40 	call	10171a4 <__subdf3>
 1012ec8:	180b883a 	mov	r5,r3
 1012ecc:	880f883a 	mov	r7,r17
 1012ed0:	1009883a 	mov	r4,r2
 1012ed4:	800d883a 	mov	r6,r16
 1012ed8:	10179c40 	call	10179c4 <__gtdf2>
 1012edc:	00bc470e 	bge	zero,r2,1011ffc <_dtoa_r+0x578>
 1012ee0:	00c00c04 	movi	r3,48
 1012ee4:	e73fffc4 	addi	fp,fp,-1
 1012ee8:	e0800007 	ldb	r2,0(fp)
 1012eec:	10fffd26 	beq	r2,r3,1012ee4 <_dtoa_r+0x1460>
 1012ef0:	d9800417 	ldw	r6,16(sp)
 1012ef4:	e7000044 	addi	fp,fp,1
 1012ef8:	d9800d15 	stw	r6,52(sp)
 1012efc:	003cab06 	br	10121ac <_dtoa_r+0x728>
 1012f00:	d8c00f17 	ldw	r3,60(sp)
 1012f04:	d9001117 	ldw	r4,68(sp)
 1012f08:	20e1c83a 	sub	r16,r4,r3
 1012f0c:	0007883a 	mov	r3,zero
 1012f10:	003d9b06 	br	1012580 <_dtoa_r+0xafc>
 1012f14:	00800e44 	movi	r2,57
 1012f18:	b0800005 	stb	r2,0(r22)
 1012f1c:	b5800044 	addi	r22,r22,1
 1012f20:	003dc106 	br	1012628 <_dtoa_r+0xba4>
 1012f24:	05800084 	movi	r22,2
 1012f28:	003bf706 	br	1011f08 <_dtoa_r+0x484>
 1012f2c:	d9000f17 	ldw	r4,60(sp)
 1012f30:	013c000e 	bge	zero,r4,1011f34 <_dtoa_r+0x4b0>
 1012f34:	d9800e17 	ldw	r6,56(sp)
 1012f38:	01bc300e 	bge	zero,r6,1011ffc <_dtoa_r+0x578>
 1012f3c:	0005883a 	mov	r2,zero
 1012f40:	00d00934 	movhi	r3,16420
 1012f44:	a80b883a 	mov	r5,r21
 1012f48:	180f883a 	mov	r7,r3
 1012f4c:	a009883a 	mov	r4,r20
 1012f50:	100d883a 	mov	r6,r2
 1012f54:	10172980 	call	1017298 <__muldf3>
 1012f58:	b1000044 	addi	r4,r22,1
 1012f5c:	1021883a 	mov	r16,r2
 1012f60:	1823883a 	mov	r17,r3
 1012f64:	1017b5c0 	call	1017b5c <__floatsidf>
 1012f68:	880b883a 	mov	r5,r17
 1012f6c:	8009883a 	mov	r4,r16
 1012f70:	180f883a 	mov	r7,r3
 1012f74:	100d883a 	mov	r6,r2
 1012f78:	10172980 	call	1017298 <__muldf3>
 1012f7c:	0011883a 	mov	r8,zero
 1012f80:	02500734 	movhi	r9,16412
 1012f84:	180b883a 	mov	r5,r3
 1012f88:	480f883a 	mov	r7,r9
 1012f8c:	1009883a 	mov	r4,r2
 1012f90:	400d883a 	mov	r6,r8
 1012f94:	10172240 	call	1017224 <__adddf3>
 1012f98:	102d883a 	mov	r22,r2
 1012f9c:	00bf3034 	movhi	r2,64704
 1012fa0:	10ef883a 	add	r23,r2,r3
 1012fa4:	d8800d17 	ldw	r2,52(sp)
 1012fa8:	d8c00e17 	ldw	r3,56(sp)
 1012fac:	8029883a 	mov	r20,r16
 1012fb0:	10bfffc4 	addi	r2,r2,-1
 1012fb4:	882b883a 	mov	r21,r17
 1012fb8:	d8800415 	stw	r2,16(sp)
 1012fbc:	d8c00315 	stw	r3,12(sp)
 1012fc0:	003e8306 	br	10129d0 <_dtoa_r+0xf4c>
 1012fc4:	d8800117 	ldw	r2,4(sp)
 1012fc8:	dc001117 	ldw	r16,68(sp)
 1012fcc:	dc801017 	ldw	r18,64(sp)
 1012fd0:	00c00d84 	movi	r3,54
 1012fd4:	1887c83a 	sub	r3,r3,r2
 1012fd8:	003d6906 	br	1012580 <_dtoa_r+0xafc>
 1012fdc:	01800044 	movi	r6,1
 1012fe0:	3021883a 	mov	r16,r6
 1012fe4:	d9800f15 	stw	r6,60(sp)
 1012fe8:	d9802615 	stw	r6,152(sp)
 1012fec:	d9800e15 	stw	r6,56(sp)
 1012ff0:	003b9306 	br	1011e40 <_dtoa_r+0x3bc>
 1012ff4:	b021883a 	mov	r16,r22
 1012ff8:	dd800f15 	stw	r22,60(sp)
 1012ffc:	003b9006 	br	1011e40 <_dtoa_r+0x3bc>
 1013000:	103e221e 	bne	r2,zero,101288c <_dtoa_r+0xe08>
 1013004:	b880004c 	andi	r2,r23,1
 1013008:	1005003a 	cmpeq	r2,r2,zero
 101300c:	103e1f1e 	bne	r2,zero,101288c <_dtoa_r+0xe08>
 1013010:	003e1b06 	br	1012880 <_dtoa_r+0xdfc>
 1013014:	d9001617 	ldw	r4,88(sp)
 1013018:	980b883a 	mov	r5,r19
 101301c:	01800284 	movi	r6,10
 1013020:	000f883a 	mov	r7,zero
 1013024:	1014e900 	call	1014e90 <__multadd>
 1013028:	d8c00e17 	ldw	r3,56(sp)
 101302c:	1027883a 	mov	r19,r2
 1013030:	d8c00f15 	stw	r3,60(sp)
 1013034:	003cd306 	br	1012384 <_dtoa_r+0x900>

01013038 <_fflush_r>:
 1013038:	defffb04 	addi	sp,sp,-20
 101303c:	dcc00315 	stw	r19,12(sp)
 1013040:	dc800215 	stw	r18,8(sp)
 1013044:	dfc00415 	stw	ra,16(sp)
 1013048:	dc400115 	stw	r17,4(sp)
 101304c:	dc000015 	stw	r16,0(sp)
 1013050:	2027883a 	mov	r19,r4
 1013054:	2825883a 	mov	r18,r5
 1013058:	20000226 	beq	r4,zero,1013064 <_fflush_r+0x2c>
 101305c:	20800e17 	ldw	r2,56(r4)
 1013060:	10005626 	beq	r2,zero,10131bc <_fflush_r+0x184>
 1013064:	9100030b 	ldhu	r4,12(r18)
 1013068:	20ffffcc 	andi	r3,r4,65535
 101306c:	18e0001c 	xori	r3,r3,32768
 1013070:	18e00004 	addi	r3,r3,-32768
 1013074:	1880020c 	andi	r2,r3,8
 1013078:	1000261e 	bne	r2,zero,1013114 <_fflush_r+0xdc>
 101307c:	90c00117 	ldw	r3,4(r18)
 1013080:	20820014 	ori	r2,r4,2048
 1013084:	9080030d 	sth	r2,12(r18)
 1013088:	1009883a 	mov	r4,r2
 101308c:	00c0400e 	bge	zero,r3,1013190 <_fflush_r+0x158>
 1013090:	92000a17 	ldw	r8,40(r18)
 1013094:	40004026 	beq	r8,zero,1013198 <_fflush_r+0x160>
 1013098:	2084000c 	andi	r2,r4,4096
 101309c:	10005326 	beq	r2,zero,10131ec <_fflush_r+0x1b4>
 10130a0:	94001417 	ldw	r16,80(r18)
 10130a4:	9080030b 	ldhu	r2,12(r18)
 10130a8:	1080010c 	andi	r2,r2,4
 10130ac:	1000481e 	bne	r2,zero,10131d0 <_fflush_r+0x198>
 10130b0:	91400717 	ldw	r5,28(r18)
 10130b4:	9809883a 	mov	r4,r19
 10130b8:	800d883a 	mov	r6,r16
 10130bc:	000f883a 	mov	r7,zero
 10130c0:	403ee83a 	callr	r8
 10130c4:	8080261e 	bne	r16,r2,1013160 <_fflush_r+0x128>
 10130c8:	9080030b 	ldhu	r2,12(r18)
 10130cc:	91000417 	ldw	r4,16(r18)
 10130d0:	90000115 	stw	zero,4(r18)
 10130d4:	10bdffcc 	andi	r2,r2,63487
 10130d8:	10ffffcc 	andi	r3,r2,65535
 10130dc:	18c4000c 	andi	r3,r3,4096
 10130e0:	9080030d 	sth	r2,12(r18)
 10130e4:	91000015 	stw	r4,0(r18)
 10130e8:	18002b26 	beq	r3,zero,1013198 <_fflush_r+0x160>
 10130ec:	0007883a 	mov	r3,zero
 10130f0:	1805883a 	mov	r2,r3
 10130f4:	94001415 	stw	r16,80(r18)
 10130f8:	dfc00417 	ldw	ra,16(sp)
 10130fc:	dcc00317 	ldw	r19,12(sp)
 1013100:	dc800217 	ldw	r18,8(sp)
 1013104:	dc400117 	ldw	r17,4(sp)
 1013108:	dc000017 	ldw	r16,0(sp)
 101310c:	dec00504 	addi	sp,sp,20
 1013110:	f800283a 	ret
 1013114:	94400417 	ldw	r17,16(r18)
 1013118:	88001f26 	beq	r17,zero,1013198 <_fflush_r+0x160>
 101311c:	90800017 	ldw	r2,0(r18)
 1013120:	18c000cc 	andi	r3,r3,3
 1013124:	94400015 	stw	r17,0(r18)
 1013128:	1461c83a 	sub	r16,r2,r17
 101312c:	18002526 	beq	r3,zero,10131c4 <_fflush_r+0x18c>
 1013130:	0005883a 	mov	r2,zero
 1013134:	90800215 	stw	r2,8(r18)
 1013138:	0400170e 	bge	zero,r16,1013198 <_fflush_r+0x160>
 101313c:	90c00917 	ldw	r3,36(r18)
 1013140:	91400717 	ldw	r5,28(r18)
 1013144:	880d883a 	mov	r6,r17
 1013148:	800f883a 	mov	r7,r16
 101314c:	9809883a 	mov	r4,r19
 1013150:	183ee83a 	callr	r3
 1013154:	88a3883a 	add	r17,r17,r2
 1013158:	80a1c83a 	sub	r16,r16,r2
 101315c:	00bff616 	blt	zero,r2,1013138 <_fflush_r+0x100>
 1013160:	9080030b 	ldhu	r2,12(r18)
 1013164:	00ffffc4 	movi	r3,-1
 1013168:	10801014 	ori	r2,r2,64
 101316c:	9080030d 	sth	r2,12(r18)
 1013170:	1805883a 	mov	r2,r3
 1013174:	dfc00417 	ldw	ra,16(sp)
 1013178:	dcc00317 	ldw	r19,12(sp)
 101317c:	dc800217 	ldw	r18,8(sp)
 1013180:	dc400117 	ldw	r17,4(sp)
 1013184:	dc000017 	ldw	r16,0(sp)
 1013188:	dec00504 	addi	sp,sp,20
 101318c:	f800283a 	ret
 1013190:	90800f17 	ldw	r2,60(r18)
 1013194:	00bfbe16 	blt	zero,r2,1013090 <_fflush_r+0x58>
 1013198:	0007883a 	mov	r3,zero
 101319c:	1805883a 	mov	r2,r3
 10131a0:	dfc00417 	ldw	ra,16(sp)
 10131a4:	dcc00317 	ldw	r19,12(sp)
 10131a8:	dc800217 	ldw	r18,8(sp)
 10131ac:	dc400117 	ldw	r17,4(sp)
 10131b0:	dc000017 	ldw	r16,0(sp)
 10131b4:	dec00504 	addi	sp,sp,20
 10131b8:	f800283a 	ret
 10131bc:	10132d00 	call	10132d0 <__sinit>
 10131c0:	003fa806 	br	1013064 <_fflush_r+0x2c>
 10131c4:	90800517 	ldw	r2,20(r18)
 10131c8:	90800215 	stw	r2,8(r18)
 10131cc:	003fda06 	br	1013138 <_fflush_r+0x100>
 10131d0:	90800117 	ldw	r2,4(r18)
 10131d4:	90c00c17 	ldw	r3,48(r18)
 10131d8:	80a1c83a 	sub	r16,r16,r2
 10131dc:	183fb426 	beq	r3,zero,10130b0 <_fflush_r+0x78>
 10131e0:	90800f17 	ldw	r2,60(r18)
 10131e4:	80a1c83a 	sub	r16,r16,r2
 10131e8:	003fb106 	br	10130b0 <_fflush_r+0x78>
 10131ec:	91400717 	ldw	r5,28(r18)
 10131f0:	9809883a 	mov	r4,r19
 10131f4:	000d883a 	mov	r6,zero
 10131f8:	01c00044 	movi	r7,1
 10131fc:	403ee83a 	callr	r8
 1013200:	1021883a 	mov	r16,r2
 1013204:	00bfffc4 	movi	r2,-1
 1013208:	80800226 	beq	r16,r2,1013214 <_fflush_r+0x1dc>
 101320c:	92000a17 	ldw	r8,40(r18)
 1013210:	003fa406 	br	10130a4 <_fflush_r+0x6c>
 1013214:	98c00017 	ldw	r3,0(r19)
 1013218:	00800744 	movi	r2,29
 101321c:	18bfde26 	beq	r3,r2,1013198 <_fflush_r+0x160>
 1013220:	9080030b 	ldhu	r2,12(r18)
 1013224:	8007883a 	mov	r3,r16
 1013228:	10801014 	ori	r2,r2,64
 101322c:	9080030d 	sth	r2,12(r18)
 1013230:	003fcf06 	br	1013170 <_fflush_r+0x138>

01013234 <fflush>:
 1013234:	01404074 	movhi	r5,257
 1013238:	294c0e04 	addi	r5,r5,12344
 101323c:	2007883a 	mov	r3,r4
 1013240:	20000526 	beq	r4,zero,1013258 <fflush+0x24>
 1013244:	008040b4 	movhi	r2,258
 1013248:	109f8b04 	addi	r2,r2,32300
 101324c:	11000017 	ldw	r4,0(r2)
 1013250:	180b883a 	mov	r5,r3
 1013254:	10130381 	jmpi	1013038 <_fflush_r>
 1013258:	008040b4 	movhi	r2,258
 101325c:	109f8c04 	addi	r2,r2,32304
 1013260:	11000017 	ldw	r4,0(r2)
 1013264:	1013e041 	jmpi	1013e04 <_fwalk_reent>

01013268 <std>:
 1013268:	00804074 	movhi	r2,257
 101326c:	10968804 	addi	r2,r2,23072
 1013270:	20800b15 	stw	r2,44(r4)
 1013274:	00804074 	movhi	r2,257
 1013278:	1096c304 	addi	r2,r2,23308
 101327c:	20800815 	stw	r2,32(r4)
 1013280:	00c04074 	movhi	r3,257
 1013284:	18d6a404 	addi	r3,r3,23184
 1013288:	00804074 	movhi	r2,257
 101328c:	10968a04 	addi	r2,r2,23080
 1013290:	2140030d 	sth	r5,12(r4)
 1013294:	2180038d 	sth	r6,14(r4)
 1013298:	20c00915 	stw	r3,36(r4)
 101329c:	20800a15 	stw	r2,40(r4)
 10132a0:	20000015 	stw	zero,0(r4)
 10132a4:	20000115 	stw	zero,4(r4)
 10132a8:	20000215 	stw	zero,8(r4)
 10132ac:	20000415 	stw	zero,16(r4)
 10132b0:	20000515 	stw	zero,20(r4)
 10132b4:	20000615 	stw	zero,24(r4)
 10132b8:	21000715 	stw	r4,28(r4)
 10132bc:	f800283a 	ret

010132c0 <__sfp_lock_acquire>:
 10132c0:	f800283a 	ret

010132c4 <__sfp_lock_release>:
 10132c4:	f800283a 	ret

010132c8 <__sinit_lock_acquire>:
 10132c8:	f800283a 	ret

010132cc <__sinit_lock_release>:
 10132cc:	f800283a 	ret

010132d0 <__sinit>:
 10132d0:	20800e17 	ldw	r2,56(r4)
 10132d4:	defffd04 	addi	sp,sp,-12
 10132d8:	dc400115 	stw	r17,4(sp)
 10132dc:	dc000015 	stw	r16,0(sp)
 10132e0:	dfc00215 	stw	ra,8(sp)
 10132e4:	04400044 	movi	r17,1
 10132e8:	01400104 	movi	r5,4
 10132ec:	000d883a 	mov	r6,zero
 10132f0:	2021883a 	mov	r16,r4
 10132f4:	2200bb04 	addi	r8,r4,748
 10132f8:	200f883a 	mov	r7,r4
 10132fc:	10000526 	beq	r2,zero,1013314 <__sinit+0x44>
 1013300:	dfc00217 	ldw	ra,8(sp)
 1013304:	dc400117 	ldw	r17,4(sp)
 1013308:	dc000017 	ldw	r16,0(sp)
 101330c:	dec00304 	addi	sp,sp,12
 1013310:	f800283a 	ret
 1013314:	21000117 	ldw	r4,4(r4)
 1013318:	00804074 	movhi	r2,257
 101331c:	108ced04 	addi	r2,r2,13236
 1013320:	00c000c4 	movi	r3,3
 1013324:	80800f15 	stw	r2,60(r16)
 1013328:	80c0b915 	stw	r3,740(r16)
 101332c:	8200ba15 	stw	r8,744(r16)
 1013330:	84400e15 	stw	r17,56(r16)
 1013334:	8000b815 	stw	zero,736(r16)
 1013338:	10132680 	call	1013268 <std>
 101333c:	81000217 	ldw	r4,8(r16)
 1013340:	880d883a 	mov	r6,r17
 1013344:	800f883a 	mov	r7,r16
 1013348:	01400284 	movi	r5,10
 101334c:	10132680 	call	1013268 <std>
 1013350:	81000317 	ldw	r4,12(r16)
 1013354:	800f883a 	mov	r7,r16
 1013358:	01400484 	movi	r5,18
 101335c:	01800084 	movi	r6,2
 1013360:	dfc00217 	ldw	ra,8(sp)
 1013364:	dc400117 	ldw	r17,4(sp)
 1013368:	dc000017 	ldw	r16,0(sp)
 101336c:	dec00304 	addi	sp,sp,12
 1013370:	10132681 	jmpi	1013268 <std>

01013374 <__fp_lock>:
 1013374:	0005883a 	mov	r2,zero
 1013378:	f800283a 	ret

0101337c <__fp_unlock>:
 101337c:	0005883a 	mov	r2,zero
 1013380:	f800283a 	ret

01013384 <__fp_unlock_all>:
 1013384:	008040b4 	movhi	r2,258
 1013388:	109f8b04 	addi	r2,r2,32300
 101338c:	11000017 	ldw	r4,0(r2)
 1013390:	01404074 	movhi	r5,257
 1013394:	294cdf04 	addi	r5,r5,13180
 1013398:	1013ecc1 	jmpi	1013ecc <_fwalk>

0101339c <__fp_lock_all>:
 101339c:	008040b4 	movhi	r2,258
 10133a0:	109f8b04 	addi	r2,r2,32300
 10133a4:	11000017 	ldw	r4,0(r2)
 10133a8:	01404074 	movhi	r5,257
 10133ac:	294cdd04 	addi	r5,r5,13172
 10133b0:	1013ecc1 	jmpi	1013ecc <_fwalk>

010133b4 <_cleanup_r>:
 10133b4:	01404074 	movhi	r5,257
 10133b8:	29580804 	addi	r5,r5,24608
 10133bc:	1013ecc1 	jmpi	1013ecc <_fwalk>

010133c0 <_cleanup>:
 10133c0:	008040b4 	movhi	r2,258
 10133c4:	109f8c04 	addi	r2,r2,32304
 10133c8:	11000017 	ldw	r4,0(r2)
 10133cc:	10133b41 	jmpi	10133b4 <_cleanup_r>

010133d0 <__sfmoreglue>:
 10133d0:	defffc04 	addi	sp,sp,-16
 10133d4:	dc400115 	stw	r17,4(sp)
 10133d8:	2c401724 	muli	r17,r5,92
 10133dc:	dc800215 	stw	r18,8(sp)
 10133e0:	2825883a 	mov	r18,r5
 10133e4:	89400304 	addi	r5,r17,12
 10133e8:	dc000015 	stw	r16,0(sp)
 10133ec:	dfc00315 	stw	ra,12(sp)
 10133f0:	100e2d40 	call	100e2d4 <_malloc_r>
 10133f4:	0021883a 	mov	r16,zero
 10133f8:	880d883a 	mov	r6,r17
 10133fc:	000b883a 	mov	r5,zero
 1013400:	10000626 	beq	r2,zero,101341c <__sfmoreglue+0x4c>
 1013404:	11000304 	addi	r4,r2,12
 1013408:	14800115 	stw	r18,4(r2)
 101340c:	10000015 	stw	zero,0(r2)
 1013410:	11000215 	stw	r4,8(r2)
 1013414:	1021883a 	mov	r16,r2
 1013418:	100ecec0 	call	100ecec <memset>
 101341c:	8005883a 	mov	r2,r16
 1013420:	dfc00317 	ldw	ra,12(sp)
 1013424:	dc800217 	ldw	r18,8(sp)
 1013428:	dc400117 	ldw	r17,4(sp)
 101342c:	dc000017 	ldw	r16,0(sp)
 1013430:	dec00404 	addi	sp,sp,16
 1013434:	f800283a 	ret

01013438 <__sfp>:
 1013438:	defffd04 	addi	sp,sp,-12
 101343c:	008040b4 	movhi	r2,258
 1013440:	109f8c04 	addi	r2,r2,32304
 1013444:	dc000015 	stw	r16,0(sp)
 1013448:	14000017 	ldw	r16,0(r2)
 101344c:	dc400115 	stw	r17,4(sp)
 1013450:	dfc00215 	stw	ra,8(sp)
 1013454:	80800e17 	ldw	r2,56(r16)
 1013458:	2023883a 	mov	r17,r4
 101345c:	10002626 	beq	r2,zero,10134f8 <__sfp+0xc0>
 1013460:	8400b804 	addi	r16,r16,736
 1013464:	80800117 	ldw	r2,4(r16)
 1013468:	81000217 	ldw	r4,8(r16)
 101346c:	10ffffc4 	addi	r3,r2,-1
 1013470:	18000916 	blt	r3,zero,1013498 <__sfp+0x60>
 1013474:	2080030f 	ldh	r2,12(r4)
 1013478:	10000b26 	beq	r2,zero,10134a8 <__sfp+0x70>
 101347c:	017fffc4 	movi	r5,-1
 1013480:	00000206 	br	101348c <__sfp+0x54>
 1013484:	2080030f 	ldh	r2,12(r4)
 1013488:	10000726 	beq	r2,zero,10134a8 <__sfp+0x70>
 101348c:	18ffffc4 	addi	r3,r3,-1
 1013490:	21001704 	addi	r4,r4,92
 1013494:	197ffb1e 	bne	r3,r5,1013484 <__sfp+0x4c>
 1013498:	80800017 	ldw	r2,0(r16)
 101349c:	10001926 	beq	r2,zero,1013504 <__sfp+0xcc>
 10134a0:	1021883a 	mov	r16,r2
 10134a4:	003fef06 	br	1013464 <__sfp+0x2c>
 10134a8:	00bfffc4 	movi	r2,-1
 10134ac:	00c00044 	movi	r3,1
 10134b0:	2080038d 	sth	r2,14(r4)
 10134b4:	20c0030d 	sth	r3,12(r4)
 10134b8:	20000015 	stw	zero,0(r4)
 10134bc:	20000215 	stw	zero,8(r4)
 10134c0:	20000115 	stw	zero,4(r4)
 10134c4:	20000415 	stw	zero,16(r4)
 10134c8:	20000515 	stw	zero,20(r4)
 10134cc:	20000615 	stw	zero,24(r4)
 10134d0:	20000c15 	stw	zero,48(r4)
 10134d4:	20000d15 	stw	zero,52(r4)
 10134d8:	20001115 	stw	zero,68(r4)
 10134dc:	20001215 	stw	zero,72(r4)
 10134e0:	2005883a 	mov	r2,r4
 10134e4:	dfc00217 	ldw	ra,8(sp)
 10134e8:	dc400117 	ldw	r17,4(sp)
 10134ec:	dc000017 	ldw	r16,0(sp)
 10134f0:	dec00304 	addi	sp,sp,12
 10134f4:	f800283a 	ret
 10134f8:	8009883a 	mov	r4,r16
 10134fc:	10132d00 	call	10132d0 <__sinit>
 1013500:	003fd706 	br	1013460 <__sfp+0x28>
 1013504:	8809883a 	mov	r4,r17
 1013508:	01400104 	movi	r5,4
 101350c:	10133d00 	call	10133d0 <__sfmoreglue>
 1013510:	80800015 	stw	r2,0(r16)
 1013514:	103fe21e 	bne	r2,zero,10134a0 <__sfp+0x68>
 1013518:	00800304 	movi	r2,12
 101351c:	0009883a 	mov	r4,zero
 1013520:	88800015 	stw	r2,0(r17)
 1013524:	003fee06 	br	10134e0 <__sfp+0xa8>

01013528 <_malloc_trim_r>:
 1013528:	defffb04 	addi	sp,sp,-20
 101352c:	dcc00315 	stw	r19,12(sp)
 1013530:	04c040b4 	movhi	r19,258
 1013534:	9cd87b04 	addi	r19,r19,25068
 1013538:	dc800215 	stw	r18,8(sp)
 101353c:	dc400115 	stw	r17,4(sp)
 1013540:	dc000015 	stw	r16,0(sp)
 1013544:	2823883a 	mov	r17,r5
 1013548:	2025883a 	mov	r18,r4
 101354c:	dfc00415 	stw	ra,16(sp)
 1013550:	10194680 	call	1019468 <__malloc_lock>
 1013554:	98800217 	ldw	r2,8(r19)
 1013558:	9009883a 	mov	r4,r18
 101355c:	000b883a 	mov	r5,zero
 1013560:	10c00117 	ldw	r3,4(r2)
 1013564:	00bfff04 	movi	r2,-4
 1013568:	18a0703a 	and	r16,r3,r2
 101356c:	8463c83a 	sub	r17,r16,r17
 1013570:	8c43fbc4 	addi	r17,r17,4079
 1013574:	8822d33a 	srli	r17,r17,12
 1013578:	0083ffc4 	movi	r2,4095
 101357c:	8c7fffc4 	addi	r17,r17,-1
 1013580:	8822933a 	slli	r17,r17,12
 1013584:	1440060e 	bge	r2,r17,10135a0 <_malloc_trim_r+0x78>
 1013588:	100eed40 	call	100eed4 <_sbrk_r>
 101358c:	98c00217 	ldw	r3,8(r19)
 1013590:	9009883a 	mov	r4,r18
 1013594:	044bc83a 	sub	r5,zero,r17
 1013598:	80c7883a 	add	r3,r16,r3
 101359c:	10c00926 	beq	r2,r3,10135c4 <_malloc_trim_r+0x9c>
 10135a0:	10195700 	call	1019570 <__malloc_unlock>
 10135a4:	0005883a 	mov	r2,zero
 10135a8:	dfc00417 	ldw	ra,16(sp)
 10135ac:	dcc00317 	ldw	r19,12(sp)
 10135b0:	dc800217 	ldw	r18,8(sp)
 10135b4:	dc400117 	ldw	r17,4(sp)
 10135b8:	dc000017 	ldw	r16,0(sp)
 10135bc:	dec00504 	addi	sp,sp,20
 10135c0:	f800283a 	ret
 10135c4:	9009883a 	mov	r4,r18
 10135c8:	100eed40 	call	100eed4 <_sbrk_r>
 10135cc:	844dc83a 	sub	r6,r16,r17
 10135d0:	00ffffc4 	movi	r3,-1
 10135d4:	9009883a 	mov	r4,r18
 10135d8:	000b883a 	mov	r5,zero
 10135dc:	01c040f4 	movhi	r7,259
 10135e0:	39d12b04 	addi	r7,r7,17580
 10135e4:	31800054 	ori	r6,r6,1
 10135e8:	10c00926 	beq	r2,r3,1013610 <_malloc_trim_r+0xe8>
 10135ec:	38800017 	ldw	r2,0(r7)
 10135f0:	98c00217 	ldw	r3,8(r19)
 10135f4:	9009883a 	mov	r4,r18
 10135f8:	1445c83a 	sub	r2,r2,r17
 10135fc:	38800015 	stw	r2,0(r7)
 1013600:	19800115 	stw	r6,4(r3)
 1013604:	10195700 	call	1019570 <__malloc_unlock>
 1013608:	00800044 	movi	r2,1
 101360c:	003fe606 	br	10135a8 <_malloc_trim_r+0x80>
 1013610:	100eed40 	call	100eed4 <_sbrk_r>
 1013614:	99800217 	ldw	r6,8(r19)
 1013618:	100f883a 	mov	r7,r2
 101361c:	9009883a 	mov	r4,r18
 1013620:	1187c83a 	sub	r3,r2,r6
 1013624:	008003c4 	movi	r2,15
 1013628:	19400054 	ori	r5,r3,1
 101362c:	10ffdc0e 	bge	r2,r3,10135a0 <_malloc_trim_r+0x78>
 1013630:	008040b4 	movhi	r2,258
 1013634:	109f8904 	addi	r2,r2,32292
 1013638:	10c00017 	ldw	r3,0(r2)
 101363c:	008040f4 	movhi	r2,259
 1013640:	10912b04 	addi	r2,r2,17580
 1013644:	31400115 	stw	r5,4(r6)
 1013648:	38c7c83a 	sub	r3,r7,r3
 101364c:	10c00015 	stw	r3,0(r2)
 1013650:	003fd306 	br	10135a0 <_malloc_trim_r+0x78>

01013654 <_free_r>:
 1013654:	defffd04 	addi	sp,sp,-12
 1013658:	dc400115 	stw	r17,4(sp)
 101365c:	dc000015 	stw	r16,0(sp)
 1013660:	dfc00215 	stw	ra,8(sp)
 1013664:	2821883a 	mov	r16,r5
 1013668:	2023883a 	mov	r17,r4
 101366c:	28005a26 	beq	r5,zero,10137d8 <_free_r+0x184>
 1013670:	10194680 	call	1019468 <__malloc_lock>
 1013674:	823ffe04 	addi	r8,r16,-8
 1013678:	41400117 	ldw	r5,4(r8)
 101367c:	00bfff84 	movi	r2,-2
 1013680:	028040b4 	movhi	r10,258
 1013684:	52987b04 	addi	r10,r10,25068
 1013688:	288e703a 	and	r7,r5,r2
 101368c:	41cd883a 	add	r6,r8,r7
 1013690:	30c00117 	ldw	r3,4(r6)
 1013694:	51000217 	ldw	r4,8(r10)
 1013698:	00bfff04 	movi	r2,-4
 101369c:	1892703a 	and	r9,r3,r2
 10136a0:	5017883a 	mov	r11,r10
 10136a4:	31006726 	beq	r6,r4,1013844 <_free_r+0x1f0>
 10136a8:	2880004c 	andi	r2,r5,1
 10136ac:	1005003a 	cmpeq	r2,r2,zero
 10136b0:	32400115 	stw	r9,4(r6)
 10136b4:	10001a1e 	bne	r2,zero,1013720 <_free_r+0xcc>
 10136b8:	000b883a 	mov	r5,zero
 10136bc:	3247883a 	add	r3,r6,r9
 10136c0:	18800117 	ldw	r2,4(r3)
 10136c4:	1080004c 	andi	r2,r2,1
 10136c8:	1000231e 	bne	r2,zero,1013758 <_free_r+0x104>
 10136cc:	280ac03a 	cmpne	r5,r5,zero
 10136d0:	3a4f883a 	add	r7,r7,r9
 10136d4:	2800451e 	bne	r5,zero,10137ec <_free_r+0x198>
 10136d8:	31000217 	ldw	r4,8(r6)
 10136dc:	008040b4 	movhi	r2,258
 10136e0:	10987d04 	addi	r2,r2,25076
 10136e4:	20807b26 	beq	r4,r2,10138d4 <_free_r+0x280>
 10136e8:	30800317 	ldw	r2,12(r6)
 10136ec:	3a07883a 	add	r3,r7,r8
 10136f0:	19c00015 	stw	r7,0(r3)
 10136f4:	11000215 	stw	r4,8(r2)
 10136f8:	20800315 	stw	r2,12(r4)
 10136fc:	38800054 	ori	r2,r7,1
 1013700:	40800115 	stw	r2,4(r8)
 1013704:	28001a26 	beq	r5,zero,1013770 <_free_r+0x11c>
 1013708:	8809883a 	mov	r4,r17
 101370c:	dfc00217 	ldw	ra,8(sp)
 1013710:	dc400117 	ldw	r17,4(sp)
 1013714:	dc000017 	ldw	r16,0(sp)
 1013718:	dec00304 	addi	sp,sp,12
 101371c:	10195701 	jmpi	1019570 <__malloc_unlock>
 1013720:	80bffe17 	ldw	r2,-8(r16)
 1013724:	50c00204 	addi	r3,r10,8
 1013728:	4091c83a 	sub	r8,r8,r2
 101372c:	41000217 	ldw	r4,8(r8)
 1013730:	388f883a 	add	r7,r7,r2
 1013734:	20c06126 	beq	r4,r3,10138bc <_free_r+0x268>
 1013738:	40800317 	ldw	r2,12(r8)
 101373c:	3247883a 	add	r3,r6,r9
 1013740:	000b883a 	mov	r5,zero
 1013744:	11000215 	stw	r4,8(r2)
 1013748:	20800315 	stw	r2,12(r4)
 101374c:	18800117 	ldw	r2,4(r3)
 1013750:	1080004c 	andi	r2,r2,1
 1013754:	103fdd26 	beq	r2,zero,10136cc <_free_r+0x78>
 1013758:	38800054 	ori	r2,r7,1
 101375c:	3a07883a 	add	r3,r7,r8
 1013760:	280ac03a 	cmpne	r5,r5,zero
 1013764:	40800115 	stw	r2,4(r8)
 1013768:	19c00015 	stw	r7,0(r3)
 101376c:	283fe61e 	bne	r5,zero,1013708 <_free_r+0xb4>
 1013770:	00807fc4 	movi	r2,511
 1013774:	11c01f2e 	bgeu	r2,r7,10137f4 <_free_r+0x1a0>
 1013778:	3806d27a 	srli	r3,r7,9
 101377c:	1800481e 	bne	r3,zero,10138a0 <_free_r+0x24c>
 1013780:	3804d0fa 	srli	r2,r7,3
 1013784:	100690fa 	slli	r3,r2,3
 1013788:	1acd883a 	add	r6,r3,r11
 101378c:	31400217 	ldw	r5,8(r6)
 1013790:	31405926 	beq	r6,r5,10138f8 <_free_r+0x2a4>
 1013794:	28800117 	ldw	r2,4(r5)
 1013798:	00ffff04 	movi	r3,-4
 101379c:	10c4703a 	and	r2,r2,r3
 10137a0:	3880022e 	bgeu	r7,r2,10137ac <_free_r+0x158>
 10137a4:	29400217 	ldw	r5,8(r5)
 10137a8:	317ffa1e 	bne	r6,r5,1013794 <_free_r+0x140>
 10137ac:	29800317 	ldw	r6,12(r5)
 10137b0:	41800315 	stw	r6,12(r8)
 10137b4:	41400215 	stw	r5,8(r8)
 10137b8:	8809883a 	mov	r4,r17
 10137bc:	2a000315 	stw	r8,12(r5)
 10137c0:	32000215 	stw	r8,8(r6)
 10137c4:	dfc00217 	ldw	ra,8(sp)
 10137c8:	dc400117 	ldw	r17,4(sp)
 10137cc:	dc000017 	ldw	r16,0(sp)
 10137d0:	dec00304 	addi	sp,sp,12
 10137d4:	10195701 	jmpi	1019570 <__malloc_unlock>
 10137d8:	dfc00217 	ldw	ra,8(sp)
 10137dc:	dc400117 	ldw	r17,4(sp)
 10137e0:	dc000017 	ldw	r16,0(sp)
 10137e4:	dec00304 	addi	sp,sp,12
 10137e8:	f800283a 	ret
 10137ec:	31000217 	ldw	r4,8(r6)
 10137f0:	003fbd06 	br	10136e8 <_free_r+0x94>
 10137f4:	3806d0fa 	srli	r3,r7,3
 10137f8:	00800044 	movi	r2,1
 10137fc:	51400117 	ldw	r5,4(r10)
 1013800:	180890fa 	slli	r4,r3,3
 1013804:	1807d0ba 	srai	r3,r3,2
 1013808:	22c9883a 	add	r4,r4,r11
 101380c:	21800217 	ldw	r6,8(r4)
 1013810:	10c4983a 	sll	r2,r2,r3
 1013814:	41000315 	stw	r4,12(r8)
 1013818:	41800215 	stw	r6,8(r8)
 101381c:	288ab03a 	or	r5,r5,r2
 1013820:	22000215 	stw	r8,8(r4)
 1013824:	8809883a 	mov	r4,r17
 1013828:	51400115 	stw	r5,4(r10)
 101382c:	32000315 	stw	r8,12(r6)
 1013830:	dfc00217 	ldw	ra,8(sp)
 1013834:	dc400117 	ldw	r17,4(sp)
 1013838:	dc000017 	ldw	r16,0(sp)
 101383c:	dec00304 	addi	sp,sp,12
 1013840:	10195701 	jmpi	1019570 <__malloc_unlock>
 1013844:	2880004c 	andi	r2,r5,1
 1013848:	3a4d883a 	add	r6,r7,r9
 101384c:	1000071e 	bne	r2,zero,101386c <_free_r+0x218>
 1013850:	80bffe17 	ldw	r2,-8(r16)
 1013854:	4091c83a 	sub	r8,r8,r2
 1013858:	41000317 	ldw	r4,12(r8)
 101385c:	40c00217 	ldw	r3,8(r8)
 1013860:	308d883a 	add	r6,r6,r2
 1013864:	20c00215 	stw	r3,8(r4)
 1013868:	19000315 	stw	r4,12(r3)
 101386c:	008040b4 	movhi	r2,258
 1013870:	109f8804 	addi	r2,r2,32288
 1013874:	11000017 	ldw	r4,0(r2)
 1013878:	30c00054 	ori	r3,r6,1
 101387c:	52000215 	stw	r8,8(r10)
 1013880:	40c00115 	stw	r3,4(r8)
 1013884:	313fa036 	bltu	r6,r4,1013708 <_free_r+0xb4>
 1013888:	008040f4 	movhi	r2,259
 101388c:	10a70104 	addi	r2,r2,-25596
 1013890:	11400017 	ldw	r5,0(r2)
 1013894:	8809883a 	mov	r4,r17
 1013898:	10135280 	call	1013528 <_malloc_trim_r>
 101389c:	003f9a06 	br	1013708 <_free_r+0xb4>
 10138a0:	00800104 	movi	r2,4
 10138a4:	10c0072e 	bgeu	r2,r3,10138c4 <_free_r+0x270>
 10138a8:	00800504 	movi	r2,20
 10138ac:	10c01936 	bltu	r2,r3,1013914 <_free_r+0x2c0>
 10138b0:	188016c4 	addi	r2,r3,91
 10138b4:	100690fa 	slli	r3,r2,3
 10138b8:	003fb306 	br	1013788 <_free_r+0x134>
 10138bc:	01400044 	movi	r5,1
 10138c0:	003f7e06 	br	10136bc <_free_r+0x68>
 10138c4:	3804d1ba 	srli	r2,r7,6
 10138c8:	10800e04 	addi	r2,r2,56
 10138cc:	100690fa 	slli	r3,r2,3
 10138d0:	003fad06 	br	1013788 <_free_r+0x134>
 10138d4:	22000315 	stw	r8,12(r4)
 10138d8:	22000215 	stw	r8,8(r4)
 10138dc:	3a05883a 	add	r2,r7,r8
 10138e0:	38c00054 	ori	r3,r7,1
 10138e4:	11c00015 	stw	r7,0(r2)
 10138e8:	41000215 	stw	r4,8(r8)
 10138ec:	40c00115 	stw	r3,4(r8)
 10138f0:	41000315 	stw	r4,12(r8)
 10138f4:	003f8406 	br	1013708 <_free_r+0xb4>
 10138f8:	1005d0ba 	srai	r2,r2,2
 10138fc:	00c00044 	movi	r3,1
 1013900:	51000117 	ldw	r4,4(r10)
 1013904:	1886983a 	sll	r3,r3,r2
 1013908:	20c8b03a 	or	r4,r4,r3
 101390c:	51000115 	stw	r4,4(r10)
 1013910:	003fa706 	br	10137b0 <_free_r+0x15c>
 1013914:	00801504 	movi	r2,84
 1013918:	10c00436 	bltu	r2,r3,101392c <_free_r+0x2d8>
 101391c:	3804d33a 	srli	r2,r7,12
 1013920:	10801b84 	addi	r2,r2,110
 1013924:	100690fa 	slli	r3,r2,3
 1013928:	003f9706 	br	1013788 <_free_r+0x134>
 101392c:	00805504 	movi	r2,340
 1013930:	10c00436 	bltu	r2,r3,1013944 <_free_r+0x2f0>
 1013934:	3804d3fa 	srli	r2,r7,15
 1013938:	10801dc4 	addi	r2,r2,119
 101393c:	100690fa 	slli	r3,r2,3
 1013940:	003f9106 	br	1013788 <_free_r+0x134>
 1013944:	00815504 	movi	r2,1364
 1013948:	10c0032e 	bgeu	r2,r3,1013958 <_free_r+0x304>
 101394c:	00801f84 	movi	r2,126
 1013950:	00c0fc04 	movi	r3,1008
 1013954:	003f8c06 	br	1013788 <_free_r+0x134>
 1013958:	3804d4ba 	srli	r2,r7,18
 101395c:	10801f04 	addi	r2,r2,124
 1013960:	100690fa 	slli	r3,r2,3
 1013964:	003f8806 	br	1013788 <_free_r+0x134>

01013968 <__sfvwrite_r>:
 1013968:	30800217 	ldw	r2,8(r6)
 101396c:	defff504 	addi	sp,sp,-44
 1013970:	df000915 	stw	fp,36(sp)
 1013974:	dd800715 	stw	r22,28(sp)
 1013978:	dc800315 	stw	r18,12(sp)
 101397c:	dfc00a15 	stw	ra,40(sp)
 1013980:	ddc00815 	stw	r23,32(sp)
 1013984:	dd400615 	stw	r21,24(sp)
 1013988:	dd000515 	stw	r20,20(sp)
 101398c:	dcc00415 	stw	r19,16(sp)
 1013990:	dc400215 	stw	r17,8(sp)
 1013994:	dc000115 	stw	r16,4(sp)
 1013998:	302d883a 	mov	r22,r6
 101399c:	2039883a 	mov	fp,r4
 10139a0:	2825883a 	mov	r18,r5
 10139a4:	10001c26 	beq	r2,zero,1013a18 <__sfvwrite_r+0xb0>
 10139a8:	29c0030b 	ldhu	r7,12(r5)
 10139ac:	3880020c 	andi	r2,r7,8
 10139b0:	10002726 	beq	r2,zero,1013a50 <__sfvwrite_r+0xe8>
 10139b4:	28800417 	ldw	r2,16(r5)
 10139b8:	10002526 	beq	r2,zero,1013a50 <__sfvwrite_r+0xe8>
 10139bc:	3880008c 	andi	r2,r7,2
 10139c0:	b5400017 	ldw	r21,0(r22)
 10139c4:	10002826 	beq	r2,zero,1013a68 <__sfvwrite_r+0x100>
 10139c8:	0021883a 	mov	r16,zero
 10139cc:	0023883a 	mov	r17,zero
 10139d0:	880d883a 	mov	r6,r17
 10139d4:	e009883a 	mov	r4,fp
 10139d8:	00810004 	movi	r2,1024
 10139dc:	80006e26 	beq	r16,zero,1013b98 <__sfvwrite_r+0x230>
 10139e0:	800f883a 	mov	r7,r16
 10139e4:	91400717 	ldw	r5,28(r18)
 10139e8:	1400012e 	bgeu	r2,r16,10139f0 <__sfvwrite_r+0x88>
 10139ec:	100f883a 	mov	r7,r2
 10139f0:	90c00917 	ldw	r3,36(r18)
 10139f4:	183ee83a 	callr	r3
 10139f8:	1007883a 	mov	r3,r2
 10139fc:	80a1c83a 	sub	r16,r16,r2
 1013a00:	88a3883a 	add	r17,r17,r2
 1013a04:	00806d0e 	bge	zero,r2,1013bbc <__sfvwrite_r+0x254>
 1013a08:	b0800217 	ldw	r2,8(r22)
 1013a0c:	10c5c83a 	sub	r2,r2,r3
 1013a10:	b0800215 	stw	r2,8(r22)
 1013a14:	103fee1e 	bne	r2,zero,10139d0 <__sfvwrite_r+0x68>
 1013a18:	0009883a 	mov	r4,zero
 1013a1c:	2005883a 	mov	r2,r4
 1013a20:	dfc00a17 	ldw	ra,40(sp)
 1013a24:	df000917 	ldw	fp,36(sp)
 1013a28:	ddc00817 	ldw	r23,32(sp)
 1013a2c:	dd800717 	ldw	r22,28(sp)
 1013a30:	dd400617 	ldw	r21,24(sp)
 1013a34:	dd000517 	ldw	r20,20(sp)
 1013a38:	dcc00417 	ldw	r19,16(sp)
 1013a3c:	dc800317 	ldw	r18,12(sp)
 1013a40:	dc400217 	ldw	r17,8(sp)
 1013a44:	dc000117 	ldw	r16,4(sp)
 1013a48:	dec00b04 	addi	sp,sp,44
 1013a4c:	f800283a 	ret
 1013a50:	10117300 	call	1011730 <__swsetup_r>
 1013a54:	1000e41e 	bne	r2,zero,1013de8 <__sfvwrite_r+0x480>
 1013a58:	91c0030b 	ldhu	r7,12(r18)
 1013a5c:	b5400017 	ldw	r21,0(r22)
 1013a60:	3880008c 	andi	r2,r7,2
 1013a64:	103fd81e 	bne	r2,zero,10139c8 <__sfvwrite_r+0x60>
 1013a68:	3880004c 	andi	r2,r7,1
 1013a6c:	1005003a 	cmpeq	r2,r2,zero
 1013a70:	10005726 	beq	r2,zero,1013bd0 <__sfvwrite_r+0x268>
 1013a74:	0029883a 	mov	r20,zero
 1013a78:	002f883a 	mov	r23,zero
 1013a7c:	a0004226 	beq	r20,zero,1013b88 <__sfvwrite_r+0x220>
 1013a80:	3880800c 	andi	r2,r7,512
 1013a84:	94000217 	ldw	r16,8(r18)
 1013a88:	10008b26 	beq	r2,zero,1013cb8 <__sfvwrite_r+0x350>
 1013a8c:	800d883a 	mov	r6,r16
 1013a90:	a400a536 	bltu	r20,r16,1013d28 <__sfvwrite_r+0x3c0>
 1013a94:	3881200c 	andi	r2,r7,1152
 1013a98:	10002726 	beq	r2,zero,1013b38 <__sfvwrite_r+0x1d0>
 1013a9c:	90800517 	ldw	r2,20(r18)
 1013aa0:	92000417 	ldw	r8,16(r18)
 1013aa4:	91400017 	ldw	r5,0(r18)
 1013aa8:	1087883a 	add	r3,r2,r2
 1013aac:	1887883a 	add	r3,r3,r2
 1013ab0:	1808d7fa 	srli	r4,r3,31
 1013ab4:	2a21c83a 	sub	r16,r5,r8
 1013ab8:	80800044 	addi	r2,r16,1
 1013abc:	20c9883a 	add	r4,r4,r3
 1013ac0:	2027d07a 	srai	r19,r4,1
 1013ac4:	a085883a 	add	r2,r20,r2
 1013ac8:	980d883a 	mov	r6,r19
 1013acc:	9880022e 	bgeu	r19,r2,1013ad8 <__sfvwrite_r+0x170>
 1013ad0:	1027883a 	mov	r19,r2
 1013ad4:	100d883a 	mov	r6,r2
 1013ad8:	3881000c 	andi	r2,r7,1024
 1013adc:	1000b826 	beq	r2,zero,1013dc0 <__sfvwrite_r+0x458>
 1013ae0:	300b883a 	mov	r5,r6
 1013ae4:	e009883a 	mov	r4,fp
 1013ae8:	100e2d40 	call	100e2d4 <_malloc_r>
 1013aec:	10003126 	beq	r2,zero,1013bb4 <__sfvwrite_r+0x24c>
 1013af0:	91400417 	ldw	r5,16(r18)
 1013af4:	1009883a 	mov	r4,r2
 1013af8:	800d883a 	mov	r6,r16
 1013afc:	1023883a 	mov	r17,r2
 1013b00:	100eb6c0 	call	100eb6c <memcpy>
 1013b04:	90c0030b 	ldhu	r3,12(r18)
 1013b08:	00beffc4 	movi	r2,-1025
 1013b0c:	1886703a 	and	r3,r3,r2
 1013b10:	18c02014 	ori	r3,r3,128
 1013b14:	90c0030d 	sth	r3,12(r18)
 1013b18:	9c07c83a 	sub	r3,r19,r16
 1013b1c:	8c05883a 	add	r2,r17,r16
 1013b20:	a00d883a 	mov	r6,r20
 1013b24:	a021883a 	mov	r16,r20
 1013b28:	90800015 	stw	r2,0(r18)
 1013b2c:	90c00215 	stw	r3,8(r18)
 1013b30:	94400415 	stw	r17,16(r18)
 1013b34:	94c00515 	stw	r19,20(r18)
 1013b38:	91000017 	ldw	r4,0(r18)
 1013b3c:	b80b883a 	mov	r5,r23
 1013b40:	a023883a 	mov	r17,r20
 1013b44:	100ec0c0 	call	100ec0c <memmove>
 1013b48:	90c00217 	ldw	r3,8(r18)
 1013b4c:	90800017 	ldw	r2,0(r18)
 1013b50:	a027883a 	mov	r19,r20
 1013b54:	1c07c83a 	sub	r3,r3,r16
 1013b58:	1405883a 	add	r2,r2,r16
 1013b5c:	90c00215 	stw	r3,8(r18)
 1013b60:	a021883a 	mov	r16,r20
 1013b64:	90800015 	stw	r2,0(r18)
 1013b68:	b0800217 	ldw	r2,8(r22)
 1013b6c:	1405c83a 	sub	r2,r2,r16
 1013b70:	b0800215 	stw	r2,8(r22)
 1013b74:	103fa826 	beq	r2,zero,1013a18 <__sfvwrite_r+0xb0>
 1013b78:	a469c83a 	sub	r20,r20,r17
 1013b7c:	91c0030b 	ldhu	r7,12(r18)
 1013b80:	bcef883a 	add	r23,r23,r19
 1013b84:	a03fbe1e 	bne	r20,zero,1013a80 <__sfvwrite_r+0x118>
 1013b88:	adc00017 	ldw	r23,0(r21)
 1013b8c:	ad000117 	ldw	r20,4(r21)
 1013b90:	ad400204 	addi	r21,r21,8
 1013b94:	003fb906 	br	1013a7c <__sfvwrite_r+0x114>
 1013b98:	ac400017 	ldw	r17,0(r21)
 1013b9c:	ac000117 	ldw	r16,4(r21)
 1013ba0:	ad400204 	addi	r21,r21,8
 1013ba4:	003f8a06 	br	10139d0 <__sfvwrite_r+0x68>
 1013ba8:	91400417 	ldw	r5,16(r18)
 1013bac:	e009883a 	mov	r4,fp
 1013bb0:	10136540 	call	1013654 <_free_r>
 1013bb4:	00800304 	movi	r2,12
 1013bb8:	e0800015 	stw	r2,0(fp)
 1013bbc:	9080030b 	ldhu	r2,12(r18)
 1013bc0:	013fffc4 	movi	r4,-1
 1013bc4:	10801014 	ori	r2,r2,64
 1013bc8:	9080030d 	sth	r2,12(r18)
 1013bcc:	003f9306 	br	1013a1c <__sfvwrite_r+0xb4>
 1013bd0:	0027883a 	mov	r19,zero
 1013bd4:	002f883a 	mov	r23,zero
 1013bd8:	d8000015 	stw	zero,0(sp)
 1013bdc:	0029883a 	mov	r20,zero
 1013be0:	98001e26 	beq	r19,zero,1013c5c <__sfvwrite_r+0x2f4>
 1013be4:	d8c00017 	ldw	r3,0(sp)
 1013be8:	1804c03a 	cmpne	r2,r3,zero
 1013bec:	10005e26 	beq	r2,zero,1013d68 <__sfvwrite_r+0x400>
 1013bf0:	9821883a 	mov	r16,r19
 1013bf4:	a4c0012e 	bgeu	r20,r19,1013bfc <__sfvwrite_r+0x294>
 1013bf8:	a021883a 	mov	r16,r20
 1013bfc:	91000017 	ldw	r4,0(r18)
 1013c00:	90800417 	ldw	r2,16(r18)
 1013c04:	91800217 	ldw	r6,8(r18)
 1013c08:	91c00517 	ldw	r7,20(r18)
 1013c0c:	1100022e 	bgeu	r2,r4,1013c18 <__sfvwrite_r+0x2b0>
 1013c10:	31e3883a 	add	r17,r6,r7
 1013c14:	8c001616 	blt	r17,r16,1013c70 <__sfvwrite_r+0x308>
 1013c18:	81c03816 	blt	r16,r7,1013cfc <__sfvwrite_r+0x394>
 1013c1c:	90c00917 	ldw	r3,36(r18)
 1013c20:	91400717 	ldw	r5,28(r18)
 1013c24:	e009883a 	mov	r4,fp
 1013c28:	b80d883a 	mov	r6,r23
 1013c2c:	183ee83a 	callr	r3
 1013c30:	1023883a 	mov	r17,r2
 1013c34:	00bfe10e 	bge	zero,r2,1013bbc <__sfvwrite_r+0x254>
 1013c38:	a469c83a 	sub	r20,r20,r17
 1013c3c:	a0001826 	beq	r20,zero,1013ca0 <__sfvwrite_r+0x338>
 1013c40:	b0800217 	ldw	r2,8(r22)
 1013c44:	1445c83a 	sub	r2,r2,r17
 1013c48:	b0800215 	stw	r2,8(r22)
 1013c4c:	103f7226 	beq	r2,zero,1013a18 <__sfvwrite_r+0xb0>
 1013c50:	9c67c83a 	sub	r19,r19,r17
 1013c54:	bc6f883a 	add	r23,r23,r17
 1013c58:	983fe21e 	bne	r19,zero,1013be4 <__sfvwrite_r+0x27c>
 1013c5c:	adc00017 	ldw	r23,0(r21)
 1013c60:	acc00117 	ldw	r19,4(r21)
 1013c64:	ad400204 	addi	r21,r21,8
 1013c68:	d8000015 	stw	zero,0(sp)
 1013c6c:	003fdc06 	br	1013be0 <__sfvwrite_r+0x278>
 1013c70:	b80b883a 	mov	r5,r23
 1013c74:	880d883a 	mov	r6,r17
 1013c78:	100ec0c0 	call	100ec0c <memmove>
 1013c7c:	90c00017 	ldw	r3,0(r18)
 1013c80:	e009883a 	mov	r4,fp
 1013c84:	900b883a 	mov	r5,r18
 1013c88:	1c47883a 	add	r3,r3,r17
 1013c8c:	90c00015 	stw	r3,0(r18)
 1013c90:	10130380 	call	1013038 <_fflush_r>
 1013c94:	103fc91e 	bne	r2,zero,1013bbc <__sfvwrite_r+0x254>
 1013c98:	a469c83a 	sub	r20,r20,r17
 1013c9c:	a03fe81e 	bne	r20,zero,1013c40 <__sfvwrite_r+0x2d8>
 1013ca0:	e009883a 	mov	r4,fp
 1013ca4:	900b883a 	mov	r5,r18
 1013ca8:	10130380 	call	1013038 <_fflush_r>
 1013cac:	103fc31e 	bne	r2,zero,1013bbc <__sfvwrite_r+0x254>
 1013cb0:	d8000015 	stw	zero,0(sp)
 1013cb4:	003fe206 	br	1013c40 <__sfvwrite_r+0x2d8>
 1013cb8:	91000017 	ldw	r4,0(r18)
 1013cbc:	90800417 	ldw	r2,16(r18)
 1013cc0:	1100022e 	bgeu	r2,r4,1013ccc <__sfvwrite_r+0x364>
 1013cc4:	8023883a 	mov	r17,r16
 1013cc8:	85003136 	bltu	r16,r20,1013d90 <__sfvwrite_r+0x428>
 1013ccc:	91c00517 	ldw	r7,20(r18)
 1013cd0:	a1c01836 	bltu	r20,r7,1013d34 <__sfvwrite_r+0x3cc>
 1013cd4:	90c00917 	ldw	r3,36(r18)
 1013cd8:	91400717 	ldw	r5,28(r18)
 1013cdc:	e009883a 	mov	r4,fp
 1013ce0:	b80d883a 	mov	r6,r23
 1013ce4:	183ee83a 	callr	r3
 1013ce8:	1021883a 	mov	r16,r2
 1013cec:	00bfb30e 	bge	zero,r2,1013bbc <__sfvwrite_r+0x254>
 1013cf0:	1023883a 	mov	r17,r2
 1013cf4:	1027883a 	mov	r19,r2
 1013cf8:	003f9b06 	br	1013b68 <__sfvwrite_r+0x200>
 1013cfc:	b80b883a 	mov	r5,r23
 1013d00:	800d883a 	mov	r6,r16
 1013d04:	100ec0c0 	call	100ec0c <memmove>
 1013d08:	90c00217 	ldw	r3,8(r18)
 1013d0c:	90800017 	ldw	r2,0(r18)
 1013d10:	8023883a 	mov	r17,r16
 1013d14:	1c07c83a 	sub	r3,r3,r16
 1013d18:	1405883a 	add	r2,r2,r16
 1013d1c:	90c00215 	stw	r3,8(r18)
 1013d20:	90800015 	stw	r2,0(r18)
 1013d24:	003fc406 	br	1013c38 <__sfvwrite_r+0x2d0>
 1013d28:	a00d883a 	mov	r6,r20
 1013d2c:	a021883a 	mov	r16,r20
 1013d30:	003f8106 	br	1013b38 <__sfvwrite_r+0x1d0>
 1013d34:	b80b883a 	mov	r5,r23
 1013d38:	a00d883a 	mov	r6,r20
 1013d3c:	100ec0c0 	call	100ec0c <memmove>
 1013d40:	90c00217 	ldw	r3,8(r18)
 1013d44:	90800017 	ldw	r2,0(r18)
 1013d48:	a021883a 	mov	r16,r20
 1013d4c:	1d07c83a 	sub	r3,r3,r20
 1013d50:	1505883a 	add	r2,r2,r20
 1013d54:	a023883a 	mov	r17,r20
 1013d58:	a027883a 	mov	r19,r20
 1013d5c:	90c00215 	stw	r3,8(r18)
 1013d60:	90800015 	stw	r2,0(r18)
 1013d64:	003f8006 	br	1013b68 <__sfvwrite_r+0x200>
 1013d68:	b809883a 	mov	r4,r23
 1013d6c:	01400284 	movi	r5,10
 1013d70:	980d883a 	mov	r6,r19
 1013d74:	100ea140 	call	100ea14 <memchr>
 1013d78:	10001726 	beq	r2,zero,1013dd8 <__sfvwrite_r+0x470>
 1013d7c:	15c5c83a 	sub	r2,r2,r23
 1013d80:	15000044 	addi	r20,r2,1
 1013d84:	00800044 	movi	r2,1
 1013d88:	d8800015 	stw	r2,0(sp)
 1013d8c:	003f9806 	br	1013bf0 <__sfvwrite_r+0x288>
 1013d90:	b80b883a 	mov	r5,r23
 1013d94:	800d883a 	mov	r6,r16
 1013d98:	100ec0c0 	call	100ec0c <memmove>
 1013d9c:	90c00017 	ldw	r3,0(r18)
 1013da0:	e009883a 	mov	r4,fp
 1013da4:	900b883a 	mov	r5,r18
 1013da8:	1c07883a 	add	r3,r3,r16
 1013dac:	90c00015 	stw	r3,0(r18)
 1013db0:	8027883a 	mov	r19,r16
 1013db4:	10130380 	call	1013038 <_fflush_r>
 1013db8:	103f6b26 	beq	r2,zero,1013b68 <__sfvwrite_r+0x200>
 1013dbc:	003f7f06 	br	1013bbc <__sfvwrite_r+0x254>
 1013dc0:	400b883a 	mov	r5,r8
 1013dc4:	e009883a 	mov	r4,fp
 1013dc8:	10153bc0 	call	10153bc <_realloc_r>
 1013dcc:	103f7626 	beq	r2,zero,1013ba8 <__sfvwrite_r+0x240>
 1013dd0:	1023883a 	mov	r17,r2
 1013dd4:	003f5006 	br	1013b18 <__sfvwrite_r+0x1b0>
 1013dd8:	00c00044 	movi	r3,1
 1013ddc:	9d000044 	addi	r20,r19,1
 1013de0:	d8c00015 	stw	r3,0(sp)
 1013de4:	003f8206 	br	1013bf0 <__sfvwrite_r+0x288>
 1013de8:	9080030b 	ldhu	r2,12(r18)
 1013dec:	00c00244 	movi	r3,9
 1013df0:	013fffc4 	movi	r4,-1
 1013df4:	10801014 	ori	r2,r2,64
 1013df8:	9080030d 	sth	r2,12(r18)
 1013dfc:	e0c00015 	stw	r3,0(fp)
 1013e00:	003f0606 	br	1013a1c <__sfvwrite_r+0xb4>

01013e04 <_fwalk_reent>:
 1013e04:	defff704 	addi	sp,sp,-36
 1013e08:	dcc00315 	stw	r19,12(sp)
 1013e0c:	24c0b804 	addi	r19,r4,736
 1013e10:	dd800615 	stw	r22,24(sp)
 1013e14:	dd400515 	stw	r21,20(sp)
 1013e18:	dfc00815 	stw	ra,32(sp)
 1013e1c:	ddc00715 	stw	r23,28(sp)
 1013e20:	dd000415 	stw	r20,16(sp)
 1013e24:	dc800215 	stw	r18,8(sp)
 1013e28:	dc400115 	stw	r17,4(sp)
 1013e2c:	dc000015 	stw	r16,0(sp)
 1013e30:	202b883a 	mov	r21,r4
 1013e34:	282d883a 	mov	r22,r5
 1013e38:	10132c00 	call	10132c0 <__sfp_lock_acquire>
 1013e3c:	98002126 	beq	r19,zero,1013ec4 <_fwalk_reent+0xc0>
 1013e40:	002f883a 	mov	r23,zero
 1013e44:	9c800117 	ldw	r18,4(r19)
 1013e48:	9c000217 	ldw	r16,8(r19)
 1013e4c:	90bfffc4 	addi	r2,r18,-1
 1013e50:	10000d16 	blt	r2,zero,1013e88 <_fwalk_reent+0x84>
 1013e54:	0023883a 	mov	r17,zero
 1013e58:	053fffc4 	movi	r20,-1
 1013e5c:	8080030f 	ldh	r2,12(r16)
 1013e60:	8c400044 	addi	r17,r17,1
 1013e64:	10000626 	beq	r2,zero,1013e80 <_fwalk_reent+0x7c>
 1013e68:	8080038f 	ldh	r2,14(r16)
 1013e6c:	800b883a 	mov	r5,r16
 1013e70:	a809883a 	mov	r4,r21
 1013e74:	15000226 	beq	r2,r20,1013e80 <_fwalk_reent+0x7c>
 1013e78:	b03ee83a 	callr	r22
 1013e7c:	b8aeb03a 	or	r23,r23,r2
 1013e80:	84001704 	addi	r16,r16,92
 1013e84:	947ff51e 	bne	r18,r17,1013e5c <_fwalk_reent+0x58>
 1013e88:	9cc00017 	ldw	r19,0(r19)
 1013e8c:	983fed1e 	bne	r19,zero,1013e44 <_fwalk_reent+0x40>
 1013e90:	10132c40 	call	10132c4 <__sfp_lock_release>
 1013e94:	b805883a 	mov	r2,r23
 1013e98:	dfc00817 	ldw	ra,32(sp)
 1013e9c:	ddc00717 	ldw	r23,28(sp)
 1013ea0:	dd800617 	ldw	r22,24(sp)
 1013ea4:	dd400517 	ldw	r21,20(sp)
 1013ea8:	dd000417 	ldw	r20,16(sp)
 1013eac:	dcc00317 	ldw	r19,12(sp)
 1013eb0:	dc800217 	ldw	r18,8(sp)
 1013eb4:	dc400117 	ldw	r17,4(sp)
 1013eb8:	dc000017 	ldw	r16,0(sp)
 1013ebc:	dec00904 	addi	sp,sp,36
 1013ec0:	f800283a 	ret
 1013ec4:	002f883a 	mov	r23,zero
 1013ec8:	003ff106 	br	1013e90 <_fwalk_reent+0x8c>

01013ecc <_fwalk>:
 1013ecc:	defff804 	addi	sp,sp,-32
 1013ed0:	dcc00315 	stw	r19,12(sp)
 1013ed4:	24c0b804 	addi	r19,r4,736
 1013ed8:	dd400515 	stw	r21,20(sp)
 1013edc:	dfc00715 	stw	ra,28(sp)
 1013ee0:	dd800615 	stw	r22,24(sp)
 1013ee4:	dd000415 	stw	r20,16(sp)
 1013ee8:	dc800215 	stw	r18,8(sp)
 1013eec:	dc400115 	stw	r17,4(sp)
 1013ef0:	dc000015 	stw	r16,0(sp)
 1013ef4:	282b883a 	mov	r21,r5
 1013ef8:	10132c00 	call	10132c0 <__sfp_lock_acquire>
 1013efc:	98001f26 	beq	r19,zero,1013f7c <_fwalk+0xb0>
 1013f00:	002d883a 	mov	r22,zero
 1013f04:	9c800117 	ldw	r18,4(r19)
 1013f08:	9c000217 	ldw	r16,8(r19)
 1013f0c:	90bfffc4 	addi	r2,r18,-1
 1013f10:	10000c16 	blt	r2,zero,1013f44 <_fwalk+0x78>
 1013f14:	0023883a 	mov	r17,zero
 1013f18:	053fffc4 	movi	r20,-1
 1013f1c:	8080030f 	ldh	r2,12(r16)
 1013f20:	8c400044 	addi	r17,r17,1
 1013f24:	10000526 	beq	r2,zero,1013f3c <_fwalk+0x70>
 1013f28:	8080038f 	ldh	r2,14(r16)
 1013f2c:	8009883a 	mov	r4,r16
 1013f30:	15000226 	beq	r2,r20,1013f3c <_fwalk+0x70>
 1013f34:	a83ee83a 	callr	r21
 1013f38:	b0acb03a 	or	r22,r22,r2
 1013f3c:	84001704 	addi	r16,r16,92
 1013f40:	947ff61e 	bne	r18,r17,1013f1c <_fwalk+0x50>
 1013f44:	9cc00017 	ldw	r19,0(r19)
 1013f48:	983fee1e 	bne	r19,zero,1013f04 <_fwalk+0x38>
 1013f4c:	10132c40 	call	10132c4 <__sfp_lock_release>
 1013f50:	b005883a 	mov	r2,r22
 1013f54:	dfc00717 	ldw	ra,28(sp)
 1013f58:	dd800617 	ldw	r22,24(sp)
 1013f5c:	dd400517 	ldw	r21,20(sp)
 1013f60:	dd000417 	ldw	r20,16(sp)
 1013f64:	dcc00317 	ldw	r19,12(sp)
 1013f68:	dc800217 	ldw	r18,8(sp)
 1013f6c:	dc400117 	ldw	r17,4(sp)
 1013f70:	dc000017 	ldw	r16,0(sp)
 1013f74:	dec00804 	addi	sp,sp,32
 1013f78:	f800283a 	ret
 1013f7c:	002d883a 	mov	r22,zero
 1013f80:	003ff206 	br	1013f4c <_fwalk+0x80>

01013f84 <__locale_charset>:
 1013f84:	d0a06817 	ldw	r2,-32352(gp)
 1013f88:	f800283a 	ret

01013f8c <_localeconv_r>:
 1013f8c:	008040b4 	movhi	r2,258
 1013f90:	10978004 	addi	r2,r2,24064
 1013f94:	f800283a 	ret

01013f98 <localeconv>:
 1013f98:	008040b4 	movhi	r2,258
 1013f9c:	109f8b04 	addi	r2,r2,32300
 1013fa0:	11000017 	ldw	r4,0(r2)
 1013fa4:	1013f8c1 	jmpi	1013f8c <_localeconv_r>

01013fa8 <_setlocale_r>:
 1013fa8:	defffc04 	addi	sp,sp,-16
 1013fac:	00c040b4 	movhi	r3,258
 1013fb0:	18d77b04 	addi	r3,r3,24044
 1013fb4:	dc800215 	stw	r18,8(sp)
 1013fb8:	dc400115 	stw	r17,4(sp)
 1013fbc:	dc000015 	stw	r16,0(sp)
 1013fc0:	2023883a 	mov	r17,r4
 1013fc4:	2825883a 	mov	r18,r5
 1013fc8:	dfc00315 	stw	ra,12(sp)
 1013fcc:	3021883a 	mov	r16,r6
 1013fd0:	3009883a 	mov	r4,r6
 1013fd4:	180b883a 	mov	r5,r3
 1013fd8:	30000926 	beq	r6,zero,1014000 <_setlocale_r+0x58>
 1013fdc:	1015b6c0 	call	1015b6c <strcmp>
 1013fe0:	8009883a 	mov	r4,r16
 1013fe4:	014040b4 	movhi	r5,258
 1013fe8:	2956c604 	addi	r5,r5,23320
 1013fec:	10000b1e 	bne	r2,zero,101401c <_setlocale_r+0x74>
 1013ff0:	8c000d15 	stw	r16,52(r17)
 1013ff4:	8c800c15 	stw	r18,48(r17)
 1013ff8:	00c040b4 	movhi	r3,258
 1013ffc:	18d77b04 	addi	r3,r3,24044
 1014000:	1805883a 	mov	r2,r3
 1014004:	dfc00317 	ldw	ra,12(sp)
 1014008:	dc800217 	ldw	r18,8(sp)
 101400c:	dc400117 	ldw	r17,4(sp)
 1014010:	dc000017 	ldw	r16,0(sp)
 1014014:	dec00404 	addi	sp,sp,16
 1014018:	f800283a 	ret
 101401c:	1015b6c0 	call	1015b6c <strcmp>
 1014020:	0007883a 	mov	r3,zero
 1014024:	103ff226 	beq	r2,zero,1013ff0 <_setlocale_r+0x48>
 1014028:	003ff506 	br	1014000 <_setlocale_r+0x58>

0101402c <setlocale>:
 101402c:	018040b4 	movhi	r6,258
 1014030:	319f8b04 	addi	r6,r6,32300
 1014034:	2007883a 	mov	r3,r4
 1014038:	31000017 	ldw	r4,0(r6)
 101403c:	280d883a 	mov	r6,r5
 1014040:	180b883a 	mov	r5,r3
 1014044:	1013fa81 	jmpi	1013fa8 <_setlocale_r>

01014048 <__smakebuf_r>:
 1014048:	2880030b 	ldhu	r2,12(r5)
 101404c:	deffed04 	addi	sp,sp,-76
 1014050:	dc401015 	stw	r17,64(sp)
 1014054:	1080008c 	andi	r2,r2,2
 1014058:	dc000f15 	stw	r16,60(sp)
 101405c:	dfc01215 	stw	ra,72(sp)
 1014060:	dc801115 	stw	r18,68(sp)
 1014064:	2821883a 	mov	r16,r5
 1014068:	2023883a 	mov	r17,r4
 101406c:	10000b26 	beq	r2,zero,101409c <__smakebuf_r+0x54>
 1014070:	28c010c4 	addi	r3,r5,67
 1014074:	00800044 	movi	r2,1
 1014078:	28800515 	stw	r2,20(r5)
 101407c:	28c00415 	stw	r3,16(r5)
 1014080:	28c00015 	stw	r3,0(r5)
 1014084:	dfc01217 	ldw	ra,72(sp)
 1014088:	dc801117 	ldw	r18,68(sp)
 101408c:	dc401017 	ldw	r17,64(sp)
 1014090:	dc000f17 	ldw	r16,60(sp)
 1014094:	dec01304 	addi	sp,sp,76
 1014098:	f800283a 	ret
 101409c:	2940038f 	ldh	r5,14(r5)
 10140a0:	28002116 	blt	r5,zero,1014128 <__smakebuf_r+0xe0>
 10140a4:	d80d883a 	mov	r6,sp
 10140a8:	10160340 	call	1016034 <_fstat_r>
 10140ac:	10001e16 	blt	r2,zero,1014128 <__smakebuf_r+0xe0>
 10140b0:	d8800117 	ldw	r2,4(sp)
 10140b4:	00e00014 	movui	r3,32768
 10140b8:	113c000c 	andi	r4,r2,61440
 10140bc:	20c03126 	beq	r4,r3,1014184 <__smakebuf_r+0x13c>
 10140c0:	8080030b 	ldhu	r2,12(r16)
 10140c4:	00c80004 	movi	r3,8192
 10140c8:	10820014 	ori	r2,r2,2048
 10140cc:	8080030d 	sth	r2,12(r16)
 10140d0:	20c01e26 	beq	r4,r3,101414c <__smakebuf_r+0x104>
 10140d4:	04810004 	movi	r18,1024
 10140d8:	8809883a 	mov	r4,r17
 10140dc:	900b883a 	mov	r5,r18
 10140e0:	100e2d40 	call	100e2d4 <_malloc_r>
 10140e4:	1009883a 	mov	r4,r2
 10140e8:	10003126 	beq	r2,zero,10141b0 <__smakebuf_r+0x168>
 10140ec:	80c0030b 	ldhu	r3,12(r16)
 10140f0:	00804074 	movhi	r2,257
 10140f4:	108ced04 	addi	r2,r2,13236
 10140f8:	88800f15 	stw	r2,60(r17)
 10140fc:	18c02014 	ori	r3,r3,128
 1014100:	84800515 	stw	r18,20(r16)
 1014104:	80c0030d 	sth	r3,12(r16)
 1014108:	81000415 	stw	r4,16(r16)
 101410c:	81000015 	stw	r4,0(r16)
 1014110:	dfc01217 	ldw	ra,72(sp)
 1014114:	dc801117 	ldw	r18,68(sp)
 1014118:	dc401017 	ldw	r17,64(sp)
 101411c:	dc000f17 	ldw	r16,60(sp)
 1014120:	dec01304 	addi	sp,sp,76
 1014124:	f800283a 	ret
 1014128:	80c0030b 	ldhu	r3,12(r16)
 101412c:	1880200c 	andi	r2,r3,128
 1014130:	10000426 	beq	r2,zero,1014144 <__smakebuf_r+0xfc>
 1014134:	04801004 	movi	r18,64
 1014138:	18820014 	ori	r2,r3,2048
 101413c:	8080030d 	sth	r2,12(r16)
 1014140:	003fe506 	br	10140d8 <__smakebuf_r+0x90>
 1014144:	04810004 	movi	r18,1024
 1014148:	003ffb06 	br	1014138 <__smakebuf_r+0xf0>
 101414c:	8140038f 	ldh	r5,14(r16)
 1014150:	8809883a 	mov	r4,r17
 1014154:	10160a80 	call	10160a8 <_isatty_r>
 1014158:	103fde26 	beq	r2,zero,10140d4 <__smakebuf_r+0x8c>
 101415c:	8080030b 	ldhu	r2,12(r16)
 1014160:	80c010c4 	addi	r3,r16,67
 1014164:	04810004 	movi	r18,1024
 1014168:	10800054 	ori	r2,r2,1
 101416c:	8080030d 	sth	r2,12(r16)
 1014170:	00800044 	movi	r2,1
 1014174:	80c00415 	stw	r3,16(r16)
 1014178:	80800515 	stw	r2,20(r16)
 101417c:	80c00015 	stw	r3,0(r16)
 1014180:	003fd506 	br	10140d8 <__smakebuf_r+0x90>
 1014184:	80c00a17 	ldw	r3,40(r16)
 1014188:	00804074 	movhi	r2,257
 101418c:	10968a04 	addi	r2,r2,23080
 1014190:	18bfcb1e 	bne	r3,r2,10140c0 <__smakebuf_r+0x78>
 1014194:	8080030b 	ldhu	r2,12(r16)
 1014198:	00c10004 	movi	r3,1024
 101419c:	1825883a 	mov	r18,r3
 10141a0:	10c4b03a 	or	r2,r2,r3
 10141a4:	8080030d 	sth	r2,12(r16)
 10141a8:	80c01315 	stw	r3,76(r16)
 10141ac:	003fca06 	br	10140d8 <__smakebuf_r+0x90>
 10141b0:	8100030b 	ldhu	r4,12(r16)
 10141b4:	2080800c 	andi	r2,r4,512
 10141b8:	103fb21e 	bne	r2,zero,1014084 <__smakebuf_r+0x3c>
 10141bc:	80c010c4 	addi	r3,r16,67
 10141c0:	21000094 	ori	r4,r4,2
 10141c4:	00800044 	movi	r2,1
 10141c8:	80800515 	stw	r2,20(r16)
 10141cc:	8100030d 	sth	r4,12(r16)
 10141d0:	80c00415 	stw	r3,16(r16)
 10141d4:	80c00015 	stw	r3,0(r16)
 10141d8:	003faa06 	br	1014084 <__smakebuf_r+0x3c>

010141dc <_Bfree>:
 10141dc:	28000826 	beq	r5,zero,1014200 <_Bfree+0x24>
 10141e0:	28800117 	ldw	r2,4(r5)
 10141e4:	21001317 	ldw	r4,76(r4)
 10141e8:	1085883a 	add	r2,r2,r2
 10141ec:	1085883a 	add	r2,r2,r2
 10141f0:	1105883a 	add	r2,r2,r4
 10141f4:	10c00017 	ldw	r3,0(r2)
 10141f8:	28c00015 	stw	r3,0(r5)
 10141fc:	11400015 	stw	r5,0(r2)
 1014200:	f800283a 	ret

01014204 <__hi0bits>:
 1014204:	20bfffec 	andhi	r2,r4,65535
 1014208:	10001426 	beq	r2,zero,101425c <__hi0bits+0x58>
 101420c:	0007883a 	mov	r3,zero
 1014210:	20bfc02c 	andhi	r2,r4,65280
 1014214:	1000021e 	bne	r2,zero,1014220 <__hi0bits+0x1c>
 1014218:	2008923a 	slli	r4,r4,8
 101421c:	18c00204 	addi	r3,r3,8
 1014220:	20bc002c 	andhi	r2,r4,61440
 1014224:	1000021e 	bne	r2,zero,1014230 <__hi0bits+0x2c>
 1014228:	2008913a 	slli	r4,r4,4
 101422c:	18c00104 	addi	r3,r3,4
 1014230:	20b0002c 	andhi	r2,r4,49152
 1014234:	1000031e 	bne	r2,zero,1014244 <__hi0bits+0x40>
 1014238:	2105883a 	add	r2,r4,r4
 101423c:	18c00084 	addi	r3,r3,2
 1014240:	1089883a 	add	r4,r2,r2
 1014244:	20000316 	blt	r4,zero,1014254 <__hi0bits+0x50>
 1014248:	2090002c 	andhi	r2,r4,16384
 101424c:	10000626 	beq	r2,zero,1014268 <__hi0bits+0x64>
 1014250:	18c00044 	addi	r3,r3,1
 1014254:	1805883a 	mov	r2,r3
 1014258:	f800283a 	ret
 101425c:	2008943a 	slli	r4,r4,16
 1014260:	00c00404 	movi	r3,16
 1014264:	003fea06 	br	1014210 <__hi0bits+0xc>
 1014268:	00c00804 	movi	r3,32
 101426c:	1805883a 	mov	r2,r3
 1014270:	f800283a 	ret

01014274 <__lo0bits>:
 1014274:	20c00017 	ldw	r3,0(r4)
 1014278:	188001cc 	andi	r2,r3,7
 101427c:	10000a26 	beq	r2,zero,10142a8 <__lo0bits+0x34>
 1014280:	1880004c 	andi	r2,r3,1
 1014284:	1005003a 	cmpeq	r2,r2,zero
 1014288:	10002126 	beq	r2,zero,1014310 <__lo0bits+0x9c>
 101428c:	1880008c 	andi	r2,r3,2
 1014290:	1000251e 	bne	r2,zero,1014328 <__lo0bits+0xb4>
 1014294:	1804d0ba 	srli	r2,r3,2
 1014298:	01400084 	movi	r5,2
 101429c:	20800015 	stw	r2,0(r4)
 10142a0:	2805883a 	mov	r2,r5
 10142a4:	f800283a 	ret
 10142a8:	18bfffcc 	andi	r2,r3,65535
 10142ac:	10001526 	beq	r2,zero,1014304 <__lo0bits+0x90>
 10142b0:	000b883a 	mov	r5,zero
 10142b4:	18803fcc 	andi	r2,r3,255
 10142b8:	1000021e 	bne	r2,zero,10142c4 <__lo0bits+0x50>
 10142bc:	1806d23a 	srli	r3,r3,8
 10142c0:	29400204 	addi	r5,r5,8
 10142c4:	188003cc 	andi	r2,r3,15
 10142c8:	1000021e 	bne	r2,zero,10142d4 <__lo0bits+0x60>
 10142cc:	1806d13a 	srli	r3,r3,4
 10142d0:	29400104 	addi	r5,r5,4
 10142d4:	188000cc 	andi	r2,r3,3
 10142d8:	1000021e 	bne	r2,zero,10142e4 <__lo0bits+0x70>
 10142dc:	1806d0ba 	srli	r3,r3,2
 10142e0:	29400084 	addi	r5,r5,2
 10142e4:	1880004c 	andi	r2,r3,1
 10142e8:	1000031e 	bne	r2,zero,10142f8 <__lo0bits+0x84>
 10142ec:	1806d07a 	srli	r3,r3,1
 10142f0:	18000a26 	beq	r3,zero,101431c <__lo0bits+0xa8>
 10142f4:	29400044 	addi	r5,r5,1
 10142f8:	2805883a 	mov	r2,r5
 10142fc:	20c00015 	stw	r3,0(r4)
 1014300:	f800283a 	ret
 1014304:	1806d43a 	srli	r3,r3,16
 1014308:	01400404 	movi	r5,16
 101430c:	003fe906 	br	10142b4 <__lo0bits+0x40>
 1014310:	000b883a 	mov	r5,zero
 1014314:	2805883a 	mov	r2,r5
 1014318:	f800283a 	ret
 101431c:	01400804 	movi	r5,32
 1014320:	2805883a 	mov	r2,r5
 1014324:	f800283a 	ret
 1014328:	1804d07a 	srli	r2,r3,1
 101432c:	01400044 	movi	r5,1
 1014330:	20800015 	stw	r2,0(r4)
 1014334:	003fda06 	br	10142a0 <__lo0bits+0x2c>

01014338 <__mcmp>:
 1014338:	20800417 	ldw	r2,16(r4)
 101433c:	28c00417 	ldw	r3,16(r5)
 1014340:	10cfc83a 	sub	r7,r2,r3
 1014344:	38000c1e 	bne	r7,zero,1014378 <__mcmp+0x40>
 1014348:	18c5883a 	add	r2,r3,r3
 101434c:	1085883a 	add	r2,r2,r2
 1014350:	10c00504 	addi	r3,r2,20
 1014354:	21000504 	addi	r4,r4,20
 1014358:	28cb883a 	add	r5,r5,r3
 101435c:	2085883a 	add	r2,r4,r2
 1014360:	10bfff04 	addi	r2,r2,-4
 1014364:	297fff04 	addi	r5,r5,-4
 1014368:	11800017 	ldw	r6,0(r2)
 101436c:	28c00017 	ldw	r3,0(r5)
 1014370:	30c0031e 	bne	r6,r3,1014380 <__mcmp+0x48>
 1014374:	20bffa36 	bltu	r4,r2,1014360 <__mcmp+0x28>
 1014378:	3805883a 	mov	r2,r7
 101437c:	f800283a 	ret
 1014380:	30c00336 	bltu	r6,r3,1014390 <__mcmp+0x58>
 1014384:	01c00044 	movi	r7,1
 1014388:	3805883a 	mov	r2,r7
 101438c:	f800283a 	ret
 1014390:	01ffffc4 	movi	r7,-1
 1014394:	003ff806 	br	1014378 <__mcmp+0x40>

01014398 <__ulp>:
 1014398:	295ffc2c 	andhi	r5,r5,32752
 101439c:	013f3034 	movhi	r4,64704
 10143a0:	290b883a 	add	r5,r5,r4
 10143a4:	0145c83a 	sub	r2,zero,r5
 10143a8:	1007d53a 	srai	r3,r2,20
 10143ac:	000d883a 	mov	r6,zero
 10143b0:	0140040e 	bge	zero,r5,10143c4 <__ulp+0x2c>
 10143b4:	280f883a 	mov	r7,r5
 10143b8:	3807883a 	mov	r3,r7
 10143bc:	3005883a 	mov	r2,r6
 10143c0:	f800283a 	ret
 10143c4:	008004c4 	movi	r2,19
 10143c8:	193ffb04 	addi	r4,r3,-20
 10143cc:	10c00c0e 	bge	r2,r3,1014400 <__ulp+0x68>
 10143d0:	008007c4 	movi	r2,31
 10143d4:	1107c83a 	sub	r3,r2,r4
 10143d8:	00800784 	movi	r2,30
 10143dc:	01400044 	movi	r5,1
 10143e0:	11000216 	blt	r2,r4,10143ec <__ulp+0x54>
 10143e4:	00800044 	movi	r2,1
 10143e8:	10ca983a 	sll	r5,r2,r3
 10143ec:	000f883a 	mov	r7,zero
 10143f0:	280d883a 	mov	r6,r5
 10143f4:	3807883a 	mov	r3,r7
 10143f8:	3005883a 	mov	r2,r6
 10143fc:	f800283a 	ret
 1014400:	00800234 	movhi	r2,8
 1014404:	10cfd83a 	sra	r7,r2,r3
 1014408:	000d883a 	mov	r6,zero
 101440c:	3005883a 	mov	r2,r6
 1014410:	3807883a 	mov	r3,r7
 1014414:	f800283a 	ret

01014418 <__b2d>:
 1014418:	20800417 	ldw	r2,16(r4)
 101441c:	defff904 	addi	sp,sp,-28
 1014420:	dd000415 	stw	r20,16(sp)
 1014424:	1085883a 	add	r2,r2,r2
 1014428:	25000504 	addi	r20,r4,20
 101442c:	1085883a 	add	r2,r2,r2
 1014430:	dc000015 	stw	r16,0(sp)
 1014434:	a0a1883a 	add	r16,r20,r2
 1014438:	dd400515 	stw	r21,20(sp)
 101443c:	857fff17 	ldw	r21,-4(r16)
 1014440:	dc400115 	stw	r17,4(sp)
 1014444:	dfc00615 	stw	ra,24(sp)
 1014448:	a809883a 	mov	r4,r21
 101444c:	2823883a 	mov	r17,r5
 1014450:	dcc00315 	stw	r19,12(sp)
 1014454:	dc800215 	stw	r18,8(sp)
 1014458:	10142040 	call	1014204 <__hi0bits>
 101445c:	100b883a 	mov	r5,r2
 1014460:	00800804 	movi	r2,32
 1014464:	1145c83a 	sub	r2,r2,r5
 1014468:	88800015 	stw	r2,0(r17)
 101446c:	00800284 	movi	r2,10
 1014470:	80ffff04 	addi	r3,r16,-4
 1014474:	11401416 	blt	r2,r5,10144c8 <__b2d+0xb0>
 1014478:	008002c4 	movi	r2,11
 101447c:	1149c83a 	sub	r4,r2,r5
 1014480:	a0c02736 	bltu	r20,r3,1014520 <__b2d+0x108>
 1014484:	000d883a 	mov	r6,zero
 1014488:	28800544 	addi	r2,r5,21
 101448c:	a906d83a 	srl	r3,r21,r4
 1014490:	a884983a 	sll	r2,r21,r2
 1014494:	1ccffc34 	orhi	r19,r3,16368
 1014498:	11a4b03a 	or	r18,r2,r6
 101449c:	9005883a 	mov	r2,r18
 10144a0:	9807883a 	mov	r3,r19
 10144a4:	dfc00617 	ldw	ra,24(sp)
 10144a8:	dd400517 	ldw	r21,20(sp)
 10144ac:	dd000417 	ldw	r20,16(sp)
 10144b0:	dcc00317 	ldw	r19,12(sp)
 10144b4:	dc800217 	ldw	r18,8(sp)
 10144b8:	dc400117 	ldw	r17,4(sp)
 10144bc:	dc000017 	ldw	r16,0(sp)
 10144c0:	dec00704 	addi	sp,sp,28
 10144c4:	f800283a 	ret
 10144c8:	a0c00e36 	bltu	r20,r3,1014504 <__b2d+0xec>
 10144cc:	293ffd44 	addi	r4,r5,-11
 10144d0:	000d883a 	mov	r6,zero
 10144d4:	20000f26 	beq	r4,zero,1014514 <__b2d+0xfc>
 10144d8:	00800804 	movi	r2,32
 10144dc:	110bc83a 	sub	r5,r2,r4
 10144e0:	a0c01236 	bltu	r20,r3,101452c <__b2d+0x114>
 10144e4:	000f883a 	mov	r7,zero
 10144e8:	a904983a 	sll	r2,r21,r4
 10144ec:	3146d83a 	srl	r3,r6,r5
 10144f0:	3108983a 	sll	r4,r6,r4
 10144f4:	108ffc34 	orhi	r2,r2,16368
 10144f8:	18a6b03a 	or	r19,r3,r2
 10144fc:	3924b03a 	or	r18,r7,r4
 1014500:	003fe606 	br	101449c <__b2d+0x84>
 1014504:	293ffd44 	addi	r4,r5,-11
 1014508:	81bffe17 	ldw	r6,-8(r16)
 101450c:	80fffe04 	addi	r3,r16,-8
 1014510:	203ff11e 	bne	r4,zero,10144d8 <__b2d+0xc0>
 1014514:	accffc34 	orhi	r19,r21,16368
 1014518:	3025883a 	mov	r18,r6
 101451c:	003fdf06 	br	101449c <__b2d+0x84>
 1014520:	18bfff17 	ldw	r2,-4(r3)
 1014524:	110cd83a 	srl	r6,r2,r4
 1014528:	003fd706 	br	1014488 <__b2d+0x70>
 101452c:	18bfff17 	ldw	r2,-4(r3)
 1014530:	114ed83a 	srl	r7,r2,r5
 1014534:	003fec06 	br	10144e8 <__b2d+0xd0>

01014538 <__ratio>:
 1014538:	defff904 	addi	sp,sp,-28
 101453c:	dc400215 	stw	r17,8(sp)
 1014540:	2823883a 	mov	r17,r5
 1014544:	d80b883a 	mov	r5,sp
 1014548:	dfc00615 	stw	ra,24(sp)
 101454c:	dd000515 	stw	r20,20(sp)
 1014550:	dcc00415 	stw	r19,16(sp)
 1014554:	dc800315 	stw	r18,12(sp)
 1014558:	2025883a 	mov	r18,r4
 101455c:	10144180 	call	1014418 <__b2d>
 1014560:	8809883a 	mov	r4,r17
 1014564:	d9400104 	addi	r5,sp,4
 1014568:	1027883a 	mov	r19,r2
 101456c:	1829883a 	mov	r20,r3
 1014570:	10144180 	call	1014418 <__b2d>
 1014574:	89000417 	ldw	r4,16(r17)
 1014578:	91c00417 	ldw	r7,16(r18)
 101457c:	d9800117 	ldw	r6,4(sp)
 1014580:	180b883a 	mov	r5,r3
 1014584:	390fc83a 	sub	r7,r7,r4
 1014588:	1009883a 	mov	r4,r2
 101458c:	d8800017 	ldw	r2,0(sp)
 1014590:	380e917a 	slli	r7,r7,5
 1014594:	2011883a 	mov	r8,r4
 1014598:	1185c83a 	sub	r2,r2,r6
 101459c:	11c5883a 	add	r2,r2,r7
 10145a0:	1006953a 	slli	r3,r2,20
 10145a4:	2813883a 	mov	r9,r5
 10145a8:	00800d0e 	bge	zero,r2,10145e0 <__ratio+0xa8>
 10145ac:	1d29883a 	add	r20,r3,r20
 10145b0:	a00b883a 	mov	r5,r20
 10145b4:	480f883a 	mov	r7,r9
 10145b8:	9809883a 	mov	r4,r19
 10145bc:	400d883a 	mov	r6,r8
 10145c0:	101765c0 	call	101765c <__divdf3>
 10145c4:	dfc00617 	ldw	ra,24(sp)
 10145c8:	dd000517 	ldw	r20,20(sp)
 10145cc:	dcc00417 	ldw	r19,16(sp)
 10145d0:	dc800317 	ldw	r18,12(sp)
 10145d4:	dc400217 	ldw	r17,8(sp)
 10145d8:	dec00704 	addi	sp,sp,28
 10145dc:	f800283a 	ret
 10145e0:	28d3c83a 	sub	r9,r5,r3
 10145e4:	003ff206 	br	10145b0 <__ratio+0x78>

010145e8 <_mprec_log10>:
 10145e8:	defffe04 	addi	sp,sp,-8
 10145ec:	008005c4 	movi	r2,23
 10145f0:	dc000015 	stw	r16,0(sp)
 10145f4:	dfc00115 	stw	ra,4(sp)
 10145f8:	2021883a 	mov	r16,r4
 10145fc:	11000c16 	blt	r2,r4,1014630 <_mprec_log10+0x48>
 1014600:	200490fa 	slli	r2,r4,3
 1014604:	00c040b4 	movhi	r3,258
 1014608:	18d78c04 	addi	r3,r3,24112
 101460c:	10c5883a 	add	r2,r2,r3
 1014610:	12400117 	ldw	r9,4(r2)
 1014614:	12000017 	ldw	r8,0(r2)
 1014618:	4807883a 	mov	r3,r9
 101461c:	4005883a 	mov	r2,r8
 1014620:	dfc00117 	ldw	ra,4(sp)
 1014624:	dc000017 	ldw	r16,0(sp)
 1014628:	dec00204 	addi	sp,sp,8
 101462c:	f800283a 	ret
 1014630:	0011883a 	mov	r8,zero
 1014634:	024ffc34 	movhi	r9,16368
 1014638:	0005883a 	mov	r2,zero
 101463c:	00d00934 	movhi	r3,16420
 1014640:	480b883a 	mov	r5,r9
 1014644:	4009883a 	mov	r4,r8
 1014648:	180f883a 	mov	r7,r3
 101464c:	100d883a 	mov	r6,r2
 1014650:	10172980 	call	1017298 <__muldf3>
 1014654:	843fffc4 	addi	r16,r16,-1
 1014658:	1011883a 	mov	r8,r2
 101465c:	1813883a 	mov	r9,r3
 1014660:	803ff51e 	bne	r16,zero,1014638 <_mprec_log10+0x50>
 1014664:	4005883a 	mov	r2,r8
 1014668:	4807883a 	mov	r3,r9
 101466c:	dfc00117 	ldw	ra,4(sp)
 1014670:	dc000017 	ldw	r16,0(sp)
 1014674:	dec00204 	addi	sp,sp,8
 1014678:	f800283a 	ret

0101467c <__copybits>:
 101467c:	297fffc4 	addi	r5,r5,-1
 1014680:	30800417 	ldw	r2,16(r6)
 1014684:	280bd17a 	srai	r5,r5,5
 1014688:	31800504 	addi	r6,r6,20
 101468c:	1085883a 	add	r2,r2,r2
 1014690:	294b883a 	add	r5,r5,r5
 1014694:	294b883a 	add	r5,r5,r5
 1014698:	1085883a 	add	r2,r2,r2
 101469c:	290b883a 	add	r5,r5,r4
 10146a0:	3087883a 	add	r3,r6,r2
 10146a4:	29400104 	addi	r5,r5,4
 10146a8:	30c0052e 	bgeu	r6,r3,10146c0 <__copybits+0x44>
 10146ac:	30800017 	ldw	r2,0(r6)
 10146b0:	31800104 	addi	r6,r6,4
 10146b4:	20800015 	stw	r2,0(r4)
 10146b8:	21000104 	addi	r4,r4,4
 10146bc:	30fffb36 	bltu	r6,r3,10146ac <__copybits+0x30>
 10146c0:	2140032e 	bgeu	r4,r5,10146d0 <__copybits+0x54>
 10146c4:	20000015 	stw	zero,0(r4)
 10146c8:	21000104 	addi	r4,r4,4
 10146cc:	217ffd36 	bltu	r4,r5,10146c4 <__copybits+0x48>
 10146d0:	f800283a 	ret

010146d4 <__any_on>:
 10146d4:	20800417 	ldw	r2,16(r4)
 10146d8:	2807d17a 	srai	r3,r5,5
 10146dc:	21000504 	addi	r4,r4,20
 10146e0:	10c00d0e 	bge	r2,r3,1014718 <__any_on+0x44>
 10146e4:	1085883a 	add	r2,r2,r2
 10146e8:	1085883a 	add	r2,r2,r2
 10146ec:	208d883a 	add	r6,r4,r2
 10146f0:	2180182e 	bgeu	r4,r6,1014754 <__any_on+0x80>
 10146f4:	30bfff17 	ldw	r2,-4(r6)
 10146f8:	30ffff04 	addi	r3,r6,-4
 10146fc:	1000041e 	bne	r2,zero,1014710 <__any_on+0x3c>
 1014700:	20c0142e 	bgeu	r4,r3,1014754 <__any_on+0x80>
 1014704:	18ffff04 	addi	r3,r3,-4
 1014708:	18800017 	ldw	r2,0(r3)
 101470c:	103ffc26 	beq	r2,zero,1014700 <__any_on+0x2c>
 1014710:	00800044 	movi	r2,1
 1014714:	f800283a 	ret
 1014718:	18800a0e 	bge	r3,r2,1014744 <__any_on+0x70>
 101471c:	294007cc 	andi	r5,r5,31
 1014720:	28000826 	beq	r5,zero,1014744 <__any_on+0x70>
 1014724:	18c5883a 	add	r2,r3,r3
 1014728:	1085883a 	add	r2,r2,r2
 101472c:	208d883a 	add	r6,r4,r2
 1014730:	30c00017 	ldw	r3,0(r6)
 1014734:	1944d83a 	srl	r2,r3,r5
 1014738:	1144983a 	sll	r2,r2,r5
 101473c:	18bff41e 	bne	r3,r2,1014710 <__any_on+0x3c>
 1014740:	003feb06 	br	10146f0 <__any_on+0x1c>
 1014744:	18c5883a 	add	r2,r3,r3
 1014748:	1085883a 	add	r2,r2,r2
 101474c:	208d883a 	add	r6,r4,r2
 1014750:	003fe706 	br	10146f0 <__any_on+0x1c>
 1014754:	0005883a 	mov	r2,zero
 1014758:	f800283a 	ret

0101475c <_Balloc>:
 101475c:	20c01317 	ldw	r3,76(r4)
 1014760:	defffb04 	addi	sp,sp,-20
 1014764:	dcc00315 	stw	r19,12(sp)
 1014768:	dc800215 	stw	r18,8(sp)
 101476c:	dfc00415 	stw	ra,16(sp)
 1014770:	2825883a 	mov	r18,r5
 1014774:	dc400115 	stw	r17,4(sp)
 1014778:	dc000015 	stw	r16,0(sp)
 101477c:	2027883a 	mov	r19,r4
 1014780:	01800404 	movi	r6,16
 1014784:	01400104 	movi	r5,4
 1014788:	18001726 	beq	r3,zero,10147e8 <_Balloc+0x8c>
 101478c:	01400044 	movi	r5,1
 1014790:	9485883a 	add	r2,r18,r18
 1014794:	2ca2983a 	sll	r17,r5,r18
 1014798:	1085883a 	add	r2,r2,r2
 101479c:	10c7883a 	add	r3,r2,r3
 10147a0:	1c000017 	ldw	r16,0(r3)
 10147a4:	8c4d883a 	add	r6,r17,r17
 10147a8:	318d883a 	add	r6,r6,r6
 10147ac:	9809883a 	mov	r4,r19
 10147b0:	31800504 	addi	r6,r6,20
 10147b4:	80001226 	beq	r16,zero,1014800 <_Balloc+0xa4>
 10147b8:	80800017 	ldw	r2,0(r16)
 10147bc:	18800015 	stw	r2,0(r3)
 10147c0:	80000415 	stw	zero,16(r16)
 10147c4:	80000315 	stw	zero,12(r16)
 10147c8:	8005883a 	mov	r2,r16
 10147cc:	dfc00417 	ldw	ra,16(sp)
 10147d0:	dcc00317 	ldw	r19,12(sp)
 10147d4:	dc800217 	ldw	r18,8(sp)
 10147d8:	dc400117 	ldw	r17,4(sp)
 10147dc:	dc000017 	ldw	r16,0(sp)
 10147e0:	dec00504 	addi	sp,sp,20
 10147e4:	f800283a 	ret
 10147e8:	1015dec0 	call	1015dec <_calloc_r>
 10147ec:	1007883a 	mov	r3,r2
 10147f0:	0021883a 	mov	r16,zero
 10147f4:	98801315 	stw	r2,76(r19)
 10147f8:	103fe41e 	bne	r2,zero,101478c <_Balloc+0x30>
 10147fc:	003ff206 	br	10147c8 <_Balloc+0x6c>
 1014800:	1015dec0 	call	1015dec <_calloc_r>
 1014804:	103ff026 	beq	r2,zero,10147c8 <_Balloc+0x6c>
 1014808:	1021883a 	mov	r16,r2
 101480c:	14800115 	stw	r18,4(r2)
 1014810:	14400215 	stw	r17,8(r2)
 1014814:	003fea06 	br	10147c0 <_Balloc+0x64>

01014818 <__d2b>:
 1014818:	defff504 	addi	sp,sp,-44
 101481c:	dcc00515 	stw	r19,20(sp)
 1014820:	04c00044 	movi	r19,1
 1014824:	dc000215 	stw	r16,8(sp)
 1014828:	2821883a 	mov	r16,r5
 101482c:	980b883a 	mov	r5,r19
 1014830:	ddc00915 	stw	r23,36(sp)
 1014834:	dd800815 	stw	r22,32(sp)
 1014838:	dd400715 	stw	r21,28(sp)
 101483c:	dd000615 	stw	r20,24(sp)
 1014840:	dc800415 	stw	r18,16(sp)
 1014844:	dc400315 	stw	r17,12(sp)
 1014848:	dfc00a15 	stw	ra,40(sp)
 101484c:	3023883a 	mov	r17,r6
 1014850:	382d883a 	mov	r22,r7
 1014854:	ddc00b17 	ldw	r23,44(sp)
 1014858:	101475c0 	call	101475c <_Balloc>
 101485c:	1025883a 	mov	r18,r2
 1014860:	00a00034 	movhi	r2,32768
 1014864:	10bfffc4 	addi	r2,r2,-1
 1014868:	8888703a 	and	r4,r17,r2
 101486c:	202ad53a 	srli	r21,r4,20
 1014870:	00800434 	movhi	r2,16
 1014874:	10bfffc4 	addi	r2,r2,-1
 1014878:	8886703a 	and	r3,r17,r2
 101487c:	a829003a 	cmpeq	r20,r21,zero
 1014880:	800b883a 	mov	r5,r16
 1014884:	d8c00115 	stw	r3,4(sp)
 1014888:	94000504 	addi	r16,r18,20
 101488c:	a000021e 	bne	r20,zero,1014898 <__d2b+0x80>
 1014890:	18c00434 	orhi	r3,r3,16
 1014894:	d8c00115 	stw	r3,4(sp)
 1014898:	28002726 	beq	r5,zero,1014938 <__d2b+0x120>
 101489c:	d809883a 	mov	r4,sp
 10148a0:	d9400015 	stw	r5,0(sp)
 10148a4:	10142740 	call	1014274 <__lo0bits>
 10148a8:	100d883a 	mov	r6,r2
 10148ac:	10003526 	beq	r2,zero,1014984 <__d2b+0x16c>
 10148b0:	d8c00117 	ldw	r3,4(sp)
 10148b4:	00800804 	movi	r2,32
 10148b8:	1185c83a 	sub	r2,r2,r6
 10148bc:	d9000017 	ldw	r4,0(sp)
 10148c0:	1886983a 	sll	r3,r3,r2
 10148c4:	1906b03a 	or	r3,r3,r4
 10148c8:	90c00515 	stw	r3,20(r18)
 10148cc:	d8c00117 	ldw	r3,4(sp)
 10148d0:	1986d83a 	srl	r3,r3,r6
 10148d4:	d8c00115 	stw	r3,4(sp)
 10148d8:	180b003a 	cmpeq	r5,r3,zero
 10148dc:	00800084 	movi	r2,2
 10148e0:	114bc83a 	sub	r5,r2,r5
 10148e4:	80c00115 	stw	r3,4(r16)
 10148e8:	91400415 	stw	r5,16(r18)
 10148ec:	a0001a1e 	bne	r20,zero,1014958 <__d2b+0x140>
 10148f0:	3545883a 	add	r2,r6,r21
 10148f4:	10bef344 	addi	r2,r2,-1075
 10148f8:	00c00d44 	movi	r3,53
 10148fc:	b0800015 	stw	r2,0(r22)
 1014900:	1987c83a 	sub	r3,r3,r6
 1014904:	b8c00015 	stw	r3,0(r23)
 1014908:	9005883a 	mov	r2,r18
 101490c:	dfc00a17 	ldw	ra,40(sp)
 1014910:	ddc00917 	ldw	r23,36(sp)
 1014914:	dd800817 	ldw	r22,32(sp)
 1014918:	dd400717 	ldw	r21,28(sp)
 101491c:	dd000617 	ldw	r20,24(sp)
 1014920:	dcc00517 	ldw	r19,20(sp)
 1014924:	dc800417 	ldw	r18,16(sp)
 1014928:	dc400317 	ldw	r17,12(sp)
 101492c:	dc000217 	ldw	r16,8(sp)
 1014930:	dec00b04 	addi	sp,sp,44
 1014934:	f800283a 	ret
 1014938:	d9000104 	addi	r4,sp,4
 101493c:	10142740 	call	1014274 <__lo0bits>
 1014940:	11800804 	addi	r6,r2,32
 1014944:	d8800117 	ldw	r2,4(sp)
 1014948:	94c00415 	stw	r19,16(r18)
 101494c:	980b883a 	mov	r5,r19
 1014950:	90800515 	stw	r2,20(r18)
 1014954:	a03fe626 	beq	r20,zero,10148f0 <__d2b+0xd8>
 1014958:	2945883a 	add	r2,r5,r5
 101495c:	1085883a 	add	r2,r2,r2
 1014960:	1405883a 	add	r2,r2,r16
 1014964:	113fff17 	ldw	r4,-4(r2)
 1014968:	30fef384 	addi	r3,r6,-1074
 101496c:	2820917a 	slli	r16,r5,5
 1014970:	b0c00015 	stw	r3,0(r22)
 1014974:	10142040 	call	1014204 <__hi0bits>
 1014978:	80a1c83a 	sub	r16,r16,r2
 101497c:	bc000015 	stw	r16,0(r23)
 1014980:	003fe106 	br	1014908 <__d2b+0xf0>
 1014984:	d8800017 	ldw	r2,0(sp)
 1014988:	90800515 	stw	r2,20(r18)
 101498c:	d8c00117 	ldw	r3,4(sp)
 1014990:	003fd106 	br	10148d8 <__d2b+0xc0>

01014994 <__mdiff>:
 1014994:	defffb04 	addi	sp,sp,-20
 1014998:	dc000015 	stw	r16,0(sp)
 101499c:	2821883a 	mov	r16,r5
 10149a0:	dc800215 	stw	r18,8(sp)
 10149a4:	300b883a 	mov	r5,r6
 10149a8:	2025883a 	mov	r18,r4
 10149ac:	8009883a 	mov	r4,r16
 10149b0:	dc400115 	stw	r17,4(sp)
 10149b4:	dfc00415 	stw	ra,16(sp)
 10149b8:	dcc00315 	stw	r19,12(sp)
 10149bc:	3023883a 	mov	r17,r6
 10149c0:	10143380 	call	1014338 <__mcmp>
 10149c4:	10004226 	beq	r2,zero,1014ad0 <__mdiff+0x13c>
 10149c8:	10005016 	blt	r2,zero,1014b0c <__mdiff+0x178>
 10149cc:	0027883a 	mov	r19,zero
 10149d0:	81400117 	ldw	r5,4(r16)
 10149d4:	9009883a 	mov	r4,r18
 10149d8:	101475c0 	call	101475c <_Balloc>
 10149dc:	1019883a 	mov	r12,r2
 10149e0:	82800417 	ldw	r10,16(r16)
 10149e4:	88800417 	ldw	r2,16(r17)
 10149e8:	81800504 	addi	r6,r16,20
 10149ec:	5287883a 	add	r3,r10,r10
 10149f0:	1085883a 	add	r2,r2,r2
 10149f4:	18c7883a 	add	r3,r3,r3
 10149f8:	1085883a 	add	r2,r2,r2
 10149fc:	8a000504 	addi	r8,r17,20
 1014a00:	64c00315 	stw	r19,12(r12)
 1014a04:	30db883a 	add	r13,r6,r3
 1014a08:	4097883a 	add	r11,r8,r2
 1014a0c:	61c00504 	addi	r7,r12,20
 1014a10:	0013883a 	mov	r9,zero
 1014a14:	31000017 	ldw	r4,0(r6)
 1014a18:	41400017 	ldw	r5,0(r8)
 1014a1c:	42000104 	addi	r8,r8,4
 1014a20:	20bfffcc 	andi	r2,r4,65535
 1014a24:	28ffffcc 	andi	r3,r5,65535
 1014a28:	10c5c83a 	sub	r2,r2,r3
 1014a2c:	1245883a 	add	r2,r2,r9
 1014a30:	2008d43a 	srli	r4,r4,16
 1014a34:	280ad43a 	srli	r5,r5,16
 1014a38:	1007d43a 	srai	r3,r2,16
 1014a3c:	3880000d 	sth	r2,0(r7)
 1014a40:	2149c83a 	sub	r4,r4,r5
 1014a44:	20c9883a 	add	r4,r4,r3
 1014a48:	3900008d 	sth	r4,2(r7)
 1014a4c:	31800104 	addi	r6,r6,4
 1014a50:	39c00104 	addi	r7,r7,4
 1014a54:	2013d43a 	srai	r9,r4,16
 1014a58:	42ffee36 	bltu	r8,r11,1014a14 <__mdiff+0x80>
 1014a5c:	33400c2e 	bgeu	r6,r13,1014a90 <__mdiff+0xfc>
 1014a60:	30800017 	ldw	r2,0(r6)
 1014a64:	31800104 	addi	r6,r6,4
 1014a68:	10ffffcc 	andi	r3,r2,65535
 1014a6c:	1a47883a 	add	r3,r3,r9
 1014a70:	1004d43a 	srli	r2,r2,16
 1014a74:	1809d43a 	srai	r4,r3,16
 1014a78:	38c0000d 	sth	r3,0(r7)
 1014a7c:	1105883a 	add	r2,r2,r4
 1014a80:	3880008d 	sth	r2,2(r7)
 1014a84:	1013d43a 	srai	r9,r2,16
 1014a88:	39c00104 	addi	r7,r7,4
 1014a8c:	337ff436 	bltu	r6,r13,1014a60 <__mdiff+0xcc>
 1014a90:	38bfff17 	ldw	r2,-4(r7)
 1014a94:	38ffff04 	addi	r3,r7,-4
 1014a98:	1000041e 	bne	r2,zero,1014aac <__mdiff+0x118>
 1014a9c:	18ffff04 	addi	r3,r3,-4
 1014aa0:	18800017 	ldw	r2,0(r3)
 1014aa4:	52bfffc4 	addi	r10,r10,-1
 1014aa8:	103ffc26 	beq	r2,zero,1014a9c <__mdiff+0x108>
 1014aac:	6005883a 	mov	r2,r12
 1014ab0:	62800415 	stw	r10,16(r12)
 1014ab4:	dfc00417 	ldw	ra,16(sp)
 1014ab8:	dcc00317 	ldw	r19,12(sp)
 1014abc:	dc800217 	ldw	r18,8(sp)
 1014ac0:	dc400117 	ldw	r17,4(sp)
 1014ac4:	dc000017 	ldw	r16,0(sp)
 1014ac8:	dec00504 	addi	sp,sp,20
 1014acc:	f800283a 	ret
 1014ad0:	9009883a 	mov	r4,r18
 1014ad4:	000b883a 	mov	r5,zero
 1014ad8:	101475c0 	call	101475c <_Balloc>
 1014adc:	1019883a 	mov	r12,r2
 1014ae0:	00800044 	movi	r2,1
 1014ae4:	60800415 	stw	r2,16(r12)
 1014ae8:	6005883a 	mov	r2,r12
 1014aec:	60000515 	stw	zero,20(r12)
 1014af0:	dfc00417 	ldw	ra,16(sp)
 1014af4:	dcc00317 	ldw	r19,12(sp)
 1014af8:	dc800217 	ldw	r18,8(sp)
 1014afc:	dc400117 	ldw	r17,4(sp)
 1014b00:	dc000017 	ldw	r16,0(sp)
 1014b04:	dec00504 	addi	sp,sp,20
 1014b08:	f800283a 	ret
 1014b0c:	880d883a 	mov	r6,r17
 1014b10:	04c00044 	movi	r19,1
 1014b14:	8023883a 	mov	r17,r16
 1014b18:	3021883a 	mov	r16,r6
 1014b1c:	003fac06 	br	10149d0 <__mdiff+0x3c>

01014b20 <__lshift>:
 1014b20:	defff904 	addi	sp,sp,-28
 1014b24:	28800417 	ldw	r2,16(r5)
 1014b28:	dc000015 	stw	r16,0(sp)
 1014b2c:	3021d17a 	srai	r16,r6,5
 1014b30:	28c00217 	ldw	r3,8(r5)
 1014b34:	10800044 	addi	r2,r2,1
 1014b38:	dc400115 	stw	r17,4(sp)
 1014b3c:	80a3883a 	add	r17,r16,r2
 1014b40:	dd400515 	stw	r21,20(sp)
 1014b44:	dd000415 	stw	r20,16(sp)
 1014b48:	dc800215 	stw	r18,8(sp)
 1014b4c:	dfc00615 	stw	ra,24(sp)
 1014b50:	2825883a 	mov	r18,r5
 1014b54:	dcc00315 	stw	r19,12(sp)
 1014b58:	3029883a 	mov	r20,r6
 1014b5c:	202b883a 	mov	r21,r4
 1014b60:	29400117 	ldw	r5,4(r5)
 1014b64:	1c40030e 	bge	r3,r17,1014b74 <__lshift+0x54>
 1014b68:	18c7883a 	add	r3,r3,r3
 1014b6c:	29400044 	addi	r5,r5,1
 1014b70:	1c7ffd16 	blt	r3,r17,1014b68 <__lshift+0x48>
 1014b74:	a809883a 	mov	r4,r21
 1014b78:	101475c0 	call	101475c <_Balloc>
 1014b7c:	1027883a 	mov	r19,r2
 1014b80:	11400504 	addi	r5,r2,20
 1014b84:	0400090e 	bge	zero,r16,1014bac <__lshift+0x8c>
 1014b88:	2805883a 	mov	r2,r5
 1014b8c:	0007883a 	mov	r3,zero
 1014b90:	18c00044 	addi	r3,r3,1
 1014b94:	10000015 	stw	zero,0(r2)
 1014b98:	10800104 	addi	r2,r2,4
 1014b9c:	80fffc1e 	bne	r16,r3,1014b90 <__lshift+0x70>
 1014ba0:	8405883a 	add	r2,r16,r16
 1014ba4:	1085883a 	add	r2,r2,r2
 1014ba8:	288b883a 	add	r5,r5,r2
 1014bac:	90800417 	ldw	r2,16(r18)
 1014bb0:	91000504 	addi	r4,r18,20
 1014bb4:	a18007cc 	andi	r6,r20,31
 1014bb8:	1085883a 	add	r2,r2,r2
 1014bbc:	1085883a 	add	r2,r2,r2
 1014bc0:	208f883a 	add	r7,r4,r2
 1014bc4:	30001e26 	beq	r6,zero,1014c40 <__lshift+0x120>
 1014bc8:	00800804 	movi	r2,32
 1014bcc:	1191c83a 	sub	r8,r2,r6
 1014bd0:	0007883a 	mov	r3,zero
 1014bd4:	20800017 	ldw	r2,0(r4)
 1014bd8:	1184983a 	sll	r2,r2,r6
 1014bdc:	1884b03a 	or	r2,r3,r2
 1014be0:	28800015 	stw	r2,0(r5)
 1014be4:	20c00017 	ldw	r3,0(r4)
 1014be8:	21000104 	addi	r4,r4,4
 1014bec:	29400104 	addi	r5,r5,4
 1014bf0:	1a06d83a 	srl	r3,r3,r8
 1014bf4:	21fff736 	bltu	r4,r7,1014bd4 <__lshift+0xb4>
 1014bf8:	28c00015 	stw	r3,0(r5)
 1014bfc:	18000126 	beq	r3,zero,1014c04 <__lshift+0xe4>
 1014c00:	8c400044 	addi	r17,r17,1
 1014c04:	88bfffc4 	addi	r2,r17,-1
 1014c08:	98800415 	stw	r2,16(r19)
 1014c0c:	a809883a 	mov	r4,r21
 1014c10:	900b883a 	mov	r5,r18
 1014c14:	10141dc0 	call	10141dc <_Bfree>
 1014c18:	9805883a 	mov	r2,r19
 1014c1c:	dfc00617 	ldw	ra,24(sp)
 1014c20:	dd400517 	ldw	r21,20(sp)
 1014c24:	dd000417 	ldw	r20,16(sp)
 1014c28:	dcc00317 	ldw	r19,12(sp)
 1014c2c:	dc800217 	ldw	r18,8(sp)
 1014c30:	dc400117 	ldw	r17,4(sp)
 1014c34:	dc000017 	ldw	r16,0(sp)
 1014c38:	dec00704 	addi	sp,sp,28
 1014c3c:	f800283a 	ret
 1014c40:	20800017 	ldw	r2,0(r4)
 1014c44:	21000104 	addi	r4,r4,4
 1014c48:	28800015 	stw	r2,0(r5)
 1014c4c:	29400104 	addi	r5,r5,4
 1014c50:	21ffec2e 	bgeu	r4,r7,1014c04 <__lshift+0xe4>
 1014c54:	20800017 	ldw	r2,0(r4)
 1014c58:	21000104 	addi	r4,r4,4
 1014c5c:	28800015 	stw	r2,0(r5)
 1014c60:	29400104 	addi	r5,r5,4
 1014c64:	21fff636 	bltu	r4,r7,1014c40 <__lshift+0x120>
 1014c68:	003fe606 	br	1014c04 <__lshift+0xe4>

01014c6c <__multiply>:
 1014c6c:	defff904 	addi	sp,sp,-28
 1014c70:	dcc00315 	stw	r19,12(sp)
 1014c74:	dc800215 	stw	r18,8(sp)
 1014c78:	2cc00417 	ldw	r19,16(r5)
 1014c7c:	34800417 	ldw	r18,16(r6)
 1014c80:	dd000415 	stw	r20,16(sp)
 1014c84:	dc400115 	stw	r17,4(sp)
 1014c88:	dfc00615 	stw	ra,24(sp)
 1014c8c:	dd400515 	stw	r21,20(sp)
 1014c90:	dc000015 	stw	r16,0(sp)
 1014c94:	2823883a 	mov	r17,r5
 1014c98:	3029883a 	mov	r20,r6
 1014c9c:	9c80040e 	bge	r19,r18,1014cb0 <__multiply+0x44>
 1014ca0:	9027883a 	mov	r19,r18
 1014ca4:	2c800417 	ldw	r18,16(r5)
 1014ca8:	2829883a 	mov	r20,r5
 1014cac:	3023883a 	mov	r17,r6
 1014cb0:	88800217 	ldw	r2,8(r17)
 1014cb4:	9ca1883a 	add	r16,r19,r18
 1014cb8:	89400117 	ldw	r5,4(r17)
 1014cbc:	1400010e 	bge	r2,r16,1014cc4 <__multiply+0x58>
 1014cc0:	29400044 	addi	r5,r5,1
 1014cc4:	101475c0 	call	101475c <_Balloc>
 1014cc8:	102b883a 	mov	r21,r2
 1014ccc:	8405883a 	add	r2,r16,r16
 1014cd0:	1085883a 	add	r2,r2,r2
 1014cd4:	a9000504 	addi	r4,r21,20
 1014cd8:	209d883a 	add	r14,r4,r2
 1014cdc:	2380042e 	bgeu	r4,r14,1014cf0 <__multiply+0x84>
 1014ce0:	2005883a 	mov	r2,r4
 1014ce4:	10000015 	stw	zero,0(r2)
 1014ce8:	10800104 	addi	r2,r2,4
 1014cec:	13bffd36 	bltu	r2,r14,1014ce4 <__multiply+0x78>
 1014cf0:	9485883a 	add	r2,r18,r18
 1014cf4:	9cc7883a 	add	r3,r19,r19
 1014cf8:	a1800504 	addi	r6,r20,20
 1014cfc:	1085883a 	add	r2,r2,r2
 1014d00:	8b400504 	addi	r13,r17,20
 1014d04:	18c7883a 	add	r3,r3,r3
 1014d08:	309f883a 	add	r15,r6,r2
 1014d0c:	68d7883a 	add	r11,r13,r3
 1014d10:	33c03b2e 	bgeu	r6,r15,1014e00 <__multiply+0x194>
 1014d14:	2019883a 	mov	r12,r4
 1014d18:	30800017 	ldw	r2,0(r6)
 1014d1c:	127fffcc 	andi	r9,r2,65535
 1014d20:	48001826 	beq	r9,zero,1014d84 <__multiply+0x118>
 1014d24:	6811883a 	mov	r8,r13
 1014d28:	600f883a 	mov	r7,r12
 1014d2c:	0015883a 	mov	r10,zero
 1014d30:	40c00017 	ldw	r3,0(r8)
 1014d34:	39400017 	ldw	r5,0(r7)
 1014d38:	42000104 	addi	r8,r8,4
 1014d3c:	193fffcc 	andi	r4,r3,65535
 1014d40:	4909383a 	mul	r4,r9,r4
 1014d44:	1806d43a 	srli	r3,r3,16
 1014d48:	28bfffcc 	andi	r2,r5,65535
 1014d4c:	5085883a 	add	r2,r10,r2
 1014d50:	2089883a 	add	r4,r4,r2
 1014d54:	48c7383a 	mul	r3,r9,r3
 1014d58:	280ad43a 	srli	r5,r5,16
 1014d5c:	2004d43a 	srli	r2,r4,16
 1014d60:	3900000d 	sth	r4,0(r7)
 1014d64:	1947883a 	add	r3,r3,r5
 1014d68:	10c5883a 	add	r2,r2,r3
 1014d6c:	3880008d 	sth	r2,2(r7)
 1014d70:	1014d43a 	srli	r10,r2,16
 1014d74:	39c00104 	addi	r7,r7,4
 1014d78:	42ffed36 	bltu	r8,r11,1014d30 <__multiply+0xc4>
 1014d7c:	3a800015 	stw	r10,0(r7)
 1014d80:	30800017 	ldw	r2,0(r6)
 1014d84:	1012d43a 	srli	r9,r2,16
 1014d88:	48001926 	beq	r9,zero,1014df0 <__multiply+0x184>
 1014d8c:	60800017 	ldw	r2,0(r12)
 1014d90:	6811883a 	mov	r8,r13
 1014d94:	600f883a 	mov	r7,r12
 1014d98:	0015883a 	mov	r10,zero
 1014d9c:	100b883a 	mov	r5,r2
 1014da0:	41000017 	ldw	r4,0(r8)
 1014da4:	2806d43a 	srli	r3,r5,16
 1014da8:	3880000d 	sth	r2,0(r7)
 1014dac:	20bfffcc 	andi	r2,r4,65535
 1014db0:	4885383a 	mul	r2,r9,r2
 1014db4:	50c7883a 	add	r3,r10,r3
 1014db8:	2008d43a 	srli	r4,r4,16
 1014dbc:	10c5883a 	add	r2,r2,r3
 1014dc0:	3880008d 	sth	r2,2(r7)
 1014dc4:	39c00104 	addi	r7,r7,4
 1014dc8:	39400017 	ldw	r5,0(r7)
 1014dcc:	4909383a 	mul	r4,r9,r4
 1014dd0:	1004d43a 	srli	r2,r2,16
 1014dd4:	28ffffcc 	andi	r3,r5,65535
 1014dd8:	20c9883a 	add	r4,r4,r3
 1014ddc:	1105883a 	add	r2,r2,r4
 1014de0:	42000104 	addi	r8,r8,4
 1014de4:	1014d43a 	srli	r10,r2,16
 1014de8:	42ffed36 	bltu	r8,r11,1014da0 <__multiply+0x134>
 1014dec:	38800015 	stw	r2,0(r7)
 1014df0:	31800104 	addi	r6,r6,4
 1014df4:	33c0022e 	bgeu	r6,r15,1014e00 <__multiply+0x194>
 1014df8:	63000104 	addi	r12,r12,4
 1014dfc:	003fc606 	br	1014d18 <__multiply+0xac>
 1014e00:	0400090e 	bge	zero,r16,1014e28 <__multiply+0x1bc>
 1014e04:	70bfff17 	ldw	r2,-4(r14)
 1014e08:	70ffff04 	addi	r3,r14,-4
 1014e0c:	10000326 	beq	r2,zero,1014e1c <__multiply+0x1b0>
 1014e10:	00000506 	br	1014e28 <__multiply+0x1bc>
 1014e14:	18800017 	ldw	r2,0(r3)
 1014e18:	1000031e 	bne	r2,zero,1014e28 <__multiply+0x1bc>
 1014e1c:	843fffc4 	addi	r16,r16,-1
 1014e20:	18ffff04 	addi	r3,r3,-4
 1014e24:	803ffb1e 	bne	r16,zero,1014e14 <__multiply+0x1a8>
 1014e28:	a805883a 	mov	r2,r21
 1014e2c:	ac000415 	stw	r16,16(r21)
 1014e30:	dfc00617 	ldw	ra,24(sp)
 1014e34:	dd400517 	ldw	r21,20(sp)
 1014e38:	dd000417 	ldw	r20,16(sp)
 1014e3c:	dcc00317 	ldw	r19,12(sp)
 1014e40:	dc800217 	ldw	r18,8(sp)
 1014e44:	dc400117 	ldw	r17,4(sp)
 1014e48:	dc000017 	ldw	r16,0(sp)
 1014e4c:	dec00704 	addi	sp,sp,28
 1014e50:	f800283a 	ret

01014e54 <__i2b>:
 1014e54:	defffd04 	addi	sp,sp,-12
 1014e58:	dc000015 	stw	r16,0(sp)
 1014e5c:	04000044 	movi	r16,1
 1014e60:	dc800115 	stw	r18,4(sp)
 1014e64:	2825883a 	mov	r18,r5
 1014e68:	800b883a 	mov	r5,r16
 1014e6c:	dfc00215 	stw	ra,8(sp)
 1014e70:	101475c0 	call	101475c <_Balloc>
 1014e74:	14000415 	stw	r16,16(r2)
 1014e78:	14800515 	stw	r18,20(r2)
 1014e7c:	dfc00217 	ldw	ra,8(sp)
 1014e80:	dc800117 	ldw	r18,4(sp)
 1014e84:	dc000017 	ldw	r16,0(sp)
 1014e88:	dec00304 	addi	sp,sp,12
 1014e8c:	f800283a 	ret

01014e90 <__multadd>:
 1014e90:	defffa04 	addi	sp,sp,-24
 1014e94:	dc800215 	stw	r18,8(sp)
 1014e98:	2c800417 	ldw	r18,16(r5)
 1014e9c:	dd000415 	stw	r20,16(sp)
 1014ea0:	dcc00315 	stw	r19,12(sp)
 1014ea4:	dc000015 	stw	r16,0(sp)
 1014ea8:	dfc00515 	stw	ra,20(sp)
 1014eac:	3821883a 	mov	r16,r7
 1014eb0:	dc400115 	stw	r17,4(sp)
 1014eb4:	2827883a 	mov	r19,r5
 1014eb8:	2029883a 	mov	r20,r4
 1014ebc:	2a000504 	addi	r8,r5,20
 1014ec0:	000f883a 	mov	r7,zero
 1014ec4:	40800017 	ldw	r2,0(r8)
 1014ec8:	39c00044 	addi	r7,r7,1
 1014ecc:	10ffffcc 	andi	r3,r2,65535
 1014ed0:	1987383a 	mul	r3,r3,r6
 1014ed4:	1004d43a 	srli	r2,r2,16
 1014ed8:	1c07883a 	add	r3,r3,r16
 1014edc:	180ad43a 	srli	r5,r3,16
 1014ee0:	1185383a 	mul	r2,r2,r6
 1014ee4:	18ffffcc 	andi	r3,r3,65535
 1014ee8:	1145883a 	add	r2,r2,r5
 1014eec:	1008943a 	slli	r4,r2,16
 1014ef0:	1020d43a 	srli	r16,r2,16
 1014ef4:	20c9883a 	add	r4,r4,r3
 1014ef8:	41000015 	stw	r4,0(r8)
 1014efc:	42000104 	addi	r8,r8,4
 1014f00:	3cbff016 	blt	r7,r18,1014ec4 <__multadd+0x34>
 1014f04:	80000826 	beq	r16,zero,1014f28 <__multadd+0x98>
 1014f08:	98800217 	ldw	r2,8(r19)
 1014f0c:	90800f0e 	bge	r18,r2,1014f4c <__multadd+0xbc>
 1014f10:	9485883a 	add	r2,r18,r18
 1014f14:	1085883a 	add	r2,r2,r2
 1014f18:	14c5883a 	add	r2,r2,r19
 1014f1c:	90c00044 	addi	r3,r18,1
 1014f20:	14000515 	stw	r16,20(r2)
 1014f24:	98c00415 	stw	r3,16(r19)
 1014f28:	9805883a 	mov	r2,r19
 1014f2c:	dfc00517 	ldw	ra,20(sp)
 1014f30:	dd000417 	ldw	r20,16(sp)
 1014f34:	dcc00317 	ldw	r19,12(sp)
 1014f38:	dc800217 	ldw	r18,8(sp)
 1014f3c:	dc400117 	ldw	r17,4(sp)
 1014f40:	dc000017 	ldw	r16,0(sp)
 1014f44:	dec00604 	addi	sp,sp,24
 1014f48:	f800283a 	ret
 1014f4c:	99400117 	ldw	r5,4(r19)
 1014f50:	a009883a 	mov	r4,r20
 1014f54:	29400044 	addi	r5,r5,1
 1014f58:	101475c0 	call	101475c <_Balloc>
 1014f5c:	99800417 	ldw	r6,16(r19)
 1014f60:	99400304 	addi	r5,r19,12
 1014f64:	11000304 	addi	r4,r2,12
 1014f68:	318d883a 	add	r6,r6,r6
 1014f6c:	318d883a 	add	r6,r6,r6
 1014f70:	31800204 	addi	r6,r6,8
 1014f74:	1023883a 	mov	r17,r2
 1014f78:	100eb6c0 	call	100eb6c <memcpy>
 1014f7c:	980b883a 	mov	r5,r19
 1014f80:	a009883a 	mov	r4,r20
 1014f84:	10141dc0 	call	10141dc <_Bfree>
 1014f88:	8827883a 	mov	r19,r17
 1014f8c:	003fe006 	br	1014f10 <__multadd+0x80>

01014f90 <__pow5mult>:
 1014f90:	defffa04 	addi	sp,sp,-24
 1014f94:	308000cc 	andi	r2,r6,3
 1014f98:	dd000415 	stw	r20,16(sp)
 1014f9c:	dcc00315 	stw	r19,12(sp)
 1014fa0:	dc000015 	stw	r16,0(sp)
 1014fa4:	dfc00515 	stw	ra,20(sp)
 1014fa8:	dc800215 	stw	r18,8(sp)
 1014fac:	dc400115 	stw	r17,4(sp)
 1014fb0:	3021883a 	mov	r16,r6
 1014fb4:	2027883a 	mov	r19,r4
 1014fb8:	2829883a 	mov	r20,r5
 1014fbc:	10002b1e 	bne	r2,zero,101506c <__pow5mult+0xdc>
 1014fc0:	8025d0ba 	srai	r18,r16,2
 1014fc4:	90001b26 	beq	r18,zero,1015034 <__pow5mult+0xa4>
 1014fc8:	9c001217 	ldw	r16,72(r19)
 1014fcc:	8000081e 	bne	r16,zero,1014ff0 <__pow5mult+0x60>
 1014fd0:	00003006 	br	1015094 <__pow5mult+0x104>
 1014fd4:	800b883a 	mov	r5,r16
 1014fd8:	800d883a 	mov	r6,r16
 1014fdc:	9809883a 	mov	r4,r19
 1014fe0:	90001426 	beq	r18,zero,1015034 <__pow5mult+0xa4>
 1014fe4:	80800017 	ldw	r2,0(r16)
 1014fe8:	10001b26 	beq	r2,zero,1015058 <__pow5mult+0xc8>
 1014fec:	1021883a 	mov	r16,r2
 1014ff0:	9080004c 	andi	r2,r18,1
 1014ff4:	1005003a 	cmpeq	r2,r2,zero
 1014ff8:	9025d07a 	srai	r18,r18,1
 1014ffc:	800d883a 	mov	r6,r16
 1015000:	9809883a 	mov	r4,r19
 1015004:	a00b883a 	mov	r5,r20
 1015008:	103ff21e 	bne	r2,zero,1014fd4 <__pow5mult+0x44>
 101500c:	1014c6c0 	call	1014c6c <__multiply>
 1015010:	a00b883a 	mov	r5,r20
 1015014:	9809883a 	mov	r4,r19
 1015018:	1023883a 	mov	r17,r2
 101501c:	10141dc0 	call	10141dc <_Bfree>
 1015020:	8829883a 	mov	r20,r17
 1015024:	800b883a 	mov	r5,r16
 1015028:	800d883a 	mov	r6,r16
 101502c:	9809883a 	mov	r4,r19
 1015030:	903fec1e 	bne	r18,zero,1014fe4 <__pow5mult+0x54>
 1015034:	a005883a 	mov	r2,r20
 1015038:	dfc00517 	ldw	ra,20(sp)
 101503c:	dd000417 	ldw	r20,16(sp)
 1015040:	dcc00317 	ldw	r19,12(sp)
 1015044:	dc800217 	ldw	r18,8(sp)
 1015048:	dc400117 	ldw	r17,4(sp)
 101504c:	dc000017 	ldw	r16,0(sp)
 1015050:	dec00604 	addi	sp,sp,24
 1015054:	f800283a 	ret
 1015058:	1014c6c0 	call	1014c6c <__multiply>
 101505c:	80800015 	stw	r2,0(r16)
 1015060:	1021883a 	mov	r16,r2
 1015064:	10000015 	stw	zero,0(r2)
 1015068:	003fe106 	br	1014ff0 <__pow5mult+0x60>
 101506c:	1085883a 	add	r2,r2,r2
 1015070:	00c040b4 	movhi	r3,258
 1015074:	18d7d204 	addi	r3,r3,24392
 1015078:	1085883a 	add	r2,r2,r2
 101507c:	10c5883a 	add	r2,r2,r3
 1015080:	11bfff17 	ldw	r6,-4(r2)
 1015084:	000f883a 	mov	r7,zero
 1015088:	1014e900 	call	1014e90 <__multadd>
 101508c:	1029883a 	mov	r20,r2
 1015090:	003fcb06 	br	1014fc0 <__pow5mult+0x30>
 1015094:	9809883a 	mov	r4,r19
 1015098:	01409c44 	movi	r5,625
 101509c:	1014e540 	call	1014e54 <__i2b>
 10150a0:	98801215 	stw	r2,72(r19)
 10150a4:	1021883a 	mov	r16,r2
 10150a8:	10000015 	stw	zero,0(r2)
 10150ac:	003fd006 	br	1014ff0 <__pow5mult+0x60>

010150b0 <__s2b>:
 10150b0:	defff904 	addi	sp,sp,-28
 10150b4:	dcc00315 	stw	r19,12(sp)
 10150b8:	dc800215 	stw	r18,8(sp)
 10150bc:	2827883a 	mov	r19,r5
 10150c0:	2025883a 	mov	r18,r4
 10150c4:	01400244 	movi	r5,9
 10150c8:	39000204 	addi	r4,r7,8
 10150cc:	dd000415 	stw	r20,16(sp)
 10150d0:	dc400115 	stw	r17,4(sp)
 10150d4:	dfc00615 	stw	ra,24(sp)
 10150d8:	dd400515 	stw	r21,20(sp)
 10150dc:	dc000015 	stw	r16,0(sp)
 10150e0:	3829883a 	mov	r20,r7
 10150e4:	3023883a 	mov	r17,r6
 10150e8:	1017f3c0 	call	1017f3c <__divsi3>
 10150ec:	00c00044 	movi	r3,1
 10150f0:	1880350e 	bge	r3,r2,10151c8 <__s2b+0x118>
 10150f4:	000b883a 	mov	r5,zero
 10150f8:	18c7883a 	add	r3,r3,r3
 10150fc:	29400044 	addi	r5,r5,1
 1015100:	18bffd16 	blt	r3,r2,10150f8 <__s2b+0x48>
 1015104:	9009883a 	mov	r4,r18
 1015108:	101475c0 	call	101475c <_Balloc>
 101510c:	1011883a 	mov	r8,r2
 1015110:	d8800717 	ldw	r2,28(sp)
 1015114:	00c00044 	movi	r3,1
 1015118:	01800244 	movi	r6,9
 101511c:	40800515 	stw	r2,20(r8)
 1015120:	40c00415 	stw	r3,16(r8)
 1015124:	3440260e 	bge	r6,r17,10151c0 <__s2b+0x110>
 1015128:	3021883a 	mov	r16,r6
 101512c:	99ab883a 	add	r21,r19,r6
 1015130:	9c05883a 	add	r2,r19,r16
 1015134:	11c00007 	ldb	r7,0(r2)
 1015138:	400b883a 	mov	r5,r8
 101513c:	9009883a 	mov	r4,r18
 1015140:	39fff404 	addi	r7,r7,-48
 1015144:	01800284 	movi	r6,10
 1015148:	1014e900 	call	1014e90 <__multadd>
 101514c:	84000044 	addi	r16,r16,1
 1015150:	1011883a 	mov	r8,r2
 1015154:	8c3ff61e 	bne	r17,r16,1015130 <__s2b+0x80>
 1015158:	ac45883a 	add	r2,r21,r17
 101515c:	117ffe04 	addi	r5,r2,-8
 1015160:	880d883a 	mov	r6,r17
 1015164:	35000c0e 	bge	r6,r20,1015198 <__s2b+0xe8>
 1015168:	a185c83a 	sub	r2,r20,r6
 101516c:	2821883a 	mov	r16,r5
 1015170:	28a3883a 	add	r17,r5,r2
 1015174:	81c00007 	ldb	r7,0(r16)
 1015178:	400b883a 	mov	r5,r8
 101517c:	9009883a 	mov	r4,r18
 1015180:	39fff404 	addi	r7,r7,-48
 1015184:	01800284 	movi	r6,10
 1015188:	1014e900 	call	1014e90 <__multadd>
 101518c:	84000044 	addi	r16,r16,1
 1015190:	1011883a 	mov	r8,r2
 1015194:	847ff71e 	bne	r16,r17,1015174 <__s2b+0xc4>
 1015198:	4005883a 	mov	r2,r8
 101519c:	dfc00617 	ldw	ra,24(sp)
 10151a0:	dd400517 	ldw	r21,20(sp)
 10151a4:	dd000417 	ldw	r20,16(sp)
 10151a8:	dcc00317 	ldw	r19,12(sp)
 10151ac:	dc800217 	ldw	r18,8(sp)
 10151b0:	dc400117 	ldw	r17,4(sp)
 10151b4:	dc000017 	ldw	r16,0(sp)
 10151b8:	dec00704 	addi	sp,sp,28
 10151bc:	f800283a 	ret
 10151c0:	99400284 	addi	r5,r19,10
 10151c4:	003fe706 	br	1015164 <__s2b+0xb4>
 10151c8:	000b883a 	mov	r5,zero
 10151cc:	003fcd06 	br	1015104 <__s2b+0x54>

010151d0 <putc>:
 10151d0:	defffc04 	addi	sp,sp,-16
 10151d4:	dc800215 	stw	r18,8(sp)
 10151d8:	048040b4 	movhi	r18,258
 10151dc:	949f8b04 	addi	r18,r18,32300
 10151e0:	90c00017 	ldw	r3,0(r18)
 10151e4:	dc400115 	stw	r17,4(sp)
 10151e8:	dc000015 	stw	r16,0(sp)
 10151ec:	dfc00315 	stw	ra,12(sp)
 10151f0:	2023883a 	mov	r17,r4
 10151f4:	2821883a 	mov	r16,r5
 10151f8:	18000226 	beq	r3,zero,1015204 <putc+0x34>
 10151fc:	18800e17 	ldw	r2,56(r3)
 1015200:	10001126 	beq	r2,zero,1015248 <putc+0x78>
 1015204:	80800217 	ldw	r2,8(r16)
 1015208:	10ffffc4 	addi	r3,r2,-1
 101520c:	80c00215 	stw	r3,8(r16)
 1015210:	18001316 	blt	r3,zero,1015260 <putc+0x90>
 1015214:	80800017 	ldw	r2,0(r16)
 1015218:	14400005 	stb	r17,0(r2)
 101521c:	80c00017 	ldw	r3,0(r16)
 1015220:	18800044 	addi	r2,r3,1
 1015224:	18c00003 	ldbu	r3,0(r3)
 1015228:	80800015 	stw	r2,0(r16)
 101522c:	1805883a 	mov	r2,r3
 1015230:	dfc00317 	ldw	ra,12(sp)
 1015234:	dc800217 	ldw	r18,8(sp)
 1015238:	dc400117 	ldw	r17,4(sp)
 101523c:	dc000017 	ldw	r16,0(sp)
 1015240:	dec00404 	addi	sp,sp,16
 1015244:	f800283a 	ret
 1015248:	1809883a 	mov	r4,r3
 101524c:	10132d00 	call	10132d0 <__sinit>
 1015250:	80800217 	ldw	r2,8(r16)
 1015254:	10ffffc4 	addi	r3,r2,-1
 1015258:	80c00215 	stw	r3,8(r16)
 101525c:	183fed0e 	bge	r3,zero,1015214 <putc+0x44>
 1015260:	80800617 	ldw	r2,24(r16)
 1015264:	18800f16 	blt	r3,r2,10152a4 <putc+0xd4>
 1015268:	80800017 	ldw	r2,0(r16)
 101526c:	14400005 	stb	r17,0(r2)
 1015270:	81000017 	ldw	r4,0(r16)
 1015274:	00800284 	movi	r2,10
 1015278:	20c00003 	ldbu	r3,0(r4)
 101527c:	18801226 	beq	r3,r2,10152c8 <putc+0xf8>
 1015280:	20800044 	addi	r2,r4,1
 1015284:	80800015 	stw	r2,0(r16)
 1015288:	1805883a 	mov	r2,r3
 101528c:	dfc00317 	ldw	ra,12(sp)
 1015290:	dc800217 	ldw	r18,8(sp)
 1015294:	dc400117 	ldw	r17,4(sp)
 1015298:	dc000017 	ldw	r16,0(sp)
 101529c:	dec00404 	addi	sp,sp,16
 10152a0:	f800283a 	ret
 10152a4:	91000017 	ldw	r4,0(r18)
 10152a8:	880b883a 	mov	r5,r17
 10152ac:	800d883a 	mov	r6,r16
 10152b0:	dfc00317 	ldw	ra,12(sp)
 10152b4:	dc800217 	ldw	r18,8(sp)
 10152b8:	dc400117 	ldw	r17,4(sp)
 10152bc:	dc000017 	ldw	r16,0(sp)
 10152c0:	dec00404 	addi	sp,sp,16
 10152c4:	1015c281 	jmpi	1015c28 <__swbuf_r>
 10152c8:	91000017 	ldw	r4,0(r18)
 10152cc:	180b883a 	mov	r5,r3
 10152d0:	003ff606 	br	10152ac <putc+0xdc>

010152d4 <_putc_r>:
 10152d4:	defffc04 	addi	sp,sp,-16
 10152d8:	dc400215 	stw	r17,8(sp)
 10152dc:	dc000115 	stw	r16,4(sp)
 10152e0:	dfc00315 	stw	ra,12(sp)
 10152e4:	2021883a 	mov	r16,r4
 10152e8:	2823883a 	mov	r17,r5
 10152ec:	20000226 	beq	r4,zero,10152f8 <_putc_r+0x24>
 10152f0:	20800e17 	ldw	r2,56(r4)
 10152f4:	10001026 	beq	r2,zero,1015338 <_putc_r+0x64>
 10152f8:	30800217 	ldw	r2,8(r6)
 10152fc:	10ffffc4 	addi	r3,r2,-1
 1015300:	30c00215 	stw	r3,8(r6)
 1015304:	18001316 	blt	r3,zero,1015354 <_putc_r+0x80>
 1015308:	30800017 	ldw	r2,0(r6)
 101530c:	14400005 	stb	r17,0(r2)
 1015310:	30c00017 	ldw	r3,0(r6)
 1015314:	18800044 	addi	r2,r3,1
 1015318:	18c00003 	ldbu	r3,0(r3)
 101531c:	30800015 	stw	r2,0(r6)
 1015320:	1805883a 	mov	r2,r3
 1015324:	dfc00317 	ldw	ra,12(sp)
 1015328:	dc400217 	ldw	r17,8(sp)
 101532c:	dc000117 	ldw	r16,4(sp)
 1015330:	dec00404 	addi	sp,sp,16
 1015334:	f800283a 	ret
 1015338:	d9800015 	stw	r6,0(sp)
 101533c:	10132d00 	call	10132d0 <__sinit>
 1015340:	d9800017 	ldw	r6,0(sp)
 1015344:	30800217 	ldw	r2,8(r6)
 1015348:	10ffffc4 	addi	r3,r2,-1
 101534c:	30c00215 	stw	r3,8(r6)
 1015350:	183fed0e 	bge	r3,zero,1015308 <_putc_r+0x34>
 1015354:	30800617 	ldw	r2,24(r6)
 1015358:	18800e16 	blt	r3,r2,1015394 <_putc_r+0xc0>
 101535c:	30800017 	ldw	r2,0(r6)
 1015360:	14400005 	stb	r17,0(r2)
 1015364:	31000017 	ldw	r4,0(r6)
 1015368:	00800284 	movi	r2,10
 101536c:	20c00003 	ldbu	r3,0(r4)
 1015370:	18800f26 	beq	r3,r2,10153b0 <_putc_r+0xdc>
 1015374:	20800044 	addi	r2,r4,1
 1015378:	30800015 	stw	r2,0(r6)
 101537c:	1805883a 	mov	r2,r3
 1015380:	dfc00317 	ldw	ra,12(sp)
 1015384:	dc400217 	ldw	r17,8(sp)
 1015388:	dc000117 	ldw	r16,4(sp)
 101538c:	dec00404 	addi	sp,sp,16
 1015390:	f800283a 	ret
 1015394:	8009883a 	mov	r4,r16
 1015398:	880b883a 	mov	r5,r17
 101539c:	dfc00317 	ldw	ra,12(sp)
 10153a0:	dc400217 	ldw	r17,8(sp)
 10153a4:	dc000117 	ldw	r16,4(sp)
 10153a8:	dec00404 	addi	sp,sp,16
 10153ac:	1015c281 	jmpi	1015c28 <__swbuf_r>
 10153b0:	8009883a 	mov	r4,r16
 10153b4:	180b883a 	mov	r5,r3
 10153b8:	003ff806 	br	101539c <_putc_r+0xc8>

010153bc <_realloc_r>:
 10153bc:	defff404 	addi	sp,sp,-48
 10153c0:	dd800815 	stw	r22,32(sp)
 10153c4:	dc800415 	stw	r18,16(sp)
 10153c8:	dc400315 	stw	r17,12(sp)
 10153cc:	dfc00b15 	stw	ra,44(sp)
 10153d0:	df000a15 	stw	fp,40(sp)
 10153d4:	ddc00915 	stw	r23,36(sp)
 10153d8:	dd400715 	stw	r21,28(sp)
 10153dc:	dd000615 	stw	r20,24(sp)
 10153e0:	dcc00515 	stw	r19,20(sp)
 10153e4:	dc000215 	stw	r16,8(sp)
 10153e8:	2825883a 	mov	r18,r5
 10153ec:	3023883a 	mov	r17,r6
 10153f0:	202d883a 	mov	r22,r4
 10153f4:	2800c926 	beq	r5,zero,101571c <_realloc_r+0x360>
 10153f8:	10194680 	call	1019468 <__malloc_lock>
 10153fc:	943ffe04 	addi	r16,r18,-8
 1015400:	88c002c4 	addi	r3,r17,11
 1015404:	00800584 	movi	r2,22
 1015408:	82000117 	ldw	r8,4(r16)
 101540c:	10c01b2e 	bgeu	r2,r3,101547c <_realloc_r+0xc0>
 1015410:	00bffe04 	movi	r2,-8
 1015414:	188e703a 	and	r7,r3,r2
 1015418:	3839883a 	mov	fp,r7
 101541c:	38001a16 	blt	r7,zero,1015488 <_realloc_r+0xcc>
 1015420:	e4401936 	bltu	fp,r17,1015488 <_realloc_r+0xcc>
 1015424:	013fff04 	movi	r4,-4
 1015428:	4126703a 	and	r19,r8,r4
 101542c:	99c02616 	blt	r19,r7,10154c8 <_realloc_r+0x10c>
 1015430:	802b883a 	mov	r21,r16
 1015434:	9829883a 	mov	r20,r19
 1015438:	84000204 	addi	r16,r16,8
 101543c:	a80f883a 	mov	r7,r21
 1015440:	a70dc83a 	sub	r6,r20,fp
 1015444:	008003c4 	movi	r2,15
 1015448:	1180c136 	bltu	r2,r6,1015750 <_realloc_r+0x394>
 101544c:	38800117 	ldw	r2,4(r7)
 1015450:	a549883a 	add	r4,r20,r21
 1015454:	1080004c 	andi	r2,r2,1
 1015458:	a084b03a 	or	r2,r20,r2
 101545c:	38800115 	stw	r2,4(r7)
 1015460:	20c00117 	ldw	r3,4(r4)
 1015464:	18c00054 	ori	r3,r3,1
 1015468:	20c00115 	stw	r3,4(r4)
 101546c:	b009883a 	mov	r4,r22
 1015470:	10195700 	call	1019570 <__malloc_unlock>
 1015474:	8023883a 	mov	r17,r16
 1015478:	00000606 	br	1015494 <_realloc_r+0xd8>
 101547c:	01c00404 	movi	r7,16
 1015480:	3839883a 	mov	fp,r7
 1015484:	e47fe72e 	bgeu	fp,r17,1015424 <_realloc_r+0x68>
 1015488:	00800304 	movi	r2,12
 101548c:	0023883a 	mov	r17,zero
 1015490:	b0800015 	stw	r2,0(r22)
 1015494:	8805883a 	mov	r2,r17
 1015498:	dfc00b17 	ldw	ra,44(sp)
 101549c:	df000a17 	ldw	fp,40(sp)
 10154a0:	ddc00917 	ldw	r23,36(sp)
 10154a4:	dd800817 	ldw	r22,32(sp)
 10154a8:	dd400717 	ldw	r21,28(sp)
 10154ac:	dd000617 	ldw	r20,24(sp)
 10154b0:	dcc00517 	ldw	r19,20(sp)
 10154b4:	dc800417 	ldw	r18,16(sp)
 10154b8:	dc400317 	ldw	r17,12(sp)
 10154bc:	dc000217 	ldw	r16,8(sp)
 10154c0:	dec00c04 	addi	sp,sp,48
 10154c4:	f800283a 	ret
 10154c8:	008040b4 	movhi	r2,258
 10154cc:	10987b04 	addi	r2,r2,25068
 10154d0:	12400217 	ldw	r9,8(r2)
 10154d4:	84cd883a 	add	r6,r16,r19
 10154d8:	802b883a 	mov	r21,r16
 10154dc:	3240b926 	beq	r6,r9,10157c4 <_realloc_r+0x408>
 10154e0:	31400117 	ldw	r5,4(r6)
 10154e4:	00bfff84 	movi	r2,-2
 10154e8:	2884703a 	and	r2,r5,r2
 10154ec:	1185883a 	add	r2,r2,r6
 10154f0:	10c00117 	ldw	r3,4(r2)
 10154f4:	18c0004c 	andi	r3,r3,1
 10154f8:	1807003a 	cmpeq	r3,r3,zero
 10154fc:	1800a326 	beq	r3,zero,101578c <_realloc_r+0x3d0>
 1015500:	2908703a 	and	r4,r5,r4
 1015504:	9929883a 	add	r20,r19,r4
 1015508:	a1c0a30e 	bge	r20,r7,1015798 <_realloc_r+0x3dc>
 101550c:	4080004c 	andi	r2,r8,1
 1015510:	1000551e 	bne	r2,zero,1015668 <_realloc_r+0x2ac>
 1015514:	80800017 	ldw	r2,0(r16)
 1015518:	80afc83a 	sub	r23,r16,r2
 101551c:	b8c00117 	ldw	r3,4(r23)
 1015520:	00bfff04 	movi	r2,-4
 1015524:	1884703a 	and	r2,r3,r2
 1015528:	30002e26 	beq	r6,zero,10155e4 <_realloc_r+0x228>
 101552c:	3240b926 	beq	r6,r9,1015814 <_realloc_r+0x458>
 1015530:	98a9883a 	add	r20,r19,r2
 1015534:	2509883a 	add	r4,r4,r20
 1015538:	d9000015 	stw	r4,0(sp)
 101553c:	21c02a16 	blt	r4,r7,10155e8 <_realloc_r+0x22c>
 1015540:	30800317 	ldw	r2,12(r6)
 1015544:	30c00217 	ldw	r3,8(r6)
 1015548:	01400904 	movi	r5,36
 101554c:	99bfff04 	addi	r6,r19,-4
 1015550:	18800315 	stw	r2,12(r3)
 1015554:	10c00215 	stw	r3,8(r2)
 1015558:	b9000317 	ldw	r4,12(r23)
 101555c:	b8800217 	ldw	r2,8(r23)
 1015560:	b82b883a 	mov	r21,r23
 1015564:	bc000204 	addi	r16,r23,8
 1015568:	20800215 	stw	r2,8(r4)
 101556c:	11000315 	stw	r4,12(r2)
 1015570:	2980e436 	bltu	r5,r6,1015904 <_realloc_r+0x548>
 1015574:	008004c4 	movi	r2,19
 1015578:	9009883a 	mov	r4,r18
 101557c:	8011883a 	mov	r8,r16
 1015580:	11800f2e 	bgeu	r2,r6,10155c0 <_realloc_r+0x204>
 1015584:	90800017 	ldw	r2,0(r18)
 1015588:	ba000404 	addi	r8,r23,16
 101558c:	91000204 	addi	r4,r18,8
 1015590:	b8800215 	stw	r2,8(r23)
 1015594:	90c00117 	ldw	r3,4(r18)
 1015598:	008006c4 	movi	r2,27
 101559c:	b8c00315 	stw	r3,12(r23)
 10155a0:	1180072e 	bgeu	r2,r6,10155c0 <_realloc_r+0x204>
 10155a4:	90c00217 	ldw	r3,8(r18)
 10155a8:	ba000604 	addi	r8,r23,24
 10155ac:	91000404 	addi	r4,r18,16
 10155b0:	b8c00415 	stw	r3,16(r23)
 10155b4:	90800317 	ldw	r2,12(r18)
 10155b8:	b8800515 	stw	r2,20(r23)
 10155bc:	3140e726 	beq	r6,r5,101595c <_realloc_r+0x5a0>
 10155c0:	20800017 	ldw	r2,0(r4)
 10155c4:	dd000017 	ldw	r20,0(sp)
 10155c8:	b80f883a 	mov	r7,r23
 10155cc:	40800015 	stw	r2,0(r8)
 10155d0:	20c00117 	ldw	r3,4(r4)
 10155d4:	40c00115 	stw	r3,4(r8)
 10155d8:	20800217 	ldw	r2,8(r4)
 10155dc:	40800215 	stw	r2,8(r8)
 10155e0:	003f9706 	br	1015440 <_realloc_r+0x84>
 10155e4:	98a9883a 	add	r20,r19,r2
 10155e8:	a1c01f16 	blt	r20,r7,1015668 <_realloc_r+0x2ac>
 10155ec:	b8c00317 	ldw	r3,12(r23)
 10155f0:	b8800217 	ldw	r2,8(r23)
 10155f4:	99bfff04 	addi	r6,r19,-4
 10155f8:	01400904 	movi	r5,36
 10155fc:	b82b883a 	mov	r21,r23
 1015600:	18800215 	stw	r2,8(r3)
 1015604:	10c00315 	stw	r3,12(r2)
 1015608:	bc000204 	addi	r16,r23,8
 101560c:	2980c336 	bltu	r5,r6,101591c <_realloc_r+0x560>
 1015610:	008004c4 	movi	r2,19
 1015614:	9009883a 	mov	r4,r18
 1015618:	8011883a 	mov	r8,r16
 101561c:	11800f2e 	bgeu	r2,r6,101565c <_realloc_r+0x2a0>
 1015620:	90800017 	ldw	r2,0(r18)
 1015624:	ba000404 	addi	r8,r23,16
 1015628:	91000204 	addi	r4,r18,8
 101562c:	b8800215 	stw	r2,8(r23)
 1015630:	90c00117 	ldw	r3,4(r18)
 1015634:	008006c4 	movi	r2,27
 1015638:	b8c00315 	stw	r3,12(r23)
 101563c:	1180072e 	bgeu	r2,r6,101565c <_realloc_r+0x2a0>
 1015640:	90c00217 	ldw	r3,8(r18)
 1015644:	ba000604 	addi	r8,r23,24
 1015648:	91000404 	addi	r4,r18,16
 101564c:	b8c00415 	stw	r3,16(r23)
 1015650:	90800317 	ldw	r2,12(r18)
 1015654:	b8800515 	stw	r2,20(r23)
 1015658:	3140c726 	beq	r6,r5,1015978 <_realloc_r+0x5bc>
 101565c:	20800017 	ldw	r2,0(r4)
 1015660:	b80f883a 	mov	r7,r23
 1015664:	003fd906 	br	10155cc <_realloc_r+0x210>
 1015668:	880b883a 	mov	r5,r17
 101566c:	b009883a 	mov	r4,r22
 1015670:	100e2d40 	call	100e2d4 <_malloc_r>
 1015674:	1023883a 	mov	r17,r2
 1015678:	10002526 	beq	r2,zero,1015710 <_realloc_r+0x354>
 101567c:	80800117 	ldw	r2,4(r16)
 1015680:	00ffff84 	movi	r3,-2
 1015684:	893ffe04 	addi	r4,r17,-8
 1015688:	10c4703a 	and	r2,r2,r3
 101568c:	8085883a 	add	r2,r16,r2
 1015690:	20809526 	beq	r4,r2,10158e8 <_realloc_r+0x52c>
 1015694:	99bfff04 	addi	r6,r19,-4
 1015698:	01c00904 	movi	r7,36
 101569c:	39804536 	bltu	r7,r6,10157b4 <_realloc_r+0x3f8>
 10156a0:	008004c4 	movi	r2,19
 10156a4:	9009883a 	mov	r4,r18
 10156a8:	880b883a 	mov	r5,r17
 10156ac:	11800f2e 	bgeu	r2,r6,10156ec <_realloc_r+0x330>
 10156b0:	90800017 	ldw	r2,0(r18)
 10156b4:	89400204 	addi	r5,r17,8
 10156b8:	91000204 	addi	r4,r18,8
 10156bc:	88800015 	stw	r2,0(r17)
 10156c0:	90c00117 	ldw	r3,4(r18)
 10156c4:	008006c4 	movi	r2,27
 10156c8:	88c00115 	stw	r3,4(r17)
 10156cc:	1180072e 	bgeu	r2,r6,10156ec <_realloc_r+0x330>
 10156d0:	90c00217 	ldw	r3,8(r18)
 10156d4:	89400404 	addi	r5,r17,16
 10156d8:	91000404 	addi	r4,r18,16
 10156dc:	88c00215 	stw	r3,8(r17)
 10156e0:	90800317 	ldw	r2,12(r18)
 10156e4:	88800315 	stw	r2,12(r17)
 10156e8:	31c09126 	beq	r6,r7,1015930 <_realloc_r+0x574>
 10156ec:	20800017 	ldw	r2,0(r4)
 10156f0:	28800015 	stw	r2,0(r5)
 10156f4:	20c00117 	ldw	r3,4(r4)
 10156f8:	28c00115 	stw	r3,4(r5)
 10156fc:	20800217 	ldw	r2,8(r4)
 1015700:	28800215 	stw	r2,8(r5)
 1015704:	900b883a 	mov	r5,r18
 1015708:	b009883a 	mov	r4,r22
 101570c:	10136540 	call	1013654 <_free_r>
 1015710:	b009883a 	mov	r4,r22
 1015714:	10195700 	call	1019570 <__malloc_unlock>
 1015718:	003f5e06 	br	1015494 <_realloc_r+0xd8>
 101571c:	300b883a 	mov	r5,r6
 1015720:	dfc00b17 	ldw	ra,44(sp)
 1015724:	df000a17 	ldw	fp,40(sp)
 1015728:	ddc00917 	ldw	r23,36(sp)
 101572c:	dd800817 	ldw	r22,32(sp)
 1015730:	dd400717 	ldw	r21,28(sp)
 1015734:	dd000617 	ldw	r20,24(sp)
 1015738:	dcc00517 	ldw	r19,20(sp)
 101573c:	dc800417 	ldw	r18,16(sp)
 1015740:	dc400317 	ldw	r17,12(sp)
 1015744:	dc000217 	ldw	r16,8(sp)
 1015748:	dec00c04 	addi	sp,sp,48
 101574c:	100e2d41 	jmpi	100e2d4 <_malloc_r>
 1015750:	38800117 	ldw	r2,4(r7)
 1015754:	e54b883a 	add	r5,fp,r21
 1015758:	31000054 	ori	r4,r6,1
 101575c:	1080004c 	andi	r2,r2,1
 1015760:	1704b03a 	or	r2,r2,fp
 1015764:	38800115 	stw	r2,4(r7)
 1015768:	29000115 	stw	r4,4(r5)
 101576c:	2987883a 	add	r3,r5,r6
 1015770:	18800117 	ldw	r2,4(r3)
 1015774:	29400204 	addi	r5,r5,8
 1015778:	b009883a 	mov	r4,r22
 101577c:	10800054 	ori	r2,r2,1
 1015780:	18800115 	stw	r2,4(r3)
 1015784:	10136540 	call	1013654 <_free_r>
 1015788:	003f3806 	br	101546c <_realloc_r+0xb0>
 101578c:	000d883a 	mov	r6,zero
 1015790:	0009883a 	mov	r4,zero
 1015794:	003f5d06 	br	101550c <_realloc_r+0x150>
 1015798:	30c00217 	ldw	r3,8(r6)
 101579c:	30800317 	ldw	r2,12(r6)
 10157a0:	800f883a 	mov	r7,r16
 10157a4:	84000204 	addi	r16,r16,8
 10157a8:	10c00215 	stw	r3,8(r2)
 10157ac:	18800315 	stw	r2,12(r3)
 10157b0:	003f2306 	br	1015440 <_realloc_r+0x84>
 10157b4:	8809883a 	mov	r4,r17
 10157b8:	900b883a 	mov	r5,r18
 10157bc:	100ec0c0 	call	100ec0c <memmove>
 10157c0:	003fd006 	br	1015704 <_realloc_r+0x348>
 10157c4:	30800117 	ldw	r2,4(r6)
 10157c8:	e0c00404 	addi	r3,fp,16
 10157cc:	1108703a 	and	r4,r2,r4
 10157d0:	9905883a 	add	r2,r19,r4
 10157d4:	10ff4d16 	blt	r2,r3,101550c <_realloc_r+0x150>
 10157d8:	1705c83a 	sub	r2,r2,fp
 10157dc:	870b883a 	add	r5,r16,fp
 10157e0:	10800054 	ori	r2,r2,1
 10157e4:	28800115 	stw	r2,4(r5)
 10157e8:	80c00117 	ldw	r3,4(r16)
 10157ec:	008040b4 	movhi	r2,258
 10157f0:	10987b04 	addi	r2,r2,25068
 10157f4:	b009883a 	mov	r4,r22
 10157f8:	18c0004c 	andi	r3,r3,1
 10157fc:	e0c6b03a 	or	r3,fp,r3
 1015800:	11400215 	stw	r5,8(r2)
 1015804:	80c00115 	stw	r3,4(r16)
 1015808:	10195700 	call	1019570 <__malloc_unlock>
 101580c:	84400204 	addi	r17,r16,8
 1015810:	003f2006 	br	1015494 <_realloc_r+0xd8>
 1015814:	98a9883a 	add	r20,r19,r2
 1015818:	2509883a 	add	r4,r4,r20
 101581c:	e0800404 	addi	r2,fp,16
 1015820:	d9000115 	stw	r4,4(sp)
 1015824:	20bf7016 	blt	r4,r2,10155e8 <_realloc_r+0x22c>
 1015828:	b8c00317 	ldw	r3,12(r23)
 101582c:	b8800217 	ldw	r2,8(r23)
 1015830:	99bfff04 	addi	r6,r19,-4
 1015834:	01400904 	movi	r5,36
 1015838:	18800215 	stw	r2,8(r3)
 101583c:	10c00315 	stw	r3,12(r2)
 1015840:	bc400204 	addi	r17,r23,8
 1015844:	29804136 	bltu	r5,r6,101594c <_realloc_r+0x590>
 1015848:	008004c4 	movi	r2,19
 101584c:	9009883a 	mov	r4,r18
 1015850:	880f883a 	mov	r7,r17
 1015854:	11800f2e 	bgeu	r2,r6,1015894 <_realloc_r+0x4d8>
 1015858:	90800017 	ldw	r2,0(r18)
 101585c:	b9c00404 	addi	r7,r23,16
 1015860:	91000204 	addi	r4,r18,8
 1015864:	b8800215 	stw	r2,8(r23)
 1015868:	90c00117 	ldw	r3,4(r18)
 101586c:	008006c4 	movi	r2,27
 1015870:	b8c00315 	stw	r3,12(r23)
 1015874:	1180072e 	bgeu	r2,r6,1015894 <_realloc_r+0x4d8>
 1015878:	90c00217 	ldw	r3,8(r18)
 101587c:	b9c00604 	addi	r7,r23,24
 1015880:	91000404 	addi	r4,r18,16
 1015884:	b8c00415 	stw	r3,16(r23)
 1015888:	90800317 	ldw	r2,12(r18)
 101588c:	b8800515 	stw	r2,20(r23)
 1015890:	31404026 	beq	r6,r5,1015994 <_realloc_r+0x5d8>
 1015894:	20800017 	ldw	r2,0(r4)
 1015898:	38800015 	stw	r2,0(r7)
 101589c:	20c00117 	ldw	r3,4(r4)
 10158a0:	38c00115 	stw	r3,4(r7)
 10158a4:	20800217 	ldw	r2,8(r4)
 10158a8:	38800215 	stw	r2,8(r7)
 10158ac:	d8c00117 	ldw	r3,4(sp)
 10158b0:	bf0b883a 	add	r5,r23,fp
 10158b4:	b009883a 	mov	r4,r22
 10158b8:	1f05c83a 	sub	r2,r3,fp
 10158bc:	10800054 	ori	r2,r2,1
 10158c0:	28800115 	stw	r2,4(r5)
 10158c4:	b8c00117 	ldw	r3,4(r23)
 10158c8:	008040b4 	movhi	r2,258
 10158cc:	10987b04 	addi	r2,r2,25068
 10158d0:	11400215 	stw	r5,8(r2)
 10158d4:	18c0004c 	andi	r3,r3,1
 10158d8:	e0c6b03a 	or	r3,fp,r3
 10158dc:	b8c00115 	stw	r3,4(r23)
 10158e0:	10195700 	call	1019570 <__malloc_unlock>
 10158e4:	003eeb06 	br	1015494 <_realloc_r+0xd8>
 10158e8:	20800117 	ldw	r2,4(r4)
 10158ec:	00ffff04 	movi	r3,-4
 10158f0:	800f883a 	mov	r7,r16
 10158f4:	10c4703a 	and	r2,r2,r3
 10158f8:	98a9883a 	add	r20,r19,r2
 10158fc:	84000204 	addi	r16,r16,8
 1015900:	003ecf06 	br	1015440 <_realloc_r+0x84>
 1015904:	900b883a 	mov	r5,r18
 1015908:	8009883a 	mov	r4,r16
 101590c:	100ec0c0 	call	100ec0c <memmove>
 1015910:	dd000017 	ldw	r20,0(sp)
 1015914:	b80f883a 	mov	r7,r23
 1015918:	003ec906 	br	1015440 <_realloc_r+0x84>
 101591c:	900b883a 	mov	r5,r18
 1015920:	8009883a 	mov	r4,r16
 1015924:	100ec0c0 	call	100ec0c <memmove>
 1015928:	b80f883a 	mov	r7,r23
 101592c:	003ec406 	br	1015440 <_realloc_r+0x84>
 1015930:	90c00417 	ldw	r3,16(r18)
 1015934:	89400604 	addi	r5,r17,24
 1015938:	91000604 	addi	r4,r18,24
 101593c:	88c00415 	stw	r3,16(r17)
 1015940:	90800517 	ldw	r2,20(r18)
 1015944:	88800515 	stw	r2,20(r17)
 1015948:	003f6806 	br	10156ec <_realloc_r+0x330>
 101594c:	900b883a 	mov	r5,r18
 1015950:	8809883a 	mov	r4,r17
 1015954:	100ec0c0 	call	100ec0c <memmove>
 1015958:	003fd406 	br	10158ac <_realloc_r+0x4f0>
 101595c:	90c00417 	ldw	r3,16(r18)
 1015960:	91000604 	addi	r4,r18,24
 1015964:	ba000804 	addi	r8,r23,32
 1015968:	b8c00615 	stw	r3,24(r23)
 101596c:	90800517 	ldw	r2,20(r18)
 1015970:	b8800715 	stw	r2,28(r23)
 1015974:	003f1206 	br	10155c0 <_realloc_r+0x204>
 1015978:	90c00417 	ldw	r3,16(r18)
 101597c:	91000604 	addi	r4,r18,24
 1015980:	ba000804 	addi	r8,r23,32
 1015984:	b8c00615 	stw	r3,24(r23)
 1015988:	90800517 	ldw	r2,20(r18)
 101598c:	b8800715 	stw	r2,28(r23)
 1015990:	003f3206 	br	101565c <_realloc_r+0x2a0>
 1015994:	90c00417 	ldw	r3,16(r18)
 1015998:	91000604 	addi	r4,r18,24
 101599c:	b9c00804 	addi	r7,r23,32
 10159a0:	b8c00615 	stw	r3,24(r23)
 10159a4:	90800517 	ldw	r2,20(r18)
 10159a8:	b8800715 	stw	r2,28(r23)
 10159ac:	003fb906 	br	1015894 <_realloc_r+0x4d8>

010159b0 <__isinfd>:
 10159b0:	200d883a 	mov	r6,r4
 10159b4:	0109c83a 	sub	r4,zero,r4
 10159b8:	2188b03a 	or	r4,r4,r6
 10159bc:	2008d7fa 	srli	r4,r4,31
 10159c0:	00a00034 	movhi	r2,32768
 10159c4:	10bfffc4 	addi	r2,r2,-1
 10159c8:	1144703a 	and	r2,r2,r5
 10159cc:	2088b03a 	or	r4,r4,r2
 10159d0:	009ffc34 	movhi	r2,32752
 10159d4:	1105c83a 	sub	r2,r2,r4
 10159d8:	0087c83a 	sub	r3,zero,r2
 10159dc:	10c4b03a 	or	r2,r2,r3
 10159e0:	1004d7fa 	srli	r2,r2,31
 10159e4:	00c00044 	movi	r3,1
 10159e8:	1885c83a 	sub	r2,r3,r2
 10159ec:	f800283a 	ret

010159f0 <__isnand>:
 10159f0:	200d883a 	mov	r6,r4
 10159f4:	0109c83a 	sub	r4,zero,r4
 10159f8:	2188b03a 	or	r4,r4,r6
 10159fc:	2008d7fa 	srli	r4,r4,31
 1015a00:	00a00034 	movhi	r2,32768
 1015a04:	10bfffc4 	addi	r2,r2,-1
 1015a08:	1144703a 	and	r2,r2,r5
 1015a0c:	2088b03a 	or	r4,r4,r2
 1015a10:	009ffc34 	movhi	r2,32752
 1015a14:	1105c83a 	sub	r2,r2,r4
 1015a18:	1004d7fa 	srli	r2,r2,31
 1015a1c:	f800283a 	ret

01015a20 <__sclose>:
 1015a20:	2940038f 	ldh	r5,14(r5)
 1015a24:	1015ea01 	jmpi	1015ea0 <_close_r>

01015a28 <__sseek>:
 1015a28:	defffe04 	addi	sp,sp,-8
 1015a2c:	dc000015 	stw	r16,0(sp)
 1015a30:	2821883a 	mov	r16,r5
 1015a34:	2940038f 	ldh	r5,14(r5)
 1015a38:	dfc00115 	stw	ra,4(sp)
 1015a3c:	10161180 	call	1016118 <_lseek_r>
 1015a40:	1007883a 	mov	r3,r2
 1015a44:	00bfffc4 	movi	r2,-1
 1015a48:	18800926 	beq	r3,r2,1015a70 <__sseek+0x48>
 1015a4c:	8080030b 	ldhu	r2,12(r16)
 1015a50:	80c01415 	stw	r3,80(r16)
 1015a54:	10840014 	ori	r2,r2,4096
 1015a58:	8080030d 	sth	r2,12(r16)
 1015a5c:	1805883a 	mov	r2,r3
 1015a60:	dfc00117 	ldw	ra,4(sp)
 1015a64:	dc000017 	ldw	r16,0(sp)
 1015a68:	dec00204 	addi	sp,sp,8
 1015a6c:	f800283a 	ret
 1015a70:	8080030b 	ldhu	r2,12(r16)
 1015a74:	10bbffcc 	andi	r2,r2,61439
 1015a78:	8080030d 	sth	r2,12(r16)
 1015a7c:	1805883a 	mov	r2,r3
 1015a80:	dfc00117 	ldw	ra,4(sp)
 1015a84:	dc000017 	ldw	r16,0(sp)
 1015a88:	dec00204 	addi	sp,sp,8
 1015a8c:	f800283a 	ret

01015a90 <__swrite>:
 1015a90:	2880030b 	ldhu	r2,12(r5)
 1015a94:	defffb04 	addi	sp,sp,-20
 1015a98:	dcc00315 	stw	r19,12(sp)
 1015a9c:	1080400c 	andi	r2,r2,256
 1015aa0:	dc800215 	stw	r18,8(sp)
 1015aa4:	dc400115 	stw	r17,4(sp)
 1015aa8:	dc000015 	stw	r16,0(sp)
 1015aac:	3027883a 	mov	r19,r6
 1015ab0:	3825883a 	mov	r18,r7
 1015ab4:	dfc00415 	stw	ra,16(sp)
 1015ab8:	2821883a 	mov	r16,r5
 1015abc:	000d883a 	mov	r6,zero
 1015ac0:	01c00084 	movi	r7,2
 1015ac4:	2023883a 	mov	r17,r4
 1015ac8:	10000226 	beq	r2,zero,1015ad4 <__swrite+0x44>
 1015acc:	2940038f 	ldh	r5,14(r5)
 1015ad0:	10161180 	call	1016118 <_lseek_r>
 1015ad4:	8080030b 	ldhu	r2,12(r16)
 1015ad8:	8140038f 	ldh	r5,14(r16)
 1015adc:	8809883a 	mov	r4,r17
 1015ae0:	10bbffcc 	andi	r2,r2,61439
 1015ae4:	980d883a 	mov	r6,r19
 1015ae8:	900f883a 	mov	r7,r18
 1015aec:	8080030d 	sth	r2,12(r16)
 1015af0:	dfc00417 	ldw	ra,16(sp)
 1015af4:	dcc00317 	ldw	r19,12(sp)
 1015af8:	dc800217 	ldw	r18,8(sp)
 1015afc:	dc400117 	ldw	r17,4(sp)
 1015b00:	dc000017 	ldw	r16,0(sp)
 1015b04:	dec00504 	addi	sp,sp,20
 1015b08:	1015d741 	jmpi	1015d74 <_write_r>

01015b0c <__sread>:
 1015b0c:	defffe04 	addi	sp,sp,-8
 1015b10:	dc000015 	stw	r16,0(sp)
 1015b14:	2821883a 	mov	r16,r5
 1015b18:	2940038f 	ldh	r5,14(r5)
 1015b1c:	dfc00115 	stw	ra,4(sp)
 1015b20:	10161900 	call	1016190 <_read_r>
 1015b24:	1007883a 	mov	r3,r2
 1015b28:	10000816 	blt	r2,zero,1015b4c <__sread+0x40>
 1015b2c:	80801417 	ldw	r2,80(r16)
 1015b30:	10c5883a 	add	r2,r2,r3
 1015b34:	80801415 	stw	r2,80(r16)
 1015b38:	1805883a 	mov	r2,r3
 1015b3c:	dfc00117 	ldw	ra,4(sp)
 1015b40:	dc000017 	ldw	r16,0(sp)
 1015b44:	dec00204 	addi	sp,sp,8
 1015b48:	f800283a 	ret
 1015b4c:	8080030b 	ldhu	r2,12(r16)
 1015b50:	10bbffcc 	andi	r2,r2,61439
 1015b54:	8080030d 	sth	r2,12(r16)
 1015b58:	1805883a 	mov	r2,r3
 1015b5c:	dfc00117 	ldw	ra,4(sp)
 1015b60:	dc000017 	ldw	r16,0(sp)
 1015b64:	dec00204 	addi	sp,sp,8
 1015b68:	f800283a 	ret

01015b6c <strcmp>:
 1015b6c:	2144b03a 	or	r2,r4,r5
 1015b70:	108000cc 	andi	r2,r2,3
 1015b74:	10001d1e 	bne	r2,zero,1015bec <strcmp+0x80>
 1015b78:	200f883a 	mov	r7,r4
 1015b7c:	28800017 	ldw	r2,0(r5)
 1015b80:	21000017 	ldw	r4,0(r4)
 1015b84:	280d883a 	mov	r6,r5
 1015b88:	2080161e 	bne	r4,r2,1015be4 <strcmp+0x78>
 1015b8c:	023fbff4 	movhi	r8,65279
 1015b90:	423fbfc4 	addi	r8,r8,-257
 1015b94:	2207883a 	add	r3,r4,r8
 1015b98:	01602074 	movhi	r5,32897
 1015b9c:	29602004 	addi	r5,r5,-32640
 1015ba0:	1946703a 	and	r3,r3,r5
 1015ba4:	0104303a 	nor	r2,zero,r4
 1015ba8:	10c4703a 	and	r2,r2,r3
 1015bac:	10001c1e 	bne	r2,zero,1015c20 <strcmp+0xb4>
 1015bb0:	4013883a 	mov	r9,r8
 1015bb4:	2811883a 	mov	r8,r5
 1015bb8:	00000106 	br	1015bc0 <strcmp+0x54>
 1015bbc:	1800181e 	bne	r3,zero,1015c20 <strcmp+0xb4>
 1015bc0:	39c00104 	addi	r7,r7,4
 1015bc4:	39000017 	ldw	r4,0(r7)
 1015bc8:	31800104 	addi	r6,r6,4
 1015bcc:	31400017 	ldw	r5,0(r6)
 1015bd0:	2245883a 	add	r2,r4,r9
 1015bd4:	1204703a 	and	r2,r2,r8
 1015bd8:	0106303a 	nor	r3,zero,r4
 1015bdc:	1886703a 	and	r3,r3,r2
 1015be0:	217ff626 	beq	r4,r5,1015bbc <strcmp+0x50>
 1015be4:	3809883a 	mov	r4,r7
 1015be8:	300b883a 	mov	r5,r6
 1015bec:	20c00007 	ldb	r3,0(r4)
 1015bf0:	1800051e 	bne	r3,zero,1015c08 <strcmp+0x9c>
 1015bf4:	00000606 	br	1015c10 <strcmp+0xa4>
 1015bf8:	21000044 	addi	r4,r4,1
 1015bfc:	20c00007 	ldb	r3,0(r4)
 1015c00:	29400044 	addi	r5,r5,1
 1015c04:	18000226 	beq	r3,zero,1015c10 <strcmp+0xa4>
 1015c08:	28800007 	ldb	r2,0(r5)
 1015c0c:	18bffa26 	beq	r3,r2,1015bf8 <strcmp+0x8c>
 1015c10:	20c00003 	ldbu	r3,0(r4)
 1015c14:	28800003 	ldbu	r2,0(r5)
 1015c18:	1885c83a 	sub	r2,r3,r2
 1015c1c:	f800283a 	ret
 1015c20:	0005883a 	mov	r2,zero
 1015c24:	f800283a 	ret

01015c28 <__swbuf_r>:
 1015c28:	defffc04 	addi	sp,sp,-16
 1015c2c:	dc400215 	stw	r17,8(sp)
 1015c30:	dc000115 	stw	r16,4(sp)
 1015c34:	dfc00315 	stw	ra,12(sp)
 1015c38:	2023883a 	mov	r17,r4
 1015c3c:	2821883a 	mov	r16,r5
 1015c40:	20000226 	beq	r4,zero,1015c4c <__swbuf_r+0x24>
 1015c44:	20800e17 	ldw	r2,56(r4)
 1015c48:	10002f26 	beq	r2,zero,1015d08 <__swbuf_r+0xe0>
 1015c4c:	3080030b 	ldhu	r2,12(r6)
 1015c50:	30c00617 	ldw	r3,24(r6)
 1015c54:	1080020c 	andi	r2,r2,8
 1015c58:	30c00215 	stw	r3,8(r6)
 1015c5c:	10002226 	beq	r2,zero,1015ce8 <__swbuf_r+0xc0>
 1015c60:	30c00417 	ldw	r3,16(r6)
 1015c64:	18002026 	beq	r3,zero,1015ce8 <__swbuf_r+0xc0>
 1015c68:	31000017 	ldw	r4,0(r6)
 1015c6c:	30800517 	ldw	r2,20(r6)
 1015c70:	20c7c83a 	sub	r3,r4,r3
 1015c74:	18802f0e 	bge	r3,r2,1015d34 <__swbuf_r+0x10c>
 1015c78:	19400044 	addi	r5,r3,1
 1015c7c:	30800217 	ldw	r2,8(r6)
 1015c80:	84003fcc 	andi	r16,r16,255
 1015c84:	20c00044 	addi	r3,r4,1
 1015c88:	10bfffc4 	addi	r2,r2,-1
 1015c8c:	30800215 	stw	r2,8(r6)
 1015c90:	24000005 	stb	r16,0(r4)
 1015c94:	30800517 	ldw	r2,20(r6)
 1015c98:	30c00015 	stw	r3,0(r6)
 1015c9c:	11400c26 	beq	r2,r5,1015cd0 <__swbuf_r+0xa8>
 1015ca0:	3080030b 	ldhu	r2,12(r6)
 1015ca4:	1080004c 	andi	r2,r2,1
 1015ca8:	1005003a 	cmpeq	r2,r2,zero
 1015cac:	10000626 	beq	r2,zero,1015cc8 <__swbuf_r+0xa0>
 1015cb0:	8005883a 	mov	r2,r16
 1015cb4:	dfc00317 	ldw	ra,12(sp)
 1015cb8:	dc400217 	ldw	r17,8(sp)
 1015cbc:	dc000117 	ldw	r16,4(sp)
 1015cc0:	dec00404 	addi	sp,sp,16
 1015cc4:	f800283a 	ret
 1015cc8:	00800284 	movi	r2,10
 1015ccc:	80bff81e 	bne	r16,r2,1015cb0 <__swbuf_r+0x88>
 1015cd0:	8809883a 	mov	r4,r17
 1015cd4:	300b883a 	mov	r5,r6
 1015cd8:	10130380 	call	1013038 <_fflush_r>
 1015cdc:	103ff426 	beq	r2,zero,1015cb0 <__swbuf_r+0x88>
 1015ce0:	043fffc4 	movi	r16,-1
 1015ce4:	003ff206 	br	1015cb0 <__swbuf_r+0x88>
 1015ce8:	300b883a 	mov	r5,r6
 1015cec:	8809883a 	mov	r4,r17
 1015cf0:	d9800015 	stw	r6,0(sp)
 1015cf4:	10117300 	call	1011730 <__swsetup_r>
 1015cf8:	d9800017 	ldw	r6,0(sp)
 1015cfc:	1000061e 	bne	r2,zero,1015d18 <__swbuf_r+0xf0>
 1015d00:	30c00417 	ldw	r3,16(r6)
 1015d04:	003fd806 	br	1015c68 <__swbuf_r+0x40>
 1015d08:	d9800015 	stw	r6,0(sp)
 1015d0c:	10132d00 	call	10132d0 <__sinit>
 1015d10:	d9800017 	ldw	r6,0(sp)
 1015d14:	003fcd06 	br	1015c4c <__swbuf_r+0x24>
 1015d18:	3080030b 	ldhu	r2,12(r6)
 1015d1c:	00c00244 	movi	r3,9
 1015d20:	043fffc4 	movi	r16,-1
 1015d24:	10801014 	ori	r2,r2,64
 1015d28:	3080030d 	sth	r2,12(r6)
 1015d2c:	88c00015 	stw	r3,0(r17)
 1015d30:	003fdf06 	br	1015cb0 <__swbuf_r+0x88>
 1015d34:	300b883a 	mov	r5,r6
 1015d38:	8809883a 	mov	r4,r17
 1015d3c:	d9800015 	stw	r6,0(sp)
 1015d40:	10130380 	call	1013038 <_fflush_r>
 1015d44:	d9800017 	ldw	r6,0(sp)
 1015d48:	103fe51e 	bne	r2,zero,1015ce0 <__swbuf_r+0xb8>
 1015d4c:	31000017 	ldw	r4,0(r6)
 1015d50:	01400044 	movi	r5,1
 1015d54:	003fc906 	br	1015c7c <__swbuf_r+0x54>

01015d58 <__swbuf>:
 1015d58:	018040b4 	movhi	r6,258
 1015d5c:	319f8b04 	addi	r6,r6,32300
 1015d60:	2007883a 	mov	r3,r4
 1015d64:	31000017 	ldw	r4,0(r6)
 1015d68:	280d883a 	mov	r6,r5
 1015d6c:	180b883a 	mov	r5,r3
 1015d70:	1015c281 	jmpi	1015c28 <__swbuf_r>

01015d74 <_write_r>:
 1015d74:	defffd04 	addi	sp,sp,-12
 1015d78:	dc000015 	stw	r16,0(sp)
 1015d7c:	040040f4 	movhi	r16,259
 1015d80:	84270404 	addi	r16,r16,-25584
 1015d84:	dc400115 	stw	r17,4(sp)
 1015d88:	80000015 	stw	zero,0(r16)
 1015d8c:	2023883a 	mov	r17,r4
 1015d90:	2809883a 	mov	r4,r5
 1015d94:	300b883a 	mov	r5,r6
 1015d98:	380d883a 	mov	r6,r7
 1015d9c:	dfc00215 	stw	ra,8(sp)
 1015da0:	10191e00 	call	10191e0 <write>
 1015da4:	1007883a 	mov	r3,r2
 1015da8:	00bfffc4 	movi	r2,-1
 1015dac:	18800626 	beq	r3,r2,1015dc8 <_write_r+0x54>
 1015db0:	1805883a 	mov	r2,r3
 1015db4:	dfc00217 	ldw	ra,8(sp)
 1015db8:	dc400117 	ldw	r17,4(sp)
 1015dbc:	dc000017 	ldw	r16,0(sp)
 1015dc0:	dec00304 	addi	sp,sp,12
 1015dc4:	f800283a 	ret
 1015dc8:	80800017 	ldw	r2,0(r16)
 1015dcc:	103ff826 	beq	r2,zero,1015db0 <_write_r+0x3c>
 1015dd0:	88800015 	stw	r2,0(r17)
 1015dd4:	1805883a 	mov	r2,r3
 1015dd8:	dfc00217 	ldw	ra,8(sp)
 1015ddc:	dc400117 	ldw	r17,4(sp)
 1015de0:	dc000017 	ldw	r16,0(sp)
 1015de4:	dec00304 	addi	sp,sp,12
 1015de8:	f800283a 	ret

01015dec <_calloc_r>:
 1015dec:	298b383a 	mul	r5,r5,r6
 1015df0:	defffe04 	addi	sp,sp,-8
 1015df4:	dc000015 	stw	r16,0(sp)
 1015df8:	dfc00115 	stw	ra,4(sp)
 1015dfc:	100e2d40 	call	100e2d4 <_malloc_r>
 1015e00:	1021883a 	mov	r16,r2
 1015e04:	01c00904 	movi	r7,36
 1015e08:	10000d26 	beq	r2,zero,1015e40 <_calloc_r+0x54>
 1015e0c:	10ffff17 	ldw	r3,-4(r2)
 1015e10:	1009883a 	mov	r4,r2
 1015e14:	00bfff04 	movi	r2,-4
 1015e18:	1886703a 	and	r3,r3,r2
 1015e1c:	1887883a 	add	r3,r3,r2
 1015e20:	180d883a 	mov	r6,r3
 1015e24:	000b883a 	mov	r5,zero
 1015e28:	38c01736 	bltu	r7,r3,1015e88 <_calloc_r+0x9c>
 1015e2c:	008004c4 	movi	r2,19
 1015e30:	10c00836 	bltu	r2,r3,1015e54 <_calloc_r+0x68>
 1015e34:	20000215 	stw	zero,8(r4)
 1015e38:	20000015 	stw	zero,0(r4)
 1015e3c:	20000115 	stw	zero,4(r4)
 1015e40:	8005883a 	mov	r2,r16
 1015e44:	dfc00117 	ldw	ra,4(sp)
 1015e48:	dc000017 	ldw	r16,0(sp)
 1015e4c:	dec00204 	addi	sp,sp,8
 1015e50:	f800283a 	ret
 1015e54:	008006c4 	movi	r2,27
 1015e58:	80000015 	stw	zero,0(r16)
 1015e5c:	80000115 	stw	zero,4(r16)
 1015e60:	81000204 	addi	r4,r16,8
 1015e64:	10fff32e 	bgeu	r2,r3,1015e34 <_calloc_r+0x48>
 1015e68:	80000215 	stw	zero,8(r16)
 1015e6c:	80000315 	stw	zero,12(r16)
 1015e70:	81000404 	addi	r4,r16,16
 1015e74:	19ffef1e 	bne	r3,r7,1015e34 <_calloc_r+0x48>
 1015e78:	81000604 	addi	r4,r16,24
 1015e7c:	80000415 	stw	zero,16(r16)
 1015e80:	80000515 	stw	zero,20(r16)
 1015e84:	003feb06 	br	1015e34 <_calloc_r+0x48>
 1015e88:	100ecec0 	call	100ecec <memset>
 1015e8c:	8005883a 	mov	r2,r16
 1015e90:	dfc00117 	ldw	ra,4(sp)
 1015e94:	dc000017 	ldw	r16,0(sp)
 1015e98:	dec00204 	addi	sp,sp,8
 1015e9c:	f800283a 	ret

01015ea0 <_close_r>:
 1015ea0:	defffd04 	addi	sp,sp,-12
 1015ea4:	dc000015 	stw	r16,0(sp)
 1015ea8:	040040f4 	movhi	r16,259
 1015eac:	84270404 	addi	r16,r16,-25584
 1015eb0:	dc400115 	stw	r17,4(sp)
 1015eb4:	80000015 	stw	zero,0(r16)
 1015eb8:	2023883a 	mov	r17,r4
 1015ebc:	2809883a 	mov	r4,r5
 1015ec0:	dfc00215 	stw	ra,8(sp)
 1015ec4:	10186380 	call	1018638 <close>
 1015ec8:	1007883a 	mov	r3,r2
 1015ecc:	00bfffc4 	movi	r2,-1
 1015ed0:	18800626 	beq	r3,r2,1015eec <_close_r+0x4c>
 1015ed4:	1805883a 	mov	r2,r3
 1015ed8:	dfc00217 	ldw	ra,8(sp)
 1015edc:	dc400117 	ldw	r17,4(sp)
 1015ee0:	dc000017 	ldw	r16,0(sp)
 1015ee4:	dec00304 	addi	sp,sp,12
 1015ee8:	f800283a 	ret
 1015eec:	80800017 	ldw	r2,0(r16)
 1015ef0:	103ff826 	beq	r2,zero,1015ed4 <_close_r+0x34>
 1015ef4:	88800015 	stw	r2,0(r17)
 1015ef8:	1805883a 	mov	r2,r3
 1015efc:	dfc00217 	ldw	ra,8(sp)
 1015f00:	dc400117 	ldw	r17,4(sp)
 1015f04:	dc000017 	ldw	r16,0(sp)
 1015f08:	dec00304 	addi	sp,sp,12
 1015f0c:	f800283a 	ret

01015f10 <_fclose_r>:
 1015f10:	defffc04 	addi	sp,sp,-16
 1015f14:	dc400115 	stw	r17,4(sp)
 1015f18:	dc000015 	stw	r16,0(sp)
 1015f1c:	dfc00315 	stw	ra,12(sp)
 1015f20:	dc800215 	stw	r18,8(sp)
 1015f24:	2821883a 	mov	r16,r5
 1015f28:	2023883a 	mov	r17,r4
 1015f2c:	28002926 	beq	r5,zero,1015fd4 <_fclose_r+0xc4>
 1015f30:	10132c00 	call	10132c0 <__sfp_lock_acquire>
 1015f34:	88000226 	beq	r17,zero,1015f40 <_fclose_r+0x30>
 1015f38:	88800e17 	ldw	r2,56(r17)
 1015f3c:	10002d26 	beq	r2,zero,1015ff4 <_fclose_r+0xe4>
 1015f40:	8080030f 	ldh	r2,12(r16)
 1015f44:	10002226 	beq	r2,zero,1015fd0 <_fclose_r+0xc0>
 1015f48:	8809883a 	mov	r4,r17
 1015f4c:	800b883a 	mov	r5,r16
 1015f50:	10130380 	call	1013038 <_fflush_r>
 1015f54:	1025883a 	mov	r18,r2
 1015f58:	80800b17 	ldw	r2,44(r16)
 1015f5c:	10000426 	beq	r2,zero,1015f70 <_fclose_r+0x60>
 1015f60:	81400717 	ldw	r5,28(r16)
 1015f64:	8809883a 	mov	r4,r17
 1015f68:	103ee83a 	callr	r2
 1015f6c:	10002a16 	blt	r2,zero,1016018 <_fclose_r+0x108>
 1015f70:	8080030b 	ldhu	r2,12(r16)
 1015f74:	1080200c 	andi	r2,r2,128
 1015f78:	1000231e 	bne	r2,zero,1016008 <_fclose_r+0xf8>
 1015f7c:	81400c17 	ldw	r5,48(r16)
 1015f80:	28000526 	beq	r5,zero,1015f98 <_fclose_r+0x88>
 1015f84:	80801004 	addi	r2,r16,64
 1015f88:	28800226 	beq	r5,r2,1015f94 <_fclose_r+0x84>
 1015f8c:	8809883a 	mov	r4,r17
 1015f90:	10136540 	call	1013654 <_free_r>
 1015f94:	80000c15 	stw	zero,48(r16)
 1015f98:	81401117 	ldw	r5,68(r16)
 1015f9c:	28000326 	beq	r5,zero,1015fac <_fclose_r+0x9c>
 1015fa0:	8809883a 	mov	r4,r17
 1015fa4:	10136540 	call	1013654 <_free_r>
 1015fa8:	80001115 	stw	zero,68(r16)
 1015fac:	8000030d 	sth	zero,12(r16)
 1015fb0:	10132c40 	call	10132c4 <__sfp_lock_release>
 1015fb4:	9005883a 	mov	r2,r18
 1015fb8:	dfc00317 	ldw	ra,12(sp)
 1015fbc:	dc800217 	ldw	r18,8(sp)
 1015fc0:	dc400117 	ldw	r17,4(sp)
 1015fc4:	dc000017 	ldw	r16,0(sp)
 1015fc8:	dec00404 	addi	sp,sp,16
 1015fcc:	f800283a 	ret
 1015fd0:	10132c40 	call	10132c4 <__sfp_lock_release>
 1015fd4:	0025883a 	mov	r18,zero
 1015fd8:	9005883a 	mov	r2,r18
 1015fdc:	dfc00317 	ldw	ra,12(sp)
 1015fe0:	dc800217 	ldw	r18,8(sp)
 1015fe4:	dc400117 	ldw	r17,4(sp)
 1015fe8:	dc000017 	ldw	r16,0(sp)
 1015fec:	dec00404 	addi	sp,sp,16
 1015ff0:	f800283a 	ret
 1015ff4:	8809883a 	mov	r4,r17
 1015ff8:	10132d00 	call	10132d0 <__sinit>
 1015ffc:	8080030f 	ldh	r2,12(r16)
 1016000:	103fd11e 	bne	r2,zero,1015f48 <_fclose_r+0x38>
 1016004:	003ff206 	br	1015fd0 <_fclose_r+0xc0>
 1016008:	81400417 	ldw	r5,16(r16)
 101600c:	8809883a 	mov	r4,r17
 1016010:	10136540 	call	1013654 <_free_r>
 1016014:	003fd906 	br	1015f7c <_fclose_r+0x6c>
 1016018:	04bfffc4 	movi	r18,-1
 101601c:	003fd406 	br	1015f70 <_fclose_r+0x60>

01016020 <fclose>:
 1016020:	008040b4 	movhi	r2,258
 1016024:	109f8b04 	addi	r2,r2,32300
 1016028:	200b883a 	mov	r5,r4
 101602c:	11000017 	ldw	r4,0(r2)
 1016030:	1015f101 	jmpi	1015f10 <_fclose_r>

01016034 <_fstat_r>:
 1016034:	defffd04 	addi	sp,sp,-12
 1016038:	dc000015 	stw	r16,0(sp)
 101603c:	040040f4 	movhi	r16,259
 1016040:	84270404 	addi	r16,r16,-25584
 1016044:	dc400115 	stw	r17,4(sp)
 1016048:	80000015 	stw	zero,0(r16)
 101604c:	2023883a 	mov	r17,r4
 1016050:	2809883a 	mov	r4,r5
 1016054:	300b883a 	mov	r5,r6
 1016058:	dfc00215 	stw	ra,8(sp)
 101605c:	101882c0 	call	101882c <fstat>
 1016060:	1007883a 	mov	r3,r2
 1016064:	00bfffc4 	movi	r2,-1
 1016068:	18800626 	beq	r3,r2,1016084 <_fstat_r+0x50>
 101606c:	1805883a 	mov	r2,r3
 1016070:	dfc00217 	ldw	ra,8(sp)
 1016074:	dc400117 	ldw	r17,4(sp)
 1016078:	dc000017 	ldw	r16,0(sp)
 101607c:	dec00304 	addi	sp,sp,12
 1016080:	f800283a 	ret
 1016084:	80800017 	ldw	r2,0(r16)
 1016088:	103ff826 	beq	r2,zero,101606c <_fstat_r+0x38>
 101608c:	88800015 	stw	r2,0(r17)
 1016090:	1805883a 	mov	r2,r3
 1016094:	dfc00217 	ldw	ra,8(sp)
 1016098:	dc400117 	ldw	r17,4(sp)
 101609c:	dc000017 	ldw	r16,0(sp)
 10160a0:	dec00304 	addi	sp,sp,12
 10160a4:	f800283a 	ret

010160a8 <_isatty_r>:
 10160a8:	defffd04 	addi	sp,sp,-12
 10160ac:	dc000015 	stw	r16,0(sp)
 10160b0:	040040f4 	movhi	r16,259
 10160b4:	84270404 	addi	r16,r16,-25584
 10160b8:	dc400115 	stw	r17,4(sp)
 10160bc:	80000015 	stw	zero,0(r16)
 10160c0:	2023883a 	mov	r17,r4
 10160c4:	2809883a 	mov	r4,r5
 10160c8:	dfc00215 	stw	ra,8(sp)
 10160cc:	10189800 	call	1018980 <isatty>
 10160d0:	1007883a 	mov	r3,r2
 10160d4:	00bfffc4 	movi	r2,-1
 10160d8:	18800626 	beq	r3,r2,10160f4 <_isatty_r+0x4c>
 10160dc:	1805883a 	mov	r2,r3
 10160e0:	dfc00217 	ldw	ra,8(sp)
 10160e4:	dc400117 	ldw	r17,4(sp)
 10160e8:	dc000017 	ldw	r16,0(sp)
 10160ec:	dec00304 	addi	sp,sp,12
 10160f0:	f800283a 	ret
 10160f4:	80800017 	ldw	r2,0(r16)
 10160f8:	103ff826 	beq	r2,zero,10160dc <_isatty_r+0x34>
 10160fc:	88800015 	stw	r2,0(r17)
 1016100:	1805883a 	mov	r2,r3
 1016104:	dfc00217 	ldw	ra,8(sp)
 1016108:	dc400117 	ldw	r17,4(sp)
 101610c:	dc000017 	ldw	r16,0(sp)
 1016110:	dec00304 	addi	sp,sp,12
 1016114:	f800283a 	ret

01016118 <_lseek_r>:
 1016118:	defffd04 	addi	sp,sp,-12
 101611c:	dc000015 	stw	r16,0(sp)
 1016120:	040040f4 	movhi	r16,259
 1016124:	84270404 	addi	r16,r16,-25584
 1016128:	dc400115 	stw	r17,4(sp)
 101612c:	80000015 	stw	zero,0(r16)
 1016130:	2023883a 	mov	r17,r4
 1016134:	2809883a 	mov	r4,r5
 1016138:	300b883a 	mov	r5,r6
 101613c:	380d883a 	mov	r6,r7
 1016140:	dfc00215 	stw	ra,8(sp)
 1016144:	1018d2c0 	call	1018d2c <lseek>
 1016148:	1007883a 	mov	r3,r2
 101614c:	00bfffc4 	movi	r2,-1
 1016150:	18800626 	beq	r3,r2,101616c <_lseek_r+0x54>
 1016154:	1805883a 	mov	r2,r3
 1016158:	dfc00217 	ldw	ra,8(sp)
 101615c:	dc400117 	ldw	r17,4(sp)
 1016160:	dc000017 	ldw	r16,0(sp)
 1016164:	dec00304 	addi	sp,sp,12
 1016168:	f800283a 	ret
 101616c:	80800017 	ldw	r2,0(r16)
 1016170:	103ff826 	beq	r2,zero,1016154 <_lseek_r+0x3c>
 1016174:	88800015 	stw	r2,0(r17)
 1016178:	1805883a 	mov	r2,r3
 101617c:	dfc00217 	ldw	ra,8(sp)
 1016180:	dc400117 	ldw	r17,4(sp)
 1016184:	dc000017 	ldw	r16,0(sp)
 1016188:	dec00304 	addi	sp,sp,12
 101618c:	f800283a 	ret

01016190 <_read_r>:
 1016190:	defffd04 	addi	sp,sp,-12
 1016194:	dc000015 	stw	r16,0(sp)
 1016198:	040040f4 	movhi	r16,259
 101619c:	84270404 	addi	r16,r16,-25584
 10161a0:	dc400115 	stw	r17,4(sp)
 10161a4:	80000015 	stw	zero,0(r16)
 10161a8:	2023883a 	mov	r17,r4
 10161ac:	2809883a 	mov	r4,r5
 10161b0:	300b883a 	mov	r5,r6
 10161b4:	380d883a 	mov	r6,r7
 10161b8:	dfc00215 	stw	ra,8(sp)
 10161bc:	1018f440 	call	1018f44 <read>
 10161c0:	1007883a 	mov	r3,r2
 10161c4:	00bfffc4 	movi	r2,-1
 10161c8:	18800626 	beq	r3,r2,10161e4 <_read_r+0x54>
 10161cc:	1805883a 	mov	r2,r3
 10161d0:	dfc00217 	ldw	ra,8(sp)
 10161d4:	dc400117 	ldw	r17,4(sp)
 10161d8:	dc000017 	ldw	r16,0(sp)
 10161dc:	dec00304 	addi	sp,sp,12
 10161e0:	f800283a 	ret
 10161e4:	80800017 	ldw	r2,0(r16)
 10161e8:	103ff826 	beq	r2,zero,10161cc <_read_r+0x3c>
 10161ec:	88800015 	stw	r2,0(r17)
 10161f0:	1805883a 	mov	r2,r3
 10161f4:	dfc00217 	ldw	ra,8(sp)
 10161f8:	dc400117 	ldw	r17,4(sp)
 10161fc:	dc000017 	ldw	r16,0(sp)
 1016200:	dec00304 	addi	sp,sp,12
 1016204:	f800283a 	ret

01016208 <__udivdi3>:
 1016208:	defff004 	addi	sp,sp,-64
 101620c:	2005883a 	mov	r2,r4
 1016210:	3011883a 	mov	r8,r6
 1016214:	df000e15 	stw	fp,56(sp)
 1016218:	dd000a15 	stw	r20,40(sp)
 101621c:	dc000615 	stw	r16,24(sp)
 1016220:	dfc00f15 	stw	ra,60(sp)
 1016224:	ddc00d15 	stw	r23,52(sp)
 1016228:	dd800c15 	stw	r22,48(sp)
 101622c:	dd400b15 	stw	r21,44(sp)
 1016230:	dcc00915 	stw	r19,36(sp)
 1016234:	dc800815 	stw	r18,32(sp)
 1016238:	dc400715 	stw	r17,28(sp)
 101623c:	4021883a 	mov	r16,r8
 1016240:	1039883a 	mov	fp,r2
 1016244:	2829883a 	mov	r20,r5
 1016248:	38003b1e 	bne	r7,zero,1016338 <__udivdi3+0x130>
 101624c:	2a005c36 	bltu	r5,r8,10163c0 <__udivdi3+0x1b8>
 1016250:	4000a626 	beq	r8,zero,10164ec <__udivdi3+0x2e4>
 1016254:	00bfffd4 	movui	r2,65535
 1016258:	14009e36 	bltu	r2,r16,10164d4 <__udivdi3+0x2cc>
 101625c:	00803fc4 	movi	r2,255
 1016260:	14013d36 	bltu	r2,r16,1016758 <__udivdi3+0x550>
 1016264:	000b883a 	mov	r5,zero
 1016268:	0005883a 	mov	r2,zero
 101626c:	8084d83a 	srl	r2,r16,r2
 1016270:	010040b4 	movhi	r4,258
 1016274:	2117da04 	addi	r4,r4,24424
 1016278:	01800804 	movi	r6,32
 101627c:	1105883a 	add	r2,r2,r4
 1016280:	10c00003 	ldbu	r3,0(r2)
 1016284:	28c7883a 	add	r3,r5,r3
 1016288:	30edc83a 	sub	r22,r6,r3
 101628c:	b000ee1e 	bne	r22,zero,1016648 <__udivdi3+0x440>
 1016290:	802ad43a 	srli	r21,r16,16
 1016294:	00800044 	movi	r2,1
 1016298:	a423c83a 	sub	r17,r20,r16
 101629c:	85ffffcc 	andi	r23,r16,65535
 10162a0:	d8800315 	stw	r2,12(sp)
 10162a4:	8809883a 	mov	r4,r17
 10162a8:	a80b883a 	mov	r5,r21
 10162ac:	1017ffc0 	call	1017ffc <__udivsi3>
 10162b0:	8809883a 	mov	r4,r17
 10162b4:	a80b883a 	mov	r5,r21
 10162b8:	102d883a 	mov	r22,r2
 10162bc:	10180040 	call	1018004 <__umodsi3>
 10162c0:	1004943a 	slli	r2,r2,16
 10162c4:	e006d43a 	srli	r3,fp,16
 10162c8:	bda3383a 	mul	r17,r23,r22
 10162cc:	10c4b03a 	or	r2,r2,r3
 10162d0:	1440042e 	bgeu	r2,r17,10162e4 <__udivdi3+0xdc>
 10162d4:	1405883a 	add	r2,r2,r16
 10162d8:	b5bfffc4 	addi	r22,r22,-1
 10162dc:	14000136 	bltu	r2,r16,10162e4 <__udivdi3+0xdc>
 10162e0:	14413d36 	bltu	r2,r17,10167d8 <__udivdi3+0x5d0>
 10162e4:	1463c83a 	sub	r17,r2,r17
 10162e8:	8809883a 	mov	r4,r17
 10162ec:	a80b883a 	mov	r5,r21
 10162f0:	1017ffc0 	call	1017ffc <__udivsi3>
 10162f4:	8809883a 	mov	r4,r17
 10162f8:	a80b883a 	mov	r5,r21
 10162fc:	1029883a 	mov	r20,r2
 1016300:	10180040 	call	1018004 <__umodsi3>
 1016304:	1004943a 	slli	r2,r2,16
 1016308:	bd09383a 	mul	r4,r23,r20
 101630c:	e0ffffcc 	andi	r3,fp,65535
 1016310:	10c4b03a 	or	r2,r2,r3
 1016314:	1100042e 	bgeu	r2,r4,1016328 <__udivdi3+0x120>
 1016318:	8085883a 	add	r2,r16,r2
 101631c:	a53fffc4 	addi	r20,r20,-1
 1016320:	14000136 	bltu	r2,r16,1016328 <__udivdi3+0x120>
 1016324:	11012036 	bltu	r2,r4,10167a8 <__udivdi3+0x5a0>
 1016328:	b004943a 	slli	r2,r22,16
 101632c:	d9000317 	ldw	r4,12(sp)
 1016330:	a084b03a 	or	r2,r20,r2
 1016334:	00001506 	br	101638c <__udivdi3+0x184>
 1016338:	380d883a 	mov	r6,r7
 101633c:	29c06236 	bltu	r5,r7,10164c8 <__udivdi3+0x2c0>
 1016340:	00bfffd4 	movui	r2,65535
 1016344:	11c05a36 	bltu	r2,r7,10164b0 <__udivdi3+0x2a8>
 1016348:	00803fc4 	movi	r2,255
 101634c:	11c0fc36 	bltu	r2,r7,1016740 <__udivdi3+0x538>
 1016350:	000b883a 	mov	r5,zero
 1016354:	0005883a 	mov	r2,zero
 1016358:	3084d83a 	srl	r2,r6,r2
 101635c:	010040b4 	movhi	r4,258
 1016360:	2117da04 	addi	r4,r4,24424
 1016364:	01c00804 	movi	r7,32
 1016368:	1105883a 	add	r2,r2,r4
 101636c:	10c00003 	ldbu	r3,0(r2)
 1016370:	28c7883a 	add	r3,r5,r3
 1016374:	38efc83a 	sub	r23,r7,r3
 1016378:	b800691e 	bne	r23,zero,1016520 <__udivdi3+0x318>
 101637c:	35000136 	bltu	r6,r20,1016384 <__udivdi3+0x17c>
 1016380:	e4005136 	bltu	fp,r16,10164c8 <__udivdi3+0x2c0>
 1016384:	00800044 	movi	r2,1
 1016388:	0009883a 	mov	r4,zero
 101638c:	2007883a 	mov	r3,r4
 1016390:	dfc00f17 	ldw	ra,60(sp)
 1016394:	df000e17 	ldw	fp,56(sp)
 1016398:	ddc00d17 	ldw	r23,52(sp)
 101639c:	dd800c17 	ldw	r22,48(sp)
 10163a0:	dd400b17 	ldw	r21,44(sp)
 10163a4:	dd000a17 	ldw	r20,40(sp)
 10163a8:	dcc00917 	ldw	r19,36(sp)
 10163ac:	dc800817 	ldw	r18,32(sp)
 10163b0:	dc400717 	ldw	r17,28(sp)
 10163b4:	dc000617 	ldw	r16,24(sp)
 10163b8:	dec01004 	addi	sp,sp,64
 10163bc:	f800283a 	ret
 10163c0:	00bfffd4 	movui	r2,65535
 10163c4:	12005036 	bltu	r2,r8,1016508 <__udivdi3+0x300>
 10163c8:	00803fc4 	movi	r2,255
 10163cc:	1200e836 	bltu	r2,r8,1016770 <__udivdi3+0x568>
 10163d0:	000b883a 	mov	r5,zero
 10163d4:	0005883a 	mov	r2,zero
 10163d8:	8084d83a 	srl	r2,r16,r2
 10163dc:	010040b4 	movhi	r4,258
 10163e0:	2117da04 	addi	r4,r4,24424
 10163e4:	01800804 	movi	r6,32
 10163e8:	1105883a 	add	r2,r2,r4
 10163ec:	10c00003 	ldbu	r3,0(r2)
 10163f0:	28c7883a 	add	r3,r5,r3
 10163f4:	30cbc83a 	sub	r5,r6,r3
 10163f8:	28000626 	beq	r5,zero,1016414 <__udivdi3+0x20c>
 10163fc:	3145c83a 	sub	r2,r6,r5
 1016400:	e084d83a 	srl	r2,fp,r2
 1016404:	a146983a 	sll	r3,r20,r5
 1016408:	e178983a 	sll	fp,fp,r5
 101640c:	8160983a 	sll	r16,r16,r5
 1016410:	18a8b03a 	or	r20,r3,r2
 1016414:	802ad43a 	srli	r21,r16,16
 1016418:	a009883a 	mov	r4,r20
 101641c:	85ffffcc 	andi	r23,r16,65535
 1016420:	a80b883a 	mov	r5,r21
 1016424:	1017ffc0 	call	1017ffc <__udivsi3>
 1016428:	a009883a 	mov	r4,r20
 101642c:	a80b883a 	mov	r5,r21
 1016430:	102d883a 	mov	r22,r2
 1016434:	10180040 	call	1018004 <__umodsi3>
 1016438:	1004943a 	slli	r2,r2,16
 101643c:	e006d43a 	srli	r3,fp,16
 1016440:	bda3383a 	mul	r17,r23,r22
 1016444:	10c4b03a 	or	r2,r2,r3
 1016448:	1440042e 	bgeu	r2,r17,101645c <__udivdi3+0x254>
 101644c:	1405883a 	add	r2,r2,r16
 1016450:	b5bfffc4 	addi	r22,r22,-1
 1016454:	14000136 	bltu	r2,r16,101645c <__udivdi3+0x254>
 1016458:	1440d536 	bltu	r2,r17,10167b0 <__udivdi3+0x5a8>
 101645c:	1463c83a 	sub	r17,r2,r17
 1016460:	8809883a 	mov	r4,r17
 1016464:	a80b883a 	mov	r5,r21
 1016468:	1017ffc0 	call	1017ffc <__udivsi3>
 101646c:	8809883a 	mov	r4,r17
 1016470:	a80b883a 	mov	r5,r21
 1016474:	1029883a 	mov	r20,r2
 1016478:	10180040 	call	1018004 <__umodsi3>
 101647c:	1004943a 	slli	r2,r2,16
 1016480:	bd09383a 	mul	r4,r23,r20
 1016484:	e0ffffcc 	andi	r3,fp,65535
 1016488:	10c4b03a 	or	r2,r2,r3
 101648c:	1100042e 	bgeu	r2,r4,10164a0 <__udivdi3+0x298>
 1016490:	8085883a 	add	r2,r16,r2
 1016494:	a53fffc4 	addi	r20,r20,-1
 1016498:	14000136 	bltu	r2,r16,10164a0 <__udivdi3+0x298>
 101649c:	1100c736 	bltu	r2,r4,10167bc <__udivdi3+0x5b4>
 10164a0:	b004943a 	slli	r2,r22,16
 10164a4:	0009883a 	mov	r4,zero
 10164a8:	a084b03a 	or	r2,r20,r2
 10164ac:	003fb706 	br	101638c <__udivdi3+0x184>
 10164b0:	00804034 	movhi	r2,256
 10164b4:	10bfffc4 	addi	r2,r2,-1
 10164b8:	11c0a436 	bltu	r2,r7,101674c <__udivdi3+0x544>
 10164bc:	01400404 	movi	r5,16
 10164c0:	2805883a 	mov	r2,r5
 10164c4:	003fa406 	br	1016358 <__udivdi3+0x150>
 10164c8:	0005883a 	mov	r2,zero
 10164cc:	0009883a 	mov	r4,zero
 10164d0:	003fae06 	br	101638c <__udivdi3+0x184>
 10164d4:	00804034 	movhi	r2,256
 10164d8:	10bfffc4 	addi	r2,r2,-1
 10164dc:	1400a136 	bltu	r2,r16,1016764 <__udivdi3+0x55c>
 10164e0:	01400404 	movi	r5,16
 10164e4:	2805883a 	mov	r2,r5
 10164e8:	003f6006 	br	101626c <__udivdi3+0x64>
 10164ec:	01000044 	movi	r4,1
 10164f0:	000b883a 	mov	r5,zero
 10164f4:	1017ffc0 	call	1017ffc <__udivsi3>
 10164f8:	1021883a 	mov	r16,r2
 10164fc:	00bfffd4 	movui	r2,65535
 1016500:	143ff436 	bltu	r2,r16,10164d4 <__udivdi3+0x2cc>
 1016504:	003f5506 	br	101625c <__udivdi3+0x54>
 1016508:	00804034 	movhi	r2,256
 101650c:	10bfffc4 	addi	r2,r2,-1
 1016510:	12009a36 	bltu	r2,r8,101677c <__udivdi3+0x574>
 1016514:	01400404 	movi	r5,16
 1016518:	2805883a 	mov	r2,r5
 101651c:	003fae06 	br	10163d8 <__udivdi3+0x1d0>
 1016520:	3dc5c83a 	sub	r2,r7,r23
 1016524:	35c8983a 	sll	r4,r6,r23
 1016528:	8086d83a 	srl	r3,r16,r2
 101652c:	a0a2d83a 	srl	r17,r20,r2
 1016530:	e084d83a 	srl	r2,fp,r2
 1016534:	20eab03a 	or	r21,r4,r3
 1016538:	a82cd43a 	srli	r22,r21,16
 101653c:	a5c6983a 	sll	r3,r20,r23
 1016540:	8809883a 	mov	r4,r17
 1016544:	b00b883a 	mov	r5,r22
 1016548:	1886b03a 	or	r3,r3,r2
 101654c:	d8c00215 	stw	r3,8(sp)
 1016550:	1017ffc0 	call	1017ffc <__udivsi3>
 1016554:	8809883a 	mov	r4,r17
 1016558:	b00b883a 	mov	r5,r22
 101655c:	1029883a 	mov	r20,r2
 1016560:	10180040 	call	1018004 <__umodsi3>
 1016564:	a8ffffcc 	andi	r3,r21,65535
 1016568:	d8c00515 	stw	r3,20(sp)
 101656c:	d9000217 	ldw	r4,8(sp)
 1016570:	d9400517 	ldw	r5,20(sp)
 1016574:	1004943a 	slli	r2,r2,16
 1016578:	2006d43a 	srli	r3,r4,16
 101657c:	85e0983a 	sll	r16,r16,r23
 1016580:	2d23383a 	mul	r17,r5,r20
 1016584:	10c4b03a 	or	r2,r2,r3
 1016588:	dc000015 	stw	r16,0(sp)
 101658c:	1440032e 	bgeu	r2,r17,101659c <__udivdi3+0x394>
 1016590:	1545883a 	add	r2,r2,r21
 1016594:	a53fffc4 	addi	r20,r20,-1
 1016598:	15407f2e 	bgeu	r2,r21,1016798 <__udivdi3+0x590>
 101659c:	1463c83a 	sub	r17,r2,r17
 10165a0:	8809883a 	mov	r4,r17
 10165a4:	b00b883a 	mov	r5,r22
 10165a8:	1017ffc0 	call	1017ffc <__udivsi3>
 10165ac:	8809883a 	mov	r4,r17
 10165b0:	b00b883a 	mov	r5,r22
 10165b4:	1021883a 	mov	r16,r2
 10165b8:	10180040 	call	1018004 <__umodsi3>
 10165bc:	d8c00517 	ldw	r3,20(sp)
 10165c0:	d9000217 	ldw	r4,8(sp)
 10165c4:	1004943a 	slli	r2,r2,16
 10165c8:	1c0f383a 	mul	r7,r3,r16
 10165cc:	20ffffcc 	andi	r3,r4,65535
 10165d0:	10e2b03a 	or	r17,r2,r3
 10165d4:	89c0032e 	bgeu	r17,r7,10165e4 <__udivdi3+0x3dc>
 10165d8:	8d63883a 	add	r17,r17,r21
 10165dc:	843fffc4 	addi	r16,r16,-1
 10165e0:	8d40692e 	bgeu	r17,r21,1016788 <__udivdi3+0x580>
 10165e4:	a008943a 	slli	r4,r20,16
 10165e8:	d9400017 	ldw	r5,0(sp)
 10165ec:	89e3c83a 	sub	r17,r17,r7
 10165f0:	8110b03a 	or	r8,r16,r4
 10165f4:	280cd43a 	srli	r6,r5,16
 10165f8:	28ffffcc 	andi	r3,r5,65535
 10165fc:	40bfffcc 	andi	r2,r8,65535
 1016600:	400ad43a 	srli	r5,r8,16
 1016604:	10d3383a 	mul	r9,r2,r3
 1016608:	1185383a 	mul	r2,r2,r6
 101660c:	28c7383a 	mul	r3,r5,r3
 1016610:	4808d43a 	srli	r4,r9,16
 1016614:	298b383a 	mul	r5,r5,r6
 1016618:	10c5883a 	add	r2,r2,r3
 101661c:	2089883a 	add	r4,r4,r2
 1016620:	20c0022e 	bgeu	r4,r3,101662c <__udivdi3+0x424>
 1016624:	00800074 	movhi	r2,1
 1016628:	288b883a 	add	r5,r5,r2
 101662c:	2004d43a 	srli	r2,r4,16
 1016630:	288b883a 	add	r5,r5,r2
 1016634:	89403f36 	bltu	r17,r5,1016734 <__udivdi3+0x52c>
 1016638:	89403926 	beq	r17,r5,1016720 <__udivdi3+0x518>
 101663c:	4005883a 	mov	r2,r8
 1016640:	0009883a 	mov	r4,zero
 1016644:	003f5106 	br	101638c <__udivdi3+0x184>
 1016648:	85a0983a 	sll	r16,r16,r22
 101664c:	3585c83a 	sub	r2,r6,r22
 1016650:	a0a2d83a 	srl	r17,r20,r2
 1016654:	802ad43a 	srli	r21,r16,16
 1016658:	e084d83a 	srl	r2,fp,r2
 101665c:	a586983a 	sll	r3,r20,r22
 1016660:	8809883a 	mov	r4,r17
 1016664:	a80b883a 	mov	r5,r21
 1016668:	1886b03a 	or	r3,r3,r2
 101666c:	d8c00115 	stw	r3,4(sp)
 1016670:	1017ffc0 	call	1017ffc <__udivsi3>
 1016674:	8809883a 	mov	r4,r17
 1016678:	a80b883a 	mov	r5,r21
 101667c:	d8800415 	stw	r2,16(sp)
 1016680:	10180040 	call	1018004 <__umodsi3>
 1016684:	d9000117 	ldw	r4,4(sp)
 1016688:	d9400417 	ldw	r5,16(sp)
 101668c:	1004943a 	slli	r2,r2,16
 1016690:	85ffffcc 	andi	r23,r16,65535
 1016694:	2006d43a 	srli	r3,r4,16
 1016698:	b963383a 	mul	r17,r23,r5
 101669c:	10c4b03a 	or	r2,r2,r3
 10166a0:	1440042e 	bgeu	r2,r17,10166b4 <__udivdi3+0x4ac>
 10166a4:	297fffc4 	addi	r5,r5,-1
 10166a8:	1405883a 	add	r2,r2,r16
 10166ac:	d9400415 	stw	r5,16(sp)
 10166b0:	1400442e 	bgeu	r2,r16,10167c4 <__udivdi3+0x5bc>
 10166b4:	1463c83a 	sub	r17,r2,r17
 10166b8:	8809883a 	mov	r4,r17
 10166bc:	a80b883a 	mov	r5,r21
 10166c0:	1017ffc0 	call	1017ffc <__udivsi3>
 10166c4:	8809883a 	mov	r4,r17
 10166c8:	a80b883a 	mov	r5,r21
 10166cc:	1029883a 	mov	r20,r2
 10166d0:	10180040 	call	1018004 <__umodsi3>
 10166d4:	d9400117 	ldw	r5,4(sp)
 10166d8:	1004943a 	slli	r2,r2,16
 10166dc:	bd09383a 	mul	r4,r23,r20
 10166e0:	28ffffcc 	andi	r3,r5,65535
 10166e4:	10c6b03a 	or	r3,r2,r3
 10166e8:	1900062e 	bgeu	r3,r4,1016704 <__udivdi3+0x4fc>
 10166ec:	1c07883a 	add	r3,r3,r16
 10166f0:	a53fffc4 	addi	r20,r20,-1
 10166f4:	1c000336 	bltu	r3,r16,1016704 <__udivdi3+0x4fc>
 10166f8:	1900022e 	bgeu	r3,r4,1016704 <__udivdi3+0x4fc>
 10166fc:	a53fffc4 	addi	r20,r20,-1
 1016700:	1c07883a 	add	r3,r3,r16
 1016704:	d9400417 	ldw	r5,16(sp)
 1016708:	e5b8983a 	sll	fp,fp,r22
 101670c:	1923c83a 	sub	r17,r3,r4
 1016710:	2804943a 	slli	r2,r5,16
 1016714:	a0a8b03a 	or	r20,r20,r2
 1016718:	dd000315 	stw	r20,12(sp)
 101671c:	003ee106 	br	10162a4 <__udivdi3+0x9c>
 1016720:	2004943a 	slli	r2,r4,16
 1016724:	e5c8983a 	sll	r4,fp,r23
 1016728:	48ffffcc 	andi	r3,r9,65535
 101672c:	10c5883a 	add	r2,r2,r3
 1016730:	20bfc22e 	bgeu	r4,r2,101663c <__udivdi3+0x434>
 1016734:	40bfffc4 	addi	r2,r8,-1
 1016738:	0009883a 	mov	r4,zero
 101673c:	003f1306 	br	101638c <__udivdi3+0x184>
 1016740:	01400204 	movi	r5,8
 1016744:	2805883a 	mov	r2,r5
 1016748:	003f0306 	br	1016358 <__udivdi3+0x150>
 101674c:	01400604 	movi	r5,24
 1016750:	2805883a 	mov	r2,r5
 1016754:	003f0006 	br	1016358 <__udivdi3+0x150>
 1016758:	01400204 	movi	r5,8
 101675c:	2805883a 	mov	r2,r5
 1016760:	003ec206 	br	101626c <__udivdi3+0x64>
 1016764:	01400604 	movi	r5,24
 1016768:	2805883a 	mov	r2,r5
 101676c:	003ebf06 	br	101626c <__udivdi3+0x64>
 1016770:	01400204 	movi	r5,8
 1016774:	2805883a 	mov	r2,r5
 1016778:	003f1706 	br	10163d8 <__udivdi3+0x1d0>
 101677c:	01400604 	movi	r5,24
 1016780:	2805883a 	mov	r2,r5
 1016784:	003f1406 	br	10163d8 <__udivdi3+0x1d0>
 1016788:	89ff962e 	bgeu	r17,r7,10165e4 <__udivdi3+0x3dc>
 101678c:	8d63883a 	add	r17,r17,r21
 1016790:	843fffc4 	addi	r16,r16,-1
 1016794:	003f9306 	br	10165e4 <__udivdi3+0x3dc>
 1016798:	147f802e 	bgeu	r2,r17,101659c <__udivdi3+0x394>
 101679c:	a53fffc4 	addi	r20,r20,-1
 10167a0:	1545883a 	add	r2,r2,r21
 10167a4:	003f7d06 	br	101659c <__udivdi3+0x394>
 10167a8:	a53fffc4 	addi	r20,r20,-1
 10167ac:	003ede06 	br	1016328 <__udivdi3+0x120>
 10167b0:	b5bfffc4 	addi	r22,r22,-1
 10167b4:	1405883a 	add	r2,r2,r16
 10167b8:	003f2806 	br	101645c <__udivdi3+0x254>
 10167bc:	a53fffc4 	addi	r20,r20,-1
 10167c0:	003f3706 	br	10164a0 <__udivdi3+0x298>
 10167c4:	147fbb2e 	bgeu	r2,r17,10166b4 <__udivdi3+0x4ac>
 10167c8:	297fffc4 	addi	r5,r5,-1
 10167cc:	1405883a 	add	r2,r2,r16
 10167d0:	d9400415 	stw	r5,16(sp)
 10167d4:	003fb706 	br	10166b4 <__udivdi3+0x4ac>
 10167d8:	b5bfffc4 	addi	r22,r22,-1
 10167dc:	1405883a 	add	r2,r2,r16
 10167e0:	003ec006 	br	10162e4 <__udivdi3+0xdc>

010167e4 <__umoddi3>:
 10167e4:	defff104 	addi	sp,sp,-60
 10167e8:	dd800b15 	stw	r22,44(sp)
 10167ec:	dd000915 	stw	r20,36(sp)
 10167f0:	dc000515 	stw	r16,20(sp)
 10167f4:	dfc00e15 	stw	ra,56(sp)
 10167f8:	df000d15 	stw	fp,52(sp)
 10167fc:	ddc00c15 	stw	r23,48(sp)
 1016800:	dd400a15 	stw	r21,40(sp)
 1016804:	dcc00815 	stw	r19,32(sp)
 1016808:	dc800715 	stw	r18,28(sp)
 101680c:	dc400615 	stw	r17,24(sp)
 1016810:	3021883a 	mov	r16,r6
 1016814:	202d883a 	mov	r22,r4
 1016818:	2829883a 	mov	r20,r5
 101681c:	38002b1e 	bne	r7,zero,10168cc <__umoddi3+0xe8>
 1016820:	29805036 	bltu	r5,r6,1016964 <__umoddi3+0x180>
 1016824:	30008a26 	beq	r6,zero,1016a50 <__umoddi3+0x26c>
 1016828:	00bfffd4 	movui	r2,65535
 101682c:	14008236 	bltu	r2,r16,1016a38 <__umoddi3+0x254>
 1016830:	00803fc4 	movi	r2,255
 1016834:	14013636 	bltu	r2,r16,1016d10 <__umoddi3+0x52c>
 1016838:	000b883a 	mov	r5,zero
 101683c:	0005883a 	mov	r2,zero
 1016840:	8084d83a 	srl	r2,r16,r2
 1016844:	010040b4 	movhi	r4,258
 1016848:	2117da04 	addi	r4,r4,24424
 101684c:	01800804 	movi	r6,32
 1016850:	1105883a 	add	r2,r2,r4
 1016854:	10c00003 	ldbu	r3,0(r2)
 1016858:	28c7883a 	add	r3,r5,r3
 101685c:	30efc83a 	sub	r23,r6,r3
 1016860:	b800941e 	bne	r23,zero,1016ab4 <__umoddi3+0x2d0>
 1016864:	802ad43a 	srli	r21,r16,16
 1016868:	a423c83a 	sub	r17,r20,r16
 101686c:	0039883a 	mov	fp,zero
 1016870:	853fffcc 	andi	r20,r16,65535
 1016874:	8809883a 	mov	r4,r17
 1016878:	a80b883a 	mov	r5,r21
 101687c:	1017ffc0 	call	1017ffc <__udivsi3>
 1016880:	8809883a 	mov	r4,r17
 1016884:	a80b883a 	mov	r5,r21
 1016888:	a0a3383a 	mul	r17,r20,r2
 101688c:	10180040 	call	1018004 <__umodsi3>
 1016890:	1004943a 	slli	r2,r2,16
 1016894:	b006d43a 	srli	r3,r22,16
 1016898:	10c4b03a 	or	r2,r2,r3
 101689c:	1440032e 	bgeu	r2,r17,10168ac <__umoddi3+0xc8>
 10168a0:	1405883a 	add	r2,r2,r16
 10168a4:	14000136 	bltu	r2,r16,10168ac <__umoddi3+0xc8>
 10168a8:	14413536 	bltu	r2,r17,1016d80 <__umoddi3+0x59c>
 10168ac:	1463c83a 	sub	r17,r2,r17
 10168b0:	8809883a 	mov	r4,r17
 10168b4:	a80b883a 	mov	r5,r21
 10168b8:	1017ffc0 	call	1017ffc <__udivsi3>
 10168bc:	8809883a 	mov	r4,r17
 10168c0:	a0a3383a 	mul	r17,r20,r2
 10168c4:	a80b883a 	mov	r5,r21
 10168c8:	00004d06 	br	1016a00 <__umoddi3+0x21c>
 10168cc:	380d883a 	mov	r6,r7
 10168d0:	29c0102e 	bgeu	r5,r7,1016914 <__umoddi3+0x130>
 10168d4:	2011883a 	mov	r8,r4
 10168d8:	2813883a 	mov	r9,r5
 10168dc:	4005883a 	mov	r2,r8
 10168e0:	4807883a 	mov	r3,r9
 10168e4:	dfc00e17 	ldw	ra,56(sp)
 10168e8:	df000d17 	ldw	fp,52(sp)
 10168ec:	ddc00c17 	ldw	r23,48(sp)
 10168f0:	dd800b17 	ldw	r22,44(sp)
 10168f4:	dd400a17 	ldw	r21,40(sp)
 10168f8:	dd000917 	ldw	r20,36(sp)
 10168fc:	dcc00817 	ldw	r19,32(sp)
 1016900:	dc800717 	ldw	r18,28(sp)
 1016904:	dc400617 	ldw	r17,24(sp)
 1016908:	dc000517 	ldw	r16,20(sp)
 101690c:	dec00f04 	addi	sp,sp,60
 1016910:	f800283a 	ret
 1016914:	00bfffd4 	movui	r2,65535
 1016918:	11c05a36 	bltu	r2,r7,1016a84 <__umoddi3+0x2a0>
 101691c:	00803fc4 	movi	r2,255
 1016920:	11c0fe36 	bltu	r2,r7,1016d1c <__umoddi3+0x538>
 1016924:	000b883a 	mov	r5,zero
 1016928:	0005883a 	mov	r2,zero
 101692c:	3084d83a 	srl	r2,r6,r2
 1016930:	010040b4 	movhi	r4,258
 1016934:	2117da04 	addi	r4,r4,24424
 1016938:	01c00804 	movi	r7,32
 101693c:	1105883a 	add	r2,r2,r4
 1016940:	10c00003 	ldbu	r3,0(r2)
 1016944:	28c7883a 	add	r3,r5,r3
 1016948:	38ebc83a 	sub	r21,r7,r3
 101694c:	a800851e 	bne	r21,zero,1016b64 <__umoddi3+0x380>
 1016950:	35005236 	bltu	r6,r20,1016a9c <__umoddi3+0x2b8>
 1016954:	b400512e 	bgeu	r22,r16,1016a9c <__umoddi3+0x2b8>
 1016958:	b011883a 	mov	r8,r22
 101695c:	a013883a 	mov	r9,r20
 1016960:	003fde06 	br	10168dc <__umoddi3+0xf8>
 1016964:	00bfffd4 	movui	r2,65535
 1016968:	11804036 	bltu	r2,r6,1016a6c <__umoddi3+0x288>
 101696c:	00803fc4 	movi	r2,255
 1016970:	1180ed36 	bltu	r2,r6,1016d28 <__umoddi3+0x544>
 1016974:	000b883a 	mov	r5,zero
 1016978:	0005883a 	mov	r2,zero
 101697c:	8084d83a 	srl	r2,r16,r2
 1016980:	010040b4 	movhi	r4,258
 1016984:	2117da04 	addi	r4,r4,24424
 1016988:	01800804 	movi	r6,32
 101698c:	1105883a 	add	r2,r2,r4
 1016990:	10c00003 	ldbu	r3,0(r2)
 1016994:	28c7883a 	add	r3,r5,r3
 1016998:	30c7c83a 	sub	r3,r6,r3
 101699c:	1800bf1e 	bne	r3,zero,1016c9c <__umoddi3+0x4b8>
 10169a0:	0039883a 	mov	fp,zero
 10169a4:	802ad43a 	srli	r21,r16,16
 10169a8:	a009883a 	mov	r4,r20
 10169ac:	85ffffcc 	andi	r23,r16,65535
 10169b0:	a80b883a 	mov	r5,r21
 10169b4:	1017ffc0 	call	1017ffc <__udivsi3>
 10169b8:	a009883a 	mov	r4,r20
 10169bc:	a80b883a 	mov	r5,r21
 10169c0:	b8a3383a 	mul	r17,r23,r2
 10169c4:	10180040 	call	1018004 <__umodsi3>
 10169c8:	1004943a 	slli	r2,r2,16
 10169cc:	b006d43a 	srli	r3,r22,16
 10169d0:	10c4b03a 	or	r2,r2,r3
 10169d4:	1440032e 	bgeu	r2,r17,10169e4 <__umoddi3+0x200>
 10169d8:	1405883a 	add	r2,r2,r16
 10169dc:	14000136 	bltu	r2,r16,10169e4 <__umoddi3+0x200>
 10169e0:	1440e536 	bltu	r2,r17,1016d78 <__umoddi3+0x594>
 10169e4:	1463c83a 	sub	r17,r2,r17
 10169e8:	8809883a 	mov	r4,r17
 10169ec:	a80b883a 	mov	r5,r21
 10169f0:	1017ffc0 	call	1017ffc <__udivsi3>
 10169f4:	8809883a 	mov	r4,r17
 10169f8:	b8a3383a 	mul	r17,r23,r2
 10169fc:	a80b883a 	mov	r5,r21
 1016a00:	10180040 	call	1018004 <__umodsi3>
 1016a04:	1004943a 	slli	r2,r2,16
 1016a08:	b0ffffcc 	andi	r3,r22,65535
 1016a0c:	10c4b03a 	or	r2,r2,r3
 1016a10:	1440042e 	bgeu	r2,r17,1016a24 <__umoddi3+0x240>
 1016a14:	1405883a 	add	r2,r2,r16
 1016a18:	14000236 	bltu	r2,r16,1016a24 <__umoddi3+0x240>
 1016a1c:	1440012e 	bgeu	r2,r17,1016a24 <__umoddi3+0x240>
 1016a20:	1405883a 	add	r2,r2,r16
 1016a24:	1445c83a 	sub	r2,r2,r17
 1016a28:	1724d83a 	srl	r18,r2,fp
 1016a2c:	0013883a 	mov	r9,zero
 1016a30:	9011883a 	mov	r8,r18
 1016a34:	003fa906 	br	10168dc <__umoddi3+0xf8>
 1016a38:	00804034 	movhi	r2,256
 1016a3c:	10bfffc4 	addi	r2,r2,-1
 1016a40:	1400b036 	bltu	r2,r16,1016d04 <__umoddi3+0x520>
 1016a44:	01400404 	movi	r5,16
 1016a48:	2805883a 	mov	r2,r5
 1016a4c:	003f7c06 	br	1016840 <__umoddi3+0x5c>
 1016a50:	01000044 	movi	r4,1
 1016a54:	000b883a 	mov	r5,zero
 1016a58:	1017ffc0 	call	1017ffc <__udivsi3>
 1016a5c:	1021883a 	mov	r16,r2
 1016a60:	00bfffd4 	movui	r2,65535
 1016a64:	143ff436 	bltu	r2,r16,1016a38 <__umoddi3+0x254>
 1016a68:	003f7106 	br	1016830 <__umoddi3+0x4c>
 1016a6c:	00804034 	movhi	r2,256
 1016a70:	10bfffc4 	addi	r2,r2,-1
 1016a74:	1180af36 	bltu	r2,r6,1016d34 <__umoddi3+0x550>
 1016a78:	01400404 	movi	r5,16
 1016a7c:	2805883a 	mov	r2,r5
 1016a80:	003fbe06 	br	101697c <__umoddi3+0x198>
 1016a84:	00804034 	movhi	r2,256
 1016a88:	10bfffc4 	addi	r2,r2,-1
 1016a8c:	11c0ac36 	bltu	r2,r7,1016d40 <__umoddi3+0x55c>
 1016a90:	01400404 	movi	r5,16
 1016a94:	2805883a 	mov	r2,r5
 1016a98:	003fa406 	br	101692c <__umoddi3+0x148>
 1016a9c:	b409c83a 	sub	r4,r22,r16
 1016aa0:	b105803a 	cmpltu	r2,r22,r4
 1016aa4:	a187c83a 	sub	r3,r20,r6
 1016aa8:	18a9c83a 	sub	r20,r3,r2
 1016aac:	202d883a 	mov	r22,r4
 1016ab0:	003fa906 	br	1016958 <__umoddi3+0x174>
 1016ab4:	85e0983a 	sll	r16,r16,r23
 1016ab8:	35c5c83a 	sub	r2,r6,r23
 1016abc:	a0a2d83a 	srl	r17,r20,r2
 1016ac0:	802ad43a 	srli	r21,r16,16
 1016ac4:	b084d83a 	srl	r2,r22,r2
 1016ac8:	a5c6983a 	sll	r3,r20,r23
 1016acc:	8809883a 	mov	r4,r17
 1016ad0:	a80b883a 	mov	r5,r21
 1016ad4:	1886b03a 	or	r3,r3,r2
 1016ad8:	d8c00115 	stw	r3,4(sp)
 1016adc:	853fffcc 	andi	r20,r16,65535
 1016ae0:	1017ffc0 	call	1017ffc <__udivsi3>
 1016ae4:	8809883a 	mov	r4,r17
 1016ae8:	a80b883a 	mov	r5,r21
 1016aec:	a0a3383a 	mul	r17,r20,r2
 1016af0:	10180040 	call	1018004 <__umodsi3>
 1016af4:	d9000117 	ldw	r4,4(sp)
 1016af8:	1004943a 	slli	r2,r2,16
 1016afc:	b839883a 	mov	fp,r23
 1016b00:	2006d43a 	srli	r3,r4,16
 1016b04:	10c4b03a 	or	r2,r2,r3
 1016b08:	1440022e 	bgeu	r2,r17,1016b14 <__umoddi3+0x330>
 1016b0c:	1405883a 	add	r2,r2,r16
 1016b10:	1400962e 	bgeu	r2,r16,1016d6c <__umoddi3+0x588>
 1016b14:	1463c83a 	sub	r17,r2,r17
 1016b18:	8809883a 	mov	r4,r17
 1016b1c:	a80b883a 	mov	r5,r21
 1016b20:	1017ffc0 	call	1017ffc <__udivsi3>
 1016b24:	8809883a 	mov	r4,r17
 1016b28:	a80b883a 	mov	r5,r21
 1016b2c:	a0a3383a 	mul	r17,r20,r2
 1016b30:	10180040 	call	1018004 <__umodsi3>
 1016b34:	d9400117 	ldw	r5,4(sp)
 1016b38:	1004943a 	slli	r2,r2,16
 1016b3c:	28ffffcc 	andi	r3,r5,65535
 1016b40:	10c4b03a 	or	r2,r2,r3
 1016b44:	1440042e 	bgeu	r2,r17,1016b58 <__umoddi3+0x374>
 1016b48:	1405883a 	add	r2,r2,r16
 1016b4c:	14000236 	bltu	r2,r16,1016b58 <__umoddi3+0x374>
 1016b50:	1440012e 	bgeu	r2,r17,1016b58 <__umoddi3+0x374>
 1016b54:	1405883a 	add	r2,r2,r16
 1016b58:	b5ec983a 	sll	r22,r22,r23
 1016b5c:	1463c83a 	sub	r17,r2,r17
 1016b60:	003f4406 	br	1016874 <__umoddi3+0x90>
 1016b64:	3d4fc83a 	sub	r7,r7,r21
 1016b68:	3546983a 	sll	r3,r6,r21
 1016b6c:	81c4d83a 	srl	r2,r16,r7
 1016b70:	a1e2d83a 	srl	r17,r20,r7
 1016b74:	a54c983a 	sll	r6,r20,r21
 1016b78:	18aeb03a 	or	r23,r3,r2
 1016b7c:	b828d43a 	srli	r20,r23,16
 1016b80:	b1c4d83a 	srl	r2,r22,r7
 1016b84:	8809883a 	mov	r4,r17
 1016b88:	a00b883a 	mov	r5,r20
 1016b8c:	308cb03a 	or	r6,r6,r2
 1016b90:	d9c00315 	stw	r7,12(sp)
 1016b94:	d9800215 	stw	r6,8(sp)
 1016b98:	1017ffc0 	call	1017ffc <__udivsi3>
 1016b9c:	8809883a 	mov	r4,r17
 1016ba0:	a00b883a 	mov	r5,r20
 1016ba4:	1039883a 	mov	fp,r2
 1016ba8:	10180040 	call	1018004 <__umodsi3>
 1016bac:	b8ffffcc 	andi	r3,r23,65535
 1016bb0:	d8c00415 	stw	r3,16(sp)
 1016bb4:	d9000217 	ldw	r4,8(sp)
 1016bb8:	d9400417 	ldw	r5,16(sp)
 1016bbc:	1004943a 	slli	r2,r2,16
 1016bc0:	2006d43a 	srli	r3,r4,16
 1016bc4:	8560983a 	sll	r16,r16,r21
 1016bc8:	2f23383a 	mul	r17,r5,fp
 1016bcc:	10c4b03a 	or	r2,r2,r3
 1016bd0:	dc000015 	stw	r16,0(sp)
 1016bd4:	b56c983a 	sll	r22,r22,r21
 1016bd8:	1440032e 	bgeu	r2,r17,1016be8 <__umoddi3+0x404>
 1016bdc:	15c5883a 	add	r2,r2,r23
 1016be0:	e73fffc4 	addi	fp,fp,-1
 1016be4:	15c05d2e 	bgeu	r2,r23,1016d5c <__umoddi3+0x578>
 1016be8:	1463c83a 	sub	r17,r2,r17
 1016bec:	8809883a 	mov	r4,r17
 1016bf0:	a00b883a 	mov	r5,r20
 1016bf4:	1017ffc0 	call	1017ffc <__udivsi3>
 1016bf8:	8809883a 	mov	r4,r17
 1016bfc:	a00b883a 	mov	r5,r20
 1016c00:	1021883a 	mov	r16,r2
 1016c04:	10180040 	call	1018004 <__umodsi3>
 1016c08:	d8c00417 	ldw	r3,16(sp)
 1016c0c:	d9000217 	ldw	r4,8(sp)
 1016c10:	1004943a 	slli	r2,r2,16
 1016c14:	1c23383a 	mul	r17,r3,r16
 1016c18:	20ffffcc 	andi	r3,r4,65535
 1016c1c:	10ceb03a 	or	r7,r2,r3
 1016c20:	3c40032e 	bgeu	r7,r17,1016c30 <__umoddi3+0x44c>
 1016c24:	3dcf883a 	add	r7,r7,r23
 1016c28:	843fffc4 	addi	r16,r16,-1
 1016c2c:	3dc0472e 	bgeu	r7,r23,1016d4c <__umoddi3+0x568>
 1016c30:	e004943a 	slli	r2,fp,16
 1016c34:	d9400017 	ldw	r5,0(sp)
 1016c38:	3c4fc83a 	sub	r7,r7,r17
 1016c3c:	8084b03a 	or	r2,r16,r2
 1016c40:	28ffffcc 	andi	r3,r5,65535
 1016c44:	280cd43a 	srli	r6,r5,16
 1016c48:	100ad43a 	srli	r5,r2,16
 1016c4c:	10bfffcc 	andi	r2,r2,65535
 1016c50:	10d1383a 	mul	r8,r2,r3
 1016c54:	28c7383a 	mul	r3,r5,r3
 1016c58:	1185383a 	mul	r2,r2,r6
 1016c5c:	4008d43a 	srli	r4,r8,16
 1016c60:	298b383a 	mul	r5,r5,r6
 1016c64:	10c5883a 	add	r2,r2,r3
 1016c68:	2089883a 	add	r4,r4,r2
 1016c6c:	20c0022e 	bgeu	r4,r3,1016c78 <__umoddi3+0x494>
 1016c70:	00800074 	movhi	r2,1
 1016c74:	288b883a 	add	r5,r5,r2
 1016c78:	2004d43a 	srli	r2,r4,16
 1016c7c:	2008943a 	slli	r4,r4,16
 1016c80:	40ffffcc 	andi	r3,r8,65535
 1016c84:	288b883a 	add	r5,r5,r2
 1016c88:	20c9883a 	add	r4,r4,r3
 1016c8c:	39400b36 	bltu	r7,r5,1016cbc <__umoddi3+0x4d8>
 1016c90:	39403d26 	beq	r7,r5,1016d88 <__umoddi3+0x5a4>
 1016c94:	394bc83a 	sub	r5,r7,r5
 1016c98:	00000f06 	br	1016cd8 <__umoddi3+0x4f4>
 1016c9c:	30c5c83a 	sub	r2,r6,r3
 1016ca0:	1839883a 	mov	fp,r3
 1016ca4:	b084d83a 	srl	r2,r22,r2
 1016ca8:	a0c6983a 	sll	r3,r20,r3
 1016cac:	8720983a 	sll	r16,r16,fp
 1016cb0:	b72c983a 	sll	r22,r22,fp
 1016cb4:	18a8b03a 	or	r20,r3,r2
 1016cb8:	003f3a06 	br	10169a4 <__umoddi3+0x1c0>
 1016cbc:	d8c00017 	ldw	r3,0(sp)
 1016cc0:	20c5c83a 	sub	r2,r4,r3
 1016cc4:	2089803a 	cmpltu	r4,r4,r2
 1016cc8:	2dc7c83a 	sub	r3,r5,r23
 1016ccc:	1907c83a 	sub	r3,r3,r4
 1016cd0:	38cbc83a 	sub	r5,r7,r3
 1016cd4:	1009883a 	mov	r4,r2
 1016cd8:	b105c83a 	sub	r2,r22,r4
 1016cdc:	b087803a 	cmpltu	r3,r22,r2
 1016ce0:	28c7c83a 	sub	r3,r5,r3
 1016ce4:	d9400317 	ldw	r5,12(sp)
 1016ce8:	1544d83a 	srl	r2,r2,r21
 1016cec:	1948983a 	sll	r4,r3,r5
 1016cf0:	1d46d83a 	srl	r3,r3,r21
 1016cf4:	20a4b03a 	or	r18,r4,r2
 1016cf8:	9011883a 	mov	r8,r18
 1016cfc:	1813883a 	mov	r9,r3
 1016d00:	003ef606 	br	10168dc <__umoddi3+0xf8>
 1016d04:	01400604 	movi	r5,24
 1016d08:	2805883a 	mov	r2,r5
 1016d0c:	003ecc06 	br	1016840 <__umoddi3+0x5c>
 1016d10:	01400204 	movi	r5,8
 1016d14:	2805883a 	mov	r2,r5
 1016d18:	003ec906 	br	1016840 <__umoddi3+0x5c>
 1016d1c:	01400204 	movi	r5,8
 1016d20:	2805883a 	mov	r2,r5
 1016d24:	003f0106 	br	101692c <__umoddi3+0x148>
 1016d28:	01400204 	movi	r5,8
 1016d2c:	2805883a 	mov	r2,r5
 1016d30:	003f1206 	br	101697c <__umoddi3+0x198>
 1016d34:	01400604 	movi	r5,24
 1016d38:	2805883a 	mov	r2,r5
 1016d3c:	003f0f06 	br	101697c <__umoddi3+0x198>
 1016d40:	01400604 	movi	r5,24
 1016d44:	2805883a 	mov	r2,r5
 1016d48:	003ef806 	br	101692c <__umoddi3+0x148>
 1016d4c:	3c7fb82e 	bgeu	r7,r17,1016c30 <__umoddi3+0x44c>
 1016d50:	843fffc4 	addi	r16,r16,-1
 1016d54:	3dcf883a 	add	r7,r7,r23
 1016d58:	003fb506 	br	1016c30 <__umoddi3+0x44c>
 1016d5c:	147fa22e 	bgeu	r2,r17,1016be8 <__umoddi3+0x404>
 1016d60:	e73fffc4 	addi	fp,fp,-1
 1016d64:	15c5883a 	add	r2,r2,r23
 1016d68:	003f9f06 	br	1016be8 <__umoddi3+0x404>
 1016d6c:	147f692e 	bgeu	r2,r17,1016b14 <__umoddi3+0x330>
 1016d70:	1405883a 	add	r2,r2,r16
 1016d74:	003f6706 	br	1016b14 <__umoddi3+0x330>
 1016d78:	1405883a 	add	r2,r2,r16
 1016d7c:	003f1906 	br	10169e4 <__umoddi3+0x200>
 1016d80:	1405883a 	add	r2,r2,r16
 1016d84:	003ec906 	br	10168ac <__umoddi3+0xc8>
 1016d88:	b13fcc36 	bltu	r22,r4,1016cbc <__umoddi3+0x4d8>
 1016d8c:	000b883a 	mov	r5,zero
 1016d90:	003fd106 	br	1016cd8 <__umoddi3+0x4f4>

01016d94 <_fpadd_parts>:
 1016d94:	defff804 	addi	sp,sp,-32
 1016d98:	dcc00315 	stw	r19,12(sp)
 1016d9c:	2027883a 	mov	r19,r4
 1016da0:	21000017 	ldw	r4,0(r4)
 1016da4:	00c00044 	movi	r3,1
 1016da8:	dd400515 	stw	r21,20(sp)
 1016dac:	dd000415 	stw	r20,16(sp)
 1016db0:	ddc00715 	stw	r23,28(sp)
 1016db4:	dd800615 	stw	r22,24(sp)
 1016db8:	dc800215 	stw	r18,8(sp)
 1016dbc:	dc400115 	stw	r17,4(sp)
 1016dc0:	dc000015 	stw	r16,0(sp)
 1016dc4:	282b883a 	mov	r21,r5
 1016dc8:	3029883a 	mov	r20,r6
 1016dcc:	1900632e 	bgeu	r3,r4,1016f5c <_fpadd_parts+0x1c8>
 1016dd0:	28800017 	ldw	r2,0(r5)
 1016dd4:	1880812e 	bgeu	r3,r2,1016fdc <_fpadd_parts+0x248>
 1016dd8:	00c00104 	movi	r3,4
 1016ddc:	20c0dc26 	beq	r4,r3,1017150 <_fpadd_parts+0x3bc>
 1016de0:	10c07e26 	beq	r2,r3,1016fdc <_fpadd_parts+0x248>
 1016de4:	00c00084 	movi	r3,2
 1016de8:	10c06726 	beq	r2,r3,1016f88 <_fpadd_parts+0x1f4>
 1016dec:	20c07b26 	beq	r4,r3,1016fdc <_fpadd_parts+0x248>
 1016df0:	9dc00217 	ldw	r23,8(r19)
 1016df4:	28c00217 	ldw	r3,8(r5)
 1016df8:	9c400317 	ldw	r17,12(r19)
 1016dfc:	2bc00317 	ldw	r15,12(r5)
 1016e00:	b8cdc83a 	sub	r6,r23,r3
 1016e04:	9c800417 	ldw	r18,16(r19)
 1016e08:	2c000417 	ldw	r16,16(r5)
 1016e0c:	3009883a 	mov	r4,r6
 1016e10:	30009716 	blt	r6,zero,1017070 <_fpadd_parts+0x2dc>
 1016e14:	00800fc4 	movi	r2,63
 1016e18:	11806b16 	blt	r2,r6,1016fc8 <_fpadd_parts+0x234>
 1016e1c:	0100a40e 	bge	zero,r4,10170b0 <_fpadd_parts+0x31c>
 1016e20:	35bff804 	addi	r22,r6,-32
 1016e24:	b000bc16 	blt	r22,zero,1017118 <_fpadd_parts+0x384>
 1016e28:	8596d83a 	srl	r11,r16,r22
 1016e2c:	0019883a 	mov	r12,zero
 1016e30:	0013883a 	mov	r9,zero
 1016e34:	01000044 	movi	r4,1
 1016e38:	0015883a 	mov	r10,zero
 1016e3c:	b000be16 	blt	r22,zero,1017138 <_fpadd_parts+0x3a4>
 1016e40:	2590983a 	sll	r8,r4,r22
 1016e44:	000f883a 	mov	r7,zero
 1016e48:	00bfffc4 	movi	r2,-1
 1016e4c:	3889883a 	add	r4,r7,r2
 1016e50:	408b883a 	add	r5,r8,r2
 1016e54:	21cd803a 	cmpltu	r6,r4,r7
 1016e58:	314b883a 	add	r5,r6,r5
 1016e5c:	7904703a 	and	r2,r15,r4
 1016e60:	8146703a 	and	r3,r16,r5
 1016e64:	10c4b03a 	or	r2,r2,r3
 1016e68:	10000226 	beq	r2,zero,1016e74 <_fpadd_parts+0xe0>
 1016e6c:	02400044 	movi	r9,1
 1016e70:	0015883a 	mov	r10,zero
 1016e74:	5a5eb03a 	or	r15,r11,r9
 1016e78:	62a0b03a 	or	r16,r12,r10
 1016e7c:	99400117 	ldw	r5,4(r19)
 1016e80:	a8800117 	ldw	r2,4(r21)
 1016e84:	28806e26 	beq	r5,r2,1017040 <_fpadd_parts+0x2ac>
 1016e88:	28006626 	beq	r5,zero,1017024 <_fpadd_parts+0x290>
 1016e8c:	7c45c83a 	sub	r2,r15,r17
 1016e90:	7889803a 	cmpltu	r4,r15,r2
 1016e94:	8487c83a 	sub	r3,r16,r18
 1016e98:	1909c83a 	sub	r4,r3,r4
 1016e9c:	100d883a 	mov	r6,r2
 1016ea0:	200f883a 	mov	r7,r4
 1016ea4:	38007716 	blt	r7,zero,1017084 <_fpadd_parts+0x2f0>
 1016ea8:	a5c00215 	stw	r23,8(r20)
 1016eac:	a1c00415 	stw	r7,16(r20)
 1016eb0:	a0000115 	stw	zero,4(r20)
 1016eb4:	a1800315 	stw	r6,12(r20)
 1016eb8:	a2000317 	ldw	r8,12(r20)
 1016ebc:	a2400417 	ldw	r9,16(r20)
 1016ec0:	00bfffc4 	movi	r2,-1
 1016ec4:	408b883a 	add	r5,r8,r2
 1016ec8:	2a09803a 	cmpltu	r4,r5,r8
 1016ecc:	488d883a 	add	r6,r9,r2
 1016ed0:	01c40034 	movhi	r7,4096
 1016ed4:	39ffffc4 	addi	r7,r7,-1
 1016ed8:	218d883a 	add	r6,r4,r6
 1016edc:	39801736 	bltu	r7,r6,1016f3c <_fpadd_parts+0x1a8>
 1016ee0:	31c06526 	beq	r6,r7,1017078 <_fpadd_parts+0x2e4>
 1016ee4:	a3000217 	ldw	r12,8(r20)
 1016ee8:	4209883a 	add	r4,r8,r8
 1016eec:	00bfffc4 	movi	r2,-1
 1016ef0:	220f803a 	cmpltu	r7,r4,r8
 1016ef4:	4a4b883a 	add	r5,r9,r9
 1016ef8:	394f883a 	add	r7,r7,r5
 1016efc:	2095883a 	add	r10,r4,r2
 1016f00:	3897883a 	add	r11,r7,r2
 1016f04:	510d803a 	cmpltu	r6,r10,r4
 1016f08:	6099883a 	add	r12,r12,r2
 1016f0c:	32d7883a 	add	r11,r6,r11
 1016f10:	00840034 	movhi	r2,4096
 1016f14:	10bfffc4 	addi	r2,r2,-1
 1016f18:	2011883a 	mov	r8,r4
 1016f1c:	3813883a 	mov	r9,r7
 1016f20:	a1000315 	stw	r4,12(r20)
 1016f24:	a1c00415 	stw	r7,16(r20)
 1016f28:	a3000215 	stw	r12,8(r20)
 1016f2c:	12c00336 	bltu	r2,r11,1016f3c <_fpadd_parts+0x1a8>
 1016f30:	58bfed1e 	bne	r11,r2,1016ee8 <_fpadd_parts+0x154>
 1016f34:	00bfff84 	movi	r2,-2
 1016f38:	12bfeb2e 	bgeu	r2,r10,1016ee8 <_fpadd_parts+0x154>
 1016f3c:	a2800417 	ldw	r10,16(r20)
 1016f40:	008000c4 	movi	r2,3
 1016f44:	00c80034 	movhi	r3,8192
 1016f48:	18ffffc4 	addi	r3,r3,-1
 1016f4c:	a2400317 	ldw	r9,12(r20)
 1016f50:	a0800015 	stw	r2,0(r20)
 1016f54:	1a802336 	bltu	r3,r10,1016fe4 <_fpadd_parts+0x250>
 1016f58:	a027883a 	mov	r19,r20
 1016f5c:	9805883a 	mov	r2,r19
 1016f60:	ddc00717 	ldw	r23,28(sp)
 1016f64:	dd800617 	ldw	r22,24(sp)
 1016f68:	dd400517 	ldw	r21,20(sp)
 1016f6c:	dd000417 	ldw	r20,16(sp)
 1016f70:	dcc00317 	ldw	r19,12(sp)
 1016f74:	dc800217 	ldw	r18,8(sp)
 1016f78:	dc400117 	ldw	r17,4(sp)
 1016f7c:	dc000017 	ldw	r16,0(sp)
 1016f80:	dec00804 	addi	sp,sp,32
 1016f84:	f800283a 	ret
 1016f88:	20fff41e 	bne	r4,r3,1016f5c <_fpadd_parts+0x1c8>
 1016f8c:	31000015 	stw	r4,0(r6)
 1016f90:	98800117 	ldw	r2,4(r19)
 1016f94:	30800115 	stw	r2,4(r6)
 1016f98:	98c00217 	ldw	r3,8(r19)
 1016f9c:	30c00215 	stw	r3,8(r6)
 1016fa0:	98800317 	ldw	r2,12(r19)
 1016fa4:	30800315 	stw	r2,12(r6)
 1016fa8:	98c00417 	ldw	r3,16(r19)
 1016fac:	30c00415 	stw	r3,16(r6)
 1016fb0:	98800117 	ldw	r2,4(r19)
 1016fb4:	28c00117 	ldw	r3,4(r5)
 1016fb8:	3027883a 	mov	r19,r6
 1016fbc:	10c4703a 	and	r2,r2,r3
 1016fc0:	30800115 	stw	r2,4(r6)
 1016fc4:	003fe506 	br	1016f5c <_fpadd_parts+0x1c8>
 1016fc8:	1dc02616 	blt	r3,r23,1017064 <_fpadd_parts+0x2d0>
 1016fcc:	0023883a 	mov	r17,zero
 1016fd0:	182f883a 	mov	r23,r3
 1016fd4:	0025883a 	mov	r18,zero
 1016fd8:	003fa806 	br	1016e7c <_fpadd_parts+0xe8>
 1016fdc:	a827883a 	mov	r19,r21
 1016fe0:	003fde06 	br	1016f5c <_fpadd_parts+0x1c8>
 1016fe4:	01800044 	movi	r6,1
 1016fe8:	500497fa 	slli	r2,r10,31
 1016fec:	4808d07a 	srli	r4,r9,1
 1016ff0:	518ad83a 	srl	r5,r10,r6
 1016ff4:	a2000217 	ldw	r8,8(r20)
 1016ff8:	1108b03a 	or	r4,r2,r4
 1016ffc:	0007883a 	mov	r3,zero
 1017000:	4984703a 	and	r2,r9,r6
 1017004:	208cb03a 	or	r6,r4,r2
 1017008:	28ceb03a 	or	r7,r5,r3
 101700c:	42000044 	addi	r8,r8,1
 1017010:	a027883a 	mov	r19,r20
 1017014:	a1c00415 	stw	r7,16(r20)
 1017018:	a2000215 	stw	r8,8(r20)
 101701c:	a1800315 	stw	r6,12(r20)
 1017020:	003fce06 	br	1016f5c <_fpadd_parts+0x1c8>
 1017024:	8bc5c83a 	sub	r2,r17,r15
 1017028:	8889803a 	cmpltu	r4,r17,r2
 101702c:	9407c83a 	sub	r3,r18,r16
 1017030:	1909c83a 	sub	r4,r3,r4
 1017034:	100d883a 	mov	r6,r2
 1017038:	200f883a 	mov	r7,r4
 101703c:	003f9906 	br	1016ea4 <_fpadd_parts+0x110>
 1017040:	7c45883a 	add	r2,r15,r17
 1017044:	13c9803a 	cmpltu	r4,r2,r15
 1017048:	8487883a 	add	r3,r16,r18
 101704c:	20c9883a 	add	r4,r4,r3
 1017050:	a1400115 	stw	r5,4(r20)
 1017054:	a5c00215 	stw	r23,8(r20)
 1017058:	a0800315 	stw	r2,12(r20)
 101705c:	a1000415 	stw	r4,16(r20)
 1017060:	003fb606 	br	1016f3c <_fpadd_parts+0x1a8>
 1017064:	001f883a 	mov	r15,zero
 1017068:	0021883a 	mov	r16,zero
 101706c:	003f8306 	br	1016e7c <_fpadd_parts+0xe8>
 1017070:	018dc83a 	sub	r6,zero,r6
 1017074:	003f6706 	br	1016e14 <_fpadd_parts+0x80>
 1017078:	00bfff84 	movi	r2,-2
 101707c:	117faf36 	bltu	r2,r5,1016f3c <_fpadd_parts+0x1a8>
 1017080:	003f9806 	br	1016ee4 <_fpadd_parts+0x150>
 1017084:	0005883a 	mov	r2,zero
 1017088:	1189c83a 	sub	r4,r2,r6
 101708c:	1105803a 	cmpltu	r2,r2,r4
 1017090:	01cbc83a 	sub	r5,zero,r7
 1017094:	2885c83a 	sub	r2,r5,r2
 1017098:	01800044 	movi	r6,1
 101709c:	a1800115 	stw	r6,4(r20)
 10170a0:	a5c00215 	stw	r23,8(r20)
 10170a4:	a1000315 	stw	r4,12(r20)
 10170a8:	a0800415 	stw	r2,16(r20)
 10170ac:	003f8206 	br	1016eb8 <_fpadd_parts+0x124>
 10170b0:	203f7226 	beq	r4,zero,1016e7c <_fpadd_parts+0xe8>
 10170b4:	35bff804 	addi	r22,r6,-32
 10170b8:	b9af883a 	add	r23,r23,r6
 10170bc:	b0003116 	blt	r22,zero,1017184 <_fpadd_parts+0x3f0>
 10170c0:	959ad83a 	srl	r13,r18,r22
 10170c4:	001d883a 	mov	r14,zero
 10170c8:	000f883a 	mov	r7,zero
 10170cc:	01000044 	movi	r4,1
 10170d0:	0011883a 	mov	r8,zero
 10170d4:	b0002516 	blt	r22,zero,101716c <_fpadd_parts+0x3d8>
 10170d8:	2594983a 	sll	r10,r4,r22
 10170dc:	0013883a 	mov	r9,zero
 10170e0:	00bfffc4 	movi	r2,-1
 10170e4:	4889883a 	add	r4,r9,r2
 10170e8:	508b883a 	add	r5,r10,r2
 10170ec:	224d803a 	cmpltu	r6,r4,r9
 10170f0:	314b883a 	add	r5,r6,r5
 10170f4:	8904703a 	and	r2,r17,r4
 10170f8:	9146703a 	and	r3,r18,r5
 10170fc:	10c4b03a 	or	r2,r2,r3
 1017100:	10000226 	beq	r2,zero,101710c <_fpadd_parts+0x378>
 1017104:	01c00044 	movi	r7,1
 1017108:	0011883a 	mov	r8,zero
 101710c:	69e2b03a 	or	r17,r13,r7
 1017110:	7224b03a 	or	r18,r14,r8
 1017114:	003f5906 	br	1016e7c <_fpadd_parts+0xe8>
 1017118:	8407883a 	add	r3,r16,r16
 101711c:	008007c4 	movi	r2,31
 1017120:	1185c83a 	sub	r2,r2,r6
 1017124:	1886983a 	sll	r3,r3,r2
 1017128:	7996d83a 	srl	r11,r15,r6
 101712c:	8198d83a 	srl	r12,r16,r6
 1017130:	1ad6b03a 	or	r11,r3,r11
 1017134:	003f3e06 	br	1016e30 <_fpadd_parts+0x9c>
 1017138:	2006d07a 	srli	r3,r4,1
 101713c:	008007c4 	movi	r2,31
 1017140:	1185c83a 	sub	r2,r2,r6
 1017144:	1890d83a 	srl	r8,r3,r2
 1017148:	218e983a 	sll	r7,r4,r6
 101714c:	003f3e06 	br	1016e48 <_fpadd_parts+0xb4>
 1017150:	113f821e 	bne	r2,r4,1016f5c <_fpadd_parts+0x1c8>
 1017154:	28c00117 	ldw	r3,4(r5)
 1017158:	98800117 	ldw	r2,4(r19)
 101715c:	10ff7f26 	beq	r2,r3,1016f5c <_fpadd_parts+0x1c8>
 1017160:	04c040b4 	movhi	r19,258
 1017164:	9cd7d504 	addi	r19,r19,24404
 1017168:	003f7c06 	br	1016f5c <_fpadd_parts+0x1c8>
 101716c:	2006d07a 	srli	r3,r4,1
 1017170:	008007c4 	movi	r2,31
 1017174:	1185c83a 	sub	r2,r2,r6
 1017178:	1894d83a 	srl	r10,r3,r2
 101717c:	2192983a 	sll	r9,r4,r6
 1017180:	003fd706 	br	10170e0 <_fpadd_parts+0x34c>
 1017184:	9487883a 	add	r3,r18,r18
 1017188:	008007c4 	movi	r2,31
 101718c:	1185c83a 	sub	r2,r2,r6
 1017190:	1886983a 	sll	r3,r3,r2
 1017194:	899ad83a 	srl	r13,r17,r6
 1017198:	919cd83a 	srl	r14,r18,r6
 101719c:	1b5ab03a 	or	r13,r3,r13
 10171a0:	003fc906 	br	10170c8 <_fpadd_parts+0x334>

010171a4 <__subdf3>:
 10171a4:	deffea04 	addi	sp,sp,-88
 10171a8:	dcc01415 	stw	r19,80(sp)
 10171ac:	dcc00404 	addi	r19,sp,16
 10171b0:	2011883a 	mov	r8,r4
 10171b4:	2813883a 	mov	r9,r5
 10171b8:	dc401315 	stw	r17,76(sp)
 10171bc:	d809883a 	mov	r4,sp
 10171c0:	980b883a 	mov	r5,r19
 10171c4:	dc400904 	addi	r17,sp,36
 10171c8:	dfc01515 	stw	ra,84(sp)
 10171cc:	da400115 	stw	r9,4(sp)
 10171d0:	d9c00315 	stw	r7,12(sp)
 10171d4:	da000015 	stw	r8,0(sp)
 10171d8:	d9800215 	stw	r6,8(sp)
 10171dc:	10184380 	call	1018438 <__unpack_d>
 10171e0:	d9000204 	addi	r4,sp,8
 10171e4:	880b883a 	mov	r5,r17
 10171e8:	10184380 	call	1018438 <__unpack_d>
 10171ec:	d8800a17 	ldw	r2,40(sp)
 10171f0:	880b883a 	mov	r5,r17
 10171f4:	9809883a 	mov	r4,r19
 10171f8:	d9800e04 	addi	r6,sp,56
 10171fc:	1080005c 	xori	r2,r2,1
 1017200:	d8800a15 	stw	r2,40(sp)
 1017204:	1016d940 	call	1016d94 <_fpadd_parts>
 1017208:	1009883a 	mov	r4,r2
 101720c:	10181240 	call	1018124 <__pack_d>
 1017210:	dfc01517 	ldw	ra,84(sp)
 1017214:	dcc01417 	ldw	r19,80(sp)
 1017218:	dc401317 	ldw	r17,76(sp)
 101721c:	dec01604 	addi	sp,sp,88
 1017220:	f800283a 	ret

01017224 <__adddf3>:
 1017224:	deffea04 	addi	sp,sp,-88
 1017228:	dcc01415 	stw	r19,80(sp)
 101722c:	dcc00404 	addi	r19,sp,16
 1017230:	2011883a 	mov	r8,r4
 1017234:	2813883a 	mov	r9,r5
 1017238:	dc401315 	stw	r17,76(sp)
 101723c:	d809883a 	mov	r4,sp
 1017240:	980b883a 	mov	r5,r19
 1017244:	dc400904 	addi	r17,sp,36
 1017248:	dfc01515 	stw	ra,84(sp)
 101724c:	da400115 	stw	r9,4(sp)
 1017250:	d9c00315 	stw	r7,12(sp)
 1017254:	da000015 	stw	r8,0(sp)
 1017258:	d9800215 	stw	r6,8(sp)
 101725c:	10184380 	call	1018438 <__unpack_d>
 1017260:	d9000204 	addi	r4,sp,8
 1017264:	880b883a 	mov	r5,r17
 1017268:	10184380 	call	1018438 <__unpack_d>
 101726c:	d9800e04 	addi	r6,sp,56
 1017270:	9809883a 	mov	r4,r19
 1017274:	880b883a 	mov	r5,r17
 1017278:	1016d940 	call	1016d94 <_fpadd_parts>
 101727c:	1009883a 	mov	r4,r2
 1017280:	10181240 	call	1018124 <__pack_d>
 1017284:	dfc01517 	ldw	ra,84(sp)
 1017288:	dcc01417 	ldw	r19,80(sp)
 101728c:	dc401317 	ldw	r17,76(sp)
 1017290:	dec01604 	addi	sp,sp,88
 1017294:	f800283a 	ret

01017298 <__muldf3>:
 1017298:	deffe004 	addi	sp,sp,-128
 101729c:	dc401815 	stw	r17,96(sp)
 10172a0:	dc400404 	addi	r17,sp,16
 10172a4:	2011883a 	mov	r8,r4
 10172a8:	2813883a 	mov	r9,r5
 10172ac:	dc001715 	stw	r16,92(sp)
 10172b0:	d809883a 	mov	r4,sp
 10172b4:	880b883a 	mov	r5,r17
 10172b8:	dc000904 	addi	r16,sp,36
 10172bc:	dfc01f15 	stw	ra,124(sp)
 10172c0:	da400115 	stw	r9,4(sp)
 10172c4:	d9c00315 	stw	r7,12(sp)
 10172c8:	da000015 	stw	r8,0(sp)
 10172cc:	d9800215 	stw	r6,8(sp)
 10172d0:	ddc01e15 	stw	r23,120(sp)
 10172d4:	dd801d15 	stw	r22,116(sp)
 10172d8:	dd401c15 	stw	r21,112(sp)
 10172dc:	dd001b15 	stw	r20,108(sp)
 10172e0:	dcc01a15 	stw	r19,104(sp)
 10172e4:	dc801915 	stw	r18,100(sp)
 10172e8:	10184380 	call	1018438 <__unpack_d>
 10172ec:	d9000204 	addi	r4,sp,8
 10172f0:	800b883a 	mov	r5,r16
 10172f4:	10184380 	call	1018438 <__unpack_d>
 10172f8:	d9000417 	ldw	r4,16(sp)
 10172fc:	00800044 	movi	r2,1
 1017300:	1100102e 	bgeu	r2,r4,1017344 <__muldf3+0xac>
 1017304:	d8c00917 	ldw	r3,36(sp)
 1017308:	10c0062e 	bgeu	r2,r3,1017324 <__muldf3+0x8c>
 101730c:	00800104 	movi	r2,4
 1017310:	20800a26 	beq	r4,r2,101733c <__muldf3+0xa4>
 1017314:	1880cc26 	beq	r3,r2,1017648 <__muldf3+0x3b0>
 1017318:	00800084 	movi	r2,2
 101731c:	20800926 	beq	r4,r2,1017344 <__muldf3+0xac>
 1017320:	1880191e 	bne	r3,r2,1017388 <__muldf3+0xf0>
 1017324:	d8c00a17 	ldw	r3,40(sp)
 1017328:	d8800517 	ldw	r2,20(sp)
 101732c:	8009883a 	mov	r4,r16
 1017330:	10c4c03a 	cmpne	r2,r2,r3
 1017334:	d8800a15 	stw	r2,40(sp)
 1017338:	00000706 	br	1017358 <__muldf3+0xc0>
 101733c:	00800084 	movi	r2,2
 1017340:	1880c326 	beq	r3,r2,1017650 <__muldf3+0x3b8>
 1017344:	d8800517 	ldw	r2,20(sp)
 1017348:	d8c00a17 	ldw	r3,40(sp)
 101734c:	8809883a 	mov	r4,r17
 1017350:	10c4c03a 	cmpne	r2,r2,r3
 1017354:	d8800515 	stw	r2,20(sp)
 1017358:	10181240 	call	1018124 <__pack_d>
 101735c:	dfc01f17 	ldw	ra,124(sp)
 1017360:	ddc01e17 	ldw	r23,120(sp)
 1017364:	dd801d17 	ldw	r22,116(sp)
 1017368:	dd401c17 	ldw	r21,112(sp)
 101736c:	dd001b17 	ldw	r20,108(sp)
 1017370:	dcc01a17 	ldw	r19,104(sp)
 1017374:	dc801917 	ldw	r18,100(sp)
 1017378:	dc401817 	ldw	r17,96(sp)
 101737c:	dc001717 	ldw	r16,92(sp)
 1017380:	dec02004 	addi	sp,sp,128
 1017384:	f800283a 	ret
 1017388:	dd800717 	ldw	r22,28(sp)
 101738c:	dc800c17 	ldw	r18,48(sp)
 1017390:	002b883a 	mov	r21,zero
 1017394:	0023883a 	mov	r17,zero
 1017398:	a80b883a 	mov	r5,r21
 101739c:	b00d883a 	mov	r6,r22
 10173a0:	880f883a 	mov	r7,r17
 10173a4:	ddc00817 	ldw	r23,32(sp)
 10173a8:	dcc00d17 	ldw	r19,52(sp)
 10173ac:	9009883a 	mov	r4,r18
 10173b0:	101800c0 	call	101800c <__muldi3>
 10173b4:	001b883a 	mov	r13,zero
 10173b8:	680f883a 	mov	r7,r13
 10173bc:	b009883a 	mov	r4,r22
 10173c0:	000b883a 	mov	r5,zero
 10173c4:	980d883a 	mov	r6,r19
 10173c8:	b82d883a 	mov	r22,r23
 10173cc:	002f883a 	mov	r23,zero
 10173d0:	db401615 	stw	r13,88(sp)
 10173d4:	d8801315 	stw	r2,76(sp)
 10173d8:	d8c01415 	stw	r3,80(sp)
 10173dc:	dcc01515 	stw	r19,84(sp)
 10173e0:	101800c0 	call	101800c <__muldi3>
 10173e4:	b00d883a 	mov	r6,r22
 10173e8:	000b883a 	mov	r5,zero
 10173ec:	9009883a 	mov	r4,r18
 10173f0:	b80f883a 	mov	r7,r23
 10173f4:	1021883a 	mov	r16,r2
 10173f8:	1823883a 	mov	r17,r3
 10173fc:	101800c0 	call	101800c <__muldi3>
 1017400:	8085883a 	add	r2,r16,r2
 1017404:	140d803a 	cmpltu	r6,r2,r16
 1017408:	88c7883a 	add	r3,r17,r3
 101740c:	30cd883a 	add	r6,r6,r3
 1017410:	1029883a 	mov	r20,r2
 1017414:	302b883a 	mov	r21,r6
 1017418:	da801317 	ldw	r10,76(sp)
 101741c:	dac01417 	ldw	r11,80(sp)
 1017420:	db001517 	ldw	r12,84(sp)
 1017424:	db401617 	ldw	r13,88(sp)
 1017428:	3440612e 	bgeu	r6,r17,10175b0 <__muldf3+0x318>
 101742c:	0009883a 	mov	r4,zero
 1017430:	5105883a 	add	r2,r10,r4
 1017434:	128d803a 	cmpltu	r6,r2,r10
 1017438:	5d07883a 	add	r3,r11,r20
 101743c:	30cd883a 	add	r6,r6,r3
 1017440:	0021883a 	mov	r16,zero
 1017444:	04400044 	movi	r17,1
 1017448:	1025883a 	mov	r18,r2
 101744c:	3027883a 	mov	r19,r6
 1017450:	32c06236 	bltu	r6,r11,10175dc <__muldf3+0x344>
 1017454:	59807a26 	beq	r11,r6,1017640 <__muldf3+0x3a8>
 1017458:	680b883a 	mov	r5,r13
 101745c:	b80f883a 	mov	r7,r23
 1017460:	6009883a 	mov	r4,r12
 1017464:	b00d883a 	mov	r6,r22
 1017468:	101800c0 	call	101800c <__muldi3>
 101746c:	1009883a 	mov	r4,r2
 1017470:	000f883a 	mov	r7,zero
 1017474:	1545883a 	add	r2,r2,r21
 1017478:	1111803a 	cmpltu	r8,r2,r4
 101747c:	19c7883a 	add	r3,r3,r7
 1017480:	40c7883a 	add	r3,r8,r3
 1017484:	88cb883a 	add	r5,r17,r3
 1017488:	d8c00617 	ldw	r3,24(sp)
 101748c:	8089883a 	add	r4,r16,r2
 1017490:	d8800b17 	ldw	r2,44(sp)
 1017494:	18c00104 	addi	r3,r3,4
 1017498:	240d803a 	cmpltu	r6,r4,r16
 101749c:	10c7883a 	add	r3,r2,r3
 10174a0:	2013883a 	mov	r9,r4
 10174a4:	d8800a17 	ldw	r2,40(sp)
 10174a8:	d9000517 	ldw	r4,20(sp)
 10174ac:	314d883a 	add	r6,r6,r5
 10174b0:	3015883a 	mov	r10,r6
 10174b4:	2088c03a 	cmpne	r4,r4,r2
 10174b8:	00880034 	movhi	r2,8192
 10174bc:	10bfffc4 	addi	r2,r2,-1
 10174c0:	d9000f15 	stw	r4,60(sp)
 10174c4:	d8c01015 	stw	r3,64(sp)
 10174c8:	1180162e 	bgeu	r2,r6,1017524 <__muldf3+0x28c>
 10174cc:	1811883a 	mov	r8,r3
 10174d0:	101f883a 	mov	r15,r2
 10174d4:	980497fa 	slli	r2,r19,31
 10174d8:	9016d07a 	srli	r11,r18,1
 10174dc:	500697fa 	slli	r3,r10,31
 10174e0:	480cd07a 	srli	r6,r9,1
 10174e4:	500ed07a 	srli	r7,r10,1
 10174e8:	12d6b03a 	or	r11,r2,r11
 10174ec:	00800044 	movi	r2,1
 10174f0:	198cb03a 	or	r6,r3,r6
 10174f4:	4888703a 	and	r4,r9,r2
 10174f8:	9818d07a 	srli	r12,r19,1
 10174fc:	001b883a 	mov	r13,zero
 1017500:	03a00034 	movhi	r14,32768
 1017504:	3013883a 	mov	r9,r6
 1017508:	3815883a 	mov	r10,r7
 101750c:	4091883a 	add	r8,r8,r2
 1017510:	20000226 	beq	r4,zero,101751c <__muldf3+0x284>
 1017514:	5b64b03a 	or	r18,r11,r13
 1017518:	63a6b03a 	or	r19,r12,r14
 101751c:	7abfed36 	bltu	r15,r10,10174d4 <__muldf3+0x23c>
 1017520:	da001015 	stw	r8,64(sp)
 1017524:	00840034 	movhi	r2,4096
 1017528:	10bfffc4 	addi	r2,r2,-1
 101752c:	12801436 	bltu	r2,r10,1017580 <__muldf3+0x2e8>
 1017530:	da001017 	ldw	r8,64(sp)
 1017534:	101f883a 	mov	r15,r2
 1017538:	4a45883a 	add	r2,r9,r9
 101753c:	124d803a 	cmpltu	r6,r2,r9
 1017540:	5287883a 	add	r3,r10,r10
 1017544:	9497883a 	add	r11,r18,r18
 1017548:	5c8f803a 	cmpltu	r7,r11,r18
 101754c:	9cd9883a 	add	r12,r19,r19
 1017550:	01000044 	movi	r4,1
 1017554:	30cd883a 	add	r6,r6,r3
 1017558:	3b0f883a 	add	r7,r7,r12
 101755c:	423fffc4 	addi	r8,r8,-1
 1017560:	1013883a 	mov	r9,r2
 1017564:	3015883a 	mov	r10,r6
 1017568:	111ab03a 	or	r13,r2,r4
 101756c:	98003016 	blt	r19,zero,1017630 <__muldf3+0x398>
 1017570:	5825883a 	mov	r18,r11
 1017574:	3827883a 	mov	r19,r7
 1017578:	7abfef2e 	bgeu	r15,r10,1017538 <__muldf3+0x2a0>
 101757c:	da001015 	stw	r8,64(sp)
 1017580:	00803fc4 	movi	r2,255
 1017584:	488e703a 	and	r7,r9,r2
 1017588:	00802004 	movi	r2,128
 101758c:	0007883a 	mov	r3,zero
 1017590:	0011883a 	mov	r8,zero
 1017594:	38801826 	beq	r7,r2,10175f8 <__muldf3+0x360>
 1017598:	008000c4 	movi	r2,3
 101759c:	d9000e04 	addi	r4,sp,56
 10175a0:	da801215 	stw	r10,72(sp)
 10175a4:	d8800e15 	stw	r2,56(sp)
 10175a8:	da401115 	stw	r9,68(sp)
 10175ac:	003f6a06 	br	1017358 <__muldf3+0xc0>
 10175b0:	89802126 	beq	r17,r6,1017638 <__muldf3+0x3a0>
 10175b4:	0009883a 	mov	r4,zero
 10175b8:	5105883a 	add	r2,r10,r4
 10175bc:	128d803a 	cmpltu	r6,r2,r10
 10175c0:	5d07883a 	add	r3,r11,r20
 10175c4:	30cd883a 	add	r6,r6,r3
 10175c8:	0021883a 	mov	r16,zero
 10175cc:	0023883a 	mov	r17,zero
 10175d0:	1025883a 	mov	r18,r2
 10175d4:	3027883a 	mov	r19,r6
 10175d8:	32ff9e2e 	bgeu	r6,r11,1017454 <__muldf3+0x1bc>
 10175dc:	00800044 	movi	r2,1
 10175e0:	8089883a 	add	r4,r16,r2
 10175e4:	240d803a 	cmpltu	r6,r4,r16
 10175e8:	344d883a 	add	r6,r6,r17
 10175ec:	2021883a 	mov	r16,r4
 10175f0:	3023883a 	mov	r17,r6
 10175f4:	003f9806 	br	1017458 <__muldf3+0x1c0>
 10175f8:	403fe71e 	bne	r8,zero,1017598 <__muldf3+0x300>
 10175fc:	01004004 	movi	r4,256
 1017600:	4904703a 	and	r2,r9,r4
 1017604:	10c4b03a 	or	r2,r2,r3
 1017608:	103fe31e 	bne	r2,zero,1017598 <__muldf3+0x300>
 101760c:	94c4b03a 	or	r2,r18,r19
 1017610:	103fe126 	beq	r2,zero,1017598 <__muldf3+0x300>
 1017614:	49c5883a 	add	r2,r9,r7
 1017618:	1251803a 	cmpltu	r8,r2,r9
 101761c:	4291883a 	add	r8,r8,r10
 1017620:	013fc004 	movi	r4,-256
 1017624:	1112703a 	and	r9,r2,r4
 1017628:	4015883a 	mov	r10,r8
 101762c:	003fda06 	br	1017598 <__muldf3+0x300>
 1017630:	6813883a 	mov	r9,r13
 1017634:	003fce06 	br	1017570 <__muldf3+0x2d8>
 1017638:	143f7c36 	bltu	r2,r16,101742c <__muldf3+0x194>
 101763c:	003fdd06 	br	10175b4 <__muldf3+0x31c>
 1017640:	12bf852e 	bgeu	r2,r10,1017458 <__muldf3+0x1c0>
 1017644:	003fe506 	br	10175dc <__muldf3+0x344>
 1017648:	00800084 	movi	r2,2
 101764c:	20bf351e 	bne	r4,r2,1017324 <__muldf3+0x8c>
 1017650:	010040b4 	movhi	r4,258
 1017654:	2117d504 	addi	r4,r4,24404
 1017658:	003f3f06 	br	1017358 <__muldf3+0xc0>

0101765c <__divdf3>:
 101765c:	deffed04 	addi	sp,sp,-76
 1017660:	dcc01115 	stw	r19,68(sp)
 1017664:	dcc00404 	addi	r19,sp,16
 1017668:	2011883a 	mov	r8,r4
 101766c:	2813883a 	mov	r9,r5
 1017670:	dc000e15 	stw	r16,56(sp)
 1017674:	d809883a 	mov	r4,sp
 1017678:	980b883a 	mov	r5,r19
 101767c:	dc000904 	addi	r16,sp,36
 1017680:	dfc01215 	stw	ra,72(sp)
 1017684:	da400115 	stw	r9,4(sp)
 1017688:	d9c00315 	stw	r7,12(sp)
 101768c:	da000015 	stw	r8,0(sp)
 1017690:	d9800215 	stw	r6,8(sp)
 1017694:	dc801015 	stw	r18,64(sp)
 1017698:	dc400f15 	stw	r17,60(sp)
 101769c:	10184380 	call	1018438 <__unpack_d>
 10176a0:	d9000204 	addi	r4,sp,8
 10176a4:	800b883a 	mov	r5,r16
 10176a8:	10184380 	call	1018438 <__unpack_d>
 10176ac:	d9000417 	ldw	r4,16(sp)
 10176b0:	00800044 	movi	r2,1
 10176b4:	11000b2e 	bgeu	r2,r4,10176e4 <__divdf3+0x88>
 10176b8:	d9400917 	ldw	r5,36(sp)
 10176bc:	1140762e 	bgeu	r2,r5,1017898 <__divdf3+0x23c>
 10176c0:	d8800517 	ldw	r2,20(sp)
 10176c4:	d8c00a17 	ldw	r3,40(sp)
 10176c8:	01800104 	movi	r6,4
 10176cc:	10c4f03a 	xor	r2,r2,r3
 10176d0:	d8800515 	stw	r2,20(sp)
 10176d4:	21800226 	beq	r4,r6,10176e0 <__divdf3+0x84>
 10176d8:	00800084 	movi	r2,2
 10176dc:	2080141e 	bne	r4,r2,1017730 <__divdf3+0xd4>
 10176e0:	29000926 	beq	r5,r4,1017708 <__divdf3+0xac>
 10176e4:	9809883a 	mov	r4,r19
 10176e8:	10181240 	call	1018124 <__pack_d>
 10176ec:	dfc01217 	ldw	ra,72(sp)
 10176f0:	dcc01117 	ldw	r19,68(sp)
 10176f4:	dc801017 	ldw	r18,64(sp)
 10176f8:	dc400f17 	ldw	r17,60(sp)
 10176fc:	dc000e17 	ldw	r16,56(sp)
 1017700:	dec01304 	addi	sp,sp,76
 1017704:	f800283a 	ret
 1017708:	010040b4 	movhi	r4,258
 101770c:	2117d504 	addi	r4,r4,24404
 1017710:	10181240 	call	1018124 <__pack_d>
 1017714:	dfc01217 	ldw	ra,72(sp)
 1017718:	dcc01117 	ldw	r19,68(sp)
 101771c:	dc801017 	ldw	r18,64(sp)
 1017720:	dc400f17 	ldw	r17,60(sp)
 1017724:	dc000e17 	ldw	r16,56(sp)
 1017728:	dec01304 	addi	sp,sp,76
 101772c:	f800283a 	ret
 1017730:	29805b26 	beq	r5,r6,10178a0 <__divdf3+0x244>
 1017734:	28802d26 	beq	r5,r2,10177ec <__divdf3+0x190>
 1017738:	d8c00617 	ldw	r3,24(sp)
 101773c:	d8800b17 	ldw	r2,44(sp)
 1017740:	d9c00817 	ldw	r7,32(sp)
 1017744:	dc400d17 	ldw	r17,52(sp)
 1017748:	188bc83a 	sub	r5,r3,r2
 101774c:	d9800717 	ldw	r6,28(sp)
 1017750:	dc000c17 	ldw	r16,48(sp)
 1017754:	d9400615 	stw	r5,24(sp)
 1017758:	3c403836 	bltu	r7,r17,101783c <__divdf3+0x1e0>
 101775c:	89c03626 	beq	r17,r7,1017838 <__divdf3+0x1dc>
 1017760:	0015883a 	mov	r10,zero
 1017764:	001d883a 	mov	r14,zero
 1017768:	02c40034 	movhi	r11,4096
 101776c:	001f883a 	mov	r15,zero
 1017770:	003f883a 	mov	ra,zero
 1017774:	04800f44 	movi	r18,61
 1017778:	00000f06 	br	10177b8 <__divdf3+0x15c>
 101777c:	601d883a 	mov	r14,r12
 1017780:	681f883a 	mov	r15,r13
 1017784:	400d883a 	mov	r6,r8
 1017788:	100f883a 	mov	r7,r2
 101778c:	3191883a 	add	r8,r6,r6
 1017790:	5808d07a 	srli	r4,r11,1
 1017794:	4185803a 	cmpltu	r2,r8,r6
 1017798:	39d3883a 	add	r9,r7,r7
 101779c:	28c6b03a 	or	r3,r5,r3
 10177a0:	1245883a 	add	r2,r2,r9
 10177a4:	1815883a 	mov	r10,r3
 10177a8:	2017883a 	mov	r11,r4
 10177ac:	400d883a 	mov	r6,r8
 10177b0:	100f883a 	mov	r7,r2
 10177b4:	fc801726 	beq	ra,r18,1017814 <__divdf3+0x1b8>
 10177b8:	580a97fa 	slli	r5,r11,31
 10177bc:	5006d07a 	srli	r3,r10,1
 10177c0:	ffc00044 	addi	ra,ra,1
 10177c4:	3c7ff136 	bltu	r7,r17,101778c <__divdf3+0x130>
 10177c8:	3411c83a 	sub	r8,r6,r16
 10177cc:	3205803a 	cmpltu	r2,r6,r8
 10177d0:	3c53c83a 	sub	r9,r7,r17
 10177d4:	7298b03a 	or	r12,r14,r10
 10177d8:	7adab03a 	or	r13,r15,r11
 10177dc:	4885c83a 	sub	r2,r9,r2
 10177e0:	89ffe61e 	bne	r17,r7,101777c <__divdf3+0x120>
 10177e4:	343fe936 	bltu	r6,r16,101778c <__divdf3+0x130>
 10177e8:	003fe406 	br	101777c <__divdf3+0x120>
 10177ec:	9809883a 	mov	r4,r19
 10177f0:	d9800415 	stw	r6,16(sp)
 10177f4:	10181240 	call	1018124 <__pack_d>
 10177f8:	dfc01217 	ldw	ra,72(sp)
 10177fc:	dcc01117 	ldw	r19,68(sp)
 1017800:	dc801017 	ldw	r18,64(sp)
 1017804:	dc400f17 	ldw	r17,60(sp)
 1017808:	dc000e17 	ldw	r16,56(sp)
 101780c:	dec01304 	addi	sp,sp,76
 1017810:	f800283a 	ret
 1017814:	00803fc4 	movi	r2,255
 1017818:	7090703a 	and	r8,r14,r2
 101781c:	00802004 	movi	r2,128
 1017820:	0007883a 	mov	r3,zero
 1017824:	0013883a 	mov	r9,zero
 1017828:	40800d26 	beq	r8,r2,1017860 <__divdf3+0x204>
 101782c:	dbc00815 	stw	r15,32(sp)
 1017830:	db800715 	stw	r14,28(sp)
 1017834:	003fab06 	br	10176e4 <__divdf3+0x88>
 1017838:	343fc92e 	bgeu	r6,r16,1017760 <__divdf3+0x104>
 101783c:	3185883a 	add	r2,r6,r6
 1017840:	1189803a 	cmpltu	r4,r2,r6
 1017844:	39c7883a 	add	r3,r7,r7
 1017848:	20c9883a 	add	r4,r4,r3
 101784c:	297fffc4 	addi	r5,r5,-1
 1017850:	100d883a 	mov	r6,r2
 1017854:	200f883a 	mov	r7,r4
 1017858:	d9400615 	stw	r5,24(sp)
 101785c:	003fc006 	br	1017760 <__divdf3+0x104>
 1017860:	483ff21e 	bne	r9,zero,101782c <__divdf3+0x1d0>
 1017864:	01004004 	movi	r4,256
 1017868:	7104703a 	and	r2,r14,r4
 101786c:	10c4b03a 	or	r2,r2,r3
 1017870:	103fee1e 	bne	r2,zero,101782c <__divdf3+0x1d0>
 1017874:	31c4b03a 	or	r2,r6,r7
 1017878:	103fec26 	beq	r2,zero,101782c <__divdf3+0x1d0>
 101787c:	7205883a 	add	r2,r14,r8
 1017880:	1391803a 	cmpltu	r8,r2,r14
 1017884:	43d1883a 	add	r8,r8,r15
 1017888:	013fc004 	movi	r4,-256
 101788c:	111c703a 	and	r14,r2,r4
 1017890:	401f883a 	mov	r15,r8
 1017894:	003fe506 	br	101782c <__divdf3+0x1d0>
 1017898:	8009883a 	mov	r4,r16
 101789c:	003f9206 	br	10176e8 <__divdf3+0x8c>
 10178a0:	9809883a 	mov	r4,r19
 10178a4:	d8000715 	stw	zero,28(sp)
 10178a8:	d8000815 	stw	zero,32(sp)
 10178ac:	d8000615 	stw	zero,24(sp)
 10178b0:	003f8d06 	br	10176e8 <__divdf3+0x8c>

010178b4 <__eqdf2>:
 10178b4:	deffef04 	addi	sp,sp,-68
 10178b8:	dc400f15 	stw	r17,60(sp)
 10178bc:	dc400404 	addi	r17,sp,16
 10178c0:	2005883a 	mov	r2,r4
 10178c4:	2807883a 	mov	r3,r5
 10178c8:	dc000e15 	stw	r16,56(sp)
 10178cc:	d809883a 	mov	r4,sp
 10178d0:	880b883a 	mov	r5,r17
 10178d4:	dc000904 	addi	r16,sp,36
 10178d8:	d8c00115 	stw	r3,4(sp)
 10178dc:	d8800015 	stw	r2,0(sp)
 10178e0:	d9800215 	stw	r6,8(sp)
 10178e4:	dfc01015 	stw	ra,64(sp)
 10178e8:	d9c00315 	stw	r7,12(sp)
 10178ec:	10184380 	call	1018438 <__unpack_d>
 10178f0:	d9000204 	addi	r4,sp,8
 10178f4:	800b883a 	mov	r5,r16
 10178f8:	10184380 	call	1018438 <__unpack_d>
 10178fc:	d8800417 	ldw	r2,16(sp)
 1017900:	00c00044 	movi	r3,1
 1017904:	180d883a 	mov	r6,r3
 1017908:	1880062e 	bgeu	r3,r2,1017924 <__eqdf2+0x70>
 101790c:	d8800917 	ldw	r2,36(sp)
 1017910:	8809883a 	mov	r4,r17
 1017914:	800b883a 	mov	r5,r16
 1017918:	1880022e 	bgeu	r3,r2,1017924 <__eqdf2+0x70>
 101791c:	10185700 	call	1018570 <__fpcmp_parts_d>
 1017920:	100d883a 	mov	r6,r2
 1017924:	3005883a 	mov	r2,r6
 1017928:	dfc01017 	ldw	ra,64(sp)
 101792c:	dc400f17 	ldw	r17,60(sp)
 1017930:	dc000e17 	ldw	r16,56(sp)
 1017934:	dec01104 	addi	sp,sp,68
 1017938:	f800283a 	ret

0101793c <__nedf2>:
 101793c:	deffef04 	addi	sp,sp,-68
 1017940:	dc400f15 	stw	r17,60(sp)
 1017944:	dc400404 	addi	r17,sp,16
 1017948:	2005883a 	mov	r2,r4
 101794c:	2807883a 	mov	r3,r5
 1017950:	dc000e15 	stw	r16,56(sp)
 1017954:	d809883a 	mov	r4,sp
 1017958:	880b883a 	mov	r5,r17
 101795c:	dc000904 	addi	r16,sp,36
 1017960:	d8c00115 	stw	r3,4(sp)
 1017964:	d8800015 	stw	r2,0(sp)
 1017968:	d9800215 	stw	r6,8(sp)
 101796c:	dfc01015 	stw	ra,64(sp)
 1017970:	d9c00315 	stw	r7,12(sp)
 1017974:	10184380 	call	1018438 <__unpack_d>
 1017978:	d9000204 	addi	r4,sp,8
 101797c:	800b883a 	mov	r5,r16
 1017980:	10184380 	call	1018438 <__unpack_d>
 1017984:	d8800417 	ldw	r2,16(sp)
 1017988:	00c00044 	movi	r3,1
 101798c:	180d883a 	mov	r6,r3
 1017990:	1880062e 	bgeu	r3,r2,10179ac <__nedf2+0x70>
 1017994:	d8800917 	ldw	r2,36(sp)
 1017998:	8809883a 	mov	r4,r17
 101799c:	800b883a 	mov	r5,r16
 10179a0:	1880022e 	bgeu	r3,r2,10179ac <__nedf2+0x70>
 10179a4:	10185700 	call	1018570 <__fpcmp_parts_d>
 10179a8:	100d883a 	mov	r6,r2
 10179ac:	3005883a 	mov	r2,r6
 10179b0:	dfc01017 	ldw	ra,64(sp)
 10179b4:	dc400f17 	ldw	r17,60(sp)
 10179b8:	dc000e17 	ldw	r16,56(sp)
 10179bc:	dec01104 	addi	sp,sp,68
 10179c0:	f800283a 	ret

010179c4 <__gtdf2>:
 10179c4:	deffef04 	addi	sp,sp,-68
 10179c8:	dc400f15 	stw	r17,60(sp)
 10179cc:	dc400404 	addi	r17,sp,16
 10179d0:	2005883a 	mov	r2,r4
 10179d4:	2807883a 	mov	r3,r5
 10179d8:	dc000e15 	stw	r16,56(sp)
 10179dc:	d809883a 	mov	r4,sp
 10179e0:	880b883a 	mov	r5,r17
 10179e4:	dc000904 	addi	r16,sp,36
 10179e8:	d8c00115 	stw	r3,4(sp)
 10179ec:	d8800015 	stw	r2,0(sp)
 10179f0:	d9800215 	stw	r6,8(sp)
 10179f4:	dfc01015 	stw	ra,64(sp)
 10179f8:	d9c00315 	stw	r7,12(sp)
 10179fc:	10184380 	call	1018438 <__unpack_d>
 1017a00:	d9000204 	addi	r4,sp,8
 1017a04:	800b883a 	mov	r5,r16
 1017a08:	10184380 	call	1018438 <__unpack_d>
 1017a0c:	d8800417 	ldw	r2,16(sp)
 1017a10:	00c00044 	movi	r3,1
 1017a14:	01bfffc4 	movi	r6,-1
 1017a18:	1880062e 	bgeu	r3,r2,1017a34 <__gtdf2+0x70>
 1017a1c:	d8800917 	ldw	r2,36(sp)
 1017a20:	8809883a 	mov	r4,r17
 1017a24:	800b883a 	mov	r5,r16
 1017a28:	1880022e 	bgeu	r3,r2,1017a34 <__gtdf2+0x70>
 1017a2c:	10185700 	call	1018570 <__fpcmp_parts_d>
 1017a30:	100d883a 	mov	r6,r2
 1017a34:	3005883a 	mov	r2,r6
 1017a38:	dfc01017 	ldw	ra,64(sp)
 1017a3c:	dc400f17 	ldw	r17,60(sp)
 1017a40:	dc000e17 	ldw	r16,56(sp)
 1017a44:	dec01104 	addi	sp,sp,68
 1017a48:	f800283a 	ret

01017a4c <__gedf2>:
 1017a4c:	deffef04 	addi	sp,sp,-68
 1017a50:	dc400f15 	stw	r17,60(sp)
 1017a54:	dc400404 	addi	r17,sp,16
 1017a58:	2005883a 	mov	r2,r4
 1017a5c:	2807883a 	mov	r3,r5
 1017a60:	dc000e15 	stw	r16,56(sp)
 1017a64:	d809883a 	mov	r4,sp
 1017a68:	880b883a 	mov	r5,r17
 1017a6c:	dc000904 	addi	r16,sp,36
 1017a70:	d8c00115 	stw	r3,4(sp)
 1017a74:	d8800015 	stw	r2,0(sp)
 1017a78:	d9800215 	stw	r6,8(sp)
 1017a7c:	dfc01015 	stw	ra,64(sp)
 1017a80:	d9c00315 	stw	r7,12(sp)
 1017a84:	10184380 	call	1018438 <__unpack_d>
 1017a88:	d9000204 	addi	r4,sp,8
 1017a8c:	800b883a 	mov	r5,r16
 1017a90:	10184380 	call	1018438 <__unpack_d>
 1017a94:	d8800417 	ldw	r2,16(sp)
 1017a98:	00c00044 	movi	r3,1
 1017a9c:	01bfffc4 	movi	r6,-1
 1017aa0:	1880062e 	bgeu	r3,r2,1017abc <__gedf2+0x70>
 1017aa4:	d8800917 	ldw	r2,36(sp)
 1017aa8:	8809883a 	mov	r4,r17
 1017aac:	800b883a 	mov	r5,r16
 1017ab0:	1880022e 	bgeu	r3,r2,1017abc <__gedf2+0x70>
 1017ab4:	10185700 	call	1018570 <__fpcmp_parts_d>
 1017ab8:	100d883a 	mov	r6,r2
 1017abc:	3005883a 	mov	r2,r6
 1017ac0:	dfc01017 	ldw	ra,64(sp)
 1017ac4:	dc400f17 	ldw	r17,60(sp)
 1017ac8:	dc000e17 	ldw	r16,56(sp)
 1017acc:	dec01104 	addi	sp,sp,68
 1017ad0:	f800283a 	ret

01017ad4 <__ltdf2>:
 1017ad4:	deffef04 	addi	sp,sp,-68
 1017ad8:	dc400f15 	stw	r17,60(sp)
 1017adc:	dc400404 	addi	r17,sp,16
 1017ae0:	2005883a 	mov	r2,r4
 1017ae4:	2807883a 	mov	r3,r5
 1017ae8:	dc000e15 	stw	r16,56(sp)
 1017aec:	d809883a 	mov	r4,sp
 1017af0:	880b883a 	mov	r5,r17
 1017af4:	dc000904 	addi	r16,sp,36
 1017af8:	d8c00115 	stw	r3,4(sp)
 1017afc:	d8800015 	stw	r2,0(sp)
 1017b00:	d9800215 	stw	r6,8(sp)
 1017b04:	dfc01015 	stw	ra,64(sp)
 1017b08:	d9c00315 	stw	r7,12(sp)
 1017b0c:	10184380 	call	1018438 <__unpack_d>
 1017b10:	d9000204 	addi	r4,sp,8
 1017b14:	800b883a 	mov	r5,r16
 1017b18:	10184380 	call	1018438 <__unpack_d>
 1017b1c:	d8800417 	ldw	r2,16(sp)
 1017b20:	00c00044 	movi	r3,1
 1017b24:	180d883a 	mov	r6,r3
 1017b28:	1880062e 	bgeu	r3,r2,1017b44 <__ltdf2+0x70>
 1017b2c:	d8800917 	ldw	r2,36(sp)
 1017b30:	8809883a 	mov	r4,r17
 1017b34:	800b883a 	mov	r5,r16
 1017b38:	1880022e 	bgeu	r3,r2,1017b44 <__ltdf2+0x70>
 1017b3c:	10185700 	call	1018570 <__fpcmp_parts_d>
 1017b40:	100d883a 	mov	r6,r2
 1017b44:	3005883a 	mov	r2,r6
 1017b48:	dfc01017 	ldw	ra,64(sp)
 1017b4c:	dc400f17 	ldw	r17,60(sp)
 1017b50:	dc000e17 	ldw	r16,56(sp)
 1017b54:	dec01104 	addi	sp,sp,68
 1017b58:	f800283a 	ret

01017b5c <__floatsidf>:
 1017b5c:	2006d7fa 	srli	r3,r4,31
 1017b60:	defff604 	addi	sp,sp,-40
 1017b64:	008000c4 	movi	r2,3
 1017b68:	dfc00915 	stw	ra,36(sp)
 1017b6c:	dcc00815 	stw	r19,32(sp)
 1017b70:	dc800715 	stw	r18,28(sp)
 1017b74:	dc400615 	stw	r17,24(sp)
 1017b78:	dc000515 	stw	r16,20(sp)
 1017b7c:	d8800015 	stw	r2,0(sp)
 1017b80:	d8c00115 	stw	r3,4(sp)
 1017b84:	20000f1e 	bne	r4,zero,1017bc4 <__floatsidf+0x68>
 1017b88:	00800084 	movi	r2,2
 1017b8c:	d8800015 	stw	r2,0(sp)
 1017b90:	d809883a 	mov	r4,sp
 1017b94:	10181240 	call	1018124 <__pack_d>
 1017b98:	1009883a 	mov	r4,r2
 1017b9c:	180b883a 	mov	r5,r3
 1017ba0:	2005883a 	mov	r2,r4
 1017ba4:	2807883a 	mov	r3,r5
 1017ba8:	dfc00917 	ldw	ra,36(sp)
 1017bac:	dcc00817 	ldw	r19,32(sp)
 1017bb0:	dc800717 	ldw	r18,28(sp)
 1017bb4:	dc400617 	ldw	r17,24(sp)
 1017bb8:	dc000517 	ldw	r16,20(sp)
 1017bbc:	dec00a04 	addi	sp,sp,40
 1017bc0:	f800283a 	ret
 1017bc4:	00800f04 	movi	r2,60
 1017bc8:	1807003a 	cmpeq	r3,r3,zero
 1017bcc:	d8800215 	stw	r2,8(sp)
 1017bd0:	18001126 	beq	r3,zero,1017c18 <__floatsidf+0xbc>
 1017bd4:	0027883a 	mov	r19,zero
 1017bd8:	2025883a 	mov	r18,r4
 1017bdc:	d9000315 	stw	r4,12(sp)
 1017be0:	dcc00415 	stw	r19,16(sp)
 1017be4:	10180a40 	call	10180a4 <__clzsi2>
 1017be8:	11000744 	addi	r4,r2,29
 1017bec:	013fe80e 	bge	zero,r4,1017b90 <__floatsidf+0x34>
 1017bf0:	10bfff44 	addi	r2,r2,-3
 1017bf4:	10000c16 	blt	r2,zero,1017c28 <__floatsidf+0xcc>
 1017bf8:	90a2983a 	sll	r17,r18,r2
 1017bfc:	0021883a 	mov	r16,zero
 1017c00:	d8800217 	ldw	r2,8(sp)
 1017c04:	dc400415 	stw	r17,16(sp)
 1017c08:	dc000315 	stw	r16,12(sp)
 1017c0c:	1105c83a 	sub	r2,r2,r4
 1017c10:	d8800215 	stw	r2,8(sp)
 1017c14:	003fde06 	br	1017b90 <__floatsidf+0x34>
 1017c18:	00a00034 	movhi	r2,32768
 1017c1c:	20800a26 	beq	r4,r2,1017c48 <__floatsidf+0xec>
 1017c20:	0109c83a 	sub	r4,zero,r4
 1017c24:	003feb06 	br	1017bd4 <__floatsidf+0x78>
 1017c28:	9006d07a 	srli	r3,r18,1
 1017c2c:	008007c4 	movi	r2,31
 1017c30:	1105c83a 	sub	r2,r2,r4
 1017c34:	1886d83a 	srl	r3,r3,r2
 1017c38:	9922983a 	sll	r17,r19,r4
 1017c3c:	9120983a 	sll	r16,r18,r4
 1017c40:	1c62b03a 	or	r17,r3,r17
 1017c44:	003fee06 	br	1017c00 <__floatsidf+0xa4>
 1017c48:	0009883a 	mov	r4,zero
 1017c4c:	01707834 	movhi	r5,49632
 1017c50:	003fd306 	br	1017ba0 <__floatsidf+0x44>

01017c54 <__fixdfsi>:
 1017c54:	defff804 	addi	sp,sp,-32
 1017c58:	2005883a 	mov	r2,r4
 1017c5c:	2807883a 	mov	r3,r5
 1017c60:	d809883a 	mov	r4,sp
 1017c64:	d9400204 	addi	r5,sp,8
 1017c68:	d8c00115 	stw	r3,4(sp)
 1017c6c:	d8800015 	stw	r2,0(sp)
 1017c70:	dfc00715 	stw	ra,28(sp)
 1017c74:	10184380 	call	1018438 <__unpack_d>
 1017c78:	d8c00217 	ldw	r3,8(sp)
 1017c7c:	00800084 	movi	r2,2
 1017c80:	1880051e 	bne	r3,r2,1017c98 <__fixdfsi+0x44>
 1017c84:	0007883a 	mov	r3,zero
 1017c88:	1805883a 	mov	r2,r3
 1017c8c:	dfc00717 	ldw	ra,28(sp)
 1017c90:	dec00804 	addi	sp,sp,32
 1017c94:	f800283a 	ret
 1017c98:	00800044 	movi	r2,1
 1017c9c:	10fff92e 	bgeu	r2,r3,1017c84 <__fixdfsi+0x30>
 1017ca0:	00800104 	movi	r2,4
 1017ca4:	18800426 	beq	r3,r2,1017cb8 <__fixdfsi+0x64>
 1017ca8:	d8c00417 	ldw	r3,16(sp)
 1017cac:	183ff516 	blt	r3,zero,1017c84 <__fixdfsi+0x30>
 1017cb0:	00800784 	movi	r2,30
 1017cb4:	10c0080e 	bge	r2,r3,1017cd8 <__fixdfsi+0x84>
 1017cb8:	d8800317 	ldw	r2,12(sp)
 1017cbc:	1000121e 	bne	r2,zero,1017d08 <__fixdfsi+0xb4>
 1017cc0:	00e00034 	movhi	r3,32768
 1017cc4:	18ffffc4 	addi	r3,r3,-1
 1017cc8:	1805883a 	mov	r2,r3
 1017ccc:	dfc00717 	ldw	ra,28(sp)
 1017cd0:	dec00804 	addi	sp,sp,32
 1017cd4:	f800283a 	ret
 1017cd8:	00800f04 	movi	r2,60
 1017cdc:	10d1c83a 	sub	r8,r2,r3
 1017ce0:	40bff804 	addi	r2,r8,-32
 1017ce4:	d9800517 	ldw	r6,20(sp)
 1017ce8:	d9c00617 	ldw	r7,24(sp)
 1017cec:	10000816 	blt	r2,zero,1017d10 <__fixdfsi+0xbc>
 1017cf0:	3888d83a 	srl	r4,r7,r2
 1017cf4:	d8800317 	ldw	r2,12(sp)
 1017cf8:	2007883a 	mov	r3,r4
 1017cfc:	103fe226 	beq	r2,zero,1017c88 <__fixdfsi+0x34>
 1017d00:	0107c83a 	sub	r3,zero,r4
 1017d04:	003fe006 	br	1017c88 <__fixdfsi+0x34>
 1017d08:	00e00034 	movhi	r3,32768
 1017d0c:	003fde06 	br	1017c88 <__fixdfsi+0x34>
 1017d10:	39c7883a 	add	r3,r7,r7
 1017d14:	008007c4 	movi	r2,31
 1017d18:	1205c83a 	sub	r2,r2,r8
 1017d1c:	1886983a 	sll	r3,r3,r2
 1017d20:	3208d83a 	srl	r4,r6,r8
 1017d24:	1908b03a 	or	r4,r3,r4
 1017d28:	003ff206 	br	1017cf4 <__fixdfsi+0xa0>

01017d2c <__floatunsidf>:
 1017d2c:	defff204 	addi	sp,sp,-56
 1017d30:	dfc00d15 	stw	ra,52(sp)
 1017d34:	ddc00c15 	stw	r23,48(sp)
 1017d38:	dd800b15 	stw	r22,44(sp)
 1017d3c:	dd400a15 	stw	r21,40(sp)
 1017d40:	dd000915 	stw	r20,36(sp)
 1017d44:	dcc00815 	stw	r19,32(sp)
 1017d48:	dc800715 	stw	r18,28(sp)
 1017d4c:	dc400615 	stw	r17,24(sp)
 1017d50:	dc000515 	stw	r16,20(sp)
 1017d54:	d8000115 	stw	zero,4(sp)
 1017d58:	20000f1e 	bne	r4,zero,1017d98 <__floatunsidf+0x6c>
 1017d5c:	00800084 	movi	r2,2
 1017d60:	d8800015 	stw	r2,0(sp)
 1017d64:	d809883a 	mov	r4,sp
 1017d68:	10181240 	call	1018124 <__pack_d>
 1017d6c:	dfc00d17 	ldw	ra,52(sp)
 1017d70:	ddc00c17 	ldw	r23,48(sp)
 1017d74:	dd800b17 	ldw	r22,44(sp)
 1017d78:	dd400a17 	ldw	r21,40(sp)
 1017d7c:	dd000917 	ldw	r20,36(sp)
 1017d80:	dcc00817 	ldw	r19,32(sp)
 1017d84:	dc800717 	ldw	r18,28(sp)
 1017d88:	dc400617 	ldw	r17,24(sp)
 1017d8c:	dc000517 	ldw	r16,20(sp)
 1017d90:	dec00e04 	addi	sp,sp,56
 1017d94:	f800283a 	ret
 1017d98:	008000c4 	movi	r2,3
 1017d9c:	00c00f04 	movi	r3,60
 1017da0:	002f883a 	mov	r23,zero
 1017da4:	202d883a 	mov	r22,r4
 1017da8:	d8800015 	stw	r2,0(sp)
 1017dac:	d8c00215 	stw	r3,8(sp)
 1017db0:	d9000315 	stw	r4,12(sp)
 1017db4:	ddc00415 	stw	r23,16(sp)
 1017db8:	10180a40 	call	10180a4 <__clzsi2>
 1017dbc:	12400744 	addi	r9,r2,29
 1017dc0:	48000b16 	blt	r9,zero,1017df0 <__floatunsidf+0xc4>
 1017dc4:	483fe726 	beq	r9,zero,1017d64 <__floatunsidf+0x38>
 1017dc8:	10bfff44 	addi	r2,r2,-3
 1017dcc:	10002e16 	blt	r2,zero,1017e88 <__floatunsidf+0x15c>
 1017dd0:	b0a2983a 	sll	r17,r22,r2
 1017dd4:	0021883a 	mov	r16,zero
 1017dd8:	d8800217 	ldw	r2,8(sp)
 1017ddc:	dc400415 	stw	r17,16(sp)
 1017de0:	dc000315 	stw	r16,12(sp)
 1017de4:	1245c83a 	sub	r2,r2,r9
 1017de8:	d8800215 	stw	r2,8(sp)
 1017dec:	003fdd06 	br	1017d64 <__floatunsidf+0x38>
 1017df0:	0255c83a 	sub	r10,zero,r9
 1017df4:	51bff804 	addi	r6,r10,-32
 1017df8:	30001b16 	blt	r6,zero,1017e68 <__floatunsidf+0x13c>
 1017dfc:	b9a8d83a 	srl	r20,r23,r6
 1017e00:	002b883a 	mov	r21,zero
 1017e04:	000f883a 	mov	r7,zero
 1017e08:	01000044 	movi	r4,1
 1017e0c:	0011883a 	mov	r8,zero
 1017e10:	30002516 	blt	r6,zero,1017ea8 <__floatunsidf+0x17c>
 1017e14:	21a6983a 	sll	r19,r4,r6
 1017e18:	0025883a 	mov	r18,zero
 1017e1c:	00bfffc4 	movi	r2,-1
 1017e20:	9089883a 	add	r4,r18,r2
 1017e24:	988b883a 	add	r5,r19,r2
 1017e28:	248d803a 	cmpltu	r6,r4,r18
 1017e2c:	314b883a 	add	r5,r6,r5
 1017e30:	b104703a 	and	r2,r22,r4
 1017e34:	b946703a 	and	r3,r23,r5
 1017e38:	10c4b03a 	or	r2,r2,r3
 1017e3c:	10000226 	beq	r2,zero,1017e48 <__floatunsidf+0x11c>
 1017e40:	01c00044 	movi	r7,1
 1017e44:	0011883a 	mov	r8,zero
 1017e48:	d9000217 	ldw	r4,8(sp)
 1017e4c:	a1c4b03a 	or	r2,r20,r7
 1017e50:	aa06b03a 	or	r3,r21,r8
 1017e54:	2249c83a 	sub	r4,r4,r9
 1017e58:	d8c00415 	stw	r3,16(sp)
 1017e5c:	d9000215 	stw	r4,8(sp)
 1017e60:	d8800315 	stw	r2,12(sp)
 1017e64:	003fbf06 	br	1017d64 <__floatunsidf+0x38>
 1017e68:	bdc7883a 	add	r3,r23,r23
 1017e6c:	008007c4 	movi	r2,31
 1017e70:	1285c83a 	sub	r2,r2,r10
 1017e74:	1886983a 	sll	r3,r3,r2
 1017e78:	b2a8d83a 	srl	r20,r22,r10
 1017e7c:	baaad83a 	srl	r21,r23,r10
 1017e80:	1d28b03a 	or	r20,r3,r20
 1017e84:	003fdf06 	br	1017e04 <__floatunsidf+0xd8>
 1017e88:	b006d07a 	srli	r3,r22,1
 1017e8c:	008007c4 	movi	r2,31
 1017e90:	1245c83a 	sub	r2,r2,r9
 1017e94:	1886d83a 	srl	r3,r3,r2
 1017e98:	ba62983a 	sll	r17,r23,r9
 1017e9c:	b260983a 	sll	r16,r22,r9
 1017ea0:	1c62b03a 	or	r17,r3,r17
 1017ea4:	003fcc06 	br	1017dd8 <__floatunsidf+0xac>
 1017ea8:	2006d07a 	srli	r3,r4,1
 1017eac:	008007c4 	movi	r2,31
 1017eb0:	1285c83a 	sub	r2,r2,r10
 1017eb4:	18a6d83a 	srl	r19,r3,r2
 1017eb8:	22a4983a 	sll	r18,r4,r10
 1017ebc:	003fd706 	br	1017e1c <__floatunsidf+0xf0>

01017ec0 <udivmodsi4>:
 1017ec0:	29001b2e 	bgeu	r5,r4,1017f30 <udivmodsi4+0x70>
 1017ec4:	28001a16 	blt	r5,zero,1017f30 <udivmodsi4+0x70>
 1017ec8:	00800044 	movi	r2,1
 1017ecc:	0007883a 	mov	r3,zero
 1017ed0:	01c007c4 	movi	r7,31
 1017ed4:	00000306 	br	1017ee4 <udivmodsi4+0x24>
 1017ed8:	19c01326 	beq	r3,r7,1017f28 <udivmodsi4+0x68>
 1017edc:	18c00044 	addi	r3,r3,1
 1017ee0:	28000416 	blt	r5,zero,1017ef4 <udivmodsi4+0x34>
 1017ee4:	294b883a 	add	r5,r5,r5
 1017ee8:	1085883a 	add	r2,r2,r2
 1017eec:	293ffa36 	bltu	r5,r4,1017ed8 <udivmodsi4+0x18>
 1017ef0:	10000d26 	beq	r2,zero,1017f28 <udivmodsi4+0x68>
 1017ef4:	0007883a 	mov	r3,zero
 1017ef8:	21400236 	bltu	r4,r5,1017f04 <udivmodsi4+0x44>
 1017efc:	2149c83a 	sub	r4,r4,r5
 1017f00:	1886b03a 	or	r3,r3,r2
 1017f04:	1004d07a 	srli	r2,r2,1
 1017f08:	280ad07a 	srli	r5,r5,1
 1017f0c:	103ffa1e 	bne	r2,zero,1017ef8 <udivmodsi4+0x38>
 1017f10:	30000226 	beq	r6,zero,1017f1c <udivmodsi4+0x5c>
 1017f14:	2005883a 	mov	r2,r4
 1017f18:	f800283a 	ret
 1017f1c:	1809883a 	mov	r4,r3
 1017f20:	2005883a 	mov	r2,r4
 1017f24:	f800283a 	ret
 1017f28:	0007883a 	mov	r3,zero
 1017f2c:	003ff806 	br	1017f10 <udivmodsi4+0x50>
 1017f30:	00800044 	movi	r2,1
 1017f34:	0007883a 	mov	r3,zero
 1017f38:	003fef06 	br	1017ef8 <udivmodsi4+0x38>

01017f3c <__divsi3>:
 1017f3c:	defffe04 	addi	sp,sp,-8
 1017f40:	dc000015 	stw	r16,0(sp)
 1017f44:	dfc00115 	stw	ra,4(sp)
 1017f48:	0021883a 	mov	r16,zero
 1017f4c:	20000c16 	blt	r4,zero,1017f80 <__divsi3+0x44>
 1017f50:	000d883a 	mov	r6,zero
 1017f54:	28000e16 	blt	r5,zero,1017f90 <__divsi3+0x54>
 1017f58:	1017ec00 	call	1017ec0 <udivmodsi4>
 1017f5c:	1007883a 	mov	r3,r2
 1017f60:	8005003a 	cmpeq	r2,r16,zero
 1017f64:	1000011e 	bne	r2,zero,1017f6c <__divsi3+0x30>
 1017f68:	00c7c83a 	sub	r3,zero,r3
 1017f6c:	1805883a 	mov	r2,r3
 1017f70:	dfc00117 	ldw	ra,4(sp)
 1017f74:	dc000017 	ldw	r16,0(sp)
 1017f78:	dec00204 	addi	sp,sp,8
 1017f7c:	f800283a 	ret
 1017f80:	0109c83a 	sub	r4,zero,r4
 1017f84:	04000044 	movi	r16,1
 1017f88:	000d883a 	mov	r6,zero
 1017f8c:	283ff20e 	bge	r5,zero,1017f58 <__divsi3+0x1c>
 1017f90:	014bc83a 	sub	r5,zero,r5
 1017f94:	8021003a 	cmpeq	r16,r16,zero
 1017f98:	003fef06 	br	1017f58 <__divsi3+0x1c>

01017f9c <__modsi3>:
 1017f9c:	deffff04 	addi	sp,sp,-4
 1017fa0:	dfc00015 	stw	ra,0(sp)
 1017fa4:	01800044 	movi	r6,1
 1017fa8:	2807883a 	mov	r3,r5
 1017fac:	20000416 	blt	r4,zero,1017fc0 <__modsi3+0x24>
 1017fb0:	28000c16 	blt	r5,zero,1017fe4 <__modsi3+0x48>
 1017fb4:	dfc00017 	ldw	ra,0(sp)
 1017fb8:	dec00104 	addi	sp,sp,4
 1017fbc:	1017ec01 	jmpi	1017ec0 <udivmodsi4>
 1017fc0:	0109c83a 	sub	r4,zero,r4
 1017fc4:	28000b16 	blt	r5,zero,1017ff4 <__modsi3+0x58>
 1017fc8:	180b883a 	mov	r5,r3
 1017fcc:	01800044 	movi	r6,1
 1017fd0:	1017ec00 	call	1017ec0 <udivmodsi4>
 1017fd4:	0085c83a 	sub	r2,zero,r2
 1017fd8:	dfc00017 	ldw	ra,0(sp)
 1017fdc:	dec00104 	addi	sp,sp,4
 1017fe0:	f800283a 	ret
 1017fe4:	014bc83a 	sub	r5,zero,r5
 1017fe8:	dfc00017 	ldw	ra,0(sp)
 1017fec:	dec00104 	addi	sp,sp,4
 1017ff0:	1017ec01 	jmpi	1017ec0 <udivmodsi4>
 1017ff4:	0147c83a 	sub	r3,zero,r5
 1017ff8:	003ff306 	br	1017fc8 <__modsi3+0x2c>

01017ffc <__udivsi3>:
 1017ffc:	000d883a 	mov	r6,zero
 1018000:	1017ec01 	jmpi	1017ec0 <udivmodsi4>

01018004 <__umodsi3>:
 1018004:	01800044 	movi	r6,1
 1018008:	1017ec01 	jmpi	1017ec0 <udivmodsi4>

0101800c <__muldi3>:
 101800c:	2011883a 	mov	r8,r4
 1018010:	427fffcc 	andi	r9,r8,65535
 1018014:	4018d43a 	srli	r12,r8,16
 1018018:	32bfffcc 	andi	r10,r6,65535
 101801c:	3016d43a 	srli	r11,r6,16
 1018020:	4a85383a 	mul	r2,r9,r10
 1018024:	6295383a 	mul	r10,r12,r10
 1018028:	4ad3383a 	mul	r9,r9,r11
 101802c:	113fffcc 	andi	r4,r2,65535
 1018030:	1004d43a 	srli	r2,r2,16
 1018034:	4a93883a 	add	r9,r9,r10
 1018038:	3807883a 	mov	r3,r7
 101803c:	1245883a 	add	r2,r2,r9
 1018040:	280f883a 	mov	r7,r5
 1018044:	180b883a 	mov	r5,r3
 1018048:	1006943a 	slli	r3,r2,16
 101804c:	defffd04 	addi	sp,sp,-12
 1018050:	dc800215 	stw	r18,8(sp)
 1018054:	1907883a 	add	r3,r3,r4
 1018058:	dc400115 	stw	r17,4(sp)
 101805c:	dc000015 	stw	r16,0(sp)
 1018060:	4165383a 	mul	r18,r8,r5
 1018064:	31e3383a 	mul	r17,r6,r7
 1018068:	1012d43a 	srli	r9,r2,16
 101806c:	62d9383a 	mul	r12,r12,r11
 1018070:	181f883a 	mov	r15,r3
 1018074:	1280022e 	bgeu	r2,r10,1018080 <__muldi3+0x74>
 1018078:	00800074 	movhi	r2,1
 101807c:	6099883a 	add	r12,r12,r2
 1018080:	624d883a 	add	r6,r12,r9
 1018084:	9187883a 	add	r3,r18,r6
 1018088:	88c7883a 	add	r3,r17,r3
 101808c:	7805883a 	mov	r2,r15
 1018090:	dc800217 	ldw	r18,8(sp)
 1018094:	dc400117 	ldw	r17,4(sp)
 1018098:	dc000017 	ldw	r16,0(sp)
 101809c:	dec00304 	addi	sp,sp,12
 10180a0:	f800283a 	ret

010180a4 <__clzsi2>:
 10180a4:	00bfffd4 	movui	r2,65535
 10180a8:	11000e36 	bltu	r2,r4,10180e4 <__clzsi2+0x40>
 10180ac:	00803fc4 	movi	r2,255
 10180b0:	01400204 	movi	r5,8
 10180b4:	0007883a 	mov	r3,zero
 10180b8:	11001036 	bltu	r2,r4,10180fc <__clzsi2+0x58>
 10180bc:	000b883a 	mov	r5,zero
 10180c0:	20c6d83a 	srl	r3,r4,r3
 10180c4:	008040b4 	movhi	r2,258
 10180c8:	1097da04 	addi	r2,r2,24424
 10180cc:	1887883a 	add	r3,r3,r2
 10180d0:	18800003 	ldbu	r2,0(r3)
 10180d4:	00c00804 	movi	r3,32
 10180d8:	2885883a 	add	r2,r5,r2
 10180dc:	1885c83a 	sub	r2,r3,r2
 10180e0:	f800283a 	ret
 10180e4:	01400404 	movi	r5,16
 10180e8:	00804034 	movhi	r2,256
 10180ec:	10bfffc4 	addi	r2,r2,-1
 10180f0:	2807883a 	mov	r3,r5
 10180f4:	113ff22e 	bgeu	r2,r4,10180c0 <__clzsi2+0x1c>
 10180f8:	01400604 	movi	r5,24
 10180fc:	2807883a 	mov	r3,r5
 1018100:	20c6d83a 	srl	r3,r4,r3
 1018104:	008040b4 	movhi	r2,258
 1018108:	1097da04 	addi	r2,r2,24424
 101810c:	1887883a 	add	r3,r3,r2
 1018110:	18800003 	ldbu	r2,0(r3)
 1018114:	00c00804 	movi	r3,32
 1018118:	2885883a 	add	r2,r5,r2
 101811c:	1885c83a 	sub	r2,r3,r2
 1018120:	f800283a 	ret

01018124 <__pack_d>:
 1018124:	20c00017 	ldw	r3,0(r4)
 1018128:	defffd04 	addi	sp,sp,-12
 101812c:	dc000015 	stw	r16,0(sp)
 1018130:	dc800215 	stw	r18,8(sp)
 1018134:	dc400115 	stw	r17,4(sp)
 1018138:	00800044 	movi	r2,1
 101813c:	22000317 	ldw	r8,12(r4)
 1018140:	001f883a 	mov	r15,zero
 1018144:	22400417 	ldw	r9,16(r4)
 1018148:	24000117 	ldw	r16,4(r4)
 101814c:	10c0552e 	bgeu	r2,r3,10182a4 <__pack_d+0x180>
 1018150:	00800104 	movi	r2,4
 1018154:	18804f26 	beq	r3,r2,1018294 <__pack_d+0x170>
 1018158:	00800084 	movi	r2,2
 101815c:	18800226 	beq	r3,r2,1018168 <__pack_d+0x44>
 1018160:	4244b03a 	or	r2,r8,r9
 1018164:	10001a1e 	bne	r2,zero,10181d0 <__pack_d+0xac>
 1018168:	000d883a 	mov	r6,zero
 101816c:	000f883a 	mov	r7,zero
 1018170:	0011883a 	mov	r8,zero
 1018174:	00800434 	movhi	r2,16
 1018178:	10bfffc4 	addi	r2,r2,-1
 101817c:	301d883a 	mov	r14,r6
 1018180:	3884703a 	and	r2,r7,r2
 1018184:	400a953a 	slli	r5,r8,20
 1018188:	79bffc2c 	andhi	r6,r15,65520
 101818c:	308cb03a 	or	r6,r6,r2
 1018190:	00e00434 	movhi	r3,32784
 1018194:	18ffffc4 	addi	r3,r3,-1
 1018198:	800497fa 	slli	r2,r16,31
 101819c:	30c6703a 	and	r3,r6,r3
 10181a0:	1946b03a 	or	r3,r3,r5
 10181a4:	01600034 	movhi	r5,32768
 10181a8:	297fffc4 	addi	r5,r5,-1
 10181ac:	194a703a 	and	r5,r3,r5
 10181b0:	288ab03a 	or	r5,r5,r2
 10181b4:	2807883a 	mov	r3,r5
 10181b8:	7005883a 	mov	r2,r14
 10181bc:	dc800217 	ldw	r18,8(sp)
 10181c0:	dc400117 	ldw	r17,4(sp)
 10181c4:	dc000017 	ldw	r16,0(sp)
 10181c8:	dec00304 	addi	sp,sp,12
 10181cc:	f800283a 	ret
 10181d0:	21000217 	ldw	r4,8(r4)
 10181d4:	00bf0084 	movi	r2,-1022
 10181d8:	20803f16 	blt	r4,r2,10182d8 <__pack_d+0x1b4>
 10181dc:	0080ffc4 	movi	r2,1023
 10181e0:	11002c16 	blt	r2,r4,1018294 <__pack_d+0x170>
 10181e4:	00803fc4 	movi	r2,255
 10181e8:	408c703a 	and	r6,r8,r2
 10181ec:	00802004 	movi	r2,128
 10181f0:	0007883a 	mov	r3,zero
 10181f4:	000f883a 	mov	r7,zero
 10181f8:	2280ffc4 	addi	r10,r4,1023
 10181fc:	30801e26 	beq	r6,r2,1018278 <__pack_d+0x154>
 1018200:	00801fc4 	movi	r2,127
 1018204:	4089883a 	add	r4,r8,r2
 1018208:	220d803a 	cmpltu	r6,r4,r8
 101820c:	324d883a 	add	r6,r6,r9
 1018210:	2011883a 	mov	r8,r4
 1018214:	3013883a 	mov	r9,r6
 1018218:	00880034 	movhi	r2,8192
 101821c:	10bfffc4 	addi	r2,r2,-1
 1018220:	12400d36 	bltu	r2,r9,1018258 <__pack_d+0x134>
 1018224:	4804963a 	slli	r2,r9,24
 1018228:	400cd23a 	srli	r6,r8,8
 101822c:	480ed23a 	srli	r7,r9,8
 1018230:	013fffc4 	movi	r4,-1
 1018234:	118cb03a 	or	r6,r2,r6
 1018238:	01400434 	movhi	r5,16
 101823c:	297fffc4 	addi	r5,r5,-1
 1018240:	3104703a 	and	r2,r6,r4
 1018244:	3946703a 	and	r3,r7,r5
 1018248:	5201ffcc 	andi	r8,r10,2047
 101824c:	100d883a 	mov	r6,r2
 1018250:	180f883a 	mov	r7,r3
 1018254:	003fc706 	br	1018174 <__pack_d+0x50>
 1018258:	480897fa 	slli	r4,r9,31
 101825c:	4004d07a 	srli	r2,r8,1
 1018260:	4806d07a 	srli	r3,r9,1
 1018264:	52800044 	addi	r10,r10,1
 1018268:	2084b03a 	or	r2,r4,r2
 101826c:	1011883a 	mov	r8,r2
 1018270:	1813883a 	mov	r9,r3
 1018274:	003feb06 	br	1018224 <__pack_d+0x100>
 1018278:	383fe11e 	bne	r7,zero,1018200 <__pack_d+0xdc>
 101827c:	01004004 	movi	r4,256
 1018280:	4104703a 	and	r2,r8,r4
 1018284:	10c4b03a 	or	r2,r2,r3
 1018288:	103fe326 	beq	r2,zero,1018218 <__pack_d+0xf4>
 101828c:	3005883a 	mov	r2,r6
 1018290:	003fdc06 	br	1018204 <__pack_d+0xe0>
 1018294:	000d883a 	mov	r6,zero
 1018298:	000f883a 	mov	r7,zero
 101829c:	0201ffc4 	movi	r8,2047
 10182a0:	003fb406 	br	1018174 <__pack_d+0x50>
 10182a4:	0005883a 	mov	r2,zero
 10182a8:	00c00234 	movhi	r3,8
 10182ac:	408cb03a 	or	r6,r8,r2
 10182b0:	48ceb03a 	or	r7,r9,r3
 10182b4:	013fffc4 	movi	r4,-1
 10182b8:	01400434 	movhi	r5,16
 10182bc:	297fffc4 	addi	r5,r5,-1
 10182c0:	3104703a 	and	r2,r6,r4
 10182c4:	3946703a 	and	r3,r7,r5
 10182c8:	100d883a 	mov	r6,r2
 10182cc:	180f883a 	mov	r7,r3
 10182d0:	0201ffc4 	movi	r8,2047
 10182d4:	003fa706 	br	1018174 <__pack_d+0x50>
 10182d8:	1109c83a 	sub	r4,r2,r4
 10182dc:	00800e04 	movi	r2,56
 10182e0:	11004316 	blt	r2,r4,10183f0 <__pack_d+0x2cc>
 10182e4:	21fff804 	addi	r7,r4,-32
 10182e8:	38004516 	blt	r7,zero,1018400 <__pack_d+0x2dc>
 10182ec:	49d8d83a 	srl	r12,r9,r7
 10182f0:	001b883a 	mov	r13,zero
 10182f4:	0023883a 	mov	r17,zero
 10182f8:	01400044 	movi	r5,1
 10182fc:	0025883a 	mov	r18,zero
 1018300:	38004716 	blt	r7,zero,1018420 <__pack_d+0x2fc>
 1018304:	29d6983a 	sll	r11,r5,r7
 1018308:	0015883a 	mov	r10,zero
 101830c:	00bfffc4 	movi	r2,-1
 1018310:	5089883a 	add	r4,r10,r2
 1018314:	588b883a 	add	r5,r11,r2
 1018318:	228d803a 	cmpltu	r6,r4,r10
 101831c:	314b883a 	add	r5,r6,r5
 1018320:	4104703a 	and	r2,r8,r4
 1018324:	4946703a 	and	r3,r9,r5
 1018328:	10c4b03a 	or	r2,r2,r3
 101832c:	10000226 	beq	r2,zero,1018338 <__pack_d+0x214>
 1018330:	04400044 	movi	r17,1
 1018334:	0025883a 	mov	r18,zero
 1018338:	00803fc4 	movi	r2,255
 101833c:	644eb03a 	or	r7,r12,r17
 1018340:	3892703a 	and	r9,r7,r2
 1018344:	00802004 	movi	r2,128
 1018348:	6c90b03a 	or	r8,r13,r18
 101834c:	0015883a 	mov	r10,zero
 1018350:	48801626 	beq	r9,r2,10183ac <__pack_d+0x288>
 1018354:	01001fc4 	movi	r4,127
 1018358:	3905883a 	add	r2,r7,r4
 101835c:	11cd803a 	cmpltu	r6,r2,r7
 1018360:	320d883a 	add	r6,r6,r8
 1018364:	100f883a 	mov	r7,r2
 1018368:	00840034 	movhi	r2,4096
 101836c:	10bfffc4 	addi	r2,r2,-1
 1018370:	3011883a 	mov	r8,r6
 1018374:	0007883a 	mov	r3,zero
 1018378:	11801b36 	bltu	r2,r6,10183e8 <__pack_d+0x2c4>
 101837c:	4004963a 	slli	r2,r8,24
 1018380:	3808d23a 	srli	r4,r7,8
 1018384:	400ad23a 	srli	r5,r8,8
 1018388:	1813883a 	mov	r9,r3
 101838c:	1108b03a 	or	r4,r2,r4
 1018390:	00bfffc4 	movi	r2,-1
 1018394:	00c00434 	movhi	r3,16
 1018398:	18ffffc4 	addi	r3,r3,-1
 101839c:	208c703a 	and	r6,r4,r2
 10183a0:	28ce703a 	and	r7,r5,r3
 10183a4:	4a01ffcc 	andi	r8,r9,2047
 10183a8:	003f7206 	br	1018174 <__pack_d+0x50>
 10183ac:	503fe91e 	bne	r10,zero,1018354 <__pack_d+0x230>
 10183b0:	01004004 	movi	r4,256
 10183b4:	3904703a 	and	r2,r7,r4
 10183b8:	0007883a 	mov	r3,zero
 10183bc:	10c4b03a 	or	r2,r2,r3
 10183c0:	10000626 	beq	r2,zero,10183dc <__pack_d+0x2b8>
 10183c4:	3a45883a 	add	r2,r7,r9
 10183c8:	11cd803a 	cmpltu	r6,r2,r7
 10183cc:	320d883a 	add	r6,r6,r8
 10183d0:	100f883a 	mov	r7,r2
 10183d4:	3011883a 	mov	r8,r6
 10183d8:	0007883a 	mov	r3,zero
 10183dc:	00840034 	movhi	r2,4096
 10183e0:	10bfffc4 	addi	r2,r2,-1
 10183e4:	123fe52e 	bgeu	r2,r8,101837c <__pack_d+0x258>
 10183e8:	00c00044 	movi	r3,1
 10183ec:	003fe306 	br	101837c <__pack_d+0x258>
 10183f0:	0009883a 	mov	r4,zero
 10183f4:	0013883a 	mov	r9,zero
 10183f8:	000b883a 	mov	r5,zero
 10183fc:	003fe406 	br	1018390 <__pack_d+0x26c>
 1018400:	4a47883a 	add	r3,r9,r9
 1018404:	008007c4 	movi	r2,31
 1018408:	1105c83a 	sub	r2,r2,r4
 101840c:	1886983a 	sll	r3,r3,r2
 1018410:	4118d83a 	srl	r12,r8,r4
 1018414:	491ad83a 	srl	r13,r9,r4
 1018418:	1b18b03a 	or	r12,r3,r12
 101841c:	003fb506 	br	10182f4 <__pack_d+0x1d0>
 1018420:	2806d07a 	srli	r3,r5,1
 1018424:	008007c4 	movi	r2,31
 1018428:	1105c83a 	sub	r2,r2,r4
 101842c:	1896d83a 	srl	r11,r3,r2
 1018430:	2914983a 	sll	r10,r5,r4
 1018434:	003fb506 	br	101830c <__pack_d+0x1e8>

01018438 <__unpack_d>:
 1018438:	20c00117 	ldw	r3,4(r4)
 101843c:	22400017 	ldw	r9,0(r4)
 1018440:	00800434 	movhi	r2,16
 1018444:	10bfffc4 	addi	r2,r2,-1
 1018448:	1808d53a 	srli	r4,r3,20
 101844c:	180cd7fa 	srli	r6,r3,31
 1018450:	1894703a 	and	r10,r3,r2
 1018454:	2201ffcc 	andi	r8,r4,2047
 1018458:	281b883a 	mov	r13,r5
 101845c:	4817883a 	mov	r11,r9
 1018460:	29800115 	stw	r6,4(r5)
 1018464:	5019883a 	mov	r12,r10
 1018468:	40001e1e 	bne	r8,zero,10184e4 <__unpack_d+0xac>
 101846c:	4a84b03a 	or	r2,r9,r10
 1018470:	10001926 	beq	r2,zero,10184d8 <__unpack_d+0xa0>
 1018474:	4804d63a 	srli	r2,r9,24
 1018478:	500c923a 	slli	r6,r10,8
 101847c:	013f0084 	movi	r4,-1022
 1018480:	00c40034 	movhi	r3,4096
 1018484:	18ffffc4 	addi	r3,r3,-1
 1018488:	118cb03a 	or	r6,r2,r6
 101848c:	008000c4 	movi	r2,3
 1018490:	480a923a 	slli	r5,r9,8
 1018494:	68800015 	stw	r2,0(r13)
 1018498:	69000215 	stw	r4,8(r13)
 101849c:	19800b36 	bltu	r3,r6,10184cc <__unpack_d+0x94>
 10184a0:	200f883a 	mov	r7,r4
 10184a4:	1811883a 	mov	r8,r3
 10184a8:	2945883a 	add	r2,r5,r5
 10184ac:	1149803a 	cmpltu	r4,r2,r5
 10184b0:	3187883a 	add	r3,r6,r6
 10184b4:	20c9883a 	add	r4,r4,r3
 10184b8:	100b883a 	mov	r5,r2
 10184bc:	200d883a 	mov	r6,r4
 10184c0:	39ffffc4 	addi	r7,r7,-1
 10184c4:	413ff82e 	bgeu	r8,r4,10184a8 <__unpack_d+0x70>
 10184c8:	69c00215 	stw	r7,8(r13)
 10184cc:	69800415 	stw	r6,16(r13)
 10184d0:	69400315 	stw	r5,12(r13)
 10184d4:	f800283a 	ret
 10184d8:	00800084 	movi	r2,2
 10184dc:	28800015 	stw	r2,0(r5)
 10184e0:	f800283a 	ret
 10184e4:	0081ffc4 	movi	r2,2047
 10184e8:	40800f26 	beq	r8,r2,1018528 <__unpack_d+0xf0>
 10184ec:	480cd63a 	srli	r6,r9,24
 10184f0:	5006923a 	slli	r3,r10,8
 10184f4:	4804923a 	slli	r2,r9,8
 10184f8:	0009883a 	mov	r4,zero
 10184fc:	30c6b03a 	or	r3,r6,r3
 1018500:	01440034 	movhi	r5,4096
 1018504:	110cb03a 	or	r6,r2,r4
 1018508:	423f0044 	addi	r8,r8,-1023
 101850c:	194eb03a 	or	r7,r3,r5
 1018510:	008000c4 	movi	r2,3
 1018514:	69c00415 	stw	r7,16(r13)
 1018518:	6a000215 	stw	r8,8(r13)
 101851c:	68800015 	stw	r2,0(r13)
 1018520:	69800315 	stw	r6,12(r13)
 1018524:	f800283a 	ret
 1018528:	4a84b03a 	or	r2,r9,r10
 101852c:	1000031e 	bne	r2,zero,101853c <__unpack_d+0x104>
 1018530:	00800104 	movi	r2,4
 1018534:	28800015 	stw	r2,0(r5)
 1018538:	f800283a 	ret
 101853c:	0009883a 	mov	r4,zero
 1018540:	01400234 	movhi	r5,8
 1018544:	4904703a 	and	r2,r9,r4
 1018548:	5146703a 	and	r3,r10,r5
 101854c:	10c4b03a 	or	r2,r2,r3
 1018550:	10000526 	beq	r2,zero,1018568 <__unpack_d+0x130>
 1018554:	00800044 	movi	r2,1
 1018558:	68800015 	stw	r2,0(r13)
 101855c:	6b000415 	stw	r12,16(r13)
 1018560:	6ac00315 	stw	r11,12(r13)
 1018564:	f800283a 	ret
 1018568:	68000015 	stw	zero,0(r13)
 101856c:	003ffb06 	br	101855c <__unpack_d+0x124>

01018570 <__fpcmp_parts_d>:
 1018570:	21800017 	ldw	r6,0(r4)
 1018574:	00c00044 	movi	r3,1
 1018578:	19800a2e 	bgeu	r3,r6,10185a4 <__fpcmp_parts_d+0x34>
 101857c:	28800017 	ldw	r2,0(r5)
 1018580:	1880082e 	bgeu	r3,r2,10185a4 <__fpcmp_parts_d+0x34>
 1018584:	00c00104 	movi	r3,4
 1018588:	30c02626 	beq	r6,r3,1018624 <__fpcmp_parts_d+0xb4>
 101858c:	10c02226 	beq	r2,r3,1018618 <__fpcmp_parts_d+0xa8>
 1018590:	00c00084 	movi	r3,2
 1018594:	30c00526 	beq	r6,r3,10185ac <__fpcmp_parts_d+0x3c>
 1018598:	10c0071e 	bne	r2,r3,10185b8 <__fpcmp_parts_d+0x48>
 101859c:	20800117 	ldw	r2,4(r4)
 10185a0:	1000091e 	bne	r2,zero,10185c8 <__fpcmp_parts_d+0x58>
 10185a4:	00800044 	movi	r2,1
 10185a8:	f800283a 	ret
 10185ac:	10c01a1e 	bne	r2,r3,1018618 <__fpcmp_parts_d+0xa8>
 10185b0:	0005883a 	mov	r2,zero
 10185b4:	f800283a 	ret
 10185b8:	22000117 	ldw	r8,4(r4)
 10185bc:	28800117 	ldw	r2,4(r5)
 10185c0:	40800326 	beq	r8,r2,10185d0 <__fpcmp_parts_d+0x60>
 10185c4:	403ff726 	beq	r8,zero,10185a4 <__fpcmp_parts_d+0x34>
 10185c8:	00bfffc4 	movi	r2,-1
 10185cc:	f800283a 	ret
 10185d0:	20c00217 	ldw	r3,8(r4)
 10185d4:	28800217 	ldw	r2,8(r5)
 10185d8:	10fffa16 	blt	r2,r3,10185c4 <__fpcmp_parts_d+0x54>
 10185dc:	18800916 	blt	r3,r2,1018604 <__fpcmp_parts_d+0x94>
 10185e0:	21c00417 	ldw	r7,16(r4)
 10185e4:	28c00417 	ldw	r3,16(r5)
 10185e8:	21800317 	ldw	r6,12(r4)
 10185ec:	28800317 	ldw	r2,12(r5)
 10185f0:	19fff436 	bltu	r3,r7,10185c4 <__fpcmp_parts_d+0x54>
 10185f4:	38c00526 	beq	r7,r3,101860c <__fpcmp_parts_d+0x9c>
 10185f8:	38c00236 	bltu	r7,r3,1018604 <__fpcmp_parts_d+0x94>
 10185fc:	19ffec1e 	bne	r3,r7,10185b0 <__fpcmp_parts_d+0x40>
 1018600:	30bfeb2e 	bgeu	r6,r2,10185b0 <__fpcmp_parts_d+0x40>
 1018604:	403fe71e 	bne	r8,zero,10185a4 <__fpcmp_parts_d+0x34>
 1018608:	003fef06 	br	10185c8 <__fpcmp_parts_d+0x58>
 101860c:	11bffa2e 	bgeu	r2,r6,10185f8 <__fpcmp_parts_d+0x88>
 1018610:	403fe426 	beq	r8,zero,10185a4 <__fpcmp_parts_d+0x34>
 1018614:	003fec06 	br	10185c8 <__fpcmp_parts_d+0x58>
 1018618:	28800117 	ldw	r2,4(r5)
 101861c:	103fe11e 	bne	r2,zero,10185a4 <__fpcmp_parts_d+0x34>
 1018620:	003fe906 	br	10185c8 <__fpcmp_parts_d+0x58>
 1018624:	11bfdd1e 	bne	r2,r6,101859c <__fpcmp_parts_d+0x2c>
 1018628:	28c00117 	ldw	r3,4(r5)
 101862c:	20800117 	ldw	r2,4(r4)
 1018630:	1885c83a 	sub	r2,r3,r2
 1018634:	f800283a 	ret

01018638 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1018638:	defff804 	addi	sp,sp,-32
 101863c:	dfc00715 	stw	ra,28(sp)
 1018640:	df000615 	stw	fp,24(sp)
 1018644:	df000604 	addi	fp,sp,24
 1018648:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 101864c:	e0bffc17 	ldw	r2,-16(fp)
 1018650:	1004803a 	cmplt	r2,r2,zero
 1018654:	1000081e 	bne	r2,zero,1018678 <close+0x40>
 1018658:	e0bffc17 	ldw	r2,-16(fp)
 101865c:	10800324 	muli	r2,r2,12
 1018660:	1007883a 	mov	r3,r2
 1018664:	008040b4 	movhi	r2,258
 1018668:	109a8a04 	addi	r2,r2,27176
 101866c:	1887883a 	add	r3,r3,r2
 1018670:	e0ffff15 	stw	r3,-4(fp)
 1018674:	00000106 	br	101867c <close+0x44>
 1018678:	e03fff15 	stw	zero,-4(fp)
 101867c:	e0bfff17 	ldw	r2,-4(fp)
 1018680:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1018684:	e0bffb17 	ldw	r2,-20(fp)
 1018688:	1005003a 	cmpeq	r2,r2,zero
 101868c:	10001d1e 	bne	r2,zero,1018704 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1018690:	e0bffb17 	ldw	r2,-20(fp)
 1018694:	10800017 	ldw	r2,0(r2)
 1018698:	10800417 	ldw	r2,16(r2)
 101869c:	1005003a 	cmpeq	r2,r2,zero
 10186a0:	1000071e 	bne	r2,zero,10186c0 <close+0x88>
 10186a4:	e0bffb17 	ldw	r2,-20(fp)
 10186a8:	10800017 	ldw	r2,0(r2)
 10186ac:	10800417 	ldw	r2,16(r2)
 10186b0:	e13ffb17 	ldw	r4,-20(fp)
 10186b4:	103ee83a 	callr	r2
 10186b8:	e0bffe15 	stw	r2,-8(fp)
 10186bc:	00000106 	br	10186c4 <close+0x8c>
 10186c0:	e03ffe15 	stw	zero,-8(fp)
 10186c4:	e0bffe17 	ldw	r2,-8(fp)
 10186c8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 10186cc:	e13ffc17 	ldw	r4,-16(fp)
 10186d0:	10190c40 	call	10190c4 <alt_release_fd>
    if (rval < 0)
 10186d4:	e0bffa17 	ldw	r2,-24(fp)
 10186d8:	1004403a 	cmpge	r2,r2,zero
 10186dc:	1000071e 	bne	r2,zero,10186fc <close+0xc4>
    {
      ALT_ERRNO = -rval;
 10186e0:	10187340 	call	1018734 <alt_get_errno>
 10186e4:	e0fffa17 	ldw	r3,-24(fp)
 10186e8:	00c7c83a 	sub	r3,zero,r3
 10186ec:	10c00015 	stw	r3,0(r2)
      return -1;
 10186f0:	00bfffc4 	movi	r2,-1
 10186f4:	e0bffd15 	stw	r2,-12(fp)
 10186f8:	00000806 	br	101871c <close+0xe4>
    }
    return 0;
 10186fc:	e03ffd15 	stw	zero,-12(fp)
 1018700:	00000606 	br	101871c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1018704:	10187340 	call	1018734 <alt_get_errno>
 1018708:	1007883a 	mov	r3,r2
 101870c:	00801444 	movi	r2,81
 1018710:	18800015 	stw	r2,0(r3)
    return -1;
 1018714:	00bfffc4 	movi	r2,-1
 1018718:	e0bffd15 	stw	r2,-12(fp)
 101871c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1018720:	e037883a 	mov	sp,fp
 1018724:	dfc00117 	ldw	ra,4(sp)
 1018728:	df000017 	ldw	fp,0(sp)
 101872c:	dec00204 	addi	sp,sp,8
 1018730:	f800283a 	ret

01018734 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018734:	defffd04 	addi	sp,sp,-12
 1018738:	dfc00215 	stw	ra,8(sp)
 101873c:	df000115 	stw	fp,4(sp)
 1018740:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018744:	008040b4 	movhi	r2,258
 1018748:	109f9404 	addi	r2,r2,32336
 101874c:	10800017 	ldw	r2,0(r2)
 1018750:	1005003a 	cmpeq	r2,r2,zero
 1018754:	1000061e 	bne	r2,zero,1018770 <alt_get_errno+0x3c>
 1018758:	008040b4 	movhi	r2,258
 101875c:	109f9404 	addi	r2,r2,32336
 1018760:	10800017 	ldw	r2,0(r2)
 1018764:	103ee83a 	callr	r2
 1018768:	e0bfff15 	stw	r2,-4(fp)
 101876c:	00000306 	br	101877c <alt_get_errno+0x48>
 1018770:	008040f4 	movhi	r2,259
 1018774:	10a70404 	addi	r2,r2,-25584
 1018778:	e0bfff15 	stw	r2,-4(fp)
 101877c:	e0bfff17 	ldw	r2,-4(fp)
}
 1018780:	e037883a 	mov	sp,fp
 1018784:	dfc00117 	ldw	ra,4(sp)
 1018788:	df000017 	ldw	fp,0(sp)
 101878c:	dec00204 	addi	sp,sp,8
 1018790:	f800283a 	ret

01018794 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1018794:	defffc04 	addi	sp,sp,-16
 1018798:	df000315 	stw	fp,12(sp)
 101879c:	df000304 	addi	fp,sp,12
 10187a0:	e13ffd15 	stw	r4,-12(fp)
 10187a4:	e17ffe15 	stw	r5,-8(fp)
 10187a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 10187ac:	e0bfff17 	ldw	r2,-4(fp)
}
 10187b0:	e037883a 	mov	sp,fp
 10187b4:	df000017 	ldw	fp,0(sp)
 10187b8:	dec00104 	addi	sp,sp,4
 10187bc:	f800283a 	ret

010187c0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 10187c0:	defffd04 	addi	sp,sp,-12
 10187c4:	df000215 	stw	fp,8(sp)
 10187c8:	df000204 	addi	fp,sp,8
 10187cc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 10187d0:	e0bfff17 	ldw	r2,-4(fp)
 10187d4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 10187d8:	e0bffe17 	ldw	r2,-8(fp)
 10187dc:	1005003a 	cmpeq	r2,r2,zero
 10187e0:	1000021e 	bne	r2,zero,10187ec <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 10187e4:	002af070 	cmpltui	zero,zero,43969
 10187e8:	00000106 	br	10187f0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 10187ec:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 10187f0:	e037883a 	mov	sp,fp
 10187f4:	df000017 	ldw	fp,0(sp)
 10187f8:	dec00104 	addi	sp,sp,4
 10187fc:	f800283a 	ret

01018800 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1018800:	defffd04 	addi	sp,sp,-12
 1018804:	dfc00215 	stw	ra,8(sp)
 1018808:	df000115 	stw	fp,4(sp)
 101880c:	df000104 	addi	fp,sp,4
 1018810:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1018814:	008040f4 	movhi	r2,259
 1018818:	10a71044 	addi	r2,r2,-25535
 101881c:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1018820:	e13fff17 	ldw	r4,-4(fp)
 1018824:	10187c00 	call	10187c0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1018828:	003fff06 	br	1018828 <_exit+0x28>

0101882c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 101882c:	defff904 	addi	sp,sp,-28
 1018830:	dfc00615 	stw	ra,24(sp)
 1018834:	df000515 	stw	fp,20(sp)
 1018838:	df000504 	addi	fp,sp,20
 101883c:	e13ffc15 	stw	r4,-16(fp)
 1018840:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1018844:	e0bffc17 	ldw	r2,-16(fp)
 1018848:	1004803a 	cmplt	r2,r2,zero
 101884c:	1000081e 	bne	r2,zero,1018870 <fstat+0x44>
 1018850:	e0bffc17 	ldw	r2,-16(fp)
 1018854:	10800324 	muli	r2,r2,12
 1018858:	1007883a 	mov	r3,r2
 101885c:	008040b4 	movhi	r2,258
 1018860:	109a8a04 	addi	r2,r2,27176
 1018864:	1887883a 	add	r3,r3,r2
 1018868:	e0ffff15 	stw	r3,-4(fp)
 101886c:	00000106 	br	1018874 <fstat+0x48>
 1018870:	e03fff15 	stw	zero,-4(fp)
 1018874:	e0bfff17 	ldw	r2,-4(fp)
 1018878:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 101887c:	e0bffb17 	ldw	r2,-20(fp)
 1018880:	1005003a 	cmpeq	r2,r2,zero
 1018884:	1000121e 	bne	r2,zero,10188d0 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1018888:	e0bffb17 	ldw	r2,-20(fp)
 101888c:	10800017 	ldw	r2,0(r2)
 1018890:	10800817 	ldw	r2,32(r2)
 1018894:	1005003a 	cmpeq	r2,r2,zero
 1018898:	1000081e 	bne	r2,zero,10188bc <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 101889c:	e0bffb17 	ldw	r2,-20(fp)
 10188a0:	10800017 	ldw	r2,0(r2)
 10188a4:	10800817 	ldw	r2,32(r2)
 10188a8:	e13ffb17 	ldw	r4,-20(fp)
 10188ac:	e17ffd17 	ldw	r5,-12(fp)
 10188b0:	103ee83a 	callr	r2
 10188b4:	e0bffe15 	stw	r2,-8(fp)
 10188b8:	00000b06 	br	10188e8 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 10188bc:	e0fffd17 	ldw	r3,-12(fp)
 10188c0:	00880004 	movi	r2,8192
 10188c4:	18800115 	stw	r2,4(r3)
      return 0;
 10188c8:	e03ffe15 	stw	zero,-8(fp)
 10188cc:	00000606 	br	10188e8 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10188d0:	10189000 	call	1018900 <alt_get_errno>
 10188d4:	1007883a 	mov	r3,r2
 10188d8:	00801444 	movi	r2,81
 10188dc:	18800015 	stw	r2,0(r3)
    return -1;
 10188e0:	00bfffc4 	movi	r2,-1
 10188e4:	e0bffe15 	stw	r2,-8(fp)
 10188e8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 10188ec:	e037883a 	mov	sp,fp
 10188f0:	dfc00117 	ldw	ra,4(sp)
 10188f4:	df000017 	ldw	fp,0(sp)
 10188f8:	dec00204 	addi	sp,sp,8
 10188fc:	f800283a 	ret

01018900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018900:	defffd04 	addi	sp,sp,-12
 1018904:	dfc00215 	stw	ra,8(sp)
 1018908:	df000115 	stw	fp,4(sp)
 101890c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018910:	008040b4 	movhi	r2,258
 1018914:	109f9404 	addi	r2,r2,32336
 1018918:	10800017 	ldw	r2,0(r2)
 101891c:	1005003a 	cmpeq	r2,r2,zero
 1018920:	1000061e 	bne	r2,zero,101893c <alt_get_errno+0x3c>
 1018924:	008040b4 	movhi	r2,258
 1018928:	109f9404 	addi	r2,r2,32336
 101892c:	10800017 	ldw	r2,0(r2)
 1018930:	103ee83a 	callr	r2
 1018934:	e0bfff15 	stw	r2,-4(fp)
 1018938:	00000306 	br	1018948 <alt_get_errno+0x48>
 101893c:	008040f4 	movhi	r2,259
 1018940:	10a70404 	addi	r2,r2,-25584
 1018944:	e0bfff15 	stw	r2,-4(fp)
 1018948:	e0bfff17 	ldw	r2,-4(fp)
}
 101894c:	e037883a 	mov	sp,fp
 1018950:	dfc00117 	ldw	ra,4(sp)
 1018954:	df000017 	ldw	fp,0(sp)
 1018958:	dec00204 	addi	sp,sp,8
 101895c:	f800283a 	ret

01018960 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 1018960:	deffff04 	addi	sp,sp,-4
 1018964:	df000015 	stw	fp,0(sp)
 1018968:	d839883a 	mov	fp,sp
  return 0;
 101896c:	0005883a 	mov	r2,zero
}
 1018970:	e037883a 	mov	sp,fp
 1018974:	df000017 	ldw	fp,0(sp)
 1018978:	dec00104 	addi	sp,sp,4
 101897c:	f800283a 	ret

01018980 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1018980:	deffeb04 	addi	sp,sp,-84
 1018984:	dfc01415 	stw	ra,80(sp)
 1018988:	df001315 	stw	fp,76(sp)
 101898c:	df001304 	addi	fp,sp,76
 1018990:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1018994:	e0bffd17 	ldw	r2,-12(fp)
 1018998:	1004803a 	cmplt	r2,r2,zero
 101899c:	1000081e 	bne	r2,zero,10189c0 <isatty+0x40>
 10189a0:	e0bffd17 	ldw	r2,-12(fp)
 10189a4:	10800324 	muli	r2,r2,12
 10189a8:	1007883a 	mov	r3,r2
 10189ac:	008040b4 	movhi	r2,258
 10189b0:	109a8a04 	addi	r2,r2,27176
 10189b4:	1887883a 	add	r3,r3,r2
 10189b8:	e0ffff15 	stw	r3,-4(fp)
 10189bc:	00000106 	br	10189c4 <isatty+0x44>
 10189c0:	e03fff15 	stw	zero,-4(fp)
 10189c4:	e0bfff17 	ldw	r2,-4(fp)
 10189c8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 10189cc:	e0bfed17 	ldw	r2,-76(fp)
 10189d0:	1005003a 	cmpeq	r2,r2,zero
 10189d4:	10000f1e 	bne	r2,zero,1018a14 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 10189d8:	e0bfed17 	ldw	r2,-76(fp)
 10189dc:	10800017 	ldw	r2,0(r2)
 10189e0:	10800817 	ldw	r2,32(r2)
 10189e4:	1004c03a 	cmpne	r2,r2,zero
 10189e8:	1000031e 	bne	r2,zero,10189f8 <isatty+0x78>
    {
      return 1;
 10189ec:	00800044 	movi	r2,1
 10189f0:	e0bffe15 	stw	r2,-8(fp)
 10189f4:	00000c06 	br	1018a28 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 10189f8:	e17fee04 	addi	r5,fp,-72
 10189fc:	e13ffd17 	ldw	r4,-12(fp)
 1018a00:	101882c0 	call	101882c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1018a04:	e0bfef17 	ldw	r2,-68(fp)
 1018a08:	10880020 	cmpeqi	r2,r2,8192
 1018a0c:	e0bffe15 	stw	r2,-8(fp)
 1018a10:	00000506 	br	1018a28 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1018a14:	1018a400 	call	1018a40 <alt_get_errno>
 1018a18:	1007883a 	mov	r3,r2
 1018a1c:	00801444 	movi	r2,81
 1018a20:	18800015 	stw	r2,0(r3)
    return 0;
 1018a24:	e03ffe15 	stw	zero,-8(fp)
 1018a28:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1018a2c:	e037883a 	mov	sp,fp
 1018a30:	dfc00117 	ldw	ra,4(sp)
 1018a34:	df000017 	ldw	fp,0(sp)
 1018a38:	dec00204 	addi	sp,sp,8
 1018a3c:	f800283a 	ret

01018a40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018a40:	defffd04 	addi	sp,sp,-12
 1018a44:	dfc00215 	stw	ra,8(sp)
 1018a48:	df000115 	stw	fp,4(sp)
 1018a4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018a50:	008040b4 	movhi	r2,258
 1018a54:	109f9404 	addi	r2,r2,32336
 1018a58:	10800017 	ldw	r2,0(r2)
 1018a5c:	1005003a 	cmpeq	r2,r2,zero
 1018a60:	1000061e 	bne	r2,zero,1018a7c <alt_get_errno+0x3c>
 1018a64:	008040b4 	movhi	r2,258
 1018a68:	109f9404 	addi	r2,r2,32336
 1018a6c:	10800017 	ldw	r2,0(r2)
 1018a70:	103ee83a 	callr	r2
 1018a74:	e0bfff15 	stw	r2,-4(fp)
 1018a78:	00000306 	br	1018a88 <alt_get_errno+0x48>
 1018a7c:	008040f4 	movhi	r2,259
 1018a80:	10a70404 	addi	r2,r2,-25584
 1018a84:	e0bfff15 	stw	r2,-4(fp)
 1018a88:	e0bfff17 	ldw	r2,-4(fp)
}
 1018a8c:	e037883a 	mov	sp,fp
 1018a90:	dfc00117 	ldw	ra,4(sp)
 1018a94:	df000017 	ldw	fp,0(sp)
 1018a98:	dec00204 	addi	sp,sp,8
 1018a9c:	f800283a 	ret

01018aa0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 1018aa0:	defffa04 	addi	sp,sp,-24
 1018aa4:	dfc00515 	stw	ra,20(sp)
 1018aa8:	df000415 	stw	fp,16(sp)
 1018aac:	df000404 	addi	fp,sp,16
 1018ab0:	e13ffd15 	stw	r4,-12(fp)
 1018ab4:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 1018ab8:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 1018abc:	e0bffd17 	ldw	r2,-12(fp)
 1018ac0:	10800048 	cmpgei	r2,r2,1
 1018ac4:	1000301e 	bne	r2,zero,1018b88 <kill+0xe8>
  {
    switch (sig)
 1018ac8:	e0bffe17 	ldw	r2,-8(fp)
 1018acc:	10800828 	cmpgeui	r2,r2,32
 1018ad0:	10002a1e 	bne	r2,zero,1018b7c <kill+0xdc>
 1018ad4:	e0bffe17 	ldw	r2,-8(fp)
 1018ad8:	1085883a 	add	r2,r2,r2
 1018adc:	1087883a 	add	r3,r2,r2
 1018ae0:	008040b4 	movhi	r2,258
 1018ae4:	10a2bd04 	addi	r2,r2,-29964
 1018ae8:	1885883a 	add	r2,r3,r2
 1018aec:	10800017 	ldw	r2,0(r2)
 1018af0:	1000683a 	jmp	r2
 1018af4:	01018b9c 	xori	r4,zero,1582
 1018af8:	01018b7c 	xorhi	r4,zero,1581
 1018afc:	01018b7c 	xorhi	r4,zero,1581
 1018b00:	01018b74 	movhi	r4,1581
 1018b04:	01018b74 	movhi	r4,1581
 1018b08:	01018b74 	movhi	r4,1581
 1018b0c:	01018b74 	movhi	r4,1581
 1018b10:	01018b7c 	xorhi	r4,zero,1581
 1018b14:	01018b74 	movhi	r4,1581
 1018b18:	01018b74 	movhi	r4,1581
 1018b1c:	01018b74 	movhi	r4,1581
 1018b20:	01018b74 	movhi	r4,1581
 1018b24:	01018b74 	movhi	r4,1581
 1018b28:	01018b74 	movhi	r4,1581
 1018b2c:	01018b74 	movhi	r4,1581
 1018b30:	01018b74 	movhi	r4,1581
 1018b34:	01018b9c 	xori	r4,zero,1582
 1018b38:	01018b7c 	xorhi	r4,zero,1581
 1018b3c:	01018b7c 	xorhi	r4,zero,1581
 1018b40:	01018b7c 	xorhi	r4,zero,1581
 1018b44:	01018b9c 	xori	r4,zero,1582
 1018b48:	01018b7c 	xorhi	r4,zero,1581
 1018b4c:	01018b7c 	xorhi	r4,zero,1581
 1018b50:	01018b74 	movhi	r4,1581
 1018b54:	01018b74 	movhi	r4,1581
 1018b58:	01018b74 	movhi	r4,1581
 1018b5c:	01018b74 	movhi	r4,1581
 1018b60:	01018b74 	movhi	r4,1581
 1018b64:	01018b7c 	xorhi	r4,zero,1581
 1018b68:	01018b7c 	xorhi	r4,zero,1581
 1018b6c:	01018b74 	movhi	r4,1581
 1018b70:	01018b74 	movhi	r4,1581
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 1018b74:	0009883a 	mov	r4,zero
 1018b78:	10188000 	call	1018800 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 1018b7c:	00800584 	movi	r2,22
 1018b80:	e0bffc15 	stw	r2,-16(fp)
 1018b84:	00000506 	br	1018b9c <kill+0xfc>
    }
  }

  else if (pid > 0)
 1018b88:	e0bffd17 	ldw	r2,-12(fp)
 1018b8c:	10800050 	cmplti	r2,r2,1
 1018b90:	1000021e 	bne	r2,zero,1018b9c <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 1018b94:	008000c4 	movi	r2,3
 1018b98:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 1018b9c:	e0bffc17 	ldw	r2,-16(fp)
 1018ba0:	1005003a 	cmpeq	r2,r2,zero
 1018ba4:	1000071e 	bne	r2,zero,1018bc4 <kill+0x124>
  {
    ALT_ERRNO = status;
 1018ba8:	1018be00 	call	1018be0 <alt_get_errno>
 1018bac:	1007883a 	mov	r3,r2
 1018bb0:	e0bffc17 	ldw	r2,-16(fp)
 1018bb4:	18800015 	stw	r2,0(r3)
    return -1;
 1018bb8:	00bfffc4 	movi	r2,-1
 1018bbc:	e0bfff15 	stw	r2,-4(fp)
 1018bc0:	00000106 	br	1018bc8 <kill+0x128>
  }

  return 0;
 1018bc4:	e03fff15 	stw	zero,-4(fp)
 1018bc8:	e0bfff17 	ldw	r2,-4(fp)
}
 1018bcc:	e037883a 	mov	sp,fp
 1018bd0:	dfc00117 	ldw	ra,4(sp)
 1018bd4:	df000017 	ldw	fp,0(sp)
 1018bd8:	dec00204 	addi	sp,sp,8
 1018bdc:	f800283a 	ret

01018be0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018be0:	defffd04 	addi	sp,sp,-12
 1018be4:	dfc00215 	stw	ra,8(sp)
 1018be8:	df000115 	stw	fp,4(sp)
 1018bec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018bf0:	008040b4 	movhi	r2,258
 1018bf4:	109f9404 	addi	r2,r2,32336
 1018bf8:	10800017 	ldw	r2,0(r2)
 1018bfc:	1005003a 	cmpeq	r2,r2,zero
 1018c00:	1000061e 	bne	r2,zero,1018c1c <alt_get_errno+0x3c>
 1018c04:	008040b4 	movhi	r2,258
 1018c08:	109f9404 	addi	r2,r2,32336
 1018c0c:	10800017 	ldw	r2,0(r2)
 1018c10:	103ee83a 	callr	r2
 1018c14:	e0bfff15 	stw	r2,-4(fp)
 1018c18:	00000306 	br	1018c28 <alt_get_errno+0x48>
 1018c1c:	008040f4 	movhi	r2,259
 1018c20:	10a70404 	addi	r2,r2,-25584
 1018c24:	e0bfff15 	stw	r2,-4(fp)
 1018c28:	e0bfff17 	ldw	r2,-4(fp)
}
 1018c2c:	e037883a 	mov	sp,fp
 1018c30:	dfc00117 	ldw	ra,4(sp)
 1018c34:	df000017 	ldw	fp,0(sp)
 1018c38:	dec00204 	addi	sp,sp,8
 1018c3c:	f800283a 	ret

01018c40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1018c40:	defffe04 	addi	sp,sp,-8
 1018c44:	dfc00115 	stw	ra,4(sp)
 1018c48:	df000015 	stw	fp,0(sp)
 1018c4c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1018c50:	010040b4 	movhi	r4,258
 1018c54:	211fb804 	addi	r4,r4,32480
 1018c58:	014040b4 	movhi	r5,258
 1018c5c:	29587b04 	addi	r5,r5,25068
 1018c60:	018040b4 	movhi	r6,258
 1018c64:	319fb804 	addi	r6,r6,32480
 1018c68:	1018cc00 	call	1018cc0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1018c6c:	01004034 	movhi	r4,256
 1018c70:	21000804 	addi	r4,r4,32
 1018c74:	01404034 	movhi	r5,256
 1018c78:	29400804 	addi	r5,r5,32
 1018c7c:	01804034 	movhi	r6,256
 1018c80:	31807004 	addi	r6,r6,448
 1018c84:	1018cc00 	call	1018cc0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1018c88:	010040b4 	movhi	r4,258
 1018c8c:	2111c704 	addi	r4,r4,18204
 1018c90:	014040b4 	movhi	r5,258
 1018c94:	2951c704 	addi	r5,r5,18204
 1018c98:	018040b4 	movhi	r6,258
 1018c9c:	31987b04 	addi	r6,r6,25068
 1018ca0:	1018cc00 	call	1018cc0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1018ca4:	1022eb80 	call	1022eb8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1018ca8:	102316c0 	call	102316c <alt_icache_flush_all>
}
 1018cac:	e037883a 	mov	sp,fp
 1018cb0:	dfc00117 	ldw	ra,4(sp)
 1018cb4:	df000017 	ldw	fp,0(sp)
 1018cb8:	dec00204 	addi	sp,sp,8
 1018cbc:	f800283a 	ret

01018cc0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1018cc0:	defffc04 	addi	sp,sp,-16
 1018cc4:	df000315 	stw	fp,12(sp)
 1018cc8:	df000304 	addi	fp,sp,12
 1018ccc:	e13ffd15 	stw	r4,-12(fp)
 1018cd0:	e17ffe15 	stw	r5,-8(fp)
 1018cd4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1018cd8:	e0fffe17 	ldw	r3,-8(fp)
 1018cdc:	e0bffd17 	ldw	r2,-12(fp)
 1018ce0:	18800e26 	beq	r3,r2,1018d1c <alt_load_section+0x5c>
  {
    while( to != end )
 1018ce4:	00000a06 	br	1018d10 <alt_load_section+0x50>
    {
      *to++ = *from++;
 1018ce8:	e0bffd17 	ldw	r2,-12(fp)
 1018cec:	10c00017 	ldw	r3,0(r2)
 1018cf0:	e0bffe17 	ldw	r2,-8(fp)
 1018cf4:	10c00015 	stw	r3,0(r2)
 1018cf8:	e0bffe17 	ldw	r2,-8(fp)
 1018cfc:	10800104 	addi	r2,r2,4
 1018d00:	e0bffe15 	stw	r2,-8(fp)
 1018d04:	e0bffd17 	ldw	r2,-12(fp)
 1018d08:	10800104 	addi	r2,r2,4
 1018d0c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1018d10:	e0fffe17 	ldw	r3,-8(fp)
 1018d14:	e0bfff17 	ldw	r2,-4(fp)
 1018d18:	18bff31e 	bne	r3,r2,1018ce8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1018d1c:	e037883a 	mov	sp,fp
 1018d20:	df000017 	ldw	fp,0(sp)
 1018d24:	dec00104 	addi	sp,sp,4
 1018d28:	f800283a 	ret

01018d2c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1018d2c:	defff804 	addi	sp,sp,-32
 1018d30:	dfc00715 	stw	ra,28(sp)
 1018d34:	df000615 	stw	fp,24(sp)
 1018d38:	df000604 	addi	fp,sp,24
 1018d3c:	e13ffc15 	stw	r4,-16(fp)
 1018d40:	e17ffd15 	stw	r5,-12(fp)
 1018d44:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1018d48:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1018d4c:	e0bffc17 	ldw	r2,-16(fp)
 1018d50:	1004803a 	cmplt	r2,r2,zero
 1018d54:	1000081e 	bne	r2,zero,1018d78 <lseek+0x4c>
 1018d58:	e0bffc17 	ldw	r2,-16(fp)
 1018d5c:	10800324 	muli	r2,r2,12
 1018d60:	1007883a 	mov	r3,r2
 1018d64:	008040b4 	movhi	r2,258
 1018d68:	109a8a04 	addi	r2,r2,27176
 1018d6c:	1887883a 	add	r3,r3,r2
 1018d70:	e0ffff15 	stw	r3,-4(fp)
 1018d74:	00000106 	br	1018d7c <lseek+0x50>
 1018d78:	e03fff15 	stw	zero,-4(fp)
 1018d7c:	e0bfff17 	ldw	r2,-4(fp)
 1018d80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1018d84:	e0bffb17 	ldw	r2,-20(fp)
 1018d88:	1005003a 	cmpeq	r2,r2,zero
 1018d8c:	1000111e 	bne	r2,zero,1018dd4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1018d90:	e0bffb17 	ldw	r2,-20(fp)
 1018d94:	10800017 	ldw	r2,0(r2)
 1018d98:	10800717 	ldw	r2,28(r2)
 1018d9c:	1005003a 	cmpeq	r2,r2,zero
 1018da0:	1000091e 	bne	r2,zero,1018dc8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1018da4:	e0bffb17 	ldw	r2,-20(fp)
 1018da8:	10800017 	ldw	r2,0(r2)
 1018dac:	10800717 	ldw	r2,28(r2)
 1018db0:	e13ffb17 	ldw	r4,-20(fp)
 1018db4:	e17ffd17 	ldw	r5,-12(fp)
 1018db8:	e1bffe17 	ldw	r6,-8(fp)
 1018dbc:	103ee83a 	callr	r2
 1018dc0:	e0bffa15 	stw	r2,-24(fp)
 1018dc4:	00000506 	br	1018ddc <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1018dc8:	00bfde84 	movi	r2,-134
 1018dcc:	e0bffa15 	stw	r2,-24(fp)
 1018dd0:	00000206 	br	1018ddc <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 1018dd4:	00bfebc4 	movi	r2,-81
 1018dd8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1018ddc:	e0bffa17 	ldw	r2,-24(fp)
 1018de0:	1004403a 	cmpge	r2,r2,zero
 1018de4:	1000071e 	bne	r2,zero,1018e04 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 1018de8:	1018e1c0 	call	1018e1c <alt_get_errno>
 1018dec:	1007883a 	mov	r3,r2
 1018df0:	e0bffa17 	ldw	r2,-24(fp)
 1018df4:	0085c83a 	sub	r2,zero,r2
 1018df8:	18800015 	stw	r2,0(r3)
    rc = -1;
 1018dfc:	00bfffc4 	movi	r2,-1
 1018e00:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1018e04:	e0bffa17 	ldw	r2,-24(fp)
}
 1018e08:	e037883a 	mov	sp,fp
 1018e0c:	dfc00117 	ldw	ra,4(sp)
 1018e10:	df000017 	ldw	fp,0(sp)
 1018e14:	dec00204 	addi	sp,sp,8
 1018e18:	f800283a 	ret

01018e1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018e1c:	defffd04 	addi	sp,sp,-12
 1018e20:	dfc00215 	stw	ra,8(sp)
 1018e24:	df000115 	stw	fp,4(sp)
 1018e28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018e2c:	008040b4 	movhi	r2,258
 1018e30:	109f9404 	addi	r2,r2,32336
 1018e34:	10800017 	ldw	r2,0(r2)
 1018e38:	1005003a 	cmpeq	r2,r2,zero
 1018e3c:	1000061e 	bne	r2,zero,1018e58 <alt_get_errno+0x3c>
 1018e40:	008040b4 	movhi	r2,258
 1018e44:	109f9404 	addi	r2,r2,32336
 1018e48:	10800017 	ldw	r2,0(r2)
 1018e4c:	103ee83a 	callr	r2
 1018e50:	e0bfff15 	stw	r2,-4(fp)
 1018e54:	00000306 	br	1018e64 <alt_get_errno+0x48>
 1018e58:	008040f4 	movhi	r2,259
 1018e5c:	10a70404 	addi	r2,r2,-25584
 1018e60:	e0bfff15 	stw	r2,-4(fp)
 1018e64:	e0bfff17 	ldw	r2,-4(fp)
}
 1018e68:	e037883a 	mov	sp,fp
 1018e6c:	dfc00117 	ldw	ra,4(sp)
 1018e70:	df000017 	ldw	fp,0(sp)
 1018e74:	dec00204 	addi	sp,sp,8
 1018e78:	f800283a 	ret

01018e7c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1018e7c:	defffb04 	addi	sp,sp,-20
 1018e80:	dfc00415 	stw	ra,16(sp)
 1018e84:	df000315 	stw	fp,12(sp)
 1018e88:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1018e8c:	0009883a 	mov	r4,zero
 1018e90:	102190c0 	call	102190c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1018e94:	1019f680 	call	1019f68 <OSInit>
 1018e98:	01000044 	movi	r4,1
 1018e9c:	101ee2c0 	call	101ee2c <OSSemCreate>
 1018ea0:	1007883a 	mov	r3,r2
 1018ea4:	008040f4 	movhi	r2,259
 1018ea8:	10a70d04 	addi	r2,r2,-25548
 1018eac:	10c00015 	stw	r3,0(r2)
 1018eb0:	01000044 	movi	r4,1
 1018eb4:	101ee2c0 	call	101ee2c <OSSemCreate>
 1018eb8:	1007883a 	mov	r3,r2
 1018ebc:	008040f4 	movhi	r2,259
 1018ec0:	10a70f04 	addi	r2,r2,-25540
 1018ec4:	10c00015 	stw	r3,0(r2)
 1018ec8:	008040f4 	movhi	r2,259
 1018ecc:	10a70804 	addi	r2,r2,-25568
 1018ed0:	e0bffd15 	stw	r2,-12(fp)
 1018ed4:	00800044 	movi	r2,1
 1018ed8:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 1018edc:	e13ffe0b 	ldhu	r4,-8(fp)
 1018ee0:	101ee2c0 	call	101ee2c <OSSemCreate>
 1018ee4:	1007883a 	mov	r3,r2
 1018ee8:	e0bffd17 	ldw	r2,-12(fp)
 1018eec:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1018ef0:	10219400 	call	1021940 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1018ef4:	010040b4 	movhi	r4,258
 1018ef8:	21181d04 	addi	r4,r4,24692
 1018efc:	014040b4 	movhi	r5,258
 1018f00:	29581d04 	addi	r5,r5,24692
 1018f04:	018040b4 	movhi	r6,258
 1018f08:	31981d04 	addi	r6,r6,24692
 1018f0c:	10232600 	call	1023260 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1018f10:	10230100 	call	1023010 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1018f14:	010040b4 	movhi	r4,258
 1018f18:	210c1d04 	addi	r4,r4,12404
 1018f1c:	10240b00 	call	10240b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1018f20:	d127e317 	ldw	r4,-24692(gp)
 1018f24:	d167e417 	ldw	r5,-24688(gp)
 1018f28:	d1a7e517 	ldw	r6,-24684(gp)
 1018f2c:	10053c80 	call	10053c8 <main>
 1018f30:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1018f34:	01000044 	movi	r4,1
 1018f38:	10186380 	call	1018638 <close>
  exit (result);
 1018f3c:	e13fff17 	ldw	r4,-4(fp)
 1018f40:	10240c40 	call	10240c4 <exit>

01018f44 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1018f44:	defff704 	addi	sp,sp,-36
 1018f48:	dfc00815 	stw	ra,32(sp)
 1018f4c:	df000715 	stw	fp,28(sp)
 1018f50:	df000704 	addi	fp,sp,28
 1018f54:	e13ffb15 	stw	r4,-20(fp)
 1018f58:	e17ffc15 	stw	r5,-16(fp)
 1018f5c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1018f60:	e0bffb17 	ldw	r2,-20(fp)
 1018f64:	1004803a 	cmplt	r2,r2,zero
 1018f68:	1000081e 	bne	r2,zero,1018f8c <read+0x48>
 1018f6c:	e0bffb17 	ldw	r2,-20(fp)
 1018f70:	10800324 	muli	r2,r2,12
 1018f74:	1007883a 	mov	r3,r2
 1018f78:	008040b4 	movhi	r2,258
 1018f7c:	109a8a04 	addi	r2,r2,27176
 1018f80:	1887883a 	add	r3,r3,r2
 1018f84:	e0ffff15 	stw	r3,-4(fp)
 1018f88:	00000106 	br	1018f90 <read+0x4c>
 1018f8c:	e03fff15 	stw	zero,-4(fp)
 1018f90:	e0bfff17 	ldw	r2,-4(fp)
 1018f94:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1018f98:	e0bffa17 	ldw	r2,-24(fp)
 1018f9c:	1005003a 	cmpeq	r2,r2,zero
 1018fa0:	1000241e 	bne	r2,zero,1019034 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1018fa4:	e0bffa17 	ldw	r2,-24(fp)
 1018fa8:	10800217 	ldw	r2,8(r2)
 1018fac:	108000cc 	andi	r2,r2,3
 1018fb0:	10800060 	cmpeqi	r2,r2,1
 1018fb4:	10001a1e 	bne	r2,zero,1019020 <read+0xdc>
 1018fb8:	e0bffa17 	ldw	r2,-24(fp)
 1018fbc:	10800017 	ldw	r2,0(r2)
 1018fc0:	10800517 	ldw	r2,20(r2)
 1018fc4:	1005003a 	cmpeq	r2,r2,zero
 1018fc8:	1000151e 	bne	r2,zero,1019020 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1018fcc:	e0bffa17 	ldw	r2,-24(fp)
 1018fd0:	10800017 	ldw	r2,0(r2)
 1018fd4:	10800517 	ldw	r2,20(r2)
 1018fd8:	e17ffc17 	ldw	r5,-16(fp)
 1018fdc:	e1bffd17 	ldw	r6,-12(fp)
 1018fe0:	e13ffa17 	ldw	r4,-24(fp)
 1018fe4:	103ee83a 	callr	r2
 1018fe8:	e0bff915 	stw	r2,-28(fp)
 1018fec:	e0bff917 	ldw	r2,-28(fp)
 1018ff0:	1004403a 	cmpge	r2,r2,zero
 1018ff4:	1000071e 	bne	r2,zero,1019014 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 1018ff8:	10190640 	call	1019064 <alt_get_errno>
 1018ffc:	e0fff917 	ldw	r3,-28(fp)
 1019000:	00c7c83a 	sub	r3,zero,r3
 1019004:	10c00015 	stw	r3,0(r2)
          return -1;
 1019008:	00bfffc4 	movi	r2,-1
 101900c:	e0bffe15 	stw	r2,-8(fp)
 1019010:	00000e06 	br	101904c <read+0x108>
        }
        return rval;
 1019014:	e0bff917 	ldw	r2,-28(fp)
 1019018:	e0bffe15 	stw	r2,-8(fp)
 101901c:	00000b06 	br	101904c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1019020:	10190640 	call	1019064 <alt_get_errno>
 1019024:	1007883a 	mov	r3,r2
 1019028:	00800344 	movi	r2,13
 101902c:	18800015 	stw	r2,0(r3)
 1019030:	00000406 	br	1019044 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1019034:	10190640 	call	1019064 <alt_get_errno>
 1019038:	1007883a 	mov	r3,r2
 101903c:	00801444 	movi	r2,81
 1019040:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1019044:	00bfffc4 	movi	r2,-1
 1019048:	e0bffe15 	stw	r2,-8(fp)
 101904c:	e0bffe17 	ldw	r2,-8(fp)
}
 1019050:	e037883a 	mov	sp,fp
 1019054:	dfc00117 	ldw	ra,4(sp)
 1019058:	df000017 	ldw	fp,0(sp)
 101905c:	dec00204 	addi	sp,sp,8
 1019060:	f800283a 	ret

01019064 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1019064:	defffd04 	addi	sp,sp,-12
 1019068:	dfc00215 	stw	ra,8(sp)
 101906c:	df000115 	stw	fp,4(sp)
 1019070:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1019074:	008040b4 	movhi	r2,258
 1019078:	109f9404 	addi	r2,r2,32336
 101907c:	10800017 	ldw	r2,0(r2)
 1019080:	1005003a 	cmpeq	r2,r2,zero
 1019084:	1000061e 	bne	r2,zero,10190a0 <alt_get_errno+0x3c>
 1019088:	008040b4 	movhi	r2,258
 101908c:	109f9404 	addi	r2,r2,32336
 1019090:	10800017 	ldw	r2,0(r2)
 1019094:	103ee83a 	callr	r2
 1019098:	e0bfff15 	stw	r2,-4(fp)
 101909c:	00000306 	br	10190ac <alt_get_errno+0x48>
 10190a0:	008040f4 	movhi	r2,259
 10190a4:	10a70404 	addi	r2,r2,-25584
 10190a8:	e0bfff15 	stw	r2,-4(fp)
 10190ac:	e0bfff17 	ldw	r2,-4(fp)
}
 10190b0:	e037883a 	mov	sp,fp
 10190b4:	dfc00117 	ldw	ra,4(sp)
 10190b8:	df000017 	ldw	fp,0(sp)
 10190bc:	dec00204 	addi	sp,sp,8
 10190c0:	f800283a 	ret

010190c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10190c4:	defffe04 	addi	sp,sp,-8
 10190c8:	df000115 	stw	fp,4(sp)
 10190cc:	df000104 	addi	fp,sp,4
 10190d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 10190d4:	e0bfff17 	ldw	r2,-4(fp)
 10190d8:	108000d0 	cmplti	r2,r2,3
 10190dc:	10000d1e 	bne	r2,zero,1019114 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 10190e0:	e0bfff17 	ldw	r2,-4(fp)
 10190e4:	00c040b4 	movhi	r3,258
 10190e8:	18da8a04 	addi	r3,r3,27176
 10190ec:	10800324 	muli	r2,r2,12
 10190f0:	10c5883a 	add	r2,r2,r3
 10190f4:	10800204 	addi	r2,r2,8
 10190f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10190fc:	e0bfff17 	ldw	r2,-4(fp)
 1019100:	00c040b4 	movhi	r3,258
 1019104:	18da8a04 	addi	r3,r3,27176
 1019108:	10800324 	muli	r2,r2,12
 101910c:	10c5883a 	add	r2,r2,r3
 1019110:	10000015 	stw	zero,0(r2)
  }
}
 1019114:	e037883a 	mov	sp,fp
 1019118:	df000017 	ldw	fp,0(sp)
 101911c:	dec00104 	addi	sp,sp,4
 1019120:	f800283a 	ret

01019124 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1019124:	defff804 	addi	sp,sp,-32
 1019128:	df000715 	stw	fp,28(sp)
 101912c:	df000704 	addi	fp,sp,28
 1019130:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019134:	0005303a 	rdctl	r2,status
 1019138:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101913c:	e0fffb17 	ldw	r3,-20(fp)
 1019140:	00bfff84 	movi	r2,-2
 1019144:	1884703a 	and	r2,r3,r2
 1019148:	1001703a 	wrctl	status,r2
  
  return context;
 101914c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1019150:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1019154:	d0a06f17 	ldw	r2,-32324(gp)
 1019158:	10c000c4 	addi	r3,r2,3
 101915c:	00bfff04 	movi	r2,-4
 1019160:	1884703a 	and	r2,r3,r2
 1019164:	d0a06f15 	stw	r2,-32324(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1019168:	d0e06f17 	ldw	r3,-32324(gp)
 101916c:	e0bffe17 	ldw	r2,-8(fp)
 1019170:	1887883a 	add	r3,r3,r2
 1019174:	00808034 	movhi	r2,512
 1019178:	10800004 	addi	r2,r2,0
 101917c:	10c0072e 	bgeu	r2,r3,101919c <sbrk+0x78>
 1019180:	e0bffd17 	ldw	r2,-12(fp)
 1019184:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019188:	e0bffa17 	ldw	r2,-24(fp)
 101918c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1019190:	00bfffc4 	movi	r2,-1
 1019194:	e0bfff15 	stw	r2,-4(fp)
 1019198:	00000c06 	br	10191cc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 101919c:	d0a06f17 	ldw	r2,-32324(gp)
 10191a0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 10191a4:	d0e06f17 	ldw	r3,-32324(gp)
 10191a8:	e0bffe17 	ldw	r2,-8(fp)
 10191ac:	1885883a 	add	r2,r3,r2
 10191b0:	d0a06f15 	stw	r2,-32324(gp)
 10191b4:	e0bffd17 	ldw	r2,-12(fp)
 10191b8:	e0bff915 	stw	r2,-28(fp)
 10191bc:	e0bff917 	ldw	r2,-28(fp)
 10191c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 10191c4:	e0bffc17 	ldw	r2,-16(fp)
 10191c8:	e0bfff15 	stw	r2,-4(fp)
 10191cc:	e0bfff17 	ldw	r2,-4(fp)
} 
 10191d0:	e037883a 	mov	sp,fp
 10191d4:	df000017 	ldw	fp,0(sp)
 10191d8:	dec00104 	addi	sp,sp,4
 10191dc:	f800283a 	ret

010191e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10191e0:	defff704 	addi	sp,sp,-36
 10191e4:	dfc00815 	stw	ra,32(sp)
 10191e8:	df000715 	stw	fp,28(sp)
 10191ec:	df000704 	addi	fp,sp,28
 10191f0:	e13ffb15 	stw	r4,-20(fp)
 10191f4:	e17ffc15 	stw	r5,-16(fp)
 10191f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10191fc:	e0bffb17 	ldw	r2,-20(fp)
 1019200:	1004803a 	cmplt	r2,r2,zero
 1019204:	1000081e 	bne	r2,zero,1019228 <write+0x48>
 1019208:	e0bffb17 	ldw	r2,-20(fp)
 101920c:	10800324 	muli	r2,r2,12
 1019210:	1007883a 	mov	r3,r2
 1019214:	008040b4 	movhi	r2,258
 1019218:	109a8a04 	addi	r2,r2,27176
 101921c:	1887883a 	add	r3,r3,r2
 1019220:	e0ffff15 	stw	r3,-4(fp)
 1019224:	00000106 	br	101922c <write+0x4c>
 1019228:	e03fff15 	stw	zero,-4(fp)
 101922c:	e0bfff17 	ldw	r2,-4(fp)
 1019230:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1019234:	e0bffa17 	ldw	r2,-24(fp)
 1019238:	1005003a 	cmpeq	r2,r2,zero
 101923c:	1000241e 	bne	r2,zero,10192d0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1019240:	e0bffa17 	ldw	r2,-24(fp)
 1019244:	10800217 	ldw	r2,8(r2)
 1019248:	108000cc 	andi	r2,r2,3
 101924c:	1005003a 	cmpeq	r2,r2,zero
 1019250:	10001a1e 	bne	r2,zero,10192bc <write+0xdc>
 1019254:	e0bffa17 	ldw	r2,-24(fp)
 1019258:	10800017 	ldw	r2,0(r2)
 101925c:	10800617 	ldw	r2,24(r2)
 1019260:	1005003a 	cmpeq	r2,r2,zero
 1019264:	1000151e 	bne	r2,zero,10192bc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1019268:	e0bffa17 	ldw	r2,-24(fp)
 101926c:	10800017 	ldw	r2,0(r2)
 1019270:	10800617 	ldw	r2,24(r2)
 1019274:	e17ffc17 	ldw	r5,-16(fp)
 1019278:	e1bffd17 	ldw	r6,-12(fp)
 101927c:	e13ffa17 	ldw	r4,-24(fp)
 1019280:	103ee83a 	callr	r2
 1019284:	e0bff915 	stw	r2,-28(fp)
 1019288:	e0bff917 	ldw	r2,-28(fp)
 101928c:	1004403a 	cmpge	r2,r2,zero
 1019290:	1000071e 	bne	r2,zero,10192b0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 1019294:	10193000 	call	1019300 <alt_get_errno>
 1019298:	e0fff917 	ldw	r3,-28(fp)
 101929c:	00c7c83a 	sub	r3,zero,r3
 10192a0:	10c00015 	stw	r3,0(r2)
        return -1;
 10192a4:	00bfffc4 	movi	r2,-1
 10192a8:	e0bffe15 	stw	r2,-8(fp)
 10192ac:	00000e06 	br	10192e8 <write+0x108>
      }
      return rval;
 10192b0:	e0bff917 	ldw	r2,-28(fp)
 10192b4:	e0bffe15 	stw	r2,-8(fp)
 10192b8:	00000b06 	br	10192e8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 10192bc:	10193000 	call	1019300 <alt_get_errno>
 10192c0:	1007883a 	mov	r3,r2
 10192c4:	00800344 	movi	r2,13
 10192c8:	18800015 	stw	r2,0(r3)
 10192cc:	00000406 	br	10192e0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 10192d0:	10193000 	call	1019300 <alt_get_errno>
 10192d4:	1007883a 	mov	r3,r2
 10192d8:	00801444 	movi	r2,81
 10192dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10192e0:	00bfffc4 	movi	r2,-1
 10192e4:	e0bffe15 	stw	r2,-8(fp)
 10192e8:	e0bffe17 	ldw	r2,-8(fp)
}
 10192ec:	e037883a 	mov	sp,fp
 10192f0:	dfc00117 	ldw	ra,4(sp)
 10192f4:	df000017 	ldw	fp,0(sp)
 10192f8:	dec00204 	addi	sp,sp,8
 10192fc:	f800283a 	ret

01019300 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1019300:	defffd04 	addi	sp,sp,-12
 1019304:	dfc00215 	stw	ra,8(sp)
 1019308:	df000115 	stw	fp,4(sp)
 101930c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1019310:	008040b4 	movhi	r2,258
 1019314:	109f9404 	addi	r2,r2,32336
 1019318:	10800017 	ldw	r2,0(r2)
 101931c:	1005003a 	cmpeq	r2,r2,zero
 1019320:	1000061e 	bne	r2,zero,101933c <alt_get_errno+0x3c>
 1019324:	008040b4 	movhi	r2,258
 1019328:	109f9404 	addi	r2,r2,32336
 101932c:	10800017 	ldw	r2,0(r2)
 1019330:	103ee83a 	callr	r2
 1019334:	e0bfff15 	stw	r2,-4(fp)
 1019338:	00000306 	br	1019348 <alt_get_errno+0x48>
 101933c:	008040f4 	movhi	r2,259
 1019340:	10a70404 	addi	r2,r2,-25584
 1019344:	e0bfff15 	stw	r2,-4(fp)
 1019348:	e0bfff17 	ldw	r2,-4(fp)
}
 101934c:	e037883a 	mov	sp,fp
 1019350:	dfc00117 	ldw	ra,4(sp)
 1019354:	df000017 	ldw	fp,0(sp)
 1019358:	dec00204 	addi	sp,sp,8
 101935c:	f800283a 	ret

01019360 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 1019360:	deffdf04 	addi	sp,sp,-132
 1019364:	dfc02015 	stw	ra,128(sp)
 1019368:	df001f15 	stw	fp,124(sp)
 101936c:	df001f04 	addi	fp,sp,124
 1019370:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 1019374:	e17fe204 	addi	r5,fp,-120
 1019378:	01003fc4 	movi	r4,255
 101937c:	10211b40 	call	10211b4 <OSTaskQuery>
 1019380:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 1019384:	e0bffe83 	ldbu	r2,-6(fp)
 1019388:	10803fcc 	andi	r2,r2,255
 101938c:	1004c03a 	cmpne	r2,r2,zero
 1019390:	1000191e 	bne	r2,zero,10193f8 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 1019394:	e0bfee83 	ldbu	r2,-70(fp)
 1019398:	10803fcc 	andi	r2,r2,255
 101939c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 10193a0:	d127e717 	ldw	r4,-24676(gp)
 10193a4:	e17ffd04 	addi	r5,fp,-12
 10193a8:	101f7000 	call	101f700 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 10193ac:	e0bffe43 	ldbu	r2,-7(fp)
 10193b0:	10803fcc 	andi	r2,r2,255
 10193b4:	1005003a 	cmpeq	r2,r2,zero
 10193b8:	1000071e 	bne	r2,zero,10193d8 <__env_lock+0x78>
 10193bc:	d0e07017 	ldw	r3,-32320(gp)
 10193c0:	e0bfe117 	ldw	r2,-124(fp)
 10193c4:	10c0041e 	bne	r2,r3,10193d8 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 10193c8:	d0a7e617 	ldw	r2,-24680(gp)
 10193cc:	10800044 	addi	r2,r2,1
 10193d0:	d0a7e615 	stw	r2,-24680(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 10193d4:	00000806 	br	10193f8 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 10193d8:	d127e717 	ldw	r4,-24676(gp)
 10193dc:	e1bffe84 	addi	r6,fp,-6
 10193e0:	000b883a 	mov	r5,zero
 10193e4:	101f1e00 	call	101f1e0 <OSSemPend>
    locks  = 1;
 10193e8:	00800044 	movi	r2,1
 10193ec:	d0a7e615 	stw	r2,-24680(gp)
    lockid = id;
 10193f0:	e0bfe117 	ldw	r2,-124(fp)
 10193f4:	d0a07015 	stw	r2,-32320(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 10193f8:	e037883a 	mov	sp,fp
 10193fc:	dfc00117 	ldw	ra,4(sp)
 1019400:	df000017 	ldw	fp,0(sp)
 1019404:	dec00204 	addi	sp,sp,8
 1019408:	f800283a 	ret

0101940c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 101940c:	defffd04 	addi	sp,sp,-12
 1019410:	dfc00215 	stw	ra,8(sp)
 1019414:	df000115 	stw	fp,4(sp)
 1019418:	df000104 	addi	fp,sp,4
 101941c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 1019420:	d0a7e617 	ldw	r2,-24680(gp)
 1019424:	1005003a 	cmpeq	r2,r2,zero
 1019428:	10000a1e 	bne	r2,zero,1019454 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 101942c:	d0a7e617 	ldw	r2,-24680(gp)
 1019430:	10bfffc4 	addi	r2,r2,-1
 1019434:	d0a7e615 	stw	r2,-24680(gp)
 1019438:	d0a7e617 	ldw	r2,-24680(gp)
 101943c:	1004c03a 	cmpne	r2,r2,zero
 1019440:	1000041e 	bne	r2,zero,1019454 <__env_unlock+0x48>
  {
    lockid = -1;
 1019444:	00bfffc4 	movi	r2,-1
 1019448:	d0a07015 	stw	r2,-32320(gp)
    OSSemPost( alt_envsem );
 101944c:	d127e717 	ldw	r4,-24676(gp)
 1019450:	101f5d80 	call	101f5d8 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 1019454:	e037883a 	mov	sp,fp
 1019458:	dfc00117 	ldw	ra,4(sp)
 101945c:	df000017 	ldw	fp,0(sp)
 1019460:	dec00204 	addi	sp,sp,8
 1019464:	f800283a 	ret

01019468 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 1019468:	deffdb04 	addi	sp,sp,-148
 101946c:	dfc02415 	stw	ra,144(sp)
 1019470:	df002315 	stw	fp,140(sp)
 1019474:	df002304 	addi	fp,sp,140
 1019478:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101947c:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 1019480:	008040f4 	movhi	r2,259
 1019484:	10a71044 	addi	r2,r2,-25535
 1019488:	10800003 	ldbu	r2,0(r2)
 101948c:	10803fcc 	andi	r2,r2,255
 1019490:	10800058 	cmpnei	r2,r2,1
 1019494:	1000311e 	bne	r2,zero,101955c <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 1019498:	e17fe204 	addi	r5,fp,-120
 101949c:	01003fc4 	movi	r4,255
 10194a0:	10211b40 	call	10211b4 <OSTaskQuery>
 10194a4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 10194a8:	e0bffe83 	ldbu	r2,-6(fp)
 10194ac:	10803fcc 	andi	r2,r2,255
 10194b0:	1004c03a 	cmpne	r2,r2,zero
 10194b4:	1000291e 	bne	r2,zero,101955c <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 10194b8:	e0bfee83 	ldbu	r2,-70(fp)
 10194bc:	10803fcc 	andi	r2,r2,255
 10194c0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 10194c4:	d127e917 	ldw	r4,-24668(gp)
 10194c8:	e17ffd04 	addi	r5,fp,-12
 10194cc:	101f7000 	call	101f700 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10194d0:	0005303a 	rdctl	r2,status
 10194d4:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10194d8:	e0ffdf17 	ldw	r3,-132(fp)
 10194dc:	00bfff84 	movi	r2,-2
 10194e0:	1884703a 	and	r2,r3,r2
 10194e4:	1001703a 	wrctl	status,r2
  
  return context;
 10194e8:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 10194ec:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 10194f0:	e0bffd0b 	ldhu	r2,-12(fp)
 10194f4:	10bfffcc 	andi	r2,r2,65535
 10194f8:	1004c03a 	cmpne	r2,r2,zero
 10194fc:	10000b1e 	bne	r2,zero,101952c <__malloc_lock+0xc4>
 1019500:	d0e07117 	ldw	r3,-32316(gp)
 1019504:	e0bfe117 	ldw	r2,-124(fp)
 1019508:	10c0081e 	bne	r2,r3,101952c <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 101950c:	d0a7e817 	ldw	r2,-24672(gp)
 1019510:	10800044 	addi	r2,r2,1
 1019514:	d0a7e815 	stw	r2,-24672(gp)
 1019518:	e0bfe017 	ldw	r2,-128(fp)
 101951c:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019520:	e0bfde17 	ldw	r2,-136(fp)
 1019524:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 1019528:	00000c06 	br	101955c <__malloc_lock+0xf4>
 101952c:	e0bfe017 	ldw	r2,-128(fp)
 1019530:	e0bfdd15 	stw	r2,-140(fp)
 1019534:	e0bfdd17 	ldw	r2,-140(fp)
 1019538:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 101953c:	d127e917 	ldw	r4,-24668(gp)
 1019540:	e1bffe84 	addi	r6,fp,-6
 1019544:	000b883a 	mov	r5,zero
 1019548:	101f1e00 	call	101f1e0 <OSSemPend>
    locks  = 1;
 101954c:	00800044 	movi	r2,1
 1019550:	d0a7e815 	stw	r2,-24672(gp)
    lockid = id;
 1019554:	e0bfe117 	ldw	r2,-124(fp)
 1019558:	d0a07115 	stw	r2,-32316(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 101955c:	e037883a 	mov	sp,fp
 1019560:	dfc00117 	ldw	ra,4(sp)
 1019564:	df000017 	ldw	fp,0(sp)
 1019568:	dec00204 	addi	sp,sp,8
 101956c:	f800283a 	ret

01019570 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1019570:	defff804 	addi	sp,sp,-32
 1019574:	dfc00715 	stw	ra,28(sp)
 1019578:	df000615 	stw	fp,24(sp)
 101957c:	df000604 	addi	fp,sp,24
 1019580:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1019584:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 1019588:	008040f4 	movhi	r2,259
 101958c:	10a71044 	addi	r2,r2,-25535
 1019590:	10800003 	ldbu	r2,0(r2)
 1019594:	10803fcc 	andi	r2,r2,255
 1019598:	10800058 	cmpnei	r2,r2,1
 101959c:	1000231e 	bne	r2,zero,101962c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10195a0:	0005303a 	rdctl	r2,status
 10195a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10195a8:	e0fffd17 	ldw	r3,-12(fp)
 10195ac:	00bfff84 	movi	r2,-2
 10195b0:	1884703a 	and	r2,r3,r2
 10195b4:	1001703a 	wrctl	status,r2
  
  return context;
 10195b8:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 10195bc:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 10195c0:	d0a7e817 	ldw	r2,-24672(gp)
 10195c4:	1004c03a 	cmpne	r2,r2,zero
 10195c8:	1000051e 	bne	r2,zero,10195e0 <__malloc_unlock+0x70>
 10195cc:	e0bffe17 	ldw	r2,-8(fp)
 10195d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10195d4:	e0bffc17 	ldw	r2,-16(fp)
 10195d8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 10195dc:	00001306 	br	101962c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 10195e0:	d0a7e817 	ldw	r2,-24672(gp)
 10195e4:	10bfffc4 	addi	r2,r2,-1
 10195e8:	d0a7e815 	stw	r2,-24672(gp)
 10195ec:	d0a7e817 	ldw	r2,-24672(gp)
 10195f0:	1004c03a 	cmpne	r2,r2,zero
 10195f4:	1000091e 	bne	r2,zero,101961c <__malloc_unlock+0xac>
  {
    lockid = -1;
 10195f8:	00bfffc4 	movi	r2,-1
 10195fc:	d0a07115 	stw	r2,-32316(gp)
 1019600:	e0bffe17 	ldw	r2,-8(fp)
 1019604:	e0bffb15 	stw	r2,-20(fp)
 1019608:	e0bffb17 	ldw	r2,-20(fp)
 101960c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 1019610:	d127e917 	ldw	r4,-24668(gp)
 1019614:	101f5d80 	call	101f5d8 <OSSemPost>
 1019618:	00000406 	br	101962c <__malloc_unlock+0xbc>
 101961c:	e0bffe17 	ldw	r2,-8(fp)
 1019620:	e0bffa15 	stw	r2,-24(fp)
 1019624:	e0bffa17 	ldw	r2,-24(fp)
 1019628:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 101962c:	e037883a 	mov	sp,fp
 1019630:	dfc00117 	ldw	ra,4(sp)
 1019634:	df000017 	ldw	fp,0(sp)
 1019638:	dec00204 	addi	sp,sp,8
 101963c:	f800283a 	ret

01019640 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 1019640:	defff604 	addi	sp,sp,-40
 1019644:	dfc00915 	stw	ra,36(sp)
 1019648:	df000815 	stw	fp,32(sp)
 101964c:	df000804 	addi	fp,sp,32
 1019650:	e13ffc15 	stw	r4,-16(fp)
 1019654:	e17ffd15 	stw	r5,-12(fp)
 1019658:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101965c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1019660:	e0bffe17 	ldw	r2,-8(fp)
 1019664:	1004c03a 	cmpne	r2,r2,zero
 1019668:	1000021e 	bne	r2,zero,1019674 <OSEventNameGet+0x34>
        return (0);
 101966c:	e03fff15 	stw	zero,-4(fp)
 1019670:	00003906 	br	1019758 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 1019674:	e0bffc17 	ldw	r2,-16(fp)
 1019678:	1004c03a 	cmpne	r2,r2,zero
 101967c:	1000051e 	bne	r2,zero,1019694 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1019680:	e0fffe17 	ldw	r3,-8(fp)
 1019684:	00800104 	movi	r2,4
 1019688:	18800005 	stb	r2,0(r3)
        return (0);
 101968c:	e03fff15 	stw	zero,-4(fp)
 1019690:	00003106 	br	1019758 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1019694:	e0bffd17 	ldw	r2,-12(fp)
 1019698:	1004c03a 	cmpne	r2,r2,zero
 101969c:	1000051e 	bne	r2,zero,10196b4 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 10196a0:	e0fffe17 	ldw	r3,-8(fp)
 10196a4:	00800304 	movi	r2,12
 10196a8:	18800005 	stb	r2,0(r3)
        return (0);
 10196ac:	e03fff15 	stw	zero,-4(fp)
 10196b0:	00002906 	br	1019758 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10196b4:	d0a7f803 	ldbu	r2,-24608(gp)
 10196b8:	10803fcc 	andi	r2,r2,255
 10196bc:	1005003a 	cmpeq	r2,r2,zero
 10196c0:	1000051e 	bne	r2,zero,10196d8 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 10196c4:	e0fffe17 	ldw	r3,-8(fp)
 10196c8:	00800444 	movi	r2,17
 10196cc:	18800005 	stb	r2,0(r3)
        return (0);
 10196d0:	e03fff15 	stw	zero,-4(fp)
 10196d4:	00002006 	br	1019758 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 10196d8:	e0bffc17 	ldw	r2,-16(fp)
 10196dc:	10800003 	ldbu	r2,0(r2)
 10196e0:	10803fcc 	andi	r2,r2,255
 10196e4:	10bfffc4 	addi	r2,r2,-1
 10196e8:	10800128 	cmpgeui	r2,r2,4
 10196ec:	1000161e 	bne	r2,zero,1019748 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10196f0:	0005303a 	rdctl	r2,status
 10196f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10196f8:	e0fff917 	ldw	r3,-28(fp)
 10196fc:	00bfff84 	movi	r2,-2
 1019700:	1884703a 	and	r2,r3,r2
 1019704:	1001703a 	wrctl	status,r2
  
  return context;
 1019708:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 101970c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 1019710:	e0bffc17 	ldw	r2,-16(fp)
 1019714:	11400384 	addi	r5,r2,14
 1019718:	e13ffd17 	ldw	r4,-12(fp)
 101971c:	101b1c40 	call	101b1c4 <OS_StrCopy>
 1019720:	e0bffb05 	stb	r2,-20(fp)
 1019724:	e0bffa17 	ldw	r2,-24(fp)
 1019728:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101972c:	e0bff817 	ldw	r2,-32(fp)
 1019730:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1019734:	e0bffe17 	ldw	r2,-8(fp)
 1019738:	10000005 	stb	zero,0(r2)
    return (len);
 101973c:	e0bffb03 	ldbu	r2,-20(fp)
 1019740:	e0bfff15 	stw	r2,-4(fp)
 1019744:	00000406 	br	1019758 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 1019748:	e0fffe17 	ldw	r3,-8(fp)
 101974c:	00800044 	movi	r2,1
 1019750:	18800005 	stb	r2,0(r3)
             return (0);
 1019754:	e03fff15 	stw	zero,-4(fp)
 1019758:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 101975c:	e037883a 	mov	sp,fp
 1019760:	dfc00117 	ldw	ra,4(sp)
 1019764:	df000017 	ldw	fp,0(sp)
 1019768:	dec00204 	addi	sp,sp,8
 101976c:	f800283a 	ret

01019770 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 1019770:	defff604 	addi	sp,sp,-40
 1019774:	dfc00915 	stw	ra,36(sp)
 1019778:	df000815 	stw	fp,32(sp)
 101977c:	df000804 	addi	fp,sp,32
 1019780:	e13ffd15 	stw	r4,-12(fp)
 1019784:	e17ffe15 	stw	r5,-8(fp)
 1019788:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101978c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1019790:	e0bfff17 	ldw	r2,-4(fp)
 1019794:	1005003a 	cmpeq	r2,r2,zero
 1019798:	1000411e 	bne	r2,zero,10198a0 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 101979c:	e0bffd17 	ldw	r2,-12(fp)
 10197a0:	1004c03a 	cmpne	r2,r2,zero
 10197a4:	1000041e 	bne	r2,zero,10197b8 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 10197a8:	e0ffff17 	ldw	r3,-4(fp)
 10197ac:	00800104 	movi	r2,4
 10197b0:	18800005 	stb	r2,0(r3)
        return;
 10197b4:	00003a06 	br	10198a0 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 10197b8:	e0bffe17 	ldw	r2,-8(fp)
 10197bc:	1004c03a 	cmpne	r2,r2,zero
 10197c0:	1000041e 	bne	r2,zero,10197d4 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 10197c4:	e0ffff17 	ldw	r3,-4(fp)
 10197c8:	00800304 	movi	r2,12
 10197cc:	18800005 	stb	r2,0(r3)
        return;
 10197d0:	00003306 	br	10198a0 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10197d4:	d0a7f803 	ldbu	r2,-24608(gp)
 10197d8:	10803fcc 	andi	r2,r2,255
 10197dc:	1005003a 	cmpeq	r2,r2,zero
 10197e0:	1000041e 	bne	r2,zero,10197f4 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 10197e4:	e0ffff17 	ldw	r3,-4(fp)
 10197e8:	00800484 	movi	r2,18
 10197ec:	18800005 	stb	r2,0(r3)
        return;
 10197f0:	00002b06 	br	10198a0 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 10197f4:	e0bffd17 	ldw	r2,-12(fp)
 10197f8:	10800003 	ldbu	r2,0(r2)
 10197fc:	10803fcc 	andi	r2,r2,255
 1019800:	10bfffc4 	addi	r2,r2,-1
 1019804:	10800128 	cmpgeui	r2,r2,4
 1019808:	10000f1e 	bne	r2,zero,1019848 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101980c:	0005303a 	rdctl	r2,status
 1019810:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019814:	e0fffa17 	ldw	r3,-24(fp)
 1019818:	00bfff84 	movi	r2,-2
 101981c:	1884703a 	and	r2,r3,r2
 1019820:	1001703a 	wrctl	status,r2
  
  return context;
 1019824:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 1019828:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 101982c:	e13ffe17 	ldw	r4,-8(fp)
 1019830:	101b2440 	call	101b244 <OS_StrLen>
 1019834:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 1019838:	e0bffc03 	ldbu	r2,-16(fp)
 101983c:	10800828 	cmpgeui	r2,r2,32
 1019840:	1000051e 	bne	r2,zero,1019858 <OSEventNameSet+0xe8>
 1019844:	00000c06 	br	1019878 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 1019848:	e0ffff17 	ldw	r3,-4(fp)
 101984c:	00800044 	movi	r2,1
 1019850:	18800005 	stb	r2,0(r3)
             return;
 1019854:	00001206 	br	10198a0 <OSEventNameSet+0x130>
 1019858:	e0bffb17 	ldw	r2,-20(fp)
 101985c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019860:	e0bff917 	ldw	r2,-28(fp)
 1019864:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 1019868:	e0ffff17 	ldw	r3,-4(fp)
 101986c:	008002c4 	movi	r2,11
 1019870:	18800005 	stb	r2,0(r3)
        return;
 1019874:	00000a06 	br	10198a0 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 1019878:	e0bffd17 	ldw	r2,-12(fp)
 101987c:	11000384 	addi	r4,r2,14
 1019880:	e17ffe17 	ldw	r5,-8(fp)
 1019884:	101b1c40 	call	101b1c4 <OS_StrCopy>
 1019888:	e0bffb17 	ldw	r2,-20(fp)
 101988c:	e0bff815 	stw	r2,-32(fp)
 1019890:	e0bff817 	ldw	r2,-32(fp)
 1019894:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1019898:	e0bfff17 	ldw	r2,-4(fp)
 101989c:	10000005 	stb	zero,0(r2)
}
 10198a0:	e037883a 	mov	sp,fp
 10198a4:	dfc00117 	ldw	ra,4(sp)
 10198a8:	df000017 	ldw	fp,0(sp)
 10198ac:	dec00204 	addi	sp,sp,8
 10198b0:	f800283a 	ret

010198b4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 10198b4:	deffe704 	addi	sp,sp,-100
 10198b8:	dfc01815 	stw	ra,96(sp)
 10198bc:	df001715 	stw	fp,92(sp)
 10198c0:	df001704 	addi	fp,sp,92
 10198c4:	e13ff615 	stw	r4,-40(fp)
 10198c8:	e17ff715 	stw	r5,-36(fp)
 10198cc:	e1bff815 	stw	r6,-32(fp)
 10198d0:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 10198d4:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 10198d8:	e0800217 	ldw	r2,8(fp)
 10198dc:	1004c03a 	cmpne	r2,r2,zero
 10198e0:	1000021e 	bne	r2,zero,10198ec <OSEventPendMulti+0x38>
        return (0);
 10198e4:	e03fff15 	stw	zero,-4(fp)
 10198e8:	00019906 	br	1019f50 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 10198ec:	e0bff617 	ldw	r2,-40(fp)
 10198f0:	1004c03a 	cmpne	r2,r2,zero
 10198f4:	1000051e 	bne	r2,zero,101990c <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 10198f8:	e0c00217 	ldw	r3,8(fp)
 10198fc:	00800104 	movi	r2,4
 1019900:	18800005 	stb	r2,0(r3)
        return (0);
 1019904:	e03fff15 	stw	zero,-4(fp)
 1019908:	00019106 	br	1019f50 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 101990c:	e0bff717 	ldw	r2,-36(fp)
 1019910:	1004c03a 	cmpne	r2,r2,zero
 1019914:	1000051e 	bne	r2,zero,101992c <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 1019918:	e0c00217 	ldw	r3,8(fp)
 101991c:	00800104 	movi	r2,4
 1019920:	18800005 	stb	r2,0(r3)
        return (0);
 1019924:	e03fff15 	stw	zero,-4(fp)
 1019928:	00018906 	br	1019f50 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 101992c:	e0bff817 	ldw	r2,-32(fp)
 1019930:	1004c03a 	cmpne	r2,r2,zero
 1019934:	1000051e 	bne	r2,zero,101994c <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 1019938:	e0c00217 	ldw	r3,8(fp)
 101993c:	00800104 	movi	r2,4
 1019940:	18800005 	stb	r2,0(r3)
        return (0);
 1019944:	e03fff15 	stw	zero,-4(fp)
 1019948:	00018106 	br	1019f50 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 101994c:	e0bff717 	ldw	r2,-36(fp)
 1019950:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 1019954:	e0bff617 	ldw	r2,-40(fp)
 1019958:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 101995c:	e0bff517 	ldw	r2,-44(fp)
 1019960:	10800017 	ldw	r2,0(r2)
 1019964:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 1019968:	00001806 	br	10199cc <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 101996c:	e0bff417 	ldw	r2,-48(fp)
 1019970:	10800003 	ldbu	r2,0(r2)
 1019974:	10803fcc 	andi	r2,r2,255
 1019978:	e0bffe15 	stw	r2,-8(fp)
 101997c:	e0fffe17 	ldw	r3,-8(fp)
 1019980:	188000a0 	cmpeqi	r2,r3,2
 1019984:	10000b1e 	bne	r2,zero,10199b4 <OSEventPendMulti+0x100>
 1019988:	e0fffe17 	ldw	r3,-8(fp)
 101998c:	188000e0 	cmpeqi	r2,r3,3
 1019990:	1000081e 	bne	r2,zero,10199b4 <OSEventPendMulti+0x100>
 1019994:	e0fffe17 	ldw	r3,-8(fp)
 1019998:	18800060 	cmpeqi	r2,r3,1
 101999c:	1000051e 	bne	r2,zero,10199b4 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 10199a0:	e0c00217 	ldw	r3,8(fp)
 10199a4:	00800044 	movi	r2,1
 10199a8:	18800005 	stb	r2,0(r3)
                 return (0);
 10199ac:	e03fff15 	stw	zero,-4(fp)
 10199b0:	00016706 	br	1019f50 <OSEventPendMulti+0x69c>
        }
        pevents++;
 10199b4:	e0bff517 	ldw	r2,-44(fp)
 10199b8:	10800104 	addi	r2,r2,4
 10199bc:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 10199c0:	e0bff517 	ldw	r2,-44(fp)
 10199c4:	10800017 	ldw	r2,0(r2)
 10199c8:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 10199cc:	e0bff417 	ldw	r2,-48(fp)
 10199d0:	1004c03a 	cmpne	r2,r2,zero
 10199d4:	103fe51e 	bne	r2,zero,101996c <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 10199d8:	d0a7f803 	ldbu	r2,-24608(gp)
 10199dc:	10803fcc 	andi	r2,r2,255
 10199e0:	1005003a 	cmpeq	r2,r2,zero
 10199e4:	1000051e 	bne	r2,zero,10199fc <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 10199e8:	e0c00217 	ldw	r3,8(fp)
 10199ec:	00800084 	movi	r2,2
 10199f0:	18800005 	stb	r2,0(r3)
        return (0);
 10199f4:	e03fff15 	stw	zero,-4(fp)
 10199f8:	00015506 	br	1019f50 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 10199fc:	d0a7ea03 	ldbu	r2,-24664(gp)
 1019a00:	10803fcc 	andi	r2,r2,255
 1019a04:	1005003a 	cmpeq	r2,r2,zero
 1019a08:	1000051e 	bne	r2,zero,1019a20 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 1019a0c:	e0c00217 	ldw	r3,8(fp)
 1019a10:	00800344 	movi	r2,13
 1019a14:	18800005 	stb	r2,0(r3)
        return (0);
 1019a18:	e03fff15 	stw	zero,-4(fp)
 1019a1c:	00014c06 	br	1019f50 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019a20:	0005303a 	rdctl	r2,status
 1019a24:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019a28:	e0ffef17 	ldw	r3,-68(fp)
 1019a2c:	00bfff84 	movi	r2,-2
 1019a30:	1884703a 	and	r2,r3,r2
 1019a34:	1001703a 	wrctl	status,r2
  
  return context;
 1019a38:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 1019a3c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 1019a40:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 1019a44:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 1019a48:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 1019a4c:	e0bff617 	ldw	r2,-40(fp)
 1019a50:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 1019a54:	e0bff517 	ldw	r2,-44(fp)
 1019a58:	10800017 	ldw	r2,0(r2)
 1019a5c:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 1019a60:	00008f06 	br	1019ca0 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 1019a64:	e0bff417 	ldw	r2,-48(fp)
 1019a68:	10800003 	ldbu	r2,0(r2)
 1019a6c:	10803fcc 	andi	r2,r2,255
 1019a70:	e0bffd15 	stw	r2,-12(fp)
 1019a74:	e0fffd17 	ldw	r3,-12(fp)
 1019a78:	188000a0 	cmpeqi	r2,r3,2
 1019a7c:	1000441e 	bne	r2,zero,1019b90 <OSEventPendMulti+0x2dc>
 1019a80:	e0fffd17 	ldw	r3,-12(fp)
 1019a84:	188000e0 	cmpeqi	r2,r3,3
 1019a88:	1000041e 	bne	r2,zero,1019a9c <OSEventPendMulti+0x1e8>
 1019a8c:	e0fffd17 	ldw	r3,-12(fp)
 1019a90:	18800060 	cmpeqi	r2,r3,1
 1019a94:	1000211e 	bne	r2,zero,1019b1c <OSEventPendMulti+0x268>
 1019a98:	00006f06 	br	1019c58 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 1019a9c:	e0bff417 	ldw	r2,-48(fp)
 1019aa0:	1080020b 	ldhu	r2,8(r2)
 1019aa4:	10bfffcc 	andi	r2,r2,65535
 1019aa8:	1005003a 	cmpeq	r2,r2,zero
 1019aac:	1000171e 	bne	r2,zero,1019b0c <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 1019ab0:	e0bff417 	ldw	r2,-48(fp)
 1019ab4:	1080020b 	ldhu	r2,8(r2)
 1019ab8:	10bfffc4 	addi	r2,r2,-1
 1019abc:	1007883a 	mov	r3,r2
 1019ac0:	e0bff417 	ldw	r2,-48(fp)
 1019ac4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 1019ac8:	e0fff717 	ldw	r3,-36(fp)
 1019acc:	e0bff417 	ldw	r2,-48(fp)
 1019ad0:	18800015 	stw	r2,0(r3)
 1019ad4:	e0bff717 	ldw	r2,-36(fp)
 1019ad8:	10800104 	addi	r2,r2,4
 1019adc:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 1019ae0:	00800044 	movi	r2,1
 1019ae4:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 1019ae8:	e0bff817 	ldw	r2,-32(fp)
 1019aec:	10000015 	stw	zero,0(r2)
 1019af0:	e0bff817 	ldw	r2,-32(fp)
 1019af4:	10800104 	addi	r2,r2,4
 1019af8:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 1019afc:	e0bff18b 	ldhu	r2,-58(fp)
 1019b00:	10800044 	addi	r2,r2,1
 1019b04:	e0bff18d 	sth	r2,-58(fp)
 1019b08:	00005f06 	br	1019c88 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 1019b0c:	e0bff103 	ldbu	r2,-60(fp)
 1019b10:	10800054 	ori	r2,r2,1
 1019b14:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 1019b18:	00005b06 	br	1019c88 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 1019b1c:	e0bff417 	ldw	r2,-48(fp)
 1019b20:	10800117 	ldw	r2,4(r2)
 1019b24:	1005003a 	cmpeq	r2,r2,zero
 1019b28:	1000151e 	bne	r2,zero,1019b80 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 1019b2c:	e0bff417 	ldw	r2,-48(fp)
 1019b30:	10c00117 	ldw	r3,4(r2)
 1019b34:	e0bff817 	ldw	r2,-32(fp)
 1019b38:	10c00015 	stw	r3,0(r2)
 1019b3c:	e0bff817 	ldw	r2,-32(fp)
 1019b40:	10800104 	addi	r2,r2,4
 1019b44:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 1019b48:	e0bff417 	ldw	r2,-48(fp)
 1019b4c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 1019b50:	e0fff717 	ldw	r3,-36(fp)
 1019b54:	e0bff417 	ldw	r2,-48(fp)
 1019b58:	18800015 	stw	r2,0(r3)
 1019b5c:	e0bff717 	ldw	r2,-36(fp)
 1019b60:	10800104 	addi	r2,r2,4
 1019b64:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 1019b68:	00800044 	movi	r2,1
 1019b6c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 1019b70:	e0bff18b 	ldhu	r2,-58(fp)
 1019b74:	10800044 	addi	r2,r2,1
 1019b78:	e0bff18d 	sth	r2,-58(fp)
 1019b7c:	00004206 	br	1019c88 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 1019b80:	e0bff103 	ldbu	r2,-60(fp)
 1019b84:	10800094 	ori	r2,r2,2
 1019b88:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 1019b8c:	00003e06 	br	1019c88 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 1019b90:	e0bff417 	ldw	r2,-48(fp)
 1019b94:	10800117 	ldw	r2,4(r2)
 1019b98:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 1019b9c:	e0bff317 	ldw	r2,-52(fp)
 1019ba0:	1080058b 	ldhu	r2,22(r2)
 1019ba4:	10bfffcc 	andi	r2,r2,65535
 1019ba8:	1005003a 	cmpeq	r2,r2,zero
 1019bac:	1000261e 	bne	r2,zero,1019c48 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 1019bb0:	e0bff317 	ldw	r2,-52(fp)
 1019bb4:	11000417 	ldw	r4,16(r2)
 1019bb8:	20c00017 	ldw	r3,0(r4)
 1019bbc:	e0bff817 	ldw	r2,-32(fp)
 1019bc0:	10c00015 	stw	r3,0(r2)
 1019bc4:	e0bff817 	ldw	r2,-32(fp)
 1019bc8:	10800104 	addi	r2,r2,4
 1019bcc:	e0bff815 	stw	r2,-32(fp)
 1019bd0:	20c00104 	addi	r3,r4,4
 1019bd4:	e0bff317 	ldw	r2,-52(fp)
 1019bd8:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 1019bdc:	e0bff317 	ldw	r2,-52(fp)
 1019be0:	10c00417 	ldw	r3,16(r2)
 1019be4:	e0bff317 	ldw	r2,-52(fp)
 1019be8:	10800217 	ldw	r2,8(r2)
 1019bec:	1880041e 	bne	r3,r2,1019c00 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 1019bf0:	e0bff317 	ldw	r2,-52(fp)
 1019bf4:	10c00117 	ldw	r3,4(r2)
 1019bf8:	e0bff317 	ldw	r2,-52(fp)
 1019bfc:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 1019c00:	e0bff317 	ldw	r2,-52(fp)
 1019c04:	1080058b 	ldhu	r2,22(r2)
 1019c08:	10bfffc4 	addi	r2,r2,-1
 1019c0c:	1007883a 	mov	r3,r2
 1019c10:	e0bff317 	ldw	r2,-52(fp)
 1019c14:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 1019c18:	e0fff717 	ldw	r3,-36(fp)
 1019c1c:	e0bff417 	ldw	r2,-48(fp)
 1019c20:	18800015 	stw	r2,0(r3)
 1019c24:	e0bff717 	ldw	r2,-36(fp)
 1019c28:	10800104 	addi	r2,r2,4
 1019c2c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 1019c30:	00800044 	movi	r2,1
 1019c34:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 1019c38:	e0bff18b 	ldhu	r2,-58(fp)
 1019c3c:	10800044 	addi	r2,r2,1
 1019c40:	e0bff18d 	sth	r2,-58(fp)
 1019c44:	00001006 	br	1019c88 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 1019c48:	e0bff103 	ldbu	r2,-60(fp)
 1019c4c:	10800114 	ori	r2,r2,4
 1019c50:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 1019c54:	00000c06 	br	1019c88 <OSEventPendMulti+0x3d4>
 1019c58:	e0bff017 	ldw	r2,-64(fp)
 1019c5c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019c60:	e0bfee17 	ldw	r2,-72(fp)
 1019c64:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 1019c68:	e0bff717 	ldw	r2,-36(fp)
 1019c6c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 1019c70:	e0c00217 	ldw	r3,8(fp)
 1019c74:	00800044 	movi	r2,1
 1019c78:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 1019c7c:	e0bff18b 	ldhu	r2,-58(fp)
 1019c80:	e0bfff15 	stw	r2,-4(fp)
 1019c84:	0000b206 	br	1019f50 <OSEventPendMulti+0x69c>
        }
        pevents++;
 1019c88:	e0bff517 	ldw	r2,-44(fp)
 1019c8c:	10800104 	addi	r2,r2,4
 1019c90:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 1019c94:	e0bff517 	ldw	r2,-44(fp)
 1019c98:	10800017 	ldw	r2,0(r2)
 1019c9c:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 1019ca0:	e0bff417 	ldw	r2,-48(fp)
 1019ca4:	1004c03a 	cmpne	r2,r2,zero
 1019ca8:	103f6e1e 	bne	r2,zero,1019a64 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 1019cac:	e0bff203 	ldbu	r2,-56(fp)
 1019cb0:	10800058 	cmpnei	r2,r2,1
 1019cb4:	10000b1e 	bne	r2,zero,1019ce4 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 1019cb8:	e0bff717 	ldw	r2,-36(fp)
 1019cbc:	10000015 	stw	zero,0(r2)
 1019cc0:	e0bff017 	ldw	r2,-64(fp)
 1019cc4:	e0bfed15 	stw	r2,-76(fp)
 1019cc8:	e0bfed17 	ldw	r2,-76(fp)
 1019ccc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 1019cd0:	e0800217 	ldw	r2,8(fp)
 1019cd4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 1019cd8:	e0fff18b 	ldhu	r3,-58(fp)
 1019cdc:	e0ffff15 	stw	r3,-4(fp)
 1019ce0:	00009b06 	br	1019f50 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 1019ce4:	d127f917 	ldw	r4,-24604(gp)
 1019ce8:	d0a7f917 	ldw	r2,-24604(gp)
 1019cec:	10c00c03 	ldbu	r3,48(r2)
 1019cf0:	e0bff103 	ldbu	r2,-60(fp)
 1019cf4:	1884b03a 	or	r2,r3,r2
 1019cf8:	1007883a 	mov	r3,r2
 1019cfc:	00bfe004 	movi	r2,-128
 1019d00:	1884b03a 	or	r2,r3,r2
 1019d04:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1019d08:	d0a7f917 	ldw	r2,-24604(gp)
 1019d0c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 1019d10:	d0e7f917 	ldw	r3,-24604(gp)
 1019d14:	e0bff90b 	ldhu	r2,-28(fp)
 1019d18:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 1019d1c:	e13ff617 	ldw	r4,-40(fp)
 1019d20:	101a8e40 	call	101a8e4 <OS_EventTaskWaitMulti>
 1019d24:	e0bff017 	ldw	r2,-64(fp)
 1019d28:	e0bfec15 	stw	r2,-80(fp)
 1019d2c:	e0bfec17 	ldw	r2,-80(fp)
 1019d30:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 1019d34:	101b0800 	call	101b080 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019d38:	0005303a 	rdctl	r2,status
 1019d3c:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019d40:	e0ffeb17 	ldw	r3,-84(fp)
 1019d44:	00bfff84 	movi	r2,-2
 1019d48:	1884703a 	and	r2,r3,r2
 1019d4c:	1001703a 	wrctl	status,r2
  
  return context;
 1019d50:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 1019d54:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 1019d58:	d0a7f917 	ldw	r2,-24604(gp)
 1019d5c:	10800c43 	ldbu	r2,49(r2)
 1019d60:	10803fcc 	andi	r2,r2,255
 1019d64:	e0bffc15 	stw	r2,-16(fp)
 1019d68:	e0fffc17 	ldw	r3,-16(fp)
 1019d6c:	1805003a 	cmpeq	r2,r3,zero
 1019d70:	1000041e 	bne	r2,zero,1019d84 <OSEventPendMulti+0x4d0>
 1019d74:	e0fffc17 	ldw	r3,-16(fp)
 1019d78:	188000a0 	cmpeqi	r2,r3,2
 1019d7c:	1000011e 	bne	r2,zero,1019d84 <OSEventPendMulti+0x4d0>
 1019d80:	00001906 	br	1019de8 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 1019d84:	d0a7f917 	ldw	r2,-24604(gp)
 1019d88:	10800717 	ldw	r2,28(r2)
 1019d8c:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 1019d90:	e0bff417 	ldw	r2,-48(fp)
 1019d94:	1005003a 	cmpeq	r2,r2,zero
 1019d98:	10000c1e 	bne	r2,zero,1019dcc <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 1019d9c:	e0fff717 	ldw	r3,-36(fp)
 1019da0:	e0bff417 	ldw	r2,-48(fp)
 1019da4:	18800015 	stw	r2,0(r3)
 1019da8:	e0bff717 	ldw	r2,-36(fp)
 1019dac:	10800104 	addi	r2,r2,4
 1019db0:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 1019db4:	e0bff717 	ldw	r2,-36(fp)
 1019db8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 1019dbc:	e0bff18b 	ldhu	r2,-58(fp)
 1019dc0:	10800044 	addi	r2,r2,1
 1019dc4:	e0bff18d 	sth	r2,-58(fp)
 1019dc8:	00000a06 	br	1019df4 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 1019dcc:	d0a7f917 	ldw	r2,-24604(gp)
 1019dd0:	00c00044 	movi	r3,1
 1019dd4:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 1019dd8:	d127f917 	ldw	r4,-24604(gp)
 1019ddc:	e17ff617 	ldw	r5,-40(fp)
 1019de0:	101aaf00 	call	101aaf0 <OS_EventTaskRemoveMulti>
             }
			 break;
 1019de4:	00000306 	br	1019df4 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 1019de8:	d127f917 	ldw	r4,-24604(gp)
 1019dec:	e17ff617 	ldw	r5,-40(fp)
 1019df0:	101aaf00 	call	101aaf0 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 1019df4:	d0a7f917 	ldw	r2,-24604(gp)
 1019df8:	10800c43 	ldbu	r2,49(r2)
 1019dfc:	10803fcc 	andi	r2,r2,255
 1019e00:	e0bffb15 	stw	r2,-20(fp)
 1019e04:	e0fffb17 	ldw	r3,-20(fp)
 1019e08:	1805003a 	cmpeq	r2,r3,zero
 1019e0c:	1000041e 	bne	r2,zero,1019e20 <OSEventPendMulti+0x56c>
 1019e10:	e0fffb17 	ldw	r3,-20(fp)
 1019e14:	188000a0 	cmpeqi	r2,r3,2
 1019e18:	10002c1e 	bne	r2,zero,1019ecc <OSEventPendMulti+0x618>
 1019e1c:	00003406 	br	1019ef0 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 1019e20:	e0bff417 	ldw	r2,-48(fp)
 1019e24:	10800003 	ldbu	r2,0(r2)
 1019e28:	10803fcc 	andi	r2,r2,255
 1019e2c:	e0bffa15 	stw	r2,-24(fp)
 1019e30:	e0fffa17 	ldw	r3,-24(fp)
 1019e34:	18800050 	cmplti	r2,r3,1
 1019e38:	1000151e 	bne	r2,zero,1019e90 <OSEventPendMulti+0x5dc>
 1019e3c:	e0fffa17 	ldw	r3,-24(fp)
 1019e40:	188000d0 	cmplti	r2,r3,3
 1019e44:	10000a1e 	bne	r2,zero,1019e70 <OSEventPendMulti+0x5bc>
 1019e48:	e0fffa17 	ldw	r3,-24(fp)
 1019e4c:	188000e0 	cmpeqi	r2,r3,3
 1019e50:	1000011e 	bne	r2,zero,1019e58 <OSEventPendMulti+0x5a4>
 1019e54:	00000e06 	br	1019e90 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 1019e58:	e0bff817 	ldw	r2,-32(fp)
 1019e5c:	10000015 	stw	zero,0(r2)
 1019e60:	e0bff817 	ldw	r2,-32(fp)
 1019e64:	10800104 	addi	r2,r2,4
 1019e68:	e0bff815 	stw	r2,-32(fp)
                      break;
 1019e6c:	00001406 	br	1019ec0 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 1019e70:	d0a7f917 	ldw	r2,-24604(gp)
 1019e74:	10c00917 	ldw	r3,36(r2)
 1019e78:	e0bff817 	ldw	r2,-32(fp)
 1019e7c:	10c00015 	stw	r3,0(r2)
 1019e80:	e0bff817 	ldw	r2,-32(fp)
 1019e84:	10800104 	addi	r2,r2,4
 1019e88:	e0bff815 	stw	r2,-32(fp)
                      break;
 1019e8c:	00000c06 	br	1019ec0 <OSEventPendMulti+0x60c>
 1019e90:	e0bff017 	ldw	r2,-64(fp)
 1019e94:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019e98:	e0bfea17 	ldw	r2,-88(fp)
 1019e9c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 1019ea0:	e0bff717 	ldw	r2,-36(fp)
 1019ea4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 1019ea8:	e0c00217 	ldw	r3,8(fp)
 1019eac:	00800044 	movi	r2,1
 1019eb0:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 1019eb4:	e0bff18b 	ldhu	r2,-58(fp)
 1019eb8:	e0bfff15 	stw	r2,-4(fp)
 1019ebc:	00002406 	br	1019f50 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 1019ec0:	e0800217 	ldw	r2,8(fp)
 1019ec4:	10000005 	stb	zero,0(r2)
             break;
 1019ec8:	00001106 	br	1019f10 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 1019ecc:	e0bff817 	ldw	r2,-32(fp)
 1019ed0:	10000015 	stw	zero,0(r2)
 1019ed4:	e0bff817 	ldw	r2,-32(fp)
 1019ed8:	10800104 	addi	r2,r2,4
 1019edc:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 1019ee0:	e0c00217 	ldw	r3,8(fp)
 1019ee4:	00800384 	movi	r2,14
 1019ee8:	18800005 	stb	r2,0(r3)
             break;
 1019eec:	00000806 	br	1019f10 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 1019ef0:	e0bff817 	ldw	r2,-32(fp)
 1019ef4:	10000015 	stw	zero,0(r2)
 1019ef8:	e0bff817 	ldw	r2,-32(fp)
 1019efc:	10800104 	addi	r2,r2,4
 1019f00:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 1019f04:	e0c00217 	ldw	r3,8(fp)
 1019f08:	00800284 	movi	r2,10
 1019f0c:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 1019f10:	d0a7f917 	ldw	r2,-24604(gp)
 1019f14:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 1019f18:	d0a7f917 	ldw	r2,-24604(gp)
 1019f1c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 1019f20:	d0a7f917 	ldw	r2,-24604(gp)
 1019f24:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1019f28:	d0a7f917 	ldw	r2,-24604(gp)
 1019f2c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 1019f30:	d0a7f917 	ldw	r2,-24604(gp)
 1019f34:	10000915 	stw	zero,36(r2)
 1019f38:	e0bff017 	ldw	r2,-64(fp)
 1019f3c:	e0bfe915 	stw	r2,-92(fp)
 1019f40:	e0bfe917 	ldw	r2,-92(fp)
 1019f44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 1019f48:	e0fff18b 	ldhu	r3,-58(fp)
 1019f4c:	e0ffff15 	stw	r3,-4(fp)
 1019f50:	e0bfff17 	ldw	r2,-4(fp)
}
 1019f54:	e037883a 	mov	sp,fp
 1019f58:	dfc00117 	ldw	ra,4(sp)
 1019f5c:	df000017 	ldw	fp,0(sp)
 1019f60:	dec00204 	addi	sp,sp,8
 1019f64:	f800283a 	ret

01019f68 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 1019f68:	defffe04 	addi	sp,sp,-8
 1019f6c:	dfc00115 	stw	ra,4(sp)
 1019f70:	df000015 	stw	fp,0(sp)
 1019f74:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 1019f78:	1023d980 	call	1023d98 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 1019f7c:	101ad380 	call	101ad38 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 1019f80:	101ad7c0 	call	101ad7c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 1019f84:	101aee00 	call	101aee0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 1019f88:	101ac5c0 	call	101ac5c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 1019f8c:	101cf900 	call	101cf90 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 1019f90:	101d9680 	call	101d968 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 1019f94:	101ecc00 	call	101ecc0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 1019f98:	101ade80 	call	101ade8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 1019f9c:	101ae640 	call	101ae64 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 1019fa0:	1023db40 	call	1023db4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 1019fa4:	101b7680 	call	101b768 <OSDebugInit>
#endif
}
 1019fa8:	e037883a 	mov	sp,fp
 1019fac:	dfc00117 	ldw	ra,4(sp)
 1019fb0:	df000017 	ldw	fp,0(sp)
 1019fb4:	dec00204 	addi	sp,sp,8
 1019fb8:	f800283a 	ret

01019fbc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 1019fbc:	defffc04 	addi	sp,sp,-16
 1019fc0:	df000315 	stw	fp,12(sp)
 1019fc4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1019fc8:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 1019fcc:	d0a7ea43 	ldbu	r2,-24663(gp)
 1019fd0:	10803fcc 	andi	r2,r2,255
 1019fd4:	10800058 	cmpnei	r2,r2,1
 1019fd8:	1000131e 	bne	r2,zero,101a028 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019fdc:	0005303a 	rdctl	r2,status
 1019fe0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019fe4:	e0fffe17 	ldw	r3,-8(fp)
 1019fe8:	00bfff84 	movi	r2,-2
 1019fec:	1884703a 	and	r2,r3,r2
 1019ff0:	1001703a 	wrctl	status,r2
  
  return context;
 1019ff4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 1019ff8:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 1019ffc:	d0a7f803 	ldbu	r2,-24608(gp)
 101a000:	10803fcc 	andi	r2,r2,255
 101a004:	10803fe0 	cmpeqi	r2,r2,255
 101a008:	1000031e 	bne	r2,zero,101a018 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 101a00c:	d0a7f803 	ldbu	r2,-24608(gp)
 101a010:	10800044 	addi	r2,r2,1
 101a014:	d0a7f805 	stb	r2,-24608(gp)
 101a018:	e0bfff17 	ldw	r2,-4(fp)
 101a01c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a020:	e0bffd17 	ldw	r2,-12(fp)
 101a024:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 101a028:	e037883a 	mov	sp,fp
 101a02c:	df000017 	ldw	fp,0(sp)
 101a030:	dec00104 	addi	sp,sp,4
 101a034:	f800283a 	ret

0101a038 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 101a038:	defffb04 	addi	sp,sp,-20
 101a03c:	dfc00415 	stw	ra,16(sp)
 101a040:	df000315 	stw	fp,12(sp)
 101a044:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101a048:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 101a04c:	d0a7ea43 	ldbu	r2,-24663(gp)
 101a050:	10803fcc 	andi	r2,r2,255
 101a054:	10800058 	cmpnei	r2,r2,1
 101a058:	1000321e 	bne	r2,zero,101a124 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a05c:	0005303a 	rdctl	r2,status
 101a060:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a064:	e0fffe17 	ldw	r3,-8(fp)
 101a068:	00bfff84 	movi	r2,-2
 101a06c:	1884703a 	and	r2,r3,r2
 101a070:	1001703a 	wrctl	status,r2
  
  return context;
 101a074:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 101a078:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 101a07c:	d0a7f803 	ldbu	r2,-24608(gp)
 101a080:	10803fcc 	andi	r2,r2,255
 101a084:	1005003a 	cmpeq	r2,r2,zero
 101a088:	1000031e 	bne	r2,zero,101a098 <OSIntExit+0x60>
            OSIntNesting--;
 101a08c:	d0a7f803 	ldbu	r2,-24608(gp)
 101a090:	10bfffc4 	addi	r2,r2,-1
 101a094:	d0a7f805 	stb	r2,-24608(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 101a098:	d0a7f803 	ldbu	r2,-24608(gp)
 101a09c:	10803fcc 	andi	r2,r2,255
 101a0a0:	1004c03a 	cmpne	r2,r2,zero
 101a0a4:	10001b1e 	bne	r2,zero,101a114 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 101a0a8:	d0a7ea03 	ldbu	r2,-24664(gp)
 101a0ac:	10803fcc 	andi	r2,r2,255
 101a0b0:	1004c03a 	cmpne	r2,r2,zero
 101a0b4:	1000171e 	bne	r2,zero,101a114 <OSIntExit+0xdc>
                OS_SchedNew();
 101a0b8:	101b1540 	call	101b154 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 101a0bc:	d0a7ec03 	ldbu	r2,-24656(gp)
 101a0c0:	d0e7ec43 	ldbu	r3,-24655(gp)
 101a0c4:	11003fcc 	andi	r4,r2,255
 101a0c8:	18803fcc 	andi	r2,r3,255
 101a0cc:	20801126 	beq	r4,r2,101a114 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 101a0d0:	d0a7ec03 	ldbu	r2,-24656(gp)
 101a0d4:	10803fcc 	andi	r2,r2,255
 101a0d8:	00c040f4 	movhi	r3,259
 101a0dc:	18dda904 	addi	r3,r3,30372
 101a0e0:	1085883a 	add	r2,r2,r2
 101a0e4:	1085883a 	add	r2,r2,r2
 101a0e8:	10c5883a 	add	r2,r2,r3
 101a0ec:	10800017 	ldw	r2,0(r2)
 101a0f0:	d0a7f415 	stw	r2,-24624(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 101a0f4:	d0e7f417 	ldw	r3,-24624(gp)
 101a0f8:	18800e17 	ldw	r2,56(r3)
 101a0fc:	10800044 	addi	r2,r2,1
 101a100:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 101a104:	d0a7ef17 	ldw	r2,-24644(gp)
 101a108:	10800044 	addi	r2,r2,1
 101a10c:	d0a7ef15 	stw	r2,-24644(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 101a110:	10239240 	call	1023924 <OSCtxSw>
 101a114:	e0bfff17 	ldw	r2,-4(fp)
 101a118:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a11c:	e0bffd17 	ldw	r2,-12(fp)
 101a120:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 101a124:	e037883a 	mov	sp,fp
 101a128:	dfc00117 	ldw	ra,4(sp)
 101a12c:	df000017 	ldw	fp,0(sp)
 101a130:	dec00204 	addi	sp,sp,8
 101a134:	f800283a 	ret

0101a138 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 101a138:	defffc04 	addi	sp,sp,-16
 101a13c:	df000315 	stw	fp,12(sp)
 101a140:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101a144:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 101a148:	d0a7ea43 	ldbu	r2,-24663(gp)
 101a14c:	10803fcc 	andi	r2,r2,255
 101a150:	10800058 	cmpnei	r2,r2,1
 101a154:	1000171e 	bne	r2,zero,101a1b4 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a158:	0005303a 	rdctl	r2,status
 101a15c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a160:	e0fffe17 	ldw	r3,-8(fp)
 101a164:	00bfff84 	movi	r2,-2
 101a168:	1884703a 	and	r2,r3,r2
 101a16c:	1001703a 	wrctl	status,r2
  
  return context;
 101a170:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 101a174:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 101a178:	d0a7f803 	ldbu	r2,-24608(gp)
 101a17c:	10803fcc 	andi	r2,r2,255
 101a180:	1004c03a 	cmpne	r2,r2,zero
 101a184:	1000071e 	bne	r2,zero,101a1a4 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 101a188:	d0a7ea03 	ldbu	r2,-24664(gp)
 101a18c:	10803fcc 	andi	r2,r2,255
 101a190:	10803fe0 	cmpeqi	r2,r2,255
 101a194:	1000031e 	bne	r2,zero,101a1a4 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 101a198:	d0a7ea03 	ldbu	r2,-24664(gp)
 101a19c:	10800044 	addi	r2,r2,1
 101a1a0:	d0a7ea05 	stb	r2,-24664(gp)
 101a1a4:	e0bfff17 	ldw	r2,-4(fp)
 101a1a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a1ac:	e0bffd17 	ldw	r2,-12(fp)
 101a1b0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 101a1b4:	e037883a 	mov	sp,fp
 101a1b8:	df000017 	ldw	fp,0(sp)
 101a1bc:	dec00104 	addi	sp,sp,4
 101a1c0:	f800283a 	ret

0101a1c4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 101a1c4:	defff804 	addi	sp,sp,-32
 101a1c8:	dfc00715 	stw	ra,28(sp)
 101a1cc:	df000615 	stw	fp,24(sp)
 101a1d0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101a1d4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 101a1d8:	d0a7ea43 	ldbu	r2,-24663(gp)
 101a1dc:	10803fcc 	andi	r2,r2,255
 101a1e0:	10800058 	cmpnei	r2,r2,1
 101a1e4:	10002b1e 	bne	r2,zero,101a294 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a1e8:	0005303a 	rdctl	r2,status
 101a1ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a1f0:	e0fffe17 	ldw	r3,-8(fp)
 101a1f4:	00bfff84 	movi	r2,-2
 101a1f8:	1884703a 	and	r2,r3,r2
 101a1fc:	1001703a 	wrctl	status,r2
  
  return context;
 101a200:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 101a204:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 101a208:	d0a7ea03 	ldbu	r2,-24664(gp)
 101a20c:	10803fcc 	andi	r2,r2,255
 101a210:	1005003a 	cmpeq	r2,r2,zero
 101a214:	10001b1e 	bne	r2,zero,101a284 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 101a218:	d0a7ea03 	ldbu	r2,-24664(gp)
 101a21c:	10bfffc4 	addi	r2,r2,-1
 101a220:	d0a7ea05 	stb	r2,-24664(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 101a224:	d0a7ea03 	ldbu	r2,-24664(gp)
 101a228:	10803fcc 	andi	r2,r2,255
 101a22c:	1004c03a 	cmpne	r2,r2,zero
 101a230:	10000f1e 	bne	r2,zero,101a270 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 101a234:	d0a7f803 	ldbu	r2,-24608(gp)
 101a238:	10803fcc 	andi	r2,r2,255
 101a23c:	1004c03a 	cmpne	r2,r2,zero
 101a240:	1000061e 	bne	r2,zero,101a25c <OSSchedUnlock+0x98>
 101a244:	e0bfff17 	ldw	r2,-4(fp)
 101a248:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a24c:	e0bffd17 	ldw	r2,-12(fp)
 101a250:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 101a254:	101b0800 	call	101b080 <OS_Sched>
 101a258:	00000e06 	br	101a294 <OSSchedUnlock+0xd0>
 101a25c:	e0bfff17 	ldw	r2,-4(fp)
 101a260:	e0bffc15 	stw	r2,-16(fp)
 101a264:	e0bffc17 	ldw	r2,-16(fp)
 101a268:	1001703a 	wrctl	status,r2
 101a26c:	00000906 	br	101a294 <OSSchedUnlock+0xd0>
 101a270:	e0bfff17 	ldw	r2,-4(fp)
 101a274:	e0bffb15 	stw	r2,-20(fp)
 101a278:	e0bffb17 	ldw	r2,-20(fp)
 101a27c:	1001703a 	wrctl	status,r2
 101a280:	00000406 	br	101a294 <OSSchedUnlock+0xd0>
 101a284:	e0bfff17 	ldw	r2,-4(fp)
 101a288:	e0bffa15 	stw	r2,-24(fp)
 101a28c:	e0bffa17 	ldw	r2,-24(fp)
 101a290:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 101a294:	e037883a 	mov	sp,fp
 101a298:	dfc00117 	ldw	ra,4(sp)
 101a29c:	df000017 	ldw	fp,0(sp)
 101a2a0:	dec00204 	addi	sp,sp,8
 101a2a4:	f800283a 	ret

0101a2a8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 101a2a8:	defffe04 	addi	sp,sp,-8
 101a2ac:	dfc00115 	stw	ra,4(sp)
 101a2b0:	df000015 	stw	fp,0(sp)
 101a2b4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 101a2b8:	d0a7ea43 	ldbu	r2,-24663(gp)
 101a2bc:	10803fcc 	andi	r2,r2,255
 101a2c0:	1004c03a 	cmpne	r2,r2,zero
 101a2c4:	10000f1e 	bne	r2,zero,101a304 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 101a2c8:	101b1540 	call	101b154 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 101a2cc:	d0a7ec03 	ldbu	r2,-24656(gp)
 101a2d0:	d0a7ec45 	stb	r2,-24655(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 101a2d4:	d0a7ec03 	ldbu	r2,-24656(gp)
 101a2d8:	10803fcc 	andi	r2,r2,255
 101a2dc:	00c040f4 	movhi	r3,259
 101a2e0:	18dda904 	addi	r3,r3,30372
 101a2e4:	1085883a 	add	r2,r2,r2
 101a2e8:	1085883a 	add	r2,r2,r2
 101a2ec:	10c5883a 	add	r2,r2,r3
 101a2f0:	10800017 	ldw	r2,0(r2)
 101a2f4:	d0a7f415 	stw	r2,-24624(gp)
        OSTCBCur      = OSTCBHighRdy;
 101a2f8:	d0a7f417 	ldw	r2,-24624(gp)
 101a2fc:	d0a7f915 	stw	r2,-24604(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 101a300:	10239b00 	call	10239b0 <OSStartHighRdy>
    }
}
 101a304:	e037883a 	mov	sp,fp
 101a308:	dfc00117 	ldw	ra,4(sp)
 101a30c:	df000017 	ldw	fp,0(sp)
 101a310:	dec00204 	addi	sp,sp,8
 101a314:	f800283a 	ret

0101a318 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 101a318:	defff904 	addi	sp,sp,-28
 101a31c:	dfc00615 	stw	ra,24(sp)
 101a320:	df000515 	stw	fp,20(sp)
 101a324:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101a328:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 101a32c:	01000084 	movi	r4,2
 101a330:	10213740 	call	1021374 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a334:	0005303a 	rdctl	r2,status
 101a338:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a33c:	e0fffe17 	ldw	r3,-8(fp)
 101a340:	00bfff84 	movi	r2,-2
 101a344:	1884703a 	and	r2,r3,r2
 101a348:	1001703a 	wrctl	status,r2
  
  return context;
 101a34c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 101a350:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 101a354:	d027eb15 	stw	zero,-24660(gp)
 101a358:	e0bfff17 	ldw	r2,-4(fp)
 101a35c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a360:	e0bffd17 	ldw	r2,-12(fp)
 101a364:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 101a368:	01001904 	movi	r4,100
 101a36c:	10213740 	call	1021374 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a370:	0005303a 	rdctl	r2,status
 101a374:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a378:	e0fffc17 	ldw	r3,-16(fp)
 101a37c:	00bfff84 	movi	r2,-2
 101a380:	1884703a 	and	r2,r3,r2
 101a384:	1001703a 	wrctl	status,r2
  
  return context;
 101a388:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 101a38c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 101a390:	d0a7eb17 	ldw	r2,-24660(gp)
 101a394:	d0a7f015 	stw	r2,-24640(gp)
    OSStatRdy    = OS_TRUE;
 101a398:	00800044 	movi	r2,1
 101a39c:	d0a7fc05 	stb	r2,-24592(gp)
 101a3a0:	e0bfff17 	ldw	r2,-4(fp)
 101a3a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a3a8:	e0bffb17 	ldw	r2,-20(fp)
 101a3ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 101a3b0:	e037883a 	mov	sp,fp
 101a3b4:	dfc00117 	ldw	ra,4(sp)
 101a3b8:	df000017 	ldw	fp,0(sp)
 101a3bc:	dec00204 	addi	sp,sp,8
 101a3c0:	f800283a 	ret

0101a3c4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 101a3c4:	defff604 	addi	sp,sp,-40
 101a3c8:	dfc00915 	stw	ra,36(sp)
 101a3cc:	df000815 	stw	fp,32(sp)
 101a3d0:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 101a3d4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 101a3d8:	1023d7c0 	call	1023d7c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a3dc:	0005303a 	rdctl	r2,status
 101a3e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a3e4:	e0fffb17 	ldw	r3,-20(fp)
 101a3e8:	00bfff84 	movi	r2,-2
 101a3ec:	1884703a 	and	r2,r3,r2
 101a3f0:	1001703a 	wrctl	status,r2
  
  return context;
 101a3f4:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 101a3f8:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 101a3fc:	d0a7fa17 	ldw	r2,-24600(gp)
 101a400:	10800044 	addi	r2,r2,1
 101a404:	d0a7fa15 	stw	r2,-24600(gp)
 101a408:	e0bffc17 	ldw	r2,-16(fp)
 101a40c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a410:	e0bffa17 	ldw	r2,-24(fp)
 101a414:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 101a418:	d0a7ea43 	ldbu	r2,-24663(gp)
 101a41c:	10803fcc 	andi	r2,r2,255
 101a420:	10800058 	cmpnei	r2,r2,1
 101a424:	1000721e 	bne	r2,zero,101a5f0 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 101a428:	d0a7ee03 	ldbu	r2,-24648(gp)
 101a42c:	10803fcc 	andi	r2,r2,255
 101a430:	e0bfff15 	stw	r2,-4(fp)
 101a434:	e0ffff17 	ldw	r3,-4(fp)
 101a438:	18800060 	cmpeqi	r2,r3,1
 101a43c:	10000a1e 	bne	r2,zero,101a468 <OSTimeTick+0xa4>
 101a440:	e0ffff17 	ldw	r3,-4(fp)
 101a444:	188000a0 	cmpeqi	r2,r3,2
 101a448:	1000091e 	bne	r2,zero,101a470 <OSTimeTick+0xac>
 101a44c:	e0ffff17 	ldw	r3,-4(fp)
 101a450:	1805003a 	cmpeq	r2,r3,zero
 101a454:	1000011e 	bne	r2,zero,101a45c <OSTimeTick+0x98>
 101a458:	00000a06 	br	101a484 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 101a45c:	00800044 	movi	r2,1
 101a460:	e0bffd05 	stb	r2,-12(fp)
                 break;
 101a464:	00000a06 	br	101a490 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 101a468:	e03ffd05 	stb	zero,-12(fp)
                 break;
 101a46c:	00000806 	br	101a490 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 101a470:	00800044 	movi	r2,1
 101a474:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 101a478:	00800044 	movi	r2,1
 101a47c:	d0a7ee05 	stb	r2,-24648(gp)
                 break;
 101a480:	00000306 	br	101a490 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 101a484:	00800044 	movi	r2,1
 101a488:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 101a48c:	d027ee05 	stb	zero,-24648(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 101a490:	e0bffd03 	ldbu	r2,-12(fp)
 101a494:	1005003a 	cmpeq	r2,r2,zero
 101a498:	1000551e 	bne	r2,zero,101a5f0 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 101a49c:	d0a7ed17 	ldw	r2,-24652(gp)
 101a4a0:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 101a4a4:	00004d06 	br	101a5dc <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101a4a8:	0005303a 	rdctl	r2,status
 101a4ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101a4b0:	e0fff917 	ldw	r3,-28(fp)
 101a4b4:	00bfff84 	movi	r2,-2
 101a4b8:	1884703a 	and	r2,r3,r2
 101a4bc:	1001703a 	wrctl	status,r2
  
  return context;
 101a4c0:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 101a4c4:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 101a4c8:	e0bffe17 	ldw	r2,-8(fp)
 101a4cc:	10800b8b 	ldhu	r2,46(r2)
 101a4d0:	10bfffcc 	andi	r2,r2,65535
 101a4d4:	1005003a 	cmpeq	r2,r2,zero
 101a4d8:	1000391e 	bne	r2,zero,101a5c0 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 101a4dc:	e0bffe17 	ldw	r2,-8(fp)
 101a4e0:	10800b8b 	ldhu	r2,46(r2)
 101a4e4:	10bfffc4 	addi	r2,r2,-1
 101a4e8:	1007883a 	mov	r3,r2
 101a4ec:	e0bffe17 	ldw	r2,-8(fp)
 101a4f0:	10c00b8d 	sth	r3,46(r2)
 101a4f4:	e0bffe17 	ldw	r2,-8(fp)
 101a4f8:	10800b8b 	ldhu	r2,46(r2)
 101a4fc:	10bfffcc 	andi	r2,r2,65535
 101a500:	1004c03a 	cmpne	r2,r2,zero
 101a504:	10002e1e 	bne	r2,zero,101a5c0 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 101a508:	e0bffe17 	ldw	r2,-8(fp)
 101a50c:	10800c03 	ldbu	r2,48(r2)
 101a510:	10803fcc 	andi	r2,r2,255
 101a514:	10800dcc 	andi	r2,r2,55
 101a518:	1005003a 	cmpeq	r2,r2,zero
 101a51c:	10000b1e 	bne	r2,zero,101a54c <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 101a520:	e0bffe17 	ldw	r2,-8(fp)
 101a524:	10c00c03 	ldbu	r3,48(r2)
 101a528:	00bff204 	movi	r2,-56
 101a52c:	1884703a 	and	r2,r3,r2
 101a530:	1007883a 	mov	r3,r2
 101a534:	e0bffe17 	ldw	r2,-8(fp)
 101a538:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 101a53c:	e0fffe17 	ldw	r3,-8(fp)
 101a540:	00800044 	movi	r2,1
 101a544:	18800c45 	stb	r2,49(r3)
 101a548:	00000206 	br	101a554 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 101a54c:	e0bffe17 	ldw	r2,-8(fp)
 101a550:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 101a554:	e0bffe17 	ldw	r2,-8(fp)
 101a558:	10800c03 	ldbu	r2,48(r2)
 101a55c:	10803fcc 	andi	r2,r2,255
 101a560:	1080020c 	andi	r2,r2,8
 101a564:	1004c03a 	cmpne	r2,r2,zero
 101a568:	1000151e 	bne	r2,zero,101a5c0 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 101a56c:	e0bffe17 	ldw	r2,-8(fp)
 101a570:	10c00d83 	ldbu	r3,54(r2)
 101a574:	d0a7f603 	ldbu	r2,-24616(gp)
 101a578:	1884b03a 	or	r2,r3,r2
 101a57c:	d0a7f605 	stb	r2,-24616(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 101a580:	e0bffe17 	ldw	r2,-8(fp)
 101a584:	10800d03 	ldbu	r2,52(r2)
 101a588:	11003fcc 	andi	r4,r2,255
 101a58c:	e0bffe17 	ldw	r2,-8(fp)
 101a590:	10800d03 	ldbu	r2,52(r2)
 101a594:	10c03fcc 	andi	r3,r2,255
 101a598:	d0a7f644 	addi	r2,gp,-24615
 101a59c:	1885883a 	add	r2,r3,r2
 101a5a0:	10c00003 	ldbu	r3,0(r2)
 101a5a4:	e0bffe17 	ldw	r2,-8(fp)
 101a5a8:	10800d43 	ldbu	r2,53(r2)
 101a5ac:	1884b03a 	or	r2,r3,r2
 101a5b0:	1007883a 	mov	r3,r2
 101a5b4:	d0a7f644 	addi	r2,gp,-24615
 101a5b8:	2085883a 	add	r2,r4,r2
 101a5bc:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 101a5c0:	e0bffe17 	ldw	r2,-8(fp)
 101a5c4:	10800517 	ldw	r2,20(r2)
 101a5c8:	e0bffe15 	stw	r2,-8(fp)
 101a5cc:	e0bffc17 	ldw	r2,-16(fp)
 101a5d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101a5d4:	e0bff817 	ldw	r2,-32(fp)
 101a5d8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 101a5dc:	e0bffe17 	ldw	r2,-8(fp)
 101a5e0:	10800c83 	ldbu	r2,50(r2)
 101a5e4:	10803fcc 	andi	r2,r2,255
 101a5e8:	10800518 	cmpnei	r2,r2,20
 101a5ec:	103fae1e 	bne	r2,zero,101a4a8 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 101a5f0:	e037883a 	mov	sp,fp
 101a5f4:	dfc00117 	ldw	ra,4(sp)
 101a5f8:	df000017 	ldw	fp,0(sp)
 101a5fc:	dec00204 	addi	sp,sp,8
 101a600:	f800283a 	ret

0101a604 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 101a604:	deffff04 	addi	sp,sp,-4
 101a608:	df000015 	stw	fp,0(sp)
 101a60c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 101a610:	00804784 	movi	r2,286
}
 101a614:	e037883a 	mov	sp,fp
 101a618:	df000017 	ldw	fp,0(sp)
 101a61c:	dec00104 	addi	sp,sp,4
 101a620:	f800283a 	ret

0101a624 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 101a624:	deffff04 	addi	sp,sp,-4
 101a628:	df000015 	stw	fp,0(sp)
 101a62c:	d839883a 	mov	fp,sp
}
 101a630:	e037883a 	mov	sp,fp
 101a634:	df000017 	ldw	fp,0(sp)
 101a638:	dec00104 	addi	sp,sp,4
 101a63c:	f800283a 	ret

0101a640 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 101a640:	defff804 	addi	sp,sp,-32
 101a644:	dfc00715 	stw	ra,28(sp)
 101a648:	df000615 	stw	fp,24(sp)
 101a64c:	df000604 	addi	fp,sp,24
 101a650:	e13ffc15 	stw	r4,-16(fp)
 101a654:	e17ffd15 	stw	r5,-12(fp)
 101a658:	e1bffe05 	stb	r6,-8(fp)
 101a65c:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 101a660:	e0bffc17 	ldw	r2,-16(fp)
 101a664:	10800283 	ldbu	r2,10(r2)
 101a668:	10c03fcc 	andi	r3,r2,255
 101a66c:	008040b4 	movhi	r2,258
 101a670:	10982204 	addi	r2,r2,24712
 101a674:	10c5883a 	add	r2,r2,r3
 101a678:	10800003 	ldbu	r2,0(r2)
 101a67c:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 101a680:	e0fffa83 	ldbu	r3,-22(fp)
 101a684:	e0bffc17 	ldw	r2,-16(fp)
 101a688:	1885883a 	add	r2,r3,r2
 101a68c:	10800204 	addi	r2,r2,8
 101a690:	108000c3 	ldbu	r2,3(r2)
 101a694:	10c03fcc 	andi	r3,r2,255
 101a698:	008040b4 	movhi	r2,258
 101a69c:	10982204 	addi	r2,r2,24712
 101a6a0:	10c5883a 	add	r2,r2,r3
 101a6a4:	10800003 	ldbu	r2,0(r2)
 101a6a8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 101a6ac:	e0bffa83 	ldbu	r2,-22(fp)
 101a6b0:	100490fa 	slli	r2,r2,3
 101a6b4:	1007883a 	mov	r3,r2
 101a6b8:	e0bffa43 	ldbu	r2,-23(fp)
 101a6bc:	1885883a 	add	r2,r3,r2
 101a6c0:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 101a6c4:	e0bffa03 	ldbu	r2,-24(fp)
 101a6c8:	00c040f4 	movhi	r3,259
 101a6cc:	18dda904 	addi	r3,r3,30372
 101a6d0:	1085883a 	add	r2,r2,r2
 101a6d4:	1085883a 	add	r2,r2,r2
 101a6d8:	10c5883a 	add	r2,r2,r3
 101a6dc:	10800017 	ldw	r2,0(r2)
 101a6e0:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 101a6e4:	e0bffb17 	ldw	r2,-20(fp)
 101a6e8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 101a6ec:	e0fffb17 	ldw	r3,-20(fp)
 101a6f0:	e0bffd17 	ldw	r2,-12(fp)
 101a6f4:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 101a6f8:	e0bffb17 	ldw	r2,-20(fp)
 101a6fc:	10800c03 	ldbu	r2,48(r2)
 101a700:	1007883a 	mov	r3,r2
 101a704:	e0bffe03 	ldbu	r2,-8(fp)
 101a708:	0084303a 	nor	r2,zero,r2
 101a70c:	1884703a 	and	r2,r3,r2
 101a710:	1007883a 	mov	r3,r2
 101a714:	e0bffb17 	ldw	r2,-20(fp)
 101a718:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 101a71c:	e0fffb17 	ldw	r3,-20(fp)
 101a720:	e0bfff03 	ldbu	r2,-4(fp)
 101a724:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 101a728:	e0bffb17 	ldw	r2,-20(fp)
 101a72c:	10800c03 	ldbu	r2,48(r2)
 101a730:	10803fcc 	andi	r2,r2,255
 101a734:	1080020c 	andi	r2,r2,8
 101a738:	1004c03a 	cmpne	r2,r2,zero
 101a73c:	1000111e 	bne	r2,zero,101a784 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 101a740:	e0bffb17 	ldw	r2,-20(fp)
 101a744:	10c00d83 	ldbu	r3,54(r2)
 101a748:	d0a7f603 	ldbu	r2,-24616(gp)
 101a74c:	1884b03a 	or	r2,r3,r2
 101a750:	d0a7f605 	stb	r2,-24616(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 101a754:	e13ffa83 	ldbu	r4,-22(fp)
 101a758:	e0fffa83 	ldbu	r3,-22(fp)
 101a75c:	d0a7f644 	addi	r2,gp,-24615
 101a760:	1885883a 	add	r2,r3,r2
 101a764:	10c00003 	ldbu	r3,0(r2)
 101a768:	e0bffb17 	ldw	r2,-20(fp)
 101a76c:	10800d43 	ldbu	r2,53(r2)
 101a770:	1884b03a 	or	r2,r3,r2
 101a774:	1007883a 	mov	r3,r2
 101a778:	d0a7f644 	addi	r2,gp,-24615
 101a77c:	2085883a 	add	r2,r4,r2
 101a780:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 101a784:	e13ffb17 	ldw	r4,-20(fp)
 101a788:	e17ffc17 	ldw	r5,-16(fp)
 101a78c:	101aa380 	call	101aa38 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 101a790:	e0bffb17 	ldw	r2,-20(fp)
 101a794:	10800817 	ldw	r2,32(r2)
 101a798:	1005003a 	cmpeq	r2,r2,zero
 101a79c:	1000071e 	bne	r2,zero,101a7bc <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 101a7a0:	e0bffb17 	ldw	r2,-20(fp)
 101a7a4:	11400817 	ldw	r5,32(r2)
 101a7a8:	e13ffb17 	ldw	r4,-20(fp)
 101a7ac:	101aaf00 	call	101aaf0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 101a7b0:	e0fffb17 	ldw	r3,-20(fp)
 101a7b4:	e0bffc17 	ldw	r2,-16(fp)
 101a7b8:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 101a7bc:	e0bffa03 	ldbu	r2,-24(fp)
}
 101a7c0:	e037883a 	mov	sp,fp
 101a7c4:	dfc00117 	ldw	ra,4(sp)
 101a7c8:	df000017 	ldw	fp,0(sp)
 101a7cc:	dec00204 	addi	sp,sp,8
 101a7d0:	f800283a 	ret

0101a7d4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 101a7d4:	defffd04 	addi	sp,sp,-12
 101a7d8:	df000215 	stw	fp,8(sp)
 101a7dc:	df000204 	addi	fp,sp,8
 101a7e0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 101a7e4:	d0e7f917 	ldw	r3,-24604(gp)
 101a7e8:	e0bfff17 	ldw	r2,-4(fp)
 101a7ec:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 101a7f0:	d0a7f917 	ldw	r2,-24604(gp)
 101a7f4:	10800d03 	ldbu	r2,52(r2)
 101a7f8:	11003fcc 	andi	r4,r2,255
 101a7fc:	d0a7f917 	ldw	r2,-24604(gp)
 101a800:	10800d03 	ldbu	r2,52(r2)
 101a804:	10c03fcc 	andi	r3,r2,255
 101a808:	e0bfff17 	ldw	r2,-4(fp)
 101a80c:	1885883a 	add	r2,r3,r2
 101a810:	10800204 	addi	r2,r2,8
 101a814:	10c000c3 	ldbu	r3,3(r2)
 101a818:	d0a7f917 	ldw	r2,-24604(gp)
 101a81c:	10800d43 	ldbu	r2,53(r2)
 101a820:	1884b03a 	or	r2,r3,r2
 101a824:	1007883a 	mov	r3,r2
 101a828:	e0bfff17 	ldw	r2,-4(fp)
 101a82c:	2085883a 	add	r2,r4,r2
 101a830:	10800204 	addi	r2,r2,8
 101a834:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 101a838:	e0bfff17 	ldw	r2,-4(fp)
 101a83c:	10c00283 	ldbu	r3,10(r2)
 101a840:	d0a7f917 	ldw	r2,-24604(gp)
 101a844:	10800d83 	ldbu	r2,54(r2)
 101a848:	1884b03a 	or	r2,r3,r2
 101a84c:	1007883a 	mov	r3,r2
 101a850:	e0bfff17 	ldw	r2,-4(fp)
 101a854:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 101a858:	d0a7f917 	ldw	r2,-24604(gp)
 101a85c:	10800d03 	ldbu	r2,52(r2)
 101a860:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 101a864:	e13ffe03 	ldbu	r4,-8(fp)
 101a868:	e0fffe03 	ldbu	r3,-8(fp)
 101a86c:	d0a7f644 	addi	r2,gp,-24615
 101a870:	1885883a 	add	r2,r3,r2
 101a874:	10800003 	ldbu	r2,0(r2)
 101a878:	1007883a 	mov	r3,r2
 101a87c:	d0a7f917 	ldw	r2,-24604(gp)
 101a880:	10800d43 	ldbu	r2,53(r2)
 101a884:	0084303a 	nor	r2,zero,r2
 101a888:	1884703a 	and	r2,r3,r2
 101a88c:	1007883a 	mov	r3,r2
 101a890:	d0a7f644 	addi	r2,gp,-24615
 101a894:	2085883a 	add	r2,r4,r2
 101a898:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 101a89c:	e0fffe03 	ldbu	r3,-8(fp)
 101a8a0:	d0a7f644 	addi	r2,gp,-24615
 101a8a4:	1885883a 	add	r2,r3,r2
 101a8a8:	10800003 	ldbu	r2,0(r2)
 101a8ac:	10803fcc 	andi	r2,r2,255
 101a8b0:	1004c03a 	cmpne	r2,r2,zero
 101a8b4:	1000071e 	bne	r2,zero,101a8d4 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 101a8b8:	d0a7f917 	ldw	r2,-24604(gp)
 101a8bc:	10800d83 	ldbu	r2,54(r2)
 101a8c0:	0084303a 	nor	r2,zero,r2
 101a8c4:	1007883a 	mov	r3,r2
 101a8c8:	d0a7f603 	ldbu	r2,-24616(gp)
 101a8cc:	1884703a 	and	r2,r3,r2
 101a8d0:	d0a7f605 	stb	r2,-24616(gp)
    }
}
 101a8d4:	e037883a 	mov	sp,fp
 101a8d8:	df000017 	ldw	fp,0(sp)
 101a8dc:	dec00104 	addi	sp,sp,4
 101a8e0:	f800283a 	ret

0101a8e4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 101a8e4:	defffb04 	addi	sp,sp,-20
 101a8e8:	df000415 	stw	fp,16(sp)
 101a8ec:	df000404 	addi	fp,sp,16
 101a8f0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 101a8f4:	d0a7f917 	ldw	r2,-24604(gp)
 101a8f8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 101a8fc:	d0e7f917 	ldw	r3,-24604(gp)
 101a900:	e0bfff17 	ldw	r2,-4(fp)
 101a904:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 101a908:	e0bfff17 	ldw	r2,-4(fp)
 101a90c:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 101a910:	e0bffe17 	ldw	r2,-8(fp)
 101a914:	10800017 	ldw	r2,0(r2)
 101a918:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 101a91c:	00002006 	br	101a9a0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 101a920:	d0a7f917 	ldw	r2,-24604(gp)
 101a924:	10800d03 	ldbu	r2,52(r2)
 101a928:	11003fcc 	andi	r4,r2,255
 101a92c:	d0a7f917 	ldw	r2,-24604(gp)
 101a930:	10800d03 	ldbu	r2,52(r2)
 101a934:	10c03fcc 	andi	r3,r2,255
 101a938:	e0bffd17 	ldw	r2,-12(fp)
 101a93c:	1885883a 	add	r2,r3,r2
 101a940:	10800204 	addi	r2,r2,8
 101a944:	10c000c3 	ldbu	r3,3(r2)
 101a948:	d0a7f917 	ldw	r2,-24604(gp)
 101a94c:	10800d43 	ldbu	r2,53(r2)
 101a950:	1884b03a 	or	r2,r3,r2
 101a954:	1007883a 	mov	r3,r2
 101a958:	e0bffd17 	ldw	r2,-12(fp)
 101a95c:	2085883a 	add	r2,r4,r2
 101a960:	10800204 	addi	r2,r2,8
 101a964:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 101a968:	e0bffd17 	ldw	r2,-12(fp)
 101a96c:	10c00283 	ldbu	r3,10(r2)
 101a970:	d0a7f917 	ldw	r2,-24604(gp)
 101a974:	10800d83 	ldbu	r2,54(r2)
 101a978:	1884b03a 	or	r2,r3,r2
 101a97c:	1007883a 	mov	r3,r2
 101a980:	e0bffd17 	ldw	r2,-12(fp)
 101a984:	10c00285 	stb	r3,10(r2)
        pevents++;
 101a988:	e0bffe17 	ldw	r2,-8(fp)
 101a98c:	10800104 	addi	r2,r2,4
 101a990:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 101a994:	e0bffe17 	ldw	r2,-8(fp)
 101a998:	10800017 	ldw	r2,0(r2)
 101a99c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 101a9a0:	e0bffd17 	ldw	r2,-12(fp)
 101a9a4:	1004c03a 	cmpne	r2,r2,zero
 101a9a8:	103fdd1e 	bne	r2,zero,101a920 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 101a9ac:	d0a7f917 	ldw	r2,-24604(gp)
 101a9b0:	10800d03 	ldbu	r2,52(r2)
 101a9b4:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 101a9b8:	e13ffc03 	ldbu	r4,-16(fp)
 101a9bc:	e0fffc03 	ldbu	r3,-16(fp)
 101a9c0:	d0a7f644 	addi	r2,gp,-24615
 101a9c4:	1885883a 	add	r2,r3,r2
 101a9c8:	10800003 	ldbu	r2,0(r2)
 101a9cc:	1007883a 	mov	r3,r2
 101a9d0:	d0a7f917 	ldw	r2,-24604(gp)
 101a9d4:	10800d43 	ldbu	r2,53(r2)
 101a9d8:	0084303a 	nor	r2,zero,r2
 101a9dc:	1884703a 	and	r2,r3,r2
 101a9e0:	1007883a 	mov	r3,r2
 101a9e4:	d0a7f644 	addi	r2,gp,-24615
 101a9e8:	2085883a 	add	r2,r4,r2
 101a9ec:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 101a9f0:	e0fffc03 	ldbu	r3,-16(fp)
 101a9f4:	d0a7f644 	addi	r2,gp,-24615
 101a9f8:	1885883a 	add	r2,r3,r2
 101a9fc:	10800003 	ldbu	r2,0(r2)
 101aa00:	10803fcc 	andi	r2,r2,255
 101aa04:	1004c03a 	cmpne	r2,r2,zero
 101aa08:	1000071e 	bne	r2,zero,101aa28 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 101aa0c:	d0a7f917 	ldw	r2,-24604(gp)
 101aa10:	10800d83 	ldbu	r2,54(r2)
 101aa14:	0084303a 	nor	r2,zero,r2
 101aa18:	1007883a 	mov	r3,r2
 101aa1c:	d0a7f603 	ldbu	r2,-24616(gp)
 101aa20:	1884703a 	and	r2,r3,r2
 101aa24:	d0a7f605 	stb	r2,-24616(gp)
    }
}
 101aa28:	e037883a 	mov	sp,fp
 101aa2c:	df000017 	ldw	fp,0(sp)
 101aa30:	dec00104 	addi	sp,sp,4
 101aa34:	f800283a 	ret

0101aa38 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 101aa38:	defffc04 	addi	sp,sp,-16
 101aa3c:	df000315 	stw	fp,12(sp)
 101aa40:	df000304 	addi	fp,sp,12
 101aa44:	e13ffe15 	stw	r4,-8(fp)
 101aa48:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 101aa4c:	e0bffe17 	ldw	r2,-8(fp)
 101aa50:	10800d03 	ldbu	r2,52(r2)
 101aa54:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 101aa58:	e13ffd03 	ldbu	r4,-12(fp)
 101aa5c:	e0fffd03 	ldbu	r3,-12(fp)
 101aa60:	e0bfff17 	ldw	r2,-4(fp)
 101aa64:	1885883a 	add	r2,r3,r2
 101aa68:	10800204 	addi	r2,r2,8
 101aa6c:	108000c3 	ldbu	r2,3(r2)
 101aa70:	1007883a 	mov	r3,r2
 101aa74:	e0bffe17 	ldw	r2,-8(fp)
 101aa78:	10800d43 	ldbu	r2,53(r2)
 101aa7c:	0084303a 	nor	r2,zero,r2
 101aa80:	1884703a 	and	r2,r3,r2
 101aa84:	1007883a 	mov	r3,r2
 101aa88:	e0bfff17 	ldw	r2,-4(fp)
 101aa8c:	2085883a 	add	r2,r4,r2
 101aa90:	10800204 	addi	r2,r2,8
 101aa94:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 101aa98:	e0fffd03 	ldbu	r3,-12(fp)
 101aa9c:	e0bfff17 	ldw	r2,-4(fp)
 101aaa0:	1885883a 	add	r2,r3,r2
 101aaa4:	10800204 	addi	r2,r2,8
 101aaa8:	108000c3 	ldbu	r2,3(r2)
 101aaac:	10803fcc 	andi	r2,r2,255
 101aab0:	1004c03a 	cmpne	r2,r2,zero
 101aab4:	10000a1e 	bne	r2,zero,101aae0 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 101aab8:	e0bfff17 	ldw	r2,-4(fp)
 101aabc:	10800283 	ldbu	r2,10(r2)
 101aac0:	1007883a 	mov	r3,r2
 101aac4:	e0bffe17 	ldw	r2,-8(fp)
 101aac8:	10800d83 	ldbu	r2,54(r2)
 101aacc:	0084303a 	nor	r2,zero,r2
 101aad0:	1884703a 	and	r2,r3,r2
 101aad4:	1007883a 	mov	r3,r2
 101aad8:	e0bfff17 	ldw	r2,-4(fp)
 101aadc:	10c00285 	stb	r3,10(r2)
    }
}
 101aae0:	e037883a 	mov	sp,fp
 101aae4:	df000017 	ldw	fp,0(sp)
 101aae8:	dec00104 	addi	sp,sp,4
 101aaec:	f800283a 	ret

0101aaf0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 101aaf0:	defffa04 	addi	sp,sp,-24
 101aaf4:	df000515 	stw	fp,20(sp)
 101aaf8:	df000504 	addi	fp,sp,20
 101aafc:	e13ffe15 	stw	r4,-8(fp)
 101ab00:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 101ab04:	e0bffe17 	ldw	r2,-8(fp)
 101ab08:	10800d03 	ldbu	r2,52(r2)
 101ab0c:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 101ab10:	e0bffe17 	ldw	r2,-8(fp)
 101ab14:	10800d83 	ldbu	r2,54(r2)
 101ab18:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 101ab1c:	e0bffe17 	ldw	r2,-8(fp)
 101ab20:	10800d43 	ldbu	r2,53(r2)
 101ab24:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 101ab28:	e0bfff17 	ldw	r2,-4(fp)
 101ab2c:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 101ab30:	e0bffd17 	ldw	r2,-12(fp)
 101ab34:	10800017 	ldw	r2,0(r2)
 101ab38:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 101ab3c:	00002606 	br	101abd8 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 101ab40:	e13ffb83 	ldbu	r4,-18(fp)
 101ab44:	e0fffb83 	ldbu	r3,-18(fp)
 101ab48:	e0bffc17 	ldw	r2,-16(fp)
 101ab4c:	1885883a 	add	r2,r3,r2
 101ab50:	10800204 	addi	r2,r2,8
 101ab54:	108000c3 	ldbu	r2,3(r2)
 101ab58:	1007883a 	mov	r3,r2
 101ab5c:	e0bffb03 	ldbu	r2,-20(fp)
 101ab60:	0084303a 	nor	r2,zero,r2
 101ab64:	1884703a 	and	r2,r3,r2
 101ab68:	1007883a 	mov	r3,r2
 101ab6c:	e0bffc17 	ldw	r2,-16(fp)
 101ab70:	2085883a 	add	r2,r4,r2
 101ab74:	10800204 	addi	r2,r2,8
 101ab78:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 101ab7c:	e0fffb83 	ldbu	r3,-18(fp)
 101ab80:	e0bffc17 	ldw	r2,-16(fp)
 101ab84:	1885883a 	add	r2,r3,r2
 101ab88:	10800204 	addi	r2,r2,8
 101ab8c:	108000c3 	ldbu	r2,3(r2)
 101ab90:	10803fcc 	andi	r2,r2,255
 101ab94:	1004c03a 	cmpne	r2,r2,zero
 101ab98:	1000091e 	bne	r2,zero,101abc0 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 101ab9c:	e0bffc17 	ldw	r2,-16(fp)
 101aba0:	10800283 	ldbu	r2,10(r2)
 101aba4:	1007883a 	mov	r3,r2
 101aba8:	e0bffb43 	ldbu	r2,-19(fp)
 101abac:	0084303a 	nor	r2,zero,r2
 101abb0:	1884703a 	and	r2,r3,r2
 101abb4:	1007883a 	mov	r3,r2
 101abb8:	e0bffc17 	ldw	r2,-16(fp)
 101abbc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 101abc0:	e0bffd17 	ldw	r2,-12(fp)
 101abc4:	10800104 	addi	r2,r2,4
 101abc8:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 101abcc:	e0bffd17 	ldw	r2,-12(fp)
 101abd0:	10800017 	ldw	r2,0(r2)
 101abd4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 101abd8:	e0bffc17 	ldw	r2,-16(fp)
 101abdc:	1004c03a 	cmpne	r2,r2,zero
 101abe0:	103fd71e 	bne	r2,zero,101ab40 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 101abe4:	e037883a 	mov	sp,fp
 101abe8:	df000017 	ldw	fp,0(sp)
 101abec:	dec00104 	addi	sp,sp,4
 101abf0:	f800283a 	ret

0101abf4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 101abf4:	defffc04 	addi	sp,sp,-16
 101abf8:	df000315 	stw	fp,12(sp)
 101abfc:	df000304 	addi	fp,sp,12
 101ac00:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 101ac04:	e0bfff17 	ldw	r2,-4(fp)
 101ac08:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 101ac0c:	e0bfff17 	ldw	r2,-4(fp)
 101ac10:	108002c4 	addi	r2,r2,11
 101ac14:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101ac18:	e03ffd05 	stb	zero,-12(fp)
 101ac1c:	00000806 	br	101ac40 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 101ac20:	e0bffe17 	ldw	r2,-8(fp)
 101ac24:	10000005 	stb	zero,0(r2)
 101ac28:	e0bffe17 	ldw	r2,-8(fp)
 101ac2c:	10800044 	addi	r2,r2,1
 101ac30:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101ac34:	e0bffd03 	ldbu	r2,-12(fp)
 101ac38:	10800044 	addi	r2,r2,1
 101ac3c:	e0bffd05 	stb	r2,-12(fp)
 101ac40:	e0bffd03 	ldbu	r2,-12(fp)
 101ac44:	108000f0 	cmpltui	r2,r2,3
 101ac48:	103ff51e 	bne	r2,zero,101ac20 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 101ac4c:	e037883a 	mov	sp,fp
 101ac50:	df000017 	ldw	fp,0(sp)
 101ac54:	dec00104 	addi	sp,sp,4
 101ac58:	f800283a 	ret

0101ac5c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 101ac5c:	defffb04 	addi	sp,sp,-20
 101ac60:	dfc00415 	stw	ra,16(sp)
 101ac64:	df000315 	stw	fp,12(sp)
 101ac68:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 101ac6c:	010040f4 	movhi	r4,259
 101ac70:	21199504 	addi	r4,r4,26196
 101ac74:	0142d004 	movi	r5,2880
 101ac78:	101afc00 	call	101afc0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 101ac7c:	008040f4 	movhi	r2,259
 101ac80:	10999504 	addi	r2,r2,26196
 101ac84:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 101ac88:	008040f4 	movhi	r2,259
 101ac8c:	1099a104 	addi	r2,r2,26244
 101ac90:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 101ac94:	e03fff0d 	sth	zero,-4(fp)
 101ac98:	00001306 	br	101ace8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 101ac9c:	e0bffe17 	ldw	r2,-8(fp)
 101aca0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 101aca4:	e0fffe17 	ldw	r3,-8(fp)
 101aca8:	e0bffd17 	ldw	r2,-12(fp)
 101acac:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 101acb0:	e0fffe17 	ldw	r3,-8(fp)
 101acb4:	00800fc4 	movi	r2,63
 101acb8:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 101acbc:	e0bffe17 	ldw	r2,-8(fp)
 101acc0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 101acc4:	e0bffe17 	ldw	r2,-8(fp)
 101acc8:	10800c04 	addi	r2,r2,48
 101accc:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 101acd0:	e0bffd17 	ldw	r2,-12(fp)
 101acd4:	10800c04 	addi	r2,r2,48
 101acd8:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 101acdc:	e0bfff0b 	ldhu	r2,-4(fp)
 101ace0:	10800044 	addi	r2,r2,1
 101ace4:	e0bfff0d 	sth	r2,-4(fp)
 101ace8:	e0bfff0b 	ldhu	r2,-4(fp)
 101acec:	10800ef0 	cmpltui	r2,r2,59
 101acf0:	103fea1e 	bne	r2,zero,101ac9c <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 101acf4:	e0bffe17 	ldw	r2,-8(fp)
 101acf8:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 101acfc:	e0bffe17 	ldw	r2,-8(fp)
 101ad00:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 101ad04:	e0fffe17 	ldw	r3,-8(fp)
 101ad08:	00800fc4 	movi	r2,63
 101ad0c:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 101ad10:	e0bffe17 	ldw	r2,-8(fp)
 101ad14:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 101ad18:	008040f4 	movhi	r2,259
 101ad1c:	10999504 	addi	r2,r2,26196
 101ad20:	d0a7f715 	stw	r2,-24612(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 101ad24:	e037883a 	mov	sp,fp
 101ad28:	dfc00117 	ldw	ra,4(sp)
 101ad2c:	df000017 	ldw	fp,0(sp)
 101ad30:	dec00204 	addi	sp,sp,8
 101ad34:	f800283a 	ret

0101ad38 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 101ad38:	deffff04 	addi	sp,sp,-4
 101ad3c:	df000015 	stw	fp,0(sp)
 101ad40:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 101ad44:	d027fa15 	stw	zero,-24600(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 101ad48:	d027f805 	stb	zero,-24608(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 101ad4c:	d027ea05 	stb	zero,-24664(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 101ad50:	d027f245 	stb	zero,-24631(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 101ad54:	d027ea45 	stb	zero,-24663(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 101ad58:	d027ef15 	stw	zero,-24644(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 101ad5c:	d027eb15 	stw	zero,-24660(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 101ad60:	d027fd15 	stw	zero,-24588(gp)
    OSIdleCtrMax  = 0L;
 101ad64:	d027f015 	stw	zero,-24640(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 101ad68:	d027fc05 	stb	zero,-24592(gp)
#endif
}
 101ad6c:	e037883a 	mov	sp,fp
 101ad70:	df000017 	ldw	fp,0(sp)
 101ad74:	dec00104 	addi	sp,sp,4
 101ad78:	f800283a 	ret

0101ad7c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 101ad7c:	defffd04 	addi	sp,sp,-12
 101ad80:	df000215 	stw	fp,8(sp)
 101ad84:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 101ad88:	d027f605 	stb	zero,-24616(gp)
    prdytbl       = &OSRdyTbl[0];
 101ad8c:	d0a7f644 	addi	r2,gp,-24615
 101ad90:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 101ad94:	e03fff05 	stb	zero,-4(fp)
 101ad98:	00000806 	br	101adbc <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 101ad9c:	e0bffe17 	ldw	r2,-8(fp)
 101ada0:	10000005 	stb	zero,0(r2)
 101ada4:	e0bffe17 	ldw	r2,-8(fp)
 101ada8:	10800044 	addi	r2,r2,1
 101adac:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 101adb0:	e0bfff03 	ldbu	r2,-4(fp)
 101adb4:	10800044 	addi	r2,r2,1
 101adb8:	e0bfff05 	stb	r2,-4(fp)
 101adbc:	e0bfff03 	ldbu	r2,-4(fp)
 101adc0:	108000f0 	cmpltui	r2,r2,3
 101adc4:	103ff51e 	bne	r2,zero,101ad9c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 101adc8:	d027ec45 	stb	zero,-24655(gp)
    OSPrioHighRdy = 0;
 101adcc:	d027ec05 	stb	zero,-24656(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 101add0:	d027f415 	stw	zero,-24624(gp)
    OSTCBCur      = (OS_TCB *)0;
 101add4:	d027f915 	stw	zero,-24604(gp)
}
 101add8:	e037883a 	mov	sp,fp
 101addc:	df000017 	ldw	fp,0(sp)
 101ade0:	dec00104 	addi	sp,sp,4
 101ade4:	f800283a 	ret

0101ade8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 101ade8:	defff804 	addi	sp,sp,-32
 101adec:	dfc00715 	stw	ra,28(sp)
 101adf0:	df000615 	stw	fp,24(sp)
 101adf4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 101adf8:	018040f4 	movhi	r6,259
 101adfc:	31999404 	addi	r6,r6,26192
 101ae00:	00bfffd4 	movui	r2,65535
 101ae04:	d8800015 	stw	r2,0(sp)
 101ae08:	008040f4 	movhi	r2,259
 101ae0c:	10979504 	addi	r2,r2,24148
 101ae10:	d8800115 	stw	r2,4(sp)
 101ae14:	00808004 	movi	r2,512
 101ae18:	d8800215 	stw	r2,8(sp)
 101ae1c:	d8000315 	stw	zero,12(sp)
 101ae20:	008000c4 	movi	r2,3
 101ae24:	d8800415 	stw	r2,16(sp)
 101ae28:	010040b4 	movhi	r4,258
 101ae2c:	212ca704 	addi	r4,r4,-19812
 101ae30:	000b883a 	mov	r5,zero
 101ae34:	01c00504 	movi	r7,20
 101ae38:	102007c0 	call	102007c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 101ae3c:	014040b4 	movhi	r5,258
 101ae40:	29586204 	addi	r5,r5,24968
 101ae44:	01000504 	movi	r4,20
 101ae48:	e1bfff04 	addi	r6,fp,-4
 101ae4c:	10209b00 	call	10209b0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 101ae50:	e037883a 	mov	sp,fp
 101ae54:	dfc00117 	ldw	ra,4(sp)
 101ae58:	df000017 	ldw	fp,0(sp)
 101ae5c:	dec00204 	addi	sp,sp,8
 101ae60:	f800283a 	ret

0101ae64 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 101ae64:	defff804 	addi	sp,sp,-32
 101ae68:	dfc00715 	stw	ra,28(sp)
 101ae6c:	df000615 	stw	fp,24(sp)
 101ae70:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 101ae74:	018040f4 	movhi	r6,259
 101ae78:	31971c04 	addi	r6,r6,23664
 101ae7c:	00bfff94 	movui	r2,65534
 101ae80:	d8800015 	stw	r2,0(sp)
 101ae84:	008040f4 	movhi	r2,259
 101ae88:	10951d04 	addi	r2,r2,21620
 101ae8c:	d8800115 	stw	r2,4(sp)
 101ae90:	00808004 	movi	r2,512
 101ae94:	d8800215 	stw	r2,8(sp)
 101ae98:	d8000315 	stw	zero,12(sp)
 101ae9c:	008000c4 	movi	r2,3
 101aea0:	d8800415 	stw	r2,16(sp)
 101aea4:	010040b4 	movhi	r4,258
 101aea8:	212cbe04 	addi	r4,r4,-19720
 101aeac:	000b883a 	mov	r5,zero
 101aeb0:	01c004c4 	movi	r7,19
 101aeb4:	102007c0 	call	102007c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 101aeb8:	014040b4 	movhi	r5,258
 101aebc:	29586604 	addi	r5,r5,24984
 101aec0:	010004c4 	movi	r4,19
 101aec4:	e1bfff04 	addi	r6,fp,-4
 101aec8:	10209b00 	call	10209b0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 101aecc:	e037883a 	mov	sp,fp
 101aed0:	dfc00117 	ldw	ra,4(sp)
 101aed4:	df000017 	ldw	fp,0(sp)
 101aed8:	dec00204 	addi	sp,sp,8
 101aedc:	f800283a 	ret

0101aee0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 101aee0:	defffb04 	addi	sp,sp,-20
 101aee4:	dfc00415 	stw	ra,16(sp)
 101aee8:	df000315 	stw	fp,12(sp)
 101aeec:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 101aef0:	010040f4 	movhi	r4,259
 101aef4:	211c6504 	addi	r4,r4,29076
 101aef8:	01414404 	movi	r5,1296
 101aefc:	101afc00 	call	101afc0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 101af00:	010040f4 	movhi	r4,259
 101af04:	211da904 	addi	r4,r4,30372
 101af08:	01401504 	movi	r5,84
 101af0c:	101afc00 	call	101afc0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 101af10:	008040f4 	movhi	r2,259
 101af14:	109c6504 	addi	r2,r2,29076
 101af18:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 101af1c:	008040f4 	movhi	r2,259
 101af20:	109c8004 	addi	r2,r2,29184
 101af24:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 101af28:	e03fff05 	stb	zero,-4(fp)
 101af2c:	00001106 	br	101af74 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 101af30:	e0fffe17 	ldw	r3,-8(fp)
 101af34:	e0bffd17 	ldw	r2,-12(fp)
 101af38:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 101af3c:	e0fffe17 	ldw	r3,-8(fp)
 101af40:	00800fc4 	movi	r2,63
 101af44:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 101af48:	e0bffe17 	ldw	r2,-8(fp)
 101af4c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 101af50:	e0bffe17 	ldw	r2,-8(fp)
 101af54:	10801b04 	addi	r2,r2,108
 101af58:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 101af5c:	e0bffd17 	ldw	r2,-12(fp)
 101af60:	10801b04 	addi	r2,r2,108
 101af64:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 101af68:	e0bfff03 	ldbu	r2,-4(fp)
 101af6c:	10800044 	addi	r2,r2,1
 101af70:	e0bfff05 	stb	r2,-4(fp)
 101af74:	e0bfff03 	ldbu	r2,-4(fp)
 101af78:	108002f0 	cmpltui	r2,r2,11
 101af7c:	103fec1e 	bne	r2,zero,101af30 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 101af80:	e0bffe17 	ldw	r2,-8(fp)
 101af84:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 101af88:	e0fffe17 	ldw	r3,-8(fp)
 101af8c:	00800fc4 	movi	r2,63
 101af90:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 101af94:	e0bffe17 	ldw	r2,-8(fp)
 101af98:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 101af9c:	d027ed15 	stw	zero,-24652(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 101afa0:	008040f4 	movhi	r2,259
 101afa4:	109c6504 	addi	r2,r2,29076
 101afa8:	d0a7f115 	stw	r2,-24636(gp)
}
 101afac:	e037883a 	mov	sp,fp
 101afb0:	dfc00117 	ldw	ra,4(sp)
 101afb4:	df000017 	ldw	fp,0(sp)
 101afb8:	dec00204 	addi	sp,sp,8
 101afbc:	f800283a 	ret

0101afc0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 101afc0:	defffd04 	addi	sp,sp,-12
 101afc4:	df000215 	stw	fp,8(sp)
 101afc8:	df000204 	addi	fp,sp,8
 101afcc:	e13ffe15 	stw	r4,-8(fp)
 101afd0:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 101afd4:	00000806 	br	101aff8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 101afd8:	e0bffe17 	ldw	r2,-8(fp)
 101afdc:	10000005 	stb	zero,0(r2)
 101afe0:	e0bffe17 	ldw	r2,-8(fp)
 101afe4:	10800044 	addi	r2,r2,1
 101afe8:	e0bffe15 	stw	r2,-8(fp)
        size--;
 101afec:	e0bfff0b 	ldhu	r2,-4(fp)
 101aff0:	10bfffc4 	addi	r2,r2,-1
 101aff4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 101aff8:	e0bfff0b 	ldhu	r2,-4(fp)
 101affc:	1004c03a 	cmpne	r2,r2,zero
 101b000:	103ff51e 	bne	r2,zero,101afd8 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 101b004:	e037883a 	mov	sp,fp
 101b008:	df000017 	ldw	fp,0(sp)
 101b00c:	dec00104 	addi	sp,sp,4
 101b010:	f800283a 	ret

0101b014 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 101b014:	defffc04 	addi	sp,sp,-16
 101b018:	df000315 	stw	fp,12(sp)
 101b01c:	df000304 	addi	fp,sp,12
 101b020:	e13ffd15 	stw	r4,-12(fp)
 101b024:	e17ffe15 	stw	r5,-8(fp)
 101b028:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 101b02c:	00000d06 	br	101b064 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 101b030:	e0bffe17 	ldw	r2,-8(fp)
 101b034:	10c00003 	ldbu	r3,0(r2)
 101b038:	e0bffd17 	ldw	r2,-12(fp)
 101b03c:	10c00005 	stb	r3,0(r2)
 101b040:	e0bffd17 	ldw	r2,-12(fp)
 101b044:	10800044 	addi	r2,r2,1
 101b048:	e0bffd15 	stw	r2,-12(fp)
 101b04c:	e0bffe17 	ldw	r2,-8(fp)
 101b050:	10800044 	addi	r2,r2,1
 101b054:	e0bffe15 	stw	r2,-8(fp)
        size--;
 101b058:	e0bfff0b 	ldhu	r2,-4(fp)
 101b05c:	10bfffc4 	addi	r2,r2,-1
 101b060:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 101b064:	e0bfff0b 	ldhu	r2,-4(fp)
 101b068:	1004c03a 	cmpne	r2,r2,zero
 101b06c:	103ff01e 	bne	r2,zero,101b030 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 101b070:	e037883a 	mov	sp,fp
 101b074:	df000017 	ldw	fp,0(sp)
 101b078:	dec00104 	addi	sp,sp,4
 101b07c:	f800283a 	ret

0101b080 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 101b080:	defffb04 	addi	sp,sp,-20
 101b084:	dfc00415 	stw	ra,16(sp)
 101b088:	df000315 	stw	fp,12(sp)
 101b08c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 101b090:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b094:	0005303a 	rdctl	r2,status
 101b098:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b09c:	e0fffe17 	ldw	r3,-8(fp)
 101b0a0:	00bfff84 	movi	r2,-2
 101b0a4:	1884703a 	and	r2,r3,r2
 101b0a8:	1001703a 	wrctl	status,r2
  
  return context;
 101b0ac:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 101b0b0:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 101b0b4:	d0a7f803 	ldbu	r2,-24608(gp)
 101b0b8:	10803fcc 	andi	r2,r2,255
 101b0bc:	1004c03a 	cmpne	r2,r2,zero
 101b0c0:	10001b1e 	bne	r2,zero,101b130 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 101b0c4:	d0a7ea03 	ldbu	r2,-24664(gp)
 101b0c8:	10803fcc 	andi	r2,r2,255
 101b0cc:	1004c03a 	cmpne	r2,r2,zero
 101b0d0:	1000171e 	bne	r2,zero,101b130 <OS_Sched+0xb0>
            OS_SchedNew();
 101b0d4:	101b1540 	call	101b154 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 101b0d8:	d0a7ec03 	ldbu	r2,-24656(gp)
 101b0dc:	d0e7ec43 	ldbu	r3,-24655(gp)
 101b0e0:	11003fcc 	andi	r4,r2,255
 101b0e4:	18803fcc 	andi	r2,r3,255
 101b0e8:	20801126 	beq	r4,r2,101b130 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 101b0ec:	d0a7ec03 	ldbu	r2,-24656(gp)
 101b0f0:	10803fcc 	andi	r2,r2,255
 101b0f4:	00c040f4 	movhi	r3,259
 101b0f8:	18dda904 	addi	r3,r3,30372
 101b0fc:	1085883a 	add	r2,r2,r2
 101b100:	1085883a 	add	r2,r2,r2
 101b104:	10c5883a 	add	r2,r2,r3
 101b108:	10800017 	ldw	r2,0(r2)
 101b10c:	d0a7f415 	stw	r2,-24624(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 101b110:	d0e7f417 	ldw	r3,-24624(gp)
 101b114:	18800e17 	ldw	r2,56(r3)
 101b118:	10800044 	addi	r2,r2,1
 101b11c:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 101b120:	d0a7ef17 	ldw	r2,-24644(gp)
 101b124:	10800044 	addi	r2,r2,1
 101b128:	d0a7ef15 	stw	r2,-24644(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 101b12c:	10239240 	call	1023924 <OSCtxSw>
 101b130:	e0bfff17 	ldw	r2,-4(fp)
 101b134:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b138:	e0bffd17 	ldw	r2,-12(fp)
 101b13c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 101b140:	e037883a 	mov	sp,fp
 101b144:	dfc00117 	ldw	ra,4(sp)
 101b148:	df000017 	ldw	fp,0(sp)
 101b14c:	dec00204 	addi	sp,sp,8
 101b150:	f800283a 	ret

0101b154 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 101b154:	defffe04 	addi	sp,sp,-8
 101b158:	df000115 	stw	fp,4(sp)
 101b15c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 101b160:	d0a7f603 	ldbu	r2,-24616(gp)
 101b164:	10c03fcc 	andi	r3,r2,255
 101b168:	008040b4 	movhi	r2,258
 101b16c:	10982204 	addi	r2,r2,24712
 101b170:	10c5883a 	add	r2,r2,r3
 101b174:	10800003 	ldbu	r2,0(r2)
 101b178:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 101b17c:	e0bfff03 	ldbu	r2,-4(fp)
 101b180:	100490fa 	slli	r2,r2,3
 101b184:	1009883a 	mov	r4,r2
 101b188:	e0ffff03 	ldbu	r3,-4(fp)
 101b18c:	d0a7f644 	addi	r2,gp,-24615
 101b190:	1885883a 	add	r2,r3,r2
 101b194:	10800003 	ldbu	r2,0(r2)
 101b198:	10c03fcc 	andi	r3,r2,255
 101b19c:	008040b4 	movhi	r2,258
 101b1a0:	10982204 	addi	r2,r2,24712
 101b1a4:	10c5883a 	add	r2,r2,r3
 101b1a8:	10800003 	ldbu	r2,0(r2)
 101b1ac:	2085883a 	add	r2,r4,r2
 101b1b0:	d0a7ec05 	stb	r2,-24656(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 101b1b4:	e037883a 	mov	sp,fp
 101b1b8:	df000017 	ldw	fp,0(sp)
 101b1bc:	dec00104 	addi	sp,sp,4
 101b1c0:	f800283a 	ret

0101b1c4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 101b1c4:	defffc04 	addi	sp,sp,-16
 101b1c8:	df000315 	stw	fp,12(sp)
 101b1cc:	df000304 	addi	fp,sp,12
 101b1d0:	e13ffe15 	stw	r4,-8(fp)
 101b1d4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 101b1d8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 101b1dc:	00000d06 	br	101b214 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 101b1e0:	e0bfff17 	ldw	r2,-4(fp)
 101b1e4:	10c00003 	ldbu	r3,0(r2)
 101b1e8:	e0bffe17 	ldw	r2,-8(fp)
 101b1ec:	10c00005 	stb	r3,0(r2)
 101b1f0:	e0bffe17 	ldw	r2,-8(fp)
 101b1f4:	10800044 	addi	r2,r2,1
 101b1f8:	e0bffe15 	stw	r2,-8(fp)
 101b1fc:	e0bfff17 	ldw	r2,-4(fp)
 101b200:	10800044 	addi	r2,r2,1
 101b204:	e0bfff15 	stw	r2,-4(fp)
        len++;
 101b208:	e0bffd03 	ldbu	r2,-12(fp)
 101b20c:	10800044 	addi	r2,r2,1
 101b210:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 101b214:	e0bfff17 	ldw	r2,-4(fp)
 101b218:	10800003 	ldbu	r2,0(r2)
 101b21c:	10803fcc 	andi	r2,r2,255
 101b220:	1004c03a 	cmpne	r2,r2,zero
 101b224:	103fee1e 	bne	r2,zero,101b1e0 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 101b228:	e0bffe17 	ldw	r2,-8(fp)
 101b22c:	10000005 	stb	zero,0(r2)
    return (len);
 101b230:	e0bffd03 	ldbu	r2,-12(fp)
}
 101b234:	e037883a 	mov	sp,fp
 101b238:	df000017 	ldw	fp,0(sp)
 101b23c:	dec00104 	addi	sp,sp,4
 101b240:	f800283a 	ret

0101b244 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 101b244:	defffd04 	addi	sp,sp,-12
 101b248:	df000215 	stw	fp,8(sp)
 101b24c:	df000204 	addi	fp,sp,8
 101b250:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 101b254:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 101b258:	00000606 	br	101b274 <OS_StrLen+0x30>
        psrc++;
 101b25c:	e0bfff17 	ldw	r2,-4(fp)
 101b260:	10800044 	addi	r2,r2,1
 101b264:	e0bfff15 	stw	r2,-4(fp)
        len++;
 101b268:	e0bffe03 	ldbu	r2,-8(fp)
 101b26c:	10800044 	addi	r2,r2,1
 101b270:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 101b274:	e0bfff17 	ldw	r2,-4(fp)
 101b278:	10800003 	ldbu	r2,0(r2)
 101b27c:	10803fcc 	andi	r2,r2,255
 101b280:	1004c03a 	cmpne	r2,r2,zero
 101b284:	103ff51e 	bne	r2,zero,101b25c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 101b288:	e0bffe03 	ldbu	r2,-8(fp)
}
 101b28c:	e037883a 	mov	sp,fp
 101b290:	df000017 	ldw	fp,0(sp)
 101b294:	dec00104 	addi	sp,sp,4
 101b298:	f800283a 	ret

0101b29c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 101b29c:	defffa04 	addi	sp,sp,-24
 101b2a0:	dfc00515 	stw	ra,20(sp)
 101b2a4:	df000415 	stw	fp,16(sp)
 101b2a8:	df000404 	addi	fp,sp,16
 101b2ac:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101b2b0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b2b4:	0005303a 	rdctl	r2,status
 101b2b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b2bc:	e0fffd17 	ldw	r3,-12(fp)
 101b2c0:	00bfff84 	movi	r2,-2
 101b2c4:	1884703a 	and	r2,r3,r2
 101b2c8:	1001703a 	wrctl	status,r2
  
  return context;
 101b2cc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 101b2d0:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 101b2d4:	d0a7eb17 	ldw	r2,-24660(gp)
 101b2d8:	10800044 	addi	r2,r2,1
 101b2dc:	d0a7eb15 	stw	r2,-24660(gp)
 101b2e0:	e0bffe17 	ldw	r2,-8(fp)
 101b2e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b2e8:	e0bffc17 	ldw	r2,-16(fp)
 101b2ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 101b2f0:	1023dd00 	call	1023dd0 <OSTaskIdleHook>
    }
 101b2f4:	003fef06 	br	101b2b4 <OS_TaskIdle+0x18>

0101b2f8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 101b2f8:	defffa04 	addi	sp,sp,-24
 101b2fc:	dfc00515 	stw	ra,20(sp)
 101b300:	df000415 	stw	fp,16(sp)
 101b304:	df000404 	addi	fp,sp,16
 101b308:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101b30c:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 101b310:	00000206 	br	101b31c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 101b314:	01003204 	movi	r4,200
 101b318:	10213740 	call	1021374 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 101b31c:	d0a7fc03 	ldbu	r2,-24592(gp)
 101b320:	10803fcc 	andi	r2,r2,255
 101b324:	1005003a 	cmpeq	r2,r2,zero
 101b328:	103ffa1e 	bne	r2,zero,101b314 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 101b32c:	d127f017 	ldw	r4,-24640(gp)
 101b330:	01401904 	movi	r5,100
 101b334:	1017ffc0 	call	1017ffc <__udivsi3>
 101b338:	d0a7f015 	stw	r2,-24640(gp)
    if (OSIdleCtrMax == 0L) {
 101b33c:	d0a7f017 	ldw	r2,-24640(gp)
 101b340:	1004c03a 	cmpne	r2,r2,zero
 101b344:	1000031e 	bne	r2,zero,101b354 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 101b348:	d027f205 	stb	zero,-24632(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 101b34c:	01003fc4 	movi	r4,255
 101b350:	1020f880 	call	1020f88 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b354:	0005303a 	rdctl	r2,status
 101b358:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b35c:	e0fffd17 	ldw	r3,-12(fp)
 101b360:	00bfff84 	movi	r2,-2
 101b364:	1884703a 	and	r2,r3,r2
 101b368:	1001703a 	wrctl	status,r2
  
  return context;
 101b36c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 101b370:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 101b374:	d0a7eb17 	ldw	r2,-24660(gp)
 101b378:	d0a7fd15 	stw	r2,-24588(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 101b37c:	d027eb15 	stw	zero,-24660(gp)
 101b380:	e0bffe17 	ldw	r2,-8(fp)
 101b384:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b388:	e0bffc17 	ldw	r2,-16(fp)
 101b38c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 101b390:	d127fd17 	ldw	r4,-24588(gp)
 101b394:	d167f017 	ldw	r5,-24640(gp)
 101b398:	1017ffc0 	call	1017ffc <__udivsi3>
 101b39c:	1007883a 	mov	r3,r2
 101b3a0:	00801904 	movi	r2,100
 101b3a4:	10c5c83a 	sub	r2,r2,r3
 101b3a8:	d0a7f205 	stb	r2,-24632(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 101b3ac:	1023d600 	call	1023d60 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 101b3b0:	101b3c00 	call	101b3c0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 101b3b4:	01001904 	movi	r4,100
 101b3b8:	10213740 	call	1021374 <OSTimeDly>
    }
 101b3bc:	003fe506 	br	101b354 <OS_TaskStat+0x5c>

0101b3c0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 101b3c0:	defffa04 	addi	sp,sp,-24
 101b3c4:	dfc00515 	stw	ra,20(sp)
 101b3c8:	df000415 	stw	fp,16(sp)
 101b3cc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 101b3d0:	e03ffc05 	stb	zero,-16(fp)
 101b3d4:	00002406 	br	101b468 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 101b3d8:	e13ffc03 	ldbu	r4,-16(fp)
 101b3dc:	e17ffe04 	addi	r5,fp,-8
 101b3e0:	1020d8c0 	call	1020d8c <OSTaskStkChk>
 101b3e4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 101b3e8:	e0bffc43 	ldbu	r2,-15(fp)
 101b3ec:	1004c03a 	cmpne	r2,r2,zero
 101b3f0:	10001a1e 	bne	r2,zero,101b45c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 101b3f4:	e0bffc03 	ldbu	r2,-16(fp)
 101b3f8:	00c040f4 	movhi	r3,259
 101b3fc:	18dda904 	addi	r3,r3,30372
 101b400:	1085883a 	add	r2,r2,r2
 101b404:	1085883a 	add	r2,r2,r2
 101b408:	10c5883a 	add	r2,r2,r3
 101b40c:	10800017 	ldw	r2,0(r2)
 101b410:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 101b414:	e0bffd17 	ldw	r2,-12(fp)
 101b418:	1005003a 	cmpeq	r2,r2,zero
 101b41c:	10000f1e 	bne	r2,zero,101b45c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 101b420:	e0bffd17 	ldw	r2,-12(fp)
 101b424:	10800060 	cmpeqi	r2,r2,1
 101b428:	10000c1e 	bne	r2,zero,101b45c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 101b42c:	e0bffd17 	ldw	r2,-12(fp)
 101b430:	10c00217 	ldw	r3,8(r2)
 101b434:	e0bffd17 	ldw	r2,-12(fp)
 101b438:	10800317 	ldw	r2,12(r2)
 101b43c:	1085883a 	add	r2,r2,r2
 101b440:	1085883a 	add	r2,r2,r2
 101b444:	1887883a 	add	r3,r3,r2
 101b448:	e0bffd17 	ldw	r2,-12(fp)
 101b44c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 101b450:	e0ffff17 	ldw	r3,-4(fp)
 101b454:	e0bffd17 	ldw	r2,-12(fp)
 101b458:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 101b45c:	e0bffc03 	ldbu	r2,-16(fp)
 101b460:	10800044 	addi	r2,r2,1
 101b464:	e0bffc05 	stb	r2,-16(fp)
 101b468:	e0bffc03 	ldbu	r2,-16(fp)
 101b46c:	10800570 	cmpltui	r2,r2,21
 101b470:	103fd91e 	bne	r2,zero,101b3d8 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 101b474:	e037883a 	mov	sp,fp
 101b478:	dfc00117 	ldw	ra,4(sp)
 101b47c:	df000017 	ldw	fp,0(sp)
 101b480:	dec00204 	addi	sp,sp,8
 101b484:	f800283a 	ret

0101b488 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 101b488:	defff104 	addi	sp,sp,-60
 101b48c:	dfc00e15 	stw	ra,56(sp)
 101b490:	df000d15 	stw	fp,52(sp)
 101b494:	df000d04 	addi	fp,sp,52
 101b498:	e17ffb15 	stw	r5,-20(fp)
 101b49c:	e1bffc15 	stw	r6,-16(fp)
 101b4a0:	e0800417 	ldw	r2,16(fp)
 101b4a4:	e13ffa05 	stb	r4,-24(fp)
 101b4a8:	e1fffd0d 	sth	r7,-12(fp)
 101b4ac:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101b4b0:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b4b4:	0005303a 	rdctl	r2,status
 101b4b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b4bc:	e0fff717 	ldw	r3,-36(fp)
 101b4c0:	00bfff84 	movi	r2,-2
 101b4c4:	1884703a 	and	r2,r3,r2
 101b4c8:	1001703a 	wrctl	status,r2
  
  return context;
 101b4cc:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 101b4d0:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 101b4d4:	d0a7f117 	ldw	r2,-24636(gp)
 101b4d8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 101b4dc:	e0bff917 	ldw	r2,-28(fp)
 101b4e0:	1005003a 	cmpeq	r2,r2,zero
 101b4e4:	1000941e 	bne	r2,zero,101b738 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 101b4e8:	e0bff917 	ldw	r2,-28(fp)
 101b4ec:	10800517 	ldw	r2,20(r2)
 101b4f0:	d0a7f115 	stw	r2,-24636(gp)
 101b4f4:	e0bff817 	ldw	r2,-32(fp)
 101b4f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b4fc:	e0bff617 	ldw	r2,-40(fp)
 101b500:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 101b504:	e0fff917 	ldw	r3,-28(fp)
 101b508:	e0bffb17 	ldw	r2,-20(fp)
 101b50c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 101b510:	e0fff917 	ldw	r3,-28(fp)
 101b514:	e0bffa03 	ldbu	r2,-24(fp)
 101b518:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 101b51c:	e0bff917 	ldw	r2,-28(fp)
 101b520:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 101b524:	e0bff917 	ldw	r2,-28(fp)
 101b528:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 101b52c:	e0bff917 	ldw	r2,-28(fp)
 101b530:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 101b534:	e0fff917 	ldw	r3,-28(fp)
 101b538:	e0800317 	ldw	r2,12(fp)
 101b53c:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 101b540:	e0fff917 	ldw	r3,-28(fp)
 101b544:	e0800217 	ldw	r2,8(fp)
 101b548:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 101b54c:	e0fff917 	ldw	r3,-28(fp)
 101b550:	e0bffc17 	ldw	r2,-16(fp)
 101b554:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 101b558:	e0fff917 	ldw	r3,-28(fp)
 101b55c:	e0bffe0b 	ldhu	r2,-8(fp)
 101b560:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 101b564:	e0fff917 	ldw	r3,-28(fp)
 101b568:	e0bffd0b 	ldhu	r2,-12(fp)
 101b56c:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 101b570:	e0bff917 	ldw	r2,-28(fp)
 101b574:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 101b578:	e0bffa03 	ldbu	r2,-24(fp)
 101b57c:	1004d0fa 	srli	r2,r2,3
 101b580:	1007883a 	mov	r3,r2
 101b584:	e0bff917 	ldw	r2,-28(fp)
 101b588:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 101b58c:	e0bffa03 	ldbu	r2,-24(fp)
 101b590:	108001cc 	andi	r2,r2,7
 101b594:	1007883a 	mov	r3,r2
 101b598:	e0bff917 	ldw	r2,-28(fp)
 101b59c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 101b5a0:	e0bff917 	ldw	r2,-28(fp)
 101b5a4:	10800d03 	ldbu	r2,52(r2)
 101b5a8:	10c03fcc 	andi	r3,r2,255
 101b5ac:	00800044 	movi	r2,1
 101b5b0:	10c4983a 	sll	r2,r2,r3
 101b5b4:	1007883a 	mov	r3,r2
 101b5b8:	e0bff917 	ldw	r2,-28(fp)
 101b5bc:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 101b5c0:	e0bff917 	ldw	r2,-28(fp)
 101b5c4:	10800cc3 	ldbu	r2,51(r2)
 101b5c8:	10c03fcc 	andi	r3,r2,255
 101b5cc:	00800044 	movi	r2,1
 101b5d0:	10c4983a 	sll	r2,r2,r3
 101b5d4:	1007883a 	mov	r3,r2
 101b5d8:	e0bff917 	ldw	r2,-28(fp)
 101b5dc:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 101b5e0:	e0bff917 	ldw	r2,-28(fp)
 101b5e4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 101b5e8:	e0bff917 	ldw	r2,-28(fp)
 101b5ec:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 101b5f0:	e0bff917 	ldw	r2,-28(fp)
 101b5f4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 101b5f8:	e0bff917 	ldw	r2,-28(fp)
 101b5fc:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 101b600:	e0bff917 	ldw	r2,-28(fp)
 101b604:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 101b608:	e0bff917 	ldw	r2,-28(fp)
 101b60c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 101b610:	e0bff917 	ldw	r2,-28(fp)
 101b614:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 101b618:	e0bff917 	ldw	r2,-28(fp)
 101b61c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 101b620:	e0bff917 	ldw	r2,-28(fp)
 101b624:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 101b628:	e0fff917 	ldw	r3,-28(fp)
 101b62c:	00800fc4 	movi	r2,63
 101b630:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 101b634:	e0bff917 	ldw	r2,-28(fp)
 101b638:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 101b63c:	e13ff917 	ldw	r4,-28(fp)
 101b640:	1023dec0 	call	1023dec <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 101b644:	e13ff917 	ldw	r4,-28(fp)
 101b648:	1023d040 	call	1023d04 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b64c:	0005303a 	rdctl	r2,status
 101b650:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b654:	e0fff517 	ldw	r3,-44(fp)
 101b658:	00bfff84 	movi	r2,-2
 101b65c:	1884703a 	and	r2,r3,r2
 101b660:	1001703a 	wrctl	status,r2
  
  return context;
 101b664:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 101b668:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 101b66c:	e0bffa03 	ldbu	r2,-24(fp)
 101b670:	00c040f4 	movhi	r3,259
 101b674:	18dda904 	addi	r3,r3,30372
 101b678:	1085883a 	add	r2,r2,r2
 101b67c:	1085883a 	add	r2,r2,r2
 101b680:	10c7883a 	add	r3,r2,r3
 101b684:	e0bff917 	ldw	r2,-28(fp)
 101b688:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 101b68c:	d0e7ed17 	ldw	r3,-24652(gp)
 101b690:	e0bff917 	ldw	r2,-28(fp)
 101b694:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 101b698:	e0bff917 	ldw	r2,-28(fp)
 101b69c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 101b6a0:	d0a7ed17 	ldw	r2,-24652(gp)
 101b6a4:	1005003a 	cmpeq	r2,r2,zero
 101b6a8:	1000031e 	bne	r2,zero,101b6b8 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 101b6ac:	d0e7ed17 	ldw	r3,-24652(gp)
 101b6b0:	e0bff917 	ldw	r2,-28(fp)
 101b6b4:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 101b6b8:	e0bff917 	ldw	r2,-28(fp)
 101b6bc:	d0a7ed15 	stw	r2,-24652(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 101b6c0:	e0bff917 	ldw	r2,-28(fp)
 101b6c4:	10c00d83 	ldbu	r3,54(r2)
 101b6c8:	d0a7f603 	ldbu	r2,-24616(gp)
 101b6cc:	1884b03a 	or	r2,r3,r2
 101b6d0:	d0a7f605 	stb	r2,-24616(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 101b6d4:	e0bff917 	ldw	r2,-28(fp)
 101b6d8:	10800d03 	ldbu	r2,52(r2)
 101b6dc:	11003fcc 	andi	r4,r2,255
 101b6e0:	e0bff917 	ldw	r2,-28(fp)
 101b6e4:	10800d03 	ldbu	r2,52(r2)
 101b6e8:	10c03fcc 	andi	r3,r2,255
 101b6ec:	d0a7f644 	addi	r2,gp,-24615
 101b6f0:	1885883a 	add	r2,r3,r2
 101b6f4:	10c00003 	ldbu	r3,0(r2)
 101b6f8:	e0bff917 	ldw	r2,-28(fp)
 101b6fc:	10800d43 	ldbu	r2,53(r2)
 101b700:	1884b03a 	or	r2,r3,r2
 101b704:	1007883a 	mov	r3,r2
 101b708:	d0a7f644 	addi	r2,gp,-24615
 101b70c:	2085883a 	add	r2,r4,r2
 101b710:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 101b714:	d0a7f243 	ldbu	r2,-24631(gp)
 101b718:	10800044 	addi	r2,r2,1
 101b71c:	d0a7f245 	stb	r2,-24631(gp)
 101b720:	e0bff817 	ldw	r2,-32(fp)
 101b724:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101b728:	e0bff417 	ldw	r2,-48(fp)
 101b72c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 101b730:	e03fff15 	stw	zero,-4(fp)
 101b734:	00000606 	br	101b750 <OS_TCBInit+0x2c8>
 101b738:	e0bff817 	ldw	r2,-32(fp)
 101b73c:	e0bff315 	stw	r2,-52(fp)
 101b740:	e0bff317 	ldw	r2,-52(fp)
 101b744:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 101b748:	00801084 	movi	r2,66
 101b74c:	e0bfff15 	stw	r2,-4(fp)
 101b750:	e0bfff17 	ldw	r2,-4(fp)
}
 101b754:	e037883a 	mov	sp,fp
 101b758:	dfc00117 	ldw	ra,4(sp)
 101b75c:	df000017 	ldw	fp,0(sp)
 101b760:	dec00204 	addi	sp,sp,8
 101b764:	f800283a 	ret

0101b768 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 101b768:	defffe04 	addi	sp,sp,-8
 101b76c:	df000115 	stw	fp,4(sp)
 101b770:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 101b774:	d0a07204 	addi	r2,gp,-32312
 101b778:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 101b77c:	d0a07304 	addi	r2,gp,-32308
 101b780:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 101b784:	d0a07484 	addi	r2,gp,-32302
 101b788:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 101b78c:	d0a07504 	addi	r2,gp,-32300
 101b790:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 101b794:	d0a07404 	addi	r2,gp,-32304
 101b798:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 101b79c:	d0a07584 	addi	r2,gp,-32298
 101b7a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 101b7a4:	d0a07604 	addi	r2,gp,-32296
 101b7a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 101b7ac:	d0a07684 	addi	r2,gp,-32294
 101b7b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 101b7b4:	d0a07704 	addi	r2,gp,-32292
 101b7b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 101b7bc:	d0a07784 	addi	r2,gp,-32290
 101b7c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 101b7c4:	d0a07804 	addi	r2,gp,-32288
 101b7c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 101b7cc:	d0a07884 	addi	r2,gp,-32286
 101b7d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 101b7d4:	d0a07904 	addi	r2,gp,-32284
 101b7d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 101b7dc:	d0a07984 	addi	r2,gp,-32282
 101b7e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 101b7e4:	d0a07a04 	addi	r2,gp,-32280
 101b7e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 101b7ec:	d0a07a84 	addi	r2,gp,-32278
 101b7f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 101b7f4:	d0a07b04 	addi	r2,gp,-32276
 101b7f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 101b7fc:	d0a07b84 	addi	r2,gp,-32274
 101b800:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 101b804:	d0a07c04 	addi	r2,gp,-32272
 101b808:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 101b80c:	d0a07c84 	addi	r2,gp,-32270
 101b810:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 101b814:	d0a07d04 	addi	r2,gp,-32268
 101b818:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 101b81c:	d0a07d84 	addi	r2,gp,-32266
 101b820:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 101b824:	d0a07e04 	addi	r2,gp,-32264
 101b828:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 101b82c:	d0a07e84 	addi	r2,gp,-32262
 101b830:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 101b834:	d0a07f04 	addi	r2,gp,-32260
 101b838:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 101b83c:	d0a07f84 	addi	r2,gp,-32258
 101b840:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 101b844:	d0a08004 	addi	r2,gp,-32256
 101b848:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 101b84c:	d0a08084 	addi	r2,gp,-32254
 101b850:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 101b854:	d0a08104 	addi	r2,gp,-32252
 101b858:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 101b85c:	d0a08184 	addi	r2,gp,-32250
 101b860:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 101b864:	d0a08204 	addi	r2,gp,-32248
 101b868:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 101b86c:	d0a08284 	addi	r2,gp,-32246
 101b870:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 101b874:	d0a08304 	addi	r2,gp,-32244
 101b878:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 101b87c:	d0a08384 	addi	r2,gp,-32242
 101b880:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 101b884:	d0a08404 	addi	r2,gp,-32240
 101b888:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 101b88c:	d0a08484 	addi	r2,gp,-32238
 101b890:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 101b894:	d0a08504 	addi	r2,gp,-32236
 101b898:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 101b89c:	d0a08584 	addi	r2,gp,-32234
 101b8a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 101b8a4:	d0a08604 	addi	r2,gp,-32232
 101b8a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 101b8ac:	d0a08684 	addi	r2,gp,-32230
 101b8b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 101b8b4:	d0a08704 	addi	r2,gp,-32228
 101b8b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 101b8bc:	d0a08784 	addi	r2,gp,-32226
 101b8c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 101b8c4:	d0a08804 	addi	r2,gp,-32224
 101b8c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 101b8cc:	d0a08884 	addi	r2,gp,-32222
 101b8d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 101b8d4:	d0a08904 	addi	r2,gp,-32220
 101b8d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 101b8dc:	d0a08e04 	addi	r2,gp,-32200
 101b8e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 101b8e4:	e037883a 	mov	sp,fp
 101b8e8:	df000017 	ldw	fp,0(sp)
 101b8ec:	dec00104 	addi	sp,sp,4
 101b8f0:	f800283a 	ret

0101b8f4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 101b8f4:	defff104 	addi	sp,sp,-60
 101b8f8:	df000e15 	stw	fp,56(sp)
 101b8fc:	df000e04 	addi	fp,sp,56
 101b900:	e13ffa15 	stw	r4,-24(fp)
 101b904:	e1fffd15 	stw	r7,-12(fp)
 101b908:	e17ffb0d 	sth	r5,-20(fp)
 101b90c:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 101b910:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 101b914:	e0bffd17 	ldw	r2,-12(fp)
 101b918:	1004c03a 	cmpne	r2,r2,zero
 101b91c:	1000021e 	bne	r2,zero,101b928 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 101b920:	e03fff15 	stw	zero,-4(fp)
 101b924:	0000bb06 	br	101bc14 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 101b928:	e0bffa17 	ldw	r2,-24(fp)
 101b92c:	1004c03a 	cmpne	r2,r2,zero
 101b930:	1000051e 	bne	r2,zero,101b948 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101b934:	e0fffd17 	ldw	r3,-12(fp)
 101b938:	00801b84 	movi	r2,110
 101b93c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101b940:	e03fff15 	stw	zero,-4(fp)
 101b944:	0000b306 	br	101bc14 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 101b948:	e0bffa17 	ldw	r2,-24(fp)
 101b94c:	10800003 	ldbu	r2,0(r2)
 101b950:	10803fcc 	andi	r2,r2,255
 101b954:	10800160 	cmpeqi	r2,r2,5
 101b958:	1000051e 	bne	r2,zero,101b970 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 101b95c:	e0fffd17 	ldw	r3,-12(fp)
 101b960:	00800044 	movi	r2,1
 101b964:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101b968:	e03fff15 	stw	zero,-4(fp)
 101b96c:	0000a906 	br	101bc14 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 101b970:	e0fffc03 	ldbu	r3,-16(fp)
 101b974:	00bfe004 	movi	r2,-128
 101b978:	1884703a 	and	r2,r3,r2
 101b97c:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 101b980:	e0bff943 	ldbu	r2,-27(fp)
 101b984:	1005003a 	cmpeq	r2,r2,zero
 101b988:	1000061e 	bne	r2,zero,101b9a4 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 101b98c:	e0bffc03 	ldbu	r2,-16(fp)
 101b990:	10801fcc 	andi	r2,r2,127
 101b994:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 101b998:	00800044 	movi	r2,1
 101b99c:	e0bff905 	stb	r2,-28(fp)
 101b9a0:	00000106 	br	101b9a8 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 101b9a4:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 101b9a8:	e0bffd17 	ldw	r2,-12(fp)
 101b9ac:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101b9b0:	0005303a 	rdctl	r2,status
 101b9b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101b9b8:	e0fff717 	ldw	r3,-36(fp)
 101b9bc:	00bfff84 	movi	r2,-2
 101b9c0:	1884703a 	and	r2,r3,r2
 101b9c4:	1001703a 	wrctl	status,r2
  
  return context;
 101b9c8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 101b9cc:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 101b9d0:	e0bffc03 	ldbu	r2,-16(fp)
 101b9d4:	e0bffe15 	stw	r2,-8(fp)
 101b9d8:	e0fffe17 	ldw	r3,-8(fp)
 101b9dc:	18800060 	cmpeqi	r2,r3,1
 101b9e0:	1000651e 	bne	r2,zero,101bb78 <OSFlagAccept+0x284>
 101b9e4:	e0fffe17 	ldw	r3,-8(fp)
 101b9e8:	18800088 	cmpgei	r2,r3,2
 101b9ec:	1000041e 	bne	r2,zero,101ba00 <OSFlagAccept+0x10c>
 101b9f0:	e0fffe17 	ldw	r3,-8(fp)
 101b9f4:	1805003a 	cmpeq	r2,r3,zero
 101b9f8:	1000421e 	bne	r2,zero,101bb04 <OSFlagAccept+0x210>
 101b9fc:	00007b06 	br	101bbec <OSFlagAccept+0x2f8>
 101ba00:	e0fffe17 	ldw	r3,-8(fp)
 101ba04:	188000a0 	cmpeqi	r2,r3,2
 101ba08:	1000041e 	bne	r2,zero,101ba1c <OSFlagAccept+0x128>
 101ba0c:	e0fffe17 	ldw	r3,-8(fp)
 101ba10:	188000e0 	cmpeqi	r2,r3,3
 101ba14:	10001e1e 	bne	r2,zero,101ba90 <OSFlagAccept+0x19c>
 101ba18:	00007406 	br	101bbec <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 101ba1c:	e0bffa17 	ldw	r2,-24(fp)
 101ba20:	10c0020b 	ldhu	r3,8(r2)
 101ba24:	e0bffb0b 	ldhu	r2,-20(fp)
 101ba28:	1884703a 	and	r2,r3,r2
 101ba2c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 101ba30:	e0fff98b 	ldhu	r3,-26(fp)
 101ba34:	e0bffb0b 	ldhu	r2,-20(fp)
 101ba38:	18800d1e 	bne	r3,r2,101ba70 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101ba3c:	e0bff903 	ldbu	r2,-28(fp)
 101ba40:	10800058 	cmpnei	r2,r2,1
 101ba44:	10000d1e 	bne	r2,zero,101ba7c <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 101ba48:	e0bffa17 	ldw	r2,-24(fp)
 101ba4c:	1080020b 	ldhu	r2,8(r2)
 101ba50:	1007883a 	mov	r3,r2
 101ba54:	e0bff98b 	ldhu	r2,-26(fp)
 101ba58:	0084303a 	nor	r2,zero,r2
 101ba5c:	1884703a 	and	r2,r3,r2
 101ba60:	1007883a 	mov	r3,r2
 101ba64:	e0bffa17 	ldw	r2,-24(fp)
 101ba68:	10c0020d 	sth	r3,8(r2)
 101ba6c:	00000306 	br	101ba7c <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 101ba70:	e0fffd17 	ldw	r3,-12(fp)
 101ba74:	00801c04 	movi	r2,112
 101ba78:	18800005 	stb	r2,0(r3)
 101ba7c:	e0bff817 	ldw	r2,-32(fp)
 101ba80:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ba84:	e0bff617 	ldw	r2,-40(fp)
 101ba88:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 101ba8c:	00005f06 	br	101bc0c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 101ba90:	e0bffa17 	ldw	r2,-24(fp)
 101ba94:	10c0020b 	ldhu	r3,8(r2)
 101ba98:	e0bffb0b 	ldhu	r2,-20(fp)
 101ba9c:	1884703a 	and	r2,r3,r2
 101baa0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 101baa4:	e0bff98b 	ldhu	r2,-26(fp)
 101baa8:	1005003a 	cmpeq	r2,r2,zero
 101baac:	10000d1e 	bne	r2,zero,101bae4 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101bab0:	e0bff903 	ldbu	r2,-28(fp)
 101bab4:	10800058 	cmpnei	r2,r2,1
 101bab8:	10000d1e 	bne	r2,zero,101baf0 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 101babc:	e0bffa17 	ldw	r2,-24(fp)
 101bac0:	1080020b 	ldhu	r2,8(r2)
 101bac4:	1007883a 	mov	r3,r2
 101bac8:	e0bff98b 	ldhu	r2,-26(fp)
 101bacc:	0084303a 	nor	r2,zero,r2
 101bad0:	1884703a 	and	r2,r3,r2
 101bad4:	1007883a 	mov	r3,r2
 101bad8:	e0bffa17 	ldw	r2,-24(fp)
 101badc:	10c0020d 	sth	r3,8(r2)
 101bae0:	00000306 	br	101baf0 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 101bae4:	e0fffd17 	ldw	r3,-12(fp)
 101bae8:	00801c04 	movi	r2,112
 101baec:	18800005 	stb	r2,0(r3)
 101baf0:	e0bff817 	ldw	r2,-32(fp)
 101baf4:	e0bff515 	stw	r2,-44(fp)
 101baf8:	e0bff517 	ldw	r2,-44(fp)
 101bafc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 101bb00:	00004206 	br	101bc0c <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 101bb04:	e0bffa17 	ldw	r2,-24(fp)
 101bb08:	1080020b 	ldhu	r2,8(r2)
 101bb0c:	0084303a 	nor	r2,zero,r2
 101bb10:	1007883a 	mov	r3,r2
 101bb14:	e0bffb0b 	ldhu	r2,-20(fp)
 101bb18:	1884703a 	and	r2,r3,r2
 101bb1c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 101bb20:	e0fff98b 	ldhu	r3,-26(fp)
 101bb24:	e0bffb0b 	ldhu	r2,-20(fp)
 101bb28:	18800b1e 	bne	r3,r2,101bb58 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101bb2c:	e0bff903 	ldbu	r2,-28(fp)
 101bb30:	10800058 	cmpnei	r2,r2,1
 101bb34:	10000b1e 	bne	r2,zero,101bb64 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 101bb38:	e0bffa17 	ldw	r2,-24(fp)
 101bb3c:	10c0020b 	ldhu	r3,8(r2)
 101bb40:	e0bff98b 	ldhu	r2,-26(fp)
 101bb44:	1884b03a 	or	r2,r3,r2
 101bb48:	1007883a 	mov	r3,r2
 101bb4c:	e0bffa17 	ldw	r2,-24(fp)
 101bb50:	10c0020d 	sth	r3,8(r2)
 101bb54:	00000306 	br	101bb64 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 101bb58:	e0fffd17 	ldw	r3,-12(fp)
 101bb5c:	00801c04 	movi	r2,112
 101bb60:	18800005 	stb	r2,0(r3)
 101bb64:	e0bff817 	ldw	r2,-32(fp)
 101bb68:	e0bff415 	stw	r2,-48(fp)
 101bb6c:	e0bff417 	ldw	r2,-48(fp)
 101bb70:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 101bb74:	00002506 	br	101bc0c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 101bb78:	e0bffa17 	ldw	r2,-24(fp)
 101bb7c:	1080020b 	ldhu	r2,8(r2)
 101bb80:	0084303a 	nor	r2,zero,r2
 101bb84:	1007883a 	mov	r3,r2
 101bb88:	e0bffb0b 	ldhu	r2,-20(fp)
 101bb8c:	1884703a 	and	r2,r3,r2
 101bb90:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 101bb94:	e0bff98b 	ldhu	r2,-26(fp)
 101bb98:	1005003a 	cmpeq	r2,r2,zero
 101bb9c:	10000b1e 	bne	r2,zero,101bbcc <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101bba0:	e0bff903 	ldbu	r2,-28(fp)
 101bba4:	10800058 	cmpnei	r2,r2,1
 101bba8:	10000b1e 	bne	r2,zero,101bbd8 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 101bbac:	e0bffa17 	ldw	r2,-24(fp)
 101bbb0:	10c0020b 	ldhu	r3,8(r2)
 101bbb4:	e0bff98b 	ldhu	r2,-26(fp)
 101bbb8:	1884b03a 	or	r2,r3,r2
 101bbbc:	1007883a 	mov	r3,r2
 101bbc0:	e0bffa17 	ldw	r2,-24(fp)
 101bbc4:	10c0020d 	sth	r3,8(r2)
 101bbc8:	00000306 	br	101bbd8 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 101bbcc:	e0fffd17 	ldw	r3,-12(fp)
 101bbd0:	00801c04 	movi	r2,112
 101bbd4:	18800005 	stb	r2,0(r3)
 101bbd8:	e0bff817 	ldw	r2,-32(fp)
 101bbdc:	e0bff315 	stw	r2,-52(fp)
 101bbe0:	e0bff317 	ldw	r2,-52(fp)
 101bbe4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 101bbe8:	00000806 	br	101bc0c <OSFlagAccept+0x318>
 101bbec:	e0bff817 	ldw	r2,-32(fp)
 101bbf0:	e0bff215 	stw	r2,-56(fp)
 101bbf4:	e0bff217 	ldw	r2,-56(fp)
 101bbf8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 101bbfc:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 101bc00:	e0fffd17 	ldw	r3,-12(fp)
 101bc04:	00801bc4 	movi	r2,111
 101bc08:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 101bc0c:	e0bff98b 	ldhu	r2,-26(fp)
 101bc10:	e0bfff15 	stw	r2,-4(fp)
 101bc14:	e0bfff17 	ldw	r2,-4(fp)
}
 101bc18:	e037883a 	mov	sp,fp
 101bc1c:	df000017 	ldw	fp,0(sp)
 101bc20:	dec00104 	addi	sp,sp,4
 101bc24:	f800283a 	ret

0101bc28 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 101bc28:	defff704 	addi	sp,sp,-36
 101bc2c:	df000815 	stw	fp,32(sp)
 101bc30:	df000804 	addi	fp,sp,32
 101bc34:	e17ffe15 	stw	r5,-8(fp)
 101bc38:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 101bc3c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 101bc40:	e0bffe17 	ldw	r2,-8(fp)
 101bc44:	1004c03a 	cmpne	r2,r2,zero
 101bc48:	1000021e 	bne	r2,zero,101bc54 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 101bc4c:	e03fff15 	stw	zero,-4(fp)
 101bc50:	00003f06 	br	101bd50 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 101bc54:	008040f4 	movhi	r2,259
 101bc58:	10a71e04 	addi	r2,r2,-25480
 101bc5c:	10800003 	ldbu	r2,0(r2)
 101bc60:	10803fcc 	andi	r2,r2,255
 101bc64:	1005003a 	cmpeq	r2,r2,zero
 101bc68:	1000051e 	bne	r2,zero,101bc80 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 101bc6c:	e0fffe17 	ldw	r3,-8(fp)
 101bc70:	00800404 	movi	r2,16
 101bc74:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 101bc78:	e03fff15 	stw	zero,-4(fp)
 101bc7c:	00003406 	br	101bd50 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101bc80:	0005303a 	rdctl	r2,status
 101bc84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101bc88:	e0fffa17 	ldw	r3,-24(fp)
 101bc8c:	00bfff84 	movi	r2,-2
 101bc90:	1884703a 	and	r2,r3,r2
 101bc94:	1001703a 	wrctl	status,r2
  
  return context;
 101bc98:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101bc9c:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 101bca0:	008040f4 	movhi	r2,259
 101bca4:	10a72104 	addi	r2,r2,-25468
 101bca8:	10800017 	ldw	r2,0(r2)
 101bcac:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 101bcb0:	e0bffc17 	ldw	r2,-16(fp)
 101bcb4:	1005003a 	cmpeq	r2,r2,zero
 101bcb8:	10001c1e 	bne	r2,zero,101bd2c <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 101bcbc:	008040f4 	movhi	r2,259
 101bcc0:	10a72104 	addi	r2,r2,-25468
 101bcc4:	10800017 	ldw	r2,0(r2)
 101bcc8:	10800117 	ldw	r2,4(r2)
 101bccc:	1007883a 	mov	r3,r2
 101bcd0:	008040f4 	movhi	r2,259
 101bcd4:	10a72104 	addi	r2,r2,-25468
 101bcd8:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 101bcdc:	e0fffc17 	ldw	r3,-16(fp)
 101bce0:	00800144 	movi	r2,5
 101bce4:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 101bce8:	e0fffc17 	ldw	r3,-16(fp)
 101bcec:	e0bffd0b 	ldhu	r2,-12(fp)
 101bcf0:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 101bcf4:	e0bffc17 	ldw	r2,-16(fp)
 101bcf8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 101bcfc:	e0fffc17 	ldw	r3,-16(fp)
 101bd00:	00800fc4 	movi	r2,63
 101bd04:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 101bd08:	e0bffc17 	ldw	r2,-16(fp)
 101bd0c:	100002c5 	stb	zero,11(r2)
 101bd10:	e0bffb17 	ldw	r2,-20(fp)
 101bd14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101bd18:	e0bff917 	ldw	r2,-28(fp)
 101bd1c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 101bd20:	e0bffe17 	ldw	r2,-8(fp)
 101bd24:	10000005 	stb	zero,0(r2)
 101bd28:	00000706 	br	101bd48 <OSFlagCreate+0x120>
 101bd2c:	e0bffb17 	ldw	r2,-20(fp)
 101bd30:	e0bff815 	stw	r2,-32(fp)
 101bd34:	e0bff817 	ldw	r2,-32(fp)
 101bd38:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 101bd3c:	e0fffe17 	ldw	r3,-8(fp)
 101bd40:	00801c84 	movi	r2,114
 101bd44:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 101bd48:	e0bffc17 	ldw	r2,-16(fp)
 101bd4c:	e0bfff15 	stw	r2,-4(fp)
 101bd50:	e0bfff17 	ldw	r2,-4(fp)
}
 101bd54:	e037883a 	mov	sp,fp
 101bd58:	df000017 	ldw	fp,0(sp)
 101bd5c:	dec00104 	addi	sp,sp,4
 101bd60:	f800283a 	ret

0101bd64 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 101bd64:	defff004 	addi	sp,sp,-64
 101bd68:	dfc00f15 	stw	ra,60(sp)
 101bd6c:	df000e15 	stw	fp,56(sp)
 101bd70:	df000e04 	addi	fp,sp,56
 101bd74:	e13ffb15 	stw	r4,-20(fp)
 101bd78:	e1bffd15 	stw	r6,-12(fp)
 101bd7c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 101bd80:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 101bd84:	e0bffd17 	ldw	r2,-12(fp)
 101bd88:	1004c03a 	cmpne	r2,r2,zero
 101bd8c:	1000031e 	bne	r2,zero,101bd9c <OSFlagDel+0x38>
        return (pgrp);
 101bd90:	e0bffb17 	ldw	r2,-20(fp)
 101bd94:	e0bfff15 	stw	r2,-4(fp)
 101bd98:	00009606 	br	101bff4 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 101bd9c:	e0bffb17 	ldw	r2,-20(fp)
 101bda0:	1004c03a 	cmpne	r2,r2,zero
 101bda4:	1000061e 	bne	r2,zero,101bdc0 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101bda8:	e0fffd17 	ldw	r3,-12(fp)
 101bdac:	00801b84 	movi	r2,110
 101bdb0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 101bdb4:	e0fffb17 	ldw	r3,-20(fp)
 101bdb8:	e0ffff15 	stw	r3,-4(fp)
 101bdbc:	00008d06 	br	101bff4 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 101bdc0:	008040f4 	movhi	r2,259
 101bdc4:	10a71e04 	addi	r2,r2,-25480
 101bdc8:	10800003 	ldbu	r2,0(r2)
 101bdcc:	10803fcc 	andi	r2,r2,255
 101bdd0:	1005003a 	cmpeq	r2,r2,zero
 101bdd4:	1000061e 	bne	r2,zero,101bdf0 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 101bdd8:	e0fffd17 	ldw	r3,-12(fp)
 101bddc:	008003c4 	movi	r2,15
 101bde0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 101bde4:	e0bffb17 	ldw	r2,-20(fp)
 101bde8:	e0bfff15 	stw	r2,-4(fp)
 101bdec:	00008106 	br	101bff4 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 101bdf0:	e0bffb17 	ldw	r2,-20(fp)
 101bdf4:	10800003 	ldbu	r2,0(r2)
 101bdf8:	10803fcc 	andi	r2,r2,255
 101bdfc:	10800160 	cmpeqi	r2,r2,5
 101be00:	1000061e 	bne	r2,zero,101be1c <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 101be04:	e0fffd17 	ldw	r3,-12(fp)
 101be08:	00800044 	movi	r2,1
 101be0c:	18800005 	stb	r2,0(r3)
        return (pgrp);
 101be10:	e0fffb17 	ldw	r3,-20(fp)
 101be14:	e0ffff15 	stw	r3,-4(fp)
 101be18:	00007606 	br	101bff4 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101be1c:	0005303a 	rdctl	r2,status
 101be20:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101be24:	e0fff617 	ldw	r3,-40(fp)
 101be28:	00bfff84 	movi	r2,-2
 101be2c:	1884703a 	and	r2,r3,r2
 101be30:	1001703a 	wrctl	status,r2
  
  return context;
 101be34:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 101be38:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 101be3c:	e0bffb17 	ldw	r2,-20(fp)
 101be40:	10800117 	ldw	r2,4(r2)
 101be44:	1005003a 	cmpeq	r2,r2,zero
 101be48:	1000031e 	bne	r2,zero,101be58 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 101be4c:	00800044 	movi	r2,1
 101be50:	e0bffa05 	stb	r2,-24(fp)
 101be54:	00000106 	br	101be5c <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 101be58:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 101be5c:	e0bffc03 	ldbu	r2,-16(fp)
 101be60:	e0bffe15 	stw	r2,-8(fp)
 101be64:	e0fffe17 	ldw	r3,-8(fp)
 101be68:	1805003a 	cmpeq	r2,r3,zero
 101be6c:	1000041e 	bne	r2,zero,101be80 <OSFlagDel+0x11c>
 101be70:	e0fffe17 	ldw	r3,-8(fp)
 101be74:	18800060 	cmpeqi	r2,r3,1
 101be78:	1000281e 	bne	r2,zero,101bf1c <OSFlagDel+0x1b8>
 101be7c:	00005206 	br	101bfc8 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 101be80:	e0bffa03 	ldbu	r2,-24(fp)
 101be84:	1004c03a 	cmpne	r2,r2,zero
 101be88:	10001a1e 	bne	r2,zero,101bef4 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 101be8c:	e0fffb17 	ldw	r3,-20(fp)
 101be90:	00800fc4 	movi	r2,63
 101be94:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 101be98:	e0bffb17 	ldw	r2,-20(fp)
 101be9c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 101bea0:	e0bffb17 	ldw	r2,-20(fp)
 101bea4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 101bea8:	008040f4 	movhi	r2,259
 101beac:	10a72104 	addi	r2,r2,-25468
 101beb0:	10c00017 	ldw	r3,0(r2)
 101beb4:	e0bffb17 	ldw	r2,-20(fp)
 101beb8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 101bebc:	e0bffb17 	ldw	r2,-20(fp)
 101bec0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 101bec4:	00c040f4 	movhi	r3,259
 101bec8:	18e72104 	addi	r3,r3,-25468
 101becc:	e0bffb17 	ldw	r2,-20(fp)
 101bed0:	18800015 	stw	r2,0(r3)
 101bed4:	e0bff717 	ldw	r2,-36(fp)
 101bed8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101bedc:	e0bff517 	ldw	r2,-44(fp)
 101bee0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 101bee4:	e0bffd17 	ldw	r2,-12(fp)
 101bee8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 101beec:	e03ff815 	stw	zero,-32(fp)
 101bef0:	00003e06 	br	101bfec <OSFlagDel+0x288>
 101bef4:	e0bff717 	ldw	r2,-36(fp)
 101bef8:	e0bff415 	stw	r2,-48(fp)
 101befc:	e0bff417 	ldw	r2,-48(fp)
 101bf00:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 101bf04:	e0fffd17 	ldw	r3,-12(fp)
 101bf08:	00801244 	movi	r2,73
 101bf0c:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 101bf10:	e0bffb17 	ldw	r2,-20(fp)
 101bf14:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 101bf18:	00003406 	br	101bfec <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 101bf1c:	e0bffb17 	ldw	r2,-20(fp)
 101bf20:	10800117 	ldw	r2,4(r2)
 101bf24:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 101bf28:	00000606 	br	101bf44 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 101bf2c:	e13ff917 	ldw	r4,-28(fp)
 101bf30:	000b883a 	mov	r5,zero
 101bf34:	101d0740 	call	101d074 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 101bf38:	e0bff917 	ldw	r2,-28(fp)
 101bf3c:	10800017 	ldw	r2,0(r2)
 101bf40:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 101bf44:	e0bff917 	ldw	r2,-28(fp)
 101bf48:	1004c03a 	cmpne	r2,r2,zero
 101bf4c:	103ff71e 	bne	r2,zero,101bf2c <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 101bf50:	e0fffb17 	ldw	r3,-20(fp)
 101bf54:	00800fc4 	movi	r2,63
 101bf58:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 101bf5c:	e0bffb17 	ldw	r2,-20(fp)
 101bf60:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 101bf64:	e0bffb17 	ldw	r2,-20(fp)
 101bf68:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 101bf6c:	008040f4 	movhi	r2,259
 101bf70:	10a72104 	addi	r2,r2,-25468
 101bf74:	10c00017 	ldw	r3,0(r2)
 101bf78:	e0bffb17 	ldw	r2,-20(fp)
 101bf7c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 101bf80:	e0bffb17 	ldw	r2,-20(fp)
 101bf84:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 101bf88:	00c040f4 	movhi	r3,259
 101bf8c:	18e72104 	addi	r3,r3,-25468
 101bf90:	e0bffb17 	ldw	r2,-20(fp)
 101bf94:	18800015 	stw	r2,0(r3)
 101bf98:	e0bff717 	ldw	r2,-36(fp)
 101bf9c:	e0bff315 	stw	r2,-52(fp)
 101bfa0:	e0bff317 	ldw	r2,-52(fp)
 101bfa4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 101bfa8:	e0bffa03 	ldbu	r2,-24(fp)
 101bfac:	10800058 	cmpnei	r2,r2,1
 101bfb0:	1000011e 	bne	r2,zero,101bfb8 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 101bfb4:	101b0800 	call	101b080 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 101bfb8:	e0bffd17 	ldw	r2,-12(fp)
 101bfbc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 101bfc0:	e03ff815 	stw	zero,-32(fp)
             break;
 101bfc4:	00000906 	br	101bfec <OSFlagDel+0x288>
 101bfc8:	e0bff717 	ldw	r2,-36(fp)
 101bfcc:	e0bff215 	stw	r2,-56(fp)
 101bfd0:	e0bff217 	ldw	r2,-56(fp)
 101bfd4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 101bfd8:	e0fffd17 	ldw	r3,-12(fp)
 101bfdc:	008001c4 	movi	r2,7
 101bfe0:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 101bfe4:	e0bffb17 	ldw	r2,-20(fp)
 101bfe8:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 101bfec:	e0bff817 	ldw	r2,-32(fp)
 101bff0:	e0bfff15 	stw	r2,-4(fp)
 101bff4:	e0bfff17 	ldw	r2,-4(fp)
}
 101bff8:	e037883a 	mov	sp,fp
 101bffc:	dfc00117 	ldw	ra,4(sp)
 101c000:	df000017 	ldw	fp,0(sp)
 101c004:	dec00204 	addi	sp,sp,8
 101c008:	f800283a 	ret

0101c00c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 101c00c:	defff504 	addi	sp,sp,-44
 101c010:	dfc00a15 	stw	ra,40(sp)
 101c014:	df000915 	stw	fp,36(sp)
 101c018:	df000904 	addi	fp,sp,36
 101c01c:	e13ffc15 	stw	r4,-16(fp)
 101c020:	e17ffd15 	stw	r5,-12(fp)
 101c024:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101c028:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101c02c:	e0bffe17 	ldw	r2,-8(fp)
 101c030:	1004c03a 	cmpne	r2,r2,zero
 101c034:	1000021e 	bne	r2,zero,101c040 <OSFlagNameGet+0x34>
        return (0);
 101c038:	e03fff15 	stw	zero,-4(fp)
 101c03c:	00003e06 	br	101c138 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 101c040:	e0bffc17 	ldw	r2,-16(fp)
 101c044:	1004c03a 	cmpne	r2,r2,zero
 101c048:	1000051e 	bne	r2,zero,101c060 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101c04c:	e0fffe17 	ldw	r3,-8(fp)
 101c050:	00801b84 	movi	r2,110
 101c054:	18800005 	stb	r2,0(r3)
        return (0);
 101c058:	e03fff15 	stw	zero,-4(fp)
 101c05c:	00003606 	br	101c138 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 101c060:	e0bffd17 	ldw	r2,-12(fp)
 101c064:	1004c03a 	cmpne	r2,r2,zero
 101c068:	1000051e 	bne	r2,zero,101c080 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 101c06c:	e0fffe17 	ldw	r3,-8(fp)
 101c070:	00800304 	movi	r2,12
 101c074:	18800005 	stb	r2,0(r3)
        return (0);
 101c078:	e03fff15 	stw	zero,-4(fp)
 101c07c:	00002e06 	br	101c138 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 101c080:	008040f4 	movhi	r2,259
 101c084:	10a71e04 	addi	r2,r2,-25480
 101c088:	10800003 	ldbu	r2,0(r2)
 101c08c:	10803fcc 	andi	r2,r2,255
 101c090:	1005003a 	cmpeq	r2,r2,zero
 101c094:	1000051e 	bne	r2,zero,101c0ac <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 101c098:	e0fffe17 	ldw	r3,-8(fp)
 101c09c:	00800444 	movi	r2,17
 101c0a0:	18800005 	stb	r2,0(r3)
        return (0);
 101c0a4:	e03fff15 	stw	zero,-4(fp)
 101c0a8:	00002306 	br	101c138 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c0ac:	0005303a 	rdctl	r2,status
 101c0b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c0b4:	e0fff917 	ldw	r3,-28(fp)
 101c0b8:	00bfff84 	movi	r2,-2
 101c0bc:	1884703a 	and	r2,r3,r2
 101c0c0:	1001703a 	wrctl	status,r2
  
  return context;
 101c0c4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101c0c8:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 101c0cc:	e0bffc17 	ldw	r2,-16(fp)
 101c0d0:	10800003 	ldbu	r2,0(r2)
 101c0d4:	10803fcc 	andi	r2,r2,255
 101c0d8:	10800160 	cmpeqi	r2,r2,5
 101c0dc:	1000091e 	bne	r2,zero,101c104 <OSFlagNameGet+0xf8>
 101c0e0:	e0bffa17 	ldw	r2,-24(fp)
 101c0e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c0e8:	e0bff817 	ldw	r2,-32(fp)
 101c0ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 101c0f0:	e0fffe17 	ldw	r3,-8(fp)
 101c0f4:	00800044 	movi	r2,1
 101c0f8:	18800005 	stb	r2,0(r3)
        return (0);
 101c0fc:	e03fff15 	stw	zero,-4(fp)
 101c100:	00000d06 	br	101c138 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 101c104:	e0bffc17 	ldw	r2,-16(fp)
 101c108:	11400284 	addi	r5,r2,10
 101c10c:	e13ffd17 	ldw	r4,-12(fp)
 101c110:	101b1c40 	call	101b1c4 <OS_StrCopy>
 101c114:	e0bffb05 	stb	r2,-20(fp)
 101c118:	e0bffa17 	ldw	r2,-24(fp)
 101c11c:	e0bff715 	stw	r2,-36(fp)
 101c120:	e0bff717 	ldw	r2,-36(fp)
 101c124:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101c128:	e0bffe17 	ldw	r2,-8(fp)
 101c12c:	10000005 	stb	zero,0(r2)
    return (len);
 101c130:	e0bffb03 	ldbu	r2,-20(fp)
 101c134:	e0bfff15 	stw	r2,-4(fp)
 101c138:	e0bfff17 	ldw	r2,-4(fp)
}
 101c13c:	e037883a 	mov	sp,fp
 101c140:	dfc00117 	ldw	ra,4(sp)
 101c144:	df000017 	ldw	fp,0(sp)
 101c148:	dec00204 	addi	sp,sp,8
 101c14c:	f800283a 	ret

0101c150 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 101c150:	defff504 	addi	sp,sp,-44
 101c154:	dfc00a15 	stw	ra,40(sp)
 101c158:	df000915 	stw	fp,36(sp)
 101c15c:	df000904 	addi	fp,sp,36
 101c160:	e13ffd15 	stw	r4,-12(fp)
 101c164:	e17ffe15 	stw	r5,-8(fp)
 101c168:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101c16c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101c170:	e0bfff17 	ldw	r2,-4(fp)
 101c174:	1005003a 	cmpeq	r2,r2,zero
 101c178:	1000451e 	bne	r2,zero,101c290 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 101c17c:	e0bffd17 	ldw	r2,-12(fp)
 101c180:	1004c03a 	cmpne	r2,r2,zero
 101c184:	1000041e 	bne	r2,zero,101c198 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101c188:	e0ffff17 	ldw	r3,-4(fp)
 101c18c:	00801b84 	movi	r2,110
 101c190:	18800005 	stb	r2,0(r3)
        return;
 101c194:	00003e06 	br	101c290 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 101c198:	e0bffe17 	ldw	r2,-8(fp)
 101c19c:	1004c03a 	cmpne	r2,r2,zero
 101c1a0:	1000041e 	bne	r2,zero,101c1b4 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 101c1a4:	e0ffff17 	ldw	r3,-4(fp)
 101c1a8:	00800304 	movi	r2,12
 101c1ac:	18800005 	stb	r2,0(r3)
        return;
 101c1b0:	00003706 	br	101c290 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 101c1b4:	008040f4 	movhi	r2,259
 101c1b8:	10a71e04 	addi	r2,r2,-25480
 101c1bc:	10800003 	ldbu	r2,0(r2)
 101c1c0:	10803fcc 	andi	r2,r2,255
 101c1c4:	1005003a 	cmpeq	r2,r2,zero
 101c1c8:	1000041e 	bne	r2,zero,101c1dc <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 101c1cc:	e0ffff17 	ldw	r3,-4(fp)
 101c1d0:	00800484 	movi	r2,18
 101c1d4:	18800005 	stb	r2,0(r3)
        return;
 101c1d8:	00002d06 	br	101c290 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c1dc:	0005303a 	rdctl	r2,status
 101c1e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c1e4:	e0fffa17 	ldw	r3,-24(fp)
 101c1e8:	00bfff84 	movi	r2,-2
 101c1ec:	1884703a 	and	r2,r3,r2
 101c1f0:	1001703a 	wrctl	status,r2
  
  return context;
 101c1f4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101c1f8:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 101c1fc:	e0bffd17 	ldw	r2,-12(fp)
 101c200:	10800003 	ldbu	r2,0(r2)
 101c204:	10803fcc 	andi	r2,r2,255
 101c208:	10800160 	cmpeqi	r2,r2,5
 101c20c:	1000081e 	bne	r2,zero,101c230 <OSFlagNameSet+0xe0>
 101c210:	e0bffb17 	ldw	r2,-20(fp)
 101c214:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c218:	e0bff917 	ldw	r2,-28(fp)
 101c21c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 101c220:	e0ffff17 	ldw	r3,-4(fp)
 101c224:	00800044 	movi	r2,1
 101c228:	18800005 	stb	r2,0(r3)
        return;
 101c22c:	00001806 	br	101c290 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 101c230:	e13ffe17 	ldw	r4,-8(fp)
 101c234:	101b2440 	call	101b244 <OS_StrLen>
 101c238:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 101c23c:	e0bffc03 	ldbu	r2,-16(fp)
 101c240:	10800830 	cmpltui	r2,r2,32
 101c244:	1000081e 	bne	r2,zero,101c268 <OSFlagNameSet+0x118>
 101c248:	e0bffb17 	ldw	r2,-20(fp)
 101c24c:	e0bff815 	stw	r2,-32(fp)
 101c250:	e0bff817 	ldw	r2,-32(fp)
 101c254:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 101c258:	e0ffff17 	ldw	r3,-4(fp)
 101c25c:	00801cc4 	movi	r2,115
 101c260:	18800005 	stb	r2,0(r3)
        return;
 101c264:	00000a06 	br	101c290 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 101c268:	e0bffd17 	ldw	r2,-12(fp)
 101c26c:	11000284 	addi	r4,r2,10
 101c270:	e17ffe17 	ldw	r5,-8(fp)
 101c274:	101b1c40 	call	101b1c4 <OS_StrCopy>
 101c278:	e0bffb17 	ldw	r2,-20(fp)
 101c27c:	e0bff715 	stw	r2,-36(fp)
 101c280:	e0bff717 	ldw	r2,-36(fp)
 101c284:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101c288:	e0bfff17 	ldw	r2,-4(fp)
 101c28c:	10000005 	stb	zero,0(r2)
    return;
}
 101c290:	e037883a 	mov	sp,fp
 101c294:	dfc00117 	ldw	ra,4(sp)
 101c298:	df000017 	ldw	fp,0(sp)
 101c29c:	dec00204 	addi	sp,sp,8
 101c2a0:	f800283a 	ret

0101c2a4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 101c2a4:	deffe004 	addi	sp,sp,-128
 101c2a8:	dfc01f15 	stw	ra,124(sp)
 101c2ac:	df001e15 	stw	fp,120(sp)
 101c2b0:	df001e04 	addi	fp,sp,120
 101c2b4:	e13ff915 	stw	r4,-28(fp)
 101c2b8:	e17ffa0d 	sth	r5,-24(fp)
 101c2bc:	e1bffb05 	stb	r6,-20(fp)
 101c2c0:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 101c2c4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 101c2c8:	e0800217 	ldw	r2,8(fp)
 101c2cc:	1004c03a 	cmpne	r2,r2,zero
 101c2d0:	1000021e 	bne	r2,zero,101c2dc <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 101c2d4:	e03fff15 	stw	zero,-4(fp)
 101c2d8:	00017d06 	br	101c8d0 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 101c2dc:	e0bff917 	ldw	r2,-28(fp)
 101c2e0:	1004c03a 	cmpne	r2,r2,zero
 101c2e4:	1000051e 	bne	r2,zero,101c2fc <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101c2e8:	e0c00217 	ldw	r3,8(fp)
 101c2ec:	00801b84 	movi	r2,110
 101c2f0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101c2f4:	e03fff15 	stw	zero,-4(fp)
 101c2f8:	00017506 	br	101c8d0 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 101c2fc:	008040f4 	movhi	r2,259
 101c300:	10a71e04 	addi	r2,r2,-25480
 101c304:	10800003 	ldbu	r2,0(r2)
 101c308:	10803fcc 	andi	r2,r2,255
 101c30c:	1005003a 	cmpeq	r2,r2,zero
 101c310:	1000051e 	bne	r2,zero,101c328 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 101c314:	e0c00217 	ldw	r3,8(fp)
 101c318:	00800084 	movi	r2,2
 101c31c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101c320:	e03fff15 	stw	zero,-4(fp)
 101c324:	00016a06 	br	101c8d0 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 101c328:	008040f4 	movhi	r2,259
 101c32c:	10a71004 	addi	r2,r2,-25536
 101c330:	10800003 	ldbu	r2,0(r2)
 101c334:	10803fcc 	andi	r2,r2,255
 101c338:	1005003a 	cmpeq	r2,r2,zero
 101c33c:	1000051e 	bne	r2,zero,101c354 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 101c340:	e0c00217 	ldw	r3,8(fp)
 101c344:	00800344 	movi	r2,13
 101c348:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101c34c:	e03fff15 	stw	zero,-4(fp)
 101c350:	00015f06 	br	101c8d0 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 101c354:	e0bff917 	ldw	r2,-28(fp)
 101c358:	10800003 	ldbu	r2,0(r2)
 101c35c:	10803fcc 	andi	r2,r2,255
 101c360:	10800160 	cmpeqi	r2,r2,5
 101c364:	1000051e 	bne	r2,zero,101c37c <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 101c368:	e0c00217 	ldw	r3,8(fp)
 101c36c:	00800044 	movi	r2,1
 101c370:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101c374:	e03fff15 	stw	zero,-4(fp)
 101c378:	00015506 	br	101c8d0 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 101c37c:	e0fffb03 	ldbu	r3,-20(fp)
 101c380:	00bfe004 	movi	r2,-128
 101c384:	1884703a 	and	r2,r3,r2
 101c388:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 101c38c:	e0bff283 	ldbu	r2,-54(fp)
 101c390:	1005003a 	cmpeq	r2,r2,zero
 101c394:	1000071e 	bne	r2,zero,101c3b4 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 101c398:	00c01fc4 	movi	r3,127
 101c39c:	e0bffb03 	ldbu	r2,-20(fp)
 101c3a0:	10c4703a 	and	r2,r2,r3
 101c3a4:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 101c3a8:	00800044 	movi	r2,1
 101c3ac:	e0bff205 	stb	r2,-56(fp)
 101c3b0:	00000106 	br	101c3b8 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 101c3b4:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c3b8:	0005303a 	rdctl	r2,status
 101c3bc:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c3c0:	e0fff017 	ldw	r3,-64(fp)
 101c3c4:	00bfff84 	movi	r2,-2
 101c3c8:	1884703a 	and	r2,r3,r2
 101c3cc:	1001703a 	wrctl	status,r2
  
  return context;
 101c3d0:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 101c3d4:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 101c3d8:	e0bffb03 	ldbu	r2,-20(fp)
 101c3dc:	e0bffe15 	stw	r2,-8(fp)
 101c3e0:	e0fffe17 	ldw	r3,-8(fp)
 101c3e4:	18800060 	cmpeqi	r2,r3,1
 101c3e8:	1000981e 	bne	r2,zero,101c64c <OSFlagPend+0x3a8>
 101c3ec:	e0fffe17 	ldw	r3,-8(fp)
 101c3f0:	18800088 	cmpgei	r2,r3,2
 101c3f4:	1000041e 	bne	r2,zero,101c408 <OSFlagPend+0x164>
 101c3f8:	e0fffe17 	ldw	r3,-8(fp)
 101c3fc:	1805003a 	cmpeq	r2,r3,zero
 101c400:	1000641e 	bne	r2,zero,101c594 <OSFlagPend+0x2f0>
 101c404:	0000bf06 	br	101c704 <OSFlagPend+0x460>
 101c408:	e0fffe17 	ldw	r3,-8(fp)
 101c40c:	188000a0 	cmpeqi	r2,r3,2
 101c410:	1000041e 	bne	r2,zero,101c424 <OSFlagPend+0x180>
 101c414:	e0fffe17 	ldw	r3,-8(fp)
 101c418:	188000e0 	cmpeqi	r2,r3,3
 101c41c:	10002f1e 	bne	r2,zero,101c4dc <OSFlagPend+0x238>
 101c420:	0000b806 	br	101c704 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 101c424:	e0bff917 	ldw	r2,-28(fp)
 101c428:	10c0020b 	ldhu	r3,8(r2)
 101c42c:	e0bffa0b 	ldhu	r2,-24(fp)
 101c430:	1884703a 	and	r2,r3,r2
 101c434:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 101c438:	e0fff30b 	ldhu	r3,-52(fp)
 101c43c:	e0bffa0b 	ldhu	r2,-24(fp)
 101c440:	18801a1e 	bne	r3,r2,101c4ac <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101c444:	e0bff203 	ldbu	r2,-56(fp)
 101c448:	10800058 	cmpnei	r2,r2,1
 101c44c:	1000091e 	bne	r2,zero,101c474 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 101c450:	e0bff917 	ldw	r2,-28(fp)
 101c454:	1080020b 	ldhu	r2,8(r2)
 101c458:	1007883a 	mov	r3,r2
 101c45c:	e0bff30b 	ldhu	r2,-52(fp)
 101c460:	0084303a 	nor	r2,zero,r2
 101c464:	1884703a 	and	r2,r3,r2
 101c468:	1007883a 	mov	r3,r2
 101c46c:	e0bff917 	ldw	r2,-28(fp)
 101c470:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 101c474:	008040f4 	movhi	r2,259
 101c478:	10a71f04 	addi	r2,r2,-25476
 101c47c:	10c00017 	ldw	r3,0(r2)
 101c480:	e0bff30b 	ldhu	r2,-52(fp)
 101c484:	18800b0d 	sth	r2,44(r3)
 101c488:	e0bff117 	ldw	r2,-60(fp)
 101c48c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c490:	e0bfef17 	ldw	r2,-68(fp)
 101c494:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 101c498:	e0800217 	ldw	r2,8(fp)
 101c49c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 101c4a0:	e0bff30b 	ldhu	r2,-52(fp)
 101c4a4:	e0bfff15 	stw	r2,-4(fp)
 101c4a8:	00010906 	br	101c8d0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 101c4ac:	e1bffa0b 	ldhu	r6,-24(fp)
 101c4b0:	e1fffb03 	ldbu	r7,-20(fp)
 101c4b4:	e0bffc0b 	ldhu	r2,-16(fp)
 101c4b8:	e17ff404 	addi	r5,fp,-48
 101c4bc:	d8800015 	stw	r2,0(sp)
 101c4c0:	e13ff917 	ldw	r4,-28(fp)
 101c4c4:	101cdcc0 	call	101cdcc <OS_FlagBlock>
 101c4c8:	e0bff117 	ldw	r2,-60(fp)
 101c4cc:	e0bfee15 	stw	r2,-72(fp)
 101c4d0:	e0bfee17 	ldw	r2,-72(fp)
 101c4d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 101c4d8:	00009506 	br	101c730 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 101c4dc:	e0bff917 	ldw	r2,-28(fp)
 101c4e0:	10c0020b 	ldhu	r3,8(r2)
 101c4e4:	e0bffa0b 	ldhu	r2,-24(fp)
 101c4e8:	1884703a 	and	r2,r3,r2
 101c4ec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 101c4f0:	e0bff30b 	ldhu	r2,-52(fp)
 101c4f4:	1005003a 	cmpeq	r2,r2,zero
 101c4f8:	10001a1e 	bne	r2,zero,101c564 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101c4fc:	e0bff203 	ldbu	r2,-56(fp)
 101c500:	10800058 	cmpnei	r2,r2,1
 101c504:	1000091e 	bne	r2,zero,101c52c <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 101c508:	e0bff917 	ldw	r2,-28(fp)
 101c50c:	1080020b 	ldhu	r2,8(r2)
 101c510:	1007883a 	mov	r3,r2
 101c514:	e0bff30b 	ldhu	r2,-52(fp)
 101c518:	0084303a 	nor	r2,zero,r2
 101c51c:	1884703a 	and	r2,r3,r2
 101c520:	1007883a 	mov	r3,r2
 101c524:	e0bff917 	ldw	r2,-28(fp)
 101c528:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 101c52c:	008040f4 	movhi	r2,259
 101c530:	10a71f04 	addi	r2,r2,-25476
 101c534:	10c00017 	ldw	r3,0(r2)
 101c538:	e0bff30b 	ldhu	r2,-52(fp)
 101c53c:	18800b0d 	sth	r2,44(r3)
 101c540:	e0bff117 	ldw	r2,-60(fp)
 101c544:	e0bfed15 	stw	r2,-76(fp)
 101c548:	e0bfed17 	ldw	r2,-76(fp)
 101c54c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 101c550:	e0800217 	ldw	r2,8(fp)
 101c554:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 101c558:	e0fff30b 	ldhu	r3,-52(fp)
 101c55c:	e0ffff15 	stw	r3,-4(fp)
 101c560:	0000db06 	br	101c8d0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 101c564:	e1bffa0b 	ldhu	r6,-24(fp)
 101c568:	e1fffb03 	ldbu	r7,-20(fp)
 101c56c:	e0bffc0b 	ldhu	r2,-16(fp)
 101c570:	e17ff404 	addi	r5,fp,-48
 101c574:	d8800015 	stw	r2,0(sp)
 101c578:	e13ff917 	ldw	r4,-28(fp)
 101c57c:	101cdcc0 	call	101cdcc <OS_FlagBlock>
 101c580:	e0bff117 	ldw	r2,-60(fp)
 101c584:	e0bfec15 	stw	r2,-80(fp)
 101c588:	e0bfec17 	ldw	r2,-80(fp)
 101c58c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 101c590:	00006706 	br	101c730 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 101c594:	e0bff917 	ldw	r2,-28(fp)
 101c598:	1080020b 	ldhu	r2,8(r2)
 101c59c:	0084303a 	nor	r2,zero,r2
 101c5a0:	1007883a 	mov	r3,r2
 101c5a4:	e0bffa0b 	ldhu	r2,-24(fp)
 101c5a8:	1884703a 	and	r2,r3,r2
 101c5ac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 101c5b0:	e0fff30b 	ldhu	r3,-52(fp)
 101c5b4:	e0bffa0b 	ldhu	r2,-24(fp)
 101c5b8:	1880181e 	bne	r3,r2,101c61c <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101c5bc:	e0bff203 	ldbu	r2,-56(fp)
 101c5c0:	10800058 	cmpnei	r2,r2,1
 101c5c4:	1000071e 	bne	r2,zero,101c5e4 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 101c5c8:	e0bff917 	ldw	r2,-28(fp)
 101c5cc:	10c0020b 	ldhu	r3,8(r2)
 101c5d0:	e0bff30b 	ldhu	r2,-52(fp)
 101c5d4:	1884b03a 	or	r2,r3,r2
 101c5d8:	1007883a 	mov	r3,r2
 101c5dc:	e0bff917 	ldw	r2,-28(fp)
 101c5e0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 101c5e4:	008040f4 	movhi	r2,259
 101c5e8:	10a71f04 	addi	r2,r2,-25476
 101c5ec:	10c00017 	ldw	r3,0(r2)
 101c5f0:	e0bff30b 	ldhu	r2,-52(fp)
 101c5f4:	18800b0d 	sth	r2,44(r3)
 101c5f8:	e0bff117 	ldw	r2,-60(fp)
 101c5fc:	e0bfeb15 	stw	r2,-84(fp)
 101c600:	e0bfeb17 	ldw	r2,-84(fp)
 101c604:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 101c608:	e0800217 	ldw	r2,8(fp)
 101c60c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 101c610:	e0bff30b 	ldhu	r2,-52(fp)
 101c614:	e0bfff15 	stw	r2,-4(fp)
 101c618:	0000ad06 	br	101c8d0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 101c61c:	e1bffa0b 	ldhu	r6,-24(fp)
 101c620:	e1fffb03 	ldbu	r7,-20(fp)
 101c624:	e0bffc0b 	ldhu	r2,-16(fp)
 101c628:	e17ff404 	addi	r5,fp,-48
 101c62c:	d8800015 	stw	r2,0(sp)
 101c630:	e13ff917 	ldw	r4,-28(fp)
 101c634:	101cdcc0 	call	101cdcc <OS_FlagBlock>
 101c638:	e0bff117 	ldw	r2,-60(fp)
 101c63c:	e0bfea15 	stw	r2,-88(fp)
 101c640:	e0bfea17 	ldw	r2,-88(fp)
 101c644:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 101c648:	00003906 	br	101c730 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 101c64c:	e0bff917 	ldw	r2,-28(fp)
 101c650:	1080020b 	ldhu	r2,8(r2)
 101c654:	0084303a 	nor	r2,zero,r2
 101c658:	1007883a 	mov	r3,r2
 101c65c:	e0bffa0b 	ldhu	r2,-24(fp)
 101c660:	1884703a 	and	r2,r3,r2
 101c664:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 101c668:	e0bff30b 	ldhu	r2,-52(fp)
 101c66c:	1005003a 	cmpeq	r2,r2,zero
 101c670:	1000181e 	bne	r2,zero,101c6d4 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 101c674:	e0bff203 	ldbu	r2,-56(fp)
 101c678:	10800058 	cmpnei	r2,r2,1
 101c67c:	1000071e 	bne	r2,zero,101c69c <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 101c680:	e0bff917 	ldw	r2,-28(fp)
 101c684:	10c0020b 	ldhu	r3,8(r2)
 101c688:	e0bff30b 	ldhu	r2,-52(fp)
 101c68c:	1884b03a 	or	r2,r3,r2
 101c690:	1007883a 	mov	r3,r2
 101c694:	e0bff917 	ldw	r2,-28(fp)
 101c698:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 101c69c:	008040f4 	movhi	r2,259
 101c6a0:	10a71f04 	addi	r2,r2,-25476
 101c6a4:	10c00017 	ldw	r3,0(r2)
 101c6a8:	e0bff30b 	ldhu	r2,-52(fp)
 101c6ac:	18800b0d 	sth	r2,44(r3)
 101c6b0:	e0bff117 	ldw	r2,-60(fp)
 101c6b4:	e0bfe915 	stw	r2,-92(fp)
 101c6b8:	e0bfe917 	ldw	r2,-92(fp)
 101c6bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 101c6c0:	e0800217 	ldw	r2,8(fp)
 101c6c4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 101c6c8:	e0fff30b 	ldhu	r3,-52(fp)
 101c6cc:	e0ffff15 	stw	r3,-4(fp)
 101c6d0:	00007f06 	br	101c8d0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 101c6d4:	e1bffa0b 	ldhu	r6,-24(fp)
 101c6d8:	e1fffb03 	ldbu	r7,-20(fp)
 101c6dc:	e0bffc0b 	ldhu	r2,-16(fp)
 101c6e0:	e17ff404 	addi	r5,fp,-48
 101c6e4:	d8800015 	stw	r2,0(sp)
 101c6e8:	e13ff917 	ldw	r4,-28(fp)
 101c6ec:	101cdcc0 	call	101cdcc <OS_FlagBlock>
 101c6f0:	e0bff117 	ldw	r2,-60(fp)
 101c6f4:	e0bfe815 	stw	r2,-96(fp)
 101c6f8:	e0bfe817 	ldw	r2,-96(fp)
 101c6fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 101c700:	00000b06 	br	101c730 <OSFlagPend+0x48c>
 101c704:	e0bff117 	ldw	r2,-60(fp)
 101c708:	e0bfe715 	stw	r2,-100(fp)
 101c70c:	e0bfe717 	ldw	r2,-100(fp)
 101c710:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 101c714:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 101c718:	e0c00217 	ldw	r3,8(fp)
 101c71c:	00801bc4 	movi	r2,111
 101c720:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 101c724:	e0bff30b 	ldhu	r2,-52(fp)
 101c728:	e0bfff15 	stw	r2,-4(fp)
 101c72c:	00006806 	br	101c8d0 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 101c730:	101b0800 	call	101b080 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c734:	0005303a 	rdctl	r2,status
 101c738:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c73c:	e0ffe617 	ldw	r3,-104(fp)
 101c740:	00bfff84 	movi	r2,-2
 101c744:	1884703a 	and	r2,r3,r2
 101c748:	1001703a 	wrctl	status,r2
  
  return context;
 101c74c:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 101c750:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 101c754:	008040f4 	movhi	r2,259
 101c758:	10a71f04 	addi	r2,r2,-25476
 101c75c:	10800017 	ldw	r2,0(r2)
 101c760:	10800c43 	ldbu	r2,49(r2)
 101c764:	10803fcc 	andi	r2,r2,255
 101c768:	1005003a 	cmpeq	r2,r2,zero
 101c76c:	1000221e 	bne	r2,zero,101c7f8 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 101c770:	008040f4 	movhi	r2,259
 101c774:	10a71f04 	addi	r2,r2,-25476
 101c778:	10800017 	ldw	r2,0(r2)
 101c77c:	10800c43 	ldbu	r2,49(r2)
 101c780:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 101c784:	008040f4 	movhi	r2,259
 101c788:	10a71f04 	addi	r2,r2,-25476
 101c78c:	10800017 	ldw	r2,0(r2)
 101c790:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 101c794:	e13ff404 	addi	r4,fp,-48
 101c798:	101d1840 	call	101d184 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 101c79c:	008040f4 	movhi	r2,259
 101c7a0:	10a71f04 	addi	r2,r2,-25476
 101c7a4:	10800017 	ldw	r2,0(r2)
 101c7a8:	10000c05 	stb	zero,48(r2)
 101c7ac:	e0bff117 	ldw	r2,-60(fp)
 101c7b0:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c7b4:	e0bfe517 	ldw	r2,-108(fp)
 101c7b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 101c7bc:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 101c7c0:	e0bff243 	ldbu	r2,-55(fp)
 101c7c4:	108000a0 	cmpeqi	r2,r2,2
 101c7c8:	1000011e 	bne	r2,zero,101c7d0 <OSFlagPend+0x52c>
 101c7cc:	00000406 	br	101c7e0 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 101c7d0:	e0c00217 	ldw	r3,8(fp)
 101c7d4:	00800384 	movi	r2,14
 101c7d8:	18800005 	stb	r2,0(r3)
                 break;
 101c7dc:	00000306 	br	101c7ec <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 101c7e0:	e0c00217 	ldw	r3,8(fp)
 101c7e4:	00800284 	movi	r2,10
 101c7e8:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 101c7ec:	e0fff30b 	ldhu	r3,-52(fp)
 101c7f0:	e0ffff15 	stw	r3,-4(fp)
 101c7f4:	00003606 	br	101c8d0 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 101c7f8:	008040f4 	movhi	r2,259
 101c7fc:	10a71f04 	addi	r2,r2,-25476
 101c800:	10800017 	ldw	r2,0(r2)
 101c804:	10800b0b 	ldhu	r2,44(r2)
 101c808:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 101c80c:	e0bff203 	ldbu	r2,-56(fp)
 101c810:	10800058 	cmpnei	r2,r2,1
 101c814:	1000261e 	bne	r2,zero,101c8b0 <OSFlagPend+0x60c>
        switch (wait_type) {
 101c818:	e0bffb03 	ldbu	r2,-20(fp)
 101c81c:	e0bffd15 	stw	r2,-12(fp)
 101c820:	e0fffd17 	ldw	r3,-12(fp)
 101c824:	1804803a 	cmplt	r2,r3,zero
 101c828:	1000181e 	bne	r2,zero,101c88c <OSFlagPend+0x5e8>
 101c82c:	e0fffd17 	ldw	r3,-12(fp)
 101c830:	18800090 	cmplti	r2,r3,2
 101c834:	10000d1e 	bne	r2,zero,101c86c <OSFlagPend+0x5c8>
 101c838:	e0fffd17 	ldw	r3,-12(fp)
 101c83c:	18800108 	cmpgei	r2,r3,4
 101c840:	1000121e 	bne	r2,zero,101c88c <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 101c844:	e0bff917 	ldw	r2,-28(fp)
 101c848:	1080020b 	ldhu	r2,8(r2)
 101c84c:	1007883a 	mov	r3,r2
 101c850:	e0bff30b 	ldhu	r2,-52(fp)
 101c854:	0084303a 	nor	r2,zero,r2
 101c858:	1884703a 	and	r2,r3,r2
 101c85c:	1007883a 	mov	r3,r2
 101c860:	e0bff917 	ldw	r2,-28(fp)
 101c864:	10c0020d 	sth	r3,8(r2)
                 break;
 101c868:	00001106 	br	101c8b0 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 101c86c:	e0bff917 	ldw	r2,-28(fp)
 101c870:	10c0020b 	ldhu	r3,8(r2)
 101c874:	e0bff30b 	ldhu	r2,-52(fp)
 101c878:	1884b03a 	or	r2,r3,r2
 101c87c:	1007883a 	mov	r3,r2
 101c880:	e0bff917 	ldw	r2,-28(fp)
 101c884:	10c0020d 	sth	r3,8(r2)
                 break;
 101c888:	00000906 	br	101c8b0 <OSFlagPend+0x60c>
 101c88c:	e0bff117 	ldw	r2,-60(fp)
 101c890:	e0bfe415 	stw	r2,-112(fp)
 101c894:	e0bfe417 	ldw	r2,-112(fp)
 101c898:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 101c89c:	e0c00217 	ldw	r3,8(fp)
 101c8a0:	00801bc4 	movi	r2,111
 101c8a4:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 101c8a8:	e03fff15 	stw	zero,-4(fp)
 101c8ac:	00000806 	br	101c8d0 <OSFlagPend+0x62c>
 101c8b0:	e0bff117 	ldw	r2,-60(fp)
 101c8b4:	e0bfe315 	stw	r2,-116(fp)
 101c8b8:	e0bfe317 	ldw	r2,-116(fp)
 101c8bc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 101c8c0:	e0800217 	ldw	r2,8(fp)
 101c8c4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 101c8c8:	e0bff30b 	ldhu	r2,-52(fp)
 101c8cc:	e0bfff15 	stw	r2,-4(fp)
 101c8d0:	e0bfff17 	ldw	r2,-4(fp)
}
 101c8d4:	e037883a 	mov	sp,fp
 101c8d8:	dfc00117 	ldw	ra,4(sp)
 101c8dc:	df000017 	ldw	fp,0(sp)
 101c8e0:	dec00204 	addi	sp,sp,8
 101c8e4:	f800283a 	ret

0101c8e8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 101c8e8:	defffb04 	addi	sp,sp,-20
 101c8ec:	df000415 	stw	fp,16(sp)
 101c8f0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 101c8f4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c8f8:	0005303a 	rdctl	r2,status
 101c8fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c900:	e0fffd17 	ldw	r3,-12(fp)
 101c904:	00bfff84 	movi	r2,-2
 101c908:	1884703a 	and	r2,r3,r2
 101c90c:	1001703a 	wrctl	status,r2
  
  return context;
 101c910:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 101c914:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 101c918:	008040f4 	movhi	r2,259
 101c91c:	10a71f04 	addi	r2,r2,-25476
 101c920:	10800017 	ldw	r2,0(r2)
 101c924:	10800b0b 	ldhu	r2,44(r2)
 101c928:	e0bfff0d 	sth	r2,-4(fp)
 101c92c:	e0bffe17 	ldw	r2,-8(fp)
 101c930:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101c934:	e0bffc17 	ldw	r2,-16(fp)
 101c938:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 101c93c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 101c940:	e037883a 	mov	sp,fp
 101c944:	df000017 	ldw	fp,0(sp)
 101c948:	dec00104 	addi	sp,sp,4
 101c94c:	f800283a 	ret

0101c950 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 101c950:	deffed04 	addi	sp,sp,-76
 101c954:	dfc01215 	stw	ra,72(sp)
 101c958:	df001115 	stw	fp,68(sp)
 101c95c:	df001104 	addi	fp,sp,68
 101c960:	e13ff915 	stw	r4,-28(fp)
 101c964:	e1fffc15 	stw	r7,-16(fp)
 101c968:	e17ffa0d 	sth	r5,-24(fp)
 101c96c:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 101c970:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 101c974:	e0bffc17 	ldw	r2,-16(fp)
 101c978:	1004c03a 	cmpne	r2,r2,zero
 101c97c:	1000021e 	bne	r2,zero,101c988 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 101c980:	e03fff15 	stw	zero,-4(fp)
 101c984:	0000d606 	br	101cce0 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 101c988:	e0bff917 	ldw	r2,-28(fp)
 101c98c:	1004c03a 	cmpne	r2,r2,zero
 101c990:	1000051e 	bne	r2,zero,101c9a8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101c994:	e0fffc17 	ldw	r3,-16(fp)
 101c998:	00801b84 	movi	r2,110
 101c99c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101c9a0:	e03fff15 	stw	zero,-4(fp)
 101c9a4:	0000ce06 	br	101cce0 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 101c9a8:	e0bff917 	ldw	r2,-28(fp)
 101c9ac:	10800003 	ldbu	r2,0(r2)
 101c9b0:	10803fcc 	andi	r2,r2,255
 101c9b4:	10800160 	cmpeqi	r2,r2,5
 101c9b8:	1000051e 	bne	r2,zero,101c9d0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 101c9bc:	e0fffc17 	ldw	r3,-16(fp)
 101c9c0:	00800044 	movi	r2,1
 101c9c4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101c9c8:	e03fff15 	stw	zero,-4(fp)
 101c9cc:	0000c406 	br	101cce0 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101c9d0:	0005303a 	rdctl	r2,status
 101c9d4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101c9d8:	e0fff417 	ldw	r3,-48(fp)
 101c9dc:	00bfff84 	movi	r2,-2
 101c9e0:	1884703a 	and	r2,r3,r2
 101c9e4:	1001703a 	wrctl	status,r2
  
  return context;
 101c9e8:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 101c9ec:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 101c9f0:	e0bffb03 	ldbu	r2,-20(fp)
 101c9f4:	e0bffe15 	stw	r2,-8(fp)
 101c9f8:	e0fffe17 	ldw	r3,-8(fp)
 101c9fc:	1805003a 	cmpeq	r2,r3,zero
 101ca00:	1000041e 	bne	r2,zero,101ca14 <OSFlagPost+0xc4>
 101ca04:	e0fffe17 	ldw	r3,-8(fp)
 101ca08:	18800060 	cmpeqi	r2,r3,1
 101ca0c:	10000b1e 	bne	r2,zero,101ca3c <OSFlagPost+0xec>
 101ca10:	00001206 	br	101ca5c <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 101ca14:	e0bff917 	ldw	r2,-28(fp)
 101ca18:	1080020b 	ldhu	r2,8(r2)
 101ca1c:	1007883a 	mov	r3,r2
 101ca20:	e0bffa0b 	ldhu	r2,-24(fp)
 101ca24:	0084303a 	nor	r2,zero,r2
 101ca28:	1884703a 	and	r2,r3,r2
 101ca2c:	1007883a 	mov	r3,r2
 101ca30:	e0bff917 	ldw	r2,-28(fp)
 101ca34:	10c0020d 	sth	r3,8(r2)
             break;
 101ca38:	00001106 	br	101ca80 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 101ca3c:	e0bff917 	ldw	r2,-28(fp)
 101ca40:	10c0020b 	ldhu	r3,8(r2)
 101ca44:	e0bffa0b 	ldhu	r2,-24(fp)
 101ca48:	1884b03a 	or	r2,r3,r2
 101ca4c:	1007883a 	mov	r3,r2
 101ca50:	e0bff917 	ldw	r2,-28(fp)
 101ca54:	10c0020d 	sth	r3,8(r2)
             break;
 101ca58:	00000906 	br	101ca80 <OSFlagPost+0x130>
 101ca5c:	e0bff517 	ldw	r2,-44(fp)
 101ca60:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ca64:	e0bff317 	ldw	r2,-52(fp)
 101ca68:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 101ca6c:	e0fffc17 	ldw	r3,-16(fp)
 101ca70:	00801c44 	movi	r2,113
 101ca74:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 101ca78:	e03fff15 	stw	zero,-4(fp)
 101ca7c:	00009806 	br	101cce0 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 101ca80:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 101ca84:	e0bff917 	ldw	r2,-28(fp)
 101ca88:	10800117 	ldw	r2,4(r2)
 101ca8c:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 101ca90:	00007506 	br	101cc68 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 101ca94:	e0bff817 	ldw	r2,-32(fp)
 101ca98:	10800483 	ldbu	r2,18(r2)
 101ca9c:	10803fcc 	andi	r2,r2,255
 101caa0:	e0bffd15 	stw	r2,-12(fp)
 101caa4:	e0fffd17 	ldw	r3,-12(fp)
 101caa8:	18800060 	cmpeqi	r2,r3,1
 101caac:	10004d1e 	bne	r2,zero,101cbe4 <OSFlagPost+0x294>
 101cab0:	e0fffd17 	ldw	r3,-12(fp)
 101cab4:	18800088 	cmpgei	r2,r3,2
 101cab8:	1000041e 	bne	r2,zero,101cacc <OSFlagPost+0x17c>
 101cabc:	e0fffd17 	ldw	r3,-12(fp)
 101cac0:	1805003a 	cmpeq	r2,r3,zero
 101cac4:	1000301e 	bne	r2,zero,101cb88 <OSFlagPost+0x238>
 101cac8:	00005b06 	br	101cc38 <OSFlagPost+0x2e8>
 101cacc:	e0fffd17 	ldw	r3,-12(fp)
 101cad0:	188000a0 	cmpeqi	r2,r3,2
 101cad4:	1000041e 	bne	r2,zero,101cae8 <OSFlagPost+0x198>
 101cad8:	e0fffd17 	ldw	r3,-12(fp)
 101cadc:	188000e0 	cmpeqi	r2,r3,3
 101cae0:	1000161e 	bne	r2,zero,101cb3c <OSFlagPost+0x1ec>
 101cae4:	00005406 	br	101cc38 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 101cae8:	e0bff917 	ldw	r2,-28(fp)
 101caec:	10c0020b 	ldhu	r3,8(r2)
 101caf0:	e0bff817 	ldw	r2,-32(fp)
 101caf4:	1080040b 	ldhu	r2,16(r2)
 101caf8:	1884703a 	and	r2,r3,r2
 101cafc:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 101cb00:	e0bff817 	ldw	r2,-32(fp)
 101cb04:	1080040b 	ldhu	r2,16(r2)
 101cb08:	10ffffcc 	andi	r3,r2,65535
 101cb0c:	e0bff68b 	ldhu	r2,-38(fp)
 101cb10:	1880521e 	bne	r3,r2,101cc5c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 101cb14:	e17ff68b 	ldhu	r5,-38(fp)
 101cb18:	e13ff817 	ldw	r4,-32(fp)
 101cb1c:	101d0740 	call	101d074 <OS_FlagTaskRdy>
 101cb20:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 101cb24:	e0bff603 	ldbu	r2,-40(fp)
 101cb28:	10800058 	cmpnei	r2,r2,1
 101cb2c:	10004b1e 	bne	r2,zero,101cc5c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 101cb30:	00800044 	movi	r2,1
 101cb34:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 101cb38:	00004806 	br	101cc5c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 101cb3c:	e0bff917 	ldw	r2,-28(fp)
 101cb40:	10c0020b 	ldhu	r3,8(r2)
 101cb44:	e0bff817 	ldw	r2,-32(fp)
 101cb48:	1080040b 	ldhu	r2,16(r2)
 101cb4c:	1884703a 	and	r2,r3,r2
 101cb50:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 101cb54:	e0bff68b 	ldhu	r2,-38(fp)
 101cb58:	1005003a 	cmpeq	r2,r2,zero
 101cb5c:	10003f1e 	bne	r2,zero,101cc5c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 101cb60:	e17ff68b 	ldhu	r5,-38(fp)
 101cb64:	e13ff817 	ldw	r4,-32(fp)
 101cb68:	101d0740 	call	101d074 <OS_FlagTaskRdy>
 101cb6c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 101cb70:	e0bff603 	ldbu	r2,-40(fp)
 101cb74:	10800058 	cmpnei	r2,r2,1
 101cb78:	1000381e 	bne	r2,zero,101cc5c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 101cb7c:	00800044 	movi	r2,1
 101cb80:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 101cb84:	00003506 	br	101cc5c <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 101cb88:	e0bff917 	ldw	r2,-28(fp)
 101cb8c:	1080020b 	ldhu	r2,8(r2)
 101cb90:	0084303a 	nor	r2,zero,r2
 101cb94:	1007883a 	mov	r3,r2
 101cb98:	e0bff817 	ldw	r2,-32(fp)
 101cb9c:	1080040b 	ldhu	r2,16(r2)
 101cba0:	1884703a 	and	r2,r3,r2
 101cba4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 101cba8:	e0bff817 	ldw	r2,-32(fp)
 101cbac:	1080040b 	ldhu	r2,16(r2)
 101cbb0:	10ffffcc 	andi	r3,r2,65535
 101cbb4:	e0bff68b 	ldhu	r2,-38(fp)
 101cbb8:	1880281e 	bne	r3,r2,101cc5c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 101cbbc:	e17ff68b 	ldhu	r5,-38(fp)
 101cbc0:	e13ff817 	ldw	r4,-32(fp)
 101cbc4:	101d0740 	call	101d074 <OS_FlagTaskRdy>
 101cbc8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 101cbcc:	e0bff603 	ldbu	r2,-40(fp)
 101cbd0:	10800058 	cmpnei	r2,r2,1
 101cbd4:	1000211e 	bne	r2,zero,101cc5c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 101cbd8:	00800044 	movi	r2,1
 101cbdc:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 101cbe0:	00001e06 	br	101cc5c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 101cbe4:	e0bff917 	ldw	r2,-28(fp)
 101cbe8:	1080020b 	ldhu	r2,8(r2)
 101cbec:	0084303a 	nor	r2,zero,r2
 101cbf0:	1007883a 	mov	r3,r2
 101cbf4:	e0bff817 	ldw	r2,-32(fp)
 101cbf8:	1080040b 	ldhu	r2,16(r2)
 101cbfc:	1884703a 	and	r2,r3,r2
 101cc00:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 101cc04:	e0bff68b 	ldhu	r2,-38(fp)
 101cc08:	1005003a 	cmpeq	r2,r2,zero
 101cc0c:	1000131e 	bne	r2,zero,101cc5c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 101cc10:	e17ff68b 	ldhu	r5,-38(fp)
 101cc14:	e13ff817 	ldw	r4,-32(fp)
 101cc18:	101d0740 	call	101d074 <OS_FlagTaskRdy>
 101cc1c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 101cc20:	e0bff603 	ldbu	r2,-40(fp)
 101cc24:	10800058 	cmpnei	r2,r2,1
 101cc28:	10000c1e 	bne	r2,zero,101cc5c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 101cc2c:	00800044 	movi	r2,1
 101cc30:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 101cc34:	00000906 	br	101cc5c <OSFlagPost+0x30c>
 101cc38:	e0bff517 	ldw	r2,-44(fp)
 101cc3c:	e0bff215 	stw	r2,-56(fp)
 101cc40:	e0bff217 	ldw	r2,-56(fp)
 101cc44:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 101cc48:	e0fffc17 	ldw	r3,-16(fp)
 101cc4c:	00801bc4 	movi	r2,111
 101cc50:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 101cc54:	e03fff15 	stw	zero,-4(fp)
 101cc58:	00002106 	br	101cce0 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 101cc5c:	e0bff817 	ldw	r2,-32(fp)
 101cc60:	10800017 	ldw	r2,0(r2)
 101cc64:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 101cc68:	e0bff817 	ldw	r2,-32(fp)
 101cc6c:	1004c03a 	cmpne	r2,r2,zero
 101cc70:	103f881e 	bne	r2,zero,101ca94 <OSFlagPost+0x144>
 101cc74:	e0bff517 	ldw	r2,-44(fp)
 101cc78:	e0bff115 	stw	r2,-60(fp)
 101cc7c:	e0bff117 	ldw	r2,-60(fp)
 101cc80:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 101cc84:	e0bff783 	ldbu	r2,-34(fp)
 101cc88:	10800058 	cmpnei	r2,r2,1
 101cc8c:	1000011e 	bne	r2,zero,101cc94 <OSFlagPost+0x344>
        OS_Sched();
 101cc90:	101b0800 	call	101b080 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101cc94:	0005303a 	rdctl	r2,status
 101cc98:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101cc9c:	e0fff017 	ldw	r3,-64(fp)
 101cca0:	00bfff84 	movi	r2,-2
 101cca4:	1884703a 	and	r2,r3,r2
 101cca8:	1001703a 	wrctl	status,r2
  
  return context;
 101ccac:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 101ccb0:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 101ccb4:	e0bff917 	ldw	r2,-28(fp)
 101ccb8:	1080020b 	ldhu	r2,8(r2)
 101ccbc:	e0bff70d 	sth	r2,-36(fp)
 101ccc0:	e0bff517 	ldw	r2,-44(fp)
 101ccc4:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ccc8:	e0bfef17 	ldw	r2,-68(fp)
 101cccc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 101ccd0:	e0bffc17 	ldw	r2,-16(fp)
 101ccd4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 101ccd8:	e0bff70b 	ldhu	r2,-36(fp)
 101ccdc:	e0bfff15 	stw	r2,-4(fp)
 101cce0:	e0bfff17 	ldw	r2,-4(fp)
}
 101cce4:	e037883a 	mov	sp,fp
 101cce8:	dfc00117 	ldw	ra,4(sp)
 101ccec:	df000017 	ldw	fp,0(sp)
 101ccf0:	dec00204 	addi	sp,sp,8
 101ccf4:	f800283a 	ret

0101ccf8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 101ccf8:	defff804 	addi	sp,sp,-32
 101ccfc:	df000715 	stw	fp,28(sp)
 101cd00:	df000704 	addi	fp,sp,28
 101cd04:	e13ffd15 	stw	r4,-12(fp)
 101cd08:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 101cd0c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 101cd10:	e0bffe17 	ldw	r2,-8(fp)
 101cd14:	1004c03a 	cmpne	r2,r2,zero
 101cd18:	1000021e 	bne	r2,zero,101cd24 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 101cd1c:	e03fff15 	stw	zero,-4(fp)
 101cd20:	00002506 	br	101cdb8 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 101cd24:	e0bffd17 	ldw	r2,-12(fp)
 101cd28:	1004c03a 	cmpne	r2,r2,zero
 101cd2c:	1000051e 	bne	r2,zero,101cd44 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 101cd30:	e0fffe17 	ldw	r3,-8(fp)
 101cd34:	00801b84 	movi	r2,110
 101cd38:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101cd3c:	e03fff15 	stw	zero,-4(fp)
 101cd40:	00001d06 	br	101cdb8 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 101cd44:	e0bffd17 	ldw	r2,-12(fp)
 101cd48:	10800003 	ldbu	r2,0(r2)
 101cd4c:	10803fcc 	andi	r2,r2,255
 101cd50:	10800160 	cmpeqi	r2,r2,5
 101cd54:	1000051e 	bne	r2,zero,101cd6c <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 101cd58:	e0fffe17 	ldw	r3,-8(fp)
 101cd5c:	00800044 	movi	r2,1
 101cd60:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 101cd64:	e03fff15 	stw	zero,-4(fp)
 101cd68:	00001306 	br	101cdb8 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101cd6c:	0005303a 	rdctl	r2,status
 101cd70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101cd74:	e0fffa17 	ldw	r3,-24(fp)
 101cd78:	00bfff84 	movi	r2,-2
 101cd7c:	1884703a 	and	r2,r3,r2
 101cd80:	1001703a 	wrctl	status,r2
  
  return context;
 101cd84:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101cd88:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 101cd8c:	e0bffd17 	ldw	r2,-12(fp)
 101cd90:	1080020b 	ldhu	r2,8(r2)
 101cd94:	e0bffc0d 	sth	r2,-16(fp)
 101cd98:	e0bffb17 	ldw	r2,-20(fp)
 101cd9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101cda0:	e0bff917 	ldw	r2,-28(fp)
 101cda4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101cda8:	e0bffe17 	ldw	r2,-8(fp)
 101cdac:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 101cdb0:	e0bffc0b 	ldhu	r2,-16(fp)
 101cdb4:	e0bfff15 	stw	r2,-4(fp)
 101cdb8:	e0bfff17 	ldw	r2,-4(fp)
}
 101cdbc:	e037883a 	mov	sp,fp
 101cdc0:	df000017 	ldw	fp,0(sp)
 101cdc4:	dec00104 	addi	sp,sp,4
 101cdc8:	f800283a 	ret

0101cdcc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 101cdcc:	defff804 	addi	sp,sp,-32
 101cdd0:	df000715 	stw	fp,28(sp)
 101cdd4:	df000704 	addi	fp,sp,28
 101cdd8:	e13ffb15 	stw	r4,-20(fp)
 101cddc:	e17ffc15 	stw	r5,-16(fp)
 101cde0:	e0800117 	ldw	r2,4(fp)
 101cde4:	e1bffd0d 	sth	r6,-12(fp)
 101cde8:	e1fffe05 	stb	r7,-8(fp)
 101cdec:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 101cdf0:	008040f4 	movhi	r2,259
 101cdf4:	10a71f04 	addi	r2,r2,-25476
 101cdf8:	10c00017 	ldw	r3,0(r2)
 101cdfc:	008040f4 	movhi	r2,259
 101ce00:	10a71f04 	addi	r2,r2,-25476
 101ce04:	10800017 	ldw	r2,0(r2)
 101ce08:	10800c03 	ldbu	r2,48(r2)
 101ce0c:	10800814 	ori	r2,r2,32
 101ce10:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 101ce14:	008040f4 	movhi	r2,259
 101ce18:	10a71f04 	addi	r2,r2,-25476
 101ce1c:	10800017 	ldw	r2,0(r2)
 101ce20:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 101ce24:	008040f4 	movhi	r2,259
 101ce28:	10a71f04 	addi	r2,r2,-25476
 101ce2c:	10c00017 	ldw	r3,0(r2)
 101ce30:	e0bfff0b 	ldhu	r2,-4(fp)
 101ce34:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 101ce38:	008040f4 	movhi	r2,259
 101ce3c:	10a71f04 	addi	r2,r2,-25476
 101ce40:	10c00017 	ldw	r3,0(r2)
 101ce44:	e0bffc17 	ldw	r2,-16(fp)
 101ce48:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 101ce4c:	e0fffc17 	ldw	r3,-16(fp)
 101ce50:	e0bffd0b 	ldhu	r2,-12(fp)
 101ce54:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 101ce58:	e0fffc17 	ldw	r3,-16(fp)
 101ce5c:	e0bffe03 	ldbu	r2,-8(fp)
 101ce60:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 101ce64:	008040f4 	movhi	r2,259
 101ce68:	10a71f04 	addi	r2,r2,-25476
 101ce6c:	10c00017 	ldw	r3,0(r2)
 101ce70:	e0bffc17 	ldw	r2,-16(fp)
 101ce74:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 101ce78:	e0bffb17 	ldw	r2,-20(fp)
 101ce7c:	10c00117 	ldw	r3,4(r2)
 101ce80:	e0bffc17 	ldw	r2,-16(fp)
 101ce84:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 101ce88:	e0bffc17 	ldw	r2,-16(fp)
 101ce8c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 101ce90:	e0fffc17 	ldw	r3,-16(fp)
 101ce94:	e0bffb17 	ldw	r2,-20(fp)
 101ce98:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 101ce9c:	e0bffb17 	ldw	r2,-20(fp)
 101cea0:	10800117 	ldw	r2,4(r2)
 101cea4:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 101cea8:	e0bffa17 	ldw	r2,-24(fp)
 101ceac:	1005003a 	cmpeq	r2,r2,zero
 101ceb0:	1000031e 	bne	r2,zero,101cec0 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 101ceb4:	e0fffa17 	ldw	r3,-24(fp)
 101ceb8:	e0bffc17 	ldw	r2,-16(fp)
 101cebc:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 101cec0:	e0fffb17 	ldw	r3,-20(fp)
 101cec4:	e0bffc17 	ldw	r2,-16(fp)
 101cec8:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 101cecc:	008040f4 	movhi	r2,259
 101ced0:	10a71f04 	addi	r2,r2,-25476
 101ced4:	10800017 	ldw	r2,0(r2)
 101ced8:	10800d03 	ldbu	r2,52(r2)
 101cedc:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 101cee0:	e13ff903 	ldbu	r4,-28(fp)
 101cee4:	e0fff903 	ldbu	r3,-28(fp)
 101cee8:	008040f4 	movhi	r2,259
 101ceec:	10a71c44 	addi	r2,r2,-25487
 101cef0:	10c5883a 	add	r2,r2,r3
 101cef4:	10800003 	ldbu	r2,0(r2)
 101cef8:	1007883a 	mov	r3,r2
 101cefc:	008040f4 	movhi	r2,259
 101cf00:	10a71f04 	addi	r2,r2,-25476
 101cf04:	10800017 	ldw	r2,0(r2)
 101cf08:	10800d43 	ldbu	r2,53(r2)
 101cf0c:	0084303a 	nor	r2,zero,r2
 101cf10:	1884703a 	and	r2,r3,r2
 101cf14:	1007883a 	mov	r3,r2
 101cf18:	008040f4 	movhi	r2,259
 101cf1c:	10a71c44 	addi	r2,r2,-25487
 101cf20:	1105883a 	add	r2,r2,r4
 101cf24:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 101cf28:	e0fff903 	ldbu	r3,-28(fp)
 101cf2c:	008040f4 	movhi	r2,259
 101cf30:	10a71c44 	addi	r2,r2,-25487
 101cf34:	10c5883a 	add	r2,r2,r3
 101cf38:	10800003 	ldbu	r2,0(r2)
 101cf3c:	10803fcc 	andi	r2,r2,255
 101cf40:	1004c03a 	cmpne	r2,r2,zero
 101cf44:	10000e1e 	bne	r2,zero,101cf80 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 101cf48:	008040f4 	movhi	r2,259
 101cf4c:	10a71f04 	addi	r2,r2,-25476
 101cf50:	10800017 	ldw	r2,0(r2)
 101cf54:	10800d83 	ldbu	r2,54(r2)
 101cf58:	0084303a 	nor	r2,zero,r2
 101cf5c:	1007883a 	mov	r3,r2
 101cf60:	008040f4 	movhi	r2,259
 101cf64:	10a71c04 	addi	r2,r2,-25488
 101cf68:	10800003 	ldbu	r2,0(r2)
 101cf6c:	1884703a 	and	r2,r3,r2
 101cf70:	1007883a 	mov	r3,r2
 101cf74:	008040f4 	movhi	r2,259
 101cf78:	10a71c04 	addi	r2,r2,-25488
 101cf7c:	10c00005 	stb	r3,0(r2)
    }
}
 101cf80:	e037883a 	mov	sp,fp
 101cf84:	df000017 	ldw	fp,0(sp)
 101cf88:	dec00104 	addi	sp,sp,4
 101cf8c:	f800283a 	ret

0101cf90 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 101cf90:	defffb04 	addi	sp,sp,-20
 101cf94:	dfc00415 	stw	ra,16(sp)
 101cf98:	df000315 	stw	fp,12(sp)
 101cf9c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 101cfa0:	010040f4 	movhi	r4,259
 101cfa4:	21113504 	addi	r4,r4,17620
 101cfa8:	0140dc04 	movi	r5,880
 101cfac:	101afc00 	call	101afc0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 101cfb0:	008040f4 	movhi	r2,259
 101cfb4:	10913504 	addi	r2,r2,17620
 101cfb8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 101cfbc:	008040f4 	movhi	r2,259
 101cfc0:	10914004 	addi	r2,r2,17664
 101cfc4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 101cfc8:	e03fff0d 	sth	zero,-4(fp)
 101cfcc:	00001306 	br	101d01c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 101cfd0:	e0bffe17 	ldw	r2,-8(fp)
 101cfd4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 101cfd8:	e0fffe17 	ldw	r3,-8(fp)
 101cfdc:	e0bffd17 	ldw	r2,-12(fp)
 101cfe0:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 101cfe4:	e0fffe17 	ldw	r3,-8(fp)
 101cfe8:	00800fc4 	movi	r2,63
 101cfec:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 101cff0:	e0bffe17 	ldw	r2,-8(fp)
 101cff4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 101cff8:	e0bffe17 	ldw	r2,-8(fp)
 101cffc:	10800b04 	addi	r2,r2,44
 101d000:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 101d004:	e0bffd17 	ldw	r2,-12(fp)
 101d008:	10800b04 	addi	r2,r2,44
 101d00c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 101d010:	e0bfff0b 	ldhu	r2,-4(fp)
 101d014:	10800044 	addi	r2,r2,1
 101d018:	e0bfff0d 	sth	r2,-4(fp)
 101d01c:	e0bfff0b 	ldhu	r2,-4(fp)
 101d020:	108004f0 	cmpltui	r2,r2,19
 101d024:	103fea1e 	bne	r2,zero,101cfd0 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 101d028:	e0bffe17 	ldw	r2,-8(fp)
 101d02c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 101d030:	e0bffe17 	ldw	r2,-8(fp)
 101d034:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 101d038:	e0fffe17 	ldw	r3,-8(fp)
 101d03c:	00800fc4 	movi	r2,63
 101d040:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 101d044:	e0bffe17 	ldw	r2,-8(fp)
 101d048:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 101d04c:	00c040f4 	movhi	r3,259
 101d050:	18e72104 	addi	r3,r3,-25468
 101d054:	008040f4 	movhi	r2,259
 101d058:	10913504 	addi	r2,r2,17620
 101d05c:	18800015 	stw	r2,0(r3)
#endif
}
 101d060:	e037883a 	mov	sp,fp
 101d064:	dfc00117 	ldw	ra,4(sp)
 101d068:	df000017 	ldw	fp,0(sp)
 101d06c:	dec00204 	addi	sp,sp,8
 101d070:	f800283a 	ret

0101d074 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 101d074:	defffa04 	addi	sp,sp,-24
 101d078:	dfc00515 	stw	ra,20(sp)
 101d07c:	df000415 	stw	fp,16(sp)
 101d080:	df000404 	addi	fp,sp,16
 101d084:	e13ffe15 	stw	r4,-8(fp)
 101d088:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 101d08c:	e0bffe17 	ldw	r2,-8(fp)
 101d090:	10800217 	ldw	r2,8(r2)
 101d094:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 101d098:	e0bffd17 	ldw	r2,-12(fp)
 101d09c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 101d0a0:	e0fffd17 	ldw	r3,-12(fp)
 101d0a4:	e0bfff0b 	ldhu	r2,-4(fp)
 101d0a8:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 101d0ac:	e0bffd17 	ldw	r2,-12(fp)
 101d0b0:	10c00c03 	ldbu	r3,48(r2)
 101d0b4:	00bff7c4 	movi	r2,-33
 101d0b8:	1884703a 	and	r2,r3,r2
 101d0bc:	1007883a 	mov	r3,r2
 101d0c0:	e0bffd17 	ldw	r2,-12(fp)
 101d0c4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 101d0c8:	e0bffd17 	ldw	r2,-12(fp)
 101d0cc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 101d0d0:	e0bffd17 	ldw	r2,-12(fp)
 101d0d4:	10800c03 	ldbu	r2,48(r2)
 101d0d8:	10803fcc 	andi	r2,r2,255
 101d0dc:	1004c03a 	cmpne	r2,r2,zero
 101d0e0:	10001f1e 	bne	r2,zero,101d160 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 101d0e4:	e0bffd17 	ldw	r2,-12(fp)
 101d0e8:	10c00d83 	ldbu	r3,54(r2)
 101d0ec:	008040f4 	movhi	r2,259
 101d0f0:	10a71c04 	addi	r2,r2,-25488
 101d0f4:	10800003 	ldbu	r2,0(r2)
 101d0f8:	1884b03a 	or	r2,r3,r2
 101d0fc:	1007883a 	mov	r3,r2
 101d100:	008040f4 	movhi	r2,259
 101d104:	10a71c04 	addi	r2,r2,-25488
 101d108:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 101d10c:	e0bffd17 	ldw	r2,-12(fp)
 101d110:	10800d03 	ldbu	r2,52(r2)
 101d114:	11003fcc 	andi	r4,r2,255
 101d118:	e0bffd17 	ldw	r2,-12(fp)
 101d11c:	10800d03 	ldbu	r2,52(r2)
 101d120:	10c03fcc 	andi	r3,r2,255
 101d124:	008040f4 	movhi	r2,259
 101d128:	10a71c44 	addi	r2,r2,-25487
 101d12c:	10c5883a 	add	r2,r2,r3
 101d130:	10c00003 	ldbu	r3,0(r2)
 101d134:	e0bffd17 	ldw	r2,-12(fp)
 101d138:	10800d43 	ldbu	r2,53(r2)
 101d13c:	1884b03a 	or	r2,r3,r2
 101d140:	1007883a 	mov	r3,r2
 101d144:	008040f4 	movhi	r2,259
 101d148:	10a71c44 	addi	r2,r2,-25487
 101d14c:	1105883a 	add	r2,r2,r4
 101d150:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 101d154:	00800044 	movi	r2,1
 101d158:	e0bffc05 	stb	r2,-16(fp)
 101d15c:	00000106 	br	101d164 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 101d160:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 101d164:	e13ffe17 	ldw	r4,-8(fp)
 101d168:	101d1840 	call	101d184 <OS_FlagUnlink>
    return (sched);
 101d16c:	e0bffc03 	ldbu	r2,-16(fp)
}
 101d170:	e037883a 	mov	sp,fp
 101d174:	dfc00117 	ldw	ra,4(sp)
 101d178:	df000017 	ldw	fp,0(sp)
 101d17c:	dec00204 	addi	sp,sp,8
 101d180:	f800283a 	ret

0101d184 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 101d184:	defffa04 	addi	sp,sp,-24
 101d188:	df000515 	stw	fp,20(sp)
 101d18c:	df000504 	addi	fp,sp,20
 101d190:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 101d194:	e0bfff17 	ldw	r2,-4(fp)
 101d198:	10800117 	ldw	r2,4(r2)
 101d19c:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 101d1a0:	e0bfff17 	ldw	r2,-4(fp)
 101d1a4:	10800017 	ldw	r2,0(r2)
 101d1a8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 101d1ac:	e0bffc17 	ldw	r2,-16(fp)
 101d1b0:	1004c03a 	cmpne	r2,r2,zero
 101d1b4:	10000c1e 	bne	r2,zero,101d1e8 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 101d1b8:	e0bfff17 	ldw	r2,-4(fp)
 101d1bc:	10800317 	ldw	r2,12(r2)
 101d1c0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 101d1c4:	e0fffd17 	ldw	r3,-12(fp)
 101d1c8:	e0bffb17 	ldw	r2,-20(fp)
 101d1cc:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 101d1d0:	e0bffb17 	ldw	r2,-20(fp)
 101d1d4:	1005003a 	cmpeq	r2,r2,zero
 101d1d8:	10000c1e 	bne	r2,zero,101d20c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 101d1dc:	e0bffb17 	ldw	r2,-20(fp)
 101d1e0:	10000115 	stw	zero,4(r2)
 101d1e4:	00000906 	br	101d20c <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 101d1e8:	e0fffc17 	ldw	r3,-16(fp)
 101d1ec:	e0bffb17 	ldw	r2,-20(fp)
 101d1f0:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 101d1f4:	e0bffb17 	ldw	r2,-20(fp)
 101d1f8:	1005003a 	cmpeq	r2,r2,zero
 101d1fc:	1000031e 	bne	r2,zero,101d20c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 101d200:	e0fffb17 	ldw	r3,-20(fp)
 101d204:	e0bffc17 	ldw	r2,-16(fp)
 101d208:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 101d20c:	e0bfff17 	ldw	r2,-4(fp)
 101d210:	10800217 	ldw	r2,8(r2)
 101d214:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 101d218:	e0bffe17 	ldw	r2,-8(fp)
 101d21c:	10000a15 	stw	zero,40(r2)
#endif
}
 101d220:	e037883a 	mov	sp,fp
 101d224:	df000017 	ldw	fp,0(sp)
 101d228:	dec00104 	addi	sp,sp,4
 101d22c:	f800283a 	ret

0101d230 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 101d230:	defff304 	addi	sp,sp,-52
 101d234:	df000c15 	stw	fp,48(sp)
 101d238:	df000c04 	addi	fp,sp,48
 101d23c:	e13ffb15 	stw	r4,-20(fp)
 101d240:	e17ffc15 	stw	r5,-16(fp)
 101d244:	e1bffd15 	stw	r6,-12(fp)
 101d248:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101d24c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 101d250:	e0bffe17 	ldw	r2,-8(fp)
 101d254:	1004c03a 	cmpne	r2,r2,zero
 101d258:	1000021e 	bne	r2,zero,101d264 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 101d25c:	e03fff15 	stw	zero,-4(fp)
 101d260:	00007506 	br	101d438 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 101d264:	e0bffb17 	ldw	r2,-20(fp)
 101d268:	1004c03a 	cmpne	r2,r2,zero
 101d26c:	1000051e 	bne	r2,zero,101d284 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 101d270:	e0fffe17 	ldw	r3,-8(fp)
 101d274:	00801884 	movi	r2,98
 101d278:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 101d27c:	e03fff15 	stw	zero,-4(fp)
 101d280:	00006d06 	br	101d438 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 101d284:	e0bffb17 	ldw	r2,-20(fp)
 101d288:	108000cc 	andi	r2,r2,3
 101d28c:	1005003a 	cmpeq	r2,r2,zero
 101d290:	1000051e 	bne	r2,zero,101d2a8 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 101d294:	e0fffe17 	ldw	r3,-8(fp)
 101d298:	00801884 	movi	r2,98
 101d29c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 101d2a0:	e03fff15 	stw	zero,-4(fp)
 101d2a4:	00006406 	br	101d438 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 101d2a8:	e0bffc17 	ldw	r2,-16(fp)
 101d2ac:	108000a8 	cmpgeui	r2,r2,2
 101d2b0:	1000051e 	bne	r2,zero,101d2c8 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 101d2b4:	e0fffe17 	ldw	r3,-8(fp)
 101d2b8:	008016c4 	movi	r2,91
 101d2bc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 101d2c0:	e03fff15 	stw	zero,-4(fp)
 101d2c4:	00005c06 	br	101d438 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 101d2c8:	e0bffd17 	ldw	r2,-12(fp)
 101d2cc:	10800128 	cmpgeui	r2,r2,4
 101d2d0:	1000051e 	bne	r2,zero,101d2e8 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 101d2d4:	e0fffe17 	ldw	r3,-8(fp)
 101d2d8:	00801704 	movi	r2,92
 101d2dc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 101d2e0:	e03fff15 	stw	zero,-4(fp)
 101d2e4:	00005406 	br	101d438 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d2e8:	0005303a 	rdctl	r2,status
 101d2ec:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d2f0:	e0fff517 	ldw	r3,-44(fp)
 101d2f4:	00bfff84 	movi	r2,-2
 101d2f8:	1884703a 	and	r2,r3,r2
 101d2fc:	1001703a 	wrctl	status,r2
  
  return context;
 101d300:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101d304:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 101d308:	008040f4 	movhi	r2,259
 101d30c:	10a71904 	addi	r2,r2,-25500
 101d310:	10800017 	ldw	r2,0(r2)
 101d314:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 101d318:	008040f4 	movhi	r2,259
 101d31c:	10a71904 	addi	r2,r2,-25500
 101d320:	10800017 	ldw	r2,0(r2)
 101d324:	1005003a 	cmpeq	r2,r2,zero
 101d328:	1000081e 	bne	r2,zero,101d34c <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 101d32c:	008040f4 	movhi	r2,259
 101d330:	10a71904 	addi	r2,r2,-25500
 101d334:	10800017 	ldw	r2,0(r2)
 101d338:	10800117 	ldw	r2,4(r2)
 101d33c:	1007883a 	mov	r3,r2
 101d340:	008040f4 	movhi	r2,259
 101d344:	10a71904 	addi	r2,r2,-25500
 101d348:	10c00015 	stw	r3,0(r2)
 101d34c:	e0bff617 	ldw	r2,-40(fp)
 101d350:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d354:	e0bff417 	ldw	r2,-48(fp)
 101d358:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 101d35c:	e0bffa17 	ldw	r2,-24(fp)
 101d360:	1004c03a 	cmpne	r2,r2,zero
 101d364:	1000051e 	bne	r2,zero,101d37c <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 101d368:	e0fffe17 	ldw	r3,-8(fp)
 101d36c:	00801684 	movi	r2,90
 101d370:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 101d374:	e03fff15 	stw	zero,-4(fp)
 101d378:	00002f06 	br	101d438 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 101d37c:	e0bffb17 	ldw	r2,-20(fp)
 101d380:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 101d384:	e0bffb17 	ldw	r2,-20(fp)
 101d388:	1007883a 	mov	r3,r2
 101d38c:	e0bffd17 	ldw	r2,-12(fp)
 101d390:	1885883a 	add	r2,r3,r2
 101d394:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 101d398:	e03ff715 	stw	zero,-36(fp)
 101d39c:	00000d06 	br	101d3d4 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 101d3a0:	e0fff817 	ldw	r3,-32(fp)
 101d3a4:	e0bff917 	ldw	r2,-28(fp)
 101d3a8:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 101d3ac:	e0bff917 	ldw	r2,-28(fp)
 101d3b0:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 101d3b4:	e0bff917 	ldw	r2,-28(fp)
 101d3b8:	1007883a 	mov	r3,r2
 101d3bc:	e0bffd17 	ldw	r2,-12(fp)
 101d3c0:	1885883a 	add	r2,r3,r2
 101d3c4:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 101d3c8:	e0bff717 	ldw	r2,-36(fp)
 101d3cc:	10800044 	addi	r2,r2,1
 101d3d0:	e0bff715 	stw	r2,-36(fp)
 101d3d4:	e0bffc17 	ldw	r2,-16(fp)
 101d3d8:	10ffffc4 	addi	r3,r2,-1
 101d3dc:	e0bff717 	ldw	r2,-36(fp)
 101d3e0:	10ffef36 	bltu	r2,r3,101d3a0 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 101d3e4:	e0bff817 	ldw	r2,-32(fp)
 101d3e8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 101d3ec:	e0fffa17 	ldw	r3,-24(fp)
 101d3f0:	e0bffb17 	ldw	r2,-20(fp)
 101d3f4:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 101d3f8:	e0fffa17 	ldw	r3,-24(fp)
 101d3fc:	e0bffb17 	ldw	r2,-20(fp)
 101d400:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 101d404:	e0fffa17 	ldw	r3,-24(fp)
 101d408:	e0bffc17 	ldw	r2,-16(fp)
 101d40c:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 101d410:	e0fffa17 	ldw	r3,-24(fp)
 101d414:	e0bffc17 	ldw	r2,-16(fp)
 101d418:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 101d41c:	e0fffa17 	ldw	r3,-24(fp)
 101d420:	e0bffd17 	ldw	r2,-12(fp)
 101d424:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 101d428:	e0bffe17 	ldw	r2,-8(fp)
 101d42c:	10000005 	stb	zero,0(r2)
    return (pmem);
 101d430:	e0bffa17 	ldw	r2,-24(fp)
 101d434:	e0bfff15 	stw	r2,-4(fp)
 101d438:	e0bfff17 	ldw	r2,-4(fp)
}
 101d43c:	e037883a 	mov	sp,fp
 101d440:	df000017 	ldw	fp,0(sp)
 101d444:	dec00104 	addi	sp,sp,4
 101d448:	f800283a 	ret

0101d44c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 101d44c:	defff704 	addi	sp,sp,-36
 101d450:	df000815 	stw	fp,32(sp)
 101d454:	df000804 	addi	fp,sp,32
 101d458:	e13ffd15 	stw	r4,-12(fp)
 101d45c:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101d460:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 101d464:	e0bffe17 	ldw	r2,-8(fp)
 101d468:	1004c03a 	cmpne	r2,r2,zero
 101d46c:	1000021e 	bne	r2,zero,101d478 <OSMemGet+0x2c>
        return ((void *)0);
 101d470:	e03fff15 	stw	zero,-4(fp)
 101d474:	00003106 	br	101d53c <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 101d478:	e0bffd17 	ldw	r2,-12(fp)
 101d47c:	1004c03a 	cmpne	r2,r2,zero
 101d480:	1000051e 	bne	r2,zero,101d498 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 101d484:	e0fffe17 	ldw	r3,-8(fp)
 101d488:	00801804 	movi	r2,96
 101d48c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101d490:	e03fff15 	stw	zero,-4(fp)
 101d494:	00002906 	br	101d53c <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d498:	0005303a 	rdctl	r2,status
 101d49c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d4a0:	e0fffa17 	ldw	r3,-24(fp)
 101d4a4:	00bfff84 	movi	r2,-2
 101d4a8:	1884703a 	and	r2,r3,r2
 101d4ac:	1001703a 	wrctl	status,r2
  
  return context;
 101d4b0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101d4b4:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 101d4b8:	e0bffd17 	ldw	r2,-12(fp)
 101d4bc:	10800417 	ldw	r2,16(r2)
 101d4c0:	1005003a 	cmpeq	r2,r2,zero
 101d4c4:	1000151e 	bne	r2,zero,101d51c <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 101d4c8:	e0bffd17 	ldw	r2,-12(fp)
 101d4cc:	10800117 	ldw	r2,4(r2)
 101d4d0:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 101d4d4:	e0bffc17 	ldw	r2,-16(fp)
 101d4d8:	10c00017 	ldw	r3,0(r2)
 101d4dc:	e0bffd17 	ldw	r2,-12(fp)
 101d4e0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 101d4e4:	e0bffd17 	ldw	r2,-12(fp)
 101d4e8:	10800417 	ldw	r2,16(r2)
 101d4ec:	10ffffc4 	addi	r3,r2,-1
 101d4f0:	e0bffd17 	ldw	r2,-12(fp)
 101d4f4:	10c00415 	stw	r3,16(r2)
 101d4f8:	e0bffb17 	ldw	r2,-20(fp)
 101d4fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d500:	e0bff917 	ldw	r2,-28(fp)
 101d504:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 101d508:	e0bffe17 	ldw	r2,-8(fp)
 101d50c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 101d510:	e0bffc17 	ldw	r2,-16(fp)
 101d514:	e0bfff15 	stw	r2,-4(fp)
 101d518:	00000806 	br	101d53c <OSMemGet+0xf0>
 101d51c:	e0bffb17 	ldw	r2,-20(fp)
 101d520:	e0bff815 	stw	r2,-32(fp)
 101d524:	e0bff817 	ldw	r2,-32(fp)
 101d528:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 101d52c:	e0fffe17 	ldw	r3,-8(fp)
 101d530:	00801744 	movi	r2,93
 101d534:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 101d538:	e03fff15 	stw	zero,-4(fp)
 101d53c:	e0bfff17 	ldw	r2,-4(fp)
}
 101d540:	e037883a 	mov	sp,fp
 101d544:	df000017 	ldw	fp,0(sp)
 101d548:	dec00104 	addi	sp,sp,4
 101d54c:	f800283a 	ret

0101d550 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 101d550:	defff604 	addi	sp,sp,-40
 101d554:	dfc00915 	stw	ra,36(sp)
 101d558:	df000815 	stw	fp,32(sp)
 101d55c:	df000804 	addi	fp,sp,32
 101d560:	e13ffc15 	stw	r4,-16(fp)
 101d564:	e17ffd15 	stw	r5,-12(fp)
 101d568:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101d56c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101d570:	e0bffe17 	ldw	r2,-8(fp)
 101d574:	1004c03a 	cmpne	r2,r2,zero
 101d578:	1000021e 	bne	r2,zero,101d584 <OSMemNameGet+0x34>
        return (0);
 101d57c:	e03fff15 	stw	zero,-4(fp)
 101d580:	00003006 	br	101d644 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 101d584:	e0bffc17 	ldw	r2,-16(fp)
 101d588:	1004c03a 	cmpne	r2,r2,zero
 101d58c:	1000051e 	bne	r2,zero,101d5a4 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 101d590:	e0fffe17 	ldw	r3,-8(fp)
 101d594:	00801804 	movi	r2,96
 101d598:	18800005 	stb	r2,0(r3)
        return (0);
 101d59c:	e03fff15 	stw	zero,-4(fp)
 101d5a0:	00002806 	br	101d644 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 101d5a4:	e0bffd17 	ldw	r2,-12(fp)
 101d5a8:	1004c03a 	cmpne	r2,r2,zero
 101d5ac:	1000051e 	bne	r2,zero,101d5c4 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 101d5b0:	e0fffe17 	ldw	r3,-8(fp)
 101d5b4:	00800304 	movi	r2,12
 101d5b8:	18800005 	stb	r2,0(r3)
        return (0);
 101d5bc:	e03fff15 	stw	zero,-4(fp)
 101d5c0:	00002006 	br	101d644 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 101d5c4:	008040f4 	movhi	r2,259
 101d5c8:	10a71e04 	addi	r2,r2,-25480
 101d5cc:	10800003 	ldbu	r2,0(r2)
 101d5d0:	10803fcc 	andi	r2,r2,255
 101d5d4:	1005003a 	cmpeq	r2,r2,zero
 101d5d8:	1000051e 	bne	r2,zero,101d5f0 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 101d5dc:	e0fffe17 	ldw	r3,-8(fp)
 101d5e0:	00800444 	movi	r2,17
 101d5e4:	18800005 	stb	r2,0(r3)
        return (0);
 101d5e8:	e03fff15 	stw	zero,-4(fp)
 101d5ec:	00001506 	br	101d644 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d5f0:	0005303a 	rdctl	r2,status
 101d5f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d5f8:	e0fff917 	ldw	r3,-28(fp)
 101d5fc:	00bfff84 	movi	r2,-2
 101d600:	1884703a 	and	r2,r3,r2
 101d604:	1001703a 	wrctl	status,r2
  
  return context;
 101d608:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101d60c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 101d610:	e0bffc17 	ldw	r2,-16(fp)
 101d614:	11400504 	addi	r5,r2,20
 101d618:	e13ffd17 	ldw	r4,-12(fp)
 101d61c:	101b1c40 	call	101b1c4 <OS_StrCopy>
 101d620:	e0bffb05 	stb	r2,-20(fp)
 101d624:	e0bffa17 	ldw	r2,-24(fp)
 101d628:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d62c:	e0bff817 	ldw	r2,-32(fp)
 101d630:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101d634:	e0bffe17 	ldw	r2,-8(fp)
 101d638:	10000005 	stb	zero,0(r2)
    return (len);
 101d63c:	e0bffb03 	ldbu	r2,-20(fp)
 101d640:	e0bfff15 	stw	r2,-4(fp)
 101d644:	e0bfff17 	ldw	r2,-4(fp)
}
 101d648:	e037883a 	mov	sp,fp
 101d64c:	dfc00117 	ldw	ra,4(sp)
 101d650:	df000017 	ldw	fp,0(sp)
 101d654:	dec00204 	addi	sp,sp,8
 101d658:	f800283a 	ret

0101d65c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 101d65c:	defff604 	addi	sp,sp,-40
 101d660:	dfc00915 	stw	ra,36(sp)
 101d664:	df000815 	stw	fp,32(sp)
 101d668:	df000804 	addi	fp,sp,32
 101d66c:	e13ffd15 	stw	r4,-12(fp)
 101d670:	e17ffe15 	stw	r5,-8(fp)
 101d674:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101d678:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101d67c:	e0bfff17 	ldw	r2,-4(fp)
 101d680:	1005003a 	cmpeq	r2,r2,zero
 101d684:	1000381e 	bne	r2,zero,101d768 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 101d688:	e0bffd17 	ldw	r2,-12(fp)
 101d68c:	1004c03a 	cmpne	r2,r2,zero
 101d690:	1000041e 	bne	r2,zero,101d6a4 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 101d694:	e0ffff17 	ldw	r3,-4(fp)
 101d698:	00801804 	movi	r2,96
 101d69c:	18800005 	stb	r2,0(r3)
        return;
 101d6a0:	00003106 	br	101d768 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 101d6a4:	e0bffe17 	ldw	r2,-8(fp)
 101d6a8:	1004c03a 	cmpne	r2,r2,zero
 101d6ac:	1000041e 	bne	r2,zero,101d6c0 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 101d6b0:	e0ffff17 	ldw	r3,-4(fp)
 101d6b4:	00800304 	movi	r2,12
 101d6b8:	18800005 	stb	r2,0(r3)
        return;
 101d6bc:	00002a06 	br	101d768 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 101d6c0:	008040f4 	movhi	r2,259
 101d6c4:	10a71e04 	addi	r2,r2,-25480
 101d6c8:	10800003 	ldbu	r2,0(r2)
 101d6cc:	10803fcc 	andi	r2,r2,255
 101d6d0:	1005003a 	cmpeq	r2,r2,zero
 101d6d4:	1000041e 	bne	r2,zero,101d6e8 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 101d6d8:	e0ffff17 	ldw	r3,-4(fp)
 101d6dc:	00800484 	movi	r2,18
 101d6e0:	18800005 	stb	r2,0(r3)
        return;
 101d6e4:	00002006 	br	101d768 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d6e8:	0005303a 	rdctl	r2,status
 101d6ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d6f0:	e0fffa17 	ldw	r3,-24(fp)
 101d6f4:	00bfff84 	movi	r2,-2
 101d6f8:	1884703a 	and	r2,r3,r2
 101d6fc:	1001703a 	wrctl	status,r2
  
  return context;
 101d700:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101d704:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 101d708:	e13ffe17 	ldw	r4,-8(fp)
 101d70c:	101b2440 	call	101b244 <OS_StrLen>
 101d710:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 101d714:	e0bffc03 	ldbu	r2,-16(fp)
 101d718:	10800830 	cmpltui	r2,r2,32
 101d71c:	1000081e 	bne	r2,zero,101d740 <OSMemNameSet+0xe4>
 101d720:	e0bffb17 	ldw	r2,-20(fp)
 101d724:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d728:	e0bff917 	ldw	r2,-28(fp)
 101d72c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 101d730:	e0ffff17 	ldw	r3,-4(fp)
 101d734:	008018c4 	movi	r2,99
 101d738:	18800005 	stb	r2,0(r3)
        return;
 101d73c:	00000a06 	br	101d768 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 101d740:	e0bffd17 	ldw	r2,-12(fp)
 101d744:	11000504 	addi	r4,r2,20
 101d748:	e17ffe17 	ldw	r5,-8(fp)
 101d74c:	101b1c40 	call	101b1c4 <OS_StrCopy>
 101d750:	e0bffb17 	ldw	r2,-20(fp)
 101d754:	e0bff815 	stw	r2,-32(fp)
 101d758:	e0bff817 	ldw	r2,-32(fp)
 101d75c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101d760:	e0bfff17 	ldw	r2,-4(fp)
 101d764:	10000005 	stb	zero,0(r2)
}
 101d768:	e037883a 	mov	sp,fp
 101d76c:	dfc00117 	ldw	ra,4(sp)
 101d770:	df000017 	ldw	fp,0(sp)
 101d774:	dec00204 	addi	sp,sp,8
 101d778:	f800283a 	ret

0101d77c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 101d77c:	defff804 	addi	sp,sp,-32
 101d780:	df000715 	stw	fp,28(sp)
 101d784:	df000704 	addi	fp,sp,28
 101d788:	e13ffd15 	stw	r4,-12(fp)
 101d78c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101d790:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 101d794:	e0bffd17 	ldw	r2,-12(fp)
 101d798:	1004c03a 	cmpne	r2,r2,zero
 101d79c:	1000031e 	bne	r2,zero,101d7ac <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 101d7a0:	00801804 	movi	r2,96
 101d7a4:	e0bfff15 	stw	r2,-4(fp)
 101d7a8:	00002b06 	br	101d858 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 101d7ac:	e0bffe17 	ldw	r2,-8(fp)
 101d7b0:	1004c03a 	cmpne	r2,r2,zero
 101d7b4:	1000031e 	bne	r2,zero,101d7c4 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 101d7b8:	008017c4 	movi	r2,95
 101d7bc:	e0bfff15 	stw	r2,-4(fp)
 101d7c0:	00002506 	br	101d858 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d7c4:	0005303a 	rdctl	r2,status
 101d7c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d7cc:	e0fffb17 	ldw	r3,-20(fp)
 101d7d0:	00bfff84 	movi	r2,-2
 101d7d4:	1884703a 	and	r2,r3,r2
 101d7d8:	1001703a 	wrctl	status,r2
  
  return context;
 101d7dc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101d7e0:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 101d7e4:	e0bffd17 	ldw	r2,-12(fp)
 101d7e8:	10c00417 	ldw	r3,16(r2)
 101d7ec:	e0bffd17 	ldw	r2,-12(fp)
 101d7f0:	10800317 	ldw	r2,12(r2)
 101d7f4:	18800736 	bltu	r3,r2,101d814 <OSMemPut+0x98>
 101d7f8:	e0bffc17 	ldw	r2,-16(fp)
 101d7fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d800:	e0bffa17 	ldw	r2,-24(fp)
 101d804:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 101d808:	00801784 	movi	r2,94
 101d80c:	e0bfff15 	stw	r2,-4(fp)
 101d810:	00001106 	br	101d858 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 101d814:	e0fffe17 	ldw	r3,-8(fp)
 101d818:	e0bffd17 	ldw	r2,-12(fp)
 101d81c:	10800117 	ldw	r2,4(r2)
 101d820:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 101d824:	e0fffd17 	ldw	r3,-12(fp)
 101d828:	e0bffe17 	ldw	r2,-8(fp)
 101d82c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 101d830:	e0bffd17 	ldw	r2,-12(fp)
 101d834:	10800417 	ldw	r2,16(r2)
 101d838:	10c00044 	addi	r3,r2,1
 101d83c:	e0bffd17 	ldw	r2,-12(fp)
 101d840:	10c00415 	stw	r3,16(r2)
 101d844:	e0bffc17 	ldw	r2,-16(fp)
 101d848:	e0bff915 	stw	r2,-28(fp)
 101d84c:	e0bff917 	ldw	r2,-28(fp)
 101d850:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 101d854:	e03fff15 	stw	zero,-4(fp)
 101d858:	e0bfff17 	ldw	r2,-4(fp)
}
 101d85c:	e037883a 	mov	sp,fp
 101d860:	df000017 	ldw	fp,0(sp)
 101d864:	dec00104 	addi	sp,sp,4
 101d868:	f800283a 	ret

0101d86c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 101d86c:	defff904 	addi	sp,sp,-28
 101d870:	df000615 	stw	fp,24(sp)
 101d874:	df000604 	addi	fp,sp,24
 101d878:	e13ffd15 	stw	r4,-12(fp)
 101d87c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101d880:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 101d884:	e0bffd17 	ldw	r2,-12(fp)
 101d888:	1004c03a 	cmpne	r2,r2,zero
 101d88c:	1000031e 	bne	r2,zero,101d89c <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 101d890:	00801804 	movi	r2,96
 101d894:	e0bfff15 	stw	r2,-4(fp)
 101d898:	00002e06 	br	101d954 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 101d89c:	e0bffe17 	ldw	r2,-8(fp)
 101d8a0:	1004c03a 	cmpne	r2,r2,zero
 101d8a4:	1000031e 	bne	r2,zero,101d8b4 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 101d8a8:	00801844 	movi	r2,97
 101d8ac:	e0bfff15 	stw	r2,-4(fp)
 101d8b0:	00002806 	br	101d954 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101d8b4:	0005303a 	rdctl	r2,status
 101d8b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101d8bc:	e0fffb17 	ldw	r3,-20(fp)
 101d8c0:	00bfff84 	movi	r2,-2
 101d8c4:	1884703a 	and	r2,r3,r2
 101d8c8:	1001703a 	wrctl	status,r2
  
  return context;
 101d8cc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101d8d0:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 101d8d4:	e0bffd17 	ldw	r2,-12(fp)
 101d8d8:	10c00017 	ldw	r3,0(r2)
 101d8dc:	e0bffe17 	ldw	r2,-8(fp)
 101d8e0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 101d8e4:	e0bffd17 	ldw	r2,-12(fp)
 101d8e8:	10c00117 	ldw	r3,4(r2)
 101d8ec:	e0bffe17 	ldw	r2,-8(fp)
 101d8f0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 101d8f4:	e0bffd17 	ldw	r2,-12(fp)
 101d8f8:	10c00217 	ldw	r3,8(r2)
 101d8fc:	e0bffe17 	ldw	r2,-8(fp)
 101d900:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 101d904:	e0bffd17 	ldw	r2,-12(fp)
 101d908:	10c00317 	ldw	r3,12(r2)
 101d90c:	e0bffe17 	ldw	r2,-8(fp)
 101d910:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 101d914:	e0bffd17 	ldw	r2,-12(fp)
 101d918:	10c00417 	ldw	r3,16(r2)
 101d91c:	e0bffe17 	ldw	r2,-8(fp)
 101d920:	10c00415 	stw	r3,16(r2)
 101d924:	e0bffc17 	ldw	r2,-16(fp)
 101d928:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101d92c:	e0bffa17 	ldw	r2,-24(fp)
 101d930:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 101d934:	e0bffe17 	ldw	r2,-8(fp)
 101d938:	10c00317 	ldw	r3,12(r2)
 101d93c:	e0bffe17 	ldw	r2,-8(fp)
 101d940:	10800417 	ldw	r2,16(r2)
 101d944:	1887c83a 	sub	r3,r3,r2
 101d948:	e0bffe17 	ldw	r2,-8(fp)
 101d94c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 101d950:	e03fff15 	stw	zero,-4(fp)
 101d954:	e0bfff17 	ldw	r2,-4(fp)
}
 101d958:	e037883a 	mov	sp,fp
 101d95c:	df000017 	ldw	fp,0(sp)
 101d960:	dec00104 	addi	sp,sp,4
 101d964:	f800283a 	ret

0101d968 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 101d968:	defffc04 	addi	sp,sp,-16
 101d96c:	dfc00315 	stw	ra,12(sp)
 101d970:	df000215 	stw	fp,8(sp)
 101d974:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 101d978:	010040f4 	movhi	r4,259
 101d97c:	21121104 	addi	r4,r4,18500
 101d980:	01430c04 	movi	r5,3120
 101d984:	101afc00 	call	101afc0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 101d988:	008040f4 	movhi	r2,259
 101d98c:	10921104 	addi	r2,r2,18500
 101d990:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 101d994:	e03ffe0d 	sth	zero,-8(fp)
 101d998:	00001306 	br	101d9e8 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 101d99c:	e0bffe0b 	ldhu	r2,-8(fp)
 101d9a0:	10800d24 	muli	r2,r2,52
 101d9a4:	1007883a 	mov	r3,r2
 101d9a8:	008040f4 	movhi	r2,259
 101d9ac:	10921e04 	addi	r2,r2,18552
 101d9b0:	1887883a 	add	r3,r3,r2
 101d9b4:	e0bfff17 	ldw	r2,-4(fp)
 101d9b8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 101d9bc:	e0ffff17 	ldw	r3,-4(fp)
 101d9c0:	00800fc4 	movi	r2,63
 101d9c4:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 101d9c8:	e0bfff17 	ldw	r2,-4(fp)
 101d9cc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 101d9d0:	e0bfff17 	ldw	r2,-4(fp)
 101d9d4:	10800d04 	addi	r2,r2,52
 101d9d8:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 101d9dc:	e0bffe0b 	ldhu	r2,-8(fp)
 101d9e0:	10800044 	addi	r2,r2,1
 101d9e4:	e0bffe0d 	sth	r2,-8(fp)
 101d9e8:	e0bffe0b 	ldhu	r2,-8(fp)
 101d9ec:	10800ef0 	cmpltui	r2,r2,59
 101d9f0:	103fea1e 	bne	r2,zero,101d99c <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 101d9f4:	e0bfff17 	ldw	r2,-4(fp)
 101d9f8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 101d9fc:	e0ffff17 	ldw	r3,-4(fp)
 101da00:	00800fc4 	movi	r2,63
 101da04:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 101da08:	e0bfff17 	ldw	r2,-4(fp)
 101da0c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 101da10:	00c040f4 	movhi	r3,259
 101da14:	18e71904 	addi	r3,r3,-25500
 101da18:	008040f4 	movhi	r2,259
 101da1c:	10921104 	addi	r2,r2,18500
 101da20:	18800015 	stw	r2,0(r3)
#endif
}
 101da24:	e037883a 	mov	sp,fp
 101da28:	dfc00117 	ldw	ra,4(sp)
 101da2c:	df000017 	ldw	fp,0(sp)
 101da30:	dec00204 	addi	sp,sp,8
 101da34:	f800283a 	ret

0101da38 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 101da38:	defff704 	addi	sp,sp,-36
 101da3c:	df000815 	stw	fp,32(sp)
 101da40:	df000804 	addi	fp,sp,32
 101da44:	e13ffd15 	stw	r4,-12(fp)
 101da48:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101da4c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101da50:	e0bffe17 	ldw	r2,-8(fp)
 101da54:	1004c03a 	cmpne	r2,r2,zero
 101da58:	1000021e 	bne	r2,zero,101da64 <OSQAccept+0x2c>
        return ((void *)0);
 101da5c:	e03fff15 	stw	zero,-4(fp)
 101da60:	00004506 	br	101db78 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 101da64:	e0bffd17 	ldw	r2,-12(fp)
 101da68:	1004c03a 	cmpne	r2,r2,zero
 101da6c:	1000051e 	bne	r2,zero,101da84 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 101da70:	e0fffe17 	ldw	r3,-8(fp)
 101da74:	00800104 	movi	r2,4
 101da78:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101da7c:	e03fff15 	stw	zero,-4(fp)
 101da80:	00003d06 	br	101db78 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 101da84:	e0bffd17 	ldw	r2,-12(fp)
 101da88:	10800003 	ldbu	r2,0(r2)
 101da8c:	10803fcc 	andi	r2,r2,255
 101da90:	108000a0 	cmpeqi	r2,r2,2
 101da94:	1000051e 	bne	r2,zero,101daac <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 101da98:	e0fffe17 	ldw	r3,-8(fp)
 101da9c:	00800044 	movi	r2,1
 101daa0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101daa4:	e03fff15 	stw	zero,-4(fp)
 101daa8:	00003306 	br	101db78 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101daac:	0005303a 	rdctl	r2,status
 101dab0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101dab4:	e0fff917 	ldw	r3,-28(fp)
 101dab8:	00bfff84 	movi	r2,-2
 101dabc:	1884703a 	and	r2,r3,r2
 101dac0:	1001703a 	wrctl	status,r2
  
  return context;
 101dac4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101dac8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 101dacc:	e0bffd17 	ldw	r2,-12(fp)
 101dad0:	10800117 	ldw	r2,4(r2)
 101dad4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 101dad8:	e0bffb17 	ldw	r2,-20(fp)
 101dadc:	1080058b 	ldhu	r2,22(r2)
 101dae0:	10bfffcc 	andi	r2,r2,65535
 101dae4:	1005003a 	cmpeq	r2,r2,zero
 101dae8:	1000191e 	bne	r2,zero,101db50 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 101daec:	e0bffb17 	ldw	r2,-20(fp)
 101daf0:	10c00417 	ldw	r3,16(r2)
 101daf4:	18800017 	ldw	r2,0(r3)
 101daf8:	e0bffc15 	stw	r2,-16(fp)
 101dafc:	18c00104 	addi	r3,r3,4
 101db00:	e0bffb17 	ldw	r2,-20(fp)
 101db04:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 101db08:	e0bffb17 	ldw	r2,-20(fp)
 101db0c:	1080058b 	ldhu	r2,22(r2)
 101db10:	10bfffc4 	addi	r2,r2,-1
 101db14:	1007883a 	mov	r3,r2
 101db18:	e0bffb17 	ldw	r2,-20(fp)
 101db1c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 101db20:	e0bffb17 	ldw	r2,-20(fp)
 101db24:	10c00417 	ldw	r3,16(r2)
 101db28:	e0bffb17 	ldw	r2,-20(fp)
 101db2c:	10800217 	ldw	r2,8(r2)
 101db30:	1880041e 	bne	r3,r2,101db44 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 101db34:	e0bffb17 	ldw	r2,-20(fp)
 101db38:	10c00117 	ldw	r3,4(r2)
 101db3c:	e0bffb17 	ldw	r2,-20(fp)
 101db40:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 101db44:	e0bffe17 	ldw	r2,-8(fp)
 101db48:	10000005 	stb	zero,0(r2)
 101db4c:	00000406 	br	101db60 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 101db50:	e0fffe17 	ldw	r3,-8(fp)
 101db54:	008007c4 	movi	r2,31
 101db58:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 101db5c:	e03ffc15 	stw	zero,-16(fp)
 101db60:	e0bffa17 	ldw	r2,-24(fp)
 101db64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101db68:	e0bff817 	ldw	r2,-32(fp)
 101db6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 101db70:	e0bffc17 	ldw	r2,-16(fp)
 101db74:	e0bfff15 	stw	r2,-4(fp)
 101db78:	e0bfff17 	ldw	r2,-4(fp)
}
 101db7c:	e037883a 	mov	sp,fp
 101db80:	df000017 	ldw	fp,0(sp)
 101db84:	dec00104 	addi	sp,sp,4
 101db88:	f800283a 	ret

0101db8c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 101db8c:	defff304 	addi	sp,sp,-52
 101db90:	dfc00c15 	stw	ra,48(sp)
 101db94:	df000b15 	stw	fp,44(sp)
 101db98:	df000b04 	addi	fp,sp,44
 101db9c:	e13ffd15 	stw	r4,-12(fp)
 101dba0:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101dba4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 101dba8:	008040f4 	movhi	r2,259
 101dbac:	10a71e04 	addi	r2,r2,-25480
 101dbb0:	10800003 	ldbu	r2,0(r2)
 101dbb4:	10803fcc 	andi	r2,r2,255
 101dbb8:	1005003a 	cmpeq	r2,r2,zero
 101dbbc:	1000021e 	bne	r2,zero,101dbc8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 101dbc0:	e03fff15 	stw	zero,-4(fp)
 101dbc4:	00007006 	br	101dd88 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101dbc8:	0005303a 	rdctl	r2,status
 101dbcc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101dbd0:	e0fff917 	ldw	r3,-28(fp)
 101dbd4:	00bfff84 	movi	r2,-2
 101dbd8:	1884703a 	and	r2,r3,r2
 101dbdc:	1001703a 	wrctl	status,r2
  
  return context;
 101dbe0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101dbe4:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 101dbe8:	008040f4 	movhi	r2,259
 101dbec:	10a71d04 	addi	r2,r2,-25484
 101dbf0:	10800017 	ldw	r2,0(r2)
 101dbf4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 101dbf8:	008040f4 	movhi	r2,259
 101dbfc:	10a71d04 	addi	r2,r2,-25484
 101dc00:	10800017 	ldw	r2,0(r2)
 101dc04:	1005003a 	cmpeq	r2,r2,zero
 101dc08:	1000081e 	bne	r2,zero,101dc2c <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 101dc0c:	008040f4 	movhi	r2,259
 101dc10:	10a71d04 	addi	r2,r2,-25484
 101dc14:	10800017 	ldw	r2,0(r2)
 101dc18:	10800117 	ldw	r2,4(r2)
 101dc1c:	1007883a 	mov	r3,r2
 101dc20:	008040f4 	movhi	r2,259
 101dc24:	10a71d04 	addi	r2,r2,-25484
 101dc28:	10c00015 	stw	r3,0(r2)
 101dc2c:	e0bffa17 	ldw	r2,-24(fp)
 101dc30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101dc34:	e0bff817 	ldw	r2,-32(fp)
 101dc38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 101dc3c:	e0bffc17 	ldw	r2,-16(fp)
 101dc40:	1005003a 	cmpeq	r2,r2,zero
 101dc44:	10004e1e 	bne	r2,zero,101dd80 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101dc48:	0005303a 	rdctl	r2,status
 101dc4c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101dc50:	e0fff717 	ldw	r3,-36(fp)
 101dc54:	00bfff84 	movi	r2,-2
 101dc58:	1884703a 	and	r2,r3,r2
 101dc5c:	1001703a 	wrctl	status,r2
  
  return context;
 101dc60:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 101dc64:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 101dc68:	008040f4 	movhi	r2,259
 101dc6c:	10a71b04 	addi	r2,r2,-25492
 101dc70:	10800017 	ldw	r2,0(r2)
 101dc74:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 101dc78:	e0bffb17 	ldw	r2,-20(fp)
 101dc7c:	1005003a 	cmpeq	r2,r2,zero
 101dc80:	1000311e 	bne	r2,zero,101dd48 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 101dc84:	008040f4 	movhi	r2,259
 101dc88:	10a71b04 	addi	r2,r2,-25492
 101dc8c:	10800017 	ldw	r2,0(r2)
 101dc90:	10c00017 	ldw	r3,0(r2)
 101dc94:	008040f4 	movhi	r2,259
 101dc98:	10a71b04 	addi	r2,r2,-25492
 101dc9c:	10c00015 	stw	r3,0(r2)
 101dca0:	e0bffa17 	ldw	r2,-24(fp)
 101dca4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101dca8:	e0bff617 	ldw	r2,-40(fp)
 101dcac:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 101dcb0:	e0fffb17 	ldw	r3,-20(fp)
 101dcb4:	e0bffd17 	ldw	r2,-12(fp)
 101dcb8:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 101dcbc:	e0bffe0b 	ldhu	r2,-8(fp)
 101dcc0:	1085883a 	add	r2,r2,r2
 101dcc4:	1085883a 	add	r2,r2,r2
 101dcc8:	1007883a 	mov	r3,r2
 101dccc:	e0bffd17 	ldw	r2,-12(fp)
 101dcd0:	1887883a 	add	r3,r3,r2
 101dcd4:	e0bffb17 	ldw	r2,-20(fp)
 101dcd8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 101dcdc:	e0fffb17 	ldw	r3,-20(fp)
 101dce0:	e0bffd17 	ldw	r2,-12(fp)
 101dce4:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 101dce8:	e0fffb17 	ldw	r3,-20(fp)
 101dcec:	e0bffd17 	ldw	r2,-12(fp)
 101dcf0:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 101dcf4:	e0fffb17 	ldw	r3,-20(fp)
 101dcf8:	e0bffe0b 	ldhu	r2,-8(fp)
 101dcfc:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 101dd00:	e0bffb17 	ldw	r2,-20(fp)
 101dd04:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 101dd08:	e0fffc17 	ldw	r3,-16(fp)
 101dd0c:	00800084 	movi	r2,2
 101dd10:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 101dd14:	e0bffc17 	ldw	r2,-16(fp)
 101dd18:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 101dd1c:	e0fffc17 	ldw	r3,-16(fp)
 101dd20:	e0bffb17 	ldw	r2,-20(fp)
 101dd24:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 101dd28:	e0fffc17 	ldw	r3,-16(fp)
 101dd2c:	00800fc4 	movi	r2,63
 101dd30:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 101dd34:	e0bffc17 	ldw	r2,-16(fp)
 101dd38:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 101dd3c:	e13ffc17 	ldw	r4,-16(fp)
 101dd40:	101abf40 	call	101abf4 <OS_EventWaitListInit>
 101dd44:	00000e06 	br	101dd80 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 101dd48:	008040f4 	movhi	r2,259
 101dd4c:	10a71d04 	addi	r2,r2,-25484
 101dd50:	10c00017 	ldw	r3,0(r2)
 101dd54:	e0bffc17 	ldw	r2,-16(fp)
 101dd58:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 101dd5c:	00c040f4 	movhi	r3,259
 101dd60:	18e71d04 	addi	r3,r3,-25484
 101dd64:	e0bffc17 	ldw	r2,-16(fp)
 101dd68:	18800015 	stw	r2,0(r3)
 101dd6c:	e0bffa17 	ldw	r2,-24(fp)
 101dd70:	e0bff515 	stw	r2,-44(fp)
 101dd74:	e0bff517 	ldw	r2,-44(fp)
 101dd78:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 101dd7c:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 101dd80:	e0bffc17 	ldw	r2,-16(fp)
 101dd84:	e0bfff15 	stw	r2,-4(fp)
 101dd88:	e0bfff17 	ldw	r2,-4(fp)
}
 101dd8c:	e037883a 	mov	sp,fp
 101dd90:	dfc00117 	ldw	ra,4(sp)
 101dd94:	df000017 	ldw	fp,0(sp)
 101dd98:	dec00204 	addi	sp,sp,8
 101dd9c:	f800283a 	ret

0101dda0 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 101dda0:	defff004 	addi	sp,sp,-64
 101dda4:	dfc00f15 	stw	ra,60(sp)
 101dda8:	df000e15 	stw	fp,56(sp)
 101ddac:	df000e04 	addi	fp,sp,56
 101ddb0:	e13ffb15 	stw	r4,-20(fp)
 101ddb4:	e1bffd15 	stw	r6,-12(fp)
 101ddb8:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101ddbc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 101ddc0:	e0bffd17 	ldw	r2,-12(fp)
 101ddc4:	1004c03a 	cmpne	r2,r2,zero
 101ddc8:	1000031e 	bne	r2,zero,101ddd8 <OSQDel+0x38>
        return (pevent);
 101ddcc:	e0bffb17 	ldw	r2,-20(fp)
 101ddd0:	e0bfff15 	stw	r2,-4(fp)
 101ddd4:	0000ac06 	br	101e088 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 101ddd8:	e0bffb17 	ldw	r2,-20(fp)
 101dddc:	1004c03a 	cmpne	r2,r2,zero
 101dde0:	1000061e 	bne	r2,zero,101ddfc <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 101dde4:	e0fffd17 	ldw	r3,-12(fp)
 101dde8:	00800104 	movi	r2,4
 101ddec:	18800005 	stb	r2,0(r3)
        return (pevent);
 101ddf0:	e0fffb17 	ldw	r3,-20(fp)
 101ddf4:	e0ffff15 	stw	r3,-4(fp)
 101ddf8:	0000a306 	br	101e088 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 101ddfc:	e0bffb17 	ldw	r2,-20(fp)
 101de00:	10800003 	ldbu	r2,0(r2)
 101de04:	10803fcc 	andi	r2,r2,255
 101de08:	108000a0 	cmpeqi	r2,r2,2
 101de0c:	1000061e 	bne	r2,zero,101de28 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 101de10:	e0fffd17 	ldw	r3,-12(fp)
 101de14:	00800044 	movi	r2,1
 101de18:	18800005 	stb	r2,0(r3)
        return (pevent);
 101de1c:	e0bffb17 	ldw	r2,-20(fp)
 101de20:	e0bfff15 	stw	r2,-4(fp)
 101de24:	00009806 	br	101e088 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 101de28:	008040f4 	movhi	r2,259
 101de2c:	10a71e04 	addi	r2,r2,-25480
 101de30:	10800003 	ldbu	r2,0(r2)
 101de34:	10803fcc 	andi	r2,r2,255
 101de38:	1005003a 	cmpeq	r2,r2,zero
 101de3c:	1000061e 	bne	r2,zero,101de58 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 101de40:	e0fffd17 	ldw	r3,-12(fp)
 101de44:	008003c4 	movi	r2,15
 101de48:	18800005 	stb	r2,0(r3)
        return (pevent);
 101de4c:	e0fffb17 	ldw	r3,-20(fp)
 101de50:	e0ffff15 	stw	r3,-4(fp)
 101de54:	00008c06 	br	101e088 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101de58:	0005303a 	rdctl	r2,status
 101de5c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101de60:	e0fff617 	ldw	r3,-40(fp)
 101de64:	00bfff84 	movi	r2,-2
 101de68:	1884703a 	and	r2,r3,r2
 101de6c:	1001703a 	wrctl	status,r2
  
  return context;
 101de70:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 101de74:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 101de78:	e0bffb17 	ldw	r2,-20(fp)
 101de7c:	10800283 	ldbu	r2,10(r2)
 101de80:	10803fcc 	andi	r2,r2,255
 101de84:	1005003a 	cmpeq	r2,r2,zero
 101de88:	1000031e 	bne	r2,zero,101de98 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 101de8c:	00800044 	movi	r2,1
 101de90:	e0bffa05 	stb	r2,-24(fp)
 101de94:	00000106 	br	101de9c <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 101de98:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 101de9c:	e0bffc03 	ldbu	r2,-16(fp)
 101dea0:	e0bffe15 	stw	r2,-8(fp)
 101dea4:	e0fffe17 	ldw	r3,-8(fp)
 101dea8:	1805003a 	cmpeq	r2,r3,zero
 101deac:	1000041e 	bne	r2,zero,101dec0 <OSQDel+0x120>
 101deb0:	e0fffe17 	ldw	r3,-8(fp)
 101deb4:	18800060 	cmpeqi	r2,r3,1
 101deb8:	1000391e 	bne	r2,zero,101dfa0 <OSQDel+0x200>
 101debc:	00006706 	br	101e05c <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 101dec0:	e0bffa03 	ldbu	r2,-24(fp)
 101dec4:	1004c03a 	cmpne	r2,r2,zero
 101dec8:	1000261e 	bne	r2,zero,101df64 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 101decc:	e0fffb17 	ldw	r3,-20(fp)
 101ded0:	00800fc4 	movi	r2,63
 101ded4:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 101ded8:	e0bffb17 	ldw	r2,-20(fp)
 101dedc:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 101dee0:	e0bffb17 	ldw	r2,-20(fp)
 101dee4:	10800117 	ldw	r2,4(r2)
 101dee8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 101deec:	008040f4 	movhi	r2,259
 101def0:	10a71b04 	addi	r2,r2,-25492
 101def4:	10c00017 	ldw	r3,0(r2)
 101def8:	e0bff817 	ldw	r2,-32(fp)
 101defc:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 101df00:	00c040f4 	movhi	r3,259
 101df04:	18e71b04 	addi	r3,r3,-25492
 101df08:	e0bff817 	ldw	r2,-32(fp)
 101df0c:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 101df10:	e0bffb17 	ldw	r2,-20(fp)
 101df14:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 101df18:	008040f4 	movhi	r2,259
 101df1c:	10a71d04 	addi	r2,r2,-25484
 101df20:	10c00017 	ldw	r3,0(r2)
 101df24:	e0bffb17 	ldw	r2,-20(fp)
 101df28:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 101df2c:	e0bffb17 	ldw	r2,-20(fp)
 101df30:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 101df34:	00c040f4 	movhi	r3,259
 101df38:	18e71d04 	addi	r3,r3,-25484
 101df3c:	e0bffb17 	ldw	r2,-20(fp)
 101df40:	18800015 	stw	r2,0(r3)
 101df44:	e0bff717 	ldw	r2,-36(fp)
 101df48:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101df4c:	e0bff517 	ldw	r2,-44(fp)
 101df50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 101df54:	e0bffd17 	ldw	r2,-12(fp)
 101df58:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 101df5c:	e03ff915 	stw	zero,-28(fp)
 101df60:	00004706 	br	101e080 <OSQDel+0x2e0>
 101df64:	e0bff717 	ldw	r2,-36(fp)
 101df68:	e0bff415 	stw	r2,-48(fp)
 101df6c:	e0bff417 	ldw	r2,-48(fp)
 101df70:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 101df74:	e0fffd17 	ldw	r3,-12(fp)
 101df78:	00801244 	movi	r2,73
 101df7c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 101df80:	e0bffb17 	ldw	r2,-20(fp)
 101df84:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 101df88:	00003d06 	br	101e080 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 101df8c:	e13ffb17 	ldw	r4,-20(fp)
 101df90:	000b883a 	mov	r5,zero
 101df94:	01800104 	movi	r6,4
 101df98:	000f883a 	mov	r7,zero
 101df9c:	101a6400 	call	101a640 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 101dfa0:	e0bffb17 	ldw	r2,-20(fp)
 101dfa4:	10800283 	ldbu	r2,10(r2)
 101dfa8:	10803fcc 	andi	r2,r2,255
 101dfac:	1004c03a 	cmpne	r2,r2,zero
 101dfb0:	103ff61e 	bne	r2,zero,101df8c <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 101dfb4:	e0fffb17 	ldw	r3,-20(fp)
 101dfb8:	00800fc4 	movi	r2,63
 101dfbc:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 101dfc0:	e0bffb17 	ldw	r2,-20(fp)
 101dfc4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 101dfc8:	e0bffb17 	ldw	r2,-20(fp)
 101dfcc:	10800117 	ldw	r2,4(r2)
 101dfd0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 101dfd4:	008040f4 	movhi	r2,259
 101dfd8:	10a71b04 	addi	r2,r2,-25492
 101dfdc:	10c00017 	ldw	r3,0(r2)
 101dfe0:	e0bff817 	ldw	r2,-32(fp)
 101dfe4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 101dfe8:	00c040f4 	movhi	r3,259
 101dfec:	18e71b04 	addi	r3,r3,-25492
 101dff0:	e0bff817 	ldw	r2,-32(fp)
 101dff4:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 101dff8:	e0bffb17 	ldw	r2,-20(fp)
 101dffc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 101e000:	008040f4 	movhi	r2,259
 101e004:	10a71d04 	addi	r2,r2,-25484
 101e008:	10c00017 	ldw	r3,0(r2)
 101e00c:	e0bffb17 	ldw	r2,-20(fp)
 101e010:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 101e014:	e0bffb17 	ldw	r2,-20(fp)
 101e018:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 101e01c:	00c040f4 	movhi	r3,259
 101e020:	18e71d04 	addi	r3,r3,-25484
 101e024:	e0bffb17 	ldw	r2,-20(fp)
 101e028:	18800015 	stw	r2,0(r3)
 101e02c:	e0bff717 	ldw	r2,-36(fp)
 101e030:	e0bff315 	stw	r2,-52(fp)
 101e034:	e0bff317 	ldw	r2,-52(fp)
 101e038:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 101e03c:	e0bffa03 	ldbu	r2,-24(fp)
 101e040:	10800058 	cmpnei	r2,r2,1
 101e044:	1000011e 	bne	r2,zero,101e04c <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 101e048:	101b0800 	call	101b080 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 101e04c:	e0bffd17 	ldw	r2,-12(fp)
 101e050:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 101e054:	e03ff915 	stw	zero,-28(fp)
             break;
 101e058:	00000906 	br	101e080 <OSQDel+0x2e0>
 101e05c:	e0bff717 	ldw	r2,-36(fp)
 101e060:	e0bff215 	stw	r2,-56(fp)
 101e064:	e0bff217 	ldw	r2,-56(fp)
 101e068:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 101e06c:	e0fffd17 	ldw	r3,-12(fp)
 101e070:	008001c4 	movi	r2,7
 101e074:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 101e078:	e0bffb17 	ldw	r2,-20(fp)
 101e07c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 101e080:	e0bff917 	ldw	r2,-28(fp)
 101e084:	e0bfff15 	stw	r2,-4(fp)
 101e088:	e0bfff17 	ldw	r2,-4(fp)
}
 101e08c:	e037883a 	mov	sp,fp
 101e090:	dfc00117 	ldw	ra,4(sp)
 101e094:	df000017 	ldw	fp,0(sp)
 101e098:	dec00204 	addi	sp,sp,8
 101e09c:	f800283a 	ret

0101e0a0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 101e0a0:	defff904 	addi	sp,sp,-28
 101e0a4:	df000615 	stw	fp,24(sp)
 101e0a8:	df000604 	addi	fp,sp,24
 101e0ac:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101e0b0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101e0b4:	e0bffe17 	ldw	r2,-8(fp)
 101e0b8:	1004c03a 	cmpne	r2,r2,zero
 101e0bc:	1000031e 	bne	r2,zero,101e0cc <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 101e0c0:	00800104 	movi	r2,4
 101e0c4:	e0bfff15 	stw	r2,-4(fp)
 101e0c8:	00002206 	br	101e154 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 101e0cc:	e0bffe17 	ldw	r2,-8(fp)
 101e0d0:	10800003 	ldbu	r2,0(r2)
 101e0d4:	10803fcc 	andi	r2,r2,255
 101e0d8:	108000a0 	cmpeqi	r2,r2,2
 101e0dc:	1000031e 	bne	r2,zero,101e0ec <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 101e0e0:	00800044 	movi	r2,1
 101e0e4:	e0bfff15 	stw	r2,-4(fp)
 101e0e8:	00001a06 	br	101e154 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e0ec:	0005303a 	rdctl	r2,status
 101e0f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e0f4:	e0fffb17 	ldw	r3,-20(fp)
 101e0f8:	00bfff84 	movi	r2,-2
 101e0fc:	1884703a 	and	r2,r3,r2
 101e100:	1001703a 	wrctl	status,r2
  
  return context;
 101e104:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101e108:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 101e10c:	e0bffe17 	ldw	r2,-8(fp)
 101e110:	10800117 	ldw	r2,4(r2)
 101e114:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 101e118:	e0bffd17 	ldw	r2,-12(fp)
 101e11c:	10c00117 	ldw	r3,4(r2)
 101e120:	e0bffd17 	ldw	r2,-12(fp)
 101e124:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 101e128:	e0bffd17 	ldw	r2,-12(fp)
 101e12c:	10c00117 	ldw	r3,4(r2)
 101e130:	e0bffd17 	ldw	r2,-12(fp)
 101e134:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 101e138:	e0bffd17 	ldw	r2,-12(fp)
 101e13c:	1000058d 	sth	zero,22(r2)
 101e140:	e0bffc17 	ldw	r2,-16(fp)
 101e144:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e148:	e0bffa17 	ldw	r2,-24(fp)
 101e14c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101e150:	e03fff15 	stw	zero,-4(fp)
 101e154:	e0bfff17 	ldw	r2,-4(fp)
}
 101e158:	e037883a 	mov	sp,fp
 101e15c:	df000017 	ldw	fp,0(sp)
 101e160:	dec00104 	addi	sp,sp,4
 101e164:	f800283a 	ret

0101e168 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 101e168:	defff104 	addi	sp,sp,-60
 101e16c:	dfc00e15 	stw	ra,56(sp)
 101e170:	df000d15 	stw	fp,52(sp)
 101e174:	df000d04 	addi	fp,sp,52
 101e178:	e13ffb15 	stw	r4,-20(fp)
 101e17c:	e1bffd15 	stw	r6,-12(fp)
 101e180:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101e184:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 101e188:	e0bffd17 	ldw	r2,-12(fp)
 101e18c:	1004c03a 	cmpne	r2,r2,zero
 101e190:	1000021e 	bne	r2,zero,101e19c <OSQPend+0x34>
        return ((void *)0);
 101e194:	e03fff15 	stw	zero,-4(fp)
 101e198:	0000b506 	br	101e470 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 101e19c:	e0bffb17 	ldw	r2,-20(fp)
 101e1a0:	1004c03a 	cmpne	r2,r2,zero
 101e1a4:	1000051e 	bne	r2,zero,101e1bc <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 101e1a8:	e0fffd17 	ldw	r3,-12(fp)
 101e1ac:	00800104 	movi	r2,4
 101e1b0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101e1b4:	e03fff15 	stw	zero,-4(fp)
 101e1b8:	0000ad06 	br	101e470 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 101e1bc:	e0bffb17 	ldw	r2,-20(fp)
 101e1c0:	10800003 	ldbu	r2,0(r2)
 101e1c4:	10803fcc 	andi	r2,r2,255
 101e1c8:	108000a0 	cmpeqi	r2,r2,2
 101e1cc:	1000051e 	bne	r2,zero,101e1e4 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 101e1d0:	e0fffd17 	ldw	r3,-12(fp)
 101e1d4:	00800044 	movi	r2,1
 101e1d8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101e1dc:	e03fff15 	stw	zero,-4(fp)
 101e1e0:	0000a306 	br	101e470 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 101e1e4:	008040f4 	movhi	r2,259
 101e1e8:	10a71e04 	addi	r2,r2,-25480
 101e1ec:	10800003 	ldbu	r2,0(r2)
 101e1f0:	10803fcc 	andi	r2,r2,255
 101e1f4:	1005003a 	cmpeq	r2,r2,zero
 101e1f8:	1000051e 	bne	r2,zero,101e210 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 101e1fc:	e0fffd17 	ldw	r3,-12(fp)
 101e200:	00800084 	movi	r2,2
 101e204:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101e208:	e03fff15 	stw	zero,-4(fp)
 101e20c:	00009806 	br	101e470 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 101e210:	008040f4 	movhi	r2,259
 101e214:	10a71004 	addi	r2,r2,-25536
 101e218:	10800003 	ldbu	r2,0(r2)
 101e21c:	10803fcc 	andi	r2,r2,255
 101e220:	1005003a 	cmpeq	r2,r2,zero
 101e224:	1000051e 	bne	r2,zero,101e23c <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 101e228:	e0fffd17 	ldw	r3,-12(fp)
 101e22c:	00800344 	movi	r2,13
 101e230:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101e234:	e03fff15 	stw	zero,-4(fp)
 101e238:	00008d06 	br	101e470 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e23c:	0005303a 	rdctl	r2,status
 101e240:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e244:	e0fff717 	ldw	r3,-36(fp)
 101e248:	00bfff84 	movi	r2,-2
 101e24c:	1884703a 	and	r2,r3,r2
 101e250:	1001703a 	wrctl	status,r2
  
  return context;
 101e254:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 101e258:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 101e25c:	e0bffb17 	ldw	r2,-20(fp)
 101e260:	10800117 	ldw	r2,4(r2)
 101e264:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 101e268:	e0bff917 	ldw	r2,-28(fp)
 101e26c:	1080058b 	ldhu	r2,22(r2)
 101e270:	10bfffcc 	andi	r2,r2,65535
 101e274:	1005003a 	cmpeq	r2,r2,zero
 101e278:	10001f1e 	bne	r2,zero,101e2f8 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 101e27c:	e0bff917 	ldw	r2,-28(fp)
 101e280:	10c00417 	ldw	r3,16(r2)
 101e284:	18800017 	ldw	r2,0(r3)
 101e288:	e0bffa15 	stw	r2,-24(fp)
 101e28c:	18c00104 	addi	r3,r3,4
 101e290:	e0bff917 	ldw	r2,-28(fp)
 101e294:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 101e298:	e0bff917 	ldw	r2,-28(fp)
 101e29c:	1080058b 	ldhu	r2,22(r2)
 101e2a0:	10bfffc4 	addi	r2,r2,-1
 101e2a4:	1007883a 	mov	r3,r2
 101e2a8:	e0bff917 	ldw	r2,-28(fp)
 101e2ac:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 101e2b0:	e0bff917 	ldw	r2,-28(fp)
 101e2b4:	10c00417 	ldw	r3,16(r2)
 101e2b8:	e0bff917 	ldw	r2,-28(fp)
 101e2bc:	10800217 	ldw	r2,8(r2)
 101e2c0:	1880041e 	bne	r3,r2,101e2d4 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 101e2c4:	e0bff917 	ldw	r2,-28(fp)
 101e2c8:	10c00117 	ldw	r3,4(r2)
 101e2cc:	e0bff917 	ldw	r2,-28(fp)
 101e2d0:	10c00415 	stw	r3,16(r2)
 101e2d4:	e0bff817 	ldw	r2,-32(fp)
 101e2d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e2dc:	e0bff617 	ldw	r2,-40(fp)
 101e2e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 101e2e4:	e0bffd17 	ldw	r2,-12(fp)
 101e2e8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 101e2ec:	e0bffa17 	ldw	r2,-24(fp)
 101e2f0:	e0bfff15 	stw	r2,-4(fp)
 101e2f4:	00005e06 	br	101e470 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 101e2f8:	008040f4 	movhi	r2,259
 101e2fc:	10a71f04 	addi	r2,r2,-25476
 101e300:	10c00017 	ldw	r3,0(r2)
 101e304:	008040f4 	movhi	r2,259
 101e308:	10a71f04 	addi	r2,r2,-25476
 101e30c:	10800017 	ldw	r2,0(r2)
 101e310:	10800c03 	ldbu	r2,48(r2)
 101e314:	10800114 	ori	r2,r2,4
 101e318:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 101e31c:	008040f4 	movhi	r2,259
 101e320:	10a71f04 	addi	r2,r2,-25476
 101e324:	10800017 	ldw	r2,0(r2)
 101e328:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 101e32c:	008040f4 	movhi	r2,259
 101e330:	10a71f04 	addi	r2,r2,-25476
 101e334:	10c00017 	ldw	r3,0(r2)
 101e338:	e0bffc0b 	ldhu	r2,-16(fp)
 101e33c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 101e340:	e13ffb17 	ldw	r4,-20(fp)
 101e344:	101a7d40 	call	101a7d4 <OS_EventTaskWait>
 101e348:	e0bff817 	ldw	r2,-32(fp)
 101e34c:	e0bff515 	stw	r2,-44(fp)
 101e350:	e0bff517 	ldw	r2,-44(fp)
 101e354:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 101e358:	101b0800 	call	101b080 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e35c:	0005303a 	rdctl	r2,status
 101e360:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e364:	e0fff417 	ldw	r3,-48(fp)
 101e368:	00bfff84 	movi	r2,-2
 101e36c:	1884703a 	and	r2,r3,r2
 101e370:	1001703a 	wrctl	status,r2
  
  return context;
 101e374:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 101e378:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 101e37c:	008040f4 	movhi	r2,259
 101e380:	10a71f04 	addi	r2,r2,-25476
 101e384:	10800017 	ldw	r2,0(r2)
 101e388:	10800c43 	ldbu	r2,49(r2)
 101e38c:	10803fcc 	andi	r2,r2,255
 101e390:	e0bffe15 	stw	r2,-8(fp)
 101e394:	e0fffe17 	ldw	r3,-8(fp)
 101e398:	1805003a 	cmpeq	r2,r3,zero
 101e39c:	1000041e 	bne	r2,zero,101e3b0 <OSQPend+0x248>
 101e3a0:	e0fffe17 	ldw	r3,-8(fp)
 101e3a4:	188000a0 	cmpeqi	r2,r3,2
 101e3a8:	1000091e 	bne	r2,zero,101e3d0 <OSQPend+0x268>
 101e3ac:	00000d06 	br	101e3e4 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 101e3b0:	008040f4 	movhi	r2,259
 101e3b4:	10a71f04 	addi	r2,r2,-25476
 101e3b8:	10800017 	ldw	r2,0(r2)
 101e3bc:	10800917 	ldw	r2,36(r2)
 101e3c0:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 101e3c4:	e0bffd17 	ldw	r2,-12(fp)
 101e3c8:	10000005 	stb	zero,0(r2)
             break;
 101e3cc:	00000e06 	br	101e408 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 101e3d0:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 101e3d4:	e0fffd17 	ldw	r3,-12(fp)
 101e3d8:	00800384 	movi	r2,14
 101e3dc:	18800005 	stb	r2,0(r3)
             break;
 101e3e0:	00000906 	br	101e408 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 101e3e4:	008040f4 	movhi	r2,259
 101e3e8:	10a71f04 	addi	r2,r2,-25476
 101e3ec:	11000017 	ldw	r4,0(r2)
 101e3f0:	e17ffb17 	ldw	r5,-20(fp)
 101e3f4:	101aa380 	call	101aa38 <OS_EventTaskRemove>
             pmsg = (void *)0;
 101e3f8:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 101e3fc:	e0fffd17 	ldw	r3,-12(fp)
 101e400:	00800284 	movi	r2,10
 101e404:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 101e408:	008040f4 	movhi	r2,259
 101e40c:	10a71f04 	addi	r2,r2,-25476
 101e410:	10800017 	ldw	r2,0(r2)
 101e414:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 101e418:	008040f4 	movhi	r2,259
 101e41c:	10a71f04 	addi	r2,r2,-25476
 101e420:	10800017 	ldw	r2,0(r2)
 101e424:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 101e428:	008040f4 	movhi	r2,259
 101e42c:	10a71f04 	addi	r2,r2,-25476
 101e430:	10800017 	ldw	r2,0(r2)
 101e434:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 101e438:	008040f4 	movhi	r2,259
 101e43c:	10a71f04 	addi	r2,r2,-25476
 101e440:	10800017 	ldw	r2,0(r2)
 101e444:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 101e448:	008040f4 	movhi	r2,259
 101e44c:	10a71f04 	addi	r2,r2,-25476
 101e450:	10800017 	ldw	r2,0(r2)
 101e454:	10000915 	stw	zero,36(r2)
 101e458:	e0bff817 	ldw	r2,-32(fp)
 101e45c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e460:	e0bff317 	ldw	r2,-52(fp)
 101e464:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 101e468:	e0bffa17 	ldw	r2,-24(fp)
 101e46c:	e0bfff15 	stw	r2,-4(fp)
 101e470:	e0bfff17 	ldw	r2,-4(fp)
}
 101e474:	e037883a 	mov	sp,fp
 101e478:	dfc00117 	ldw	ra,4(sp)
 101e47c:	df000017 	ldw	fp,0(sp)
 101e480:	dec00204 	addi	sp,sp,8
 101e484:	f800283a 	ret

0101e488 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 101e488:	defff504 	addi	sp,sp,-44
 101e48c:	dfc00a15 	stw	ra,40(sp)
 101e490:	df000915 	stw	fp,36(sp)
 101e494:	df000904 	addi	fp,sp,36
 101e498:	e13ffc15 	stw	r4,-16(fp)
 101e49c:	e1bffe15 	stw	r6,-8(fp)
 101e4a0:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101e4a4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 101e4a8:	e0bffe17 	ldw	r2,-8(fp)
 101e4ac:	1004c03a 	cmpne	r2,r2,zero
 101e4b0:	1000021e 	bne	r2,zero,101e4bc <OSQPendAbort+0x34>
        return (0);
 101e4b4:	e03fff15 	stw	zero,-4(fp)
 101e4b8:	00004c06 	br	101e5ec <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 101e4bc:	e0bffc17 	ldw	r2,-16(fp)
 101e4c0:	1004c03a 	cmpne	r2,r2,zero
 101e4c4:	1000051e 	bne	r2,zero,101e4dc <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 101e4c8:	e0fffe17 	ldw	r3,-8(fp)
 101e4cc:	00800104 	movi	r2,4
 101e4d0:	18800005 	stb	r2,0(r3)
        return (0);
 101e4d4:	e03fff15 	stw	zero,-4(fp)
 101e4d8:	00004406 	br	101e5ec <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 101e4dc:	e0bffc17 	ldw	r2,-16(fp)
 101e4e0:	10800003 	ldbu	r2,0(r2)
 101e4e4:	10803fcc 	andi	r2,r2,255
 101e4e8:	108000a0 	cmpeqi	r2,r2,2
 101e4ec:	1000051e 	bne	r2,zero,101e504 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 101e4f0:	e0fffe17 	ldw	r3,-8(fp)
 101e4f4:	00800044 	movi	r2,1
 101e4f8:	18800005 	stb	r2,0(r3)
        return (0);
 101e4fc:	e03fff15 	stw	zero,-4(fp)
 101e500:	00003a06 	br	101e5ec <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e504:	0005303a 	rdctl	r2,status
 101e508:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e50c:	e0fff917 	ldw	r3,-28(fp)
 101e510:	00bfff84 	movi	r2,-2
 101e514:	1884703a 	and	r2,r3,r2
 101e518:	1001703a 	wrctl	status,r2
  
  return context;
 101e51c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101e520:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 101e524:	e0bffc17 	ldw	r2,-16(fp)
 101e528:	10800283 	ldbu	r2,10(r2)
 101e52c:	10803fcc 	andi	r2,r2,255
 101e530:	1005003a 	cmpeq	r2,r2,zero
 101e534:	1000261e 	bne	r2,zero,101e5d0 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 101e538:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 101e53c:	e0bffd03 	ldbu	r2,-12(fp)
 101e540:	10800060 	cmpeqi	r2,r2,1
 101e544:	1000091e 	bne	r2,zero,101e56c <OSQPendAbort+0xe4>
 101e548:	00000e06 	br	101e584 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 101e54c:	e13ffc17 	ldw	r4,-16(fp)
 101e550:	000b883a 	mov	r5,zero
 101e554:	01800104 	movi	r6,4
 101e558:	01c00084 	movi	r7,2
 101e55c:	101a6400 	call	101a640 <OS_EventTaskRdy>
                     nbr_tasks++;
 101e560:	e0bffb03 	ldbu	r2,-20(fp)
 101e564:	10800044 	addi	r2,r2,1
 101e568:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 101e56c:	e0bffc17 	ldw	r2,-16(fp)
 101e570:	10800283 	ldbu	r2,10(r2)
 101e574:	10803fcc 	andi	r2,r2,255
 101e578:	1004c03a 	cmpne	r2,r2,zero
 101e57c:	103ff31e 	bne	r2,zero,101e54c <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 101e580:	00000806 	br	101e5a4 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 101e584:	e13ffc17 	ldw	r4,-16(fp)
 101e588:	000b883a 	mov	r5,zero
 101e58c:	01800104 	movi	r6,4
 101e590:	01c00084 	movi	r7,2
 101e594:	101a6400 	call	101a640 <OS_EventTaskRdy>
                 nbr_tasks++;
 101e598:	e0bffb03 	ldbu	r2,-20(fp)
 101e59c:	10800044 	addi	r2,r2,1
 101e5a0:	e0bffb05 	stb	r2,-20(fp)
 101e5a4:	e0bffa17 	ldw	r2,-24(fp)
 101e5a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e5ac:	e0bff817 	ldw	r2,-32(fp)
 101e5b0:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 101e5b4:	101b0800 	call	101b080 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 101e5b8:	e0fffe17 	ldw	r3,-8(fp)
 101e5bc:	00800384 	movi	r2,14
 101e5c0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 101e5c4:	e0bffb03 	ldbu	r2,-20(fp)
 101e5c8:	e0bfff15 	stw	r2,-4(fp)
 101e5cc:	00000706 	br	101e5ec <OSQPendAbort+0x164>
 101e5d0:	e0bffa17 	ldw	r2,-24(fp)
 101e5d4:	e0bff715 	stw	r2,-36(fp)
 101e5d8:	e0bff717 	ldw	r2,-36(fp)
 101e5dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101e5e0:	e0bffe17 	ldw	r2,-8(fp)
 101e5e4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 101e5e8:	e03fff15 	stw	zero,-4(fp)
 101e5ec:	e0bfff17 	ldw	r2,-4(fp)
}
 101e5f0:	e037883a 	mov	sp,fp
 101e5f4:	dfc00117 	ldw	ra,4(sp)
 101e5f8:	df000017 	ldw	fp,0(sp)
 101e5fc:	dec00204 	addi	sp,sp,8
 101e600:	f800283a 	ret

0101e604 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 101e604:	defff504 	addi	sp,sp,-44
 101e608:	dfc00a15 	stw	ra,40(sp)
 101e60c:	df000915 	stw	fp,36(sp)
 101e610:	df000904 	addi	fp,sp,36
 101e614:	e13ffd15 	stw	r4,-12(fp)
 101e618:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 101e61c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 101e620:	e0bffd17 	ldw	r2,-12(fp)
 101e624:	1004c03a 	cmpne	r2,r2,zero
 101e628:	1000031e 	bne	r2,zero,101e638 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 101e62c:	00800104 	movi	r2,4
 101e630:	e0bfff15 	stw	r2,-4(fp)
 101e634:	00004d06 	br	101e76c <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 101e638:	e0bffd17 	ldw	r2,-12(fp)
 101e63c:	10800003 	ldbu	r2,0(r2)
 101e640:	10803fcc 	andi	r2,r2,255
 101e644:	108000a0 	cmpeqi	r2,r2,2
 101e648:	1000031e 	bne	r2,zero,101e658 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 101e64c:	00800044 	movi	r2,1
 101e650:	e0bfff15 	stw	r2,-4(fp)
 101e654:	00004506 	br	101e76c <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e658:	0005303a 	rdctl	r2,status
 101e65c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e660:	e0fffa17 	ldw	r3,-24(fp)
 101e664:	00bfff84 	movi	r2,-2
 101e668:	1884703a 	and	r2,r3,r2
 101e66c:	1001703a 	wrctl	status,r2
  
  return context;
 101e670:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101e674:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 101e678:	e0bffd17 	ldw	r2,-12(fp)
 101e67c:	10800283 	ldbu	r2,10(r2)
 101e680:	10803fcc 	andi	r2,r2,255
 101e684:	1005003a 	cmpeq	r2,r2,zero
 101e688:	10000c1e 	bne	r2,zero,101e6bc <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 101e68c:	e13ffd17 	ldw	r4,-12(fp)
 101e690:	e17ffe17 	ldw	r5,-8(fp)
 101e694:	01800104 	movi	r6,4
 101e698:	000f883a 	mov	r7,zero
 101e69c:	101a6400 	call	101a640 <OS_EventTaskRdy>
 101e6a0:	e0bffb17 	ldw	r2,-20(fp)
 101e6a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e6a8:	e0bff917 	ldw	r2,-28(fp)
 101e6ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 101e6b0:	101b0800 	call	101b080 <OS_Sched>
        return (OS_ERR_NONE);
 101e6b4:	e03fff15 	stw	zero,-4(fp)
 101e6b8:	00002c06 	br	101e76c <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 101e6bc:	e0bffd17 	ldw	r2,-12(fp)
 101e6c0:	10800117 	ldw	r2,4(r2)
 101e6c4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 101e6c8:	e0bffc17 	ldw	r2,-16(fp)
 101e6cc:	10c0058b 	ldhu	r3,22(r2)
 101e6d0:	e0bffc17 	ldw	r2,-16(fp)
 101e6d4:	1080050b 	ldhu	r2,20(r2)
 101e6d8:	18ffffcc 	andi	r3,r3,65535
 101e6dc:	10bfffcc 	andi	r2,r2,65535
 101e6e0:	18800736 	bltu	r3,r2,101e700 <OSQPost+0xfc>
 101e6e4:	e0bffb17 	ldw	r2,-20(fp)
 101e6e8:	e0bff815 	stw	r2,-32(fp)
 101e6ec:	e0bff817 	ldw	r2,-32(fp)
 101e6f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 101e6f4:	00800784 	movi	r2,30
 101e6f8:	e0bfff15 	stw	r2,-4(fp)
 101e6fc:	00001b06 	br	101e76c <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 101e700:	e0bffc17 	ldw	r2,-16(fp)
 101e704:	10c00317 	ldw	r3,12(r2)
 101e708:	e0bffe17 	ldw	r2,-8(fp)
 101e70c:	18800015 	stw	r2,0(r3)
 101e710:	18c00104 	addi	r3,r3,4
 101e714:	e0bffc17 	ldw	r2,-16(fp)
 101e718:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 101e71c:	e0bffc17 	ldw	r2,-16(fp)
 101e720:	1080058b 	ldhu	r2,22(r2)
 101e724:	10800044 	addi	r2,r2,1
 101e728:	1007883a 	mov	r3,r2
 101e72c:	e0bffc17 	ldw	r2,-16(fp)
 101e730:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 101e734:	e0bffc17 	ldw	r2,-16(fp)
 101e738:	10c00317 	ldw	r3,12(r2)
 101e73c:	e0bffc17 	ldw	r2,-16(fp)
 101e740:	10800217 	ldw	r2,8(r2)
 101e744:	1880041e 	bne	r3,r2,101e758 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 101e748:	e0bffc17 	ldw	r2,-16(fp)
 101e74c:	10c00117 	ldw	r3,4(r2)
 101e750:	e0bffc17 	ldw	r2,-16(fp)
 101e754:	10c00315 	stw	r3,12(r2)
 101e758:	e0bffb17 	ldw	r2,-20(fp)
 101e75c:	e0bff715 	stw	r2,-36(fp)
 101e760:	e0bff717 	ldw	r2,-36(fp)
 101e764:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101e768:	e03fff15 	stw	zero,-4(fp)
 101e76c:	e0bfff17 	ldw	r2,-4(fp)
}
 101e770:	e037883a 	mov	sp,fp
 101e774:	dfc00117 	ldw	ra,4(sp)
 101e778:	df000017 	ldw	fp,0(sp)
 101e77c:	dec00204 	addi	sp,sp,8
 101e780:	f800283a 	ret

0101e784 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 101e784:	defff504 	addi	sp,sp,-44
 101e788:	dfc00a15 	stw	ra,40(sp)
 101e78c:	df000915 	stw	fp,36(sp)
 101e790:	df000904 	addi	fp,sp,36
 101e794:	e13ffd15 	stw	r4,-12(fp)
 101e798:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101e79c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101e7a0:	e0bffd17 	ldw	r2,-12(fp)
 101e7a4:	1004c03a 	cmpne	r2,r2,zero
 101e7a8:	1000031e 	bne	r2,zero,101e7b8 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 101e7ac:	00800104 	movi	r2,4
 101e7b0:	e0bfff15 	stw	r2,-4(fp)
 101e7b4:	00004f06 	br	101e8f4 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 101e7b8:	e0bffd17 	ldw	r2,-12(fp)
 101e7bc:	10800003 	ldbu	r2,0(r2)
 101e7c0:	10803fcc 	andi	r2,r2,255
 101e7c4:	108000a0 	cmpeqi	r2,r2,2
 101e7c8:	1000031e 	bne	r2,zero,101e7d8 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 101e7cc:	00800044 	movi	r2,1
 101e7d0:	e0bfff15 	stw	r2,-4(fp)
 101e7d4:	00004706 	br	101e8f4 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e7d8:	0005303a 	rdctl	r2,status
 101e7dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e7e0:	e0fffa17 	ldw	r3,-24(fp)
 101e7e4:	00bfff84 	movi	r2,-2
 101e7e8:	1884703a 	and	r2,r3,r2
 101e7ec:	1001703a 	wrctl	status,r2
  
  return context;
 101e7f0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101e7f4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 101e7f8:	e0bffd17 	ldw	r2,-12(fp)
 101e7fc:	10800283 	ldbu	r2,10(r2)
 101e800:	10803fcc 	andi	r2,r2,255
 101e804:	1005003a 	cmpeq	r2,r2,zero
 101e808:	10000c1e 	bne	r2,zero,101e83c <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 101e80c:	e13ffd17 	ldw	r4,-12(fp)
 101e810:	e17ffe17 	ldw	r5,-8(fp)
 101e814:	01800104 	movi	r6,4
 101e818:	000f883a 	mov	r7,zero
 101e81c:	101a6400 	call	101a640 <OS_EventTaskRdy>
 101e820:	e0bffb17 	ldw	r2,-20(fp)
 101e824:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e828:	e0bff917 	ldw	r2,-28(fp)
 101e82c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 101e830:	101b0800 	call	101b080 <OS_Sched>
        return (OS_ERR_NONE);
 101e834:	e03fff15 	stw	zero,-4(fp)
 101e838:	00002e06 	br	101e8f4 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 101e83c:	e0bffd17 	ldw	r2,-12(fp)
 101e840:	10800117 	ldw	r2,4(r2)
 101e844:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 101e848:	e0bffc17 	ldw	r2,-16(fp)
 101e84c:	10c0058b 	ldhu	r3,22(r2)
 101e850:	e0bffc17 	ldw	r2,-16(fp)
 101e854:	1080050b 	ldhu	r2,20(r2)
 101e858:	18ffffcc 	andi	r3,r3,65535
 101e85c:	10bfffcc 	andi	r2,r2,65535
 101e860:	18800736 	bltu	r3,r2,101e880 <OSQPostFront+0xfc>
 101e864:	e0bffb17 	ldw	r2,-20(fp)
 101e868:	e0bff815 	stw	r2,-32(fp)
 101e86c:	e0bff817 	ldw	r2,-32(fp)
 101e870:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 101e874:	00800784 	movi	r2,30
 101e878:	e0bfff15 	stw	r2,-4(fp)
 101e87c:	00001d06 	br	101e8f4 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 101e880:	e0bffc17 	ldw	r2,-16(fp)
 101e884:	10c00417 	ldw	r3,16(r2)
 101e888:	e0bffc17 	ldw	r2,-16(fp)
 101e88c:	10800117 	ldw	r2,4(r2)
 101e890:	1880041e 	bne	r3,r2,101e8a4 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 101e894:	e0bffc17 	ldw	r2,-16(fp)
 101e898:	10c00217 	ldw	r3,8(r2)
 101e89c:	e0bffc17 	ldw	r2,-16(fp)
 101e8a0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 101e8a4:	e0bffc17 	ldw	r2,-16(fp)
 101e8a8:	10800417 	ldw	r2,16(r2)
 101e8ac:	10ffff04 	addi	r3,r2,-4
 101e8b0:	e0bffc17 	ldw	r2,-16(fp)
 101e8b4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 101e8b8:	e0bffc17 	ldw	r2,-16(fp)
 101e8bc:	10c00417 	ldw	r3,16(r2)
 101e8c0:	e0bffe17 	ldw	r2,-8(fp)
 101e8c4:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 101e8c8:	e0bffc17 	ldw	r2,-16(fp)
 101e8cc:	1080058b 	ldhu	r2,22(r2)
 101e8d0:	10800044 	addi	r2,r2,1
 101e8d4:	1007883a 	mov	r3,r2
 101e8d8:	e0bffc17 	ldw	r2,-16(fp)
 101e8dc:	10c0058d 	sth	r3,22(r2)
 101e8e0:	e0bffb17 	ldw	r2,-20(fp)
 101e8e4:	e0bff715 	stw	r2,-36(fp)
 101e8e8:	e0bff717 	ldw	r2,-36(fp)
 101e8ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101e8f0:	e03fff15 	stw	zero,-4(fp)
 101e8f4:	e0bfff17 	ldw	r2,-4(fp)
}
 101e8f8:	e037883a 	mov	sp,fp
 101e8fc:	dfc00117 	ldw	ra,4(sp)
 101e900:	df000017 	ldw	fp,0(sp)
 101e904:	dec00204 	addi	sp,sp,8
 101e908:	f800283a 	ret

0101e90c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 101e90c:	defff404 	addi	sp,sp,-48
 101e910:	dfc00b15 	stw	ra,44(sp)
 101e914:	df000a15 	stw	fp,40(sp)
 101e918:	df000a04 	addi	fp,sp,40
 101e91c:	e13ffc15 	stw	r4,-16(fp)
 101e920:	e17ffd15 	stw	r5,-12(fp)
 101e924:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101e928:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101e92c:	e0bffc17 	ldw	r2,-16(fp)
 101e930:	1004c03a 	cmpne	r2,r2,zero
 101e934:	1000031e 	bne	r2,zero,101e944 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 101e938:	00800104 	movi	r2,4
 101e93c:	e0bfff15 	stw	r2,-4(fp)
 101e940:	00007906 	br	101eb28 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 101e944:	e0bffc17 	ldw	r2,-16(fp)
 101e948:	10800003 	ldbu	r2,0(r2)
 101e94c:	10803fcc 	andi	r2,r2,255
 101e950:	108000a0 	cmpeqi	r2,r2,2
 101e954:	1000031e 	bne	r2,zero,101e964 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 101e958:	00800044 	movi	r2,1
 101e95c:	e0bfff15 	stw	r2,-4(fp)
 101e960:	00007106 	br	101eb28 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e964:	0005303a 	rdctl	r2,status
 101e968:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e96c:	e0fff917 	ldw	r3,-28(fp)
 101e970:	00bfff84 	movi	r2,-2
 101e974:	1884703a 	and	r2,r3,r2
 101e978:	1001703a 	wrctl	status,r2
  
  return context;
 101e97c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101e980:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 101e984:	e0bffc17 	ldw	r2,-16(fp)
 101e988:	10800283 	ldbu	r2,10(r2)
 101e98c:	10803fcc 	andi	r2,r2,255
 101e990:	1005003a 	cmpeq	r2,r2,zero
 101e994:	1000211e 	bne	r2,zero,101ea1c <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 101e998:	e0bffe03 	ldbu	r2,-8(fp)
 101e99c:	1080004c 	andi	r2,r2,1
 101e9a0:	10803fcc 	andi	r2,r2,255
 101e9a4:	1005003a 	cmpeq	r2,r2,zero
 101e9a8:	10000c1e 	bne	r2,zero,101e9dc <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 101e9ac:	00000506 	br	101e9c4 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 101e9b0:	e13ffc17 	ldw	r4,-16(fp)
 101e9b4:	e17ffd17 	ldw	r5,-12(fp)
 101e9b8:	01800104 	movi	r6,4
 101e9bc:	000f883a 	mov	r7,zero
 101e9c0:	101a6400 	call	101a640 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 101e9c4:	e0bffc17 	ldw	r2,-16(fp)
 101e9c8:	10800283 	ldbu	r2,10(r2)
 101e9cc:	10803fcc 	andi	r2,r2,255
 101e9d0:	1004c03a 	cmpne	r2,r2,zero
 101e9d4:	103ff61e 	bne	r2,zero,101e9b0 <OSQPostOpt+0xa4>
 101e9d8:	00000506 	br	101e9f0 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 101e9dc:	e13ffc17 	ldw	r4,-16(fp)
 101e9e0:	e17ffd17 	ldw	r5,-12(fp)
 101e9e4:	01800104 	movi	r6,4
 101e9e8:	000f883a 	mov	r7,zero
 101e9ec:	101a6400 	call	101a640 <OS_EventTaskRdy>
 101e9f0:	e0bffa17 	ldw	r2,-24(fp)
 101e9f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101e9f8:	e0bff817 	ldw	r2,-32(fp)
 101e9fc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 101ea00:	e0bffe03 	ldbu	r2,-8(fp)
 101ea04:	1080010c 	andi	r2,r2,4
 101ea08:	1004c03a 	cmpne	r2,r2,zero
 101ea0c:	1000011e 	bne	r2,zero,101ea14 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 101ea10:	101b0800 	call	101b080 <OS_Sched>
        }
        return (OS_ERR_NONE);
 101ea14:	e03fff15 	stw	zero,-4(fp)
 101ea18:	00004306 	br	101eb28 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 101ea1c:	e0bffc17 	ldw	r2,-16(fp)
 101ea20:	10800117 	ldw	r2,4(r2)
 101ea24:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 101ea28:	e0bffb17 	ldw	r2,-20(fp)
 101ea2c:	10c0058b 	ldhu	r3,22(r2)
 101ea30:	e0bffb17 	ldw	r2,-20(fp)
 101ea34:	1080050b 	ldhu	r2,20(r2)
 101ea38:	18ffffcc 	andi	r3,r3,65535
 101ea3c:	10bfffcc 	andi	r2,r2,65535
 101ea40:	18800736 	bltu	r3,r2,101ea60 <OSQPostOpt+0x154>
 101ea44:	e0bffa17 	ldw	r2,-24(fp)
 101ea48:	e0bff715 	stw	r2,-36(fp)
 101ea4c:	e0bff717 	ldw	r2,-36(fp)
 101ea50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 101ea54:	00800784 	movi	r2,30
 101ea58:	e0bfff15 	stw	r2,-4(fp)
 101ea5c:	00003206 	br	101eb28 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 101ea60:	e0bffe03 	ldbu	r2,-8(fp)
 101ea64:	1080008c 	andi	r2,r2,2
 101ea68:	1005003a 	cmpeq	r2,r2,zero
 101ea6c:	1000131e 	bne	r2,zero,101eabc <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 101ea70:	e0bffb17 	ldw	r2,-20(fp)
 101ea74:	10c00417 	ldw	r3,16(r2)
 101ea78:	e0bffb17 	ldw	r2,-20(fp)
 101ea7c:	10800117 	ldw	r2,4(r2)
 101ea80:	1880041e 	bne	r3,r2,101ea94 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 101ea84:	e0bffb17 	ldw	r2,-20(fp)
 101ea88:	10c00217 	ldw	r3,8(r2)
 101ea8c:	e0bffb17 	ldw	r2,-20(fp)
 101ea90:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 101ea94:	e0bffb17 	ldw	r2,-20(fp)
 101ea98:	10800417 	ldw	r2,16(r2)
 101ea9c:	10ffff04 	addi	r3,r2,-4
 101eaa0:	e0bffb17 	ldw	r2,-20(fp)
 101eaa4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 101eaa8:	e0bffb17 	ldw	r2,-20(fp)
 101eaac:	10c00417 	ldw	r3,16(r2)
 101eab0:	e0bffd17 	ldw	r2,-12(fp)
 101eab4:	18800015 	stw	r2,0(r3)
 101eab8:	00001006 	br	101eafc <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 101eabc:	e0bffb17 	ldw	r2,-20(fp)
 101eac0:	10c00317 	ldw	r3,12(r2)
 101eac4:	e0bffd17 	ldw	r2,-12(fp)
 101eac8:	18800015 	stw	r2,0(r3)
 101eacc:	18c00104 	addi	r3,r3,4
 101ead0:	e0bffb17 	ldw	r2,-20(fp)
 101ead4:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 101ead8:	e0bffb17 	ldw	r2,-20(fp)
 101eadc:	10c00317 	ldw	r3,12(r2)
 101eae0:	e0bffb17 	ldw	r2,-20(fp)
 101eae4:	10800217 	ldw	r2,8(r2)
 101eae8:	1880041e 	bne	r3,r2,101eafc <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 101eaec:	e0bffb17 	ldw	r2,-20(fp)
 101eaf0:	10c00117 	ldw	r3,4(r2)
 101eaf4:	e0bffb17 	ldw	r2,-20(fp)
 101eaf8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 101eafc:	e0bffb17 	ldw	r2,-20(fp)
 101eb00:	1080058b 	ldhu	r2,22(r2)
 101eb04:	10800044 	addi	r2,r2,1
 101eb08:	1007883a 	mov	r3,r2
 101eb0c:	e0bffb17 	ldw	r2,-20(fp)
 101eb10:	10c0058d 	sth	r3,22(r2)
 101eb14:	e0bffa17 	ldw	r2,-24(fp)
 101eb18:	e0bff615 	stw	r2,-40(fp)
 101eb1c:	e0bff617 	ldw	r2,-40(fp)
 101eb20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101eb24:	e03fff15 	stw	zero,-4(fp)
 101eb28:	e0bfff17 	ldw	r2,-4(fp)
}
 101eb2c:	e037883a 	mov	sp,fp
 101eb30:	dfc00117 	ldw	ra,4(sp)
 101eb34:	df000017 	ldw	fp,0(sp)
 101eb38:	dec00204 	addi	sp,sp,8
 101eb3c:	f800283a 	ret

0101eb40 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 101eb40:	defff504 	addi	sp,sp,-44
 101eb44:	df000a15 	stw	fp,40(sp)
 101eb48:	df000a04 	addi	fp,sp,40
 101eb4c:	e13ffd15 	stw	r4,-12(fp)
 101eb50:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 101eb54:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 101eb58:	e0bffd17 	ldw	r2,-12(fp)
 101eb5c:	1004c03a 	cmpne	r2,r2,zero
 101eb60:	1000031e 	bne	r2,zero,101eb70 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 101eb64:	00800104 	movi	r2,4
 101eb68:	e0bfff15 	stw	r2,-4(fp)
 101eb6c:	00004f06 	br	101ecac <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 101eb70:	e0bffe17 	ldw	r2,-8(fp)
 101eb74:	1004c03a 	cmpne	r2,r2,zero
 101eb78:	1000031e 	bne	r2,zero,101eb88 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 101eb7c:	00800244 	movi	r2,9
 101eb80:	e0bfff15 	stw	r2,-4(fp)
 101eb84:	00004906 	br	101ecac <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 101eb88:	e0bffd17 	ldw	r2,-12(fp)
 101eb8c:	10800003 	ldbu	r2,0(r2)
 101eb90:	10803fcc 	andi	r2,r2,255
 101eb94:	108000a0 	cmpeqi	r2,r2,2
 101eb98:	1000031e 	bne	r2,zero,101eba8 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 101eb9c:	00800044 	movi	r2,1
 101eba0:	e0bfff15 	stw	r2,-4(fp)
 101eba4:	00004106 	br	101ecac <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101eba8:	0005303a 	rdctl	r2,status
 101ebac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ebb0:	e0fff717 	ldw	r3,-36(fp)
 101ebb4:	00bfff84 	movi	r2,-2
 101ebb8:	1884703a 	and	r2,r3,r2
 101ebbc:	1001703a 	wrctl	status,r2
  
  return context;
 101ebc0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 101ebc4:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 101ebc8:	e0bffd17 	ldw	r2,-12(fp)
 101ebcc:	10c00283 	ldbu	r3,10(r2)
 101ebd0:	e0bffe17 	ldw	r2,-8(fp)
 101ebd4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 101ebd8:	e0bffd17 	ldw	r2,-12(fp)
 101ebdc:	108002c4 	addi	r2,r2,11
 101ebe0:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 101ebe4:	e0bffe17 	ldw	r2,-8(fp)
 101ebe8:	10800204 	addi	r2,r2,8
 101ebec:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101ebf0:	e03ffb05 	stb	zero,-20(fp)
 101ebf4:	00000d06 	br	101ec2c <OSQQuery+0xec>
        *pdest++ = *psrc++;
 101ebf8:	e0bffa17 	ldw	r2,-24(fp)
 101ebfc:	10c00003 	ldbu	r3,0(r2)
 101ec00:	e0bff917 	ldw	r2,-28(fp)
 101ec04:	10c00005 	stb	r3,0(r2)
 101ec08:	e0bff917 	ldw	r2,-28(fp)
 101ec0c:	10800044 	addi	r2,r2,1
 101ec10:	e0bff915 	stw	r2,-28(fp)
 101ec14:	e0bffa17 	ldw	r2,-24(fp)
 101ec18:	10800044 	addi	r2,r2,1
 101ec1c:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101ec20:	e0bffb03 	ldbu	r2,-20(fp)
 101ec24:	10800044 	addi	r2,r2,1
 101ec28:	e0bffb05 	stb	r2,-20(fp)
 101ec2c:	e0bffb03 	ldbu	r2,-20(fp)
 101ec30:	108000f0 	cmpltui	r2,r2,3
 101ec34:	103ff01e 	bne	r2,zero,101ebf8 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 101ec38:	e0bffd17 	ldw	r2,-12(fp)
 101ec3c:	10800117 	ldw	r2,4(r2)
 101ec40:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 101ec44:	e0bffc17 	ldw	r2,-16(fp)
 101ec48:	1080058b 	ldhu	r2,22(r2)
 101ec4c:	10bfffcc 	andi	r2,r2,65535
 101ec50:	1005003a 	cmpeq	r2,r2,zero
 101ec54:	1000061e 	bne	r2,zero,101ec70 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 101ec58:	e0bffc17 	ldw	r2,-16(fp)
 101ec5c:	10800417 	ldw	r2,16(r2)
 101ec60:	10c00017 	ldw	r3,0(r2)
 101ec64:	e0bffe17 	ldw	r2,-8(fp)
 101ec68:	10c00015 	stw	r3,0(r2)
 101ec6c:	00000206 	br	101ec78 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 101ec70:	e0bffe17 	ldw	r2,-8(fp)
 101ec74:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 101ec78:	e0bffc17 	ldw	r2,-16(fp)
 101ec7c:	10c0058b 	ldhu	r3,22(r2)
 101ec80:	e0bffe17 	ldw	r2,-8(fp)
 101ec84:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 101ec88:	e0bffc17 	ldw	r2,-16(fp)
 101ec8c:	10c0050b 	ldhu	r3,20(r2)
 101ec90:	e0bffe17 	ldw	r2,-8(fp)
 101ec94:	10c0018d 	sth	r3,6(r2)
 101ec98:	e0bff817 	ldw	r2,-32(fp)
 101ec9c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101eca0:	e0bff617 	ldw	r2,-40(fp)
 101eca4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101eca8:	e03fff15 	stw	zero,-4(fp)
 101ecac:	e0bfff17 	ldw	r2,-4(fp)
}
 101ecb0:	e037883a 	mov	sp,fp
 101ecb4:	df000017 	ldw	fp,0(sp)
 101ecb8:	dec00104 	addi	sp,sp,4
 101ecbc:	f800283a 	ret

0101ecc0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 101ecc0:	defffb04 	addi	sp,sp,-20
 101ecc4:	dfc00415 	stw	ra,16(sp)
 101ecc8:	df000315 	stw	fp,12(sp)
 101eccc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 101ecd0:	010040f4 	movhi	r4,259
 101ecd4:	21171d04 	addi	r4,r4,23668
 101ecd8:	01407804 	movi	r5,480
 101ecdc:	101afc00 	call	101afc0 <OS_MemClr>
    pq1 = &OSQTbl[0];
 101ece0:	008040f4 	movhi	r2,259
 101ece4:	10971d04 	addi	r2,r2,23668
 101ece8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 101ecec:	008040f4 	movhi	r2,259
 101ecf0:	10972304 	addi	r2,r2,23692
 101ecf4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 101ecf8:	e03fff0d 	sth	zero,-4(fp)
 101ecfc:	00000c06 	br	101ed30 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 101ed00:	e0fffe17 	ldw	r3,-8(fp)
 101ed04:	e0bffd17 	ldw	r2,-12(fp)
 101ed08:	18800015 	stw	r2,0(r3)
        pq1++;
 101ed0c:	e0bffe17 	ldw	r2,-8(fp)
 101ed10:	10800604 	addi	r2,r2,24
 101ed14:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 101ed18:	e0bffd17 	ldw	r2,-12(fp)
 101ed1c:	10800604 	addi	r2,r2,24
 101ed20:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 101ed24:	e0bfff0b 	ldhu	r2,-4(fp)
 101ed28:	10800044 	addi	r2,r2,1
 101ed2c:	e0bfff0d 	sth	r2,-4(fp)
 101ed30:	e0bfff0b 	ldhu	r2,-4(fp)
 101ed34:	108004f0 	cmpltui	r2,r2,19
 101ed38:	103ff11e 	bne	r2,zero,101ed00 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 101ed3c:	e0bffe17 	ldw	r2,-8(fp)
 101ed40:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 101ed44:	00c040f4 	movhi	r3,259
 101ed48:	18e71b04 	addi	r3,r3,-25492
 101ed4c:	008040f4 	movhi	r2,259
 101ed50:	10971d04 	addi	r2,r2,23668
 101ed54:	18800015 	stw	r2,0(r3)
#endif
}
 101ed58:	e037883a 	mov	sp,fp
 101ed5c:	dfc00117 	ldw	ra,4(sp)
 101ed60:	df000017 	ldw	fp,0(sp)
 101ed64:	dec00204 	addi	sp,sp,8
 101ed68:	f800283a 	ret

0101ed6c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 101ed6c:	defff904 	addi	sp,sp,-28
 101ed70:	df000615 	stw	fp,24(sp)
 101ed74:	df000604 	addi	fp,sp,24
 101ed78:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101ed7c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101ed80:	e0bffe17 	ldw	r2,-8(fp)
 101ed84:	1004c03a 	cmpne	r2,r2,zero
 101ed88:	1000021e 	bne	r2,zero,101ed94 <OSSemAccept+0x28>
        return (0);
 101ed8c:	e03fff15 	stw	zero,-4(fp)
 101ed90:	00002106 	br	101ee18 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101ed94:	e0bffe17 	ldw	r2,-8(fp)
 101ed98:	10800003 	ldbu	r2,0(r2)
 101ed9c:	10803fcc 	andi	r2,r2,255
 101eda0:	108000e0 	cmpeqi	r2,r2,3
 101eda4:	1000021e 	bne	r2,zero,101edb0 <OSSemAccept+0x44>
        return (0);
 101eda8:	e03fff15 	stw	zero,-4(fp)
 101edac:	00001a06 	br	101ee18 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101edb0:	0005303a 	rdctl	r2,status
 101edb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101edb8:	e0fffb17 	ldw	r3,-20(fp)
 101edbc:	00bfff84 	movi	r2,-2
 101edc0:	1884703a 	and	r2,r3,r2
 101edc4:	1001703a 	wrctl	status,r2
  
  return context;
 101edc8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 101edcc:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 101edd0:	e0bffe17 	ldw	r2,-8(fp)
 101edd4:	1080020b 	ldhu	r2,8(r2)
 101edd8:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 101eddc:	e0bffd0b 	ldhu	r2,-12(fp)
 101ede0:	1005003a 	cmpeq	r2,r2,zero
 101ede4:	1000061e 	bne	r2,zero,101ee00 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 101ede8:	e0bffe17 	ldw	r2,-8(fp)
 101edec:	1080020b 	ldhu	r2,8(r2)
 101edf0:	10bfffc4 	addi	r2,r2,-1
 101edf4:	1007883a 	mov	r3,r2
 101edf8:	e0bffe17 	ldw	r2,-8(fp)
 101edfc:	10c0020d 	sth	r3,8(r2)
 101ee00:	e0bffc17 	ldw	r2,-16(fp)
 101ee04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ee08:	e0bffa17 	ldw	r2,-24(fp)
 101ee0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 101ee10:	e0bffd0b 	ldhu	r2,-12(fp)
 101ee14:	e0bfff15 	stw	r2,-4(fp)
 101ee18:	e0bfff17 	ldw	r2,-4(fp)
}
 101ee1c:	e037883a 	mov	sp,fp
 101ee20:	df000017 	ldw	fp,0(sp)
 101ee24:	dec00104 	addi	sp,sp,4
 101ee28:	f800283a 	ret

0101ee2c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 101ee2c:	defff804 	addi	sp,sp,-32
 101ee30:	dfc00715 	stw	ra,28(sp)
 101ee34:	df000615 	stw	fp,24(sp)
 101ee38:	df000604 	addi	fp,sp,24
 101ee3c:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101ee40:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 101ee44:	008040f4 	movhi	r2,259
 101ee48:	10a71e04 	addi	r2,r2,-25480
 101ee4c:	10800003 	ldbu	r2,0(r2)
 101ee50:	10803fcc 	andi	r2,r2,255
 101ee54:	1005003a 	cmpeq	r2,r2,zero
 101ee58:	1000021e 	bne	r2,zero,101ee64 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 101ee5c:	e03fff15 	stw	zero,-4(fp)
 101ee60:	00003106 	br	101ef28 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ee64:	0005303a 	rdctl	r2,status
 101ee68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ee6c:	e0fffb17 	ldw	r3,-20(fp)
 101ee70:	00bfff84 	movi	r2,-2
 101ee74:	1884703a 	and	r2,r3,r2
 101ee78:	1001703a 	wrctl	status,r2
  
  return context;
 101ee7c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 101ee80:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 101ee84:	008040f4 	movhi	r2,259
 101ee88:	10a71d04 	addi	r2,r2,-25484
 101ee8c:	10800017 	ldw	r2,0(r2)
 101ee90:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 101ee94:	008040f4 	movhi	r2,259
 101ee98:	10a71d04 	addi	r2,r2,-25484
 101ee9c:	10800017 	ldw	r2,0(r2)
 101eea0:	1005003a 	cmpeq	r2,r2,zero
 101eea4:	1000081e 	bne	r2,zero,101eec8 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 101eea8:	008040f4 	movhi	r2,259
 101eeac:	10a71d04 	addi	r2,r2,-25484
 101eeb0:	10800017 	ldw	r2,0(r2)
 101eeb4:	10800117 	ldw	r2,4(r2)
 101eeb8:	1007883a 	mov	r3,r2
 101eebc:	008040f4 	movhi	r2,259
 101eec0:	10a71d04 	addi	r2,r2,-25484
 101eec4:	10c00015 	stw	r3,0(r2)
 101eec8:	e0bffc17 	ldw	r2,-16(fp)
 101eecc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101eed0:	e0bffa17 	ldw	r2,-24(fp)
 101eed4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 101eed8:	e0bffd17 	ldw	r2,-12(fp)
 101eedc:	1005003a 	cmpeq	r2,r2,zero
 101eee0:	10000f1e 	bne	r2,zero,101ef20 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 101eee4:	e0fffd17 	ldw	r3,-12(fp)
 101eee8:	008000c4 	movi	r2,3
 101eeec:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 101eef0:	e0fffd17 	ldw	r3,-12(fp)
 101eef4:	e0bffe0b 	ldhu	r2,-8(fp)
 101eef8:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 101eefc:	e0bffd17 	ldw	r2,-12(fp)
 101ef00:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 101ef04:	e0fffd17 	ldw	r3,-12(fp)
 101ef08:	00800fc4 	movi	r2,63
 101ef0c:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 101ef10:	e0bffd17 	ldw	r2,-12(fp)
 101ef14:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 101ef18:	e13ffd17 	ldw	r4,-12(fp)
 101ef1c:	101abf40 	call	101abf4 <OS_EventWaitListInit>
    }
    return (pevent);
 101ef20:	e0bffd17 	ldw	r2,-12(fp)
 101ef24:	e0bfff15 	stw	r2,-4(fp)
 101ef28:	e0bfff17 	ldw	r2,-4(fp)
}
 101ef2c:	e037883a 	mov	sp,fp
 101ef30:	dfc00117 	ldw	ra,4(sp)
 101ef34:	df000017 	ldw	fp,0(sp)
 101ef38:	dec00204 	addi	sp,sp,8
 101ef3c:	f800283a 	ret

0101ef40 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 101ef40:	defff104 	addi	sp,sp,-60
 101ef44:	dfc00e15 	stw	ra,56(sp)
 101ef48:	df000d15 	stw	fp,52(sp)
 101ef4c:	df000d04 	addi	fp,sp,52
 101ef50:	e13ffb15 	stw	r4,-20(fp)
 101ef54:	e1bffd15 	stw	r6,-12(fp)
 101ef58:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101ef5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 101ef60:	e0bffd17 	ldw	r2,-12(fp)
 101ef64:	1004c03a 	cmpne	r2,r2,zero
 101ef68:	1000031e 	bne	r2,zero,101ef78 <OSSemDel+0x38>
        return (pevent);
 101ef6c:	e0bffb17 	ldw	r2,-20(fp)
 101ef70:	e0bfff15 	stw	r2,-4(fp)
 101ef74:	00009406 	br	101f1c8 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 101ef78:	e0bffb17 	ldw	r2,-20(fp)
 101ef7c:	1004c03a 	cmpne	r2,r2,zero
 101ef80:	1000061e 	bne	r2,zero,101ef9c <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 101ef84:	e0fffd17 	ldw	r3,-12(fp)
 101ef88:	00800104 	movi	r2,4
 101ef8c:	18800005 	stb	r2,0(r3)
        return (pevent);
 101ef90:	e0fffb17 	ldw	r3,-20(fp)
 101ef94:	e0ffff15 	stw	r3,-4(fp)
 101ef98:	00008b06 	br	101f1c8 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 101ef9c:	e0bffb17 	ldw	r2,-20(fp)
 101efa0:	10800003 	ldbu	r2,0(r2)
 101efa4:	10803fcc 	andi	r2,r2,255
 101efa8:	108000e0 	cmpeqi	r2,r2,3
 101efac:	1000061e 	bne	r2,zero,101efc8 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 101efb0:	e0fffd17 	ldw	r3,-12(fp)
 101efb4:	00800044 	movi	r2,1
 101efb8:	18800005 	stb	r2,0(r3)
        return (pevent);
 101efbc:	e0bffb17 	ldw	r2,-20(fp)
 101efc0:	e0bfff15 	stw	r2,-4(fp)
 101efc4:	00008006 	br	101f1c8 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 101efc8:	008040f4 	movhi	r2,259
 101efcc:	10a71e04 	addi	r2,r2,-25480
 101efd0:	10800003 	ldbu	r2,0(r2)
 101efd4:	10803fcc 	andi	r2,r2,255
 101efd8:	1005003a 	cmpeq	r2,r2,zero
 101efdc:	1000061e 	bne	r2,zero,101eff8 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 101efe0:	e0fffd17 	ldw	r3,-12(fp)
 101efe4:	008003c4 	movi	r2,15
 101efe8:	18800005 	stb	r2,0(r3)
        return (pevent);
 101efec:	e0fffb17 	ldw	r3,-20(fp)
 101eff0:	e0ffff15 	stw	r3,-4(fp)
 101eff4:	00007406 	br	101f1c8 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101eff8:	0005303a 	rdctl	r2,status
 101effc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f000:	e0fff717 	ldw	r3,-36(fp)
 101f004:	00bfff84 	movi	r2,-2
 101f008:	1884703a 	and	r2,r3,r2
 101f00c:	1001703a 	wrctl	status,r2
  
  return context;
 101f010:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 101f014:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 101f018:	e0bffb17 	ldw	r2,-20(fp)
 101f01c:	10800283 	ldbu	r2,10(r2)
 101f020:	10803fcc 	andi	r2,r2,255
 101f024:	1005003a 	cmpeq	r2,r2,zero
 101f028:	1000031e 	bne	r2,zero,101f038 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 101f02c:	00800044 	movi	r2,1
 101f030:	e0bffa05 	stb	r2,-24(fp)
 101f034:	00000106 	br	101f03c <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 101f038:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 101f03c:	e0bffc03 	ldbu	r2,-16(fp)
 101f040:	e0bffe15 	stw	r2,-8(fp)
 101f044:	e0fffe17 	ldw	r3,-8(fp)
 101f048:	1805003a 	cmpeq	r2,r3,zero
 101f04c:	1000041e 	bne	r2,zero,101f060 <OSSemDel+0x120>
 101f050:	e0fffe17 	ldw	r3,-8(fp)
 101f054:	18800060 	cmpeqi	r2,r3,1
 101f058:	10002d1e 	bne	r2,zero,101f110 <OSSemDel+0x1d0>
 101f05c:	00004f06 	br	101f19c <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 101f060:	e0bffa03 	ldbu	r2,-24(fp)
 101f064:	1004c03a 	cmpne	r2,r2,zero
 101f068:	10001a1e 	bne	r2,zero,101f0d4 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 101f06c:	e0fffb17 	ldw	r3,-20(fp)
 101f070:	00800fc4 	movi	r2,63
 101f074:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 101f078:	e0bffb17 	ldw	r2,-20(fp)
 101f07c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 101f080:	e0bffb17 	ldw	r2,-20(fp)
 101f084:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 101f088:	008040f4 	movhi	r2,259
 101f08c:	10a71d04 	addi	r2,r2,-25484
 101f090:	10c00017 	ldw	r3,0(r2)
 101f094:	e0bffb17 	ldw	r2,-20(fp)
 101f098:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 101f09c:	e0bffb17 	ldw	r2,-20(fp)
 101f0a0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 101f0a4:	00c040f4 	movhi	r3,259
 101f0a8:	18e71d04 	addi	r3,r3,-25484
 101f0ac:	e0bffb17 	ldw	r2,-20(fp)
 101f0b0:	18800015 	stw	r2,0(r3)
 101f0b4:	e0bff817 	ldw	r2,-32(fp)
 101f0b8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f0bc:	e0bff617 	ldw	r2,-40(fp)
 101f0c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 101f0c4:	e0bffd17 	ldw	r2,-12(fp)
 101f0c8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 101f0cc:	e03ff915 	stw	zero,-28(fp)
 101f0d0:	00003b06 	br	101f1c0 <OSSemDel+0x280>
 101f0d4:	e0bff817 	ldw	r2,-32(fp)
 101f0d8:	e0bff515 	stw	r2,-44(fp)
 101f0dc:	e0bff517 	ldw	r2,-44(fp)
 101f0e0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 101f0e4:	e0fffd17 	ldw	r3,-12(fp)
 101f0e8:	00801244 	movi	r2,73
 101f0ec:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 101f0f0:	e0bffb17 	ldw	r2,-20(fp)
 101f0f4:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 101f0f8:	00003106 	br	101f1c0 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 101f0fc:	e13ffb17 	ldw	r4,-20(fp)
 101f100:	000b883a 	mov	r5,zero
 101f104:	01800044 	movi	r6,1
 101f108:	000f883a 	mov	r7,zero
 101f10c:	101a6400 	call	101a640 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 101f110:	e0bffb17 	ldw	r2,-20(fp)
 101f114:	10800283 	ldbu	r2,10(r2)
 101f118:	10803fcc 	andi	r2,r2,255
 101f11c:	1004c03a 	cmpne	r2,r2,zero
 101f120:	103ff61e 	bne	r2,zero,101f0fc <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 101f124:	e0fffb17 	ldw	r3,-20(fp)
 101f128:	00800fc4 	movi	r2,63
 101f12c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 101f130:	e0bffb17 	ldw	r2,-20(fp)
 101f134:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 101f138:	e0bffb17 	ldw	r2,-20(fp)
 101f13c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 101f140:	008040f4 	movhi	r2,259
 101f144:	10a71d04 	addi	r2,r2,-25484
 101f148:	10c00017 	ldw	r3,0(r2)
 101f14c:	e0bffb17 	ldw	r2,-20(fp)
 101f150:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 101f154:	e0bffb17 	ldw	r2,-20(fp)
 101f158:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 101f15c:	00c040f4 	movhi	r3,259
 101f160:	18e71d04 	addi	r3,r3,-25484
 101f164:	e0bffb17 	ldw	r2,-20(fp)
 101f168:	18800015 	stw	r2,0(r3)
 101f16c:	e0bff817 	ldw	r2,-32(fp)
 101f170:	e0bff415 	stw	r2,-48(fp)
 101f174:	e0bff417 	ldw	r2,-48(fp)
 101f178:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 101f17c:	e0bffa03 	ldbu	r2,-24(fp)
 101f180:	10800058 	cmpnei	r2,r2,1
 101f184:	1000011e 	bne	r2,zero,101f18c <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 101f188:	101b0800 	call	101b080 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 101f18c:	e0bffd17 	ldw	r2,-12(fp)
 101f190:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 101f194:	e03ff915 	stw	zero,-28(fp)
             break;
 101f198:	00000906 	br	101f1c0 <OSSemDel+0x280>
 101f19c:	e0bff817 	ldw	r2,-32(fp)
 101f1a0:	e0bff315 	stw	r2,-52(fp)
 101f1a4:	e0bff317 	ldw	r2,-52(fp)
 101f1a8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 101f1ac:	e0fffd17 	ldw	r3,-12(fp)
 101f1b0:	008001c4 	movi	r2,7
 101f1b4:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 101f1b8:	e0bffb17 	ldw	r2,-20(fp)
 101f1bc:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 101f1c0:	e0bff917 	ldw	r2,-28(fp)
 101f1c4:	e0bfff15 	stw	r2,-4(fp)
 101f1c8:	e0bfff17 	ldw	r2,-4(fp)
}
 101f1cc:	e037883a 	mov	sp,fp
 101f1d0:	dfc00117 	ldw	ra,4(sp)
 101f1d4:	df000017 	ldw	fp,0(sp)
 101f1d8:	dec00204 	addi	sp,sp,8
 101f1dc:	f800283a 	ret

0101f1e0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 101f1e0:	defff404 	addi	sp,sp,-48
 101f1e4:	dfc00b15 	stw	ra,44(sp)
 101f1e8:	df000a15 	stw	fp,40(sp)
 101f1ec:	df000a04 	addi	fp,sp,40
 101f1f0:	e13ffc15 	stw	r4,-16(fp)
 101f1f4:	e1bffe15 	stw	r6,-8(fp)
 101f1f8:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101f1fc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 101f200:	e0bffe17 	ldw	r2,-8(fp)
 101f204:	1005003a 	cmpeq	r2,r2,zero
 101f208:	10008f1e 	bne	r2,zero,101f448 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101f20c:	e0bffc17 	ldw	r2,-16(fp)
 101f210:	1004c03a 	cmpne	r2,r2,zero
 101f214:	1000041e 	bne	r2,zero,101f228 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 101f218:	e0fffe17 	ldw	r3,-8(fp)
 101f21c:	00800104 	movi	r2,4
 101f220:	18800005 	stb	r2,0(r3)
        return;
 101f224:	00008806 	br	101f448 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101f228:	e0bffc17 	ldw	r2,-16(fp)
 101f22c:	10800003 	ldbu	r2,0(r2)
 101f230:	10803fcc 	andi	r2,r2,255
 101f234:	108000e0 	cmpeqi	r2,r2,3
 101f238:	1000041e 	bne	r2,zero,101f24c <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 101f23c:	e0fffe17 	ldw	r3,-8(fp)
 101f240:	00800044 	movi	r2,1
 101f244:	18800005 	stb	r2,0(r3)
        return;
 101f248:	00007f06 	br	101f448 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 101f24c:	008040f4 	movhi	r2,259
 101f250:	10a71e04 	addi	r2,r2,-25480
 101f254:	10800003 	ldbu	r2,0(r2)
 101f258:	10803fcc 	andi	r2,r2,255
 101f25c:	1005003a 	cmpeq	r2,r2,zero
 101f260:	1000041e 	bne	r2,zero,101f274 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 101f264:	e0fffe17 	ldw	r3,-8(fp)
 101f268:	00800084 	movi	r2,2
 101f26c:	18800005 	stb	r2,0(r3)
        return;
 101f270:	00007506 	br	101f448 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 101f274:	008040f4 	movhi	r2,259
 101f278:	10a71004 	addi	r2,r2,-25536
 101f27c:	10800003 	ldbu	r2,0(r2)
 101f280:	10803fcc 	andi	r2,r2,255
 101f284:	1005003a 	cmpeq	r2,r2,zero
 101f288:	1000041e 	bne	r2,zero,101f29c <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 101f28c:	e0fffe17 	ldw	r3,-8(fp)
 101f290:	00800344 	movi	r2,13
 101f294:	18800005 	stb	r2,0(r3)
        return;
 101f298:	00006b06 	br	101f448 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f29c:	0005303a 	rdctl	r2,status
 101f2a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f2a4:	e0fffa17 	ldw	r3,-24(fp)
 101f2a8:	00bfff84 	movi	r2,-2
 101f2ac:	1884703a 	and	r2,r3,r2
 101f2b0:	1001703a 	wrctl	status,r2
  
  return context;
 101f2b4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 101f2b8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 101f2bc:	e0bffc17 	ldw	r2,-16(fp)
 101f2c0:	1080020b 	ldhu	r2,8(r2)
 101f2c4:	10bfffcc 	andi	r2,r2,65535
 101f2c8:	1005003a 	cmpeq	r2,r2,zero
 101f2cc:	10000d1e 	bne	r2,zero,101f304 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 101f2d0:	e0bffc17 	ldw	r2,-16(fp)
 101f2d4:	1080020b 	ldhu	r2,8(r2)
 101f2d8:	10bfffc4 	addi	r2,r2,-1
 101f2dc:	1007883a 	mov	r3,r2
 101f2e0:	e0bffc17 	ldw	r2,-16(fp)
 101f2e4:	10c0020d 	sth	r3,8(r2)
 101f2e8:	e0bffb17 	ldw	r2,-20(fp)
 101f2ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f2f0:	e0bff917 	ldw	r2,-28(fp)
 101f2f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 101f2f8:	e0bffe17 	ldw	r2,-8(fp)
 101f2fc:	10000005 	stb	zero,0(r2)
        return;
 101f300:	00005106 	br	101f448 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 101f304:	008040f4 	movhi	r2,259
 101f308:	10a71f04 	addi	r2,r2,-25476
 101f30c:	10c00017 	ldw	r3,0(r2)
 101f310:	008040f4 	movhi	r2,259
 101f314:	10a71f04 	addi	r2,r2,-25476
 101f318:	10800017 	ldw	r2,0(r2)
 101f31c:	10800c03 	ldbu	r2,48(r2)
 101f320:	10800054 	ori	r2,r2,1
 101f324:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 101f328:	008040f4 	movhi	r2,259
 101f32c:	10a71f04 	addi	r2,r2,-25476
 101f330:	10800017 	ldw	r2,0(r2)
 101f334:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 101f338:	008040f4 	movhi	r2,259
 101f33c:	10a71f04 	addi	r2,r2,-25476
 101f340:	10c00017 	ldw	r3,0(r2)
 101f344:	e0bffd0b 	ldhu	r2,-12(fp)
 101f348:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 101f34c:	e13ffc17 	ldw	r4,-16(fp)
 101f350:	101a7d40 	call	101a7d4 <OS_EventTaskWait>
 101f354:	e0bffb17 	ldw	r2,-20(fp)
 101f358:	e0bff815 	stw	r2,-32(fp)
 101f35c:	e0bff817 	ldw	r2,-32(fp)
 101f360:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 101f364:	101b0800 	call	101b080 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f368:	0005303a 	rdctl	r2,status
 101f36c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f370:	e0fff717 	ldw	r3,-36(fp)
 101f374:	00bfff84 	movi	r2,-2
 101f378:	1884703a 	and	r2,r3,r2
 101f37c:	1001703a 	wrctl	status,r2
  
  return context;
 101f380:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 101f384:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 101f388:	008040f4 	movhi	r2,259
 101f38c:	10a71f04 	addi	r2,r2,-25476
 101f390:	10800017 	ldw	r2,0(r2)
 101f394:	10800c43 	ldbu	r2,49(r2)
 101f398:	10803fcc 	andi	r2,r2,255
 101f39c:	e0bfff15 	stw	r2,-4(fp)
 101f3a0:	e0ffff17 	ldw	r3,-4(fp)
 101f3a4:	1805003a 	cmpeq	r2,r3,zero
 101f3a8:	1000041e 	bne	r2,zero,101f3bc <OSSemPend+0x1dc>
 101f3ac:	e0ffff17 	ldw	r3,-4(fp)
 101f3b0:	188000a0 	cmpeqi	r2,r3,2
 101f3b4:	1000041e 	bne	r2,zero,101f3c8 <OSSemPend+0x1e8>
 101f3b8:	00000706 	br	101f3d8 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 101f3bc:	e0bffe17 	ldw	r2,-8(fp)
 101f3c0:	10000005 	stb	zero,0(r2)
             break;
 101f3c4:	00000c06 	br	101f3f8 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 101f3c8:	e0fffe17 	ldw	r3,-8(fp)
 101f3cc:	00800384 	movi	r2,14
 101f3d0:	18800005 	stb	r2,0(r3)
             break;
 101f3d4:	00000806 	br	101f3f8 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 101f3d8:	008040f4 	movhi	r2,259
 101f3dc:	10a71f04 	addi	r2,r2,-25476
 101f3e0:	11000017 	ldw	r4,0(r2)
 101f3e4:	e17ffc17 	ldw	r5,-16(fp)
 101f3e8:	101aa380 	call	101aa38 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 101f3ec:	e0fffe17 	ldw	r3,-8(fp)
 101f3f0:	00800284 	movi	r2,10
 101f3f4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 101f3f8:	008040f4 	movhi	r2,259
 101f3fc:	10a71f04 	addi	r2,r2,-25476
 101f400:	10800017 	ldw	r2,0(r2)
 101f404:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 101f408:	008040f4 	movhi	r2,259
 101f40c:	10a71f04 	addi	r2,r2,-25476
 101f410:	10800017 	ldw	r2,0(r2)
 101f414:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 101f418:	008040f4 	movhi	r2,259
 101f41c:	10a71f04 	addi	r2,r2,-25476
 101f420:	10800017 	ldw	r2,0(r2)
 101f424:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 101f428:	008040f4 	movhi	r2,259
 101f42c:	10a71f04 	addi	r2,r2,-25476
 101f430:	10800017 	ldw	r2,0(r2)
 101f434:	10000815 	stw	zero,32(r2)
 101f438:	e0bffb17 	ldw	r2,-20(fp)
 101f43c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f440:	e0bff617 	ldw	r2,-40(fp)
 101f444:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 101f448:	e037883a 	mov	sp,fp
 101f44c:	dfc00117 	ldw	ra,4(sp)
 101f450:	df000017 	ldw	fp,0(sp)
 101f454:	dec00204 	addi	sp,sp,8
 101f458:	f800283a 	ret

0101f45c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 101f45c:	defff504 	addi	sp,sp,-44
 101f460:	dfc00a15 	stw	ra,40(sp)
 101f464:	df000915 	stw	fp,36(sp)
 101f468:	df000904 	addi	fp,sp,36
 101f46c:	e13ffc15 	stw	r4,-16(fp)
 101f470:	e1bffe15 	stw	r6,-8(fp)
 101f474:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101f478:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 101f47c:	e0bffe17 	ldw	r2,-8(fp)
 101f480:	1004c03a 	cmpne	r2,r2,zero
 101f484:	1000021e 	bne	r2,zero,101f490 <OSSemPendAbort+0x34>
        return (0);
 101f488:	e03fff15 	stw	zero,-4(fp)
 101f48c:	00004c06 	br	101f5c0 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101f490:	e0bffc17 	ldw	r2,-16(fp)
 101f494:	1004c03a 	cmpne	r2,r2,zero
 101f498:	1000051e 	bne	r2,zero,101f4b0 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 101f49c:	e0fffe17 	ldw	r3,-8(fp)
 101f4a0:	00800104 	movi	r2,4
 101f4a4:	18800005 	stb	r2,0(r3)
        return (0);
 101f4a8:	e03fff15 	stw	zero,-4(fp)
 101f4ac:	00004406 	br	101f5c0 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101f4b0:	e0bffc17 	ldw	r2,-16(fp)
 101f4b4:	10800003 	ldbu	r2,0(r2)
 101f4b8:	10803fcc 	andi	r2,r2,255
 101f4bc:	108000e0 	cmpeqi	r2,r2,3
 101f4c0:	1000051e 	bne	r2,zero,101f4d8 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 101f4c4:	e0fffe17 	ldw	r3,-8(fp)
 101f4c8:	00800044 	movi	r2,1
 101f4cc:	18800005 	stb	r2,0(r3)
        return (0);
 101f4d0:	e03fff15 	stw	zero,-4(fp)
 101f4d4:	00003a06 	br	101f5c0 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f4d8:	0005303a 	rdctl	r2,status
 101f4dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f4e0:	e0fff917 	ldw	r3,-28(fp)
 101f4e4:	00bfff84 	movi	r2,-2
 101f4e8:	1884703a 	and	r2,r3,r2
 101f4ec:	1001703a 	wrctl	status,r2
  
  return context;
 101f4f0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 101f4f4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 101f4f8:	e0bffc17 	ldw	r2,-16(fp)
 101f4fc:	10800283 	ldbu	r2,10(r2)
 101f500:	10803fcc 	andi	r2,r2,255
 101f504:	1005003a 	cmpeq	r2,r2,zero
 101f508:	1000261e 	bne	r2,zero,101f5a4 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 101f50c:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 101f510:	e0bffd03 	ldbu	r2,-12(fp)
 101f514:	10800060 	cmpeqi	r2,r2,1
 101f518:	1000091e 	bne	r2,zero,101f540 <OSSemPendAbort+0xe4>
 101f51c:	00000e06 	br	101f558 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 101f520:	e13ffc17 	ldw	r4,-16(fp)
 101f524:	000b883a 	mov	r5,zero
 101f528:	01800044 	movi	r6,1
 101f52c:	01c00084 	movi	r7,2
 101f530:	101a6400 	call	101a640 <OS_EventTaskRdy>
                     nbr_tasks++;
 101f534:	e0bffb03 	ldbu	r2,-20(fp)
 101f538:	10800044 	addi	r2,r2,1
 101f53c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 101f540:	e0bffc17 	ldw	r2,-16(fp)
 101f544:	10800283 	ldbu	r2,10(r2)
 101f548:	10803fcc 	andi	r2,r2,255
 101f54c:	1004c03a 	cmpne	r2,r2,zero
 101f550:	103ff31e 	bne	r2,zero,101f520 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 101f554:	00000806 	br	101f578 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 101f558:	e13ffc17 	ldw	r4,-16(fp)
 101f55c:	000b883a 	mov	r5,zero
 101f560:	01800044 	movi	r6,1
 101f564:	01c00084 	movi	r7,2
 101f568:	101a6400 	call	101a640 <OS_EventTaskRdy>
                 nbr_tasks++;
 101f56c:	e0bffb03 	ldbu	r2,-20(fp)
 101f570:	10800044 	addi	r2,r2,1
 101f574:	e0bffb05 	stb	r2,-20(fp)
 101f578:	e0bffa17 	ldw	r2,-24(fp)
 101f57c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f580:	e0bff817 	ldw	r2,-32(fp)
 101f584:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 101f588:	101b0800 	call	101b080 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 101f58c:	e0fffe17 	ldw	r3,-8(fp)
 101f590:	00800384 	movi	r2,14
 101f594:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 101f598:	e0bffb03 	ldbu	r2,-20(fp)
 101f59c:	e0bfff15 	stw	r2,-4(fp)
 101f5a0:	00000706 	br	101f5c0 <OSSemPendAbort+0x164>
 101f5a4:	e0bffa17 	ldw	r2,-24(fp)
 101f5a8:	e0bff715 	stw	r2,-36(fp)
 101f5ac:	e0bff717 	ldw	r2,-36(fp)
 101f5b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101f5b4:	e0bffe17 	ldw	r2,-8(fp)
 101f5b8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 101f5bc:	e03fff15 	stw	zero,-4(fp)
 101f5c0:	e0bfff17 	ldw	r2,-4(fp)
}
 101f5c4:	e037883a 	mov	sp,fp
 101f5c8:	dfc00117 	ldw	ra,4(sp)
 101f5cc:	df000017 	ldw	fp,0(sp)
 101f5d0:	dec00204 	addi	sp,sp,8
 101f5d4:	f800283a 	ret

0101f5d8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 101f5d8:	defff704 	addi	sp,sp,-36
 101f5dc:	dfc00815 	stw	ra,32(sp)
 101f5e0:	df000715 	stw	fp,28(sp)
 101f5e4:	df000704 	addi	fp,sp,28
 101f5e8:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101f5ec:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101f5f0:	e0bffe17 	ldw	r2,-8(fp)
 101f5f4:	1004c03a 	cmpne	r2,r2,zero
 101f5f8:	1000031e 	bne	r2,zero,101f608 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 101f5fc:	00800104 	movi	r2,4
 101f600:	e0bfff15 	stw	r2,-4(fp)
 101f604:	00003806 	br	101f6e8 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101f608:	e0bffe17 	ldw	r2,-8(fp)
 101f60c:	10800003 	ldbu	r2,0(r2)
 101f610:	10803fcc 	andi	r2,r2,255
 101f614:	108000e0 	cmpeqi	r2,r2,3
 101f618:	1000031e 	bne	r2,zero,101f628 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 101f61c:	00800044 	movi	r2,1
 101f620:	e0bfff15 	stw	r2,-4(fp)
 101f624:	00003006 	br	101f6e8 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f628:	0005303a 	rdctl	r2,status
 101f62c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f630:	e0fffc17 	ldw	r3,-16(fp)
 101f634:	00bfff84 	movi	r2,-2
 101f638:	1884703a 	and	r2,r3,r2
 101f63c:	1001703a 	wrctl	status,r2
  
  return context;
 101f640:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 101f644:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 101f648:	e0bffe17 	ldw	r2,-8(fp)
 101f64c:	10800283 	ldbu	r2,10(r2)
 101f650:	10803fcc 	andi	r2,r2,255
 101f654:	1005003a 	cmpeq	r2,r2,zero
 101f658:	10000c1e 	bne	r2,zero,101f68c <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 101f65c:	e13ffe17 	ldw	r4,-8(fp)
 101f660:	000b883a 	mov	r5,zero
 101f664:	01800044 	movi	r6,1
 101f668:	000f883a 	mov	r7,zero
 101f66c:	101a6400 	call	101a640 <OS_EventTaskRdy>
 101f670:	e0bffd17 	ldw	r2,-12(fp)
 101f674:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f678:	e0bffb17 	ldw	r2,-20(fp)
 101f67c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 101f680:	101b0800 	call	101b080 <OS_Sched>
        return (OS_ERR_NONE);
 101f684:	e03fff15 	stw	zero,-4(fp)
 101f688:	00001706 	br	101f6e8 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 101f68c:	e0bffe17 	ldw	r2,-8(fp)
 101f690:	1080020b 	ldhu	r2,8(r2)
 101f694:	10ffffcc 	andi	r3,r2,65535
 101f698:	00bfffd4 	movui	r2,65535
 101f69c:	18800c26 	beq	r3,r2,101f6d0 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 101f6a0:	e0bffe17 	ldw	r2,-8(fp)
 101f6a4:	1080020b 	ldhu	r2,8(r2)
 101f6a8:	10800044 	addi	r2,r2,1
 101f6ac:	1007883a 	mov	r3,r2
 101f6b0:	e0bffe17 	ldw	r2,-8(fp)
 101f6b4:	10c0020d 	sth	r3,8(r2)
 101f6b8:	e0bffd17 	ldw	r2,-12(fp)
 101f6bc:	e0bffa15 	stw	r2,-24(fp)
 101f6c0:	e0bffa17 	ldw	r2,-24(fp)
 101f6c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 101f6c8:	e03fff15 	stw	zero,-4(fp)
 101f6cc:	00000606 	br	101f6e8 <OSSemPost+0x110>
 101f6d0:	e0bffd17 	ldw	r2,-12(fp)
 101f6d4:	e0bff915 	stw	r2,-28(fp)
 101f6d8:	e0bff917 	ldw	r2,-28(fp)
 101f6dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 101f6e0:	00800c84 	movi	r2,50
 101f6e4:	e0bfff15 	stw	r2,-4(fp)
 101f6e8:	e0bfff17 	ldw	r2,-4(fp)
}
 101f6ec:	e037883a 	mov	sp,fp
 101f6f0:	dfc00117 	ldw	ra,4(sp)
 101f6f4:	df000017 	ldw	fp,0(sp)
 101f6f8:	dec00204 	addi	sp,sp,8
 101f6fc:	f800283a 	ret

0101f700 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 101f700:	defff604 	addi	sp,sp,-40
 101f704:	df000915 	stw	fp,36(sp)
 101f708:	df000904 	addi	fp,sp,36
 101f70c:	e13ffd15 	stw	r4,-12(fp)
 101f710:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101f714:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 101f718:	e0bffd17 	ldw	r2,-12(fp)
 101f71c:	1004c03a 	cmpne	r2,r2,zero
 101f720:	1000031e 	bne	r2,zero,101f730 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 101f724:	00800104 	movi	r2,4
 101f728:	e0bfff15 	stw	r2,-4(fp)
 101f72c:	00003b06 	br	101f81c <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 101f730:	e0bffe17 	ldw	r2,-8(fp)
 101f734:	1004c03a 	cmpne	r2,r2,zero
 101f738:	1000031e 	bne	r2,zero,101f748 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 101f73c:	00800244 	movi	r2,9
 101f740:	e0bfff15 	stw	r2,-4(fp)
 101f744:	00003506 	br	101f81c <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 101f748:	e0bffd17 	ldw	r2,-12(fp)
 101f74c:	10800003 	ldbu	r2,0(r2)
 101f750:	10803fcc 	andi	r2,r2,255
 101f754:	108000e0 	cmpeqi	r2,r2,3
 101f758:	1000031e 	bne	r2,zero,101f768 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 101f75c:	00800044 	movi	r2,1
 101f760:	e0bfff15 	stw	r2,-4(fp)
 101f764:	00002d06 	br	101f81c <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f768:	0005303a 	rdctl	r2,status
 101f76c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f770:	e0fff817 	ldw	r3,-32(fp)
 101f774:	00bfff84 	movi	r2,-2
 101f778:	1884703a 	and	r2,r3,r2
 101f77c:	1001703a 	wrctl	status,r2
  
  return context;
 101f780:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 101f784:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 101f788:	e0bffd17 	ldw	r2,-12(fp)
 101f78c:	10c00283 	ldbu	r3,10(r2)
 101f790:	e0bffe17 	ldw	r2,-8(fp)
 101f794:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 101f798:	e0bffd17 	ldw	r2,-12(fp)
 101f79c:	108002c4 	addi	r2,r2,11
 101f7a0:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 101f7a4:	e0bffe17 	ldw	r2,-8(fp)
 101f7a8:	10800084 	addi	r2,r2,2
 101f7ac:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101f7b0:	e03ffa05 	stb	zero,-24(fp)
 101f7b4:	00000d06 	br	101f7ec <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 101f7b8:	e0bffc17 	ldw	r2,-16(fp)
 101f7bc:	10c00003 	ldbu	r3,0(r2)
 101f7c0:	e0bffb17 	ldw	r2,-20(fp)
 101f7c4:	10c00005 	stb	r3,0(r2)
 101f7c8:	e0bffb17 	ldw	r2,-20(fp)
 101f7cc:	10800044 	addi	r2,r2,1
 101f7d0:	e0bffb15 	stw	r2,-20(fp)
 101f7d4:	e0bffc17 	ldw	r2,-16(fp)
 101f7d8:	10800044 	addi	r2,r2,1
 101f7dc:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 101f7e0:	e0bffa03 	ldbu	r2,-24(fp)
 101f7e4:	10800044 	addi	r2,r2,1
 101f7e8:	e0bffa05 	stb	r2,-24(fp)
 101f7ec:	e0bffa03 	ldbu	r2,-24(fp)
 101f7f0:	108000f0 	cmpltui	r2,r2,3
 101f7f4:	103ff01e 	bne	r2,zero,101f7b8 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 101f7f8:	e0bffd17 	ldw	r2,-12(fp)
 101f7fc:	10c0020b 	ldhu	r3,8(r2)
 101f800:	e0bffe17 	ldw	r2,-8(fp)
 101f804:	10c0000d 	sth	r3,0(r2)
 101f808:	e0bff917 	ldw	r2,-28(fp)
 101f80c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f810:	e0bff717 	ldw	r2,-36(fp)
 101f814:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101f818:	e03fff15 	stw	zero,-4(fp)
 101f81c:	e0bfff17 	ldw	r2,-4(fp)
}
 101f820:	e037883a 	mov	sp,fp
 101f824:	df000017 	ldw	fp,0(sp)
 101f828:	dec00104 	addi	sp,sp,4
 101f82c:	f800283a 	ret

0101f830 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 101f830:	defff904 	addi	sp,sp,-28
 101f834:	df000615 	stw	fp,24(sp)
 101f838:	df000604 	addi	fp,sp,24
 101f83c:	e13ffd15 	stw	r4,-12(fp)
 101f840:	e1bfff15 	stw	r6,-4(fp)
 101f844:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101f848:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 101f84c:	e0bfff17 	ldw	r2,-4(fp)
 101f850:	1005003a 	cmpeq	r2,r2,zero
 101f854:	1000331e 	bne	r2,zero,101f924 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101f858:	e0bffd17 	ldw	r2,-12(fp)
 101f85c:	1004c03a 	cmpne	r2,r2,zero
 101f860:	1000041e 	bne	r2,zero,101f874 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 101f864:	e0ffff17 	ldw	r3,-4(fp)
 101f868:	00800104 	movi	r2,4
 101f86c:	18800005 	stb	r2,0(r3)
        return;
 101f870:	00002c06 	br	101f924 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 101f874:	e0bffd17 	ldw	r2,-12(fp)
 101f878:	10800003 	ldbu	r2,0(r2)
 101f87c:	10803fcc 	andi	r2,r2,255
 101f880:	108000e0 	cmpeqi	r2,r2,3
 101f884:	1000041e 	bne	r2,zero,101f898 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 101f888:	e0ffff17 	ldw	r3,-4(fp)
 101f88c:	00800044 	movi	r2,1
 101f890:	18800005 	stb	r2,0(r3)
        return;
 101f894:	00002306 	br	101f924 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f898:	0005303a 	rdctl	r2,status
 101f89c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f8a0:	e0fffb17 	ldw	r3,-20(fp)
 101f8a4:	00bfff84 	movi	r2,-2
 101f8a8:	1884703a 	and	r2,r3,r2
 101f8ac:	1001703a 	wrctl	status,r2
  
  return context;
 101f8b0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 101f8b4:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 101f8b8:	e0bfff17 	ldw	r2,-4(fp)
 101f8bc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 101f8c0:	e0bffd17 	ldw	r2,-12(fp)
 101f8c4:	1080020b 	ldhu	r2,8(r2)
 101f8c8:	10bfffcc 	andi	r2,r2,65535
 101f8cc:	1005003a 	cmpeq	r2,r2,zero
 101f8d0:	1000041e 	bne	r2,zero,101f8e4 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 101f8d4:	e0fffd17 	ldw	r3,-12(fp)
 101f8d8:	e0bffe0b 	ldhu	r2,-8(fp)
 101f8dc:	1880020d 	sth	r2,8(r3)
 101f8e0:	00000c06 	br	101f914 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 101f8e4:	e0bffd17 	ldw	r2,-12(fp)
 101f8e8:	10800283 	ldbu	r2,10(r2)
 101f8ec:	10803fcc 	andi	r2,r2,255
 101f8f0:	1004c03a 	cmpne	r2,r2,zero
 101f8f4:	1000041e 	bne	r2,zero,101f908 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 101f8f8:	e0fffd17 	ldw	r3,-12(fp)
 101f8fc:	e0bffe0b 	ldhu	r2,-8(fp)
 101f900:	1880020d 	sth	r2,8(r3)
 101f904:	00000306 	br	101f914 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 101f908:	e0ffff17 	ldw	r3,-4(fp)
 101f90c:	00801244 	movi	r2,73
 101f910:	18800005 	stb	r2,0(r3)
 101f914:	e0bffc17 	ldw	r2,-16(fp)
 101f918:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f91c:	e0bffa17 	ldw	r2,-24(fp)
 101f920:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 101f924:	e037883a 	mov	sp,fp
 101f928:	df000017 	ldw	fp,0(sp)
 101f92c:	dec00104 	addi	sp,sp,4
 101f930:	f800283a 	ret

0101f934 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 101f934:	defff004 	addi	sp,sp,-64
 101f938:	dfc00f15 	stw	ra,60(sp)
 101f93c:	df000e15 	stw	fp,56(sp)
 101f940:	df000e04 	addi	fp,sp,56
 101f944:	e13ffd05 	stb	r4,-12(fp)
 101f948:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 101f94c:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 101f950:	e0bffd03 	ldbu	r2,-12(fp)
 101f954:	10800530 	cmpltui	r2,r2,20
 101f958:	1000061e 	bne	r2,zero,101f974 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 101f95c:	e0bffd03 	ldbu	r2,-12(fp)
 101f960:	10803fe0 	cmpeqi	r2,r2,255
 101f964:	1000031e 	bne	r2,zero,101f974 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 101f968:	00800a84 	movi	r2,42
 101f96c:	e0bfff15 	stw	r2,-4(fp)
 101f970:	00014706 	br	101fe90 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 101f974:	e0bffe03 	ldbu	r2,-8(fp)
 101f978:	10800530 	cmpltui	r2,r2,20
 101f97c:	1000031e 	bne	r2,zero,101f98c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 101f980:	00800a84 	movi	r2,42
 101f984:	e0bfff15 	stw	r2,-4(fp)
 101f988:	00014106 	br	101fe90 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f98c:	0005303a 	rdctl	r2,status
 101f990:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f994:	e0fff617 	ldw	r3,-40(fp)
 101f998:	00bfff84 	movi	r2,-2
 101f99c:	1884703a 	and	r2,r3,r2
 101f9a0:	1001703a 	wrctl	status,r2
  
  return context;
 101f9a4:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101f9a8:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 101f9ac:	e0bffe03 	ldbu	r2,-8(fp)
 101f9b0:	00c040f4 	movhi	r3,259
 101f9b4:	18dda904 	addi	r3,r3,30372
 101f9b8:	1085883a 	add	r2,r2,r2
 101f9bc:	1085883a 	add	r2,r2,r2
 101f9c0:	10c5883a 	add	r2,r2,r3
 101f9c4:	10800017 	ldw	r2,0(r2)
 101f9c8:	1005003a 	cmpeq	r2,r2,zero
 101f9cc:	1000071e 	bne	r2,zero,101f9ec <OSTaskChangePrio+0xb8>
 101f9d0:	e0bff717 	ldw	r2,-36(fp)
 101f9d4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f9d8:	e0bff517 	ldw	r2,-44(fp)
 101f9dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 101f9e0:	00800a04 	movi	r2,40
 101f9e4:	e0bfff15 	stw	r2,-4(fp)
 101f9e8:	00012906 	br	101fe90 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 101f9ec:	e0bffd03 	ldbu	r2,-12(fp)
 101f9f0:	10803fd8 	cmpnei	r2,r2,255
 101f9f4:	1000051e 	bne	r2,zero,101fa0c <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 101f9f8:	008040f4 	movhi	r2,259
 101f9fc:	10a71f04 	addi	r2,r2,-25476
 101fa00:	10800017 	ldw	r2,0(r2)
 101fa04:	10800c83 	ldbu	r2,50(r2)
 101fa08:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 101fa0c:	e0bffd03 	ldbu	r2,-12(fp)
 101fa10:	00c040f4 	movhi	r3,259
 101fa14:	18dda904 	addi	r3,r3,30372
 101fa18:	1085883a 	add	r2,r2,r2
 101fa1c:	1085883a 	add	r2,r2,r2
 101fa20:	10c5883a 	add	r2,r2,r3
 101fa24:	10800017 	ldw	r2,0(r2)
 101fa28:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 101fa2c:	e0bffa17 	ldw	r2,-24(fp)
 101fa30:	1004c03a 	cmpne	r2,r2,zero
 101fa34:	1000071e 	bne	r2,zero,101fa54 <OSTaskChangePrio+0x120>
 101fa38:	e0bff717 	ldw	r2,-36(fp)
 101fa3c:	e0bff415 	stw	r2,-48(fp)
 101fa40:	e0bff417 	ldw	r2,-48(fp)
 101fa44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 101fa48:	00800a44 	movi	r2,41
 101fa4c:	e0bfff15 	stw	r2,-4(fp)
 101fa50:	00010f06 	br	101fe90 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 101fa54:	e0bffa17 	ldw	r2,-24(fp)
 101fa58:	10800058 	cmpnei	r2,r2,1
 101fa5c:	1000071e 	bne	r2,zero,101fa7c <OSTaskChangePrio+0x148>
 101fa60:	e0bff717 	ldw	r2,-36(fp)
 101fa64:	e0bff315 	stw	r2,-52(fp)
 101fa68:	e0bff317 	ldw	r2,-52(fp)
 101fa6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 101fa70:	008010c4 	movi	r2,67
 101fa74:	e0bfff15 	stw	r2,-4(fp)
 101fa78:	00010506 	br	101fe90 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 101fa7c:	e0bffe03 	ldbu	r2,-8(fp)
 101fa80:	1004d0fa 	srli	r2,r2,3
 101fa84:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 101fa88:	e0bffe03 	ldbu	r2,-8(fp)
 101fa8c:	108001cc 	andi	r2,r2,7
 101fa90:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 101fa94:	e0fff983 	ldbu	r3,-26(fp)
 101fa98:	00800044 	movi	r2,1
 101fa9c:	10c4983a 	sll	r2,r2,r3
 101faa0:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 101faa4:	e0fff943 	ldbu	r3,-27(fp)
 101faa8:	00800044 	movi	r2,1
 101faac:	10c4983a 	sll	r2,r2,r3
 101fab0:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 101fab4:	e0bffd03 	ldbu	r2,-12(fp)
 101fab8:	00c040f4 	movhi	r3,259
 101fabc:	18dda904 	addi	r3,r3,30372
 101fac0:	1085883a 	add	r2,r2,r2
 101fac4:	1085883a 	add	r2,r2,r2
 101fac8:	10c5883a 	add	r2,r2,r3
 101facc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 101fad0:	e0bffe03 	ldbu	r2,-8(fp)
 101fad4:	00c040f4 	movhi	r3,259
 101fad8:	18dda904 	addi	r3,r3,30372
 101fadc:	1085883a 	add	r2,r2,r2
 101fae0:	1085883a 	add	r2,r2,r2
 101fae4:	10c7883a 	add	r3,r2,r3
 101fae8:	e0bffa17 	ldw	r2,-24(fp)
 101faec:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 101faf0:	e0bffa17 	ldw	r2,-24(fp)
 101faf4:	10800d03 	ldbu	r2,52(r2)
 101faf8:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 101fafc:	e0bffa17 	ldw	r2,-24(fp)
 101fb00:	10800d83 	ldbu	r2,54(r2)
 101fb04:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 101fb08:	e0bffa17 	ldw	r2,-24(fp)
 101fb0c:	10800d43 	ldbu	r2,53(r2)
 101fb10:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 101fb14:	e0fff903 	ldbu	r3,-28(fp)
 101fb18:	008040f4 	movhi	r2,259
 101fb1c:	10a71c44 	addi	r2,r2,-25487
 101fb20:	10c5883a 	add	r2,r2,r3
 101fb24:	10c00003 	ldbu	r3,0(r2)
 101fb28:	e0bff803 	ldbu	r2,-32(fp)
 101fb2c:	1884703a 	and	r2,r3,r2
 101fb30:	10803fcc 	andi	r2,r2,255
 101fb34:	1005003a 	cmpeq	r2,r2,zero
 101fb38:	1000381e 	bne	r2,zero,101fc1c <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 101fb3c:	e13ff903 	ldbu	r4,-28(fp)
 101fb40:	e0fff903 	ldbu	r3,-28(fp)
 101fb44:	008040f4 	movhi	r2,259
 101fb48:	10a71c44 	addi	r2,r2,-25487
 101fb4c:	10c5883a 	add	r2,r2,r3
 101fb50:	10800003 	ldbu	r2,0(r2)
 101fb54:	1007883a 	mov	r3,r2
 101fb58:	e0bff803 	ldbu	r2,-32(fp)
 101fb5c:	0084303a 	nor	r2,zero,r2
 101fb60:	1884703a 	and	r2,r3,r2
 101fb64:	1007883a 	mov	r3,r2
 101fb68:	008040f4 	movhi	r2,259
 101fb6c:	10a71c44 	addi	r2,r2,-25487
 101fb70:	1105883a 	add	r2,r2,r4
 101fb74:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 101fb78:	e0fff903 	ldbu	r3,-28(fp)
 101fb7c:	008040f4 	movhi	r2,259
 101fb80:	10a71c44 	addi	r2,r2,-25487
 101fb84:	10c5883a 	add	r2,r2,r3
 101fb88:	10800003 	ldbu	r2,0(r2)
 101fb8c:	10803fcc 	andi	r2,r2,255
 101fb90:	1004c03a 	cmpne	r2,r2,zero
 101fb94:	10000b1e 	bne	r2,zero,101fbc4 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 101fb98:	e0bff843 	ldbu	r2,-31(fp)
 101fb9c:	0084303a 	nor	r2,zero,r2
 101fba0:	1007883a 	mov	r3,r2
 101fba4:	008040f4 	movhi	r2,259
 101fba8:	10a71c04 	addi	r2,r2,-25488
 101fbac:	10800003 	ldbu	r2,0(r2)
 101fbb0:	1884703a 	and	r2,r3,r2
 101fbb4:	1007883a 	mov	r3,r2
 101fbb8:	008040f4 	movhi	r2,259
 101fbbc:	10a71c04 	addi	r2,r2,-25488
 101fbc0:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 101fbc4:	008040f4 	movhi	r2,259
 101fbc8:	10a71c04 	addi	r2,r2,-25488
 101fbcc:	10c00003 	ldbu	r3,0(r2)
 101fbd0:	e0bff8c3 	ldbu	r2,-29(fp)
 101fbd4:	1884b03a 	or	r2,r3,r2
 101fbd8:	1007883a 	mov	r3,r2
 101fbdc:	008040f4 	movhi	r2,259
 101fbe0:	10a71c04 	addi	r2,r2,-25488
 101fbe4:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 101fbe8:	e13ff983 	ldbu	r4,-26(fp)
 101fbec:	e0fff983 	ldbu	r3,-26(fp)
 101fbf0:	008040f4 	movhi	r2,259
 101fbf4:	10a71c44 	addi	r2,r2,-25487
 101fbf8:	10c5883a 	add	r2,r2,r3
 101fbfc:	10c00003 	ldbu	r3,0(r2)
 101fc00:	e0bff883 	ldbu	r2,-30(fp)
 101fc04:	1884b03a 	or	r2,r3,r2
 101fc08:	1007883a 	mov	r3,r2
 101fc0c:	008040f4 	movhi	r2,259
 101fc10:	10a71c44 	addi	r2,r2,-25487
 101fc14:	1105883a 	add	r2,r2,r4
 101fc18:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 101fc1c:	e0bffa17 	ldw	r2,-24(fp)
 101fc20:	10800717 	ldw	r2,28(r2)
 101fc24:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 101fc28:	e0bffc17 	ldw	r2,-16(fp)
 101fc2c:	1005003a 	cmpeq	r2,r2,zero
 101fc30:	1000341e 	bne	r2,zero,101fd04 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 101fc34:	e13ff903 	ldbu	r4,-28(fp)
 101fc38:	e0fff903 	ldbu	r3,-28(fp)
 101fc3c:	e0bffc17 	ldw	r2,-16(fp)
 101fc40:	1885883a 	add	r2,r3,r2
 101fc44:	10800204 	addi	r2,r2,8
 101fc48:	108000c3 	ldbu	r2,3(r2)
 101fc4c:	1007883a 	mov	r3,r2
 101fc50:	e0bff803 	ldbu	r2,-32(fp)
 101fc54:	0084303a 	nor	r2,zero,r2
 101fc58:	1884703a 	and	r2,r3,r2
 101fc5c:	1007883a 	mov	r3,r2
 101fc60:	e0bffc17 	ldw	r2,-16(fp)
 101fc64:	2085883a 	add	r2,r4,r2
 101fc68:	10800204 	addi	r2,r2,8
 101fc6c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 101fc70:	e0fff903 	ldbu	r3,-28(fp)
 101fc74:	e0bffc17 	ldw	r2,-16(fp)
 101fc78:	1885883a 	add	r2,r3,r2
 101fc7c:	10800204 	addi	r2,r2,8
 101fc80:	108000c3 	ldbu	r2,3(r2)
 101fc84:	10803fcc 	andi	r2,r2,255
 101fc88:	1004c03a 	cmpne	r2,r2,zero
 101fc8c:	1000091e 	bne	r2,zero,101fcb4 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 101fc90:	e0bffc17 	ldw	r2,-16(fp)
 101fc94:	10800283 	ldbu	r2,10(r2)
 101fc98:	1007883a 	mov	r3,r2
 101fc9c:	e0bff843 	ldbu	r2,-31(fp)
 101fca0:	0084303a 	nor	r2,zero,r2
 101fca4:	1884703a 	and	r2,r3,r2
 101fca8:	1007883a 	mov	r3,r2
 101fcac:	e0bffc17 	ldw	r2,-16(fp)
 101fcb0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 101fcb4:	e0bffc17 	ldw	r2,-16(fp)
 101fcb8:	10c00283 	ldbu	r3,10(r2)
 101fcbc:	e0bff8c3 	ldbu	r2,-29(fp)
 101fcc0:	1884b03a 	or	r2,r3,r2
 101fcc4:	1007883a 	mov	r3,r2
 101fcc8:	e0bffc17 	ldw	r2,-16(fp)
 101fccc:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 101fcd0:	e13ff983 	ldbu	r4,-26(fp)
 101fcd4:	e0fff983 	ldbu	r3,-26(fp)
 101fcd8:	e0bffc17 	ldw	r2,-16(fp)
 101fcdc:	1885883a 	add	r2,r3,r2
 101fce0:	10800204 	addi	r2,r2,8
 101fce4:	10c000c3 	ldbu	r3,3(r2)
 101fce8:	e0bff883 	ldbu	r2,-30(fp)
 101fcec:	1884b03a 	or	r2,r3,r2
 101fcf0:	1007883a 	mov	r3,r2
 101fcf4:	e0bffc17 	ldw	r2,-16(fp)
 101fcf8:	2085883a 	add	r2,r4,r2
 101fcfc:	10800204 	addi	r2,r2,8
 101fd00:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 101fd04:	e0bffa17 	ldw	r2,-24(fp)
 101fd08:	10800817 	ldw	r2,32(r2)
 101fd0c:	1005003a 	cmpeq	r2,r2,zero
 101fd10:	1000441e 	bne	r2,zero,101fe24 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 101fd14:	e0bffa17 	ldw	r2,-24(fp)
 101fd18:	10800817 	ldw	r2,32(r2)
 101fd1c:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 101fd20:	e0bffb17 	ldw	r2,-20(fp)
 101fd24:	10800017 	ldw	r2,0(r2)
 101fd28:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 101fd2c:	00003a06 	br	101fe18 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 101fd30:	e13ff903 	ldbu	r4,-28(fp)
 101fd34:	e0fff903 	ldbu	r3,-28(fp)
 101fd38:	e0bffc17 	ldw	r2,-16(fp)
 101fd3c:	1885883a 	add	r2,r3,r2
 101fd40:	10800204 	addi	r2,r2,8
 101fd44:	108000c3 	ldbu	r2,3(r2)
 101fd48:	1007883a 	mov	r3,r2
 101fd4c:	e0bff803 	ldbu	r2,-32(fp)
 101fd50:	0084303a 	nor	r2,zero,r2
 101fd54:	1884703a 	and	r2,r3,r2
 101fd58:	1007883a 	mov	r3,r2
 101fd5c:	e0bffc17 	ldw	r2,-16(fp)
 101fd60:	2085883a 	add	r2,r4,r2
 101fd64:	10800204 	addi	r2,r2,8
 101fd68:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 101fd6c:	e0fff903 	ldbu	r3,-28(fp)
 101fd70:	e0bffc17 	ldw	r2,-16(fp)
 101fd74:	1885883a 	add	r2,r3,r2
 101fd78:	10800204 	addi	r2,r2,8
 101fd7c:	108000c3 	ldbu	r2,3(r2)
 101fd80:	10803fcc 	andi	r2,r2,255
 101fd84:	1004c03a 	cmpne	r2,r2,zero
 101fd88:	1000091e 	bne	r2,zero,101fdb0 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 101fd8c:	e0bffc17 	ldw	r2,-16(fp)
 101fd90:	10800283 	ldbu	r2,10(r2)
 101fd94:	1007883a 	mov	r3,r2
 101fd98:	e0bff843 	ldbu	r2,-31(fp)
 101fd9c:	0084303a 	nor	r2,zero,r2
 101fda0:	1884703a 	and	r2,r3,r2
 101fda4:	1007883a 	mov	r3,r2
 101fda8:	e0bffc17 	ldw	r2,-16(fp)
 101fdac:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 101fdb0:	e0bffc17 	ldw	r2,-16(fp)
 101fdb4:	10c00283 	ldbu	r3,10(r2)
 101fdb8:	e0bff8c3 	ldbu	r2,-29(fp)
 101fdbc:	1884b03a 	or	r2,r3,r2
 101fdc0:	1007883a 	mov	r3,r2
 101fdc4:	e0bffc17 	ldw	r2,-16(fp)
 101fdc8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 101fdcc:	e13ff983 	ldbu	r4,-26(fp)
 101fdd0:	e0fff983 	ldbu	r3,-26(fp)
 101fdd4:	e0bffc17 	ldw	r2,-16(fp)
 101fdd8:	1885883a 	add	r2,r3,r2
 101fddc:	10800204 	addi	r2,r2,8
 101fde0:	10c000c3 	ldbu	r3,3(r2)
 101fde4:	e0bff883 	ldbu	r2,-30(fp)
 101fde8:	1884b03a 	or	r2,r3,r2
 101fdec:	1007883a 	mov	r3,r2
 101fdf0:	e0bffc17 	ldw	r2,-16(fp)
 101fdf4:	2085883a 	add	r2,r4,r2
 101fdf8:	10800204 	addi	r2,r2,8
 101fdfc:	10c000c5 	stb	r3,3(r2)
            pevents++;
 101fe00:	e0bffb17 	ldw	r2,-20(fp)
 101fe04:	10800104 	addi	r2,r2,4
 101fe08:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 101fe0c:	e0bffb17 	ldw	r2,-20(fp)
 101fe10:	10800017 	ldw	r2,0(r2)
 101fe14:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 101fe18:	e0bffc17 	ldw	r2,-16(fp)
 101fe1c:	1004c03a 	cmpne	r2,r2,zero
 101fe20:	103fc31e 	bne	r2,zero,101fd30 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 101fe24:	e0fffa17 	ldw	r3,-24(fp)
 101fe28:	e0bffe03 	ldbu	r2,-8(fp)
 101fe2c:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 101fe30:	e0fffa17 	ldw	r3,-24(fp)
 101fe34:	e0bff983 	ldbu	r2,-26(fp)
 101fe38:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 101fe3c:	e0fffa17 	ldw	r3,-24(fp)
 101fe40:	e0bff943 	ldbu	r2,-27(fp)
 101fe44:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 101fe48:	e0fffa17 	ldw	r3,-24(fp)
 101fe4c:	e0bff8c3 	ldbu	r2,-29(fp)
 101fe50:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 101fe54:	e0fffa17 	ldw	r3,-24(fp)
 101fe58:	e0bff883 	ldbu	r2,-30(fp)
 101fe5c:	18800d45 	stb	r2,53(r3)
 101fe60:	e0bff717 	ldw	r2,-36(fp)
 101fe64:	e0bff215 	stw	r2,-56(fp)
 101fe68:	e0bff217 	ldw	r2,-56(fp)
 101fe6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 101fe70:	008040f4 	movhi	r2,259
 101fe74:	10a71044 	addi	r2,r2,-25535
 101fe78:	10800003 	ldbu	r2,0(r2)
 101fe7c:	10803fcc 	andi	r2,r2,255
 101fe80:	10800058 	cmpnei	r2,r2,1
 101fe84:	1000011e 	bne	r2,zero,101fe8c <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 101fe88:	101b0800 	call	101b080 <OS_Sched>
    }
    return (OS_ERR_NONE);
 101fe8c:	e03fff15 	stw	zero,-4(fp)
 101fe90:	e0bfff17 	ldw	r2,-4(fp)
}
 101fe94:	e037883a 	mov	sp,fp
 101fe98:	dfc00117 	ldw	ra,4(sp)
 101fe9c:	df000017 	ldw	fp,0(sp)
 101fea0:	dec00204 	addi	sp,sp,8
 101fea4:	f800283a 	ret

0101fea8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 101fea8:	deffed04 	addi	sp,sp,-76
 101feac:	dfc01215 	stw	ra,72(sp)
 101feb0:	df001115 	stw	fp,68(sp)
 101feb4:	df001104 	addi	fp,sp,68
 101feb8:	e13ffb15 	stw	r4,-20(fp)
 101febc:	e17ffc15 	stw	r5,-16(fp)
 101fec0:	e1bffd15 	stw	r6,-12(fp)
 101fec4:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 101fec8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 101fecc:	e0bffe03 	ldbu	r2,-8(fp)
 101fed0:	10800570 	cmpltui	r2,r2,21
 101fed4:	1000031e 	bne	r2,zero,101fee4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 101fed8:	00800a84 	movi	r2,42
 101fedc:	e0bfff15 	stw	r2,-4(fp)
 101fee0:	00006006 	br	1020064 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101fee4:	0005303a 	rdctl	r2,status
 101fee8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101feec:	e0fff717 	ldw	r3,-36(fp)
 101fef0:	00bfff84 	movi	r2,-2
 101fef4:	1884703a 	and	r2,r3,r2
 101fef8:	1001703a 	wrctl	status,r2
  
  return context;
 101fefc:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101ff00:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 101ff04:	008040f4 	movhi	r2,259
 101ff08:	10a71e04 	addi	r2,r2,-25480
 101ff0c:	10800003 	ldbu	r2,0(r2)
 101ff10:	10803fcc 	andi	r2,r2,255
 101ff14:	1005003a 	cmpeq	r2,r2,zero
 101ff18:	1000071e 	bne	r2,zero,101ff38 <OSTaskCreate+0x90>
 101ff1c:	e0bff817 	ldw	r2,-32(fp)
 101ff20:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ff24:	e0bff617 	ldw	r2,-40(fp)
 101ff28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 101ff2c:	00800f04 	movi	r2,60
 101ff30:	e0bfff15 	stw	r2,-4(fp)
 101ff34:	00004b06 	br	1020064 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 101ff38:	e0bffe03 	ldbu	r2,-8(fp)
 101ff3c:	00c040f4 	movhi	r3,259
 101ff40:	18dda904 	addi	r3,r3,30372
 101ff44:	1085883a 	add	r2,r2,r2
 101ff48:	1085883a 	add	r2,r2,r2
 101ff4c:	10c5883a 	add	r2,r2,r3
 101ff50:	10800017 	ldw	r2,0(r2)
 101ff54:	1004c03a 	cmpne	r2,r2,zero
 101ff58:	10003c1e 	bne	r2,zero,102004c <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 101ff5c:	e0bffe03 	ldbu	r2,-8(fp)
 101ff60:	00c040f4 	movhi	r3,259
 101ff64:	18dda904 	addi	r3,r3,30372
 101ff68:	1085883a 	add	r2,r2,r2
 101ff6c:	1085883a 	add	r2,r2,r2
 101ff70:	10c7883a 	add	r3,r2,r3
 101ff74:	00800044 	movi	r2,1
 101ff78:	18800015 	stw	r2,0(r3)
 101ff7c:	e0bff817 	ldw	r2,-32(fp)
 101ff80:	e0bff515 	stw	r2,-44(fp)
 101ff84:	e0bff517 	ldw	r2,-44(fp)
 101ff88:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 101ff8c:	e13ffb17 	ldw	r4,-20(fp)
 101ff90:	e17ffc17 	ldw	r5,-16(fp)
 101ff94:	e1bffd17 	ldw	r6,-12(fp)
 101ff98:	000f883a 	mov	r7,zero
 101ff9c:	10239f40 	call	10239f4 <OSTaskStkInit>
 101ffa0:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 101ffa4:	e13ffe03 	ldbu	r4,-8(fp)
 101ffa8:	d8000015 	stw	zero,0(sp)
 101ffac:	d8000115 	stw	zero,4(sp)
 101ffb0:	d8000215 	stw	zero,8(sp)
 101ffb4:	e17ffa17 	ldw	r5,-24(fp)
 101ffb8:	000d883a 	mov	r6,zero
 101ffbc:	000f883a 	mov	r7,zero
 101ffc0:	101b4880 	call	101b488 <OS_TCBInit>
 101ffc4:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 101ffc8:	e0bff903 	ldbu	r2,-28(fp)
 101ffcc:	1004c03a 	cmpne	r2,r2,zero
 101ffd0:	1000081e 	bne	r2,zero,101fff4 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 101ffd4:	008040f4 	movhi	r2,259
 101ffd8:	10a71044 	addi	r2,r2,-25535
 101ffdc:	10800003 	ldbu	r2,0(r2)
 101ffe0:	10803fcc 	andi	r2,r2,255
 101ffe4:	10800058 	cmpnei	r2,r2,1
 101ffe8:	1000151e 	bne	r2,zero,1020040 <OSTaskCreate+0x198>
                OS_Sched();
 101ffec:	101b0800 	call	101b080 <OS_Sched>
 101fff0:	00001306 	br	1020040 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101fff4:	0005303a 	rdctl	r2,status
 101fff8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101fffc:	e0fff417 	ldw	r3,-48(fp)
 1020000:	00bfff84 	movi	r2,-2
 1020004:	1884703a 	and	r2,r3,r2
 1020008:	1001703a 	wrctl	status,r2
  
  return context;
 102000c:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 1020010:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 1020014:	e0bffe03 	ldbu	r2,-8(fp)
 1020018:	00c040f4 	movhi	r3,259
 102001c:	18dda904 	addi	r3,r3,30372
 1020020:	1085883a 	add	r2,r2,r2
 1020024:	1085883a 	add	r2,r2,r2
 1020028:	10c5883a 	add	r2,r2,r3
 102002c:	10000015 	stw	zero,0(r2)
 1020030:	e0bff817 	ldw	r2,-32(fp)
 1020034:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020038:	e0bff317 	ldw	r2,-52(fp)
 102003c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 1020040:	e0bff903 	ldbu	r2,-28(fp)
 1020044:	e0bfff15 	stw	r2,-4(fp)
 1020048:	00000606 	br	1020064 <OSTaskCreate+0x1bc>
 102004c:	e0bff817 	ldw	r2,-32(fp)
 1020050:	e0bff215 	stw	r2,-56(fp)
 1020054:	e0bff217 	ldw	r2,-56(fp)
 1020058:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 102005c:	00800a04 	movi	r2,40
 1020060:	e0bfff15 	stw	r2,-4(fp)
 1020064:	e0bfff17 	ldw	r2,-4(fp)
}
 1020068:	e037883a 	mov	sp,fp
 102006c:	dfc00117 	ldw	ra,4(sp)
 1020070:	df000017 	ldw	fp,0(sp)
 1020074:	dec00204 	addi	sp,sp,8
 1020078:	f800283a 	ret

0102007c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 102007c:	deffeb04 	addi	sp,sp,-84
 1020080:	dfc01415 	stw	ra,80(sp)
 1020084:	df001315 	stw	fp,76(sp)
 1020088:	df001304 	addi	fp,sp,76
 102008c:	e13ff915 	stw	r4,-28(fp)
 1020090:	e17ffa15 	stw	r5,-24(fp)
 1020094:	e1bffb15 	stw	r6,-20(fp)
 1020098:	e0800217 	ldw	r2,8(fp)
 102009c:	e0c00617 	ldw	r3,24(fp)
 10200a0:	e1fffc05 	stb	r7,-16(fp)
 10200a4:	e0bffd0d 	sth	r2,-12(fp)
 10200a8:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 10200ac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 10200b0:	e0bffc03 	ldbu	r2,-16(fp)
 10200b4:	10800570 	cmpltui	r2,r2,21
 10200b8:	1000031e 	bne	r2,zero,10200c8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 10200bc:	00800a84 	movi	r2,42
 10200c0:	e0bfff15 	stw	r2,-4(fp)
 10200c4:	00006706 	br	1020264 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10200c8:	0005303a 	rdctl	r2,status
 10200cc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10200d0:	e0fff517 	ldw	r3,-44(fp)
 10200d4:	00bfff84 	movi	r2,-2
 10200d8:	1884703a 	and	r2,r3,r2
 10200dc:	1001703a 	wrctl	status,r2
  
  return context;
 10200e0:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10200e4:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 10200e8:	008040f4 	movhi	r2,259
 10200ec:	10a71e04 	addi	r2,r2,-25480
 10200f0:	10800003 	ldbu	r2,0(r2)
 10200f4:	10803fcc 	andi	r2,r2,255
 10200f8:	1005003a 	cmpeq	r2,r2,zero
 10200fc:	1000071e 	bne	r2,zero,102011c <OSTaskCreateExt+0xa0>
 1020100:	e0bff617 	ldw	r2,-40(fp)
 1020104:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020108:	e0bff417 	ldw	r2,-48(fp)
 102010c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 1020110:	00800f04 	movi	r2,60
 1020114:	e0bfff15 	stw	r2,-4(fp)
 1020118:	00005206 	br	1020264 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 102011c:	e0bffc03 	ldbu	r2,-16(fp)
 1020120:	00c040f4 	movhi	r3,259
 1020124:	18dda904 	addi	r3,r3,30372
 1020128:	1085883a 	add	r2,r2,r2
 102012c:	1085883a 	add	r2,r2,r2
 1020130:	10c5883a 	add	r2,r2,r3
 1020134:	10800017 	ldw	r2,0(r2)
 1020138:	1004c03a 	cmpne	r2,r2,zero
 102013c:	1000431e 	bne	r2,zero,102024c <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 1020140:	e0bffc03 	ldbu	r2,-16(fp)
 1020144:	00c040f4 	movhi	r3,259
 1020148:	18dda904 	addi	r3,r3,30372
 102014c:	1085883a 	add	r2,r2,r2
 1020150:	1085883a 	add	r2,r2,r2
 1020154:	10c7883a 	add	r3,r2,r3
 1020158:	00800044 	movi	r2,1
 102015c:	18800015 	stw	r2,0(r3)
 1020160:	e0bff617 	ldw	r2,-40(fp)
 1020164:	e0bff315 	stw	r2,-52(fp)
 1020168:	e0bff317 	ldw	r2,-52(fp)
 102016c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 1020170:	e1bffe0b 	ldhu	r6,-8(fp)
 1020174:	e1000317 	ldw	r4,12(fp)
 1020178:	e1400417 	ldw	r5,16(fp)
 102017c:	10212f80 	call	10212f8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 1020180:	e1fffe0b 	ldhu	r7,-8(fp)
 1020184:	e13ff917 	ldw	r4,-28(fp)
 1020188:	e17ffa17 	ldw	r5,-24(fp)
 102018c:	e1bffb17 	ldw	r6,-20(fp)
 1020190:	10239f40 	call	10239f4 <OSTaskStkInit>
 1020194:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 1020198:	e13ffc03 	ldbu	r4,-16(fp)
 102019c:	e1fffd0b 	ldhu	r7,-12(fp)
 10201a0:	e0fffe0b 	ldhu	r3,-8(fp)
 10201a4:	e0800417 	ldw	r2,16(fp)
 10201a8:	d8800015 	stw	r2,0(sp)
 10201ac:	e0800517 	ldw	r2,20(fp)
 10201b0:	d8800115 	stw	r2,4(sp)
 10201b4:	d8c00215 	stw	r3,8(sp)
 10201b8:	e17ff817 	ldw	r5,-32(fp)
 10201bc:	e1800317 	ldw	r6,12(fp)
 10201c0:	101b4880 	call	101b488 <OS_TCBInit>
 10201c4:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 10201c8:	e0bff703 	ldbu	r2,-36(fp)
 10201cc:	1004c03a 	cmpne	r2,r2,zero
 10201d0:	1000081e 	bne	r2,zero,10201f4 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 10201d4:	008040f4 	movhi	r2,259
 10201d8:	10a71044 	addi	r2,r2,-25535
 10201dc:	10800003 	ldbu	r2,0(r2)
 10201e0:	10803fcc 	andi	r2,r2,255
 10201e4:	10800058 	cmpnei	r2,r2,1
 10201e8:	1000151e 	bne	r2,zero,1020240 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 10201ec:	101b0800 	call	101b080 <OS_Sched>
 10201f0:	00001306 	br	1020240 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10201f4:	0005303a 	rdctl	r2,status
 10201f8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10201fc:	e0fff217 	ldw	r3,-56(fp)
 1020200:	00bfff84 	movi	r2,-2
 1020204:	1884703a 	and	r2,r3,r2
 1020208:	1001703a 	wrctl	status,r2
  
  return context;
 102020c:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 1020210:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 1020214:	e0bffc03 	ldbu	r2,-16(fp)
 1020218:	00c040f4 	movhi	r3,259
 102021c:	18dda904 	addi	r3,r3,30372
 1020220:	1085883a 	add	r2,r2,r2
 1020224:	1085883a 	add	r2,r2,r2
 1020228:	10c5883a 	add	r2,r2,r3
 102022c:	10000015 	stw	zero,0(r2)
 1020230:	e0bff617 	ldw	r2,-40(fp)
 1020234:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020238:	e0bff117 	ldw	r2,-60(fp)
 102023c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 1020240:	e0bff703 	ldbu	r2,-36(fp)
 1020244:	e0bfff15 	stw	r2,-4(fp)
 1020248:	00000606 	br	1020264 <OSTaskCreateExt+0x1e8>
 102024c:	e0bff617 	ldw	r2,-40(fp)
 1020250:	e0bff015 	stw	r2,-64(fp)
 1020254:	e0bff017 	ldw	r2,-64(fp)
 1020258:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 102025c:	00800a04 	movi	r2,40
 1020260:	e0bfff15 	stw	r2,-4(fp)
 1020264:	e0bfff17 	ldw	r2,-4(fp)
}
 1020268:	e037883a 	mov	sp,fp
 102026c:	dfc00117 	ldw	ra,4(sp)
 1020270:	df000017 	ldw	fp,0(sp)
 1020274:	dec00204 	addi	sp,sp,8
 1020278:	f800283a 	ret

0102027c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 102027c:	defff304 	addi	sp,sp,-52
 1020280:	dfc00c15 	stw	ra,48(sp)
 1020284:	df000b15 	stw	fp,44(sp)
 1020288:	df000b04 	addi	fp,sp,44
 102028c:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 1020290:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 1020294:	008040f4 	movhi	r2,259
 1020298:	10a71e04 	addi	r2,r2,-25480
 102029c:	10800003 	ldbu	r2,0(r2)
 10202a0:	10803fcc 	andi	r2,r2,255
 10202a4:	1005003a 	cmpeq	r2,r2,zero
 10202a8:	1000031e 	bne	r2,zero,10202b8 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 10202ac:	00801004 	movi	r2,64
 10202b0:	e0bfff15 	stw	r2,-4(fp)
 10202b4:	0000ee06 	br	1020670 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 10202b8:	e0bffe03 	ldbu	r2,-8(fp)
 10202bc:	10800518 	cmpnei	r2,r2,20
 10202c0:	1000031e 	bne	r2,zero,10202d0 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 10202c4:	00800f84 	movi	r2,62
 10202c8:	e0bfff15 	stw	r2,-4(fp)
 10202cc:	0000e806 	br	1020670 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 10202d0:	e0bffe03 	ldbu	r2,-8(fp)
 10202d4:	10800530 	cmpltui	r2,r2,20
 10202d8:	1000061e 	bne	r2,zero,10202f4 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 10202dc:	e0bffe03 	ldbu	r2,-8(fp)
 10202e0:	10803fe0 	cmpeqi	r2,r2,255
 10202e4:	1000031e 	bne	r2,zero,10202f4 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 10202e8:	00800a84 	movi	r2,42
 10202ec:	e0bfff15 	stw	r2,-4(fp)
 10202f0:	0000df06 	br	1020670 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10202f4:	0005303a 	rdctl	r2,status
 10202f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10202fc:	e0fffa17 	ldw	r3,-24(fp)
 1020300:	00bfff84 	movi	r2,-2
 1020304:	1884703a 	and	r2,r3,r2
 1020308:	1001703a 	wrctl	status,r2
  
  return context;
 102030c:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 1020310:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 1020314:	e0bffe03 	ldbu	r2,-8(fp)
 1020318:	10803fd8 	cmpnei	r2,r2,255
 102031c:	1000051e 	bne	r2,zero,1020334 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 1020320:	008040f4 	movhi	r2,259
 1020324:	10a71f04 	addi	r2,r2,-25476
 1020328:	10800017 	ldw	r2,0(r2)
 102032c:	10800c83 	ldbu	r2,50(r2)
 1020330:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1020334:	e0bffe03 	ldbu	r2,-8(fp)
 1020338:	00c040f4 	movhi	r3,259
 102033c:	18dda904 	addi	r3,r3,30372
 1020340:	1085883a 	add	r2,r2,r2
 1020344:	1085883a 	add	r2,r2,r2
 1020348:	10c5883a 	add	r2,r2,r3
 102034c:	10800017 	ldw	r2,0(r2)
 1020350:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 1020354:	e0bffc17 	ldw	r2,-16(fp)
 1020358:	1004c03a 	cmpne	r2,r2,zero
 102035c:	1000071e 	bne	r2,zero,102037c <OSTaskDel+0x100>
 1020360:	e0bffb17 	ldw	r2,-20(fp)
 1020364:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020368:	e0bff917 	ldw	r2,-28(fp)
 102036c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1020370:	008010c4 	movi	r2,67
 1020374:	e0bfff15 	stw	r2,-4(fp)
 1020378:	0000bd06 	br	1020670 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 102037c:	e0bffc17 	ldw	r2,-16(fp)
 1020380:	10800058 	cmpnei	r2,r2,1
 1020384:	1000071e 	bne	r2,zero,10203a4 <OSTaskDel+0x128>
 1020388:	e0bffb17 	ldw	r2,-20(fp)
 102038c:	e0bff815 	stw	r2,-32(fp)
 1020390:	e0bff817 	ldw	r2,-32(fp)
 1020394:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 1020398:	00800f44 	movi	r2,61
 102039c:	e0bfff15 	stw	r2,-4(fp)
 10203a0:	0000b306 	br	1020670 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 10203a4:	e0bffc17 	ldw	r2,-16(fp)
 10203a8:	10800d03 	ldbu	r2,52(r2)
 10203ac:	11003fcc 	andi	r4,r2,255
 10203b0:	e0bffc17 	ldw	r2,-16(fp)
 10203b4:	10800d03 	ldbu	r2,52(r2)
 10203b8:	10c03fcc 	andi	r3,r2,255
 10203bc:	008040f4 	movhi	r2,259
 10203c0:	10a71c44 	addi	r2,r2,-25487
 10203c4:	10c5883a 	add	r2,r2,r3
 10203c8:	10800003 	ldbu	r2,0(r2)
 10203cc:	1007883a 	mov	r3,r2
 10203d0:	e0bffc17 	ldw	r2,-16(fp)
 10203d4:	10800d43 	ldbu	r2,53(r2)
 10203d8:	0084303a 	nor	r2,zero,r2
 10203dc:	1884703a 	and	r2,r3,r2
 10203e0:	1007883a 	mov	r3,r2
 10203e4:	008040f4 	movhi	r2,259
 10203e8:	10a71c44 	addi	r2,r2,-25487
 10203ec:	1105883a 	add	r2,r2,r4
 10203f0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 10203f4:	e0bffc17 	ldw	r2,-16(fp)
 10203f8:	10800d03 	ldbu	r2,52(r2)
 10203fc:	10c03fcc 	andi	r3,r2,255
 1020400:	008040f4 	movhi	r2,259
 1020404:	10a71c44 	addi	r2,r2,-25487
 1020408:	10c5883a 	add	r2,r2,r3
 102040c:	10800003 	ldbu	r2,0(r2)
 1020410:	10803fcc 	andi	r2,r2,255
 1020414:	1004c03a 	cmpne	r2,r2,zero
 1020418:	10000c1e 	bne	r2,zero,102044c <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 102041c:	e0bffc17 	ldw	r2,-16(fp)
 1020420:	10800d83 	ldbu	r2,54(r2)
 1020424:	0084303a 	nor	r2,zero,r2
 1020428:	1007883a 	mov	r3,r2
 102042c:	008040f4 	movhi	r2,259
 1020430:	10a71c04 	addi	r2,r2,-25488
 1020434:	10800003 	ldbu	r2,0(r2)
 1020438:	1884703a 	and	r2,r3,r2
 102043c:	1007883a 	mov	r3,r2
 1020440:	008040f4 	movhi	r2,259
 1020444:	10a71c04 	addi	r2,r2,-25488
 1020448:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 102044c:	e0bffc17 	ldw	r2,-16(fp)
 1020450:	10800717 	ldw	r2,28(r2)
 1020454:	1005003a 	cmpeq	r2,r2,zero
 1020458:	1000041e 	bne	r2,zero,102046c <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 102045c:	e0bffc17 	ldw	r2,-16(fp)
 1020460:	11400717 	ldw	r5,28(r2)
 1020464:	e13ffc17 	ldw	r4,-16(fp)
 1020468:	101aa380 	call	101aa38 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 102046c:	e0bffc17 	ldw	r2,-16(fp)
 1020470:	10800817 	ldw	r2,32(r2)
 1020474:	1005003a 	cmpeq	r2,r2,zero
 1020478:	1000041e 	bne	r2,zero,102048c <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 102047c:	e0bffc17 	ldw	r2,-16(fp)
 1020480:	11400817 	ldw	r5,32(r2)
 1020484:	e13ffc17 	ldw	r4,-16(fp)
 1020488:	101aaf00 	call	101aaf0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 102048c:	e0bffc17 	ldw	r2,-16(fp)
 1020490:	10800a17 	ldw	r2,40(r2)
 1020494:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 1020498:	e0bffd17 	ldw	r2,-12(fp)
 102049c:	1005003a 	cmpeq	r2,r2,zero
 10204a0:	1000021e 	bne	r2,zero,10204ac <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 10204a4:	e13ffd17 	ldw	r4,-12(fp)
 10204a8:	101d1840 	call	101d184 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 10204ac:	e0bffc17 	ldw	r2,-16(fp)
 10204b0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 10204b4:	e0bffc17 	ldw	r2,-16(fp)
 10204b8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 10204bc:	e0bffc17 	ldw	r2,-16(fp)
 10204c0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 10204c4:	008040f4 	movhi	r2,259
 10204c8:	10a71004 	addi	r2,r2,-25536
 10204cc:	10800003 	ldbu	r2,0(r2)
 10204d0:	10803fcc 	andi	r2,r2,255
 10204d4:	10803fe0 	cmpeqi	r2,r2,255
 10204d8:	1000081e 	bne	r2,zero,10204fc <OSTaskDel+0x280>
        OSLockNesting++;
 10204dc:	008040f4 	movhi	r2,259
 10204e0:	10a71004 	addi	r2,r2,-25536
 10204e4:	10800003 	ldbu	r2,0(r2)
 10204e8:	10800044 	addi	r2,r2,1
 10204ec:	1007883a 	mov	r3,r2
 10204f0:	008040f4 	movhi	r2,259
 10204f4:	10a71004 	addi	r2,r2,-25536
 10204f8:	10c00005 	stb	r3,0(r2)
 10204fc:	e0bffb17 	ldw	r2,-20(fp)
 1020500:	e0bff715 	stw	r2,-36(fp)
 1020504:	e0bff717 	ldw	r2,-36(fp)
 1020508:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 102050c:	101a6240 	call	101a624 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1020510:	0005303a 	rdctl	r2,status
 1020514:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1020518:	e0fff617 	ldw	r3,-40(fp)
 102051c:	00bfff84 	movi	r2,-2
 1020520:	1884703a 	and	r2,r3,r2
 1020524:	1001703a 	wrctl	status,r2
  
  return context;
 1020528:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 102052c:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 1020530:	008040f4 	movhi	r2,259
 1020534:	10a71004 	addi	r2,r2,-25536
 1020538:	10800003 	ldbu	r2,0(r2)
 102053c:	10803fcc 	andi	r2,r2,255
 1020540:	1005003a 	cmpeq	r2,r2,zero
 1020544:	1000081e 	bne	r2,zero,1020568 <OSTaskDel+0x2ec>
        OSLockNesting--;
 1020548:	008040f4 	movhi	r2,259
 102054c:	10a71004 	addi	r2,r2,-25536
 1020550:	10800003 	ldbu	r2,0(r2)
 1020554:	10bfffc4 	addi	r2,r2,-1
 1020558:	1007883a 	mov	r3,r2
 102055c:	008040f4 	movhi	r2,259
 1020560:	10a71004 	addi	r2,r2,-25536
 1020564:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 1020568:	e13ffc17 	ldw	r4,-16(fp)
 102056c:	1023d240 	call	1023d24 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 1020570:	008040f4 	movhi	r2,259
 1020574:	10a71844 	addi	r2,r2,-25503
 1020578:	10800003 	ldbu	r2,0(r2)
 102057c:	10bfffc4 	addi	r2,r2,-1
 1020580:	1007883a 	mov	r3,r2
 1020584:	008040f4 	movhi	r2,259
 1020588:	10a71844 	addi	r2,r2,-25503
 102058c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 1020590:	e0bffe03 	ldbu	r2,-8(fp)
 1020594:	00c040f4 	movhi	r3,259
 1020598:	18dda904 	addi	r3,r3,30372
 102059c:	1085883a 	add	r2,r2,r2
 10205a0:	1085883a 	add	r2,r2,r2
 10205a4:	10c5883a 	add	r2,r2,r3
 10205a8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 10205ac:	e0bffc17 	ldw	r2,-16(fp)
 10205b0:	10800617 	ldw	r2,24(r2)
 10205b4:	1004c03a 	cmpne	r2,r2,zero
 10205b8:	1000091e 	bne	r2,zero,10205e0 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 10205bc:	e0bffc17 	ldw	r2,-16(fp)
 10205c0:	10800517 	ldw	r2,20(r2)
 10205c4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 10205c8:	e0bffc17 	ldw	r2,-16(fp)
 10205cc:	10c00517 	ldw	r3,20(r2)
 10205d0:	008040f4 	movhi	r2,259
 10205d4:	10a71304 	addi	r2,r2,-25524
 10205d8:	10c00015 	stw	r3,0(r2)
 10205dc:	00000a06 	br	1020608 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 10205e0:	e0bffc17 	ldw	r2,-16(fp)
 10205e4:	10c00617 	ldw	r3,24(r2)
 10205e8:	e0bffc17 	ldw	r2,-16(fp)
 10205ec:	10800517 	ldw	r2,20(r2)
 10205f0:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 10205f4:	e0bffc17 	ldw	r2,-16(fp)
 10205f8:	10c00517 	ldw	r3,20(r2)
 10205fc:	e0bffc17 	ldw	r2,-16(fp)
 1020600:	10800617 	ldw	r2,24(r2)
 1020604:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 1020608:	008040f4 	movhi	r2,259
 102060c:	10a71704 	addi	r2,r2,-25508
 1020610:	10c00017 	ldw	r3,0(r2)
 1020614:	e0bffc17 	ldw	r2,-16(fp)
 1020618:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 102061c:	00c040f4 	movhi	r3,259
 1020620:	18e71704 	addi	r3,r3,-25508
 1020624:	e0bffc17 	ldw	r2,-16(fp)
 1020628:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 102062c:	e0fffc17 	ldw	r3,-16(fp)
 1020630:	00800fc4 	movi	r2,63
 1020634:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 1020638:	e0bffc17 	ldw	r2,-16(fp)
 102063c:	10001345 	stb	zero,77(r2)
 1020640:	e0bffb17 	ldw	r2,-20(fp)
 1020644:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020648:	e0bff517 	ldw	r2,-44(fp)
 102064c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 1020650:	008040f4 	movhi	r2,259
 1020654:	10a71044 	addi	r2,r2,-25535
 1020658:	10800003 	ldbu	r2,0(r2)
 102065c:	10803fcc 	andi	r2,r2,255
 1020660:	10800058 	cmpnei	r2,r2,1
 1020664:	1000011e 	bne	r2,zero,102066c <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 1020668:	101b0800 	call	101b080 <OS_Sched>
    }
    return (OS_ERR_NONE);
 102066c:	e03fff15 	stw	zero,-4(fp)
 1020670:	e0bfff17 	ldw	r2,-4(fp)
}
 1020674:	e037883a 	mov	sp,fp
 1020678:	dfc00117 	ldw	ra,4(sp)
 102067c:	df000017 	ldw	fp,0(sp)
 1020680:	dec00204 	addi	sp,sp,8
 1020684:	f800283a 	ret

01020688 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 1020688:	defff404 	addi	sp,sp,-48
 102068c:	df000b15 	stw	fp,44(sp)
 1020690:	df000b04 	addi	fp,sp,44
 1020694:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1020698:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 102069c:	e0bffe03 	ldbu	r2,-8(fp)
 10206a0:	10800518 	cmpnei	r2,r2,20
 10206a4:	1000031e 	bne	r2,zero,10206b4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 10206a8:	00800f84 	movi	r2,62
 10206ac:	e0bfff15 	stw	r2,-4(fp)
 10206b0:	00004c06 	br	10207e4 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 10206b4:	e0bffe03 	ldbu	r2,-8(fp)
 10206b8:	10800530 	cmpltui	r2,r2,20
 10206bc:	1000061e 	bne	r2,zero,10206d8 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 10206c0:	e0bffe03 	ldbu	r2,-8(fp)
 10206c4:	10803fe0 	cmpeqi	r2,r2,255
 10206c8:	1000031e 	bne	r2,zero,10206d8 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 10206cc:	00800a84 	movi	r2,42
 10206d0:	e0bfff15 	stw	r2,-4(fp)
 10206d4:	00004306 	br	10207e4 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 10206d8:	e0bffe03 	ldbu	r2,-8(fp)
 10206dc:	10803fd8 	cmpnei	r2,r2,255
 10206e0:	1000141e 	bne	r2,zero,1020734 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10206e4:	0005303a 	rdctl	r2,status
 10206e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10206ec:	e0fffa17 	ldw	r3,-24(fp)
 10206f0:	00bfff84 	movi	r2,-2
 10206f4:	1884703a 	and	r2,r3,r2
 10206f8:	1001703a 	wrctl	status,r2
  
  return context;
 10206fc:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 1020700:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 1020704:	008040f4 	movhi	r2,259
 1020708:	10a71f04 	addi	r2,r2,-25476
 102070c:	10800017 	ldw	r2,0(r2)
 1020710:	10800dc3 	ldbu	r2,55(r2)
 1020714:	e0bffd05 	stb	r2,-12(fp)
 1020718:	e0bffb17 	ldw	r2,-20(fp)
 102071c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020720:	e0bff917 	ldw	r2,-28(fp)
 1020724:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 1020728:	e0bffd03 	ldbu	r2,-12(fp)
 102072c:	e0bfff15 	stw	r2,-4(fp)
 1020730:	00002c06 	br	10207e4 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1020734:	0005303a 	rdctl	r2,status
 1020738:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102073c:	e0fff817 	ldw	r3,-32(fp)
 1020740:	00bfff84 	movi	r2,-2
 1020744:	1884703a 	and	r2,r3,r2
 1020748:	1001703a 	wrctl	status,r2
  
  return context;
 102074c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 1020750:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 1020754:	e0bffe03 	ldbu	r2,-8(fp)
 1020758:	00c040f4 	movhi	r3,259
 102075c:	18dda904 	addi	r3,r3,30372
 1020760:	1085883a 	add	r2,r2,r2
 1020764:	1085883a 	add	r2,r2,r2
 1020768:	10c5883a 	add	r2,r2,r3
 102076c:	10800017 	ldw	r2,0(r2)
 1020770:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 1020774:	e0bffc17 	ldw	r2,-16(fp)
 1020778:	1004c03a 	cmpne	r2,r2,zero
 102077c:	1000071e 	bne	r2,zero,102079c <OSTaskDelReq+0x114>
 1020780:	e0bffb17 	ldw	r2,-20(fp)
 1020784:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020788:	e0bff717 	ldw	r2,-36(fp)
 102078c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 1020790:	008010c4 	movi	r2,67
 1020794:	e0bfff15 	stw	r2,-4(fp)
 1020798:	00001206 	br	10207e4 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 102079c:	e0bffc17 	ldw	r2,-16(fp)
 10207a0:	10800058 	cmpnei	r2,r2,1
 10207a4:	1000071e 	bne	r2,zero,10207c4 <OSTaskDelReq+0x13c>
 10207a8:	e0bffb17 	ldw	r2,-20(fp)
 10207ac:	e0bff615 	stw	r2,-40(fp)
 10207b0:	e0bff617 	ldw	r2,-40(fp)
 10207b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 10207b8:	00800f44 	movi	r2,61
 10207bc:	e0bfff15 	stw	r2,-4(fp)
 10207c0:	00000806 	br	10207e4 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 10207c4:	e0fffc17 	ldw	r3,-16(fp)
 10207c8:	00800fc4 	movi	r2,63
 10207cc:	18800dc5 	stb	r2,55(r3)
 10207d0:	e0bffb17 	ldw	r2,-20(fp)
 10207d4:	e0bff515 	stw	r2,-44(fp)
 10207d8:	e0bff517 	ldw	r2,-44(fp)
 10207dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10207e0:	e03fff15 	stw	zero,-4(fp)
 10207e4:	e0bfff17 	ldw	r2,-4(fp)
}
 10207e8:	e037883a 	mov	sp,fp
 10207ec:	df000017 	ldw	fp,0(sp)
 10207f0:	dec00104 	addi	sp,sp,4
 10207f4:	f800283a 	ret

010207f8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 10207f8:	defff304 	addi	sp,sp,-52
 10207fc:	dfc00c15 	stw	ra,48(sp)
 1020800:	df000b15 	stw	fp,44(sp)
 1020804:	df000b04 	addi	fp,sp,44
 1020808:	e17ffd15 	stw	r5,-12(fp)
 102080c:	e1bffe15 	stw	r6,-8(fp)
 1020810:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 1020814:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 1020818:	e0bffe17 	ldw	r2,-8(fp)
 102081c:	1004c03a 	cmpne	r2,r2,zero
 1020820:	1000021e 	bne	r2,zero,102082c <OSTaskNameGet+0x34>
        return (0);
 1020824:	e03fff15 	stw	zero,-4(fp)
 1020828:	00005b06 	br	1020998 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 102082c:	e0bffc03 	ldbu	r2,-16(fp)
 1020830:	10800570 	cmpltui	r2,r2,21
 1020834:	1000081e 	bne	r2,zero,1020858 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 1020838:	e0bffc03 	ldbu	r2,-16(fp)
 102083c:	10803fe0 	cmpeqi	r2,r2,255
 1020840:	1000051e 	bne	r2,zero,1020858 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 1020844:	e0fffe17 	ldw	r3,-8(fp)
 1020848:	00800a84 	movi	r2,42
 102084c:	18800005 	stb	r2,0(r3)
            return (0);
 1020850:	e03fff15 	stw	zero,-4(fp)
 1020854:	00005006 	br	1020998 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 1020858:	e0bffd17 	ldw	r2,-12(fp)
 102085c:	1004c03a 	cmpne	r2,r2,zero
 1020860:	1000051e 	bne	r2,zero,1020878 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 1020864:	e0fffe17 	ldw	r3,-8(fp)
 1020868:	00800304 	movi	r2,12
 102086c:	18800005 	stb	r2,0(r3)
        return (0);
 1020870:	e03fff15 	stw	zero,-4(fp)
 1020874:	00004806 	br	1020998 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 1020878:	008040f4 	movhi	r2,259
 102087c:	10a71e04 	addi	r2,r2,-25480
 1020880:	10800003 	ldbu	r2,0(r2)
 1020884:	10803fcc 	andi	r2,r2,255
 1020888:	1005003a 	cmpeq	r2,r2,zero
 102088c:	1000051e 	bne	r2,zero,10208a4 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 1020890:	e0fffe17 	ldw	r3,-8(fp)
 1020894:	00800444 	movi	r2,17
 1020898:	18800005 	stb	r2,0(r3)
        return (0);
 102089c:	e03fff15 	stw	zero,-4(fp)
 10208a0:	00003d06 	br	1020998 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10208a4:	0005303a 	rdctl	r2,status
 10208a8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10208ac:	e0fff817 	ldw	r3,-32(fp)
 10208b0:	00bfff84 	movi	r2,-2
 10208b4:	1884703a 	and	r2,r3,r2
 10208b8:	1001703a 	wrctl	status,r2
  
  return context;
 10208bc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 10208c0:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 10208c4:	e0bffc03 	ldbu	r2,-16(fp)
 10208c8:	10803fd8 	cmpnei	r2,r2,255
 10208cc:	1000051e 	bne	r2,zero,10208e4 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 10208d0:	008040f4 	movhi	r2,259
 10208d4:	10a71f04 	addi	r2,r2,-25476
 10208d8:	10800017 	ldw	r2,0(r2)
 10208dc:	10800c83 	ldbu	r2,50(r2)
 10208e0:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 10208e4:	e0bffc03 	ldbu	r2,-16(fp)
 10208e8:	00c040f4 	movhi	r3,259
 10208ec:	18dda904 	addi	r3,r3,30372
 10208f0:	1085883a 	add	r2,r2,r2
 10208f4:	1085883a 	add	r2,r2,r2
 10208f8:	10c5883a 	add	r2,r2,r3
 10208fc:	10800017 	ldw	r2,0(r2)
 1020900:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 1020904:	e0bffb17 	ldw	r2,-20(fp)
 1020908:	1004c03a 	cmpne	r2,r2,zero
 102090c:	1000091e 	bne	r2,zero,1020934 <OSTaskNameGet+0x13c>
 1020910:	e0bff917 	ldw	r2,-28(fp)
 1020914:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020918:	e0bff717 	ldw	r2,-36(fp)
 102091c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1020920:	e0fffe17 	ldw	r3,-8(fp)
 1020924:	008010c4 	movi	r2,67
 1020928:	18800005 	stb	r2,0(r3)
        return (0);
 102092c:	e03fff15 	stw	zero,-4(fp)
 1020930:	00001906 	br	1020998 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 1020934:	e0bffb17 	ldw	r2,-20(fp)
 1020938:	10800058 	cmpnei	r2,r2,1
 102093c:	1000091e 	bne	r2,zero,1020964 <OSTaskNameGet+0x16c>
 1020940:	e0bff917 	ldw	r2,-28(fp)
 1020944:	e0bff615 	stw	r2,-40(fp)
 1020948:	e0bff617 	ldw	r2,-40(fp)
 102094c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1020950:	e0fffe17 	ldw	r3,-8(fp)
 1020954:	008010c4 	movi	r2,67
 1020958:	18800005 	stb	r2,0(r3)
        return (0);
 102095c:	e03fff15 	stw	zero,-4(fp)
 1020960:	00000d06 	br	1020998 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 1020964:	e0bffb17 	ldw	r2,-20(fp)
 1020968:	11401304 	addi	r5,r2,76
 102096c:	e13ffd17 	ldw	r4,-12(fp)
 1020970:	101b1c40 	call	101b1c4 <OS_StrCopy>
 1020974:	e0bffa05 	stb	r2,-24(fp)
 1020978:	e0bff917 	ldw	r2,-28(fp)
 102097c:	e0bff515 	stw	r2,-44(fp)
 1020980:	e0bff517 	ldw	r2,-44(fp)
 1020984:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1020988:	e0bffe17 	ldw	r2,-8(fp)
 102098c:	10000005 	stb	zero,0(r2)
    return (len);
 1020990:	e0bffa03 	ldbu	r2,-24(fp)
 1020994:	e0bfff15 	stw	r2,-4(fp)
 1020998:	e0bfff17 	ldw	r2,-4(fp)
}
 102099c:	e037883a 	mov	sp,fp
 10209a0:	dfc00117 	ldw	ra,4(sp)
 10209a4:	df000017 	ldw	fp,0(sp)
 10209a8:	dec00204 	addi	sp,sp,8
 10209ac:	f800283a 	ret

010209b0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 10209b0:	defff304 	addi	sp,sp,-52
 10209b4:	dfc00c15 	stw	ra,48(sp)
 10209b8:	df000b15 	stw	fp,44(sp)
 10209bc:	df000b04 	addi	fp,sp,44
 10209c0:	e17ffe15 	stw	r5,-8(fp)
 10209c4:	e1bfff15 	stw	r6,-4(fp)
 10209c8:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 10209cc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 10209d0:	e0bfff17 	ldw	r2,-4(fp)
 10209d4:	1005003a 	cmpeq	r2,r2,zero
 10209d8:	1000611e 	bne	r2,zero,1020b60 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 10209dc:	e0bffd03 	ldbu	r2,-12(fp)
 10209e0:	10800570 	cmpltui	r2,r2,21
 10209e4:	1000071e 	bne	r2,zero,1020a04 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 10209e8:	e0bffd03 	ldbu	r2,-12(fp)
 10209ec:	10803fe0 	cmpeqi	r2,r2,255
 10209f0:	1000041e 	bne	r2,zero,1020a04 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 10209f4:	e0ffff17 	ldw	r3,-4(fp)
 10209f8:	00800a84 	movi	r2,42
 10209fc:	18800005 	stb	r2,0(r3)
            return;
 1020a00:	00005706 	br	1020b60 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 1020a04:	e0bffe17 	ldw	r2,-8(fp)
 1020a08:	1004c03a 	cmpne	r2,r2,zero
 1020a0c:	1000041e 	bne	r2,zero,1020a20 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 1020a10:	e0ffff17 	ldw	r3,-4(fp)
 1020a14:	00800304 	movi	r2,12
 1020a18:	18800005 	stb	r2,0(r3)
        return;
 1020a1c:	00005006 	br	1020b60 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 1020a20:	008040f4 	movhi	r2,259
 1020a24:	10a71e04 	addi	r2,r2,-25480
 1020a28:	10800003 	ldbu	r2,0(r2)
 1020a2c:	10803fcc 	andi	r2,r2,255
 1020a30:	1005003a 	cmpeq	r2,r2,zero
 1020a34:	1000041e 	bne	r2,zero,1020a48 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 1020a38:	e0ffff17 	ldw	r3,-4(fp)
 1020a3c:	00800484 	movi	r2,18
 1020a40:	18800005 	stb	r2,0(r3)
        return;
 1020a44:	00004606 	br	1020b60 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1020a48:	0005303a 	rdctl	r2,status
 1020a4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1020a50:	e0fff917 	ldw	r3,-28(fp)
 1020a54:	00bfff84 	movi	r2,-2
 1020a58:	1884703a 	and	r2,r3,r2
 1020a5c:	1001703a 	wrctl	status,r2
  
  return context;
 1020a60:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1020a64:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 1020a68:	e0bffd03 	ldbu	r2,-12(fp)
 1020a6c:	10803fd8 	cmpnei	r2,r2,255
 1020a70:	1000051e 	bne	r2,zero,1020a88 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 1020a74:	008040f4 	movhi	r2,259
 1020a78:	10a71f04 	addi	r2,r2,-25476
 1020a7c:	10800017 	ldw	r2,0(r2)
 1020a80:	10800c83 	ldbu	r2,50(r2)
 1020a84:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1020a88:	e0bffd03 	ldbu	r2,-12(fp)
 1020a8c:	00c040f4 	movhi	r3,259
 1020a90:	18dda904 	addi	r3,r3,30372
 1020a94:	1085883a 	add	r2,r2,r2
 1020a98:	1085883a 	add	r2,r2,r2
 1020a9c:	10c5883a 	add	r2,r2,r3
 1020aa0:	10800017 	ldw	r2,0(r2)
 1020aa4:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 1020aa8:	e0bffb17 	ldw	r2,-20(fp)
 1020aac:	1004c03a 	cmpne	r2,r2,zero
 1020ab0:	1000081e 	bne	r2,zero,1020ad4 <OSTaskNameSet+0x124>
 1020ab4:	e0bffa17 	ldw	r2,-24(fp)
 1020ab8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020abc:	e0bff817 	ldw	r2,-32(fp)
 1020ac0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1020ac4:	e0ffff17 	ldw	r3,-4(fp)
 1020ac8:	008010c4 	movi	r2,67
 1020acc:	18800005 	stb	r2,0(r3)
        return;
 1020ad0:	00002306 	br	1020b60 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 1020ad4:	e0bffb17 	ldw	r2,-20(fp)
 1020ad8:	10800058 	cmpnei	r2,r2,1
 1020adc:	1000081e 	bne	r2,zero,1020b00 <OSTaskNameSet+0x150>
 1020ae0:	e0bffa17 	ldw	r2,-24(fp)
 1020ae4:	e0bff715 	stw	r2,-36(fp)
 1020ae8:	e0bff717 	ldw	r2,-36(fp)
 1020aec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1020af0:	e0ffff17 	ldw	r3,-4(fp)
 1020af4:	008010c4 	movi	r2,67
 1020af8:	18800005 	stb	r2,0(r3)
        return;
 1020afc:	00001806 	br	1020b60 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 1020b00:	e13ffe17 	ldw	r4,-8(fp)
 1020b04:	101b2440 	call	101b244 <OS_StrLen>
 1020b08:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 1020b0c:	e0bffc03 	ldbu	r2,-16(fp)
 1020b10:	10800830 	cmpltui	r2,r2,32
 1020b14:	1000081e 	bne	r2,zero,1020b38 <OSTaskNameSet+0x188>
 1020b18:	e0bffa17 	ldw	r2,-24(fp)
 1020b1c:	e0bff615 	stw	r2,-40(fp)
 1020b20:	e0bff617 	ldw	r2,-40(fp)
 1020b24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 1020b28:	e0ffff17 	ldw	r3,-4(fp)
 1020b2c:	00801044 	movi	r2,65
 1020b30:	18800005 	stb	r2,0(r3)
        return;
 1020b34:	00000a06 	br	1020b60 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 1020b38:	e0bffb17 	ldw	r2,-20(fp)
 1020b3c:	11001304 	addi	r4,r2,76
 1020b40:	e17ffe17 	ldw	r5,-8(fp)
 1020b44:	101b1c40 	call	101b1c4 <OS_StrCopy>
 1020b48:	e0bffa17 	ldw	r2,-24(fp)
 1020b4c:	e0bff515 	stw	r2,-44(fp)
 1020b50:	e0bff517 	ldw	r2,-44(fp)
 1020b54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1020b58:	e0bfff17 	ldw	r2,-4(fp)
 1020b5c:	10000005 	stb	zero,0(r2)
}
 1020b60:	e037883a 	mov	sp,fp
 1020b64:	dfc00117 	ldw	ra,4(sp)
 1020b68:	df000017 	ldw	fp,0(sp)
 1020b6c:	dec00204 	addi	sp,sp,8
 1020b70:	f800283a 	ret

01020b74 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 1020b74:	defff304 	addi	sp,sp,-52
 1020b78:	dfc00c15 	stw	ra,48(sp)
 1020b7c:	df000b15 	stw	fp,44(sp)
 1020b80:	df000b04 	addi	fp,sp,44
 1020b84:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 1020b88:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 1020b8c:	e0bffe03 	ldbu	r2,-8(fp)
 1020b90:	10800530 	cmpltui	r2,r2,20
 1020b94:	1000031e 	bne	r2,zero,1020ba4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 1020b98:	00800a84 	movi	r2,42
 1020b9c:	e0bfff15 	stw	r2,-4(fp)
 1020ba0:	00007406 	br	1020d74 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1020ba4:	0005303a 	rdctl	r2,status
 1020ba8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1020bac:	e0fffb17 	ldw	r3,-20(fp)
 1020bb0:	00bfff84 	movi	r2,-2
 1020bb4:	1884703a 	and	r2,r3,r2
 1020bb8:	1001703a 	wrctl	status,r2
  
  return context;
 1020bbc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1020bc0:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 1020bc4:	e0bffe03 	ldbu	r2,-8(fp)
 1020bc8:	00c040f4 	movhi	r3,259
 1020bcc:	18dda904 	addi	r3,r3,30372
 1020bd0:	1085883a 	add	r2,r2,r2
 1020bd4:	1085883a 	add	r2,r2,r2
 1020bd8:	10c5883a 	add	r2,r2,r3
 1020bdc:	10800017 	ldw	r2,0(r2)
 1020be0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 1020be4:	e0bffd17 	ldw	r2,-12(fp)
 1020be8:	1004c03a 	cmpne	r2,r2,zero
 1020bec:	1000071e 	bne	r2,zero,1020c0c <OSTaskResume+0x98>
 1020bf0:	e0bffc17 	ldw	r2,-16(fp)
 1020bf4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020bf8:	e0bffa17 	ldw	r2,-24(fp)
 1020bfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 1020c00:	00801184 	movi	r2,70
 1020c04:	e0bfff15 	stw	r2,-4(fp)
 1020c08:	00005a06 	br	1020d74 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 1020c0c:	e0bffd17 	ldw	r2,-12(fp)
 1020c10:	10800058 	cmpnei	r2,r2,1
 1020c14:	1000071e 	bne	r2,zero,1020c34 <OSTaskResume+0xc0>
 1020c18:	e0bffc17 	ldw	r2,-16(fp)
 1020c1c:	e0bff915 	stw	r2,-28(fp)
 1020c20:	e0bff917 	ldw	r2,-28(fp)
 1020c24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1020c28:	008010c4 	movi	r2,67
 1020c2c:	e0bfff15 	stw	r2,-4(fp)
 1020c30:	00005006 	br	1020d74 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 1020c34:	e0bffd17 	ldw	r2,-12(fp)
 1020c38:	10800c03 	ldbu	r2,48(r2)
 1020c3c:	10803fcc 	andi	r2,r2,255
 1020c40:	1080020c 	andi	r2,r2,8
 1020c44:	1005003a 	cmpeq	r2,r2,zero
 1020c48:	1000441e 	bne	r2,zero,1020d5c <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 1020c4c:	e0bffd17 	ldw	r2,-12(fp)
 1020c50:	10c00c03 	ldbu	r3,48(r2)
 1020c54:	00bffdc4 	movi	r2,-9
 1020c58:	1884703a 	and	r2,r3,r2
 1020c5c:	1007883a 	mov	r3,r2
 1020c60:	e0bffd17 	ldw	r2,-12(fp)
 1020c64:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 1020c68:	e0bffd17 	ldw	r2,-12(fp)
 1020c6c:	10800c03 	ldbu	r2,48(r2)
 1020c70:	10803fcc 	andi	r2,r2,255
 1020c74:	1004c03a 	cmpne	r2,r2,zero
 1020c78:	1000321e 	bne	r2,zero,1020d44 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 1020c7c:	e0bffd17 	ldw	r2,-12(fp)
 1020c80:	10800b8b 	ldhu	r2,46(r2)
 1020c84:	10bfffcc 	andi	r2,r2,65535
 1020c88:	1004c03a 	cmpne	r2,r2,zero
 1020c8c:	1000281e 	bne	r2,zero,1020d30 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 1020c90:	e0bffd17 	ldw	r2,-12(fp)
 1020c94:	10c00d83 	ldbu	r3,54(r2)
 1020c98:	008040f4 	movhi	r2,259
 1020c9c:	10a71c04 	addi	r2,r2,-25488
 1020ca0:	10800003 	ldbu	r2,0(r2)
 1020ca4:	1884b03a 	or	r2,r3,r2
 1020ca8:	1007883a 	mov	r3,r2
 1020cac:	008040f4 	movhi	r2,259
 1020cb0:	10a71c04 	addi	r2,r2,-25488
 1020cb4:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1020cb8:	e0bffd17 	ldw	r2,-12(fp)
 1020cbc:	10800d03 	ldbu	r2,52(r2)
 1020cc0:	11003fcc 	andi	r4,r2,255
 1020cc4:	e0bffd17 	ldw	r2,-12(fp)
 1020cc8:	10800d03 	ldbu	r2,52(r2)
 1020ccc:	10c03fcc 	andi	r3,r2,255
 1020cd0:	008040f4 	movhi	r2,259
 1020cd4:	10a71c44 	addi	r2,r2,-25487
 1020cd8:	10c5883a 	add	r2,r2,r3
 1020cdc:	10c00003 	ldbu	r3,0(r2)
 1020ce0:	e0bffd17 	ldw	r2,-12(fp)
 1020ce4:	10800d43 	ldbu	r2,53(r2)
 1020ce8:	1884b03a 	or	r2,r3,r2
 1020cec:	1007883a 	mov	r3,r2
 1020cf0:	008040f4 	movhi	r2,259
 1020cf4:	10a71c44 	addi	r2,r2,-25487
 1020cf8:	1105883a 	add	r2,r2,r4
 1020cfc:	10c00005 	stb	r3,0(r2)
 1020d00:	e0bffc17 	ldw	r2,-16(fp)
 1020d04:	e0bff815 	stw	r2,-32(fp)
 1020d08:	e0bff817 	ldw	r2,-32(fp)
 1020d0c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 1020d10:	008040f4 	movhi	r2,259
 1020d14:	10a71044 	addi	r2,r2,-25535
 1020d18:	10800003 	ldbu	r2,0(r2)
 1020d1c:	10803fcc 	andi	r2,r2,255
 1020d20:	10800058 	cmpnei	r2,r2,1
 1020d24:	10000b1e 	bne	r2,zero,1020d54 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 1020d28:	101b0800 	call	101b080 <OS_Sched>
 1020d2c:	00000906 	br	1020d54 <OSTaskResume+0x1e0>
 1020d30:	e0bffc17 	ldw	r2,-16(fp)
 1020d34:	e0bff715 	stw	r2,-36(fp)
 1020d38:	e0bff717 	ldw	r2,-36(fp)
 1020d3c:	1001703a 	wrctl	status,r2
 1020d40:	00000406 	br	1020d54 <OSTaskResume+0x1e0>
 1020d44:	e0bffc17 	ldw	r2,-16(fp)
 1020d48:	e0bff615 	stw	r2,-40(fp)
 1020d4c:	e0bff617 	ldw	r2,-40(fp)
 1020d50:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 1020d54:	e03fff15 	stw	zero,-4(fp)
 1020d58:	00000606 	br	1020d74 <OSTaskResume+0x200>
 1020d5c:	e0bffc17 	ldw	r2,-16(fp)
 1020d60:	e0bff515 	stw	r2,-44(fp)
 1020d64:	e0bff517 	ldw	r2,-44(fp)
 1020d68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 1020d6c:	00801104 	movi	r2,68
 1020d70:	e0bfff15 	stw	r2,-4(fp)
 1020d74:	e0bfff17 	ldw	r2,-4(fp)
}
 1020d78:	e037883a 	mov	sp,fp
 1020d7c:	dfc00117 	ldw	ra,4(sp)
 1020d80:	df000017 	ldw	fp,0(sp)
 1020d84:	dec00204 	addi	sp,sp,8
 1020d88:	f800283a 	ret

01020d8c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 1020d8c:	defff204 	addi	sp,sp,-56
 1020d90:	df000d15 	stw	fp,52(sp)
 1020d94:	df000d04 	addi	fp,sp,52
 1020d98:	e17ffe15 	stw	r5,-8(fp)
 1020d9c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1020da0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 1020da4:	e0bffd03 	ldbu	r2,-12(fp)
 1020da8:	10800570 	cmpltui	r2,r2,21
 1020dac:	1000061e 	bne	r2,zero,1020dc8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 1020db0:	e0bffd03 	ldbu	r2,-12(fp)
 1020db4:	10803fe0 	cmpeqi	r2,r2,255
 1020db8:	1000031e 	bne	r2,zero,1020dc8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 1020dbc:	00800a84 	movi	r2,42
 1020dc0:	e0bfff15 	stw	r2,-4(fp)
 1020dc4:	00006b06 	br	1020f74 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 1020dc8:	e0bffe17 	ldw	r2,-8(fp)
 1020dcc:	1004c03a 	cmpne	r2,r2,zero
 1020dd0:	1000031e 	bne	r2,zero,1020de0 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 1020dd4:	00800244 	movi	r2,9
 1020dd8:	e0bfff15 	stw	r2,-4(fp)
 1020ddc:	00006506 	br	1020f74 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 1020de0:	e0bffe17 	ldw	r2,-8(fp)
 1020de4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 1020de8:	e0bffe17 	ldw	r2,-8(fp)
 1020dec:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1020df0:	0005303a 	rdctl	r2,status
 1020df4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1020df8:	e0fff717 	ldw	r3,-36(fp)
 1020dfc:	00bfff84 	movi	r2,-2
 1020e00:	1884703a 	and	r2,r3,r2
 1020e04:	1001703a 	wrctl	status,r2
  
  return context;
 1020e08:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 1020e0c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 1020e10:	e0bffd03 	ldbu	r2,-12(fp)
 1020e14:	10803fd8 	cmpnei	r2,r2,255
 1020e18:	1000051e 	bne	r2,zero,1020e30 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 1020e1c:	008040f4 	movhi	r2,259
 1020e20:	10a71f04 	addi	r2,r2,-25476
 1020e24:	10800017 	ldw	r2,0(r2)
 1020e28:	10800c83 	ldbu	r2,50(r2)
 1020e2c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1020e30:	e0bffd03 	ldbu	r2,-12(fp)
 1020e34:	00c040f4 	movhi	r3,259
 1020e38:	18dda904 	addi	r3,r3,30372
 1020e3c:	1085883a 	add	r2,r2,r2
 1020e40:	1085883a 	add	r2,r2,r2
 1020e44:	10c5883a 	add	r2,r2,r3
 1020e48:	10800017 	ldw	r2,0(r2)
 1020e4c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 1020e50:	e0bffc17 	ldw	r2,-16(fp)
 1020e54:	1004c03a 	cmpne	r2,r2,zero
 1020e58:	1000071e 	bne	r2,zero,1020e78 <OSTaskStkChk+0xec>
 1020e5c:	e0bff817 	ldw	r2,-32(fp)
 1020e60:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1020e64:	e0bff617 	ldw	r2,-40(fp)
 1020e68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1020e6c:	008010c4 	movi	r2,67
 1020e70:	e0bfff15 	stw	r2,-4(fp)
 1020e74:	00003f06 	br	1020f74 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 1020e78:	e0bffc17 	ldw	r2,-16(fp)
 1020e7c:	10800058 	cmpnei	r2,r2,1
 1020e80:	1000071e 	bne	r2,zero,1020ea0 <OSTaskStkChk+0x114>
 1020e84:	e0bff817 	ldw	r2,-32(fp)
 1020e88:	e0bff515 	stw	r2,-44(fp)
 1020e8c:	e0bff517 	ldw	r2,-44(fp)
 1020e90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1020e94:	008010c4 	movi	r2,67
 1020e98:	e0bfff15 	stw	r2,-4(fp)
 1020e9c:	00003506 	br	1020f74 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 1020ea0:	e0bffc17 	ldw	r2,-16(fp)
 1020ea4:	1080040b 	ldhu	r2,16(r2)
 1020ea8:	10bfffcc 	andi	r2,r2,65535
 1020eac:	1080004c 	andi	r2,r2,1
 1020eb0:	1004c03a 	cmpne	r2,r2,zero
 1020eb4:	1000071e 	bne	r2,zero,1020ed4 <OSTaskStkChk+0x148>
 1020eb8:	e0bff817 	ldw	r2,-32(fp)
 1020ebc:	e0bff415 	stw	r2,-48(fp)
 1020ec0:	e0bff417 	ldw	r2,-48(fp)
 1020ec4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 1020ec8:	00801144 	movi	r2,69
 1020ecc:	e0bfff15 	stw	r2,-4(fp)
 1020ed0:	00002806 	br	1020f74 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 1020ed4:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 1020ed8:	e0bffc17 	ldw	r2,-16(fp)
 1020edc:	10800317 	ldw	r2,12(r2)
 1020ee0:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 1020ee4:	e0bffc17 	ldw	r2,-16(fp)
 1020ee8:	10800217 	ldw	r2,8(r2)
 1020eec:	e0bffb15 	stw	r2,-20(fp)
 1020ef0:	e0bff817 	ldw	r2,-32(fp)
 1020ef4:	e0bff315 	stw	r2,-52(fp)
 1020ef8:	e0bff317 	ldw	r2,-52(fp)
 1020efc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 1020f00:	00000306 	br	1020f10 <OSTaskStkChk+0x184>
        nfree++;
 1020f04:	e0bffa17 	ldw	r2,-24(fp)
 1020f08:	10800044 	addi	r2,r2,1
 1020f0c:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 1020f10:	e0bffb17 	ldw	r2,-20(fp)
 1020f14:	10800017 	ldw	r2,0(r2)
 1020f18:	1005003a 	cmpeq	r2,r2,zero
 1020f1c:	1007883a 	mov	r3,r2
 1020f20:	e0bffb17 	ldw	r2,-20(fp)
 1020f24:	10800104 	addi	r2,r2,4
 1020f28:	e0bffb15 	stw	r2,-20(fp)
 1020f2c:	18803fcc 	andi	r2,r3,255
 1020f30:	1004c03a 	cmpne	r2,r2,zero
 1020f34:	103ff31e 	bne	r2,zero,1020f04 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 1020f38:	e0bffa17 	ldw	r2,-24(fp)
 1020f3c:	1085883a 	add	r2,r2,r2
 1020f40:	1085883a 	add	r2,r2,r2
 1020f44:	1007883a 	mov	r3,r2
 1020f48:	e0bffe17 	ldw	r2,-8(fp)
 1020f4c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 1020f50:	e0fff917 	ldw	r3,-28(fp)
 1020f54:	e0bffa17 	ldw	r2,-24(fp)
 1020f58:	1885c83a 	sub	r2,r3,r2
 1020f5c:	1085883a 	add	r2,r2,r2
 1020f60:	1085883a 	add	r2,r2,r2
 1020f64:	1007883a 	mov	r3,r2
 1020f68:	e0bffe17 	ldw	r2,-8(fp)
 1020f6c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 1020f70:	e03fff15 	stw	zero,-4(fp)
 1020f74:	e0bfff17 	ldw	r2,-4(fp)
}
 1020f78:	e037883a 	mov	sp,fp
 1020f7c:	df000017 	ldw	fp,0(sp)
 1020f80:	dec00104 	addi	sp,sp,4
 1020f84:	f800283a 	ret

01020f88 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 1020f88:	defff404 	addi	sp,sp,-48
 1020f8c:	dfc00b15 	stw	ra,44(sp)
 1020f90:	df000a15 	stw	fp,40(sp)
 1020f94:	df000a04 	addi	fp,sp,40
 1020f98:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1020f9c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 1020fa0:	e0bffe03 	ldbu	r2,-8(fp)
 1020fa4:	10800518 	cmpnei	r2,r2,20
 1020fa8:	1000031e 	bne	r2,zero,1020fb8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 1020fac:	008011c4 	movi	r2,71
 1020fb0:	e0bfff15 	stw	r2,-4(fp)
 1020fb4:	00007906 	br	102119c <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 1020fb8:	e0bffe03 	ldbu	r2,-8(fp)
 1020fbc:	10800530 	cmpltui	r2,r2,20
 1020fc0:	1000061e 	bne	r2,zero,1020fdc <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 1020fc4:	e0bffe03 	ldbu	r2,-8(fp)
 1020fc8:	10803fe0 	cmpeqi	r2,r2,255
 1020fcc:	1000031e 	bne	r2,zero,1020fdc <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 1020fd0:	00800a84 	movi	r2,42
 1020fd4:	e0bfff15 	stw	r2,-4(fp)
 1020fd8:	00007006 	br	102119c <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1020fdc:	0005303a 	rdctl	r2,status
 1020fe0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1020fe4:	e0fff917 	ldw	r3,-28(fp)
 1020fe8:	00bfff84 	movi	r2,-2
 1020fec:	1884703a 	and	r2,r3,r2
 1020ff0:	1001703a 	wrctl	status,r2
  
  return context;
 1020ff4:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 1020ff8:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 1020ffc:	e0bffe03 	ldbu	r2,-8(fp)
 1021000:	10803fd8 	cmpnei	r2,r2,255
 1021004:	1000081e 	bne	r2,zero,1021028 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 1021008:	008040f4 	movhi	r2,259
 102100c:	10a71f04 	addi	r2,r2,-25476
 1021010:	10800017 	ldw	r2,0(r2)
 1021014:	10800c83 	ldbu	r2,50(r2)
 1021018:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 102101c:	00800044 	movi	r2,1
 1021020:	e0bffd05 	stb	r2,-12(fp)
 1021024:	00000b06 	br	1021054 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 1021028:	008040f4 	movhi	r2,259
 102102c:	10a71f04 	addi	r2,r2,-25476
 1021030:	10800017 	ldw	r2,0(r2)
 1021034:	10800c83 	ldbu	r2,50(r2)
 1021038:	10c03fcc 	andi	r3,r2,255
 102103c:	e0bffe03 	ldbu	r2,-8(fp)
 1021040:	1880031e 	bne	r3,r2,1021050 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 1021044:	00800044 	movi	r2,1
 1021048:	e0bffd05 	stb	r2,-12(fp)
 102104c:	00000106 	br	1021054 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 1021050:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1021054:	e0bffe03 	ldbu	r2,-8(fp)
 1021058:	00c040f4 	movhi	r3,259
 102105c:	18dda904 	addi	r3,r3,30372
 1021060:	1085883a 	add	r2,r2,r2
 1021064:	1085883a 	add	r2,r2,r2
 1021068:	10c5883a 	add	r2,r2,r3
 102106c:	10800017 	ldw	r2,0(r2)
 1021070:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 1021074:	e0bffc17 	ldw	r2,-16(fp)
 1021078:	1004c03a 	cmpne	r2,r2,zero
 102107c:	1000071e 	bne	r2,zero,102109c <OSTaskSuspend+0x114>
 1021080:	e0bffa17 	ldw	r2,-24(fp)
 1021084:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1021088:	e0bff817 	ldw	r2,-32(fp)
 102108c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 1021090:	00801204 	movi	r2,72
 1021094:	e0bfff15 	stw	r2,-4(fp)
 1021098:	00004006 	br	102119c <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 102109c:	e0bffc17 	ldw	r2,-16(fp)
 10210a0:	10800058 	cmpnei	r2,r2,1
 10210a4:	1000071e 	bne	r2,zero,10210c4 <OSTaskSuspend+0x13c>
 10210a8:	e0bffa17 	ldw	r2,-24(fp)
 10210ac:	e0bff715 	stw	r2,-36(fp)
 10210b0:	e0bff717 	ldw	r2,-36(fp)
 10210b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 10210b8:	008010c4 	movi	r2,67
 10210bc:	e0bfff15 	stw	r2,-4(fp)
 10210c0:	00003606 	br	102119c <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 10210c4:	e0bffc17 	ldw	r2,-16(fp)
 10210c8:	10800d03 	ldbu	r2,52(r2)
 10210cc:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 10210d0:	e13ffb03 	ldbu	r4,-20(fp)
 10210d4:	e0fffb03 	ldbu	r3,-20(fp)
 10210d8:	008040f4 	movhi	r2,259
 10210dc:	10a71c44 	addi	r2,r2,-25487
 10210e0:	10c5883a 	add	r2,r2,r3
 10210e4:	10800003 	ldbu	r2,0(r2)
 10210e8:	1007883a 	mov	r3,r2
 10210ec:	e0bffc17 	ldw	r2,-16(fp)
 10210f0:	10800d43 	ldbu	r2,53(r2)
 10210f4:	0084303a 	nor	r2,zero,r2
 10210f8:	1884703a 	and	r2,r3,r2
 10210fc:	1007883a 	mov	r3,r2
 1021100:	008040f4 	movhi	r2,259
 1021104:	10a71c44 	addi	r2,r2,-25487
 1021108:	1105883a 	add	r2,r2,r4
 102110c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 1021110:	e0fffb03 	ldbu	r3,-20(fp)
 1021114:	008040f4 	movhi	r2,259
 1021118:	10a71c44 	addi	r2,r2,-25487
 102111c:	10c5883a 	add	r2,r2,r3
 1021120:	10800003 	ldbu	r2,0(r2)
 1021124:	10803fcc 	andi	r2,r2,255
 1021128:	1004c03a 	cmpne	r2,r2,zero
 102112c:	10000c1e 	bne	r2,zero,1021160 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 1021130:	e0bffc17 	ldw	r2,-16(fp)
 1021134:	10800d83 	ldbu	r2,54(r2)
 1021138:	0084303a 	nor	r2,zero,r2
 102113c:	1007883a 	mov	r3,r2
 1021140:	008040f4 	movhi	r2,259
 1021144:	10a71c04 	addi	r2,r2,-25488
 1021148:	10800003 	ldbu	r2,0(r2)
 102114c:	1884703a 	and	r2,r3,r2
 1021150:	1007883a 	mov	r3,r2
 1021154:	008040f4 	movhi	r2,259
 1021158:	10a71c04 	addi	r2,r2,-25488
 102115c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 1021160:	e0bffc17 	ldw	r2,-16(fp)
 1021164:	10800c03 	ldbu	r2,48(r2)
 1021168:	10800214 	ori	r2,r2,8
 102116c:	1007883a 	mov	r3,r2
 1021170:	e0bffc17 	ldw	r2,-16(fp)
 1021174:	10c00c05 	stb	r3,48(r2)
 1021178:	e0bffa17 	ldw	r2,-24(fp)
 102117c:	e0bff615 	stw	r2,-40(fp)
 1021180:	e0bff617 	ldw	r2,-40(fp)
 1021184:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 1021188:	e0bffd03 	ldbu	r2,-12(fp)
 102118c:	10800058 	cmpnei	r2,r2,1
 1021190:	1000011e 	bne	r2,zero,1021198 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 1021194:	101b0800 	call	101b080 <OS_Sched>
    }
    return (OS_ERR_NONE);
 1021198:	e03fff15 	stw	zero,-4(fp)
 102119c:	e0bfff17 	ldw	r2,-4(fp)
}
 10211a0:	e037883a 	mov	sp,fp
 10211a4:	dfc00117 	ldw	ra,4(sp)
 10211a8:	df000017 	ldw	fp,0(sp)
 10211ac:	dec00204 	addi	sp,sp,8
 10211b0:	f800283a 	ret

010211b4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 10211b4:	defff504 	addi	sp,sp,-44
 10211b8:	dfc00a15 	stw	ra,40(sp)
 10211bc:	df000915 	stw	fp,36(sp)
 10211c0:	df000904 	addi	fp,sp,36
 10211c4:	e17ffe15 	stw	r5,-8(fp)
 10211c8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10211cc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 10211d0:	e0bffd03 	ldbu	r2,-12(fp)
 10211d4:	10800570 	cmpltui	r2,r2,21
 10211d8:	1000061e 	bne	r2,zero,10211f4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 10211dc:	e0bffd03 	ldbu	r2,-12(fp)
 10211e0:	10803fe0 	cmpeqi	r2,r2,255
 10211e4:	1000031e 	bne	r2,zero,10211f4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 10211e8:	00800a84 	movi	r2,42
 10211ec:	e0bfff15 	stw	r2,-4(fp)
 10211f0:	00003b06 	br	10212e0 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 10211f4:	e0bffe17 	ldw	r2,-8(fp)
 10211f8:	1004c03a 	cmpne	r2,r2,zero
 10211fc:	1000031e 	bne	r2,zero,102120c <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 1021200:	00800244 	movi	r2,9
 1021204:	e0bfff15 	stw	r2,-4(fp)
 1021208:	00003506 	br	10212e0 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102120c:	0005303a 	rdctl	r2,status
 1021210:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1021214:	e0fffa17 	ldw	r3,-24(fp)
 1021218:	00bfff84 	movi	r2,-2
 102121c:	1884703a 	and	r2,r3,r2
 1021220:	1001703a 	wrctl	status,r2
  
  return context;
 1021224:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1021228:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 102122c:	e0bffd03 	ldbu	r2,-12(fp)
 1021230:	10803fd8 	cmpnei	r2,r2,255
 1021234:	1000051e 	bne	r2,zero,102124c <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 1021238:	008040f4 	movhi	r2,259
 102123c:	10a71f04 	addi	r2,r2,-25476
 1021240:	10800017 	ldw	r2,0(r2)
 1021244:	10800c83 	ldbu	r2,50(r2)
 1021248:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 102124c:	e0bffd03 	ldbu	r2,-12(fp)
 1021250:	00c040f4 	movhi	r3,259
 1021254:	18dda904 	addi	r3,r3,30372
 1021258:	1085883a 	add	r2,r2,r2
 102125c:	1085883a 	add	r2,r2,r2
 1021260:	10c5883a 	add	r2,r2,r3
 1021264:	10800017 	ldw	r2,0(r2)
 1021268:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 102126c:	e0bffc17 	ldw	r2,-16(fp)
 1021270:	1004c03a 	cmpne	r2,r2,zero
 1021274:	1000071e 	bne	r2,zero,1021294 <OSTaskQuery+0xe0>
 1021278:	e0bffb17 	ldw	r2,-20(fp)
 102127c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1021280:	e0bff917 	ldw	r2,-28(fp)
 1021284:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 1021288:	00800a44 	movi	r2,41
 102128c:	e0bfff15 	stw	r2,-4(fp)
 1021290:	00001306 	br	10212e0 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 1021294:	e0bffc17 	ldw	r2,-16(fp)
 1021298:	10800058 	cmpnei	r2,r2,1
 102129c:	1000071e 	bne	r2,zero,10212bc <OSTaskQuery+0x108>
 10212a0:	e0bffb17 	ldw	r2,-20(fp)
 10212a4:	e0bff815 	stw	r2,-32(fp)
 10212a8:	e0bff817 	ldw	r2,-32(fp)
 10212ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 10212b0:	008010c4 	movi	r2,67
 10212b4:	e0bfff15 	stw	r2,-4(fp)
 10212b8:	00000906 	br	10212e0 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 10212bc:	e13ffe17 	ldw	r4,-8(fp)
 10212c0:	e17ffc17 	ldw	r5,-16(fp)
 10212c4:	01801b04 	movi	r6,108
 10212c8:	101b0140 	call	101b014 <OS_MemCopy>
 10212cc:	e0bffb17 	ldw	r2,-20(fp)
 10212d0:	e0bff715 	stw	r2,-36(fp)
 10212d4:	e0bff717 	ldw	r2,-36(fp)
 10212d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10212dc:	e03fff15 	stw	zero,-4(fp)
 10212e0:	e0bfff17 	ldw	r2,-4(fp)
}
 10212e4:	e037883a 	mov	sp,fp
 10212e8:	dfc00117 	ldw	ra,4(sp)
 10212ec:	df000017 	ldw	fp,0(sp)
 10212f0:	dec00204 	addi	sp,sp,8
 10212f4:	f800283a 	ret

010212f8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 10212f8:	defffc04 	addi	sp,sp,-16
 10212fc:	df000315 	stw	fp,12(sp)
 1021300:	df000304 	addi	fp,sp,12
 1021304:	e13ffd15 	stw	r4,-12(fp)
 1021308:	e17ffe15 	stw	r5,-8(fp)
 102130c:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 1021310:	e0bfff0b 	ldhu	r2,-4(fp)
 1021314:	1080004c 	andi	r2,r2,1
 1021318:	10803fcc 	andi	r2,r2,255
 102131c:	1005003a 	cmpeq	r2,r2,zero
 1021320:	1000101e 	bne	r2,zero,1021364 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 1021324:	e0bfff0b 	ldhu	r2,-4(fp)
 1021328:	1080008c 	andi	r2,r2,2
 102132c:	1005003a 	cmpeq	r2,r2,zero
 1021330:	10000c1e 	bne	r2,zero,1021364 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 1021334:	00000806 	br	1021358 <OS_TaskStkClr+0x60>
                size--;
 1021338:	e0bffe17 	ldw	r2,-8(fp)
 102133c:	10bfffc4 	addi	r2,r2,-1
 1021340:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 1021344:	e0bffd17 	ldw	r2,-12(fp)
 1021348:	10000015 	stw	zero,0(r2)
 102134c:	e0bffd17 	ldw	r2,-12(fp)
 1021350:	10800104 	addi	r2,r2,4
 1021354:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 1021358:	e0bffe17 	ldw	r2,-8(fp)
 102135c:	1004c03a 	cmpne	r2,r2,zero
 1021360:	103ff51e 	bne	r2,zero,1021338 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 1021364:	e037883a 	mov	sp,fp
 1021368:	df000017 	ldw	fp,0(sp)
 102136c:	dec00104 	addi	sp,sp,4
 1021370:	f800283a 	ret

01021374 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 1021374:	defff904 	addi	sp,sp,-28
 1021378:	dfc00615 	stw	ra,24(sp)
 102137c:	df000515 	stw	fp,20(sp)
 1021380:	df000504 	addi	fp,sp,20
 1021384:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1021388:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 102138c:	008040f4 	movhi	r2,259
 1021390:	10a71e04 	addi	r2,r2,-25480
 1021394:	10800003 	ldbu	r2,0(r2)
 1021398:	10803fcc 	andi	r2,r2,255
 102139c:	1004c03a 	cmpne	r2,r2,zero
 10213a0:	1000421e 	bne	r2,zero,10214ac <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 10213a4:	e0bfff0b 	ldhu	r2,-4(fp)
 10213a8:	1005003a 	cmpeq	r2,r2,zero
 10213ac:	10003f1e 	bne	r2,zero,10214ac <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10213b0:	0005303a 	rdctl	r2,status
 10213b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10213b8:	e0fffc17 	ldw	r3,-16(fp)
 10213bc:	00bfff84 	movi	r2,-2
 10213c0:	1884703a 	and	r2,r3,r2
 10213c4:	1001703a 	wrctl	status,r2
  
  return context;
 10213c8:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 10213cc:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 10213d0:	008040f4 	movhi	r2,259
 10213d4:	10a71f04 	addi	r2,r2,-25476
 10213d8:	10800017 	ldw	r2,0(r2)
 10213dc:	10800d03 	ldbu	r2,52(r2)
 10213e0:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 10213e4:	e13ffe03 	ldbu	r4,-8(fp)
 10213e8:	e0fffe03 	ldbu	r3,-8(fp)
 10213ec:	008040f4 	movhi	r2,259
 10213f0:	10a71c44 	addi	r2,r2,-25487
 10213f4:	10c5883a 	add	r2,r2,r3
 10213f8:	10800003 	ldbu	r2,0(r2)
 10213fc:	1007883a 	mov	r3,r2
 1021400:	008040f4 	movhi	r2,259
 1021404:	10a71f04 	addi	r2,r2,-25476
 1021408:	10800017 	ldw	r2,0(r2)
 102140c:	10800d43 	ldbu	r2,53(r2)
 1021410:	0084303a 	nor	r2,zero,r2
 1021414:	1884703a 	and	r2,r3,r2
 1021418:	1007883a 	mov	r3,r2
 102141c:	008040f4 	movhi	r2,259
 1021420:	10a71c44 	addi	r2,r2,-25487
 1021424:	1105883a 	add	r2,r2,r4
 1021428:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 102142c:	e0fffe03 	ldbu	r3,-8(fp)
 1021430:	008040f4 	movhi	r2,259
 1021434:	10a71c44 	addi	r2,r2,-25487
 1021438:	10c5883a 	add	r2,r2,r3
 102143c:	10800003 	ldbu	r2,0(r2)
 1021440:	10803fcc 	andi	r2,r2,255
 1021444:	1004c03a 	cmpne	r2,r2,zero
 1021448:	10000e1e 	bne	r2,zero,1021484 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 102144c:	008040f4 	movhi	r2,259
 1021450:	10a71f04 	addi	r2,r2,-25476
 1021454:	10800017 	ldw	r2,0(r2)
 1021458:	10800d83 	ldbu	r2,54(r2)
 102145c:	0084303a 	nor	r2,zero,r2
 1021460:	1007883a 	mov	r3,r2
 1021464:	008040f4 	movhi	r2,259
 1021468:	10a71c04 	addi	r2,r2,-25488
 102146c:	10800003 	ldbu	r2,0(r2)
 1021470:	1884703a 	and	r2,r3,r2
 1021474:	1007883a 	mov	r3,r2
 1021478:	008040f4 	movhi	r2,259
 102147c:	10a71c04 	addi	r2,r2,-25488
 1021480:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 1021484:	008040f4 	movhi	r2,259
 1021488:	10a71f04 	addi	r2,r2,-25476
 102148c:	10c00017 	ldw	r3,0(r2)
 1021490:	e0bfff0b 	ldhu	r2,-4(fp)
 1021494:	18800b8d 	sth	r2,46(r3)
 1021498:	e0bffd17 	ldw	r2,-12(fp)
 102149c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10214a0:	e0bffb17 	ldw	r2,-20(fp)
 10214a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 10214a8:	101b0800 	call	101b080 <OS_Sched>
    }
}
 10214ac:	e037883a 	mov	sp,fp
 10214b0:	dfc00117 	ldw	ra,4(sp)
 10214b4:	df000017 	ldw	fp,0(sp)
 10214b8:	dec00204 	addi	sp,sp,8
 10214bc:	f800283a 	ret

010214c0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 10214c0:	defff604 	addi	sp,sp,-40
 10214c4:	dfc00915 	stw	ra,36(sp)
 10214c8:	df000815 	stw	fp,32(sp)
 10214cc:	dc000715 	stw	r16,28(sp)
 10214d0:	df000704 	addi	fp,sp,28
 10214d4:	e13ffb05 	stb	r4,-20(fp)
 10214d8:	e17ffc05 	stb	r5,-16(fp)
 10214dc:	e1bffd05 	stb	r6,-12(fp)
 10214e0:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10214e4:	008040f4 	movhi	r2,259
 10214e8:	10a71e04 	addi	r2,r2,-25480
 10214ec:	10800003 	ldbu	r2,0(r2)
 10214f0:	10803fcc 	andi	r2,r2,255
 10214f4:	1005003a 	cmpeq	r2,r2,zero
 10214f8:	1000031e 	bne	r2,zero,1021508 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 10214fc:	00801544 	movi	r2,85
 1021500:	e0bfff15 	stw	r2,-4(fp)
 1021504:	00004406 	br	1021618 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 1021508:	e0bffb03 	ldbu	r2,-20(fp)
 102150c:	1004c03a 	cmpne	r2,r2,zero
 1021510:	10000c1e 	bne	r2,zero,1021544 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
 1021514:	e0bffc03 	ldbu	r2,-16(fp)
 1021518:	1004c03a 	cmpne	r2,r2,zero
 102151c:	1000091e 	bne	r2,zero,1021544 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
 1021520:	e0bffd03 	ldbu	r2,-12(fp)
 1021524:	1004c03a 	cmpne	r2,r2,zero
 1021528:	1000061e 	bne	r2,zero,1021544 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
 102152c:	e0bffe0b 	ldhu	r2,-8(fp)
 1021530:	1004c03a 	cmpne	r2,r2,zero
 1021534:	1000031e 	bne	r2,zero,1021544 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
 1021538:	00801504 	movi	r2,84
 102153c:	e0bfff15 	stw	r2,-4(fp)
 1021540:	00003506 	br	1021618 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
 1021544:	e0bffc03 	ldbu	r2,-16(fp)
 1021548:	10800f30 	cmpltui	r2,r2,60
 102154c:	1000031e 	bne	r2,zero,102155c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 1021550:	00801444 	movi	r2,81
 1021554:	e0bfff15 	stw	r2,-4(fp)
 1021558:	00002f06 	br	1021618 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
 102155c:	e0bffd03 	ldbu	r2,-12(fp)
 1021560:	10800f30 	cmpltui	r2,r2,60
 1021564:	1000031e 	bne	r2,zero,1021574 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
 1021568:	00801484 	movi	r2,82
 102156c:	e0bfff15 	stw	r2,-4(fp)
 1021570:	00002906 	br	1021618 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
 1021574:	e0bffe0b 	ldhu	r2,-8(fp)
 1021578:	1080fa30 	cmpltui	r2,r2,1000
 102157c:	1000031e 	bne	r2,zero,102158c <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
 1021580:	008014c4 	movi	r2,83
 1021584:	e0bfff15 	stw	r2,-4(fp)
 1021588:	00002306 	br	1021618 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 102158c:	e0bffb03 	ldbu	r2,-20(fp)
 1021590:	10c38424 	muli	r3,r2,3600
 1021594:	e0bffc03 	ldbu	r2,-16(fp)
 1021598:	10800f24 	muli	r2,r2,60
 102159c:	1887883a 	add	r3,r3,r2
 10215a0:	e0bffd03 	ldbu	r2,-12(fp)
 10215a4:	1885883a 	add	r2,r3,r2
 10215a8:	1400fa24 	muli	r16,r2,1000
 10215ac:	e0bffe0b 	ldhu	r2,-8(fp)
 10215b0:	1100fa24 	muli	r4,r2,1000
 10215b4:	0140fa04 	movi	r5,1000
 10215b8:	1017ffc0 	call	1017ffc <__udivsi3>
 10215bc:	8085883a 	add	r2,r16,r2
 10215c0:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 10215c4:	e0bffa17 	ldw	r2,-24(fp)
 10215c8:	1004d43a 	srli	r2,r2,16
 10215cc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 10215d0:	e0bffa17 	ldw	r2,-24(fp)
 10215d4:	10bfffcc 	andi	r2,r2,65535
 10215d8:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 10215dc:	e0bffa17 	ldw	r2,-24(fp)
 10215e0:	113fffcc 	andi	r4,r2,65535
 10215e4:	10213740 	call	1021374 <OSTimeDly>
    while (loops > 0) {
 10215e8:	00000706 	br	1021608 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
 10215ec:	01200014 	movui	r4,32768
 10215f0:	10213740 	call	1021374 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 10215f4:	01200014 	movui	r4,32768
 10215f8:	10213740 	call	1021374 <OSTimeDly>
        loops--;
 10215fc:	e0bff90b 	ldhu	r2,-28(fp)
 1021600:	10bfffc4 	addi	r2,r2,-1
 1021604:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 1021608:	e0bff90b 	ldhu	r2,-28(fp)
 102160c:	1004c03a 	cmpne	r2,r2,zero
 1021610:	103ff61e 	bne	r2,zero,10215ec <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 1021614:	e03fff15 	stw	zero,-4(fp)
 1021618:	e0bfff17 	ldw	r2,-4(fp)
}
 102161c:	e037883a 	mov	sp,fp
 1021620:	dfc00217 	ldw	ra,8(sp)
 1021624:	df000117 	ldw	fp,4(sp)
 1021628:	dc000017 	ldw	r16,0(sp)
 102162c:	dec00304 	addi	sp,sp,12
 1021630:	f800283a 	ret

01021634 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 1021634:	defff404 	addi	sp,sp,-48
 1021638:	dfc00b15 	stw	ra,44(sp)
 102163c:	df000a15 	stw	fp,40(sp)
 1021640:	df000a04 	addi	fp,sp,40
 1021644:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1021648:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 102164c:	e0bffe03 	ldbu	r2,-8(fp)
 1021650:	10800530 	cmpltui	r2,r2,20
 1021654:	1000031e 	bne	r2,zero,1021664 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 1021658:	00800a84 	movi	r2,42
 102165c:	e0bfff15 	stw	r2,-4(fp)
 1021660:	00007206 	br	102182c <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1021664:	0005303a 	rdctl	r2,status
 1021668:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102166c:	e0fffb17 	ldw	r3,-20(fp)
 1021670:	00bfff84 	movi	r2,-2
 1021674:	1884703a 	and	r2,r3,r2
 1021678:	1001703a 	wrctl	status,r2
  
  return context;
 102167c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1021680:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 1021684:	e0bffe03 	ldbu	r2,-8(fp)
 1021688:	00c040f4 	movhi	r3,259
 102168c:	18dda904 	addi	r3,r3,30372
 1021690:	1085883a 	add	r2,r2,r2
 1021694:	1085883a 	add	r2,r2,r2
 1021698:	10c5883a 	add	r2,r2,r3
 102169c:	10800017 	ldw	r2,0(r2)
 10216a0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 10216a4:	e0bffd17 	ldw	r2,-12(fp)
 10216a8:	1004c03a 	cmpne	r2,r2,zero
 10216ac:	1000071e 	bne	r2,zero,10216cc <OSTimeDlyResume+0x98>
 10216b0:	e0bffc17 	ldw	r2,-16(fp)
 10216b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10216b8:	e0bffa17 	ldw	r2,-24(fp)
 10216bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 10216c0:	008010c4 	movi	r2,67
 10216c4:	e0bfff15 	stw	r2,-4(fp)
 10216c8:	00005806 	br	102182c <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 10216cc:	e0bffd17 	ldw	r2,-12(fp)
 10216d0:	10800058 	cmpnei	r2,r2,1
 10216d4:	1000071e 	bne	r2,zero,10216f4 <OSTimeDlyResume+0xc0>
 10216d8:	e0bffc17 	ldw	r2,-16(fp)
 10216dc:	e0bff915 	stw	r2,-28(fp)
 10216e0:	e0bff917 	ldw	r2,-28(fp)
 10216e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 10216e8:	008010c4 	movi	r2,67
 10216ec:	e0bfff15 	stw	r2,-4(fp)
 10216f0:	00004e06 	br	102182c <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 10216f4:	e0bffd17 	ldw	r2,-12(fp)
 10216f8:	10800b8b 	ldhu	r2,46(r2)
 10216fc:	10bfffcc 	andi	r2,r2,65535
 1021700:	1004c03a 	cmpne	r2,r2,zero
 1021704:	1000071e 	bne	r2,zero,1021724 <OSTimeDlyResume+0xf0>
 1021708:	e0bffc17 	ldw	r2,-16(fp)
 102170c:	e0bff815 	stw	r2,-32(fp)
 1021710:	e0bff817 	ldw	r2,-32(fp)
 1021714:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 1021718:	00801404 	movi	r2,80
 102171c:	e0bfff15 	stw	r2,-4(fp)
 1021720:	00004206 	br	102182c <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 1021724:	e0bffd17 	ldw	r2,-12(fp)
 1021728:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 102172c:	e0bffd17 	ldw	r2,-12(fp)
 1021730:	10800c03 	ldbu	r2,48(r2)
 1021734:	10803fcc 	andi	r2,r2,255
 1021738:	10800dcc 	andi	r2,r2,55
 102173c:	1005003a 	cmpeq	r2,r2,zero
 1021740:	10000b1e 	bne	r2,zero,1021770 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 1021744:	e0bffd17 	ldw	r2,-12(fp)
 1021748:	10c00c03 	ldbu	r3,48(r2)
 102174c:	00bff204 	movi	r2,-56
 1021750:	1884703a 	and	r2,r3,r2
 1021754:	1007883a 	mov	r3,r2
 1021758:	e0bffd17 	ldw	r2,-12(fp)
 102175c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 1021760:	e0fffd17 	ldw	r3,-12(fp)
 1021764:	00800044 	movi	r2,1
 1021768:	18800c45 	stb	r2,49(r3)
 102176c:	00000206 	br	1021778 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 1021770:	e0bffd17 	ldw	r2,-12(fp)
 1021774:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 1021778:	e0bffd17 	ldw	r2,-12(fp)
 102177c:	10800c03 	ldbu	r2,48(r2)
 1021780:	10803fcc 	andi	r2,r2,255
 1021784:	1080020c 	andi	r2,r2,8
 1021788:	1004c03a 	cmpne	r2,r2,zero
 102178c:	1000221e 	bne	r2,zero,1021818 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 1021790:	e0bffd17 	ldw	r2,-12(fp)
 1021794:	10c00d83 	ldbu	r3,54(r2)
 1021798:	008040f4 	movhi	r2,259
 102179c:	10a71c04 	addi	r2,r2,-25488
 10217a0:	10800003 	ldbu	r2,0(r2)
 10217a4:	1884b03a 	or	r2,r3,r2
 10217a8:	1007883a 	mov	r3,r2
 10217ac:	008040f4 	movhi	r2,259
 10217b0:	10a71c04 	addi	r2,r2,-25488
 10217b4:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 10217b8:	e0bffd17 	ldw	r2,-12(fp)
 10217bc:	10800d03 	ldbu	r2,52(r2)
 10217c0:	11003fcc 	andi	r4,r2,255
 10217c4:	e0bffd17 	ldw	r2,-12(fp)
 10217c8:	10800d03 	ldbu	r2,52(r2)
 10217cc:	10c03fcc 	andi	r3,r2,255
 10217d0:	008040f4 	movhi	r2,259
 10217d4:	10a71c44 	addi	r2,r2,-25487
 10217d8:	10c5883a 	add	r2,r2,r3
 10217dc:	10c00003 	ldbu	r3,0(r2)
 10217e0:	e0bffd17 	ldw	r2,-12(fp)
 10217e4:	10800d43 	ldbu	r2,53(r2)
 10217e8:	1884b03a 	or	r2,r3,r2
 10217ec:	1007883a 	mov	r3,r2
 10217f0:	008040f4 	movhi	r2,259
 10217f4:	10a71c44 	addi	r2,r2,-25487
 10217f8:	1105883a 	add	r2,r2,r4
 10217fc:	10c00005 	stb	r3,0(r2)
 1021800:	e0bffc17 	ldw	r2,-16(fp)
 1021804:	e0bff715 	stw	r2,-36(fp)
 1021808:	e0bff717 	ldw	r2,-36(fp)
 102180c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 1021810:	101b0800 	call	101b080 <OS_Sched>
 1021814:	00000406 	br	1021828 <OSTimeDlyResume+0x1f4>
 1021818:	e0bffc17 	ldw	r2,-16(fp)
 102181c:	e0bff615 	stw	r2,-40(fp)
 1021820:	e0bff617 	ldw	r2,-40(fp)
 1021824:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 1021828:	e03fff15 	stw	zero,-4(fp)
 102182c:	e0bfff17 	ldw	r2,-4(fp)
}
 1021830:	e037883a 	mov	sp,fp
 1021834:	dfc00117 	ldw	ra,4(sp)
 1021838:	df000017 	ldw	fp,0(sp)
 102183c:	dec00204 	addi	sp,sp,8
 1021840:	f800283a 	ret

01021844 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 1021844:	defffb04 	addi	sp,sp,-20
 1021848:	df000415 	stw	fp,16(sp)
 102184c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1021850:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1021854:	0005303a 	rdctl	r2,status
 1021858:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102185c:	e0fffd17 	ldw	r3,-12(fp)
 1021860:	00bfff84 	movi	r2,-2
 1021864:	1884703a 	and	r2,r3,r2
 1021868:	1001703a 	wrctl	status,r2
  
  return context;
 102186c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 1021870:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 1021874:	008040f4 	movhi	r2,259
 1021878:	10a72004 	addi	r2,r2,-25472
 102187c:	10800017 	ldw	r2,0(r2)
 1021880:	e0bfff15 	stw	r2,-4(fp)
 1021884:	e0bffe17 	ldw	r2,-8(fp)
 1021888:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102188c:	e0bffc17 	ldw	r2,-16(fp)
 1021890:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 1021894:	e0bfff17 	ldw	r2,-4(fp)
}
 1021898:	e037883a 	mov	sp,fp
 102189c:	df000017 	ldw	fp,0(sp)
 10218a0:	dec00104 	addi	sp,sp,4
 10218a4:	f800283a 	ret

010218a8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 10218a8:	defffb04 	addi	sp,sp,-20
 10218ac:	df000415 	stw	fp,16(sp)
 10218b0:	df000404 	addi	fp,sp,16
 10218b4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10218b8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10218bc:	0005303a 	rdctl	r2,status
 10218c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10218c4:	e0fffd17 	ldw	r3,-12(fp)
 10218c8:	00bfff84 	movi	r2,-2
 10218cc:	1884703a 	and	r2,r3,r2
 10218d0:	1001703a 	wrctl	status,r2
  
  return context;
 10218d4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 10218d8:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 10218dc:	00c040f4 	movhi	r3,259
 10218e0:	18e72004 	addi	r3,r3,-25472
 10218e4:	e0bfff17 	ldw	r2,-4(fp)
 10218e8:	18800015 	stw	r2,0(r3)
 10218ec:	e0bffe17 	ldw	r2,-8(fp)
 10218f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10218f4:	e0bffc17 	ldw	r2,-16(fp)
 10218f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 10218fc:	e037883a 	mov	sp,fp
 1021900:	df000017 	ldw	fp,0(sp)
 1021904:	dec00104 	addi	sp,sp,4
 1021908:	f800283a 	ret

0102190c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 102190c:	defffd04 	addi	sp,sp,-12
 1021910:	dfc00215 	stw	ra,8(sp)
 1021914:	df000115 	stw	fp,4(sp)
 1021918:	df000104 	addi	fp,sp,4
 102191c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 1021920:	10239040 	call	1023904 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1021924:	00800044 	movi	r2,1
 1021928:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 102192c:	e037883a 	mov	sp,fp
 1021930:	dfc00117 	ldw	ra,4(sp)
 1021934:	df000017 	ldw	fp,0(sp)
 1021938:	dec00204 	addi	sp,sp,8
 102193c:	f800283a 	ret

01021940 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1021940:	defffe04 	addi	sp,sp,-8
 1021944:	dfc00115 	stw	ra,4(sp)
 1021948:	df000015 	stw	fp,0(sp)
 102194c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 1021950:	01008034 	movhi	r4,512
 1021954:	21041004 	addi	r4,r4,4160
 1021958:	000b883a 	mov	r5,zero
 102195c:	000d883a 	mov	r6,zero
 1021960:	01c0fa04 	movi	r7,1000
 1021964:	10227c40 	call	10227c4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1021968:	010040b4 	movhi	r4,258
 102196c:	211af404 	addi	r4,r4,27600
 1021970:	000b883a 	mov	r5,zero
 1021974:	01800384 	movi	r6,14
 1021978:	1021b400 	call	1021b40 <altera_avalon_jtag_uart_init>
 102197c:	010040b4 	movhi	r4,258
 1021980:	211aea04 	addi	r4,r4,27560
 1021984:	10219c00 	call	10219c0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_DE0_NANO_ADC_INIT ( ADC, adc);
 1021988:	010040b4 	movhi	r4,258
 102198c:	211f0504 	addi	r4,r4,31764
 1021990:	10219c00 	call	10219c0 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( UART_MOTOR, uart_motor);
 1021994:	010040b4 	movhi	r4,258
 1021998:	211f1004 	addi	r4,r4,31808
 102199c:	10219c00 	call	10219c0 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( UART_WIFI, uart_wifi);
 10219a0:	010040b4 	movhi	r4,258
 10219a4:	211f1b04 	addi	r4,r4,31852
 10219a8:	10219c00 	call	10219c0 <alt_dev_reg>
}
 10219ac:	e037883a 	mov	sp,fp
 10219b0:	dfc00117 	ldw	ra,4(sp)
 10219b4:	df000017 	ldw	fp,0(sp)
 10219b8:	dec00204 	addi	sp,sp,8
 10219bc:	f800283a 	ret

010219c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 10219c0:	defffd04 	addi	sp,sp,-12
 10219c4:	dfc00215 	stw	ra,8(sp)
 10219c8:	df000115 	stw	fp,4(sp)
 10219cc:	df000104 	addi	fp,sp,4
 10219d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 10219d4:	e13fff17 	ldw	r4,-4(fp)
 10219d8:	014040b4 	movhi	r5,258
 10219dc:	295f9104 	addi	r5,r5,32324
 10219e0:	1022efc0 	call	1022efc <alt_dev_llist_insert>
}
 10219e4:	e037883a 	mov	sp,fp
 10219e8:	dfc00117 	ldw	ra,4(sp)
 10219ec:	df000017 	ldw	fp,0(sp)
 10219f0:	dec00204 	addi	sp,sp,8
 10219f4:	f800283a 	ret

010219f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10219f8:	defffa04 	addi	sp,sp,-24
 10219fc:	dfc00515 	stw	ra,20(sp)
 1021a00:	df000415 	stw	fp,16(sp)
 1021a04:	df000404 	addi	fp,sp,16
 1021a08:	e13ffd15 	stw	r4,-12(fp)
 1021a0c:	e17ffe15 	stw	r5,-8(fp)
 1021a10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1021a14:	e0bffd17 	ldw	r2,-12(fp)
 1021a18:	10800017 	ldw	r2,0(r2)
 1021a1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1021a20:	e0bffc17 	ldw	r2,-16(fp)
 1021a24:	11000a04 	addi	r4,r2,40
 1021a28:	e0bffd17 	ldw	r2,-12(fp)
 1021a2c:	11c00217 	ldw	r7,8(r2)
 1021a30:	e17ffe17 	ldw	r5,-8(fp)
 1021a34:	e1bfff17 	ldw	r6,-4(fp)
 1021a38:	10221b40 	call	10221b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1021a3c:	e037883a 	mov	sp,fp
 1021a40:	dfc00117 	ldw	ra,4(sp)
 1021a44:	df000017 	ldw	fp,0(sp)
 1021a48:	dec00204 	addi	sp,sp,8
 1021a4c:	f800283a 	ret

01021a50 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1021a50:	defffa04 	addi	sp,sp,-24
 1021a54:	dfc00515 	stw	ra,20(sp)
 1021a58:	df000415 	stw	fp,16(sp)
 1021a5c:	df000404 	addi	fp,sp,16
 1021a60:	e13ffd15 	stw	r4,-12(fp)
 1021a64:	e17ffe15 	stw	r5,-8(fp)
 1021a68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1021a6c:	e0bffd17 	ldw	r2,-12(fp)
 1021a70:	10800017 	ldw	r2,0(r2)
 1021a74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1021a78:	e0bffc17 	ldw	r2,-16(fp)
 1021a7c:	11000a04 	addi	r4,r2,40
 1021a80:	e0bffd17 	ldw	r2,-12(fp)
 1021a84:	11c00217 	ldw	r7,8(r2)
 1021a88:	e17ffe17 	ldw	r5,-8(fp)
 1021a8c:	e1bfff17 	ldw	r6,-4(fp)
 1021a90:	10224740 	call	1022474 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1021a94:	e037883a 	mov	sp,fp
 1021a98:	dfc00117 	ldw	ra,4(sp)
 1021a9c:	df000017 	ldw	fp,0(sp)
 1021aa0:	dec00204 	addi	sp,sp,8
 1021aa4:	f800283a 	ret

01021aa8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1021aa8:	defffc04 	addi	sp,sp,-16
 1021aac:	dfc00315 	stw	ra,12(sp)
 1021ab0:	df000215 	stw	fp,8(sp)
 1021ab4:	df000204 	addi	fp,sp,8
 1021ab8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1021abc:	e0bfff17 	ldw	r2,-4(fp)
 1021ac0:	10800017 	ldw	r2,0(r2)
 1021ac4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1021ac8:	e0bffe17 	ldw	r2,-8(fp)
 1021acc:	11000a04 	addi	r4,r2,40
 1021ad0:	e0bfff17 	ldw	r2,-4(fp)
 1021ad4:	11400217 	ldw	r5,8(r2)
 1021ad8:	102204c0 	call	102204c <altera_avalon_jtag_uart_close>
}
 1021adc:	e037883a 	mov	sp,fp
 1021ae0:	dfc00117 	ldw	ra,4(sp)
 1021ae4:	df000017 	ldw	fp,0(sp)
 1021ae8:	dec00204 	addi	sp,sp,8
 1021aec:	f800283a 	ret

01021af0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1021af0:	defffa04 	addi	sp,sp,-24
 1021af4:	dfc00515 	stw	ra,20(sp)
 1021af8:	df000415 	stw	fp,16(sp)
 1021afc:	df000404 	addi	fp,sp,16
 1021b00:	e13ffd15 	stw	r4,-12(fp)
 1021b04:	e17ffe15 	stw	r5,-8(fp)
 1021b08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1021b0c:	e0bffd17 	ldw	r2,-12(fp)
 1021b10:	10800017 	ldw	r2,0(r2)
 1021b14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1021b18:	e0bffc17 	ldw	r2,-16(fp)
 1021b1c:	11000a04 	addi	r4,r2,40
 1021b20:	e17ffe17 	ldw	r5,-8(fp)
 1021b24:	e1bfff17 	ldw	r6,-4(fp)
 1021b28:	10220c00 	call	10220c0 <altera_avalon_jtag_uart_ioctl>
}
 1021b2c:	e037883a 	mov	sp,fp
 1021b30:	dfc00117 	ldw	ra,4(sp)
 1021b34:	df000017 	ldw	fp,0(sp)
 1021b38:	dec00204 	addi	sp,sp,8
 1021b3c:	f800283a 	ret

01021b40 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1021b40:	defff504 	addi	sp,sp,-44
 1021b44:	dfc00a15 	stw	ra,40(sp)
 1021b48:	df000915 	stw	fp,36(sp)
 1021b4c:	df000904 	addi	fp,sp,36
 1021b50:	e13ffd15 	stw	r4,-12(fp)
 1021b54:	e17ffe15 	stw	r5,-8(fp)
 1021b58:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 1021b5c:	e0bffd17 	ldw	r2,-12(fp)
 1021b60:	10800c04 	addi	r2,r2,48
 1021b64:	e0bffb15 	stw	r2,-20(fp)
 1021b68:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 1021b6c:	e13ffc0b 	ldhu	r4,-16(fp)
 1021b70:	e17ffc84 	addi	r5,fp,-14
 1021b74:	101bc280 	call	101bc28 <OSFlagCreate>
 1021b78:	1007883a 	mov	r3,r2
 1021b7c:	e0bffb17 	ldw	r2,-20(fp)
 1021b80:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 1021b84:	e0bffd17 	ldw	r2,-12(fp)
 1021b88:	10800a04 	addi	r2,r2,40
 1021b8c:	e0bff915 	stw	r2,-28(fp)
 1021b90:	00800044 	movi	r2,1
 1021b94:	e0bffa0d 	sth	r2,-24(fp)
 1021b98:	e13ffa0b 	ldhu	r4,-24(fp)
 1021b9c:	101ee2c0 	call	101ee2c <OSSemCreate>
 1021ba0:	1007883a 	mov	r3,r2
 1021ba4:	e0bff917 	ldw	r2,-28(fp)
 1021ba8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 1021bac:	e0bffd17 	ldw	r2,-12(fp)
 1021bb0:	10800b04 	addi	r2,r2,44
 1021bb4:	e0bff715 	stw	r2,-36(fp)
 1021bb8:	00800044 	movi	r2,1
 1021bbc:	e0bff80d 	sth	r2,-32(fp)
 1021bc0:	e13ff80b 	ldhu	r4,-32(fp)
 1021bc4:	101ee2c0 	call	101ee2c <OSSemCreate>
 1021bc8:	1007883a 	mov	r3,r2
 1021bcc:	e0bff717 	ldw	r2,-36(fp)
 1021bd0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1021bd4:	e0fffd17 	ldw	r3,-12(fp)
 1021bd8:	00800044 	movi	r2,1
 1021bdc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1021be0:	e0bffd17 	ldw	r2,-12(fp)
 1021be4:	10800017 	ldw	r2,0(r2)
 1021be8:	11000104 	addi	r4,r2,4
 1021bec:	e0bffd17 	ldw	r2,-12(fp)
 1021bf0:	10800817 	ldw	r2,32(r2)
 1021bf4:	1007883a 	mov	r3,r2
 1021bf8:	2005883a 	mov	r2,r4
 1021bfc:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1021c00:	e13fff17 	ldw	r4,-4(fp)
 1021c04:	e17ffd17 	ldw	r5,-12(fp)
 1021c08:	018040b4 	movhi	r6,258
 1021c0c:	31871c04 	addi	r6,r6,7280
 1021c10:	10232d80 	call	10232d8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1021c14:	e0bffd17 	ldw	r2,-12(fp)
 1021c18:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1021c1c:	e0bffd17 	ldw	r2,-12(fp)
 1021c20:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1021c24:	008040f4 	movhi	r2,259
 1021c28:	10a72504 	addi	r2,r2,-25452
 1021c2c:	10800017 	ldw	r2,0(r2)
 1021c30:	100b883a 	mov	r5,r2
 1021c34:	018040b4 	movhi	r6,258
 1021c38:	3187ce04 	addi	r6,r6,7992
 1021c3c:	e1fffd17 	ldw	r7,-12(fp)
 1021c40:	1022d640 	call	1022d64 <alt_alarm_start>
 1021c44:	1004403a 	cmpge	r2,r2,zero
 1021c48:	1000041e 	bne	r2,zero,1021c5c <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1021c4c:	e0fffd17 	ldw	r3,-12(fp)
 1021c50:	00a00034 	movhi	r2,32768
 1021c54:	10bfffc4 	addi	r2,r2,-1
 1021c58:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1021c5c:	e037883a 	mov	sp,fp
 1021c60:	dfc00117 	ldw	ra,4(sp)
 1021c64:	df000017 	ldw	fp,0(sp)
 1021c68:	dec00204 	addi	sp,sp,8
 1021c6c:	f800283a 	ret

01021c70 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1021c70:	defff104 	addi	sp,sp,-60
 1021c74:	dfc00e15 	stw	ra,56(sp)
 1021c78:	df000d15 	stw	fp,52(sp)
 1021c7c:	df000d04 	addi	fp,sp,52
 1021c80:	e13ffe15 	stw	r4,-8(fp)
 1021c84:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1021c88:	e0bffe17 	ldw	r2,-8(fp)
 1021c8c:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
 1021c90:	e0bffc17 	ldw	r2,-16(fp)
 1021c94:	10800017 	ldw	r2,0(r2)
 1021c98:	e0bffb15 	stw	r2,-20(fp)
 1021c9c:	00000006 	br	1021ca0 <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1021ca0:	e0bffb17 	ldw	r2,-20(fp)
 1021ca4:	10800104 	addi	r2,r2,4
 1021ca8:	10800037 	ldwio	r2,0(r2)
 1021cac:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1021cb0:	e0bffa17 	ldw	r2,-24(fp)
 1021cb4:	1080c00c 	andi	r2,r2,768
 1021cb8:	1005003a 	cmpeq	r2,r2,zero
 1021cbc:	1000991e 	bne	r2,zero,1021f24 <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1021cc0:	e0bffa17 	ldw	r2,-24(fp)
 1021cc4:	1080400c 	andi	r2,r2,256
 1021cc8:	1005003a 	cmpeq	r2,r2,zero
 1021ccc:	1000481e 	bne	r2,zero,1021df0 <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1021cd0:	00800074 	movhi	r2,1
 1021cd4:	e0bff915 	stw	r2,-28(fp)
 1021cd8:	00000006 	br	1021cdc <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1021cdc:	e0bffc17 	ldw	r2,-16(fp)
 1021ce0:	10800d17 	ldw	r2,52(r2)
 1021ce4:	10800044 	addi	r2,r2,1
 1021ce8:	1081ffcc 	andi	r2,r2,2047
 1021cec:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
 1021cf0:	e0bffc17 	ldw	r2,-16(fp)
 1021cf4:	10c00e17 	ldw	r3,56(r2)
 1021cf8:	e0bff817 	ldw	r2,-32(fp)
 1021cfc:	18802826 	beq	r3,r2,1021da0 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1021d00:	e0bffb17 	ldw	r2,-20(fp)
 1021d04:	10800037 	ldwio	r2,0(r2)
 1021d08:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1021d0c:	e0bff917 	ldw	r2,-28(fp)
 1021d10:	10a0000c 	andi	r2,r2,32768
 1021d14:	1005003a 	cmpeq	r2,r2,zero
 1021d18:	1000211e 	bne	r2,zero,1021da0 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1021d1c:	e0bffc17 	ldw	r2,-16(fp)
 1021d20:	10c00d17 	ldw	r3,52(r2)
 1021d24:	e0bff917 	ldw	r2,-28(fp)
 1021d28:	1009883a 	mov	r4,r2
 1021d2c:	e0bffc17 	ldw	r2,-16(fp)
 1021d30:	1885883a 	add	r2,r3,r2
 1021d34:	10801104 	addi	r2,r2,68
 1021d38:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1021d3c:	e0bffc17 	ldw	r2,-16(fp)
 1021d40:	10800d17 	ldw	r2,52(r2)
 1021d44:	10800044 	addi	r2,r2,1
 1021d48:	10c1ffcc 	andi	r3,r2,2047
 1021d4c:	e0bffc17 	ldw	r2,-16(fp)
 1021d50:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 1021d54:	e0bffc17 	ldw	r2,-16(fp)
 1021d58:	10800c17 	ldw	r2,48(r2)
 1021d5c:	e0bff515 	stw	r2,-44(fp)
 1021d60:	00800044 	movi	r2,1
 1021d64:	e0bff60d 	sth	r2,-40(fp)
 1021d68:	00800044 	movi	r2,1
 1021d6c:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 1021d70:	008040f4 	movhi	r2,259
 1021d74:	10a71044 	addi	r2,r2,-25535
 1021d78:	10800003 	ldbu	r2,0(r2)
 1021d7c:	10803fcc 	andi	r2,r2,255
 1021d80:	1005003a 	cmpeq	r2,r2,zero
 1021d84:	103fd51e 	bne	r2,zero,1021cdc <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
 1021d88:	e17ff60b 	ldhu	r5,-40(fp)
 1021d8c:	e1bff683 	ldbu	r6,-38(fp)
 1021d90:	e1fffd04 	addi	r7,fp,-12
 1021d94:	e13ff517 	ldw	r4,-44(fp)
 1021d98:	101c9500 	call	101c950 <OSFlagPost>
    return err;
 1021d9c:	003fcf06 	br	1021cdc <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1021da0:	e0bff917 	ldw	r2,-28(fp)
 1021da4:	10bfffec 	andhi	r2,r2,65535
 1021da8:	1005003a 	cmpeq	r2,r2,zero
 1021dac:	1000101e 	bne	r2,zero,1021df0 <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1021db0:	e0bffc17 	ldw	r2,-16(fp)
 1021db4:	10c00817 	ldw	r3,32(r2)
 1021db8:	00bfff84 	movi	r2,-2
 1021dbc:	1886703a 	and	r3,r3,r2
 1021dc0:	e0bffc17 	ldw	r2,-16(fp)
 1021dc4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1021dc8:	e0bffb17 	ldw	r2,-20(fp)
 1021dcc:	11000104 	addi	r4,r2,4
 1021dd0:	e0bffc17 	ldw	r2,-16(fp)
 1021dd4:	10800817 	ldw	r2,32(r2)
 1021dd8:	1007883a 	mov	r3,r2
 1021ddc:	2005883a 	mov	r2,r4
 1021de0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1021de4:	e0bffb17 	ldw	r2,-20(fp)
 1021de8:	10800104 	addi	r2,r2,4
 1021dec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1021df0:	e0bffa17 	ldw	r2,-24(fp)
 1021df4:	1080800c 	andi	r2,r2,512
 1021df8:	1005003a 	cmpeq	r2,r2,zero
 1021dfc:	103fa81e 	bne	r2,zero,1021ca0 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1021e00:	e0bffa17 	ldw	r2,-24(fp)
 1021e04:	10bfffec 	andhi	r2,r2,65535
 1021e08:	1004d43a 	srli	r2,r2,16
 1021e0c:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1021e10:	00002706 	br	1021eb0 <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1021e14:	e13ffb17 	ldw	r4,-20(fp)
 1021e18:	e0bffc17 	ldw	r2,-16(fp)
 1021e1c:	10c01017 	ldw	r3,64(r2)
 1021e20:	e0bffc17 	ldw	r2,-16(fp)
 1021e24:	1885883a 	add	r2,r3,r2
 1021e28:	10821104 	addi	r2,r2,2116
 1021e2c:	10800003 	ldbu	r2,0(r2)
 1021e30:	10c03fcc 	andi	r3,r2,255
 1021e34:	18c0201c 	xori	r3,r3,128
 1021e38:	18ffe004 	addi	r3,r3,-128
 1021e3c:	2005883a 	mov	r2,r4
 1021e40:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1021e44:	e0bffc17 	ldw	r2,-16(fp)
 1021e48:	10801017 	ldw	r2,64(r2)
 1021e4c:	10800044 	addi	r2,r2,1
 1021e50:	10c1ffcc 	andi	r3,r2,2047
 1021e54:	e0bffc17 	ldw	r2,-16(fp)
 1021e58:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 1021e5c:	e0bffc17 	ldw	r2,-16(fp)
 1021e60:	10800c17 	ldw	r2,48(r2)
 1021e64:	e0bff315 	stw	r2,-52(fp)
 1021e68:	00800084 	movi	r2,2
 1021e6c:	e0bff40d 	sth	r2,-48(fp)
 1021e70:	00800044 	movi	r2,1
 1021e74:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 1021e78:	008040f4 	movhi	r2,259
 1021e7c:	10a71044 	addi	r2,r2,-25535
 1021e80:	10800003 	ldbu	r2,0(r2)
 1021e84:	10803fcc 	andi	r2,r2,255
 1021e88:	1005003a 	cmpeq	r2,r2,zero
 1021e8c:	1000051e 	bne	r2,zero,1021ea4 <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
 1021e90:	e17ff40b 	ldhu	r5,-48(fp)
 1021e94:	e1bff483 	ldbu	r6,-46(fp)
 1021e98:	e1fffd44 	addi	r7,fp,-11
 1021e9c:	e13ff317 	ldw	r4,-52(fp)
 1021ea0:	101c9500 	call	101c950 <OSFlagPost>

        space--;
 1021ea4:	e0bff717 	ldw	r2,-36(fp)
 1021ea8:	10bfffc4 	addi	r2,r2,-1
 1021eac:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1021eb0:	e0bff717 	ldw	r2,-36(fp)
 1021eb4:	1005003a 	cmpeq	r2,r2,zero
 1021eb8:	1000051e 	bne	r2,zero,1021ed0 <altera_avalon_jtag_uart_irq+0x260>
 1021ebc:	e0bffc17 	ldw	r2,-16(fp)
 1021ec0:	10c01017 	ldw	r3,64(r2)
 1021ec4:	e0bffc17 	ldw	r2,-16(fp)
 1021ec8:	10800f17 	ldw	r2,60(r2)
 1021ecc:	18bfd11e 	bne	r3,r2,1021e14 <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1021ed0:	e0bff717 	ldw	r2,-36(fp)
 1021ed4:	1005003a 	cmpeq	r2,r2,zero
 1021ed8:	103f711e 	bne	r2,zero,1021ca0 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1021edc:	e0bffc17 	ldw	r2,-16(fp)
 1021ee0:	10c00817 	ldw	r3,32(r2)
 1021ee4:	00bfff44 	movi	r2,-3
 1021ee8:	1886703a 	and	r3,r3,r2
 1021eec:	e0bffc17 	ldw	r2,-16(fp)
 1021ef0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1021ef4:	e0bffc17 	ldw	r2,-16(fp)
 1021ef8:	10800017 	ldw	r2,0(r2)
 1021efc:	11000104 	addi	r4,r2,4
 1021f00:	e0bffc17 	ldw	r2,-16(fp)
 1021f04:	10800817 	ldw	r2,32(r2)
 1021f08:	1007883a 	mov	r3,r2
 1021f0c:	2005883a 	mov	r2,r4
 1021f10:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1021f14:	e0bffb17 	ldw	r2,-20(fp)
 1021f18:	10800104 	addi	r2,r2,4
 1021f1c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1021f20:	003f5f06 	br	1021ca0 <altera_avalon_jtag_uart_irq+0x30>
}
 1021f24:	e037883a 	mov	sp,fp
 1021f28:	dfc00117 	ldw	ra,4(sp)
 1021f2c:	df000017 	ldw	fp,0(sp)
 1021f30:	dec00204 	addi	sp,sp,8
 1021f34:	f800283a 	ret

01021f38 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1021f38:	defff804 	addi	sp,sp,-32
 1021f3c:	dfc00715 	stw	ra,28(sp)
 1021f40:	df000615 	stw	fp,24(sp)
 1021f44:	df000604 	addi	fp,sp,24
 1021f48:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1021f4c:	e0bfff17 	ldw	r2,-4(fp)
 1021f50:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1021f54:	e0bffd17 	ldw	r2,-12(fp)
 1021f58:	10800017 	ldw	r2,0(r2)
 1021f5c:	10800104 	addi	r2,r2,4
 1021f60:	10800037 	ldwio	r2,0(r2)
 1021f64:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1021f68:	e0bffc17 	ldw	r2,-16(fp)
 1021f6c:	1081000c 	andi	r2,r2,1024
 1021f70:	1005003a 	cmpeq	r2,r2,zero
 1021f74:	10000c1e 	bne	r2,zero,1021fa8 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1021f78:	e0bffd17 	ldw	r2,-12(fp)
 1021f7c:	10800017 	ldw	r2,0(r2)
 1021f80:	11000104 	addi	r4,r2,4
 1021f84:	e0bffd17 	ldw	r2,-12(fp)
 1021f88:	10800817 	ldw	r2,32(r2)
 1021f8c:	10810014 	ori	r2,r2,1024
 1021f90:	1007883a 	mov	r3,r2
 1021f94:	2005883a 	mov	r2,r4
 1021f98:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1021f9c:	e0bffd17 	ldw	r2,-12(fp)
 1021fa0:	10000915 	stw	zero,36(r2)
 1021fa4:	00002106 	br	102202c <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1021fa8:	e0bffd17 	ldw	r2,-12(fp)
 1021fac:	10c00917 	ldw	r3,36(r2)
 1021fb0:	00a00034 	movhi	r2,32768
 1021fb4:	10bfff04 	addi	r2,r2,-4
 1021fb8:	10c01c36 	bltu	r2,r3,102202c <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 1021fbc:	e0bffd17 	ldw	r2,-12(fp)
 1021fc0:	10800917 	ldw	r2,36(r2)
 1021fc4:	10c00044 	addi	r3,r2,1
 1021fc8:	e0bffd17 	ldw	r2,-12(fp)
 1021fcc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 1021fd0:	e0bffd17 	ldw	r2,-12(fp)
 1021fd4:	10c00917 	ldw	r3,36(r2)
 1021fd8:	e0bffd17 	ldw	r2,-12(fp)
 1021fdc:	10800117 	ldw	r2,4(r2)
 1021fe0:	18801236 	bltu	r3,r2,102202c <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 1021fe4:	e0bffd17 	ldw	r2,-12(fp)
 1021fe8:	10800c17 	ldw	r2,48(r2)
 1021fec:	e0bffa15 	stw	r2,-24(fp)
 1021ff0:	00800104 	movi	r2,4
 1021ff4:	e0bffb0d 	sth	r2,-20(fp)
 1021ff8:	00800044 	movi	r2,1
 1021ffc:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 1022000:	008040f4 	movhi	r2,259
 1022004:	10a71044 	addi	r2,r2,-25535
 1022008:	10800003 	ldbu	r2,0(r2)
 102200c:	10803fcc 	andi	r2,r2,255
 1022010:	1005003a 	cmpeq	r2,r2,zero
 1022014:	1000051e 	bne	r2,zero,102202c <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 1022018:	e17ffb0b 	ldhu	r5,-20(fp)
 102201c:	e1bffb83 	ldbu	r6,-18(fp)
 1022020:	e1fffe04 	addi	r7,fp,-8
 1022024:	e13ffa17 	ldw	r4,-24(fp)
 1022028:	101c9500 	call	101c950 <OSFlagPost>
 102202c:	008040f4 	movhi	r2,259
 1022030:	10a72504 	addi	r2,r2,-25452
 1022034:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 1022038:	e037883a 	mov	sp,fp
 102203c:	dfc00117 	ldw	ra,4(sp)
 1022040:	df000017 	ldw	fp,0(sp)
 1022044:	dec00204 	addi	sp,sp,8
 1022048:	f800283a 	ret

0102204c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 102204c:	defffc04 	addi	sp,sp,-16
 1022050:	df000315 	stw	fp,12(sp)
 1022054:	df000304 	addi	fp,sp,12
 1022058:	e13ffd15 	stw	r4,-12(fp)
 102205c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1022060:	00000706 	br	1022080 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1022064:	e0bffe17 	ldw	r2,-8(fp)
 1022068:	1090000c 	andi	r2,r2,16384
 102206c:	1005003a 	cmpeq	r2,r2,zero
 1022070:	1000031e 	bne	r2,zero,1022080 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1022074:	00bffd44 	movi	r2,-11
 1022078:	e0bfff15 	stw	r2,-4(fp)
 102207c:	00000b06 	br	10220ac <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1022080:	e0bffd17 	ldw	r2,-12(fp)
 1022084:	10c01017 	ldw	r3,64(r2)
 1022088:	e0bffd17 	ldw	r2,-12(fp)
 102208c:	10800f17 	ldw	r2,60(r2)
 1022090:	18800526 	beq	r3,r2,10220a8 <altera_avalon_jtag_uart_close+0x5c>
 1022094:	e0bffd17 	ldw	r2,-12(fp)
 1022098:	10c00917 	ldw	r3,36(r2)
 102209c:	e0bffd17 	ldw	r2,-12(fp)
 10220a0:	10800117 	ldw	r2,4(r2)
 10220a4:	18bfef36 	bltu	r3,r2,1022064 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 10220a8:	e03fff15 	stw	zero,-4(fp)
 10220ac:	e0bfff17 	ldw	r2,-4(fp)
}
 10220b0:	e037883a 	mov	sp,fp
 10220b4:	df000017 	ldw	fp,0(sp)
 10220b8:	dec00104 	addi	sp,sp,4
 10220bc:	f800283a 	ret

010220c0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 10220c0:	defff804 	addi	sp,sp,-32
 10220c4:	df000715 	stw	fp,28(sp)
 10220c8:	df000704 	addi	fp,sp,28
 10220cc:	e13ffb15 	stw	r4,-20(fp)
 10220d0:	e17ffc15 	stw	r5,-16(fp)
 10220d4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 10220d8:	00bff9c4 	movi	r2,-25
 10220dc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 10220e0:	e0bffc17 	ldw	r2,-16(fp)
 10220e4:	e0bfff15 	stw	r2,-4(fp)
 10220e8:	e0ffff17 	ldw	r3,-4(fp)
 10220ec:	189a8060 	cmpeqi	r2,r3,27137
 10220f0:	1000041e 	bne	r2,zero,1022104 <altera_avalon_jtag_uart_ioctl+0x44>
 10220f4:	e0ffff17 	ldw	r3,-4(fp)
 10220f8:	189a80a0 	cmpeqi	r2,r3,27138
 10220fc:	10001b1e 	bne	r2,zero,102216c <altera_avalon_jtag_uart_ioctl+0xac>
 1022100:	00002706 	br	10221a0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1022104:	e0bffb17 	ldw	r2,-20(fp)
 1022108:	10c00117 	ldw	r3,4(r2)
 102210c:	00a00034 	movhi	r2,32768
 1022110:	10bfffc4 	addi	r2,r2,-1
 1022114:	18802226 	beq	r3,r2,10221a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1022118:	e0bffd17 	ldw	r2,-12(fp)
 102211c:	10800017 	ldw	r2,0(r2)
 1022120:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1022124:	e0bff917 	ldw	r2,-28(fp)
 1022128:	10800090 	cmplti	r2,r2,2
 102212c:	1000071e 	bne	r2,zero,102214c <altera_avalon_jtag_uart_ioctl+0x8c>
 1022130:	e0fff917 	ldw	r3,-28(fp)
 1022134:	00a00034 	movhi	r2,32768
 1022138:	10bfffc4 	addi	r2,r2,-1
 102213c:	18800326 	beq	r3,r2,102214c <altera_avalon_jtag_uart_ioctl+0x8c>
 1022140:	e0bff917 	ldw	r2,-28(fp)
 1022144:	e0bffe15 	stw	r2,-8(fp)
 1022148:	00000306 	br	1022158 <altera_avalon_jtag_uart_ioctl+0x98>
 102214c:	00e00034 	movhi	r3,32768
 1022150:	18ffff84 	addi	r3,r3,-2
 1022154:	e0fffe15 	stw	r3,-8(fp)
 1022158:	e0bffb17 	ldw	r2,-20(fp)
 102215c:	e0fffe17 	ldw	r3,-8(fp)
 1022160:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1022164:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1022168:	00000d06 	br	10221a0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 102216c:	e0bffb17 	ldw	r2,-20(fp)
 1022170:	10c00117 	ldw	r3,4(r2)
 1022174:	00a00034 	movhi	r2,32768
 1022178:	10bfffc4 	addi	r2,r2,-1
 102217c:	18800826 	beq	r3,r2,10221a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1022180:	e13ffd17 	ldw	r4,-12(fp)
 1022184:	e0bffb17 	ldw	r2,-20(fp)
 1022188:	10c00917 	ldw	r3,36(r2)
 102218c:	e0bffb17 	ldw	r2,-20(fp)
 1022190:	10800117 	ldw	r2,4(r2)
 1022194:	1885803a 	cmpltu	r2,r3,r2
 1022198:	20800015 	stw	r2,0(r4)
      rc = 0;
 102219c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 10221a0:	e0bffa17 	ldw	r2,-24(fp)
}
 10221a4:	e037883a 	mov	sp,fp
 10221a8:	df000017 	ldw	fp,0(sp)
 10221ac:	dec00104 	addi	sp,sp,4
 10221b0:	f800283a 	ret

010221b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 10221b4:	deffeb04 	addi	sp,sp,-84
 10221b8:	dfc01415 	stw	ra,80(sp)
 10221bc:	df001315 	stw	fp,76(sp)
 10221c0:	df001304 	addi	fp,sp,76
 10221c4:	e13ffb15 	stw	r4,-20(fp)
 10221c8:	e17ffc15 	stw	r5,-16(fp)
 10221cc:	e1bffd15 	stw	r6,-12(fp)
 10221d0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 10221d4:	e0bffc17 	ldw	r2,-16(fp)
 10221d8:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 10221dc:	e0bffb17 	ldw	r2,-20(fp)
 10221e0:	10800a17 	ldw	r2,40(r2)
 10221e4:	e0bff315 	stw	r2,-52(fp)
 10221e8:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 10221ec:	e17ff40b 	ldhu	r5,-48(fp)
 10221f0:	e1bffa44 	addi	r6,fp,-23
 10221f4:	e13ff317 	ldw	r4,-52(fp)
 10221f8:	101f1e00 	call	101f1e0 <OSSemPend>

  while (space > 0)
 10221fc:	00006406 	br	1022390 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1022200:	e0bffb17 	ldw	r2,-20(fp)
 1022204:	10800d17 	ldw	r2,52(r2)
 1022208:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 102220c:	e0bffb17 	ldw	r2,-20(fp)
 1022210:	10800e17 	ldw	r2,56(r2)
 1022214:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 1022218:	e0fff617 	ldw	r3,-40(fp)
 102221c:	e0bff517 	ldw	r2,-44(fp)
 1022220:	18800536 	bltu	r3,r2,1022238 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 1022224:	e0bff617 	ldw	r2,-40(fp)
 1022228:	e0fff517 	ldw	r3,-44(fp)
 102222c:	10c5c83a 	sub	r2,r2,r3
 1022230:	e0bff715 	stw	r2,-36(fp)
 1022234:	00000406 	br	1022248 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1022238:	00820004 	movi	r2,2048
 102223c:	e0fff517 	ldw	r3,-44(fp)
 1022240:	10c5c83a 	sub	r2,r2,r3
 1022244:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 1022248:	e0bff717 	ldw	r2,-36(fp)
 102224c:	1005003a 	cmpeq	r2,r2,zero
 1022250:	10001f1e 	bne	r2,zero,10222d0 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 1022254:	e0fffd17 	ldw	r3,-12(fp)
 1022258:	e0bff717 	ldw	r2,-36(fp)
 102225c:	1880022e 	bgeu	r3,r2,1022268 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 1022260:	e0bffd17 	ldw	r2,-12(fp)
 1022264:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1022268:	e0bffb17 	ldw	r2,-20(fp)
 102226c:	10c01104 	addi	r3,r2,68
 1022270:	e0bff517 	ldw	r2,-44(fp)
 1022274:	1887883a 	add	r3,r3,r2
 1022278:	e0bff917 	ldw	r2,-28(fp)
 102227c:	1009883a 	mov	r4,r2
 1022280:	180b883a 	mov	r5,r3
 1022284:	e1bff717 	ldw	r6,-36(fp)
 1022288:	100eb6c0 	call	100eb6c <memcpy>
      ptr   += n;
 102228c:	e0fff717 	ldw	r3,-36(fp)
 1022290:	e0bff917 	ldw	r2,-28(fp)
 1022294:	10c5883a 	add	r2,r2,r3
 1022298:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 102229c:	e0fffd17 	ldw	r3,-12(fp)
 10222a0:	e0bff717 	ldw	r2,-36(fp)
 10222a4:	1885c83a 	sub	r2,r3,r2
 10222a8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10222ac:	e0fff517 	ldw	r3,-44(fp)
 10222b0:	e0bff717 	ldw	r2,-36(fp)
 10222b4:	1885883a 	add	r2,r3,r2
 10222b8:	10c1ffcc 	andi	r3,r2,2047
 10222bc:	e0bffb17 	ldw	r2,-20(fp)
 10222c0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 10222c4:	e0bffd17 	ldw	r2,-12(fp)
 10222c8:	10800048 	cmpgei	r2,r2,1
 10222cc:	103fcc1e 	bne	r2,zero,1022200 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 10222d0:	e0fff917 	ldw	r3,-28(fp)
 10222d4:	e0bffc17 	ldw	r2,-16(fp)
 10222d8:	1880301e 	bne	r3,r2,102239c <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 10222dc:	e0bffe17 	ldw	r2,-8(fp)
 10222e0:	1090000c 	andi	r2,r2,16384
 10222e4:	1004c03a 	cmpne	r2,r2,zero
 10222e8:	10002c1e 	bne	r2,zero,102239c <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 10222ec:	008040f4 	movhi	r2,259
 10222f0:	10a71044 	addi	r2,r2,-25535
 10222f4:	10800003 	ldbu	r2,0(r2)
 10222f8:	10803fcc 	andi	r2,r2,255
 10222fc:	10800058 	cmpnei	r2,r2,1
 1022300:	1000161e 	bne	r2,zero,102235c <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 1022304:	e0bffb17 	ldw	r2,-20(fp)
 1022308:	10800c17 	ldw	r2,48(r2)
 102230c:	e0bff015 	stw	r2,-64(fp)
 1022310:	00800144 	movi	r2,5
 1022314:	e0bff10d 	sth	r2,-60(fp)
 1022318:	00bfe0c4 	movi	r2,-125
 102231c:	e0bff185 	stb	r2,-58(fp)
 1022320:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 1022324:	008040f4 	movhi	r2,259
 1022328:	10a71044 	addi	r2,r2,-25535
 102232c:	10800003 	ldbu	r2,0(r2)
 1022330:	10803fcc 	andi	r2,r2,255
 1022334:	1005003a 	cmpeq	r2,r2,zero
 1022338:	1000111e 	bne	r2,zero,1022380 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 102233c:	e17ff10b 	ldhu	r5,-60(fp)
 1022340:	e1bff183 	ldbu	r6,-58(fp)
 1022344:	e1fff20b 	ldhu	r7,-56(fp)
 1022348:	e0bffa04 	addi	r2,fp,-24
 102234c:	d8800015 	stw	r2,0(sp)
 1022350:	e13ff017 	ldw	r4,-64(fp)
 1022354:	101c2a40 	call	101c2a4 <OSFlagPend>
    return err;
 1022358:	00000906 	br	1022380 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 102235c:	e0bffb17 	ldw	r2,-20(fp)
 1022360:	10c00d17 	ldw	r3,52(r2)
 1022364:	e0bff617 	ldw	r2,-40(fp)
 1022368:	1880051e 	bne	r3,r2,1022380 <altera_avalon_jtag_uart_read+0x1cc>
 102236c:	e0bffb17 	ldw	r2,-20(fp)
 1022370:	10c00917 	ldw	r3,36(r2)
 1022374:	e0bffb17 	ldw	r2,-20(fp)
 1022378:	10800117 	ldw	r2,4(r2)
 102237c:	18bff736 	bltu	r3,r2,102235c <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1022380:	e0bffb17 	ldw	r2,-20(fp)
 1022384:	10c00d17 	ldw	r3,52(r2)
 1022388:	e0bff617 	ldw	r2,-40(fp)
 102238c:	18800326 	beq	r3,r2,102239c <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1022390:	e0bffd17 	ldw	r2,-12(fp)
 1022394:	10800048 	cmpgei	r2,r2,1
 1022398:	103f991e 	bne	r2,zero,1022200 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 102239c:	e0bffb17 	ldw	r2,-20(fp)
 10223a0:	11000a17 	ldw	r4,40(r2)
 10223a4:	101f5d80 	call	101f5d8 <OSSemPost>

  if (ptr != buffer)
 10223a8:	e0fff917 	ldw	r3,-28(fp)
 10223ac:	e0bffc17 	ldw	r2,-16(fp)
 10223b0:	18801926 	beq	r3,r2,1022418 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10223b4:	0005303a 	rdctl	r2,status
 10223b8:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10223bc:	e0ffef17 	ldw	r3,-68(fp)
 10223c0:	00bfff84 	movi	r2,-2
 10223c4:	1884703a 	and	r2,r3,r2
 10223c8:	1001703a 	wrctl	status,r2
  
  return context;
 10223cc:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10223d0:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10223d4:	e0bffb17 	ldw	r2,-20(fp)
 10223d8:	10800817 	ldw	r2,32(r2)
 10223dc:	10c00054 	ori	r3,r2,1
 10223e0:	e0bffb17 	ldw	r2,-20(fp)
 10223e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10223e8:	e0bffb17 	ldw	r2,-20(fp)
 10223ec:	10800017 	ldw	r2,0(r2)
 10223f0:	11000104 	addi	r4,r2,4
 10223f4:	e0bffb17 	ldw	r2,-20(fp)
 10223f8:	10800817 	ldw	r2,32(r2)
 10223fc:	1007883a 	mov	r3,r2
 1022400:	2005883a 	mov	r2,r4
 1022404:	10c00035 	stwio	r3,0(r2)
 1022408:	e0bff817 	ldw	r2,-32(fp)
 102240c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1022410:	e0bfee17 	ldw	r2,-72(fp)
 1022414:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1022418:	e0fff917 	ldw	r3,-28(fp)
 102241c:	e0bffc17 	ldw	r2,-16(fp)
 1022420:	18800526 	beq	r3,r2,1022438 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 1022424:	e0fff917 	ldw	r3,-28(fp)
 1022428:	e0bffc17 	ldw	r2,-16(fp)
 102242c:	1887c83a 	sub	r3,r3,r2
 1022430:	e0ffff15 	stw	r3,-4(fp)
 1022434:	00000906 	br	102245c <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 1022438:	e0bffe17 	ldw	r2,-8(fp)
 102243c:	1090000c 	andi	r2,r2,16384
 1022440:	1005003a 	cmpeq	r2,r2,zero
 1022444:	1000031e 	bne	r2,zero,1022454 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 1022448:	00bffd44 	movi	r2,-11
 102244c:	e0bfff15 	stw	r2,-4(fp)
 1022450:	00000206 	br	102245c <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 1022454:	00bffec4 	movi	r2,-5
 1022458:	e0bfff15 	stw	r2,-4(fp)
 102245c:	e0bfff17 	ldw	r2,-4(fp)
}
 1022460:	e037883a 	mov	sp,fp
 1022464:	dfc00117 	ldw	ra,4(sp)
 1022468:	df000017 	ldw	fp,0(sp)
 102246c:	dec00204 	addi	sp,sp,8
 1022470:	f800283a 	ret

01022474 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1022474:	deffeb04 	addi	sp,sp,-84
 1022478:	dfc01415 	stw	ra,80(sp)
 102247c:	df001315 	stw	fp,76(sp)
 1022480:	df001304 	addi	fp,sp,76
 1022484:	e13ffb15 	stw	r4,-20(fp)
 1022488:	e17ffc15 	stw	r5,-16(fp)
 102248c:	e1bffd15 	stw	r6,-12(fp)
 1022490:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1022494:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1022498:	e0bffc17 	ldw	r2,-16(fp)
 102249c:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 10224a0:	e0bffb17 	ldw	r2,-20(fp)
 10224a4:	10800b17 	ldw	r2,44(r2)
 10224a8:	e0bff315 	stw	r2,-52(fp)
 10224ac:	e03ff40d 	sth	zero,-48(fp)
 10224b0:	e17ff40b 	ldhu	r5,-48(fp)
 10224b4:	e1bffa04 	addi	r6,fp,-24
 10224b8:	e13ff317 	ldw	r4,-52(fp)
 10224bc:	101f1e00 	call	101f1e0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10224c0:	00003a06 	br	10225ac <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10224c4:	e0bffb17 	ldw	r2,-20(fp)
 10224c8:	10800f17 	ldw	r2,60(r2)
 10224cc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 10224d0:	e0bffb17 	ldw	r2,-20(fp)
 10224d4:	10801017 	ldw	r2,64(r2)
 10224d8:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 10224dc:	e0fff917 	ldw	r3,-28(fp)
 10224e0:	e0bff817 	ldw	r2,-32(fp)
 10224e4:	1880062e 	bgeu	r3,r2,1022500 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 10224e8:	e0fff817 	ldw	r3,-32(fp)
 10224ec:	e0bff917 	ldw	r2,-28(fp)
 10224f0:	1885c83a 	sub	r2,r3,r2
 10224f4:	10bfffc4 	addi	r2,r2,-1
 10224f8:	e0bff715 	stw	r2,-36(fp)
 10224fc:	00000c06 	br	1022530 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 1022500:	e0bff817 	ldw	r2,-32(fp)
 1022504:	1005003a 	cmpeq	r2,r2,zero
 1022508:	1000051e 	bne	r2,zero,1022520 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 102250c:	00820004 	movi	r2,2048
 1022510:	e0fff917 	ldw	r3,-28(fp)
 1022514:	10c5c83a 	sub	r2,r2,r3
 1022518:	e0bff715 	stw	r2,-36(fp)
 102251c:	00000406 	br	1022530 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1022520:	0081ffc4 	movi	r2,2047
 1022524:	e0fff917 	ldw	r3,-28(fp)
 1022528:	10c5c83a 	sub	r2,r2,r3
 102252c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 1022530:	e0bff717 	ldw	r2,-36(fp)
 1022534:	1005003a 	cmpeq	r2,r2,zero
 1022538:	10001f1e 	bne	r2,zero,10225b8 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 102253c:	e0fffd17 	ldw	r3,-12(fp)
 1022540:	e0bff717 	ldw	r2,-36(fp)
 1022544:	1880022e 	bgeu	r3,r2,1022550 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 1022548:	e0bffd17 	ldw	r2,-12(fp)
 102254c:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1022550:	e0bffb17 	ldw	r2,-20(fp)
 1022554:	10c21104 	addi	r3,r2,2116
 1022558:	e0bff917 	ldw	r2,-28(fp)
 102255c:	1885883a 	add	r2,r3,r2
 1022560:	e0fffc17 	ldw	r3,-16(fp)
 1022564:	1009883a 	mov	r4,r2
 1022568:	180b883a 	mov	r5,r3
 102256c:	e1bff717 	ldw	r6,-36(fp)
 1022570:	100eb6c0 	call	100eb6c <memcpy>
      ptr   += n;
 1022574:	e0fff717 	ldw	r3,-36(fp)
 1022578:	e0bffc17 	ldw	r2,-16(fp)
 102257c:	10c5883a 	add	r2,r2,r3
 1022580:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1022584:	e0fffd17 	ldw	r3,-12(fp)
 1022588:	e0bff717 	ldw	r2,-36(fp)
 102258c:	1885c83a 	sub	r2,r3,r2
 1022590:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1022594:	e0fff917 	ldw	r3,-28(fp)
 1022598:	e0bff717 	ldw	r2,-36(fp)
 102259c:	1885883a 	add	r2,r3,r2
 10225a0:	10c1ffcc 	andi	r3,r2,2047
 10225a4:	e0bffb17 	ldw	r2,-20(fp)
 10225a8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10225ac:	e0bffd17 	ldw	r2,-12(fp)
 10225b0:	10800048 	cmpgei	r2,r2,1
 10225b4:	103fc31e 	bne	r2,zero,10224c4 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10225b8:	0005303a 	rdctl	r2,status
 10225bc:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10225c0:	e0fff217 	ldw	r3,-56(fp)
 10225c4:	00bfff84 	movi	r2,-2
 10225c8:	1884703a 	and	r2,r3,r2
 10225cc:	1001703a 	wrctl	status,r2
  
  return context;
 10225d0:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10225d4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10225d8:	e0bffb17 	ldw	r2,-20(fp)
 10225dc:	10800817 	ldw	r2,32(r2)
 10225e0:	10c00094 	ori	r3,r2,2
 10225e4:	e0bffb17 	ldw	r2,-20(fp)
 10225e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10225ec:	e0bffb17 	ldw	r2,-20(fp)
 10225f0:	10800017 	ldw	r2,0(r2)
 10225f4:	11000104 	addi	r4,r2,4
 10225f8:	e0bffb17 	ldw	r2,-20(fp)
 10225fc:	10800817 	ldw	r2,32(r2)
 1022600:	1007883a 	mov	r3,r2
 1022604:	2005883a 	mov	r2,r4
 1022608:	10c00035 	stwio	r3,0(r2)
 102260c:	e0bff617 	ldw	r2,-40(fp)
 1022610:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1022614:	e0bff117 	ldw	r2,-60(fp)
 1022618:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 102261c:	e0bffd17 	ldw	r2,-12(fp)
 1022620:	10800050 	cmplti	r2,r2,1
 1022624:	10002d1e 	bne	r2,zero,10226dc <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 1022628:	e0bffe17 	ldw	r2,-8(fp)
 102262c:	1090000c 	andi	r2,r2,16384
 1022630:	1004c03a 	cmpne	r2,r2,zero
 1022634:	10002c1e 	bne	r2,zero,10226e8 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 1022638:	008040f4 	movhi	r2,259
 102263c:	10a71044 	addi	r2,r2,-25535
 1022640:	10800003 	ldbu	r2,0(r2)
 1022644:	10803fcc 	andi	r2,r2,255
 1022648:	10800058 	cmpnei	r2,r2,1
 102264c:	1000161e 	bne	r2,zero,10226a8 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
 1022650:	e0bffb17 	ldw	r2,-20(fp)
 1022654:	10800c17 	ldw	r2,48(r2)
 1022658:	e0bfee15 	stw	r2,-72(fp)
 102265c:	00800184 	movi	r2,6
 1022660:	e0bfef0d 	sth	r2,-68(fp)
 1022664:	00bfe0c4 	movi	r2,-125
 1022668:	e0bfef85 	stb	r2,-66(fp)
 102266c:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 1022670:	008040f4 	movhi	r2,259
 1022674:	10a71044 	addi	r2,r2,-25535
 1022678:	10800003 	ldbu	r2,0(r2)
 102267c:	10803fcc 	andi	r2,r2,255
 1022680:	1005003a 	cmpeq	r2,r2,zero
 1022684:	1000111e 	bne	r2,zero,10226cc <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 1022688:	e17fef0b 	ldhu	r5,-68(fp)
 102268c:	e1bfef83 	ldbu	r6,-66(fp)
 1022690:	e1fff00b 	ldhu	r7,-64(fp)
 1022694:	e0bffa44 	addi	r2,fp,-23
 1022698:	d8800015 	stw	r2,0(sp)
 102269c:	e13fee17 	ldw	r4,-72(fp)
 10226a0:	101c2a40 	call	101c2a4 <OSFlagPend>
    return err;
 10226a4:	00000906 	br	10226cc <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 10226a8:	e0bffb17 	ldw	r2,-20(fp)
 10226ac:	10c01017 	ldw	r3,64(r2)
 10226b0:	e0bff817 	ldw	r2,-32(fp)
 10226b4:	1880051e 	bne	r3,r2,10226cc <altera_avalon_jtag_uart_write+0x258>
 10226b8:	e0bffb17 	ldw	r2,-20(fp)
 10226bc:	10c00917 	ldw	r3,36(r2)
 10226c0:	e0bffb17 	ldw	r2,-20(fp)
 10226c4:	10800117 	ldw	r2,4(r2)
 10226c8:	18bff736 	bltu	r3,r2,10226a8 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 10226cc:	e0bffb17 	ldw	r2,-20(fp)
 10226d0:	10c01017 	ldw	r3,64(r2)
 10226d4:	e0bff817 	ldw	r2,-32(fp)
 10226d8:	18800326 	beq	r3,r2,10226e8 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
 10226dc:	e0bffd17 	ldw	r2,-12(fp)
 10226e0:	10800048 	cmpgei	r2,r2,1
 10226e4:	103fb11e 	bne	r2,zero,10225ac <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 10226e8:	e0bffb17 	ldw	r2,-20(fp)
 10226ec:	11000b17 	ldw	r4,44(r2)
 10226f0:	101f5d80 	call	101f5d8 <OSSemPost>

  if (ptr != start)
 10226f4:	e0fffc17 	ldw	r3,-16(fp)
 10226f8:	e0bff517 	ldw	r2,-44(fp)
 10226fc:	18800526 	beq	r3,r2,1022714 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 1022700:	e0fffc17 	ldw	r3,-16(fp)
 1022704:	e0bff517 	ldw	r2,-44(fp)
 1022708:	1887c83a 	sub	r3,r3,r2
 102270c:	e0ffff15 	stw	r3,-4(fp)
 1022710:	00000906 	br	1022738 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 1022714:	e0bffe17 	ldw	r2,-8(fp)
 1022718:	1090000c 	andi	r2,r2,16384
 102271c:	1005003a 	cmpeq	r2,r2,zero
 1022720:	1000031e 	bne	r2,zero,1022730 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 1022724:	00bffd44 	movi	r2,-11
 1022728:	e0bfff15 	stw	r2,-4(fp)
 102272c:	00000206 	br	1022738 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
 1022730:	00bffec4 	movi	r2,-5
 1022734:	e0bfff15 	stw	r2,-4(fp)
 1022738:	e0bfff17 	ldw	r2,-4(fp)
}
 102273c:	e037883a 	mov	sp,fp
 1022740:	dfc00117 	ldw	ra,4(sp)
 1022744:	df000017 	ldw	fp,0(sp)
 1022748:	dec00204 	addi	sp,sp,8
 102274c:	f800283a 	ret

01022750 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1022750:	defff904 	addi	sp,sp,-28
 1022754:	dfc00615 	stw	ra,24(sp)
 1022758:	df000515 	stw	fp,20(sp)
 102275c:	df000504 	addi	fp,sp,20
 1022760:	e13ffe15 	stw	r4,-8(fp)
 1022764:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1022768:	e0bffe17 	ldw	r2,-8(fp)
 102276c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1022770:	e0bffe17 	ldw	r2,-8(fp)
 1022774:	10800104 	addi	r2,r2,4
 1022778:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102277c:	0005303a 	rdctl	r2,status
 1022780:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1022784:	e0fffc17 	ldw	r3,-16(fp)
 1022788:	00bfff84 	movi	r2,-2
 102278c:	1884703a 	and	r2,r3,r2
 1022790:	1001703a 	wrctl	status,r2
  
  return context;
 1022794:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1022798:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 102279c:	10237f40 	call	10237f4 <alt_tick>
 10227a0:	e0bffd17 	ldw	r2,-12(fp)
 10227a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10227a8:	e0bffb17 	ldw	r2,-20(fp)
 10227ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 10227b0:	e037883a 	mov	sp,fp
 10227b4:	dfc00117 	ldw	ra,4(sp)
 10227b8:	df000017 	ldw	fp,0(sp)
 10227bc:	dec00204 	addi	sp,sp,8
 10227c0:	f800283a 	ret

010227c4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 10227c4:	defff904 	addi	sp,sp,-28
 10227c8:	dfc00615 	stw	ra,24(sp)
 10227cc:	df000515 	stw	fp,20(sp)
 10227d0:	df000504 	addi	fp,sp,20
 10227d4:	e13ffc15 	stw	r4,-16(fp)
 10227d8:	e17ffd15 	stw	r5,-12(fp)
 10227dc:	e1bffe15 	stw	r6,-8(fp)
 10227e0:	e1ffff15 	stw	r7,-4(fp)
 10227e4:	e0bfff17 	ldw	r2,-4(fp)
 10227e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 10227ec:	008040f4 	movhi	r2,259
 10227f0:	10a72504 	addi	r2,r2,-25452
 10227f4:	10800017 	ldw	r2,0(r2)
 10227f8:	1004c03a 	cmpne	r2,r2,zero
 10227fc:	1000041e 	bne	r2,zero,1022810 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1022800:	00c040f4 	movhi	r3,259
 1022804:	18e72504 	addi	r3,r3,-25452
 1022808:	e0bffb17 	ldw	r2,-20(fp)
 102280c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1022810:	e0bffc17 	ldw	r2,-16(fp)
 1022814:	10800104 	addi	r2,r2,4
 1022818:	1007883a 	mov	r3,r2
 102281c:	008001c4 	movi	r2,7
 1022820:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 1022824:	e13ffe17 	ldw	r4,-8(fp)
 1022828:	e17ffc17 	ldw	r5,-16(fp)
 102282c:	018040b4 	movhi	r6,258
 1022830:	3189d404 	addi	r6,r6,10064
 1022834:	10232d80 	call	10232d8 <alt_irq_register>
#endif  
}
 1022838:	e037883a 	mov	sp,fp
 102283c:	dfc00117 	ldw	ra,4(sp)
 1022840:	df000017 	ldw	fp,0(sp)
 1022844:	dec00204 	addi	sp,sp,8
 1022848:	f800283a 	ret

0102284c <alt_up_de0_nano_adc_open_dev>:
#define read_ch4(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_4(((adc)->base))
#define read_ch5(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_5(((adc)->base))
#define read_ch6(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_6(((adc)->base))
#define read_ch7(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_7(((adc)->base))

alt_up_de0_nano_adc_dev* alt_up_de0_nano_adc_open_dev (const char* name){
 102284c:	defffc04 	addi	sp,sp,-16
 1022850:	dfc00315 	stw	ra,12(sp)
 1022854:	df000215 	stw	fp,8(sp)
 1022858:	df000204 	addi	fp,sp,8
 102285c:	e13fff15 	stw	r4,-4(fp)

	alt_up_de0_nano_adc_dev* dev = (alt_up_de0_nano_adc_dev*) alt_find_dev(name, &alt_dev_list);
 1022860:	e13fff17 	ldw	r4,-4(fp)
 1022864:	014040b4 	movhi	r5,258
 1022868:	295f9104 	addi	r5,r5,32324
 102286c:	10230d80 	call	10230d8 <alt_find_dev>
 1022870:	e0bffe15 	stw	r2,-8(fp)
	
	return dev;
 1022874:	e0bffe17 	ldw	r2,-8(fp)
}
 1022878:	e037883a 	mov	sp,fp
 102287c:	dfc00117 	ldw	ra,4(sp)
 1022880:	df000017 	ldw	fp,0(sp)
 1022884:	dec00204 	addi	sp,sp,8
 1022888:	f800283a 	ret

0102288c <alt_up_de0_nano_adc_read>:

unsigned int alt_up_de0_nano_adc_read (alt_up_de0_nano_adc_dev * adc, unsigned channel){
 102288c:	defffb04 	addi	sp,sp,-20
 1022890:	df000415 	stw	fp,16(sp)
 1022894:	df000404 	addi	fp,sp,16
 1022898:	e13ffd15 	stw	r4,-12(fp)
 102289c:	e17ffe15 	stw	r5,-8(fp)

	unsigned int ch = channel % 8;
 10228a0:	e0bffe17 	ldw	r2,-8(fp)
 10228a4:	108001cc 	andi	r2,r2,7
 10228a8:	e0bffc15 	stw	r2,-16(fp)
	
	switch (ch){
 10228ac:	e0bffc17 	ldw	r2,-16(fp)
 10228b0:	10800228 	cmpgeui	r2,r2,8
 10228b4:	10003f1e 	bne	r2,zero,10229b4 <alt_up_de0_nano_adc_read+0x128>
 10228b8:	e0bffc17 	ldw	r2,-16(fp)
 10228bc:	1085883a 	add	r2,r2,r2
 10228c0:	1087883a 	add	r3,r2,r2
 10228c4:	008040b4 	movhi	r2,258
 10228c8:	108a3604 	addi	r2,r2,10456
 10228cc:	1885883a 	add	r2,r3,r2
 10228d0:	10800017 	ldw	r2,0(r2)
 10228d4:	1000683a 	jmp	r2
 10228d8:	010228f8 	rdprs	r4,zero,2211
 10228dc:	0102290c 	andi	r4,zero,2212
 10228e0:	01022924 	muli	r4,zero,2212
 10228e4:	0102293c 	xorhi	r4,zero,2212
 10228e8:	01022954 	movui	r4,2213
 10228ec:	0102296c 	andhi	r4,zero,2213
 10228f0:	01022984 	movi	r4,2214
 10228f4:	0102299c 	xori	r4,zero,2214
		case 0:
			return read_ch0(adc);
 10228f8:	e0bffd17 	ldw	r2,-12(fp)
 10228fc:	10800a17 	ldw	r2,40(r2)
 1022900:	10800037 	ldwio	r2,0(r2)
 1022904:	e0bfff15 	stw	r2,-4(fp)
 1022908:	00002b06 	br	10229b8 <alt_up_de0_nano_adc_read+0x12c>
		case 1:
			return read_ch1(adc);
 102290c:	e0bffd17 	ldw	r2,-12(fp)
 1022910:	10800a17 	ldw	r2,40(r2)
 1022914:	10800104 	addi	r2,r2,4
 1022918:	10800037 	ldwio	r2,0(r2)
 102291c:	e0bfff15 	stw	r2,-4(fp)
 1022920:	00002506 	br	10229b8 <alt_up_de0_nano_adc_read+0x12c>
		case 2:
			return read_ch2(adc);
 1022924:	e0bffd17 	ldw	r2,-12(fp)
 1022928:	10800a17 	ldw	r2,40(r2)
 102292c:	10800204 	addi	r2,r2,8
 1022930:	10800037 	ldwio	r2,0(r2)
 1022934:	e0bfff15 	stw	r2,-4(fp)
 1022938:	00001f06 	br	10229b8 <alt_up_de0_nano_adc_read+0x12c>
		case 3:
			return read_ch3(adc);
 102293c:	e0bffd17 	ldw	r2,-12(fp)
 1022940:	10800a17 	ldw	r2,40(r2)
 1022944:	10800304 	addi	r2,r2,12
 1022948:	10800037 	ldwio	r2,0(r2)
 102294c:	e0bfff15 	stw	r2,-4(fp)
 1022950:	00001906 	br	10229b8 <alt_up_de0_nano_adc_read+0x12c>
		case 4:
			return read_ch4(adc);
 1022954:	e0bffd17 	ldw	r2,-12(fp)
 1022958:	10800a17 	ldw	r2,40(r2)
 102295c:	10800404 	addi	r2,r2,16
 1022960:	10800037 	ldwio	r2,0(r2)
 1022964:	e0bfff15 	stw	r2,-4(fp)
 1022968:	00001306 	br	10229b8 <alt_up_de0_nano_adc_read+0x12c>
		case 5:
			return read_ch5(adc);
 102296c:	e0bffd17 	ldw	r2,-12(fp)
 1022970:	10800a17 	ldw	r2,40(r2)
 1022974:	10800504 	addi	r2,r2,20
 1022978:	10800037 	ldwio	r2,0(r2)
 102297c:	e0bfff15 	stw	r2,-4(fp)
 1022980:	00000d06 	br	10229b8 <alt_up_de0_nano_adc_read+0x12c>
		case 6:
			return read_ch6(adc);
 1022984:	e0bffd17 	ldw	r2,-12(fp)
 1022988:	10800a17 	ldw	r2,40(r2)
 102298c:	10800604 	addi	r2,r2,24
 1022990:	10800037 	ldwio	r2,0(r2)
 1022994:	e0bfff15 	stw	r2,-4(fp)
 1022998:	00000706 	br	10229b8 <alt_up_de0_nano_adc_read+0x12c>
		case 7:
			return read_ch7(adc);
 102299c:	e0bffd17 	ldw	r2,-12(fp)
 10229a0:	10800a17 	ldw	r2,40(r2)
 10229a4:	10800704 	addi	r2,r2,28
 10229a8:	10800037 	ldwio	r2,0(r2)
 10229ac:	e0bfff15 	stw	r2,-4(fp)
 10229b0:	00000106 	br	10229b8 <alt_up_de0_nano_adc_read+0x12c>
		default:
			return 0;
 10229b4:	e03fff15 	stw	zero,-4(fp)
 10229b8:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 10229bc:	e037883a 	mov	sp,fp
 10229c0:	df000017 	ldw	fp,0(sp)
 10229c4:	dec00104 	addi	sp,sp,4
 10229c8:	f800283a 	ret

010229cc <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 10229cc:	defffd04 	addi	sp,sp,-12
 10229d0:	df000215 	stw	fp,8(sp)
 10229d4:	df000204 	addi	fp,sp,8
 10229d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 10229dc:	e0bfff17 	ldw	r2,-4(fp)
 10229e0:	10800a17 	ldw	r2,40(r2)
 10229e4:	10800104 	addi	r2,r2,4
 10229e8:	10800037 	ldwio	r2,0(r2)
 10229ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 10229f0:	e0bffe17 	ldw	r2,-8(fp)
 10229f4:	10800054 	ori	r2,r2,1
 10229f8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 10229fc:	e0bfff17 	ldw	r2,-4(fp)
 1022a00:	10800a17 	ldw	r2,40(r2)
 1022a04:	10800104 	addi	r2,r2,4
 1022a08:	e0fffe17 	ldw	r3,-8(fp)
 1022a0c:	10c00035 	stwio	r3,0(r2)
}
 1022a10:	e037883a 	mov	sp,fp
 1022a14:	df000017 	ldw	fp,0(sp)
 1022a18:	dec00104 	addi	sp,sp,4
 1022a1c:	f800283a 	ret

01022a20 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1022a20:	defffd04 	addi	sp,sp,-12
 1022a24:	df000215 	stw	fp,8(sp)
 1022a28:	df000204 	addi	fp,sp,8
 1022a2c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1022a30:	e0bfff17 	ldw	r2,-4(fp)
 1022a34:	10800a17 	ldw	r2,40(r2)
 1022a38:	10800104 	addi	r2,r2,4
 1022a3c:	10800037 	ldwio	r2,0(r2)
 1022a40:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 1022a44:	e0fffe17 	ldw	r3,-8(fp)
 1022a48:	00bfff84 	movi	r2,-2
 1022a4c:	1884703a 	and	r2,r3,r2
 1022a50:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1022a54:	e0bfff17 	ldw	r2,-4(fp)
 1022a58:	10800a17 	ldw	r2,40(r2)
 1022a5c:	10800104 	addi	r2,r2,4
 1022a60:	e0fffe17 	ldw	r3,-8(fp)
 1022a64:	10c00035 	stwio	r3,0(r2)
}
 1022a68:	e037883a 	mov	sp,fp
 1022a6c:	df000017 	ldw	fp,0(sp)
 1022a70:	dec00104 	addi	sp,sp,4
 1022a74:	f800283a 	ret

01022a78 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 1022a78:	defffd04 	addi	sp,sp,-12
 1022a7c:	df000215 	stw	fp,8(sp)
 1022a80:	df000204 	addi	fp,sp,8
 1022a84:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 1022a88:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 1022a8c:	e0bfff17 	ldw	r2,-4(fp)
 1022a90:	10800a17 	ldw	r2,40(r2)
 1022a94:	10800084 	addi	r2,r2,2
 1022a98:	1080002b 	ldhuio	r2,0(r2)
 1022a9c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 1022aa0:	e0bffe0b 	ldhu	r2,-8(fp)
}
 1022aa4:	e037883a 	mov	sp,fp
 1022aa8:	df000017 	ldw	fp,0(sp)
 1022aac:	dec00104 	addi	sp,sp,4
 1022ab0:	f800283a 	ret

01022ab4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 1022ab4:	defffd04 	addi	sp,sp,-12
 1022ab8:	df000215 	stw	fp,8(sp)
 1022abc:	df000204 	addi	fp,sp,8
 1022ac0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1022ac4:	e0bfff17 	ldw	r2,-4(fp)
 1022ac8:	10800a17 	ldw	r2,40(r2)
 1022acc:	10800104 	addi	r2,r2,4
 1022ad0:	10800037 	ldwio	r2,0(r2)
 1022ad4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 1022ad8:	e0bffe17 	ldw	r2,-8(fp)
 1022adc:	10bfffec 	andhi	r2,r2,65535
 1022ae0:	1004d43a 	srli	r2,r2,16
}
 1022ae4:	e037883a 	mov	sp,fp
 1022ae8:	df000017 	ldw	fp,0(sp)
 1022aec:	dec00104 	addi	sp,sp,4
 1022af0:	f800283a 	ret

01022af4 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 1022af4:	defffc04 	addi	sp,sp,-16
 1022af8:	df000315 	stw	fp,12(sp)
 1022afc:	df000304 	addi	fp,sp,12
 1022b00:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 1022b04:	e0bffe17 	ldw	r2,-8(fp)
 1022b08:	1080800c 	andi	r2,r2,512
 1022b0c:	1004d27a 	srli	r2,r2,9
 1022b10:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 1022b14:	e0bffd17 	ldw	r2,-12(fp)
 1022b18:	1005003a 	cmpeq	r2,r2,zero
 1022b1c:	1000031e 	bne	r2,zero,1022b2c <alt_up_rs232_check_parity+0x38>
 1022b20:	00bfffc4 	movi	r2,-1
 1022b24:	e0bfff15 	stw	r2,-4(fp)
 1022b28:	00000106 	br	1022b30 <alt_up_rs232_check_parity+0x3c>
 1022b2c:	e03fff15 	stw	zero,-4(fp)
 1022b30:	e0bfff17 	ldw	r2,-4(fp)
}
 1022b34:	e037883a 	mov	sp,fp
 1022b38:	df000017 	ldw	fp,0(sp)
 1022b3c:	dec00104 	addi	sp,sp,4
 1022b40:	f800283a 	ret

01022b44 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 1022b44:	defffc04 	addi	sp,sp,-16
 1022b48:	df000315 	stw	fp,12(sp)
 1022b4c:	df000304 	addi	fp,sp,12
 1022b50:	e13ffe15 	stw	r4,-8(fp)
 1022b54:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 1022b58:	e0bffe17 	ldw	r2,-8(fp)
 1022b5c:	10800a17 	ldw	r2,40(r2)
 1022b60:	10800037 	ldwio	r2,0(r2)
 1022b64:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 1022b68:	e0bffe17 	ldw	r2,-8(fp)
 1022b6c:	10800a17 	ldw	r2,40(r2)
 1022b70:	e0ffff03 	ldbu	r3,-4(fp)
 1022b74:	10c00035 	stwio	r3,0(r2)
	return 0;
 1022b78:	0005883a 	mov	r2,zero
}
 1022b7c:	e037883a 	mov	sp,fp
 1022b80:	df000017 	ldw	fp,0(sp)
 1022b84:	dec00104 	addi	sp,sp,4
 1022b88:	f800283a 	ret

01022b8c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 1022b8c:	defffa04 	addi	sp,sp,-24
 1022b90:	dfc00515 	stw	ra,20(sp)
 1022b94:	df000415 	stw	fp,16(sp)
 1022b98:	df000404 	addi	fp,sp,16
 1022b9c:	e13ffd15 	stw	r4,-12(fp)
 1022ba0:	e17ffe15 	stw	r5,-8(fp)
 1022ba4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 1022ba8:	e0bffd17 	ldw	r2,-12(fp)
 1022bac:	10800a17 	ldw	r2,40(r2)
 1022bb0:	10800037 	ldwio	r2,0(r2)
 1022bb4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 1022bb8:	e0bffc17 	ldw	r2,-16(fp)
 1022bbc:	1007883a 	mov	r3,r2
 1022bc0:	e0bffe17 	ldw	r2,-8(fp)
 1022bc4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 1022bc8:	e13ffc17 	ldw	r4,-16(fp)
 1022bcc:	1022af40 	call	1022af4 <alt_up_rs232_check_parity>
 1022bd0:	1007883a 	mov	r3,r2
 1022bd4:	e0bfff17 	ldw	r2,-4(fp)
 1022bd8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 1022bdc:	e0bffc17 	ldw	r2,-16(fp)
 1022be0:	10a0000c 	andi	r2,r2,32768
 1022be4:	1004d3fa 	srli	r2,r2,15
 1022be8:	10bfffc4 	addi	r2,r2,-1
}
 1022bec:	e037883a 	mov	sp,fp
 1022bf0:	dfc00117 	ldw	ra,4(sp)
 1022bf4:	df000017 	ldw	fp,0(sp)
 1022bf8:	dec00204 	addi	sp,sp,8
 1022bfc:	f800283a 	ret

01022c00 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 1022c00:	defff804 	addi	sp,sp,-32
 1022c04:	dfc00715 	stw	ra,28(sp)
 1022c08:	df000615 	stw	fp,24(sp)
 1022c0c:	df000604 	addi	fp,sp,24
 1022c10:	e13ffd15 	stw	r4,-12(fp)
 1022c14:	e17ffe15 	stw	r5,-8(fp)
 1022c18:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1022c1c:	e0bffd17 	ldw	r2,-12(fp)
 1022c20:	10800017 	ldw	r2,0(r2)
 1022c24:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 1022c28:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 1022c2c:	00000c06 	br	1022c60 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 1022c30:	e17ffe17 	ldw	r5,-8(fp)
 1022c34:	e0bffe17 	ldw	r2,-8(fp)
 1022c38:	10800044 	addi	r2,r2,1
 1022c3c:	e0bffe15 	stw	r2,-8(fp)
 1022c40:	e1bffc04 	addi	r6,fp,-16
 1022c44:	e13ffb17 	ldw	r4,-20(fp)
 1022c48:	1022b8c0 	call	1022b8c <alt_up_rs232_read_data>
 1022c4c:	1004c03a 	cmpne	r2,r2,zero
 1022c50:	1000091e 	bne	r2,zero,1022c78 <alt_up_rs232_read_fd+0x78>
			count++;
 1022c54:	e0bffa17 	ldw	r2,-24(fp)
 1022c58:	10800044 	addi	r2,r2,1
 1022c5c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 1022c60:	e0bfff17 	ldw	r2,-4(fp)
 1022c64:	10bfffc4 	addi	r2,r2,-1
 1022c68:	e0bfff15 	stw	r2,-4(fp)
 1022c6c:	e0bfff17 	ldw	r2,-4(fp)
 1022c70:	10bfffd8 	cmpnei	r2,r2,-1
 1022c74:	103fee1e 	bne	r2,zero,1022c30 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 1022c78:	e0bffa17 	ldw	r2,-24(fp)
}
 1022c7c:	e037883a 	mov	sp,fp
 1022c80:	dfc00117 	ldw	ra,4(sp)
 1022c84:	df000017 	ldw	fp,0(sp)
 1022c88:	dec00204 	addi	sp,sp,8
 1022c8c:	f800283a 	ret

01022c90 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 1022c90:	defff904 	addi	sp,sp,-28
 1022c94:	dfc00615 	stw	ra,24(sp)
 1022c98:	df000515 	stw	fp,20(sp)
 1022c9c:	df000504 	addi	fp,sp,20
 1022ca0:	e13ffd15 	stw	r4,-12(fp)
 1022ca4:	e17ffe15 	stw	r5,-8(fp)
 1022ca8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1022cac:	e0bffd17 	ldw	r2,-12(fp)
 1022cb0:	10800017 	ldw	r2,0(r2)
 1022cb4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 1022cb8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 1022cbc:	00000d06 	br	1022cf4 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 1022cc0:	e0bffe17 	ldw	r2,-8(fp)
 1022cc4:	10800003 	ldbu	r2,0(r2)
 1022cc8:	11403fcc 	andi	r5,r2,255
 1022ccc:	e13ffc17 	ldw	r4,-16(fp)
 1022cd0:	1022b440 	call	1022b44 <alt_up_rs232_write_data>
 1022cd4:	1004c03a 	cmpne	r2,r2,zero
 1022cd8:	10000c1e 	bne	r2,zero,1022d0c <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 1022cdc:	e0bffb17 	ldw	r2,-20(fp)
 1022ce0:	10800044 	addi	r2,r2,1
 1022ce4:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 1022ce8:	e0bffe17 	ldw	r2,-8(fp)
 1022cec:	10800044 	addi	r2,r2,1
 1022cf0:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 1022cf4:	e0bfff17 	ldw	r2,-4(fp)
 1022cf8:	10bfffc4 	addi	r2,r2,-1
 1022cfc:	e0bfff15 	stw	r2,-4(fp)
 1022d00:	e0bfff17 	ldw	r2,-4(fp)
 1022d04:	10bfffd8 	cmpnei	r2,r2,-1
 1022d08:	103fed1e 	bne	r2,zero,1022cc0 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 1022d0c:	e0bffb17 	ldw	r2,-20(fp)
}
 1022d10:	e037883a 	mov	sp,fp
 1022d14:	dfc00117 	ldw	ra,4(sp)
 1022d18:	df000017 	ldw	fp,0(sp)
 1022d1c:	dec00204 	addi	sp,sp,8
 1022d20:	f800283a 	ret

01022d24 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 1022d24:	defffc04 	addi	sp,sp,-16
 1022d28:	dfc00315 	stw	ra,12(sp)
 1022d2c:	df000215 	stw	fp,8(sp)
 1022d30:	df000204 	addi	fp,sp,8
 1022d34:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 1022d38:	e13fff17 	ldw	r4,-4(fp)
 1022d3c:	014040b4 	movhi	r5,258
 1022d40:	295f9104 	addi	r5,r5,32324
 1022d44:	10230d80 	call	10230d8 <alt_find_dev>
 1022d48:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1022d4c:	e0bffe17 	ldw	r2,-8(fp)
}
 1022d50:	e037883a 	mov	sp,fp
 1022d54:	dfc00117 	ldw	ra,4(sp)
 1022d58:	df000017 	ldw	fp,0(sp)
 1022d5c:	dec00204 	addi	sp,sp,8
 1022d60:	f800283a 	ret

01022d64 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1022d64:	defff404 	addi	sp,sp,-48
 1022d68:	df000b15 	stw	fp,44(sp)
 1022d6c:	df000b04 	addi	fp,sp,44
 1022d70:	e13ffb15 	stw	r4,-20(fp)
 1022d74:	e17ffc15 	stw	r5,-16(fp)
 1022d78:	e1bffd15 	stw	r6,-12(fp)
 1022d7c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1022d80:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1022d84:	008040f4 	movhi	r2,259
 1022d88:	10a72504 	addi	r2,r2,-25452
 1022d8c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1022d90:	1005003a 	cmpeq	r2,r2,zero
 1022d94:	1000411e 	bne	r2,zero,1022e9c <alt_alarm_start+0x138>
  {
    if (alarm)
 1022d98:	e0bffb17 	ldw	r2,-20(fp)
 1022d9c:	1005003a 	cmpeq	r2,r2,zero
 1022da0:	10003b1e 	bne	r2,zero,1022e90 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1022da4:	e0fffb17 	ldw	r3,-20(fp)
 1022da8:	e0bffd17 	ldw	r2,-12(fp)
 1022dac:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1022db0:	e0fffb17 	ldw	r3,-20(fp)
 1022db4:	e0bffe17 	ldw	r2,-8(fp)
 1022db8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1022dbc:	0005303a 	rdctl	r2,status
 1022dc0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1022dc4:	e0fff817 	ldw	r3,-32(fp)
 1022dc8:	00bfff84 	movi	r2,-2
 1022dcc:	1884703a 	and	r2,r3,r2
 1022dd0:	1001703a 	wrctl	status,r2
  
  return context;
 1022dd4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1022dd8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1022ddc:	008040f4 	movhi	r2,259
 1022de0:	10a72604 	addi	r2,r2,-25448
 1022de4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1022de8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1022dec:	e0fffc17 	ldw	r3,-16(fp)
 1022df0:	e0bff917 	ldw	r2,-28(fp)
 1022df4:	1885883a 	add	r2,r3,r2
 1022df8:	10c00044 	addi	r3,r2,1
 1022dfc:	e0bffb17 	ldw	r2,-20(fp)
 1022e00:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1022e04:	e0bffb17 	ldw	r2,-20(fp)
 1022e08:	10c00217 	ldw	r3,8(r2)
 1022e0c:	e0bff917 	ldw	r2,-28(fp)
 1022e10:	1880042e 	bgeu	r3,r2,1022e24 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1022e14:	e0fffb17 	ldw	r3,-20(fp)
 1022e18:	00800044 	movi	r2,1
 1022e1c:	18800405 	stb	r2,16(r3)
 1022e20:	00000206 	br	1022e2c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1022e24:	e0bffb17 	ldw	r2,-20(fp)
 1022e28:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1022e2c:	e0fffb17 	ldw	r3,-20(fp)
 1022e30:	008040b4 	movhi	r2,258
 1022e34:	109fb604 	addi	r2,r2,32472
 1022e38:	e0bff615 	stw	r2,-40(fp)
 1022e3c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1022e40:	e0fff717 	ldw	r3,-36(fp)
 1022e44:	e0bff617 	ldw	r2,-40(fp)
 1022e48:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1022e4c:	e0bff617 	ldw	r2,-40(fp)
 1022e50:	10c00017 	ldw	r3,0(r2)
 1022e54:	e0bff717 	ldw	r2,-36(fp)
 1022e58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1022e5c:	e0bff617 	ldw	r2,-40(fp)
 1022e60:	10c00017 	ldw	r3,0(r2)
 1022e64:	e0bff717 	ldw	r2,-36(fp)
 1022e68:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1022e6c:	e0fff617 	ldw	r3,-40(fp)
 1022e70:	e0bff717 	ldw	r2,-36(fp)
 1022e74:	18800015 	stw	r2,0(r3)
 1022e78:	e0bffa17 	ldw	r2,-24(fp)
 1022e7c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1022e80:	e0bff517 	ldw	r2,-44(fp)
 1022e84:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1022e88:	e03fff15 	stw	zero,-4(fp)
 1022e8c:	00000506 	br	1022ea4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1022e90:	00bffa84 	movi	r2,-22
 1022e94:	e0bfff15 	stw	r2,-4(fp)
 1022e98:	00000206 	br	1022ea4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1022e9c:	00bfde84 	movi	r2,-134
 1022ea0:	e0bfff15 	stw	r2,-4(fp)
 1022ea4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1022ea8:	e037883a 	mov	sp,fp
 1022eac:	df000017 	ldw	fp,0(sp)
 1022eb0:	dec00104 	addi	sp,sp,4
 1022eb4:	f800283a 	ret

01022eb8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1022eb8:	defffe04 	addi	sp,sp,-8
 1022ebc:	df000115 	stw	fp,4(sp)
 1022ec0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1022ec4:	e03fff15 	stw	zero,-4(fp)
 1022ec8:	00000506 	br	1022ee0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1022ecc:	e0bfff17 	ldw	r2,-4(fp)
 1022ed0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1022ed4:	e0bfff17 	ldw	r2,-4(fp)
 1022ed8:	10800804 	addi	r2,r2,32
 1022edc:	e0bfff15 	stw	r2,-4(fp)
 1022ee0:	e0bfff17 	ldw	r2,-4(fp)
 1022ee4:	10840030 	cmpltui	r2,r2,4096
 1022ee8:	103ff81e 	bne	r2,zero,1022ecc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1022eec:	e037883a 	mov	sp,fp
 1022ef0:	df000017 	ldw	fp,0(sp)
 1022ef4:	dec00104 	addi	sp,sp,4
 1022ef8:	f800283a 	ret

01022efc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1022efc:	defff904 	addi	sp,sp,-28
 1022f00:	dfc00615 	stw	ra,24(sp)
 1022f04:	df000515 	stw	fp,20(sp)
 1022f08:	df000504 	addi	fp,sp,20
 1022f0c:	e13ffd15 	stw	r4,-12(fp)
 1022f10:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1022f14:	e0bffd17 	ldw	r2,-12(fp)
 1022f18:	1005003a 	cmpeq	r2,r2,zero
 1022f1c:	1000041e 	bne	r2,zero,1022f30 <alt_dev_llist_insert+0x34>
 1022f20:	e0bffd17 	ldw	r2,-12(fp)
 1022f24:	10800217 	ldw	r2,8(r2)
 1022f28:	1004c03a 	cmpne	r2,r2,zero
 1022f2c:	1000071e 	bne	r2,zero,1022f4c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1022f30:	1022fb00 	call	1022fb0 <alt_get_errno>
 1022f34:	1007883a 	mov	r3,r2
 1022f38:	00800584 	movi	r2,22
 1022f3c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1022f40:	00bffa84 	movi	r2,-22
 1022f44:	e0bfff15 	stw	r2,-4(fp)
 1022f48:	00001306 	br	1022f98 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1022f4c:	e0fffd17 	ldw	r3,-12(fp)
 1022f50:	e0bffe17 	ldw	r2,-8(fp)
 1022f54:	e0bffb15 	stw	r2,-20(fp)
 1022f58:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1022f5c:	e0fffc17 	ldw	r3,-16(fp)
 1022f60:	e0bffb17 	ldw	r2,-20(fp)
 1022f64:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1022f68:	e0bffb17 	ldw	r2,-20(fp)
 1022f6c:	10c00017 	ldw	r3,0(r2)
 1022f70:	e0bffc17 	ldw	r2,-16(fp)
 1022f74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1022f78:	e0bffb17 	ldw	r2,-20(fp)
 1022f7c:	10c00017 	ldw	r3,0(r2)
 1022f80:	e0bffc17 	ldw	r2,-16(fp)
 1022f84:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1022f88:	e0fffb17 	ldw	r3,-20(fp)
 1022f8c:	e0bffc17 	ldw	r2,-16(fp)
 1022f90:	18800015 	stw	r2,0(r3)

  return 0;  
 1022f94:	e03fff15 	stw	zero,-4(fp)
 1022f98:	e0bfff17 	ldw	r2,-4(fp)
}
 1022f9c:	e037883a 	mov	sp,fp
 1022fa0:	dfc00117 	ldw	ra,4(sp)
 1022fa4:	df000017 	ldw	fp,0(sp)
 1022fa8:	dec00204 	addi	sp,sp,8
 1022fac:	f800283a 	ret

01022fb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1022fb0:	defffd04 	addi	sp,sp,-12
 1022fb4:	dfc00215 	stw	ra,8(sp)
 1022fb8:	df000115 	stw	fp,4(sp)
 1022fbc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1022fc0:	008040b4 	movhi	r2,258
 1022fc4:	109f9404 	addi	r2,r2,32336
 1022fc8:	10800017 	ldw	r2,0(r2)
 1022fcc:	1005003a 	cmpeq	r2,r2,zero
 1022fd0:	1000061e 	bne	r2,zero,1022fec <alt_get_errno+0x3c>
 1022fd4:	008040b4 	movhi	r2,258
 1022fd8:	109f9404 	addi	r2,r2,32336
 1022fdc:	10800017 	ldw	r2,0(r2)
 1022fe0:	103ee83a 	callr	r2
 1022fe4:	e0bfff15 	stw	r2,-4(fp)
 1022fe8:	00000306 	br	1022ff8 <alt_get_errno+0x48>
 1022fec:	008040f4 	movhi	r2,259
 1022ff0:	10a70404 	addi	r2,r2,-25584
 1022ff4:	e0bfff15 	stw	r2,-4(fp)
 1022ff8:	e0bfff17 	ldw	r2,-4(fp)
}
 1022ffc:	e037883a 	mov	sp,fp
 1023000:	dfc00117 	ldw	ra,4(sp)
 1023004:	df000017 	ldw	fp,0(sp)
 1023008:	dec00204 	addi	sp,sp,8
 102300c:	f800283a 	ret

01023010 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1023010:	defffd04 	addi	sp,sp,-12
 1023014:	dfc00215 	stw	ra,8(sp)
 1023018:	df000115 	stw	fp,4(sp)
 102301c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1023020:	00bfff04 	movi	r2,-4
 1023024:	00c040b4 	movhi	r3,258
 1023028:	18d1c704 	addi	r3,r3,18204
 102302c:	1885883a 	add	r2,r3,r2
 1023030:	e0bfff15 	stw	r2,-4(fp)
 1023034:	00000606 	br	1023050 <_do_ctors+0x40>
        (*ctor) (); 
 1023038:	e0bfff17 	ldw	r2,-4(fp)
 102303c:	10800017 	ldw	r2,0(r2)
 1023040:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1023044:	e0bfff17 	ldw	r2,-4(fp)
 1023048:	10bfff04 	addi	r2,r2,-4
 102304c:	e0bfff15 	stw	r2,-4(fp)
 1023050:	e0ffff17 	ldw	r3,-4(fp)
 1023054:	008040b4 	movhi	r2,258
 1023058:	1091c604 	addi	r2,r2,18200
 102305c:	18bff62e 	bgeu	r3,r2,1023038 <_do_ctors+0x28>
        (*ctor) (); 
}
 1023060:	e037883a 	mov	sp,fp
 1023064:	dfc00117 	ldw	ra,4(sp)
 1023068:	df000017 	ldw	fp,0(sp)
 102306c:	dec00204 	addi	sp,sp,8
 1023070:	f800283a 	ret

01023074 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1023074:	defffd04 	addi	sp,sp,-12
 1023078:	dfc00215 	stw	ra,8(sp)
 102307c:	df000115 	stw	fp,4(sp)
 1023080:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1023084:	00bfff04 	movi	r2,-4
 1023088:	00c040b4 	movhi	r3,258
 102308c:	18d1c704 	addi	r3,r3,18204
 1023090:	1885883a 	add	r2,r3,r2
 1023094:	e0bfff15 	stw	r2,-4(fp)
 1023098:	00000606 	br	10230b4 <_do_dtors+0x40>
        (*dtor) (); 
 102309c:	e0bfff17 	ldw	r2,-4(fp)
 10230a0:	10800017 	ldw	r2,0(r2)
 10230a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10230a8:	e0bfff17 	ldw	r2,-4(fp)
 10230ac:	10bfff04 	addi	r2,r2,-4
 10230b0:	e0bfff15 	stw	r2,-4(fp)
 10230b4:	e0ffff17 	ldw	r3,-4(fp)
 10230b8:	008040b4 	movhi	r2,258
 10230bc:	1091c704 	addi	r2,r2,18204
 10230c0:	18bff62e 	bgeu	r3,r2,102309c <_do_dtors+0x28>
        (*dtor) (); 
}
 10230c4:	e037883a 	mov	sp,fp
 10230c8:	dfc00117 	ldw	ra,4(sp)
 10230cc:	df000017 	ldw	fp,0(sp)
 10230d0:	dec00204 	addi	sp,sp,8
 10230d4:	f800283a 	ret

010230d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 10230d8:	defff904 	addi	sp,sp,-28
 10230dc:	dfc00615 	stw	ra,24(sp)
 10230e0:	df000515 	stw	fp,20(sp)
 10230e4:	df000504 	addi	fp,sp,20
 10230e8:	e13ffd15 	stw	r4,-12(fp)
 10230ec:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 10230f0:	e0bffe17 	ldw	r2,-8(fp)
 10230f4:	10800017 	ldw	r2,0(r2)
 10230f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 10230fc:	e13ffd17 	ldw	r4,-12(fp)
 1023100:	100f4040 	call	100f404 <strlen>
 1023104:	10800044 	addi	r2,r2,1
 1023108:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 102310c:	00000d06 	br	1023144 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1023110:	e0bffc17 	ldw	r2,-16(fp)
 1023114:	11000217 	ldw	r4,8(r2)
 1023118:	e1bffb17 	ldw	r6,-20(fp)
 102311c:	e17ffd17 	ldw	r5,-12(fp)
 1023120:	100eaf80 	call	100eaf8 <memcmp>
 1023124:	1004c03a 	cmpne	r2,r2,zero
 1023128:	1000031e 	bne	r2,zero,1023138 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 102312c:	e0bffc17 	ldw	r2,-16(fp)
 1023130:	e0bfff15 	stw	r2,-4(fp)
 1023134:	00000706 	br	1023154 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1023138:	e0bffc17 	ldw	r2,-16(fp)
 102313c:	10800017 	ldw	r2,0(r2)
 1023140:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1023144:	e0fffe17 	ldw	r3,-8(fp)
 1023148:	e0bffc17 	ldw	r2,-16(fp)
 102314c:	10fff01e 	bne	r2,r3,1023110 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1023150:	e03fff15 	stw	zero,-4(fp)
 1023154:	e0bfff17 	ldw	r2,-4(fp)
}
 1023158:	e037883a 	mov	sp,fp
 102315c:	dfc00117 	ldw	ra,4(sp)
 1023160:	df000017 	ldw	fp,0(sp)
 1023164:	dec00204 	addi	sp,sp,8
 1023168:	f800283a 	ret

0102316c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 102316c:	defffe04 	addi	sp,sp,-8
 1023170:	dfc00115 	stw	ra,4(sp)
 1023174:	df000015 	stw	fp,0(sp)
 1023178:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 102317c:	0009883a 	mov	r4,zero
 1023180:	01480004 	movi	r5,8192
 1023184:	10240200 	call	1024020 <alt_icache_flush>
#endif
}
 1023188:	e037883a 	mov	sp,fp
 102318c:	dfc00117 	ldw	ra,4(sp)
 1023190:	df000017 	ldw	fp,0(sp)
 1023194:	dec00204 	addi	sp,sp,8
 1023198:	f800283a 	ret

0102319c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 102319c:	defff904 	addi	sp,sp,-28
 10231a0:	dfc00615 	stw	ra,24(sp)
 10231a4:	df000515 	stw	fp,20(sp)
 10231a8:	df000504 	addi	fp,sp,20
 10231ac:	e13ffc15 	stw	r4,-16(fp)
 10231b0:	e17ffd15 	stw	r5,-12(fp)
 10231b4:	e1bffe15 	stw	r6,-8(fp)
 10231b8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 10231bc:	e13ffd17 	ldw	r4,-12(fp)
 10231c0:	e17ffe17 	ldw	r5,-8(fp)
 10231c4:	e1bfff17 	ldw	r6,-4(fp)
 10231c8:	10235740 	call	1023574 <open>
 10231cc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 10231d0:	e0bffb17 	ldw	r2,-20(fp)
 10231d4:	1004803a 	cmplt	r2,r2,zero
 10231d8:	10001c1e 	bne	r2,zero,102324c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 10231dc:	e0bffb17 	ldw	r2,-20(fp)
 10231e0:	00c040b4 	movhi	r3,258
 10231e4:	18da8a04 	addi	r3,r3,27176
 10231e8:	10800324 	muli	r2,r2,12
 10231ec:	10c5883a 	add	r2,r2,r3
 10231f0:	10c00017 	ldw	r3,0(r2)
 10231f4:	e0bffc17 	ldw	r2,-16(fp)
 10231f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 10231fc:	e0bffb17 	ldw	r2,-20(fp)
 1023200:	00c040b4 	movhi	r3,258
 1023204:	18da8a04 	addi	r3,r3,27176
 1023208:	10800324 	muli	r2,r2,12
 102320c:	10c5883a 	add	r2,r2,r3
 1023210:	10800104 	addi	r2,r2,4
 1023214:	10c00017 	ldw	r3,0(r2)
 1023218:	e0bffc17 	ldw	r2,-16(fp)
 102321c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1023220:	e0bffb17 	ldw	r2,-20(fp)
 1023224:	00c040b4 	movhi	r3,258
 1023228:	18da8a04 	addi	r3,r3,27176
 102322c:	10800324 	muli	r2,r2,12
 1023230:	10c5883a 	add	r2,r2,r3
 1023234:	10800204 	addi	r2,r2,8
 1023238:	10c00017 	ldw	r3,0(r2)
 102323c:	e0bffc17 	ldw	r2,-16(fp)
 1023240:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1023244:	e13ffb17 	ldw	r4,-20(fp)
 1023248:	10190c40 	call	10190c4 <alt_release_fd>
  }
} 
 102324c:	e037883a 	mov	sp,fp
 1023250:	dfc00117 	ldw	ra,4(sp)
 1023254:	df000017 	ldw	fp,0(sp)
 1023258:	dec00204 	addi	sp,sp,8
 102325c:	f800283a 	ret

01023260 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1023260:	defffb04 	addi	sp,sp,-20
 1023264:	dfc00415 	stw	ra,16(sp)
 1023268:	df000315 	stw	fp,12(sp)
 102326c:	df000304 	addi	fp,sp,12
 1023270:	e13ffd15 	stw	r4,-12(fp)
 1023274:	e17ffe15 	stw	r5,-8(fp)
 1023278:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 102327c:	010040b4 	movhi	r4,258
 1023280:	211a8d04 	addi	r4,r4,27188
 1023284:	e17ffd17 	ldw	r5,-12(fp)
 1023288:	01800044 	movi	r6,1
 102328c:	01c07fc4 	movi	r7,511
 1023290:	102319c0 	call	102319c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1023294:	010040b4 	movhi	r4,258
 1023298:	211a8a04 	addi	r4,r4,27176
 102329c:	e17ffe17 	ldw	r5,-8(fp)
 10232a0:	000d883a 	mov	r6,zero
 10232a4:	01c07fc4 	movi	r7,511
 10232a8:	102319c0 	call	102319c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 10232ac:	010040b4 	movhi	r4,258
 10232b0:	211a9004 	addi	r4,r4,27200
 10232b4:	e17fff17 	ldw	r5,-4(fp)
 10232b8:	01800044 	movi	r6,1
 10232bc:	01c07fc4 	movi	r7,511
 10232c0:	102319c0 	call	102319c <alt_open_fd>
}  
 10232c4:	e037883a 	mov	sp,fp
 10232c8:	dfc00117 	ldw	ra,4(sp)
 10232cc:	df000017 	ldw	fp,0(sp)
 10232d0:	dec00204 	addi	sp,sp,8
 10232d4:	f800283a 	ret

010232d8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 10232d8:	deffef04 	addi	sp,sp,-68
 10232dc:	df001015 	stw	fp,64(sp)
 10232e0:	df001004 	addi	fp,sp,64
 10232e4:	e13ffc15 	stw	r4,-16(fp)
 10232e8:	e17ffd15 	stw	r5,-12(fp)
 10232ec:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 10232f0:	00bffa84 	movi	r2,-22
 10232f4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 10232f8:	e0bffc17 	ldw	r2,-16(fp)
 10232fc:	10800828 	cmpgeui	r2,r2,32
 1023300:	1000601e 	bne	r2,zero,1023484 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1023304:	0005303a 	rdctl	r2,status
 1023308:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102330c:	e0fff917 	ldw	r3,-28(fp)
 1023310:	00bfff84 	movi	r2,-2
 1023314:	1884703a 	and	r2,r3,r2
 1023318:	1001703a 	wrctl	status,r2
  
  return context;
 102331c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1023320:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 1023324:	e0bffc17 	ldw	r2,-16(fp)
 1023328:	00c040f4 	movhi	r3,259
 102332c:	18ddbe04 	addi	r3,r3,30456
 1023330:	100490fa 	slli	r2,r2,3
 1023334:	10c7883a 	add	r3,r2,r3
 1023338:	e0bffe17 	ldw	r2,-8(fp)
 102333c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 1023340:	e0bffc17 	ldw	r2,-16(fp)
 1023344:	00c040f4 	movhi	r3,259
 1023348:	18ddbe04 	addi	r3,r3,30456
 102334c:	100490fa 	slli	r2,r2,3
 1023350:	10c5883a 	add	r2,r2,r3
 1023354:	10c00104 	addi	r3,r2,4
 1023358:	e0bffd17 	ldw	r2,-12(fp)
 102335c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1023360:	e0bffe17 	ldw	r2,-8(fp)
 1023364:	1005003a 	cmpeq	r2,r2,zero
 1023368:	1000201e 	bne	r2,zero,10233ec <alt_irq_register+0x114>
 102336c:	e0bffc17 	ldw	r2,-16(fp)
 1023370:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1023374:	0005303a 	rdctl	r2,status
 1023378:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102337c:	e0fff617 	ldw	r3,-40(fp)
 1023380:	00bfff84 	movi	r2,-2
 1023384:	1884703a 	and	r2,r3,r2
 1023388:	1001703a 	wrctl	status,r2
  
  return context;
 102338c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1023390:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1023394:	e0fff717 	ldw	r3,-36(fp)
 1023398:	00800044 	movi	r2,1
 102339c:	10c4983a 	sll	r2,r2,r3
 10233a0:	1007883a 	mov	r3,r2
 10233a4:	008040f4 	movhi	r2,259
 10233a8:	10a72404 	addi	r2,r2,-25456
 10233ac:	10800017 	ldw	r2,0(r2)
 10233b0:	1886b03a 	or	r3,r3,r2
 10233b4:	008040f4 	movhi	r2,259
 10233b8:	10a72404 	addi	r2,r2,-25456
 10233bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10233c0:	008040f4 	movhi	r2,259
 10233c4:	10a72404 	addi	r2,r2,-25456
 10233c8:	10800017 	ldw	r2,0(r2)
 10233cc:	100170fa 	wrctl	ienable,r2
 10233d0:	e0bff817 	ldw	r2,-32(fp)
 10233d4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10233d8:	e0bff517 	ldw	r2,-44(fp)
 10233dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10233e0:	0005883a 	mov	r2,zero
 10233e4:	e0bfff15 	stw	r2,-4(fp)
 10233e8:	00002006 	br	102346c <alt_irq_register+0x194>
 10233ec:	e0bffc17 	ldw	r2,-16(fp)
 10233f0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10233f4:	0005303a 	rdctl	r2,status
 10233f8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10233fc:	e0fff217 	ldw	r3,-56(fp)
 1023400:	00bfff84 	movi	r2,-2
 1023404:	1884703a 	and	r2,r3,r2
 1023408:	1001703a 	wrctl	status,r2
  
  return context;
 102340c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1023410:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 1023414:	e0fff317 	ldw	r3,-52(fp)
 1023418:	00800044 	movi	r2,1
 102341c:	10c4983a 	sll	r2,r2,r3
 1023420:	0084303a 	nor	r2,zero,r2
 1023424:	1007883a 	mov	r3,r2
 1023428:	008040f4 	movhi	r2,259
 102342c:	10a72404 	addi	r2,r2,-25456
 1023430:	10800017 	ldw	r2,0(r2)
 1023434:	1886703a 	and	r3,r3,r2
 1023438:	008040f4 	movhi	r2,259
 102343c:	10a72404 	addi	r2,r2,-25456
 1023440:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1023444:	008040f4 	movhi	r2,259
 1023448:	10a72404 	addi	r2,r2,-25456
 102344c:	10800017 	ldw	r2,0(r2)
 1023450:	100170fa 	wrctl	ienable,r2
 1023454:	e0bff417 	ldw	r2,-48(fp)
 1023458:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102345c:	e0bff117 	ldw	r2,-60(fp)
 1023460:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1023464:	0005883a 	mov	r2,zero
 1023468:	e0bfff15 	stw	r2,-4(fp)
 102346c:	e0bfff17 	ldw	r2,-4(fp)
 1023470:	e0bffb15 	stw	r2,-20(fp)
 1023474:	e0bffa17 	ldw	r2,-24(fp)
 1023478:	e0bff015 	stw	r2,-64(fp)
 102347c:	e0bff017 	ldw	r2,-64(fp)
 1023480:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 1023484:	e0bffb17 	ldw	r2,-20(fp)
}
 1023488:	e037883a 	mov	sp,fp
 102348c:	df000017 	ldw	fp,0(sp)
 1023490:	dec00104 	addi	sp,sp,4
 1023494:	f800283a 	ret

01023498 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1023498:	defffc04 	addi	sp,sp,-16
 102349c:	df000315 	stw	fp,12(sp)
 10234a0:	df000304 	addi	fp,sp,12
 10234a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10234a8:	e0bffe17 	ldw	r2,-8(fp)
 10234ac:	10800217 	ldw	r2,8(r2)
 10234b0:	10d00034 	orhi	r3,r2,16384
 10234b4:	e0bffe17 	ldw	r2,-8(fp)
 10234b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10234bc:	e03ffd15 	stw	zero,-12(fp)
 10234c0:	00002006 	br	1023544 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10234c4:	e0bffd17 	ldw	r2,-12(fp)
 10234c8:	00c040b4 	movhi	r3,258
 10234cc:	18da8a04 	addi	r3,r3,27176
 10234d0:	10800324 	muli	r2,r2,12
 10234d4:	10c5883a 	add	r2,r2,r3
 10234d8:	10c00017 	ldw	r3,0(r2)
 10234dc:	e0bffe17 	ldw	r2,-8(fp)
 10234e0:	10800017 	ldw	r2,0(r2)
 10234e4:	1880141e 	bne	r3,r2,1023538 <alt_file_locked+0xa0>
 10234e8:	e0bffd17 	ldw	r2,-12(fp)
 10234ec:	00c040b4 	movhi	r3,258
 10234f0:	18da8a04 	addi	r3,r3,27176
 10234f4:	10800324 	muli	r2,r2,12
 10234f8:	10c5883a 	add	r2,r2,r3
 10234fc:	10800204 	addi	r2,r2,8
 1023500:	10800017 	ldw	r2,0(r2)
 1023504:	1004403a 	cmpge	r2,r2,zero
 1023508:	10000b1e 	bne	r2,zero,1023538 <alt_file_locked+0xa0>
 102350c:	e0bffd17 	ldw	r2,-12(fp)
 1023510:	10800324 	muli	r2,r2,12
 1023514:	1007883a 	mov	r3,r2
 1023518:	008040b4 	movhi	r2,258
 102351c:	109a8a04 	addi	r2,r2,27176
 1023520:	1887883a 	add	r3,r3,r2
 1023524:	e0bffe17 	ldw	r2,-8(fp)
 1023528:	18800326 	beq	r3,r2,1023538 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 102352c:	00bffcc4 	movi	r2,-13
 1023530:	e0bfff15 	stw	r2,-4(fp)
 1023534:	00000a06 	br	1023560 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1023538:	e0bffd17 	ldw	r2,-12(fp)
 102353c:	10800044 	addi	r2,r2,1
 1023540:	e0bffd15 	stw	r2,-12(fp)
 1023544:	008040b4 	movhi	r2,258
 1023548:	109f9304 	addi	r2,r2,32332
 102354c:	10800017 	ldw	r2,0(r2)
 1023550:	1007883a 	mov	r3,r2
 1023554:	e0bffd17 	ldw	r2,-12(fp)
 1023558:	18bfda2e 	bgeu	r3,r2,10234c4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 102355c:	e03fff15 	stw	zero,-4(fp)
 1023560:	e0bfff17 	ldw	r2,-4(fp)
}
 1023564:	e037883a 	mov	sp,fp
 1023568:	df000017 	ldw	fp,0(sp)
 102356c:	dec00104 	addi	sp,sp,4
 1023570:	f800283a 	ret

01023574 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1023574:	defff404 	addi	sp,sp,-48
 1023578:	dfc00b15 	stw	ra,44(sp)
 102357c:	df000a15 	stw	fp,40(sp)
 1023580:	df000a04 	addi	fp,sp,40
 1023584:	e13ffb15 	stw	r4,-20(fp)
 1023588:	e17ffc15 	stw	r5,-16(fp)
 102358c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1023590:	00bfffc4 	movi	r2,-1
 1023594:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1023598:	00bffb44 	movi	r2,-19
 102359c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 10235a0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 10235a4:	e13ffb17 	ldw	r4,-20(fp)
 10235a8:	014040b4 	movhi	r5,258
 10235ac:	295f9104 	addi	r5,r5,32324
 10235b0:	10230d80 	call	10230d8 <alt_find_dev>
 10235b4:	e0bffa15 	stw	r2,-24(fp)
 10235b8:	e0bffa17 	ldw	r2,-24(fp)
 10235bc:	1004c03a 	cmpne	r2,r2,zero
 10235c0:	1000051e 	bne	r2,zero,10235d8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 10235c4:	e13ffb17 	ldw	r4,-20(fp)
 10235c8:	1023e0c0 	call	1023e0c <alt_find_file>
 10235cc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 10235d0:	00800044 	movi	r2,1
 10235d4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 10235d8:	e0bffa17 	ldw	r2,-24(fp)
 10235dc:	1005003a 	cmpeq	r2,r2,zero
 10235e0:	1000301e 	bne	r2,zero,10236a4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 10235e4:	e13ffa17 	ldw	r4,-24(fp)
 10235e8:	1023f2c0 	call	1023f2c <alt_get_fd>
 10235ec:	e0bff815 	stw	r2,-32(fp)
 10235f0:	e0bff817 	ldw	r2,-32(fp)
 10235f4:	1004403a 	cmpge	r2,r2,zero
 10235f8:	1000031e 	bne	r2,zero,1023608 <open+0x94>
    {
      status = index;
 10235fc:	e0bff817 	ldw	r2,-32(fp)
 1023600:	e0bff715 	stw	r2,-36(fp)
 1023604:	00002906 	br	10236ac <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 1023608:	e0bff817 	ldw	r2,-32(fp)
 102360c:	10800324 	muli	r2,r2,12
 1023610:	1007883a 	mov	r3,r2
 1023614:	008040b4 	movhi	r2,258
 1023618:	109a8a04 	addi	r2,r2,27176
 102361c:	1885883a 	add	r2,r3,r2
 1023620:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1023624:	e0fffc17 	ldw	r3,-16(fp)
 1023628:	00900034 	movhi	r2,16384
 102362c:	10bfffc4 	addi	r2,r2,-1
 1023630:	1886703a 	and	r3,r3,r2
 1023634:	e0bff917 	ldw	r2,-28(fp)
 1023638:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 102363c:	e0bff617 	ldw	r2,-40(fp)
 1023640:	1004c03a 	cmpne	r2,r2,zero
 1023644:	1000061e 	bne	r2,zero,1023660 <open+0xec>
 1023648:	e13ff917 	ldw	r4,-28(fp)
 102364c:	10234980 	call	1023498 <alt_file_locked>
 1023650:	e0bff715 	stw	r2,-36(fp)
 1023654:	e0bff717 	ldw	r2,-36(fp)
 1023658:	1004803a 	cmplt	r2,r2,zero
 102365c:	1000131e 	bne	r2,zero,10236ac <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1023660:	e0bffa17 	ldw	r2,-24(fp)
 1023664:	10800317 	ldw	r2,12(r2)
 1023668:	1005003a 	cmpeq	r2,r2,zero
 102366c:	1000091e 	bne	r2,zero,1023694 <open+0x120>
 1023670:	e0bffa17 	ldw	r2,-24(fp)
 1023674:	10800317 	ldw	r2,12(r2)
 1023678:	e13ff917 	ldw	r4,-28(fp)
 102367c:	e17ffb17 	ldw	r5,-20(fp)
 1023680:	e1bffc17 	ldw	r6,-16(fp)
 1023684:	e1fffd17 	ldw	r7,-12(fp)
 1023688:	103ee83a 	callr	r2
 102368c:	e0bfff15 	stw	r2,-4(fp)
 1023690:	00000106 	br	1023698 <open+0x124>
 1023694:	e03fff15 	stw	zero,-4(fp)
 1023698:	e0bfff17 	ldw	r2,-4(fp)
 102369c:	e0bff715 	stw	r2,-36(fp)
 10236a0:	00000206 	br	10236ac <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 10236a4:	00bffb44 	movi	r2,-19
 10236a8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 10236ac:	e0bff717 	ldw	r2,-36(fp)
 10236b0:	1004403a 	cmpge	r2,r2,zero
 10236b4:	1000091e 	bne	r2,zero,10236dc <open+0x168>
  {
    alt_release_fd (index);  
 10236b8:	e13ff817 	ldw	r4,-32(fp)
 10236bc:	10190c40 	call	10190c4 <alt_release_fd>
    ALT_ERRNO = -status;
 10236c0:	10236fc0 	call	10236fc <alt_get_errno>
 10236c4:	e0fff717 	ldw	r3,-36(fp)
 10236c8:	00c7c83a 	sub	r3,zero,r3
 10236cc:	10c00015 	stw	r3,0(r2)
    return -1;
 10236d0:	00bfffc4 	movi	r2,-1
 10236d4:	e0bffe15 	stw	r2,-8(fp)
 10236d8:	00000206 	br	10236e4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 10236dc:	e0bff817 	ldw	r2,-32(fp)
 10236e0:	e0bffe15 	stw	r2,-8(fp)
 10236e4:	e0bffe17 	ldw	r2,-8(fp)
}
 10236e8:	e037883a 	mov	sp,fp
 10236ec:	dfc00117 	ldw	ra,4(sp)
 10236f0:	df000017 	ldw	fp,0(sp)
 10236f4:	dec00204 	addi	sp,sp,8
 10236f8:	f800283a 	ret

010236fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10236fc:	defffd04 	addi	sp,sp,-12
 1023700:	dfc00215 	stw	ra,8(sp)
 1023704:	df000115 	stw	fp,4(sp)
 1023708:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 102370c:	008040b4 	movhi	r2,258
 1023710:	109f9404 	addi	r2,r2,32336
 1023714:	10800017 	ldw	r2,0(r2)
 1023718:	1005003a 	cmpeq	r2,r2,zero
 102371c:	1000061e 	bne	r2,zero,1023738 <alt_get_errno+0x3c>
 1023720:	008040b4 	movhi	r2,258
 1023724:	109f9404 	addi	r2,r2,32336
 1023728:	10800017 	ldw	r2,0(r2)
 102372c:	103ee83a 	callr	r2
 1023730:	e0bfff15 	stw	r2,-4(fp)
 1023734:	00000306 	br	1023744 <alt_get_errno+0x48>
 1023738:	008040f4 	movhi	r2,259
 102373c:	10a70404 	addi	r2,r2,-25584
 1023740:	e0bfff15 	stw	r2,-4(fp)
 1023744:	e0bfff17 	ldw	r2,-4(fp)
}
 1023748:	e037883a 	mov	sp,fp
 102374c:	dfc00117 	ldw	ra,4(sp)
 1023750:	df000017 	ldw	fp,0(sp)
 1023754:	dec00204 	addi	sp,sp,8
 1023758:	f800283a 	ret

0102375c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 102375c:	defffa04 	addi	sp,sp,-24
 1023760:	df000515 	stw	fp,20(sp)
 1023764:	df000504 	addi	fp,sp,20
 1023768:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102376c:	0005303a 	rdctl	r2,status
 1023770:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1023774:	e0fffd17 	ldw	r3,-12(fp)
 1023778:	00bfff84 	movi	r2,-2
 102377c:	1884703a 	and	r2,r3,r2
 1023780:	1001703a 	wrctl	status,r2
  
  return context;
 1023784:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1023788:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 102378c:	e0bfff17 	ldw	r2,-4(fp)
 1023790:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1023794:	e0bffc17 	ldw	r2,-16(fp)
 1023798:	10c00017 	ldw	r3,0(r2)
 102379c:	e0bffc17 	ldw	r2,-16(fp)
 10237a0:	10800117 	ldw	r2,4(r2)
 10237a4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 10237a8:	e0bffc17 	ldw	r2,-16(fp)
 10237ac:	10c00117 	ldw	r3,4(r2)
 10237b0:	e0bffc17 	ldw	r2,-16(fp)
 10237b4:	10800017 	ldw	r2,0(r2)
 10237b8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 10237bc:	e0fffc17 	ldw	r3,-16(fp)
 10237c0:	e0bffc17 	ldw	r2,-16(fp)
 10237c4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 10237c8:	e0fffc17 	ldw	r3,-16(fp)
 10237cc:	e0bffc17 	ldw	r2,-16(fp)
 10237d0:	18800015 	stw	r2,0(r3)
 10237d4:	e0bffe17 	ldw	r2,-8(fp)
 10237d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10237dc:	e0bffb17 	ldw	r2,-20(fp)
 10237e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10237e4:	e037883a 	mov	sp,fp
 10237e8:	df000017 	ldw	fp,0(sp)
 10237ec:	dec00104 	addi	sp,sp,4
 10237f0:	f800283a 	ret

010237f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10237f4:	defffb04 	addi	sp,sp,-20
 10237f8:	dfc00415 	stw	ra,16(sp)
 10237fc:	df000315 	stw	fp,12(sp)
 1023800:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1023804:	d0a09017 	ldw	r2,-32192(gp)
 1023808:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 102380c:	d0a80017 	ldw	r2,-24576(gp)
 1023810:	10800044 	addi	r2,r2,1
 1023814:	d0a80015 	stw	r2,-24576(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1023818:	00003106 	br	10238e0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 102381c:	e0bffe17 	ldw	r2,-8(fp)
 1023820:	10800017 	ldw	r2,0(r2)
 1023824:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1023828:	e0bffe17 	ldw	r2,-8(fp)
 102382c:	10800403 	ldbu	r2,16(r2)
 1023830:	10803fcc 	andi	r2,r2,255
 1023834:	1005003a 	cmpeq	r2,r2,zero
 1023838:	1000051e 	bne	r2,zero,1023850 <alt_tick+0x5c>
 102383c:	d0a80017 	ldw	r2,-24576(gp)
 1023840:	1004c03a 	cmpne	r2,r2,zero
 1023844:	1000021e 	bne	r2,zero,1023850 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1023848:	e0bffe17 	ldw	r2,-8(fp)
 102384c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1023850:	e0bffe17 	ldw	r2,-8(fp)
 1023854:	10c00217 	ldw	r3,8(r2)
 1023858:	d0a80017 	ldw	r2,-24576(gp)
 102385c:	10c01e36 	bltu	r2,r3,10238d8 <alt_tick+0xe4>
 1023860:	e0bffe17 	ldw	r2,-8(fp)
 1023864:	10800403 	ldbu	r2,16(r2)
 1023868:	10803fcc 	andi	r2,r2,255
 102386c:	1004c03a 	cmpne	r2,r2,zero
 1023870:	1000191e 	bne	r2,zero,10238d8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1023874:	e0bffe17 	ldw	r2,-8(fp)
 1023878:	10c00317 	ldw	r3,12(r2)
 102387c:	e0bffe17 	ldw	r2,-8(fp)
 1023880:	11000517 	ldw	r4,20(r2)
 1023884:	183ee83a 	callr	r3
 1023888:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 102388c:	e0bffd17 	ldw	r2,-12(fp)
 1023890:	1004c03a 	cmpne	r2,r2,zero
 1023894:	1000031e 	bne	r2,zero,10238a4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1023898:	e13ffe17 	ldw	r4,-8(fp)
 102389c:	102375c0 	call	102375c <alt_alarm_stop>
 10238a0:	00000d06 	br	10238d8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 10238a4:	e0bffe17 	ldw	r2,-8(fp)
 10238a8:	10c00217 	ldw	r3,8(r2)
 10238ac:	e0bffd17 	ldw	r2,-12(fp)
 10238b0:	1887883a 	add	r3,r3,r2
 10238b4:	e0bffe17 	ldw	r2,-8(fp)
 10238b8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 10238bc:	e0bffe17 	ldw	r2,-8(fp)
 10238c0:	10c00217 	ldw	r3,8(r2)
 10238c4:	d0a80017 	ldw	r2,-24576(gp)
 10238c8:	1880032e 	bgeu	r3,r2,10238d8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 10238cc:	e0fffe17 	ldw	r3,-8(fp)
 10238d0:	00800044 	movi	r2,1
 10238d4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 10238d8:	e0bfff17 	ldw	r2,-4(fp)
 10238dc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10238e0:	d0e09004 	addi	r3,gp,-32192
 10238e4:	e0bffe17 	ldw	r2,-8(fp)
 10238e8:	10ffcc1e 	bne	r2,r3,102381c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 10238ec:	101a3c40 	call	101a3c4 <OSTimeTick>
}
 10238f0:	e037883a 	mov	sp,fp
 10238f4:	dfc00117 	ldw	ra,4(sp)
 10238f8:	df000017 	ldw	fp,0(sp)
 10238fc:	dec00204 	addi	sp,sp,8
 1023900:	f800283a 	ret

01023904 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1023904:	deffff04 	addi	sp,sp,-4
 1023908:	df000015 	stw	fp,0(sp)
 102390c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1023910:	000170fa 	wrctl	ienable,zero
}
 1023914:	e037883a 	mov	sp,fp
 1023918:	df000017 	ldw	fp,0(sp)
 102391c:	dec00104 	addi	sp,sp,4
 1023920:	f800283a 	ret

01023924 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 1023924:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 1023928:	d0e06517 	ldw	r3,-32364(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 102392c:	d127f917 	ldw	r4,-24604(gp)

      stw ra,  0(sp)
 1023930:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 1023934:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 1023938:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 102393c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 1023940:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 1023944:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 1023948:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 102394c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 1023950:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 1023954:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 1023958:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 102395c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 1023960:	1023d440 	call	1023d44 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 1023964:	d127f417 	ldw	r4,-24624(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 1023968:	d167ec07 	ldb	r5,-24656(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 102396c:	d127f915 	stw	r4,-24604(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 1023970:	d167ec45 	stb	r5,-24655(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 1023974:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 1023978:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 102397c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 1023980:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 1023984:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 1023988:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 102398c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 1023990:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 1023994:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 1023998:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 102399c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 10239a0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 10239a4:	d0e06515 	stw	r3,-32364(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 10239a8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 10239ac:	f800283a 	ret

010239b0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 10239b0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 10239b4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 10239b8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 10239bc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 10239c0:	1023d440 	call	1023d44 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 10239c4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 10239c8:	d4a7ea45 	stb	r18,-24663(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 10239cc:	003fe506 	br	1023964 <OSCtxSw+0x40>

010239d0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 10239d0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 10239d4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 10239d8:	10800054 	ori	r2,r2,1
      wrctl status, r2
 10239dc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 10239e0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 10239e4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 10239e8:	dec00204 	addi	sp,sp,8

      callr r2
 10239ec:	103ee83a 	callr	r2

      nop
 10239f0:	0001883a 	nop

010239f4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 10239f4:	defff704 	addi	sp,sp,-36
 10239f8:	dfc00815 	stw	ra,32(sp)
 10239fc:	df000715 	stw	fp,28(sp)
 1023a00:	df000704 	addi	fp,sp,28
 1023a04:	e13ffc15 	stw	r4,-16(fp)
 1023a08:	e17ffd15 	stw	r5,-12(fp)
 1023a0c:	e1bffe15 	stw	r6,-8(fp)
 1023a10:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 1023a14:	e0bffe17 	ldw	r2,-8(fp)
 1023a18:	1007883a 	mov	r3,r2
 1023a1c:	00bfff04 	movi	r2,-4
 1023a20:	1884703a 	and	r2,r3,r2
 1023a24:	10bf0004 	addi	r2,r2,-1024
 1023a28:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 1023a2c:	e0bff917 	ldw	r2,-28(fp)
 1023a30:	10000015 	stw	zero,0(r2)
 1023a34:	e0bff917 	ldw	r2,-28(fp)
 1023a38:	10c0bb04 	addi	r3,r2,748
 1023a3c:	e0bff917 	ldw	r2,-28(fp)
 1023a40:	10c00115 	stw	r3,4(r2)
 1023a44:	e0bff917 	ldw	r2,-28(fp)
 1023a48:	1080bb04 	addi	r2,r2,748
 1023a4c:	10c01704 	addi	r3,r2,92
 1023a50:	e0bff917 	ldw	r2,-28(fp)
 1023a54:	10c00215 	stw	r3,8(r2)
 1023a58:	e0bff917 	ldw	r2,-28(fp)
 1023a5c:	1080bb04 	addi	r2,r2,748
 1023a60:	10c02e04 	addi	r3,r2,184
 1023a64:	e0bff917 	ldw	r2,-28(fp)
 1023a68:	10c00315 	stw	r3,12(r2)
 1023a6c:	e0bff917 	ldw	r2,-28(fp)
 1023a70:	10000415 	stw	zero,16(r2)
 1023a74:	e0bff917 	ldw	r2,-28(fp)
 1023a78:	10800504 	addi	r2,r2,20
 1023a7c:	1009883a 	mov	r4,r2
 1023a80:	01800644 	movi	r6,25
 1023a84:	000b883a 	mov	r5,zero
 1023a88:	100ecec0 	call	100ecec <memset>
 1023a8c:	e0bff917 	ldw	r2,-28(fp)
 1023a90:	10000c15 	stw	zero,48(r2)
 1023a94:	e0fff917 	ldw	r3,-28(fp)
 1023a98:	008040b4 	movhi	r2,258
 1023a9c:	10987a04 	addi	r2,r2,25064
 1023aa0:	18800d15 	stw	r2,52(r3)
 1023aa4:	e0bff917 	ldw	r2,-28(fp)
 1023aa8:	10000e15 	stw	zero,56(r2)
 1023aac:	e0bff917 	ldw	r2,-28(fp)
 1023ab0:	10000f15 	stw	zero,60(r2)
 1023ab4:	e0bff917 	ldw	r2,-28(fp)
 1023ab8:	10001015 	stw	zero,64(r2)
 1023abc:	e0bff917 	ldw	r2,-28(fp)
 1023ac0:	10001115 	stw	zero,68(r2)
 1023ac4:	e0bff917 	ldw	r2,-28(fp)
 1023ac8:	10001215 	stw	zero,72(r2)
 1023acc:	e0bff917 	ldw	r2,-28(fp)
 1023ad0:	10001315 	stw	zero,76(r2)
 1023ad4:	e0bff917 	ldw	r2,-28(fp)
 1023ad8:	10001415 	stw	zero,80(r2)
 1023adc:	e0bff917 	ldw	r2,-28(fp)
 1023ae0:	10001515 	stw	zero,84(r2)
 1023ae4:	e0bff917 	ldw	r2,-28(fp)
 1023ae8:	10001615 	stw	zero,88(r2)
 1023aec:	e0bff917 	ldw	r2,-28(fp)
 1023af0:	10001715 	stw	zero,92(r2)
 1023af4:	e0bff917 	ldw	r2,-28(fp)
 1023af8:	10001805 	stb	zero,96(r2)
 1023afc:	e0bff917 	ldw	r2,-28(fp)
 1023b00:	10801f04 	addi	r2,r2,124
 1023b04:	10000015 	stw	zero,0(r2)
 1023b08:	10000115 	stw	zero,4(r2)
 1023b0c:	10000215 	stw	zero,8(r2)
 1023b10:	10000315 	stw	zero,12(r2)
 1023b14:	10000415 	stw	zero,16(r2)
 1023b18:	10000515 	stw	zero,20(r2)
 1023b1c:	10000615 	stw	zero,24(r2)
 1023b20:	10000715 	stw	zero,28(r2)
 1023b24:	10000815 	stw	zero,32(r2)
 1023b28:	e0bff917 	ldw	r2,-28(fp)
 1023b2c:	10002815 	stw	zero,160(r2)
 1023b30:	e0fff917 	ldw	r3,-28(fp)
 1023b34:	00800044 	movi	r2,1
 1023b38:	18802915 	stw	r2,164(r3)
 1023b3c:	18002a15 	stw	zero,168(r3)
 1023b40:	e0fff917 	ldw	r3,-28(fp)
 1023b44:	008cc384 	movi	r2,13070
 1023b48:	18802b0d 	sth	r2,172(r3)
 1023b4c:	e0fff917 	ldw	r3,-28(fp)
 1023b50:	00aaf344 	movi	r2,-21555
 1023b54:	18802b8d 	sth	r2,174(r3)
 1023b58:	e0fff917 	ldw	r3,-28(fp)
 1023b5c:	00848d04 	movi	r2,4660
 1023b60:	18802c0d 	sth	r2,176(r3)
 1023b64:	e0fff917 	ldw	r3,-28(fp)
 1023b68:	00b99b44 	movi	r2,-6547
 1023b6c:	18802c8d 	sth	r2,178(r3)
 1023b70:	e0fff917 	ldw	r3,-28(fp)
 1023b74:	00b7bb04 	movi	r2,-8468
 1023b78:	18802d0d 	sth	r2,180(r3)
 1023b7c:	e0fff917 	ldw	r3,-28(fp)
 1023b80:	00800144 	movi	r2,5
 1023b84:	18802d8d 	sth	r2,182(r3)
 1023b88:	e0fff917 	ldw	r3,-28(fp)
 1023b8c:	008002c4 	movi	r2,11
 1023b90:	18802e0d 	sth	r2,184(r3)
 1023b94:	e0bff917 	ldw	r2,-28(fp)
 1023b98:	10002f15 	stw	zero,188(r2)
 1023b9c:	e0bff917 	ldw	r2,-28(fp)
 1023ba0:	10003015 	stw	zero,192(r2)
 1023ba4:	e0bff917 	ldw	r2,-28(fp)
 1023ba8:	10003115 	stw	zero,196(r2)
 1023bac:	e0bff917 	ldw	r2,-28(fp)
 1023bb0:	10003215 	stw	zero,200(r2)
 1023bb4:	e0bff917 	ldw	r2,-28(fp)
 1023bb8:	10003315 	stw	zero,204(r2)
 1023bbc:	e0bff917 	ldw	r2,-28(fp)
 1023bc0:	10003415 	stw	zero,208(r2)
 1023bc4:	e0bff917 	ldw	r2,-28(fp)
 1023bc8:	10003e15 	stw	zero,248(r2)
 1023bcc:	e0bff917 	ldw	r2,-28(fp)
 1023bd0:	10003f15 	stw	zero,252(r2)
 1023bd4:	e0bff917 	ldw	r2,-28(fp)
 1023bd8:	10004015 	stw	zero,256(r2)
 1023bdc:	e0bff917 	ldw	r2,-28(fp)
 1023be0:	10004115 	stw	zero,260(r2)
 1023be4:	e0bff917 	ldw	r2,-28(fp)
 1023be8:	10004215 	stw	zero,264(r2)
 1023bec:	e0bff917 	ldw	r2,-28(fp)
 1023bf0:	10004315 	stw	zero,268(r2)
 1023bf4:	e0bff917 	ldw	r2,-28(fp)
 1023bf8:	10004415 	stw	zero,272(r2)
 1023bfc:	e0bff917 	ldw	r2,-28(fp)
 1023c00:	10004515 	stw	zero,276(r2)
 1023c04:	e0bff917 	ldw	r2,-28(fp)
 1023c08:	10004615 	stw	zero,280(r2)
 1023c0c:	e0bff917 	ldw	r2,-28(fp)
 1023c10:	10004715 	stw	zero,284(r2)
 1023c14:	e0bff917 	ldw	r2,-28(fp)
 1023c18:	10003505 	stb	zero,212(r2)
 1023c1c:	e0bff917 	ldw	r2,-28(fp)
 1023c20:	10003705 	stb	zero,220(r2)
 1023c24:	e0bff917 	ldw	r2,-28(fp)
 1023c28:	10003d15 	stw	zero,244(r2)
 1023c2c:	e0bff917 	ldw	r2,-28(fp)
 1023c30:	10005215 	stw	zero,328(r2)
 1023c34:	e0bff917 	ldw	r2,-28(fp)
 1023c38:	10005315 	stw	zero,332(r2)
 1023c3c:	e0bff917 	ldw	r2,-28(fp)
 1023c40:	10005415 	stw	zero,336(r2)
 1023c44:	e0bff917 	ldw	r2,-28(fp)
 1023c48:	10005515 	stw	zero,340(r2)
 1023c4c:	e0bff917 	ldw	r2,-28(fp)
 1023c50:	1000b515 	stw	zero,724(r2)
 1023c54:	e0bff917 	ldw	r2,-28(fp)
 1023c58:	10007515 	stw	zero,468(r2)
 1023c5c:	e0bff917 	ldw	r2,-28(fp)
 1023c60:	1000b715 	stw	zero,732(r2)
 1023c64:	e0bff917 	ldw	r2,-28(fp)
 1023c68:	1000b815 	stw	zero,736(r2)
 1023c6c:	e0bff917 	ldw	r2,-28(fp)
 1023c70:	1000b915 	stw	zero,740(r2)
 1023c74:	e0bff917 	ldw	r2,-28(fp)
 1023c78:	1000ba15 	stw	zero,744(r2)
 1023c7c:	e0bff917 	ldw	r2,-28(fp)
 1023c80:	1080bb04 	addi	r2,r2,748
 1023c84:	1009883a 	mov	r4,r2
 1023c88:	01804504 	movi	r6,276
 1023c8c:	000b883a 	mov	r5,zero
 1023c90:	100ecec0 	call	100ecec <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 1023c94:	e0bff917 	ldw	r2,-28(fp)
 1023c98:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 1023c9c:	e0bffb17 	ldw	r2,-20(fp)
 1023ca0:	10bff304 	addi	r2,r2,-52
 1023ca4:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 1023ca8:	e0bffa17 	ldw	r2,-24(fp)
 1023cac:	10c00c04 	addi	r3,r2,48
 1023cb0:	e0bffc17 	ldw	r2,-16(fp)
 1023cb4:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 1023cb8:	e0bffa17 	ldw	r2,-24(fp)
 1023cbc:	10c00b04 	addi	r3,r2,44
 1023cc0:	e0bffd17 	ldw	r2,-12(fp)
 1023cc4:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 1023cc8:	e0bffa17 	ldw	r2,-24(fp)
 1023ccc:	10c00a04 	addi	r3,r2,40
 1023cd0:	e0bff917 	ldw	r2,-28(fp)
 1023cd4:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 1023cd8:	008040b4 	movhi	r2,258
 1023cdc:	108e7404 	addi	r2,r2,14800
 1023ce0:	10c00104 	addi	r3,r2,4
 1023ce4:	e0bffa17 	ldw	r2,-24(fp)
 1023ce8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 1023cec:	e0bffa17 	ldw	r2,-24(fp)
}
 1023cf0:	e037883a 	mov	sp,fp
 1023cf4:	dfc00117 	ldw	ra,4(sp)
 1023cf8:	df000017 	ldw	fp,0(sp)
 1023cfc:	dec00204 	addi	sp,sp,8
 1023d00:	f800283a 	ret

01023d04 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 1023d04:	defffe04 	addi	sp,sp,-8
 1023d08:	df000115 	stw	fp,4(sp)
 1023d0c:	df000104 	addi	fp,sp,4
 1023d10:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 1023d14:	e037883a 	mov	sp,fp
 1023d18:	df000017 	ldw	fp,0(sp)
 1023d1c:	dec00104 	addi	sp,sp,4
 1023d20:	f800283a 	ret

01023d24 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 1023d24:	defffe04 	addi	sp,sp,-8
 1023d28:	df000115 	stw	fp,4(sp)
 1023d2c:	df000104 	addi	fp,sp,4
 1023d30:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 1023d34:	e037883a 	mov	sp,fp
 1023d38:	df000017 	ldw	fp,0(sp)
 1023d3c:	dec00104 	addi	sp,sp,4
 1023d40:	f800283a 	ret

01023d44 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 1023d44:	deffff04 	addi	sp,sp,-4
 1023d48:	df000015 	stw	fp,0(sp)
 1023d4c:	d839883a 	mov	fp,sp
}
 1023d50:	e037883a 	mov	sp,fp
 1023d54:	df000017 	ldw	fp,0(sp)
 1023d58:	dec00104 	addi	sp,sp,4
 1023d5c:	f800283a 	ret

01023d60 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 1023d60:	deffff04 	addi	sp,sp,-4
 1023d64:	df000015 	stw	fp,0(sp)
 1023d68:	d839883a 	mov	fp,sp
}
 1023d6c:	e037883a 	mov	sp,fp
 1023d70:	df000017 	ldw	fp,0(sp)
 1023d74:	dec00104 	addi	sp,sp,4
 1023d78:	f800283a 	ret

01023d7c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 1023d7c:	deffff04 	addi	sp,sp,-4
 1023d80:	df000015 	stw	fp,0(sp)
 1023d84:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 1023d88:	e037883a 	mov	sp,fp
 1023d8c:	df000017 	ldw	fp,0(sp)
 1023d90:	dec00104 	addi	sp,sp,4
 1023d94:	f800283a 	ret

01023d98 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 1023d98:	deffff04 	addi	sp,sp,-4
 1023d9c:	df000015 	stw	fp,0(sp)
 1023da0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 1023da4:	e037883a 	mov	sp,fp
 1023da8:	df000017 	ldw	fp,0(sp)
 1023dac:	dec00104 	addi	sp,sp,4
 1023db0:	f800283a 	ret

01023db4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 1023db4:	deffff04 	addi	sp,sp,-4
 1023db8:	df000015 	stw	fp,0(sp)
 1023dbc:	d839883a 	mov	fp,sp
}
 1023dc0:	e037883a 	mov	sp,fp
 1023dc4:	df000017 	ldw	fp,0(sp)
 1023dc8:	dec00104 	addi	sp,sp,4
 1023dcc:	f800283a 	ret

01023dd0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 1023dd0:	deffff04 	addi	sp,sp,-4
 1023dd4:	df000015 	stw	fp,0(sp)
 1023dd8:	d839883a 	mov	fp,sp
}
 1023ddc:	e037883a 	mov	sp,fp
 1023de0:	df000017 	ldw	fp,0(sp)
 1023de4:	dec00104 	addi	sp,sp,4
 1023de8:	f800283a 	ret

01023dec <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 1023dec:	defffe04 	addi	sp,sp,-8
 1023df0:	df000115 	stw	fp,4(sp)
 1023df4:	df000104 	addi	fp,sp,4
 1023df8:	e13fff15 	stw	r4,-4(fp)
}
 1023dfc:	e037883a 	mov	sp,fp
 1023e00:	df000017 	ldw	fp,0(sp)
 1023e04:	dec00104 	addi	sp,sp,4
 1023e08:	f800283a 	ret

01023e0c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1023e0c:	defffa04 	addi	sp,sp,-24
 1023e10:	dfc00515 	stw	ra,20(sp)
 1023e14:	df000415 	stw	fp,16(sp)
 1023e18:	df000404 	addi	fp,sp,16
 1023e1c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1023e20:	008040b4 	movhi	r2,258
 1023e24:	109f8f04 	addi	r2,r2,32316
 1023e28:	10800017 	ldw	r2,0(r2)
 1023e2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1023e30:	00003306 	br	1023f00 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1023e34:	e0bffd17 	ldw	r2,-12(fp)
 1023e38:	11000217 	ldw	r4,8(r2)
 1023e3c:	100f4040 	call	100f404 <strlen>
 1023e40:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1023e44:	e0bffd17 	ldw	r2,-12(fp)
 1023e48:	10c00217 	ldw	r3,8(r2)
 1023e4c:	e0bffc17 	ldw	r2,-16(fp)
 1023e50:	1885883a 	add	r2,r3,r2
 1023e54:	10bfffc4 	addi	r2,r2,-1
 1023e58:	10800003 	ldbu	r2,0(r2)
 1023e5c:	10803fcc 	andi	r2,r2,255
 1023e60:	1080201c 	xori	r2,r2,128
 1023e64:	10bfe004 	addi	r2,r2,-128
 1023e68:	10800bd8 	cmpnei	r2,r2,47
 1023e6c:	1000031e 	bne	r2,zero,1023e7c <alt_find_file+0x70>
    {
      len -= 1;
 1023e70:	e0bffc17 	ldw	r2,-16(fp)
 1023e74:	10bfffc4 	addi	r2,r2,-1
 1023e78:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1023e7c:	e0bffc17 	ldw	r2,-16(fp)
 1023e80:	1007883a 	mov	r3,r2
 1023e84:	e0bffe17 	ldw	r2,-8(fp)
 1023e88:	1885883a 	add	r2,r3,r2
 1023e8c:	10800003 	ldbu	r2,0(r2)
 1023e90:	10803fcc 	andi	r2,r2,255
 1023e94:	1080201c 	xori	r2,r2,128
 1023e98:	10bfe004 	addi	r2,r2,-128
 1023e9c:	10800be0 	cmpeqi	r2,r2,47
 1023ea0:	10000a1e 	bne	r2,zero,1023ecc <alt_find_file+0xc0>
 1023ea4:	e0bffc17 	ldw	r2,-16(fp)
 1023ea8:	1007883a 	mov	r3,r2
 1023eac:	e0bffe17 	ldw	r2,-8(fp)
 1023eb0:	1885883a 	add	r2,r3,r2
 1023eb4:	10800003 	ldbu	r2,0(r2)
 1023eb8:	10803fcc 	andi	r2,r2,255
 1023ebc:	1080201c 	xori	r2,r2,128
 1023ec0:	10bfe004 	addi	r2,r2,-128
 1023ec4:	1004c03a 	cmpne	r2,r2,zero
 1023ec8:	10000a1e 	bne	r2,zero,1023ef4 <alt_find_file+0xe8>
 1023ecc:	e0bffd17 	ldw	r2,-12(fp)
 1023ed0:	11000217 	ldw	r4,8(r2)
 1023ed4:	e1bffc17 	ldw	r6,-16(fp)
 1023ed8:	e17ffe17 	ldw	r5,-8(fp)
 1023edc:	100eaf80 	call	100eaf8 <memcmp>
 1023ee0:	1004c03a 	cmpne	r2,r2,zero
 1023ee4:	1000031e 	bne	r2,zero,1023ef4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1023ee8:	e0bffd17 	ldw	r2,-12(fp)
 1023eec:	e0bfff15 	stw	r2,-4(fp)
 1023ef0:	00000806 	br	1023f14 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1023ef4:	e0bffd17 	ldw	r2,-12(fp)
 1023ef8:	10800017 	ldw	r2,0(r2)
 1023efc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1023f00:	00c040b4 	movhi	r3,258
 1023f04:	18df8f04 	addi	r3,r3,32316
 1023f08:	e0bffd17 	ldw	r2,-12(fp)
 1023f0c:	10ffc91e 	bne	r2,r3,1023e34 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1023f10:	e03fff15 	stw	zero,-4(fp)
 1023f14:	e0bfff17 	ldw	r2,-4(fp)
}
 1023f18:	e037883a 	mov	sp,fp
 1023f1c:	dfc00117 	ldw	ra,4(sp)
 1023f20:	df000017 	ldw	fp,0(sp)
 1023f24:	dec00204 	addi	sp,sp,8
 1023f28:	f800283a 	ret

01023f2c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1023f2c:	defff804 	addi	sp,sp,-32
 1023f30:	dfc00715 	stw	ra,28(sp)
 1023f34:	df000615 	stw	fp,24(sp)
 1023f38:	df000604 	addi	fp,sp,24
 1023f3c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1023f40:	00bffa04 	movi	r2,-24
 1023f44:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 1023f48:	008040f4 	movhi	r2,259
 1023f4c:	10a70804 	addi	r2,r2,-25568
 1023f50:	10800017 	ldw	r2,0(r2)
 1023f54:	e0bffa15 	stw	r2,-24(fp)
 1023f58:	e03ffb0d 	sth	zero,-20(fp)
 1023f5c:	e17ffb0b 	ldhu	r5,-20(fp)
 1023f60:	e1bffe04 	addi	r6,fp,-8
 1023f64:	e13ffa17 	ldw	r4,-24(fp)
 1023f68:	101f1e00 	call	101f1e0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1023f6c:	e03ffd15 	stw	zero,-12(fp)
 1023f70:	00001e06 	br	1023fec <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 1023f74:	e0bffd17 	ldw	r2,-12(fp)
 1023f78:	00c040b4 	movhi	r3,258
 1023f7c:	18da8a04 	addi	r3,r3,27176
 1023f80:	10800324 	muli	r2,r2,12
 1023f84:	10c5883a 	add	r2,r2,r3
 1023f88:	10800017 	ldw	r2,0(r2)
 1023f8c:	1004c03a 	cmpne	r2,r2,zero
 1023f90:	1000131e 	bne	r2,zero,1023fe0 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 1023f94:	e0bffd17 	ldw	r2,-12(fp)
 1023f98:	00c040b4 	movhi	r3,258
 1023f9c:	18da8a04 	addi	r3,r3,27176
 1023fa0:	10800324 	muli	r2,r2,12
 1023fa4:	10c7883a 	add	r3,r2,r3
 1023fa8:	e0bfff17 	ldw	r2,-4(fp)
 1023fac:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1023fb0:	008040b4 	movhi	r2,258
 1023fb4:	109f9304 	addi	r2,r2,32332
 1023fb8:	10c00017 	ldw	r3,0(r2)
 1023fbc:	e0bffd17 	ldw	r2,-12(fp)
 1023fc0:	1880040e 	bge	r3,r2,1023fd4 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 1023fc4:	00c040b4 	movhi	r3,258
 1023fc8:	18df9304 	addi	r3,r3,32332
 1023fcc:	e0bffd17 	ldw	r2,-12(fp)
 1023fd0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1023fd4:	e0bffd17 	ldw	r2,-12(fp)
 1023fd8:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 1023fdc:	00000606 	br	1023ff8 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1023fe0:	e0bffd17 	ldw	r2,-12(fp)
 1023fe4:	10800044 	addi	r2,r2,1
 1023fe8:	e0bffd15 	stw	r2,-12(fp)
 1023fec:	e0bffd17 	ldw	r2,-12(fp)
 1023ff0:	10800810 	cmplti	r2,r2,32
 1023ff4:	103fdf1e 	bne	r2,zero,1023f74 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 1023ff8:	008040f4 	movhi	r2,259
 1023ffc:	10a70804 	addi	r2,r2,-25568
 1024000:	11000017 	ldw	r4,0(r2)
 1024004:	101f5d80 	call	101f5d8 <OSSemPost>

  return rc;
 1024008:	e0bffc17 	ldw	r2,-16(fp)
}
 102400c:	e037883a 	mov	sp,fp
 1024010:	dfc00117 	ldw	ra,4(sp)
 1024014:	df000017 	ldw	fp,0(sp)
 1024018:	dec00204 	addi	sp,sp,8
 102401c:	f800283a 	ret

01024020 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1024020:	defffb04 	addi	sp,sp,-20
 1024024:	df000415 	stw	fp,16(sp)
 1024028:	df000404 	addi	fp,sp,16
 102402c:	e13ffe15 	stw	r4,-8(fp)
 1024030:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1024034:	e0bfff17 	ldw	r2,-4(fp)
 1024038:	10880070 	cmpltui	r2,r2,8193
 102403c:	1000021e 	bne	r2,zero,1024048 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1024040:	00880004 	movi	r2,8192
 1024044:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1024048:	e0fffe17 	ldw	r3,-8(fp)
 102404c:	e0bfff17 	ldw	r2,-4(fp)
 1024050:	1885883a 	add	r2,r3,r2
 1024054:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1024058:	e0bffe17 	ldw	r2,-8(fp)
 102405c:	e0bffd15 	stw	r2,-12(fp)
 1024060:	00000506 	br	1024078 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1024064:	e0bffd17 	ldw	r2,-12(fp)
 1024068:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 102406c:	e0bffd17 	ldw	r2,-12(fp)
 1024070:	10800804 	addi	r2,r2,32
 1024074:	e0bffd15 	stw	r2,-12(fp)
 1024078:	e0fffd17 	ldw	r3,-12(fp)
 102407c:	e0bffc17 	ldw	r2,-16(fp)
 1024080:	18bff836 	bltu	r3,r2,1024064 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1024084:	e0bffe17 	ldw	r2,-8(fp)
 1024088:	108007cc 	andi	r2,r2,31
 102408c:	1005003a 	cmpeq	r2,r2,zero
 1024090:	1000021e 	bne	r2,zero,102409c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1024094:	e0bffd17 	ldw	r2,-12(fp)
 1024098:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 102409c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 10240a0:	e037883a 	mov	sp,fp
 10240a4:	df000017 	ldw	fp,0(sp)
 10240a8:	dec00104 	addi	sp,sp,4
 10240ac:	f800283a 	ret

010240b0 <atexit>:
 10240b0:	200b883a 	mov	r5,r4
 10240b4:	000d883a 	mov	r6,zero
 10240b8:	0009883a 	mov	r4,zero
 10240bc:	000f883a 	mov	r7,zero
 10240c0:	10240fc1 	jmpi	10240fc <__register_exitproc>

010240c4 <exit>:
 10240c4:	defffe04 	addi	sp,sp,-8
 10240c8:	000b883a 	mov	r5,zero
 10240cc:	dc000015 	stw	r16,0(sp)
 10240d0:	dfc00115 	stw	ra,4(sp)
 10240d4:	2021883a 	mov	r16,r4
 10240d8:	10242340 	call	1024234 <__call_exitprocs>
 10240dc:	008040b4 	movhi	r2,258
 10240e0:	109f8c04 	addi	r2,r2,32304
 10240e4:	11000017 	ldw	r4,0(r2)
 10240e8:	20800f17 	ldw	r2,60(r4)
 10240ec:	10000126 	beq	r2,zero,10240f4 <exit+0x30>
 10240f0:	103ee83a 	callr	r2
 10240f4:	8009883a 	mov	r4,r16
 10240f8:	10188000 	call	1018800 <_exit>

010240fc <__register_exitproc>:
 10240fc:	defffa04 	addi	sp,sp,-24
 1024100:	008040b4 	movhi	r2,258
 1024104:	109f8c04 	addi	r2,r2,32304
 1024108:	dc000015 	stw	r16,0(sp)
 102410c:	14000017 	ldw	r16,0(r2)
 1024110:	dd000415 	stw	r20,16(sp)
 1024114:	2829883a 	mov	r20,r5
 1024118:	81405217 	ldw	r5,328(r16)
 102411c:	dcc00315 	stw	r19,12(sp)
 1024120:	dc800215 	stw	r18,8(sp)
 1024124:	dc400115 	stw	r17,4(sp)
 1024128:	dfc00515 	stw	ra,20(sp)
 102412c:	2023883a 	mov	r17,r4
 1024130:	3027883a 	mov	r19,r6
 1024134:	3825883a 	mov	r18,r7
 1024138:	28002526 	beq	r5,zero,10241d0 <__register_exitproc+0xd4>
 102413c:	29000117 	ldw	r4,4(r5)
 1024140:	008007c4 	movi	r2,31
 1024144:	11002716 	blt	r2,r4,10241e4 <__register_exitproc+0xe8>
 1024148:	8800101e 	bne	r17,zero,102418c <__register_exitproc+0x90>
 102414c:	2105883a 	add	r2,r4,r4
 1024150:	1085883a 	add	r2,r2,r2
 1024154:	20c00044 	addi	r3,r4,1
 1024158:	1145883a 	add	r2,r2,r5
 102415c:	0009883a 	mov	r4,zero
 1024160:	15000215 	stw	r20,8(r2)
 1024164:	28c00115 	stw	r3,4(r5)
 1024168:	2005883a 	mov	r2,r4
 102416c:	dfc00517 	ldw	ra,20(sp)
 1024170:	dd000417 	ldw	r20,16(sp)
 1024174:	dcc00317 	ldw	r19,12(sp)
 1024178:	dc800217 	ldw	r18,8(sp)
 102417c:	dc400117 	ldw	r17,4(sp)
 1024180:	dc000017 	ldw	r16,0(sp)
 1024184:	dec00604 	addi	sp,sp,24
 1024188:	f800283a 	ret
 102418c:	29802204 	addi	r6,r5,136
 1024190:	00800044 	movi	r2,1
 1024194:	110e983a 	sll	r7,r2,r4
 1024198:	30c04017 	ldw	r3,256(r6)
 102419c:	2105883a 	add	r2,r4,r4
 10241a0:	1085883a 	add	r2,r2,r2
 10241a4:	1185883a 	add	r2,r2,r6
 10241a8:	19c6b03a 	or	r3,r3,r7
 10241ac:	14802015 	stw	r18,128(r2)
 10241b0:	14c00015 	stw	r19,0(r2)
 10241b4:	00800084 	movi	r2,2
 10241b8:	30c04015 	stw	r3,256(r6)
 10241bc:	88bfe31e 	bne	r17,r2,102414c <__register_exitproc+0x50>
 10241c0:	30804117 	ldw	r2,260(r6)
 10241c4:	11c4b03a 	or	r2,r2,r7
 10241c8:	30804115 	stw	r2,260(r6)
 10241cc:	003fdf06 	br	102414c <__register_exitproc+0x50>
 10241d0:	008040f4 	movhi	r2,259
 10241d4:	109dfe04 	addi	r2,r2,30712
 10241d8:	100b883a 	mov	r5,r2
 10241dc:	80805215 	stw	r2,328(r16)
 10241e0:	003fd606 	br	102413c <__register_exitproc+0x40>
 10241e4:	00804074 	movhi	r2,257
 10241e8:	10b8b004 	addi	r2,r2,-7488
 10241ec:	1000021e 	bne	r2,zero,10241f8 <__register_exitproc+0xfc>
 10241f0:	013fffc4 	movi	r4,-1
 10241f4:	003fdc06 	br	1024168 <__register_exitproc+0x6c>
 10241f8:	01006404 	movi	r4,400
 10241fc:	103ee83a 	callr	r2
 1024200:	1007883a 	mov	r3,r2
 1024204:	103ffa26 	beq	r2,zero,10241f0 <__register_exitproc+0xf4>
 1024208:	80805217 	ldw	r2,328(r16)
 102420c:	180b883a 	mov	r5,r3
 1024210:	18000115 	stw	zero,4(r3)
 1024214:	18800015 	stw	r2,0(r3)
 1024218:	80c05215 	stw	r3,328(r16)
 102421c:	18006215 	stw	zero,392(r3)
 1024220:	18006315 	stw	zero,396(r3)
 1024224:	0009883a 	mov	r4,zero
 1024228:	883fc826 	beq	r17,zero,102414c <__register_exitproc+0x50>
 102422c:	003fd706 	br	102418c <__register_exitproc+0x90>

01024230 <register_fini>:
 1024230:	f800283a 	ret

01024234 <__call_exitprocs>:
 1024234:	008040b4 	movhi	r2,258
 1024238:	109f8c04 	addi	r2,r2,32304
 102423c:	10800017 	ldw	r2,0(r2)
 1024240:	defff304 	addi	sp,sp,-52
 1024244:	df000b15 	stw	fp,44(sp)
 1024248:	d8800115 	stw	r2,4(sp)
 102424c:	00804074 	movhi	r2,257
 1024250:	10b8ab04 	addi	r2,r2,-7508
 1024254:	1005003a 	cmpeq	r2,r2,zero
 1024258:	d8800215 	stw	r2,8(sp)
 102425c:	d8800117 	ldw	r2,4(sp)
 1024260:	dd400815 	stw	r21,32(sp)
 1024264:	dd000715 	stw	r20,28(sp)
 1024268:	10805204 	addi	r2,r2,328
 102426c:	dfc00c15 	stw	ra,48(sp)
 1024270:	ddc00a15 	stw	r23,40(sp)
 1024274:	dd800915 	stw	r22,36(sp)
 1024278:	dcc00615 	stw	r19,24(sp)
 102427c:	dc800515 	stw	r18,20(sp)
 1024280:	dc400415 	stw	r17,16(sp)
 1024284:	dc000315 	stw	r16,12(sp)
 1024288:	282b883a 	mov	r21,r5
 102428c:	2039883a 	mov	fp,r4
 1024290:	d8800015 	stw	r2,0(sp)
 1024294:	2829003a 	cmpeq	r20,r5,zero
 1024298:	d8800117 	ldw	r2,4(sp)
 102429c:	14405217 	ldw	r17,328(r2)
 10242a0:	88001026 	beq	r17,zero,10242e4 <__call_exitprocs+0xb0>
 10242a4:	ddc00017 	ldw	r23,0(sp)
 10242a8:	88800117 	ldw	r2,4(r17)
 10242ac:	8c802204 	addi	r18,r17,136
 10242b0:	143fffc4 	addi	r16,r2,-1
 10242b4:	80000916 	blt	r16,zero,10242dc <__call_exitprocs+0xa8>
 10242b8:	05bfffc4 	movi	r22,-1
 10242bc:	a000151e 	bne	r20,zero,1024314 <__call_exitprocs+0xe0>
 10242c0:	8409883a 	add	r4,r16,r16
 10242c4:	2105883a 	add	r2,r4,r4
 10242c8:	1485883a 	add	r2,r2,r18
 10242cc:	10c02017 	ldw	r3,128(r2)
 10242d0:	a8c01126 	beq	r21,r3,1024318 <__call_exitprocs+0xe4>
 10242d4:	843fffc4 	addi	r16,r16,-1
 10242d8:	85bff81e 	bne	r16,r22,10242bc <__call_exitprocs+0x88>
 10242dc:	d8800217 	ldw	r2,8(sp)
 10242e0:	10003126 	beq	r2,zero,10243a8 <__call_exitprocs+0x174>
 10242e4:	dfc00c17 	ldw	ra,48(sp)
 10242e8:	df000b17 	ldw	fp,44(sp)
 10242ec:	ddc00a17 	ldw	r23,40(sp)
 10242f0:	dd800917 	ldw	r22,36(sp)
 10242f4:	dd400817 	ldw	r21,32(sp)
 10242f8:	dd000717 	ldw	r20,28(sp)
 10242fc:	dcc00617 	ldw	r19,24(sp)
 1024300:	dc800517 	ldw	r18,20(sp)
 1024304:	dc400417 	ldw	r17,16(sp)
 1024308:	dc000317 	ldw	r16,12(sp)
 102430c:	dec00d04 	addi	sp,sp,52
 1024310:	f800283a 	ret
 1024314:	8409883a 	add	r4,r16,r16
 1024318:	88c00117 	ldw	r3,4(r17)
 102431c:	2105883a 	add	r2,r4,r4
 1024320:	1445883a 	add	r2,r2,r17
 1024324:	18ffffc4 	addi	r3,r3,-1
 1024328:	11800217 	ldw	r6,8(r2)
 102432c:	1c001526 	beq	r3,r16,1024384 <__call_exitprocs+0x150>
 1024330:	10000215 	stw	zero,8(r2)
 1024334:	303fe726 	beq	r6,zero,10242d4 <__call_exitprocs+0xa0>
 1024338:	00c00044 	movi	r3,1
 102433c:	1c06983a 	sll	r3,r3,r16
 1024340:	90804017 	ldw	r2,256(r18)
 1024344:	8cc00117 	ldw	r19,4(r17)
 1024348:	1884703a 	and	r2,r3,r2
 102434c:	10001426 	beq	r2,zero,10243a0 <__call_exitprocs+0x16c>
 1024350:	90804117 	ldw	r2,260(r18)
 1024354:	1884703a 	and	r2,r3,r2
 1024358:	10000c1e 	bne	r2,zero,102438c <__call_exitprocs+0x158>
 102435c:	2105883a 	add	r2,r4,r4
 1024360:	1485883a 	add	r2,r2,r18
 1024364:	11400017 	ldw	r5,0(r2)
 1024368:	e009883a 	mov	r4,fp
 102436c:	303ee83a 	callr	r6
 1024370:	88800117 	ldw	r2,4(r17)
 1024374:	98bfc81e 	bne	r19,r2,1024298 <__call_exitprocs+0x64>
 1024378:	b8800017 	ldw	r2,0(r23)
 102437c:	147fd526 	beq	r2,r17,10242d4 <__call_exitprocs+0xa0>
 1024380:	003fc506 	br	1024298 <__call_exitprocs+0x64>
 1024384:	8c000115 	stw	r16,4(r17)
 1024388:	003fea06 	br	1024334 <__call_exitprocs+0x100>
 102438c:	2105883a 	add	r2,r4,r4
 1024390:	1485883a 	add	r2,r2,r18
 1024394:	11000017 	ldw	r4,0(r2)
 1024398:	303ee83a 	callr	r6
 102439c:	003ff406 	br	1024370 <__call_exitprocs+0x13c>
 10243a0:	303ee83a 	callr	r6
 10243a4:	003ff206 	br	1024370 <__call_exitprocs+0x13c>
 10243a8:	88800117 	ldw	r2,4(r17)
 10243ac:	1000081e 	bne	r2,zero,10243d0 <__call_exitprocs+0x19c>
 10243b0:	89000017 	ldw	r4,0(r17)
 10243b4:	20000726 	beq	r4,zero,10243d4 <__call_exitprocs+0x1a0>
 10243b8:	b9000015 	stw	r4,0(r23)
 10243bc:	8809883a 	mov	r4,r17
 10243c0:	100e2ac0 	call	100e2ac <free>
 10243c4:	bc400017 	ldw	r17,0(r23)
 10243c8:	883fb71e 	bne	r17,zero,10242a8 <__call_exitprocs+0x74>
 10243cc:	003fc506 	br	10242e4 <__call_exitprocs+0xb0>
 10243d0:	89000017 	ldw	r4,0(r17)
 10243d4:	882f883a 	mov	r23,r17
 10243d8:	2023883a 	mov	r17,r4
 10243dc:	883fb21e 	bne	r17,zero,10242a8 <__call_exitprocs+0x74>
 10243e0:	003fc006 	br	10242e4 <__call_exitprocs+0xb0>
 10243e4:	010d0bff 	0x10d0bff
 10243e8:	01000004 	movi	r4,0
 10243ec:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 10243f0:	01024840 	call	102484 <OSCtxSw_SWITCH_PC+0x102444>
 10243f4:	010d0bff 	0x10d0bff
 10243f8:	01010002 	0x1010002
 10243fc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1024400:	01024840 	call	102484 <OSCtxSw_SWITCH_PC+0x102444>
 1024404:	0201ffff 	0x201ffff
 1024408:	ffff0000 	call	ffff000 <__alt_data_end+0xdfff000>
 102440c:	00000201 	jmpi	20 <OSTCBNext_OFFSET+0xc>
 1024410:	010d0bff 	0x10d0bff
 1024414:	01000004 	movi	r4,0
 1024418:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 102441c:	01024840 	call	102484 <OSCtxSw_SWITCH_PC+0x102444>
 1024420:	010d0bff 	0x10d0bff
 1024424:	01010002 	0x1010002
 1024428:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102442c:	01024840 	call	102484 <OSCtxSw_SWITCH_PC+0x102444>
 1024430:	010d0bff 	0x10d0bff
 1024434:	01000004 	movi	r4,0
 1024438:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 102443c:	01024840 	call	102484 <OSCtxSw_SWITCH_PC+0x102444>
 1024440:	011d0bff 	0x11d0bff
 1024444:	01000010 	cmplti	r4,zero,0
 1024448:	03030203 	ldbu	r12,3080(zero)
 102444c:	05030403 	ldbu	r20,3088(zero)
 1024450:	07030603 	ldbu	fp,3096(zero)
 1024454:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 1024458:	0000007d 	0x7d
 102445c:	01024840 	call	102484 <OSCtxSw_SWITCH_PC+0x102444>
 1024460:	010d0bff 	0x10d0bff
 1024464:	01030004 	movi	r4,3072
 1024468:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 102446c:	0000007d 	0x7d
 1024470:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1024474:	01110bff 	0x1110bff
 1024478:	01030008 	cmpgei	r4,zero,3072
 102447c:	03000203 	ldbu	r12,8(zero)
 1024480:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 1024484:	0000007d 	0x7d
 1024488:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102448c:	01110bff 	0x1110bff
 1024490:	01030008 	cmpgei	r4,zero,3072
 1024494:	03000203 	ldbu	r12,8(zero)
 1024498:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 102449c:	0000007d 	0x7d
 10244a0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10244a4:	01110bff 	0x1110bff
 10244a8:	01030008 	cmpgei	r4,zero,3072
 10244ac:	03000203 	ldbu	r12,8(zero)
 10244b0:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 10244b4:	0000007d 	0x7d
 10244b8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10244bc:	01110bff 	0x1110bff
 10244c0:	01030008 	cmpgei	r4,zero,3072
 10244c4:	03000203 	ldbu	r12,8(zero)
 10244c8:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 10244cc:	0000007d 	0x7d
 10244d0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10244d4:	01110bff 	0x1110bff
 10244d8:	01030008 	cmpgei	r4,zero,3072
 10244dc:	03000203 	ldbu	r12,8(zero)
 10244e0:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 10244e4:	0000007d 	0x7d
 10244e8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10244ec:	01110bff 	0x1110bff
 10244f0:	01030008 	cmpgei	r4,zero,3072
 10244f4:	03000203 	ldbu	r12,8(zero)
 10244f8:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 10244fc:	0000007d 	0x7d
 1024500:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1024504:	01110bff 	0x1110bff
 1024508:	01030008 	cmpgei	r4,zero,3072
 102450c:	03000203 	ldbu	r12,8(zero)
 1024510:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 1024514:	0000007d 	0x7d
 1024518:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102451c:	01110bff 	0x1110bff
 1024520:	01030008 	cmpgei	r4,zero,3072
 1024524:	03000203 	ldbu	r12,8(zero)
 1024528:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 102452c:	0000007d 	0x7d
 1024530:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1024534:	01110bff 	0x1110bff
 1024538:	01030008 	cmpgei	r4,zero,3072
 102453c:	03000203 	ldbu	r12,8(zero)
 1024540:	7f000000 	call	7f00000 <__alt_data_end+0x5f00000>
 1024544:	0000007d 	0x7d
 1024548:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102454c:	01090bff 	0x1090bff
 1024550:	7f030002 	0x7f030002
 1024554:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1024558:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102455c:	01090bff 	0x1090bff
 1024560:	7f030002 	0x7f030002
 1024564:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1024568:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102456c:	01090bff 	0x1090bff
 1024570:	7f030002 	0x7f030002
 1024574:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1024578:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102457c:	01090bff 	0x1090bff
 1024580:	7f030002 	0x7f030002
 1024584:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1024588:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102458c:	01090bff 	0x1090bff
 1024590:	7f030002 	0x7f030002
 1024594:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1024598:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 102459c:	01090bff 	0x1090bff
 10245a0:	7f030002 	0x7f030002
 10245a4:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 10245a8:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 10245ac:	ff000002 	0xff000002
 10245b0:	000201ff 	0x201ff
 10245b4:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 10245b8:	ff000002 	0xff000002
 10245bc:	000201ff 	0x201ff
 10245c0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10245c4:	01090bff 	0x1090bff
 10245c8:	7f030002 	0x7f030002
 10245cc:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 10245d0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10245d4:	01090bff 	0x1090bff
 10245d8:	7f030002 	0x7f030002
 10245dc:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 10245e0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10245e4:	01090bff 	0x1090bff
 10245e8:	7f030002 	0x7f030002
 10245ec:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 10245f0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10245f4:	01090bff 	0x1090bff
 10245f8:	7f030002 	0x7f030002
 10245fc:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1024600:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1024604:	01090bff 	0x1090bff
 1024608:	7f030002 	0x7f030002
 102460c:	007d0000 	call	7d000 <OSCtxSw_SWITCH_PC+0x7cfc0>
 1024610:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1024614:	01090bff 	0x1090bff
 1024618:	7f010002 	0x7f010002
 102461c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1024620:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1024624:	00000002 	0x2
 1024628:	01090bff 	0x1090bff
 102462c:	7f010002 	0x7f010002
 1024630:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1024634:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1024638:	ff000002 	0xff000002
 102463c:	000201ff 	0x201ff
 1024640:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1024644:	01090bff 	0x1090bff
 1024648:	01010004 	movi	r4,1024
 102464c:	00007f00 	call	7f0 <OSCtxSw_SWITCH_PC+0x7b0>
 1024650:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1024654:	01090bff 	0x1090bff
 1024658:	01010004 	movi	r4,1024
 102465c:	00007f00 	call	7f0 <OSCtxSw_SWITCH_PC+0x7b0>
 1024660:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1024664:	010d0bff 	0x10d0bff
 1024668:	01010006 	br	1024a6c <_ZTIP20QueueCreateException+0xc>
 102466c:	7f000200 	call	7f00020 <__alt_data_end+0x5f00020>
 1024670:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1024674:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1024678:	ff000002 	0xff000002
 102467c:	000201ff 	0x201ff
 1024680:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1024684:	ff000002 	0xff000002
 1024688:	000201ff 	0x201ff
 102468c:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1024690:	01000004 	movi	r4,0
 1024694:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 1024698:	01000004 	movi	r4,0
 102469c:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 10246a0:	01000004 	movi	r4,0
 10246a4:	01ffff00 	call	1ffff0 <OSCtxSw_SWITCH_PC+0x1fffb0>
 10246a8:	01000008 	cmpgei	r4,zero,0
 10246ac:	03000200 	call	300020 <OSCtxSw_SWITCH_PC+0x2fffe0>
 10246b0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10246b4:	010d0bff 	0x10d0bff
 10246b8:	01000004 	movi	r4,0
 10246bc:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 10246c0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10246c4:	010d0bff 	0x10d0bff
 10246c8:	01000004 	movi	r4,0
 10246cc:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 10246d0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10246d4:	010d0bff 	0x10d0bff
 10246d8:	01000004 	movi	r4,0
 10246dc:	00000101 	jmpi	10 <OSTCBStkPtr_OFFSET+0x10>
 10246e0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 10246e4:	01090bff 	0x1090bff
 10246e8:	7f010002 	0x7f010002
	...
 10246f4:	01090bff 	0x1090bff
 10246f8:	7f010002 	0x7f010002
	...
 1024704:	010d0bff 	0x10d0bff
 1024708:	7f010002 	0x7f010002
 102470c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 1024710:	010255ec 	andhi	r4,zero,2391
 1024714:	00000001 	jmpi	0 <OSTCBStkPtr_OFFSET>
 1024718:	01024230 	cmpltui	r4,zero,2312
