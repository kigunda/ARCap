/*
 * NetworkChecker.cpp
 *
 *  Created on: 2014-04-03
 *      Author: Kenan Kigunda
 */

#include "altera_avalon_pio_regs.h"

#include "NetworkChecker.h"

// CONSTRUCTION

/**
 * Creates a new network checker.
 * @param wifiHandler - the wifi handler used to ping the server
 */
NetworkChecker::NetworkChecker(WifiHandler *wifiHandler) {
	wifi = wifiHandler;
}

// LISTENERS

/*
 * Adds a listener queue to this network checker.
 * The queue will receive network connection events such as NETWORK_DISCONNECT
 * @param queue - the queue to which network connection events will be forwarded
 */
void NetworkChecker::addListener(OS_EVENT *queue) {
	listeners.push_back(queue);
}

/**
 * Posts a network connection event to the listeners.
 * @param event - the name and parameters of the event.
 * @throw QueuePostException if the event cannot be posted to a listener
 */
void NetworkChecker::post(const char *event) {
	for (vector<OS_EVENT *>::iterator it = listeners.begin(); it != listeners.end(); ++it) {
		// Post to the listener.
		int status = OSQPost(*it, (void *)event);
		if (status != OS_NO_ERR) {
			throw new QueuePostException();
		}
	}
}

// UPDATES

/**
 * Updates this checker. The checker will ping the server
 * and issue NETWORK_CONNECT if the server responds
 * and NETWORK_DISCONNECT if the server does not respond.
 * @throw QueuePostException if a message cannot be posted to a listener
 */
void NetworkChecker::update() {
	OSTimeDlyHMSM(0, 0, NETWORK_CHECKER_UPDATE_TIME_SECONDS, 0);
	// Ping the server.
	wifi->tcpSend(MESSAGE_CONNECT_PREFIX ROVER_ID, WAIT_FOREVER);
	char *response = wifi->tcpReceive();
	if (strncmp(response, MESSAGE_OK, MESSAGE_OK_LENGTH) == 0) {
		// Indicate success on the LED.
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, NETWORK_LED_CONNECTED);
		// Post network connect.
		post("nc");
		NETWORKCHECKER_LOG(printf("NetworkChecker [status: connected]\n"));
	} else {
		// Indicate the failure on the LED.
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_IR_EMITTER_BASE, NETWORK_LED_DISCONNECTED);
		// Post network disconnect.
		post(NETWORK_COMMAND NETWORK_DISCONNECT);
		NETWORKCHEKER_LOG(printf("NetworkChecker [status: disconnected]\n"));
	}
}
