/*
 * NetworkInfraredBridge.cpp
 *
 *  Created on: 2014-03-03
 *      Author: Kenan Kigunda
 */

#include <stdio.h>
#include "NetworkInfraredBridge.h"

// ALLOCATION
NetworkInfraredBridge::NetworkInfraredBridge() {}
NetworkInfraredBridge::~NetworkInfraredBridge() {}

// INITIALIZATION

/*
 * Initializes this bridge.
 * @return OK if there are no initialization errors
 */
Status NetworkInfraredBridge::init() {
	/* Create the infrared receive queue. */
	receiveQueue = OSQCreate((void**)&receiveBuffer, NETWORK_TO_INFRARED_RECEIVE_SIZE);
	if (receiveQueue == NULL) {
		return ERR_BRIDGE;
	} else {
		return OK;
	}
}

/*
 * Checks the infrared receive queue for new readings.
 * @note This method is blocking.
 * @return OK when a new reading is received and processed without error
 */
Status NetworkInfraredBridge::update() {
	INT8U status;
	int level = (int)OSQPend(receiveQueue, 0, &status);
	if (status != OS_NO_ERR) {
		return ERR_INFRARED;
	} else {
		return process(level);
	}
}

/*
 * Gets the queue used to accept infrared receive events.
 * @return the infrared receive queue
 */
OS_EVENT *NetworkInfraredBridge::listener() {
	return receiveQueue;
}

/*
 * Processes an infrared receive event.
 * @param level - the level recorded by the infrared receiver
 */
Status NetworkInfraredBridge::process(unsigned int level) {
	if (level > INFRARED_TO_NETWORK_RECEIVE_THRESHHOLD) {
		INFRAREDNETWORKBRIDGE_LOG(printf("InfraredToNetwork [event: infrared receive, level: %u]\n", level));
	} return OK;
}
