/*************************************************************************
 * Copyright (c) 2004 Altera Corporation, San Jose, California, USA.      *
 * All rights reserved. All use of this software and documentation is     *
 * subject to the License Agreement located at the end of this file below.*
 **************************************************************************
 * Description:                                                           *
 * The following is a simple hello world program running MicroC/OS-II.The *
 * purpose of the design is to be a very simple application that just     *
 * demonstrates MicroC/OS-II running on NIOS II.The design doesn't account*
 * for issues such as checking system call return codes. etc.             *
 *                                                                        *
 * Requirements:                                                          *
 *   -Supported Example Hardware Platforms                                *
 *     Standard                                                           *
 *     Full Featured                                                      *
 *     Low Cost                                                           *
 *   -Supported Development Boards                                        *
 *     Nios II Development Board, Stratix II Edition                      *
 *     Nios Development Board, Stratix Professional Edition               *
 *     Nios Development Board, Stratix Edition                            *
 *     Nios Development Board, Cyclone Edition                            *
 *   -System Library Settings                                             *
 *     RTOS Type - MicroC/OS-II                                           *
 *     Periodic System Timer                                              *
 *   -Know Issues                                                         *
 *     If this design is run on the ISS, terminal output will take several*
 *     minutes per iteration.                                             *
 **************************************************************************/


#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_de0_nano_adc_regs.h"
#include "includes.h"

/* Definition of Task Stacks */
#define   TASK_STACKSIZE       2048
OS_STK    task1_stk[TASK_STACKSIZE];
OS_STK    task2_stk[TASK_STACKSIZE];

/* Definition of Task Priorities */

#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

#define WRITE_FIFO_EMPTY	0x80
#define READ_FIFO_EMPTY		0x0

#define WIFI_READ_MAX_SIZE	1024
#define WIFI_READ_STOP_MARKER_MAX_SIZE	32

alt_up_rs232_dev *wifi;

bool stringEndsWith(char *whole, int wholeLength, char *end, int endLength) {
	if (wholeLength < endLength) {
		return false;
	} else {
		return strncmp(whole + wholeLength - endLength, end, endLength) == 0;
	}
}

void wifiWrite(char *message) {
	int i = 0;
	alt_up_rs232_disable_read_interrupt(wifi);
	char data = message[i];
	while (data != '\0') {
		// Check for write space.
		unsigned writeAvailable = alt_up_rs232_get_available_space_in_write_FIFO(wifi);
		if (writeAvailable > WRITE_FIFO_EMPTY) {
			// If space, write the character.
			alt_up_rs232_write_data(wifi, data);
			data = message[++i];
			OSTimeDlyHMSM(0, 0, 0, 2);
		} else {
			// If no space, wait.
			OSTimeDlyHMSM(0, 0, 0, 100);
		}
	}
	printf("%s > ", message);
	alt_up_rs232_enable_read_interrupt(wifi);
}

int wifiReadUntil(char *stop) {
	alt_u8 data, parity;
	unsigned readAvailable;
	char message[WIFI_READ_BUFFER_SIZE];
	int messageLength = 0;
	int stopLength = strnlen(stop, WIFI_READ_STOP_MARKER_MAX_SIZE);
	// Read until the message buffer matches the stop string.
	while (!stringEndsWith(message, messageLength, stop, stopLength)) {
		// Check for next character.
		readAvailable = alt_up_rs232_get_used_space_in_read_FIFO(wifi);
		while (readAvailable > READ_FIFO_EMPTY) {
			// Read next character into the message buffer.
			alt_up_rs232_read_data(wifi, &data, parity);
			message[messageLength] = (char)data;
			// Check for next character.
			readAvailable = alt_up_rs232_get_used_space_in_read_FIFO(wifi);
		}
	}

}

wifiConfigRead() {
	wifiReadUntil("\r");
}

wifiConfigEnter() {
	OSTimeDly(0, 0, 1, 0);
	wifiWrite("+++");
	OSTimeDly(0, 0, 2, 0);
	wifiConfigRead();
}

wifiConfigSend(char *command) {
	wifiWrite(command);
	wifiConfigRead();
}

void helper_test_task(void *pdata) {
	bool t0 = stringEndsWith("", 0, "na", 2);
	bool t1 = stringEndsWith("banana", 6, "na", 2);
	bool t2 = stringEndsWith("rasberry", 8, "na", 2);
	printf("stringEndsWith('', 'na'): %s", t0? "true" : "false");
	printf("stringEndsWith('banana', 'na'): %s", t1? "true" : "false");
	printf("stringEndsWith('rasberry', 'na'): %s", t2? "true" : "false");
}

/* Communicates with the Xbee wifi module. */
void wifi_task(void *pdata) {
	while (true) {
		wifiConfigEnter();			// Enter command mode.
		wifiConfigSend("ATCN"); 	// Exit command mode.
		OSTimeDlyHMSM(0, 0, 5, 0); 	// Wait 5 seconds.
	}
}

/* The main function creates two task and starts multi-tasking */
int main(void)
{

	// Register tasks.
	OSTaskCreateExt(helper_test_task,
			NULL,
			(void *)&task1_stk[TASK_STACKSIZE-1],
			TASK1_PRIORITY,
			TASK1_PRIORITY,
			task1_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	// Open wifi UART device.
	wifi = alt_up_rs232_open_dev(UART_WIFI_NAME);
	if (wifi != NULL) {
		printf("Opened wifi UART device\n");
		// Start.
		OSStart();
	} else {
		printf("Could not open wifi UART device\n");
	}

	return 0;
}

/******************************************************************************
 *                                                                             *
 * License Agreement                                                           *
 *                                                                             *
 * Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *
 * All rights reserved.                                                        *
 *                                                                             *
 * Permission is hereby granted, free of charge, to any person obtaining a     *
 * copy of this software and associated documentation files (the "Software"),  *
 * to deal in the Software without restriction, including without limitation   *
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
 * and/or sell copies of the Software, and to permit persons to whom the       *
 * Software is furnished to do so, subject to the following conditions:        *
 *                                                                             *
 * The above copyright notice and this permission notice shall be included in  *
 * all copies or substantial portions of the Software.                         *
 *                                                                             *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
 * DEALINGS IN THE SOFTWARE.                                                   *
 *                                                                             *
 * This agreement shall be governed in all respects by the laws of the State   *
 * of California and by the laws of the United States of America.              *
 * Altera does not recommend, suggest or require that this reference design    *
 * file be used in conjunction or combination with any other product.          *
 ******************************************************************************/
