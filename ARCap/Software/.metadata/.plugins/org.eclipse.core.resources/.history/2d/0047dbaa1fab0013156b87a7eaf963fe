/*
 * NetworkHandler.cpp
 *
 *  Created on: 2014-03-03
 *      Author: Kenan Kigunda, Amshu Gongal
 */

using namespace std;
#include <iostream>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "NetworkHandler.h"

#define WRITE_FIFO_EMPTY	0x20
#define READ_FIFO_EMPTY		0x0

#define WIFI_READ_MAX_SIZE	1024
#define WIFI_READ_STOP_MARKER_MAX_SIZE	32

#define WIFI_HTTP_REQUEST_MAX_LENGTH	128

typedef struct WifiMessage {
	char content[WIFI_READ_MAX_SIZE];
	int length;
} WifiMessage;

// ALLOCATION
NetworkHandler::NetworkHandler() {}
NetworkHandler::~NetworkHandler() {}

// INITIALIZATION

/*
 * Initializes this data source.
 * @return OK if there are no initialization errors
 */
Status NetworkHandler::init() {
	return OK;
}

// SERIAL COMMUNICATIONS

/**
 * Indicates whether the string "whole", of length "wholeLength", ends with
 * the substring given by "end", of length "endLength".
 * @return true if the whole string is longer than the end string and the last
 * endLength characters of the whole string are the same as the end string.
 */
bool stringEndsWith(char *whole, int wholeLength, char *end, int endLength) {
	if (wholeLength < endLength) {
		return false;
	} else {
		return strncmp(whole + wholeLength - endLength, end, endLength) == 0;
	}
}

/*
 * Clears the given wifi message.
 * @param message - the message object to clear
 */
void wifiMessageClear(WifiMessage *message) {
	memset((void *)message, 0, sizeof(WifiMessage));
}

// OUTGOING

/*
 * Sends a network command to the remote server.
 * @param command - the command to send
 * @param parameters - the parameters specifying further command details,
 * in the format param1=value1&param2=value2&...
 */
Status NetworkHandler::send(NetworkCommand command, string parameters) {
	NETWORKHANDLER_SEND_LOG(cout << "NetworkHandler [direction: out, command: " <<  (int)command << ", parameters: ?" << parameters << "\n");
	return OK;
}

// INCOMING

/*
 * Updates this data source.
 * @return OK if all incoming network messages have been read and posted to all listeners without error
 */
Status NetworkHandler::update() {
	return OK;
}
